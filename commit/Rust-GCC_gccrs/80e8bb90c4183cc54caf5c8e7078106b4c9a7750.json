{"sha": "80e8bb90c4183cc54caf5c8e7078106b4c9a7750", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBlOGJiOTBjNDE4M2NjNTRjYWY1YzhlNzA3ODEwNmI0YzlhNzc1MA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-01-09T11:23:25Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-01-09T11:23:25Z"}, "message": "i386.c (bdesc_2arg): Update names for mmx_ prefixes.\n\n\t* config/i386/i386.c (bdesc_2arg): Update names for mmx_ prefixes.\n\t(ix86_expand_builtin): Likewise.  Frob MASKMOVQ wrt the input mem\n\tjust like MASKMOVDQU.  Return plain zero for MMX_ZERO.\n\t* config/i386/i386.md (MMXMODEI, mov<MMXMODEI>,\n\tmov<MMXMODEI>_internal_rex64, mov<MMXMODEI>_internal, movv2sf,\n\tmovv2sf_internal_rex64, movv2sf_internal, MMXMODE,\n\tmovmisalign<MMXMODE>, mmx_pmovmskb, mmx_maskmovq, mmx_maskmovq_rex,\n\tsse_movntdi, addv8qi3, addv4hi3, addv2si3, mmx_adddi3, ssaddv8qi3,\n\tssaddv4hi3, usaddv8qi3, usaddv4hi3, subv8qi3, subv4hi3, subv2si3,\n\tmmx_subdi3, sssubv8qi3, sssubv4hi3, ussubv8qi3, ussubv4hi3,\n\tmulv4hi3, smulv4hi3_highpart, umulv4hi3_highpart, mmx_pmaddwd,\n\tsse2_umulsidi3, mmx_iordi3, mmx_xordi3, mmx_anddi3, mmx_nanddi3,\n\tmmx_uavgv8qi3, mmx_uavgv4hi3, mmx_psadbw, mmx_pinsrw, mmx_pinsrw,\n\tmmx_pextrw, mmx_pshufw, eqv8qi3, eqv4hi3, eqv2si3, gtv8qi3, gtv4hi3,\n\tgtv2si3, umaxv8qi3, smaxv4hi3, uminv8qi3, sminv4hi3, ashrv4hi3,\n\tashrv2si3, lshrv4hi3, lshrv2si3, mmx_lshrdi3, ashlv4hi3, ashlv2si3,\n\tmmx_ashldi3, mmx_packsswb, mmx_packssdw, mmx_packuswb, mmx_punpckhbw,\n\tmmx_punpckhwd, mmx_punpckhdq, mmx_punpcklbw, mmx_punpcklwd,\n\tmmx_punpckldq, emms, addv2sf3, subv2sf3, subrv2sf3, gtv2sf3, gev2sf3,\n\teqv2sf3, pfmaxv2sf3, pfminv2sf3, mulv2sf3, femms, pf2id, pf2iw,\n\tpfacc, pfnacc, pfpnacc, pi2fw, floatv2si2, pfrcpv2sf2, pfrcpit1v2sf3,\n\tpfrcpit2v2sf3, pfrsqrtv2sf2, pfrsqit1v2sf3, pmulhrwv4hi3, pswapdv2si2,\n\tpswapdv2sf2): Move to mmx.md; rename as necessary with leading\n\tmmx_ prefix.\n\t(mmx_clrdi, pavgusb): Remove.\n\t(ldmxcsr, stmxcsr, sfence, sfence_insn): Move to sse.md; rename\n\twith leading sse_ prefix.\n\t* config/i386/sse.md: Receive them.\n\t* config/i386/mmx.md: New file.\n\t(MMXMODE12, MMXMODE24, mmxvecsize): New.\n\t(subrv2sf3): Turn into expander for normal subtraction.\n\t(mmx_addv2sf3, mmx_mulv2sf3, mmx_smaxv2sf3, mmx_sminv2sf3,\n\tmmx_eqv2sf3, mmx_mulv4hi3, mmx_smulv4hi3_highpart,\n\tmmx_umulv4hi3_highpart, mmx_pmaddwd, mmx_pmulhrwv4hi3, sse2_umulsidi3,\n\tmmx_umaxv8qi3, mmx_smaxv4hi3, mmx_uminv8qi3, mmx_sminv4hi3): Mark\n\tcommutative; use ix86_binary_operator_ok.\n\t(mmx_add<MMXMODEI>3, mmx_ssadd<MMXMODE12>3, mmx_usadd<MMXMODE12>3,\n\tmmx_sub<MMXMODEI>3, mmx_sssub<MMXMODE12>3, mmx_ussub<MMXMODE12>3\n\tmmx_ashr<MMXMODE24>3, mmx_lshr<MMXMODE23>3, mmx_ashl<MMXMODE24>3\n\tmmx_eq<MMXMODEI>3, mmx_gt<MMXMODEI>3, mmx_and<MMXMODEI>3,\n\tmmx_nand<MMXMODEI>3, mmx_ior<MMXMODEI>3, mmx_xor<MMXMODEI>3):\n\tMacroize from existing patterns; use ix86_binary_operator_ok.\n\t(mmx_packsswb, mmx_packssdw, mmx_packuswb): Add memory alternative.\n\t(mmx_punpckhbw, mmx_punpcklbw, mmx_punpckhwd, mmx_punpcklwd,\n\tmmx_punpckhdq, mmx_punpckhdq, mmx_punpckldq): Likewise.  Model\n\twith vec_select+vec_concat.\n\t(mmx_pshufw, mmx_pshufw_1): Likewise.\n\t(mmx_uavgv8qi3): Merge pavgusb.  Model correcty.\n\t(mmx_uavgv4hi3): Model correctly.\n\t* config/i386/mmintrin.h (_mm_and_si64, _mm_andnot_si64, _mm_or_si64,\n\t_mm_xor_si64): Remove casts.\n\nFrom-SVN: r93107", "tree": {"sha": "55d0f405df1a5cedce3559851fdbb25f93e31797", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55d0f405df1a5cedce3559851fdbb25f93e31797"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80e8bb90c4183cc54caf5c8e7078106b4c9a7750", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80e8bb90c4183cc54caf5c8e7078106b4c9a7750", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80e8bb90c4183cc54caf5c8e7078106b4c9a7750", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80e8bb90c4183cc54caf5c8e7078106b4c9a7750/comments", "author": null, "committer": null, "parents": [{"sha": "eb0bc7afa59efedadddc1185112b96e769bdc2b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb0bc7afa59efedadddc1185112b96e769bdc2b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb0bc7afa59efedadddc1185112b96e769bdc2b9"}], "stats": {"total": 2642, "additions": 1307, "deletions": 1335}, "files": [{"sha": "31d29e4f68f1c61fe2e3e7d9d3fcfe31782feb69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e8bb90c4183cc54caf5c8e7078106b4c9a7750/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e8bb90c4183cc54caf5c8e7078106b4c9a7750/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80e8bb90c4183cc54caf5c8e7078106b4c9a7750", "patch": "@@ -1,3 +1,57 @@\n+2005-01-09  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.c (bdesc_2arg): Update names for mmx_ prefixes.\n+\t(ix86_expand_builtin): Likewise.  Frob MASKMOVQ wrt the input mem\n+\tjust like MASKMOVDQU.  Return plain zero for MMX_ZERO.\n+\t* config/i386/i386.md (MMXMODEI, mov<MMXMODEI>,\n+\tmov<MMXMODEI>_internal_rex64, mov<MMXMODEI>_internal, movv2sf,\n+\tmovv2sf_internal_rex64, movv2sf_internal, MMXMODE,\n+\tmovmisalign<MMXMODE>, mmx_pmovmskb, mmx_maskmovq, mmx_maskmovq_rex,\n+\tsse_movntdi, addv8qi3, addv4hi3, addv2si3, mmx_adddi3, ssaddv8qi3,\n+\tssaddv4hi3, usaddv8qi3, usaddv4hi3, subv8qi3, subv4hi3, subv2si3,\n+\tmmx_subdi3, sssubv8qi3, sssubv4hi3, ussubv8qi3, ussubv4hi3,\n+\tmulv4hi3, smulv4hi3_highpart, umulv4hi3_highpart, mmx_pmaddwd,\n+\tsse2_umulsidi3, mmx_iordi3, mmx_xordi3, mmx_anddi3, mmx_nanddi3,\n+\tmmx_uavgv8qi3, mmx_uavgv4hi3, mmx_psadbw, mmx_pinsrw, mmx_pinsrw,\n+\tmmx_pextrw, mmx_pshufw, eqv8qi3, eqv4hi3, eqv2si3, gtv8qi3, gtv4hi3,\n+\tgtv2si3, umaxv8qi3, smaxv4hi3, uminv8qi3, sminv4hi3, ashrv4hi3,\n+\tashrv2si3, lshrv4hi3, lshrv2si3, mmx_lshrdi3, ashlv4hi3, ashlv2si3,\n+\tmmx_ashldi3, mmx_packsswb, mmx_packssdw, mmx_packuswb, mmx_punpckhbw,\n+\tmmx_punpckhwd, mmx_punpckhdq, mmx_punpcklbw, mmx_punpcklwd, \n+\tmmx_punpckldq, emms, addv2sf3, subv2sf3, subrv2sf3, gtv2sf3, gev2sf3,\n+\teqv2sf3, pfmaxv2sf3, pfminv2sf3, mulv2sf3, femms, pf2id, pf2iw,\n+\tpfacc, pfnacc, pfpnacc, pi2fw, floatv2si2, pfrcpv2sf2, pfrcpit1v2sf3,\n+\tpfrcpit2v2sf3, pfrsqrtv2sf2, pfrsqit1v2sf3, pmulhrwv4hi3, pswapdv2si2,\n+\tpswapdv2sf2): Move to mmx.md; rename as necessary with leading\n+\tmmx_ prefix.\n+\t(mmx_clrdi, pavgusb): Remove.\n+\t(ldmxcsr, stmxcsr, sfence, sfence_insn): Move to sse.md; rename \n+\twith leading sse_ prefix.\n+\t* config/i386/sse.md: Receive them.\n+\t* config/i386/mmx.md: New file.\n+\t(MMXMODE12, MMXMODE24, mmxvecsize): New.\n+\t(subrv2sf3): Turn into expander for normal subtraction.\n+\t(mmx_addv2sf3, mmx_mulv2sf3, mmx_smaxv2sf3, mmx_sminv2sf3,\n+\tmmx_eqv2sf3, mmx_mulv4hi3, mmx_smulv4hi3_highpart,\n+\tmmx_umulv4hi3_highpart, mmx_pmaddwd, mmx_pmulhrwv4hi3, sse2_umulsidi3,\n+\tmmx_umaxv8qi3, mmx_smaxv4hi3, mmx_uminv8qi3, mmx_sminv4hi3): Mark\n+\tcommutative; use ix86_binary_operator_ok.\n+\t(mmx_add<MMXMODEI>3, mmx_ssadd<MMXMODE12>3, mmx_usadd<MMXMODE12>3,\n+\tmmx_sub<MMXMODEI>3, mmx_sssub<MMXMODE12>3, mmx_ussub<MMXMODE12>3\n+\tmmx_ashr<MMXMODE24>3, mmx_lshr<MMXMODE23>3, mmx_ashl<MMXMODE24>3\n+\tmmx_eq<MMXMODEI>3, mmx_gt<MMXMODEI>3, mmx_and<MMXMODEI>3, \n+\tmmx_nand<MMXMODEI>3, mmx_ior<MMXMODEI>3, mmx_xor<MMXMODEI>3):\n+\tMacroize from existing patterns; use ix86_binary_operator_ok.\n+\t(mmx_packsswb, mmx_packssdw, mmx_packuswb): Add memory alternative.\n+\t(mmx_punpckhbw, mmx_punpcklbw, mmx_punpckhwd, mmx_punpcklwd,\n+\tmmx_punpckhdq, mmx_punpckhdq, mmx_punpckldq): Likewise.  Model\n+\twith vec_select+vec_concat.\n+\t(mmx_pshufw, mmx_pshufw_1): Likewise.\n+\t(mmx_uavgv8qi3): Merge pavgusb.  Model correcty.\n+\t(mmx_uavgv4hi3): Model correctly.\n+\t* config/i386/mmintrin.h (_mm_and_si64, _mm_andnot_si64, _mm_or_si64,\n+\t_mm_xor_si64): Remove casts.\n+\n 2005-01-09  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \tPR tree-optimization/19224"}, {"sha": "91bbac34c0dbca27f43d89d29ade1cb8b0122b06", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 77, "deletions": 83, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e8bb90c4183cc54caf5c8e7078106b4c9a7750/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e8bb90c4183cc54caf5c8e7078106b4c9a7750/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=80e8bb90c4183cc54caf5c8e7078106b4c9a7750", "patch": "@@ -12259,47 +12259,47 @@ static const struct builtin_description bdesc_2arg[] =\n   { MASK_SSE, CODE_FOR_sse_unpcklps, \"__builtin_ia32_unpcklps\", IX86_BUILTIN_UNPCKLPS, 0, 0 },\n \n   /* MMX */\n-  { MASK_MMX, CODE_FOR_addv8qi3, \"__builtin_ia32_paddb\", IX86_BUILTIN_PADDB, 0, 0 },\n-  { MASK_MMX, CODE_FOR_addv4hi3, \"__builtin_ia32_paddw\", IX86_BUILTIN_PADDW, 0, 0 },\n-  { MASK_MMX, CODE_FOR_addv2si3, \"__builtin_ia32_paddd\", IX86_BUILTIN_PADDD, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_addv8qi3, \"__builtin_ia32_paddb\", IX86_BUILTIN_PADDB, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_addv4hi3, \"__builtin_ia32_paddw\", IX86_BUILTIN_PADDW, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_addv2si3, \"__builtin_ia32_paddd\", IX86_BUILTIN_PADDD, 0, 0 },\n   { MASK_MMX, CODE_FOR_mmx_adddi3, \"__builtin_ia32_paddq\", IX86_BUILTIN_PADDQ, 0, 0 },\n-  { MASK_MMX, CODE_FOR_subv8qi3, \"__builtin_ia32_psubb\", IX86_BUILTIN_PSUBB, 0, 0 },\n-  { MASK_MMX, CODE_FOR_subv4hi3, \"__builtin_ia32_psubw\", IX86_BUILTIN_PSUBW, 0, 0 },\n-  { MASK_MMX, CODE_FOR_subv2si3, \"__builtin_ia32_psubd\", IX86_BUILTIN_PSUBD, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_subv8qi3, \"__builtin_ia32_psubb\", IX86_BUILTIN_PSUBB, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_subv4hi3, \"__builtin_ia32_psubw\", IX86_BUILTIN_PSUBW, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_subv2si3, \"__builtin_ia32_psubd\", IX86_BUILTIN_PSUBD, 0, 0 },\n   { MASK_MMX, CODE_FOR_mmx_subdi3, \"__builtin_ia32_psubq\", IX86_BUILTIN_PSUBQ, 0, 0 },\n \n-  { MASK_MMX, CODE_FOR_ssaddv8qi3, \"__builtin_ia32_paddsb\", IX86_BUILTIN_PADDSB, 0, 0 },\n-  { MASK_MMX, CODE_FOR_ssaddv4hi3, \"__builtin_ia32_paddsw\", IX86_BUILTIN_PADDSW, 0, 0 },\n-  { MASK_MMX, CODE_FOR_sssubv8qi3, \"__builtin_ia32_psubsb\", IX86_BUILTIN_PSUBSB, 0, 0 },\n-  { MASK_MMX, CODE_FOR_sssubv4hi3, \"__builtin_ia32_psubsw\", IX86_BUILTIN_PSUBSW, 0, 0 },\n-  { MASK_MMX, CODE_FOR_usaddv8qi3, \"__builtin_ia32_paddusb\", IX86_BUILTIN_PADDUSB, 0, 0 },\n-  { MASK_MMX, CODE_FOR_usaddv4hi3, \"__builtin_ia32_paddusw\", IX86_BUILTIN_PADDUSW, 0, 0 },\n-  { MASK_MMX, CODE_FOR_ussubv8qi3, \"__builtin_ia32_psubusb\", IX86_BUILTIN_PSUBUSB, 0, 0 },\n-  { MASK_MMX, CODE_FOR_ussubv4hi3, \"__builtin_ia32_psubusw\", IX86_BUILTIN_PSUBUSW, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_ssaddv8qi3, \"__builtin_ia32_paddsb\", IX86_BUILTIN_PADDSB, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_ssaddv4hi3, \"__builtin_ia32_paddsw\", IX86_BUILTIN_PADDSW, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_sssubv8qi3, \"__builtin_ia32_psubsb\", IX86_BUILTIN_PSUBSB, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_sssubv4hi3, \"__builtin_ia32_psubsw\", IX86_BUILTIN_PSUBSW, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_usaddv8qi3, \"__builtin_ia32_paddusb\", IX86_BUILTIN_PADDUSB, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_usaddv4hi3, \"__builtin_ia32_paddusw\", IX86_BUILTIN_PADDUSW, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_ussubv8qi3, \"__builtin_ia32_psubusb\", IX86_BUILTIN_PSUBUSB, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_ussubv4hi3, \"__builtin_ia32_psubusw\", IX86_BUILTIN_PSUBUSW, 0, 0 },\n \n-  { MASK_MMX, CODE_FOR_mulv4hi3, \"__builtin_ia32_pmullw\", IX86_BUILTIN_PMULLW, 0, 0 },\n-  { MASK_MMX, CODE_FOR_smulv4hi3_highpart, \"__builtin_ia32_pmulhw\", IX86_BUILTIN_PMULHW, 0, 0 },\n-  { MASK_SSE | MASK_3DNOW_A, CODE_FOR_umulv4hi3_highpart, \"__builtin_ia32_pmulhuw\", IX86_BUILTIN_PMULHUW, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_mulv4hi3, \"__builtin_ia32_pmullw\", IX86_BUILTIN_PMULLW, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_smulv4hi3_highpart, \"__builtin_ia32_pmulhw\", IX86_BUILTIN_PMULHW, 0, 0 },\n+  { MASK_SSE | MASK_3DNOW_A, CODE_FOR_mmx_umulv4hi3_highpart, \"__builtin_ia32_pmulhuw\", IX86_BUILTIN_PMULHUW, 0, 0 },\n \n-  { MASK_MMX, CODE_FOR_mmx_anddi3, \"__builtin_ia32_pand\", IX86_BUILTIN_PAND, 0, 0 },\n-  { MASK_MMX, CODE_FOR_mmx_nanddi3, \"__builtin_ia32_pandn\", IX86_BUILTIN_PANDN, 0, 0 },\n-  { MASK_MMX, CODE_FOR_mmx_iordi3, \"__builtin_ia32_por\", IX86_BUILTIN_POR, 0, 0 },\n-  { MASK_MMX, CODE_FOR_mmx_xordi3, \"__builtin_ia32_pxor\", IX86_BUILTIN_PXOR, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_andv2si3, \"__builtin_ia32_pand\", IX86_BUILTIN_PAND, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_nandv2si3, \"__builtin_ia32_pandn\", IX86_BUILTIN_PANDN, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_iorv2si3, \"__builtin_ia32_por\", IX86_BUILTIN_POR, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_xorv2si3, \"__builtin_ia32_pxor\", IX86_BUILTIN_PXOR, 0, 0 },\n \n   { MASK_SSE | MASK_3DNOW_A, CODE_FOR_mmx_uavgv8qi3, \"__builtin_ia32_pavgb\", IX86_BUILTIN_PAVGB, 0, 0 },\n   { MASK_SSE | MASK_3DNOW_A, CODE_FOR_mmx_uavgv4hi3, \"__builtin_ia32_pavgw\", IX86_BUILTIN_PAVGW, 0, 0 },\n \n-  { MASK_MMX, CODE_FOR_eqv8qi3, \"__builtin_ia32_pcmpeqb\", IX86_BUILTIN_PCMPEQB, 0, 0 },\n-  { MASK_MMX, CODE_FOR_eqv4hi3, \"__builtin_ia32_pcmpeqw\", IX86_BUILTIN_PCMPEQW, 0, 0 },\n-  { MASK_MMX, CODE_FOR_eqv2si3, \"__builtin_ia32_pcmpeqd\", IX86_BUILTIN_PCMPEQD, 0, 0 },\n-  { MASK_MMX, CODE_FOR_gtv8qi3, \"__builtin_ia32_pcmpgtb\", IX86_BUILTIN_PCMPGTB, 0, 0 },\n-  { MASK_MMX, CODE_FOR_gtv4hi3, \"__builtin_ia32_pcmpgtw\", IX86_BUILTIN_PCMPGTW, 0, 0 },\n-  { MASK_MMX, CODE_FOR_gtv2si3, \"__builtin_ia32_pcmpgtd\", IX86_BUILTIN_PCMPGTD, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_eqv8qi3, \"__builtin_ia32_pcmpeqb\", IX86_BUILTIN_PCMPEQB, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_eqv4hi3, \"__builtin_ia32_pcmpeqw\", IX86_BUILTIN_PCMPEQW, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_eqv2si3, \"__builtin_ia32_pcmpeqd\", IX86_BUILTIN_PCMPEQD, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_gtv8qi3, \"__builtin_ia32_pcmpgtb\", IX86_BUILTIN_PCMPGTB, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_gtv4hi3, \"__builtin_ia32_pcmpgtw\", IX86_BUILTIN_PCMPGTW, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_gtv2si3, \"__builtin_ia32_pcmpgtd\", IX86_BUILTIN_PCMPGTD, 0, 0 },\n \n-  { MASK_SSE | MASK_3DNOW_A, CODE_FOR_umaxv8qi3, \"__builtin_ia32_pmaxub\", IX86_BUILTIN_PMAXUB, 0, 0 },\n-  { MASK_SSE | MASK_3DNOW_A, CODE_FOR_smaxv4hi3, \"__builtin_ia32_pmaxsw\", IX86_BUILTIN_PMAXSW, 0, 0 },\n-  { MASK_SSE | MASK_3DNOW_A, CODE_FOR_uminv8qi3, \"__builtin_ia32_pminub\", IX86_BUILTIN_PMINUB, 0, 0 },\n-  { MASK_SSE | MASK_3DNOW_A, CODE_FOR_sminv4hi3, \"__builtin_ia32_pminsw\", IX86_BUILTIN_PMINSW, 0, 0 },\n+  { MASK_SSE | MASK_3DNOW_A, CODE_FOR_mmx_umaxv8qi3, \"__builtin_ia32_pmaxub\", IX86_BUILTIN_PMAXUB, 0, 0 },\n+  { MASK_SSE | MASK_3DNOW_A, CODE_FOR_mmx_smaxv4hi3, \"__builtin_ia32_pmaxsw\", IX86_BUILTIN_PMAXSW, 0, 0 },\n+  { MASK_SSE | MASK_3DNOW_A, CODE_FOR_mmx_uminv8qi3, \"__builtin_ia32_pminub\", IX86_BUILTIN_PMINUB, 0, 0 },\n+  { MASK_SSE | MASK_3DNOW_A, CODE_FOR_mmx_sminv4hi3, \"__builtin_ia32_pminsw\", IX86_BUILTIN_PMINSW, 0, 0 },\n \n   { MASK_MMX, CODE_FOR_mmx_punpckhbw, \"__builtin_ia32_punpckhbw\", IX86_BUILTIN_PUNPCKHBW, 0, 0 },\n   { MASK_MMX, CODE_FOR_mmx_punpckhwd, \"__builtin_ia32_punpckhwd\", IX86_BUILTIN_PUNPCKHWD, 0, 0 },\n@@ -12317,24 +12317,24 @@ static const struct builtin_description bdesc_2arg[] =\n   { MASK_SSE, CODE_FOR_sse_cvtsi2ss, 0, IX86_BUILTIN_CVTSI2SS, 0, 0 },\n   { MASK_SSE | MASK_64BIT, CODE_FOR_sse_cvtsi2ssq, 0, IX86_BUILTIN_CVTSI642SS, 0, 0 },\n \n-  { MASK_MMX, CODE_FOR_ashlv4hi3, 0, IX86_BUILTIN_PSLLW, 0, 0 },\n-  { MASK_MMX, CODE_FOR_ashlv4hi3, 0, IX86_BUILTIN_PSLLWI, 0, 0 },\n-  { MASK_MMX, CODE_FOR_ashlv2si3, 0, IX86_BUILTIN_PSLLD, 0, 0 },\n-  { MASK_MMX, CODE_FOR_ashlv2si3, 0, IX86_BUILTIN_PSLLDI, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_ashlv4hi3, 0, IX86_BUILTIN_PSLLW, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_ashlv4hi3, 0, IX86_BUILTIN_PSLLWI, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_ashlv2si3, 0, IX86_BUILTIN_PSLLD, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_ashlv2si3, 0, IX86_BUILTIN_PSLLDI, 0, 0 },\n   { MASK_MMX, CODE_FOR_mmx_ashldi3, 0, IX86_BUILTIN_PSLLQ, 0, 0 },\n   { MASK_MMX, CODE_FOR_mmx_ashldi3, 0, IX86_BUILTIN_PSLLQI, 0, 0 },\n \n-  { MASK_MMX, CODE_FOR_lshrv4hi3, 0, IX86_BUILTIN_PSRLW, 0, 0 },\n-  { MASK_MMX, CODE_FOR_lshrv4hi3, 0, IX86_BUILTIN_PSRLWI, 0, 0 },\n-  { MASK_MMX, CODE_FOR_lshrv2si3, 0, IX86_BUILTIN_PSRLD, 0, 0 },\n-  { MASK_MMX, CODE_FOR_lshrv2si3, 0, IX86_BUILTIN_PSRLDI, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_lshrv4hi3, 0, IX86_BUILTIN_PSRLW, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_lshrv4hi3, 0, IX86_BUILTIN_PSRLWI, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_lshrv2si3, 0, IX86_BUILTIN_PSRLD, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_lshrv2si3, 0, IX86_BUILTIN_PSRLDI, 0, 0 },\n   { MASK_MMX, CODE_FOR_mmx_lshrdi3, 0, IX86_BUILTIN_PSRLQ, 0, 0 },\n   { MASK_MMX, CODE_FOR_mmx_lshrdi3, 0, IX86_BUILTIN_PSRLQI, 0, 0 },\n \n-  { MASK_MMX, CODE_FOR_ashrv4hi3, 0, IX86_BUILTIN_PSRAW, 0, 0 },\n-  { MASK_MMX, CODE_FOR_ashrv4hi3, 0, IX86_BUILTIN_PSRAWI, 0, 0 },\n-  { MASK_MMX, CODE_FOR_ashrv2si3, 0, IX86_BUILTIN_PSRAD, 0, 0 },\n-  { MASK_MMX, CODE_FOR_ashrv2si3, 0, IX86_BUILTIN_PSRADI, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_ashrv4hi3, 0, IX86_BUILTIN_PSRAW, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_ashrv4hi3, 0, IX86_BUILTIN_PSRAWI, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_ashrv2si3, 0, IX86_BUILTIN_PSRAD, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_ashrv2si3, 0, IX86_BUILTIN_PSRADI, 0, 0 },\n \n   { MASK_SSE | MASK_3DNOW_A, CODE_FOR_mmx_psadbw, 0, IX86_BUILTIN_PSADBW, 0, 0 },\n   { MASK_MMX, CODE_FOR_mmx_pmaddwd, 0, IX86_BUILTIN_PMADDWD, 0, 0 },\n@@ -13471,11 +13471,11 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n   switch (fcode)\n     {\n     case IX86_BUILTIN_EMMS:\n-      emit_insn (gen_emms ());\n+      emit_insn (gen_mmx_emms ());\n       return 0;\n \n     case IX86_BUILTIN_SFENCE:\n-      emit_insn (gen_sfence ());\n+      emit_insn (gen_sse_sfence ());\n       return 0;\n \n     case IX86_BUILTIN_PEXTRW:\n@@ -13549,8 +13549,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n     case IX86_BUILTIN_MASKMOVQ:\n     case IX86_BUILTIN_MASKMOVDQU:\n       icode = (fcode == IX86_BUILTIN_MASKMOVQ\n-\t       ? (TARGET_64BIT ? CODE_FOR_mmx_maskmovq_rex\n-\t\t  : CODE_FOR_mmx_maskmovq)\n+\t       ? CODE_FOR_mmx_maskmovq\n \t       : CODE_FOR_sse2_maskmovdqu);\n       /* Note the arg order is different from the operand order.  */\n       arg1 = TREE_VALUE (arglist);\n@@ -13563,11 +13562,8 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       mode1 = insn_data[icode].operand[1].mode;\n       mode2 = insn_data[icode].operand[2].mode;\n \n-      if (fcode == IX86_BUILTIN_MASKMOVDQU)\n-\t{\n-\t  op0 = force_reg (Pmode, op0);\n-\t  op0 = gen_rtx_MEM (V16QImode, op0);\n-\t}\n+      op0 = force_reg (Pmode, op0);\n+      op0 = gen_rtx_MEM (mode1, op0);\n \n       if (! (*insn_data[icode].operand[0].predicate) (op0, mode0))\n \top0 = copy_to_mode_reg (mode0, op0);\n@@ -13667,12 +13663,12 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       op0 = expand_expr (TREE_VALUE (arglist), NULL_RTX, VOIDmode, 0);\n       target = assign_386_stack_local (SImode, 0);\n       emit_move_insn (target, op0);\n-      emit_insn (gen_ldmxcsr (target));\n+      emit_insn (gen_sse_ldmxcsr (target));\n       return 0;\n \n     case IX86_BUILTIN_STMXCSR:\n       target = assign_386_stack_local (SImode, 0);\n-      emit_insn (gen_stmxcsr (target));\n+      emit_insn (gen_sse_stmxcsr (target));\n       return copy_to_mode_reg (SImode, target);\n \n     case IX86_BUILTIN_SHUFPS:\n@@ -13776,91 +13772,89 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       return target;\n \n     case IX86_BUILTIN_FEMMS:\n-      emit_insn (gen_femms ());\n+      emit_insn (gen_mmx_femms ());\n       return NULL_RTX;\n \n     case IX86_BUILTIN_PAVGUSB:\n-      return ix86_expand_binop_builtin (CODE_FOR_pavgusb, arglist, target);\n+      return ix86_expand_binop_builtin (CODE_FOR_mmx_uavgv8qi3, arglist, target);\n \n     case IX86_BUILTIN_PF2ID:\n-      return ix86_expand_unop_builtin (CODE_FOR_pf2id, arglist, target, 0);\n+      return ix86_expand_unop_builtin (CODE_FOR_mmx_pf2id, arglist, target, 0);\n \n     case IX86_BUILTIN_PFACC:\n-      return ix86_expand_binop_builtin (CODE_FOR_pfacc, arglist, target);\n+      return ix86_expand_binop_builtin (CODE_FOR_mmx_haddv2sf3, arglist, target);\n \n     case IX86_BUILTIN_PFADD:\n-     return ix86_expand_binop_builtin (CODE_FOR_addv2sf3, arglist, target);\n+     return ix86_expand_binop_builtin (CODE_FOR_mmx_addv2sf3, arglist, target);\n \n     case IX86_BUILTIN_PFCMPEQ:\n-      return ix86_expand_binop_builtin (CODE_FOR_eqv2sf3, arglist, target);\n+      return ix86_expand_binop_builtin (CODE_FOR_mmx_eqv2sf3, arglist, target);\n \n     case IX86_BUILTIN_PFCMPGE:\n-      return ix86_expand_binop_builtin (CODE_FOR_gev2sf3, arglist, target);\n+      return ix86_expand_binop_builtin (CODE_FOR_mmx_gev2sf3, arglist, target);\n \n     case IX86_BUILTIN_PFCMPGT:\n-      return ix86_expand_binop_builtin (CODE_FOR_gtv2sf3, arglist, target);\n+      return ix86_expand_binop_builtin (CODE_FOR_mmx_gtv2sf3, arglist, target);\n \n     case IX86_BUILTIN_PFMAX:\n-      return ix86_expand_binop_builtin (CODE_FOR_pfmaxv2sf3, arglist, target);\n+      return ix86_expand_binop_builtin (CODE_FOR_mmx_smaxv2sf3, arglist, target);\n \n     case IX86_BUILTIN_PFMIN:\n-      return ix86_expand_binop_builtin (CODE_FOR_pfminv2sf3, arglist, target);\n+      return ix86_expand_binop_builtin (CODE_FOR_mmx_sminv2sf3, arglist, target);\n \n     case IX86_BUILTIN_PFMUL:\n-      return ix86_expand_binop_builtin (CODE_FOR_mulv2sf3, arglist, target);\n+      return ix86_expand_binop_builtin (CODE_FOR_mmx_mulv2sf3, arglist, target);\n \n     case IX86_BUILTIN_PFRCP:\n-      return ix86_expand_unop_builtin (CODE_FOR_pfrcpv2sf2, arglist, target, 0);\n+      return ix86_expand_unop_builtin (CODE_FOR_mmx_rcpv2sf2, arglist, target, 0);\n \n     case IX86_BUILTIN_PFRCPIT1:\n-      return ix86_expand_binop_builtin (CODE_FOR_pfrcpit1v2sf3, arglist, target);\n+      return ix86_expand_binop_builtin (CODE_FOR_mmx_rcpit1v2sf3, arglist, target);\n \n     case IX86_BUILTIN_PFRCPIT2:\n-      return ix86_expand_binop_builtin (CODE_FOR_pfrcpit2v2sf3, arglist, target);\n+      return ix86_expand_binop_builtin (CODE_FOR_mmx_rcpit2v2sf3, arglist, target);\n \n     case IX86_BUILTIN_PFRSQIT1:\n-      return ix86_expand_binop_builtin (CODE_FOR_pfrsqit1v2sf3, arglist, target);\n+      return ix86_expand_binop_builtin (CODE_FOR_mmx_rsqit1v2sf3, arglist, target);\n \n     case IX86_BUILTIN_PFRSQRT:\n-      return ix86_expand_unop_builtin (CODE_FOR_pfrsqrtv2sf2, arglist, target, 0);\n+      return ix86_expand_unop_builtin (CODE_FOR_mmx_rsqrtv2sf2, arglist, target, 0);\n \n     case IX86_BUILTIN_PFSUB:\n-      return ix86_expand_binop_builtin (CODE_FOR_subv2sf3, arglist, target);\n+      return ix86_expand_binop_builtin (CODE_FOR_mmx_subv2sf3, arglist, target);\n \n     case IX86_BUILTIN_PFSUBR:\n-      return ix86_expand_binop_builtin (CODE_FOR_subrv2sf3, arglist, target);\n+      return ix86_expand_binop_builtin (CODE_FOR_mmx_subrv2sf3, arglist, target);\n \n     case IX86_BUILTIN_PI2FD:\n-      return ix86_expand_unop_builtin (CODE_FOR_floatv2si2, arglist, target, 0);\n+      return ix86_expand_unop_builtin (CODE_FOR_mmx_floatv2si2, arglist, target, 0);\n \n     case IX86_BUILTIN_PMULHRW:\n-      return ix86_expand_binop_builtin (CODE_FOR_pmulhrwv4hi3, arglist, target);\n+      return ix86_expand_binop_builtin (CODE_FOR_mmx_pmulhrwv4hi3, arglist, target);\n \n     case IX86_BUILTIN_PF2IW:\n-      return ix86_expand_unop_builtin (CODE_FOR_pf2iw, arglist, target, 0);\n+      return ix86_expand_unop_builtin (CODE_FOR_mmx_pf2iw, arglist, target, 0);\n \n     case IX86_BUILTIN_PFNACC:\n-      return ix86_expand_binop_builtin (CODE_FOR_pfnacc, arglist, target);\n+      return ix86_expand_binop_builtin (CODE_FOR_mmx_hsubv2sf3, arglist, target);\n \n     case IX86_BUILTIN_PFPNACC:\n-      return ix86_expand_binop_builtin (CODE_FOR_pfpnacc, arglist, target);\n+      return ix86_expand_binop_builtin (CODE_FOR_mmx_addsubv2sf3, arglist, target);\n \n     case IX86_BUILTIN_PI2FW:\n-      return ix86_expand_unop_builtin (CODE_FOR_pi2fw, arglist, target, 0);\n+      return ix86_expand_unop_builtin (CODE_FOR_mmx_pi2fw, arglist, target, 0);\n \n     case IX86_BUILTIN_PSWAPDSI:\n-      return ix86_expand_unop_builtin (CODE_FOR_pswapdv2si2, arglist, target, 0);\n+      return ix86_expand_unop_builtin (CODE_FOR_mmx_pswapdv2si2, arglist, target, 0);\n \n     case IX86_BUILTIN_PSWAPDSF:\n-      return ix86_expand_unop_builtin (CODE_FOR_pswapdv2sf2, arglist, target, 0);\n+      return ix86_expand_unop_builtin (CODE_FOR_mmx_pswapdv2sf2, arglist, target, 0);\n \n     case IX86_BUILTIN_SSE_ZERO:\n       return CONST0_RTX (V4SFmode);\n \n     case IX86_BUILTIN_MMX_ZERO:\n-      target = gen_reg_rtx (DImode);\n-      emit_insn (gen_mmx_clrdi (target));\n-      return target;\n+      return const0_rtx;\n \n     case IX86_BUILTIN_CLRTI:\n       return const0_rtx;"}, {"sha": "194c218c163f4ad789448aa083e939be11e762f9", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1248, "changes": 1249, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e8bb90c4183cc54caf5c8e7078106b4c9a7750/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e8bb90c4183cc54caf5c8e7078106b4c9a7750/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=80e8bb90c4183cc54caf5c8e7078106b4c9a7750", "patch": "@@ -19708,949 +19708,6 @@\n   RET;\n })\n \n-;; Pentium III SIMD instructions.\n-\n-;; Moves for SSE/MMX regs.\n-\n-;; 8 byte integral modes handled by MMX (and by extension, SSE)\n-(define_mode_macro MMXMODEI [V8QI V4HI V2SI])\n-\n-(define_expand \"mov<mode>\"\n-  [(set (match_operand:MMXMODEI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:MMXMODEI 1 \"nonimmediate_operand\" \"\"))]\n-  \"TARGET_MMX\"\n-{\n-  ix86_expand_vector_move (<MODE>mode, operands);\n-  DONE;\n-})\n-\n-(define_insn \"*mov<mode>_internal_rex64\"\n-  [(set (match_operand:MMXMODEI 0 \"nonimmediate_operand\"\n-\t\t\t\t\"=rm,r,*y,*y ,m ,*y,Y ,x,x ,m,r,x\")\n-\t(match_operand:MMXMODEI 1 \"vector_move_operand\"\n-\t\t\t\t\"Cr ,m,C ,*ym,*y,Y ,*y,C,xm,x,x,r\"))]\n-  \"TARGET_64BIT && TARGET_MMX\n-   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n-  \"@\n-    movq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\n-    pxor\\t%0, %0\n-    movq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\n-    movdq2q\\t{%1, %0|%0, %1}\n-    movq2dq\\t{%1, %0|%0, %1}\n-    pxor\\t%0, %0\n-    movq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\n-    movd\\t{%1, %0|%0, %1}\n-    movd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"imov,imov,mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,ssemov,ssemov,ssemov,ssemov,ssemov\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"*mov<mode>_internal\"\n-  [(set (match_operand:MMXMODEI 0 \"nonimmediate_operand\"\n-\t\t\t\t\"=*y,*y ,m ,*y,*Y,*Y,*Y ,m ,*x,*x,*x,m\")\n-\t(match_operand:MMXMODEI 1 \"vector_move_operand\"\n-\t\t\t\t\"C  ,*ym,*y,*Y,*y,C ,*Ym,*Y,C ,*x,m ,*x\"))]\n-  \"TARGET_MMX\n-   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n-  \"@\n-    pxor\\t%0, %0\n-    movq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\n-    movdq2q\\t{%1, %0|%0, %1}\n-    movq2dq\\t{%1, %0|%0, %1}\n-    pxor\\t%0, %0\n-    movq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\n-    xorps\\t%0, %0\n-    movaps\\t{%1, %0|%0, %1}\n-    movlps\\t{%1, %0|%0, %1}\n-    movlps\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,ssemov,ssemov,ssemov,ssemov,ssemov,ssemov,ssemov\")\n-   (set_attr \"mode\" \"DI,DI,DI,DI,DI,TI,DI,DI,V4SF,V4SF,V2SF,V2SF\")])\n-\n-(define_expand \"movv2sf\"\n-  [(set (match_operand:V2SF 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:V2SF 1 \"nonimmediate_operand\" \"\"))]\n-  \"TARGET_MMX\"\n-{\n-  ix86_expand_vector_move (V2SFmode, operands);\n-  DONE;\n-})\n-\n-(define_insn \"*movv2sf_internal_rex64\"\n-  [(set (match_operand:V2SF 0 \"nonimmediate_operand\"\n-\t\t\t\t\"=rm,r,*y ,*y ,m ,*y,Y ,x,x ,m,r,x\")\n-        (match_operand:V2SF 1 \"vector_move_operand\"\n-\t\t\t\t\"Cr ,m ,C ,*ym,*y,Y ,*y,C,xm,x,x,r\"))]\n-  \"TARGET_64BIT && TARGET_MMX\n-   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n-  \"@\n-    movq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\n-    pxor\\t%0, %0\n-    movq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\n-    movdq2q\\t{%1, %0|%0, %1}\n-    movq2dq\\t{%1, %0|%0, %1}\n-    xorps\\t%0, %0\n-    movlps\\t{%1, %0|%0, %1}\n-    movlps\\t{%1, %0|%0, %1}\n-    movd\\t{%1, %0|%0, %1}\n-    movd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"imov,imov,mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,ssemov,ssemov,ssemov,ssemov,ssemov\")\n-   (set_attr \"mode\" \"DI,DI,DI,DI,DI,DI,DI,V4SF,V2SF,V2SF,DI,DI\")])\n-\n-(define_insn \"*movv2sf_internal\"\n-  [(set (match_operand:V2SF 0 \"nonimmediate_operand\"\n-\t\t\t\t\t\"=*y,*y ,m,*y,*Y,*x,*x ,m\")\n-        (match_operand:V2SF 1 \"vector_move_operand\"\n-\t\t\t\t\t\"C ,*ym,*y,*Y,*y,C ,*xm,*x\"))]\n-  \"TARGET_MMX\n-   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n-  \"@\n-    pxor\\t%0, %0\n-    movq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\n-    movdq2q\\t{%1, %0|%0, %1}\n-    movq2dq\\t{%1, %0|%0, %1}\n-    xorps\\t%0, %0\n-    movlps\\t{%1, %0|%0, %1}\n-    movlps\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,ssemov,ssemov,ssemov\")\n-   (set_attr \"mode\" \"DI,DI,DI,DI,DI,V4SF,V2SF,V2SF\")])\n-\n-;; All 8-byte vector modes handled by MMX\n-(define_mode_macro MMXMODE [V8QI V4HI V2SI V2SF])\n-\n-(define_expand \"movmisalign<mode>\"\n-  [(set (match_operand:MMXMODE 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:MMXMODE 1 \"nonimmediate_operand\" \"\"))]\n-  \"TARGET_MMX\"\n-{\n-  ix86_expand_vector_move (<MODE>mode, operands);\n-  DONE;\n-})\n-\n-;; SSE Strange Moves.\n-\n-(define_insn \"mmx_pmovmskb\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(unspec:SI [(match_operand:V8QI 1 \"register_operand\" \"y\")]\n-\t\t   UNSPEC_MOVMSK))]\n-  \"TARGET_SSE || TARGET_3DNOW_A\"\n-  \"pmovmskb\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"mode\" \"V4SF\")])\n-\n-\n-(define_insn \"mmx_maskmovq\"\n-  [(set (mem:V8QI (match_operand:SI 0 \"register_operand\" \"D\"))\n-\t(unspec:V8QI [(match_operand:V8QI 1 \"register_operand\" \"y\")\n-\t\t      (match_operand:V8QI 2 \"register_operand\" \"y\")]\n-\t\t     UNSPEC_MASKMOV))]\n-  \"(TARGET_SSE || TARGET_3DNOW_A) && !TARGET_64BIT\"\n-  ;; @@@ check ordering of operands in intel/nonintel syntax\n-  \"maskmovq\\t{%2, %1|%1, %2}\"\n-  [(set_attr \"type\" \"mmxcvt\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"mmx_maskmovq_rex\"\n-  [(set (mem:V8QI (match_operand:DI 0 \"register_operand\" \"D\"))\n-\t(unspec:V8QI [(match_operand:V8QI 1 \"register_operand\" \"y\")\n-\t\t      (match_operand:V8QI 2 \"register_operand\" \"y\")]\n-\t\t     UNSPEC_MASKMOV))]\n-  \"(TARGET_SSE || TARGET_3DNOW_A) && TARGET_64BIT\"\n-  ;; @@@ check ordering of operands in intel/nonintel syntax\n-  \"maskmovq\\t{%2, %1|%1, %2}\"\n-  [(set_attr \"type\" \"mmxcvt\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"sse_movntdi\"\n-  [(set (match_operand:DI 0 \"memory_operand\" \"=m\")\n-\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"y\")]\n-\t\t   UNSPEC_MOVNT))]\n-  \"TARGET_SSE || TARGET_3DNOW_A\"\n-  \"movntq\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"mmxmov\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-;; MMX insns\n-\n-;; MMX arithmetic\n-\n-(define_insn \"addv8qi3\"\n-  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n-        (plus:V8QI (match_operand:V8QI 1 \"register_operand\" \"%0\")\n-\t           (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_MMX\"\n-  \"paddb\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"addv4hi3\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n-        (plus:V4HI (match_operand:V4HI 1 \"register_operand\" \"%0\")\n-\t           (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_MMX\"\n-  \"paddw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"addv2si3\"\n-  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n-        (plus:V2SI (match_operand:V2SI 1 \"register_operand\" \"%0\")\n-\t           (match_operand:V2SI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_MMX\"\n-  \"paddd\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"mmx_adddi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n-        (unspec:DI\n-\t [(plus:DI (match_operand:DI 1 \"register_operand\" \"%0\")\n-\t\t   (match_operand:DI 2 \"nonimmediate_operand\" \"ym\"))]\n-\t UNSPEC_NOP))]\n-  \"TARGET_MMX\"\n-  \"paddq\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"ssaddv8qi3\"\n-  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n-        (ss_plus:V8QI (match_operand:V8QI 1 \"register_operand\" \"%0\")\n-\t\t      (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_MMX\"\n-  \"paddsb\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"ssaddv4hi3\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n-        (ss_plus:V4HI (match_operand:V4HI 1 \"register_operand\" \"%0\")\n-\t\t      (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_MMX\"\n-  \"paddsw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"usaddv8qi3\"\n-  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n-        (us_plus:V8QI (match_operand:V8QI 1 \"register_operand\" \"%0\")\n-\t\t      (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_MMX\"\n-  \"paddusb\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"usaddv4hi3\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n-        (us_plus:V4HI (match_operand:V4HI 1 \"register_operand\" \"%0\")\n-\t\t      (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_MMX\"\n-  \"paddusw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"subv8qi3\"\n-  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n-        (minus:V8QI (match_operand:V8QI 1 \"register_operand\" \"0\")\n-\t\t    (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_MMX\"\n-  \"psubb\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"subv4hi3\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n-        (minus:V4HI (match_operand:V4HI 1 \"register_operand\" \"0\")\n-\t\t    (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_MMX\"\n-  \"psubw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"subv2si3\"\n-  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n-        (minus:V2SI (match_operand:V2SI 1 \"register_operand\" \"0\")\n-\t\t    (match_operand:V2SI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_MMX\"\n-  \"psubd\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"mmx_subdi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n-        (unspec:DI\n-\t [(minus:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-\t\t    (match_operand:DI 2 \"nonimmediate_operand\" \"ym\"))]\n-\t UNSPEC_NOP))]\n-  \"TARGET_MMX\"\n-  \"psubq\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"sssubv8qi3\"\n-  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n-        (ss_minus:V8QI (match_operand:V8QI 1 \"register_operand\" \"0\")\n-\t\t       (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_MMX\"\n-  \"psubsb\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"sssubv4hi3\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n-        (ss_minus:V4HI (match_operand:V4HI 1 \"register_operand\" \"0\")\n-\t\t       (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_MMX\"\n-  \"psubsw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"ussubv8qi3\"\n-  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n-        (us_minus:V8QI (match_operand:V8QI 1 \"register_operand\" \"0\")\n-\t\t       (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_MMX\"\n-  \"psubusb\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"ussubv4hi3\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n-        (us_minus:V4HI (match_operand:V4HI 1 \"register_operand\" \"0\")\n-\t\t       (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_MMX\"\n-  \"psubusw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"mulv4hi3\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n-        (mult:V4HI (match_operand:V4HI 1 \"register_operand\" \"0\")\n-\t\t   (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_MMX\"\n-  \"pmullw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxmul\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"smulv4hi3_highpart\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n-\t(truncate:V4HI\n-\t (lshiftrt:V4SI\n-\t  (mult:V4SI (sign_extend:V4SI\n-\t\t      (match_operand:V4HI 1 \"register_operand\" \"0\"))\n-\t\t     (sign_extend:V4SI\n-\t\t      (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))\n-\t  (const_int 16))))]\n-  \"TARGET_MMX\"\n-  \"pmulhw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxmul\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"umulv4hi3_highpart\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n-\t(truncate:V4HI\n-\t (lshiftrt:V4SI\n-\t  (mult:V4SI (zero_extend:V4SI\n-\t\t      (match_operand:V4HI 1 \"register_operand\" \"0\"))\n-\t\t     (zero_extend:V4SI\n-\t\t      (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))\n-\t  (const_int 16))))]\n-  \"TARGET_SSE || TARGET_3DNOW_A\"\n-  \"pmulhuw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxmul\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"mmx_pmaddwd\"\n-  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n-        (plus:V2SI\n-\t (mult:V2SI\n-\t  (sign_extend:V2SI\n-\t   (vec_select:V2HI (match_operand:V4HI 1 \"register_operand\" \"0\")\n-\t\t\t    (parallel [(const_int 0) (const_int 2)])))\n-\t  (sign_extend:V2SI\n-\t   (vec_select:V2HI (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")\n-\t\t\t    (parallel [(const_int 0) (const_int 2)]))))\n-\t (mult:V2SI\n-\t  (sign_extend:V2SI (vec_select:V2HI (match_dup 1)\n-\t\t\t\t\t     (parallel [(const_int 1)\n-\t\t\t\t\t\t\t(const_int 3)])))\n-\t  (sign_extend:V2SI (vec_select:V2HI (match_dup 2)\n-\t\t\t\t\t     (parallel [(const_int 1)\n-\t\t\t\t\t\t\t(const_int 3)]))))))]\n-  \"TARGET_MMX\"\n-  \"pmaddwd\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxmul\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"sse2_umulsidi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n-        (mult:DI\n-\t  (zero_extend:DI\n-\t    (vec_select:SI\n-\t      (match_operand:V2SI 1 \"register_operand\" \"0\")\n-\t      (parallel [(const_int 0)])))\n-\t  (zero_extend:DI\n-\t    (vec_select:SI\n-\t      (match_operand:V2SI 2 \"nonimmediate_operand\" \"ym\")\n-\t      (parallel [(const_int 0)])))))]\n-  \"TARGET_SSE2\"\n-  \"pmuludq\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxmul\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-\n-;; MMX logical operations\n-;; Note we don't want to declare these as regular iordi3 insns to prevent\n-;; normal code that also wants to use the FPU from getting broken.\n-;; The UNSPECs are there to prevent the combiner from getting overly clever.\n-(define_insn \"mmx_iordi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n-        (unspec:DI\n-\t [(ior:DI (match_operand:DI 1 \"register_operand\" \"%0\")\n-\t\t  (match_operand:DI 2 \"nonimmediate_operand\" \"ym\"))]\n-\t UNSPEC_NOP))]\n-  \"TARGET_MMX\"\n-  \"por\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"mmx_xordi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n-        (unspec:DI\n-\t [(xor:DI (match_operand:DI 1 \"register_operand\" \"%0\")\n-\t\t  (match_operand:DI 2 \"nonimmediate_operand\" \"ym\"))]\n-\t UNSPEC_NOP))]\n-  \"TARGET_MMX\"\n-  \"pxor\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")\n-   (set_attr \"memory\" \"none\")])\n-\n-;; Same as pxor, but don't show input operands so that we don't think\n-;; they are live.\n-(define_insn \"mmx_clrdi\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n-        (unspec:DI [(const_int 0)] UNSPEC_NOP))]\n-  \"TARGET_MMX\"\n-  \"pxor\\t{%0, %0|%0, %0}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")\n-   (set_attr \"memory\" \"none\")])\n-\n-(define_insn \"mmx_anddi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n-        (unspec:DI\n-\t [(and:DI (match_operand:DI 1 \"register_operand\" \"%0\")\n-\t\t  (match_operand:DI 2 \"nonimmediate_operand\" \"ym\"))]\n-\t UNSPEC_NOP))]\n-  \"TARGET_MMX\"\n-  \"pand\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"mmx_nanddi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n-        (unspec:DI\n-\t [(and:DI (not:DI (match_operand:DI 1 \"register_operand\" \"0\"))\n-\t\t\t  (match_operand:DI 2 \"nonimmediate_operand\" \"ym\"))]\n-\t UNSPEC_NOP))]\n-  \"TARGET_MMX\"\n-  \"pandn\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-\n-;; MMX unsigned averages/sum of absolute differences\n-\n-(define_insn \"mmx_uavgv8qi3\"\n-  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n-        (ashiftrt:V8QI\n-\t (plus:V8QI (plus:V8QI\n-\t\t     (match_operand:V8QI 1 \"register_operand\" \"0\")\n-\t\t     (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\"))\n-\t\t    (const_vector:V8QI [(const_int 1)\n-\t\t\t\t\t(const_int 1)\n-\t\t\t\t\t(const_int 1)\n-\t\t\t\t\t(const_int 1)\n-\t\t\t\t\t(const_int 1)\n-\t\t\t\t\t(const_int 1)\n-\t\t\t\t\t(const_int 1)\n-\t\t\t\t\t(const_int 1)]))\n-\t (const_int 1)))]\n-  \"TARGET_SSE || TARGET_3DNOW_A\"\n-  \"pavgb\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxshft\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"mmx_uavgv4hi3\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n-        (ashiftrt:V4HI\n-\t (plus:V4HI (plus:V4HI\n-\t\t     (match_operand:V4HI 1 \"register_operand\" \"0\")\n-\t\t     (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\"))\n-\t\t    (const_vector:V4HI [(const_int 1)\n-\t\t\t\t\t(const_int 1)\n-\t\t\t\t\t(const_int 1)\n-\t\t\t\t\t(const_int 1)]))\n-\t (const_int 1)))]\n-  \"TARGET_SSE || TARGET_3DNOW_A\"\n-  \"pavgw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxshft\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"mmx_psadbw\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n-        (unspec:DI [(match_operand:V8QI 1 \"register_operand\" \"0\")\n-\t\t    (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\")]\n-\t\t   UNSPEC_PSADBW))]\n-  \"TARGET_SSE || TARGET_3DNOW_A\"\n-  \"psadbw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxshft\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-\n-;; MMX insert/extract/shuffle\n-\n-(define_expand \"mmx_pinsrw\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"\")\n-        (vec_merge:V4HI\n-\t  (match_operand:V4HI 1 \"register_operand\" \"\")\n-          (vec_duplicate:V4HI\n-            (match_operand:SI 2 \"nonimmediate_operand\" \"\"))\n-          (match_operand:SI 3 \"const_0_to_3_operand\" \"\")))]\n-  \"TARGET_SSE || TARGET_3DNOW_A\"\n-{\n-  operands[2] = gen_lowpart (HImode, operands[2]);\n-  operands[3] = GEN_INT (1 << INTVAL (operands[3]));\n-})\n-\n-(define_insn \"*mmx_pinsrw\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n-        (vec_merge:V4HI\n-\t  (match_operand:V4HI 1 \"register_operand\" \"0\")\n-          (vec_duplicate:V4HI\n-            (match_operand:HI 2 \"nonimmediate_operand\" \"rm\"))\n-          (match_operand:SI 3 \"const_pow2_1_to_8_operand\" \"N\")))]\n-  \"TARGET_SSE || TARGET_3DNOW_A\"\n-{\n-  operands[3] = GEN_INT (exact_log2 (INTVAL (operands[3])));\n-  return \"pinsrw\\t{%3, %k2, %0|%0, %k2, %3}\";\n-}\n-  [(set_attr \"type\" \"mmxcvt\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"mmx_pextrw\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (zero_extend:SI (vec_select:HI (match_operand:V4HI 1 \"register_operand\" \"y\")\n-\t\t\t\t       (parallel\n-\t\t\t\t\t[(match_operand:SI 2 \"const_0_to_3_operand\" \"N\")]))))]\n-  \"TARGET_SSE || TARGET_3DNOW_A\"\n-  \"pextrw\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"mmxcvt\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"mmx_pshufw\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n-        (unspec:V4HI [(match_operand:V4HI 1 \"nonimmediate_operand\" \"ym\")\n-\t\t      (match_operand:SI 2 \"immediate_operand\" \"i\")]\n-\t\t     UNSPEC_SHUFFLE))]\n-  \"TARGET_SSE || TARGET_3DNOW_A\"\n-  \"pshufw\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"mmxcvt\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-\n-;; MMX mask-generating comparisons\n-\n-(define_insn \"eqv8qi3\"\n-  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n-        (eq:V8QI (match_operand:V8QI 1 \"register_operand\" \"0\")\n-\t\t (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_MMX\"\n-  \"pcmpeqb\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxcmp\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"eqv4hi3\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n-        (eq:V4HI (match_operand:V4HI 1 \"register_operand\" \"0\")\n-\t\t (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_MMX\"\n-  \"pcmpeqw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxcmp\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"eqv2si3\"\n-  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n-        (eq:V2SI (match_operand:V2SI 1 \"register_operand\" \"0\")\n-\t\t (match_operand:V2SI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_MMX\"\n-  \"pcmpeqd\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxcmp\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"gtv8qi3\"\n-  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n-        (gt:V8QI (match_operand:V8QI 1 \"register_operand\" \"0\")\n-\t\t (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_MMX\"\n-  \"pcmpgtb\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxcmp\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"gtv4hi3\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n-        (gt:V4HI (match_operand:V4HI 1 \"register_operand\" \"0\")\n-\t\t (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_MMX\"\n-  \"pcmpgtw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxcmp\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"gtv2si3\"\n-  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n-        (gt:V2SI (match_operand:V2SI 1 \"register_operand\" \"0\")\n-\t\t (match_operand:V2SI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_MMX\"\n-  \"pcmpgtd\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxcmp\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-\n-;; MMX max/min insns\n-\n-(define_insn \"umaxv8qi3\"\n-  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n-        (umax:V8QI (match_operand:V8QI 1 \"register_operand\" \"0\")\n-\t\t   (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_SSE || TARGET_3DNOW_A\"\n-  \"pmaxub\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"smaxv4hi3\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n-        (smax:V4HI (match_operand:V4HI 1 \"register_operand\" \"0\")\n-\t\t   (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_SSE || TARGET_3DNOW_A\"\n-  \"pmaxsw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"uminv8qi3\"\n-  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n-        (umin:V8QI (match_operand:V8QI 1 \"register_operand\" \"0\")\n-\t\t   (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_SSE || TARGET_3DNOW_A\"\n-  \"pminub\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"sminv4hi3\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n-        (smin:V4HI (match_operand:V4HI 1 \"register_operand\" \"0\")\n-\t\t   (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_SSE || TARGET_3DNOW_A\"\n-  \"pminsw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-\n-;; MMX shifts\n-\n-(define_insn \"ashrv4hi3\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n-        (ashiftrt:V4HI (match_operand:V4HI 1 \"register_operand\" \"0\")\n-\t\t       (match_operand:DI 2 \"nonmemory_operand\" \"yi\")))]\n-  \"TARGET_MMX\"\n-  \"psraw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxshft\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"ashrv2si3\"\n-  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n-        (ashiftrt:V2SI (match_operand:V2SI 1 \"register_operand\" \"0\")\n-\t\t       (match_operand:DI 2 \"nonmemory_operand\" \"yi\")))]\n-  \"TARGET_MMX\"\n-  \"psrad\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxshft\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"lshrv4hi3\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n-        (lshiftrt:V4HI (match_operand:V4HI 1 \"register_operand\" \"0\")\n-\t\t       (match_operand:DI 2 \"nonmemory_operand\" \"yi\")))]\n-  \"TARGET_MMX\"\n-  \"psrlw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxshft\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"lshrv2si3\"\n-  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n-        (lshiftrt:V2SI (match_operand:V2SI 1 \"register_operand\" \"0\")\n-\t\t       (match_operand:DI 2 \"nonmemory_operand\" \"yi\")))]\n-  \"TARGET_MMX\"\n-  \"psrld\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxshft\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-;; See logical MMX insns.\n-(define_insn \"mmx_lshrdi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n-        (unspec:DI\n-\t  [(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-\t\t       (match_operand:DI 2 \"nonmemory_operand\" \"yi\"))]\n-\t  UNSPEC_NOP))]\n-  \"TARGET_MMX\"\n-  \"psrlq\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxshft\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"ashlv4hi3\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n-        (ashift:V4HI (match_operand:V4HI 1 \"register_operand\" \"0\")\n-\t\t       (match_operand:DI 2 \"nonmemory_operand\" \"yi\")))]\n-  \"TARGET_MMX\"\n-  \"psllw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxshft\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"ashlv2si3\"\n-  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n-        (ashift:V2SI (match_operand:V2SI 1 \"register_operand\" \"0\")\n-\t\t       (match_operand:DI 2 \"nonmemory_operand\" \"yi\")))]\n-  \"TARGET_MMX\"\n-  \"pslld\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxshft\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-;; See logical MMX insns.\n-(define_insn \"mmx_ashldi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n-        (unspec:DI\n-\t [(ashift:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-\t\t     (match_operand:DI 2 \"nonmemory_operand\" \"yi\"))]\n-\t UNSPEC_NOP))]\n-  \"TARGET_MMX\"\n-  \"psllq\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxshft\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-\n-;; MMX pack/unpack insns.\n-\n-(define_insn \"mmx_packsswb\"\n-  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n-\t(vec_concat:V8QI\n-\t (ss_truncate:V4QI (match_operand:V4HI 1 \"register_operand\" \"0\"))\n-\t (ss_truncate:V4QI (match_operand:V4HI 2 \"register_operand\" \"y\"))))]\n-  \"TARGET_MMX\"\n-  \"packsswb\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxshft\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"mmx_packssdw\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n-\t(vec_concat:V4HI\n-\t (ss_truncate:V2HI (match_operand:V2SI 1 \"register_operand\" \"0\"))\n-\t (ss_truncate:V2HI (match_operand:V2SI 2 \"register_operand\" \"y\"))))]\n-  \"TARGET_MMX\"\n-  \"packssdw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxshft\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"mmx_packuswb\"\n-  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n-\t(vec_concat:V8QI\n-\t (us_truncate:V4QI (match_operand:V4HI 1 \"register_operand\" \"0\"))\n-\t (us_truncate:V4QI (match_operand:V4HI 2 \"register_operand\" \"y\"))))]\n-  \"TARGET_MMX\"\n-  \"packuswb\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxshft\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"mmx_punpckhbw\"\n-  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n-\t(vec_merge:V8QI\n-\t (vec_select:V8QI (match_operand:V8QI 1 \"register_operand\" \"0\")\n-\t\t\t  (parallel [(const_int 4)\n-\t\t\t\t     (const_int 0)\n-\t\t\t\t     (const_int 5)\n-\t\t\t\t     (const_int 1)\n-\t\t\t\t     (const_int 6)\n-\t\t\t\t     (const_int 2)\n-\t\t\t\t     (const_int 7)\n-\t\t\t\t     (const_int 3)]))\n-\t (vec_select:V8QI (match_operand:V8QI 2 \"register_operand\" \"y\")\n-\t\t\t  (parallel [(const_int 0)\n-\t\t\t\t     (const_int 4)\n-\t\t\t\t     (const_int 1)\n-\t\t\t\t     (const_int 5)\n-\t\t\t\t     (const_int 2)\n-\t\t\t\t     (const_int 6)\n-\t\t\t\t     (const_int 3)\n-\t\t\t\t     (const_int 7)]))\n-\t (const_int 85)))]\n-  \"TARGET_MMX\"\n-  \"punpckhbw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxcvt\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"mmx_punpckhwd\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n-\t(vec_merge:V4HI\n-\t (vec_select:V4HI (match_operand:V4HI 1 \"register_operand\" \"0\")\n-\t\t\t  (parallel [(const_int 0)\n-\t\t\t\t     (const_int 2)\n-\t\t\t\t     (const_int 1)\n-\t\t\t\t     (const_int 3)]))\n-\t (vec_select:V4HI (match_operand:V4HI 2 \"register_operand\" \"y\")\n-\t\t\t  (parallel [(const_int 2)\n-\t\t\t\t     (const_int 0)\n-\t\t\t\t     (const_int 3)\n-\t\t\t\t     (const_int 1)]))\n-\t (const_int 5)))]\n-  \"TARGET_MMX\"\n-  \"punpckhwd\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxcvt\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"mmx_punpckhdq\"\n-  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n-\t(vec_merge:V2SI\n-\t (match_operand:V2SI 1 \"register_operand\" \"0\")\n-\t (vec_select:V2SI (match_operand:V2SI 2 \"register_operand\" \"y\")\n-\t\t\t  (parallel [(const_int 1)\n-\t\t\t\t     (const_int 0)]))\n-\t (const_int 1)))]\n-  \"TARGET_MMX\"\n-  \"punpckhdq\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxcvt\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"mmx_punpcklbw\"\n-  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n-\t(vec_merge:V8QI\n-\t (vec_select:V8QI (match_operand:V8QI 1 \"register_operand\" \"0\")\n-\t\t\t  (parallel [(const_int 0)\n-\t\t\t\t     (const_int 4)\n-\t\t\t\t     (const_int 1)\n-\t\t\t\t     (const_int 5)\n-\t\t\t\t     (const_int 2)\n-\t\t\t\t     (const_int 6)\n-\t\t\t\t     (const_int 3)\n-\t\t\t\t     (const_int 7)]))\n-\t (vec_select:V8QI (match_operand:V8QI 2 \"register_operand\" \"y\")\n-\t\t\t  (parallel [(const_int 4)\n-\t\t\t\t     (const_int 0)\n-\t\t\t\t     (const_int 5)\n-\t\t\t\t     (const_int 1)\n-\t\t\t\t     (const_int 6)\n-\t\t\t\t     (const_int 2)\n-\t\t\t\t     (const_int 7)\n-\t\t\t\t     (const_int 3)]))\n-\t (const_int 85)))]\n-  \"TARGET_MMX\"\n-  \"punpcklbw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxcvt\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"mmx_punpcklwd\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n-\t(vec_merge:V4HI\n-\t (vec_select:V4HI (match_operand:V4HI 1 \"register_operand\" \"0\")\n-\t\t\t  (parallel [(const_int 2)\n-\t\t\t\t     (const_int 0)\n-\t\t\t\t     (const_int 3)\n-\t\t\t\t     (const_int 1)]))\n-\t (vec_select:V4HI (match_operand:V4HI 2 \"register_operand\" \"y\")\n-\t\t\t  (parallel [(const_int 0)\n-\t\t\t\t     (const_int 2)\n-\t\t\t\t     (const_int 1)\n-\t\t\t\t     (const_int 3)]))\n-\t (const_int 5)))]\n-  \"TARGET_MMX\"\n-  \"punpcklwd\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxcvt\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"mmx_punpckldq\"\n-  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n-\t(vec_merge:V2SI\n-\t (vec_select:V2SI (match_operand:V2SI 1 \"register_operand\" \"0\")\n-\t\t\t   (parallel [(const_int 1)\n-\t\t\t\t      (const_int 0)]))\n-\t (match_operand:V2SI 2 \"register_operand\" \"y\")\n-\t (const_int 1)))]\n-  \"TARGET_MMX\"\n-  \"punpckldq\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxcvt\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-\n-;; Miscellaneous stuff\n-\n-(define_insn \"emms\"\n-  [(unspec_volatile [(const_int 0)] UNSPECV_EMMS)\n-   (clobber (reg:XF 8))\n-   (clobber (reg:XF 9))\n-   (clobber (reg:XF 10))\n-   (clobber (reg:XF 11))\n-   (clobber (reg:XF 12))\n-   (clobber (reg:XF 13))\n-   (clobber (reg:XF 14))\n-   (clobber (reg:XF 15))\n-   (clobber (reg:DI 29))\n-   (clobber (reg:DI 30))\n-   (clobber (reg:DI 31))\n-   (clobber (reg:DI 32))\n-   (clobber (reg:DI 33))\n-   (clobber (reg:DI 34))\n-   (clobber (reg:DI 35))\n-   (clobber (reg:DI 36))]\n-  \"TARGET_MMX\"\n-  \"emms\"\n-  [(set_attr \"type\" \"mmx\")\n-   (set_attr \"memory\" \"unknown\")])\n-\n-(define_insn \"ldmxcsr\"\n-  [(unspec_volatile [(match_operand:SI 0 \"memory_operand\" \"m\")]\n-\t\t    UNSPECV_LDMXCSR)]\n-  \"TARGET_SSE\"\n-  \"ldmxcsr\\t%0\"\n-  [(set_attr \"type\" \"sse\")\n-   (set_attr \"memory\" \"load\")])\n-\n-(define_insn \"stmxcsr\"\n-  [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n-\t(unspec_volatile:SI [(const_int 0)] UNSPECV_STMXCSR))]\n-  \"TARGET_SSE\"\n-  \"stmxcsr\\t%0\"\n-  [(set_attr \"type\" \"sse\")\n-   (set_attr \"memory\" \"store\")])\n-\n-(define_expand \"sfence\"\n-  [(set (match_dup 0)\n-\t(unspec:BLK [(match_dup 0)] UNSPEC_SFENCE))]\n-  \"TARGET_SSE || TARGET_3DNOW_A\"\n-{\n-  operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n-  MEM_VOLATILE_P (operands[0]) = 1;\n-})\n-\n-(define_insn \"*sfence_insn\"\n-  [(set (match_operand:BLK 0 \"\" \"\")\n-\t(unspec:BLK [(match_dup 0)] UNSPEC_SFENCE))]\n-  \"TARGET_SSE || TARGET_3DNOW_A\"\n-  \"sfence\"\n-  [(set_attr \"type\" \"sse\")\n-   (set_attr \"memory\" \"unknown\")])\n-\n (define_expand \"sse_prologue_save\"\n   [(parallel [(set (match_operand:BLK 0 \"\" \"\")\n \t\t   (unspec:BLK [(reg:DI 21)\n@@ -20712,311 +19769,6 @@\n    (set_attr \"modrm\" \"0\")\n    (set_attr \"mode\" \"DI\")])\n \n-;; 3Dnow! instructions\n-\n-(define_insn \"addv2sf3\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n-\t(plus:V2SF (match_operand:V2SF 1 \"register_operand\" \"0\")\n-\t\t   (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_3DNOW\"\n-  \"pfadd\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"V2SF\")])\n-\n-(define_insn \"subv2sf3\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n-        (minus:V2SF (match_operand:V2SF 1 \"register_operand\" \"0\")\n-\t\t    (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_3DNOW\"\n-  \"pfsub\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"V2SF\")])\n-\n-(define_insn \"subrv2sf3\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n-        (minus:V2SF (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")\n-                    (match_operand:V2SF 1 \"register_operand\" \"0\")))]\n-  \"TARGET_3DNOW\"\n-  \"pfsubr\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"V2SF\")])\n-\n-(define_insn \"gtv2sf3\"\n-  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n-\t(gt:V2SI (match_operand:V2SF 1 \"register_operand\" \"0\")\n-\t\t (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_3DNOW\"\n-  \"pfcmpgt\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxcmp\")\n-   (set_attr \"mode\" \"V2SF\")])\n-\n-(define_insn \"gev2sf3\"\n-  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n-\t(ge:V2SI (match_operand:V2SF 1 \"register_operand\" \"0\")\n-\t\t (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_3DNOW\"\n-  \"pfcmpge\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxcmp\")\n-   (set_attr \"mode\" \"V2SF\")])\n-\n-(define_insn \"eqv2sf3\"\n-  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n-\t(eq:V2SI (match_operand:V2SF 1 \"register_operand\" \"0\")\n-\t\t (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_3DNOW\"\n-  \"pfcmpeq\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxcmp\")\n-   (set_attr \"mode\" \"V2SF\")])\n-\n-(define_insn \"pfmaxv2sf3\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n-        (smax:V2SF (match_operand:V2SF 1 \"register_operand\" \"0\")\n-                   (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_3DNOW\"\n-  \"pfmax\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"V2SF\")])\n-\n-(define_insn \"pfminv2sf3\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n-        (smin:V2SF (match_operand:V2SF 1 \"register_operand\" \"0\")\n-                   (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_3DNOW\"\n-  \"pfmin\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"V2SF\")])\n-\n-(define_insn \"mulv2sf3\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n-\t(mult:V2SF (match_operand:V2SF 1 \"register_operand\" \"0\")\n-\t\t   (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_3DNOW\"\n-  \"pfmul\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxmul\")\n-   (set_attr \"mode\" \"V2SF\")])\n-\n-(define_insn \"femms\"\n-  [(unspec_volatile [(const_int 0)] UNSPECV_FEMMS)\n-   (clobber (reg:XF 8))\n-   (clobber (reg:XF 9))\n-   (clobber (reg:XF 10))\n-   (clobber (reg:XF 11))\n-   (clobber (reg:XF 12))\n-   (clobber (reg:XF 13))\n-   (clobber (reg:XF 14))\n-   (clobber (reg:XF 15))\n-   (clobber (reg:DI 29))\n-   (clobber (reg:DI 30))\n-   (clobber (reg:DI 31))\n-   (clobber (reg:DI 32))\n-   (clobber (reg:DI 33))\n-   (clobber (reg:DI 34))\n-   (clobber (reg:DI 35))\n-   (clobber (reg:DI 36))]\n-  \"TARGET_3DNOW\"\n-  \"femms\"\n-  [(set_attr \"type\" \"mmx\")\n-   (set_attr \"memory\" \"none\")]) \n-\n-(define_insn \"pf2id\"\n-  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n-\t(fix:V2SI (match_operand:V2SF 1 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_3DNOW\"\n-  \"pf2id\\\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"mmxcvt\")\n-   (set_attr \"mode\" \"V2SF\")])\n-\n-(define_insn \"pf2iw\"\n-  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n-\t(sign_extend:V2SI\n-\t   (ss_truncate:V2HI\n-\t      (fix:V2SI (match_operand:V2SF 1 \"nonimmediate_operand\" \"ym\")))))]\n-  \"TARGET_3DNOW_A\"\n-  \"pf2iw\\\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"mmxcvt\")\n-   (set_attr \"mode\" \"V2SF\")])\n-\n-(define_insn \"pfacc\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n-\t(vec_concat:V2SF\n-\t   (plus:SF\n-\t      (vec_select:SF (match_operand:V2SF 1 \"register_operand\" \"0\")\n-\t\t\t     (parallel [(const_int  0)]))\n-\t      (vec_select:SF (match_dup 1)\n-\t\t\t     (parallel [(const_int 1)])))\n-           (plus:SF\n-              (vec_select:SF (match_operand:V2SF 2 \"nonimmediate_operand\" \"y\")\n-\t\t\t     (parallel [(const_int  0)]))\n-              (vec_select:SF (match_dup 2)\n-\t\t\t     (parallel [(const_int 1)])))))]\n-  \"TARGET_3DNOW\"\n-  \"pfacc\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"V2SF\")])\n-\n-(define_insn \"pfnacc\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n-  \t(vec_concat:V2SF\n-           (minus:SF\n-              (vec_select:SF (match_operand:V2SF 1 \"register_operand\" \"0\")\n-\t\t\t     (parallel [(const_int 0)]))\n-              (vec_select:SF (match_dup 1)\n-\t\t\t     (parallel [(const_int 1)])))\n-           (minus:SF\n-              (vec_select:SF (match_operand:V2SF 2 \"nonimmediate_operand\" \"y\")\n-\t\t\t     (parallel [(const_int  0)]))\n-              (vec_select:SF (match_dup 2)\n-\t\t\t     (parallel [(const_int 1)])))))]\n-  \"TARGET_3DNOW_A\"\n-  \"pfnacc\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"V2SF\")])\n-\n-(define_insn \"pfpnacc\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n-        (vec_concat:V2SF\n-           (minus:SF\n-              (vec_select:SF (match_operand:V2SF 1 \"register_operand\" \"0\")\n-\t\t\t     (parallel [(const_int 0)]))\n-              (vec_select:SF (match_dup 1)\n-\t\t\t     (parallel [(const_int 1)])))\n-           (plus:SF\n-              (vec_select:SF (match_operand:V2SF 2 \"nonimmediate_operand\" \"y\")\n-\t\t\t     (parallel [(const_int 0)]))\n-              (vec_select:SF (match_dup 2)\n-\t\t\t     (parallel [(const_int 1)])))))]\n-  \"TARGET_3DNOW_A\"\n-  \"pfpnacc\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"V2SF\")])\n-\n-(define_insn \"pi2fw\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n-\t(float:V2SF\n-\t   (vec_concat:V2SI\n-\t      (sign_extend:SI\n-\t\t (truncate:HI\n-\t\t    (vec_select:SI (match_operand:V2SI 1 \"nonimmediate_operand\" \"ym\")\n-\t\t\t\t   (parallel [(const_int 0)]))))\n-              (sign_extend:SI\n-\t\t (truncate:HI\n-                    (vec_select:SI (match_dup 1)\n-\t\t\t\t   (parallel [(const_int  1)])))))))]\n-  \"TARGET_3DNOW_A\"\n-  \"pi2fw\\\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"mmxcvt\")\n-   (set_attr \"mode\" \"V2SF\")])\n-\n-(define_insn \"floatv2si2\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n-\t(float:V2SF (match_operand:V2SI 1 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_3DNOW\"\n-  \"pi2fd\\\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"mmxcvt\")\n-   (set_attr \"mode\" \"V2SF\")])\n-\n-;; This insn is identical to pavgb in operation, but the opcode is\n-;; different.  To avoid accidentally matching pavgb, use an unspec.\n-\n-(define_insn \"pavgusb\"\n- [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n-       (unspec:V8QI\n-          [(match_operand:V8QI 1 \"register_operand\" \"0\")\n-           (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\")]\n-\t  UNSPEC_PAVGUSB))]\n-  \"TARGET_3DNOW\"\n-  \"pavgusb\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxshft\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-;; 3DNow reciprocal and sqrt\n- \n-(define_insn \"pfrcpv2sf2\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n-        (unspec:V2SF [(match_operand:V2SF 1 \"nonimmediate_operand\" \"ym\")]\n-\tUNSPEC_PFRCP))]\n-  \"TARGET_3DNOW\"\n-  \"pfrcp\\\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"mmx\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"pfrcpit1v2sf3\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n-\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\" \"0\")\n-\t\t      (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")]\n-\t\t     UNSPEC_PFRCPIT1))]\n-  \"TARGET_3DNOW\"\n-  \"pfrcpit1\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmx\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"pfrcpit2v2sf3\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n-\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\" \"0\")\n-\t\t      (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")]\n-\t\t     UNSPEC_PFRCPIT2))]\n-  \"TARGET_3DNOW\"\n-  \"pfrcpit2\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmx\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"pfrsqrtv2sf2\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n-\t(unspec:V2SF [(match_operand:V2SF 1 \"nonimmediate_operand\" \"ym\")]\n-\t\t     UNSPEC_PFRSQRT))]\n-  \"TARGET_3DNOW\"\n-  \"pfrsqrt\\\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"mmx\")\n-   (set_attr \"mode\" \"TI\")])\n-\t\t\n-(define_insn \"pfrsqit1v2sf3\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n-\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\" \"0\")\n-\t\t      (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")]\n-\t\t     UNSPEC_PFRSQIT1))]\n-  \"TARGET_3DNOW\"\n-  \"pfrsqit1\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmx\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"pmulhrwv4hi3\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n-\t(truncate:V4HI\n-\t   (lshiftrt:V4SI\n-\t      (plus:V4SI\n-\t         (mult:V4SI\n-\t            (sign_extend:V4SI\n-\t\t       (match_operand:V4HI 1 \"register_operand\" \"0\"))\n-\t            (sign_extend:V4SI\n-\t\t       (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))\n-\t\t (const_vector:V4SI [(const_int 32768)\n-\t\t\t\t     (const_int 32768)\n-\t\t\t\t     (const_int 32768)\n-\t\t\t\t     (const_int 32768)]))\n-\t      (const_int 16))))]\n-  \"TARGET_3DNOW\"\n-  \"pmulhrw\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxmul\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"pswapdv2si2\"\n-  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n-\t(vec_select:V2SI (match_operand:V2SI 1 \"nonimmediate_operand\" \"ym\")\n-\t\t\t (parallel [(const_int 1) (const_int 0)])))]\n-  \"TARGET_3DNOW_A\"\n-  \"pswapd\\\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"mmxcvt\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"pswapdv2sf2\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n-\t(vec_select:V2SF (match_operand:V2SF 1 \"nonimmediate_operand\" \"ym\")\n-\t\t\t (parallel [(const_int 1) (const_int 0)])))]\n-  \"TARGET_3DNOW_A\"\n-  \"pswapd\\\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"mmxcvt\")\n-   (set_attr \"mode\" \"TI\")])\n-\n (define_expand \"prefetch\"\n   [(prefetch (match_operand 0 \"address_operand\" \"\")\n \t     (match_operand:SI 1 \"const_int_operand\" \"\")\n@@ -21110,3 +19862,4 @@\n    (set_attr \"memory\" \"none\")])\n \n (include \"sse.md\")\n+(include \"mmx.md\")"}, {"sha": "ab0eb852f84abf2cef08806b88c4441077892ba6", "filename": "gcc/config/i386/mmintrin.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e8bb90c4183cc54caf5c8e7078106b4c9a7750/gcc%2Fconfig%2Fi386%2Fmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e8bb90c4183cc54caf5c8e7078106b4c9a7750/gcc%2Fconfig%2Fi386%2Fmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmintrin.h?ref=80e8bb90c4183cc54caf5c8e7078106b4c9a7750", "patch": "@@ -687,7 +687,7 @@ _m_psrlqi (__m64 __m, int __count)\n static __inline __m64\n _mm_and_si64 (__m64 __m1, __m64 __m2)\n {\n-  return (__m64) __builtin_ia32_pand ((long long)__m1, (long long)__m2);\n+  return __builtin_ia32_pand (__m1, __m2);\n }\n \n static __inline __m64\n@@ -701,7 +701,7 @@ _m_pand (__m64 __m1, __m64 __m2)\n static __inline __m64\n _mm_andnot_si64 (__m64 __m1, __m64 __m2)\n {\n-  return (__m64) __builtin_ia32_pandn ((long long)__m1, (long long)__m2);\n+  return __builtin_ia32_pandn (__m1, __m2);\n }\n \n static __inline __m64\n@@ -714,7 +714,7 @@ _m_pandn (__m64 __m1, __m64 __m2)\n static __inline __m64\n _mm_or_si64 (__m64 __m1, __m64 __m2)\n {\n-  return (__m64)__builtin_ia32_por ((long long)__m1, (long long)__m2);\n+  return __builtin_ia32_por (__m1, __m2);\n }\n \n static __inline __m64\n@@ -727,7 +727,7 @@ _m_por (__m64 __m1, __m64 __m2)\n static __inline __m64\n _mm_xor_si64 (__m64 __m1, __m64 __m2)\n {\n-  return (__m64)__builtin_ia32_pxor ((long long)__m1, (long long)__m2);\n+  return __builtin_ia32_pxor (__m1, __m2);\n }\n \n static __inline __m64"}, {"sha": "7d16488c232248fd4a201e84a3203daccc28119c", "filename": "gcc/config/i386/mmx.md", "status": "added", "additions": 1138, "deletions": 0, "changes": 1138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e8bb90c4183cc54caf5c8e7078106b4c9a7750/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e8bb90c4183cc54caf5c8e7078106b4c9a7750/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=80e8bb90c4183cc54caf5c8e7078106b4c9a7750", "patch": "@@ -0,0 +1,1138 @@\n+;; GCC machine description for MMX and 3dNOW! instructions\n+;; Copyright (C) 2005\n+;; Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 2, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING.  If not, write to\n+;; the Free Software Foundation, 59 Temple Place - Suite 330,\n+;; Boston, MA 02111-1307, USA.\n+\n+;; The MMX and 3dNOW! patterns are in the same file because they use\n+;; the same register file, and 3dNOW! adds a number of extensions to\n+;; the base integer MMX isa.\n+\n+;; Note!  Except for the basic move instructions, *all* of these \n+;; patterns are outside the normal optabs namespace.  This is because\n+;; use of these registers requires the insertion of emms or femms\n+;; instructions to return to normal fpu mode.  The compiler doesn't\n+;; know how to do that itself, which means it's up to the user.  Which\n+;; means that we should never use any of these patterns except at the\n+;; direction of the user via a builtin.\n+\n+;; 8 byte integral modes handled by MMX (and by extension, SSE)\n+(define_mode_macro MMXMODEI [V8QI V4HI V2SI])\n+\n+;; All 8-byte vector modes handled by MMX\n+(define_mode_macro MMXMODE [V8QI V4HI V2SI V2SF])\n+\n+;; Mix-n-match\n+(define_mode_macro MMXMODE12 [V8QI V4HI])\n+(define_mode_macro MMXMODE24 [V4HI V2SI])\n+\n+;; Mapping from integer vector mode to mnemonic suffix\n+(define_mode_attr mmxvecsize [(V8QI \"b\") (V4HI \"w\") (V2SI \"d\") (DI \"q\")])\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;;\n+;; Move patterns\n+;;\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+;; All of these patterns are enabled for MMX as well as 3dNOW.\n+;; This is essential for maintaining stable calling conventions.\n+\n+(define_expand \"mov<mode>\"\n+  [(set (match_operand:MMXMODEI 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:MMXMODEI 1 \"nonimmediate_operand\" \"\"))]\n+  \"TARGET_MMX\"\n+{\n+  ix86_expand_vector_move (<MODE>mode, operands);\n+  DONE;\n+})\n+\n+(define_insn \"*mov<mode>_internal_rex64\"\n+  [(set (match_operand:MMXMODEI 0 \"nonimmediate_operand\"\n+\t\t\t\t\"=rm,r,*y,*y ,m ,*y,Y ,x,x ,m,r,x\")\n+\t(match_operand:MMXMODEI 1 \"vector_move_operand\"\n+\t\t\t\t\"Cr ,m,C ,*ym,*y,Y ,*y,C,xm,x,x,r\"))]\n+  \"TARGET_64BIT && TARGET_MMX\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n+  \"@\n+    movq\\t{%1, %0|%0, %1}\n+    movq\\t{%1, %0|%0, %1}\n+    pxor\\t%0, %0\n+    movq\\t{%1, %0|%0, %1}\n+    movq\\t{%1, %0|%0, %1}\n+    movdq2q\\t{%1, %0|%0, %1}\n+    movq2dq\\t{%1, %0|%0, %1}\n+    pxor\\t%0, %0\n+    movq\\t{%1, %0|%0, %1}\n+    movq\\t{%1, %0|%0, %1}\n+    movd\\t{%1, %0|%0, %1}\n+    movd\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"imov,imov,mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,ssemov,ssemov,ssemov,ssemov,ssemov\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"*mov<mode>_internal\"\n+  [(set (match_operand:MMXMODEI 0 \"nonimmediate_operand\"\n+\t\t\t\t\"=*y,*y ,m ,*y,*Y,*Y,*Y ,m ,*x,*x,*x,m\")\n+\t(match_operand:MMXMODEI 1 \"vector_move_operand\"\n+\t\t\t\t\"C  ,*ym,*y,*Y,*y,C ,*Ym,*Y,C ,*x,m ,*x\"))]\n+  \"TARGET_MMX\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n+  \"@\n+    pxor\\t%0, %0\n+    movq\\t{%1, %0|%0, %1}\n+    movq\\t{%1, %0|%0, %1}\n+    movdq2q\\t{%1, %0|%0, %1}\n+    movq2dq\\t{%1, %0|%0, %1}\n+    pxor\\t%0, %0\n+    movq\\t{%1, %0|%0, %1}\n+    movq\\t{%1, %0|%0, %1}\n+    xorps\\t%0, %0\n+    movaps\\t{%1, %0|%0, %1}\n+    movlps\\t{%1, %0|%0, %1}\n+    movlps\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,ssemov,ssemov,ssemov,ssemov,ssemov,ssemov,ssemov\")\n+   (set_attr \"mode\" \"DI,DI,DI,DI,DI,TI,DI,DI,V4SF,V4SF,V2SF,V2SF\")])\n+\n+(define_expand \"movv2sf\"\n+  [(set (match_operand:V2SF 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:V2SF 1 \"nonimmediate_operand\" \"\"))]\n+  \"TARGET_MMX\"\n+{\n+  ix86_expand_vector_move (V2SFmode, operands);\n+  DONE;\n+})\n+\n+(define_insn \"*movv2sf_internal_rex64\"\n+  [(set (match_operand:V2SF 0 \"nonimmediate_operand\"\n+\t\t\t\t\"=rm,r,*y ,*y ,m ,*y,Y ,x,x ,m,r,x\")\n+        (match_operand:V2SF 1 \"vector_move_operand\"\n+\t\t\t\t\"Cr ,m ,C ,*ym,*y,Y ,*y,C,xm,x,x,r\"))]\n+  \"TARGET_64BIT && TARGET_MMX\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n+  \"@\n+    movq\\t{%1, %0|%0, %1}\n+    movq\\t{%1, %0|%0, %1}\n+    pxor\\t%0, %0\n+    movq\\t{%1, %0|%0, %1}\n+    movq\\t{%1, %0|%0, %1}\n+    movdq2q\\t{%1, %0|%0, %1}\n+    movq2dq\\t{%1, %0|%0, %1}\n+    xorps\\t%0, %0\n+    movlps\\t{%1, %0|%0, %1}\n+    movlps\\t{%1, %0|%0, %1}\n+    movd\\t{%1, %0|%0, %1}\n+    movd\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"imov,imov,mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,ssemov,ssemov,ssemov,ssemov,ssemov\")\n+   (set_attr \"mode\" \"DI,DI,DI,DI,DI,DI,DI,V4SF,V2SF,V2SF,DI,DI\")])\n+\n+(define_insn \"*movv2sf_internal\"\n+  [(set (match_operand:V2SF 0 \"nonimmediate_operand\"\n+\t\t\t\t\t\"=*y,*y ,m,*y,*Y,*x,*x ,m\")\n+        (match_operand:V2SF 1 \"vector_move_operand\"\n+\t\t\t\t\t\"C ,*ym,*y,*Y,*y,C ,*xm,*x\"))]\n+  \"TARGET_MMX\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n+  \"@\n+    pxor\\t%0, %0\n+    movq\\t{%1, %0|%0, %1}\n+    movq\\t{%1, %0|%0, %1}\n+    movdq2q\\t{%1, %0|%0, %1}\n+    movq2dq\\t{%1, %0|%0, %1}\n+    xorps\\t%0, %0\n+    movlps\\t{%1, %0|%0, %1}\n+    movlps\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,ssemov,ssemov,ssemov\")\n+   (set_attr \"mode\" \"DI,DI,DI,DI,DI,V4SF,V2SF,V2SF\")])\n+\n+(define_expand \"movmisalign<mode>\"\n+  [(set (match_operand:MMXMODE 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:MMXMODE 1 \"nonimmediate_operand\" \"\"))]\n+  \"TARGET_MMX\"\n+{\n+  ix86_expand_vector_move (<MODE>mode, operands);\n+  DONE;\n+})\n+\n+(define_insn \"sse_movntdi\"\n+  [(set (match_operand:DI 0 \"memory_operand\" \"=m\")\n+\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"y\")]\n+\t\t   UNSPEC_MOVNT))]\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n+  \"movntq\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"mmxmov\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;;\n+;; Parallel single-precision floating point arithmetic\n+;;\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_insn \"mmx_addv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+\t(plus:V2SF (match_operand:V2SF 1 \"nonimmediate_operand\" \"%0\")\n+\t\t   (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_3DNOW && ix86_binary_operator_ok (PLUS, V2SFmode, operands)\"\n+  \"pfadd\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"mode\" \"V2SF\")])\n+\n+(define_insn \"mmx_subv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y,y\")\n+        (minus:V2SF (match_operand:V2SF 1 \"nonimmediate_operand\" \"0,ym\")\n+\t\t    (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym,0\")))]\n+  \"TARGET_3DNOW && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"@\n+   pfsub\\\\t{%2, %0|%0, %2}\n+   pfsubr\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"mode\" \"V2SF\")])\n+\n+(define_expand \"mmx_subrv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"\")\n+        (minus:V2SF (match_operand:V2SF 2 \"nonimmediate_operand\" \"\")\n+\t\t    (match_operand:V2SF 1 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_3DNOW && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"\")\n+\n+(define_insn \"mmx_mulv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+\t(mult:V2SF (match_operand:V2SF 1 \"nonimmediate_operand\" \"%0\")\n+\t\t   (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_3DNOW && ix86_binary_operator_ok (MULT, V2SFmode, operands)\"\n+  \"pfmul\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxmul\")\n+   (set_attr \"mode\" \"V2SF\")])\n+\n+(define_insn \"mmx_smaxv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+        (smax:V2SF (match_operand:V2SF 1 \"nonimmediate_operand\" \"%0\")\n+                   (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_3DNOW && ix86_binary_operator_ok (SMAX, V2SFmode, operands)\"\n+  \"pfmax\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"mode\" \"V2SF\")])\n+\n+(define_insn \"mmx_sminv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+        (smin:V2SF (match_operand:V2SF 1 \"nonimmediate_operand\" \"%0\")\n+                   (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_3DNOW && ix86_binary_operator_ok (SMIN, V2SFmode, operands)\"\n+  \"pfmin\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"mode\" \"V2SF\")])\n+\n+(define_insn \"mmx_rcpv2sf2\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+        (unspec:V2SF [(match_operand:V2SF 1 \"nonimmediate_operand\" \"ym\")]\n+\t\t     UNSPEC_PFRCP))]\n+  \"TARGET_3DNOW\"\n+  \"pfrcp\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"mmx\")\n+   (set_attr \"mode\" \"V2SF\")])\n+\n+(define_insn \"mmx_rcpit1v2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")]\n+\t\t     UNSPEC_PFRCPIT1))]\n+  \"TARGET_3DNOW\"\n+  \"pfrcpit1\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmx\")\n+   (set_attr \"mode\" \"V2SF\")])\n+\n+(define_insn \"mmx_rcpit2v2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")]\n+\t\t     UNSPEC_PFRCPIT2))]\n+  \"TARGET_3DNOW\"\n+  \"pfrcpit2\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmx\")\n+   (set_attr \"mode\" \"V2SF\")])\n+\n+(define_insn \"mmx_rsqrtv2sf2\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"nonimmediate_operand\" \"ym\")]\n+\t\t     UNSPEC_PFRSQRT))]\n+  \"TARGET_3DNOW\"\n+  \"pfrsqrt\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"mmx\")\n+   (set_attr \"mode\" \"V2SF\")])\n+\t\t\n+(define_insn \"mmx_rsqit1v2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")]\n+\t\t     UNSPEC_PFRSQIT1))]\n+  \"TARGET_3DNOW\"\n+  \"pfrsqit1\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmx\")\n+   (set_attr \"mode\" \"V2SF\")])\n+\n+(define_insn \"mmx_haddv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+\t(vec_concat:V2SF\n+\t  (plus:SF\n+\t    (vec_select:SF\n+\t      (match_operand:V2SF 1 \"register_operand\" \"0\")\n+\t      (parallel [(const_int  0)]))\n+\t    (vec_select:SF (match_dup 1) (parallel [(const_int 1)])))\n+\t  (plus:SF\n+            (vec_select:SF\n+\t      (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")\n+\t      (parallel [(const_int  0)]))\n+\t    (vec_select:SF (match_dup 2) (parallel [(const_int 1)])))))]\n+  \"TARGET_3DNOW\"\n+  \"pfacc\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"mode\" \"V2SF\")])\n+\n+(define_insn \"mmx_hsubv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+\t(vec_concat:V2SF\n+\t  (minus:SF\n+\t    (vec_select:SF\n+\t      (match_operand:V2SF 1 \"register_operand\" \"0\")\n+\t      (parallel [(const_int  0)]))\n+\t    (vec_select:SF (match_dup 1) (parallel [(const_int 1)])))\n+\t  (minus:SF\n+            (vec_select:SF\n+\t      (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")\n+\t      (parallel [(const_int  0)]))\n+\t    (vec_select:SF (match_dup 2) (parallel [(const_int 1)])))))]\n+  \"TARGET_3DNOW_A\"\n+  \"pfnacc\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"mode\" \"V2SF\")])\n+\n+(define_insn \"mmx_addsubv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+        (vec_merge:V2SF\n+          (plus:V2SF\n+            (match_operand:V2SF 1 \"register_operand\" \"0\")\n+            (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\"))\n+          (minus:V2SF (match_dup 1) (match_dup 2))\n+          (const_int 1)))]\n+  \"TARGET_3DNOW_A\"\n+  \"pfpnacc\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"mode\" \"V2SF\")])\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;;\n+;; Parallel single-precision floating point comparisons\n+;;\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_insn \"mmx_gtv2sf3\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n+\t(gt:V2SI (match_operand:V2SF 1 \"register_operand\" \"0\")\n+\t\t (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_3DNOW\"\n+  \"pfcmpgt\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxcmp\")\n+   (set_attr \"mode\" \"V2SF\")])\n+\n+(define_insn \"mmx_gev2sf3\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n+\t(ge:V2SI (match_operand:V2SF 1 \"register_operand\" \"0\")\n+\t\t (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_3DNOW\"\n+  \"pfcmpge\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxcmp\")\n+   (set_attr \"mode\" \"V2SF\")])\n+\n+(define_insn \"mmx_eqv2sf3\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n+\t(eq:V2SI (match_operand:V2SF 1 \"nonimmediate_operand\" \"%0\")\n+\t\t (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_3DNOW && ix86_binary_operator_ok (EQ, V2SFmode, operands)\"\n+  \"pfcmpeq\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxcmp\")\n+   (set_attr \"mode\" \"V2SF\")])\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;;\n+;; Parallel single-precision floating point conversion operations\n+;;\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_insn \"mmx_pf2id\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n+\t(fix:V2SI (match_operand:V2SF 1 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_3DNOW\"\n+  \"pf2id\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"mmxcvt\")\n+   (set_attr \"mode\" \"V2SF\")])\n+\n+(define_insn \"mmx_pf2iw\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n+\t(sign_extend:V2SI\n+\t  (ss_truncate:V2HI\n+\t    (fix:V2SI\n+\t      (match_operand:V2SF 1 \"nonimmediate_operand\" \"ym\")))))]\n+  \"TARGET_3DNOW_A\"\n+  \"pf2iw\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"mmxcvt\")\n+   (set_attr \"mode\" \"V2SF\")])\n+\n+(define_insn \"mmx_pi2fw\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+\t(float:V2SF\n+\t  (sign_extend:V2SI\n+\t    (truncate:V2HI\n+\t      (match_operand:V2SI 1 \"nonimmediate_operand\" \"ym\")))))]\n+  \"TARGET_3DNOW_A\"\n+  \"pi2fw\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"mmxcvt\")\n+   (set_attr \"mode\" \"V2SF\")])\n+\n+(define_insn \"mmx_floatv2si2\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+\t(float:V2SF (match_operand:V2SI 1 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_3DNOW\"\n+  \"pi2fd\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"mmxcvt\")\n+   (set_attr \"mode\" \"V2SF\")])\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;;\n+;; Parallel single-precision floating point element swizzling\n+;;\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_insn \"mmx_pswapdv2sf2\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n+\t(vec_select:V2SF (match_operand:V2SF 1 \"nonimmediate_operand\" \"ym\")\n+\t\t\t (parallel [(const_int 1) (const_int 0)])))]\n+  \"TARGET_3DNOW_A\"\n+  \"pswapd\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"mmxcvt\")\n+   (set_attr \"mode\" \"V2SF\")])\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;;\n+;; Parallel integral arithmetic\n+;;\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_insn \"mmx_add<mode>3\"\n+  [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=y\")\n+        (plus:MMXMODEI\n+\t  (match_operand:MMXMODEI 1 \"nonimmediate_operand\" \"%0\")\n+\t  (match_operand:MMXMODEI 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_MMX && ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n+  \"padd<mmxvecsize>\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_adddi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n+        (unspec:DI\n+\t [(plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0\")\n+\t\t   (match_operand:DI 2 \"nonimmediate_operand\" \"ym\"))]\n+\t UNSPEC_NOP))]\n+  \"TARGET_MMX && ix86_binary_operator_ok (PLUS, DImode, operands)\"\n+  \"paddq\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_ssadd<mode>3\"\n+  [(set (match_operand:MMXMODE12 0 \"register_operand\" \"=y\")\n+        (ss_plus:MMXMODE12\n+\t  (match_operand:MMXMODE12 1 \"nonimmediate_operand\" \"%0\")\n+\t  (match_operand:MMXMODE12 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_MMX\"\n+  \"padds<mmxvecsize>\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_usadd<mode>3\"\n+  [(set (match_operand:MMXMODE12 0 \"register_operand\" \"=y\")\n+        (us_plus:MMXMODE12\n+\t  (match_operand:MMXMODE12 1 \"nonimmediate_operand\" \"%0\")\n+\t  (match_operand:MMXMODE12 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_MMX\"\n+  \"paddus<mmxvecsize>\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_sub<mode>3\"\n+  [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=y\")\n+        (minus:MMXMODEI\n+\t  (match_operand:MMXMODEI 1 \"register_operand\" \"0\")\n+\t  (match_operand:MMXMODEI 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_MMX\"\n+  \"psub<mmxvecsize>\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_subdi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n+        (unspec:DI\n+\t [(minus:DI (match_operand:DI 1 \"register_operand\" \"0\")\n+\t\t    (match_operand:DI 2 \"nonimmediate_operand\" \"ym\"))]\n+\t UNSPEC_NOP))]\n+  \"TARGET_MMX\"\n+  \"psubq\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_sssub<mode>3\"\n+  [(set (match_operand:MMXMODE12 0 \"register_operand\" \"=y\")\n+        (ss_minus:MMXMODE12\n+\t  (match_operand:MMXMODE12 1 \"register_operand\" \"0\")\n+\t  (match_operand:MMXMODE12 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_MMX\"\n+  \"psubs<mmxvecsize>\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_ussub<mode>3\"\n+  [(set (match_operand:MMXMODE12 0 \"register_operand\" \"=y\")\n+        (us_minus:MMXMODE12\n+\t  (match_operand:MMXMODE12 1 \"register_operand\" \"0\")\n+\t  (match_operand:MMXMODE12 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_MMX\"\n+  \"psubus<mmxvecsize>\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_mulv4hi3\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n+        (mult:V4HI (match_operand:V4HI 1 \"nonimmediate_operand\" \"%0\")\n+\t\t   (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_MMX && ix86_binary_operator_ok (MULT, V4HImode, operands)\"\n+  \"pmullw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxmul\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_smulv4hi3_highpart\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n+\t(truncate:V4HI\n+\t (lshiftrt:V4SI\n+\t  (mult:V4SI (sign_extend:V4SI\n+\t\t      (match_operand:V4HI 1 \"nonimmediate_operand\" \"%0\"))\n+\t\t     (sign_extend:V4SI\n+\t\t      (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))\n+\t  (const_int 16))))]\n+  \"TARGET_MMX && ix86_binary_operator_ok (MULT, V4HImode, operands)\"\n+  \"pmulhw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxmul\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_umulv4hi3_highpart\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n+\t(truncate:V4HI\n+\t (lshiftrt:V4SI\n+\t  (mult:V4SI (zero_extend:V4SI\n+\t\t      (match_operand:V4HI 1 \"nonimmediate_operand\" \"%0\"))\n+\t\t     (zero_extend:V4SI\n+\t\t      (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))\n+\t  (const_int 16))))]\n+  \"(TARGET_SSE || TARGET_3DNOW_A)\n+   && ix86_binary_operator_ok (MULT, V4HImode, operands)\"\n+  \"pmulhuw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxmul\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_pmaddwd\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n+        (plus:V2SI\n+\t  (mult:V2SI\n+\t    (sign_extend:V2SI\n+\t      (vec_select:V2HI\n+\t\t(match_operand:V4HI 1 \"nonimmediate_operand\" \"%0\")\n+\t\t(parallel [(const_int 0) (const_int 2)])))\n+\t    (sign_extend:V2SI\n+\t      (vec_select:V2HI\n+\t\t(match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")\n+\t\t(parallel [(const_int 0) (const_int 2)]))))\n+\t  (mult:V2SI\n+\t    (sign_extend:V2SI\n+\t      (vec_select:V2HI (match_dup 1)\n+\t\t(parallel [(const_int 1) (const_int 3)])))\n+\t    (sign_extend:V2SI\n+\t      (vec_select:V2HI (match_dup 2)\n+\t\t(parallel [(const_int 1) (const_int 3)]))))))]\n+  \"TARGET_MMX && ix86_binary_operator_ok (MULT, V4HImode, operands)\"\n+  \"pmaddwd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxmul\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_pmulhrwv4hi3\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n+\t(truncate:V4HI\n+\t  (lshiftrt:V4SI\n+\t    (plus:V4SI\n+\t      (mult:V4SI\n+\t        (sign_extend:V4SI\n+\t\t  (match_operand:V4HI 1 \"nonimmediate_operand\" \"%0\"))\n+\t        (sign_extend:V4SI\n+\t\t  (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))\n+\t      (const_vector:V4SI [(const_int 32768) (const_int 32768)\n+\t\t\t\t  (const_int 32768) (const_int 32768)]))\n+\t    (const_int 16))))]\n+  \"TARGET_3DNOW && ix86_binary_operator_ok (MULT, V4HImode, operands)\"\n+  \"pmulhrw\\\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxmul\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"sse2_umulsidi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n+        (mult:DI\n+\t  (zero_extend:DI\n+\t    (vec_select:SI\n+\t      (match_operand:V2SI 1 \"nonimmediate_operand\" \"%0\")\n+\t      (parallel [(const_int 0)])))\n+\t  (zero_extend:DI\n+\t    (vec_select:SI\n+\t      (match_operand:V2SI 2 \"nonimmediate_operand\" \"ym\")\n+\t      (parallel [(const_int 0)])))))]\n+  \"TARGET_SSE2 && ix86_binary_operator_ok (MULT, V2SImode, operands)\"\n+  \"pmuludq\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxmul\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_umaxv8qi3\"\n+  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n+        (umax:V8QI (match_operand:V8QI 1 \"nonimmediate_operand\" \"%0\")\n+\t\t   (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"(TARGET_SSE || TARGET_3DNOW_A)\n+   && ix86_binary_operator_ok (UMAX, V8QImode, operands)\"\n+  \"pmaxub\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_smaxv4hi3\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n+        (smax:V4HI (match_operand:V4HI 1 \"nonimmediate_operand\" \"%0\")\n+\t\t   (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"(TARGET_SSE || TARGET_3DNOW_A)\n+   && ix86_binary_operator_ok (SMAX, V4HImode, operands)\"\n+  \"pmaxsw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_uminv8qi3\"\n+  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n+        (umin:V8QI (match_operand:V8QI 1 \"nonimmediate_operand\" \"%0\")\n+\t\t   (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"(TARGET_SSE || TARGET_3DNOW_A)\n+   && ix86_binary_operator_ok (UMIN, V8QImode, operands)\"\n+  \"pminub\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_sminv4hi3\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n+        (smin:V4HI (match_operand:V4HI 1 \"nonimmediate_operand\" \"%0\")\n+\t\t   (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"(TARGET_SSE || TARGET_3DNOW_A)\n+   && ix86_binary_operator_ok (SMIN, V4HImode, operands)\"\n+  \"pminsw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_ashr<mode>3\"\n+  [(set (match_operand:MMXMODE24 0 \"register_operand\" \"=y\")\n+        (ashiftrt:MMXMODE24\n+\t  (match_operand:MMXMODE24 1 \"register_operand\" \"0\")\n+\t  (match_operand:DI 2 \"nonmemory_operand\" \"yi\")))]\n+  \"TARGET_MMX\"\n+  \"psra<mmxvecsize>\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxshft\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_lshr<mode>3\"\n+  [(set (match_operand:MMXMODE24 0 \"register_operand\" \"=y\")\n+        (lshiftrt:MMXMODE24\n+\t  (match_operand:MMXMODE24 1 \"register_operand\" \"0\")\n+\t  (match_operand:DI 2 \"nonmemory_operand\" \"yi\")))]\n+  \"TARGET_MMX\"\n+  \"psrl<mmxvecsize>\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxshft\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_lshrdi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n+        (unspec:DI\n+\t  [(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n+\t\t       (match_operand:DI 2 \"nonmemory_operand\" \"yi\"))]\n+\t  UNSPEC_NOP))]\n+  \"TARGET_MMX\"\n+  \"psrlq\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxshft\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_ashl<mode>3\"\n+  [(set (match_operand:MMXMODE24 0 \"register_operand\" \"=y\")\n+        (ashift:MMXMODE24\n+\t  (match_operand:MMXMODE24 1 \"register_operand\" \"0\")\n+\t  (match_operand:DI 2 \"nonmemory_operand\" \"yi\")))]\n+  \"TARGET_MMX\"\n+  \"psll<mmxvecsize>\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxshft\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_ashldi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n+        (unspec:DI\n+\t [(ashift:DI (match_operand:DI 1 \"register_operand\" \"0\")\n+\t\t     (match_operand:DI 2 \"nonmemory_operand\" \"yi\"))]\n+\t UNSPEC_NOP))]\n+  \"TARGET_MMX\"\n+  \"psllq\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxshft\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;;\n+;; Parallel integral comparisons\n+;;\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_insn \"mmx_eq<mode>3\"\n+  [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=y\")\n+        (eq:MMXMODEI\n+\t  (match_operand:MMXMODEI 1 \"nonimmediate_operand\" \"%0\")\n+\t  (match_operand:MMXMODEI 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_MMX && ix86_binary_operator_ok (EQ, <MODE>mode, operands)\"\n+  \"pcmpeq<mmxvecsize>\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxcmp\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_gt<mode>3\"\n+  [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=y\")\n+        (gt:MMXMODEI\n+\t  (match_operand:MMXMODEI 1 \"register_operand\" \"0\")\n+\t  (match_operand:MMXMODEI 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_MMX\"\n+  \"pcmpgt<mmxvecsize>\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxcmp\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;;\n+;; Parallel integral logical operations\n+;;\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_insn \"mmx_and<mode>3\"\n+  [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=y\")\n+\t(and:MMXMODEI\n+\t  (match_operand:MMXMODEI 1 \"nonimmediate_operand\" \"%0\")\n+\t  (match_operand:MMXMODEI 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_MMX && ix86_binary_operator_ok (AND, <MODE>mode, operands)\"\n+  \"pand\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_nand<mode>3\"\n+  [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=y\")\n+\t(and:MMXMODEI\n+\t  (not:MMXMODEI (match_operand:MMXMODEI 1 \"register_operand\" \"0\"))\n+\t  (match_operand:MMXMODEI 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_MMX\"\n+  \"pandn\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_ior<mode>3\"\n+  [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=y\")\n+        (ior:MMXMODEI\n+\t  (match_operand:MMXMODEI 1 \"nonimmediate_operand\" \"%0\")\n+\t  (match_operand:MMXMODEI 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_MMX && ix86_binary_operator_ok (IOR, <MODE>mode, operands)\"\n+  \"por\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_xor<mode>3\"\n+  [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=y\")\n+\t(xor:MMXMODEI\n+\t  (match_operand:MMXMODEI 1 \"nonimmediate_operand\" \"%0\")\n+\t  (match_operand:MMXMODEI 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_MMX && ix86_binary_operator_ok (XOR, <MODE>mode, operands)\"\n+  \"pxor\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxadd\")\n+   (set_attr \"mode\" \"DI\")\n+   (set_attr \"memory\" \"none\")])\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;;\n+;; Parallel integral element swizzling\n+;;\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_insn \"mmx_packsswb\"\n+  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n+\t(vec_concat:V8QI\n+\t  (ss_truncate:V4QI\n+\t    (match_operand:V4HI 1 \"register_operand\" \"0\"))\n+\t  (ss_truncate:V4QI\n+\t    (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\"))))]\n+  \"TARGET_MMX\"\n+  \"packsswb\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxshft\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_packssdw\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n+\t(vec_concat:V4HI\n+\t  (ss_truncate:V2HI\n+\t    (match_operand:V2SI 1 \"register_operand\" \"0\"))\n+\t  (ss_truncate:V2HI\n+\t    (match_operand:V2SI 2 \"nonimmediate_operand\" \"ym\"))))]\n+  \"TARGET_MMX\"\n+  \"packssdw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxshft\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_packuswb\"\n+  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n+\t(vec_concat:V8QI\n+\t  (us_truncate:V4QI\n+\t    (match_operand:V4HI 1 \"register_operand\" \"0\"))\n+\t  (us_truncate:V4QI\n+\t    (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\"))))]\n+  \"TARGET_MMX\"\n+  \"packuswb\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxshft\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_punpckhbw\"\n+  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n+\t(vec_select:V8QI\n+\t  (vec_concat:V16QI\n+\t    (match_operand:V8QI 1 \"register_operand\" \"0\")\n+\t    (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\"))\n+          (parallel [(const_int 4) (const_int 12)\n+                     (const_int 5) (const_int 13)\n+                     (const_int 6) (const_int 14)\n+                     (const_int 7) (const_int 15)])))]\n+  \"TARGET_MMX\"\n+  \"punpckhbw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxcvt\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_punpcklbw\"\n+  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n+\t(vec_select:V8QI\n+\t  (vec_concat:V16QI\n+\t    (match_operand:V8QI 1 \"register_operand\" \"0\")\n+\t    (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\"))\n+          (parallel [(const_int 0) (const_int 8)\n+                     (const_int 1) (const_int 9)\n+                     (const_int 2) (const_int 10)\n+                     (const_int 3) (const_int 11)])))]\n+  \"TARGET_MMX\"\n+  \"punpcklbw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxcvt\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_punpckhwd\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n+\t(vec_select:V4HI\n+\t  (vec_concat:V8HI\n+\t    (match_operand:V4HI 1 \"register_operand\" \"0\")\n+\t    (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\"))\n+          (parallel [(const_int 2) (const_int 6)\n+                     (const_int 3) (const_int 7)])))]\n+  \"TARGET_MMX\"\n+  \"punpckhwd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxcvt\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_punpcklwd\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n+\t(vec_select:V4HI\n+\t  (vec_concat:V8HI\n+\t    (match_operand:V4HI 1 \"register_operand\" \"0\")\n+\t    (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\"))\n+          (parallel [(const_int 0) (const_int 4)\n+                     (const_int 1) (const_int 5)])))]\n+  \"TARGET_MMX\"\n+  \"punpcklwd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxcvt\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_punpckhdq\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n+\t(vec_select:V2SI\n+\t  (vec_concat:V4SI\n+\t    (match_operand:V2SI 1 \"register_operand\" \"0\")\n+\t    (match_operand:V2SI 2 \"nonimmediate_operand\" \"ym\"))\n+\t  (parallel [(const_int 1)\n+\t\t     (const_int 3)])))]\n+  \"TARGET_MMX\"\n+  \"punpckhdq\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxcvt\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_punpckldq\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n+\t(vec_select:V2SI\n+\t  (vec_concat:V4SI\n+\t    (match_operand:V2SI 1 \"register_operand\" \"0\")\n+\t    (match_operand:V2SI 2 \"nonimmediate_operand\" \"ym\"))\n+\t  (parallel [(const_int 0)\n+\t\t     (const_int 2)])))]\n+  \"TARGET_MMX\"\n+  \"punpckldq\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxcvt\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_expand \"mmx_pinsrw\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"\")\n+        (vec_merge:V4HI\n+\t  (match_operand:V4HI 1 \"register_operand\" \"\")\n+          (vec_duplicate:V4HI\n+            (match_operand:SI 2 \"nonimmediate_operand\" \"\"))\n+          (match_operand:SI 3 \"const_0_to_3_operand\" \"\")))]\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n+{\n+  operands[2] = gen_lowpart (HImode, operands[2]);\n+  operands[3] = GEN_INT (1 << INTVAL (operands[3]));\n+})\n+\n+(define_insn \"*mmx_pinsrw\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n+        (vec_merge:V4HI\n+\t  (match_operand:V4HI 1 \"register_operand\" \"0\")\n+          (vec_duplicate:V4HI\n+            (match_operand:HI 2 \"nonimmediate_operand\" \"rm\"))\n+          (match_operand:SI 3 \"const_pow2_1_to_8_operand\" \"n\")))]\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n+{\n+  operands[3] = GEN_INT (exact_log2 (INTVAL (operands[3])));\n+  return \"pinsrw\\t{%3, %k2, %0|%0, %k2, %3}\";\n+}\n+  [(set_attr \"type\" \"mmxcvt\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_pextrw\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (zero_extend:SI\n+\t  (vec_select:HI\n+\t    (match_operand:V4HI 1 \"register_operand\" \"y\")\n+\t    (parallel [(match_operand:SI 2 \"const_0_to_3_operand\" \"n\")]))))]\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n+  \"pextrw\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"mmxcvt\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+\n+(define_expand \"mmx_pshufw\"\n+  [(match_operand:V4HI 0 \"register_operand\" \"\")\n+   (match_operand:V4HI 1 \"nonimmediate_operand\" \"\")\n+   (match_operand:SI 2 \"const_int_operand\" \"\")]\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n+{\n+  int mask = INTVAL (operands[2]);\n+  emit_insn (gen_mmx_pshufw_1 (operands[0], operands[1],\n+                               GEN_INT ((mask >> 0) & 3),\n+                               GEN_INT ((mask >> 2) & 3),\n+                               GEN_INT ((mask >> 4) & 3),\n+                               GEN_INT ((mask >> 6) & 3)));\n+  DONE;\n+})\n+\n+(define_insn \"mmx_pshufw_1\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n+        (vec_select:V4HI\n+          (match_operand:V4HI 1 \"nonimmediate_operand\" \"ym\")\n+          (parallel [(match_operand 2 \"const_0_to_3_operand\" \"\")\n+                     (match_operand 3 \"const_0_to_3_operand\" \"\")\n+                     (match_operand 4 \"const_0_to_3_operand\" \"\")\n+                     (match_operand 5 \"const_0_to_3_operand\" \"\")])))]\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n+{\n+  int mask = 0;\n+  mask |= INTVAL (operands[2]) << 0;\n+  mask |= INTVAL (operands[3]) << 2;\n+  mask |= INTVAL (operands[4]) << 4;\n+  mask |= INTVAL (operands[5]) << 6;\n+  operands[2] = GEN_INT (mask);\n+\n+  return \"pshufw\\t{%2, %1, %0|%0, %1, %2}\";\n+}\n+  [(set_attr \"type\" \"mmxcvt\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_pswapdv2si2\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n+\t(vec_select:V2SI\n+\t  (match_operand:V2SI 1 \"nonimmediate_operand\" \"ym\")\n+\t  (parallel [(const_int 1) (const_int 0)])))]\n+  \"TARGET_3DNOW_A\"\n+  \"pswapd\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"mmxcvt\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;;\n+;; Miscelaneous\n+;;\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_insn \"mmx_uavgv8qi3\"\n+  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n+\t(truncate:V8QI\n+\t  (lshiftrt:V8HI\n+\t    (plus:V8HI\n+\t      (plus:V8HI\n+\t\t(zero_extend:V8HI\n+\t\t  (match_operand:V8QI 1 \"nonimmediate_operand\" \"%0\"))\n+\t\t(zero_extend:V8HI\n+\t\t  (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\")))\n+\t      (const_vector:V8HI [(const_int 1) (const_int 1)\n+\t\t\t\t  (const_int 1) (const_int 1)\n+\t\t\t\t  (const_int 1) (const_int 1)\n+\t\t\t\t  (const_int 1) (const_int 1)]))\n+\t    (const_int 1))))]\n+  \"(TARGET_SSE || TARGET_3DNOW)\n+   && ix86_binary_operator_ok (PLUS, V8QImode, operands)\"\n+{\n+  /* These two instructions have the same operation, but their encoding\n+     is different.  Prefer the one that is defacto standard.  */\n+  if (TARGET_SSE || TARGET_3DNOW_A)\n+    return \"pavgb\\t{%2, %0|%0, %2}\";\n+  else\n+    return \"pavgusb\\\\t{%2, %0|%0, %2}\";\n+}\n+  [(set_attr \"type\" \"mmxshft\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_uavgv4hi3\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n+\t(truncate:V4HI\n+\t  (lshiftrt:V4SI\n+\t    (plus:V4SI\n+\t      (plus:V4SI\n+\t\t(zero_extend:V4SI\n+\t\t  (match_operand:V4HI 1 \"nonimmediate_operand\" \"%0\"))\n+\t\t(zero_extend:V4SI\n+\t\t  (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))\n+\t      (const_vector:V4SI [(const_int 1) (const_int 1)\n+\t\t\t\t  (const_int 1) (const_int 1)]))\n+\t    (const_int 1))))]\n+  \"(TARGET_SSE || TARGET_3DNOW_A)\n+   && ix86_binary_operator_ok (PLUS, V4HImode, operands)\"\n+  \"pavgw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxshft\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_psadbw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n+        (unspec:DI [(match_operand:V8QI 1 \"register_operand\" \"0\")\n+\t\t    (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\")]\n+\t\t   UNSPEC_PSADBW))]\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n+  \"psadbw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxshft\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_pmovmskb\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:V8QI 1 \"register_operand\" \"y\")]\n+\t\t   UNSPEC_MOVMSK))]\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n+  \"pmovmskb\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"mode\" \"V4SF\")])\n+\n+(define_expand \"mmx_maskmovq\"\n+  [(set (match_operand:V8QI 0 \"memory_operand\" \"\")\n+\t(unspec:V8QI [(match_operand:V8QI 1 \"register_operand\" \"y\")\n+\t\t      (match_operand:V8QI 2 \"register_operand\" \"y\")\n+\t\t      (match_dup 0)]\n+\t\t     UNSPEC_MASKMOV))]\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n+  \"\")\n+\n+(define_insn \"*mmx_maskmovq\"\n+  [(set (mem:V8QI (match_operand:SI 0 \"register_operand\" \"D\"))\n+\t(unspec:V8QI [(match_operand:V8QI 1 \"register_operand\" \"y\")\n+\t\t      (match_operand:V8QI 2 \"register_operand\" \"y\")\n+\t\t      (mem:V8QI (match_dup 0))]\n+\t\t     UNSPEC_MASKMOV))]\n+  \"(TARGET_SSE || TARGET_3DNOW_A) && !TARGET_64BIT\"\n+  ;; @@@ check ordering of operands in intel/nonintel syntax\n+  \"maskmovq\\t{%2, %1|%1, %2}\"\n+  [(set_attr \"type\" \"mmxcvt\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"*mmx_maskmovq_rex\"\n+  [(set (mem:V8QI (match_operand:DI 0 \"register_operand\" \"D\"))\n+\t(unspec:V8QI [(match_operand:V8QI 1 \"register_operand\" \"y\")\n+\t\t      (match_operand:V8QI 2 \"register_operand\" \"y\")\n+\t\t      (mem:V8QI (match_dup 0))]\n+\t\t     UNSPEC_MASKMOV))]\n+  \"(TARGET_SSE || TARGET_3DNOW_A) && TARGET_64BIT\"\n+  ;; @@@ check ordering of operands in intel/nonintel syntax\n+  \"maskmovq\\t{%2, %1|%1, %2}\"\n+  [(set_attr \"type\" \"mmxcvt\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"mmx_emms\"\n+  [(unspec_volatile [(const_int 0)] UNSPECV_EMMS)\n+   (clobber (reg:XF 8))\n+   (clobber (reg:XF 9))\n+   (clobber (reg:XF 10))\n+   (clobber (reg:XF 11))\n+   (clobber (reg:XF 12))\n+   (clobber (reg:XF 13))\n+   (clobber (reg:XF 14))\n+   (clobber (reg:XF 15))\n+   (clobber (reg:DI 29))\n+   (clobber (reg:DI 30))\n+   (clobber (reg:DI 31))\n+   (clobber (reg:DI 32))\n+   (clobber (reg:DI 33))\n+   (clobber (reg:DI 34))\n+   (clobber (reg:DI 35))\n+   (clobber (reg:DI 36))]\n+  \"TARGET_MMX\"\n+  \"emms\"\n+  [(set_attr \"type\" \"mmx\")\n+   (set_attr \"memory\" \"unknown\")])\n+\n+(define_insn \"mmx_femms\"\n+  [(unspec_volatile [(const_int 0)] UNSPECV_FEMMS)\n+   (clobber (reg:XF 8))\n+   (clobber (reg:XF 9))\n+   (clobber (reg:XF 10))\n+   (clobber (reg:XF 11))\n+   (clobber (reg:XF 12))\n+   (clobber (reg:XF 13))\n+   (clobber (reg:XF 14))\n+   (clobber (reg:XF 15))\n+   (clobber (reg:DI 29))\n+   (clobber (reg:DI 30))\n+   (clobber (reg:DI 31))\n+   (clobber (reg:DI 32))\n+   (clobber (reg:DI 33))\n+   (clobber (reg:DI 34))\n+   (clobber (reg:DI 35))\n+   (clobber (reg:DI 36))]\n+  \"TARGET_3DNOW\"\n+  \"femms\"\n+  [(set_attr \"type\" \"mmx\")\n+   (set_attr \"memory\" \"none\")]) "}, {"sha": "7821744b526a75555190d60e9225aee75ea9c619", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e8bb90c4183cc54caf5c8e7078106b4c9a7750/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e8bb90c4183cc54caf5c8e7078106b4c9a7750/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=80e8bb90c4183cc54caf5c8e7078106b4c9a7750", "patch": "@@ -3051,6 +3051,39 @@\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"sse_ldmxcsr\"\n+  [(unspec_volatile [(match_operand:SI 0 \"memory_operand\" \"m\")]\n+\t\t    UNSPECV_LDMXCSR)]\n+  \"TARGET_SSE\"\n+  \"ldmxcsr\\t%0\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"memory\" \"load\")])\n+\n+(define_insn \"sse_stmxcsr\"\n+  [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n+\t(unspec_volatile:SI [(const_int 0)] UNSPECV_STMXCSR))]\n+  \"TARGET_SSE\"\n+  \"stmxcsr\\t%0\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"memory\" \"store\")])\n+\n+(define_expand \"sse_sfence\"\n+  [(set (match_dup 0)\n+\t(unspec:BLK [(match_dup 0)] UNSPEC_SFENCE))]\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n+{\n+  operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[0]) = 1;\n+})\n+\n+(define_insn \"*sse_sfence\"\n+  [(set (match_operand:BLK 0 \"\" \"\")\n+\t(unspec:BLK [(match_dup 0)] UNSPEC_SFENCE))]\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n+  \"sfence\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"memory\" \"unknown\")])\n+\n (define_insn \"sse2_clflush\"\n   [(unspec_volatile [(match_operand 0 \"address_operand\" \"p\")]\n \t\t    UNSPECV_CLFLUSH)]"}]}