{"sha": "fc5a970817ad432e06cf22613ac5bd3e85c0e081", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM1YTk3MDgxN2FkNDMyZTA2Y2YyMjYxM2FjNWJkM2U4NWMwZTA4MQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2019-10-31T10:12:55Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2019-10-31T10:12:55Z"}, "message": "Fortran] PR92284 \u2013 gfc_desc_to_cfi_desc fixes\n\n        gcc/fortran/\n        PR fortran/92284.\n        * trans-expr.c (gfc_conv_gfc_desc_to_cfi_desc): Free CFI descriptor\n        at the end; partial revised revert of Rev. 277502.\n\n        libgfortran/\n        PR fortran/92284.\n        * runtime/ISO_Fortran_binding.c (gfc_desc_to_cfi_desc):\n\n        gcc/testsuite/\n        PR fortran/92284.\n        * gfortran.dg/bind-c-intent-out.f90: Update expected dump;\n        extend comment.\n        * gfortran.dg/bind_c_array_params_3.f90: New.\n        * gfortran.dg/bind_c_array_params_3_aux.c: New.\n\nFrom-SVN: r277663", "tree": {"sha": "9c54878c62654d99053197728ae36370287bccb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c54878c62654d99053197728ae36370287bccb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc5a970817ad432e06cf22613ac5bd3e85c0e081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc5a970817ad432e06cf22613ac5bd3e85c0e081", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc5a970817ad432e06cf22613ac5bd3e85c0e081", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc5a970817ad432e06cf22613ac5bd3e85c0e081/comments", "author": null, "committer": null, "parents": [{"sha": "9ba66bf5b9c69e0e2bcd1b2ab88160bf9b2aa417", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ba66bf5b9c69e0e2bcd1b2ab88160bf9b2aa417", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ba66bf5b9c69e0e2bcd1b2ab88160bf9b2aa417"}], "stats": {"total": 142, "additions": 116, "deletions": 26}, "files": [{"sha": "6cd05d130b122c6613e48ad1e0a42888709f138e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5a970817ad432e06cf22613ac5bd3e85c0e081/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5a970817ad432e06cf22613ac5bd3e85c0e081/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fc5a970817ad432e06cf22613ac5bd3e85c0e081", "patch": "@@ -1,3 +1,9 @@\n+2019-10-31  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/92284.\n+\t* trans-expr.c (gfc_conv_gfc_desc_to_cfi_desc): Free CFI descriptor\n+\tat the end; partial revised revert of Rev. 277502.\n+\n 2019-10-31  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/92277"}, {"sha": "f800faaa4e537c340c9b18e64b2d5c0d3d4a4b48", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5a970817ad432e06cf22613ac5bd3e85c0e081/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5a970817ad432e06cf22613ac5bd3e85c0e081/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=fc5a970817ad432e06cf22613ac5bd3e85c0e081", "patch": "@@ -5306,13 +5306,13 @@ gfc_conv_gfc_desc_to_cfi_desc (gfc_se *parmse, gfc_expr *e, gfc_symbol *fsym)\n   /* Now pass the gfc_descriptor by reference.  */\n   parmse->expr = gfc_build_addr_expr (NULL_TREE, parmse->expr);\n \n-  /* Variables to point to the gfc and CFI descriptors.  */\n+  /* Variables to point to the gfc and CFI descriptors; cfi = NULL implies\n+     that the CFI descriptor is allocated by the gfor_fndecl_gfc_to_cfi call.  */\n   gfc_desc_ptr = parmse->expr;\n   cfi_desc_ptr = gfc_create_var (pvoid_type_node, \"cfi\");\n-  gfc_add_modify (&parmse->pre, cfi_desc_ptr,\n-\t\t  build_int_cst (pvoid_type_node, 0));\n+  gfc_add_modify (&parmse->pre, cfi_desc_ptr, null_pointer_node);\n \n-  /* Allocate the CFI descriptor and fill the fields.  */\n+  /* Allocate the CFI descriptor itself and fill the fields.  */\n   tmp = gfc_build_addr_expr (NULL_TREE, cfi_desc_ptr);\n   tmp = build_call_expr_loc (input_location,\n \t\t\t     gfor_fndecl_gfc_to_cfi, 2, tmp, gfc_desc_ptr);\n@@ -5327,6 +5327,10 @@ gfc_conv_gfc_desc_to_cfi_desc (gfc_se *parmse, gfc_expr *e, gfc_symbol *fsym)\n   /* The CFI descriptor is passed to the bind_C procedure.  */\n   parmse->expr = cfi_desc_ptr;\n \n+  /* Free the CFI descriptor.  */\n+  tmp = gfc_call_free (cfi_desc_ptr);\n+  gfc_prepend_expr_to_block (&parmse->post, tmp);\n+\n   /* Transfer values back to gfc descriptor.  */\n   tmp = gfc_build_addr_expr (NULL_TREE, parmse->expr);\n   tmp = build_call_expr_loc (input_location,"}, {"sha": "1cbb91283857f630caddf74fbc87dda8db65f22f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5a970817ad432e06cf22613ac5bd3e85c0e081/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5a970817ad432e06cf22613ac5bd3e85c0e081/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fc5a970817ad432e06cf22613ac5bd3e85c0e081", "patch": "@@ -1,3 +1,11 @@\n+2019-10-31  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/92284.\n+\t* gfortran.dg/bind-c-intent-out.f90: Update expected dump;\n+\textend comment.\n+\t* gfortran.dg/bind_c_array_params_3.f90: New.\n+\t* gfortran.dg/bind_c_array_params_3_aux.c: New.\n+\n 2019-10-31  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-c++-common/gomp/declare-variant-9.c: New test."}, {"sha": "39822c0753a77d0527394a53b152d2f80701ddcc", "filename": "gcc/testsuite/gfortran.dg/bind-c-intent-out.f90", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5a970817ad432e06cf22613ac5bd3e85c0e081/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind-c-intent-out.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5a970817ad432e06cf22613ac5bd3e85c0e081/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind-c-intent-out.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind-c-intent-out.f90?ref=fc5a970817ad432e06cf22613ac5bd3e85c0e081", "patch": "@@ -35,7 +35,8 @@ end program p\n ! the intent(out) implies freeing in the callee (!), hence the \"free\"\n ! It is the only 'free' as 'a' is part of the main program and, hence, implicitly has the SAVE attribute.\n ! The  'cfi = 0' appears before the call due to the deallocate and when preparing the C descriptor\n+! As cfi (i.e. the descriptor itself) is allocated in libgomp, it has to be freed after the call.\n \n-! { dg-final { scan-tree-dump-times \"__builtin_free\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"__builtin_free \\\\(cfi\\\\.\\[0-9\\]+\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_free\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_free \\\\(cfi\\\\.\\[0-9\\]+\\\\);\" 2 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"cfi\\\\.\\[0-9\\]+ = 0B;\" 2 \"original\" } }"}, {"sha": "d5bad7d03f29d486fd0b048225e50ffa016ed99c", "filename": "gcc/testsuite/gfortran.dg/bind_c_array_params_3.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5a970817ad432e06cf22613ac5bd3e85c0e081/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_array_params_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5a970817ad432e06cf22613ac5bd3e85c0e081/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_array_params_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_array_params_3.f90?ref=fc5a970817ad432e06cf22613ac5bd3e85c0e081", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do run }\n+! { dg-additional-sources bind_c_array_params_3_aux.c }\n+!\n+! PR fortran/92284\n+!\n+! Contributed by Jos\u00e9 Rui Faustino de Sousa\n+!\n+program arr_p\n+  use, intrinsic :: iso_c_binding, only: c_int\n+  implicit none (type, external)\n+\n+  integer(kind=c_int), pointer :: arr(:)\n+  integer :: i\n+\n+  nullify(arr)\n+  call arr_set(arr)\n+\n+  if (.not.associated(arr)) stop 1\n+  if (lbound(arr,dim=1) /= 1) stop 2\n+  if (ubound(arr,dim=1) /= 9) stop 3\n+  if (any (arr /= [(i, i=0,8)])) stop 4\n+  deallocate(arr)\n+\n+contains\n+\n+  subroutine arr_set(this) !bind(c)\n+    integer(kind=c_int), pointer, intent(out) :: this(:)\n+\n+    interface\n+      subroutine arr_set_c(this) bind(c)\n+        use, intrinsic :: iso_c_binding, only: c_int\n+        implicit none\n+        integer(kind=c_int), pointer, intent(out) :: this(:)\n+      end subroutine arr_set_c\n+    end interface\n+\n+    call arr_set_c(this)\n+  end subroutine arr_set\n+end program arr_p"}, {"sha": "6e13aa3b2efd7e864b70288525519b62774bbfd5", "filename": "gcc/testsuite/gfortran.dg/bind_c_array_params_3_aux.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5a970817ad432e06cf22613ac5bd3e85c0e081/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_array_params_3_aux.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5a970817ad432e06cf22613ac5bd3e85c0e081/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_array_params_3_aux.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_array_params_3_aux.c?ref=fc5a970817ad432e06cf22613ac5bd3e85c0e081", "patch": "@@ -0,0 +1,27 @@\n+/* Used by bind_c_array_params_3.f90.  */\n+/* PR fortran/92284.  */\n+\n+#include <assert.h>\n+#include <errno.h>\n+#include <stdio.h>\n+\n+#include \"ISO_Fortran_binding.h\"\n+\n+void arr_set_c(CFI_cdesc_t*);\n+\n+void arr_set_c(CFI_cdesc_t *arr){\n+  int i, stat, *auxp = NULL;\n+  CFI_index_t   lb[] = {1};\n+  CFI_index_t   ub[] = {9};\n+  \n+  assert(arr);\n+  assert(arr->rank==1);\n+  assert(!arr->base_addr);\n+  stat = CFI_allocate(arr, lb, ub, sizeof(int));\n+  assert(stat==CFI_SUCCESS);\n+  auxp = (int*)arr->base_addr;\n+  assert(auxp);\n+  for(i=0; i<ub[0]-lb[0]+1; i++) auxp[i]=i;\n+  return;\n+}\n+"}, {"sha": "c2031cfdafdf2d0fe4c99255fd6f3d8a1eb8ce84", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5a970817ad432e06cf22613ac5bd3e85c0e081/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5a970817ad432e06cf22613ac5bd3e85c0e081/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=fc5a970817ad432e06cf22613ac5bd3e85c0e081", "patch": "@@ -1,3 +1,8 @@\n+2019-10-31  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/92284.\n+\t* runtime/ISO_Fortran_binding.c (gfc_desc_to_cfi_desc):\n+\n 2019-10-19  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/91926\n@@ -7,8 +12,7 @@\n 2019-10-08  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR fortran/68401\n-        * runtime/minimal.c (os_error_at): New function.\n-\n+\t* runtime/minimal.c (os_error_at): New function.\n \t* runtime/minimal.c: Revise.\n \n 2019-10-05  Paul Thomas  <pault@gcc.gnu.org>"}, {"sha": "c71d8e894539a60deb8279f2a6606f9c38c98ea0", "filename": "libgfortran/runtime/ISO_Fortran_binding.c", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5a970817ad432e06cf22613ac5bd3e85c0e081/libgfortran%2Fruntime%2FISO_Fortran_binding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5a970817ad432e06cf22613ac5bd3e85c0e081/libgfortran%2Fruntime%2FISO_Fortran_binding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2FISO_Fortran_binding.c?ref=fc5a970817ad432e06cf22613ac5bd3e85c0e081", "patch": "@@ -119,24 +119,25 @@ gfc_desc_to_cfi_desc (CFI_cdesc_t **d_ptr, const gfc_array_void *s)\n     d->type = (CFI_type_t)(d->type\n \t\t+ ((CFI_type_t)d->elem_len << CFI_type_kind_shift));\n \n-  /* Full pointer or allocatable arrays retain their lower_bounds.  */\n-  for (n = 0; n < GFC_DESCRIPTOR_RANK (s); n++)\n-    {\n-      if (d->attribute != CFI_attribute_other)\n-\td->dim[n].lower_bound = (CFI_index_t)GFC_DESCRIPTOR_LBOUND(s, n);\n-      else\n-\td->dim[n].lower_bound = 0;\n-\n-      /* Assumed size arrays have gfc ubound == 0 and CFI extent = -1.  */\n-      if ((n == GFC_DESCRIPTOR_RANK (s) - 1)\n-\t  && GFC_DESCRIPTOR_LBOUND(s, n) == 1\n-\t  && GFC_DESCRIPTOR_UBOUND(s, n) == 0)\n-\td->dim[n].extent = -1;\n-      else\n-\td->dim[n].extent = (CFI_index_t)GFC_DESCRIPTOR_UBOUND(s, n)\n-\t\t\t    - (CFI_index_t)GFC_DESCRIPTOR_LBOUND(s, n) + 1;\n-      d->dim[n].sm = (CFI_index_t)(GFC_DESCRIPTOR_STRIDE(s, n) * s->span);\n-    }\n+  if (d->base_addr)\n+    /* Full pointer or allocatable arrays retain their lower_bounds.  */\n+    for (n = 0; n < GFC_DESCRIPTOR_RANK (s); n++)\n+      {\n+\tif (d->attribute != CFI_attribute_other)\n+\t  d->dim[n].lower_bound = (CFI_index_t)GFC_DESCRIPTOR_LBOUND(s, n);\n+\telse\n+\t  d->dim[n].lower_bound = 0;\n+\n+\t/* Assumed size arrays have gfc ubound == 0 and CFI extent = -1.  */\n+\tif (n == GFC_DESCRIPTOR_RANK (s) - 1\n+\t    && GFC_DESCRIPTOR_LBOUND(s, n) == 1\n+\t    && GFC_DESCRIPTOR_UBOUND(s, n) == 0)\n+\t  d->dim[n].extent = -1;\n+\telse\n+\t  d->dim[n].extent = (CFI_index_t)GFC_DESCRIPTOR_UBOUND(s, n)\n+\t\t\t     - (CFI_index_t)GFC_DESCRIPTOR_LBOUND(s, n) + 1;\n+\td->dim[n].sm = (CFI_index_t)(GFC_DESCRIPTOR_STRIDE(s, n) * s->span);\n+      }\n \n   if (*d_ptr == NULL)\n     *d_ptr = d;"}]}