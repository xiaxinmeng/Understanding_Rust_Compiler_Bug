{"sha": "fc8813382e632f2eb2a02cc8cbb4dce888f43f90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM4ODEzMzgyZTYzMmYyZWIyYTAyY2M4Y2JiNGRjZTg4OGY0M2Y5MA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-05-19T08:31:53Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-19T08:31:53Z"}, "message": "system.h (BLOCK_PROFILER, [...]): Poison.\n\n\t* system.h (BLOCK_PROFILER, BLOCK_PROFILER_CODE,\n\tFUNCTION_BLOCK_PROFILER, FUNCTION_BLOCK_PROFILER_EXIT,\n\tMACHINE_STATE_SAVE, MACHINE_STATE_RESTORE): Poison.\n\n\t* toplev.c (display_help): Kill -a -ax help.\n\n\t* config/1750a/1750a.h, config/alpha/alpha.h,\n\tconfig/clipper/clipper.h, config/dsp16xx/dsp16xx.h,\n\tconfig/h8300/h8300.h, config/i960/i960.h, config/m68k/tower-as.h,\n\tconfig/m88k/m88k.h, config/vax/vax.h, config/we32k/we32k.h:\n\t(FUNCTION_BLOCK_PROFILER, BLOCK_PROFILER): Kill.\n\n\t* libgcc2.c [L_bb] (BLOCK_PROFILER_CODE): Kill.\n\t* config/m68k/sun3.h (BLOCK_PROFILER_CODE): Kill.\n\n\t* config/i386/i386-protos.h (ix86_output_block_profiler): Kill.\n\t(ix86_output_function_block_profiler): Kill.\n\t* config/m68hc11/m68hc11.c (m68hc11_block_profiler): Kill.\n\t(m68hc11_function_block_profiler): Kill.\n\t* config/m68hc11/m68hc11-protos.h: Update.\n\t* config/m88k/m88k.c (output_block_profiler): Kill.\n\t(output_function_block_profiler): Kill.\n\t* config/m88k/m88k-protos.h: Update.\n\nFrom-SVN: r53617", "tree": {"sha": "ff15c2db487e701300fea79cf42cfc3ca364bb88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff15c2db487e701300fea79cf42cfc3ca364bb88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc8813382e632f2eb2a02cc8cbb4dce888f43f90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc8813382e632f2eb2a02cc8cbb4dce888f43f90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc8813382e632f2eb2a02cc8cbb4dce888f43f90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/comments", "author": null, "committer": null, "parents": [{"sha": "772c52657977a3d3bb3990d98a0b695c8eac6dc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/772c52657977a3d3bb3990d98a0b695c8eac6dc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/772c52657977a3d3bb3990d98a0b695c8eac6dc1"}], "stats": {"total": 335, "additions": 30, "deletions": 305}, "files": [{"sha": "ac79b31c5b74ac0a382355332bce15cfcb6e7584", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc8813382e632f2eb2a02cc8cbb4dce888f43f90", "patch": "@@ -1,3 +1,29 @@\n+2002-05-19  Richard Henderson  <rth@redhat.com>\n+\n+\t* system.h (BLOCK_PROFILER, BLOCK_PROFILER_CODE,\n+\tFUNCTION_BLOCK_PROFILER, FUNCTION_BLOCK_PROFILER_EXIT,\n+\tMACHINE_STATE_SAVE, MACHINE_STATE_RESTORE): Poison.\n+\n+\t* toplev.c (display_help): Kill -a -ax help.\n+\n+\t* config/1750a/1750a.h, config/alpha/alpha.h, \n+\tconfig/clipper/clipper.h, config/dsp16xx/dsp16xx.h,\n+\tconfig/h8300/h8300.h, config/i960/i960.h, config/m68k/tower-as.h,\n+\tconfig/m88k/m88k.h, config/vax/vax.h, config/we32k/we32k.h:\n+\t(FUNCTION_BLOCK_PROFILER, BLOCK_PROFILER): Kill.\n+\n+\t* libgcc2.c [L_bb] (BLOCK_PROFILER_CODE): Kill.\n+\t* config/m68k/sun3.h (BLOCK_PROFILER_CODE): Kill.\n+\n+\t* config/i386/i386-protos.h (ix86_output_block_profiler): Kill.\n+\t(ix86_output_function_block_profiler): Kill.\n+\t* config/m68hc11/m68hc11.c (m68hc11_block_profiler): Kill.\n+\t(m68hc11_function_block_profiler): Kill.\n+\t* config/m68hc11/m68hc11-protos.h: Update.\n+\t* config/m88k/m88k.c (output_block_profiler): Kill.\n+\t(output_function_block_profiler): Kill.\n+\t* config/m88k/m88k-protos.h: Update.\n+\n 2002-05-19  Richard Henderson  <rth@redhat.com>\n \n \t* system.h (STRIP_NAME_ENCODING): Poison it."}, {"sha": "77a8fd7290682447404abb0085c6077955cd93bd", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=fc8813382e632f2eb2a02cc8cbb4dce888f43f90", "patch": "@@ -542,16 +542,6 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n #define FUNCTION_PROFILER(FILE, LABELNO)  \\\n   fprintf (FILE, \"; got into FUNCTION_PROFILER with label # %d\\n\", (LABELNO))\n \n-/* Output assembler code to FILE to initialize this source file's\n-   basic block profiling info, if that has not already been done.  */\n-#define FUNCTION_BLOCK_PROFILER(FILE, LABELNO)  \\\n-  fprintf (FILE, \"; got into FUNCTION_BLOCK_PROFILER with label # %d\\n\",LABELNO)\n-\n-/* Output assembler code to FILE to increment the entry-count for\n-   the BLOCKNO'th basic block in this source file.  */\n-#define BLOCK_PROFILER(FILE, BLOCKNO)\t\\\n-  fprintf (FILE, \"; got into BLOCK_PROFILER with block # %d\\n\",BLOCKNO)\n-\n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n    the stack pointer does not matter.  The value is tested only in\n    functions that have frame pointers."}, {"sha": "4b4f89b41b7a714116e677151ca0ffb8aad73f84", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=fc8813382e632f2eb2a02cc8cbb4dce888f43f90", "patch": "@@ -1182,42 +1182,6 @@ extern struct alpha_compare alpha_compare;\n \n #define FUNCTION_PROFILER(FILE, LABELNO)\n \n-/* Output assembler code to FILE to initialize this source file's\n-   basic block profiling info, if that has not already been done.\n-   This assumes that __bb_init_func doesn't garble a1-a5.  */\n-\n-#define FUNCTION_BLOCK_PROFILER(FILE, LABELNO)\t\t\t\\\n-    do {\t\t\t\t\t\t\t\\\n-\tASM_OUTPUT_REG_PUSH (FILE, 16);\t\t\t\t\\\n-\tfputs (\"\\tlda $16,$PBX32\\n\", (FILE));\t\t\t\\\n-\tfputs (\"\\tldq $26,0($16)\\n\", (FILE));\t\t\t\\\n-\tfputs (\"\\tbne $26,1f\\n\", (FILE));\t\t\t\\\n-\tfputs (\"\\tlda $27,__bb_init_func\\n\", (FILE));\t\t\\\n-\tfputs (\"\\tjsr $26,($27),__bb_init_func\\n\", (FILE));\t\\\n-\tfputs (\"\\tldgp $29,0($26)\\n\", (FILE));\t\t\t\\\n-\tfputs (\"1:\\n\", (FILE));\t\t\t\t\t\\\n-\tASM_OUTPUT_REG_POP (FILE, 16);\t\t\t\t\\\n-    } while (0);\n-\n-/* Output assembler code to FILE to increment the entry-count for\n-   the BLOCKNO'th basic block in this source file.  */\n-\n-#define BLOCK_PROFILER(FILE, BLOCKNO)\t\t\t\t\\\n-    do {\t\t\t\t\t\t\t\\\n-\tint blockn = (BLOCKNO);\t\t\t\t\t\\\n-\tfputs (\"\\tsubq $30,16,$30\\n\", (FILE));\t\t\t\\\n-\tfputs (\"\\tstq $26,0($30)\\n\", (FILE));\t\t\t\\\n-\tfputs (\"\\tstq $27,8($30)\\n\", (FILE));\t\t\t\\\n-\tfputs (\"\\tlda $26,$PBX34\\n\", (FILE));\t\t\t\\\n-\tfprintf ((FILE), \"\\tldq $27,%d($26)\\n\", 8*blockn);\t\\\n-\tfputs (\"\\taddq $27,1,$27\\n\", (FILE));\t\t\t\\\n-\tfprintf ((FILE), \"\\tstq $27,%d($26)\\n\", 8*blockn);\t\\\n-\tfputs (\"\\tldq $26,0($30)\\n\", (FILE));\t\t\t\\\n-\tfputs (\"\\tldq $27,8($30)\\n\", (FILE));\t\t\t\\\n-\tfputs (\"\\taddq $30,16,$30\\n\", (FILE));\t\t\t\\\n-    } while (0)\n-\n-\n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n    the stack pointer does not matter.  The value is tested only in\n    functions that have frame pointers."}, {"sha": "90e8ae8749d2efc91af549f684310ff36667c4d3", "filename": "gcc/config/clipper/clipper.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Fclipper%2Fclipper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Fclipper%2Fclipper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.h?ref=fc8813382e632f2eb2a02cc8cbb4dce888f43f90", "patch": "@@ -538,16 +538,6 @@ do\t\t\t\t\t\t\t\t\t      \\\n \n #define FUNCTION_PROFILER(FILE, LABELNO)  /* FIXME */\n \n-/* Output assembler code to FILE to initialize this source file's\n-   basic block profiling info, if that has not already been done.  */\n-\n-#define FUNCTION_BLOCK_PROFILER(FILE, LABELNO)  /* FIXME */\n-\n-/* Output assembler code to FILE to increment the entry-count for\n-   the BLOCKNO'th basic block in this source file.  */\n-\n-#define BLOCK_PROFILER(FILE, BLOCKNO)\t/* FIXME */\n-\n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n    the stack pointer does not matter.  The value is tested only in\n    functions that have frame pointers."}, {"sha": "4bbe64183d691f4fa0788f99c2f5c985f1a77ca6", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=fc8813382e632f2eb2a02cc8cbb4dce888f43f90", "patch": "@@ -1202,17 +1202,6 @@ extern struct dsp16xx_frame_info current_frame_info;\n #define FUNCTION_PROFILER(FILE, LABELNO)        \\\n   internal_error (\"profiling not implemented yet\")\n \n-/* Output assembler code to FILE to initialize this source file's\n-   basic block profiling info, if that has not already been done.  */\n-#define FUNCTION_BLOCK_PROFILER(FILE, LABELNO)  \\\n-  internal_error (\"profiling not implemented yet\")\n-\n-/* Output assembler code to FILE to increment the entry-count for\n-   the BLOCKNO'th basic block in this source file.  */\n-#define BLOCK_PROFILER(FILE, BLOCKNO)\t        \\\n-  internal_error (\"profiling not implemented yet\")\n-\n-\n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n    the stack pointer does not matter.  The value is tested only in\n    functions that have frame pointers."}, {"sha": "7e78fc3f0bc6cf664673832f56b52a5d99a459f1", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=fc8813382e632f2eb2a02cc8cbb4dce888f43f90", "patch": "@@ -674,33 +674,6 @@ struct cum_arg\n   fprintf (FILE, \"\\t%s\\t#LP%d,%s\\n\\tjsr @mcount\\n\", \\\n \t   h8_mov_op, (LABELNO), h8_reg_names[0]);\n \n-/* Output assembler code to FILE to initialize this source file's\n-   basic block profiling info, if that has not already been done.  */\n-/* ??? @LPBX0 is moved into r0 twice.  */\n-\n-#define FUNCTION_BLOCK_PROFILER(FILE, LABELNO)  \\\n-  fprintf (FILE, \"\\t%s\\t%s\\n\\t%s\\t@LPBX0,%s\\n\\tbne LPI%d\\n\\t%s\\t@LPBX0,%s\\n\\t%s\\t%s\\n\\tjsr\\t@__bb_init_func\\nLPI%d:\\t%s\\t%s\\n\", \\\n-\t   h8_push_op, h8_reg_names[0],\t\t\\\n-\t   h8_mov_op, h8_reg_names[0],\t\t\\\n-\t   (LABELNO),\t\t\t\t\\\n-\t   h8_mov_op, h8_reg_names[0],\t\t\\\n-\t   h8_push_op, h8_reg_names[0],\t\t\\\n-\t   (LABELNO),\t\t\t\t\\\n-\t   h8_pop_op, h8_reg_names[0]);\n-\n-/* Output assembler code to FILE to increment the entry-count for\n-   the BLOCKNO'th basic block in this source file.  This is a real pain in the\n-   sphincter on a VAX, since we do not want to change any of the bits in the\n-   processor status word.  The way it is done here, it is pushed onto the stack\n-   before any flags have changed, and then the stack is fixed up to account for\n-   the fact that the instruction to restore the flags only reads a word.\n-   It may seem a bit clumsy, but at least it works.  */\n-/* ??? This one needs work.  */\n-\n-#define BLOCK_PROFILER(FILE, BLOCKNO)\t\\\n-  fprintf (FILE, \"\\tmovpsl -(sp)\\n\\tmovw (sp),2(sp)\\n\\taddl2 $2,sp\\n\\taddl2 $1,LPBX2+%d\\n\\tbicpsw $255\\n\\tbispsw (sp)+\\n\", \\\n-\t   4 * BLOCKNO)\n-\n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n    the stack pointer does not matter.  The value is tested only in\n    functions that have frame pointers."}, {"sha": "a33a81502227c352d3d7b96fa6575cf201ef48dd", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=fc8813382e632f2eb2a02cc8cbb4dce888f43f90", "patch": "@@ -33,9 +33,6 @@ extern HOST_WIDE_INT ix86_initial_elimination_offset PARAMS((int, int));\n extern void ix86_expand_prologue PARAMS ((void));\n extern void ix86_expand_epilogue PARAMS ((int));\n \n-extern void ix86_output_function_block_profiler PARAMS ((FILE *, int));\n-extern void ix86_output_block_profiler PARAMS ((FILE *, int));\n-\n extern void ix86_output_addr_vec_elt PARAMS ((FILE *, int));\n extern void ix86_output_addr_diff_elt PARAMS ((FILE *, int, int));\n "}, {"sha": "4209a68da5062129d68858f76ff594f569ba8c27", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=fc8813382e632f2eb2a02cc8cbb4dce888f43f90", "patch": "@@ -1440,25 +1440,6 @@ extern struct rtx_def *i960_compare_op0, *i960_compare_op1;\n \t( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 10),\t\\\n \t  sprintf ((OUTPUT), \"%s.%d\", (NAME), (LABELNO)))\n \f\n-/* Output assembler code to FILE to initialize this source file's\n-   basic block profiling info, if that has not already been done.  */\n-\n-#define FUNCTION_BLOCK_PROFILER(FILE, LABELNO) \\\n-{ fprintf (FILE, \"\\tld\tLPBX0,g12\\n\");\t\t\t\\\n-  fprintf (FILE, \"\\tcmpobne\t0,g12,LPY%d\\n\",LABELNO);\\\n-  fprintf (FILE, \"\\tlda\tLPBX0,g12\\n\");\t\t\t\\\n-  fprintf (FILE, \"\\tcall\t___bb_init_func\\n\");\t\\\n-  fprintf (FILE, \"LPY%d:\\n\",LABELNO); }\n-\n-/* Output assembler code to FILE to increment the entry-count for\n-   the BLOCKNO'th basic block in this source file.  */\n-\n-#define BLOCK_PROFILER(FILE, BLOCKNO) \\\n-{ int blockn = (BLOCKNO);\t\t\t\t\\\n-  fprintf (FILE, \"\\tld\tLPBX2+%d,g12\\n\", 4 * blockn);\t\\\n-  fprintf (FILE, \"\\taddo\tg12,1,g12\\n\");\t\t\\\n-  fprintf (FILE, \"\\tst\tg12,LPBX2+%d\\n\", 4 * blockn); }\n-\f\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n    For `%' followed by punctuation, CODE is the punctuation and X is null.  */"}, {"sha": "0b63a859ff4381b95f7eebb9e439f5ec943f47ba", "filename": "gcc/config/m68hc11/m68hc11-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h?ref=fc8813382e632f2eb2a02cc8cbb4dce888f43f90", "patch": "@@ -30,9 +30,6 @@ extern int m68hc11_initial_elimination_offset PARAMS((int, int));\n \n extern void expand_prologue PARAMS((void));\n extern void expand_epilogue PARAMS((void));\n-extern int m68hc11_function_block_profiler PARAMS((FILE*,int));\n-\n-extern int m68hc11_block_profiler PARAMS((FILE*,int));\n \n extern void m68hc11_asm_file_start PARAMS((FILE*, const char*));\n "}, {"sha": "a521bbd8df2e06d5a92413301410760f26b911a6", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=fc8813382e632f2eb2a02cc8cbb4dce888f43f90", "patch": "@@ -1131,25 +1131,6 @@ m68hc11_unary_operator (op, mode)\n     || GET_CODE (op) == SIGN_EXTEND || GET_CODE (op) == ZERO_EXTEND;\n }\n \f\n-\n-/* Profiling.  */\n-\n-int\n-m68hc11_block_profiler (out, blockno)\n-     FILE *out ATTRIBUTE_UNUSED;\n-     int blockno ATTRIBUTE_UNUSED;\n-{\n-  return 0;\n-}\n-\n-int\n-m68hc11_function_block_profiler (out, block_or_label)\n-     FILE *out ATTRIBUTE_UNUSED;\n-     int block_or_label ATTRIBUTE_UNUSED;\n-{\n-  return 0;\n-}\n-\n /* Emit the code to build the trampoline used to call a nested function.\n    \n    68HC11               68HC12"}, {"sha": "6f29be516f9150ff896e0e4bac5e0dc09a839388", "filename": "gcc/config/m68k/sun3.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Fm68k%2Fsun3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Fm68k%2Fsun3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fsun3.h?ref=fc8813382e632f2eb2a02cc8cbb4dce888f43f90", "patch": "@@ -232,21 +232,3 @@ Boston, MA 02111-1307, USA.  */\n           asm_fprintf (FILE, \"%I0r%s\", dstr);\t\t\t\t\\\n         }\t\t\t\t\t\t\t\t\\\n     } while (0)\n-\n-#if 0\n-/* This was turned off as it caused linking errors on sunos4.1.\n-   `gcc -a' links in /usr/lib/bb_link.o which does not provide __bb_link\n-   but its own version of __bb_init_func.  */\n-#undef BLOCK_PROFILER_CODE\n-#define BLOCK_PROFILER_CODE\t\t\t\t\t\t\\\n-extern int ___tcov_init;\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-__bb_init_func (blocks)\t\t\t\t\t\t\t\\\n-\tstruct bb *blocks;\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (! ___tcov_init)\t\t\t\t\t\t\t\\\n-    ___tcov_init_func ();\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  ___bb_link (blocks->filename, blocks->counts, blocks->ncounts);\t\\\n-}\n-#endif"}, {"sha": "6c74368eb769b5623e99315de51add1298ce6245", "filename": "gcc/config/m68k/tower-as.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Fm68k%2Ftower-as.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Fm68k%2Ftower-as.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ftower-as.h?ref=fc8813382e632f2eb2a02cc8cbb4dce888f43f90", "patch": "@@ -157,26 +157,6 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (68k, Motorola/SGS/Tower32 syntax)\");\n \n-#undef FUNCTION_BLOCK_PROFILER\n-#define FUNCTION_BLOCK_PROFILER(FILE, LABELNO)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    char label1[20], label2[20];\t\t\t\t\t\\\n-    ASM_GENERATE_INTERNAL_LABEL (label1, \"LPBX\", 0);\t\t\t\\\n-    ASM_GENERATE_INTERNAL_LABEL (label2, \"LPI\", LABELNO);\t\t\\\n-    fprintf (FILE, \"\\ttst.l %s\\n\\tbne %s\\n\\tpea %s\\n\\tjsr __bb_init_func\\n\\taddq.l &4,%%sp\\n\",\t\\\n-\t     label1, label2, label1);\t\t\t\t\t\\\n-    ASM_OUTPUT_INTERNAL_LABEL (FILE, \"LPI\", LABELNO);\t\t\t\\\n-    putc ('\\n', FILE);\t\t\t\t\t\t\\\n-    } while (0)\n-\n-#undef BLOCK_PROFILER\n-#define BLOCK_PROFILER(FILE, BLOCKNO)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\\\n-    char label[20];\t\t\t\t\t\t\\\n-    ASM_GENERATE_INTERNAL_LABEL (label, \"LPBX\", 2);\t\t\\\n-    fprintf (FILE, \"\\taddq.l &1,%s+%d\\n\", label, 4 * BLOCKNO);\t\\\n-    } while (0)\n-\n #undef FUNCTION_PROFILER\n #define FUNCTION_PROFILER(FILE, LABEL_NO)\t\\\n     fprintf (FILE, \"\\tmov.l &LP%%%d,%%a0\\n\\tjsr mcount%%\\n\", (LABEL_NO))"}, {"sha": "9d121dace2c445535d8adc584b338dd7bdfa64e2", "filename": "gcc/config/m88k/m88k-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Fm88k%2Fm88k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Fm88k%2Fm88k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k-protos.h?ref=fc8813382e632f2eb2a02cc8cbb4dce888f43f90", "patch": "@@ -86,8 +86,6 @@ extern void m88k_layout_frame PARAMS ((void));\n extern void m88k_expand_prologue PARAMS ((void));\n extern void m88k_expand_epilogue PARAMS ((void));\n extern void output_function_profiler PARAMS ((FILE *, int, const char *, int));\n-extern void output_function_block_profiler PARAMS ((FILE *, int));\n-extern void output_block_profiler PARAMS ((FILE *, int));\n extern void output_ascii PARAMS ((FILE *, const char *, int,\n \t\t\t\t  const char *, int));\n extern void output_label PARAMS ((int));"}, {"sha": "7e3c96f689cefd2c92b52c6b7cf26dfe835b8c6f", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=fc8813382e632f2eb2a02cc8cbb4dce888f43f90", "patch": "@@ -2471,73 +2471,6 @@ output_function_profiler (file, labelno, name, savep)\n       fprintf (file, \"\\taddu\\t %s,%s,64\\n\", reg_names[31], reg_names[31]);\n     }\n }\n-\n-/* Output assembler code to FILE to initialize basic-block profiling for\n-   the current module.  LABELNO is unique to each instance.  */\n-\n-void\n-output_function_block_profiler (file, labelno)\n-     FILE *file;\n-     int labelno;\n-{\n-  char block[256];\n-  char label[256];\n-\n-  /* Remember to update FUNCTION_BLOCK_PROFILER_LENGTH.  */\n-\n-  ASM_GENERATE_INTERNAL_LABEL (block, \"LPBX\", 0);\n-  ASM_GENERATE_INTERNAL_LABEL (label, \"LPY\", labelno);\n-\n-  /* @@ Need to deal with PIC.  I'm not sure what the requirements are on\n-     register usage, so I used r26/r27 to be safe.  */\n-  fprintf (file, \"\\tor.u\\t %s,%s,%shi16(%s)\\n\", reg_names[27], reg_names[0],\n-\t\t m88k_pound_sign, &block[1]);\n-  fprintf (file, \"\\tld\\t %s,%s,%slo16(%s)\\n\", reg_names[26], reg_names[27],\n-\t\t m88k_pound_sign, &block[1]);\n-  fprintf (file, \"\\tbcnd\\t %sne0,%s,%s\\n\",\n-\t\t m88k_pound_sign, reg_names[26], &label[1]);\n-  fprintf (file, \"\\tsubu\\t %s,%s,64\\n\", reg_names[31], reg_names[31]);\n-  fprintf (file, \"\\tst.d\\t %s,%s,32\\n\", reg_names[2], reg_names[31]);\n-  fprintf (file, \"\\tst.d\\t %s,%s,40\\n\", reg_names[4], reg_names[31]);\n-  fprintf (file, \"\\tst.d\\t %s,%s,48\\n\", reg_names[6], reg_names[31]);\n-  fprintf (file, \"\\tst.d\\t %s,%s,56\\n\", reg_names[8], reg_names[31]);\n-  fputs (\"\\tbsr.n\\t \", file);\n-  ASM_OUTPUT_LABELREF (file, \"__bb_init_func\");\n-  putc ('\\n', file);\n-  fprintf (file, \"\\tor\\t %s,%s,%slo16(%s)\\n\", reg_names[2], reg_names[27],\n-\t\t m88k_pound_sign, &block[1]);\n-  fprintf (file, \"\\tld.d\\t %s,%s,32\\n\", reg_names[2], reg_names[31]);\n-  fprintf (file, \"\\tld.d\\t %s,%s,40\\n\", reg_names[4], reg_names[31]);\n-  fprintf (file, \"\\tld.d\\t %s,%s,48\\n\", reg_names[6], reg_names[31]);\n-  fprintf (file, \"\\tld.d\\t %s,%s,56\\n\", reg_names[8], reg_names[31]);\n-  fprintf (file, \"\\taddu\\t %s,%s,64\\n\", reg_names[31], reg_names[31]);\n-  ASM_OUTPUT_INTERNAL_LABEL (file, \"LPY\", labelno);\n-}\n-\n-/* Output assembler code to FILE to increment the count associated with\n-   the basic block number BLOCKNO.  */\n-\n-void\n-output_block_profiler (file, blockno)\n-     FILE *file;\n-     int blockno;\n-{\n-  char block[256];\n-\n-  /* Remember to update BLOCK_PROFILER_LENGTH.  */\n-\n-  ASM_GENERATE_INTERNAL_LABEL (block, \"LPBX\", 2);\n-\n-  /* @@ Need to deal with PIC.  I'm not sure what the requirements are on\n-     register usage, so I used r26/r27 to be safe.  */\n-  fprintf (file, \"\\tor.u\\t %s,%s,%shi16(%s+%d)\\n\", reg_names[27], reg_names[0],\n-\t   m88k_pound_sign, &block[1], 4 * blockno);\n-  fprintf (file, \"\\tld\\t %s,%s,%slo16(%s+%d)\\n\", reg_names[26], reg_names[27],\n-\t   m88k_pound_sign, &block[1], 4 * blockno);\n-  fprintf (file, \"\\taddu\\t %s,%s,1\\n\", reg_names[26], reg_names[26]);\n-  fprintf (file, \"\\tst\\t %s,%s,%slo16(%s+%d)\\n\", reg_names[26], reg_names[27],\n-\t   m88k_pound_sign, &block[1], 4 * blockno);\n-}\n \f\n /* Determine whether a function argument is passed in a register, and\n    which register."}, {"sha": "172c2d661cfb5fa11ad1beefc2ce4471ee387b1e", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=fc8813382e632f2eb2a02cc8cbb4dce888f43f90", "patch": "@@ -1041,22 +1041,6 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n /* Maximum length in instructions of the code output by FUNCTION_PROFILER.  */\n #define FUNCTION_PROFILER_LENGTH (5+3+1+5)\n \n-/* Output assembler code to FILE to initialize basic-block profiling for\n-   the current module.  LABELNO is unique to each instance.  */\n-#define FUNCTION_BLOCK_PROFILER(FILE, LABELNO) \\\n-  output_function_block_profiler (FILE, LABELNO)\n-\n-/* Maximum length in instructions of the code output by\n-   FUNCTION_BLOCK_PROFILER.  */\n-#define FUNCTION_BLOCK_PROFILER_LENGTH (3+5+2+5)\n-\n-/* Output assembler code to FILE to increment the count associated with\n-   the basic block number BLOCKNO.  */\n-#define BLOCK_PROFILER(FILE, BLOCKNO) output_block_profiler (FILE, BLOCKNO)\n-\n-/* Maximum length in instructions of the code output by BLOCK_PROFILER.  */\n-#define BLOCK_PROFILER_LENGTH 4\n-\n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n    the stack pointer does not matter.  The value is tested only in\n    functions that have frame pointers."}, {"sha": "1194b8d42ec3263654b7f17f3e2d3c48776895b6", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=fc8813382e632f2eb2a02cc8cbb4dce888f43f90", "patch": "@@ -438,26 +438,6 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n #define FUNCTION_PROFILER(FILE, LABELNO)  \\\n    fprintf (FILE, \"\\tmovab LP%d,r0\\n\\tjsb mcount\\n\", (LABELNO));\n \n-/* Output assembler code to FILE to initialize this source file's\n-   basic block profiling info, if that has not already been done.  */\n-\n-#define FUNCTION_BLOCK_PROFILER(FILE, LABELNO)  \\\n-  fprintf (FILE, \"\\ttstl LPBX0\\n\\tjneq LPI%d\\n\\tpushal LPBX0\\n\\tcalls $1,__bb_init_func\\nLPI%d:\\n\",  \\\n-\t   LABELNO, LABELNO);\n-\n-/* Output assembler code to FILE to increment the entry-count for\n-   the BLOCKNO'th basic block in this source file.  This is a real pain in the\n-   sphincter on a VAX, since we do not want to change any of the bits in the\n-   processor status word.  The way it is done here, it is pushed onto the stack\n-   before any flags have changed, and then the stack is fixed up to account for\n-   the fact that the instruction to restore the flags only reads a word.\n-   It may seem a bit clumsy, but at least it works.\n-*/\n-\n-#define BLOCK_PROFILER(FILE, BLOCKNO)\t\\\n-  fprintf (FILE, \"\\tmovpsl -(sp)\\n\\tmovw (sp),2(sp)\\n\\taddl2 $2,sp\\n\\taddl2 $1,LPBX2+%d\\n\\tbicpsw $255\\n\\tbispsw (sp)+\\n\", \\\n-\t\t4 * BLOCKNO)\n-\n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n    the stack pointer does not matter.  The value is tested only in\n    functions that have frame pointers."}, {"sha": "982bdc07e83522db91e782c3a6806614ae7d1f33", "filename": "gcc/config/we32k/we32k.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.h?ref=fc8813382e632f2eb2a02cc8cbb4dce888f43f90", "patch": "@@ -389,19 +389,6 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n #define FUNCTION_PROFILER(FILE, LABELNO)  \\\n   fprintf (FILE, \"\\tmovw &.LP%d,%%r0\\n\\tjsb _mcount\\n\", (LABELNO))\n \n-/* Output assembler code to FILE to initialize this source file's\n-   basic block profiling info, if that has not already been done.  */\n-\n-#define FUNCTION_BLOCK_PROFILER(FILE, LABELNO)  \\\n-  fprintf (FILE, \"\\tcmpw .LPBX0,&0\\n\\tjne .LPI%d\\n\\tpushw &.LPBX0\\n\\tcall &1,__bb_init_func\\n.LPI%d:\\n\",  \\\n-\t   LABELNO, LABELNO);\n-\n-/* Output assembler code to FILE to increment the entry-count for\n-   the BLOCKNO'th basic block in this source file.  */\n-\n-#define BLOCK_PROFILER(FILE, BLOCKNO)\t\\\n-  fprintf (FILE, \"\\taddw2 &1,.LPBX2+%d\\n\", 4 * BLOCKNO)\n-\n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n    the stack pointer does not matter.  The value is tested only in\n    functions that have frame pointers."}, {"sha": "a88c08df366b099978b4e7ba63c94942d0a1669b", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=fc8813382e632f2eb2a02cc8cbb4dce888f43f90", "patch": "@@ -1258,9 +1258,6 @@ struct bb\n   struct bb_function_info *function_infos;\n };\n \n-#ifdef BLOCK_PROFILER_CODE\n-BLOCK_PROFILER_CODE\n-#else\n #ifndef inhibit_libc\n \n /* Simple minded basic block profiling output dumper for\n@@ -1492,7 +1489,6 @@ __bb_fork_func (void)\n }\n \n #endif /* not inhibit_libc */\n-#endif /* not BLOCK_PROFILER_CODE */\n #endif /* L_bb */\n \f\n #ifdef L_clear_cache"}, {"sha": "d7be2e806f06b136349d560b31f6d560c7247e22", "filename": "gcc/system.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=fc8813382e632f2eb2a02cc8cbb4dce888f43f90", "patch": "@@ -609,7 +609,10 @@ typedef char _Bool;\n \tSTDC_VALUE TRAMPOLINE_ALIGN ASM_IDENTIFY_GCC_AFTER_SOURCE\t   \\\n \tSLOW_ZERO_EXTEND SUBREG_REGNO_OFFSET DWARF_LINE_MIN_INSTR_LENGTH   \\\n \tTRADITIONAL_RETURN_FLOAT NO_BUILTIN_SIZE_TYPE\t\t\t   \\\n-\tNO_BUILTIN_PTRDIFF_TYPE NO_BUILTIN_WCHAR_TYPE NO_BUILTIN_WINT_TYPE\n+\tNO_BUILTIN_PTRDIFF_TYPE NO_BUILTIN_WCHAR_TYPE NO_BUILTIN_WINT_TYPE \\\n+\tBLOCK_PROFILER BLOCK_PROFILER_CODE FUNCTION_BLOCK_PROFILER\t   \\\n+\tFUNCTION_BLOCK_PROFILER_EXIT MACHINE_STATE_SAVE\t\t\t   \\\n+\tMACHINE_STATE_RESTORE\n \n #endif /* IN_GCC */\n "}, {"sha": "878cdca84c3da21343802a936e750a4a11df0764", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8813382e632f2eb2a02cc8cbb4dce888f43f90/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=fc8813382e632f2eb2a02cc8cbb4dce888f43f90", "patch": "@@ -3587,12 +3587,6 @@ display_help ()\n   printf (_(\"  -Wunused                Enable unused warnings\\n\"));\n   printf (_(\"  -Wlarger-than-<number>  Warn if an object is larger than <number> bytes\\n\"));\n   printf (_(\"  -p                      Enable function profiling\\n\"));\n-#if defined (BLOCK_PROFILER) || defined (FUNCTION_BLOCK_PROFILER)\n-  printf (_(\"  -a                      Enable block profiling \\n\"));\n-#endif\n-#if defined (BLOCK_PROFILER) || defined (FUNCTION_BLOCK_PROFILER) || defined FUNCTION_BLOCK_PROFILER_EXIT\n-  printf (_(\"  -ax                     Enable jump profiling \\n\"));\n-#endif\n   printf (_(\"  -o <file>               Place output into <file> \\n\"));\n   printf (_(\"\\\n   -G <number>             Put global and static data smaller than <number>\\n\\"}]}