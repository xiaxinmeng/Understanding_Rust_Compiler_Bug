{"sha": "f8d9957ef899acf54c01f0289b586871c846402a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhkOTk1N2VmODk5YWNmNTRjMDFmMDI4OWI1ODY4NzFjODQ2NDAyYQ==", "commit": {"author": {"name": "Sebastian Peryt", "email": "sebastian.peryt@intel.com", "date": "2018-05-14T11:22:53Z"}, "committer": {"name": "Sebastian Peryt", "email": "speryt@gcc.gnu.org", "date": "2018-05-14T11:22:53Z"}, "message": "i386-common.c (OPTION_MASK_ISA_CLDEMOTE_SET, [...]): New defines.\n\n2018-05-14  Sebastian Peryt  <sebastian.peryt@intel.com>\n\ngcc/\n\n        * common/config/i386/i386-common.c (OPTION_MASK_ISA_CLDEMOTE_SET,\n        OPTION_MASK_ISA_CLDEMOTE_UNSET): New defines.\n        (ix86_handle_option): Handle -mcldemote.\n        * config.gcc: New header.\n        * config/i386/cldemoteintrin.h: New file.\n        * config/i386/cpuid.h (bit_CLDEMOTE): New bit.\n        * config/i386/driver-i386.c (host_detect_local_cpu): Detect\n        -mcldemote.\n        * config/i386/i386-c.c (ix86_target_macros_internal): Handle\n        OPTION_MASK_ISA_CLDEMOTE.\n        * config/i386/i386.c (ix86_target_string): Add -mcldemote.\n        (ix86_valid_target_attribute_inner_p): Ditto.\n        (enum ix86_builtins): Add IX86_BUILTIN_CLDEMOTE.\n        (ix86_init_mmx_sse_builtins): Define __builtin_ia32_cldemote.\n        (ix86_expand_builtin): Expand IX86_BUILTIN_CLDEMOTE.\n        * config/i386/i386.h (TARGET_CLDEMOTE, TARGET_CLDEMOTE_P): New.\n        * config/i386/i386.md (UNSPECV_CLDEMOTE): New.\n        (cldemote): New.\n        * config/i386/i386.opt: Add -mcldemote.\n        * config/i386/x86intrin.h: New header.\n        * doc/invoke.texi: Add -mcldemote.\n\ngcc/testsuite/\n\n        * gcc.target/i386/cldemote-1.c: New test.\n\nFrom-SVN: r260224", "tree": {"sha": "a510214cf8c481a6ccea2d7d3b1c9c54bcfd9d4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a510214cf8c481a6ccea2d7d3b1c9c54bcfd9d4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8d9957ef899acf54c01f0289b586871c846402a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8d9957ef899acf54c01f0289b586871c846402a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8d9957ef899acf54c01f0289b586871c846402a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8d9957ef899acf54c01f0289b586871c846402a/comments", "author": {"login": "speryt", "id": 44768132, "node_id": "MDQ6VXNlcjQ0NzY4MTMy", "avatar_url": "https://avatars.githubusercontent.com/u/44768132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/speryt", "html_url": "https://github.com/speryt", "followers_url": "https://api.github.com/users/speryt/followers", "following_url": "https://api.github.com/users/speryt/following{/other_user}", "gists_url": "https://api.github.com/users/speryt/gists{/gist_id}", "starred_url": "https://api.github.com/users/speryt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/speryt/subscriptions", "organizations_url": "https://api.github.com/users/speryt/orgs", "repos_url": "https://api.github.com/users/speryt/repos", "events_url": "https://api.github.com/users/speryt/events{/privacy}", "received_events_url": "https://api.github.com/users/speryt/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "485fa7041bee21893c7db73884e9a87ac8eb286a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/485fa7041bee21893c7db73884e9a87ac8eb286a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/485fa7041bee21893c7db73884e9a87ac8eb286a"}], "stats": {"total": 162, "additions": 155, "deletions": 7}, "files": [{"sha": "a2121a995583720ad78410fc3161a9f1cea51dbd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8d9957ef899acf54c01f0289b586871c846402a", "patch": "@@ -1,3 +1,27 @@\n+2018-05-14  Sebastian Peryt  <sebastian.peryt@intel.com>\n+\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_CLDEMOTE_SET,\n+\tOPTION_MASK_ISA_CLDEMOTE_UNSET): New defines.\n+\t(ix86_handle_option): Handle -mcldemote.\n+\t* config.gcc: New header.\n+\t* config/i386/cldemoteintrin.h: New file.\n+\t* config/i386/cpuid.h (bit_CLDEMOTE): New bit.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect\n+\t-mcldemote.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Handle\n+\tOPTION_MASK_ISA_CLDEMOTE.\n+\t* config/i386/i386.c (ix86_target_string): Add -mcldemote.\n+\t(ix86_valid_target_attribute_inner_p): Ditto.\n+\t(enum ix86_builtins): Add IX86_BUILTIN_CLDEMOTE.\n+\t(ix86_init_mmx_sse_builtins): Define __builtin_ia32_cldemote.\n+\t(ix86_expand_builtin): Expand IX86_BUILTIN_CLDEMOTE.\n+\t* config/i386/i386.h (TARGET_CLDEMOTE, TARGET_CLDEMOTE_P): New.\n+\t* config/i386/i386.md (UNSPECV_CLDEMOTE): New.\n+\t(cldemote): New.\n+\t* config/i386/i386.opt: Add -mcldemote.\n+\t* config/i386/x86intrin.h: New header.\n+\t* doc/invoke.texi: Add -mcldemote.\n+\n 2018-05-14  Richard Biener  <rguenther@suse.de>\n \n \t* doc/match-and-simplify.texi: Adjust :s documentation."}, {"sha": "3aa32f5934b170cd506795e756a69964171b4858", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=f8d9957ef899acf54c01f0289b586871c846402a", "patch": "@@ -153,6 +153,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_MOVDIRI_SET OPTION_MASK_ISA_MOVDIRI\n #define OPTION_MASK_ISA_MOVDIR64B_SET OPTION_MASK_ISA_MOVDIR64B\n #define OPTION_MASK_ISA_WAITPKG_SET OPTION_MASK_ISA_WAITPKG\n+#define OPTION_MASK_ISA_CLDEMOTE_SET OPTION_MASK_ISA_CLDEMOTE\n \n /* Define a set of ISAs which aren't available when a given ISA is\n    disabled.  MMX and SSE ISAs are handled separately.  */\n@@ -230,6 +231,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_MOVDIRI_UNSET OPTION_MASK_ISA_MOVDIRI\n #define OPTION_MASK_ISA_MOVDIR64B_UNSET OPTION_MASK_ISA_MOVDIR64B\n #define OPTION_MASK_ISA_WAITPKG_UNSET OPTION_MASK_ISA_WAITPKG\n+#define OPTION_MASK_ISA_CLDEMOTE_UNSET OPTION_MASK_ISA_CLDEMOTE\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -608,6 +610,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_MOVDIR64B_UNSET;\n \t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_MOVDIR64B_UNSET;\n \t}\n+\treturn true;\n+\n+    case OPT_mcldemote:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_CLDEMOTE_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_CLDEMOTE_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_CLDEMOTE_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_CLDEMOTE_UNSET;\n+\t}\n       return true;\n \n     case OPT_mwaitpkg:"}, {"sha": "d509800071bab3c680c3ea6f7d2a651a6ffbbf7b", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=f8d9957ef899acf54c01f0289b586871c846402a", "patch": "@@ -385,7 +385,7 @@ i[34567]86-*-*)\n \t\t       avx512vnnivlintrin.h vaesintrin.h vpclmulqdqintrin.h\n \t\t       avx512vpopcntdqvlintrin.h avx512bitalgintrin.h\n \t\t       pconfigintrin.h wbnoinvdintrin.h movdirintrin.h\n-\t\t       waitpkgintrin.h\"\n+\t\t       waitpkgintrin.h cldemoteintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -415,7 +415,7 @@ x86_64-*-*)\n \t\t       avx512vnnivlintrin.h vaesintrin.h vpclmulqdqintrin.h\n \t\t       avx512vpopcntdqvlintrin.h avx512bitalgintrin.h\n \t\t       pconfigintrin.h wbnoinvdintrin.h movdirintrin.h\n-\t\t       waitpkgintrin.h\"\n+\t\t       waitpkgintrin.h cldemoteintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "1fa4c2d34d0bddff7fc3fd60b8b7c351229b41d9", "filename": "gcc/config/i386/cldemoteintrin.h", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2Fconfig%2Fi386%2Fcldemoteintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2Fconfig%2Fi386%2Fcldemoteintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcldemoteintrin.h?ref=f8d9957ef899acf54c01f0289b586871c846402a", "patch": "@@ -0,0 +1,47 @@\n+/* Copyright (C) 2018 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#if !defined _X86INTRIN_H_INCLUDED\n+# error \"Never use <cldemoteintrin.h> directly; include <x86intrin.h> instead.\"\n+#endif\n+\n+#ifndef _CLDEMOTE_H_INCLUDED\n+#define _CLDEMOTE_H_INCLUDED\n+\n+#ifndef __CLDEMOTE__\n+#pragma GCC push_options\n+#pragma GCC target(\"cldemote\")\n+#define __DISABLE_CLDEMOTE__\n+#endif /* __CLDEMOTE__ */\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_cldemote (void *__A)\n+{\n+  __builtin_ia32_cldemote (__A);\n+}\n+#ifdef __DISABLE_CLDEMOTE__\n+#undef __DISABLE_CLDEMOTE__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_CLDEMOTE__ */\n+\n+#endif /* _CLDEMOTE_H_INCLUDED */"}, {"sha": "7e9e2d153dca7ccec2085845e975654d371f1a7e", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=f8d9957ef899acf54c01f0289b586871c846402a", "patch": "@@ -110,6 +110,7 @@\n #define bit_RDPID\t(1 << 22)\n #define bit_MOVDIRI\t(1 << 27)\n #define bit_MOVDIR64B\t(1 << 28)\n+#define bit_CLDEMOTE\t(1 << 25)\n \n /* %edx */\n #define bit_AVX5124VNNIW (1 << 2)"}, {"sha": "57e01a06dff640b67d376a20d083ae7f9e516981", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=f8d9957ef899acf54c01f0289b586871c846402a", "patch": "@@ -425,6 +425,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_vpclmulqdq = 0;\n   unsigned int has_movdiri = 0, has_movdir64b = 0;\n   unsigned int has_waitpkg = 0;\n+  unsigned int has_cldemote = 0;\n \n   bool arch;\n \n@@ -522,6 +523,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_avx512bitalg = ecx & bit_AVX512BITALG;\n       has_movdiri = ecx & bit_MOVDIRI;\n       has_movdir64b = ecx & bit_MOVDIR64B;\n+      has_cldemote = ecx & bit_CLDEMOTE;\n \n       has_avx5124vnniw = edx & bit_AVX5124VNNIW;\n       has_avx5124fmaps = edx & bit_AVX5124FMAPS;\n@@ -1111,6 +1113,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *movdiri = has_movdiri ? \" -mmovdiri\" : \" -mno-movdiri\";\n       const char *movdir64b = has_movdir64b ? \" -mmovdir64b\" : \" -mno-movdir64b\";\n       const char *waitpkg = has_waitpkg ? \" -mwaitpkg\" : \" -mno-waitpkg\";\n+      const char *cldemote = has_cldemote ? \" -mcldemote\" : \" -mno-cldemote\";\n       options = concat (options, mmx, mmx3dnow, sse, sse2, sse3, ssse3,\n \t\t\tsse4a, cx16, sahf, movbe, aes, sha, pclmul,\n \t\t\tpopcnt, abm, lwp, fma, fma4, xop, bmi, sgx, bmi2,\n@@ -1123,7 +1126,8 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t\t\tavx512ifma, avx512vbmi, avx5124fmaps, avx5124vnniw,\n \t\t\tclwb, mwaitx, clzero, pku, rdpid, gfni, shstk,\n \t\t\tavx512vbmi2, avx512vnni, vaes, vpclmulqdq,\n-\t\t\tavx512bitalg, movdiri, movdir64b, waitpkg, NULL);\n+\t\t\tavx512bitalg, movdiri, movdir64b, waitpkg, cldemote,\n+\t\t\tNULL);\n     }\n \n done:"}, {"sha": "28ea046fe3549194b089ca6c103ea153029d4c9f", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=f8d9957ef899acf54c01f0289b586871c846402a", "patch": "@@ -518,6 +518,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__MOVDIR64B__\");\n   if (isa_flag2 & OPTION_MASK_ISA_WAITPKG)\n     def_or_undef (parse_in, \"__WAITPKG__\");\n+  if (isa_flag2 & OPTION_MASK_ISA_CLDEMOTE)\n+    def_or_undef (parse_in, \"__CLDEMOTE__\");\n   if (TARGET_IAMCU)\n     {\n       def_or_undef (parse_in, \"__iamcu\");"}, {"sha": "91e7e00279026a685ab024b9260a140eeec21c25", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f8d9957ef899acf54c01f0289b586871c846402a", "patch": "@@ -2773,7 +2773,8 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n     { \"-mclzero\",\tOPTION_MASK_ISA_CLZERO },\n     { \"-mmwaitx\",\tOPTION_MASK_ISA_MWAITX },\n     { \"-mmovdir64b\",\tOPTION_MASK_ISA_MOVDIR64B },\n-    { \"-mwaitpkg\",\tOPTION_MASK_ISA_WAITPKG }\n+    { \"-mwaitpkg\",\tOPTION_MASK_ISA_WAITPKG },\n+    { \"-mcldemote\",\tOPTION_MASK_ISA_CLDEMOTE }\n   };\n   static struct ix86_target_opts isa_opts[] =\n   {\n@@ -5390,6 +5391,7 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"movdiri\", OPT_mmovdiri),\n     IX86_ATTR_ISA (\"movdir64b\", OPT_mmovdir64b),\n     IX86_ATTR_ISA (\"waitpkg\", OPT_mwaitpkg),\n+    IX86_ATTR_ISA (\"cldemote\", OPT_mcldemote),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),\n@@ -30649,6 +30651,7 @@ enum ix86_builtins\n   IX86_BUILTIN_UMWAIT,\n   IX86_BUILTIN_TPAUSE,\n   IX86_BUILTIN_CLZERO,\n+  IX86_BUILTIN_CLDEMOTE,\n   IX86_BUILTIN_VEC_INIT_V2SI,\n   IX86_BUILTIN_VEC_INIT_V4HI,\n   IX86_BUILTIN_VEC_INIT_V8QI,\n@@ -31987,6 +31990,10 @@ ix86_init_mmx_sse_builtins (void)\n   def_builtin2 (OPTION_MASK_ISA_WAITPKG, \"__builtin_ia32_tpause\",\n \t       UINT8_FTYPE_UNSIGNED_UINT64, IX86_BUILTIN_TPAUSE);\n \n+  /* CLDEMOTE.  */\n+  def_builtin2 (OPTION_MASK_ISA_CLDEMOTE, \"__builtin_ia32_cldemote\",\n+\t       VOID_FTYPE_PCVOID, IX86_BUILTIN_CLDEMOTE);\n+\n   /* Add FMA4 multi-arg argument instructions */\n   for (i = 0, d = bdesc_multi_arg; i < ARRAY_SIZE (bdesc_multi_arg); i++, d++)\n     {\n@@ -37146,6 +37153,16 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       emit_insn (ix86_gen_clzero (op0));\n       return 0;\n \n+    case IX86_BUILTIN_CLDEMOTE:\n+      arg0 = CALL_EXPR_ARG (exp, 0);\n+      op0 = expand_normal (arg0);\n+      icode = CODE_FOR_cldemote;\n+      if (!insn_data[icode].operand[0].predicate (op0, Pmode))\n+\top0 = ix86_zero_extend_to_Pmode (op0);\n+\n+      emit_insn (gen_cldemote (op0));\n+      return 0;\n+\n     case IX86_BUILTIN_VEC_INIT_V2SI:\n     case IX86_BUILTIN_VEC_INIT_V4HI:\n     case IX86_BUILTIN_VEC_INIT_V8QI:"}, {"sha": "80745bc25a73845d47de5785921768f03a13f589", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=f8d9957ef899acf54c01f0289b586871c846402a", "patch": "@@ -191,6 +191,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_MOVDIR64B_P(x) TARGET_ISA_MOVDIR64B_P(x)\n #define TARGET_WAITPKG\tTARGET_ISA_WAITPKG\n #define TARGET_WAITPKG_P(x)\tTARGET_ISA_WAITPKG_P(x)\n+#define TARGET_CLDEMOTE\tTARGET_ISA_CLDEMOTE\n+#define TARGET_CLDEMOTE_P(x) TARGET_ISA_CLDEMOTE_P(x)\n \n #define TARGET_LP64\tTARGET_ABI_64\n #define TARGET_LP64_P(x)\tTARGET_ABI_64_P(x)"}, {"sha": "302ccc524bb3d109f151cb2ef1c52d9ad41c9c0f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f8d9957ef899acf54c01f0289b586871c846402a", "patch": "@@ -298,6 +298,9 @@\n   UNSPECV_UMWAIT\n   UNSPECV_UMONITOR\n   UNSPECV_TPAUSE\n+\n+  ;; For CLDEMOTE support\n+  UNSPECV_CLDEMOTE\n ])\n \n ;; Constants to represent rounding modes in the ROUND instruction\n@@ -21033,6 +21036,14 @@\n   \"tpause\\t%0\"\n   [(set_attr \"length\" \"3\")])\n \n+(define_insn \"cldemote\"\n+  [(unspec_volatile[(match_operand 0 \"address_operand\" \"p\")]\n+\t\t UNSPECV_CLDEMOTE)]\n+  \"TARGET_CLDEMOTE\"\n+  \"cldemote\\t%a0\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"memory\" \"unknown\")])\n+\n (include \"mmx.md\")\n (include \"sse.md\")\n (include \"sync.md\")"}, {"sha": "58d097371d830d723ba48e375fd2a2999302d553", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=f8d9957ef899acf54c01f0289b586871c846402a", "patch": "@@ -1059,3 +1059,7 @@ Support MOVDIR64B built-in functions and code generation.\n mwaitpkg\n Target Report Mask(ISA_WAITPKG) Var(ix86_isa_flags2) Save\n Support WAITPKG built-in functions and code generation.\n+\n+mcldemote\n+Target Report Mask(ISA_CLDEMOTE) Var(ix86_isa_flags2) Save\n+Support CLDEMOTE built-in functions and code generation."}, {"sha": "6d67e9cebf436428f4491f90e839a5f3a87a73d8", "filename": "gcc/config/i386/x86intrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86intrin.h?ref=f8d9957ef899acf54c01f0289b586871c846402a", "patch": "@@ -103,6 +103,8 @@\n \n #include <waitpkgintrin.h>\n \n+#include <cldemoteintrin.h>\n+\n #endif /* __iamcu__ */\n \n #endif /* _X86INTRIN_H_INCLUDED */"}, {"sha": "462aedc255baf4fb1cfd9ecf1764454a5d2f9f19", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f8d9957ef899acf54c01f0289b586871c846402a", "patch": "@@ -1260,7 +1260,8 @@ See RS/6000 and PowerPC Options.\n -mlzcnt  -mbmi2  -mfxsr  -mxsave  -mxsaveopt  -mrtm  -mlwp  -mmpx  @gol\n -mmwaitx  -mclzero  -mpku  -mthreads -mgfni  -mvaes  -mwaitpkg @gol\n -mshstk -mforce-indirect-call -mavx512vbmi2 @gol\n--mvpclmulqdq -mavx512bitalg -mmovdiri -mmovdir64b -mavx512vpopcntdq @gol\n+-mvpclmulqdq -mavx512bitalg -mmovdiri -mmovdir64b -mavx512vpopcntdq\n+-mcldemote @gol\n -mms-bitfields  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically  -mstringop-strategy=@var{alg} @gol\n -mmemcpy-strategy=@var{strategy}  -mmemset-strategy=@var{strategy} @gol\n@@ -27263,14 +27264,17 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @need 200\n @itemx -mavx512vpopcntdq\n @opindex mavx512vpopcntdq\n+@need 200\n+@itemx -mcldemote\n+@opindex mcldemote\n These switches enable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4.1, AVX, AVX2, AVX512F, AVX512PF, AVX512ER, AVX512CD,\n SHA, AES, PCLMUL, FSGSBASE, RDRND, F16C, FMA, SSE4A, FMA4, XOP, LWP, ABM,\n AVX512VL, AVX512BW, AVX512DQ, AVX512IFMA, AVX512VBMI, BMI, BMI2, VAES, WAITPKG,\n FXSR, XSAVE, XSAVEOPT, LZCNT, RTM, MPX, MWAITX, PKU, IBT, SHSTK, AVX512VBMI2,\n GFNI, VPCLMULQDQ, AVX512BITALG, MOVDIRI, MOVDIR64B,\n-AVX512VPOPCNTDQ3DNow!@: or enhanced 3DNow!@: extended instruction sets.\n-Each has a corresponding @option{-mno-} option to disable use of these\n+AVX512VPOPCNTDQ, CLDEMOTE, 3DNow!@: or enhanced 3DNow!@: extended instruction\n+sets. Each has a corresponding @option{-mno-} option to disable use of these\n instructions.\n \n These extensions are also available as built-in functions: see"}, {"sha": "a256329e8657eb9a329c373aa968afa219605d53", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f8d9957ef899acf54c01f0289b586871c846402a", "patch": "@@ -1,3 +1,7 @@\n+2018-05-14  Sebastian Peryt  <sebastian.peryt@intel.com>\n+\n+\t* gcc.target/i386/cldemote-1.c: New test.\n+\n 2018-05-13  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/85742"}, {"sha": "47482612d2cb84034cdf52e4eee90cf4afa93ec1", "filename": "gcc/testsuite/gcc.target/i386/cldemote-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcldemote-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d9957ef899acf54c01f0289b586871c846402a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcldemote-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcldemote-1.c?ref=f8d9957ef899acf54c01f0289b586871c846402a", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcldemote\" } */\n+/* { dg-final { scan-assembler \"cldemote\\[ \\\\t\\]\" } } */\n+\n+#include \"x86intrin.h\"\n+\n+void\n+test_cldemote (void *__A)\n+{\n+  _cldemote (__A);\n+}"}]}