{"sha": "3bedcc89670bc73c0fb92eeaab266173b8babb73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JlZGNjODk2NzBiYzczYzBmYjkyZWVhYWIyNjYxNzNiOGJhYmI3Mw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenth@gcc.gnu.org", "date": "2005-06-01T18:51:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2005-06-01T18:51:12Z"}, "message": "stmt.c (expand_case): Use build_int_cst.\n\n2005-06-01  Richard Guenther  <rguenth@gcc.gnu.org>\n\n\t* stmt.c (expand_case): Use build_int_cst.\n\t(node_has_low_bound): Likewise, and correct type mismatch.\n\t(node_has_high_bound): Likewise.\n\t* fold-const.c (fold_binary): Ensure we build trees\n\twith the correct types - undo what STRIP_NOPS possibly did.\n\nFrom-SVN: r100459", "tree": {"sha": "24f4bde2341e587a951bda16272b126c8743ed39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24f4bde2341e587a951bda16272b126c8743ed39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bedcc89670bc73c0fb92eeaab266173b8babb73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bedcc89670bc73c0fb92eeaab266173b8babb73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bedcc89670bc73c0fb92eeaab266173b8babb73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bedcc89670bc73c0fb92eeaab266173b8babb73/comments", "author": null, "committer": null, "parents": [{"sha": "095ecc24ec1340eb0f3d1f06f5bf627001b51d32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/095ecc24ec1340eb0f3d1f06f5bf627001b51d32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/095ecc24ec1340eb0f3d1f06f5bf627001b51d32"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "28e537e2823ac70d88c6a1088beb32cc5c1414ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bedcc89670bc73c0fb92eeaab266173b8babb73/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bedcc89670bc73c0fb92eeaab266173b8babb73/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3bedcc89670bc73c0fb92eeaab266173b8babb73", "patch": "@@ -1,3 +1,11 @@\n+2005-06-01  Richard Guenther  <rguenth@gcc.gnu.org>\n+\n+\t* stmt.c (expand_case): Use build_int_cst.\n+\t(node_has_low_bound): Likewise, and correct type mismatch.\n+\t(node_has_high_bound): Likewise.\n+\t* fold-const.c (fold_binary): Ensure we build trees\n+\twith the correct types - undo what STRIP_NOPS possibly did.\n+\n 2005-06-01  Richard Guenther  <rguenth@gcc.gnu.org>\n \n \t* tree.h (fold_indirect_ref_1): Export from fold-const.c."}, {"sha": "05e016add7365bced7de6c24baaae7c0dffd1dd8", "filename": "gcc/fold-const.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bedcc89670bc73c0fb92eeaab266173b8babb73/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bedcc89670bc73c0fb92eeaab266173b8babb73/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=3bedcc89670bc73c0fb92eeaab266173b8babb73", "patch": "@@ -7948,7 +7948,9 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t       && (TREE_CODE (arg1) != REAL_CST\n \t\t   ||  REAL_VALUE_NEGATIVE (TREE_REAL_CST (arg1))))\n \t      || (INTEGRAL_TYPE_P (type) && flag_wrapv && !flag_trapv)))\n-\treturn fold_build2 (PLUS_EXPR, type, arg0, negate_expr (arg1));\n+\treturn fold_build2 (PLUS_EXPR, type,\n+\t\t\t    fold_convert (type, arg0),\n+\t\t\t    fold_convert (type, negate_expr (arg1)));\n \n       /* Try folding difference of addresses.  */\n       {\n@@ -8467,7 +8469,8 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t      if (exact_real_inverse (TYPE_MODE(TREE_TYPE(arg0)), &r))\n \t\t{\n \t\t  tem = build_real (type, r);\n-\t\t  return fold_build2 (MULT_EXPR, type, arg0, tem);\n+\t\t  return fold_build2 (MULT_EXPR, type,\n+\t\t\t\t      fold_convert (type, arg0), tem);\n \t\t}\n \t    }\n \t}"}, {"sha": "6df6eaa3e2e233c31d0fb3c0e38566e592ce1fb0", "filename": "gcc/stmt.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bedcc89670bc73c0fb92eeaab266173b8babb73/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bedcc89670bc73c0fb92eeaab266173b8babb73/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=3bedcc89670bc73c0fb92eeaab266173b8babb73", "patch": "@@ -2437,7 +2437,7 @@ expand_case (tree exp)\n \t  if (compare_tree_int (minval, 0) > 0\n \t      && compare_tree_int (maxval, GET_MODE_BITSIZE (word_mode)) < 0)\n \t    {\n-\t      minval = fold_convert (index_type, integer_zero_node);\n+\t      minval = build_int_cst (index_type, 0);\n \t      range = maxval;\n \t    }\n \t  emit_case_bit_tests (index_type, index_expr, minval, range,\n@@ -2523,7 +2523,7 @@ expand_case (tree exp)\n \t\t  && compare_tree_int (minval, 0) > 0\n \t\t  && compare_tree_int (minval, 3) < 0)\n \t\t{\n-\t\t  minval = fold_convert (index_type, integer_zero_node);\n+\t\t  minval = build_int_cst (index_type, 0);\n \t\t  range = maxval;\n \t\t}\n \n@@ -2830,7 +2830,8 @@ node_has_low_bound (case_node_ptr node, tree index_type)\n     return 0;\n \n   low_minus_one = fold_build2 (MINUS_EXPR, TREE_TYPE (node->low),\n-\t\t\t       node->low, integer_one_node);\n+\t\t\t       node->low,\n+\t\t\t       build_int_cst (TREE_TYPE (node->low), 1));\n \n   /* If the subtraction above overflowed, we can't verify anything.\n      Otherwise, look for a parent that tests our value - 1.  */\n@@ -2880,7 +2881,8 @@ node_has_high_bound (case_node_ptr node, tree index_type)\n     return 0;\n \n   high_plus_one = fold_build2 (PLUS_EXPR, TREE_TYPE (node->high),\n-\t\t\t       node->high, integer_one_node);\n+\t\t\t       node->high,\n+\t\t\t       build_int_cst (TREE_TYPE (node->high), 1));\n \n   /* If the addition above overflowed, we can't verify anything.\n      Otherwise, look for a parent that tests our value + 1.  */"}]}