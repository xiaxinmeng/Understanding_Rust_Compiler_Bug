{"sha": "5db78cac104c0427b023b3a21f98bf302aa736e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRiNzhjYWMxMDRjMDQyN2IwMjNiM2EyMWY5OGJmMzAyYWE3MzZlMw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-01-04T11:06:49Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-01-04T11:06:49Z"}, "message": "Avoid spurious test failures when -fno-inline in test flags\n\nThese tests rely on inlining, so if -fno-inline is added to the compiler\nflags the tests fail. Use the predefined __NO_INLINE__ macro to detect\nthat situation, and don't bother testing the move assignment.\n\n\t* testsuite/21_strings/basic_string/modifiers/assign/char/\n\tmove_assign_optim.cc: Avoid spurious failure when -fno-inline added\n\tto test flags.\n\t* testsuite/21_strings/basic_string/modifiers/assign/wchar_t/\n\tmove_assign_optim.cc: Likewise.\n\nFrom-SVN: r267573", "tree": {"sha": "1aa8cf0cfa86b0e9b326bd8b1ac68a8d3be4f54e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1aa8cf0cfa86b0e9b326bd8b1ac68a8d3be4f54e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5db78cac104c0427b023b3a21f98bf302aa736e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5db78cac104c0427b023b3a21f98bf302aa736e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5db78cac104c0427b023b3a21f98bf302aa736e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5db78cac104c0427b023b3a21f98bf302aa736e3/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a52fcfac0a9621e4ee5345272873d96f55ad3d18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a52fcfac0a9621e4ee5345272873d96f55ad3d18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a52fcfac0a9621e4ee5345272873d96f55ad3d18"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "e6a2dc2ba700c71368bde213a5edd390e53211b9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db78cac104c0427b023b3a21f98bf302aa736e3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db78cac104c0427b023b3a21f98bf302aa736e3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5db78cac104c0427b023b3a21f98bf302aa736e3", "patch": "@@ -1,3 +1,11 @@\n+2019-01-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/21_strings/basic_string/modifiers/assign/char/\n+\tmove_assign_optim.cc: Avoid spurious failure when -fno-inline added\n+\tto test flags.\n+\t* testsuite/21_strings/basic_string/modifiers/assign/wchar_t/\n+\tmove_assign_optim.cc: Likewise.\n+\n 2019-01-03  Jonathan Wakely  <jwakely@redhat.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "bbe60e578caeffad731592c3a279219ff2957c19", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/assign/char/move_assign_optim.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db78cac104c0427b023b3a21f98bf302aa736e3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fassign%2Fchar%2Fmove_assign_optim.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db78cac104c0427b023b3a21f98bf302aa736e3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fassign%2Fchar%2Fmove_assign_optim.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fassign%2Fchar%2Fmove_assign_optim.cc?ref=5db78cac104c0427b023b3a21f98bf302aa736e3", "patch": "@@ -30,6 +30,8 @@ test01(std::string& target, std::string&& source)\n   // The move assignment operator should be simple enough that the compiler\n   // can see that it never results in a length_error or bad_alloc exception\n   // (which would be turned into std::terminate by the noexcept on the\n-  // assignment operator).\n+  // assignment operator). This is only true when inlining though.\n+#ifndef __NO_INLINE__\n   target = std::move(source);\n+#endif\n }"}, {"sha": "15f3a4bcbe1719a808164e6180296a3c76428ee5", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/assign/wchar_t/move_assign_optim.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db78cac104c0427b023b3a21f98bf302aa736e3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fassign%2Fwchar_t%2Fmove_assign_optim.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db78cac104c0427b023b3a21f98bf302aa736e3/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fassign%2Fwchar_t%2Fmove_assign_optim.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fassign%2Fwchar_t%2Fmove_assign_optim.cc?ref=5db78cac104c0427b023b3a21f98bf302aa736e3", "patch": "@@ -30,6 +30,8 @@ test01(std::wstring& target, std::wstring&& source)\n   // The move assignment operator should be simple enough that the compiler\n   // can see that it never results in a length_error or bad_alloc exception\n   // (which would be turned into std::terminate by the noexcept on the\n-  // assignment operator).\n+  // assignment operator). This is only true when inlining though.\n+#ifndef __NO_INLINE__\n   target = std::move(source);\n+#endif\n }"}]}