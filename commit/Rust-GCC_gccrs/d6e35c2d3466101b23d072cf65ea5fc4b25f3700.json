{"sha": "d6e35c2d3466101b23d072cf65ea5fc4b25f3700", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZlMzVjMmQzNDY2MTAxYjIzZDA3MmNmNjVlYTVmYzRiMjVmMzcwMA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-03-19T18:57:24Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-03-19T18:57:24Z"}, "message": "pa.c (compute_frame_size): Update comments to reflect reality.\n\n        * pa.c (compute_frame_size): Update comments to reflect reality.\n        (hppa_expand_prologue): Don't save registers which aren't\n        used, even if it creates holes.  Partially undoes changes from\n        early March.\n        (hppa_expand_epilogue): Likewise.\n\nFrom-SVN: r11567", "tree": {"sha": "53554c8454ca755bfa4aeaa0810c43e17de74148", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53554c8454ca755bfa4aeaa0810c43e17de74148"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6e35c2d3466101b23d072cf65ea5fc4b25f3700", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6e35c2d3466101b23d072cf65ea5fc4b25f3700", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6e35c2d3466101b23d072cf65ea5fc4b25f3700", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6e35c2d3466101b23d072cf65ea5fc4b25f3700/comments", "author": null, "committer": null, "parents": [{"sha": "acc5239d9ac39b2d7929c7977bdce779d374b238", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acc5239d9ac39b2d7929c7977bdce779d374b238", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acc5239d9ac39b2d7929c7977bdce779d374b238"}], "stats": {"total": 43, "additions": 13, "deletions": 30}, "files": [{"sha": "287dc7d7a6a321e14399de5a4e038e51258900d0", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 13, "deletions": 30, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e35c2d3466101b23d072cf65ea5fc4b25f3700/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e35c2d3466101b23d072cf65ea5fc4b25f3700/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=d6e35c2d3466101b23d072cf65ea5fc4b25f3700", "patch": "@@ -2046,9 +2046,10 @@ compute_frame_size (size, fregs_live)\n      we need to add this in because of STARTING_FRAME_OFFSET. */\n   fsize = size + (size || frame_pointer_needed ? 8 : 0);\n \n-  /* We do not want to create holes in the callee registers that\n-     get saved (confuses gdb), so once we know the highest we just\n-     save all the ones below it, whether they're used or not.  */\n+  /* We must leave enough space for all the callee saved registers\n+     from 3 .. highest used callee save register since we don't\n+     know if we're going to have an inline or out of line prologue\n+     and epilogue.  */\n   for (i = 18; i >= 3; i--)\n     if (regs_ever_live[i])\n       {\n@@ -2059,9 +2060,10 @@ compute_frame_size (size, fregs_live)\n   /* Round the stack.  */\n   fsize = (fsize + 7) & ~7;\n \n-  /* We do not want to create holes in the callee registers that\n-     get saved (confuses gdb), so once we know the highest we just\n-     save all the ones below it, whether they're used or not.  */\n+  /* We must leave enough space for all the callee saved registers\n+     from 3 .. highest used callee save register since we don't\n+     know if we're going to have an inline or out of line prologue\n+     and epilogue.  */\n   for (i = 66; i >= 48; i -= 2)\n     if (regs_ever_live[i] || regs_ever_live[i + 1])\n       {\n@@ -2371,12 +2373,9 @@ hppa_expand_prologue()\n      was done earlier.  */\n   if (frame_pointer_needed)\n     {\n-      int found_one = 0;\n       for (i = 18, offset = local_fsize; i >= 4; i--)\n-\tif (regs_ever_live[i] && ! call_used_regs[i]\n-\t    || found_one)\n+\tif (regs_ever_live[i] && ! call_used_regs[i])\n \t  {\n-\t    found_one = 1;\n \t    store_reg (i, offset, FRAME_POINTER_REGNUM);\n \t    offset += 4;\n \t    gr_saved++;\n@@ -2387,12 +2386,9 @@ hppa_expand_prologue()\n   /* No frame pointer needed.  */\n   else\n     {\n-      int found_one = 0;\n       for (i = 18, offset = local_fsize - actual_fsize; i >= 3; i--)\n-      \tif (regs_ever_live[i] && ! call_used_regs[i]\n-\t    || found_one)\n+      \tif (regs_ever_live[i] && ! call_used_regs[i])\n \t  {\n-\t    found_one = 1;\n \t    /* If merge_sp_adjust_with_store is nonzero, then we can\n \t       optimize the first GR save.  */\n \t    if (merge_sp_adjust_with_store)\n@@ -2422,8 +2418,6 @@ hppa_expand_prologue()\n   /* Floating point register store.  */\n   if (save_fregs)\n     {\n-      int found_one = 0;\n-\n       /* First get the frame or stack pointer to the start of the FP register\n \t save area.  */\n       if (frame_pointer_needed)\n@@ -2434,10 +2428,8 @@ hppa_expand_prologue()\n       /* Now actually save the FP registers.  */\n       for (i = 66; i >= 48; i -= 2)\n \t{\n-\t  if (regs_ever_live[i] || regs_ever_live[i + 1]\n-\t      || found_one)\n+\t  if (regs_ever_live[i] || regs_ever_live[i + 1])\n \t    {\n-\t      found_one = 1;\n \t      emit_move_insn (gen_rtx (MEM, DFmode,\n \t\t\t\t       gen_rtx (POST_INC, DFmode, tmpreg)),\n \t\t\t      gen_rtx (REG, DFmode, i));\n@@ -2587,25 +2579,19 @@ hppa_expand_epilogue ()\n   /* General register restores.  */\n   if (frame_pointer_needed)\n     {\n-      int found_one = 0;\n       for (i = 18, offset = local_fsize; i >= 4; i--)\n-\tif (regs_ever_live[i] && ! call_used_regs[i]\n-\t    || found_one)\n+\tif (regs_ever_live[i] && ! call_used_regs[i])\n \t  {\n-\t    found_one = 1;\n \t    load_reg (i, offset, FRAME_POINTER_REGNUM);\n \t    offset += 4;\n \t  }\n     }\n   else\n     {\n-      int found_one = 0;\n       for (i = 18, offset = local_fsize - actual_fsize; i >= 3; i--)\n \t{\n-\t  if (regs_ever_live[i] && ! call_used_regs[i]\n-\t      || found_one)\n+\t  if (regs_ever_live[i] && ! call_used_regs[i])\n \t    {\n-\t      found_one = 1;\n \t      /* Only for the first load.\n \t         merge_sp_adjust_with_load holds the register load\n \t         with which we will merge the sp adjustment.  */\n@@ -2626,8 +2612,6 @@ hppa_expand_epilogue ()\n   /* FP register restores.  */\n   if (save_fregs)\n     {\n-      int found_one = 0;\n-\n       /* Adjust the register to index off of.  */\n       if (frame_pointer_needed)\n \tset_reg_plus_d (1, FRAME_POINTER_REGNUM, offset);\n@@ -2639,7 +2623,6 @@ hppa_expand_epilogue ()\n \t{\n \t  if (regs_ever_live[i] || regs_ever_live[i + 1])\n \t    {\n-\t      found_one = 1;\n \t      emit_move_insn (gen_rtx (REG, DFmode, i),\n \t\t\t      gen_rtx (MEM, DFmode,\n \t\t\t\t       gen_rtx (POST_INC, DFmode, tmpreg)));"}]}