{"sha": "37f1d5c9f93b8590cfd825ade91edb526cb21a43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdmMWQ1YzlmOTNiODU5MGNmZDgyNWFkZTkxZWRiNTI2Y2IyMWE0Mw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2012-09-23T11:24:46Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-09-23T11:24:46Z"}, "message": "re PR libstdc++/54675 (Many libstdc++ testsuite failures in ext/random)\n\n\tPR libstdc++/54675\n\t* include/ext/random: Avoid the badname __alpha (and, for\n\tconsistency, __mu, __nu, __sigma and __omega too).\n\t* include/bits/random.tcc: Likewise.\n\nFrom-SVN: r191650", "tree": {"sha": "35ff0838ef925ec0dfac69240da418b0c303c618", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35ff0838ef925ec0dfac69240da418b0c303c618"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37f1d5c9f93b8590cfd825ade91edb526cb21a43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37f1d5c9f93b8590cfd825ade91edb526cb21a43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37f1d5c9f93b8590cfd825ade91edb526cb21a43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37f1d5c9f93b8590cfd825ade91edb526cb21a43/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "99c25a87c6bd63d6b03e3792630ae61c166dcac9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99c25a87c6bd63d6b03e3792630ae61c166dcac9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99c25a87c6bd63d6b03e3792630ae61c166dcac9"}], "stats": {"total": 71, "additions": 39, "deletions": 32}, "files": [{"sha": "606f5658786f7280fdd8ad6a3388d21a93955c6c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37f1d5c9f93b8590cfd825ade91edb526cb21a43/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37f1d5c9f93b8590cfd825ade91edb526cb21a43/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=37f1d5c9f93b8590cfd825ade91edb526cb21a43", "patch": "@@ -1,3 +1,10 @@\n+2012-09-23  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR libstdc++/54675\n+\t* include/ext/random: Avoid the badname __alpha (and, for\n+\tconsistency, __mu, __nu, __sigma and __omega too).\n+\t* include/bits/random.tcc: Likewise.\n+\n 2012-09-21  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \t* include/ext/random: Add __gnu_cxx::pareto_distribution<> class."}, {"sha": "97bd01467d5eab1c92209d8ecc5e5fbed16a1e08", "filename": "libstdc++-v3/include/ext/random", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37f1d5c9f93b8590cfd825ade91edb526cb21a43/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37f1d5c9f93b8590cfd825ade91edb526cb21a43/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom?ref=37f1d5c9f93b8590cfd825ade91edb526cb21a43", "patch": "@@ -932,9 +932,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \ttypedef rice_distribution<result_type> distribution_type;\n \n-\tparam_type(result_type __nu = result_type(0),\n-\t\t   result_type __sigma = result_type(1))\n-\t: _M_nu(__nu), _M_sigma(__sigma)\n+\tparam_type(result_type __nu_val = result_type(0),\n+\t\t   result_type __sigma_val = result_type(1))\n+\t: _M_nu(__nu_val), _M_sigma(__sigma_val)\n \t{\n \t  _GLIBCXX_DEBUG_ASSERT(_M_nu >= result_type(0));\n \t  _GLIBCXX_DEBUG_ASSERT(_M_sigma > result_type(0));\n@@ -964,11 +964,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * @brief Constructors.\n        */\n       explicit\n-      rice_distribution(result_type __nu = result_type(0),\n-\t\t\tresult_type __sigma = result_type(1))\n-      : _M_param(__nu, __sigma),\n-\t_M_ndx(__nu, __sigma),\n-\t_M_ndy(result_type(0), __sigma)\n+      rice_distribution(result_type __nu_val = result_type(0),\n+\t\t\tresult_type __sigma_val = result_type(1))\n+      : _M_param(__nu_val, __sigma_val),\n+\t_M_ndx(__nu_val, __sigma_val),\n+\t_M_ndy(result_type(0), __sigma_val)\n       { }\n \n       explicit\n@@ -1166,9 +1166,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \ttypedef nakagami_distribution<result_type> distribution_type;\n \n-\tparam_type(result_type __mu = result_type(1),\n-\t\t   result_type __omega = result_type(1))\n-\t: _M_mu(__mu), _M_omega(__omega)\n+\tparam_type(result_type __mu_val = result_type(1),\n+\t\t   result_type __omega_val = result_type(1))\n+\t: _M_mu(__mu_val), _M_omega(__omega_val)\n \t{\n \t  _GLIBCXX_DEBUG_ASSERT(_M_mu >= result_type(0.5L));\n \t  _GLIBCXX_DEBUG_ASSERT(_M_omega > result_type(0));\n@@ -1198,10 +1198,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * @brief Constructors.\n        */\n       explicit\n-      nakagami_distribution(result_type __mu = result_type(1),\n-\t\t\t    result_type __omega = result_type(1))\n-      : _M_param(__mu, __omega),\n-\t_M_gd(__mu, __omega / __mu)\n+      nakagami_distribution(result_type __mu_val = result_type(1),\n+\t\t\t    result_type __omega_val = result_type(1))\n+      : _M_param(__mu_val, __omega_val),\n+\t_M_gd(__mu_val, __omega_val / __mu_val)\n       { }\n \n       explicit\n@@ -1399,9 +1399,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \ttypedef pareto_distribution<result_type> distribution_type;\n \n-\tparam_type(result_type __alpha = result_type(1),\n-\t\t   result_type __mu = result_type(1))\n-\t: _M_alpha(__alpha), _M_mu(__mu)\n+\tparam_type(result_type __alpha_val = result_type(1),\n+\t\t   result_type __mu_val = result_type(1))\n+\t: _M_alpha(__alpha_val), _M_mu(__mu_val)\n \t{\n \t  _GLIBCXX_DEBUG_ASSERT(_M_alpha > result_type(0));\n \t  _GLIBCXX_DEBUG_ASSERT(_M_mu > result_type(0));\n@@ -1430,9 +1430,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * @brief Constructors.\n        */\n       explicit\n-      pareto_distribution(result_type __alpha = result_type(1),\n-\t\t\t  result_type __mu = result_type(1))\n-      : _M_param(__alpha, __mu),\n+      pareto_distribution(result_type __alpha_val = result_type(1),\n+\t\t\t  result_type __mu_val = result_type(1))\n+      : _M_param(__alpha_val, __mu_val),\n \t_M_ud()\n       { }\n "}, {"sha": "137b6588dc9cf87054ab6514f83031f17f224577", "filename": "libstdc++-v3/include/ext/random.tcc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37f1d5c9f93b8590cfd825ade91edb526cb21a43/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37f1d5c9f93b8590cfd825ade91edb526cb21a43/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc?ref=37f1d5c9f93b8590cfd825ade91edb526cb21a43", "patch": "@@ -773,12 +773,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       const typename __ios_base::fmtflags __flags = __is.flags();\n       __is.flags(__ios_base::dec | __ios_base::skipws);\n \n-      _RealType __nu, __sigma;\n-      __is >> __nu >> __sigma;\n+      _RealType __nu_val, __sigma_val;\n+      __is >> __nu_val >> __sigma_val;\n       __is >> __x._M_ndx;\n       __is >> __x._M_ndy;\n       __x.param(typename rice_distribution<_RealType>::\n-\t\tparam_type(__nu, __sigma));\n+\t\tparam_type(__nu_val, __sigma_val));\n \n       __is.flags(__flags);\n       return __is;\n@@ -838,11 +838,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       const typename __ios_base::fmtflags __flags = __is.flags();\n       __is.flags(__ios_base::dec | __ios_base::skipws);\n \n-      _RealType __mu, __omega;\n-      __is >> __mu >> __omega;\n+      _RealType __mu_val, __omega_val;\n+      __is >> __mu_val >> __omega_val;\n       __is >> __x._M_gd;\n       __x.param(typename nakagami_distribution<_RealType>::\n-\t\tparam_type(__mu, __omega));\n+\t\tparam_type(__mu_val, __omega_val));\n \n       __is.flags(__flags);\n       return __is;\n@@ -860,10 +860,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator>)\n \n-\tresult_type __mu = __p.mu();\n+\tresult_type __mu_val = __p.mu();\n \tresult_type __malphinv = -result_type(1) / __p.alpha();\n \twhile (__f != __t)\n-\t  *__f++ = __mu * std::pow(this->_M_ud(__urng), __malphinv);\n+\t  *__f++ = __mu_val * std::pow(this->_M_ud(__urng), __malphinv);\n       }\n \n   template<typename _RealType, typename _CharT, typename _Traits>\n@@ -902,11 +902,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       const typename __ios_base::fmtflags __flags = __is.flags();\n       __is.flags(__ios_base::dec | __ios_base::skipws);\n \n-      _RealType __alpha, __mu;\n-      __is >> __alpha >> __mu;\n+      _RealType __alpha_val, __mu_val;\n+      __is >> __alpha_val >> __mu_val;\n       __is >> __x._M_ud;\n       __x.param(typename pareto_distribution<_RealType>::\n-\t\tparam_type(__alpha, __mu));\n+\t\tparam_type(__alpha_val, __mu_val));\n \n       __is.flags(__flags);\n       return __is;"}]}