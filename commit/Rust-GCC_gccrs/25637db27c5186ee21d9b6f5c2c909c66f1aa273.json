{"sha": "25637db27c5186ee21d9b6f5c2c909c66f1aa273", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU2MzdkYjI3YzUxODZlZTIxZDliNmY1YzJjOTA5YzY2ZjFhYTI3Mw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2005-12-05T10:01:06Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2005-12-05T10:01:06Z"}, "message": "treetree.c (tree_code_if_start, [...]): Use fold_convert where appropriate.\n\n2005-12-05  Richard Guenther  <rguenther@suse.de>\n\n\t* treetree.c (tree_code_if_start, tree_code_create_variable,\n\ttree_code_generate_return, tree_code_get_expression,\n\ttree_code_add_parameter): Use fold_convert where appropriate.\n\nFrom-SVN: r108051", "tree": {"sha": "711988c1c31f3270678e410234acb2d699dc72c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/711988c1c31f3270678e410234acb2d699dc72c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25637db27c5186ee21d9b6f5c2c909c66f1aa273", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25637db27c5186ee21d9b6f5c2c909c66f1aa273", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25637db27c5186ee21d9b6f5c2c909c66f1aa273", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25637db27c5186ee21d9b6f5c2c909c66f1aa273/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4501d314f202eff8cb7693505ca59b9a651eee6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4501d314f202eff8cb7693505ca59b9a651eee6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4501d314f202eff8cb7693505ca59b9a651eee6c"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "69963642ee5adcf28045f08e51b7e3ec11d72247", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25637db27c5186ee21d9b6f5c2c909c66f1aa273/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25637db27c5186ee21d9b6f5c2c909c66f1aa273/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=25637db27c5186ee21d9b6f5c2c909c66f1aa273", "patch": "@@ -1,3 +1,9 @@\n+2005-12-05  Richard Guenther  <rguenther@suse.de>\n+\n+\t* treetree.c (tree_code_if_start, tree_code_create_variable,\n+\ttree_code_generate_return, tree_code_get_expression,\n+\ttree_code_add_parameter): Use fold_convert where appropriate.\n+\n 2005-11-07  James A. Morrison  <phython@gcc.gnu.org>\n \n \tPR treelang/24066"}, {"sha": "2bfbb2a6ba09f8671f30b48b6d452b69dc7c2089", "filename": "gcc/treelang/treetree.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25637db27c5186ee21d9b6f5c2c909c66f1aa273/gcc%2Ftreelang%2Ftreetree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25637db27c5186ee21d9b6f5c2c909c66f1aa273/gcc%2Ftreelang%2Ftreetree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.c?ref=25637db27c5186ee21d9b6f5c2c909c66f1aa273", "patch": "@@ -259,8 +259,7 @@ tree_code_if_start (tree exp, location_t loc)\n {\n   tree cond_exp, cond;\n   cond_exp = fold_build2 (NE_EXPR, boolean_type_node, exp,\n-\t\t\t  fold_build1 (CONVERT_EXPR, TREE_TYPE (exp),\n-\t\t\t\t       integer_zero_node));\n+\t\t\t  build_int_cst (TREE_TYPE (exp), 0));\n   SET_EXPR_LOCATION (cond_exp, loc);\n   cond = build3 (COND_EXPR, void_type_node, cond_exp, NULL_TREE,\n                  NULL_TREE);\n@@ -526,7 +525,7 @@ tree_code_create_variable (unsigned int storage_class,\n \n   /* 3a. Initialization.  */\n   if (init)\n-    DECL_INITIAL (var_decl) = fold_build1 (CONVERT_EXPR, var_type, init);\n+    DECL_INITIAL (var_decl) = fold_convert (var_type, init);\n   else\n     DECL_INITIAL (var_decl) = NULL_TREE;\n \n@@ -586,7 +585,7 @@ tree_code_generate_return (tree type, tree exp)\n     {\n       setret = fold_build2 (MODIFY_EXPR, type, \n                             DECL_RESULT (current_function_decl),\n-                            fold_build1 (CONVERT_EXPR, type, exp));\n+                            fold_convert (type, exp));\n       TREE_SIDE_EFFECTS (setret) = 1;\n       TREE_USED (setret) = 1;\n       setret = build1 (RETURN_EXPR, type, setret);\n@@ -663,7 +662,7 @@ tree_code_get_expression (unsigned int exp_type,\n       gcc_assert (op1 && op2);\n       operator = MODIFY_EXPR;\n       ret1 = fold_build2 (operator, void_type_node, op1,\n-                          fold_build1 (CONVERT_EXPR, TREE_TYPE (op1), op2));\n+                          fold_convert (TREE_TYPE (op1), op2));\n \n       break;\n \n@@ -683,8 +682,8 @@ tree_code_get_expression (unsigned int exp_type,\n     binary_expression:\n       gcc_assert (op1 && op2);\n       ret1  =  fold_build2 (operator, type,\n-\t\t\t    fold_build1 (CONVERT_EXPR, type, op1),\n-\t\t\t    fold_build1 (CONVERT_EXPR, type, op2));\n+\t\t\t    fold_convert (type, op1),\n+\t\t\t    fold_convert (type, op2));\n       break;\n \n       /* Reference to a variable.  This is dead easy, just return the\n@@ -697,7 +696,7 @@ tree_code_get_expression (unsigned int exp_type,\n       if (type == TREE_TYPE (op1))\n         ret1 = build1 (NOP_EXPR, type, op1);\n       else\n-        ret1 = fold_build1 (CONVERT_EXPR, type, op1);\n+        ret1 = fold_convert (type, op1);\n       break;\n \n     case EXP_FUNCTION_INVOCATION:\n@@ -734,8 +733,8 @@ tree_code_add_parameter (tree list, tree proto_exp, tree exp)\n {\n   tree new_exp;\n   new_exp = tree_cons (NULL_TREE,\n-                       fold_build1 (CONVERT_EXPR, TREE_TYPE (proto_exp),\n-\t\t\t\t    exp), NULL_TREE);\n+                       fold_convert (TREE_TYPE (proto_exp),\n+\t\t\t\t     exp), NULL_TREE);\n   if (!list)\n     return new_exp;\n   return chainon (new_exp, list);"}]}