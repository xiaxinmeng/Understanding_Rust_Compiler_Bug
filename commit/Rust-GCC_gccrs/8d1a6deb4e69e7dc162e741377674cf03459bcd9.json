{"sha": "8d1a6deb4e69e7dc162e741377674cf03459bcd9", "node_id": "C_kwDOANBUbNoAKDhkMWE2ZGViNGU2OWU3ZGMxNjJlNzQxMzc3Njc0Y2YwMzQ1OWJjZDk", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-08-22T14:37:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-22T14:37:10Z"}, "message": "Merge #1493\n\n1493: Fix ICE in dyn impl block r=philberty a=philberty\n\nThe issue here was that our name resolution assumed qualified path always\r\nhas an as clause. We also had missing visitors to generate the canonical path\r\nfor impl blocks using dynamic trait objects.\r\n\r\nWe should investigate implementing the fine-grained visitors for the AST\r\nsimilar to the ones we have for HIR. This will solve the issue where we\r\nhave missing visitors.\r\n\r\nFixes #1249\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "976a9fa43b737d776185a7d91a0621cf184f9f31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/976a9fa43b737d776185a7d91a0621cf184f9f31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d1a6deb4e69e7dc162e741377674cf03459bcd9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjA5SWCRBK7hj4Ov3rIwAATj4IAI20AykMabefX63XKoUqyavM\nedWGG0qHgDnCfrqh1GhZTeWf5TkZ686UhRQBEVNd4jgN/PGACfvXWr8TNZ2oeyCG\nxmhk6agC9JUMv0jRyGcwgBf+tEFEaznepmX80Cht/031bqEbWn4iLny8+N7FuvGi\nx7by60+OcGbyrDmDpZbBoEOgBRI4BuKK7kBtORJ260dyUrr5WOhzgoMC4t/4iho6\negecRPGOHQ7YF6ZCoKLWYUqTy0B940bIn1MYZMhZR6/5wHnJOfINH7P9Se7E/5gD\nIJlE0Het6+C13ratWGS3CHxrm5+zelx+DlREBayX/SF4db2rz6E7SX9AF3Dlc6g=\n=J4Z2\n-----END PGP SIGNATURE-----\n", "payload": "tree 976a9fa43b737d776185a7d91a0621cf184f9f31\nparent 0f4ec11e8c2399ca20f80b4006e294794f9b2e0f\nparent 56f503b88a240f1d77c8d6564656bc22269b4842\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1661179030 +0000\ncommitter GitHub <noreply@github.com> 1661179030 +0000\n\nMerge #1493\n\n1493: Fix ICE in dyn impl block r=philberty a=philberty\n\nThe issue here was that our name resolution assumed qualified path always\r\nhas an as clause. We also had missing visitors to generate the canonical path\r\nfor impl blocks using dynamic trait objects.\r\n\r\nWe should investigate implementing the fine-grained visitors for the AST\r\nsimilar to the ones we have for HIR. This will solve the issue where we\r\nhave missing visitors.\r\n\r\nFixes #1249\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d1a6deb4e69e7dc162e741377674cf03459bcd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d1a6deb4e69e7dc162e741377674cf03459bcd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d1a6deb4e69e7dc162e741377674cf03459bcd9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f4ec11e8c2399ca20f80b4006e294794f9b2e0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f4ec11e8c2399ca20f80b4006e294794f9b2e0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f4ec11e8c2399ca20f80b4006e294794f9b2e0f"}, {"sha": "56f503b88a240f1d77c8d6564656bc22269b4842", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56f503b88a240f1d77c8d6564656bc22269b4842", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56f503b88a240f1d77c8d6564656bc22269b4842"}], "stats": {"total": 113, "additions": 84, "deletions": 29}, "files": [{"sha": "0c38f28d5306678a83c35f176015a28cc5ec9bbf", "filename": "gcc/rust/resolve/rust-ast-resolve-item.cc", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1a6deb4e69e7dc162e741377674cf03459bcd9/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1a6deb4e69e7dc162e741377674cf03459bcd9/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc?ref=8d1a6deb4e69e7dc162e741377674cf03459bcd9", "patch": "@@ -534,25 +534,17 @@ ResolveItem::visit (AST::InherentImpl &impl_block)\n \n   // FIXME this needs to be protected behind nominal type-checks see:\n   // rustc --explain E0118\n-\n-  NodeId resolved_node = ResolveType::go (impl_block.get_type ().get ());\n-  if (resolved_node == UNKNOWN_NODEID)\n-    {\n-      resolver->get_type_scope ().pop ();\n-      resolver->get_name_scope ().pop ();\n-      return;\n-    }\n+  ResolveType::go (impl_block.get_type ().get ());\n \n   // Setup paths\n   CanonicalPath self_cpath = CanonicalPath::create_empty ();\n   bool ok = ResolveTypeToCanonicalPath::go (impl_block.get_type ().get (),\n \t\t\t\t\t    self_cpath);\n   rust_assert (ok);\n+  rust_debug (\"AST::InherentImpl resolve Self: {%s}\",\n+\t      self_cpath.get ().c_str ());\n \n-  std::string raw_impl_type_path = impl_block.get_type ()->as_string ();\n-  CanonicalPath impl_type\n-    = CanonicalPath::new_seg (impl_block.get_type ()->get_node_id (),\n-\t\t\t      raw_impl_type_path);\n+  CanonicalPath impl_type = self_cpath;\n   CanonicalPath impl_prefix = prefix.append (impl_type);\n \n   // see https://godbolt.org/z/a3vMbsT6W\n@@ -580,6 +572,9 @@ ResolveItem::visit (AST::InherentImpl &impl_block)\n \n   for (auto &impl_item : impl_block.get_impl_items ())\n     {\n+      rust_debug (\n+\t\"AST::InherentImpl resolve_impl_item: impl_prefix={%s} cpath={%s}\",\n+\timpl_prefix.get ().c_str (), cpath.get ().c_str ());\n       resolve_impl_item (impl_item.get (), impl_prefix, cpath);\n     }\n \n@@ -703,22 +698,20 @@ ResolveItem::visit (AST::TraitImpl &impl_block)\n \t\t\t\t       canonical_trait_type);\n   rust_assert (ok);\n \n+  rust_debug (\"AST::TraitImpl resolve trait type: {%s}\",\n+\t      canonical_trait_type.get ().c_str ());\n+\n   CanonicalPath canonical_impl_type = CanonicalPath::create_empty ();\n   ok = ResolveTypeToCanonicalPath::go (impl_block.get_type ().get (),\n \t\t\t\t       canonical_impl_type);\n   rust_assert (ok);\n \n-  // raw paths\n-  std::string raw_impl_type_path = impl_block.get_type ()->as_string ();\n-  CanonicalPath impl_type_seg\n-    = CanonicalPath::new_seg (impl_block.get_type ()->get_node_id (),\n-\t\t\t      raw_impl_type_path);\n-\n-  std::string raw_trait_type_path = impl_block.get_trait_path ().as_string ();\n-  CanonicalPath trait_type_seg\n-    = CanonicalPath::new_seg (impl_block.get_trait_path ().get_node_id (),\n-\t\t\t      raw_trait_type_path);\n+  rust_debug (\"AST::TraitImpl resolve self: {%s}\",\n+\t      canonical_impl_type.get ().c_str ());\n \n+  // raw paths\n+  CanonicalPath impl_type_seg = canonical_impl_type;\n+  CanonicalPath trait_type_seg = canonical_trait_type;\n   CanonicalPath projection\n     = CanonicalPath::trait_impl_projection_seg (impl_block.get_node_id (),\n \t\t\t\t\t\ttrait_type_seg, impl_type_seg);\n@@ -756,6 +749,9 @@ ResolveItem::visit (AST::TraitImpl &impl_block)\n \n   for (auto &impl_item : impl_block.get_impl_items ())\n     {\n+      rust_debug (\n+\t\"AST::TraitImpl resolve_impl_item: impl_prefix={%s} cpath={%s}\",\n+\timpl_prefix.get ().c_str (), cpath.get ().c_str ());\n       resolve_impl_item (impl_item.get (), impl_prefix, cpath);\n     }\n "}, {"sha": "b139c6a87202664bf45875c57b16bde7aec69db2", "filename": "gcc/rust/resolve/rust-ast-resolve-path.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1a6deb4e69e7dc162e741377674cf03459bcd9/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1a6deb4e69e7dc162e741377674cf03459bcd9/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc?ref=8d1a6deb4e69e7dc162e741377674cf03459bcd9", "patch": "@@ -242,8 +242,9 @@ void\n ResolvePath::resolve_path (AST::QualifiedPathInExpression *expr)\n {\n   AST::QualifiedPathType &root_segment = expr->get_qualified_path_type ();\n-  ResolveType::go (&root_segment.get_as_type_path ());\n   ResolveType::go (root_segment.get_type ().get ());\n+  if (root_segment.has_as_clause ())\n+    ResolveType::go (&root_segment.get_as_type_path ());\n \n   for (auto &segment : expr->get_segments ())\n     {"}, {"sha": "6b08613755a04ed7ca919a895311948e55557b68", "filename": "gcc/rust/resolve/rust-ast-resolve-type.cc", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1a6deb4e69e7dc162e741377674cf03459bcd9/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1a6deb4e69e7dc162e741377674cf03459bcd9/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc?ref=8d1a6deb4e69e7dc162e741377674cf03459bcd9", "patch": "@@ -477,6 +477,27 @@ ResolveTypeToCanonicalPath::visit (AST::SliceType &type)\n     }\n }\n \n+void\n+ResolveTypeToCanonicalPath::visit (AST::TraitObjectTypeOneBound &type)\n+{\n+  CanonicalPath path = CanonicalPath::create_empty ();\n+  bool ok\n+    = ResolveTypeToCanonicalPath::go (&type.get_trait_bound ().get_type_path (),\n+\t\t\t\t      path);\n+  if (ok)\n+    {\n+      std::string slice_path = \"<dyn \" + path.get () + \">\";\n+      result = CanonicalPath::new_seg (type.get_node_id (), slice_path);\n+    }\n+}\n+\n+void\n+ResolveTypeToCanonicalPath::visit (AST::TraitObjectType &type)\n+{\n+  // FIXME is this actually allowed? dyn A+B\n+  gcc_unreachable ();\n+}\n+\n ResolveTypeToCanonicalPath::ResolveTypeToCanonicalPath ()\n   : ResolverBase (), result (CanonicalPath::create_empty ())\n {}"}, {"sha": "5a71268c0d446db816140fed76dc83840554eb99", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1a6deb4e69e7dc162e741377674cf03459bcd9/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1a6deb4e69e7dc162e741377674cf03459bcd9/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=8d1a6deb4e69e7dc162e741377674cf03459bcd9", "patch": "@@ -242,6 +242,10 @@ class ResolveTypeToCanonicalPath : public ResolverBase\n \n   void visit (AST::SliceType &type) override;\n \n+  void visit (AST::TraitObjectTypeOneBound &type) override;\n+\n+  void visit (AST::TraitObjectType &type) override;\n+\n private:\n   ResolveTypeToCanonicalPath ();\n "}, {"sha": "84f3b6ea6e61f0492231184977eceb5229db1b10", "filename": "gcc/rust/typecheck/rust-hir-type-check-path.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1a6deb4e69e7dc162e741377674cf03459bcd9/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1a6deb4e69e7dc162e741377674cf03459bcd9/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc?ref=8d1a6deb4e69e7dc162e741377674cf03459bcd9", "patch": "@@ -34,13 +34,7 @@ TypeCheckExpr::visit (HIR::QualifiedPathInExpression &expr)\n \n   if (!qual_path_type.has_as_clause ())\n     {\n-      // then this is just a normal path-in-expression\n       NodeId root_resolved_node_id = UNKNOWN_NODEID;\n-      bool ok = resolver->lookup_resolved_type (\n-\tqual_path_type.get_type ()->get_mappings ().get_nodeid (),\n-\t&root_resolved_node_id);\n-      rust_assert (ok);\n-\n       resolve_segments (root_resolved_node_id, expr.get_segments (), 0, root,\n \t\t\texpr.get_mappings (), expr.get_locus ());\n       return;"}, {"sha": "072204ea877c255e18fefdcfca8e5e5f318cc6a6", "filename": "gcc/testsuite/rust/execute/torture/issue-1249.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1a6deb4e69e7dc162e741377674cf03459bcd9/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1249.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1a6deb4e69e7dc162e741377674cf03459bcd9/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1249.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1249.rs?ref=8d1a6deb4e69e7dc162e741377674cf03459bcd9", "patch": "@@ -0,0 +1,39 @@\n+// { dg-options \"-w\" }\n+// { dg-output \"1\\n2\\n\" }\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+trait T {\n+    fn foo(&self);\n+}\n+\n+impl dyn T {\n+    fn bar(&self) {\n+        unsafe {\n+            let a = \"1\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf(c);\n+        }\n+        self.foo()\n+    }\n+}\n+\n+struct S;\n+impl T for S {\n+    fn foo(&self) {\n+        unsafe {\n+            let a = \"2\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf(c);\n+        }\n+    }\n+}\n+\n+pub fn main() -> i32 {\n+    <dyn T>::bar(&S);\n+    0\n+}"}]}