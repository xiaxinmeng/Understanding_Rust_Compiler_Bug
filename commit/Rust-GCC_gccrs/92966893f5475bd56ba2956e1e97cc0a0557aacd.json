{"sha": "92966893f5475bd56ba2956e1e97cc0a0557aacd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI5NjY4OTNmNTQ3NWJkNTZiYTI5NTZlMWU5N2NjMGEwNTU3YWFjZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T12:18:16Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T12:18:16Z"}, "message": "[multiple changes]\n\n2011-08-04  Arnaud Charlet  <charlet@adacore.com>\n\n\t* make.adb (Do_Codepeer_Globalize_Step): Removed. Use CodePeer_Mode\n\tinstead.\n\t(CodePeer_Mode_String): New.\n\t(Linking_Phase, Binding_Phase): Call gnatlink with -P switch in\n\tCodePeer mode.\n\t(Scan_Make_Arg): Do not disable binding/linking phase in CodePeer mode.\n\t* bindgen.adb (Gen_Elab_Calls_Ada): Ignore subprograms in CodePeer\n\tmode, since no useful elaboration subprogram is needed by CodePeer.\n\t* gnatlink.adb (Gnatlink): Add support for -P switch (CodePeer mode).\n\tIn this mode, compile binder file with -gnatC and do stop after this\n\tstep.\n\n2011-08-04  Vincent Celier  <celier@adacore.com>\n\n\t* exp_ch7.adb: Minor comment fix.\n\nFrom-SVN: r177366", "tree": {"sha": "ff41142304d473e9b7109fb745e031524cc73de5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff41142304d473e9b7109fb745e031524cc73de5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92966893f5475bd56ba2956e1e97cc0a0557aacd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92966893f5475bd56ba2956e1e97cc0a0557aacd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92966893f5475bd56ba2956e1e97cc0a0557aacd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92966893f5475bd56ba2956e1e97cc0a0557aacd/comments", "author": null, "committer": null, "parents": [{"sha": "5969611fa7270d60a04cc288cda6029732057fd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5969611fa7270d60a04cc288cda6029732057fd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5969611fa7270d60a04cc288cda6029732057fd0"}], "stats": {"total": 87, "additions": 70, "deletions": 17}, "files": [{"sha": "62e4eaa7d7e8bd25b6e3b87d3ec624f40e3a3693", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92966893f5475bd56ba2956e1e97cc0a0557aacd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92966893f5475bd56ba2956e1e97cc0a0557aacd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=92966893f5475bd56ba2956e1e97cc0a0557aacd", "patch": "@@ -1,3 +1,21 @@\n+2011-08-04  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* make.adb (Do_Codepeer_Globalize_Step): Removed. Use CodePeer_Mode\n+\tinstead.\n+\t(CodePeer_Mode_String): New.\n+\t(Linking_Phase, Binding_Phase): Call gnatlink with -P switch in\n+\tCodePeer mode.\n+\t(Scan_Make_Arg): Do not disable binding/linking phase in CodePeer mode.\n+\t* bindgen.adb (Gen_Elab_Calls_Ada): Ignore subprograms in CodePeer\n+\tmode, since no useful elaboration subprogram is needed by CodePeer.\n+\t* gnatlink.adb (Gnatlink): Add support for -P switch (CodePeer mode).\n+\tIn this mode, compile binder file with -gnatC and do stop after this\n+\tstep.\n+\n+2011-08-04  Vincent Celier  <celier@adacore.com>\n+\n+\t* exp_ch7.adb: Minor comment fix.\n+\n 2011-08-04  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch7.adb, make.adb, sem_ch10.adb, bindgen.adb, sem_res.adb,"}, {"sha": "0da8a3a41ad044a52910b550f63a55f3bc8eb226", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92966893f5475bd56ba2956e1e97cc0a0557aacd/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92966893f5475bd56ba2956e1e97cc0a0557aacd/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=92966893f5475bd56ba2956e1e97cc0a0557aacd", "patch": "@@ -1423,7 +1423,10 @@ package body Bindgen is\n             --  The uname_E increment is skipped if this is a separate spec,\n             --  since it will be done when we process the body.\n \n-            else\n+            --  Ignore subprograms in CodePeer mode, since no useful\n+            --  elaboration subprogram is needed by CodePeer.\n+\n+            elsif U.Unit_Kind /= 's' or else not CodePeer_Mode then\n                if Force_Checking_Of_Elaboration_Flags\n                  or Interface_Library_Unit\n                  or not Bind_Main_Program"}, {"sha": "5dad689c1f0a2f4d35a075c5ef13388b05476fe9", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92966893f5475bd56ba2956e1e97cc0a0557aacd/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92966893f5475bd56ba2956e1e97cc0a0557aacd/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=92966893f5475bd56ba2956e1e97cc0a0557aacd", "patch": "@@ -4079,7 +4079,7 @@ package body Exp_Ch7 is\n    function Get_Global_Pool_For_Access_Type (T : Entity_Id) return Entity_Id is\n    begin\n       --  Access types whose size is smaller than System.Address size can\n-      --  exit only on VMS. We can't use the usual global pool which returns\n+      --  exist only on VMS. We can't use the usual global pool which returns\n       --  an object of type Address as truncation will make it invalid.\n       --  To handle this case, VMS has a dedicated global pool that returns\n       --  addresses that fit into 32 bit accesses."}, {"sha": "6a0a34e78ffaa4c84f944e1e433caef3e5efe3a5", "filename": "gcc/ada/gnatlink.adb", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92966893f5475bd56ba2956e1e97cc0a0557aacd/gcc%2Fada%2Fgnatlink.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92966893f5475bd56ba2956e1e97cc0a0557aacd/gcc%2Fada%2Fgnatlink.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatlink.adb?ref=92966893f5475bd56ba2956e1e97cc0a0557aacd", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1996-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -479,6 +479,9 @@ procedure Gnatlink is\n                                         (Argument (Next_Arg),\n                                          Only_If_No_Suffix => True));\n \n+                     when 'P' =>\n+                        Opt.CodePeer_Mode := True;\n+\n                      when 'R' =>\n                         Opt.Run_Path_Option := False;\n \n@@ -1441,12 +1444,13 @@ procedure Gnatlink is\n       Write_Eol;\n       Write_Line (\"  mainprog.ali   the ALI file of the main program\");\n       Write_Eol;\n-      Write_Line (\"  -f    force object file list to be generated\");\n+      Write_Line (\"  -f    Force object file list to be generated\");\n       Write_Line (\"  -g    Compile binder source file with debug information\");\n       Write_Line (\"  -n    Do not compile the binder source file\");\n+      Write_Line (\"  -P    Process files for use by CodePeer\");\n       Write_Line (\"  -R    Do not use a run_path_option\");\n-      Write_Line (\"  -v    verbose mode\");\n-      Write_Line (\"  -v -v very verbose mode\");\n+      Write_Line (\"  -v    Verbose mode\");\n+      Write_Line (\"  -v -v Very verbose mode\");\n       Write_Eol;\n       Write_Line (\"  -o nam     Use 'nam' as the name of the executable\");\n       Write_Line (\"  -b target  Compile the binder source to run on target\");\n@@ -1675,6 +1679,8 @@ begin\n    --             because bindgen uses brackets encoding for all upper\n    --             half and wide characters in identifier names.\n \n+   --  In addition, in CodePeer mode compile with -gnatC\n+\n    if Ada_Bind_File then\n       Binder_Options_From_ALI.Increment_Last;\n       Binder_Options_From_ALI.Table (Binder_Options_From_ALI.Last) :=\n@@ -1685,6 +1691,12 @@ begin\n       Binder_Options_From_ALI.Increment_Last;\n       Binder_Options_From_ALI.Table (Binder_Options_From_ALI.Last) :=\n         new String'(\"-gnatiw\");\n+\n+      if Opt.CodePeer_Mode then\n+         Binder_Options_From_ALI.Increment_Last;\n+         Binder_Options_From_ALI.Table (Binder_Options_From_ALI.Last) :=\n+           new String'(\"-gnatC\");\n+      end if;\n    end if;\n \n    --  Locate all the necessary programs and verify required files are present\n@@ -1888,6 +1900,13 @@ begin\n       end Bind_Step;\n    end if;\n \n+   --  In CodePeer mode, there's nothing left to do after the binder file has\n+   --  been compiled.\n+\n+   if Opt.CodePeer_Mode then\n+      return;\n+   end if;\n+\n    --  Now, actually link the program\n \n    --  Skip this step for now on JVM since the Java interpreter will do"}, {"sha": "a86846b7d4e093925bdcb2502ec2945c49c422fc", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92966893f5475bd56ba2956e1e97cc0a0557aacd/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92966893f5475bd56ba2956e1e97cc0a0557aacd/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=92966893f5475bd56ba2956e1e97cc0a0557aacd", "patch": "@@ -386,11 +386,9 @@ package body Make is\n    --  with the switches -c, -b and -l. These flags are reset to True for\n    --  each invocation of procedure Gnatmake.\n \n-   Do_Codepeer_Globalize_Step : Boolean := False;\n-   --  Flag to indicate whether the CodePeer globalizer should be called\n-\n    Shared_String           : aliased String := \"-shared\";\n    Force_Elab_Flags_String : aliased String := \"-F\";\n+   CodePeer_Mode_String    : aliased String := \"-P\";\n \n    No_Shared_Switch : aliased Argument_List := (1 .. 0 => null);\n    Shared_Switch    : aliased Argument_List := (1 => Shared_String'Access);\n@@ -2927,7 +2925,7 @@ package body Make is\n             then\n                --  If we compile with -gnatC, enable CodePeer globalize step\n \n-               Do_Codepeer_Globalize_Step := True;\n+               CodePeer_Mode := True;\n             end if;\n          end loop;\n \n@@ -2968,7 +2966,7 @@ package body Make is\n                declare\n                   Str : String renames Args (Arg_Index).all;\n                begin\n-                  if Do_Codepeer_Globalize_Step\n+                  if CodePeer_Mode\n                     and then Str'Length > 2\n                     and then Str (Str'First .. Str'First + 1) = \"-m\"\n                   then\n@@ -4399,7 +4397,13 @@ package body Make is\n          end;\n       end if;\n \n-      --  Add switch -M to gnatlink if buider switch --create-map-file\n+      if CodePeer_Mode then\n+         Linker_Switches.Increment_Last;\n+         Linker_Switches.Table (Linker_Switches.Last) :=\n+           new String'(CodePeer_Mode_String);\n+      end if;\n+\n+      --  Add switch -M to gnatlink if builder switch --create-map-file\n       --  has been specified.\n \n       if Map_File /= null then\n@@ -4560,6 +4564,11 @@ package body Make is\n          Args (Last_Arg) := Force_Elab_Flags_String'Access;\n       end if;\n \n+      if CodePeer_Mode then\n+         Last_Arg := Last_Arg + 1;\n+         Args (Last_Arg) := CodePeer_Mode_String'Access;\n+      end if;\n+\n       if Main_Project /= No_Project then\n \n          --  Put all the source directories in ADA_INCLUDE_PATH,\n@@ -6313,10 +6322,9 @@ package body Make is\n          end if;\n       end loop Multiple_Main_Loop;\n \n-      if Do_Codepeer_Globalize_Step then\n+      if CodePeer_Mode then\n          declare\n             Success : Boolean := False;\n-\n          begin\n             Globalize (Success);\n \n@@ -7962,9 +7970,14 @@ package body Make is\n             Add_Switch (Argv, Compiler, And_Save => And_Save);\n             Operating_Mode           := Check_Semantics;\n             Check_Object_Consistency := False;\n-            Compile_Only             := True;\n-            Do_Bind_Step             := False;\n-            Do_Link_Step             := False;\n+\n+            if not CodePeer_Mode\n+              and then (Argv'Last < 7 or else Argv (7) /= 'C')\n+            then\n+               Compile_Only := True;\n+               Do_Bind_Step := False;\n+               Do_Link_Step := False;\n+            end if;\n \n          elsif Argv (2 .. Argv'Last) = \"nostdlib\" then\n "}]}