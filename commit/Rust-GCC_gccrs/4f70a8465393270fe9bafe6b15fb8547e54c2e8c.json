{"sha": "4f70a8465393270fe9bafe6b15fb8547e54c2e8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY3MGE4NDY1MzkzMjcwZmU5YmFmZTZiMTVmYjg1NDdlNTRjMmU4Yw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1998-09-28T17:34:33Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-09-28T17:34:33Z"}, "message": "decl.c (grokdeclarator): Tighten checks for invalid destructors.\n\n\t* decl.c (grokdeclarator): Tighten checks for invalid\n\tdestructors.  Improve error-messages and error-recovery.\n\t* decl2.c (check_classfn): Don't assume that mangled destructor\n\tnames contain type information.\n\nFrom-SVN: r22630", "tree": {"sha": "887de5f00917ddfd4504ab6c1955e53e99690cc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/887de5f00917ddfd4504ab6c1955e53e99690cc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f70a8465393270fe9bafe6b15fb8547e54c2e8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f70a8465393270fe9bafe6b15fb8547e54c2e8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f70a8465393270fe9bafe6b15fb8547e54c2e8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f70a8465393270fe9bafe6b15fb8547e54c2e8c/comments", "author": null, "committer": null, "parents": [{"sha": "ab339d62c08bbac39c8f06a6daa0bcfc9acdf0a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab339d62c08bbac39c8f06a6daa0bcfc9acdf0a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab339d62c08bbac39c8f06a6daa0bcfc9acdf0a7"}], "stats": {"total": 132, "additions": 112, "deletions": 20}, "files": [{"sha": "2bc04c9dab64ad5334d5b92819b5bd9fb1ef6189", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f70a8465393270fe9bafe6b15fb8547e54c2e8c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f70a8465393270fe9bafe6b15fb8547e54c2e8c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4f70a8465393270fe9bafe6b15fb8547e54c2e8c", "patch": "@@ -1,3 +1,10 @@\n+1998-09-28  Mark Mitchell  <mark@markmitchell.com>\n+\n+\t* decl.c (grokdeclarator): Tighten checks for invalid\n+\tdestructors.  Improve error-messages and error-recovery.\n+\t* decl2.c (check_classfn): Don't assume that mangled destructor \n+\tnames contain type information.\n+\t\n 1998-09-25  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* search.c (get_base_distance): Remove assert."}, {"sha": "582bd66488a81f668397a26e5256f35914a3423c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f70a8465393270fe9bafe6b15fb8547e54c2e8c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f70a8465393270fe9bafe6b15fb8547e54c2e8c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4f70a8465393270fe9bafe6b15fb8547e54c2e8c", "patch": "@@ -9553,8 +9553,9 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\t      error (\"destructor cannot be static member function\");\n \t\t    if (quals)\n \t\t      {\n-\t\t\terror (\"destructors cannot be declared `const' or `volatile'\");\n-\t\t\treturn void_type_node;\n+\t\t\tcp_error (\"destructors may not be `%s'\",\n+\t\t\t\t  IDENTIFIER_POINTER (TREE_VALUE (quals)));\n+\t\t\tquals = NULL_TREE;\n \t\t      }\n \t\t    if (decl_context == FIELD)\n \t\t      {\n@@ -9579,8 +9580,9 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\t      }\n \t\t    if (quals)\n \t\t      {\n-\t\t\terror (\"constructors cannot be declared `const' or `volatile'\");\n-\t\t\treturn void_type_node;\n+\t\t\tcp_error (\"constructors may not be `%s'\",\n+\t\t\t\t  IDENTIFIER_POINTER (TREE_VALUE (quals)));\n+\t\t\tquals = NULL_TREE;\n  \t\t      }\n \t\t    {\n \t\t      RID_BIT_TYPE tmp_bits;\n@@ -9638,24 +9640,22 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \n \t    arg_types = grokparms (inner_parms, funcdecl_p ? funcdef_flag : 0);\n \n-\t    if (declarator)\n+\t    if (declarator && flags == DTOR_FLAG)\n \t      {\n-\t\t/* Get past destructors, etc.\n-\t\t   We know we have one because FLAGS will be non-zero.\n-\n-\t\t   Complain about improper parameter lists here.  */\n+\t\t/* A destructor declared in the body of a class will\n+\t\t   be represented as a BIT_NOT_EXPR.  But, we just\n+\t\t   want the underlying IDENTIFIER.  */\n \t\tif (TREE_CODE (declarator) == BIT_NOT_EXPR)\n+\t\t  declarator = TREE_OPERAND (declarator, 0);\n+\t\t\n+\t\tif (strict_prototype == 0 && arg_types == NULL_TREE)\n+\t\t  arg_types = void_list_node;\n+\t\telse if (arg_types == NULL_TREE\n+\t\t\t || arg_types != void_list_node)\n \t\t  {\n-\t\t    declarator = TREE_OPERAND (declarator, 0);\n-\n-\t\t    if (strict_prototype == 0 && arg_types == NULL_TREE)\n-\t\t      arg_types = void_list_node;\n-\t\t    else if (arg_types == NULL_TREE\n-\t\t\t     || arg_types != void_list_node)\n-\t\t      {\n-\t\t\terror (\"destructors cannot be specified with parameters\");\n-\t\t\targ_types = void_list_node;\n-\t\t      }\n+\t\t    cp_error (\"destructors may not have parameters\");\n+\t\t    arg_types = void_list_node;\n+\t\t    last_function_parms = NULL_TREE;\n \t\t  }\n \t      }\n "}, {"sha": "34d2c93617fa879b12da693ebe50dbed5f7f69ee", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f70a8465393270fe9bafe6b15fb8547e54c2e8c/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f70a8465393270fe9bafe6b15fb8547e54c2e8c/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=4f70a8465393270fe9bafe6b15fb8547e54c2e8c", "patch": "@@ -1464,9 +1464,12 @@ check_classfn (ctype, function)\n \t\t  fndecl = OVL_CURRENT (fndecls);\n \t\t  /* The DECL_ASSEMBLER_NAME for a TEMPLATE_DECL is\n \t\t     not mangled, so the check below does not work\n-\t\t     correctly in that case.  */\n+\t\t     correctly in that case.  Since mangled destructor names\n+\t\t     do not include the type of the arguments, we\n+\t\t     can't use this short-cut for them, either.  */\n \t\t  if (TREE_CODE (function) != TEMPLATE_DECL\n \t\t      && TREE_CODE (fndecl) != TEMPLATE_DECL\n+\t\t      && !DESTRUCTOR_NAME_P (DECL_ASSEMBLER_NAME (function))\n \t\t      && (DECL_ASSEMBLER_NAME (function) \n \t\t\t  == DECL_ASSEMBLER_NAME (fndecl)))\n \t\t    return fndecl;"}, {"sha": "a2ad16dfdb3636793eecb20386418dcc670aa335", "filename": "gcc/testsuite/g++.old-deja/g++.other/dtor3.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f70a8465393270fe9bafe6b15fb8547e54c2e8c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdtor3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f70a8465393270fe9bafe6b15fb8547e54c2e8c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdtor3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdtor3.C?ref=4f70a8465393270fe9bafe6b15fb8547e54c2e8c", "patch": "@@ -0,0 +1,51 @@\n+// Build don't link:\n+\n+struct S1\n+{\n+  ~S1(int); // ERROR - destructors may not have parameters\n+};\n+\n+\n+template <class T>\n+struct S2\n+{\n+  ~S2(int); // ERROR - destructors may not have parameters\n+};\n+\n+\n+struct S3 \n+{\n+  ~S3(double) {} // ERROR - destructors may not have parameters\n+};\n+\n+\n+template <class T>\n+struct S4\n+{\n+  ~S4(double) {} // ERROR - destructors may not have parameters\n+};\n+\n+\n+struct S5\n+{\n+  ~S5(); \n+};\n+\n+S5::~S5(float) \n+{ // ERROR - destructors may not have parameters\n+}\n+\n+\n+template <class T>\n+struct S6\n+{\n+  ~S6();\n+};\n+\n+template <class T>\n+S6<T>::~S6(float)\n+{ // ERROR - destructors may not have parameters\n+}\n+\n+\n+"}, {"sha": "f23ab78256038c1c5af38dccb588a2140df34f51", "filename": "gcc/testsuite/g++.old-deja/g++.other/dtor4.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f70a8465393270fe9bafe6b15fb8547e54c2e8c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdtor4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f70a8465393270fe9bafe6b15fb8547e54c2e8c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdtor4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdtor4.C?ref=4f70a8465393270fe9bafe6b15fb8547e54c2e8c", "patch": "@@ -0,0 +1,31 @@\n+// Build don't link:\n+\n+struct S1 {\n+  ~S1(); // ERROR - candidate\n+};\n+\n+S1::~S1() const\n+{ // ERROR - prototype does not match \n+}\n+\n+\n+struct S2 {\n+  ~S2() volatile; // ERROR - destructors may not be volatile\n+};\n+\n+\n+template <class T>\n+struct S3 {\n+  ~S3(); // ERROR - candidate\n+};\n+\n+template <class T>\n+S3<T>::~S3() volatile\n+{ // ERROR - prototype does not match \n+}\n+\n+\n+template <class T>\n+struct S4 {\n+  ~S4() const; // ERROR - destructors may not be const\n+};"}]}