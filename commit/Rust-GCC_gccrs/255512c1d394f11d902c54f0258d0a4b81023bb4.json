{"sha": "255512c1d394f11d902c54f0258d0a4b81023bb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU1NTEyYzFkMzk0ZjExZDkwMmM1NGYwMjU4ZDBhNGI4MTAyM2JiNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@phydeaux.cygnus.com", "date": "1995-01-21T10:14:41Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1995-01-21T10:14:41Z"}, "message": "bool changes\n\nFrom-SVN: r8788", "tree": {"sha": "94a33dc6617ca2a2beb65949e2cc4a3222715188", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94a33dc6617ca2a2beb65949e2cc4a3222715188"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/255512c1d394f11d902c54f0258d0a4b81023bb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/255512c1d394f11d902c54f0258d0a4b81023bb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/255512c1d394f11d902c54f0258d0a4b81023bb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/255512c1d394f11d902c54f0258d0a4b81023bb4/comments", "author": null, "committer": null, "parents": [{"sha": "2aec5b7a12f06b0ec4c5b7969ad5eb02c19ce3ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aec5b7a12f06b0ec4c5b7969ad5eb02c19ce3ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aec5b7a12f06b0ec4c5b7969ad5eb02c19ce3ff"}], "stats": {"total": 60, "additions": 40, "deletions": 20}, "files": [{"sha": "7574f800e011deeea33f84635cf74bcb19e297ab", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255512c1d394f11d902c54f0258d0a4b81023bb4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255512c1d394f11d902c54f0258d0a4b81023bb4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=255512c1d394f11d902c54f0258d0a4b81023bb4", "patch": "@@ -1,3 +1,19 @@\n+Tue Jan 17 14:12:00 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n+\n+        * cvt.c (cp_convert): Just call truthvalue_conversion to convert to\n+        bool.\n+\n+Mon Jan 16 13:28:48 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n+\n+        * various: Use boolean_type_node, boolean_true_node,\n+        boolean_false_node.\n+\n+Sun Jan 15 22:17:32 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n+\n+        * decl.c (BOOL_TYPE_SIZE): Defaults to BITS_PER_WORD.\n+        (init_decl_processing): Use BOOL_TYPE_SIZE instead of CHAR_TYPE_SIZE\n+        for bool.\n+\n Fri Dec 30 12:22:29 1994  Mike Stump  <mrs@cygnus.com>\n \n \t* decl.c (n_incomplete): Bump n_incomplete up to int to match C"}, {"sha": "8a6c6ea3772bdbf42098aa3cad39f28e0b6ce61b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255512c1d394f11d902c54f0258d0a4b81023bb4/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255512c1d394f11d902c54f0258d0a4b81023bb4/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=255512c1d394f11d902c54f0258d0a4b81023bb4", "patch": "@@ -93,6 +93,10 @@ static struct stack_level *decl_stack;\n #define LONG_DOUBLE_TYPE_SIZE (BITS_PER_WORD * 2)\n #endif\n \n+#ifndef BOOL_TYPE_SIZE\n+#define BOOL_TYPE_SIZE BITS_PER_WORD\n+#endif\n+\n /* We let tm.h override the types used here, to handle trivial differences\n    such as the choice of unsigned int or long unsigned int for size_t.\n    When machines start needing nontrivial differences in the size type,\n@@ -207,7 +211,7 @@ tree int_array_type_node;\n tree wchar_array_type_node;\n \n /* The bool data type, and constants */\n-tree bool_type_node, true_node, false_node;\n+tree boolean_type_node, boolean_true_node, boolean_false_node;\n \n /* type `int ()' -- used for implicit declaration of functions.  */\n \n@@ -4378,13 +4382,13 @@ init_decl_processing ()\n   integer_three_node = build_int_2 (3, 0);\n   TREE_TYPE (integer_three_node) = integer_type_node;\n \n-  bool_type_node = make_unsigned_type (CHAR_TYPE_SIZE);\n-  TREE_SET_CODE (bool_type_node, BOOLEAN_TYPE);\n-  record_builtin_type (RID_BOOL, \"bool\", bool_type_node);\n-  false_node = build_int_2 (0, 0);\n-  TREE_TYPE (false_node) = bool_type_node;\n-  true_node = build_int_2 (1, 0);\n-  TREE_TYPE (true_node) = bool_type_node;\n+  boolean_type_node = make_unsigned_type (BOOL_TYPE_SIZE);\n+  TREE_SET_CODE (boolean_type_node, BOOLEAN_TYPE);\n+  record_builtin_type (RID_BOOL, \"bool\", boolean_type_node);\n+  boolean_false_node = build_int_2 (0, 0);\n+  TREE_TYPE (boolean_false_node) = boolean_type_node;\n+  boolean_true_node = build_int_2 (1, 0);\n+  TREE_TYPE (boolean_true_node) = boolean_type_node;\n \n   /* These are needed by stor-layout.c.  */\n   size_zero_node = size_int (0);"}, {"sha": "345e31b4bcb0e1d42ef6941785b06b2d872c1004", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255512c1d394f11d902c54f0258d0a4b81023bb4/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255512c1d394f11d902c54f0258d0a4b81023bb4/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=255512c1d394f11d902c54f0258d0a4b81023bb4", "patch": "@@ -937,7 +937,7 @@ paren_expr_or_null:\n \t\t\t cond_stmt_keyword);\n \t\t  $$ = integer_zero_node; }\n \t| '(' expr ')'\n-\t\t{ $$ = build1 (CLEANUP_POINT_EXPR, bool_type_node, \n+\t\t{ $$ = build1 (CLEANUP_POINT_EXPR, boolean_type_node, \n \t\t\t       bool_truthvalue_conversion ($2)); }\n \t;\n \n@@ -947,15 +947,15 @@ paren_cond_or_null:\n \t\t\t cond_stmt_keyword);\n \t\t  $$ = integer_zero_node; }\n \t| '(' condition ')'\n-\t\t{ $$ = build1 (CLEANUP_POINT_EXPR, bool_type_node, \n+\t\t{ $$ = build1 (CLEANUP_POINT_EXPR, boolean_type_node, \n \t\t\t       bool_truthvalue_conversion ($2)); }\n \t;\n \n xcond:\n \t/* empty */\n \t\t{ $$ = NULL_TREE; }\n \t| condition\n-\t\t{ $$ = build1 (CLEANUP_POINT_EXPR, bool_type_node, \n+\t\t{ $$ = build1 (CLEANUP_POINT_EXPR, boolean_type_node, \n \t\t\t       bool_truthvalue_conversion ($$)); }\n \t| error\n \t\t{ $$ = NULL_TREE; }\n@@ -1664,9 +1664,9 @@ delete:\t  DELETE\n \n boolean.literal:\n \t  CXX_TRUE\n-\t\t{ $$ = true_node; }\n+\t\t{ $$ = boolean_true_node; }\n \t| CXX_FALSE\n-\t\t{ $$ = false_node; }\n+\t\t{ $$ = boolean_false_node; }\n \t;\n \n /* Produces a STRING_CST with perhaps more STRING_CSTs chained onto it.  */"}, {"sha": "60cb4f438f4c48d2f51029d1d3d5afff81cce18f", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255512c1d394f11d902c54f0258d0a4b81023bb4/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255512c1d394f11d902c54f0258d0a4b81023bb4/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=255512c1d394f11d902c54f0258d0a4b81023bb4", "patch": "@@ -2740,7 +2740,7 @@ build_binary_op (code, arg1, arg2, convert_p)\n \t  \n \t  types[0] = type1; types[1] = type2;\n \t  if (code == TRUTH_ANDIF_EXPR || code == TRUTH_ORIF_EXPR)\n-\t    try = build_type_conversion (code, bool_type_node,\n+\t    try = build_type_conversion (code, boolean_type_node,\n \t\t\t\t\t args[convert_index], 1);\n \t  else\n \t    {\n@@ -2975,7 +2975,7 @@ build_binary_op_nodefault (code, orig_op0, orig_op1, error_code)\n     case TRUTH_ORIF_EXPR:\n     case TRUTH_AND_EXPR:\n     case TRUTH_OR_EXPR:\n-      result_type = bool_type_node;\n+      result_type = boolean_type_node;\n       op0 = bool_truthvalue_conversion (op0);\n       op1 = bool_truthvalue_conversion (op1);\n       converted = 1;\n@@ -3059,7 +3059,7 @@ build_binary_op_nodefault (code, orig_op0, orig_op1, error_code)\n \n     case EQ_EXPR:\n     case NE_EXPR:\n-      result_type = bool_type_node;\n+      result_type = boolean_type_node;\n       converted = 1;\n       if ((code0 == INTEGER_TYPE || code0 == REAL_TYPE)\n \t  && (code1 == INTEGER_TYPE || code1 == REAL_TYPE))\n@@ -3251,7 +3251,7 @@ build_binary_op_nodefault (code, orig_op0, orig_op1, error_code)\n     case GE_EXPR:\n     case LT_EXPR:\n     case GT_EXPR:\n-      result_type = bool_type_node;\n+      result_type = boolean_type_node;\n       if ((code0 == INTEGER_TYPE || code0 == REAL_TYPE)\n \t   && (code1 == INTEGER_TYPE || code1 == REAL_TYPE))\n \tshort_compare = 1;\n@@ -3437,8 +3437,8 @@ build_binary_op_nodefault (code, orig_op0, orig_op1, error_code)\n \t  tree val \n \t    = shorten_compare (&xop0, &xop1, &xresult_type, &xresultcode);\n \t  if (val != 0)\n-\t    return convert (bool_type_node, val);\n-\t  op0 = xop0, op1 = xop1, result_type = bool_type_node;\n+\t    return convert (boolean_type_node, val);\n+\t  op0 = xop0, op1 = xop1, result_type = boolean_type_node;\n \t  resultcode = xresultcode;\n \t}\n \n@@ -3776,7 +3776,7 @@ bool_truthvalue_conversion (expr)\n   /* We really want to preform the optimizations in truthvalue_conversion\n      but, not this way. */\n   /* expr = truthvalue_conversion (expr); */\n-  return convert (bool_type_node, expr);\n+  return convert (boolean_type_node, expr);\n }\n \n /* C++: Must handle pointers to members."}]}