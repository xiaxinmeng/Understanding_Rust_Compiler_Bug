{"sha": "70fc129d86eeeea6f3f04892cec75119ba97b86e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBmYzEyOWQ4NmVlZWVhNmYzZjA0ODkyY2VjNzUxMTliYTk3Yjg2ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-09-03T13:28:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-09-03T13:28:25Z"}, "message": "re PR tree-optimization/87197 (ICE in is_gimple_reg_type at gimple-expr.h:75 since r264021)\n\n2018-09-03  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/87197\n\t* tree-ssa-sccvn.c (vn_nary_build_or_lookup_1): Mark the new def\n\tvisited.  CSE the VN_INFO hashtable lookup.\n\n\t* gcc.dg/torture/pr87197.c: New testcase.\n\n\tPR tree-optimization/87169\n\t* tree-ssa-sccvn.c (do_rpo_vn): When marking loops for not\n\titerating make sure there's no extra backedges from irreducible\n\tregions feeding the header.  Mark the destination block\n\texecutable.\n\n\t* gcc.dg/torture/pr87169.c: New testcase.\n\nFrom-SVN: r264057", "tree": {"sha": "1563fe500213e173d780fd3a853c30d2ad90eb75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1563fe500213e173d780fd3a853c30d2ad90eb75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70fc129d86eeeea6f3f04892cec75119ba97b86e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70fc129d86eeeea6f3f04892cec75119ba97b86e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70fc129d86eeeea6f3f04892cec75119ba97b86e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70fc129d86eeeea6f3f04892cec75119ba97b86e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c7a8f93d7b2132ed163a2d80fc06b36792042893", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7a8f93d7b2132ed163a2d80fc06b36792042893", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7a8f93d7b2132ed163a2d80fc06b36792042893"}], "stats": {"total": 126, "additions": 120, "deletions": 6}, "files": [{"sha": "cd3c0e8178fc3ec1c2c754d27ccb5fdd9142c0d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70fc129d86eeeea6f3f04892cec75119ba97b86e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70fc129d86eeeea6f3f04892cec75119ba97b86e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70fc129d86eeeea6f3f04892cec75119ba97b86e", "patch": "@@ -1,3 +1,15 @@\n+2018-09-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/87197\n+\t* tree-ssa-sccvn.c (vn_nary_build_or_lookup_1): Mark the new def\n+\tvisited.  CSE the VN_INFO hashtable lookup.\n+\n+\tPR tree-optimization/87169\n+\t* tree-ssa-sccvn.c (do_rpo_vn): When marking loops for not\n+\titerating make sure there's no extra backedges from irreducible\n+\tregions feeding the header.  Mark the destination block\n+\texecutable.\n+\n 2018-09-03  Martin Liska  <mliska@suse.cz>\n \n \tPR driver/83193"}, {"sha": "bd06f66b3d6897d485279882d6a15b6efaa17fa1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70fc129d86eeeea6f3f04892cec75119ba97b86e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70fc129d86eeeea6f3f04892cec75119ba97b86e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=70fc129d86eeeea6f3f04892cec75119ba97b86e", "patch": "@@ -1,3 +1,11 @@\n+2018-09-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/87197\n+\t* gcc.dg/torture/pr87197.c: New testcase.\n+\n+\tPR tree-optimization/87169\n+\t* gcc.dg/torture/pr87169.c: New testcase.\n+\n 2018-09-03  Martin Liska  <mliska@suse.cz>\n \n \tPR driver/83193"}, {"sha": "ed878e0c6b9561240d18d8c4407861251c181cf8", "filename": "gcc/testsuite/gcc.dg/torture/pr87169.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70fc129d86eeeea6f3f04892cec75119ba97b86e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr87169.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70fc129d86eeeea6f3f04892cec75119ba97b86e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr87169.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr87169.c?ref=70fc129d86eeeea6f3f04892cec75119ba97b86e", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"--param rpo-vn-max-loop-depth=7\" } */\n+\n+int a, b, c;\n+\n+int main ()\n+{ \n+  int d;\n+  b = 1;\n+L1:\n+  for (; b > 1;)\n+    goto L2;\n+    { \n+      int e[1];\n+L3:;\n+    }\n+L2:\n+  while (a)\n+    { \n+      d--;\n+      goto L1;\n+    }\n+  while (c)\n+    { \n+      if (a)\n+\tgoto L3;\n+      if (a)\n+\tbreak;\n+      if (a)\n+\tgoto L2;\n+      while (c)\n+\twhile (c)\n+\t  while (c)\n+\t    while (c)\n+\t      while (c)\n+\t\twhile (c)\n+\t\t  while (c)\n+\t\t    ;\n+    }\n+  return 0;\n+}"}, {"sha": "4c702242cfaa68a5753fbcaeddb7130aa34598bc", "filename": "gcc/testsuite/gcc.dg/torture/pr87197.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70fc129d86eeeea6f3f04892cec75119ba97b86e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr87197.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70fc129d86eeeea6f3f04892cec75119ba97b86e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr87197.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr87197.c?ref=70fc129d86eeeea6f3f04892cec75119ba97b86e", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+\n+int a, c, e, f, g;\n+void\n+h (int i)\n+{\n+  a = i;\n+}\n+void\n+j (char *i, long k)\n+{\n+  while (k--)\n+    c = *i++;\n+}\n+void\n+l (unsigned char *i, long k)\n+{\n+  unsigned char *b = i + k;\n+  while (i < b)\n+    {\n+      h (*i);\n+      i++;\n+    }\n+}\n+void\n+m ()\n+{\n+  while (e)\n+    {\n+      float d = g;\n+      l ((char *) &d, sizeof (g));\n+      if (f)\n+\tj ((char *) &d, sizeof (g));\n+    }\n+}"}, {"sha": "26d093ea05ba6665df4252ac01032a00b52f7542", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70fc129d86eeeea6f3f04892cec75119ba97b86e/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70fc129d86eeeea6f3f04892cec75119ba97b86e/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=70fc129d86eeeea6f3f04892cec75119ba97b86e", "patch": "@@ -1783,11 +1783,13 @@ vn_nary_build_or_lookup_1 (gimple_match_op *res_op, bool insert)\n       /* The expression is not yet available, value-number lhs to\n \t the new SSA_NAME we created.  */\n       /* Initialize value-number information properly.  */\n-      VN_INFO (result)->valnum = result;\n-      VN_INFO (result)->value_id = get_next_value_id ();\n+      vn_ssa_aux_t result_info = VN_INFO (result);\n+      result_info->valnum = result;\n+      result_info->value_id = get_next_value_id ();\n+      result_info->visited = 1;\n       gimple_seq_add_stmt_without_update (&VN_INFO (result)->expr,\n \t\t\t\t\t  new_stmt);\n-      VN_INFO (result)->needs_insertion = true;\n+      result_info->needs_insertion = true;\n       /* ???  PRE phi-translation inserts NARYs without corresponding\n          SSA name result.  Re-use those but set their result according\n \t to the stmt we just built.  */\n@@ -1810,7 +1812,7 @@ vn_nary_build_or_lookup_1 (gimple_match_op *res_op, bool insert)\n \t  unsigned int length = vn_nary_length_from_stmt (new_stmt);\n \t  vn_nary_op_t vno1\n \t    = alloc_vn_nary_op_noinit (length, &vn_tables_insert_obstack);\n-\t  vno1->value_id = VN_INFO (result)->value_id;\n+\t  vno1->value_id = result_info->value_id;\n \t  vno1->length = length;\n \t  vno1->predicated_values = 0;\n \t  vno1->u.result = result;\n@@ -6360,12 +6362,28 @@ do_rpo_vn (function *fn, edge entry, bitmap exit_bbs,\n \t       i < loop_depth (loop) - max_depth; ++i)\n \t    {\n \t      basic_block header = superloop_at_depth (loop, i)->header;\n-\t      rpo_state[bb_to_rpo[header->index]].iterate = false;\n+\t      bool non_latch_backedge = false;\n \t      edge e;\n \t      edge_iterator ei;\n \t      FOR_EACH_EDGE (e, ei, header->preds)\n \t\tif (e->flags & EDGE_DFS_BACK)\n-\t\t  e->flags |= EDGE_EXECUTABLE;\n+\t\t  {\n+\t\t    e->flags |= EDGE_EXECUTABLE;\n+\t\t    e->dest->flags |= BB_EXECUTABLE;\n+\t\t    /* There can be a non-latch backedge into the header\n+\t\t       which is part of an outer irreducible region.  We\n+\t\t       cannot avoid iterating this block then.  */\n+\t\t    if (!dominated_by_p (CDI_DOMINATORS,\n+\t\t\t\t\t e->src, e->dest))\n+\t\t      {\n+\t\t\tif (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t\t  fprintf (dump_file, \"non-latch backedge %d -> %d \"\n+\t\t\t\t   \"forces iteration of loop %d\\n\",\n+\t\t\t\t   e->src->index, e->dest->index, loop->num);\n+\t\t\tnon_latch_backedge = true;\n+\t\t      }\n+\t\t  }\n+\t      rpo_state[bb_to_rpo[header->index]].iterate = non_latch_backedge;\n \t    }\n     }\n "}]}