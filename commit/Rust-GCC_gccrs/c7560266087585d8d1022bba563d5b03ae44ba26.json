{"sha": "c7560266087585d8d1022bba563d5b03ae44ba26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc1NjAyNjYwODc1ODVkOGQxMDIyYmJhNTYzZDViMDNhZTQ0YmEyNg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-10-20T20:14:05Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-10-20T20:14:05Z"}, "message": "2003-10-20  Michael Koch  <konqueror@gmx.de>\n\n\t* java/text/RuleBasedCollator.java\n\t(RuleBasedCollator): Check rules not empty, fixed search in already\n\texisting collation elements.\n\t(is_special): Removed common whitespace characters.\n\t(text_argument): Dont return on whitespaces, add characters between\n\ttwo ' to string buffer.\n\nFrom-SVN: r72716", "tree": {"sha": "e08b8043d06910a0ac23827ab4aba2e98ca0026a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e08b8043d06910a0ac23827ab4aba2e98ca0026a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7560266087585d8d1022bba563d5b03ae44ba26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7560266087585d8d1022bba563d5b03ae44ba26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7560266087585d8d1022bba563d5b03ae44ba26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7560266087585d8d1022bba563d5b03ae44ba26/comments", "author": null, "committer": null, "parents": [{"sha": "d15f01e3d946722d9db38c949d0a0d27644c9b60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d15f01e3d946722d9db38c949d0a0d27644c9b60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d15f01e3d946722d9db38c949d0a0d27644c9b60"}], "stats": {"total": 50, "additions": 39, "deletions": 11}, "files": [{"sha": "e67710c9d92f35abd1575184127578601e1641ff", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7560266087585d8d1022bba563d5b03ae44ba26/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7560266087585d8d1022bba563d5b03ae44ba26/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=c7560266087585d8d1022bba563d5b03ae44ba26", "patch": "@@ -1,3 +1,12 @@\n+2003-10-20  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/text/RuleBasedCollator.java\n+\t(RuleBasedCollator): Check rules not empty, fixed search in already\n+\texisting collation elements.\n+\t(is_special): Removed common whitespace characters.\n+\t(text_argument): Dont return on whitespaces, add characters between\n+\ttwo ' to string buffer.\n+\n 2003-10-18  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/net/protocol/file/Connection.java,"}, {"sha": "275075248763c692353b6902d546f804a574252a", "filename": "libjava/java/text/RuleBasedCollator.java", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7560266087585d8d1022bba563d5b03ae44ba26/libjava%2Fjava%2Ftext%2FRuleBasedCollator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7560266087585d8d1022bba563d5b03ae44ba26/libjava%2Fjava%2Ftext%2FRuleBasedCollator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FRuleBasedCollator.java?ref=c7560266087585d8d1022bba563d5b03ae44ba26", "patch": "@@ -180,6 +180,9 @@ public class RuleBasedCollator extends Collator\n    */\n   public RuleBasedCollator (String rules) throws ParseException\n   {\n+    if (rules.equals (\"\"))\n+      throw new ParseException (\"empty rule set\", 0);\n+    \n     this.rules = rules;\n     this.frenchAccents = false;\n \n@@ -225,7 +228,19 @@ public RuleBasedCollator (String rules) throws ParseException\n \tif (argument.length() == 0)\n \t  throw new ParseException (\"invalid character\", save);\n \tString arg = argument.toString();\n-\tint item_index = vec.indexOf(arg);\n+\tint item_index = -1;\n+        \n+        for (int j = 0; j < vec.size(); ++j)\n+          {\n+            CollationElement e = (CollationElement) vec.elementAt (j);\n+\n+            if (arg.equals (e.key))\n+              {\n+                item_index = j;\n+                break;\n+              }\n+          }\n+\t\n \tif (c != '&')\n \t  {\n \t    // If the argument already appears in the vector, then we\n@@ -535,8 +550,7 @@ public int hashCode()\n   private final boolean is_special (char c)\n   {\n     // Rules from JCL book.\n-    return ((c >= 0x0009 && c <= 0x000d)\n-\t    || (c >= 0x0020 && c <= 0x002f)\n+    return ((c >= 0x0021 && c <= 0x002f)\n \t    || (c >= 0x003a && c <= 0x0040)\n \t    || (c >= 0x005b && c <= 0x0060)\n \t    || (c >= 0x007b && c <= 0x007e));\n@@ -549,15 +563,20 @@ private final int text_argument (String rules, int index,\n     int len = rules.length();\n     while (index < len)\n       {\n-\tchar c = rules.charAt(index);\n-\tif (c == '\\'' && index + 2 < len\n-\t    && rules.charAt(index + 2) == '\\''\n-\t    && is_special (rules.charAt(index + 1)))\n-\t  index += 2;\n-\telse if (is_special (c) || Character.isWhitespace(c))\n+\tchar c = rules.charAt (index);\n+\tif (c == '\\''\n+            && index + 2 < len\n+\t    && rules.charAt (index + 2) == '\\'')\n+          {\n+            result.append (rules.charAt (index + 1));\n+            index += 2;\n+          }\n+\telse if (is_special (c))\n \t  return index;\n-\tresult.append(c);\n-\t++index;\n+        else if (!Character.isWhitespace (c))\n+          result.append (c);\n+        \n+        ++index;\n       }\n     return index;\n   }"}]}