{"sha": "fcf1b822b45416e106c5496c9f13506f543a6082", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNmMWI4MjJiNDU0MTZlMTA2YzU0OTZjOWYxMzUwNmY1NDNhNjA4Mg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-09-01T15:10:52Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-09-01T15:10:52Z"}, "message": "expr.c (clear_storage): Don't use emit_move_insn unless either BLKmode or proper size.\n\n\t* expr.c (clear_storage): Don't use emit_move_insn unless\n\teither BLKmode or proper size.\n\t(store_constructor): Don't call clear_storage if REG of wrong size.\n\nFrom-SVN: r36101", "tree": {"sha": "f870792eadf7ea7ef5ebb149b9f2b0048b2a407c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f870792eadf7ea7ef5ebb149b9f2b0048b2a407c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcf1b822b45416e106c5496c9f13506f543a6082", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcf1b822b45416e106c5496c9f13506f543a6082", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcf1b822b45416e106c5496c9f13506f543a6082", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcf1b822b45416e106c5496c9f13506f543a6082/comments", "author": null, "committer": null, "parents": [{"sha": "ad17a40dcec76fcb2746f6c6d9e3b5071e04e004", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad17a40dcec76fcb2746f6c6d9e3b5071e04e004", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad17a40dcec76fcb2746f6c6d9e3b5071e04e004"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "3c62375d3f1a138bb31bfad48bfdf4f51640add1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcf1b822b45416e106c5496c9f13506f543a6082/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcf1b822b45416e106c5496c9f13506f543a6082/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fcf1b822b45416e106c5496c9f13506f543a6082", "patch": "@@ -1,5 +1,9 @@\n Fri Sep  1 10:59:47 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* expr.c (clear_storage): Don't use emit_move_insn unless\n+\teither BLKmode or proper size.\n+\t(store_constructor): Don't call clear_storage if REG of wrong size.\n+\n \t* flow.c (init_propagate_block_info): Don't mark frame dead at end\n \tof function if returns wiht stack pointer depressed.\n "}, {"sha": "9c4237bb43d5cb7b06c50bda1ca207cc670941d3", "filename": "gcc/expr.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcf1b822b45416e106c5496c9f13506f543a6082/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcf1b822b45416e106c5496c9f13506f543a6082/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=fcf1b822b45416e106c5496c9f13506f543a6082", "patch": "@@ -2392,7 +2392,13 @@ clear_storage (object, size, align)\n #endif\n   rtx retval = 0;\n \n-  if (GET_MODE (object) == BLKmode)\n+  /* If OBJECT is not BLKmode and SIZE is the same size as its mode,\n+     just move a zero.  Otherwise, do this a piece at a time.  */\n+  if (GET_MODE (object) != BLKmode\n+      && GET_CODE (size) == CONST_INT\n+      && GET_MODE_SIZE (GET_MODE (object)) == INTVAL (size))\n+    emit_move_insn (object, CONST0_RTX (GET_MODE (object)));\n+  else\n     {\n       object = protect_from_queue (object, 1);\n       size = protect_from_queue (size, 0);\n@@ -2544,8 +2550,6 @@ clear_storage (object, size, align)\n #endif\n \t}\n     }\n-  else\n-    emit_move_insn (object, CONST0_RTX (GET_MODE (object)));\n \n   return retval;\n }\n@@ -4263,11 +4267,15 @@ store_constructor (exp, target, align, cleared, size)\n \n       /* If the constructor has fewer fields than the structure\n \t or if we are initializing the structure to mostly zeros,\n-\t clear the whole structure first.  */\n+\t clear the whole structure first.  Don't do this is TARGET is\n+\t register whose mode size isn't equal to SIZE since clear_storage\n+\t can't handle this case.  */\n       else if (size > 0\n \t       && ((list_length (CONSTRUCTOR_ELTS (exp))\n \t\t    != fields_length (type))\n-\t\t   || mostly_zeros_p (exp)))\n+\t\t   || mostly_zeros_p (exp))\n+\t       && (GET_CODE (target) != REG\n+\t\t   || GET_MODE_SIZE (GET_MODE (target)) == size))\n \t{\n \t  if (! cleared)\n \t    clear_storage (target, GEN_INT (size), align);"}]}