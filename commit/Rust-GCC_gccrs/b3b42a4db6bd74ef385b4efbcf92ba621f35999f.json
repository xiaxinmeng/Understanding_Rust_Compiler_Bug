{"sha": "b3b42a4db6bd74ef385b4efbcf92ba621f35999f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNiNDJhNGRiNmJkNzRlZjM4NWI0ZWZiY2Y5MmJhNjIxZjM1OTk5Zg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-04-21T19:32:10Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-04-21T19:32:10Z"}, "message": "rtl.c: Use NOTE_INSN_REPEATED_LINE_NUMBER and NOTE_INSN_RANGE_BEG.\n\n\t* rtl.c: Use NOTE_INSN_REPEATED_LINE_NUMBER and NOTE_INSN_RANGE_BEG.\n\t* rtl.h: Likewise.\n\t* rtl.def: Update comment.\n\t* function.c (expand_function): Use NOTE_INSN_REPEATED_LINE_NUMBER.\n\t* integrate.c (expand_inline_function): Likewise.\n\t* profile.c (branch_prob): Likewise.\n\t* ggc-common.c (ggc_mark_rtx_children): Use NOTE_INSN_RANGE_BEG.\n\t* print-rtl.c (print_rtx): Likewise.\n\t* haifa-sched.c (sched_analyze, unlink_other_notes): Likewise.\n\t(reemit_notes): Likewise; also use enum insn_note.\n\nFrom-SVN: r33314", "tree": {"sha": "9ad1235a2087bdb5a1b90471613c6954a032f6d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ad1235a2087bdb5a1b90471613c6954a032f6d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3b42a4db6bd74ef385b4efbcf92ba621f35999f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3b42a4db6bd74ef385b4efbcf92ba621f35999f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3b42a4db6bd74ef385b4efbcf92ba621f35999f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3b42a4db6bd74ef385b4efbcf92ba621f35999f/comments", "author": null, "committer": null, "parents": [{"sha": "c5e1237fde9577950fa7854a30da98d75703aa36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5e1237fde9577950fa7854a30da98d75703aa36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5e1237fde9577950fa7854a30da98d75703aa36"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "de5297968aabb6f9177f0fa536885fdcbae03e90", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b42a4db6bd74ef385b4efbcf92ba621f35999f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b42a4db6bd74ef385b4efbcf92ba621f35999f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3b42a4db6bd74ef385b4efbcf92ba621f35999f", "patch": "@@ -1,5 +1,16 @@\n Fri Apr 21 13:30:26 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* rtl.c: Use NOTE_INSN_REPEATED_LINE_NUMBER and NOTE_INSN_RANGE_BEG.\n+\t* rtl.h: Likewise.\n+\t* rtl.def: Update comment.\n+\t* function.c (expand_function): Use NOTE_INSN_REPEATED_LINE_NUMBER.\n+\t* integrate.c (expand_inline_function): Likewise.\n+\t* profile.c (branch_prob): Likewise.\n+\t* ggc-common.c (ggc_mark_rtx_children): Use NOTE_INSN_RANGE_BEG.\n+\t* print-rtl.c (print_rtx): Likewise.\n+\t* haifa-sched.c (sched_analyze, unlink_other_notes): Likewise.\n+\t(reemit_notes): Likewise; also use enum insn_note.\n+\n \t* stor-layout.c (layout_decl): Only set DECL_MODE if not already set.\n \t(place_field): Properly compute know and actual alignment.\n "}, {"sha": "5aee650fce20f8483696a5996393d645ccfc1bbd", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b42a4db6bd74ef385b4efbcf92ba621f35999f/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b42a4db6bd74ef385b4efbcf92ba621f35999f/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=b3b42a4db6bd74ef385b4efbcf92ba621f35999f", "patch": "@@ -6533,7 +6533,7 @@ expand_function_end (filename, line, end_bindings)\n      already exists a copy of this note somewhere above.  This line number\n      note is still needed for debugging though, so we can't delete it.  */\n   if (flag_test_coverage)\n-    emit_note (NULL_PTR, NOTE_REPEATED_LINE_NUMBER);\n+    emit_note (NULL_PTR, NOTE_INSN_REPEATED_LINE_NUMBER);\n \n   /* Output a linenumber for the end of the function.\n      SDB depends on this.  */"}, {"sha": "2dca6aa9413812a0070431b718a63003c266b64c", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b42a4db6bd74ef385b4efbcf92ba621f35999f/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b42a4db6bd74ef385b4efbcf92ba621f35999f/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=b3b42a4db6bd74ef385b4efbcf92ba621f35999f", "patch": "@@ -244,7 +244,7 @@ ggc_mark_rtx_children (r)\n \tcase NOTE:\n \t  switch (NOTE_LINE_NUMBER (r))\n \t    {\n-\t    case NOTE_INSN_RANGE_START:\n+\t    case NOTE_INSN_RANGE_BEG:\n \t    case NOTE_INSN_RANGE_END:\n \t    case NOTE_INSN_LIVE:\n \t      ggc_mark_rtx (NOTE_RANGE_INFO (r));"}, {"sha": "3feecdd4631c4944e70fa75f7e633873c0a7ef4a", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b42a4db6bd74ef385b4efbcf92ba621f35999f/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b42a4db6bd74ef385b4efbcf92ba621f35999f/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=b3b42a4db6bd74ef385b4efbcf92ba621f35999f", "patch": "@@ -3939,7 +3939,7 @@ sched_analyze (deps, head, tail)\n \t ??? Actually, the reemit_notes just say what is done, not why.  */\n \n       else if (GET_CODE (insn) == NOTE\n-\t       && (NOTE_LINE_NUMBER (insn) == NOTE_INSN_RANGE_START\n+\t       && (NOTE_LINE_NUMBER (insn) == NOTE_INSN_RANGE_BEG\n \t\t   || NOTE_LINE_NUMBER (insn) == NOTE_INSN_RANGE_END))\n \t{\n \t  loop_notes = alloc_EXPR_LIST (REG_SAVE_NOTE, NOTE_RANGE_INFO (insn),\n@@ -4277,7 +4277,7 @@ unlink_other_notes (insn, tail)\n       if (NOTE_LINE_NUMBER (insn) != NOTE_INSN_SETJMP\n \t  && NOTE_LINE_NUMBER (insn) != NOTE_INSN_LOOP_BEG\n \t  && NOTE_LINE_NUMBER (insn) != NOTE_INSN_LOOP_END\n-\t  && NOTE_LINE_NUMBER (insn) != NOTE_INSN_RANGE_START\n+\t  && NOTE_LINE_NUMBER (insn) != NOTE_INSN_RANGE_BEG\n \t  && NOTE_LINE_NUMBER (insn) != NOTE_INSN_RANGE_END\n \t  && NOTE_LINE_NUMBER (insn) != NOTE_INSN_EH_REGION_BEG\n \t  && NOTE_LINE_NUMBER (insn) != NOTE_INSN_EH_REGION_END)\n@@ -5632,15 +5632,16 @@ reemit_notes (insn, last)\n     {\n       if (REG_NOTE_KIND (note) == REG_SAVE_NOTE)\n \t{\n-\t  int note_type = INTVAL (XEXP (note, 0));\n+\t  enum insn_note note_type = INTVAL (XEXP (note, 0));\n+\n \t  if (note_type == NOTE_INSN_SETJMP)\n \t    {\n \t      retval = emit_note_after (NOTE_INSN_SETJMP, insn);\n \t      CONST_CALL_P (retval) = CONST_CALL_P (note);\n \t      remove_note (insn, note);\n \t      note = XEXP (note, 1);\n \t    }\n-\t  else if (note_type == NOTE_INSN_RANGE_START\n+\t  else if (note_type == NOTE_INSN_RANGE_BEG\n                    || note_type == NOTE_INSN_RANGE_END)\n \t    {\n \t      last = emit_note_before (note_type, last);"}, {"sha": "cfcee1b09a865c9b8c0fa8310e7701e9fbe07a67", "filename": "gcc/integrate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b42a4db6bd74ef385b4efbcf92ba621f35999f/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b42a4db6bd74ef385b4efbcf92ba621f35999f/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=b3b42a4db6bd74ef385b4efbcf92ba621f35999f", "patch": "@@ -1156,7 +1156,7 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n      This line number note is still needed for debugging though, so we can't\n      delete it.  */\n   if (flag_test_coverage)\n-    emit_note (0, NOTE_REPEATED_LINE_NUMBER);\n+    emit_note (0, NOTE_INSN_REPEATED_LINE_NUMBER);\n \n   emit_line_note (input_filename, lineno);\n "}, {"sha": "140ac36bdb74a3a0f9b703f4857c8f895b462244", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b42a4db6bd74ef385b4efbcf92ba621f35999f/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b42a4db6bd74ef385b4efbcf92ba621f35999f/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=b3b42a4db6bd74ef385b4efbcf92ba621f35999f", "patch": "@@ -184,7 +184,7 @@ print_rtx (in_rtx)\n \t\tsawclose = 1;\n \t\tbreak;\n \n-\t      case NOTE_INSN_RANGE_START:\n+\t      case NOTE_INSN_RANGE_BEG:\n \t      case NOTE_INSN_RANGE_END:\n \t      case NOTE_INSN_LIVE:\n \t\tindent += 2;"}, {"sha": "d8e2d62e62a8ad8b177275a2d66d0ea18f87a046", "filename": "gcc/profile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b42a4db6bd74ef385b4efbcf92ba621f35999f/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b42a4db6bd74ef385b4efbcf92ba621f35999f/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=b3b42a4db6bd74ef385b4efbcf92ba621f35999f", "patch": "@@ -819,7 +819,7 @@ branch_prob (f, dump_file)\n \t    /* Must ignore the line number notes that immediately follow the\n \t       end of an inline function to avoid counting it twice.  There\n \t       is a note before the call, and one after the call.  */\n-\t    if (NOTE_LINE_NUMBER (insn) == NOTE_REPEATED_LINE_NUMBER)\n+\t    if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_REPEATED_LINE_NUMBER)\n \t      ignore_next_note = 1;\n \t    else if (NOTE_LINE_NUMBER (insn) > 0)\n \t      {"}, {"sha": "84a2df0e20aa3545e7f994d0bea740ecf2af6529", "filename": "gcc/rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b42a4db6bd74ef385b4efbcf92ba621f35999f/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b42a4db6bd74ef385b4efbcf92ba621f35999f/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=b3b42a4db6bd74ef385b4efbcf92ba621f35999f", "patch": "@@ -245,7 +245,7 @@ const char * const note_insn_name[NOTE_INSN_MAX - NOTE_INSN_BIAS] =\n   \"NOTE_INSN_PROLOGUE_END\", \"NOTE_INSN_EPILOGUE_BEG\",\n   \"NOTE_INSN_DELETED_LABEL\", \"NOTE_INSN_FUNCTION_BEG\",\n   \"NOTE_INSN_EH_REGION_BEG\", \"NOTE_INSN_EH_REGION_END\",\n-  \"NOTE_REPEATED_LINE_NUMBER\", \"NOTE_INSN_RANGE_START\",\n+  \"NOTE_INSN_REPEATED_LINE_NUMBER\", \"NOTE_INSN_RANGE_BEG\",\n   \"NOTE_INSN_RANGE_END\", \"NOTE_INSN_LIVE\",\n   \"NOTE_INSN_BASIC_BLOCK\", \"NOTE_INSN_EXPECTED_VALUE\"\n };"}, {"sha": "30c5518e4df5bc5f8103ce15e65c5cc24c8bf24a", "filename": "gcc/rtl.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b42a4db6bd74ef385b4efbcf92ba621f35999f/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b42a4db6bd74ef385b4efbcf92ba621f35999f/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=b3b42a4db6bd74ef385b4efbcf92ba621f35999f", "patch": "@@ -818,7 +818,7 @@ DEF_RTL_EXPR(HIGH, \"high\", \"e\", 'o')\n    of a constant expression.  */\n DEF_RTL_EXPR(LO_SUM, \"lo_sum\", \"ee\", 'o')\n \n-/* Header for range information.  Operand 0 is the NOTE_INSN_RANGE_START insn.\n+/* Header for range information.  Operand 0 is the NOTE_INSN_RANGE_BEG insn.\n    Operand 1 is the NOTE_INSN_RANGE_END insn.  Operand 2 is a vector of all of\n    the registers that can be substituted within this range.  Operand 3 is the\n    number of calls in the range.  Operand 4 is the number of insns in the"}, {"sha": "2997238c798ec4a69a520dcd2a0e77f6036200c4", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b42a4db6bd74ef385b4efbcf92ba621f35999f/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b42a4db6bd74ef385b4efbcf92ba621f35999f/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=b3b42a4db6bd74ef385b4efbcf92ba621f35999f", "patch": "@@ -636,11 +636,11 @@ enum insn_note\n   /* Generated whenever a duplicate line number note is output.  For example,\n      one is output after the end of an inline function, in order to prevent\n      the line containing the inline call from being counted twice in gcov. */\n-  NOTE_REPEATED_LINE_NUMBER,\n+  NOTE_INSN_REPEATED_LINE_NUMBER,\n \n   /* Start/end of a live range region, where pseudos allocated on the stack\n      can be allocated to temporary registers.  Uses NOTE_RANGE_INFO.  */\n-  NOTE_INSN_RANGE_START,\n+  NOTE_INSN_RANGE_BEG,\n   NOTE_INSN_RANGE_END,\n \n   /* Record which registers are currently live.  Uses NOTE_LIVE_INFO.  */"}]}