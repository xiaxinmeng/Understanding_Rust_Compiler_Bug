{"sha": "42a27024e950a9eb30f7ca3f24d32a96e0afef59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJhMjcwMjRlOTUwYTllYjMwZjdjYTNmMjRkMzJhOTZlMGFmZWY1OQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-01-06T19:11:06Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-01-06T19:11:06Z"}, "message": "stl_tree.h (_Rb_tree<>::insert_unique): Rename to _M_insert_unique.\n\n2006-01-06  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_tree.h (_Rb_tree<>::insert_unique): Rename\n\tto _M_insert_unique.\n\t(_Rb_tree<>::insert_equal): Rename to _M_insert_equal.\n\t* include/bits/stl_map.h (class map<>): Update callers.\n\t* include/bits/stl_set.h (class set<>): Likewise.\n\t* include/bits/stl_multimap.h (class multimap<>): Likewise.\n\t* include/bits/stl_multiset.h (class multiset<>): Likewise.\n\nFrom-SVN: r109424", "tree": {"sha": "44d89a405cc3509e8a22d303f287aa137a2245b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44d89a405cc3509e8a22d303f287aa137a2245b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42a27024e950a9eb30f7ca3f24d32a96e0afef59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42a27024e950a9eb30f7ca3f24d32a96e0afef59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42a27024e950a9eb30f7ca3f24d32a96e0afef59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42a27024e950a9eb30f7ca3f24d32a96e0afef59/comments", "author": null, "committer": null, "parents": [{"sha": "8479d5f1230a6ac319939335c98988f13d5353d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8479d5f1230a6ac319939335c98988f13d5353d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8479d5f1230a6ac319939335c98988f13d5353d7"}], "stats": {"total": 180, "additions": 95, "deletions": 85}, "files": [{"sha": "820d7c1583381a02d9c28b0d34e70a01251bf66f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42a27024e950a9eb30f7ca3f24d32a96e0afef59/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42a27024e950a9eb30f7ca3f24d32a96e0afef59/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=42a27024e950a9eb30f7ca3f24d32a96e0afef59", "patch": "@@ -1,3 +1,13 @@\n+2006-01-06  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_tree.h (_Rb_tree<>::insert_unique): Rename\n+\tto _M_insert_unique.\n+\t(_Rb_tree<>::insert_equal): Rename to _M_insert_equal.\n+\t* include/bits/stl_map.h (class map<>): Update callers.\n+\t* include/bits/stl_set.h (class set<>): Likewise.\n+\t* include/bits/stl_multimap.h (class multimap<>): Likewise.\n+\t* include/bits/stl_multiset.h (class multiset<>): Likewise.\n+\n 2006-01-06  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_bvector.h (vector<bool>::erase(iterator,"}, {"sha": "aad7600e6a69da1782018356f5ae7a2924584e51", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42a27024e950a9eb30f7ca3f24d32a96e0afef59/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42a27024e950a9eb30f7ca3f24d32a96e0afef59/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=42a27024e950a9eb30f7ca3f24d32a96e0afef59", "patch": "@@ -1,6 +1,6 @@\n // Map implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -186,7 +186,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       template <typename _InputIterator>\n         map(_InputIterator __first, _InputIterator __last)\n \t: _M_t(_Compare(), allocator_type())\n-        { _M_t.insert_unique(__first, __last); }\n+        { _M_t._M_insert_unique(__first, __last); }\n \n       /**\n        *  @brief  Builds a %map from a range.\n@@ -203,7 +203,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n         map(_InputIterator __first, _InputIterator __last,\n \t    const _Compare& __comp, const allocator_type& __a = allocator_type())\n \t: _M_t(__comp, __a)\n-        { _M_t.insert_unique(__first, __last); }\n+        { _M_t._M_insert_unique(__first, __last); }\n \n       // FIXME There is no dtor declared, but we should have something generated\n       // by Doxygen.  I don't know what tags to add to this paragraph to make\n@@ -393,7 +393,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n        */\n       std::pair<iterator,bool>\n       insert(const value_type& __x)\n-      { return _M_t.insert_unique(__x); }\n+      { return _M_t._M_insert_unique(__x); }\n \n       /**\n        *  @brief Attempts to insert a std::pair into the %map.\n@@ -417,7 +417,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n        */\n       iterator\n       insert(iterator position, const value_type& __x)\n-      { return _M_t.insert_unique(position, __x); }\n+      { return _M_t._M_insert_unique(position, __x); }\n \n       /**\n        *  @brief A template function that attemps to insert a range of elements.\n@@ -430,7 +430,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       template <typename _InputIterator>\n         void\n         insert(_InputIterator __first, _InputIterator __last)\n-        { _M_t.insert_unique(__first, __last); }\n+        { _M_t._M_insert_unique(__first, __last); }\n \n       /**\n        *  @brief Erases an element from a %map."}, {"sha": "41e93a2ef30e8cd6866ecb5024caca2a0210b33a", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42a27024e950a9eb30f7ca3f24d32a96e0afef59/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42a27024e950a9eb30f7ca3f24d32a96e0afef59/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=42a27024e950a9eb30f7ca3f24d32a96e0afef59", "patch": "@@ -1,6 +1,6 @@\n // Multimap implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -200,7 +200,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       template <typename _InputIterator>\n         multimap(_InputIterator __first, _InputIterator __last)\n \t: _M_t(_Compare(), allocator_type())\n-        { _M_t.insert_equal(__first, __last); }\n+        { _M_t._M_insert_equal(__first, __last); }\n \n       /**\n        *  @brief  Builds a %multimap from a range.\n@@ -218,7 +218,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n \t\t const _Compare& __comp,\n \t\t const allocator_type& __a = allocator_type())\n         : _M_t(__comp, __a)\n-        { _M_t.insert_equal(__first, __last); }\n+        { _M_t._M_insert_equal(__first, __last); }\n \n       // FIXME There is no dtor declared, but we should have something generated\n       // by Doxygen.  I don't know what tags to add to this paragraph to make\n@@ -352,7 +352,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n        */\n       iterator\n       insert(const value_type& __x)\n-      { return _M_t.insert_equal(__x); }\n+      { return _M_t._M_insert_equal(__x); }\n \n       /**\n        *  @brief Inserts a std::pair into the %multimap.\n@@ -376,7 +376,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n        */\n       iterator\n       insert(iterator __position, const value_type& __x)\n-      { return _M_t.insert_equal(__position, __x); }\n+      { return _M_t._M_insert_equal(__position, __x); }\n \n       /**\n        *  @brief A template function that attemps to insert a range of elements.\n@@ -389,7 +389,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       template <typename _InputIterator>\n         void\n         insert(_InputIterator __first, _InputIterator __last)\n-        { _M_t.insert_equal(__first, __last); }\n+        { _M_t._M_insert_equal(__first, __last); }\n \n       /**\n        *  @brief Erases an element from a %multimap."}, {"sha": "dd6e976117c6c5d7e583281e39f252115feced85", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42a27024e950a9eb30f7ca3f24d32a96e0afef59/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42a27024e950a9eb30f7ca3f24d32a96e0afef59/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=42a27024e950a9eb30f7ca3f24d32a96e0afef59", "patch": "@@ -1,6 +1,6 @@\n // Multiset implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -167,7 +167,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       template <class _InputIterator>\n         multiset(_InputIterator __first, _InputIterator __last)\n \t: _M_t(_Compare(), allocator_type())\n-        { _M_t.insert_equal(__first, __last); }\n+        { _M_t._M_insert_equal(__first, __last); }\n \n       /**\n        *  @brief  Builds a %multiset from a range.\n@@ -185,7 +185,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n \t\t const _Compare& __comp,\n \t\t const allocator_type& __a = allocator_type())\n \t: _M_t(__comp, __a)\n-        { _M_t.insert_equal(__first, __last); }\n+        { _M_t._M_insert_equal(__first, __last); }\n \n       /**\n        *  @brief  %Multiset copy constructor.\n@@ -306,7 +306,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n        */\n       iterator\n       insert(const value_type& __x)\n-      { return _M_t.insert_equal(__x); }\n+      { return _M_t._M_insert_equal(__x); }\n \n       /**\n        *  @brief Inserts an element into the %multiset.\n@@ -330,7 +330,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n        */\n       iterator\n       insert(iterator __position, const value_type& __x)\n-      { return _M_t.insert_equal(__position, __x); }\n+      { return _M_t._M_insert_equal(__position, __x); }\n \n       /**\n        *  @brief A template function that attemps to insert a range of elements.\n@@ -343,7 +343,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       template <class _InputIterator>\n         void\n         insert(_InputIterator __first, _InputIterator __last)\n-        { _M_t.insert_equal(__first, __last); }\n+        { _M_t._M_insert_equal(__first, __last); }\n \n       /**\n        *  @brief Erases an element from a %multiset."}, {"sha": "ed362f13c1ed1d3d2dfd41a75b875c94a13cb510", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42a27024e950a9eb30f7ca3f24d32a96e0afef59/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42a27024e950a9eb30f7ca3f24d32a96e0afef59/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=42a27024e950a9eb30f7ca3f24d32a96e0afef59", "patch": "@@ -1,6 +1,6 @@\n // Set implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -177,7 +177,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       template<class _InputIterator>\n         set(_InputIterator __first, _InputIterator __last)\n         : _M_t(_Compare(), allocator_type())\n-        { _M_t.insert_unique(__first, __last); }\n+        { _M_t._M_insert_unique(__first, __last); }\n \n       /**\n        *  @brief  Builds a %set from a range.\n@@ -195,7 +195,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n \t    const _Compare& __comp,\n \t    const allocator_type& __a = allocator_type())\n \t: _M_t(__comp, __a)\n-        { _M_t.insert_unique(__first, __last); }\n+        { _M_t._M_insert_unique(__first, __last); }\n \n       /**\n        *  @brief  Set copy constructor.\n@@ -318,7 +318,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       insert(const value_type& __x)\n       {\n \tstd::pair<typename _Rep_type::iterator, bool> __p =\n-\t  _M_t.insert_unique(__x);\n+\t  _M_t._M_insert_unique(__x);\n \treturn std::pair<iterator, bool>(__p.first, __p.second);\n       }\n \n@@ -343,7 +343,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n        */\n       iterator\n       insert(iterator __position, const value_type& __x)\n-      { return _M_t.insert_unique(__position, __x); }\n+      { return _M_t._M_insert_unique(__position, __x); }\n \n       /**\n        *  @brief A template function that attemps to insert a range of elements.\n@@ -356,7 +356,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       template<class _InputIterator>\n         void\n         insert(_InputIterator __first, _InputIterator __last)\n-        { _M_t.insert_unique(__first, __last); }\n+        { _M_t._M_insert_unique(__first, __last); }\n \n       /**\n        *  @brief Erases an element from a %set."}, {"sha": "031e37f44fbc2bedf756cdea4454bab5ad0aa859", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 61, "deletions": 61, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42a27024e950a9eb30f7ca3f24d32a96e0afef59/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42a27024e950a9eb30f7ca3f24d32a96e0afef59/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=42a27024e950a9eb30f7ca3f24d32a96e0afef59", "patch": "@@ -651,31 +651,31 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t);\n \n       // Insert/erase.\n-      pair<iterator,bool>\n-      insert_unique(const value_type& __x);\n+      pair<iterator, bool>\n+      _M_insert_unique(const value_type& __x);\n \n       iterator\n-      insert_equal(const value_type& __x);\n+      _M_insert_equal(const value_type& __x);\n \n       iterator\n-      insert_unique(iterator __position, const value_type& __x);\n+      _M_insert_unique(iterator __position, const value_type& __x);\n \n       const_iterator\n-      insert_unique(const_iterator __position, const value_type& __x);\n+      _M_insert_unique(const_iterator __position, const value_type& __x);\n \n       iterator\n-      insert_equal(iterator __position, const value_type& __x);\n+      _M_insert_equal(iterator __position, const value_type& __x);\n \n       const_iterator\n-      insert_equal(const_iterator __position, const value_type& __x);\n+      _M_insert_equal(const_iterator __position, const value_type& __x);\n \n       template<typename _InputIterator>\n         void\n-        insert_unique(_InputIterator __first, _InputIterator __last);\n+        _M_insert_unique(_InputIterator __first, _InputIterator __last);\n \n       template<typename _InputIterator>\n         void\n-        insert_equal(_InputIterator __first, _InputIterator __last);\n+        _M_insert_equal(_InputIterator __first, _InputIterator __last);\n \n       void\n       erase(iterator __position);\n@@ -856,7 +856,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n            typename _Compare, typename _Alloc>\n     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-    insert_equal(const _Val& __v)\n+    _M_insert_equal(const _Val& __v)\n     {\n       _Link_type __x = _M_begin();\n       _Link_type __y = _M_end();\n@@ -876,43 +876,43 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t)\n     {\n       if (_M_root() == 0)\n-      {\n-\tif (__t._M_root() != 0)\n \t{\n-\t  _M_root() = __t._M_root();\n-\t  _M_leftmost() = __t._M_leftmost();\n-\t  _M_rightmost() = __t._M_rightmost();\n-          _M_root()->_M_parent = _M_end();\n-\n-\t  __t._M_root() = 0;\n-\t  __t._M_leftmost() = __t._M_end();\n-\t  __t._M_rightmost() = __t._M_end();\n+\t  if (__t._M_root() != 0)\n+\t    {\n+\t      _M_root() = __t._M_root();\n+\t      _M_leftmost() = __t._M_leftmost();\n+\t      _M_rightmost() = __t._M_rightmost();\n+\t      _M_root()->_M_parent = _M_end();\n+\t      \n+\t      __t._M_root() = 0;\n+\t      __t._M_leftmost() = __t._M_end();\n+\t      __t._M_rightmost() = __t._M_end();\n+\t    }\n \t}\n-      }\n       else if (__t._M_root() == 0)\n-      {\n-\t__t._M_root() = _M_root();\n-\t__t._M_leftmost() = _M_leftmost();\n-\t__t._M_rightmost() = _M_rightmost();\n-        __t._M_root()->_M_parent = __t._M_end();\n-\n-\t_M_root() = 0;\n-\t_M_leftmost() = _M_end();\n-\t_M_rightmost() = _M_end();\n-      }\n+\t{\n+\t  __t._M_root() = _M_root();\n+\t  __t._M_leftmost() = _M_leftmost();\n+\t  __t._M_rightmost() = _M_rightmost();\n+\t  __t._M_root()->_M_parent = __t._M_end();\n+\t  \n+\t  _M_root() = 0;\n+\t  _M_leftmost() = _M_end();\n+\t  _M_rightmost() = _M_end();\n+\t}\n       else\n-      {\n-\tstd::swap(_M_root(),__t._M_root());\n-\tstd::swap(_M_leftmost(),__t._M_leftmost());\n-\tstd::swap(_M_rightmost(),__t._M_rightmost());\n-\n-\t_M_root()->_M_parent = _M_end();\n-\t__t._M_root()->_M_parent = __t._M_end();\n-      }\n+\t{\n+\t  std::swap(_M_root(),__t._M_root());\n+\t  std::swap(_M_leftmost(),__t._M_leftmost());\n+\t  std::swap(_M_rightmost(),__t._M_rightmost());\n+\t  \n+\t  _M_root()->_M_parent = _M_end();\n+\t  __t._M_root()->_M_parent = __t._M_end();\n+\t}\n       // No need to swap header's color as it does not change.\n       std::swap(this->_M_impl._M_node_count, __t._M_impl._M_node_count);\n       std::swap(this->_M_impl._M_key_compare, __t._M_impl._M_key_compare);\n-\n+      \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 431. Swapping containers with unequal allocators.\n       std::__alloc_swap<_Node_allocator>::\n@@ -924,7 +924,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,\n \t\t\t   _Compare, _Alloc>::iterator, bool>\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-    insert_unique(const _Val& __v)\n+    _M_insert_unique(const _Val& __v)\n     {\n       _Link_type __x = _M_begin();\n       _Link_type __y = _M_end();\n@@ -950,7 +950,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n            typename _Compare, typename _Alloc>\n     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-    insert_unique(iterator __position, const _Val& __v)\n+    _M_insert_unique(iterator __position, const _Val& __v)\n     {\n       // end()\n       if (__position._M_node == _M_end())\n@@ -960,7 +960,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t\t_KeyOfValue()(__v)))\n \t    return _M_insert(0, _M_rightmost(), __v);\n \t  else\n-\t    return insert_unique(__v).first;\n+\t    return _M_insert_unique(__v).first;\n \t}\n       else if (_M_impl._M_key_compare(_KeyOfValue()(__v),\n \t\t\t\t      _S_key(__position._M_node)))\n@@ -979,7 +979,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t __position._M_node, __v);\n \t    }\n \t  else\n-\t    return insert_unique(__v).first;\n+\t    return _M_insert_unique(__v).first;\n \t}\n       else if (_M_impl._M_key_compare(_S_key(__position._M_node),\n \t\t\t\t      _KeyOfValue()(__v)))\n@@ -997,7 +997,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\treturn _M_insert(__after._M_node, __after._M_node, __v);\n \t    }\n \t  else\n-\t    return insert_unique(__v).first;\n+\t    return _M_insert_unique(__v).first;\n \t}\n       else\n \treturn __position; // Equivalent keys.\n@@ -1007,7 +1007,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n            typename _Compare, typename _Alloc>\n     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-    insert_unique(const_iterator __position, const _Val& __v)\n+    _M_insert_unique(const_iterator __position, const _Val& __v)\n     {\n       // end()\n       if (__position._M_node == _M_end())\n@@ -1017,7 +1017,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t\t_KeyOfValue()(__v)))\n \t    return _M_insert(0, _M_rightmost(), __v);\n \t  else\n-\t    return const_iterator(insert_unique(__v).first);\n+\t    return const_iterator(_M_insert_unique(__v).first);\n \t}\n       else if (_M_impl._M_key_compare(_KeyOfValue()(__v),\n \t\t\t\t      _S_key(__position._M_node)))\n@@ -1036,7 +1036,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t __position._M_node, __v);\n \t    }\n \t  else\n-\t    return const_iterator(insert_unique(__v).first);\n+\t    return const_iterator(_M_insert_unique(__v).first);\n \t}\n       else if (_M_impl._M_key_compare(_S_key(__position._M_node),\n \t\t\t\t      _KeyOfValue()(__v)))\n@@ -1054,7 +1054,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\treturn _M_insert(__after._M_node, __after._M_node, __v);\n \t    }\n \t  else\n-\t    return const_iterator(insert_unique(__v).first);\n+\t    return const_iterator(_M_insert_unique(__v).first);\n \t}\n       else\n \treturn __position; // Equivalent keys.\n@@ -1064,7 +1064,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n            typename _Compare, typename _Alloc>\n     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-    insert_equal(iterator __position, const _Val& __v)\n+    _M_insert_equal(iterator __position, const _Val& __v)\n     {\n       // end()\n       if (__position._M_node == _M_end())\n@@ -1074,7 +1074,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t\t _S_key(_M_rightmost())))\n \t    return _M_insert(0, _M_rightmost(), __v);\n \t  else\n-\t    return insert_equal(__v);\n+\t    return _M_insert_equal(__v);\n \t}\n       else if (!_M_impl._M_key_compare(_S_key(__position._M_node),\n \t\t\t\t       _KeyOfValue()(__v)))\n@@ -1093,7 +1093,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t __position._M_node, __v);\n \t    }\n \t  else\n-\t    return insert_equal(__v);\n+\t    return _M_insert_equal(__v);\n \t}\n       else\n \t{\n@@ -1110,15 +1110,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\treturn _M_insert(__after._M_node, __after._M_node, __v);\n \t    }\n \t  else\n-\t    return insert_equal(__v);\n+\t    return _M_insert_equal(__v);\n \t}\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n            typename _Compare, typename _Alloc>\n     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-    insert_equal(const_iterator __position, const _Val& __v)\n+    _M_insert_equal(const_iterator __position, const _Val& __v)\n     {\n       // end()\n       if (__position._M_node == _M_end())\n@@ -1128,7 +1128,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t\t _S_key(_M_rightmost())))\n \t    return _M_insert(0, _M_rightmost(), __v);\n \t  else\n-\t    return const_iterator(insert_equal(__v));\n+\t    return const_iterator(_M_insert_equal(__v));\n \t}\n       else if (!_M_impl._M_key_compare(_S_key(__position._M_node),\n \t\t\t\t       _KeyOfValue()(__v)))\n@@ -1147,7 +1147,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t __position._M_node, __v);\n \t    }\n \t  else\n-\t    return const_iterator(insert_equal(__v));\n+\t    return const_iterator(_M_insert_equal(__v));\n \t}\n       else\n \t{\n@@ -1164,7 +1164,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\treturn _M_insert(__after._M_node, __after._M_node, __v);\n \t    }\n \t  else\n-\t    return const_iterator(insert_equal(__v));\n+\t    return const_iterator(_M_insert_equal(__v));\n \t}\n     }\n \n@@ -1173,21 +1173,21 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     template<class _II>\n       void\n       _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::\n-      insert_equal(_II __first, _II __last)\n+      _M_insert_equal(_II __first, _II __last)\n       {\n \tfor (; __first != __last; ++__first)\n-\t  insert_equal(end(), *__first);\n+\t  _M_insert_equal(end(), *__first);\n       }\n \n   template<typename _Key, typename _Val, typename _KoV,\n            typename _Cmp, typename _Alloc>\n     template<class _II>\n       void\n       _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::\n-      insert_unique(_II __first, _II __last)\n+      _M_insert_unique(_II __first, _II __last)\n       {\n \tfor (; __first != __last; ++__first)\n-\t  insert_unique(end(), *__first);\n+\t  _M_insert_unique(end(), *__first);\n       }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,"}]}