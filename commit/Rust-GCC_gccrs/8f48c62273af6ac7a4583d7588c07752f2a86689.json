{"sha": "8f48c62273af6ac7a4583d7588c07752f2a86689", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY0OGM2MjI3M2FmNmFjN2E0NTgzZDc1ODhjMDc3NTJmMmE4NjY4OQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2017-05-14T00:39:08Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2017-05-14T00:39:08Z"}, "message": "make more vars auto_sbitmaps\n\ngcc/ChangeLog:\n\n2017-05-13  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* ddg.c (find_nodes_on_paths): Use auto_sbitmap.\n\t(longest_simple_path): Likewise.\n\t* shrink-wrap.c (spread_components): Likewise.\n\t(disqualify_problematic_components): Likewise.\n\t(emit_common_heads_for_components): Likewise.\n\t(emit_common_tails_for_components): Likewise.\n\t(insert_prologue_epilogue_for_components): Likewise.\n\nFrom-SVN: r248025", "tree": {"sha": "229119b42abcb983fbd6fc1aa9c6da87e1ea5323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/229119b42abcb983fbd6fc1aa9c6da87e1ea5323"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f48c62273af6ac7a4583d7588c07752f2a86689", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f48c62273af6ac7a4583d7588c07752f2a86689", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f48c62273af6ac7a4583d7588c07752f2a86689", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f48c62273af6ac7a4583d7588c07752f2a86689/comments", "author": null, "committer": null, "parents": [{"sha": "0236bb04126d2700e257ab5d3e52f787ec40c63f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0236bb04126d2700e257ab5d3e52f787ec40c63f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0236bb04126d2700e257ab5d3e52f787ec40c63f"}], "stats": {"total": 74, "additions": 29, "deletions": 45}, "files": [{"sha": "5e3f658791e0fcadf568b706603b0f79e093ba97", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f48c62273af6ac7a4583d7588c07752f2a86689/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f48c62273af6ac7a4583d7588c07752f2a86689/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f48c62273af6ac7a4583d7588c07752f2a86689", "patch": "@@ -1,3 +1,13 @@\n+2017-05-13  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* ddg.c (find_nodes_on_paths): Use auto_sbitmap.\n+\t(longest_simple_path): Likewise.\n+\t* shrink-wrap.c (spread_components): Likewise.\n+\t(disqualify_problematic_components): Likewise.\n+\t(emit_common_heads_for_components): Likewise.\n+\t(emit_common_tails_for_components): Likewise.\n+\t(insert_prologue_epilogue_for_components): Likewise.\n+\n 2017-05-13  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* tree-ssa-dse.c (dse_dom_walker): Make m_live_byes a"}, {"sha": "8aaed80dec4ac19b848d4a9546dac9638fe3645a", "filename": "gcc/ddg.c", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f48c62273af6ac7a4583d7588c07752f2a86689/gcc%2Fddg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f48c62273af6ac7a4583d7588c07752f2a86689/gcc%2Fddg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fddg.c?ref=8f48c62273af6ac7a4583d7588c07752f2a86689", "patch": "@@ -1081,16 +1081,15 @@ free_ddg_all_sccs (ddg_all_sccs_ptr all_sccs)\n int\n find_nodes_on_paths (sbitmap result, ddg_ptr g, sbitmap from, sbitmap to)\n {\n-  int answer;\n   int change;\n   unsigned int u = 0;\n   int num_nodes = g->num_nodes;\n   sbitmap_iterator sbi;\n \n-  sbitmap workset = sbitmap_alloc (num_nodes);\n-  sbitmap reachable_from = sbitmap_alloc (num_nodes);\n-  sbitmap reach_to = sbitmap_alloc (num_nodes);\n-  sbitmap tmp = sbitmap_alloc (num_nodes);\n+  auto_sbitmap workset (num_nodes);\n+  auto_sbitmap reachable_from (num_nodes);\n+  auto_sbitmap reach_to (num_nodes);\n+  auto_sbitmap tmp (num_nodes);\n \n   bitmap_copy (reachable_from, from);\n   bitmap_copy (tmp, from);\n@@ -1150,12 +1149,7 @@ find_nodes_on_paths (sbitmap result, ddg_ptr g, sbitmap from, sbitmap to)\n \t}\n     }\n \n-  answer = bitmap_and (result, reachable_from, reach_to);\n-  sbitmap_free (workset);\n-  sbitmap_free (reachable_from);\n-  sbitmap_free (reach_to);\n-  sbitmap_free (tmp);\n-  return answer;\n+  return bitmap_and (result, reachable_from, reach_to);\n }\n \n \n@@ -1195,10 +1189,9 @@ longest_simple_path (struct ddg * g, int src, int dest, sbitmap nodes)\n   int i;\n   unsigned int u = 0;\n   int change = 1;\n-  int result;\n   int num_nodes = g->num_nodes;\n-  sbitmap workset = sbitmap_alloc (num_nodes);\n-  sbitmap tmp = sbitmap_alloc (num_nodes);\n+  auto_sbitmap workset (num_nodes);\n+  auto_sbitmap tmp (num_nodes);\n \n \n   /* Data will hold the distance of the longest path found so far from\n@@ -1224,10 +1217,7 @@ longest_simple_path (struct ddg * g, int src, int dest, sbitmap nodes)\n \t  change |= update_dist_to_successors (u_node, nodes, tmp);\n \t}\n     }\n-  result = g->nodes[dest].aux.count;\n-  sbitmap_free (workset);\n-  sbitmap_free (tmp);\n-  return result;\n+  return g->nodes[dest].aux.count;\n }\n \n #endif /* INSN_SCHEDULING */"}, {"sha": "1ac4ea3b0540f020f1f51a753c3a38a2f10be7ac", "filename": "gcc/shrink-wrap.c", "status": "modified", "additions": 11, "deletions": 27, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f48c62273af6ac7a4583d7588c07752f2a86689/gcc%2Fshrink-wrap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f48c62273af6ac7a4583d7588c07752f2a86689/gcc%2Fshrink-wrap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fshrink-wrap.c?ref=8f48c62273af6ac7a4583d7588c07752f2a86689", "patch": "@@ -1264,7 +1264,7 @@ spread_components (sbitmap components)\n   todo.create (n_basic_blocks_for_fn (cfun));\n   auto_bitmap seen;\n \n-  sbitmap old = sbitmap_alloc (SBITMAP_SIZE (components));\n+  auto_sbitmap old (SBITMAP_SIZE (components));\n \n   /* Find for every block the components that are *not* needed on some path\n      from the entry to that block.  Do this with a flood fill from the entry\n@@ -1390,8 +1390,6 @@ spread_components (sbitmap components)\n \t  fprintf (dump_file, \"\\n\");\n \t}\n     }\n-\n-  sbitmap_free (old);\n }\n \n /* If we cannot handle placing some component's prologues or epilogues where\n@@ -1400,8 +1398,8 @@ spread_components (sbitmap components)\n static void\n disqualify_problematic_components (sbitmap components)\n {\n-  sbitmap pro = sbitmap_alloc (SBITMAP_SIZE (components));\n-  sbitmap epi = sbitmap_alloc (SBITMAP_SIZE (components));\n+  auto_sbitmap pro (SBITMAP_SIZE (components));\n+  auto_sbitmap epi (SBITMAP_SIZE (components));\n \n   basic_block bb;\n   FOR_EACH_BB_FN (bb, cfun)\n@@ -1466,19 +1464,16 @@ disqualify_problematic_components (sbitmap components)\n \t    }\n \t}\n     }\n-\n-  sbitmap_free (pro);\n-  sbitmap_free (epi);\n }\n \n /* Place code for prologues and epilogues for COMPONENTS where we can put\n    that code at the start of basic blocks.  */\n static void\n emit_common_heads_for_components (sbitmap components)\n {\n-  sbitmap pro = sbitmap_alloc (SBITMAP_SIZE (components));\n-  sbitmap epi = sbitmap_alloc (SBITMAP_SIZE (components));\n-  sbitmap tmp = sbitmap_alloc (SBITMAP_SIZE (components));\n+  auto_sbitmap pro (SBITMAP_SIZE (components));\n+  auto_sbitmap epi (SBITMAP_SIZE (components));\n+  auto_sbitmap tmp (SBITMAP_SIZE (components));\n \n   basic_block bb;\n   FOR_ALL_BB_FN (bb, cfun)\n@@ -1554,20 +1549,16 @@ emit_common_heads_for_components (sbitmap components)\n \t  bitmap_ior (SW (bb)->head_components, SW (bb)->head_components, epi);\n \t}\n     }\n-\n-  sbitmap_free (pro);\n-  sbitmap_free (epi);\n-  sbitmap_free (tmp);\n }\n \n /* Place code for prologues and epilogues for COMPONENTS where we can put\n    that code at the end of basic blocks.  */\n static void\n emit_common_tails_for_components (sbitmap components)\n {\n-  sbitmap pro = sbitmap_alloc (SBITMAP_SIZE (components));\n-  sbitmap epi = sbitmap_alloc (SBITMAP_SIZE (components));\n-  sbitmap tmp = sbitmap_alloc (SBITMAP_SIZE (components));\n+  auto_sbitmap pro (SBITMAP_SIZE (components));\n+  auto_sbitmap epi (SBITMAP_SIZE (components));\n+  auto_sbitmap tmp (SBITMAP_SIZE (components));\n \n   basic_block bb;\n   FOR_ALL_BB_FN (bb, cfun)\n@@ -1664,19 +1655,15 @@ emit_common_tails_for_components (sbitmap components)\n \t  bitmap_ior (SW (bb)->tail_components, SW (bb)->tail_components, pro);\n \t}\n     }\n-\n-  sbitmap_free (pro);\n-  sbitmap_free (epi);\n-  sbitmap_free (tmp);\n }\n \n /* Place prologues and epilogues for COMPONENTS on edges, if we haven't already\n    placed them inside blocks directly.  */\n static void\n insert_prologue_epilogue_for_components (sbitmap components)\n {\n-  sbitmap pro = sbitmap_alloc (SBITMAP_SIZE (components));\n-  sbitmap epi = sbitmap_alloc (SBITMAP_SIZE (components));\n+  auto_sbitmap pro (SBITMAP_SIZE (components));\n+  auto_sbitmap epi (SBITMAP_SIZE (components));\n \n   basic_block bb;\n   FOR_EACH_BB_FN (bb, cfun)\n@@ -1754,9 +1741,6 @@ insert_prologue_epilogue_for_components (sbitmap components)\n \t}\n     }\n \n-  sbitmap_free (pro);\n-  sbitmap_free (epi);\n-\n   commit_edge_insertions ();\n }\n "}]}