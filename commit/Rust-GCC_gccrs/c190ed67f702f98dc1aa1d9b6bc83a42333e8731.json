{"sha": "c190ed67f702f98dc1aa1d9b6bc83a42333e8731", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE5MGVkNjdmNzAyZjk4ZGMxYWExZDliNmJjODNhNDIzMzNlODczMQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-05-27T21:37:17Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-05-27T21:37:17Z"}, "message": "Makefile.in (libgcc2.ready): Rename to libgcc.ready.\n\n        * Makefile.in (libgcc2.ready): Rename to libgcc.ready.\n        Depend on $(LANGUAGES) as well as $(GCC_PATCHES) and fixed\n        headers.\n        (clean): No need to delete libgcc1.a, libgcc1-asm.a,\n        libgcc2.a, or libgcc1.null.\n\nFrom-SVN: r34211", "tree": {"sha": "56c82f5c8fbf5ff7a040ae0f8df9f6c96e786137", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56c82f5c8fbf5ff7a040ae0f8df9f6c96e786137"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c190ed67f702f98dc1aa1d9b6bc83a42333e8731", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c190ed67f702f98dc1aa1d9b6bc83a42333e8731", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c190ed67f702f98dc1aa1d9b6bc83a42333e8731", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c190ed67f702f98dc1aa1d9b6bc83a42333e8731/comments", "author": null, "committer": null, "parents": [{"sha": "0e7f0e650e96b48cae89bd6e8fb4ecb3e80eccbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e7f0e650e96b48cae89bd6e8fb4ecb3e80eccbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e7f0e650e96b48cae89bd6e8fb4ecb3e80eccbb"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "64104d4eef3300dd4ba2bac81f48683259f59f9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c190ed67f702f98dc1aa1d9b6bc83a42333e8731/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c190ed67f702f98dc1aa1d9b6bc83a42333e8731/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c190ed67f702f98dc1aa1d9b6bc83a42333e8731", "patch": "@@ -1,3 +1,11 @@\n+2000-05-27  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* Makefile.in (libgcc2.ready): Rename to libgcc.ready.\n+\tDepend on $(LANGUAGES) as well as $(GCC_PATCHES) and fixed\n+\theaders.\n+\t(clean): No need to delete libgcc1.a, libgcc1-asm.a,\n+\tlibgcc2.a, or libgcc1.null.\n+\n 2000-05-27  Richard Henderson  <rth@cygnus.com>\n \n \t* Makefile.in (recog.o): Don't depend on resource.h."}, {"sha": "b8bbfa11923085d5b912b61bb8549339e2ebfd18", "filename": "gcc/Makefile.in", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c190ed67f702f98dc1aa1d9b6bc83a42333e8731/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c190ed67f702f98dc1aa1d9b6bc83a42333e8731/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c190ed67f702f98dc1aa1d9b6bc83a42333e8731", "patch": "@@ -159,7 +159,7 @@ USER_H = $(srcdir)/ginclude/stdarg.h $(srcdir)/ginclude/stddef.h \\\n # want to set this empty.\n INSTALL_ASSERT_H = install-assert-h\n \n-# The GCC to use for compiling libgcc2.a, enquire, and libgcc1-test.\n+# The GCC to use for compiling libgcc.a, enquire, and libgcc1-test.\n # Usually the one we just built.\n # Don't use this as a dependency--use $(GCC_PASSES) or $(GCC_PARTS).\n GCC_FOR_TARGET = ./xgcc -B$(build_tooldir)/bin/ -B./ -isystem $(build_tooldir)/include\n@@ -349,9 +349,6 @@ LIBGCC1 = libgcc1.a\n # The default rule assumes that libgcc1.a is supplied by the user.\n CROSS_LIBGCC1 = libgcc1.cross\n \n-# Specify the rule for actually making libgcc2.a.\n-LIBGCC2 = libgcc2.a\n-\n # Options to use when compiling libgcc2.a.\n # -g1 causes output of debug info only for file-scope entities.\n # we use this here because that should be enough, and also\n@@ -944,14 +941,14 @@ xlimits.h: glimits.h limitx.h limity.h\n #\f\n # Build libgcc.a.\n \n-# Compiling libgcc2.a requires making sure that cc1, etc. have been compiled.\n-# But recompiling cc1 should not force recompilation of libgcc2.a.\n-# If you want to force recompilation, delete libgcc2.a.\n-libgcc2.ready: $(GCC_PASSES) stmp-int-hdrs $(STMP_FIXPROTO)\n-\t-if [ -f libgcc2.ready ] ; then \\\n+# Compiling libgcc.a requires making sure that cc1, etc. have been compiled.\n+# But recompiling cc1 should not force recompilation of libgcc.a.\n+# If you want to force recompilation, delete libgcc.a.\n+libgcc.ready: $(GCC_PASSES) $(LANGUAGES) stmp-int-hdrs $(STMP_FIXPROTO)\n+\t-if [ -f libgcc.ready ] ; then \\\n \t\ttrue; \\\n \telse \\\n-\t\ttouch libgcc2.ready; \\\n+\t\ttouch libgcc.ready; \\\n \tfi\n \n LIB2ADD = $(LIB2ADDEH) $(LIB2FUNCS_EXTRA) $(LANG_LIB2FUNCS)\n@@ -975,7 +972,7 @@ libgcc.mk: config.status Makefile mklibgcc $(LIB2ADD) xgcc$(exeext)\n \t  $(SHELL) mklibgcc > tmp-libgcc.mk\n \t$(SHELL) $(srcdir)/move-if-change tmp-libgcc.mk libgcc.mk\n \n-libgcc.a: libgcc2.ready libgcc.mk $(FPBIT) $(DPBIT)\n+libgcc.a: libgcc.ready libgcc.mk $(FPBIT) $(DPBIT)\n \t$(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n \t  HOST_PREFIX=\"$(HOST_PREFIX)\" HOST_PREFIX_1=\"$(HOST_PREFIX_1)\" \\\n \t  AR_FOR_TARGET=\"$(AR_FOR_TARGET)\" \\\n@@ -1006,7 +1003,7 @@ s-mlib: $(srcdir)/genmultilib Makefile\n \ttouch s-mlib\n \n # Build multiple copies of libgcc.a, one for each target switch.\n-stmp-multilib: libgcc2.ready libgcc.mk $(FPBIT) $(DPBIT)\n+stmp-multilib: libgcc.ready libgcc.mk $(FPBIT) $(DPBIT)\n \t$(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n \t  HOST_PREFIX=\"$(HOST_PREFIX)\" HOST_PREFIX_1=\"$(HOST_PREFIX_1)\" \\\n \t  AR_FOR_TARGET=\"$(AR_FOR_TARGET)\" \\\n@@ -2139,8 +2136,7 @@ mostlyclean: $(INTL_MOSTLYCLEAN) lang.mostlyclean\n # that don't exist in the distribution.\n INTL_CLEAN = intl.clean\n clean: mostlyclean $(INTL_CLEAN) lang.clean\n-\t-rm -f libgcc.a libgcc1.a libgcc1-asm.a libgcc2.a libgcc2.ready\n-\t-rm -f libgcc1.null\n+\t-rm -f libgcc.a libgcc.ready\n \t-rm -f *.dvi\n \t-rm -f */*.dvi\n \t-if [ -f md.pre-cpp ]; then \\"}]}