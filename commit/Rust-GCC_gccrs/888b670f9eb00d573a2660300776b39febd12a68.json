{"sha": "888b670f9eb00d573a2660300776b39febd12a68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg4YjY3MGY5ZWIwMGQ1NzNhMjY2MDMwMDc3NmIzOWZlYmQxMmE2OA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-07-22T15:44:51Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-07-22T15:44:51Z"}, "message": "re PR target/53961 (internal compiler error: in memory_address_length, at config/i386/i386.c:23341)\n\n\tPR target/53961\n\t* config/i386/i386.md (*lea): New insn pattern.\n\t(*lea_1): Remove.\n\t(*lea<mode>_2): Ditto.\n\t(*lea_{3,4,5,6}_zext): Ditto.\n\t* config/i386/constraints.md (j): Remove address constraint.\n\t* config/i386/i386.c (ix86_decompose_address): Allow SImode subreg\n\tof an address.\n\t(ix86_print_operand_address): Handle SImode subreg of an address.\n\t(ix86_avoid_lea_for_add): Reject zero-extended addresses for now.\n\nFrom-SVN: r189756", "tree": {"sha": "9a1251e9f8486706612bc711a8306a32037999bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a1251e9f8486706612bc711a8306a32037999bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/888b670f9eb00d573a2660300776b39febd12a68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/888b670f9eb00d573a2660300776b39febd12a68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/888b670f9eb00d573a2660300776b39febd12a68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/888b670f9eb00d573a2660300776b39febd12a68/comments", "author": null, "committer": null, "parents": [{"sha": "922a784c4f6ab28e0619c55d1b4d20c1503082f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/922a784c4f6ab28e0619c55d1b4d20c1503082f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/922a784c4f6ab28e0619c55d1b4d20c1503082f1"}], "stats": {"total": 128, "additions": 52, "deletions": 76}, "files": [{"sha": "df66271ef566a7d141540c601c202cf822983b63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888b670f9eb00d573a2660300776b39febd12a68/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888b670f9eb00d573a2660300776b39febd12a68/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=888b670f9eb00d573a2660300776b39febd12a68", "patch": "@@ -1,3 +1,16 @@\n+2012-07-22  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/53961\n+\t* config/i386/i386.md (*lea): New insn pattern.\n+\t(*lea_1): Remove.\n+\t(*lea<mode>_2): Ditto.\n+\t(*lea_{3,4,5,6}_zext): Ditto.\n+\t* config/i386/constraints.md (j): Remove address constraint.\n+\t* config/i386/i386.c (ix86_decompose_address): Allow SImode subreg\n+\tof an address.\n+\t(ix86_print_operand_address): Handle SImode subreg of an address.\n+\t(ix86_avoid_lea_for_add): Reject zero-extended addresses for now.\n+\n 2012-07-22  Hans-Peter Nilsson  <hp@axis.com>\n \n \tEmit executable-stack note correctly for CRIS targets.\n@@ -35,7 +48,7 @@\n \tmips_expand_ext_as_unaligned_load.\n \t(mips_expand_ext_as_unaligned_load): Add unsigned_p argument.\n \tAccept DImode dest when the width is that of SImode.\n-        * config/mips/mips.md (extv): Update call to\n+\t* config/mips/mips.md (extv): Update call to\n \tmips_expand_ext_as_unaligned_load.\n \t(extzv): Likewise.\n \n@@ -54,9 +67,9 @@\n \tNew reservations.\n \t* gcc/config/mips/10000.md, gcc/config/mips/20kc.md,\n \t* gcc/config/mips/24k.md, gcc/config/mips/4130.md,\n-        * gcc/config/mips/4k.md, gcc/config/mips/5400.md,\n+\t* gcc/config/mips/4k.md, gcc/config/mips/5400.md,\n \t* gcc/config/mips/5500.md, gcc/config/mips/5k.md,\n-        * gcc/config/mips/7000.md, gcc/config/mips/74k.md,\n+\t* gcc/config/mips/7000.md, gcc/config/mips/74k.md,\n \t* gcc/config/mips/9000.md, gcc/config/mips/loongson2ef.md,\n \t* gcc/config/mips/loongson3a.md, gcc/config/mips/octeon.md,\n \t* gcc/config/mips/sb1.md, gcc/config/mips/sr71k.md,\n@@ -124,8 +137,9 @@\n \t(brief_dump_cfg): Take a flags argument, and filter out\n \tTDF_COMMENT and TDF_DETAILS.\n \t* pretty-print.c (pp_base_newline): Set pp_needs_newline to false.\n-\t* gimple-pretty-print.c (dump_gimple_bb_header): Do not use dump_bb_info\n-\there, it is already called from dump_bb.  Idem for check_bb_profile.\n+\t* gimple-pretty-print.c (dump_gimple_bb_header): Do not use\n+\tdump_bb_info here, it is already called from dump_bb.  Idem for\n+\tcheck_bb_profile.\n \t(dump_gimple_bb_footer): Likewise.\n \t(gimple_dump_bb_buff): Call pp_flush after dump_gimple_stmt to\n \tavoid broken dumps for statement histograms.\n@@ -143,8 +157,8 @@\n \t* passes.c (execute_function_dump): Always call print_rtl_with_bb\n \tfor RTL dumps.\n \t* cfgrtl.c (print_rtl_with_bb): Handle printing without an up-to-date\n-\tCFG.  With TDF_BLOCKS and TDF_DETAILS, do DF dumps at the top and bottom\n-\tof each basic block.\n+\tCFG.  With TDF_BLOCKS and TDF_DETAILS, do DF dumps at the top and\n+\tbottom of each basic block.\n \n 2012-07-20  Richard Guenther  <rguenther@suse.de>\n "}, {"sha": "b73cf5c32dbf18efabd44371be92ce56976416b4", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888b670f9eb00d573a2660300776b39febd12a68/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888b670f9eb00d573a2660300776b39febd12a68/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=888b670f9eb00d573a2660300776b39febd12a68", "patch": "@@ -19,7 +19,7 @@\n \n ;;; Unused letters:\n ;;;     B     H           T\n-;;;           h  k          v\n+;;;           h jk          v\n \n ;; Integer register constraints.\n ;; It is not necessary to define 'r' here.\n@@ -133,11 +133,6 @@\n   (and (not (match_test \"TARGET_X32\"))\n        (match_operand 0 \"memory_operand\")))\n \n-(define_address_constraint \"j\"\n-  \"@internal Address operand that can be zero extended in LEA instruction.\"\n-  (and (not (match_code \"const_int\"))\n-       (match_operand 0 \"address_operand\")))\n-\n ;; Integer constant constraints.\n (define_constraint \"I\"\n   \"Integer constant in the range 0 @dots{} 31, for 32-bit shifts.\""}, {"sha": "5770ed26aa2bb33059410ed71b065ef03016690e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888b670f9eb00d573a2660300776b39febd12a68/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888b670f9eb00d573a2660300776b39febd12a68/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=888b670f9eb00d573a2660300776b39febd12a68", "patch": "@@ -11576,9 +11576,18 @@ ix86_decompose_address (rtx addr, struct ix86_address *out)\n   int retval = 1;\n   enum ix86_address_seg seg = SEG_DEFAULT;\n \n+  /* Allow SImode subregs of DImode addresses,\n+     they will be emitted with addr32 prefix.  */\n+  if (TARGET_64BIT && GET_MODE (addr) == SImode)\n+    {\n+      if (GET_CODE (addr) == SUBREG\n+\t  && GET_MODE (XEXP (addr, 0)) == DImode)\n+\taddr = SUBREG_REG (addr);\n+    }\n+\n   /* Allow zero-extended SImode addresses,\n      they will be emitted with addr32 prefix.  */\n-  if (TARGET_64BIT && GET_MODE (addr) == DImode)\n+  else if (TARGET_64BIT && GET_MODE (addr) == DImode)\n     {\n       if (GET_CODE (addr) == ZERO_EXTEND\n \t  && GET_MODE (XEXP (addr, 0)) == SImode)\n@@ -14755,10 +14764,10 @@ ix86_print_operand_address (FILE *file, rtx addr)\n     }\n   else\n     {\n-      /* Print SImode register names for zero-extended\n-\t addresses to force addr32 prefix.  */\n+      /* Print SImode register names to force addr32 prefix.  */\n       if (TARGET_64BIT\n-\t  && (GET_CODE (addr) == ZERO_EXTEND\n+\t  && (GET_CODE (addr) == SUBREG\n+\t      || GET_CODE (addr) == ZERO_EXTEND\n \t      || GET_CODE (addr) == AND))\n \t{\n \t  gcc_assert (!code);\n@@ -16855,6 +16864,11 @@ ix86_avoid_lea_for_add (rtx insn, rtx operands[])\n   unsigned int regno1 = true_regnum (operands[1]);\n   unsigned int regno2 = true_regnum (operands[2]);\n \n+  /* FIXME: Handle zero-extended addresses.  */\n+  if (GET_CODE (operands[1]) == ZERO_EXTEND\n+      || GET_CODE (operands[1]) == AND)\n+    return false;\n+\n   /* Check if we need to optimize.  */\n   if (!TARGET_OPT_AGU || optimize_function_for_size_p (cfun))\n     return false;"}, {"sha": "7f5814dfeec76b8b7d6f42016fd8859b236433bb", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 12, "deletions": 54, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888b670f9eb00d573a2660300776b39febd12a68/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888b670f9eb00d573a2660300776b39febd12a68/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=888b670f9eb00d573a2660300776b39febd12a68", "patch": "@@ -5508,25 +5508,21 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn_and_split \"*lea_1\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(subreg:SI (match_operand:DI 1 \"lea_address_operand\" \"p\") 0))]\n-  \"TARGET_64BIT\"\n-  \"lea{l}\\t{%E1, %0|%0, %E1}\"\n-  \"&& reload_completed && ix86_avoid_lea_for_addr (insn, operands)\"\n-  [(const_int 0)]\n-{\n-  ix86_split_lea_for_addr (operands, SImode);\n-  DONE;\n-}\n-  [(set_attr \"type\" \"lea\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn_and_split \"*lea<mode>_2\"\n+(define_insn_and_split \"*lea<mode>\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n \t(match_operand:SWI48 1 \"lea_address_operand\" \"p\"))]\n   \"\"\n-  \"lea{<imodesuffix>}\\t{%E1, %0|%0, %E1}\"\n+{\n+  rtx addr = operands[1];\n+\n+  if (GET_CODE (addr) == SUBREG)\n+    return \"lea{l}\\t{%E1, %0|%0, %E1}\";\n+  else if (GET_CODE (addr) == ZERO_EXTEND\n+\t   || GET_CODE (addr) == AND)\n+    return \"lea{l}\\t{%E1, %k0|%k0, %E1}\";\n+  else \n+    return \"lea{<imodesuffix>}\\t{%E1, %0|%0, %E1}\";\n+}\n   \"reload_completed && ix86_avoid_lea_for_addr (insn, operands)\"\n   [(const_int 0)]\n {\n@@ -5536,44 +5532,6 @@\n   [(set_attr \"type\" \"lea\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*lea_3_zext\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI\n-\t  (subreg:SI (match_operand:DI 1 \"lea_address_operand\" \"j\") 0)))]\n-  \"TARGET_64BIT\"\n-  \"lea{l}\\t{%E1, %k0|%k0, %E1}\"\n-  [(set_attr \"type\" \"lea\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"*lea_4_zext\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI\n-\t  (match_operand:SI 1 \"lea_address_operand\" \"j\")))]\n-  \"TARGET_64BIT\"\n-  \"lea{l}\\t{%E1, %k0|%k0, %E1}\"\n-  [(set_attr \"type\" \"lea\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"*lea_5_zext\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(and:DI\n-\t  (subreg:DI (match_operand:SI 1 \"lea_address_operand\" \"p\") 0)\n-\t  (match_operand:DI 2 \"const_32bit_mask\" \"n\")))]\n-  \"TARGET_64BIT\"\n-  \"lea{l}\\t{%E1, %k0|%k0, %E1}\"\n-  [(set_attr \"type\" \"lea\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"*lea_6_zext\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(and:DI\n-\t  (match_operand:DI 1 \"lea_address_operand\" \"p\")\n-\t  (match_operand:DI 2 \"const_32bit_mask\" \"n\")))]\n-  \"TARGET_64BIT\"\n-  \"lea{l}\\t{%E1, %k0|%k0, %E1}\"\n-  [(set_attr \"type\" \"lea\")\n-   (set_attr \"mode\" \"SI\")])\n-\n (define_insn \"*add<mode>_1\"\n   [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=r,rm,r,r\")\n \t(plus:SWI48"}, {"sha": "3dbc6c0ccea69a38467e8e1ad3d1c8d71d90dc23", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888b670f9eb00d573a2660300776b39febd12a68/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888b670f9eb00d573a2660300776b39febd12a68/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=888b670f9eb00d573a2660300776b39febd12a68", "patch": "@@ -830,11 +830,6 @@\n   struct ix86_address parts;\n   int ok;\n \n-  /*  LEA handles zero-extend by itself.  */\n-  if (GET_CODE (op) == ZERO_EXTEND\n-      || GET_CODE (op) == AND)\n-    return false;\n-\n   ok = ix86_decompose_address (op, &parts);\n   gcc_assert (ok);\n   return parts.seg == SEG_DEFAULT;"}]}