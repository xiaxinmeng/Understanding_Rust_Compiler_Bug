{"sha": "f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZkYThiYzNlZWQ0NWYyODg0ZWIxMmQ1ZGI2N2IxZDQ5MmY2YTdlOQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-01-18T23:44:36Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-01-18T23:44:36Z"}, "message": "alpha-protos.h: PROTO -> PARAMS.\n\n        * alpha-protos.h: PROTO -> PARAMS.\n        * alpha.c: Likewise.\n        * elf.h: Likewise.\n        * h8300.c: Likewise.\n        * i386-protos.h: Likewise.\n        * i386.c: Likewise.\n        * m32r-protos.h: Likewise.\n        * m32r.c: Likewise.\n        * mips.c: Likewise.\n        * mips.md: Likewise.\n        * gmon-sol2.c: Likewise.\n        * sparc.c: Likewise.\n\nFrom-SVN: r31495", "tree": {"sha": "2c829a2feb03878b56545fc788e7dcf17b25b97e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c829a2feb03878b56545fc788e7dcf17b25b97e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9/comments", "author": null, "committer": null, "parents": [{"sha": "fabf04b6e0fdc55916fbf105b785ba555b8bacd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fabf04b6e0fdc55916fbf105b785ba555b8bacd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fabf04b6e0fdc55916fbf105b785ba555b8bacd5"}], "stats": {"total": 719, "additions": 367, "deletions": 352}, "files": [{"sha": "0ba4bbc3786fb5e1add97054680fe2ced27ab5b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9", "patch": "@@ -1,3 +1,18 @@\n+2000-01-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* alpha-protos.h: PROTO -> PARAMS.\n+\t* alpha.c: Likewise.\n+\t* elf.h: Likewise.\n+\t* h8300.c: Likewise.\n+\t* i386-protos.h: Likewise.\n+\t* i386.c: Likewise.\n+\t* m32r-protos.h: Likewise.\n+\t* m32r.c: Likewise.\n+\t* mips.c: Likewise.\n+\t* mips.md: Likewise.\n+\t* gmon-sol2.c: Likewise.\n+\t* sparc.c: Likewise.\n+\n 2000-01-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* ns32k-protos.h: New file."}, {"sha": "e9e88bceab193fcd52db13e659f568e0fd30395a", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 76, "deletions": 76, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes for alpha.c functions used in the md file & elsewhere.\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -18,104 +18,104 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-extern void literal_section PROTO ((void));\n-extern void override_options PROTO ((void));\n-extern int zap_mask PROTO ((HOST_WIDE_INT));\n-extern int direct_return PROTO ((void));\n+extern void literal_section PARAMS ((void));\n+extern void override_options PARAMS ((void));\n+extern int zap_mask PARAMS ((HOST_WIDE_INT));\n+extern int direct_return PARAMS ((void));\n \n-extern int alpha_sa_size PROTO ((void));\n-extern int alpha_pv_save_size PROTO ((void));\n-extern int alpha_using_fp PROTO ((void));\n-extern void alpha_write_verstamp PROTO ((FILE *));\n-extern void alpha_expand_prologue PROTO ((void));\n-extern void output_end_prologue PROTO ((FILE *));\n-extern void alpha_expand_epilogue PROTO ((void));\n-extern void alpha_output_filename PROTO ((FILE *, const char *));\n-extern void alpha_output_lineno PROTO ((FILE *, int));\n+extern int alpha_sa_size PARAMS ((void));\n+extern int alpha_pv_save_size PARAMS ((void));\n+extern int alpha_using_fp PARAMS ((void));\n+extern void alpha_write_verstamp PARAMS ((FILE *));\n+extern void alpha_expand_prologue PARAMS ((void));\n+extern void output_end_prologue PARAMS ((FILE *));\n+extern void alpha_expand_epilogue PARAMS ((void));\n+extern void alpha_output_filename PARAMS ((FILE *, const char *));\n+extern void alpha_output_lineno PARAMS ((FILE *, int));\n \n #ifdef RTX_CODE\n-extern int reg_or_0_operand PROTO ((rtx, enum machine_mode));\n-extern int reg_or_6bit_operand PROTO ((rtx, enum machine_mode));\n-extern int reg_or_8bit_operand PROTO ((rtx, enum machine_mode));\n-extern int cint8_operand PROTO ((rtx, enum machine_mode));\n-extern int add_operand PROTO ((rtx, enum machine_mode));\n-extern int sext_add_operand PROTO ((rtx, enum machine_mode));\n-extern int const48_operand PROTO ((rtx, enum machine_mode));\n-extern int and_operand PROTO ((rtx, enum machine_mode));\n-extern int or_operand PROTO ((rtx, enum machine_mode));\n-extern int mode_width_operand PROTO ((rtx, enum machine_mode));\n-extern int mode_mask_operand PROTO ((rtx, enum machine_mode));\n-extern int mul8_operand PROTO ((rtx, enum machine_mode));\n-extern int fp0_operand PROTO ((rtx, enum machine_mode));\n-extern int reg_or_fp0_operand PROTO ((rtx, enum machine_mode));\n-extern int hard_fp_register_operand PROTO ((rtx, enum machine_mode));\n-extern int reg_or_cint_operand PROTO ((rtx, enum machine_mode));\n-extern int some_operand PROTO ((rtx, enum machine_mode));\n-extern int some_ni_operand PROTO ((rtx, enum machine_mode));\n-extern int input_operand PROTO ((rtx, enum machine_mode));\n-extern int current_file_function_operand PROTO ((rtx, enum machine_mode));\n-extern int call_operand PROTO ((rtx, enum machine_mode));\n-extern int alpha_comparison_operator PROTO ((rtx, enum machine_mode));\n-extern int alpha_swapped_comparison_operator PROTO ((rtx, enum machine_mode));\n-extern int signed_comparison_operator PROTO ((rtx, enum machine_mode));\n-extern int divmod_operator PROTO ((rtx, enum machine_mode));\n-extern int aligned_memory_operand PROTO ((rtx, enum machine_mode));\n-extern int unaligned_memory_operand PROTO ((rtx, enum machine_mode));\n-extern int reg_or_unaligned_mem_operand PROTO ((rtx, enum machine_mode));\n-extern int any_memory_operand PROTO ((rtx, enum machine_mode));\n-extern int reg_not_elim_operand PROTO ((rtx, enum machine_mode));\n-extern int normal_memory_operand PROTO ((rtx, enum machine_mode));\n-extern int reg_no_subreg_operand PROTO ((rtx, enum machine_mode));\n-extern int addition_operation PROTO ((rtx, enum machine_mode));\n+extern int reg_or_0_operand PARAMS ((rtx, enum machine_mode));\n+extern int reg_or_6bit_operand PARAMS ((rtx, enum machine_mode));\n+extern int reg_or_8bit_operand PARAMS ((rtx, enum machine_mode));\n+extern int cint8_operand PARAMS ((rtx, enum machine_mode));\n+extern int add_operand PARAMS ((rtx, enum machine_mode));\n+extern int sext_add_operand PARAMS ((rtx, enum machine_mode));\n+extern int const48_operand PARAMS ((rtx, enum machine_mode));\n+extern int and_operand PARAMS ((rtx, enum machine_mode));\n+extern int or_operand PARAMS ((rtx, enum machine_mode));\n+extern int mode_width_operand PARAMS ((rtx, enum machine_mode));\n+extern int mode_mask_operand PARAMS ((rtx, enum machine_mode));\n+extern int mul8_operand PARAMS ((rtx, enum machine_mode));\n+extern int fp0_operand PARAMS ((rtx, enum machine_mode));\n+extern int reg_or_fp0_operand PARAMS ((rtx, enum machine_mode));\n+extern int hard_fp_register_operand PARAMS ((rtx, enum machine_mode));\n+extern int reg_or_cint_operand PARAMS ((rtx, enum machine_mode));\n+extern int some_operand PARAMS ((rtx, enum machine_mode));\n+extern int some_ni_operand PARAMS ((rtx, enum machine_mode));\n+extern int input_operand PARAMS ((rtx, enum machine_mode));\n+extern int current_file_function_operand PARAMS ((rtx, enum machine_mode));\n+extern int call_operand PARAMS ((rtx, enum machine_mode));\n+extern int alpha_comparison_operator PARAMS ((rtx, enum machine_mode));\n+extern int alpha_swapped_comparison_operator PARAMS ((rtx, enum machine_mode));\n+extern int signed_comparison_operator PARAMS ((rtx, enum machine_mode));\n+extern int divmod_operator PARAMS ((rtx, enum machine_mode));\n+extern int aligned_memory_operand PARAMS ((rtx, enum machine_mode));\n+extern int unaligned_memory_operand PARAMS ((rtx, enum machine_mode));\n+extern int reg_or_unaligned_mem_operand PARAMS ((rtx, enum machine_mode));\n+extern int any_memory_operand PARAMS ((rtx, enum machine_mode));\n+extern int reg_not_elim_operand PARAMS ((rtx, enum machine_mode));\n+extern int normal_memory_operand PARAMS ((rtx, enum machine_mode));\n+extern int reg_no_subreg_operand PARAMS ((rtx, enum machine_mode));\n+extern int addition_operation PARAMS ((rtx, enum machine_mode));\n \n-extern void get_aligned_mem PROTO ((rtx, rtx *, rtx *));\n-extern rtx get_unaligned_address PROTO ((rtx, int));\n-extern enum reg_class secondary_reload_class PROTO ((enum reg_class,\n+extern void get_aligned_mem PARAMS ((rtx, rtx *, rtx *));\n+extern rtx get_unaligned_address PARAMS ((rtx, int));\n+extern enum reg_class secondary_reload_class PARAMS ((enum reg_class,\n \t\t\t\t\t\t     enum machine_mode, \n \t\t\t\t\t\t     rtx, int));\n-extern void alpha_set_memflags PROTO ((rtx, rtx));\n-extern rtx alpha_emit_set_const PROTO ((rtx, enum machine_mode,\n+extern void alpha_set_memflags PARAMS ((rtx, rtx));\n+extern rtx alpha_emit_set_const PARAMS ((rtx, enum machine_mode,\n \t\t\t\t\tHOST_WIDE_INT, int));\n-extern rtx alpha_emit_set_long_const PROTO ((rtx, HOST_WIDE_INT,\n+extern rtx alpha_emit_set_long_const PARAMS ((rtx, HOST_WIDE_INT,\n \t\t\t\t\t     HOST_WIDE_INT));\n-extern rtx alpha_emit_conditional_branch PROTO ((enum rtx_code));\n-extern rtx alpha_emit_conditional_move PROTO ((rtx, enum machine_mode));\n-extern void alpha_expand_unaligned_load PROTO ((rtx, rtx, HOST_WIDE_INT,\n+extern rtx alpha_emit_conditional_branch PARAMS ((enum rtx_code));\n+extern rtx alpha_emit_conditional_move PARAMS ((rtx, enum machine_mode));\n+extern void alpha_expand_unaligned_load PARAMS ((rtx, rtx, HOST_WIDE_INT,\n \t\t\t\t\t\tHOST_WIDE_INT, int));\n-extern void alpha_expand_unaligned_store PROTO ((rtx, rtx, HOST_WIDE_INT,\n+extern void alpha_expand_unaligned_store PARAMS ((rtx, rtx, HOST_WIDE_INT,\n \t\t\t\t\t\t HOST_WIDE_INT));\n-extern int alpha_expand_block_move PROTO ((rtx []));\n-extern int alpha_expand_block_clear PROTO ((rtx []));\n-extern int alpha_adjust_cost PROTO ((rtx, rtx, rtx, int));\n-extern rtx alpha_return_addr PROTO ((int, rtx));\n-extern void print_operand PROTO ((FILE *, rtx, int));\n-extern void print_operand_address PROTO ((FILE *, rtx));\n-extern void alpha_initialize_trampoline PROTO ((rtx, rtx, rtx, int, int, int));\n-extern void alpha_reorg PROTO ((rtx));\n+extern int alpha_expand_block_move PARAMS ((rtx []));\n+extern int alpha_expand_block_clear PARAMS ((rtx []));\n+extern int alpha_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n+extern rtx alpha_return_addr PARAMS ((int, rtx));\n+extern void print_operand PARAMS ((FILE *, rtx, int));\n+extern void print_operand_address PARAMS ((FILE *, rtx));\n+extern void alpha_initialize_trampoline PARAMS ((rtx, rtx, rtx, int, int, int));\n+extern void alpha_reorg PARAMS ((rtx));\n #endif /* RTX_CODE */\n \n #ifdef REAL_VALUE_TYPE\n-extern int check_float_value PROTO ((enum machine_mode,\n+extern int check_float_value PARAMS ((enum machine_mode,\n \t\t\t\t     REAL_VALUE_TYPE *, int));\n #endif\n \n #if OPEN_VMS\n #ifdef HAVE_MACHINE_MODES\n-extern enum avms_arg_type alpha_arg_type PROTO ((enum machine_mode));\n+extern enum avms_arg_type alpha_arg_type PARAMS ((enum machine_mode));\n #endif\n-extern rtx alpha_arg_info_reg_val PROTO ((CUMULATIVE_ARGS));\n-extern void alpha_write_linkage PROTO ((FILE *));\n+extern rtx alpha_arg_info_reg_val PARAMS ((CUMULATIVE_ARGS));\n+extern void alpha_write_linkage PARAMS ((FILE *));\n #endif /* OPEN_VMS */\n \n-extern void alpha_need_linkage PROTO ((const char *, int));\n+extern void alpha_need_linkage PARAMS ((const char *, int));\n \n #ifdef TREE_CODE\n-extern tree alpha_build_va_list PROTO ((void));\n+extern tree alpha_build_va_list PARAMS ((void));\n #ifdef RTX_CODE\n-extern void alpha_va_start PROTO ((int, tree, rtx));\n-extern rtx alpha_va_arg PROTO ((tree, tree));\n+extern void alpha_va_start PARAMS ((int, tree, rtx));\n+extern rtx alpha_va_arg PARAMS ((tree, tree));\n #endif\n-extern int vms_valid_decl_attribute_p PROTO ((tree, tree, tree, tree));\n-extern void alpha_start_function PROTO ((FILE *, const char *, tree));\n-extern void alpha_end_function PROTO ((FILE *, const char *, tree));\n+extern int vms_valid_decl_attribute_p PARAMS ((tree, tree, tree, tree));\n+extern void alpha_start_function PARAMS ((FILE *, const char *, tree));\n+extern void alpha_end_function PARAMS ((FILE *, const char *, tree));\n #endif /* TREE CODE */"}, {"sha": "1ea9874703cbfc50fbb868abd86a47c6ab6862e2", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on the DEC Alpha.\n-   Copyright (C) 1992, 93-98, 1999 Free Software Foundation, Inc. \n+   Copyright (C) 1992, 93-99, 2000 Free Software Foundation, Inc. \n    Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n This file is part of GNU CC.\n@@ -99,23 +99,23 @@ static int alpha_sr_alias_set;\n \n /* Declarations of static functions.  */\n static void alpha_set_memflags_1\n-  PROTO((rtx, int, int, int));\n+  PARAMS ((rtx, int, int, int));\n static rtx alpha_emit_set_const_1\n-  PROTO((rtx, enum machine_mode, HOST_WIDE_INT, int));\n+  PARAMS ((rtx, enum machine_mode, HOST_WIDE_INT, int));\n static void alpha_expand_unaligned_load_words\n-  PROTO((rtx *out_regs, rtx smem, HOST_WIDE_INT words, HOST_WIDE_INT ofs));\n+  PARAMS ((rtx *out_regs, rtx smem, HOST_WIDE_INT words, HOST_WIDE_INT ofs));\n static void alpha_expand_unaligned_store_words\n-  PROTO((rtx *out_regs, rtx smem, HOST_WIDE_INT words, HOST_WIDE_INT ofs));\n+  PARAMS ((rtx *out_regs, rtx smem, HOST_WIDE_INT words, HOST_WIDE_INT ofs));\n static void alpha_sa_mask\n-  PROTO((unsigned long *imaskP, unsigned long *fmaskP));\n+  PARAMS ((unsigned long *imaskP, unsigned long *fmaskP));\n static int alpha_does_function_need_gp\n-  PROTO((void));\n+  PARAMS ((void));\n static void alpha_init_machine_status\n-  PROTO((struct function *p));\n+  PARAMS ((struct function *p));\n static void alpha_mark_machine_status\n-  PROTO((struct function *p));\n-static int alpha_ra_ever_killed PROTO((void));\n-static rtx set_frame_related_p PROTO((void));\n+  PARAMS ((struct function *p));\n+static int alpha_ra_ever_killed PARAMS ((void));\n+static rtx set_frame_related_p PARAMS ((void));\n \n \n /* Get the number of args of a function in one of two ways.  */\n@@ -4365,8 +4365,8 @@ struct shadow_summary\n   } used, defd;\n };\n \n-static void summarize_insn PROTO((rtx, struct shadow_summary *, int));\n-static void alpha_handle_trap_shadows PROTO((rtx));\n+static void summarize_insn PARAMS ((rtx, struct shadow_summary *, int));\n+static void alpha_handle_trap_shadows PARAMS ((rtx));\n \n /* Summary the effects of expression X on the machine.  Update SUM, a pointer\n    to the summary structure.  SET is nonzero if the insn is setting the\n@@ -4684,15 +4684,15 @@ enum alphaev5_pipe {\n   EV5_FM = 64\n };\n \n-static enum alphaev4_pipe alphaev4_insn_pipe PROTO((rtx));\n-static enum alphaev5_pipe alphaev5_insn_pipe PROTO((rtx));\n-static rtx alphaev4_next_group PROTO((rtx, int*, int*));\n-static rtx alphaev5_next_group PROTO((rtx, int*, int*));\n-static rtx alphaev4_next_nop PROTO((int*));\n-static rtx alphaev5_next_nop PROTO((int*));\n+static enum alphaev4_pipe alphaev4_insn_pipe PARAMS ((rtx));\n+static enum alphaev5_pipe alphaev5_insn_pipe PARAMS ((rtx));\n+static rtx alphaev4_next_group PARAMS ((rtx, int*, int*));\n+static rtx alphaev5_next_group PARAMS ((rtx, int*, int*));\n+static rtx alphaev4_next_nop PARAMS ((int*));\n+static rtx alphaev5_next_nop PARAMS ((int*));\n \n static void alpha_align_insns\n-  PROTO((rtx, int, rtx (*)(rtx, int*, int*), rtx (*)(int*), int));\n+  PARAMS ((rtx, int, rtx (*)(rtx, int*, int*), rtx (*)(int*), int));\n \n static enum alphaev4_pipe\n alphaev4_insn_pipe (insn)\n@@ -5082,8 +5082,8 @@ static void\n alpha_align_insns (insns, max_align, next_group, next_nop, gp_in_use)\n      rtx insns;\n      int max_align;\n-     rtx (*next_group) PROTO((rtx, int*, int*));\n-     rtx (*next_nop) PROTO((int*));\n+     rtx (*next_group) PARAMS ((rtx, int*, int*));\n+     rtx (*next_nop) PARAMS ((int*));\n      int gp_in_use;\n {\n   /* ALIGN is the known alignment for the insn group.  */"}, {"sha": "364788b7df7abb6cefbc07bf9b6aa1324ca4dfe5", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for DEC Alpha w/ELF.\n-   Copyright (C) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 97-99, 2000 Free Software Foundation, Inc.\n    Contributed by Richard Henderson (rth@tamu.edu).\n \n This file is part of GNU CC.\n@@ -282,7 +282,7 @@ const_section ()\t\t\t\t\t\t\\\n }\n \n #define SECTION_FUNCTION_TEMPLATE(FN, ENUM, OP)\t\\\n-void FN PROTO ((void));\t\t\t\t\\\n+void FN PARAMS ((void));\t\t\t\t\\\n void FN ()\t\t\t\t\t\\\n {\t\t\t\t\t\t\\\n   if (in_section != ENUM)\t\t\t\\"}, {"sha": "5beb1ea92254c792264604a9c26174ae39738e7e", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9", "patch": "@@ -42,11 +42,11 @@ Boston, MA 02111-1307, USA.  */\n #include \"tm_p.h\"\n \n /* Forward declarations.  */\n-static int h8300_interrupt_function_p PROTO ((tree));\n-static int h8300_monitor_function_p PROTO ((tree));\n-static int h8300_os_task_function_p PROTO ((tree));\n-static void dosize PROTO ((FILE *, const char *, unsigned int));\n-static const char *cond_string PROTO ((enum rtx_code));\n+static int h8300_interrupt_function_p PARAMS ((tree));\n+static int h8300_monitor_function_p PARAMS ((tree));\n+static int h8300_os_task_function_p PARAMS ((tree));\n+static void dosize PARAMS ((FILE *, const char *, unsigned int));\n+static const char *cond_string PARAMS ((enum rtx_code));\n \n /* CPU_TYPE, says what cpu we're compiling for.  */\n int cpu_type;\n@@ -865,8 +865,8 @@ eq_operator (x, mode)\n \n int\n handle_pragma (p_getc, p_ungetc, pname)\n-     int (* ATTRIBUTE_UNUSED p_getc) PROTO ((void));\n-     void (* ATTRIBUTE_UNUSED p_ungetc) PROTO ((int));\n+     int (* ATTRIBUTE_UNUSED p_getc) PARAMS ((void));\n+     void (* ATTRIBUTE_UNUSED p_ungetc) PARAMS ((int));\n      const char *pname;\n {\n   int retval = 0;"}, {"sha": "0207955fa541cb6033f577cd860c3f06bf8f4be2", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 87, "deletions": 87, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9", "patch": "@@ -19,110 +19,110 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA. */\n \n /* Functions in i386.c */\n-extern void override_options PROTO((void));\n-extern void order_regs_for_local_alloc PROTO((void));\n-extern void optimization_options PROTO((int, int));\n+extern void override_options PARAMS ((void));\n+extern void order_regs_for_local_alloc PARAMS ((void));\n+extern void optimization_options PARAMS ((int, int));\n \n-extern int ix86_can_use_return_insn_p PROTO((void));\n+extern int ix86_can_use_return_insn_p PARAMS ((void));\n \n-extern void asm_output_function_prefix PROTO((FILE *, char *));\n-extern void load_pic_register PROTO((void));\n-extern HOST_WIDE_INT ix86_compute_frame_size PROTO((HOST_WIDE_INT, int *));\n-extern void ix86_expand_prologue PROTO((void));\n-extern void ix86_expand_epilogue PROTO((void));\n+extern void asm_output_function_prefix PARAMS ((FILE *, char *));\n+extern void load_pic_register PARAMS ((void));\n+extern HOST_WIDE_INT ix86_compute_frame_size PARAMS ((HOST_WIDE_INT, int *));\n+extern void ix86_expand_prologue PARAMS ((void));\n+extern void ix86_expand_epilogue PARAMS ((void));\n \n-extern void ix86_output_function_block_profiler PROTO((FILE *, int));\n-extern void ix86_output_block_profiler PROTO((FILE *, int));\n+extern void ix86_output_function_block_profiler PARAMS ((FILE *, int));\n+extern void ix86_output_block_profiler PARAMS ((FILE *, int));\n \n #ifdef RTX_CODE\n-extern int ix86_aligned_p PROTO((rtx));\n-\n-extern int standard_80387_constant_p PROTO((rtx));\n-extern int symbolic_reference_mentioned_p PROTO((rtx));\n-\n-extern int symbolic_operand PROTO((rtx, enum machine_mode));\n-extern int pic_symbolic_operand PROTO((rtx, enum machine_mode));\n-extern int call_insn_operand PROTO((rtx, enum machine_mode));\n-extern int expander_call_insn_operand PROTO((rtx, enum machine_mode));\n-extern int constant_call_address_operand PROTO((rtx, enum machine_mode));\n-extern int const0_operand PROTO((rtx, enum machine_mode));\n-extern int const1_operand PROTO((rtx, enum machine_mode));\n-extern int const248_operand PROTO((rtx, enum machine_mode));\n-extern int incdec_operand PROTO((rtx, enum machine_mode));\n-extern int reg_no_sp_operand PROTO((rtx, enum machine_mode));\n-extern int q_regs_operand PROTO((rtx, enum machine_mode));\n-extern int non_q_regs_operand PROTO((rtx, enum machine_mode));\n-extern int no_comparison_operator PROTO((rtx, enum machine_mode));\n-extern int fcmov_comparison_operator PROTO((rtx, enum machine_mode));\n-extern int cmp_fp_expander_operand PROTO((rtx, enum machine_mode));\n-extern int ext_register_operand PROTO((rtx, enum machine_mode));\n-extern int binary_fp_operator PROTO((rtx, enum machine_mode));\n-extern int mult_operator PROTO((rtx, enum machine_mode));\n-extern int div_operator PROTO((rtx, enum machine_mode));\n-extern int arith_or_logical_operator PROTO((rtx, enum machine_mode));\n-extern int promotable_binary_operator PROTO((rtx, enum machine_mode));\n-extern int memory_displacement_operand PROTO((rtx, enum machine_mode));\n-extern int cmpsi_operand PROTO((rtx, enum machine_mode));\n-extern int long_memory_operand PROTO((rtx, enum machine_mode));\n-\n-\n-extern int legitimate_pic_address_disp_p PROTO((rtx));\n-extern int legitimate_address_p PROTO((enum machine_mode, rtx, int));\n-extern rtx legitimize_pic_address PROTO((rtx, rtx));\n-extern rtx legitimize_address PROTO((rtx, rtx, enum machine_mode));\n-\n-extern void print_reg PROTO((rtx, int, FILE*));\n-extern void print_operand PROTO((FILE*, rtx, int));\n-extern void print_operand_address PROTO((FILE*, rtx));\n-\n-extern void split_di PROTO((rtx[], int, rtx[], rtx[]));\n-\n-extern const char *output_387_binary_op PROTO((rtx, rtx*));\n-extern const char *output_fix_trunc PROTO((rtx, rtx*));\n-extern const char *output_fp_compare PROTO((rtx, rtx*, int, int));\n-\n-extern void ix86_expand_move PROTO((enum machine_mode, rtx[]));\n-extern void ix86_expand_binary_operator PROTO((enum rtx_code,\n+extern int ix86_aligned_p PARAMS ((rtx));\n+\n+extern int standard_80387_constant_p PARAMS ((rtx));\n+extern int symbolic_reference_mentioned_p PARAMS ((rtx));\n+\n+extern int symbolic_operand PARAMS ((rtx, enum machine_mode));\n+extern int pic_symbolic_operand PARAMS ((rtx, enum machine_mode));\n+extern int call_insn_operand PARAMS ((rtx, enum machine_mode));\n+extern int expander_call_insn_operand PARAMS ((rtx, enum machine_mode));\n+extern int constant_call_address_operand PARAMS ((rtx, enum machine_mode));\n+extern int const0_operand PARAMS ((rtx, enum machine_mode));\n+extern int const1_operand PARAMS ((rtx, enum machine_mode));\n+extern int const248_operand PARAMS ((rtx, enum machine_mode));\n+extern int incdec_operand PARAMS ((rtx, enum machine_mode));\n+extern int reg_no_sp_operand PARAMS ((rtx, enum machine_mode));\n+extern int q_regs_operand PARAMS ((rtx, enum machine_mode));\n+extern int non_q_regs_operand PARAMS ((rtx, enum machine_mode));\n+extern int no_comparison_operator PARAMS ((rtx, enum machine_mode));\n+extern int fcmov_comparison_operator PARAMS ((rtx, enum machine_mode));\n+extern int cmp_fp_expander_operand PARAMS ((rtx, enum machine_mode));\n+extern int ext_register_operand PARAMS ((rtx, enum machine_mode));\n+extern int binary_fp_operator PARAMS ((rtx, enum machine_mode));\n+extern int mult_operator PARAMS ((rtx, enum machine_mode));\n+extern int div_operator PARAMS ((rtx, enum machine_mode));\n+extern int arith_or_logical_operator PARAMS ((rtx, enum machine_mode));\n+extern int promotable_binary_operator PARAMS ((rtx, enum machine_mode));\n+extern int memory_displacement_operand PARAMS ((rtx, enum machine_mode));\n+extern int cmpsi_operand PARAMS ((rtx, enum machine_mode));\n+extern int long_memory_operand PARAMS ((rtx, enum machine_mode));\n+\n+\n+extern int legitimate_pic_address_disp_p PARAMS ((rtx));\n+extern int legitimate_address_p PARAMS ((enum machine_mode, rtx, int));\n+extern rtx legitimize_pic_address PARAMS ((rtx, rtx));\n+extern rtx legitimize_address PARAMS ((rtx, rtx, enum machine_mode));\n+\n+extern void print_reg PARAMS ((rtx, int, FILE*));\n+extern void print_operand PARAMS ((FILE*, rtx, int));\n+extern void print_operand_address PARAMS ((FILE*, rtx));\n+\n+extern void split_di PARAMS ((rtx[], int, rtx[], rtx[]));\n+\n+extern const char *output_387_binary_op PARAMS ((rtx, rtx*));\n+extern const char *output_fix_trunc PARAMS ((rtx, rtx*));\n+extern const char *output_fp_compare PARAMS ((rtx, rtx*, int, int));\n+\n+extern void ix86_expand_move PARAMS ((enum machine_mode, rtx[]));\n+extern void ix86_expand_binary_operator PARAMS ((enum rtx_code,\n \t\t\t\t\t       enum machine_mode, rtx[]));\n-extern int ix86_binary_operator_ok PROTO((enum rtx_code, enum machine_mode,\n+extern int ix86_binary_operator_ok PARAMS ((enum rtx_code, enum machine_mode,\n \t\t\t\t\t  rtx[]));\n-extern void ix86_expand_unary_operator PROTO((enum rtx_code, enum machine_mode,\n+extern void ix86_expand_unary_operator PARAMS ((enum rtx_code, enum machine_mode,\n \t\t\t\t\t      rtx[]));\n-extern int ix86_unary_operator_ok PROTO((enum rtx_code, enum machine_mode,\n+extern int ix86_unary_operator_ok PARAMS ((enum rtx_code, enum machine_mode,\n \t\t\t\t\t rtx[]));\n-extern void ix86_expand_branch PROTO((enum rtx_code, int, rtx));\n-extern int ix86_expand_setcc PROTO((enum rtx_code, int, rtx));\n-extern int ix86_expand_int_movcc PROTO((rtx[]));\n-extern int ix86_expand_fp_movcc PROTO((rtx[]));\n-extern int ix86_split_long_move PROTO((rtx[]));\n-extern void ix86_split_ashldi PROTO((rtx *, rtx));\n-extern void ix86_split_ashrdi PROTO((rtx *, rtx));\n-extern void ix86_split_lshrdi PROTO((rtx *, rtx));\n-extern void ix86_expand_strlensi_unroll_1 PROTO((rtx, rtx, rtx));\n-\n-extern rtx assign_386_stack_local PROTO((enum machine_mode, int));\n-extern int ix86_attr_length_default PROTO((rtx));\n-\n-extern int ix86_issue_rate PROTO((void));\n-extern int ix86_adjust_cost PROTO((rtx, rtx, rtx, int));\n-extern void ix86_sched_init PROTO((FILE *, int));\n-extern int ix86_sched_reorder PROTO((FILE *, int, rtx *, int, int));\n-extern int ix86_variable_issue PROTO((FILE *, int, rtx, int));\n+extern void ix86_expand_branch PARAMS ((enum rtx_code, int, rtx));\n+extern int ix86_expand_setcc PARAMS ((enum rtx_code, int, rtx));\n+extern int ix86_expand_int_movcc PARAMS ((rtx[]));\n+extern int ix86_expand_fp_movcc PARAMS ((rtx[]));\n+extern int ix86_split_long_move PARAMS ((rtx[]));\n+extern void ix86_split_ashldi PARAMS ((rtx *, rtx));\n+extern void ix86_split_ashrdi PARAMS ((rtx *, rtx));\n+extern void ix86_split_lshrdi PARAMS ((rtx *, rtx));\n+extern void ix86_expand_strlensi_unroll_1 PARAMS ((rtx, rtx, rtx));\n+\n+extern rtx assign_386_stack_local PARAMS ((enum machine_mode, int));\n+extern int ix86_attr_length_default PARAMS ((rtx));\n+\n+extern int ix86_issue_rate PARAMS ((void));\n+extern int ix86_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n+extern void ix86_sched_init PARAMS ((FILE *, int));\n+extern int ix86_sched_reorder PARAMS ((FILE *, int, rtx *, int, int));\n+extern int ix86_variable_issue PARAMS ((FILE *, int, rtx, int));\n \n #ifdef TREE_CODE\n-extern void init_cumulative_args PROTO((CUMULATIVE_ARGS *, tree, rtx));\n-extern rtx function_arg PROTO((CUMULATIVE_ARGS *, enum machine_mode, tree, int));\n-extern void function_arg_advance PROTO((CUMULATIVE_ARGS *, enum machine_mode,\n+extern void init_cumulative_args PARAMS ((CUMULATIVE_ARGS *, tree, rtx));\n+extern rtx function_arg PARAMS ((CUMULATIVE_ARGS *, enum machine_mode, tree, int));\n+extern void function_arg_advance PARAMS ((CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t\ttree, int));\n #endif\n \n #endif\n \n #ifdef TREE_CODE\n-extern int ix86_valid_decl_attribute_p PROTO((tree, tree, tree, tree));\n-extern int ix86_valid_type_attribute_p PROTO((tree, tree, tree, tree));\n-extern int ix86_comp_type_attributes PROTO((tree, tree));\n-extern int ix86_return_pops_args PROTO((tree, tree, int));\n+extern int ix86_valid_decl_attribute_p PARAMS ((tree, tree, tree, tree));\n+extern int ix86_valid_type_attribute_p PARAMS ((tree, tree, tree, tree));\n+extern int ix86_comp_type_attributes PARAMS ((tree, tree));\n+extern int ix86_return_pops_args PARAMS ((tree, tree, int));\n #endif\n \n "}, {"sha": "58976084e50a7d28fe12ca748091d6e16fc7996a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9", "patch": "@@ -302,29 +302,29 @@ int ix86_align_loops;\n /* Power of two alignment for non-loop jumps. */\n int ix86_align_jumps;\n \f\n-static void output_pic_addr_const PROTO ((FILE *, rtx, int));\n-static void put_condition_code PROTO ((enum rtx_code, enum machine_mode,\n+static void output_pic_addr_const PARAMS ((FILE *, rtx, int));\n+static void put_condition_code PARAMS ((enum rtx_code, enum machine_mode,\n \t\t\t\t       int, int, FILE *));\n-static enum rtx_code unsigned_comparison PROTO ((enum rtx_code code));\n-static rtx ix86_expand_int_compare PROTO ((enum rtx_code, rtx, rtx));\n-static rtx ix86_expand_fp_compare PROTO ((enum rtx_code, rtx, rtx, int));\n-static rtx ix86_expand_compare PROTO ((enum rtx_code, int));\n-static rtx gen_push PROTO ((rtx));\n-static int memory_address_length PROTO ((rtx addr));\n-static int ix86_flags_dependant PROTO ((rtx, rtx, enum attr_type));\n-static int ix86_agi_dependant PROTO ((rtx, rtx, enum attr_type));\n-static int ix86_safe_length PROTO ((rtx));\n-static enum attr_memory ix86_safe_memory PROTO ((rtx));\n-static enum attr_pent_pair ix86_safe_pent_pair PROTO ((rtx));\n-static enum attr_ppro_uops ix86_safe_ppro_uops PROTO ((rtx));\n-static void ix86_dump_ppro_packet PROTO ((FILE *));\n-static void ix86_reorder_insn PROTO ((rtx *, rtx *));\n-static rtx * ix86_pent_find_pair PROTO ((rtx *, rtx *, enum attr_pent_pair,\n+static enum rtx_code unsigned_comparison PARAMS ((enum rtx_code code));\n+static rtx ix86_expand_int_compare PARAMS ((enum rtx_code, rtx, rtx));\n+static rtx ix86_expand_fp_compare PARAMS ((enum rtx_code, rtx, rtx, int));\n+static rtx ix86_expand_compare PARAMS ((enum rtx_code, int));\n+static rtx gen_push PARAMS ((rtx));\n+static int memory_address_length PARAMS ((rtx addr));\n+static int ix86_flags_dependant PARAMS ((rtx, rtx, enum attr_type));\n+static int ix86_agi_dependant PARAMS ((rtx, rtx, enum attr_type));\n+static int ix86_safe_length PARAMS ((rtx));\n+static enum attr_memory ix86_safe_memory PARAMS ((rtx));\n+static enum attr_pent_pair ix86_safe_pent_pair PARAMS ((rtx));\n+static enum attr_ppro_uops ix86_safe_ppro_uops PARAMS ((rtx));\n+static void ix86_dump_ppro_packet PARAMS ((FILE *));\n+static void ix86_reorder_insn PARAMS ((rtx *, rtx *));\n+static rtx * ix86_pent_find_pair PARAMS ((rtx *, rtx *, enum attr_pent_pair,\n \t\t\t\t\t rtx));\n-static void ix86_init_machine_status PROTO ((struct function *));\n-static void ix86_mark_machine_status PROTO ((struct function *));\n-static void ix86_split_to_parts PROTO ((rtx, rtx *, enum machine_mode));\n-static int ix86_safe_length_prefix PROTO ((rtx));\n+static void ix86_init_machine_status PARAMS ((struct function *));\n+static void ix86_mark_machine_status PARAMS ((struct function *));\n+static void ix86_split_to_parts PARAMS ((rtx, rtx *, enum machine_mode));\n+static int ix86_safe_length_prefix PARAMS ((rtx));\n \n struct ix86_address\n {"}, {"sha": "7912a0a4f4469f5ead02d1be22aa2d640ea2c6d0", "filename": "gcc/config/m32r/m32r-protos.h", "status": "modified", "additions": 71, "deletions": 71, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h?ref=f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes for m32r.c functions used in the md file & elsewhere.\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -22,88 +22,88 @@ Boston, MA 02111-1307, USA.  */\n    compilcations.  */\n #define Mmode enum machine_mode\n \n-extern void   sbss_section\t\t\tPROTO ((void));\n-extern void   sdata_section\t\t\tPROTO ((void));\n-extern void   m32r_init\t\t\t\tPROTO ((void));\n-extern void   m32r_init_expanders\t\tPROTO ((void));\n-extern unsigned m32r_compute_frame_size\t\tPROTO ((int));\n-extern int    m32r_first_insn_address\t\tPROTO ((void));\n-extern void   m32r_expand_prologue\t\tPROTO ((void));\n-extern void   m32r_output_function_prologue\tPROTO ((FILE *, int));\n-extern void   m32r_output_function_epilogue\tPROTO ((FILE *, int));\n-extern void   m32r_finalize_pic\t\t\tPROTO ((void));\n-extern void   m32r_asm_file_start\t\tPROTO ((FILE *));\n-extern void   m32r_sched_init \t\t\tPROTO ((FILE *, int));\n-extern int    direct_return \t\t\tPROTO ((void));\n+extern void   sbss_section\t\t\tPARAMS ((void));\n+extern void   sdata_section\t\t\tPARAMS ((void));\n+extern void   m32r_init\t\t\t\tPARAMS ((void));\n+extern void   m32r_init_expanders\t\tPARAMS ((void));\n+extern unsigned m32r_compute_frame_size\t\tPARAMS ((int));\n+extern int    m32r_first_insn_address\t\tPARAMS ((void));\n+extern void   m32r_expand_prologue\t\tPARAMS ((void));\n+extern void   m32r_output_function_prologue\tPARAMS ((FILE *, int));\n+extern void   m32r_output_function_epilogue\tPARAMS ((FILE *, int));\n+extern void   m32r_finalize_pic\t\t\tPARAMS ((void));\n+extern void   m32r_asm_file_start\t\tPARAMS ((FILE *));\n+extern void   m32r_sched_init \t\t\tPARAMS ((FILE *, int));\n+extern int    direct_return \t\t\tPARAMS ((void));\n #ifdef TREE_CODE\n-extern int    m32r_valid_machine_decl_attribute\tPROTO ((tree, tree, tree, tree));\n-extern int    m32r_comp_type_attributes\t\tPROTO ((tree, tree));\n-extern void   m32r_select_section\t\tPROTO ((tree, int));\n-extern void   m32r_encode_section_info\t\tPROTO ((tree));\n-extern enum m32r_function_type m32r_compute_function_type PROTO ((tree));\n-extern void   m32r_select_section \t\tPROTO ((tree, int));\n-extern void   m32r_set_default_type_attributes  PROTO ((tree));\n+extern int    m32r_valid_machine_decl_attribute\tPARAMS ((tree, tree, tree, tree));\n+extern int    m32r_comp_type_attributes\t\tPARAMS ((tree, tree));\n+extern void   m32r_select_section\t\tPARAMS ((tree, int));\n+extern void   m32r_encode_section_info\t\tPARAMS ((tree));\n+extern enum m32r_function_type m32r_compute_function_type PARAMS ((tree));\n+extern void   m32r_select_section \t\tPARAMS ((tree, int));\n+extern void   m32r_set_default_type_attributes  PARAMS ((tree));\n \n #ifdef HAVE_MACHINE_MODES\n-extern void   m32r_setup_incoming_varargs\tPROTO ((CUMULATIVE_ARGS *, Mmode, tree, int *, int));\n-extern int    function_arg_partial_nregs\tPROTO ((CUMULATIVE_ARGS *, Mmode, tree, int));\n+extern void   m32r_setup_incoming_varargs\tPARAMS ((CUMULATIVE_ARGS *, Mmode, tree, int *, int));\n+extern int    function_arg_partial_nregs\tPARAMS ((CUMULATIVE_ARGS *, Mmode, tree, int));\n #endif\n #endif /* TREE_CODE */\n \n #ifdef RTX_CODE\n-extern int    easy_di_const\t\t\tPROTO ((rtx));\n-extern int    easy_df_const\t\t\tPROTO ((rtx));\n-extern int    m32r_select_cc_mode\t\tPROTO ((int, rtx, rtx));\n-extern rtx    gen_compare\t\t\tPROTO ((enum rtx_code, rtx, rtx, int));\n-extern rtx    gen_split_move_double\t\tPROTO ((rtx *));\n-extern int    m32r_address_code\t\t\tPROTO ((rtx));\n-extern void   m32r_initialize_trampoline\tPROTO ((rtx, rtx, rtx));\n-extern int    zero_and_one\t\t\tPROTO ((rtx, rtx));\n-extern char * emit_cond_move\t\t\tPROTO ((rtx *, rtx));\n-extern char * m32r_output_block_move \t\tPROTO ((rtx, rtx *));\n-extern void   m32r_expand_block_move \t\tPROTO ((rtx *));\n-extern void   m32r_print_operand\t\tPROTO ((FILE *, rtx, int));\n-extern void   m32r_print_operand_address\tPROTO ((FILE *, rtx));\n-extern int    m32r_address_cost \t\tPROTO ((rtx));\n-extern int    m32r_adjust_cost \t\t\tPROTO ((rtx, rtx, rtx, int));\n-extern int    m32r_adjust_priority \t\tPROTO ((rtx, int));\n-extern void   m32r_sched_reorder \t\tPROTO ((FILE *, int, rtx *, int));\n-extern int    m32r_sched_variable_issue \tPROTO ((FILE *, int, rtx, int));\n-extern int    m32r_not_same_reg \t\tPROTO ((rtx, rtx));\n+extern int    easy_di_const\t\t\tPARAMS ((rtx));\n+extern int    easy_df_const\t\t\tPARAMS ((rtx));\n+extern int    m32r_select_cc_mode\t\tPARAMS ((int, rtx, rtx));\n+extern rtx    gen_compare\t\t\tPARAMS ((enum rtx_code, rtx, rtx, int));\n+extern rtx    gen_split_move_double\t\tPARAMS ((rtx *));\n+extern int    m32r_address_code\t\t\tPARAMS ((rtx));\n+extern void   m32r_initialize_trampoline\tPARAMS ((rtx, rtx, rtx));\n+extern int    zero_and_one\t\t\tPARAMS ((rtx, rtx));\n+extern char * emit_cond_move\t\t\tPARAMS ((rtx *, rtx));\n+extern char * m32r_output_block_move \t\tPARAMS ((rtx, rtx *));\n+extern void   m32r_expand_block_move \t\tPARAMS ((rtx *));\n+extern void   m32r_print_operand\t\tPARAMS ((FILE *, rtx, int));\n+extern void   m32r_print_operand_address\tPARAMS ((FILE *, rtx));\n+extern int    m32r_address_cost \t\tPARAMS ((rtx));\n+extern int    m32r_adjust_cost \t\t\tPARAMS ((rtx, rtx, rtx, int));\n+extern int    m32r_adjust_priority \t\tPARAMS ((rtx, int));\n+extern void   m32r_sched_reorder \t\tPARAMS ((FILE *, int, rtx *, int));\n+extern int    m32r_sched_variable_issue \tPARAMS ((FILE *, int, rtx, int));\n+extern int    m32r_not_same_reg \t\tPARAMS ((rtx, rtx));\n \n #ifdef HAVE_MACHINE_MODES\n-extern int    call_address_operand\t\tPROTO ((rtx, Mmode));\n-extern int    call_operand\t\t\tPROTO ((rtx, Mmode));\n-extern int    symbolic_operand\t\t\tPROTO ((rtx, Mmode));\n-extern int    small_data_operand\t\tPROTO ((rtx, Mmode));\n-extern int    addr24_operand\t\t\tPROTO ((rtx, Mmode));\n-extern int    addr32_operand\t\t\tPROTO ((rtx, Mmode));\n-extern int    call26_operand\t\t\tPROTO ((rtx, Mmode));\n-extern int    seth_add3_operand\t\t\tPROTO ((rtx, Mmode));\n-extern int    cmp_int16_operand\t\t\tPROTO ((rtx, Mmode));\n-extern int    uint16_operand\t\t\tPROTO ((rtx, Mmode));\n-extern int    reg_or_int16_operand\t\tPROTO ((rtx, Mmode));\n-extern int    reg_or_uint16_operand\t\tPROTO ((rtx, Mmode));\n-extern int    reg_or_cmp_int16_operand\t\tPROTO ((rtx, Mmode));\n-extern int    two_insn_const_operand\t\tPROTO ((rtx, Mmode));\n-extern int    move_src_operand\t\t\tPROTO ((rtx, Mmode));\n-extern int    move_double_src_operand\t\tPROTO ((rtx, Mmode));\n-extern int    move_dest_operand\t\t\tPROTO ((rtx, Mmode));\n-extern int    eqne_comparison_operator\t\tPROTO ((rtx, Mmode));\n-extern int    signed_comparison_operator\tPROTO ((rtx, Mmode));\n-extern int    memreg_operand\t\t\tPROTO ((rtx, Mmode));\n-extern int    small_insn_p\t\t\tPROTO ((rtx, Mmode));\n-extern int    large_insn_p\t\t\tPROTO ((rtx, Mmode));\n-extern int    conditional_move_operand\t\tPROTO ((rtx, Mmode));\n-extern int    carry_compare_operand\t\tPROTO ((rtx, Mmode));\n-extern int    m32r_block_immediate_operand \tPROTO ((rtx, Mmode));\n-extern int    extend_operand\t\t\tPROTO ((rtx, Mmode));\n-extern int    reg_or_eq_int16_operand\t\tPROTO ((rtx, Mmode));\n-extern int    int8_operand\t\t\tPROTO ((rtx, Mmode));\n+extern int    call_address_operand\t\tPARAMS ((rtx, Mmode));\n+extern int    call_operand\t\t\tPARAMS ((rtx, Mmode));\n+extern int    symbolic_operand\t\t\tPARAMS ((rtx, Mmode));\n+extern int    small_data_operand\t\tPARAMS ((rtx, Mmode));\n+extern int    addr24_operand\t\t\tPARAMS ((rtx, Mmode));\n+extern int    addr32_operand\t\t\tPARAMS ((rtx, Mmode));\n+extern int    call26_operand\t\t\tPARAMS ((rtx, Mmode));\n+extern int    seth_add3_operand\t\t\tPARAMS ((rtx, Mmode));\n+extern int    cmp_int16_operand\t\t\tPARAMS ((rtx, Mmode));\n+extern int    uint16_operand\t\t\tPARAMS ((rtx, Mmode));\n+extern int    reg_or_int16_operand\t\tPARAMS ((rtx, Mmode));\n+extern int    reg_or_uint16_operand\t\tPARAMS ((rtx, Mmode));\n+extern int    reg_or_cmp_int16_operand\t\tPARAMS ((rtx, Mmode));\n+extern int    two_insn_const_operand\t\tPARAMS ((rtx, Mmode));\n+extern int    move_src_operand\t\t\tPARAMS ((rtx, Mmode));\n+extern int    move_double_src_operand\t\tPARAMS ((rtx, Mmode));\n+extern int    move_dest_operand\t\t\tPARAMS ((rtx, Mmode));\n+extern int    eqne_comparison_operator\t\tPARAMS ((rtx, Mmode));\n+extern int    signed_comparison_operator\tPARAMS ((rtx, Mmode));\n+extern int    memreg_operand\t\t\tPARAMS ((rtx, Mmode));\n+extern int    small_insn_p\t\t\tPARAMS ((rtx, Mmode));\n+extern int    large_insn_p\t\t\tPARAMS ((rtx, Mmode));\n+extern int    conditional_move_operand\t\tPARAMS ((rtx, Mmode));\n+extern int    carry_compare_operand\t\tPARAMS ((rtx, Mmode));\n+extern int    m32r_block_immediate_operand \tPARAMS ((rtx, Mmode));\n+extern int    extend_operand\t\t\tPARAMS ((rtx, Mmode));\n+extern int    reg_or_eq_int16_operand\t\tPARAMS ((rtx, Mmode));\n+extern int    int8_operand\t\t\tPARAMS ((rtx, Mmode));\n #endif /* HAVE_MACHINE_MODES */\n \n #ifdef TREE_CODE\n-extern struct rtx_def * m32r_va_arg\t\tPROTO ((tree, tree));\n+extern struct rtx_def * m32r_va_arg\t\tPARAMS ((tree, tree));\n #endif /* TREE_CODE */\n #endif /* RTX_CODE */\n "}, {"sha": "b1e6cd8b3799924a6a1e5b29884b487346078e61", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on the Mitsubishi M32R cpu.\n-   Copyright (C) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 97-99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -56,7 +56,7 @@ enum m32r_sdata m32r_sdata;\n int m32r_sched_odd_word_p;\n \n /* Forward declaration.  */\n-static void init_reg_tables\t\t\tPROTO ((void));\n+static void init_reg_tables\t\t\tPARAMS ((void));\n \n /* Called by OVERRIDE_OPTIONS to initialize various things.  */\n \n@@ -221,7 +221,7 @@ static tree large_ident1;\n static tree large_ident2;\n \n static void\n-init_idents PROTO ((void))\n+init_idents PARAMS ((void))\n {\n   if (interrupt_ident1 == 0)\n     {"}, {"sha": "62350e5906a85e4b9c5986431a114f6b35682684", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9", "patch": "@@ -86,30 +86,30 @@ enum internal_test {\n \n \n struct constant;\n-static enum internal_test map_test_to_internal_test\tPROTO ((enum rtx_code));\n-static int mips16_simple_memory_operand\t\tPROTO ((rtx, rtx,\n+static enum internal_test map_test_to_internal_test\tPARAMS ((enum rtx_code));\n+static int mips16_simple_memory_operand\t\tPARAMS ((rtx, rtx,\n \t\t\t\t\t\t\tenum machine_mode));\n-static int m16_check_op\t\t\t\tPROTO ((rtx, int, int, int));\n-static void block_move_loop\t\t\tPROTO ((rtx, rtx, int, int,\n+static int m16_check_op\t\t\t\tPARAMS ((rtx, int, int, int));\n+static void block_move_loop\t\t\tPARAMS ((rtx, rtx, int, int,\n \t\t\t\t\t\t\trtx, rtx));\n-static void block_move_call\t\t\tPROTO ((rtx, rtx, rtx));\n-static FILE *mips_make_temp_file\t\tPROTO ((void));\n-static void save_restore_insns\t\t\tPROTO ((int, rtx,\n+static void block_move_call\t\t\tPARAMS ((rtx, rtx, rtx));\n+static FILE *mips_make_temp_file\t\tPARAMS ((void));\n+static void save_restore_insns\t\t\tPARAMS ((int, rtx,\n \t\t\t\t\t\t\tlong, FILE *));\n-static void mips16_output_gp_offset\t\tPROTO ((FILE *, rtx));\n-static void mips16_fp_args\t\t\tPROTO ((FILE *, int, int));\n-static void build_mips16_function_stub\t\tPROTO ((FILE *));\n-static void mips16_optimize_gp\t\t\tPROTO ((rtx));\n-static rtx add_constant\t\t\t\tPROTO ((struct constant **,\n+static void mips16_output_gp_offset\t\tPARAMS ((FILE *, rtx));\n+static void mips16_fp_args\t\t\tPARAMS ((FILE *, int, int));\n+static void build_mips16_function_stub\t\tPARAMS ((FILE *));\n+static void mips16_optimize_gp\t\t\tPARAMS ((rtx));\n+static rtx add_constant\t\t\t\tPARAMS ((struct constant **,\n \t\t\t\t\t\t\trtx,\n \t\t\t\t\t\t\tenum machine_mode));\n-static void dump_constants\t\t\tPROTO ((struct constant *,\n+static void dump_constants\t\t\tPARAMS ((struct constant *,\n \t\t\t\t\t\t\trtx));\n-static rtx mips_find_symbol\t\t\tPROTO ((rtx));\n-static void abort_with_insn\t\t\tPROTO ((rtx, const char *))\n+static rtx mips_find_symbol\t\t\tPARAMS ((rtx));\n+static void abort_with_insn\t\t\tPARAMS ((rtx, const char *))\n   ATTRIBUTE_NORETURN;\n-static int symbolic_expression_p                PROTO ((rtx));\n-static void mips_add_gc_roots                   PROTO ((void));\n+static int symbolic_expression_p                PARAMS ((rtx));\n+static void mips_add_gc_roots                   PARAMS ((void));\n \n /* Global variables for machine-dependent things.  */\n "}, {"sha": "895123bbc6af1fa9cec931a2fb3c8603a5861fd4", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9", "patch": "@@ -1930,7 +1930,7 @@\n   rtx dummy = gen_rtx (SIGN_EXTEND, DImode, const0_rtx);\n   rtx dummy2 = gen_rtx_LSHIFTRT (DImode, const0_rtx, const0_rtx);\n #ifndef NO_MD_PROTOTYPES\n-  rtx (*genfn) PROTO((rtx, rtx, rtx, rtx, rtx, rtx));\n+  rtx (*genfn) PARAMS ((rtx, rtx, rtx, rtx, rtx, rtx));\n #else\n   rtx (*genfn) ();\n #endif\n@@ -1952,7 +1952,7 @@\n   rtx dummy = gen_rtx (ZERO_EXTEND, DImode, const0_rtx);\n   rtx dummy2 = gen_rtx_LSHIFTRT (DImode, const0_rtx, const0_rtx);\n #ifndef NO_MD_PROTOTYPES\n-  rtx (*genfn) PROTO((rtx, rtx, rtx, rtx, rtx, rtx));\n+  rtx (*genfn) PARAMS ((rtx, rtx, rtx, rtx, rtx, rtx));\n #else\n   rtx (*genfn) ();\n #endif"}, {"sha": "063dcdf94f99c5548ab6698685ca051c89dcb5c4", "filename": "gcc/config/sparc/gmon-sol2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9/gcc%2Fconfig%2Fsparc%2Fgmon-sol2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9/gcc%2Fconfig%2Fsparc%2Fgmon-sol2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fgmon-sol2.c?ref=f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9", "patch": "@@ -85,9 +85,9 @@ static int\ts_scale;\n \n #define\tMSG \"No space for profiling buffer(s)\\n\"\n \n-static void moncontrol\tPROTO ((int));\n-extern void monstartup\tPROTO ((char *, char *));\n-extern void _mcleanup\tPROTO ((void));\n+static void moncontrol\tPARAMS ((int));\n+extern void monstartup\tPARAMS ((char *, char *));\n+extern void _mcleanup\tPARAMS ((void));\n \n void monstartup(lowpc, highpc)\n     char\t*lowpc;\n@@ -266,7 +266,7 @@ _mcleanup()\n  * -- [eichin:19920702.1107EST]\n  */\n \n-static void internal_mcount PROTO((char *, unsigned short *)) ATTRIBUTE_UNUSED;\n+static void internal_mcount PARAMS ((char *, unsigned short *)) ATTRIBUTE_UNUSED;\n \n /* i7 == last ret, -> frompcindex */\n /* o7 == current ret, -> selfpc */"}, {"sha": "bacdfcda3cf618e67ef9e2208eac5330374db752", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=f6da8bc3eed45f2884eb12d5db67b1d492f6a7e9", "patch": "@@ -108,34 +108,34 @@ char leaf_reg_remap[] =\n static const char *frame_base_name;\n static int frame_base_offset;\n \n-static rtx pic_setup_code\tPROTO((void));\n-static void sparc_init_modes\tPROTO((void));\n-static int save_regs\t\tPROTO((FILE *, int, int, const char *,\n+static rtx pic_setup_code\tPARAMS ((void));\n+static void sparc_init_modes\tPARAMS ((void));\n+static int save_regs\t\tPARAMS ((FILE *, int, int, const char *,\n \t\t\t\t       int, int, int));\n-static int restore_regs\t\tPROTO((FILE *, int, int, const char *, int, int));\n-static void build_big_number\tPROTO((FILE *, int, const char *));\n-static int function_arg_slotno\tPROTO((const CUMULATIVE_ARGS *,\n+static int restore_regs\t\tPARAMS ((FILE *, int, int, const char *, int, int));\n+static void build_big_number\tPARAMS ((FILE *, int, const char *));\n+static int function_arg_slotno\tPARAMS ((const CUMULATIVE_ARGS *,\n \t\t\t\t       enum machine_mode, tree, int, int,\n \t\t\t\t       int *, int *));\n \n-static int supersparc_adjust_cost PROTO((rtx, rtx, rtx, int));\n-static int hypersparc_adjust_cost PROTO((rtx, rtx, rtx, int));\n-static int ultrasparc_adjust_cost PROTO((rtx, rtx, rtx, int));\n-\n-static void sparc_output_addr_vec PROTO((rtx));\n-static void sparc_output_addr_diff_vec PROTO((rtx));\n-static void sparc_output_deferred_case_vectors PROTO((void));\n-static void sparc_add_gc_roots    PROTO ((void));\n-static void mark_ultrasparc_pipeline_state PROTO ((void *));\n-static int check_return_regs PROTO ((rtx));\n-static int epilogue_renumber PROTO ((rtx *, int));\n-static int ultra_cmove_results_ready_p PROTO ((rtx));\n-static int ultra_fpmode_conflict_exists PROTO ((enum machine_mode));\n-static rtx *ultra_find_type PROTO ((int, rtx *, int));\n-static void ultra_build_types_avail PROTO ((rtx *, int));\n-static void ultra_flush_pipeline PROTO ((void));\n-static void ultra_rescan_pipeline_state PROTO ((rtx *, int));\n-static int set_extends PROTO ((rtx, rtx));\n+static int supersparc_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n+static int hypersparc_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n+static int ultrasparc_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n+\n+static void sparc_output_addr_vec PARAMS ((rtx));\n+static void sparc_output_addr_diff_vec PARAMS ((rtx));\n+static void sparc_output_deferred_case_vectors PARAMS ((void));\n+static void sparc_add_gc_roots    PARAMS ((void));\n+static void mark_ultrasparc_pipeline_state PARAMS ((void *));\n+static int check_return_regs PARAMS ((rtx));\n+static int epilogue_renumber PARAMS ((rtx *, int));\n+static int ultra_cmove_results_ready_p PARAMS ((rtx));\n+static int ultra_fpmode_conflict_exists PARAMS ((enum machine_mode));\n+static rtx *ultra_find_type PARAMS ((int, rtx *, int));\n+static void ultra_build_types_avail PARAMS ((rtx *, int));\n+static void ultra_flush_pipeline PARAMS ((void));\n+static void ultra_rescan_pipeline_state PARAMS ((rtx *, int));\n+static int set_extends PARAMS ((rtx, rtx));\n \f\n /* Option handling.  */\n \n@@ -1421,10 +1421,10 @@ sparc_emit_set_symbolic_const64 (op0, op1, temp1)\n /* These avoid problems when cross compiling.  If we do not\n    go through all this hair then the optimizer will see\n    invalid REG_EQUAL notes or in some cases none at all.  */\n-static void sparc_emit_set_safe_HIGH64 PROTO ((rtx, HOST_WIDE_INT));\n-static rtx gen_safe_SET64 PROTO ((rtx, HOST_WIDE_INT));\n-static rtx gen_safe_OR64 PROTO ((rtx, HOST_WIDE_INT));\n-static rtx gen_safe_XOR64 PROTO ((rtx, HOST_WIDE_INT));\n+static void sparc_emit_set_safe_HIGH64 PARAMS ((rtx, HOST_WIDE_INT));\n+static rtx gen_safe_SET64 PARAMS ((rtx, HOST_WIDE_INT));\n+static rtx gen_safe_OR64 PARAMS ((rtx, HOST_WIDE_INT));\n+static rtx gen_safe_XOR64 PARAMS ((rtx, HOST_WIDE_INT));\n \n #if HOST_BITS_PER_WIDE_INT == 64\n #define GEN_HIGHINT64(__x)\t\tGEN_INT ((__x) & 0xfffffc00)\n@@ -1486,7 +1486,7 @@ gen_safe_XOR64 (src, val)\n    opportunities.  */\n \n static void sparc_emit_set_const64_quick1\n-\tPROTO((rtx, rtx, unsigned HOST_WIDE_INT, int));\n+\tPARAMS ((rtx, rtx, unsigned HOST_WIDE_INT, int));\n \n static void\n sparc_emit_set_const64_quick1 (op0, temp, low_bits, is_neg)\n@@ -1528,7 +1528,7 @@ sparc_emit_set_const64_quick1 (op0, temp, low_bits, is_neg)\n }\n \n static void sparc_emit_set_const64_quick2\n-\tPROTO((rtx, rtx, unsigned HOST_WIDE_INT,\n+\tPARAMS ((rtx, rtx, unsigned HOST_WIDE_INT,\n \t       unsigned HOST_WIDE_INT, int));\n \n static void\n@@ -1569,7 +1569,7 @@ sparc_emit_set_const64_quick2 (op0, temp, high_bits, low_immediate, shift_count)\n }\n \n static void sparc_emit_set_const64_longway\n-\tPROTO((rtx, rtx, unsigned HOST_WIDE_INT, unsigned HOST_WIDE_INT));\n+\tPARAMS ((rtx, rtx, unsigned HOST_WIDE_INT, unsigned HOST_WIDE_INT));\n \n /* Full 64-bit constant decomposition.  Even though this is the\n    'worst' case, we still optimize a few things away.  */\n@@ -1677,7 +1677,7 @@ sparc_emit_set_const64_longway (op0, temp, high_bits, low_bits)\n \n /* Analyze a 64-bit constant for certain properties. */\n static void analyze_64bit_constant\n-\tPROTO((unsigned HOST_WIDE_INT,\n+\tPARAMS ((unsigned HOST_WIDE_INT,\n \t       unsigned HOST_WIDE_INT,\n \t       int *, int *, int *));\n \n@@ -1746,7 +1746,7 @@ analyze_64bit_constant (high_bits, low_bits, hbsp, lbsp, abbasp)\n }\n \n static int const64_is_2insns\n-\tPROTO((unsigned HOST_WIDE_INT, unsigned HOST_WIDE_INT));\n+\tPARAMS ((unsigned HOST_WIDE_INT, unsigned HOST_WIDE_INT));\n \n static int\n const64_is_2insns (high_bits, low_bits)\n@@ -1774,7 +1774,7 @@ const64_is_2insns (high_bits, low_bits)\n }\n \n static unsigned HOST_WIDE_INT create_simple_focus_bits\n-\tPROTO((unsigned HOST_WIDE_INT, unsigned HOST_WIDE_INT,\n+\tPARAMS ((unsigned HOST_WIDE_INT, unsigned HOST_WIDE_INT,\n \t       int, int));\n \n static unsigned HOST_WIDE_INT\n@@ -3782,13 +3782,13 @@ struct function_arg_record_value_parms\n };\n \n static void function_arg_record_value_3\n-\tPROTO((int, struct function_arg_record_value_parms *));\n+\tPARAMS ((int, struct function_arg_record_value_parms *));\n static void function_arg_record_value_2\n-\tPROTO((tree, int, struct function_arg_record_value_parms *));\n+\tPARAMS ((tree, int, struct function_arg_record_value_parms *));\n static void function_arg_record_value_1\n-        PROTO((tree, int, struct function_arg_record_value_parms *));\n+        PARAMS ((tree, int, struct function_arg_record_value_parms *));\n static rtx function_arg_record_value\n-\tPROTO((tree, enum machine_mode, int, int, int));\n+\tPARAMS ((tree, enum machine_mode, int, int, int));\n \n static void\n function_arg_record_value_1 (type, startbitpos, parms)\n@@ -6884,8 +6884,8 @@ enum ultra_code { NONE=0, /* no insn at all\t\t\t\t*/\n \t\t  SINGLE, /* single issue instructions\t\t\t*/\n \t\t  NUM_ULTRA_CODES };\n \n-static enum ultra_code ultra_code_from_mask PROTO ((int));\n-static void ultra_schedule_insn PROTO ((rtx *, rtx *, int, enum ultra_code));\n+static enum ultra_code ultra_code_from_mask PARAMS ((int));\n+static void ultra_schedule_insn PARAMS ((rtx *, rtx *, int, enum ultra_code));\n \n static const char *ultra_code_names[NUM_ULTRA_CODES] = {\n   \"NONE\", \"IEU0\", \"IEU1\", \"IEUN\", \"LSU\", \"CTI\","}]}