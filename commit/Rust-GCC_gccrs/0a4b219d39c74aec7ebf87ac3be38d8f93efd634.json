{"sha": "0a4b219d39c74aec7ebf87ac3be38d8f93efd634", "node_id": "C_kwDOANBUbNoAKDBhNGIyMTlkMzljNzRhZWM3ZWJmODdhYzNiZTM4ZDhmOTNlZmQ2MzQ", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-09-01T19:10:59Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-09-01T19:10:59Z"}, "message": "c: C2x removal of unprototyped functions\n\nC2x has completely removed unprototyped functions, so that () now\nmeans the same as (void) in both function declarations and\ndefinitions, where previously that change had been made for\ndefinitions only.  Implement this accordingly.\n\nThis is a change where GNU/Linux distribution builders might wish to\ntry builds with a -std=gnu2x default to start early on getting old\ncode fixed that still has () declarations for functions taking\narguments, in advance of GCC moving to -std=gnu2x as default maybe in\nGCC 14 or 15; I don't know how much such code is likely to be in\ncurrent use.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\ngcc/c/\n\t* c-decl.cc (grokparms): Handle () in a function declaration the\n\tsame as (void) for C2X.\n\ngcc/testsuite/\n\t* gcc.dg/c11-unproto-3.c, gcc.dg/c2x-unproto-3.c,\n\tgcc.dg/c2x-unproto-4.c: New tests.\n\t* gcc.dg/c2x-old-style-definition-6.c, gcc.dg/c2x-unproto-1.c,\n\tgcc.dg/c2x-unproto-2.c: Update for removal of unprototyped\n\tfunctions.", "tree": {"sha": "1d373c6356bce1bebd7d528f04dd1e1dfb9db9e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d373c6356bce1bebd7d528f04dd1e1dfb9db9e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a4b219d39c74aec7ebf87ac3be38d8f93efd634", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a4b219d39c74aec7ebf87ac3be38d8f93efd634", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a4b219d39c74aec7ebf87ac3be38d8f93efd634", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a4b219d39c74aec7ebf87ac3be38d8f93efd634/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2694766dcfff0278fa93d581340a10b150c0f44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2694766dcfff0278fa93d581340a10b150c0f44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2694766dcfff0278fa93d581340a10b150c0f44"}], "stats": {"total": 95, "additions": 70, "deletions": 25}, "files": [{"sha": "34f8feda897f76b22b877afe66b7fc315da76b0a", "filename": "gcc/c/c-decl.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4b219d39c74aec7ebf87ac3be38d8f93efd634/gcc%2Fc%2Fc-decl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4b219d39c74aec7ebf87ac3be38d8f93efd634/gcc%2Fc%2Fc-decl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.cc?ref=0a4b219d39c74aec7ebf87ac3be38d8f93efd634", "patch": "@@ -7868,7 +7868,7 @@ grokparms (struct c_arg_info *arg_info, bool funcdef_flag)\n       error (\"%<[*]%> not allowed in other than function prototype scope\");\n     }\n \n-  if (arg_types == NULL_TREE && !funcdef_flag\n+  if (arg_types == NULL_TREE && !funcdef_flag && !flag_isoc2x\n       && !in_system_header_at (input_location))\n     warning (OPT_Wstrict_prototypes,\n \t     \"function declaration isn%'t a prototype\");\n@@ -7896,9 +7896,8 @@ grokparms (struct c_arg_info *arg_info, bool funcdef_flag)\n       tree parm, type, typelt;\n       unsigned int parmno;\n \n-      /* In C2X, convert () in a function definition to (void).  */\n+      /* In C2X, convert () to (void).  */\n       if (flag_isoc2x\n-\t  && funcdef_flag\n \t  && !arg_types\n \t  && !arg_info->parms)\n \targ_types = arg_info->types = void_list_node;"}, {"sha": "b0e4bf3d5b1b032a197d38e4613540e7d028c34c", "filename": "gcc/testsuite/gcc.dg/c11-unproto-3.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4b219d39c74aec7ebf87ac3be38d8f93efd634/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-unproto-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4b219d39c74aec7ebf87ac3be38d8f93efd634/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-unproto-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-unproto-3.c?ref=0a4b219d39c74aec7ebf87ac3be38d8f93efd634", "patch": "@@ -0,0 +1,19 @@\n+/* Test function declarations without prototypes for C11.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+void f1 ();\n+void\n+f1a (void)\n+{\n+  f1 (1, 2);\n+}\n+\n+void f2 ();\n+void f2 (int);\n+\n+void f3 ();\n+\n+_Static_assert (_Generic (f3,\n+\t\t\t  void (*) (int) : 1,\n+\t\t\t  default : 3) == 1, \"unprototyped test\");"}, {"sha": "72bfd56f00a320d7791113c8c896c66bcf44ed4b", "filename": "gcc/testsuite/gcc.dg/c2x-old-style-definition-6.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4b219d39c74aec7ebf87ac3be38d8f93efd634/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-old-style-definition-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4b219d39c74aec7ebf87ac3be38d8f93efd634/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-old-style-definition-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-old-style-definition-6.c?ref=0a4b219d39c74aec7ebf87ac3be38d8f93efd634", "patch": "@@ -1,16 +1,16 @@\n-/* Test old-style function definitions not in C2x: () does not give\n-   type with a prototype except for function definitions.  */\n+/* Test old-style function definitions not in C2x: () gives a type with\n+   a prototype for all declarations.  */\n /* { dg-do compile } */\n /* { dg-options \"-std=c2x\" } */\n \n-void f1 ();\n+void f1 (); /* { dg-message \"declared here\" } */\n \n-/* Prototyped function returning a pointer to unprototyped function.  */\n+/* Prototyped function returning a pointer to a function with no arguments.  */\n void (*f2 (void))() { return f1; }\n \n void\n g (void)\n {\n-  f1 (1);\n-  f2 () (1);\n+  f1 (1); /* { dg-error \"too many arguments\" } */\n+  f2 () (1); /* { dg-error \"too many arguments\" } */\n }"}, {"sha": "d21c6a712fb5c34a44e894e8c7a713555ec5f558", "filename": "gcc/testsuite/gcc.dg/c2x-unproto-1.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4b219d39c74aec7ebf87ac3be38d8f93efd634/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-unproto-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4b219d39c74aec7ebf87ac3be38d8f93efd634/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-unproto-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-unproto-1.c?ref=0a4b219d39c74aec7ebf87ac3be38d8f93efd634", "patch": "@@ -1,25 +1,21 @@\n-/* Test compatibility of unprototyped and prototyped function types (C2x made\n-   the case of types affected by default argument promotions compatible, before\n-   removing unprototyped functions completely).  Test affected usages are not\n-   accepted for C2x.  */\n+/* Test compatibility of prototyped function types with and without arguments\n+   (C2x made the case of types affected by default argument promotions\n+   compatible, before removing unprototyped functions completely).  Test\n+   affected usages are not accepted for C2x.  */\n /* { dg-do compile } */\n /* { dg-options \"-std=c2x -pedantic-errors\" } */\n \n void f1 (); /* { dg-message \"previous declaration\" } */\n void f1 (float); /* { dg-error \"conflicting types\" } */\n-/* { dg-message \"default promotion\" \"\" { target *-*-* } .-1 } */\n \n void f2 (float); /* { dg-message \"previous declaration\" } */\n void f2 (); /* { dg-error \"conflicting types\" } */\n-/* { dg-message \"default promotion\" \"\" { target *-*-* } .-1 } */\n \n void f3 (); /* { dg-message \"previous declaration\" } */\n void f3 (char); /* { dg-error \"conflicting types\" } */\n-/* { dg-message \"default promotion\" \"\" { target *-*-* } .-1 } */\n \n void f4 (char); /* { dg-message \"previous declaration\" } */\n void f4 (); /* { dg-error \"conflicting types\" } */\n-/* { dg-message \"default promotion\" \"\" { target *-*-* } .-1 } */\n \n /* Built-in function case.  */\n float sqrtf (); /* { dg-warning \"conflicting types for built-in function\" } */"}, {"sha": "533fb743b4e0a0df6a8410a819b5a9f9a8dae5da", "filename": "gcc/testsuite/gcc.dg/c2x-unproto-2.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4b219d39c74aec7ebf87ac3be38d8f93efd634/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-unproto-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4b219d39c74aec7ebf87ac3be38d8f93efd634/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-unproto-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-unproto-2.c?ref=0a4b219d39c74aec7ebf87ac3be38d8f93efd634", "patch": "@@ -1,22 +1,18 @@\n-/* Test compatibility of unprototyped and prototyped function types (C2x made\n-   the case of types affected by default argument promotions compatible, before\n-   removing unprototyped functions completely).  Test always-invalid-in-C2x\n-   usages, in C2X mode.  */\n+/* Test compatibility of prototyped function types without arguments and with\n+   variable arguments (C2x made the case of types affected by default argument\n+   promotions compatible, before removing unprototyped functions completely).\n+   Test always-invalid-in-C2x usages, in C2X mode.  */\n /* { dg-do compile } */\n /* { dg-options \"-std=c2x -pedantic-errors\" } */\n \n void f1 (); /* { dg-message \"previous declaration\" } */\n void f1 (int, ...); /* { dg-error \"conflicting types\" } */\n-/* { dg-message \"ellipsis\" \"\" { target *-*-* } .-1 } */\n \n void f2 (int, ...); /* { dg-message \"previous declaration\" } */\n void f2 (); /* { dg-error \"conflicting types\" } */\n-/* { dg-message \"ellipsis\" \"\" { target *-*-* } .-1 } */\n \n void f3 (); /* { dg-message \"previous declaration\" } */\n void f3 (char, ...); /* { dg-error \"conflicting types\" } */\n-/* { dg-message \"ellipsis\" \"\" { target *-*-* } .-1 } */\n \n void f4 (char, ...); /* { dg-message \"previous declaration\" } */\n void f4 (); /* { dg-error \"conflicting types\" } */\n-/* { dg-message \"ellipsis\" \"\" { target *-*-* } .-1 } */"}, {"sha": "762f8b21034cc725978e20595e63133db09a2ee4", "filename": "gcc/testsuite/gcc.dg/c2x-unproto-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4b219d39c74aec7ebf87ac3be38d8f93efd634/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-unproto-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4b219d39c74aec7ebf87ac3be38d8f93efd634/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-unproto-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-unproto-3.c?ref=0a4b219d39c74aec7ebf87ac3be38d8f93efd634", "patch": "@@ -0,0 +1,20 @@\n+/* Test that declaring a function with () is the same as (void) in C2X.  Valid\n+   use cases.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors -Wstrict-prototypes\" } */\n+\n+void f1 ();\n+void f1 (void);\n+\n+void f2 (void);\n+void f2 ();\n+\n+typedef void T1 ();\n+typedef void T1 (void);\n+\n+void f3 ();\n+\n+_Static_assert (_Generic (f3,\n+\t\t\t  void (*) (int) : 1,\n+\t\t\t  void (*) (void) : 2,\n+\t\t\t  default : 3) == 2);"}, {"sha": "fceff22b1af550b8e82f54344dddd2b7d4c4ef3b", "filename": "gcc/testsuite/gcc.dg/c2x-unproto-4.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4b219d39c74aec7ebf87ac3be38d8f93efd634/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-unproto-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4b219d39c74aec7ebf87ac3be38d8f93efd634/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-unproto-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-unproto-4.c?ref=0a4b219d39c74aec7ebf87ac3be38d8f93efd634", "patch": "@@ -0,0 +1,15 @@\n+/* Test that declaring a function with () is the same as (void) in C2X.\n+   Invalid use cases.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+void f1 (); /* { dg-message \"previous declaration\" } */\n+void f1 (int); /* { dg-error \"conflicting types\" } */\n+\n+void f2 (); /* { dg-message \"declared here\" } */\n+\n+void\n+f3 (void)\n+{\n+  f2 (1); /* { dg-error \"too many arguments\" } */\n+}"}]}