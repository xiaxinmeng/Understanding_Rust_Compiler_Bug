{"sha": "87fd6836074fadc41833bf26686e99dbe574a638", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdmZDY4MzYwNzRmYWRjNDE4MzNiZjI2Njg2ZTk5ZGJlNTc0YTYzOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-19T12:22:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-19T12:22:12Z"}, "message": "[multiple changes]\n\n2016-04-19  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Resolve_Entry_Call): If the entry has\n\tpreconditions it is rewritten by means of a wrapper that\n\tincorporates the original call. Before rewriting generate a\n\treference to the entry being called to prevent spurious warnings\n\tand provide correct cross-reference information.\n\n2016-04-19  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_disp.adb (Check_Dispatching_Context): Code cleanup. Add\n\tlocal constant Scop. Ignore any internally generated loops when\n\tperforming the check concerning an abstract subprogram call\n\twithout a controlling argument.\n\t* sem_util.ads, sem_util.adb (Current_Scope_No_Loops): New routine.\n\nFrom-SVN: r235192", "tree": {"sha": "db80712bf51c3130061299a0c940026b2b325d7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db80712bf51c3130061299a0c940026b2b325d7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87fd6836074fadc41833bf26686e99dbe574a638", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87fd6836074fadc41833bf26686e99dbe574a638", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87fd6836074fadc41833bf26686e99dbe574a638", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87fd6836074fadc41833bf26686e99dbe574a638/comments", "author": null, "committer": null, "parents": [{"sha": "b35e5dcb14b85adb622f0f6ee4c629e9a44dcdd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b35e5dcb14b85adb622f0f6ee4c629e9a44dcdd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b35e5dcb14b85adb622f0f6ee4c629e9a44dcdd0"}], "stats": {"total": 76, "additions": 63, "deletions": 13}, "files": [{"sha": "02ab36906a4f76655040a31bd38631ac2ccb641a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87fd6836074fadc41833bf26686e99dbe574a638/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87fd6836074fadc41833bf26686e99dbe574a638/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=87fd6836074fadc41833bf26686e99dbe574a638", "patch": "@@ -1,3 +1,19 @@\n+2016-04-19  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Entry_Call): If the entry has\n+\tpreconditions it is rewritten by means of a wrapper that\n+\tincorporates the original call. Before rewriting generate a\n+\treference to the entry being called to prevent spurious warnings\n+\tand provide correct cross-reference information.\n+\n+2016-04-19  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_disp.adb (Check_Dispatching_Context): Code cleanup. Add\n+\tlocal constant Scop. Ignore any internally generated loops when\n+\tperforming the check concerning an abstract subprogram call\n+\twithout a controlling argument.\n+\t* sem_util.ads, sem_util.adb (Current_Scope_No_Loops): New routine.\n+\n 2016-04-19  Bob Duff  <duff@adacore.com>\n \n \t* sem_elab.adb (Check_A_Call): There are cases where we have No"}, {"sha": "4d8ef3f971679b88acd5558f073500dde2cb72c3", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87fd6836074fadc41833bf26686e99dbe574a638/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87fd6836074fadc41833bf26686e99dbe574a638/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=87fd6836074fadc41833bf26686e99dbe574a638", "patch": "@@ -510,7 +510,6 @@ package body Sem_Disp is\n \n       procedure Check_Dispatching_Context (Call : Node_Id) is\n          Subp : constant Entity_Id := Entity (Name (Call));\n-         Typ  : constant Entity_Id := Etype (Subp);\n \n          procedure Abstract_Context_Error;\n          --  Error for abstract call dispatching on result is not dispatching\n@@ -530,14 +529,15 @@ package body Sem_Disp is\n \n             else\n                Error_Msg_N\n-                 (\"call to abstract procedure must be dispatching\",\n-                  N);\n+                 (\"call to abstract procedure must be dispatching\", N);\n             end if;\n          end Abstract_Context_Error;\n \n          --  Local variables\n \n-         Par : Node_Id;\n+         Scop : constant Entity_Id := Current_Scope_No_Loops;\n+         Typ  : constant Entity_Id := Etype (Subp);\n+         Par  : Node_Id;\n \n       --  Start of processing for Check_Dispatching_Context\n \n@@ -568,18 +568,20 @@ package body Sem_Disp is\n             --  but will be legal in overridings of the operation.\n \n             elsif In_Spec_Expression\n-              and then (Is_Subprogram (Current_Scope)\n-                 or else Chars (Current_Scope) = Name_Postcondition)\n               and then\n-                ((Nkind (Parent (Current_Scope)) = N_Procedure_Specification\n-                   and then Null_Present (Parent (Current_Scope)))\n-                 or else Is_Abstract_Subprogram (Current_Scope))\n+                (Is_Subprogram (Scop)\n+                  or else Chars (Scop) = Name_Postcondition)\n+              and then\n+                (Is_Abstract_Subprogram (Scop)\n+                  or else\n+                    (Nkind (Parent (Scop)) = N_Procedure_Specification\n+                      and then Null_Present (Parent (Scop))))\n             then\n                null;\n \n             elsif Ekind (Current_Scope) = E_Function\n-              and then Nkind (Unit_Declaration_Node (Current_Scope)) =\n-                                          N_Generic_Subprogram_Declaration\n+              and then Nkind (Unit_Declaration_Node (Scop)) =\n+                         N_Generic_Subprogram_Declaration\n             then\n                null;\n \n@@ -969,8 +971,8 @@ package body Sem_Disp is\n       --  if the associated tagged type is already frozen.\n \n       Has_Dispatching_Parent :=\n-         Present (Alias (Subp))\n-           and then Is_Dispatching_Operation (Alias (Subp));\n+        Present (Alias (Subp))\n+          and then Is_Dispatching_Operation (Alias (Subp));\n \n       if No (Tagged_Type) then\n "}, {"sha": "d6b9069eb48202dd310ea6aa9e8b7c356fb8bad7", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87fd6836074fadc41833bf26686e99dbe574a638/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87fd6836074fadc41833bf26686e99dbe574a638/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=87fd6836074fadc41833bf26686e99dbe574a638", "patch": "@@ -7614,6 +7614,12 @@ package body Sem_Res is\n         and then Present (Contract_Wrapper (Nam))\n         and then Current_Scope /= Contract_Wrapper (Nam)\n       then\n+\n+         --  Note the entity being called before rewriting the call, so that\n+         --  it appears used at this point.\n+\n+         Generate_Reference (Nam, Entry_Name, 'r');\n+\n          --  Rewrite as call to the precondition wrapper, adding the task\n          --  object to the list of actuals. If the call is to a member of an\n          --  entry family, include the index as well."}, {"sha": "393ff73914b7c01f3d1e011363ba6786ab9606bf", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87fd6836074fadc41833bf26686e99dbe574a638/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87fd6836074fadc41833bf26686e99dbe574a638/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=87fd6836074fadc41833bf26686e99dbe574a638", "patch": "@@ -5143,6 +5143,29 @@ package body Sem_Util is\n       end if;\n    end Current_Scope;\n \n+   ----------------------------\n+   -- Current_Scope_No_Loops --\n+   ----------------------------\n+\n+   function Current_Scope_No_Loops return Entity_Id is\n+      S : Entity_Id;\n+\n+   begin\n+      --  Examine the scope stack starting from the current scope and skip any\n+      --  internally generated loops.\n+\n+      S := Current_Scope;\n+      while Present (S) and then S /= Standard_Standard loop\n+         if Ekind (S) = E_Loop and then not Comes_From_Source (S) then\n+            S := Scope (S);\n+         else\n+            exit;\n+         end if;\n+      end loop;\n+\n+      return S;\n+   end Current_Scope_No_Loops;\n+\n    ------------------------\n    -- Current_Subprogram --\n    ------------------------"}, {"sha": "df475ccb8b1e53ddfc4c035bf326f4f42438cb57", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87fd6836074fadc41833bf26686e99dbe574a638/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87fd6836074fadc41833bf26686e99dbe574a638/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=87fd6836074fadc41833bf26686e99dbe574a638", "patch": "@@ -449,6 +449,9 @@ package Sem_Util is\n    function Current_Scope return Entity_Id;\n    --  Get entity representing current scope\n \n+   function Current_Scope_No_Loops return Entity_Id;\n+   --  Return the current scope ignoring internally generated loops\n+\n    function Current_Subprogram return Entity_Id;\n    --  Returns current enclosing subprogram. If Current_Scope is a subprogram,\n    --  then that is what is returned, otherwise the Enclosing_Subprogram of the"}]}