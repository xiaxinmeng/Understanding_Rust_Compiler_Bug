{"sha": "a2566ae98d9df2df51b651dc404bae5d2ff54944", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI1NjZhZTk4ZDlkZjJkZjUxYjY1MWRjNDA0YmFlNWQyZmY1NDk0NA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2005-01-02T01:32:21Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2005-01-02T01:32:21Z"}, "message": "internal.h: Update references to Cpp lib filenames.\n\n        * internal.h: Update references to Cpp lib filenames.\n        * directives.c: Likewise.\n        * init.c: Likewise.\n        * macro.c: Likewise.\n        * traditional.c: Likewise.\n\nFrom-SVN: r92799", "tree": {"sha": "ebb05e721bd9965754a245ca7e4348b6356e87c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebb05e721bd9965754a245ca7e4348b6356e87c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2566ae98d9df2df51b651dc404bae5d2ff54944", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2566ae98d9df2df51b651dc404bae5d2ff54944", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2566ae98d9df2df51b651dc404bae5d2ff54944", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2566ae98d9df2df51b651dc404bae5d2ff54944/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "302904495d01ba8de1061edb1e2aec359ddc83a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/302904495d01ba8de1061edb1e2aec359ddc83a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/302904495d01ba8de1061edb1e2aec359ddc83a7"}], "stats": {"total": 50, "additions": 29, "deletions": 21}, "files": [{"sha": "88e5b8f312baea548d1ccecfce7223941c00f576", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2566ae98d9df2df51b651dc404bae5d2ff54944/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2566ae98d9df2df51b651dc404bae5d2ff54944/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=a2566ae98d9df2df51b651dc404bae5d2ff54944", "patch": "@@ -1,3 +1,11 @@\n+2005-01-01  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* internal.h: Update references to Cpp lib filenames.\n+\t* directives.c: Likewise.\n+\t* init.c: Likewise.\n+\t* macro.c: Likewise.\n+\t* traditional.c: Likewise.\n+\n 2004-12-15  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR preprocessor/15167"}, {"sha": "6039862a95a257bd1dd22ee7d7b9a910187a37fb", "filename": "libcpp/directives.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2566ae98d9df2df51b651dc404bae5d2ff54944/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2566ae98d9df2df51b651dc404bae5d2ff54944/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=a2566ae98d9df2df51b651dc404bae5d2ff54944", "patch": "@@ -326,7 +326,7 @@ directive_diagnostics (cpp_reader *pfile, const directive *dir, int indented)\n \n /* Check if we have a known directive.  INDENTED is nonzero if the\n    '#' of the directive was indented.  This function is in this file\n-   to save unnecessarily exporting dtable etc. to cpplex.c.  Returns\n+   to save unnecessarily exporting dtable etc. to lex.c.  Returns\n    nonzero if the line of tokens has been handled, zero if we should\n    continue processing the line.  */\n int\n@@ -382,7 +382,7 @@ _cpp_handle_directive (cpp_reader *pfile, int indented)\n \n \t does not cause '#define foo bar' to get executed when\n \t compiled with -save-temps, we recognize directives in\n-\t -fpreprocessed mode only if the # is in column 1.  cppmacro.c\n+\t -fpreprocessed mode only if the # is in column 1.  macro.c\n \t puts a space in front of any '#' at the start of a macro.  */\n       if (CPP_OPTION (pfile, preprocessed)\n \t  && (indented || !(dir->flags & IN_I)))\n@@ -503,7 +503,7 @@ lex_macro_node (cpp_reader *pfile)\n   return NULL;\n }\n \n-/* Process a #define directive.  Most work is done in cppmacro.c.  */\n+/* Process a #define directive.  Most work is done in macro.c.  */\n static void\n do_define (cpp_reader *pfile)\n {"}, {"sha": "c3c738e250c1882cd321750cc8f04383781eb32c", "filename": "libcpp/init.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2566ae98d9df2df51b651dc404bae5d2ff54944/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2566ae98d9df2df51b651dc404bae5d2ff54944/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=a2566ae98d9df2df51b651dc404bae5d2ff54944", "patch": "@@ -275,7 +275,7 @@ cpp_destroy (cpp_reader *pfile)\n \n    There are two tables of these.  builtin_array holds all the\n    \"builtin\" macros: these are handled by builtin_macro() in\n-   cppmacro.c.  Builtin is somewhat of a misnomer -- the property of\n+   macro.c.  Builtin is somewhat of a misnomer -- the property of\n    interest is that these macros require special code to compute their\n    expansions.  The value is a \"builtin_type\" enumerator.\n \n@@ -567,7 +567,7 @@ cpp_finish (cpp_reader *pfile, FILE *deps_stream)\n   if (CPP_OPTION (pfile, warn_unused_macros))\n     cpp_forall_identifiers (pfile, _cpp_warn_if_unused_macro, NULL);\n \n-  /* cpplex.c leaves the final buffer on the stack.  This it so that\n+  /* lex.c leaves the final buffer on the stack.  This it so that\n      it returns an unending stream of CPP_EOFs to the client.  If we\n      popped the buffer, we'd dereference a NULL buffer pointer and\n      segfault.  It's nice to allow the client to do worry-free excess"}, {"sha": "9f39b21ec8e5d40ef07c9141326264024e48f77e", "filename": "libcpp/internal.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2566ae98d9df2df51b651dc404bae5d2ff54944/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2566ae98d9df2df51b651dc404bae5d2ff54944/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=a2566ae98d9df2df51b651dc404bae5d2ff54944", "patch": "@@ -396,11 +396,11 @@ struct cpp_reader\n   struct deps *deps;\n \n   /* Obstack holding all macro hash nodes.  This never shrinks.\n-     See cpphash.c */\n+     See identifiers.c */\n   struct obstack hash_ob;\n \n   /* Obstack holding buffer and conditional structures.  This is a\n-     real stack.  See cpplib.c.  */\n+     real stack.  See directives.c.  */\n   struct obstack buffer_ob;\n \n   /* Pragma table - dynamic, because a library user can add to the\n@@ -435,7 +435,7 @@ struct cpp_reader\n     source_location first_line;\n   } out;\n \n-  /* Used for buffer overlays by cpptrad.c.  */\n+  /* Used for buffer overlays by traditional.c.  */\n   const unsigned char *saved_cur, *saved_rlimit, *saved_line_base;\n \n   /* A saved list of the defined macros, for dependency checking\n@@ -448,7 +448,7 @@ struct cpp_reader\n    definition of a pp-number in the C standard [section 6.4.8 of C99].\n \n    In the unlikely event that characters other than \\r and \\n enter\n-   the set is_vspace, the macro handle_newline() in cpplex.c must be\n+   the set is_vspace, the macro handle_newline() in lex.c must be\n    updated.  */\n #define _dollar_ok(x)\t((x) == '$' && CPP_OPTION (pfile, dollars_in_ident))\n \n@@ -481,11 +481,11 @@ cpp_in_system_header (cpp_reader *pfile)\n #define CPP_PEDANTIC(PF) CPP_OPTION (PF, pedantic)\n #define CPP_WTRADITIONAL(PF) CPP_OPTION (PF, warn_traditional)\n \n-/* In cpperror.c  */\n+/* In errors.c  */\n extern int _cpp_begin_message (cpp_reader *, int,\n \t\t\t       source_location, unsigned int);\n \n-/* In cppmacro.c */\n+/* In macro.c */\n extern void _cpp_free_definition (cpp_hashnode *);\n extern bool _cpp_create_definition (cpp_reader *, cpp_hashnode *);\n extern void _cpp_pop_context (cpp_reader *);\n@@ -497,11 +497,11 @@ extern bool _cpp_arguments_ok (cpp_reader *, cpp_macro *, const cpp_hashnode *,\n extern const unsigned char *_cpp_builtin_macro_text (cpp_reader *,\n \t\t\t\t\t\t     cpp_hashnode *);\n int _cpp_warn_if_unused_macro (cpp_reader *, cpp_hashnode *, void *);\n-/* In cpphash.c */\n+/* In identifiers.c */\n extern void _cpp_init_hashtable (cpp_reader *, hash_table *);\n extern void _cpp_destroy_hashtable (cpp_reader *);\n \n-/* In cppfiles.c */\n+/* In files.c */\n typedef struct _cpp_file _cpp_file;\n extern _cpp_file *_cpp_find_file (cpp_reader *, const char *fname,\n \t\t\t\t  cpp_dir *start_dir, bool fake);\n@@ -519,11 +519,11 @@ extern void _cpp_pop_file_buffer (cpp_reader *, struct _cpp_file *);\n extern bool _cpp_save_file_entries (cpp_reader *pfile, FILE *f);\n extern bool _cpp_read_file_entries (cpp_reader *, FILE *);\n \n-/* In cppexp.c */\n+/* In expr.c */\n extern bool _cpp_parse_expr (cpp_reader *);\n extern struct op *_cpp_expand_op_stack (cpp_reader *);\n \n-/* In cpplex.c */\n+/* In lex.c */\n extern void _cpp_process_line_notes (cpp_reader *, int);\n extern void _cpp_clean_line (cpp_reader *);\n extern bool _cpp_get_fresh_line (cpp_reader *);\n@@ -534,10 +534,10 @@ extern cpp_token *_cpp_lex_direct (cpp_reader *);\n extern int _cpp_equiv_tokens (const cpp_token *, const cpp_token *);\n extern void _cpp_init_tokenrun (tokenrun *, unsigned int);\n \n-/* In cppinit.c.  */\n+/* In init.c.  */\n extern void _cpp_maybe_push_include_file (cpp_reader *);\n \n-/* In cpplib.c */\n+/* In directives.c */\n extern int _cpp_test_assertion (cpp_reader *, unsigned int *);\n extern int _cpp_handle_directive (cpp_reader *, int);\n extern void _cpp_define_builtin (cpp_reader *, const char *);\n@@ -550,7 +550,7 @@ extern void _cpp_do_file_change (cpp_reader *, enum lc_reason, const char *,\n \t\t\t\t unsigned int, unsigned int);\n extern void _cpp_pop_buffer (cpp_reader *);\n \n-/* In cpptrad.c.  */\n+/* In traditional.c.  */\n extern bool _cpp_scan_out_logical_line (cpp_reader *, cpp_macro *);\n extern bool _cpp_read_logical_line_trad (cpp_reader *);\n extern void _cpp_overlay_buffer (cpp_reader *pfile, const unsigned char *,\n@@ -563,7 +563,7 @@ extern unsigned char *_cpp_copy_replacement_text (const cpp_macro *,\n \t\t\t\t\t\t  unsigned char *);\n extern size_t _cpp_replacement_text_len (const cpp_macro *);\n \n-/* In cppcharset.c.  */\n+/* In charset.c.  */\n extern cppchar_t _cpp_valid_ucn (cpp_reader *, const unsigned char **,\n \t\t\t\t const unsigned char *, int);\n extern void _cpp_destroy_iconv (cpp_reader *);"}, {"sha": "e3824cbe5af77990ab096b7bfd3cea080dcd975d", "filename": "libcpp/macro.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2566ae98d9df2df51b651dc404bae5d2ff54944/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2566ae98d9df2df51b651dc404bae5d2ff54944/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=a2566ae98d9df2df51b651dc404bae5d2ff54944", "patch": "@@ -1540,7 +1540,7 @@ _cpp_create_definition (cpp_reader *pfile, cpp_hashnode *node)\n \n       /* Restore lexer position because of games lex_expansion_token()\n \t plays lexing the macro.  We set the type for SEEN_EOL() in\n-\t cpplib.c.\n+\t directives.c.\n \n \t Longer term we should lex the whole line before coming here,\n \t and just copy the expansion.  */"}, {"sha": "ba25301b14e70e3b7bdef6e00db442209534ee7e", "filename": "libcpp/traditional.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2566ae98d9df2df51b651dc404bae5d2ff54944/libcpp%2Ftraditional.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2566ae98d9df2df51b651dc404bae5d2ff54944/libcpp%2Ftraditional.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ftraditional.c?ref=a2566ae98d9df2df51b651dc404bae5d2ff54944", "patch": "@@ -76,7 +76,7 @@ enum ls {ls_none = 0,\t\t/* Normal state.  */\n \t ls_predicate,\t\t/* After the predicate, maybe paren?  */\n \t ls_answer};\t\t/* In answer to predicate.  */\n \n-/* Lexing TODO: Maybe handle space in escaped newlines.  Stop cpplex.c\n+/* Lexing TODO: Maybe handle space in escaped newlines.  Stop lex.c\n    from recognizing comments and directives during its lexing pass.  */\n \n static const uchar *skip_whitespace (cpp_reader *, const uchar *, int);"}]}