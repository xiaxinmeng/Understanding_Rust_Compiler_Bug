{"sha": "537b8a357cd1c24042180937b030bce255042d23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM3YjhhMzU3Y2QxYzI0MDQyMTgwOTM3YjAzMGJjZTI1NTA0MmQyMw==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@st.com", "date": "2006-09-01T20:25:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-09-01T20:25:34Z"}, "message": "re PR middle-end/27226 (Compiler looses track of alignment for emit_block_move)\n\n2006-09-01  J\"orn Rennecke  <joern.rennecke@st.com>\n\tRichard Guenther  <rguenther@suse.de>\n\tAdam Nemet  <anemet@caviumnetworks.com>\n\n\tPR middle-end/27226\n\t* builtins.c (get_pointer_alignment): Handle more forms\n\tof base addresses that can be used to derive more precise\n\tinformation about alignment.\n\n\t* gcc.target/mips/memcpy-1.c: New testcase.\n\t* gcc.dg/pr27226.c: Likewise.\n\nCo-Authored-By: Adam Nemet <anemet@caviumnetworks.com>\nCo-Authored-By: Richard Guenther <rguenther@suse.de>\n\nFrom-SVN: r116641", "tree": {"sha": "73e61e20e7b99a9069c8edce11782f70fa49d2da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73e61e20e7b99a9069c8edce11782f70fa49d2da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/537b8a357cd1c24042180937b030bce255042d23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/537b8a357cd1c24042180937b030bce255042d23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/537b8a357cd1c24042180937b030bce255042d23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/537b8a357cd1c24042180937b030bce255042d23/comments", "author": null, "committer": null, "parents": [{"sha": "cd709ec369752db0a7c8f9109e8faf2bc87f6c72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd709ec369752db0a7c8f9109e8faf2bc87f6c72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd709ec369752db0a7c8f9109e8faf2bc87f6c72"}], "stats": {"total": 104, "additions": 95, "deletions": 9}, "files": [{"sha": "077b1c32a53db4938559aedb9670fb6242b79346", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/537b8a357cd1c24042180937b030bce255042d23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/537b8a357cd1c24042180937b030bce255042d23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=537b8a357cd1c24042180937b030bce255042d23", "patch": "@@ -1,3 +1,12 @@\n+2006-09-01  J\"orn Rennecke  <joern.rennecke@st.com>\n+\tRichard Guenther  <rguenther@suse.de>\n+\tAdam Nemet  <anemet@caviumnetworks.com>\n+\n+\tPR middle-end/27226\n+\t* builtins.c (get_pointer_alignment): Handle more forms\n+\tof base addresses that can be used to derive more precise\n+\tinformation about alignment.\n+\n 2006-09-01  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/28899"}, {"sha": "4aff7d09809462ffe4112af89285d98928a8f187", "filename": "gcc/builtins.c", "status": "modified", "additions": 40, "deletions": 9, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/537b8a357cd1c24042180937b030bce255042d23/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/537b8a357cd1c24042180937b030bce255042d23/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=537b8a357cd1c24042180937b030bce255042d23", "patch": "@@ -275,16 +275,44 @@ get_pointer_alignment (tree exp, unsigned int max_align)\n \t  /* See what we are pointing at and look at its alignment.  */\n \t  exp = TREE_OPERAND (exp, 0);\n \t  inner = max_align;\n-\t  while (handled_component_p (exp))\n+\t  if (handled_component_p (exp))\n \t    {\n-\t      /* Fields in a structure can be packed, honor DECL_ALIGN\n-\t\t of the FIELD_DECL.  For all other references the conservative\n-\t\t alignment is the element type alignment.  */\n-\t      if (TREE_CODE (exp) == COMPONENT_REF)\n-\t\tinner = MIN (inner, DECL_ALIGN (TREE_OPERAND (exp, 1)));\n-\t      else\n-\t\tinner = MIN (inner, TYPE_ALIGN (TREE_TYPE (exp)));\n-\t      exp = TREE_OPERAND (exp, 0);\n+\t      HOST_WIDE_INT bitsize, bitpos;\n+\t      tree offset;\n+\t      enum machine_mode mode; \n+\t      int unsignedp, volatilep;\n+\n+\t      exp = get_inner_reference (exp, &bitsize, &bitpos, &offset,\n+\t\t\t\t\t &mode, &unsignedp, &volatilep, true);\n+\t      if (bitpos)\n+\t\tinner = MIN (inner, (unsigned) (bitpos & -bitpos));\n+\t      if (offset && TREE_CODE (offset) == PLUS_EXPR\n+\t\t  && host_integerp (TREE_OPERAND (offset, 1), 1))\n+\t        {\n+\t\t  /* Any overflow in calculating offset_bits won't change\n+\t\t     the alignment.  */\n+\t\t  unsigned offset_bits\n+\t\t    = ((unsigned) tree_low_cst (TREE_OPERAND (offset, 1), 1)\n+\t\t       * BITS_PER_UNIT);\n+\n+\t\t  if (offset_bits)\n+\t\t    inner = MIN (inner, (offset_bits & -offset_bits));\n+\t\t  offset = TREE_OPERAND (offset, 0);\n+\t\t}\n+\t      if (offset && TREE_CODE (offset) == MULT_EXPR\n+\t\t  && host_integerp (TREE_OPERAND (offset, 1), 1))\n+\t        {\n+\t\t  /* Any overflow in calculating offset_factor won't change\n+\t\t     the alignment.  */\n+\t\t  unsigned offset_factor\n+\t\t    = ((unsigned) tree_low_cst (TREE_OPERAND (offset, 1), 1)\n+\t\t       * BITS_PER_UNIT);\n+\n+\t\t  if (offset_factor)\n+\t\t    inner = MIN (inner, (offset_factor & -offset_factor));\n+\t\t}\n+\t      else if (offset)\n+\t\tinner = MIN (inner, BITS_PER_UNIT);\n \t    }\n \t  if (TREE_CODE (exp) == FUNCTION_DECL)\n \t    align = FUNCTION_BOUNDARY;\n@@ -294,6 +322,9 @@ get_pointer_alignment (tree exp, unsigned int max_align)\n \t  else if (CONSTANT_CLASS_P (exp))\n \t    align = MIN (inner, (unsigned)CONSTANT_ALIGNMENT (exp, align));\n #endif\n+\t  else if (TREE_CODE (exp) == VIEW_CONVERT_EXPR\n+\t\t   || TREE_CODE (exp) == INDIRECT_REF)\n+\t    align = MIN (TYPE_ALIGN (TREE_TYPE (exp)), inner);\n \t  else\n \t    align = MIN (align, inner);\n \t  return MIN (align, max_align);"}, {"sha": "e4210b84567d2fa1f74746da7817f207821fdb47", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/537b8a357cd1c24042180937b030bce255042d23/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/537b8a357cd1c24042180937b030bce255042d23/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=537b8a357cd1c24042180937b030bce255042d23", "patch": "@@ -1,3 +1,11 @@\n+2006-09-01  J\"orn Rennecke  <joern.rennecke@st.com>\n+\tRichard Guenther  <rguenther@suse.de>\n+\tAdam Nemet  <anemet@caviumnetworks.com>\n+\n+\tPR middle-end/27226\n+\t* gcc.target/mips/memcpy-1.c: New testcase.\n+\t* gcc.dg/pr27226.c: Likewise.\n+\n 2006-09-01  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/28705"}, {"sha": "df77a8c966560c4e7800a6a4a6ba3b413a9743f4", "filename": "gcc/testsuite/gcc.dg/pr27226.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/537b8a357cd1c24042180937b030bce255042d23/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27226.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/537b8a357cd1c24042180937b030bce255042d23/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27226.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27226.c?ref=537b8a357cd1c24042180937b030bce255042d23", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+char *strcpy (char *, const char *);\n+\n+extern void g ();\n+\n+f ()\n+{\n+  struct {\n+    int i;\n+    char str[31];\n+  } s;\n+\n+  strcpy (s.str, \"text text text text text text text text\");\n+  g (s.str);\n+}\n+\n+/* { dg-final { scan-assembler-not \"memcpy\" } } */"}, {"sha": "4e50b20cda6a5d5a5622d2bceaaf64a8d1cbce86", "filename": "gcc/testsuite/gcc.target/mips/memcpy-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/537b8a357cd1c24042180937b030bce255042d23/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmemcpy-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/537b8a357cd1c24042180937b030bce255042d23/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmemcpy-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmemcpy-1.c?ref=537b8a357cd1c24042180937b030bce255042d23", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tlbu\\t\" } } */\n+\n+#include <string.h>\n+\n+char c[10];\n+\n+void\n+f1 ()\n+{\n+  memcpy (c, \"123456\", 6);\n+}\n+\n+void\n+f2 ()\n+{\n+  memcpy (c, &\"12345678\"[2], 6);\n+}"}]}