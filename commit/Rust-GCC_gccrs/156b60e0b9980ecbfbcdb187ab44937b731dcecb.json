{"sha": "156b60e0b9980ecbfbcdb187ab44937b731dcecb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU2YjYwZTBiOTk4MGVjYmZiY2RiMTg3YWI0NDkzN2I3MzFkY2VjYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-01-28T10:23:27Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-01-28T10:23:27Z"}, "message": "re PR libstdc++/59656 (weak_ptr::lock function crashes when compiling with -fno-exceptions flag)\n\n2014-01-28  Jonathan Wakely  <jwakely@redhat.com>\n\t    Kyle Lippincott  <spectral@google.com>\n\n\tPR libstdc++/59656\n\t* include/bits/shared_ptr.h (shared_ptr): Add new non-throwing\n\tconstructor and grant friendship to weak_ptr.\n\t(weak_ptr::lock()): Use new constructor.\n\t* include/bits/shared_ptr_base.h\n\t(_Sp_counted_base::_M_add_ref_lock_nothrow()): Declare new function\n\tand define specializations.\n\t(__shared_count): Add new non-throwing constructor.\n\t(__shared_ptr): Add new non-throwing constructor and grant friendship\n\tto __weak_ptr.\n\t(__weak_ptr::lock()): Use new constructor.\n\t* testsuite/20_util/shared_ptr/cons/43820_neg.cc: Adjust dg-error.\n\t* testsuite/20_util/shared_ptr/cons/void_neg.cc: Likewise.\n\nCo-Authored-By: Kyle Lippincott <spectral@google.com>\n\nFrom-SVN: r207180", "tree": {"sha": "2784f59b8c4a0e29330cec40f45e3c91d147a2c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2784f59b8c4a0e29330cec40f45e3c91d147a2c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/156b60e0b9980ecbfbcdb187ab44937b731dcecb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/156b60e0b9980ecbfbcdb187ab44937b731dcecb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/156b60e0b9980ecbfbcdb187ab44937b731dcecb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/156b60e0b9980ecbfbcdb187ab44937b731dcecb/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ec2d2c16816c8fc9fe719f523bebf98456e409c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ec2d2c16816c8fc9fe719f523bebf98456e409c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ec2d2c16816c8fc9fe719f523bebf98456e409c"}], "stats": {"total": 150, "additions": 103, "deletions": 47}, "files": [{"sha": "4674e1f7318b0ea2578941c48d259a13001350c0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/156b60e0b9980ecbfbcdb187ab44937b731dcecb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/156b60e0b9980ecbfbcdb187ab44937b731dcecb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=156b60e0b9980ecbfbcdb187ab44937b731dcecb", "patch": "@@ -1,3 +1,20 @@\n+2014-01-28  Jonathan Wakely  <jwakely@redhat.com>\n+\t    Kyle Lippincott  <spectral@google.com>\n+\n+\tPR libstdc++/59656\n+\t* include/bits/shared_ptr.h (shared_ptr): Add new non-throwing\n+\tconstructor and grant friendship to weak_ptr.\n+\t(weak_ptr::lock()): Use new constructor.\n+\t* include/bits/shared_ptr_base.h\n+\t(_Sp_counted_base::_M_add_ref_lock_nothrow()): Declare new function\n+\tand define specializations.\n+\t(__shared_count): Add new non-throwing constructor.\n+\t(__shared_ptr): Add new non-throwing constructor and grant friendship\n+\tto __weak_ptr.\n+\t(__weak_ptr::lock()): Use new constructor.\n+\t* testsuite/20_util/shared_ptr/cons/43820_neg.cc: Adjust dg-error.\n+\t* testsuite/20_util/shared_ptr/cons/void_neg.cc: Likewise.\n+\n 2014-01-27  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/59215"}, {"sha": "081d3bd3748d35e0b6e09c01b90878e341de025f", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/156b60e0b9980ecbfbcdb187ab44937b731dcecb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/156b60e0b9980ecbfbcdb187ab44937b731dcecb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=156b60e0b9980ecbfbcdb187ab44937b731dcecb", "patch": "@@ -319,6 +319,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Tp1, typename _Alloc, typename... _Args>\n \tfriend shared_ptr<_Tp1>\n \tallocate_shared(const _Alloc& __a, _Args&&... __args);\n+\n+      // This constructor is non-standard, it is used by weak_ptr::lock().\n+      shared_ptr(const weak_ptr<_Tp>& __r, std::nothrow_t)\n+      : __shared_ptr<_Tp>(__r, std::nothrow) { }\n+\n+      friend class weak_ptr<_Tp>;\n     };\n \n   // 20.7.2.2.7 shared_ptr comparisons\n@@ -492,23 +498,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       shared_ptr<_Tp>\n       lock() const noexcept\n-      {\n-#ifdef __GTHREADS\n-\tif (this->expired())\n-\t  return shared_ptr<_Tp>();\n-\n-\t__try\n-\t  {\n-\t    return shared_ptr<_Tp>(*this);\n-\t  }\n-\t__catch(const bad_weak_ptr&)\n-\t  {\n-\t    return shared_ptr<_Tp>();\n-\t  }\n-#else\n-\treturn this->expired() ? shared_ptr<_Tp>() : shared_ptr<_Tp>(*this);\n-#endif\n-      }\n+      { return shared_ptr<_Tp>(*this, std::nothrow); }\n     };\n \n   // 20.7.2.3.6 weak_ptr specialized algorithms."}, {"sha": "536df017d11d8781ae4586977016b2b4038c2e3e", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 77, "deletions": 28, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/156b60e0b9980ecbfbcdb187ab44937b731dcecb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/156b60e0b9980ecbfbcdb187ab44937b731dcecb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=156b60e0b9980ecbfbcdb187ab44937b731dcecb", "patch": "@@ -134,7 +134,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   \n       void\n       _M_add_ref_lock();\n-      \n+\n+      bool\n+      _M_add_ref_lock_nothrow();\n+\n       void\n       _M_release() noexcept\n       {\n@@ -246,6 +249,51 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t  __ATOMIC_RELAXED));\n     }\n \n+  template<>\n+    inline bool\n+    _Sp_counted_base<_S_single>::\n+    _M_add_ref_lock_nothrow()\n+    {\n+      if (_M_use_count == 0)\n+\treturn false;\n+      ++_M_use_count;\n+      return true;\n+    }\n+\n+  template<>\n+    inline bool\n+    _Sp_counted_base<_S_mutex>::\n+    _M_add_ref_lock_nothrow()\n+    {\n+      __gnu_cxx::__scoped_lock sentry(*this);\n+      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, 1) == 0)\n+\t{\n+\t  _M_use_count = 0;\n+\t  return false;\n+\t}\n+      return true;\n+    }\n+\n+  template<>\n+    inline bool\n+    _Sp_counted_base<_S_atomic>::\n+    _M_add_ref_lock_nothrow()\n+    {\n+      // Perform lock-free add-if-not-zero operation.\n+      _Atomic_word __count = _M_get_use_count();\n+      do\n+\t{\n+\t  if (__count == 0)\n+\t    return false;\n+\t  // Replace the current counter value with the old value + 1, as\n+\t  // long as it's not changed meanwhile.\n+\t}\n+      while (!__atomic_compare_exchange_n(&_M_use_count, &__count, __count + 1,\n+\t\t\t\t\t  true, __ATOMIC_ACQ_REL,\n+\t\t\t\t\t  __ATOMIC_RELAXED));\n+      return true;\n+    }\n+\n   template<>\n     inline void\n     _Sp_counted_base<_S_single>::_M_add_ref_copy()\n@@ -609,6 +657,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Throw bad_weak_ptr when __r._M_get_use_count() == 0.\n       explicit __shared_count(const __weak_count<_Lp>& __r);\n \n+      // Does not throw if __r._M_get_use_count() == 0, caller must check.\n+      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);\n+\n       ~__shared_count() noexcept\n       {\n \tif (_M_pi != nullptr)\n@@ -761,15 +812,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Now that __weak_count is defined we can define this constructor:\n   template<_Lock_policy _Lp>\n-    inline __shared_count<_Lp>:: __shared_count(const __weak_count<_Lp>& __r)\n+    inline\n+    __shared_count<_Lp>::__shared_count(const __weak_count<_Lp>& __r)\n     : _M_pi(__r._M_pi)\n     {\n-      if (_M_pi != 0)\n+      if (_M_pi != nullptr)\n \t_M_pi->_M_add_ref_lock();\n       else\n \t__throw_bad_weak_ptr();\n     }\n \n+  // Now that __weak_count is defined we can define this constructor:\n+  template<_Lock_policy _Lp>\n+    inline\n+    __shared_count<_Lp>::\n+    __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t)\n+    : _M_pi(__r._M_pi)\n+    {\n+      if (_M_pi != nullptr)\n+\tif (!_M_pi->_M_add_ref_lock_nothrow())\n+\t  _M_pi = nullptr;\n+    }\n \n   // Support for enable_shared_from_this.\n \n@@ -1077,6 +1140,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tfriend __shared_ptr<_Tp1, _Lp1>\n \t__allocate_shared(const _Alloc& __a, _Args&&... __args);\n \n+      // This constructor is used by __weak_ptr::lock() and\n+      // shared_ptr::shared_ptr(const weak_ptr&, std::nothrow_t).\n+      __shared_ptr(const __weak_ptr<_Tp, _Lp>& __r, std::nothrow_t)\n+      : _M_refcount(__r._M_refcount, std::nothrow)\n+      {\n+\t_M_ptr = _M_refcount._M_get_use_count() ? __r._M_ptr : nullptr;\n+      }\n+\n+      friend class __weak_ptr<_Tp, _Lp>;\n+\n     private:\n       void*\n       _M_get_deleter(const std::type_info& __ti) const noexcept\n@@ -1322,31 +1395,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       __shared_ptr<_Tp, _Lp>\n       lock() const noexcept\n-      {\n-#ifdef __GTHREADS\n-\t// Optimization: avoid throw overhead.\n-\tif (expired())\n-\t  return __shared_ptr<element_type, _Lp>();\n-\n-\t__try\n-\t  {\n-\t    return __shared_ptr<element_type, _Lp>(*this);\n-\t  }\n-\t__catch(const bad_weak_ptr&)\n-\t  {\n-\t    // Q: How can we get here?\n-\t    // A: Another thread may have invalidated r after the\n-\t    //    use_count test above.\n-\t    return __shared_ptr<element_type, _Lp>();\n-\t  }\n-\n-#else\n-\t// Optimization: avoid try/catch overhead when single threaded.\n-\treturn expired() ? __shared_ptr<element_type, _Lp>()\n-\t\t\t : __shared_ptr<element_type, _Lp>(*this);\n-\n-#endif\n-      } // XXX MT\n+      { return __shared_ptr<element_type, _Lp>(*this, std::nothrow); }\n \n       long\n       use_count() const noexcept"}, {"sha": "fbd8ccde6201a97fb220f1553d03be53c86916ff", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/43820_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/156b60e0b9980ecbfbcdb187ab44937b731dcecb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/156b60e0b9980ecbfbcdb187ab44937b731dcecb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc?ref=156b60e0b9980ecbfbcdb187ab44937b731dcecb", "patch": "@@ -32,7 +32,7 @@ void test01()\n {\n   X* px = 0;\n   std::shared_ptr<X> p1(px);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 812 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 875 }\n \n   std::shared_ptr<X> p9(ap());  // { dg-error \"here\" }\n   // { dg-error \"incomplete\" \"\" { target *-*-* } 307 }"}, {"sha": "3f93a5e5249cd6dfe6d09e322e2645c92e165afd", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/void_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/156b60e0b9980ecbfbcdb187ab44937b731dcecb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fvoid_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/156b60e0b9980ecbfbcdb187ab44937b731dcecb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fvoid_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fvoid_neg.cc?ref=156b60e0b9980ecbfbcdb187ab44937b731dcecb", "patch": "@@ -25,5 +25,5 @@\n void test01()\n {\n   std::shared_ptr<void> p((void*)nullptr);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 811 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 874 }\n }"}]}