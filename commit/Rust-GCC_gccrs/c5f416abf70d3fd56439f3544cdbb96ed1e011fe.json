{"sha": "c5f416abf70d3fd56439f3544cdbb96ed1e011fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVmNDE2YWJmNzBkM2ZkNTY0MzlmMzU0NGNkYmI5NmVkMWUwMTFmZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2007-12-14T19:32:03Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-12-14T19:32:03Z"}, "message": "re PR libstdc++/30127 (std::has_facet returns true for not installed derived facets)\n\n2007-12-14  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/30127\n\tPR libstdc++/34449\n\t* include/bits/locale_classes.h (use_facet): Check facet hierarchy.\n\t(has_facet): Same.\n\t* testsuite/22_locale/global_templates/user_facet_hierarchies.cc: New.\n\t* testsuite/22_locale/global_templates/\n\tstandard_facet_hierarchies.cc: New.\n\nFrom-SVN: r130941", "tree": {"sha": "6faef89b5c2099ffc5e6cedaf675a1482dbca59c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6faef89b5c2099ffc5e6cedaf675a1482dbca59c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5f416abf70d3fd56439f3544cdbb96ed1e011fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5f416abf70d3fd56439f3544cdbb96ed1e011fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5f416abf70d3fd56439f3544cdbb96ed1e011fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5f416abf70d3fd56439f3544cdbb96ed1e011fe/comments", "author": null, "committer": null, "parents": [{"sha": "18117c0574ff93712f6b1710c5bdd70b68695637", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18117c0574ff93712f6b1710c5bdd70b68695637", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18117c0574ff93712f6b1710c5bdd70b68695637"}], "stats": {"total": 219, "additions": 216, "deletions": 3}, "files": [{"sha": "d53fc0ff509ef69430a3e516f9697a83bdc34e4f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5f416abf70d3fd56439f3544cdbb96ed1e011fe/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5f416abf70d3fd56439f3544cdbb96ed1e011fe/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c5f416abf70d3fd56439f3544cdbb96ed1e011fe", "patch": "@@ -1,3 +1,13 @@\n+2007-12-14  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/30127\n+\tPR libstdc++/34449\n+\t* include/bits/locale_classes.h (use_facet): Check facet hierarchy.\n+\t(has_facet): Same.\n+\t* testsuite/22_locale/global_templates/user_facet_hierarchies.cc: New.\n+\t* testsuite/22_locale/global_templates/\n+\tstandard_facet_hierarchies.cc: New.\n+\t\n 2007-12-11  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/34015"}, {"sha": "4eee8621b53f3a8b388ccee26bb69cf5963d20a1", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5f416abf70d3fd56439f3544cdbb96ed1e011fe/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5f416abf70d3fd56439f3544cdbb96ed1e011fe/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=c5f416abf70d3fd56439f3544cdbb96ed1e011fe", "patch": "@@ -579,7 +579,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       const size_t __i = _Facet::id._M_id();\n       const locale::facet** __facets = __loc._M_impl->_M_facets;\n-      return (__i < __loc._M_impl->_M_facets_size && __facets[__i]);\n+      bool __b(false);\n+      try \n+\t{\n+\t  if (__i < __loc._M_impl->_M_facets_size\n+\t      && dynamic_cast<const _Facet*>(__facets[__i]) != NULL)\n+\t    __b = true;\n+\t    \n+\t}\n+      catch (...)\n+\t{ }\n+      return __b;\n     }\n \n   /**\n@@ -601,9 +611,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       const size_t __i = _Facet::id._M_id();\n       const locale::facet** __facets = __loc._M_impl->_M_facets;\n-      if (!(__i < __loc._M_impl->_M_facets_size && __facets[__i]))\n+      if (__i >= __loc._M_impl->_M_facets_size\n+\t  || dynamic_cast<const _Facet*>(__facets[__i]) == NULL)\n         __throw_bad_cast();\n-      return static_cast<const _Facet&>(*__facets[__i]);\n+      return dynamic_cast<const _Facet&>(*__facets[__i]);\n     }\n \n "}, {"sha": "6025867ec45592b4c0d9453b3d19450025047e75", "filename": "libstdc++-v3/testsuite/22_locale/global_templates/standard_facet_hierarchies.cc", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5f416abf70d3fd56439f3544cdbb96ed1e011fe/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fglobal_templates%2Fstandard_facet_hierarchies.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5f416abf70d3fd56439f3544cdbb96ed1e011fe/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fglobal_templates%2Fstandard_facet_hierarchies.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fglobal_templates%2Fstandard_facet_hierarchies.cc?ref=c5f416abf70d3fd56439f3544cdbb96ed1e011fe", "patch": "@@ -0,0 +1,84 @@\n+// Copyright (C) 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <string>\n+#include <locale>\n+#include <cassert>\n+#include <testsuite_hooks.h>\n+\n+// Based on Langer Kreft \"Standard C++ IOStreams and Locales\" p 316-318\n+// PR libstdc++/30127\n+// PR libstdc++/34449\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  using std::locale;\n+  using std::has_facet;\n+  using std::use_facet;\n+  typedef std::ctype<char> base_facet;\n+  typedef std::ctype_byname<char> derived_facet;\n+\n+  locale loc_c = locale::classic();\n+  locale loc_base = loc_c;\n+  locale loc_derived(loc_c, new derived_facet(\"\"));\n+\n+  bool b;\n+\n+  // Standard base facet.\n+  VERIFY( has_facet<base_facet>(loc_c) );\n+  VERIFY( has_facet<base_facet>(loc_base) );\n+  VERIFY( has_facet<base_facet>(loc_derived) );\n+\n+  // Standard derived facet.\n+  VERIFY( !has_facet<derived_facet>(loc_c) );\n+  VERIFY( !has_facet<derived_facet>(loc_base) );\n+  VERIFY( has_facet<derived_facet>(loc_derived) );\n+\n+\n+  // 1\n+  try\n+    {\n+      if (has_facet<derived_facet>(loc_base))\n+\t{\n+\t  use_facet<derived_facet>(loc_base).widen('k');\n+\t  VERIFY( true );\n+\t}\n+    }\n+  catch (...)\n+    { \n+      // Expect no exception.\n+      VERIFY( true );\n+    }\n+\n+  // 2\n+  try\n+    {\n+      if (has_facet<base_facet>(loc_derived))\n+\tuse_facet<base_facet>(loc_derived).widen('k');\n+      else\n+\tVERIFY( true );\n+    }\n+  catch (...)\n+    { \n+      // Expect no exception.\n+      VERIFY( true );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "139223f2aa7a390e76e77ee8251c07918e30711e", "filename": "libstdc++-v3/testsuite/22_locale/global_templates/user_facet_hierarchies.cc", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5f416abf70d3fd56439f3544cdbb96ed1e011fe/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fglobal_templates%2Fuser_facet_hierarchies.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5f416abf70d3fd56439f3544cdbb96ed1e011fe/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fglobal_templates%2Fuser_facet_hierarchies.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fglobal_templates%2Fuser_facet_hierarchies.cc?ref=c5f416abf70d3fd56439f3544cdbb96ed1e011fe", "patch": "@@ -0,0 +1,108 @@\n+// Copyright (C) 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <string>\n+#include <locale>\n+#include <cassert>\n+#include <testsuite_hooks.h>\n+\n+// Based on Langer Kreft \"Standard C++ IOStreams and Locales\" p 316-318\n+struct base_facet: public std::locale::facet\n+{\n+  virtual std::string msg() const\n+  { return \"base class\"; }\n+\n+  static std::locale::id id;\n+};\n+\n+std::locale::id base_facet::id;\n+\n+\n+struct derived_facet: public base_facet\n+{\n+  virtual std::string msg() const\n+  { return \"derived class\"; }\n+\n+  virtual std::string msg_repeater() const\n+  { return \"derived class derived class\"; }\n+\n+};\n+\n+// PR libstdc++/30127\n+// PR libstdc++/34449\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  using std::locale;\n+  using std::has_facet;\n+  using std::use_facet;\n+\n+  locale loc_c = locale::classic();\n+  locale loc_base(loc_c, new base_facet);\n+  locale loc_derived(loc_c, new derived_facet);\n+\n+  bool b;\n+\n+  // Standard facets.\n+  VERIFY( has_facet<std::ctype<char> >(loc_c) );\n+  VERIFY( has_facet<std::ctype<char> >(loc_base) );\n+  VERIFY( has_facet<std::ctype<char> >(loc_derived) );\n+\n+  // User defined base facet.\n+  VERIFY( !has_facet<base_facet>(loc_c) );\n+  VERIFY( has_facet<base_facet>(loc_base) );\n+  VERIFY( has_facet<base_facet>(loc_derived) );\n+\n+  // User defined derived facet.\n+  VERIFY( !has_facet<derived_facet>(loc_c) );\n+  VERIFY( !has_facet<derived_facet>(loc_base) );\n+  VERIFY( has_facet<derived_facet>(loc_derived) );\n+\n+\n+  // 1\n+  try\n+    {\n+      if (has_facet<derived_facet>(loc_base))\n+\t{\n+\t  use_facet<derived_facet>(loc_base).msg_repeater();\n+\t  VERIFY( false );\n+\t}\n+    }\n+  catch (...)\n+    { \n+      // Expect no exception.\n+      VERIFY( true );\n+    }\n+\n+  // 2\n+  try\n+    {\n+      if (has_facet<base_facet>(loc_derived))\n+\tuse_facet<base_facet>(loc_derived).msg();\n+      else\n+\tVERIFY( true );\n+    }\n+  catch (...)\n+    { \n+      // Expect no exception.\n+      VERIFY( true );\n+    }\n+\n+  return 0;\n+}"}]}