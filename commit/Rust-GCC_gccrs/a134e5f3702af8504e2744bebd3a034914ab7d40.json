{"sha": "a134e5f3702af8504e2744bebd3a034914ab7d40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTEzNGU1ZjM3MDJhZjg1MDRlMjc0NGJlYmQzYTAzNDkxNGFiN2Q0MA==", "commit": {"author": {"name": "Tomas Bily", "email": "tomby@gcc.gnu.org", "date": "2008-04-23T12:50:17Z"}, "committer": {"name": "Tomas Bily", "email": "tomby@gcc.gnu.org", "date": "2008-04-23T12:50:17Z"}, "message": "tree-cfg.c (verify_expr): Check for NON_LVALUE_EXPR as unreachable case.\n\n        * tree-cfg.c (verify_expr): Check for NON_LVALUE_EXPR as\n        unreachable case.\n\n        * tree-vrp.c (extract_range_from_unary_expr): Removed unused\n        NON_LVALUE_EXPR.\n\n        * tree-ssa-threadedge.c (simplify_control_stmt_condition):\n        Likewise.\n        \n        * tree-ssa-structalias.c (get_constraint_for): Likewise.\n\n        * tree-inline.c (estimate_num_insns_1): Likewise.\n\n        * varasm.c (const_hash_1, compare_constant, copy_constant)\n        (compute_reloc_for_constant, output_addressed_constants):\n        Likewise.\n\n        * emit-rtl.c (component_ref_for_mem_expr)\n        (set_mem_attributes_minus_bitpos): Likewise.\n\n        * expr.c (highest_pow2_factor, expand_expr_real_1, )\n        (is_aligning_offset): Likewise.\n\n        * dwarf2out.c (loc_descriptor_from_tree_1, add_bound_info):\n        Likewise.\n\n        * tree-ssa-loop-ivopts.c (may_be_nonaddressable_p): Likewise.\n\n        * dojump.c (do_jump): Likewise.\n\n        * builtins.c (get_pointer_alignment, get_memory_rtx)\n        (integer_valued_real_p, fold_builtin_next_arg): Likewise.\n\n        * tree-scalar-evolution.c (instantiate_parameters_1): Likewise.\n\nFrom-SVN: r134591", "tree": {"sha": "fc970abad33f221b6b9b0e13eae65c93c720eb12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc970abad33f221b6b9b0e13eae65c93c720eb12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a134e5f3702af8504e2744bebd3a034914ab7d40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a134e5f3702af8504e2744bebd3a034914ab7d40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a134e5f3702af8504e2744bebd3a034914ab7d40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a134e5f3702af8504e2744bebd3a034914ab7d40/comments", "author": null, "committer": null, "parents": [{"sha": "e24703834e9d89319aaf494cd44f19ac82e30651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e24703834e9d89319aaf494cd44f19ac82e30651", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e24703834e9d89319aaf494cd44f19ac82e30651"}], "stats": {"total": 51, "additions": 13, "deletions": 38}, "files": [{"sha": "06ecb2475b69c6292b3695e19ce78dd678194d99", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a134e5f3702af8504e2744bebd3a034914ab7d40/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a134e5f3702af8504e2744bebd3a034914ab7d40/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=a134e5f3702af8504e2744bebd3a034914ab7d40", "patch": "@@ -281,7 +281,6 @@ get_pointer_alignment (tree exp, unsigned int max_align)\n \t{\n \tcase NOP_EXPR:\n \tcase CONVERT_EXPR:\n-\tcase NON_LVALUE_EXPR:\n \t  exp = TREE_OPERAND (exp, 0);\n \t  if (! POINTER_TYPE_P (TREE_TYPE (exp)))\n \t    return align;\n@@ -1073,8 +1072,7 @@ get_memory_rtx (tree exp, tree len)\n   /* Get an expression we can use to find the attributes to assign to MEM.\n      If it is an ADDR_EXPR, use the operand.  Otherwise, dereference it if\n      we can.  First remove any nops.  */\n-  while ((TREE_CODE (exp) == NOP_EXPR || TREE_CODE (exp) == CONVERT_EXPR\n-\t  || TREE_CODE (exp) == NON_LVALUE_EXPR)\n+  while ((TREE_CODE (exp) == NOP_EXPR || TREE_CODE (exp) == CONVERT_EXPR)\n \t && POINTER_TYPE_P (TREE_TYPE (TREE_OPERAND (exp, 0))))\n     exp = TREE_OPERAND (exp, 0);\n \n@@ -1106,7 +1104,6 @@ get_memory_rtx (tree exp, tree len)\n \t  while (TREE_CODE (inner) == ARRAY_REF\n \t\t || TREE_CODE (inner) == NOP_EXPR\n \t\t || TREE_CODE (inner) == CONVERT_EXPR\n-\t\t || TREE_CODE (inner) == NON_LVALUE_EXPR\n \t\t || TREE_CODE (inner) == VIEW_CONVERT_EXPR\n \t\t || TREE_CODE (inner) == SAVE_EXPR)\n \t    inner = TREE_OPERAND (inner, 0);\n@@ -7265,7 +7262,6 @@ integer_valued_real_p (tree t)\n \n     case ABS_EXPR:\n     case SAVE_EXPR:\n-    case NON_LVALUE_EXPR:\n       return integer_valued_real_p (TREE_OPERAND (t, 0));\n \n     case COMPOUND_EXPR:\n@@ -11435,7 +11431,6 @@ fold_builtin_next_arg (tree exp, bool va_start_p)\n \t parameters.  */\n       while (TREE_CODE (arg) == NOP_EXPR\n \t     || TREE_CODE (arg) == CONVERT_EXPR\n-\t     || TREE_CODE (arg) == NON_LVALUE_EXPR\n \t     || TREE_CODE (arg) == INDIRECT_REF)\n \targ = TREE_OPERAND (arg, 0);\n       if (arg != last_parm)"}, {"sha": "e7afb7ef0a8540b02150b82d7bfd3c82beef78d4", "filename": "gcc/dojump.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a134e5f3702af8504e2744bebd3a034914ab7d40/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a134e5f3702af8504e2744bebd3a034914ab7d40/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=a134e5f3702af8504e2744bebd3a034914ab7d40", "patch": "@@ -219,8 +219,7 @@ do_jump (tree exp, rtx if_false_label, rtx if_true_label)\n \n \t  /* Strip narrowing integral type conversions.  */\n \t  while ((TREE_CODE (exp0) == NOP_EXPR\n-\t\t  || TREE_CODE (exp0) == CONVERT_EXPR\n-\t\t  || TREE_CODE (exp0) == NON_LVALUE_EXPR)\n+\t\t  || TREE_CODE (exp0) == CONVERT_EXPR)\n \t\t && TREE_OPERAND (exp0, 0) != error_mark_node\n \t\t && TYPE_PRECISION (TREE_TYPE (exp0))\n \t\t    <= TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (exp0, 0))))"}, {"sha": "2c7f3184e7cfdc195f4f3de7b62def29a95018d2", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a134e5f3702af8504e2744bebd3a034914ab7d40/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a134e5f3702af8504e2744bebd3a034914ab7d40/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=a134e5f3702af8504e2744bebd3a034914ab7d40", "patch": "@@ -9583,7 +9583,6 @@ loc_descriptor_from_tree_1 (tree loc, int want_address)\n \n     case NOP_EXPR:\n     case CONVERT_EXPR:\n-    case NON_LVALUE_EXPR:\n     case VIEW_CONVERT_EXPR:\n     case SAVE_EXPR:\n     case GIMPLE_MODIFY_STMT:\n@@ -11212,7 +11211,6 @@ add_bound_info (dw_die_ref subrange_die, enum dwarf_attribute bound_attr, tree b\n \n     case CONVERT_EXPR:\n     case NOP_EXPR:\n-    case NON_LVALUE_EXPR:\n     case VIEW_CONVERT_EXPR:\n       add_bound_info (subrange_die, bound_attr, TREE_OPERAND (bound, 0));\n       break;"}, {"sha": "b8b19d6d224ef7eccb75b73c1392998bcd78102f", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a134e5f3702af8504e2744bebd3a034914ab7d40/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a134e5f3702af8504e2744bebd3a034914ab7d40/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=a134e5f3702af8504e2744bebd3a034914ab7d40", "patch": "@@ -1432,7 +1432,6 @@ component_ref_for_mem_expr (tree ref)\n       /* Now remove any conversions: they don't change what the underlying\n \t object is.  Likewise for SAVE_EXPR.  */\n       while (TREE_CODE (inner) == NOP_EXPR || TREE_CODE (inner) == CONVERT_EXPR\n-\t     || TREE_CODE (inner) == NON_LVALUE_EXPR\n \t     || TREE_CODE (inner) == VIEW_CONVERT_EXPR\n \t     || TREE_CODE (inner) == SAVE_EXPR)\n \tinner = TREE_OPERAND (inner, 0);\n@@ -1563,7 +1562,6 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n       /* Now remove any conversions: they don't change what the underlying\n \t object is.  Likewise for SAVE_EXPR.  */\n       while (TREE_CODE (t) == NOP_EXPR || TREE_CODE (t) == CONVERT_EXPR\n-\t     || TREE_CODE (t) == NON_LVALUE_EXPR\n \t     || TREE_CODE (t) == VIEW_CONVERT_EXPR\n \t     || TREE_CODE (t) == SAVE_EXPR)\n \tt = TREE_OPERAND (t, 0);"}, {"sha": "1bb3d820c8c354e4eb3ff68b7d47f4b178bbd1c5", "filename": "gcc/expr.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a134e5f3702af8504e2744bebd3a034914ab7d40/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a134e5f3702af8504e2744bebd3a034914ab7d40/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=a134e5f3702af8504e2744bebd3a034914ab7d40", "patch": "@@ -6599,7 +6599,7 @@ highest_pow2_factor (const_tree exp)\n \t}\n       break;\n \n-    case NON_LVALUE_EXPR:  case NOP_EXPR:  case CONVERT_EXPR:\n+    case NOP_EXPR:  case CONVERT_EXPR:\n     case SAVE_EXPR:\n       return highest_pow2_factor (TREE_OPERAND (exp, 0));\n \n@@ -7121,9 +7121,8 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n     }\n \n   ignore = (target == const0_rtx\n-\t    || ((code == NON_LVALUE_EXPR || code == NOP_EXPR\n-\t\t || code == CONVERT_EXPR || code == COND_EXPR\n-\t\t || code == VIEW_CONVERT_EXPR)\n+\t    || ((code == NOP_EXPR || code == CONVERT_EXPR \n+\t\t || code == COND_EXPR || code == VIEW_CONVERT_EXPR)\n \t\t&& TREE_CODE (type) == VOID_TYPE));\n \n   /* An operation in what may be a bit-field type needs the\n@@ -8018,7 +8017,6 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       return expand_call (exp, target, ignore);\n \n     case PAREN_EXPR:\n-    case NON_LVALUE_EXPR:\n     case NOP_EXPR:\n     case CONVERT_EXPR:\n       if (TREE_OPERAND (exp, 0) == error_mark_node)\n@@ -9411,8 +9409,7 @@ static int\n is_aligning_offset (const_tree offset, const_tree exp)\n {\n   /* Strip off any conversions.  */\n-  while (TREE_CODE (offset) == NON_LVALUE_EXPR\n-\t || TREE_CODE (offset) == NOP_EXPR\n+  while (TREE_CODE (offset) == NOP_EXPR\n \t || TREE_CODE (offset) == CONVERT_EXPR)\n     offset = TREE_OPERAND (offset, 0);\n \n@@ -9428,17 +9425,15 @@ is_aligning_offset (const_tree offset, const_tree exp)\n   /* Look at the first operand of BIT_AND_EXPR and strip any conversion.\n      It must be NEGATE_EXPR.  Then strip any more conversions.  */\n   offset = TREE_OPERAND (offset, 0);\n-  while (TREE_CODE (offset) == NON_LVALUE_EXPR\n-\t || TREE_CODE (offset) == NOP_EXPR\n+  while (TREE_CODE (offset) == NOP_EXPR\n \t || TREE_CODE (offset) == CONVERT_EXPR)\n     offset = TREE_OPERAND (offset, 0);\n \n   if (TREE_CODE (offset) != NEGATE_EXPR)\n     return 0;\n \n   offset = TREE_OPERAND (offset, 0);\n-  while (TREE_CODE (offset) == NON_LVALUE_EXPR\n-\t || TREE_CODE (offset) == NOP_EXPR\n+  while (TREE_CODE (offset) == NOP_EXPR\n \t || TREE_CODE (offset) == CONVERT_EXPR)\n     offset = TREE_OPERAND (offset, 0);\n "}, {"sha": "4ab192dffa95fcff38605794a9eeac88f7744956", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a134e5f3702af8504e2744bebd3a034914ab7d40/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a134e5f3702af8504e2744bebd3a034914ab7d40/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=a134e5f3702af8504e2744bebd3a034914ab7d40", "patch": "@@ -3254,14 +3254,16 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n \t}\n       break;\n \n+    case NON_LVALUE_EXPR:\n+\tgcc_unreachable ();\n+\n     case NOP_EXPR:\n     case CONVERT_EXPR:\n     case FIX_TRUNC_EXPR:\n     case FLOAT_EXPR:\n     case NEGATE_EXPR:\n     case ABS_EXPR:\n     case BIT_NOT_EXPR:\n-    case NON_LVALUE_EXPR:\n     case TRUTH_NOT_EXPR:\n       CHECK_OP (0, \"invalid operand to unary operator\");\n       break;"}, {"sha": "687ed95c96474b4c704a74822a0f56295c9285b4", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a134e5f3702af8504e2744bebd3a034914ab7d40/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a134e5f3702af8504e2744bebd3a034914ab7d40/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=a134e5f3702af8504e2744bebd3a034914ab7d40", "patch": "@@ -2233,7 +2233,6 @@ estimate_num_insns_1 (tree *tp, int *walk_subtrees, void *data)\n     case EH_FILTER_EXPR:\n     case STATEMENT_LIST:\n     case ERROR_MARK:\n-    case NON_LVALUE_EXPR:\n     case FDESC_EXPR:\n     case VA_ARG_EXPR:\n     case TRY_CATCH_EXPR:"}, {"sha": "31b77689b1a80017424d67b0f0eb5785366d3a5c", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a134e5f3702af8504e2744bebd3a034914ab7d40/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a134e5f3702af8504e2744bebd3a034914ab7d40/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=a134e5f3702af8504e2744bebd3a034914ab7d40", "patch": "@@ -2117,7 +2117,6 @@ instantiate_parameters_1 (struct loop *loop, tree chrec, int flags, htab_t cache\n \n     case NOP_EXPR:\n     case CONVERT_EXPR:\n-    case NON_LVALUE_EXPR:\n       op0 = instantiate_parameters_1 (loop, TREE_OPERAND (chrec, 0),\n \t\t\t\t      flags, cache, size_expr);\n       if (op0 == chrec_dont_know)"}, {"sha": "0687e891686541edf5d16bdabf132ad6b30d2d01", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a134e5f3702af8504e2744bebd3a034914ab7d40/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a134e5f3702af8504e2744bebd3a034914ab7d40/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=a134e5f3702af8504e2744bebd3a034914ab7d40", "patch": "@@ -1541,7 +1541,6 @@ may_be_nonaddressable_p (tree expr)\n       return may_be_nonaddressable_p (TREE_OPERAND (expr, 0));\n \n     case CONVERT_EXPR:\n-    case NON_LVALUE_EXPR:\n     case NOP_EXPR:\n       return true;\n "}, {"sha": "5323a2ba9767d7b29b20a388b358497c6a0ae34f", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a134e5f3702af8504e2744bebd3a034914ab7d40/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a134e5f3702af8504e2744bebd3a034914ab7d40/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=a134e5f3702af8504e2744bebd3a034914ab7d40", "patch": "@@ -2913,7 +2913,6 @@ get_constraint_for (tree t, VEC (ce_s, heap) **results)\n \t  {\n \t  case NOP_EXPR:\n \t  case CONVERT_EXPR:\n-\t  case NON_LVALUE_EXPR:\n \t    {\n \t      tree op = TREE_OPERAND (t, 0);\n "}, {"sha": "d0d8fb229ab49dca796d066c20214180e7147635", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a134e5f3702af8504e2744bebd3a034914ab7d40/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a134e5f3702af8504e2744bebd3a034914ab7d40/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=a134e5f3702af8504e2744bebd3a034914ab7d40", "patch": "@@ -429,8 +429,7 @@ simplify_control_stmt_condition (edge e,\n \n       cached_lhs = fold (COND_EXPR_COND (dummy_cond));\n       while (TREE_CODE (cached_lhs) == NOP_EXPR\n-\t     || TREE_CODE (cached_lhs) == CONVERT_EXPR\n-\t     || TREE_CODE (cached_lhs) == NON_LVALUE_EXPR)\n+\t     || TREE_CODE (cached_lhs) == CONVERT_EXPR)\n \tcached_lhs = TREE_OPERAND (cached_lhs, 0);\n \n       fold_undefer_overflow_warnings (is_gimple_min_invariant (cached_lhs),"}, {"sha": "95f2a5238da354ce61ebd334600e4747ca1a84ed", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a134e5f3702af8504e2744bebd3a034914ab7d40/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a134e5f3702af8504e2744bebd3a034914ab7d40/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=a134e5f3702af8504e2744bebd3a034914ab7d40", "patch": "@@ -2292,7 +2292,6 @@ extract_range_from_unary_expr (value_range_t *vr, enum tree_code code,\n   if (code == FIX_TRUNC_EXPR\n       || code == FLOAT_EXPR\n       || code == BIT_NOT_EXPR\n-      || code == NON_LVALUE_EXPR\n       || code == CONJ_EXPR)\n     {\n       set_value_range_to_varying (vr);\n@@ -3957,8 +3956,7 @@ register_edge_assert_for_1 (tree op, enum tree_code code,\n       retval |= register_edge_assert_for_1 (rhs, code, e, bsi);\n     }\n   else if (TREE_CODE (rhs) == NOP_EXPR\n-\t   || TREE_CODE (rhs) == CONVERT_EXPR\n-\t   || TREE_CODE (rhs) == NON_LVALUE_EXPR)\n+\t   || TREE_CODE (rhs) == CONVERT_EXPR)\n     { \n       /* Recurse through the type conversion.  */\n       retval |= register_edge_assert_for_1 (TREE_OPERAND (rhs, 0),"}, {"sha": "518fe8a70546689d80f6b7a5729581d7fa3112fb", "filename": "gcc/varasm.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a134e5f3702af8504e2744bebd3a034914ab7d40/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a134e5f3702af8504e2744bebd3a034914ab7d40/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=a134e5f3702af8504e2744bebd3a034914ab7d40", "patch": "@@ -2815,7 +2815,6 @@ const_hash_1 (const tree exp)\n \n     case NOP_EXPR:\n     case CONVERT_EXPR:\n-    case NON_LVALUE_EXPR:\n       return const_hash_1 (TREE_OPERAND (exp, 0)) * 7 + 2;\n \n     default:\n@@ -2970,7 +2969,6 @@ compare_constant (const tree t1, const tree t2)\n \n     case NOP_EXPR:\n     case CONVERT_EXPR:\n-    case NON_LVALUE_EXPR:\n     case VIEW_CONVERT_EXPR:\n       return compare_constant (TREE_OPERAND (t1, 0), TREE_OPERAND (t2, 0));\n \n@@ -3018,7 +3016,6 @@ copy_constant (tree exp)\n \n     case NOP_EXPR:\n     case CONVERT_EXPR:\n-    case NON_LVALUE_EXPR:\n     case VIEW_CONVERT_EXPR:\n       return build1 (TREE_CODE (exp), TREE_TYPE (exp),\n \t\t     copy_constant (TREE_OPERAND (exp, 0)));\n@@ -3917,7 +3914,6 @@ compute_reloc_for_constant (tree exp)\n \n     case NOP_EXPR:\n     case CONVERT_EXPR:\n-    case NON_LVALUE_EXPR:\n     case VIEW_CONVERT_EXPR:\n       reloc = compute_reloc_for_constant (TREE_OPERAND (exp, 0));\n       break;\n@@ -3973,7 +3969,6 @@ output_addressed_constants (tree exp)\n \n     case NOP_EXPR:\n     case CONVERT_EXPR:\n-    case NON_LVALUE_EXPR:\n     case VIEW_CONVERT_EXPR:\n       output_addressed_constants (TREE_OPERAND (exp, 0));\n       break;"}]}