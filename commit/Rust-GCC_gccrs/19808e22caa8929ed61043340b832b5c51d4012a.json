{"sha": "19808e22caa8929ed61043340b832b5c51d4012a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk4MDhlMjJjYWE4OTI5ZWQ2MTA0MzM0MGI4MzJiNWM1MWQ0MDEyYQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-24T07:45:54Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-24T07:45:54Z"}, "message": "(subst): For subreg-of-constant, don't gen_lowpart\nif it's a big-endian machine and constant is multi-word.\n\nFrom-SVN: r4554", "tree": {"sha": "144a73f1a5aec1bc8835c4c9a3d2f35f19b1888d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/144a73f1a5aec1bc8835c4c9a3d2f35f19b1888d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19808e22caa8929ed61043340b832b5c51d4012a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19808e22caa8929ed61043340b832b5c51d4012a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19808e22caa8929ed61043340b832b5c51d4012a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19808e22caa8929ed61043340b832b5c51d4012a/comments", "author": null, "committer": null, "parents": [{"sha": "87d11e4386cc35cc4b7ad51882e0ba8718e459bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87d11e4386cc35cc4b7ad51882e0ba8718e459bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87d11e4386cc35cc4b7ad51882e0ba8718e459bb"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "49e214eecbf70ec41bde93fd635b062eab3c15bc", "filename": "gcc/combine.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19808e22caa8929ed61043340b832b5c51d4012a/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19808e22caa8929ed61043340b832b5c51d4012a/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=19808e22caa8929ed61043340b832b5c51d4012a", "patch": "@@ -3085,8 +3085,16 @@ subst (x, from, to, in_dest, unique_copy)\n \t    return temp;\n \t}\n \t\n+      /* If we want a subreg of a constant, at offset 0,\n+\t take the low bits.  On a little-endian machine, that's\n+\t always valid.  On a big-endian machine, it's valid\n+\t only if the constant's mode fits in one word.  */\n       if (CONSTANT_P (SUBREG_REG (x)) && subreg_lowpart_p (x)\n-\t  && GET_MODE_SIZE (mode) < GET_MODE_SIZE (op0_mode))\n+\t  && GET_MODE_SIZE (mode) < GET_MODE_SIZE (op0_mode)\n+#if WORDS_BIG_ENDIAN\n+\t  && GET_MODE_BITSIZE (op0_mode) < BITS_PER_WORD\n+#endif\n+\t  )\n \treturn gen_lowpart_for_combine (mode, SUBREG_REG (x));\n \n       /* If we are narrowing the object, we need to see if we can simplify"}]}