{"sha": "7a300452804d7f1d6f71d9cba31c5476ab2f2766", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EzMDA0NTI4MDRkN2YxZDZmNzFkOWNiYTMxYzU0NzZhYjJmMjc2Ng==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2013-09-12T13:03:18Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2013-09-12T13:03:18Z"}, "message": "tree-ssa.h: New.\n\n\n\t* tree-ssa.h: New.  Move content from tree-flow.h and\n\ttree-flow-inline.h.\n\t* tree-flow.h (_edge_var_map, edge_var_map_vector): Move to tree-ssa.h.\n\tMove prototypes belonging to tree-ssa.c.\n\t* tree-flow-inline.h (redirect_edge_var_map_def, \n\tredirect_edge_var_map_result, redirect_edge_var_map_location): Move to\n\ttree-ssa.h.\n\t* gimple.h: Adjust prototypes.\n\t* tree-ssa.c (useless_type_conversion_p, types_compatible_p): Move to...\n\t* gimple.c (useless_type_conversion_p, types_compatible_p):  Here.\n\t* tree.h: Move prototype to tree-ssa.h.\n\t* gengtype.c (open_base_files): Replace tree-flow.h with tree-ssa.h.\n\t* Makefile.in: (TREE_SSA_H, TREE_FLOW_H): Adjust dependencies.\n\t* alias.c, asan.c, builtins.c, calls.c, cfgexpand.c, cfghooks.c,\n\tcfgloop.c, cfgloopmanip.c, cgraph.c, cgraphbuild.c, cgraphclones.c,\n\tcgraphunit.c, dse.c, except.c, expr.c, final.c, fold-const.c,\n\tggc-page.c, gimple-fold.c, gimple-iterator.c, gimple-low.c,\n\tgimple-pretty-print.c, gimple-ssa-strength-reduction.c,\n\tgimple-streamer-in.c, gimple-streamer-out.c, gimple.c, gimplify.c,\n\tgraphite-blocking.c, graphite-clast-to-gimple.c, graphite-dependences.c,\n\tgraphite-interchange.c, graphite-optimize-isl.c, graphite-poly.c,\n\tgraphite-scop-detection.c, graphite-sese-to-poly.c, graphite.c,\n\tipa-cp.c, ipa-inline-analysis.c, ipa-inline-transform.c, ipa-inline.c,\n\tipa-prop.c, ipa-pure-const.c, ipa-reference.c, ipa-split.c, ipa-utils.c,\n\tloop-init.c, lto-cgraph.c, lto-section-in.c, lto-section-out.c,\n\tlto-streamer-in.c, lto-streamer-out.c, lto-streamer.c, omp-low.c,\n\tpasses.c, predict.c, print-tree.c, profile.c, sese.c, targhooks.c,\n\ttracer.c, trans-mem.c, tree-call-cdce.c, tree-cfg.c, tree-cfgcleanup.c,\n\ttree-chrec.c, tree-complex.c, tree-data-ref.c, tree-dfa.c, tree-eh.c,\n\ttree-emutls.c, tree-if-conv.c, tree-inline.c, tree-into-ssa.c,\n\ttree-loop-distribution.c, tree-mudflap.c, tree-nested.c, tree-nrv.c,\n\ttree-object-size.c, tree-optimize.c, tree-outof-ssa.c, tree-parloops.c,\n\ttree-phinodes.c, tree-predcom.c, tree-pretty-print.c, tree-profile.c,\n\ttree-scalar-evolution.c, tree-sra.c, tree-ssa*.c, tree-stdarg.c,\n\ttree-streamer-in.c, tree-switch-conversion.c, tree-tailcall.c,\n\ttree-vect-data-refs.c, tree-vect-generic.c, tree-vect-loop-manip.c,\n\ttree-vect-loop.c, tree-vect-patterns.c, tree-vect-slp.c,\n\ttree-vect-stmts.c, tree-vectorizer.c, tree-vrp.c, tsan.c,\n\tvalue-prof.c, var-tracking.c,\n\tvarpool.c, vtable-verify.c: Replace tree-flow.h with tree-ssa.h\n\nFrom-SVN: r202523", "tree": {"sha": "7595bbd037949c5a99e1f26512698945a837ee12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7595bbd037949c5a99e1f26512698945a837ee12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a300452804d7f1d6f71d9cba31c5476ab2f2766", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a300452804d7f1d6f71d9cba31c5476ab2f2766", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a300452804d7f1d6f71d9cba31c5476ab2f2766", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a300452804d7f1d6f71d9cba31c5476ab2f2766/comments", "author": null, "committer": null, "parents": [{"sha": "33605886ff20aeffb08529e2d571fff5483e650e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33605886ff20aeffb08529e2d571fff5483e650e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33605886ff20aeffb08529e2d571fff5483e650e"}], "stats": {"total": 1312, "additions": 688, "deletions": 624}, "files": [{"sha": "290d51ba2e17bdd874b8ba18538f250266906acf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -1,3 +1,46 @@\n+2013-09-12  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* tree-ssa.h: New.  Move content from tree-flow.h and\n+\ttree-flow-inline.h.\n+\t* tree-flow.h (_edge_var_map, edge_var_map_vector): Move to tree-ssa.h.\n+\tMove prototypes belonging to tree-ssa.c.\n+\t* tree-flow-inline.h (redirect_edge_var_map_def, \n+\tredirect_edge_var_map_result, redirect_edge_var_map_location): Move to\n+\ttree-ssa.h.\n+\t* gimple.h: Adjust prototypes.\n+\t* tree-ssa.c (useless_type_conversion_p, types_compatible_p): Move to...\n+\t* gimple.c (useless_type_conversion_p, types_compatible_p):  Here.\n+\t* tree.h: Move prototype to tree-ssa.h.\n+\t* gengtype.c (open_base_files): Replace tree-flow.h with tree-ssa.h.\n+\t* Makefile.in: (TREE_SSA_H, TREE_FLOW_H): Adjust dependencies.\n+\t* alias.c, asan.c, builtins.c, calls.c, cfgexpand.c, cfghooks.c,\n+\tcfgloop.c, cfgloopmanip.c, cgraph.c, cgraphbuild.c, cgraphclones.c,\n+\tcgraphunit.c, dse.c, except.c, expr.c, final.c, fold-const.c,\n+\tggc-page.c, gimple-fold.c, gimple-iterator.c, gimple-low.c,\n+\tgimple-pretty-print.c, gimple-ssa-strength-reduction.c,\n+\tgimple-streamer-in.c, gimple-streamer-out.c, gimple.c, gimplify.c,\n+\tgraphite-blocking.c, graphite-clast-to-gimple.c, graphite-dependences.c,\n+\tgraphite-interchange.c, graphite-optimize-isl.c, graphite-poly.c,\n+\tgraphite-scop-detection.c, graphite-sese-to-poly.c, graphite.c,\n+\tipa-cp.c, ipa-inline-analysis.c, ipa-inline-transform.c, ipa-inline.c,\n+\tipa-prop.c, ipa-pure-const.c, ipa-reference.c, ipa-split.c, ipa-utils.c,\n+\tloop-init.c, lto-cgraph.c, lto-section-in.c, lto-section-out.c,\n+\tlto-streamer-in.c, lto-streamer-out.c, lto-streamer.c, omp-low.c,\n+\tpasses.c, predict.c, print-tree.c, profile.c, sese.c, targhooks.c,\n+\ttracer.c, trans-mem.c, tree-call-cdce.c, tree-cfg.c, tree-cfgcleanup.c,\n+\ttree-chrec.c, tree-complex.c, tree-data-ref.c, tree-dfa.c, tree-eh.c,\n+\ttree-emutls.c, tree-if-conv.c, tree-inline.c, tree-into-ssa.c,\n+\ttree-loop-distribution.c, tree-mudflap.c, tree-nested.c, tree-nrv.c,\n+\ttree-object-size.c, tree-optimize.c, tree-outof-ssa.c, tree-parloops.c,\n+\ttree-phinodes.c, tree-predcom.c, tree-pretty-print.c, tree-profile.c,\n+\ttree-scalar-evolution.c, tree-sra.c, tree-ssa*.c, tree-stdarg.c,\n+\ttree-streamer-in.c, tree-switch-conversion.c, tree-tailcall.c,\n+\ttree-vect-data-refs.c, tree-vect-generic.c, tree-vect-loop-manip.c,\n+\ttree-vect-loop.c, tree-vect-patterns.c, tree-vect-slp.c,\n+\ttree-vect-stmts.c, tree-vectorizer.c, tree-vrp.c, tsan.c,\n+\tvalue-prof.c, var-tracking.c,\n+\tvarpool.c, vtable-verify.c: Replace tree-flow.h with tree-ssa.h\n+\n 2013-09-12  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/58396"}, {"sha": "c1113a6b93f38574af94e0fff13b0ada2e87aeea", "filename": "gcc/Makefile.in", "status": "modified", "additions": 149, "deletions": 148, "changes": 297, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -947,6 +947,7 @@ TREE_FLOW_H = tree-flow.h tree-flow-inline.h tree-ssa-operands.h \\\n \t\t$(BITMAP_H) sbitmap.h $(BASIC_BLOCK_H) $(GIMPLE_H) \\\n \t\t$(HASHTAB_H) $(CGRAPH_H) $(IPA_REFERENCE_H) \\\n \t\ttree-ssa-alias.h\n+TREE_SSA_H = tree-ssa.h $(TREE_FLOW_H)\n TREE_HASHER_H = tree-hasher.h $(HASH_TABLE_H) $(TREE_FLOW_H)\n TREE_SSA_LIVE_H = tree-ssa-live.h $(PARTITION_H)\n SSAEXPAND_H = ssaexpand.h $(TREE_SSA_LIVE_H)\n@@ -2130,13 +2131,13 @@ gtype-desc.o: gtype-desc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t$(HASHTAB_H) $(SPLAY_TREE_H) $(OBSTACK_H) $(BITMAP_H) \\\n \t$(INPUT_H) $(TREE_H) $(RTL_H) $(FUNCTION_H) insn-config.h $(EXPR_H) \\\n \thard-reg-set.h $(BASIC_BLOCK_H) cselib.h $(INSN_ADDR_H) $(OPTABS_H) \\\n-\t$(LIBFUNCS_H) debug.h $(GGC_H) $(CGRAPH_H) $(TREE_FLOW_H) reload.h \\\n+\t$(LIBFUNCS_H) debug.h $(GGC_H) $(CGRAPH_H) $(TREE_SSA_H) reload.h \\\n \t$(CPP_ID_DATA_H) tree-chrec.h $(EXCEPT_H) output.h \\\n \t$(CFGLOOP_H) $(TARGET_H) $(IPA_PROP_H) $(LTO_STREAMER_H) \\\n \ttarget-globals.h\n \n trans-mem.o : trans-mem.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(HASH_TABLE_H) \\\n-\t$(TREE_H) $(GIMPLE_H) $(TREE_FLOW_H) $(TREE_PASS_H) $(TREE_INLINE_H) \\\n+\t$(TREE_H) $(GIMPLE_H) $(TREE_SSA_H) $(TREE_PASS_H) $(TREE_INLINE_H) \\\n \t$(DIAGNOSTIC_CORE_H) $(DEMANGLE_H) output.h $(TRANS_MEM_H) \\\n \t$(PARAMS_H) $(TARGET_H) langhooks.h \\\n \t$(GIMPLE_PRETTY_PRINT_H) $(CFGLOOP_H) \\\n@@ -2148,7 +2149,7 @@ ggc-common.o: ggc-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\t\\\n \n ggc-page.o: ggc-page.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n \t$(FLAGS_H) $(DIAGNOSTIC_CORE_H) $(GGC_H) $(TIMEVAR_H) $(TM_P_H) $(PARAMS_H) \\\n-\t$(TREE_FLOW_H) $(PLUGIN_H) $(GGC_INTERNAL_H)\n+\t$(TREE_SSA_H) $(PLUGIN_H) $(GGC_INTERNAL_H)\n \n ggc-none.o: ggc-none.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(GGC_H) \\\n \t$(BCONFIG_H)\n@@ -2173,15 +2174,15 @@ data-streamer-out.o: data-streamer-out.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n data-streamer.o: data-streamer.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n     $(DATA_STREAMER_H)\n gimple-streamer-in.o: gimple-streamer-in.c $(CONFIG_H) $(SYSTEM_H) \\\n-    coretypes.h $(GIMPLE_STREAMER_H) $(TREE_FLOW_H) $(DATA_STREAMER_H) \\\n+    coretypes.h $(GIMPLE_STREAMER_H) $(TREE_SSA_H) $(DATA_STREAMER_H) \\\n     $(TREE_STREAMER_H) $(DIAGNOSTIC_H)\n gimple-streamer-out.o: gimple-streamer-out.c $(CONFIG_H) $(SYSTEM_H) \\\n-    coretypes.h $(GIMPLE_STREAMER_H) $(DATA_STREAMER_H) $(TREE_FLOW_H) \\\n+    coretypes.h $(GIMPLE_STREAMER_H) $(DATA_STREAMER_H) $(TREE_SSA_H) \\\n     $(LTO_STREAMER_H) $(TREE_STREAMER_H)\n tree-streamer.o: tree-streamer.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n     $(TREE_STREAMER_H) $(STREAMER_HOOKS_H)\n tree-streamer-in.o: tree-streamer-in.c $(CONFIG_H) $(SYSTEM_H) \\\n-    coretypes.h $(DIAGNOSTIC_H) $(TREE_H) $(TREE_FLOW_H) $(TREE_STREAMER_H) \\\n+    coretypes.h $(DIAGNOSTIC_H) $(TREE_H) $(TREE_SSA_H) $(TREE_STREAMER_H) \\\n     $(DATA_STREAMER_H) $(STREAMER_HOOKS_H) $(LTO_STREAMER_H)\n tree-streamer-out.o: tree-streamer-out.c $(CONFIG_H) $(SYSTEM_H) \\\n     coretypes.h $(DIAGNOSTIC_H) $(TREE_STREAMER_H) $(DATA_STREAMER_H) \\\n@@ -2224,7 +2225,7 @@ lto-opts.o: lto-opts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n    $(COMMON_TARGET_H) $(DIAGNOSTIC_H) $(LTO_STREAMER_H)\n lto-streamer.o: lto-streamer.c $(CONFIG_H) $(SYSTEM_H) coretypes.h   \\\n    $(TM_H) $(TREE_H) $(GIMPLE_H) $(BITMAP_H) $(LTO_STREAMER_H) $(FLAGS_H) \\\n-   $(TREE_FLOW_H) $(DIAGNOSTIC_CORE_H) $(LTO_SYMTAB_H) toplev.h \\\n+   $(TREE_SSA_H) $(DIAGNOSTIC_CORE_H) $(LTO_SYMTAB_H) toplev.h \\\n    $(DIAGNOSTIC_CORE_H) $(STREAMER_HOOKS_H)\n langhooks.o : langhooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TIMEVAR_H) \\\n    $(TREE_H) toplev.h $(DIAGNOSTIC_CORE_H) $(TREE_INLINE_H) $(RTL_H) insn-config.h \\\n@@ -2233,13 +2234,13 @@ langhooks.o : langhooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TIMEVAR_\n test-dump.o : test-dump.c $(CONFIG_H) $(SYSTEM_H) $(CORETYPES_H) \\\n    $(BITMAP_H) sbitmap.h sreal.h $(TREE_H) $(CXX_PARSER_H) $(DWARF2OUT_H) \\\n    $(GIMPLE_PRETTY_PRINT_H) $(BASIC_BLOCK_H) insn-config.h $(LRA_INT.H) \\\n-   $(SEL_SCHED_DUMP_H) $(IRA_INT_H) $(TREE_DATA_REF_H) $(TREE_FLOW_H) \\\n+   $(SEL_SCHED_DUMP_H) $(IRA_INT_H) $(TREE_DATA_REF_H) $(TREE_SSA_H) \\\n    $(TREE_SSA_LIVE_H) tree-ssa-alias.h $(OMEGA_H) $(RTL_H)\n tree.o: tree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    all-tree.def $(FLAGS_H) $(FUNCTION_H) $(PARAMS_H) \\\n    toplev.h $(DIAGNOSTIC_CORE_H) $(GGC_H) $(HASHTAB_H) $(TARGET_H) output.h $(TM_P_H) \\\n    langhooks.h gt-tree.h $(TREE_INLINE_H) tree-iterator.h \\\n-   $(BASIC_BLOCK_H) $(TREE_FLOW_H) $(OBSTACK_H) pointer-set.h \\\n+   $(BASIC_BLOCK_H) $(TREE_SSA_H) $(OBSTACK_H) pointer-set.h \\\n    $(TREE_PASS_H) $(LANGHOOKS_DEF_H) $(DIAGNOSTIC_H) $(CGRAPH_H) \\\n    $(EXCEPT_H) debug.h intl.h tree-diagnostic.h $(TREE_PRETTY_PRINT_H) \\\n    $(COMMON_TARGET_H)\n@@ -2249,26 +2250,26 @@ tree-inline.o : tree-inline.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(RTL_H) $(FLAGS_H) $(PARAMS_H) $(INPUT_H) insn-config.h \\\n    $(HASHTAB_H) langhooks.h $(TREE_INLINE_H) $(CGRAPH_H) \\\n    intl.h $(FUNCTION_H) $(GIMPLE_H) $(CFGLOOP_H) \\\n-   debug.h $(DIAGNOSTIC_H) $(EXCEPT_H) $(TREE_FLOW_H) tree-iterator.h tree-mudflap.h \\\n+   debug.h $(DIAGNOSTIC_H) $(EXCEPT_H) $(TREE_SSA_H) tree-iterator.h tree-mudflap.h \\\n    $(IPA_PROP_H) value-prof.h $(TREE_PASS_H) $(TARGET_H) \\\n    $(TREE_PRETTY_PRINT_H)\n print-tree.o : print-tree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) \\\n    $(TM_H) $(TREE_H) $(GGC_H) langhooks.h tree-iterator.h \\\n-   $(DIAGNOSTIC_H) $(TREE_FLOW_H) $(GIMPLE_PRETTY_PRINT_H) $(TREE_DUMP_H)\n+   $(DIAGNOSTIC_H) $(TREE_SSA_H) $(GIMPLE_PRETTY_PRINT_H) $(TREE_DUMP_H)\n stor-layout.o : stor-layout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(PARAMS_H) $(FLAGS_H) $(FUNCTION_H) $(EXPR_H) $(RTL_H) \\\n    $(GGC_H) $(TM_P_H) $(TARGET_H) langhooks.h $(REGS_H) gt-stor-layout.h \\\n    $(DIAGNOSTIC_CORE_H) $(CGRAPH_H) $(TREE_INLINE_H) $(TREE_DUMP_H) $(GIMPLE_H)\n asan.o : asan.c asan.h $(CONFIG_H) $(SYSTEM_H) $(GIMPLE_H) \\\n    output.h coretypes.h $(GIMPLE_PRETTY_PRINT_H) $(CFGLOOP_H) \\\n-   tree-iterator.h $(TREE_FLOW_H) $(TREE_PASS_H) \\\n+   tree-iterator.h $(TREE_SSA_H) $(TREE_PASS_H) \\\n    $(TARGET_H) $(EXPR_H) $(OPTABS_H) $(TM_P_H) langhooks.h \\\n    $(HASH_TABLE_H) alloc-pool.h\n tsan.o : $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(TREE_INLINE_H) \\\n    $(GIMPLE_H) $(DIAGNOSTIC_H) langhooks.h \\\n    $(TM_H) coretypes.h $(TREE_DUMP_H) $(TREE_PASS_H) $(CGRAPH_H) $(GGC_H) \\\n    $(BASIC_BLOCK_H) $(FLAGS_H) $(FUNCTION_H) \\\n-   $(TM_P_H) $(TREE_FLOW_H) $(DIAGNOSTIC_CORE_H) $(GIMPLE_H) tree-iterator.h \\\n+   $(TM_P_H) $(TREE_SSA_H) $(DIAGNOSTIC_CORE_H) $(GIMPLE_H) tree-iterator.h \\\n    intl.h cfghooks.h output.h options.h $(C_COMMON_H) tsan.h asan.h \\\n    tree-ssa-propagate.h\n ubsan.o : ubsan.c ubsan.h $(CONFIG_H) $(SYSTEM_H) $(GIMPLE_H) \\\n@@ -2277,130 +2278,130 @@ ubsan.o : ubsan.c ubsan.h $(CONFIG_H) $(SYSTEM_H) $(GIMPLE_H) \\\n tree-ssa-tail-merge.o: tree-ssa-tail-merge.c \\\n    $(SYSTEM_H) $(CONFIG_H) coretypes.h $(TM_H) $(BITMAP_H) \\\n    $(FLAGS_H) $(TM_P_H) $(BASIC_BLOCK_H) $(CFGLOOP_H) \\\n-   $(TREE_H) $(TREE_FLOW_H) $(TREE_INLINE_H) $(TREE_DUMP_H) $(HASH_TABLE_H) \\\n+   $(TREE_H) $(TREE_SSA_H) $(TREE_INLINE_H) $(TREE_DUMP_H) $(HASH_TABLE_H) \\\n    $(GIMPLE_H) $(FUNCTION_H) tree-ssa-sccvn.h \\\n    $(CGRAPH_H) $(GIMPLE_PRETTY_PRINT_H) $(PARAMS_H)\n tree-ssa-structalias.o: tree-ssa-structalias.c $(SYSTEM_H) $(CONFIG_H) \\\n    coretypes.h $(HASH_TABLE_H) $(TM_H) $(GGC_H) $(OBSTACK_H) $(BITMAP_H) \\\n    $(FLAGS_H) $(TM_P_H) $(BASIC_BLOCK_H) \\\n-   $(DIAGNOSTIC_H) $(TREE_H) $(TREE_FLOW_H) $(TREE_INLINE_H) \\\n+   $(DIAGNOSTIC_H) $(TREE_H) $(TREE_SSA_H) $(TREE_INLINE_H) \\\n    $(GIMPLE_H) $(HASH_TABLE_H) $(FUNCTION_H) $(CGRAPH_H) \\\n    $(TREE_PASS_H) alloc-pool.h $(SPLAY_TREE_H) $(PARAMS_H) \\\n    $(CGRAPH_H) $(ALIAS_H) pointer-set.h\n-tree-ssa-uninit.o : tree-ssa-uninit.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n+tree-ssa-uninit.o : tree-ssa-uninit.c $(TREE_SSA_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(TM_P_H) $(DIAGNOSTIC_H) \\\n    $(FUNCTION_H) $(TM_H) coretypes.h \\\n    $(TREE_PASS_H) $(BASIC_BLOCK_H) $(BITMAP_H) \\\n    $(FLAGS_H) $(HASHTAB_H) pointer-set.h \\\n    $(GIMPLE_H) $(TREE_INLINE_H) $(GIMPLE_PRETTY_PRINT_H)\n-tree-ssa.o : tree-ssa.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n+tree-ssa.o : tree-ssa.c $(TREE_SSA_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(HASH_TABLE_H) $(TREE_H) $(TM_P_H) $(EXPR_H) $(DIAGNOSTIC_H) \\\n    toplev.h $(FUNCTION_H) $(TM_H) coretypes.h \\\n    langhooks.h $(TREE_PASS_H) $(BASIC_BLOCK_H) $(BITMAP_H) \\\n    $(FLAGS_H) $(GGC_H) $(HASHTAB_H) pointer-set.h \\\n    $(GIMPLE_H) $(TREE_INLINE_H) $(TARGET_H) \\\n    $(GIMPLE_PRETTY_PRINT_H) $(CFGLOOP_H)\n-tree-into-ssa.o : tree-into-ssa.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n+tree-into-ssa.o : tree-into-ssa.c $(TREE_SSA_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(TM_P_H) $(DIAGNOSTIC_CORE_H) \\\n    $(FUNCTION_H) $(TM_H) coretypes.h \\\n    langhooks.h domwalk.h $(TREE_PASS_H) $(PARAMS_H) $(BASIC_BLOCK_H) \\\n    $(BITMAP_H) $(CFGLOOP_H) $(FLAGS_H) $(HASH_TABLE_H) \\\n    $(GIMPLE_H) $(TREE_INLINE_H) $(GIMPLE_PRETTY_PRINT_H)\n-tree-ssa-ter.o : tree-ssa-ter.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n+tree-ssa-ter.o : tree-ssa-ter.c $(TREE_SSA_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(DIAGNOSTIC_H) $(TM_H) coretypes.h $(DUMPFILE_H) \\\n    $(TREE_SSA_LIVE_H) $(BITMAP_H) $(FLAGS_H) \\\n    $(GIMPLE_PRETTY_PRINT_H)\n-tree-ssa-coalesce.o : tree-ssa-coalesce.c $(TREE_FLOW_H) $(CONFIG_H) \\\n+tree-ssa-coalesce.o : tree-ssa-coalesce.c $(TREE_SSA_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(DIAGNOSTIC_H) $(TM_H) coretypes.h $(DUMPFILE_H) \\\n    $(TREE_SSA_LIVE_H) $(BITMAP_H) $(FLAGS_H) $(HASH_TABLE_H) \\\n    $(TREE_PRETTY_PRINT_H)\n-tree-outof-ssa.o : tree-outof-ssa.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n+tree-outof-ssa.o : tree-outof-ssa.c $(TREE_SSA_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(DIAGNOSTIC_H) $(TM_H) coretypes.h $(DUMPFILE_H) \\\n    $(TREE_SSA_LIVE_H) $(BASIC_BLOCK_H) $(BITMAP_H) $(GGC_H) \\\n    $(EXPR_H) $(SSAEXPAND_H) $(GIMPLE_PRETTY_PRINT_H)\n tree-ssa-dse.o : tree-ssa-dse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(GGC_H) $(TREE_H) $(TM_P_H) $(BASIC_BLOCK_H) \\\n-   $(TREE_FLOW_H) $(TREE_PASS_H) domwalk.h $(FLAGS_H) \\\n+   $(TREE_SSA_H) $(TREE_PASS_H) domwalk.h $(FLAGS_H) \\\n    $(GIMPLE_PRETTY_PRINT_H) langhooks.h\n tree-ssa-forwprop.o : tree-ssa-forwprop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) $(TM_P_H) $(BASIC_BLOCK_H) $(CFGLOOP_H) \\\n-   $(TREE_FLOW_H) $(TREE_PASS_H) $(DIAGNOSTIC_H) \\\n+   $(TREE_SSA_H) $(TREE_PASS_H) $(DIAGNOSTIC_H) \\\n    langhooks.h $(FLAGS_H) $(GIMPLE_H) $(GIMPLE_PRETTY_PRINT_H) $(EXPR_H) \\\n    $(OPTABS_H) tree-ssa-propagate.h\n tree-ssa-phiprop.o : tree-ssa-phiprop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) $(TM_P_H) $(BASIC_BLOCK_H) \\\n-   $(TREE_FLOW_H) $(TREE_PASS_H) $(DIAGNOSTIC_H) \\\n+   $(TREE_SSA_H) $(TREE_PASS_H) $(DIAGNOSTIC_H) \\\n    langhooks.h $(FLAGS_H) $(GIMPLE_PRETTY_PRINT_H)\n tree-ssa-ifcombine.o : tree-ssa-ifcombine.c $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TM_H) $(TREE_H) $(BASIC_BLOCK_H) \\\n-   $(TREE_FLOW_H) $(TREE_PASS_H) $(DIAGNOSTIC_H) \\\n+   $(TREE_SSA_H) $(TREE_PASS_H) $(DIAGNOSTIC_H) \\\n    $(TREE_PRETTY_PRINT_H)\n tree-ssa-phiopt.o : tree-ssa-phiopt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(HASH_TABLE_H) $(TM_H) $(GGC_H) $(TREE_H) $(TM_P_H) $(BASIC_BLOCK_H) \\\n-   $(TREE_FLOW_H) $(TREE_PASS_H) langhooks.h $(FLAGS_H) \\\n+   $(TREE_SSA_H) $(TREE_PASS_H) langhooks.h $(FLAGS_H) \\\n    $(DIAGNOSTIC_H) pointer-set.h domwalk.h $(CFGLOOP_H) \\\n    $(TREE_DATA_REF_H) $(TREE_PRETTY_PRINT_H) $(GIMPLE_PRETTY_PRINT_H) \\\n    insn-config.h $(EXPR_H) $(OPTABS_H) $(SCEV_H)\n tree-nrv.o : tree-nrv.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) $(FUNCTION_H) $(BASIC_BLOCK_H) $(FLAGS_H) \\\n-   $(DIAGNOSTIC_H) $(TREE_FLOW_H) $(TREE_PASS_H) \\\n+   $(DIAGNOSTIC_H) $(TREE_SSA_H) $(TREE_PASS_H) \\\n    langhooks.h $(TREE_PRETTY_PRINT_H)\n-tree-ssa-copy.o : tree-ssa-copy.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n+tree-ssa-copy.o : tree-ssa-copy.c $(TREE_SSA_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(TM_P_H) $(GGC_H) $(DIAGNOSTIC_H) \\\n    $(FUNCTION_H) $(TM_H) coretypes.h $(SCEV_H) \\\n    $(BASIC_BLOCK_H) $(TREE_PASS_H) langhooks.h tree-ssa-propagate.h \\\n    $(FLAGS_H) $(CFGLOOP_H) $(GIMPLE_PRETTY_PRINT_H)\n-tree-ssa-propagate.o : tree-ssa-propagate.c $(TREE_FLOW_H) $(CONFIG_H) \\\n+tree-ssa-propagate.o : tree-ssa-propagate.c $(TREE_SSA_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(TM_P_H) \\\n    $(DIAGNOSTIC_H) $(FUNCTION_H) $(TM_H) coretypes.h $(DUMPFILE_H) \\\n    $(BASIC_BLOCK_H) langhooks.h \\\n    tree-ssa-propagate.h $(VEC_H) value-prof.h gt-tree-ssa-propagate.h $(FLAGS_H) \\\n    $(GIMPLE_H) $(GIMPLE_PRETTY_PRINT_H)\n-tree-ssa-dom.o : tree-ssa-dom.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n+tree-ssa-dom.o : tree-ssa-dom.c $(TREE_SSA_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(HASH_TABLE_H) $(TREE_H) $(TM_P_H) $(DIAGNOSTIC_H) \\\n    $(FUNCTION_H) $(TM_H) coretypes.h \\\n    $(BASIC_BLOCK_H) domwalk.h $(TREE_PASS_H) $(FLAGS_H) langhooks.h \\\n    tree-ssa-propagate.h $(CFGLOOP_H) $(PARAMS_H) \\\n    $(GIMPLE_PRETTY_PRINT_H)\n-tree-ssa-uncprop.o : tree-ssa-uncprop.c $(TREE_FLOW_H) $(CONFIG_H) \\\n+tree-ssa-uncprop.o : tree-ssa-uncprop.c $(TREE_SSA_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(HASH_TABLE_H) $(TREE_H) $(TM_P_H) \\\n    $(DIAGNOSTIC_H) $(FUNCTION_H) $(TM_H) coretypes.h \\\n    $(BASIC_BLOCK_H) domwalk.h $(TREE_PASS_H) $(FLAGS_H) \\\n    tree-ssa-propagate.h\n-tree-ssa-threadedge.o : tree-ssa-threadedge.c $(TREE_FLOW_H) $(CONFIG_H) \\\n+tree-ssa-threadedge.o : tree-ssa-threadedge.c $(TREE_SSA_H) $(CONFIG_H) \\\n    $(SYSTEM_H) coretypes.h $(DUMPFILE_H) $(TM_H) $(TREE_H) $(FLAGS_H) \\\n    $(TM_P_H) $(BASIC_BLOCK_H) $(CFGLOOP_H) \\\n-   $(FUNCTION_H) $(DIAGNOSTIC_H) $(TIMEVAR_H) $(TREE_FLOW_H) \\\n+   $(FUNCTION_H) $(DIAGNOSTIC_H) $(TIMEVAR_H) $(TREE_SSA_H) \\\n    tree-ssa-propagate.h langhooks.h \\\n    $(PARAMS_H)\n-tree-ssa-threadupdate.o : tree-ssa-threadupdate.c $(TREE_FLOW_H) $(CONFIG_H) \\\n+tree-ssa-threadupdate.o : tree-ssa-threadupdate.c $(TREE_SSA_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(TM_P_H) $(HASH_TABLE_H) \\\n    $(DIAGNOSTIC_H) $(FUNCTION_H) $(TM_H) coretypes.h $(DUMPFILE_H) \\\n    $(BASIC_BLOCK_H) $(FLAGS_H) $(CFGLOOP_H)\n tree-ssanames.o : tree-ssanames.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   $(TM_H) $(TREE_H) $(TREE_FLOW_H) $(TREE_PASS_H)\n+   $(TM_H) $(TREE_H) $(TREE_SSA_H) $(TREE_PASS_H)\n tree-phinodes.o : tree-phinodes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   $(TM_H) $(TREE_H) $(GGC_H) $(BASIC_BLOCK_H) $(TREE_FLOW_H) \\\n+   $(TM_H) $(TREE_H) $(GGC_H) $(BASIC_BLOCK_H) $(TREE_SSA_H) \\\n    gt-tree-phinodes.h $(DIAGNOSTIC_CORE_H) $(GIMPLE_H)\n domwalk.o : domwalk.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(BASIC_BLOCK_H) domwalk.h sbitmap.h\n-tree-ssa-live.o : tree-ssa-live.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n+tree-ssa-live.o : tree-ssa-live.c $(TREE_SSA_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(DIAGNOSTIC_H) $(TM_H) coretypes.h $(DUMPFILE_H) $(TIMEVAR_H) \\\n    $(TREE_SSA_LIVE_H) $(BITMAP_H) debug.h $(FLAGS_H) $(HASH_TABLE_H) \\\n    $(GIMPLE_PRETTY_PRINT_H) $(GIMPLE_H)\n-tree-ssa-copyrename.o : tree-ssa-copyrename.c $(TREE_FLOW_H) $(CONFIG_H) \\\n+tree-ssa-copyrename.o : tree-ssa-copyrename.c $(TREE_SSA_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(DIAGNOSTIC_H) $(FUNCTION_H) \\\n    $(TREE_PASS_H) $(TM_H) coretypes.h $(TREE_SSA_LIVE_H) \\\n    $(BASIC_BLOCK_H) $(BITMAP_H) $(FLAGS_H) $(HASHTAB_H) langhooks.h \\\n    $(GIMPLE_H) $(TREE_INLINE_H) $(GIMPLE_H)\n-tree-ssa-pre.o : tree-ssa-pre.c $(TREE_FLOW_H) $(CONFIG_H) \\\n+tree-ssa-pre.o : tree-ssa-pre.c $(TREE_SSA_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(DIAGNOSTIC_H) \\\n    $(TM_H) coretypes.h $(TREE_PASS_H) $(FLAGS_H) langhooks.h \\\n    $(CFGLOOP_H) alloc-pool.h $(BASIC_BLOCK_H) $(BITMAP_H) $(HASH_TABLE_H) \\\n    $(GIMPLE_H) $(TREE_INLINE_H) tree-iterator.h tree-ssa-sccvn.h $(PARAMS_H) \\\n    $(DBGCNT_H) tree-scalar-evolution.h $(GIMPLE_PRETTY_PRINT_H) domwalk.h \\\n    $(IPA_PROP_H)\n-tree-ssa-sccvn.o : tree-ssa-sccvn.c $(TREE_FLOW_H) $(CONFIG_H) \\\n+tree-ssa-sccvn.o : tree-ssa-sccvn.c $(TREE_SSA_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(DIAGNOSTIC_H) \\\n    $(TM_H) coretypes.h $(DUMPFILE_H) $(FLAGS_H) $(CFGLOOP_H) \\\n    alloc-pool.h $(BASIC_BLOCK_H) $(BITMAP_H) $(HASH_TABLE_H) $(GIMPLE_H) \\\n@@ -2409,31 +2410,31 @@ tree-ssa-sccvn.o : tree-ssa-sccvn.c $(TREE_FLOW_H) $(CONFIG_H) \\\n gimple-ssa-strength-reduction.o : gimple-ssa-strength-reduction.c $(CONFIG_H) \\\n    $(SYSTEM_H) coretypes.h $(TREE_H) $(GIMPLE_H) $(BASIC_BLOCK_H) \\\n    $(HASH_TABLE_H) $(TREE_PASS_H) $(CFGLOOP_H) $(TREE_PRETTY_PRINT_H) \\\n-   $(GIMPLE_PRETTY_PRINT_H) alloc-pool.h $(TREE_FLOW_H) domwalk.h \\\n+   $(GIMPLE_PRETTY_PRINT_H) alloc-pool.h $(TREE_SSA_H) domwalk.h \\\n    pointer-set.h expmed.h\n tree-vrp.o : tree-vrp.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-   $(TREE_FLOW_H) $(TREE_PASS_H) $(DIAGNOSTIC_CORE_H) $(GGC_H) \\\n+   $(TREE_SSA_H) $(TREE_PASS_H) $(DIAGNOSTIC_CORE_H) $(GGC_H) \\\n    $(BASIC_BLOCK_H) tree-ssa-propagate.h $(FLAGS_H) $(TREE_DUMP_H) \\\n    $(CFGLOOP_H) $(SCEV_H) intl.h \\\n    $(GIMPLE_PRETTY_PRINT_H) gimple-fold.h $(OPTABS_H) $(EXPR_H)\n-tree-cfg.o : tree-cfg.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) $(HASH_TABLE_H) \\\n+tree-cfg.o : tree-cfg.c $(TREE_SSA_H) $(CONFIG_H) $(SYSTEM_H) $(HASH_TABLE_H) \\\n    $(TREE_H) $(TM_P_H) $(GGC_H) $(FLAGS_H) $(TARGET_H) \\\n    $(DIAGNOSTIC_CORE_H) $(FUNCTION_H) $(TM_H) coretypes.h \\\n    $(TREE_DUMP_H) $(EXCEPT_H) $(CFGLOOP_H) $(TREE_PASS_H) \\\n    $(BASIC_BLOCK_H) \\\n    value-prof.h tree-ssa-propagate.h $(TREE_INLINE_H) $(GIMPLE_PRETTY_PRINT_H)\n-tree-cfgcleanup.o : tree-cfgcleanup.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n+tree-cfgcleanup.o : tree-cfgcleanup.c $(TREE_SSA_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(TM_P_H) $(GGC_H) $(FLAGS_H) \\\n    $(DIAGNOSTIC_CORE_H) $(FUNCTION_H) $(TM_H) coretypes.h \\\n    $(EXCEPT_H) langhooks.h $(CFGLOOP_H) $(TREE_PASS_H) \\\n    $(BASIC_BLOCK_H) $(HASHTAB_H)  \\\n    tree-ssa-propagate.h $(SCEV_H)\n-tree-tailcall.o : tree-tailcall.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n+tree-tailcall.o : tree-tailcall.c $(TREE_SSA_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(TM_P_H) $(FUNCTION_H) $(TM_H) coretypes.h \\\n    $(EXCEPT_H) $(TREE_PASS_H) $(FLAGS_H) langhooks.h \\\n    $(BASIC_BLOCK_H) $(DBGCNT_H) $(GIMPLE_PRETTY_PRINT_H) $(TARGET_H) \\\n    $(COMMON_TARGET_H) $(CFGLOOP_H) ipa-utils.h\n-tree-ssa-sink.o : tree-ssa-sink.c $(TREE_FLOW_H) $(CONFIG_H) \\\n+tree-ssa-sink.o : tree-ssa-sink.c $(TREE_SSA_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(DIAGNOSTIC_H) \\\n    $(TM_H) coretypes.h $(TREE_PASS_H) $(FLAGS_H) alloc-pool.h \\\n    $(BASIC_BLOCK_H) $(BITMAP_H) $(CFGLOOP_H) $(HASHTAB_H) \\\n@@ -2442,69 +2443,69 @@ tree-ssa-sink.o : tree-ssa-sink.c $(TREE_FLOW_H) $(CONFIG_H) \\\n tree-nested.o: tree-nested.c $(CONFIG_H) $(SYSTEM_H) $(TM_H) $(TREE_H) \\\n    $(TM_P_H) $(FUNCTION_H) $(TREE_DUMP_H) $(TREE_INLINE_H) \\\n    tree-iterator.h $(GIMPLE_H) $(CGRAPH_H) $(EXPR_H) langhooks.h \\\n-   gt-tree-nested.h coretypes.h $(TREE_FLOW_H) pointer-set.h\n+   gt-tree-nested.h coretypes.h $(TREE_SSA_H) pointer-set.h\n tree-if-conv.o: tree-if-conv.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(TREE_H) $(FLAGS_H) $(BASIC_BLOCK_H) $(TREE_FLOW_H) \\\n+   $(TREE_H) $(FLAGS_H) $(BASIC_BLOCK_H) $(TREE_SSA_H) \\\n    $(CFGLOOP_H) $(TREE_DATA_REF_H) $(TREE_PASS_H) $(DIAGNOSTIC_H) \\\n    $(DBGCNT_H) $(GIMPLE_PRETTY_PRINT_H)\n tree-iterator.o : tree-iterator.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n    coretypes.h $(GGC_H) tree-iterator.h $(GIMPLE_H) gt-tree-iterator.h\n-tree-dfa.o : tree-dfa.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n+tree-dfa.o : tree-dfa.c $(TREE_SSA_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(TM_P_H) $(GGC_H) $(DIAGNOSTIC_H) \\\n    $(TREE_INLINE_H) $(HASHTAB_H) pointer-set.h $(FLAGS_H) $(FUNCTION_H) \\\n    convert.h $(TM_H) coretypes.h langhooks.h \\\n    $(TREE_PASS_H) $(PARAMS_H) $(CGRAPH_H) $(BASIC_BLOCK_H) $(GIMPLE_H) \\\n    $(TREE_PRETTY_PRINT_H)\n-tree-ssa-operands.o : tree-ssa-operands.c $(TREE_FLOW_H) $(CONFIG_H) \\\n+tree-ssa-operands.o : tree-ssa-operands.c $(TREE_SSA_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(GGC_H) $(DIAGNOSTIC_H) $(TREE_INLINE_H) \\\n    $(FLAGS_H) $(FUNCTION_H) $(TM_H) $(TIMEVAR_H) coretypes.h $(DUMPFILE_H) \\\n    langhooks.h $(IPA_REFERENCE_H) $(GIMPLE_PRETTY_PRINT_H)\n-tree-eh.o : tree-eh.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n+tree-eh.o : tree-eh.c $(TREE_SSA_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(TM_H) $(FLAGS_H) $(FUNCTION_H) $(EXCEPT_H) langhooks.h \\\n    $(HASH_TABLE_H) $(GGC_H) $(TREE_PASS_H) coretypes.h pointer-set.h \\\n    $(TREE_INLINE_H) tree-iterator.h toplev.h \\\n    $(DIAGNOSTIC_CORE_H) $(TARGET_H) $(CFGLOOP_H)\n tree-ssa-loop.o : tree-ssa-loop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(TM_P_H) $(BASIC_BLOCK_H) \\\n-   $(DIAGNOSTIC_H) $(TREE_FLOW_H) $(TREE_PASS_H) \\\n+   $(DIAGNOSTIC_H) $(TREE_SSA_H) $(TREE_PASS_H) \\\n    $(CFGLOOP_H) $(FLAGS_H) $(TREE_INLINE_H) $(SCEV_H) $(DIAGNOSTIC_CORE_H) $(TREE_VECTORIZER_H)\n-tree-ssa-loop-unswitch.o : tree-ssa-loop-unswitch.c $(TREE_FLOW_H) \\\n+tree-ssa-loop-unswitch.o : tree-ssa-loop-unswitch.c $(TREE_SSA_H) \\\n    $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(TM_P_H) $(CFGLOOP_H) \\\n    $(PARAMS_H) $(DIAGNOSTIC_H) $(TM_H) \\\n    coretypes.h $(TREE_PASS_H) $(BASIC_BLOCK_H) \\\n     $(TREE_INLINE_H)\n-tree-ssa-address.o : tree-ssa-address.c $(TREE_FLOW_H) $(CONFIG_H) \\\n+tree-ssa-address.o : tree-ssa-address.c $(TREE_SSA_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) \\\n    $(DIAGNOSTIC_H) $(TM_H) coretypes.h $(DUMPFILE_H) \\\n    $(FLAGS_H) $(TREE_INLINE_H) $(RECOG_H) insn-config.h \\\n    $(EXPR_H) gt-tree-ssa-address.h $(GGC_H) tree-affine.h $(TARGET_H) \\\n    $(TREE_PRETTY_PRINT_H) expmed.h\n-tree-ssa-loop-niter.o : tree-ssa-loop-niter.c $(TREE_FLOW_H) $(CONFIG_H) \\\n+tree-ssa-loop-niter.o : tree-ssa-loop-niter.c $(TREE_SSA_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(TM_P_H) $(CFGLOOP_H) $(PARAMS_H) \\\n    $(TREE_INLINE_H) $(DIAGNOSTIC_H) $(TM_H) coretypes.h $(DUMPFILE_H) \\\n    $(DIAGNOSTIC_CORE_H) $(FLAGS_H) $(TREE_DATA_REF_H) \\\n    $(BASIC_BLOCK_H) $(GGC_H) intl.h $(GIMPLE_PRETTY_PRINT_H) $(TREE_PASS_H)\n-tree-ssa-loop-ivcanon.o : tree-ssa-loop-ivcanon.c $(TREE_FLOW_H) $(CONFIG_H) \\\n+tree-ssa-loop-ivcanon.o : tree-ssa-loop-ivcanon.c $(TREE_SSA_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(TM_P_H) $(CFGLOOP_H) $(PARAMS_H) \\\n    $(TREE_INLINE_H) $(DIAGNOSTIC_H) $(TM_H) coretypes.h \\\n    $(FLAGS_H) $(TREE_PASS_H) $(SCEV_H) $(BASIC_BLOCK_H) $(TARGET_H) \\\n    $(GIMPLE_PRETTY_PRINT_H)\n-tree-ssa-loop-ch.o : tree-ssa-loop-ch.c $(TREE_FLOW_H) $(CONFIG_H) \\\n+tree-ssa-loop-ch.o : tree-ssa-loop-ch.c $(TREE_SSA_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(CFGLOOP_H) $(TREE_INLINE_H) \\\n    $(DIAGNOSTIC_H) $(TM_H) coretypes.h \\\n    $(TREE_PASS_H) $(FLAGS_H) $(BASIC_BLOCK_H)\n-tree-ssa-loop-prefetch.o: tree-ssa-loop-prefetch.c $(TREE_FLOW_H) $(CONFIG_H) \\\n+tree-ssa-loop-prefetch.o: tree-ssa-loop-prefetch.c $(TREE_SSA_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(TM_P_H) $(CFGLOOP_H) $(EXPR_H) \\\n    $(DIAGNOSTIC_H) $(TM_H) coretypes.h \\\n    $(TREE_PASS_H) $(RECOG_H) insn-config.h $(HASHTAB_H) \\\n    $(CFGLOOP_H) $(PARAMS_H) langhooks.h $(BASIC_BLOCK_H) \\\n    $(DIAGNOSTIC_CORE_H) langhooks.h $(TREE_INLINE_H) $(TREE_DATA_REF_H) \\\n    $(OPTABS_H) $(TREE_PRETTY_PRINT_H)\n tree-predcom.o: tree-predcom.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(TM_P_H) \\\n-   $(CFGLOOP_H) $(TREE_FLOW_H) $(GGC_H) $(TREE_DATA_REF_H) \\\n+   $(CFGLOOP_H) $(TREE_SSA_H) $(GGC_H) $(TREE_DATA_REF_H) \\\n    $(PARAMS_H) $(DIAGNOSTIC_H) $(TREE_PASS_H) $(TM_H) coretypes.h \\\n    tree-affine.h $(TREE_INLINE_H) $(TREE_PRETTY_PRINT_H)\n-tree-ssa-loop-ivopts.o : tree-ssa-loop-ivopts.c $(TREE_FLOW_H) $(CONFIG_H) \\\n+tree-ssa-loop-ivopts.o : tree-ssa-loop-ivopts.c $(TREE_SSA_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(TM_P_H) $(CFGLOOP_H) $(EXPR_H) \\\n    $(DIAGNOSTIC_H) $(TM_H) coretypes.h \\\n    $(TREE_PASS_H) $(GGC_H) $(RECOG_H) insn-config.h $(HASH_TABLE_H) $(SCEV_H) \\\n@@ -2515,35 +2516,35 @@ tree-affine.o : tree-affine.c tree-affine.h $(CONFIG_H) pointer-set.h \\\n    $(SYSTEM_H) $(TREE_H) $(GIMPLE_H) \\\n    coretypes.h $(DUMPFILE_H) $(FLAGS_H) \\\n    $(TREE_PRETTY_PRINT_H)\n-tree-ssa-loop-manip.o : tree-ssa-loop-manip.c $(TREE_FLOW_H) $(CONFIG_H) \\\n+tree-ssa-loop-manip.o : tree-ssa-loop-manip.c $(TREE_SSA_H) $(CONFIG_H) \\\n    $(SYSTEM_H) coretypes.h $(DUMPFILE_H) $(TM_H) $(TREE_H) \\\n-   $(BASIC_BLOCK_H) $(DIAGNOSTIC_H) $(TREE_FLOW_H) \\\n+   $(BASIC_BLOCK_H) $(DIAGNOSTIC_H) $(TREE_SSA_H) \\\n    $(CFGLOOP_H) $(TREE_PASS_H) \\\n    $(SCEV_H) $(PARAMS_H) $(TREE_INLINE_H) langhooks.h\n-tree-ssa-loop-im.o : tree-ssa-loop-im.c $(TREE_FLOW_H) $(CONFIG_H) \\\n+tree-ssa-loop-im.o : tree-ssa-loop-im.c $(TREE_SSA_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(HASH_TABLE_H) $(TREE_H) $(TM_P_H) $(CFGLOOP_H) domwalk.h \\\n    $(PARAMS_H) $(DIAGNOSTIC_H) $(TM_H) coretypes.h \\\n    $(TREE_PASS_H) $(FLAGS_H) $(BASIC_BLOCK_H) \\\n    pointer-set.h tree-affine.h tree-ssa-propagate.h $(GIMPLE_PRETTY_PRINT_H)\n tree-ssa-math-opts.o : tree-ssa-math-opts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   $(TM_H) $(FLAGS_H) $(TREE_H) $(TREE_FLOW_H) \\\n+   $(TM_H) $(FLAGS_H) $(TREE_H) $(TREE_SSA_H) \\\n    $(TREE_PASS_H) alloc-pool.h $(BASIC_BLOCK_H) $(TARGET_H) \\\n    $(DIAGNOSTIC_H) $(RTL_H) $(EXPR_H) $(OPTABS_H) $(GIMPLE_PRETTY_PRINT_H)\n-tree-ssa-alias.o : tree-ssa-alias.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n+tree-ssa-alias.o : tree-ssa-alias.c $(TREE_SSA_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(TM_P_H) $(GGC_H) $(TREE_INLINE_H) $(FLAGS_H) \\\n    $(FUNCTION_H) $(TIMEVAR_H) convert.h $(TM_H) coretypes.h $(DUMPFILE_H) \\\n    langhooks.h \\\n    $(PARAMS_H) $(BASIC_BLOCK_H) $(DIAGNOSTIC_H) \\\n    $(GIMPLE_H) $(VEC_H) $(TARGET_H) \\\n    pointer-set.h alloc-pool.h \\\n    $(TREE_PRETTY_PRINT_H)\n-tree-ssa-reassoc.o : tree-ssa-reassoc.c $(TREE_FLOW_H) $(CONFIG_H) \\\n+tree-ssa-reassoc.o : tree-ssa-reassoc.c $(TREE_SSA_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(HASH_TABLE_H) $(TREE_H) $(DIAGNOSTIC_H) \\\n    $(TM_H) coretypes.h $(TREE_PASS_H) $(FLAGS_H) \\\n    tree-iterator.h $(BASIC_BLOCK_H) $(GIMPLE_H) $(TREE_INLINE_H) \\\n    $(VEC_H) langhooks.h alloc-pool.h pointer-set.h $(CFGLOOP_H) \\\n    $(TARGET_H) $(GIMPLE_PRETTY_PRINT_H) $(DIAGNOSTIC_CORE_H) $(PARAMS_H)\n-tree-optimize.o : tree-optimize.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n+tree-optimize.o : tree-optimize.c $(TREE_SSA_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(TM_P_H) $(GGC_H) \\\n    $(DIAGNOSTIC_H) $(BASIC_BLOCK_H) $(FLAGS_H) $(TM_H) \\\n    coretypes.h toplev.h $(DIAGNOSTIC_CORE_H) $(FUNCTION_H) langhooks.h \\\n@@ -2553,147 +2554,147 @@ tree-optimize.o : tree-optimize.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n \n gimplify.o : gimplify.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(GIMPLE_H) \\\n    $(DIAGNOSTIC_H) $(TREE_INLINE_H) langhooks.h \\\n-   $(LANGHOOKS_DEF_H) $(TREE_FLOW_H) $(CGRAPH_H) $(TIMEVAR_H) $(TM_H) \\\n+   $(LANGHOOKS_DEF_H) $(TREE_SSA_H) $(CGRAPH_H) $(TIMEVAR_H) $(TM_H) \\\n    coretypes.h $(EXCEPT_H) $(FLAGS_H) $(RTL_H) $(FUNCTION_H) $(EXPR_H) \\\n    $(GGC_H) gt-gimplify.h $(HASHTAB_H) $(TARGET_H) $(DIAGNOSTIC_CORE_H) $(OPTABS_H) \\\n    $(SPLAY_TREE_H) $(VEC_H) tree-iterator.h $(TREE_PASS_H) $(TREE_PRETTY_PRINT_H)\n gimple-iterator.o : gimple-iterator.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   $(TREE_H) $(GIMPLE_H) $(TREE_FLOW_H) value-prof.h\n-gimple-fold.o : gimple-fold.c $(TREE_FLOW_H) $(CONFIG_H) coretypes.h \\\n+   $(TREE_H) $(GIMPLE_H) $(TREE_SSA_H) value-prof.h\n+gimple-fold.o : gimple-fold.c $(TREE_SSA_H) $(CONFIG_H) coretypes.h \\\n    $(DUMPFILE_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(GGC_H) \\\n    $(FUNCTION_H) $(TM_H) $(BASIC_BLOCK_H) langhooks.h \\\n    tree-ssa-propagate.h $(FLAGS_H) $(TARGET_H) gimple-fold.h\n gimple-low.o : gimple-low.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n    $(DIAGNOSTIC_CORE_H) $(GIMPLE_H) $(TREE_INLINE_H) langhooks.h \\\n-   $(LANGHOOKS_DEF_H) $(TREE_FLOW_H) $(TM_H) coretypes.h \\\n+   $(LANGHOOKS_DEF_H) $(TREE_SSA_H) $(TM_H) coretypes.h \\\n    $(EXCEPT_H) $(FLAGS_H) $(RTL_H) $(FUNCTION_H) $(TREE_PASS_H) \\\n    $(HASHTAB_H) $(DIAGNOSTIC_CORE_H) tree-iterator.h langhooks.h\n omp-low.o : omp-low.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(RTL_H) $(GIMPLE_H) $(TREE_INLINE_H) langhooks.h $(DIAGNOSTIC_CORE_H) \\\n-   $(TREE_FLOW_H) $(FLAGS_H) $(EXPR_H) $(DIAGNOSTIC_CORE_H) \\\n+   $(TREE_SSA_H) $(FLAGS_H) $(EXPR_H) $(DIAGNOSTIC_CORE_H) \\\n    $(TREE_PASS_H) $(GGC_H) $(EXCEPT_H) $(SPLAY_TREE_H) $(OPTABS_H) \\\n    $(CFGLOOP_H) tree-iterator.h $(TARGET_H) gt-omp-low.h\n tree-browser.o : tree-browser.c tree-browser.def $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(HASH_TABLE_H) $(TREE_H) $(TREE_PRETTY_PRINT_H)\n omega.o : omega.c $(OMEGA_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) \\\n    $(TREE_H) $(DIAGNOSTIC_CORE_H)\n tree-chrec.o : tree-chrec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) \\\n-   $(TREE_PRETTY_PRINT_H) $(CFGLOOP_H) $(TREE_FLOW_H) $(SCEV_H) \\\n+   $(TREE_PRETTY_PRINT_H) $(CFGLOOP_H) $(TREE_SSA_H) $(SCEV_H) \\\n    $(PARAMS_H)\n tree-scalar-evolution.o : tree-scalar-evolution.c $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(DUMPFILE_H) $(HASH_TABLE_H) $(GIMPLE_PRETTY_PRINT_H) \\\n-   $(TREE_FLOW_H) $(CFGLOOP_H) $(SCEV_H) $(PARAMS_H) gt-tree-scalar-evolution.h\n+   $(TREE_SSA_H) $(CFGLOOP_H) $(SCEV_H) $(PARAMS_H) gt-tree-scalar-evolution.h\n tree-data-ref.o : tree-data-ref.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(DUMPFILE_H) \\\n-   $(GIMPLE_PRETTY_PRINT_H) $(TREE_FLOW_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) \\\n+   $(GIMPLE_PRETTY_PRINT_H) $(TREE_SSA_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) \\\n    langhooks.h tree-affine.h $(PARAMS_H)\n sese.o : sese.c sese.h $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_PRETTY_PRINT_H) \\\n-   $(TREE_FLOW_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) $(TREE_PASS_H) value-prof.h\n+   $(TREE_SSA_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) $(TREE_PASS_H) value-prof.h\n graphite.o : graphite.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DIAGNOSTIC_CORE_H) \\\n-   $(TREE_FLOW_H) $(TREE_DUMP_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) sese.h \\\n+   $(TREE_SSA_H) $(TREE_DUMP_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) sese.h \\\n    $(DBGCNT_H) $(GRAPHITE_HTAB_H) graphite-poly.h graphite-scop-detection.h \\\n    graphite-clast-to-gimple.h graphite-sese-to-poly.h\n graphite-blocking.o : graphite-blocking.c $(CONFIG_H) $(SYSTEM_H) \\\n-   coretypes.h $(DUMPFILE_H) $(TREE_FLOW_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) \\\n+   coretypes.h $(DUMPFILE_H) $(TREE_SSA_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) \\\n    sese.h graphite-poly.h\n graphite-clast-to-gimple.o : graphite-clast-to-gimple.c $(CONFIG_H) \\\n-   $(SYSTEM_H) coretypes.h $(DIAGNOSTIC_CORE_H) $(TREE_FLOW_H) $(TREE_PASS_H) \\\n+   $(SYSTEM_H) coretypes.h $(DIAGNOSTIC_CORE_H) $(TREE_SSA_H) $(TREE_PASS_H) \\\n    $(CFGLOOP_H) $(TREE_DATA_REF_H) sese.h $(GRAPHITE_HTAB_H) \\\n    graphite-poly.h graphite-clast-to-gimple.h\n graphite-dependences.o : graphite-dependences.c $(CONFIG_H) $(SYSTEM_H) \\\n-   coretypes.h $(TREE_FLOW_H) $(TREE_PASS_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) \\\n+   coretypes.h $(TREE_SSA_H) $(TREE_PASS_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) \\\n    sese.h $(GRAPHITE_HTAB_H) graphite-poly.h\n graphite-interchange.o : graphite-interchange.c $(CONFIG_H) $(SYSTEM_H) \\\n-   coretypes.h $(DUMPFILE_H) $(TREE_FLOW_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) \\\n+   coretypes.h $(DUMPFILE_H) $(TREE_SSA_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) \\\n    sese.h graphite-poly.h\n graphite-poly.o : graphite-poly.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   $(DUMPFILE_H) $(DIAGNOSTIC_CORE_H) $(TREE_FLOW_H) $(GIMPLE_PRETTY_PRINT_H) \\\n+   $(DUMPFILE_H) $(DIAGNOSTIC_CORE_H) $(TREE_SSA_H) $(GIMPLE_PRETTY_PRINT_H) \\\n    $(CFGLOOP_H) $(TREE_DATA_REF_H) sese.h graphite-poly.h\n graphite-scop-detection.o : graphite-scop-detection.c $(CONFIG_H) $(SYSTEM_H) \\\n-   coretypes.h $(TREE_FLOW_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) $(TREE_PASS_H) \\\n+   coretypes.h $(TREE_SSA_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) $(TREE_PASS_H) \\\n    sese.h graphite-poly.h graphite-scop-detection.h\n graphite-sese-to-poly.o : graphite-sese-to-poly.c $(CONFIG_H) \\\n-   $(SYSTEM_H) coretypes.h $(TREE_FLOW_H) $(TREE_PASS_H) $(CFGLOOP_H) \\\n+   $(SYSTEM_H) coretypes.h $(TREE_SSA_H) $(TREE_PASS_H) $(CFGLOOP_H) \\\n    $(TREE_DATA_REF_H) domwalk.h sese.h graphite-poly.h \\\n    graphite-sese-to-poly.h\n graphite-optimize-isl.o : graphite-optimize-isl.c $(CONFIG_H) $(SYSTEM_H) \\\n-    coretypes.h $(DUMPFILE_H) $(TREE_FLOW_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) \\\n+    coretypes.h $(DUMPFILE_H) $(TREE_SSA_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) \\\n     $(SCEV_H) sese.h graphite-poly.h\n tree-vect-loop.o: tree-vect-loop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   $(TM_H) $(GGC_H) $(TREE_H) $(BASIC_BLOCK_H) $(TREE_FLOW_H) $(DUMPFILE_H) \\\n+   $(TM_H) $(GGC_H) $(TREE_H) $(BASIC_BLOCK_H) $(TREE_SSA_H) $(DUMPFILE_H) \\\n    $(CFGLOOP_H) $(EXPR_H) $(RECOG_H) $(OPTABS_H) \\\n    $(DIAGNOSTIC_CORE_H) $(SCEV_H) $(TREE_VECTORIZER_H) \\\n    $(GIMPLE_PRETTY_PRINT_H) $(TARGET_H) $(TREE_DATA_REF_H)\n tree-vect-loop-manip.o: tree-vect-loop-manip.c $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(DUMPFILE_H) $(TM_H) $(GGC_H) $(TREE_H) $(BASIC_BLOCK_H) \\\n-   $(TREE_FLOW_H) $(CFGLOOP_H) $(DIAGNOSTIC_CORE_H) \\\n+   $(TREE_SSA_H) $(CFGLOOP_H) $(DIAGNOSTIC_CORE_H) \\\n    $(SCEV_H) $(TREE_VECTORIZER_H) langhooks.h $(GIMPLE_PRETTY_PRINT_H)\n tree-vect-patterns.o: tree-vect-patterns.c $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(DUMPFILE_H) \\\n    $(TM_H) $(GGC_H) $(TREE_H) $(TARGET_H) $(BASIC_BLOCK_H) \\\n-   $(TREE_FLOW_H) $(CFGLOOP_H) $(EXPR_H) $(OPTABS_H) $(PARAMS_H) \\\n+   $(TREE_SSA_H) $(CFGLOOP_H) $(EXPR_H) $(OPTABS_H) $(PARAMS_H) \\\n    $(TREE_DATA_REF_H) $(TREE_VECTORIZER_H) $(RECOG_H) $(DIAGNOSTIC_CORE_H) \\\n    $(GIMPLE_PRETTY_PRINT_H)\n tree-vect-slp.o: tree-vect-slp.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(DUMPFILE_H) $(TM_H) $(GGC_H) $(TREE_H) $(TARGET_H) $(BASIC_BLOCK_H) \\\n-   $(DIAGNOSTIC_H) $(TREE_FLOW_H) $(CFGLOOP_H) \\\n+   $(DIAGNOSTIC_H) $(TREE_SSA_H) $(CFGLOOP_H) \\\n    $(EXPR_H) $(RECOG_H) $(OPTABS_H) $(TREE_VECTORIZER_H) \\\n    $(GIMPLE_PRETTY_PRINT_H) $(TREE_DATA_REF_H) langhooks.h\n tree-vect-stmts.o: tree-vect-stmts.c $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(DUMPFILE_H) $(TM_H) $(GGC_H) $(TREE_H) $(TARGET_H) \\\n-   $(BASIC_BLOCK_H) $(TREE_FLOW_H) $(CFGLOOP_H) \\\n+   $(BASIC_BLOCK_H) $(TREE_SSA_H) $(CFGLOOP_H) \\\n    $(EXPR_H) $(RECOG_H) $(OPTABS_H) $(TREE_VECTORIZER_H) \\\n    langhooks.h $(GIMPLE_PRETTY_PRINT_H)\n tree-vect-data-refs.o: tree-vect-data-refs.c $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(DUMPFILE_H) $(TM_H) $(GGC_H) $(TREE_H) $(TARGET_H) \\\n-   $(BASIC_BLOCK_H) $(TREE_FLOW_H) $(CFGLOOP_H) \\\n+   $(BASIC_BLOCK_H) $(TREE_SSA_H) $(CFGLOOP_H) \\\n    $(EXPR_H) $(OPTABS_H) $(SCEV_H) $(TREE_VECTORIZER_H) \\\n    $(DIAGNOSTIC_CORE_H) $(TM_P_H) $(GIMPLE_PRETTY_PRINT_H)\n tree-vectorizer.o: tree-vectorizer.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   $(DUMPFILE_H) $(TM_H) $(GGC_H) $(TREE_H) $(TREE_FLOW_H) \\\n+   $(DUMPFILE_H) $(TM_H) $(GGC_H) $(TREE_H) $(TREE_SSA_H) \\\n    $(CFGLOOP_H) $(TREE_PASS_H) $(TREE_VECTORIZER_H) \\\n    $(TREE_PRETTY_PRINT_H) $(DBGCNT_H)\n vtable-verify.o: vtable-verify.c vtable-verify.h $(CONFIG_H) \\\n    $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) cp/cp-tree.h $(TM_P_H) \\\n-   $(BASIC_BLOCK_H) output.h $(TREE_FLOW_H) $(TREE_DUMP_H) $(TREE_PASS_H) \\\n+   $(BASIC_BLOCK_H) output.h $(TREE_SSA_H) $(TREE_DUMP_H) $(TREE_PASS_H) \\\n    $(TIMEVAR_H) $(CFGLOOP_H) $(FLAGS_H)  $(TREE_INLINE_H) $(SCEV_H) \\\n    $(DIAGNOSTIC_CORE_H) $(GIMPLE_PRETTY_PRINT_H) toplev.h langhooks.h \\\n    gt-vtable-verify.h\n tree-loop-distribution.o: tree-loop-distribution.c $(CONFIG_H) $(SYSTEM_H) \\\n-   coretypes.h $(TREE_FLOW_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) $(TREE_PASS_H)\n+   coretypes.h $(TREE_SSA_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) $(TREE_PASS_H)\n tree-parloops.o: tree-parloops.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   $(TREE_FLOW_H) $(TREE_HASHER_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) \\\n+   $(TREE_SSA_H) $(TREE_HASHER_H) $(CFGLOOP_H) $(TREE_DATA_REF_H) \\\n    $(GIMPLE_PRETTY_PRINT_H) $(HASH_TABLE_H) \\\n    $(TREE_PASS_H) langhooks.h gt-tree-parloops.h $(TREE_VECTORIZER_H)\n tree-stdarg.o: tree-stdarg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(TREE_H) $(FUNCTION_H) $(TREE_FLOW_H) $(TREE_PASS_H) \\\n+   $(TREE_H) $(FUNCTION_H) $(TREE_SSA_H) $(TREE_PASS_H) \\\n    tree-stdarg.h $(TARGET_H) langhooks.h $(GIMPLE_PRETTY_PRINT_H)\n tree-object-size.o: tree-object-size.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   $(TM_H) $(TREE_H) $(DIAGNOSTIC_CORE_H) $(DIAGNOSTIC_H) $(TREE_FLOW_H) \\\n+   $(TM_H) $(TREE_H) $(DIAGNOSTIC_CORE_H) $(DIAGNOSTIC_H) $(TREE_SSA_H) \\\n    $(TREE_PASS_H) tree-ssa-propagate.h $(GIMPLE_PRETTY_PRINT_H)\n internal-fn.o : internal-fn.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(INTERNAL_FN_H) $(TREE_H) $(EXPR_H) $(OPTABS_H) $(GIMPLE_H)\n gimple.o : gimple.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n    $(GGC_H) $(GIMPLE_H) $(DIAGNOSTIC_CORE_H) $(DIAGNOSTIC_H) gt-gimple.h \\\n-   $(TREE_FLOW_H) value-prof.h $(FLAGS_H) $(DEMANGLE_H) \\\n+   $(TREE_SSA_H) value-prof.h $(FLAGS_H) $(DEMANGLE_H) \\\n    $(TARGET_H) $(ALIAS_H)\n gimple-pretty-print.o : gimple-pretty-print.c $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(DUMPFILE_H) \\\n-   $(TREE_H) $(DIAGNOSTIC_H) $(HASHTAB_H) $(TREE_FLOW_H) \\\n+   $(TREE_H) $(DIAGNOSTIC_H) $(HASHTAB_H) $(TREE_SSA_H) \\\n    $(TM_H) $(GIMPLE_H) value-prof.h \\\n    $(TRANS_MEM_H) $(GIMPLE_PRETTY_PRINT_H)\n tree-mudflap.o : tree-mudflap.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n    $(TREE_INLINE_H) $(GIMPLE_H) $(DIAGNOSTIC_H) \\\n    $(DEMANGLE_H) $(HASHTAB_H) langhooks.h tree-mudflap.h \\\n    $(TM_H) coretypes.h $(TREE_PASS_H) $(CGRAPH_H) $(GGC_H) \\\n    gt-tree-mudflap.h $(BASIC_BLOCK_H) $(FLAGS_H) $(FUNCTION_H) \\\n-   $(TM_P_H) $(TREE_FLOW_H) $(DIAGNOSTIC_CORE_H) $(GIMPLE_H) tree-iterator.h\n+   $(TM_P_H) $(TREE_SSA_H) $(DIAGNOSTIC_CORE_H) $(GIMPLE_H) tree-iterator.h\n tree-nomudflap.o : $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(TREE_INLINE_H) \\\n    $(C_TREE_H) $(C_COMMON_H) $(GIMPLE_H) $(DIAGNOSTIC_H) $(HASHTAB_H) \\\n    output.h langhooks.h tree-mudflap.h $(TM_H) coretypes.h \\\n    $(GGC_H) gt-tree-mudflap.h $(TREE_PASS_H) $(DIAGNOSTIC_CORE_H)\n tree-pretty-print.o : tree-pretty-print.c $(CONFIG_H) $(SYSTEM_H) \\\n-   $(TREE_H) $(DIAGNOSTIC_H) $(HASHTAB_H) $(TREE_FLOW_H) \\\n+   $(TREE_H) $(DIAGNOSTIC_H) $(HASHTAB_H) $(TREE_SSA_H) \\\n    $(TM_H) coretypes.h $(DUMPFILE_H) tree-iterator.h $(SCEV_H) langhooks.h \\\n    value-prof.h output.h $(TREE_PRETTY_PRINT_H)\n tree-diagnostic.o : tree-diagnostic.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n@@ -2703,7 +2704,7 @@ tree-diagnostic.o : tree-diagnostic.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n fold-const.o : fold-const.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(FLAGS_H) $(DIAGNOSTIC_CORE_H) $(HASH_TABLE_H) $(EXPR_H) \\\n    $(RTL_H) $(GGC_H) $(TM_P_H) langhooks.h $(MD5_H) intl.h $(TARGET_H) \\\n-   $(GIMPLE_H) realmpfr.h $(TREE_FLOW_H)\n+   $(GIMPLE_H) realmpfr.h $(TREE_SSA_H)\n diagnostic.o : diagnostic.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    version.h $(DEMANGLE_H) $(INPUT_H) intl.h $(BACKTRACE_H) $(DIAGNOSTIC_H) \\\n    diagnostic.def diagnostic-color.h\n@@ -2722,7 +2723,7 @@ targhooks.o : targhooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n    $(EXPR_H) $(TM_H) $(RTL_H) $(TM_P_H) $(FUNCTION_H) output.h $(DIAGNOSTIC_CORE_H) \\\n    $(MACHMODE_H) $(TARGET_DEF_H) $(TARGET_H) $(GGC_H) gt-targhooks.h \\\n    $(OPTABS_H) $(RECOG_H) $(REGS_H) reload.h hard-reg-set.h intl.h $(OPTS_H) \\\n-   tree-ssa-alias.h $(TREE_FLOW_H)\n+   tree-ssa-alias.h $(TREE_SSA_H)\n common/common-targhooks.o : common/common-targhooks.c $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(INPUT_H) $(TM_H) $(COMMON_TARGET_H) common/common-targhooks.h\n \n@@ -2764,7 +2765,7 @@ passes.o : passes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(PARAMS_H) $(TM_P_H) reload.h $(TARGET_H) \\\n    langhooks.h insn-flags.h $(CFGLOOP_H) \\\n    hosthooks.h $(CGRAPH_H) $(COVERAGE_H) $(TREE_PASS_H) $(TREE_DUMP_H) \\\n-   $(GGC_H) $(OPTS_H) $(TREE_FLOW_H) $(TREE_INLINE_H) \\\n+   $(GGC_H) $(OPTS_H) $(TREE_SSA_H) $(TREE_INLINE_H) \\\n    gt-passes.h $(DF_H) $(PREDICT_H) $(LTO_STREAMER_H) \\\n    $(PLUGIN_H) $(IPA_UTILS_H) pass-instances.def \\\n    $(CONTEXT_H) $(PASS_MANAGER_H)\n@@ -2823,14 +2824,14 @@ except.o : except.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    dwarf2asm.h $(DWARF2OUT_H) toplev.h $(DIAGNOSTIC_CORE_H) $(HASH_TABLE_H) \\\n    intl.h $(GGC_H) \\\n    gt-except.h $(CGRAPH_H) $(DIAGNOSTIC_H) $(DWARF2_H) \\\n-   $(TARGET_H) $(TM_P_H) $(TREE_PASS_H) $(TREE_FLOW_H) \\\n+   $(TARGET_H) $(TM_P_H) $(TREE_PASS_H) $(TREE_SSA_H) \\\n    $(TREE_PRETTY_PRINT_H) sbitmap.h $(COMMON_TARGET_H) $(CFGLOOP_H)\n expr.o : expr.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) $(FUNCTION_H) $(REGS_H) $(EXPR_H) $(OPTABS_H) \\\n    $(LIBFUNCS_H) $(INSN_ATTR_H) insn-config.h $(RECOG_H) output.h \\\n    typeclass.h hard-reg-set.h toplev.h $(DIAGNOSTIC_CORE_H) hard-reg-set.h $(EXCEPT_H) \\\n    reload.h langhooks.h intl.h $(TM_P_H) $(TARGET_H) \\\n-   tree-iterator.h gt-expr.h $(MACHMODE_H) $(TIMEVAR_H) $(TREE_FLOW_H) \\\n+   tree-iterator.h gt-expr.h $(MACHMODE_H) $(TIMEVAR_H) $(TREE_SSA_H) \\\n    $(TREE_PASS_H) $(DF_H) $(DIAGNOSTIC_H) $(SSAEXPAND_H) \\\n    $(PARAMS_H) $(COMMON_TARGET_H) target-globals.h\n dojump.o : dojump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TM_P_H) \\\n@@ -2843,12 +2844,12 @@ builtins.o : builtins.c builtins.h $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    hard-reg-set.h $(DIAGNOSTIC_CORE_H) hard-reg-set.h $(EXCEPT_H) \\\n    $(TM_P_H) $(PREDICT_H) $(LIBFUNCS_H) langhooks.h $(BASIC_BLOCK_H) \\\n    tree-mudflap.h realmpfr.h $(BUILTINS_DEF) $(MACHMODE_H) \\\n-   $(DIAGNOSTIC_CORE_H) $(TREE_FLOW_H) value-prof.h ubsan.h\n+   $(DIAGNOSTIC_CORE_H) $(TREE_SSA_H) value-prof.h ubsan.h\n calls.o : calls.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) $(EXPR_H) $(OPTABS_H) langhooks.h $(TARGET_H) \\\n    $(LIBFUNCS_H) $(REGS_H) $(DIAGNOSTIC_CORE_H) output.h \\\n    $(FUNCTION_H) $(TIMEVAR_H) $(TM_P_H) $(CGRAPH_H) $(EXCEPT_H) sbitmap.h \\\n-   $(DBGCNT_H) $(TREE_FLOW_H)\n+   $(DBGCNT_H) $(TREE_SSA_H)\n expmed.o : expmed.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n    $(FLAGS_H) insn-config.h $(EXPR_H) $(OPTABS_H) $(RECOG_H) \\\n    $(DIAGNOSTIC_CORE_H) $(TM_P_H) langhooks.h $(DF_H) $(TARGET_H) \\\n@@ -2877,7 +2878,7 @@ dwarf2out.o : dwarf2out.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) \\\n    toplev.h $(DIAGNOSTIC_CORE_H) $(DWARF2OUT_H) reload.h \\\n    $(GGC_H) $(EXCEPT_H) dwarf2asm.h $(TM_P_H) langhooks.h $(HASH_TABLE_H) \\\n    gt-dwarf2out.h $(TARGET_H) $(CGRAPH_H) $(MD5_H) $(INPUT_H) $(FUNCTION_H) \\\n-   $(GIMPLE_H) ira.h lra.h $(TREE_FLOW_H) \\\n+   $(GIMPLE_H) ira.h lra.h $(TREE_SSA_H) \\\n    $(TREE_PRETTY_PRINT_H) $(COMMON_TARGET_H) $(OPTS_H)\n dwarf2cfi.o : dwarf2cfi.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(HASH_TABLE_H) \\\n    $(TM_H) version.h $(RTL_H) $(EXPR_H) $(REGS_H) $(FUNCTION_H) output.h \\\n@@ -2921,13 +2922,13 @@ cgraph.o : cgraph.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) \\\n    $(TM_H) $(TREE_H) $(TIMEVAR_H) \\\n    langhooks.h toplev.h $(DIAGNOSTIC_CORE_H) $(FLAGS_H) $(GGC_H) $(TARGET_H) $(CGRAPH_H) \\\n    gt-cgraph.h intl.h $(BASIC_BLOCK_H) debug.h $(HASHTAB_H) \\\n-   $(TREE_INLINE_H) $(TREE_FLOW_H) cif-code.def \\\n+   $(TREE_INLINE_H) $(TREE_SSA_H) cif-code.def \\\n    value-prof.h $(EXCEPT_H) $(IPA_UTILS_H) $(DIAGNOSTIC_CORE_H) \\\n    $(IPA_INLINE_H) $(LTO_STREAMER_H) $(CFGLOOP_H) $(GIMPLE_PRETTY_PRINT_H)\n cgraphunit.o : cgraphunit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(TREE_INLINE_H) toplev.h $(DIAGNOSTIC_CORE_H) $(FLAGS_H) $(GGC_H) \\\n    $(TARGET_H) $(CGRAPH_H) intl.h pointer-set.h $(FUNCTION_H) $(GIMPLE_H) \\\n-   $(TREE_FLOW_H) $(TREE_PASS_H) debug.h $(DIAGNOSTIC_H) \\\n+   $(TREE_SSA_H) $(TREE_PASS_H) debug.h $(DIAGNOSTIC_H) \\\n    $(FIBHEAP_H) output.h $(PARAMS_H) $(RTL_H) $(IPA_PROP_H) \\\n    gt-cgraphunit.h tree-iterator.h $(COVERAGE_H) $(TREE_DUMP_H) \\\n    $(GIMPLE_PRETTY_PRINT_H) $(IPA_INLINE_H) $(IPA_UTILS_H) $(CFGLOOP_H) \\\n@@ -2936,19 +2937,19 @@ cgraphunit.o : cgraphunit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n cgraphclones.o : cgraphclones.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(TREE_INLINE_H) toplev.h $(DIAGNOSTIC_CORE_H) $(FLAGS_H) $(GGC_H) \\\n    $(TARGET_H) $(CGRAPH_H) intl.h pointer-set.h $(FUNCTION_H) $(GIMPLE_H) \\\n-   $(TREE_FLOW_H) $(TREE_PASS_H) debug.h $(DIAGNOSTIC_H) $(TREE_DUMP_H) \\\n+   $(TREE_SSA_H) $(TREE_PASS_H) debug.h $(DIAGNOSTIC_H) $(TREE_DUMP_H) \\\n    $(PARAMS_H) $(RTL_H) $(IPA_PROP_H) \\\n    tree-iterator.h $(COVERAGE_H) \\\n    $(GIMPLE_PRETTY_PRINT_H) $(IPA_INLINE_H) $(IPA_UTILS_H) \\\n    $(LTO_STREAMER_H) $(EXCEPT_H) $(GCC_PLUGIN_H) gt-cgraphclones.h\n cgraphbuild.o : cgraphbuild.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(CGRAPH_H) intl.h pointer-set.h $(GIMPLE_H) \\\n-   $(TREE_FLOW_H) $(TREE_PASS_H) $(IPA_UTILS_H) $(EXCEPT_H) \\\n+   $(TREE_SSA_H) $(TREE_PASS_H) $(IPA_UTILS_H) $(EXCEPT_H) \\\n    $(IPA_INLINE_H)\n varpool.o : varpool.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(CGRAPH_H) langhooks.h $(DIAGNOSTIC_CORE_H) $(HASHTAB_H) \\\n    $(GGC_H) $(TIMEVAR_H) debug.h $(TARGET_H) output.h $(GIMPLE_H) \\\n-   $(TREE_FLOW_H) \n+   $(TREE_SSA_H) \n ipa.o : ipa.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(CGRAPH_H) \\\n    $(TREE_PASS_H) $(GIMPLE_H) $(TARGET_H) $(GGC_H) pointer-set.h \\\n    $(IPA_UTILS_H) tree-inline.h profile.h $(PARAMS_H) \n@@ -2963,52 +2964,52 @@ ipa-devirt.o : ipa-devirt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(CGRAPH\n    $(DIAGNOSTIC_H)\n ipa-prop.o : ipa-prop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    langhooks.h $(GGC_H) $(TARGET_H) $(CGRAPH_H) $(IPA_PROP_H) $(DIAGNOSTIC_H) \\\n-   $(TREE_FLOW_H) $(TM_H) $(TREE_PASS_H) $(FLAGS_H) $(TREE_H) \\\n+   $(TREE_SSA_H) $(TM_H) $(TREE_PASS_H) $(FLAGS_H) $(TREE_H) \\\n    $(TREE_INLINE_H) $(GIMPLE_H) \\\n    $(GIMPLE_PRETTY_PRINT_H) $(LTO_STREAMER_H) \\\n    $(DATA_STREAMER_H) $(TREE_STREAMER_H) $(PARAMS_H)\n ipa-ref.o : ipa-ref.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    langhooks.h $(GGC_H) $(TARGET_H) $(CGRAPH_H)  $(TREE_H) $(TARGET_H) \\\n-   $(TREE_FLOW_H) $(TM_H) $(TREE_PASS_H) $(FLAGS_H) $(TREE_H) $(GGC_H) \\\n+   $(TREE_SSA_H) $(TM_H) $(TREE_PASS_H) $(FLAGS_H) $(TREE_H) $(GGC_H) \\\n    $(IPA_UTILS_H)\n ipa-cp.o : ipa-cp.c $(CONFIG_H) $(SYSTEM_H) coretypes.h  \\\n-   $(TREE_H) $(TARGET_H) $(GIMPLE_H) $(CGRAPH_H) $(IPA_PROP_H) $(TREE_FLOW_H) \\\n+   $(TREE_H) $(TARGET_H) $(GIMPLE_H) $(CGRAPH_H) $(IPA_PROP_H) $(TREE_SSA_H) \\\n    $(TREE_PASS_H) $(FLAGS_H) $(DIAGNOSTIC_H) \\\n    $(TREE_INLINE_H) $(PARAMS_H) $(TREE_PRETTY_PRINT_H) $(IPA_INLINE_H)\n ipa-split.o : ipa-split.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   $(TREE_H) $(TARGET_H) $(CGRAPH_H) $(IPA_PROP_H) $(TREE_FLOW_H) \\\n+   $(TREE_H) $(TARGET_H) $(CGRAPH_H) $(IPA_PROP_H) $(TREE_SSA_H) \\\n    $(TREE_PASS_H) $(FLAGS_H) $(DIAGNOSTIC_H) $(TREE_DUMP_H) $(CFGLOOP_H) \\\n    $(TREE_INLINE_H) $(PARAMS_H) $(GIMPLE_PRETTY_PRINT_H) $(IPA_INLINE_H)\n ipa-inline.o : ipa-inline.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(TREE_INLINE_H) $(FLAGS_H) $(CGRAPH_H) intl.h \\\n    $(DIAGNOSTIC_H) $(FIBHEAP_H) $(PARAMS_H) $(TREE_PASS_H) \\\n-   $(COVERAGE_H) $(GGC_H) $(TREE_FLOW_H) $(RTL_H) $(IPA_PROP_H) \\\n+   $(COVERAGE_H) $(GGC_H) $(TREE_SSA_H) $(RTL_H) $(IPA_PROP_H) \\\n    $(EXCEPT_H) $(GIMPLE_PRETTY_PRINT_H) $(IPA_INLINE_H) $(TARGET_H) \\\n    $(IPA_UTILS_H) sreal.h\n ipa-inline-analysis.o : ipa-inline-analysis.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(TREE_INLINE_H) $(FLAGS_H) $(CGRAPH_H) intl.h \\\n    $(DIAGNOSTIC_H) $(PARAMS_H) $(TREE_PASS_H) $(CFGLOOP_H) \\\n-   $(HASHTAB_H) $(COVERAGE_H) $(GGC_H) $(TREE_FLOW_H) $(IPA_PROP_H) \\\n+   $(HASHTAB_H) $(COVERAGE_H) $(GGC_H) $(TREE_SSA_H) $(IPA_PROP_H) \\\n    $(GIMPLE_PRETTY_PRINT_H) $(IPA_INLINE_H) $(LTO_STREAMER_H) $(DATA_STREAMER_H) \\\n    $(TREE_STREAMER_H) ipa-utils.h tree-scalar-evolution.h $(CFGLOOP_H) \\\n    alloc-pool.h\n ipa-inline-transform.o : ipa-inline-transform.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(TREE_INLINE_H) $(FLAGS_H) $(CGRAPH_H) intl.h \\\n    $(TREE_PASS_H) \\\n-   $(HASHTAB_H) $(COVERAGE_H) $(GGC_H) $(TREE_FLOW_H) $(IPA_PROP_H) \\\n+   $(HASHTAB_H) $(COVERAGE_H) $(GGC_H) $(TREE_SSA_H) $(IPA_PROP_H) \\\n    $(TREE_PASS_H)\n ipa-utils.o : ipa-utils.c $(IPA_UTILS_H) $(CONFIG_H) $(SYSTEM_H) \\\n-   coretypes.h $(DUMPFILE_H) $(TM_H) $(TREE_H) $(TREE_FLOW_H) $(TREE_INLINE_H) \\\n+   coretypes.h $(DUMPFILE_H) $(TM_H) $(TREE_H) $(TREE_SSA_H) $(TREE_INLINE_H) \\\n    langhooks.h pointer-set.h $(GGC_H) $(GIMPLE_H) $(SPLAY_TREE_H) \\\n    $(CGRAPH_H) $(FLAGS_H) $(DIAGNOSTIC_H)\n ipa-reference.o : ipa-reference.c $(CONFIG_H) $(SYSTEM_H) \\\n-   coretypes.h $(TM_H) $(TREE_H) $(TREE_FLOW_H) $(TREE_INLINE_H) langhooks.h \\\n+   coretypes.h $(TM_H) $(TREE_H) $(TREE_SSA_H) $(TREE_INLINE_H) langhooks.h \\\n    pointer-set.h $(GGC_H) $(IPA_REFERENCE_H) $(IPA_UTILS_H) $(SPLAY_TREE_H) \\\n    $(GIMPLE_H) $(CGRAPH_H) $(FLAGS_H) $(TREE_PASS_H) \\\n    $(DIAGNOSTIC_H) $(FUNCTION_H) $(LTO_STREAMER_H) \\\n    $(DIAGNOSTIC_CORE_H) $(DATA_STREAMER_H)\n ipa-pure-const.o : ipa-pure-const.c $(CONFIG_H) $(SYSTEM_H) \\\n-   coretypes.h $(TM_H) $(TREE_H) $(TREE_FLOW_H) $(TREE_INLINE_H) langhooks.h \\\n+   coretypes.h $(TM_H) $(TREE_H) $(TREE_SSA_H) $(TREE_INLINE_H) langhooks.h \\\n    pointer-set.h $(GGC_H) $(IPA_UTILS_H) $(TARGET_H) \\\n    $(GIMPLE_H) $(CGRAPH_H) $(FLAGS_H) $(TREE_PASS_H) \\\n    $(DIAGNOSTIC_H) $(CFGLOOP_H) $(SCEV_H) $(LTO_STREAMER_H) \\\n@@ -3040,7 +3041,7 @@ dse.o : dse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(TM_P_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n    $(RECOG_H) $(EXPR_H) $(DF_H) cselib.h $(DBGCNT_H) \\\n    $(TREE_PASS_H) alloc-pool.h $(ALIAS_H) $(OPTABS_H) $(TARGET_H) \\\n-   $(BITMAP_H) $(PARAMS_H) $(TREE_FLOW_H) $(HASH_TABLE_H)\n+   $(BITMAP_H) $(PARAMS_H) $(TREE_SSA_H) $(HASH_TABLE_H)\n fwprop.o : fwprop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(DIAGNOSTIC_CORE_H) insn-config.h $(RECOG_H) $(FLAGS_H) $(OBSTACK_H) $(BASIC_BLOCK_H) \\\n    $(DF_H) alloc-pool.h $(TREE_PASS_H) $(TARGET_H) \\\n@@ -3083,42 +3084,42 @@ mode-switching.o : mode-switching.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(INSN_ATTR_H) $(RECOG_H) $(BASIC_BLOCK_H) $(TM_P_H) $(FUNCTION_H) \\\n    $(TREE_PASS_H) $(DF_H) $(TARGET_H) $(EMIT_RTL_H)\n tree-ssa-dce.o : tree-ssa-dce.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n-    $(TREE_FLOW_H) $(DIAGNOSTIC_H) $(TM_H) \\\n+    $(TREE_SSA_H) $(DIAGNOSTIC_H) $(TM_H) \\\n     coretypes.h $(TREE_PASS_H) $(FLAGS_H) $(BASIC_BLOCK_H) \\\n     $(GGC_H) $(GIMPLE_H) $(CFGLOOP_H) $(SCEV_H) $(GIMPLE_PRETTY_PRINT_H)\n tree-call-cdce.o : tree-call-cdce.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n-    $(TREE_FLOW_H) $(TM_H) \\\n+    $(TREE_SSA_H) $(TM_H) \\\n     coretypes.h $(TREE_PASS_H) $(FLAGS_H) $(BASIC_BLOCK_H) \\\n     $(GIMPLE_H) $(GIMPLE_PRETTY_PRINT_H)\n-tree-ssa-ccp.o : tree-ssa-ccp.c $(TREE_FLOW_H) $(CONFIG_H) \\\n+tree-ssa-ccp.o : tree-ssa-ccp.c $(TREE_SSA_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(TM_P_H) \\\n    $(DIAGNOSTIC_H) $(FUNCTION_H) $(TM_H) coretypes.h \\\n    $(BASIC_BLOCK_H) $(TREE_PASS_H) langhooks.h  $(PARAMS_H) \\\n    tree-ssa-propagate.h value-prof.h $(FLAGS_H) $(TARGET_H) \\\n    $(DIAGNOSTIC_CORE_H) $(HASH_TABLE_H) \\\n    $(DBGCNT_H) $(GIMPLE_PRETTY_PRINT_H) gimple-fold.h\n tree-ssa-strlen.o : tree-ssa-strlen.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   $(TREE_FLOW_H) $(TREE_PASS_H) domwalk.h alloc-pool.h tree-ssa-propagate.h \\\n+   $(TREE_SSA_H) $(TREE_PASS_H) domwalk.h alloc-pool.h tree-ssa-propagate.h \\\n    $(GIMPLE_PRETTY_PRINT_H) $(PARAMS_H) $(EXPR_H) $(HASH_TABLE_H)\n tree-sra.o : tree-sra.c $(CONFIG_H) $(SYSTEM_H) coretypes.h alloc-pool.h \\\n-   $(HASH_TABLE_H) $(TM_H) $(TREE_H) $(GIMPLE_H) $(CGRAPH_H) $(TREE_FLOW_H) \\\n+   $(HASH_TABLE_H) $(TM_H) $(TREE_H) $(GIMPLE_H) $(CGRAPH_H) $(TREE_SSA_H) \\\n    $(IPA_PROP_H) $(DIAGNOSTIC_H) statistics.h \\\n    $(PARAMS_H) $(TARGET_H) $(FLAGS_H) \\\n    $(DBGCNT_H) $(TREE_INLINE_H) $(GIMPLE_PRETTY_PRINT_H) ipa-utils.h\n tree-switch-conversion.o : tree-switch-conversion.c $(CONFIG_H) $(SYSTEM_H) \\\n-    $(TREE_H) $(TM_P_H) $(TREE_FLOW_H) $(DIAGNOSTIC_H) $(TREE_INLINE_H) \\\n+    $(TREE_H) $(TM_P_H) $(TREE_SSA_H) $(DIAGNOSTIC_H) $(TREE_INLINE_H) \\\n     $(TM_H) coretypes.h $(GIMPLE_H) $(CFGLOOP_H) \\\n     $(TREE_PASS_H) $(FLAGS_H) $(EXPR_H) $(BASIC_BLOCK_H) \\\n     $(GGC_H) $(OBSTACK_H) $(PARAMS_H) $(CPPLIB_H) $(PARAMS_H) \\\n     $(GIMPLE_PRETTY_PRINT_H) langhooks.h $(OPTABS_H)\n tree-complex.o : tree-complex.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n-    $(TM_H) $(FLAGS_H) $(TREE_FLOW_H) $(TREE_HASHER_H) $(GIMPLE_H) \\\n+    $(TM_H) $(FLAGS_H) $(TREE_SSA_H) $(TREE_HASHER_H) $(GIMPLE_H) \\\n     $(CFGLOOP_H) tree-iterator.h $(TREE_PASS_H) tree-ssa-propagate.h\n tree-emutls.o : tree-emutls.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n-    $(GIMPLE_H) $(TREE_PASS_H) $(TREE_FLOW_H) $(CGRAPH_H) langhooks.h \\\n+    $(GIMPLE_H) $(TREE_PASS_H) $(TREE_SSA_H) $(CGRAPH_H) langhooks.h \\\n     $(TARGET_H) $(TARGET_DEF_H) tree-iterator.h\n tree-vect-generic.o : tree-vect-generic.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n-    $(TM_H) $(TREE_FLOW_H) $(GIMPLE_H) tree-iterator.h $(TREE_PASS_H) \\\n+    $(TM_H) $(TREE_SSA_H) $(GIMPLE_H) tree-iterator.h $(TREE_PASS_H) \\\n     $(FLAGS_H) $(OPTABS_H) $(MACHMODE_H) $(EXPR_H) \\\n     langhooks.h $(FLAGS_H) $(DIAGNOSTIC_H) gt-tree-vect-generic.h $(GGC_H) \\\n     coretypes.h insn-codes.h $(DIAGNOSTIC_H) $(TARGET_H)\n@@ -3145,25 +3146,25 @@ valtrack.o : valtrack.c $(VALTRACK_H) $(CONFIG_H) $(SYSTEM_H) \\\n var-tracking.o : var-tracking.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(TREE_H) hard-reg-set.h insn-config.h reload.h $(FLAGS_H) \\\n    $(BASIC_BLOCK_H) bitmap.h alloc-pool.h $(FIBHEAP_H) $(HASH_TABLE_H) \\\n-   $(REGS_H) $(EXPR_H) $(TREE_PASS_H) $(TREE_FLOW_H) \\\n+   $(REGS_H) $(EXPR_H) $(TREE_PASS_H) $(TREE_SSA_H) \\\n    cselib.h $(TARGET_H) $(DIAGNOSTIC_CORE_H) $(PARAMS_H) $(DIAGNOSTIC_H) \\\n    pointer-set.h $(RECOG_H) $(TM_P_H) $(TREE_PRETTY_PRINT_H) $(ALIAS_H)\n profile.o : profile.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) \\\n    $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) $(REGS_H) $(EXPR_H) $(FUNCTION_H) $(BASIC_BLOCK_H) \\\n-   $(DIAGNOSTIC_CORE_H) $(COVERAGE_H) $(TREE_FLOW_H) value-prof.h \\\n+   $(DIAGNOSTIC_CORE_H) $(COVERAGE_H) $(TREE_SSA_H) value-prof.h \\\n    $(CFGLOOP_H) profile.h\n mcf.o : mcf.c profile.h $(CONFIG_H) $(SYSTEM_H) $(TM_H) coretypes.h \\\n    $(DUMPFILE_H) $(BASIC_BLOCK_H) langhooks.h $(GCOV_IO_H) $(TREE_H) \n tree-profile.o : tree-profile.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TARGET_H) $(TREE_H) $(FLAGS_H) $(FUNCTION_H) \\\n    $(BASIC_BLOCK_H) $(DIAGNOSTIC_CORE_H) $(COVERAGE_H) $(TREE_H) value-prof.h \\\n-   $(TREE_PASS_H) $(TREE_FLOW_H) gt-tree-profile.h $(CGRAPH_H)\n+   $(TREE_PASS_H) $(TREE_SSA_H) gt-tree-profile.h $(CGRAPH_H)\n value-prof.o : value-prof.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) \\\n    $(TM_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h profile.h value-prof.h $(EXPR_H) $(FLAGS_H) \\\n    $(RECOG_H) insn-config.h $(OPTABS_H) $(REGS_H) $(GGC_H) $(DIAGNOSTIC_H) \\\n-   $(TREE_H) $(COVERAGE_H) $(RTL_H) $(GCOV_IO_H) $(TREE_FLOW_H) \\\n+   $(TREE_H) $(COVERAGE_H) $(RTL_H) $(GCOV_IO_H) $(TREE_SSA_H) \\\n    tree-flow-inline.h $(TIMEVAR_H) $(DIAGNOSTIC_CORE_H) pointer-set.h \\\n    $(GIMPLE_PRETTY_PRINT_H) $(DATA_STREAMER_H)\n loop-doloop.o : loop-doloop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n@@ -3180,8 +3181,8 @@ cfg.o : cfg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) \\\n    $(GGC_H) $(OBSTACK_H) alloc-pool.h $(HASH_TABLE_H) $(CFGLOOP_H) $(TREE_H) \\\n    $(BASIC_BLOCK_H)\n cfghooks.o: cfghooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   $(TREE_H) $(BASIC_BLOCK_H) $(TREE_FLOW_H) $(TIMEVAR_H) toplev.h $(DIAGNOSTIC_CORE_H) $(CFGLOOP_H) $(PRETTY_PRINT_H)\n-cfgexpand.o : cfgexpand.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n+   $(TREE_H) $(BASIC_BLOCK_H) $(TREE_SSA_H) $(TIMEVAR_H) toplev.h $(DIAGNOSTIC_CORE_H) $(CFGLOOP_H) $(PRETTY_PRINT_H)\n+cfgexpand.o : cfgexpand.c $(TREE_SSA_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) $(FUNCTION_H) $(TM_H) \\\n    coretypes.h $(EXCEPT_H) langhooks.h $(TREE_PASS_H) $(RTL_H) \\\n    $(DIAGNOSTIC_H) toplev.h $(DIAGNOSTIC_CORE_H) $(BASIC_BLOCK_H) $(FLAGS_H) debug.h $(PARAMS_H) \\\n@@ -3207,7 +3208,7 @@ cfgcleanup.o : cfgcleanup.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n cfgloop.o : cfgloop.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) coretypes.h \\\n    $(DUMPFILE_H) $(TM_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(FLAGS_H) $(FUNCTION_H) \\\n-   $(OBSTACK_H) toplev.h $(DIAGNOSTIC_CORE_H) $(TREE_FLOW_H) $(TREE_H) pointer-set.h \\\n+   $(OBSTACK_H) toplev.h $(DIAGNOSTIC_CORE_H) $(TREE_SSA_H) $(TREE_H) pointer-set.h \\\n    $(GGC_H)\n cfgloopanal.o : cfgloopanal.c coretypes.h $(DUMPFILE_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(RTL_H) \\\n@@ -3226,11 +3227,11 @@ loop-invariant.o : loop-invariant.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(OBSTACK_H) $(HASH_TABLE_H) $(EXCEPT_H) $(PARAMS_H) $(REGS_H) ira.h\n cfgloopmanip.o : cfgloopmanip.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) \\\n-   coretypes.h $(TM_H) $(OBSTACK_H) $(TREE_FLOW_H)\n+   coretypes.h $(TM_H) $(OBSTACK_H) $(TREE_SSA_H)\n loop-init.o : loop-init.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(GGC_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) \\\n    coretypes.h $(TM_H) $(OBSTACK_H) $(TREE_PASS_H) $(FLAGS_H) \\\n-   $(REGS_H) $(DF_H) $(TREE_FLOW_H)\n+   $(REGS_H) $(DF_H) $(TREE_SSA_H)\n loop-unswitch.o : loop-unswitch.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(DUMPFILE_H) \\\n    $(RTL_H) $(TM_H) $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(PARAMS_H) \\\n@@ -3303,7 +3304,7 @@ alias.o : alias.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(DUMPFILE_H) \\\n    $(ALIAS_H) $(EMIT_RTL_H) $(GGC_H) $(FUNCTION_H) cselib.h $(TREE_H) $(TM_P_H) \\\n    langhooks.h $(TARGET_H) gt-alias.h $(TIMEVAR_H) $(CGRAPH_H) \\\n    $(SPLAY_TREE_H) $(DF_H) \\\n-   tree-ssa-alias.h pointer-set.h $(TREE_FLOW_H)\n+   tree-ssa-alias.h pointer-set.h $(TREE_SSA_H)\n stack-ptr-mod.o : stack-ptr-mod.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) $(RTL_H) $(REGS_H) $(EXPR_H) $(TREE_PASS_H) \\\n    $(BASIC_BLOCK_H) $(FLAGS_H) output.h $(DF_H)\n@@ -3443,7 +3444,7 @@ final.o : final.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_ERROR_H) \\\n    $(EXCEPT_H) debug.h xcoffout.h toplev.h $(DIAGNOSTIC_CORE_H) reload.h $(DWARF2OUT_H) \\\n    $(TREE_PASS_H) $(BASIC_BLOCK_H) $(TM_P_H) $(TARGET_H) $(EXPR_H) \\\n    dbxout.h $(CGRAPH_H) $(COVERAGE_H) \\\n-   $(DF_H) $(GGC_H) $(CFGLOOP_H) $(PARAMS_H) $(TREE_FLOW_H) \\\n+   $(DF_H) $(GGC_H) $(CFGLOOP_H) $(PARAMS_H) $(TREE_SSA_H) \\\n    $(TARGET_DEF_H) $(TREE_PRETTY_PRINT_H)\n recog.o : recog.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_ERROR_H) \\\n    $(FUNCTION_H) $(BASIC_BLOCK_H) $(REGS_H) $(RECOG_H) $(EXPR_H) \\\n@@ -3461,7 +3462,7 @@ predict.o: predict.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    hard-reg-set.h $(DIAGNOSTIC_CORE_H) $(RECOG_H) $(FUNCTION_H) $(EXCEPT_H) \\\n    $(TM_P_H) $(PREDICT_H) sreal.h $(PARAMS_H) $(TARGET_H) $(CFGLOOP_H) \\\n    $(COVERAGE_H) $(SCEV_H) $(GGC_H) predict.def \\\n-   $(TREE_FLOW_H) $(TREE_PASS_H) $(EXPR_H) pointer-set.h\n+   $(TREE_SSA_H) $(TREE_PASS_H) $(EXPR_H) pointer-set.h\n lists.o: lists.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(DIAGNOSTIC_CORE_H) \\\n    $(RTL_H) $(GGC_H) gt-lists.h\n bb-reorder.o : bb-reorder.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n@@ -3472,7 +3473,7 @@ bb-reorder.o : bb-reorder.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n tracer.o : tracer.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(BASIC_BLOCK_H) hard-reg-set.h \\\n    $(FLAGS_H) $(PARAMS_H) $(COVERAGE_H) $(FIBHEAP_H) \\\n-   $(TREE_PASS_H) $(TREE_FLOW_H) $(TREE_INLINE_H) $(CFGLOOP_H)\n+   $(TREE_PASS_H) $(TREE_SSA_H) $(TREE_INLINE_H) $(CFGLOOP_H)\n timevar.o : timevar.c $(CONFIG_H) $(SYSTEM_H) $(TIMEVAR_H)\n regcprop.o : regcprop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) insn-config.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h \\\n@@ -4687,7 +4688,7 @@ PLUGIN_HEADERS = $(TREE_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(host_xm_file_list) $(host_xm_include_list) $(xm_include_list) \\\n   intl.h $(PLUGIN_VERSION_H) $(DIAGNOSTIC_H) ${C_TREE_H} \\\n   $(C_COMMON_H) c-family/c-objc.h $(C_PRETTY_PRINT_H) \\\n-  tree-iterator.h $(PLUGIN_H) $(TREE_FLOW_H) langhooks.h incpath.h debug.h \\\n+  tree-iterator.h $(PLUGIN_H) $(TREE_SSA_H) langhooks.h incpath.h debug.h \\\n   $(EXCEPT_H) tree-ssa-sccvn.h real.h output.h $(IPA_UTILS_H) \\\n   $(C_PRAGMA_H)  $(CPPLIB_H)  $(FUNCTION_H) \\\n   cppdefault.h flags.h $(MD5_H) params.def params.h prefix.h tree-inline.h \\"}, {"sha": "966e9d28d5adc6551f4abeb716a810a6d8f0a921", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -44,7 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"df.h\"\n #include \"tree-ssa-alias.h\"\n #include \"pointer-set.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n \n /* The aliasing API provided here solves related but different problems:\n "}, {"sha": "1397173b3f60c59241fccc132ae83c99acc46a76", "filename": "gcc/asan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -24,7 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"gimple.h\"\n #include \"tree-iterator.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"asan.h\"\n #include \"gimple-pretty-print.h\""}, {"sha": "0ab6d9b5d7058c27c5ac38f597cdd3026d3bd5c5", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -44,7 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"basic-block.h\"\n #include \"tree-mudflap.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"value-prof.h\"\n #include \"diagnostic-core.h\"\n #include \"builtins.h\""}, {"sha": "3930d5e170a3eaa4ebd75b5da929c12dbfbac3c4", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -40,7 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cgraph.h\"\n #include \"except.h\"\n #include \"dbgcnt.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n \n /* Like PREFERRED_STACK_BOUNDARY but in units of bytes, not bits.  */\n #define STACK_BYTES (PREFERRED_STACK_BOUNDARY / BITS_PER_UNIT)"}, {"sha": "4f1036179773c3ea03593bff5aeb9ce21dd62cc7", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -28,7 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"expr.h\"\n #include \"langhooks.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"except.h\"\n #include \"flags.h\""}, {"sha": "a4248354d970017de149598a9c89c897c1f9a730", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -26,7 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"rtl.h\"\n #include \"basic-block.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"timevar.h\"\n #include \"diagnostic-core.h\"\n #include \"cfgloop.h\""}, {"sha": "928edd462280a993feff67d74289041c4a4c0c7a", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -28,7 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic-core.h\"\n #include \"flags.h\"\n #include \"tree.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"pointer-set.h\"\n #include \"ggc.h\"\n #include \"dumpfile.h\""}, {"sha": "ed8a2075f7aaa1d133ff10c7f79e975c4bda92c8", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -24,7 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"rtl.h\"\n #include \"basic-block.h\"\n #include \"cfgloop.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"dumpfile.h\"\n \n static void copy_loops_to (struct loop **, int,"}, {"sha": "ebc48bf8aec830dd9b1d0607b1f9bededd40b3a4", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -42,7 +42,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple.h\"\n #include \"timevar.h\"\n #include \"dumpfile.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"value-prof.h\"\n #include \"except.h\"\n #include \"diagnostic-core.h\""}, {"sha": "98fd12cbb13ab891179628db4b23c6c807b73df2", "filename": "gcc/cgraphbuild.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fcgraphbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fcgraphbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphbuild.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -23,7 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"tree.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"langhooks.h\"\n #include \"pointer-set.h\"\n #include \"cgraph.h\""}, {"sha": "e1aa120dce4eae22b274bec6047231b9800f7988", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -70,7 +70,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"rtl.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-inline.h\"\n #include \"langhooks.h\"\n #include \"pointer-set.h\""}, {"sha": "8331f2e933bb99afb0412445fe0f48d4347bc01c", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -164,7 +164,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"output.h\"\n #include \"rtl.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-inline.h\"\n #include \"langhooks.h\"\n #include \"pointer-set.h\""}, {"sha": "d0e99db3dbda4c23b243823a7d0dddf341601ac8", "filename": "gcc/dse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -46,7 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dbgcnt.h\"\n #include \"target.h\"\n #include \"params.h\"\n-#include \"tree-flow.h\" /* for may_be_aliased */\n+#include \"tree-ssa.h\" /* for may_be_aliased */\n \n /* This file contains three techniques for performing Dead Store\n    Elimination (dse)."}, {"sha": "b161f9e2b69ed1b1e6c2c1905ef6ffc6ebe75ae0", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -139,7 +139,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic.h\"\n #include \"tree-pretty-print.h\"\n #include \"tree-pass.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"cfgloop.h\"\n \n /* Provide defaults for stuff that may not be defined when using"}, {"sha": "39fa71e805137367c3d373ccfbfa61298bbf4c6c", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -43,7 +43,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intl.h\"\n #include \"tm_p.h\"\n #include \"tree-iterator.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"target.h\"\n #include \"common/common-target.h\"\n #include \"timevar.h\""}, {"sha": "c25f7566567061107694ec8b895626949bda9cbe", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -70,7 +70,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"debug.h\"\n #include \"expr.h\"\n #include \"tree-pass.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"cgraph.h\"\n #include \"coverage.h\"\n #include \"df.h\""}, {"sha": "c70437b5ea10338e08e4e1fe6de5409d59a1ed81", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -58,7 +58,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"md5.h\"\n #include \"gimple.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n \n /* Nonzero if we are folding constants inside an initializer; zero\n    otherwise.  */"}, {"sha": "c3dffe8dd9639c358037cbe696b5a32a759fb21a", "filename": "gcc/gengtype.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -1736,7 +1736,7 @@ open_base_files (void)\n       \"tree.h\", \"rtl.h\", \"function.h\", \"insn-config.h\", \"expr.h\",\n       \"hard-reg-set.h\", \"basic-block.h\", \"cselib.h\", \"insn-addr.h\",\n       \"optabs.h\", \"libfuncs.h\", \"debug.h\", \"ggc.h\", \"cgraph.h\",\n-      \"tree-flow.h\", \"reload.h\", \"cpp-id-data.h\", \"tree-chrec.h\",\n+      \"tree-ssa.h\", \"reload.h\", \"cpp-id-data.h\", \"tree-chrec.h\",\n       \"except.h\", \"output.h\", \"gimple.h\", \"cfgloop.h\",\n       \"target.h\", \"ipa-prop.h\", \"lto-streamer.h\", \"target-globals.h\",\n       \"ipa-inline.h\", \"dwarf2out.h\", NULL"}, {"sha": "487a6d45c788aaa2042c72e0dd2ee7d7433d7a9a", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -30,7 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ggc-internal.h\"\n #include \"timevar.h\"\n #include \"params.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"cfgloop.h\"\n #include \"plugin.h\"\n "}, {"sha": "98c3a153f3f643b9e1a80391e4c6c9baca610bed", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -26,7 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"function.h\"\n #include \"dumpfile.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-ssa-propagate.h\"\n #include \"target.h\"\n #include \"gimple-fold.h\""}, {"sha": "574e31f298f8dba4641008e3168e8ff1864c5e7b", "filename": "gcc/gimple-iterator.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgimple-iterator.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgimple-iterator.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-iterator.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -24,7 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"value-prof.h\"\n \n "}, {"sha": "a46a69f56edadb50f0f7c20bb594dea8de8f96d2", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -26,7 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple.h\"\n #include \"tree-iterator.h\"\n #include \"tree-inline.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"flags.h\"\n #include \"function.h\"\n #include \"diagnostic-core.h\""}, {"sha": "01a1ab566806671d6ca90166ea3f6d6d1178b175", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -27,7 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic.h\"\n #include \"gimple-pretty-print.h\"\n #include \"hashtab.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"dumpfile.h\"\t/* for dump_flags */\n #include \"gimple.h\"\n #include \"value-prof.h\""}, {"sha": "7f1c9ecdbb86a3b1940f0101bafa6eb9a36a454c", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -42,7 +42,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"cfgloop.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"domwalk.h\"\n #include \"pointer-set.h\"\n #include \"expmed.h\""}, {"sha": "8161a0876562edf515a51fea3293b83497076c69", "filename": "gcc/gimple-streamer-in.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgimple-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgimple-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-streamer-in.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -24,7 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"diagnostic.h\"\n #include \"tree.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"data-streamer.h\"\n #include \"tree-streamer.h\"\n #include \"gimple-streamer.h\""}, {"sha": "33699bbbfa901eefa345e0f1b99b5ed412501e01", "filename": "gcc/gimple-streamer-out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgimple-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgimple-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-streamer-out.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -23,7 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"data-streamer.h\"\n #include \"gimple-streamer.h\"\n #include \"lto-streamer.h\""}, {"sha": "59fcf4335a3ac6f82e198908e9e3f0fb04636793", "filename": "gcc/gimple.c", "status": "modified", "additions": 257, "deletions": 1, "changes": 258, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -30,7 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple.h\"\n #include \"diagnostic.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"value-prof.h\"\n #include \"flags.h\"\n #include \"alias.h\"\n@@ -4324,4 +4324,260 @@ build_type_cast (tree to_type, gimple op, enum ssa_mode mode)\n   return build_type_cast (to_type, gimple_assign_lhs (op), mode);\n }\n \n+\n+/* Return true if the conversion from INNER_TYPE to OUTER_TYPE is a\n+   useless type conversion, otherwise return false.\n+\n+   This function implicitly defines the middle-end type system.  With\n+   the notion of 'a < b' meaning that useless_type_conversion_p (a, b)\n+   holds and 'a > b' meaning that useless_type_conversion_p (b, a) holds,\n+   the following invariants shall be fulfilled:\n+\n+     1) useless_type_conversion_p is transitive.\n+\tIf a < b and b < c then a < c.\n+\n+     2) useless_type_conversion_p is not symmetric.\n+\tFrom a < b does not follow a > b.\n+\n+     3) Types define the available set of operations applicable to values.\n+\tA type conversion is useless if the operations for the target type\n+\tis a subset of the operations for the source type.  For example\n+\tcasts to void* are useless, casts from void* are not (void* can't\n+\tbe dereferenced or offsetted, but copied, hence its set of operations\n+\tis a strict subset of that of all other data pointer types).  Casts\n+\tto const T* are useless (can't be written to), casts from const T*\n+\tto T* are not.  */\n+\n+bool\n+useless_type_conversion_p (tree outer_type, tree inner_type)\n+{\n+  /* Do the following before stripping toplevel qualifiers.  */\n+  if (POINTER_TYPE_P (inner_type)\n+      && POINTER_TYPE_P (outer_type))\n+    {\n+      /* Do not lose casts between pointers to different address spaces.  */\n+      if (TYPE_ADDR_SPACE (TREE_TYPE (outer_type))\n+\t  != TYPE_ADDR_SPACE (TREE_TYPE (inner_type)))\n+\treturn false;\n+    }\n+\n+  /* From now on qualifiers on value types do not matter.  */\n+  inner_type = TYPE_MAIN_VARIANT (inner_type);\n+  outer_type = TYPE_MAIN_VARIANT (outer_type);\n+\n+  if (inner_type == outer_type)\n+    return true;\n+\n+  /* If we know the canonical types, compare them.  */\n+  if (TYPE_CANONICAL (inner_type)\n+      && TYPE_CANONICAL (inner_type) == TYPE_CANONICAL (outer_type))\n+    return true;\n+\n+  /* Changes in machine mode are never useless conversions unless we\n+     deal with aggregate types in which case we defer to later checks.  */\n+  if (TYPE_MODE (inner_type) != TYPE_MODE (outer_type)\n+      && !AGGREGATE_TYPE_P (inner_type))\n+    return false;\n+\n+  /* If both the inner and outer types are integral types, then the\n+     conversion is not necessary if they have the same mode and\n+     signedness and precision, and both or neither are boolean.  */\n+  if (INTEGRAL_TYPE_P (inner_type)\n+      && INTEGRAL_TYPE_P (outer_type))\n+    {\n+      /* Preserve changes in signedness or precision.  */\n+      if (TYPE_UNSIGNED (inner_type) != TYPE_UNSIGNED (outer_type)\n+\t  || TYPE_PRECISION (inner_type) != TYPE_PRECISION (outer_type))\n+\treturn false;\n+\n+      /* Preserve conversions to/from BOOLEAN_TYPE if types are not\n+\t of precision one.  */\n+      if (((TREE_CODE (inner_type) == BOOLEAN_TYPE)\n+\t   != (TREE_CODE (outer_type) == BOOLEAN_TYPE))\n+\t  && TYPE_PRECISION (outer_type) != 1)\n+\treturn false;\n+\n+      /* We don't need to preserve changes in the types minimum or\n+\t maximum value in general as these do not generate code\n+\t unless the types precisions are different.  */\n+      return true;\n+    }\n+\n+  /* Scalar floating point types with the same mode are compatible.  */\n+  else if (SCALAR_FLOAT_TYPE_P (inner_type)\n+\t   && SCALAR_FLOAT_TYPE_P (outer_type))\n+    return true;\n+\n+  /* Fixed point types with the same mode are compatible.  */\n+  else if (FIXED_POINT_TYPE_P (inner_type)\n+\t   && FIXED_POINT_TYPE_P (outer_type))\n+    return true;\n+\n+  /* We need to take special care recursing to pointed-to types.  */\n+  else if (POINTER_TYPE_P (inner_type)\n+\t   && POINTER_TYPE_P (outer_type))\n+    {\n+      /* Do not lose casts to function pointer types.  */\n+      if ((TREE_CODE (TREE_TYPE (outer_type)) == FUNCTION_TYPE\n+\t   || TREE_CODE (TREE_TYPE (outer_type)) == METHOD_TYPE)\n+\t  && !(TREE_CODE (TREE_TYPE (inner_type)) == FUNCTION_TYPE\n+\t       || TREE_CODE (TREE_TYPE (inner_type)) == METHOD_TYPE))\n+\treturn false;\n+\n+      /* We do not care for const qualification of the pointed-to types\n+\t as const qualification has no semantic value to the middle-end.  */\n+\n+      /* Otherwise pointers/references are equivalent.  */\n+      return true;\n+    }\n+\n+  /* Recurse for complex types.  */\n+  else if (TREE_CODE (inner_type) == COMPLEX_TYPE\n+\t   && TREE_CODE (outer_type) == COMPLEX_TYPE)\n+    return useless_type_conversion_p (TREE_TYPE (outer_type),\n+\t\t\t\t      TREE_TYPE (inner_type));\n+\n+  /* Recurse for vector types with the same number of subparts.  */\n+  else if (TREE_CODE (inner_type) == VECTOR_TYPE\n+\t   && TREE_CODE (outer_type) == VECTOR_TYPE\n+\t   && TYPE_PRECISION (inner_type) == TYPE_PRECISION (outer_type))\n+    return useless_type_conversion_p (TREE_TYPE (outer_type),\n+\t\t\t\t      TREE_TYPE (inner_type));\n+\n+  else if (TREE_CODE (inner_type) == ARRAY_TYPE\n+\t   && TREE_CODE (outer_type) == ARRAY_TYPE)\n+    {\n+      /* Preserve string attributes.  */\n+      if (TYPE_STRING_FLAG (inner_type) != TYPE_STRING_FLAG (outer_type))\n+\treturn false;\n+\n+      /* Conversions from array types with unknown extent to\n+\t array types with known extent are not useless.  */\n+      if (!TYPE_DOMAIN (inner_type)\n+\t  && TYPE_DOMAIN (outer_type))\n+\treturn false;\n+\n+      /* Nor are conversions from array types with non-constant size to\n+         array types with constant size or to different size.  */\n+      if (TYPE_SIZE (outer_type)\n+\t  && TREE_CODE (TYPE_SIZE (outer_type)) == INTEGER_CST\n+\t  && (!TYPE_SIZE (inner_type)\n+\t      || TREE_CODE (TYPE_SIZE (inner_type)) != INTEGER_CST\n+\t      || !tree_int_cst_equal (TYPE_SIZE (outer_type),\n+\t\t\t\t      TYPE_SIZE (inner_type))))\n+\treturn false;\n+\n+      /* Check conversions between arrays with partially known extents.\n+\t If the array min/max values are constant they have to match.\n+\t Otherwise allow conversions to unknown and variable extents.\n+\t In particular this declares conversions that may change the\n+\t mode to BLKmode as useless.  */\n+      if (TYPE_DOMAIN (inner_type)\n+\t  && TYPE_DOMAIN (outer_type)\n+\t  && TYPE_DOMAIN (inner_type) != TYPE_DOMAIN (outer_type))\n+\t{\n+\t  tree inner_min = TYPE_MIN_VALUE (TYPE_DOMAIN (inner_type));\n+\t  tree outer_min = TYPE_MIN_VALUE (TYPE_DOMAIN (outer_type));\n+\t  tree inner_max = TYPE_MAX_VALUE (TYPE_DOMAIN (inner_type));\n+\t  tree outer_max = TYPE_MAX_VALUE (TYPE_DOMAIN (outer_type));\n+\n+\t  /* After gimplification a variable min/max value carries no\n+\t     additional information compared to a NULL value.  All that\n+\t     matters has been lowered to be part of the IL.  */\n+\t  if (inner_min && TREE_CODE (inner_min) != INTEGER_CST)\n+\t    inner_min = NULL_TREE;\n+\t  if (outer_min && TREE_CODE (outer_min) != INTEGER_CST)\n+\t    outer_min = NULL_TREE;\n+\t  if (inner_max && TREE_CODE (inner_max) != INTEGER_CST)\n+\t    inner_max = NULL_TREE;\n+\t  if (outer_max && TREE_CODE (outer_max) != INTEGER_CST)\n+\t    outer_max = NULL_TREE;\n+\n+\t  /* Conversions NULL / variable <- cst are useless, but not\n+\t     the other way around.  */\n+\t  if (outer_min\n+\t      && (!inner_min\n+\t\t  || !tree_int_cst_equal (inner_min, outer_min)))\n+\t    return false;\n+\t  if (outer_max\n+\t      && (!inner_max\n+\t\t  || !tree_int_cst_equal (inner_max, outer_max)))\n+\t    return false;\n+\t}\n+\n+      /* Recurse on the element check.  */\n+      return useless_type_conversion_p (TREE_TYPE (outer_type),\n+\t\t\t\t\tTREE_TYPE (inner_type));\n+    }\n+\n+  else if ((TREE_CODE (inner_type) == FUNCTION_TYPE\n+\t    || TREE_CODE (inner_type) == METHOD_TYPE)\n+\t   && TREE_CODE (inner_type) == TREE_CODE (outer_type))\n+    {\n+      tree outer_parm, inner_parm;\n+\n+      /* If the return types are not compatible bail out.  */\n+      if (!useless_type_conversion_p (TREE_TYPE (outer_type),\n+\t\t\t\t      TREE_TYPE (inner_type)))\n+\treturn false;\n+\n+      /* Method types should belong to a compatible base class.  */\n+      if (TREE_CODE (inner_type) == METHOD_TYPE\n+\t  && !useless_type_conversion_p (TYPE_METHOD_BASETYPE (outer_type),\n+\t\t\t\t\t TYPE_METHOD_BASETYPE (inner_type)))\n+\treturn false;\n+\n+      /* A conversion to an unprototyped argument list is ok.  */\n+      if (!prototype_p (outer_type))\n+\treturn true;\n+\n+      /* If the unqualified argument types are compatible the conversion\n+\t is useless.  */\n+      if (TYPE_ARG_TYPES (outer_type) == TYPE_ARG_TYPES (inner_type))\n+\treturn true;\n+\n+      for (outer_parm = TYPE_ARG_TYPES (outer_type),\n+\t   inner_parm = TYPE_ARG_TYPES (inner_type);\n+\t   outer_parm && inner_parm;\n+\t   outer_parm = TREE_CHAIN (outer_parm),\n+\t   inner_parm = TREE_CHAIN (inner_parm))\n+\tif (!useless_type_conversion_p\n+\t       (TYPE_MAIN_VARIANT (TREE_VALUE (outer_parm)),\n+\t\tTYPE_MAIN_VARIANT (TREE_VALUE (inner_parm))))\n+\t  return false;\n+\n+      /* If there is a mismatch in the number of arguments the functions\n+\t are not compatible.  */\n+      if (outer_parm || inner_parm)\n+\treturn false;\n+\n+      /* Defer to the target if necessary.  */\n+      if (TYPE_ATTRIBUTES (inner_type) || TYPE_ATTRIBUTES (outer_type))\n+\treturn comp_type_attributes (outer_type, inner_type) != 0;\n+\n+      return true;\n+    }\n+\n+  /* For aggregates we rely on TYPE_CANONICAL exclusively and require\n+     explicit conversions for types involving to be structurally\n+     compared types.  */\n+  else if (AGGREGATE_TYPE_P (inner_type)\n+\t   && TREE_CODE (inner_type) == TREE_CODE (outer_type))\n+    return false;\n+\n+  return false;\n+}\n+\n+/* Return true if a conversion from either type of TYPE1 and TYPE2\n+   to the other is not required.  Otherwise return false.  */\n+\n+bool\n+types_compatible_p (tree type1, tree type2)\n+{\n+  return (type1 == type2\n+\t  || (useless_type_conversion_p (type1, type2)\n+\t      && useless_type_conversion_p (type2, type1)));\n+}\n+\n+\n #include \"gt-gimple.h\""}, {"sha": "5f1280586d2614a448909c2a82e57d327c081b91", "filename": "gcc/gimple.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -922,6 +922,8 @@ extern bool gimple_ior_addresses_taken (bitmap, gimple);\n extern bool gimple_call_builtin_p (gimple, enum built_in_class);\n extern bool gimple_call_builtin_p (gimple, enum built_in_function);\n extern bool gimple_asm_clobbers_memory_p (const_gimple);\n+extern bool useless_type_conversion_p (tree, tree);\n+extern bool types_compatible_p (tree, tree);\n \n /* In gimplify.c  */\n extern tree create_tmp_var_raw (tree, const char *);\n@@ -1098,12 +1100,6 @@ extern tree gimple_assign_rhs_to_tree (gimple);\n /* In builtins.c  */\n extern bool validate_gimple_arglist (const_gimple, ...);\n \n-/* In tree-ssa.c  */\n-extern bool tree_ssa_useless_type_conversion (tree);\n-extern tree tree_ssa_strip_useless_type_conversions (tree);\n-extern bool useless_type_conversion_p (tree, tree);\n-extern bool types_compatible_p (tree, tree);\n-\n /* In tree-ssa-coalesce.c */\n extern bool gimple_can_coalesce_p (tree, tree);\n "}, {"sha": "1589db44b422f829f5565b13e980f64636504b6b", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -30,7 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-inline.h\"\n #include \"tree-pretty-print.h\"\n #include \"langhooks.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"cgraph.h\"\n #include \"timevar.h\"\n #include \"hashtab.h\""}, {"sha": "9226da00eae67310bcdcf38f8d48c346d0a6b910", "filename": "gcc/graphite-blocking.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgraphite-blocking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgraphite-blocking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-blocking.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -34,7 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"dumpfile.h\"\n #include \"cfgloop.h\"\n #include \"tree-chrec.h\""}, {"sha": "d40164c67740880d039144ce5a853ef2f55b9ddf", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -35,7 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"diagnostic-core.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"cfgloop.h\"\n #include \"tree-chrec.h\""}, {"sha": "5139e69b942ab0674ae6db20199fe159466fe2d2", "filename": "gcc/graphite-dependences.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgraphite-dependences.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgraphite-dependences.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-dependences.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -33,7 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"cfgloop.h\"\n #include \"tree-chrec.h\""}, {"sha": "289c1d9568fe1f92b21134bd3ebf8bfbf521bc8e", "filename": "gcc/graphite-interchange.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgraphite-interchange.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgraphite-interchange.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-interchange.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -35,7 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"dumpfile.h\"\n #include \"cfgloop.h\"\n #include \"tree-chrec.h\""}, {"sha": "f47e21a50238f21855750c8e7bb5e3a581b71fd2", "filename": "gcc/graphite-optimize-isl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgraphite-optimize-isl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgraphite-optimize-isl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-optimize-isl.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -32,7 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"dumpfile.h\"\n #include \"cfgloop.h\"\n #include \"tree-chrec.h\""}, {"sha": "35fe3ba234266d1dbac4a2da2c3b6b2e83a43f7d", "filename": "gcc/graphite-poly.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgraphite-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgraphite-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -35,7 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"diagnostic-core.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"dumpfile.h\"\n #include \"gimple-pretty-print.h\"\n #include \"cfgloop.h\""}, {"sha": "d2b8a2d04241093a939f635f673cdba41a103678", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -31,7 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"cfgloop.h\"\n #include \"tree-chrec.h\"\n #include \"tree-data-ref.h\""}, {"sha": "1527603a99f197dbfa824ae9047d9a09ed420e0b", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -33,7 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"cfgloop.h\"\n #include \"tree-chrec.h\""}, {"sha": "2cea3894da88c11d9001065d9f83e0c85cc4996a", "filename": "gcc/graphite.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgraphite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fgraphite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -47,7 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"diagnostic-core.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-dump.h\"\n #include \"cfgloop.h\"\n #include \"tree-chrec.h\""}, {"sha": "56b27b257b4c0e0a8f463dab0894516a36980fc1", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -108,7 +108,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple.h\"\n #include \"cgraph.h\"\n #include \"ipa-prop.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"flags.h\"\n #include \"diagnostic.h\""}, {"sha": "8cf8253eaca95d2d6e8603bcb251238b6f46d2bb", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -79,7 +79,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"coverage.h\"\n #include \"ggc.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"ipa-prop.h\"\n #include \"lto-streamer.h\"\n #include \"data-streamer.h\""}, {"sha": "d8a637cb8504b204c6c643f7d700f334d2f66a63", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -38,7 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intl.h\"\n #include \"coverage.h\"\n #include \"ggc.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"ipa-prop.h\"\n #include \"ipa-inline.h\"\n #include \"tree-inline.h\""}, {"sha": "5aa8917545e260445ccead7faa377a5805a19f8b", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -107,7 +107,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coverage.h\"\n #include \"ggc.h\"\n #include \"rtl.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"ipa-prop.h\"\n #include \"except.h\"\n #include \"target.h\""}, {"sha": "a0eea86fc0a545c7d3a20f55f4d8ce30bbc9a828", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -26,7 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"cgraph.h\"\n #include \"ipa-prop.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"tree-inline.h\"\n #include \"ipa-inline.h\""}, {"sha": "55b679d98a2efb2193b94eafbd912d0d9e52b9f3", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -36,7 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"tree.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-inline.h\"\n #include \"tree-pass.h\"\n #include \"langhooks.h\""}, {"sha": "e6f19fdd1bf78573b0bd14ce21f021fbe93b8577", "filename": "gcc/ipa-reference.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fipa-reference.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fipa-reference.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -41,7 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"tree.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-inline.h\"\n #include \"tree-pass.h\"\n #include \"pointer-set.h\""}, {"sha": "322258a66f8960f5a87da6c7394f19d47f73fa56", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -81,7 +81,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"cgraph.h\"\n #include \"ipa-prop.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"flags.h\"\n #include \"diagnostic.h\""}, {"sha": "12ce0ca0292e005847b39243be0ddd9e7d22749f", "filename": "gcc/ipa-utils.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fipa-utils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fipa-utils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-utils.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -23,7 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"tree.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-inline.h\"\n #include \"dumpfile.h\"\n #include \"langhooks.h\""}, {"sha": "d45f42d915328e890cb7c4a6a3fca090ef675ff2", "filename": "gcc/loop-init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Floop-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Floop-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -30,7 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"df.h\"\n #include \"ggc.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n \n \f\n /* Apply FLAGS to the loop state.  */"}, {"sha": "952588dba2fe84662e632379e40cc224cc8c4e39", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -32,7 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hashtab.h\"\n #include \"langhooks.h\"\n #include \"basic-block.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"cgraph.h\"\n #include \"function.h\"\n #include \"ggc.h\""}, {"sha": "d96cdb475485e9928e24950250ce44a2ab081f54", "filename": "gcc/lto-section-in.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Flto-section-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Flto-section-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-section-in.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -30,7 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"input.h\"\n #include \"hashtab.h\"\n #include \"basic-block.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"cgraph.h\"\n #include \"function.h\"\n #include \"ggc.h\""}, {"sha": "59eed71663046527d6548eacf11aabd88e6771b1", "filename": "gcc/lto-section-out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Flto-section-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Flto-section-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-section-out.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -29,7 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"input.h\"\n #include \"hashtab.h\"\n #include \"basic-block.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"cgraph.h\"\n #include \"function.h\"\n #include \"ggc.h\""}, {"sha": "78957565edb35458d6c3daed92000281bf51ad5a", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -32,7 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"input.h\"\n #include \"hashtab.h\"\n #include \"basic-block.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"cgraph.h\"\n #include \"function.h\""}, {"sha": "8f823f2c712fd21752ed77956c9297ee317c0a4f", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -31,7 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"input.h\"\n #include \"hashtab.h\"\n #include \"basic-block.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"cgraph.h\"\n #include \"function.h\""}, {"sha": "cdc75de9bae3b0ff35a3ce9a3d867b76fb0da892", "filename": "gcc/lto-streamer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Flto-streamer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Flto-streamer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -28,7 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"diagnostic-core.h\"\n #include \"bitmap.h\"\n #include \"vec.h\""}, {"sha": "316ec1ff56c13b4386ed003e1e5f7da038056bcb", "filename": "gcc/omp-low.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -32,7 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-inline.h\"\n #include \"langhooks.h\"\n #include \"diagnostic-core.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"flags.h\"\n #include \"function.h\"\n #include \"expr.h\""}, {"sha": "f3f85fd3b94f0e150760852137c9fc0bc85f6880", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -61,7 +61,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coverage.h\"\n #include \"value-prof.h\"\n #include \"tree-inline.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"tree-dump.h\"\n #include \"df.h\""}, {"sha": "3b275d0afdbd23e8b96941a6dd328039a1639052", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -50,7 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n #include \"target.h\"\n #include \"cfgloop.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"ggc.h\"\n #include \"tree-pass.h\"\n #include \"tree-scalar-evolution.h\""}, {"sha": "22f007879dbc0a3fa7c3ef9c81adecb1eb38f6a6", "filename": "gcc/print-tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -28,7 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-iterator.h\"\n #include \"diagnostic.h\"\n #include \"gimple-pretty-print.h\" /* FIXME */\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-dump.h\"\n #include \"dumpfile.h\"\n "}, {"sha": "7e8bb0861e6aa3b320d2c3cd13e3b59beac30111", "filename": "gcc/profile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -61,7 +61,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coverage.h\"\n #include \"value-prof.h\"\n #include \"tree.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"cfgloop.h\"\n #include \"dumpfile.h\"\n "}, {"sha": "d5ffa25bbb935c0ac8deca34c9811a20f7eeb52c", "filename": "gcc/sese.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -24,7 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"hash-table.h\"\n #include \"tree-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"cfgloop.h\"\n #include \"tree-chrec.h\"\n #include \"tree-data-ref.h\""}, {"sha": "03db7b4da1ee9e12abb4f1c18752ea9cfde97123", "filename": "gcc/targhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -68,7 +68,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"recog.h\"\n #include \"intl.h\"\n #include \"opts.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-ssa-alias.h\"\n #include \"insn-codes.h\"\n "}, {"sha": "aa1736c685e5acde1d27557177022bbb722ce0a1", "filename": "gcc/tracer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftracer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftracer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftracer.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -46,7 +46,7 @@\n #include \"params.h\"\n #include \"coverage.h\"\n #include \"tree-pass.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-inline.h\"\n #include \"cfgloop.h\"\n "}, {"sha": "fbc876a53863f33d13e20538c1602035e0c5b863", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -23,7 +23,7 @@\n #include \"hash-table.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"tree-inline.h\"\n #include \"diagnostic-core.h\""}, {"sha": "cf4116e68aee433f5cad8f71b8b52d33281210d5", "filename": "gcc/tree-call-cdce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-call-cdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-call-cdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-call-cdce.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"tree.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"gimple.h\"\n #include \"tree-pass.h\"\n #include \"flags.h\""}, {"sha": "a5d0a95aadf478b30fdb0d41e9bc36165dd458b6", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -30,7 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"ggc.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-dump.h\"\n #include \"tree-pass.h\"\n #include \"diagnostic-core.h\""}, {"sha": "e0acbed8ef2c9302c52e0562e6dfa46b34e0c97a", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -29,7 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"ggc.h\"\n #include \"langhooks.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"except.h\"\n #include \"cfgloop.h\""}, {"sha": "1ec8f53606093b274b4a31fa0769eadfa0f049c2", "filename": "gcc/tree-chrec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-chrec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-chrec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -28,7 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tree-pretty-print.h\"\n #include \"cfgloop.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-chrec.h\"\n #include \"dumpfile.h\"\n #include \"params.h\""}, {"sha": "91798ecdee6f6363ff0e3c4ec64a482ffd09b144", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -23,7 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"flags.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"gimple.h\"\n #include \"tree-iterator.h\"\n #include \"tree-pass.h\""}, {"sha": "71d6d6774c2c7fc9966b1bf73b67983baba9004b", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -77,7 +77,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"cfgloop.h\"\n #include \"tree-data-ref.h\"\n #include \"tree-scalar-evolution.h\""}, {"sha": "bc825be82324034b1b2332f1c23067206b4b21db", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -33,7 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"tree-pretty-print.h\"\n #include \"gimple.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-inline.h\"\n #include \"tree-pass.h\"\n #include \"convert.h\""}, {"sha": "51eab57c71669eacf99b77892b8a6327a3e0e1cf", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -27,7 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"except.h\"\n #include \"pointer-set.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-inline.h\"\n #include \"tree-pass.h\"\n #include \"langhooks.h\""}, {"sha": "23d50389b98e5bc4be74c3f5584e2265cca0a857", "filename": "gcc/tree-emutls.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-emutls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-emutls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-emutls.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -23,7 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"gimple.h\"\n #include \"tree-pass.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"cgraph.h\"\n #include \"langhooks.h\"\n #include \"target.h\""}, {"sha": "24f3f44d72e51a7a7945557fe06acf966ac8ffdc", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -1158,30 +1158,6 @@ gimple_ssa_operands (const struct function *fun)\n   return &fun->gimple_df->ssa_operands;\n }\n \n-/* Given an edge_var_map V, return the PHI arg definition.  */\n-\n-static inline tree\n-redirect_edge_var_map_def (edge_var_map *v)\n-{\n-  return v->def;\n-}\n-\n-/* Given an edge_var_map V, return the PHI result.  */\n-\n-static inline tree\n-redirect_edge_var_map_result (edge_var_map *v)\n-{\n-  return v->result;\n-}\n-\n-/* Given an edge_var_map V, return the PHI arg location.  */\n-\n-static inline source_location\n-redirect_edge_var_map_location (edge_var_map *v)\n-{\n-  return v->locus;\n-}\n-\n \n /* Return an SSA_NAME node for variable VAR defined in statement STMT\n    in function cfun.  */"}, {"sha": "0d5297461a481a4d7d825c63c1a1d1a37cccb2e6", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 40, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -465,47 +465,8 @@ extern bool gimple_seq_may_fallthru (gimple_seq);\n extern bool gimple_stmt_may_fallthru (gimple);\n extern bool gimple_check_call_matching_types (gimple, tree, bool);\n \n-\n-/* In tree-ssa.c  */\n-\n-/* Mapping for redirected edges.  */\n-struct _edge_var_map {\n-  tree result;\t\t\t/* PHI result.  */\n-  tree def;\t\t\t/* PHI arg definition.  */\n-  source_location locus;        /* PHI arg location.  */\n-};\n-typedef struct _edge_var_map edge_var_map;\n-\n-\n-/* A vector of var maps.  */\n-typedef vec<edge_var_map, va_heap, vl_embed> edge_var_map_vector;\n-\n-extern void init_tree_ssa (struct function *);\n-extern void redirect_edge_var_map_add (edge, tree, tree, source_location);\n-extern void redirect_edge_var_map_clear (edge);\n-extern void redirect_edge_var_map_dup (edge, edge);\n-extern edge_var_map_vector *redirect_edge_var_map_vector (edge);\n-extern void redirect_edge_var_map_destroy (void);\n-\n-extern edge ssa_redirect_edge (edge, basic_block);\n-extern void flush_pending_stmts (edge);\n-extern void verify_ssa (bool);\n-extern void delete_tree_ssa (void);\n+/* In tree-ssa-uninit.c  */\n extern bool ssa_undefined_value_p (tree);\n-extern void warn_uninit (enum opt_code, tree, tree, tree, const char *, void *);\n-extern unsigned int warn_uninitialized_vars (bool);\n-extern void execute_update_addresses_taken (void);\n-\n-/* Call-back function for walk_use_def_chains().  At each reaching\n-   definition, a function with this prototype is called.  */\n-typedef bool (*walk_use_def_chains_fn) (tree, gimple, void *);\n-\n-extern void walk_use_def_chains (tree, walk_use_def_chains_fn, void *, bool);\n-\n-void insert_debug_temps_for_defs (gimple_stmt_iterator *);\n-void insert_debug_temp_for_var_def (gimple_stmt_iterator *, tree);\n-void reset_debug_uses (gimple);\n-void release_defs_bitset (bitmap toremove);\n \n /* In tree-into-ssa.c  */\n void update_ssa (unsigned);"}, {"sha": "07650971ab3fe26a9ae6ab96c813f9ad651ad80f", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -88,7 +88,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"cfgloop.h\"\n #include \"tree-chrec.h\"\n #include \"tree-data-ref.h\""}, {"sha": "3ebc19185319a8ce5ebbae55b2bc9524dc0f881c", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -36,9 +36,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cgraph.h\"\n #include \"intl.h\"\n #include \"tree-mudflap.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"function.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pretty-print.h\"\n #include \"except.h\"\n #include \"debug.h\""}, {"sha": "e6e8a3a634d388cb7d5be597e5970f83a54cf467", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -30,7 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"gimple-pretty-print.h\"\n #include \"bitmap.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"gimple.h\"\n #include \"tree-inline.h\"\n #include \"hash-table.h\""}, {"sha": "b740545c83f4f75fd844eecde97ed2990381b3bc", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -44,7 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"cfgloop.h\"\n #include \"tree-chrec.h\"\n #include \"tree-data-ref.h\""}, {"sha": "439d22f312aa5c2601483ef6281bcb5cdd940b37", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -32,7 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-inline.h\"\n #include \"gimple.h\"\n #include \"tree-iterator.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-mudflap.h\"\n #include \"tree-pass.h\"\n #include \"hashtab.h\""}, {"sha": "c4f9b808af56477845124f5a4fbd039a86337e4c", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -28,7 +28,7 @@\n #include \"tree-inline.h\"\n #include \"gimple.h\"\n #include \"tree-iterator.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"cgraph.h\"\n #include \"expr.h\"\t/* FIXME: For STACK_SAVEAREA_MODE and SAVE_NONLOCAL.  */\n #include \"langhooks.h\""}, {"sha": "1961a297429b93f04afbefbcec10a18a86a56b4b", "filename": "gcc/tree-nrv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-nrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-nrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nrv.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"basic-block.h\"\n #include \"tree-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"langhooks.h\"\n #include \"flags.h\"\t/* For \"optimize\" in gate_pass_return_slot."}, {"sha": "44da78eeddc597f13caad9603253e93822b8e780", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"diagnostic-core.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"tree-ssa-propagate.h\"\n "}, {"sha": "0c278d0292c09ae09784bef70fe3fe06229dd015", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -26,7 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"flags.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"function.h\"\n #include \"langhooks.h\"\n #include \"diagnostic-core.h\""}, {"sha": "5ed145db024658febd1a4cf236313861f5a56bcc", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -27,7 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"bitmap.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"dumpfile.h\"\n #include \"diagnostic-core.h\"\n #include \"ssaexpand.h\""}, {"sha": "94843cae52ba49c35a495cbcc977a0d4f610fbc7", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -22,7 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"cfgloop.h\"\n #include \"tree-data-ref.h\"\n #include \"tree-scalar-evolution.h\""}, {"sha": "0bd5085ba99365cf8ad4dbdb266261617c2aca9f", "filename": "gcc/tree-phinodes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-phinodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-phinodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-phinodes.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -24,7 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"ggc.h\"\n #include \"basic-block.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"diagnostic-core.h\"\n #include \"gimple.h\"\n "}, {"sha": "2f21bb7404aa4bdd833850c9e60ad7ef88ff8f5d", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -191,7 +191,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"tm_p.h\"\n #include \"cfgloop.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"ggc.h\"\n #include \"tree-data-ref.h\"\n #include \"tree-scalar-evolution.h\""}, {"sha": "4c0481669ef4eb026e33e7fb39121e9d0635c161", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"tree-pretty-print.h\"\n #include \"hashtab.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"langhooks.h\"\n #include \"tree-iterator.h\"\n #include \"tree-chrec.h\""}, {"sha": "a2c4209646f10da3f832288df7cb3be23cd1a105", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -34,7 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic-core.h\"\n #include \"coverage.h\"\n #include \"tree.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"value-prof.h\"\n #include \"cgraph.h\""}, {"sha": "a55447d2c96eb9a936befe3130e79de9fcbda377", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -258,7 +258,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"hash-table.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"cfgloop.h\"\n #include \"tree-chrec.h\"\n #include \"tree-scalar-evolution.h\""}, {"sha": "58c7565dcf6b7017a3b5b12b6489dc18243914f2", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -80,7 +80,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"gimple.h\"\n #include \"cgraph.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"ipa-prop.h\"\n #include \"statistics.h\""}, {"sha": "1ea6d2d050ba2e6af12c0276c3405f352d048925", "filename": "gcc/tree-ssa-address.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-address.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -28,7 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"tree-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"dumpfile.h\"\n #include \"flags.h\"\n #include \"tree-inline.h\""}, {"sha": "9a6d5f448fb17dd00b92f722fccdfa362cc95c13", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -34,7 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pretty-print.h\"\n #include \"dumpfile.h\"\n #include \"gimple.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-inline.h\"\n #include \"params.h\"\n #include \"vec.h\""}, {"sha": "ea1269c53cdeb0b2e4532c72fc475976cfd24d1d", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -119,7 +119,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"function.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"tree-ssa-propagate.h\"\n #include \"value-prof.h\""}, {"sha": "d86e0b86560bdda7492b6c12d7ad9be46fdf82de", "filename": "gcc/tree-ssa-coalesce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-coalesce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-coalesce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-coalesce.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -27,7 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pretty-print.h\"\n #include \"bitmap.h\"\n #include \"dumpfile.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"hash-table.h\"\n #include \"tree-ssa-live.h\"\n #include \"diagnostic-core.h\""}, {"sha": "319791774440a08af9f295cb888c3bc038cdb62e", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -27,7 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"function.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"tree-ssa-propagate.h\"\n #include \"langhooks.h\""}, {"sha": "f6e4b4515417bb7c646b8de318675e075a3a4dba", "filename": "gcc/tree-ssa-copyrename.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-copyrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-copyrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copyrename.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -29,7 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"tree-pretty-print.h\"\n #include \"bitmap.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"gimple.h\"\n #include \"tree-inline.h\"\n #include \"hashtab.h\""}, {"sha": "8e8f37ce8c8d84852961f3d6826c9e73c39a4a81", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -50,7 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"gimple-pretty-print.h\"\n #include \"basic-block.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"gimple.h\"\n #include \"tree-pass.h\"\n #include \"flags.h\""}, {"sha": "bf75135f75fb06c1b3b930f6d01c044a582f605f", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -30,7 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"function.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"domwalk.h\"\n #include \"tree-pass.h\"\n #include \"tree-ssa-propagate.h\""}, {"sha": "ee4298ec9ddb6d0028cf7b41e4bc74a4a0f692ba", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -26,7 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"domwalk.h\"\n #include \"flags.h\""}, {"sha": "977aebdff5157d5ff98d45f542159a2e22bc176f", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"langhooks.h\"\n #include \"flags.h\""}, {"sha": "c45d42a891dd2d196a55f91fb41bea6e944f39d0", "filename": "gcc/tree-ssa-ifcombine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-ifcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-ifcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ifcombine.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"basic-block.h\"\n #include \"tree-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n \n /* This pass combines COND_EXPRs to simplify control flow.  It"}, {"sha": "c21b2e8744130f6dd240b76b37e0c358ee9a9d33", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -26,7 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"gimple-pretty-print.h\"\n #include \"bitmap.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"timevar.h\"\n #include \"dumpfile.h\"\n #include \"tree-ssa-live.h\""}, {"sha": "0e87770b5b6b62bce058237e568b30c5754c066d", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -24,7 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"cfgloop.h\"\n #include \"tree-inline.h\""}, {"sha": "20d805ac40ab264261ccac4f9eae889ccbdfdf79", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"cfgloop.h\"\n #include \"domwalk.h\"\n #include \"params.h\""}, {"sha": "d5249baeab0f090c0a98558e17483a317b32f13b", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -40,7 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"cfgloop.h\"\n #include \"tree-pass.h\"\n #include \"tree-chrec.h\""}, {"sha": "5f80ce007c8d63bafa79775cd219d1027bcccd15", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -69,7 +69,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"cfgloop.h\"\n #include \"tree-pass.h\"\n #include \"ggc.h\""}, {"sha": "e44458e4a0fe15628c9f7ad04584ac3f0798fe8e", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -24,7 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"dumpfile.h\"\n #include \"gimple-pretty-print.h\"\n #include \"cfgloop.h\""}, {"sha": "adbfe8e8c21a86ec8e1f5208769dd6bf0b39fc0b", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -26,7 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"intl.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"dumpfile.h\"\n #include \"cfgloop.h\"\n #include \"ggc.h\""}, {"sha": "bf313fe9152f470b48dae44e0d02cf278d025a7b", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"tree-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"cfgloop.h\"\n #include \"tree-pass.h\"\n #include \"insn-config.h\""}, {"sha": "6ce06c1326cc8a903ea4c5bcddb6d542c73767b0", "filename": "gcc/tree-ssa-loop-unswitch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-loop-unswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-loop-unswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-unswitch.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -24,7 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"cfgloop.h\"\n #include \"params.h\"\n #include \"tree-pass.h\""}, {"sha": "f97a94643b33e8a21e02871c1cd57cdd0dae358f", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -24,7 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"cfgloop.h\"\n #include \"flags.h\""}, {"sha": "54445beee7c5b60dbd4e7ba2b32f37affd0ab2ce", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -90,7 +90,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"flags.h\"\n #include \"tree.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"alloc-pool.h\"\n #include \"basic-block.h\""}, {"sha": "7e02bd8bfb5e06b88d117d67e7d34f1c63525f83", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"function.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-inline.h\"\n #include \"timevar.h\"\n #include \"dumpfile.h\""}, {"sha": "ec13ed9c0fd6254f3252f7c1f749ea732ac31678", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -27,7 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"langhooks.h\"\n #include \"pointer-set.h\""}, {"sha": "66b220fadd12cac986735b59fb17c0199cd1f54e", "filename": "gcc/tree-ssa-phiprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-phiprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-phiprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiprop.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -26,7 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"langhooks.h\"\n #include \"flags.h\""}, {"sha": "1a9f0cce08ce10d75b595fd4e4fdc16522bb83a7", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -27,7 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"tree-inline.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"gimple.h\"\n #include \"hash-table.h\"\n #include \"tree-iterator.h\""}, {"sha": "e5dfabcb41ccfa920347c1be745a4dcaeca9e4be", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -29,7 +29,7 @@\n #include \"function.h\"\n #include \"gimple-pretty-print.h\"\n #include \"dumpfile.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-ssa-propagate.h\"\n #include \"langhooks.h\"\n #include \"vec.h\""}, {"sha": "6dffe7e9a8186ff7cbaf5a33f3d8858a3288f325", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -27,7 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"tree-inline.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"gimple.h\"\n #include \"tree-iterator.h\"\n #include \"tree-pass.h\""}, {"sha": "bd2feb46ef2cd22c0d3d75b757e9b8e6822092a6", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -26,7 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"tree-inline.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"gimple.h\"\n #include \"dumpfile.h\"\n #include \"hash-table.h\""}, {"sha": "cc9cff886f74b49cdf0087d069e01e6e4df2db47", "filename": "gcc/tree-ssa-sink.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-sink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-sink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sink.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -26,7 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"tree-inline.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"gimple.h\"\n #include \"hashtab.h\"\n #include \"tree-iterator.h\""}, {"sha": "8d6126764e4a76cd08a54d7059dc27daf3eab1b7", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -22,7 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"hash-table.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"domwalk.h\"\n #include \"alloc-pool.h\""}, {"sha": "112fba636fb0c02a2f7492d9920d54f894ff8126", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -28,7 +28,7 @@\n #include \"flags.h\"\n #include \"basic-block.h\"\n #include \"tree.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-inline.h\"\n #include \"diagnostic-core.h\"\n #include \"gimple.h\""}, {"sha": "4998b7e616cee046d502f36212de957f942c6de7", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -194,7 +194,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"flags.h\"\n #include \"function.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"bitmap.h\"\n #include \"tree-ssa-alias.h\"\n #include \"params.h\""}, {"sha": "ee18cd8f16484beb7a8b1c0ea5ae1ea23e32ce8c", "filename": "gcc/tree-ssa-ter.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-ter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-ter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ter.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -26,7 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"gimple-pretty-print.h\"\n #include \"bitmap.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"dumpfile.h\"\n #include \"tree-ssa-live.h\"\n #include \"flags.h\""}, {"sha": "42474f16bb82c34511a7d2e716e7e10ac63c1938", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -30,7 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"timevar.h\"\n #include \"dumpfile.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-ssa-propagate.h\"\n #include \"langhooks.h\"\n #include \"params.h\""}, {"sha": "d75526643b0801915d5322c74eceede303740abc", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -26,7 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"function.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"dumpfile.h\"\n #include \"cfgloop.h\"\n #include \"hash-table.h\""}, {"sha": "8439df164dd0afc2d897d4b4c5cf018eb2dfb56e", "filename": "gcc/tree-ssa-uncprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-uncprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-uncprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uncprop.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -26,7 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"function.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"domwalk.h\"\n #include \"tree-pass.h\"\n #include \"tree-ssa-propagate.h\""}, {"sha": "ae30e244a1ca4319fb892c59ee5b17b2db4e1abd", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -30,7 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-pretty-print.h\"\n #include \"bitmap.h\"\n #include \"pointer-set.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"gimple.h\"\n #include \"tree-inline.h\"\n #include \"hashtab.h\""}, {"sha": "48c997d739066e8b5ab7257117e977723cbbd02d", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 1, "deletions": 255, "changes": 256, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -32,7 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-pretty-print.h\"\n #include \"bitmap.h\"\n #include \"pointer-set.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"gimple.h\"\n #include \"tree-inline.h\"\n #include \"hashtab.h\"\n@@ -1149,260 +1149,6 @@ delete_tree_ssa (void)\n   redirect_edge_var_map_destroy ();\n }\n \n-/* Return true if the conversion from INNER_TYPE to OUTER_TYPE is a\n-   useless type conversion, otherwise return false.\n-\n-   This function implicitly defines the middle-end type system.  With\n-   the notion of 'a < b' meaning that useless_type_conversion_p (a, b)\n-   holds and 'a > b' meaning that useless_type_conversion_p (b, a) holds,\n-   the following invariants shall be fulfilled:\n-\n-     1) useless_type_conversion_p is transitive.\n-\tIf a < b and b < c then a < c.\n-\n-     2) useless_type_conversion_p is not symmetric.\n-\tFrom a < b does not follow a > b.\n-\n-     3) Types define the available set of operations applicable to values.\n-\tA type conversion is useless if the operations for the target type\n-\tis a subset of the operations for the source type.  For example\n-\tcasts to void* are useless, casts from void* are not (void* can't\n-\tbe dereferenced or offsetted, but copied, hence its set of operations\n-\tis a strict subset of that of all other data pointer types).  Casts\n-\tto const T* are useless (can't be written to), casts from const T*\n-\tto T* are not.  */\n-\n-bool\n-useless_type_conversion_p (tree outer_type, tree inner_type)\n-{\n-  /* Do the following before stripping toplevel qualifiers.  */\n-  if (POINTER_TYPE_P (inner_type)\n-      && POINTER_TYPE_P (outer_type))\n-    {\n-      /* Do not lose casts between pointers to different address spaces.  */\n-      if (TYPE_ADDR_SPACE (TREE_TYPE (outer_type))\n-\t  != TYPE_ADDR_SPACE (TREE_TYPE (inner_type)))\n-\treturn false;\n-    }\n-\n-  /* From now on qualifiers on value types do not matter.  */\n-  inner_type = TYPE_MAIN_VARIANT (inner_type);\n-  outer_type = TYPE_MAIN_VARIANT (outer_type);\n-\n-  if (inner_type == outer_type)\n-    return true;\n-\n-  /* If we know the canonical types, compare them.  */\n-  if (TYPE_CANONICAL (inner_type)\n-      && TYPE_CANONICAL (inner_type) == TYPE_CANONICAL (outer_type))\n-    return true;\n-\n-  /* Changes in machine mode are never useless conversions unless we\n-     deal with aggregate types in which case we defer to later checks.  */\n-  if (TYPE_MODE (inner_type) != TYPE_MODE (outer_type)\n-      && !AGGREGATE_TYPE_P (inner_type))\n-    return false;\n-\n-  /* If both the inner and outer types are integral types, then the\n-     conversion is not necessary if they have the same mode and\n-     signedness and precision, and both or neither are boolean.  */\n-  if (INTEGRAL_TYPE_P (inner_type)\n-      && INTEGRAL_TYPE_P (outer_type))\n-    {\n-      /* Preserve changes in signedness or precision.  */\n-      if (TYPE_UNSIGNED (inner_type) != TYPE_UNSIGNED (outer_type)\n-\t  || TYPE_PRECISION (inner_type) != TYPE_PRECISION (outer_type))\n-\treturn false;\n-\n-      /* Preserve conversions to/from BOOLEAN_TYPE if types are not\n-\t of precision one.  */\n-      if (((TREE_CODE (inner_type) == BOOLEAN_TYPE)\n-\t   != (TREE_CODE (outer_type) == BOOLEAN_TYPE))\n-\t  && TYPE_PRECISION (outer_type) != 1)\n-\treturn false;\n-\n-      /* We don't need to preserve changes in the types minimum or\n-\t maximum value in general as these do not generate code\n-\t unless the types precisions are different.  */\n-      return true;\n-    }\n-\n-  /* Scalar floating point types with the same mode are compatible.  */\n-  else if (SCALAR_FLOAT_TYPE_P (inner_type)\n-\t   && SCALAR_FLOAT_TYPE_P (outer_type))\n-    return true;\n-\n-  /* Fixed point types with the same mode are compatible.  */\n-  else if (FIXED_POINT_TYPE_P (inner_type)\n-\t   && FIXED_POINT_TYPE_P (outer_type))\n-    return true;\n-\n-  /* We need to take special care recursing to pointed-to types.  */\n-  else if (POINTER_TYPE_P (inner_type)\n-\t   && POINTER_TYPE_P (outer_type))\n-    {\n-      /* Do not lose casts to function pointer types.  */\n-      if ((TREE_CODE (TREE_TYPE (outer_type)) == FUNCTION_TYPE\n-\t   || TREE_CODE (TREE_TYPE (outer_type)) == METHOD_TYPE)\n-\t  && !(TREE_CODE (TREE_TYPE (inner_type)) == FUNCTION_TYPE\n-\t       || TREE_CODE (TREE_TYPE (inner_type)) == METHOD_TYPE))\n-\treturn false;\n-\n-      /* We do not care for const qualification of the pointed-to types\n-\t as const qualification has no semantic value to the middle-end.  */\n-\n-      /* Otherwise pointers/references are equivalent.  */\n-      return true;\n-    }\n-\n-  /* Recurse for complex types.  */\n-  else if (TREE_CODE (inner_type) == COMPLEX_TYPE\n-\t   && TREE_CODE (outer_type) == COMPLEX_TYPE)\n-    return useless_type_conversion_p (TREE_TYPE (outer_type),\n-\t\t\t\t      TREE_TYPE (inner_type));\n-\n-  /* Recurse for vector types with the same number of subparts.  */\n-  else if (TREE_CODE (inner_type) == VECTOR_TYPE\n-\t   && TREE_CODE (outer_type) == VECTOR_TYPE\n-\t   && TYPE_PRECISION (inner_type) == TYPE_PRECISION (outer_type))\n-    return useless_type_conversion_p (TREE_TYPE (outer_type),\n-\t\t\t\t      TREE_TYPE (inner_type));\n-\n-  else if (TREE_CODE (inner_type) == ARRAY_TYPE\n-\t   && TREE_CODE (outer_type) == ARRAY_TYPE)\n-    {\n-      /* Preserve string attributes.  */\n-      if (TYPE_STRING_FLAG (inner_type) != TYPE_STRING_FLAG (outer_type))\n-\treturn false;\n-\n-      /* Conversions from array types with unknown extent to\n-\t array types with known extent are not useless.  */\n-      if (!TYPE_DOMAIN (inner_type)\n-\t  && TYPE_DOMAIN (outer_type))\n-\treturn false;\n-\n-      /* Nor are conversions from array types with non-constant size to\n-         array types with constant size or to different size.  */\n-      if (TYPE_SIZE (outer_type)\n-\t  && TREE_CODE (TYPE_SIZE (outer_type)) == INTEGER_CST\n-\t  && (!TYPE_SIZE (inner_type)\n-\t      || TREE_CODE (TYPE_SIZE (inner_type)) != INTEGER_CST\n-\t      || !tree_int_cst_equal (TYPE_SIZE (outer_type),\n-\t\t\t\t      TYPE_SIZE (inner_type))))\n-\treturn false;\n-\n-      /* Check conversions between arrays with partially known extents.\n-\t If the array min/max values are constant they have to match.\n-\t Otherwise allow conversions to unknown and variable extents.\n-\t In particular this declares conversions that may change the\n-\t mode to BLKmode as useless.  */\n-      if (TYPE_DOMAIN (inner_type)\n-\t  && TYPE_DOMAIN (outer_type)\n-\t  && TYPE_DOMAIN (inner_type) != TYPE_DOMAIN (outer_type))\n-\t{\n-\t  tree inner_min = TYPE_MIN_VALUE (TYPE_DOMAIN (inner_type));\n-\t  tree outer_min = TYPE_MIN_VALUE (TYPE_DOMAIN (outer_type));\n-\t  tree inner_max = TYPE_MAX_VALUE (TYPE_DOMAIN (inner_type));\n-\t  tree outer_max = TYPE_MAX_VALUE (TYPE_DOMAIN (outer_type));\n-\n-\t  /* After gimplification a variable min/max value carries no\n-\t     additional information compared to a NULL value.  All that\n-\t     matters has been lowered to be part of the IL.  */\n-\t  if (inner_min && TREE_CODE (inner_min) != INTEGER_CST)\n-\t    inner_min = NULL_TREE;\n-\t  if (outer_min && TREE_CODE (outer_min) != INTEGER_CST)\n-\t    outer_min = NULL_TREE;\n-\t  if (inner_max && TREE_CODE (inner_max) != INTEGER_CST)\n-\t    inner_max = NULL_TREE;\n-\t  if (outer_max && TREE_CODE (outer_max) != INTEGER_CST)\n-\t    outer_max = NULL_TREE;\n-\n-\t  /* Conversions NULL / variable <- cst are useless, but not\n-\t     the other way around.  */\n-\t  if (outer_min\n-\t      && (!inner_min\n-\t\t  || !tree_int_cst_equal (inner_min, outer_min)))\n-\t    return false;\n-\t  if (outer_max\n-\t      && (!inner_max\n-\t\t  || !tree_int_cst_equal (inner_max, outer_max)))\n-\t    return false;\n-\t}\n-\n-      /* Recurse on the element check.  */\n-      return useless_type_conversion_p (TREE_TYPE (outer_type),\n-\t\t\t\t\tTREE_TYPE (inner_type));\n-    }\n-\n-  else if ((TREE_CODE (inner_type) == FUNCTION_TYPE\n-\t    || TREE_CODE (inner_type) == METHOD_TYPE)\n-\t   && TREE_CODE (inner_type) == TREE_CODE (outer_type))\n-    {\n-      tree outer_parm, inner_parm;\n-\n-      /* If the return types are not compatible bail out.  */\n-      if (!useless_type_conversion_p (TREE_TYPE (outer_type),\n-\t\t\t\t      TREE_TYPE (inner_type)))\n-\treturn false;\n-\n-      /* Method types should belong to a compatible base class.  */\n-      if (TREE_CODE (inner_type) == METHOD_TYPE\n-\t  && !useless_type_conversion_p (TYPE_METHOD_BASETYPE (outer_type),\n-\t\t\t\t\t TYPE_METHOD_BASETYPE (inner_type)))\n-\treturn false;\n-\n-      /* A conversion to an unprototyped argument list is ok.  */\n-      if (!prototype_p (outer_type))\n-\treturn true;\n-\n-      /* If the unqualified argument types are compatible the conversion\n-\t is useless.  */\n-      if (TYPE_ARG_TYPES (outer_type) == TYPE_ARG_TYPES (inner_type))\n-\treturn true;\n-\n-      for (outer_parm = TYPE_ARG_TYPES (outer_type),\n-\t   inner_parm = TYPE_ARG_TYPES (inner_type);\n-\t   outer_parm && inner_parm;\n-\t   outer_parm = TREE_CHAIN (outer_parm),\n-\t   inner_parm = TREE_CHAIN (inner_parm))\n-\tif (!useless_type_conversion_p\n-\t       (TYPE_MAIN_VARIANT (TREE_VALUE (outer_parm)),\n-\t\tTYPE_MAIN_VARIANT (TREE_VALUE (inner_parm))))\n-\t  return false;\n-\n-      /* If there is a mismatch in the number of arguments the functions\n-\t are not compatible.  */\n-      if (outer_parm || inner_parm)\n-\treturn false;\n-\n-      /* Defer to the target if necessary.  */\n-      if (TYPE_ATTRIBUTES (inner_type) || TYPE_ATTRIBUTES (outer_type))\n-\treturn comp_type_attributes (outer_type, inner_type) != 0;\n-\n-      return true;\n-    }\n-\n-  /* For aggregates we rely on TYPE_CANONICAL exclusively and require\n-     explicit conversions for types involving to be structurally\n-     compared types.  */\n-  else if (AGGREGATE_TYPE_P (inner_type)\n-\t   && TREE_CODE (inner_type) == TREE_CODE (outer_type))\n-    return false;\n-\n-  return false;\n-}\n-\n-/* Return true if a conversion from either type of TYPE1 and TYPE2\n-   to the other is not required.  Otherwise return false.  */\n-\n-bool\n-types_compatible_p (tree type1, tree type2)\n-{\n-  return (type1 == type2\n-\t  || (useless_type_conversion_p (type1, type2)\n-\t      && useless_type_conversion_p (type2, type1)));\n-}\n-\n /* Return true if EXPR is a useless type conversion, otherwise return\n    false.  */\n "}, {"sha": "c6e458aaca8b53f37369bb063bb98d9a3d3ce0b1", "filename": "gcc/tree-ssa.h", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.h?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -0,0 +1,89 @@\n+/* Header file for any pass which requires SSA routines.\n+   Copyright (C) 2013 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_TREE_SSA_H\n+#define GCC_TREE_SSA_H\n+\n+#include \"tree-flow.h\"\n+\n+/* Mapping for redirected edges.  */\n+struct _edge_var_map {\n+  tree result;\t\t\t/* PHI result.  */\n+  tree def;\t\t\t/* PHI arg definition.  */\n+  source_location locus;        /* PHI arg location.  */\n+};\n+typedef struct _edge_var_map edge_var_map;\n+\n+/* A vector of var maps.  */\n+typedef vec<edge_var_map, va_heap, vl_embed> edge_var_map_vector;\n+\n+\n+extern void redirect_edge_var_map_add (edge, tree, tree, source_location);\n+extern void redirect_edge_var_map_clear (edge);\n+extern void redirect_edge_var_map_dup (edge, edge);\n+extern edge_var_map_vector *redirect_edge_var_map_vector (edge);\n+extern void redirect_edge_var_map_destroy (void);\n+extern edge ssa_redirect_edge (edge, basic_block);\n+extern void flush_pending_stmts (edge);\n+extern tree target_for_debug_bind (tree);\n+extern void insert_debug_temp_for_var_def (gimple_stmt_iterator *, tree);\n+extern void insert_debug_temps_for_defs (gimple_stmt_iterator *);\n+extern void reset_debug_uses (gimple);\n+extern void release_defs_bitset (bitmap toremove);\n+extern void verify_ssa (bool);\n+extern void init_tree_ssa (struct function *);\n+extern void delete_tree_ssa (void);\n+extern bool tree_ssa_useless_type_conversion (tree);\n+extern tree tree_ssa_strip_useless_type_conversions (tree);\n+\n+/* Call-back function for walk_use_def_chains().  At each reaching\n+   definition, a function with this prototype is called.  */\n+typedef bool (*walk_use_def_chains_fn) (tree, gimple, void *);\n+extern void walk_use_def_chains (tree, walk_use_def_chains_fn, void *, bool);\n+\n+extern void warn_uninit (enum opt_code, tree, tree, tree, const char *, void *);\n+extern unsigned int warn_uninitialized_vars (bool);\n+extern void execute_update_addresses_taken (void);\n+\n+/* Given an edge_var_map V, return the PHI arg definition.  */\n+\n+static inline tree\n+redirect_edge_var_map_def (edge_var_map *v)\n+{\n+  return v->def;\n+}\n+\n+/* Given an edge_var_map V, return the PHI result.  */\n+\n+static inline tree\n+redirect_edge_var_map_result (edge_var_map *v)\n+{\n+  return v->result;\n+}\n+\n+/* Given an edge_var_map V, return the PHI arg location.  */\n+\n+static inline source_location\n+redirect_edge_var_map_location (edge_var_map *v)\n+{\n+  return v->locus;\n+}\n+\n+\n+#endif /* GCC_TREE_SSA_H */"}, {"sha": "efc08e98bbacb9957ae446d1ef38b0c5648cd5b2", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -22,7 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"tree.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n \n /* Rewriting a function into SSA form can create a huge number of SSA_NAMEs,"}, {"sha": "922835366b556ea09e7fb2318d3152dbd63f5191", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -27,7 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"gimple-pretty-print.h\"\n #include \"target.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"tree-stdarg.h\"\n "}, {"sha": "c36d4f6368cfabd740414cd1a5202e18165e2881", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -24,7 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"diagnostic.h\"\n #include \"tree.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-streamer.h\"\n #include \"data-streamer.h\"\n #include \"streamer-hooks.h\""}, {"sha": "2dd13fc9a547635420cdee16c3f0d143f6cbae4b", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -31,7 +31,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"flags.h\"\n #include \"tree.h\"\n #include \"basic-block.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-flow-inline.h\"\n #include \"tree-ssa-operands.h\"\n #include \"tree-pass.h\""}, {"sha": "c91c9da022246d1acefc4e6d15f7c61e38b22721", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"function.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"gimple-pretty-print.h\"\n #include \"except.h\"\n #include \"tree-pass.h\""}, {"sha": "1b29c79a241c6ee7749f616116993c0124326af8", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -30,7 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"dumpfile.h\"\n #include \"cfgloop.h\"\n #include \"tree-chrec.h\""}, {"sha": "4f67ca02467a43b772351dc60b2cd7f9cc807be4", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -23,7 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"tm.h\"\n #include \"langhooks.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"gimple.h\"\n #include \"tree-iterator.h\"\n #include \"tree-pass.h\""}, {"sha": "fac42b121139dde372c76cd85a036b9dda89c672", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -28,7 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"cfgloop.h\"\n #include \"diagnostic-core.h\""}, {"sha": "1290f1550b06f86468259b32f70ca7547c4fc39c", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -28,7 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"cfgloop.h\"\n #include \"expr.h\""}, {"sha": "e078f2dd13230ed46272b2bb2430c55be8697ad1", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -27,7 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"cfgloop.h\"\n #include \"expr.h\"\n #include \"optabs.h\""}, {"sha": "cf41a030f2a6845d41c0a20f21a384e4ac80fca5", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -29,7 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"cfgloop.h\"\n #include \"expr.h\""}, {"sha": "e03ccda1dc8790210e772eaf94842b2d357fc223", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -29,7 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"cfgloop.h\"\n #include \"expr.h\"\n #include \"recog.h\"\t\t/* FIXME: for insn_data */"}, {"sha": "205d1b27a767eb8f291f8f5710e895c31348fc19", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -62,7 +62,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ggc.h\"\n #include \"tree.h\"\n #include \"tree-pretty-print.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"cfgloop.h\"\n #include \"tree-vectorizer.h\"\n #include \"tree-pass.h\""}, {"sha": "ae27dc48a2faf76724a8149d78b07587b7840518", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -26,7 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"tree.h\"\n #include \"basic-block.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"tree-dump.h\"\n #include \"gimple-pretty-print.h\""}, {"sha": "6593cf820185e2aead3cfac14e17ebef2411be88", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -47,7 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-inline.h\"\n #include \"tree-iterator.h\"\n #include \"basic-block.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"params.h\"\n #include \"pointer-set.h\"\n #include \"tree-pass.h\""}, {"sha": "a263a2cf46ae0ec9a4de38fd2512d07d9a18b61e", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -4741,10 +4741,6 @@ extern unsigned int tree_decl_map_hash (const void *);\n #define tree_vec_map_hash tree_decl_map_hash\n #define tree_vec_map_marked_p tree_map_base_marked_p\n \n-/* In tree-ssa.c */\n-\n-tree target_for_debug_bind (tree);\n-\n /* In tree-ssa-address.c.  */\n extern tree tree_mem_ref_addr (tree, tree);\n extern void copy_ref_info (tree, tree);"}, {"sha": "1c642a6642bc00e6af81eabafb018c37987dbe29", "filename": "gcc/tsan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Ftsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftsan.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -28,7 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple.h\"\n #include \"function.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"tree-iterator.h\"\n #include \"langhooks.h\""}, {"sha": "37b68901b3e821a3e50f537c8ca8bd5f328291e3", "filename": "gcc/value-prof.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -32,7 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"optabs.h\"\n #include \"regs.h\"\n #include \"ggc.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-flow-inline.h\"\n #include \"diagnostic.h\"\n #include \"gimple-pretty-print.h\""}, {"sha": "5d39c500a5192e03c77a18f4a2bde3a4ff6735ef", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -104,7 +104,7 @@\n #include \"regs.h\"\n #include \"expr.h\"\n #include \"tree-pass.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"cselib.h\"\n #include \"target.h\"\n #include \"params.h\""}, {"sha": "d5324adb52b41c6a4d0201cd7d934f2f9f25186f", "filename": "gcc/varpool.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fvarpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fvarpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarpool.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -33,7 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"output.h\"\n #include \"gimple.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"flags.h\"\n \n /* List of hooks triggered on varpool_node events.  */"}, {"sha": "1b5cc0c6e983fdd60ee3e67163c362123642af6c", "filename": "gcc/vtable-verify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fvtable-verify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a300452804d7f1d6f71d9cba31c5476ab2f2766/gcc%2Fvtable-verify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvtable-verify.c?ref=7a300452804d7f1d6f71d9cba31c5476ab2f2766", "patch": "@@ -138,7 +138,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tree.h\"\n #include \"basic-block.h\"\n-#include \"tree-flow.h\"\n+#include \"tree-ssa.h\"\n #include \"tree-pass.h\"\n #include \"cfgloop.h\"\n "}]}