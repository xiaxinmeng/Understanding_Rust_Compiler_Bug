{"sha": "1d19c9cd3dd99ba8885c0fc93223918399f73939", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQxOWM5Y2QzZGQ5OWJhODg4NWMwZmM5MzIyMzkxODM5OWY3MzkzOQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-06-23T20:43:27Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-06-25T15:02:46Z"}, "message": "d: Merge upstream dmd 90450f3ef.\n\nFixes a regression caused by an incomplete backport of converting the\nExpression semantic pass to a Visitor.\n\nReviewed-on: https://github.com/dlang/dmd/pull/11314\n\ngcc/d/ChangeLog:\n\n\tPR d/95250\n\t* dmd/MERGE: Merge upstream dmd 90450f3ef.\n\ngcc/testsuite/ChangeLog:\n\n\tPR d/95250\n\t* gdc.dg/pr95250.d: New test.", "tree": {"sha": "78211460720b0f1dfee3e55e33fe8c053201cdc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78211460720b0f1dfee3e55e33fe8c053201cdc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d19c9cd3dd99ba8885c0fc93223918399f73939", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d19c9cd3dd99ba8885c0fc93223918399f73939", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d19c9cd3dd99ba8885c0fc93223918399f73939", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d19c9cd3dd99ba8885c0fc93223918399f73939/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e52f5d0786fce4ef6ae5937ab33e871c59da3c99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e52f5d0786fce4ef6ae5937ab33e871c59da3c99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e52f5d0786fce4ef6ae5937ab33e871c59da3c99"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "0d50149a750e96545bb5f6835622962d6cf8f016", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d19c9cd3dd99ba8885c0fc93223918399f73939/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d19c9cd3dd99ba8885c0fc93223918399f73939/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=1d19c9cd3dd99ba8885c0fc93223918399f73939", "patch": "@@ -1,4 +1,4 @@\n-5fc1806cd7dd281e944022df2e11ef6b04ee4339\n+90450f3ef6ab8551b5f383d8c6190f80034dbf93\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "ac6b5bc81f330247b262c41e13563c7caaddba22", "filename": "gcc/d/dmd/expressionsem.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d19c9cd3dd99ba8885c0fc93223918399f73939/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d19c9cd3dd99ba8885c0fc93223918399f73939/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpressionsem.c?ref=1d19c9cd3dd99ba8885c0fc93223918399f73939", "patch": "@@ -6883,6 +6883,7 @@ class ExpressionSemanticVisitor : public Visitor\n         if (Expression *ex = binSemanticProp(exp, sc))\n         {\n             result = ex;\n+            return;\n         }\n         Expression *e = exp->op_overload(sc);\n         if (e)"}, {"sha": "c8810c419685d22c6679eba0e836462b7fcfa612", "filename": "gcc/testsuite/gdc.dg/pr95250.d", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d19c9cd3dd99ba8885c0fc93223918399f73939/gcc%2Ftestsuite%2Fgdc.dg%2Fpr95250.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d19c9cd3dd99ba8885c0fc93223918399f73939/gcc%2Ftestsuite%2Fgdc.dg%2Fpr95250.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr95250.d?ref=1d19c9cd3dd99ba8885c0fc93223918399f73939", "patch": "@@ -0,0 +1,18 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95250\n+// { dg-do compile }\n+\n+template Unsigned(T)\n+{\n+    static assert(false, \"Type \" ~ T.stringof ~\n+                  \" does not have an Unsigned counterpart\");\n+}\n+\n+\n+void* f95250(T)(T a, T b)\n+{\n+        alias UnsignedVoid = Unsigned!(T);\n+        return cast(T)(cast(T)(cast(UnsignedVoid)(a-b) / 2));\n+}\n+\n+static assert(is(typeof(f!(void*)(null, null)) == void*));\n+// { dg-error \"static assert  \\(.*\\) is false\" \"\" { target *-*-* } .-1 }"}]}