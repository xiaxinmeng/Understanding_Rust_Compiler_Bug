{"sha": "1adf11822bd48f4d65156b7642514630c08c4d00", "node_id": "C_kwDOANBUbNoAKDFhZGYxMTgyMmJkNDhmNGQ2NTE1NmI3NjQyNTE0NjMwYzA4YzRkMDA", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-20T10:24:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-24T06:20:11Z"}, "message": "tree-optimization/100221 - improve DSE a bit\n\nWhen facing multiple PHI defs and one feeding the other we can\npostpone processing uses of one and thus can proceed.\n\n2022-05-20  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/100221\n\t* tree-ssa-dse.cc (contains_phi_arg): New function.\n\t(dse_classify_store): Postpone PHI defs that feed another PHI in defs.\n\n\t* gcc.dg/tree-ssa/ssa-dse-44.c: New testcase.\n\t* gcc.dg/tree-ssa/ssa-dse-45.c: Likewise.", "tree": {"sha": "aa6609c0216133df578f8a3d5b510dd6c0e1192e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa6609c0216133df578f8a3d5b510dd6c0e1192e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1adf11822bd48f4d65156b7642514630c08c4d00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1adf11822bd48f4d65156b7642514630c08c4d00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1adf11822bd48f4d65156b7642514630c08c4d00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1adf11822bd48f4d65156b7642514630c08c4d00/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d918faea1217596877a35c4946500399731fbbd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d918faea1217596877a35c4946500399731fbbd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d918faea1217596877a35c4946500399731fbbd3"}], "stats": {"total": 89, "additions": 84, "deletions": 5}, "files": [{"sha": "aaec41d7bdf39fc24a08ce556eb4102bae7156f5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dse-44.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1adf11822bd48f4d65156b7642514630c08c4d00/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-44.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1adf11822bd48f4d65156b7642514630c08c4d00/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-44.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-44.c?ref=1adf11822bd48f4d65156b7642514630c08c4d00", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do link } */\n+/* { dg-options \"-O -fdump-tree-dse1-details\" } */\n+\n+extern void foo(void);\n+int a, b;\n+static int c;\n+int main()\n+{\n+  if (c)\n+    foo ();\n+  int *g = &c;\n+  int **h = &g;\n+  int ***h1 = &h;\n+  if (a)\n+    while (b)\n+      b = 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Deleted dead store: g = &c;\" \"dse1\" } } */"}, {"sha": "fd92d7b599a72340829744ec44a135ecb5c5add6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dse-45.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1adf11822bd48f4d65156b7642514630c08c4d00/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-45.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1adf11822bd48f4d65156b7642514630c08c4d00/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-45.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-45.c?ref=1adf11822bd48f4d65156b7642514630c08c4d00", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do link } */\n+/* { dg-options \"-O\" } */\n+\n+extern void foo(void);\n+int a, b;\n+static int c;\n+static void f() {\n+  while (a)\n+    for (; b; b--)\n+      ;\n+}\n+void i() {\n+  if (c)\n+    foo();\n+  int *g = &c;\n+  {\n+    int **h[1] = {&g};\n+    f();\n+  }\n+}\n+int main() {\n+  i();\n+  return 0;\n+}"}, {"sha": "ea50de789b1ebe0917e1b3f4d44d7550c0c5dbcd", "filename": "gcc/tree-ssa-dse.cc", "status": "modified", "additions": 41, "deletions": 5, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1adf11822bd48f4d65156b7642514630c08c4d00/gcc%2Ftree-ssa-dse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1adf11822bd48f4d65156b7642514630c08c4d00/gcc%2Ftree-ssa-dse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.cc?ref=1adf11822bd48f4d65156b7642514630c08c4d00", "patch": "@@ -898,6 +898,17 @@ dse_optimize_redundant_stores (gimple *stmt)\n     }\n }\n \n+/* Return whether PHI contains ARG as an argument.  */\n+\n+static bool\n+contains_phi_arg (gphi *phi, tree arg)\n+{\n+  for (unsigned i = 0; i < gimple_phi_num_args (phi); ++i)\n+    if (gimple_phi_arg_def (phi, i) == arg)\n+      return true;\n+  return false;\n+}\n+\n /* A helper of dse_optimize_stmt.\n    Given a GIMPLE_ASSIGN in STMT that writes to REF, classify it\n    according to downstream uses and defs.  Sets *BY_CLOBBER_P to true\n@@ -949,8 +960,8 @@ dse_classify_store (ao_ref *ref, gimple *stmt,\n \treturn DSE_STORE_LIVE;\n \n       auto_vec<gimple *, 10> defs;\n-      gimple *first_phi_def = NULL;\n-      gimple *last_phi_def = NULL;\n+      gphi *first_phi_def = NULL;\n+      gphi *last_phi_def = NULL;\n       FOR_EACH_IMM_USE_STMT (use_stmt, ui, defvar)\n \t{\n \t  /* Limit stmt walking.  */\n@@ -973,8 +984,8 @@ dse_classify_store (ao_ref *ref, gimple *stmt,\n \t\t{\n \t\t  defs.safe_push (use_stmt);\n \t\t  if (!first_phi_def)\n-\t\t    first_phi_def = use_stmt;\n-\t\t  last_phi_def = use_stmt;\n+\t\t    first_phi_def = as_a <gphi *> (use_stmt);\n+\t\t  last_phi_def = as_a <gphi *> (use_stmt);\n \t\t}\n \t    }\n \t  /* If the statement is a use the store is not dead.  */\n@@ -1046,6 +1057,7 @@ dse_classify_store (ao_ref *ref, gimple *stmt,\n \t  use_operand_p use_p;\n \t  tree vdef = (gimple_code (def) == GIMPLE_PHI\n \t\t       ? gimple_phi_result (def) : gimple_vdef (def));\n+\t  gphi *phi_def;\n \t  /* If the path to check starts with a kill we do not need to\n \t     process it further.\n \t     ???  With byte tracking we need only kill the bytes currently\n@@ -1079,7 +1091,31 @@ dse_classify_store (ao_ref *ref, gimple *stmt,\n \t\t\t   && bitmap_bit_p (visited,\n \t\t\t\t\t    SSA_NAME_VERSION\n \t\t\t\t\t      (PHI_RESULT (use_stmt))))))\n-\t    defs.unordered_remove (i);\n+\t    {\n+\t      defs.unordered_remove (i);\n+\t      if (def == first_phi_def)\n+\t\tfirst_phi_def = NULL;\n+\t      else if (def == last_phi_def)\n+\t\tlast_phi_def = NULL;\n+\t    }\n+\t  /* If def is a PHI and one of its arguments is another PHI node still\n+\t     in consideration we can defer processing it.  */\n+\t  else if ((phi_def = dyn_cast <gphi *> (def))\n+\t\t   && ((last_phi_def\n+\t\t\t&& phi_def != last_phi_def\n+\t\t\t&& contains_phi_arg (phi_def,\n+\t\t\t\t\t     gimple_phi_result (last_phi_def)))\n+\t\t       || (first_phi_def\n+\t\t\t   && phi_def != first_phi_def\n+\t\t\t   && contains_phi_arg\n+\t\t\t\t(phi_def, gimple_phi_result (first_phi_def)))))\n+\t    {\n+\t      defs.unordered_remove (i);\n+\t      if (phi_def == first_phi_def)\n+\t\tfirst_phi_def = NULL;\n+\t      else if (phi_def == last_phi_def)\n+\t\tlast_phi_def = NULL;\n+\t    }\n \t  else\n \t    ++i;\n \t}"}]}