{"sha": "2d9c4206c9d18b39f4d1c87ddbbda75238b7bf19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ5YzQyMDZjOWQxOGIzOWY0ZDFjODdkZGJiZGE3NTIzOGI3YmYxOQ==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2018-09-26T09:19:04Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-09-26T09:19:04Z"}, "message": "[Ada] Spurious error on interface conversion under ZFP\n\nThe frontend reports an error under ZFP when performing the type\nconversion of a tagged object to one of its covered interface types.\n\n2018-09-26  Javier Miranda  <miranda@adacore.com>\n\ngcc/ada/\n\n\t* exp_disp.adb (Expand_Interface_Conversion): No displacement of\n\tthe pointer needed when the type of the operand is an interface\n\ttype that maches the target type and we are compiling under\n\tconfigurable runtime. Adding also documentation explaining why\n\tthis cannot be done when compiling with the full runtime.\n\t* exp_intr.adb: Update comment.\n\ngcc/testsuite/\n\n\t* gnat.dg/interface8.adb, gnat.dg/interface8.ads: New testcase.\n\nFrom-SVN: r264628", "tree": {"sha": "9393d908821db1857849e7c1763fbecf344bdc8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9393d908821db1857849e7c1763fbecf344bdc8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d9c4206c9d18b39f4d1c87ddbbda75238b7bf19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d9c4206c9d18b39f4d1c87ddbbda75238b7bf19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d9c4206c9d18b39f4d1c87ddbbda75238b7bf19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d9c4206c9d18b39f4d1c87ddbbda75238b7bf19/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9d9518668b8b908825b28697bf5e2a866ae00e8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d9518668b8b908825b28697bf5e2a866ae00e8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d9518668b8b908825b28697bf5e2a866ae00e8e"}], "stats": {"total": 66, "additions": 65, "deletions": 1}, "files": [{"sha": "16855a7d23f3ce76b42dc2d30cedd27b38929459", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d9c4206c9d18b39f4d1c87ddbbda75238b7bf19/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d9c4206c9d18b39f4d1c87ddbbda75238b7bf19/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2d9c4206c9d18b39f4d1c87ddbbda75238b7bf19", "patch": "@@ -1,3 +1,12 @@\n+2018-09-26  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.adb (Expand_Interface_Conversion): No displacement of\n+\tthe pointer needed when the type of the operand is an interface\n+\ttype that maches the target type and we are compiling under\n+\tconfigurable runtime. Adding also documentation explaining why\n+\tthis cannot be done when compiling with the full runtime.\n+\t* exp_intr.adb: Update comment.\n+\n 2018-09-26  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch5.adb (Wrap_Loop_Statement): Annotate as No_Return."}, {"sha": "2169b67419a2aed5e9916b67ed9f1c1394abcc35", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d9c4206c9d18b39f4d1c87ddbbda75238b7bf19/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d9c4206c9d18b39f4d1c87ddbbda75238b7bf19/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=2d9c4206c9d18b39f4d1c87ddbbda75238b7bf19", "patch": "@@ -1339,11 +1339,39 @@ package body Exp_Disp is\n             Opnd := Designated_Type (Opnd);\n          end if;\n \n+         Opnd := Underlying_Record_Type (Opnd);\n+\n          if not Is_Interface (Opnd)\n            and then Is_Ancestor (Iface_Typ, Opnd, Use_Full_View => True)\n          then\n             return;\n          end if;\n+\n+         --  When the type of the operand and the target interface type match,\n+         --  it is generally safe to skip generating code to displace the\n+         --  pointer to the object to reference the secondary dispatch table\n+         --  associated with the target interface type. The exception to this\n+         --  general rule is when the underlying object of the type conversion\n+         --  is an object built by means of a dispatching constructor (since in\n+         --  such case the expansion of the constructor call is a direct call\n+         --  to an object primitive, i.e. without thunks, and the expansion of\n+         --  the constructor call adds an explicit conversion to the target\n+         --  interface type to force the displacement of the pointer to the\n+         --  object to reference the corresponding secondary dispatch table\n+         --  (cf. Make_DT and Expand_Dispatching_Constructor_Call)).\n+\n+         --  At this stage we cannot identify whether the underlying object is\n+         --  a BIP object and hence we cannot skip generating the code to try\n+         --  displacing the pointer to the object. However, under configurable\n+         --  runtime it is safe to skip generating code to displace the pointer\n+         --  to the object, because generic dispatching constructors are not\n+         --  supported.\n+\n+         if Opnd = Iface_Typ\n+           and then not RTE_Available (RE_Displace)\n+         then\n+            return;\n+         end if;\n       end;\n \n       --  Evaluate if we can statically displace the pointer to the object"}, {"sha": "4f4584bad6a6b840f314bbd84135201a66c84af0", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d9c4206c9d18b39f4d1c87ddbbda75238b7bf19/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d9c4206c9d18b39f4d1c87ddbbda75238b7bf19/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=2d9c4206c9d18b39f4d1c87ddbbda75238b7bf19", "patch": "@@ -402,7 +402,10 @@ package body Exp_Intr is\n       end if;\n \n       --  Rewrite and analyze the call to the instance as a class-wide\n-      --  conversion of the call to the actual constructor.\n+      --  conversion of the call to the actual constructor. When the result\n+      --  type is a class-wide interface type this conversion is required to\n+      --  force the displacement of the pointer to the object to reference the\n+      --  corresponding dispatch table.\n \n       Rewrite (N, Convert_To (Result_Typ, Cnstr_Call));\n "}, {"sha": "ccebb8a56be176392460422d84603ca77d869167", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d9c4206c9d18b39f4d1c87ddbbda75238b7bf19/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d9c4206c9d18b39f4d1c87ddbbda75238b7bf19/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2d9c4206c9d18b39f4d1c87ddbbda75238b7bf19", "patch": "@@ -1,3 +1,7 @@\n+2018-09-26  Javier Miranda  <miranda@adacore.com>\n+\n+\t* gnat.dg/interface8.adb, gnat.dg/interface8.ads: New testcase.\n+\n 2018-09-26  Ed Schonberg  <schonberg@adacore.com>\n \n \t* gnat.dg/predicate2-containers.ads,"}, {"sha": "5537ddb31e5e799a3154da5019b641e040b0ba8b", "filename": "gcc/testsuite/gnat.dg/interface8.adb", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d9c4206c9d18b39f4d1c87ddbbda75238b7bf19/gcc%2Ftestsuite%2Fgnat.dg%2Finterface8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d9c4206c9d18b39f4d1c87ddbbda75238b7bf19/gcc%2Ftestsuite%2Fgnat.dg%2Finterface8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finterface8.adb?ref=2d9c4206c9d18b39f4d1c87ddbbda75238b7bf19", "patch": "@@ -0,0 +1,9 @@\n+--  { dg-do compile }\n+\n+package body Interface8 is\n+   function Get_Iface (This : Child) return not null access Iface'Class\n+   is\n+   begin\n+      return This.Interface_1;\n+   end;\n+end;"}, {"sha": "d67b37518540893de04f008bd046f97b2a667762", "filename": "gcc/testsuite/gnat.dg/interface8.ads", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d9c4206c9d18b39f4d1c87ddbbda75238b7bf19/gcc%2Ftestsuite%2Fgnat.dg%2Finterface8.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d9c4206c9d18b39f4d1c87ddbbda75238b7bf19/gcc%2Ftestsuite%2Fgnat.dg%2Finterface8.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finterface8.ads?ref=2d9c4206c9d18b39f4d1c87ddbbda75238b7bf19", "patch": "@@ -0,0 +1,11 @@\n+package Interface8 is\n+   type Iface is interface;\n+\n+   type Root is abstract tagged null record;\n+\n+   type Child is new Root and Iface with record\n+      Interface_1 : access Iface'Class;\n+   end record;\n+\n+   function Get_Iface (This : Child) return not null access Iface'Class;\n+end;"}]}