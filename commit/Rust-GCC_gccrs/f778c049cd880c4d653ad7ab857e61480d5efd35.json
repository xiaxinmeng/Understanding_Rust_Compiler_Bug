{"sha": "f778c049cd880c4d653ad7ab857e61480d5efd35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc3OGMwNDljZDg4MGM0ZDY1M2FkN2FiODU3ZTYxNDgwZDVlZmQzNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-07-25T19:57:51Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-07-25T19:57:51Z"}, "message": "gimple-low.c (lower_try_catch): New function.\n\n\t* gimple-low.c (lower_try_catch): New function.\n\t(lower_stmt) <GIMPLE_TRY>: Use it to lower GIMPLE_TRY_CATCH.\n\t<GIMPLE_CATCH>: Delete.\n\t<GIMPLE_EH_FILTER>: Likewise.\n\nFrom-SVN: r189865", "tree": {"sha": "944a1014b9ea6e467ccae43ae63c6dff60c2c37d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/944a1014b9ea6e467ccae43ae63c6dff60c2c37d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f778c049cd880c4d653ad7ab857e61480d5efd35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f778c049cd880c4d653ad7ab857e61480d5efd35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f778c049cd880c4d653ad7ab857e61480d5efd35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f778c049cd880c4d653ad7ab857e61480d5efd35/comments", "author": null, "committer": null, "parents": [{"sha": "ea814c6675874dae704d3ee33b7146c3f5132688", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea814c6675874dae704d3ee33b7146c3f5132688", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea814c6675874dae704d3ee33b7146c3f5132688"}], "stats": {"total": 158, "additions": 133, "deletions": 25}, "files": [{"sha": "ff4a09a20cec34905ccf0eba44f6f872440e9501", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f778c049cd880c4d653ad7ab857e61480d5efd35/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f778c049cd880c4d653ad7ab857e61480d5efd35/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f778c049cd880c4d653ad7ab857e61480d5efd35", "patch": "@@ -1,3 +1,10 @@\n+2012-07-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gimple-low.c (lower_try_catch): New function.\n+\t(lower_stmt) <GIMPLE_TRY>: Use it to lower GIMPLE_TRY_CATCH.\n+\t<GIMPLE_CATCH>: Delete.\n+\t<GIMPLE_EH_FILTER>: Likewise.\n+\n 2012-07-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* expr.c (expand_expr_real_1): Do not expand operand #1 and #2"}, {"sha": "bdb6c1e6f9e00459890e8de0c04cb0ea042f8c7d", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 84, "deletions": 25, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f778c049cd880c4d653ad7ab857e61480d5efd35/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f778c049cd880c4d653ad7ab857e61480d5efd35/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=f778c049cd880c4d653ad7ab857e61480d5efd35", "patch": "@@ -76,6 +76,7 @@ struct lower_data\n \n static void lower_stmt (gimple_stmt_iterator *, struct lower_data *);\n static void lower_gimple_bind (gimple_stmt_iterator *, struct lower_data *);\n+static void lower_try_catch (gimple_stmt_iterator *, struct lower_data *);\n static void lower_gimple_return (gimple_stmt_iterator *, struct lower_data *);\n static void lower_builtin_setjmp (gimple_stmt_iterator *);\n \n@@ -373,31 +374,28 @@ lower_stmt (gimple_stmt_iterator *gsi, struct lower_data *data)\n       return;\n \n     case GIMPLE_TRY:\n-      {\n-\tbool try_cannot_fallthru;\n-\tlower_sequence (gimple_try_eval_ptr (stmt), data);\n-\ttry_cannot_fallthru = data->cannot_fallthru;\n-\tdata->cannot_fallthru = false;\n-\tlower_sequence (gimple_try_cleanup_ptr (stmt), data);\n-\t/* See gimple_stmt_may_fallthru for the rationale.  */\n-\tif (gimple_try_kind (stmt) == GIMPLE_TRY_FINALLY)\n-\t  {\n-\t    data->cannot_fallthru |= try_cannot_fallthru;\n-\t    gsi_next (gsi);\n-\t    return;\n-\t  }\n-      }\n-      break;\n-\n-    case GIMPLE_CATCH:\n-      data->cannot_fallthru = false;\n-      lower_sequence (gimple_catch_handler_ptr (stmt), data);\n-      break;\n-\n-    case GIMPLE_EH_FILTER:\n-      data->cannot_fallthru = false;\n-      lower_sequence (gimple_eh_filter_failure_ptr (stmt), data);\n-      break;\n+      if (gimple_try_kind (stmt) == GIMPLE_TRY_CATCH)\n+\tlower_try_catch (gsi, data);\n+      else\n+\t{\n+\t  /* It must be a GIMPLE_TRY_FINALLY.  */\n+\t  bool cannot_fallthru;\n+\t  lower_sequence (gimple_try_eval_ptr (stmt), data);\n+\t  cannot_fallthru = data->cannot_fallthru;\n+\n+\t  /* The finally clause is always executed after the try clause,\n+\t     so if it does not fall through, then the try-finally will not\n+\t     fall through.  Otherwise, if the try clause does not fall\n+\t     through, then when the finally clause falls through it will\n+\t     resume execution wherever the try clause was going.  So the\n+\t     whole try-finally will only fall through if both the try\n+\t     clause and the finally clause fall through.  */\n+\t  data->cannot_fallthru = false;\n+\t  lower_sequence (gimple_try_cleanup_ptr (stmt), data);\n+\t  data->cannot_fallthru |= cannot_fallthru;\n+\t  gsi_next (gsi);\n+\t}\n+      return;\n \n     case GIMPLE_EH_ELSE:\n       lower_sequence (gimple_eh_else_n_body_ptr (stmt), data);\n@@ -520,6 +518,67 @@ lower_gimple_bind (gimple_stmt_iterator *gsi, struct lower_data *data)\n   gsi_remove (gsi, false);\n }\n \n+/* Same as above, but for a GIMPLE_TRY_CATCH.  */\n+\n+static void\n+lower_try_catch (gimple_stmt_iterator *gsi, struct lower_data *data)\n+{\n+  bool cannot_fallthru;\n+  gimple stmt = gsi_stmt (*gsi);\n+  gimple_stmt_iterator i;\n+\n+  /* We don't handle GIMPLE_TRY_FINALLY.  */\n+  gcc_assert (gimple_try_kind (stmt) == GIMPLE_TRY_CATCH);\n+\n+  lower_sequence (gimple_try_eval_ptr (stmt), data);\n+  cannot_fallthru = data->cannot_fallthru;\n+\n+  i = gsi_start (*gimple_try_cleanup_ptr (stmt));\n+  switch (gimple_code (gsi_stmt (i)))\n+    {\n+    case GIMPLE_CATCH:\n+      /* We expect to see a sequence of GIMPLE_CATCH stmts, each with a\n+\t catch expression and a body.  The whole try/catch may fall\n+\t through iff any of the catch bodies falls through.  */\n+      for (; !gsi_end_p (i); gsi_next (&i))\n+\t{\n+\t  data->cannot_fallthru = false;\n+\t  lower_sequence (gimple_catch_handler_ptr (gsi_stmt (i)), data);\n+\t  if (!data->cannot_fallthru)\n+\t    cannot_fallthru = false;\n+\t}\n+      break;\n+\n+    case GIMPLE_EH_FILTER:\n+      /* The exception filter expression only matters if there is an\n+\t exception.  If the exception does not match EH_FILTER_TYPES,\n+\t we will execute EH_FILTER_FAILURE, and we will fall through\n+\t if that falls through.  If the exception does match\n+\t EH_FILTER_TYPES, the stack unwinder will continue up the\n+\t stack, so we will not fall through.  We don't know whether we\n+\t will throw an exception which matches EH_FILTER_TYPES or not,\n+\t so we just ignore EH_FILTER_TYPES and assume that we might\n+\t throw an exception which doesn't match.  */\n+      data->cannot_fallthru = false;\n+      lower_sequence (gimple_eh_filter_failure_ptr (gsi_stmt (i)), data);\n+      if (!data->cannot_fallthru)\n+\tcannot_fallthru = false;\n+      break;\n+\n+    default:\n+      /* This case represents statements to be executed when an\n+\t exception occurs.  Those statements are implicitly followed\n+\t by a GIMPLE_RESX to resume execution after the exception.  So\n+\t in this case the try/catch never falls through.  */\n+      data->cannot_fallthru = false;\n+      lower_sequence (gimple_try_cleanup_ptr (stmt), data);\n+      break;\n+    }\n+\n+  data->cannot_fallthru = cannot_fallthru;\n+  gsi_next (gsi);\n+}\n+\n /* Try to determine whether a TRY_CATCH expression can fall through.\n    This is a subroutine of block_may_fallthru.  */\n "}, {"sha": "495624faf7cbe7daa792a9948b957dfa56845a2c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f778c049cd880c4d653ad7ab857e61480d5efd35/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f778c049cd880c4d653ad7ab857e61480d5efd35/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f778c049cd880c4d653ad7ab857e61480d5efd35", "patch": "@@ -1,3 +1,7 @@\n+2012-07-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/noreturn5.ad[sb]: New test.\n+\n 2012-07-25  Sandra Loosemore  <sandra@codesourcery.com>\n \t    Paul Brook  <paul@codesourcery.com>\n "}, {"sha": "2f7599097692c377603e6e744909ef6e3abcdb5d", "filename": "gcc/testsuite/gnat.dg/noreturn5.adb", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f778c049cd880c4d653ad7ab857e61480d5efd35/gcc%2Ftestsuite%2Fgnat.dg%2Fnoreturn5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f778c049cd880c4d653ad7ab857e61480d5efd35/gcc%2Ftestsuite%2Fgnat.dg%2Fnoreturn5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fnoreturn5.adb?ref=f778c049cd880c4d653ad7ab857e61480d5efd35", "patch": "@@ -0,0 +1,30 @@\n+with Ada.Characters.Handling; use Ada.Characters.Handling;\n+with GNAT.OS_Lib;             use GNAT.OS_Lib;\n+with Text_IO;                 use Text_IO;\n+\n+package body Noreturn5 is\n+\n+   procedure Proc (Arg_Line : Wide_String; Keep_Going : Boolean) is\n+   begin\n+      Put (To_String (Arg_Line));\n+\n+      if Keep_Going then\n+         raise Constraint_Error;\n+      else\n+         OS_Exit (1);\n+      end if;\n+\n+   exception\n+      when Constraint_Error =>\n+         raise;\n+\n+      when others =>\n+         if Keep_Going then\n+            raise Constraint_Error;\n+         else\n+            OS_Exit (1);\n+         end if;\n+\n+   end;\n+\n+end Noreturn5;"}, {"sha": "4da5c1e09066e024bc5501ee4c9cfe48868a6d56", "filename": "gcc/testsuite/gnat.dg/noreturn5.ads", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f778c049cd880c4d653ad7ab857e61480d5efd35/gcc%2Ftestsuite%2Fgnat.dg%2Fnoreturn5.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f778c049cd880c4d653ad7ab857e61480d5efd35/gcc%2Ftestsuite%2Fgnat.dg%2Fnoreturn5.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fnoreturn5.ads?ref=f778c049cd880c4d653ad7ab857e61480d5efd35", "patch": "@@ -0,0 +1,8 @@\n+-- { dg-do compile }\n+\n+package Noreturn5 is\n+\n+   procedure Proc (Arg_Line : Wide_String; Keep_Going : Boolean);\n+   pragma No_Return (Proc);\n+\n+end Noreturn5;"}]}