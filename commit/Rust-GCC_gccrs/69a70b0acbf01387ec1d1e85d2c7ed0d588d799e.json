{"sha": "69a70b0acbf01387ec1d1e85d2c7ed0d588d799e", "node_id": "C_kwDOANBUbNoAKDY5YTcwYjBhY2JmMDEzODdlYzFkMWU4NWQyYzdlZDBkNTg4ZDc5OWU", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-06-06T08:50:23Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-05T08:28:18Z"}, "message": "[Ada] Perform object rewriting as renaming only in the expander\n\nThe rewriting as renaming optimization for object declarations is done\npartly during analysis, guarded with Expander_Active, and partly during\nexpansion, so it makes sense to do it entirely during expansion.\n\nThis merges the two cases and removes obsolete or unnecessary conditions\nguarding the transformation in the process.\n\ngcc/ada/\n\n\t* exp_ch3.adb (Expand_N_Object_Declaration): Rewrite as a renaming\n\tfor any nonaliased local object with nominal unconstrained subtype\n\toriginally initialized with the result of a function call that has\n\tbeen rewritten as the dereference of a reference to the result.\n\t* sem_ch3.adb (Analyze_Object_Declaration): Do not do it here", "tree": {"sha": "67b7ab4aa3162168b8308da4ad940158aaedbf31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67b7ab4aa3162168b8308da4ad940158aaedbf31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69a70b0acbf01387ec1d1e85d2c7ed0d588d799e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69a70b0acbf01387ec1d1e85d2c7ed0d588d799e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69a70b0acbf01387ec1d1e85d2c7ed0d588d799e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69a70b0acbf01387ec1d1e85d2c7ed0d588d799e/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d5018955a37fa665acc8dcba8121dd365dbe9be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d5018955a37fa665acc8dcba8121dd365dbe9be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d5018955a37fa665acc8dcba8121dd365dbe9be"}], "stats": {"total": 106, "additions": 33, "deletions": 73}, "files": [{"sha": "eea37dcf9da464a859ea5521f40165d5e6306025", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 33, "deletions": 38, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69a70b0acbf01387ec1d1e85d2c7ed0d588d799e/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69a70b0acbf01387ec1d1e85d2c7ed0d588d799e/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=69a70b0acbf01387ec1d1e85d2c7ed0d588d799e", "patch": "@@ -7675,59 +7675,54 @@ package body Exp_Ch3 is\n \n             Rewrite_As_Renaming :=\n \n-              --  If the object declaration appears in the form\n+              --  The declaration cannot be rewritten if it has got constraints\n+              --  in other words the nominal subtype must be unconstrained.\n \n-              --    Obj : Typ := Func (...);\n+              Is_Entity_Name (Original_Node (Obj_Def))\n \n-              --  where Typ needs finalization and is returned on the secondary\n-              --  stack, the declaration can be rewritten into a dereference of\n-              --  the reference to the result built on the secondary stack (see\n-              --  Expand_Ctrl_Function_Call for this expansion of the call):\n+                --  The aliased case has to be excluded because the expression\n+                --  will not be aliased in the general case.\n \n-              --    type Axx is access all Typ;\n-              --    Rxx : constant Axx := Func (...)'reference;\n-              --    Obj : Typ renames Rxx.all;\n+                and then not Aliased_Present (N)\n \n-              --  This avoids an extra copy and a pair of Adjust/Finalize calls\n+                --  If the object declaration originally appears in the form\n \n-              ((not Is_Library_Level_Entity (Def_Id)\n-                 and then Nkind (Expr_Q) = N_Explicit_Dereference\n-                 and then not Comes_From_Source (Expr_Q)\n-                 and then Nkind (Original_Node (Expr_Q)) = N_Function_Call\n-                 and then Needs_Finalization (Typ)\n-                 and then not Is_Class_Wide_Type (Typ))\n+                --    Obj : Typ := Func (...);\n \n-                --  If the initializing expression is for a variable with flag\n-                --  OK_To_Rename set, then transform:\n+                --  and has been rewritten as the dereference of a reference\n+                --  to the function result built either on the primary or the\n+                --  secondary stack, then the declaration can be rewritten as\n+                --  the renaming of this dereference:\n \n-                --     Obj : Typ := Expr;\n+                --    type Axx is access all Typ;\n+                --    Rxx : constant Axx := Func (...)'reference;\n+                --    Obj : Typ renames Rxx.all;\n \n-                --  into\n+                --  This avoids an extra copy and, in the case where Typ needs\n+                --  finalization, a pair of Adjust/Finalize calls (see below).\n \n-                --     Obj : Typ renames Expr;\n+                and then\n+                  ((not Is_Library_Level_Entity (Def_Id)\n+                     and then Nkind (Expr_Q) = N_Explicit_Dereference\n+                     and then not Comes_From_Source (Expr_Q)\n+                     and then Nkind (Original_Node (Expr_Q)) = N_Function_Call\n+                     and then not Is_Class_Wide_Type (Typ))\n \n-                --  provided that Obj is not aliased. The aliased case has to\n-                --  be excluded because Expr will not be aliased in general.\n+                   --  If the initializing expression is a variable with the\n+                   --  flag OK_To_Rename set, then transform:\n \n-               or else (not Aliased_Present (N)\n-                         and then (OK_To_Rename_Ref (Expr_Q)\n-                                    or else\n-                                   (Nkind (Expr_Q) = N_Slice\n-                                     and then\n-                                    OK_To_Rename_Ref (Prefix (Expr_Q))))))\n+                   --     Obj : Typ := Expr;\n \n-              --  The declaration cannot be rewritten if it has got constraints\n-              --  in other words the nominal subtype must be unconstrained.\n+                   --  into\n+\n+                   --     Obj : Typ renames Expr;\n \n-              and then Is_Entity_Name (Original_Node (Obj_Def))\n+                   or else OK_To_Rename_Ref (Expr_Q)\n \n-              --  ??? Likewise if there are any aspect specifications, because\n-              --  otherwise we duplicate that corresponding implicit attribute\n-              --  definition and call Insert_Action, which has no place for the\n-              --  attribute definition. The attribute definition is stored in\n-              --  Aspect_Rep_Item, which is not a list.\n+                   --  Likewise if it is a slice of such a variable\n \n-              and then No (Aspect_Specifications (N));\n+                   or else (Nkind (Expr_Q) = N_Slice\n+                             and then OK_To_Rename_Ref (Prefix (Expr_Q))));\n \n             --  If the type needs finalization and is not inherently limited,\n             --  then the target is adjusted after the copy and attached to the"}, {"sha": "790d1d1b2bebd8e3b184dbdd9fecf50f3b75c32d", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69a70b0acbf01387ec1d1e85d2c7ed0d588d799e/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69a70b0acbf01387ec1d1e85d2c7ed0d588d799e/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=69a70b0acbf01387ec1d1e85d2c7ed0d588d799e", "patch": "@@ -5048,41 +5048,6 @@ package body Sem_Ch3 is\n          end;\n       end if;\n \n-      --  Another optimization: if the nominal subtype is unconstrained and\n-      --  the expression is a function call that returns on the secondary\n-      --  stack, rewrite the declaration as a renaming of the result of the\n-      --  call. The exceptions below are cases where the copy is expected,\n-      --  either by the back end (Aliased case) or by the semantics, as for\n-      --  initializing controlled types or copying tags for class-wide types.\n-      --  ??? To be moved to Expand_N_Object_Declaration.Rewrite_As_Renaming.\n-\n-      if Present (E)\n-        and then Nkind (E) = N_Explicit_Dereference\n-        and then Nkind (Original_Node (E)) = N_Function_Call\n-        and then not Is_Library_Level_Entity (Id)\n-        and then not Is_Aliased (Id)\n-        and then Needs_Secondary_Stack (T)\n-        and then not Is_Class_Wide_Type (T)\n-        and then not Needs_Finalization (T)\n-        and then Expander_Active\n-      then\n-         Rewrite (N,\n-           Make_Object_Renaming_Declaration (Loc,\n-             Defining_Identifier => Id,\n-             Access_Definition   => Empty,\n-             Subtype_Mark        => New_Occurrence_Of\n-                                      (Base_Type (Etype (Id)), Loc),\n-             Name                => E));\n-\n-         Set_Renamed_Object (Id, E);\n-\n-         --  Force generation of debugging information for the constant and for\n-         --  the renamed function call.\n-\n-         Set_Debug_Info_Needed (Id);\n-         Set_Debug_Info_Needed (Entity (Prefix (E)));\n-      end if;\n-\n       if Present (Prev_Entity)\n         and then Is_Frozen (Prev_Entity)\n         and then not Error_Posted (Id)"}]}