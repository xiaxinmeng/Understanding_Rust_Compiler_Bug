{"sha": "863d6524f320abe14d6993fec188e787470e69b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYzZDY1MjRmMzIwYWJlMTRkNjk5M2ZlYzE4OGU3ODc0NzBlNjliNg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-08-31T16:25:58Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-08-31T16:25:58Z"}, "message": "[Committed] Fix subreg_promoted_mode breakage on various platforms.\n\nMy apologies for the inconvenience.  My recent patch to preserve\nSUBREG_PROMOTED_VAR_P on (extend:HI (subreg/s:QI (reg:SI))), and other\nplaces in the middle-end, has broken the build on several targets.\n\nThe change to convert_modes inadvertently used the same\nsubreg_promoted_mode idiom for retrieving the mode of a SUBREG_REG\nas the existing code just a few lines earlier.  Alas in the meantime,\nthe original SUBREG gets replaced by one without SUBREG_PROMOTED_VAR_P,\nthe whole raison-d'etre for my patch, and I'd not realized/noticed\nthat subreg_promoted_mode asserts for this.  Alas neither the bootstrap\nand regression test on x86_64-pc-linux-gnu nor my testing on nvptx-none\nmust have hit this particular case.  The logic of this transformation\nis sound, it's the implementation that's bitten me.\n\nThis patch has been committed, after another \"make bootstrap\" on\nx86_64-pc-linux-gnu (just in case), and confirmation/pre-approval\nfrom Jeff Law that this indeed fixes the build failures seen on\nseveral platforms.\n\nMy humble apologies again.\n\n2021-08-31  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* expr.c (convert_modes): Don't use subreg_promoted_mode on a\n\tSUBREG if it can't be guaranteed to a SUBREG_PROMOTED_VAR_P set.\n\tInstead use the standard (safer) is_a <scalar_int_mode> idiom.", "tree": {"sha": "6c47398649c01632db13dd5f6d2955363fa2b60e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c47398649c01632db13dd5f6d2955363fa2b60e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/863d6524f320abe14d6993fec188e787470e69b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/863d6524f320abe14d6993fec188e787470e69b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/863d6524f320abe14d6993fec188e787470e69b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/863d6524f320abe14d6993fec188e787470e69b6/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17dc903ed36ea0b6189d66a36d36e0c5ab803a7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17dc903ed36ea0b6189d66a36d36e0c5ab803a7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17dc903ed36ea0b6189d66a36d36e0c5ab803a7b"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "17f2c2f3b8bf2a9e5447c1dc1dc805380cdd8122", "filename": "gcc/expr.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863d6524f320abe14d6993fec188e787470e69b6/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863d6524f320abe14d6993fec188e787470e69b6/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=863d6524f320abe14d6993fec188e787470e69b6", "patch": "@@ -690,17 +690,20 @@ convert_modes (machine_mode mode, machine_mode oldmode, rtx x, int unsignedp)\n       && SUBREG_CHECK_PROMOTED_SIGN (x, unsignedp))\n     {\n       scalar_int_mode int_orig_mode;\n+      scalar_int_mode int_inner_mode;\n       machine_mode orig_mode = GET_MODE (x);\n       x = gen_lowpart (int_mode, SUBREG_REG (x));\n \n       /* Preserve SUBREG_PROMOTED_VAR_P if the new mode is wider than\n \t the original mode, but narrower than the inner mode.  */\n       if (GET_CODE (x) == SUBREG\n-\t  && GET_MODE_PRECISION (subreg_promoted_mode (x))\n-\t     > GET_MODE_PRECISION (int_mode)\n \t  && is_a <scalar_int_mode> (orig_mode, &int_orig_mode)\n \t  && GET_MODE_PRECISION (int_mode)\n-\t     > GET_MODE_PRECISION (int_orig_mode))\n+\t     > GET_MODE_PRECISION (int_orig_mode)\n+\t  && is_a <scalar_int_mode> (GET_MODE (SUBREG_REG (x)),\n+\t\t\t\t     &int_inner_mode)\n+\t  && GET_MODE_PRECISION (int_inner_mode)\n+\t     > GET_MODE_PRECISION (int_mode))\n \t{\n \t  SUBREG_PROMOTED_VAR_P (x) = 1;\n \t  SUBREG_PROMOTED_SET (x, unsignedp);"}]}