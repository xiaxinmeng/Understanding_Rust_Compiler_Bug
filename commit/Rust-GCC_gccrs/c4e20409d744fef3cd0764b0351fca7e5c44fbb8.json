{"sha": "c4e20409d744fef3cd0764b0351fca7e5c44fbb8", "node_id": "C_kwDOANBUbNoAKGM0ZTIwNDA5ZDc0NGZlZjNjZDA3NjRiMDM1MWZjYTdlNWM0NGZiYjg", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-05-02T13:49:10Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-05-11T07:38:21Z"}, "message": "ast: Rename TokenStream in the AST module\n\nRename the TokenStream class to TokenCollector as it may induce errors\nin the future as it is not a tokenstream as defined by the rust\ninterface. Furthermore this change match more closely the actual behavior\nof the class.\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast-tokenstream.cc (TokenStream::TokenStream): Rename\n\tTokenStream to TokenCollector.\n\t(TokenCollector::TokenCollector): Likewise.\n\t(TokenStream::collect_tokens): Likewise.\n\t(TokenCollector::collect_tokens): Likewise.\n\t(TokenStream::collect): Likewise.\n\t(TokenCollector::collect): Likewise.\n\t(TokenStream::visit): Likewise.\n\t(TokenCollector::visit): Likewise.\n\t(TokenStream::visit_items_joined_by_separator): Likewise.\n\t(TokenCollector::visit_items_joined_by_separator): Likewise.\n\t(TokenStream::visit_as_line): Likewise.\n\t(TokenCollector::visit_as_line): Likewise.\n\t(TokenStream::visit_items_as_lines): Likewise.\n\t(TokenCollector::visit_items_as_lines): Likewise.\n\t(TokenStream::visit_items_as_block): Likewise.\n\t(TokenCollector::visit_items_as_block): Likewise.\n\t(TokenStream::trailing_comma): Likewise.\n\t(TokenCollector::trailing_comma): Likewise.\n\t(TokenStream::newline): Likewise.\n\t(TokenCollector::newline): Likewise.\n\t(TokenStream::indentation): Likewise.\n\t(TokenCollector::indentation): Likewise.\n\t(TokenStream::increment_indentation): Likewise.\n\t(TokenCollector::increment_indentation): Likewise.\n\t(TokenStream::decrement_indentation): Likewise.\n\t(TokenCollector::decrement_indentation): Likewise.\n\t(TokenStream::visit_closure_common): Likewise.\n\t(TokenCollector::visit_closure_common): Likewise.\n\t(TokenStream::visit_loop_common): Likewise.\n\t(TokenCollector::visit_loop_common): Likewise.\n\t(TokenStream::visit_function_common): Likewise.\n\t(TokenCollector::visit_function_common): Likewise.\n\t* ast/rust-ast-tokenstream.h (class TokenStream): Likewise.\n\t(class TokenCollector): Likewise.\n\t* rust-session-manager.cc (Session::dump_tokenstream): Rename\n\ttoken vector for clearer intent.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "b6f8f4889bd75ae60c020686c0f8b23636823358", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6f8f4889bd75ae60c020686c0f8b23636823358"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4e20409d744fef3cd0764b0351fca7e5c44fbb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4e20409d744fef3cd0764b0351fca7e5c44fbb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4e20409d744fef3cd0764b0351fca7e5c44fbb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4e20409d744fef3cd0764b0351fca7e5c44fbb8/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a841180b026fd6e33733ea8c0f39d47a8eaf1f8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a841180b026fd6e33733ea8c0f39d47a8eaf1f8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a841180b026fd6e33733ea8c0f39d47a8eaf1f8d"}], "stats": {"total": 428, "additions": 215, "deletions": 213}, "files": [{"sha": "41db77b788ba6869ba1db49d07c4869e86012a87", "filename": "gcc/rust/ast/rust-ast-tokenstream.cc", "status": "modified", "additions": 210, "deletions": 208, "changes": 418, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e20409d744fef3cd0764b0351fca7e5c44fbb8/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e20409d744fef3cd0764b0351fca7e5c44fbb8/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc?ref=c4e20409d744fef3cd0764b0351fca7e5c44fbb8", "patch": "@@ -21,11 +21,12 @@\n namespace Rust {\n namespace AST {\n \n-TokenStream::TokenStream (std::vector<TokenPtr> &container) : tokens (container)\n+TokenCollector::TokenCollector (std::vector<TokenPtr> &container)\n+  : tokens (container)\n {}\n \n std::vector<TokenPtr>\n-TokenStream::collect_tokens () const\n+TokenCollector::collect_tokens () const\n {\n   return tokens;\n }\n@@ -151,7 +152,7 @@ dispatch_integer_literals (ProcMacro::TokenStream &ts, TokenPtr &token)\n }\n \n ProcMacro::TokenStream\n-TokenStream::collect () const\n+TokenCollector::collect () const\n {\n   std::vector<ProcMacro::TokenStream> trees;\n   trees.push_back (ProcMacro::TokenStream::make_tokenstream ());\n@@ -327,37 +328,38 @@ TokenStream::collect () const\n }\n \n void\n-TokenStream::visit (AST::Crate &crate)\n+TokenCollector::visit (AST::Crate &crate)\n {\n   visit_items_as_lines (crate.inner_attrs);\n   visit_items_as_lines (crate.items);\n }\n \n void\n-TokenStream::visit (AST::Item &item)\n+TokenCollector::visit (AST::Item &item)\n {\n   item.accept_vis (*this);\n }\n \n template <typename T>\n void\n-TokenStream::visit (std::unique_ptr<T> &node)\n+TokenCollector::visit (std::unique_ptr<T> &node)\n {\n   node->accept_vis (*this);\n }\n \n template <typename T>\n void\n-TokenStream::visit (T &node)\n+TokenCollector::visit (T &node)\n {\n   node.accept_vis (*this);\n }\n \n template <typename T>\n void\n-TokenStream::visit_items_joined_by_separator (T &collection, TokenId separator,\n-\t\t\t\t\t      size_t start_offset,\n-\t\t\t\t\t      size_t end_offset)\n+TokenCollector::visit_items_joined_by_separator (T &collection,\n+\t\t\t\t\t\t TokenId separator,\n+\t\t\t\t\t\t size_t start_offset,\n+\t\t\t\t\t\t size_t end_offset)\n {\n   if (collection.size () > start_offset)\n     {\n@@ -373,7 +375,7 @@ TokenStream::visit_items_joined_by_separator (T &collection, TokenId separator,\n \n template <typename T>\n void\n-TokenStream::visit_as_line (T &item, std::vector<TokenPtr> trailing)\n+TokenCollector::visit_as_line (T &item, std::vector<TokenPtr> trailing)\n {\n   indentation ();\n   visit (item);\n@@ -384,18 +386,18 @@ TokenStream::visit_as_line (T &item, std::vector<TokenPtr> trailing)\n \n template <typename T>\n void\n-TokenStream::visit_items_as_lines (T &collection,\n-\t\t\t\t   std::vector<TokenPtr> trailing)\n+TokenCollector::visit_items_as_lines (T &collection,\n+\t\t\t\t      std::vector<TokenPtr> trailing)\n {\n   for (auto &item : collection)\n     visit_as_line (item, trailing);\n }\n \n template <typename T>\n void\n-TokenStream::visit_items_as_block (T &collection,\n-\t\t\t\t   std::vector<TokenPtr> trailing,\n-\t\t\t\t   TokenId left_brace, TokenId right_brace)\n+TokenCollector::visit_items_as_block (T &collection,\n+\t\t\t\t      std::vector<TokenPtr> trailing,\n+\t\t\t\t      TokenId left_brace, TokenId right_brace)\n {\n   tokens.push_back (Rust::Token::make (left_brace, Location ()));\n   if (collection.empty ())\n@@ -416,7 +418,7 @@ TokenStream::visit_items_as_block (T &collection,\n }\n \n void\n-TokenStream::trailing_comma ()\n+TokenCollector::trailing_comma ()\n {\n   if (output_trailing_commas)\n     {\n@@ -425,31 +427,31 @@ TokenStream::trailing_comma ()\n }\n \n void\n-TokenStream::newline ()\n+TokenCollector::newline ()\n {}\n \n void\n-TokenStream::indentation ()\n+TokenCollector::indentation ()\n {}\n \n void\n-TokenStream::increment_indentation ()\n+TokenCollector::increment_indentation ()\n {}\n \n void\n-TokenStream::decrement_indentation ()\n+TokenCollector::decrement_indentation ()\n {}\n \n void\n-TokenStream::visit (FunctionParam &param)\n+TokenCollector::visit (FunctionParam &param)\n {\n   visit (param.get_pattern ());\n   tokens.push_back (Rust::Token::make (COLON, Location ()));\n   visit (param.get_type ());\n }\n \n void\n-TokenStream::visit (Attribute &attrib)\n+TokenCollector::visit (Attribute &attrib)\n {\n   tokens.push_back (Rust::Token::make (HASH, attrib.get_locus ()));\n   if (attrib.is_inner_attribute ())\n@@ -482,7 +484,7 @@ TokenStream::visit (Attribute &attrib)\n }\n \n void\n-TokenStream::visit (SimplePath &path)\n+TokenCollector::visit (SimplePath &path)\n {\n   if (path.has_opening_scope_resolution ())\n     {\n@@ -493,7 +495,7 @@ TokenStream::visit (SimplePath &path)\n }\n \n void\n-TokenStream::visit (SimplePathSegment &segment)\n+TokenCollector::visit (SimplePathSegment &segment)\n {\n   auto name = segment.get_segment_name ();\n   if (segment.is_crate_path_seg ())\n@@ -520,7 +522,7 @@ TokenStream::visit (SimplePathSegment &segment)\n }\n \n void\n-TokenStream::visit (Visibility &vis)\n+TokenCollector::visit (Visibility &vis)\n {\n   switch (vis.get_vis_type ())\n     {\n@@ -558,7 +560,7 @@ TokenStream::visit (Visibility &vis)\n }\n \n void\n-TokenStream::visit (NamedFunctionParam &param)\n+TokenCollector::visit (NamedFunctionParam &param)\n {\n   auto name = param.get_name ();\n   tokens.push_back (\n@@ -568,15 +570,15 @@ TokenStream::visit (NamedFunctionParam &param)\n }\n \n void\n-TokenStream::visit (std::vector<std::unique_ptr<GenericParam>> &params)\n+TokenCollector::visit (std::vector<std::unique_ptr<GenericParam>> &params)\n {\n   tokens.push_back (Rust::Token::make (LEFT_ANGLE, Location ()));\n   visit_items_joined_by_separator (params, COMMA);\n   tokens.push_back (Rust::Token::make (RIGHT_ANGLE, Location ()));\n }\n \n void\n-TokenStream::visit (TupleField &field)\n+TokenCollector::visit (TupleField &field)\n {\n   for (auto attr : field.get_outer_attrs ())\n     {\n@@ -587,7 +589,7 @@ TokenStream::visit (TupleField &field)\n }\n \n void\n-TokenStream::visit (StructField &field)\n+TokenCollector::visit (StructField &field)\n {\n   for (auto attr : field.get_outer_attrs ())\n     {\n@@ -602,7 +604,7 @@ TokenStream::visit (StructField &field)\n }\n \n void\n-TokenStream::visit (std::vector<LifetimeParam> &for_lifetimes)\n+TokenCollector::visit (std::vector<LifetimeParam> &for_lifetimes)\n {\n   tokens.push_back (Rust::Token::make (FOR, Location ()));\n   tokens.push_back (Rust::Token::make (LEFT_ANGLE, Location ()));\n@@ -611,7 +613,7 @@ TokenStream::visit (std::vector<LifetimeParam> &for_lifetimes)\n }\n \n void\n-TokenStream::visit (FunctionQualifiers &qualifiers)\n+TokenCollector::visit (FunctionQualifiers &qualifiers)\n {\n   // Syntax:\n   //    `const`? `async`? `unsafe`? (`extern` Abi?)?\n@@ -647,7 +649,7 @@ TokenStream::visit (FunctionQualifiers &qualifiers)\n }\n \n void\n-TokenStream::visit (MaybeNamedParam &param)\n+TokenCollector::visit (MaybeNamedParam &param)\n {\n   // Syntax:\n   //     OuterAttribute* ( ( IDENTIFIER | _ ) : )? Type\n@@ -675,7 +677,7 @@ TokenStream::visit (MaybeNamedParam &param)\n }\n \n void\n-TokenStream::visit (Token &tok)\n+TokenCollector::visit (Token &tok)\n {\n   std::string data = tok.get_tok_ptr ()->has_str () ? tok.get_str () : \"\";\n   switch (tok.get_id ())\n@@ -730,7 +732,7 @@ TokenStream::visit (Token &tok)\n }\n \n void\n-TokenStream::visit (DelimTokenTree &delim_tok_tree)\n+TokenCollector::visit (DelimTokenTree &delim_tok_tree)\n {\n   increment_indentation ();\n   newline ();\n@@ -745,7 +747,7 @@ TokenStream::visit (DelimTokenTree &delim_tok_tree)\n }\n \n void\n-TokenStream::visit (AttrInputMetaItemContainer &container)\n+TokenCollector::visit (AttrInputMetaItemContainer &container)\n {\n   for (auto &item : container.get_items ())\n     {\n@@ -754,15 +756,15 @@ TokenStream::visit (AttrInputMetaItemContainer &container)\n }\n \n void\n-TokenStream::visit (IdentifierExpr &ident_expr)\n+TokenCollector::visit (IdentifierExpr &ident_expr)\n {\n   auto ident = ident_expr.get_ident ();\n   tokens.push_back (\n     Rust::Token::make_identifier (ident_expr.get_locus (), std::move (ident)));\n }\n \n void\n-TokenStream::visit (Lifetime &lifetime)\n+TokenCollector::visit (Lifetime &lifetime)\n {\n   // Syntax:\n   // Lifetime :\n@@ -789,7 +791,7 @@ TokenStream::visit (Lifetime &lifetime)\n }\n \n void\n-TokenStream::visit (LifetimeParam &lifetime_param)\n+TokenCollector::visit (LifetimeParam &lifetime_param)\n {\n   // Syntax:\n   //   LIFETIME_OR_LABEL ( : LifetimeBounds )?\n@@ -812,7 +814,7 @@ TokenStream::visit (LifetimeParam &lifetime_param)\n }\n \n void\n-TokenStream::visit (ConstGenericParam &param)\n+TokenCollector::visit (ConstGenericParam &param)\n {\n   // Syntax:\n   // const IDENTIFIER : Type ( = Block | IDENTIFIER | -?LITERAL )?\n@@ -830,7 +832,7 @@ TokenStream::visit (ConstGenericParam &param)\n }\n \n void\n-TokenStream::visit (PathExprSegment &segment)\n+TokenCollector::visit (PathExprSegment &segment)\n {\n   visit (segment.get_ident_segment ());\n   if (segment.has_generic_args ())\n@@ -866,7 +868,7 @@ TokenStream::visit (PathExprSegment &segment)\n }\n \n void\n-TokenStream::visit (PathInExpression &path)\n+TokenCollector::visit (PathInExpression &path)\n {\n   if (path.opening_scope_resolution ())\n     {\n@@ -878,7 +880,7 @@ TokenStream::visit (PathInExpression &path)\n }\n \n void\n-TokenStream::visit (TypePathSegment &segment)\n+TokenCollector::visit (TypePathSegment &segment)\n {\n   // Syntax:\n   //    PathIdentSegment\n@@ -889,7 +891,7 @@ TokenStream::visit (TypePathSegment &segment)\n }\n \n void\n-TokenStream::visit (TypePathSegmentGeneric &segment)\n+TokenCollector::visit (TypePathSegmentGeneric &segment)\n {\n   // Syntax:\n   //    PathIdentSegment `::`? (GenericArgs)?\n@@ -926,7 +928,7 @@ TokenStream::visit (TypePathSegmentGeneric &segment)\n }\n \n void\n-TokenStream::visit (GenericArgsBinding &binding)\n+TokenCollector::visit (GenericArgsBinding &binding)\n {\n   // Syntax:\n   //    IDENTIFIER `=` Type\n@@ -939,7 +941,7 @@ TokenStream::visit (GenericArgsBinding &binding)\n }\n \n void\n-TokenStream::visit (GenericArg &arg)\n+TokenCollector::visit (GenericArg &arg)\n {\n   // `GenericArg` implements `accept_vis` but it is not useful for this case as\n   // it ignores unresolved cases (`Kind::Either`).\n@@ -963,7 +965,7 @@ TokenStream::visit (GenericArg &arg)\n }\n \n void\n-TokenStream::visit (TypePathSegmentFunction &segment)\n+TokenCollector::visit (TypePathSegmentFunction &segment)\n {\n   // Syntax:\n   //   PathIdentSegment `::`? (TypePathFn)?\n@@ -981,7 +983,7 @@ TokenStream::visit (TypePathSegmentFunction &segment)\n }\n \n void\n-TokenStream::visit (TypePathFunction &type_path_fn)\n+TokenCollector::visit (TypePathFunction &type_path_fn)\n {\n   // Syntax:\n   //   `(` TypePathFnInputs? `)` (`->` Type)?\n@@ -1001,7 +1003,7 @@ TokenStream::visit (TypePathFunction &type_path_fn)\n }\n \n void\n-TokenStream::visit (TypePath &path)\n+TokenCollector::visit (TypePath &path)\n {\n   // Syntax:\n   //    `::`? TypePathSegment (`::` TypePathSegment)*\n@@ -1013,7 +1015,7 @@ TokenStream::visit (TypePath &path)\n }\n \n void\n-TokenStream::visit (PathIdentSegment &segment)\n+TokenCollector::visit (PathIdentSegment &segment)\n {\n   if (segment.is_super_segment ())\n     {\n@@ -1040,7 +1042,7 @@ TokenStream::visit (PathIdentSegment &segment)\n }\n \n void\n-TokenStream::visit (QualifiedPathInExpression &path)\n+TokenCollector::visit (QualifiedPathInExpression &path)\n {\n   visit (path.get_qualified_path_type ());\n   for (auto &segment : path.get_segments ())\n@@ -1051,7 +1053,7 @@ TokenStream::visit (QualifiedPathInExpression &path)\n }\n \n void\n-TokenStream::visit (QualifiedPathType &path)\n+TokenCollector::visit (QualifiedPathType &path)\n {\n   tokens.push_back (Rust::Token::make (LEFT_ANGLE, path.get_locus ()));\n   visit (path.get_type ());\n@@ -1064,7 +1066,7 @@ TokenStream::visit (QualifiedPathType &path)\n }\n \n void\n-TokenStream::visit (QualifiedPathInType &path)\n+TokenCollector::visit (QualifiedPathInType &path)\n {\n   visit (path.get_qualified_path_type ());\n \n@@ -1078,7 +1080,7 @@ TokenStream::visit (QualifiedPathInType &path)\n }\n \n void\n-TokenStream::visit (Literal &lit, Location locus)\n+TokenCollector::visit (Literal &lit, Location locus)\n {\n   auto value = lit.as_string ();\n   switch (lit.get_lit_type ())\n@@ -1121,28 +1123,28 @@ TokenStream::visit (Literal &lit, Location locus)\n }\n \n void\n-TokenStream::visit (LiteralExpr &expr)\n+TokenCollector::visit (LiteralExpr &expr)\n {\n   auto lit = expr.get_literal ();\n   visit (lit, expr.get_locus ());\n }\n \n void\n-TokenStream::visit (AttrInputLiteral &literal)\n+TokenCollector::visit (AttrInputLiteral &literal)\n {\n   tokens.push_back (Rust::Token::make (EQUAL, Location ()));\n   visit (literal.get_literal ());\n }\n \n void\n-TokenStream::visit (MetaItemLitExpr &item)\n+TokenCollector::visit (MetaItemLitExpr &item)\n {\n   auto lit = item.get_literal ();\n   visit (lit);\n }\n \n void\n-TokenStream::visit (MetaItemPathLit &item)\n+TokenCollector::visit (MetaItemPathLit &item)\n {\n   auto path = item.get_path ();\n   auto lit = item.get_literal ();\n@@ -1152,7 +1154,7 @@ TokenStream::visit (MetaItemPathLit &item)\n }\n \n void\n-TokenStream::visit (BorrowExpr &expr)\n+TokenCollector::visit (BorrowExpr &expr)\n {\n   tokens.push_back (Rust::Token::make (AMP, expr.get_locus ()));\n   if (expr.get_is_double_borrow ())\n@@ -1164,21 +1166,21 @@ TokenStream::visit (BorrowExpr &expr)\n }\n \n void\n-TokenStream::visit (DereferenceExpr &expr)\n+TokenCollector::visit (DereferenceExpr &expr)\n {\n   tokens.push_back (Rust::Token::make (ASTERISK, expr.get_locus ()));\n   visit (expr.get_dereferenced_expr ());\n }\n \n void\n-TokenStream::visit (ErrorPropagationExpr &expr)\n+TokenCollector::visit (ErrorPropagationExpr &expr)\n {\n   visit (expr.get_propagating_expr ());\n   tokens.push_back (Rust::Token::make (QUESTION_MARK, expr.get_locus ()));\n }\n \n void\n-TokenStream::visit (NegationExpr &expr)\n+TokenCollector::visit (NegationExpr &expr)\n {\n   switch (expr.get_expr_type ())\n     {\n@@ -1193,7 +1195,7 @@ TokenStream::visit (NegationExpr &expr)\n }\n \n void\n-TokenStream::visit (ArithmeticOrLogicalExpr &expr)\n+TokenCollector::visit (ArithmeticOrLogicalExpr &expr)\n {\n   visit (expr.get_left_expr ());\n   switch (expr.get_expr_type ())\n@@ -1243,7 +1245,7 @@ TokenStream::visit (ArithmeticOrLogicalExpr &expr)\n }\n \n void\n-TokenStream::visit (ComparisonExpr &expr)\n+TokenCollector::visit (ComparisonExpr &expr)\n {\n   visit (expr.get_left_expr ());\n \n@@ -1274,7 +1276,7 @@ TokenStream::visit (ComparisonExpr &expr)\n }\n \n void\n-TokenStream::visit (LazyBooleanExpr &expr)\n+TokenCollector::visit (LazyBooleanExpr &expr)\n {\n   visit (expr.get_left_expr ());\n \n@@ -1292,23 +1294,23 @@ TokenStream::visit (LazyBooleanExpr &expr)\n }\n \n void\n-TokenStream::visit (TypeCastExpr &expr)\n+TokenCollector::visit (TypeCastExpr &expr)\n {\n   visit (expr.get_casted_expr ());\n   tokens.push_back (Rust::Token::make (AS, expr.get_locus ()));\n   visit (expr.get_type_to_cast_to ());\n }\n \n void\n-TokenStream::visit (AssignmentExpr &expr)\n+TokenCollector::visit (AssignmentExpr &expr)\n {\n   expr.visit_lhs (*this);\n   tokens.push_back (Rust::Token::make (EQUAL, expr.get_locus ()));\n   expr.visit_rhs (*this);\n }\n \n void\n-TokenStream::visit (CompoundAssignmentExpr &expr)\n+TokenCollector::visit (CompoundAssignmentExpr &expr)\n {\n   visit (expr.get_left_expr ());\n \n@@ -1349,37 +1351,37 @@ TokenStream::visit (CompoundAssignmentExpr &expr)\n }\n \n void\n-TokenStream::visit (GroupedExpr &expr)\n+TokenCollector::visit (GroupedExpr &expr)\n {\n   tokens.push_back (Rust::Token::make (LEFT_PAREN, expr.get_locus ()));\n   visit (expr.get_expr_in_parens ());\n   tokens.push_back (Rust::Token::make (RIGHT_PAREN, expr.get_locus ()));\n }\n \n void\n-TokenStream::visit (ArrayElemsValues &elems)\n+TokenCollector::visit (ArrayElemsValues &elems)\n {\n   visit_items_joined_by_separator (elems.get_values (), COMMA);\n }\n \n void\n-TokenStream::visit (ArrayElemsCopied &elems)\n+TokenCollector::visit (ArrayElemsCopied &elems)\n {\n   visit (elems.get_elem_to_copy ());\n   tokens.push_back (Rust::Token::make (SEMICOLON, Location ()));\n   visit (elems.get_num_copies ());\n }\n \n void\n-TokenStream::visit (ArrayExpr &expr)\n+TokenCollector::visit (ArrayExpr &expr)\n {\n   tokens.push_back (Rust::Token::make (LEFT_SQUARE, expr.get_locus ()));\n   visit (expr.get_array_elems ());\n   tokens.push_back (Rust::Token::make (RIGHT_SQUARE, Location ()));\n }\n \n void\n-TokenStream::visit (ArrayIndexExpr &expr)\n+TokenCollector::visit (ArrayIndexExpr &expr)\n {\n   visit (expr.get_array_expr ());\n   tokens.push_back (Rust::Token::make (LEFT_SQUARE, expr.get_locus ()));\n@@ -1388,7 +1390,7 @@ TokenStream::visit (ArrayIndexExpr &expr)\n }\n \n void\n-TokenStream::visit (TupleExpr &expr)\n+TokenCollector::visit (TupleExpr &expr)\n {\n   visit_items_as_lines (expr.get_outer_attrs ());\n   tokens.push_back (Rust::Token::make (LEFT_PAREN, expr.get_locus ()));\n@@ -1397,7 +1399,7 @@ TokenStream::visit (TupleExpr &expr)\n }\n \n void\n-TokenStream::visit (TupleIndexExpr &expr)\n+TokenCollector::visit (TupleIndexExpr &expr)\n {\n   visit (expr.get_tuple_expr ());\n   tokens.push_back (Rust::Token::make (DOT, expr.get_locus ()));\n@@ -1407,13 +1409,13 @@ TokenStream::visit (TupleIndexExpr &expr)\n }\n \n void\n-TokenStream::visit (StructExprStruct &expr)\n+TokenCollector::visit (StructExprStruct &expr)\n {\n   visit (expr.get_struct_name ());\n }\n \n void\n-TokenStream::visit (StructExprFieldIdentifier &expr)\n+TokenCollector::visit (StructExprFieldIdentifier &expr)\n {\n   // TODO: Add attributes\n   // visit_items_as_lines (expr.get_attrs ());\n@@ -1423,7 +1425,7 @@ TokenStream::visit (StructExprFieldIdentifier &expr)\n }\n \n void\n-TokenStream::visit (StructExprFieldIdentifierValue &expr)\n+TokenCollector::visit (StructExprFieldIdentifierValue &expr)\n {\n   // TODO: Add attributes\n   // visit_items_as_lines (expr.get_attrs ());\n@@ -1435,7 +1437,7 @@ TokenStream::visit (StructExprFieldIdentifierValue &expr)\n }\n \n void\n-TokenStream::visit (StructExprFieldIndexValue &expr)\n+TokenCollector::visit (StructExprFieldIndexValue &expr)\n {\n   // TODO: Add attributes\n   // visit_items_as_lines (expr.get_attrs ());\n@@ -1446,14 +1448,14 @@ TokenStream::visit (StructExprFieldIndexValue &expr)\n }\n \n void\n-TokenStream::visit (StructBase &base)\n+TokenCollector::visit (StructBase &base)\n {\n   tokens.push_back (Rust::Token::make (DOT_DOT, Location ()));\n   visit (base.get_base_struct ());\n }\n \n void\n-TokenStream::visit (StructExprStructFields &expr)\n+TokenCollector::visit (StructExprStructFields &expr)\n {\n   visit (expr.get_struct_name ());\n   tokens.push_back (Rust::Token::make (LEFT_CURLY, expr.get_locus ()));\n@@ -1471,14 +1473,14 @@ TokenStream::visit (StructExprStructFields &expr)\n }\n \n void\n-TokenStream::visit (StructExprStructBase &)\n+TokenCollector::visit (StructExprStructBase &)\n {\n   // FIXME: Implement this node\n   gcc_unreachable ();\n }\n \n void\n-TokenStream::visit (CallExpr &expr)\n+TokenCollector::visit (CallExpr &expr)\n {\n   visit (expr.get_function_expr ());\n \n@@ -1490,7 +1492,7 @@ TokenStream::visit (CallExpr &expr)\n }\n \n void\n-TokenStream::visit (MethodCallExpr &expr)\n+TokenCollector::visit (MethodCallExpr &expr)\n {\n   visit (expr.get_receiver_expr ());\n   tokens.push_back (Rust::Token::make (DOT, expr.get_locus ()));\n@@ -1502,7 +1504,7 @@ TokenStream::visit (MethodCallExpr &expr)\n }\n \n void\n-TokenStream::visit (FieldAccessExpr &expr)\n+TokenCollector::visit (FieldAccessExpr &expr)\n {\n   visit (expr.get_receiver_expr ());\n   tokens.push_back (Rust::Token::make (DOT, expr.get_locus ()));\n@@ -1512,7 +1514,7 @@ TokenStream::visit (FieldAccessExpr &expr)\n }\n \n void\n-TokenStream::visit (ClosureParam &param)\n+TokenCollector::visit (ClosureParam &param)\n {\n   visit_items_as_lines (param.get_outer_attrs ());\n   visit (param.get_pattern ());\n@@ -1524,7 +1526,7 @@ TokenStream::visit (ClosureParam &param)\n }\n \n void\n-TokenStream::visit_closure_common (ClosureExpr &expr)\n+TokenCollector::visit_closure_common (ClosureExpr &expr)\n {\n   if (expr.get_has_move ())\n     {\n@@ -1536,14 +1538,14 @@ TokenStream::visit_closure_common (ClosureExpr &expr)\n }\n \n void\n-TokenStream::visit (ClosureExprInner &expr)\n+TokenCollector::visit (ClosureExprInner &expr)\n {\n   visit_closure_common (expr);\n   visit (expr.get_definition_expr ());\n }\n \n void\n-TokenStream::visit (BlockExpr &expr)\n+TokenCollector::visit (BlockExpr &expr)\n {\n   tokens.push_back (Rust::Token::make (LEFT_CURLY, expr.get_locus ()));\n   newline ();\n@@ -1565,7 +1567,7 @@ TokenStream::visit (BlockExpr &expr)\n }\n \n void\n-TokenStream::visit (ClosureExprInnerTyped &expr)\n+TokenCollector::visit (ClosureExprInnerTyped &expr)\n {\n   visit_closure_common (expr);\n   tokens.push_back (Rust::Token::make (RETURN_TYPE, expr.get_locus ()));\n@@ -1574,15 +1576,15 @@ TokenStream::visit (ClosureExprInnerTyped &expr)\n }\n \n void\n-TokenStream::visit (ContinueExpr &expr)\n+TokenCollector::visit (ContinueExpr &expr)\n {\n   tokens.push_back (Rust::Token::make (CONTINUE, expr.get_locus ()));\n   if (expr.has_label ())\n     visit (expr.get_label ());\n }\n \n void\n-TokenStream::visit (BreakExpr &expr)\n+TokenCollector::visit (BreakExpr &expr)\n {\n   tokens.push_back (Rust::Token::make (BREAK, expr.get_locus ()));\n   if (expr.has_label ())\n@@ -1592,87 +1594,87 @@ TokenStream::visit (BreakExpr &expr)\n }\n \n void\n-TokenStream::visit (RangeFromToExpr &expr)\n+TokenCollector::visit (RangeFromToExpr &expr)\n {\n   visit (expr.get_from_expr ());\n   tokens.push_back (Rust::Token::make (DOT_DOT, expr.get_locus ()));\n   visit (expr.get_to_expr ());\n }\n \n void\n-TokenStream::visit (RangeFromExpr &expr)\n+TokenCollector::visit (RangeFromExpr &expr)\n {\n   visit (expr.get_from_expr ());\n   tokens.push_back (Rust::Token::make (DOT_DOT, expr.get_locus ()));\n }\n \n void\n-TokenStream::visit (RangeToExpr &expr)\n+TokenCollector::visit (RangeToExpr &expr)\n {\n   tokens.push_back (Rust::Token::make (DOT_DOT, expr.get_locus ()));\n   visit (expr.get_to_expr ());\n }\n \n void\n-TokenStream::visit (RangeFullExpr &expr)\n+TokenCollector::visit (RangeFullExpr &expr)\n {\n   tokens.push_back (Rust::Token::make (DOT_DOT, expr.get_locus ()));\n }\n \n void\n-TokenStream::visit (RangeFromToInclExpr &expr)\n+TokenCollector::visit (RangeFromToInclExpr &expr)\n {\n   visit (expr.get_from_expr ());\n   tokens.push_back (Rust::Token::make (DOT_DOT_EQ, expr.get_locus ()));\n   visit (expr.get_to_expr ());\n }\n \n void\n-TokenStream::visit (RangeToInclExpr &expr)\n+TokenCollector::visit (RangeToInclExpr &expr)\n {\n   tokens.push_back (Rust::Token::make (DOT_DOT_EQ, expr.get_locus ()));\n   visit (expr.get_to_expr ());\n }\n \n void\n-TokenStream::visit (ReturnExpr &expr)\n+TokenCollector::visit (ReturnExpr &expr)\n {\n   tokens.push_back (Rust::Token::make (RETURN_TOK, expr.get_locus ()));\n   if (expr.has_returned_expr ())\n     visit (expr.get_returned_expr ());\n }\n \n void\n-TokenStream::visit (UnsafeBlockExpr &expr)\n+TokenCollector::visit (UnsafeBlockExpr &expr)\n {\n   tokens.push_back (Rust::Token::make (UNSAFE, expr.get_locus ()));\n   visit (expr.get_block_expr ());\n }\n \n void\n-TokenStream::visit (LoopLabel &label)\n+TokenCollector::visit (LoopLabel &label)\n {\n   visit (label.get_lifetime ());\n   tokens.push_back (Rust::Token::make (COLON, label.get_locus ()));\n }\n \n void\n-TokenStream::visit_loop_common (BaseLoopExpr &expr)\n+TokenCollector::visit_loop_common (BaseLoopExpr &expr)\n {\n   if (expr.has_loop_label ())\n     visit (expr.get_loop_label ());\n }\n \n void\n-TokenStream::visit (LoopExpr &expr)\n+TokenCollector::visit (LoopExpr &expr)\n {\n   visit_loop_common (expr);\n   tokens.push_back (Rust::Token::make (LOOP, expr.get_locus ()));\n   visit (expr.get_loop_block ());\n }\n \n void\n-TokenStream::visit (WhileLoopExpr &expr)\n+TokenCollector::visit (WhileLoopExpr &expr)\n {\n   visit_loop_common (expr);\n   tokens.push_back (Rust::Token::make (WHILE, expr.get_locus ()));\n@@ -1681,7 +1683,7 @@ TokenStream::visit (WhileLoopExpr &expr)\n }\n \n void\n-TokenStream::visit (WhileLetLoopExpr &expr)\n+TokenCollector::visit (WhileLetLoopExpr &expr)\n {\n   visit_loop_common (expr);\n   tokens.push_back (Rust::Token::make (WHILE, expr.get_locus ()));\n@@ -1697,7 +1699,7 @@ TokenStream::visit (WhileLetLoopExpr &expr)\n }\n \n void\n-TokenStream::visit (ForLoopExpr &expr)\n+TokenCollector::visit (ForLoopExpr &expr)\n {\n   visit_loop_common (expr);\n   tokens.push_back (Rust::Token::make (FOR, expr.get_locus ()));\n@@ -1708,15 +1710,15 @@ TokenStream::visit (ForLoopExpr &expr)\n }\n \n void\n-TokenStream::visit (IfExpr &expr)\n+TokenCollector::visit (IfExpr &expr)\n {\n   tokens.push_back (Rust::Token::make (IF, expr.get_locus ()));\n   visit (expr.get_condition_expr ());\n   visit (expr.get_if_block ());\n }\n \n void\n-TokenStream::visit (IfExprConseqElse &expr)\n+TokenCollector::visit (IfExprConseqElse &expr)\n {\n   visit (static_cast<IfExpr &> (expr));\n   indentation ();\n@@ -1725,7 +1727,7 @@ TokenStream::visit (IfExprConseqElse &expr)\n }\n \n void\n-TokenStream::visit (IfLetExpr &expr)\n+TokenCollector::visit (IfLetExpr &expr)\n {\n   tokens.push_back (Rust::Token::make (IF, expr.get_locus ()));\n   tokens.push_back (Rust::Token::make (LET, Location ()));\n@@ -1739,7 +1741,7 @@ TokenStream::visit (IfLetExpr &expr)\n }\n \n void\n-TokenStream::visit (IfLetExprConseqElse &expr)\n+TokenCollector::visit (IfLetExprConseqElse &expr)\n {\n   visit (static_cast<IfLetExpr &> (expr));\n   indentation ();\n@@ -1748,7 +1750,7 @@ TokenStream::visit (IfLetExprConseqElse &expr)\n }\n \n void\n-TokenStream::visit (MatchArm &arm)\n+TokenCollector::visit (MatchArm &arm)\n {\n   visit_items_as_lines (arm.get_outer_attrs ());\n   for (auto &pattern : arm.get_patterns ())\n@@ -1763,7 +1765,7 @@ TokenStream::visit (MatchArm &arm)\n }\n \n void\n-TokenStream::visit (MatchCase &match_case)\n+TokenCollector::visit (MatchCase &match_case)\n {\n   visit (match_case.get_arm ());\n   tokens.push_back (Rust::Token::make (MATCH_ARROW, Location ()));\n@@ -1772,7 +1774,7 @@ TokenStream::visit (MatchCase &match_case)\n }\n \n void\n-TokenStream::visit (MatchExpr &expr)\n+TokenCollector::visit (MatchExpr &expr)\n {\n   tokens.push_back (Rust::Token::make (MATCH_TOK, expr.get_locus ()));\n   visit (expr.get_scrutinee_expr ());\n@@ -1786,7 +1788,7 @@ TokenStream::visit (MatchExpr &expr)\n }\n \n void\n-TokenStream::visit (AwaitExpr &expr)\n+TokenCollector::visit (AwaitExpr &expr)\n {\n   visit (expr.get_awaited_expr ());\n   tokens.push_back (Rust::Token::make (DOT, expr.get_locus ()));\n@@ -1795,7 +1797,7 @@ TokenStream::visit (AwaitExpr &expr)\n }\n \n void\n-TokenStream::visit (AsyncBlockExpr &expr)\n+TokenCollector::visit (AsyncBlockExpr &expr)\n {\n   tokens.push_back (Rust::Token::make (ASYNC, expr.get_locus ()));\n   if (expr.get_has_move ())\n@@ -1806,7 +1808,7 @@ TokenStream::visit (AsyncBlockExpr &expr)\n // rust-item.h\n \n void\n-TokenStream::visit (TypeParam &param)\n+TokenCollector::visit (TypeParam &param)\n {\n   // Syntax:\n   //    IDENTIFIER( : TypeParamBounds? )? ( = Type )?\n@@ -1829,7 +1831,7 @@ TokenStream::visit (TypeParam &param)\n }\n \n void\n-TokenStream::visit (WhereClause &rule)\n+TokenCollector::visit (WhereClause &rule)\n {\n   // Syntax:\n   // \twhere ( WhereClauseItem , )* WhereClauseItem ?\n@@ -1845,7 +1847,7 @@ TokenStream::visit (WhereClause &rule)\n }\n \n void\n-TokenStream::visit (LifetimeWhereClauseItem &item)\n+TokenCollector::visit (LifetimeWhereClauseItem &item)\n {\n   // Syntax:\n   // \tLifetime : LifetimeBounds\n@@ -1858,7 +1860,7 @@ TokenStream::visit (LifetimeWhereClauseItem &item)\n }\n \n void\n-TokenStream::visit (TypeBoundWhereClauseItem &item)\n+TokenCollector::visit (TypeBoundWhereClauseItem &item)\n {\n   // Syntax:\n   // \tForLifetimes? Type : TypeParamBounds?\n@@ -1877,7 +1879,7 @@ TokenStream::visit (TypeBoundWhereClauseItem &item)\n }\n \n void\n-TokenStream::visit (Method &method)\n+TokenCollector::visit (Method &method)\n {\n   visit (method.get_visibility ());\n   auto method_name = method.get_method_name ();\n@@ -1910,7 +1912,7 @@ TokenStream::visit (Method &method)\n }\n \n void\n-TokenStream::visit (Module &module)\n+TokenCollector::visit (Module &module)\n {\n   //  Syntax:\n   //\tmod IDENTIFIER ;\n@@ -1947,7 +1949,7 @@ TokenStream::visit (Module &module)\n }\n \n void\n-TokenStream::visit (ExternCrate &crate)\n+TokenCollector::visit (ExternCrate &crate)\n {\n   tokens.push_back (Rust::Token::make (EXTERN_TOK, crate.get_locus ()));\n   tokens.push_back (Rust::Token::make (CRATE, Location ()));\n@@ -1966,7 +1968,7 @@ TokenStream::visit (ExternCrate &crate)\n }\n \n void\n-TokenStream::visit (UseTreeGlob &use_tree)\n+TokenCollector::visit (UseTreeGlob &use_tree)\n {\n   switch (use_tree.get_glob_type ())\n     {\n@@ -1986,7 +1988,7 @@ TokenStream::visit (UseTreeGlob &use_tree)\n }\n \n void\n-TokenStream::visit (UseTreeList &use_tree)\n+TokenCollector::visit (UseTreeList &use_tree)\n {\n   switch (use_tree.get_path_type ())\n     {\n@@ -2012,7 +2014,7 @@ TokenStream::visit (UseTreeList &use_tree)\n }\n \n void\n-TokenStream::visit (UseTreeRebind &use_tree)\n+TokenCollector::visit (UseTreeRebind &use_tree)\n {\n   auto path = use_tree.get_path ();\n   visit (path);\n@@ -2035,7 +2037,7 @@ TokenStream::visit (UseTreeRebind &use_tree)\n }\n \n void\n-TokenStream::visit (UseDeclaration &decl)\n+TokenCollector::visit (UseDeclaration &decl)\n {\n   tokens.push_back (Rust::Token::make (USE, decl.get_locus ()));\n   visit (*decl.get_tree ());\n@@ -2044,7 +2046,7 @@ TokenStream::visit (UseDeclaration &decl)\n }\n \n void\n-TokenStream::visit (Function &function)\n+TokenCollector::visit (Function &function)\n {\n   // Syntax:\n   //   FunctionQualifiers fn IDENTIFIER GenericParams?\n@@ -2083,7 +2085,7 @@ TokenStream::visit (Function &function)\n }\n \n void\n-TokenStream::visit (TypeAlias &type_alias)\n+TokenCollector::visit (TypeAlias &type_alias)\n {\n   // Syntax:\n   // Visibility? type IDENTIFIER GenericParams? WhereClause? = Type;\n@@ -2106,7 +2108,7 @@ TokenStream::visit (TypeAlias &type_alias)\n }\n \n void\n-TokenStream::visit (StructStruct &struct_item)\n+TokenCollector::visit (StructStruct &struct_item)\n {\n   if (struct_item.has_visibility ())\n     visit (struct_item.get_visibility ());\n@@ -2130,7 +2132,7 @@ TokenStream::visit (StructStruct &struct_item)\n }\n \n void\n-TokenStream::visit (TupleStruct &tuple_struct)\n+TokenCollector::visit (TupleStruct &tuple_struct)\n {\n   auto struct_name = tuple_struct.get_identifier ();\n   tokens.push_back (Rust::Token::make (STRUCT_TOK, tuple_struct.get_locus ()));\n@@ -2149,15 +2151,15 @@ TokenStream::visit (TupleStruct &tuple_struct)\n }\n \n void\n-TokenStream::visit (EnumItem &item)\n+TokenCollector::visit (EnumItem &item)\n {\n   auto id = item.get_identifier ();\n   tokens.push_back (\n     Rust::Token::make_identifier (item.get_locus (), std::move (id)));\n }\n \n void\n-TokenStream::visit (EnumItemTuple &item)\n+TokenCollector::visit (EnumItemTuple &item)\n {\n   auto id = item.get_identifier ();\n   tokens.push_back (\n@@ -2168,7 +2170,7 @@ TokenStream::visit (EnumItemTuple &item)\n }\n \n void\n-TokenStream::visit (EnumItemStruct &item)\n+TokenCollector::visit (EnumItemStruct &item)\n {\n   auto id = item.get_identifier ();\n   tokens.push_back (\n@@ -2178,7 +2180,7 @@ TokenStream::visit (EnumItemStruct &item)\n }\n \n void\n-TokenStream::visit (EnumItemDiscriminant &item)\n+TokenCollector::visit (EnumItemDiscriminant &item)\n {\n   auto id = item.get_identifier ();\n   tokens.push_back (\n@@ -2188,7 +2190,7 @@ TokenStream::visit (EnumItemDiscriminant &item)\n }\n \n void\n-TokenStream::visit (Enum &enumeration)\n+TokenCollector::visit (Enum &enumeration)\n {\n   if (enumeration.has_visibility ())\n     visit (enumeration.get_visibility ());\n@@ -2206,7 +2208,7 @@ TokenStream::visit (Enum &enumeration)\n }\n \n void\n-TokenStream::visit (Union &union_item)\n+TokenCollector::visit (Union &union_item)\n {\n   visit_items_as_lines (union_item.get_outer_attrs ());\n   auto id = union_item.get_identifier ();\n@@ -2223,7 +2225,7 @@ TokenStream::visit (Union &union_item)\n }\n \n void\n-TokenStream::visit (ConstantItem &item)\n+TokenCollector::visit (ConstantItem &item)\n {\n   tokens.push_back (Rust::Token::make (CONST, item.get_locus ()));\n   if (item.is_unnamed ())\n@@ -2247,7 +2249,7 @@ TokenStream::visit (ConstantItem &item)\n }\n \n void\n-TokenStream::visit (StaticItem &item)\n+TokenCollector::visit (StaticItem &item)\n {\n   tokens.push_back (Rust::Token::make (STATIC_TOK, item.get_locus ()));\n   if (item.is_mutable ())\n@@ -2265,8 +2267,8 @@ TokenStream::visit (StaticItem &item)\n }\n \n void\n-TokenStream::visit_function_common (std::unique_ptr<Type> &return_type,\n-\t\t\t\t    std::unique_ptr<BlockExpr> &block)\n+TokenCollector::visit_function_common (std::unique_ptr<Type> &return_type,\n+\t\t\t\t       std::unique_ptr<BlockExpr> &block)\n {\n   // FIXME: This should format the `<vis> fn <name> ( [args] )` as well\n   if (return_type)\n@@ -2287,7 +2289,7 @@ TokenStream::visit_function_common (std::unique_ptr<Type> &return_type,\n }\n \n void\n-TokenStream::visit (TraitItemFunc &item)\n+TokenCollector::visit (TraitItemFunc &item)\n {\n   auto func = item.get_trait_function_decl ();\n   auto id = func.get_identifier ();\n@@ -2303,7 +2305,7 @@ TokenStream::visit (TraitItemFunc &item)\n }\n \n void\n-TokenStream::visit (SelfParam &param)\n+TokenCollector::visit (SelfParam &param)\n {\n   if (param.get_has_ref ())\n     {\n@@ -2324,7 +2326,7 @@ TokenStream::visit (SelfParam &param)\n }\n \n void\n-TokenStream::visit (TraitItemMethod &item)\n+TokenCollector::visit (TraitItemMethod &item)\n {\n   auto method = item.get_trait_method_decl ();\n   auto id = method.get_identifier ();\n@@ -2347,7 +2349,7 @@ TokenStream::visit (TraitItemMethod &item)\n }\n \n void\n-TokenStream::visit (TraitItemConst &item)\n+TokenCollector::visit (TraitItemConst &item)\n {\n   auto id = item.get_identifier ();\n   indentation ();\n@@ -2360,7 +2362,7 @@ TokenStream::visit (TraitItemConst &item)\n }\n \n void\n-TokenStream::visit (TraitItemType &item)\n+TokenCollector::visit (TraitItemType &item)\n {\n   auto id = item.get_identifier ();\n   indentation ();\n@@ -2371,7 +2373,7 @@ TokenStream::visit (TraitItemType &item)\n }\n \n void\n-TokenStream::visit (Trait &trait)\n+TokenCollector::visit (Trait &trait)\n {\n   for (auto &attr : trait.get_outer_attrs ())\n     {\n@@ -2399,7 +2401,7 @@ TokenStream::visit (Trait &trait)\n }\n \n void\n-TokenStream::visit (InherentImpl &impl)\n+TokenCollector::visit (InherentImpl &impl)\n {\n   tokens.push_back (Rust::Token::make (IMPL, impl.get_locus ()));\n   // FIXME: Handle generics\n@@ -2415,7 +2417,7 @@ TokenStream::visit (InherentImpl &impl)\n }\n \n void\n-TokenStream::visit (TraitImpl &impl)\n+TokenCollector::visit (TraitImpl &impl)\n {\n   tokens.push_back (Rust::Token::make (IMPL, impl.get_locus ()));\n   visit (impl.get_trait_path ());\n@@ -2440,7 +2442,7 @@ TokenStream::visit (TraitImpl &impl)\n }\n \n void\n-TokenStream::visit (ExternalTypeItem &type)\n+TokenCollector::visit (ExternalTypeItem &type)\n {\n   visit (type.get_visibility ());\n \n@@ -2451,7 +2453,7 @@ TokenStream::visit (ExternalTypeItem &type)\n }\n \n void\n-TokenStream::visit (ExternalStaticItem &item)\n+TokenCollector::visit (ExternalStaticItem &item)\n {\n   auto id = item.get_identifier ();\n   visit_items_as_lines (item.get_outer_attrs ());\n@@ -2469,7 +2471,7 @@ TokenStream::visit (ExternalStaticItem &item)\n }\n \n void\n-TokenStream::visit (ExternalFunctionItem &function)\n+TokenCollector::visit (ExternalFunctionItem &function)\n {\n   visit (function.get_visibility ());\n \n@@ -2489,7 +2491,7 @@ TokenStream::visit (ExternalFunctionItem &function)\n }\n \n void\n-TokenStream::visit (ExternBlock &block)\n+TokenCollector::visit (ExternBlock &block)\n {\n   tokens.push_back (Rust::Token::make (EXTERN_TOK, block.get_locus ()));\n \n@@ -2520,7 +2522,7 @@ get_delimiters (DelimType delim)\n }\n \n void\n-TokenStream::visit (MacroMatchFragment &match)\n+TokenCollector::visit (MacroMatchFragment &match)\n {\n   auto id = match.get_ident ();\n   auto frag_spec = match.get_frag_spec ().as_string ();\n@@ -2532,7 +2534,7 @@ TokenStream::visit (MacroMatchFragment &match)\n }\n \n void\n-TokenStream::visit (MacroMatchRepetition &repetition)\n+TokenCollector::visit (MacroMatchRepetition &repetition)\n {\n   tokens.push_back (Rust::Token::make (DOLLAR_SIGN, Location ()));\n   tokens.push_back (Rust::Token::make (LEFT_PAREN, Location ()));\n@@ -2564,7 +2566,7 @@ TokenStream::visit (MacroMatchRepetition &repetition)\n }\n \n void\n-TokenStream::visit (MacroMatcher &matcher)\n+TokenCollector::visit (MacroMatcher &matcher)\n {\n   auto delimiters = get_delimiters (matcher.get_delim_type ());\n \n@@ -2579,7 +2581,7 @@ TokenStream::visit (MacroMatcher &matcher)\n }\n \n void\n-TokenStream::visit (MacroRule &rule)\n+TokenCollector::visit (MacroRule &rule)\n {\n   visit (rule.get_matcher ());\n   tokens.push_back (Rust::Token::make (MATCH_ARROW, rule.get_locus ()));\n@@ -2588,7 +2590,7 @@ TokenStream::visit (MacroRule &rule)\n }\n \n void\n-TokenStream::visit (MacroRulesDefinition &rules_def)\n+TokenCollector::visit (MacroRulesDefinition &rules_def)\n {\n   for (auto &outer_attr : rules_def.get_outer_attrs ())\n     visit (outer_attr);\n@@ -2606,7 +2608,7 @@ TokenStream::visit (MacroRulesDefinition &rules_def)\n }\n \n void\n-TokenStream::visit (MacroInvocation &invocation)\n+TokenCollector::visit (MacroInvocation &invocation)\n {\n   auto data = invocation.get_invoc_data ();\n   visit (data.get_path ());\n@@ -2617,14 +2619,14 @@ TokenStream::visit (MacroInvocation &invocation)\n }\n \n void\n-TokenStream::visit (MetaItemPath &item)\n+TokenCollector::visit (MetaItemPath &item)\n {\n   auto path = item.to_path_item ();\n   visit (path);\n }\n \n void\n-TokenStream::visit (MetaItemSeq &item)\n+TokenCollector::visit (MetaItemSeq &item)\n {\n   visit (item.get_path ());\n   // TODO: Double check this, there is probably a mistake.\n@@ -2634,15 +2636,15 @@ TokenStream::visit (MetaItemSeq &item)\n }\n \n void\n-TokenStream::visit (MetaWord &word)\n+TokenCollector::visit (MetaWord &word)\n {\n   auto id = word.get_ident ();\n   tokens.push_back (\n     Rust::Token::make_identifier (word.get_locus (), std::move (id)));\n }\n \n void\n-TokenStream::visit (MetaNameValueStr &name)\n+TokenCollector::visit (MetaNameValueStr &name)\n {\n   auto pair = name.get_name_value_pair ();\n   auto id = std::get<0> (pair);\n@@ -2657,7 +2659,7 @@ TokenStream::visit (MetaNameValueStr &name)\n }\n \n void\n-TokenStream::visit (MetaListPaths &list)\n+TokenCollector::visit (MetaListPaths &list)\n {\n   auto id = list.get_ident ();\n   tokens.push_back (\n@@ -2668,7 +2670,7 @@ TokenStream::visit (MetaListPaths &list)\n }\n \n void\n-TokenStream::visit (MetaListNameValueStr &list)\n+TokenCollector::visit (MetaListNameValueStr &list)\n {\n   auto id = list.get_ident ();\n   tokens.push_back (\n@@ -2680,13 +2682,13 @@ TokenStream::visit (MetaListNameValueStr &list)\n \n // rust-pattern.h\n void\n-TokenStream::visit (LiteralPattern &pattern)\n+TokenCollector::visit (LiteralPattern &pattern)\n {\n   visit (pattern.get_literal (), pattern.get_locus ());\n }\n \n void\n-TokenStream::visit (IdentifierPattern &pattern)\n+TokenCollector::visit (IdentifierPattern &pattern)\n {\n   if (pattern.get_is_ref ())\n     {\n@@ -2706,21 +2708,21 @@ TokenStream::visit (IdentifierPattern &pattern)\n }\n \n void\n-TokenStream::visit (WildcardPattern &pattern)\n+TokenCollector::visit (WildcardPattern &pattern)\n {\n   tokens.push_back (Rust::Token::make (UNDERSCORE, pattern.get_locus ()));\n }\n \n void\n-TokenStream::visit (RestPattern &pattern)\n+TokenCollector::visit (RestPattern &pattern)\n {\n   tokens.push_back (Rust::Token::make (DOT_DOT, pattern.get_locus ()));\n }\n \n-// void TokenStream::visit(RangePatternBound& ){}\n+// void TokenCollector::visit(RangePatternBound& ){}\n \n void\n-TokenStream::visit (RangePatternBoundLiteral &pattern)\n+TokenCollector::visit (RangePatternBoundLiteral &pattern)\n {\n   if (pattern.get_has_minus ())\n     {\n@@ -2731,19 +2733,19 @@ TokenStream::visit (RangePatternBoundLiteral &pattern)\n }\n \n void\n-TokenStream::visit (RangePatternBoundPath &pattern)\n+TokenCollector::visit (RangePatternBoundPath &pattern)\n {\n   visit (pattern.get_path ());\n }\n \n void\n-TokenStream::visit (RangePatternBoundQualPath &pattern)\n+TokenCollector::visit (RangePatternBoundQualPath &pattern)\n {\n   visit (pattern.get_qualified_path ());\n }\n \n void\n-TokenStream::visit (RangePattern &pattern)\n+TokenCollector::visit (RangePattern &pattern)\n {\n   if (pattern.get_has_lower_bound () && pattern.get_has_upper_bound ())\n     {\n@@ -2767,7 +2769,7 @@ TokenStream::visit (RangePattern &pattern)\n }\n \n void\n-TokenStream::visit (ReferencePattern &pattern)\n+TokenCollector::visit (ReferencePattern &pattern)\n {\n   if (pattern.is_double_reference ())\n     {\n@@ -2786,10 +2788,10 @@ TokenStream::visit (ReferencePattern &pattern)\n   visit (pattern.get_referenced_pattern ());\n }\n \n-// void TokenStream::visit(StructPatternField& ){}\n+// void TokenCollector::visit(StructPatternField& ){}\n \n void\n-TokenStream::visit (StructPatternFieldTuplePat &pattern)\n+TokenCollector::visit (StructPatternFieldTuplePat &pattern)\n {\n   visit_items_as_lines (pattern.get_outer_attrs ());\n   tokens.push_back (\n@@ -2800,7 +2802,7 @@ TokenStream::visit (StructPatternFieldTuplePat &pattern)\n }\n \n void\n-TokenStream::visit (StructPatternFieldIdentPat &pattern)\n+TokenCollector::visit (StructPatternFieldIdentPat &pattern)\n {\n   visit_items_as_lines (pattern.get_outer_attrs ());\n   auto id = pattern.get_identifier ();\n@@ -2810,7 +2812,7 @@ TokenStream::visit (StructPatternFieldIdentPat &pattern)\n }\n \n void\n-TokenStream::visit (StructPatternFieldIdent &pattern)\n+TokenCollector::visit (StructPatternFieldIdent &pattern)\n {\n   visit_items_as_lines (pattern.get_outer_attrs ());\n   if (pattern.is_ref ())\n@@ -2823,7 +2825,7 @@ TokenStream::visit (StructPatternFieldIdent &pattern)\n }\n \n void\n-TokenStream::visit (StructPattern &pattern)\n+TokenCollector::visit (StructPattern &pattern)\n {\n   visit (pattern.get_path ());\n   tokens.push_back (Rust::Token::make (LEFT_CURLY, pattern.get_locus ()));\n@@ -2845,10 +2847,10 @@ TokenStream::visit (StructPattern &pattern)\n   tokens.push_back (Rust::Token::make (RIGHT_CURLY, Location ()));\n }\n \n-// void TokenStream::visit(TupleStructItems& ){}\n+// void TokenCollector::visit(TupleStructItems& ){}\n \n void\n-TokenStream::visit (TupleStructItemsNoRange &pattern)\n+TokenCollector::visit (TupleStructItemsNoRange &pattern)\n {\n   for (auto &pat : pattern.get_patterns ())\n     {\n@@ -2857,7 +2859,7 @@ TokenStream::visit (TupleStructItemsNoRange &pattern)\n }\n \n void\n-TokenStream::visit (TupleStructItemsRange &pattern)\n+TokenCollector::visit (TupleStructItemsRange &pattern)\n {\n   for (auto &lower : pattern.get_lower_patterns ())\n     {\n@@ -2871,7 +2873,7 @@ TokenStream::visit (TupleStructItemsRange &pattern)\n }\n \n void\n-TokenStream::visit (TupleStructPattern &pattern)\n+TokenCollector::visit (TupleStructPattern &pattern)\n {\n   visit (pattern.get_path ());\n   tokens.push_back (Rust::Token::make (LEFT_PAREN, pattern.get_locus ()));\n@@ -2881,17 +2883,17 @@ TokenStream::visit (TupleStructPattern &pattern)\n }\n \n // void\n-// TokenStream::visit (TuplePatternItems &)\n+// TokenCollector::visit (TuplePatternItems &)\n // {}\n \n void\n-TokenStream::visit (TuplePatternItemsMultiple &pattern)\n+TokenCollector::visit (TuplePatternItemsMultiple &pattern)\n {\n   visit_items_joined_by_separator (pattern.get_patterns (), COMMA);\n }\n \n void\n-TokenStream::visit (TuplePatternItemsRanged &pattern)\n+TokenCollector::visit (TuplePatternItemsRanged &pattern)\n {\n   for (auto &lower : pattern.get_lower_patterns ())\n     {\n@@ -2905,42 +2907,42 @@ TokenStream::visit (TuplePatternItemsRanged &pattern)\n }\n \n void\n-TokenStream::visit (TuplePattern &pattern)\n+TokenCollector::visit (TuplePattern &pattern)\n {\n   tokens.push_back (Rust::Token::make (LEFT_PAREN, pattern.get_locus ()));\n   visit (pattern.get_items ());\n   tokens.push_back (Rust::Token::make (RIGHT_PAREN, Location ()));\n }\n \n void\n-TokenStream::visit (GroupedPattern &pattern)\n+TokenCollector::visit (GroupedPattern &pattern)\n {\n   tokens.push_back (Rust::Token::make (LEFT_PAREN, pattern.get_locus ()));\n   visit (pattern.get_pattern_in_parens ());\n   tokens.push_back (Rust::Token::make (RIGHT_PAREN, Location ()));\n }\n \n void\n-TokenStream::visit (SlicePattern &pattern)\n+TokenCollector::visit (SlicePattern &pattern)\n {\n   tokens.push_back (Rust::Token::make (LEFT_SQUARE, pattern.get_locus ()));\n   visit_items_joined_by_separator (pattern.get_items (), COMMA);\n   tokens.push_back (Rust::Token::make (RIGHT_SQUARE, Location ()));\n }\n \n void\n-TokenStream::visit (AltPattern &pattern)\n+TokenCollector::visit (AltPattern &pattern)\n {\n   visit_items_joined_by_separator (pattern.get_alts (), PIPE);\n }\n \n // rust-stmt.h\n void\n-TokenStream::visit (EmptyStmt &)\n+TokenCollector::visit (EmptyStmt &)\n {}\n \n void\n-TokenStream::visit (LetStmt &stmt)\n+TokenCollector::visit (LetStmt &stmt)\n {\n   tokens.push_back (Rust::Token::make (LET, stmt.get_locus ()));\n   auto &pattern = stmt.get_pattern ();\n@@ -2961,20 +2963,20 @@ TokenStream::visit (LetStmt &stmt)\n }\n \n void\n-TokenStream::visit (ExprStmtWithoutBlock &stmt)\n+TokenCollector::visit (ExprStmtWithoutBlock &stmt)\n {\n   visit (stmt.get_expr ());\n }\n \n void\n-TokenStream::visit (ExprStmtWithBlock &stmt)\n+TokenCollector::visit (ExprStmtWithBlock &stmt)\n {\n   visit (stmt.get_expr ());\n }\n \n // rust-type.h\n void\n-TokenStream::visit (TraitBound &bound)\n+TokenCollector::visit (TraitBound &bound)\n {\n   // Syntax:\n   //      ?? ForLifetimes? TypePath\n@@ -2990,7 +2992,7 @@ TokenStream::visit (TraitBound &bound)\n }\n \n void\n-TokenStream::visit (ImplTraitType &type)\n+TokenCollector::visit (ImplTraitType &type)\n {\n   // Syntax:\n   //    impl TypeParamBounds\n@@ -3002,7 +3004,7 @@ TokenStream::visit (ImplTraitType &type)\n }\n \n void\n-TokenStream::visit (TraitObjectType &type)\n+TokenCollector::visit (TraitObjectType &type)\n {\n   // Syntax:\n   //   dyn? TypeParamBounds\n@@ -3015,7 +3017,7 @@ TokenStream::visit (TraitObjectType &type)\n }\n \n void\n-TokenStream::visit (ParenthesisedType &type)\n+TokenCollector::visit (ParenthesisedType &type)\n {\n   // Syntax:\n   //    ( Type )\n@@ -3026,7 +3028,7 @@ TokenStream::visit (ParenthesisedType &type)\n }\n \n void\n-TokenStream::visit (ImplTraitTypeOneBound &type)\n+TokenCollector::visit (ImplTraitTypeOneBound &type)\n {\n   // Syntax:\n   //    impl TraitBound\n@@ -3036,7 +3038,7 @@ TokenStream::visit (ImplTraitTypeOneBound &type)\n }\n \n void\n-TokenStream::visit (TraitObjectTypeOneBound &type)\n+TokenCollector::visit (TraitObjectTypeOneBound &type)\n {\n   // Syntax:\n   //    dyn? TraitBound\n@@ -3047,7 +3049,7 @@ TokenStream::visit (TraitObjectTypeOneBound &type)\n }\n \n void\n-TokenStream::visit (TupleType &type)\n+TokenCollector::visit (TupleType &type)\n {\n   // Syntax:\n   //   ( )\n@@ -3059,7 +3061,7 @@ TokenStream::visit (TupleType &type)\n }\n \n void\n-TokenStream::visit (NeverType &type)\n+TokenCollector::visit (NeverType &type)\n {\n   // Syntax:\n   //  !\n@@ -3068,7 +3070,7 @@ TokenStream::visit (NeverType &type)\n }\n \n void\n-TokenStream::visit (RawPointerType &type)\n+TokenCollector::visit (RawPointerType &type)\n {\n   // Syntax:\n   //    * ( mut | const ) TypeNoBounds\n@@ -3083,7 +3085,7 @@ TokenStream::visit (RawPointerType &type)\n }\n \n void\n-TokenStream::visit (ReferenceType &type)\n+TokenCollector::visit (ReferenceType &type)\n {\n   // Syntax:\n   //    & Lifetime? mut? TypeNoBounds\n@@ -3102,7 +3104,7 @@ TokenStream::visit (ReferenceType &type)\n }\n \n void\n-TokenStream::visit (ArrayType &type)\n+TokenCollector::visit (ArrayType &type)\n {\n   // Syntax:\n   //    [ Type ; Expression ]\n@@ -3115,7 +3117,7 @@ TokenStream::visit (ArrayType &type)\n }\n \n void\n-TokenStream::visit (SliceType &type)\n+TokenCollector::visit (SliceType &type)\n {\n   // Syntax:\n   //    [ Type ]\n@@ -3126,7 +3128,7 @@ TokenStream::visit (SliceType &type)\n }\n \n void\n-TokenStream::visit (InferredType &type)\n+TokenCollector::visit (InferredType &type)\n {\n   // Syntax:\n   //    _\n@@ -3135,7 +3137,7 @@ TokenStream::visit (InferredType &type)\n }\n \n void\n-TokenStream::visit (BareFunctionType &type)\n+TokenCollector::visit (BareFunctionType &type)\n {\n   // Syntax:\n   //    ForLifetimes? FunctionTypeQualifiers fn"}, {"sha": "01c7e7c4678e451c921c53b0ed3f02dc6634ab46", "filename": "gcc/rust/ast/rust-ast-tokenstream.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e20409d744fef3cd0764b0351fca7e5c44fbb8/gcc%2Frust%2Fast%2Frust-ast-tokenstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e20409d744fef3cd0764b0351fca7e5c44fbb8/gcc%2Frust%2Fast%2Frust-ast-tokenstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-tokenstream.h?ref=c4e20409d744fef3cd0764b0351fca7e5c44fbb8", "patch": "@@ -29,10 +29,10 @@\n namespace Rust {\n namespace AST {\n \n-class TokenStream : public ASTVisitor\n+class TokenCollector : public ASTVisitor\n {\n public:\n-  TokenStream (std::vector<TokenPtr> &container);\n+  TokenCollector (std::vector<TokenPtr> &container);\n   bool output_trailing_commas = false;\n \n   void visit (AST::Crate &crate);"}, {"sha": "fb2b1b57daf51603ed6df541e89236c46b5af6df", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e20409d744fef3cd0764b0351fca7e5c44fbb8/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e20409d744fef3cd0764b0351fca7e5c44fbb8/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=c4e20409d744fef3cd0764b0351fca7e5c44fbb8", "patch": "@@ -937,9 +937,9 @@ Session::dump_tokenstream (AST::Crate &crate) const\n       rust_error_at (Linemap::unknown_location (), \"cannot open %s:%m; ignored\",\n \t\t     kASTDumpTokenStream);\n     }\n-  std::vector<TokenPtr> tokenstream;\n-  AST::TokenStream (tokenstream).visit (crate);\n-  for (auto &token : tokenstream)\n+  std::vector<TokenPtr> tokens;\n+  AST::TokenCollector (tokens).visit (crate);\n+  for (auto &token : tokens)\n     {\n       out << token->as_string () << \" \";\n     }"}]}