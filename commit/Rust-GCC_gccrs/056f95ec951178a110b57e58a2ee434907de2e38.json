{"sha": "056f95ec951178a110b57e58a2ee434907de2e38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU2Zjk1ZWM5NTExNzhhMTEwYjU3ZTU4YTJlZTQzNDkwN2RlMmUzOA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2019-09-05T11:23:48Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2019-09-05T11:23:48Z"}, "message": "[preprocessor/91639] #includes at EOF\n\nhttps://gcc.gnu.org/ml/gcc-patches/2019-09/msg00280.html\n\tlibcpp/\n\tPR preprocessor/91639\n\t* directives.c (do_include_common): Tell lexer we're a #include.\n\t* files.c (_cpp_stack_file): Lexer will have always incremented.\n\t* internal.h (struct cpp_context): Extend in_directive's\n\tsemantics.\n\t* lex.c (_cpp_lex_direct): Increment line for final \\n when lexing\n\tfor an ISO #include.\n\t* line-map.c (linemap_line_start): Remember if we overflowed.\n\n\tgcc/testsuite/\n\tPR preprocessor/91639\n\t* c-c++-common/cpp/pr91639.c: New.\n\t* c-c++-common/cpp/pr91639-one.h: New.\n\t* c-c++-common/cpp/pr91639-two.h: New.\n\nFrom-SVN: r275402", "tree": {"sha": "a8e6ad6be4a477e263294cb8c34feef8df71253e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8e6ad6be4a477e263294cb8c34feef8df71253e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/056f95ec951178a110b57e58a2ee434907de2e38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056f95ec951178a110b57e58a2ee434907de2e38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/056f95ec951178a110b57e58a2ee434907de2e38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056f95ec951178a110b57e58a2ee434907de2e38/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e7414688f16c4c9db2dacbc31da683887b4ba1bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7414688f16c4c9db2dacbc31da683887b4ba1bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7414688f16c4c9db2dacbc31da683887b4ba1bd"}], "stats": {"total": 80, "additions": 58, "deletions": 22}, "files": [{"sha": "cdaa2705287984beee4f36ea305f580798b50134", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056f95ec951178a110b57e58a2ee434907de2e38/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056f95ec951178a110b57e58a2ee434907de2e38/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=056f95ec951178a110b57e58a2ee434907de2e38", "patch": "@@ -1,3 +1,10 @@\n+2019-09-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR preprocessor/91639\n+\t* c-c++-common/cpp/pr91639.c: New.\n+\t* c-c++-common/cpp/pr91639-one.h: New.\n+\t* c-c++-common/cpp/pr91639-two.h: New.\n+\n 2019-09-05  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR middle-end/91577"}, {"sha": "141f6a732f73fa4ef53fd32e72bdcffdc84bfe0a", "filename": "gcc/testsuite/c-c++-common/cpp/pr91639-one.h", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056f95ec951178a110b57e58a2ee434907de2e38/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr91639-one.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056f95ec951178a110b57e58a2ee434907de2e38/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr91639-one.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr91639-one.h?ref=056f95ec951178a110b57e58a2ee434907de2e38", "patch": "@@ -0,0 +1,2 @@\n+one\n+#include \"pr91639-two.h\""}, {"sha": "f719efd430d52bcfc8566a43b2eb655688d38871", "filename": "gcc/testsuite/c-c++-common/cpp/pr91639-two.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056f95ec951178a110b57e58a2ee434907de2e38/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr91639-two.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056f95ec951178a110b57e58a2ee434907de2e38/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr91639-two.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr91639-two.h?ref=056f95ec951178a110b57e58a2ee434907de2e38", "patch": "@@ -0,0 +1 @@\n+two"}, {"sha": "6da0b669ddc3f5fd12f0b5d3ff4c197ec1bcad7c", "filename": "gcc/testsuite/c-c++-common/cpp/pr91639.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056f95ec951178a110b57e58a2ee434907de2e38/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr91639.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056f95ec951178a110b57e58a2ee434907de2e38/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr91639.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr91639.c?ref=056f95ec951178a110b57e58a2ee434907de2e38", "patch": "@@ -0,0 +1,9 @@\n+/* PR91639 Line markers for an end-of-file #include   */\n+/* { dg-do preprocess } */\n+/* { dg-additional-options -Wno-pedantic } */\n+/* { dg-additional-files {pr91639-one.h pr91639-two.h} } */\n+\n+#include \"pr91639-one.h\"\n+main\n+\n+/* { dg-final { scan-file pr91639.i \"# 1 \\\"\\[^\\n\\\"\\]*pr91639-one.h\\\" 1\\none\\n# 1 \\\"\\[^\\n\\\"\\]*pr91639-two.h\\\" 1\\ntwo\\n# 3 \\\"\\[^\\n\\\"\\]*pr91639-one.h\\\" 2\\n# 7 \\\"\\[^\\n\\\"\\]*pr91639.c\\\" 2\\nmain\\n\" } } */"}, {"sha": "c418d75c950abf6bd1fcf7f736a41ae6396f9fc8", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056f95ec951178a110b57e58a2ee434907de2e38/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056f95ec951178a110b57e58a2ee434907de2e38/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=056f95ec951178a110b57e58a2ee434907de2e38", "patch": "@@ -1,3 +1,14 @@\n+2019-09-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR preprocessor/91639\n+\t* directives.c (do_include_common): Tell lexer we're a #include.\n+\t* files.c (_cpp_stack_file): Lexer will have always incremented.\n+\t* internal.h (struct cpp_context): Extend in_directive's\n+\tsemantics.\n+\t* lex.c (_cpp_lex_direct): Increment line for final \\n when lexing\n+\tfor an ISO #include.\n+\t* line-map.c (linemap_line_start): Remember if we overflowed.\n+\n 2019-09-03  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* directives.c: Remove references to spu from comments."}, {"sha": "1c6b31e143bb6768454c9df2dc8dbe96a19757c1", "filename": "libcpp/directives.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056f95ec951178a110b57e58a2ee434907de2e38/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056f95ec951178a110b57e58a2ee434907de2e38/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=056f95ec951178a110b57e58a2ee434907de2e38", "patch": "@@ -818,6 +818,10 @@ do_include_common (cpp_reader *pfile, enum include_type type)\n      callback can dump comments which follow #include.  */\n   pfile->state.save_comments = ! CPP_OPTION (pfile, discard_comments);\n \n+  /* Tell the lexer this is an include directive -- we want it to\n+     increment the line number even if this is the last line of a file.  */\n+  pfile->state.in_directive = 2;\n+\n   fname = parse_include (pfile, &angle_brackets, &buf, &location);\n   if (!fname)\n     goto done;"}, {"sha": "aa77dc74e9427e02b5fddeb3e181f86fc2223c1f", "filename": "libcpp/files.c", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056f95ec951178a110b57e58a2ee434907de2e38/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056f95ec951178a110b57e58a2ee434907de2e38/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=056f95ec951178a110b57e58a2ee434907de2e38", "patch": "@@ -938,25 +938,16 @@ _cpp_stack_file (cpp_reader *pfile, _cpp_file *file, include_type type,\n   pfile->mi_valid = true;\n   pfile->mi_cmacro = 0;\n \n-  /* Compensate for the increment in linemap_add that occurs when in\n-     do_file_change.   In the case of a normal #include, we're\n-     currently at the start of the line *following* the #include.  A\n-     separate location_t for this location makes no sense (until we do\n-     the LC_LEAVE), and complicates LAST_SOURCE_LINE_LOCATION.  This\n-     does not apply if we found a PCH file (in which case linemap_add\n-     is not called) or we were included from the command-line.  In the\n-     case that the #include is the last line in the file,\n-     highest_location still points to the current line, not the start\n-     of the next line, so we do not decrement in this case.  See\n-     plugin/location-overflow-test-pr83173.h for an example.  */\n-  bool decremented = false;\n-  if (file->pchname == NULL && file->err_no == 0 && type < IT_DIRECTIVE_HWM)\n-    {\n-      decremented = (pfile->line_table->highest_line\n-\t\t     == pfile->line_table->highest_location);\n-      if (decremented)\n-\tpfile->line_table->highest_location--;\n-    }\n+  /* In the case of a normal #include, we're now at the start of the\n+     line *following* the #include.  A separate location_t for this\n+     location makes no sense, until we do the LC_LEAVE.\n+\n+     This does not apply if we found a PCH file, we're not a regular\n+     include, or we ran out of locations.  */\n+  if (file->pchname == NULL\n+      && type < IT_DIRECTIVE_HWM\n+      && pfile->line_table->highest_location != LINE_MAP_MAX_LOCATION - 1)\n+    pfile->line_table->highest_location--;\n \n   /* Add line map and do callbacks.  */\n   _cpp_do_file_change (pfile, LC_ENTER, file->path, 1, sysp);"}, {"sha": "f9bcd37c571781910384b0d8da9a4e7f23489dfa", "filename": "libcpp/internal.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056f95ec951178a110b57e58a2ee434907de2e38/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056f95ec951178a110b57e58a2ee434907de2e38/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=056f95ec951178a110b57e58a2ee434907de2e38", "patch": "@@ -234,7 +234,8 @@ struct cpp_context\n \n struct lexer_state\n {\n-  /* Nonzero if first token on line is CPP_HASH.  */\n+  /* 1 if we're handling a directive.  2 if it's an include-like\n+     directive.  */\n   unsigned char in_directive;\n \n   /* Nonzero if in a directive that will handle padding tokens itself."}, {"sha": "52e5bceb3ffce58afc6be83db025e7b5cf75fc7b", "filename": "libcpp/lex.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056f95ec951178a110b57e58a2ee434907de2e38/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056f95ec951178a110b57e58a2ee434907de2e38/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=056f95ec951178a110b57e58a2ee434907de2e38", "patch": "@@ -2771,7 +2771,13 @@ _cpp_lex_direct (cpp_reader *pfile)\n       goto skipped_white;\n \n     case '\\n':\n-      if (buffer->cur < buffer->rlimit)\n+      /* Increment the line, unless this is the last line ...  */\n+      if (buffer->cur < buffer->rlimit\n+\t  /* ... or this is a #include, (where _cpp_stack_file needs to\n+\t     unwind by one line) ...  */\n+\t  || (pfile->state.in_directive > 1\n+\t      /* ... except traditional-cpp increments this elsewhere.  */\n+\t      && !CPP_OPTION (pfile, traditional)))\n \tCPP_INCREMENT_LINE (pfile, 0);\n       buffer->need_line = true;\n       goto fresh_line;"}, {"sha": "d6924eb3e78689e73799c3c36e3a9e778869143f", "filename": "libcpp/line-map.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056f95ec951178a110b57e58a2ee434907de2e38/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056f95ec951178a110b57e58a2ee434907de2e38/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=056f95ec951178a110b57e58a2ee434907de2e38", "patch": "@@ -764,7 +764,11 @@ linemap_line_start (line_maps *set, linenum_type to_line,\n   /* Locations of ordinary tokens are always lower than locations of\n      macro tokens.  */\n   if (r >= LINE_MAP_MAX_LOCATION)\n-    return 0;\n+    {\n+      /* Remember we overflowed.  */\n+      set->highest_line = set->highest_location = LINE_MAP_MAX_LOCATION - 1;\n+      return 0;\n+    }\n \n   set->highest_line = r;\n   if (r > set->highest_location)"}]}