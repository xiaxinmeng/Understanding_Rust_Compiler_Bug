{"sha": "af34279921f4bb95b07c0be7fce9baeffafcb53d", "node_id": "C_kwDOANBUbNoAKGFmMzQyNzk5MjFmNGJiOTViMDdjMGJlN2ZjZTliYWVmZmFmY2I1M2Q", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-02-17T00:59:34Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-05-13T13:57:03Z"}, "message": "Export global ranges during the VRP block walk.\n\nVRP currently searches the ssa_name list for globals to exported after it\nfinishes running.  Recent changes have VRP calling a side-effect routine for\neach stmt during the walk.  This change simply exports globals as they are\ncalculated the final time during the walk.\n\n\t* gimple-range.cc (gimple_ranger::register_side_effects): First check\n\tif the DEF should be exported as a global.\n\t* tree-vrp.cc (rvrp_folder::pre_fold_bb): Process PHI side effects,\n\twhich will export globals.\n\t(execute_ranger_vrp): Remove call to export_global_ranges.", "tree": {"sha": "0b08ab1d4fb5de1f669c4c7eadf02d3170a324b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b08ab1d4fb5de1f669c4c7eadf02d3170a324b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af34279921f4bb95b07c0be7fce9baeffafcb53d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af34279921f4bb95b07c0be7fce9baeffafcb53d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af34279921f4bb95b07c0be7fce9baeffafcb53d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af34279921f4bb95b07c0be7fce9baeffafcb53d/comments", "author": null, "committer": null, "parents": [{"sha": "602a3161f425ee3fe325413eeab9792e8e07a2ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/602a3161f425ee3fe325413eeab9792e8e07a2ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/602a3161f425ee3fe325413eeab9792e8e07a2ff"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "1fdee026a4b24aa5cab3d128849aaebcdc968079", "filename": "gcc/gimple-range.cc", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af34279921f4bb95b07c0be7fce9baeffafcb53d/gcc%2Fgimple-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af34279921f4bb95b07c0be7fce9baeffafcb53d/gcc%2Fgimple-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range.cc?ref=af34279921f4bb95b07c0be7fce9baeffafcb53d", "patch": "@@ -458,6 +458,28 @@ gimple_ranger::fold_stmt (gimple_stmt_iterator *gsi, tree (*valueize) (tree))\n void\n gimple_ranger::register_side_effects (gimple *s)\n {\n+  // First, export the LHS if it is a new global range.\n+  tree lhs = gimple_get_lhs (s);\n+  if (lhs)\n+    {\n+      int_range_max tmp;\n+      if (range_of_stmt (tmp, s, lhs) && !tmp.varying_p ()\n+\t  && update_global_range (tmp, lhs) && dump_file)\n+\t{\n+\t  value_range vr = tmp;\n+\t  fprintf (dump_file, \"Global Exported: \");\n+\t  print_generic_expr (dump_file, lhs, TDF_SLIM);\n+\t  fprintf (dump_file, \" = \");\n+\t  vr.dump (dump_file);\n+\t  int_range_max same = vr;\n+\t  if (same != tmp)\n+\t    {\n+\t      fprintf (dump_file, \" ...  irange was : \");\n+\t      tmp.dump (dump_file);\n+\t    }\n+\t  fputc ('\\n', dump_file);\n+\t}\n+    }\n   m_cache.block_apply_nonnull (s);\n }\n "}, {"sha": "8ba9ca7328f9bab4e0baf4f63f1f1fe638e5ad1f", "filename": "gcc/tree-vrp.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af34279921f4bb95b07c0be7fce9baeffafcb53d/gcc%2Ftree-vrp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af34279921f4bb95b07c0be7fce9baeffafcb53d/gcc%2Ftree-vrp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.cc?ref=af34279921f4bb95b07c0be7fce9baeffafcb53d", "patch": "@@ -4302,6 +4302,9 @@ class rvrp_folder : public substitute_and_fold_engine\n   void pre_fold_bb (basic_block bb) OVERRIDE\n   {\n     m_pta->enter (bb);\n+    for (gphi_iterator gsi = gsi_start_phis (bb); !gsi_end_p (gsi);\n+\t gsi_next (&gsi))\n+      m_ranger->register_side_effects (gsi.phi ());\n   }\n \n   void post_fold_bb (basic_block bb) OVERRIDE\n@@ -4345,7 +4348,6 @@ execute_ranger_vrp (struct function *fun, bool warn_array_bounds_p)\n   gimple_ranger *ranger = enable_ranger (fun);\n   rvrp_folder folder (ranger);\n   folder.substitute_and_fold ();\n-  ranger->export_global_ranges ();\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     ranger->dump (dump_file);\n "}]}