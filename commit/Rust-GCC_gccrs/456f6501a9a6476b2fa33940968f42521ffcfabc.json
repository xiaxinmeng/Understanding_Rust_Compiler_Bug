{"sha": "456f6501a9a6476b2fa33940968f42521ffcfabc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU2ZjY1MDFhOWE2NDc2YjJmYTMzOTQwOTY4ZjQyNTIxZmZjZmFiYw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-04-19T15:39:16Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-04-19T15:39:16Z"}, "message": "mips.h (BITS_PER_WORD, [...]): Remove unnecessary casts.\n\n\t* mips.h (BITS_PER_WORD, UNITS_PER_WORD, UNITS_PER_FPREG,\n\tINT_TYPE_SIZE, LONG_TYPE_SIZE, POINTER_SIZE, POINTER_BOUNDARY,\n\tPARM_BOUNDARY): Remove unnecessary casts.\n\nFrom-SVN: r33259", "tree": {"sha": "fd60bfe05747533bd485bfa26f715e9728a1891e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd60bfe05747533bd485bfa26f715e9728a1891e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/456f6501a9a6476b2fa33940968f42521ffcfabc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/456f6501a9a6476b2fa33940968f42521ffcfabc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/456f6501a9a6476b2fa33940968f42521ffcfabc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/456f6501a9a6476b2fa33940968f42521ffcfabc/comments", "author": null, "committer": null, "parents": [{"sha": "40d6e956681de2e7204030f005a7ea6951d04407", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40d6e956681de2e7204030f005a7ea6951d04407", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40d6e956681de2e7204030f005a7ea6951d04407"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "c94482c1c0754c824b0e1b19f2135a8160b63aa5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/456f6501a9a6476b2fa33940968f42521ffcfabc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/456f6501a9a6476b2fa33940968f42521ffcfabc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=456f6501a9a6476b2fa33940968f42521ffcfabc", "patch": "@@ -1,3 +1,9 @@\n+2000-04-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* mips.h (BITS_PER_WORD, UNITS_PER_WORD, UNITS_PER_FPREG,\n+\tINT_TYPE_SIZE, LONG_TYPE_SIZE, POINTER_SIZE, POINTER_BOUNDARY,\n+\tPARM_BOUNDARY): Remove unnecessary casts.\n+\n Wed Apr 19 12:02:37 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \n \t* calls.c (precompute_arguments): Remove must_preallocate and"}, {"sha": "6dd1a6ec908ac8284ca4ad267c3a6bbee32534ee", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/456f6501a9a6476b2fa33940968f42521ffcfabc/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/456f6501a9a6476b2fa33940968f42521ffcfabc/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=456f6501a9a6476b2fa33940968f42521ffcfabc", "patch": "@@ -1295,20 +1295,20 @@ do {\t\t\t\t\t\t\t\\\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 68000, this would still be 32.\n    But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD ((unsigned int) (TARGET_64BIT ? 64 : 32))\n+#define BITS_PER_WORD (TARGET_64BIT ? 64 : 32)\n #define MAX_BITS_PER_WORD 64\n \n /* Width of a word, in units (bytes).  */\n-#define UNITS_PER_WORD ((unsigned int) (TARGET_64BIT ? 8 : 4))\n+#define UNITS_PER_WORD (TARGET_64BIT ? 8 : 4)\n #define MIN_UNITS_PER_WORD 4\n \n /* For MIPS, width of a floating point register.  */\n-#define UNITS_PER_FPREG ((unsigned int) (TARGET_FLOAT64 ? 8 : 4))\n+#define UNITS_PER_FPREG (TARGET_FLOAT64 ? 8 : 4)\n \n /* A C expression for the size in bits of the type `int' on the\n    target machine.  If you don't define this, the default is one\n    word.  */\n-#define INT_TYPE_SIZE ((unsigned int) (TARGET_INT64 ? 64 : 32))\n+#define INT_TYPE_SIZE (TARGET_INT64 ? 64 : 32)\n #define MAX_INT_TYPE_SIZE 64\n \n /* Tell the preprocessor the maximum size of wchar_t.  */\n@@ -1327,7 +1327,7 @@ do {\t\t\t\t\t\t\t\\\n /* A C expression for the size in bits of the type `long' on the\n    target machine.  If you don't define this, the default is one\n    word.  */\n-#define LONG_TYPE_SIZE ((unsigned int) (TARGET_LONG64 ? 64 : 32))\n+#define LONG_TYPE_SIZE (TARGET_LONG64 ? 64 : 32)\n #define MAX_LONG_TYPE_SIZE 64\n \n /* A C expression for the size in bits of the type `long long' on the\n@@ -1359,14 +1359,14 @@ do {\t\t\t\t\t\t\t\\\n /* Width in bits of a pointer.\n    See also the macro `Pmode' defined below.  */\n #ifndef POINTER_SIZE\n-#define POINTER_SIZE ((unsigned int) (Pmode == DImode ? 64 : 32))\n+#define POINTER_SIZE (Pmode == DImode ? 64 : 32)\n #endif\n \n /* Allocation boundary (in *bits*) for storing pointers in memory.  */\n-#define POINTER_BOUNDARY ((unsigned int) (Pmode == DImode ? 64 : 32))\n+#define POINTER_BOUNDARY (Pmode == DImode ? 64 : 32)\n \n /* Allocation boundary (in *bits*) for storing arguments in argument list.  */\n-#define PARM_BOUNDARY ((unsigned int) (TARGET_64BIT ? 64 : 32))\n+#define PARM_BOUNDARY (TARGET_64BIT ? 64 : 32)\n \n /* Allocation boundary (in *bits*) for the code of a function.  */\n #define FUNCTION_BOUNDARY 32"}]}