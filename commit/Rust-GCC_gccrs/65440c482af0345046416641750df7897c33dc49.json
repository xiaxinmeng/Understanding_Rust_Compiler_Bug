{"sha": "65440c482af0345046416641750df7897c33dc49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU0NDBjNDgyYWYwMzQ1MDQ2NDE2NjQxNzUwZGY3ODk3YzMzZGM0OQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-09-14T19:54:27Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-09-14T19:54:27Z"}, "message": "re PR c++/44282 (fastcall is not mangled at all)\n\n\tPR c++/44282\n\n\t* mangle.c (write_CV_qualifiers_for_type): Also warn about regparm\n\tmangling with lower -fabi-version.\n\nFrom-SVN: r227761", "tree": {"sha": "243060f6ed516255301acf65400759f8d5bd218b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/243060f6ed516255301acf65400759f8d5bd218b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65440c482af0345046416641750df7897c33dc49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65440c482af0345046416641750df7897c33dc49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65440c482af0345046416641750df7897c33dc49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65440c482af0345046416641750df7897c33dc49/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0d179691da597b8e2cb9ff55a5875f2c60e1cfbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d179691da597b8e2cb9ff55a5875f2c60e1cfbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d179691da597b8e2cb9ff55a5875f2c60e1cfbd"}], "stats": {"total": 72, "additions": 51, "deletions": 21}, "files": [{"sha": "c264f489f80877f9347e9e91963cd7a401bd6d4f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65440c482af0345046416641750df7897c33dc49/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65440c482af0345046416641750df7897c33dc49/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=65440c482af0345046416641750df7897c33dc49", "patch": "@@ -1,3 +1,9 @@\n+2015-09-14  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/44282\n+\t* mangle.c (write_CV_qualifiers_for_type): Also warn about regparm\n+\tmangling with lower -fabi-version.\n+\n 2015-09-14  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/51911"}, {"sha": "2640d522034b06c6645877b799e867785cde3735", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65440c482af0345046416641750df7897c33dc49/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65440c482af0345046416641750df7897c33dc49/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=65440c482af0345046416641750df7897c33dc49", "patch": "@@ -2196,7 +2196,7 @@ write_CV_qualifiers_for_type (const tree type)\n      We don't do this with classes and enums because their attributes\n      are part of their definitions, not something added on.  */\n \n-  if (abi_version_at_least (10) && !OVERLOAD_TYPE_P (type))\n+  if (!OVERLOAD_TYPE_P (type))\n     {\n       auto_vec<tree> vec;\n       for (tree a = TYPE_ATTRIBUTES (type); a; a = TREE_CHAIN (a))\n@@ -2207,31 +2207,34 @@ write_CV_qualifiers_for_type (const tree type)\n \t      && !is_attribute_p (\"abi_tag\", name))\n \t    vec.safe_push (a);\n \t}\n-      vec.qsort (attr_strcmp);\n-      while (!vec.is_empty())\n+      if (abi_version_crosses (10) && !vec.is_empty ())\n+\tG.need_abi_warning = true;\n+      if (abi_version_at_least (10))\n \t{\n-\t  tree a = vec.pop();\n-\t  const attribute_spec *as\n-\t    = lookup_attribute_spec (get_attribute_name (a));\n-\n-\t  write_char ('U');\n-\t  write_unsigned_number (strlen (as->name));\n-\t  write_string (as->name);\n-\t  if (TREE_VALUE (a))\n+\t  vec.qsort (attr_strcmp);\n+\t  while (!vec.is_empty())\n \t    {\n-\t      write_char ('I');\n-\t      for (tree args = TREE_VALUE (a); args;\n-\t\t   args = TREE_CHAIN (args))\n+\t      tree a = vec.pop();\n+\t      const attribute_spec *as\n+\t\t= lookup_attribute_spec (get_attribute_name (a));\n+\n+\t      write_char ('U');\n+\t      write_unsigned_number (strlen (as->name));\n+\t      write_string (as->name);\n+\t      if (TREE_VALUE (a))\n \t\t{\n-\t\t  tree arg = TREE_VALUE (args);\n-\t\t  write_template_arg (arg);\n+\t\t  write_char ('I');\n+\t\t  for (tree args = TREE_VALUE (a); args;\n+\t\t       args = TREE_CHAIN (args))\n+\t\t    {\n+\t\t      tree arg = TREE_VALUE (args);\n+\t\t      write_template_arg (arg);\n+\t\t    }\n+\t\t  write_char ('E');\n \t\t}\n-\t      write_char ('E');\n-\t    }\n \n-\t  ++num_qualifiers;\n-\t  if (abi_version_crosses (10))\n-\t    G.need_abi_warning = true;\n+\t      ++num_qualifiers;\n+\t    }\n \t}\n     }\n "}, {"sha": "bfa6c9b00397d6d31322e25ad8667b404cfb92bf", "filename": "gcc/testsuite/g++.dg/abi/mangle-regparm1a.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65440c482af0345046416641750df7897c33dc49/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle-regparm1a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65440c482af0345046416641750df7897c33dc49/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle-regparm1a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle-regparm1a.C?ref=65440c482af0345046416641750df7897c33dc49", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do run { target { { i?86-*-* x86_64-*-* } && ia32 } } }\n+// { dg-options \"-fabi-version=8 -Wabi -save-temps\" }\n+// { dg-final { scan-assembler \"_Z18IndirectExternCallIPFviiEiEvT_T0_S3_\" } }\n+\n+template <typename F, typename T>\n+void IndirectExternCall(F f, T t1, T t2) { // { dg-warning \"mangled name\" }\n+  typedef F (*WrapF)(F);\n+  f (t1, t2);\n+}\n+\n+__attribute__((regparm(3), stdcall))\n+void regparm_func (int i, int j)\n+{\n+  if (i != 24 || j != 42)\n+    __builtin_abort();\n+}\n+\n+int main()\n+{\n+  IndirectExternCall (regparm_func, 24, 42);\n+}"}]}