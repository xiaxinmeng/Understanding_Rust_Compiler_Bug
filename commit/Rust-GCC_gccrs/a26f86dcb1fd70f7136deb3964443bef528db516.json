{"sha": "a26f86dcb1fd70f7136deb3964443bef528db516", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI2Zjg2ZGNiMWZkNzBmNzEzNmRlYjM5NjQ0NDNiZWY1MjhkYjUxNg==", "commit": {"author": {"name": "Andreas Tobler", "email": "andreast@fgznet.ch", "date": "2012-03-21T20:13:50Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2012-03-21T20:13:50Z"}, "message": "configure.ac (HAVE_LD_NO_DOT_SYMBOLS): Add powerpc64-*-freebsd*.\n\n2012-03-21  Andreas Tobler  <andreast@fgznet.ch>\n\n        * configure.ac (HAVE_LD_NO_DOT_SYMBOLS): Add powerpc64-*-freebsd*.\n        Introduce emul_name to select the right linker emulation for\n        powerpc64-*-freebsd*.\n        * configure: Regenerate.\n        * config.gcc: Add bits to support powerpc64-*-freebsd*.\n        * config/rs6000/freebsd.h (POWERPC_FREEBSD): Define.\n        * config/rs6000/freebsd64.h: New file.\n        * config/rs6000/rs6000.c (rs6000_option_override_internal): Use\n        POWERPC_FREEBSD.\n        (rs6000_savres_strategy): Likewise.\n        (rs6000_savres_routine_name): Likewise.\n        (rs6000_elf_file_end): Likewise.\n        * config/rs6000/t-freebsd64: New file.\n        * config/rs6000/sysv4.h (SUBTARGET_OVERRIDE_OPTIONS): Set the\n        rs6000_current_abi for 64-bit FreeBSD to ABI_AIX.\n\nFrom-SVN: r185615", "tree": {"sha": "6de6a3120496c1dc6d4c272ec1de3fe57695c0f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6de6a3120496c1dc6d4c272ec1de3fe57695c0f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a26f86dcb1fd70f7136deb3964443bef528db516", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a26f86dcb1fd70f7136deb3964443bef528db516", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a26f86dcb1fd70f7136deb3964443bef528db516", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a26f86dcb1fd70f7136deb3964443bef528db516/comments", "author": null, "committer": null, "parents": [{"sha": "d82ad50db3dcf1a7fd7dabae129bf4ee6dc771fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d82ad50db3dcf1a7fd7dabae129bf4ee6dc771fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d82ad50db3dcf1a7fd7dabae129bf4ee6dc771fd"}], "stats": {"total": 1078, "additions": 1061, "deletions": 17}, "files": [{"sha": "efa5bfbf2a644abef7d41b9dcbda6b5d463fcd93", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26f86dcb1fd70f7136deb3964443bef528db516/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26f86dcb1fd70f7136deb3964443bef528db516/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a26f86dcb1fd70f7136deb3964443bef528db516", "patch": "@@ -1,3 +1,21 @@\n+2012-03-21  Andreas Tobler  <andreast@fgznet.ch>\n+\n+\t* configure.ac (HAVE_LD_NO_DOT_SYMBOLS): Add powerpc64-*-freebsd*.\n+\tIntroduce emul_name to select the right linker emulation for\n+\tpowerpc64-*-freebsd*.\n+\t* configure: Regenerate.\n+\t* config.gcc: Add bits to support powerpc64-*-freebsd*.\n+\t* config/rs6000/freebsd.h (POWERPC_FREEBSD): Define.\n+\t* config/rs6000/freebsd64.h: New file.\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Use\n+\tPOWERPC_FREEBSD.\n+\t(rs6000_savres_strategy): Likewise.\n+\t(rs6000_savres_routine_name): Likewise.\n+\t(rs6000_elf_file_end): Likewise.\n+\t* config/rs6000/t-freebsd64: New file.\n+\t* config/rs6000/sysv4.h (SUBTARGET_OVERRIDE_OPTIONS): Set the\n+\trs6000_current_abi for 64-bit FreeBSD to ABI_AIX.\n+\n 2012-03-21  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR rtl-optimization/52543"}, {"sha": "1b0183307ac7d48d73a8bfd61bd613db75e127ac", "filename": "gcc/config.gcc", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26f86dcb1fd70f7136deb3964443bef528db516/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26f86dcb1fd70f7136deb3964443bef528db516/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=a26f86dcb1fd70f7136deb3964443bef528db516", "patch": "@@ -1888,10 +1888,20 @@ powerpc64-*-darwin*)\n \ttm_file=\"${tm_file} ${cpu_type}/darwin8.h ${cpu_type}/darwin64.h\"\n \textra_headers=altivec.h\n \t;;\n-powerpc-*-freebsd*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h ${fbsd_tm_file} rs6000/sysv4.h rs6000/freebsd.h\"\n-\ttmake_file=\"rs6000/t-fprules rs6000/t-ppcos ${tmake_file} rs6000/t-ppccomm\"\n+powerpc*-*-freebsd*)\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h ${fbsd_tm_file} rs6000/sysv4.h\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n+\ttmake_file=\"rs6000/t-fprules rs6000/t-ppcos ${tmake_file} rs6000/t-ppccomm\"\n+\tcase ${host} in\n+\t     powerpc64*)\n+\t    \ttm_file=\"${tm_file} rs6000/default64.h rs6000/freebsd64.h\"\n+\t\ttmake_file=\"${tmake_file} rs6000/t-freebsd64\"\n+\t\textra_options=\"${extra_options} rs6000/linux64.opt\"\n+\t\t;;\n+\t     *)\n+\t        tm_file=\"${tm_file} rs6000/freebsd.h\"\n+\t\t;;\n+\tesac\n \t;;\n powerpc-*-netbsd*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h netbsd.h netbsd-elf.h freebsd-spec.h rs6000/sysv4.h rs6000/netbsd.h\""}, {"sha": "50c6697a7682625355e0bb8d71d9de7f31cef07a", "filename": "gcc/config/rs6000/freebsd.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26f86dcb1fd70f7136deb3964443bef528db516/gcc%2Fconfig%2Frs6000%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26f86dcb1fd70f7136deb3964443bef528db516/gcc%2Fconfig%2Frs6000%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ffreebsd.h?ref=a26f86dcb1fd70f7136deb3964443bef528db516", "patch": "@@ -75,3 +75,5 @@\n   (target_flags & target_flags_explicit & MASK_RELOCATABLE)\n \n #define DBX_REGISTER_NUMBER(REGNO) rs6000_dbx_register_number (REGNO)\n+\n+#define POWERPC_FREEBSD"}, {"sha": "79af6c64c5ac8d8ddc7129eb6e0751c1f941d529", "filename": "gcc/config/rs6000/freebsd64.h", "status": "added", "additions": 933, "deletions": 0, "changes": 933, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26f86dcb1fd70f7136deb3964443bef528db516/gcc%2Fconfig%2Frs6000%2Ffreebsd64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26f86dcb1fd70f7136deb3964443bef528db516/gcc%2Fconfig%2Frs6000%2Ffreebsd64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ffreebsd64.h?ref=a26f86dcb1fd70f7136deb3964443bef528db516", "patch": "@@ -0,0 +1,933 @@\n+\n+/* Definitions for 64-bit PowerPC running FreeBSD using the ELF format\n+   Copyright (C) 2012 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Override the defaults, which exist to force the proper definition.  */\n+\n+#ifdef IN_LIBGCC2\n+#undef TARGET_64BIT\n+#ifdef __powerpc64__\n+#define TARGET_64BIT 1\n+#else\n+#define TARGET_64BIT 0\n+#endif\n+#endif\n+\n+#undef\tTARGET_AIX\n+#define\tTARGET_AIX TARGET_64BIT\n+\n+#ifdef HAVE_LD_NO_DOT_SYMS\n+/* New ABI uses a local sym for the function entry point.  */\n+extern int dot_symbols;\n+#undef DOT_SYMBOLS\n+#define DOT_SYMBOLS dot_symbols\n+#endif\n+\n+#define TARGET_USES_LINUX64_OPT 1\n+#ifdef HAVE_LD_LARGE_TOC\n+#undef TARGET_CMODEL\n+#define TARGET_CMODEL rs6000_current_cmodel\n+#define SET_CMODEL(opt) rs6000_current_cmodel = opt\n+#else\n+#define SET_CMODEL(opt) do {} while (0)\n+#endif\n+\n+/* Until now the 970 is the only Processor where FreeBSD 64-bit runs on.  */\n+#undef  PROCESSOR_DEFAULT\n+#define PROCESSOR_DEFAULT PROCESSOR_POWER4\n+#undef  PROCESSOR_DEFAULT64\n+#define PROCESSOR_DEFAULT64 PROCESSOR_POWER4\n+\n+/* We don't need to generate entries in .fixup, except when\n+   -mrelocatable or -mrelocatable-lib is given.  */\n+#undef RELOCATABLE_NEEDS_FIXUP\n+#define RELOCATABLE_NEEDS_FIXUP \\\n+  (target_flags & target_flags_explicit & MASK_RELOCATABLE)\n+\n+#undef  RS6000_ABI_NAME\n+#define RS6000_ABI_NAME \"freebsd\"\n+\n+#define INVALID_64BIT \"-m%s not supported in this configuration\"\n+#define INVALID_32BIT INVALID_64BIT\n+\n+#undef  SUBSUBTARGET_OVERRIDE_OPTIONS\n+#define SUBSUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if (!global_options_set.x_rs6000_alignment_flags)\t\t\\\n+\trs6000_alignment_flags = MASK_ALIGN_NATURAL;\t\t\\\n+      if (TARGET_64BIT)\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  if (DEFAULT_ABI != ABI_AIX)\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      rs6000_current_abi = ABI_AIX;\t\t\t\\\n+\t      error (INVALID_64BIT, \"call\");\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  dot_symbols = !strcmp (rs6000_abi_name, \"aixdesc\");\t\\\n+\t  if (target_flags & MASK_RELOCATABLE)\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      target_flags &= ~MASK_RELOCATABLE;\t\t\\\n+\t      error (INVALID_64BIT, \"relocatable\");\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  if (target_flags & MASK_EABI)\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      target_flags &= ~MASK_EABI;\t\t\t\\\n+\t      error (INVALID_64BIT, \"eabi\");\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  if (TARGET_PROTOTYPE)\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      target_prototype = 0;\t\t\t\t\\\n+\t      error (INVALID_64BIT, \"prototype\");\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  if ((target_flags & MASK_POWERPC64) == 0)\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      target_flags |= MASK_POWERPC64;\t\t\t\\\n+\t      error (\"-m64 requires a PowerPC64 cpu\");\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t   if ((target_flags_explicit & MASK_MINIMAL_TOC) != 0)\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      if (global_options_set.x_rs6000_current_cmodel\t\\\n+\t\t  && rs6000_current_cmodel != CMODEL_SMALL)\t\\\n+\t\terror (\"-mcmodel incompatible with other toc options\"); \\\n+\t      SET_CMODEL (CMODEL_SMALL);\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  else\t\t\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      if (!global_options_set.x_rs6000_current_cmodel)\t\\\n+\t\tSET_CMODEL (CMODEL_MEDIUM);\t\t\t\\\n+\t      if (rs6000_current_cmodel != CMODEL_SMALL)\t\\\n+\t\t{\t\t\t\t\t\t\\\n+\t\t  TARGET_NO_FP_IN_TOC = 0;\t\t\t\\\n+\t\t  TARGET_NO_SUM_IN_TOC = 0;\t\t\t\\\n+\t\t}\t\t\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef\tASM_DEFAULT_SPEC\n+#undef\tASM_SPEC\n+#undef\tLINK_OS_FREEBSD_SPEC\n+\n+#define\tASM_DEFAULT_SPEC \"-mppc%{!m32:64}\"\n+#define\tASM_SPEC\t \"%{m32:%(asm_spec32)}%{!m32:%(asm_spec64)} %(asm_spec_common)\"\n+#define\tLINK_OS_FREEBSD_SPEC \"%{m32:%(link_os_freebsd_spec32)}%{!m32:%(link_os_freebsd_spec64)}\"\n+\n+#define ASM_SPEC32 \"-a32 \\\n+%{mrelocatable} %{mrelocatable-lib} %{fpic:-K PIC} %{fPIC:-K PIC} \\\n+%{memb} %{!memb: %{msdata=eabi: -memb}} \\\n+%{!mlittle: %{!mlittle-endian: %{!mbig: %{!mbig-endian: \\\n+    %{mcall-freebsd: -mbig} \\\n+    %{mcall-i960-old: -mlittle} \\\n+    %{mcall-linux: -mbig} \\\n+    %{mcall-gnu: -mbig} \\\n+    %{mcall-netbsd: -mbig} \\\n+}}}}\"\n+\n+#define ASM_SPEC64 \"-a64\"\n+\n+#define ASM_SPEC_COMMON \"%(asm_cpu) \\\n+%{,assembler|,assembler-with-cpp: %{mregnames} %{mno-regnames}} \\\n+%{mlittle} %{mlittle-endian} %{mbig} %{mbig-endian}\"\n+\n+#undef\tSUBSUBTARGET_EXTRA_SPECS\n+#define SUBSUBTARGET_EXTRA_SPECS\t\t\t\t\t\\\n+  { \"asm_spec_common\",\t\tASM_SPEC_COMMON },\t\t\t\\\n+  { \"asm_spec32\",\t\tASM_SPEC32 },\t\t\t\t\\\n+  { \"asm_spec64\",\t\tASM_SPEC64 },\t\t\t\t\\\n+  { \"link_os_freebsd_spec32\",\tLINK_OS_FREEBSD_SPEC32 },     \t\t\\\n+  { \"link_os_freebsd_spec64\",\tLINK_OS_FREEBSD_SPEC64 },\n+\n+#define FREEBSD_DYNAMIC_LINKER32 \"/libexec/ld-elf32.so.1\"\n+#define FREEBSD_DYNAMIC_LINKER64 \"/libexec/ld-elf.so.1\"\n+\n+#define LINK_OS_FREEBSD_SPEC_DEF32 \"\\\n+  %{p:%nconsider using `-pg' instead of `-p' with gprof(1)} \\\n+  %{v:-V} \\\n+  %{assert*} %{R*} %{rpath*} %{defsym*} \\\n+  %{shared:-Bshareable %{h*} %{soname*}} \\\n+  %{!shared: \\\n+    %{!static: \\\n+      %{rdynamic: -export-dynamic} \\\n+      %{!dynamic-linker:-dynamic-linker \" FREEBSD_DYNAMIC_LINKER32 \"}} \\\n+    %{static:-Bstatic}} \\\n+  %{symbolic:-Bsymbolic}\"\n+\n+#define LINK_OS_FREEBSD_SPEC_DEF64 \"\\\n+  %{p:%nconsider using `-pg' instead of `-p' with gprof(1)} \\\n+  %{v:-V} \\\n+  %{assert*} %{R*} %{rpath*} %{defsym*} \\\n+  %{shared:-Bshareable %{h*} %{soname*}} \\\n+  %{!shared: \\\n+    %{!static: \\\n+      %{rdynamic: -export-dynamic} \\\n+      %{!dynamic-linker:-dynamic-linker \" FREEBSD_DYNAMIC_LINKER64 \"}} \\\n+    %{static:-Bstatic}} \\\n+  %{symbolic:-Bsymbolic}\"\n+\n+#define LINK_OS_FREEBSD_SPEC32 \"-melf32ppc_fbsd \" LINK_OS_FREEBSD_SPEC_DEF32\n+  \n+#define LINK_OS_FREEBSD_SPEC64 \"-melf64ppc_fbsd \" LINK_OS_FREEBSD_SPEC_DEF64\n+\n+#undef\tMULTILIB_DEFAULTS\n+#define MULTILIB_DEFAULTS { \"m64\" }\n+\n+/* PowerPC-64 FreeBSD increases natural record alignment to doubleword if\n+   the first field is an FP double, only if in power alignment mode.  */\n+#undef  ROUND_TYPE_ALIGN\n+#define ROUND_TYPE_ALIGN(STRUCT, COMPUTED, SPECIFIED)\t\t\t\\\n+  ((TARGET_64BIT\t\t\t\t\t\t\t\\\n+    && (TREE_CODE (STRUCT) == RECORD_TYPE\t\t\t\t\\\n+\t|| TREE_CODE (STRUCT) == UNION_TYPE\t\t\t\t\\\n+\t|| TREE_CODE (STRUCT) == QUAL_UNION_TYPE)\t\t\t\\\n+    && TARGET_ALIGN_NATURAL == 0)\t\t\t\t\t\\\n+   ? rs6000_special_round_type_align (STRUCT, COMPUTED, SPECIFIED)\t\\\n+   : MAX ((COMPUTED), (SPECIFIED)))\n+\n+/* Use the default for compiling target libs.  */\n+#ifdef IN_TARGET_LIBS\n+#undef TARGET_ALIGN_NATURAL\n+#define TARGET_ALIGN_NATURAL 1\n+#endif\n+\n+/* Indicate that jump tables go in the text section.  */\n+#undef  JUMP_TABLES_IN_TEXT_SECTION\n+#define JUMP_TABLES_IN_TEXT_SECTION TARGET_64BIT\n+\n+/* The linux ppc64 ABI isn't explicit on whether aggregates smaller\n+   than a doubleword should be padded upward or downward.  You could\n+   reasonably assume that they follow the normal rules for structure\n+   layout treating the parameter area as any other block of memory,\n+   then map the reg param area to registers.  i.e. pad upward.\n+   Setting both of the following defines results in this behavior.\n+   Setting just the first one will result in aggregates that fit in a\n+   doubleword being padded downward, and others being padded upward.\n+   Not a bad idea as this results in struct { int x; } being passed\n+   the same way as an int.  */\n+#define AGGREGATE_PADDING_FIXED TARGET_64BIT\n+#define AGGREGATES_PAD_UPWARD_ALWAYS 0\n+\n+/* Specify padding for the last element of a block move between\n+   registers and memory.  FIRST is nonzero if this is the only\n+   element.  */\n+#define BLOCK_REG_PADDING(MODE, TYPE, FIRST) \\\n+  (!(FIRST) ? upward : FUNCTION_ARG_PADDING (MODE, TYPE))\n+\n+/* FreeBSD doesn't support saving and restoring 64-bit regs with a 32-bit\n+   kernel. This is supported when running on a 64-bit kernel with\n+   COMPAT_FREEBSD32, but tell GCC it isn't so that our 32-bit binaries\n+   are compatible. */\n+#define OS_MISSING_POWERPC64 !TARGET_64BIT\n+\n+#undef  FBSD_TARGET_CPU_CPP_BUILTINS\n+#define FBSD_TARGET_CPU_CPP_BUILTINS()\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      builtin_define (\"__PPC__\");\t\t\t\\\n+      builtin_define (\"__ppc__\");\t\t\t\\\n+      builtin_define (\"__powerpc__\");\t\t\t\\\n+      if (TARGET_64BIT)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t  builtin_define (\"__arch64__\");\t\t\\\n+\t  builtin_define (\"__LP64__\");\t\t\t\\\n+\t  builtin_define (\"__PPC64__\");\t\t\t\\\n+\t  builtin_define (\"__powerpc64__\");\t\t\\\n+\t  builtin_assert (\"cpu=powerpc64\");\t\t\\\n+\t  builtin_assert (\"machine=powerpc64\");\t\t\\\n+\t}\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t  builtin_define_std (\"PPC\");\t\t\t\\\n+\t  builtin_define_std (\"powerpc\");\t\t\\\n+\t  builtin_assert (\"cpu=powerpc\");\t\t\\\n+\t  builtin_assert (\"machine=powerpc\");\t\t\\\n+\t  TARGET_OS_SYSV_CPP_BUILTINS ();\t\t\\\n+\t}\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef\tCPP_OS_DEFAULT_SPEC\n+#define CPP_OS_DEFAULT_SPEC \"%(cpp_os_freebsd)\"\n+\n+#undef CPP_OS_FREEBSD_SPEC\n+#define CPP_OS_FREEBSD_SPEC \"\"\n+\n+#undef\tSTARTFILE_DEFAULT_SPEC\n+#define STARTFILE_DEFAULT_SPEC \"%(startfile_freebsd)\"\n+\n+#undef\tENDFILE_DEFAULT_SPEC\n+#define ENDFILE_DEFAULT_SPEC \"%(endfile_freebsd)\"\n+\n+#undef\tLIB_DEFAULT_SPEC\n+#define LIB_DEFAULT_SPEC \"%(lib_freebsd)\"\n+\n+#undef\tLINK_START_DEFAULT_SPEC\n+#define LINK_START_DEFAULT_SPEC \"%(link_start_freebsd)\"\n+\n+#undef\tLINK_OS_DEFAULT_SPEC\n+#define\tLINK_OS_DEFAULT_SPEC \"%(link_os_freebsd)\"\n+\n+/* XXX: This is wrong for many platforms in sysv4.h.\n+   We should work on getting that definition fixed.  */\n+#undef  LINK_SHLIB_SPEC\n+#define LINK_SHLIB_SPEC \"%{shared:-shared} %{!shared: %{static:-static}}\"\n+\n+\n+/************************[  Target stuff  ]***********************************/\n+\n+/* Define the actual types of some ANSI-mandated types.  \n+   Needs to agree with <machine/ansi.h>.  GCC defaults come from c-decl.c,\n+   c-common.c, and config/<arch>/<arch>.h.  */\n+\n+\n+#undef  SIZE_TYPE\n+#define SIZE_TYPE (TARGET_64BIT ? \"long unsigned int\" : \"unsigned int\")\n+\n+#undef  PTRDIFF_TYPE\n+#define PTRDIFF_TYPE\t(TARGET_64BIT ? \"long int\" : \"int\")\n+\n+/* rs6000.h gets this wrong for FreeBSD.  We use the GCC defaults instead.  */\n+#undef WCHAR_TYPE\n+#define\tWCHAR_TYPE      (TARGET_64BIT ? \"int\" : \"long int\")\n+#undef  WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 32\n+\n+\n+/* Override rs6000.h definition.  */\n+#undef  ASM_APP_ON\n+#define ASM_APP_ON \"#APP\\n\"\n+\n+/* Override rs6000.h definition.  */\n+#undef  ASM_APP_OFF\n+#define ASM_APP_OFF \"#NO_APP\\n\"\n+\n+/* PowerPC no-op instruction.  */\n+#undef  RS6000_CALL_GLUE\n+#define RS6000_CALL_GLUE (TARGET_64BIT ? \"nop\" : \"cror 31,31,31\")\n+\n+/* Function profiling bits */\n+#undef  RS6000_MCOUNT\n+#define RS6000_MCOUNT \"_mcount\"\n+\n+#define PROFILE_HOOK(LABEL) \\\n+  do { if (TARGET_64BIT) output_profile_hook (LABEL); } while (0)\n+\n+/* _init and _fini functions are built from bits spread across many\n+   object files, each potentially with a different TOC pointer.  For\n+   that reason, place a nop after the call so that the linker can\n+   restore the TOC pointer if a TOC adjusting call stub is needed.  */\n+#ifdef __powerpc64__\n+#define CRT_CALL_STATIC_FUNCTION(SECTION_OP, FUNC)\t\\\n+  asm (SECTION_OP \"\\n\"\t\t\t\t\t\\\n+\"\tbl \" #FUNC \"\\n\"\t\t\t\t\t\\\n+\"\tnop\\n\"\t\t\t\t\t\t\\\n+\"\t.previous\");\n+#endif\n+\n+/* FP save and restore routines.  */\n+#undef  SAVE_FP_PREFIX\n+#define SAVE_FP_PREFIX (TARGET_64BIT ? \"._savef\" : \"_savefpr_\")\n+#undef  SAVE_FP_SUFFIX\n+#define SAVE_FP_SUFFIX \"\"\n+#undef  RESTORE_FP_PREFIX\n+#define RESTORE_FP_PREFIX (TARGET_64BIT ? \"._restf\" : \"_restfpr_\")\n+#undef  RESTORE_FP_SUFFIX\n+#define RESTORE_FP_SUFFIX \"\"\n+\n+/* Select a format to encode pointers in exception handling data.  CODE\n+   is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is\n+   true if the symbol may be affected by dynamic relocations.  */\n+#undef\tASM_PREFERRED_EH_DATA_FORMAT\n+#define\tASM_PREFERRED_EH_DATA_FORMAT(CODE, GLOBAL) \\\n+  ((TARGET_64BIT || flag_pic || TARGET_RELOCATABLE)\t\t\t\\\n+   ? (((GLOBAL) ? DW_EH_PE_indirect : 0) | DW_EH_PE_pcrel\t\t\\\n+      | (TARGET_64BIT ? DW_EH_PE_udata8 : DW_EH_PE_sdata4))\t\t\\\n+   : DW_EH_PE_absptr)\n+\n+/* Static stack checking is supported by means of probes.  */\n+#define STACK_CHECK_STATIC_BUILTIN 1\n+\n+/* The default value isn't sufficient in 64-bit mode.  */\n+#define STACK_CHECK_PROTECT (TARGET_64BIT ? 16 * 1024 : 12 * 1024)\n+\n+#define DBX_REGISTER_NUMBER(REGNO) rs6000_dbx_register_number (REGNO)\n+\n+/* PowerPC64 Linux word-aligns FP doubles when -malign-power is given.  */\n+#undef  ADJUST_FIELD_ALIGN\n+#define ADJUST_FIELD_ALIGN(FIELD, COMPUTED) \\\n+  ((TARGET_ALTIVEC && TREE_CODE (TREE_TYPE (FIELD)) == VECTOR_TYPE)     \\\n+   ? 128                                                                \\\n+   : (TARGET_64BIT                                                      \\\n+      && TARGET_ALIGN_NATURAL == 0                                      \\\n+      && TYPE_MODE (strip_array_types (TREE_TYPE (FIELD))) == DFmode)   \\\n+   ? MIN ((COMPUTED), 32)                                               \\\n+   : (COMPUTED))\n+\n+#undef  TOC_SECTION_ASM_OP\n+#define TOC_SECTION_ASM_OP \\\n+  (TARGET_64BIT                                         \\\n+   ? \"\\t.section\\t\\\".toc\\\",\\\"aw\\\"\"                      \\\n+   : \"\\t.section\\t\\\".got\\\",\\\"aw\\\"\")\n+\n+#undef  MINIMAL_TOC_SECTION_ASM_OP\n+#define MINIMAL_TOC_SECTION_ASM_OP \\\n+  (TARGET_64BIT                                         \\\n+   ? \"\\t.section\\t\\\".toc1\\\",\\\"aw\\\"\"                     \\\n+   : ((TARGET_RELOCATABLE || flag_pic)                  \\\n+      ? \"\\t.section\\t\\\".got2\\\",\\\"aw\\\"\"                  \\\n+      : \"\\t.section\\t\\\".got1\\\",\\\"aw\\\"\"))\n+\n+/* This is how to declare the size of a function.  */\n+#undef  ASM_DECLARE_FUNCTION_SIZE\n+#define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)                    \\\n+  do                                                                    \\\n+    {                                                                   \\\n+      if (!flag_inhibit_size_directive)                                 \\\n+        {                                                               \\\n+          fputs (\"\\t.size\\t\", (FILE));                                  \\\n+          if (TARGET_64BIT && DOT_SYMBOLS)                              \\\n+            putc ('.', (FILE));                                         \\\n+          assemble_name ((FILE), (FNAME));                              \\\n+          fputs (\",.-\", (FILE));                                        \\\n+          rs6000_output_function_entry (FILE, FNAME);                   \\\n+          putc ('\\n', (FILE));                                          \\\n+        }                                                               \\\n+    }                                                                   \\\n+  while (0)\n+\n+#undef  ASM_OUTPUT_SPECIAL_POOL_ENTRY_P\n+#define ASM_OUTPUT_SPECIAL_POOL_ENTRY_P(X, MODE)                        \\\n+  (TARGET_TOC                                                           \\\n+   && (GET_CODE (X) == SYMBOL_REF                                       \\\n+       || (GET_CODE (X) == CONST && GET_CODE (XEXP (X, 0)) == PLUS      \\\n+           && GET_CODE (XEXP (XEXP (X, 0), 0)) == SYMBOL_REF)           \\\n+       || GET_CODE (X) == LABEL_REF                                     \\\n+       || (GET_CODE (X) == CONST_INT                                    \\\n+           && GET_MODE_BITSIZE (MODE) <= GET_MODE_BITSIZE (Pmode))      \\\n+       || (GET_CODE (X) == CONST_DOUBLE                                 \\\n+           && ((TARGET_64BIT                                            \\\n+                && (TARGET_MINIMAL_TOC                                  \\\n+                    || (SCALAR_FLOAT_MODE_P (GET_MODE (X))              \\\n+                        && ! TARGET_NO_FP_IN_TOC)))                     \\\n+               || (!TARGET_64BIT                                        \\\n+                   && !TARGET_NO_FP_IN_TOC                              \\\n+                   && !TARGET_RELOCATABLE                               \\\n+                   && SCALAR_FLOAT_MODE_P (GET_MODE (X))                \\\n+                   && BITS_PER_WORD == HOST_BITS_PER_INT)))))\n+\n+/* Use --as-needed -lgcc_s for eh support.  */\n+#ifdef HAVE_LD_AS_NEEDED\n+#define USE_LD_AS_NEEDED 1\n+#endif\n+\n+#define POWERPC_FREEBSD\n+/* Definitions for 64-bit PowerPC running FreeBSD using the ELF format\n+   Copyright (C) 2011 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Override the defaults, which exist to force the proper definition.  */\n+\n+#ifndef RS6000_BI_ARCH\n+\n+#undef\tDEFAULT_ABI\n+#define\tDEFAULT_ABI ABI_AIX\n+\n+#undef\tTARGET_64BIT\n+#define\tTARGET_64BIT 1\n+\n+#define\tDEFAULT_ARCH64_P 1\n+#define\tRS6000_BI_ARCH_P 0\n+\n+#else\n+\n+#define\tDEFAULT_ARCH64_P (TARGET_DEFAULT & MASK_64BIT)\n+#define\tRS6000_BI_ARCH_P 1\n+\n+#endif\n+\n+#ifdef IN_LIBGCC2\n+#undef TARGET_64BIT\n+#ifdef __powerpc64__\n+#define TARGET_64BIT 1\n+#else\n+#define TARGET_64BIT 0\n+#endif\n+#endif\n+\n+/* On 64-bit systems, use the AIX ABI like Linux and NetBSD */\n+\n+#undef\tDEFAULT_ABI\n+#define\tDEFAULT_ABI (TARGET_64BIT ? ABI_AIX : ABI_V4)\n+#undef\tTARGET_AIX\n+#define\tTARGET_AIX TARGET_64BIT\n+\n+#ifdef HAVE_LD_NO_DOT_SYMS\n+/* New ABI uses a local sym for the function entry point.  */\n+extern int dot_symbols;\n+#undef DOT_SYMBOLS\n+#define DOT_SYMBOLS dot_symbols\n+#endif\n+\n+#define TARGET_USES_LINUX64_OPT 1\n+#ifdef HAVE_LD_LARGE_TOC\n+#undef TARGET_CMODEL\n+#define TARGET_CMODEL rs6000_current_cmodel\n+#define SET_CMODEL(opt) rs6000_current_cmodel = opt\n+#else\n+#define SET_CMODEL(opt) do {} while (0)\n+#endif\n+\n+/* Until now the 970 is the only Processor where FreeBSD 64-bit runs on.  */\n+#undef  PROCESSOR_DEFAULT\n+#define PROCESSOR_DEFAULT PROCESSOR_POWER4\n+#undef  PROCESSOR_DEFAULT64\n+#define PROCESSOR_DEFAULT64 PROCESSOR_POWER4\n+\n+/* We don't need to generate entries in .fixup, except when\n+   -mrelocatable or -mrelocatable-lib is given.  */\n+#undef RELOCATABLE_NEEDS_FIXUP\n+#define RELOCATABLE_NEEDS_FIXUP \\\n+  (target_flags & target_flags_explicit & MASK_RELOCATABLE)\n+\n+#define INVALID_64BIT \"-m%s not supported in this configuration\"\n+#define INVALID_32BIT INVALID_64BIT\n+\n+#undef\tSUBSUBTARGET_OVERRIDE_OPTIONS\n+#define\tSUBSUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if (!global_options_set.x_rs6000_alignment_flags)\t\t\\\n+\trs6000_alignment_flags = MASK_ALIGN_NATURAL;\t\t\\\n+      if (TARGET_64BIT)\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  if (DEFAULT_ABI != ABI_AIX)\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      rs6000_current_abi = ABI_AIX;\t\t\t\\\n+\t      error (INVALID_64BIT, \"call\");\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  dot_symbols = !strcmp (rs6000_abi_name, \"aixdesc\");\t\\\n+\t  if (target_flags & MASK_RELOCATABLE)\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      target_flags &= ~MASK_RELOCATABLE;\t\t\\\n+\t      error (INVALID_64BIT, \"relocatable\");\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  if (target_flags & MASK_EABI)\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      target_flags &= ~MASK_EABI;\t\t\t\\\n+\t      error (INVALID_64BIT, \"eabi\");\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  if (TARGET_PROTOTYPE)\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      target_prototype = 0;\t\t\t\t\\\n+\t      error (INVALID_64BIT, \"prototype\");\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  if ((target_flags & MASK_POWERPC64) == 0)\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      target_flags |= MASK_POWERPC64;\t\t\t\\\n+\t      error (\"-m64 requires a PowerPC64 cpu\");\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t   if ((target_flags_explicit & MASK_MINIMAL_TOC) != 0)\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      if (global_options_set.x_rs6000_current_cmodel\t\\\n+\t\t  && rs6000_current_cmodel != CMODEL_SMALL)\t\\\n+\t\terror (\"-mcmodel incompatible with other toc options\"); \\\n+\t      SET_CMODEL (CMODEL_SMALL);\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  else\t\t\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      if (!global_options_set.x_rs6000_current_cmodel)\t\\\n+\t\tSET_CMODEL (CMODEL_MEDIUM);\t\t\t\\\n+\t      if (rs6000_current_cmodel != CMODEL_SMALL)\t\\\n+\t\t{\t\t\t\t\t\t\\\n+\t\t  TARGET_NO_FP_IN_TOC = 0;\t\t\t\\\n+\t\t  TARGET_NO_SUM_IN_TOC = 0;\t\t\t\\\n+\t\t}\t\t\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#ifdef\tRS6000_BI_ARCH\n+\n+#undef\tOPTION_TARGET_CPU_DEFAULT\n+#define\tOPTION_TARGET_CPU_DEFAULT \\\n+  (((TARGET_DEFAULT ^ target_flags) & MASK_64BIT) \\\n+   ? (char *) 0 : TARGET_CPU_DEFAULT)\n+\n+#endif\n+\n+#undef\tASM_DEFAULT_SPEC\n+#undef\tASM_SPEC\n+#undef\tLINK_OS_FREEBSD_SPEC\n+\n+#ifndef\tRS6000_BI_ARCH\n+#define\tASM_DEFAULT_SPEC \"-mppc64\"\n+#define\tASM_SPEC\t \"%(asm_spec64) %(asm_spec_common)\"\n+#define\tLINK_OS_FREEBSD_SPEC \"%(link_os_freebsd_spec64)\"\n+#else\n+#if DEFAULT_ARCH64_P\n+#define\tASM_DEFAULT_SPEC \"-mppc%{!m32:64}\"\n+#define\tASM_SPEC\t \"%{m32:%(asm_spec32)}%{!m32:%(asm_spec64)} %(asm_spec_common)\"\n+#define\tLINK_OS_FREEBSD_SPEC \"%{m32:%(link_os_freebsd_spec32)}%{!m32:%(link_os_freebsd_spec64)}\"\n+#else\n+#define\tASM_DEFAULT_SPEC \"-mppc%{m64:64}\"\n+#define\tASM_SPEC\t \"%{!m64:%(asm_spec32)}%{m64:%(asm_spec64)} %(asm_spec_common)\"\n+#define\tLINK_OS_FREEBSD_SPEC \"%{!m64:%(link_os_freebsd_spec32)}%{m64:%(link_os_freebsd_spec64)}\"\n+#endif\n+#endif\n+\n+#define ASM_SPEC32 \"-a32 \\\n+%{mrelocatable} %{mrelocatable-lib} %{fpic:-K PIC} %{fPIC:-K PIC} \\\n+%{memb} %{!memb: %{msdata=eabi: -memb}} \\\n+%{!mlittle: %{!mlittle-endian: %{!mbig: %{!mbig-endian: \\\n+    %{mcall-freebsd: -mbig} \\\n+    %{mcall-i960-old: -mlittle} \\\n+    %{mcall-linux: -mbig} \\\n+    %{mcall-gnu: -mbig} \\\n+    %{mcall-netbsd: -mbig} \\\n+}}}}\"\n+\n+#define ASM_SPEC64 \"-a64\"\n+\n+#define ASM_SPEC_COMMON \"%(asm_cpu) \\\n+%{,assembler|,assembler-with-cpp: %{mregnames} %{mno-regnames}} \\\n+%{mlittle} %{mlittle-endian} %{mbig} %{mbig-endian}\"\n+\n+#undef\tSUBSUBTARGET_EXTRA_SPECS\n+#define SUBSUBTARGET_EXTRA_SPECS \\\n+  { \"asm_spec_common\",\t\tASM_SPEC_COMMON },\t\t\t\\\n+  { \"asm_spec32\",\t\tASM_SPEC32 },\t\t\t\t\\\n+  { \"asm_spec64\",\t\tASM_SPEC64 },\t\t\t\t\\\n+  { \"link_os_freebsd_spec32\",\tLINK_OS_FREEBSD_SPEC32 },     \t\t\\\n+  { \"link_os_freebsd_spec64\",\tLINK_OS_FREEBSD_SPEC64 },\n+\n+#define FREEBSD_DYNAMIC_LINKER32 \"/libexec/ld-elf32.so.1\"\n+#define FREEBSD_DYNAMIC_LINKER64 \"/libexec/ld-elf.so.1\"\n+\n+#define LINK_OS_FREEBSD_SPEC_DEF32 \"\\\n+  %{p:%nconsider using `-pg' instead of `-p' with gprof(1)} \\\n+  %{v:-V}\t\t\t\t\t\t    \\\n+  %{assert*} %{R*} %{rpath*} %{defsym*}\t\t\t    \\\n+  %{shared:-Bshareable %{h*} %{soname*}}\t\t    \\\n+  %{!shared:\t\t\t\t\t\t    \\\n+    %{!static:\t\t\t\t\t\t    \\\n+      %{rdynamic: -export-dynamic}\t\t\t\t       \\\n+      %{!dynamic-linker:-dynamic-linker \" FREEBSD_DYNAMIC_LINKER32 \"}} \\\n+    %{static:-Bstatic}}\t\t\t\t\t\t       \\\n+  %{symbolic:-Bsymbolic}\"\n+\n+#define LINK_OS_FREEBSD_SPEC_DEF64 \"\\\n+  %{p:%nconsider using `-pg' instead of `-p' with gprof(1)} \\\n+  %{v:-V}\t\t\t\t\t\t    \\\n+  %{assert*} %{R*} %{rpath*} %{defsym*}\t\t\t    \\\n+  %{shared:-Bshareable %{h*} %{soname*}}\t\t    \\\n+  %{!shared:\t\t\t\t\t\t    \\\n+    %{!static:\t\t\t\t\t\t    \\\n+      %{rdynamic: -export-dynamic}\t\t\t\t       \\\n+      %{!dynamic-linker:-dynamic-linker \" FREEBSD_DYNAMIC_LINKER64 \"}} \\\n+    %{static:-Bstatic}}\t\t\t\t\t\t       \\\n+  %{symbolic:-Bsymbolic}\"\n+\n+#define LINK_OS_FREEBSD_SPEC32 \"-melf32ppc_fbsd \" LINK_OS_FREEBSD_SPEC_DEF32\n+  \n+#define LINK_OS_FREEBSD_SPEC64 \"-melf64ppc_fbsd \" LINK_OS_FREEBSD_SPEC_DEF64\n+\n+#undef\tMULTILIB_DEFAULTS\n+#if DEFAULT_ARCH64_P\n+#define MULTILIB_DEFAULTS { \"m64\" }\n+#else\n+#define MULTILIB_DEFAULTS { \"m32\" }\n+#endif\n+\n+#ifndef RS6000_BI_ARCH\n+\n+/* Some things from sysv4.h we don't do when 64 bit.  */\n+#undef  TARGET_RELOCATABLE\n+#define TARGET_RELOCATABLE      0\n+#undef  TARGET_EABI\n+#define TARGET_EABI             0\n+#undef  TARGET_PROTOTYPE\n+#define TARGET_PROTOTYPE        0\n+#undef RELOCATABLE_NEEDS_FIXUP\n+#define RELOCATABLE_NEEDS_FIXUP 0\n+\n+#endif\n+\n+/* PowerPC-64 FreeBSD increases natural record alignment to doubleword if\n+   the first field is an FP double, only if in power alignment mode.  */\n+#undef  ROUND_TYPE_ALIGN\n+#define ROUND_TYPE_ALIGN(STRUCT, COMPUTED, SPECIFIED)\t\t\t\\\n+  ((TARGET_64BIT\t\t\t\t\t\t\t\\\n+    && (TREE_CODE (STRUCT) == RECORD_TYPE\t\t\t\t\\\n+\t|| TREE_CODE (STRUCT) == UNION_TYPE\t\t\t\t\\\n+\t|| TREE_CODE (STRUCT) == QUAL_UNION_TYPE)\t\t\t\\\n+    && TARGET_ALIGN_NATURAL == 0)\t\t\t\t\t\\\n+   ? rs6000_special_round_type_align (STRUCT, COMPUTED, SPECIFIED)\t\\\n+   : MAX ((COMPUTED), (SPECIFIED)))\n+\n+/* Use the default for compiling target libs.  */\n+#ifdef IN_TARGET_LIBS\n+#undef TARGET_ALIGN_NATURAL\n+#define TARGET_ALIGN_NATURAL 1\n+#endif\n+\n+/* Indicate that jump tables go in the text section.  */\n+#undef  JUMP_TABLES_IN_TEXT_SECTION\n+#define JUMP_TABLES_IN_TEXT_SECTION TARGET_64BIT\n+\n+/* The linux ppc64 ABI isn't explicit on whether aggregates smaller\n+   than a doubleword should be padded upward or downward.  You could\n+   reasonably assume that they follow the normal rules for structure\n+   layout treating the parameter area as any other block of memory,\n+   then map the reg param area to registers.  i.e. pad upward.\n+   Setting both of the following defines results in this behavior.\n+   Setting just the first one will result in aggregates that fit in a\n+   doubleword being padded downward, and others being padded upward.\n+   Not a bad idea as this results in struct { int x; } being passed\n+   the same way as an int.  */\n+#define AGGREGATE_PADDING_FIXED TARGET_64BIT\n+#define AGGREGATES_PAD_UPWARD_ALWAYS 0\n+\n+/* Specify padding for the last element of a block move between\n+   registers and memory.  FIRST is nonzero if this is the only\n+   element.  */\n+#define BLOCK_REG_PADDING(MODE, TYPE, FIRST) \\\n+  (!(FIRST) ? upward : FUNCTION_ARG_PADDING (MODE, TYPE))\n+\n+/* FreeBSD doesn't support saving and restoring 64-bit regs with a 32-bit\n+   kernel. This is supported when running on a 64-bit kernel with\n+   COMPAT_FREEBSD32, but tell GCC it isn't so that our 32-bit binaries\n+   are compatible. */\n+#define OS_MISSING_POWERPC64 !TARGET_64BIT\n+\n+#undef  FBSD_TARGET_CPU_CPP_BUILTINS\n+#define FBSD_TARGET_CPU_CPP_BUILTINS()\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      if (TARGET_64BIT)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t  builtin_define (\"__PPC__\");\t\t\t\\\n+\t  builtin_define (\"__PPC64__\");\t\t\t\\\n+\t  builtin_define (\"__powerpc__\");\t\t\\\n+\t  builtin_define (\"__powerpc64__\");\t\t\\\n+\t  builtin_assert (\"cpu=powerpc64\");\t\t\\\n+\t  builtin_assert (\"machine=powerpc64\");\t\t\\\n+\t}\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t  builtin_define_std (\"PPC\");\t\t\t\\\n+\t  builtin_define_std (\"powerpc\");\t\t\\\n+\t  builtin_assert (\"cpu=powerpc\");\t\t\\\n+\t  builtin_assert (\"machine=powerpc\");\t\t\\\n+\t  TARGET_OS_SYSV_CPP_BUILTINS ();\t\t\\\n+\t}\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef\tCPP_OS_DEFAULT_SPEC\n+#define CPP_OS_DEFAULT_SPEC \"%(cpp_os_freebsd)\"\n+\n+#undef CPP_OS_FREEBSD_SPEC\n+#define CPP_OS_FREEBSD_SPEC \"\"\n+\n+#undef\tSTARTFILE_DEFAULT_SPEC\n+#define STARTFILE_DEFAULT_SPEC \"%(startfile_freebsd)\"\n+\n+#undef\tENDFILE_DEFAULT_SPEC\n+#define ENDFILE_DEFAULT_SPEC \"%(endfile_freebsd)\"\n+\n+#undef\tLIB_DEFAULT_SPEC\n+#define LIB_DEFAULT_SPEC \"%(lib_freebsd)\"\n+\n+#undef\tLINK_START_DEFAULT_SPEC\n+#define LINK_START_DEFAULT_SPEC \"%(link_start_freebsd)\"\n+\n+#undef\tLINK_OS_DEFAULT_SPEC\n+#define\tLINK_OS_DEFAULT_SPEC \"%(link_os_freebsd)\"\n+\n+/* XXX: This is wrong for many platforms in sysv4.h.\n+   We should work on getting that definition fixed.  */\n+#undef  LINK_SHLIB_SPEC\n+#define LINK_SHLIB_SPEC \"%{shared:-shared} %{!shared: %{static:-static}}\"\n+\n+\n+/************************[  Target stuff  ]***********************************/\n+\n+/* Define the actual types of some ANSI-mandated types.  \n+   Needs to agree with <machine/ansi.h>.  GCC defaults come from c-decl.c,\n+   c-common.c, and config/<arch>/<arch>.h.  */\n+\n+\n+#undef  SIZE_TYPE\n+#define SIZE_TYPE (TARGET_64BIT ? \"long unsigned int\" : \"unsigned int\")\n+\n+#undef  PTRDIFF_TYPE\n+#define PTRDIFF_TYPE\t(TARGET_64BIT ? \"long int\" : \"int\")\n+\n+/* rs6000.h gets this wrong for FreeBSD.  We use the GCC defaults instead.  */\n+#undef WCHAR_TYPE\n+#define\tWCHAR_TYPE      (TARGET_64BIT ? \"int\" : \"long int\")\n+#undef  WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 32\n+\n+\n+/* Override rs6000.h definition.  */\n+#undef  ASM_APP_ON\n+#define ASM_APP_ON \"#APP\\n\"\n+\n+/* Override rs6000.h definition.  */\n+#undef  ASM_APP_OFF\n+#define ASM_APP_OFF \"#NO_APP\\n\"\n+\n+/* PowerPC no-op instruction.  */\n+#undef  RS6000_CALL_GLUE\n+#define RS6000_CALL_GLUE (TARGET_64BIT ? \"nop\" : \"cror 31,31,31\")\n+\n+/* Function profiling bits */\n+#undef  RS6000_MCOUNT\n+#define RS6000_MCOUNT ((TARGET_64BIT) ? \"._mcount\" : \"_mcount\")\n+#define PROFILE_HOOK(LABEL) \\\n+  do { if (TARGET_64BIT) output_profile_hook (LABEL); } while (0)\n+\n+/* _init and _fini functions are built from bits spread across many\n+   object files, each potentially with a different TOC pointer.  For\n+   that reason, place a nop after the call so that the linker can\n+   restore the TOC pointer if a TOC adjusting call stub is needed.  */\n+#ifdef __powerpc64__\n+#if DOT_SYMBOLS\n+#define CRT_CALL_STATIC_FUNCTION(SECTION_OP, FUNC)\t\\\n+  asm (SECTION_OP \"\\n\"\t\t\t\t\t\\\n+\"\tbl .\" #FUNC \"\\n\"\t\t\t\t\\\n+\"\tnop\\n\"\t\t\t\t\t\t\\\n+\"\t.previous\");\n+#else\n+#define CRT_CALL_STATIC_FUNCTION(SECTION_OP, FUNC)\t\\\n+  asm (SECTION_OP \"\\n\"\t\t\t\t\t\\\n+\"\tbl \" #FUNC \"\\n\"\t\t\t\t\t\\\n+\"\tnop\\n\"\t\t\t\t\t\t\\\n+\"\t.previous\");\n+#endif\n+#endif\n+\n+/* FP save and restore routines.  */\n+#undef  SAVE_FP_PREFIX\n+#define SAVE_FP_PREFIX (TARGET_64BIT ? \"._savef\" : \"_savefpr_\")\n+#undef  SAVE_FP_SUFFIX\n+#define SAVE_FP_SUFFIX \"\"\n+#undef  RESTORE_FP_PREFIX\n+#define RESTORE_FP_PREFIX (TARGET_64BIT ? \"._restf\" : \"_restfpr_\")\n+#undef  RESTORE_FP_SUFFIX\n+#define RESTORE_FP_SUFFIX \"\"\n+\n+/* Select a format to encode pointers in exception handling data.  CODE\n+   is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is\n+   true if the symbol may be affected by dynamic relocations.  */\n+#undef\tASM_PREFERRED_EH_DATA_FORMAT\n+#define\tASM_PREFERRED_EH_DATA_FORMAT(CODE, GLOBAL) \\\n+  ((TARGET_64BIT || flag_pic || TARGET_RELOCATABLE)\t\t\t\\\n+   ? (((GLOBAL) ? DW_EH_PE_indirect : 0) | DW_EH_PE_pcrel\t\t\\\n+      | (TARGET_64BIT ? DW_EH_PE_udata8 : DW_EH_PE_sdata4))\t\t\\\n+   : DW_EH_PE_absptr)\n+\n+/* Static stack checking is supported by means of probes.  */\n+#define STACK_CHECK_STATIC_BUILTIN 1\n+\n+/* The default value isn't sufficient in 64-bit mode.  */\n+#define STACK_CHECK_PROTECT (TARGET_64BIT ? 16 * 1024 : 12 * 1024)\n+\n+#define DBX_REGISTER_NUMBER(REGNO) rs6000_dbx_register_number (REGNO)\n+\n+/* PowerPC64 Linux word-aligns FP doubles when -malign-power is given.  */\n+#undef  ADJUST_FIELD_ALIGN\n+#define ADJUST_FIELD_ALIGN(FIELD, COMPUTED) \\\n+  ((TARGET_ALTIVEC && TREE_CODE (TREE_TYPE (FIELD)) == VECTOR_TYPE)     \\\n+   ? 128                                                                \\\n+   : (TARGET_64BIT                                                      \\\n+      && TARGET_ALIGN_NATURAL == 0                                      \\\n+      && TYPE_MODE (strip_array_types (TREE_TYPE (FIELD))) == DFmode)   \\\n+   ? MIN ((COMPUTED), 32)                                               \\\n+   : (COMPUTED))\n+\n+#undef  TOC_SECTION_ASM_OP\n+#define TOC_SECTION_ASM_OP\t\t\t\t\\\n+  (TARGET_64BIT                                         \\\n+   ? \"\\t.section\\t\\\".toc\\\",\\\"aw\\\"\"                      \\\n+   : \"\\t.section\\t\\\".got\\\",\\\"aw\\\"\")\n+\n+#undef  MINIMAL_TOC_SECTION_ASM_OP\n+#define MINIMAL_TOC_SECTION_ASM_OP\t\t\t\\\n+  (TARGET_64BIT                                         \\\n+   ? \"\\t.section\\t\\\".toc1\\\",\\\"aw\\\"\"                     \\\n+   : ((TARGET_RELOCATABLE || flag_pic)                  \\\n+      ? \"\\t.section\\t\\\".got2\\\",\\\"aw\\\"\"                  \\\n+      : \"\\t.section\\t\\\".got1\\\",\\\"aw\\\"\"))\n+\n+/* This is how to declare the size of a function.  */\n+#undef  ASM_DECLARE_FUNCTION_SIZE\n+#define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)                    \\\n+  do                                                                    \\\n+    {                                                                   \\\n+      if (!flag_inhibit_size_directive)                                 \\\n+        {                                                               \\\n+          fputs (\"\\t.size\\t\", (FILE));                                  \\\n+          if (TARGET_64BIT && DOT_SYMBOLS)                              \\\n+            putc ('.', (FILE));                                         \\\n+          assemble_name ((FILE), (FNAME));                              \\\n+          fputs (\",.-\", (FILE));                                        \\\n+          rs6000_output_function_entry (FILE, FNAME);                   \\\n+          putc ('\\n', (FILE));                                          \\\n+        }                                                               \\\n+    }                                                                   \\\n+  while (0)\n+\n+#undef  ASM_OUTPUT_SPECIAL_POOL_ENTRY_P\n+#define ASM_OUTPUT_SPECIAL_POOL_ENTRY_P(X, MODE)                        \\\n+  (TARGET_TOC                                                           \\\n+   && (GET_CODE (X) == SYMBOL_REF                                       \\\n+       || (GET_CODE (X) == CONST && GET_CODE (XEXP (X, 0)) == PLUS      \\\n+           && GET_CODE (XEXP (XEXP (X, 0), 0)) == SYMBOL_REF)           \\\n+       || GET_CODE (X) == LABEL_REF                                     \\\n+       || (GET_CODE (X) == CONST_INT                                    \\\n+           && GET_MODE_BITSIZE (MODE) <= GET_MODE_BITSIZE (Pmode))      \\\n+       || (GET_CODE (X) == CONST_DOUBLE                                 \\\n+           && ((TARGET_64BIT                                            \\\n+                && (TARGET_MINIMAL_TOC                                  \\\n+                    || (SCALAR_FLOAT_MODE_P (GET_MODE (X))              \\\n+                        && ! TARGET_NO_FP_IN_TOC)))                     \\\n+               || (!TARGET_64BIT                                        \\\n+                   && !TARGET_NO_FP_IN_TOC                              \\\n+                   && !TARGET_RELOCATABLE                               \\\n+                   && SCALAR_FLOAT_MODE_P (GET_MODE (X))                \\\n+                   && BITS_PER_WORD == HOST_BITS_PER_INT)))))\n+"}, {"sha": "b6054b302c81fd8fea2590e2afbe8b33e264bffd", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26f86dcb1fd70f7136deb3964443bef528db516/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26f86dcb1fd70f7136deb3964443bef528db516/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a26f86dcb1fd70f7136deb3964443bef528db516", "patch": "@@ -2866,7 +2866,7 @@ rs6000_option_override_internal (bool global_init_p)\n \trs6000_long_double_type_size = RS6000_DEFAULT_LONG_DOUBLE_SIZE;\n     }\n \n-#ifndef POWERPC_LINUX\n+#if !defined (POWERPC_LINUX) && !defined (POWERPC_FREEBSD)\n   if (!global_options_set.x_rs6000_ieeequad)\n     rs6000_ieeequad = 1;\n #endif\n@@ -17506,7 +17506,7 @@ rs6000_savres_strategy (rs6000_stack_t *info,\n       && info->cr_save_p)\n     strategy |= REST_INLINE_GPRS;\n \n-#ifdef POWERPC_LINUX\n+#if defined (POWERPC_LINUX) || defined (POWERPC_FREEBSD)\n   if (TARGET_64BIT)\n     {\n       if (!(strategy & SAVE_INLINE_FPRS))\n@@ -19046,7 +19046,7 @@ rs6000_savres_routine_name (rs6000_stack_t *info, int regno,\n     }\n   else if (DEFAULT_ABI == ABI_AIX)\n     {\n-#ifndef POWERPC_LINUX\n+#if !defined (POWERPC_LINUX) && !defined (POWERPC_FREEBSD)\n       /* No out-of-line save/restore routines for GPRs on AIX.  */\n       gcc_assert (!TARGET_AIX || !gpr);\n #endif\n@@ -19056,7 +19056,7 @@ rs6000_savres_routine_name (rs6000_stack_t *info, int regno,\n \tprefix = (savep\n \t\t  ? (lr ? \"_savegpr0_\" : \"_savegpr1_\")\n \t\t  : (lr ? \"_restgpr0_\" : \"_restgpr1_\"));\n-#ifdef POWERPC_LINUX\n+#if defined (POWERPC_LINUX) || defined (POWERPC_FREEBSD)\n       else if (lr)\n \tprefix = (savep ? \"_savefpr_\" : \"_restfpr_\");\n #endif\n@@ -25051,7 +25051,7 @@ rs6000_elf_file_end (void)\n \t\t aix_struct_return ? 2 : 1);\n     }\n #endif\n-#ifdef POWERPC_LINUX\n+#if defined (POWERPC_LINUX) || defined (POWERPC_FREEBSD)\n   if (TARGET_32BIT)\n     file_end_indicate_exec_stack ();\n #endif"}, {"sha": "aed2a29f5d30165c5bfa6e06f83591d16c0dd350", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26f86dcb1fd70f7136deb3964443bef528db516/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26f86dcb1fd70f7136deb3964443bef528db516/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=a26f86dcb1fd70f7136deb3964443bef528db516", "patch": "@@ -89,9 +89,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   else if (!strcmp (rs6000_abi_name, \"aixdesc\"))\t\t\t\\\n     rs6000_current_abi = ABI_AIX;\t\t\t\t\t\\\n-  else if (!strcmp (rs6000_abi_name, \"freebsd\"))\t\t\t\\\n-    rs6000_current_abi = ABI_V4;\t\t\t\t\t\\\n-  else if (!strcmp (rs6000_abi_name, \"linux\"))\t\t\t\t\\\n+  else if (!strcmp (rs6000_abi_name, \"freebsd\")\t\t\t\t\\\n+\t   || !strcmp (rs6000_abi_name, \"linux\"))\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       if (TARGET_64BIT)\t\t\t\t\t\t\t\\\n \trs6000_current_abi = ABI_AIX;\t\t\t\t\t\\"}, {"sha": "993a1b1d05badadbc8cab7def050c1ae9f5f6f1d", "filename": "gcc/config/rs6000/t-freebsd64", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26f86dcb1fd70f7136deb3964443bef528db516/gcc%2Fconfig%2Frs6000%2Ft-freebsd64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26f86dcb1fd70f7136deb3964443bef528db516/gcc%2Fconfig%2Frs6000%2Ft-freebsd64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-freebsd64?ref=a26f86dcb1fd70f7136deb3964443bef528db516", "patch": "@@ -0,0 +1,66 @@\n+#rs6000/t-freebsd64\n+\n+# Copyright (C) 2012, Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# On FreeBSD the 32-bit libraries are found under /usr/lib32.\n+# Set MULTILIB_OSDIRNAMES according to this.\n+\n+MULTILIB_OPTIONS        = m32 msoft-float\n+MULTILIB_DIRNAMES       = 32 nof\n+MULTILIB_EXTRA_OPTS     = fPIC mstrict-align\n+MULTILIB_EXCEPTIONS     =\n+MULTILIB_EXCLUSIONS     = !m32/msoft-float \n+MULTILIB_OSDIRNAMES\t= ../lib32\n+#MULTILIB_MATCHES        = $(MULTILIB_MATCHES_FLOAT)\n+\n+\n+#rs6000/t-freebsd64\n+\n+# Copyright (C) 2011, Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+TARGET_LIBGCC2_CFLAGS += -mno-minimal-toc\n+\n+# On FreeBSD the 32-bit libraries are found under /usr/lib32.\n+# Set MULTILIB_OSDIRNAMES according to this.\n+\n+MULTILIB_OPTIONS        = m32 msoft-float\n+MULTILIB_DIRNAMES       = 32 nof\n+MULTILIB_EXTRA_OPTS     = fPIC mstrict-align\n+MULTILIB_EXCEPTIONS     =\n+MULTILIB_EXCLUSIONS     = !m32/msoft-float \n+MULTILIB_OSDIRNAMES\t= ../lib32\n+\n+softfp_wrap_start := '\\#ifndef __powerpc64__'\n+softfp_wrap_end := '\\#endif'"}, {"sha": "db5459a42ad976efdd08af1d23ca63a58f952a95", "filename": "gcc/configure", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26f86dcb1fd70f7136deb3964443bef528db516/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26f86dcb1fd70f7136deb3964443bef528db516/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=a26f86dcb1fd70f7136deb3964443bef528db516", "patch": "@@ -26377,7 +26377,15 @@ $as_echo \"#define HAVE_LD_AS_NEEDED 1\" >>confdefs.h\n fi\n \n case \"$target:$tm_file\" in\n-  powerpc64*-*-linux* | powerpc*-*-linux*rs6000/biarch64.h*)\n+  powerpc64-*-freebsd* | powerpc64*-*-linux* | powerpc*-*-linux*rs6000/biarch64.h*)\n+  case \"$target\" in\n+     *-*-linux*)\n+     emul_name=\"-melf64ppc\"\n+      ;;\n+     *-*-freebsd*)\n+     emul_name=\"-melf64ppc_fbsd\"\n+      ;;\n+  esac\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: checking linker support for omitting dot symbols\" >&5\n $as_echo_n \"checking linker support for omitting dot symbols... \" >&6; }\n if test \"${gcc_cv_ld_no_dot_syms+set}\" = set; then :\n@@ -26407,7 +26415,7 @@ foo:\n EOF\n       if $gcc_cv_as -a64 -o conftest1.o conftest1.s > /dev/null 2>&1 \\\n          && $gcc_cv_as -a64 -o conftest2.o conftest2.s > /dev/null 2>&1 \\\n-         && $gcc_cv_ld -melf64ppc -o conftest conftest1.o conftest2.o > /dev/null 2>&1; then\n+         && $gcc_cv_ld $emul_name -o conftest conftest1.o conftest2.o > /dev/null 2>&1; then\n         gcc_cv_ld_no_dot_syms=yes\n       fi\n       rm -f conftest conftest1.o conftest2.o conftest1.s conftest2.s\n@@ -26444,7 +26452,7 @@ _start:\n \tld 9,ie0@got@tprel@l(9)\n EOF\n       if $gcc_cv_as -a64 -o conftest.o conftest.s > /dev/null 2>&1 \\\n-         && $gcc_cv_ld -melf64ppc --no-toc-sort -o conftest conftest.o > /dev/null 2>&1; then\n+         && $gcc_cv_ld $emul_name --no-toc-sort -o conftest conftest.o > /dev/null 2>&1; then\n         gcc_cv_ld_large_toc=yes\n       fi\n       rm -f conftest conftest.o conftest.s"}, {"sha": "d860b2b153f85093b4dfe30b024446cbfbd29831", "filename": "gcc/configure.ac", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26f86dcb1fd70f7136deb3964443bef528db516/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26f86dcb1fd70f7136deb3964443bef528db516/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=a26f86dcb1fd70f7136deb3964443bef528db516", "patch": "@@ -4356,7 +4356,15 @@ if test x\"$gcc_cv_ld_as_needed\" = xyes; then\n fi\n \n case \"$target:$tm_file\" in\n-  powerpc64*-*-linux* | powerpc*-*-linux*rs6000/biarch64.h*)\n+  powerpc64-*-freebsd* | powerpc64*-*-linux* | powerpc*-*-linux*rs6000/biarch64.h*)\n+  case \"$target\" in\n+     *-*-linux*)\n+     emul_name=\"-melf64ppc\"\n+      ;;\n+     *-*-freebsd*)\n+     emul_name=\"-melf64ppc_fbsd\"\n+      ;;\n+  esac\n     AC_CACHE_CHECK(linker support for omitting dot symbols,\n     gcc_cv_ld_no_dot_syms,\n     [gcc_cv_ld_no_dot_syms=no\n@@ -4383,7 +4391,7 @@ foo:\n EOF\n       if $gcc_cv_as -a64 -o conftest1.o conftest1.s > /dev/null 2>&1 \\\n          && $gcc_cv_as -a64 -o conftest2.o conftest2.s > /dev/null 2>&1 \\\n-         && $gcc_cv_ld -melf64ppc -o conftest conftest1.o conftest2.o > /dev/null 2>&1; then\n+         && $gcc_cv_ld $emul_name -o conftest conftest1.o conftest2.o > /dev/null 2>&1; then\n         gcc_cv_ld_no_dot_syms=yes\n       fi\n       rm -f conftest conftest1.o conftest2.o conftest1.s conftest2.s\n@@ -4413,7 +4421,7 @@ _start:\n \tld 9,ie0@got@tprel@l(9)\n EOF\n       if $gcc_cv_as -a64 -o conftest.o conftest.s > /dev/null 2>&1 \\\n-         && $gcc_cv_ld -melf64ppc --no-toc-sort -o conftest conftest.o > /dev/null 2>&1; then\n+         && $gcc_cv_ld $emul_name --no-toc-sort -o conftest conftest.o > /dev/null 2>&1; then\n         gcc_cv_ld_large_toc=yes\n       fi\n       rm -f conftest conftest.o conftest.s"}]}