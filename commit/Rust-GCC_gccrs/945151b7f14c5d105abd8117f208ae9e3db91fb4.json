{"sha": "945151b7f14c5d105abd8117f208ae9e3db91fb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ1MTUxYjdmMTRjNWQxMDVhYmQ4MTE3ZjIwOGFlOWUzZGI5MWZiNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-21T20:13:41Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-21T20:13:41Z"}, "message": "libstdc++: Simplify std::shared_ptr construction from std::weak_ptr\n\nThe _M_add_ref_lock() and _M_add_ref_lock_nothrow() members of\n_Sp_counted_base are very similar, except that the former throws an\nexception when the use count is zero and the latter returns false. The\nformer (and its callers) can be implemented in terms of the latter.\nThis results in a small reduction in code size, because throwing an\nexception now only happens in one place.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/shared_ptr.h (shared_ptr(const weak_ptr&, nothrow_t)):\n\tAdd noexcept.\n\t* include/bits/shared_ptr_base.h (_Sp_counted_base::_M_add_ref_lock):\n\tRemove specializations and just call _M_add_ref_lock_nothrow.\n\t(__shared_count, __shared_ptr): Use nullptr for null pointer\n\tconstants.\n\t(__shared_count(const __weak_count&)): Use _M_add_ref_lock_nothrow\n\tinstead of _M_add_ref_lock.\n\t(__shared_count(const __weak_count&, nothrow_t)): Add noexcept.\n\t(__shared_ptr::operator bool()): Add noexcept.\n\t(__shared_ptr(const __weak_ptr&, nothrow_t)): Add noexcept.", "tree": {"sha": "3c656799177215c65dc72ae9b4a3cf9a334945f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c656799177215c65dc72ae9b4a3cf9a334945f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/945151b7f14c5d105abd8117f208ae9e3db91fb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/945151b7f14c5d105abd8117f208ae9e3db91fb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/945151b7f14c5d105abd8117f208ae9e3db91fb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/945151b7f14c5d105abd8117f208ae9e3db91fb4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84cc3370d6d5972fe495b2114fb32f7b4a49a98d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84cc3370d6d5972fe495b2114fb32f7b4a49a98d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84cc3370d6d5972fe495b2114fb32f7b4a49a98d"}], "stats": {"total": 85, "additions": 22, "deletions": 63}, "files": [{"sha": "0bfb525aae7833621c7d6558d5ed2fd0836996e8", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/945151b7f14c5d105abd8117f208ae9e3db91fb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/945151b7f14c5d105abd8117f208ae9e3db91fb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=945151b7f14c5d105abd8117f208ae9e3db91fb4", "patch": "@@ -413,7 +413,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tallocate_shared(const _Alloc& __a, _Args&&... __args);\n \n       // This constructor is non-standard, it is used by weak_ptr::lock().\n-      shared_ptr(const weak_ptr<_Tp>& __r, std::nothrow_t)\n+      shared_ptr(const weak_ptr<_Tp>& __r, std::nothrow_t) noexcept\n       : __shared_ptr<_Tp>(__r, std::nothrow) { }\n \n       friend class weak_ptr<_Tp>;"}, {"sha": "ca37f2bebd6e649ce8337719b0dd567495e1a393", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 21, "deletions": 62, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/945151b7f14c5d105abd8117f208ae9e3db91fb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/945151b7f14c5d105abd8117f208ae9e3db91fb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=945151b7f14c5d105abd8117f208ae9e3db91fb4", "patch": "@@ -142,10 +142,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }\n \n       void\n-      _M_add_ref_lock();\n+      _M_add_ref_lock()\n+      {\n+\tif (!_M_add_ref_lock_nothrow())\n+\t  __throw_bad_weak_ptr();\n+      }\n \n       bool\n-      _M_add_ref_lock_nothrow();\n+      _M_add_ref_lock_nothrow() noexcept;\n \n       void\n       _M_release() noexcept\n@@ -214,48 +218,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Atomic_word  _M_weak_count;    // #weak + (#shared != 0)\n     };\n \n-  template<>\n-    inline void\n-    _Sp_counted_base<_S_single>::\n-    _M_add_ref_lock()\n-    {\n-      if (_M_use_count == 0)\n-\t__throw_bad_weak_ptr();\n-      ++_M_use_count;\n-    }\n-\n-  template<>\n-    inline void\n-    _Sp_counted_base<_S_mutex>::\n-    _M_add_ref_lock()\n-    {\n-      __gnu_cxx::__scoped_lock sentry(*this);\n-      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, 1) == 0)\n-\t{\n-\t  _M_use_count = 0;\n-\t  __throw_bad_weak_ptr();\n-\t}\n-    }\n-\n-  template<>\n-    inline void\n-    _Sp_counted_base<_S_atomic>::\n-    _M_add_ref_lock()\n-    {\n-      // Perform lock-free add-if-not-zero operation.\n-      _Atomic_word __count = _M_get_use_count();\n-      do\n-\t{\n-\t  if (__count == 0)\n-\t    __throw_bad_weak_ptr();\n-\t  // Replace the current counter value with the old value + 1, as\n-\t  // long as it's not changed meanwhile.\n-\t}\n-      while (!__atomic_compare_exchange_n(&_M_use_count, &__count, __count + 1,\n-\t\t\t\t\t  true, __ATOMIC_ACQ_REL,\n-\t\t\t\t\t  __ATOMIC_RELAXED));\n-    }\n-\n   template<>\n     inline bool\n     _Sp_counted_base<_S_single>::\n@@ -736,7 +698,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __shared_count(const __shared_count& __r) noexcept\n       : _M_pi(__r._M_pi)\n       {\n-\tif (_M_pi != 0)\n+\tif (_M_pi != nullptr)\n \t  _M_pi->_M_add_ref_copy();\n       }\n \n@@ -746,9 +708,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_Sp_counted_base<_Lp>* __tmp = __r._M_pi;\n \tif (__tmp != _M_pi)\n \t  {\n-\t    if (__tmp != 0)\n+\t    if (__tmp != nullptr)\n \t      __tmp->_M_add_ref_copy();\n-\t    if (_M_pi != 0)\n+\t    if (_M_pi != nullptr)\n \t      _M_pi->_M_release();\n \t    _M_pi = __tmp;\n \t  }\n@@ -765,7 +727,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       long\n       _M_get_use_count() const noexcept\n-      { return _M_pi != 0 ? _M_pi->_M_get_use_count() : 0; }\n+      { return _M_pi ? _M_pi->_M_get_use_count() : 0; }\n \n       bool\n       _M_unique() const noexcept\n@@ -897,22 +859,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __shared_count<_Lp>::__shared_count(const __weak_count<_Lp>& __r)\n     : _M_pi(__r._M_pi)\n     {\n-      if (_M_pi != nullptr)\n-\t_M_pi->_M_add_ref_lock();\n-      else\n+      if (_M_pi == nullptr || !_M_pi->_M_add_ref_lock_nothrow())\n \t__throw_bad_weak_ptr();\n     }\n \n   // Now that __weak_count is defined we can define this constructor:\n   template<_Lock_policy _Lp>\n     inline\n     __shared_count<_Lp>::\n-    __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t)\n+    __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t) noexcept\n     : _M_pi(__r._M_pi)\n     {\n-      if (_M_pi != nullptr)\n-\tif (!_M_pi->_M_add_ref_lock_nothrow())\n-\t  _M_pi = nullptr;\n+      if (_M_pi && !_M_pi->_M_add_ref_lock_nothrow())\n+\t_M_pi = nullptr;\n     }\n \n #define __cpp_lib_shared_ptr_arrays 201611L\n@@ -1175,7 +1134,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t: _M_ptr(__p), _M_refcount()\n \t{\n \t  _M_refcount._M_swap(__r._M_refcount);\n-\t  __r._M_ptr = 0;\n+\t  __r._M_ptr = nullptr;\n \t}\n \n       __shared_ptr(const __shared_ptr&) noexcept = default;\n@@ -1191,15 +1150,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _M_ptr(__r._M_ptr), _M_refcount()\n       {\n \t_M_refcount._M_swap(__r._M_refcount);\n-\t__r._M_ptr = 0;\n+\t__r._M_ptr = nullptr;\n       }\n \n       template<typename _Yp, typename = _Compatible<_Yp>>\n \t__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept\n \t: _M_ptr(__r._M_ptr), _M_refcount()\n \t{\n \t  _M_refcount._M_swap(__r._M_refcount);\n-\t  __r._M_ptr = 0;\n+\t  __r._M_ptr = nullptr;\n \t}\n \n       template<typename _Yp, typename = _Compatible<_Yp>>\n@@ -1305,7 +1264,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treset(_Yp* __p) // _Yp must be complete.\n \t{\n \t  // Catch self-reset errors.\n-\t  __glibcxx_assert(__p == 0 || __p != _M_ptr);\n+\t  __glibcxx_assert(__p == nullptr || __p != _M_ptr);\n \t  __shared_ptr(__p).swap(*this);\n \t}\n \n@@ -1325,8 +1284,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return _M_ptr; }\n \n       /// Return true if the stored pointer is not null.\n-      explicit operator bool() const // never throws\n-      { return _M_ptr == 0 ? false : true; }\n+      explicit operator bool() const noexcept\n+      { return _M_ptr != nullptr; }\n \n       /// Return true if use_count() == 1.\n       bool\n@@ -1378,7 +1337,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // This constructor is used by __weak_ptr::lock() and\n       // shared_ptr::shared_ptr(const weak_ptr&, std::nothrow_t).\n-      __shared_ptr(const __weak_ptr<_Tp, _Lp>& __r, std::nothrow_t)\n+      __shared_ptr(const __weak_ptr<_Tp, _Lp>& __r, std::nothrow_t) noexcept\n       : _M_refcount(__r._M_refcount, std::nothrow)\n       {\n \t_M_ptr = _M_refcount._M_get_use_count() ? __r._M_ptr : nullptr;"}]}