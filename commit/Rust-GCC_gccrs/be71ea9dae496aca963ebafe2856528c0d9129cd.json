{"sha": "be71ea9dae496aca963ebafe2856528c0d9129cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU3MWVhOWRhZTQ5NmFjYTk2M2ViYWZlMjg1NjUyOGMwZDkxMjljZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-09-22T18:35:24Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-09-22T18:35:24Z"}, "message": "std_limits.h (__glibcpp_f32_round_error, [...]): Kill.\n\n\t* include/std/std_limits.h (__glibcpp_f32_round_error,\n\t__glibcpp_f64_round_error, __glibcpp_f80_round_error,\n\t__glibcpp_f96_round_error, __glibcpp_f128_round_error,\n\t__glibcpp_float_round_error, __glibcpp_double_round_error,\n\t__glibcpp_long_double_round_error, __glibcpp_float_round_style,\n\t__glibcpp_double_round_style, __glibcpp_long_double_round_style): Kill.\n\t(numeric_limits<char>::epsilon, round_error): Use constant 0.\n\t(numeric_limits<float>::round_error): Use constant 0.5.\n\t(numeric_limits<float>::round_style): Use round_to_nearest.\n\t(numeric_limits<double>, numeric_limits<long double>): Similarly.\n\nFrom-SVN: r57412", "tree": {"sha": "7f6d8a1672e9534199d229a9bc1ffbd48712f997", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f6d8a1672e9534199d229a9bc1ffbd48712f997"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be71ea9dae496aca963ebafe2856528c0d9129cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be71ea9dae496aca963ebafe2856528c0d9129cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be71ea9dae496aca963ebafe2856528c0d9129cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be71ea9dae496aca963ebafe2856528c0d9129cd/comments", "author": null, "committer": null, "parents": [{"sha": "65a824f6c852c40911446b2e2d8cffb13d845781", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65a824f6c852c40911446b2e2d8cffb13d845781", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65a824f6c852c40911446b2e2d8cffb13d845781"}], "stats": {"total": 67, "additions": 22, "deletions": 45}, "files": [{"sha": "9d0be87bb7742f8247040146b5d78cf79a7516ef", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be71ea9dae496aca963ebafe2856528c0d9129cd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be71ea9dae496aca963ebafe2856528c0d9129cd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=be71ea9dae496aca963ebafe2856528c0d9129cd", "patch": "@@ -1,3 +1,16 @@\n+2002-09-22  Richard Henderson  <rth@redhat.com>\n+\n+\t* include/std/std_limits.h (__glibcpp_f32_round_error,\n+\t__glibcpp_f64_round_error, __glibcpp_f80_round_error,\n+\t__glibcpp_f96_round_error, __glibcpp_f128_round_error,\n+\t__glibcpp_float_round_error, __glibcpp_double_round_error,\n+\t__glibcpp_long_double_round_error, __glibcpp_float_round_style,\n+\t__glibcpp_double_round_style, __glibcpp_long_double_round_style): Kill.\n+\t(numeric_limits<char>::epsilon, round_error): Use constant 0.\n+\t(numeric_limits<float>::round_error): Use constant 0.5.\n+\t(numeric_limits<float>::round_style): Use round_to_nearest.\n+\t(numeric_limits<double>, numeric_limits<long double>): Similarly.\n+\n 2002-09-18  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* testsuite/18_support/numeric_limits.cc (test_epsilon): New."}, {"sha": "088f506d9acaca9a36503fcd70607513eed8c298", "filename": "libstdc++-v3/include/std/std_limits.h", "status": "modified", "additions": 9, "deletions": 45, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be71ea9dae496aca963ebafe2856528c0d9129cd/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be71ea9dae496aca963ebafe2856528c0d9129cd/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h?ref=be71ea9dae496aca963ebafe2856528c0d9129cd", "patch": "@@ -150,32 +150,27 @@\n #define __glibcpp_u64_digits 64\n #define __glibcpp_u64_digits10 19\n \n-#define __glibcpp_f32_round_error 1.0F\n #if __GCC_FLOAT_FORMAT__ == __IEEE_FORMAT__\n #  define __glibcpp_f32_is_iec559  true\n #endif\n #ifndef __glibcpp_f32_is_iec559\n #  define __glibcpp_f32_is_iec559 false\n #endif \n-#define __glibcpp_f64_round_error 1.0\n #if __GCC_FLOAT_FORMAT__ == __IEEE_FORMAT__\n #  define __glibcpp_f64_is_iec559 true\n #endif\n #ifndef __glibcpp_f64_is_iec559\n #  define __glibcpp_f64_is_iec559 false\n #endif \n-#define __glibcpp_f80_round_error 1.0L\n #if __GCC_FLOAT_FORMAT__ == __IEEE_FORMAT__\n #  define __glibcpp_f80_is_iec559 true\n #endif\n #ifndef __glibcpp_f80_is_iec559\n #  define __glibcpp_f80_is_iec559 false\n #endif \n-#define __glibcpp_f96_round_error 1.0L\n #if __GCC_FLOAT_FORMAT__ == __IEEE_FORMAT__\n #  define __glibcpp_f96_is_iec559 true\n #endif\n-#define __glibcpp_f128_round_error 1.0L\n #if __GCC_FLOAT_FORMAT__ == __IEEE_FORMAT__\n #  define __glibcpp_f128_is_iec559 true\n #endif\n@@ -503,13 +498,10 @@\n //\n \n #if __FLOAT_BIT__ == 32\n-#  define __glibcpp_float_round_error __glibcpp_f32_round_error\n #  define __glibcpp_float_is_iec559 __glibcpp_f32_is_iec559\n #elif __FLOAT_BIT__ == 64\n-#  define __glibcpp_float_round_error __glibcpp_f64_round_error\n #  define __glibcpp_float_is_iec559 __glibcpp_f64_is_iec559\n #elif __FLOAT_BIT__ == 80\n-#  define __glibcpp_float_round_error __glibcpp_f80_round_error\n #  define __glibcpp_float_is_iec559 __glibcpp_f80_is_iec559\n #else\n // You must define these macros in the configuration file.\n@@ -541,20 +533,13 @@\n #  define __glibcpp_float_tinyness_before false\n #endif\n \n-#ifndef __glibcpp_float_round_style\n-#  define __glibcpp_float_round_style round_toward_zero\n-#endif\n-\n // double\n \n #if __DOUBLE_BIT__ == 32\n-#  define __glibcpp_double_round_error __glibcpp_f32_round_error\n #  define __glibcpp_double_is_iec559 __glibcpp_f32_is_iec559\n #elif __DOUBLE_BIT__ == 64\n-#  define __glibcpp_double_round_error __glibcpp_f64_round_error\n #  define __glibcpp_double_is_iec559 __glibcpp_f64_is_iec559\n #elif __DOUBLE_BIT__ == 80\n-#  define __glibcpp_double_round_error __glibcpp_f80_round_error\n #  define __glibcpp_double_is_iec559 __glibcpp_f80_is_iec559\n #else\n // You must define these macros in the configuration file.\n@@ -586,26 +571,17 @@\n #  define __glibcpp_double_tinyness_before false\n #endif\n \n-#ifndef __glibcpp_double_round_style\n-#  define __glibcpp_double_round_style round_toward_zero\n-#endif\n-\n // long double\n \n #if __LONG_DOUBLE_BIT__ == 32\n-#  define __glibcpp_long_double_round_error __glibcpp_f32_round_error\n #  define __glibcpp_long_double_is_iec559 __glibcpp_f32_is_iec559\n #elif __LONG_DOUBLE_BIT__ == 64\n-#  define __glibcpp_long_double_round_error __glibcpp_f64_round_error\n #  define __glibcpp_long_double_is_iec559 __glibcpp_f64_is_iec559\n #elif __LONG_DOUBLE_BIT__ == 80\n-#  define __glibcpp_long_double_round_error __glibcpp_f80_round_error\n #  define __glibcpp_long_double_is_iec559 __glibcpp_f80_is_iec559\n #elif __LONG_DOUBLE_BIT__ == 96\n-#  define __glibcpp_long_double_round_error __glibcpp_f96_round_error\n #  define __glibcpp_long_double_is_iec559 __glibcpp_f96_is_iec559\n #elif __LONG_DOUBLE_BIT__ == 128\n-#  define __glibcpp_long_double_round_error __glibcpp_f128_round_error\n #  define __glibcpp_long_double_is_iec559 __glibcpp_f128_is_iec559\n #else\n // You must define these macros in the configuration file.\n@@ -637,10 +613,6 @@\n #  define __glibcpp_long_double_tinyness_before false\n #endif\n \n-#ifndef __glibcpp_long_double_round_style\n-#  define __glibcpp_long_double_round_style round_toward_zero\n-#endif\n-\n \n namespace std\n {\n@@ -825,9 +797,9 @@ namespace std\n       static const bool is_exact = true;\n       static const int radix = 2;\n       static char epsilon() throw()\n-      { return char(); }\n+      { return 0; }\n       static char round_error() throw()\n-      { return char(); }\n+      { return 0; }\n \n       static const int min_exponent = 0;\n       static const int min_exponent10 = 0;\n@@ -1505,7 +1477,7 @@ namespace std\n       static float epsilon() throw()\n       { return __FLT_EPSILON__; }\n       static float round_error() throw()\n-      { return __glibcpp_float_round_error; }\n+      { return 0.5F; }\n \n       static const int min_exponent = __FLT_MIN_EXP__;\n       static const int min_exponent10 = __FLT_MIN_10_EXP__;\n@@ -1536,17 +1508,15 @@ namespace std\n \n       static const bool traps = __glibcpp_float_traps;\n       static const bool tinyness_before = __glibcpp_float_tinyness_before;\n-      static const float_round_style round_style = __glibcpp_float_round_style;\n+      static const float_round_style round_style = round_to_nearest;\n     };\n \n-#undef __glibcpp_float_round_error\n #undef __glibcpp_float_has_denorm_loss\n #undef __glibcpp_float_is_iec559\n #undef __glibcpp_float_is_bounded\n #undef __glibcpp_float_is_modulo\n #undef __glibcpp_float_traps\n #undef __glibcpp_float_tinyness_before\n-#undef __glibcpp_float_round_style  \n \n   template<>\n     struct numeric_limits<double>\n@@ -1567,7 +1537,7 @@ namespace std\n       static double epsilon() throw()\n       { return __DBL_EPSILON__; }\n       static double round_error() throw()\n-      { return __glibcpp_double_round_error; }\n+      { return 0.5; }\n \n       static const int min_exponent = __DBL_MIN_EXP__;\n       static const int min_exponent10 = __DBL_MIN_10_EXP__;\n@@ -1598,18 +1568,15 @@ namespace std\n \n       static const bool traps = __glibcpp_double_traps;\n       static const bool tinyness_before = __glibcpp_double_tinyness_before;\n-      static const float_round_style round_style =\n-              __glibcpp_double_round_style;\n+      static const float_round_style round_style = round_to_nearest;\n     };\n \n-#undef __glibcpp_double_round_error\n #undef __glibcpp_double_has_denorm_loss\n #undef __glibcpp_double_is_iec559\n #undef __glibcpp_double_is_bounded\n #undef __glibcpp_double_is_modulo\n #undef __glibcpp_double_traps\n #undef __glibcpp_double_tinyness_before\n-#undef __glibcpp_double_round_style  \n   \n   \n   template<>\n@@ -1631,7 +1598,7 @@ namespace std\n       static long double epsilon() throw()\n       { return __LDBL_EPSILON__; }\n       static long double round_error() throw()\n-      { return __glibcpp_long_double_round_error; }\n+      { return 0.5L; }\n \n       static const int min_exponent = __LDBL_MIN_EXP__;\n       static const int min_exponent10 = __LDBL_MIN_10_EXP__;\n@@ -1663,19 +1630,16 @@ namespace std\n \n       static const bool traps = __glibcpp_long_double_traps; \n       static const bool tinyness_before = __glibcpp_long_double_tinyness_before;\n-      static const float_round_style round_style = \n-        __glibcpp_long_double_round_style;\n+      static const float_round_style round_style = round_to_nearest;\n     };\n \n-#undef __glibcpp_long_double_round_error\n #undef __glibcpp_long_double_has_denorm_loss\n #undef __glibcpp_long_double_is_iec559\n #undef __glibcpp_long_double_is_bounded\n #undef __glibcpp_long_double_is_modulo\n #undef __glibcpp_long_double_traps\n #undef __glibcpp_long_double_tinyness_before\n-#undef __glibcpp_long_double_round_style  \n-  \n+\n } // namespace std\n \n #endif // _CPP_NUMERIC_LIMITS"}]}