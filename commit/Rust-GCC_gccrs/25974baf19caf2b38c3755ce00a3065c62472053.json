{"sha": "25974baf19caf2b38c3755ce00a3065c62472053", "node_id": "C_kwDOANBUbNoAKDI1OTc0YmFmMTljYWYyYjM4YzM3NTVjZTAwYTMwNjVjNjI0NzIwNTM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-06-14T06:35:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-14T06:35:18Z"}, "message": "Merge #1286\n\n1286: gccrs const folding: port over cp_walk_subtrees() r=CohenArthur a=abbasfaisal\n\nCard: [Link](https://github.com/Rust-GCC/gccrs/projects/16#card-82441327)\r\n\r\nMost of TREE_CODEs in the original function belonged to cp/cp-tree.def which have been removed so this ported function is a lot smaller.\n\nCo-authored-by: Faisal Abbas <90.abbasfaisal@gmail.com>", "tree": {"sha": "989dbb68790910b01c497a7c50ba38cd606ab41f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/989dbb68790910b01c497a7c50ba38cd606ab41f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25974baf19caf2b38c3755ce00a3065c62472053", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiqCwnCRBK7hj4Ov3rIwAA1nwIAGXoUjbsxLvTjyIyTrdu41RS\nn0QYC/ZUByB+f9EEbDMQQkC7v6QhfGx7usR7kcmfANqgL0fGQ2ZPqaYvtCsJVWOq\nXjMR0I54c8n0KXWIo8Mk8UPf0MUZfg2N9fzP6zAoLKG4uHdymGs52Aihoj0gAAPU\nKQapges8leEMSMyedYX/aoOseJYL4cblXBHe1u6rSyx6DUSL4+g/6iSunHwHJ4Q0\nlG5MWTDsZ+n3ZQfIEjTII4TLg1pd/WQ90z4niJGsPG6kkk2PK4rZm/xO9yncx+qn\neT4kovrXkNVK263juVa7y2mXCehsqP4MlkhCS66NdN92flnxVc6y9zH1Ov5MItw=\n=0miL\n-----END PGP SIGNATURE-----\n", "payload": "tree 989dbb68790910b01c497a7c50ba38cd606ab41f\nparent 5a62eb20638eab1cbad99e25db6126875b12bf2d\nparent 859b1debbdb9c8795af37b4f08bace1635a61061\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1655188518 +0000\ncommitter GitHub <noreply@github.com> 1655188518 +0000\n\nMerge #1286\n\n1286: gccrs const folding: port over cp_walk_subtrees() r=CohenArthur a=abbasfaisal\n\nCard: [Link](https://github.com/Rust-GCC/gccrs/projects/16#card-82441327)\r\n\r\nMost of TREE_CODEs in the original function belonged to cp/cp-tree.def which have been removed so this ported function is a lot smaller.\n\nCo-authored-by: Faisal Abbas <90.abbasfaisal@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25974baf19caf2b38c3755ce00a3065c62472053", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25974baf19caf2b38c3755ce00a3065c62472053", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25974baf19caf2b38c3755ce00a3065c62472053/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a62eb20638eab1cbad99e25db6126875b12bf2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a62eb20638eab1cbad99e25db6126875b12bf2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a62eb20638eab1cbad99e25db6126875b12bf2d"}, {"sha": "859b1debbdb9c8795af37b4f08bace1635a61061", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/859b1debbdb9c8795af37b4f08bace1635a61061", "html_url": "https://github.com/Rust-GCC/gccrs/commit/859b1debbdb9c8795af37b4f08bace1635a61061"}], "stats": {"total": 124, "additions": 124, "deletions": 0}, "files": [{"sha": "a2a8a223156b40ce7f4819b2a038760cf8e1e09b", "filename": "gcc/rust/backend/rust-tree.cc", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25974baf19caf2b38c3755ce00a3065c62472053/gcc%2Frust%2Fbackend%2Frust-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25974baf19caf2b38c3755ce00a3065c62472053/gcc%2Frust%2Fbackend%2Frust-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-tree.cc?ref=25974baf19caf2b38c3755ce00a3065c62472053", "patch": "@@ -674,4 +674,90 @@ pointer_offset_expression (tree base_tree, tree index_tree, location_t location)\n \t\t\t  base_tree, offset);\n }\n \n+// forked from gcc/cp/tree.cc cp_walk_subtrees\n+/* Apply FUNC to all language-specific sub-trees of TP in a pre-order\n+   traversal.  Called from walk_tree.  */\n+\n+tree\n+rs_walk_subtrees (tree *tp, int *walk_subtrees_p, walk_tree_fn func, void *data,\n+\t\t  hash_set<tree> *pset)\n+{\n+  enum tree_code code = TREE_CODE (*tp);\n+  tree result;\n+\n+#define WALK_SUBTREE(NODE)                                                     \\\n+  do                                                                           \\\n+    {                                                                          \\\n+      result = rs_walk_tree (&(NODE), func, data, pset);                       \\\n+      if (result)                                                              \\\n+\tgoto out;                                                              \\\n+    }                                                                          \\\n+  while (0)\n+\n+  if (TYPE_P (*tp))\n+    {\n+      /* If *WALK_SUBTREES_P is 1, we're interested in the syntactic form of\n+\t the argument, so don't look through typedefs, but do walk into\n+\t template arguments for alias templates (and non-typedefed classes).\n+\n+\t If *WALK_SUBTREES_P > 1, we're interested in type identity or\n+\t equivalence, so look through typedefs, ignoring template arguments for\n+\t alias templates, and walk into template args of classes.\n+\n+\t See find_abi_tags_r for an example of setting *WALK_SUBTREES_P to 2\n+\t when that's the behavior the walk_tree_fn wants.  */\n+      if (*walk_subtrees_p == 1 && typedef_variant_p (*tp))\n+\t{\n+\t  *walk_subtrees_p = 0;\n+\t  return NULL_TREE;\n+\t}\n+    }\n+\n+  /* Not one of the easy cases.  We must explicitly go through the\n+     children.  */\n+  result = NULL_TREE;\n+  switch (code)\n+    {\n+    case TREE_LIST:\n+      WALK_SUBTREE (TREE_PURPOSE (*tp));\n+      break;\n+\n+    case RECORD_TYPE:\n+      if (TYPE_PTRMEMFUNC_P (*tp))\n+\tWALK_SUBTREE (TYPE_PTRMEMFUNC_FN_TYPE_RAW (*tp));\n+      break;\n+\n+    case CONSTRUCTOR:\n+      if (COMPOUND_LITERAL_P (*tp))\n+\tWALK_SUBTREE (TREE_TYPE (*tp));\n+      break;\n+\n+    case DECL_EXPR:\n+      /* User variables should be mentioned in BIND_EXPR_VARS\n+\t and their initializers and sizes walked when walking\n+\t the containing BIND_EXPR.  Compiler temporaries are\n+\t handled here.  And also normal variables in templates,\n+\t since do_poplevel doesn't build a BIND_EXPR then.  */\n+      if (VAR_P (TREE_OPERAND (*tp, 0))\n+\t  && (DECL_ARTIFICIAL (TREE_OPERAND (*tp, 0))\n+\t      && !TREE_STATIC (TREE_OPERAND (*tp, 0))))\n+\t{\n+\t  tree decl = TREE_OPERAND (*tp, 0);\n+\t  WALK_SUBTREE (DECL_INITIAL (decl));\n+\t  WALK_SUBTREE (DECL_SIZE (decl));\n+\t  WALK_SUBTREE (DECL_SIZE_UNIT (decl));\n+\t}\n+      break;\n+\n+    default:\n+      return NULL_TREE;\n+    }\n+\n+  /* We didn't find what we were looking for.  */\n+out:\n+  return result;\n+\n+#undef WALK_SUBTREE\n+}\n+\n } // namespace Rust"}, {"sha": "f164a1043de59db4c23c89eb7d278a63e4b4f38c", "filename": "gcc/rust/backend/rust-tree.h", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25974baf19caf2b38c3755ce00a3065c62472053/gcc%2Frust%2Fbackend%2Frust-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25974baf19caf2b38c3755ce00a3065c62472053/gcc%2Frust%2Fbackend%2Frust-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-tree.h?ref=25974baf19caf2b38c3755ce00a3065c62472053", "patch": "@@ -80,6 +80,37 @@\n #define SLICE_TYPE_P(TYPE)                                                     \\\n   (TREE_CODE (TYPE) == RECORD_TYPE && TREE_LANG_FLAG_0 (TYPE))\n \n+/* Returns true if NODE is a pointer to member function type.  */\n+#define TYPE_PTRMEMFUNC_P(NODE)                                                \\\n+  (TREE_CODE (NODE) == RECORD_TYPE && TYPE_PTRMEMFUNC_FLAG (NODE))\n+\n+#define TYPE_PTRMEMFUNC_FLAG(NODE) (TYPE_LANG_FLAG_2 (RECORD_TYPE_CHECK (NODE)))\n+\n+#define TYPE_PTRMEMFUNC_FN_TYPE_RAW(NODE) (TREE_TYPE (TYPE_FIELDS (NODE)))\n+\n+/* True if NODE is a compound-literal, i.e., a brace-enclosed\n+   initializer cast to a particular type.  This is mostly only set during\n+   template parsing; once the initializer has been digested into an actual\n+   value of the type, the expression is represented by a TARGET_EXPR.  */\n+#define COMPOUND_LITERAL_P(NODE)                                               \\\n+  (TREE_CODE (NODE) == CONSTRUCTOR && TREE_HAS_CONSTRUCTOR (NODE))\n+\n+/* When appearing in an INDIRECT_REF, it means that the tree structure\n+   underneath is actually a call to a constructor.  This is needed\n+   when the constructor must initialize local storage (which can\n+   be automatically destroyed), rather than allowing it to allocate\n+   space from the heap.\n+\n+   When appearing in a SAVE_EXPR, it means that underneath\n+   is a call to a constructor.\n+\n+   When appearing in a CONSTRUCTOR, the expression is an unconverted\n+   compound literal.\n+\n+   When appearing in a FIELD_DECL, it means that this field\n+   has been duly initialized in its constructor.  */\n+#define TREE_HAS_CONSTRUCTOR(NODE) (TREE_LANG_FLAG_4 (NODE))\n+\n namespace Rust {\n \n // forked from gcc/cp/cvt.cc convert_to_void\n@@ -189,6 +220,13 @@ get_fndecl_from_callee (tree fn);\n extern tree\n pointer_offset_expression (tree base_tree, tree index_tree, location_t locus);\n \n+extern tree\n+rs_walk_subtrees (tree *, int *, walk_tree_fn, void *, hash_set<tree> *);\n+#define rs_walk_tree(tp, func, data, pset)                                     \\\n+  walk_tree_1 (tp, func, data, pset, rs_walk_subtrees)\n+#define rs_walk_tree_without_duplicates(tp, func, data)                        \\\n+  walk_tree_without_duplicates_1 (tp, func, data, rs_walk_subtrees)\n+\n } // namespace Rust\n \n #endif // RUST_TREE"}]}