{"sha": "b54c5497e582ab4ee818b7f4fa50c1ac42d42f42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU0YzU0OTdlNTgyYWI0ZWU4MThiN2Y0ZmE1MGMxYWM0MmQ0MmY0Mg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-01-19T11:13:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-01-19T11:13:24Z"}, "message": "builtins.c (expand_builtin_cexpi): Fall back to expanding via cexp in case sincos is not available.\n\n2007-01-19  Richard Guenther  <rguenther@suse.de>\n\n\t* builtins.c (expand_builtin_cexpi): Fall back to expanding\n\tvia cexp in case sincos is not available.\n\nFrom-SVN: r120953", "tree": {"sha": "8aa7960fa2ab0a9fc31dedc803da21172038a158", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8aa7960fa2ab0a9fc31dedc803da21172038a158"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b54c5497e582ab4ee818b7f4fa50c1ac42d42f42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b54c5497e582ab4ee818b7f4fa50c1ac42d42f42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b54c5497e582ab4ee818b7f4fa50c1ac42d42f42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b54c5497e582ab4ee818b7f4fa50c1ac42d42f42/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "006339cde4079778a003f75127e5bc7fbcde256d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/006339cde4079778a003f75127e5bc7fbcde256d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/006339cde4079778a003f75127e5bc7fbcde256d"}], "stats": {"total": 30, "additions": 26, "deletions": 4}, "files": [{"sha": "3c19575369a478c7d2a654546c80e4404c9b07a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54c5497e582ab4ee818b7f4fa50c1ac42d42f42/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54c5497e582ab4ee818b7f4fa50c1ac42d42f42/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b54c5497e582ab4ee818b7f4fa50c1ac42d42f42", "patch": "@@ -1,3 +1,8 @@\n+2007-01-19  Richard Guenther  <rguenther@suse.de>\n+\n+\t* builtins.c (expand_builtin_cexpi): Fall back to expanding\n+\tvia cexp in case sincos is not available.\n+\n 2007-01-19  Richard Guenther  <rguenther@suse.de>\n \n \t* doc/tm.texi (TARGET_HAS_SINCOS): Document new target macro."}, {"sha": "82e5a1e7da2080b25f37765f86d259a9da9e6ace", "filename": "gcc/builtins.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54c5497e582ab4ee818b7f4fa50c1ac42d42f42/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54c5497e582ab4ee818b7f4fa50c1ac42d42f42/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=b54c5497e582ab4ee818b7f4fa50c1ac42d42f42", "patch": "@@ -2240,8 +2240,8 @@ expand_builtin_cexpi (tree exp, rtx target, rtx subtarget)\n   mode = TYPE_MODE (TREE_TYPE (arg));\n \n   /* Try expanding via a sincos optab, fall back to emitting a libcall\n-     to sincos.  We are sure we have sincos either way because cexpi\n-     is only generated from sincos.  */\n+     to sincos or cexp.  We are sure we have sincos or cexp because cexpi\n+     is only generated from sincos, cexp or if we have either of them.  */\n   if (sincos_optab->handlers[(int) mode].insn_code != CODE_FOR_nothing)\n     {\n       op1 = gen_reg_rtx (mode);\n@@ -2252,7 +2252,7 @@ expand_builtin_cexpi (tree exp, rtx target, rtx subtarget)\n       /* Compute into op1 and op2.  */\n       expand_twoval_unop (sincos_optab, op0, op2, op1, 0);\n     }\n-  else\n+  else if (TARGET_HAS_SINCOS)\n     {\n       tree call, narglist, fn = NULL_TREE;\n       tree top1, top2;\n@@ -2264,7 +2264,6 @@ expand_builtin_cexpi (tree exp, rtx target, rtx subtarget)\n \tfn = built_in_decls[BUILT_IN_SINCOS];\n       else if (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_CEXPIL)\n \tfn = built_in_decls[BUILT_IN_SINCOSL];\n-      gcc_assert (fn);\n  \n       op1 = assign_temp (TREE_TYPE (arg), 0, 1, 1);\n       op2 = assign_temp (TREE_TYPE (arg), 0, 1, 1);\n@@ -2282,6 +2281,24 @@ expand_builtin_cexpi (tree exp, rtx target, rtx subtarget)\n       expand_normal (build3 (CALL_EXPR, TREE_TYPE (TREE_TYPE (fn)),\n \t\t\t     call, narglist, NULL_TREE));\n     }\n+  else\n+    {\n+      tree call, fn, narg;\n+      tree ctype = build_complex_type (type);\n+\n+      /* We can expand via the C99 cexp function.  */\n+      gcc_assert (TARGET_C99_FUNCTIONS);\n+\n+      fn = mathfn_built_in (ctype, BUILT_IN_CEXP);\n+      narg = fold_build2 (COMPLEX_EXPR, ctype,\n+\t\t\t  build_real (type, dconst0), arg);\n+\n+      /* Make sure not to fold the cexp call again.  */\n+      call = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (fn)), fn);\n+      return expand_expr (build3 (CALL_EXPR, ctype, call,\n+\t\t\t\t  build_tree_list (NULL_TREE, narg),\n+\t\t\t\t  NULL_TREE), target, VOIDmode, 0);\n+    }\n \n   /* Now build the proper return type.  */\n   return expand_expr (build2 (COMPLEX_EXPR, build_complex_type (type),"}]}