{"sha": "64b5da8f97122de895af1b13c5f5e103717858c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRiNWRhOGY5NzEyMmRlODk1YWYxYjEzYzVmNWUxMDM3MTc4NThjNg==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-06-10T09:22:12Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-06-18T07:58:18Z"}, "message": "Add statistics counting to PHI-OPT\n\nThis should have been done before I started to work on connecting\nPHI-OPT to match-and-simplify to see quickly if we miss anything\nbut it is better late than never.\nAnyways there was no statistics counting in PHI-OPT before so adding\nit is the right thing to do.\n\nOK? Bootstrapped and tested on x86_64-linux-gnu with no regressions.\n\ngcc/ChangeLog:\n\n\t* tree-ssa-phiopt.c (replace_phi_edge_with_variable):\n\tAdd counting of how many times it is done.\n\t(factor_out_conditional_conversion): Likewise.\n\t(match_simplify_replacement): Likewise.\n\t(value_replacement): Likewise.\n\t(spaceship_replacement): Likewise.\n\t(cond_store_replacement): Likewise.\n\t(cond_if_else_store_replacement_1): Likewise.\n\t(hoist_adjacent_loads): Likewise.", "tree": {"sha": "bebdc513269d58ef4740fb8855bae4c938e2a871", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bebdc513269d58ef4740fb8855bae4c938e2a871"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64b5da8f97122de895af1b13c5f5e103717858c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64b5da8f97122de895af1b13c5f5e103717858c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64b5da8f97122de895af1b13c5f5e103717858c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64b5da8f97122de895af1b13c5f5e103717858c6/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f1686ff70b25fceb04ca2ffc0a450fb682913ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f1686ff70b25fceb04ca2ffc0a450fb682913ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f1686ff70b25fceb04ca2ffc0a450fb682913ef"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "02e26f974a525bc319b0541112a730a8ee6e822a", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64b5da8f97122de895af1b13c5f5e103717858c6/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64b5da8f97122de895af1b13c5f5e103717858c6/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=64b5da8f97122de895af1b13c5f5e103717858c6", "patch": "@@ -419,6 +419,8 @@ replace_phi_edge_with_variable (basic_block cond_block,\n   gsi = gsi_last_bb (cond_block);\n   gsi_remove (&gsi, true);\n \n+  statistics_counter_event (cfun, \"Replace PHI with variable\", 1);\n+\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file,\n \t      \"COND_EXPR in block %d and PHI in block %d converted to straightline code.\\n\",\n@@ -618,6 +620,9 @@ factor_out_conditional_conversion (edge e0, edge e1, gphi *phi,\n   /* Remove the original PHI stmt.  */\n   gsi = gsi_for_stmt (phi);\n   gsi_remove (&gsi, true);\n+\n+  statistics_counter_event (cfun, \"factored out cast\", 1);\n+\n   return newphi;\n }\n \n@@ -893,6 +898,11 @@ match_simplify_replacement (basic_block cond_bb, basic_block middle_bb,\n \n   replace_phi_edge_with_variable (cond_bb, e1, phi, result);\n \n+  /* Add Statistic here even though replace_phi_edge_with_variable already\n+     does it as we want to be able to count when match-simplify happens vs\n+     the others.  */\n+  statistics_counter_event (cfun, \"match-simplify PHI replacement\", 1);\n+\n   /* Note that we optimized this PHI.  */\n   return true;\n }\n@@ -1196,6 +1206,8 @@ value_replacement (basic_block cond_bb, basic_block middle_bb,\n \t}\n       else\n \t{\n+\t  statistics_counter_event (cfun, \"Replace PHI with variable/value_replacement\", 1);\n+\n \t  /* Replace the PHI arguments with arg. */\n \t  SET_PHI_ARG_DEF (phi, e0->dest_idx, arg);\n \t  SET_PHI_ARG_DEF (phi, e1->dest_idx, arg);\n@@ -2320,6 +2332,7 @@ spaceship_replacement (basic_block cond_bb, basic_block middle_bb,\n \n   gimple_stmt_iterator psi = gsi_for_stmt (phi);\n   remove_phi_node (&psi, true);\n+  statistics_counter_event (cfun, \"spaceship replacement\", 1);\n \n   return true;\n }\n@@ -2982,6 +2995,7 @@ cond_store_replacement (basic_block middle_bb, basic_block join_bb,\n       fprintf (dump_file, \"\\nInserted a new PHI statement in joint block:\\n\");\n       print_gimple_stmt (dump_file, new_stmt, 0, TDF_VOPS|TDF_MEMSYMS);\n     }\n+  statistics_counter_event (cfun, \"conditional store replacement\", 1);\n \n   return true;\n }\n@@ -3056,6 +3070,8 @@ cond_if_else_store_replacement_1 (basic_block then_bb, basic_block else_bb,\n   else\n     gsi_insert_before (&gsi, new_stmt, GSI_NEW_STMT);\n \n+  statistics_counter_event (cfun, \"if-then-else store replacement\", 1);\n+\n   return true;\n }\n \n@@ -3469,6 +3485,7 @@ hoist_adjacent_loads (basic_block bb0, basic_block bb1,\n       gsi_move_to_bb_end (&gsi2, bb0);\n       gsi2 = gsi_for_stmt (def2);\n       gsi_move_to_bb_end (&gsi2, bb0);\n+      statistics_counter_event (cfun, \"hoisted loads\", 1);\n \n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{"}]}