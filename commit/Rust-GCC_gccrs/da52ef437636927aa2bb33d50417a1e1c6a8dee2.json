{"sha": "da52ef437636927aa2bb33d50417a1e1c6a8dee2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE1MmVmNDM3NjM2OTI3YWEyYmIzM2Q1MDQxN2ExZTFjNmE4ZGVlMg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2012-12-09T09:15:36Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2012-12-09T09:15:36Z"}, "message": "re PR fortran/55593 (Bogus error on passing DO LOOP variable)\n\n2012-12-09  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/55593\n\t* frontend-passes.c (doloop_code):  Use resolved_sym\n\tinstead of n.sym->formal for formal argument list\n\tto get the correct version for all generic subroutines.\n\n2012-12-09  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/55593\n\t* gfortran.dg/do_check_8.f90:  New test.\n\nFrom-SVN: r194329", "tree": {"sha": "590f48a25ac157170a8183ddf10ba931cee92030", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/590f48a25ac157170a8183ddf10ba931cee92030"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da52ef437636927aa2bb33d50417a1e1c6a8dee2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da52ef437636927aa2bb33d50417a1e1c6a8dee2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da52ef437636927aa2bb33d50417a1e1c6a8dee2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da52ef437636927aa2bb33d50417a1e1c6a8dee2/comments", "author": null, "committer": null, "parents": [{"sha": "5f515aaecb0097a0afbef336815934cfa0d698d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f515aaecb0097a0afbef336815934cfa0d698d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f515aaecb0097a0afbef336815934cfa0d698d8"}], "stats": {"total": 75, "additions": 74, "deletions": 1}, "files": [{"sha": "12d53eeb92646aebddfde7a3cdfb0b746f7a39e9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da52ef437636927aa2bb33d50417a1e1c6a8dee2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da52ef437636927aa2bb33d50417a1e1c6a8dee2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=da52ef437636927aa2bb33d50417a1e1c6a8dee2", "patch": "@@ -1,3 +1,8 @@\n+2012-12-09  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/55593\n+\t* gfortran.dg/do_check_8.f90:  New test.\n+\n 2012-12-05  Tobias Burnus  <burnus@net-b.de>\n \n \t* resolve.c (generate_component_assignments): Fix memleak."}, {"sha": "691862f3d7361f7e3b4a981075a9fe90a134673d", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da52ef437636927aa2bb33d50417a1e1c6a8dee2/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da52ef437636927aa2bb33d50417a1e1c6a8dee2/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=da52ef437636927aa2bb33d50417a1e1c6a8dee2", "patch": "@@ -1277,7 +1277,11 @@ doloop_code (gfc_code **c, int *walk_subtrees ATTRIBUTE_UNUSED,\n       break;\n \n     case EXEC_CALL:\n-      f = co->symtree->n.sym->formal;\n+\n+      if (co->resolved_sym == NULL)\n+\tbreak;\n+\n+      f = co->resolved_sym->formal;\n \n       /* Withot a formal arglist, there is only unknown INTENT,\n \t which we don't check for.  */"}, {"sha": "823916af8106094aa1eb2d8a06741048805279a7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da52ef437636927aa2bb33d50417a1e1c6a8dee2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da52ef437636927aa2bb33d50417a1e1c6a8dee2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da52ef437636927aa2bb33d50417a1e1c6a8dee2", "patch": "@@ -1,3 +1,8 @@\n+2012-12-09  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/55593\n+\t* gfortran.dg/do_check_8.f90:  New test.\n+\n 2012-12-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/vect10.ad[sb]: New test."}, {"sha": "458ae40b604678792660ce2168e539d11de1427c", "filename": "gcc/testsuite/gfortran.dg/do_check_8.f90", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da52ef437636927aa2bb33d50417a1e1c6a8dee2/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da52ef437636927aa2bb33d50417a1e1c6a8dee2/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_8.f90?ref=da52ef437636927aa2bb33d50417a1e1c6a8dee2", "patch": "@@ -0,0 +1,59 @@\n+! { dg-do compile }\n+! PR 55593 - bogus error with generic subroutines\n+module foo\n+  implicit none\n+  interface sub\n+     subroutine sub2(i)\n+       integer, intent(in) :: i\n+     end subroutine sub2\n+     subroutine sub(i)\n+       integer, dimension(:), intent(out) :: i\n+     end subroutine sub\n+  end interface sub\n+\n+  interface tub2\n+     subroutine tub2(i)\n+       integer, intent(in) :: i\n+     end subroutine tub2\n+     subroutine tub(i)\n+       integer, dimension(:), intent(out) :: i\n+     end subroutine tub\n+  end interface tub2\n+\n+  interface func\n+     integer function ifunc(i)\n+       integer, intent(in) :: i\n+     end function ifunc\n+     integer function func(i)\n+       integer, intent(in) :: i(:)\n+     end function func\n+  end interface func\n+\n+  interface igunc\n+     integer function igunc(i)\n+       integer, intent(in) :: i\n+     end function igunc\n+     integer function gunc(i)\n+       integer, intent(in) :: i(:)\n+     end function gunc\n+  end interface igunc\n+end module foo\n+\n+program main\n+  use foo\n+  implicit none\n+  integer :: i\n+  do i=1,10\n+     call sub(i)\n+     call tub2(i)\n+  end do\n+  do i=1,10\n+     print *,func(i)\n+     print *,igunc(i)\n+  end do\n+\n+  do undeclared=1,10        ! { dg-error \"has no IMPLICIT type\" }\n+     call sub(undeclared)\n+  end do\n+end program main\n+! { dg-final { cleanup-modules \"foo\" } }"}]}