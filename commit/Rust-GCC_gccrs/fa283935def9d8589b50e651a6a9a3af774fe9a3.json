{"sha": "fa283935def9d8589b50e651a6a9a3af774fe9a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmEyODM5MzVkZWY5ZDg1ODliNTBlNjUxYTZhOWEzYWY3NzRmZTlhMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2006-12-11T14:06:07Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2006-12-11T14:06:07Z"}, "message": "re PR target/30120 (silent miscompilation of argument passing)\n\n\tPR target/30120\n\tRevert:\n\t2006-11-15  Uros Bizjak  <ubizjak@gmail.com>\n\n\t* config/i386/i386.opt: New target option -mx87regparm.\n\n\t* config/i386/i386.h (struct ix86_args): Add x87_nregs, x87_regno,\n\tfloat_in_x87: Add new variables. mmx_words, sse_words: Remove.\n\t(X87_REGPARM_MAX): Define.\n\n\t* config/i386/i386.c (override_options): Error out for\n\t-mx87regparm but no 80387 support.\n\t(ix86_attribute_table): Add x87regparm.\n\t(ix86_handle_cconv_attribute): Update comments for x87regparm.\n\t(ix86_comp_type_attributes): Check for mismatched x87regparm types.\n\t(ix86_function_x87regparm): New function.\n\t(ix86_function_arg_regno_p): Add X87_REGPARM_MAX 80387 floating\n\tpoint registers.\n\t(init_cumulative_args): Initialize x87_nregs and float_in_x87\n\tvariables.\n\t(function_arg_advance): Process x87_nregs and x87_regno when\n\tfloating point argument is to be passed in 80387 register.\n\t(function_arg): Pass XFmode arguments in 80387 registers for local\n\tfunctions.  Pass SFmode and DFmode arguments to local functions\n\tin 80387 registers when flag_unsafe_math_optimizations is set.\n\n\t* reg-stack.c (convert_regs_entry): Disable NaN load for\n\tstack registers that are used for argument passing.\n\n\t* doc/extend.texi: Document x87regparm function attribute.\n\t* doc/invoke.texi: Document -mx87regparm.\n\ntestsuite/ChangeLog:\n\n\tPR target/30120\n\t* gcc.target/i386/pr30120.c: New test.\n\n\tRevert:\n\t2006-11-15  Uros Bizjak  <ubizjak@gmail.com>\n\n\t* gcc.target/i386/x87regparm-1.c: New test.\n\t* gcc.target/i386/x87regparm-2.c: New test.\n\t* gcc.target/i386/x87regparm-3.c: New test.\n\t* gcc.target/i386/x87regparm-4.c: New test.\n\nFrom-SVN: r119734", "tree": {"sha": "b84b83cd26e28436a111b54380af292b10b0f3c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b84b83cd26e28436a111b54380af292b10b0f3c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa283935def9d8589b50e651a6a9a3af774fe9a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa283935def9d8589b50e651a6a9a3af774fe9a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa283935def9d8589b50e651a6a9a3af774fe9a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa283935def9d8589b50e651a6a9a3af774fe9a3/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c3f824ce13d83da71f55201f4608db64478e4ef1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3f824ce13d83da71f55201f4608db64478e4ef1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3f824ce13d83da71f55201f4608db64478e4ef1"}], "stats": {"total": 386, "additions": 104, "deletions": 282}, "files": [{"sha": "9e904a6cc85780a5a1600bdbcce04e2455c3e481", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa283935def9d8589b50e651a6a9a3af774fe9a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa283935def9d8589b50e651a6a9a3af774fe9a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa283935def9d8589b50e651a6a9a3af774fe9a3", "patch": "@@ -1,3 +1,37 @@\n+2006-12-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/30120\n+\tRevert:\n+\t2006-11-15  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.opt: New target option -mx87regparm.\n+\n+\t* config/i386/i386.h (struct ix86_args): Add x87_nregs, x87_regno,\n+\tfloat_in_x87: Add new variables. mmx_words, sse_words: Remove.\n+\t(X87_REGPARM_MAX): Define.\n+\n+\t* config/i386/i386.c (override_options): Error out for\n+\t-mx87regparm but no 80387 support.\n+\t(ix86_attribute_table): Add x87regparm.\n+\t(ix86_handle_cconv_attribute): Update comments for x87regparm.\n+\t(ix86_comp_type_attributes): Check for mismatched x87regparm types.\n+\t(ix86_function_x87regparm): New function.\n+\t(ix86_function_arg_regno_p): Add X87_REGPARM_MAX 80387 floating\n+\tpoint registers.\n+\t(init_cumulative_args): Initialize x87_nregs and float_in_x87\n+\tvariables.\n+\t(function_arg_advance): Process x87_nregs and x87_regno when\n+\tfloating point argument is to be passed in 80387 register.\n+\t(function_arg): Pass XFmode arguments in 80387 registers for local\n+\tfunctions.  Pass SFmode and DFmode arguments to local functions\n+\tin 80387 registers when flag_unsafe_math_optimizations is set.\n+\n+\t* reg-stack.c (convert_regs_entry): Disable NaN load for\n+\tstack registers that are used for argument passing.\n+\n+\t* doc/extend.texi: Document x87regparm function attribute.\n+\t* doc/invoke.texi: Document -mx87regparm.\n+\n 2006-12-11  Jan Hubicka  <jh@suse.cz>\n \n \tMove all varpool routines out of cgraph/cgraphunit to varpool.c"}, {"sha": "004ee5314779628bfbdee53940c21f839020e5b4", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 21, "deletions": 134, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa283935def9d8589b50e651a6a9a3af774fe9a3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa283935def9d8589b50e651a6a9a3af774fe9a3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fa283935def9d8589b50e651a6a9a3af774fe9a3", "patch": "@@ -2149,11 +2149,6 @@ override_options (void)\n \tix86_preferred_stack_boundary = (1 << i) * BITS_PER_UNIT;\n     }\n \n-  /* Accept -mx87regparm only if 80387 support is enabled.  */\n-  if (TARGET_X87REGPARM\n-      && ! TARGET_80387)\n-    error (\"-mx87regparm used without 80387 enabled\");\n-\n   /* Accept -msseregparm only if at least SSE support is enabled.  */\n   if (TARGET_SSEREGPARM\n       && ! TARGET_SSE)\n@@ -2460,9 +2455,6 @@ const struct attribute_spec ix86_attribute_table[] =\n   /* Regparm attribute specifies how many integer arguments are to be\n      passed in registers.  */\n   { \"regparm\",   1, 1, false, true,  true,  ix86_handle_cconv_attribute },\n-  /* X87regparm attribute says we are passing floating point arguments\n-     in 80387 registers.  */\n-  { \"x87regparm\", 0, 0, false, true, true, ix86_handle_cconv_attribute },\n   /* Sseregparm attribute says we are using x86_64 calling conventions\n      for FP arguments.  */\n   { \"sseregparm\", 0, 0, false, true, true, ix86_handle_cconv_attribute },\n@@ -2565,8 +2557,8 @@ ix86_function_ok_for_sibcall (tree decl, tree exp)\n   return true;\n }\n \n-/* Handle \"cdecl\", \"stdcall\", \"fastcall\", \"regparm\", \"x87regparm\"\n-   and \"sseregparm\" calling convention attributes;\n+/* Handle \"cdecl\", \"stdcall\", \"fastcall\", \"regparm\" and \"sseregparm\"\n+   calling convention attributes;\n    arguments as in struct attribute_spec.handler.  */\n \n static tree\n@@ -2631,8 +2623,7 @@ ix86_handle_cconv_attribute (tree *node, tree name,\n       return NULL_TREE;\n     }\n \n-  /* Can combine fastcall with stdcall (redundant), x87regparm\n-     and sseregparm.  */\n+  /* Can combine fastcall with stdcall (redundant) and sseregparm.  */\n   if (is_attribute_p (\"fastcall\", name))\n     {\n       if (lookup_attribute (\"cdecl\", TYPE_ATTRIBUTES (*node)))\n@@ -2649,8 +2640,8 @@ ix86_handle_cconv_attribute (tree *node, tree name,\n \t}\n     }\n \n-  /* Can combine stdcall with fastcall (redundant), regparm,\n-     x87regparm and sseregparm.  */\n+  /* Can combine stdcall with fastcall (redundant), regparm and\n+     sseregparm.  */\n   else if (is_attribute_p (\"stdcall\", name))\n     {\n       if (lookup_attribute (\"cdecl\", TYPE_ATTRIBUTES (*node)))\n@@ -2663,7 +2654,7 @@ ix86_handle_cconv_attribute (tree *node, tree name,\n \t}\n     }\n \n-  /* Can combine cdecl with regparm, x87regparm and sseregparm.  */\n+  /* Can combine cdecl with regparm and sseregparm.  */\n   else if (is_attribute_p (\"cdecl\", name))\n     {\n       if (lookup_attribute (\"stdcall\", TYPE_ATTRIBUTES (*node)))\n@@ -2676,7 +2667,7 @@ ix86_handle_cconv_attribute (tree *node, tree name,\n \t}\n     }\n \n-  /* Can combine x87regparm or sseregparm with all attributes.  */\n+  /* Can combine sseregparm with all attributes.  */\n \n   return NULL_TREE;\n }\n@@ -2701,11 +2692,6 @@ ix86_comp_type_attributes (tree type1, tree type2)\n \t  != ix86_function_regparm (type2, NULL)))\n     return 0;\n \n-  /* Check for mismatched x87regparm types.  */\n-  if (!lookup_attribute (\"x87regparm\", TYPE_ATTRIBUTES (type1))\n-      != !lookup_attribute (\"x87regparm\", TYPE_ATTRIBUTES (type2)))\n-    return 0;\n-\n   /* Check for mismatched sseregparm types.  */\n   if (!lookup_attribute (\"sseregparm\", TYPE_ATTRIBUTES (type1))\n       != !lookup_attribute (\"sseregparm\", TYPE_ATTRIBUTES (type2)))\n@@ -2794,48 +2780,6 @@ ix86_function_regparm (tree type, tree decl)\n   return regparm;\n }\n \n-/* Return 1 if we can pass up to X87_REGPARM_MAX floating point\n-   arguments in x87 registers for a function with the indicated\n-   TYPE and DECL.  DECL may be NULL when calling function indirectly\n-   or considering a libcall.  For local functions, return 2.\n-   Otherwise return 0.  */\n-\n-static int\n-ix86_function_x87regparm (tree type, tree decl)\n-{\n-  /* Use x87 registers to pass floating point arguments if requested\n-     by the x87regparm attribute.  */\n-  if (TARGET_X87REGPARM\n-      || (type\n-\t  && lookup_attribute (\"x87regparm\", TYPE_ATTRIBUTES (type))))\n-    {\n-      if (!TARGET_80387)\n-\t{\n-\t  if (decl)\n-\t    error (\"Calling %qD with attribute x87regparm without \"\n-\t\t   \"80387 enabled\", decl);\n-\t  else\n-\t    error (\"Calling %qT with attribute x87regparm without \"\n-\t\t   \"80387 enabled\", type);\n-\t  return 0;\n-\t}\n-\n-      return 1;\n-    }\n-\n-  /* For local functions, pass up to X87_REGPARM_MAX floating point\n-     arguments in x87 registers.  */\n-  if (!TARGET_64BIT && decl\n-      && flag_unit_at_a_time && !profile_flag)\n-    {\n-      struct cgraph_local_info *i = cgraph_local_info (decl);\n-      if (i && i->local)\n-\treturn 2;\n-    }\n-\n-  return 0;\n-}\n-\n /* Return 1 or 2, if we can pass up to SSE_REGPARM_MAX SFmode (1) and\n    DFmode (2) arguments in SSE registers for a function with the\n    indicated TYPE and DECL.  DECL may be NULL when calling function\n@@ -2955,8 +2899,6 @@ ix86_function_arg_regno_p (int regno)\n   int i;\n   if (!TARGET_64BIT)\n     return (regno < REGPARM_MAX\n-\t    || (TARGET_80387 && FP_REGNO_P (regno)\n-\t\t&& (regno < FIRST_FLOAT_REG + X87_REGPARM_MAX))\n \t    || (TARGET_MMX && MMX_REGNO_P (regno)\n \t\t&& (regno < FIRST_MMX_REG + MMX_REGPARM_MAX))\n \t    || (TARGET_SSE && SSE_REGNO_P (regno)\n@@ -3020,8 +2962,6 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n \n   /* Set up the number of registers to use for passing arguments.  */\n   cum->nregs = ix86_regparm;\n-  if (TARGET_80387)\n-    cum->x87_nregs = X87_REGPARM_MAX;\n   if (TARGET_SSE)\n     cum->sse_nregs = SSE_REGPARM_MAX;\n   if (TARGET_MMX)\n@@ -3043,10 +2983,6 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n \tcum->nregs = ix86_function_regparm (fntype, fndecl);\n     }\n \n-  /* Set up the number of 80387 registers used for passing\n-     floating point arguments.  Warn for mismatching ABI.  */\n-  cum->float_in_x87 = ix86_function_x87regparm (fntype, fndecl);\n-\n   /* Set up the number of SSE registers used for passing SFmode\n      and DFmode arguments.  Warn for mismatching ABI.  */\n   cum->float_in_sse = ix86_function_sseregparm (fntype, fndecl);\n@@ -3056,8 +2992,7 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n      are no variable arguments.  If there are variable arguments, then\n      we won't pass anything in registers in 32-bit mode. */\n \n-  if (cum->nregs || cum->mmx_nregs\n-      || cum->x87_nregs || cum->sse_nregs)\n+  if (cum->nregs || cum->mmx_nregs || cum->sse_nregs)\n     {\n       for (param = (fntype) ? TYPE_ARG_TYPES (fntype) : 0;\n \t   param != 0; param = next_param)\n@@ -3068,13 +3003,11 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n \t      if (!TARGET_64BIT)\n \t\t{\n \t\t  cum->nregs = 0;\n-\t\t  cum->x87_nregs = 0;\n \t\t  cum->sse_nregs = 0;\n \t\t  cum->mmx_nregs = 0;\n \t\t  cum->warn_sse = 0;\n \t\t  cum->warn_mmx = 0;\n \t\t  cum->fastcall = 0;\n-\t\t  cum->float_in_x87 = 0;\n \t\t  cum->float_in_sse = 0;\n \t\t}\n \t      cum->maybe_vaarg = true;\n@@ -3771,40 +3704,13 @@ function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t    }\n \t  break;\n \n-\tcase SFmode:\n-\t  if (cum->float_in_sse > 0)\n-\t    goto skip_80387;\n-\n \tcase DFmode:\n-\t  if (cum->float_in_sse > 1)\n-\t    goto skip_80387;\n-\n-\t  /* Because no inherent XFmode->DFmode and XFmode->SFmode\n-\t     rounding takes place when values are passed in x87\n-\t     registers, pass DFmode and SFmode types to local functions\n-\t     only when flag_unsafe_math_optimizations is set.  */\n-\t  if (!cum->float_in_x87\n-\t      || (cum->float_in_x87 == 2\n-\t\t  && !flag_unsafe_math_optimizations))\n+\t  if (cum->float_in_sse < 2)\n \t    break;\n-\n-\tcase XFmode:\n-\t  if (!cum->float_in_x87)\n+\tcase SFmode:\n+\t  if (cum->float_in_sse < 1)\n \t    break;\n-\n-\t  if (!type || !AGGREGATE_TYPE_P (type))\n-\t    {\n-\t      cum->x87_nregs -= 1;\n-\t      cum->x87_regno += 1;\n-\t      if (cum->x87_nregs <= 0)\n-\t\t{\n-\t\t  cum->x87_nregs = 0;\n-\t\t  cum->x87_regno = 0;\n-\t\t}\n-\t    }\n-\t  break;\n-\n- skip_80387:\n+\t  /* FALLTHRU */\n \n \tcase TImode:\n \tcase V16QImode:\n@@ -3815,6 +3721,7 @@ function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \tcase V2DFmode:\n \t  if (!type || !AGGREGATE_TYPE_P (type))\n \t    {\n+\t      cum->sse_words += words;\n \t      cum->sse_nregs -= 1;\n \t      cum->sse_regno += 1;\n \t      if (cum->sse_nregs <= 0)\n@@ -3831,6 +3738,7 @@ function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \tcase V2SFmode:\n \t  if (!type || !AGGREGATE_TYPE_P (type))\n \t    {\n+\t      cum->mmx_words += words;\n \t      cum->mmx_nregs -= 1;\n \t      cum->mmx_regno += 1;\n \t      if (cum->mmx_nregs <= 0)\n@@ -3895,6 +3803,7 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode orig_mode,\n   else\n     switch (mode)\n       {\n+\t/* For now, pass fp/complex values on the stack.  */\n       default:\n \tbreak;\n \n@@ -3924,35 +3833,13 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode orig_mode,\n \t    ret = gen_rtx_REG (mode, regno);\n \t  }\n \tbreak;\n-\n-\tcase SFmode:\n-\t  if (cum->float_in_sse > 0)\n-\t    goto skip_80387;\n-\n-\tcase DFmode:\n-\t  if (cum->float_in_sse > 1)\n-\t    goto skip_80387;\n-\n-\t  /* Because no inherent XFmode->DFmode and XFmode->SFmode\n-\t     rounding takes place when values are passed in x87\n-\t     registers, pass DFmode and SFmode types to local functions\n-\t     only when flag_unsafe_math_optimizations is set.  */\n-\t  if (!cum->float_in_x87\n-\t      || (cum->float_in_x87 == 2\n-\t\t  && !flag_unsafe_math_optimizations))\n-\t    break;\n-\n-\tcase XFmode:\n-\t  if (!cum->float_in_x87)\n-\t    break;\n-\n-\t  if (!type || !AGGREGATE_TYPE_P (type))\n-\t    if (cum->x87_nregs)\n-\t      ret = gen_rtx_REG (mode, cum->x87_regno + FIRST_FLOAT_REG);\n+      case DFmode:\n+\tif (cum->float_in_sse < 2)\n \t  break;\n-\n- skip_80387:\n-\n+      case SFmode:\n+\tif (cum->float_in_sse < 1)\n+\t  break;\n+\t/* FALLTHRU */\n       case TImode:\n       case V16QImode:\n       case V8HImode:"}, {"sha": "284de4e9c10e489661e1f60339a2a0d531bce222", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa283935def9d8589b50e651a6a9a3af774fe9a3/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa283935def9d8589b50e651a6a9a3af774fe9a3/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=fa283935def9d8589b50e651a6a9a3af774fe9a3", "patch": "@@ -1481,21 +1481,19 @@ enum reg_class\n    such as FUNCTION_ARG to determine where the next arg should go.  */\n \n typedef struct ix86_args {\n+  int words;\t\t\t/* # words passed so far */\n   int nregs;\t\t\t/* # registers available for passing */\n   int regno;\t\t\t/* next available register number */\n-  int words;\t\t\t/* # words passed so far */\n   int fastcall;\t\t\t/* fastcall calling convention is used */\n-  int x87_nregs;\t\t/* # x87 registers available for passing */\n-  int x87_regno;\t\t/* # next available x87 register number */\n+  int sse_words;\t\t/* # sse words passed so far */\n   int sse_nregs;\t\t/* # sse registers available for passing */\n-  int sse_regno;\t\t/* next available sse register number */\n   int warn_sse;\t\t\t/* True when we want to warn about SSE ABI.  */\n+  int warn_mmx;\t\t\t/* True when we want to warn about MMX ABI.  */\n+  int sse_regno;\t\t/* next available sse register number */\n+  int mmx_words;\t\t/* # mmx words passed so far */\n   int mmx_nregs;\t\t/* # mmx registers available for passing */\n   int mmx_regno;\t\t/* next available mmx register number */\n-  int warn_mmx;\t\t\t/* True when we want to warn about MMX ABI.  */\n   int maybe_vaarg;\t\t/* true for calls to possibly vardic fncts.  */\n-  int float_in_x87;\t\t/* 1 if floating point arguments should\n-\t\t\t\t   be passed in 80387 registers.  */\n   int float_in_sse;\t\t/* 1 if in 32-bit mode SFmode (2 for DFmode) should\n \t\t\t\t   be passed in SSE registers.  Otherwise 0.  */\n } CUMULATIVE_ARGS;\n@@ -1778,10 +1776,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define REGPARM_MAX (TARGET_64BIT ? 6 : 3)\n \n-/* ??? Currently disabled, as reg-stack.c does not know how to\n-   rearrange input registers if some arguments are left unused.  */\n-#define X87_REGPARM_MAX 0\n-\n #define SSE_REGPARM_MAX (TARGET_64BIT ? 8 : (TARGET_SSE ? 3 : 0))\n \n #define MMX_REGPARM_MAX (TARGET_64BIT ? 0 : (TARGET_MMX ? 3 : 0))"}, {"sha": "25b2f2d4e95cbf7f63da0c8221be856a311a96ab", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa283935def9d8589b50e651a6a9a3af774fe9a3/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa283935def9d8589b50e651a6a9a3af774fe9a3/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=fa283935def9d8589b50e651a6a9a3af774fe9a3", "patch": "@@ -205,10 +205,6 @@ mssse3\n Target Report Mask(SSSE3)\n Support MMX, SSE, SSE2, SSE3 and SSSE3 built-in functions and code generation\n \n-mx87regparm\n-Target RejectNegative Mask(X87REGPARM)\n-Use x87 register passing conventions to pass floating point arguments\n-\n msseregparm\n Target RejectNegative Mask(SSEREGPARM)\n Use SSE register passing conventions for SF and DF mode"}, {"sha": "7e9aa116bfb259c854d29bd6a570ac2808e4895b", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa283935def9d8589b50e651a6a9a3af774fe9a3/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa283935def9d8589b50e651a6a9a3af774fe9a3/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=fa283935def9d8589b50e651a6a9a3af774fe9a3", "patch": "@@ -2221,14 +2221,6 @@ safe since the loaders there save all registers.  (Lazy binding can be\n disabled with the linker or the loader if desired, to avoid the\n problem.)\n \n-@item x87regparm\n-@cindex @code{x87regparm} attribute\n-On the Intel x86 with 80387 @code{x87regparm} attribute causes the\n-compiler to pass up to 3 floating point arguments in 80387 registers\n-instead of on the stack.  Functions that take a variable number of\n-arguments will continue to pass all of their floating point arguments\n-on the stack.\n-\n @item sseregparm\n @cindex @code{sseregparm} attribute\n On the Intel 386 with SSE support, the @code{sseregparm} attribute"}, {"sha": "3ccfc3e0b8a5880483e3aaff96acbae721f8033d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa283935def9d8589b50e651a6a9a3af774fe9a3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa283935def9d8589b50e651a6a9a3af774fe9a3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=fa283935def9d8589b50e651a6a9a3af774fe9a3", "patch": "@@ -536,8 +536,8 @@ Objective-C and Objective-C++ Dialects}.\n -mmmx  -msse  -msse2 -msse3 -mssse3 -m3dnow @gol\n -mthreads  -mno-align-stringops  -minline-all-stringops @gol\n -mpush-args  -maccumulate-outgoing-args  -m128bit-long-double @gol\n--m96bit-long-double  -mregparm=@var{num}  -mx87regparm @gol\n--msseregparm @gol  -mstackrealign @gol\n+-m96bit-long-double  -mregparm=@var{num}  -msseregparm @gol\n+-mstackrealign @gol\n -momit-leaf-frame-pointer  -mno-red-zone -mno-tls-direct-seg-refs @gol\n -mcmodel=@var{code-model} @gol\n -m32  -m64 -mlarge-data-threshold=@var{num}}\n@@ -9597,17 +9597,6 @@ function by using the function attribute @samp{regparm}.\n value, including any libraries.  This includes the system libraries and\n startup modules.\n \n-@item -mx87regparm\n-@opindex mx87regparm\n-Use 80387 register passing conventions for floating point arguments.\n-You can control this behavior for a specific function by using the\n-function attribute @samp{x87regparm}.\n-@xref{Function Attributes}.\n-\n-@strong{Warning:} if you use this switch then you must build all\n-modules with the same value, including any libraries.  This includes\n-the system libraries and startup modules.\n-\n @item -msseregparm\n @opindex msseregparm\n Use SSE register passing conventions for float and double arguments"}, {"sha": "49c733eb742efc74be8434b5255446cfc29a1313", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa283935def9d8589b50e651a6a9a3af774fe9a3/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa283935def9d8589b50e651a6a9a3af774fe9a3/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=fa283935def9d8589b50e651a6a9a3af774fe9a3", "patch": "@@ -2558,28 +2558,11 @@ print_stack (FILE *file, stack s)\n static int\n convert_regs_entry (void)\n {\n-  tree params = DECL_ARGUMENTS (current_function_decl);\n-  tree p;\n-  HARD_REG_SET incoming_regs;\n-  rtx inc_rtx;\n-\n   int inserted = 0;\n   edge e;\n   edge_iterator ei;\n \n-  /* Find out which registers were used as argument passing registers.  */\n-\n-  CLEAR_HARD_REG_SET (incoming_regs);\n-  for (p = params; p; p = TREE_CHAIN (p))\n-    {\n-      inc_rtx = DECL_INCOMING_RTL (p);\n-\n-      if (REG_P (inc_rtx)\n-          && IN_RANGE (REGNO (inc_rtx), FIRST_STACK_REG, LAST_STACK_REG))\n-\tSET_HARD_REG_BIT (incoming_regs, REGNO (inc_rtx));\n-    }\n-\n-  /* Load something into remaining stack register live at function entry.\n+  /* Load something into each stack register live at function entry.\n      Such live registers can be caused by uninitialized variables or\n      functions not returning values on all paths.  In order to keep\n      the push/pop code happy, and to not scrog the register stack, we\n@@ -2595,17 +2578,12 @@ convert_regs_entry (void)\n       int reg, top = -1;\n \n       for (reg = LAST_STACK_REG; reg >= FIRST_STACK_REG; --reg)\n-\tif (TEST_HARD_REG_BIT (bi->stack_in.reg_set, reg)\n-\t    || TEST_HARD_REG_BIT (incoming_regs, reg))\n+\tif (TEST_HARD_REG_BIT (bi->stack_in.reg_set, reg))\n \t  {\n \t    rtx init;\n \n \t    bi->stack_in.reg[++top] = reg;\n \n-\t    /* Skip argument passing registers.  */\n-\t    if (TEST_HARD_REG_BIT (incoming_regs, reg))\n-\t      continue;\n-\n \t    init = gen_rtx_SET (VOIDmode,\n \t\t\t\tFP_MODE_REG (FIRST_STACK_REG, SFmode),\n \t\t\t\tnot_a_num);"}, {"sha": "4b11136c37161a2810712814f2c420af6bba1fc2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa283935def9d8589b50e651a6a9a3af774fe9a3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa283935def9d8589b50e651a6a9a3af774fe9a3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fa283935def9d8589b50e651a6a9a3af774fe9a3", "patch": "@@ -1,3 +1,16 @@\n+2006-12-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/30120\n+\t* gcc.target/i386/pr30120.c: New test.\n+\n+\tRevert:\n+\t2006-11-15  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/x87regparm-1.c: New test.\n+\t* gcc.target/i386/x87regparm-2.c: New test.\n+\t* gcc.target/i386/x87regparm-3.c: New test.\n+\t* gcc.target/i386/x87regparm-4.c: New test.\n+\n 2006-12-10  Zdenek Dvorak <dvorakz@suse.cz>\n \n \t* gcc.dg/tree-ssa/loop-17.c: Update outcome."}, {"sha": "22fd843a79f8a695823d73f274d94e4bd635cad0", "filename": "gcc/testsuite/gcc.target/i386/pr30120.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa283935def9d8589b50e651a6a9a3af774fe9a3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr30120.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa283935def9d8589b50e651a6a9a3af774fe9a3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr30120.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr30120.c?ref=fa283935def9d8589b50e651a6a9a3af774fe9a3", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+extern void abort (void);\n+\n+static void\n+foo (double a, double weight, const double *ring, double *phase)\n+{\n+  *phase = *ring * weight;\n+}\n+\n+void\n+foo2 (void)\n+{\n+  foo (0, 1, (double *) 0, (double *) 0);\n+}\n+\n+int\n+main (void)\n+{\n+  double t1 = 1, c1;\n+  foo (0, 1, &t1, &c1);\n+  if (c1 < 0.5)\n+    abort();\n+\n+  return 0;\n+}"}, {"sha": "a1e6660a783a8af454e9a96f16f4117bfbbdd870", "filename": "gcc/testsuite/gcc.target/i386/x87regparm-1.c", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f824ce13d83da71f55201f4608db64478e4ef1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx87regparm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f824ce13d83da71f55201f4608db64478e4ef1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx87regparm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx87regparm-1.c?ref=c3f824ce13d83da71f55201f4608db64478e4ef1", "patch": "@@ -1,22 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n-/* { dg-require-effective-target ilp32 } */\n-\n-float foo_f(float) __attribute__((x87regparm));\n-double foo_d(double) __attribute__((x87regparm));\n-long double foo_ld(long double) __attribute__((x87regparm));\n-\n-volatile float f;\n-volatile double d;\n-volatile long double ld;\n-\n-void test() \n-{\n-  f = foo_f(f);\n-  d = foo_d(d);\n-  ld = foo_ld(ld);\n-}\n-\n-/* Check that no memory is used to pass arguments.  */\n-\n-/* { dg-final { scan-assembler-not \"\\\\(%esp\\\\)\" { xfail *-*-* } } } */"}, {"sha": "47508f841a1a4aa1915d92e34f5d6f1db98059b9", "filename": "gcc/testsuite/gcc.target/i386/x87regparm-2.c", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f824ce13d83da71f55201f4608db64478e4ef1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx87regparm-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f824ce13d83da71f55201f4608db64478e4ef1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx87regparm-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx87regparm-2.c?ref=c3f824ce13d83da71f55201f4608db64478e4ef1", "patch": "@@ -1,22 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -fomit-frame-pointer -mx87regparm\" } */\n-/* { dg-require-effective-target ilp32 } */\n-\n-float efoo_f(float);\n-double efoo_d(double);\n-long double efoo_ld(long double);\n-\n-volatile float f;\n-volatile double d;\n-volatile long double ld;\n-\n-void test() \n-{\n-  f = efoo_f(f);\n-  d = efoo_d(d);\n-  ld = efoo_ld(ld);\n-}\n-\n-/* Check that no memory is used to pass arguments.  */\n-\n-/* { dg-final { scan-assembler-not \"\\\\(%esp\\\\)\" { xfail *-*-* } } } */"}, {"sha": "8e3ff70dffa0511184494a124cd2eadf3e41c94d", "filename": "gcc/testsuite/gcc.target/i386/x87regparm-3.c", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f824ce13d83da71f55201f4608db64478e4ef1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx87regparm-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f824ce13d83da71f55201f4608db64478e4ef1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx87regparm-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx87regparm-3.c?ref=c3f824ce13d83da71f55201f4608db64478e4ef1", "patch": "@@ -1,22 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n-/* { dg-require-effective-target ilp32 } */\n-\n-static float __attribute__((noinline)) foo_f(float f) { return f; }\n-static double __attribute__((noinline)) foo_d(double d) { return d; }\n-static long double __attribute__((noinline)) foo_ld(long double ld) { return ld; }\n-\n-volatile float f;\n-volatile double d;\n-volatile long double ld;\n-\n-void test() \n-{\n-  f = foo_f(f);\n-  d = foo_d(d);\n-  ld = foo_ld(ld);\n-}\n-\n-/* Check that float and double arguments are passed through memory.  */\n-\n-/* { dg-final { scan-assembler-times \"\\\\(%esp\\\\)\" 4 { xfail *-*-* } } } */"}, {"sha": "95fe2a56fcad4e89cbdc4c1f27b410c7672b0f5b", "filename": "gcc/testsuite/gcc.target/i386/x87regparm-4.c", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f824ce13d83da71f55201f4608db64478e4ef1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx87regparm-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f824ce13d83da71f55201f4608db64478e4ef1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx87regparm-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx87regparm-4.c?ref=c3f824ce13d83da71f55201f4608db64478e4ef1", "patch": "@@ -1,22 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -fomit-frame-pointer -ffast-math\" } */\n-/* { dg-require-effective-target ilp32 } */\n-\n-static float __attribute__((noinline)) foo_f(float f) { return f; }\n-static double __attribute__((noinline)) foo_d(double d) { return d; }\n-static long double __attribute__((noinline)) foo_ld(long double ld) { return ld; }\n-\n-volatile float f;\n-volatile double d;\n-volatile long double ld;\n-\n-void test() \n-{\n-  f = foo_f(f);\n-  d = foo_d(d);\n-  ld = foo_ld(ld);\n-}\n-\n-/* Check that no memory is used to pass arguments.  */\n-\n-/* { dg-final { scan-assembler-not \"\\\\(%esp\\\\)\" { xfail *-*-* } } } */"}]}