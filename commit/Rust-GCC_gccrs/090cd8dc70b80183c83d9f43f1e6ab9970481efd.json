{"sha": "090cd8dc70b80183c83d9f43f1e6ab9970481efd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkwY2Q4ZGM3MGI4MDE4M2M4M2Q5ZjQzZjFlNmFiOTk3MDQ4MWVmZA==", "commit": {"author": {"name": "Cong Hou", "email": "congh@google.com", "date": "2014-04-03T23:05:42Z"}, "committer": {"name": "Cong Hou", "email": "congh@gcc.gnu.org", "date": "2014-04-03T23:05:42Z"}, "message": "re PR tree-optimization/60505 (Warning caused by GCC vectorizer.)\n\n2014-04-03  Cong Hou  <congh@google.com>\n\nPR tree-optimization/60505\n    * tree-vectorizer.h (struct _stmt_vec_info): Add th field as the\n    threshold of number of iterations below which no vectorization will be\n    done.\n    * tree-vect-loop.c (new_loop_vec_info):\n    Initialize LOOP_VINFO_COST_MODEL_THRESHOLD.\n    * tree-vect-loop.c (vect_analyze_loop_operations):\n    Set LOOP_VINFO_COST_MODEL_THRESHOLD.\n    * tree-vect-loop.c (vect_transform_loop):\n    Use LOOP_VINFO_COST_MODEL_THRESHOLD.\n    * tree-vect-loop.c (vect_analyze_loop_2): Check the maximum number\n    of iterations of the loop and see if we should build the epilogue.\n\n2014-04-03  Cong Hou  <congh@google.com>\n\n    PR tree-optimization/60505\n    * gcc.dg/vect/pr60505.c: New test.\n\nFrom-SVN: r209065", "tree": {"sha": "922c68d13315da3b6382d88c5012433e5c2649bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/922c68d13315da3b6382d88c5012433e5c2649bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/090cd8dc70b80183c83d9f43f1e6ab9970481efd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/090cd8dc70b80183c83d9f43f1e6ab9970481efd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/090cd8dc70b80183c83d9f43f1e6ab9970481efd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/090cd8dc70b80183c83d9f43f1e6ab9970481efd/comments", "author": null, "committer": null, "parents": [{"sha": "bdc67fd6a4576a1867bb0af8cd47aa819da6e2b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdc67fd6a4576a1867bb0af8cd47aa819da6e2b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdc67fd6a4576a1867bb0af8cd47aa819da6e2b3"}], "stats": {"total": 59, "additions": 55, "deletions": 4}, "files": [{"sha": "2a2e948b4b087eeb538134808068aaef275056f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/090cd8dc70b80183c83d9f43f1e6ab9970481efd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/090cd8dc70b80183c83d9f43f1e6ab9970481efd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=090cd8dc70b80183c83d9f43f1e6ab9970481efd", "patch": "@@ -1,3 +1,18 @@\n+2014-04-03  Cong Hou  <congh@google.com>\n+\n+\tPR tree-optimization/60505\n+\t* tree-vectorizer.h (struct _stmt_vec_info): Add th field as the\n+\tthreshold of number of iterations below which no vectorization will be\n+\tdone.\n+\t* tree-vect-loop.c (new_loop_vec_info):\n+\tInitialize LOOP_VINFO_COST_MODEL_THRESHOLD.\n+\t* tree-vect-loop.c (vect_analyze_loop_operations):\n+\tSet LOOP_VINFO_COST_MODEL_THRESHOLD.\n+\t* tree-vect-loop.c (vect_transform_loop):\n+\tUse LOOP_VINFO_COST_MODEL_THRESHOLD.\n+\t* tree-vect-loop.c (vect_analyze_loop_2): Check the maximum number\n+\tof iterations of the loop and see if we should build the epilogue.\n+\n 2014-04-03  Richard Biener  <rguenther@suse.de>\n \n \t* tree-streamer.h (struct streamer_tree_cache_d): Add next_idx"}, {"sha": "d470b1e6b35fd2a94e0063ba1bc721b92c728b43", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/090cd8dc70b80183c83d9f43f1e6ab9970481efd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/090cd8dc70b80183c83d9f43f1e6ab9970481efd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=090cd8dc70b80183c83d9f43f1e6ab9970481efd", "patch": "@@ -1,3 +1,8 @@\n+2014-04-03  Cong Hou  <congh@google.com>\n+\n+\tPR tree-optimization/60505\n+\t* gcc.dg/vect/pr60505.c: New test.\n+\n 2014-04-03  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/60740"}, {"sha": "694051320ce6885985f5ba9865caef3a4c509850", "filename": "gcc/testsuite/gcc.dg/vect/pr60505.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/090cd8dc70b80183c83d9f43f1e6ab9970481efd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr60505.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/090cd8dc70b80183c83d9f43f1e6ab9970481efd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr60505.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr60505.c?ref=090cd8dc70b80183c83d9f43f1e6ab9970481efd", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Wall -Werror\" } */\n+\n+void foo(char *in, char *out, int num)\n+{\n+  int i;\n+  char ovec[16] = {0};\n+\n+  for(i = 0; i < num ; ++i)\n+    out[i] = (ovec[i] = in[i]);\n+  out[num] = ovec[num/2];\n+}"}, {"sha": "1c78e114fe1c09c9169de82e51d2193bc3a5803d", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/090cd8dc70b80183c83d9f43f1e6ab9970481efd/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/090cd8dc70b80183c83d9f43f1e6ab9970481efd/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=090cd8dc70b80183c83d9f43f1e6ab9970481efd", "patch": "@@ -933,6 +933,7 @@ new_loop_vec_info (struct loop *loop)\n   LOOP_VINFO_NITERS (res) = NULL;\n   LOOP_VINFO_NITERS_UNCHANGED (res) = NULL;\n   LOOP_VINFO_COST_MODEL_MIN_ITERS (res) = 0;\n+  LOOP_VINFO_COST_MODEL_THRESHOLD (res) = 0;\n   LOOP_VINFO_VECTORIZABLE_P (res) = 0;\n   LOOP_VINFO_PEELING_FOR_ALIGNMENT (res) = 0;\n   LOOP_VINFO_VECT_FACTOR (res) = 0;\n@@ -1579,6 +1580,8 @@ vect_analyze_loop_operations (loop_vec_info loop_vinfo, bool slp)\n           || min_profitable_iters > min_scalar_loop_bound))\n     th = (unsigned) min_profitable_iters;\n \n+  LOOP_VINFO_COST_MODEL_THRESHOLD (loop_vinfo) = th;\n+\n   if (LOOP_VINFO_NITERS_KNOWN_P (loop_vinfo)\n       && LOOP_VINFO_INT_NITERS (loop_vinfo) <= th)\n     {\n@@ -1625,6 +1628,7 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo)\n   bool ok, slp = false;\n   int max_vf = MAX_VECTORIZATION_FACTOR;\n   int min_vf = 2;\n+  unsigned int th;\n \n   /* Find all data references in the loop (which correspond to vdefs/vuses)\n      and analyze their evolution in the loop.  Also adjust the minimal\n@@ -1769,6 +1773,10 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo)\n \n   /* Decide whether we need to create an epilogue loop to handle\n      remaining scalar iterations.  */\n+  th = ((LOOP_VINFO_COST_MODEL_THRESHOLD (loop_vinfo) + 1)\n+        / LOOP_VINFO_VECT_FACTOR (loop_vinfo))\n+       * LOOP_VINFO_VECT_FACTOR (loop_vinfo);\n+\n   if (LOOP_VINFO_NITERS_KNOWN_P (loop_vinfo)\n       && LOOP_VINFO_PEELING_FOR_ALIGNMENT (loop_vinfo) > 0)\n     {\n@@ -1779,7 +1787,14 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo)\n     }\n   else if (LOOP_VINFO_PEELING_FOR_ALIGNMENT (loop_vinfo)\n \t   || (tree_ctz (LOOP_VINFO_NITERS (loop_vinfo))\n-\t       < (unsigned)exact_log2 (LOOP_VINFO_VECT_FACTOR (loop_vinfo))))\n+\t       < (unsigned)exact_log2 (LOOP_VINFO_VECT_FACTOR (loop_vinfo))\n+               /* In case of versioning, check if the maximum number of\n+                  iterations is greater than th.  If they are identical,\n+                  the epilogue is unnecessary.  */\n+\t       && ((!LOOP_REQUIRES_VERSIONING_FOR_ALIAS (loop_vinfo)\n+\t            && !LOOP_REQUIRES_VERSIONING_FOR_ALIGNMENT (loop_vinfo))\n+                   || (unsigned HOST_WIDE_INT)max_stmt_executions_int\n+\t\t        (LOOP_VINFO_LOOP (loop_vinfo)) > th)))\n     LOOP_VINFO_PEELING_FOR_NITER (loop_vinfo) = true;\n \n   /* If an epilogue loop is required make sure we can create one.  */\n@@ -5775,9 +5790,7 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n      by our caller.  If the threshold makes all loops profitable that\n      run at least the vectorization factor number of times checking\n      is pointless, too.  */\n-  th = ((PARAM_VALUE (PARAM_MIN_VECT_LOOP_BOUND)\n-\t * LOOP_VINFO_VECT_FACTOR (loop_vinfo)) - 1);\n-  th = MAX (th, LOOP_VINFO_COST_MODEL_MIN_ITERS (loop_vinfo));\n+  th = LOOP_VINFO_COST_MODEL_THRESHOLD (loop_vinfo);\n   if (th >= LOOP_VINFO_VECT_FACTOR (loop_vinfo) - 1\n       && !LOOP_VINFO_NITERS_KNOWN_P (loop_vinfo))\n     {"}, {"sha": "f2087e22383bcee08545c71633d3294f7f23f2bc", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/090cd8dc70b80183c83d9f43f1e6ab9970481efd/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/090cd8dc70b80183c83d9f43f1e6ab9970481efd/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=090cd8dc70b80183c83d9f43f1e6ab9970481efd", "patch": "@@ -264,6 +264,11 @@ typedef struct _loop_vec_info {\n \t     values unknown at compile time.  */\n   int min_profitable_iters;\n \n+  /* Threshold of number of iterations below which vectorzation will not be\n+     performed. It is calculated from MIN_PROFITABLE_ITERS and\n+     PARAM_MIN_VECT_LOOP_BOUND.  */\n+  unsigned int th;\n+\n   /* Is the loop vectorizable? */\n   bool vectorizable;\n \n@@ -382,6 +387,7 @@ typedef struct _loop_vec_info {\n    cost model.  */\n #define LOOP_VINFO_NITERS_UNCHANGED(L)     (L)->num_iters_unchanged\n #define LOOP_VINFO_COST_MODEL_MIN_ITERS(L) (L)->min_profitable_iters\n+#define LOOP_VINFO_COST_MODEL_THRESHOLD(L) (L)->th\n #define LOOP_VINFO_VECTORIZABLE_P(L)       (L)->vectorizable\n #define LOOP_VINFO_VECT_FACTOR(L)          (L)->vectorization_factor\n #define LOOP_VINFO_PTR_MASK(L)             (L)->ptr_mask"}]}