{"sha": "ef6372557ac1b51cd3564304eff5b1cad351f339", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY2MzcyNTU3YWMxYjUxY2QzNTY0MzA0ZWZmNWIxY2FkMzUxZjMzOQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-05-21T09:55:50Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-05-21T09:55:50Z"}, "message": "pt.c (tsubst): Don't issue error messages when we're not complaining...\n\n\t* pt.c (tsubst): Don't issue error messages when we're not\n\tcomplaining, even if we see a qualified function type.\n\t(check_cv_quals_for_unify): Don't allow a qualified function\n\ttype.\n\nFrom-SVN: r27080", "tree": {"sha": "926a5e8f34431b151b69e4610260a4bdc801dea7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/926a5e8f34431b151b69e4610260a4bdc801dea7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef6372557ac1b51cd3564304eff5b1cad351f339", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef6372557ac1b51cd3564304eff5b1cad351f339", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef6372557ac1b51cd3564304eff5b1cad351f339", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef6372557ac1b51cd3564304eff5b1cad351f339/comments", "author": null, "committer": null, "parents": [{"sha": "21635bd68826ac30646ce61bf0d241c5d7f0599a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21635bd68826ac30646ce61bf0d241c5d7f0599a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21635bd68826ac30646ce61bf0d241c5d7f0599a"}], "stats": {"total": 74, "additions": 70, "deletions": 4}, "files": [{"sha": "5337856e5499526ed31d1d913636db3b98f9d6e8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6372557ac1b51cd3564304eff5b1cad351f339/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6372557ac1b51cd3564304eff5b1cad351f339/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ef6372557ac1b51cd3564304eff5b1cad351f339", "patch": "@@ -1,3 +1,10 @@\n+1999-05-21  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* pt.c (tsubst): Don't issue error messages when we're not\n+\tcomplaining, even if we see a qualified function type.\n+\t(check_cv_quals_for_unify): Don't allow a qualified function\n+\ttype.\n+\n 1999-05-20  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* class.c (instantiate_type): Downgrade errors for object-dependent"}, {"sha": "9698b9651242e05d58068f475d952e5b3f2aea69", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6372557ac1b51cd3564304eff5b1cad351f339/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6372557ac1b51cd3564304eff5b1cad351f339/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ef6372557ac1b51cd3564304eff5b1cad351f339", "patch": "@@ -6208,6 +6208,16 @@ tsubst (t, args, complain, in_decl)\n \t\t  {\n \t\t    my_friendly_assert (TREE_CODE_CLASS (TREE_CODE (arg))\n \t\t\t\t\t== 't', 0);\n+\n+\t\t    /* If we're not COMPLAINing, don't let an attempt\n+\t\t       to qualify a FUNCTION_TYPE reach\n+\t\t       cp_build_qualified_type.  That will result in\n+\t\t       an error message.  */\n+\t\t    if (!complain\n+\t\t\t&& TREE_CODE (arg) == FUNCTION_TYPE\n+\t\t\t&& CP_TYPE_QUALS (t) != TYPE_UNQUALIFIED)\n+\t\t      return error_mark_node;\n+\n \t\t    return cp_build_qualified_type\n \t\t      (arg, CP_TYPE_QUALS (arg) | CP_TYPE_QUALS (t));\n \t\t  }\n@@ -8022,10 +8032,20 @@ check_cv_quals_for_unify (strict, arg, parm)\n      tree arg;\n      tree parm;\n {\n-  return !((!(strict & UNIFY_ALLOW_MORE_CV_QUAL)\n-\t    && !at_least_as_qualified_p (arg, parm))\n-\t   || (!(strict & UNIFY_ALLOW_LESS_CV_QUAL)\n-\t       && (!at_least_as_qualified_p (parm, arg))));\n+  if (!(strict & UNIFY_ALLOW_MORE_CV_QUAL)\n+      && !at_least_as_qualified_p (arg, parm))\n+    return 0;\n+\n+  if (!(strict & UNIFY_ALLOW_LESS_CV_QUAL)\n+      && !at_least_as_qualified_p (parm, arg))\n+    return 0;\n+\n+  /* Don't allow unification to create a qualified function type.  */\n+  if (TREE_CODE (arg) == FUNCTION_TYPE \n+      && CP_TYPE_QUALS (parm) != TYPE_UNQUALIFIED)\n+    return 0;\n+\n+  return 1;\n }\n \n /* Takes parameters as for type_unification.  Returns 0 if the"}, {"sha": "34b32e4e36dd653f36127498a9fc31aff5ef301c", "filename": "gcc/testsuite/g++.old-deja/g++.pt/unify6.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6372557ac1b51cd3564304eff5b1cad351f339/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Funify6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6372557ac1b51cd3564304eff5b1cad351f339/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Funify6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Funify6.C?ref=ef6372557ac1b51cd3564304eff5b1cad351f339", "patch": "@@ -0,0 +1,39 @@\n+// Build don't link:\n+\n+// Copyright (C) 1999 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 21 May 1999 <nathan@acm.org>\n+\n+// Template deduction and type unification should not issue diagnostics when\n+// they're trying to see if it's possible.  Here deduction fails in some cases\n+// because you cant cv qualify a function type.\n+\n+template<class T> void fn(){} // A\n+\n+template<class T> void fn(T const *){} // B\n+\n+// these next two specializations need to know if they're specializing A or B.\n+// They specialize A, because they can't instantiate B.\n+\n+template<> void fn<int &>() {} // ok, specialize A\n+\n+template<> void fn<void ()>() {} // ok, specialize A\n+\n+// now make sure we moan when we really should\n+template<class T> void foo(T const *){}\n+\n+void f()\n+{\n+  foo<int &>(); // ERROR - attempt to build int & const *\n+  foo<void ()>(); // ERROR - attempt to build void (const *)()\n+}\n+\n+typedef void (*Fptr)();\n+\n+template<class T> void PV(Fptr const &, T const * const &);\n+template<class T1, class T2> void PV(T1 const * const &, T2 const * const &);\n+\n+void baz()\n+{\n+  void *t;\n+  PV(&baz, t);\n+}"}]}