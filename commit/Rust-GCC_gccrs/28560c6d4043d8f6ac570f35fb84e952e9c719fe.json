{"sha": "28560c6d4043d8f6ac570f35fb84e952e9c719fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg1NjBjNmQ0MDQzZDhmNmFjNTcwZjM1ZmI4NGU5NTJlOWM3MTlmZQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-05-21T01:48:18Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-06-28T01:15:40Z"}, "message": "Fold blendv builtins into gimple.\n\nFold __builtin_ia32_pblendvb128 (a, b, c) as VEC_COND_EXPR (c < 0, b,\na), similar for float version but with mask operand VIEW_CONVERT_EXPR\nto same sized integer vectype.\n\ngcc/ChangeLog:\n\n\t* config/i386/i386-builtin.def (IX86_BUILTIN_BLENDVPD256,\n\tIX86_BUILTIN_BLENDVPS256, IX86_BUILTIN_PBLENDVB256,\n\tIX86_BUILTIN_BLENDVPD, IX86_BUILTIN_BLENDVPS,\n\tIX86_BUILTIN_PBLENDVB128): Replace icode with\n\tCODE_FOR_nothing.\n\t* config/i386/i386.c (ix86_gimple_fold_builtin): Fold blendv\n\tbuiltins.\n\t* config/i386/sse.md (*<sse4_1_avx2>_pblendvb_lt_subreg_not):\n\tNew pre_reload splitter.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/funcspec-8.c: Replace\n\t__builtin_ia32_blendvpd with  __builtin_ia32_roundps_az.\n\t* gcc.target/i386/blendv-1.c: New test.\n\t* gcc.target/i386/blendv-2.c: New test.", "tree": {"sha": "197e95607f3aab986ded459debbe1b36ab644932", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/197e95607f3aab986ded459debbe1b36ab644932"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28560c6d4043d8f6ac570f35fb84e952e9c719fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28560c6d4043d8f6ac570f35fb84e952e9c719fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28560c6d4043d8f6ac570f35fb84e952e9c719fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28560c6d4043d8f6ac570f35fb84e952e9c719fe/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a766c79fc64bba66f16adfe1c8639b5857219f4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a766c79fc64bba66f16adfe1c8639b5857219f4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a766c79fc64bba66f16adfe1c8639b5857219f4d"}], "stats": {"total": 179, "additions": 165, "deletions": 14}, "files": [{"sha": "1cc0cc6968ce7194b2a6e90928369d6ef72c2b98", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28560c6d4043d8f6ac570f35fb84e952e9c719fe/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28560c6d4043d8f6ac570f35fb84e952e9c719fe/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=28560c6d4043d8f6ac570f35fb84e952e9c719fe", "patch": "@@ -902,13 +902,13 @@ BDESC (OPTION_MASK_ISA_SSSE3 | OPTION_MASK_ISA_MMX, 0, CODE_FOR_ssse3_palignrdi,\n /* SSE4.1 */\n BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_sse4_1_blendpd, \"__builtin_ia32_blendpd\", IX86_BUILTIN_BLENDPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT)\n BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_sse4_1_blendps, \"__builtin_ia32_blendps\", IX86_BUILTIN_BLENDPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT)\n-BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_sse4_1_blendvpd, \"__builtin_ia32_blendvpd\", IX86_BUILTIN_BLENDVPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF)\n-BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_sse4_1_blendvps, \"__builtin_ia32_blendvps\", IX86_BUILTIN_BLENDVPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF)\n+BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_nothing, \"__builtin_ia32_blendvpd\", IX86_BUILTIN_BLENDVPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF)\n+BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_nothing, \"__builtin_ia32_blendvps\", IX86_BUILTIN_BLENDVPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF)\n BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_sse4_1_dppd, \"__builtin_ia32_dppd\", IX86_BUILTIN_DPPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT)\n BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_sse4_1_dpps, \"__builtin_ia32_dpps\", IX86_BUILTIN_DPPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT)\n BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_sse4_1_insertps, \"__builtin_ia32_insertps128\", IX86_BUILTIN_INSERTPS128, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT)\n BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_sse4_1_mpsadbw, \"__builtin_ia32_mpsadbw128\", IX86_BUILTIN_MPSADBW128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_INT)\n-BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_sse4_1_pblendvb, \"__builtin_ia32_pblendvb128\", IX86_BUILTIN_PBLENDVB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_V16QI)\n+BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_nothing, \"__builtin_ia32_pblendvb128\", IX86_BUILTIN_PBLENDVB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_V16QI)\n BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_sse4_1_pblendw, \"__builtin_ia32_pblendw128\", IX86_BUILTIN_PBLENDW128, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_INT)\n \n BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_sse4_1_sign_extendv8qiv8hi2, \"__builtin_ia32_pmovsxbw128\", IX86_BUILTIN_PMOVSXBW128, UNKNOWN, (int) V8HI_FTYPE_V16QI)\n@@ -1028,8 +1028,8 @@ BDESC (OPTION_MASK_ISA_AVX, 0, CODE_FOR_avx_vpermilvarv8sf3, \"__builtin_ia32_vpe\n \n BDESC (OPTION_MASK_ISA_AVX, 0, CODE_FOR_avx_blendpd256, \"__builtin_ia32_blendpd256\", IX86_BUILTIN_BLENDPD256, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF_INT)\n BDESC (OPTION_MASK_ISA_AVX, 0, CODE_FOR_avx_blendps256, \"__builtin_ia32_blendps256\", IX86_BUILTIN_BLENDPS256, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF_INT)\n-BDESC (OPTION_MASK_ISA_AVX, 0, CODE_FOR_avx_blendvpd256, \"__builtin_ia32_blendvpd256\", IX86_BUILTIN_BLENDVPD256, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF_V4DF)\n-BDESC (OPTION_MASK_ISA_AVX, 0, CODE_FOR_avx_blendvps256, \"__builtin_ia32_blendvps256\", IX86_BUILTIN_BLENDVPS256, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF_V8SF)\n+BDESC (OPTION_MASK_ISA_AVX, 0, CODE_FOR_nothing, \"__builtin_ia32_blendvpd256\", IX86_BUILTIN_BLENDVPD256, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF_V4DF)\n+BDESC (OPTION_MASK_ISA_AVX, 0, CODE_FOR_nothing, \"__builtin_ia32_blendvps256\", IX86_BUILTIN_BLENDVPS256, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF_V8SF)\n BDESC (OPTION_MASK_ISA_AVX, 0, CODE_FOR_avx_dpps256, \"__builtin_ia32_dpps256\", IX86_BUILTIN_DPPS256, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF_INT)\n BDESC (OPTION_MASK_ISA_AVX, 0, CODE_FOR_avx_shufpd256, \"__builtin_ia32_shufpd256\", IX86_BUILTIN_SHUFPD256, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF_INT)\n BDESC (OPTION_MASK_ISA_AVX, 0, CODE_FOR_avx_shufps256, \"__builtin_ia32_shufps256\", IX86_BUILTIN_SHUFPS256, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF_INT)\n@@ -1154,7 +1154,7 @@ BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_andv4di3, \"__builtin_ia32_andsi256\", IX\n BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_avx2_andnotv4di3, \"__builtin_ia32_andnotsi256\", IX86_BUILTIN_ANDNOT256I, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI)\n BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_avx2_uavgv32qi3, \"__builtin_ia32_pavgb256\",  IX86_BUILTIN_PAVGB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI)\n BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_avx2_uavgv16hi3, \"__builtin_ia32_pavgw256\",  IX86_BUILTIN_PAVGW256, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI)\n-BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_avx2_pblendvb, \"__builtin_ia32_pblendvb256\", IX86_BUILTIN_PBLENDVB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_V32QI)\n+BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_nothing, \"__builtin_ia32_pblendvb256\", IX86_BUILTIN_PBLENDVB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_V32QI)\n BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_avx2_pblendw, \"__builtin_ia32_pblendw256\", IX86_BUILTIN_PBLENDVW256, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_INT)\n BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_nothing, \"__builtin_ia32_pcmpeqb256\", IX86_BUILTIN_PCMPEQB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI)\n BDESC (OPTION_MASK_ISA_AVX2, 0, CODE_FOR_nothing, \"__builtin_ia32_pcmpeqw256\", IX86_BUILTIN_PCMPEQW256, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI)"}, {"sha": "a93128fa0a4e3d60d3b3d33b0785cf6fbb3b464a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28560c6d4043d8f6ac570f35fb84e952e9c719fe/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28560c6d4043d8f6ac570f35fb84e952e9c719fe/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=28560c6d4043d8f6ac570f35fb84e952e9c719fe", "patch": "@@ -17983,6 +17983,43 @@ ix86_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n \t}\n       break;\n \n+    case IX86_BUILTIN_PBLENDVB128:\n+    case IX86_BUILTIN_PBLENDVB256:\n+    case IX86_BUILTIN_BLENDVPS:\n+    case IX86_BUILTIN_BLENDVPD:\n+    case IX86_BUILTIN_BLENDVPS256:\n+    case IX86_BUILTIN_BLENDVPD256:\n+      gcc_assert (n_args == 3);\n+      arg0 = gimple_call_arg (stmt, 0);\n+      arg1 = gimple_call_arg (stmt, 1);\n+      arg2 = gimple_call_arg (stmt, 2);\n+      if (gimple_call_lhs (stmt))\n+\t{\n+\t  location_t loc = gimple_location (stmt);\n+\t  tree type = TREE_TYPE (arg2);\n+\t  gimple_seq stmts = NULL;\n+\t  if (VECTOR_FLOAT_TYPE_P (type))\n+\t    {\n+\t      tree itype = GET_MODE_INNER (TYPE_MODE (type)) == E_SFmode\n+\t\t? intSI_type_node : intDI_type_node;\n+\t      type = get_same_sized_vectype (itype, type);\n+\t      arg2 = gimple_build (&stmts, VIEW_CONVERT_EXPR, type, arg2);\n+\t    }\n+\t  tree zero_vec = build_zero_cst (type);\n+\t  tree cmp_type = truth_type_for (type);\n+\t  tree cmp = gimple_build (&stmts, LT_EXPR, cmp_type, arg2, zero_vec);\n+\t  gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n+\t  gimple *g = gimple_build_assign (gimple_call_lhs (stmt),\n+\t\t\t\t\t   VEC_COND_EXPR, cmp,\n+\t\t\t\t\t   arg1, arg0);\n+\t  gimple_set_location (g, loc);\n+\t  gsi_replace (gsi, g, false);\n+\t}\n+      else\n+\tgsi_replace (gsi, gimple_build_nop (), false);\n+      return true;\n+\n+\n     case IX86_BUILTIN_PCMPEQB128:\n     case IX86_BUILTIN_PCMPEQW128:\n     case IX86_BUILTIN_PCMPEQD128:"}, {"sha": "310063544a6184a4933c5f5118361108eda7c6b6", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28560c6d4043d8f6ac570f35fb84e952e9c719fe/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28560c6d4043d8f6ac570f35fb84e952e9c719fe/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=28560c6d4043d8f6ac570f35fb84e952e9c719fe", "patch": "@@ -17898,6 +17898,28 @@\n    (set_attr \"btver2_decode\" \"vector,vector,vector\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn_and_split \"*<sse4_1_avx2>_pblendvb_lt_subreg_not\"\n+  [(set (match_operand:VI1_AVX2 0 \"register_operand\")\n+\t(unspec:VI1_AVX2\n+\t  [(match_operand:VI1_AVX2 2 \"vector_operand\")\n+\t   (match_operand:VI1_AVX2 1 \"register_operand\")\n+\t   (lt:VI1_AVX2\n+\t     (subreg:VI1_AVX2\n+\t       (not (match_operand 3 \"register_operand\")) 0)\n+\t     (match_operand:VI1_AVX2 4 \"const0_operand\"))]\n+\t  UNSPEC_BLENDV))]\n+  \"TARGET_SSE4_1\n+   && GET_MODE_CLASS (GET_MODE (operands[3])) == MODE_VECTOR_INT\n+   && GET_MODE_SIZE (GET_MODE (operands[3])) == <MODE_SIZE>\n+   && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(unspec:VI1_AVX2\n+\t [(match_dup 1) (match_dup 2)\n+\t  (lt:VI1_AVX2 (match_dup 3) (match_dup 4))] UNSPEC_BLENDV))]\n+  \"operands[3] = gen_lowpart (<MODE>mode, operands[3]);\")\n+\n (define_insn \"sse4_1_pblendw\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=Yr,*x,x\")\n \t(vec_merge:V8HI"}, {"sha": "fcbbfb9b446b24e87b1fdffcaa4a7fd03d219900", "filename": "gcc/testsuite/gcc.target/i386/blendv-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28560c6d4043d8f6ac570f35fb84e952e9c719fe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fblendv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28560c6d4043d8f6ac570f35fb84e952e9c719fe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fblendv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fblendv-1.c?ref=28560c6d4043d8f6ac570f35fb84e952e9c719fe", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2 -mno-avx512f\" } */\n+/* { dg-final { scan-assembler-times {pblendvb[\\t ]*%xmm} 1 } } */\n+/* { dg-final { scan-assembler-times {pblendvb[\\t ]*%ymm} 1 } } */\n+/* { dg-final { scan-assembler-times {blendvps[\\t ]*%xmm} 1 } } */\n+/* { dg-final { scan-assembler-times {blendvps[\\t ]*%ymm} 1 } } */\n+/* { dg-final { scan-assembler-times {blendvpd[\\t ]*%xmm} 1 } } */\n+/* { dg-final { scan-assembler-times {blendvpd[\\t ]*%ymm} 1 } } */\n+\n+typedef float v4sf __attribute__ ((vector_size (16)));\n+typedef float v8sf __attribute__ ((vector_size (32)));\n+typedef double v2df __attribute__ ((vector_size (16)));\n+typedef double v4df __attribute__ ((vector_size (32)));\n+typedef char v16qi __attribute__ ((vector_size (16)));\n+typedef char v32qi __attribute__ ((vector_size (32)));\n+\n+v4sf\n+foo (v4sf a, v4sf b, v4sf c)\n+{\n+  return __builtin_ia32_blendvps (a, b, c);\n+}\n+\n+v8sf\n+foo2 (v8sf a, v8sf b, v8sf c)\n+{\n+  return __builtin_ia32_blendvps256 (a, b, c);\n+}\n+\n+v2df\n+foo3 (v2df a, v2df b, v2df c)\n+{\n+  return __builtin_ia32_blendvpd (a, b, c);\n+}\n+\n+v4df\n+foo4 (v4df a, v4df b, v4df c)\n+{\n+  return __builtin_ia32_blendvpd256 (a, b, c);\n+}\n+\n+v16qi\n+foo5 (v16qi a, v16qi b, v16qi c)\n+{\n+  return __builtin_ia32_pblendvb128 (a, b, c);\n+}\n+\n+v32qi\n+foo6 (v32qi a, v32qi b, v32qi c)\n+{\n+  return __builtin_ia32_pblendvb256 (a, b, c);\n+}"}, {"sha": "e61e02334111aa1f84e3ef1e7c5f6aff7140d45d", "filename": "gcc/testsuite/gcc.target/i386/blendv-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28560c6d4043d8f6ac570f35fb84e952e9c719fe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fblendv-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28560c6d4043d8f6ac570f35fb84e952e9c719fe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fblendv-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fblendv-2.c?ref=28560c6d4043d8f6ac570f35fb84e952e9c719fe", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2 -mno-avx512f\" } */\n+/* { dg-final { scan-assembler-not {pblendv} } } */\n+/* { dg-final { scan-assembler-not {blendvp} } } */\n+\n+#include <x86intrin.h>\n+__m128\n+foo (__m128 a, __m128 b)\n+{\n+  return _mm_blendv_ps (a, b, _mm_setzero_ps ());\n+}\n+\n+__m256\n+foo2 (__m256 a, __m256 b)\n+{\n+  return _mm256_blendv_ps (a, b, _mm256_set1_ps (-1.0));\n+}\n+\n+__m128d\n+foo3 (__m128d a, __m128d b, __m128d c)\n+{\n+  return _mm_blendv_pd (a, b, _mm_set1_pd (1.0));\n+}\n+\n+__m256d\n+foo4 (__m256d a, __m256d b, __m256d c)\n+{\n+  return _mm256_blendv_pd (a, b, _mm256_set1_pd (-134.3));\n+}\n+\n+__m128i\n+foo5 (__m128i a, __m128i b, __m128i c)\n+{\n+  return _mm_blendv_epi8 (a, b, _mm_set1_epi8 (3));\n+}\n+\n+__m256i\n+foo6 (__m256i a, __m256i b, __m256i c)\n+{\n+  return _mm256_blendv_epi8 (a, b, _mm256_set1_epi8 (-22));\n+}"}, {"sha": "f15541169e719705189b806df62005f572099698", "filename": "gcc/testsuite/gcc.target/i386/funcspec-8.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28560c6d4043d8f6ac570f35fb84e952e9c719fe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28560c6d4043d8f6ac570f35fb84e952e9c719fe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-8.c?ref=28560c6d4043d8f6ac570f35fb84e952e9c719fe", "patch": "@@ -52,19 +52,19 @@ generic_psignd128 (__m128w a, __m128w b)\n #error \"-msse4.1 should not be set for this test\"\n #endif\n \n-__m128d sse4_1_blendvpd (__m128d a, __m128d b, __m128d c) __attribute__((__target__(\"sse4.1\")));\n-__m128d generic_blendvpd (__m128d a, __m128d b, __m128d c);\n+__m128 sse4_1_roundv4sf2 (__m128 a) __attribute__((__target__(\"sse4.1\")));\n+__m128 generic_roundv4sf2 (__m128 a);\n \n-__m128d\n-sse4_1_blendvpd  (__m128d a, __m128d b, __m128d c)\n+__m128\n+sse4_1_roundv4sf2  (__m128 a)\n {\n-  return __builtin_ia32_blendvpd (a, b, c);\n+  return __builtin_ia32_roundps_az (a);\n }\n \n-__m128d\n-generic_blendvpd  (__m128d a, __m128d b, __m128d c)\n+__m128\n+generic_blendvpd  (__m128 a)\n {\n-  return __builtin_ia32_blendvpd (a, b, c);\t\t/* { dg-error \"needs isa option\" } */\n+  return __builtin_ia32_roundps_az (a);\t\t/* { dg-error \"needs isa option\" } */\n }\n \n #ifdef __SSE4_2__"}]}