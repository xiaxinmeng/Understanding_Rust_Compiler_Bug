{"sha": "66ecb059c9d77cfcfb06cbdc3cac6a63b9e67f3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZlY2IwNTljOWQ3N2NmY2ZiMDZjYmRjM2NhYzZhNjNiOWU2N2YzZA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-03-02T18:12:50Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-03-02T18:12:50Z"}, "message": "PR c++/99251 - inconsistent -Wnonnull warning behaviour with dynamic_cast\n\ngcc/cp/ChangeLog:\n\n\tPR c++/99251\n\t* class.c (build_base_path): Call build_if_nonnull.\n\t* cp-tree.h (build_if_nonnull): Declare.\n\t* rtti.c (ifnonnull): Rename...\n\t(build_if_nonnull): ...to this.  Set no-warning bit on COND_EXPR.\n\t(build_dynamic_cast_1): Adjust to name change.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/99251\n\t* g++.dg/warn/Wnonnull9.C: Expect no warnings.\n\t* g++.dg/warn/Wnonnull12.C: New test.", "tree": {"sha": "ecb475f0a8a856dcd03e0b200c71257f9c1911e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecb475f0a8a856dcd03e0b200c71257f9c1911e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66ecb059c9d77cfcfb06cbdc3cac6a63b9e67f3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66ecb059c9d77cfcfb06cbdc3cac6a63b9e67f3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66ecb059c9d77cfcfb06cbdc3cac6a63b9e67f3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66ecb059c9d77cfcfb06cbdc3cac6a63b9e67f3d/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a233ae4d8c978a3c863c8199d6c3050389a84d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a233ae4d8c978a3c863c8199d6c3050389a84d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a233ae4d8c978a3c863c8199d6c3050389a84d1"}], "stats": {"total": 95, "additions": 63, "deletions": 32}, "files": [{"sha": "856e81e3d1ab1955a51e59d774e722e7319e947f", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66ecb059c9d77cfcfb06cbdc3cac6a63b9e67f3d/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66ecb059c9d77cfcfb06cbdc3cac6a63b9e67f3d/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=66ecb059c9d77cfcfb06cbdc3cac6a63b9e67f3d", "patch": "@@ -402,16 +402,9 @@ build_base_path (enum tree_code code,\n   if (TREE_SIDE_EFFECTS (expr) && (null_test || virtual_access))\n     expr = save_expr (expr);\n \n-  /* Now that we've saved expr, build the real null test.  */\n+  /* Store EXPR and build the real null test just before returning.  */\n   if (null_test)\n-    {\n-      tree zero = cp_convert (TREE_TYPE (expr), nullptr_node, complain);\n-      null_test = build2_loc (input_location, NE_EXPR, boolean_type_node,\n-\t\t\t      expr, zero);\n-      /* This is a compiler generated comparison, don't emit\n-\t e.g. -Wnonnull-compare warning for it.  */\n-      TREE_NO_WARNING (null_test) = 1;\n-    }\n+    null_test = expr;\n \n   /* If this is a simple base reference, express it as a COMPONENT_REF.  */\n   if (code == PLUS_EXPR && !virtual_access\n@@ -516,14 +509,8 @@ build_base_path (enum tree_code code,\n \n  out:\n   if (null_test)\n-    {\n-      expr = fold_build3_loc (input_location, COND_EXPR, target_type, null_test,\n-\t\t\t      expr, build_zero_cst (target_type));\n-      /* Avoid warning for the whole conditional expression (in addition\n-\t to NULL_TEST itself -- see above) in case the result is used in\n-\t a nonnull context that the front end -Wnonnull checks.  */\n-      TREE_NO_WARNING (expr) = 1;\n-    }\n+    /* Wrap EXPR in a null test.  */\n+    expr = build_if_nonnull (null_test, expr, complain);\n \n   return expr;\n }"}, {"sha": "b4728c87d0b33089930765c51b1e78b31851f9e9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66ecb059c9d77cfcfb06cbdc3cac6a63b9e67f3d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66ecb059c9d77cfcfb06cbdc3cac6a63b9e67f3d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=66ecb059c9d77cfcfb06cbdc3cac6a63b9e67f3d", "patch": "@@ -7279,6 +7279,7 @@ extern void emit_support_tinfos\t\t\t(void);\n extern bool emit_tinfo_decl\t\t\t(tree);\n extern unsigned get_pseudo_tinfo_index\t\t(tree);\n extern tree get_pseudo_tinfo_type\t\t(unsigned);\n+extern tree build_if_nonnull\t\t\t(tree, tree, tsubst_flags_t);\n \n /* in search.c */\n extern tree get_parent_with_private_access \t(tree decl, tree binfo);"}, {"sha": "5a33b83afd0c85a04833713abbbce82c3039ea4f", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66ecb059c9d77cfcfb06cbdc3cac6a63b9e67f3d/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66ecb059c9d77cfcfb06cbdc3cac6a63b9e67f3d/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=66ecb059c9d77cfcfb06cbdc3cac6a63b9e67f3d", "patch": "@@ -121,7 +121,6 @@ vec<tree, va_gc> *unemitted_tinfo_decls;\n    and are generated as needed. */\n static GTY (()) vec<tinfo_s, va_gc> *tinfo_descs;\n \n-static tree ifnonnull (tree, tree, tsubst_flags_t);\n static tree tinfo_name (tree, bool);\n static tree build_dynamic_cast_1 (location_t, tree, tree, tsubst_flags_t);\n static tree throw_bad_cast (void);\n@@ -529,16 +528,23 @@ get_typeid (tree type, tsubst_flags_t complain)\n /* Check whether TEST is null before returning RESULT.  If TEST is used in\n    RESULT, it must have previously had a save_expr applied to it.  */\n \n-static tree\n-ifnonnull (tree test, tree result, tsubst_flags_t complain)\n+tree\n+build_if_nonnull (tree test, tree result, tsubst_flags_t complain)\n {\n-  tree cond = build2 (NE_EXPR, boolean_type_node, test,\n-\t\t      cp_convert (TREE_TYPE (test), nullptr_node, complain));\n+  tree null_ptr = cp_convert (TREE_TYPE (test), nullptr_node, complain);\n+  tree cond = build2 (NE_EXPR, boolean_type_node, test, null_ptr);\n+\n   /* This is a compiler generated comparison, don't emit\n      e.g. -Wnonnull-compare warning for it.  */\n   TREE_NO_WARNING (cond) = 1;\n-  return build3 (COND_EXPR, TREE_TYPE (result), cond, result,\n-\t\t cp_convert (TREE_TYPE (result), nullptr_node, complain));\n+\n+  null_ptr = cp_convert (TREE_TYPE (result), nullptr_node, complain);\n+  cond = build3 (COND_EXPR, TREE_TYPE (result), cond, result, null_ptr);\n+\n+  /* Likewise, don't emit -Wnonnull for using the result to call\n+     a member function.  */\n+  TREE_NO_WARNING (cond) = 1;\n+  return cond;\n }\n \n /* Execute a dynamic cast, as described in section 5.2.6 of the 9/93 working\n@@ -671,7 +677,7 @@ build_dynamic_cast_1 (location_t loc, tree type, tree expr,\n \t  expr1 = build_headof (expr);\n \t  if (TREE_TYPE (expr1) != type)\n \t    expr1 = build1 (NOP_EXPR, type, expr1);\n-\t  return ifnonnull (expr, expr1, complain);\n+\t  return build_if_nonnull (expr, expr1, complain);\n \t}\n       else\n \t{\n@@ -786,7 +792,7 @@ build_dynamic_cast_1 (location_t loc, tree type, tree expr,\n \n \t  /* Now back to the type we want from a void*.  */\n \t  result = cp_convert (type, result, complain);\n-\t  return ifnonnull (expr, result, complain);\n+\t  return build_if_nonnull (expr, result, complain);\n \t}\n     }\n   else"}, {"sha": "7b2606302f5e221d437c0a2bdd49a39010c0484a", "filename": "gcc/testsuite/g++.dg/warn/Wnonnull12.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66ecb059c9d77cfcfb06cbdc3cac6a63b9e67f3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66ecb059c9d77cfcfb06cbdc3cac6a63b9e67f3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull12.C?ref=66ecb059c9d77cfcfb06cbdc3cac6a63b9e67f3d", "patch": "@@ -0,0 +1,29 @@\n+/* PR c++/99251 - inconsistent -Wnonnull warning behaviour with dynamic_cast\n+   { dg-do compile }\n+   { dg-options \"-Wall\" } */\n+\n+struct A\n+{\n+  virtual ~A ();\n+};\n+\n+struct B: A\n+{\n+  int f (int);\n+};\n+\n+int f1 (A *p)\n+{\n+  if (!p)\n+    return 0;\n+\n+  return (dynamic_cast<B *>(p))->f (1);\n+}\n+\n+int f2 (A *p)\n+{\n+  if (!p)\n+    return 0;\n+\n+  return dynamic_cast<B *>(p)->f (2);   // { dg-bogus \"\\\\\\[-Wnonnull\" }\n+}"}, {"sha": "88bf55adba24b6b42791371582ed4272adc909ab", "filename": "gcc/testsuite/g++.dg/warn/Wnonnull9.C", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66ecb059c9d77cfcfb06cbdc3cac6a63b9e67f3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66ecb059c9d77cfcfb06cbdc3cac6a63b9e67f3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull9.C?ref=66ecb059c9d77cfcfb06cbdc3cac6a63b9e67f3d", "patch": "@@ -38,13 +38,17 @@ void static_cast_const_C_ptr (B *p)\n \n void dynamic_cast_C_ptr (B *p)\n {\n-  // The dynamic_cast might fail so a warning is justified.\n-  dynamic_cast<C*>(p->bptr ())->g ();         // { dg-warning \"\\\\\\[-Wnonnull\" }\n+  /* Unlike static_cast, dynamic cast may return null even for a nonnull\n+     operand but detecting assumptions to the contrary isn't -Wnonnull's\n+     purpose.  Verify -Wnonnull isn't issued, either for the implicitly\n+     emitted null check or for other reasons (the latter may be worth\n+     warning for by some other warning).  See also pr99251.  */\n+  dynamic_cast<C*>(p->bptr ())->g ();         // { dg-bogus \"\\\\\\[-Wnonnull\" }\n }\n \n void dynamic_cast_const_C_ptr (B *p)\n {\n-  dynamic_cast<const C*>(p->bptr ())->g ();   // { dg-warning \"\\\\\\[-Wnonnull\" }\n+  dynamic_cast<const C*>(p->bptr ())->g ();   // { dg-bogus \"\\\\\\[-Wnonnull\" }\n }\n \n \n@@ -107,11 +111,15 @@ void static_cast_const_D_ptr (B *p)\n \n void dynamic_cast_D_ptr (B *p)\n {\n-  // The dynamic_cast might fail so a warning is justified.\n-  dynamic_cast<D*>(p->bptr ())->g ();         // { dg-warning \"\\\\\\[-Wnonnull\" }\n+  /* Unlike static_cast, dynamic cast may return null even for a nonnull\n+     operand but detecting assumptions to the contrary isn't -Wnonnull's\n+     purpose.  Verify -Wnonnull isn't issued, either for the implicitly\n+     emitted null check or for other reasons (the latter may be worth\n+     warning for by some other warning).  See also pr99251.  */\n+  dynamic_cast<D*>(p->bptr ())->g ();         // { dg-bogus \"\\\\\\[-Wnonnull\" }\n }\n \n void dynamic_cast_const_D_ptr (B *p)\n {\n-  dynamic_cast<const D*>(p->bptr ())->g ();   // { dg-warning \"\\\\\\[-Wnonnull\" }\n+  dynamic_cast<const D*>(p->bptr ())->g ();   // { dg-bogus \"\\\\\\[-Wnonnull\" }\n }"}]}