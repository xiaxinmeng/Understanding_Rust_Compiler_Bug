{"sha": "c80b4100e044ac1ca52c08d640ccbf03d29e8f05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgwYjQxMDBlMDQ0YWMxY2E1MmMwOGQ2NDBjY2JmMDNkMjllOGYwNQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2007-05-25T22:58:16Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2007-05-25T22:58:16Z"}, "message": "cfglayout.c, [...]: Fix comment typos.\n\n\t* cfglayout.c, cgraphunit.c, config/avr/avr.c, fold-const.c,\n\thaifa-sched.c, optabs.h, tree-affine.c, tree-data-ref.c,\n\ttree-predcom.c, tree-ssa-alias-warnings.c,\n\ttree-ssa-forwprop.c, tree-vect-analyze.c, tree-vrp.c: Fix\n\tcomment typos.  Follow spelling conventions.\n\t* doc/cpp.texi, doc/invoke.texi: Fix typos.\n\nFrom-SVN: r125080", "tree": {"sha": "637326f06fc8294c247b4bfa25348b265ff3f697", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/637326f06fc8294c247b4bfa25348b265ff3f697"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c80b4100e044ac1ca52c08d640ccbf03d29e8f05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c80b4100e044ac1ca52c08d640ccbf03d29e8f05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c80b4100e044ac1ca52c08d640ccbf03d29e8f05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/comments", "author": null, "committer": null, "parents": [{"sha": "b6dcc3149b9463470bed0dda3d369b15878584c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6dcc3149b9463470bed0dda3d369b15878584c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6dcc3149b9463470bed0dda3d369b15878584c3"}], "stats": {"total": 57, "additions": 33, "deletions": 24}, "files": [{"sha": "3b03140a4483943dbc0e8032a8faf3a56a479cbb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c80b4100e044ac1ca52c08d640ccbf03d29e8f05", "patch": "@@ -1,3 +1,12 @@\n+2007-05-25  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* cfglayout.c, cgraphunit.c, config/avr/avr.c, fold-const.c,\n+\thaifa-sched.c, optabs.h, tree-affine.c, tree-data-ref.c,\n+\ttree-predcom.c, tree-ssa-alias-warnings.c,\n+\ttree-ssa-forwprop.c, tree-vect-analyze.c, tree-vrp.c: Fix\n+\tcomment typos.  Follow spelling conventions.\n+\t* doc/cpp.texi, doc/invoke.texi: Fix typos.\n+\n 2007-05-26  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/32065"}, {"sha": "38e3d7b1e18da506bfcea095904550dfbc69b6ca", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=c80b4100e044ac1ca52c08d640ccbf03d29e8f05", "patch": "@@ -237,7 +237,7 @@ int prologue_locator;\n int epilogue_locator;\n \n /* Hold current location information and last location information, so the\n-   datastructures are built lazilly only when some instructions in given\n+   datastructures are built lazily only when some instructions in given\n    place are needed.  */\n location_t curr_location, last_location;\n static tree curr_block, last_block;"}, {"sha": "a81b3b29529e77e577b081870443367b2eb0ea3c", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=c80b4100e044ac1ca52c08d640ccbf03d29e8f05", "patch": "@@ -172,7 +172,7 @@ static GTY (()) tree static_ctors;\n static GTY (()) tree static_dtors;\n \n /* When target does not have ctors and dtors, we call all constructor\n-   and destructor by special initialization/destruction functio\n+   and destructor by special initialization/destruction function\n    recognized by collect2.  \n    \n    When we are going to build this function, collect all constructors and"}, {"sha": "d5930fac1b0b269cb6f9eb759a8994712b401f5d", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=c80b4100e044ac1ca52c08d640ccbf03d29e8f05", "patch": "@@ -623,7 +623,7 @@ expand_prologue (void)\n       char buffer[40];\n       sprintf (buffer, \"%s - %d\", avr_init_stack, (int) size);\n       rtx sym = gen_rtx_SYMBOL_REF (HImode, ggc_strdup (buffer));\n-      /*  Initialise stack pointer using frame pointer.  */\n+      /* Initialize stack pointer using frame pointer.  */\n       insn = emit_move_insn (frame_pointer_rtx, sym);\n       RTX_FRAME_RELATED_P (insn) = 1;\n       insn = emit_move_insn (stack_pointer_rtx, frame_pointer_rtx);"}, {"sha": "a3cb74d66112e810372f166ea4ec2d7e8cdf5a7c", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=c80b4100e044ac1ca52c08d640ccbf03d29e8f05", "patch": "@@ -1919,7 +1919,7 @@ underscores.\n \n @item __COUNTER__\n This macro expands to sequential integral values starting from 0.  In\n-conjuction with the @code{##} operator, this provides a convenient means to\n+conjunction with the @code{##} operator, this provides a convenient means to\n generate unique identifiers.  Care must be taken to ensure that\n @code{__COUNTER__} is not expanded prior to inclusion of precompiled headers\n which use it.  Otherwise, the precompiled headers will not be used."}, {"sha": "f93aeb1697cb5e3e9980028fb07c11796313f845", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c80b4100e044ac1ca52c08d640ccbf03d29e8f05", "patch": "@@ -7727,8 +7727,8 @@ The @code{print-asm-header} function takes no arguments and simply\n prints a banner like:\n \n @smallexample\n-Assember options\n-================\n+Assembler options\n+=================\n \n Use \"-Wa,OPTION\" to pass \"OPTION\" to the assembler.\n @end smallexample"}, {"sha": "a2cf43b060222800d60e4411bf5121e411d2df34", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=c80b4100e044ac1ca52c08d640ccbf03d29e8f05", "patch": "@@ -888,7 +888,7 @@ div_if_zero_remainder (enum tree_code code, tree arg1, tree arg2)\n \n   int1l = TREE_INT_CST_LOW (arg1);\n   int1h = TREE_INT_CST_HIGH (arg1);\n-  /* &obj[0] + -128 really should be compiled as &obj[-8] rahter than\n+  /* &obj[0] + -128 really should be compiled as &obj[-8] rather than\n      &obj[some_exotic_number].  */\n   if (POINTER_TYPE_P (type))\n     {"}, {"sha": "5696db044390420f05eae04f04aa1ce4c108c8c9", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=c80b4100e044ac1ca52c08d640ccbf03d29e8f05", "patch": "@@ -738,7 +738,7 @@ priority (rtx insn)\n   if (! INSN_P (insn))\n     return 0;\n \n-  /* We should not be insterested in priority of an already scheduled insn.  */\n+  /* We should not be interested in priority of an already scheduled insn.  */\n   gcc_assert (QUEUE_INDEX (insn) != QUEUE_SCHEDULED);\n \n   if (!INSN_PRIORITY_KNOWN (insn))"}, {"sha": "4fe778565b64264056729c0379d8cfa5ea9168eb", "filename": "gcc/optabs.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=c80b4100e044ac1ca52c08d640ccbf03d29e8f05", "patch": "@@ -89,13 +89,13 @@ enum optab_index\n   /* Signed multiply and add with the result and addend one machine mode\n      wider than the multiplicand and multiplier.  */\n   OTI_smadd_widen,\n-  /* Unigned multiply and add with the result and addend one machine mode\n+  /* Unsigned multiply and add with the result and addend one machine mode\n      wider than the multiplicand and multiplier.  */\n   OTI_umadd_widen,\n   /* Signed multiply and subtract the result and minuend one machine mode\n      wider than the multiplicand and multiplier.  */\n   OTI_smsub_widen,\n-  /* Unigned multiply and subtract the result and minuend one machine mode\n+  /* Unsigned multiply and subtract the result and minuend one machine mode\n      wider than the multiplicand and multiplier.  */\n   OTI_umsub_widen,\n "}, {"sha": "a25d55111694d1222ff67bc65c1277f94698b366", "filename": "gcc/tree-affine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Ftree-affine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Ftree-affine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-affine.c?ref=c80b4100e044ac1ca52c08d640ccbf03d29e8f05", "patch": "@@ -637,7 +637,7 @@ free_affine_expand_cache (struct pointer_map_t **cache)\n /* If VAL != CST * DIV for any constant CST, returns false.\n    Otherwise, if VAL != 0 (and hence CST != 0), and *MULT_SET is true,\n    additionally compares CST and MULT, and if they are different,\n-   returns false.  Finally, if neither of these two cases occcur,\n+   returns false.  Finally, if neither of these two cases occur,\n    true is returned, and if CST != 0, CST is stored to MULT and\n    MULT_SET is set to true.  */\n "}, {"sha": "ef3353fccb1de3db423fcaa94d9390158aa7bcc9", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=c80b4100e044ac1ca52c08d640ccbf03d29e8f05", "patch": "@@ -660,7 +660,7 @@ dr_analyze_innermost (struct data_reference *dr)\n }\n \n /* Determines the base object and the list of indices of memory reference\n-   DR, analysed in loop nest NEST.  */\n+   DR, analyzed in loop nest NEST.  */\n \n static void\n dr_analyze_indices (struct data_reference *dr, struct loop *nest)\n@@ -1225,7 +1225,7 @@ initialize_data_dependence_relation (struct data_reference *a,\n \n   /* If the base of the object is not invariant in the loop nest, we cannot\n      analyse it.  TODO -- in fact, it would suffice to record that there may\n-     be arbitrary depencences in the loops where the base object varies.  */\n+     be arbitrary dependences in the loops where the base object varies.  */\n   if (!object_address_invariant_in_loop_p (VEC_index (loop_p, loop_nest, 0),\n \t\t\t\t\t   DR_BASE_OBJECT (a)))\n     {"}, {"sha": "bae23ed527280e8eca0405352f36ecdf91c2c7ab", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=c80b4100e044ac1ca52c08d640ccbf03d29e8f05", "patch": "@@ -793,7 +793,7 @@ split_data_refs_to_components (struct loop *loop,\n }\n \n /* Returns true if the component COMP satisfies the conditions\n-   described in 2) at the begining of this file.  LOOP is the current\n+   described in 2) at the beginning of this file.  LOOP is the current\n    loop.  */\n       \n static bool\n@@ -850,7 +850,7 @@ suitable_component_p (struct loop *loop, struct component *comp)\n /* Check the conditions on references inside each of components COMPS,\n    and remove the unsuitable components from the list.  The new list\n    of components is returned.  The conditions are described in 2) at\n-   the begining of this file.  LOOP is the current loop.  */\n+   the beginning of this file.  LOOP is the current loop.  */\n \n static struct component *\n filter_suitable_components (struct loop *loop, struct component *comps)\n@@ -1752,7 +1752,7 @@ execute_pred_commoning (struct loop *loop, VEC (chain_p, heap) *chains,\n   update_ssa (TODO_update_ssa_only_virtuals);\n }\n \n-/* For each reference in CHAINS, if its definining statement is\n+/* For each reference in CHAINS, if its defining statement is\n    ssa name, set it to phi node that defines it.  */\n \n static void\n@@ -1771,7 +1771,7 @@ replace_phis_by_defined_names (VEC (chain_p, heap) *chains)\n       }\n }\n \n-/* For each reference in CHAINS, if its definining statement is\n+/* For each reference in CHAINS, if its defining statement is\n    phi node, set it to the ssa name that is defined by it.  */\n \n static void\n@@ -2018,7 +2018,7 @@ find_associative_operation_root (tree stmt, unsigned *distance)\n \n /* Returns the common statement in that NAME1 and NAME2 have a use.  If there\n    is no such statement, returns NULL_TREE.  In case the operation used on\n-   NAME1 and NAME2 is associative and comutative, returns the root of the\n+   NAME1 and NAME2 is associative and commutative, returns the root of the\n    tree formed by this operation instead of the statement that uses NAME1 or\n    NAME2.  */\n "}, {"sha": "8bd5388fe885cbed577d596ea67d591148e39e0a", "filename": "gcc/tree-ssa-alias-warnings.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Ftree-ssa-alias-warnings.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Ftree-ssa-alias-warnings.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias-warnings.c?ref=c80b4100e044ac1ca52c08d640ccbf03d29e8f05", "patch": "@@ -154,7 +154,7 @@\n       associate different tags with MEM while building points-to information,\n       thus before we get to analyze it.\n       XXX: this could be solved by either running with -fno-strict-aliasing\n-      or by recording the points-to information before splitting the orignal\n+      or by recording the points-to information before splitting the original\n       tag based on type.\n \n    Example 3.\n@@ -316,7 +316,7 @@ struct match_info\n   tree object;\n   bool is_ptr;\n   /* The difference between the number of references to OBJECT\n-     and the number of occurences of &OBJECT.  */\n+     and the number of occurrences of &OBJECT.  */\n   int found;\n };\n \n@@ -565,7 +565,7 @@ find_references_in_function (void)\n \n \n /* Find the reference site for OBJECT.\n-   If IS_PTR is true, look for derferences of OBJECT instead.\n+   If IS_PTR is true, look for dereferences of OBJECT instead.\n    XXX: only the first site is returned in the current\n    implementation.  If there are no matching sites, return NULL_TREE.  */\n "}, {"sha": "143268e3b9f181b063f0fcb4d948b8a0f0ac2ce4", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=c80b4100e044ac1ca52c08d640ccbf03d29e8f05", "patch": "@@ -1165,7 +1165,7 @@ phiprop_insert_phi (basic_block bb, tree phi, tree use_stmt,\n \t}\n \n       if (TREE_CODE (old_arg) == SSA_NAME)\n-\t/* Reuse a formely created dereference.  */\n+\t/* Reuse a formerly created dereference.  */\n \tnew_var = phivn[SSA_NAME_VERSION (old_arg)].value;\n       else\n \t{"}, {"sha": "6636cfd2758830ba212b712c2802771ab8f34aea", "filename": "gcc/tree-vect-analyze.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Ftree-vect-analyze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Ftree-vect-analyze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-analyze.c?ref=c80b4100e044ac1ca52c08d640ccbf03d29e8f05", "patch": "@@ -2210,7 +2210,7 @@ vect_stmt_relevant_p (tree stmt, loop_vec_info loop_vinfo,\n    - case 2: If STMT is a reduction phi and DEF_STMT is a reduction stmt, we \n    skip DEF_STMT cause it had already been processed.  \n \n-   Return true if everyting is as expected. Return false otherwise.  */\n+   Return true if everything is as expected. Return false otherwise.  */\n \n static bool\n process_use (tree stmt, tree use, loop_vec_info loop_vinfo, bool live_p, "}, {"sha": "b5654f69eac4782b8ae9f86d2f4903c4364f5ec2", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80b4100e044ac1ca52c08d640ccbf03d29e8f05/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=c80b4100e044ac1ca52c08d640ccbf03d29e8f05", "patch": "@@ -4627,7 +4627,7 @@ vrp_visit_assignment (tree stmt, tree *output_p)\n }\n \n /* Helper that gets the value range of the SSA_NAME with version I\n-   or a symbolic range contaning the SSA_NAME only if the value range\n+   or a symbolic range containing the SSA_NAME only if the value range\n    is varying or undefined.  */\n \n static inline value_range_t"}]}