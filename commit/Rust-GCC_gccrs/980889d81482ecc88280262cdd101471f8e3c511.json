{"sha": "980889d81482ecc88280262cdd101471f8e3c511", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgwODg5ZDgxNDgyZWNjODgyODAyNjJjZGQxMDE0NzFmOGUzYzUxMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-10-24T19:44:18Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-10-24T19:44:18Z"}, "message": "Error if naked return when result variables are shadowed.\n\nFrom-SVN: r180401", "tree": {"sha": "3a7c7b7ffcde861a01beb3e7d1625af06e68d738", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a7c7b7ffcde861a01beb3e7d1625af06e68d738"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/980889d81482ecc88280262cdd101471f8e3c511", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/980889d81482ecc88280262cdd101471f8e3c511", "html_url": "https://github.com/Rust-GCC/gccrs/commit/980889d81482ecc88280262cdd101471f8e3c511", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/980889d81482ecc88280262cdd101471f8e3c511/comments", "author": null, "committer": null, "parents": [{"sha": "d41c3b89475f0bcb0ed03f78d7ab2d4c9f94844a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d41c3b89475f0bcb0ed03f78d7ab2d4c9f94844a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d41c3b89475f0bcb0ed03f78d7ab2d4c9f94844a"}], "stats": {"total": 58, "additions": 40, "deletions": 18}, "files": [{"sha": "6f7b8f21b24fd11cc7ca0f1192b1509805f81d7c", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980889d81482ecc88280262cdd101471f8e3c511/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980889d81482ecc88280262cdd101471f8e3c511/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=980889d81482ecc88280262cdd101471f8e3c511", "patch": "@@ -3839,6 +3839,23 @@ Parse::return_stat()\n   if (this->expression_may_start_here())\n     vals = this->expression_list(NULL, false);\n   this->gogo_->add_statement(Statement::make_return_statement(vals, location));\n+\n+  if (vals == NULL\n+      && this->gogo_->current_function()->func_value()->results_are_named())\n+    {\n+      Named_object* function = this->gogo_->current_function();\n+      Function::Results* results = function->func_value()->result_variables();\n+      for (Function::Results::const_iterator p = results->begin();\n+\t   p != results->end();\n+\t   ++p)\n+\t{\n+\t  Named_object* no = this->gogo_->lookup((*p)->name(), NULL);\n+\t  go_assert(no != NULL);\n+\t  if (!no->is_result_variable())\n+\t    error_at(location, \"%qs is shadowed during return\",\n+\t\t     (*p)->message_name().c_str());\n+\t}\n+    }\n }\n \n // IfStmt = \"if\" [ SimpleStmt \";\" ] Expression Block"}, {"sha": "013b15c149724b3fe9462b0fad1fb81f074e59c3", "filename": "libgo/go/crypto/openpgp/s2k/s2k.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980889d81482ecc88280262cdd101471f8e3c511/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Fs2k%2Fs2k.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980889d81482ecc88280262cdd101471f8e3c511/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Fs2k%2Fs2k.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcrypto%2Fopenpgp%2Fs2k%2Fs2k.go?ref=980889d81482ecc88280262cdd101471f8e3c511", "patch": "@@ -100,7 +100,7 @@ func Parse(r io.Reader) (f func(out, in []byte), err os.Error) {\n \t\t}\n \t\treturn f, nil\n \tcase 2:\n-\t\t_, err := io.ReadFull(r, buf[:8])\n+\t\t_, err = io.ReadFull(r, buf[:8])\n \t\tif err != nil {\n \t\t\treturn\n \t\t}\n@@ -109,7 +109,7 @@ func Parse(r io.Reader) (f func(out, in []byte), err os.Error) {\n \t\t}\n \t\treturn f, nil\n \tcase 3:\n-\t\t_, err := io.ReadFull(r, buf[:9])\n+\t\t_, err = io.ReadFull(r, buf[:9])\n \t\tif err != nil {\n \t\t\treturn\n \t\t}"}, {"sha": "732f103d669d2feff750cd7e36f4fa6bf291ab51", "filename": "libgo/go/exp/gui/x11/auth.go", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980889d81482ecc88280262cdd101471f8e3c511/libgo%2Fgo%2Fexp%2Fgui%2Fx11%2Fauth.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980889d81482ecc88280262cdd101471f8e3c511/libgo%2Fgo%2Fexp%2Fgui%2Fx11%2Fauth.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fgui%2Fx11%2Fauth.go?ref=980889d81482ecc88280262cdd101471f8e3c511", "patch": "@@ -65,23 +65,25 @@ func readAuth(displayStr string) (name, data string, err os.Error) {\n \t\treturn\n \t}\n \tfor {\n-\t\tfamily, err := readU16BE(br, b[0:2])\n+\t\tvar family uint16\n+\t\tvar addr, disp, name0, data0 string\n+\t\tfamily, err = readU16BE(br, b[0:2])\n \t\tif err != nil {\n \t\t\treturn\n \t\t}\n-\t\taddr, err := readStr(br, b[0:])\n+\t\taddr, err = readStr(br, b[0:])\n \t\tif err != nil {\n \t\t\treturn\n \t\t}\n-\t\tdisp, err := readStr(br, b[0:])\n+\t\tdisp, err = readStr(br, b[0:])\n \t\tif err != nil {\n \t\t\treturn\n \t\t}\n-\t\tname0, err := readStr(br, b[0:])\n+\t\tname0, err = readStr(br, b[0:])\n \t\tif err != nil {\n \t\t\treturn\n \t\t}\n-\t\tdata0, err := readStr(br, b[0:])\n+\t\tdata0, err = readStr(br, b[0:])\n \t\tif err != nil {\n \t\t\treturn\n \t\t}"}, {"sha": "98c65b95faefa06c69aba11b8743d7867908d044", "filename": "libgo/go/exp/gui/x11/conn.go", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980889d81482ecc88280262cdd101471f8e3c511/libgo%2Fgo%2Fexp%2Fgui%2Fx11%2Fconn.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980889d81482ecc88280262cdd101471f8e3c511/libgo%2Fgo%2Fexp%2Fgui%2Fx11%2Fconn.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fgui%2Fx11%2Fconn.go?ref=980889d81482ecc88280262cdd101471f8e3c511", "patch": "@@ -391,12 +391,13 @@ func checkPixmapFormats(r io.Reader, b []byte, n int) (agree bool, err os.Error)\n // checkDepths checks that we have an agreeable X Depth (i.e. one that has an agreeable X VisualType).\n func checkDepths(r io.Reader, b []byte, n int, visual uint32) (agree bool, err os.Error) {\n \tfor i := 0; i < n; i++ {\n-\t\tdepth, err := readU16LE(r, b)\n+\t\tvar depth, visualsLen uint16\n+\t\tdepth, err = readU16LE(r, b)\n \t\tif err != nil {\n \t\t\treturn\n \t\t}\n \t\tdepth &= 0xff\n-\t\tvisualsLen, err := readU16LE(r, b)\n+\t\tvisualsLen, err = readU16LE(r, b)\n \t\tif err != nil {\n \t\t\treturn\n \t\t}\n@@ -408,11 +409,11 @@ func checkDepths(r io.Reader, b []byte, n int, visual uint32) (agree bool, err o\n \t\tfor j := 0; j < int(visualsLen); j++ {\n \t\t\t// Read 24 bytes: visual(4), class(1), bits per rgb value(1), colormap entries(2),\n \t\t\t// red mask(4), green mask(4), blue mask(4), padding(4).\n-\t\t\tv, err := readU32LE(r, b)\n-\t\t\t_, err = readU32LE(r, b)\n-\t\t\trm, err := readU32LE(r, b)\n-\t\t\tgm, err := readU32LE(r, b)\n-\t\t\tbm, err := readU32LE(r, b)\n+\t\t\tv, _ := readU32LE(r, b)\n+\t\t\t_, _ = readU32LE(r, b)\n+\t\t\trm, _ := readU32LE(r, b)\n+\t\t\tgm, _ := readU32LE(r, b)\n+\t\t\tbm, _ := readU32LE(r, b)\n \t\t\t_, err = readU32LE(r, b)\n \t\t\tif err != nil {\n \t\t\t\treturn\n@@ -428,7 +429,8 @@ func checkDepths(r io.Reader, b []byte, n int, visual uint32) (agree bool, err o\n // checkScreens checks that we have an agreeable X Screen.\n func checkScreens(r io.Reader, b []byte, n int) (root, visual uint32, err os.Error) {\n \tfor i := 0; i < n; i++ {\n-\t\troot0, err := readU32LE(r, b)\n+\t\tvar root0, visual0, x uint32\n+\t\troot0, err = readU32LE(r, b)\n \t\tif err != nil {\n \t\t\treturn\n \t\t}\n@@ -438,17 +440,18 @@ func checkScreens(r io.Reader, b []byte, n int) (root, visual uint32, err os.Err\n \t\tif err != nil {\n \t\t\treturn\n \t\t}\n-\t\tvisual0, err := readU32LE(r, b)\n+\t\tvisual0, err = readU32LE(r, b)\n \t\tif err != nil {\n \t\t\treturn\n \t\t}\n \t\t// Next 4 bytes: backing stores, save unders, root depth, allowed depths length.\n-\t\tx, err := readU32LE(r, b)\n+\t\tx, err = readU32LE(r, b)\n \t\tif err != nil {\n \t\t\treturn\n \t\t}\n \t\tnDepths := int(x >> 24)\n-\t\tagree, err := checkDepths(r, b, nDepths, visual0)\n+\t\tvar agree bool\n+\t\tagree, err = checkDepths(r, b, nDepths, visual0)\n \t\tif err != nil {\n \t\t\treturn\n \t\t}"}]}