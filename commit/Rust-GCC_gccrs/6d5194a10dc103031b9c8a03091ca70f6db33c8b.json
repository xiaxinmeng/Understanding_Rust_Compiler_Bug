{"sha": "6d5194a10dc103031b9c8a03091ca70f6db33c8b", "node_id": "C_kwDOANBUbNoAKDZkNTE5NGExMGRjMTAzMDMxYjljOGEwMzA5MWNhNzBmNmRiMzNjOGI", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-07-22T23:50:54Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-07-22T23:50:54Z"}, "message": "analyzer: fix state explosion on va_arg [PR106413]\n\nFix state explosion on va_arg when the call to va_start is in the\ntop-level function of the analysis.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/106413\n\t* varargs.cc (region_model::impl_call_va_start): Avoid iterating\n\tthrough non-existant variadic arguments by initializing the\n\timpl_region to \"UNKNOWN\" if the va_start occurs in the top-level\n\tfunction to the analysis.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/106413\n\t* gcc.dg/analyzer/torture/stdarg-4.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "13312753ee87ece630b4ec85ad46a70a0e58731d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13312753ee87ece630b4ec85ad46a70a0e58731d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d5194a10dc103031b9c8a03091ca70f6db33c8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d5194a10dc103031b9c8a03091ca70f6db33c8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d5194a10dc103031b9c8a03091ca70f6db33c8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d5194a10dc103031b9c8a03091ca70f6db33c8b/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fb35a45a28c674d5d420528f7dec629e42b4850", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fb35a45a28c674d5d420528f7dec629e42b4850", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fb35a45a28c674d5d420528f7dec629e42b4850"}], "stats": {"total": 355, "additions": 350, "deletions": 5}, "files": [{"sha": "9400086b10e9c07bbde36c3fa720c26d4f82891a", "filename": "gcc/analyzer/varargs.cc", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d5194a10dc103031b9c8a03091ca70f6db33c8b/gcc%2Fanalyzer%2Fvarargs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d5194a10dc103031b9c8a03091ca70f6db33c8b/gcc%2Fanalyzer%2Fvarargs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fvarargs.cc?ref=6d5194a10dc103031b9c8a03091ca70f6db33c8b", "patch": "@@ -667,11 +667,27 @@ region_model::impl_call_va_start (const call_details &cd)\n   const svalue *ptr_to_impl_reg = m_mgr->get_ptr_svalue (NULL_TREE, impl_reg);\n   set_value (out_reg, ptr_to_impl_reg, cd.get_ctxt ());\n \n-  /* \"*(&IMPL_REGION) = VA_LIST_VAL (0);\".  */\n-  const region *init_var_arg_reg\n-    = m_mgr->get_var_arg_region (get_current_frame (), 0);\n-  const svalue *ap_sval = m_mgr->get_ptr_svalue (NULL_TREE, init_var_arg_reg);\n-  set_value (impl_reg, ap_sval, cd.get_ctxt ());\n+  if (get_stack_depth () > 1)\n+    {\n+      /* The interprocedural case: the frame containing the va_start call\n+\t will have been populated with any variadic aruguments.\n+\t Initialize IMPL_REGION with a ptr to var_arg_region 0.  */\n+      const region *init_var_arg_reg\n+\t= m_mgr->get_var_arg_region (get_current_frame (), 0);\n+      const svalue *ap_sval\n+\t= m_mgr->get_ptr_svalue (NULL_TREE, init_var_arg_reg);\n+      set_value (impl_reg, ap_sval, cd.get_ctxt ());\n+    }\n+  else\n+    {\n+      /* The frame containing va_start is an entry-point to the analysis,\n+\t so there won't be any specific var_arg_regions populated within it.\n+\t Initialize IMPL_REGION as the UNKNOWN_SVALUE to avoid state\n+\t explosions on repeated calls to va_arg.  */\n+      const svalue *unknown_sval\n+\t= m_mgr->get_or_create_unknown_svalue (NULL_TREE);\n+      set_value (impl_reg, unknown_sval, cd.get_ctxt ());\n+    }\n }\n \n /* Handle the on_call_pre part of \"__builtin_va_copy\".  */"}, {"sha": "8275b0fa9baa797251df815bf9e16a963c34f95a", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/stdarg-4.c", "status": "added", "additions": 329, "deletions": 0, "changes": 329, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d5194a10dc103031b9c8a03091ca70f6db33c8b/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fstdarg-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d5194a10dc103031b9c8a03091ca70f6db33c8b/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fstdarg-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fstdarg-4.c?ref=6d5194a10dc103031b9c8a03091ca70f6db33c8b", "patch": "@@ -0,0 +1,329 @@\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } { \"\" } } */\n+\n+#include \"../analyzer-decls.h\"\n+\n+/* va_arg in loop, with no caller to function containing va_start.  */\n+\n+int test_1a (const char *fmt, ...)\n+{\n+  __builtin_va_list args;\n+  int sum = 0;\n+  char ch;\n+\n+  __builtin_va_start(args, fmt);\n+\n+  while (ch = *fmt++)\n+    if (ch == '%')\n+      sum += __builtin_va_arg(args, int);\n+\n+  __builtin_va_end(args);\n+\n+  return sum;\n+}\n+\n+/* va_arg in loop, with no caller to function containing va_start.  */\n+\n+static int test_1b_callee (const char *fmt, __builtin_va_list args)\n+{\n+  int sum = 0;\n+  char ch;\n+\n+  while (ch = *fmt++)\n+    if (ch == '%')\n+      sum += __builtin_va_arg(args, int);\n+\n+  return sum;\n+}\n+\n+int test_1b_caller (const char *fmt, ...)\n+{\n+  __builtin_va_list args;\n+  int sum = 0;\n+\n+  __builtin_va_start(args, fmt);\n+\n+  sum = test_1b_callee (fmt, args);\n+\n+  __builtin_va_end(args);\n+\n+  return sum;\n+}\n+\n+/* va_arg in loop, with a caller to the function containing va_start,\n+   with specific args.  */\n+\n+static int\n+test_1c_inner (const char *fmt, __builtin_va_list args)\n+{\n+  int sum = 0;\n+  char ch;\n+\n+  while (ch = *fmt++)\n+    if (ch == '%')\n+      sum += __builtin_va_arg(args, int);\n+\n+  return sum;\n+}\n+\n+static int\n+test_1c_middle (const char *fmt, ...)\n+{\n+  __builtin_va_list args;\n+  int sum = 0;\n+\n+  __builtin_va_start(args, fmt);\n+\n+  sum = test_1c_inner (fmt, args);\n+\n+  __builtin_va_end(args);\n+\n+  return sum;\n+}\n+\n+void test_1c_outer (void)\n+{\n+  int sum = test_1c_middle (\"%%\", 42, 17);\n+\n+  __analyzer_describe (0, sum); /* { dg-message \"'\\\\(int\\\\)59'\" } */\n+}\n+\n+/* va_arg in loop, with no caller to function containing va_start.  */\n+\n+int test_2a (int count, ...)\n+{\n+  __builtin_va_list args;\n+  int sum = 0;\n+  char ch;\n+\n+  __builtin_va_start(args, count);\n+\n+  while (count-- > 0)\n+    sum += __builtin_va_arg(args, int);\n+\n+  __builtin_va_end(args);\n+\n+  return sum;\n+}\n+\n+/* va_arg in loop, with no caller to function containing va_start.  */\n+\n+static int test_2b_callee (int count, __builtin_va_list args)\n+{\n+  int sum = 0;\n+\n+  while (count-- > 0)\n+    sum += __builtin_va_arg(args, int);\n+\n+  return sum;\n+}\n+\n+int test_2b_caller (int count, ...)\n+{\n+  __builtin_va_list args;\n+  int sum = 0;\n+\n+  __builtin_va_start(args, count);\n+\n+  sum = test_2b_callee (count, args);\n+\n+  __builtin_va_end(args);\n+\n+  return sum;\n+}\n+\n+/* va_arg in loop, with a caller to the function containing va_start,\n+   with specific args.  */\n+\n+static int test_2c_inner (int count, __builtin_va_list args)\n+{\n+  int sum = 0;\n+\n+  while (count-- > 0)\n+    sum += __builtin_va_arg(args, int);\n+\n+  return sum;\n+}\n+\n+int test_2c_middle (int count, ...)\n+{\n+  __builtin_va_list args;\n+  int sum = 0;\n+\n+  __builtin_va_start(args, count);\n+\n+  sum = test_2c_inner (count, args);\n+\n+  __builtin_va_end(args);\n+\n+  return sum;\n+}\n+\n+void test_2c_outer (void)\n+{\n+  int sum = test_2c_middle (2, 50, 42);\n+\n+  __analyzer_describe (0, sum); /* { dg-message \"'\\\\(int\\\\)92'\" } */\n+}\n+\n+/* va_arg in loop, with no caller to function containing va_start.  */\n+\n+int test_3a (int placeholder, ...)\n+{\n+  __builtin_va_list args;\n+  int sum = 0;\n+  int val;\n+\n+  __builtin_va_start(args, placeholder);\n+\n+  while (val = __builtin_va_arg(args, int))\n+    sum += val;\n+\n+  __builtin_va_end(args);\n+\n+  return sum;\n+}\n+\n+/* va_arg in loop, with no caller to function containing va_start.  */\n+\n+static int test_3b_callee (__builtin_va_list args)\n+{\n+  int sum = 0;\n+  int val;\n+  while (val = __builtin_va_arg(args, int))\n+    sum += val;\n+  return sum;\n+}\n+\n+int test_3b_caller (int placeholder, ...)\n+{\n+  __builtin_va_list args;\n+  int sum = 0;\n+\n+  __builtin_va_start(args, placeholder);\n+\n+  sum = test_3b_callee (args);\n+\n+  __builtin_va_end(args);\n+\n+  return sum;\n+}\n+\n+/* va_arg in loop, with a caller to the function containing va_start,\n+   with specific args.  */\n+\n+static int test_3c_inner (__builtin_va_list args)\n+{\n+  int sum = 0;\n+  int val;\n+  while (val = __builtin_va_arg(args, int))\n+    sum += val;\n+  return sum;\n+}\n+\n+int test_3c_middle (int placeholder, ...)\n+{\n+  __builtin_va_list args;\n+  int sum = 0;\n+\n+  __builtin_va_start(args, placeholder);\n+\n+  sum = test_3c_inner (args);\n+\n+  __builtin_va_end(args);\n+\n+  return sum;\n+}\n+\n+void test_3c_outer (void)\n+{\n+  int sum = test_3c_middle (0, 5, 12, 0);\n+  __analyzer_describe (0, sum); /* { dg-message \"'\\\\(int\\\\)17'\" } */\n+}\n+\n+/* va_arg in loop, with no caller to function containing va_start,\n+   with a va_copy.  */\n+\n+static int test_3d_callee (__builtin_va_list args)\n+{\n+  int sum = 0;\n+  int val;\n+  while (val = __builtin_va_arg(args, int))\n+    sum += val;\n+  return sum;\n+}\n+\n+int test_3d_caller (int placeholder, ...)\n+{\n+  __builtin_va_list args1, args2;\n+  int sum = 0;\n+\n+  __builtin_va_start(args1, placeholder);\n+  __builtin_va_copy (args2, args1);\n+\n+  sum = test_3d_callee (args1);\n+  __builtin_va_end(args1);\n+\n+  sum += test_3d_callee (args2);\n+  __builtin_va_end(args2);\n+\n+  return sum;\n+}\n+\n+/* va_arg in loop, with a caller to the function containing va_start,\n+   with specific args, with a va_copy.  */\n+\n+static int test_3e_inner (__builtin_va_list args)\n+{\n+  int sum = 0;\n+  int val;\n+  while (val = __builtin_va_arg(args, int))\n+    sum += val;\n+  return sum;\n+}\n+\n+int test_3e_middle (int placeholder, ...)\n+{\n+  __builtin_va_list args1, args2;\n+  int sum = 0;\n+\n+  __builtin_va_start(args1, placeholder);\n+  __builtin_va_copy (args2, args1);\n+\n+  sum = test_3e_inner (args1);\n+  __builtin_va_end(args1);\n+\n+  sum += test_3e_inner (args2);\n+  __builtin_va_end(args2);\n+\n+  return sum;\n+}\n+\n+void test_3e_outer (void)\n+{\n+  int sum = test_3e_middle (0, 5, 6, 0);\n+  __analyzer_describe (0, sum); /* { dg-message \"'\\\\(int\\\\)22'\" } */\n+}\n+\n+/* va_arg in loop, with specific symbolic args.  */\n+\n+static int test_3f_callee (int placeholder, ...)\n+{\n+  __builtin_va_list args;\n+  int sum = 0;\n+  int val;\n+\n+  __builtin_va_start(args, placeholder);\n+\n+  while (val = __builtin_va_arg(args, int))\n+    sum += val;\n+\n+  __builtin_va_end(args);\n+\n+  return sum;\n+}\n+\n+void test_3f_caller (int x, int y, int z)\n+{\n+  int sum = test_3f_callee (0, x, y, z, 0);\n+  __analyzer_describe (0, sum); /* { dg-message \"'UNKNOWN\\\\(int\\\\)'\" } */\n+}"}]}