{"sha": "f6497cc6b57912a7300bbb429c4292f7d1cf723b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY0OTdjYzZiNTc5MTJhNzMwMGJiYjQyOWM0MjkyZjdkMWNmNzIzYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-10-27T04:56:46Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-10-27T04:56:46Z"}, "message": "syscalls: Rewrite awk script to work with nawk.\n\nFrom-SVN: r180559", "tree": {"sha": "44c0782f42a2c1f053104f38622f6c1f0be3e2e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44c0782f42a2c1f053104f38622f6c1f0be3e2e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6497cc6b57912a7300bbb429c4292f7d1cf723b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6497cc6b57912a7300bbb429c4292f7d1cf723b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6497cc6b57912a7300bbb429c4292f7d1cf723b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6497cc6b57912a7300bbb429c4292f7d1cf723b/comments", "author": null, "committer": null, "parents": [{"sha": "78968b7620c8c3ee2490a74ca93a0300d18773a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78968b7620c8c3ee2490a74ca93a0300d18773a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78968b7620c8c3ee2490a74ca93a0300d18773a2"}], "stats": {"total": 60, "additions": 45, "deletions": 15}, "files": [{"sha": "4ceb80c56a55a0a77be41d6e0af19157a0fffa24", "filename": "libgo/go/syscall/mksyscall.awk", "status": "modified", "additions": 45, "deletions": 15, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6497cc6b57912a7300bbb429c4292f7d1cf723b/libgo%2Fgo%2Fsyscall%2Fmksyscall.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6497cc6b57912a7300bbb429c4292f7d1cf723b/libgo%2Fgo%2Fsyscall%2Fmksyscall.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fmksyscall.awk?ref=f6497cc6b57912a7300bbb429c4292f7d1cf723b", "patch": "@@ -44,33 +44,63 @@ BEGIN {\n \tblocking = 1\n     }\n \n-    if (match($0, \"//sys(nb)?[ \t]*([a-zA-Z0-9_]+)\\\\(([^()]*)\\\\) *(\\\\(([^()]+)\\\\))?\", gosig) == 0) {\n+    line = $0\n+\n+    if (match(line, \"//sys(nb)?[ \t]*[a-zA-Z0-9_]+\\\\([^()]*\\\\) *(\\\\(([^()]+)\\\\))?\") == 0) {\n \tprint \"unmatched line:\", $0 | \"cat 1>&2\"\n \tstatus = 1\n \tnext\n     }\n \n-    gofnname = gosig[2]\n-    gofnparams = gosig[3]\n-    gofnresults = gosig[5]\n+    # Sets a[1] = //sysnb, a[2] == function name.\n+    split(line, a, \"[ \t(]*\")\n+    gofnname = a[2]\n+\n+    off = match(line, \"\\\\([^()]*\\\\)\")\n+    end = index(substr(line, off, length(line) - off + 1), \")\")\n+    gofnparams = substr(line, off + 1, end - 2)\n+\n+    line = substr(line, off + end, length(line) - (off + end) + 1)\n+    off = match(line, \"\\\\([^()]*\\\\)\")\n+    if (off == 0) {\n+\tgofnresults = \"\"\n+    } else {\n+\tend = index(substr(line, off, length(line) - off + 1), \")\")\n+\tgofnresults = substr(line, off + 1, end - 2)\n+    }\n \n     getline\n+    line = $0\n \n-    if (match($0, \"//([a-zA-Z0-9_]+)\\\\(([^()]*)\\\\) *(.*)$\", csig) == 0) {\n+    if (match(line, \"//[a-zA-Z0-9_]+\\\\([^()]*\\\\)\") == 0) {\n \tprint \"unmatched C line\", $0, \"after\", gofnname | \"cat 1>&2\"\n \tstatus = 1\n \tnext\n     }\n \n-    cfnname = csig[1]\n-    cfnparams = csig[2]\n-    cfnresult = csig[3]\n+    split(line, a, \"[ \t(]*\")\n+    cfnname = substr(a[1], 3, length(a[1]) - 2)\n+\n+    off = match(line, \"\\\\([^()]*\\\\)\")\n+    end = index(substr(line, off, length(line) - off + 1), \")\")\n+    cfnparams = substr(line, off + 1, end - 2)\n+\n+    line = substr(line, off + end + 1, length(line) - (off + end) + 1)\n+    while (substr(line, 1, 1) == \" \") {\n+\tline = substr(line, 2, length(line) - 1)\n+    }\n+    end = index(line, \" \")\n+    if (end != 0) {\n+\tline = substr(line, 1, end)\n+    }\n+    cfnresult = line\n \n     printf(\"// Automatically generated wrapper for %s/%s\\n\", gofnname, cfnname)\n     printf(\"func c_%s(%s) %s%s__asm__(\\\"%s\\\")\\n\",\n \t   cfnname, cfnparams, cfnresult, cfnresult == \"\" ? \"\" : \" \", cfnname)\n-    printf(\"func %s(%s) %s%s{\\n\",\n-\t   gofnname, gofnparams, gosig[4], gosig[4] == \"\" ? \"\" : \" \")\n+    printf(\"func %s(%s) %s%s%s%s{\\n\",\n+\t   gofnname, gofnparams, gofnresults == \"\" ? \"\" : \"(\", gofnresults,\n+\t   gofnresults == \"\" ? \"\" : \")\", gofnresults == \"\" ? \"\" : \" \")\n \n     if (blocking) {\n \tprint \"\\tentersyscall()\"\n@@ -91,22 +121,22 @@ BEGIN {\n \t    args = args \", \"\n \t}\n \n-\tif (match(goargs[goarg], \"^([^ ]*) ([^ ]*)$\", goparam) == 0) {\n+\tif (split(goargs[goarg], a) != 2) {\n \t    print loc, \"bad parameter:\", goargs[goarg] | \"cat 1>&2\"\n \t    status = 1\n \t    next\n \t}\n \n-\tgoname = goparam[1]\n-\tgotype = goparam[2]\n+\tgoname = a[1]\n+\tgotype = a[2]\n \n-\tif (match(cargs[carg], \"^([^ ]*) ([^ ]*)$\", cparam) == 0) {\n+\tif (split(cargs[carg], a) != 2) {\n \t    print loc, \"bad C parameter:\", cargs[carg] | \"cat 1>&2\"\n \t    status = 1\n \t    next\n \t}\n \n-\tctype = cparam[2]\n+\tctype = a[2]\n \n \tif (gotype ~ /^\\*/) {\n \t    if (gotype != ctype) {"}]}