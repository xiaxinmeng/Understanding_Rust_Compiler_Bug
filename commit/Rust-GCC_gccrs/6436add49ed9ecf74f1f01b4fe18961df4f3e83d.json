{"sha": "6436add49ed9ecf74f1f01b4fe18961df4f3e83d", "node_id": "C_kwDOANBUbNoAKDY0MzZhZGQ0OWVkOWVjZjc0ZjFmMDFiNGZlMTg5NjFkZjRmM2U4M2Q", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-02-13T09:41:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-02-13T14:57:08Z"}, "message": "tree-optimization/108691 - indirect calls to setjmp\n\nDCE now chokes on indirect setjmp calls becoming direct because\nthat exposes them too late to be subject to abnormal edge creation.\nThe following patch honors gimple_call_ctrl_altering for those and\n_not_ treat formerly indirect calls to setjmp as calls to setjmp\nin notice_special_calls.\n\nUnfortunately there's no way to have an indirect call to setjmp\nproperly annotated (the returns_twice attribute is ignored on types).\n\nRTL expansion late discovers returns-twice for the purpose of\nadding REG_SETJMP notes and also sets ->calls_setjmp\n(instead of asserting it is set).  There's no good way to\ntransfer proper knowledge around here so I'm using ->calls_setjmp\nas a flag to indicate whether gimple_call_ctrl_altering_p was set.\n\n\tPR tree-optimization/108691\n\t* tree-cfg.cc (notice_special_calls): When the CFG is built\n\thonor gimple_call_ctrl_altering_p.\n\t* cfgexpand.cc (expand_call_stmt): Clear cfun->calls_setjmp\n\ttemporarily if the call is not control-altering.\n\t* calls.cc (emit_call_1): Do not add REG_SETJMP if\n\tcfun->calls_setjmp is not set.  Do not alter cfun->calls_setjmp.\n\n\t* gcc.dg/pr108691.c: New testcase.", "tree": {"sha": "f8c986b61112ca8a922355d848271084860e64d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8c986b61112ca8a922355d848271084860e64d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6436add49ed9ecf74f1f01b4fe18961df4f3e83d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6436add49ed9ecf74f1f01b4fe18961df4f3e83d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6436add49ed9ecf74f1f01b4fe18961df4f3e83d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6436add49ed9ecf74f1f01b4fe18961df4f3e83d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "452db716d8debb6e09b85e4a0c0e73a047ed5c1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/452db716d8debb6e09b85e4a0c0e73a047ed5c1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/452db716d8debb6e09b85e4a0c0e73a047ed5c1d"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "0242d52cfb35a90c2594e5f74579f45aecec76ce", "filename": "gcc/calls.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6436add49ed9ecf74f1f01b4fe18961df4f3e83d/gcc%2Fcalls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6436add49ed9ecf74f1f01b4fe18961df4f3e83d/gcc%2Fcalls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.cc?ref=6436add49ed9ecf74f1f01b4fe18961df4f3e83d", "patch": "@@ -506,11 +506,11 @@ emit_call_1 (rtx funexp, tree fntree ATTRIBUTE_UNUSED, tree fndecl ATTRIBUTE_UNU\n   if (ecf_flags & ECF_NORETURN)\n     add_reg_note (call_insn, REG_NORETURN, const0_rtx);\n \n-  if (ecf_flags & ECF_RETURNS_TWICE)\n-    {\n-      add_reg_note (call_insn, REG_SETJMP, const0_rtx);\n-      cfun->calls_setjmp = 1;\n-    }\n+  if (ecf_flags & ECF_RETURNS_TWICE\n+      /* We rely on GIMPLE setting this flag and here use it to\n+\t catch formerly indirect and not control-altering calls.  */\n+      && cfun->calls_setjmp)\n+    add_reg_note (call_insn, REG_SETJMP, const0_rtx);\n \n   SIBLING_CALL_P (call_insn) = ((ecf_flags & ECF_SIBCALL) != 0);\n "}, {"sha": "ab143a6d2d3df70a0bdd7fbf842fd631c6888260", "filename": "gcc/cfgexpand.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6436add49ed9ecf74f1f01b4fe18961df4f3e83d/gcc%2Fcfgexpand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6436add49ed9ecf74f1f01b4fe18961df4f3e83d/gcc%2Fcfgexpand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.cc?ref=6436add49ed9ecf74f1f01b4fe18961df4f3e83d", "patch": "@@ -2808,6 +2808,11 @@ expand_call_stmt (gcall *stmt)\n   /* Must come after copying location.  */\n   copy_warning (exp, stmt);\n \n+  /* For calls that do not alter control flow avoid REG_SETJMP notes.  */\n+  bool saved_calls_setjmp = cfun->calls_setjmp;\n+  if (!gimple_call_ctrl_altering_p (stmt))\n+    cfun->calls_setjmp = false;\n+\n   /* Ensure RTL is created for debug args.  */\n   if (decl && DECL_HAS_DEBUG_ARGS_P (decl))\n     {\n@@ -2846,6 +2851,8 @@ expand_call_stmt (gcall *stmt)\n     }\n \n   mark_transaction_restart_calls (stmt);\n+\n+  cfun->calls_setjmp = saved_calls_setjmp;\n }\n \n "}, {"sha": "e412df10f22c2c196aa65ed6d8ec199a18a9d645", "filename": "gcc/testsuite/gcc.dg/pr108691.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6436add49ed9ecf74f1f01b4fe18961df4f3e83d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108691.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6436add49ed9ecf74f1f01b4fe18961df4f3e83d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108691.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108691.c?ref=6436add49ed9ecf74f1f01b4fe18961df4f3e83d", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+extern int __attribute__((returns_twice)) setjmp(void*);\n+\n+void bbb(void) {\n+  int (*fnptr)(void*) = setjmp;\n+  fnptr(0);\n+}"}, {"sha": "e23293e5cd1fbe606542f56e3da9fa5b84434cae", "filename": "gcc/tree-cfg.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6436add49ed9ecf74f1f01b4fe18961df4f3e83d/gcc%2Ftree-cfg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6436add49ed9ecf74f1f01b4fe18961df4f3e83d/gcc%2Ftree-cfg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.cc?ref=6436add49ed9ecf74f1f01b4fe18961df4f3e83d", "patch": "@@ -2280,7 +2280,9 @@ notice_special_calls (gcall *call)\n \n   if (flags & ECF_MAY_BE_ALLOCA)\n     cfun->calls_alloca = true;\n-  if (flags & ECF_RETURNS_TWICE)\n+  if (flags & ECF_RETURNS_TWICE\n+      && (!(cfun->curr_properties & PROP_cfg)\n+\t  || gimple_call_ctrl_altering_p (call)))\n     cfun->calls_setjmp = true;\n }\n "}]}