{"sha": "e3953a6610f209be57f6c7595441d38559b433b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM5NTNhNjYxMGYyMDliZTU3ZjZjNzU5NTQ0MWQzODU1OWI0MzNiMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-09-28T22:20:39Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-09-28T22:20:39Z"}, "message": "compiler: Fix handling of omitted expression in switch.\n\nFrom-SVN: r191842", "tree": {"sha": "95fad6fe9bc8001e902e5b5a03998b9eaeba8976", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95fad6fe9bc8001e902e5b5a03998b9eaeba8976"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3953a6610f209be57f6c7595441d38559b433b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3953a6610f209be57f6c7595441d38559b433b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3953a6610f209be57f6c7595441d38559b433b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3953a6610f209be57f6c7595441d38559b433b1/comments", "author": null, "committer": null, "parents": [{"sha": "ddd06f537235203ce3e9f7a2a5e454410317995c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd06f537235203ce3e9f7a2a5e454410317995c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddd06f537235203ce3e9f7a2a5e454410317995c"}], "stats": {"total": 29, "additions": 10, "deletions": 19}, "files": [{"sha": "af34670aee0718e812021972f02a5e945ee5c4ac", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3953a6610f209be57f6c7595441d38559b433b1/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3953a6610f209be57f6c7595441d38559b433b1/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=e3953a6610f209be57f6c7595441d38559b433b1", "patch": "@@ -3313,16 +3313,10 @@ Case_clauses::Case_clause::lower(Block* b, Temporary_statement* val_temp,\n \t   p != this->cases_->end();\n \t   ++p)\n \t{\n-\t  Expression* this_cond;\n-\t  if (val_temp == NULL)\n-\t    this_cond = *p;\n-\t  else\n-\t    {\n-\t      Expression* ref = Expression::make_temporary_reference(val_temp,\n-\t\t\t\t\t\t\t\t     loc);\n-\t      this_cond = Expression::make_binary(OPERATOR_EQEQ, ref, *p, loc);\n-\t    }\n-\n+\t  Expression* ref = Expression::make_temporary_reference(val_temp,\n+\t\t\t\t\t\t\t\t loc);\n+\t  Expression* this_cond = Expression::make_binary(OPERATOR_EQEQ, ref,\n+\t\t\t\t\t\t\t  *p, loc);\n \t  if (cond == NULL)\n \t    cond = this_cond;\n \t  else\n@@ -3866,15 +3860,12 @@ Switch_statement::do_lower(Gogo*, Named_object*, Block* enclosing,\n       return Statement::make_statement(val, true);\n     }\n \n-  Temporary_statement* val_temp;\n-  if (this->val_ == NULL)\n-    val_temp = NULL;\n-  else\n-    {\n-      // var val_temp VAL_TYPE = VAL\n-      val_temp = Statement::make_temporary(NULL, this->val_, loc);\n-      b->add_statement(val_temp);\n-    }\n+  // var val_temp VAL_TYPE = VAL\n+  Expression* val = this->val_;\n+  if (val == NULL)\n+    val = Expression::make_boolean(true, loc);\n+  Temporary_statement* val_temp = Statement::make_temporary(NULL, val, loc);\n+  b->add_statement(val_temp);\n \n   this->clauses_->lower(b, val_temp, this->break_label());\n "}]}