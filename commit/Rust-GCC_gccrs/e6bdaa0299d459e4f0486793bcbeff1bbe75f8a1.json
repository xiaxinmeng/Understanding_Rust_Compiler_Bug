{"sha": "e6bdaa0299d459e4f0486793bcbeff1bbe75f8a1", "node_id": "C_kwDOANBUbNoAKGU2YmRhYTAyOTlkNDU5ZTRmMDQ4Njc5M2JjYmVmZjFiYmU3NWY4YTE", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2022-03-08T22:55:16Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-16T08:42:04Z"}, "message": "[Ada] Accept calls to abstract subprograms in class-wide pre/post-conditions\n\nFix a regression in the support for Ada 2022's treatment of calls to\nabstract subprograms in pre/post-conditions (thanks to Javier Miranda\nfor producing this patch).\n\ngcc/ada/\n\n\t* sem_disp.adb (Check_Dispatching_Context): When checking to see\n\twhether an expression occurs in a class-wide pre/post-condition,\n\talso check for the possibility that it occurs in a class-wide\n\tpreconditions subprogram that was introduced as part of\n\texpansion. Without this fix, some legal calls occuring in\n\tclass-wide preconditions may be incorrectly flagged as violating\n\tthe \"a call to an abstract subprogram must be dispatching\" rule.", "tree": {"sha": "1c6c604a13a220279b9693b722f0ffa548a40c6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c6c604a13a220279b9693b722f0ffa548a40c6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6bdaa0299d459e4f0486793bcbeff1bbe75f8a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6bdaa0299d459e4f0486793bcbeff1bbe75f8a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6bdaa0299d459e4f0486793bcbeff1bbe75f8a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6bdaa0299d459e4f0486793bcbeff1bbe75f8a1/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "146ea83af978384b0f7dabc8176f8bf98892ce2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/146ea83af978384b0f7dabc8176f8bf98892ce2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/146ea83af978384b0f7dabc8176f8bf98892ce2a"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "0372ff87c33713b1fac5e1b43d2e165250bd58f8", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6bdaa0299d459e4f0486793bcbeff1bbe75f8a1/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6bdaa0299d459e4f0486793bcbeff1bbe75f8a1/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=e6bdaa0299d459e4f0486793bcbeff1bbe75f8a1", "patch": "@@ -751,14 +751,22 @@ package body Sem_Disp is\n \n             elsif Is_Subprogram (Scop)\n               and then not Is_Tag_Indeterminate (N)\n-              and then In_Pre_Post_Condition (Call, Class_Wide_Only => True)\n+              and then\n+               --  The context is an internally built helper or an indirect\n+               --  call wrapper that handles class-wide preconditions\n+                 (Present (Class_Preconditions_Subprogram (Scop))\n \n-              --  The tagged type associated with the called subprogram must be\n-              --  the same as that of the subprogram with a class-wide aspect.\n+               --  ... or the context is a class-wide pre/postcondition.\n+                   or else\n+                     (In_Pre_Post_Condition (Call, Class_Wide_Only => True)\n \n-              and then Is_Dispatching_Operation (Scop)\n-              and then\n-                Find_Dispatching_Type (Subp) = Find_Dispatching_Type (Scop)\n+                       --  The tagged type associated with the called\n+                       --  subprogram must be the same as that of the\n+                       --  subprogram with a class-wide aspect.\n+\n+                       and then Is_Dispatching_Operation (Scop)\n+                       and then Find_Dispatching_Type (Subp)\n+                                  = Find_Dispatching_Type (Scop)))\n             then\n                null;\n "}]}