{"sha": "24a179f835ec7ce4376071d3744ecd0083841ae7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRhMTc5ZjgzNWVjN2NlNDM3NjA3MWQzNzQ0ZWNkMDA4Mzg0MWFlNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-02-10T12:46:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-02-10T12:46:33Z"}, "message": "re PR tree-optimization/69726 (Bogus warnings with -O3 -Wuninitialized because dead code after if-conversion)\n\n2016-02-10  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/69726\n\t* passes.def: Add DCE pass before late uninit.\n\t* match.pd: Add A ? B : (!A ? C : X) -> A ? B : C patterns to\n\treally fixup if-conversions job.\n\n\t* gcc.dg/uninit-22.c: New testcase.\n\nFrom-SVN: r233267", "tree": {"sha": "cb6e744fe6c158fa16fa2ad7250600acb7a156a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb6e744fe6c158fa16fa2ad7250600acb7a156a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24a179f835ec7ce4376071d3744ecd0083841ae7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24a179f835ec7ce4376071d3744ecd0083841ae7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24a179f835ec7ce4376071d3744ecd0083841ae7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24a179f835ec7ce4376071d3744ecd0083841ae7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "066c14c940a7a20f53216f0e05a85c429e5e33ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/066c14c940a7a20f53216f0e05a85c429e5e33ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/066c14c940a7a20f53216f0e05a85c429e5e33ea"}], "stats": {"total": 114, "additions": 107, "deletions": 7}, "files": [{"sha": "23100e060031d17cc346f07cc7152e39a2a1ff63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a179f835ec7ce4376071d3744ecd0083841ae7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a179f835ec7ce4376071d3744ecd0083841ae7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24a179f835ec7ce4376071d3744ecd0083841ae7", "patch": "@@ -1,3 +1,10 @@\n+2016-02-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69726\n+\t* passes.def: Add DCE pass before late uninit.\n+\t* match.pd: Add A ? B : (!A ? C : X) -> A ? B : C patterns to\n+\treally fixup if-conversions job.\n+\n 2016-02-10  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/arm/arm.c (arm_cortex_a53_tune): Enable AES fusion."}, {"sha": "298e835236975566ab20ccff577591e2f3d46838", "filename": "gcc/match.pd", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a179f835ec7ce4376071d3744ecd0083841ae7/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a179f835ec7ce4376071d3744ecd0083841ae7/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=24a179f835ec7ce4376071d3744ecd0083841ae7", "patch": "@@ -1717,6 +1717,29 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (simplify\n   (cnd @0 @1 (cnd @0 @2 @3))\n   (cnd @0 @1 @3))\n+ /* A ? B : (!A ? C : X) -> A ? B : C.  */\n+ /* ???  This matches embedded conditions open-coded because genmatch\n+    would generate matching code for conditions in separate stmts only.\n+    The following is still important to merge then and else arm cases\n+    from if-conversion.  */\n+ (simplify\n+  (cnd @0 @1 (cnd @2 @3 @4))\n+  (if (COMPARISON_CLASS_P (@0)\n+       && COMPARISON_CLASS_P (@2)\n+       && invert_tree_comparison\n+           (TREE_CODE (@0), HONOR_NANS (TREE_OPERAND (@0, 0))) == TREE_CODE (@2)\n+       && operand_equal_p (TREE_OPERAND (@0, 0), TREE_OPERAND (@2, 0), 0)\n+       && operand_equal_p (TREE_OPERAND (@0, 1), TREE_OPERAND (@2, 1), 0))\n+   (cnd @0 @1 @3)))\n+ (simplify\n+  (cnd @0 (cnd @1 @2 @3) @4)\n+  (if (COMPARISON_CLASS_P (@0)\n+       && COMPARISON_CLASS_P (@1)\n+       && invert_tree_comparison\n+           (TREE_CODE (@0), HONOR_NANS (TREE_OPERAND (@0, 0))) == TREE_CODE (@1)\n+       && operand_equal_p (TREE_OPERAND (@0, 0), TREE_OPERAND (@1, 0), 0)\n+       && operand_equal_p (TREE_OPERAND (@0, 1), TREE_OPERAND (@1, 1), 0))\n+   (cnd @0 @3 @4)))\n \n  /* A ? B : B -> B.  */\n  (simplify"}, {"sha": "d103df13dcdfc905f04ed00135805aa793a62627", "filename": "gcc/passes.def", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a179f835ec7ce4376071d3744ecd0083841ae7/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a179f835ec7ce4376071d3744ecd0083841ae7/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=24a179f835ec7ce4376071d3744ecd0083841ae7", "patch": "@@ -322,15 +322,11 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_fold_builtins);\n       NEXT_PASS (pass_optimize_widening_mul);\n       NEXT_PASS (pass_tail_calls);\n-      /* FIXME: If DCE is not run before checking for uninitialized uses,\n+      /* If DCE is not run before checking for uninitialized uses,\n \t we may get false warnings (e.g., testsuite/gcc.dg/uninit-5.c).\n \t However, this also causes us to misdiagnose cases that should be\n-\t real warnings (e.g., testsuite/gcc.dg/pr18501.c).\n-\n-\t To fix the false positives in uninit-5.c, we would have to\n-\t account for the predicates protecting the set and the use of each\n-\t variable.  Using a representation like Gated Single Assignment\n-\t may help.  */\n+\t real warnings (e.g., testsuite/gcc.dg/pr18501.c).  */\n+      NEXT_PASS (pass_dce);\n       /* Split critical edges before late uninit warning to reduce the\n          number of false positives from it.  */\n       NEXT_PASS (pass_split_crit_edges);"}, {"sha": "a6d388c94f8f956378e010d6ff05a08b33b93333", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a179f835ec7ce4376071d3744ecd0083841ae7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a179f835ec7ce4376071d3744ecd0083841ae7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=24a179f835ec7ce4376071d3744ecd0083841ae7", "patch": "@@ -1,3 +1,8 @@\n+2016-02-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69726\n+\t* gcc.dg/uninit-22.c: New testcase.\n+\n 2016-02-09  Andrew Pinski  <apinski@cavium.com>\n \n \tPR tree-opt/69282"}, {"sha": "37d1071c75ad0bbfc9289790703e8ea5a62281e0", "filename": "gcc/testsuite/gcc.dg/uninit-22.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a179f835ec7ce4376071d3744ecd0083841ae7/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a179f835ec7ce4376071d3744ecd0083841ae7/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-22.c?ref=24a179f835ec7ce4376071d3744ecd0083841ae7", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -Wuninitialized --param vect-max-version-for-alias-checks=20\" } */\n+\n+#include <stdint.h>\n+\n+#define A1  2896 /* (1/sqrt(2))<<12 */\n+#define A2  2217\n+#define A3  3784\n+#define A4 -5352\n+\n+#define IDCT_TRANSFORM(dest,s0,s1,s2,s3,s4,s5,s6,s7,d0,d1,d2,d3,d4,d5,d6,d7,munge,src) {\\\n+    const int a0 = (src)[s0] + (src)[s4]; \\\n+    const int a1 = (src)[s0] - (src)[s4]; \\\n+    const int a2 = (src)[s2] + (src)[s6]; \\\n+    const int a3 = (A1*((src)[s2] - (src)[s6])) >> 11; \\\n+    const int a4 = (src)[s5] + (src)[s3]; \\\n+    const int a5 = (src)[s5] - (src)[s3]; \\\n+    const int a6 = (src)[s1] + (src)[s7]; \\\n+    const int a7 = (src)[s1] - (src)[s7]; \\\n+    const int b0 = a4 + a6; \\\n+    const int b1 = (A3*(a5 + a7)) >> 11; \\\n+    const int b2 = ((A4*a5) >> 11) - b0 + b1; \\\n+    const int b3 = (A1*(a6 - a4) >> 11) - b2; \\\n+    const int b4 = ((A2*a7) >> 11) + b3 - b1; \\\n+    (dest)[d0] = munge(a0+a2   +b0); \\\n+    (dest)[d1] = munge(a1+a3-a2+b2); \\\n+    (dest)[d2] = munge(a1-a3+a2+b3); \\\n+    (dest)[d3] = munge(a0-a2   -b4); \\\n+    (dest)[d4] = munge(a0-a2   +b4); \\\n+    (dest)[d5] = munge(a1-a3+a2-b3); \\\n+    (dest)[d6] = munge(a1+a3-a2-b2); \\\n+    (dest)[d7] = munge(a0+a2   -b0); \\\n+}\n+\n+#define MUNGE_NONE(x) (x)\n+#define IDCT_COL(dest,src) IDCT_TRANSFORM(dest,0,8,16,24,32,40,48,56,0,8,16,24,32,40,48,56,MUNGE_NONE,src)\n+\n+#define MUNGE_ROW(x) (((x) + 0x7F)>>8)\n+#define IDCT_ROW(dest,src) IDCT_TRANSFORM(dest,0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,MUNGE_ROW,src)\n+\n+static inline void bink_idct_col(int *dest, const int32_t *src)\n+{\n+    if ((src[8]|src[16]|src[24]|src[32]|src[40]|src[48]|src[56])==0) {\n+        dest[0]  =\n+        dest[8]  =\n+        dest[16] =\n+        dest[24] =\n+        dest[32] =\n+        dest[40] =\n+        dest[48] =\n+        dest[56] = src[0];\n+    } else {\n+        IDCT_COL(dest, src);\n+    }\n+}\n+\n+int bink_idct_put_c(uint8_t *dest, int linesize, int32_t *block)\n+{\n+    int i;\n+    int temp[64];\n+    for (i = 0; i < 8; i++)\n+        bink_idct_col(&temp[i], &block[i]);\n+    for (i = 0; i < 8; i++) {\n+        IDCT_ROW( (&dest[i*linesize]), (&temp[8*i]) );\n+    }\n+\n+    return 0;\n+}\n+"}]}