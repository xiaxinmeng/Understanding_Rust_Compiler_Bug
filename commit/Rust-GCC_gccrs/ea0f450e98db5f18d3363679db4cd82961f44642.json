{"sha": "ea0f450e98db5f18d3363679db4cd82961f44642", "node_id": "C_kwDOANBUbNoAKGVhMGY0NTBlOThkYjVmMThkMzM2MzY3OWRiNGNkODI5NjFmNDQ2NDI", "commit": {"author": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2021-09-08T01:42:29Z"}, "committer": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2021-09-24T02:25:20Z"}, "message": "AVX512FP16: Support cond_op for HFmode\n\ngcc/ChangeLog:\n\n\t* config/i386/sse.md (cond_<insn><mode>): Extend to support\n\tvector HFmodes.\n\t(cond_mul<mode>): Likewise.\n\t(cond_div<mode>): Likewise.\n\t(cond_<code><mode>): Likewise.\n\t(cond_fma<mode>): Likewise.\n\t(cond_fms<mode>): Likewise.\n\t(cond_fnma<mode>): Likewise.\n\t(cond_fnms<mode>): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/cond_op_addsubmuldiv__Float16-1.c: New test.\n\t* gcc.target/i386/cond_op_addsubmuldiv__Float16-2.c: Ditto.\n\t* gcc.target/i386/cond_op_fma__Float16-1.c: Ditto.\n\t* gcc.target/i386/cond_op_fma__Float16-2.c: Ditto.\n\t* gcc.target/i386/cond_op_maxmin__Float16-1.c: Ditto.\n\t* gcc.target/i386/cond_op_maxmin__Float16-2.c: Ditto.", "tree": {"sha": "c085dcce1c42db5b23973a79b9da4cc3c0de3c8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c085dcce1c42db5b23973a79b9da4cc3c0de3c8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea0f450e98db5f18d3363679db4cd82961f44642", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea0f450e98db5f18d3363679db4cd82961f44642", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea0f450e98db5f18d3363679db4cd82961f44642", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea0f450e98db5f18d3363679db4cd82961f44642/comments", "author": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "391b23e02bf29a103422f54ed034650afa99152b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/391b23e02bf29a103422f54ed034650afa99152b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/391b23e02bf29a103422f54ed034650afa99152b"}], "stats": {"total": 170, "additions": 114, "deletions": 56}, "files": [{"sha": "a446dedb2ec97effd6a59506a03934d08d8e8502", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0f450e98db5f18d3363679db4cd82961f44642/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0f450e98db5f18d3363679db4cd82961f44642/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=ea0f450e98db5f18d3363679db4cd82961f44642", "patch": "@@ -2125,12 +2125,12 @@\n   [(set_attr \"isa\" \"noavx,noavx,avx,avx\")])\n \n (define_expand \"cond_<insn><mode>\"\n-  [(set (match_operand:VF 0 \"register_operand\")\n-\t(vec_merge:VF\n-\t  (plusminus:VF\n-\t    (match_operand:VF 2 \"vector_operand\")\n-\t    (match_operand:VF 3 \"vector_operand\"))\n-\t  (match_operand:VF 4 \"nonimm_or_0_operand\")\n+  [(set (match_operand:VFH 0 \"register_operand\")\n+\t(vec_merge:VFH\n+\t  (plusminus:VFH\n+\t    (match_operand:VFH 2 \"vector_operand\")\n+\t    (match_operand:VFH 3 \"vector_operand\"))\n+\t  (match_operand:VFH 4 \"nonimm_or_0_operand\")\n \t  (match_operand:<avx512fmaskmode> 1 \"register_operand\")))]\n   \"<MODE_SIZE> == 64 || TARGET_AVX512VL\"\n {\n@@ -2214,12 +2214,12 @@\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n (define_expand \"cond_mul<mode>\"\n-  [(set (match_operand:VF 0 \"register_operand\")\n-\t(vec_merge:VF\n-\t  (mult:VF\n-\t    (match_operand:VF 2 \"vector_operand\")\n-\t    (match_operand:VF 3 \"vector_operand\"))\n-\t  (match_operand:VF 4 \"nonimm_or_0_operand\")\n+  [(set (match_operand:VFH 0 \"register_operand\")\n+\t(vec_merge:VFH\n+\t  (mult:VFH\n+\t    (match_operand:VFH 2 \"vector_operand\")\n+\t    (match_operand:VFH 3 \"vector_operand\"))\n+\t  (match_operand:VFH 4 \"nonimm_or_0_operand\")\n \t  (match_operand:<avx512fmaskmode> 1 \"register_operand\")))]\n   \"<MODE_SIZE> == 64 || TARGET_AVX512VL\"\n {\n@@ -2329,12 +2329,12 @@\n })\n \n (define_expand \"cond_div<mode>\"\n-  [(set (match_operand:VF 0 \"register_operand\")\n-\t(vec_merge:VF\n-\t  (div:VF\n-\t    (match_operand:VF 2 \"register_operand\")\n-\t    (match_operand:VF 3 \"vector_operand\"))\n-\t  (match_operand:VF 4 \"nonimm_or_0_operand\")\n+  [(set (match_operand:VFH 0 \"register_operand\")\n+\t(vec_merge:VFH\n+\t  (div:VFH\n+\t    (match_operand:VFH 2 \"register_operand\")\n+\t    (match_operand:VFH 3 \"vector_operand\"))\n+\t  (match_operand:VFH 4 \"nonimm_or_0_operand\")\n \t  (match_operand:<avx512fmaskmode> 1 \"register_operand\")))]\n   \"<MODE_SIZE> == 64 || TARGET_AVX512VL\"\n {\n@@ -2667,12 +2667,12 @@\n    (set_attr \"mode\" \"HF\")])\n \n (define_expand \"cond_<code><mode>\"\n-  [(set (match_operand:VF 0 \"register_operand\")\n-\t(vec_merge:VF\n-\t  (smaxmin:VF\n-\t    (match_operand:VF 2 \"vector_operand\")\n-\t    (match_operand:VF 3 \"vector_operand\"))\n-\t  (match_operand:VF 4 \"nonimm_or_0_operand\")\n+  [(set (match_operand:VFH 0 \"register_operand\")\n+\t(vec_merge:VFH\n+\t  (smaxmin:VFH\n+\t    (match_operand:VFH 2 \"vector_operand\")\n+\t    (match_operand:VFH 3 \"vector_operand\"))\n+\t  (match_operand:VFH 4 \"nonimm_or_0_operand\")\n \t  (match_operand:<avx512fmaskmode> 1 \"register_operand\")))]\n   \"<MODE_SIZE> == 64 || TARGET_AVX512VL\"\n {\n@@ -4837,13 +4837,13 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"cond_fma<mode>\"\n-  [(set (match_operand:VF_AVX512VL 0 \"register_operand\")\n-\t(vec_merge:VF_AVX512VL\n-\t  (fma:VF_AVX512VL\n-\t    (match_operand:VF_AVX512VL 2 \"vector_operand\")\n-\t    (match_operand:VF_AVX512VL 3 \"vector_operand\")\n-\t    (match_operand:VF_AVX512VL 4 \"vector_operand\"))\n-\t  (match_operand:VF_AVX512VL 5 \"nonimm_or_0_operand\")\n+  [(set (match_operand:VFH_AVX512VL 0 \"register_operand\")\n+\t(vec_merge:VFH_AVX512VL\n+\t  (fma:VFH_AVX512VL\n+\t    (match_operand:VFH_AVX512VL 2 \"vector_operand\")\n+\t    (match_operand:VFH_AVX512VL 3 \"vector_operand\")\n+\t    (match_operand:VFH_AVX512VL 4 \"vector_operand\"))\n+\t  (match_operand:VFH_AVX512VL 5 \"nonimm_or_0_operand\")\n \t  (match_operand:<avx512fmaskmode> 1 \"register_operand\")))]\n   \"TARGET_AVX512F\"\n {\n@@ -4937,14 +4937,14 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"cond_fms<mode>\"\n-  [(set (match_operand:VF_AVX512VL 0 \"register_operand\")\n-\t(vec_merge:VF_AVX512VL\n-\t  (fma:VF_AVX512VL\n-\t    (match_operand:VF_AVX512VL 2 \"vector_operand\")\n-\t    (match_operand:VF_AVX512VL 3 \"vector_operand\")\n-\t    (neg:VF_AVX512VL\n-\t      (match_operand:VF_AVX512VL 4 \"vector_operand\")))\n-\t  (match_operand:VF_AVX512VL 5 \"nonimm_or_0_operand\")\n+  [(set (match_operand:VFH_AVX512VL 0 \"register_operand\")\n+\t(vec_merge:VFH_AVX512VL\n+\t  (fma:VFH_AVX512VL\n+\t    (match_operand:VFH_AVX512VL 2 \"vector_operand\")\n+\t    (match_operand:VFH_AVX512VL 3 \"vector_operand\")\n+\t    (neg:VFH_AVX512VL\n+\t      (match_operand:VFH_AVX512VL 4 \"vector_operand\")))\n+\t  (match_operand:VFH_AVX512VL 5 \"nonimm_or_0_operand\")\n \t  (match_operand:<avx512fmaskmode> 1 \"register_operand\")))]\n   \"TARGET_AVX512F\"\n {\n@@ -5040,14 +5040,14 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"cond_fnma<mode>\"\n-  [(set (match_operand:VF_AVX512VL 0 \"register_operand\")\n-\t(vec_merge:VF_AVX512VL\n-\t  (fma:VF_AVX512VL\n-\t    (neg:VF_AVX512VL\n-\t      (match_operand:VF_AVX512VL 2 \"vector_operand\"))\n-\t    (match_operand:VF_AVX512VL 3 \"vector_operand\")\n-\t    (match_operand:VF_AVX512VL 4 \"vector_operand\"))\n-\t  (match_operand:VF_AVX512VL 5 \"nonimm_or_0_operand\")\n+  [(set (match_operand:VFH_AVX512VL 0 \"register_operand\")\n+\t(vec_merge:VFH_AVX512VL\n+\t  (fma:VFH_AVX512VL\n+\t    (neg:VFH_AVX512VL\n+\t      (match_operand:VFH_AVX512VL 2 \"vector_operand\"))\n+\t    (match_operand:VFH_AVX512VL 3 \"vector_operand\")\n+\t    (match_operand:VFH_AVX512VL 4 \"vector_operand\"))\n+\t  (match_operand:VFH_AVX512VL 5 \"nonimm_or_0_operand\")\n \t  (match_operand:<avx512fmaskmode> 1 \"register_operand\")))]\n   \"TARGET_AVX512F\"\n {\n@@ -5145,15 +5145,15 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"cond_fnms<mode>\"\n-  [(set (match_operand:VF_AVX512VL 0 \"register_operand\")\n-\t(vec_merge:VF_AVX512VL\n-\t  (fma:VF_AVX512VL\n-\t    (neg:VF_AVX512VL\n-\t      (match_operand:VF_AVX512VL 2 \"vector_operand\"))\n-\t    (match_operand:VF_AVX512VL 3 \"vector_operand\")\n-\t    (neg:VF_AVX512VL\n-\t      (match_operand:VF_AVX512VL 4 \"vector_operand\")))\n-\t  (match_operand:VF_AVX512VL 5 \"nonimm_or_0_operand\")\n+  [(set (match_operand:VFH_AVX512VL 0 \"register_operand\")\n+\t(vec_merge:VFH_AVX512VL\n+\t  (fma:VFH_AVX512VL\n+\t    (neg:VFH_AVX512VL\n+\t      (match_operand:VFH_AVX512VL 2 \"vector_operand\"))\n+\t    (match_operand:VFH_AVX512VL 3 \"vector_operand\")\n+\t    (neg:VFH_AVX512VL\n+\t      (match_operand:VFH_AVX512VL 4 \"vector_operand\")))\n+\t  (match_operand:VFH_AVX512VL 5 \"nonimm_or_0_operand\")\n \t  (match_operand:<avx512fmaskmode> 1 \"register_operand\")))]\n   \"TARGET_AVX512F\"\n {"}, {"sha": "b503b75d548be365fe903ce69dc9a4f09bddde98", "filename": "gcc/testsuite/gcc.target/i386/cond_op_addsubmuldiv__Float16-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0f450e98db5f18d3363679db4cd82961f44642/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmuldiv__Float16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0f450e98db5f18d3363679db4cd82961f44642/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmuldiv__Float16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmuldiv__Float16-1.c?ref=ea0f450e98db5f18d3363679db4cd82961f44642", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=sapphirerapids -DTYPE=_Float16 -fdump-tree-vect\" } */\n+/* { dg-final { scan-tree-dump \".COND_ADD\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \".COND_SUB\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \".COND_MUL\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \".COND_RDIV\" \"vect\" } } */\n+\n+#include \"cond_op_addsubmuldiv_double-1.c\"\n+"}, {"sha": "e8397bbc5b1eb658f70ffcf5e0babec05af8b049", "filename": "gcc/testsuite/gcc.target/i386/cond_op_addsubmuldiv__Float16-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0f450e98db5f18d3363679db4cd82961f44642/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmuldiv__Float16-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0f450e98db5f18d3363679db4cd82961f44642/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmuldiv__Float16-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmuldiv__Float16-2.c?ref=ea0f450e98db5f18d3363679db4cd82961f44642", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mprefer-vector-width=256 -DTYPE=_Float16\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512fp16 } */\n+\n+#define AVX512FP16\n+#include \"cond_op_addsubmuldiv_double-2.c\""}, {"sha": "9ea45d690e229342d9b8a75c5009a56fb4f22d28", "filename": "gcc/testsuite/gcc.target/i386/cond_op_fma__Float16-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0f450e98db5f18d3363679db4cd82961f44642/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_fma__Float16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0f450e98db5f18d3363679db4cd82961f44642/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_fma__Float16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_fma__Float16-1.c?ref=ea0f450e98db5f18d3363679db4cd82961f44642", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=sapphirerapids -DTYPE=_Float16 -fdump-tree-optimized -D__BUILTIN_FMA=__builtin_fmaf16\" } */\n+/* { dg-final { scan-tree-dump-times \".COND_FMA\" 3 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \".COND_FNMA\" 3 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \".COND_FMS\" 3 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \".COND_FNMS\" 3 \"optimized\" } } */\n+/* { dg-final { scan-assembler-times \"vfmadd132ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd132ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub132ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub132ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd231ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd231ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub231ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub231ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd132ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd132ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub132ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub132ph\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+\n+#include \"cond_op_fma_double-1.c\""}, {"sha": "b384ab86b4dd91134531249438a7a853750c54d3", "filename": "gcc/testsuite/gcc.target/i386/cond_op_fma__Float16-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0f450e98db5f18d3363679db4cd82961f44642/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_fma__Float16-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0f450e98db5f18d3363679db4cd82961f44642/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_fma__Float16-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_fma__Float16-2.c?ref=ea0f450e98db5f18d3363679db4cd82961f44642", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mprefer-vector-width=256 -DTYPE=_Float16 -D__BUILTIN_FMA=__builtin_fmaf16 -DNUM=100\" } */\n+/* { dg-require-effective-target avx512fp16 } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#define AVX512FP16\n+#include \"cond_op_fma_double-2.c\""}, {"sha": "b09410248f0ce872906fbc7c0637b117c9027b77", "filename": "gcc/testsuite/gcc.target/i386/cond_op_maxmin__Float16-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0f450e98db5f18d3363679db4cd82961f44642/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_maxmin__Float16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0f450e98db5f18d3363679db4cd82961f44642/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_maxmin__Float16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_maxmin__Float16-1.c?ref=ea0f450e98db5f18d3363679db4cd82961f44642", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=sapphirerapids -DTYPE=_Float16 -fdump-tree-optimized -DFN_MAX=__builtin_fmaxf16 -DFN_MIN=__builtin_fminf16\" } */\n+/* { dg-final { scan-tree-dump \".COND_MAX\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \".COND_MIN\" \"optimized\" } } */\n+/* { dg-final { scan-assembler-times \"vmaxph\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vminph\"  1 } } */\n+\n+#include \"cond_op_maxmin_double-1.c\""}, {"sha": "b07d04405ec708d5b350cc5760c10590c3be43ab", "filename": "gcc/testsuite/gcc.target/i386/cond_op_maxmin__Float16-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0f450e98db5f18d3363679db4cd82961f44642/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_maxmin__Float16-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0f450e98db5f18d3363679db4cd82961f44642/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_maxmin__Float16-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_maxmin__Float16-2.c?ref=ea0f450e98db5f18d3363679db4cd82961f44642", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -mprefer-vector-width=256 -DTYPE=_Float16 -DFN_MAX=__builtin_fmaxf16 -DFN_MIN=__builtin_fminf16 -ffast-math\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512fp16 } */\n+\n+#define AVX512FP16\n+#include \"cond_op_maxmin_double-2.c\""}]}