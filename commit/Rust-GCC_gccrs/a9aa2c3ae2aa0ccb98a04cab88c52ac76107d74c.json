{"sha": "a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTlhYTJjM2FlMmFhMGNjYjk4YTA0Y2FiODhjNTJhYzc2MTA3ZDc0Yw==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-11-20T18:50:00Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-11-20T18:50:00Z"}, "message": "re PR c++/16189 (obfuscated error message for missing semicolon after declaration in C++)\n\ngcc/c-family/\n\tPR c++/16189\n\tPR c++/36888\n\tPR c++/45331\n\t* c-common.h (keyword_begins_type_specifier): Declare.\n\t(keyword_is_storage_class_specifier): Declare.\n\t(keyword_is_type_qualifier): Declare.\n\t* c-common.c (keyword_begins_type_specifier): New function.\n\t(keyword_is_storage_class_specifier): New function.\n\t(keyword_is_type_qualifier): Declare.\n\ngcc/cp/\n\tPR c++/16189\n\tPR c++/36888\n\tPR c++/45331\n\t* parser.c (cp_lexer_set_token_position): New function.\n\t(cp_lexer_previous_token_position): New function.\n\t(cp_lexer_previous_token): Call it.\n\t(cp_parser_class_specifier): Try to gracefully handle a missing\n\tsemicolon.\n\ngcc/testsuite/\n\tPR c++/16189\n\tPR c++/36888\n\tPR c++/45331\n\t* g++.dg/parse/semicolon3.C: New test.\n\t* g++.dg/debug/pr22514.C: Adjust.\n\t* g++.dg/init/error1.C: Adjust.\n\t* g++.dg/other/bitfield3.C: Adjust.\n\t* g++.dg/other/semicolon.C: Adjust.\n\t* g++.dg/parse/error14.C: Adjust.\n\t* g++.dg/parse/error5.C: Adjust.\n\t* g++.dg/parse/parameter-declaration-1.C: Adjust.\n\t* g++.dg/template/pr23510.C: Adjust.\n\t* g++.dg/template/pr39425.C: Adjust.\n\t* g++.old-deja/g++.robertl/eb125.C: Adjust.\n\nFrom-SVN: r166977", "tree": {"sha": "cde7d609f5f7f1969e503442d13c065ed52c7dd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cde7d609f5f7f1969e503442d13c065ed52c7dd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/comments", "author": null, "committer": null, "parents": [{"sha": "c1775967e3898cba767bd4452383a04c18c86623", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1775967e3898cba767bd4452383a04c18c86623", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1775967e3898cba767bd4452383a04c18c86623"}], "stats": {"total": 501, "additions": 469, "deletions": 32}, "files": [{"sha": "f10fde75fac92a9665cc9a39c5c73180dd0a3cdf", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c", "patch": "@@ -1,3 +1,15 @@\n+2010-11-20  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\tPR c++/16189\n+\tPR c++/36888\n+\tPR c++/45331\n+\t* c-common.h (keyword_begins_type_specifier): Declare.\n+\t(keyword_is_storage_class_specifier): Declare.\n+\t(keyword_is_type_qualifier): Declare.\n+\t* c-common.c (keyword_begins_type_specifier): New function.\n+\t(keyword_is_storage_class_specifier): New function.\n+\t(keyword_is_type_qualifier): Declare.\n+\n 2010-11-19  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/46547"}, {"sha": "8b2fd601bdd12d379f1f939420d6d3b3a7b23381", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c", "patch": "@@ -9461,4 +9461,82 @@ make_tree_vector_copy (const VEC(tree,gc) *orig)\n   return ret;\n }\n \n+/* Return true if KEYWORD starts a type specifier.  */\n+\n+bool\n+keyword_begins_type_specifier (enum rid keyword)\n+{\n+  switch (keyword)\n+    {\n+    case RID_INT:\n+    case RID_CHAR:\n+    case RID_FLOAT:\n+    case RID_DOUBLE:\n+    case RID_VOID:\n+    case RID_INT128:\n+    case RID_UNSIGNED:\n+    case RID_LONG:\n+    case RID_SHORT:\n+    case RID_SIGNED:\n+    case RID_DFLOAT32:\n+    case RID_DFLOAT64:\n+    case RID_DFLOAT128:\n+    case RID_FRACT:\n+    case RID_ACCUM:\n+    case RID_BOOL:\n+    case RID_WCHAR:\n+    case RID_CHAR16:\n+    case RID_CHAR32:\n+    case RID_SAT:\n+    case RID_COMPLEX:\n+    case RID_TYPEOF:\n+    case RID_STRUCT:\n+    case RID_CLASS:\n+    case RID_UNION:\n+    case RID_ENUM:\n+      return true;\n+    default:\n+      return false;\n+    }\n+}\n+\n+/* Return true if KEYWORD names a type qualifier.  */\n+\n+bool\n+keyword_is_type_qualifier (enum rid keyword)\n+{\n+  switch (keyword)\n+    {\n+    case RID_CONST:\n+    case RID_VOLATILE:\n+    case RID_RESTRICT:\n+      return true;\n+    default:\n+      return false;\n+    }\n+}\n+\n+/* Return true if KEYWORD names a storage class specifier.\n+\n+   RID_TYPEDEF is not included in this list despite `typedef' being\n+   listed in C99 6.7.1.1.  6.7.1.3 indicates that `typedef' is listed as\n+   such for syntactic convenience only.  */\n+\n+bool\n+keyword_is_storage_class_specifier (enum rid keyword)\n+{\n+  switch (keyword)\n+    {\n+    case RID_STATIC:\n+    case RID_EXTERN:\n+    case RID_REGISTER:\n+    case RID_AUTO:\n+    case RID_MUTABLE:\n+    case RID_THREAD:\n+      return true;\n+    default:\n+      return false;\n+    }\n+}\n+\n #include \"gt-c-family-c-common.h\""}, {"sha": "0e603303d2c7d68f810e7d8c48f12d45b4dc8d80", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c", "patch": "@@ -737,6 +737,10 @@ extern void set_float_const_decimal64 (void);\n extern void clear_float_const_decimal64 (void);\n extern bool float_const_decimal64_p (void);\n \n+extern bool keyword_begins_type_specifier (enum rid);\n+extern bool keyword_is_storage_class_specifier (enum rid);\n+extern bool keyword_is_type_qualifier (enum rid);\n+\n #define c_sizeof(LOC, T)  c_sizeof_or_alignof_type (LOC, T, true, 1)\n #define c_alignof(LOC, T) c_sizeof_or_alignof_type (LOC, T, false, 1)\n "}, {"sha": "8d3b7770b4a9846bf060216743c8524412aface0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c", "patch": "@@ -1,3 +1,14 @@\n+2010-11-20  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\tPR c++/16189\n+\tPR c++/36888\n+\tPR c++/45331\n+\t* parser.c (cp_lexer_set_token_position): New function.\n+\t(cp_lexer_previous_token_position): New function.\n+\t(cp_lexer_previous_token): Call it.\n+\t(cp_parser_class_specifier): Try to gracefully handle a missing\n+\tsemicolon.\n+\n 2010-11-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/46538"}, {"sha": "14961ce3ee946b386bb21a16badfbb03d4ca45c5", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 109, "deletions": 5, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c", "patch": "@@ -502,15 +502,25 @@ cp_lexer_token_at (cp_lexer *lexer ATTRIBUTE_UNUSED, cp_token_position pos)\n   return pos;\n }\n \n-static inline cp_token *\n-cp_lexer_previous_token (cp_lexer *lexer)\n+static inline void\n+cp_lexer_set_token_position (cp_lexer *lexer, cp_token_position pos)\n {\n-  cp_token_position tp;\n+  lexer->next_token = cp_lexer_token_at (lexer, pos);\n+}\n \n+static inline cp_token_position\n+cp_lexer_previous_token_position (cp_lexer *lexer)\n+{\n   if (lexer->next_token == &eof_token)\n-    tp = lexer->last_token - 1;\n+    return lexer->last_token - 1;\n   else\n-    tp = cp_lexer_token_position (lexer, true);\n+    return cp_lexer_token_position (lexer, true);\n+}\n+\n+static inline cp_token *\n+cp_lexer_previous_token (cp_lexer *lexer)\n+{\n+  cp_token_position tp = cp_lexer_previous_token_position (lexer);\n \n   return cp_lexer_token_at (lexer, tp);\n }\n@@ -16860,6 +16870,100 @@ cp_parser_class_specifier (cp_parser* parser)\n     type = finish_struct (type, attributes);\n   if (nested_name_specifier_p)\n     pop_inner_scope (old_scope, scope);\n+\n+  /* We've finished a type definition.  Check for the common syntax\n+     error of forgetting a semicolon after the definition.  We need to\n+     be careful, as we can't just check for not-a-semicolon and be done\n+     with it; the user might have typed:\n+\n+     class X { } c = ...;\n+     class X { } *p = ...;\n+\n+     and so forth.  Instead, enumerate all the possible tokens that\n+     might follow this production; if we don't see one of them, then\n+     complain and silently insert the semicolon.  */\n+  {\n+    cp_token *token = cp_lexer_peek_token (parser->lexer);\n+    bool want_semicolon = true;\n+\n+    switch (token->type)\n+      {\n+      case CPP_NAME:\n+      case CPP_SEMICOLON:\n+      case CPP_MULT:\n+      case CPP_AND:\n+      case CPP_OPEN_PAREN:\n+      case CPP_CLOSE_PAREN:\n+      case CPP_COMMA:\n+        want_semicolon = false;\n+        break;\n+\n+        /* While it's legal for type qualifiers and storage class\n+           specifiers to follow type definitions in the grammar, only\n+           compiler testsuites contain code like that.  Assume that if\n+           we see such code, then what we're really seeing is a case\n+           like:\n+\n+           class X { }\n+           const <type> var = ...;\n+\n+           or\n+\n+           class Y { }\n+           static <type> func (...) ...\n+\n+           i.e. the qualifier or specifier applies to the next\n+           declaration.  To do so, however, we need to look ahead one\n+           more token to see if *that* token is a type specifier.\n+\n+\t   This code could be improved to handle:\n+\n+\t   class Z { }\n+\t   static const <type> var = ...;  */\n+      case CPP_KEYWORD:\n+\tif (keyword_is_storage_class_specifier (token->keyword)\n+\t    || keyword_is_type_qualifier (token->keyword))\n+\t  {\n+\t    cp_token *lookahead = cp_lexer_peek_nth_token (parser->lexer, 2);\n+\n+\t    if (lookahead->type == CPP_KEYWORD\n+\t\t&& !keyword_begins_type_specifier (lookahead->keyword))\n+\t      want_semicolon = false;\n+\t    else if (lookahead->type == CPP_NAME)\n+\t      /* Handling user-defined types here would be nice, but\n+\t\t very tricky.  */\n+\t      want_semicolon = false;\n+\t  }\n+\tbreak;\n+      default:\n+\tbreak;\n+      }\n+\n+    if (want_semicolon)\n+      {\n+\tcp_token_position prev\n+\t  = cp_lexer_previous_token_position (parser->lexer);\n+\tcp_token *prev_token = cp_lexer_token_at (parser->lexer, prev);\n+\tlocation_t loc = prev_token->location;\n+\n+\tif (CLASSTYPE_DECLARED_CLASS (type))\n+\t  error_at (loc, \"expected %<;%> after class definition\");\n+\telse if (TREE_CODE (type) == RECORD_TYPE)\n+\t  error_at (loc, \"expected %<;%> after struct definition\");\n+\telse if (TREE_CODE (type) == UNION_TYPE)\n+\t  error_at (loc, \"expected %<;%> after union definition\");\n+\telse\n+\t  gcc_unreachable ();\n+\n+\t/* Unget one token and smash it to look as though we encountered\n+\t   a semicolon in the input stream.  */\n+\tcp_lexer_set_token_position (parser->lexer, prev);\n+\ttoken = cp_lexer_peek_token (parser->lexer);\n+\ttoken->type = CPP_SEMICOLON;\n+\ttoken->keyword = RID_MAX;\n+      }\n+  }\n+\n   /* If this class is not itself within the scope of another class,\n      then we need to parse the bodies of all of the queued function\n      definitions.  Note that the queued functions defined in a class"}, {"sha": "fb02c954029ed0763dc512483274dd691b95b472", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c", "patch": "@@ -1,3 +1,20 @@\n+2010-11-20  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\tPR c++/16189\n+\tPR c++/36888\n+\tPR c++/45331\n+\t* g++.dg/parse/semicolon3.C: New test.\n+\t* g++.dg/debug/pr22514.C: Adjust.\n+\t* g++.dg/init/error1.C: Adjust.\n+\t* g++.dg/other/bitfield3.C: Adjust.\n+\t* g++.dg/other/semicolon.C: Adjust.\n+\t* g++.dg/parse/error14.C: Adjust.\n+\t* g++.dg/parse/error5.C: Adjust.\n+\t* g++.dg/parse/parameter-declaration-1.C: Adjust.\n+\t* g++.dg/template/pr23510.C: Adjust.\n+\t* g++.dg/template/pr39425.C: Adjust.\n+\t* g++.old-deja/g++.robertl/eb125.C: Adjust.\n+\n 2010-11-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/46561"}, {"sha": "ed31cc7a103126531681178b2c6864eeaa3cf217", "filename": "gcc/testsuite/g++.dg/debug/pr22514.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr22514.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr22514.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr22514.C?ref=a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c", "patch": "@@ -8,6 +8,6 @@ namespace s\n   template<int i> struct list : _List_base<i>\n   {\n     using _List_base<i>::_M_impl;\n-  }\n-}  /* { dg-error \"expected unqualified-id before '\\}'\" } */\n+  } // { dg-error \"after struct definition\" }\n+}\n s::list<1> OutputModuleListType;"}, {"sha": "bdd983f9665756920061dc4945a994a20c173de7", "filename": "gcc/testsuite/g++.dg/init/error1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Ferror1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Ferror1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Ferror1.C?ref=a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c", "patch": "@@ -2,6 +2,6 @@\n \n struct A {\n   static float b[10];\n-}\n+} // { dg-error \"after struct definition\" }\n \n-float A::b[] = {1,2,3}; // { dg-error \"\" }\n+float A::b[] = {1,2,3};"}, {"sha": "befd7f817213e426bcfa2599c0ca1704de94a93b", "filename": "gcc/testsuite/g++.dg/other/bitfield3.C", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fbitfield3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fbitfield3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fbitfield3.C?ref=a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c", "patch": "@@ -3,13 +3,15 @@\n \n template<int> struct A\n {\n-  struct {} : 2;\t// { dg-error \"with non-integral type\" }\n+  // multiple errors below: missing semicolon, no anonymous structs, etc.\n+  struct {} : 2;\t// { dg-error \"\" }\n };\n \n template<int> struct B\n {\n   int a;\n-  struct {} : 2;\t// { dg-error \"with non-integral type\" }\n+  // multiple errors below: missing semicolon, no anonymous structs, etc.\n+  struct {} : 2;\t// { dg-error \"\" }\n   int b;\n };\n "}, {"sha": "8797bd32f310dc592f5b2c334b97be558796a80e", "filename": "gcc/testsuite/g++.dg/other/semicolon.C", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fsemicolon.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fsemicolon.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fsemicolon.C?ref=a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c", "patch": "@@ -5,7 +5,6 @@\n \n struct A\n {\n-  struct B { int i; } // { dg-error \"3:new types may not be defined in a return type\" }\n-                      // { dg-message \"perhaps a semicolon is missing\" \"note\" { target *-*-* } 8 }\n-  void foo();   // { dg-error \"12:two or more\" }\n+  struct B { int i; } // { dg-error \"after struct definition\" }\n+  void foo();\n };"}, {"sha": "37abe37562a276fa927c10f9b8c5a3d23c6dcd9d", "filename": "gcc/testsuite/g++.dg/parse/error14.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror14.C?ref=a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c", "patch": "@@ -21,6 +21,6 @@ struct X\n \n }; // { dg-error \"2:expected '.' at end of input\" \"at end of input\" }\n    // { dg-error \"1:expected primary-expression before '.' token\" \"primary\" { target *-*-* } 22 }\n-   // { dg-error \"1:expected ';' before '.' token\" \"semicolon\" { target *-*-* } 22 }\n-   // { dg-error \"1:expected unqualified-id at end of input\" \"unqual\" { target *-*-* } 22 }\n+   // { dg-error \"2:expected ';' after struct definition\" \"semicolon\" { target *-*-* } 22 }\n+   // { dg-error \"1:expected ';' before '.' token\" \"function\" { target *-*-* } 22 }\n "}, {"sha": "eb1f9c730a839f9a22e9771a29c5714c26a46320", "filename": "gcc/testsuite/g++.dg/parse/error5.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror5.C?ref=a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c", "patch": "@@ -3,17 +3,17 @@\n \n class Foo { int foo() return 0; } };\n \n-// { dg-error \"30:expected identifier before numeric constant\" \"\" { target *-*-* } 4 }\n+// { dg-error \"30:expected identifier before numeric constant\" \"identifier\" { target *-*-* } 4 }\n \n-// { dg-error \"23:named return values are no longer supported\" \"\" { target *-*-* } 4 }\n+// { dg-error \"23:named return values are no longer supported\" \"named return\" { target *-*-* } 4 }\n \n // the column number info of this error output is still wrong because the error\n // message has been generated by cp_parser_error() which does not\n // necessarily allow accurate column number display. At some point, we will\n // need make cp_parser_error() report more accurate column numbers.\n-// { dg-error \"30:expected '\\{' at end of input\" \"\" { target *-*-* } 4 }\n+// { dg-error \"30:expected '\\{' at end of input\" \"brace\" { target *-*-* } 4 }\n \n-// { dg-error \"35:expected unqualified-id before '\\}' token\" \"\" {target *-*-* } 4 }\n+// { dg-error \"33:expected ';' after class definition\" \"semicolon\" {target *-*-* } 4 }\n \n-// { dg-error \"35:expected declaration before '\\}' token\" \"\" {target *-*-* } 4 }\n+// { dg-error \"35:expected declaration before '\\}' token\" \"declaration\" {target *-*-* } 4 }\n "}, {"sha": "58f679944e21cf80049396eb5a9080ca2a103380", "filename": "gcc/testsuite/g++.dg/parse/parameter-declaration-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparameter-declaration-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparameter-declaration-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparameter-declaration-1.C?ref=a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c", "patch": "@@ -2,5 +2,5 @@\n // Origin: Robert Schiele; PR C++/8799\n // { dg-do compile }\n \n-struct {\n+struct {\t\t\t// { dg-error \"\" }\n    a(void = 0; a(0), a(0)\t// { dg-error \"\" \"\" { target *-*-* } }"}, {"sha": "a119ef4e0b354413f64741ec5b0e66f83930ba7d", "filename": "gcc/testsuite/g++.dg/parse/semicolon3.C", "status": "added", "additions": 210, "deletions": 0, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsemicolon3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsemicolon3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsemicolon3.C?ref=a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c", "patch": "@@ -0,0 +1,210 @@\n+// PR c++/45331\n+// { dg-do compile }\n+\n+struct OK1\n+{\n+  int a;\n+} // no complaints\n+  *s5;\n+\n+struct OK2\n+{\n+  int a;\n+} // no complaints\n+  &s6 = *(new OK2());\n+\n+struct OK3\n+{\n+  int a;\n+} // no complaints\n+  (s7);\n+\n+__SIZE_TYPE__\n+test_offsetof (void)\n+{\n+  // no complaints about a missing semicolon\n+  return __builtin_offsetof (struct OK4 { int a; int b; }, b);\n+}\n+\n+struct OK5\n+{\n+  int a;\n+} ok5_var;\t\t\t// no complaints\n+\n+struct OK6\n+{\n+  int a;\n+} static ok6_var;\t\t// no complaints\n+\n+class OK7\n+{\n+public:\n+  OK7() { };\n+  int a;\n+} const ok7_var;\t\t// no complaints\n+\n+class OK8\n+{\n+  int a;\n+} extern ok8_var;\t\t// no complaints\n+\n+class OK9\n+{\n+  class OK9sub { int a; } mutable ok9sub; // no complaints\n+  int a;\n+};\n+\n+int\n+autotest (void)\n+{\n+  struct OK10 { int a; } auto ok10 = { 0 }; // no complaints\n+\n+  return ok10.a;\n+}\n+\n+struct E1\n+{\n+  int a;\n+} // { dg-error \"after struct definition\" }\n+\n+typedef float BAR;\n+\n+struct E2\n+{\n+  int a;\n+} // { dg-error \"after struct definition\" }\n+\n+const int i0 = 1;\n+\n+struct E3\n+{\n+  int a;\n+} // { dg-error \"after struct definition\" }\n+\n+volatile long l0 = 1;\n+\n+struct E4\n+{\n+  int a;\n+} // { dg-error \"after struct definition\" }\n+\n+extern char c0;\n+\n+struct E5\n+{\n+  int a;\n+} // { dg-error \"after struct definition\" }\n+\n+static wchar_t wc0;\n+\n+struct E6\n+{\n+  int a;\n+} // { dg-error \"after struct definition\" }\n+\n+bool b0;\n+\n+class E7\n+{\n+  int a;\n+} // { dg-error \"after class definition\" }\n+\n+extern double d0;\n+\n+class E8\n+{\n+  int a;\n+} // { dg-error \"after class definition\" }\n+\n+inline short f(void)\n+{\n+  return 2;\n+}\n+\n+class E9\n+{\n+  int a;\n+} // { dg-error \"after class definition\" }\n+\n+class D0\n+{\n+  int a;\n+};\n+\n+class E10\n+{\n+  int a;\n+} // { dg-error \"after class definition\" }\n+\n+extern class D0 &f0 (void);\n+\n+class E11\n+{\n+  int a;\n+} // { dg-error \"after class definition\" }\n+\n+const struct E6 *f1 (void) { return 0; }\n+\n+union U0 {\n+  int i;\n+  double d;\n+};\n+\n+class E12\n+{\n+  int a;\n+} // { dg-error \"after class definition\" }\n+\n+const union U0 *f2 (void) { return 0; }\n+\n+enum e {\n+  U, V\n+};\n+\n+class E13\n+{\n+  int a;\n+} // { dg-error \"after class definition\" }\n+\n+static enum e f3 (void) { return U; }\n+\n+union E14\n+{\n+  int i;\n+  double d;\n+} // { dg-error \"after union definition\" }\n+\n+unsigned int i1 = 2;\n+\n+union E15\n+{\n+  int i;\n+  double d;\n+} // { dg-error \"after union definition\" }\n+\n+signed long l1 = 3;\n+\n+class E16\n+{\n+  class sub0 { int a; }\t\t// { dg-error \"after class definition\" }\n+    virtual int f2 (void);\n+} // { dg-error \"after class definition\" }\n+\n+class E17\n+{\n+  class sub0 { int a; }\t\t// { dg-error \"after class definition\" }\n+    mutable int i;\n+} // { dg-error \"after class definition\" }\n+\n+/* This was the original test from the PR.  */\n+\n+class C0\n+{\n+public:\n+ int a;\n+} // { dg-error \"after class definition\" }\n+\n+const int foo(const C0 &x)\n+{\n+ return x.a;\n+}"}, {"sha": "1c3180f8331fdcf9b8596b7f209350959ed8b884", "filename": "gcc/testsuite/g++.dg/template/pr23510.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr23510.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr23510.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr23510.C?ref=a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c", "patch": "@@ -6,13 +6,13 @@ struct Factorial\n   enum { nValue = nFactor * Factorial<nFactor - 1>::nValue }; // { dg-error \"depth exceeds maximum\" } \n   // { dg-message \"recursively instantiated\" \"\" { target *-*-* } 6 } \n   // { dg-error \"incomplete type\" \"\" { target *-*-* } 6 } \n-} \n+} // { dg-error \"expected ';' after\" }\n \n-  template<> // { dg-error \"expected\" } \n+  template<>\n   struct Factorial<0>\n   {\n     enum { nValue = 1 };\n-  }\n+  };\n \n     static const unsigned int FACTOR = 20;\n "}, {"sha": "d55f547e25350a3eb8edc959a275f8d367b4a4df", "filename": "gcc/testsuite/g++.dg/template/pr39425.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr39425.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr39425.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr39425.C?ref=a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c", "patch": "@@ -15,4 +15,4 @@ class a {\n \n   static const unsigned int value = _rec < 1 >::size;\n \n-}\t\t// { dg-error \"unqualified-id\" }\n+} // { dg-error \"after class definition\" }"}, {"sha": "f2352c2221659cf48e8ad85c409d58374b7c1cf9", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb125.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb125.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb125.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb125.C?ref=a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c", "patch": "@@ -10,13 +10,13 @@ void test<class BOX> (test_box *);   // { dg-error \"\" } illegal code\n class test_square\n     {\n       friend void test<class BOX> (test_box *); // { dg-error \"\" } does not match\n-    }\n+    }\t\t\t\t\t\t// { dg-error \"after class definition\" }\n \n \n \n-template <class BOX> void test(BOX *the_box)  // { dg-error \"\" } semicolon missing\n-    {x\n-    the_box->print();\n-    };\n+template <class BOX> void test(BOX *the_box)\n+    {x\t\t\t\t// { dg-error \"not declared in this scope\" }\n+    the_box->print();\t\t// { dg-error \"before\" }\n+    }\n \n-template void test<> (test_box *); // { dg-error \"\" }\n+template void test<> (test_box *);"}]}