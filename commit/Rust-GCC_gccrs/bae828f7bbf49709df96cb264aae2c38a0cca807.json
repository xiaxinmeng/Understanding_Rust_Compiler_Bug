{"sha": "bae828f7bbf49709df96cb264aae2c38a0cca807", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFlODI4ZjdiYmY0OTcwOWRmOTZjYjI2NGFhZTJjMzhhMGNjYTgwNw==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-10-05T10:36:36Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-10-11T13:57:35Z"}, "message": "testsuite, Objective-C : Adjust gnu-api tests for Darwin.\n\nThe GNU v2 API matches the next v2 API in most respects.\n\nHowever, some of the tests depend on access to items that the\nlater NeXT headers consider to be 'internal implementation details'\nand are not exposed (we arrange that with a DEFINE).\n\nOne test is skipped here because, although it works internally, the\nnumber of objects returned is larger for the NeXT runtime in some\ncases (where the headers have been updated to bring in more of the\nsystem details).\n\ngcc/testsuite/ChangeLog:\n\n\t* objc.dg/gnu-api-2-class-meta.m: Add a flag to cause NeXT\n\theaders to expose prototypes for messaging. Mark the root\n\tclass if the objc_root_class attribute is available. Use\n\tchar ** as the second arg to main.\n\t* objc.dg/gnu-api-2-class.m: Use dispatch prototype.\n\t* objc.dg/gnu-api-2-objc.m: Skip on NeXT because of extra\n\tprototypes pulled in by headers.", "tree": {"sha": "62fe34186d56a89ddff9c25a8e312d5bd17dcef5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62fe34186d56a89ddff9c25a8e312d5bd17dcef5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bae828f7bbf49709df96cb264aae2c38a0cca807", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae828f7bbf49709df96cb264aae2c38a0cca807", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bae828f7bbf49709df96cb264aae2c38a0cca807", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae828f7bbf49709df96cb264aae2c38a0cca807/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2ac4fc035b327ab8ccf562a7667f6d13758c72b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ac4fc035b327ab8ccf562a7667f6d13758c72b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2ac4fc035b327ab8ccf562a7667f6d13758c72b"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "3a85b163c91376151baf4f7c3fb587288033615e", "filename": "gcc/testsuite/objc.dg/gnu-api-2-class-meta.m", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae828f7bbf49709df96cb264aae2c38a0cca807/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-class-meta.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae828f7bbf49709df96cb264aae2c38a0cca807/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-class-meta.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-class-meta.m?ref=bae828f7bbf49709df96cb264aae2c38a0cca807", "patch": "@@ -20,6 +20,7 @@ this behavior may be defined or documented (for example, if class\n /* { dg-do run } */\n /* { dg-skip-if \"No API#2 pre-Darwin9\" { *-*-darwin[5-8]* } { \"-fnext-runtime\" } { \"\" } } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-additional-options \"-DOBJC_OLD_DISPATCH_PROTOTYPES\" { target { *-*-darwin* } } } */\n \n /* To get the modern GNU Objective-C Runtime API, you include\n    objc/runtime.h.  */\n@@ -28,6 +29,9 @@ this behavior may be defined or documented (for example, if class\n #include <stdio.h>\n #include <string.h>\n \n+#if __has_attribute(objc_root_class)\n+__attribute__((objc_root_class))\n+#endif\n @interface MyRootClass\n { Class isa; }\n + alloc;\n@@ -65,7 +69,7 @@ @interface MySubClass (MySelf)\n + (id) mySelf;\n @end\n \n-int main(int argc, void **args)\n+int main(int argc, char **args)\n {\n   /* Functions are tested in alphabetical order.  */\n "}, {"sha": "eade0dcbbfa127354cab489466d78f5af1bff902", "filename": "gcc/testsuite/objc.dg/gnu-api-2-class.m", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae828f7bbf49709df96cb264aae2c38a0cca807/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-class.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae828f7bbf49709df96cb264aae2c38a0cca807/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-class.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-class.m?ref=bae828f7bbf49709df96cb264aae2c38a0cca807", "patch": "@@ -7,6 +7,7 @@\n /* { dg-do run } */\n /* { dg-skip-if \"No API#2 pre-Darwin9\" { *-*-darwin[5-8]* } { \"-fnext-runtime\" } { \"\" } } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-additional-options \"-DOBJC_OLD_DISPATCH_PROTOTYPES\" { target { *-*-darwin* } } } */\n \n /* To get the modern GNU Objective-C Runtime API, you include\n    objc/runtime.h.  */"}, {"sha": "1b4ce8e4799350b4a6acc85495b9b59792d661f8", "filename": "gcc/testsuite/objc.dg/gnu-api-2-objc.m", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae828f7bbf49709df96cb264aae2c38a0cca807/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-objc.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae828f7bbf49709df96cb264aae2c38a0cca807/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-objc.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-objc.m?ref=bae828f7bbf49709df96cb264aae2c38a0cca807", "patch": "@@ -3,8 +3,12 @@\n   This is test 'objc', covering all functions starting with 'objc'.  */\n \n /* { dg-do run } */\n-/* { dg-skip-if \"No API#2 pre-Darwin9\" { *-*-darwin[5-8]* } { \"-fnext-runtime\" } { \"\" } } */\n-/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+/* Although this works with the NeXT runtime in a sub-set of cases, some\n+   versions of the runtime header pulls in a number of system protocols,\n+   which causes the objc_copyProtocolList test to fail (in addition to those\n+   systems that don't have the V2 APis).  XFAILing the run is not useful\n+   since it will XPASS on the sub-set that works.  */\n+/* { dg-skip-if \"Incompatible\" { *-*-darwin* } { \"-fnext-runtime\" } { \"\" } } */\n \n /* To get the modern GNU Objective-C Runtime API, you include\n    objc/runtime.h.  */"}]}