{"sha": "6a9678f0b30d36ae13259ad635e175a1e24917a1", "node_id": "C_kwDOANBUbNoAKDZhOTY3OGYwYjMwZDM2YWUxMzI1OWFkNjM1ZTE3NWExZTI0OTE3YTE", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-04T11:37:16Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-04T14:39:03Z"}, "message": "path solver: Prefer range_of_expr instead of range_on_edge.\n\nThe range_of_expr method provides better caching than range_on_edge.\nIf we have a statement, we can just it and avoid the range_on_edge\ndance.  Plus we can use all the range_of_expr fanciness.\n\nTested on x86-64 and ppc64le Linux with the usual regstrap.  I also\nverified that the before and after number of threads was the same or\ngreater in a suite of .ii files from a bootstrap.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/102943\n\t* gimple-range-path.cc (path_range_query::range_on_path_entry):\n\tPrefer range_of_expr unless there are no statements in the BB.", "tree": {"sha": "3d3b98db4993ceee95c316a466f68c70ce95ae84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d3b98db4993ceee95c316a466f68c70ce95ae84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a9678f0b30d36ae13259ad635e175a1e24917a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a9678f0b30d36ae13259ad635e175a1e24917a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a9678f0b30d36ae13259ad635e175a1e24917a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a9678f0b30d36ae13259ad635e175a1e24917a1/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4411622690654cdc530c6262c7115a9e15dc359", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4411622690654cdc530c6262c7115a9e15dc359", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4411622690654cdc530c6262c7115a9e15dc359"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "9175651e89624b19050af779b424bc68840edd1a", "filename": "gcc/gimple-range-path.cc", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a9678f0b30d36ae13259ad635e175a1e24917a1/gcc%2Fgimple-range-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a9678f0b30d36ae13259ad635e175a1e24917a1/gcc%2Fgimple-range-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.cc?ref=6a9678f0b30d36ae13259ad635e175a1e24917a1", "patch": "@@ -135,10 +135,24 @@ void\n path_range_query::range_on_path_entry (irange &r, tree name)\n {\n   gcc_checking_assert (defined_outside_path (name));\n-  int_range_max tmp;\n   basic_block entry = entry_bb ();\n-  bool changed = false;\n \n+  // Prefer to use range_of_expr if we have a statement to look at,\n+  // since it has better caching than range_on_edge.\n+  gimple *last = last_stmt (entry);\n+  if (last)\n+    {\n+      if (m_ranger.range_of_expr (r, name, last))\n+\treturn;\n+      gcc_unreachable ();\n+    }\n+\n+  // If we have no statement, look at all the incoming ranges to the\n+  // block.  This can happen when we're querying a block with only an\n+  // outgoing edge (no statement but the fall through edge), but for\n+  // which we can determine a range on entry to the block.\n+  int_range_max tmp;\n+  bool changed = false;\n   r.set_undefined ();\n   for (unsigned i = 0; i < EDGE_COUNT (entry->preds); ++i)\n     {"}]}