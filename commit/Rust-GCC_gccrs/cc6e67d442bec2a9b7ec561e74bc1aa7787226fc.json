{"sha": "cc6e67d442bec2a9b7ec561e74bc1aa7787226fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M2ZTY3ZDQ0MmJlYzJhOWI3ZWM1NjFlNzRiYzFhYTc3ODcyMjZmYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-10-18T08:43:17Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-10-18T08:43:17Z"}, "message": "basic_string.tcc (_M_mutate): Do not reallocate unnecessarily when _M_rep() == &_S_empty_rep() and __new_size...\n\n2004-10-18  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/basic_string.tcc (_M_mutate): Do not reallocate\n\tunnecessarily when _M_rep() == &_S_empty_rep() and __new_size\n\t== capacity() (== 0): is ok to just leave everything unchanged.\n\n\t* include/bits/basic_string.h: Minor formatting fixes.\n\t* include/bits/basic_string.tcc: Likewise.\n\nFrom-SVN: r89199", "tree": {"sha": "c41cdc97f934f8682a85a229253ac5c0b3c1a9da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c41cdc97f934f8682a85a229253ac5c0b3c1a9da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc6e67d442bec2a9b7ec561e74bc1aa7787226fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc6e67d442bec2a9b7ec561e74bc1aa7787226fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc6e67d442bec2a9b7ec561e74bc1aa7787226fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc6e67d442bec2a9b7ec561e74bc1aa7787226fc/comments", "author": null, "committer": null, "parents": [{"sha": "7e698b2c89fad6977172fee88c57faa3427c7d4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e698b2c89fad6977172fee88c57faa3427c7d4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e698b2c89fad6977172fee88c57faa3427c7d4b"}], "stats": {"total": 76, "additions": 50, "deletions": 26}, "files": [{"sha": "59284fa3bb26a8880549cf6a2d8bc6bcb8687ee2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6e67d442bec2a9b7ec561e74bc1aa7787226fc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6e67d442bec2a9b7ec561e74bc1aa7787226fc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cc6e67d442bec2a9b7ec561e74bc1aa7787226fc", "patch": "@@ -1,3 +1,12 @@\n+2004-10-18  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/basic_string.tcc (_M_mutate): Do not reallocate\n+\tunnecessarily when _M_rep() == &_S_empty_rep() and __new_size\n+\t== capacity() (== 0): is ok to just leave everything unchanged.\n+\n+\t* include/bits/basic_string.h: Minor formatting fixes.\n+\t* include/bits/basic_string.tcc: Likewise.\n+\n 2004-10-17  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/ext/mt_allocator.h (__pool::_M_get_align): New."}, {"sha": "676f1c534349aab0d3109d4d5d6bad4398831bbf", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6e67d442bec2a9b7ec561e74bc1aa7787226fc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6e67d442bec2a9b7ec561e74bc1aa7787226fc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=cc6e67d442bec2a9b7ec561e74bc1aa7787226fc", "patch": "@@ -271,10 +271,12 @@ namespace std\n       // For the internal use we have functions similar to `begin'/`end'\n       // but they do not call _M_leak.\n       iterator\n-      _M_ibegin() const { return iterator(_M_data()); }\n+      _M_ibegin() const\n+      { return iterator(_M_data()); }\n \n       iterator\n-      _M_iend() const { return iterator(_M_data() + this->size()); }\n+      _M_iend() const\n+      { return iterator(_M_data() + this->size()); }\n \n       void\n       _M_leak()    // for use in begin() & non-const op[]\n@@ -527,16 +529,19 @@ namespace std\n       ///  Returns the number of characters in the string, not including any\n       ///  null-termination.\n       size_type\n-      size() const { return _M_rep()->_M_length; }\n+      size() const\n+      { return _M_rep()->_M_length; }\n \n       ///  Returns the number of characters in the string, not including any\n       ///  null-termination.\n       size_type\n-      length() const { return _M_rep()->_M_length; }\n+      length() const\n+      { return _M_rep()->_M_length; }\n \n       /// Returns the size() of the largest possible %string.\n       size_type\n-      max_size() const { return _Rep::_S_max_size; }\n+      max_size() const\n+      { return _Rep::_S_max_size; }\n \n       /**\n        *  @brief  Resizes the %string to the specified number of characters.\n@@ -562,14 +567,16 @@ namespace std\n        *  setting them to 0.\n        */\n       void\n-      resize(size_type __n) { this->resize(__n, _CharT()); }\n+      resize(size_type __n)\n+      { this->resize(__n, _CharT()); }\n \n       /**\n        *  Returns the total number of characters that the %string can hold\n        *  before needing to allocate more memory.\n        */\n       size_type\n-      capacity() const { return _M_rep()->_M_capacity; }\n+      capacity() const\n+      { return _M_rep()->_M_capacity; }\n \n       /**\n        *  @brief  Attempt to preallocate enough memory for specified number of\n@@ -595,13 +602,15 @@ namespace std\n        *  Erases the string, making it empty.\n        */\n       void\n-      clear() { _M_mutate(0, this->size(), 0); }\n+      clear()\n+      { _M_mutate(0, this->size(), 0); }\n \n       /**\n        *  Returns true if the %string is empty.  Equivalent to *this == \"\".\n        */\n       bool\n-      empty() const { return this->size() == 0; }\n+      empty() const\n+      { return this->size() == 0; }\n \n       // Element access:\n       /**\n@@ -684,23 +693,26 @@ namespace std\n        *  @return  Reference to this string.\n        */\n       basic_string&\n-      operator+=(const basic_string& __str) { return this->append(__str); }\n+      operator+=(const basic_string& __str)\n+      { return this->append(__str); }\n \n       /**\n        *  @brief  Append a C string.\n        *  @param s  The C string to append.\n        *  @return  Reference to this string.\n        */\n       basic_string&\n-      operator+=(const _CharT* __s) { return this->append(__s); }\n+      operator+=(const _CharT* __s)\n+      { return this->append(__s); }\n \n       /**\n        *  @brief  Append a character.\n        *  @param s  The character to append.\n        *  @return  Reference to this string.\n        */\n       basic_string&\n-      operator+=(_CharT __c) { return this->append(size_type(1), __c); }\n+      operator+=(_CharT __c)\n+      { return this->append(size_type(1), __c); }\n \n       /**\n        *  @brief  Append a string to this string.\n@@ -1447,7 +1459,8 @@ namespace std\n        *  happen.\n       */\n       const _CharT*\n-      c_str() const { return _M_data(); }\n+      c_str() const\n+      { return _M_data(); }\n \n       /**\n        *  @brief  Return const pointer to contents.\n@@ -1456,13 +1469,15 @@ namespace std\n        *  happen.\n       */\n       const _CharT*\n-      data() const { return _M_data(); }\n+      data() const\n+      { return _M_data(); }\n \n       /**\n        *  @brief  Return copy of allocator used to construct this string.\n       */\n       allocator_type\n-      get_allocator() const { return _M_dataplus; }\n+      get_allocator() const\n+      { return _M_dataplus; }\n \n       /**\n        *  @brief  Find position of a C substring."}, {"sha": "612cde1c680d113859daaab0579146a2d454a246", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6e67d442bec2a9b7ec561e74bc1aa7787226fc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6e67d442bec2a9b7ec561e74bc1aa7787226fc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=cc6e67d442bec2a9b7ec561e74bc1aa7787226fc", "patch": "@@ -373,7 +373,8 @@ namespace std\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     void\n-    basic_string<_CharT, _Traits, _Alloc>::_M_leak_hard()\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    _M_leak_hard()\n     {\n #ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n       if (_M_rep() == &_S_empty_rep())\n@@ -393,16 +394,11 @@ namespace std\n       const size_type __new_size = __old_size + __len2 - __len1;\n       const size_type __how_much = __old_size - __pos - __len1;\n \n-#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n-      if (_M_rep() == &_S_empty_rep()\n-\t  || _M_rep()->_M_is_shared() || __new_size > capacity())\n-#else\n-      if (_M_rep()->_M_is_shared() || __new_size > capacity())\n-#endif\n+      if (__new_size > this->capacity() || _M_rep()->_M_is_shared())\n \t{\n \t  // Must reallocate.\n \t  const allocator_type __a = get_allocator();\n-\t  _Rep* __r = _Rep::_S_create(__new_size, capacity(), __a);\n+\t  _Rep* __r = _Rep::_S_create(__new_size, this->capacity(), __a);\n \n \t  if (__pos)\n \t    traits_type::copy(__r->_M_refdata(), _M_data(), __pos);\n@@ -427,7 +423,8 @@ namespace std\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     void\n-    basic_string<_CharT, _Traits, _Alloc>::reserve(size_type __res)\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    reserve(size_type __res)\n     {\n       if (__res != this->capacity() || _M_rep()->_M_is_shared())\n         {\n@@ -444,7 +441,9 @@ namespace std\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    void basic_string<_CharT, _Traits, _Alloc>::swap(basic_string& __s)\n+    void\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    swap(basic_string& __s)\n     {\n       if (_M_rep()->_M_is_leaked())\n \t_M_rep()->_M_set_sharable();\n@@ -561,7 +560,8 @@ namespace std\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     void\n-    basic_string<_CharT, _Traits, _Alloc>::resize(size_type __n, _CharT __c)\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    resize(size_type __n, _CharT __c)\n     {\n       if (__n > max_size())\n \t__throw_length_error(__N(\"basic_string::resize\"));"}]}