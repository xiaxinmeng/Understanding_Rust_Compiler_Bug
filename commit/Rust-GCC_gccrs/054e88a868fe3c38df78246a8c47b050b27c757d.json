{"sha": "054e88a868fe3c38df78246a8c47b050b27c757d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU0ZTg4YTg2OGZlM2MzOGRmNzgyNDZhOGM0N2IwNTBiMjdjNzU3ZA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@airs.com", "date": "2005-04-01T16:44:31Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2005-04-01T16:44:31Z"}, "message": "gcc.c: Don't include <sys/resource.h> or declare getrusage.\n\n\t* gcc.c: Don't include <sys/resource.h> or declare getrusage.\n\t(rus, prus): Remove static variables.\n\t(execute): Use pex_run/pex_get_status rather than pexecute/pwait.\n\t(process_command): Permit report_times and use_pipes together.\n\nFrom-SVN: r97406", "tree": {"sha": "e5a5b2031671aebf6ade9f1b71a51156e8475014", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5a5b2031671aebf6ade9f1b71a51156e8475014"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/054e88a868fe3c38df78246a8c47b050b27c757d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/054e88a868fe3c38df78246a8c47b050b27c757d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/054e88a868fe3c38df78246a8c47b050b27c757d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/054e88a868fe3c38df78246a8c47b050b27c757d/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2c83be0cf08fc0b535aec0211f599acc38fa076e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c83be0cf08fc0b535aec0211f599acc38fa076e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c83be0cf08fc0b535aec0211f599acc38fa076e"}], "stats": {"total": 189, "additions": 87, "deletions": 102}, "files": [{"sha": "625c863b4adaf723e7f9bfcd077d8c0f1ef4e310", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/054e88a868fe3c38df78246a8c47b050b27c757d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/054e88a868fe3c38df78246a8c47b050b27c757d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=054e88a868fe3c38df78246a8c47b050b27c757d", "patch": "@@ -1,3 +1,10 @@\n+2005-04-01  Ian Lance Taylor  <ian@airs.com>\n+\n+\t* gcc.c: Don't include <sys/resource.h> or declare getrusage.\n+\t(rus, prus): Remove static variables.\n+\t(execute): Use pex_run/pex_get_status rather than pexecute/pwait.\n+\t(process_command): Permit report_times and use_pipes together.\n+\n 2005-04-01  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* c-decl.c (validate_proto_after_old_defn): Look at"}, {"sha": "31edb0da71707adbd3d8e2fae68f89d92b256ba6", "filename": "gcc/gcc.c", "status": "modified", "additions": 80, "deletions": 102, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/054e88a868fe3c38df78246a8c47b050b27c757d/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/054e88a868fe3c38df78246a8c47b050b27c757d/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=054e88a868fe3c38df78246a8c47b050b27c757d", "patch": "@@ -86,13 +86,6 @@ compilation is specified by a string called a \"spec\".  */\n #include \"gcc.h\"\n #include \"flags.h\"\n \n-#ifdef HAVE_SYS_RESOURCE_H\n-#include <sys/resource.h>\n-#endif\n-#if defined (HAVE_DECL_GETRUSAGE) && !HAVE_DECL_GETRUSAGE\n-extern int getrusage (int, struct rusage *);\n-#endif\n-\n /* By default there is no special suffix for target executables.  */\n /* FIXME: when autoconf is fixed, remove the host check - dj */\n #if defined(TARGET_EXECUTABLE_SUFFIX) && defined(HOST_EXECUTABLE_SUFFIX)\n@@ -283,12 +276,6 @@ static struct obstack obstack;\n \n static struct obstack collect_obstack;\n \n-/* These structs are used to collect resource usage information for\n-   subprocesses.  */\n-#ifdef HAVE_GETRUSAGE\n-static struct rusage rus, prus;\n-#endif\n-\n /* Forward declaration for prototypes.  */\n struct path_prefix;\n struct prefix_list;\n@@ -2653,11 +2640,11 @@ execute (void)\n   int i;\n   int n_commands;\t\t/* # of command.  */\n   char *string;\n+  struct pex_obj *pex;\n   struct command\n   {\n     const char *prog;\t\t/* program name.  */\n     const char **argv;\t\t/* vector of args.  */\n-    int pid;\t\t\t/* pid of process for this command.  */\n   };\n \n   struct command *commands;\t/* each command buffer with above info.  */\n@@ -2790,113 +2777,109 @@ execute (void)\n \n   /* Run each piped subprocess.  */\n \n+  pex = pex_init (PEX_USE_PIPES | (report_times ? PEX_RECORD_TIMES : 0),\n+\t\t  programname, temp_filename);\n+  if (pex == NULL)\n+    pfatal_with_name (_(\"pex_init failed\"));\n+\n   for (i = 0; i < n_commands; i++)\n     {\n-      char *errmsg_fmt, *errmsg_arg;\n+      const char *errmsg;\n+      int err;\n       const char *string = commands[i].argv[0];\n \n-      /* For some bizarre reason, the second argument of execvp() is\n-\t char *const *, not const char *const *.  */\n-      commands[i].pid = pexecute (string, (char *const *) commands[i].argv,\n-\t\t\t\t  programname, temp_filename,\n-\t\t\t\t  &errmsg_fmt, &errmsg_arg,\n-\t\t\t\t  ((i == 0 ? PEXECUTE_FIRST : 0)\n-\t\t\t\t   | (i + 1 == n_commands ? PEXECUTE_LAST : 0)\n-\t\t\t\t   | (string == commands[i].prog\n-\t\t\t\t      ? PEXECUTE_SEARCH : 0)\n-\t\t\t\t   | (verbose_flag ? PEXECUTE_VERBOSE : 0)));\n-\n-      if (commands[i].pid == -1)\n-\tpfatal_pexecute (errmsg_fmt, errmsg_arg);\n+      errmsg = pex_run (pex,\n+\t\t\t((i + 1 == n_commands ? PEX_LAST : 0)\n+\t\t\t | (string == commands[i].prog ? PEX_SEARCH : 0)),\n+\t\t\tstring, (char * const *) commands[i].argv,\n+\t\t\tNULL, NULL, &err);\n+      if (errmsg != NULL)\n+\t{\n+\t  if (err == 0)\n+\t    fatal (errmsg);\n+\t  else\n+\t    {\n+\t      errno = err;\n+\t      pfatal_with_name (errmsg);\n+\t    }\n+\t}\n \n       if (string != commands[i].prog)\n \tfree ((void *) string);\n     }\n \n   execution_count++;\n \n-  /* Wait for all the subprocesses to finish.\n-     We don't care what order they finish in;\n-     we know that N_COMMANDS waits will get them all.\n-     Ignore subprocesses that we don't know about,\n-     since they can be spawned by the process that exec'ed us.  */\n+  /* Wait for all the subprocesses to finish.  */\n \n   {\n+    int *statuses;\n+    struct pex_time *times = NULL;\n     int ret_code = 0;\n-#ifdef HAVE_GETRUSAGE\n-    struct timeval d;\n-    double ut = 0.0, st = 0.0;\n-#endif\n \n-    for (i = 0; i < n_commands;)\n+    statuses = alloca (n_commands * sizeof (int));\n+    if (!pex_get_status (pex, n_commands, statuses))\n+      pfatal_with_name (_(\"failed to get exit status\"));\n+\n+    if (report_times)\n       {\n-\tint j;\n-\tint status;\n-\tint pid;\n+\ttimes = alloca (n_commands * sizeof (struct pex_time));\n+\tif (!pex_get_times (pex, n_commands, times))\n+\t  pfatal_with_name (_(\"failed to get process times\"));\n+      }\n \n-\tpid = pwait (commands[i].pid, &status, 0);\n-\tgcc_assert (pid >= 0);\n+    pex_free (pex);\n \n-#ifdef HAVE_GETRUSAGE\n-\tif (report_times)\n-\t  {\n-\t    /* getrusage returns the total resource usage of all children\n-\t       up to now.  Copy the previous values into prus, get the\n-\t       current statistics, then take the difference.  */\n-\n-\t    prus = rus;\n-\t    getrusage (RUSAGE_CHILDREN, &rus);\n-\t    d.tv_sec = rus.ru_utime.tv_sec - prus.ru_utime.tv_sec;\n-\t    d.tv_usec = rus.ru_utime.tv_usec - prus.ru_utime.tv_usec;\n-\t    ut = (double) d.tv_sec + (double) d.tv_usec / 1.0e6;\n-\n-\t    d.tv_sec = rus.ru_stime.tv_sec - prus.ru_stime.tv_sec;\n-\t    d.tv_usec = rus.ru_stime.tv_usec - prus.ru_stime.tv_usec;\n-\t    st = (double) d.tv_sec + (double) d.tv_usec / 1.0e6;\n-\t  }\n-#endif\n+    for (i = 0; i < n_commands; ++i)\n+      {\n+\tint status = statuses[i];\n \n-\tfor (j = 0; j < n_commands; j++)\n-\t  if (commands[j].pid == pid)\n-\t    {\n-\t      i++;\n-\t      if (WIFSIGNALED (status))\n-\t\t{\n+\tif (WIFSIGNALED (status))\n+\t  {\n #ifdef SIGPIPE\n-\t\t  /* SIGPIPE is a special case.  It happens in -pipe mode\n-\t\t     when the compiler dies before the preprocessor is\n-\t\t     done, or the assembler dies before the compiler is\n-\t\t     done.  There's generally been an error already, and\n-\t\t     this is just fallout.  So don't generate another error\n-\t\t     unless we would otherwise have succeeded.  */\n-\t\t  if (WTERMSIG (status) == SIGPIPE\n-\t\t      && (signal_count || greatest_status >= MIN_FATAL_STATUS))\n-\t\t    ;\n-\t\t  else\n+\t    /* SIGPIPE is a special case.  It happens in -pipe mode\n+\t       when the compiler dies before the preprocessor is done,\n+\t       or the assembler dies before the compiler is done.\n+\t       There's generally been an error already, and this is\n+\t       just fallout.  So don't generate another error unless\n+\t       we would otherwise have succeeded.  */\n+\t    if (WTERMSIG (status) == SIGPIPE\n+\t\t&& (signal_count || greatest_status >= MIN_FATAL_STATUS))\n+\t      ;\n+\t    else\n #endif\n-\t\t    fatal (\"\\\n+\t      fatal (\"\\\n Internal error: %s (program %s)\\n\\\n Please submit a full bug report.\\n\\\n See %s for instructions.\",\n-\t\t\t   strsignal (WTERMSIG (status)), commands[j].prog,\n-\t\t\t   bug_report_url);\n-\t\t  signal_count++;\n-\t\t  ret_code = -1;\n-\t\t}\n-\t      else if (WIFEXITED (status)\n-\t\t       && WEXITSTATUS (status) >= MIN_FATAL_STATUS)\n-\t\t{\n-\t\t  if (WEXITSTATUS (status) > greatest_status)\n-\t\t    greatest_status = WEXITSTATUS (status);\n-\t\t  ret_code = -1;\n-\t\t}\n-#ifdef HAVE_GETRUSAGE\n-\t      if (report_times && ut + st != 0)\n-\t\tnotice (\"# %s %.2f %.2f\\n\", commands[j].prog, ut, st);\n-#endif\n-\t      break;\n-\t    }\n+\t\t     strsignal (WTERMSIG (status)), commands[i].prog,\n+\t\t     bug_report_url);\n+\t    signal_count++;\n+\t    ret_code = -1;\n+\t  }\n+\telse if (WIFEXITED (status)\n+\t\t && WEXITSTATUS (status) >= MIN_FATAL_STATUS)\n+\t  {\n+\t    if (WEXITSTATUS (status) > greatest_status)\n+\t      greatest_status = WEXITSTATUS (status);\n+\t    ret_code = -1;\n+\t  }\n+\n+\tif (report_times)\n+\t  {\n+\t    struct pex_time *pt = &times[i];\n+\t    double ut, st;\n+\n+\t    ut = ((double) pt->user_seconds\n+\t\t  + (double) pt->user_microseconds / 1.0e6);\n+\t    st = ((double) pt->system_seconds\n+\t\t  + (double) pt->system_microseconds / 1.0e6);\n+\n+\t    if (ut + st != 0)\n+\t      notice (\"# %s %.2f %.2f\\n\", commands[i].prog, ut, st);\n+\t  }\n       }\n+\n     return ret_code;\n   }\n }\n@@ -3773,16 +3756,11 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t}\n     }\n \n-  if ((save_temps_flag || report_times) && use_pipes)\n+  if (save_temps_flag && use_pipes)\n     {\n       /* -save-temps overrides -pipe, so that temp files are produced */\n       if (save_temps_flag)\n \terror (\"warning: -pipe ignored because -save-temps specified\");\n-      /* -time overrides -pipe because we can't get correct stats when\n-\t multiple children are running at once.  */\n-      else if (report_times)\n-\terror (\"warning: -pipe ignored because -time specified\");\n-\n       use_pipes = 0;\n     }\n "}]}