{"sha": "48f3f27f607d3c145ed1e3ad652baac84aacdb91", "node_id": "C_kwDOANBUbNoAKDQ4ZjNmMjdmNjA3ZDNjMTQ1ZWQxZTNhZDY1MmJhYWM4NGFhY2RiOTE", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wilco.dijkstra@arm.com", "date": "2022-05-18T15:06:57Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2022-05-20T14:10:38Z"}, "message": "AArch64: Improve rotate patterns\n\nImprove and generalize rotate patterns. Rotates by more than half the\nbitwidth of a register are canonicalized to rotate left. Many existing\nshift patterns don't handle this case correctly, so add rotate left to\nthe shift iterator and convert rotate left into ror during assembly\noutput. Add missing zero_extend patterns for shifted BIC, ORN and EON.\n\ngcc/\n\t* config/aarch64/aarch64.md\n\t(and_<SHIFT:optab><mode>3_compare0): Support rotate left.\n\t(and_<SHIFT:optab>si3_compare0_uxtw): Likewise.\n\t(<LOGICAL:optab>_<SHIFT:optab><mode>3): Likewise.\n\t(<LOGICAL:optab>_<SHIFT:optab>si3_uxtw): Likewise.\n\t(one_cmpl_<optab><mode>2): Likewise.\n\t(<LOGICAL:optab>_one_cmpl_<SHIFT:optab><mode>3): Likewise.\n\t(<LOGICAL:optab>_one_cmpl_<SHIFT:optab>sidi_uxtw): New pattern.\n\t(eor_one_cmpl_<SHIFT:optab><mode>3_alt): Support rotate left.\n\t(eor_one_cmpl_<SHIFT:optab>sidi3_alt_ze): Likewise.\n\t(and_one_cmpl_<SHIFT:optab><mode>3_compare0): Likewise.\n\t(and_one_cmpl_<SHIFT:optab>si3_compare0_uxtw): Likewise.\n\t(and_one_cmpl_<SHIFT:optab><mode>3_compare0_no_reuse): Likewise.\n\t(and_<SHIFT:optab><mode>3nr_compare0): Likewise.\n\t(*<optab>si3_insn_uxtw): Use SHIFT_no_rotate.\n\t(rolsi3_insn_uxtw): New pattern.\n\t* config/aarch64/iterators.md (SHIFT): Add rotate left.\n\t(SHIFT_no_rotate): Add new iterator.\n\t(SHIFT:shift): Print rotate left as ror.\n\t(is_rotl): Add test for left rotate.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/ror_2.c: New test.\n\t* gcc.target/aarch64/ror_3.c: New test.", "tree": {"sha": "634988a7a0a3ca93a1c176080f168444f85723e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/634988a7a0a3ca93a1c176080f168444f85723e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48f3f27f607d3c145ed1e3ad652baac84aacdb91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48f3f27f607d3c145ed1e3ad652baac84aacdb91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48f3f27f607d3c145ed1e3ad652baac84aacdb91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48f3f27f607d3c145ed1e3ad652baac84aacdb91/comments", "author": {"login": "Wilco1", "id": 58446312, "node_id": "MDQ6VXNlcjU4NDQ2MzEy", "avatar_url": "https://avatars.githubusercontent.com/u/58446312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Wilco1", "html_url": "https://github.com/Wilco1", "followers_url": "https://api.github.com/users/Wilco1/followers", "following_url": "https://api.github.com/users/Wilco1/following{/other_user}", "gists_url": "https://api.github.com/users/Wilco1/gists{/gist_id}", "starred_url": "https://api.github.com/users/Wilco1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Wilco1/subscriptions", "organizations_url": "https://api.github.com/users/Wilco1/orgs", "repos_url": "https://api.github.com/users/Wilco1/repos", "events_url": "https://api.github.com/users/Wilco1/events{/privacy}", "received_events_url": "https://api.github.com/users/Wilco1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1be715f31605976d8e4336973d3b81c5b7cea79f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1be715f31605976d8e4336973d3b81c5b7cea79f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1be715f31605976d8e4336973d3b81c5b7cea79f"}], "stats": {"total": 526, "additions": 461, "deletions": 65}, "files": [{"sha": "acec8c1146765c0fac73c15351853324b8f03209", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 116, "deletions": 63, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f3f27f607d3c145ed1e3ad652baac84aacdb91/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f3f27f607d3c145ed1e3ad652baac84aacdb91/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=48f3f27f607d3c145ed1e3ad652baac84aacdb91", "patch": "@@ -4549,7 +4549,11 @@\n    (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(and:GPI (SHIFT:GPI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n   \"\"\n-  \"ands\\\\t%<w>0, %<w>3, %<w>1, <SHIFT:shift> %2\"\n+{\n+  if (<SHIFT:is_rotl>)\n+    operands[2] = GEN_INT (<sizen> - UINTVAL (operands[2]));\n+  return \"ands\\\\t%<w>0, %<w>3, %<w>1, <SHIFT:shift> %2\";\n+}\n   [(set_attr \"type\" \"logics_shift_imm\")]\n )\n \n@@ -4566,7 +4570,11 @@\n \t(zero_extend:DI (and:SI (SHIFT:SI (match_dup 1) (match_dup 2))\n \t\t\t\t(match_dup 3))))]\n   \"\"\n-  \"ands\\\\t%w0, %w3, %w1, <SHIFT:shift> %2\"\n+{\n+  if (<SHIFT:is_rotl>)\n+    operands[2] = GEN_INT (32 - UINTVAL (operands[2]));\n+  return \"ands\\\\t%w0, %w3, %w1, <SHIFT:shift> %2\";\n+}\n   [(set_attr \"type\" \"logics_shift_imm\")]\n )\n \n@@ -4577,7 +4585,11 @@\n \t\t      (match_operand:QI 2 \"aarch64_shift_imm_<mode>\" \"n\"))\n \t\t     (match_operand:GPI 3 \"register_operand\" \"r\")))]\n   \"\"\n-  \"<LOGICAL:logical>\\\\t%<w>0, %<w>3, %<w>1, <SHIFT:shift> %2\"\n+{\n+  if (<SHIFT:is_rotl>)\n+    operands[2] = GEN_INT (<sizen> - UINTVAL (operands[2]));\n+  return \"<LOGICAL:logical>\\\\t%<w>0, %<w>3, %<w>1, <SHIFT:shift> %2\";\n+}\n   [(set_attr \"type\" \"logic_shift_imm\")]\n )\n \n@@ -4647,17 +4659,6 @@\n   \"operands[3] = gen_reg_rtx (<MODE>mode);\"\n )\n \n-(define_insn \"*<optab>_rol<mode>3\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n-\t(LOGICAL:GPI (rotate:GPI\n-\t\t      (match_operand:GPI 1 \"register_operand\" \"r\")\n-\t\t      (match_operand:QI 2 \"aarch64_shift_imm_<mode>\" \"n\"))\n-\t\t     (match_operand:GPI 3 \"register_operand\" \"r\")))]\n-  \"\"\n-  \"<logical>\\\\t%<w>0, %<w>3, %<w>1, ror #(<sizen> - %2)\"\n-  [(set_attr \"type\" \"logic_shift_imm\")]\n-)\n-\n ;; zero_extend versions of above\n (define_insn \"*<LOGICAL:optab>_<SHIFT:optab>si3_uxtw\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -4667,19 +4668,11 @@\n \t\t      (match_operand:QI 2 \"aarch64_shift_imm_si\" \"n\"))\n \t\t     (match_operand:SI 3 \"register_operand\" \"r\"))))]\n   \"\"\n-  \"<LOGICAL:logical>\\\\t%w0, %w3, %w1, <SHIFT:shift> %2\"\n-  [(set_attr \"type\" \"logic_shift_imm\")]\n-)\n-\n-(define_insn \"*<optab>_rolsi3_uxtw\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI\n-\t (LOGICAL:SI (rotate:SI\n-\t\t      (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t      (match_operand:QI 2 \"aarch64_shift_imm_si\" \"n\"))\n-\t\t     (match_operand:SI 3 \"register_operand\" \"r\"))))]\n-  \"\"\n-  \"<logical>\\\\t%w0, %w3, %w1, ror #(32 - %2)\"\n+{\n+  if (<SHIFT:is_rotl>)\n+    operands[2] = GEN_INT (32 - UINTVAL (operands[2]));\n+  return \"<LOGICAL:logical>\\\\t%w0, %w3, %w1, <SHIFT:shift> %2\";\n+}\n   [(set_attr \"type\" \"logic_shift_imm\")]\n )\n \n@@ -4708,7 +4701,11 @@\n \t(not:GPI (SHIFT:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n \t\t\t    (match_operand:QI 2 \"aarch64_shift_imm_<mode>\" \"n\"))))]\n   \"\"\n-  \"mvn\\\\t%<w>0, %<w>1, <shift> %2\"\n+{\n+  if (<SHIFT:is_rotl>)\n+    operands[2] = GEN_INT (<sizen> - UINTVAL (operands[2]));\n+  return \"mvn\\\\t%<w>0, %<w>1, <shift> %2\";\n+}\n   [(set_attr \"type\" \"logic_shift_imm\")]\n )\n \n@@ -4815,7 +4812,28 @@\n \t\t       (match_operand:QI 2 \"aarch64_shift_imm_<mode>\" \"n\")))\n \t\t     (match_operand:GPI 3 \"register_operand\" \"r\")))]\n   \"\"\n-  \"<LOGICAL:nlogical>\\\\t%<w>0, %<w>3, %<w>1, <SHIFT:shift> %2\"\n+{\n+  if (<SHIFT:is_rotl>)\n+    operands[2] = GEN_INT (<sizen> - UINTVAL (operands[2]));\n+  return \"<LOGICAL:nlogical>\\\\t%<w>0, %<w>3, %<w>1, <SHIFT:shift> %2\";\n+}\n+  [(set_attr \"type\" \"logic_shift_imm\")]\n+)\n+\n+;; Zero-extend version of the above.\n+(define_insn \"<LOGICAL:optab>_one_cmpl_<SHIFT:optab>sidi_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI (LOGICAL:SI (not:SI\n+\t\t\t (SHIFT:SI\n+\t\t\t  (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t  (match_operand:QI 2 \"aarch64_shift_imm_si\" \"n\")))\n+\t\t\t (match_operand:SI 3 \"register_operand\" \"r\"))))]\n+  \"\"\n+{\n+  if (<SHIFT:is_rotl>)\n+    operands[2] = GEN_INT (32 - UINTVAL (operands[2]));\n+  return \"<LOGICAL:nlogical>\\\\t%w0, %w3, %w1, <SHIFT:shift> %2\";\n+}\n   [(set_attr \"type\" \"logic_shift_imm\")]\n )\n \n@@ -4827,7 +4845,11 @@\n \t\t       (match_operand:QI 2 \"aarch64_shift_imm_<mode>\" \"n\"))\n \t\t     (match_operand:GPI 3 \"register_operand\" \"r\"))))]\n   \"\"\n-  \"eon\\\\t%<w>0, %<w>3, %<w>1, <SHIFT:shift> %2\"\n+{\n+  if (<SHIFT:is_rotl>)\n+    operands[2] = GEN_INT (<sizen> - UINTVAL (operands[2]));\n+  return \"eon\\\\t%<w>0, %<w>3, %<w>1, <SHIFT:shift> %2\";\n+}\n   [(set_attr \"type\" \"logic_shift_imm\")]\n )\n \n@@ -4841,7 +4863,11 @@\n \t\t      (match_operand:QI 2 \"aarch64_shift_imm_si\" \"n\"))\n \t\t    (match_operand:SI 3 \"register_operand\" \"r\")))))]\n   \"\"\n-  \"eon\\\\t%w0, %w3, %w1, <SHIFT:shift> %2\"\n+{\n+  if (<SHIFT:is_rotl>)\n+    operands[2] = GEN_INT (32 - UINTVAL (operands[2]));\n+  return \"eon\\\\t%w0, %w3, %w1, <SHIFT:shift> %2\";\n+}\n   [(set_attr \"type\" \"logic_shift_imm\")]\n )\n \n@@ -4859,7 +4885,11 @@\n \t\t  (SHIFT:GPI\n \t\t   (match_dup 1) (match_dup 2))) (match_dup 3)))]\n   \"\"\n-  \"bics\\\\t%<w>0, %<w>3, %<w>1, <SHIFT:shift> %2\"\n+{\n+  if (<SHIFT:is_rotl>)\n+    operands[2] = GEN_INT (<sizen> - UINTVAL (operands[2]));\n+  return \"bics\\\\t%<w>0, %<w>3, %<w>1, <SHIFT:shift> %2\";\n+}\n   [(set_attr \"type\" \"logics_shift_imm\")]\n )\n \n@@ -4878,7 +4908,11 @@\n \t\t\t (not:SI\n \t\t\t  (SHIFT:SI (match_dup 1) (match_dup 2))) (match_dup 3))))]\n   \"\"\n-  \"bics\\\\t%w0, %w3, %w1, <SHIFT:shift> %2\"\n+{\n+  if (<SHIFT:is_rotl>)\n+    operands[2] = GEN_INT (32 - UINTVAL (operands[2]));\n+  return \"bics\\\\t%w0, %w3, %w1, <SHIFT:shift> %2\";\n+}\n   [(set_attr \"type\" \"logics_shift_imm\")]\n )\n \n@@ -4892,7 +4926,11 @@\n           (match_operand:GPI 2 \"register_operand\" \"r\"))\n      (const_int 0)))]\n   \"\"\n-  \"bics\\\\t<w>zr, %<w>2, %<w>0, <SHIFT:shift> %1\"\n+{\n+  if (<SHIFT:is_rotl>)\n+    operands[1] = GEN_INT (<sizen> - UINTVAL (operands[1]));\n+  return \"bics\\\\t<w>zr, %<w>2, %<w>0, <SHIFT:shift> %1\";\n+}\n   [(set_attr \"type\" \"logics_shift_imm\")]\n )\n \n@@ -5066,7 +5104,11 @@\n \t\t  (match_operand:GPI 2 \"register_operand\" \"r\"))\n \t(const_int 0)))]\n   \"\"\n-  \"tst\\\\t%<w>2, %<w>0, <SHIFT:shift> %1\"\n+{\n+  if (<SHIFT:is_rotl>)\n+    operands[1] = GEN_INT (<sizen> - UINTVAL (operands[1]));\n+  return \"tst\\\\t%<w>2, %<w>0, <SHIFT:shift> %1\";\n+}\n   [(set_attr \"type\" \"logics_shift_imm\")]\n )\n \n@@ -5467,10 +5509,22 @@\n   [(set_attr \"type\" \"rotate_imm,shift_reg\")]\n )\n \n-;; zero_extend version of above\n+(define_insn \"*rol<mode>3_insn\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+        (rotate:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n+                    (match_operand 2 \"const_int_operand\" \"n\")))]\n+  \"UINTVAL (operands[2]) < GET_MODE_BITSIZE (<MODE>mode)\"\n+{\n+  operands[3] = GEN_INT (<sizen> - UINTVAL (operands[2]));\n+  return \"ror\\\\t%<w>0, %<w>1, %3\";\n+}\n+  [(set_attr \"type\" \"rotate_imm\")]\n+)\n+\n+;; zero_extend version of shifts\n (define_insn \"*<optab>si3_insn_uxtw\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(zero_extend:DI (SHIFT:SI\n+\t(zero_extend:DI (SHIFT_no_rotate:SI\n \t (match_operand:SI 1 \"register_operand\" \"r,r\")\n \t (match_operand:QI 2 \"aarch64_reg_or_shift_imm_si\" \"Uss,r\"))))]\n   \"\"\n@@ -5480,6 +5534,31 @@\n   [(set_attr \"type\" \"bfx,shift_reg\")]\n )\n \n+;; zero_extend version of rotate right\n+(define_insn \"*rorsi3_insn_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (zero_extend:DI\n+         (rotatert:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+                    (match_operand 2 \"const_int_operand\" \"n\"))))]\n+  \"UINTVAL (operands[2]) < 32\"\n+  \"ror\\\\t%w0, %w1, %2\"\n+  [(set_attr \"type\" \"rotate_imm\")]\n+)\n+\n+;; zero_extend version of rotate left\n+(define_insn \"*rolsi3_insn_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (zero_extend:DI\n+         (rotate:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+                    (match_operand 2 \"const_int_operand\" \"n\"))))]\n+  \"UINTVAL (operands[2]) < 32\"\n+{\n+  operands[2] = GEN_INT (32 - UINTVAL (operands[2]));\n+  return \"ror\\\\t%w0, %w1, %2\";\n+}\n+  [(set_attr \"type\" \"rotate_imm\")]\n+)\n+\n (define_insn \"*<optab><mode>3_insn\"\n   [(set (match_operand:SHORT 0 \"register_operand\" \"=r\")\n \t(ASHIFT:SHORT (match_operand:SHORT 1 \"register_operand\" \"r\")\n@@ -5562,32 +5641,6 @@\n   [(set_attr \"type\" \"rotate_imm\")]\n )\n \n-(define_insn \"*ror<mode>3_insn\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n-\t(rotate:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n-\t\t    (match_operand 2 \"const_int_operand\" \"n\")))]\n-  \"UINTVAL (operands[2]) < GET_MODE_BITSIZE (<MODE>mode)\"\n-{\n-  operands[3] = GEN_INT (<sizen> - UINTVAL (operands[2]));\n-  return \"ror\\\\t%<w>0, %<w>1, %3\";\n-}\n-  [(set_attr \"type\" \"rotate_imm\")]\n-)\n-\n-;; zero_extend version of the above\n-(define_insn \"*rorsi3_insn_uxtw\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI\n-\t (rotate:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t    (match_operand 2 \"const_int_operand\" \"n\"))))]\n-  \"UINTVAL (operands[2]) < 32\"\n-{\n-  operands[3] = GEN_INT (32 - UINTVAL (operands[2]));\n-  return \"ror\\\\t%w0, %w1, %3\";\n-}\n-  [(set_attr \"type\" \"rotate_imm\")]\n-)\n-\n (define_insn \"*<ANY_EXTEND:optab><GPI:mode>_ashl<SHORT:mode>\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(ANY_EXTEND:GPI"}, {"sha": "1be6a915d9f475cc2294c602226a2293823275f8", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f3f27f607d3c145ed1e3ad652baac84aacdb91/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f3f27f607d3c145ed1e3ad652baac84aacdb91/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=48f3f27f607d3c145ed1e3ad652baac84aacdb91", "patch": "@@ -2119,7 +2119,10 @@\n ;; -------------------------------------------------------------------\n \n ;; This code iterator allows the various shifts supported on the core\n-(define_code_iterator SHIFT [ashift ashiftrt lshiftrt rotatert])\n+(define_code_iterator SHIFT [ashift ashiftrt lshiftrt rotatert rotate])\n+\n+;; This code iterator allows all shifts except for rotates.\n+(define_code_iterator SHIFT_no_rotate [ashift ashiftrt lshiftrt])\n \n ;; This code iterator allows the shifts supported in arithmetic instructions\n (define_code_iterator ASHIFT [ashift ashiftrt lshiftrt])\n@@ -2249,6 +2252,7 @@\n \t\t\t (ashiftrt \"ashr\")\n \t\t\t (lshiftrt \"lshr\")\n \t\t\t (rotatert \"rotr\")\n+\t\t\t (rotate   \"rotl\")\n \t\t\t (sign_extend \"extend\")\n \t\t\t (zero_extend \"zero_extend\")\n \t\t\t (sign_extract \"extv\")\n@@ -2338,7 +2342,10 @@\n \n ;; Similar for the instruction mnemonics\n (define_code_attr shift [(ashift \"lsl\") (ashiftrt \"asr\")\n-\t\t\t (lshiftrt \"lsr\") (rotatert \"ror\")])\n+\t\t\t (lshiftrt \"lsr\") (rotatert \"ror\") (rotate \"ror\")])\n+;; True if shift is rotate left.\n+(define_code_attr is_rotl [(ashift \"0\") (ashiftrt \"0\")\n+\t\t\t   (lshiftrt \"0\") (rotatert \"0\") (rotate \"1\")])\n \n ;; Op prefix for shift right and accumulate.\n (define_code_attr sra_op [(ashiftrt \"s\") (lshiftrt \"u\")])"}, {"sha": "796c1222230e49f81999f3913f483288ff9ff6e8", "filename": "gcc/testsuite/gcc.target/aarch64/ror_2.c", "status": "added", "additions": 205, "deletions": 0, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f3f27f607d3c145ed1e3ad652baac84aacdb91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fror_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f3f27f607d3c145ed1e3ad652baac84aacdb91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fror_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fror_2.c?ref=48f3f27f607d3c145ed1e3ad652baac84aacdb91", "patch": "@@ -0,0 +1,205 @@\n+/* { dg-options \"-O2 --save-temps\" } */\n+/* { dg-do assemble } */\n+\n+\n+#define ROR(X,Y) ((X >> Y) | (X << (32 - Y)))\n+\n+unsigned\n+ror1 (unsigned x)\n+{\n+  /* { dg-final { scan-assembler \"ror\\tw\\[0-9\\]+, w\\[0-9\\]+, 3\\n\" } } */\n+  return ROR (x, 3);\n+}\n+\n+unsigned\n+ror2 (unsigned x)\n+{\n+  /* { dg-final { scan-assembler \"ror\\tw\\[0-9\\]+, w\\[0-9\\]+, 17\\n\" } } */\n+  return ROR (x, 17);\n+}\n+\n+unsigned long\n+ror3 (unsigned x)\n+{\n+  /* { dg-final { scan-assembler \"ror\\tw\\[0-9\\]+, w\\[0-9\\]+, 2\\n\" } } */\n+  return (unsigned long) ROR (x, 2);\n+}\n+\n+unsigned long\n+ror4 (unsigned x)\n+{\n+  /* { dg-final { scan-assembler \"ror\\tw\\[0-9\\]+, w\\[0-9\\]+, 26\\n\" } } */\n+  return (unsigned long) ROR (x, 26);\n+}\n+\n+unsigned\n+and1 (unsigned x, unsigned y)\n+{\n+  /* { dg-final { scan-assembler \"and\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, ror 13\\n\" } } */\n+  return x & ROR (y, 13);\n+}\n+\n+unsigned\n+and2 (unsigned x, unsigned y)\n+{\n+  /* { dg-final { scan-assembler \"and\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, ror 23\\n\" } } */\n+  return x & ROR (y, 23);\n+}\n+\n+unsigned long\n+and3 (unsigned x, unsigned y)\n+{\n+  /* { dg-final { scan-assembler \"and\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, ror 12\\n\" } } */\n+  return x & (unsigned long) ROR (y, 12);\n+}\n+\n+unsigned\n+bic1 (unsigned x, unsigned y)\n+{\n+  /* { dg-final { scan-assembler \"bic\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, ror 11\\n\" } } */\n+  return x & ~ROR (y, 11);\n+}\n+\n+unsigned\n+bic2 (unsigned x, unsigned y)\n+{\n+  /* { dg-final { scan-assembler \"bic\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, ror 17\\n\" } } */\n+  return x & ~ROR (y, 17);\n+}\n+\n+unsigned long\n+bic3 (unsigned x, unsigned y)\n+{\n+  /* { dg-final { scan-assembler \"bic\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, ror 22\\n\" } } */\n+  return (unsigned long) x & ~ROR (y, 22);\n+}\n+\n+unsigned\n+orr1 (unsigned x, unsigned y)\n+{\n+  /* { dg-final { scan-assembler \"orr\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, ror 5\\n\" } } */\n+  return x | ROR (y, 5);\n+}\n+\n+unsigned\n+orr2 (unsigned x, unsigned y)\n+{\n+  /* { dg-final { scan-assembler \"orr\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, ror 25\\n\" } } */\n+  return x | ROR (y, 25);\n+}\n+\n+unsigned long\n+orr3 (unsigned x, unsigned y)\n+{\n+  /* { dg-final { scan-assembler \"orr\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, ror 24\\n\" } } */\n+  return (unsigned long)x | ROR (y, 24);\n+}\n+\n+unsigned\n+orn1 (unsigned x, unsigned y)\n+{\n+  /* { dg-final { scan-assembler \"orn\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, ror 3\\n\" } } */\n+  return x | ~ROR (y, 3);\n+}\n+\n+unsigned\n+orn2 (unsigned x, unsigned y)\n+{\n+  /* { dg-final { scan-assembler \"orn\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, ror 30\\n\" } } */\n+  return x | ~ROR (y, 30);\n+}\n+\n+unsigned long\n+orn3 (unsigned x, unsigned y)\n+{\n+  /* { dg-final { scan-assembler \"orn\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, ror 9\\n\" } } */\n+  return x | (unsigned long) ~ROR (y, 9);\n+}\n+\n+unsigned\n+eor1 (unsigned x, unsigned y)\n+{\n+  /* { dg-final { scan-assembler \"eor\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, ror 9\\n\" } } */\n+  return x ^ ROR (y, 9);\n+}\n+\n+unsigned\n+eor2 (unsigned x, unsigned y)\n+{\n+  /* { dg-final { scan-assembler \"eor\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, ror 31\\n\" } } */\n+  return x ^ ROR (y, 31);\n+}\n+\n+unsigned long\n+eor3 (unsigned x, unsigned y)\n+{\n+  /* { dg-final { scan-assembler \"eor\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, ror 28\\n\" } } */\n+  return (unsigned long) x ^ ROR (y, 28);\n+}\n+\n+unsigned\n+eon1 (unsigned x, unsigned y)\n+{\n+  /* { dg-final { scan-assembler \"eon\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, ror 1\\n\" } } */\n+  return x ^ ~ROR (y, 1);\n+}\n+\n+unsigned\n+eon2 (unsigned x, unsigned y)\n+{\n+  /* { dg-final { scan-assembler \"eon\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, ror 18\\n\" } } */\n+  return x ^ ~ROR (y, 18);\n+}\n+\n+unsigned long\n+eon3 (unsigned x, unsigned y)\n+{\n+  /* { dg-final { scan-assembler \"eon\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, ror 19\\n\" } } */\n+  return x ^ (unsigned long) ~ROR (y, 19);\n+}\n+\n+int\n+tst1 (unsigned x, unsigned y)\n+{\n+  /* { dg-final { scan-assembler \"tst\\tw\\[0-9\\]+, w\\[0-9\\]+, ror 8\\n\" } } */\n+  return (x & ROR (y, 8)) == 0;\n+}\n+\n+int\n+tst2 (unsigned x, unsigned y)\n+{\n+  /* { dg-final { scan-assembler \"tst\\tw\\[0-9\\]+, w\\[0-9\\]+, ror 20\\n\" } } */\n+  return (x & ROR (y, 20)) == 0;\n+}\n+\n+int\n+tst3 (unsigned x, unsigned y)\n+{\n+  /* { dg-final { scan-assembler \"tst\\tw\\[0-9\\]+, w\\[0-9\\]+, ror 20\\n\" } } */\n+  return ((unsigned long)x & ROR (y, 20)) == 0;\n+}\n+\n+int\n+bics1 (unsigned x, unsigned y)\n+{\n+  /* { dg-final { scan-assembler \"bics\\twzr, w\\[0-9\\]+, w\\[0-9\\]+, ror 10\\n\" } } */\n+  return (x & ~ROR (y, 10)) == 0;\n+}\n+\n+int\n+bics2 (unsigned x, unsigned y)\n+{\n+  /* { dg-final { scan-assembler \"bics\\twzr, w\\[0-9\\]+, w\\[0-9\\]+, ror 21\\n\" } } */\n+  return (x & ~ROR (y, 21)) == 0;\n+}\n+\n+int\n+bics3 (unsigned x, unsigned y)\n+{\n+  /* { dg-final { scan-assembler \"bics\\twzr, w\\[0-9\\]+, w\\[0-9\\]+, ror 21\\n\" } } */\n+  return (x & (unsigned long)~ROR (y, 21)) == 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"cmp\" } } */\n+/* { dg-final { scan-assembler-not \"mvn\" } } */\n+/* { dg-final { scan-assembler-not \"uxtw\" } } */"}, {"sha": "484beecf886b6ff94d84b12cfdffe5e7d858f437", "filename": "gcc/testsuite/gcc.target/aarch64/ror_3.c", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f3f27f607d3c145ed1e3ad652baac84aacdb91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fror_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f3f27f607d3c145ed1e3ad652baac84aacdb91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fror_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fror_3.c?ref=48f3f27f607d3c145ed1e3ad652baac84aacdb91", "patch": "@@ -0,0 +1,131 @@\n+/* { dg-options \"-O2 --save-temps\" } */\n+/* { dg-do assemble } */\n+\n+\n+#define ROR(X,Y) ((X >> Y) | (X << (64 - Y)))\n+\n+unsigned long\n+ror1 (unsigned long x)\n+{\n+  /* { dg-final { scan-assembler \"ror\\tx\\[0-9\\]+, x\\[0-9\\]+, 3\\n\" } } */\n+  return ROR (x, 3);\n+}\n+\n+unsigned long\n+ror2 (unsigned long x)\n+{\n+  /* { dg-final { scan-assembler \"ror\\tx\\[0-9\\]+, x\\[0-9\\]+, 37\\n\" } } */\n+  return ROR (x, 37);\n+}\n+\n+unsigned long\n+and1 (unsigned long x, unsigned long y)\n+{\n+  /* { dg-final { scan-assembler \"and\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+, ror 13\\n\" } } */\n+  return x & ROR (y, 13);\n+}\n+\n+unsigned long\n+and2 (unsigned long x, unsigned long y)\n+{\n+  /* { dg-final { scan-assembler \"and\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+, ror 33\\n\" } } */\n+  return x & ROR (y, 33);\n+}\n+\n+unsigned long\n+bic1 (unsigned long x, unsigned long y)\n+{\n+  /* { dg-final { scan-assembler \"bic\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+, ror 11\\n\" } } */\n+  return x & ~ROR (y, 11);\n+}\n+\n+unsigned long\n+bic2 (unsigned long x, unsigned long y)\n+{\n+  /* { dg-final { scan-assembler \"bic\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+, ror 47\\n\" } } */\n+  return x & ~ROR (y, 47);\n+}\n+\n+unsigned long\n+orr1 (unsigned long x, unsigned long y)\n+{\n+  /* { dg-final { scan-assembler \"orr\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+, ror 5\\n\" } } */\n+  return x | ROR (y, 5);\n+}\n+\n+unsigned long\n+orr2 (unsigned long x, unsigned long y)\n+{\n+  /* { dg-final { scan-assembler \"orr\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+, ror 35\\n\" } } */\n+  return x | ROR (y, 35);\n+}\n+\n+unsigned long\n+orn1 (unsigned long x, unsigned long y)\n+{\n+  /* { dg-final { scan-assembler \"orn\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+, ror 3\\n\" } } */\n+  return x | ~ROR (y, 3);\n+}\n+\n+unsigned long\n+orn2 (unsigned long x, unsigned long y)\n+{\n+  /* { dg-final { scan-assembler \"orn\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+, ror 39\\n\" } } */\n+  return x | ~ROR (y, 39);\n+}\n+\n+unsigned long\n+eor1 (unsigned long x, unsigned long y)\n+{\n+  /* { dg-final { scan-assembler \"eor\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+, ror 9\\n\" } } */\n+  return x ^ ROR (y, 9);\n+}\n+\n+unsigned long\n+eor2 (unsigned long x, unsigned long y)\n+{\n+  /* { dg-final { scan-assembler \"eor\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+, ror 41\\n\" } } */\n+  return x ^ ROR (y, 41);\n+}\n+\n+unsigned long\n+eon1 (unsigned long x, unsigned long y)\n+{\n+  /* { dg-final { scan-assembler \"eon\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+, ror 1\\n\" } } */\n+  return x ^ ~ROR (y, 1);\n+}\n+\n+unsigned long\n+eon2 (unsigned long x, unsigned long y)\n+{\n+  /* { dg-final { scan-assembler \"eon\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+, ror 38\\n\" } } */\n+  return x ^ ~ROR (y, 38);\n+}\n+\n+unsigned long\n+tst1 (unsigned long x, unsigned long y)\n+{\n+  /* { dg-final { scan-assembler \"tst\\tx\\[0-9\\]+, x\\[0-9\\]+, ror 8\\n\" } } */\n+  return (x & ROR (y, 8)) == 0;\n+}\n+\n+unsigned long\n+tst2 (unsigned long x, unsigned long y)\n+{\n+  /* { dg-final { scan-assembler \"tst\\tx\\[0-9\\]+, x\\[0-9\\]+, ror 50\\n\" } } */\n+  return (x & ROR (y, 50)) == 0;\n+}\n+\n+unsigned long\n+bics1 (unsigned long x, unsigned long y)\n+{\n+  /* { dg-final { scan-assembler \"bics\\txzr, x\\[0-9\\]+, x\\[0-9\\]+, ror 10\\n\" } } */\n+  return (x & ~ROR (y, 10)) == 0;\n+}\n+\n+unsigned long\n+bics2 (unsigned long x, unsigned long y)\n+{\n+  /* { dg-final { scan-assembler \"bics\\txzr, x\\[0-9\\]+, x\\[0-9\\]+, ror 62\\n\" } } */\n+  return (x & ~ROR (y, 62)) == 0;\n+}"}]}