{"sha": "a3dbb63597ad65234dde941f29f6498e500b7e90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNkYmI2MzU5N2FkNjUyMzRkZGU5NDFmMjlmNjQ5OGU1MDBiN2U5MA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-10-10T18:32:40Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-10T18:32:40Z"}, "message": "Use noexcept instead of _GLIBCXX_USE_NOEXCEPT\n\n\t* libsupc++/eh_ptr.cc (exception_ptr): Replace _GLIBCXX_USE_NOEXCEPT\n\twith noexcept.\n\nFrom-SVN: r240943", "tree": {"sha": "affdd97eb02a84cebeba41f50e80b3c32e26c32a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/affdd97eb02a84cebeba41f50e80b3c32e26c32a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3dbb63597ad65234dde941f29f6498e500b7e90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3dbb63597ad65234dde941f29f6498e500b7e90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3dbb63597ad65234dde941f29f6498e500b7e90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3dbb63597ad65234dde941f29f6498e500b7e90/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71543388eec6aad6fb096b1de16264051cf06d3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71543388eec6aad6fb096b1de16264051cf06d3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71543388eec6aad6fb096b1de16264051cf06d3e"}], "stats": {"total": 45, "additions": 20, "deletions": 25}, "files": [{"sha": "b9f29d7fd1dfa6b89990f20cad53913d2bf2f0bc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3dbb63597ad65234dde941f29f6498e500b7e90/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3dbb63597ad65234dde941f29f6498e500b7e90/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a3dbb63597ad65234dde941f29f6498e500b7e90", "patch": "@@ -1,5 +1,8 @@\n 2016-10-10  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* libsupc++/eh_ptr.cc (exception_ptr): Replace _GLIBCXX_USE_NOEXCEPT\n+\twith noexcept.\n+\n \t* include/std/functional (_Bind_result::__enable_if_void): Use alias\n \ttemplate instead of class template.\n \t(_Bind_result::__disable_if_void): Likewise."}, {"sha": "f3c910b2d1e6ba19ac86291dca430de76005f091", "filename": "libstdc++-v3/libsupc++/eh_ptr.cc", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3dbb63597ad65234dde941f29f6498e500b7e90/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3dbb63597ad65234dde941f29f6498e500b7e90/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc?ref=a3dbb63597ad65234dde941f29f6498e500b7e90", "patch": "@@ -63,41 +63,39 @@ static_assert( adjptr<__cxa_exception>()\n #endif\n }\n \n-std::__exception_ptr::exception_ptr::exception_ptr() _GLIBCXX_USE_NOEXCEPT\n+std::__exception_ptr::exception_ptr::exception_ptr() noexcept\n : _M_exception_object(0) { }\n \n \n-std::__exception_ptr::exception_ptr::exception_ptr(void* obj)\n-_GLIBCXX_USE_NOEXCEPT\n+std::__exception_ptr::exception_ptr::exception_ptr(void* obj) noexcept\n : _M_exception_object(obj)  { _M_addref(); }\n \n \n-std::__exception_ptr::exception_ptr::exception_ptr(__safe_bool)\n-_GLIBCXX_USE_NOEXCEPT\n+std::__exception_ptr::exception_ptr::exception_ptr(__safe_bool) noexcept\n : _M_exception_object(0) { }\n \n \n std::__exception_ptr::\n-exception_ptr::exception_ptr(const exception_ptr& other) _GLIBCXX_USE_NOEXCEPT\n+exception_ptr::exception_ptr(const exception_ptr& other) noexcept\n : _M_exception_object(other._M_exception_object)\n { _M_addref(); }\n \n \n-std::__exception_ptr::exception_ptr::~exception_ptr() _GLIBCXX_USE_NOEXCEPT\n+std::__exception_ptr::exception_ptr::~exception_ptr() noexcept\n { _M_release(); }\n \n \n std::__exception_ptr::exception_ptr&\n std::__exception_ptr::\n-exception_ptr::operator=(const exception_ptr& other) _GLIBCXX_USE_NOEXCEPT\n+exception_ptr::operator=(const exception_ptr& other) noexcept\n {\n   exception_ptr(other).swap(*this);\n   return *this;\n }\n \n \n void\n-std::__exception_ptr::exception_ptr::_M_addref() _GLIBCXX_USE_NOEXCEPT\n+std::__exception_ptr::exception_ptr::_M_addref() noexcept\n {\n   if (_M_exception_object)\n     {\n@@ -109,7 +107,7 @@ std::__exception_ptr::exception_ptr::_M_addref() _GLIBCXX_USE_NOEXCEPT\n \n \n void\n-std::__exception_ptr::exception_ptr::_M_release() _GLIBCXX_USE_NOEXCEPT\n+std::__exception_ptr::exception_ptr::_M_release() noexcept\n {\n   if (_M_exception_object)\n     {\n@@ -128,13 +126,12 @@ std::__exception_ptr::exception_ptr::_M_release() _GLIBCXX_USE_NOEXCEPT\n \n \n void*\n-std::__exception_ptr::exception_ptr::_M_get() const _GLIBCXX_USE_NOEXCEPT\n+std::__exception_ptr::exception_ptr::_M_get() const noexcept\n { return _M_exception_object; }\n \n \n void\n-std::__exception_ptr::exception_ptr::swap(exception_ptr &other)\n-  _GLIBCXX_USE_NOEXCEPT\n+std::__exception_ptr::exception_ptr::swap(exception_ptr &other) noexcept\n {\n   void *tmp = _M_exception_object;\n   _M_exception_object = other._M_exception_object;\n@@ -144,47 +141,42 @@ std::__exception_ptr::exception_ptr::swap(exception_ptr &other)\n \n // Retained for compatibility with CXXABI_1.3.\n void\n-std::__exception_ptr::exception_ptr::_M_safe_bool_dummy()\n-  _GLIBCXX_USE_NOEXCEPT { }\n+std::__exception_ptr::exception_ptr::_M_safe_bool_dummy() noexcept { }\n \n \n // Retained for compatibility with CXXABI_1.3.\n bool\n-std::__exception_ptr::exception_ptr::operator!() const _GLIBCXX_USE_NOEXCEPT\n+std::__exception_ptr::exception_ptr::operator!() const noexcept\n { return _M_exception_object == 0; }\n \n \n // Retained for compatibility with CXXABI_1.3.\n-std::__exception_ptr::exception_ptr::operator __safe_bool() const\n-_GLIBCXX_USE_NOEXCEPT\n+std::__exception_ptr::exception_ptr::operator __safe_bool() const noexcept\n {\n   return _M_exception_object ? &exception_ptr::_M_safe_bool_dummy : 0;\n }\n \n \n const std::type_info*\n-std::__exception_ptr::exception_ptr::__cxa_exception_type() const\n-  _GLIBCXX_USE_NOEXCEPT\n+std::__exception_ptr::exception_ptr::__cxa_exception_type() const noexcept\n {\n   __cxa_exception *eh = __get_exception_header_from_obj (_M_exception_object);\n   return eh->exceptionType;\n }\n \n \n bool std::__exception_ptr::operator==(const exception_ptr& lhs,\n-\t\t\t\t      const exception_ptr& rhs)\n-  _GLIBCXX_USE_NOEXCEPT\n+\t\t\t\t      const exception_ptr& rhs) noexcept\n { return lhs._M_exception_object == rhs._M_exception_object; }\n \n \n bool std::__exception_ptr::operator!=(const exception_ptr& lhs,\n-\t\t\t\t      const exception_ptr& rhs)\n-  _GLIBCXX_USE_NOEXCEPT\n+\t\t\t\t      const exception_ptr& rhs) noexcept\n { return !(lhs == rhs);}\n \n \n std::exception_ptr\n-std::current_exception() _GLIBCXX_USE_NOEXCEPT\n+std::current_exception() noexcept\n {\n   __cxa_eh_globals *globals = __cxa_get_globals ();\n   __cxa_exception *header = globals->caughtExceptions;"}]}