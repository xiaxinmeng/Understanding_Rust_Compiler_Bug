{"sha": "ebea03e03e7025644f2bb4c35236bef0afe543ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJlYTAzZTAzZTcwMjU2NDRmMmJiNGMzNTIzNmJlZjBhZmU1NDNhZQ==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2010-01-18T21:18:49Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2010-01-18T21:18:49Z"}, "message": "re PR c++/42634 (ICE with -g -O2 -std=c++0x   in copy_fn_p, at cp/decl.c:9973)\n\nFix PR c++/42634\n\ngcc/cp/ChangeLog:\n    PR c++/42634\n    * error.c (dump_template_parms): Use innermost template\n    arguments before calling count_non_default_template_args.\n    (count_non_default_template_args): We are being called with\n    template innermost arguments now. There is no need to ensure\n    that again.\n\ngcc/testsuite/ChangeLog:\n    PR c++/42634\n    * g++.dg/template/error45.C: New test.\n\nFrom-SVN: r156022", "tree": {"sha": "8fd40aebdba83748613d1885f6010db43dbfb492", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fd40aebdba83748613d1885f6010db43dbfb492"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebea03e03e7025644f2bb4c35236bef0afe543ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebea03e03e7025644f2bb4c35236bef0afe543ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebea03e03e7025644f2bb4c35236bef0afe543ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebea03e03e7025644f2bb4c35236bef0afe543ae/comments", "author": null, "committer": null, "parents": [{"sha": "a5cf630e39611a1e7461aa0d17bed196f60bd710", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5cf630e39611a1e7461aa0d17bed196f60bd710", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5cf630e39611a1e7461aa0d17bed196f60bd710"}], "stats": {"total": 55, "additions": 51, "deletions": 4}, "files": [{"sha": "5325a6c9e14231abbe3b4caec1563ce18e111c69", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebea03e03e7025644f2bb4c35236bef0afe543ae/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebea03e03e7025644f2bb4c35236bef0afe543ae/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ebea03e03e7025644f2bb4c35236bef0afe543ae", "patch": "@@ -1,3 +1,12 @@\n+2010-01-18  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/42634\n+\t* error.c (dump_template_parms): Use innermost template\n+\targuments before calling count_non_default_template_args.\n+\t(count_non_default_template_args): We are being called with\n+\ttemplate innermost arguments now. There is no need to ensure\n+\tthat again.\n+\n 2010-01-18  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/42766"}, {"sha": "54e96810f9bc696ce43e818a0e75893bbe021c24", "filename": "gcc/cp/error.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebea03e03e7025644f2bb4c35236bef0afe543ae/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebea03e03e7025644f2bb4c35236bef0afe543ae/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=ebea03e03e7025644f2bb4c35236bef0afe543ae", "patch": "@@ -165,8 +165,7 @@ dump_template_argument (tree arg, int flags)\n static int\n count_non_default_template_args (tree args, tree params, int flags)\n {\n-  tree inner_args = INNERMOST_TEMPLATE_ARGS (args);\n-  int n = TREE_VEC_LENGTH (inner_args);\n+  int n = TREE_VEC_LENGTH (args);\n   int last;\n \n   if (params == NULL_TREE\n@@ -195,7 +194,7 @@ count_non_default_template_args (tree args, tree params, int flags)\n \t\t\t\t       NULL_TREE, false, true);\n \t  --processing_template_decl;\n \t}\n-      if (!cp_tree_equal (TREE_VEC_ELT (inner_args, last), def))\n+      if (!cp_tree_equal (TREE_VEC_ELT (args, last), def))\n         break;\n     }\n \n@@ -1492,9 +1491,9 @@ dump_template_parms (tree info, int primary, int flags)\n \t\t     ? DECL_INNERMOST_TEMPLATE_PARMS (TI_TEMPLATE (info))\n \t\t     : NULL_TREE);\n \n+      args = INNERMOST_TEMPLATE_ARGS (args);\n       len = count_non_default_template_args (args, params, flags);\n \n-      args = INNERMOST_TEMPLATE_ARGS (args);\n       for (ix = 0; ix != len; ix++)\n \t{\n \t  tree arg = TREE_VEC_ELT (args, ix);"}, {"sha": "5383251540536c324dd550efd3d63ac5a5f57eba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebea03e03e7025644f2bb4c35236bef0afe543ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebea03e03e7025644f2bb4c35236bef0afe543ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ebea03e03e7025644f2bb4c35236bef0afe543ae", "patch": "@@ -1,3 +1,8 @@\n+2010-01-18  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/42634\n+\t* g++.dg/template/error45.C: New test.\n+\n 2010-01-18  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/42766"}, {"sha": "f5332ee7144f00b09caa5d5ff529e5ee822cca58", "filename": "gcc/testsuite/g++.dg/template/error45.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebea03e03e7025644f2bb4c35236bef0afe543ae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror45.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebea03e03e7025644f2bb4c35236bef0afe543ae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror45.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror45.C?ref=ebea03e03e7025644f2bb4c35236bef0afe543ae", "patch": "@@ -0,0 +1,34 @@\n+// Origin PR c++/42634\n+// { dg-options \"-g -std=gnu++0x\" }\n+// { dg-do compile }\n+\n+template<typename T> T declval();\n+\n+template<typename T, typename... Args> struct is_constructible {\n+    template<typename T1, typename... Args1> static decltype(T1(declval<Args1>()...), char()) test();\n+    static const bool value = sizeof(test<T, Args...>()) == 1;\n+};\n+template<bool> struct enable_if {\n+        typedef void type;\n+};\n+template<class T1, class T2> struct pair {\n+    template<class U2,\n+             class = typename enable_if<is_constructible<T2,U2&&>::value>::type\n+             >\n+    pair(const T1&, U2&&) { }\n+};\n+struct string {\n+  string() : p(0) {}\n+  char* p;\n+};\n+\n+struct Foo {\n+  string s;\n+  int i;\n+};\n+\n+void f()\n+{\n+  pair<int, Foo>(1, Foo());\n+}\n+"}]}