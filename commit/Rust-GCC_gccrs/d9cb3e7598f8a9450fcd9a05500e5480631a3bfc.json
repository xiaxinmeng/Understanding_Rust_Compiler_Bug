{"sha": "d9cb3e7598f8a9450fcd9a05500e5480631a3bfc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDljYjNlNzU5OGY4YTk0NTBmY2Q5YTA1NTAwZTU0ODA2MzFhM2JmYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-05-04T12:08:45Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-05-04T12:08:45Z"}, "message": "libstdc++/70940 Start fixing polymorphic memory resources\n\n\tPR libstdc++/70940\n\t* include/experimental/memory_resource\n\t(__resource_adaptor_imp::do_allocate): Do not default-construct\n\trebound allocator.\n\t(__resource_adaptor_imp::do_deallocate): Likewise. Use\n\tallocator_traits to get pointer type.\n\t(__null_memory_resource::do_allocate): Remove unused parameters.\n\t(__null_memory_resource::do_deallocate): Likewise.\n\t(__null_memory_resource::do_is_equal): Likewise. Add return statement.\n\t* testsuite/experimental/type_erased_allocator/1.cc: Combine with ...\n\t* testsuite/experimental/type_erased_allocator/1_neg.cc: This, and\n\tmove to ...\n\t* testsuite/experimental/memory_resource/1.cc: Here.\n\t* testsuite/experimental/memory_resource/null_memory_resource.cc: New.\n\t* testsuite/experimental/memory_resource/resource_adaptor.cc: New.\n\nFrom-SVN: r235868", "tree": {"sha": "1c4baef6fea058d1549d78722c2267d0af33601e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c4baef6fea058d1549d78722c2267d0af33601e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9cb3e7598f8a9450fcd9a05500e5480631a3bfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9cb3e7598f8a9450fcd9a05500e5480631a3bfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9cb3e7598f8a9450fcd9a05500e5480631a3bfc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9cb3e7598f8a9450fcd9a05500e5480631a3bfc/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da5b1ec120cd4f8e68ff9f83f52a93f3a15bfb74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da5b1ec120cd4f8e68ff9f83f52a93f3a15bfb74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da5b1ec120cd4f8e68ff9f83f52a93f3a15bfb74"}], "stats": {"total": 198, "additions": 167, "deletions": 31}, "files": [{"sha": "89e4d1b2272c37e525455ae34c3c5441cf21f08c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9cb3e7598f8a9450fcd9a05500e5480631a3bfc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9cb3e7598f8a9450fcd9a05500e5480631a3bfc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d9cb3e7598f8a9450fcd9a05500e5480631a3bfc", "patch": "@@ -1,3 +1,21 @@\n+2016-05-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/70940\n+\t* include/experimental/memory_resource\n+\t(__resource_adaptor_imp::do_allocate): Do not default-construct\n+\trebound allocator.\n+\t(__resource_adaptor_imp::do_deallocate): Likewise. Use\n+\tallocator_traits to get pointer type.\n+\t(__null_memory_resource::do_allocate): Remove unused parameters.\n+\t(__null_memory_resource::do_deallocate): Likewise.\n+\t(__null_memory_resource::do_is_equal): Likewise. Add return statement.\n+\t* testsuite/experimental/type_erased_allocator/1.cc: Combine with ...\n+\t* testsuite/experimental/type_erased_allocator/1_neg.cc: This, and\n+\tmove to ...\n+\t* testsuite/experimental/memory_resource/1.cc: Here.\n+\t* testsuite/experimental/memory_resource/null_memory_resource.cc: New.\n+\t* testsuite/experimental/memory_resource/resource_adaptor.cc: New.\n+\n 2016-04-29  Chris Gregory  <czipperz@gmail.com>\n \n \t* config/*: Remove trailing whitespace."}, {"sha": "ea8afb89e02a1f3224ead0191123b72e6f5b4227", "filename": "libstdc++-v3/include/experimental/memory_resource", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9cb3e7598f8a9450fcd9a05500e5480631a3bfc/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9cb3e7598f8a9450fcd9a05500e5480631a3bfc/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource?ref=d9cb3e7598f8a9450fcd9a05500e5480631a3bfc", "patch": "@@ -282,7 +282,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tsize_t __new_size = _S_aligned_size(__bytes,\n \t\t\t\t\t    _S_supported(__alignment) ?\n \t\t\t\t\t    __alignment : _S_max_align);\n-\treturn _Aligned_alloc().allocate(__new_size);\n+\treturn _Aligned_alloc(_M_alloc).allocate(__new_size);\n       }\n \n       virtual void\n@@ -292,9 +292,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tsize_t __new_size = _S_aligned_size(__bytes,\n \t\t\t\t\t    _S_supported(__alignment) ?\n \t\t\t\t\t    __alignment : _S_max_align);\n-\t_Aligned_alloc().deallocate(static_cast<typename\n-\t\t\t\t    _Aligned_alloc::pointer>(__p),\n-\t\t\t\t    __new_size);\n+\tusing _Ptr = typename allocator_traits<_Aligned_alloc>::pointer;\n+\t_Aligned_alloc(_M_alloc).deallocate(static_cast<_Ptr>(__p),\n+\t\t\t\t\t    __new_size);\n       }\n \n       virtual bool\n@@ -306,8 +306,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     private:\n       // Calculate Aligned Size\n-      // Returns a size that is larger than or equal to __size and divided by\n-      // __alignment, where __alignment is required to be the power of 2.\n+      // Returns a size that is larger than or equal to __size and divisible\n+      // by __alignment, where __alignment is required to be the power of 2.\n       static size_t\n       _S_aligned_size(size_t __size, size_t __alignment)\n       { return ((__size - 1)|(__alignment - 1)) + 1; }\n@@ -342,16 +342,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n     protected:\n       void*\n-      do_allocate(size_t __bytes, size_t __alignment)\n+      do_allocate(size_t, size_t)\n       { std::__throw_bad_alloc(); }\n \n       void\n-      do_deallocate(void* __p, size_t __bytes, size_t __alignment)\n+      do_deallocate(void*, size_t, size_t) noexcept\n       { }\n \n       bool\n       do_is_equal(const memory_resource& __other) const noexcept\n-      { }\n+      { return this == &__other; }\n \n       friend memory_resource* null_memory_resource() noexcept;\n     };"}, {"sha": "38cbd2762f2e3a480802751816de31105ff4192f", "filename": "libstdc++-v3/testsuite/experimental/memory_resource/1.cc", "status": "renamed", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9cb3e7598f8a9450fcd9a05500e5480631a3bfc/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9cb3e7598f8a9450fcd9a05500e5480631a3bfc/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2F1.cc?ref=d9cb3e7598f8a9450fcd9a05500e5480631a3bfc", "patch": "@@ -17,9 +17,9 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-#include <memory>\n #include <experimental/memory_resource>\n #include <vector>\n+#include <cstdlib>\n #include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n \n@@ -36,14 +36,15 @@ struct A\n   static int ctor_count;\n   static int dtor_count;\n };\n+\n int A::ctor_count = 0;\n int A::dtor_count = 0;\n \n struct CountedResource : public memory_resource\n {\n public:\n   CountedResource() = default;\n-  ~ CountedResource() = default;\n+  ~CountedResource() = default;\n \n   static size_t get_alloc_count()  { return alloc_count;  }\n   static size_t get_dalloc_count() { return dalloc_count; }\n@@ -54,23 +55,23 @@ struct CountedResource : public memory_resource\n   void* do_allocate(size_t bytes, size_t alignment)\n   {\n     alloc_count += bytes;\n-    if (auto ptr = std::malloc(bytes)) {\n+    if (auto ptr = std::malloc(bytes))\n       return ptr;\n-    }\n     throw std::bad_alloc();\n   }\n \n   void do_deallocate(void *p, size_t bytes, size_t alignment)\n   {\n     dalloc_count += bytes;\n-    free(p);\n+    std::free(p);\n   }\n \n   bool do_is_equal(const memory_resource& __other) const noexcept\n   { return this == &__other; }\n };\n-  size_t  CountedResource::alloc_count  = 0;\n-  size_t  CountedResource::dalloc_count = 0;\n+\n+size_t CountedResource::alloc_count  = 0;\n+size_t CountedResource::dalloc_count = 0;\n \n void clear()\n {\n@@ -81,8 +82,11 @@ void clear()\n }\n \n // memory resource\n-void test01()\n+void\n+test01()\n {\n+  bool test __attribute((unused)) = false;\n+\n   memory_resource* r = new_delete_resource();\n   VERIFY(get_default_resource() == r);\n   void *p = get_default_resource()->allocate(5);\n@@ -101,8 +105,11 @@ void test01()\n }\n \n // polymorphic_allocator\n-void test02()\n+void\n+test02()\n {\n+  bool test __attribute((unused)) = false;\n+\n   clear();\n   {\n     CountedResource cr;\n@@ -115,7 +122,11 @@ void test02()\n   VERIFY(CountedResource::get_dalloc_count() == 5);\n }\n \n-void test03() {\n+void\n+test03()\n+{\n+  bool test __attribute((unused)) = false;\n+\n   clear();\n   CountedResource cr;\n   polymorphic_allocator<A> pa(&cr);\n@@ -129,18 +140,22 @@ void test03() {\n   VERIFY(CountedResource::get_dalloc_count() == 1);\n }\n \n-void test04() {\n+void\n+test04()\n+{\n+  bool test __attribute((unused)) = false;\n+\n   polymorphic_allocator<A> pa1(get_default_resource());\n   polymorphic_allocator<A> pa2(get_default_resource());\n   VERIFY(pa1 == pa2);\n   polymorphic_allocator<A> pa3 = pa2.select_on_container_copy_construction();\n   VERIFY(pa1 == pa3);\n }\n \n-int main() {\n+int main()\n+{\n   test01();\n   test02();\n   test03();\n   test04();\n-  return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/experimental/type_erased_allocator/1.cc"}, {"sha": "c84436a2eba040ad7a339b3f809818e15b029721", "filename": "libstdc++-v3/testsuite/experimental/memory_resource/null_memory_resource.cc", "status": "renamed", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9cb3e7598f8a9450fcd9a05500e5480631a3bfc/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2Fnull_memory_resource.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9cb3e7598f8a9450fcd9a05500e5480631a3bfc/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2Fnull_memory_resource.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2Fnull_memory_resource.cc?ref=d9cb3e7598f8a9450fcd9a05500e5480631a3bfc", "patch": "@@ -1,7 +1,6 @@\n-// { dg-do run { xfail *-*-* } }\n // { dg-options \"-std=gnu++14\" }\n \n-// Copyright (C) 2015-2016 Free Software Foundation, Inc.\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,17 +19,34 @@\n \n #include <experimental/memory_resource>\n #include <testsuite_hooks.h>\n-#include <testsuite_allocator.h>\n \n-using std::experimental::pmr::polymorphic_allocator;\n-using std::experimental::pmr::null_memory_resource;\n using std::experimental::pmr::memory_resource;\n+using std::experimental::pmr::null_memory_resource;\n+using std::experimental::pmr::new_delete_resource;\n+\n+// null_memory_resource\n+void\n+test06()\n+{\n+  bool test __attribute((unused)) = false;\n \n-void test01() {\n   memory_resource* r = null_memory_resource();\n-  auto p = r->allocate(1);\n+  bool caught = false;\n+\n+  void* p = nullptr;\n+  try {\n+    p = r->allocate(1);\n+  } catch (const std::bad_alloc&) {\n+    caught = true;\n+  }\n+  VERIFY( caught );\n+\n+  VERIFY( *r == *r );\n+  VERIFY( r->is_equal(*r) );\n+  VERIFY( !r->is_equal(*new_delete_resource()) );\n }\n \n-int main() {\n-  test01();\n+int main()\n+{\n+  test06();\n }", "previous_filename": "libstdc++-v3/testsuite/experimental/type_erased_allocator/1_neg.cc"}, {"sha": "299bb72ea4b625fcb3a0fc4920255ee7cb472250", "filename": "libstdc++-v3/testsuite/experimental/memory_resource/resource_adaptor.cc", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9cb3e7598f8a9450fcd9a05500e5480631a3bfc/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2Fresource_adaptor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9cb3e7598f8a9450fcd9a05500e5480631a3bfc/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2Fresource_adaptor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2Fresource_adaptor.cc?ref=d9cb3e7598f8a9450fcd9a05500e5480631a3bfc", "patch": "@@ -0,0 +1,87 @@\n+// { dg-options \"-std=gnu++14\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/memory_resource>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+using std::experimental::pmr::memory_resource;\n+using std::experimental::pmr::resource_adaptor;\n+\n+template<typename T>\n+  struct Allocator : __gnu_test::SimpleAllocator<T>\n+  {\n+    Allocator(int) { } // not default constructible\n+\n+    template<typename U>\n+      Allocator(const Allocator<U>&) { }\n+  };\n+\n+template<typename T>\n+  bool aligned(void* p)\n+  {\n+    return (reinterpret_cast<std::uintptr_t>(p) % alignof(T)) == 0;\n+  }\n+\n+// resource_adaptor\n+void\n+test05()\n+{\n+  bool test __attribute((unused)) = false;\n+  using std::max_align_t;\n+  using std::uintptr_t;\n+  void* p = nullptr;\n+\n+  Allocator<int> a1(1), a2(2); // minimal interface allocators\n+  resource_adaptor<decltype(a1)> r1(a1), r2(a2);\n+  VERIFY( r1 == r1 );\n+  VERIFY( r1 == r2 );\n+  p = r1.allocate(1);\n+  VERIFY( aligned<max_align_t>(p) );\n+  r1.deallocate(p, 1);\n+  p = r1.allocate(1, alignof(short));\n+  VERIFY( aligned<short>(p) );\n+  r1.deallocate(p, 1, alignof(short));\n+  p = r1.allocate(1, alignof(long));\n+  VERIFY( aligned<long>(p) );\n+  r1.deallocate(p, 1, alignof(long));\n+\n+  __gnu_test::uneq_allocator<double> a3(3), a4(4); // non-equal allocators\n+  resource_adaptor<decltype(a3)> r3(a3), r4(a4);\n+  VERIFY( r3 == r3 );\n+  VERIFY( r4 == r4 );\n+  VERIFY( r3 != r4 );\n+  p = r3.allocate(1);\n+  VERIFY( aligned<max_align_t>(p) );\n+  r3.deallocate(p, 1);\n+  p = r3.allocate(1, alignof(short));\n+  VERIFY( aligned<short>(p) );\n+  r3.deallocate(p, 1, alignof(short));\n+  p = r3.allocate(1, alignof(long));\n+  VERIFY( aligned<long>(p) );\n+  r3.deallocate(p, 1, alignof(long));\n+\n+  // TODO test with an allocator that doesn't use new or malloc, so\n+  // returns pointers that are not suitably aligned for any type.\n+}\n+\n+int main()\n+{\n+  test05();\n+}"}]}