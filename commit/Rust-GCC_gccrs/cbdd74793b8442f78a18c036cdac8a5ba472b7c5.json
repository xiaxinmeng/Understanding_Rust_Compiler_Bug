{"sha": "cbdd74793b8442f78a18c036cdac8a5ba472b7c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JkZDc0NzkzYjg0NDJmNzhhMThjMDM2Y2RhYzhhNWJhNDcyYjdjNQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2009-12-17T19:32:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-12-17T19:32:32Z"}, "message": "re PR debug/41679 (internal compiler error: in loc_cmp, at var-tracking.c:2433)\n\n\tPR debug/41679\n\t* var-tracking.c (count_uses): Count MO_VAL_USE of original\n\tMO_VAL_SET value for COND_EXEC.\n\t(add_stores): Handle conditional stores.\n\nFrom-SVN: r155324", "tree": {"sha": "4db1da8a91f4f0e40164e1fc432e5ce5b3c4d9f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4db1da8a91f4f0e40164e1fc432e5ce5b3c4d9f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbdd74793b8442f78a18c036cdac8a5ba472b7c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbdd74793b8442f78a18c036cdac8a5ba472b7c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbdd74793b8442f78a18c036cdac8a5ba472b7c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbdd74793b8442f78a18c036cdac8a5ba472b7c5/comments", "author": null, "committer": null, "parents": [{"sha": "951d44970a5d7420134fe3902621a3e37f02be84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/951d44970a5d7420134fe3902621a3e37f02be84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/951d44970a5d7420134fe3902621a3e37f02be84"}], "stats": {"total": 55, "additions": 53, "deletions": 2}, "files": [{"sha": "2ac875f3c379145e052c59e31854776f0d96acbe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbdd74793b8442f78a18c036cdac8a5ba472b7c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbdd74793b8442f78a18c036cdac8a5ba472b7c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cbdd74793b8442f78a18c036cdac8a5ba472b7c5", "patch": "@@ -1,5 +1,10 @@\n 2009-12-17  Alexandre Oliva  <aoliva@redhat.com>\n \n+\tPR debug/41679\n+\t* var-tracking.c (count_uses): Count MO_VAL_USE of original\n+\tMO_VAL_SET value for COND_EXEC.\n+\t(add_stores): Handle conditional stores.\n+\n \tPR debug/41679\n \t* var-tracking.c (use_type): Remove indirection from loc.\n \t(count_uses): Dereference incoming loc early."}, {"sha": "db7778b8e74b44f570d5a0ab219cfdc4956f15e0", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbdd74793b8442f78a18c036cdac8a5ba472b7c5/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbdd74793b8442f78a18c036cdac8a5ba472b7c5/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=cbdd74793b8442f78a18c036cdac8a5ba472b7c5", "patch": "@@ -4509,7 +4509,28 @@ count_uses (rtx *ploc, void *cuip)\n \n \t  val = find_use_val (loc, mode, cui);\n \t  if (val)\n-\t    cselib_preserve_value (val);\n+\t    {\n+\t      if (mopt == MO_VAL_SET\n+\t\t  && GET_CODE (PATTERN (cui->insn)) == COND_EXEC\n+\t\t  && (REG_P (loc)\n+\t\t      || (MEM_P (loc)\n+\t\t\t  && (use_type (loc, NULL, NULL) == MO_USE\n+\t\t\t      || cui->sets))))\n+\t\t{\n+\t\t  cselib_val *oval = cselib_lookup (loc, GET_MODE (loc), 0);\n+\n+\t\t  gcc_assert (oval != val);\n+\t\t  gcc_assert (REG_P (loc) || MEM_P (loc));\n+\n+\t\t  if (!cselib_preserved_value_p (oval))\n+\t\t    {\n+\t\t      VTI (cui->bb)->n_mos++;\n+\t\t      cselib_preserve_value (oval);\n+\t\t    }\n+\t\t}\n+\n+\t      cselib_preserve_value (val);\n+\t    }\n \t  else\n \t    gcc_assert (mopt == MO_VAL_LOC);\n \n@@ -4905,7 +4926,32 @@ add_stores (rtx loc, const_rtx expr, void *cuip)\n   if (nloc)\n     oloc = nloc;\n \n-  if (resolve && GET_CODE (mo->u.loc) == SET)\n+  if (GET_CODE (PATTERN (cui->insn)) == COND_EXEC)\n+    {\n+      cselib_val *oval = cselib_lookup (oloc, GET_MODE (oloc), 0);\n+\n+      gcc_assert (oval != v);\n+      gcc_assert (REG_P (oloc) || MEM_P (oloc));\n+\n+      if (!cselib_preserved_value_p (oval))\n+\t{\n+\t  micro_operation *nmo = VTI (bb)->mos + VTI (bb)->n_mos++;\n+\n+\t  cselib_preserve_value (oval);\n+\n+\t  nmo->type = MO_VAL_USE;\n+\t  nmo->u.loc = gen_rtx_CONCAT (mode, oval->val_rtx, oloc);\n+\t  VAL_NEEDS_RESOLUTION (nmo->u.loc) = 1;\n+\t  nmo->insn = mo->insn;\n+\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    log_op_type (nmo->u.loc, cui->bb, cui->insn,\n+\t\t\t nmo->type, dump_file);\n+\t}\n+\n+      resolve = false;\n+    }\n+  else if (resolve && GET_CODE (mo->u.loc) == SET)\n     {\n       nloc = replace_expr_with_values (SET_SRC (expr));\n "}]}