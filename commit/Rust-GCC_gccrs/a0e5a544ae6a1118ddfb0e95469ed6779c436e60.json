{"sha": "a0e5a544ae6a1118ddfb0e95469ed6779c436e60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBlNWE1NDRhZTZhMTExOGRkZmIwZTk1NDY5ZWQ2Nzc5YzQzNmU2MA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-05-26T07:04:21Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-05-26T07:04:21Z"}, "message": "alpha.c (alpha_comparison_operator): Don't be so strict about DImode.\n\n        * config/alpha/alpha.c (alpha_comparison_operator): Don't be\n        so strict about DImode.\n        (alpha_swapped_comparison_operator): Likewise.\n        * config/alpha/alpha.md (*setne_internal): Name it.  Allow\n        any integer output mode.\n        (*setcc_internal): Likewise.\n        (*setcc_swapped_internal): Likewise.\n        (*movdicc_internal, *movdicc_lbc, *movdicc_lbs): Name them.\n        (*mov[qhs]icc_internal): New.\n        (*mov[qhs]icc_lbc, *mov[qhs]icc_lbs): New.\n\nFrom-SVN: r34188", "tree": {"sha": "f056ef44c13907c49467a4f7aa222eec837b74fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f056ef44c13907c49467a4f7aa222eec837b74fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0e5a544ae6a1118ddfb0e95469ed6779c436e60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e5a544ae6a1118ddfb0e95469ed6779c436e60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0e5a544ae6a1118ddfb0e95469ed6779c436e60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e5a544ae6a1118ddfb0e95469ed6779c436e60/comments", "author": null, "committer": null, "parents": [{"sha": "b49425e47c5179a756a2173f0bf32df39186837a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b49425e47c5179a756a2173f0bf32df39186837a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b49425e47c5179a756a2173f0bf32df39186837a"}], "stats": {"total": 187, "additions": 164, "deletions": 23}, "files": [{"sha": "86f6662ca2b202223f7a4f8e2df912bcc055436b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e5a544ae6a1118ddfb0e95469ed6779c436e60/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e5a544ae6a1118ddfb0e95469ed6779c436e60/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0e5a544ae6a1118ddfb0e95469ed6779c436e60", "patch": "@@ -1,3 +1,16 @@\n+2000-05-25  Richard Henderson  <rth@cygnus.com>\n+\n+\t* config/alpha/alpha.c (alpha_comparison_operator): Don't be\n+\tso strict about DImode.\n+\t(alpha_swapped_comparison_operator): Likewise.\n+\t* config/alpha/alpha.md (*setne_internal): Name it.  Allow\n+\tany integer output mode.\n+\t(*setcc_internal): Likewise.\n+\t(*setcc_swapped_internal): Likewise.\n+\t(*movdicc_internal, *movdicc_lbc, *movdicc_lbs): Name them.\n+\t(*mov[qhs]icc_internal): New.\n+\t(*mov[qhs]icc_lbc, *mov[qhs]icc_lbs): New.\n+\n 2000-05-25  J. David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* vax.h (CPP_SPEC): Define __GFLOAT and GFLOAT when -mg is specified."}, {"sha": "41f7f6c5bfec2f13d677a24db9b7445147229d24", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e5a544ae6a1118ddfb0e95469ed6779c436e60/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e5a544ae6a1118ddfb0e95469ed6779c436e60/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=a0e5a544ae6a1118ddfb0e95469ed6779c436e60", "patch": "@@ -714,7 +714,7 @@ alpha_comparison_operator (op, mode)\n     return 0;\n \n   return (code == EQ || code == LE || code == LT\n-\t  || (mode == DImode && (code == LEU || code == LTU)));\n+\t  || code == LEU || code == LTU);\n }\n \n /* Return 1 if OP is a valid Alpha swapped comparison operator.  */\n@@ -732,7 +732,7 @@ alpha_swapped_comparison_operator (op, mode)\n \n   code = swap_condition (code);\n   return (code == EQ || code == LE || code == LT\n-\t  || (mode == DImode && (code == LEU || code == LTU)));\n+\t  || code == LEU || code == LTU);\n }\n \n /* Return 1 if OP is a signed comparison operation.  */"}, {"sha": "f1c1340f7261f394c92d2bf7563d498f9fe546f9", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 149, "deletions": 21, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e5a544ae6a1118ddfb0e95469ed6779c436e60/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e5a544ae6a1118ddfb0e95469ed6779c436e60/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=a0e5a544ae6a1118ddfb0e95469ed6779c436e60", "patch": "@@ -2495,68 +2495,151 @@\n ;; Next are all the integer comparisons, and conditional moves and branches\n ;; and some of the related define_expand's and define_split's.\n \n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(ne:DI (match_operand:DI 1 \"reg_or_8bit_operand\" \"rI\")\n-\t       (const_int 0)))]\n-  \"\"\n+(define_insn \"*setne_internal\"\n+  [(set (match_operand 0 \"register_operand\" \"=r\")\n+\t(ne (match_operand:DI 1 \"reg_or_8bit_operand\" \"rI\")\n+\t    (const_int 0)))]\n+  \"GET_MODE_CLASS (GET_MODE (operands[0])) == MODE_INT\n+   && GET_MODE_SIZE (GET_MODE (operands[0])) <= 8\n+   && GET_MODE (operands[0]) == GET_MODE (SET_SRC (PATTERN (insn)))\"\n   \"cmpult $31,%1,%0\"\n   [(set_attr \"type\" \"icmp\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(match_operator:DI 1 \"alpha_comparison_operator\"\n+(define_insn \"*setcc_internal\"\n+  [(set (match_operand 0 \"register_operand\" \"=r\")\n+\t(match_operator 1 \"alpha_comparison_operator\"\n \t\t\t   [(match_operand:DI 2 \"reg_or_0_operand\" \"rJ\")\n \t\t\t    (match_operand:DI 3 \"reg_or_8bit_operand\" \"rI\")]))]\n-  \"\"\n+  \"GET_MODE_CLASS (GET_MODE (operands[0])) == MODE_INT\n+   && GET_MODE_SIZE (GET_MODE (operands[0])) <= 8\n+   && GET_MODE (operands[0]) == GET_MODE (operands[1])\"\n   \"cmp%C1 %r2,%3,%0\"\n   [(set_attr \"type\" \"icmp\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (match_operator:DI 1 \"alpha_swapped_comparison_operator\"\n+(define_insn \"*setcc_swapped_internal\"\n+  [(set (match_operand 0 \"register_operand\" \"=r\")\n+        (match_operator 1 \"alpha_swapped_comparison_operator\"\n \t\t\t   [(match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\n \t\t\t    (match_operand:DI 3 \"reg_or_0_operand\" \"rJ\")]))]\n-  \"\"\n+  \"GET_MODE_CLASS (GET_MODE (operands[0])) == MODE_INT\n+   && GET_MODE_SIZE (GET_MODE (operands[0])) <= 8\n+   && GET_MODE (operands[0]) == GET_MODE (operands[1])\"\n   \"cmp%c1 %r3,%2,%0\"\n   [(set_attr \"type\" \"icmp\")])\n \n-;; This pattern exists so conditional moves of SImode values are handled.\n-;; Comparisons are still done in DImode though.\n+;; The mode folding trick can't be used with const_int operands, since\n+;; reload needs to know the proper mode.\n \n-(define_insn \"\"\n+(define_insn \"*movqicc_internal\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=r,r,r,r\")\n+\t(if_then_else:QI\n+\t (match_operator 2 \"signed_comparison_operator\"\n+\t\t\t [(match_operand:DI 3 \"reg_or_0_operand\" \"rJ,rJ,J,J\")\n+\t\t\t  (match_operand:DI 4 \"reg_or_0_operand\" \"J,J,rJ,rJ\")])\n+\t (match_operand:QI 1 \"reg_or_8bit_operand\" \"rI,0,rI,0\")\n+\t (match_operand:QI 5 \"reg_or_8bit_operand\" \"0,rI,0,rI\")))]\n+  \"(operands[3] == const0_rtx || operands[4] == const0_rtx)\"\n+  \"@\n+   cmov%C2 %r3,%1,%0\n+   cmov%D2 %r3,%5,%0\n+   cmov%c2 %r4,%1,%0\n+   cmov%d2 %r4,%5,%0\"\n+  [(set_attr \"type\" \"icmov\")])\n+\n+(define_insn \"*movhicc_internal\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r,r\")\n+\t(if_then_else:HI\n+\t (match_operator 2 \"signed_comparison_operator\"\n+\t\t\t [(match_operand:DI 3 \"reg_or_0_operand\" \"rJ,rJ,J,J\")\n+\t\t\t  (match_operand:DI 4 \"reg_or_0_operand\" \"J,J,rJ,rJ\")])\n+\t (match_operand:HI 1 \"reg_or_8bit_operand\" \"rI,0,rI,0\")\n+\t (match_operand:HI 5 \"reg_or_8bit_operand\" \"0,rI,0,rI\")))]\n+  \"(operands[3] == const0_rtx || operands[4] == const0_rtx)\"\n+  \"@\n+   cmov%C2 %r3,%1,%0\n+   cmov%D2 %r3,%5,%0\n+   cmov%c2 %r4,%1,%0\n+   cmov%d2 %r4,%5,%0\"\n+  [(set_attr \"type\" \"icmov\")])\n+\n+(define_insn \"*movsicc_internal\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r\")\n \t(if_then_else:SI\n \t (match_operator 2 \"signed_comparison_operator\"\n \t\t\t [(match_operand:DI 3 \"reg_or_0_operand\" \"rJ,rJ,J,J\")\n \t\t\t  (match_operand:DI 4 \"reg_or_0_operand\" \"J,J,rJ,rJ\")])\n \t (match_operand:SI 1 \"reg_or_8bit_operand\" \"rI,0,rI,0\")\n \t (match_operand:SI 5 \"reg_or_8bit_operand\" \"0,rI,0,rI\")))]\n-  \"operands[3] == const0_rtx || operands[4] == const0_rtx\"\n+  \"(operands[3] == const0_rtx || operands[4] == const0_rtx)\"\n   \"@\n    cmov%C2 %r3,%1,%0\n    cmov%D2 %r3,%5,%0\n    cmov%c2 %r4,%1,%0\n    cmov%d2 %r4,%5,%0\"\n   [(set_attr \"type\" \"icmov\")])\n \n-(define_insn \"\"\n+(define_insn \"*movdicc_internal\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r,r,r\")\n \t(if_then_else:DI\n \t (match_operator 2 \"signed_comparison_operator\"\n \t\t\t [(match_operand:DI 3 \"reg_or_0_operand\" \"rJ,rJ,J,J\")\n \t\t\t  (match_operand:DI 4 \"reg_or_0_operand\" \"J,J,rJ,rJ\")])\n \t (match_operand:DI 1 \"reg_or_8bit_operand\" \"rI,0,rI,0\")\n \t (match_operand:DI 5 \"reg_or_8bit_operand\" \"0,rI,0,rI\")))]\n-  \"operands[3] == const0_rtx || operands[4] == const0_rtx\"\n+  \"(operands[3] == const0_rtx || operands[4] == const0_rtx)\"\n   \"@\n    cmov%C2 %r3,%1,%0\n    cmov%D2 %r3,%5,%0\n    cmov%c2 %r4,%1,%0\n    cmov%d2 %r4,%5,%0\"\n   [(set_attr \"type\" \"icmov\")])\n \n-(define_insn \"\"\n+(define_insn \"*movqicc_lbc\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n+\t(if_then_else:QI\n+\t (eq (zero_extract:DI (match_operand:DI 2 \"reg_or_0_operand\" \"rJ,rJ\")\n+\t\t\t      (const_int 1)\n+\t\t\t      (const_int 0))\n+\t     (const_int 0))\n+\t (match_operand:QI 1 \"reg_or_8bit_operand\" \"rI,0\")\n+\t (match_operand:QI 3 \"reg_or_8bit_operand\" \"0,rI\")))]\n+  \"\"\n+  \"@\n+   cmovlbc %r2,%1,%0\n+   cmovlbs %r2,%3,%0\"\n+  [(set_attr \"type\" \"icmov\")])\n+\n+(define_insn \"*movhicc_lbc\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n+\t(if_then_else:HI\n+\t (eq (zero_extract:DI (match_operand:DI 2 \"reg_or_0_operand\" \"rJ,rJ\")\n+\t\t\t      (const_int 1)\n+\t\t\t      (const_int 0))\n+\t     (const_int 0))\n+\t (match_operand:HI 1 \"reg_or_8bit_operand\" \"rI,0\")\n+\t (match_operand:HI 3 \"reg_or_8bit_operand\" \"0,rI\")))]\n+  \"\"\n+  \"@\n+   cmovlbc %r2,%1,%0\n+   cmovlbs %r2,%3,%0\"\n+  [(set_attr \"type\" \"icmov\")])\n+\n+(define_insn \"*movsicc_lbc\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(if_then_else:SI\n+\t (eq (zero_extract:DI (match_operand:DI 2 \"reg_or_0_operand\" \"rJ,rJ\")\n+\t\t\t      (const_int 1)\n+\t\t\t      (const_int 0))\n+\t     (const_int 0))\n+\t (match_operand:SI 1 \"reg_or_8bit_operand\" \"rI,0\")\n+\t (match_operand:SI 3 \"reg_or_8bit_operand\" \"0,rI\")))]\n+  \"\"\n+  \"@\n+   cmovlbc %r2,%1,%0\n+   cmovlbs %r2,%3,%0\"\n+  [(set_attr \"type\" \"icmov\")])\n+\n+(define_insn \"*movdicc_lbc\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(if_then_else:DI\n \t (eq (zero_extract:DI (match_operand:DI 2 \"reg_or_0_operand\" \"rJ,rJ\")\n@@ -2571,7 +2654,52 @@\n    cmovlbs %r2,%3,%0\"\n   [(set_attr \"type\" \"icmov\")])\n \n-(define_insn \"\"\n+(define_insn \"*movqicc_lbs\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n+\t(if_then_else:QI\n+\t (ne (zero_extract:DI (match_operand:DI 2 \"reg_or_0_operand\" \"rJ,rJ\")\n+\t\t\t      (const_int 1)\n+\t\t\t      (const_int 0))\n+\t     (const_int 0))\n+\t (match_operand:QI 1 \"reg_or_8bit_operand\" \"rI,0\")\n+\t (match_operand:QI 3 \"reg_or_8bit_operand\" \"0,rI\")))]\n+  \"\"\n+  \"@\n+   cmovlbs %r2,%1,%0\n+   cmovlbc %r2,%3,%0\"\n+  [(set_attr \"type\" \"icmov\")])\n+\n+(define_insn \"*movhicc_lbs\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n+\t(if_then_else:HI\n+\t (ne (zero_extract:DI (match_operand:DI 2 \"reg_or_0_operand\" \"rJ,rJ\")\n+\t\t\t      (const_int 1)\n+\t\t\t      (const_int 0))\n+\t     (const_int 0))\n+\t (match_operand:HI 1 \"reg_or_8bit_operand\" \"rI,0\")\n+\t (match_operand:HI 3 \"reg_or_8bit_operand\" \"0,rI\")))]\n+  \"\"\n+  \"@\n+   cmovlbs %r2,%1,%0\n+   cmovlbc %r2,%3,%0\"\n+  [(set_attr \"type\" \"icmov\")])\n+\n+(define_insn \"*movsicc_lbs\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(if_then_else:SI\n+\t (ne (zero_extract:DI (match_operand:DI 2 \"reg_or_0_operand\" \"rJ,rJ\")\n+\t\t\t      (const_int 1)\n+\t\t\t      (const_int 0))\n+\t     (const_int 0))\n+\t (match_operand:SI 1 \"reg_or_8bit_operand\" \"rI,0\")\n+\t (match_operand:SI 3 \"reg_or_8bit_operand\" \"0,rI\")))]\n+  \"\"\n+  \"@\n+   cmovlbs %r2,%1,%0\n+   cmovlbc %r2,%3,%0\"\n+  [(set_attr \"type\" \"icmov\")])\n+\n+(define_insn \"*movdicc_lbs\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(if_then_else:DI\n \t (ne (zero_extract:DI (match_operand:DI 2 \"reg_or_0_operand\" \"rJ,rJ\")"}]}