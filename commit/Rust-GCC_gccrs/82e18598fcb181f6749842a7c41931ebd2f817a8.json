{"sha": "82e18598fcb181f6749842a7c41931ebd2f817a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJlMTg1OThmY2IxODFmNjc0OTg0MmE3YzQxOTMxZWJkMmY4MTdhOA==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2018-03-14T23:31:57Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2018-03-14T23:31:57Z"}, "message": "re PR target/83451 (FAIL: gfortran.dg/matmul_10.f90   -O3 -fomit-frame-pointer -funroll-loops -fpeel-loops -ftracer -finline-functions (ICE))\n\n\tPR target/83451\n\t* config/pa/pa.c (pa_emit_move_sequence):  Always emit secondary reload\n\tinsn for floating-point loads and stores.\n\nFrom-SVN: r258541", "tree": {"sha": "e76beaf5065a4802cfb6ae8bbfe2ae693e37d22e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e76beaf5065a4802cfb6ae8bbfe2ae693e37d22e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82e18598fcb181f6749842a7c41931ebd2f817a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e18598fcb181f6749842a7c41931ebd2f817a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82e18598fcb181f6749842a7c41931ebd2f817a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e18598fcb181f6749842a7c41931ebd2f817a8/comments", "author": null, "committer": null, "parents": [{"sha": "0b3ec8f48f291364676f1e472721391f27995f17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b3ec8f48f291364676f1e472721391f27995f17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b3ec8f48f291364676f1e472721391f27995f17"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "ea4b6640e248b05e8c9a69b440a03661ea163424", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e18598fcb181f6749842a7c41931ebd2f817a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e18598fcb181f6749842a7c41931ebd2f817a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82e18598fcb181f6749842a7c41931ebd2f817a8", "patch": "@@ -1,3 +1,9 @@\n+2018-03-14  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\tPR target/83451\n+\t* config/pa/pa.c (pa_emit_move_sequence):  Always emit secondary reload\n+\tinsn for floating-point loads and stores.\n+\n 2018-03-14  Carl Love  <cel@us.ibm.com>\n \n \t* config/rs6000/rs6000-c.c: Add macro definitions for"}, {"sha": "a32921a779d5e530678229c7390ea8226f07e653", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e18598fcb181f6749842a7c41931ebd2f817a8/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e18598fcb181f6749842a7c41931ebd2f817a8/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=82e18598fcb181f6749842a7c41931ebd2f817a8", "patch": "@@ -1750,9 +1750,7 @@ pa_emit_move_sequence (rtx *operands, machine_mode mode, rtx scratch_reg)\n \t\t}\n \t      else\n \t\temit_move_insn (scratch_reg, XEXP (op1, 0));\n-\t      emit_insn (gen_rtx_SET (operand0,\n-\t\t\t\t  replace_equiv_address (op1, scratch_reg)));\n-\t      return 1;\n+\t      op1 = replace_equiv_address (op1, scratch_reg);\n \t    }\n \t}\n       else if ((!INT14_OK_STRICT && symbolic_memory_operand (op1, VOIDmode))\n@@ -1762,10 +1760,10 @@ pa_emit_move_sequence (rtx *operands, machine_mode mode, rtx scratch_reg)\n \t  /* Load memory address into SCRATCH_REG.  */\n \t  scratch_reg = force_mode (word_mode, scratch_reg);\n \t  emit_move_insn (scratch_reg, XEXP (op1, 0));\n-\t  emit_insn (gen_rtx_SET (operand0,\n-\t\t\t\t  replace_equiv_address (op1, scratch_reg)));\n-\t  return 1;\n+\t  op1 = replace_equiv_address (op1, scratch_reg);\n \t}\n+      emit_insn (gen_rtx_SET (operand0, op1));\n+      return 1;\n     }\n   else if (scratch_reg\n \t   && FP_REG_P (operand1)\n@@ -1803,9 +1801,7 @@ pa_emit_move_sequence (rtx *operands, machine_mode mode, rtx scratch_reg)\n \t\t}\n \t      else\n \t\temit_move_insn (scratch_reg, XEXP (op0, 0));\n-\t      emit_insn (gen_rtx_SET (replace_equiv_address (op0, scratch_reg),\n-\t\t\t\t      operand1));\n-\t      return 1;\n+\t      op0 = replace_equiv_address (op0, scratch_reg);\n \t    }\n \t}\n       else if ((!INT14_OK_STRICT && symbolic_memory_operand (op0, VOIDmode))\n@@ -1815,10 +1811,10 @@ pa_emit_move_sequence (rtx *operands, machine_mode mode, rtx scratch_reg)\n \t  /* Load memory address into SCRATCH_REG.  */\n \t  scratch_reg = force_mode (word_mode, scratch_reg);\n \t  emit_move_insn (scratch_reg, XEXP (op0, 0));\n-\t  emit_insn (gen_rtx_SET (replace_equiv_address (op0, scratch_reg),\n-\t\t\t\t  operand1));\n-\t  return 1;\n+\t  op0 = replace_equiv_address (op0, scratch_reg);\n \t}\n+      emit_insn (gen_rtx_SET (op0, operand1));\n+      return 1;\n     }\n   /* Handle secondary reloads for loads of FP registers from constant\n      expressions by forcing the constant into memory.  For the most part,"}]}