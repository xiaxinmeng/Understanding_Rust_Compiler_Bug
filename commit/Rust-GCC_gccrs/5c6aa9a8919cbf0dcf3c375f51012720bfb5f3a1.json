{"sha": "5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM2YWE5YTg5MTljYmYwZGNmM2MzNzVmNTEwMTI3MjBiZmI1ZjNhMQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-07-29T17:45:24Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-07-29T17:45:24Z"}, "message": "re PR fortran/90813 (gfortran.dg/proc_ptr_51.f90 fails (SIGSEGV) after 272084)\n\n2019-07-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/90813\n\t* dump-parse-tree.c (show_global_symbol): New function.\n\t(gfc_dump_global_symbols): New function.\n\t* gfortran.h (gfc_traverse_gsymbol): Add prototype.\n\t(gfc_dump_global_symbols): Likewise.\n\t* invoke.texi: Document -fdump-fortran-global.\n\t* lang.opt: Add -fdump-fortran-global.\n\t* parse.c (gfc_parse_file): Handle flag_dump_fortran_global.\n\t* symbol.c (gfc_traverse_gsymbol): New function.\n\t* trans-decl.c (sym_identifier): New function.\n\t(mangled_identifier): New function, doing most of the work\n\tof gfc_sym_mangled_identifier.\n\t(gfc_sym_mangled_identifier): Use mangled_identifier.  Add mangled\n\tidentifier to global symbol table.\n\t(get_proc_pointer_decl): Use backend decl from global identifier\n\tif present.\n\nFrom-SVN: r273880", "tree": {"sha": "cd61bcbec9ac2df1a286648ec164ee57268d04c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd61bcbec9ac2df1a286648ec164ee57268d04c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1/comments", "author": null, "committer": null, "parents": [{"sha": "937337890108676b3588d77bd704927d349db71b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/937337890108676b3588d77bd704927d349db71b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/937337890108676b3588d77bd704927d349db71b"}], "stats": {"total": 164, "additions": 148, "deletions": 16}, "files": [{"sha": "dc965eae61b696a9aecb91787e1d0ddb6cac3e38", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1", "patch": "@@ -1,3 +1,22 @@\n+2019-07-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/90813\n+\t* dump-parse-tree.c (show_global_symbol): New function.\n+\t(gfc_dump_global_symbols): New function.\n+\t* gfortran.h (gfc_traverse_gsymbol): Add prototype.\n+\t(gfc_dump_global_symbols): Likewise.\n+\t* invoke.texi: Document -fdump-fortran-global.\n+\t* lang.opt: Add -fdump-fortran-global.\n+\t* parse.c (gfc_parse_file): Handle flag_dump_fortran_global.\n+\t* symbol.c (gfc_traverse_gsymbol): New function.\n+\t* trans-decl.c (sym_identifier): New function.\n+\t(mangled_identifier): New function, doing most of the work\n+\tof gfc_sym_mangled_identifier.\n+\t(gfc_sym_mangled_identifier): Use mangled_identifier.  Add mangled\n+\tidentifier to global symbol table.\n+\t(get_proc_pointer_decl): Use backend decl from global identifier\n+\tif present.\n+\n 2019-07-25  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/65819"}, {"sha": "798519fa6afd0d220dfbcbaf45ce34fd9359b485", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1", "patch": "@@ -3462,3 +3462,36 @@ write_interop_decl (gfc_symbol *sym)\n   else if (sym->attr.flavor == FL_PROCEDURE)\n     write_proc (sym, true);\n }\n+\n+/* This section deals with dumping the global symbol tree.  */\n+\n+/* Callback function for printing out the contents of the tree.  */\n+\n+static void\n+show_global_symbol (gfc_gsymbol *gsym, void *f_data)\n+{\n+  FILE *out;\n+  out = (FILE *) f_data;\n+\n+  if (gsym->name)\n+    fprintf (out, \"name=%s\", gsym->name);\n+\n+  if (gsym->sym_name)\n+    fprintf (out, \", sym_name=%s\", gsym->sym_name);\n+\n+  if (gsym->mod_name)\n+    fprintf (out, \", mod_name=%s\", gsym->mod_name);\n+\n+  if (gsym->binding_label)\n+    fprintf (out, \", binding_label=%s\", gsym->binding_label);\n+\n+  fputc ('\\n', out);\n+}\n+\n+/* Show all global symbols.  */\n+\n+void\n+gfc_dump_global_symbols (FILE *f)\n+{\n+  gfc_traverse_gsymbol (gfc_gsym_root, show_global_symbol, (void *) f);\n+}"}, {"sha": "aad9e10efcaad0506f1bcae4e762a97db51e9131", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1", "patch": "@@ -3128,6 +3128,7 @@ void gfc_enforce_clean_symbol_state (void);\n gfc_gsymbol *gfc_get_gsymbol (const char *, bool bind_c);\n gfc_gsymbol *gfc_find_gsymbol (gfc_gsymbol *, const char *);\n gfc_gsymbol *gfc_find_case_gsymbol (gfc_gsymbol *, const char *);\n+void gfc_traverse_gsymbol (gfc_gsymbol *, void (*)(gfc_gsymbol *, void *), void *);\n \n gfc_typebound_proc* gfc_get_typebound_proc (gfc_typebound_proc*);\n gfc_symbol* gfc_get_derived_super_type (gfc_symbol*);\n@@ -3471,6 +3472,7 @@ void gfc_delete_bbt (void *, void *, compare_fn);\n void gfc_dump_parse_tree (gfc_namespace *, FILE *);\n void gfc_dump_c_prototypes (gfc_namespace *, FILE *);\n void gfc_dump_external_c_prototypes (FILE *);\n+void gfc_dump_global_symbols (FILE *);\n \n /* parse.c */\n bool gfc_parse_file (void);"}, {"sha": "3c1b2ac7a269c550602ddb7c902e2ef94feff863", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1", "patch": "@@ -157,7 +157,8 @@ and warnings}.\n @item Debugging Options\n @xref{Debugging Options,,Options for debugging your program or GNU Fortran}.\n @gccoptlist{-fbacktrace -fdump-fortran-optimized -fdump-fortran-original @gol\n--fdump-parse-tree -ffpe-trap=@var{list} -ffpe-summary=@var{list}\n+-fdump-fortran-global -fdump-parse-tree -ffpe-trap=@var{list} @gol\n+-ffpe-summary=@var{list}\n }\n \n @item Directory Options\n@@ -1199,6 +1200,14 @@ change between releases. This option may also generate internal\n compiler errors for features which have only recently been added. This\n option is deprecated; use @code{-fdump-fortran-original} instead.\n \n+@item -fdump-fortran-global\n+@opindex @code{fdump-fortran-global}\n+Output a list of the global identifiers after translating into\n+middle-end representation. Mostly useful for debugging the GNU Fortran\n+compiler itself. The output generated by this option might change\n+between releases.  This option may also generate internal compiler\n+errors for features which have only recently been added.\n+\n @item -ffpe-trap=@var{list}\n @opindex @code{ffpe-trap=}@var{list}\n Specify a list of floating point exception traps to enable.  On most"}, {"sha": "85113a7da1e24c7750dc478f416bee3eba73fd81", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1", "patch": "@@ -512,6 +512,10 @@ fdump-fortran-optimized\n Fortran Var(flag_dump_fortran_optimized)\n Display the code tree after front end optimization.\n \n+fdump-fortran-global\n+Fortran Var(flag_dump_fortran_global)\n+Display the global symbol table after parsing.\n+\n fdump-parse-tree\n Fortran Alias(fdump-fortran-original)\n Display the code tree after parsing; deprecated option."}, {"sha": "66d84b4118fb868a42d642d0ef995f6fdd944fe7", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1", "patch": "@@ -6366,6 +6366,13 @@ gfc_parse_file (void)\n   /* Do the translation.  */\n   translate_all_program_units (gfc_global_ns_list);\n \n+  /* Dump the global symbol ist.  We only do this here because part\n+     of it is generated after mangling the identifiers in\n+     trans-decl.c.  */\n+\n+  if (flag_dump_fortran_global)\n+    gfc_dump_global_symbols (stdout);\n+  \n   gfc_end_source_files ();\n   return true;\n "}, {"sha": "2b8f86e0881f30bd1334c32655b33903a971eee0", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1", "patch": "@@ -4357,6 +4357,19 @@ gfc_get_gsymbol (const char *name, bool bind_c)\n   return s;\n }\n \n+void\n+gfc_traverse_gsymbol (gfc_gsymbol *gsym,\n+\t\t      void (*do_something) (gfc_gsymbol *, void *),\n+\t\t      void *data)\n+{\n+  if (gsym->left)\n+    gfc_traverse_gsymbol (gsym->left, do_something, data);\n+\n+  (*do_something) (gsym, data);\n+\n+  if (gsym->right)\n+    gfc_traverse_gsymbol (gsym->right, do_something, data);\n+}\n \n static gfc_symbol *\n get_iso_c_binding_dt (int sym_id)"}, {"sha": "96f0e1e56d2f55b69829c9ffd64b43adfc5fbdff", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 60, "deletions": 15, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=5c6aa9a8919cbf0dcf3c375f51012720bfb5f3a1", "patch": "@@ -345,39 +345,45 @@ gfc_get_label_decl (gfc_st_label * lp)\n     }\n }\n \n+/* Return the name of an identifier.  */\n \n-/* Convert a gfc_symbol to an identifier of the same name.  */\n-\n-static tree\n-gfc_sym_identifier (gfc_symbol * sym)\n+static const char *\n+sym_identifier (gfc_symbol *sym)\n {\n   if (sym->attr.is_main_program && strcmp (sym->name, \"main\") == 0)\n-    return (get_identifier (\"MAIN__\"));\n+    return \"MAIN__\";\n   else\n-    return (get_identifier (sym->name));\n+    return sym->name;\n }\n \n-\n-/* Construct mangled name from symbol name.  */\n+/* Convert a gfc_symbol to an identifier of the same name.  */\n \n static tree\n-gfc_sym_mangled_identifier (gfc_symbol * sym)\n+gfc_sym_identifier (gfc_symbol * sym)\n {\n-  char name[GFC_MAX_MANGLED_SYMBOL_LEN + 1];\n+  return get_identifier (sym_identifier (sym));\n+}\n \n+/* Construct mangled name from symbol name.   */\n+\n+static const char *\n+mangled_identifier (gfc_symbol *sym)\n+{\n+  static char name[GFC_MAX_MANGLED_SYMBOL_LEN + 1];\n   /* Prevent the mangling of identifiers that have an assigned\n      binding label (mainly those that are bind(c)).  */\n+\n   if (sym->attr.is_bind_c == 1 && sym->binding_label)\n-    return get_identifier (sym->binding_label);\n+    return sym->binding_label;\n \n   if (!sym->fn_result_spec)\n     {\n       if (sym->module == NULL)\n-\treturn gfc_sym_identifier (sym);\n+\treturn sym_identifier (sym);\n       else\n \t{\n \t  snprintf (name, sizeof name, \"__%s_MOD_%s\", sym->module, sym->name);\n-\t  return get_identifier (name);\n+\t  return name;\n \t}\n     }\n   else\n@@ -392,17 +398,40 @@ gfc_sym_mangled_identifier (gfc_symbol * sym)\n \t\t    sym->ns->proc_name->module,\n \t\t    sym->ns->proc_name->name,\n \t\t    sym->name);\n-\t  return get_identifier (name);\n+\t  return name;\n \t}\n       else\n \t{\n \t  snprintf (name, sizeof name, \"__%s_PROC_%s\",\n \t\t    sym->ns->proc_name->name, sym->name);\n-\t  return get_identifier (name);\n+\t  return name;\n \t}\n     }\n }\n \n+/* Get mangled identifier, adding the symbol to the global table if\n+   it is not yet already there.  */\n+\n+static tree\n+gfc_sym_mangled_identifier (gfc_symbol * sym)\n+{\n+  tree result;\n+  gfc_gsymbol *gsym;\n+  const char *name;\n+\n+  name = mangled_identifier (sym);\n+  result = get_identifier (name);\n+\n+  gsym = gfc_find_gsymbol (gfc_gsym_root, name);\n+  if (gsym == NULL)\n+    {\n+      gsym = gfc_get_gsymbol (name, false);\n+      gsym->ns = sym->ns;\n+      gsym->sym_name = sym->name;\n+    }\n+\n+  return result;\n+}\n \n /* Construct mangled function name from symbol name.  */\n \n@@ -1914,6 +1943,22 @@ get_proc_pointer_decl (gfc_symbol *sym)\n   tree decl;\n   tree attributes;\n \n+  if (sym->module || sym->fn_result_spec)\n+    {\n+      const char *name;\n+      gfc_gsymbol *gsym;\n+\n+      name = mangled_identifier (sym);\n+      gsym = gfc_find_gsymbol (gfc_gsym_root, name);\n+      if (gsym != NULL)\n+\t{\n+\t  gfc_symbol *s;\n+\t  gfc_find_symbol (sym->name, gsym->ns, 0, &s);\n+\t  if (s && s->backend_decl)\n+\t    return s->backend_decl;\n+\t}\n+    }\n+\n   decl = sym->backend_decl;\n   if (decl)\n     return decl;"}]}