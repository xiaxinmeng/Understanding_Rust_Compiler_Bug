{"sha": "2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21", "node_id": "C_kwDOANBUbNoAKDJhMmZkYTJkOWJlYmI5ZWY3ZmU0YjljOGFhNDkyYTY1MTc2MDNlMjE", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-02-09T00:16:24Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-02-09T00:16:24Z"}, "message": "Daily bump.", "tree": {"sha": "a6497d11c0470f1679bffc824a25e18bba035df8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6497d11c0470f1679bffc824a25e18bba035df8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21/comments", "author": null, "committer": null, "parents": [{"sha": "1ef6085f09b50e0aa3e5a5d15ebf8752e8aa8a72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef6085f09b50e0aa3e5a5d15ebf8752e8aa8a72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ef6085f09b50e0aa3e5a5d15ebf8752e8aa8a72"}], "stats": {"total": 366, "additions": 365, "deletions": 1}, "files": [{"sha": "df334878c3f044b8c2185bf875e4af1a6fa610cd", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21", "patch": "@@ -1,3 +1,7 @@\n+2022-02-08  Ulrich Weigand  <ulrich.weigand@de.ibm.com>\n+\n+\t* MAINTAINERS: Remove Hartmut Penner as s390 maintainer.\n+\n 2022-01-31  Ed Smith-Rowland  <esmithrowland@gmail.com>\n \n \t* MAINTAINERS: Update my email and add myself to the DCO list."}, {"sha": "a808ec3e527979f36cf9d9b23069bee92f53b463", "filename": "gcc/ChangeLog", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21", "patch": "@@ -1,3 +1,91 @@\n+2022-02-08  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\tPR rtl-optimization/104198\n+\tPR rtl-optimization/104153\n+\t* ifcvt.cc (noce_convert_multiple_sets_1): Copy rtx instead of\n+\tusing it directly.  Rework comparison handling and always\n+\tperform a second pass.\n+\n+2022-02-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/102140\n+\t* config/rs6000/rs6000.cc (vspltis_shifted): Return false also if\n+\tsplit1 pass has finished already.\n+\n+2022-02-08  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-builtins.def (VMSUMCUD): New.\n+\t* config/rs6000/rs6000-overload.def (VEC_MSUMC): New.\n+\t* config/rs6000/vsx.md (UNSPEC_VMSUMCUD): New constant.\n+\t(vmsumcud): New define_insn.\n+\n+2022-02-08  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx-opts.h (enum ptx_isa): Add PTX_ISA_SM70.\n+\t* config/nvptx/nvptx.h (TARGET_SM70): Define.\n+\n+2022-02-08  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* config/s390/s390.cc (s390_rtx_costs): Increase costs for load\n+\ton condition.\n+\t* config/s390/s390.md: Use paradoxical subreg.\n+\n+2022-02-08  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* combine.cc (reg_subword_p): Check for paradoxical subreg.\n+\n+2022-02-08  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/104283\n+\t* config/nvptx/nvptx-opts.h (enum ptx_version): Add PTX_VERSION_3_0\n+\tand PTX_VERSION_4_2.\n+\t* config/nvptx/nvptx.cc (first_ptx_version_supporting_sm)\n+\t(default_ptx_version_option, ptx_version_to_string)\n+\t(sm_version_to_string, handle_ptx_version_option): New function.\n+\t(nvptx_option_override): Call handle_ptx_version_option.\n+\t(nvptx_file_start): Use ptx_version_to_string and sm_version_to_string.\n+\t* config/nvptx/nvptx.md (define_insn \"nvptx_shuffle<mode>\")\n+\t(define_insn \"nvptx_vote_ballot\"): Use TARGET_PTX_6_0.\n+\t* config/nvptx/nvptx.opt (mptx): Remove 'Init'.\n+\n+2022-02-08  Maciej W. Rozycki  <macro@embecosm.com>\n+\n+\t* doc/install.texi (Configuration): Document `--with-isa-spec='\n+\tRISC-V option.\n+\t* doc/invoke.texi (Option Summary): List `-misa-spec=' RISC-V\n+\toption.\n+\t(RISC-V Options): Document it.\n+\n+2022-02-08  Maciej W. Rozycki  <macro@embecosm.com>\n+\n+\t* config/riscv/t-riscv (riscv-sr.o): Add $(TM_H) dependency.\n+\n+2022-02-08  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx.cc (write_fn_proto_1): Handle 'main (int)'.\n+\n+2022-02-08  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/104364\n+\t* config/nvptx/nvptx-protos.h (nvptx_mem_local_p): Declare.\n+\t* config/nvptx/nvptx.cc (nvptx_reorg_uniform_simt): Assert that\n+\tchange is validated.\n+\t(nvptx_mem_local_p): New function.\n+\t* config/nvptx/nvptx.md: Use nvptx_mem_local_p.\n+\t(define_c_enum \"unspecv\"): Add UNSPECV_CAS_LOCAL.\n+\t(define_insn \"atomic_compare_and_swap<mode>_1_local\"): New\n+\tnon-atomic, non-predicable define_insn, factored out of ...\n+\t(define_insn \"atomic_compare_and_swap<mode>_1\"): ... here.\n+\tMake predicable again.\n+\t(define_expand \"atomic_compare_and_swap<mode>\"): Use\n+\tatomic_compare_and_swap<mode>_1_local.\n+\n+2022-02-08  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR rtl-optimization/104059\n+\t* regcprop.cc (copyprop_hardreg_forward_1): Don't propagate\n+\tfor a more expensive reg-reg move.\n+\n 2022-02-07  Tamar Christina  <tamar.christina@arm.com>\n \n \t* config/arm/arm_neon.h (vusdotq_s32, vusdot_laneq_s32,"}, {"sha": "eef289ae020546aa8a369c4fd543f4e40cfb99d0", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21", "patch": "@@ -1 +1 @@\n-20220208\n+20220209"}, {"sha": "788055829719c21ae8eb9d0837b94e1a949bcf78", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21", "patch": "@@ -1,3 +1,46 @@\n+2022-02-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/104379\n+\t* name-lookup.cc (check_local_shadow): When diagnosing shadowing\n+\tof a member or global declaration, add warning suppression for\n+\tthe decl and don't warn again on it.\n+\n+2022-02-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/104403\n+\t* constexpr.cc (cxx_eval_constant_expression): Don't assert DECL_EXPRs\n+\tof TREE_STATIC vars may only appear in -std=c++23.\n+\n+2022-02-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/80951\n+\t* pt.cc (uses_deducible_template_parms): Consider the\n+\tnoexcept-spec of a function type.\n+\n+2022-02-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/104410\n+\t* constraint.cc (satisfaction_value): Relax assert to accept\n+\tcv-qualified bool.\n+\n+2022-02-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/103706\n+\t* pt.cc (preserve_args): New function.\n+\t(tsubst_lambda_expr): Use it when setting LAMBDA_EXPR_REGEN_INFO.\n+\n+2022-02-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/103706\n+\t* constraint.cc (satisfy_declaration_constraints): Use\n+\tlambda_regenerating_args instead.\n+\t* cp-tree.h (lambda_regenerating_args): Declare.\n+\t* pt.cc (lambda_regenerating_args): Define, split out from\n+\tsatisfy_declaration_constraints.\n+\t(do_auto_deduction): Use lambda_regenerating_args to obtain the\n+\tfull set of outer template arguments for satisfaction when\n+\tinside a lambda.\n+\n 2022-02-06  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/96242"}, {"sha": "24863370f88d935a3b10536fd67036899be4c32c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 193, "deletions": 0, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21", "patch": "@@ -1,3 +1,196 @@\n+2022-02-08  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\tPR rtl-optimization/104198\n+\tPR rtl-optimization/104153\n+\t* gcc.dg/pr104198.c: New test.\n+\n+2022-02-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/104379\n+\t* g++.dg/warn/Wshadow-18.C: New test.\n+\n+2022-02-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/104403\n+\t* g++.dg/cpp0x/lambda/lambda-104403.C: New test.\n+\n+2022-02-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/102140\n+\t* gcc.dg/pr102140.c: New test.\n+\n+2022-02-08  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/vec-msumc.c: New test.\n+\n+2022-02-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/104425\n+\t* g++.dg/template/partial-specialization10.C: New test.\n+\n+2022-02-08  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* gcc.target/s390/ifcvt-two-insns-int.c: Fix array size.\n+\t* gcc.target/s390/ifcvt-two-insns-long.c: Dito.\n+\n+2022-02-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/80951\n+\t* g++.dg/cpp1z/noexcept-type25.C: New test.\n+\n+2022-02-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/104410\n+\t* g++.dg/cpp2a/concepts-pr104410.C: New test.\n+\n+2022-02-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/103706\n+\t* g++.dg/cpp2a/concepts-lambda19.C: New test.\n+\n+2022-02-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/103706\n+\t* g++.dg/cpp2a/concepts-lambda18.C: New test.\n+\n+2022-02-08  Maciej W. Rozycki  <macro@embecosm.com>\n+\n+\t* gcc.target/riscv/riscv.exp: Use `gcc-dg-runtest' rather than\n+\t`dg-runtest'.  Add `-Og -g' and `-Oz' variants via\n+\tADDITIONAL_TORTURE_OPTIONS.\n+\t* gcc.target/riscv/arch-1.c: Adjust test options accordingly.\n+\t* gcc.target/riscv/arch-10.c: Likewise.\n+\t* gcc.target/riscv/arch-11.c: Likewise.\n+\t* gcc.target/riscv/arch-12.c: Likewise.\n+\t* gcc.target/riscv/arch-2.c: Likewise.\n+\t* gcc.target/riscv/arch-3.c: Likewise.\n+\t* gcc.target/riscv/arch-4.c: Likewise.\n+\t* gcc.target/riscv/arch-5.c: Likewise.\n+\t* gcc.target/riscv/arch-6.c: Likewise.\n+\t* gcc.target/riscv/arch-7.c: Likewise.\n+\t* gcc.target/riscv/arch-8.c: Likewise.\n+\t* gcc.target/riscv/arch-9.c: Likewise.\n+\t* gcc.target/riscv/attribute-1.c: Likewise.\n+\t* gcc.target/riscv/attribute-10.c: Likewise.\n+\t* gcc.target/riscv/attribute-11.c: Likewise.\n+\t* gcc.target/riscv/attribute-12.c: Likewise.\n+\t* gcc.target/riscv/attribute-13.c: Likewise.\n+\t* gcc.target/riscv/attribute-14.c: Likewise.\n+\t* gcc.target/riscv/attribute-15.c: Likewise.\n+\t* gcc.target/riscv/attribute-16.c: Likewise.\n+\t* gcc.target/riscv/attribute-17.c: Likewise.\n+\t* gcc.target/riscv/attribute-2.c: Likewise.\n+\t* gcc.target/riscv/attribute-3.c: Likewise.\n+\t* gcc.target/riscv/attribute-4.c: Likewise.\n+\t* gcc.target/riscv/attribute-5.c: Likewise.\n+\t* gcc.target/riscv/attribute-7.c: Likewise.\n+\t* gcc.target/riscv/attribute-8.c: Likewise.\n+\t* gcc.target/riscv/attribute-9.c: Likewise.\n+\t* gcc.target/riscv/interrupt-1.c: Likewise.\n+\t* gcc.target/riscv/interrupt-2.c: Likewise.\n+\t* gcc.target/riscv/interrupt-3.c: Likewise.\n+\t* gcc.target/riscv/interrupt-4.c: Likewise.\n+\t* gcc.target/riscv/interrupt-conflict-mode.c: Likewise.\n+\t* gcc.target/riscv/interrupt-debug.c: Likewise.\n+\t* gcc.target/riscv/interrupt-mmode.c: Likewise.\n+\t* gcc.target/riscv/interrupt-smode.c: Likewise.\n+\t* gcc.target/riscv/interrupt-umode.c: Likewise.\n+\t* gcc.target/riscv/li.c: Likewise.\n+\t* gcc.target/riscv/load-immediate.c: Likewise.\n+\t* gcc.target/riscv/losum-overflow.c: Likewise.\n+\t* gcc.target/riscv/mcpu-6.c: Likewise.\n+\t* gcc.target/riscv/mcpu-7.c: Likewise.\n+\t* gcc.target/riscv/pr102957.c: Likewise.\n+\t* gcc.target/riscv/pr103302.c: Likewise.\n+\t* gcc.target/riscv/pr104140.c: Likewise.\n+\t* gcc.target/riscv/pr84660.c: Likewise.\n+\t* gcc.target/riscv/pr93202.c: Likewise.\n+\t* gcc.target/riscv/pr93304.c: Likewise.\n+\t* gcc.target/riscv/pr95252.c: Likewise.\n+\t* gcc.target/riscv/pr95683.c: Likewise.\n+\t* gcc.target/riscv/pr98777.c: Likewise.\n+\t* gcc.target/riscv/pr99702.c: Likewise.\n+\t* gcc.target/riscv/predef-1.c: Likewise.\n+\t* gcc.target/riscv/predef-10.c: Likewise.\n+\t* gcc.target/riscv/predef-11.c: Likewise.\n+\t* gcc.target/riscv/predef-12.c: Likewise.\n+\t* gcc.target/riscv/predef-13.c: Likewise.\n+\t* gcc.target/riscv/predef-14.c: Likewise.\n+\t* gcc.target/riscv/predef-15.c: Likewise.\n+\t* gcc.target/riscv/predef-16.c: Likewise.\n+\t* gcc.target/riscv/predef-2.c: Likewise.\n+\t* gcc.target/riscv/predef-3.c: Likewise.\n+\t* gcc.target/riscv/predef-4.c: Likewise.\n+\t* gcc.target/riscv/predef-5.c: Likewise.\n+\t* gcc.target/riscv/predef-6.c: Likewise.\n+\t* gcc.target/riscv/predef-7.c: Likewise.\n+\t* gcc.target/riscv/predef-8.c: Likewise.\n+\t* gcc.target/riscv/promote-type-for-libcall.c: Likewise.\n+\t* gcc.target/riscv/save-restore-1.c: Likewise.\n+\t* gcc.target/riscv/save-restore-2.c: Likewise.\n+\t* gcc.target/riscv/save-restore-3.c: Likewise.\n+\t* gcc.target/riscv/save-restore-4.c: Likewise.\n+\t* gcc.target/riscv/save-restore-6.c: Likewise.\n+\t* gcc.target/riscv/save-restore-7.c: Likewise.\n+\t* gcc.target/riscv/save-restore-8.c: Likewise.\n+\t* gcc.target/riscv/save-restore-9.c: Likewise.\n+\t* gcc.target/riscv/shift-and-1.c: Likewise.\n+\t* gcc.target/riscv/shift-and-2.c: Likewise.\n+\t* gcc.target/riscv/shift-shift-1.c: Likewise.\n+\t* gcc.target/riscv/shift-shift-2.c: Likewise.\n+\t* gcc.target/riscv/shift-shift-3.c: Likewise.\n+\t* gcc.target/riscv/shift-shift-4.c: Likewise.\n+\t* gcc.target/riscv/shift-shift-5.c: Likewise.\n+\t* gcc.target/riscv/shorten-memrefs-1.c: Likewise.\n+\t* gcc.target/riscv/shorten-memrefs-2.c: Likewise.\n+\t* gcc.target/riscv/shorten-memrefs-3.c: Likewise.\n+\t* gcc.target/riscv/shorten-memrefs-4.c: Likewise.\n+\t* gcc.target/riscv/shorten-memrefs-5.c: Likewise.\n+\t* gcc.target/riscv/shorten-memrefs-6.c: Likewise.\n+\t* gcc.target/riscv/shorten-memrefs-7.c: Likewise.\n+\t* gcc.target/riscv/shorten-memrefs-8.c: Likewise.\n+\t* gcc.target/riscv/switch-qi.c: Likewise.\n+\t* gcc.target/riscv/switch-si.c: Likewise.\n+\t* gcc.target/riscv/weak-1.c: Likewise.\n+\t* gcc.target/riscv/zba-adduw.c: Likewise.\n+\t* gcc.target/riscv/zba-shNadd-01.c: Likewise.\n+\t* gcc.target/riscv/zba-shNadd-02.c: Likewise.\n+\t* gcc.target/riscv/zba-shNadd-03.c: Likewise.\n+\t* gcc.target/riscv/zba-slliuw.c: Likewise.\n+\t* gcc.target/riscv/zba-zextw.c: Likewise.\n+\t* gcc.target/riscv/zbb-andn-orn-xnor-01.c: Likewise.\n+\t* gcc.target/riscv/zbb-andn-orn-xnor-02.c: Likewise.\n+\t* gcc.target/riscv/zbb-li-rotr.c: Likewise.\n+\t* gcc.target/riscv/zbb-min-max.c: Likewise.\n+\t* gcc.target/riscv/zbb-rol-ror-01.c: Likewise.\n+\t* gcc.target/riscv/zbb-rol-ror-02.c: Likewise.\n+\t* gcc.target/riscv/zbb-rol-ror-03.c: Likewise.\n+\t* gcc.target/riscv/zbbw.c: Likewise.\n+\t* gcc.target/riscv/zbs-bclr.c: Likewise.\n+\t* gcc.target/riscv/zbs-bext.c: Likewise.\n+\t* gcc.target/riscv/zbs-binv.c: Likewise.\n+\t* gcc.target/riscv/zbs-bset.c: Likewise.\n+\t* gcc.target/riscv/zero-extend-1.c: Likewise.\n+\t* gcc.target/riscv/zero-extend-2.c: Likewise.\n+\t* gcc.target/riscv/zero-extend-3.c: Likewise.\n+\t* gcc.target/riscv/zero-extend-4.c: Likewise.\n+\t* gcc.target/riscv/zero-extend-5.c: Likewise.\n+\n+2022-02-08  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.dg/tree-ssa/builtin-sprintf.c: Require c99_runtime for\n+\tdg-do run.\n+\n+2022-02-08  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/104364\n+\t* gcc.target/nvptx/softstack-2.c: New test.\n+\t* gcc.target/nvptx/uniform-simt-1.c: New test.\n+\n+2022-02-08  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr104059.c: New test.\n+\n 2022-02-07  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/104417"}, {"sha": "daa3bff0ea5376dee4d8f90e4a2f36d9526fda6a", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21", "patch": "@@ -1,3 +1,10 @@\n+2022-02-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libgomp/104385\n+\t* task.c (gomp_task_run_post_handle_dependers): If parent is NULL,\n+\tclear task->parent.\n+\t* testsuite/libgomp.c/pr104385.c: New test.\n+\n 2022-02-04  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* testsuite/libgomp.fortran/allocate-1.f90: Remove spurious"}, {"sha": "b988edd948d04e7ebfe6a3e1f75bed81e65a90bf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2a2fda2d9bebb9ef7fe4b9c8aa492a6517603e21", "patch": "@@ -1,3 +1,32 @@\n+2022-02-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++17/fs_dir.cc (_Dir(DIR*, const path&)): Change first\n+\tparameter to _Dir_base&&.\n+\t* src/filesystem/dir-common.h (_Dir_base(DIR*)): Remove.\n+\t* src/filesystem/dir.cc (_Dir(DIR*, const path&)): Change first\n+\tparameter to _Dir_base&&.\n+\n+2022-02-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* acinclude.m4 (GLIBCXX_ENABLE_LOCK_POLICY): Add comment about\n+\tchecking for CAS on correct word size.\n+\n+2022-02-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/experimental/filesystem/operations/create_directories.cc:\n+\tAdjust expected results for Windows.\n+\n+2022-02-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/104161\n+\t* src/c++17/fs_dir.cc (fs::recursive_directory_iterator::__erase):\n+\t[i_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Refresh entry._M_type member,\n+\tinstead of checking for errno values indicating a directory.\n+\t* src/c++17/fs_ops.cc (fs::remove_all(const path&)): Use similar\n+\tlogic to non-throwing overload.\n+\t(fs::remove_all(const path&, error_code&)): Add comments.\n+\t* src/filesystem/ops-common.h: Likewise.\n+\n 2022-02-04  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* src/filesystem/dir-common.h (_Dir_base::openat): Change return"}]}