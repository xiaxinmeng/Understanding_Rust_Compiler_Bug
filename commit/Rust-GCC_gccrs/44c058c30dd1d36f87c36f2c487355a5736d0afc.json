{"sha": "44c058c30dd1d36f87c36f2c487355a5736d0afc", "node_id": "C_kwDOANBUbNoAKDQ0YzA1OGMzMGRkMWQzNmY4N2MzNmYyYzQ4NzM1NWE1NzM2ZDBhZmM", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-04-29T14:27:53Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-04-30T12:31:12Z"}, "message": "Fix address expression to respect reference/pointer types", "tree": {"sha": "9414376dc8e452c4bd69ec5a776daeb25db979c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9414376dc8e452c4bd69ec5a776daeb25db979c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44c058c30dd1d36f87c36f2c487355a5736d0afc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44c058c30dd1d36f87c36f2c487355a5736d0afc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44c058c30dd1d36f87c36f2c487355a5736d0afc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44c058c30dd1d36f87c36f2c487355a5736d0afc/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f38bf60c3ac7f039db5ff5c7c0587325097892c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f38bf60c3ac7f039db5ff5c7c0587325097892c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f38bf60c3ac7f039db5ff5c7c0587325097892c8"}], "stats": {"total": 73, "additions": 53, "deletions": 20}, "files": [{"sha": "928306fa9d8849e7324322092690c66fbcc61aa9", "filename": "gcc/rust/backend/rust-compile-base.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c058c30dd1d36f87c36f2c487355a5736d0afc/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c058c30dd1d36f87c36f2c487355a5736d0afc/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.cc?ref=44c058c30dd1d36f87c36f2c487355a5736d0afc", "patch": "@@ -317,15 +317,16 @@ HIRCompileBase::mark_addressable (tree exp, Location locus)\n }\n \n tree\n-HIRCompileBase::address_expression (tree expr, Location location)\n+HIRCompileBase::address_expression (tree expr, tree ptrtype, Location location)\n {\n   if (expr == error_mark_node)\n     return error_mark_node;\n \n   if (!mark_addressable (expr, location))\n     return error_mark_node;\n \n-  return build_fold_addr_expr_loc (location.gcc_location (), expr);\n+  return build_fold_addr_expr_with_type_loc (location.gcc_location (), expr,\n+\t\t\t\t\t     ptrtype);\n }\n \n std::vector<Bvariable *>"}, {"sha": "d58fd193123129bc37446f2471fba913570b2ce9", "filename": "gcc/rust/backend/rust-compile-base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c058c30dd1d36f87c36f2c487355a5736d0afc/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c058c30dd1d36f87c36f2c487355a5736d0afc/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.h?ref=44c058c30dd1d36f87c36f2c487355a5736d0afc", "patch": "@@ -98,7 +98,7 @@ class HIRCompileBase\n \n   static void setup_abi_options (tree fndecl, ABI abi);\n \n-  static tree address_expression (tree, Location);\n+  static tree address_expression (tree expr, tree ptrtype, Location locus);\n \n   static bool mark_addressable (tree, Location);\n "}, {"sha": "5f9334cd1d1e17b24a0b95cbcd16fea31beecdcc", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c058c30dd1d36f87c36f2c487355a5736d0afc/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c058c30dd1d36f87c36f2c487355a5736d0afc/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=44c058c30dd1d36f87c36f2c487355a5736d0afc", "patch": "@@ -123,7 +123,14 @@ void\n CompileExpr::visit (HIR::BorrowExpr &expr)\n {\n   tree main_expr = CompileExpr::Compile (expr.get_expr ().get (), ctx);\n-  translated = address_expression (main_expr, expr.get_locus ());\n+\n+  TyTy::BaseType *tyty = nullptr;\n+  if (!ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (),\n+\t\t\t\t       &tyty))\n+    return;\n+\n+  tree ptrtype = TyTyResolveCompile::compile (ctx, tyty);\n+  translated = address_expression (main_expr, ptrtype, expr.get_locus ());\n }\n \n void\n@@ -707,7 +714,8 @@ CompileExpr::resolve_method_address (TyTy::FnType *fntype, HirId ref,\n   tree fn = NULL_TREE;\n   if (ctx->lookup_function_decl (fntype->get_ty_ref (), &fn))\n     {\n-      return address_expression (fn, expr_locus);\n+      return address_expression (fn, build_pointer_type (TREE_TYPE (fn)),\n+\t\t\t\t expr_locus);\n     }\n \n   // Now we can try and resolve the address since this might be a forward\n@@ -983,7 +991,8 @@ CompileExpr::compile_string_literal (const HIR::LiteralExpr &expr,\n \n   auto base = ctx->get_backend ()->string_constant_expression (\n     literal_value.as_string ());\n-  return address_expression (base, expr.get_locus ());\n+  return address_expression (base, build_pointer_type (TREE_TYPE (base)),\n+\t\t\t     expr.get_locus ());\n }\n \n tree\n@@ -1016,7 +1025,8 @@ CompileExpr::compile_byte_string_literal (const HIR::LiteralExpr &expr,\n \t\t\t\t\t\t\t vals,\n \t\t\t\t\t\t\t expr.get_locus ());\n \n-  return address_expression (constructed, expr.get_locus ());\n+  return address_expression (constructed, build_pointer_type (array_type),\n+\t\t\t     expr.get_locus ());\n }\n \n tree\n@@ -1233,8 +1243,11 @@ HIRCompileBase::resolve_adjustements (\n \t  return error_mark_node;\n \n \tcase Resolver::Adjustment::AdjustmentType::IMM_REF:\n-\tcase Resolver::Adjustment::AdjustmentType::MUT_REF:\n-\t  e = address_expression (e, locus);\n+\t  case Resolver::Adjustment::AdjustmentType::MUT_REF: {\n+\t    tree ptrtype\n+\t      = TyTyResolveCompile::compile (ctx, adjustment.get_expected ());\n+\t    e = address_expression (e, ptrtype, locus);\n+\t  }\n \t  break;\n \n \tcase Resolver::Adjustment::AdjustmentType::DEREF:\n@@ -1280,7 +1293,10 @@ HIRCompileBase::resolve_deref_adjustment (Resolver::Adjustment &adjustment,\n \t\t      != Resolver::Adjustment::AdjustmentType::ERROR;\n   if (needs_borrow)\n     {\n-      adjusted_argument = address_expression (expression, locus);\n+      adjusted_argument\n+\t= address_expression (expression,\n+\t\t\t      build_reference_type (TREE_TYPE (expression)),\n+\t\t\t      locus);\n     }\n \n   // make the call\n@@ -1316,7 +1332,9 @@ HIRCompileBase::resolve_unsized_adjustment (Resolver::Adjustment &adjustment,\n     = TyTyResolveCompile::compile (ctx, adjustment.get_expected ());\n \n   // make a constructor for this\n-  tree data = address_expression (expression, locus);\n+  tree data\n+    = address_expression (expression,\n+\t\t\t  build_reference_type (TREE_TYPE (expression)), locus);\n \n   // fetch the size from the domain\n   tree domain = TYPE_DOMAIN (expr_type);\n@@ -1414,7 +1432,8 @@ CompileExpr::visit (HIR::IdentifierExpr &expr)\n   else if (ctx->lookup_function_decl (ref, &fn))\n     {\n       TREE_USED (fn) = 1;\n-      translated = address_expression (fn, expr.get_locus ());\n+      translated = address_expression (fn, build_pointer_type (TREE_TYPE (fn)),\n+\t\t\t\t       expr.get_locus ());\n     }\n   else if (ctx->lookup_var_decl (ref, &var))\n     {"}, {"sha": "c13556aaa919f9a06cf716d54ed507a026032ab6", "filename": "gcc/rust/backend/rust-compile-implitem.cc", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c058c30dd1d36f87c36f2c487355a5736d0afc/gcc%2Frust%2Fbackend%2Frust-compile-implitem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c058c30dd1d36f87c36f2c487355a5736d0afc/gcc%2Frust%2Fbackend%2Frust-compile-implitem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-implitem.cc?ref=44c058c30dd1d36f87c36f2c487355a5736d0afc", "patch": "@@ -68,7 +68,10 @@ CompileTraitItem::visit (HIR::TraitItemFunc &func)\n \t    {\n \t      ctx->insert_function_decl (fntype, lookup);\n \t    }\n-\t  reference = address_expression (lookup, ref_locus);\n+\t  reference\n+\t    = address_expression (lookup,\n+\t\t\t\t  build_pointer_type (TREE_TYPE (lookup)),\n+\t\t\t\t  ref_locus);\n \t  return;\n \t}\n     }\n@@ -95,7 +98,9 @@ CompileTraitItem::visit (HIR::TraitItemFunc &func)\n \t\t\tfunc.get_outer_attrs (), func.get_locus (),\n \t\t\tfunc.get_block_expr ().get (), canonical_path, fntype,\n \t\t\tfunction.has_return_type ());\n-  reference = address_expression (fndecl, ref_locus);\n+  reference\n+    = address_expression (fndecl, build_pointer_type (TREE_TYPE (fndecl)),\n+\t\t\t  ref_locus);\n }\n \n } // namespace Compile"}, {"sha": "36fa78757ac520df9cb11f9d8c4e78ea5b97db4b", "filename": "gcc/rust/backend/rust-compile-item.cc", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c058c30dd1d36f87c36f2c487355a5736d0afc/gcc%2Frust%2Fbackend%2Frust-compile-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c058c30dd1d36f87c36f2c487355a5736d0afc/gcc%2Frust%2Fbackend%2Frust-compile-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.cc?ref=44c058c30dd1d36f87c36f2c487355a5736d0afc", "patch": "@@ -146,7 +146,10 @@ CompileItem::visit (HIR::Function &function)\n \t      ctx->insert_function_decl (fntype, lookup);\n \t    }\n \n-\t  reference = address_expression (lookup, ref_locus);\n+\t  reference\n+\t    = address_expression (lookup,\n+\t\t\t\t  build_pointer_type (TREE_TYPE (lookup)),\n+\t\t\t\t  ref_locus);\n \t  return;\n \t}\n     }\n@@ -171,7 +174,9 @@ CompileItem::visit (HIR::Function &function)\n \t\t\tfunction.get_outer_attrs (), function.get_locus (),\n \t\t\tfunction.get_definition ().get (), canonical_path,\n \t\t\tfntype, function.has_function_return_type ());\n-  reference = address_expression (fndecl, ref_locus);\n+  reference\n+    = address_expression (fndecl, build_pointer_type (TREE_TYPE (fndecl)),\n+\t\t\t  ref_locus);\n }\n \n void"}, {"sha": "bd44bf45791624591dc772af94c1886b6ca0e42f", "filename": "gcc/rust/backend/rust-compile-resolve-path.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c058c30dd1d36f87c36f2c487355a5736d0afc/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c058c30dd1d36f87c36f2c487355a5736d0afc/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc?ref=44c058c30dd1d36f87c36f2c487355a5736d0afc", "patch": "@@ -141,14 +141,16 @@ ResolvePathRef::resolve (const HIR::PathIdentSegment &final_segment,\n       if (ctx->lookup_function_decl (fntype->get_ty_ref (), &fn))\n \t{\n \t  TREE_USED (fn) = 1;\n-\t  return address_expression (fn, expr_locus);\n+\t  return address_expression (fn, build_pointer_type (TREE_TYPE (fn)),\n+\t\t\t\t     expr_locus);\n \t}\n       else if (fntype->get_abi () == ABI::INTRINSIC)\n \t{\n \t  Intrinsics compile (ctx);\n \t  fn = compile.compile (fntype);\n \t  TREE_USED (fn) = 1;\n-\t  return address_expression (fn, expr_locus);\n+\t  return address_expression (fn, build_pointer_type (TREE_TYPE (fn)),\n+\t\t\t\t     expr_locus);\n \t}\n     }\n "}, {"sha": "ad36a3790d11bbecf591b7295798f8b4aa8a8ad8", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c058c30dd1d36f87c36f2c487355a5736d0afc/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c058c30dd1d36f87c36f2c487355a5736d0afc/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=44c058c30dd1d36f87c36f2c487355a5736d0afc", "patch": "@@ -299,8 +299,9 @@ HIRCompileBase::coerce_to_dyn_object (tree compiled_ref,\n \t  || it->get_type () == Resolver::Adjustment::AdjustmentType::MUT_REF;\n       rust_assert (ok);\n \n-      resulting_dyn_object_ref\n-\t= address_expression (resulting_dyn_object_ref, locus);\n+      resulting_dyn_object_ref = address_expression (\n+\tresulting_dyn_object_ref,\n+\tbuild_reference_type (TREE_TYPE (resulting_dyn_object_ref)), locus);\n     }\n   return resulting_dyn_object_ref;\n }"}]}