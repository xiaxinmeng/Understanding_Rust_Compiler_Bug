{"sha": "4aa83879c93d2367f5245c94bd2f12c19f486dae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFhODM4NzljOTNkMjM2N2Y1MjQ1Yzk0YmQyZjEyYzE5ZjQ4NmRhZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-06-29T07:30:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-06-29T07:30:31Z"}, "message": "re PR middle-end/71002 (-fstrict-aliasing breaks Boost's short string optimization implementation)\n\n2016-06-29  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/71002\n\t* alias.c (component_uses_parent_alias_set_from): Handle\n\ttype punning through union accesses by using the union alias set.\n\t* gimple.c (gimple_get_alias_set): Remove union type punning case.\n\n\tc-family/\n\t* c-common.c (c_common_get_alias_set): Remove union type punning case.\n\t\n\tfortran/\n\t* f95-lang.c (LANG_HOOKS_GET_ALIAS_SET): Remove (un-)define.\n\t(gfc_get_alias_set): Remove.\n\n\t* g++.dg/torture/pr71002.C: Adjust testcase.\n\nFrom-SVN: r237839", "tree": {"sha": "29eb8891c24a3daecbf68e50445cf77606b498d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29eb8891c24a3daecbf68e50445cf77606b498d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4aa83879c93d2367f5245c94bd2f12c19f486dae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aa83879c93d2367f5245c94bd2f12c19f486dae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aa83879c93d2367f5245c94bd2f12c19f486dae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aa83879c93d2367f5245c94bd2f12c19f486dae/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "36088299955f95ab58a5758cba2f29b84c8fbfbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36088299955f95ab58a5758cba2f29b84c8fbfbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36088299955f95ab58a5758cba2f29b84c8fbfbc"}], "stats": {"total": 93, "additions": 34, "deletions": 59}, "files": [{"sha": "e57c1a9b8340594fc02f9ce17aff49fdf7797ebe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa83879c93d2367f5245c94bd2f12c19f486dae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa83879c93d2367f5245c94bd2f12c19f486dae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4aa83879c93d2367f5245c94bd2f12c19f486dae", "patch": "@@ -1,3 +1,10 @@\n+2016-06-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/71002\n+\t* alias.c (component_uses_parent_alias_set_from): Handle\n+\ttype punning through union accesses by using the union alias set.\n+\t* gimple.c (gimple_get_alias_set): Remove union type punning case.\n+\n 2016-07-29  Richard Biener  <rguenther@suse.de>\n \n \t* match.pd ((T)(T2)x -> (T)x): Remove restriction on final"}, {"sha": "dd1dfd3892034d8622bcc176d38d9947f443b824", "filename": "gcc/alias.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa83879c93d2367f5245c94bd2f12c19f486dae/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa83879c93d2367f5245c94bd2f12c19f486dae/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=4aa83879c93d2367f5245c94bd2f12c19f486dae", "patch": "@@ -619,6 +619,14 @@ component_uses_parent_alias_set_from (const_tree t)\n \tcase COMPONENT_REF:\n \t  if (DECL_NONADDRESSABLE_P (TREE_OPERAND (t, 1)))\n \t    found = t;\n+\t  /* Permit type-punning when accessing a union, provided the access\n+\t     is directly through the union.  For example, this code does not\n+\t     permit taking the address of a union member and then storing\n+\t     through it.  Even the type-punning allowed here is a GCC\n+\t     extension, albeit a common and useful one; the C standard says\n+\t     that such accesses have implementation-defined behavior.  */\n+\t  else if (TREE_CODE (TREE_TYPE (TREE_OPERAND (t, 0))) == UNION_TYPE)\n+\t    found = t;\n \t  break;\n \n \tcase ARRAY_REF:"}, {"sha": "d5b839594ce339dcf203414ac49f478ec3fb0c42", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa83879c93d2367f5245c94bd2f12c19f486dae/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa83879c93d2367f5245c94bd2f12c19f486dae/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=4aa83879c93d2367f5245c94bd2f12c19f486dae", "patch": "@@ -1,3 +1,8 @@\n+2016-06-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/71002\n+\t* c-common.c (c_common_get_alias_set): Remove union type punning case.\n+\n 2016-06-24  Jason Merrill  <jason@redhat.com>\n \n \tP0145R2: Refining Expression Order for C++."}, {"sha": "936ddfb87e59d152e0c77deca869565f90e4717e", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa83879c93d2367f5245c94bd2f12c19f486dae/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa83879c93d2367f5245c94bd2f12c19f486dae/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=4aa83879c93d2367f5245c94bd2f12c19f486dae", "patch": "@@ -4736,8 +4736,6 @@ static GTY(()) hash_table<c_type_hasher> *type_hash_table;\n alias_set_type\n c_common_get_alias_set (tree t)\n {\n-  tree u;\n-\n   /* For VLAs, use the alias set of the element type rather than the\n      default of alias set 0 for types compared structurally.  */\n   if (TYPE_P (t) && TYPE_STRUCTURAL_EQUALITY_P (t))\n@@ -4747,19 +4745,6 @@ c_common_get_alias_set (tree t)\n       return -1;\n     }\n \n-  /* Permit type-punning when accessing a union, provided the access\n-     is directly through the union.  For example, this code does not\n-     permit taking the address of a union member and then storing\n-     through it.  Even the type-punning allowed here is a GCC\n-     extension, albeit a common and useful one; the C standard says\n-     that such accesses have implementation-defined behavior.  */\n-  for (u = t;\n-       TREE_CODE (u) == COMPONENT_REF || TREE_CODE (u) == ARRAY_REF;\n-       u = TREE_OPERAND (u, 0))\n-    if (TREE_CODE (u) == COMPONENT_REF\n-\t&& TREE_CODE (TREE_TYPE (TREE_OPERAND (u, 0))) == UNION_TYPE)\n-      return 0;\n-\n   /* That's all the expressions we handle specially.  */\n   if (!TYPE_P (t))\n     return -1;"}, {"sha": "68e1f34edb54d4bf0ef2c87a2b7479a5a50bcfaf", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa83879c93d2367f5245c94bd2f12c19f486dae/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa83879c93d2367f5245c94bd2f12c19f486dae/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4aa83879c93d2367f5245c94bd2f12c19f486dae", "patch": "@@ -1,3 +1,9 @@\n+2016-06-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/71002\n+\t* f95-lang.c (LANG_HOOKS_GET_ALIAS_SET): Remove (un-)define.\n+\t(gfc_get_alias_set): Remove.\n+\n 2016-06-25  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/71649"}, {"sha": "5849073b66e4148f78195a66f5e0dfb90484ef02", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa83879c93d2367f5245c94bd2f12c19f486dae/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa83879c93d2367f5245c94bd2f12c19f486dae/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=4aa83879c93d2367f5245c94bd2f12c19f486dae", "patch": "@@ -74,7 +74,6 @@ static bool global_bindings_p (void);\n static bool gfc_init (void);\n static void gfc_finish (void);\n static void gfc_be_parse_file (void);\n-static alias_set_type gfc_get_alias_set (tree);\n static void gfc_init_ts (void);\n static tree gfc_builtin_function (tree);\n \n@@ -110,7 +109,6 @@ static const struct attribute_spec gfc_attribute_table[] =\n #undef LANG_HOOKS_MARK_ADDRESSABLE\n #undef LANG_HOOKS_TYPE_FOR_MODE\n #undef LANG_HOOKS_TYPE_FOR_SIZE\n-#undef LANG_HOOKS_GET_ALIAS_SET\n #undef LANG_HOOKS_INIT_TS\n #undef LANG_HOOKS_OMP_PRIVATIZE_BY_REFERENCE\n #undef LANG_HOOKS_OMP_PREDETERMINED_SHARING\n@@ -142,7 +140,6 @@ static const struct attribute_spec gfc_attribute_table[] =\n #define LANG_HOOKS_PARSE_FILE           gfc_be_parse_file\n #define LANG_HOOKS_TYPE_FOR_MODE\tgfc_type_for_mode\n #define LANG_HOOKS_TYPE_FOR_SIZE\tgfc_type_for_size\n-#define LANG_HOOKS_GET_ALIAS_SET\tgfc_get_alias_set\n #define LANG_HOOKS_INIT_TS\t\tgfc_init_ts\n #define LANG_HOOKS_OMP_PRIVATIZE_BY_REFERENCE\tgfc_omp_privatize_by_reference\n #define LANG_HOOKS_OMP_PREDETERMINED_SHARING\tgfc_omp_predetermined_sharing\n@@ -503,24 +500,6 @@ gfc_init_decl_processing (void)\n }\n \n \n-/* Return the typed-based alias set for T, which may be an expression\n-   or a type.  Return -1 if we don't do anything special.  */\n-\n-static alias_set_type\n-gfc_get_alias_set (tree t)\n-{\n-  tree u;\n-\n-  /* Permit type-punning when accessing an EQUIVALENCEd variable or\n-     mixed type entry master's return value.  */\n-  for (u = t; handled_component_p (u); u = TREE_OPERAND (u, 0))\n-    if (TREE_CODE (u) == COMPONENT_REF\n-\t&& TREE_CODE (TREE_TYPE (TREE_OPERAND (u, 0))) == UNION_TYPE)\n-      return 0;\n-\n-  return -1;\n-}\n-\n /* Builtin function initialization.  */\n \n static tree"}, {"sha": "e275dfc3c520d247565362b7e48f9de0230f91f4", "filename": "gcc/gimple.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa83879c93d2367f5245c94bd2f12c19f486dae/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa83879c93d2367f5245c94bd2f12c19f486dae/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=4aa83879c93d2367f5245c94bd2f12c19f486dae", "patch": "@@ -2400,21 +2400,6 @@ gimple_signed_type (tree type)\n alias_set_type\n gimple_get_alias_set (tree t)\n {\n-  tree u;\n-\n-  /* Permit type-punning when accessing a union, provided the access\n-     is directly through the union.  For example, this code does not\n-     permit taking the address of a union member and then storing\n-     through it.  Even the type-punning allowed here is a GCC\n-     extension, albeit a common and useful one; the C standard says\n-     that such accesses have implementation-defined behavior.  */\n-  for (u = t;\n-       TREE_CODE (u) == COMPONENT_REF || TREE_CODE (u) == ARRAY_REF;\n-       u = TREE_OPERAND (u, 0))\n-    if (TREE_CODE (u) == COMPONENT_REF\n-\t&& TREE_CODE (TREE_TYPE (TREE_OPERAND (u, 0))) == UNION_TYPE)\n-      return 0;\n-\n   /* That's all the expressions we handle specially.  */\n   if (!TYPE_P (t))\n     return -1;"}, {"sha": "70e90482ba09a4d56fcca742546008fb286ae033", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa83879c93d2367f5245c94bd2f12c19f486dae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa83879c93d2367f5245c94bd2f12c19f486dae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4aa83879c93d2367f5245c94bd2f12c19f486dae", "patch": "@@ -1,3 +1,8 @@\n+2016-06-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/71002\n+\t* g++.dg/torture/pr71002.C: Adjust testcase.\n+\n 2016-06-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/71685"}, {"sha": "666da0215a118ef0f6f2db16ed060b416e3f79e5", "filename": "gcc/testsuite/g++.dg/torture/pr71002.C", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa83879c93d2367f5245c94bd2f12c19f486dae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr71002.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa83879c93d2367f5245c94bd2f12c19f486dae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr71002.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr71002.C?ref=4aa83879c93d2367f5245c94bd2f12c19f486dae", "patch": "@@ -16,11 +16,6 @@ struct long_t\n   char* pointer;\n };\n \n-union long_raw_t {\n-  unsigned char data[sizeof(long_t)];\n-  struct __attribute__((aligned(alignof(long_t)))) { } align;\n-};\n-\n struct short_header\n {\n   unsigned char is_short : 1;\n@@ -35,20 +30,20 @@ struct short_t\n \n union repr_t\n {\n-  long_raw_t  r;\n+  long_t      r;\n   short_t     s;\n \n   const short_t& short_repr() const\n   { return s; }\n \n   const long_t& long_repr() const\n-  { return *static_cast<const long_t*>(static_cast<const void*>(&r)); }\n+  { return r; }\n \n   short_t& short_repr()\n   { return s;  }\n \n   long_t& long_repr()\n-  { return *static_cast<long_t*>(static_cast<void*>(&r)); }\n+  { return r; }\n };\n \n class string"}]}