{"sha": "6d80c4b9c828e26f69d0b83c812be9adabc82f61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ4MGM0YjljODI4ZTI2ZjY5ZDBiODNjODEyYmU5YWRhYmM4MmY2MQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-09-02T17:32:30Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-09-02T17:32:30Z"}, "message": "re PR c++/11808 (Wrong namespace lookup for template function when induced by a template parameter)\n\n\tPR c++/11808\n\t* cp-tree.h (KOENIG_LOOKUP_P): New macro.\n\t(finish_call_expr): Change prototype.\n\t* parser.c (cp_parser_postfix_expression): Adjust call to\n\tfinish_call_expr.\n\t* pt.c (tsubst_copy_and_build): Use KOENIG_LOOKUP_P.\n\t* semantics.c (finish_call_expr): Add koenig_p parameter.\n\n\tPR c++/11808\n\t* g++.dg/expr/call1.C: New test.\n\nFrom-SVN: r70998", "tree": {"sha": "65c3770d9e946aeae6c734c1e1b699792957fe41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65c3770d9e946aeae6c734c1e1b699792957fe41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d80c4b9c828e26f69d0b83c812be9adabc82f61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d80c4b9c828e26f69d0b83c812be9adabc82f61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d80c4b9c828e26f69d0b83c812be9adabc82f61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d80c4b9c828e26f69d0b83c812be9adabc82f61/comments", "author": null, "committer": null, "parents": [{"sha": "7a0f2d4eae4e32deb67a0af399724a49663eab6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a0f2d4eae4e32deb67a0af399724a49663eab6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a0f2d4eae4e32deb67a0af399724a49663eab6e"}], "stats": {"total": 99, "additions": 70, "deletions": 29}, "files": [{"sha": "e28ff5bf466881d6108f4d47c2b2f8e5555049ed", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d80c4b9c828e26f69d0b83c812be9adabc82f61/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d80c4b9c828e26f69d0b83c812be9adabc82f61/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6d80c4b9c828e26f69d0b83c812be9adabc82f61", "patch": "@@ -1,3 +1,13 @@\n+2003-09-02  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/11808\n+\t* cp-tree.h (KOENIG_LOOKUP_P): New macro.\n+\t(finish_call_expr): Change prototype.\n+\t* parser.c (cp_parser_postfix_expression): Adjust call to\n+\tfinish_call_expr.\n+\t* pt.c (tsubst_copy_and_build): Use KOENIG_LOOKUP_P.\n+\t* semantics.c (finish_call_expr): Add koenig_p parameter.\n+\n 2003-09-01  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/12114"}, {"sha": "cf4b8ce168e083f407822e381b871223d4106f52", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d80c4b9c828e26f69d0b83c812be9adabc82f61/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d80c4b9c828e26f69d0b83c812be9adabc82f61/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6d80c4b9c828e26f69d0b83c812be9adabc82f61", "patch": "@@ -46,6 +46,7 @@ struct diagnostic_context;\n       PTRMEM_OK_P (in ADDR_EXPR, OFFSET_REF)\n       PARMLIST_ELLIPSIS_P (in PARMLIST)\n       DECL_PRETTY_FUNCTION_P (in VAR_DECL)\n+      KOENIG_LOOKUP_P (in CALL_EXPR)\n    1: IDENTIFIER_VIRTUAL_P.\n       TI_PENDING_TEMPLATE_FLAG.\n       TEMPLATE_PARMS_FOR_INLINE.\n@@ -2293,6 +2294,10 @@ struct lang_decl GTY(())\n #define DELETE_EXPR_USE_GLOBAL(NODE)\tTREE_LANG_FLAG_0 (NODE)\n #define DELETE_EXPR_USE_VEC(NODE)\tTREE_LANG_FLAG_1 (NODE)\n \n+/* In a CALL_EXPR appearing in a template, true if Koenig lookup\n+   should be performed at instantiation time.  */\n+#define KOENIG_LOOKUP_P(NODE) TREE_LANG_FLAG_0(NODE)\n+\n /* Nonzero if this AGGR_INIT_EXPR provides for initialization via a\n    constructor call, rather than an ordinary function call.  */\n #define AGGR_INIT_VIA_CTOR_P(NODE) \\\n@@ -4105,7 +4110,7 @@ extern tree begin_stmt_expr                     (void);\n extern tree finish_stmt_expr_expr \t\t(tree);\n extern tree finish_stmt_expr                    (tree, bool);\n extern tree perform_koenig_lookup               (tree, tree);\n-extern tree finish_call_expr                    (tree, tree, bool);\n+extern tree finish_call_expr                    (tree, tree, bool, bool);\n extern tree finish_increment_expr               (tree, enum tree_code);\n extern tree finish_this_expr                    (void);\n extern tree finish_object_call_expr             (tree, tree, tree);"}, {"sha": "01d6dba61ed3679a690c906dab6181ff6292eb37", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d80c4b9c828e26f69d0b83c812be9adabc82f61/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d80c4b9c828e26f69d0b83c812be9adabc82f61/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=6d80c4b9c828e26f69d0b83c812be9adabc82f61", "patch": "@@ -3506,6 +3506,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p)\n \tcase CPP_OPEN_PAREN:\n \t  /* postfix-expression ( expression-list [opt] ) */\n \t  {\n+\t    bool koenig_p;\n \t    tree args = (cp_parser_parenthesized_expression_list \n \t\t\t (parser, false, /*non_constant_p=*/NULL));\n \n@@ -3524,14 +3525,18 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p)\n \t\tparser->non_constant_expression_p = true;\n \t      }\n \n+\t    koenig_p = false;\n \t    if (idk == CP_ID_KIND_UNQUALIFIED)\n \t      {\n \t\tif (args\n \t\t    && (is_overloaded_fn (postfix_expression)\n \t\t\t|| DECL_P (postfix_expression)\n \t\t\t|| TREE_CODE (postfix_expression) == IDENTIFIER_NODE))\n-\t\t  postfix_expression \n-\t\t    = perform_koenig_lookup (postfix_expression, args);\n+\t\t  {\n+\t\t    koenig_p = true;\n+\t\t    postfix_expression \n+\t\t      = perform_koenig_lookup (postfix_expression, args);\n+\t\t  }\n \t\telse if (TREE_CODE (postfix_expression) == IDENTIFIER_NODE)\n \t\t  postfix_expression\n \t\t    = unqualified_fn_lookup_error (postfix_expression);\n@@ -3570,12 +3575,14 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p)\n \t\t function.  */\n \t      postfix_expression\n \t\t= finish_call_expr (postfix_expression, args,\n-\t\t\t\t    /*disallow_virtual=*/true);\n+\t\t\t\t    /*disallow_virtual=*/true,\n+\t\t\t\t    koenig_p);\n \t    else\n \t      /* All other function calls.  */\n \t      postfix_expression \n \t\t= finish_call_expr (postfix_expression, args, \n-\t\t\t\t    /*disallow_virtual=*/false);\n+\t\t\t\t    /*disallow_virtual=*/false,\n+\t\t\t\t    koenig_p);\n \n \t    /* The POSTFIX_EXPRESSION is certainly no longer an id.  */\n \t    idk = CP_ID_KIND_NONE;"}, {"sha": "ae47b60ce7b006536315b1efd5a7457ab1e0784f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d80c4b9c828e26f69d0b83c812be9adabc82f61/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d80c4b9c828e26f69d0b83c812be9adabc82f61/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6d80c4b9c828e26f69d0b83c812be9adabc82f61", "patch": "@@ -8090,18 +8090,9 @@ tsubst_copy_and_build (tree t,\n \tbool koenig_p;\n \n \tfunction = TREE_OPERAND (t, 0);\n-\t/* To determine whether or not we should perform Koenig lookup\n-\t   we must look at the form of the FUNCTION.  */\n-\tkoenig_p = !(/* Koenig lookup does not apply to qualified\n-\t\t\tnames.  */\n-\t\t     TREE_CODE (function) == SCOPE_REF\n-\t\t     /* Or to references to members of classes.  */\n-\t\t     || TREE_CODE (function) == COMPONENT_REF\n-\t\t     /* If it is a FUNCTION_DECL or a baselink, then\n-\t\t\tthe name was already resolved when the\n-\t\t\ttemplate was parsed.  */\n-\t\t     || TREE_CODE (function) == FUNCTION_DECL\n-\t\t     || TREE_CODE (function) == BASELINK);\n+\t/* When we parsed the expression,  we determined whether or\n+\t   not Koenig lookup should be performed.  */\n+\tkoenig_p = KOENIG_LOOKUP_P (t);\n \tif (TREE_CODE (function) == SCOPE_REF)\n \t  {\n \t    qualified_p = true;\n@@ -8117,23 +8108,22 @@ tsubst_copy_and_build (tree t,\n \t    function = tsubst_copy_and_build (function, args, complain, \n \t\t\t\t\t      in_decl,\n \t\t\t\t\t      !qualified_p);\n+\t    if (BASELINK_P (function))\n+\t      qualified_p = true;\n \t  }\n \n \tcall_args = RECUR (TREE_OPERAND (t, 1));\n \t  \n-\tif (BASELINK_P (function))\n-\t  qualified_p = 1;\n-\n \tif (koenig_p\n-\t    && TREE_CODE (function) != TEMPLATE_ID_EXPR\n \t    && (is_overloaded_fn (function)\n \t\t|| DECL_P (function)\n \t\t|| TREE_CODE (function) == IDENTIFIER_NODE))\n+\t  function = perform_koenig_lookup (function, call_args);\n+\n+\tif (TREE_CODE (function) == IDENTIFIER_NODE)\n \t  {\n-\t    if (call_args)\n-\t      function = perform_koenig_lookup (function, call_args);\n-\t    else if (TREE_CODE (function) == IDENTIFIER_NODE)\n-\t      function = unqualified_name_lookup_error (function);\n+\t    unqualified_name_lookup_error (function);\n+\t    return error_mark_node;\n \t  }\n \n \t/* Remember that there was a reference to this entity.  */\n@@ -8151,7 +8141,8 @@ tsubst_copy_and_build (tree t,\n \t\t   call_args, NULL_TREE, \n \t\t   qualified_p ? LOOKUP_NONVIRTUAL : LOOKUP_NORMAL));\n \treturn finish_call_expr (function, call_args, \n-\t\t\t\t /*disallow_virtual=*/qualified_p);\n+\t\t\t\t /*disallow_virtual=*/qualified_p,\n+\t\t\t\t koenig_p);\n       }\n \n     case COND_EXPR:"}, {"sha": "8670f8bb06ebd3ac83530e842535df99dca479f0", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d80c4b9c828e26f69d0b83c812be9adabc82f61/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d80c4b9c828e26f69d0b83c812be9adabc82f61/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=6d80c4b9c828e26f69d0b83c812be9adabc82f61", "patch": "@@ -1585,7 +1585,7 @@ perform_koenig_lookup (tree fn, tree args)\n    Returns code for the call.  */\n \n tree \n-finish_call_expr (tree fn, tree args, bool disallow_virtual)\n+finish_call_expr (tree fn, tree args, bool disallow_virtual, bool koenig_p)\n {\n   tree result;\n   tree orig_fn;\n@@ -1605,7 +1605,11 @@ finish_call_expr (tree fn, tree args, bool disallow_virtual)\n     {\n       if (type_dependent_expression_p (fn)\n \t  || any_type_dependent_arguments_p (args))\n-\treturn build_nt (CALL_EXPR, fn, args);\n+\t{\n+\t  result = build_nt (CALL_EXPR, fn, args);\n+\t  KOENIG_LOOKUP_P (result) = koenig_p;\n+\t  return result;\n+\t}\n       if (!BASELINK_P (fn)\n \t  && TREE_CODE (fn) != PSEUDO_DTOR_EXPR\n \t  && TREE_TYPE (fn) != unknown_type_node)\n@@ -1707,7 +1711,10 @@ finish_call_expr (tree fn, tree args, bool disallow_virtual)\n     result = build_function_call (fn, args);\n \n   if (processing_template_decl)\n-    return build (CALL_EXPR, TREE_TYPE (result), orig_fn, orig_args);\n+    {\n+      result = build (CALL_EXPR, TREE_TYPE (result), orig_fn, orig_args);\n+      KOENIG_LOOKUP_P (result) = koenig_p;\n+    }\n   return result;\n }\n "}, {"sha": "f2d74d8ac201b97a7f4490b4ff208924d981318b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d80c4b9c828e26f69d0b83c812be9adabc82f61/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d80c4b9c828e26f69d0b83c812be9adabc82f61/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d80c4b9c828e26f69d0b83c812be9adabc82f61", "patch": "@@ -1,3 +1,8 @@\n+2003-09-02  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/11808\n+\t* g++.dg/expr/call1.C: New test.\n+\n 2003-09-01  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/12114"}, {"sha": "42d18db563efcd207c4cca83cc1d6076c79a4e8c", "filename": "gcc/testsuite/g++.dg/expr/call1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d80c4b9c828e26f69d0b83c812be9adabc82f61/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcall1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d80c4b9c828e26f69d0b83c812be9adabc82f61/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcall1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcall1.C?ref=6d80c4b9c828e26f69d0b83c812be9adabc82f61", "patch": "@@ -0,0 +1,16 @@\n+namespace NS_1 {\n+  struct A {};\n+  struct foo {};\n+}\n+\n+namespace NS_2 {\n+  template <typename T> void foo(T);\n+  \n+  template <typename T>\n+  void bar() {\n+    NS_1::A a;\n+    NS_2::foo(a);\n+  }\n+\n+  template void bar<int>();\n+}"}]}