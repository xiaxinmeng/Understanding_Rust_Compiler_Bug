{"sha": "070d862dde98557eab8c9ecb0adb4ca504503777", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcwZDg2MmRkZTk4NTU3ZWFiOGM5ZWNiMGFkYjRjYTUwNDUwMzc3Nw==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2016-04-18T10:27:19Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-18T10:27:19Z"}, "message": "sem_ch3.adb (Analyze_Object_Declaration): Do not consider internally generated expressions when...\n\n2016-04-18  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Object_Declaration): Do not consider\n\tinternally generated expressions when trying to determine whether\n\ta formal parameter of a tagged type subject to Extensions_Visible\n\tFalse is used to initialize an object.\n\t* sem_ch4.adb (Analyze_Type_Conversion): Do not consider\n\tinternally generated expressions when trying to determine whether\n\ta formal parameter of a tagged type subject to Extensions_Visible\n\tFalse is used in a type conversion.\n\nFrom-SVN: r235117", "tree": {"sha": "2967e9cd16a2787a48b40745c952d20453470d19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2967e9cd16a2787a48b40745c952d20453470d19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/070d862dde98557eab8c9ecb0adb4ca504503777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070d862dde98557eab8c9ecb0adb4ca504503777", "html_url": "https://github.com/Rust-GCC/gccrs/commit/070d862dde98557eab8c9ecb0adb4ca504503777", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070d862dde98557eab8c9ecb0adb4ca504503777/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "933aa0ac81ee62b104969294ce6ab117e1602968", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/933aa0ac81ee62b104969294ce6ab117e1602968", "html_url": "https://github.com/Rust-GCC/gccrs/commit/933aa0ac81ee62b104969294ce6ab117e1602968"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "11833965241fb157de3141206a13e98a00dee4d9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070d862dde98557eab8c9ecb0adb4ca504503777/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070d862dde98557eab8c9ecb0adb4ca504503777/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=070d862dde98557eab8c9ecb0adb4ca504503777", "patch": "@@ -1,3 +1,14 @@\n+2016-04-18  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Do not consider\n+\tinternally generated expressions when trying to determine whether\n+\ta formal parameter of a tagged type subject to Extensions_Visible\n+\tFalse is used to initialize an object.\n+\t* sem_ch4.adb (Analyze_Type_Conversion): Do not consider\n+\tinternally generated expressions when trying to determine whether\n+\ta formal parameter of a tagged type subject to Extensions_Visible\n+\tFalse is used in a type conversion.\n+\n 2016-04-18  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_res.adb (Is_Protected_Operation_Call):"}, {"sha": "56e8a74f2bff9c7040b387d6076a4816eaf961c9", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070d862dde98557eab8c9ecb0adb4ca504503777/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070d862dde98557eab8c9ecb0adb4ca504503777/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=070d862dde98557eab8c9ecb0adb4ca504503777", "patch": "@@ -3776,9 +3776,13 @@ package body Sem_Ch3 is\n          --  A formal parameter of a specific tagged type whose related\n          --  subprogram is subject to pragma Extensions_Visible with value\n          --  \"False\" cannot be implicitly converted to a class-wide type by\n-         --  means of an initialization expression (SPARK RM 6.1.7(3)).\n+         --  means of an initialization expression (SPARK RM 6.1.7(3)). Do\n+         --  not consider internally generated expressions.\n \n-         if Is_Class_Wide_Type (T) and then Is_EVF_Expression (E) then\n+         if Is_Class_Wide_Type (T)\n+           and then Comes_From_Source (E)\n+           and then Is_EVF_Expression (E)\n+         then\n             Error_Msg_N\n               (\"formal parameter with Extensions_Visible False cannot be \"\n                & \"implicitly converted to class-wide type\", E);"}, {"sha": "bdcf0e112e15c708f108da4d7c1356db50334632", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070d862dde98557eab8c9ecb0adb4ca504503777/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070d862dde98557eab8c9ecb0adb4ca504503777/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=070d862dde98557eab8c9ecb0adb4ca504503777", "patch": "@@ -5158,9 +5158,13 @@ package body Sem_Ch4 is\n \n       --  A formal parameter of a specific tagged type whose related subprogram\n       --  is subject to pragma Extensions_Visible with value \"False\" cannot\n-      --  appear in a class-wide conversion (SPARK RM 6.1.7(3)).\n+      --  appear in a class-wide conversion (SPARK RM 6.1.7(3)). Do not check\n+      --  internally generated expressions.\n \n-      if Is_Class_Wide_Type (Typ) and then Is_EVF_Expression (Expr) then\n+      if Is_Class_Wide_Type (Typ)\n+        and then Comes_From_Source (Expr)\n+        and then Is_EVF_Expression (Expr)\n+      then\n          Error_Msg_N\n            (\"formal parameter with Extensions_Visible False cannot be \"\n             & \"converted to class-wide type\", Expr);\n@@ -6602,7 +6606,7 @@ package body Sem_Ch4 is\n             --  Boolean, then we know that the other operand cannot resolve to\n             --  Boolean (since we got no interpretations), but in that case we\n             --  pretty much know that the other operand should be Boolean, so\n-            --  resolve it that way (generating an error)\n+            --  resolve it that way (generating an error).\n \n             elsif Nkind_In (N, N_Op_And, N_Op_Or, N_Op_Xor) then\n                if Etype (L) = Standard_Boolean then"}]}