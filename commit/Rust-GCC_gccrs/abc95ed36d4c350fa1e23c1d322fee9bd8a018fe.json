{"sha": "abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJjOTVlZDM2ZDRjMzUwZmExZTIzYzFkMzIyZmVlOWJkOGEwMThmZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-08-28T10:54:22Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-08-28T10:54:22Z"}, "message": "Fix spelling errors.\n\nFrom-SVN: r10289", "tree": {"sha": "1c83e6e4689be8894157ee8b0f76e689bf3b8871", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c83e6e4689be8894157ee8b0f76e689bf3b8871"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/comments", "author": null, "committer": null, "parents": [{"sha": "2d5144e9ae5ef3e32c059f6a572d4bab6863c976", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d5144e9ae5ef3e32c059f6a572d4bab6863c976", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d5144e9ae5ef3e32c059f6a572d4bab6863c976"}], "stats": {"total": 126, "additions": 63, "deletions": 63}, "files": [{"sha": "11b93d7797280c61d160e6c24ec3459f50dad3d4", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -5231,7 +5231,7 @@ really_start_incremental_init (type)\n       || TREE_CODE (constructor_type) == UNION_TYPE)\n     {\n       constructor_fields = TYPE_FIELDS (constructor_type);\n-      /* Skip any nameless bit fields atthe beginning.  */\n+      /* Skip any nameless bit fields at the beginning.  */\n       while (constructor_fields != 0 && DECL_BIT_FIELD (constructor_fields)\n \t     && DECL_NAME (constructor_fields) == 0)\n \tconstructor_fields = TREE_CHAIN (constructor_fields);\n@@ -5403,7 +5403,7 @@ push_init_level (implicit)\n \t   || TREE_CODE (constructor_type) == UNION_TYPE)\n     {\n       constructor_fields = TYPE_FIELDS (constructor_type);\n-      /* Skip any nameless bit fields atthe beginning.  */\n+      /* Skip any nameless bit fields at the beginning.  */\n       while (constructor_fields != 0 && DECL_BIT_FIELD (constructor_fields)\n \t     && DECL_NAME (constructor_fields) == 0)\n \tconstructor_fields = TREE_CHAIN (constructor_fields);\n@@ -6221,7 +6221,7 @@ process_init_element (value)\n \t    }\n \n \t  constructor_fields = TREE_CHAIN (constructor_fields);\n-\t  /* Skip any nameless bit fields atthe beginning.  */\n+\t  /* Skip any nameless bit fields at the beginning.  */\n \t  while (constructor_fields != 0 && DECL_BIT_FIELD (constructor_fields)\n \t\t && DECL_NAME (constructor_fields) == 0)\n \t    constructor_fields = TREE_CHAIN (constructor_fields);"}, {"sha": "4e930fce055b8a45e355dc1d45a9a7cdbc873641", "filename": "gcc/collect2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -2099,7 +2099,7 @@ libselect (d)\n   return (strncmp (libname, d->d_name, strlen (libname)) == 0);\n }\n \n-/* If one file has an additional numeric extention past LIBNAME, then put\n+/* If one file has an additional numeric extension past LIBNAME, then put\n    that one first in the sort.  If both files have additional numeric\n    extensions, then put the one with the higher number first in the sort.\n "}, {"sha": "aa304452689066be30c67a5ae2494fba65ef5fed", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -7658,7 +7658,7 @@ simplify_shift_const (x, code, result_mode, varop, count)\n       if (complement_p)\n \tbreak;\n \n-      /* Convert ROTATETRT to ROTATE.  */\n+      /* Convert ROTATERT to ROTATE.  */\n       if (code == ROTATERT)\n \tcode = ROTATE, count = GET_MODE_BITSIZE (result_mode) - count;\n \n@@ -9215,7 +9215,7 @@ simplify_comparison (code, pop0, pop1)\n \n \tcase SUBREG:\n \t  /* Check for the case where we are comparing A - C1 with C2,\n-\t     both constants are smaller than 1/2 the maxium positive\n+\t     both constants are smaller than 1/2 the maximum positive\n \t     value in MODE, and the comparison is equality or unsigned.\n \t     In that case, if A is either zero-extended to MODE or has\n \t     sufficient sign bits so that the high-order bit in MODE"}, {"sha": "d0bac465c234aa9cc3cdefa176be7493e10c2963", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -519,7 +519,7 @@ enum reg_class { NO_REGS, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLASSES };\n /* Define the following macro if function calls on the target machine\n    do not preserve any registers; in other words, if `CALL_USED_REGISTERS'\n    has 1 for all registers. This macro enables `-fcaller-saves' by\n-   default. Eventually that option will be nabled by default on all\n+   default. Eventually that option will be enabled by default on all\n    machines and both the option and this macro will be eliminated. */\n \n #define DEFAULT_CALLER_SAVES"}, {"sha": "02e64699c0679d45f9546e475bd5e0ef631f2a4b", "filename": "gcc/config/1750a/1750a.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2F1750a%2F1750a.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2F1750a%2F1750a.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.md?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -969,7 +969,7 @@\n ;********************\n \n ;; Bit field instructions, general cases.\n-;; \"o,d\" constraint causes a nonoffsetable memref to match the \"o\"\n+;; \"o,d\" constraint causes a nonoffsettable memref to match the \"o\"\n ;; so that its address is reloaded.\n \n ;; (define_insn \"extv\" ..."}, {"sha": "3db24d5d4d0c5b56c035751b7eda35d1c1a291e0", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -1526,7 +1526,7 @@ extern char *current_function_name;\n /* Define an extra section for read-only data, a routine to enter it, and\n    indicate that it is for read-only data.\n \n-   The first timem we enter the readonly data sectiono for a file, we write\n+   The first time we enter the readonly data section for a file, we write\n    eight bytes of zero.  This works around a bug in DEC's assembler in\n    some versions of OSF/1 V3.x.  */\n "}, {"sha": "db5ffdead35002362277f0a7ed7d7868207334ca", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -780,7 +780,7 @@ enum reg_class\n    Frame pointer elimination is automatically handled.\n \n    All eliminations are permissible.  Note that ARG_POINTER_REGNUM and\n-   HARD_FRAME_POINTER_REGNUM are infact the same thing.  If we need a frame\n+   HARD_FRAME_POINTER_REGNUM are in fact the same thing.  If we need a frame\n    pointer, we must eliminate FRAME_POINTER_REGNUM into\n    HARD_FRAME_POINTER_REGNUM and not into STACK_POINTER_REGNUM.  */\n #define CAN_ELIMINATE(FROM, TO)\t\t\\"}, {"sha": "6e32594b6e7372112b3101a9e4168e13883168ad", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -1007,7 +1007,7 @@ enum reg_class\n #endif\n \n /* A C expression for the maximum number of consecutive registers of class CLASS\n-   needed to hold a vlaue of mode MODE */\n+   needed to hold a value of mode MODE */\n #define CLASS_MAX_NREGS(CLASS, MODE)                                \\\n     class_max_nregs(CLASS, MODE)\n "}, {"sha": "8db3c3646e996ee8185b81e4fe1f5bf5cdb60437", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for Hitachi H8/300.\n-   Copyright (C) 1992, 1993, 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 1993, 1994, 1995 Free Software Foundation, Inc.\n    Contributed by Steve Chamberlain (sac@cygnus.com),\n    Jim Wilson (wilson@cygnus.com), and Doug Evans (dje@cygnus.com).\n \n@@ -2002,7 +2002,7 @@ fix_bit_operand (operands, what, type)\n      char what;\n      enum rtx_code type;\n {\n-  /* The bit_operand predicate accepts any memory durint RTL generation, but\n+  /* The bit_operand predicate accepts any memory during RTL generation, but\n      only 'U' memory afterwards, so if this is a MEM operand, we must force\n      it to be valid for 'U' by reloading the address.  */\n "}, {"sha": "6ad86168c9c9104e678cd41c4ec385ebd05efdd1", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -1853,7 +1853,7 @@\n   if (GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) >= 8)\n     FAIL;\n \n-  /* The bit_operand predicate accepts any memory durint RTL generation, but\n+  /* The bit_operand predicate accepts any memory during RTL generation, but\n      only 'U' memory afterwards, so if this is a MEM operand, we must force\n      it to be valid for 'U' by reloading the address.  */\n \n@@ -1897,7 +1897,7 @@\n   if (INTVAL (operands[2]) != 1)\n     FAIL;\n \n-  /* The bit_operand predicate accepts any memory durint RTL generation, but\n+  /* The bit_operand predicate accepts any memory during RTL generation, but\n      only 'U' memory afterwards, so if this is a MEM operand, we must force\n      it to be valid for 'U' by reloading the address.  */\n "}, {"sha": "d3348d552928f256f7c24f49d41c172def8728b0", "filename": "gcc/config/i386/svr3dbx.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Fi386%2Fsvr3dbx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Fi386%2Fsvr3dbx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsvr3dbx.h?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for Intel 386 running system V, using dbx-in-coff encapsulation.\n-   Copyright (C) 1992 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 1995 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -37,7 +37,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* With the current gas, .align N aligns to an N-byte boundary.\n    This is done to be compatible with the system assembler.\n-   You have specify -DOTHER_ALIGN wenn building gas-1.38.1. */\n+   You must specify -DOTHER_ALIGN when building gas-1.38.1.  */\n \n #undef ASM_OUTPUT_ALIGN\n #define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\"}, {"sha": "7bde093a4c4fe09b51274749ed7c6384b15b78bd", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -308,7 +308,7 @@ extern int target_flags;\n /* Target machine storage layout.  */\n \n /* Define for cross-compilation from a host with a different float format\n-   or endianess, as well as to support 80 bit long doubles on the i960.  */\n+   or endianness, as well as to support 80 bit long doubles on the i960.  */\n #define REAL_ARITHMETIC\n \n /* Define this if most significant bit is lowest numbered"}, {"sha": "1402a25618677c57cc01822d59771f3a7fe90894", "filename": "gcc/config/m68k/dpx2.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Fm68k%2Fdpx2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Fm68k%2Fdpx2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fdpx2.h?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.  \n    Bull DPX/2 200 and 300 systems (m68k, SysVr3).\n-   Copyright (C) 1987, 1993, 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1993, 1994, 1995 Free Software Foundation, Inc.\n    Contributed by Frederic Pierresteguy (F.Pierresteguy@frcl.bull.fr).\n \n This file is part of GNU CC.\n@@ -75,7 +75,7 @@ Boston, MA 02111-1307, USA.  */\n  * handle the native MOTOROLA VERSAdos assembler.\n  */\n \n-/* See m68k.h.  3 means 68020 with 68881 and no bitfiled\n+/* See m68k.h.  3 means 68020 with 68881 and no bitfield\n  * bitfield instructions do not seem to work a clean way.\n  */\n #undef TARGET_DEFAULT"}, {"sha": "48644134942d0156d6d581a056c6078f477a7130", "filename": "gcc/config/m68k/m68kv4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Fm68k%2Fm68kv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Fm68k%2Fm68kv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68kv4.h?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -209,7 +209,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef BIGGEST_ALIGNMENT\n #define BIGGEST_ALIGNMENT 64\n \n-/* SVR4 m68k assembler is bitching on the `comm i,1,1' which askes for \n+/* SVR4 m68k assembler is bitching on the `comm i,1,1' which asks for \n    1 byte alignment. Don't generate alignment for COMMON seems to be\n    safer until we the assembler is fixed. */\n #undef ASM_OUTPUT_ALIGNED_COMMON"}, {"sha": "9e58352ec43544b57948e53c7da0214b5060346c", "filename": "gcc/config/m88k/m88k.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Fm88k%2Fm88k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Fm88k%2Fm88k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.md?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -2717,7 +2717,7 @@\n \f\n ;;- multiply instructions\n ;;\n-;; There is an unfounded silicon eratta for E.1 requiring that an\n+;; There is an unfounded silicon errata for E.1 requiring that an\n ;; immediate constant value in div/divu/mul instructions be less than\n ;; 0x800.  This is no longer provided for.\n \n@@ -2814,7 +2814,7 @@\n ;; negative.  The O/S will signal an overflow condition if the most\n ;; negative number (-214783648) is divided by negative 1.\n ;;\n-;; There is an unfounded silicon eratta for E.1 requiring that an\n+;; There is an unfounded silicon errata for E.1 requiring that an\n ;; immediate constant value in div/divu/mul instructions be less than\n ;; 0x800.  This is no longer provided for.\n "}, {"sha": "4e6d7f372e7c0edb482fcade3f8f32ae4b8e5dfc", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -873,13 +873,13 @@ embedded_pic_offset (x)\n \n       embedded_pic_fnaddr_rtx = gen_reg_rtx (Pmode);\n       \n-      /* Output code at function start to initialize the psuedo-reg.  */\n+      /* Output code at function start to initialize the pseudo-reg.  */\n       /* ??? We used to do this in FINALIZE_PIC, but that does not work for\n \t inline functions, because it is called after RTL for the function\n \t has been copied.  The pseudo-reg in embedded_pic_fnaddr_rtx however\n \t does not get copied, and ends up not matching the rest of the RTL.\n \t This solution works, but means that we get unnecessary code to\n-\t initialize this value everytime a function is inlined into another\n+\t initialize this value every time a function is inlined into another\n \t function.  */\n       start_sequence ();\n       emit_insn (gen_get_fnaddr (embedded_pic_fnaddr_rtx,"}, {"sha": "dfef30fcc3fc7343c5f064bdcf347b530c9a20f1", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -515,7 +515,7 @@ legitimize_pic_address (orig, mode, reg)\n {\n   rtx pic_ref = orig;\n \n-  /* Lables need special handling.  */\n+  /* Labels need special handling.  */\n   if (pic_label_operand (orig))\n     {\n       emit_insn (gen_pic_load_label (reg, orig));"}, {"sha": "46cd53d38e6218246eb49969f608f31d096239f0", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -566,7 +566,7 @@ maybe ac0 ? - as option someday! */\n /* should probably return DImode and DFmode in memory,lest\n    we fill up all regs!\n \n- have to, else we crash - exceptio: maybe return result in \n+ have to, else we crash - exception: maybe return result in \n  ac0 if DFmode and FPU present - compatibility problem with\n  libraries for non-floating point ...\n */"}, {"sha": "e9ebfbf338c730b3854e9126034b3bbedf1a0519", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -862,8 +862,8 @@ typedef struct rs6000_stack {\n   int push_p;\t\t\t/* true if we need to allocate stack space */\n   int calls_p;\t\t\t/* true if the function makes any calls */\n   int v4_call_p;\t\t/* true if V.4 calling sequence used */\n-  int gp_save_offset;\t\t/* offset to save GP regs from inital SP */\n-  int fp_save_offset;\t\t/* offset to save FP regs from inital SP */\n+  int gp_save_offset;\t\t/* offset to save GP regs from initial SP */\n+  int fp_save_offset;\t\t/* offset to save FP regs from initial SP */\n   int lr_save_offset;\t\t/* offset to save LR from initial SP */\n   int cr_save_offset;\t\t/* offset to save CR from initial SP */\n   int varargs_save_offset;\t/* offset to save the varargs registers */\n@@ -1279,7 +1279,7 @@ typedef struct rs6000_args\n    For the RS/6000, if frame pointer elimination is being done, we would like\n    to convert ap into fp, not sp.\n \n-   We need r30 if -mmininal-toc was specified, and there are constant pool\n+   We need r30 if -mminimal-toc was specified, and there are constant pool\n    references.  */\n \n #define CAN_ELIMINATE(FROM, TO)\t\t\t\t\t\\"}, {"sha": "70dd90db9a0c961287b6195f14d3f17b8dfa937d", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -3908,7 +3908,7 @@\n     {\n       /* If we are to limit the number of things we put in the TOC and\n \t this is a symbol plus a constant we can add in one insn,\n-\t just put the sumbol in the TOC and add the constant.  Don't do\n+\t just put the symbol in the TOC and add the constant.  Don't do\n \t this if reload is in progress.  */\n       if (GET_CODE (operands[1]) == CONST\n \t  && TARGET_NO_SUM_IN_TOC && ! reload_in_progress"}, {"sha": "6d8d3e8ffb41f7aae836aa5d934a9e28a1932cc0", "filename": "gcc/config/sh/lib1funcs.asm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Fsh%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Fsh%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flib1funcs.asm?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1994 Free Software Foundation, Inc.\n+/* Copyright (C) 1994, 1995 Free Software Foundation, Inc.\n \n This file is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -779,7 +779,7 @@ ___mulsi3:\n \txtrct   r2,r3\t\t! r3 = aacc\n \ttst  \tr3,r3\t\t! msws zero ?\n \tbf      hiset\n-\trts\t\t\t! yes - then weve got the answer\n+\trts\t\t\t! yes - then we have the answer\n \tsts     macl,r0\n \n hiset:\tsts\tmacl,r0\t\t! r0 = bb*dd"}, {"sha": "59ed5fd142a37a94f030676153f1d7086dee0b4e", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -3959,7 +3959,7 @@ sparc_type_code (type)\n   register unsigned long qualifiers = 0;\n   register unsigned shift = 6;\n \n-  /* Only the first 30 bits of the qualifer are valid.  We must refrain from\n+  /* Only the first 30 bits of the qualifier are valid.  We must refrain from\n      setting more, since some assemblers will give an error for this.  Also,\n      we must be careful to avoid shifts of 32 bits or more to avoid getting\n      unpredictable results.  */"}, {"sha": "bab753b28c277c02945d063832c5eaa6dd83cf51", "filename": "gcc/config/winnt/spawnv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Fwinnt%2Fspawnv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fconfig%2Fwinnt%2Fspawnv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwinnt%2Fspawnv.c?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -1,5 +1,5 @@\n /* This is a kludge to get around the Microsoft C spawn functions' propensity\n-   to remove the outermost set of double quotes from all arguements.  */\n+   to remove the outermost set of double quotes from all arguments.  */\n \n \n #define index(s,c) strchr((s),(c))"}, {"sha": "11466b24a429f6dd034ca70c217529b442c02f9e", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -196,7 +196,7 @@ parse.o : $(PARSE_C) $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h lex.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(BIG_SWITCHFLAG) \\\n   `echo $(PARSE_C) | sed 's,^\\./,,'`\n \n-CONFLICTS = expect 5 shift/reduce confict and 38 reduce/reduce conflicts.\n+CONFLICTS = expect 5 shift/reduce conflicts and 38 reduce/reduce conflicts.\n $(PARSE_H) : $(PARSE_C)\n $(PARSE_C) : $(srcdir)/parse.y\n \t@echo $(CONFLICTS)"}, {"sha": "686f52a40843df58211239c467f81154b9200db5", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -553,7 +553,7 @@ struct binding_level\n     unsigned int n_incomplete;\n \n     /* List of VAR_DECLS saved from a previous for statement.\n-       These would be dead in ANSI-conformant code, but might\n+       These would be dead in ANSI-conforming code, but might\n        be referenced in traditional code. */\n     tree dead_vars_from_for;\n \n@@ -1704,7 +1704,7 @@ push_namespace (name)\n \n   if (! name)\n     {\n-      /* Create a truely ugly name! */\n+      /* Create a truly ugly name! */\n       name = get_unique_name ();\n     }\n "}, {"sha": "c95bb5939196d9e0964e2d6cee1fae4dfb37d734", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -365,7 +365,7 @@ int flag_check_new;\n    initialization variables.\n    0: Old rules, set by -fno-for-scope.\n    2: New ANSI rules, set by -ffor-scope.\n-   1: Try to implement new ANSI rules, but with backup compatility\n+   1: Try to implement new ANSI rules, but with backup compatibility\n    (and warnings).  This is the default, for now.  */\n \n int flag_new_for_scope = 1;"}, {"sha": "f307babbca4f2475641d47b9ecc80590d9351bd7", "filename": "gcc/cp/gxxint.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fcp%2Fgxxint.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fcp%2Fgxxint.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fgxxint.texi?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -1214,7 +1214,7 @@ nop, if they are the same size.\n \n When we invoke the copy constructor for an exception object because it\n is passed by value, and if we take a hit (exception) inside the copy\n-constructor someplace, where do we go?  I have tentatively choosen to\n+constructor someplace, where do we go?  I have tentatively chosen to\n not catch throws by the outer block at the same unwind level, if one\n exists, but rather to allow the frame to unwind into the next series of\n handlers, if any.  If this is the wrong way to do it, we will need to"}, {"sha": "caecaa541152e144822186894fed8fd957913829", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -753,7 +753,7 @@ layout_basetypes (rec, binfos)\n   /* Record size so far is CONST_SIZE + VAR_SIZE bits, where CONST_SIZE is\n      an integer and VAR_SIZE is a tree expression.  If VAR_SIZE is null,\n      the size is just CONST_SIZE.  Naturally we try to avoid using\n-     VAR_SIZE.  And so far, we've been sucessful. */\n+     VAR_SIZE.  And so far, we've been successful. */\n #if 0\n   register tree var_size = 0;\n #endif"}, {"sha": "09001dbc9d51888f9e2d09015111dbc43b063a07", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -6213,7 +6213,7 @@ language_lvalue_valid (exp)\n }\n \f\n /* Get difference in deltas for different pointer to member function\n-   types.  Return inetger_zero_node, if FROM cannot be converted to a\n+   types.  Return integer_zero_node, if FROM cannot be converted to a\n    TO type.  If FORCE is true, then allow reverse conversions as well.  */\n static tree\n get_delta_difference (from, to, force)"}, {"sha": "3eb27cc9b847c9f237274db0867715457a7a19cf", "filename": "gcc/cplus-dem.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcplus-dem.c?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -1184,7 +1184,7 @@ DESCRIPTION\n \tOn exit, it points to the next token after the mangled class on\n \tsuccess, or the first unconsumed token on failure.\n \n-\tIf the constRUCTOR or DESTRUCTOR flags are set in WORK, then\n+\tIf the CONSTRUCTOR or DESTRUCTOR flags are set in WORK, then\n \twe are demangling a constructor or destructor.  In this case\n \twe prepend \"class::class\" or \"class::~class\" to DECLP.\n "}, {"sha": "0b715c86d7bd6c42a3696dd0d38a7df90c66479d", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -2270,7 +2270,7 @@ set_nonvarying_address_components (addr, size, pbase, pstart, pend)\n       base = qty_const[reg_qty[REGNO (XEXP (base, 0))]];\n     }\n   /* This can happen as the result of virtual register instantiation,\n-     if the inital offset is too large to be a valid address.  */\n+     if the initial offset is too large to be a valid address.  */\n   else if (GET_CODE (base) == PLUS\n \t   && GET_CODE (XEXP (base, 0)) == REG\n \t   && GET_CODE (XEXP (base, 1)) == REG"}, {"sha": "53e5c06052ade3c0f75a71cb7c3aff6dd4bc4ecd", "filename": "gcc/fix-header.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -16,7 +16,7 @@ along with this program; if not, write to the Free Software\n Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n /* This program massages a system include file (such as stdio.h),\n-   into a form more conformant with ANSI/POSIX, and more suitable for C++:\n+   into a form more conforming with ANSI/POSIX, and more suitable for C++:\n \n    * extern \"C\" { ... } braces are added (inside #ifndef __cplusplus),\n    if they seem to be needed.  These prevent C++ compilers from name"}, {"sha": "1e4ff88175c638b98cee1c596db53c5f4d0709bc", "filename": "gcc/flow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -1862,7 +1862,7 @@ libcall_dead_p (x, needed, note, insn)\n \n /* Return 1 if register REGNO was used before it was set.\n    In other words, if it is live at function entry.\n-   Don't count global regster variables, though.  */\n+   Don't count global register variables, though.  */\n \n int\n regno_uninitialized (regno)"}, {"sha": "12683751b222de62393154e06ed1b67cf68fe4c6", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -3456,7 +3456,7 @@ assign_parms (fndecl, second_time)\n \t     ??? When MAYBE_REG_PARM_STACK_SPACE is defined, we can't tell\n \t     whether this parameter already has a stack slot allocated,\n \t     because an arg block exists only if current_function_args_size\n-\t     is larger than some threshhold, and we haven't calculated that\n+\t     is larger than some threshold, and we haven't calculated that\n \t     yet.  So, for now, we just assume that stack slots never exist\n \t     in this case.  */\n \t  || REG_PARM_STACK_SPACE (fndecl) > 0"}, {"sha": "09382a8e0e5262f4a48ca185dc8f35414ee1e4e9", "filename": "gcc/integrate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -669,7 +669,7 @@ copy_decl_tree (block)\n   BLOCK_VARS (t) = vars;\n   BLOCK_SUBBLOCKS (t) = nreverse (subblocks);\n   /* If the BLOCK being cloned is already marked as having been instantiated\n-     from something else, then leave that `origin' marking alone.  Elsewise,\n+     from something else, then leave that `origin' marking alone.  Otherwise,\n      mark the clone as having originated from the BLOCK we are cloning.  */\n   if (BLOCK_ABSTRACT_ORIGIN (t) == NULL_TREE)\n     BLOCK_ABSTRACT_ORIGIN (t) = block;"}, {"sha": "3879bc098a1699cfae256063f9151b0ddb9741e3", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -2204,7 +2204,7 @@ find_exception_table (pc)\n     return 0;\n \n    Assuming a correctly sorted table (ascending order) this routine should\n-   return the tighest match...\n+   return the tightest match...\n \n    In the advent of a tie, we have to give the last entry, as it represents\n    an inner block."}, {"sha": "7a83b0854d14d912a614b9074ef41e13eca4c98f", "filename": "gcc/objc/hash.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fobjc%2Fhash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fobjc%2Fhash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fhash.h?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -1,5 +1,5 @@\n /* Hash tables for Objective C method dispatch.\n-   Copyright (C) 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1995 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -63,7 +63,7 @@ typedef unsigned int (*hash_func_type)(void *, const void *);\n /*\n  * This data type is the function that compares two hash keys and returns an\n  * integer greater than, equal to, or less than 0, according as the first\n- * parameter is lexico-graphically greater than, equal to, or less than the\n+ * parameter is lexicographically greater than, equal to, or less than the\n  * second. \n  */\n "}, {"sha": "951f46909215a25ad1126240d63e03d9c45653da", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -2788,7 +2788,7 @@ encode_method_prototype (method_decl, func_decl)\n       /* Compute offset. */\n       sprintf (buf, \"%d\", forwarding_offset (parms));\n \n-      /* Indicate registe.r */\n+      /* Indicate register. */\n       if (offset_is_register)\n \tobstack_1grow (&util_obstack, '+');\n       "}, {"sha": "df8ec65b143f20e44e5aaa0de807c9b8cdf10676", "filename": "gcc/protoize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -2993,7 +2993,7 @@ seek_to_line (n)\n }\n \n /* Given a pointer to a character in the cleaned text buffer, return a pointer\n-   to the next non-whitepace character which follows it.  */\n+   to the next non-whitespace character which follows it.  */\n \n static const char *\n forward_to_next_token_char (ptr)"}, {"sha": "519fcc2da1948bcc900b4e1159bd67b04ec6fdd5", "filename": "gcc/reload.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -4862,7 +4862,7 @@ find_reloads_address_1 (x, context, loc, opnum, type, ind_levels)\n \t\t  return 1;\n \t\t}\n \t    }\n-\t  /* If this is a SUBREG of a pseudo-register, and the psuedo-register\n+\t  /* If this is a SUBREG of a pseudo-register, and the pseudo-register\n \t     is larger than the class size, then reload the whole SUBREG.  */\n \t  else\n \t    {\n@@ -5155,7 +5155,7 @@ refers_to_regno_for_reload_p (regno, endregno, x, loc)\n \t       && refers_to_regno_for_reload_p (regno, endregno,\n \t\t\t\t\t\tSUBREG_REG (SET_DEST (x)),\n \t\t\t\t\t\tloc))\n-\t      /* If the ouput is an earlyclobber operand, this is\n+\t      /* If the output is an earlyclobber operand, this is\n \t\t a conflict.  */\n \t      || ((GET_CODE (SET_DEST (x)) != REG\n \t\t   || earlyclobber_operand_p (SET_DEST (x)))"}, {"sha": "a03a603ff11c7d8a12e8570d6e2abfe05caf1f0b", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -3236,7 +3236,7 @@ eliminate_regs_in_insn (insn, replace)\n \t       will delete it in reload_as_needed once we know that this\n \t       elimination is, in fact, being done.\n \n-\t       If REPLACE isn't set, we can't delete this insn, but neededn't\n+\t       If REPLACE isn't set, we can't delete this insn, but needn't\n \t       process it since it won't be used unless something changes.  */\n \t    if (replace)\n \t      delete_dead_insn (insn);"}, {"sha": "4d9563d490d4ad94b9566c31813ad5fee4fc4444", "filename": "gcc/reorg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -1372,7 +1372,7 @@ mostly_true_jump (jump_insn, condition)\n \t  return 1;\n     }\n \n-  /* Look at the relative rarities of the fallthough and destination.  If\n+  /* Look at the relative rarities of the fallthrough and destination.  If\n      they differ, we can predict the branch that way. */\n \n   switch (rare_fallthrough - rare_dest)\n@@ -3649,7 +3649,7 @@ fill_eager_delay_slots (first)\n       if (condition == 0)\n \tcontinue;\n \n-      /* Get the next active fallthough and target insns and see if we own\n+      /* Get the next active fallthrough and target insns and see if we own\n \t them.  Then see whether the branch is likely true.  We don't need\n \t to do a lot of this for unconditional branches.  */\n "}, {"sha": "ea95fdaef0b8c13ce5a65bcf7503af1ff6ce9a5e", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -2781,7 +2781,7 @@ expand_return (retval)\n \t   bitpos += bitsize, xbitpos += bitsize)\n \t{\n \t  /* We need a new destination pseudo each time xbitpos is\n-\t     on a word boundary and when xbitpos == big_endian_corrction\n+\t     on a word boundary and when xbitpos == big_endian_correction\n \t     (the first time through).  */\n \t  if (xbitpos % BITS_PER_WORD == 0\n \t      || xbitpos == big_endian_correction)"}, {"sha": "1088e095f3020d6f829e8d78491dc320fb6ae5aa", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -46,7 +46,7 @@ tree size_one_node;\n    The value is measured in bits.  */\n int maximum_field_alignment;\n \n-/* If non-zero, the alignment of a bitsting or (power-)set value, in bits.\n+/* If non-zero, the alignment of a bitstring or (power-)set value, in bits.\n    May be overridden by front-ends.  */\n int set_alignment = 0;\n "}, {"sha": "d8ed7c1927d56f8d830427f6105ac6327886b99b", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -1297,7 +1297,7 @@ extern tree sizetype;\n /* If nonzero, an upper limit on alignment of structure fields, in bits. */\n extern int maximum_field_alignment;\n \n-/* If non-zero, the alignment of a bitsting or (power-)set value, in bits. */\n+/* If non-zero, the alignment of a bitstring or (power-)set value, in bits. */\n extern int set_alignment;\n \n /* Concatenate two lists (chains of TREE_LIST nodes) X and Y"}, {"sha": "0b58b2d4e30d02ddc4aa993d28806c0bca83dd32", "filename": "gcc/vmsconfig.com", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fvmsconfig.com", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc95ed36d4c350fa1e23c1d322fee9bd8a018fe/gcc%2Fvmsconfig.com", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsconfig.com?ref=abc95ed36d4c350fa1e23c1d322fee9bd8a018fe", "patch": "@@ -194,7 +194,7 @@ ENDPROCEDURE; !process_makefile\n \n PROCEDURE process_objc_lib( )\n   !\n-  ! Intrepret objc/Makefile, after finishing the top makefile.\n+  ! Interpret objc/Makefile, after finishing the top makefile.\n   !\n   ON_ERROR\n     [TPU$_OPENIN]:\n@@ -451,7 +451,7 @@ $!\n $ exit\n $\n $!\n-$! Constuct a header file based on subdirectory contents\n+$! Construct a header file based on subdirectory contents\n $!\n $make_lang_incl: subroutine\n $  if f$search(p1).nes.\"\" then delete 'p1';*"}]}