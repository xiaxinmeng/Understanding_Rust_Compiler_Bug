{"sha": "e3684bcbf88b438ca1f0749de8843ddd5b72ad59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM2ODRiY2JmODhiNDM4Y2ExZjA3NDlkZTg4NDNkZGQ1YjcyYWQ1OQ==", "commit": {"author": {"name": "xiezhiheng", "email": "xiezhiheng@huawei.com", "date": "2020-08-26T10:12:56Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-08-26T10:12:56Z"}, "message": "AArch64: Add FLAG for add/sub arithmetic intrinsics [PR94442]\n\n2020-08-26  Zhiheng Xie  <xiezhiheng@huawei.com>\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-simd-builtins.def: Add proper FLAG\n\tfor add/sub arithmetic intrinsics.", "tree": {"sha": "d2f69c9b38f4db38fec221732d71735988c67913", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2f69c9b38f4db38fec221732d71735988c67913"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3684bcbf88b438ca1f0749de8843ddd5b72ad59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3684bcbf88b438ca1f0749de8843ddd5b72ad59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3684bcbf88b438ca1f0749de8843ddd5b72ad59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3684bcbf88b438ca1f0749de8843ddd5b72ad59/comments", "author": null, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "764a67aafc67c5ab5fe55441f5b4c7d2050f6138", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/764a67aafc67c5ab5fe55441f5b4c7d2050f6138", "html_url": "https://github.com/Rust-GCC/gccrs/commit/764a67aafc67c5ab5fe55441f5b4c7d2050f6138"}], "stats": {"total": 76, "additions": 40, "deletions": 36}, "files": [{"sha": "502b83cb27f98dcb7b3885b683eb5de520ad5b1d", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 40, "deletions": 36, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3684bcbf88b438ca1f0749de8843ddd5b72ad59/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3684bcbf88b438ca1f0749de8843ddd5b72ad59/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=e3684bcbf88b438ca1f0749de8843ddd5b72ad59", "patch": "@@ -37,15 +37,19 @@\n    macro holding the RTL pattern for the intrinsic.  This mapping is:\n    0 - CODE_FOR_aarch64_<name><mode>\n    1-9 - CODE_FOR_<name><mode><1-9>\n-   10 - CODE_FOR_<name><mode>.  */\n+   10 - CODE_FOR_<name><mode>.\n+\n+   Parameter 4 is the 'flag' of the intrinsic.  This is used to\n+   help describe the attributes (for example, pure) for the intrinsic\n+   function.  */\n \n   BUILTIN_VDC (COMBINE, combine, 0, ALL)\n   VAR1 (COMBINEP, combine, 0, ALL, di)\n   BUILTIN_VB (BINOP, pmul, 0, ALL)\n   BUILTIN_VHSDF_HSDF (BINOP, fmulx, 0, ALL)\n   BUILTIN_VHSDF_DF (UNOP, sqrt, 2, ALL)\n-  BUILTIN_VD_BHSI (BINOP, addp, 0, ALL)\n-  VAR1 (UNOP, addp, 0, ALL, di)\n+  BUILTIN_VD_BHSI (BINOP, addp, 0, NONE)\n+  VAR1 (UNOP, addp, 0, NONE, di)\n   BUILTIN_VDQ_BHSI (UNOP, clrsb, 2, ALL)\n   BUILTIN_VDQ_BHSI (UNOP, clz, 2, ALL)\n   BUILTIN_VS (UNOP, ctz, 2, ALL)\n@@ -119,41 +123,41 @@\n   BUILTIN_VALLDIF (STORESTRUCT_LANE, st3_lane, 0, ALL)\n   BUILTIN_VALLDIF (STORESTRUCT_LANE, st4_lane, 0, ALL)\n \n-  BUILTIN_VQW (BINOP, saddl2, 0, ALL)\n-  BUILTIN_VQW (BINOP, uaddl2, 0, ALL)\n-  BUILTIN_VQW (BINOP, ssubl2, 0, ALL)\n-  BUILTIN_VQW (BINOP, usubl2, 0, ALL)\n-  BUILTIN_VQW (BINOP, saddw2, 0, ALL)\n-  BUILTIN_VQW (BINOP, uaddw2, 0, ALL)\n-  BUILTIN_VQW (BINOP, ssubw2, 0, ALL)\n-  BUILTIN_VQW (BINOP, usubw2, 0, ALL)\n+  BUILTIN_VQW (BINOP, saddl2, 0, NONE)\n+  BUILTIN_VQW (BINOP, uaddl2, 0, NONE)\n+  BUILTIN_VQW (BINOP, ssubl2, 0, NONE)\n+  BUILTIN_VQW (BINOP, usubl2, 0, NONE)\n+  BUILTIN_VQW (BINOP, saddw2, 0, NONE)\n+  BUILTIN_VQW (BINOP, uaddw2, 0, NONE)\n+  BUILTIN_VQW (BINOP, ssubw2, 0, NONE)\n+  BUILTIN_VQW (BINOP, usubw2, 0, NONE)\n   /* Implemented by aarch64_<ANY_EXTEND:su><ADDSUB:optab>l<mode>.  */\n-  BUILTIN_VD_BHSI (BINOP, saddl, 0, ALL)\n-  BUILTIN_VD_BHSI (BINOP, uaddl, 0, ALL)\n-  BUILTIN_VD_BHSI (BINOP, ssubl, 0, ALL)\n-  BUILTIN_VD_BHSI (BINOP, usubl, 0, ALL)\n+  BUILTIN_VD_BHSI (BINOP, saddl, 0, NONE)\n+  BUILTIN_VD_BHSI (BINOP, uaddl, 0, NONE)\n+  BUILTIN_VD_BHSI (BINOP, ssubl, 0, NONE)\n+  BUILTIN_VD_BHSI (BINOP, usubl, 0, NONE)\n   /* Implemented by aarch64_<ANY_EXTEND:su><ADDSUB:optab>w<mode>.  */\n-  BUILTIN_VD_BHSI (BINOP, saddw, 0, ALL)\n-  BUILTIN_VD_BHSI (BINOP, uaddw, 0, ALL)\n-  BUILTIN_VD_BHSI (BINOP, ssubw, 0, ALL)\n-  BUILTIN_VD_BHSI (BINOP, usubw, 0, ALL)\n+  BUILTIN_VD_BHSI (BINOP, saddw, 0, NONE)\n+  BUILTIN_VD_BHSI (BINOP, uaddw, 0, NONE)\n+  BUILTIN_VD_BHSI (BINOP, ssubw, 0, NONE)\n+  BUILTIN_VD_BHSI (BINOP, usubw, 0, NONE)\n   /* Implemented by aarch64_<sur>h<addsub><mode>.  */\n-  BUILTIN_VDQ_BHSI (BINOP, shadd, 0, ALL)\n-  BUILTIN_VDQ_BHSI (BINOP, shsub, 0, ALL)\n-  BUILTIN_VDQ_BHSI (BINOP, uhadd, 0, ALL)\n-  BUILTIN_VDQ_BHSI (BINOP, uhsub, 0, ALL)\n-  BUILTIN_VDQ_BHSI (BINOP, srhadd, 0, ALL)\n-  BUILTIN_VDQ_BHSI (BINOP, urhadd, 0, ALL)\n+  BUILTIN_VDQ_BHSI (BINOP, shadd, 0, NONE)\n+  BUILTIN_VDQ_BHSI (BINOP, shsub, 0, NONE)\n+  BUILTIN_VDQ_BHSI (BINOP, uhadd, 0, NONE)\n+  BUILTIN_VDQ_BHSI (BINOP, uhsub, 0, NONE)\n+  BUILTIN_VDQ_BHSI (BINOP, srhadd, 0, NONE)\n+  BUILTIN_VDQ_BHSI (BINOP, urhadd, 0, NONE)\n   /* Implemented by aarch64_<sur><addsub>hn<mode>.  */\n-  BUILTIN_VQN (BINOP, addhn, 0, ALL)\n-  BUILTIN_VQN (BINOP, subhn, 0, ALL)\n-  BUILTIN_VQN (BINOP, raddhn, 0, ALL)\n-  BUILTIN_VQN (BINOP, rsubhn, 0, ALL)\n+  BUILTIN_VQN (BINOP, addhn, 0, NONE)\n+  BUILTIN_VQN (BINOP, subhn, 0, NONE)\n+  BUILTIN_VQN (BINOP, raddhn, 0, NONE)\n+  BUILTIN_VQN (BINOP, rsubhn, 0, NONE)\n   /* Implemented by aarch64_<sur><addsub>hn2<mode>.  */\n-  BUILTIN_VQN (TERNOP, addhn2, 0, ALL)\n-  BUILTIN_VQN (TERNOP, subhn2, 0, ALL)\n-  BUILTIN_VQN (TERNOP, raddhn2, 0, ALL)\n-  BUILTIN_VQN (TERNOP, rsubhn2, 0, ALL)\n+  BUILTIN_VQN (TERNOP, addhn2, 0, NONE)\n+  BUILTIN_VQN (TERNOP, subhn2, 0, NONE)\n+  BUILTIN_VQN (TERNOP, raddhn2, 0, NONE)\n+  BUILTIN_VQN (TERNOP, rsubhn2, 0, NONE)\n \n   BUILTIN_VSQN_HSDI (UNOP, sqmovun, 0, ALL)\n   /* Implemented by aarch64_<sur>qmovn<mode>.  */\n@@ -238,8 +242,8 @@\n   BUILTIN_VB (QUADOPSSSU_LANE_QUADTUP, sudot_laneq, 0, ALL)\n \n   /* Implemented by aarch64_fcadd<rot><mode>.   */\n-  BUILTIN_VHSDF (BINOP, fcadd90, 0, ALL)\n-  BUILTIN_VHSDF (BINOP, fcadd270, 0, ALL)\n+  BUILTIN_VHSDF (BINOP, fcadd90, 0, FP)\n+  BUILTIN_VHSDF (BINOP, fcadd270, 0, FP)\n \n   /* Implemented by aarch64_fcmla{_lane}{q}<rot><mode>.   */\n   BUILTIN_VHSDF (TERNOP, fcmla0, 0, ALL)\n@@ -594,7 +598,7 @@\n   BUILTIN_VHSDF_HSDF (BINOP, fabd, 3, ALL)\n \n   /* Implemented by aarch64_faddp<mode>.  */\n-  BUILTIN_VHSDF (BINOP, faddp, 0, ALL)\n+  BUILTIN_VHSDF (BINOP, faddp, 0, FP)\n \n   /* Implemented by aarch64_cm<optab><mode>.  */\n   BUILTIN_VHSDF_HSDF (BINOP_USS, cmeq, 0, ALL)"}]}