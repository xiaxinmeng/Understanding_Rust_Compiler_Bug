{"sha": "7bf7b578b780768e086f312d3bb87e90e56a5845", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JmN2I1NzhiNzgwNzY4ZTA4NmYzMTJkM2JiODdlOTBlNTZhNTg0NQ==", "commit": {"author": {"name": "Chris Moller", "email": "cmoller@redhat.com", "date": "2010-08-16T18:48:27Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2010-08-16T18:48:27Z"}, "message": "printers.py (StdVectorPrinter): Added stuff to handle pretty-printing of std::vector<bool>.\n\n2010-08-16  Chris Moller  <cmoller@redhat.com>\n\n\thttp://sourceware.org/bugzilla/show_bug.cgi?id=11874\n\t* python/libstdcxx/v6/printers.py (StdVectorPrinter): Added stuff\n\tto handle pretty-printing of std::vector<bool>.\n\nFrom-SVN: r163282", "tree": {"sha": "ddbbeb0ac0a0b242924e0c10051acab03b9293c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddbbeb0ac0a0b242924e0c10051acab03b9293c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bf7b578b780768e086f312d3bb87e90e56a5845", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bf7b578b780768e086f312d3bb87e90e56a5845", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bf7b578b780768e086f312d3bb87e90e56a5845", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bf7b578b780768e086f312d3bb87e90e56a5845/comments", "author": null, "committer": null, "parents": [{"sha": "c29e2982e4e8fe39db44ac1e9b06367e209b4f76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c29e2982e4e8fe39db44ac1e9b06367e209b4f76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c29e2982e4e8fe39db44ac1e9b06367e209b4f76"}], "stats": {"total": 62, "additions": 51, "deletions": 11}, "files": [{"sha": "fa90d4d7bc0912d28ec913417651adf7f416d553", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf7b578b780768e086f312d3bb87e90e56a5845/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf7b578b780768e086f312d3bb87e90e56a5845/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7bf7b578b780768e086f312d3bb87e90e56a5845", "patch": "@@ -1,3 +1,9 @@\n+2010-08-16  Chris Moller  <cmoller@redhat.com>\n+\n+\thttp://sourceware.org/bugzilla/show_bug.cgi?id=11874\n+\t* python/libstdcxx/v6/printers.py (StdVectorPrinter): Added stuff\n+\tto handle pretty-printing of std::vector<bool>.\n+\n 2010-08-14  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/45283"}, {"sha": "5333c57634fab62907947dac37e2e82eab414d47", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 45, "deletions": 11, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf7b578b780768e086f312d3bb87e90e56a5845/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf7b578b780768e086f312d3bb87e90e56a5845/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=7bf7b578b780768e086f312d3bb87e90e56a5845", "patch": "@@ -153,37 +153,71 @@ class StdVectorPrinter:\n     \"Print a std::vector\"\n \n     class _iterator:\n-        def __init__ (self, start, finish):\n-            self.item = start\n-            self.finish = finish\n+        def __init__ (self, start, finish, bitvec):\n+            self.bitvec = bitvec\n+            if bitvec:\n+                self.item   = start['_M_p']\n+                self.so     = start['_M_offset']\n+                self.finish = finish['_M_p']\n+                self.fo     = finish['_M_offset']\n+                itype = self.item.dereference().type\n+                self.isize = 8 * itype.sizeof\n+            else:\n+                self.item = start\n+                self.finish = finish\n             self.count = 0\n \n         def __iter__(self):\n             return self\n \n         def next(self):\n-            if self.item == self.finish:\n-                raise StopIteration\n             count = self.count\n             self.count = self.count + 1\n-            elt = self.item.dereference()\n-            self.item = self.item + 1\n-            return ('[%d]' % count, elt)\n+            if self.bitvec:\n+                if self.item == self.finish and self.so >= self.fo:\n+                    raise StopIteration\n+                elt = self.item.dereference()\n+                obit = 1 if elt & (1 << self.so) else 0\n+                self.so = self.so + 1\n+                if self.so >= self.isize:\n+                    self.item = self.item + 1\n+                    self.so = 0\n+                return ('[%d]' % count, obit)\n+            else:\n+                if self.item == self.finish:\n+                    raise StopIteration\n+                elt = self.item.dereference()\n+                self.item = self.item + 1\n+                return ('[%d]' % count, elt)\n \n     def __init__(self, typename, val):\n         self.typename = typename\n         self.val = val\n+        self.is_bool = val.type.template_argument(0).code  == gdb.TYPE_CODE_BOOL\n \n     def children(self):\n         return self._iterator(self.val['_M_impl']['_M_start'],\n-                              self.val['_M_impl']['_M_finish'])\n+                              self.val['_M_impl']['_M_finish'],\n+                              self.is_bool)\n \n     def to_string(self):\n         start = self.val['_M_impl']['_M_start']\n         finish = self.val['_M_impl']['_M_finish']\n         end = self.val['_M_impl']['_M_end_of_storage']\n-        return ('%s of length %d, capacity %d'\n-                % (self.typename, int (finish - start), int (end - start)))\n+        if self.is_bool:\n+            start = self.val['_M_impl']['_M_start']['_M_p']\n+            so    = self.val['_M_impl']['_M_start']['_M_offset']\n+            finish = self.val['_M_impl']['_M_finish']['_M_p']\n+            fo     = self.val['_M_impl']['_M_finish']['_M_offset']\n+            itype = start.dereference().type\n+            bl = 8 * itype.sizeof\n+            length   = (bl - so) + bl * ((finish - start) - 1) + fo\n+            capacity = bl * (end - start)\n+            return ('%s<bool> of length %d, capacity %d'\n+                    % (self.typename, int (length), int (capacity)))\n+        else:\n+            return ('%s of length %d, capacity %d'\n+                    % (self.typename, int (finish - start), int (end - start)))\n \n     def display_hint(self):\n         return 'array'"}]}