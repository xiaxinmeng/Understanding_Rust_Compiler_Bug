{"sha": "1ab7948178b41d47c37cf96890d17e961fc6876d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFiNzk0ODE3OGI0MWQ0N2MzN2NmOTY4OTBkMTdlOTYxZmM2ODc2ZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2006-11-21T18:10:45Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2006-11-21T18:10:45Z"}, "message": "hashtable.h: -Wshadow fixes.\n\n2006-11-21  Benjamin Kosnik  <bkoz@redhat.com>\n\t\n\t* include/ext/hashtable.h: -Wshadow fixes.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/resize_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/internal_node.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tconstructor_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/split_join_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/\n\tconstructors_destructor_fn_imps.hpp: Same.\n\t* src/mt_allocator.cc: Same.\n\t* src/debug.cc: Same.\n\t* config/locale/gnu/codecvt_members.cc: Same.\n\nFrom-SVN: r119061", "tree": {"sha": "1bd095d1f392dffccea7ff12e58fbb48ac9c17e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bd095d1f392dffccea7ff12e58fbb48ac9c17e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ab7948178b41d47c37cf96890d17e961fc6876d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab7948178b41d47c37cf96890d17e961fc6876d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ab7948178b41d47c37cf96890d17e961fc6876d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab7948178b41d47c37cf96890d17e961fc6876d/comments", "author": null, "committer": null, "parents": [{"sha": "7ddd83802bc3821c810364c7f41dbf3c50ffe3ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ddd83802bc3821c810364c7f41dbf3c50ffe3ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ddd83802bc3821c810364c7f41dbf3c50ffe3ff"}], "stats": {"total": 124, "additions": 66, "deletions": 58}, "files": [{"sha": "e8a4a3fc8f5e9b152cb6fc03390cdf100ea47f84", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab7948178b41d47c37cf96890d17e961fc6876d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab7948178b41d47c37cf96890d17e961fc6876d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1ab7948178b41d47c37cf96890d17e961fc6876d", "patch": "@@ -1,3 +1,18 @@\n+2006-11-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\t\n+\t* include/ext/hashtable.h: -Wshadow fixes.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/resize_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/internal_node.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tconstructor_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/split_join_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/\n+\tconstructors_destructor_fn_imps.hpp: Same.\n+\t* src/mt_allocator.cc: Same.\n+\t* src/debug.cc: Same.\n+\t* config/locale/gnu/codecvt_members.cc: Same.\n+\n 2006-11-21  Benjamin Kosnik  <bkoz@redhat.com>\n \t    Howard Hinnant  <hhinnant@apple.com>\n "}, {"sha": "ac1fe9267c8ef76035868f760b8f9e97061bd993", "filename": "libstdc++-v3/config/locale/gnu/codecvt_members.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab7948178b41d47c37cf96890d17e961fc6876d/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcodecvt_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab7948178b41d47c37cf96890d17e961fc6876d/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcodecvt_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcodecvt_members.cc?ref=1ab7948178b41d47c37cf96890d17e961fc6876d", "patch": "@@ -1,6 +1,6 @@\n // std::codecvt implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2002, 2003, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -95,14 +95,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  {\n \t    extern_type __buf[MB_LEN_MAX];\n \t    __tmp_state = __state;\n-\t    const size_t __conv = wcrtomb(__buf, *__from_next, &__tmp_state);\n-\t    if (__conv > static_cast<size_t>(__to_end - __to_next))\n+\t    const size_t __conv2 = wcrtomb(__buf, *__from_next, &__tmp_state);\n+\t    if (__conv2 > static_cast<size_t>(__to_end - __to_next))\n \t      __ret = partial;\n \t    else\n \t      {\n-\t\tmemcpy(__to_next, __buf, __conv);\n+\t\tmemcpy(__to_next, __buf, __conv2);\n \t\t__state = __tmp_state;\n-\t\t__to_next += __conv;\n+\t\t__to_next += __conv2;\n \t\t++__from_next;\n \t      }\n \t  }"}, {"sha": "233806fb74593c873dc69f5b10cb44ce88ceda8f", "filename": "libstdc++-v3/include/ext/hashtable.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab7948178b41d47c37cf96890d17e961fc6876d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab7948178b41d47c37cf96890d17e961fc6876d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhashtable.h?ref=1ab7948178b41d47c37cf96890d17e961fc6876d", "patch": "@@ -713,7 +713,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t       __cur1 = __cur1->_M_next)\n \t    {\n \t      bool _found__cur1 = false;\n-\t      for (_Node* __cur2 = __ht2._M_buckets[__n];\n+\t      for (__cur2 = __ht2._M_buckets[__n];\n \t\t   __cur2; __cur2 = __cur2->_M_next)\n \t\t{\n \t\t  if (__cur1->_M_val == __cur2->_M_val)"}, {"sha": "679efa5c47523ab91ec4a89bb44819ef97fde800", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/split_join_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab7948178b41d47c37cf96890d17e961fc6876d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab7948178b41d47c37cf96890d17e961fc6876d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fsplit_join_fn_imps.hpp?ref=1ab7948178b41d47c37cf96890d17e961fc6876d", "patch": "@@ -131,8 +131,8 @@ join(PB_DS_CLASS_C_DEC& other)\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n   _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n-  const size_type size = m_size + other.m_size;\n-  const size_type actual_size = resize_policy::get_new_size_for_arbitrary(size);\n+  const size_type len = m_size + other.m_size;\n+  const size_type actual_size = resize_policy::get_new_size_for_arbitrary(len);\n \n   entry_pointer a_entries = NULL;\n   entry_pointer a_other_entries = NULL;\n@@ -158,7 +158,7 @@ join(PB_DS_CLASS_C_DEC& other)\n \n   s_entry_allocator.deallocate(m_a_entries, m_actual_size);\n   m_a_entries = a_entries;\n-  m_size = size;\n+  m_size = len;\n   m_actual_size = actual_size;\n \n   resize_policy::notify_arbitrary(actual_size);"}, {"sha": "265a7052780f1f284ba5c33d3de4990f8c915d0c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/erase_fn_imps.hpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab7948178b41d47c37cf96890d17e961fc6876d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab7948178b41d47c37cf96890d17e961fc6876d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_fn_imps.hpp?ref=1ab7948178b41d47c37cf96890d17e961fc6876d", "patch": "@@ -64,7 +64,6 @@ inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n erase_if(Pred pred)\n {\n-  typedef typename PB_DS_TYPES_TRAITS_C_DEC::const_reference const_reference;\n   size_type num_ersd = 0;\n   for (size_type pos = 0; pos < m_num_e; ++pos)\n     {"}, {"sha": "eda2c48da52eb240def30249b15c96ace0a9f7f1", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/resize_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab7948178b41d47c37cf96890d17e961fc6876d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab7948178b41d47c37cf96890d17e961fc6876d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_fn_imps.hpp?ref=1ab7948178b41d47c37cf96890d17e961fc6876d", "patch": "@@ -58,8 +58,8 @@ do_resize_if_needed()\n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-do_resize(size_type size)\n-{ resize_imp(resize_base::get_nearest_larger_size(size)); }\n+do_resize(size_type len)\n+{ resize_imp(resize_base::get_nearest_larger_size(len)); }\n \n PB_DS_CLASS_T_DEC\n inline void"}, {"sha": "30b8d3e7b73aced494e56d79de605c161c03cdb1", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/constructor_destructor_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab7948178b41d47c37cf96890d17e961fc6876d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab7948178b41d47c37cf96890d17e961fc6876d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp?ref=1ab7948178b41d47c37cf96890d17e961fc6876d", "patch": "@@ -110,10 +110,10 @@ PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn,\n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, \n-\t\t const Comb_Probe_Fn& comb_hash_fn, const Probe_Fn& probe_fn) \n+\t\t const Comb_Probe_Fn& comb_hash_fn, const Probe_Fn& prober) \n : hash_eq_fn_base(r_eq_fn),\n   ranged_probe_fn_base(resize_base::get_nearest_larger_size(1),\n-\t\t       r_hash_fn, comb_hash_fn, probe_fn),\n+\t\t       r_hash_fn, comb_hash_fn, prober),\n   m_num_e(resize_base::get_nearest_larger_size(1)), m_num_used_e(0),\n   m_entries(s_entry_allocator.allocate(m_num_e))\n {\n@@ -124,11 +124,11 @@ PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn,\n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, \n-\t\t const Comb_Probe_Fn& comb_hash_fn, const Probe_Fn& probe_fn, \n+\t\t const Comb_Probe_Fn& comb_hash_fn, const Probe_Fn& prober, \n \t\t const Resize_Policy& r_resize_policy) \n : hash_eq_fn_base(r_eq_fn), resize_base(r_resize_policy),\n   ranged_probe_fn_base(resize_base::get_nearest_larger_size(1),\n-\t\t       r_hash_fn, comb_hash_fn, probe_fn),\n+\t\t       r_hash_fn, comb_hash_fn, prober),\n   m_num_e(resize_base::get_nearest_larger_size(1)), m_num_used_e(0),\n   m_entries(s_entry_allocator.allocate(m_num_e))\n {\n@@ -205,9 +205,9 @@ deallocate_all()\n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-erase_all_valid_entries(entry_array a_entries_resized, size_type size)\n+erase_all_valid_entries(entry_array a_entries_resized, size_type len)\n {\n-  for (size_type pos = 0; pos < size; ++pos)\n+  for (size_type pos = 0; pos < len; ++pos)\n     {\n       entry_pointer p_e = &a_entries_resized[pos];\n       if (p_e->m_stat == valid_entry_status)"}, {"sha": "83a47250f83fdd7fa344742369f525f48f1cb95c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab7948178b41d47c37cf96890d17e961fc6876d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab7948178b41d47c37cf96890d17e961fc6876d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fconstructors_destructor_fn_imps.hpp?ref=1ab7948178b41d47c37cf96890d17e961fc6876d", "patch": "@@ -137,16 +137,16 @@ void\n PB_DS_CLASS_C_DEC::\n copy_from_ordered_range(It first_it, It last_it)\n {\n-  const size_type size = std::distance(first_it, last_it);\n-  if (size == 0)\n+  const size_type len = std::distance(first_it, last_it);\n+  if (len == 0)\n     return;\n \n-  value_vector a_values = s_value_alloc.allocate(size);\n+  value_vector a_values = s_value_alloc.allocate(len);\n   iterator target_it = a_values;\n   It source_it = first_it;\n   It source_end_it = last_it;\n \n-  cond_dtor<size_type> cd(a_values, target_it, size);\n+  cond_dtor<size_type> cd(a_values, target_it, len);\n   while (source_it != source_end_it)\n     {\n       new (const_cast<void* >(static_cast<const void* >(target_it)))\n@@ -155,10 +155,10 @@ copy_from_ordered_range(It first_it, It last_it)\n       ++target_it;\n     }\n \n-  reallocate_metadata((node_update* )this, size);\n+  reallocate_metadata((node_update* )this, len);\n   cd.set_no_action();\n   m_a_values = a_values;\n-  m_size = size;\n+  m_size = len;\n   m_end_it = m_a_values + m_size;\n   update(PB_DS_node_begin_imp(), (node_update* )this);\n \n@@ -181,16 +181,16 @@ copy_from_ordered_range(It first_it, It last_it, It other_first_it,\n \t\t\tIt other_last_it)\n {\n   clear();\n-  const size_type size = std::distance(first_it, last_it) \n+  const size_type len = std::distance(first_it, last_it) \n     \t\t         + std::distance(other_first_it, other_last_it);\n \n-  value_vector a_values = s_value_alloc.allocate(size);\n+  value_vector a_values = s_value_alloc.allocate(len);\n \n   iterator target_it = a_values;\n   It source_it = first_it;\n   It source_end_it = last_it;\n \n-  cond_dtor<size_type> cd(a_values, target_it, size);\n+  cond_dtor<size_type> cd(a_values, target_it, len);\n   while (source_it != source_end_it)\n     {\n       new (const_cast<void* >(static_cast<const void* >(target_it)))\n@@ -208,10 +208,10 @@ copy_from_ordered_range(It first_it, It last_it, It other_first_it,\n       ++target_it;\n     }\n \n-  reallocate_metadata((node_update* )this, size);\n+  reallocate_metadata((node_update* )this, len);\n   cd.set_no_action();\n   m_a_values = a_values;\n-  m_size = size;\n+  m_size = len;\n   m_end_it = m_a_values + m_size;\n   update(PB_DS_node_begin_imp(), (node_update* )this);\n "}, {"sha": "1061988c327eb3bcf03b93703b0c94ff6723632a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/internal_node.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab7948178b41d47c37cf96890d17e961fc6876d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finternal_node.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab7948178b41d47c37cf96890d17e961fc6876d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finternal_node.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finternal_node.hpp?ref=1ab7948178b41d47c37cf96890d17e961fc6876d", "patch": "@@ -243,9 +243,9 @@ namespace pb_ds\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n-    pat_trie_internal_node(size_type e_ind, const const_e_iterator pref_b_it) :\n+    pat_trie_internal_node(size_type len, const const_e_iterator it) :\n       PB_DS_BASE_C_DEC(pat_trie_internal_node_type),\n-      m_e_ind(e_ind), m_pref_b_it(pref_b_it), m_pref_e_it(pref_b_it)\n+      m_e_ind(len), m_pref_b_it(it), m_pref_e_it(it)\n     {\n       std::advance(m_pref_e_it, m_e_ind);\n       std::fill(m_a_p_children, m_a_p_children + arr_size,"}, {"sha": "be5ba01b7ea0e0e4027e49cf92c26b1e1c24a66e", "filename": "libstdc++-v3/src/debug.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab7948178b41d47c37cf96890d17e961fc6876d/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab7948178b41d47c37cf96890d17e961fc6876d/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc?ref=1ab7948178b41d47c37cf96890d17e961fc6876d", "patch": "@@ -587,29 +587,29 @@ namespace __gnu_debug\n   _M_print_string(const char* __string) const\n   {\n     const char* __start = __string;\n-    const char* __end = __start;\n+    const char* __finish = __start;\n     const int __bufsize = 128;\n     char __buf[__bufsize];\n \n     while (*__start)\n       {\n \tif (*__start != '%')\n \t  {\n-\t    // [__start, __end) denotes the next word\n-\t    __end = __start;\n-\t    while (isalnum(*__end))\n-\t      ++__end;\n-\t    if (__start == __end)\n-\t      ++__end;\n-\t    if (isspace(*__end))\n-\t      ++__end;\n+\t    // [__start, __finish) denotes the next word\n+\t    __finish = __start;\n+\t    while (isalnum(*__finish))\n+\t      ++__finish;\n+\t    if (__start == __finish)\n+\t      ++__finish;\n+\t    if (isspace(*__finish))\n+\t      ++__finish;\n \t    \n-\t    const ptrdiff_t __len = __end - __start;\n+\t    const ptrdiff_t __len = __finish - __start;\n \t    assert(__len < __bufsize);\n \t    memcpy(__buf, __start, __len);\n \t    __buf[__len] = '\\0';\n \t    _M_print_word(__buf);\n-\t    __start = __end;\n+\t    __start = __finish;\n \t    \n \t    // Skip extra whitespace\n \t    while (*__start == ' ') "}, {"sha": "da0b09cef2123331306441c2a2bc714b06ea1b70", "filename": "libstdc++-v3/src/mt_allocator.cc", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab7948178b41d47c37cf96890d17e961fc6876d/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab7948178b41d47c37cf96890d17e961fc6876d/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc?ref=1ab7948178b41d47c37cf96890d17e961fc6876d", "patch": "@@ -423,7 +423,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t__bin._M_address = __address;\n \n \tchar* __c = static_cast<char*>(__v) + sizeof(_Block_address);\n-\t_Block_record* __block = reinterpret_cast<_Block_record*>(__c);\n+\t__block = reinterpret_cast<_Block_record*>(__c);\n  \t__bin._M_first[0] = __block;\n \twhile (--__block_count > 0)\n \t  {\n@@ -505,8 +505,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t      const size_t __k = sizeof(_Thread_record)\n \t\t\t\t * _M_options._M_max_threads;\n \t      __v = ::operator new(__k);\n-\t      _Thread_record* _M_thread_freelist\n-\t\t= static_cast<_Thread_record*>(__v);\n+\t      _M_thread_freelist = static_cast<_Thread_record*>(__v);\n \n \t      // NOTE! The first assignable thread id is 1 since the\n \t      // global pool uses id 0\n@@ -528,8 +527,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t  // _M_thread_freelist.\n \t\t  __gthread_key_create(&freelist._M_key,\n \t\t\t\t       ::_M_destroy_thread_key);\n-\t\t  freelist._M_thread_freelist\n-\t\t    = _M_thread_freelist;\n+\t\t  freelist._M_thread_freelist = _M_thread_freelist;\n \t\t}\n \t      else\n \t\t{\n@@ -552,10 +550,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t    }\n \t\t  ::operator delete(static_cast<void*>(_M_old_array));\n \t\t}\n-\t      freelist._M_thread_freelist_array\n-\t\t= _M_thread_freelist;\n-\t      freelist._M_max_threads\n-\t\t= _M_options._M_max_threads;\n+\t      freelist._M_thread_freelist_array = _M_thread_freelist;\n+\t      freelist._M_max_threads = _M_options._M_max_threads;\n \t    }\n \t}\n \n@@ -570,7 +566,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t    __bin._M_address = NULL;\n \n \t    __v = ::operator new(sizeof(size_t) * __max_threads);\n-\t    std::memset(__v, 0, sizeof(size_t) * __max_threads);\t    \t    \n+\t    std::memset(__v, 0, sizeof(size_t) * __max_threads);\n+\n \t    __bin._M_free = static_cast<size_t*>(__v);\n \n \t    __v = ::operator new(sizeof(size_t) * __max_threads\n@@ -630,8 +627,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t}\n \t    }\n \n-\t    __gthread_setspecific(freelist._M_key,\n-\t\t\t\t  (void*)_M_id);\n+\t    __gthread_setspecific(freelist._M_key, (void*)_M_id);\n \t  }\n \treturn _M_id >= _M_options._M_max_threads ? 0 : _M_id;\n       }\n@@ -697,14 +693,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  __gnu_cxx::__scoped_lock sentry(freelist_mutex);\n \n \t  if (!freelist._M_thread_freelist_array\n-\t      || freelist._M_max_threads\n-\t\t < _M_options._M_max_threads)\n+\t      || freelist._M_max_threads < _M_options._M_max_threads)\n \t    {\n \t      const size_t __k = sizeof(_Thread_record)\n \t\t\t\t * _M_options._M_max_threads;\n \t      __v = ::operator new(__k);\n-\t      _Thread_record* _M_thread_freelist\n-\t\t= static_cast<_Thread_record*>(__v);\n+\t      _M_thread_freelist = static_cast<_Thread_record*>(__v);\n \n \t      // NOTE! The first assignable thread id is 1 since the\n \t      // global pool uses id 0"}]}