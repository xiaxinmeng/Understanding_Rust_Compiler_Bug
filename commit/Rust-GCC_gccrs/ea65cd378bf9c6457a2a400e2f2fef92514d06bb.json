{"sha": "ea65cd378bf9c6457a2a400e2f2fef92514d06bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE2NWNkMzc4YmY5YzY0NTdhMmE0MDBlMmYyZmVmOTI1MTRkMDZiYg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2005-12-20T04:08:01Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2005-12-20T04:08:01Z"}, "message": "tree-ssa-dom.c (thread_across_edge): Do not use local_fold.\n\n\n\t* tree-ssa-dom.c (thread_across_edge): Do not use local_fold.\n\tStrip away all type conversions after simplifying the\n\tcondition.\n\n        * tree-cfgcleanup.c (merge_phi_nodes): Allow merging in some\n        cases the forwarder block dominates the destination.\n\nFrom-SVN: r108833", "tree": {"sha": "8d2ebf3b6d782aec9f3bf036565cf93ba43dd849", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d2ebf3b6d782aec9f3bf036565cf93ba43dd849"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea65cd378bf9c6457a2a400e2f2fef92514d06bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea65cd378bf9c6457a2a400e2f2fef92514d06bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea65cd378bf9c6457a2a400e2f2fef92514d06bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea65cd378bf9c6457a2a400e2f2fef92514d06bb/comments", "author": null, "committer": null, "parents": [{"sha": "4322a86f3281d7a9d17e8316a25789c6f378321a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4322a86f3281d7a9d17e8316a25789c6f378321a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4322a86f3281d7a9d17e8316a25789c6f378321a"}], "stats": {"total": 53, "additions": 50, "deletions": 3}, "files": [{"sha": "69bfe7ada7cc1bf3503c7da4248a40320b4b0083", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea65cd378bf9c6457a2a400e2f2fef92514d06bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea65cd378bf9c6457a2a400e2f2fef92514d06bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea65cd378bf9c6457a2a400e2f2fef92514d06bb", "patch": "@@ -1,3 +1,12 @@\n+2005-12-19  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-dom.c (thread_across_edge): Do not use local_fold.\n+\tStrip away all type conversions after simplifying the\n+\tcondition.\n+\n+        * tree-cfgcleanup.c (merge_phi_nodes): Allow merging in some\n+        cases the forwarder block dominates the destination.\n+\n 2005-12-19  DJ Delorie  <dj@redhat.com>\n \n \t* reload1.c (spill_failure): Dump reload data to dump file."}, {"sha": "6f8b1c05ad3b864227acbe17e504d6a6992717f3", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea65cd378bf9c6457a2a400e2f2fef92514d06bb/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea65cd378bf9c6457a2a400e2f2fef92514d06bb/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=ea65cd378bf9c6457a2a400e2f2fef92514d06bb", "patch": "@@ -743,6 +743,39 @@ merge_phi_nodes (void)\n \t     nodes at BB.  */\n \t  *current++ = bb;\n \t}\n+      else\n+\t{\n+\t  tree phi;\n+\n+\t  /* BB dominates DEST.  There may be many users of the PHI\n+\t     nodes in BB.  However, there is still a trivial case we\n+\t     can handle.  If the result of every PHI in BB is used\n+\t     only by a PHI in DEST, then we can trivially merge the\n+\t     PHI nodes from BB into DEST.  */\n+\t  for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n+\t    {\n+\t      tree result = PHI_RESULT (phi);\n+\t      int num_uses = num_imm_uses (result);\n+\t      use_operand_p imm_use;\n+\t      tree use_stmt;\n+\n+\t      /* If the PHI's result is never used, then we can just\n+\t\t ignore it.  */\n+\t      if (num_uses == 0)\n+\t\tcontinue;\n+\n+\t      /* Get the single use of the result of this PHI node.  */\n+  \t      if (!single_imm_use (result, &imm_use, &use_stmt)\n+\t\t  || TREE_CODE (use_stmt) != PHI_NODE\n+\t\t  || bb_for_stmt (use_stmt) != dest)\n+\t\tbreak;\n+\t    }\n+\n+\t  /* If the loop above iterated thorugh all the PHI nodes\n+\t     in BB, then we can merge the PHIs from BB into DEST.  */\n+\t  if (!phi)\n+\t    *current++ = bb;\n+\t}\n     }\n \n   /* Now let's drain WORKLIST.  */"}, {"sha": "45a5b7d31aecac4cb69c9eb0c036715bd8b68f52", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea65cd378bf9c6457a2a400e2f2fef92514d06bb/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea65cd378bf9c6457a2a400e2f2fef92514d06bb/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=ea65cd378bf9c6457a2a400e2f2fef92514d06bb", "patch": "@@ -892,9 +892,14 @@ thread_across_edge (struct dom_walk_data *walk_data, edge e)\n \t      TREE_OPERAND (COND_EXPR_COND (dummy_cond), 1) = op1;\n \t    }\n \n-\t  /* If the conditional folds to an invariant, then we are done,\n-\t     otherwise look it up in the hash tables.  */\n-\t  cached_lhs = local_fold (COND_EXPR_COND (dummy_cond));\n+\t  /* We absolutely do not care about any type conversions\n+\t     we only care about a zero/nonzero value.  */\n+\t  cached_lhs = fold (COND_EXPR_COND (dummy_cond));\n+\t  while (TREE_CODE (cached_lhs) == NOP_EXPR\n+\t\t || TREE_CODE (cached_lhs) == CONVERT_EXPR\n+\t\t || TREE_CODE (cached_lhs) == NON_LVALUE_EXPR)\n+\t    cached_lhs = TREE_OPERAND (cached_lhs, 0);\n+\t    \n \t  if (! is_gimple_min_invariant (cached_lhs))\n \t    {\n \t      cached_lhs = lookup_avail_expr (dummy_cond, false);"}]}