{"sha": "ae5569fa33c9f3286e0b747f8b6607d21a4b9827", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU1NTY5ZmEzM2M5ZjMyODZlMGI3NDdmOGI2NjA3ZDIxYTRiOTgyNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-07-01T08:58:35Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-07-01T08:58:35Z"}, "message": "Allow earlyclobbers in ira_get_dup_out_num\n\nira_get_dup_out_num punted on operands that are matched to\nearlyclobber outputs:\n\n\t    /* It is better ignore an alternative with early clobber.  */\n\t    else if (*str == '&')\n\t      goto fail;\n\nBut I'm not sure why this is the right thing to do.  At this stage\nwe've established that *all* alternatives of interest require the\ninput to match the output, so\n\n(a) the earlyclobber can only affect other operands and\n(b) not tying the registers is bound to introduce a move\n\nThe code was part of the initial commit and so isn't obviously\nrelated to a specific testcase.  Also, I can imagine LRA makes\na much better job of this situation than reload did.  (Certainly\nSVE uses matched earlyclobbers extensively and I haven't seen any\nproblems.)\n\nIn case this turns out to regress something important: the main\ncase that matters for SVE is the one in which all alternatives\nare earlyclobber.\n\n2019-07-01  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* ira.c (ira_get_dup_out_num): Don't punt for earlyclobbers.\n\tUse recog_data to test for an output operand.\n\nFrom-SVN: r272850", "tree": {"sha": "e304d56814b85dc09725acc219dd030b3af23839", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e304d56814b85dc09725acc219dd030b3af23839"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae5569fa33c9f3286e0b747f8b6607d21a4b9827", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5569fa33c9f3286e0b747f8b6607d21a4b9827", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae5569fa33c9f3286e0b747f8b6607d21a4b9827", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5569fa33c9f3286e0b747f8b6607d21a4b9827/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed680e2cc18c73f90e6bfbd3f346a8820476371b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed680e2cc18c73f90e6bfbd3f346a8820476371b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed680e2cc18c73f90e6bfbd3f346a8820476371b"}], "stats": {"total": 27, "additions": 7, "deletions": 20}, "files": [{"sha": "b49bc69045e723cb7a4c6dcb939360129cba48b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5569fa33c9f3286e0b747f8b6607d21a4b9827/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5569fa33c9f3286e0b747f8b6607d21a4b9827/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae5569fa33c9f3286e0b747f8b6607d21a4b9827", "patch": "@@ -1,3 +1,8 @@\n+2019-07-01  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* ira.c (ira_get_dup_out_num): Don't punt for earlyclobbers.\n+\tUse recog_data to test for an output operand.\n+\n 2019-07-01  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* ira.c (ira_setup_alts): If any valid alternatives have zero cost,"}, {"sha": "214fdffc5fe0cfab6af424322ed6e388ed991312", "filename": "gcc/ira.c", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5569fa33c9f3286e0b747f8b6607d21a4b9827/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5569fa33c9f3286e0b747f8b6607d21a4b9827/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=ae5569fa33c9f3286e0b747f8b6607d21a4b9827", "patch": "@@ -1999,26 +1999,8 @@ ira_get_dup_out_num (int op_num, alternative_mask alts)\n \t}\n       if (original == -1)\n \tgoto fail;\n-      dup = -1;\n-      for (ignore_p = false, str = recog_data.constraints[original - '0'];\n-\t   *str != 0;\n-\t   str++)\n-\tif (ignore_p)\n-\t  {\n-\t    if (*str == ',')\n-\t      ignore_p = false;\n-\t  }\n-\telse if (*str == '#')\n-\t  ignore_p = true;\n-\telse if (! ignore_p)\n-\t  {\n-\t    if (*str == '=')\n-\t      dup = original - '0';\n-\t    /* It is better ignore an alternative with early clobber.  */\n-\t    else if (*str == '&')\n-\t      goto fail;\n-\t  }\n-      if (dup >= 0)\n+      dup = original - '0';\n+      if (recog_data.operand_type[dup] == OP_OUT)\n \treturn dup;\n     fail:\n       if (use_commut_op_p)"}]}