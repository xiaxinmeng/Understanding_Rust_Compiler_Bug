{"sha": "72cdfda4fa28e418d19b56f824e181412e2e16fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJjZGZkYTRmYTI4ZTQxOGQxOWI1NmY4MjRlMTgxNDEyZTJlMTZmYw==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-05-19T15:53:46Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-05-19T15:53:46Z"}, "message": "vqshlu_n.c: New file.\n\n2015-05-19  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vqshlu_n.c: New file.\n\nFrom-SVN: r223384", "tree": {"sha": "0d0be301b4f7bb7363a4f77a36ef31cb89129bbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d0be301b4f7bb7363a4f77a36ef31cb89129bbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72cdfda4fa28e418d19b56f824e181412e2e16fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72cdfda4fa28e418d19b56f824e181412e2e16fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72cdfda4fa28e418d19b56f824e181412e2e16fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72cdfda4fa28e418d19b56f824e181412e2e16fc/comments", "author": null, "committer": null, "parents": [{"sha": "e5561c83d667c75545bed093142119bc1bca530b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5561c83d667c75545bed093142119bc1bca530b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5561c83d667c75545bed093142119bc1bca530b"}], "stats": {"total": 267, "additions": 267, "deletions": 0}, "files": [{"sha": "da781e821c688a3a00ff379d763cd60b26af1390", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72cdfda4fa28e418d19b56f824e181412e2e16fc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72cdfda4fa28e418d19b56f824e181412e2e16fc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=72cdfda4fa28e418d19b56f824e181412e2e16fc", "patch": "@@ -1,3 +1,7 @@\n+2015-05-19  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqshlu_n.c: New file.\n+\n 2015-05-19  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vqshl_n.c: New file."}, {"sha": "a357fbe3748130b581dc72af9991b549921c5809", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqshlu_n.c", "status": "added", "additions": 263, "deletions": 0, "changes": 263, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72cdfda4fa28e418d19b56f824e181412e2e16fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshlu_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72cdfda4fa28e418d19b56f824e181412e2e16fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshlu_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshlu_n.c?ref=72cdfda4fa28e418d19b56f824e181412e2e16fc", "patch": "@@ -0,0 +1,263 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected values of cumulative_saturation flag with negative\n+   input.  */\n+int VECT_VAR(expected_cumulative_sat_neg,int,8,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg,int,16,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg,int,32,2) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg,int,64,1) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg,int,8,16) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg,int,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg,int,32,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg,int,64,2) = 1;\n+\n+/* Expected results with negative input.  */\n+VECT_VAR_DECL(expected_neg,uint,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t    0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_neg,uint,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_neg,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_neg,uint,64,1) [] = { 0x0 };\n+VECT_VAR_DECL(expected_neg,uint,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t     0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t     0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t     0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_neg,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t     0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_neg,uint,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_neg,uint,64,2) [] = { 0x0, 0x0 };\n+\n+/* Expected values of cumulative_saturation flag with shift by 1.  */\n+int VECT_VAR(expected_cumulative_sat_sh1,int,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_sh1,int,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_sh1,int,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_sh1,int,64,1) = 0;\n+int VECT_VAR(expected_cumulative_sat_sh1,int,8,16) = 0;\n+int VECT_VAR(expected_cumulative_sat_sh1,int,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_sh1,int,32,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_sh1,int,64,2) = 0;\n+\n+/* Expected results with shift by 1.  */\n+VECT_VAR_DECL(expected_sh1,uint,8,8) [] = { 0xfe, 0xfe, 0xfe, 0xfe,\n+\t\t\t\t\t    0xfe, 0xfe, 0xfe, 0xfe };\n+VECT_VAR_DECL(expected_sh1,uint,16,4) [] = { 0xfffe, 0xfffe, 0xfffe, 0xfffe };\n+VECT_VAR_DECL(expected_sh1,uint,32,2) [] = { 0xfffffffe, 0xfffffffe };\n+VECT_VAR_DECL(expected_sh1,uint,64,1) [] = { 0xfffffffffffffffe };\n+VECT_VAR_DECL(expected_sh1,uint,8,16) [] = { 0xfe, 0xfe, 0xfe, 0xfe,\n+\t\t\t\t\t     0xfe, 0xfe, 0xfe, 0xfe,\n+\t\t\t\t\t     0xfe, 0xfe, 0xfe, 0xfe,\n+\t\t\t\t\t     0xfe, 0xfe, 0xfe, 0xfe };\n+VECT_VAR_DECL(expected_sh1,uint,16,8) [] = { 0xfffe, 0xfffe, 0xfffe, 0xfffe,\n+\t\t\t\t\t     0xfffe, 0xfffe, 0xfffe, 0xfffe };\n+VECT_VAR_DECL(expected_sh1,uint,32,4) [] = { 0xfffffffe, 0xfffffffe,\n+\t\t\t\t\t     0xfffffffe, 0xfffffffe };\n+VECT_VAR_DECL(expected_sh1,uint,64,2) [] = { 0xfffffffffffffffe,\n+\t\t\t\t\t     0xfffffffffffffffe };\n+\n+/* Expected values of cumulative_saturation flag with shift by 2.  */\n+int VECT_VAR(expected_cumulative_sat_sh2,int,8,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_sh2,int,16,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_sh2,int,32,2) = 1;\n+int VECT_VAR(expected_cumulative_sat_sh2,int,64,1) = 1;\n+int VECT_VAR(expected_cumulative_sat_sh2,int,8,16) = 1;\n+int VECT_VAR(expected_cumulative_sat_sh2,int,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_sh2,int,32,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_sh2,int,64,2) = 1;\n+\n+/* Expected results with shift by 2.  */\n+VECT_VAR_DECL(expected_sh2,uint,8,8) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t    0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_sh2,uint,16,4) [] = { 0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected_sh2,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected_sh2,uint,64,1) [] = { 0xffffffffffffffff };\n+VECT_VAR_DECL(expected_sh2,uint,8,16) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t     0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t     0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t     0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_sh2,uint,16,8) [] = { 0xffff, 0xffff, 0xffff, 0xffff,\n+\t\t\t\t\t     0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected_sh2,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n+\t\t\t\t\t     0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected_sh2,uint,64,2) [] = { 0xffffffffffffffff,\n+\t\t\t\t\t     0xffffffffffffffff };\n+\n+/* Expected values of cumulative_saturation flag.  */\n+int VECT_VAR(expected_cumulative_sat,int,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,64,1) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,8,16) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,32,4) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,64,2) = 0;\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0x8, 0x8, 0x8, 0x8 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0x18, 0x18 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0x40 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0xa0, 0xa0, 0xa0, 0xa0,\n+\t\t\t\t\t 0xa0, 0xa0, 0xa0, 0xa0,\n+\t\t\t\t\t 0xa0, 0xa0, 0xa0, 0xa0,\n+\t\t\t\t\t 0xa0, 0xa0, 0xa0, 0xa0 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0x180, 0x180, 0x180, 0x180,\n+\t\t\t\t\t 0x180, 0x180, 0x180, 0x180 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0x380, 0x380, 0x380, 0x380 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0x800, 0x800 };\n+\n+\n+#define INSN vqshlu\n+#define TEST_MSG \"VQSHLU_N/VQSHLUQ_N\"\n+\n+#define FNNAME1(NAME) void exec_ ## NAME ## _n(void)\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+FNNAME (INSN)\n+{\n+  /* Basic test: v2=vqshlu_n(v1,v), then store the result.  */\n+#define TEST_VQSHLU_N2(INSN, Q, T1, T2, T3, T4, W, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T3, W, N));\t\t\\\n+  VECT_VAR(vector_res, T3, W, N) =\t\t\t\t\t\\\n+    INSN##Q##_n_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\\\n+\t\t\tV);\t\t\t\t\t\t\\\n+  vst1##Q##_##T4##W(VECT_VAR(result, T3, W, N),\t\t\t\t\\\n+\t\t    VECT_VAR(vector_res, T3, W, N));\t\t\t\\\n+  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+  /* Two auxliary macros are necessary to expand INSN */\n+#define TEST_VQSHLU_N1(INSN, Q, T1, T2, T3, T4, W, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  TEST_VQSHLU_N2(INSN, Q, T1, T2, T3, T4, W, N, V, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+#define TEST_VQSHLU_N(Q, T1, T2, T3, T4, W, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  TEST_VQSHLU_N1(INSN, Q, T1, T2, T3, T4, W, N, V, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+\n+  DECL_VARIABLE_ALL_VARIANTS(vector);\n+  DECL_VARIABLE_ALL_VARIANTS(vector_res);\n+\n+  clean_results ();\n+\n+  /* Fill input vector with negative values, to check saturation on\n+     limits.  */\n+  VDUP(vector, , int, s, 8, 8, -1);\n+  VDUP(vector, , int, s, 16, 4, -2);\n+  VDUP(vector, , int, s, 32, 2, -3);\n+  VDUP(vector, , int, s, 64, 1, -4);\n+  VDUP(vector, q, int, s, 8, 16, -1);\n+  VDUP(vector, q, int, s, 16, 8, -2);\n+  VDUP(vector, q, int, s, 32, 4, -3);\n+  VDUP(vector, q, int, s, 64, 2, -4);\n+\n+  /* Choose shift amount arbitrarily.  */\n+#define CMT \" (negative input)\"\n+  TEST_VQSHLU_N(, int, s, uint, u, 8, 8, 2, expected_cumulative_sat_neg, CMT);\n+  TEST_VQSHLU_N(, int, s, uint, u, 16, 4, 1, expected_cumulative_sat_neg, CMT);\n+  TEST_VQSHLU_N(, int, s, uint, u, 32, 2, 1, expected_cumulative_sat_neg, CMT);\n+  TEST_VQSHLU_N(, int, s, uint, u, 64, 1, 2, expected_cumulative_sat_neg, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 8, 16, 2, expected_cumulative_sat_neg, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 16, 8, 1, expected_cumulative_sat_neg, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 32, 4, 1, expected_cumulative_sat_neg, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 64, 2, 2, expected_cumulative_sat_neg, CMT);\n+\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_neg, CMT);\n+\n+  \n+  /* Fill input vector with max value, to check saturation on\n+     limits.  */\n+  VDUP(vector, , int, s, 8, 8, 0x7F);\n+  VDUP(vector, , int, s, 16, 4, 0x7FFF);\n+  VDUP(vector, , int, s, 32, 2, 0x7FFFFFFF);\n+  VDUP(vector, , int, s, 64, 1, 0x7FFFFFFFFFFFFFFFLL);\n+  VDUP(vector, q, int, s, 8, 16, 0x7F);\n+  VDUP(vector, q, int, s, 16, 8, 0x7FFF);\n+  VDUP(vector, q, int, s, 32, 4, 0x7FFFFFFF);\n+  VDUP(vector, q, int, s, 64, 2, 0x7FFFFFFFFFFFFFFFULL);\n+\n+  /* shift by 1.  */\n+#undef CMT\n+#define CMT \" (shift by 1)\"\n+  TEST_VQSHLU_N(, int, s, uint, u, 8, 8, 1, expected_cumulative_sat_sh1, CMT);\n+  TEST_VQSHLU_N(, int, s, uint, u, 16, 4, 1, expected_cumulative_sat_sh1, CMT);\n+  TEST_VQSHLU_N(, int, s, uint, u, 32, 2, 1, expected_cumulative_sat_sh1, CMT);\n+  TEST_VQSHLU_N(, int, s, uint, u, 64, 1, 1, expected_cumulative_sat_sh1, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 8, 16, 1, expected_cumulative_sat_sh1, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 16, 8, 1, expected_cumulative_sat_sh1, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 32, 4, 1, expected_cumulative_sat_sh1, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 64, 2, 1, expected_cumulative_sat_sh1, CMT);\n+\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_sh1, CMT);\n+\n+  /* shift by 2 to force saturation.  */\n+#undef CMT\n+#define CMT \" (shift by 2)\"\n+  TEST_VQSHLU_N(, int, s, uint, u, 8, 8, 2, expected_cumulative_sat_sh2, CMT);\n+  TEST_VQSHLU_N(, int, s, uint, u, 16, 4, 2, expected_cumulative_sat_sh2, CMT);\n+  TEST_VQSHLU_N(, int, s, uint, u, 32, 2, 2, expected_cumulative_sat_sh2, CMT);\n+  TEST_VQSHLU_N(, int, s, uint, u, 64, 1, 2, expected_cumulative_sat_sh2, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 8, 16, 2, expected_cumulative_sat_sh2, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 16, 8, 2, expected_cumulative_sat_sh2, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 32, 4, 2, expected_cumulative_sat_sh2, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 64, 2, 2, expected_cumulative_sat_sh2, CMT);\n+\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_sh2, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_sh2, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_sh2, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_sh2, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_sh2, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_sh2, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_sh2, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_sh2, CMT);\n+\n+  \n+  /* Fill input vector with positive values, to check normal case.  */\n+  VDUP(vector, , int, s, 8, 8, 1);\n+  VDUP(vector, , int, s, 16, 4, 2);\n+  VDUP(vector, , int, s, 32, 2, 3);\n+  VDUP(vector, , int, s, 64, 1, 4);\n+  VDUP(vector, q, int, s, 8, 16, 5);\n+  VDUP(vector, q, int, s, 16, 8, 6);\n+  VDUP(vector, q, int, s, 32, 4, 7);\n+  VDUP(vector, q, int, s, 64, 2, 8);\n+\n+  /* Arbitrary shift amount.  */\n+#undef CMT\n+#define CMT \"\"\n+  TEST_VQSHLU_N(, int, s, uint, u, 8, 8, 1, expected_cumulative_sat, CMT);\n+  TEST_VQSHLU_N(, int, s, uint, u, 16, 4, 2, expected_cumulative_sat, CMT);\n+  TEST_VQSHLU_N(, int, s, uint, u, 32, 2, 3, expected_cumulative_sat, CMT);\n+  TEST_VQSHLU_N(, int, s, uint, u, 64, 1, 4, expected_cumulative_sat, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 8, 16, 5, expected_cumulative_sat, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 16, 8, 6, expected_cumulative_sat, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 32, 4, 7, expected_cumulative_sat, CMT);\n+  TEST_VQSHLU_N(q, int, s, uint, u, 64, 2, 8, expected_cumulative_sat, CMT);\n+\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected, CMT);\n+}\n+\n+int main (void)\n+{\n+  exec_vqshlu_n ();\n+  return 0;\n+}"}]}