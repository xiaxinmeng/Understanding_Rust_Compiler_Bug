{"sha": "94f7baf2194e2d20108c9d34d2766e6b14e25cef", "node_id": "C_kwDOANBUbNoAKDk0ZjdiYWYyMTk0ZTJkMjAxMDhjOWQzNGQyNzY2ZTZiMTRlMjVjZWY", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-21T14:12:52Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-21T17:46:42Z"}, "message": "libstdc++: Improve Doxygen comments in <tuple>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/tuple: Add better Doxygen comments.", "tree": {"sha": "e2c751a9a6beaceb068ee379e36a47a64af7070c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2c751a9a6beaceb068ee379e36a47a64af7070c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94f7baf2194e2d20108c9d34d2766e6b14e25cef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94f7baf2194e2d20108c9d34d2766e6b14e25cef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94f7baf2194e2d20108c9d34d2766e6b14e25cef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94f7baf2194e2d20108c9d34d2766e6b14e25cef/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fe9dd2455ecc2d02c50559eb272b480cafc8c68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fe9dd2455ecc2d02c50559eb272b480cafc8c68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fe9dd2455ecc2d02c50559eb272b480cafc8c68"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "0ac592d8d94f3604a091dee35860ca3098db2e14", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f7baf2194e2d20108c9d34d2766e6b14e25cef/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f7baf2194e2d20108c9d34d2766e6b14e25cef/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=94f7baf2194e2d20108c9d34d2766e6b14e25cef", "patch": "@@ -1980,6 +1980,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif // three_way_comparison\n \n   // NB: DR 705.\n+  /// Create a tuple containing copies of the arguments\n   template<typename... _Elements>\n     constexpr tuple<typename __decay_and_strip<_Elements>::__type...>\n     make_tuple(_Elements&&... __args)\n@@ -1991,7 +1992,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // 2275. Why is forward_as_tuple not constexpr?\n-  /// std::forward_as_tuple\n+  /// Create a tuple of lvalue or rvalue references to the arguments\n   template<typename... _Elements>\n     constexpr tuple<_Elements&&...>\n     forward_as_tuple(_Elements&&... __args) noexcept\n@@ -2018,7 +2019,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr const _Tp&&\n     get(const array<_Tp, _Nm>&&) noexcept;\n \n-\n+  /// @cond undocumented\n   template<size_t, typename, typename, size_t>\n     struct __make_tuple_impl;\n \n@@ -2130,8 +2131,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename... _Tps>\n     struct __is_tuple_like_impl<tuple<_Tps...>> : true_type\n     { };\n+  /// @endcond\n \n-  /// tuple_cat\n+  /// Create a `tuple` containing all elements from multiple tuple-like objects\n   template<typename... _Tpls, typename = typename\n            enable_if<__and_<__is_tuple_like<_Tpls>...>::value>::type>\n     constexpr auto\n@@ -2146,13 +2148,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // 2301. Why is tie not constexpr?\n-  /// tie\n+  /// Return a tuple of lvalue references bound to the arguments\n   template<typename... _Elements>\n     constexpr tuple<_Elements&...>\n     tie(_Elements&... __args) noexcept\n     { return tuple<_Elements&...>(__args...); }\n \n-  /// swap\n+  /// Exchange the values of two tuples\n   template<typename... _Elements>\n     _GLIBCXX20_CONSTEXPR\n     inline\n@@ -2177,6 +2179,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif // C++23\n \n #if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n+  /// Exchange the values of two const tuples (if const elements can be swapped)\n   template<typename... _Elements>\n     _GLIBCXX20_CONSTEXPR\n     typename enable_if<!__and_<__is_swappable<_Elements>...>::value>::type\n@@ -2197,6 +2200,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // 2773. Making std::ignore constexpr\n+  /** Used with `std::tie` to ignore an element of a tuple\n+   *\n+   * When using `std::tie` to assign the elements of a tuple to variables,\n+   * unwanted elements can be ignored by using `std::ignore`. For example:\n+   *\n+   * ```\n+   * int x, y;\n+   * std::tie(x, std::ignore, y) = std::make_tuple(1, 2, 3);\n+   * ```\n+   *\n+   * This assignment will perform `x=1; std::ignore=2; y=3;` which results\n+   * in the second element being ignored.\n+   *\n+   * @since C++11\n+   */\n   _GLIBCXX17_INLINE constexpr _Swallow_assign ignore{};\n \n   /// Partial specialization for tuples"}]}