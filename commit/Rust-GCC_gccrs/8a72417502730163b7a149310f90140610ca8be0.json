{"sha": "8a72417502730163b7a149310f90140610ca8be0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE3MjQxNzUwMjczMDE2M2I3YTE0OTMxMGY5MDE0MDYxMGNhOGJlMA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-04-20T04:58:26Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-04-20T04:58:26Z"}, "message": "runtime: Ignore stack sizes when deciding when to GC.\n\nAlso allocate heap bitmaps bit in page size units and clear\ncontext when putting G structures on free list.\n\nFrom-SVN: r186607", "tree": {"sha": "be7f67d3d4b1e832ed43c6bf3fe2047579eb1d9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be7f67d3d4b1e832ed43c6bf3fe2047579eb1d9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a72417502730163b7a149310f90140610ca8be0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a72417502730163b7a149310f90140610ca8be0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a72417502730163b7a149310f90140610ca8be0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a72417502730163b7a149310f90140610ca8be0/comments", "author": null, "committer": null, "parents": [{"sha": "8198dc134f0026841ebd5e1ee55190e5ff540348", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8198dc134f0026841ebd5e1ee55190e5ff540348", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8198dc134f0026841ebd5e1ee55190e5ff540348"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "253fdbe0ccb035126864516bd65cb5ca29256eb5", "filename": "libgo/runtime/malloc.goc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a72417502730163b7a149310f90140610ca8be0/libgo%2Fruntime%2Fmalloc.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a72417502730163b7a149310f90140610ca8be0/libgo%2Fruntime%2Fmalloc.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmalloc.goc?ref=8a72417502730163b7a149310f90140610ca8be0", "patch": "@@ -72,7 +72,7 @@ runtime_mallocgc(uintptr size, uint32 flag, int32 dogc, int32 zeroed)\n \t\tnpages = size >> PageShift;\n \t\tif((size & PageMask) != 0)\n \t\t\tnpages++;\n-\t\ts = runtime_MHeap_Alloc(&runtime_mheap, npages, 0, !(flag & FlagNoGC));\n+\t\ts = runtime_MHeap_Alloc(&runtime_mheap, npages, 0, 1);\n \t\tif(s == nil)\n \t\t\truntime_throw(\"out of memory\");\n \t\tsize = npages<<PageShift;"}, {"sha": "7e68535ebfdf1ebd2b264aa9e5cac655d5222994", "filename": "libgo/runtime/mgc0.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a72417502730163b7a149310f90140610ca8be0/libgo%2Fruntime%2Fmgc0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a72417502730163b7a149310f90140610ca8be0/libgo%2Fruntime%2Fmgc0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmgc0.c?ref=8a72417502730163b7a149310f90140610ca8be0", "patch": "@@ -4,6 +4,8 @@\n \n // Garbage collector.\n \n+#include <unistd.h>\n+\n #include \"runtime.h\"\n #include \"arch.h\"\n #include \"malloc.h\"\n@@ -918,7 +920,7 @@ cachestats(void)\n \tuint64 stacks_sys;\n \n \tstacks_inuse = 0;\n-\tstacks_sys = 0;\n+\tstacks_sys = runtime_stacks_sys;\n \tfor(m=runtime_allm; m; m=m->alllink) {\n \t\truntime_purgecachedstats(m);\n \t\t// stacks_inuse += m->stackalloc->inuse;\n@@ -1020,7 +1022,7 @@ runtime_gc(int32 force)\n \tstealcache();\n \tcachestats();\n \n-\tmstats.next_gc = mstats.heap_alloc+mstats.heap_alloc*gcpercent/100;\n+\tmstats.next_gc = mstats.heap_alloc+(mstats.heap_alloc-runtime_stacks_sys)*gcpercent/100;\n \tm->gcing = 0;\n \n \tm->locks++;\t// disable gc during the mallocs in newproc\n@@ -1329,6 +1331,8 @@ runtime_setblockspecial(void *v, bool s)\n void\n runtime_MHeap_MapBits(MHeap *h)\n {\n+\tsize_t page_size;\n+\n \t// Caller has added extra mappings to the arena.\n \t// Add extra mappings of bitmap words as needed.\n \t// We allocate extra bitmap pieces in chunks of bitmapChunk.\n@@ -1342,6 +1346,9 @@ runtime_MHeap_MapBits(MHeap *h)\n \tif(h->bitmap_mapped >= n)\n \t\treturn;\n \n+\tpage_size = getpagesize();\n+\tn = (n+page_size-1) & ~(page_size-1);\n+\n \truntime_SysMap(h->arena_start - n, n - h->bitmap_mapped);\n \th->bitmap_mapped = n;\n }"}, {"sha": "660c69fc03c88d6463d24196dba0ea8fce1e42c6", "filename": "libgo/runtime/proc.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a72417502730163b7a149310f90140610ca8be0/libgo%2Fruntime%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a72417502730163b7a149310f90140610ca8be0/libgo%2Fruntime%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fproc.c?ref=8a72417502730163b7a149310f90140610ca8be0", "patch": "@@ -46,6 +46,8 @@ extern void __splitstack_block_signals_context (void *context[10], int *,\n # define StackMin 2 * 1024 * 1024\n #endif\n \n+uintptr runtime_stacks_sys;\n+\n static void schedule(G*);\n \n typedef struct Sched Sched;\n@@ -1091,6 +1093,7 @@ schedule(G *gp)\n \t\t\t\tm->lockedg = nil;\n \t\t\t}\n \t\t\tgp->idlem = nil;\n+\t\t\truntime_memclr(&gp->context, sizeof gp->context);\n \t\t\tgfput(gp);\n \t\t\tif(--runtime_sched.gcount == 0)\n \t\t\t\truntime_exit(0);\n@@ -1288,6 +1291,7 @@ runtime_malg(int32 stacksize, byte** ret_stack, size_t* ret_stacksize)\n \t\t*ret_stacksize = stacksize;\n \t\tnewg->gcinitial_sp = *ret_stack;\n \t\tnewg->gcstack_size = stacksize;\n+\t\truntime_xadd(&runtime_stacks_sys, stacksize);\n #endif\n \t}\n \treturn newg;"}, {"sha": "d379f99f8da79bd3f920df3c1c195176f54aa63e", "filename": "libgo/runtime/runtime.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a72417502730163b7a149310f90140610ca8be0/libgo%2Fruntime%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a72417502730163b7a149310f90140610ca8be0/libgo%2Fruntime%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.h?ref=8a72417502730163b7a149310f90140610ca8be0", "patch": "@@ -463,3 +463,8 @@ struct root_list {\n };\n \n void\t__go_register_gc_roots(struct root_list*);\n+\n+// Size of stack space allocated using Go's allocator.\n+// This will be 0 when using split stacks, as in that case\n+// the stacks are allocated by the splitstack library.\n+extern uintptr runtime_stacks_sys;"}]}