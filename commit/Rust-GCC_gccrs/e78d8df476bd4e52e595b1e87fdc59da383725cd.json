{"sha": "e78d8df476bd4e52e595b1e87fdc59da383725cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc4ZDhkZjQ3NmJkNGU1MmU1OTViMWU4N2ZkYzU5ZGEzODM3MjVjZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-05-01T22:17:23Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-05-01T22:17:23Z"}, "message": "abi_check.cc (check_version): Update known versions.\n\n\n2003-05-01  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/abi_check.cc (check_version): Update known versions.\n\tCheck added symbols for version_name != base version. Add missing\n\tsymbols to incompatible list.\n\nFrom-SVN: r66352", "tree": {"sha": "7f10af23b9faff0b2d34ddbaf0b794b09538446f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f10af23b9faff0b2d34ddbaf0b794b09538446f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e78d8df476bd4e52e595b1e87fdc59da383725cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e78d8df476bd4e52e595b1e87fdc59da383725cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e78d8df476bd4e52e595b1e87fdc59da383725cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e78d8df476bd4e52e595b1e87fdc59da383725cd/comments", "author": null, "committer": null, "parents": [{"sha": "06b021af7b30d4aa8793f2f638b701462788d814", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06b021af7b30d4aa8793f2f638b701462788d814", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06b021af7b30d4aa8793f2f638b701462788d814"}], "stats": {"total": 69, "additions": 42, "deletions": 27}, "files": [{"sha": "331d5e59e012c8f6b6905e360c72e92e678c0c2d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8df476bd4e52e595b1e87fdc59da383725cd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8df476bd4e52e595b1e87fdc59da383725cd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e78d8df476bd4e52e595b1e87fdc59da383725cd", "patch": "@@ -1,3 +1,9 @@\n+2003-05-01  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/abi_check.cc (check_version): Update known versions.\n+\tCheck added symbols for version_name != base version. Add missing\n+\tsymbols to incompatible list.\n+\t\n 2003-05-01  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* acinclude.m4 (GLIBCPP_EXPORT_FLAGS): Remove -Winline."}, {"sha": "51c384f9d55cfaaac02e251793d0ba690f30259c", "filename": "libstdc++-v3/testsuite/abi_check.cc", "status": "modified", "additions": 36, "deletions": 27, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78d8df476bd4e52e595b1e87fdc59da383725cd/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78d8df476bd4e52e595b1e87fdc59da383725cd/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc?ref=e78d8df476bd4e52e595b1e87fdc59da383725cd", "patch": "@@ -44,7 +44,7 @@\n struct symbol_info\n {\n   enum category { none, function, object, error };\n-  category \ttype;\n+  category \ttype;  \n   std::string \tname;\n   std::string \tdemangled_name;\n   int \t\tsize;\n@@ -77,34 +77,39 @@ typedef __gnu_cxx::hash_map<std::string, symbol_info> \tsymbol_infos;\n \n \n bool\n-check_version(const symbol_info& test)\n+check_version(const symbol_info& test, bool added = false)\n {\n-  bool ret = true;\n-\n   typedef std::vector<std::string> compat_list;\n-  static compat_list known;\n-  if (known.empty())\n+  static compat_list known_versions;\n+  if (known_versions.empty())\n     {\n-      known.push_back(\"GLIBCPP_3.2\");\n-      known.push_back(\"GLIBCPP_3.2.1\");\n-      known.push_back(\"GLIBCPP_3.2.2\");\n-      known.push_back(\"GLIBCPP_3.4\");\n-      known.push_back(\"CXXABI_1.2\");\n-      known.push_back(\"CXXABI_1.2.1\");\n-      known.push_back(\"CXXABI_1.3\");\n+      known_versions.push_back(\"GLIBCPP_3.2\"); // base version\n+      known_versions.push_back(\"GLIBCPP_3.2.1\");\n+      known_versions.push_back(\"GLIBCPP_3.2.2\");\n+      known_versions.push_back(\"GLIBCPP_3.2.3\"); // gcc-3.3.0\n+      known_versions.push_back(\"GLIBCPP_3.4\");\n+      known_versions.push_back(\"CXXABI_1.2\");\n+      known_versions.push_back(\"CXXABI_1.2.1\");\n+      known_versions.push_back(\"CXXABI_1.3\");\n     }\n-\n-  compat_list::iterator end = known.end();\n+  compat_list::iterator begin = known_versions.begin();\n+  compat_list::iterator end = known_versions.end();\n \n   // Check version names for compatibility...\n-  compat_list::iterator it1 = find(known.begin(), end, test.version_name);\n+  compat_list::iterator it1 = find(begin, end, test.version_name);\n   \n   // Check for weak label.\n-  compat_list::iterator it2 = find(known.begin(), end, test.name);\n-  if (it1 != end || it2 != end)\n-    ret = true;\n+  compat_list::iterator it2 = find(begin, end, test.name);\n \n-  return ret;\n+  // Check that added symbols aren't added in the base version.\n+  bool compat = true;\n+  if (added && test.version_name == known_versions[0])\n+    compat = false;\n+\n+  if (it1 == end && it2 == end)\n+    compat = false;\n+\n+  return compat;\n }\n \n bool \n@@ -377,12 +382,19 @@ main(int argc, char** argv)\n \t  added_names.erase(it);\n \t}\n       else\n-\tmissing_names.push_back(what);\n+\t  missing_names.push_back(what);\n     }\n \n-  // Check shared names for compatibility.\n+  // Check missing names for compatibility.\n   typedef pair<symbol_info, symbol_info> symbol_pair;\n   vector<symbol_pair> incompatible;\n+  for (size_t i = 0; i < missing_names.size(); ++i)\n+    {\n+      symbol_info base = baseline_symbols[missing_names[i]];\n+      incompatible.push_back(symbol_pair(base, base));\n+    }\n+\n+  // Check shared names for compatibility.\n   for (size_t i = 0; i < shared_names.size(); ++i)\n     {\n       symbol_info base = baseline_symbols[shared_names[i]];\n@@ -395,11 +407,8 @@ main(int argc, char** argv)\n   for (size_t i = 0; i < added_names.size(); ++i)\n     {\n       symbol_info test = test_symbols[added_names[i]];\n-      if (!check_version(test))\n-\t{\n-\t  incompatible.push_back(symbol_pair(test, test));\n-\t  cout << test.version_name << endl;\n-\t}\n+      if (!check_version(test, true))\n+\tincompatible.push_back(symbol_pair(test, test));\n     }\n \n   // Report results."}]}