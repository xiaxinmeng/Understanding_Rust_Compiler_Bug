{"sha": "596676d66cab21e5ed85669e737af5b62f067d57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk2Njc2ZDY2Y2FiMjFlNWVkODU2NjllNzM3YWY1YjYyZjA2N2Q1Nw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-04-15T18:47:48Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-04-15T18:47:48Z"}, "message": "libstdc++: Add comparison operators to types from Utilities clause\n\nSome more C++20 changes from P1614R2, \"The Mothership has Landed\".\n\nThis removes all redundant equality and inequality operators in the\nUtilities clause, as they can be synthesized from the remaining equality\noperators.\n\nIt also removes the single redundant operator in the Localization\nclause, because it didn't seem worth doing in a separate commit.\n\n\t* include/bits/allocator.h (operator!=): Do not define for C++20.\n\t* include/bits/locale_classes.h (operator!=): Likewise.\n\t* include/bits/std_function.h (operator==(nullptr_t, const function&))\n\t(operator!=(const function&, nullptr_t))\n\t(operator!=(nullptr_t, const function&)): Likewise.\n\t* include/ext/bitmap_allocator.h (operator!=): Likewise.\n\t* include/ext/debug_allocator.h (operator!=): Likewise.\n\t* include/ext/extptr_allocator.h (operator!=): Likewise.\n\t* include/ext/malloc_allocator.h (operator!=): Likewise.\n\t* include/ext/mt_allocator.h (operator!=): Likewise.\n\t* include/ext/new_allocator.h (operator!=): Likewise.\n\t* include/ext/pool_allocator.h (operator!=): Likewise.\n\t* include/ext/throw_allocator.h (operator!=): Likewise.\n\t* include/std/bitset (bitset::operator!=): Likewise.\n\t* include/std/memory_resource (operator!=): Likewise.\n\t* include/std/scoped_allocator (operator!=): Likewise.", "tree": {"sha": "3ee36a74c869d33d9a1b0745e061df54eec7edf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ee36a74c869d33d9a1b0745e061df54eec7edf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/596676d66cab21e5ed85669e737af5b62f067d57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/596676d66cab21e5ed85669e737af5b62f067d57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/596676d66cab21e5ed85669e737af5b62f067d57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/596676d66cab21e5ed85669e737af5b62f067d57/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4714fd14afadbfdab0cc76a8b3fdf7a8161e0ebe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4714fd14afadbfdab0cc76a8b3fdf7a8161e0ebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4714fd14afadbfdab0cc76a8b3fdf7a8161e0ebe"}], "stats": {"total": 54, "additions": 50, "deletions": 4}, "files": [{"sha": "ac446acaaac2a587f3f8e5a241896245840bfaa4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=596676d66cab21e5ed85669e737af5b62f067d57", "patch": "@@ -1,5 +1,22 @@\n 2020-04-15  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/allocator.h (operator!=): Do not define for C++20.\n+\t* include/bits/locale_classes.h (operator!=): Likewise.\n+\t* include/bits/std_function.h (operator==(nullptr_t, const function&))\n+\t(operator!=(const function&, nullptr_t))\n+\t(operator!=(nullptr_t, const function&)): Likewise.\n+\t* include/ext/bitmap_allocator.h (operator!=): Likewise.\n+\t* include/ext/debug_allocator.h (operator!=): Likewise.\n+\t* include/ext/extptr_allocator.h (operator!=): Likewise.\n+\t* include/ext/malloc_allocator.h (operator!=): Likewise.\n+\t* include/ext/mt_allocator.h (operator!=): Likewise.\n+\t* include/ext/new_allocator.h (operator!=): Likewise.\n+\t* include/ext/pool_allocator.h (operator!=): Likewise.\n+\t* include/ext/throw_allocator.h (operator!=): Likewise.\n+\t* include/std/bitset (bitset::operator!=): Likewise.\n+\t* include/std/memory_resource (operator!=): Likewise.\n+\t* include/std/scoped_allocator (operator!=): Likewise.\n+\n \t* include/std/typeindex (operator<=>): Define for C++20.\n \t* testsuite/20_util/typeindex/comparison_operators_c++20.cc: New test.\n "}, {"sha": "ee564791dfaeb0376648f27729ab1e895549bbfb", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=596676d66cab21e5ed85669e737af5b62f067d57", "patch": "@@ -196,9 +196,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW\n       { return true; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n       friend _GLIBCXX20_CONSTEXPR bool\n       operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW\n       { return false; }\n+#endif\n \n       // Inherit everything else.\n     };\n@@ -209,11 +211,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _GLIBCXX_NOTHROW\n     { return true; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   template<typename _T1, typename _T2>\n     inline _GLIBCXX20_CONSTEXPR bool\n     operator!=(const allocator<_T1>&, const allocator<_T2>&)\n     _GLIBCXX_NOTHROW\n     { return false; }\n+#endif\n \n   // Invalid allocator<cv T> partial specializations.\n   // allocator_traits::rebind_alloc can be used to form a valid allocator type."}, {"sha": "ab90682cde23acae8e9aaf46a977fa0db37d4e0f", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=596676d66cab21e5ed85669e737af5b62f067d57", "patch": "@@ -254,6 +254,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     bool\n     operator==(const locale& __other) const throw();\n \n+#if __cpp_impl_three_way_comparison < 201907L\n     /**\n      *  @brief  Locale inequality.\n      *\n@@ -263,6 +264,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     bool\n     operator!=(const locale& __other) const throw()\n     { return !(this->operator==(__other)); }\n+#endif\n \n     /**\n      *  @brief  Compare two strings according to collate."}, {"sha": "e2bf9b91850b182816a69eb0d3eedfc0a1d26037", "filename": "libstdc++-v3/include/bits/std_function.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h?ref=596676d66cab21e5ed85669e737af5b62f067d57", "patch": "@@ -680,6 +680,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator==(const function<_Res(_Args...)>& __f, nullptr_t) noexcept\n     { return !static_cast<bool>(__f); }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /// @overload\n   template<typename _Res, typename... _Args>\n     inline bool\n@@ -703,7 +704,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator!=(nullptr_t, const function<_Res(_Args...)>& __f) noexcept\n     { return static_cast<bool>(__f); }\n-\n+#endif\n \n   // [20.7.15.2.7] specialized algorithms\n "}, {"sha": "edddf32fb973fea3f72d7343fb626a0c693536c6", "filename": "libstdc++-v3/include/ext/bitmap_allocator.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h?ref=596676d66cab21e5ed85669e737af5b62f067d57", "patch": "@@ -1098,11 +1098,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       const bitmap_allocator<_Tp2>&) throw()\n     { return true; }\n   \n+#if __cpp_impl_three_way_comparison < 201907L\n   template<typename _Tp1, typename _Tp2>\n     bool \n     operator!=(const bitmap_allocator<_Tp1>&, \n \t       const bitmap_allocator<_Tp2>&) throw() \n-  { return false; }\n+    { return false; }\n+#endif\n \n   // Static member definitions.\n   template<typename _Tp>"}, {"sha": "9946faa10a6db348f0f9f843db74164c6fa8f993", "filename": "libstdc++-v3/include/ext/debug_allocator.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h?ref=596676d66cab21e5ed85669e737af5b62f067d57", "patch": "@@ -179,11 +179,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   const debug_allocator<_Alloc2>& __rhs) _GLIBCXX_NOTHROW\n \t{ return __lhs._M_allocator == debug_allocator(__rhs)._M_allocator; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n       template<typename _Alloc2>\n \tfriend bool\n \toperator!=(const debug_allocator& __lhs,\n \t\t   const debug_allocator<_Alloc2>& __rhs) _GLIBCXX_NOTHROW\n \t{ return !(__lhs == __rhs); }\n+#endif\n     };\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "850ca286ef6c96d94d1a190151069d66890db30e", "filename": "libstdc++-v3/include/ext/extptr_allocator.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h?ref=596676d66cab21e5ed85669e737af5b62f067d57", "patch": "@@ -138,6 +138,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator==(const _ExtPtr_allocator& __rarg) const\n       { return _M_real_alloc == __rarg._M_real_alloc; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n       template<typename _Up>\n         inline bool\n         operator!=(const _ExtPtr_allocator<_Up>& __rarg) const\n@@ -146,6 +147,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       inline bool\n       operator!=(const _ExtPtr_allocator& __rarg) const\n       { return _M_real_alloc != __rarg._M_real_alloc; }\n+#endif\n \n       template<typename _Up>\n         inline friend void"}, {"sha": "1f41660fac7e9676cbdcfc9fc5f6beafd8668bdf", "filename": "libstdc++-v3/include/ext/malloc_allocator.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h?ref=596676d66cab21e5ed85669e737af5b62f067d57", "patch": "@@ -174,11 +174,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_GLIBCXX_NOTHROW\n \t{ return true; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n       template<typename _Up>\n \tfriend _GLIBCXX20_CONSTEXPR bool\n \toperator!=(const malloc_allocator&, const malloc_allocator<_Up>&)\n \t_GLIBCXX_NOTHROW\n \t{ return false; }\n+#endif\n \n     private:\n       _GLIBCXX_CONSTEXPR size_type"}, {"sha": "0857390e6654d76cd54b537f3f9445d547f0c495", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=596676d66cab21e5ed85669e737af5b62f067d57", "patch": "@@ -771,10 +771,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator==(const __mt_alloc<_Tp, _Poolp>&, const __mt_alloc<_Tp, _Poolp>&)\n     { return true; }\n   \n+#if __cpp_impl_three_way_comparison < 201907L\n   template<typename _Tp, typename _Poolp>\n     inline bool\n     operator!=(const __mt_alloc<_Tp, _Poolp>&, const __mt_alloc<_Tp, _Poolp>&)\n     { return false; }\n+#endif\n \n #undef __thread_default\n "}, {"sha": "959d6880276892d12e171c9a67403a6267c0e21f", "filename": "libstdc++-v3/include/ext/new_allocator.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h?ref=596676d66cab21e5ed85669e737af5b62f067d57", "patch": "@@ -173,11 +173,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_GLIBCXX_NOTHROW\n \t{ return true; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n       template<typename _Up>\n \tfriend _GLIBCXX20_CONSTEXPR bool\n \toperator!=(const new_allocator&, const new_allocator<_Up>&)\n \t_GLIBCXX_NOTHROW\n \t{ return false; }\n+#endif\n \n     private:\n       _GLIBCXX_CONSTEXPR size_type"}, {"sha": "c247c403bec7df57f6c0fc97bf5822651cabf08b", "filename": "libstdc++-v3/include/ext/pool_allocator.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h?ref=596676d66cab21e5ed85669e737af5b62f067d57", "patch": "@@ -198,10 +198,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator==(const __pool_alloc<_Tp>&, const __pool_alloc<_Tp>&)\n     { return true; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   template<typename _Tp>\n     inline bool\n     operator!=(const __pool_alloc<_Tp>&, const __pool_alloc<_Tp>&)\n     { return false; }\n+#endif\n \n   template<typename _Tp>\n     _Atomic_word"}, {"sha": "f99b26b0cf122fba8dca05a96d5c0d2008e8020f", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=596676d66cab21e5ed85669e737af5b62f067d57", "patch": "@@ -895,11 +895,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       const throw_allocator_base<_Tp, _Cond>&)\n     { return true; }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   template<typename _Tp, typename _Cond>\n     inline bool\n     operator!=(const throw_allocator_base<_Tp, _Cond>&,\n \t       const throw_allocator_base<_Tp, _Cond>&)\n     { return false; }\n+#endif\n \n   /// Allocator throwing via limit condition.\n   template<typename _Tp>"}, {"sha": "5364e59f4663e86fca01fde21e9bb9320d4d42db", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=596676d66cab21e5ed85669e737af5b62f067d57", "patch": "@@ -1306,9 +1306,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       operator==(const bitset<_Nb>& __rhs) const _GLIBCXX_NOEXCEPT\n       { return this->_M_is_equal(__rhs); }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n       bool\n       operator!=(const bitset<_Nb>& __rhs) const _GLIBCXX_NOEXCEPT\n       { return !this->_M_is_equal(__rhs); }\n+#endif\n       //@}\n \n       /**"}, {"sha": "f87ef9688f35f17c72ba6a1b591cbc16b99733a3", "filename": "libstdc++-v3/include/std/memory_resource", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource?ref=596676d66cab21e5ed85669e737af5b62f067d57", "patch": "@@ -122,10 +122,11 @@ namespace pmr\n   operator==(const memory_resource& __a, const memory_resource& __b) noexcept\n   { return &__a == &__b || __a.is_equal(__b); }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   inline bool\n   operator!=(const memory_resource& __a, const memory_resource& __b) noexcept\n   { return !(__a == __b); }\n-\n+#endif\n \n   // C++17 23.12.3 Class template polymorphic_allocator\n   template<typename _Tp>\n@@ -362,12 +363,13 @@ namespace pmr\n \t       const polymorphic_allocator<_Tp2>& __b) noexcept\n     { return *__a.resource() == *__b.resource(); }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   template<typename _Tp1, typename _Tp2>\n     inline bool\n     operator!=(const polymorphic_allocator<_Tp1>& __a,\n \t       const polymorphic_allocator<_Tp2>& __b) noexcept\n     { return !(__a == __b); }\n-\n+#endif\n \n   /// Parameters for tuning a pool resource's behaviour.\n   struct pool_options"}, {"sha": "969b6d8e8c2aba99ab14c73851a09508e42c0caa", "filename": "libstdc++-v3/include/std/scoped_allocator", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596676d66cab21e5ed85669e737af5b62f067d57/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator?ref=596676d66cab21e5ed85669e737af5b62f067d57", "patch": "@@ -500,12 +500,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n           && __a._M_inner == __b._M_inner;\n     }\n \n+#if __cpp_impl_three_way_comparison < 201907L\n   /// @related std::scoped_allocator_adaptor\n   template <typename _OutA1, typename _OutA2, typename... _InA>\n     inline bool\n     operator!=(const scoped_allocator_adaptor<_OutA1, _InA...>& __a,\n                const scoped_allocator_adaptor<_OutA2, _InA...>& __b) noexcept\n     { return !(__a == __b); }\n+#endif\n \n   /// @}\n "}]}