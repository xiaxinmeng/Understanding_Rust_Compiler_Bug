{"sha": "e37ab97325aa1b4d5d3799d3bdf05fa157e8fa68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM3YWI5NzMyNWFhMWI0ZDVkMzc5OWQzYmRmMDVmYTE1N2U4ZmE2OA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-12-05T16:01:22Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-12-05T16:01:22Z"}, "message": "re PR rtl-optimization/34312 (spill failure with -O2 -fPIC -march=pentium-m on i386)\n\n        PR target/34312\n        * config/i386/i386.c (ix86_function_regparm): Also check for fixed\n        registers when checking that regparm registers are available.\n        Lower regparm value due to fixed registers usage in addition to\n        global regs usage.\n\ntestsuite/ChangeLog:\n\n        PR target/34312\n        * gcc.target/i386/pr34312.c: New test.\n\nFrom-SVN: r130625", "tree": {"sha": "8e7050f0086c5ec71f9a1c917509990e4bad3042", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e7050f0086c5ec71f9a1c917509990e4bad3042"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e37ab97325aa1b4d5d3799d3bdf05fa157e8fa68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e37ab97325aa1b4d5d3799d3bdf05fa157e8fa68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e37ab97325aa1b4d5d3799d3bdf05fa157e8fa68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e37ab97325aa1b4d5d3799d3bdf05fa157e8fa68/comments", "author": null, "committer": null, "parents": [{"sha": "e8f34bc9852f7c71a3a7b723404752b7b4503509", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8f34bc9852f7c71a3a7b723404752b7b4503509", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8f34bc9852f7c71a3a7b723404752b7b4503509"}], "stats": {"total": 185, "additions": 107, "deletions": 78}, "files": [{"sha": "104b8ea659a15709ad617e6f20deffb2d9f7d1c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 50, "deletions": 60, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37ab97325aa1b4d5d3799d3bdf05fa157e8fa68/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37ab97325aa1b4d5d3799d3bdf05fa157e8fa68/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e37ab97325aa1b4d5d3799d3bdf05fa157e8fa68", "patch": "@@ -1,4 +1,12 @@\n-2007-11-27  Bernhard Fischer  <aldot@gcc.gnu.org>\n+2007-12-05  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/34312\n+\t* config/i386/i386.c (ix86_function_regparm): Also check for fixed\n+\tregisters when checking that regparm registers are available.\n+\tLower regparm value due to fixed registers usage in addition to\n+\tglobal regs usage.\n+\n+2007-12-05  Bernhard Fischer  <aldot@gcc.gnu.org>\n \n \t* sparseset.c: Include config.h and system.h before sparseset.h.\n \t* sparseset.h: Remove inclusion of system.h.\n@@ -130,8 +138,7 @@\n \n 2007-11-30  Jan Hubicka  <jh@suse.cz>\n \n-\t* ggc-common.c (dump_ggc_loc_statistics): Reset ggc_force_collect\n-\tflag.\n+\t* ggc-common.c (dump_ggc_loc_statistics): Reset ggc_force_collect flag.\n \n 2007-11-30  Seongbae Park <seongbae.park@gmail.com>\n \n@@ -318,7 +325,7 @@\n \n 2007-11-26  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n-\tPR 34081/C++\n+\tPR c++/34081\n \t* c-decl.c (store_parm_decls): Pass 'false' for the new\n \tallocate_struct_function parameter.\n \t* cgraphunit.c (cgraph_build_static_cdtor): Likewise.\n@@ -350,9 +357,9 @@\n \n \t* config/mn10300/mn10300.md: (call_internal): Remove mode on\n \toperand 0 in order to match UNPSEC'ed calls generated in PIC mode.\n-        (call_value_internal): Remove mode on operands 0 and 1 in order to\n+\t(call_value_internal): Remove mode on operands 0 and 1 in order to\n \tmatch UNPSEC'ed calls generated in PIC mode.\n-        (GOTaddr2picreg): Use copy_rtx to prevent sharing an rtx between\n+\t(GOTaddr2picreg): Use copy_rtx to prevent sharing an rtx between\n \ttwo insns.\n \n 2007-11-26  Richard Guenther  <rguenther@suse.de>\n@@ -442,8 +449,7 @@\n 2007-11-23  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* reload.c (find_reloads_address_1) <autoincdec cases>:\n-\tCall REG_OK_FOR_CONTEXT with the autoincdec code, not\n-\touter_code.\n+\tCall REG_OK_FOR_CONTEXT with the autoincdec code, not outer_code.\n \n 2007-11-23  Richard Guenther  <rguenther@suse.de>\n \t    Michael Matz  <matz@suse.de>\n@@ -771,8 +777,7 @@\n \n 2007-11-07  Tom Tromey  <tromey@redhat.com>\n \n-\t* tree-ssa-structalias.c (ipa_pta_execute): Rename 'cfun' to\n-\t'func'. \n+\t* tree-ssa-structalias.c (ipa_pta_execute): Rename 'cfun' to 'func'. \n \t* tree-parloops.c (create_loop_fn): Use set_cfun.\n \t* gengtype.c (open_base_files): Emit #undef cfun.\n \t* ipa-struct-reorg.c (do_reorg_1): Use set_cfun.\n@@ -820,8 +825,7 @@\n \n \t* tree-ssa-alias.c (create_overlap_variables_for): Make sure\n \tto only create SFTs if we also create variable infos for PTA.\n-\t* tree-ssa-structalias.c (set_uids_in_ptset): Add all overlapping\n-\tSFTs.\n+\t* tree-ssa-structalias.c (set_uids_in_ptset): Add all overlapping SFTs.\n \n 2007-11-15  Richard Guenther  <rguenther@suse.de>\n \n@@ -880,8 +884,7 @@\n \n 2007-11-13  Michael Meissner  <michael.meissner@amd.com>\n \n-\t* config/i386/i386.c (ix86_sse5_valid_op_p): Put type on separate\n-\tline.\n+\t* config/i386/i386.c (ix86_sse5_valid_op_p): Put type on separate line.\n \n 2007-11-13  Sterling Augustine  <sterling@tensilica.com>\n \t    Bob Wilson  <bob.wilson@acm.org>\n@@ -908,39 +911,34 @@\n 2007-11-13  Diego Novillo  <dnovillo@google.com>\n \n \tPR tree-optimization/33870\n-\t* tree.h (strcut tree_memory_tag): add field unpartitionable.\n-\tremove field in_nested_struct.\n-\t(struct tree_struct_field_tag): add field nesting_level.\n-\t(sft_in_nested_struct): remove.\n-\t(sft_nesting_level): define.\n-\t(sft_unpartitionable_p): define.\n-\t* tree-ssa-alias.c (mem_sym_score): if mp->var is not\n+\t* tree.h (strcut tree_memory_tag): Add field unpartitionable.\n+\tRemove field in_nested_struct.\n+\t(struct tree_struct_field_tag): Add field nesting_level.\n+\t(sft_in_nested_struct): Remove.\n+\t(sft_nesting_level): Define.\n+\t(sft_unpartitionable_p): Define.\n+\t* tree-ssa-alias.c (mem_sym_score): If mp->var is not\n \tpartitionable, return long_max.\n-\t(compute_memory_partitions): do not partition sfts marked\n+\t(compute_memory_partitions): Do not partition sfts marked\n \tunpartitionable.\n-\t(create_sft): add argument nesting_level.  set\n-\tsft_nesting_level with it.  update all users.\n-\t(create_overlap_variables_for): show nesting level.\n-\t* tree-dfa.c (dump_subvars_for): likewise.\n-\t(dump_variable): likewise.\n-\tshow whether the sft is partitionable or not.\n-\t* tree-flow.h (struct fieldoff): remove field\n-\tin_nested_struct.\n-\tadd field nesting_level.\n-\t* tree-ssa-structalias.c (struct variable_info): remove\n+\t(create_sft): Add argument nesting_level.  Set\n+\tsft_nesting_level with it.  Update all users.\n+\t(create_overlap_variables_for): Show nesting level.\n+\t* tree-dfa.c (dump_subvars_for): Likewise.\n+\t(dump_variable): Likewise. Show whether the sft is\n+\tpartitionable or not.\n+\t* tree-flow.h (struct fieldoff): Remove field in_nested_struct.\n+\tAdd field nesting_level.\n+\t* tree-ssa-structalias.c (struct variable_info): Remove\n \tfield in_nested_struct.\n-\t(push_fields_onto_fieldstack): add argument\n-\tnesting_level.  update all users.\n-\tupdate documentation.\n-\tupdate pair->nesting_level with nesting_level.\n-\tmake recursive calls with nesting_level + 1.\n-\t(set_uids_in_ptset): if an sft is added to the points-to\n-\tset, mark it as unpartitionable.\n-\t* tree-ssa-operands.c (ref_nesting_level): new.\n-\t(add_vars_for_offset): call it.\n-\tadd argument full_ref.  update\n-\tcallers.\n-\tif var is inside a nested structure and the nesting level\n+\t(push_fields_onto_fieldstack): Add argument nesting_level.\n+\tUpdate all users.  Update documentation. Update pair->nesting_level\n+\twith nesting_level.  Make recursive calls with nesting_level + 1.\n+\t(set_uids_in_ptset): If an sft is added to the points-to set,\n+\tmark it as unpartitionable.\n+\t* tree-ssa-operands.c (ref_nesting_level): New.\n+\t(add_vars_for_offset): Call it.  Add argument full_ref. Update\n+\tcallers.  If var is inside a nested structure and the nesting level\n \tof full_ref is lower than the nesting level of var,\n \tadjust offset by the offset of var.\n \n@@ -1191,8 +1189,7 @@\n \tPR 33870\n \t* tree.h (struct tree_struct_field_tag): Add field in_nested_struct.\n \t(SFT_IN_NESTED_STRUCT): Define.\n-\t* tree-dfa.c (dump_subvars_for): Show offset of each\n-\tsub-var.\n+\t* tree-dfa.c (dump_subvars_for): Show offset of each sub-var.\n \t* tree-flow.h (struct fieldoff): Add field in_nested_struct.\n \t* tree-ssa-structalias.c (struct variable_info): Likewise.\n \t(push_fields_onto_fieldstack): If OFFSET is positive,\n@@ -1202,8 +1199,7 @@\n \t(set_uids_in_ptset): Set SFT_IN_NESTED_STRUCT from the\n \tvariable info object.\n \t* tree-ssa-operands.c (add_vars_for_offset): If VAR\n-\tbelongs to a nested structure, adjust OFFSET by\n-\tSFT_OFFSET(VAR).\n+\tbelongs to a nested structure, adjust OFFSET by SFT_OFFSET(VAR).\n \n 2007-11-07  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n@@ -1257,8 +1253,7 @@\n \n 2007-11-06  Diego Novillo  <dnovillo@google.com>\n \n-\t* tree-flow.h (struct fieldoff): Reformat comment.\n-\tDocument fields.\n+\t* tree-flow.h (struct fieldoff): Reformat comment. Document fields.\n \t* tree-ssa-operands.c: Tidy top-level comments.\n \t(add_vop): Likewise.\n \t(add_vars_for_offset): Tidy parameter formatting..\n@@ -1277,8 +1272,7 @@\n \n \tPR target/30961\n \t* reload1.c (find_reloads): Also check in_reg when handling a\n-\tsimple move with an input reload and a destination of a hard\n-\tregister.\n+\tsimple move with an input reload and a destination of a hard register.\n \n 2007-11-06  Maxim Kuvyrkov  <maxim@codesourcery.com>\n \n@@ -1355,8 +1349,7 @@\n 2007-11-05  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR target/33579\n-\t* tree.h (DECL_INIT_PRIORITY): Do not require\n-\tDECL_HAS_INIT_PRIORITY_P.\n+\t* tree.h (DECL_INIT_PRIORITY): Do not require DECL_HAS_INIT_PRIORITY_P.\n \t(DECL_FINI_PRIORITY): Likewise.\n \t* tree.c (decl_init_priority_lookup): Remove assert.\n \t(decl_fini_priority_insert): Likewise.\n@@ -1369,8 +1362,7 @@\n \t(compare_dtor): Likewise.\n \t(cgraph_build_cdtor_fns): Sort the functions by priority before\n \tcalling build_cdtor.\n-\t(cgraph_build_static_cdtor): Put the priority in the function's\n-\tname.\n+\t(cgraph_build_static_cdtor): Put the priority in the function's name.\n \n 2007-11-05  H.J. Lu  <hongjiu.lu@intel.com>\n \n@@ -1505,8 +1497,7 @@\n 2007-11-02  Diego Novillo  <dnovillo@google.com>\n \n \t* langhooks.h (struct lang_hooks_for_callgraph): Remove third\n-\targument from function pointer ANALYZE_EXPR.  Update all\n-\tusers.\n+\targument from function pointer ANALYZE_EXPR.  Update all users.\n \t* cgraph.c (debug_cgraph_node): New.\n \t(debug_cgraph): New.\n \n@@ -1626,8 +1617,7 @@\n 2007-10-31  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \tPR target/33948\n-\t* config/mips/mips.c (mips_fpr_return_fields): Fix SCALAR_TYPE_P\n-\tcheck.\n+\t* config/mips/mips.c (mips_fpr_return_fields): Fix SCALAR_TYPE_P check.\n \n 2007-10-31  Andreas Krebbel  <krebbel1@de.ibm.com>\n "}, {"sha": "cac5dbeb1b01188eedf6ccd9d0940ef7bf77f303", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37ab97325aa1b4d5d3799d3bdf05fa157e8fa68/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37ab97325aa1b4d5d3799d3bdf05fa157e8fa68/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e37ab97325aa1b4d5d3799d3bdf05fa157e8fa68", "patch": "@@ -3198,9 +3198,9 @@ ix86_function_regparm (const_tree type, const_tree decl)\n \t  struct function *f;\n \n \t  /* Make sure no regparm register is taken by a\n-\t     global register variable.  */\n+\t     fixed register or global register variable.  */\n \t  for (local_regparm = 0; local_regparm < 3; local_regparm++)\n-\t    if (global_regs[local_regparm])\n+\t    if (global_regs[local_regparm] || fixed_regs[local_regparm])\n \t      break;\n \n \t  /* We can't use regparm(3) for nested functions as these use\n@@ -3222,11 +3222,12 @@ ix86_function_regparm (const_tree type, const_tree decl)\n \t\t\t\t\tTYPE_ATTRIBUTES (TREE_TYPE (decl)))))\n \t    local_regparm = 2;\n \n-\t  /* Each global register variable increases register preassure,\n-\t     so the more global reg vars there are, the smaller regparm\n-\t     optimization use, unless requested by the user explicitly.  */\n+\t  /* Each global register variable or fixed register usage\n+\t     increases register pressure, so less registers should be\n+\t     used for argument passing.  This functionality can be\n+\t     overriden by explicit regparm value.  */\n \t  for (regno = 0; regno < 6; regno++)\n-\t    if (global_regs[regno])\n+\t    if (global_regs[regno] || fixed_regs[regno])\n \t      globals++;\n \t  local_regparm\n \t    = globals < local_regparm ? local_regparm - globals : 0;"}, {"sha": "47b6a72accc76a97374cf4f5c5638ad8eb1bae43", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37ab97325aa1b4d5d3799d3bdf05fa157e8fa68/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37ab97325aa1b4d5d3799d3bdf05fa157e8fa68/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e37ab97325aa1b4d5d3799d3bdf05fa157e8fa68", "patch": "@@ -1,3 +1,8 @@\n+2007-12-05  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/34312\n+\t* gcc.target/i386/pr34312.c: New test.\n+\n 2007-12-05  Tobias Burnus  <bU    gcc/stmt.c\n \n \tPR fortran/34333\n@@ -104,30 +109,29 @@\n \t* gcc.c-torture/compile/20071203-1.c: New test.\n \n 2007-12-03  Robert Dewar <dewar@adacore.com>\n-            Samuel Tardieu  <sam@rfc1149.net>\n+\t    Samuel Tardieu  <sam@rfc1149.net>\n \n-    \tPR ada/34287\n-    \t* check_elaboration_code.adb: New test.\n-    \n-    \t* bug_elaboration_code.ads, bug_elaboration_code.adb: New support\n-    \tfiles.\n+\tPR ada/34287\n+\t* gnat.dg/check_elaboration_code.adb: New test.\n+\t* gnat.dg/bug_elaboration_code.ads, bug_elaboration_code.adb:\n+\tNew support files.\n \n 2007-12-02  Paolo Carlini  <pcarlini@suse.de>\n \n-        PR c++/34061\n-        * g++.dg/cpp0x/pr34061.C: New.\n+\tPR c++/34061\n+\t* g++.dg/cpp0x/pr34061.C: New.\n \n 2007-12-02  Paolo Carlini  <pcarlini@suse.de>\n \n-        PR c++/34273\n-        * g++.dg/other/error21.C: New.\n+\tPR c++/34273\n+\t* g++.dg/other/error21.C: New.\n \n 2007-12-02  Revital Eres  <eres@il.ibm.com>\n \n \t* gcc.dg/sms-4.c: New testcase.\n \n 2007-12-02  Vladimir Yanovsky  <yanov@il.ibm.com>\n-            Revital Eres  <eres@il.ibm.com>\n+\t    Revital Eres  <eres@il.ibm.com>\n \n \t* gcc.dg/sms-3.c: New testcase.\n \n@@ -1304,7 +1308,7 @@\n \t* gcc.dg/vect/vect-78.c: Likewise.\n \n \t* gcc.dg/vect/no-section-anchors-vect-31.c: New test, like the original\n-\ttestcase (without no-section-anchors prefix) but with global arrays.   \n+\ttestcase (without no-section-anchors prefix) but with global arrays.\n \t* gcc.dg/vect/no-section-anchors-vect-34.c: Likewise.\n \t* gcc.dg/vect/no-section-anchors-vect-36.c: Likewsie.\n \t* gcc.dg/vect/no-section-anchors-vect-64.c: Likewise."}, {"sha": "846c2853799d1cc97e53194f98e424a903fe88d3", "filename": "gcc/testsuite/gcc.target/i386/pr34312.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e37ab97325aa1b4d5d3799d3bdf05fa157e8fa68/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr34312.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e37ab97325aa1b4d5d3799d3bdf05fa157e8fa68/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr34312.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr34312.c?ref=e37ab97325aa1b4d5d3799d3bdf05fa157e8fa68", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-options \"-O2 -march=pentium-m -fpic\" } */\n+\n+typedef struct\n+{\n+  unsigned char seq[3];\n+} JamoNormMap;\n+\n+static const JamoNormMap *\n+JamoClusterSearch (JamoNormMap aKey, const JamoNormMap * aClusters,\n+\t\t   short aClustersSize)\n+{\n+  unsigned short l = 0, u = aClustersSize - 1;\n+  unsigned short h = (l + u) / 2;\n+\n+  if ((aKey.seq[1] - aClusters[h].seq[1]) < 0)\n+    return JamoClusterSearch (aKey, &(aClusters[l]), h - l);\n+}\n+\n+short\n+JamoSrchReplace (const JamoNormMap * aClusters, unsigned short aClustersSize,\n+\t\t unsigned short * aIn, unsigned int * aLength,\n+\t\t unsigned short aOffset)\n+{\n+  JamoNormMap key;\n+\n+  key.seq[0] = 0;\n+  key.seq[1] = 1;\n+  key.seq[2] = 2;\n+\n+  JamoClusterSearch (key, aClusters, aClustersSize);\n+}"}]}