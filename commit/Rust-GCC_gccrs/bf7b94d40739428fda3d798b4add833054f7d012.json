{"sha": "bf7b94d40739428fda3d798b4add833054f7d012", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY3Yjk0ZDQwNzM5NDI4ZmRhM2Q3OThiNGFkZDgzMzA1NGY3ZDAxMg==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2020-11-15T21:03:14Z"}, "committer": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2020-11-18T11:05:27Z"}, "message": "MSP430: Add 64-bit hardware multiply support\n\nHardware multipliers that support widening 32-bit multiplication can\nbe used to perform a 64-bit * 64-bit multiplication more efficiently\nthan a software implementation.\n\nThe following equation is used to perform 64-bit multiplication for\ndevices with \"32bit\" or \"f5series\" hardware multiply versions:\n\n  64bit_result = (low32_op0 * lop32_op1)\n    + ((low32_op0 * high32_op1) << 32)\n       + ((high32_op0 * low32_op1) << 32)\n\nlibgcc/ChangeLog:\n\n\t* config/msp430/lib2hw_mul.S (mult64_hw): New.\n\t(if MUL_32): Use mult64_hw for __muldi3.\n\t(if MUL_F5): Use mult64_hw for __muldi3.\n\t* config/msp430/lib2mul.c (__muldi3): New.\n\t* config/msp430/t-msp430 (LIB2FUNCS_EXCLUDE): Define.", "tree": {"sha": "af1a2afd2aaa765b753f3b65ead1c8d815516618", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af1a2afd2aaa765b753f3b65ead1c8d815516618"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf7b94d40739428fda3d798b4add833054f7d012", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf7b94d40739428fda3d798b4add833054f7d012", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf7b94d40739428fda3d798b4add833054f7d012", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf7b94d40739428fda3d798b4add833054f7d012/comments", "author": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e045b85836091f2461263a3c3f4f1972b3753f9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e045b85836091f2461263a3c3f4f1972b3753f9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e045b85836091f2461263a3c3f4f1972b3753f9d"}], "stats": {"total": 134, "additions": 130, "deletions": 4}, "files": [{"sha": "855dcd8bb55e392867dfcdeeaecba1b8b45166d6", "filename": "libgcc/config/msp430/lib2hw_mul.S", "status": "modified", "additions": 73, "deletions": 4, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7b94d40739428fda3d798b4add833054f7d012/libgcc%2Fconfig%2Fmsp430%2Flib2hw_mul.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7b94d40739428fda3d798b4add833054f7d012/libgcc%2Fconfig%2Fmsp430%2Flib2hw_mul.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmsp430%2Flib2hw_mul.S?ref=bf7b94d40739428fda3d798b4add833054f7d012", "patch": "@@ -207,6 +207,73 @@\n \tMOV.W   &\\RES3, R15\t\t; Ready high 16-bits for return\n .endm\n \n+.macro mult64_hw  MPY32_LO MPY32_HI OP2_LO OP2_HI RES0 RES1 RES2 RES3\n+;* * 64-bit hardware multiply with a 64-bit result\n+;*\tint64 = int64 * int64\n+;*\n+;*   - Operand 1 is in R8, R9, R10, R11\n+;*   - Operand 2 is in R12, R13, R14, R15\n+;*   - Result    is in R12, R13, R14, R15\n+;*\n+;* 64-bit multiplication is achieved using the 32-bit hardware multiplier with\n+;* the following equation:\n+;*    R12:R15 = (R8:R9 * R12:R13) + ((R8:R9 * R14:R15) << 32) + ((R10:R11 * R12:R13) << 32)\n+;*\n+;* The left shift by 32 is handled with minimal cost by saving the two low\n+;* words and discarding the two high words.\n+;*\n+;* To ensure that the multiply is performed atomically, interrupts are\n+;* disabled upon routine entry.  Interrupt state is restored upon exit.\n+;*\n+;*   Registers used:  R6, R7, R8, R9, R10, R11, R12, R13, R14, R15\n+;*\n+;* Macro arguments are the memory locations of the hardware registers.\n+;*\n+#if defined(__MSP430X_LARGE__)\n+\tPUSHM.A\t#5, R10\n+#elif defined(__MSP430X__)\n+\tPUSHM.W\t#5, R10\n+#else\n+\tPUSH R10 { PUSH R9 { PUSH R8 { PUSH R7 { PUSH R6\n+#endif\n+\t; Multiply the low 32-bits of op0 and the high 32-bits of op1.\n+\tMOV.W\tR8, &\\MPY32_LO\n+\tMOV.W\tR9, &\\MPY32_HI\n+\tMOV.W\tR14, &\\OP2_LO\n+\tMOV.W\tR15, &\\OP2_HI\n+\t; Save the low 32-bits of the result.\n+\tMOV.W\t&\\RES0, R6\n+\tMOV.W\t&\\RES1, R7\n+\t; Multiply the high 32-bits of op0 and the low 32-bits of op1.\n+\tMOV.W\tR10, &\\MPY32_LO\n+\tMOV.W\tR11, &\\MPY32_HI\n+\tMOV.W\tR12, &\\OP2_LO\n+\tMOV.W\tR13, &\\OP2_HI\n+\t; Add the low 32-bits of the result to the previously saved result.\n+\tADD.W\t&\\RES0, R6\n+\tADDC.W\t&\\RES1, R7\n+\t; Multiply the low 32-bits of op0 and op1.\n+\tMOV.W\tR8, &\\MPY32_LO\n+\tMOV.W\tR9, &\\MPY32_HI\n+\tMOV.W\tR12, &\\OP2_LO\n+\tMOV.W\tR13, &\\OP2_HI\n+\t; Write the return values\n+\tMOV.W\t&\\RES0, R12\n+\tMOV.W   &\\RES1, R13\n+\tMOV.W\t&\\RES2, R14\n+\tMOV.W   &\\RES3, R15\n+\t; Add the saved low 32-bit results from earlier to the high 32-bits of\n+\t; this result, effectively shifting those two results left by 32 bits.\n+\tADD.W\tR6, R14\n+\tADDC.W  R7, R15\n+#if defined(__MSP430X_LARGE__)\n+\tPOPM.A\t#5, R10\n+#elif defined(__MSP430X__)\n+\tPOPM.W\t#5, R10\n+#else\n+\tPOP R6 { POP R7 { POP R8 { POP R9 { POP R10\n+#endif\n+.endm\n \n ;; EABI mandated names:\n ;; \n@@ -365,8 +432,9 @@\n \tmult3264_hw MPY32L, MPY32H, OP2L, OP2H, RES0, RES1, RES2, RES3\n \tend_func   __umulsidi2\n \n-\t;; FIXME: Add a hardware version of this function.\n-\tfake_func __muldi3    __mspabi_mpyll  __mspabi_mpyll_hw32\n+\tstart_func __muldi3   __mspabi_mpyll __mspabi_mpyll_hw32\n+\tmult64_hw MPY32L, MPY32H, OP2L, OP2H, RES0, RES1, RES2, RES3\n+\tend_func __muldi3\n \n #elif defined MUL_F5\n /* The F5xxx series of MCUs support the same 16-bit and 32-bit multiply\n@@ -397,8 +465,9 @@\n \tmult3264_hw MPY32L_F5, MPY32H_F5, OP2L_F5, OP2H_F5, RES0_F5, RES1_F5, RES2_F5, RES3_F5\n \tend_func   __umulsidi2\n \n-\t;; FIXME: Add a hardware version of this function.\n-\tfake_func __muldi3   __mspabi_mpyll __mspabi_mpyll_f5hw\n+\tstart_func __muldi3   __mspabi_mpyll __mspabi_mpyll_f5hw\n+\tmult64_hw MPY32L_F5, MPY32H_F5, OP2L_F5, OP2H_F5, RES0_F5, RES1_F5, RES2_F5, RES3_F5\n+\tend_func __muldi3\n \n #else\n #error MUL type not defined"}, {"sha": "ca022b9de4fd77fe83a6e3d6344eda0ff664602b", "filename": "libgcc/config/msp430/lib2mul.c", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7b94d40739428fda3d798b4add833054f7d012/libgcc%2Fconfig%2Fmsp430%2Flib2mul.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7b94d40739428fda3d798b4add833054f7d012/libgcc%2Fconfig%2Fmsp430%2Flib2mul.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmsp430%2Flib2mul.c?ref=bf7b94d40739428fda3d798b4add833054f7d012", "patch": "@@ -30,6 +30,58 @@ typedef unsigned int  uint08_type   __attribute__ ((mode (QI)));\n #define C3B(a,b,c) a##b##c\n #define C3(a,b,c) C3B(a,b,c)\n \n+#if defined (MUL_NONE) || defined (MUL_16)\n+/* __muldi3 must be excluded from libgcc.a to prevent multiple-definition\n+   errors for the hwmult configurations that have their own definition.\n+   However, for MUL_NONE and MUL_16, the software version is still required, so\n+   the necessary preprocessed output from libgcc2.c to compile that\n+   software version of __muldi3 is below.  */\n+typedef unsigned int USItype __attribute__ ((mode (SI)));\n+typedef int DItype __attribute__ ((mode (DI)));\n+typedef int SItype __attribute__ ((mode (SI)));\n+struct DWstruct {SItype low, high;};\n+\n+typedef union\n+{\n+  struct DWstruct s;\n+  DItype ll;\n+} DWunion;\n+\n+DItype __muldi3 (DItype u, DItype v);\n+\n+DItype\n+__muldi3 (DItype u, DItype v)\n+{\n+  const DWunion uu = {.ll = u};\n+  const DWunion vv = {.ll = v};\n+  /* The next block of code is expanded from the following line:\n+     DWunion w = {.ll = __umulsidi3 (uu.s.low, vv.s.low)};  */\n+  DWunion w;\n+  USItype __x0, __x1, __x2, __x3;\n+  USItype __ul, __vl, __uh, __vh;\n+  __ul = ((USItype) (uu.s.low) & (((USItype) 1 << ((4 * 8) / 2)) - 1));\n+  __uh = ((USItype) (uu.s.low) >> ((4 * 8) / 2));\n+  __vl = ((USItype) (vv.s.low) & (((USItype) 1 << ((4 * 8) / 2)) - 1));\n+  __vh = ((USItype) (vv.s.low) >> ((4 * 8) / 2));\n+  __x0 = (USItype) __ul * __vl;\n+  __x1 = (USItype) __ul * __vh;\n+  __x2 = (USItype) __uh * __vl;\n+  __x3 = (USItype) __uh * __vh;\n+  __x1 += ((USItype) (__x0) >> ((4 * 8) / 2));\n+  __x1 += __x2;\n+  if (__x1 < __x2)\n+    __x3 += ((USItype) 1 << ((4 * 8) / 2));\n+  (w.s.high) = __x3 + ((USItype) (__x1) >> ((4 * 8) / 2));\n+  (w.s.low) = ((USItype) (__x1) & (((USItype) 1 << ((4 * 8) / 2)) - 1))\n+    * ((USItype) 1 << ((4 * 8) / 2))\n+    + ((USItype) (__x0) & (((USItype) 1 << ((4 * 8) / 2)) - 1));\n+\n+  w.s.high += ((USItype) uu.s.low * (USItype) vv.s.high\n+\t       + (USItype) uu.s.high * (USItype) vv.s.low);\n+  return w.ll;\n+}\n+#endif\n+\n #if defined MUL_NONE\n \n /* The software multiply library needs __mspabi_mpyll.  */"}, {"sha": "9a79b5bbf55fcb570b46bf4b70d70e3bfd3e680c", "filename": "libgcc/config/msp430/t-msp430", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7b94d40739428fda3d798b4add833054f7d012/libgcc%2Fconfig%2Fmsp430%2Ft-msp430", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7b94d40739428fda3d798b4add833054f7d012/libgcc%2Fconfig%2Fmsp430%2Ft-msp430", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmsp430%2Ft-msp430?ref=bf7b94d40739428fda3d798b4add833054f7d012", "patch": "@@ -40,6 +40,11 @@ LIB2ADD = \\\n \t$(srcdir)/config/msp430/floathisf.c \\\n \t$(srcdir)/config/msp430/cmpd.c\n \n+# 32-bit and F5series hardware multiply have their own version of this function.\n+# To handle the case when there is no hardware multiply or only 16-bit hardware\n+# multiply, the libgcc version has been copied to lib2mul.c.\n+LIB2FUNCS_EXCLUDE += _muldi3\n+\n HOST_LIBGCC2_CFLAGS += -Os -ffunction-sections -fdata-sections -mhwmult=none\n \n crtbegin_no_eh.o: $(srcdir)/crtstuff.c"}]}