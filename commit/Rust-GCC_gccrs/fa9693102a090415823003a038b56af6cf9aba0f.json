{"sha": "fa9693102a090415823003a038b56af6cf9aba0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE5NjkzMTAyYTA5MDQxNTgyMzAwM2EwMzhiNTZhZjZjZjlhYmEwZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-09T08:45:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-09T08:45:55Z"}, "message": "[multiple changes]\n\n2009-04-09  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch4.adb (Expand_Concatenate): Improve handling of overflow cases\n\n2009-04-09  Pascal Obry  <obry@adacore.com>\n\n\t* a-cihama.adb, a-cihama.ads, a-coinve.adb, a-coinve.ads,\n\ts-tpoben.adb, s-tpoben.ads, s-finimp.adb, s-finimp.ads,\n\ta-convec.adb, a-convec.ads, a-finali.adb, a-finali.ads,\n\ta-filico.ads: Add some missing overriding keywords.\n\nFrom-SVN: r145807", "tree": {"sha": "220d08ad06a44452a8a5e98ccfbffb5c24b79a4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/220d08ad06a44452a8a5e98ccfbffb5c24b79a4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa9693102a090415823003a038b56af6cf9aba0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa9693102a090415823003a038b56af6cf9aba0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa9693102a090415823003a038b56af6cf9aba0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa9693102a090415823003a038b56af6cf9aba0f/comments", "author": null, "committer": null, "parents": [{"sha": "0c0efb33464ff07de3228fbc0cd658926e607e89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c0efb33464ff07de3228fbc0cd658926e607e89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c0efb33464ff07de3228fbc0cd658926e607e89"}], "stats": {"total": 136, "additions": 80, "deletions": 56}, "files": [{"sha": "4c2d48092bb8f788ada1a66ad7cff2543c646952", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fa9693102a090415823003a038b56af6cf9aba0f", "patch": "@@ -1,3 +1,14 @@\n+2009-04-09  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Concatenate): Improve handling of overflow cases\n+\n+2009-04-09  Pascal Obry  <obry@adacore.com>\n+\n+\t* a-cihama.adb, a-cihama.ads, a-coinve.adb, a-coinve.ads,\n+\ts-tpoben.adb, s-tpoben.ads, s-finimp.adb, s-finimp.ads,\n+\ta-convec.adb, a-convec.ads, a-finali.adb, a-finali.ads,\n+\ta-filico.ads: Add some missing overriding keywords.\n+\n 2009-04-09  Pascal Obry  <obry@adacore.com>\n \n \t* a-cihama.adb, a-cihama.ads, a-coinve.adb, a-coorma.ads, a-cihase.adb,"}, {"sha": "c948f460dc2aee54d7f93adb00337927cc1cb3f6", "filename": "gcc/ada/a-cihama.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2Fa-cihama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2Fa-cihama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihama.adb?ref=fa9693102a090415823003a038b56af6cf9aba0f", "patch": "@@ -108,7 +108,7 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n \n    function Is_Equal is new HT_Ops.Generic_Equal (Find_Equal_Key);\n \n-   function \"=\" (Left, Right : Map) return Boolean is\n+   overriding function \"=\" (Left, Right : Map) return Boolean is\n    begin\n       return Is_Equal (Left.HT, Right.HT);\n    end \"=\";"}, {"sha": "df66249bdddc4acc739eff7eb392c67d50368ed7", "filename": "gcc/ada/a-cihama.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2Fa-cihama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2Fa-cihama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihama.ads?ref=fa9693102a090415823003a038b56af6cf9aba0f", "patch": "@@ -63,7 +63,7 @@ package Ada.Containers.Indefinite_Hashed_Maps is\n    --  Cursor objects declared without an initialization expression are\n    --  initialized to the value No_Element.\n \n-   function \"=\" (Left, Right : Map) return Boolean;\n+   overriding function \"=\" (Left, Right : Map) return Boolean;\n    --  For each key/element pair in Left, equality attempts to find the key in\n    --  Right; if a search fails the equality returns False. The search works by\n    --  calling Hash to find the bucket in the Right map that corresponds to the"}, {"sha": "f7fc5abf9b0a6889911c8f852e5fb09a2ecf8cce", "filename": "gcc/ada/a-coinve.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2Fa-coinve.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2Fa-coinve.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinve.adb?ref=fa9693102a090415823003a038b56af6cf9aba0f", "patch": "@@ -385,7 +385,7 @@ package body Ada.Containers.Indefinite_Vectors is\n    -- \"=\" --\n    ---------\n \n-   function \"=\" (Left, Right : Vector) return Boolean is\n+   overriding function \"=\" (Left, Right : Vector) return Boolean is\n    begin\n       if Left'Address = Right'Address then\n          return True;"}, {"sha": "721f134717d8eb3025919b4f02e0f6c543016433", "filename": "gcc/ada/a-coinve.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2Fa-coinve.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2Fa-coinve.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinve.ads?ref=fa9693102a090415823003a038b56af6cf9aba0f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -62,7 +62,7 @@ package Ada.Containers.Indefinite_Vectors is\n \n    No_Element : constant Cursor;\n \n-   function \"=\" (Left, Right : Vector) return Boolean;\n+   overriding function \"=\" (Left, Right : Vector) return Boolean;\n \n    function To_Vector (Length : Count_Type) return Vector;\n "}, {"sha": "b4668a4870367d8b7a56ff91faf1d26ef3a61b21", "filename": "gcc/ada/a-convec.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2Fa-convec.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2Fa-convec.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-convec.adb?ref=fa9693102a090415823003a038b56af6cf9aba0f", "patch": "@@ -232,7 +232,7 @@ package body Ada.Containers.Vectors is\n    -- \"=\" --\n    ---------\n \n-   function \"=\" (Left, Right : Vector) return Boolean is\n+   overriding function \"=\" (Left, Right : Vector) return Boolean is\n    begin\n       if Left'Address = Right'Address then\n          return True;"}, {"sha": "bcb2734ea931a609e5a34a946843e20bc017217b", "filename": "gcc/ada/a-convec.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2Fa-convec.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2Fa-convec.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-convec.ads?ref=fa9693102a090415823003a038b56af6cf9aba0f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -62,7 +62,7 @@ package Ada.Containers.Vectors is\n \n    No_Element : constant Cursor;\n \n-   function \"=\" (Left, Right : Vector) return Boolean;\n+   overriding function \"=\" (Left, Right : Vector) return Boolean;\n \n    function To_Vector (Length : Count_Type) return Vector;\n "}, {"sha": "5768dfdda8aacfb81d8154a610a5e49cca7fb65a", "filename": "gcc/ada/a-filico.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2Fa-filico.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2Fa-filico.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-filico.ads?ref=fa9693102a090415823003a038b56af6cf9aba0f", "patch": "@@ -52,7 +52,7 @@ package Ada.Finalization.List_Controller is\n       --  while those temporaries are still in use, they will be reclaimed\n       --  by the normal finalization mechanism.\n \n-   procedure Finalize (Object : in out Simple_List_Controller);\n+   overriding procedure Finalize (Object : in out Simple_List_Controller);\n \n    ---------------------\n    -- List_Controller --\n@@ -98,7 +98,7 @@ package Ada.Finalization.List_Controller is\n    --  objects makes sure that they get finalized upon exit from\n    --  the access type that defined them\n \n-   procedure Initialize (Object : in out List_Controller);\n-   procedure Finalize   (Object : in out List_Controller);\n+   overriding procedure Initialize (Object : in out List_Controller);\n+   overriding procedure Finalize   (Object : in out List_Controller);\n \n end Ada.Finalization.List_Controller;"}, {"sha": "7137e23183a4f4e0ca62ff335090f8618efe0d33", "filename": "gcc/ada/a-finali.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2Fa-finali.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2Fa-finali.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-finali.adb?ref=fa9693102a090415823003a038b56af6cf9aba0f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,7 +39,7 @@ package body Ada.Finalization is\n    -- \"=\" --\n    ---------\n \n-   function \"=\" (A, B : Controlled) return Boolean is\n+   overriding function \"=\" (A, B : Controlled) return Boolean is\n    begin\n       return Empty_Root_Controlled (A) = Empty_Root_Controlled (B);\n    end \"=\";"}, {"sha": "fa983a4556b188df4362d9fcecdb577ac5135313", "filename": "gcc/ada/a-finali.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2Fa-finali.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2Fa-finali.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-finali.ads?ref=fa9693102a090415823003a038b56af6cf9aba0f", "patch": "@@ -63,9 +63,9 @@ private\n \n    type Controlled is abstract new SFR.Root_Controlled with null record;\n \n-   function \"=\" (A, B : Controlled) return Boolean;\n+   overriding function \"=\" (A, B : Controlled) return Boolean;\n    --  Need to be defined explicitly because we don't want to compare the\n-   --  hidden pointers\n+   --  hidden pointers.\n \n    type Limited_Controlled is\n      abstract new SFR.Root_Controlled with null record;"}, {"sha": "53a9c9a2a7b79237ac803c7b41169c78f2a536a6", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 36, "deletions": 23, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=fa9693102a090415823003a038b56af6cf9aba0f", "patch": "@@ -3,7 +3,7 @@\n --                         GNAT COMPILER COMPONENTS                         --\n --                                                                          --\n --                              E X P _ C H 4                               --\n---                                                                          --\n+--                                                               g           --\n --                                 B o d y                                  --\n --                                                                          --\n --          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n@@ -2230,6 +2230,17 @@ package body Exp_Ch4 is\n       Result : Node_Id;\n       --  Result of the concatenation (of type Ityp)\n \n+      Known_Non_Null_Operand_Seen : Boolean;\n+      --  Set True during generation of the assignements of operands into\n+      --  result once an operand known to be non-null has been seen.\n+\n+      function Make_Artyp_Literal (Val : Nat) return Node_Id;\n+      --  This function makes an N_Integer_Literal node that is returned in\n+      --  analyzed form with the type set to Artyp. Importantly this literal\n+      --  is not flagged as static, so that if we do computations with it that\n+      --  result in statically detected out of range conditions, we will not\n+      --  generate error messages but instead warning messages.\n+\n       function To_Artyp (X : Node_Id) return Node_Id;\n       --  Given a node of type Ityp, returns the corresponding value of type\n       --  Artyp. For non-enumeration types, this is a plain integer conversion.\n@@ -2238,9 +2249,18 @@ package body Exp_Ch4 is\n       function To_Ityp (X : Node_Id) return Node_Id;\n       --  The inverse function (uses Val in the case of enumeration types)\n \n-      Known_Non_Null_Operand_Seen : Boolean;\n-      --  Set True during generation of the assignements of operands into\n-      --  result once an operand known to be non-null has been seen.\n+      ------------------------\n+      -- Make_Artyp_Literal --\n+      ------------------------\n+\n+      function Make_Artyp_Literal (Val : Nat) return Node_Id is\n+         Result : constant Node_Id := Make_Integer_Literal (Loc, Val);\n+      begin\n+         Set_Etype (Result, Artyp);\n+         Set_Analyzed (Result, True);\n+         Set_Is_Static_Expression (Result, False);\n+         return Result;\n+      end Make_Artyp_Literal;\n \n       --------------\n       -- To_Artyp --\n@@ -2296,11 +2316,7 @@ package body Exp_Ch4 is\n       Clen     : Node_Id;\n       Set      : Boolean;\n \n-      Saved_In_Inlined_Body : Boolean;\n-\n    begin\n-      Aggr_Length (0) := Make_Integer_Literal (Loc, 0);\n-\n       --  Choose an appropriate computational type\n \n       --  We will be doing calculations of lengths and bounds in this routine\n@@ -2346,6 +2362,10 @@ package body Exp_Ch4 is\n          end if;\n       end if;\n \n+      --  Supply dummy entry at start of length array\n+\n+      Aggr_Length (0) := Make_Artyp_Literal (0);\n+\n       --  Go through operands setting up the above arrays\n \n       J := 1;\n@@ -2397,7 +2417,7 @@ package body Exp_Ch4 is\n                  Make_Op_Add (Loc,\n                    Left_Opnd  =>\n                      New_Copy_Tree (String_Literal_Low_Bound (Opnd_Typ)),\n-                   Right_Opnd => Make_Integer_Literal (Loc, 1));\n+                   Right_Opnd => Make_Artyp_Literal (1));\n             end if;\n \n             --  Skip null string literal\n@@ -2707,7 +2727,7 @@ package body Exp_Ch4 is\n             Right_Opnd =>\n               Make_Op_Subtract (Loc,\n                 Left_Opnd  => New_Copy (Aggr_Length (NN)),\n-                Right_Opnd => Make_Integer_Literal (Loc, 1))));\n+                Right_Opnd => Make_Artyp_Literal (1))));\n \n       --  Now force overflow checking on High_Bound\n \n@@ -2723,7 +2743,7 @@ package body Exp_Ch4 is\n              Expressions => New_List (\n                Make_Op_Eq (Loc,\n                  Left_Opnd  => New_Copy (Aggr_Length (NN)),\n-                 Right_Opnd => Make_Integer_Literal (Loc, 0)),\n+                 Right_Opnd => Make_Artyp_Literal (0)),\n                Last_Opnd_High_Bound,\n                High_Bound));\n       end if;\n@@ -2734,16 +2754,10 @@ package body Exp_Ch4 is\n         Make_Defining_Identifier (Loc,\n           Chars => New_Internal_Name ('S'));\n \n-      --  Kludge! Kludge! ???\n       --  If the bound is statically known to be out of range, we do not want\n-      --  to abort, we want a warning and a runtime constraint error, so we\n-      --  pretend this comes from an inlined body (otherwise a static out\n-      --  of range value would be an illegality).\n-\n-      --  This is horrible, we really must find a better way ???\n-\n-      Saved_In_Inlined_Body := In_Inlined_Body;\n-      In_Inlined_Body := True;\n+      --  to abort, we want a warning and a runtime constraint error. Note that\n+      --  we have arranged that the result will not be treated as a static\n+      --  constant, so we won't get an illegality during this insertion.\n \n       Insert_Action (Cnode,\n         Make_Object_Declaration (Loc,\n@@ -2759,8 +2773,6 @@ package body Exp_Ch4 is\n                       High_Bound => High_Bound))))),\n         Suppress => All_Checks);\n \n-      In_Inlined_Body := Saved_In_Inlined_Body;\n-\n       --  Catch the static out of range case now\n \n       if Raises_Constraint_Error (High_Bound) then\n@@ -2784,7 +2796,7 @@ package body Exp_Ch4 is\n                      Right_Opnd =>\n                        Make_Op_Subtract (Loc,\n                          Left_Opnd  => Aggr_Length (J),\n-                         Right_Opnd => Make_Integer_Literal (Loc, 1)));\n+                         Right_Opnd => Make_Artyp_Literal (1)));\n \n          begin\n             --  Singleton case, simple assignment\n@@ -2839,6 +2851,7 @@ package body Exp_Ch4 is\n                          Then_Statements =>\n                            New_List (Assign));\n                   end if;\n+\n                   Insert_Action (Cnode, Assign, Suppress => All_Checks);\n                end;\n             end if;"}, {"sha": "d5bf0c1f9d421f84b0a23c119b7f8d7a7182f728", "filename": "gcc/ada/s-finimp.adb", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2Fs-finimp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2Fs-finimp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-finimp.adb?ref=fa9693102a090415823003a038b56af6cf9aba0f", "patch": "@@ -90,11 +90,11 @@ package body System.Finalization_Implementation is\n    -- Adjust --\n    ------------\n \n-   procedure Adjust (Object : in out Record_Controller) is\n+   overriding procedure Adjust (Object : in out Record_Controller) is\n \n       First_Comp : Finalizable_Ptr;\n-      My_Offset : constant SSE.Storage_Offset :=\n-                    Object.My_Address - Object'Address;\n+      My_Offset  : constant SSE.Storage_Offset :=\n+                     Object.My_Address - Object'Address;\n \n       procedure Ptr_Adjust (Ptr : in out Finalizable_Ptr);\n       --  Subtract the offset to the pointer\n@@ -125,7 +125,7 @@ package body System.Finalization_Implementation is\n             Ptr_Adjust (P.Next);\n             Reverse_Adjust (P.Next);\n             Adjust (P.all);\n-            Object.F := P;   --  Successfully adjusted, so place in list.\n+            Object.F := P;   --  Successfully adjusted, so place in list\n          end if;\n       end Reverse_Adjust;\n \n@@ -263,7 +263,6 @@ package body System.Finalization_Implementation is\n \n    procedure Detach_From_Final_List (Obj : in out Finalizable) is\n    begin\n-\n       --  When objects are not properly attached to a doubly linked list do\n       --  not try to detach them. The only case where it can happen is when\n       --  dealing with Finalize_Storage_Only objects which are not always\n@@ -293,7 +292,7 @@ package body System.Finalization_Implementation is\n    -- Finalize --\n    --------------\n \n-   procedure Finalize   (Object : in out Limited_Record_Controller) is\n+   overriding procedure Finalize (Object : in out Limited_Record_Controller) is\n    begin\n       Finalize_List (Object.F);\n    end Finalize;\n@@ -392,7 +391,7 @@ package body System.Finalization_Implementation is\n \n    begin\n       --  Fetch the controller from the Parent or above if necessary\n-      --  when there are no controller at this level\n+      --  when there are no controller at this level.\n \n       while Offset = -2 loop\n          The_Tag := Ada.Tags.Parent_Tag (The_Tag);\n@@ -455,13 +454,15 @@ package body System.Finalization_Implementation is\n    -- Initialize --\n    ----------------\n \n-   procedure Initialize (Object : in out Limited_Record_Controller) is\n+   overriding procedure Initialize\n+     (Object : in out Limited_Record_Controller)\n+   is\n       pragma Warnings (Off, Object);\n    begin\n       null;\n    end Initialize;\n \n-   procedure Initialize (Object : in out Record_Controller) is\n+   overriding procedure Initialize (Object : in out Record_Controller) is\n    begin\n       Object.My_Address := Object'Address;\n    end Initialize;\n@@ -503,8 +504,8 @@ package body System.Finalization_Implementation is\n       From_Abort : Boolean;\n       E_Occ      : Exception_Occurrence)\n    is\n-      P   : Finalizable_Ptr := L;\n-      Q   : Finalizable_Ptr;\n+      P : Finalizable_Ptr := L;\n+      Q : Finalizable_Ptr;\n \n    begin\n       --  We already got an exception. We now finalize the remainder of\n@@ -538,5 +539,4 @@ package body System.Finalization_Implementation is\n \n begin\n    SSL.Finalize_Global_List := Finalize_Global_List'Access;\n-\n end System.Finalization_Implementation;"}, {"sha": "e9ffeae7ffc2f7c8ffa4afcaa43eb1ec17cb499e", "filename": "gcc/ada/s-finimp.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2Fs-finimp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2Fs-finimp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-finimp.ads?ref=fa9693102a090415823003a038b56af6cf9aba0f", "patch": "@@ -132,10 +132,10 @@ package System.Finalization_Implementation is\n       F : SFR.Finalizable_Ptr;\n    end record;\n \n-   procedure Initialize (Object : in out Limited_Record_Controller);\n+   overriding procedure Initialize (Object : in out Limited_Record_Controller);\n    --  Does nothing currently\n \n-   procedure Finalize (Object : in out Limited_Record_Controller);\n+   overriding procedure Finalize (Object : in out Limited_Record_Controller);\n    --  Finalize the controlled components of the enclosing record by following\n    --  the list starting at Object.F.\n \n@@ -144,10 +144,10 @@ package System.Finalization_Implementation is\n          My_Address : System.Address;\n       end record;\n \n-   procedure Initialize (Object : in out Record_Controller);\n+   overriding procedure Initialize (Object : in out Record_Controller);\n    --  Initialize the field My_Address to the Object'Address\n \n-   procedure Adjust (Object : in out Record_Controller);\n+   overriding procedure Adjust (Object : in out Record_Controller);\n    --  Adjust the components and their finalization pointers by subtracting by\n    --  the offset of the target and the source addresses of the assignment.\n "}, {"sha": "d6d83778ddddf2b63ee75100d4c4c202aacba961", "filename": "gcc/ada/s-tpoben.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2Fs-tpoben.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2Fs-tpoben.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpoben.adb?ref=fa9693102a090415823003a038b56af6cf9aba0f", "patch": "@@ -78,7 +78,7 @@ package body System.Tasking.Protected_Objects.Entries is\n    -- Finalize --\n    --------------\n \n-   procedure Finalize (Object : in out Protection_Entries) is\n+   overriding procedure Finalize (Object : in out Protection_Entries) is\n       Entry_Call        : Entry_Call_Link;\n       Caller            : Task_Id;\n       Ceiling_Violation : Boolean;"}, {"sha": "059ea2557e9f237791850f78e77a07dc73bc2416", "filename": "gcc/ada/s-tpoben.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2Fs-tpoben.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9693102a090415823003a038b56af6cf9aba0f/gcc%2Fada%2Fs-tpoben.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpoben.ads?ref=fa9693102a090415823003a038b56af6cf9aba0f", "patch": "@@ -225,7 +225,7 @@ package System.Tasking.Protected_Objects.Entries is\n \n private\n \n-   procedure Finalize (Object : in out Protection_Entries);\n+   overriding procedure Finalize (Object : in out Protection_Entries);\n    --  Clean up a Protection object; in particular, finalize the associated\n    --  Lock object.\n "}]}