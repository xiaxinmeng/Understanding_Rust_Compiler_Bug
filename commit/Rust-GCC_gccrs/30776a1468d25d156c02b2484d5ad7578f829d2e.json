{"sha": "30776a1468d25d156c02b2484d5ad7578f829d2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA3NzZhMTQ2OGQyNWQxNTZjMDJiMjQ4NGQ1YWQ3NTc4ZjgyOWQyZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-05-01T09:50:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-05-01T09:50:59Z"}, "message": "re PR target/79430 (action of statement incorrectly optimised away)\n\n\tPR target/79430\n\t* rtlanal.c (reg_set_p): If reg is a stack_pointer_rtx, also\n\tcheck for stack push/pop autoinc.\n\t* config/i386/i386.c (ix86_agi_dependent): Return false\n\tif the only reason why modified_in_p returned true is that\n\taddr is SP based and set_insn is a push or pop.\n\nFrom-SVN: r247429", "tree": {"sha": "8b474243cad264fb5c3c25797a360bfb208f12b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b474243cad264fb5c3c25797a360bfb208f12b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30776a1468d25d156c02b2484d5ad7578f829d2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30776a1468d25d156c02b2484d5ad7578f829d2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30776a1468d25d156c02b2484d5ad7578f829d2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30776a1468d25d156c02b2484d5ad7578f829d2e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f16b9dc289af11bc64e8ae27a6723f2f82ca2cc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f16b9dc289af11bc64e8ae27a6723f2f82ca2cc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f16b9dc289af11bc64e8ae27a6723f2f82ca2cc5"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "52c6a4eb4fa43b2c60af6567387f176aa097d7f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30776a1468d25d156c02b2484d5ad7578f829d2e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30776a1468d25d156c02b2484d5ad7578f829d2e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30776a1468d25d156c02b2484d5ad7578f829d2e", "patch": "@@ -1,3 +1,12 @@\n+2017-05-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/79430\n+\t* rtlanal.c (reg_set_p): If reg is a stack_pointer_rtx, also\n+\tcheck for stack push/pop autoinc.\n+\t* config/i386/i386.c (ix86_agi_dependent): Return false\n+\tif the only reason why modified_in_p returned true is that\n+\taddr is SP based and set_insn is a push or pop.\n+\n 2017-04-29  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/79224"}, {"sha": "a09c2c7da2184d5c03319457f2eaf7e729b2b0a6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30776a1468d25d156c02b2484d5ad7578f829d2e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30776a1468d25d156c02b2484d5ad7578f829d2e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=30776a1468d25d156c02b2484d5ad7578f829d2e", "patch": "@@ -29243,7 +29243,26 @@ ix86_agi_dependent (rtx_insn *set_insn, rtx_insn *use_insn)\n     if (MEM_P (recog_data.operand[i]))\n       {\n \trtx addr = XEXP (recog_data.operand[i], 0);\n-\treturn modified_in_p (addr, set_insn) != 0;\n+\tif (modified_in_p (addr, set_insn) != 0)\n+\t  {\n+\t    /* No AGI stall if SET_INSN is a push or pop and USE_INSN\n+\t       has SP based memory (unless index reg is modified in a pop).  */\n+\t    rtx set = single_set (set_insn);\n+\t    if (set\n+\t\t&& (push_operand (SET_DEST (set), GET_MODE (SET_DEST (set)))\n+\t\t    || pop_operand (SET_SRC (set), GET_MODE (SET_SRC (set)))))\n+\t      {\n+\t\tstruct ix86_address parts;\n+\t\tif (ix86_decompose_address (addr, &parts)\n+\t\t    && parts.base == stack_pointer_rtx\n+\t\t    && (parts.index == NULL_RTX\n+\t\t\t|| MEM_P (SET_DEST (set))\n+\t\t\t|| !modified_in_p (parts.index, set_insn)))\n+\t\t  return false;\n+\t      }\n+\t    return true;\n+\t  }\n+\treturn false;\n       }\n   return false;\n }"}, {"sha": "321363f9746014c175506a8ed5cf1ae5b710f38d", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30776a1468d25d156c02b2484d5ad7578f829d2e/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30776a1468d25d156c02b2484d5ad7578f829d2e/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=30776a1468d25d156c02b2484d5ad7578f829d2e", "patch": "@@ -1221,6 +1221,24 @@ reg_set_p (const_rtx reg, const_rtx insn)\n \t\t  || find_reg_fusage (insn, CLOBBER, reg)))))\n     return true;\n \n+  /* There are no REG_INC notes for SP autoinc.  */\n+  if (reg == stack_pointer_rtx && INSN_P (insn))\n+    {\n+      subrtx_var_iterator::array_type array;\n+      FOR_EACH_SUBRTX_VAR (iter, array, PATTERN (insn), NONCONST)\n+\t{\n+\t  rtx mem = *iter;\n+\t  if (mem\n+\t      && MEM_P (mem)\n+\t      && GET_RTX_CLASS (GET_CODE (XEXP (mem, 0))) == RTX_AUTOINC)\n+\t    {\n+\t      if (XEXP (XEXP (mem, 0), 0) == stack_pointer_rtx)\n+\t\treturn true;\n+\t      iter.skip_subrtxes ();\n+\t    }\n+\t}\n+    }\n+\n   return set_of (reg, insn) != NULL_RTX;\n }\n "}]}