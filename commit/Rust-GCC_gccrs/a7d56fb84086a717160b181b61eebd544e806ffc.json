{"sha": "a7d56fb84086a717160b181b61eebd544e806ffc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdkNTZmYjg0MDg2YTcxNzE2MGIxODFiNjFlZWJkNTQ0ZTgwNmZmYw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-04-25T19:15:26Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-04-25T19:15:26Z"}, "message": "i386.md (*movoi_internal_avx): Set mode attribute to XI for SSE constm1 operands and TARGET_AVX512VL.\n\n\t* config/i386/i386.md (*movoi_internal_avx): Set mode attribute to XI\n\tfor SSE constm1 operands and TARGET_AVX512VL.\n\t(*movti_internal): Ditto.\n\t(*mov<mode>_or): Use constm1_operand predicate.\n\t* config/i386/sse.md (*mov<mode>_internal): Set mode attribute to XI\n\tfor SSE vector_all_ones operands and TARGET_AVX512VL.\n\t* config/i386/predicates.md (constm1_operand): New predicate.\n\t* config/i386/i386.c (standard_sse_constant_opcode): Simplify\n\temission of constant -1 load.\n\nFrom-SVN: r235416", "tree": {"sha": "edda10e8fed8e9e51da9b7bce27478246467976f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edda10e8fed8e9e51da9b7bce27478246467976f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7d56fb84086a717160b181b61eebd544e806ffc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7d56fb84086a717160b181b61eebd544e806ffc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7d56fb84086a717160b181b61eebd544e806ffc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7d56fb84086a717160b181b61eebd544e806ffc/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e6e860a2c98b25731642126619adf35d4e1fd97c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6e860a2c98b25731642126619adf35d4e1fd97c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6e860a2c98b25731642126619adf35d4e1fd97c"}], "stats": {"total": 76, "additions": 48, "deletions": 28}, "files": [{"sha": "7eb5a7c844673220d648fa0f6c41e10d4e275481", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d56fb84086a717160b181b61eebd544e806ffc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d56fb84086a717160b181b61eebd544e806ffc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7d56fb84086a717160b181b61eebd544e806ffc", "patch": "@@ -1,3 +1,15 @@\n+2016-04-25  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*movoi_internal_avx): Set mode attribute to XI\n+\tfor SSE constm1 operands and TARGET_AVX512VL.\n+\t(*movti_internal): Ditto.\n+\t(*mov<mode>_or): Use constm1_operand predicate.\n+\t* config/i386/sse.md (*mov<mode>_internal): Set mode attribute to XI\n+\tfor SSE vector_all_ones operands and TARGET_AVX512VL.\n+\t* config/i386/predicates.md (constm1_operand): New predicate.\n+\t* config/i386/i386.c (standard_sse_constant_opcode): Simplify\n+\temission of constant -1 load.\n+\n 2016-04-25  Jason Merrill  <jason@redhat.com>\n \n \t* gdbinit.in: Skip is-a.h."}, {"sha": "e7adbd539e8c6ad6350fa53c77bb7b8e7b65f57e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d56fb84086a717160b181b61eebd544e806ffc/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d56fb84086a717160b181b61eebd544e806ffc/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a7d56fb84086a717160b181b61eebd544e806ffc", "patch": "@@ -10868,30 +10868,24 @@ standard_sse_constant_opcode (rtx_insn *insn, rtx x)\n \tcase MODE_V8DF:\n \tcase MODE_V16SF:\n \t  gcc_assert (TARGET_AVX512F);\n-\t  break;\n+\t  return \"vpternlogd\\t{$0xFF, %g0, %g0, %g0|%g0, %g0, %g0, 0xFF}\";\n+\n \tcase MODE_OI:\n \tcase MODE_V4DF:\n \tcase MODE_V8SF:\n \t  gcc_assert (TARGET_AVX2);\n-\t  break;\n+\t  /* FALLTHRU */\n \tcase MODE_TI:\n \tcase MODE_V2DF:\n \tcase MODE_V4SF:\n \t  gcc_assert (TARGET_SSE2);\n-\t  break;\n+\t  return (TARGET_AVX\n+\t\t  ? \"vpcmpeqd\\t%0, %0, %0\"\n+\t\t  : \"pcmpeqd\\t%0, %0\");\n+\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n-\n-      if (TARGET_AVX512VL\n-\t  || insn_mode == MODE_XI\n-\t  || insn_mode == MODE_V8DF\n-\t  || insn_mode == MODE_V16SF)\n-\treturn \"vpternlogd\\t{$0xFF, %g0, %g0, %g0|%g0, %g0, %g0, 0xFF}\";\n-      else if (TARGET_AVX)\n-\treturn \"vpcmpeqd\\t%0, %0, %0\";\n-      else\n-\treturn \"pcmpeqd\\t%0, %0\";\n    }\n \n   gcc_unreachable ();"}, {"sha": "7fbba2dccc4f515e44632d6f363f5b8a0ac899b6", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d56fb84086a717160b181b61eebd544e806ffc/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d56fb84086a717160b181b61eebd544e806ffc/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a7d56fb84086a717160b181b61eebd544e806ffc", "patch": "@@ -1960,10 +1960,9 @@\n \n (define_insn \"*mov<mode>_or\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n-\t(match_operand:SWI48 1 \"const_int_operand\"))\n+\t(match_operand:SWI48 1 \"constm1_operand\"))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"reload_completed\n-   && operands[1] == constm1_rtx\"\n+  \"reload_completed\"\n   \"or{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"mode\" \"<MODE>\")\n@@ -2039,10 +2038,13 @@\n \t(cond [(ior (match_operand 0 \"ext_sse_reg_operand\")\n \t\t    (match_operand 1 \"ext_sse_reg_operand\"))\n \t\t (const_string \"XI\")\n-\t       (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n-\t\t (const_string \"V8SF\")\n-\t       (and (eq_attr \"alternative\" \"3\")\n-\t\t    (match_test \"TARGET_SSE_TYPELESS_STORES\"))\n+\t       (and (eq_attr \"alternative\" \"0\")\n+\t\t    (and (match_test \"TARGET_AVX512VL\")\n+\t\t\t (match_operand 1 \"constm1_operand\")))\n+\t\t (const_string \"XI\")\n+\t       (ior (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t\t    (and (eq_attr \"alternative\" \"3\")\n+\t\t\t (match_test \"TARGET_SSE_TYPELESS_STORES\")))\n \t\t (const_string \"V8SF\")\n \t      ]\n \t      (const_string \"OI\")))])\n@@ -2099,16 +2101,19 @@\n        (const_string \"maybe_vex\")\n        (const_string \"orig\")))\n    (set (attr \"mode\")\n-\t(cond [(ior (match_operand 0 \"ext_sse_reg_operand\")\n+\t(cond [(eq_attr \"alternative\" \"0,1\")\n+\t\t (const_string \"DI\")\n+\t       (ior (match_operand 0 \"ext_sse_reg_operand\")\n \t\t    (match_operand 1 \"ext_sse_reg_operand\"))\n \t\t (const_string \"XI\")\n-\t       (eq_attr \"alternative\" \"0,1\")\n-\t\t (const_string \"DI\")\n+\t       (and (eq_attr \"alternative\" \"2\")\n+\t\t    (and (match_test \"TARGET_AVX512VL\")\n+\t\t\t (match_operand 1 \"constm1_operand\")))\n+\t\t (const_string \"XI\")\n \t       (ior (not (match_test \"TARGET_SSE2\"))\n-\t\t    (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))\n-\t\t (const_string \"V4SF\")\n-\t       (and (eq_attr \"alternative\" \"5\")\n-\t\t    (match_test \"TARGET_SSE_TYPELESS_STORES\"))\n+\t\t    (ior (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t\t\t (and (eq_attr \"alternative\" \"5\")\n+\t\t\t      (match_test \"TARGET_SSE_TYPELESS_STORES\"))))\n \t\t (const_string \"V4SF\")\n \t       (match_test \"TARGET_AVX\")\n \t\t (const_string \"TI\")"}, {"sha": "89b7de035f795999745554e584945c1cfb388174", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d56fb84086a717160b181b61eebd544e806ffc/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d56fb84086a717160b181b61eebd544e806ffc/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=a7d56fb84086a717160b181b61eebd544e806ffc", "patch": "@@ -675,6 +675,11 @@\n   return op == CONST1_RTX (mode);\n })\n \n+;; Match exactly -1.\n+(define_predicate \"constm1_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"op = constm1_rtx\")))\n+\n ;; Match exactly eight.\n (define_predicate \"const8_operand\"\n   (and (match_code \"const_int\")"}, {"sha": "4c916bf7c64576b4f140b6f6607d1cabf69d1d9e", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d56fb84086a717160b181b61eebd544e806ffc/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d56fb84086a717160b181b61eebd544e806ffc/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=a7d56fb84086a717160b181b61eebd544e806ffc", "patch": "@@ -938,7 +938,11 @@\n   [(set_attr \"type\" \"sselog1,ssemov,ssemov\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set (attr \"mode\")\n-\t(cond [(and (match_test \"<MODE_SIZE> == 16\")\n+\t(cond [(and (eq_attr \"alternative\" \"0\")\n+\t\t    (and (match_test \"TARGET_AVX512VL\")\n+\t\t    \t (match_operand 1 \"vector_all_ones_operand\")))\n+\t\t (const_string \"XI\")\n+\t       (and (match_test \"<MODE_SIZE> == 16\")\n \t\t    (ior (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n \t\t\t (and (eq_attr \"alternative\" \"2\")\n \t\t\t      (match_test \"TARGET_SSE_TYPELESS_STORES\"))))"}]}