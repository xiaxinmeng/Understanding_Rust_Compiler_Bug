{"sha": "708cc6132bb374e2c5bd1c4f43f9fe7306d20970", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA4Y2M2MTMyYmIzNzRlMmM1YmQxYzRmNDNmOWZlNzMwNmQyMDk3MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-07-29T08:42:19Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-07-29T08:42:19Z"}, "message": "Generalise VEC_DUPLICATE folding for variable-length vectors\n\nThis patch uses the constant vector encoding scheme to handle\nmore cases of a VEC_DUPLICATE of another vector.  Duplicating\nany fixed-length vector is fine, and duplicating a variable-length\nvector is OK as long as that vector is also a duplicate of a\nfixed-length sequence.\n\nOther cases fell through to:\n\n  if (VECTOR_MODE_P (mode) && GET_CODE (op) == CONST_VECTOR)\n\nwhich was only expecting to deal with elementwise operations.\n\n2019-07-29  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* simplify-rtx.c (simplify_const_unary_operation): Fold a\n\tVEC_DUPLICATE of a fixed-length vector even if the result\n\tis variable-length.  Likewise fold a duplicate of a\n\tvariable-length vector if the variable-length vector is\n\titself a duplicate of a fixed-length sequence.\n\t(test_vector_ops_duplicate): Test more cases.\n\nFrom-SVN: r273868", "tree": {"sha": "97cf7a6d5112e03267943b02aaf4d57e97afb6ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97cf7a6d5112e03267943b02aaf4d57e97afb6ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/708cc6132bb374e2c5bd1c4f43f9fe7306d20970", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/708cc6132bb374e2c5bd1c4f43f9fe7306d20970", "html_url": "https://github.com/Rust-GCC/gccrs/commit/708cc6132bb374e2c5bd1c4f43f9fe7306d20970", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/708cc6132bb374e2c5bd1c4f43f9fe7306d20970/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4ce6ab6889446984fd7017e2150962eb4550a7ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ce6ab6889446984fd7017e2150962eb4550a7ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ce6ab6889446984fd7017e2150962eb4550a7ee"}], "stats": {"total": 48, "additions": 35, "deletions": 13}, "files": [{"sha": "706939c850dc9add4bd202168c64001cd2052018", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/708cc6132bb374e2c5bd1c4f43f9fe7306d20970/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/708cc6132bb374e2c5bd1c4f43f9fe7306d20970/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=708cc6132bb374e2c5bd1c4f43f9fe7306d20970", "patch": "@@ -1,3 +1,12 @@\n+2019-07-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* simplify-rtx.c (simplify_const_unary_operation): Fold a\n+\tVEC_DUPLICATE of a fixed-length vector even if the result\n+\tis variable-length.  Likewise fold a duplicate of a\n+\tvariable-length vector if the variable-length vector is\n+\titself a duplicate of a fixed-length sequence.\n+\t(test_vector_ops_duplicate): Test more cases.\n+\n 2019-07-29  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* vector-builder.h (vector_builder): Add a shape template parameter."}, {"sha": "9359a3cdb4dc496600f0d624a61c1c75ed67f3a0", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/708cc6132bb374e2c5bd1c4f43f9fe7306d20970/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/708cc6132bb374e2c5bd1c4f43f9fe7306d20970/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=708cc6132bb374e2c5bd1c4f43f9fe7306d20970", "patch": "@@ -1736,23 +1736,24 @@ simplify_const_unary_operation (enum rtx_code code, machine_mode mode,\n       }\n       if (CONST_SCALAR_INT_P (op) || CONST_DOUBLE_AS_FLOAT_P (op))\n \treturn gen_const_vec_duplicate (mode, op);\n-      unsigned int n_elts;\n       if (GET_CODE (op) == CONST_VECTOR\n-\t  && GET_MODE_NUNITS (mode).is_constant (&n_elts))\n-\t{\n-\t  /* This must be constant if we're duplicating it to a constant\n-\t     number of elements.  */\n-\t  unsigned int in_n_elts = CONST_VECTOR_NUNITS (op).to_constant ();\n-\t  gcc_assert (in_n_elts < n_elts);\n-\t  gcc_assert ((n_elts % in_n_elts) == 0);\n-\t  rtvec v = rtvec_alloc (n_elts);\n-\t  for (unsigned i = 0; i < n_elts; i++)\n-\t    RTVEC_ELT (v, i) = CONST_VECTOR_ELT (op, i % in_n_elts);\n-\t  return gen_rtx_CONST_VECTOR (mode, v);\n+\t  && (CONST_VECTOR_DUPLICATE_P (op)\n+\t      || CONST_VECTOR_NUNITS (op).is_constant ()))\n+\t{\n+\t  unsigned int npatterns = (CONST_VECTOR_DUPLICATE_P (op)\n+\t\t\t\t    ? CONST_VECTOR_NPATTERNS (op)\n+\t\t\t\t    : CONST_VECTOR_NUNITS (op).to_constant ());\n+\t  gcc_assert (multiple_p (GET_MODE_NUNITS (mode), npatterns));\n+\t  rtx_vector_builder builder (mode, npatterns, 1);\n+\t  for (unsigned i = 0; i < npatterns; i++)\n+\t    builder.quick_push (CONST_VECTOR_ELT (op, i));\n+\t  return builder.build ();\n \t}\n     }\n \n-  if (VECTOR_MODE_P (mode) && GET_CODE (op) == CONST_VECTOR)\n+  if (VECTOR_MODE_P (mode)\n+      && GET_CODE (op) == CONST_VECTOR\n+      && known_eq (GET_MODE_NUNITS (mode), CONST_VECTOR_NUNITS (op)))\n     {\n       gcc_assert (GET_MODE (op) == op_mode);\n \n@@ -6977,6 +6978,18 @@ test_vector_ops_duplicate (machine_mode mode, rtx scalar_reg)\n       && mode_for_vector (inner_mode, 2).exists (&narrower_mode)\n       && VECTOR_MODE_P (narrower_mode))\n     {\n+      /* Test VEC_DUPLICATE of a vector.  */\n+      rtx_vector_builder nbuilder (narrower_mode, 2, 1);\n+      nbuilder.quick_push (const0_rtx);\n+      nbuilder.quick_push (const1_rtx);\n+      rtx_vector_builder builder (mode, 2, 1);\n+      builder.quick_push (const0_rtx);\n+      builder.quick_push (const1_rtx);\n+      ASSERT_RTX_EQ (builder.build (),\n+\t\t     simplify_unary_operation (VEC_DUPLICATE, mode,\n+\t\t\t\t\t       nbuilder.build (),\n+\t\t\t\t\t       narrower_mode));\n+\n       /* Test VEC_SELECT of a vector.  */\n       rtx vec_par\n \t= gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, const1_rtx, const0_rtx));"}]}