{"sha": "96c6931df4d8809e4adf59a64977ac3889f6560b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZjNjkzMWRmNGQ4ODA5ZTRhZGY1OWE2NDk3N2FjMzg4OWY2NTYwYg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-04-17T01:22:51Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-04-17T01:22:51Z"}, "message": "re PR c/10175 (-Wunreachable-code doesn't work for single lines)\n\n2003-04-16  Roger Sayle  <roger@eyesopen.com>\n\n\t* c-semantics.c (find_reachable_label): New function to find a\n\tpotentially reachable label in an expression.\n\t(expand_unreachable_if_stmt): Similar to expand_if_stmt but\n\tassumes the start of the IF_STMT is unreachable (dead) code.\n\t(expand_unreachable_stmt): Similar to expand_stmt but assumes\n\tthe start of the statement list is unreachable (dead) code.\n\t(genrtl_if_stmt):  If the controlling expression of the IF\n\tis constant, use expand_unreachable_stmt for the THEN or ELSE\n\tclause as appropriate.\n\t(genrtl_switch_stmt):  Use expand_unreachable_stmt to expand\n\tthe body of a SWITCH statement.\n\t(expand_stmt): The code immediately following a \"return\",\n\t\"break\", \"continue\" or \"goto\" is unreachable.\n\t* Makefile.in (c-semantics.o): Depend upon tree-inline.h.\n\n\t* gcc.dg/Wunreachable-5.c: New test case for PR c/10175.\n\t* gcc.c-torture/execute/medce-1.c: New test case.\n\t* gcc.c-torture/execute/medce-2.c: New test case.\n\nFrom-SVN: r65715", "tree": {"sha": "44b4d881f76561d90d3775b429d23bd5cec3c3fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44b4d881f76561d90d3775b429d23bd5cec3c3fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96c6931df4d8809e4adf59a64977ac3889f6560b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96c6931df4d8809e4adf59a64977ac3889f6560b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96c6931df4d8809e4adf59a64977ac3889f6560b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96c6931df4d8809e4adf59a64977ac3889f6560b/comments", "author": null, "committer": null, "parents": [{"sha": "3568b0ef3daa7aabadde5d9124a1a85668b0bc7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3568b0ef3daa7aabadde5d9124a1a85668b0bc7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3568b0ef3daa7aabadde5d9124a1a85668b0bc7e"}], "stats": {"total": 311, "additions": 303, "deletions": 8}, "files": [{"sha": "cc4c64290b05600c956ebc8205ab9f8b6389cb95", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c6931df4d8809e4adf59a64977ac3889f6560b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c6931df4d8809e4adf59a64977ac3889f6560b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96c6931df4d8809e4adf59a64977ac3889f6560b", "patch": "@@ -1,3 +1,20 @@\n+2003-04-16  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* c-semantics.c (find_reachable_label): New function to find a\n+\tpotentially reachable label in an expression.\n+\t(expand_unreachable_if_stmt): Similar to expand_if_stmt but\n+\tassumes the start of the IF_STMT is unreachable (dead) code.\n+\t(expand_unreachable_stmt): Similar to expand_stmt but assumes\n+\tthe start of the statement list is unreachable (dead) code.\n+\t(genrtl_if_stmt):  If the controlling expression of the IF\n+\tis constant, use expand_unreachable_stmt for the THEN or ELSE\n+\tclause as appropriate.\n+\t(genrtl_switch_stmt):  Use expand_unreachable_stmt to expand\n+\tthe body of a SWITCH statement.\n+\t(expand_stmt): The code immediately following a \"return\",\n+\t\"break\", \"continue\" or \"goto\" is unreachable.\n+\t* Makefile.in (c-semantics.o): Depend upon tree-inline.h.\n+\n 2003-04-16  Richard Henderson  <rth@redhat.com>\n \n \t* rtl.h (MEM_ALIAS_SET): Update documentation."}, {"sha": "2e6347e0b5370f31fb6b5fdd16149c10c493a4e3", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c6931df4d8809e4adf59a64977ac3889f6560b/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c6931df4d8809e4adf59a64977ac3889f6560b/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=96c6931df4d8809e4adf59a64977ac3889f6560b", "patch": "@@ -1332,7 +1332,7 @@ c-format.o : c-format.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) la\n \n c-semantics.o : c-semantics.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n \t$(C_TREE_H) flags.h toplev.h output.h c-pragma.h $(RTL_H) $(GGC_H) \\\n-\t$(EXPR_H) $(PREDICT_H)\n+\t$(EXPR_H) $(PREDICT_H) tree-inline.h\n \n c-dump.o : c-dump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n \t$(C_TREE_H) tree-dump.h"}, {"sha": "2d88144f2d81a2cd06fe73381e9a3e2994fde9ca", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 187, "deletions": 7, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c6931df4d8809e4adf59a64977ac3889f6560b/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c6931df4d8809e4adf59a64977ac3889f6560b/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=96c6931df4d8809e4adf59a64977ac3889f6560b", "patch": "@@ -39,6 +39,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"output.h\"\n #include \"timevar.h\"\n #include \"predict.h\"\n+#include \"tree-inline.h\"\n \n /* If non-NULL, the address of a language-specific function for\n    expanding statements.  */\n@@ -51,6 +52,11 @@ void (*lang_expand_stmt) PARAMS ((tree));\n    variables and labels do not require any RTL generation.  */\n void (*lang_expand_decl_stmt) PARAMS ((tree));\n \n+static tree find_reachable_label_1\tPARAMS ((tree *, int *, void *));\n+static tree find_reachable_label\tPARAMS ((tree));\n+static bool expand_unreachable_if_stmt\tPARAMS ((tree));\n+static bool expand_unreachable_stmt\tPARAMS ((tree, int));\n+\n /* Create an empty statement tree rooted at T.  */\n \n void\n@@ -409,11 +415,20 @@ genrtl_if_stmt (t)\n   emit_line_note (input_filename, lineno);\n   expand_start_cond (cond, 0);\n   if (THEN_CLAUSE (t))\n-    expand_stmt (THEN_CLAUSE (t));\n+    {\n+      if (cond && integer_zerop (cond))\n+\texpand_unreachable_stmt (THEN_CLAUSE (t), warn_notreached);\n+      else\n+\texpand_stmt (THEN_CLAUSE (t));\n+    }\n+\n   if (ELSE_CLAUSE (t))\n     {\n       expand_start_else ();\n-      expand_stmt (ELSE_CLAUSE (t));\n+      if (cond && integer_nonzerop (cond))\n+\texpand_unreachable_stmt (ELSE_CLAUSE (t), warn_notreached);\n+      else\n+\texpand_stmt (ELSE_CLAUSE (t));\n     }\n   expand_end_cond ();\n }\n@@ -672,7 +687,7 @@ genrtl_switch_stmt (t)\n \n   emit_line_note (input_filename, lineno);\n   expand_start_case (1, cond, TREE_TYPE (cond), \"switch statement\");\n-  expand_stmt (SWITCH_BODY (t));\n+  expand_unreachable_stmt (SWITCH_BODY (t), warn_notreached);\n   expand_end_case_type (cond, SWITCH_TYPE (t));\n }\n \n@@ -808,7 +823,8 @@ expand_stmt (t)\n \n \tcase RETURN_STMT:\n \t  genrtl_return_stmt (t);\n-\t  break;\n+\t  expand_unreachable_stmt (TREE_CHAIN (t), warn_notreached);\n+\t  return;\n \n \tcase EXPR_STMT:\n \t  genrtl_expr_stmt_value (EXPR_STMT_EXPR (t), TREE_ADDRESSABLE (t),\n@@ -843,11 +859,13 @@ expand_stmt (t)\n \n \tcase BREAK_STMT:\n \t  genrtl_break_stmt ();\n-\t  break;\n+\t  expand_unreachable_stmt (TREE_CHAIN (t), warn_notreached);\n+\t  return;\n \n \tcase CONTINUE_STMT:\n \t  genrtl_continue_stmt ();\n-\t  break;\n+\t  expand_unreachable_stmt (TREE_CHAIN (t), warn_notreached);\n+\t  return;\n \n \tcase SWITCH_STMT:\n \t  genrtl_switch_stmt (t);\n@@ -872,7 +890,8 @@ expand_stmt (t)\n \t      NOTE_PREDICTION (note) = NOTE_PREDICT (PRED_GOTO, NOT_TAKEN);\n \t    }\n \t  genrtl_goto_stmt (GOTO_DESTINATION (t));\n-\t  break;\n+\t  expand_unreachable_stmt (TREE_CHAIN (t), warn_notreached);\n+\t  return;\n \n \tcase ASM_STMT:\n \t  genrtl_asm_stmt (ASM_CV_QUAL (t), ASM_STRING (t),\n@@ -904,3 +923,164 @@ expand_stmt (t)\n       t = TREE_CHAIN (t);\n     }\n }\n+\f\n+/* If *TP is a potentially reachable label, return nonzero.  */\n+\n+static tree\n+find_reachable_label_1 (tp, walk_subtrees, data)\n+     tree *tp;\n+     int *walk_subtrees ATTRIBUTE_UNUSED;\n+     void *data ATTRIBUTE_UNUSED;\n+{\n+  switch (TREE_CODE (*tp))\n+    {\n+    case LABEL_STMT:\n+    case CASE_LABEL:\n+      return *tp;\n+\n+    default:\n+      break;\n+    }\n+  return NULL_TREE;\n+}\n+\n+/* Determine whether expression EXP contains a potentially\n+   reachable label.  */\n+static tree\n+find_reachable_label (exp)\n+     tree exp;\n+{\n+  int line = lineno;\n+  const char *file = input_filename;\n+  tree ret = walk_tree (&exp, find_reachable_label_1, NULL, NULL);\n+  input_filename = file;\n+  lineno = line;\n+  return ret;\n+}\n+\n+/* Expand an unreachable if statement, T.  This function returns\n+   true if the IF_STMT contains a potentially reachable code_label.  */\n+static bool\n+expand_unreachable_if_stmt (t)\n+     tree t;\n+{\n+  if (find_reachable_label (IF_COND (t)) != NULL_TREE)\n+    {\n+      genrtl_if_stmt (t);\n+      return true;\n+    }\n+\n+  if (THEN_CLAUSE (t) && ELSE_CLAUSE (t))\n+    {\n+      if (expand_unreachable_stmt (THEN_CLAUSE (t), 0))\n+\t{\n+\t  rtx label;\n+\t  label = gen_label_rtx ();\n+\t  emit_jump (label);\n+\t  expand_unreachable_stmt (ELSE_CLAUSE (t), 0);\n+\t  emit_label (label);\n+\t  return true;\n+\t}\n+      else\n+\treturn expand_unreachable_stmt (ELSE_CLAUSE (t), 0);\n+    }\n+  else if (THEN_CLAUSE (t))\n+    return expand_unreachable_stmt (THEN_CLAUSE (t), 0);\n+  else if (ELSE_CLAUSE (t))\n+    return expand_unreachable_stmt (ELSE_CLAUSE (t), 0);\n+\n+  return false;\n+}\n+\n+/* Expand an unreachable statement list.  This function skips all\n+   statements preceding the first potentially reachable label and\n+   then expands the statements normally with expand_stmt.  This\n+   function returns true if such a reachable label was found.  */\n+static bool\n+expand_unreachable_stmt (t, warn)\n+     tree t;\n+     int warn;\n+{\n+  int saved;\n+\n+  while (t && t != error_mark_node)\n+    {\n+      if (warn)\n+\tswitch (TREE_CODE (t))\n+\t  {\n+\t  case BREAK_STMT:\n+\t  case CONTINUE_STMT:\n+\t  case EXPR_STMT:\n+\t  case GOTO_STMT:\n+\t  case IF_STMT:\n+\t  case RETURN_STMT:\n+\t    if (!STMT_LINENO_FOR_FN_P (t))\n+\t      lineno = STMT_LINENO (t);\n+\t    warning(\"will never be executed\");\n+\t    warn = false;\n+\t    break;\n+\n+\t  default:\n+\t    break;\n+\t  }\n+\n+      switch (TREE_CODE (t))\n+\t{\n+\tcase GOTO_STMT:\n+\tcase CONTINUE_STMT:\n+\tcase BREAK_STMT:\n+\t  break;\n+\n+\tcase FILE_STMT:\n+\t  input_filename = FILE_STMT_FILENAME (t);\n+\t  break;\n+\n+\tcase RETURN_STMT:\n+\t  if (find_reachable_label (RETURN_STMT_EXPR (t)) != NULL_TREE)\n+\t    {\n+\t      expand_stmt (t);\n+\t      return true;\n+\t    }\n+\t  break;\n+\n+\tcase EXPR_STMT:\n+\t  if (find_reachable_label (EXPR_STMT_EXPR (t)) != NULL_TREE)\n+\t    {\n+\t      expand_stmt (t);\n+\t      return true;\n+\t    }\n+\t  break;\n+\n+\tcase IF_STMT:\n+\t  if (expand_unreachable_if_stmt (t))\n+\t    {\n+\t      expand_stmt (TREE_CHAIN (t));\n+\t      return true;\n+\t    }\n+\t  break;\n+\n+\tcase COMPOUND_STMT:\n+\t  if (expand_unreachable_stmt (COMPOUND_BODY (t), warn))\n+\t    {\n+\t      expand_stmt (TREE_CHAIN (t));\n+\t      return true;\n+\t    }\n+\t  warn = false;\n+\t  break;\n+\n+\tcase SCOPE_STMT:\n+\t  saved = stmts_are_full_exprs_p ();\n+\t  prep_stmt (t);\n+\t  genrtl_scope_stmt (t);\n+\t  current_stmt_tree ()->stmts_are_full_exprs_p = saved;\n+\t  break;\n+\n+\tdefault:\n+\t  expand_stmt (t);\n+\t  return true;\n+\t}\n+      t = TREE_CHAIN (t);\n+    }\n+  return false;\n+}\n+"}, {"sha": "6225ba27fe28173bdb50de9f966ff295b1659a60", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c6931df4d8809e4adf59a64977ac3889f6560b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c6931df4d8809e4adf59a64977ac3889f6560b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=96c6931df4d8809e4adf59a64977ac3889f6560b", "patch": "@@ -1,3 +1,9 @@\n+2003-04-16  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/Wunreachable-5.c: New test case for PR c/10175.\n+\t* gcc.c-torture/execute/medce-1.c: New test case.\n+\t* gcc.c-torture/execute/medce-2.c: New test case.\n+\n 2003-04-15  Mark Mitchell  <mark@codesourcery.com>\n \n \t* lib/prune.exp: Ignore more messages."}, {"sha": "0c0a77274f5a35026256a67f22effad1eb75af3a", "filename": "gcc/testsuite/gcc.c-torture/execute/medce-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c6931df4d8809e4adf59a64977ac3889f6560b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmedce-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c6931df4d8809e4adf59a64977ac3889f6560b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmedce-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmedce-1.c?ref=96c6931df4d8809e4adf59a64977ac3889f6560b", "patch": "@@ -0,0 +1,33 @@\n+\n+extern void abort (void);\n+extern void link_error (void);\n+\n+static int ok = 0;\n+\n+void bar (void)\n+{\n+  ok = 1;\n+}\n+\n+void foo(int x)\n+{\n+  switch (x)\n+  {\n+  case 0:\n+    if (0)\n+    {\n+      link_error();\n+  case 1:\n+      bar();\n+    }\n+  }\n+}\n+\n+int main()\n+{\n+  foo (1);\n+  if (!ok)\n+    abort ();\n+  return 0;\n+}\n+"}, {"sha": "cd83ead28674a44b27dd7ca08159ddb208766be3", "filename": "gcc/testsuite/gcc.c-torture/execute/medce-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c6931df4d8809e4adf59a64977ac3889f6560b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmedce-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c6931df4d8809e4adf59a64977ac3889f6560b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmedce-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmedce-2.c?ref=96c6931df4d8809e4adf59a64977ac3889f6560b", "patch": "@@ -0,0 +1,42 @@\n+\n+extern void abort ();\n+\n+static int ok = 0;\n+\n+int bar(void)\n+{\n+  ok |= 1;\n+  return 1;\n+}\n+\n+void bat(void)\n+{\n+  ok |= 2;\n+}\n+\n+void baz(void)\n+{\n+  ok |= 4;\n+}\n+\n+void foo()\n+{\n+  goto lab;\n+\n+  if (0)\n+  {\n+    if (({lab: bar();}))\n+      bat ();\n+    else\n+      baz ();\n+  }\n+}\n+\n+int main()\n+{\n+  foo();\n+  if (ok != 3)\n+    abort ();\n+  return 0;\n+}\n+"}, {"sha": "11dc3204da1178b4c93b911d085112abc9c94ab5", "filename": "gcc/testsuite/gcc.dg/Wunreachable-5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c6931df4d8809e4adf59a64977ac3889f6560b/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c6931df4d8809e4adf59a64977ac3889f6560b/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-5.c?ref=96c6931df4d8809e4adf59a64977ac3889f6560b", "patch": "@@ -0,0 +1,17 @@\n+/* PR c/10175 */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Wunreachable-code\" } */\n+\n+int value;\n+\n+int main(void)\n+{\n+    if (0)\n+        value = 0;  /* { dg-warning \"will never be executed\" \"\" } */\n+    else\n+        value = 1;\n+\n+    return 0;\n+}\n+"}]}