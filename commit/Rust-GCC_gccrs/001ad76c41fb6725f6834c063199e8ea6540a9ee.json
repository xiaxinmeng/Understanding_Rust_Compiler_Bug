{"sha": "001ad76c41fb6725f6834c063199e8ea6540a9ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAxYWQ3NmM0MWZiNjcyNWY2ODM0YzA2MzE5OWU4ZWE2NTQwYTllZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2002-03-18T13:38:00Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-03-18T13:38:00Z"}, "message": "re PR c++/4377 (more errors with multiple non-type template parameters)\n\n        PR c++/4377\n        * mangle.c (write_expression): Strip NOP_EXPRs sooner.  Also strip\n        NON_LVALUE_EXPRs.\n\nFrom-SVN: r50967", "tree": {"sha": "2bd991137adb35d42fadc965e98075d6924e3786", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bd991137adb35d42fadc965e98075d6924e3786"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/001ad76c41fb6725f6834c063199e8ea6540a9ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/001ad76c41fb6725f6834c063199e8ea6540a9ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/001ad76c41fb6725f6834c063199e8ea6540a9ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/001ad76c41fb6725f6834c063199e8ea6540a9ee/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed2fa43249ffb8c69499cc8bdcadb611ccf9762a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed2fa43249ffb8c69499cc8bdcadb611ccf9762a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed2fa43249ffb8c69499cc8bdcadb611ccf9762a"}], "stats": {"total": 74, "additions": 64, "deletions": 10}, "files": [{"sha": "94682bcf31735bf99c33ce3f507d9e4611c31376", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001ad76c41fb6725f6834c063199e8ea6540a9ee/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001ad76c41fb6725f6834c063199e8ea6540a9ee/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=001ad76c41fb6725f6834c063199e8ea6540a9ee", "patch": "@@ -1,6 +1,10 @@\n 2002-03-18  Jason Merrill  <jason@redhat.com>\n \n-\tPR c++/4003 - template/friend.C\n+\tPR c++/4377\n+\t* mangle.c (write_expression): Strip NOP_EXPRs sooner.  Also strip\n+\tNON_LVALUE_EXPRs.\n+\n+\tPR c++/4003\n \t* pt.c (tsubst_friend_function): Use decl_namespace_context.\n \n \tPR c++/3948 -- C++ ABI change, followup to 2001-12-18 patch."}, {"sha": "a71cc006525709850010cbcf419b3bc43b938e9c", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001ad76c41fb6725f6834c063199e8ea6540a9ee/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001ad76c41fb6725f6834c063199e8ea6540a9ee/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=001ad76c41fb6725f6834c063199e8ea6540a9ee", "patch": "@@ -1788,6 +1788,16 @@ write_expression (expr)\n       code = TREE_CODE (expr);\n     }\n \n+  /* Skip NOP_EXPRs.  They can occur when (say) a pointer argument\n+     is converted (via qualification conversions) to another\n+     type.  */\n+  while (TREE_CODE (expr) == NOP_EXPR\n+\t || TREE_CODE (expr) == NON_LVALUE_EXPR)\n+    {\n+      expr = TREE_OPERAND (expr, 0);\n+      code = TREE_CODE (expr);\n+    }\n+\n   /* Handle template parameters. */\n   if (code == TEMPLATE_TYPE_PARM \n       || code == TEMPLATE_TEMPLATE_PARM\n@@ -1807,15 +1817,6 @@ write_expression (expr)\n     {\n       int i;\n \n-      /* Skip NOP_EXPRs.  They can occur when (say) a pointer argument\n-\t is converted (via qualification conversions) to another\n-\t type.  */\n-      while (TREE_CODE (expr) == NOP_EXPR)\n-\t{\n-\t  expr = TREE_OPERAND (expr, 0);\n-\t  code = TREE_CODE (expr);\n-\t}\n-\n       /* When we bind a variable or function to a non-type template\n \t argument with reference type, we create an ADDR_EXPR to show\n \t the fact that the entity's address has been taken.  But, we"}, {"sha": "70e81d362bafe1a7ccbfffa76e3228bbc52dcb7b", "filename": "gcc/testsuite/g++.dg/template/non-type1.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001ad76c41fb6725f6834c063199e8ea6540a9ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-type1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001ad76c41fb6725f6834c063199e8ea6540a9ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-type1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-type1.C?ref=001ad76c41fb6725f6834c063199e8ea6540a9ee", "patch": "@@ -0,0 +1,49 @@\n+// PR c++/4377\n+\n+template < int I1, int I2 >\n+class unit\n+{\n+public:\n+  typedef unit<I1,I2> my_type;\n+\n+  unit() {}\n+  unit( const unit<I1,I2>& ) {}\n+\n+   template< int Q1, int Q2 >\n+   unit< I1 + Q1, I2 + Q2 > operator * ( const unit< Q1, Q2 >& rhs ) const {\n+     return unit< I1 + Q1, I2 + Q2 >();\n+   }\n+ \n+  template< int Q1, int Q2 >\n+  unit< I1 - Q1, I2 - Q2 > operator / ( const unit< Q1, Q2 >& rhs ) const {\n+    return unit< I1 - Q1, I2 - Q2 >();\n+  }\n+};\n+\n+// specialization added to first test\n+//\n+template <>\n+class unit<0,0> {\n+public:\n+  typedef unit<0,0> my_type;\n+\n+  unit() {}\n+  \n+   friend unit<0,0> operator*( const unit<0,0>& lhs, const unit<0,0>& rhs ) {\n+     return unit<0,0>();\n+   }\n+   friend unit<0,0> operator/( const unit<0,0>& lhs, const unit<0,0>& rhs ) {\n+     return unit<0,0>();\n+   }\n+\n+};\n+\n+\n+int main()\n+{\n+  const unit<1,0> u1;\n+  const unit<2,0> u2;\n+ \n+  unit<-1,0> u3( u1 / u2 );\n+  unit< 3,0> u4( u1 * u2 );\n+}"}]}