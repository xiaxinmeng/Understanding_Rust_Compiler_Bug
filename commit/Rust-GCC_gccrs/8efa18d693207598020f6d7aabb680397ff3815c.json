{"sha": "8efa18d693207598020f6d7aabb680397ff3815c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVmYTE4ZDY5MzIwNzU5ODAyMGY2ZDdhYWJiNjgwMzk3ZmYzODE1Yw==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2018-10-31T11:27:19Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2018-10-31T11:27:19Z"}, "message": "[ARC] Cleanup TLS implementation and add a number of tests.\n\ngcc/\nxxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc.c (arc_get_tp): Remove function.\n\t(arc_emit_call_tls_get_addr): Likewise.\n\t(arc_call_tls_get_addr): New function.\n\t(arc_legitimize_tls_address): Make use of arc_call_tls_get_addr.\n\t* config/arc/arc.md (tls_load_tp_soft): Remove.\n\t(tls_gd_get_addr): Likewise.\n\ntestsuite/\nxxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* gcc.target/arc/tls-gd.c: New file.\n\t* gcc.target/arc/tls-ie.c: Likewise.\n\t* gcc.target/arc/tls-ld.c: Likewise.\n\t* gcc.target/arc/tls-le.c: Likewise.\n\t* gcc.target/arc/tls-1.c: Update test.\n\nFrom-SVN: r265674", "tree": {"sha": "d14cf258e4d02ce01bf66209ee32c96aa0256a6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d14cf258e4d02ce01bf66209ee32c96aa0256a6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8efa18d693207598020f6d7aabb680397ff3815c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8efa18d693207598020f6d7aabb680397ff3815c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8efa18d693207598020f6d7aabb680397ff3815c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8efa18d693207598020f6d7aabb680397ff3815c/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "088371bfc578852981949bdd0e1643fcb73c7279", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/088371bfc578852981949bdd0e1643fcb73c7279", "html_url": "https://github.com/Rust-GCC/gccrs/commit/088371bfc578852981949bdd0e1643fcb73c7279"}], "stats": {"total": 220, "additions": 135, "deletions": 85}, "files": [{"sha": "ca31cd59da486371ab46c7ec4986d00259e371c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efa18d693207598020f6d7aabb680397ff3815c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efa18d693207598020f6d7aabb680397ff3815c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8efa18d693207598020f6d7aabb680397ff3815c", "patch": "@@ -1,3 +1,12 @@\n+2018-10-31  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.c (arc_get_tp): Remove function.\n+\t(arc_emit_call_tls_get_addr): Likewise.\n+\t(arc_call_tls_get_addr): New function.\n+\t(arc_legitimize_tls_address): Make use of arc_call_tls_get_addr.\n+\t* config/arc/arc.md (tls_load_tp_soft): Remove.\n+\t(tls_gd_get_addr): Likewise.\n+\n 2018-10-31  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.md (mulsi3): Remove call to mulsi_600_lib."}, {"sha": "7cd0a70536c224dabb298acf4c17fc017fe1988f", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 38, "deletions": 57, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efa18d693207598020f6d7aabb680397ff3815c/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efa18d693207598020f6d7aabb680397ff3815c/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=8efa18d693207598020f6d7aabb680397ff3815c", "patch": "@@ -5561,51 +5561,32 @@ arc_raw_symbolic_reference_mentioned_p (rtx op, bool skip_local)\n   return false;\n }\n \n-/* Get the thread pointer.  */\n+/* The __tls_get_attr symbol.  */\n+static GTY(()) rtx arc_tls_symbol;\n \n-static rtx\n-arc_get_tp (void)\n-{\n-   /* If arc_tp_regno has been set, we can use that hard register\n-      directly as a base register.  */\n-  if (arc_tp_regno != -1)\n-    return gen_rtx_REG (Pmode, arc_tp_regno);\n-\n-  /* Otherwise, call __read_tp.  Copy the result to a pseudo to avoid\n-     conflicts with function arguments / results.  */\n-  rtx reg = gen_reg_rtx (Pmode);\n-  emit_insn (gen_tls_load_tp_soft ());\n-  emit_move_insn (reg, gen_rtx_REG (Pmode, R0_REG));\n-  return reg;\n-}\n-\n-/* Helper to be used by TLS Global dynamic model.  */\n+/* Emit a call to __tls_get_addr.  TI is the argument to this function.\n+   RET is an RTX for the return value location.  The entire insn sequence\n+   is returned.  */\n \n static rtx\n-arc_emit_call_tls_get_addr (rtx sym, int reloc, rtx eqv)\n+arc_call_tls_get_addr (rtx ti)\n {\n-  rtx r0 = gen_rtx_REG (Pmode, R0_REG);\n-  rtx call_fusage = NULL_RTX;\n-\n-  start_sequence ();\n-\n-  rtx x = arc_unspec_offset (sym, reloc);\n-  emit_move_insn (r0, x);\n-  use_reg (&call_fusage, r0);\n+  rtx arg = gen_rtx_REG (Pmode, R0_REG);\n+  rtx ret = gen_rtx_REG (Pmode, R0_REG);\n+  rtx fn;\n+  rtx_insn *insn;\n \n-  gcc_assert (reloc == UNSPEC_TLS_GD);\n-  rtx call_insn = emit_call_insn (gen_tls_gd_get_addr (sym));\n-  /* Should we set RTL_CONST_CALL_P?  We read memory, but not in a\n-     way that the application should care.  */\n-  RTL_PURE_CALL_P (call_insn) = 1;\n-  add_function_usage_to (call_insn, call_fusage);\n+  if (!arc_tls_symbol)\n+    arc_tls_symbol = init_one_libfunc (\"__tls_get_addr\");\n \n-  rtx_insn *insns = get_insns ();\n-  end_sequence ();\n+  emit_move_insn (arg, ti);\n+  fn = gen_rtx_MEM (SImode, arc_tls_symbol);\n+  insn = emit_call_insn (gen_call_value (ret, fn, const0_rtx));\n+  RTL_CONST_CALL_P (insn) = 1;\n+  use_reg (&CALL_INSN_FUNCTION_USAGE (insn), ret);\n+  use_reg (&CALL_INSN_FUNCTION_USAGE (insn), arg);\n \n-  rtx dest = gen_reg_rtx (Pmode);\n-  emit_libcall_block (insns, dest, r0, eqv);\n-  return dest;\n+  return ret;\n }\n \n #define DTPOFF_ZERO_SYM \".tdata\"\n@@ -5616,48 +5597,48 @@ arc_emit_call_tls_get_addr (rtx sym, int reloc, rtx eqv)\n static rtx\n arc_legitimize_tls_address (rtx addr, enum tls_model model)\n {\n+  rtx tmp;\n+\n   if (!flag_pic && model == TLS_MODEL_LOCAL_DYNAMIC)\n     model = TLS_MODEL_LOCAL_EXEC;\n \n+\n+  /* The TP pointer needs to be set.  */\n+  gcc_assert (arc_tp_regno != -1);\n+\n   switch (model)\n     {\n+    case TLS_MODEL_GLOBAL_DYNAMIC:\n+      tmp = gen_reg_rtx (Pmode);\n+      emit_move_insn (tmp, arc_unspec_offset (addr, UNSPEC_TLS_GD));\n+      return arc_call_tls_get_addr (tmp);\n+\n     case TLS_MODEL_LOCAL_DYNAMIC:\n       rtx base;\n       tree decl;\n       const char *base_name;\n-      rtvec v;\n \n       decl = SYMBOL_REF_DECL (addr);\n       base_name = DTPOFF_ZERO_SYM;\n       if (decl && bss_initializer_p (decl))\n \tbase_name = \".tbss\";\n \n       base = gen_rtx_SYMBOL_REF (Pmode, base_name);\n-      if (strcmp (base_name, DTPOFF_ZERO_SYM) == 0)\n-\t{\n-\t  if (!flag_pic)\n-\t    goto local_exec;\n-\t  v = gen_rtvec (1, addr);\n-\t}\n-      else\n-\tv = gen_rtvec (2, addr, base);\n-      addr = gen_rtx_UNSPEC (Pmode, v, UNSPEC_TLS_OFF);\n-      addr = gen_rtx_CONST (Pmode, addr);\n-      base = arc_legitimize_tls_address (base, TLS_MODEL_GLOBAL_DYNAMIC);\n-      return gen_rtx_PLUS (Pmode, force_reg (Pmode, base), addr);\n-\n-    case TLS_MODEL_GLOBAL_DYNAMIC:\n-      return arc_emit_call_tls_get_addr (addr, UNSPEC_TLS_GD, addr);\n+      tmp = gen_reg_rtx (Pmode);\n+      emit_move_insn (tmp, arc_unspec_offset (base, UNSPEC_TLS_GD));\n+      base = arc_call_tls_get_addr (tmp);\n+      return gen_rtx_PLUS (Pmode, force_reg (Pmode, base),\n+\t\t\t   arc_unspec_offset (addr, UNSPEC_TLS_OFF));\n \n     case TLS_MODEL_INITIAL_EXEC:\n       addr = arc_unspec_offset (addr, UNSPEC_TLS_IE);\n       addr = copy_to_mode_reg (Pmode, gen_const_mem (Pmode, addr));\n-      return gen_rtx_PLUS (Pmode, arc_get_tp (), addr);\n+      return gen_rtx_PLUS (Pmode, gen_rtx_REG (Pmode, arc_tp_regno), addr);\n \n     case TLS_MODEL_LOCAL_EXEC:\n-    local_exec:\n       addr = arc_unspec_offset (addr, UNSPEC_TLS_OFF);\n-      return gen_rtx_PLUS (Pmode, arc_get_tp (), addr);\n+      return gen_rtx_PLUS (Pmode, gen_rtx_REG (Pmode, arc_tp_regno), addr);\n+\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "f77b04f5460c0a835610f852635bc1bfccec91ea", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efa18d693207598020f6d7aabb680397ff3815c/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efa18d693207598020f6d7aabb680397ff3815c/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=8efa18d693207598020f6d7aabb680397ff3815c", "patch": "@@ -5310,27 +5310,6 @@ archs4x, archs4xd, archs4xd_slow\"\n   [(set_attr \"type\" \"call\")\n    (set_attr \"is_SIBCALL\" \"yes\")])\n \n-(define_insn \"tls_load_tp_soft\"\n-  [(set (reg:SI R0_REG) (unspec:SI [(const_int 0)] UNSPEC_TLS_OFF))\n-   (clobber (reg:SI RETURN_ADDR_REGNUM))]\n-  \"\"\n-  \"*return arc_output_libcall (\\\"__read_tp\\\");\"\n-  [(set_attr \"is_sfunc\" \"yes\")\n-   (set_attr \"predicable\" \"yes\")])\n-\n-(define_insn \"tls_gd_get_addr\"\n-  [(set (reg:SI R0_REG)\n-\t(call:SI (mem:SI (unspec:SI [(match_operand:SI 0\n-\t\t\t\t      \"symbolic_operand\" \"X,X\")]\n-\t\t\t  UNSPEC_TLS_GD))\n-\t\t (const_int 0)))\n-   (clobber (reg:SI RETURN_ADDR_REGNUM))]\n-  \"\"\n-  \".tls_gd_ld %0`bl%* __tls_get_addr@plt\"\n-  [(set_attr \"type\" \"call\")\n-   ; With TARGET_MEDIUM_CALLS, plt calls are not predicable.\n-   (set_attr \"predicable\" \"no\")])\n-\n ;; For thread pointer builtins\n (define_expand \"get_thread_pointersi\"\n   [(set (match_operand:SI 0 \"register_operand\") (match_dup 1))]"}, {"sha": "fe9cc5b6ff8321beff9433de09e3b0ab3c7d4d3e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efa18d693207598020f6d7aabb680397ff3815c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efa18d693207598020f6d7aabb680397ff3815c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8efa18d693207598020f6d7aabb680397ff3815c", "patch": "@@ -1,3 +1,11 @@\n+2018-10-31  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* gcc.target/arc/tls-gd.c: New file.\n+\t* gcc.target/arc/tls-ie.c: Likewise.\n+\t* gcc.target/arc/tls-ld.c: Likewise.\n+\t* gcc.target/arc/tls-le.c: Likewise.\n+\t* gcc.target/arc/tls-1.c: Update test.\n+\n 2018-10-31  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* gcc.target/arc/mulsi3_highpart-2.c: Update test."}, {"sha": "09f69fa53d888d751b1ea596051fddcb57232b22", "filename": "gcc/testsuite/gcc.target/arc/tls-1.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efa18d693207598020f6d7aabb680397ff3815c/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftls-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efa18d693207598020f6d7aabb680397ff3815c/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftls-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftls-1.c?ref=8efa18d693207598020f6d7aabb680397ff3815c", "patch": "@@ -1,26 +1,31 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target tls } */\n+/* { dg-skip-if \"\" { arc*-*-elf* } } */\n /* { dg-options \"-O3 -std=gnu99\" } */\n \n /* Check if addressing the `pos` member of struct is done via tls\n    mechanism.  */\n \n-struct callchain_cursor {\n+struct callchain_cursor\n+{\n   int last;\n   long long pos;\n } __thread a;\n-void fn1(struct callchain_cursor *p1)\n+\n+void fn1 (struct callchain_cursor *p1)\n {\n   p1->pos++;\n }\n \n extern void fn3 (void);\n \n-void fn2(void) {\n+void fn2 (void)\n+{\n   struct callchain_cursor *b = &a;\n-  while (1) {\n-    fn3();\n-    fn1(b);\n-  }\n+  while (1)\n+    {\n+      fn3 ();\n+      fn1 (b);\n+    }\n }\n /* { dg-final { scan-assembler \"r25,@a@tpoff\" } } */"}, {"sha": "aa1b5429b08e977249c435e07f7ba83f4efb611a", "filename": "gcc/testsuite/gcc.target/arc/tls-gd.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efa18d693207598020f6d7aabb680397ff3815c/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftls-gd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efa18d693207598020f6d7aabb680397ff3815c/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftls-gd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftls-gd.c?ref=8efa18d693207598020f6d7aabb680397ff3815c", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-options \"-O2 -fpic -ftls-model=global-dynamic\" } */\n+/* { dg-require-effective-target tls } */\n+/* { dg-skip-if \"\" { arc*-*-elf* } } */\n+\n+/* Check if tls global dynamic is correctly generated.  */\n+\n+extern __thread int e2;\n+\n+int *ae2 (void)\n+{\n+  return &e2;\n+}\n+\n+/* { dg-final { scan-assembler \"add r0,pcl,@e2@tlsgd\" } } */\n+/* { dg-final { scan-assembler \"bl @__tls_get_addr@plt\" } } */"}, {"sha": "0c981cfbf67cedb517c258cfbd56c22835f96185", "filename": "gcc/testsuite/gcc.target/arc/tls-ie.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efa18d693207598020f6d7aabb680397ff3815c/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftls-ie.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efa18d693207598020f6d7aabb680397ff3815c/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftls-ie.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftls-ie.c?ref=8efa18d693207598020f6d7aabb680397ff3815c", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-options \"-O2 -fpic -ftls-model=initial-exec\" } */\n+/* { dg-require-effective-target tls } */\n+/* { dg-skip-if \"\" { arc*-*-elf* } } */\n+\n+/* Check if tls initial execution is correctly generated.  */\n+\n+extern __thread int e2;\n+\n+int *ae2 (void)\n+{\n+  return &e2;\n+}\n+\n+/* { dg-final { scan-assembler \"ld r0,\\\\\\[pcl,@e2@tlsie\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"add_s r0,r0,r25\" } } */"}, {"sha": "351c3f02abd3328e86b2ac3115af4c7ffe40da18", "filename": "gcc/testsuite/gcc.target/arc/tls-ld.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efa18d693207598020f6d7aabb680397ff3815c/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftls-ld.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efa18d693207598020f6d7aabb680397ff3815c/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftls-ld.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftls-ld.c?ref=8efa18d693207598020f6d7aabb680397ff3815c", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-options \"-O2 -fpic -ftls-model=local-dynamic\" } */\n+/* { dg-require-effective-target tls } */\n+/* { dg-skip-if \"\" { arc*-*-elf* } } */\n+\n+/* Check if tls local dynamic is correctly generated.  */\n+\n+extern __thread int e2;\n+\n+int *ae2 (void)\n+{\n+  return &e2;\n+}\n+\n+/* { dg-final { scan-assembler \"add r0,pcl,@.tbss@tlsgd\" } } */\n+/* { dg-final { scan-assembler \"bl @__tls_get_addr@plt\" } } */\n+/* { dg-final { scan-assembler \"add_s r0,r0,@e2@dtpoff\" } } */"}, {"sha": "ae3089b50707d725581d85978cd7beb4d002e58d", "filename": "gcc/testsuite/gcc.target/arc/tls-le.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efa18d693207598020f6d7aabb680397ff3815c/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftls-le.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efa18d693207598020f6d7aabb680397ff3815c/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftls-le.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftls-le.c?ref=8efa18d693207598020f6d7aabb680397ff3815c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-options \"-O2 -fpic -ftls-model=local-exec\" } */\n+/* { dg-require-effective-target tls } */\n+/* { dg-skip-if \"\" { arc*-*-elf* } } */\n+\n+/* Check if tls local execution is correctly generated.  */\n+\n+extern __thread int e2;\n+\n+int *ae2 (void)\n+{\n+  return &e2;\n+}\n+\n+/* { dg-final { scan-assembler \"add r0,r25,@e2@tpoff\" } } */"}]}