{"sha": "aaaed752284e25ca392fea2ee5ca7c9bc988fe88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFhZWQ3NTIyODRlMjVjYTM5MmZlYTJlZTVjYTdjOWJjOTg4ZmU4OA==", "commit": {"author": {"name": "David S. Miller", "email": "davem@redhat.com", "date": "2002-05-04T00:31:28Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2002-05-04T00:31:28Z"}, "message": "Delete cycle display scheduling hook.\n\n2002-05-03  David S. Miller  <davem@redhat.com>\n\n\tDelete cycle display scheduling hook.\n\t* config/ia64/ia64.c (ia64_cycle_display,\n\tTARGET_SCHED_CYCLE_DISPLAY, ia64_emit_insn_before): Delete.\n\t(ia64_sched_reorder2): Don't check for CODE_FOR_cycle_display\n\tand use emit_insn_before instead of ia64_emit_insn_before.\n\t* config/ia64/ia64.md (unspec usage): Delete cycle display.\n\t(cycle_display): Delete insn pattern.\n\t* config/sparc/sparc.md (unspec usage): Delete cycle display.\n\t(cycle_display): Delete insn pattern.\n\t* config/sparc/sparc.c (sparc_cycle_display,\n\tTARGET_SCHED_CYCLE_DISPLAY): Delete.\n\t* doc/md.texi (cycle_display): Don't mention.\n\t* doc/tm.texi (TARGET_SCHED_CYCLE_DISPLAY): Likewise.\n\nFrom-SVN: r53134", "tree": {"sha": "c6876bdbda3a347487a3f076c368a3c4bbc85f77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6876bdbda3a347487a3f076c368a3c4bbc85f77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aaaed752284e25ca392fea2ee5ca7c9bc988fe88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaaed752284e25ca392fea2ee5ca7c9bc988fe88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaaed752284e25ca392fea2ee5ca7c9bc988fe88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaaed752284e25ca392fea2ee5ca7c9bc988fe88/comments", "author": null, "committer": null, "parents": [{"sha": "b37c26149f78529a896c054c879f880d7a80b6ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b37c26149f78529a896c054c879f880d7a80b6ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b37c26149f78529a896c054c879f880d7a80b6ef"}], "stats": {"total": 104, "additions": 20, "deletions": 84}, "files": [{"sha": "33cb2cc1e5e9553f8e6502c7dd72e36fc6a49611", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaaed752284e25ca392fea2ee5ca7c9bc988fe88/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaaed752284e25ca392fea2ee5ca7c9bc988fe88/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aaaed752284e25ca392fea2ee5ca7c9bc988fe88", "patch": "@@ -1,3 +1,19 @@\n+2002-05-03  David S. Miller  <davem@redhat.com>\n+\n+\tDelete cycle display scheduling hook.\n+\t* config/ia64/ia64.c (ia64_cycle_display,\n+\tTARGET_SCHED_CYCLE_DISPLAY, ia64_emit_insn_before): Delete.\n+\t(ia64_sched_reorder2): Don't check for CODE_FOR_cycle_display\n+\tand use emit_insn_before instead of ia64_emit_insn_before.\n+\t* config/ia64/ia64.md (unspec usage): Delete cycle display.\n+\t(cycle_display): Delete insn pattern.\n+\t* config/sparc/sparc.md (unspec usage): Delete cycle display.\n+\t(cycle_display): Delete insn pattern.\n+\t* config/sparc/sparc.c (sparc_cycle_display,\n+\tTARGET_SCHED_CYCLE_DISPLAY): Delete.\n+\t* doc/md.texi (cycle_display): Don't mention.\n+\t* doc/tm.texi (TARGET_SCHED_CYCLE_DISPLAY): Likewise.\n+\t\n 2002-05-03  Richard Henderson  <rth@redhat.com>\n \n \t* recog.c (store_data_bypass_p, if_test_bypass_p): New."}, {"sha": "1e7c0caedae2315c57810033e4affce8b27878b3", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 4, "deletions": 35, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaaed752284e25ca392fea2ee5ca7c9bc988fe88/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaaed752284e25ca392fea2ee5ca7c9bc988fe88/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=aaaed752284e25ca392fea2ee5ca7c9bc988fe88", "patch": "@@ -152,7 +152,6 @@ static int ia64_internal_sched_reorder PARAMS ((FILE *, int, rtx *,\n static int ia64_sched_reorder PARAMS ((FILE *, int, rtx *, int *, int));\n static int ia64_sched_reorder2 PARAMS ((FILE *, int, rtx *, int *, int));\n static int ia64_variable_issue PARAMS ((FILE *, int, rtx, int));\n-static rtx ia64_cycle_display PARAMS ((int, rtx));\n \n \f\n /* Table of valid machine attributes.  */\n@@ -211,8 +210,6 @@ static const struct attribute_spec ia64_attribute_table[] =\n #define TARGET_SCHED_REORDER ia64_sched_reorder\n #undef TARGET_SCHED_REORDER2\n #define TARGET_SCHED_REORDER2 ia64_sched_reorder2\n-#undef TARGET_SCHED_CYCLE_DISPLAY\n-#define TARGET_SCHED_CYCLE_DISPLAY ia64_cycle_display\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -5162,7 +5159,6 @@ int ia64_final_schedule = 0;\n static int itanium_split_issue PARAMS ((const struct ia64_packet *, int));\n static rtx ia64_single_set PARAMS ((rtx));\n static int insn_matches_slot PARAMS ((const struct ia64_packet *, enum attr_type, int, rtx));\n-static void ia64_emit_insn_before PARAMS ((rtx, rtx));\n static void maybe_rotate PARAMS ((FILE *));\n static void finish_last_head PARAMS ((FILE *, int));\n static void rotate_one_bundle PARAMS ((FILE *));\n@@ -5485,21 +5481,6 @@ insn_matches_slot (p, itype, slot, insn)\n   return 0;\n }\n \n-/* Like emit_insn_before, but skip cycle_display insns.  This makes the\n-   assembly output a bit prettier.  */\n-\n-static void\n-ia64_emit_insn_before (insn, before)\n-     rtx insn, before;\n-{\n-  rtx prev = PREV_INSN (before);\n-  if (prev && GET_CODE (prev) == INSN\n-      && GET_CODE (PATTERN (prev)) == UNSPEC\n-      && XINT (PATTERN (prev), 1) == 23)\n-    before = prev;\n-  emit_insn_before (insn, before);\n-}\n-\n /* When rotating a bundle out of the issue window, insert a bundle selector\n    insn in front of it.  DUMP is the scheduling dump file or NULL.  START\n    is either 0 or 3, depending on whether we want to emit a bundle selector\n@@ -5531,7 +5512,7 @@ finish_last_head (dump, start)\n     fprintf (dump, \"//    Emitting template before %d: %s\\n\",\n \t     INSN_UID (insn), b->name);\n \n-  ia64_emit_insn_before (gen_bundle_selector (GEN_INT (bundle_type)), insn);\n+  emit_insn_before (gen_bundle_selector (GEN_INT (bundle_type)), insn);\n }\n \n /* We can't schedule more insns this cycle.  Fix up the scheduling state\n@@ -6391,9 +6372,8 @@ ia64_sched_reorder2 (dump, sched_verbose, ready, pn_ready, clock_var)\n \t    abort ();\n \t  insn_code = recog_memoized (stop);\n \n-\t  /* Ignore cycle displays and .pred.rel.mutex.  */\n-\t  if (insn_code == CODE_FOR_cycle_display\n-\t      || insn_code == CODE_FOR_pred_rel_mutex\n+\t  /* Ignore .pred.rel.mutex.  */\n+\t  if (insn_code == CODE_FOR_pred_rel_mutex\n \t      || insn_code == CODE_FOR_prologue_use)\n \t    continue;\n \n@@ -6490,7 +6470,7 @@ ia64_variable_issue (dump, sched_verbose, insn, can_issue_more)\n       int t = sched_data.first_slot;\n       if (t == 0)\n \tt = 3;\n-      ia64_emit_insn_before (gen_insn_group_barrier (GEN_INT (t)), insn);\n+      emit_insn_before (gen_insn_group_barrier (GEN_INT (t)), insn);\n       init_insn_group_barriers ();\n       sched_data.last_was_stop = 0;\n     }\n@@ -6547,17 +6527,6 @@ ia64_sched_finish (dump, sched_verbose)\n   free (sched_types);\n   free (sched_ready);\n }\n-\n-static rtx\n-ia64_cycle_display (clock, last)\n-     int clock;\n-     rtx last;\n-{\n-  if (ia64_final_schedule)\n-    return emit_insn_after (gen_cycle_display (GEN_INT (clock)), last);\n-  else\n-    return last;\n-}\n \f\n /* Emit pseudo-ops for the assembler to describe predicate relations.\n    At present this assumes that we only consider predicate pairs to"}, {"sha": "80bedacbb9bcaf1d807a4a8fbe4c7e18d3728c9c", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaaed752284e25ca392fea2ee5ca7c9bc988fe88/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaaed752284e25ca392fea2ee5ca7c9bc988fe88/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=aaaed752284e25ca392fea2ee5ca7c9bc988fe88", "patch": "@@ -65,7 +65,6 @@\n ;;\t20\tbsp_value\n ;;\t21\tflushrs\n ;;\t22      bundle selector\n-;;\t23      cycle display\n ;;      24      addp4\n ;;\t25\tprologue_use\n ;;\n@@ -5012,13 +5011,6 @@\n   \"\"\n   [(set_attr \"itanium_class\" \"nop_x\")])\n \n-(define_insn \"cycle_display\"\n-  [(unspec [(match_operand 0 \"const_int_operand\" \"\")] 23)]\n-  \"\"\n-  \"// cycle %0\"\n-  [(set_attr \"itanium_class\" \"ignore\")\n-   (set_attr \"predicable\" \"no\")])\n-\n (define_insn \"bundle_selector\"\n   [(unspec [(match_operand 0 \"const_int_operand\" \"\")] 22)]\n   \"\""}, {"sha": "b5e618040b03d44a1c24df8976c751d65e323107", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaaed752284e25ca392fea2ee5ca7c9bc988fe88/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaaed752284e25ca392fea2ee5ca7c9bc988fe88/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=aaaed752284e25ca392fea2ee5ca7c9bc988fe88", "patch": "@@ -167,7 +167,6 @@ static int sparc_issue_rate PARAMS ((void));\n static void sparc_sched_init PARAMS ((FILE *, int, int));\n static int sparc_use_dfa_pipeline_interface PARAMS ((void));\n static int sparc_use_sched_lookahead PARAMS ((void));\n-static rtx sparc_cycle_display PARAMS ((int, rtx));\n \n static void emit_soft_tfmode_libcall PARAMS ((const char *, int, rtx *));\n static void emit_soft_tfmode_binop PARAMS ((enum rtx_code, rtx *));\n@@ -233,8 +232,6 @@ enum processor_type sparc_cpu;\n #define TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE sparc_use_dfa_pipeline_interface\n #undef TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD\n #define TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD sparc_use_sched_lookahead\n-#undef TARGET_SCHED_CYCLE_DISPLAY\n-#define TARGET_SCHED_CYCLE_DISPLAY sparc_cycle_display\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -7690,17 +7687,6 @@ sparc_use_sched_lookahead ()\n   return 0;\n }\n \n-static rtx\n-sparc_cycle_display (clock, last)\n-     int clock;\n-     rtx last;\n-{\n-  if (reload_completed)\n-    return emit_insn_after (gen_cycle_display (GEN_INT (clock)), last);\n-  else\n-    return last;\n-}\n-\n static int\n sparc_issue_rate ()\n {"}, {"sha": "ed9da8bbefb110c1e2a99a9372ae36b299ddad23", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaaed752284e25ca392fea2ee5ca7c9bc988fe88/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaaed752284e25ca392fea2ee5ca7c9bc988fe88/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=aaaed752284e25ca392fea2ee5ca7c9bc988fe88", "patch": "@@ -44,7 +44,6 @@\n ;;\t\t\t16\tembmedany_textlo\n ;;\t\t\t18\tsethm\n ;;\t\t\t19\tsetlo\n-;;\t\t\t20\tcycle_display\n ;;\n ;; UNSPEC_VOLATILE:\t0\tblockage\n ;;\t\t\t1\tflush_register_windows\n@@ -9316,9 +9315,3 @@\n   \"TARGET_V9\"\n   \"t%C0\\\\t%%xcc, %1\"\n   [(set_attr \"type\" \"misc\")])\n-\n-(define_insn \"cycle_display\"\n-  [(unspec [(match_operand 0 \"const_int_operand\" \"\")] 20)]\n-  \"\"\n-  \"! cycle %0\"\n-  [(set_attr \"length\" \"0\")])"}, {"sha": "97b778954cda8cb77da4ad3892527c85838ad734", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaaed752284e25ca392fea2ee5ca7c9bc988fe88/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaaed752284e25ca392fea2ee5ca7c9bc988fe88/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=aaaed752284e25ca392fea2ee5ca7c9bc988fe88", "patch": "@@ -3200,14 +3200,6 @@ respectively, a low or moderate degree of temporal locality.\n Targets that do not support write prefetches or locality hints can ignore\n the values of operands 1 and 2.\n \n-@cindex @code{cycle_display} instruction pattern\n-@item @samp{cycle_display}\n-\n-This pattern, if present, will be emitted by the instruction scheduler at\n-the beginning of each new clock cycle.  This can be used for annotating the\n-assembler output with cycle counts.  Operand 0 is a @code{const_int} that\n-holds the clock cycle.\n-\n @end table\n \n @node Pattern Ordering"}, {"sha": "cd11b991ce8d8a352b2ded52c33c97adffac4fb1", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaaed752284e25ca392fea2ee5ca7c9bc988fe88/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaaed752284e25ca392fea2ee5ca7c9bc988fe88/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=aaaed752284e25ca392fea2ee5ca7c9bc988fe88", "patch": "@@ -5498,14 +5498,6 @@ to.  @var{verbose} is the verbose level provided by\n @option{-fsched-verbose-@var{n}}.\n @end deftypefn\n \n-@deftypefn {Target Hook} rtx TARGET_SCHED_CYCLE_DISPLAY (int @var{clock}, rtx @var{last})\n-This hook is called in verbose mode only, at the beginning of each pass\n-over a basic block.  It should insert an insn into the chain after\n-@var{last}, which has no effect, but records the value @var{clock} in\n-RTL dumps and assembly output.  Define this hook only if you need this\n-level of detail about what the scheduler is doing.\n-@end deftypefn\n-\n @deftypefn {Target Hook} int TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE (void)\n This hook is called many times during insn scheduling.  If the hook\n returns nonzero, the automaton based pipeline description is used for"}, {"sha": "e33b857fd2869a857ba1bd0a5218f4bfa727bfe8", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaaed752284e25ca392fea2ee5ca7c9bc988fe88/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaaed752284e25ca392fea2ee5ca7c9bc988fe88/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=aaaed752284e25ca392fea2ee5ca7c9bc988fe88", "patch": "@@ -2019,10 +2019,6 @@ schedule_block (b, rgn_n_insns)\n          list.  */\n       queue_to_ready (&ready);\n \n-      if (sched_verbose && targetm.sched.cycle_display)\n-\tlast_scheduled_insn\n-\t  = (*targetm.sched.cycle_display) (clock_var, last_scheduled_insn);\n-\n       if (ready.n_ready == 0)\n \tabort ();\n "}]}