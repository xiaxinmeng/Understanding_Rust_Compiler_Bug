{"sha": "4708731cceffa32a0bcddb8300147369299c4361", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDcwODczMWNjZWZmYTMyYTBiY2RkYjgzMDAxNDczNjkyOTljNDM2MQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2016-01-11T10:40:12Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2016-01-11T10:40:12Z"}, "message": "[PR69123] make dataflow_set_different details more verbose\n\nfor  gcc/ChangeLog\n\n\tPR bootstrap/69123\n\t* var-tracking.c (dump_onepart_variable_differences): New.\n\t(dataflow_set_different): If a detailed dump is requested,\n\tdelay early returns and dump differences between onepart\n\tvariables present before and after, and added variables.\n\nFrom-SVN: r232217", "tree": {"sha": "ea2e8a36a94b811ee70aa2e2f767e0f8fcf2b062", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea2e8a36a94b811ee70aa2e2f767e0f8fcf2b062"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4708731cceffa32a0bcddb8300147369299c4361", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4708731cceffa32a0bcddb8300147369299c4361", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4708731cceffa32a0bcddb8300147369299c4361", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4708731cceffa32a0bcddb8300147369299c4361/comments", "author": null, "committer": null, "parents": [{"sha": "83834c094206928ec7a3c43850f5e04889da640e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83834c094206928ec7a3c43850f5e04889da640e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83834c094206928ec7a3c43850f5e04889da640e"}], "stats": {"total": 121, "additions": 111, "deletions": 10}, "files": [{"sha": "9b1c41b0c5120de79f891d822db16554c1f88920", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4708731cceffa32a0bcddb8300147369299c4361/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4708731cceffa32a0bcddb8300147369299c4361/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4708731cceffa32a0bcddb8300147369299c4361", "patch": "@@ -1,3 +1,11 @@\n+2016-01-11  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR bootstrap/69123\n+\t* var-tracking.c (dump_onepart_variable_differences): New.\n+\t(dataflow_set_different): If a detailed dump is requested,\n+\tdelay early returns and dump differences between onepart\n+\tvariables present before and after, and added variables.\n+\n 2016-01-11  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \tPR target/69010"}, {"sha": "023a73eddc33a99c3de4c13ab2ff351a33e11829", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 103, "deletions": 10, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4708731cceffa32a0bcddb8300147369299c4361/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4708731cceffa32a0bcddb8300147369299c4361/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=4708731cceffa32a0bcddb8300147369299c4361", "patch": "@@ -4921,6 +4921,63 @@ onepart_variable_different_p (variable *var1, variable *var2)\n   return lc1 != lc2;\n }\n \n+/* Return true if one-part variables VAR1 and VAR2 are different.\n+   They must be in canonical order.  */\n+\n+static void\n+dump_onepart_variable_differences (variable *var1, variable *var2)\n+{\n+  location_chain *lc1, *lc2;\n+\n+  gcc_assert (var1 != var2);\n+  gcc_assert (dump_file);\n+  gcc_assert (dv_as_opaque (var1->dv) == dv_as_opaque (var2->dv));\n+  gcc_assert (var1->n_var_parts == 1\n+\t      && var2->n_var_parts == 1);\n+\n+  lc1 = var1->var_part[0].loc_chain;\n+  lc2 = var2->var_part[0].loc_chain;\n+\n+  gcc_assert (lc1 && lc2);\n+\n+  while (lc1 && lc2)\n+    {\n+      switch (loc_cmp (lc1->loc, lc2->loc))\n+\t{\n+\tcase -1:\n+\t  fprintf (dump_file, \"removed: \");\n+\t  print_rtl_single (dump_file, lc1->loc);\n+\t  lc1 = lc1->next;\n+\t  continue;\n+\tcase 0:\n+\t  break;\n+\tcase 1:\n+\t  fprintf (dump_file, \"added: \");\n+\t  print_rtl_single (dump_file, lc2->loc);\n+\t  lc2 = lc2->next;\n+\t  continue;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+      lc1 = lc1->next;\n+      lc2 = lc2->next;\n+    }\n+\n+  while (lc1)\n+    {\n+      fprintf (dump_file, \"removed: \");\n+      print_rtl_single (dump_file, lc1->loc);\n+      lc1 = lc1->next;\n+    }\n+\n+  while (lc2)\n+    {\n+      fprintf (dump_file, \"added: \");\n+      print_rtl_single (dump_file, lc2->loc);\n+      lc2 = lc2->next;\n+    }\n+}\n+\n /* Return true if variables VAR1 and VAR2 are different.  */\n \n static bool\n@@ -4964,46 +5021,82 @@ dataflow_set_different (dataflow_set *old_set, dataflow_set *new_set)\n {\n   variable_iterator_type hi;\n   variable *var1;\n+  bool diffound = false;\n+  bool details = (dump_file && (dump_flags & TDF_DETAILS));\n+\n+#define RETRUE\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      if (!details)\t\t\t\t\\\n+\treturn true;\t\t\t\t\\\n+      else\t\t\t\t\t\\\n+\tdiffound = true;\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n \n   if (old_set->vars == new_set->vars)\n     return false;\n \n   if (shared_hash_htab (old_set->vars)->elements ()\n       != shared_hash_htab (new_set->vars)->elements ())\n-    return true;\n+    RETRUE;\n \n   FOR_EACH_HASH_TABLE_ELEMENT (*shared_hash_htab (old_set->vars),\n \t\t\t       var1, variable, hi)\n     {\n       variable_table_type *htab = shared_hash_htab (new_set->vars);\n       variable *var2 = htab->find_with_hash (var1->dv, dv_htab_hash (var1->dv));\n+\n       if (!var2)\n \t{\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"dataflow difference found: removal of:\\n\");\n \t      dump_var (var1);\n \t    }\n-\t  return true;\n+\t  RETRUE;\n \t}\n-\n-      if (variable_different_p (var1, var2))\n+      else if (variable_different_p (var1, var2))\n \t{\n-\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t  if (details)\n \t    {\n \t      fprintf (dump_file, \"dataflow difference found: \"\n \t\t       \"old and new follow:\\n\");\n \t      dump_var (var1);\n+\t      if (dv_onepart_p (var1->dv))\n+\t\tdump_onepart_variable_differences (var1, var2);\n \t      dump_var (var2);\n \t    }\n-\t  return true;\n+\t  RETRUE;\n \t}\n     }\n \n-  /* No need to traverse the second hashtab, if both have the same number\n-     of elements and the second one had all entries found in the first one,\n-     then it can't have any extra entries.  */\n-  return false;\n+  /* There's no need to traverse the second hashtab unless we want to\n+     print the details.  If both have the same number of elements and\n+     the second one had all entries found in the first one, then the\n+     second can't have any extra entries.  */\n+  if (!details)\n+    return diffound;\n+\n+  FOR_EACH_HASH_TABLE_ELEMENT (*shared_hash_htab (new_set->vars),\n+\t\t\t       var1, variable, hi)\n+    {\n+      variable_table_type *htab = shared_hash_htab (old_set->vars);\n+      variable *var2 = htab->find_with_hash (var1->dv, dv_htab_hash (var1->dv));\n+      if (!var2)\n+\t{\n+\t  if (details)\n+\t    {\n+\t      fprintf (dump_file, \"dataflow difference found: addition of:\\n\");\n+\t      dump_var (var1);\n+\t    }\n+\t  RETRUE;\n+\t}\n+    }\n+\n+#undef RETRUE\n+\n+  return diffound;\n }\n \n /* Free the contents of dataflow set SET.  */"}]}