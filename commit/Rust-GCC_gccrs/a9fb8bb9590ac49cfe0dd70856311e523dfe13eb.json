{"sha": "a9fb8bb9590ac49cfe0dd70856311e523dfe13eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTlmYjhiYjk1OTBhYzQ5Y2ZlMGRkNzA4NTYzMTFlNTIzZGZlMTNlYg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-09-25T05:33:07Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-09-25T05:33:07Z"}, "message": "(movti):  Split CONST_INTs into 4 moves, and force all other constants to\nmemory.\n\nFrom-SVN: r2236", "tree": {"sha": "4ee60e325424160ce5f02016ca51f941749cb300", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ee60e325424160ce5f02016ca51f941749cb300"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9fb8bb9590ac49cfe0dd70856311e523dfe13eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9fb8bb9590ac49cfe0dd70856311e523dfe13eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9fb8bb9590ac49cfe0dd70856311e523dfe13eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9fb8bb9590ac49cfe0dd70856311e523dfe13eb/comments", "author": null, "committer": null, "parents": [{"sha": "1154b096fa7adf994299811ab5824de6c77e1f68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1154b096fa7adf994299811ab5824de6c77e1f68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1154b096fa7adf994299811ab5824de6c77e1f68"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "06fe6f177eb3296cb6055fbd1d76500527665024", "filename": "gcc/config/a29k/a29k.md", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9fb8bb9590ac49cfe0dd70856311e523dfe13eb/gcc%2Fconfig%2Fa29k%2Fa29k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9fb8bb9590ac49cfe0dd70856311e523dfe13eb/gcc%2Fconfig%2Fa29k%2Fa29k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.md?ref=a9fb8bb9590ac49cfe0dd70856311e523dfe13eb", "patch": "@@ -2254,6 +2254,35 @@\n {\n   if (GET_CODE (operands[0]) == MEM)\n     operands[1] = force_reg (TImode, operands[1]);\n+\n+  /* We can't handle constants in general because there is no rtl to represent\n+     128 bit constants.  Splitting happens to work for CONST_INTs so we split\n+     them for good code.  Other constants will get forced to memory.  */\n+\n+  if (GET_CODE (operands[1]) == CONST_INT)\n+    {\n+     rtx part0, part1, part2, part3;\n+\n+     part0 = operand_subword (operands[0], 0, 1, TImode);\n+     part1 = operand_subword (operands[0], 1, 1, TImode);\n+     part2 = operand_subword (operands[0], 2, 1, TImode);\n+     part3 = operand_subword (operands[0], 3, 1, TImode);\n+\n+     emit_move_insn (part0, const0_rtx);\n+     emit_move_insn (part1, const0_rtx);\n+     emit_move_insn (part2, const0_rtx);\n+     emit_move_insn (part3, const0_rtx);\n+\n+     DONE;\n+    }\n+  else if (CONSTANT_P (operands[1]))\n+    {\n+      operands[1] = force_const_mem (TImode, operands[1]);\n+      if (! memory_address_p (TImode, XEXP (operands[1], 0))\n+\t  && ! reload_in_progress)\n+        operands[1] = change_address (operands[1], TImode,\n+\t\t\t\t      XEXP (operands[1], 0));\n+    }\n }\")\n \f\n ;; For compare operations, we simply store the comparison operands and"}]}