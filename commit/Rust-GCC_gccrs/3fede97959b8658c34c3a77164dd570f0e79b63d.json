{"sha": "3fede97959b8658c34c3a77164dd570f0e79b63d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZlZGU5Nzk1OWI4NjU4YzM0YzNhNzcxNjRkZDU3MGYwZTc5YjYzZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-11-13T11:58:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-11-13T11:58:12Z"}, "message": "gimple-streamer-out.c (output_gimple_stmt): Also wrap decls in ADDR_EXPR operands inside a MEM_REF and optimize that.\n\n2013-11-13  Richard Biener  <rguenther@suse.de>\n\n\t* gimple-streamer-out.c (output_gimple_stmt): Also wrap\n\tdecls in ADDR_EXPR operands inside a MEM_REF and optimize that.\n\t* gimple-streamer-in.c (input_gimple_stmt): Remove now dead\n\tcode dealing with type mismatches inside component reference\n\tchains.\n\nFrom-SVN: r204740", "tree": {"sha": "2607d28f3c7bdd021c6aea3fa2f50204b08590b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2607d28f3c7bdd021c6aea3fa2f50204b08590b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fede97959b8658c34c3a77164dd570f0e79b63d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fede97959b8658c34c3a77164dd570f0e79b63d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fede97959b8658c34c3a77164dd570f0e79b63d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fede97959b8658c34c3a77164dd570f0e79b63d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b0d04a5f56c5b7b83a7c00341027fa8b56b74f99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0d04a5f56c5b7b83a7c00341027fa8b56b74f99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0d04a5f56c5b7b83a7c00341027fa8b56b74f99"}], "stats": {"total": 96, "additions": 14, "deletions": 82}, "files": [{"sha": "c41fb9c8db8aac6a4ef262ffc01c365f9cd1e3fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fede97959b8658c34c3a77164dd570f0e79b63d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fede97959b8658c34c3a77164dd570f0e79b63d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3fede97959b8658c34c3a77164dd570f0e79b63d", "patch": "@@ -1,3 +1,11 @@\n+2013-11-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-streamer-out.c (output_gimple_stmt): Also wrap\n+\tdecls in ADDR_EXPR operands inside a MEM_REF and optimize that.\n+\t* gimple-streamer-in.c (input_gimple_stmt): Remove now dead\n+\tcode dealing with type mismatches inside component reference\n+\tchains.\n+\n 2013-11-13  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR tree-optimization/59077"}, {"sha": "2dae1e43c0c6dfdbcdc6e1b0261fc3b3aa351e94", "filename": "gcc/gimple-streamer-in.c", "status": "modified", "additions": 1, "deletions": 79, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fede97959b8658c34c3a77164dd570f0e79b63d/gcc%2Fgimple-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fede97959b8658c34c3a77164dd570f0e79b63d/gcc%2Fgimple-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-streamer-in.c?ref=3fede97959b8658c34c3a77164dd570f0e79b63d", "patch": "@@ -158,85 +158,7 @@ input_gimple_stmt (struct lto_input_block *ib, struct data_in *data_in,\n \t  if (TREE_CODE (*opp) == ADDR_EXPR)\n \t    opp = &TREE_OPERAND (*opp, 0);\n \t  while (handled_component_p (*opp))\n-\t    {\n-\t      if (TREE_CODE (*opp) == COMPONENT_REF)\n-\t\t{\n-\t\t  /* Fixup FIELD_DECLs in COMPONENT_REFs, they are not handled\n-\t\t     by decl merging.  */\n-\t\t  tree field, type, tem;\n-\t\t  tree closest_match = NULL_TREE;\n-\t\t  field = TREE_OPERAND (*opp, 1);\n-\t\t  type = DECL_CONTEXT (field);\n-\t\t  for (tem = TYPE_FIELDS (type); tem; tem = TREE_CHAIN (tem))\n-\t\t    {\n-\t\t      if (TREE_CODE (tem) != FIELD_DECL)\n-\t\t\tcontinue;\n-\t\t      if (tem == field)\n-\t\t\tbreak;\n-\t\t      if (DECL_NONADDRESSABLE_P (tem)\n-\t\t\t  == DECL_NONADDRESSABLE_P (field)\n-\t\t\t  && gimple_compare_field_offset (tem, field))\n-\t\t\t{\n-\t\t\t  if (types_compatible_p (TREE_TYPE (tem),\n-\t\t\t\t\t\t  TREE_TYPE (field)))\n-\t\t\t    break;\n-\t\t\t  else\n-\t\t\t    closest_match = tem;\n-\t\t\t}\n-\t\t    }\n-\t\t  /* In case of type mismatches across units we can fail\n-\t\t     to unify some types and thus not find a proper\n-\t\t     field-decl here.  */\n-\t\t  if (tem == NULL_TREE)\n-\t\t    {\n-\t\t      /* Thus, emit a ODR violation warning.  */\n-\t\t      if (warning_at (gimple_location (stmt), 0,\n-\t\t\t\t      \"use of type %<%E%> with two mismatching \"\n-\t\t\t\t      \"declarations at field %<%E%>\",\n-\t\t\t\t      type, TREE_OPERAND (*opp, 1)))\n-\t\t\t{\n-\t\t\t  if (TYPE_FIELDS (type))\n-\t\t\t    inform (DECL_SOURCE_LOCATION (TYPE_FIELDS (type)),\n-\t\t\t\t    \"original type declared here\");\n-\t\t\t  inform (DECL_SOURCE_LOCATION (TREE_OPERAND (*opp, 1)),\n-\t\t\t\t  \"field in mismatching type declared here\");\n-\t\t\t  if (TYPE_NAME (TREE_TYPE (field))\n-\t\t\t      && (TREE_CODE (TYPE_NAME (TREE_TYPE (field)))\n-\t\t\t\t  == TYPE_DECL))\n-\t\t\t    inform (DECL_SOURCE_LOCATION\n-\t\t\t\t      (TYPE_NAME (TREE_TYPE (field))),\n-\t\t\t\t    \"type of field declared here\");\n-\t\t\t  if (closest_match\n-\t\t\t      && TYPE_NAME (TREE_TYPE (closest_match))\n-\t\t\t      && (TREE_CODE (TYPE_NAME\n-\t\t\t\t   (TREE_TYPE (closest_match))) == TYPE_DECL))\n-\t\t\t    inform (DECL_SOURCE_LOCATION\n-\t\t\t\t      (TYPE_NAME (TREE_TYPE (closest_match))),\n-\t\t\t\t    \"type of mismatching field declared here\");\n-\t\t\t}\n-\t\t      /* And finally fixup the types.  */\n-\t\t      TREE_OPERAND (*opp, 0)\n-\t\t\t= build1 (VIEW_CONVERT_EXPR, type,\n-\t\t\t\t  TREE_OPERAND (*opp, 0));\n-\t\t    }\n-\t\t  else\n-\t\t    TREE_OPERAND (*opp, 1) = tem;\n-\t\t}\n-\t      else if ((TREE_CODE (*opp) == ARRAY_REF\n-\t\t\t|| TREE_CODE (*opp) == ARRAY_RANGE_REF)\n-\t\t       && (TREE_CODE (TREE_TYPE (TREE_OPERAND (*opp, 0)))\n-\t\t\t   != ARRAY_TYPE))\n-\t\t{\n-\t\t  /* And ARRAY_REFs to objects that had mismatched types\n-\t\t     during symbol merging to avoid ICEs.  */\n-\t\t  TREE_OPERAND (*opp, 0)\n-\t\t    = build1 (VIEW_CONVERT_EXPR,\n-\t\t\t      build_array_type (TREE_TYPE (*opp), NULL_TREE),\n-\t\t\t      TREE_OPERAND (*opp, 0));\n-\t\t}\n-\n-\t      opp = &TREE_OPERAND (*opp, 0);\n-\t    }\n+\t    opp = &TREE_OPERAND (*opp, 0);\n \t  /* At LTO output time we wrap all global decls in MEM_REFs to\n \t     allow seamless replacement with prevailing decls.  Undo this\n \t     here if the prevailing decl allows for this."}, {"sha": "e7430a682340c4a062bf49d4de344acbc42f244c", "filename": "gcc/gimple-streamer-out.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fede97959b8658c34c3a77164dd570f0e79b63d/gcc%2Fgimple-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fede97959b8658c34c3a77164dd570f0e79b63d/gcc%2Fgimple-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-streamer-out.c?ref=3fede97959b8658c34c3a77164dd570f0e79b63d", "patch": "@@ -129,17 +129,19 @@ output_gimple_stmt (struct output_block *ob, gimple stmt)\n \t  if (op && (i || !is_gimple_debug (stmt)))\n \t    {\n \t      basep = &op;\n+\t      if (TREE_CODE (*basep) == ADDR_EXPR)\n+\t\tbasep = &TREE_OPERAND (*basep, 0);\n \t      while (handled_component_p (*basep))\n \t\tbasep = &TREE_OPERAND (*basep, 0);\n \t      if (TREE_CODE (*basep) == VAR_DECL\n \t\t  && !auto_var_in_fn_p (*basep, current_function_decl)\n \t\t  && !DECL_REGISTER (*basep))\n \t\t{\n \t\t  bool volatilep = TREE_THIS_VOLATILE (*basep);\n+\t\t  tree ptrtype = build_pointer_type (TREE_TYPE (*basep));\n \t\t  *basep = build2 (MEM_REF, TREE_TYPE (*basep),\n-\t\t\t\t   build_fold_addr_expr (*basep),\n-\t\t\t\t   build_int_cst (build_pointer_type\n-\t\t\t\t\t\t  (TREE_TYPE (*basep)), 0));\n+\t\t\t\t   build1 (ADDR_EXPR, ptrtype, *basep),\n+\t\t\t\t   build_int_cst (ptrtype, 0));\n \t\t  TREE_THIS_VOLATILE (*basep) = volatilep;\n \t\t}\n \t      else"}]}