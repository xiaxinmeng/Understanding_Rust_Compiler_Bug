{"sha": "66b01cc3421055806f51ac36a8d237536970504c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZiMDFjYzM0MjEwNTU4MDZmNTFhYzM2YThkMjM3NTM2OTcwNTA0Yw==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-01-07T14:35:21Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2020-01-07T14:35:21Z"}, "message": "Disallow 'B' constraints on amdgcn addc/subb\n\n2020-01-07  Andrew Stubbs  <ams@codesourcery.com>\n\n\tgcc/\n\t* config/gcn/constraints.md (DA): Update description and match.\n\t(DB): Likewise.\n\t(Db): New constraint.\n\t* config/gcn/gcn-protos.h (gcn_inline_constant64_p): Add second\n\tparameter.\n\t* config/gcn/gcn.c (gcn_inline_constant64_p): Add 'mixed' parameter.\n\tImplement 'Db' mixed immediate type.\n\t* config/gcn/gcn-valu.md (addcv64si3<exec_vcc>): Rework constraints.\n\t(addcv64si3_dup<exec_vcc>): Delete.\n\t(subcv64si3<exec_vcc>): Rework constraints.\n\t(addv64di3): Rework constraints.\n\t(addv64di3_exec): Rework constraints.\n\t(subv64di3): Rework constraints.\n\t(addv64di3_dup): Delete.\n\t(addv64di3_dup_exec): Delete.\n\t(addv64di3_zext): Rework constraints.\n\t(addv64di3_zext_exec): Rework constraints.\n\t(addv64di3_zext_dup): Rework constraints.\n\t(addv64di3_zext_dup_exec): Rework constraints.\n\t(addv64di3_zext_dup2): Rework constraints.\n\t(addv64di3_zext_dup2_exec): Rework constraints.\n\t(addv64di3_sext_dup2): Rework constraints.\n\t(addv64di3_sext_dup2_exec): Rework constraints.\n\nFrom-SVN: r279959", "tree": {"sha": "3de52ccce5677baf7051c972f5ec102bac8a5b24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3de52ccce5677baf7051c972f5ec102bac8a5b24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66b01cc3421055806f51ac36a8d237536970504c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66b01cc3421055806f51ac36a8d237536970504c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66b01cc3421055806f51ac36a8d237536970504c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66b01cc3421055806f51ac36a8d237536970504c/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "77aecac1b2564fd6087c424e3400f053202a79e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77aecac1b2564fd6087c424e3400f053202a79e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77aecac1b2564fd6087c424e3400f053202a79e0"}], "stats": {"total": 255, "additions": 96, "deletions": 159}, "files": [{"sha": "56d45ab3616a30fc992ac5d209fcb39722a8eb23", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b01cc3421055806f51ac36a8d237536970504c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b01cc3421055806f51ac36a8d237536970504c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66b01cc3421055806f51ac36a8d237536970504c", "patch": "@@ -1,3 +1,29 @@\n+2020-01-07  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/constraints.md (DA): Update description and match.\n+\t(DB): Likewise.\n+\t(Db): New constraint.\n+\t* config/gcn/gcn-protos.h (gcn_inline_constant64_p): Add second\n+\tparameter.\n+\t* config/gcn/gcn.c (gcn_inline_constant64_p): Add 'mixed' parameter.\n+\tImplement 'Db' mixed immediate type.\n+\t* config/gcn/gcn-valu.md (addcv64si3<exec_vcc>): Rework constraints.\n+\t(addcv64si3_dup<exec_vcc>): Delete.\n+\t(subcv64si3<exec_vcc>): Rework constraints.\n+\t(addv64di3): Rework constraints.\n+\t(addv64di3_exec): Rework constraints.\n+\t(subv64di3): Rework constraints.\n+\t(addv64di3_dup): Delete.\n+\t(addv64di3_dup_exec): Delete.\n+\t(addv64di3_zext): Rework constraints.\n+\t(addv64di3_zext_exec): Rework constraints.\n+\t(addv64di3_zext_dup): Rework constraints.\n+\t(addv64di3_zext_dup_exec): Rework constraints.\n+\t(addv64di3_zext_dup2): Rework constraints.\n+\t(addv64di3_zext_dup2_exec): Rework constraints.\n+\t(addv64di3_sext_dup2): Rework constraints.\n+\t(addv64di3_sext_dup2_exec): Rework constraints.\n+\n 2020-01-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* doc/sourcebuild.texi (arm_little_endian, arm_nothumb): Documented"}, {"sha": "dd6615b0fd7b0bc7a60002b94230cb7fe3680af4", "filename": "gcc/config/gcn/constraints.md", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b01cc3421055806f51ac36a8d237536970504c/gcc%2Fconfig%2Fgcn%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b01cc3421055806f51ac36a8d237536970504c/gcc%2Fconfig%2Fgcn%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fconstraints.md?ref=66b01cc3421055806f51ac36a8d237536970504c", "patch": "@@ -53,12 +53,17 @@\n \t(match_test \"gcn_constant64_p (op)\")))\n \n (define_constraint \"DA\"\n-  \"Splittable inline immediate 64-bit parameter\"\n+  \"Immediate 64-bit parameter, low and high part match 'A'\"\n   (and (match_code \"const_int,const_double,const_vector\")\n-       (match_test \"gcn_inline_constant64_p (op)\")))\n+       (match_test \"gcn_inline_constant64_p (op, 0)\")))\n+\n+(define_constraint \"Db\"\n+  \"Immediate 64-bit parameter, low part matches 'B', high part matches 'A'\"\n+  (and (match_code \"const_int,const_double,const_vector\")\n+       (match_test \"gcn_inline_constant64_p (op, 1)\")))\n \n (define_constraint \"DB\"\n-  \"Splittable immediate 64-bit parameter\"\n+  \"Immediate 64-bit parameter, low and high part match 'B'\"\n   (match_code \"const_int,const_double,const_vector\"))\n \n (define_constraint \"U\""}, {"sha": "e4dadd37f212d7e8270fa8decb8721f9167d7e01", "filename": "gcc/config/gcn/gcn-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b01cc3421055806f51ac36a8d237536970504c/gcc%2Fconfig%2Fgcn%2Fgcn-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b01cc3421055806f51ac36a8d237536970504c/gcc%2Fconfig%2Fgcn%2Fgcn-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-protos.h?ref=66b01cc3421055806f51ac36a8d237536970504c", "patch": "@@ -51,7 +51,7 @@ extern int gcn_hard_regno_nregs (int regno, machine_mode mode);\n extern void gcn_hsa_declare_function_name (FILE *file, const char *name,\n \t\t\t\t\t   tree decl);\n extern HOST_WIDE_INT gcn_initial_elimination_offset (int, int);\n-extern bool gcn_inline_constant64_p (rtx);\n+extern bool gcn_inline_constant64_p (rtx, bool);\n extern bool gcn_inline_constant_p (rtx);\n extern int gcn_inline_fp_constant_p (rtx, bool);\n extern reg_class gcn_mode_code_base_reg_class (machine_mode, addr_space_t,"}, {"sha": "7dd7bb969184f6bdab97a18a87c3a5a39be31ee7", "filename": "gcc/config/gcn/gcn-valu.md", "status": "modified", "additions": 55, "deletions": 151, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b01cc3421055806f51ac36a8d237536970504c/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b01cc3421055806f51ac36a8d237536970504c/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md?ref=66b01cc3421055806f51ac36a8d237536970504c", "patch": "@@ -1090,20 +1090,21 @@\n   [(set_attr \"type\" \"vop2,vop3b\")\n    (set_attr \"length\" \"8,8\")])\n \n-; This pattern does not accept SGPR because VCC read already counts as an\n-; SGPR use and number of SGPR operands is limited to 1.\n+; v_addc does not accept an SGPR because the VCC read already counts as an\n+; SGPR use and the number of SGPR operands is limited to 1.  It does not\n+; accept \"B\" immediate constants due to a related bus conflict.\n \n (define_insn \"addcv64si3<exec_vcc>\"\n-  [(set (match_operand:V64SI 0 \"register_operand\" \"=v,v\")\n+  [(set (match_operand:V64SI 0 \"register_operand\"    \"=v,   v\")\n \t(plus:V64SI\n \t  (plus:V64SI\n \t    (vec_merge:V64SI\n \t      (vec_duplicate:V64SI (const_int 1))\n \t      (vec_duplicate:V64SI (const_int 0))\n-\t      (match_operand:DI 3 \"register_operand\" \" cV,Sv\"))\n-\t    (match_operand:V64SI 1 \"gcn_alu_operand\" \"%vA,vA\"))\n-\t  (match_operand:V64SI 2 \"gcn_alu_operand\"   \" vB,vB\")))\n-   (set (match_operand:DI 4 \"register_operand\"\t     \"=cV,Sg\")\n+\t      (match_operand:DI 3 \"register_operand\" \" cV,cVSv\"))\n+\t    (match_operand:V64SI 1 \"gcn_alu_operand\" \"% v,  vA\"))\n+\t  (match_operand:V64SI 2 \"gcn_alu_operand\"   \" vA,  vA\")))\n+   (set (match_operand:DI 4 \"register_operand\"\t     \"=cV,cVSg\")\n \t(ior:DI (ltu:DI (plus:V64SI\n \t\t\t  (plus:V64SI\n \t\t\t    (vec_merge:V64SI\n@@ -1121,40 +1122,7 @@\n \t\t\t  (match_dup 1))\n \t\t\t(match_dup 1))))]\n   \"\"\n-  \"v_addc%^_u32\\t%0, %4, %1, %2, %3\"\n-  [(set_attr \"type\" \"vop2,vop3b\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_insn \"addcv64si3_dup<exec_vcc>\"\n-  [(set (match_operand:V64SI 0 \"register_operand\" \"=v,v\")\n-\t(plus:V64SI\n-\t  (plus:V64SI\n-\t    (vec_merge:V64SI\n-\t      (vec_duplicate:V64SI (const_int 1))\n-\t      (vec_duplicate:V64SI (const_int 0))\n-\t      (match_operand:DI 3 \"register_operand\" \" cV, Sv\"))\n-\t    (match_operand:V64SI 1 \"gcn_alu_operand\" \"%vA, vA\"))\n-\t  (vec_duplicate:V64SI\n-\t    (match_operand:SI 2 \"gcn_alu_operand\"    \"SvB,SvB\"))))\n-   (set (match_operand:DI 4 \"register_operand\"  \"=cV, Sg\")\n-\t(ior:DI (ltu:DI (plus:V64SI (plus:V64SI\n-\t\t\t\t      (vec_merge:V64SI\n-\t\t\t\t\t(vec_duplicate:V64SI (const_int 1))\n-\t\t\t\t\t(vec_duplicate:V64SI (const_int 0))\n-\t\t\t\t\t(match_dup 3))\n-\t\t\t\t      (match_dup 1))\n-\t\t\t\t    (vec_duplicate:V64SI\n-\t\t\t\t      (match_dup 2)))\n-\t\t\t(vec_duplicate:V64SI\n-\t\t\t  (match_dup 2)))\n-\t\t(ltu:DI (plus:V64SI (vec_merge:V64SI\n-\t\t\t\t      (vec_duplicate:V64SI (const_int 1))\n-\t\t\t\t      (vec_duplicate:V64SI (const_int 0))\n-\t\t\t\t      (match_dup 3))\n-\t\t\t\t    (match_dup 1))\n-\t\t\t(match_dup 1))))]\n-  \"\"\n-  \"v_addc%^_u32\\t%0, %4, %1, %2, %3\"\n+  \"v_addc%^_u32\\t%0, %4, %2, %1, %3\"\n   [(set_attr \"type\" \"vop2,vop3b\")\n    (set_attr \"length\" \"4,8\")])\n \n@@ -1188,8 +1156,9 @@\n   [(set_attr \"type\" \"vop2,vop3b,vop2,vop3b\")\n    (set_attr \"length\" \"8\")])\n \n-; This pattern does not accept SGPR because VCC read already counts\n-; as a SGPR use and number of SGPR operands is limited to 1.\n+; v_subb does not accept an SGPR because the VCC read already counts as an\n+; SGPR use and the number of SGPR operands is limited to 1.  It does not\n+; accept \"B\" immediate constants due to a related bus conflict.\n \n (define_insn \"subcv64si3<exec_vcc>\"\n   [(set (match_operand:V64SI 0 \"register_operand\"    \"= v, v, v, v\")\n@@ -1198,10 +1167,10 @@\n \t    (vec_merge:V64SI\n \t      (vec_duplicate:V64SI (const_int 1))\n \t      (vec_duplicate:V64SI (const_int 0))\n-\t      (match_operand:DI 3 \"gcn_alu_operand\"  \" cV,Sv,cV,Sv\"))\n-\t    (match_operand:V64SI 1 \"gcn_alu_operand\" \" vA,vA,vB,vB\"))\n-\t  (match_operand:V64SI 2 \"gcn_alu_operand\"   \" vB,vB,vA,vA\")))\n-   (set (match_operand:DI 4 \"register_operand\"\t     \"=cV,Sg,cV,Sg\")\n+\t      (match_operand:DI 3 \"gcn_alu_operand\"  \" cV,cVSv,cV,cVSv\"))\n+\t    (match_operand:V64SI 1 \"gcn_alu_operand\" \" vA,  vA, v,  vA\"))\n+\t  (match_operand:V64SI 2 \"gcn_alu_operand\"   \"  v,  vA,vA,  vA\")))\n+   (set (match_operand:DI 4 \"register_operand\"\t     \"=cV,cVSg,cV,cVSg\")\n \t(ior:DI (gtu:DI (minus:V64SI (minus:V64SI\n \t\t\t\t       (vec_merge:V64SI\n \t\t\t\t\t (vec_duplicate:V64SI (const_int 1))\n@@ -1223,13 +1192,13 @@\n    v_subbrev%^_u32\\t%0, %4, %2, %1, %3\n    v_subbrev%^_u32\\t%0, %4, %2, %1, %3\"\n   [(set_attr \"type\" \"vop2,vop3b,vop2,vop3b\")\n-   (set_attr \"length\" \"8\")])\n+   (set_attr \"length\" \"4,8,4,8\")])\n \n (define_insn_and_split \"addv64di3\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"   \"=  &v\")\n+  [(set (match_operand:V64DI 0 \"register_operand\"   \"= &v,  &v\")\n \t(plus:V64DI\n-\t  (match_operand:V64DI 1 \"register_operand\" \"%  v0\")\n-\t  (match_operand:V64DI 2 \"gcn_alu_operand\"  \"vSvB0\")))\n+\t  (match_operand:V64DI 1 \"register_operand\" \"%vDb,vDb0\")\n+\t  (match_operand:V64DI 2 \"gcn_alu_operand\"  \"vDb0, vDb\")))\n    (clobber (reg:DI VCC_REG))]\n   \"\"\n   \"#\"\n@@ -1255,13 +1224,13 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn_and_split \"addv64di3_exec\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"\t\t  \"=  &v\")\n+  [(set (match_operand:V64DI 0 \"register_operand\"\t\t \"= &v,  &v\")\n \t(vec_merge:V64DI\n \t  (plus:V64DI\n-\t    (match_operand:V64DI 1 \"register_operand\"\t\t  \"%  v0\")\n-\t    (match_operand:V64DI 2 \"gcn_alu_operand\"\t\t  \"vSvB0\"))\n-\t  (match_operand:V64DI 3 \"gcn_register_or_unspec_operand\" \"   U0\")\n-\t  (match_operand:DI 4 \"gcn_exec_reg_operand\"\t\t  \"    e\")))\n+\t    (match_operand:V64DI 1 \"register_operand\"\t\t \"%vDb,vDb0\")\n+\t    (match_operand:V64DI 2 \"gcn_alu_operand\"\t\t \"vDb0, vDb\"))\n+\t  (match_operand:V64DI 3 \"gcn_register_or_unspec_operand\" \" U0,  U0\")\n+\t  (match_operand:DI 4 \"gcn_exec_reg_operand\"\t\t \"   e,   e\")))\n    (clobber (reg:DI VCC_REG))]\n   \"\"\n   \"#\"\n@@ -1292,10 +1261,10 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn_and_split \"subv64di3\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"  \"= &v,   &v,   &v,  &v\")\n+  [(set (match_operand:V64DI 0 \"register_operand\"  \"=&v,  &v,  &v, &v\")\n \t(minus:V64DI                                                 \n-\t  (match_operand:V64DI 1 \"gcn_alu_operand\" \"vSvB,vSvB0,    v,  v0\")\n-\t  (match_operand:V64DI 2 \"gcn_alu_operand\" \"  v0,    v,vSvB0,vSvB\")))\n+\t  (match_operand:V64DI 1 \"gcn_alu_operand\" \"vDb,vDb0,   v, v0\")\n+\t  (match_operand:V64DI 2 \"gcn_alu_operand\" \" v0,   v,vDb0,vDb\")))\n    (clobber (reg:DI VCC_REG))]\n   \"\"\n   \"#\"\n@@ -1359,80 +1328,12 @@\n   [(set_attr \"type\" \"vmult\")\n    (set_attr \"length\" \"8\")])\n \n-(define_insn_and_split \"addv64di3_dup\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"   \"= &v\")\n-\t(plus:V64DI\n-\t  (match_operand:V64DI 1 \"register_operand\" \"  v0\")\n-\t  (vec_duplicate:V64DI\n-\t    (match_operand:DI 2 \"gcn_alu_operand\"   \"SvDB\"))))\n-   (clobber (reg:DI VCC_REG))]\n-  \"\"\n-  \"#\"\n-  \"gcn_can_split_p  (V64DImode, operands[0])\n-   && gcn_can_split_p (V64DImode, operands[1])\n-   && gcn_can_split_p (V64DImode, operands[2])\"\n-  [(const_int 0)]\n-  {\n-    rtx vcc = gen_rtx_REG (DImode, VCC_REG);\n-    emit_insn (gen_addv64si3_vcc_dup\n-\t\t(gcn_operand_part (V64DImode, operands[0], 0),\n-\t\t gcn_operand_part (DImode, operands[2], 0),\n-\t\t gcn_operand_part (V64DImode, operands[1], 0),\n-\t\t vcc));\n-    emit_insn (gen_addcv64si3_dup\n-\t\t(gcn_operand_part (V64DImode, operands[0], 1),\n-\t\t gcn_operand_part (V64DImode, operands[1], 1),\n-\t\t gcn_operand_part (DImode, operands[2], 1),\n-\t\t vcc, vcc));\n-    DONE;\n-  }\n-  [(set_attr \"type\" \"vmult\")\n-   (set_attr \"length\" \"8\")])\n-\n-(define_insn_and_split \"addv64di3_dup_exec\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"\t\t  \"= &v\")\n-\t(vec_merge:V64DI\n-\t  (plus:V64DI\n-\t    (match_operand:V64DI 1 \"register_operand\"\t\t  \"  v0\")\n-\t    (vec_duplicate:V64DI\n-\t      (match_operand:DI 2 \"gcn_alu_operand\"\t\t  \"SvDB\")))\n-\t  (match_operand:V64DI 3 \"gcn_register_or_unspec_operand\" \"  U0\")\n-\t  (match_operand:DI 4 \"gcn_exec_reg_operand\"\t\t  \"   e\")))\n-   (clobber (reg:DI VCC_REG))]\n-  \"\"\n-  \"#\"\n-  \"gcn_can_split_p  (V64DImode, operands[0])\n-   && gcn_can_split_p (V64DImode, operands[1])\n-   && gcn_can_split_p (V64DImode, operands[2])\n-   && gcn_can_split_p (V64DImode, operands[3])\"\n-  [(const_int 0)]\n-  {\n-    rtx vcc = gen_rtx_REG (DImode, VCC_REG);\n-    emit_insn (gen_addv64si3_vcc_dup_exec\n-\t\t(gcn_operand_part (V64DImode, operands[0], 0),\n-\t\t gcn_operand_part (DImode, operands[2], 0),\n-\t\t gcn_operand_part (V64DImode, operands[1], 0),\n-\t\t vcc,\n-\t\t gcn_operand_part (V64DImode, operands[3], 0),\n-\t\t operands[4]));\n-    emit_insn (gen_addcv64si3_dup_exec\n-\t\t(gcn_operand_part (V64DImode, operands[0], 1),\n-\t\t gcn_operand_part (V64DImode, operands[1], 1),\n-\t\t gcn_operand_part (DImode, operands[2], 1),\n-\t\t vcc, vcc,\n-\t\t gcn_operand_part (V64DImode, operands[3], 1),\n-\t\t operands[4]));\n-    DONE;\n-  }\n-  [(set_attr \"type\" \"vmult\")\n-   (set_attr \"length\" \"8\")])\n-\n (define_insn_and_split \"addv64di3_zext\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"    \"=&v,&v\")\n+  [(set (match_operand:V64DI 0 \"register_operand\"    \"=&v, &v,  &v,  &v\")\n \t(plus:V64DI\n \t  (zero_extend:V64DI\n-\t    (match_operand:V64SI 1 \"gcn_alu_operand\" \"0vA,0vB\"))\n-\t  (match_operand:V64DI 2 \"gcn_alu_operand\"   \"0vB,0vA\")))\n+\t    (match_operand:V64SI 1 \"gcn_alu_operand\" \"0vA,0vB,  vA,  vB\"))\n+\t  (match_operand:V64DI 2 \"gcn_alu_operand\"   \"vDb,vDA,0vDb,0vDA\")))\n    (clobber (reg:DI VCC_REG))]\n   \"\"\n   \"#\"\n@@ -1453,17 +1354,18 @@\n     DONE;\n   }\n   [(set_attr \"type\" \"vmult\")\n-   (set_attr \"length\" \"8,8\")])\n+   (set_attr \"length\" \"8\")])\n \n (define_insn_and_split \"addv64di3_zext_exec\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"\t\t  \"=&v,&v\")\n+  [(set (match_operand:V64DI 0 \"register_operand\"\t \"=&v,  &v, &v,  &v\")\n \t(vec_merge:V64DI\n \t  (plus:V64DI\n \t    (zero_extend:V64DI\n-\t      (match_operand:V64SI 1 \"gcn_alu_operand\"\t\t  \"0vA,0vB\"))\n-\t    (match_operand:V64DI 2 \"gcn_alu_operand\"\t\t  \"0vB,0vA\"))\n-\t  (match_operand:V64DI 3 \"gcn_register_or_unspec_operand\" \" U0, U0\")\n-\t  (match_operand:DI 4 \"gcn_exec_reg_operand\"\t\t  \"  e,  e\")))\n+\t      (match_operand:V64SI 1 \"gcn_alu_operand\"\t \"0vA,  vA,0vB,  vB\"))\n+\t    (match_operand:V64DI 2 \"gcn_alu_operand\"\t \"vDb,0vDb,vDA,0vDA\"))\n+\t  (match_operand:V64DI 3 \"gcn_register_or_unspec_operand\"\n+\t\t\t\t\t\t\t \" U0,  U0, U0,  U0\")\n+\t  (match_operand:DI 4 \"gcn_exec_reg_operand\"\t \"  e,   e,  e,   e\")))\n    (clobber (reg:DI VCC_REG))]\n   \"\"\n   \"#\"\n@@ -1489,15 +1391,15 @@\n     DONE;\n   }\n   [(set_attr \"type\" \"vmult\")\n-   (set_attr \"length\" \"8,8\")])\n+   (set_attr \"length\" \"8\")])\n \n (define_insn_and_split \"addv64di3_zext_dup\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"   \"=&v\")\n+  [(set (match_operand:V64DI 0 \"register_operand\"   \"= &v,  &v\")\n \t(plus:V64DI\n \t  (zero_extend:V64DI\n \t    (vec_duplicate:V64SI\n-\t      (match_operand:SI 1 \"gcn_alu_operand\" \"BSv\")))\n-\t  (match_operand:V64DI 2 \"gcn_alu_operand\"  \"vA0\")))\n+\t      (match_operand:SI 1 \"gcn_alu_operand\" \" BSv, ASv\")))\n+\t  (match_operand:V64DI 2 \"gcn_alu_operand\"  \"vDA0,vDb0\")))\n    (clobber (reg:DI VCC_REG))]\n   \"\"\n   \"#\"\n@@ -1521,15 +1423,15 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn_and_split \"addv64di3_zext_dup_exec\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"\t\t  \"=&v\")\n+  [(set (match_operand:V64DI 0 \"register_operand\"\t\t \"= &v,  &v\")\n \t(vec_merge:V64DI\n \t  (plus:V64DI\n \t    (zero_extend:V64DI\n \t      (vec_duplicate:V64SI\n-\t\t(match_operand:SI 1 \"gcn_alu_operand\"\t\t  \"BSv\")))\n-\t    (match_operand:V64DI 2 \"gcn_alu_operand\"\t\t  \"vA0\"))\n-\t  (match_operand:V64DI 3 \"gcn_register_or_unspec_operand\" \" U0\")\n-\t  (match_operand:DI 4 \"gcn_exec_reg_operand\"\t\t  \"  e\")))\n+\t\t(match_operand:SI 1 \"gcn_alu_operand\"\t\t \" ASv, BSv\")))\n+\t    (match_operand:V64DI 2 \"gcn_alu_operand\"\t\t \"vDb0,vDA0\"))\n+\t  (match_operand:V64DI 3 \"gcn_register_or_unspec_operand\" \" U0,  U0\")\n+\t  (match_operand:DI 4 \"gcn_exec_reg_operand\"\t\t \"   e,   e\")))\n    (clobber (reg:DI VCC_REG))]\n   \"\"\n   \"#\"\n@@ -1558,10 +1460,10 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn_and_split \"addv64di3_zext_dup2\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"\t\t      \"= v\")\n+  [(set (match_operand:V64DI 0 \"register_operand\"\t\t     \"= &v\")\n \t(plus:V64DI\n \t  (zero_extend:V64DI (match_operand:V64SI 1 \"gcn_alu_operand\" \" vA\"))\n-\t  (vec_duplicate:V64DI (match_operand:DI 2 \"gcn_alu_operand\"  \"BSv\"))))\n+\t  (vec_duplicate:V64DI (match_operand:DI 2 \"gcn_alu_operand\" \"DbSv\"))))\n    (clobber (reg:DI VCC_REG))]\n   \"\"\n   \"#\"\n@@ -1584,7 +1486,7 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn_and_split \"addv64di3_zext_dup2_exec\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"\t\t       \"= v\")\n+  [(set (match_operand:V64DI 0 \"register_operand\"\t\t       \"=&v\")\n \t(vec_merge:V64DI\n \t  (plus:V64DI\n \t    (zero_extend:V64DI (match_operand:V64SI 1 \"gcn_alu_operand\"\n@@ -1621,7 +1523,7 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn_and_split \"addv64di3_sext_dup2\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"\t\t      \"= v\")\n+  [(set (match_operand:V64DI 0 \"register_operand\"\t\t      \"=&v\")\n \t(plus:V64DI\n \t  (sign_extend:V64DI (match_operand:V64SI 1 \"gcn_alu_operand\" \" vA\"))\n \t  (vec_duplicate:V64DI (match_operand:DI 2 \"gcn_alu_operand\"  \"BSv\"))))\n@@ -1649,7 +1551,7 @@\n    (set_attr \"length\" \"8\")])\n \n (define_insn_and_split \"addv64di3_sext_dup2_exec\"\n-  [(set (match_operand:V64DI 0 \"register_operand\"\t\t       \"= v\")\n+  [(set (match_operand:V64DI 0 \"register_operand\"\t\t       \"=&v\")\n \t(vec_merge:V64DI\n \t  (plus:V64DI\n \t    (sign_extend:V64DI (match_operand:V64SI 1 \"gcn_alu_operand\"\n@@ -3201,9 +3103,11 @@\n   {\n     rtx tmp = gen_reg_rtx (V64DImode);\n     rtx v1 = gen_rtx_REG (V64SImode, VGPR_REGNO (1));\n+    rtx op1vec = gen_reg_rtx (V64DImode);\n \n     emit_insn (gen_mulv64di3_zext_dup2 (tmp, v1, operands[2]));\n-    emit_insn (gen_addv64di3_dup (operands[0], tmp, operands[1]));\n+    emit_insn (gen_vec_duplicatev64si (op1vec, operands[1]));\n+    emit_insn (gen_addv64di3 (operands[0], tmp, op1vec));\n     DONE;\n   })\n "}, {"sha": "4056f7257b59f461f76cd4b4efc1e736f3b87c11", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b01cc3421055806f51ac36a8d237536970504c/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b01cc3421055806f51ac36a8d237536970504c/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=66b01cc3421055806f51ac36a8d237536970504c", "patch": "@@ -902,16 +902,17 @@ gcn_constant_p (rtx x)\n \n /* Return true if X is a constant representable as two inline immediate\n    constants in a 64-bit instruction that is split into two 32-bit\n-   instructions.  */\n+   instructions.\n+   When MIXED is set, the low-part is permitted to use the full 32-bits.  */\n \n bool\n-gcn_inline_constant64_p (rtx x)\n+gcn_inline_constant64_p (rtx x, bool mixed)\n {\n   if (GET_CODE (x) == CONST_VECTOR)\n     {\n       if (!vgpr_vector_mode_p (GET_MODE (x)))\n \treturn false;\n-      if (!gcn_inline_constant64_p (CONST_VECTOR_ELT (x, 0)))\n+      if (!gcn_inline_constant64_p (CONST_VECTOR_ELT (x, 0), mixed))\n \treturn false;\n       for (int i = 1; i < 64; i++)\n \tif (CONST_VECTOR_ELT (x, i) != CONST_VECTOR_ELT (x, 0))\n@@ -925,7 +926,8 @@ gcn_inline_constant64_p (rtx x)\n \n   rtx val_lo = gcn_operand_part (DImode, x, 0);\n   rtx val_hi = gcn_operand_part (DImode, x, 1);\n-  return gcn_inline_constant_p (val_lo) && gcn_inline_constant_p (val_hi);\n+  return ((mixed || gcn_inline_constant_p (val_lo))\n+\t  && gcn_inline_constant_p (val_hi));\n }\n \n /* Return true if X is a constant representable as an immediate constant"}]}