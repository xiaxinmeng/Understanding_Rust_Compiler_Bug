{"sha": "9cbc7d65710edb891cb8fef8e1780491c7552a61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNiYzdkNjU3MTBlZGI4OTFjYjhmZWY4ZTE3ODA0OTFjNzU1MmE2MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-05-03T23:35:20Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-05-03T23:35:20Z"}, "message": "PR c++/85600 - virtual delete failure.\n\n\t* init.c (build_delete): Always save_expr when deleting.\n\nFrom-SVN: r259913", "tree": {"sha": "06bd2cb55e4e0ae66afac95e9716ce1aaab34b44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06bd2cb55e4e0ae66afac95e9716ce1aaab34b44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cbc7d65710edb891cb8fef8e1780491c7552a61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cbc7d65710edb891cb8fef8e1780491c7552a61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cbc7d65710edb891cb8fef8e1780491c7552a61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cbc7d65710edb891cb8fef8e1780491c7552a61/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "86f66562b73c61ae927b301d5dd907d7564c2e3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86f66562b73c61ae927b301d5dd907d7564c2e3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86f66562b73c61ae927b301d5dd907d7564c2e3f"}], "stats": {"total": 93, "additions": 63, "deletions": 30}, "files": [{"sha": "6ae6707949141f38bf2b2e9fc8d2f2f855bdb9cc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbc7d65710edb891cb8fef8e1780491c7552a61/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbc7d65710edb891cb8fef8e1780491c7552a61/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9cbc7d65710edb891cb8fef8e1780491c7552a61", "patch": "@@ -1,3 +1,8 @@\n+2018-05-03  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/85600 - virtual delete failure.\n+\t* init.c (build_delete): Always save_expr when deleting.\n+\n 2018-05-03  Nathan Sidwell  <nathan@acm.org>\n \n \t* decl.c (cxx_init_decl_processing): Remove flag_friend_injection."}, {"sha": "b934a0039ec75fcdfb77b1b7151134b3820ebfec", "filename": "gcc/cp/init.c", "status": "modified", "additions": 33, "deletions": 30, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbc7d65710edb891cb8fef8e1780491c7552a61/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbc7d65710edb891cb8fef8e1780491c7552a61/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=9cbc7d65710edb891cb8fef8e1780491c7552a61", "patch": "@@ -4601,6 +4601,9 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n \t\t\t       auto_delete, use_global_delete, complain);\n     }\n \n+  bool deleting = (auto_delete == sfk_deleting_destructor);\n+  gcc_assert (deleting == !(flags & LOOKUP_DESTRUCTOR));\n+\n   if (TYPE_PTR_P (otype))\n     {\n       addr = mark_rvalue_use (addr);\n@@ -4628,7 +4631,7 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n \t\t\t  \"declared when the class is defined\");\n \t\t}\n \t    }\n-\t  else if (auto_delete == sfk_deleting_destructor && warn_delnonvdtor\n+\t  else if (deleting && warn_delnonvdtor\n \t           && MAYBE_CLASS_TYPE_P (type) && !CLASSTYPE_FINAL (type)\n \t\t   && TYPE_POLYMORPHIC_P (type))\n \t    {\n@@ -4664,9 +4667,9 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n       addr = convert_force (build_pointer_type (type), addr, 0, complain);\n     }\n \n-  tree head = NULL_TREE;\n-  tree do_delete = NULL_TREE;\n-  tree ifexp;\n+  if (deleting)\n+    /* We will use ADDR multiple times so we must save it.  */\n+    addr = save_expr (addr);\n \n   bool virtual_p = false;\n   if (type_build_dtor_call (type))\n@@ -4676,13 +4679,18 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n       virtual_p = DECL_VIRTUAL_P (CLASSTYPE_DESTRUCTOR (type));\n     }\n \n+  tree head = NULL_TREE;\n+  tree do_delete = NULL_TREE;\n+\n+  if (!deleting)\n+    {\n+      /* Leave do_delete null.  */\n+    }\n   /* For `::delete x', we must not use the deleting destructor\n      since then we would not be sure to get the global `operator\n      delete'.  */\n-  if (use_global_delete && auto_delete == sfk_deleting_destructor)\n+  else if (use_global_delete)\n     {\n-      /* We will use ADDR multiple times so we must save it.  */\n-      addr = save_expr (addr);\n       head = get_target_expr (build_headof (addr));\n       /* Delete the object.  */\n       do_delete = build_op_delete_call (DELETE_EXPR,\n@@ -4699,11 +4707,8 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n   /* If the destructor is non-virtual, there is no deleting\n      variant.  Instead, we must explicitly call the appropriate\n      `operator delete' here.  */\n-  else if (!virtual_p\n-\t   && auto_delete == sfk_deleting_destructor)\n+  else if (!virtual_p)\n     {\n-      /* We will use ADDR multiple times so we must save it.  */\n-      addr = save_expr (addr);\n       /* Build the call.  */\n       do_delete = build_op_delete_call (DELETE_EXPR,\n \t\t\t\t\taddr,\n@@ -4715,8 +4720,7 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n       /* Call the complete object destructor.  */\n       auto_delete = sfk_complete_destructor;\n     }\n-  else if (auto_delete == sfk_deleting_destructor\n-\t   && TYPE_GETS_REG_DELETE (type))\n+  else if (TYPE_GETS_REG_DELETE (type))\n     {\n       /* Make sure we have access to the member op delete, even though\n \t we'll actually be calling it from the destructor.  */\n@@ -4735,6 +4739,9 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n   if (expr == error_mark_node)\n     return error_mark_node;\n \n+  if (!deleting)\n+    return expr;\n+\n   if (do_delete && !TREE_SIDE_EFFECTS (expr))\n     expr = do_delete;\n   else if (do_delete)\n@@ -4750,24 +4757,20 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n   if (head)\n     expr = build2 (COMPOUND_EXPR, void_type_node, head, expr);\n \n-  if (flags & LOOKUP_DESTRUCTOR)\n-    /* Explicit destructor call; don't check for null pointer.  */\n-    ifexp = integer_one_node;\n-  else\n-    {\n-      /* Handle deleting a null pointer.  */\n-      warning_sentinel s (warn_address);\n-      ifexp = cp_build_binary_op (input_location, NE_EXPR, addr,\n-\t\t\t\t  nullptr_node, complain);\n-      if (ifexp == error_mark_node)\n-\treturn error_mark_node;\n-      /* This is a compiler generated comparison, don't emit\n-\t e.g. -Wnonnull-compare warning for it.  */\n-      else if (TREE_CODE (ifexp) == NE_EXPR)\n-\tTREE_NO_WARNING (ifexp) = 1;\n-    }\n+  /* Handle deleting a null pointer.  */\n+  warning_sentinel s (warn_address);\n+  tree ifexp = cp_build_binary_op (input_location, NE_EXPR, addr,\n+\t\t\t\t   nullptr_node, complain);\n+  ifexp = cp_fully_fold (ifexp);\n+\n+  if (ifexp == error_mark_node)\n+    return error_mark_node;\n+  /* This is a compiler generated comparison, don't emit\n+     e.g. -Wnonnull-compare warning for it.  */\n+  else if (TREE_CODE (ifexp) == NE_EXPR)\n+    TREE_NO_WARNING (ifexp) = 1;\n \n-  if (ifexp != integer_one_node)\n+  if (!integer_nonzerop (ifexp))\n     expr = build3 (COND_EXPR, void_type_node, ifexp, expr, void_node);\n \n   return expr;"}, {"sha": "a0fc1793a19ada72f630e9237f6d032928f82a7e", "filename": "gcc/testsuite/g++.dg/expr/delete2.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbc7d65710edb891cb8fef8e1780491c7552a61/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fdelete2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbc7d65710edb891cb8fef8e1780491c7552a61/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fdelete2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fdelete2.C?ref=9cbc7d65710edb891cb8fef8e1780491c7552a61", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/85600\n+// { dg-do run }\n+\n+struct A\n+{\n+  virtual ~A() { }\n+};\n+\n+struct B: A { };\n+\n+A *p;\n+int count;\n+\n+A *f() {\n+  ++count;\n+  return p;\n+}\n+\n+int main()\n+{\n+  p = new B;\n+  delete f();\n+  if (count != 1)\n+    __builtin_abort();\n+}"}]}