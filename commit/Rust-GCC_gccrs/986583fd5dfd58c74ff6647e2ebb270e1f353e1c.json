{"sha": "986583fd5dfd58c74ff6647e2ebb270e1f353e1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg2NTgzZmQ1ZGZkNThjNzRmZjY2NDdlMmViYjI3MGUxZjM1M2UxYw==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2004-12-01T18:54:04Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2004-12-01T18:54:04Z"}, "message": "re PR tree-optimization/18291 (ICE in merge_alias_info)\n\n\n\tPR tree-optimization/18291\n\t* tree-ssa-copy.c (merge_alias_info): Fix merging of\n\tflow-sensitive alias information.  If the new pointer has no\n\tname tag, copy it from the original pointer.  Otherwise, make\n\tsure that the pointed-to sets have a common intersection.\n\ntestsuite/ChangeLog\n\n\tPR tree-optimization/18291\n\t* testsuite/gcc.c-torture/compile/pr18291.c: New test.\n\nFrom-SVN: r91574", "tree": {"sha": "517abe0b84a2cbbf48cf4e85005efa56a1331b33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/517abe0b84a2cbbf48cf4e85005efa56a1331b33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/986583fd5dfd58c74ff6647e2ebb270e1f353e1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/986583fd5dfd58c74ff6647e2ebb270e1f353e1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/986583fd5dfd58c74ff6647e2ebb270e1f353e1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/986583fd5dfd58c74ff6647e2ebb270e1f353e1c/comments", "author": null, "committer": null, "parents": [{"sha": "28a6dfca3de804ca4d41375d458c9ed42cf746ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28a6dfca3de804ca4d41375d458c9ed42cf746ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28a6dfca3de804ca4d41375d458c9ed42cf746ff"}], "stats": {"total": 73, "additions": 60, "deletions": 13}, "files": [{"sha": "dd853a66212d56d34c7339058eb1714865cf1edd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/986583fd5dfd58c74ff6647e2ebb270e1f353e1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/986583fd5dfd58c74ff6647e2ebb270e1f353e1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=986583fd5dfd58c74ff6647e2ebb270e1f353e1c", "patch": "@@ -1,3 +1,11 @@\n+2004-12-01  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR tree-optimization/18291\n+\t* tree-ssa-copy.c (merge_alias_info): Fix merging of\n+\tflow-sensitive alias information.  If the new pointer has no\n+\tname tag, copy it from the original pointer.  Otherwise, make\n+\tsure that the pointed-to sets have a common intersection.\n+\n 2004-12-01  Richard Henderson  <rth@redhat.com>\n \n \tPR rtl-opt/15289"}, {"sha": "ce903c62d2b4bec4ae3baef1ef67f0ac41afd386", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/986583fd5dfd58c74ff6647e2ebb270e1f353e1c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/986583fd5dfd58c74ff6647e2ebb270e1f353e1c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=986583fd5dfd58c74ff6647e2ebb270e1f353e1c", "patch": "@@ -1,3 +1,8 @@\n+2004-12-01  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR tree-optimization/18291\n+\t* testsuite/gcc.c-torture/compile/pr18291.c: New test.\n+\n 2004-12-01  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR C++/18729"}, {"sha": "7d983696f7d57e9c1526d2135816e89eb4df36e6", "filename": "gcc/testsuite/gcc.c-torture/compile/pr18291.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/986583fd5dfd58c74ff6647e2ebb270e1f353e1c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr18291.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/986583fd5dfd58c74ff6647e2ebb270e1f353e1c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr18291.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr18291.c?ref=986583fd5dfd58c74ff6647e2ebb270e1f353e1c", "patch": "@@ -0,0 +1,12 @@\n+int baz(int k2)\n+{\n+  int i, j, *p, k = 1, k1 = 0;\n+  if (k2)\n+    p = &j;\n+  else\n+    p = &i;\n+  if (k1)\n+    *p = 0 , p = &k;\n+  *p = 1;\n+  return k;\n+}"}, {"sha": "8a03c2435d13ebaaddd2c8aa6f0d1d8fbb30cfd7", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/986583fd5dfd58c74ff6647e2ebb270e1f353e1c/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/986583fd5dfd58c74ff6647e2ebb270e1f353e1c/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=986583fd5dfd58c74ff6647e2ebb270e1f353e1c", "patch": "@@ -178,7 +178,6 @@ merge_alias_info (tree orig, tree new)\n   tree orig_sym = SSA_NAME_VAR (orig);\n   var_ann_t new_ann = var_ann (new_sym);\n   var_ann_t orig_ann = var_ann (orig_sym);\n-  struct ptr_info_def *new_ptr_info;\n   struct ptr_info_def *orig_ptr_info;\n \n   gcc_assert (POINTER_TYPE_P (TREE_TYPE (orig)));\n@@ -203,18 +202,41 @@ merge_alias_info (tree orig, tree new)\n   else\n     gcc_assert (new_ann->type_mem_tag == orig_ann->type_mem_tag);\n \n-  /* Synchronize flow sensitive alias information.  If both pointers\n-     had flow information and they are inconsistent, then something\n-     has gone wrong.  */\n-  new_ptr_info = get_ptr_info (new);\n-  orig_ptr_info = get_ptr_info (orig);\n-\n-  if (new_ptr_info->name_mem_tag == NULL_TREE)\n-    memcpy (new_ptr_info, orig_ptr_info, sizeof (*new_ptr_info));\n-  else if (orig_ptr_info->name_mem_tag == NULL_TREE)\n-    memcpy (orig_ptr_info, new_ptr_info, sizeof (*orig_ptr_info));\n-  else if (orig_ptr_info->name_mem_tag != new_ptr_info->name_mem_tag)\n-    abort ();\n+  orig_ptr_info = SSA_NAME_PTR_INFO (orig);\n+  if (orig_ptr_info && orig_ptr_info->name_mem_tag)\n+    {\n+      struct ptr_info_def *new_ptr_info = get_ptr_info (new);\n+\n+      if (new_ptr_info->name_mem_tag == NULL_TREE)\n+\t{\n+\t  /* If ORIG had a name tag, it means that was dereferenced in\n+\t     the code, and since pointer NEW will now replace every\n+\t     occurrence of ORIG, we have to make sure that NEW has an\n+\t     appropriate tag.  If, NEW did not have a name tag, get it\n+\t     from ORIG.  */\n+\t  memcpy (new_ptr_info, orig_ptr_info, sizeof (*new_ptr_info));\n+\t  new_ptr_info->pt_vars = BITMAP_GGC_ALLOC ();\n+\t  bitmap_copy (new_ptr_info->pt_vars, orig_ptr_info->pt_vars);\n+\t  new_ptr_info->name_mem_tag = orig_ptr_info->name_mem_tag;\n+\t}\n+      else\n+\t{\n+\t  /* If NEW already had a name tag, nothing needs to be done.\n+\t     Note that pointer NEW may actually have a different set of\n+\t     pointed-to variables.\n+\t     \n+\t     However, since NEW is being copy-propagated into ORIG, it must\n+\t     always be true that the pointed-to set for pointer NEW is the\n+\t     same, or a subset, of the pointed-to set for pointer ORIG.  If\n+\t     this isn't the case, we shouldn't have been able to do the\n+\t     propagation of NEW into ORIG.  */\n+#if defined ENABLE_CHECKING\n+\t  if (orig_ptr_info->pt_vars && new_ptr_info->pt_vars)\n+\t    gcc_assert (bitmap_intersect_p (new_ptr_info->pt_vars,\n+\t\t\t\t\t    orig_ptr_info->pt_vars));\n+#endif\n+\t}\n+    }\n }   \n \n "}]}