{"sha": "541e35a6a3f8ca2d9877ea6c477e765e1d0a9497", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQxZTM1YTZhM2Y4Y2EyZDk4NzdlYTZjNDc3ZTc2NWUxZDBhOTQ5Nw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-11-28T09:06:48Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-11-28T09:06:48Z"}, "message": "re PR c/63862 (C frontend converts shift-count to int while standard wants integer promotions)\n\n\tPR c/63862\nc-family/\n\t* c-ubsan.c (ubsan_instrument_shift): Change the type of a MINUS_EXPR\n\tto op1_utype.\n\t* c-gimplify.c (c_gimplify_expr): Convert right operand of a shift\n\texpression to unsigned_type_node.\nc/\n\t* c-typeck.c (build_binary_op) <RSHIFT_EXPR, LSHIFT_EXPR>: Don't\n\tconvert the right operand to integer type.\ncp/\n\t* typeck.c (cp_build_binary_op) <RSHIFT_EXPR, LSHIFT_EXPR>: Don't\n\tconvert the right operand to integer type.\ntestsuite/\n\t* gcc.c-torture/execute/shiftopt-1.c: Don't XFAIL anymore.\n\t* c-c++-common/ubsan/shift-7.c: New test.\n\nFrom-SVN: r218142", "tree": {"sha": "4f8a839fa82870468359fe7d2e0ca156c9cfa4ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f8a839fa82870468359fe7d2e0ca156c9cfa4ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/541e35a6a3f8ca2d9877ea6c477e765e1d0a9497", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/541e35a6a3f8ca2d9877ea6c477e765e1d0a9497", "html_url": "https://github.com/Rust-GCC/gccrs/commit/541e35a6a3f8ca2d9877ea6c477e765e1d0a9497", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/541e35a6a3f8ca2d9877ea6c477e765e1d0a9497/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7e015fcefe33eded9a565e7e2ad3da11952249ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e015fcefe33eded9a565e7e2ad3da11952249ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e015fcefe33eded9a565e7e2ad3da11952249ae"}], "stats": {"total": 96, "additions": 72, "deletions": 24}, "files": [{"sha": "efb4735f01adf58ae22678015d85caea8a43a9c8", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/541e35a6a3f8ca2d9877ea6c477e765e1d0a9497/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/541e35a6a3f8ca2d9877ea6c477e765e1d0a9497/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=541e35a6a3f8ca2d9877ea6c477e765e1d0a9497", "patch": "@@ -1,3 +1,11 @@\n+2014-11-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/63862\n+\t* c-ubsan.c (ubsan_instrument_shift): Change the type of a MINUS_EXPR\n+\tto op1_utype.\n+\t* c-gimplify.c (c_gimplify_expr): Convert right operand of a shift\n+\texpression to unsigned_type_node.\n+\n 2014-11-20  Mark Wielaard  <mjw@redhat.com>\n \n \tPR debug/38757"}, {"sha": "2cfa5d96a65a17fa99c0a472e5030ed92632c054", "filename": "gcc/c-family/c-gimplify.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/541e35a6a3f8ca2d9877ea6c477e765e1d0a9497/gcc%2Fc-family%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/541e35a6a3f8ca2d9877ea6c477e765e1d0a9497/gcc%2Fc-family%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-gimplify.c?ref=541e35a6a3f8ca2d9877ea6c477e765e1d0a9497", "patch": "@@ -242,6 +242,24 @@ c_gimplify_expr (tree *expr_p, gimple_seq *pre_p ATTRIBUTE_UNUSED,\n \n   switch (code)\n     {\n+    case LSHIFT_EXPR:\n+    case RSHIFT_EXPR:\n+      {\n+\t/* We used to convert the right operand of a shift-expression\n+\t   to an integer_type_node in the FEs.  But it is unnecessary\n+\t   and not desirable for diagnostics and sanitizers.  We keep\n+\t   this here to not pessimize the code, but we convert to an\n+\t   unsigned type, because negative shift counts are undefined\n+\t   anyway.\n+\t   We should get rid of this conversion when we have a proper\n+\t   type demotion/promotion pass.  */\n+\ttree *op1_p = &TREE_OPERAND (*expr_p, 1);\n+\tif (TREE_CODE (TREE_TYPE (*op1_p)) != VECTOR_TYPE\n+\t    && TYPE_MAIN_VARIANT (TREE_TYPE (*op1_p)) != unsigned_type_node)\n+\t  *op1_p = convert (unsigned_type_node, *op1_p);\n+\tbreak;\n+      }\n+\n     case DECL_EXPR:\n       /* This is handled mostly by gimplify.c, but we have to deal with\n \t not warning about int x = x; as it is a GCC extension to turn off"}, {"sha": "96afc674866b5f6f6d0b62d92200f7f4170253cd", "filename": "gcc/c-family/c-ubsan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/541e35a6a3f8ca2d9877ea6c477e765e1d0a9497/gcc%2Fc-family%2Fc-ubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/541e35a6a3f8ca2d9877ea6c477e765e1d0a9497/gcc%2Fc-family%2Fc-ubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ubsan.c?ref=541e35a6a3f8ca2d9877ea6c477e765e1d0a9497", "patch": "@@ -151,7 +151,7 @@ ubsan_instrument_shift (location_t loc, enum tree_code code,\n       && !TYPE_UNSIGNED (type0)\n       && flag_isoc99)\n     {\n-      tree x = fold_build2 (MINUS_EXPR, unsigned_type_node, uprecm1,\n+      tree x = fold_build2 (MINUS_EXPR, op1_utype, uprecm1,\n \t\t\t    fold_convert (op1_utype, op1));\n       tt = fold_convert_loc (loc, unsigned_type_for (type0), op0);\n       tt = fold_build2 (RSHIFT_EXPR, TREE_TYPE (tt), tt, x);"}, {"sha": "0f42b10c0cfdc825a3e304fe82d8a85d419f7c5b", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/541e35a6a3f8ca2d9877ea6c477e765e1d0a9497/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/541e35a6a3f8ca2d9877ea6c477e765e1d0a9497/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=541e35a6a3f8ca2d9877ea6c477e765e1d0a9497", "patch": "@@ -1,3 +1,9 @@\n+2014-11-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/63862\n+\t* c-typeck.c (build_binary_op) <RSHIFT_EXPR, LSHIFT_EXPR>: Don't\n+\tconvert the right operand to integer type.\n+\n 2014-11-25  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/63877"}, {"sha": "bf0f30624d6cd2a4579b476d5e9cde74cb7ccd55", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/541e35a6a3f8ca2d9877ea6c477e765e1d0a9497/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/541e35a6a3f8ca2d9877ea6c477e765e1d0a9497/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=541e35a6a3f8ca2d9877ea6c477e765e1d0a9497", "patch": "@@ -10513,11 +10513,6 @@ build_binary_op (location_t location, enum tree_code code,\n \n \t  /* Use the type of the value to be shifted.  */\n \t  result_type = type0;\n-\t  /* Convert the non vector shift-count to an integer, regardless\n-\t     of size of value being shifted.  */\n-\t  if (TREE_CODE (TREE_TYPE (op1)) != VECTOR_TYPE\n-\t      && TYPE_MAIN_VARIANT (TREE_TYPE (op1)) != integer_type_node)\n-\t    op1 = convert (integer_type_node, op1);\n \t  /* Avoid converting op1 to result_type later.  */\n \t  converted = 1;\n \t}\n@@ -10563,11 +10558,6 @@ build_binary_op (location_t location, enum tree_code code,\n \n \t  /* Use the type of the value to be shifted.  */\n \t  result_type = type0;\n-\t  /* Convert the non vector shift-count to an integer, regardless\n-\t     of size of value being shifted.  */\n-\t  if (TREE_CODE (TREE_TYPE (op1)) != VECTOR_TYPE\n-\t      && TYPE_MAIN_VARIANT (TREE_TYPE (op1)) != integer_type_node)\n-\t    op1 = convert (integer_type_node, op1);\n \t  /* Avoid converting op1 to result_type later.  */\n \t  converted = 1;\n \t}"}, {"sha": "daf7f9ba06da6b4422a8109d4fab50c5c3ad2ecc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/541e35a6a3f8ca2d9877ea6c477e765e1d0a9497/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/541e35a6a3f8ca2d9877ea6c477e765e1d0a9497/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=541e35a6a3f8ca2d9877ea6c477e765e1d0a9497", "patch": "@@ -1,3 +1,9 @@\n+2014-11-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/63862\n+\t* typeck.c (cp_build_binary_op) <RSHIFT_EXPR, LSHIFT_EXPR>: Don't\n+\tconvert the right operand to integer type.\n+\n 2014-11-27  Kai Tietz  <ktietz@redhat.com>\n \n \tPR c++/63904"}, {"sha": "6ca346b8bd35e2c292dada0f94ffcdddcbc55da2", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/541e35a6a3f8ca2d9877ea6c477e765e1d0a9497/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/541e35a6a3f8ca2d9877ea6c477e765e1d0a9497/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=541e35a6a3f8ca2d9877ea6c477e765e1d0a9497", "patch": "@@ -4295,10 +4295,6 @@ cp_build_binary_op (location_t location,\n \t\t\t     \"right shift count >= width of type\");\n \t\t}\n \t    }\n-\t  /* Convert the shift-count to an integer, regardless of\n-\t     size of value being shifted.  */\n-\t  if (TYPE_MAIN_VARIANT (TREE_TYPE (op1)) != integer_type_node)\n-\t    op1 = cp_convert (integer_type_node, op1, complain);\n \t  /* Avoid converting op1 to result_type later.  */\n \t  converted = 1;\n \t}\n@@ -4344,10 +4340,6 @@ cp_build_binary_op (location_t location,\n \t\t\t     \"left shift count >= width of type\");\n \t\t}\n \t    }\n-\t  /* Convert the shift-count to an integer, regardless of\n-\t     size of value being shifted.  */\n-\t  if (TYPE_MAIN_VARIANT (TREE_TYPE (op1)) != integer_type_node)\n-\t    op1 = cp_convert (integer_type_node, op1, complain);\n \t  /* Avoid converting op1 to result_type later.  */\n \t  converted = 1;\n \t}"}, {"sha": "4bb39e1915bb21c12b7352a05285c748e63fd84a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/541e35a6a3f8ca2d9877ea6c477e765e1d0a9497/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/541e35a6a3f8ca2d9877ea6c477e765e1d0a9497/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=541e35a6a3f8ca2d9877ea6c477e765e1d0a9497", "patch": "@@ -1,3 +1,9 @@\n+2014-11-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/63862\n+\t* gcc.c-torture/execute/shiftopt-1.c: Don't XFAIL anymore.\n+\t* c-c++-common/ubsan/shift-7.c: New test.\n+\n 2014-11-28  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/64084"}, {"sha": "1e33273e573f9f22f1acfb43777e1fe601d6d9e7", "filename": "gcc/testsuite/c-c++-common/ubsan/shift-7.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/541e35a6a3f8ca2d9877ea6c477e765e1d0a9497/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fshift-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/541e35a6a3f8ca2d9877ea6c477e765e1d0a9497/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fshift-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fshift-7.c?ref=541e35a6a3f8ca2d9877ea6c477e765e1d0a9497", "patch": "@@ -0,0 +1,27 @@\n+/* PR c/63862 */\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=undefined\" } */\n+\n+unsigned long long int __attribute__ ((noinline, noclone))\n+foo (unsigned long long int i, unsigned long long int j)\n+{\n+  asm (\"\");\n+  return i >> j;\n+}\n+\n+unsigned long long int __attribute__ ((noinline, noclone))\n+bar (unsigned long long int i, unsigned long long int j)\n+{\n+  asm (\"\");\n+  return i << j;\n+}\n+\n+int\n+main ()\n+{\n+  foo (1ULL, 0x100000000ULL);\n+  bar (1ULL, 0x100000000ULL);\n+}\n+\n+/* { dg-output \"shift exponent 4294967296 is too large for \\[^\\n\\r]*-bit type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*shift exponent 4294967296 is too large for \\[^\\n\\r]*-bit type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "8c855b88895bbe211a683c34a984ed14176db6dc", "filename": "gcc/testsuite/gcc.c-torture/execute/shiftopt-1.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/541e35a6a3f8ca2d9877ea6c477e765e1d0a9497/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fshiftopt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/541e35a6a3f8ca2d9877ea6c477e765e1d0a9497/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fshiftopt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fshiftopt-1.c?ref=541e35a6a3f8ca2d9877ea6c477e765e1d0a9497", "patch": "@@ -22,16 +22,11 @@ utest (unsigned int x)\n   if (0 >> x != 0)\n     link_error ();\n \n-  /* XFAIL: the C frontend converts the shift amount to 'int'\n-     thus we get -1 >> (int)x which means the shift amount may\n-     be negative.  See PR63862.  */\n-#if 0\n   if (-1 >> x != -1)\n     link_error ();\n \n   if (~0 >> x != ~0)\n     link_error ();\n-#endif\n }\n \n void"}]}