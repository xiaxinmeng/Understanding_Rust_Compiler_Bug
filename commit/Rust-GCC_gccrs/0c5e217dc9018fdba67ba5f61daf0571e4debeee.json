{"sha": "0c5e217dc9018fdba67ba5f61daf0571e4debeee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM1ZTIxN2RjOTAxOGZkYmE2N2JhNWY2MWRhZjA1NzFlNGRlYmVlZQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-31T05:54:18Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-31T05:54:18Z"}, "message": "(rtx_to_tree_code): New function.\n\nFrom-SVN: r3944", "tree": {"sha": "684d8846e19f3d3c408508a4f86eb3bc1a215744", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/684d8846e19f3d3c408508a4f86eb3bc1a215744"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c5e217dc9018fdba67ba5f61daf0571e4debeee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c5e217dc9018fdba67ba5f61daf0571e4debeee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c5e217dc9018fdba67ba5f61daf0571e4debeee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c5e217dc9018fdba67ba5f61daf0571e4debeee/comments", "author": null, "committer": null, "parents": [{"sha": "d3159aee6e9cee2364f234181678f634cd3ba031", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3159aee6e9cee2364f234181678f634cd3ba031", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3159aee6e9cee2364f234181678f634cd3ba031"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "91cb7439099cea0aa63f4f3d2e0e751e101c7367", "filename": "gcc/explow.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c5e217dc9018fdba67ba5f61daf0571e4debeee/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c5e217dc9018fdba67ba5f61daf0571e4debeee/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=0c5e217dc9018fdba67ba5f61daf0571e4debeee", "patch": "@@ -1010,3 +1010,41 @@ hard_libcall_value (mode)\n {\n   return LIBCALL_VALUE (mode);\n }\n+\n+/* Look up the tree code for a given rtx code\n+   to provide the arithmetic operation for REAL_ARITHMETIC.\n+   The function returns an int because the caller may not know\n+   what `enum tree_code' means.  */\n+\n+int\n+rtx_to_tree_code (code)\n+     enum rtx_code code;\n+{\n+  enum tree_code tcode;\n+\n+  switch (code)\n+    {\n+    case PLUS:\n+      tcode = PLUS_EXPR;\n+      break;\n+    case MINUS:\n+      tcode = MINUS_EXPR;\n+      break;\n+    case MULT:\n+      tcode = MULT_EXPR;\n+      break;\n+    case DIV:\n+      tcode = RDIV_EXPR;\n+      break;\n+    case SMIN:\n+      tcode = MIN_EXPR;\n+      break;\n+    case SMAX:\n+      tcode = MAX_EXPR;\n+      break;\n+    default:\n+      tcode = LAST_AND_UNUSED_TREE_CODE;\n+      break;\n+    }\n+  return ((int) tcode);\n+}"}]}