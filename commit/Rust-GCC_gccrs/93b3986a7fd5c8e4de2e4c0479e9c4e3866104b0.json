{"sha": "93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNiMzk4NmE3ZmQ1YzhlNGRlMmU0YzA0NzllOWM0ZTM4NjYxMDRiMA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-03-23T19:11:19Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-03-23T19:11:19Z"}, "message": "BufferedOutputStream.java: Reformated.\n\n2003-03-23  Michael Koch  <konqueror@gmx.de>\n\n\t* java/io/BufferedOutputStream.java:\n\tReformated.\n\t* java/io/BufferedReader.java:\n\tReformated.\n\t* java/io/ByteArrayOutputStream.java\n\t(size): Fixed @see tag.\n\t* java/io/CharArrayWriter.java\n\t(size): Fixed @see tag.\n\t* java/io/DataInput.java:\n\tReformated.\n\t* java/io/DataOutput.java:\n\tReformated.\n\t* java/io/DataOutputStream.java:\n\tMerged copyright years with classpath.\n\t* java/io/Externalizable.java:\n\tReformated.\n\t* java/io/FileFilter.java:\n\tReformated.\n\t* java/io/FileInputStream.java:\n\tMerged copyright years with classpath.\n\t* java/io/FileOutputStream.java:\n\tMerged copyright years with classpath.\n\t* java/io/FilePermission.java\n\t(FilePermission): Replaced @XXX with FIXME:.\n\t* java/io/FileWriter.java:\n\tReformated.\n\t* java/io/FilenameFilter.java:\n\tReformated.\n\t* java/io/FilterInputStream.java:\n\tReformated.\n\t* java/io/FilterOutputStream.java:\n\tReformated.\n\t* java/io/FilterReader.java:\n\tReformated.\n\t* java/io/FilterWriter.java:\n\tReformated.\n\t* java/io/LineNumberInputStream.java\n\t(LineNumberInputStream): Replaced @code with HTML tags to make javadoc\n\thappy.\n\t(getLineNumber): Fixed @return tag.\n\t* java/io/ObjectInput.java:\n\tReformated.\n\t* java/io/ObjectOutput.java:\n\tReformated.\n\t* java/io/ObjectStreamClass.java:\n\tReformated.\n\t* java/io/PrintStream.java:\n\tMerged copyright years with classpath.\n\t* java/io/PushbackReader.java\n\t(PushbackReader): Replaced @code with @param.\n\t* java/io/SerializablePermission.java:\n\tReformated.\n\t* java/io/StreamTokenizer.java\n\t(resetSyntax): Fixed @see tag.\n\nFrom-SVN: r64748", "tree": {"sha": "efabea7956e26714f1be960193c07e0ff3930246", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efabea7956e26714f1be960193c07e0ff3930246"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/comments", "author": null, "committer": null, "parents": [{"sha": "4d1da12a32cf622224bb30a3f85131e10c842402", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d1da12a32cf622224bb30a3f85131e10c842402", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d1da12a32cf622224bb30a3f85131e10c842402"}], "stats": {"total": 1755, "additions": 786, "deletions": 969}, "files": [{"sha": "01a86c3a3f50e2d75ecba7ca2658f845a2d81567", "filename": "libjava/ChangeLog", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "patch": "@@ -1,3 +1,60 @@\n+2003-03-23  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/io/BufferedOutputStream.java:\n+\tReformated.\n+\t* java/io/BufferedReader.java:\n+\tReformated.\n+\t* java/io/ByteArrayOutputStream.java\n+\t(size): Fixed @see tag.\n+\t* java/io/CharArrayWriter.java\n+\t(size): Fixed @see tag.\n+\t* java/io/DataInput.java:\n+\tReformated.\n+\t* java/io/DataOutput.java:\n+\tReformated.\n+\t* java/io/DataOutputStream.java:\n+\tMerged copyright years with classpath.\n+\t* java/io/Externalizable.java:\n+\tReformated.\n+\t* java/io/FileFilter.java:\n+\tReformated.\n+\t* java/io/FileInputStream.java:\n+\tMerged copyright years with classpath.\n+\t* java/io/FileOutputStream.java:\n+\tMerged copyright years with classpath.\n+\t* java/io/FilePermission.java\n+\t(FilePermission): Replaced @XXX with FIXME:.\n+\t* java/io/FileWriter.java:\n+\tReformated.\n+\t* java/io/FilenameFilter.java:\n+\tReformated.\n+\t* java/io/FilterInputStream.java:\n+\tReformated.\n+\t* java/io/FilterOutputStream.java:\n+\tReformated.\n+\t* java/io/FilterReader.java:\n+\tReformated.\n+\t* java/io/FilterWriter.java:\n+\tReformated.\n+\t* java/io/LineNumberInputStream.java\n+\t(LineNumberInputStream): Replaced @code with HTML tags to make javadoc\n+\thappy.\n+\t(getLineNumber): Fixed @return tag.\n+\t* java/io/ObjectInput.java:\n+\tReformated.\n+\t* java/io/ObjectOutput.java:\n+\tReformated.\n+\t* java/io/ObjectStreamClass.java:\n+\tReformated.\n+\t* java/io/PrintStream.java:\n+\tMerged copyright years with classpath.\n+\t* java/io/PushbackReader.java\n+\t(PushbackReader): Replaced @code with @param.\n+\t* java/io/SerializablePermission.java:\n+\tReformated.\n+\t* java/io/StreamTokenizer.java\n+\t(resetSyntax): Fixed @see tag.\n+\n 2003-03-22  Richard Henderson  <rth@redhat.com>\n \n \t* sysdep/ia64/locks.h: Include ia64intrin.h."}, {"sha": "137dec5496ceb77d778176e927dc3b1453a3dc64", "filename": "libjava/java/io/BufferedOutputStream.java", "status": "modified", "additions": 60, "deletions": 92, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FBufferedOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FBufferedOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FBufferedOutputStream.java?ref=93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "patch": "@@ -50,81 +50,57 @@\n   */\n public class BufferedOutputStream extends FilterOutputStream\n {\n-  /*\n-   * Class Variables\n-   */\n-\n   /**\n-    * This is the default buffer size\n-    */\n-  private static final int DEFAULT_BUFFER_SIZE = 512;\n-\n-  /*************************************************************************/\n-\n-  /*\n-   * Instance Variables\n+   * This is the default buffer size\n    */\n+  private static final int DEFAULT_BUFFER_SIZE = 512;\n \n   /**\n-    * This is the internal byte array used for buffering output before\n-    * writing it.\n-    */\n+   * This is the internal byte array used for buffering output before\n+   * writing it.\n+   */\n   protected byte[] buf;\n \n   /**\n-    * This is the number of bytes that are currently in the buffer and\n-    * are waiting to be written to the underlying stream.  It always points to\n-    * the index into the buffer where the next byte of data will be stored\n-    */\n-  protected int count;\n-\n-  /*************************************************************************/\n-\n-  /*\n-   * Constructors\n+   * This is the number of bytes that are currently in the buffer and\n+   * are waiting to be written to the underlying stream.  It always points to\n+   * the index into the buffer where the next byte of data will be stored\n    */\n+  protected int count;\n \n   /**\n-    * This method initializes a new <code>BufferedOutputStream</code> instance\n-    * that will write to the specified subordinate <code>OutputStream</code>\n-    * and which will use a default buffer size of 512 bytes.\n-    *\n-    * @param out The underlying <code>OutputStream</code> to write data to\n-    */\n+   * This method initializes a new <code>BufferedOutputStream</code> instance\n+   * that will write to the specified subordinate <code>OutputStream</code>\n+   * and which will use a default buffer size of 512 bytes.\n+   *\n+   * @param out The underlying <code>OutputStream</code> to write data to\n+   */\n   public BufferedOutputStream(OutputStream out)\n   {\n     this(out, DEFAULT_BUFFER_SIZE);\n   }\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method initializes a new <code>BufferedOutputStream</code> instance\n-    * that will write to the specified subordinate <code>OutputStream</code>\n-    * and which will use the specified buffer size\n-    *\n-    * @param out The underlying <code>OutputStream</code> to write data to\n-    * @param size The size of the internal buffer\n-    */\n+   * This method initializes a new <code>BufferedOutputStream</code> instance\n+   * that will write to the specified subordinate <code>OutputStream</code>\n+   * and which will use the specified buffer size\n+   *\n+   * @param out The underlying <code>OutputStream</code> to write data to\n+   * @param size The size of the internal buffer\n+   */\n   public BufferedOutputStream(OutputStream out, int size)\n   {\n     super(out);\n \n     buf = new byte[size];\n   }\n \n-  /*************************************************************************/\n-\n-  /*\n-   * Instance Methods\n-   */\n-\n   /**\n-    * This method causes any currently buffered bytes to be immediately\n-    * written to the underlying output stream.\n-    *\n-    * @exception IOException If an error occurs\n-    */\n+   * This method causes any currently buffered bytes to be immediately\n+   * written to the underlying output stream.\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   public synchronized void flush() throws IOException\n   {\n     if (count == 0)\n@@ -135,47 +111,41 @@ public synchronized void flush() throws IOException\n     out.flush();\n   }\n \n-  /*************************************************************************/\n-\n-  /*\n-    * This method flushes any remaining buffered bytes then closes the \n-    * underlying output stream.  Any further attempts to write to this stream\n-    * may throw an exception\n-    *\n+  /**\n+   * This method flushes any remaining buffered bytes then closes the \n+   * underlying output stream.  Any further attempts to write to this stream\n+   * may throw an exception\n+   *\n   public synchronized void close() throws IOException\n   {\n     flush();\n     out.close();\n   }\n   */\n \n-  /*************************************************************************/\n-\n-  /*\n-    * This method runs when the object is garbage collected.  It is \n-    * responsible for ensuring that all buffered bytes are written and\n-    * for closing the underlying stream.\n-    *\n-    * @exception IOException If an error occurs (ignored by the Java runtime)\n-    *\n+  /**\n+   * This method runs when the object is garbage collected.  It is \n+   * responsible for ensuring that all buffered bytes are written and\n+   * for closing the underlying stream.\n+   *\n+   * @exception IOException If an error occurs (ignored by the Java runtime)\n+   *\n   protected void finalize() throws IOException\n   {\n     close();\n   }\n   */\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method writes a single byte of data.  This will be written to the\n-    * buffer instead of the underlying data source.  However, if the buffer\n-    * is filled as a result of this write request, it will be flushed to the\n-    * underlying output stream.\n-    *\n-    * @param b The byte of data to be written, passed as an int\n-    *\n-    * @exception IOException If an error occurs\n-    */\n+   * This method writes a single byte of data.  This will be written to the\n+   * buffer instead of the underlying data source.  However, if the buffer\n+   * is filled as a result of this write request, it will be flushed to the\n+   * underlying output stream.\n+   *\n+   * @param b The byte of data to be written, passed as an int\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   public synchronized void write(int b) throws IOException\n   {\n     if (count == buf.length)\n@@ -185,21 +155,19 @@ public synchronized void write(int b) throws IOException\n     ++count;\n   }\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method writes <code>len</code> bytes from the byte array \n-    * <code>buf</code> starting at position <code>offset</code> in the buffer. \n-    * These bytes will be written to the internal buffer.  However, if this\n-    * write operation fills the buffer, the buffer will be flushed to the\n-    * underlying output stream.\n-    *\n-    * @param buf The array of bytes to write.\n-    * @param offset The index into the byte array to start writing from.\n-    * @param len The number of bytes to write.\n-    *\n-    * @exception IOException If an error occurs\n-    */\n+   * This method writes <code>len</code> bytes from the byte array \n+   * <code>buf</code> starting at position <code>offset</code> in the buffer. \n+   * These bytes will be written to the internal buffer.  However, if this\n+   * write operation fills the buffer, the buffer will be flushed to the\n+   * underlying output stream.\n+   *\n+   * @param buf The array of bytes to write.\n+   * @param offset The index into the byte array to start writing from.\n+   * @param len The number of bytes to write.\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   public synchronized void write(byte[] buf, int offset, int len) \n     throws IOException\n   {"}, {"sha": "df53765d0b08ebde080c477e704ee5559aa84c8d", "filename": "libjava/java/io/BufferedReader.java", "status": "modified", "additions": 109, "deletions": 109, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FBufferedReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FBufferedReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FBufferedReader.java?ref=93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "patch": "@@ -44,19 +44,19 @@\n  */\n \n /**\n-  * This subclass of <code>FilterReader</code> buffers input from an \n-  * underlying implementation to provide a possibly more efficient read\n-  * mechanism.  It maintains the buffer and buffer state in instance \n-  * variables that are available to subclasses.  The default buffer size\n-  * of 512 chars can be overridden by the creator of the stream.\n-  * <p>\n-  * This class also implements mark/reset functionality.  It is capable\n-  * of remembering any number of input chars, to the limits of\n-  * system memory or the size of <code>Integer.MAX_VALUE</code>\n-  *\n-  * @author Per Bothner <bothner@cygnus.com>\n-  * @author Aaron M. Renn <arenn@urbanophile.com>\n-  */\n+ * This subclass of <code>FilterReader</code> buffers input from an \n+ * underlying implementation to provide a possibly more efficient read\n+ * mechanism.  It maintains the buffer and buffer state in instance \n+ * variables that are available to subclasses.  The default buffer size\n+ * of 512 chars can be overridden by the creator of the stream.\n+ * <p>\n+ * This class also implements mark/reset functionality.  It is capable\n+ * of remembering any number of input chars, to the limits of\n+ * system memory or the size of <code>Integer.MAX_VALUE</code>\n+ *\n+ * @author Per Bothner <bothner@cygnus.com>\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ */\n public class BufferedReader extends Reader\n {\n   Reader in;\n@@ -99,13 +99,13 @@ public BufferedReader(Reader in)\n   }\n \n   /**\n-    * Create a new <code>BufferedReader</code> that will read from the \n-    * specified subordinate stream with a buffer size that is specified by the \n-    * caller.\n-    *\n-    * @param in The subordinate stream to read from\n-    * @param bufsize The buffer size to use\n-    */\n+   * Create a new <code>BufferedReader</code> that will read from the \n+   * specified subordinate stream with a buffer size that is specified by the \n+   * caller.\n+   *\n+   * @param in The subordinate stream to read from\n+   * @param bufsize The buffer size to use\n+   */\n   public BufferedReader(Reader in, int size)\n   {\n     super(in.lock);\n@@ -114,10 +114,10 @@ public BufferedReader(Reader in, int size)\n   }\n \n   /**\n-    * This method closes the stream \n-    *\n-    * @exception IOException If an error occurs\n-    */\n+   * This method closes the stream \n+   *\n+   * @exception IOException If an error occurs\n+   */\n   public void close() throws IOException\n   {\n     synchronized (lock)\n@@ -130,36 +130,36 @@ public void close() throws IOException\n   }\n \n   /**\n-    * Returns <code>true</code> to indicate that this class supports mark/reset \n-    * functionality.\n-    *\n-    * @return <code>true</code>\n-    */\n+   * Returns <code>true</code> to indicate that this class supports mark/reset \n+   * functionality.\n+   *\n+   * @return <code>true</code>\n+   */\n   public boolean markSupported()\n   {\n     return true;\n   }\n \n   /**\n-    * Mark a position in the input to which the stream can be\n-    * \"reset\" by calling the <code>reset()</code> method.  The parameter\n-    * <code>readlimit</code> is the number of chars that can be read from the \n-    * stream after setting the mark before the mark becomes invalid.  For\n-    * example, if <code>mark()</code> is called with a read limit of 10, then \n-    * when 11 chars of data are read from the stream before the \n-    * <code>reset()</code> method is called, then the mark is invalid and the \n-    * stream object instance is not required to remember the mark.\n-    * <p>\n-    * Note that the number of chars that can be remembered by this method\n-    * can be greater than the size of the internal read buffer.  It is also\n-    * not dependent on the subordinate stream supporting mark/reset\n-    * functionality.\n-    *\n-    * @param readlimit The number of chars that can be read before the mark \n-    *        becomes invalid\n-    *\n-    * @exception IOException If an error occurs\n-    */\n+   * Mark a position in the input to which the stream can be\n+   * \"reset\" by calling the <code>reset()</code> method.  The parameter\n+   * <code>readlimit</code> is the number of chars that can be read from the \n+   * stream after setting the mark before the mark becomes invalid.  For\n+   * example, if <code>mark()</code> is called with a read limit of 10, then \n+   * when 11 chars of data are read from the stream before the \n+   * <code>reset()</code> method is called, then the mark is invalid and the \n+   * stream object instance is not required to remember the mark.\n+   * <p>\n+   * Note that the number of chars that can be remembered by this method\n+   * can be greater than the size of the internal read buffer.  It is also\n+   * not dependent on the subordinate stream supporting mark/reset\n+   * functionality.\n+   *\n+   * @param readlimit The number of chars that can be read before the mark \n+   *        becomes invalid\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   public void mark(int readLimit) throws IOException\n   {\n     synchronized (lock)\n@@ -207,16 +207,16 @@ public void mark(int readLimit) throws IOException\n   }\n \n   /**\n-    * Reset the stream to the point where the <code>mark()</code> method\n-    * was called.  Any chars that were read after the mark point was set will\n-    * be re-read during subsequent reads.\n-    * <p>\n-    * This method will throw an IOException if the number of chars read from\n-    * the stream since the call to <code>mark()</code> exceeds the mark limit\n-    * passed when establishing the mark.\n-    *\n-    * @exception IOException If an error occurs;\n-    */\n+   * Reset the stream to the point where the <code>mark()</code> method\n+   * was called.  Any chars that were read after the mark point was set will\n+   * be re-read during subsequent reads.\n+   * <p>\n+   * This method will throw an IOException if the number of chars read from\n+   * the stream since the call to <code>mark()</code> exceeds the mark limit\n+   * passed when establishing the mark.\n+   *\n+   * @exception IOException If an error occurs;\n+   */\n   public void reset() throws IOException\n   {\n     synchronized (lock)\n@@ -239,15 +239,15 @@ public void reset() throws IOException\n   }\n \n   /**\n-    * This method determines whether or not a stream is ready to be read.  If\n-    * This method returns <code>false</code> then this stream could (but is\n-    * not guaranteed to) block on the next read attempt.\n-    *\n-    * @return <code>true</code> if this stream is ready to be read, \n-    * <code>false</code> otherwise\n-    *\n-    * @exception IOException If an error occurs\n-    */\n+   * This method determines whether or not a stream is ready to be read.  If\n+   * This method returns <code>false</code> then this stream could (but is\n+   * not guaranteed to) block on the next read attempt.\n+   *\n+   * @return <code>true</code> if this stream is ready to be read, \n+   * <code>false</code> otherwise\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   public boolean ready() throws IOException\n   {\n     synchronized (lock)\n@@ -258,24 +258,24 @@ public boolean ready() throws IOException\n   }\n \n   /**\n-    * This method read chars from a stream and stores them into a caller\n-    * supplied buffer.  It starts storing the data at index \n-    * <code>offset</code> into\n-    * the buffer and attempts to read <code>len</code> chars.  This method can\n-    * return before reading the number of chars requested.  The actual number\n-    * of chars read is returned as an int.  A -1 is returned to indicate the\n-    * end of the stream.\n-    * <p>\n-    * This method will block until some data can be read.\n-    *\n-    * @param buf The array into which the chars read should be stored\n-    * @param offset The offset into the array to start storing chars\n-    * @param count The requested number of chars to read\n-    *\n-    * @return The actual number of chars read, or -1 if end of stream.\n-    *\n-    * @exception IOException If an error occurs.\n-    */\n+   * This method read chars from a stream and stores them into a caller\n+   * supplied buffer.  It starts storing the data at index \n+   * <code>offset</code> into\n+   * the buffer and attempts to read <code>len</code> chars.  This method can\n+   * return before reading the number of chars requested.  The actual number\n+   * of chars read is returned as an int.  A -1 is returned to indicate the\n+   * end of the stream.\n+   * <p>\n+   * This method will block until some data can be read.\n+   *\n+   * @param buf The array into which the chars read should be stored\n+   * @param offset The offset into the array to start storing chars\n+   * @param count The requested number of chars to read\n+   *\n+   * @return The actual number of chars read, or -1 if end of stream.\n+   *\n+   * @exception IOException If an error occurs.\n+   */\n   public int read(char[] buf, int offset, int count) throws IOException\n   {\n     synchronized (lock)\n@@ -396,16 +396,16 @@ private int lineEnd(int limit)\n   }\n \n   /**\n-    * This method reads a single line of text from the input stream, returning\n-    * it as a <code>String</code>.  A line is terminated by \"\\n\", a \"\\r\", or\n-    * an \"\\r\\n\" sequence.  The system dependent line separator is not used.\n-    * The line termination characters are not returned in the resulting\n-    * <code>String</code>.\n-    * \n-    * @return The line of text read, or <code>null</code> if end of stream.\n-    * \n-    * @exception IOException If an error occurs\n-    */\n+   * This method reads a single line of text from the input stream, returning\n+   * it as a <code>String</code>.  A line is terminated by \"\\n\", a \"\\r\", or\n+   * an \"\\r\\n\" sequence.  The system dependent line separator is not used.\n+   * The line termination characters are not returned in the resulting\n+   * <code>String</code>.\n+   * \n+   * @return The line of text read, or <code>null</code> if end of stream.\n+   * \n+   * @exception IOException If an error occurs\n+   */\n   public String readLine() throws IOException\n   {\n     checkStatus();\n@@ -470,20 +470,20 @@ public String readLine() throws IOException\n   }\n \n   /**\n-    * This method skips the specified number of chars in the stream.  It\n-    * returns the actual number of chars skipped, which may be less than the\n-    * requested amount.\n-    * <p>\n-    * This method first discards chars in the buffer, then calls the\n-    * <code>skip</code> method on the underlying stream to skip the \n-    * remaining chars.\n-    *\n-    * @param num_chars The requested number of chars to skip\n-    *\n-    * @return The actual number of chars skipped.\n-    *\n-    * @exception IOException If an error occurs\n-    */\n+   * This method skips the specified number of chars in the stream.  It\n+   * returns the actual number of chars skipped, which may be less than the\n+   * requested amount.\n+   * <p>\n+   * This method first discards chars in the buffer, then calls the\n+   * <code>skip</code> method on the underlying stream to skip the \n+   * remaining chars.\n+   *\n+   * @param num_chars The requested number of chars to skip\n+   *\n+   * @return The actual number of chars skipped.\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   public long skip(long count) throws IOException\n   {\n     synchronized (lock)"}, {"sha": "3e3e0c2001810503e2682c0921035e37cf180948", "filename": "libjava/java/io/ByteArrayOutputStream.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FByteArrayOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FByteArrayOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FByteArrayOutputStream.java?ref=93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "patch": "@@ -118,7 +118,7 @@ public synchronized void reset ()\n    *\n    * @return The number of bytes in the internal buffer\n    *\n-   * @see reset\n+   * @see #reset()\n    */\n   public int size ()\n   {"}, {"sha": "e9413f04072e9af7e7e2c75667198488c4499d56", "filename": "libjava/java/io/CharArrayWriter.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FCharArrayWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FCharArrayWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FCharArrayWriter.java?ref=93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "patch": "@@ -130,7 +130,7 @@ public void reset ()\n    *\n    * @return The number of chars in the internal buffer\n    *\n-   * @see reset\n+   * @see #reset()\n    */\n   public int size ()\n   {"}, {"sha": "bf7c478272e3c8d3315e6f560773c7dd3e4596e3", "filename": "libjava/java/io/DataInput.java", "status": "modified", "additions": 350, "deletions": 378, "changes": 728, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FDataInput.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FDataInput.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FDataInput.java?ref=93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "patch": "@@ -44,431 +44,403 @@\n  * Status:  Believed complete and correct.  */\n \n /**\n-  * This interface is implemented by classes that can data from streams \n-  * into Java primitive types. \n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @author Warren Levy <warrenl@cygnus.com>\n-  */\n+ * This interface is implemented by classes that can data from streams \n+ * into Java primitive types. \n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ */\n public interface DataInput\n {\n \n   /**\n-    * This method reads a Java boolean value from an input stream.  It does\n-    * so by reading a single byte of data.  If that byte is zero, then the\n-    * value returned is <code>false</code>.  If the byte is non-zero, then\n-    * the value returned is <code>true</code>.\n-    * <p>\n-    * This method can read a <code>boolean</code> written by an object\n-    * implementing the <code>writeBoolean()</code> method in the\n-    * <code>DataOutput</code> interface.\n-    *\n-    * @return The <code>boolean</code> value read\n-    *\n-    * @exception EOFException If end of file is reached before \n-    * reading the boolean\n-    * @exception IOException If any other error occurs\n-    */\n+   * This method reads a Java boolean value from an input stream.  It does\n+   * so by reading a single byte of data.  If that byte is zero, then the\n+   * value returned is <code>false</code>.  If the byte is non-zero, then\n+   * the value returned is <code>true</code>.\n+   * <p>\n+   * This method can read a <code>boolean</code> written by an object\n+   * implementing the <code>writeBoolean()</code> method in the\n+   * <code>DataOutput</code> interface.\n+   *\n+   * @return The <code>boolean</code> value read\n+   *\n+   * @exception EOFException If end of file is reached before \n+   * reading the boolean\n+   * @exception IOException If any other error occurs\n+   */\n   boolean readBoolean() throws EOFException, IOException;\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method reads a Java byte value from an input stream.  The value\n-    * is in the range of -128 to 127.\n-    * <p>\n-    * This method can read a <code>byte</code> written by an object\n-    * implementing the \n-    * <code>writeByte()</code> method in the <code>DataOutput</code> interface.\n-    * <p>\n-    * @return The <code>byte</code> value read\n-    *\n-    * @exception EOFException If end of file is reached before reading the byte\n-    * @exception IOException If any other error occurs\n-    *\n-    * @see DataOutput\n-    */\n+   * This method reads a Java byte value from an input stream.  The value\n+   * is in the range of -128 to 127.\n+   * <p>\n+   * This method can read a <code>byte</code> written by an object\n+   * implementing the \n+   * <code>writeByte()</code> method in the <code>DataOutput</code> interface.\n+   * <p>\n+   * @return The <code>byte</code> value read\n+   *\n+   * @exception EOFException If end of file is reached before reading the byte\n+   * @exception IOException If any other error occurs\n+   *\n+   * @see DataOutput\n+   */\n   byte readByte() throws EOFException, IOException;\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method reads 8 unsigned bits into a Java <code>int</code> value from\n-    * the stream. The value returned is in the range of 0 to 255.\n-    * <p>\n-    * This method can read an unsigned byte written by an object \n-    * implementing the\n-    * <code>writeUnsignedByte()</code> method in the <code>DataOutput</code>\n-    * interface.\n-    *\n-    * @return The unsigned bytes value read as a Java <code>int</code>.\n-    *\n-    * @exception EOFException If end of file is reached before reading the value\n-    * @exception IOException If any other error occurs\n-    *\n-    * @see DataOutput\n-    */\n+   * This method reads 8 unsigned bits into a Java <code>int</code> value from\n+   * the stream. The value returned is in the range of 0 to 255.\n+   * <p>\n+   * This method can read an unsigned byte written by an object \n+   * implementing the\n+   * <code>writeUnsignedByte()</code> method in the <code>DataOutput</code>\n+   * interface.\n+   *\n+   * @return The unsigned bytes value read as a Java <code>int</code>.\n+   *\n+   * @exception EOFException If end of file is reached before reading the value\n+   * @exception IOException If any other error occurs\n+   *\n+   * @see DataOutput\n+   */\n   int readUnsignedByte() throws EOFException, IOException;\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method reads a Java <code>char</code> value from an input stream.  \n-    * It operates by reading two bytes from the stream and converting them to \n-    * a single 16-bit Java <code>char</code>.  The two bytes are stored most\n-    * significant byte first (i.e., \"big endian\") regardless of the native\n-    * host byte ordering. \n-    * <p>\n-    * As an example, if <code>byte1</code> and <code>byte2</code> represent the\n-    * first and second byte read from the stream respectively, they will be\n-    * transformed to a <code>char</code> in the following manner:\n-    * <p>\n-    * <code>(char)((byte1 << 8) + byte2)</code>\n-    * <p>\n-    * This method can read a <code>char</code> written by an object implementing\n-    * the\n-    * <code>writeChar()</code> method in the <code>DataOutput</code> interface.\n-    *\n-    * @return The <code>char</code> value read \n-    *\n-    * @exception EOFException If end of file is reached before reading the char\n-    * @exception IOException If any other error occurs\n-    *\n-    * @see DataOutput\n-    */\n+   * This method reads a Java <code>char</code> value from an input stream.  \n+   * It operates by reading two bytes from the stream and converting them to \n+   * a single 16-bit Java <code>char</code>.  The two bytes are stored most\n+   * significant byte first (i.e., \"big endian\") regardless of the native\n+   * host byte ordering. \n+   * <p>\n+   * As an example, if <code>byte1</code> and <code>byte2</code> represent the\n+   * first and second byte read from the stream respectively, they will be\n+   * transformed to a <code>char</code> in the following manner:\n+   * <p>\n+   * <code>(char)((byte1 << 8) + byte2)</code>\n+   * <p>\n+   * This method can read a <code>char</code> written by an object implementing\n+   * the\n+   * <code>writeChar()</code> method in the <code>DataOutput</code> interface.\n+   *\n+   * @return The <code>char</code> value read \n+   *\n+   * @exception EOFException If end of file is reached before reading the char\n+   * @exception IOException If any other error occurs\n+   *\n+   * @see DataOutput\n+   */\n   char readChar() throws EOFException, IOException;\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method reads a signed 16-bit value into a Java in from the stream.\n-    * It operates by reading two bytes from the stream and converting them to \n-    * a single 16-bit Java <code>short</code>.  The two bytes are stored most\n-    * significant byte first (i.e., \"big endian\") regardless of the native\n-    * host byte ordering. \n-    * <p>\n-    * As an example, if <code>byte1</code> and <code>byte2</code> represent the\n-    * first and second byte read from the stream respectively, they will be\n-    * transformed to a <code>short</code> in the following manner:\n-    * <p>\n-    * <code>(short)((byte1 << 8) + byte2)</code>\n-    * <p>\n-    * The value returned is in the range of -32768 to 32767.\n-    * <p>\n-    * This method can read a <code>short</code> written by an object \n-    * implementing\n-    * the <code>writeShort()</code> method in the <code>DataOutput</code>\n-    * interface.\n-    *\n-    * @return The <code>short</code> value read\n-    *\n-    * @exception EOFException If end of file is reached before reading the value\n-    * @exception IOException If any other error occurs\n-    *\n-    * @see DataOutput\n-    */\n+   * This method reads a signed 16-bit value into a Java in from the stream.\n+   * It operates by reading two bytes from the stream and converting them to \n+   * a single 16-bit Java <code>short</code>.  The two bytes are stored most\n+   * significant byte first (i.e., \"big endian\") regardless of the native\n+   * host byte ordering. \n+   * <p>\n+   * As an example, if <code>byte1</code> and <code>byte2</code> represent the\n+   * first and second byte read from the stream respectively, they will be\n+   * transformed to a <code>short</code> in the following manner:\n+   * <p>\n+   * <code>(short)((byte1 << 8) + byte2)</code>\n+   * <p>\n+   * The value returned is in the range of -32768 to 32767.\n+   * <p>\n+   * This method can read a <code>short</code> written by an object \n+   * implementing\n+   * the <code>writeShort()</code> method in the <code>DataOutput</code>\n+   * interface.\n+   *\n+   * @return The <code>short</code> value read\n+   *\n+   * @exception EOFException If end of file is reached before reading the value\n+   * @exception IOException If any other error occurs\n+   *\n+   * @see DataOutput\n+   */\n   short readShort() throws EOFException, IOException;\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method reads 16 unsigned bits into a Java int value from the stream.\n-    * It operates by reading two bytes from the stream and converting them to \n-    * a single Java <code>int</code>.  The two bytes are stored most\n-    * significant byte first (i.e., \"big endian\") regardless of the native\n-    * host byte ordering. \n-    * <p>\n-    * As an example, if <code>byte1</code> and <code>byte2</code> represent the\n-    * first and second byte read from the stream respectively, they will be\n-    * transformed to an <code>int</code> in the following manner:\n-    * <p>\n-    * <code>(int)((byte1 << 8) + byte2)</code>\n-    * <p>\n-    * The value returned is in the range of 0 to 65535.\n-    * <p>\n-    * This method can read an unsigned short written by an object implementing\n-    * the <code>writeUnsignedShort()</code> method in the \n-    * <code>DataOutput</code>\n-    * interface.\n-    *\n-    * @return The unsigned short value read as a Java <code>int</code>.\n-    *\n-    * @exception EOFException If end of file is reached before reading \n-    * the value\n-    * @exception IOException If any other error occurs\n-    */\n+   * This method reads 16 unsigned bits into a Java int value from the stream.\n+   * It operates by reading two bytes from the stream and converting them to \n+   * a single Java <code>int</code>.  The two bytes are stored most\n+   * significant byte first (i.e., \"big endian\") regardless of the native\n+   * host byte ordering. \n+   * <p>\n+   * As an example, if <code>byte1</code> and <code>byte2</code> represent the\n+   * first and second byte read from the stream respectively, they will be\n+   * transformed to an <code>int</code> in the following manner:\n+   * <p>\n+   * <code>(int)((byte1 << 8) + byte2)</code>\n+   * <p>\n+   * The value returned is in the range of 0 to 65535.\n+   * <p>\n+   * This method can read an unsigned short written by an object implementing\n+   * the <code>writeUnsignedShort()</code> method in the \n+   * <code>DataOutput</code>\n+   * interface.\n+   *\n+   * @return The unsigned short value read as a Java <code>int</code>.\n+   *\n+   * @exception EOFException If end of file is reached before reading \n+   * the value\n+   * @exception IOException If any other error occurs\n+   */\n   int readUnsignedShort() throws EOFException, IOException;\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method reads a Java <code>int</code> value from an input stream\n-    * It operates by reading four bytes from the stream and converting them to \n-    * a single Java <code>int</code>.  The bytes are stored most\n-    * significant byte first (i.e., \"big endian\") regardless of the native\n-    * host byte ordering. \n-    * <p>\n-    * As an example, if <code>byte1</code> through <code>byte4</code> represent\n-    * the first four bytes read from the stream, they will be\n-    * transformed to an <code>int</code> in the following manner:\n-    * <p>\n-    * <code>(int)((byte1 << 24) + (byte2 << 16) + (byte3 << 8) + byte4))</code>\n-    * <p>\n-    * The value returned is in the range of -2147483648 to 2147483647.\n-    * <p>\n-    * This method can read an <code>int</code> written by an object \n-    * implementing the <code>writeInt()</code> method in the \n-    * <code>DataOutput</code> interface.\n-    *\n-    * @return The <code>int</code> value read\n-    *\n-    * @exception EOFException If end of file is reached before reading the int\n-    * @exception IOException If any other error occurs\n-    *\n-    * @see DataOutput\n-    */\n+   * This method reads a Java <code>int</code> value from an input stream\n+   * It operates by reading four bytes from the stream and converting them to \n+   * a single Java <code>int</code>.  The bytes are stored most\n+   * significant byte first (i.e., \"big endian\") regardless of the native\n+   * host byte ordering. \n+   * <p>\n+   * As an example, if <code>byte1</code> through <code>byte4</code> represent\n+   * the first four bytes read from the stream, they will be\n+   * transformed to an <code>int</code> in the following manner:\n+   * <p>\n+   * <code>(int)((byte1 << 24) + (byte2 << 16) + (byte3 << 8) + byte4))</code>\n+   * <p>\n+   * The value returned is in the range of -2147483648 to 2147483647.\n+   * <p>\n+   * This method can read an <code>int</code> written by an object \n+   * implementing the <code>writeInt()</code> method in the \n+   * <code>DataOutput</code> interface.\n+   *\n+   * @return The <code>int</code> value read\n+   *\n+   * @exception EOFException If end of file is reached before reading the int\n+   * @exception IOException If any other error occurs\n+   *\n+   * @see DataOutput\n+   */\n   int readInt() throws EOFException, IOException;\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method reads a Java <code>long</code> value from an input stream\n-    * It operates by reading eight bytes from the stream and converting them to \n-    * a single Java <code>long</code>.  The bytes are stored most\n-    * significant byte first (i.e., \"big endian\") regardless of the native\n-    * host byte ordering. \n-    * <p>\n-    * As an example, if <code>byte1</code> through <code>byte8</code> represent\n-    * the first eight bytes read from the stream, they will be\n-    * transformed to an <code>long</code> in the following manner:\n-    * <p>\n-    * <code>(long)((byte1 << 56) + (byte2 << 48) + (byte3 << 40) + \n-    * (byte4 << 32) + (byte5 << 24) + (byte6 << 16) + (byte7 << 8) + byte9))\n-    * </code>\n-    * <p>\n-    * The value returned is in the range of -9223372036854775808 to\n-    * 9223372036854775807.\n-    * <p>\n-    * This method can read an <code>long</code> written by an object \n-    * implementing the <code>writeLong()</code> method in the \n-    * <code>DataOutput</code> interface.\n-    *\n-    * @return The <code>long</code> value read\n-    *\n-    * @exception EOFException If end of file is reached before reading the long\n-    * @exception IOException If any other error occurs\n-    *\n-    * @see DataOutput\n-    */\n+   * This method reads a Java <code>long</code> value from an input stream\n+   * It operates by reading eight bytes from the stream and converting them to \n+   * a single Java <code>long</code>.  The bytes are stored most\n+   * significant byte first (i.e., \"big endian\") regardless of the native\n+   * host byte ordering. \n+   * <p>\n+   * As an example, if <code>byte1</code> through <code>byte8</code> represent\n+   * the first eight bytes read from the stream, they will be\n+   * transformed to an <code>long</code> in the following manner:\n+   * <p>\n+   * <code>(long)((byte1 << 56) + (byte2 << 48) + (byte3 << 40) + \n+   * (byte4 << 32) + (byte5 << 24) + (byte6 << 16) + (byte7 << 8) + byte9))\n+   * </code>\n+   * <p>\n+   * The value returned is in the range of -9223372036854775808 to\n+   * 9223372036854775807.\n+   * <p>\n+   * This method can read an <code>long</code> written by an object \n+   * implementing the <code>writeLong()</code> method in the \n+   * <code>DataOutput</code> interface.\n+   *\n+   * @return The <code>long</code> value read\n+   *\n+   * @exception EOFException If end of file is reached before reading the long\n+   * @exception IOException If any other error occurs\n+   *\n+   * @see DataOutput\n+   */\n   long readLong() throws EOFException, IOException;\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method reads a Java float value from an input stream.  It operates\n-    * by first reading an <code>int</code> value from the stream by calling the\n-    * <code>readInt()</code> method in this interface, then converts that\n-    * <code>int</code> to a <code>float</code> using the\n-    * <code>intBitsToFloat</code> method in the class\n-    * <code>java.lang.Float</code>.\n-    * <p>\n-    * This method can read a <code>float</code> written by an object \n-    * implementing\n-    * the <code>writeFloat()</code> method in the <code>DataOutput</code>\n-    * interface.\n-    *\n-    * @return The <code>float</code> value read\n-    *\n-    * @exception EOFException If end of file is reached before reading the \n-    * float\n-    * @exception IOException If any other error occurs\n-    *\n-    * @see java.lang.Float\n-    * @see DataOutput\n-    */\n+   * This method reads a Java float value from an input stream.  It operates\n+   * by first reading an <code>int</code> value from the stream by calling the\n+   * <code>readInt()</code> method in this interface, then converts that\n+   * <code>int</code> to a <code>float</code> using the\n+   * <code>intBitsToFloat</code> method in the class\n+   * <code>java.lang.Float</code>.\n+   * <p>\n+   * This method can read a <code>float</code> written by an object \n+   * implementing\n+   * the <code>writeFloat()</code> method in the <code>DataOutput</code>\n+   * interface.\n+   *\n+   * @return The <code>float</code> value read\n+   *\n+   * @exception EOFException If end of file is reached before reading the \n+   * float\n+   * @exception IOException If any other error occurs\n+   *\n+   * @see java.lang.Float\n+   * @see DataOutput\n+   */\n   float readFloat() throws EOFException, IOException;\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method reads a Java double value from an input stream.  It operates\n-    * by first reading a <code>long</code> value from the stream by calling the\n-    * <code>readLong()</code> method in this interface, then converts that\n-    * <code>long</code> to a <code>double</code> using the\n-    * <code>longBitsToDouble</code> method in the class\n-    * <code>java.lang.Double</code>.\n-    * <p>\n-    * This method can read a <code>double</code> written by an object\n-    * implementing the <code>writeDouble()</code> method in the\n-    * <code>DataOutput</code> interface.\n-    *\n-    * @return The <code>double</code> value read\n-    *\n-    * @exception EOFException If end of file is reached before reading the \n-    * double\n-    * @exception IOException If any other error occurs\n-    *\n-    * @see java.lang.Double\n-    * @see DataOutput\n-    */\n+   * This method reads a Java double value from an input stream.  It operates\n+   * by first reading a <code>long</code> value from the stream by calling the\n+   * <code>readLong()</code> method in this interface, then converts that\n+   * <code>long</code> to a <code>double</code> using the\n+   * <code>longBitsToDouble</code> method in the class\n+   * <code>java.lang.Double</code>.\n+   * <p>\n+   * This method can read a <code>double</code> written by an object\n+   * implementing the <code>writeDouble()</code> method in the\n+   * <code>DataOutput</code> interface.\n+   *\n+   * @return The <code>double</code> value read\n+   *\n+   * @exception EOFException If end of file is reached before reading the \n+   * double\n+   * @exception IOException If any other error occurs\n+   *\n+   * @see java.lang.Double\n+   * @see DataOutput\n+   */\n   double readDouble() throws EOFException, IOException;\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method reads the next line of text data from an input stream.\n-    * It operates by reading bytes and converting those bytes to \n-    * <code>char</code>\n-    * values by treating the byte read as the low eight bits of the\n-    * <code>char</code> and using 0 as the high eight bits.  Because of this,\n-    * it does not support the full 16-bit Unicode character set.\n-    * <P>\n-    * The reading of bytes ends when either the end of file or a line terminator\n-    * is encountered.  The bytes read are then returned as a \n-    * <code>String</code>.\n-    * A line terminator is a byte sequence consisting of either \n-    * <code>\\r</code>, <code>\\n</code> or <code>\\r\\n</code>.  These termination\n-    * charaters are discarded and are not returned as part of the string.\n-    * <p>\n-    * This method can read data that was written by an object implementing the\n-    * <code>writeLine()</code> method in <code>DataOutput</code>.\n-    *\n-    * @return The line read as a <code>String</code>\n-    *\n-    * @exception IOException If an error occurs\n-    *\n-    * @see DataOutput\n-    */\n+   * This method reads the next line of text data from an input stream.\n+   * It operates by reading bytes and converting those bytes to \n+   * <code>char</code>\n+   * values by treating the byte read as the low eight bits of the\n+   * <code>char</code> and using 0 as the high eight bits.  Because of this,\n+   * it does not support the full 16-bit Unicode character set.\n+   * <P>\n+   * The reading of bytes ends when either the end of file or a line terminator\n+   * is encountered.  The bytes read are then returned as a \n+   * <code>String</code>.\n+   * A line terminator is a byte sequence consisting of either \n+   * <code>\\r</code>, <code>\\n</code> or <code>\\r\\n</code>.  These termination\n+   * charaters are discarded and are not returned as part of the string.\n+   * <p>\n+   * This method can read data that was written by an object implementing the\n+   * <code>writeLine()</code> method in <code>DataOutput</code>.\n+   *\n+   * @return The line read as a <code>String</code>\n+   *\n+   * @exception IOException If an error occurs\n+   *\n+   * @see DataOutput\n+   */\n   String readLine() throws IOException;\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method reads a <code>String</code> from an input stream that is\n-    * encoded in a modified UTF-8 format.  This format has a leading two byte\n-    * sequence that contains the remaining number of bytes to read.  \n-    * This two byte\n-    * sequence is read using the <code>readUnsignedShort()</code> method of this\n-    * interface.\n-    *\n-    * After the number of remaining bytes have been determined, these bytes\n-    * are read an transformed into <code>char</code> values.  These\n-    * <code>char</code> values are encoded in the stream using either a one, \n-    * two, or three byte format.\n-    * The particular format in use can be determined by examining the first\n-    * byte read.  \n-    * <p>\n-    * If the first byte has a high order bit of 0, then\n-    * that character consists on only one byte.  This character value consists\n-    * of seven bits that are at positions 0 through 6 of the byte.  As an\n-    * example, if <code>byte1</code> is the byte read from the stream, it would\n-    * be converted to a <code>char</code> like so:\n-    * <p>\n-    * <code>(char)byte1</code>\n-    * <p>\n-    * If the first byte has 110 as its high order bits, then the \n-    * character consists of two bytes.  The bits that make up the character\n-    * value are in positions 0 through 4 of the first byte and bit positions\n-    * 0 through 5 of the second byte.  (The second byte should have \n-    * 10 as its high order bits).  These values are in most significant\n-    * byte first (i.e., \"big endian\") order.\n-    * <p>\n-    * As an example, if <code>byte1</code> and <code>byte2</code> are the first\n-    * two bytes read respectively, and the high order bits of them match the\n-    * patterns which indicate a two byte character encoding, then they would be\n-    * converted to a Java <code>char</code> like so:\n-    * <p>\n-    * <code>(char)(((byte1 & 0x1F) << 6) + (byte2 & 0x3F))</code>\n-    * <p>\n-    * If the first byte has a 1110 as its high order bits, then the\n-    * character consists of three bytes.  The bits that make up the character\n-    * value are in positions 0 through 3 of the first byte and bit positions\n-    * 0 through 5 of the other two bytes.  (The second and third bytes should\n-    * have 10 as their high order bits).  These values are in most\n-    * significant byte first (i.e., \"big endian\") order.\n-    * <p>\n-    * As an example, if <code>byte1</code>, <code>byte2</code>, and\n-    * <code>byte3</code> are the three bytes read, and the high order bits of\n-    * them match the patterns which indicate a three byte character encoding,\n-    * then they would be converted to a Java <code>char</code> like so:\n-    *\n-    * <code>\n-    * (char)(((byte1 & 0x0F) << 12) + ((byte2 & 0x3F) + (byte3 & 0x3F))\n-    * </code>\n-    *\n-    * Note that all characters are encoded in the method that requires the\n-    * fewest number of bytes with the exception of the character with the\n-    * value of <code>\\<llll>u0000</code> which is encoded as two bytes.  \n-    * This is a modification of the UTF standard used to prevent C language \n-    * style <code>NUL</code> values from appearing in the byte stream.\n-    * <p>\n-    * This method can read data that was written by an object implementing the\n-    * <code>writeUTF()</code> method in <code>DataOutput</code>.\n-    * \n-    * @returns The <code>String</code> read\n-    *\n-    * @exception EOFException If end of file is reached before reading the \n-    * String\n-    * @exception UTFDataFormatException If the data is not in UTF-8 format\n-    * @exception IOException If any other error occurs\n-    *\n-    * @see DataOutput\n-    */\n+   * This method reads a <code>String</code> from an input stream that is\n+   * encoded in a modified UTF-8 format.  This format has a leading two byte\n+   * sequence that contains the remaining number of bytes to read.  \n+   * This two byte\n+   * sequence is read using the <code>readUnsignedShort()</code> method of this\n+   * interface.\n+   *\n+   * After the number of remaining bytes have been determined, these bytes\n+   * are read an transformed into <code>char</code> values.  These\n+   * <code>char</code> values are encoded in the stream using either a one, \n+   * two, or three byte format.\n+   * The particular format in use can be determined by examining the first\n+   * byte read.  \n+   * <p>\n+   * If the first byte has a high order bit of 0, then\n+   * that character consists on only one byte.  This character value consists\n+   * of seven bits that are at positions 0 through 6 of the byte.  As an\n+   * example, if <code>byte1</code> is the byte read from the stream, it would\n+   * be converted to a <code>char</code> like so:\n+   * <p>\n+   * <code>(char)byte1</code>\n+   * <p>\n+   * If the first byte has 110 as its high order bits, then the \n+   * character consists of two bytes.  The bits that make up the character\n+   * value are in positions 0 through 4 of the first byte and bit positions\n+   * 0 through 5 of the second byte.  (The second byte should have \n+   * 10 as its high order bits).  These values are in most significant\n+   * byte first (i.e., \"big endian\") order.\n+   * <p>\n+   * As an example, if <code>byte1</code> and <code>byte2</code> are the first\n+   * two bytes read respectively, and the high order bits of them match the\n+   * patterns which indicate a two byte character encoding, then they would be\n+   * converted to a Java <code>char</code> like so:\n+   * <p>\n+   * <code>(char)(((byte1 & 0x1F) << 6) + (byte2 & 0x3F))</code>\n+   * <p>\n+   * If the first byte has a 1110 as its high order bits, then the\n+   * character consists of three bytes.  The bits that make up the character\n+   * value are in positions 0 through 3 of the first byte and bit positions\n+   * 0 through 5 of the other two bytes.  (The second and third bytes should\n+   * have 10 as their high order bits).  These values are in most\n+   * significant byte first (i.e., \"big endian\") order.\n+   * <p>\n+   * As an example, if <code>byte1</code>, <code>byte2</code>, and\n+   * <code>byte3</code> are the three bytes read, and the high order bits of\n+   * them match the patterns which indicate a three byte character encoding,\n+   * then they would be converted to a Java <code>char</code> like so:\n+   *\n+   * <code>\n+   * (char)(((byte1 & 0x0F) << 12) + ((byte2 & 0x3F) + (byte3 & 0x3F))\n+   * </code>\n+   *\n+   * Note that all characters are encoded in the method that requires the\n+   * fewest number of bytes with the exception of the character with the\n+   * value of <code>\\<llll>u0000</code> which is encoded as two bytes.  \n+   * This is a modification of the UTF standard used to prevent C language \n+   * style <code>NUL</code> values from appearing in the byte stream.\n+   * <p>\n+   * This method can read data that was written by an object implementing the\n+   * <code>writeUTF()</code> method in <code>DataOutput</code>.\n+   * \n+   * @returns The <code>String</code> read\n+   *\n+   * @exception EOFException If end of file is reached before reading the \n+   * String\n+   * @exception UTFDataFormatException If the data is not in UTF-8 format\n+   * @exception IOException If any other error occurs\n+   *\n+   * @see DataOutput\n+   */\n   String readUTF() throws EOFException, UTFDataFormatException, IOException;\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method reads raw bytes into the passed array until the array is\n-    * full.  Note that this method blocks until the data is available and\n-    * throws an exception if there is not enough data left in the stream to\n-    * fill the buffer\n-    *\n-    * @param buf The buffer into which to read the data\n-    *\n-    * @exception EOFException If end of file is reached before filling the \n-    * buffer\n-    * @exception IOException If any other error occurs\n-    */\n+   * This method reads raw bytes into the passed array until the array is\n+   * full.  Note that this method blocks until the data is available and\n+   * throws an exception if there is not enough data left in the stream to\n+   * fill the buffer\n+   *\n+   * @param buf The buffer into which to read the data\n+   *\n+   * @exception EOFException If end of file is reached before filling the \n+   * buffer\n+   * @exception IOException If any other error occurs\n+   */\n   void readFully(byte[] buf) throws EOFException, IOException;\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method reads raw bytes into the passed array <code>buf</code> \n-    * starting\n-    * <code>offset</code> bytes into the buffer.  The number of bytes read \n-    * will be\n-    * exactly <code>len</code>.  Note that this method blocks until the data is \n-    * available and * throws an exception if there is not enough data left in \n-    * the stream to read <code>len</code> bytes.\n-    *\n-    * @param buf The buffer into which to read the data\n-    * @param offset The offset into the buffer to start storing data\n-    * @param len The number of bytes to read into the buffer\n-    *\n-    * @exception EOFException If end of file is reached before filling the \n-    * buffer\n-    * @exception IOException If any other error occurs\n-    */\n+   * This method reads raw bytes into the passed array <code>buf</code> \n+   * starting\n+   * <code>offset</code> bytes into the buffer.  The number of bytes read \n+   * will be\n+   * exactly <code>len</code>.  Note that this method blocks until the data is \n+   * available and * throws an exception if there is not enough data left in \n+   * the stream to read <code>len</code> bytes.\n+   *\n+   * @param buf The buffer into which to read the data\n+   * @param offset The offset into the buffer to start storing data\n+   * @param len The number of bytes to read into the buffer\n+   *\n+   * @exception EOFException If end of file is reached before filling the \n+   * buffer\n+   * @exception IOException If any other error occurs\n+   */\n   void readFully(byte[] buf, int offset, int len) \n     throws EOFException, IOException;\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method skips and discards the specified number of bytes in an\n-    * input stream\n-    *\n-    * @param num_bytes The number of bytes to skip\n-    *\n-    * @return The number of bytes actually skipped, which will always be\n-    *         <code>num_bytes</code>\n-    *\n-    * @exception EOFException If end of file is reached before all bytes can be\n-    *                         skipped\n-    * @exception IOException If any other error occurs\n-    */\n+   * This method skips and discards the specified number of bytes in an\n+   * input stream\n+   *\n+   * @param num_bytes The number of bytes to skip\n+   *\n+   * @return The number of bytes actually skipped, which will always be\n+   *         <code>num_bytes</code>\n+   *\n+   * @exception EOFException If end of file is reached before all bytes can be\n+   *                         skipped\n+   * @exception IOException If any other error occurs\n+   */\n   int skipBytes(int n) throws EOFException, IOException;\n \n } // interface DataInput"}, {"sha": "5c626f5e467b77d80510b1a4d36b556214a97222", "filename": "libjava/java/io/DataOutput.java", "status": "modified", "additions": 98, "deletions": 124, "changes": 222, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FDataOutput.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FDataOutput.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FDataOutput.java?ref=93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "patch": "@@ -44,173 +44,147 @@\n  */\n \n /**\n-  * This interface is implemented by classes that can wrte data to streams \n-  * from Java primitive types.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @author Tom Tromey <tromey@cygnus.com>\n-  */\n+ * This interface is implemented by classes that can wrte data to streams \n+ * from Java primitive types.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ */\n public interface DataOutput\n {\n \n   /**\n-    * This method writes a Java boolean value to an output stream\n-    *\n-    * @param value The boolean value to write\n-    *\n-    * @exception IOException If an error occurs\n-    */\n+   * This method writes a Java boolean value to an output stream\n+   *\n+   * @param value The boolean value to write\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   void writeBoolean(boolean value) throws IOException;\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method writes a Java byte value to an output stream\n-    *\n-    * @param value The int value to write\n-    *\n-    * @exception IOException If an error occurs\n-    */\n+   * This method writes a Java byte value to an output stream\n+   *\n+   * @param value The int value to write\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   void writeByte(int value) throws IOException;\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method writes a Java char value to an output stream\n-    *\n-    * @param value The char value to write\n-    *\n-    * @exception IOException If an error occurs\n-    */\n+   * This method writes a Java char value to an output stream\n+   *\n+   * @param value The char value to write\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   void writeChar(int value) throws IOException;\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method writes a Java int value to an output stream as a 16 bit value\n-    *\n-    * @param value The int value to write as a 16-bit value\n-    *\n-    * @exception IOException If an error occurs\n-    */\n+   * This method writes a Java int value to an output stream as a 16 bit value\n+   *\n+   * @param value The int value to write as a 16-bit value\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   void writeShort(int value) throws IOException;\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method writes a Java int value to an output stream\n-    *\n-    * @param value The int value to write\n-    *\n-    * @exception IOException If an error occurs\n-    */\n+   * This method writes a Java int value to an output stream\n+   *\n+   * @param value The int value to write\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   void writeInt(int value) throws IOException;\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method writes a Java long value to an output stream\n-    *\n-    * @param value The long value to write\n-    *\n-    * @exception IOException If an error occurs\n-    */\n+   * This method writes a Java long value to an output stream\n+   *\n+   * @param value The long value to write\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   void writeLong(long value) throws IOException;\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method writes a Java float value to an output stream\n-    *\n-    * @param value The float value to write\n-    *\n-    * @exception IOException If an error occurs\n-    */\n+   * This method writes a Java float value to an output stream\n+   *\n+   * @param value The float value to write\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   void writeFloat(float value) throws IOException;\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method writes a Java double value to an output stream\n-    *\n-    * @param value The double value to write\n-    *\n-    * @exception IOException If any other error occurs\n-    */\n+   * This method writes a Java double value to an output stream\n+   *\n+   * @param value The double value to write\n+   *\n+   * @exception IOException If any other error occurs\n+   */\n   void writeDouble(double value) throws IOException;\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method writes a String to an output stream as an array of bytes\n-    *\n-    * @param value The String to write\n-    *\n-    * @exception IOException If an error occurs\n-    */\n+   * This method writes a String to an output stream as an array of bytes\n+   *\n+   * @param value The String to write\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   void writeBytes(String value) throws IOException;\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method writes a String to an output stream as an array of char's\n-    *\n-    * @param value The String to write\n-    *\n-    * @exception IOException If an error occurs\n-    */\n+   * This method writes a String to an output stream as an array of char's\n+   *\n+   * @param value The String to write\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   void writeChars(String value) throws IOException;\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method writes a String to an output stream encoded in\n-    * UTF-8 format.\n-    *\n-    * @param value The String to write\n-    *\n-    * @exception IOException If an error occurs\n-    */\n+   * This method writes a String to an output stream encoded in\n+   * UTF-8 format.\n+   *\n+   * @param value The String to write\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   void writeUTF(String value) throws IOException;\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method writes an 8-bit value (passed into the method as a Java\n-    * int) to an output stream.\n-    *\n-    * @param value The byte to write to the output stream\n-    *\n-    * @exception IOException If an error occurs\n-    */\n+   * This method writes an 8-bit value (passed into the method as a Java\n+   * int) to an output stream.\n+   *\n+   * @param value The byte to write to the output stream\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   void write(int value) throws IOException;\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method writes the raw byte array passed in to the output stream.\n-    *\n-    * @param buf The byte array to write\n-    *\n-    * @exception IOException If an error occurs\n-    */\n+   * This method writes the raw byte array passed in to the output stream.\n+   *\n+   * @param buf The byte array to write\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   void write(byte[] buf) throws IOException;\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method writes raw bytes from the passed array <code>buf</code> \n-    * starting\n-    * <code>offset</code> bytes into the buffer.  The number of bytes \n-    * written will be * exactly <code>len</code>. \n-    *\n-    * @param buf The buffer from which to write the data\n-    * @param offset The offset into the buffer to start writing data from\n-    * @param len The number of bytes to write from the buffer to the output \n-    * stream\n-    *\n-    * @exception IOException If any other error occurs\n-    */\n+   * This method writes raw bytes from the passed array <code>buf</code> \n+   * starting\n+   * <code>offset</code> bytes into the buffer.  The number of bytes \n+   * written will be * exactly <code>len</code>. \n+   *\n+   * @param buf The buffer from which to write the data\n+   * @param offset The offset into the buffer to start writing data from\n+   * @param len The number of bytes to write from the buffer to the output \n+   * stream\n+   *\n+   * @exception IOException If any other error occurs\n+   */\n   void write(byte[] buf, int offset, int len) throws IOException;\n \n } // interface DataOutput"}, {"sha": "61a00f5b4d6cce431863a3bf8d407d8277f41b3d", "filename": "libjava/java/io/DataOutputStream.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FDataOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FDataOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FDataOutputStream.java?ref=93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "patch": "@@ -1,5 +1,5 @@\n /* DataOutputStream.java -- Writes primitive Java datatypes to streams\n-   Copyright (C) 1998, 1999, 2001, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2001, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n "}, {"sha": "d0d0d4c392ea473213687385cffbbd3c41d81052", "filename": "libjava/java/io/Externalizable.java", "status": "modified", "additions": 57, "deletions": 59, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FExternalizable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FExternalizable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FExternalizable.java?ref=93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "patch": "@@ -39,74 +39,72 @@\n package java.io;\n \n /**\n-  * This interface provides a way that classes can completely control how\n-  * the data of their object instances  are written and read to and from \n-  * streams.  It has two methods which are used to write the data to a stream \n-  * and to read the data from a stream.  The read method must read the data \n-  * in exactly the way it was written by the write method. \n-  * <p>\n-  * Note that classes which implement this interface must take into account\n-  * that all superclass data must also be written to the stream as well.  \n-  * The class implementing this interface must figure out how to make that\n-  * happen.\n-  * <p>\n-  * This interface can be used to provide object persistence.  When an \n-  * object is to be stored externally, the <code>writeExternal</code> method is\n-  * called to save state.  When the object is restored, an instance is\n-  * created using the default no-argument constructor and the \n-  * <code>readExternal</code> method is used to restore the state.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n+ * This interface provides a way that classes can completely control how\n+ * the data of their object instances  are written and read to and from \n+ * streams.  It has two methods which are used to write the data to a stream \n+ * and to read the data from a stream.  The read method must read the data \n+ * in exactly the way it was written by the write method. \n+ * <p>\n+ * Note that classes which implement this interface must take into account\n+ * that all superclass data must also be written to the stream as well.  \n+ * The class implementing this interface must figure out how to make that\n+ * happen.\n+ * <p>\n+ * This interface can be used to provide object persistence.  When an \n+ * object is to be stored externally, the <code>writeExternal</code> method is\n+ * called to save state.  When the object is restored, an instance is\n+ * created using the default no-argument constructor and the \n+ * <code>readExternal</code> method is used to restore the state.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n public interface Externalizable extends Serializable\n {\n   static final long serialVersionUID = -282491828744381764L;\n \n   /**\n-    * This method restores an object's state by reading in the instance data\n-    * for the object from the passed in stream.  Note that this stream is not\n-    * a subclass of <code>InputStream</code>, but rather is a class that \n-    * implements\n-    * the <code>ObjectInput</code> interface.  That interface provides a \n-    * mechanism for\n-    * reading in Java data types from a stream.\n-    * <p>\n-    * Note that this method must be compatible with <code>writeExternal</code>.\n-    * It must read back the exact same types that were written by that\n-    * method in the exact order they were written.\n-    * <p>\n-    * If this method needs to read back an object instance, then the class\n-    * for that object must be found and loaded.  If that operation fails,\n-    * then this method throws a <code>ClassNotFoundException</code>\n-    *\n-    * @param in An <code>ObjectInput</code> instance for reading in the object \n-    * state\n-    *\n-    * @exception ClassNotFoundException If the class of an object being \n-    * restored cannot be found\n-    * @exception IOException If any other error occurs\n-    */\n+   * This method restores an object's state by reading in the instance data\n+   * for the object from the passed in stream.  Note that this stream is not\n+   * a subclass of <code>InputStream</code>, but rather is a class that \n+   * implements\n+   * the <code>ObjectInput</code> interface.  That interface provides a \n+   * mechanism for\n+   * reading in Java data types from a stream.\n+   * <p>\n+   * Note that this method must be compatible with <code>writeExternal</code>.\n+   * It must read back the exact same types that were written by that\n+   * method in the exact order they were written.\n+   * <p>\n+   * If this method needs to read back an object instance, then the class\n+   * for that object must be found and loaded.  If that operation fails,\n+   * then this method throws a <code>ClassNotFoundException</code>\n+   *\n+   * @param in An <code>ObjectInput</code> instance for reading in the object \n+   * state\n+   *\n+   * @exception ClassNotFoundException If the class of an object being \n+   * restored cannot be found\n+   * @exception IOException If any other error occurs\n+   */\n   public abstract void readExternal(ObjectInput in) \n     throws ClassNotFoundException, IOException;\n \n-  /*************************************************************************/\n-\n   /**\n-    * This method is responsible for writing the instance data of an object\n-    * to the passed in stream.  Note that this stream is not a subclass of\n-    * <code>OutputStream</code>, but rather is a class that implements the\n-    * <code>ObjectOutput</code> interface.  That interface provides a \n-    * number of methods\n-    * for writing Java data values to a stream.\n-    * <p>\n-    * Not that the implementation of this method must be coordinated with\n-    * the implementation of <code>readExternal</code>.\n-    *\n-    * @param out An <code>ObjectOutput</code> instance for writing the \n-    * object state\n-    *\n-    * @exception IOException If an error occurs\n-    */\n+   * This method is responsible for writing the instance data of an object\n+   * to the passed in stream.  Note that this stream is not a subclass of\n+   * <code>OutputStream</code>, but rather is a class that implements the\n+   * <code>ObjectOutput</code> interface.  That interface provides a \n+   * number of methods\n+   * for writing Java data values to a stream.\n+   * <p>\n+   * Not that the implementation of this method must be coordinated with\n+   * the implementation of <code>readExternal</code>.\n+   *\n+   * @param out An <code>ObjectOutput</code> instance for writing the \n+   * object state\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   public abstract void writeExternal(ObjectOutput out) throws IOException;\n \n } // interface Externalizable"}, {"sha": "68950d3b6c9d8fa22224f43f524c591274ed8942", "filename": "libjava/java/io/FileFilter.java", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FFileFilter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FFileFilter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileFilter.java?ref=93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "patch": "@@ -39,27 +39,27 @@\n package java.io;\n \n /**\n-  * This interface has one method which is used for filtering pathnames\n-  * returned in a pathname listing.  It is currently used by the \n-  * <code>File.listFiles()</code> method.\n-  * <p>\n-  * The method in this interface determines if a particular pathname should\n-  * or should not be included in the pathname listing.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n+ * This interface has one method which is used for filtering pathnames\n+ * returned in a pathname listing.  It is currently used by the \n+ * <code>File.listFiles()</code> method.\n+ * <p>\n+ * The method in this interface determines if a particular pathname should\n+ * or should not be included in the pathname listing.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n public interface FileFilter\n {\n \n   /**\n-    * This method determines whether or not a given pathname should be included\n-    * in a pathname listing.\n-    *\n-    * @param pathname The pathname to test\n-    *\n-    * @return <code>true</code> if the path should be included in the list, \n-    * <code>false</code> otherwise.\n-    */\n+   * This method determines whether or not a given pathname should be included\n+   * in a pathname listing.\n+   *\n+   * @param pathname The pathname to test\n+   *\n+   * @return <code>true</code> if the path should be included in the list, \n+   * <code>false</code> otherwise.\n+   */\n   public abstract boolean accept(File pathname);\n \n } // interface FileFilter"}, {"sha": "ae738af72a7239cd3091d6ef8d799e8d9ae5eb1b", "filename": "libjava/java/io/FileInputStream.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FFileInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FFileInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileInputStream.java?ref=93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "patch": "@@ -1,5 +1,5 @@\n /* FileInputStream.java -- An input stream that reads from disk files.\n-   Copyright (C) 1998, 1999, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n "}, {"sha": "e8a4f08e1ff2047eb663eb7e4929772800343335", "filename": "libjava/java/io/FileOutputStream.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FFileOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FFileOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileOutputStream.java?ref=93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "patch": "@@ -1,5 +1,5 @@\n /* FileOutputStream.java -- Writes to a file on disk.\n-   Copyright (C) 1998, 1999, 2001, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2001, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n "}, {"sha": "a86c7c9ff992aa9507363985fc27e649c91f8592", "filename": "libjava/java/io/FilePermission.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FFilePermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FFilePermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFilePermission.java?ref=93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "patch": "@@ -93,7 +93,7 @@ else if(action.equals(\"delete\"))\n    **        permission represents.\n    ** @param actionsString a comma-separated list of the actions this\n    **        permission represents.\n-   ** @XXX what to do when the file string is malformed?\n+   ** FIXME: what to do when the file string is malformed?\n    **/\n   public FilePermission(String pathExpression, String actionsString) \n   {"}, {"sha": "44db08c535ce2db0f9b28fa1f4c09367ca24bded", "filename": "libjava/java/io/FileWriter.java", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FFileWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FFileWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileWriter.java?ref=93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "patch": "@@ -54,8 +54,6 @@\n public class FileWriter extends OutputStreamWriter\n {\n \n-  /*************************************************************************/\n-\n   /*\n    * Constructors\n    */\n@@ -75,8 +73,6 @@ public FileWriter(File file) throws SecurityException, IOException\n     super(new FileOutputStream(file));\n   }\n \n-  /*************************************************************************/\n-\n   /**\n     * This method initializes a new <code>FileWriter</code> object to write\n     * to the specified <code>File</code> object.\n@@ -94,8 +90,6 @@ public FileWriter(File file, boolean append) throws IOException\n     super(new FileOutputStream(file, append));\n   }\n \n-  /*************************************************************************/\n-\n   /**\n     * This method initializes a new <code>FileWriter</code> object to write\n     * to the specified <code>FileDescriptor</code> object.\n@@ -110,8 +104,6 @@ public FileWriter(FileDescriptor fd) throws SecurityException\n     super(new FileOutputStream(fd));\n   }\n \n-  /*************************************************************************/\n-\n   /**\n     * This method intializes a new <code>FileWriter</code> object to \n     * write to the\n@@ -128,8 +120,6 @@ public FileWriter(String name) throws IOException\n     super(new FileOutputStream(name));\n   }\n \n-  /*************************************************************************/\n-\n   /**\n     * This method intializes a new <code>FileWriter</code> object to \n     * write to the"}, {"sha": "9e95b1e4987196c93a25b19f20ed5688756410f7", "filename": "libjava/java/io/FilenameFilter.java", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FFilenameFilter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FFilenameFilter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFilenameFilter.java?ref=93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "patch": "@@ -44,29 +44,29 @@\n  */\n \n /**\n-  * This interface has one method which is used for filtering filenames\n-  * returned in a directory listing.  It is currently used by the \n-  * <code>File.list()</code> method and by the filename dialog in AWT.\n-  * <p>\n-  * The method in this interface determines if a particular file should\n-  * or should not be included in the file listing.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @author Tom Tromey <tromey@cygnus.com>\n-  */\n+ * This interface has one method which is used for filtering filenames\n+ * returned in a directory listing.  It is currently used by the \n+ * <code>File.list()</code> method and by the filename dialog in AWT.\n+ * <p>\n+ * The method in this interface determines if a particular file should\n+ * or should not be included in the file listing.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ */\n public interface FilenameFilter\n {\n \n   /**\n-    * This method determines whether or not a given file should be included\n-    * in a directory listing.\n-    *\n-    * @param dir The <code>File</code> instance for the directory being read\n-    * @param name The name of the file to test\n-    *\n-    * @return <code>true</code> if the file should be included in the list,\n-    * <code>false</code> otherwise.\n-    */\n+   * This method determines whether or not a given file should be included\n+   * in a directory listing.\n+   *\n+   * @param dir The <code>File</code> instance for the directory being read\n+   * @param name The name of the file to test\n+   *\n+   * @return <code>true</code> if the file should be included in the list,\n+   * <code>false</code> otherwise.\n+   */\n   boolean accept(File dir, String name);\n \n } // interface FilenameFilter"}, {"sha": "fe45d33e36807920fdc76c4d184ff204e33e023d", "filename": "libjava/java/io/FilterInputStream.java", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FFilterInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FFilterInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFilterInputStream.java?ref=93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "patch": "@@ -69,25 +69,12 @@\n   */\n public class FilterInputStream extends InputStream\n {\n-\n-  /*************************************************************************/\n-\n-  /*\n-   * Instance Variables\n-   */\n-\n   /**\n     * This is the subordinate <code>InputStream</code> to which method calls\n     * are redirected\n     */\n   protected InputStream in;\n \n-  /*************************************************************************/\n-\n-  /*\n-   * Constructors\n-   */\n-\n   /**\n     * Create a <code>FilterInputStream</code> with the specified subordinate\n     * <code>InputStream</code>.\n@@ -99,12 +86,6 @@ protected FilterInputStream(InputStream in)\n     this.in = in;\n   }\n \n-  /*************************************************************************/\n-\n-  /*\n-   * Instance Methods\n-   */\n-\n   /**\n     * Calls the <code>in.mark(int)</code> method.\n     *\n@@ -115,8 +96,6 @@ public void mark(int readlimit)\n     in.mark(readlimit);\n   }\n \n-  /*************************************************************************/\n-\n   /**\n     * Calls the <code>in.markSupported()</code> method.\n     *\n@@ -128,8 +107,6 @@ public boolean markSupported()\n     return(in.markSupported());\n   }\n \n-  /*************************************************************************/\n-\n   /**\n     * Calls the <code>in.reset()</code> method.\n     *\n@@ -140,8 +117,6 @@ public void reset() throws IOException\n     in.reset();\n   }\n \n-  /*************************************************************************/\n-\n   /**\n     * Calls the <code>in.available()</code> method.\n     *\n@@ -154,8 +129,6 @@ public int available() throws IOException\n     return(in.available());\n   }\n \n-  /*************************************************************************/\n-\n   /**\n     * Calls the <code>in.skip(long)</code> method\n     *\n@@ -170,8 +143,6 @@ public long skip(long num_bytes) throws IOException\n     return(in.skip(num_bytes));\n   }\n \n-  /*************************************************************************/\n-\n   /**\n     * Calls the <code>in.read()</code> method\n     *\n@@ -184,8 +155,6 @@ public int read() throws IOException\n     return(in.read());\n   }\n \n-  /*************************************************************************/\n-\n   /**\n     * Calls the <code>read(byte[], int, int)</code> overloaded method.  \n     * Note that \n@@ -204,8 +173,6 @@ public int read(byte[] buf) throws IOException\n     return(read(buf, 0, buf.length));\n   }\n \n-  /*************************************************************************/\n-\n   /**\n     * Calls the <code>in.read(byte[], int, int)</code> method.\n     *\n@@ -222,8 +189,6 @@ public int read(byte[] buf, int offset, int len) throws IOException\n     return(in.read(buf, offset, len));\n   }\n \n-  /*************************************************************************/\n-\n   /**\n     * This method closes the input stream by closing the input stream that\n     * this object is filtering.  Future attempts to access this stream may"}, {"sha": "2144213f0e11a4e28e3631d8f9eed88bdd2c83c2", "filename": "libjava/java/io/FilterOutputStream.java", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FFilterOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FFilterOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFilterOutputStream.java?ref=93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "patch": "@@ -56,25 +56,12 @@\n   */\n public class FilterOutputStream extends OutputStream\n {\n-\n-  /*************************************************************************/\n-\n-  /*\n-   * Instance Variables\n-   */\n-\n   /**\n     * This is the subordinate <code>OutputStream</code> that this class\n     * redirects its method calls to.\n     */\n   protected OutputStream out;\n \n-  /*************************************************************************/\n-\n-  /*\n-   * Constructors\n-   */\n-\n   /**\n     * This method initializes an instance of <code>FilterOutputStream</code>\n     * to write to the specified subordinate <code>OutputStream</code>.\n@@ -86,12 +73,6 @@ public FilterOutputStream(OutputStream out)\n     this.out = out;\n   }\n \n-  /*************************************************************************/\n-\n-  /*\n-   * Instance Methods\n-   */\n-\n   /**\n     * This method closes the underlying <code>OutputStream</code>.  Any\n     * further attempts to write to this stream may throw an exception.\n@@ -104,8 +85,6 @@ public void close() throws IOException\n     out.close();\n   }\n \n-  /*************************************************************************/\n-\n   /**\n     * This method attempt to flush all buffered output to be written to the\n     * underlying output sink.\n@@ -117,8 +96,6 @@ public void flush() throws IOException\n     out.flush();\n   }\n \n-  /*************************************************************************/\n-\n   /**\n     * This method writes a single byte of output to the underlying\n     * <code>OutputStream</code>.\n@@ -132,8 +109,6 @@ public void write(int b) throws IOException\n     out.write(b);\n   }\n \n-  /*************************************************************************/\n-\n   /**\n     * This method writes all the bytes in the specified array to the underlying\n     * <code>OutputStream</code>.  It does this by calling the three parameter\n@@ -151,8 +126,6 @@ public void write(byte[] buf) throws IOException\n     write(buf, 0, buf.length);\n   }\n \n-  /*************************************************************************/\n-\n   /**\n     * This method calls the <code>write(int)</code> method <code>len</code>\n     * times for all bytes from the array <code>buf</code> starting at index"}, {"sha": "caf102b082a7c75fd1582d70537ae0ff7a0326ff", "filename": "libjava/java/io/FilterReader.java", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FFilterReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FFilterReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFilterReader.java?ref=93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "patch": "@@ -63,22 +63,12 @@\n   */\n public abstract class FilterReader extends Reader\n {\n-  /*\n-   * Instance Variables\n-   */\n-\n   /**\n     * This is the subordinate <code>Reader</code> to which method calls\n     * are redirected\n     */\n   protected Reader in;\n \n-  /*************************************************************************/\n-\n-  /*\n-   * Constructors\n-   */\n-\n   /**\n     * Create a <code>FilterReader</code> with the specified subordinate\n     * <code>Reader</code>.\n@@ -93,12 +83,6 @@ protected FilterReader(Reader in)\n     this.in = in;\n   }\n \n-  /*************************************************************************/\n-\n-  /*\n-   * Instance Methods\n-   */\n-\n   /**\n     * Calls the <code>in.mark(int)</code> method.\n     *\n@@ -111,8 +95,6 @@ public void mark(int readlimit) throws IOException\n     in.mark(readlimit);\n   }\n \n-  /*************************************************************************/\n-\n   /**\n     * Calls the <code>in.markSupported()</code> method.\n     *\n@@ -124,8 +106,6 @@ public boolean markSupported()\n     return(in.markSupported());\n   }\n \n-  /*************************************************************************/\n-\n   /**\n     * Calls the <code>in.reset()</code> method.\n     *\n@@ -136,8 +116,6 @@ public void reset() throws IOException\n     in.reset();\n   }\n \n-  /*************************************************************************/\n-\n   /**\n     * Calls the <code>in.read()</code> method.\n     *\n@@ -150,8 +128,6 @@ public boolean ready() throws IOException\n     return(in.ready());\n   }\n \n-  /*************************************************************************/\n-\n   /**\n     * Calls the <code>in.skip(long)</code> method\n     *\n@@ -166,8 +142,6 @@ public long skip(long num_chars) throws IOException\n     return(in.skip(num_chars));\n   }\n \n-  /*************************************************************************/\n-\n   /**\n     * Calls the <code>in.read()</code> method\n     *\n@@ -180,8 +154,6 @@ public int read() throws IOException\n     return(in.read());\n   }\n \n-  /*************************************************************************/\n-\n   /**\n     * Calls the <code>in.read(char[], int, int)</code> method.\n     *\n@@ -198,8 +170,6 @@ public int read(char[] buf, int offset, int len) throws IOException\n     return(in.read(buf, offset, len));\n   }\n \n-  /*************************************************************************/\n-\n   /**\n     * This method closes the stream by calling the <code>close()</code> method\n     * of the underlying stream."}, {"sha": "87bae4f0bd8cf01775a389c5e5742380daf6b1a7", "filename": "libjava/java/io/FilterWriter.java", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FFilterWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FFilterWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFilterWriter.java?ref=93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "patch": "@@ -56,22 +56,12 @@\n   */\n public abstract class FilterWriter extends Writer\n {\n-  /*\n-   * Instance Variables\n-   */\n-\n   /**\n     * This is the subordinate <code>Writer</code> that this class\n     * redirects its method calls to.\n     */\n   protected Writer out;\n \n-  /*************************************************************************/\n-\n-  /*\n-   * Constructors\n-   */\n-\n   /**\n     * This method initializes an instance of <code>FilterWriter</code>\n     * to write to the specified subordinate <code>Writer</code>.\n@@ -86,12 +76,6 @@ protected FilterWriter(Writer out)\n     this.out = out;\n   }\n \n-  /*************************************************************************/\n-\n-  /*\n-   * Instance Methods\n-   */\n-\n   /**\n     * This method closes the underlying <code>Writer</code>.  Any\n     * further attempts to write to this stream may throw an exception.\n@@ -103,8 +87,6 @@ public void close() throws IOException\n     out.close();\n   }\n \n-  /*************************************************************************/\n-\n   /**\n     * This method attempt to flush all buffered output to be written to the\n     * underlying output sink.\n@@ -116,8 +98,6 @@ public void flush() throws IOException\n     out.flush();\n   }\n \n-  /*************************************************************************/\n-\n   /**\n     * This method writes a single char of output to the underlying\n     * <code>Writer</code>.\n@@ -131,8 +111,6 @@ public void write(int b) throws IOException\n     out.write(b);\n   }\n \n-  /*************************************************************************/\n-\n   /**\n     * This method writes <code>len</code> chars from the array <code>buf</code>\n     * starting at index <code>offset</code> to the underlying\n@@ -149,8 +127,6 @@ public void write(char[] buf, int offset, int len) throws IOException\n     out.write(buf, offset, len);\n   }\n \n-  /*************************************************************************/\n-\n   /**\n     * This method writes <code>len</code> chars from the <code>String</code>\n     * starting at position <code>offset</code>."}, {"sha": "ee0ce2c799e42f3514ef574334d1e0db69cf39dd", "filename": "libjava/java/io/LineNumberInputStream.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FLineNumberInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FLineNumberInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FLineNumberInputStream.java?ref=93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "patch": "@@ -57,7 +57,7 @@\n  * stream, it has the same mark/reset functionality as the underlying\n  * stream.  The <code>mark()</code> and <code>reset()</code> methods\n  * in this class handle line numbers correctly.  Calling\n- * @code{reset()} resets the line number to the point at which\n+ * <code>reset()</code> resets the line number to the point at which\n  * <code>mark()</code> was called if the subordinate stream supports\n  * that functionality.\n  * <p>\n@@ -119,7 +119,7 @@ public int available() throws IOException\n   /**\n    * This method returns the current line number\n    *\n-   * @returns The current line number\n+   * @return The current line number\n    */\n   public int getLineNumber()\n   {"}, {"sha": "831203a14a4683bdc811b8f83e8b71e02d4b3b72", "filename": "libjava/java/io/ObjectInput.java", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FObjectInput.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FObjectInput.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectInput.java?ref=93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "patch": "@@ -58,8 +58,6 @@ public interface ObjectInput extends DataInput\n     */\n   public abstract int available() throws IOException;\n \n-  /*************************************************************************/\n-\n   /**\n     * This method reading a byte of data from a stream.  It returns that byte\n     * as an int.  This method blocks if no data is available to be read.\n@@ -70,8 +68,6 @@ public interface ObjectInput extends DataInput\n     */\n   public abstract int read() throws IOException;\n \n-  /*************************************************************************/\n-\n   /**\n     * This method reads raw bytes and stores them them a byte array buffer.\n     * Note that this method will block if no data is available.  However, \n@@ -86,8 +82,6 @@ public interface ObjectInput extends DataInput\n     */\n   public abstract int read(byte[] buf) throws IOException;\n \n-  /*************************************************************************/\n-\n   /**\n     * This method reads raw bytes and stores them in a byte array buffer\n     * <code>buf</code> starting at position <code>offset</code> into the \n@@ -107,8 +101,6 @@ public interface ObjectInput extends DataInput\n     */\n   public abstract int read(byte[] buf, int offset, int len) throws IOException;\n \n-  /*************************************************************************/\n-\n   /**\n     * Reads an object instance and returns it.  If the class for the object\n     * being read cannot be found, then a ClassNotFoundException will\n@@ -123,8 +115,6 @@ public interface ObjectInput extends DataInput\n   public abstract Object readObject() \n     throws ClassNotFoundException, IOException;\n \n-  /*************************************************************************/\n-\n   /**\n     * This method causes the specified number of bytes to be read and\n     * discarded.  It is possible that fewer than the requested number of bytes\n@@ -138,8 +128,6 @@ public abstract Object readObject()\n     */\n   public abstract long skip(long num_bytes) throws IOException;\n \n-  /*************************************************************************/\n-\n   /**\n     * This method closes the input source\n     *"}, {"sha": "f9e923b19b9cbcb52209fe4266d8addc4e4dd0b2", "filename": "libjava/java/io/ObjectOutput.java", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FObjectOutput.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FObjectOutput.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectOutput.java?ref=93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "patch": "@@ -58,8 +58,6 @@ public interface ObjectOutput extends DataOutput\n     */\n   public abstract void write(int b) throws IOException;\n \n-  /*************************************************************************/\n-\n   /**\n     * This method writes all the bytes in the specified byte array to the\n     * output stream.\n@@ -70,8 +68,6 @@ public interface ObjectOutput extends DataOutput\n     */\n   public abstract void write(byte[] buf) throws IOException;\n \n-  /*************************************************************************/\n-\n   /**\n     * This method writes <code>len</code> bytes from the specified array\n     * starting at index <code>offset</code> into that array.\n@@ -85,8 +81,6 @@ public interface ObjectOutput extends DataOutput\n   public abstract void write(byte[] buf, int offset, int len) \n     throws IOException;\n \n-  /*************************************************************************/\n-\n   /**\n     * This method writes a object instance to a stream.  The format of the\n     * data written is determined by the actual implementation of this method\n@@ -97,8 +91,6 @@ public abstract void write(byte[] buf, int offset, int len)\n     */\n   public abstract void writeObject(Object obj) throws IOException;\n \n-  /*************************************************************************/\n-\n   /**\n     * This method causes any buffered data to be flushed out to the underlying\n     * stream\n@@ -107,8 +99,6 @@ public abstract void write(byte[] buf, int offset, int len)\n     */\n   public abstract void flush() throws IOException;\n \n-  /*************************************************************************/\n-\n   /**\n     * This method closes the underlying stream.\n     *"}, {"sha": "ab233f166d0fb85275bde4915973d7541547af16", "filename": "libjava/java/io/ObjectStreamClass.java", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FObjectStreamClass.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FObjectStreamClass.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectStreamClass.java?ref=93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "patch": "@@ -166,14 +166,14 @@ public ObjectStreamField getField (String name)\n \n \n   /**\n-     Returns a textual representation of this\n-     <code>ObjectStreamClass</code> object including the name of the\n-     class it represents as well as that class's serial version\n-     stream-unique identifier.\n-\n-     @see getSerialVersionUID ()\n-     @see getName ()\n-  */\n+   * Returns a textual representation of this\n+   * <code>ObjectStreamClass</code> object including the name of the\n+   * class it represents as well as that class's serial version\n+   * stream-unique identifier.\n+   *\n+   * @see #getSerialVersionUID()\n+   * @see #getName()\n+   */\n   public String toString ()\n   {\n     return \"java.io.ObjectStreamClass< \" + name + \", \" + uid + \" >\";"}, {"sha": "3101bb5dea2fc1da4179f1b1a5cf3481c31f68bf", "filename": "libjava/java/io/PrintStream.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FPrintStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FPrintStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPrintStream.java?ref=93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "patch": "@@ -1,5 +1,5 @@\n /* PrintStream.java -- OutputStream for printing output\n-   Copyright (C) 1998, 1999, 2001, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1998,2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n "}, {"sha": "4b442e52c6f2f88d5bce5c779557c2c3f21d7dce", "filename": "libjava/java/io/PushbackReader.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FPushbackReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FPushbackReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPushbackReader.java?ref=93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "patch": "@@ -77,7 +77,7 @@ public class PushbackReader extends FilterReader\n    * specified subordinate <code>Reader</code> with a default pushback buffer \n    * size of 1.\n    *\n-   * @code in The subordinate stream to read from\n+   * @param in The subordinate stream to read from\n    */\n   public PushbackReader(Reader in)\n   {"}, {"sha": "d27dcf426678753927f74b501cbeba97264af114", "filename": "libjava/java/io/SerializablePermission.java", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FSerializablePermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FSerializablePermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FSerializablePermission.java?ref=93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "patch": "@@ -67,8 +67,6 @@ public final class SerializablePermission extends BasicPermission\n \n   private static final String[] legal_names = { \"enableSubclassImplementation\",\n   \t\t\t\t\t      \"enableSubstitution\" };\n-  /*************************************************************************/\n-\n   /*\n    * Constructors\n    */\n@@ -88,8 +86,6 @@ public SerializablePermission(String name)\n     this(name, null);\n   }\n \n-  /*************************************************************************/\n-\n   /**\n     * This method initializes a new instance of \n     * <code>SerializablePermission</code>"}, {"sha": "94341fa76202bc718b751b19701497e1863f6cf5", "filename": "libjava/java/io/StreamTokenizer.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FStreamTokenizer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0/libjava%2Fjava%2Fio%2FStreamTokenizer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FStreamTokenizer.java?ref=93b3986a7fd5c8e4de2e4c0479e9c4e3866104b0", "patch": "@@ -580,7 +580,7 @@ public void quoteChar(int ch)\n    * quote, and comment) from all characters.  It is equivalent to calling\n    * <code>ordinaryChars(0x00, 0xFF)</code>.\n    *\n-   * @see ordinaryChars\n+   * @see #ordinaryChars(int, int)\n    */\n   public void resetSyntax()\n   {"}]}