{"sha": "2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgzOGZhOTMwYzhjOTIxMGVlNGE4MWMxYzIyYTY0MDZhOWNlMmYwZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-20T15:23:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-20T15:23:37Z"}, "message": "[multiple changes]\n\n2014-01-20  Claire Dross  <dross@adacore.com>\n\n\t* a-cofove.ads (Vector): Capacity discriminant\n\tshould be in range of the index.\n\n2014-01-20  Thomas Quinot  <quinot@adacore.com>\n\n\t* a-caldel.ads(To_Duration), s-taasde.ads(Time_Enqueue):\n\tClarify specs s-tadeca.adb(Enqueue_Calendar): Compensate for\n\tpossible difference between epoch of Ada.Calendar clock and Ada\n\treal-time/tasking clock.\n\t* s-taprop-posix.adb: Minor comment fix.\n\n2014-01-20  Doug Rupp  <rupp@adacore.com>\n\n\t* sysdep.c [vxworks]: Remove Vxworks version noise for RTP.\n\n2014-01-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_attr.adb (Expand_N_Attribute_Reference): Generate validity\n\tchecks on the prefix of attribute 'Old.\n\t* sem_ch3.adb (Process_Range_Expr_In_Decl): Suppress the\n\tgeneration of validity checks on a range that belongs to the\n\titeration scheme of a quantified expression.\n\t* sem_ch5.adb (One_Bound): Suppress the generation of validity\n\tchecks on a bound that belongs to the iteration scheme of a\n\tquantified expression, generate the check in all other cases.\n\n2014-01-20  Bob Duff  <duff@adacore.com>\n\n\t* gnat_ugn.texi: Enable --pp-new by default. Minor reorganization.\n\n2014-01-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Resolve): When compiling a predefined unit, ignore\n\tinterpretations that do not come from other predefined units,\n\tto prevent spurious ambiguities in the presence of user-defined\n\toperators in the context of (an instance of) a predefined unit.\n\nFrom-SVN: r206822", "tree": {"sha": "52fa8b47d7314775de1410f03b5815b236a90c24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52fa8b47d7314775de1410f03b5815b236a90c24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f/comments", "author": null, "committer": null, "parents": [{"sha": "1e5692049375a185fcdc66703665fbc5fc5d5aaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e5692049375a185fcdc66703665fbc5fc5d5aaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e5692049375a185fcdc66703665fbc5fc5d5aaf"}], "stats": {"total": 147, "additions": 120, "deletions": 27}, "files": [{"sha": "9e19e1d7237fa46385a08f6338c870aad0e230cd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f", "patch": "@@ -1,3 +1,42 @@\n+2014-01-20  Claire Dross  <dross@adacore.com>\n+\n+\t* a-cofove.ads (Vector): Capacity discriminant\n+\tshould be in range of the index.\n+\n+2014-01-20  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* a-caldel.ads(To_Duration), s-taasde.ads(Time_Enqueue):\n+\tClarify specs s-tadeca.adb(Enqueue_Calendar): Compensate for\n+\tpossible difference between epoch of Ada.Calendar clock and Ada\n+\treal-time/tasking clock.\n+\t* s-taprop-posix.adb: Minor comment fix.\n+\n+2014-01-20  Doug Rupp  <rupp@adacore.com>\n+\n+\t* sysdep.c [vxworks]: Remove Vxworks version noise for RTP.\n+\n+2014-01-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Generate validity\n+\tchecks on the prefix of attribute 'Old.\n+\t* sem_ch3.adb (Process_Range_Expr_In_Decl): Suppress the\n+\tgeneration of validity checks on a range that belongs to the\n+\titeration scheme of a quantified expression.\n+\t* sem_ch5.adb (One_Bound): Suppress the generation of validity\n+\tchecks on a bound that belongs to the iteration scheme of a\n+\tquantified expression, generate the check in all other cases.\n+\n+2014-01-20  Bob Duff  <duff@adacore.com>\n+\n+\t* gnat_ugn.texi: Enable --pp-new by default. Minor reorganization.\n+\n+2014-01-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve): When compiling a predefined unit, ignore\n+\tinterpretations that do not come from other predefined units,\n+\tto prevent spurious ambiguities in the presence of user-defined\n+\toperators in the context of (an instance of) a predefined unit.\n+\n 2014-01-20  Robert Dewar  <dewar@adacore.com>\n \n \t* gnat_rm.texi: Document that Loop_Variant is included in"}, {"sha": "1a0b129d33e06503286017c64d2229ce64a489ea", "filename": "gcc/ada/a-caldel.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f/gcc%2Fada%2Fa-caldel.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f/gcc%2Fada%2Fa-caldel.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-caldel.ads?ref=2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -48,6 +48,6 @@ package Ada.Calendar.Delays is\n    --  must perform all the processing required for an abort point.\n \n    function To_Duration (T : Time) return Duration;\n-   --  Convert Time to Duration\n+   --  Convert Time to Duration elapsed since UNIX epoch\n \n end Ada.Calendar.Delays;"}, {"sha": "1f9b94f735364ad77f14f0542f7de4fe3943ce07", "filename": "gcc/ada/a-cofove.ads", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f/gcc%2Fada%2Fa-cofove.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f/gcc%2Fada%2Fa-cofove.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cofove.ads?ref=2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f", "patch": "@@ -71,7 +71,10 @@ package Ada.Containers.Formal_Vectors is\n \n    No_Index : constant Extended_Index := Extended_Index'First;\n \n-   type Vector (Capacity : Count_Type) is private;\n+   subtype Capacity_Range is\n+     Count_Type range 0 .. Count_Type (Index_Type'Last - Index_Type'First + 1);\n+\n+   type Vector (Capacity : Capacity_Range) is private;\n \n    type Cursor is private;\n    pragma Preelaborable_Initialization (Cursor);\n@@ -372,7 +375,7 @@ private\n    type Elements_Array is array (Count_Type range <>) of Element_Type;\n    function \"=\" (L, R : Elements_Array) return Boolean is abstract;\n \n-   type Vector (Capacity : Count_Type) is record\n+   type Vector (Capacity : Capacity_Range) is record\n       Elements : Elements_Array (1 .. Capacity);\n       Last     : Extended_Index := No_Index;\n    end record;"}, {"sha": "93a2390168ab7680db670d6cc344b0071f5210c6", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f", "patch": "@@ -3854,6 +3854,14 @@ package body Exp_Attr is\n             Insert_Action (First (Declarations (Subp)), Asn_Stm);\n          end if;\n \n+         --  Ensure that the prefix of attribute 'Old is valid. The check must\n+         --  be inserted after the expansion of the attribute has taken place\n+         --  to reflect the new placement of the prefix.\n+\n+         if Validity_Checks_On and then Validity_Check_Operands then\n+            Ensure_Valid (Pref);\n+         end if;\n+\n          Pop_Scope;\n \n          Rewrite (N, New_Occurrence_Of (Tnn, Loc));"}, {"sha": "f4a43ed8f7ba2c1b08ee465388ecdf6adc470ec2", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f", "patch": "@@ -13819,11 +13819,8 @@ identifier case conventions, rules of indentation, and comment layout.\n \n Note: A newly-redesigned set of formatting algorithms used by gnatpp\n is now available.\n-To invoke the new experimental formatting algorithms, use the\n-@option{--pp-new} switch.\n-The default is @option{--pp-old}; that is, gnatpp uses the old\n-formatting algorithms by default.\n-We intend to make @option{--pp-new} the default at some point.\n+To invoke the old formatting algorithms, use the @option{--pp-old} switch.\n+We intend to remove support for @option{--pp-old} at some point.\n \n To produce a reformatted file, @command{gnatpp} generates and uses the ASIS\n tree for the input source and thus requires the input to be syntactically and\n@@ -14435,11 +14432,11 @@ Display usage, then exit disregarding all other options.\n \n @item --pp-new\n @cindex @option{--pp-new} @command{gnatpp}\n-Use the new experimental formatting algorithms.\n+Use the new experimental formatting algorithms. This is the default.\n \n @item --pp-old\n @cindex @option{--pp-old} @command{gnatpp}\n-Use the old formatting algorithms. This is the default.\n+Use the old formatting algorithms.\n \n @item ^-files @var{filename}^/FILES=@var{filename}^\n @cindex @option{^-files^/FILES^} (@code{gnatpp})"}, {"sha": "80039feeba940773a06673513c209f6433f07647", "filename": "gcc/ada/s-taasde.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f/gcc%2Fada%2Fs-taasde.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f/gcc%2Fada%2Fs-taasde.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taasde.ads?ref=2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1998-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -144,6 +144,7 @@ private\n       D : Delay_Block_Access);\n    pragma Inline (Time_Enqueue);\n    --  Used by the child units to enqueue delays on the timer queue\n-   --  implemented in the body of this package.\n+   --  implemented in the body of this package. T denotes a point in time as\n+   --  the duration elapsed since the epoch of the Ada real-time clock.\n \n end System.Tasking.Async_Delays;"}, {"sha": "fa1ef05e8d7b1fe12f0758168da46230ec923e7d", "filename": "gcc/ada/s-tadeca.adb", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f/gcc%2Fada%2Fs-tadeca.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f/gcc%2Fada%2Fs-tadeca.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tadeca.adb?ref=2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1998-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -30,6 +30,8 @@\n ------------------------------------------------------------------------------\n \n with Ada.Calendar.Delays;\n+with System.OS_Constants;\n+with System.OS_Primitives;\n with System.Task_Primitives.Operations;\n with System.Tasking.Initialization;\n \n@@ -39,15 +41,35 @@ function System.Tasking.Async_Delays.Enqueue_Calendar\n    return Boolean\n is\n    use type Ada.Calendar.Time;\n+\n+   package SOSC renames System.OS_Constants;\n+   package STPO renames System.Task_Primitives.Operations;\n+\n+   RT_T : Duration := Ada.Calendar.Delays.To_Duration (T);\n+\n begin\n    if T <= Ada.Calendar.Clock then\n       D.Timed_Out := True;\n       System.Task_Primitives.Operations.Yield;\n       return False;\n    end if;\n \n+   --  T is expressed as a duration elapsed since the UNIX epoch, whereas\n+   --  Time_Enque expects duraction elapsed since the epoch of the Ada\n+   --  real time clock: compensate if necessary.\n+\n+   pragma Warnings (Off);\n+   --  Comparison \"SOSC.CLOCK_RT_Ada = SOSC.CLOCK_REALTIME\" is compile\n+   --  time known.\n+\n+   if SOSC.CLOCK_RT_Ada /= SOSC.CLOCK_REALTIME then\n+      pragma Warnings (On);\n+\n+      RT_T := RT_T - OS_Primitives.Monotonic_Clock + STPO.Monotonic_Clock;\n+   end if;\n+\n    System.Tasking.Initialization.Defer_Abort\n      (System.Task_Primitives.Operations.Self);\n-   Time_Enqueue (Ada.Calendar.Delays.To_Duration (T), D);\n+   Time_Enqueue (RT_T, D);\n    return True;\n end System.Tasking.Async_Delays.Enqueue_Calendar;"}, {"sha": "8aff965d53ea18b5d1453019cb2bfe9c94539fd9", "filename": "gcc/ada/s-taprop-posix.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f/gcc%2Fada%2Fs-taprop-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f/gcc%2Fada%2Fs-taprop-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-posix.adb?ref=2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f", "patch": "@@ -287,7 +287,7 @@ package body System.Task_Primitives.Operations is\n             Rel_Time := Duration'Min (Max_Sensible_Delay, Time - Check_Time);\n          end if;\n \n-      --  Absolute deadline specified using the real-time clock, in the\n+      --  Absolute deadline specified using the calendar clock, in the\n       --  case where it is not the same as the tasking clock: compensate for\n       --  difference between clock epochs (Base_Time - Base_Cal_Time).\n "}, {"sha": "dfdc85cbc37fc9ca60320e2faba0cc240e4cfa9e", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f", "patch": "@@ -18780,8 +18780,14 @@ package body Sem_Ch3 is\n          --  We need to ensure validity of the bounds here, because if we\n          --  go ahead and do the expansion, then the expanded code will get\n          --  analyzed with range checks suppressed and we miss the check.\n+         --  Validity checks on the range of a quantified expression are\n+         --  delayed until the construct is transformed into a loop.\n \n-         Validity_Check_Range (R);\n+         if Nkind (Parent (R)) /= N_Loop_Parameter_Specification\n+           or else Nkind (Parent (Parent (R))) /= N_Quantified_Expression\n+         then\n+            Validity_Check_Range (R);\n+         end if;\n \n          --  If there were errors in the declaration, try and patch up some\n          --  common mistakes in the bounds. The cases handled are literals\n@@ -18791,7 +18797,6 @@ package body Sem_Ch3 is\n          --  are guaranteed.\n \n          if Etype (R) = Any_Type then\n-\n             if Nkind (Lo) = N_Integer_Literal and then Is_Real_Type (T) then\n                Rewrite (Lo,\n                  Make_Real_Literal (Sloc (Lo), UR_From_Uint (Intval (Lo))));"}, {"sha": "4f900129c4e71d938f8ea1e58a275dcecb8e4425", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f", "patch": "@@ -2111,6 +2111,17 @@ package body Sem_Ch5 is\n \n             if not Has_Call_Using_Secondary_Stack (Analyzed_Bound) then\n                Analyze_And_Resolve (Original_Bound, Typ);\n+\n+               --  Ensure that the bound is valid. This check should not be\n+               --  generated when the range belongs to a quantified expression\n+               --  as the construct is still not expanded into its final form.\n+\n+               if Nkind (Parent (R)) /= N_Loop_Parameter_Specification\n+                 or else Nkind (Parent (Parent (R))) /= N_Quantified_Expression\n+               then\n+                  Ensure_Valid (Original_Bound);\n+               end if;\n+\n                Force_Evaluation (Original_Bound);\n                return Original_Bound;\n             end if;"}, {"sha": "56b6aeec1e5d3959d0048125de99a5261d855177", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f", "patch": "@@ -2156,6 +2156,20 @@ package body Sem_Res is\n                --  First matching interpretation\n \n                if not Found then\n+                  --  If the current statement is part of a predefined library\n+                  --  unit, then all interpretations which come from user level\n+                  --  packages should not be considered. User-defined operators\n+                  --  may appear anywhere in the homonym list. This exclusion\n+                  --  does not apply in an instance, where an actual may come\n+                  --  from a local declaration.\n+\n+                  if From_Lib\n+                    and then not Comes_From_Predefined_Lib_Unit (It.Nam)\n+                    and then not In_Instance\n+                  then\n+                     goto Continue;\n+                  end if;\n+\n                   Found := True;\n                   I1    := I;\n                   Seen  := It.Nam;\n@@ -2167,10 +2181,6 @@ package body Sem_Res is\n                --  some more obscure cases are handled in Disambiguate.\n \n                else\n-                  --  If the current statement is part of a predefined library\n-                  --  unit, then all interpretations which come from user level\n-                  --  packages should not be considered.\n-\n                   if From_Lib\n                     and then not Comes_From_Predefined_Lib_Unit (It.Nam)\n                   then"}, {"sha": "4c4ec49d8c95ffa18de3ae983a4a91624fc7f801", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=2838fa930c8c9210ee4a81c1c22a6406a9ce2f0f", "patch": "@@ -43,10 +43,7 @@\n #include \"selectLib.h\"\n #include \"vxWorks.h\"\n #if defined (__RTP__)\n-# include \"version.h\"\n-# if (_WRS_VXWORKS_MAJOR == 6)\n #  include \"vwModNum.h\"\n-# endif /* _WRS_VXWORKS_MAJOR == 6 */\n #endif /* __RTP__ */\n #endif\n \n@@ -926,9 +923,9 @@ __gnat_is_file_not_found_error (int errno_val) {\n #if ! defined (__RTP__) && (! defined (VTHREADS) || defined (__VXWORKSMILS__))\n       case S_nfsLib_NFSERR_NOENT:\n #endif\n-#if defined (__RTP__) && (_WRS_VXWORKS_MAJOR == 6)\n+#if defined (__RTP__)\n \t/* An RTP can return an NFS file not found, and the NFS bits must\n-\t   first be masked off to check the errno.  */\n+\t   first be masked on to check the errno.  */\n       case M_nfsStat | ENOENT:\n #endif\n #endif"}]}