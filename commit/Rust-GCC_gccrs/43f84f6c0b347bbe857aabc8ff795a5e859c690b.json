{"sha": "43f84f6c0b347bbe857aabc8ff795a5e859c690b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNmODRmNmMwYjM0N2JiZTg1N2FhYmM4ZmY3OTVhNWU4NTljNjkwYg==", "commit": {"author": {"name": "Jim Wilson", "email": "jim.wilson@linaro.org", "date": "2017-07-21T21:56:57Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2017-07-21T21:56:57Z"}, "message": "Add RDMA support to falkor port.\n\n\tgcc/\n\t* config/aarch64/aarch64-cores.def (falkor): Add AARCH64_FL_RDMA.\n\t(qdf24xx): Likewise.\n\t* config/aarch64/aarch64-options-extensions.def (rdma); New.\n\t* config/aarch64/aarch64.h (AARCH64_FL_RDMA): New.\n\t(AARCH64_FL_V8_1): Renumber.\n\t(AARCH64_FL_FOR_ARCH8_1): Add AARCH64_FL_RDMA.\n\t(AARCH64_ISA_RDMA): Use AARCH64_FL_RDMA.\n\t* config/aarch64/arm_neon.h: Use +rdma instead of arch=armv8.1-a.\n\t* doc/invoke.texi (AArch64 Options): Mention +rmda in -march docs.  Add\n\trdma to feature modifiers list.\n\n\tgcc/testsuite/\n\t* lib/target-supports.exp (add_options_for_arm_v8_1a_neon): Delete\n\tredundant -march option.\n\t(check_effective_target_arm_v8_1a_neon_ok_nocache): Try armv8-a+rdma\n\tin addition to armv8.1-a.\n\nFrom-SVN: r250444", "tree": {"sha": "d61ecd9d9e44195ed05cab7b4db246c9c226b755", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d61ecd9d9e44195ed05cab7b4db246c9c226b755"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43f84f6c0b347bbe857aabc8ff795a5e859c690b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43f84f6c0b347bbe857aabc8ff795a5e859c690b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43f84f6c0b347bbe857aabc8ff795a5e859c690b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43f84f6c0b347bbe857aabc8ff795a5e859c690b/comments", "author": null, "committer": null, "parents": [{"sha": "0901429d474107af56cef0a72da6cedf9d42fcfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0901429d474107af56cef0a72da6cedf9d42fcfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0901429d474107af56cef0a72da6cedf9d42fcfc"}], "stats": {"total": 61, "additions": 46, "deletions": 15}, "files": [{"sha": "cc18d59564e78142c7d65aed0418524c368a666e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f84f6c0b347bbe857aabc8ff795a5e859c690b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f84f6c0b347bbe857aabc8ff795a5e859c690b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43f84f6c0b347bbe857aabc8ff795a5e859c690b", "patch": "@@ -1,3 +1,16 @@\n+2017-07-21  Jim Wilson  <jim.wilson@linaro.org>\n+\n+\t* config/aarch64/aarch64-cores.def (falkor): Add AARCH64_FL_RDMA.\n+\t(qdf24xx): Likewise.\n+\t* config/aarch64/aarch64-options-extensions.def (rdma); New.\n+\t* config/aarch64/aarch64.h (AARCH64_FL_RDMA): New.\n+\t(AARCH64_FL_V8_1): Renumber.\n+\t(AARCH64_FL_FOR_ARCH8_1): Add AARCH64_FL_RDMA.\n+\t(AARCH64_ISA_RDMA): Use AARCH64_FL_RDMA.\n+\t* config/aarch64/arm_neon.h: Use +rdma instead of arch=armv8.1-a.\n+\t* doc/invoke.texi (AArch64 Options): Mention +rmda in -march docs.  Add\n+\trdma to feature modifiers list.\n+\n 2017-07-21  Yury Gribov  <tetra2005@gmail.com>\n \n \tPR middle-end/56727"}, {"sha": "b8d0ba6b69e3ed09e04c7c7222ab9099f26328a4", "filename": "gcc/config/aarch64/aarch64-cores.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f84f6c0b347bbe857aabc8ff795a5e859c690b/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f84f6c0b347bbe857aabc8ff795a5e859c690b/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def?ref=43f84f6c0b347bbe857aabc8ff795a5e859c690b", "patch": "@@ -65,8 +65,8 @@ AARCH64_CORE(\"thunderxt83\",   thunderxt83,   thunderx,  8A,  AARCH64_FL_FOR_ARCH\n AARCH64_CORE(\"xgene1\",      xgene1,    xgene1,    8A,  AARCH64_FL_FOR_ARCH8, xgene1, 0x50, 0x000, -1)\n \n /* Qualcomm ('Q') cores. */\n-AARCH64_CORE(\"falkor\",      falkor,    cortexa57, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, qdf24xx,   0x51, 0xC00, -1)\n-AARCH64_CORE(\"qdf24xx\",     qdf24xx,   cortexa57, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, qdf24xx,   0x51, 0xC00, -1)\n+AARCH64_CORE(\"falkor\",      falkor,    cortexa57, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO | AARCH64_FL_RDMA, qdf24xx,   0x51, 0xC00, -1)\n+AARCH64_CORE(\"qdf24xx\",     qdf24xx,   cortexa57, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO | AARCH64_FL_RDMA, qdf24xx,   0x51, 0xC00, -1)\n \n /* Samsung ('S') cores. */\n AARCH64_CORE(\"exynos-m1\",   exynosm1,  exynosm1,  8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, exynosm1,  0x53, 0x001, -1)"}, {"sha": "c4f059ab7c555e9f3dd2978d5232083d19a175e6", "filename": "gcc/config/aarch64/aarch64-option-extensions.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f84f6c0b347bbe857aabc8ff795a5e859c690b/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f84f6c0b347bbe857aabc8ff795a5e859c690b/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def?ref=43f84f6c0b347bbe857aabc8ff795a5e859c690b", "patch": "@@ -63,4 +63,8 @@ AARCH64_OPT_EXTENSION(\"fp16\", AARCH64_FL_F16, AARCH64_FL_FP, 0, \"fphp asimdhp\")\n /* Enabling or disabling \"rcpc\" only changes \"rcpc\".  */\n AARCH64_OPT_EXTENSION(\"rcpc\", AARCH64_FL_RCPC, 0, 0, \"lrcpc\")\n \n+/* Enabling \"rdma\" also enables \"fp\", \"simd\".\n+   Disabling \"rdma\" just disables \"rdma\".  */\n+AARCH64_OPT_EXTENSION(\"rdma\", AARCH64_FL_RDMA, AARCH64_FL_FP | AARCH64_FL_SIMD, 0, \"rdma\")\n+\n #undef AARCH64_OPT_EXTENSION"}, {"sha": "7f91edb5713d7e8eda2f0a024a0f97b4e111c4b0", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f84f6c0b347bbe857aabc8ff795a5e859c690b/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f84f6c0b347bbe857aabc8ff795a5e859c690b/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=43f84f6c0b347bbe857aabc8ff795a5e859c690b", "patch": "@@ -144,7 +144,8 @@ extern unsigned aarch64_architecture_version;\n #define AARCH64_FL_CRC        (1 << 3)\t/* Has CRC.  */\n /* ARMv8.1-A architecture extensions.  */\n #define AARCH64_FL_LSE\t      (1 << 4)  /* Has Large System Extensions.  */\n-#define AARCH64_FL_V8_1\t      (1 << 5)  /* Has ARMv8.1-A extensions.  */\n+#define AARCH64_FL_RDMA\t      (1 << 5)  /* Has Round Double Multiply Add.  */\n+#define AARCH64_FL_V8_1\t      (1 << 6)  /* Has ARMv8.1-A extensions.  */\n /* ARMv8.2-A architecture extensions.  */\n #define AARCH64_FL_V8_2\t      (1 << 8)  /* Has ARMv8.2-A features.  */\n #define AARCH64_FL_F16\t      (1 << 9)  /* Has ARMv8.2-A FP16 extensions.  */\n@@ -161,7 +162,8 @@ extern unsigned aarch64_architecture_version;\n /* Architecture flags that effect instruction selection.  */\n #define AARCH64_FL_FOR_ARCH8       (AARCH64_FL_FPSIMD)\n #define AARCH64_FL_FOR_ARCH8_1\t\t\t       \\\n-  (AARCH64_FL_FOR_ARCH8 | AARCH64_FL_LSE | AARCH64_FL_CRC | AARCH64_FL_V8_1)\n+  (AARCH64_FL_FOR_ARCH8 | AARCH64_FL_LSE | AARCH64_FL_CRC \\\n+   | AARCH64_FL_RDMA | AARCH64_FL_V8_1)\n #define AARCH64_FL_FOR_ARCH8_2\t\t\t\\\n   (AARCH64_FL_FOR_ARCH8_1 | AARCH64_FL_V8_2)\n #define AARCH64_FL_FOR_ARCH8_3\t\t\t\\\n@@ -174,7 +176,7 @@ extern unsigned aarch64_architecture_version;\n #define AARCH64_ISA_FP             (aarch64_isa_flags & AARCH64_FL_FP)\n #define AARCH64_ISA_SIMD           (aarch64_isa_flags & AARCH64_FL_SIMD)\n #define AARCH64_ISA_LSE\t\t   (aarch64_isa_flags & AARCH64_FL_LSE)\n-#define AARCH64_ISA_RDMA\t   (aarch64_isa_flags & AARCH64_FL_V8_1)\n+#define AARCH64_ISA_RDMA\t   (aarch64_isa_flags & AARCH64_FL_RDMA)\n #define AARCH64_ISA_V8_2\t   (aarch64_isa_flags & AARCH64_FL_V8_2)\n #define AARCH64_ISA_F16\t\t   (aarch64_isa_flags & AARCH64_FL_F16)\n #define AARCH64_ISA_V8_3\t   (aarch64_isa_flags & AARCH64_FL_V8_3)"}, {"sha": "d7b30b0e5ee6144d543d354ce9978fe9c5d5ae73", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f84f6c0b347bbe857aabc8ff795a5e859c690b/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f84f6c0b347bbe857aabc8ff795a5e859c690b/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=43f84f6c0b347bbe857aabc8ff795a5e859c690b", "patch": "@@ -12162,7 +12162,7 @@ vbslq_u64 (uint64x2_t __a, uint64x2_t __b, uint64x2_t __c)\n \n /* ARMv8.1-A instrinsics.  */\n #pragma GCC push_options\n-#pragma GCC target (\"arch=armv8.1-a\")\n+#pragma GCC target (\"+nothing+rdma\")\n \n __extension__ extern __inline int16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))"}, {"sha": "2bab550d6769c4728308f9c4304013fd3c59783f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f84f6c0b347bbe857aabc8ff795a5e859c690b/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f84f6c0b347bbe857aabc8ff795a5e859c690b/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=43f84f6c0b347bbe857aabc8ff795a5e859c690b", "patch": "@@ -14084,7 +14084,7 @@ support for the ARMv8.2-A architecture extensions.\n \n The value @samp{armv8.1-a} implies @samp{armv8-a} and enables compiler\n support for the ARMv8.1-A architecture extension.  In particular, it\n-enables the @samp{+crc} and @samp{+lse} features.\n+enables the @samp{+crc}, @samp{+lse}, and @samp{+rdma} features.\n \n The value @samp{native} is available on native AArch64 GNU/Linux and\n causes the compiler to pick the architecture of the host system.  This\n@@ -14202,6 +14202,9 @@ instructions.  This is on by default for all possible values for options\n @item lse\n Enable Large System Extension instructions.  This is on by default for\n @option{-march=armv8.1-a}.\n+@item rdma\n+Enable Round Double Multiply Accumulate instructions.  This is on by default\n+for @option{-march=armv8.1-a}.\n @item fp16\n Enable FP16 extension.  This also enables floating-point instructions.\n @item rcpc"}, {"sha": "1b5cc63a7819b5f1e17b2592f82242d8c1503f32", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f84f6c0b347bbe857aabc8ff795a5e859c690b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f84f6c0b347bbe857aabc8ff795a5e859c690b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43f84f6c0b347bbe857aabc8ff795a5e859c690b", "patch": "@@ -1,3 +1,10 @@\n+2017-07-21  Jim Wilson  <jim.wilson@linaro.org>\n+\n+\t* lib/target-supports.exp (add_options_for_arm_v8_1a_neon): Delete\n+\tredundant -march option.\n+\t(check_effective_target_arm_v8_1a_neon_ok_nocache): Try armv8-a+rdma\n+\tin addition to armv8.1-a.\n+\n 2017-07-21  Yury Gribov  <tetra2005@gmail.com>\n \n \tPR middle-end/56727"}, {"sha": "5a6562794b2bdd5f370fc5b26d6887777f02779a", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f84f6c0b347bbe857aabc8ff795a5e859c690b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f84f6c0b347bbe857aabc8ff795a5e859c690b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=43f84f6c0b347bbe857aabc8ff795a5e859c690b", "patch": "@@ -3436,7 +3436,7 @@ proc add_options_for_arm_v8_1a_neon { flags } {\n \treturn \"$flags\"\n     }\n     global et_arm_v8_1a_neon_flags\n-    return \"$flags $et_arm_v8_1a_neon_flags -march=armv8.1-a\"\n+    return \"$flags $et_arm_v8_1a_neon_flags\"\n }\n \n # Add the options needed for ARMv8.2 with the scalar FP16 extension.\n@@ -4127,13 +4127,15 @@ proc check_effective_target_arm_v8_1a_neon_ok_nocache { } {\n     # since AArch64 only needs the -march setting.\n     foreach flags {\"\" \"-mfpu=neon-fp-armv8\" \"-mfloat-abi=softfp\" \\\n \t\t       \"-mfpu=neon-fp-armv8 -mfloat-abi=softfp\"} {\n-\tif { [check_no_compiler_messages_nocache arm_v8_1a_neon_ok object {\n-\t    #if !defined (__ARM_FEATURE_QRDMX)\n-\t    #error \"__ARM_FEATURE_QRDMX not defined\"\n-\t    #endif\n-\t} \"$flags -march=armv8.1-a\"] } {\n-\t    set et_arm_v8_1a_neon_flags \"$flags -march=armv8.1-a\"\n-\t    return 1\n+\tforeach arches { \"-march=armv8-a+rdma\" \"-march=armv8.1-a\" } {\n+\t    if { [check_no_compiler_messages_nocache arm_v8_1a_neon_ok object {\n+\t\t#if !defined (__ARM_FEATURE_QRDMX)\n+\t\t#error \"__ARM_FEATURE_QRDMX not defined\"\n+\t\t#endif\n+\t    } \"$flags $arches\"] } {\n+\t\tset et_arm_v8_1a_neon_flags \"$flags $arches\"\n+\t\treturn 1\n+\t    }\n \t}\n     }\n "}]}