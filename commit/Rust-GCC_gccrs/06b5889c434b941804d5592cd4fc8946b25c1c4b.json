{"sha": "06b5889c434b941804d5592cd4fc8946b25c1c4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZiNTg4OWM0MzRiOTQxODA0ZDU1OTJjZDRmYzg5NDZiMjVjMWM0Yg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-15T14:26:14Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-15T14:26:14Z"}, "message": "Remove TARGET_SETUP_INCOMING_VARARG_BOUNDS\n\nTARGET_SETUP_INCOMING_VARARG_BOUNDS seems to be an unused vestige of the\nMPX support.\n\n2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* target.def (setup_incoming_vararg_bounds): Remove.\n\t* doc/tm.texi.in (TARGET_SETUP_INCOMING_VARARG_BOUNDS): Remove.\n\t* doc/tm.texi: Regenerate.\n\t* targhooks.c (default_setup_incoming_vararg_bounds): Delete.\n\t* targhooks.h (default_setup_incoming_vararg_bounds): Likewise.\n\t* config/i386/i386.c (ix86_setup_incoming_vararg_bounds): Likewise.\n\t(TARGET_SETUP_INCOMING_VARARG_BOUNDS): Likewise.\n\nFrom-SVN: r274539", "tree": {"sha": "f091e3e4a77470f511bc063fa3a808d603ff98f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f091e3e4a77470f511bc063fa3a808d603ff98f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06b5889c434b941804d5592cd4fc8946b25c1c4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06b5889c434b941804d5592cd4fc8946b25c1c4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06b5889c434b941804d5592cd4fc8946b25c1c4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06b5889c434b941804d5592cd4fc8946b25c1c4b/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8bc1fac71de3abab36b9e58870fdf4e936650a27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bc1fac71de3abab36b9e58870fdf4e936650a27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bc1fac71de3abab36b9e58870fdf4e936650a27"}], "stats": {"total": 72, "additions": 10, "deletions": 62}, "files": [{"sha": "eba58f69f802bec6108ec8c61ad3ec598f89cb31", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b5889c434b941804d5592cd4fc8946b25c1c4b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b5889c434b941804d5592cd4fc8946b25c1c4b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06b5889c434b941804d5592cd4fc8946b25c1c4b", "patch": "@@ -1,3 +1,13 @@\n+2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* target.def (setup_incoming_vararg_bounds): Remove.\n+\t* doc/tm.texi.in (TARGET_SETUP_INCOMING_VARARG_BOUNDS): Remove.\n+\t* doc/tm.texi: Regenerate.\n+\t* targhooks.c (default_setup_incoming_vararg_bounds): Delete.\n+\t* targhooks.h (default_setup_incoming_vararg_bounds): Likewise.\n+\t* config/i386/i386.c (ix86_setup_incoming_vararg_bounds): Likewise.\n+\t(TARGET_SETUP_INCOMING_VARARG_BOUNDS): Likewise.\n+\n 2019-08-15  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \tMSP430: Fix lines over 80 characters long in"}, {"sha": "5eb625ce724ff652847d036f1d10e67b27ab9f4d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b5889c434b941804d5592cd4fc8946b25c1c4b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b5889c434b941804d5592cd4fc8946b25c1c4b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=06b5889c434b941804d5592cd4fc8946b25c1c4b", "patch": "@@ -4126,34 +4126,6 @@ ix86_setup_incoming_varargs (cumulative_args_t cum_v, machine_mode mode,\n     setup_incoming_varargs_64 (&next_cum);\n }\n \n-static void\n-ix86_setup_incoming_vararg_bounds (cumulative_args_t cum_v,\n-\t\t\t\t   machine_mode mode,\n-\t\t\t\t   tree type,\n-\t\t\t\t   int *pretend_size ATTRIBUTE_UNUSED,\n-\t\t\t\t   int no_rtl)\n-{\n-  CUMULATIVE_ARGS *cum = get_cumulative_args (cum_v);\n-  CUMULATIVE_ARGS next_cum;\n-  tree fntype;\n-\n-  gcc_assert (!no_rtl);\n-\n-  /* Do nothing if we use plain pointer to argument area.  */\n-  if (!TARGET_64BIT || cum->call_abi == MS_ABI)\n-    return;\n-\n-  fntype = TREE_TYPE (current_function_decl);\n-\n-  /* For varargs, we do not want to skip the dummy va_dcl argument.\n-     For stdargs, we do want to skip the last named argument.  */\n-  next_cum = *cum;\n-  if (stdarg_p (fntype))\n-    ix86_function_arg_advance (pack_cumulative_args (&next_cum), mode, type,\n-\t\t\t       true);\n-}\n-\n-\n /* Checks if TYPE is of kind va_list char *.  */\n \n static bool\n@@ -23049,9 +23021,6 @@ ix86_run_selftests (void)\n #undef TARGET_CALL_FUSAGE_CONTAINS_NON_CALLEE_CLOBBERS\n #define TARGET_CALL_FUSAGE_CONTAINS_NON_CALLEE_CLOBBERS true\n \n-#undef TARGET_SETUP_INCOMING_VARARG_BOUNDS\n-#define TARGET_SETUP_INCOMING_VARARG_BOUNDS ix86_setup_incoming_vararg_bounds\n-\n #undef TARGET_OFFLOAD_OPTIONS\n #define TARGET_OFFLOAD_OPTIONS \\\n   ix86_offload_options"}, {"sha": "f05b31173e2c91f8825b9ff940f16ad91d31bf10", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b5889c434b941804d5592cd4fc8946b25c1c4b/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b5889c434b941804d5592cd4fc8946b25c1c4b/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=06b5889c434b941804d5592cd4fc8946b25c1c4b", "patch": "@@ -5314,12 +5314,6 @@ This hook is used by expand pass to emit insn to store @var{bounds}\n returned by function call into @var{slot}.\n @end deftypefn\n \n-@deftypefn {Target Hook} void TARGET_SETUP_INCOMING_VARARG_BOUNDS (cumulative_args_t @var{args_so_far}, machine_mode @var{mode}, tree @var{type}, int *@var{pretend_args_size}, int @var{second_time})\n-Use it to store bounds for anonymous register arguments stored\n-into the stack.  Arguments meaning is similar to\n-@code{TARGET_SETUP_INCOMING_VARARGS}.\n-@end deftypefn\n-\n @node Trampolines\n @section Support for Nested Functions\n @cindex support for nested functions"}, {"sha": "98e710058bca41dec069a16cce91acd81ccaac59", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b5889c434b941804d5592cd4fc8946b25c1c4b/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b5889c434b941804d5592cd4fc8946b25c1c4b/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=06b5889c434b941804d5592cd4fc8946b25c1c4b", "patch": "@@ -3785,8 +3785,6 @@ These machine description macros help implement varargs:\n \n @hook TARGET_STORE_RETURNED_BOUNDS\n \n-@hook TARGET_SETUP_INCOMING_VARARG_BOUNDS\n-\n @node Trampolines\n @section Support for Nested Functions\n @cindex support for nested functions"}, {"sha": "4266b8c718455e37ed4885b52fb84b4636d16f62", "filename": "gcc/target.def", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b5889c434b941804d5592cd4fc8946b25c1c4b/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b5889c434b941804d5592cd4fc8946b25c1c4b/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=06b5889c434b941804d5592cd4fc8946b25c1c4b", "patch": "@@ -4550,15 +4550,6 @@ returned by function call into @var{slot}.\",\n  void, (rtx slot, rtx bounds),\n  default_store_returned_bounds)\n \n-DEFHOOK\n-(setup_incoming_vararg_bounds,\n- \"Use it to store bounds for anonymous register arguments stored\\n\\\n-into the stack.  Arguments meaning is similar to\\n\\\n-@code{TARGET_SETUP_INCOMING_VARARGS}.\",\n- void, (cumulative_args_t args_so_far, machine_mode mode, tree type,\n-\tint *pretend_args_size, int second_time),\n- default_setup_incoming_vararg_bounds)\n-\n DEFHOOK\n (call_args,\n  \"While generating RTL for a function call, this target hook is invoked once\\n\\"}, {"sha": "111ed2ea816c7643e2957de6e5ee1f42321d7200", "filename": "gcc/targhooks.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b5889c434b941804d5592cd4fc8946b25c1c4b/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b5889c434b941804d5592cd4fc8946b25c1c4b/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=06b5889c434b941804d5592cd4fc8946b25c1c4b", "patch": "@@ -2274,15 +2274,6 @@ std_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n   return build_va_arg_indirect_ref (addr);\n }\n \n-void\n-default_setup_incoming_vararg_bounds (cumulative_args_t ca ATTRIBUTE_UNUSED,\n-\t\t\t\t      machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\t\t      tree type ATTRIBUTE_UNUSED,\n-\t\t\t\t      int *pretend_arg_size ATTRIBUTE_UNUSED,\n-\t\t\t\t      int second_time ATTRIBUTE_UNUSED)\n-{\n-}\n-\n /* An implementation of TARGET_CAN_USE_DOLOOP_P for targets that do\n    not support nested low-overhead loops.  */\n "}, {"sha": "017a9d2190803b9119453ab77479247312ce943e", "filename": "gcc/targhooks.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b5889c434b941804d5592cd4fc8946b25c1c4b/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b5889c434b941804d5592cd4fc8946b25c1c4b/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=06b5889c434b941804d5592cd4fc8946b25c1c4b", "patch": "@@ -265,11 +265,6 @@ extern rtx default_load_bounds_for_arg (rtx, rtx, rtx);\n extern void default_store_bounds_for_arg (rtx, rtx, rtx, rtx);\n extern rtx default_load_returned_bounds (rtx);\n extern void default_store_returned_bounds (rtx,rtx);\n-extern void default_setup_incoming_vararg_bounds (cumulative_args_t ca ATTRIBUTE_UNUSED,\n-\t\t\t\t\t\t  machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\t\t\t\t  tree type ATTRIBUTE_UNUSED,\n-\t\t\t\t\t\t  int *pretend_arg_size ATTRIBUTE_UNUSED,\n-\t\t\t\t\t\t  int second_time ATTRIBUTE_UNUSED);\n extern bool default_optab_supported_p (int, machine_mode, machine_mode,\n \t\t\t\t       optimization_type);\n extern unsigned int default_max_noce_ifcvt_seq_cost (edge);"}]}