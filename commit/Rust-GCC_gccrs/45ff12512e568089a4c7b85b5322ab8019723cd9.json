{"sha": "45ff12512e568089a4c7b85b5322ab8019723cd9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVmZjEyNTEyZTU2ODA4OWE0YzdiODViNTMyMmFiODAxOTcyM2NkOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-09-01T10:06:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-09-01T10:06:25Z"}, "message": "bswap: Fix up bswap_view_convert handling [PR102141]\n\nbswap_view_convert is used twice in spots where gsi_insert_before is the\nright thing, but in the last one it wants to insert preparation stmts\nfor the VIEW_CONVERT_EXPR emitted with gsi_insert_after, where at the\ngsi we still need to insert bswap_stmt and maybe mask_stmt whose lhs\nthe preparation stmts will use.\nSo, this patch adds a BEFORE argument to the function and emits the\npreparation statements before or after depending on that.\n\n2021-09-01  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/102141\n\t* gimple-ssa-store-merging.c (bswap_view_convert): Add BEFORE\n\targument.  If false, emit stmts after gsi instead of before, and\n\twith GSI_NEW_STMT.\n\t(bswap_replace): Adjust callers.  When converting output of bswap,\n\temit VIEW_CONVERT prepratation stmts after a copy of gsi instead\n\tof before it.\n\n\t* gcc.dg/pr102141.c: New test.", "tree": {"sha": "00ada361aa22b887d2ac8591a4608a8c303047a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00ada361aa22b887d2ac8591a4608a8c303047a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45ff12512e568089a4c7b85b5322ab8019723cd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45ff12512e568089a4c7b85b5322ab8019723cd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45ff12512e568089a4c7b85b5322ab8019723cd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45ff12512e568089a4c7b85b5322ab8019723cd9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6bd9c42b0ad0cc4a615135612599adb829f2d9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6bd9c42b0ad0cc4a615135612599adb829f2d9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6bd9c42b0ad0cc4a615135612599adb829f2d9c"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "4efa200428ac18b3d7a95bc505d0613484fbc009", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45ff12512e568089a4c7b85b5322ab8019723cd9/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45ff12512e568089a4c7b85b5322ab8019723cd9/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=45ff12512e568089a4c7b85b5322ab8019723cd9", "patch": "@@ -1020,7 +1020,8 @@ class pass_optimize_bswap : public gimple_opt_pass\n    first.  */\n \n static tree\n-bswap_view_convert (gimple_stmt_iterator *gsi, tree type, tree val)\n+bswap_view_convert (gimple_stmt_iterator *gsi, tree type, tree val,\n+\t\t    bool before)\n {\n   gcc_assert (INTEGRAL_TYPE_P (TREE_TYPE (val))\n \t      || POINTER_TYPE_P (TREE_TYPE (val)));\n@@ -1032,12 +1033,18 @@ bswap_view_convert (gimple_stmt_iterator *gsi, tree type, tree val)\n \t  gimple *g\n \t    = gimple_build_assign (make_ssa_name (pointer_sized_int_node),\n \t\t\t\t   NOP_EXPR, val);\n-\t  gsi_insert_before (gsi, g, GSI_SAME_STMT);\n+\t  if (before)\n+\t    gsi_insert_before (gsi, g, GSI_SAME_STMT);\n+\t  else\n+\t    gsi_insert_after (gsi, g, GSI_NEW_STMT);\n \t  val = gimple_assign_lhs (g);\n \t}\n       tree itype = build_nonstandard_integer_type (prec, 1);\n       gimple *g = gimple_build_assign (make_ssa_name (itype), NOP_EXPR, val);\n-      gsi_insert_before (gsi, g, GSI_SAME_STMT);\n+      if (before)\n+\tgsi_insert_before (gsi, g, GSI_SAME_STMT);\n+      else\n+\tgsi_insert_after (gsi, g, GSI_NEW_STMT);\n       val = gimple_assign_lhs (g);\n     }\n   return build1 (VIEW_CONVERT_EXPR, type, val);\n@@ -1165,7 +1172,8 @@ bswap_replace (gimple_stmt_iterator gsi, gimple *ins_stmt, tree fndecl,\n \t      gimple_set_vuse (load_stmt, n->vuse);\n \t      gsi_insert_before (&gsi, load_stmt, GSI_SAME_STMT);\n \t      if (conv_code == VIEW_CONVERT_EXPR)\n-\t\tval_tmp = bswap_view_convert (&gsi, TREE_TYPE (tgt), val_tmp);\n+\t\tval_tmp = bswap_view_convert (&gsi, TREE_TYPE (tgt), val_tmp,\n+\t\t\t\t\t      true);\n \t      gimple_assign_set_rhs_with_ops (&gsi, conv_code, val_tmp);\n \t      update_stmt (cur_stmt);\n \t    }\n@@ -1209,7 +1217,7 @@ bswap_replace (gimple_stmt_iterator gsi, gimple *ins_stmt, tree fndecl,\n \t  if (!is_gimple_val (src))\n \t    return NULL_TREE;\n \t  if (conv_code == VIEW_CONVERT_EXPR)\n-\t    src = bswap_view_convert (&gsi, TREE_TYPE (tgt), src);\n+\t    src = bswap_view_convert (&gsi, TREE_TYPE (tgt), src, true);\n \t  g = gimple_build_assign (tgt, conv_code, src);\n \t}\n       else if (cur_stmt)\n@@ -1296,14 +1304,13 @@ bswap_replace (gimple_stmt_iterator gsi, gimple *ins_stmt, tree fndecl,\n   /* Convert the result if necessary.  */\n   if (!useless_type_conversion_p (TREE_TYPE (tgt), bswap_type))\n     {\n-      gimple *convert_stmt;\n-\n       tmp = make_temp_ssa_name (bswap_type, NULL, \"bswapdst\");\n       tree atmp = tmp;\n+      gimple_stmt_iterator gsi2 = gsi;\n       if (conv_code == VIEW_CONVERT_EXPR)\n-\tatmp = bswap_view_convert (&gsi, TREE_TYPE (tgt), tmp);\n-      convert_stmt = gimple_build_assign (tgt, conv_code, atmp);\n-      gsi_insert_after (&gsi, convert_stmt, GSI_SAME_STMT);\n+\tatmp = bswap_view_convert (&gsi2, TREE_TYPE (tgt), tmp, false);\n+      gimple *convert_stmt = gimple_build_assign (tgt, conv_code, atmp);\n+      gsi_insert_after (&gsi2, convert_stmt, GSI_SAME_STMT);\n     }\n \n   gimple_set_lhs (mask_stmt ? mask_stmt : bswap_stmt, tmp);"}, {"sha": "f3fc8d87d7e359b21ae656e1b5ac32d9105fc735", "filename": "gcc/testsuite/gcc.dg/pr102141.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45ff12512e568089a4c7b85b5322ab8019723cd9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102141.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45ff12512e568089a4c7b85b5322ab8019723cd9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102141.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102141.c?ref=45ff12512e568089a4c7b85b5322ab8019723cd9", "patch": "@@ -0,0 +1,11 @@\n+/* PR tree-optimization/102141 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+unsigned int __attribute__((__vector_size__ (4))) v;\n+\n+void\n+foo (unsigned long long x)\n+{\n+  v &= (unsigned) (x >> 56 | x >> 40 & 0xff00);\n+}"}]}