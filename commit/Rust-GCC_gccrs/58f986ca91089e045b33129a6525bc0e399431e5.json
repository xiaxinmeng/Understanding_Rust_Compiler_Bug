{"sha": "58f986ca91089e045b33129a6525bc0e399431e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThmOTg2Y2E5MTA4OWUwNDViMzMxMjlhNjUyNWJjMGUzOTk0MzFlNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-09-01T08:38:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-09-01T08:38:10Z"}, "message": "tree-flow.h (mark_addressable): Move declaration ...\n\n2009-09-01  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-flow.h (mark_addressable): Move declaration ...\n\t* tree.h (mark_addressable): ... here.\n\t* stmt.c (expand_asm_operands): Use mark_addressable, not\n\tlang_hooks.mark_addressable.\n\t* langhooks-def.h (LANG_HOOKS_INITIALIZER): Remove\n\tLANG_HOOKS_MARK_ADDRESSABLE.\n\t* langhooks.h (struct lang_hooks): Remove mark_addressable langhook.\n\n\t* c-objc-common.h (LANG_HOOKS_MARK_ADDRESSABLE): Remove.\n\n\tada/\n\t* gcc-interface/misc.c (LANG_HOOKS_MARK_ADDRESSABLE): Remove.\n\n\tcp/\n\t* cp-objcp-common.h (LANG_HOOKS_MARK_ADDRESSABLE): Remove.\n\n\tfortran/\n\t* f95-lang.c (gfc_mark_addressable): Remove.\n\t(LANG_HOOKS_MARK_ADDRESSABLE): Likewise.\n\n\tjava/\n\t* lang.c (LANG_HOOKS_MARK_ADDRESSABLE): Remove.\n\t* java-tree.h (java_mark_addressable): Likewise.\n\t* typeck.c (java_mark_addressable): Likewise.\n\nFrom-SVN: r151260", "tree": {"sha": "7b75c3f77fdca843c801160365568addd7ee492a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b75c3f77fdca843c801160365568addd7ee492a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58f986ca91089e045b33129a6525bc0e399431e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f986ca91089e045b33129a6525bc0e399431e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58f986ca91089e045b33129a6525bc0e399431e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f986ca91089e045b33129a6525bc0e399431e5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5fa162c0d1065408634dd5df4a58407f35109b4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fa162c0d1065408634dd5df4a58407f35109b4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fa162c0d1065408634dd5df4a58407f35109b4d"}], "stats": {"total": 196, "additions": 33, "deletions": 163}, "files": [{"sha": "9b1577c55c75aaa5695de93a958d68755be233b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58f986ca91089e045b33129a6525bc0e399431e5", "patch": "@@ -1,3 +1,14 @@\n+2009-09-01  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-flow.h (mark_addressable): Move declaration ...\n+\t* tree.h (mark_addressable): ... here.\n+\t* stmt.c (expand_asm_operands): Use mark_addressable, not\n+\tlang_hooks.mark_addressable.\n+\t* langhooks-def.h (LANG_HOOKS_INITIALIZER): Remove\n+\tLANG_HOOKS_MARK_ADDRESSABLE.\n+\t* langhooks.h (struct lang_hooks): Remove mark_addressable langhook.\n+\t* c-objc-common.h (LANG_HOOKS_MARK_ADDRESSABLE): Remove.\n+\n 2009-08-31  Chris Demetriou  <cgd@google.com>\n \n \t* config/i386/i386.c (ix86_vectorize_builtin_conversion): Never"}, {"sha": "1723e41f485cf09975f8ac347b874521006d27e9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=58f986ca91089e045b33129a6525bc0e399431e5", "patch": "@@ -1,3 +1,7 @@\n+2009-09-01  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc-interface/misc.c (LANG_HOOKS_MARK_ADDRESSABLE): Remove.\n+\n 2009-08-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (call_to_gnu): Tidy."}, {"sha": "46e762feeb33bccd642e5b89219634c1294a85f8", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=58f986ca91089e045b33129a6525bc0e399431e5", "patch": "@@ -106,8 +106,6 @@ static void gnat_get_subrange_bounds\t(const_tree, tree *, tree *);\n #define LANG_HOOKS_WRITE_GLOBALS\tgnat_write_global_declarations\n #undef  LANG_HOOKS_GET_ALIAS_SET\n #define LANG_HOOKS_GET_ALIAS_SET\tgnat_get_alias_set\n-#undef  LANG_HOOKS_MARK_ADDRESSABLE\n-#define LANG_HOOKS_MARK_ADDRESSABLE\tgnat_mark_addressable\n #undef  LANG_HOOKS_PRINT_DECL\n #define LANG_HOOKS_PRINT_DECL\t\tgnat_print_decl\n #undef  LANG_HOOKS_PRINT_TYPE"}, {"sha": "8408b9ffdfed58ca8c9d1cc4ec48d90afbcdf0fd", "filename": "gcc/c-objc-common.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Fc-objc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Fc-objc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.h?ref=58f986ca91089e045b33129a6525bc0e399431e5", "patch": "@@ -40,8 +40,6 @@ along with GCC; see the file COPYING3.  If not see\n #define LANG_HOOKS_POST_OPTIONS c_common_post_options\n #undef LANG_HOOKS_GET_ALIAS_SET\n #define LANG_HOOKS_GET_ALIAS_SET c_common_get_alias_set\n-#undef LANG_HOOKS_MARK_ADDRESSABLE\n-#define LANG_HOOKS_MARK_ADDRESSABLE c_mark_addressable\n #undef LANG_HOOKS_PARSE_FILE\n #define LANG_HOOKS_PARSE_FILE c_common_parse_file\n #undef LANG_HOOKS_FINISH_INCOMPLETE_DECL"}, {"sha": "19c17be7da5377195987e0c28dd388dd792b8cb6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=58f986ca91089e045b33129a6525bc0e399431e5", "patch": "@@ -1,3 +1,7 @@\n+2009-09-01  Richard Guenther  <rguenther@suse.de>\n+\n+\t* cp-objcp-common.h (LANG_HOOKS_MARK_ADDRESSABLE): Remove.\n+\n 2009-08-31  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR debug/30161"}, {"sha": "fe8a04721f3ee9497a50b1ea07b5e0865301be98", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=58f986ca91089e045b33129a6525bc0e399431e5", "patch": "@@ -58,8 +58,6 @@ extern bool cp_function_decl_explicit_p (tree decl);\n #define LANG_HOOKS_DUP_LANG_SPECIFIC_DECL cxx_dup_lang_specific_decl\n #undef LANG_HOOKS_SET_DECL_ASSEMBLER_NAME\n #define LANG_HOOKS_SET_DECL_ASSEMBLER_NAME mangle_decl\n-#undef LANG_HOOKS_MARK_ADDRESSABLE\n-#define LANG_HOOKS_MARK_ADDRESSABLE cxx_mark_addressable\n #undef LANG_HOOKS_PRINT_STATISTICS\n #define LANG_HOOKS_PRINT_STATISTICS cxx_print_statistics\n #undef LANG_HOOKS_PRINT_XNODE"}, {"sha": "ac4175aec5437f87b0eaa9b438121e5204e3e7a1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=58f986ca91089e045b33129a6525bc0e399431e5", "patch": "@@ -1,3 +1,8 @@\n+2009-09-01  Richard Guenther  <rguenther@suse.de>\n+\n+\t* f95-lang.c (gfc_mark_addressable): Remove.\n+\t(LANG_HOOKS_MARK_ADDRESSABLE): Likewise.\n+\n 2009-08-31  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/39229"}, {"sha": "181f0fcf755e286dbfe581622d0779341855f6b7", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=58f986ca91089e045b33129a6525bc0e399431e5", "patch": "@@ -94,7 +94,6 @@ static void gfc_init_builtin_functions (void);\n static bool gfc_init (void);\n static void gfc_finish (void);\n static void gfc_print_identifier (FILE *, tree, int);\n-static bool gfc_mark_addressable (tree);\n void do_function_end (void);\n int global_bindings_p (void);\n static void clear_binding_stack (void);\n@@ -137,7 +136,6 @@ static void gfc_init_ts (void);\n #define LANG_HOOKS_POST_OPTIONS\t\tgfc_post_options\n #define LANG_HOOKS_PRINT_IDENTIFIER     gfc_print_identifier\n #define LANG_HOOKS_PARSE_FILE           gfc_be_parse_file\n-#define LANG_HOOKS_MARK_ADDRESSABLE\tgfc_mark_addressable\n #define LANG_HOOKS_TYPE_FOR_MODE\tgfc_type_for_mode\n #define LANG_HOOKS_TYPE_FOR_SIZE\tgfc_type_for_size\n #define LANG_HOOKS_GET_ALIAS_SET\tgfc_get_alias_set\n@@ -563,84 +561,6 @@ gfc_init_decl_processing (void)\n }\n \n \n-/* Mark EXP saying that we need to be able to take the\n-   address of it; it should not be allocated in a register.\n-   In Fortran 95 this is only the case for variables with\n-   the TARGET attribute, but we implement it here for a\n-   likely future Cray pointer extension.\n-   Value is 1 if successful.  */\n-/* TODO: Check/fix mark_addressable.  */\n-\n-bool\n-gfc_mark_addressable (tree exp)\n-{\n-  register tree x = exp;\n-  while (1)\n-    switch (TREE_CODE (x))\n-      {\n-      case COMPONENT_REF:\n-      case ADDR_EXPR:\n-      case ARRAY_REF:\n-      case REALPART_EXPR:\n-      case IMAGPART_EXPR:\n-\tx = TREE_OPERAND (x, 0);\n-\tbreak;\n-\n-      case CONSTRUCTOR:\n-\tTREE_ADDRESSABLE (x) = 1;\n-\treturn true;\n-\n-      case VAR_DECL:\n-      case CONST_DECL:\n-      case PARM_DECL:\n-      case RESULT_DECL:\n-\tif (DECL_REGISTER (x) && !TREE_ADDRESSABLE (x) && DECL_NONLOCAL (x))\n-\t  {\n-\t    if (TREE_PUBLIC (x))\n-\t      {\n-\t\terror (\"global register variable %qs used in nested function\",\n-\t\t       IDENTIFIER_POINTER (DECL_NAME (x)));\n-\t\treturn false;\n-\t      }\n-\t    pedwarn (input_location, 0, \"register variable %qs used in nested function\",\n-\t\t     IDENTIFIER_POINTER (DECL_NAME (x)));\n-\t  }\n-\telse if (DECL_REGISTER (x) && !TREE_ADDRESSABLE (x))\n-\t  {\n-\t    if (TREE_PUBLIC (x))\n-\t      {\n-\t\terror (\"address of global register variable %qs requested\",\n-\t\t       IDENTIFIER_POINTER (DECL_NAME (x)));\n-\t\treturn true;\n-\t      }\n-\n-#if 0\n-\t    /* If we are making this addressable due to its having\n-\t       volatile components, give a different error message.  Also\n-\t       handle the case of an unnamed parameter by not trying\n-\t       to give the name.  */\n-\n-\t    else if (C_TYPE_FIELDS_VOLATILE (TREE_TYPE (x)))\n-\t      {\n-\t\terror (\"cannot put object with volatile field into register\");\n-\t\treturn false;\n-\t      }\n-#endif\n-\n-\t    pedwarn (input_location, 0, \"address of register variable %qs requested\",\n-\t\t     IDENTIFIER_POINTER (DECL_NAME (x)));\n-\t  }\n-\n-\t/* drops in */\n-      case FUNCTION_DECL:\n-\tTREE_ADDRESSABLE (x) = 1;\n-\n-      default:\n-\treturn true;\n-      }\n-}\n-\n-\n /* Return the typed-based alias set for T, which may be an expression\n    or a type.  Return -1 if we don't do anything special.  */\n "}, {"sha": "a291dffe599d327c8cf252066fc53b83100711af", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=58f986ca91089e045b33129a6525bc0e399431e5", "patch": "@@ -1,3 +1,9 @@\n+2009-09-01  Richard Guenther  <rguenther@suse.de>\n+\n+\t* lang.c (LANG_HOOKS_MARK_ADDRESSABLE): Remove.\n+\t* java-tree.h (java_mark_addressable): Likewise.\n+\t* typeck.c (java_mark_addressable): Likewise.\n+\n 2009-08-17  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* Make-lang.in (java.install-pdf): Install gcj.pdf in"}, {"sha": "29027eb64637b57f436f256b81bb62f73a38d4b5", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=58f986ca91089e045b33129a6525bc0e399431e5", "patch": "@@ -988,7 +988,6 @@ struct GTY(()) lang_type {\n struct eh_range;\n \n extern void java_parse_file (int);\n-extern bool java_mark_addressable (tree);\n extern tree java_type_for_mode (enum machine_mode, int);\n extern tree java_type_for_size (unsigned int, int);\n extern tree java_truthvalue_conversion (tree);"}, {"sha": "109ec51e79d240e01a7d357708751099ffb3ee0b", "filename": "gcc/java/lang.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=58f986ca91089e045b33129a6525bc0e399431e5", "patch": "@@ -129,8 +129,6 @@ struct GTY(()) language_function {\n #define LANG_HOOKS_POST_OPTIONS java_post_options\n #undef LANG_HOOKS_PARSE_FILE\n #define LANG_HOOKS_PARSE_FILE java_parse_file\n-#undef LANG_HOOKS_MARK_ADDRESSABLE\n-#define LANG_HOOKS_MARK_ADDRESSABLE java_mark_addressable\n #undef LANG_HOOKS_DUP_LANG_SPECIFIC_DECL\n #define LANG_HOOKS_DUP_LANG_SPECIFIC_DECL java_dup_lang_specific_decl\n #undef LANG_HOOKS_DECL_PRINTABLE_NAME"}, {"sha": "1024b7a4de9ee744cf898bb68fb5227a8284c5db", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=58f986ca91089e045b33129a6525bc0e399431e5", "patch": "@@ -193,71 +193,6 @@ java_type_for_size (unsigned bits, int unsignedp)\n   return 0;\n }\n \n-/* Mark EXP saying that we need to be able to take the\n-   address of it; it should not be allocated in a register.\n-   Value is true if successful.  */\n-\n-bool\n-java_mark_addressable (tree exp)\n-{\n-  tree x = exp;\n-  while (1)\n-    switch (TREE_CODE (x))\n-      {\n-      case ADDR_EXPR:\n-      case COMPONENT_REF:\n-      case ARRAY_REF:\n-      case REALPART_EXPR:\n-      case IMAGPART_EXPR:\n-\tx = TREE_OPERAND (x, 0);\n-\tbreak;\n-\n-      case TRUTH_ANDIF_EXPR:\n-      case TRUTH_ORIF_EXPR:\n-      case COMPOUND_EXPR:\n-\tx = TREE_OPERAND (x, 1);\n-\tbreak;\n-\n-      case COND_EXPR:\n-\treturn java_mark_addressable (TREE_OPERAND (x, 1))\n-\t  && java_mark_addressable (TREE_OPERAND (x, 2));\n-\n-      case CONSTRUCTOR:\n-\tTREE_ADDRESSABLE (x) = 1;\n-\treturn true;\n-\n-      case INDIRECT_REF:\n-\t/* We sometimes add a cast *(TYPE*)&FOO to handle type and mode\n-\t   incompatibility problems.  Handle this case by marking FOO.  */\n-\tif (TREE_CODE (TREE_OPERAND (x, 0)) == NOP_EXPR\n-\t    && TREE_CODE (TREE_OPERAND (TREE_OPERAND (x, 0), 0)) == ADDR_EXPR)\n-\t  {\n-\t    x = TREE_OPERAND (TREE_OPERAND (x, 0), 0);\n-\t    break;\n-\t  }\n-\tif (TREE_CODE (TREE_OPERAND (x, 0)) == ADDR_EXPR)\n-\t  {\n-\t    x = TREE_OPERAND (x, 0);\n-\t    break;\n-\t  }\n-\treturn true;\n-\n-      case VAR_DECL:\n-      case CONST_DECL:\n-      case PARM_DECL:\n-      case RESULT_DECL:\n-      case FUNCTION_DECL:\n-\tTREE_ADDRESSABLE (x) = 1;\n-#if 0  /* poplevel deals with this now.  */\n-\tif (DECL_CONTEXT (x) == 0)\n-\t  TREE_ADDRESSABLE (DECL_ASSEMBLER_NAME (x)) = 1;\n-#endif\n-\t/* drops through */\n-      default:\n-\treturn true;\n-    }\n-}\n-\n /* Thorough checking of the arrayness of TYPE.  */\n \n int"}, {"sha": "afbab6fd4ed3141b6b8158d273f7770ccb26ba50", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=58f986ca91089e045b33129a6525bc0e399431e5", "patch": "@@ -243,7 +243,6 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_MISSING_NORETURN_OK_P, \\\n   LANG_HOOKS_GET_ALIAS_SET, \\\n   LANG_HOOKS_FINISH_INCOMPLETE_DECL, \\\n-  LANG_HOOKS_MARK_ADDRESSABLE, \\\n   LANG_HOOKS_DUP_LANG_SPECIFIC_DECL, \\\n   LANG_HOOKS_SET_DECL_ASSEMBLER_NAME, \\\n   LANG_HOOKS_PRINT_STATISTICS, \\"}, {"sha": "4a590dea5047a0a8ce5bd2679ee29e293ce10dc3", "filename": "gcc/langhooks.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=58f986ca91089e045b33129a6525bc0e399431e5", "patch": "@@ -298,11 +298,6 @@ struct lang_hooks\n      compilation.  Default hook is does nothing.  */\n   void (*finish_incomplete_decl) (tree);\n \n-  /* Mark EXP saying that we need to be able to take the address of\n-     it; it should not be allocated in a register.  Return true if\n-     successful.  */\n-  bool (*mark_addressable) (tree);\n-\n   /* Replace the DECL_LANG_SPECIFIC data, which may be NULL, of the\n      DECL_NODE with a newly GC-allocated copy.  */\n   void (*dup_lang_specific_decl) (tree);"}, {"sha": "0a36e10f0b440da1ab723ba6030b49196d4d3fa4", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=58f986ca91089e045b33129a6525bc0e399431e5", "patch": "@@ -737,7 +737,7 @@ expand_asm_operands (tree string, tree outputs, tree inputs,\n \t      || (DECL_P (val)\n \t\t  && REG_P (DECL_RTL (val))\n \t\t  && GET_MODE (DECL_RTL (val)) != TYPE_MODE (type))))\n-\tlang_hooks.mark_addressable (val);\n+\tmark_addressable (val);\n \n       if (is_inout)\n \tninout++;\n@@ -766,7 +766,7 @@ expand_asm_operands (tree string, tree outputs, tree inputs,\n \treturn;\n \n       if (! allows_reg && allows_mem)\n-\tlang_hooks.mark_addressable (TREE_VALUE (tail));\n+\tmark_addressable (TREE_VALUE (tail));\n     }\n \n   /* Second pass evaluates arguments.  */"}, {"sha": "8de4675cf205d1f4501f0377189f9b512c3181f8", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=58f986ca91089e045b33129a6525bc0e399431e5", "patch": "@@ -890,7 +890,6 @@ tree force_gimple_operand (tree, gimple_seq *, bool, tree);\n tree force_gimple_operand_gsi (gimple_stmt_iterator *, tree, bool, tree,\n \t\t\t       bool, enum gsi_iterator_update);\n tree gimple_fold_indirect_ref (tree);\n-void mark_addressable (tree);\n \n /* In tree-ssa-live.c */\n extern void remove_unused_locals (void);"}, {"sha": "441612afc71424295328ff65e241d89157debd1b", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f986ca91089e045b33129a6525bc0e399431e5/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=58f986ca91089e045b33129a6525bc0e399431e5", "patch": "@@ -5157,6 +5157,7 @@ extern bool in_gimple_form;\n \n /* In gimple.c.  */\n extern tree get_base_address (tree t);\n+extern void mark_addressable (tree);\n \n /* In tree-vectorizer.c.  */\n extern void vect_set_verbosity_level (const char *);"}]}