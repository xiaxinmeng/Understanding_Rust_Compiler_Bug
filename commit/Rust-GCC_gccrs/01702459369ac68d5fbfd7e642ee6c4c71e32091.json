{"sha": "01702459369ac68d5fbfd7e642ee6c4c71e32091", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE3MDI0NTkzNjlhYzY4ZDVmYmZkN2U2NDJlZTZjNGM3MWUzMjA5MQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-11-10T01:46:00Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-11-10T01:46:00Z"}, "message": "extend.texi, [...]: Move documentation of builtin versions of C library functions to one place and...\n\n\t* extend.texi, invoke.texi: Move documentation of builtin versions\n\tof C library functions to one place and update.\n\nFrom-SVN: r37355", "tree": {"sha": "854ed9d3585f63447f889c5f4f85696c09ef35d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/854ed9d3585f63447f889c5f4f85696c09ef35d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01702459369ac68d5fbfd7e642ee6c4c71e32091", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01702459369ac68d5fbfd7e642ee6c4c71e32091", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01702459369ac68d5fbfd7e642ee6c4c71e32091", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01702459369ac68d5fbfd7e642ee6c4c71e32091/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30355eaac82aa043fbbc8ae64d8bd962aa66c9ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30355eaac82aa043fbbc8ae64d8bd962aa66c9ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30355eaac82aa043fbbc8ae64d8bd962aa66c9ab"}], "stats": {"total": 144, "additions": 97, "deletions": 47}, "files": [{"sha": "9c16415429aef43e34c55b0d62111c7a9fa41444", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01702459369ac68d5fbfd7e642ee6c4c71e32091/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01702459369ac68d5fbfd7e642ee6c4c71e32091/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01702459369ac68d5fbfd7e642ee6c4c71e32091", "patch": "@@ -1,3 +1,8 @@\n+2000-11-10  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* extend.texi, invoke.texi: Move documentation of builtin versions\n+\tof C library functions to one place and update.\n+\n 2000-11-09  Richard Henderson  <rth@redhat.com>\n \n \t* fold-const.c (fold): Compare TYPE_MAIN_VARIANT rather than"}, {"sha": "2de3a4775a887abba92a8708fac04a9e89b11e3a", "filename": "gcc/extend.texi", "status": "modified", "additions": 82, "deletions": 9, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01702459369ac68d5fbfd7e642ee6c4c71e32091/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01702459369ac68d5fbfd7e642ee6c4c71e32091/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=01702459369ac68d5fbfd7e642ee6c4c71e32091", "patch": "@@ -3225,6 +3225,47 @@ function as well.\n \n @node Other Builtins\n @section Other built-in functions provided by GNU CC\n+@cindex builtin functions\n+@findex __builtin_isgreater\n+@findex __builtin_isgreaterequal\n+@findex __builtin_isless\n+@findex __builtin_islessequal\n+@findex __builtin_islessgreater\n+@findex __builtin_isunordered\n+@findex abort\n+@findex abs\n+@findex alloca\n+@findex bcmp\n+@findex bzero\n+@findex cos\n+@findex cosf\n+@findex cosl\n+@findex exit\n+@findex _exit\n+@findex fabs\n+@findex fabsf\n+@findex fabsl\n+@findex ffs\n+@findex fputs\n+@findex labs\n+@findex llabs\n+@findex memcmp\n+@findex memcpy\n+@findex memset\n+@findex printf\n+@findex sin\n+@findex sinf\n+@findex sinl\n+@findex sqrt\n+@findex sqrtf\n+@findex sqrtl\n+@findex strchr\n+@findex strcmp\n+@findex strcpy\n+@findex strlen\n+@findex strpbrk\n+@findex strrchr\n+@findex strstr\n \n GNU CC provides a large number of built-in functions other than the ones\n mentioned above.  Some of these are for internal use in the processing\n@@ -3235,15 +3276,47 @@ recommend general use of these functions.\n The remaining functions are provided for optimization purposes.\n \n GNU CC includes builtin versions of many of the functions in the\n-standard C library.  These will always be treated as having the same\n-meaning as the C library function even if you specify the\n-@samp{-fno-builtin} (@pxref{C Dialect Options}) option.  These functions\n-correspond to the C library functions @code{abort}, @code{abs},\n-@code{alloca}, @code{cos}, @code{cosf}, @code{cosl}, @code{exit},\n-@code{_exit}, @code{fabs}, @code{fabsf}, @code{fabsl}, @code{ffs},\n-@code{labs}, @code{memcmp}, @code{memcpy}, @code{memset}, @code{sin},\n-@code{sinf}, @code{sinl}, @code{sqrt}, @code{sqrtf}, @code{sqrtl},\n-@code{strcmp}, @code{strcpy}, and @code{strlen}.\n+standard C library.  The versions prefixed with @code{__builtin_} will\n+always be treated as having the same meaning as the C library function\n+even if you specify the @samp{-fno-builtin} (@pxref{C Dialect Options})\n+option.  Many of these functions are only optimized in certain cases; if\n+not optimized in a particular case, a call to the library function will\n+be emitted.\n+\n+The functions @code{abort}, @code{exit}, and @code{_exit} are recognized\n+and presumed not to return, but otherwise are not built in.\n+@code{_exit} is not recognized in strict ISO C mode (@samp{-ansi},\n+@samp{-std=c89} or @samp{-std=c99}).\n+\n+Outside strict ISO C mode, the functions @code{alloca}, @code{bcmp},\n+@code{bzero}, and @code{ffs} may be handled as builtins.  Corresponding\n+versions @code{__builtin_alloca}, @code{__builtin_bcmp},\n+@code{__builtin_bzero}, and @code{__builtin_ffs} are also recognized in\n+strict ISO C mode.\n+\n+The ISO C99 function @code{llabs} is handled as a builtin except in\n+strict ISO C89 mode.  There are also builtin versions of the ISO C99\n+functions @code{cosf}, @code{cosl}, @code{fabsf}, @code{fabsl},\n+@code{sinf}, @code{sinl}, @code{sqrtf}, and @code{sqrtl}, that are\n+recognized in any mode since ISO C89 reserves these names for the\n+purpose to which ISO C99 puts them.  All these functions have\n+corresponding versions prefixed with @code{__builtin_}.\n+\n+The following ISO C89 functions are recognized as builtins unless\n+@samp{-fno-builtin} is specified: @code{abs}, @code{cos}, @code{fabs},\n+@code{fputs}, @code{labs}, @code{memcmp}, @code{memcpy}, @code{memset},\n+@code{printf}, @code{sin}, @code{sqrt}, @code{strchr}, @code{strcmp},\n+@code{strcpy}, @code{strlen}, @code{strpbrk}, @code{strrchr}, and\n+@code{strstr}.  All of these functions have corresponding versions\n+prefixed with @code{__builtin_}, except that the version for @code{sqrt}\n+is called @code{__builtin_fsqrt}.\n+\n+GNU CC provides builtin versions of the ISO C99 floating point\n+comparison macros (that avoid raising exceptions for unordered\n+operands): @code{__builtin_isgreater}, @code{__builtin_isgreaterequal},\n+@code{__builtin_isless}, @code{__builtin_islessequal},\n+@code{__builtin_islessgreater}, and @code{__builtin_isunordered}.\n+\n \n @table @code\n @findex __builtin_constant_p"}, {"sha": "209cdea8a0a047d533877459588b135c3e76b43f", "filename": "gcc/invoke.texi", "status": "modified", "additions": 10, "deletions": 38, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01702459369ac68d5fbfd7e642ee6c4c71e32091/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01702459369ac68d5fbfd7e642ee6c4c71e32091/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=01702459369ac68d5fbfd7e642ee6c4c71e32091", "patch": "@@ -727,8 +727,11 @@ from declaring certain functions or defining certain macros that the\n ANSI standard doesn't call for; this is to avoid interfering with any\n programs that might use these names for other things.\n \n-The functions @code{alloca}, @code{abort}, @code{exit}, and\n-@code{_exit} are not builtin functions when @samp{-ansi} is used.\n+Functions which would normally be builtin but do not have semantics\n+defined by ISO C (such as @code{alloca} and @code{ffs}) are not builtin\n+functions with @samp{-ansi} is used.  @xref{Other Builtins,,Other\n+built-in functions provided by GNU CC}, for details of the functions\n+affected.\n \n @item -std=\n Determine the language standard.  A value for this option must be provided;\n@@ -785,38 +788,11 @@ use the @samp{-fno-gnu-keywords} flag instead, which has the same effect.\n \n @item -fno-builtin\n @cindex builtin functions\n-@findex abort\n-@findex abs\n-@findex alloca\n-@findex cos\n-@findex cosf\n-@findex cosl\n-@findex exit\n-@findex _exit\n-@findex fabs\n-@findex fabsf\n-@findex fabsl\n-@findex ffs\n-@findex labs\n-@findex memcmp\n-@findex memcpy\n-@findex memset\n-@findex sin\n-@findex sinf\n-@findex sinl\n-@findex sqrt\n-@findex sqrtf\n-@findex sqrtl\n-@findex strcmp\n-@findex strcpy\n-@findex strlen\n-Don't recognize builtin functions that do not begin with @samp{__builtin_}\n-as prefix.  Currently, the functions affected include @code{abort},\n-@code{abs}, @code{alloca}, @code{cos}, @code{cosf}, @code{cosl},\n-@code{exit}, @code{_exit}, @code{fabs}, @code{fabsf}, @code{fabsl},\n-@code{ffs}, @code{labs}, @code{memcmp}, @code{memcpy}, @code{memset},\n-@code{sin}, @code{sinf}, @code{sinl}, @code{sqrt}, @code{sqrtf},\n-@code{sqrtl}, @code{strcmp}, @code{strcpy}, and @code{strlen}.\n+Don't recognize builtin functions that do not begin with\n+@samp{__builtin_} as prefix.  @xref{Other Builtins,,Other built-in\n+functions provided by GNU CC}, for details of the functions affected,\n+including those which are not builtin functions when @samp{-ansi} is\n+used because they do not have an ISO standard meaning.\n \n GCC normally generates special code to handle certain builtin functions\n more efficiently; for instance, calls to @code{alloca} may become single\n@@ -826,10 +802,6 @@ and faster, but since the function calls no longer appear as such, you\n cannot set a breakpoint on those calls, nor can you change the behavior\n of the functions by linking with a different library.\n \n-The @samp{-ansi} option prevents @code{alloca}, @code{ffs} and @code{_exit}\n-from being builtin functions, since these functions do not have an ANSI\n-standard meaning.\n-\n @item -fhosted\n @cindex hosted environment\n "}]}