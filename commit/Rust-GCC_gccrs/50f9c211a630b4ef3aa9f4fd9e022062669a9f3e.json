{"sha": "50f9c211a630b4ef3aa9f4fd9e022062669a9f3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBmOWMyMTFhNjMwYjRlZjNhYTlmNGZkOWUwMjIwNjI2NjlhOWYzZQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2007-03-06T02:47:37Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2007-03-06T02:47:37Z"}, "message": "pa.md: In unamed move patterns...\n\n\t* pa.md: In unamed move patterns, disparge copies between general\n\tand floating point registers using '?' modifier.  Don't include 'f'\n\tconstraint for register preferences in DImode, SImode, HImode and\n\tQImode patterns.  Likewise for 'r' in DFmode and SFmode patterns.\n\tRemove constraints for copies between general and floating registers\n\tin soft-float DFmode pattern.\n\t(movdf): Fail if operand1 is a CONST_DOUBLE and operand0 is a hard\n\tfloating register.\n\t(movsf): Likewise.\n\nFrom-SVN: r122593", "tree": {"sha": "973c936919d44a0b1131661ec4f511c77436a8fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/973c936919d44a0b1131661ec4f511c77436a8fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50f9c211a630b4ef3aa9f4fd9e022062669a9f3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50f9c211a630b4ef3aa9f4fd9e022062669a9f3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50f9c211a630b4ef3aa9f4fd9e022062669a9f3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50f9c211a630b4ef3aa9f4fd9e022062669a9f3e/comments", "author": null, "committer": null, "parents": [{"sha": "1f1d51306154bf6a354ff988868d3183022011c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f1d51306154bf6a354ff988868d3183022011c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f1d51306154bf6a354ff988868d3183022011c0"}], "stats": {"total": 68, "additions": 45, "deletions": 23}, "files": [{"sha": "3d915a1af178480ea19101efdf2b1441081d11b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f9c211a630b4ef3aa9f4fd9e022062669a9f3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f9c211a630b4ef3aa9f4fd9e022062669a9f3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50f9c211a630b4ef3aa9f4fd9e022062669a9f3e", "patch": "@@ -1,3 +1,15 @@\n+2007-03-05  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* pa.md: In unamed move patterns, disparge copies between general\n+\tand floating point registers using '?' modifier.  Don't include 'f'\n+\tconstraint for register preferences in DImode, SImode, HImode and\n+\tQImode patterns.  Likewise for 'r' in DFmode and SFmode patterns.\n+\tRemove constraints for copies between general and floating registers\n+\tin soft-float DFmode pattern.\n+\t(movdf): Fail if operand1 is a CONST_DOUBLE and operand0 is a hard\n+\tfloating register.\n+\t(movsf): Likewise. \n+\n 2007-03-05  Mike Stump  <mrs@apple.com>\n \n \t* c-common.c (targetcm): Add.   "}, {"sha": "32276f17f2d8462d6a2ea6f00c8e41ca84c22563", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 33, "deletions": 23, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f9c211a630b4ef3aa9f4fd9e022062669a9f3e/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f9c211a630b4ef3aa9f4fd9e022062669a9f3e/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=50f9c211a630b4ef3aa9f4fd9e022062669a9f3e", "patch": "@@ -2481,9 +2481,9 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"move_dest_operand\"\n-\t\t\t  \"=r,r,r,r,r,r,Q,!*q,!r,!*f,*f,T,!r,!f\")\n+\t\t\t  \"=r,r,r,r,r,r,Q,!*q,!r,!*f,*f,T,?r,?*f\")\n \t(match_operand:SI 1 \"move_src_operand\"\n-\t\t\t  \"A,r,J,N,K,RQ,rM,!rM,!*q,!*fM,RT,*f,!f,!r\"))]\n+\t\t\t  \"A,r,J,N,K,RQ,rM,!rM,!*q,!*fM,RT,*f,*f,r\"))]\n   \"(register_operand (operands[0], SImode)\n     || reg_or_0_operand (operands[1], SImode))\n    && !TARGET_SOFT_FLOAT\n@@ -3123,9 +3123,9 @@\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"move_dest_operand\"\n-\t \t\t  \"=r,r,r,r,r,Q,!*q,!r,!*f,!r,!f\")\n+\t \t\t  \"=r,r,r,r,r,Q,!*q,!r,!*f,?r,?*f\")\n \t(match_operand:HI 1 \"move_src_operand\"\n-\t\t\t  \"r,J,N,K,RQ,rM,!rM,!*q,!*fM,!f,!r\"))]\n+\t\t\t  \"r,J,N,K,RQ,rM,!rM,!*q,!*fM,*f,r\"))]\n   \"(register_operand (operands[0], HImode)\n     || reg_or_0_operand (operands[1], HImode))\n    && !TARGET_SOFT_FLOAT\n@@ -3296,9 +3296,9 @@\n \n (define_insn \"\"\n   [(set (match_operand:QI 0 \"move_dest_operand\"\n-\t\t\t  \"=r,r,r,r,r,Q,!*q,!r,!*f,!r,!f\")\n+\t\t\t  \"=r,r,r,r,r,Q,!*q,!r,!*f,?r,?*f\")\n \t(match_operand:QI 1 \"move_src_operand\"\n-\t\t\t  \"r,J,N,K,RQ,rM,!rM,!*q,!*fM,!f,!r\"))]\n+\t\t\t  \"r,J,N,K,RQ,rM,!rM,!*q,!*fM,*f,r\"))]\n   \"(register_operand (operands[0], QImode)\n     || reg_or_0_operand (operands[1], QImode))\n    && !TARGET_SOFT_FLOAT\n@@ -4098,17 +4098,19 @@\n   \"\"\n   \"\n {\n-  if (TARGET_64BIT\n-      && GET_CODE (operands[1]) == CONST_DOUBLE\n+  if (GET_CODE (operands[1]) == CONST_DOUBLE\n       && operands[1] != CONST0_RTX (DFmode))\n     {\n-      /* We rely on reload to legitimize the insn generated after\n-\t we force the CONST_DOUBLE to memory.  This doesn't happen\n-\t if OPERANDS[0] is a hard register.  */\n-      if (REG_P (operands[0]) && HARD_REGISTER_P (operands[0]))\n+      /* Reject CONST_DOUBLE loads to all hard registers when\n+\t generating 64-bit code and to floating point registers\n+\t when generating 32-bit code.  */\n+      if (REG_P (operands[0])\n+\t  && HARD_REGISTER_P (operands[0])\n+\t  && (TARGET_64BIT || REGNO (operands[0]) >= 32))\n \tFAIL;\n \n-      operands[1] = force_const_mem (DFmode, operands[1]);\n+      if (TARGET_64BIT)\n+\toperands[1] = force_const_mem (DFmode, operands[1]);\n     }\n \n   if (emit_move_sequence (operands, DFmode, 0))\n@@ -4151,9 +4153,9 @@\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"move_dest_operand\"\n-\t\t\t  \"=f,*r,Q,?o,?Q,f,*r,*r,!r,!f\")\n+\t\t\t  \"=f,*r,Q,?o,?Q,f,*r,*r,?*r,?f\")\n \t(match_operand:DF 1 \"reg_or_0_or_nonsymb_mem_operand\"\n-\t\t\t  \"fG,*rG,f,*r,*r,RQ,o,RQ,!f,!r\"))]\n+\t\t\t  \"fG,*rG,f,*r,*r,RQ,o,RQ,f,*r\"))]\n   \"(register_operand (operands[0], DFmode)\n     || reg_or_0_operand (operands[1], DFmode))\n    && !(GET_CODE (operands[1]) == CONST_DOUBLE\n@@ -4325,9 +4327,9 @@\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"move_dest_operand\"\n-\t\t\t  \"=r,?o,?Q,r,r,!r,!f\")\n+\t\t\t  \"=r,?o,?Q,r,r\")\n \t(match_operand:DF 1 \"reg_or_0_or_nonsymb_mem_operand\"\n-\t\t\t  \"rG,r,r,o,RQ,!f,!r\"))]\n+\t\t\t  \"rG,r,r,o,RQ\"))]\n   \"(register_operand (operands[0], DFmode)\n     || reg_or_0_operand (operands[1], DFmode))\n    && !TARGET_64BIT\n@@ -4336,8 +4338,8 @@\n {\n   return output_move_double (operands);\n }\"\n-  [(set_attr \"type\" \"move,store,store,load,load,move,move\")\n-   (set_attr \"length\" \"8,8,16,8,16,12,12\")])\n+  [(set_attr \"type\" \"move,store,store,load,load\")\n+   (set_attr \"length\" \"8,8,16,8,16\")])\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"move_dest_operand\"\n@@ -4486,9 +4488,9 @@\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"move_dest_operand\"\n-\t\t\t  \"=r,o,Q,r,r,r,*f,*f,T,!r,!f\")\n+\t\t\t  \"=r,o,Q,r,r,r,*f,*f,T,?r,?*f\")\n \t(match_operand:DI 1 \"general_operand\"\n-\t\t\t  \"rM,r,r,o*R,Q,i,*fM,RT,*f,!f,!r\"))]\n+\t\t\t  \"rM,r,r,o*R,Q,i,*fM,RT,*f,*f,r\"))]\n   \"(register_operand (operands[0], DImode)\n     || reg_or_0_operand (operands[1], DImode))\n    && !TARGET_64BIT\n@@ -4678,6 +4680,14 @@\n   \"\"\n   \"\n {\n+  /* Reject CONST_DOUBLE loads to floating point registers.  */\n+  if (GET_CODE (operands[1]) == CONST_DOUBLE\n+      && operands[1] != CONST0_RTX (SFmode)\n+      && REG_P (operands[0])\n+      && HARD_REGISTER_P (operands[0])\n+      && REGNO (operands[0]) >= 32)\n+    FAIL;\n+\n   if (emit_move_sequence (operands, SFmode, 0))\n     DONE;\n }\")\n@@ -4718,9 +4728,9 @@\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"move_dest_operand\"\n-\t\t\t  \"=f,!*r,f,*r,Q,Q,!r,!f\")\n+\t\t\t  \"=f,!*r,f,*r,Q,Q,?*r,?f\")\n \t(match_operand:SF 1 \"reg_or_0_or_nonsymb_mem_operand\"\n-\t\t\t  \"fG,!*rG,RQ,RQ,f,*rG,!f,!r\"))]\n+\t\t\t  \"fG,!*rG,RQ,RQ,f,*rG,f,*r\"))]\n   \"(register_operand (operands[0], SFmode)\n     || reg_or_0_operand (operands[1], SFmode))\n    && !TARGET_SOFT_FLOAT"}]}