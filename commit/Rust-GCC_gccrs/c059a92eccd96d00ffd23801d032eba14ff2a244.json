{"sha": "c059a92eccd96d00ffd23801d032eba14ff2a244", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA1OWE5MmVjY2Q5NmQwMGZmZDIzODAxZDAzMmViYTE0ZmYyYTI0NA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2017-10-04T11:58:22Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-10-04T11:58:22Z"}, "message": "New target check: vect_long_mult\n\nWe don't have a 64 bit vector integer multiply on z.  Add a specific\ncheck for that.\n\ngcc/ChangeLog:\n\n2017-10-04  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* doc/sourcebuild.texi: Document vect_long_mult.\n\ngcc/testsuite/ChangeLog:\n\n2017-10-04  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* gcc.dg/vect/pr60656.c: Check vect_long_mult.\n\t* lib/target-supports.exp (check_effective_target_vect_long_mult):\n\tNew proc.\n\nFrom-SVN: r253405", "tree": {"sha": "ecde82e300ec28a45195185acdf3d224564c9545", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecde82e300ec28a45195185acdf3d224564c9545"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c059a92eccd96d00ffd23801d032eba14ff2a244", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c059a92eccd96d00ffd23801d032eba14ff2a244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c059a92eccd96d00ffd23801d032eba14ff2a244", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c059a92eccd96d00ffd23801d032eba14ff2a244/comments", "author": null, "committer": null, "parents": [{"sha": "a46461133eac42da46efe784b5b596c35ebcdafc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a46461133eac42da46efe784b5b596c35ebcdafc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a46461133eac42da46efe784b5b596c35ebcdafc"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "2015b7fee849f0b2a9c4d917d5a3b7b918e45f38", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c059a92eccd96d00ffd23801d032eba14ff2a244/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c059a92eccd96d00ffd23801d032eba14ff2a244/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c059a92eccd96d00ffd23801d032eba14ff2a244", "patch": "@@ -1,3 +1,7 @@\n+2017-10-04  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* doc/sourcebuild.texi: Document vect_long_mult.\n+\n 2017-10-04  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR tree-optimization/82413"}, {"sha": "4f25268bda88e481a82ef1c92dfefc1ae4d08372", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c059a92eccd96d00ffd23801d032eba14ff2a244/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c059a92eccd96d00ffd23801d032eba14ff2a244/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=c059a92eccd96d00ffd23801d032eba14ff2a244", "patch": "@@ -1422,6 +1422,9 @@ Target supports @code{vector short} multiplication.\n @item vect_int_mult\n Target supports @code{vector int} multiplication.\n \n+@item vect_long_mult\n+Target supports 64 bit @code{vector long} multiplication.\n+\n @item vect_extract_even_odd\n Target supports vector even/odd element extraction.\n "}, {"sha": "68e0f055f2492b34d8640b3f4419fa0894f5b1e9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c059a92eccd96d00ffd23801d032eba14ff2a244/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c059a92eccd96d00ffd23801d032eba14ff2a244/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c059a92eccd96d00ffd23801d032eba14ff2a244", "patch": "@@ -1,3 +1,9 @@\n+2017-10-04  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* gcc.dg/vect/pr60656.c: Check vect_long_mult.\n+\t* lib/target-supports.exp (check_effective_target_vect_long_mult):\n+\tNew proc.\n+\n 2017-10-04  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* gfortran.dg/vect/fast-math-mgrid-resid.f: Use -mzarch on S/390."}, {"sha": "70ec0f68dd662b927a587ca5d816241526552130", "filename": "gcc/testsuite/gcc.dg/vect/pr60656.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c059a92eccd96d00ffd23801d032eba14ff2a244/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr60656.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c059a92eccd96d00ffd23801d032eba14ff2a244/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr60656.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr60656.c?ref=c059a92eccd96d00ffd23801d032eba14ff2a244", "patch": "@@ -43,4 +43,5 @@ int main()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_widen_mult_si_to_di_pattern } } } */\n+/* P * P * P requires a widening multiplication first as well as a longxlong->long after that.  */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_widen_mult_si_to_di_pattern && vect_long_mult } } } } */"}, {"sha": "539aaaf1490239cfafa86e9241956401ed6c61b3", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c059a92eccd96d00ffd23801d032eba14ff2a244/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c059a92eccd96d00ffd23801d032eba14ff2a244/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=c059a92eccd96d00ffd23801d032eba14ff2a244", "patch": "@@ -6299,6 +6299,30 @@ proc check_effective_target_vect_int_mult { } {\n     return $et_vect_int_mult_saved($et_index)\n }\n \n+# Return 1 if the target supports 64 bit hardware vector\n+# multiplication of long operands with a long result, 0 otherwise.\n+#\n+# This can change for different subtargets so do not cache the result.\n+\n+proc check_effective_target_vect_long_mult { } {\n+    if { [istarget i?86-*-*] || [istarget x86_64-*-*]\n+\t || (([istarget powerpc*-*-*]\n+              && ![istarget powerpc-*-linux*paired*])\n+              && [check_effective_target_ilp32])\n+\t || [is-effective-target arm_neon]\n+\t || ([istarget sparc*-*-*] && [check_effective_target_ilp32])\n+\t || [istarget aarch64*-*-*]\n+\t || ([istarget mips*-*-*]\n+\t      && [et-is-effective-target mips_msa]) } {\n+\tset answer 1\n+    } else {\n+\tset answer 0\n+    }\n+\n+    verbose \"check_effective_target_vect_long_mult: returning $answer\" 2\n+    return $answer\n+}\n+\n # Return 1 if the target supports vector even/odd elements extraction, 0 otherwise.\n \n proc check_effective_target_vect_extract_even_odd { } {"}]}