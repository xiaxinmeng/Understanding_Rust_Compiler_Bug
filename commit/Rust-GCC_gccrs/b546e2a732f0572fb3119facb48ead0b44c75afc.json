{"sha": "b546e2a732f0572fb3119facb48ead0b44c75afc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU0NmUyYTczMmYwNTcyZmIzMTE5ZmFjYjQ4ZWFkMGI0NGM3NWFmYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-24T13:08:31Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-24T13:08:31Z"}, "message": "[multiple changes]\n\n2013-04-24  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* fe.h (Machine_Overflows_On_Target): New macro and declaration.\n\t(Signed_Zeros_On_Target): Likewise.\n\n2013-04-24  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch6.adb: Add with and use clause for Sem_Prag.\n\t(Freeze_Subprogram): Analyze all delayed aspects for a null\n\tprocedure so that they are available when analyzing the\n\tinternally-generated _Postconditions routine.\n\t* exp_ch13.adb: Remove with and use clause for Sem_Prag.\n\t(Expand_N_Freeze_Entity): Move the code that analyzes delayed\n\taspects of null procedures to exp_ch6.Freeze_Subprogram.\n\t* sem_prag.adb (Analyze_Abstract_State): Update the check on\n\tvolatile requirements.\n\n2013-04-24  Bob Duff  <duff@adacore.com>\n\n\t* ali-util.ads (Source_Record): New component Stamp_File\n\tto record from whence the Stamp came.\n\t* ali-util.adb (Set_Source_Table): Set Stamp_File component.\n\t* bcheck.adb (Check_Consistency): Print additional information in\n\tVerbose_Mode.\n\t* gnatbind.adb (Gnatbind): Print additional information in\n\tVerbose_Mode.\n\nFrom-SVN: r198224", "tree": {"sha": "a3be080dfdcb9afdc5009eb2a2f98b02acae6330", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3be080dfdcb9afdc5009eb2a2f98b02acae6330"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b546e2a732f0572fb3119facb48ead0b44c75afc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b546e2a732f0572fb3119facb48ead0b44c75afc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b546e2a732f0572fb3119facb48ead0b44c75afc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b546e2a732f0572fb3119facb48ead0b44c75afc/comments", "author": null, "committer": null, "parents": [{"sha": "dba44dbef91efd698ead6dcce7b19a24a4522000", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dba44dbef91efd698ead6dcce7b19a24a4522000", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dba44dbef91efd698ead6dcce7b19a24a4522000"}], "stats": {"total": 269, "additions": 178, "deletions": 91}, "files": [{"sha": "b8f882d154287d13548cba273c0ec269063f02c5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b546e2a732f0572fb3119facb48ead0b44c75afc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b546e2a732f0572fb3119facb48ead0b44c75afc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b546e2a732f0572fb3119facb48ead0b44c75afc", "patch": "@@ -1,3 +1,30 @@\n+2013-04-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* fe.h (Machine_Overflows_On_Target): New macro and declaration.\n+\t(Signed_Zeros_On_Target): Likewise.\n+\n+2013-04-24  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch6.adb: Add with and use clause for Sem_Prag.\n+\t(Freeze_Subprogram): Analyze all delayed aspects for a null\n+\tprocedure so that they are available when analyzing the\n+\tinternally-generated _Postconditions routine.\n+\t* exp_ch13.adb: Remove with and use clause for Sem_Prag.\n+\t(Expand_N_Freeze_Entity): Move the code that analyzes delayed\n+\taspects of null procedures to exp_ch6.Freeze_Subprogram.\n+\t* sem_prag.adb (Analyze_Abstract_State): Update the check on\n+\tvolatile requirements.\n+\n+2013-04-24  Bob Duff  <duff@adacore.com>\n+\n+\t* ali-util.ads (Source_Record): New component Stamp_File\n+\tto record from whence the Stamp came.\n+\t* ali-util.adb (Set_Source_Table): Set Stamp_File component.\n+\t* bcheck.adb (Check_Consistency): Print additional information in\n+\tVerbose_Mode.\n+\t* gnatbind.adb (Gnatbind): Print additional information in\n+\tVerbose_Mode.\n+\n 2013-04-24  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch13.adb, sem_prag.adb: Update comments."}, {"sha": "514be3ce8de0e8d32521f42b981a2e91182ffe0f", "filename": "gcc/ada/ali-util.adb", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b546e2a732f0572fb3119facb48ead0b44c75afc/gcc%2Fada%2Fali-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b546e2a732f0572fb3119facb48ead0b44c75afc/gcc%2Fada%2Fali-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali-util.adb?ref=b546e2a732f0572fb3119facb48ead0b44c75afc", "patch": "@@ -35,6 +35,8 @@ with Snames;  use Snames;\n with Stringt;\n with Styleg;\n \n+with System.OS_Lib; use System.OS_Lib;\n+\n package body ALI.Util is\n \n    --  Empty procedures needed to instantiate Scng. Error procedures are\n@@ -359,6 +361,7 @@ package body ALI.Util is\n                   if Stamp (Stamp'First) /= ' ' then\n                      Source.Table (S).Stamp := Stamp;\n                      Source.Table (S).Source_Found := True;\n+                     Source.Table (S).Stamp_File := F;\n \n                   --  If we could not find the file, then the stamp is set\n                   --  from the dependency table entry (to be possibly reset\n@@ -367,6 +370,7 @@ package body ALI.Util is\n                   else\n                      Source.Table (S).Stamp := Sdep.Table (D).Stamp;\n                      Source.Table (S).Source_Found := False;\n+                     Source.Table (S).Stamp_File := ALIs.Table (A).Afile;\n \n                      --  In All_Sources mode, flag error of file not found\n \n@@ -380,8 +384,9 @@ package body ALI.Util is\n                --  is off, so simply initialize the stamp from the Sdep entry\n \n                else\n-                  Source.Table (S).Source_Found := False;\n                   Source.Table (S).Stamp := Sdep.Table (D).Stamp;\n+                  Source.Table (S).Source_Found := False;\n+                  Source.Table (S).Stamp_File := ALIs.Table (A).Afile;\n                end if;\n \n             --  Here if this is not the first time for this source file,\n@@ -407,13 +412,19 @@ package body ALI.Util is\n                   --  source file even if Check_Source_Files is false, since\n                   --  if we find it, then we can use it to resolve which of the\n                   --  two timestamps in the ALI files is likely to be correct.\n+                  --  We only look in the current directory, because when\n+                  --  Check_Source_Files is false, other search directories are\n+                  --  likely to be incorrect.\n \n-                  if not Check_Source_Files then\n+                  if not Check_Source_Files\n+                    and then Is_Regular_File (Get_Name_String (F))\n+                  then\n                      Stamp := Source_File_Stamp (F);\n \n                      if Stamp (Stamp'First) /= ' ' then\n                         Source.Table (S).Stamp := Stamp;\n                         Source.Table (S).Source_Found := True;\n+                        Source.Table (S).Stamp_File := F;\n                      end if;\n                   end if;\n \n@@ -432,6 +443,7 @@ package body ALI.Util is\n                   else\n                      if Sdep.Table (D).Stamp > Source.Table (S).Stamp then\n                         Source.Table (S).Stamp := Sdep.Table (D).Stamp;\n+                        Source.Table (S).Stamp_File := ALIs.Table (A).Afile;\n                      end if;\n                   end if;\n                end if;"}, {"sha": "251f3e7c5af00fc5af71d2803e4381e02b73d00b", "filename": "gcc/ada/ali-util.ads", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b546e2a732f0572fb3119facb48ead0b44c75afc/gcc%2Fada%2Fali-util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b546e2a732f0572fb3119facb48ead0b44c75afc/gcc%2Fada%2Fali-util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali-util.ads?ref=b546e2a732f0572fb3119facb48ead0b44c75afc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -57,6 +57,13 @@ package ALI.Util is\n       --  located and the Stamp value was set from the actual source file.\n       --  It is always false if Check_Source_Files is not set.\n \n+      Stamp_File : File_Name_Type;\n+      --  File that Stamp came from. If Source_Found is True, then Stamp is the\n+      --  timestamp of the source file, and this is the name of the source\n+      --  file. If Source_Found is False, then Stamp comes from a dependency\n+      --  line in an ALI file, this is the name of that ALI file. Used only in\n+      --  verbose mode, for messages.\n+\n       All_Timestamps_Match : Boolean;\n       --  This flag is set only if all files referencing this source file\n       --  have a matching time stamp, and also, if Source_Found is True,"}, {"sha": "fc2b9b620357fc6fac2ee0bc049f8b948c8ba33c", "filename": "gcc/ada/bcheck.adb", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b546e2a732f0572fb3119facb48ead0b44c75afc/gcc%2Fada%2Fbcheck.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b546e2a732f0572fb3119facb48ead0b44c75afc/gcc%2Fada%2Fbcheck.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbcheck.adb?ref=b546e2a732f0572fb3119facb48ead0b44c75afc", "patch": "@@ -218,16 +218,27 @@ package body Bcheck is\n                end if;\n \n                if (not Tolerate_Consistency_Errors) and Verbose_Mode then\n-                  Error_Msg_File_1 := Sdep.Table (D).Sfile;\n+                  Error_Msg_File_1 := Source.Table (Src).Stamp_File;\n+\n+                  if Source.Table (Src).Source_Found then\n+                     Error_Msg_File_1 :=\n+                       Osint.Full_Source_Name (Error_Msg_File_1);\n+                  else\n+                     Error_Msg_File_1 :=\n+                       Osint.Full_Lib_File_Name (Error_Msg_File_1);\n+                  end if;\n+\n                   Error_Msg\n-                    (\"{ time stamp \" & String (Source.Table (Src).Stamp));\n+                    (\"time stamp from { \" & String (Source.Table (Src).Stamp));\n \n                   Error_Msg_File_1 := Sdep.Table (D).Sfile;\n-                  --  Something wrong here, should be different file ???\n-\n                   Error_Msg\n                     (\" conflicts with { timestamp \" &\n                      String (Sdep.Table (D).Stamp));\n+\n+                  Error_Msg_File_1 :=\n+                    Osint.Full_Lib_File_Name (ALIs.Table (A).Afile);\n+                  Error_Msg (\" from {\");\n                end if;\n \n                --  Exit from the loop through Sdep entries once we find one"}, {"sha": "364401d634bba74829c621a3753168735522a53c", "filename": "gcc/ada/exp_ch13.adb", "status": "modified", "additions": 2, "deletions": 42, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b546e2a732f0572fb3119facb48ead0b44c75afc/gcc%2Fada%2Fexp_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b546e2a732f0572fb3119facb48ead0b44c75afc/gcc%2Fada%2Fexp_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch13.adb?ref=b546e2a732f0572fb3119facb48ead0b44c75afc", "patch": "@@ -43,7 +43,6 @@ with Sem_Aux;  use Sem_Aux;\n with Sem_Ch7;  use Sem_Ch7;\n with Sem_Ch8;  use Sem_Ch8;\n with Sem_Eval; use Sem_Eval;\n-with Sem_Prag; use Sem_Prag;\n with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n with Snames;   use Snames;\n@@ -553,48 +552,9 @@ package body Exp_Ch13 is\n                   Force_Validity_Checks := Save_Force;\n                end;\n \n-            else\n-               --  If the action is the generated body of a null subprogram,\n-               --  analyze the expressions in its delayed aspects, because we\n-               --  may not have reached the end of the declarative list when\n-               --  delayed aspects are normally analyzed. This ensures that\n-               --  dispatching calls are properly rewritten when the inner\n-               --  postcondition procedure is analyzed.\n-\n-               if Is_Subprogram (E)\n-                 and then Nkind (Parent (E)) = N_Procedure_Specification\n-                 and then Null_Present (Parent (E))\n-               then\n-                  declare\n-                     Prag : Node_Id;\n-\n-                  begin\n-                     --  Comment this loop ???\n-\n-                     Prag := Pre_Post_Conditions (Contract (E));\n-                     while Present (Prag) loop\n-                        Analyze_PPC_In_Decl_Part (Prag, E);\n-                        Prag := Next_Pragma (Prag);\n-                     end loop;\n-\n-                     --  Why don't we do the same for Contract_Test_Cases ???\n-\n-                     --  Comment this loop?\n-\n-                     Prag := Classifications (Contract (E));\n-                     while Present (Prag) loop\n-                        if Pragma_Name (Prag) = Name_Depends then\n-                           Analyze_Depends_In_Decl_Part (Prag);\n-                        else\n-                           pragma Assert (Pragma_Name (Prag) = Name_Global);\n-                           Analyze_Global_In_Decl_Part (Prag);\n-                        end if;\n-\n-                        Prag := Next_Pragma (Prag);\n-                     end loop;\n-                  end;\n-               end if;\n+            --  All other freezing actions\n \n+            else\n                Analyze (Decl, Suppress => All_Checks);\n             end if;\n "}, {"sha": "c06a22434dcaabee3cc16df86fc70a025d116c7d", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b546e2a732f0572fb3119facb48ead0b44c75afc/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b546e2a732f0572fb3119facb48ead0b44c75afc/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=b546e2a732f0572fb3119facb48ead0b44c75afc", "patch": "@@ -67,6 +67,7 @@ with Sem_Disp; use Sem_Disp;\n with Sem_Dist; use Sem_Dist;\n with Sem_Eval; use Sem_Eval;\n with Sem_Mech; use Sem_Mech;\n+with Sem_Prag; use Sem_Prag;\n with Sem_Res;  use Sem_Res;\n with Sem_SCIL; use Sem_SCIL;\n with Sem_Util; use Sem_Util;\n@@ -8293,6 +8294,42 @@ package body Exp_Ch6 is\n             Set_Returns_By_Ref (Subp);\n          end if;\n       end;\n+\n+      --  Wnen freezing a null procedure, analyze its delayed aspects now\n+      --  because we may not have reached the end of the declarative list when\n+      --  delayed aspects are normally analyzed. This ensures that dispatching\n+      --  calls are properly rewritten when the generated _Postcondition\n+      --  procedure is analyzed in the null procedure body.\n+\n+      if Nkind (Parent (Subp)) = N_Procedure_Specification\n+        and then Null_Present (Parent (Subp))\n+      then\n+         declare\n+            Prag : Node_Id;\n+\n+         begin\n+            --  Analyze all pre- and post-conditions\n+\n+            Prag := Pre_Post_Conditions (Contract (Subp));\n+            while Present (Prag) loop\n+               Analyze_PPC_In_Decl_Part (Prag, Subp);\n+               Prag := Next_Pragma (Prag);\n+            end loop;\n+\n+            --  Analyze classification aspects Depends and Global\n+\n+            Prag := Classifications (Contract (Subp));\n+            while Present (Prag) loop\n+               if Pragma_Name (Prag) = Name_Depends then\n+                  Analyze_Depends_In_Decl_Part (Prag);\n+               else\n+                  Analyze_Global_In_Decl_Part (Prag);\n+               end if;\n+\n+               Prag := Next_Pragma (Prag);\n+            end loop;\n+         end;\n+      end if;\n    end Freeze_Subprogram;\n \n    -----------------------"}, {"sha": "1c5aac42b14aaba65de493ef206dcf9ede2e9041", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b546e2a732f0572fb3119facb48ead0b44c75afc/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b546e2a732f0572fb3119facb48ead0b44c75afc/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=b546e2a732f0572fb3119facb48ead0b44c75afc", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2012, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2013, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -263,10 +263,14 @@ extern void Set_Has_No_Elaboration_Code\t(Node_Id, Boolean);\n /* targparm: */\n \n #define Backend_Overflow_Checks_On_Target targparm__backend_overflow_checks_on_target\n+#define Machine_Overflows_On_Target targparm__machine_overflows_on_target\n+#define Signed_Zeros_On_Target targparm__signed_zeros_on_target\n #define Stack_Check_Probes_On_Target targparm__stack_check_probes_on_target\n #define Stack_Check_Limits_On_Target targparm__stack_check_limits_on_target\n \n extern Boolean Backend_Overflow_Checks_On_Target;\n+extern Boolean Machine_Overflows_On_Target;\n+extern Boolean Signed_Zeros_On_Target;\n extern Boolean Stack_Check_Probes_On_Target;\n extern Boolean Stack_Check_Limits_On_Target;\n "}, {"sha": "30f6141976499ec9835863ddc1d7178aae03ddbe", "filename": "gcc/ada/gnatbind.adb", "status": "modified", "additions": 69, "deletions": 33, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b546e2a732f0572fb3119facb48ead0b44c75afc/gcc%2Fada%2Fgnatbind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b546e2a732f0572fb3119facb48ead0b44c75afc/gcc%2Fada%2Fgnatbind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatbind.adb?ref=b546e2a732f0572fb3119facb48ead0b44c75afc", "patch": "@@ -73,7 +73,6 @@ procedure Gnatbind is\n    --  Standard library\n \n    Text     : Text_Buffer_Ptr;\n-   Next_Arg : Positive;\n \n    Output_File_Name_Seen : Boolean := False;\n    Output_File_Name      : String_Ptr := new String'(\"\");\n@@ -104,6 +103,15 @@ procedure Gnatbind is\n    --  All the one character arguments are still handled by Switch. This\n    --  routine handles -aO -aI and -I-. The lower bound of Argv must be 1.\n \n+   generic\n+      with procedure Action (Argv : String);\n+   procedure Generic_Scan_Bind_Args;\n+   --  Iterate through the args calling Action on each one, taking care of\n+   --  response files.\n+\n+   procedure Write_Arg (S : String);\n+   --  Passed to Generic_Scan_Bind_Args to print args\n+\n    function Is_Cross_Compiler return Boolean;\n    --  Returns True iff this is a cross-compiler\n \n@@ -480,12 +488,64 @@ procedure Gnatbind is\n       end if;\n    end Scan_Bind_Arg;\n \n+   ----------------------------\n+   -- Generic_Scan_Bind_Args --\n+   ----------------------------\n+\n+   procedure Generic_Scan_Bind_Args is\n+      Next_Arg : Positive := 1;\n+   begin\n+      --  Use low level argument routines to avoid dragging in the secondary\n+      --  stack\n+\n+      while Next_Arg < Arg_Count loop\n+         declare\n+            Next_Argv : String (1 .. Len_Arg (Next_Arg));\n+         begin\n+            Fill_Arg (Next_Argv'Address, Next_Arg);\n+\n+            if Next_Argv'Length > 0 then\n+               if Next_Argv (1) = '@' then\n+                  if Next_Argv'Length > 1 then\n+                     declare\n+                        Arguments : constant Argument_List :=\n+                                      Response_File.Arguments_From\n+                                        (Response_File_Name        =>\n+                                           Next_Argv (2 .. Next_Argv'Last),\n+                                         Recursive                 => True,\n+                                         Ignore_Non_Existing_Files => True);\n+                     begin\n+                        for J in Arguments'Range loop\n+                           Action (Arguments (J).all);\n+                        end loop;\n+                     end;\n+                  end if;\n+\n+               else\n+                  Action (Next_Argv);\n+               end if;\n+            end if;\n+         end;\n+\n+         Next_Arg := Next_Arg + 1;\n+      end loop;\n+   end Generic_Scan_Bind_Args;\n+\n+   procedure Write_Arg (S : String) is\n+   begin\n+      Write_Str (\" \" & S);\n+   end Write_Arg;\n+\n+   procedure Scan_Bind_Args is new Generic_Scan_Bind_Args (Scan_Bind_Arg);\n+   procedure Put_Bind_Args is new Generic_Scan_Bind_Args (Write_Arg);\n+\n    procedure Check_Version_And_Help is\n      new Check_Version_And_Help_G (Bindusg.Display);\n \n --  Start of processing for Gnatbind\n \n begin\n+\n    --  Set default for Shared_Libgnat option\n \n    declare\n@@ -510,40 +570,16 @@ begin\n \n    Check_Version_And_Help (\"GNATBIND\", \"1995\");\n \n-   --  Use low level argument routines to avoid dragging in the secondary stack\n+   --  We need to Scan_Bind_Args first, to set Verbose_Mode, so we know whether\n+   --  to Put_Bind_Args.\n \n-   Next_Arg := 1;\n-   Scan_Args : while Next_Arg < Arg_Count loop\n-      declare\n-         Next_Argv : String (1 .. Len_Arg (Next_Arg));\n-      begin\n-         Fill_Arg (Next_Argv'Address, Next_Arg);\n-\n-         if Next_Argv'Length > 0 then\n-            if Next_Argv (1) = '@' then\n-               if Next_Argv'Length > 1 then\n-                  declare\n-                     Arguments : constant Argument_List :=\n-                                   Response_File.Arguments_From\n-                                     (Response_File_Name        =>\n-                                        Next_Argv (2 .. Next_Argv'Last),\n-                                      Recursive                 => True,\n-                                      Ignore_Non_Existing_Files => True);\n-                  begin\n-                     for J in Arguments'Range loop\n-                        Scan_Bind_Arg (Arguments (J).all);\n-                     end loop;\n-                  end;\n-               end if;\n+   Scan_Bind_Args;\n \n-            else\n-               Scan_Bind_Arg (Next_Argv);\n-            end if;\n-         end if;\n-      end;\n-\n-      Next_Arg := Next_Arg + 1;\n-   end loop Scan_Args;\n+   if Verbose_Mode then\n+      Write_Str (Command_Name);\n+      Put_Bind_Args;\n+      Write_Eol;\n+   end if;\n \n    if Use_Pragma_Linker_Constructor then\n       if Bind_Main_Program then"}, {"sha": "69b19c54bb06bcb3640879bc8e22a3d9593b9385", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b546e2a732f0572fb3119facb48ead0b44c75afc/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b546e2a732f0572fb3119facb48ead0b44c75afc/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=b546e2a732f0572fb3119facb48ead0b44c75afc", "patch": "@@ -8353,14 +8353,7 @@ package body Sem_Prag is\n \n                   --  Volatile requires exactly one Input or Output\n \n-                  --  Isn't this just Input_Seen = Output_Seen ???\n-\n-                  if Volatile_Seen\n-                    and then\n-                      ((Input_Seen and Output_Seen)           --  both\n-                         or else\n-                       (not Input_Seen and not Output_Seen))  --  none\n-                  then\n+                  if Volatile_Seen and then Input_Seen = Output_Seen then\n                      Error_Msg_N\n                        (\"property Volatile requires exactly one Input or \"\n                         & \"Output\", State);"}]}