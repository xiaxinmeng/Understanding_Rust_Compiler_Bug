{"sha": "f6f6a13c082f48718cfb19285569dde93889e74b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZmNmExM2MwODJmNDg3MThjZmIxOTI4NTU2OWRkZTkzODg5ZTc0Yg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-13T01:46:42Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-13T01:46:42Z"}, "message": "(enum processor_type): New enum.\n\n(alpha_cpu, alpha_cpu_string): New declarations.\n(target_options): Add \"cpu=\".\n(RTX_COSTS): Adjust values for EV5.\n\nFrom-SVN: r12279", "tree": {"sha": "d6ea7d69533bed3af6fbeb4dc3bed381cb2ef22d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6ea7d69533bed3af6fbeb4dc3bed381cb2ef22d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6f6a13c082f48718cfb19285569dde93889e74b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6f6a13c082f48718cfb19285569dde93889e74b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6f6a13c082f48718cfb19285569dde93889e74b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6f6a13c082f48718cfb19285569dde93889e74b/comments", "author": null, "committer": null, "parents": [{"sha": "da792a6816d789da1d267d5e594fdc9c20db52a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da792a6816d789da1d267d5e594fdc9c20db52a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da792a6816d789da1d267d5e594fdc9c20db52a6"}], "stats": {"total": 99, "additions": 81, "deletions": 18}, "files": [{"sha": "1d538764ea38960609aaceb241608dd29e07a2fa", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 81, "deletions": 18, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f6a13c082f48718cfb19285569dde93889e74b/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f6a13c082f48718cfb19285569dde93889e74b/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=f6f6a13c082f48718cfb19285569dde93889e74b", "patch": "@@ -75,6 +75,15 @@ Boston, MA 02111-1307, USA.  */\n \n /* Run-time compilation parameters selecting different hardware subsets.  */\n \n+/* Which processor to schedule for. The cpu attribute defines a list that\n+   mirrors this list, so changes to alpha.md must be made at the same time.  */\n+\n+enum processor_type\n+ {PROCESSOR_EV4,\t\t\t/* 2106[46]{a,} */\n+  PROCESSOR_EV5};\t\t\t/* 21164{a,} */\n+\n+extern enum processor_type alpha_cpu;\n+\n enum alpha_trap_precision\n {\n   ALPHA_TP_PROG,\t/* No precision (default).  */\n@@ -182,12 +191,14 @@ extern enum alpha_fp_trap_mode alpha_fptm;\n \textern char *m88k_short_data;\n \t#define TARGET_OPTIONS { { \"short-data-\", &m88k_short_data } }  */\n \n+extern char *alpha_cpu_string;  /* For -mcpu=ev[4|5] */\n extern char *alpha_fprm_string;\t/* For -mfp-rounding-mode=[n|m|c|d] */\n extern char *alpha_fptm_string;\t/* For -mfp-trap-mode=[n|u|su|sui]  */\n extern char *alpha_tp_string;\t/* For -mtrap-precision=[p|f|i] */\n \n #define TARGET_OPTIONS\t\t\t\t\\\n {\t\t\t\t\t\t\\\n+  {\"cpu=\",\t\t&alpha_cpu_string},\t\\\n   {\"fp-rounding-mode=\",\t&alpha_fprm_string},\t\\\n   {\"fp-trap-mode=\",\t&alpha_fptm_string},\t\\\n   {\"trap-precision=\",\t&alpha_tp_string},\t\\\n@@ -1540,47 +1551,99 @@ extern void final_prescan_insn ();\n   case CONST:\t\t\t\t\t\t\t\\\n   case SYMBOL_REF:\t\t\t\t\t\t\\\n   case LABEL_REF:\t\t\t\t\t\t\\\n-    return COSTS_N_INSNS (3);\n+  switch (alpha_cpu)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+    case PROCESSOR_EV4:\t\t\t\t\t\t\\\n+      return COSTS_N_INSNS (3);\t\t\t\t\t\\\n+    case PROCESSOR_EV5:\t\t\t\t\t\t\\\n+      return COSTS_N_INSNS (2);\t\t\t\t\t\\\n+    }\n     \n /* Provide the costs of a rtl expression.  This is in the body of a\n    switch on CODE.  */\n    \n #define RTX_COSTS(X,CODE,OUTER_CODE)\t\t\t\\\n   case PLUS:  case MINUS:\t\t\t\t\\\n     if (FLOAT_MODE_P (GET_MODE (X)))\t\t\t\\\n-      return COSTS_N_INSNS (6);\t\t\t\t\\\n+      switch (alpha_cpu)\t\t\t\t\\\n+        {\t\t\t\t\t\t\\\n+        case PROCESSOR_EV4:\t\t\t\t\\\n+          return COSTS_N_INSNS (6);\t\t\t\\\n+        case PROCESSOR_EV5:\t\t\t\t\\\n+          return COSTS_N_INSNS (4); \t\t\t\\\n+\t}\t\t\t\t\t\t\\\n     else if (GET_CODE (XEXP (X, 0)) == MULT\t\t\\\n \t     && const48_operand (XEXP (XEXP (X, 0), 1), VOIDmode)) \\\n       return (2 + rtx_cost (XEXP (XEXP (X, 0), 0), OUTER_CODE)\t\\\n \t      + rtx_cost (XEXP (X, 1), OUTER_CODE));\t\\\n     break;\t\t\t\t\t\t\\\n   case MULT:\t\t\t\t\t\t\\\n-    if (FLOAT_MODE_P (GET_MODE (X)))\t\t\t\\\n-      return COSTS_N_INSNS (6);\t\t\t\t\\\n-    return COSTS_N_INSNS (23);\t\t\t\t\\\n+    switch (alpha_cpu)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+      case PROCESSOR_EV4:\t\t\t\t\\\n+        if (FLOAT_MODE_P (GET_MODE (X)))\t\t\\\n+          return COSTS_N_INSNS (6);\t\t\t\\\n+        return COSTS_N_INSNS (23);\t\t\t\\\n+      case PROCESSOR_EV5:\t\t\t\t\\\n+        if (FLOAT_MODE_P (GET_MODE (X)))\t\t\\\n+          return COSTS_N_INSNS (4);\t\t\t\\\n+        else if (GET_MODE (X) == DImode)\t\t\\\n+          return COSTS_N_INSNS (12);\t\t\t\\\n+        else\t\t\t\t\t\t\\\n+          return COSTS_N_INSNS (8);\t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n   case ASHIFT:\t\t\t\t\t\t\\\n     if (GET_CODE (XEXP (X, 1)) == CONST_INT\t\t\\\n \t&& INTVAL (XEXP (X, 1)) <= 3)\t\t\t\\\n       break;\t\t\t\t\t\t\\\n     /* ... fall through ... */\t\t\t\t\\\n   case ASHIFTRT:  case LSHIFTRT:  case IF_THEN_ELSE:\t\\\n-    return COSTS_N_INSNS (2);\t\t\t\t\\\n+    switch (alpha_cpu)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+      case PROCESSOR_EV4:\t\t\t\t\\\n+        return COSTS_N_INSNS (2);\t\t\t\\\n+      case PROCESSOR_EV5:\t\t\t\t\\\n+        return COSTS_N_INSNS (1); \t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n   case DIV:  case UDIV:  case MOD:  case UMOD:\t\t\\\n-    if (GET_MODE (X) == SFmode)\t\t\t\t\\\n-      return COSTS_N_INSNS (34);\t\t\t\\\n-    else if (GET_MODE (X) == DFmode)\t\t\t\\\n-      return COSTS_N_INSNS (63);\t\t\t\\\n-    else\t\t\t\t\t\t\\\n-      return COSTS_N_INSNS (70);\t\t\t\\\n+    switch (alpha_cpu)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+      case PROCESSOR_EV4:\t\t\t\t\\\n+        if (GET_MODE (X) == SFmode)\t\t\t\\\n+          return COSTS_N_INSNS (34);\t\t\t\\\n+        else if (GET_MODE (X) == DFmode)\t\t\\\n+          return COSTS_N_INSNS (63);\t\t\t\\\n+        else\t\t\t\t\t\t\\\n+          return COSTS_N_INSNS (70);\t\t\t\\\n+      case PROCESSOR_EV5:\t\t\t\t\\\n+        if (GET_MODE (X) == SFmode)\t\t\t\\\n+          return COSTS_N_INSNS (15);\t\t\t\\\n+        else if (GET_MODE (X) == DFmode)\t\t\\\n+          return COSTS_N_INSNS (22);\t\t\t\\\n+        else\t\t\t\t\t\t\\\n+          return COSTS_N_INSNS (70);\t/* EV5 ??? */\t\\\n+      }\t\t\t\t\t\t\t\\\n   case MEM:\t\t\t\t\t\t\\\n-    return COSTS_N_INSNS (3);\t\t\t\t\\\n+    switch (alpha_cpu)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+      case PROCESSOR_EV4:\t\t\t\t\\\n+        return COSTS_N_INSNS (3);\t\t\t\\\n+      case PROCESSOR_EV5:\t\t\t\t\\\n+        return COSTS_N_INSNS (2); \t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+  case NEG:  case ABS:\t\t\t\t\t\\\n+    if (! FLOAT_MODE_P (GET_MODE (X)))\t\t\t\\\n+      break;\t\t\t\t\t\t\\\n+    /* ... fall through ... */\t\t\t\t\\\n   case FLOAT:  case UNSIGNED_FLOAT:  case FIX:  case UNSIGNED_FIX: \\\n   case FLOAT_EXTEND:  case FLOAT_TRUNCATE:\t\t\\\n-    return COSTS_N_INSNS (6);\t\t\t\t\\\n-  case NEG:  case ABS:\t\t\t\t\t\\\n-    if (FLOAT_MODE_P (GET_MODE (X)))\t\t\t\\\n-      return COSTS_N_INSNS (6);\t\t\t\t\\\n-    break;\n+    switch (alpha_cpu)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+      case PROCESSOR_EV4:\t\t\t\t\\\n+        return COSTS_N_INSNS (6);\t\t\t\\\n+      case PROCESSOR_EV5:\t\t\t\t\\\n+        return COSTS_N_INSNS (4); \t\t\t\\\n+      }\n \f\n /* Control the assembler format that we output.  */\n "}]}