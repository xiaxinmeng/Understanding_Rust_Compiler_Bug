{"sha": "a49565158271693fa8f994ba9b35f00b9ee25028", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ5NTY1MTU4MjcxNjkzZmE4Zjk5NGJhOWIzNWYwMGI5ZWUyNTAyOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-19T16:27:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-19T16:27:18Z"}, "message": "[multiple changes]\n\n2012-03-19  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch4.adb (Analyze_Allocator): Detect an allocator generated\n\tby the build-in-place machinery where the designated type is\n\tindefinite, but the underlying type is not. Do not emit errors\n\trelated to missing initialization in this case.\n\n2012-03-19  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_ugn.texi: Add documentation for -gnateinnn switch.\n\t* sem_elab.adb, put_alfa.adb, lib-xref-alfa.adb: Minor reformatting.\n\t* sem_prag.adb: Minor comment update.\n\nFrom-SVN: r185525", "tree": {"sha": "a928f3a0c12dc473d86f6fa4b138d002407c7f64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a928f3a0c12dc473d86f6fa4b138d002407c7f64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a49565158271693fa8f994ba9b35f00b9ee25028", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a49565158271693fa8f994ba9b35f00b9ee25028", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a49565158271693fa8f994ba9b35f00b9ee25028", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a49565158271693fa8f994ba9b35f00b9ee25028/comments", "author": null, "committer": null, "parents": [{"sha": "04398fa84e070560d18d59ffe898bd46e8ddbeb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04398fa84e070560d18d59ffe898bd46e8ddbeb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04398fa84e070560d18d59ffe898bd46e8ddbeb7"}], "stats": {"total": 46, "additions": 38, "deletions": 8}, "files": [{"sha": "956ff44e759de9dc17a9567ec47f5b08b1b85757", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49565158271693fa8f994ba9b35f00b9ee25028/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49565158271693fa8f994ba9b35f00b9ee25028/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a49565158271693fa8f994ba9b35f00b9ee25028", "patch": "@@ -1,3 +1,16 @@\n+2012-03-19  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Allocator): Detect an allocator generated\n+\tby the build-in-place machinery where the designated type is\n+\tindefinite, but the underlying type is not. Do not emit errors\n+\trelated to missing initialization in this case.\n+\n+2012-03-19  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_ugn.texi: Add documentation for -gnateinnn switch.\n+\t* sem_elab.adb, put_alfa.adb, lib-xref-alfa.adb: Minor reformatting.\n+\t* sem_prag.adb: Minor comment update.\n+\n 2012-03-15  Robert Dewar  <dewar@adacore.com>\n \n \t* errout.ads: Add entry for translating -gnateinn to"}, {"sha": "b8539f03d4746b2e2dd6cdc2abbc58735a2407af", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49565158271693fa8f994ba9b35f00b9ee25028/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49565158271693fa8f994ba9b35f00b9ee25028/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=a49565158271693fa8f994ba9b35f00b9ee25028", "patch": "@@ -4155,6 +4155,12 @@ Display full source path name in brief error messages.\n @cindex @option{-gnateG} (@command{gcc})\n Save result of preprocessing in a text file.\n \n+@item ^-gnatei^/MAX_INSTANTIATIONS=^@var{nnn}\n+@cindex @option{-gnatei} (@command{gcc})\n+Set maximum number of instantiations during compilation of a single unit to\n+@var{nnn}. This may be useful in increasing the default maximum of 8000 for\n+the rare case when a single unit legitimately exceeds this limit.\n+\n @item ^-gnateI^/MULTI_UNIT_INDEX=^@var{nnn}\n @cindex @option{-gnateI} (@command{gcc})\n Indicates that the source is a multi-unit source and that the index of the"}, {"sha": "4961fedc8c11d03b46bc8dc28a29a20d38830d7f", "filename": "gcc/ada/lib-xref-alfa.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49565158271693fa8f994ba9b35f00b9ee25028/gcc%2Fada%2Flib-xref-alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49565158271693fa8f994ba9b35f00b9ee25028/gcc%2Fada%2Flib-xref-alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-alfa.adb?ref=a49565158271693fa8f994ba9b35f00b9ee25028", "patch": "@@ -211,10 +211,10 @@ package body Alfa is\n \n    procedure Add_Alfa_File (U : Unit_Number_Type; D : Nat) is\n       From : Scope_Index;\n+      S    : constant Source_File_Index := Source_Index (U);\n \n-      S : constant Source_File_Index := Source_Index (U);\n-\n-      File_Name, Unit_File_Name : String_Ptr;\n+      File_Name      : String_Ptr;\n+      Unit_File_Name : String_Ptr;\n \n    begin\n       --  Source file could be inexistant as a result of an error, if option"}, {"sha": "f4715bfdd84ec168affa36f035f5f8f27095fc52", "filename": "gcc/ada/put_alfa.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49565158271693fa8f994ba9b35f00b9ee25028/gcc%2Fada%2Fput_alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49565158271693fa8f994ba9b35f00b9ee25028/gcc%2Fada%2Fput_alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fput_alfa.adb?ref=a49565158271693fa8f994ba9b35f00b9ee25028", "patch": "@@ -56,6 +56,7 @@ begin\n             Write_Info_Char ('-');\n             Write_Info_Char ('>');\n             Write_Info_Char (' ');\n+\n             for N in F.Unit_File_Name'Range loop\n                Write_Info_Char (F.Unit_File_Name (N));\n             end loop;"}, {"sha": "d56da36f3fa2a89eb12465aa92d705a20e47e9a8", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49565158271693fa8f994ba9b35f00b9ee25028/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49565158271693fa8f994ba9b35f00b9ee25028/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=a49565158271693fa8f994ba9b35f00b9ee25028", "patch": "@@ -661,9 +661,22 @@ package body Sem_Ch4 is\n             if Is_Indefinite_Subtype (Type_Id)\n               and then Serious_Errors_Detected = Sav_Errs\n             then\n-               if Is_Class_Wide_Type (Type_Id) then\n+               --  The build-in-place machinery may produce an allocator when\n+               --  the designated type is indefinite but the underlying type is\n+               --  not. In this case the unknown discriminants are meaningless\n+               --  and should not trigger error messages. Check the parent node\n+               --  because the allocator is marked as coming from source.\n+\n+               if Present (Underlying_Type (Type_Id))\n+                 and then not Is_Indefinite_Subtype (Underlying_Type (Type_Id))\n+                 and then not Comes_From_Source (Parent (N))\n+               then\n+                  null;\n+\n+               elsif Is_Class_Wide_Type (Type_Id) then\n                   Error_Msg_N\n                     (\"initialization required in class-wide allocation\", N);\n+\n                else\n                   if Ada_Version < Ada_2005\n                     and then Is_Limited_Type (Type_Id)"}, {"sha": "4f28e1eb1d78c8b285eca1646a7c442805c36724", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49565158271693fa8f994ba9b35f00b9ee25028/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49565158271693fa8f994ba9b35f00b9ee25028/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=a49565158271693fa8f994ba9b35f00b9ee25028", "patch": "@@ -2620,13 +2620,10 @@ package body Sem_Elab is\n \n       if No (Nam) then\n          return Empty;\n-\n       elsif Nkind (Nam) = N_Selected_Component then\n          return Entity (Selector_Name (Nam));\n-\n       elsif not Is_Entity_Name (Nam) then\n          return Empty;\n-\n       else\n          return Entity (Nam);\n       end if;"}, {"sha": "1cd35904a20d4e5e1175897b49eb7a99246fb0ef", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49565158271693fa8f994ba9b35f00b9ee25028/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49565158271693fa8f994ba9b35f00b9ee25028/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=a49565158271693fa8f994ba9b35f00b9ee25028", "patch": "@@ -3704,7 +3704,7 @@ package body Sem_Prag is\n          Check_At_Most_N_Arguments (1);\n \n          --  Modeled internally as\n-         --    pragma Unsuppress (Atomic_Synchronization [,Entity])\n+         --    pragma Suppress/Unsuppress (Atomic_Synchronization [,Entity])\n \n          Rewrite (N,\n            Make_Pragma (Loc,"}]}