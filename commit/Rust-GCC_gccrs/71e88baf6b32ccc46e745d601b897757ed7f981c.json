{"sha": "71e88baf6b32ccc46e745d601b897757ed7f981c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFlODhiYWY2YjMyY2NjNDZlNzQ1ZDYwMWI4OTc3NTdlZDdmOTgxYw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-22T00:27:43Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-22T00:27:43Z"}, "message": "combine-stack-adj.c: Use rtx_insn\n\ngcc/\n2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n\n\t* combine-stack-adj.c (struct csa_reflist): Strengthen field\n\t\"insn\" from rtx to rtx_insn *.\n\t(single_set_for_csa): Likewise for param \"insn\".\n\t(record_one_stack_ref): Likewise.\n\t(try_apply_stack_adjustment): Likewise.\n\t(struct record_stack_refs_data): Likewise for field \"insn\".\n\t(maybe_move_args_size_note): Likewise for params \"last\" and \"insn\".\n\t(prev_active_insn_bb): Likewise for return type and param \"insn\".\n\t(next_active_insn_bb): Likewise.\n\t(force_move_args_size_note): Likewise for params \"prev\" and \"last\"\n\tand locals \"test\", \"next_candidate\", \"prev_candidate\".\n\t(combine_stack_adjustments_for_block): Strengthen locals\n\t\"last_sp_set\", \"last2_sp_set\", \"insn\", \"next\" from rtx to\n\trtx_insn *.\n\nFrom-SVN: r214301", "tree": {"sha": "c7fcbe4c0a59b1ff415601a8e2460747c4248508", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7fcbe4c0a59b1ff415601a8e2460747c4248508"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71e88baf6b32ccc46e745d601b897757ed7f981c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71e88baf6b32ccc46e745d601b897757ed7f981c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71e88baf6b32ccc46e745d601b897757ed7f981c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71e88baf6b32ccc46e745d601b897757ed7f981c/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f66ac4c9dd550bc8c08007918bc04caa1b0b5cbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f66ac4c9dd550bc8c08007918bc04caa1b0b5cbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f66ac4c9dd550bc8c08007918bc04caa1b0b5cbc"}], "stats": {"total": 66, "additions": 43, "deletions": 23}, "files": [{"sha": "fe7e656ef136761686222afbc5489726d0594732", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71e88baf6b32ccc46e745d601b897757ed7f981c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71e88baf6b32ccc46e745d601b897757ed7f981c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71e88baf6b32ccc46e745d601b897757ed7f981c", "patch": "@@ -1,3 +1,20 @@\n+2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* combine-stack-adj.c (struct csa_reflist): Strengthen field\n+\t\"insn\" from rtx to rtx_insn *.\n+\t(single_set_for_csa): Likewise for param \"insn\".\n+\t(record_one_stack_ref): Likewise.\n+\t(try_apply_stack_adjustment): Likewise.\n+\t(struct record_stack_refs_data): Likewise for field \"insn\".\n+\t(maybe_move_args_size_note): Likewise for params \"last\" and \"insn\".\n+\t(prev_active_insn_bb): Likewise for return type and param \"insn\".\n+\t(next_active_insn_bb): Likewise.\n+\t(force_move_args_size_note): Likewise for params \"prev\" and \"last\"\n+\tand locals \"test\", \"next_candidate\", \"prev_candidate\".\n+\t(combine_stack_adjustments_for_block): Strengthen locals\n+\t\"last_sp_set\", \"last2_sp_set\", \"insn\", \"next\" from rtx to\n+\trtx_insn *.\n+\n 2014-08-21  David Malcolm  <dmalcolm@redhat.com>\n \n \t* combine.c (i2mod): Strengthen this variable from rtx to rtx_insn *."}, {"sha": "25039b98c6b30e668ae8d44ca1bfa1c1ee3770aa", "filename": "gcc/combine-stack-adj.c", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71e88baf6b32ccc46e745d601b897757ed7f981c/gcc%2Fcombine-stack-adj.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71e88baf6b32ccc46e745d601b897757ed7f981c/gcc%2Fcombine-stack-adj.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine-stack-adj.c?ref=71e88baf6b32ccc46e745d601b897757ed7f981c", "patch": "@@ -73,16 +73,17 @@ along with GCC; see the file COPYING3.  If not see\n struct csa_reflist\n {\n   HOST_WIDE_INT sp_offset;\n-  rtx insn, *ref;\n+  rtx_insn *insn;\n+  rtx *ref;\n   struct csa_reflist *next;\n };\n \n static int stack_memref_p (rtx);\n-static rtx single_set_for_csa (rtx);\n+static rtx single_set_for_csa (rtx_insn *);\n static void free_csa_reflist (struct csa_reflist *);\n-static struct csa_reflist *record_one_stack_ref (rtx, rtx *,\n+static struct csa_reflist *record_one_stack_ref (rtx_insn *, rtx *,\n \t\t\t\t\t\t struct csa_reflist *);\n-static int try_apply_stack_adjustment (rtx, struct csa_reflist *,\n+static int try_apply_stack_adjustment (rtx_insn *, struct csa_reflist *,\n \t\t\t\t       HOST_WIDE_INT, HOST_WIDE_INT);\n static void combine_stack_adjustments_for_block (basic_block);\n static int record_stack_refs (rtx *, void *);\n@@ -122,7 +123,7 @@ stack_memref_p (rtx x)\n    tying fp and sp adjustments.  */\n \n static rtx\n-single_set_for_csa (rtx insn)\n+single_set_for_csa (rtx_insn *insn)\n {\n   int i;\n   rtx tmp = single_set (insn);\n@@ -171,7 +172,7 @@ free_csa_reflist (struct csa_reflist *reflist)\n    predicate stack_memref_p or a REG representing the stack pointer.  */\n \n static struct csa_reflist *\n-record_one_stack_ref (rtx insn, rtx *ref, struct csa_reflist *next_reflist)\n+record_one_stack_ref (rtx_insn *insn, rtx *ref, struct csa_reflist *next_reflist)\n {\n   struct csa_reflist *ml;\n \n@@ -194,7 +195,7 @@ record_one_stack_ref (rtx insn, rtx *ref, struct csa_reflist *next_reflist)\n    on success.  */\n \n static int\n-try_apply_stack_adjustment (rtx insn, struct csa_reflist *reflist,\n+try_apply_stack_adjustment (rtx_insn *insn, struct csa_reflist *reflist,\n \t\t\t    HOST_WIDE_INT new_adjust, HOST_WIDE_INT delta)\n {\n   struct csa_reflist *ml;\n@@ -240,7 +241,7 @@ try_apply_stack_adjustment (rtx insn, struct csa_reflist *reflist,\n    references in the insn and discard all other stack pointer references.  */\n struct record_stack_refs_data\n {\n-  rtx insn;\n+  rtx_insn *insn;\n   struct csa_reflist *reflist;\n };\n \n@@ -297,7 +298,7 @@ record_stack_refs (rtx *xp, void *data)\n    AFTER is true iff LAST follows INSN in the instruction stream.  */\n \n static void\n-maybe_move_args_size_note (rtx last, rtx insn, bool after)\n+maybe_move_args_size_note (rtx_insn *last, rtx_insn *insn, bool after)\n {\n   rtx note, last_note;\n \n@@ -319,35 +320,36 @@ maybe_move_args_size_note (rtx last, rtx insn, bool after)\n \n /* Return the next (or previous) active insn within BB.  */\n \n-static rtx\n-prev_active_insn_bb (basic_block bb, rtx insn)\n+static rtx_insn *\n+prev_active_insn_bb (basic_block bb, rtx_insn *insn)\n {\n   for (insn = PREV_INSN (insn);\n        insn != PREV_INSN (BB_HEAD (bb));\n        insn = PREV_INSN (insn))\n     if (active_insn_p (insn))\n       return insn;\n-  return NULL_RTX;\n+  return NULL;\n }\n \n-static rtx\n-next_active_insn_bb (basic_block bb, rtx insn)\n+static rtx_insn *\n+next_active_insn_bb (basic_block bb, rtx_insn *insn)\n {\n   for (insn = NEXT_INSN (insn);\n        insn != NEXT_INSN (BB_END (bb));\n        insn = NEXT_INSN (insn))\n     if (active_insn_p (insn))\n       return insn;\n-  return NULL_RTX;\n+  return NULL;\n }\n \n /* If INSN has a REG_ARGS_SIZE note, if possible move it to PREV.  Otherwise\n    search for a nearby candidate within BB where we can stick the note.  */\n \n static void\n-force_move_args_size_note (basic_block bb, rtx prev, rtx insn)\n+force_move_args_size_note (basic_block bb, rtx_insn *prev, rtx_insn *insn)\n {\n-  rtx note, test, next_candidate, prev_candidate;\n+  rtx note;\n+  rtx_insn *test, *next_candidate, *prev_candidate;\n \n   /* If PREV exists, tail-call to the logic in the other function.  */\n   if (prev)\n@@ -425,10 +427,11 @@ static void\n combine_stack_adjustments_for_block (basic_block bb)\n {\n   HOST_WIDE_INT last_sp_adjust = 0;\n-  rtx last_sp_set = NULL_RTX;\n-  rtx last2_sp_set = NULL_RTX;\n+  rtx_insn *last_sp_set = NULL;\n+  rtx_insn *last2_sp_set = NULL;\n   struct csa_reflist *reflist = NULL;\n-  rtx insn, next, set;\n+  rtx_insn *insn, *next;\n+  rtx set;\n   struct record_stack_refs_data data;\n   bool end_of_block = false;\n \n@@ -574,7 +577,7 @@ combine_stack_adjustments_for_block (basic_block bb)\n \t      delete_insn (last_sp_set);\n \t      free_csa_reflist (reflist);\n \t      reflist = NULL;\n-\t      last_sp_set = NULL_RTX;\n+\t      last_sp_set = NULL;\n \t      last_sp_adjust = 0;\n \t      continue;\n \t    }\n@@ -603,8 +606,8 @@ combine_stack_adjustments_for_block (basic_block bb)\n \t    }\n \t  free_csa_reflist (reflist);\n \t  reflist = NULL;\n-\t  last2_sp_set = NULL_RTX;\n-\t  last_sp_set = NULL_RTX;\n+\t  last2_sp_set = NULL;\n+\t  last_sp_set = NULL;\n \t  last_sp_adjust = 0;\n \t}\n     }"}]}