{"sha": "280deda6f3c15c60ee5d33a717a826645284abf1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgwZGVkYTZmM2MxNWM2MGVlNWQzM2E3MTdhODI2NjQ1Mjg0YWJmMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-09-13T17:21:40Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-09-13T17:21:40Z"}, "message": "Fix inherited hidden methods that return hidden types.\n\nFrom-SVN: r178818", "tree": {"sha": "d0f34b93af34f4568ebd1cc7e696bdb5d380cb07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0f34b93af34f4568ebd1cc7e696bdb5d380cb07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/280deda6f3c15c60ee5d33a717a826645284abf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/280deda6f3c15c60ee5d33a717a826645284abf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/280deda6f3c15c60ee5d33a717a826645284abf1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/280deda6f3c15c60ee5d33a717a826645284abf1/comments", "author": null, "committer": null, "parents": [{"sha": "bd1aa4f4af8e71e13acbda112860cdd2045817ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd1aa4f4af8e71e13acbda112860cdd2045817ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd1aa4f4af8e71e13acbda112860cdd2045817ee"}], "stats": {"total": 107, "additions": 94, "deletions": 13}, "files": [{"sha": "bb43dcdee430208f4bc20305539f05188e58df1d", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 65, "deletions": 9, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/280deda6f3c15c60ee5d33a717a826645284abf1/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/280deda6f3c15c60ee5d33a717a826645284abf1/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=280deda6f3c15c60ee5d33a717a826645284abf1", "patch": "@@ -402,7 +402,13 @@ Temporary_statement::do_check_types(Gogo*)\n   if (this->type_ != NULL && this->init_ != NULL)\n     {\n       std::string reason;\n-      if (!Type::are_assignable(this->type_, this->init_->type(), &reason))\n+      bool ok;\n+      if (this->are_hidden_fields_ok_)\n+\tok = Type::are_assignable_hidden_ok(this->type_, this->init_->type(),\n+\t\t\t\t\t    &reason);\n+      else\n+\tok = Type::are_assignable(this->type_, this->init_->type(), &reason);\n+      if (!ok)\n \t{\n \t  if (reason.empty())\n \t    error_at(this->location(), \"incompatible types in assignment\");\n@@ -504,9 +510,15 @@ class Assignment_statement : public Statement\n   Assignment_statement(Expression* lhs, Expression* rhs,\n \t\t       source_location location)\n     : Statement(STATEMENT_ASSIGNMENT, location),\n-      lhs_(lhs), rhs_(rhs)\n+      lhs_(lhs), rhs_(rhs), are_hidden_fields_ok_(false)\n   { }\n \n+  // Note that it is OK for this assignment statement to set hidden\n+  // fields.\n+  void\n+  set_hidden_fields_are_ok()\n+  { this->are_hidden_fields_ok_ = true; }\n+\n  protected:\n   int\n   do_traverse(Traverse* traverse);\n@@ -531,6 +543,9 @@ class Assignment_statement : public Statement\n   Expression* lhs_;\n   // Right hand side--the rvalue.\n   Expression* rhs_;\n+  // True if this statement may set hidden fields in the assignment\n+  // statement.  This is used for generated method stubs.\n+  bool are_hidden_fields_ok_;\n };\n \n // Traversal.\n@@ -579,7 +594,12 @@ Assignment_statement::do_check_types(Gogo*)\n   Type* lhs_type = this->lhs_->type();\n   Type* rhs_type = this->rhs_->type();\n   std::string reason;\n-  if (!Type::are_assignable(lhs_type, rhs_type, &reason))\n+  bool ok;\n+  if (this->are_hidden_fields_ok_)\n+    ok = Type::are_assignable_hidden_ok(lhs_type, rhs_type, &reason);\n+  else\n+    ok = Type::are_assignable(lhs_type, rhs_type, &reason);\n+  if (!ok)\n     {\n       if (reason.empty())\n \terror_at(this->location(), \"incompatible types in assignment\");\n@@ -820,9 +840,15 @@ class Tuple_assignment_statement : public Statement\n   Tuple_assignment_statement(Expression_list* lhs, Expression_list* rhs,\n \t\t\t     source_location location)\n     : Statement(STATEMENT_TUPLE_ASSIGNMENT, location),\n-      lhs_(lhs), rhs_(rhs)\n+      lhs_(lhs), rhs_(rhs), are_hidden_fields_ok_(false)\n   { }\n \n+  // Note that it is OK for this assignment statement to set hidden\n+  // fields.\n+  void\n+  set_hidden_fields_are_ok()\n+  { this->are_hidden_fields_ok_ = true; }\n+\n  protected:\n   int\n   do_traverse(Traverse* traverse);\n@@ -846,6 +872,9 @@ class Tuple_assignment_statement : public Statement\n   Expression_list* lhs_;\n   // Right hand side--a list of rvalues.\n   Expression_list* rhs_;\n+  // True if this statement may set hidden fields in the assignment\n+  // statement.  This is used for generated method stubs.\n+  bool are_hidden_fields_ok_;\n };\n \n // Traversal.\n@@ -901,6 +930,8 @@ Tuple_assignment_statement::do_lower(Gogo*, Named_object*, Block* enclosing,\n \n       Temporary_statement* temp = Statement::make_temporary((*plhs)->type(),\n \t\t\t\t\t\t\t    *prhs, loc);\n+      if (this->are_hidden_fields_ok_)\n+\ttemp->set_hidden_fields_are_ok();\n       b->add_statement(temp);\n       temps.push_back(temp);\n \n@@ -924,6 +955,11 @@ Tuple_assignment_statement::do_lower(Gogo*, Named_object*, Block* enclosing,\n \n       Expression* ref = Expression::make_temporary_reference(*ptemp, loc);\n       Statement* s = Statement::make_assignment(*plhs, ref, loc);\n+      if (this->are_hidden_fields_ok_)\n+\t{\n+\t  Assignment_statement* as = static_cast<Assignment_statement*>(s);\n+\t  as->set_hidden_fields_are_ok();\n+\t}\n       b->add_statement(s);\n       ++ptemp;\n     }\n@@ -2592,7 +2628,12 @@ Return_statement::do_lower(Gogo*, Named_object* function, Block* enclosing,\n       e->determine_type(&type_context);\n \n       std::string reason;\n-      if (Type::are_assignable(rvtype, e->type(), &reason))\n+      bool ok;\n+      if (this->are_hidden_fields_ok_)\n+\tok = Type::are_assignable_hidden_ok(rvtype, e->type(), &reason);\n+      else\n+\tok = Type::are_assignable(rvtype, e->type(), &reason);\n+      if (ok)\n \t{\n \t  Expression* ve = Expression::make_var_reference(rv, e->location());\n \t  lhs->push_back(ve);\n@@ -2614,13 +2655,28 @@ Return_statement::do_lower(Gogo*, Named_object* function, Block* enclosing,\n     ;\n   else if (lhs->size() == 1)\n     {\n-      b->add_statement(Statement::make_assignment(lhs->front(), rhs->front(),\n-\t\t\t\t\t\t  loc));\n+      Statement* s = Statement::make_assignment(lhs->front(), rhs->front(),\n+\t\t\t\t\t\tloc);\n+      if (this->are_hidden_fields_ok_)\n+\t{\n+\t  Assignment_statement* as = static_cast<Assignment_statement*>(s);\n+\t  as->set_hidden_fields_are_ok();\n+\t}\n+      b->add_statement(s);\n       delete lhs;\n       delete rhs;\n     }\n   else\n-    b->add_statement(Statement::make_tuple_assignment(lhs, rhs, loc));\n+    {\n+      Statement* s = Statement::make_tuple_assignment(lhs, rhs, loc);\n+      if (this->are_hidden_fields_ok_)\n+\t{\n+\t  Tuple_assignment_statement* tas =\n+\t    static_cast<Tuple_assignment_statement*>(s);\n+\t  tas->set_hidden_fields_are_ok();\n+\t}\n+      b->add_statement(s);\n+    }\n \n   b->add_statement(this);\n \n@@ -2670,7 +2726,7 @@ Return_statement::do_dump_statement(Ast_dump_context* ast_dump_context) const\n \n // Make a return statement.\n \n-Statement*\n+Return_statement*\n Statement::make_return_statement(Expression_list* vals,\n \t\t\t\t source_location location)\n {"}, {"sha": "8206a08c3616c0fa3552a23827e3058e31a5b28a", "filename": "gcc/go/gofrontend/statements.h", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/280deda6f3c15c60ee5d33a717a826645284abf1/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/280deda6f3c15c60ee5d33a717a826645284abf1/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.h?ref=280deda6f3c15c60ee5d33a717a826645284abf1", "patch": "@@ -204,7 +204,7 @@ class Statement\n   make_defer_statement(Call_expression* call, source_location);\n \n   // Make a return statement.\n-  static Statement*\n+  static Return_statement*\n   make_return_statement(Expression_list*, source_location);\n \n   // Make a break statement.\n@@ -482,13 +482,20 @@ class Temporary_statement : public Statement\n  public:\n   Temporary_statement(Type* type, Expression* init, source_location location)\n     : Statement(STATEMENT_TEMPORARY, location),\n-      type_(type), init_(init), bvariable_(NULL), is_address_taken_(false)\n+      type_(type), init_(init), bvariable_(NULL), are_hidden_fields_ok_(false),\n+      is_address_taken_(false)\n   { }\n \n   // Return the type of the temporary variable.\n   Type*\n   type() const;\n \n+  // Note that it is OK for this return statement to set hidden\n+  // fields.\n+  void\n+  set_hidden_fields_are_ok()\n+  { this->are_hidden_fields_ok_ = true; }\n+\n   // Record that something takes the address of this temporary\n   // variable.\n   void\n@@ -526,6 +533,9 @@ class Temporary_statement : public Statement\n   Expression* init_;\n   // The backend representation of the temporary variable.\n   Bvariable* bvariable_;\n+  // True if this statement may pass hidden fields in the return\n+  // value.  This is used for generated method stubs.\n+  bool are_hidden_fields_ok_;\n   // True if something takes the address of this temporary variable.\n   bool is_address_taken_;\n };\n@@ -570,14 +580,20 @@ class Return_statement : public Statement\n  public:\n   Return_statement(Expression_list* vals, source_location location)\n     : Statement(STATEMENT_RETURN, location),\n-      vals_(vals), is_lowered_(false)\n+      vals_(vals), are_hidden_fields_ok_(false), is_lowered_(false)\n   { }\n \n   // The list of values being returned.  This may be NULL.\n   const Expression_list*\n   vals() const\n   { return this->vals_; }\n \n+  // Note that it is OK for this return statement to set hidden\n+  // fields.\n+  void\n+  set_hidden_fields_are_ok()\n+  { this->are_hidden_fields_ok_ = true; }\n+\n  protected:\n   int\n   do_traverse(Traverse* traverse)\n@@ -602,6 +618,9 @@ class Return_statement : public Statement\n  private:\n   // Return values.  This may be NULL.\n   Expression_list* vals_;\n+  // True if this statement may pass hidden fields in the return\n+  // value.  This is used for generated method stubs.\n+  bool are_hidden_fields_ok_;\n   // True if this statement has been lowered.\n   bool is_lowered_;\n };"}, {"sha": "6e87056be7edd8485c0c4b4dcf169e8e845f726b", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/280deda6f3c15c60ee5d33a717a826645284abf1/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/280deda6f3c15c60ee5d33a717a826645284abf1/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=280deda6f3c15c60ee5d33a717a826645284abf1", "patch": "@@ -7414,7 +7414,13 @@ Type::build_one_stub_method(Gogo* gogo, Method* method,\n \t  for (size_t i = 0; i < count; ++i)\n \t    retvals->push_back(Expression::make_call_result(call, i));\n \t}\n-      Statement* retstat = Statement::make_return_statement(retvals, location);\n+      Return_statement* retstat = Statement::make_return_statement(retvals,\n+\t\t\t\t\t\t\t\t   location);\n+\n+      // We can return values with hidden fields from a stub.  This is\n+      // necessary if the method is itself hidden.\n+      retstat->set_hidden_fields_are_ok();\n+\n       gogo->add_statement(retstat);\n     }\n }"}]}