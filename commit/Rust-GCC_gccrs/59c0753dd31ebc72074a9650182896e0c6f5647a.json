{"sha": "59c0753dd31ebc72074a9650182896e0c6f5647a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTljMDc1M2RkMzFlYmM3MjA3NGE5NjUwMTgyODk2ZTBjNmY1NjQ3YQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-01-05T21:57:01Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-01-05T21:57:01Z"}, "message": "re PR c/19978 (overflow in expression of constants should not cause multiple warnings)\n\n2007-01-05  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR c/19978\n\t* tree.h (TREE_OVERFLOW_P): New.\n\t* c-typeck.c (parser_build_unary_op): Warn only if result\n\toverflowed and operands did not.\n\t(parser_build_binary_op): Likewise.\n\t(convert_for_assignment): Remove redundant overflow_warning.\n\t* c-common.c (overflow_warning): Don't check or set TREE_OVERFLOW.\n\ncp/\n\t* semantics.c (finish_unary_op_expr): Warn only if result\n\toverflowed and operands did not.\n\ntestsuite/\n\t* gcc.dg/multiple-overflow-warn-1.c: New.\n\t* gcc.dg/multiple-overflow-warn-2.c: New.\n\t* gcc.dg/overflow-warn-6.c: New.\n\t* g++.dg/warn/multiple-overflow-warn-1.C: New.\n\nFrom-SVN: r120505", "tree": {"sha": "6907cbd4435447e2f591dc2ff312abadddf5058a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6907cbd4435447e2f591dc2ff312abadddf5058a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59c0753dd31ebc72074a9650182896e0c6f5647a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59c0753dd31ebc72074a9650182896e0c6f5647a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59c0753dd31ebc72074a9650182896e0c6f5647a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59c0753dd31ebc72074a9650182896e0c6f5647a/comments", "author": null, "committer": null, "parents": [{"sha": "c2658540a35254dd462e104abf9cf8b7bdb68113", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2658540a35254dd462e104abf9cf8b7bdb68113", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2658540a35254dd462e104abf9cf8b7bdb68113"}], "stats": {"total": 160, "additions": 128, "deletions": 32}, "files": [{"sha": "7b0bbd5b3fa502554df03e18b61b084552028851", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59c0753dd31ebc72074a9650182896e0c6f5647a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59c0753dd31ebc72074a9650182896e0c6f5647a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59c0753dd31ebc72074a9650182896e0c6f5647a", "patch": "@@ -1,3 +1,13 @@\n+2007-01-05  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c/19978\n+\t* tree.h (TREE_OVERFLOW_P): New.\n+\t* c-typeck.c (parser_build_unary_op): Warn only if result\n+\toverflowed and operands did not.\n+\t(parser_build_binary_op): Likewise.\n+\t(convert_for_assignment): Remove redundant overflow_warning.\n+\t* c-common.c (overflow_warning): Don't check or set TREE_OVERFLOW.\n+\n 2007-01-05  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* c-typeck.c (store_init_value): Split over two lines to follow"}, {"sha": "8fb9541f16882b7de6948e828f8916544a3d739f", "filename": "gcc/c-common.c", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59c0753dd31ebc72074a9650182896e0c6f5647a/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59c0753dd31ebc72074a9650182896e0c6f5647a/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=59c0753dd31ebc72074a9650182896e0c6f5647a", "patch": "@@ -920,39 +920,45 @@ constant_expression_warning (tree value)\n     pedwarn (\"overflow in constant expression\");\n }\n \n-/* Print a warning if an expression had overflow in folding.\n+/* Print a warning if an expression had overflow in folding and its\n+   operands hadn't.\n+\n    Invoke this function on every expression that\n    (1) appears in the source code, and\n-   (2) might be a constant expression that overflowed, and\n+   (2) is a constant expression that overflowed, and\n    (3) is not already checked by convert_and_check;\n-   however, do not invoke this function on operands of explicit casts.  */\n+   however, do not invoke this function on operands of explicit casts\n+   or when the expression is the result of an operator and any operand\n+   already overflowed.  */\n \n void\n overflow_warning (tree value)\n {\n-  if ((TREE_CODE (value) == INTEGER_CST\n-       || (TREE_CODE (value) == COMPLEX_CST\n-\t   && TREE_CODE (TREE_REALPART (value)) == INTEGER_CST))\n-      && TREE_OVERFLOW (value))\n-    {\n-      TREE_OVERFLOW (value) = 0;\n-      if (skip_evaluation == 0)\n-\twarning (OPT_Woverflow, \"integer overflow in expression\");\n-    }\n-  else if ((TREE_CODE (value) == REAL_CST\n-\t    || (TREE_CODE (value) == COMPLEX_CST\n-\t\t&& TREE_CODE (TREE_REALPART (value)) == REAL_CST))\n-\t   && TREE_OVERFLOW (value))\n-    {\n-      TREE_OVERFLOW (value) = 0;\n-      if (skip_evaluation == 0)\n-\twarning (OPT_Woverflow, \"floating point overflow in expression\");\n-    }\n-  else if (TREE_CODE (value) == VECTOR_CST && TREE_OVERFLOW (value))\n+  if (skip_evaluation) return;\n+\n+  switch (TREE_CODE (value))\n     {\n-      TREE_OVERFLOW (value) = 0;\n-      if (skip_evaluation == 0)\n-\twarning (OPT_Woverflow, \"vector overflow in expression\");\n+    case INTEGER_CST:\n+      warning (OPT_Woverflow, \"integer overflow in expression\");\n+      break;\n+      \n+    case REAL_CST:\n+      warning (OPT_Woverflow, \"floating point overflow in expression\");\n+      break;\n+      \n+    case VECTOR_CST:\n+      warning (OPT_Woverflow, \"vector overflow in expression\");\n+      break;\n+      \n+    case COMPLEX_CST:\n+      if (TREE_CODE (TREE_REALPART (value)) == INTEGER_CST)\n+\twarning (OPT_Woverflow, \"complex integer overflow in expression\");\n+      else if (TREE_CODE (TREE_REALPART (value)) == REAL_CST)\n+\twarning (OPT_Woverflow, \"complex floating point overflow in expression\");\n+      break;\n+\n+    default:\n+      break;\n     }\n }\n "}, {"sha": "8119e7f17b126e27d816cb37520840c4210a0d3a", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59c0753dd31ebc72074a9650182896e0c6f5647a/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59c0753dd31ebc72074a9650182896e0c6f5647a/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=59c0753dd31ebc72074a9650182896e0c6f5647a", "patch": "@@ -2601,7 +2601,10 @@ parser_build_unary_op (enum tree_code code, struct c_expr arg)\n \n   result.original_code = ERROR_MARK;\n   result.value = build_unary_op (code, arg.value, 0);\n-  overflow_warning (result.value);\n+  \n+  if (TREE_OVERFLOW_P (result.value) && !TREE_OVERFLOW_P (arg.value))\n+    overflow_warning (result.value);\n+\n   return result;\n }\n \n@@ -2645,7 +2648,10 @@ parser_build_binary_op (enum tree_code code, struct c_expr arg1,\n     warning (OPT_Wstring_literal_comparison,\n \t     \"comparison with string literal\");\n \n-  overflow_warning (result.value);\n+  if (TREE_OVERFLOW_P (result.value) \n+      && !TREE_OVERFLOW_P (arg1.value) \n+      && !TREE_OVERFLOW_P (arg2.value))\n+    overflow_warning (result.value);\n \n   return result;\n }\n@@ -3827,10 +3833,7 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n     }\n \n   if (TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (rhstype))\n-    {\n-      overflow_warning (rhs);\n-      return rhs;\n-    }\n+    return rhs;\n \n   if (coder == VOID_TYPE)\n     {"}, {"sha": "3c35e5825bf9734cf088dd70869f5f8bf52d6cbc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59c0753dd31ebc72074a9650182896e0c6f5647a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59c0753dd31ebc72074a9650182896e0c6f5647a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=59c0753dd31ebc72074a9650182896e0c6f5647a", "patch": "@@ -1,3 +1,9 @@\n+2007-01-05  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c/19978\n+\t* semantics.c (finish_unary_op_expr): Warn only if result\n+\toverflowed and operands did not.\n+\n 2007-01-05  Ian Lance Taylor  <iant@google.com>\n \n \t* typeck.c (build_binary_op): Warn about comparing a non-weak"}, {"sha": "538f7b4ec153e89eae5a0ac1ca98e5357e6530db", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59c0753dd31ebc72074a9650182896e0c6f5647a/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59c0753dd31ebc72074a9650182896e0c6f5647a/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=59c0753dd31ebc72074a9650182896e0c6f5647a", "patch": "@@ -2000,7 +2000,9 @@ finish_unary_op_expr (enum tree_code code, tree expr)\n       result = copy_node (result);\n       TREE_NEGATED_INT (result) = 1;\n     }\n-  overflow_warning (result);\n+  if (TREE_OVERFLOW_P (result) && !TREE_OVERFLOW_P (expr))\n+    overflow_warning (result);\n+\n   return result;\n }\n "}, {"sha": "5372427a7cfc32d3761a0259d7685ac910129b20", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59c0753dd31ebc72074a9650182896e0c6f5647a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59c0753dd31ebc72074a9650182896e0c6f5647a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=59c0753dd31ebc72074a9650182896e0c6f5647a", "patch": "@@ -1,3 +1,11 @@\n+2007-01-05  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c/19978\n+\t* gcc.dg/multiple-overflow-warn-1.c: New.\n+\t* gcc.dg/multiple-overflow-warn-2.c: New.\n+\t* gcc.dg/overflow-warn-6.c: New.\n+\t* g++.dg/warn/multiple-overflow-warn-1.C: New.\n+\t\n 2007-01-05  Roger Sayle  <roger@eyesopen.com>\n \n \t* gfortran.dg/array_memcpy_1.f90: New test case."}, {"sha": "489930211e4224ac735a1d753161775a033e7a77", "filename": "gcc/testsuite/g++.dg/warn/multiple-overflow-warn-1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59c0753dd31ebc72074a9650182896e0c6f5647a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmultiple-overflow-warn-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59c0753dd31ebc72074a9650182896e0c6f5647a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmultiple-overflow-warn-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmultiple-overflow-warn-1.C?ref=59c0753dd31ebc72074a9650182896e0c6f5647a", "patch": "@@ -0,0 +1,13 @@\n+/* PR c/19978 : Test for duplicated warnings (unary operators).  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Woverflow\" } */\n+\n+#include <limits.h>\n+\n+int \n+g (void)\n+{\n+  return - - - - -INT_MIN; /* { dg-bogus \"integer overflow in expression.*integer overflow in expression\" } */\n+  /* { dg-warning \"integer overflow in expression\" \"\" { target *-*-* } 10 } */\n+}\n+"}, {"sha": "be7b3b85685d06baa47b45c4d7e1ca2ade5b5aad", "filename": "gcc/testsuite/gcc.dg/multiple-overflow-warn-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59c0753dd31ebc72074a9650182896e0c6f5647a/gcc%2Ftestsuite%2Fgcc.dg%2Fmultiple-overflow-warn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59c0753dd31ebc72074a9650182896e0c6f5647a/gcc%2Ftestsuite%2Fgcc.dg%2Fmultiple-overflow-warn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmultiple-overflow-warn-1.c?ref=59c0753dd31ebc72074a9650182896e0c6f5647a", "patch": "@@ -0,0 +1,13 @@\n+/* PR c/19978 : Test for duplicated warnings (unary operators).  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -Woverflow\" } */\n+\n+#include <limits.h>\n+\n+int \n+g (void)\n+{\n+  return - - - - -INT_MIN; /* { dg-bogus \"integer overflow in expression.*integer overflow in expression\" } */\n+  /* { dg-warning \"integer overflow in expression\" \"\" { target *-*-* } 10 } */\n+}\n+"}, {"sha": "8a4e9e5c2742c10f25e1980519f464b9991c71b0", "filename": "gcc/testsuite/gcc.dg/multiple-overflow-warn-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59c0753dd31ebc72074a9650182896e0c6f5647a/gcc%2Ftestsuite%2Fgcc.dg%2Fmultiple-overflow-warn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59c0753dd31ebc72074a9650182896e0c6f5647a/gcc%2Ftestsuite%2Fgcc.dg%2Fmultiple-overflow-warn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmultiple-overflow-warn-2.c?ref=59c0753dd31ebc72074a9650182896e0c6f5647a", "patch": "@@ -0,0 +1,12 @@\n+/* PR c/19978 : Test for duplicated warnings (binary operators).  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -Woverflow\" } */\n+\n+#include <limits.h>\n+\n+int \n+g1 (void)\n+{\n+  return INT_MAX + 1 - INT_MAX; /* { dg-bogus \"integer overflow in expression.*integer overflow in expression\" } */\n+  /* { dg-warning \"integer overflow in expression\" \"\" { target *-*-* } 10 } */\n+}"}, {"sha": "da8cb0140a92ba542e1a25c56a8776f1b734900e", "filename": "gcc/testsuite/gcc.dg/overflow-warn-6.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59c0753dd31ebc72074a9650182896e0c6f5647a/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59c0753dd31ebc72074a9650182896e0c6f5647a/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-6.c?ref=59c0753dd31ebc72074a9650182896e0c6f5647a", "patch": "@@ -0,0 +1,18 @@\n+/* Test non-constant operands in overflowed expressions.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -Woverflow\" } */\n+\n+#include <limits.h>\n+\n+int \n+h1 (int x)\n+{\n+  return x * (0 * (INT_MAX + 1)); /* { dg-warning \"warning: integer overflow in expression\" } */\n+}\n+\n+int \n+h2 (int x)\n+{\n+  return ((INT_MAX + 1) * 0) * x; /* { dg-warning \"warning: integer overflow in expression\" } */\n+}\n+"}, {"sha": "9f2d7076c45c22a969b671d0a46c8687dff3b6cf", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59c0753dd31ebc72074a9650182896e0c6f5647a/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59c0753dd31ebc72074a9650182896e0c6f5647a/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=59c0753dd31ebc72074a9650182896e0c6f5647a", "patch": "@@ -1156,6 +1156,11 @@ extern void omp_clause_range_check_failed (const tree, const char *, int,\n \n #define TREE_OVERFLOW(NODE) (CST_CHECK (NODE)->base.public_flag)\n \n+/* TREE_OVERFLOW can only be true for EXPR of CONSTANT_CLASS_P.  */\n+\n+#define TREE_OVERFLOW_P(EXPR) \\\n+ (CONSTANT_CLASS_P (EXPR) && TREE_OVERFLOW (EXPR))\n+\n /* In a VAR_DECL, FUNCTION_DECL, NAMESPACE_DECL or TYPE_DECL,\n    nonzero means name is to be accessible from outside this module.\n    In an IDENTIFIER_NODE, nonzero means an external declaration"}]}