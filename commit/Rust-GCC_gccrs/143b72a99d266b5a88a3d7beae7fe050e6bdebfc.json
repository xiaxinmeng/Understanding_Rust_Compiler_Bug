{"sha": "143b72a99d266b5a88a3d7beae7fe050e6bdebfc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQzYjcyYTk5ZDI2NmI1YTg4YTNkN2JlYWU3ZmUwNTBlNmJkZWJmYw==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-02-23T12:58:44Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-02-23T12:58:44Z"}, "message": "Fix PR43026: handle COMPONENT_REFs in expand scalar expressions.\n\n2010-02-11  Sebastian Pop  <sebastian.pop@amd.com>\n\n\tPR middle-end/43026\n\t* sese.c (expand_scalar_variables_expr): Handle COMPONENT_REF.\n\n\t* g++.dg/graphite/pr43026.C: New.\n\nFrom-SVN: r156993", "tree": {"sha": "b5baf3034df8f093ac15a58798413119f911f759", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5baf3034df8f093ac15a58798413119f911f759"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/143b72a99d266b5a88a3d7beae7fe050e6bdebfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/143b72a99d266b5a88a3d7beae7fe050e6bdebfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/143b72a99d266b5a88a3d7beae7fe050e6bdebfc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/143b72a99d266b5a88a3d7beae7fe050e6bdebfc/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bbc8462110858ba3b800e2c4274cec9c1c07e34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bbc8462110858ba3b800e2c4274cec9c1c07e34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bbc8462110858ba3b800e2c4274cec9c1c07e34"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "cb969c56b6f032a19c85a9981148471c31801888", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/143b72a99d266b5a88a3d7beae7fe050e6bdebfc/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/143b72a99d266b5a88a3d7beae7fe050e6bdebfc/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=143b72a99d266b5a88a3d7beae7fe050e6bdebfc", "patch": "@@ -1,3 +1,10 @@\n+2010-02-11  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR middle-end/43026\n+\t* sese.c (expand_scalar_variables_expr): Handle COMPONENT_REF.\n+\n+\t* g++.dg/graphite/pr43026.C: New.\n+\n 2010-02-11  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR middle-end/43012"}, {"sha": "ebf915494b38f5fdca3ca0eea006f73cd4f08431", "filename": "gcc/sese.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/143b72a99d266b5a88a3d7beae7fe050e6bdebfc/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/143b72a99d266b5a88a3d7beae7fe050e6bdebfc/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=143b72a99d266b5a88a3d7beae7fe050e6bdebfc", "patch": "@@ -897,6 +897,9 @@ expand_scalar_variables_expr (tree type, tree op0, enum tree_code code,\n \t    return build4 (ARRAY_REF, type, base, subscript, op02, op03);\n \t  }\n \n+\tcase COMPONENT_REF:\n+\t  return op0;\n+\n \tdefault:\n \t  /* The above cases should catch everything.  */\n \t  gcc_unreachable ();"}, {"sha": "0e33f1097c238d11e933d54990d93d12d5b7afaa", "filename": "gcc/testsuite/g++.dg/graphite/pr43026.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/143b72a99d266b5a88a3d7beae7fe050e6bdebfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fpr43026.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/143b72a99d266b5a88a3d7beae7fe050e6bdebfc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fpr43026.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fpr43026.C?ref=143b72a99d266b5a88a3d7beae7fe050e6bdebfc", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fgraphite-identity -m32\" } */\n+\n+template<typename Tp > class vector { };\n+\n+template <int rank, int dim> class Tensor;\n+\n+template <int dim> class Tensor<1,dim> {\n+public:\n+  Tensor (const Tensor<1,dim> &);\n+private:\n+  double values[(dim != 0) ? (dim) : 1];\n+};\n+\n+template <int dim>\n+#ifdef NOINLINE\n+// declaring this noinline prevents the ICE\n+__attribute__ ((noinline))\n+#endif\n+Tensor<1,dim>::Tensor (const Tensor<1,dim> &p)\n+{\n+  for (unsigned int i = 0; i < dim; ++i)\n+    values[i] = p.values[i];\n+}\n+\n+template <int rank, int dim>\n+class Tensor {\n+  Tensor<rank-1,dim> subtensor[dim];\n+};\n+\n+template <int dim> class Base {\n+public:\n+  const unsigned int npoints;\n+  const unsigned int dofs;\n+  const Tensor<2,dim> &s2d (const unsigned int fno,\n+                            const unsigned int pno) const;\n+  void getf2d (vector<Tensor<2,dim> >& d2) const;\n+};\n+\n+template <int dim>\n+void Base<dim>:: getf2d\n+  (vector<Tensor<2,dim> > &d2) const\n+{\n+  unsigned int point, sf;\n+\n+  for (point = 0; point < npoints; ++point)\n+    for (sf = 0; sf < dofs; ++sf)\n+      Tensor<2,dim> tmp = s2d (sf, point);\n+}\n+\n+template void Base<3>::getf2d (vector<Tensor<2,3> > &) const;"}]}