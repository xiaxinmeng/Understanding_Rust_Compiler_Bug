{"sha": "09fccb6243ff7fe953e2026da794d8dda5875bef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDlmY2NiNjI0M2ZmN2ZlOTUzZTIwMjZkYTc5NGQ4ZGRhNTg3NWJlZg==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2014-01-13T23:18:05Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2014-01-13T23:18:05Z"}, "message": "rs6000-c.c (altivec_resolve_overloaded_builtin): Implement -maltivec=be for vec_insert and vec_extract.\n\ngcc:\n\n2014-01-13  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):\n\tImplement -maltivec=be for vec_insert and vec_extract.\n\ngcc/testsuite:\n\n2014-01-13  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.dg/vmx/insert.c: New.\n\t* gcc.dg/vmx/insert-be-order.c: New.\n\t* gcc.dg/vmx/extract.c: New.\n\t* gcc.dg/vmx/extract-be-order.c: New.\n\nFrom-SVN: r206590", "tree": {"sha": "930b9b3c6f8f4c145ce6435ff04c1f7ece21f48d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/930b9b3c6f8f4c145ce6435ff04c1f7ece21f48d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09fccb6243ff7fe953e2026da794d8dda5875bef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09fccb6243ff7fe953e2026da794d8dda5875bef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09fccb6243ff7fe953e2026da794d8dda5875bef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09fccb6243ff7fe953e2026da794d8dda5875bef/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "51835a800d0781a80e674973b04353464e8f8876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51835a800d0781a80e674973b04353464e8f8876", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51835a800d0781a80e674973b04353464e8f8876"}], "stats": {"total": 194, "additions": 192, "deletions": 2}, "files": [{"sha": "d52bb3aa8e3535b4c993d29cb61ef7982e373655", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fccb6243ff7fe953e2026da794d8dda5875bef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fccb6243ff7fe953e2026da794d8dda5875bef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09fccb6243ff7fe953e2026da794d8dda5875bef", "patch": "@@ -1,3 +1,8 @@\n+2014-01-13  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):\n+\tImplement -maltivec=be for vec_insert and vec_extract.\n+\n 2014-01-10  DJ Delorie  <dj@redhat.com>\n \n \t* config/msp430/msp430.md (call_internal): Don't allow memory"}, {"sha": "2072b76c26ea1456623dbfd2136e730b02d146fa", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fccb6243ff7fe953e2026da794d8dda5875bef/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fccb6243ff7fe953e2026da794d8dda5875bef/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=09fccb6243ff7fe953e2026da794d8dda5875bef", "patch": "@@ -4172,7 +4172,7 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \treturn build_constructor (type, vec);\n     }\n \n-  /* For now use pointer tricks to do the extaction, unless we are on VSX\n+  /* For now use pointer tricks to do the extraction, unless we are on VSX\n      extracting a double from a constant offset.  */\n   if (fcode == ALTIVEC_BUILTIN_VEC_EXTRACT)\n     {\n@@ -4200,6 +4200,17 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n       if (!INTEGRAL_TYPE_P (TREE_TYPE (arg2)))\n \tgoto bad; \n \n+      /* If we are targeting little-endian, but -maltivec=be has been\n+\t specified to override the element order, adjust the element\n+\t number accordingly.  */\n+      if (!BYTES_BIG_ENDIAN && rs6000_altivec_element_order == 2)\n+\t{\n+\t  unsigned int last_elem = TYPE_VECTOR_SUBPARTS (arg1_type) - 1;\n+\t  arg2 = fold_build2_loc (loc, MINUS_EXPR, TREE_TYPE (arg2),\n+\t\t\t\t  build_int_cstu (TREE_TYPE (arg2), last_elem),\n+\t\t\t\t  arg2);\n+\t}\n+\n       /* If we can use the VSX xxpermdi instruction, use that for extract.  */\n       mode = TYPE_MODE (arg1_type);\n       if ((mode == V2DFmode || mode == V2DImode) && VECTOR_MEM_VSX_P (mode)\n@@ -4256,7 +4267,7 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n       return stmt;\n     }\n \n-  /* For now use pointer tricks to do the insertation, unless we are on VSX\n+  /* For now use pointer tricks to do the insertion, unless we are on VSX\n      inserting a double to a constant offset..  */\n   if (fcode == ALTIVEC_BUILTIN_VEC_INSERT)\n     {\n@@ -4286,6 +4297,17 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n       if (!INTEGRAL_TYPE_P (TREE_TYPE (arg2)))\n \tgoto bad; \n \n+      /* If we are targeting little-endian, but -maltivec=be has been\n+\t specified to override the element order, adjust the element\n+\t number accordingly.  */\n+      if (!BYTES_BIG_ENDIAN && rs6000_altivec_element_order == 2)\n+\t{\n+\t  unsigned int last_elem = TYPE_VECTOR_SUBPARTS (arg1_type) - 1;\n+\t  arg2 = fold_build2_loc (loc, MINUS_EXPR, TREE_TYPE (arg2),\n+\t\t\t\t  build_int_cstu (TREE_TYPE (arg2), last_elem),\n+\t\t\t\t  arg2);\n+\t}\n+\n       /* If we can use the VSX xxpermdi instruction, use that for insert.  */\n       mode = TYPE_MODE (arg1_type);\n       if ((mode == V2DFmode || mode == V2DImode) && VECTOR_UNIT_VSX_P (mode)"}, {"sha": "1576e527c4047dc089f75dfb6b0506354533db06", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fccb6243ff7fe953e2026da794d8dda5875bef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fccb6243ff7fe953e2026da794d8dda5875bef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=09fccb6243ff7fe953e2026da794d8dda5875bef", "patch": "@@ -1,3 +1,10 @@\n+2014-01-13  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gcc.dg/vmx/insert.c: New.\n+\t* gcc.dg/vmx/insert-be-order.c: New.\n+\t* gcc.dg/vmx/extract.c: New.\n+\t* gcc.dg/vmx/extract-be-order.c: New.\n+\n 2014-01-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/59387"}, {"sha": "5c09471d99b540c96b0855de875b0af960d1304b", "filename": "gcc/testsuite/gcc.dg/vmx/extract-be-order.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fccb6243ff7fe953e2026da794d8dda5875bef/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fextract-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fccb6243ff7fe953e2026da794d8dda5875bef/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fextract-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fextract-be-order.c?ref=09fccb6243ff7fe953e2026da794d8dda5875bef", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-options \"-maltivec=be -mabi=altivec -std=gnu99 -mno-vsx\" } */\n+\n+#include \"harness.h\"\n+\n+static void test()\n+{\n+  vector unsigned char va = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  vector signed char vb = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n+  vector unsigned short vc = {0,1,2,3,4,5,6,7};\n+  vector signed short vd = {-4,-3,-2,-1,0,1,2,3};\n+  vector unsigned int ve = {0,1,2,3};\n+  vector signed int vf = {-2,-1,0,1};\n+  vector float vg = {-2.0f,-1.0f,0.0f,1.0f};\n+\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  check (vec_extract (va, 5) == 10, \"vec_extract (va, 5)\");\n+  check (vec_extract (vb, 0) == 7, \"vec_extract (vb, 0)\");\n+  check (vec_extract (vc, 7) == 0, \"vec_extract (vc, 7)\");\n+  check (vec_extract (vd, 3) == 0, \"vec_extract (vd, 3)\");\n+  check (vec_extract (ve, 2) == 1, \"vec_extract (ve, 2)\");\n+  check (vec_extract (vf, 1) == 0, \"vec_extract (vf, 1)\");\n+  check (vec_extract (vg, 0) == 1.0f, \"vec_extract (vg, 0)\");\n+#else\n+  check (vec_extract (va, 5) == 5, \"vec_extract (va, 5)\");\n+  check (vec_extract (vb, 0) == -8, \"vec_extract (vb, 0)\");\n+  check (vec_extract (vc, 7) == 7, \"vec_extract (vc, 7)\");\n+  check (vec_extract (vd, 3) == -1, \"vec_extract (vd, 3)\");\n+  check (vec_extract (ve, 2) == 2, \"vec_extract (ve, 2)\");\n+  check (vec_extract (vf, 1) == -1, \"vec_extract (vf, 1)\");\n+  check (vec_extract (vg, 0) == -2.0f, \"vec_extract (vg, 0)\");\n+#endif\n+}\n+"}, {"sha": "6fc472557026d98b35853334410969e5bf555a74", "filename": "gcc/testsuite/gcc.dg/vmx/extract.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fccb6243ff7fe953e2026da794d8dda5875bef/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fccb6243ff7fe953e2026da794d8dda5875bef/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fextract.c?ref=09fccb6243ff7fe953e2026da794d8dda5875bef", "patch": "@@ -0,0 +1,21 @@\n+#include \"harness.h\"\n+\n+static void test()\n+{\n+  vector unsigned char va = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  vector signed char vb = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n+  vector unsigned short vc = {0,1,2,3,4,5,6,7};\n+  vector signed short vd = {-4,-3,-2,-1,0,1,2,3};\n+  vector unsigned int ve = {0,1,2,3};\n+  vector signed int vf = {-2,-1,0,1};\n+  vector float vg = {-2.0f,-1.0f,0.0f,1.0f};\n+\n+  check (vec_extract (va, 5) == 5, \"vec_extract (va, 5)\");\n+  check (vec_extract (vb, 0) == -8, \"vec_extract (vb, 0)\");\n+  check (vec_extract (vc, 7) == 7, \"vec_extract (vc, 7)\");\n+  check (vec_extract (vd, 3) == -1, \"vec_extract (vd, 3)\");\n+  check (vec_extract (ve, 2) == 2, \"vec_extract (ve, 2)\");\n+  check (vec_extract (vf, 1) == -1, \"vec_extract (vf, 1)\");\n+  check (vec_extract (vg, 0) == -2.0f, \"vec_extract (vg, 0)\");\n+}\n+"}, {"sha": "592ef28c0fc8cbe922a2a759f7252222de26ccb7", "filename": "gcc/testsuite/gcc.dg/vmx/insert-be-order.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fccb6243ff7fe953e2026da794d8dda5875bef/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Finsert-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fccb6243ff7fe953e2026da794d8dda5875bef/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Finsert-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Finsert-be-order.c?ref=09fccb6243ff7fe953e2026da794d8dda5875bef", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-options \"-maltivec=be -mabi=altivec -std=gnu99 -mno-vsx\" } */\n+\n+#include \"harness.h\"\n+\n+static void test()\n+{\n+  vector unsigned char va = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  vector signed char vb = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n+  vector unsigned short vc = {0,1,2,3,4,5,6,7};\n+  vector signed short vd = {-4,-3,-2,-1,0,1,2,3};\n+  vector unsigned int ve = {0,1,2,3};\n+  vector signed int vf = {-2,-1,0,1};\n+  vector float vg = {-2.0f,-1.0f,0.0f,1.0f};\n+\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  check (vec_all_eq (vec_insert (16, va, 5),\n+\t\t     ((vector unsigned char)\n+\t\t       {0,1,2,3,4,5,6,7,8,9,16,11,12,13,14,15})),\n+\t \"vec_insert (va LE)\");\n+  check (vec_all_eq (vec_insert (-16, vb, 0),\n+\t\t     ((vector signed char)\n+\t\t       {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,-16})),\n+\t \"vec_insert (vb LE)\");\n+  check (vec_all_eq (vec_insert (16, vc, 7),\n+\t\t     ((vector unsigned short){16,1,2,3,4,5,6,7})),\n+\t \"vec_insert (vc LE)\");\n+  check (vec_all_eq (vec_insert (-16, vd, 3),\n+\t\t     ((vector signed short){-4,-3,-2,-1,-16,1,2,3})),\n+\t \"vec_insert (vd LE)\");\n+  check (vec_all_eq (vec_insert (16, ve, 2),\n+\t\t     ((vector unsigned int){0,16,2,3})),\n+\t \"vec_insert (ve LE)\");\n+  check (vec_all_eq (vec_insert (-16, vf, 1),\n+\t\t     ((vector signed int){-2,-1,-16,1})),\n+\t \"vec_insert (vf LE)\");\n+  check (vec_all_eq (vec_insert (-16.0f, vg, 0),\n+\t\t     ((vector float){-2.0f,-1.0f,0.0f,-16.0f})),\n+\t \"vec_insert (vg LE)\");\n+#else\n+  check (vec_all_eq (vec_insert (16, va, 5),\n+\t\t     ((vector unsigned char)\n+\t\t       {0,1,2,3,4,16,6,7,8,9,10,11,12,13,14,15})),\n+\t \"vec_insert (va BE)\");\n+  check (vec_all_eq (vec_insert (-16, vb, 0),\n+\t\t     ((vector signed char)\n+\t\t       {-16,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7})),\n+\t \"vec_insert (vb BE)\");\n+  check (vec_all_eq (vec_insert (16, vc, 7),\n+\t\t     ((vector unsigned short){0,1,2,3,4,5,6,16})),\n+\t \"vec_insert (vc BE)\");\n+  check (vec_all_eq (vec_insert (-16, vd, 3),\n+\t\t     ((vector signed short){-4,-3,-2,-16,0,1,2,3})),\n+\t \"vec_insert (vd BE)\");\n+  check (vec_all_eq (vec_insert (16, ve, 2),\n+\t\t     ((vector unsigned int){0,1,16,3})),\n+\t \"vec_insert (ve BE)\");\n+  check (vec_all_eq (vec_insert (-16, vf, 1),\n+\t\t     ((vector signed int){-2,-16,0,1})),\n+\t \"vec_insert (vf BE)\");\n+  check (vec_all_eq (vec_insert (-16.0f, vg, 0),\n+\t\t     ((vector float){-16.0f,-1.0f,0.0f,1.0f})),\n+\t \"vec_insert (vg BE)\");\n+#endif\n+}\n+"}, {"sha": "39cd75d879ca3602e0920d1f524f9c7c739348bd", "filename": "gcc/testsuite/gcc.dg/vmx/insert.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fccb6243ff7fe953e2026da794d8dda5875bef/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Finsert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fccb6243ff7fe953e2026da794d8dda5875bef/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Finsert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Finsert.c?ref=09fccb6243ff7fe953e2026da794d8dda5875bef", "patch": "@@ -0,0 +1,37 @@\n+#include \"harness.h\"\n+\n+static void test()\n+{\n+  vector unsigned char va = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  vector signed char vb = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n+  vector unsigned short vc = {0,1,2,3,4,5,6,7};\n+  vector signed short vd = {-4,-3,-2,-1,0,1,2,3};\n+  vector unsigned int ve = {0,1,2,3};\n+  vector signed int vf = {-2,-1,0,1};\n+  vector float vg = {-2.0f,-1.0f,0.0f,1.0f};\n+\n+  check (vec_all_eq (vec_insert (16, va, 5),\n+\t\t     ((vector unsigned char)\n+\t\t      {0,1,2,3,4,16,6,7,8,9,10,11,12,13,14,15})),\n+\t \"vec_insert (va)\");\n+  check (vec_all_eq (vec_insert (-16, vb, 0),\n+\t\t     ((vector signed char)\n+\t\t      {-16,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7})),\n+\t \"vec_insert (vb)\");\n+  check (vec_all_eq (vec_insert (16, vc, 7),\n+\t\t     ((vector unsigned short){0,1,2,3,4,5,6,16})),\n+\t \"vec_insert (vc)\");\n+  check (vec_all_eq (vec_insert (-16, vd, 3),\n+\t\t     ((vector signed short){-4,-3,-2,-16,0,1,2,3})),\n+\t \"vec_insert (vd)\");\n+  check (vec_all_eq (vec_insert (16, ve, 2),\n+\t\t     ((vector unsigned int){0,1,16,3})),\n+\t \"vec_insert (ve)\");\n+  check (vec_all_eq (vec_insert (-16, vf, 1),\n+\t\t     ((vector signed int){-2,-16,0,1})),\n+\t \"vec_insert (vf)\");\n+  check (vec_all_eq (vec_insert (-16.0f, vg, 0),\n+\t\t     ((vector float){-16.0f,-1.0f,0.0f,1.0f})),\n+\t \"vec_insert (vg)\");\n+}\n+"}]}