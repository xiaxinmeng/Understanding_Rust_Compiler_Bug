{"sha": "d72c3f0a36c703f22962bb40e59c529d94153e58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDcyYzNmMGEzNmM3MDNmMjI5NjJiYjQwZTU5YzUyOWQ5NDE1M2U1OA==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2016-10-26T20:52:21Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2016-10-26T20:52:21Z"}, "message": "stl_map.h (map()): Make default.\n\n2016-10-26  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/stl_map.h (map()): Make default.\n\t* include/bits/stl_multimap.h (multimap()): Likewise.\n\t* include/bits/stl_multiset.h (multiset()): Likewise.\n\t* include/bits/stl_set.h (set()): Likewise.\n\t* include/bits/stl_tree.h (_Rb_tree_impl()): Add conditional noexcept.\n\t(_Rb_tree()): Make default.\n\nFrom-SVN: r241601", "tree": {"sha": "9f7f2d6abf03481dda345cc97998679646ee7b8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f7f2d6abf03481dda345cc97998679646ee7b8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d72c3f0a36c703f22962bb40e59c529d94153e58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d72c3f0a36c703f22962bb40e59c529d94153e58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d72c3f0a36c703f22962bb40e59c529d94153e58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d72c3f0a36c703f22962bb40e59c529d94153e58/comments", "author": null, "committer": null, "parents": [{"sha": "133634de9862b748c03ea2d8605bce5c762b2c02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/133634de9862b748c03ea2d8605bce5c762b2c02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/133634de9862b748c03ea2d8605bce5c762b2c02"}], "stats": {"total": 62, "additions": 39, "deletions": 23}, "files": [{"sha": "d3a07b6885ed83ea3be2ff3dd88bbada53145be1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d72c3f0a36c703f22962bb40e59c529d94153e58/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d72c3f0a36c703f22962bb40e59c529d94153e58/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d72c3f0a36c703f22962bb40e59c529d94153e58", "patch": "@@ -1,3 +1,12 @@\n+2016-10-26  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/stl_map.h (map()): Make default.\n+\t* include/bits/stl_multimap.h (multimap()): Likewise.\n+\t* include/bits/stl_multiset.h (multiset()): Likewise.\n+\t* include/bits/stl_set.h (set()): Likewise.\n+\t* include/bits/stl_tree.h (_Rb_tree_impl()): Add conditional noexcept.\n+\t(_Rb_tree()): Make default.\n+\n 2016-10-26  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR libstdc++/78110"}, {"sha": "dea7d5bc376095f29a6b20fb517b7a753d05ff6e", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d72c3f0a36c703f22962bb40e59c529d94153e58/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d72c3f0a36c703f22962bb40e59c529d94153e58/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=d72c3f0a36c703f22962bb40e59c529d94153e58", "patch": "@@ -167,11 +167,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /**\n        *  @brief  Default constructor creates no elements.\n        */\n-      map()\n-      _GLIBCXX_NOEXCEPT_IF(\n-\t  is_nothrow_default_constructible<allocator_type>::value\n-\t  && is_nothrow_default_constructible<key_compare>::value)\n-      : _M_t() { }\n+#if __cplusplus < 201103L\n+      map() : _M_t() { }\n+#else\n+      map() = default;\n+#endif\n \n       /**\n        *  @brief  Creates a %map with no elements."}, {"sha": "7e86b76e9878c8d9b4dfcd26daf1cb2f0724c18d", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d72c3f0a36c703f22962bb40e59c529d94153e58/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d72c3f0a36c703f22962bb40e59c529d94153e58/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=d72c3f0a36c703f22962bb40e59c529d94153e58", "patch": "@@ -164,11 +164,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /**\n        *  @brief  Default constructor creates no elements.\n        */\n-      multimap()\n-      _GLIBCXX_NOEXCEPT_IF(\n-\t  is_nothrow_default_constructible<allocator_type>::value\n-\t  && is_nothrow_default_constructible<key_compare>::value)\n-      : _M_t() { }\n+#if __cplusplus < 201103L\n+      multimap() : _M_t() { }\n+#else\n+      multimap() = default;\n+#endif\n \n       /**\n        *  @brief  Creates a %multimap with no elements."}, {"sha": "7fe2fbd4f0259799d173b725ea6b97493e5d5aa5", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d72c3f0a36c703f22962bb40e59c529d94153e58/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d72c3f0a36c703f22962bb40e59c529d94153e58/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=d72c3f0a36c703f22962bb40e59c529d94153e58", "patch": "@@ -144,11 +144,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /**\n        *  @brief  Default constructor creates no elements.\n        */\n-      multiset()\n-      _GLIBCXX_NOEXCEPT_IF(\n-\t  is_nothrow_default_constructible<allocator_type>::value\n-\t  && is_nothrow_default_constructible<key_compare>::value)\n-      : _M_t() { }\n+#if __cplusplus < 201103L\n+      multiset() : _M_t() { }\n+#else\n+      multiset() = default;\n+#endif\n \n       /**\n        *  @brief  Creates a %multiset with no elements."}, {"sha": "5ed9672de5891354deff2c6184298baeda0bf7ea", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d72c3f0a36c703f22962bb40e59c529d94153e58/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d72c3f0a36c703f22962bb40e59c529d94153e58/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=d72c3f0a36c703f22962bb40e59c529d94153e58", "patch": "@@ -147,11 +147,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /**\n        *  @brief  Default constructor creates no elements.\n        */\n-      set()\n-      _GLIBCXX_NOEXCEPT_IF(\n-\t  is_nothrow_default_constructible<allocator_type>::value\n-\t  && is_nothrow_default_constructible<key_compare>::value)\n-      : _M_t() { }\n+#if __cplusplus < 201103L\n+      set() : _M_t() { }\n+#else\n+      set() = default;\n+#endif\n \n       /**\n        *  @brief  Creates a %set with no elements."}, {"sha": "2c67ad96dd12bd813265373602cf565c05956479", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d72c3f0a36c703f22962bb40e59c529d94153e58/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d72c3f0a36c703f22962bb40e59c529d94153e58/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=d72c3f0a36c703f22962bb40e59c529d94153e58", "patch": "@@ -602,10 +602,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         struct _Rb_tree_impl : public _Node_allocator\n         {\n \t  _Key_compare\t\t_M_key_compare;\n-\t  _Rb_tree_node_base \t_M_header;\n-\t  size_type \t\t_M_node_count; // Keeps track of size of tree.\n+\t  _Rb_tree_node_base\t_M_header;\n+\t  size_type\t\t_M_node_count; // Keeps track of size of tree.\n \n \t  _Rb_tree_impl()\n+\t  _GLIBCXX_NOEXCEPT_IF(\n+\t    is_nothrow_default_constructible<_Node_allocator>::value\n+\t    && is_nothrow_default_constructible<_Key_compare>::value)\n \t  : _Node_allocator(), _M_key_compare(), _M_header(),\n \t    _M_node_count(0)\n \t  { _M_initialize(); }\n@@ -639,7 +642,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    this->_M_header._M_parent = 0;\n \t    this->_M_header._M_left = &this->_M_header;\n \t    this->_M_header._M_right = &this->_M_header;\n-\t  }\t    \n+\t  }\n \t};\n \n       _Rb_tree_impl<_Compare> _M_impl;\n@@ -831,7 +834,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     public:\n       // allocation/deallocation\n+#if __cplusplus < 201103L\n       _Rb_tree() { }\n+#else\n+      _Rb_tree() = default;\n+#endif\n \n       _Rb_tree(const _Compare& __comp,\n \t       const allocator_type& __a = allocator_type())"}]}