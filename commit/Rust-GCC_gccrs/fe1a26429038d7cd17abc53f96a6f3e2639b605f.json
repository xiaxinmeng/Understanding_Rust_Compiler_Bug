{"sha": "fe1a26429038d7cd17abc53f96a6f3e2639b605f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUxYTI2NDI5MDM4ZDdjZDE3YWJjNTNmOTZhNmYzZTI2MzliNjA1Zg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-08-05T14:18:36Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-08-05T14:18:36Z"}, "message": "aarch64: Clear canary value after stack_protect_test [PR96191]\n\nThe stack_protect_test patterns were leaving the canary value in the\ntemporary register, meaning that it was often still in registers on\nreturn from the function.  An attacker might therefore have been\nable to use it to defeat stack-smash protection for a later function.\n\ngcc/\n\tPR target/96191\n\t* config/aarch64/aarch64.md (stack_protect_test_<mode>): Set the\n\tCC register directly, instead of a GPR.  Replace the original GPR\n\tdestination with an extra scratch register.  Zero out operand 3\n\tafter use.\n\t(stack_protect_test): Update accordingly.\n\ngcc/testsuite/\n\tPR target/96191\n\t* gcc.target/aarch64/stack-protector-1.c: New test.\n\t* gcc.target/aarch64/stack-protector-2.c: Likewise.", "tree": {"sha": "e37f7d8a433b1c8f5113745d5098845be27d223d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e37f7d8a433b1c8f5113745d5098845be27d223d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe1a26429038d7cd17abc53f96a6f3e2639b605f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe1a26429038d7cd17abc53f96a6f3e2639b605f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe1a26429038d7cd17abc53f96a6f3e2639b605f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe1a26429038d7cd17abc53f96a6f3e2639b605f/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c272091c09298eea02b6bb3b3ffd95db9ea505b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c272091c09298eea02b6bb3b3ffd95db9ea505b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c272091c09298eea02b6bb3b3ffd95db9ea505b"}], "stats": {"total": 129, "additions": 110, "deletions": 19}, "files": [{"sha": "9b20dd0b1a0e917789da1d8db1152e2bb1f1b625", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe1a26429038d7cd17abc53f96a6f3e2639b605f/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe1a26429038d7cd17abc53f96a6f3e2639b605f/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=fe1a26429038d7cd17abc53f96a6f3e2639b605f", "patch": "@@ -7217,10 +7217,8 @@\n    (match_operand 2)]\n   \"\"\n {\n-  rtx result;\n   machine_mode mode = GET_MODE (operands[0]);\n \n-  result = gen_reg_rtx(mode);\n   if (aarch64_stack_protector_guard != SSP_GLOBAL)\n   {\n     /* Generate access through the system register. The\n@@ -7245,29 +7243,27 @@\n     operands[1] = gen_rtx_MEM (mode, tmp_reg);\n   }\n   emit_insn ((mode == DImode\n-\t\t  ? gen_stack_protect_test_di\n-\t\t  : gen_stack_protect_test_si) (result,\n-\t\t\t\t\t        operands[0],\n-\t\t\t\t\t        operands[1]));\n-\n-  if (mode == DImode)\n-    emit_jump_insn (gen_cbranchdi4 (gen_rtx_EQ (VOIDmode, result, const0_rtx),\n-\t\t\t\t    result, const0_rtx, operands[2]));\n-  else\n-    emit_jump_insn (gen_cbranchsi4 (gen_rtx_EQ (VOIDmode, result, const0_rtx),\n-\t\t\t\t    result, const0_rtx, operands[2]));\n+\t     ? gen_stack_protect_test_di\n+\t     : gen_stack_protect_test_si) (operands[0], operands[1]));\n+\n+  rtx cc_reg = gen_rtx_REG (CCmode, CC_REGNUM);\n+  emit_jump_insn (gen_condjump (gen_rtx_EQ (VOIDmode, cc_reg, const0_rtx),\n+\t\t\t\tcc_reg, operands[2]));\n   DONE;\n })\n \n+;; DO NOT SPLIT THIS PATTERN.  It is important for security reasons that the\n+;; canary value does not live beyond the end of this sequence.\n (define_insn \"stack_protect_test_<mode>\"\n-  [(set (match_operand:PTR 0 \"register_operand\" \"=r\")\n-\t(unspec:PTR [(match_operand:PTR 1 \"memory_operand\" \"m\")\n-\t\t     (match_operand:PTR 2 \"memory_operand\" \"m\")]\n-\t UNSPEC_SP_TEST))\n+  [(set (reg:CC CC_REGNUM)\n+\t(unspec:CC [(match_operand:PTR 0 \"memory_operand\" \"m\")\n+\t\t    (match_operand:PTR 1 \"memory_operand\" \"m\")]\n+\t\t   UNSPEC_SP_TEST))\n+   (clobber (match_scratch:PTR 2 \"=&r\"))\n    (clobber (match_scratch:PTR 3 \"=&r\"))]\n   \"\"\n-  \"ldr\\t%<w>3, %1\\;ldr\\t%<w>0, %2\\;eor\\t%<w>0, %<w>3, %<w>0\"\n-  [(set_attr \"length\" \"12\")\n+  \"ldr\\t%<w>2, %0\\;ldr\\t%<w>3, %1\\;subs\\t%<w>2, %<w>2, %<w>3\\;mov\\t%3, 0\"\n+  [(set_attr \"length\" \"16\")\n    (set_attr \"type\" \"multiple\")])\n \n ;; Write into the Floating-point Status or Control Register."}, {"sha": "73e83bc413f6db743aab2d7f36f04ec6acdde7f6", "filename": "gcc/testsuite/gcc.target/aarch64/stack-protector-1.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe1a26429038d7cd17abc53f96a6f3e2639b605f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstack-protector-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe1a26429038d7cd17abc53f96a6f3e2639b605f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstack-protector-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstack-protector-1.c?ref=fe1a26429038d7cd17abc53f96a6f3e2639b605f", "patch": "@@ -0,0 +1,89 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target fstack_protector } */\n+/* { dg-options \"-fstack-protector-all -O2\" } */\n+\n+extern volatile long *stack_chk_guard_ptr;\n+\n+volatile long *\n+get_ptr (void)\n+{\n+  return stack_chk_guard_ptr;\n+}\n+\n+void __attribute__ ((noipa))\n+f (void)\n+{\n+  volatile int x;\n+  x = 1;\n+  x += 1;\n+}\n+\n+#define CHECK(REG) \"\\tcmp\\tx0, \" #REG \"\\n\\tbeq\\t1f\\n\"\n+\n+asm (\n+\"\t.pushsection .data\\n\"\n+\"\t.align\t3\\n\"\n+\"\t.globl\tstack_chk_guard_ptr\\n\"\n+\"stack_chk_guard_ptr:\\n\"\n+#if __ILP32__\n+\"\t.word\t__stack_chk_guard\\n\"\n+#else\n+\"\t.xword\t__stack_chk_guard\\n\"\n+#endif\n+\"\t.weak\t__stack_chk_guard\\n\"\n+\"__stack_chk_guard:\\n\"\n+\"\t.word\t0xdead4321\\n\"\n+\"\t.word\t0xbeef8765\\n\"\n+\"\t.text\\n\"\n+\"\t.globl\tmain\\n\"\n+\"\t.type\tmain, %function\\n\"\n+\"main:\\n\"\n+\"\tbl\tget_ptr\\n\"\n+\"\tstr\tx0, [sp, #-16]!\\n\"\n+\"\tbl\tf\\n\"\n+\"\tstr\tx0, [sp, #8]\\n\"\n+\"\tldr\tx0, [sp]\\n\"\n+#if __ILP32__\n+\"\tldr     w0, [x0]\\n\"\n+#else\n+\"\tldr     x0, [x0]\\n\"\n+#endif\n+\tCHECK (x1)\n+\tCHECK (x2)\n+\tCHECK (x3)\n+\tCHECK (x4)\n+\tCHECK (x5)\n+\tCHECK (x6)\n+\tCHECK (x7)\n+\tCHECK (x8)\n+\tCHECK (x9)\n+\tCHECK (x10)\n+\tCHECK (x11)\n+\tCHECK (x12)\n+\tCHECK (x13)\n+\tCHECK (x14)\n+\tCHECK (x15)\n+\tCHECK (x16)\n+\tCHECK (x17)\n+\tCHECK (x18)\n+\tCHECK (x19)\n+\tCHECK (x20)\n+\tCHECK (x21)\n+\tCHECK (x22)\n+\tCHECK (x23)\n+\tCHECK (x24)\n+\tCHECK (x25)\n+\tCHECK (x26)\n+\tCHECK (x27)\n+\tCHECK (x28)\n+\tCHECK (x29)\n+\tCHECK (x30)\n+\"\tldr\tx1, [sp]\\n\"\n+\tCHECK (x1)\n+\"\tmov\tx0, #0\\n\"\n+\"\tb\texit\\n\"\n+\"1:\\n\"\n+\"\tb\tabort\\n\"\n+\"\t.size\tmain, .-main\\n\"\n+\"\t.popsection\"\n+);"}, {"sha": "266c36fdbc6bc242564711318061a511322e3cde", "filename": "gcc/testsuite/gcc.target/aarch64/stack-protector-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe1a26429038d7cd17abc53f96a6f3e2639b605f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstack-protector-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe1a26429038d7cd17abc53f96a6f3e2639b605f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstack-protector-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstack-protector-2.c?ref=fe1a26429038d7cd17abc53f96a6f3e2639b605f", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target fstack_protector } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-options \"-fstack-protector-all -O2 -fpic\" } */\n+\n+#include \"stack-protector-1.c\""}]}