{"sha": "289cbcc7e694ab3ed62011c86f2d43c8ee2e9dd9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg5Y2JjYzdlNjk0YWIzZWQ2MjAxMWM4NmYyZDQzYzhlZTJlOWRkOQ==", "commit": {"author": {"name": "Philip Herron", "email": "phil@nebuloninc.com", "date": "2020-05-16T22:05:19Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T19:13:36Z"}, "message": "Infer types to scope for FunctionParams", "tree": {"sha": "6f86579f21ffefcb739646b2e64af4099e2e6988", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f86579f21ffefcb739646b2e64af4099e2e6988"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/289cbcc7e694ab3ed62011c86f2d43c8ee2e9dd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/289cbcc7e694ab3ed62011c86f2d43c8ee2e9dd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/289cbcc7e694ab3ed62011c86f2d43c8ee2e9dd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/289cbcc7e694ab3ed62011c86f2d43c8ee2e9dd9/comments", "author": null, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "821e1fb4a6ad8d969753524341fbb8bfb59ef4b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/821e1fb4a6ad8d969753524341fbb8bfb59ef4b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/821e1fb4a6ad8d969753524341fbb8bfb59ef4b8"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "a14b64c3931e823c6018bb6c8b426e82796ce74e", "filename": "gcc/rust/analysis/rust-resolution.cc", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289cbcc7e694ab3ed62011c86f2d43c8ee2e9dd9/gcc%2Frust%2Fanalysis%2Frust-resolution.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289cbcc7e694ab3ed62011c86f2d43c8ee2e9dd9/gcc%2Frust%2Fanalysis%2Frust-resolution.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-resolution.cc?ref=289cbcc7e694ab3ed62011c86f2d43c8ee2e9dd9", "patch": "@@ -254,9 +254,7 @@ TypeResolution::visit (AST::ComparisonExpr &expr)\n \n void\n TypeResolution::visit (AST::LazyBooleanExpr &expr)\n-{\n-  printf (\"LazyBooleanExpr: %s\\n\", expr.as_string ().c_str ());\n-}\n+{}\n \n void\n TypeResolution::visit (AST::TypeCastExpr &expr)\n@@ -270,9 +268,7 @@ TypeResolution::visit (AST::AssignmentExpr &expr)\n \n void\n TypeResolution::visit (AST::CompoundAssignmentExpr &expr)\n-{\n-  printf (\"CompoundAssignmentExpr: %s\\n\", expr.as_string ().c_str ());\n-}\n+{}\n \n void\n TypeResolution::visit (AST::GroupedExpr &expr)\n@@ -340,9 +336,13 @@ TypeResolution::visit (AST::EnumExprTuple &expr)\n void\n TypeResolution::visit (AST::EnumExprFieldless &expr)\n {}\n+\n void\n TypeResolution::visit (AST::CallExpr &expr)\n-{}\n+{\n+  printf (\"CallExpr: %s\\n\", expr.as_string ().c_str ());\n+}\n+\n void\n TypeResolution::visit (AST::MethodCallExpr &expr)\n {}\n@@ -481,18 +481,25 @@ TypeResolution::visit (AST::UseDeclaration &use_decl)\n void\n TypeResolution::visit (AST::Function &function)\n {\n+  // always emit the function with return type in the event of nil return type\n+  // its  a marker for a void function\n   scope.Insert (function.function_name, function.return_type.get ());\n \n   scope.Push ();\n-  printf (\"INSIDE FUNCTION: %s\\n\", function.function_name.c_str ());\n-\n   for (auto &param : function.function_params)\n     {\n-      printf (\"FUNC PARAM: %s\\n\", param.as_string ().c_str ());\n-    }\n+      auto before = letPatternBuffer.size ();\n+      param.param_name->accept_vis (*this);\n+      if (letPatternBuffer.size () <= before)\n+\t{\n+\t  rust_error_at (param.locus, \"failed to analyse parameter name\");\n+\t  return;\n+\t}\n \n-  // ensure return types\n-  // TODO\n+      auto paramName = letPatternBuffer.back ();\n+      letPatternBuffer.pop_back ();\n+      scope.Insert (paramName.variable_ident, param.type.get ());\n+    }\n \n   // walk the expression body\n   for (auto &stmt : function.function_body->statements)\n@@ -743,16 +750,12 @@ TypeResolution::visit (AST::LetStmt &stmt)\n void\n TypeResolution::visit (AST::ExprStmtWithoutBlock &stmt)\n {\n-  printf (\"ExprStmtWithoutBlock: %s\\n\", stmt.as_string ().c_str ());\n   stmt.expr->accept_vis (*this);\n }\n \n void\n TypeResolution::visit (AST::ExprStmtWithBlock &stmt)\n-{\n-  printf (\"ExprStmtWithBlock: %s\\n\", stmt.as_string ().c_str ());\n-  stmt.expr->accept_vis (*this);\n-}\n+{}\n \n // rust-type.h\n void"}]}