{"sha": "be59c9322ac42053f9a752fd0748513f27cc1c96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU1OWM5MzIyYWM0MjA1M2Y5YTc1MmZkMDc0ODUxM2YyN2NjMWM5Ng==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2013-02-08T14:10:48Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2013-02-08T14:10:48Z"}, "message": "re PR libstdc++/56216 (TR1 bessel functions bomb at x == 0!)\n\nPR libstdc++/56216\n\nFrom-SVN: r195886", "tree": {"sha": "3ddd81f548c9ee9638fb64c5d99566517a27ffee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ddd81f548c9ee9638fb64c5d99566517a27ffee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be59c9322ac42053f9a752fd0748513f27cc1c96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be59c9322ac42053f9a752fd0748513f27cc1c96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be59c9322ac42053f9a752fd0748513f27cc1c96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be59c9322ac42053f9a752fd0748513f27cc1c96/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ff54464986fd1994754f5cbaa3921628818cc63f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff54464986fd1994754f5cbaa3921628818cc63f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff54464986fd1994754f5cbaa3921628818cc63f"}], "stats": {"total": 308, "additions": 177, "deletions": 131}, "files": [{"sha": "2754cd06397b40c003006678abc19a9d1c88130d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be59c9322ac42053f9a752fd0748513f27cc1c96/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be59c9322ac42053f9a752fd0748513f27cc1c96/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=be59c9322ac42053f9a752fd0748513f27cc1c96", "patch": "@@ -1,3 +1,23 @@\n+2013-02-08  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tPR libstdc++/56216\n+\t* include/tr1/special_function_util.h: Remove spurious const\n+\tfrom numeric arguments.\n+\t* include/tr1/riemann_zeta.tcc: Ditto.\n+\t* include/tr1/exp_integral.tcc: Ditto.\n+\t* include/tr1/bessel_function.tcc: Ditto.\n+\t* include/tr1/hypergeometric.tcc: Ditto.\n+\t* include/tr1/modified_bessel_func.tcc: Ditto.\n+\t* include/tr1/poly_laguerre.tcc: Ditto.\n+\t* include/tr1/gamma.tcc: Ditto.\n+\t* include/tr1/legendre_function.tcc: Ditto.\n+\t* include/tr1/poly_hermite.tcc: Ditto.\n+\t* include/tr1/ell_integral.tcc: Ditto.\n+\t* include/tr1/bessel_function.tcc (__cyl_bessel_ij_series):\n+\tIf argument is zero return function value.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/08_cyl_bessel_i/pr56216.cc:\n+\tNew file.\n+\n 2013-02-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/27_io/basic_ios/pr56193.cc: Tweak."}, {"sha": "6cc152a2d0e35f7f1859cd0ec057f424b2f67869", "filename": "libstdc++-v3/include/tr1/bessel_function.tcc", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be59c9322ac42053f9a752fd0748513f27cc1c96/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbessel_function.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be59c9322ac42053f9a752fd0748513f27cc1c96/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbessel_function.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbessel_function.tcc?ref=be59c9322ac42053f9a752fd0748513f27cc1c96", "patch": "@@ -86,8 +86,8 @@ namespace tr1\n      */\n     template <typename _Tp>\n     void\n-    __gamma_temme(const _Tp __mu,\n-                   _Tp & __gam1, _Tp & __gam2, _Tp & __gampl, _Tp & __gammi)\n+    __gamma_temme(_Tp __mu,\n+                  _Tp & __gam1, _Tp & __gam2, _Tp & __gampl, _Tp & __gammi)\n     {\n #if _GLIBCXX_USE_C99_MATH_TR1\n       __gampl = _Tp(1) / std::tr1::tgamma(_Tp(1) + __mu);\n@@ -124,7 +124,7 @@ namespace tr1\n      */\n     template <typename _Tp>\n     void\n-    __bessel_jn(const _Tp __nu, const _Tp __x,\n+    __bessel_jn(_Tp __nu, _Tp __x,\n                 _Tp & __Jnu, _Tp & __Nnu, _Tp & __Jpnu, _Tp & __Npnu)\n     {\n       if (__x == _Tp(0))\n@@ -349,11 +349,8 @@ namespace tr1\n      */\n     template <typename _Tp>\n     void\n-    __cyl_bessel_jn_asymp(const _Tp __nu, const _Tp __x,\n-                          _Tp & __Jnu, _Tp & __Nnu)\n+    __cyl_bessel_jn_asymp(_Tp __nu, _Tp __x, _Tp & __Jnu, _Tp & __Nnu)\n     {\n-      const _Tp __coef = std::sqrt(_Tp(2)\n-                             / (__numeric_constants<_Tp>::__pi() * __x));\n       const _Tp __mu   = _Tp(4) * __nu * __nu;\n       const _Tp __mum1 = __mu - _Tp(1);\n       const _Tp __mum9 = __mu - _Tp(9);\n@@ -370,6 +367,8 @@ namespace tr1\n       const _Tp __c = std::cos(__chi);\n       const _Tp __s = std::sin(__chi);\n \n+      const _Tp __coef = std::sqrt(_Tp(2)\n+                             / (__numeric_constants<_Tp>::__pi() * __x));\n       __Jnu = __coef * (__c * __P - __s * __Q);\n       __Nnu = __coef * (__s * __P + __c * __Q);\n \n@@ -406,10 +405,18 @@ namespace tr1\n      */\n     template <typename _Tp>\n     _Tp\n-    __cyl_bessel_ij_series(const _Tp __nu, const _Tp __x, const _Tp __sgn,\n-                           const unsigned int __max_iter)\n+    __cyl_bessel_ij_series(_Tp __nu, _Tp __x, _Tp __sgn,\n+                           unsigned int __max_iter)\n     {\n-\n+      if (__x == _Tp(0))\n+\t{\n+          if (__nu == _Tp(0))\n+            return _Tp(1);\n+          else if (__nu == _Tp(1))\n+            return _Tp(0);\n+          else\n+            return _Tp(0);\n+\t}\n       const _Tp __x2 = __x / _Tp(2);\n       _Tp __fact = __nu * std::log(__x2);\n #if _GLIBCXX_USE_C99_MATH_TR1\n@@ -450,7 +457,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __cyl_bessel_j(const _Tp __nu, const _Tp __x)\n+    __cyl_bessel_j(_Tp __nu, _Tp __x)\n     {\n       if (__nu < _Tp(0) || __x < _Tp(0))\n         std::__throw_domain_error(__N(\"Bad argument \"\n@@ -492,7 +499,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __cyl_neumann_n(const _Tp __nu, const _Tp __x)\n+    __cyl_neumann_n(_Tp __nu, _Tp __x)\n     {\n       if (__nu < _Tp(0) || __x < _Tp(0))\n         std::__throw_domain_error(__N(\"Bad argument \"\n@@ -529,7 +536,7 @@ namespace tr1\n      */\n     template <typename _Tp>\n     void\n-    __sph_bessel_jn(const unsigned int __n, const _Tp __x,\n+    __sph_bessel_jn(unsigned int __n, _Tp __x,\n                     _Tp & __j_n, _Tp & __n_n, _Tp & __jp_n, _Tp & __np_n)\n     {\n       const _Tp __nu = _Tp(__n) + _Tp(0.5L);\n@@ -564,7 +571,7 @@ namespace tr1\n      */\n     template <typename _Tp>\n     _Tp\n-    __sph_bessel(const unsigned int __n, const _Tp __x)\n+    __sph_bessel(unsigned int __n, _Tp __x)\n     {\n       if (__x < _Tp(0))\n         std::__throw_domain_error(__N(\"Bad argument \"\n@@ -602,7 +609,7 @@ namespace tr1\n      */\n     template <typename _Tp>\n     _Tp\n-    __sph_neumann(const unsigned int __n, const _Tp __x)\n+    __sph_neumann(unsigned int __n, _Tp __x)\n     {\n       if (__x < _Tp(0))\n         std::__throw_domain_error(__N(\"Bad argument \""}, {"sha": "b53076b02815e373e28ac1916881cf05f42bb254", "filename": "libstdc++-v3/include/tr1/ell_integral.tcc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be59c9322ac42053f9a752fd0748513f27cc1c96/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fell_integral.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be59c9322ac42053f9a752fd0748513f27cc1c96/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fell_integral.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fell_integral.tcc?ref=be59c9322ac42053f9a752fd0748513f27cc1c96", "patch": "@@ -70,7 +70,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __ellint_rf(const _Tp __x, const _Tp __y, const _Tp __z)\n+    __ellint_rf(_Tp __x, _Tp __y, _Tp __z)\n     {\n       const _Tp __min = std::numeric_limits<_Tp>::min();\n       const _Tp __max = std::numeric_limits<_Tp>::max();\n@@ -149,7 +149,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __comp_ellint_1_series(const _Tp __k)\n+    __comp_ellint_1_series(_Tp __k)\n     {\n \n       const _Tp __kk = __k * __k;\n@@ -187,7 +187,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __comp_ellint_1(const _Tp __k)\n+    __comp_ellint_1(_Tp __k)\n     {\n \n       if (__isnan(__k))\n@@ -215,7 +215,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __ellint_1(const _Tp __k, const _Tp __phi)\n+    __ellint_1(_Tp __k, _Tp __phi)\n     {\n \n       if (__isnan(__k) || __isnan(__phi))\n@@ -262,7 +262,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __comp_ellint_2_series(const _Tp __k)\n+    __comp_ellint_2_series(_Tp __k)\n     {\n \n       const _Tp __kk = __k * __k;\n@@ -310,7 +310,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __ellint_rd(const _Tp __x, const _Tp __y, const _Tp __z)\n+    __ellint_rd(_Tp __x, _Tp __y, _Tp __z)\n     {\n       const _Tp __eps = std::numeric_limits<_Tp>::epsilon();\n       const _Tp __errtol = std::pow(__eps / _Tp(8), _Tp(1) / _Tp(6));\n@@ -398,7 +398,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __comp_ellint_2(const _Tp __k)\n+    __comp_ellint_2(_Tp __k)\n     {\n \n       if (__isnan(__k))\n@@ -432,7 +432,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __ellint_2(const _Tp __k, const _Tp __phi)\n+    __ellint_2(_Tp __k, _Tp __phi)\n     {\n \n       if (__isnan(__k) || __isnan(__phi))\n@@ -491,7 +491,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __ellint_rc(const _Tp __x, const _Tp __y)\n+    __ellint_rc(_Tp __x, _Tp __y)\n     {\n       const _Tp __min = std::numeric_limits<_Tp>::min();\n       const _Tp __max = std::numeric_limits<_Tp>::max();\n@@ -562,7 +562,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __ellint_rj(const _Tp __x, const _Tp __y, const _Tp __z, const _Tp __p)\n+    __ellint_rj(_Tp __x, _Tp __y, _Tp __z, _Tp __p)\n     {\n       const _Tp __min = std::numeric_limits<_Tp>::min();\n       const _Tp __max = std::numeric_limits<_Tp>::max();\n@@ -666,7 +666,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __comp_ellint_3(const _Tp __k, const _Tp __nu)\n+    __comp_ellint_3(_Tp __k, _Tp __nu)\n     {\n \n       if (__isnan(__k) || __isnan(__nu))\n@@ -706,7 +706,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __ellint_3(const _Tp __k, const _Tp __nu, const _Tp __phi)\n+    __ellint_3(_Tp __k, _Tp __nu, _Tp __phi)\n     {\n \n       if (__isnan(__k) || __isnan(__nu) || __isnan(__phi))"}, {"sha": "86c03a6ddc9f9826640497ca8e1a530eec122881", "filename": "libstdc++-v3/include/tr1/exp_integral.tcc", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be59c9322ac42053f9a752fd0748513f27cc1c96/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fexp_integral.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be59c9322ac42053f9a752fd0748513f27cc1c96/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fexp_integral.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fexp_integral.tcc?ref=be59c9322ac42053f9a752fd0748513f27cc1c96", "patch": "@@ -58,7 +58,7 @@ namespace tr1\n   {\n   _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-    template<typename _Tp> _Tp __expint_E1(const _Tp);\n+    template<typename _Tp> _Tp __expint_E1(_Tp);\n \n     /**\n      *   @brief Return the exponential integral @f$ E_1(x) @f$\n@@ -75,7 +75,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __expint_E1_series(const _Tp __x)\n+    __expint_E1_series(_Tp __x)\n     {\n       const _Tp __eps = std::numeric_limits<_Tp>::epsilon();\n       _Tp __term = _Tp(1);\n@@ -112,7 +112,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __expint_E1_asymp(const _Tp __x)\n+    __expint_E1_asymp(_Tp __x)\n     {\n       _Tp __term = _Tp(1);\n       _Tp __esum = _Tp(1);\n@@ -149,7 +149,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __expint_En_series(const unsigned int __n, const _Tp __x)\n+    __expint_En_series(unsigned int __n, _Tp __x)\n     {\n       const unsigned int __max_iter = 100;\n       const _Tp __eps = std::numeric_limits<_Tp>::epsilon();\n@@ -195,7 +195,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __expint_En_cont_frac(const unsigned int __n, const _Tp __x)\n+    __expint_En_cont_frac(unsigned int __n, _Tp __x)\n     {\n       const unsigned int __max_iter = 100;\n       const _Tp __eps = std::numeric_limits<_Tp>::epsilon();\n@@ -240,7 +240,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __expint_En_recursion(const unsigned int __n, const _Tp __x)\n+    __expint_En_recursion(unsigned int __n, _Tp __x)\n     {\n       _Tp __En;\n       _Tp __E1 = __expint_E1(__x);\n@@ -284,7 +284,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __expint_Ei_series(const _Tp __x)\n+    __expint_Ei_series(_Tp __x)\n     {\n       _Tp __term = _Tp(1);\n       _Tp __sum = _Tp(0);\n@@ -315,7 +315,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __expint_Ei_asymp(const _Tp __x)\n+    __expint_Ei_asymp(_Tp __x)\n     {\n       _Tp __term = _Tp(1);\n       _Tp __sum = _Tp(1);\n@@ -348,7 +348,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __expint_Ei(const _Tp __x)\n+    __expint_Ei(_Tp __x)\n     {\n       if (__x < _Tp(0))\n         return -__expint_E1(-__x);\n@@ -372,7 +372,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __expint_E1(const _Tp __x)\n+    __expint_E1(_Tp __x)\n     {\n       if (__x < _Tp(0))\n         return -__expint_Ei(-__x);\n@@ -402,7 +402,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __expint_asymp(const unsigned int __n, const _Tp __x)\n+    __expint_asymp(unsigned int __n, _Tp __x)\n     {\n       _Tp __term = _Tp(1);\n       _Tp __sum = _Tp(1);\n@@ -436,7 +436,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __expint_large_n(const unsigned int __n, const _Tp __x)\n+    __expint_large_n(unsigned int __n, _Tp __x)\n     {\n       const _Tp __xpn = __x + __n;\n       const _Tp __xpn2 = __xpn * __xpn;\n@@ -470,7 +470,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __expint(const unsigned int __n, const _Tp __x)\n+    __expint(unsigned int __n, _Tp __x)\n     {\n       //  Return NaN on NaN input.\n       if (__isnan(__x))\n@@ -510,7 +510,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     inline _Tp\n-    __expint(const _Tp __x)\n+    __expint(_Tp __x)\n     {\n       if (__isnan(__x))\n         return std::numeric_limits<_Tp>::quiet_NaN();"}, {"sha": "7ec19a3ed38342685e93b10ff4b5ed5a12374210", "filename": "libstdc++-v3/include/tr1/gamma.tcc", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be59c9322ac42053f9a752fd0748513f27cc1c96/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fgamma.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be59c9322ac42053f9a752fd0748513f27cc1c96/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fgamma.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fgamma.tcc?ref=be59c9322ac42053f9a752fd0748513f27cc1c96", "patch": "@@ -67,7 +67,8 @@ namespace tr1\n      *   @return  The Bernoulli number of order n.\n      */\n     template <typename _Tp>\n-    _Tp __bernoulli_series(unsigned int __n)\n+    _Tp\n+    __bernoulli_series(unsigned int __n)\n     {\n \n       static const _Tp __num[28] = {\n@@ -130,10 +131,8 @@ namespace tr1\n      */\n     template<typename _Tp>\n     inline _Tp\n-    __bernoulli(const int __n)\n-    {\n-      return __bernoulli_series<_Tp>(__n);\n-    }\n+    __bernoulli(int __n)\n+    { return __bernoulli_series<_Tp>(__n); }\n \n \n     /**\n@@ -146,7 +145,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __log_gamma_bernoulli(const _Tp __x)\n+    __log_gamma_bernoulli(_Tp __x)\n     {\n       _Tp __lg = (__x - _Tp(0.5L)) * std::log(__x) - __x\n                + _Tp(0.5L) * std::log(_Tp(2)\n@@ -174,7 +173,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __log_gamma_lanczos(const _Tp __x)\n+    __log_gamma_lanczos(_Tp __x)\n     {\n       const _Tp __xm1 = __x - _Tp(1);\n \n@@ -218,7 +217,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __log_gamma(const _Tp __x)\n+    __log_gamma(_Tp __x)\n     {\n       if (__x > _Tp(0.5L))\n         return __log_gamma_lanczos(__x);\n@@ -245,7 +244,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __log_gamma_sign(const _Tp __x)\n+    __log_gamma_sign(_Tp __x)\n     {\n       if (__x > _Tp(0))\n         return _Tp(1);\n@@ -276,7 +275,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __log_bincoef(const unsigned int __n, const unsigned int __k)\n+    __log_bincoef(unsigned int __n, unsigned int __k)\n     {\n       //  Max e exponent before overflow.\n       static const _Tp __max_bincoeff\n@@ -307,7 +306,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __bincoef(const unsigned int __n, const unsigned int __k)\n+    __bincoef(unsigned int __n, unsigned int __k)\n     {\n       //  Max e exponent before overflow.\n       static const _Tp __max_bincoeff\n@@ -330,10 +329,8 @@ namespace tr1\n      */\n     template<typename _Tp>\n     inline _Tp\n-    __gamma(const _Tp __x)\n-    {\n-      return std::exp(__log_gamma(__x));\n-    }\n+    __gamma(_Tp __x)\n+    { return std::exp(__log_gamma(__x)); }\n \n \n     /**\n@@ -351,7 +348,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __psi_series(const _Tp __x)\n+    __psi_series(_Tp __x)\n     {\n       _Tp __sum = -__numeric_constants<_Tp>::__gamma_e() - _Tp(1) / __x;\n       const unsigned int __max_iter = 100000;\n@@ -381,7 +378,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __psi_asymp(const _Tp __x)\n+    __psi_asymp(_Tp __x)\n     {\n       _Tp __sum = std::log(__x) - _Tp(0.5L) / __x;\n       const _Tp __xx = __x * __x;\n@@ -412,7 +409,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __psi(const _Tp __x)\n+    __psi(_Tp __x)\n     {\n       const int __n = static_cast<int>(__x + 0.5L);\n       const _Tp __eps = _Tp(4) * std::numeric_limits<_Tp>::epsilon();\n@@ -441,7 +438,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __psi(const unsigned int __n, const _Tp __x)\n+    __psi(unsigned int __n, _Tp __x)\n     {\n       if (__x <= _Tp(0))\n         std::__throw_domain_error(__N(\"Argument out of range \""}, {"sha": "14f7258ac4b974326dd81e2aba6954c05e4007a5", "filename": "libstdc++-v3/include/tr1/hypergeometric.tcc", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be59c9322ac42053f9a752fd0748513f27cc1c96/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhypergeometric.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be59c9322ac42053f9a752fd0748513f27cc1c96/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhypergeometric.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhypergeometric.tcc?ref=be59c9322ac42053f9a752fd0748513f27cc1c96", "patch": "@@ -75,7 +75,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __conf_hyperg_series(const _Tp __a, const _Tp __c, const _Tp __x)\n+    __conf_hyperg_series(_Tp __a, _Tp __c, _Tp __x)\n     {\n       const _Tp __eps = std::numeric_limits<_Tp>::epsilon();\n \n@@ -112,7 +112,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __conf_hyperg_luke(const _Tp __a, const _Tp __c, const _Tp __xin)\n+    __conf_hyperg_luke(_Tp __a, _Tp __c, _Tp __xin)\n     {\n       const _Tp __big = std::pow(std::numeric_limits<_Tp>::max(), _Tp(0.16L));\n       const int __nmax = 20000;\n@@ -218,8 +218,8 @@ namespace tr1\n      *   @return  The confluent hypergeometric function.\n      */\n     template<typename _Tp>\n-    inline _Tp\n-    __conf_hyperg(const _Tp __a, const _Tp __c, const _Tp __x)\n+    _Tp\n+    __conf_hyperg(_Tp __a, _Tp __c, _Tp __x)\n     {\n #if _GLIBCXX_USE_C99_MATH_TR1\n       const _Tp __c_nint = std::tr1::nearbyint(__c);\n@@ -263,8 +263,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __hyperg_series(const _Tp __a, const _Tp __b,\n-                    const _Tp __c, const _Tp __x)\n+    __hyperg_series(_Tp __a, _Tp __b, _Tp __c, _Tp __x)\n     {\n       const _Tp __eps = std::numeric_limits<_Tp>::epsilon();\n \n@@ -297,8 +296,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __hyperg_luke(const _Tp __a, const _Tp __b, const _Tp __c,\n-                  const _Tp __xin)\n+    __hyperg_luke(_Tp __a, _Tp __b, _Tp __c, _Tp __xin)\n     {\n       const _Tp __big = std::pow(std::numeric_limits<_Tp>::max(), _Tp(0.16L));\n       const int __nmax = 20000;\n@@ -432,8 +430,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __hyperg_reflect(const _Tp __a, const _Tp __b, const _Tp __c,\n-                     const _Tp __x)\n+    __hyperg_reflect(_Tp __a, _Tp __b, _Tp __c, _Tp __x)\n     {\n       const _Tp __d = __c - __a - __b;\n       const int __intd  = std::floor(__d + _Tp(0.5L));\n@@ -722,8 +719,8 @@ namespace tr1\n      *   @return  The confluent hypergeometric function.\n      */\n     template<typename _Tp>\n-    inline _Tp\n-    __hyperg(const _Tp __a, const _Tp __b, const _Tp __c, const _Tp __x)\n+    _Tp\n+    __hyperg(_Tp __a, _Tp __b, _Tp __c, _Tp __x)\n     {\n #if _GLIBCXX_USE_C99_MATH_TR1\n       const _Tp __a_nint = std::tr1::nearbyint(__a);"}, {"sha": "bfecf00af591c40c2e97768fc0c16423ff6af20f", "filename": "libstdc++-v3/include/tr1/legendre_function.tcc", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be59c9322ac42053f9a752fd0748513f27cc1c96/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Flegendre_function.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be59c9322ac42053f9a752fd0748513f27cc1c96/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Flegendre_function.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Flegendre_function.tcc?ref=be59c9322ac42053f9a752fd0748513f27cc1c96", "patch": "@@ -72,7 +72,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __poly_legendre_p(const unsigned int __l, const _Tp __x)\n+    __poly_legendre_p(unsigned int __l, _Tp __x)\n     {\n \n       if ((__x < _Tp(-1)) || (__x > _Tp(+1)))\n@@ -129,8 +129,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __assoc_legendre_p(const unsigned int __l, const unsigned int __m,\n-                       const _Tp __x)\n+    __assoc_legendre_p(unsigned int __l, unsigned int __m, _Tp __x)\n     {\n \n       if (__x < _Tp(-1) || __x > _Tp(+1))\n@@ -209,8 +208,7 @@ namespace tr1\n      */\n     template <typename _Tp>\n     _Tp\n-    __sph_legendre(const unsigned int __l, const unsigned int __m,\n-                   const _Tp __theta)\n+    __sph_legendre(unsigned int __l, unsigned int __m, _Tp __theta)\n     {\n       if (__isnan(__theta))\n         return std::numeric_limits<_Tp>::quiet_NaN();"}, {"sha": "3d1fb904a038fd5217c9fd67f509783129fc6792", "filename": "libstdc++-v3/include/tr1/modified_bessel_func.tcc", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be59c9322ac42053f9a752fd0748513f27cc1c96/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmodified_bessel_func.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be59c9322ac42053f9a752fd0748513f27cc1c96/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmodified_bessel_func.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmodified_bessel_func.tcc?ref=be59c9322ac42053f9a752fd0748513f27cc1c96", "patch": "@@ -77,7 +77,7 @@ namespace tr1\n      */\n     template <typename _Tp>\n     void\n-    __bessel_ik(const _Tp __nu, const _Tp __x,\n+    __bessel_ik(_Tp __nu, _Tp __x,\n                 _Tp & __Inu, _Tp & __Knu, _Tp & __Ipnu, _Tp & __Kpnu)\n     {\n       if (__x == _Tp(0))\n@@ -132,7 +132,7 @@ namespace tr1\n         }\n       if (__i > __max_iter)\n         std::__throw_runtime_error(__N(\"Argument x too large \"\n-                                       \"in __bessel_jn; \"\n+                                       \"in __bessel_ik; \"\n                                        \"try asymptotic expansion.\"));\n       _Tp __Inul = __fp_min;\n       _Tp __Ipnul = __h * __Inul;\n@@ -185,7 +185,7 @@ namespace tr1\n             }\n           if (__i > __max_iter)\n             std::__throw_runtime_error(__N(\"Bessel k series failed to converge \"\n-                                           \"in __bessel_jn.\"));\n+                                           \"in __bessel_ik.\"));\n           __Kmu = __sum;\n           __Knu1 = __sum1 * __xi2;\n         }\n@@ -221,7 +221,7 @@ namespace tr1\n             }\n           if (__i > __max_iter)\n             std::__throw_runtime_error(__N(\"Steed's method failed \"\n-                                           \"in __bessel_jn.\"));\n+                                           \"in __bessel_ik.\"));\n           __h = __a1 * __h;\n           __Kmu = std::sqrt(__numeric_constants<_Tp>::__pi() / (_Tp(2) * __x))\n                 * std::exp(-__x) / __s;\n@@ -261,7 +261,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __cyl_bessel_i(const _Tp __nu, const _Tp __x)\n+    __cyl_bessel_i(_Tp __nu, _Tp __x)\n     {\n       if (__nu < _Tp(0) || __x < _Tp(0))\n         std::__throw_domain_error(__N(\"Bad argument \"\n@@ -297,7 +297,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __cyl_bessel_k(const _Tp __nu, const _Tp __x)\n+    __cyl_bessel_k(_Tp __nu, _Tp __x)\n     {\n       if (__nu < _Tp(0) || __x < _Tp(0))\n         std::__throw_domain_error(__N(\"Bad argument \"\n@@ -331,7 +331,7 @@ namespace tr1\n      */\n     template <typename _Tp>\n     void\n-    __sph_bessel_ik(const unsigned int __n, const _Tp __x,\n+    __sph_bessel_ik(unsigned int __n, _Tp __x,\n                     _Tp & __i_n, _Tp & __k_n, _Tp & __ip_n, _Tp & __kp_n)\n     {\n       const _Tp __nu = _Tp(__n) + _Tp(0.5L);\n@@ -366,8 +366,7 @@ namespace tr1\n      */\n     template <typename _Tp>\n     void\n-    __airy(const _Tp __x,\n-           _Tp & __Ai, _Tp & __Bi, _Tp & __Aip, _Tp & __Bip)\n+    __airy(_Tp __x, _Tp & __Ai, _Tp & __Bi, _Tp & __Aip, _Tp & __Bip)\n     {\n       const _Tp __absx = std::abs(__x);\n       const _Tp __rootx = std::sqrt(__absx);"}, {"sha": "1f05f79dd9102718a0124acfc90d2e23f233b6c6", "filename": "libstdc++-v3/include/tr1/poly_hermite.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be59c9322ac42053f9a752fd0748513f27cc1c96/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fpoly_hermite.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be59c9322ac42053f9a752fd0748513f27cc1c96/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fpoly_hermite.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fpoly_hermite.tcc?ref=be59c9322ac42053f9a752fd0748513f27cc1c96", "patch": "@@ -66,7 +66,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __poly_hermite_recursion(const unsigned int __n, const _Tp __x)\n+    __poly_hermite_recursion(unsigned int __n, _Tp __x)\n     {\n       //  Compute H_0.\n       _Tp __H_0 = 1;\n@@ -108,7 +108,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     inline _Tp\n-    __poly_hermite(const unsigned int __n, const _Tp __x)\n+    __poly_hermite(unsigned int __n, _Tp __x)\n     {\n       if (__isnan(__x))\n         return std::numeric_limits<_Tp>::quiet_NaN();"}, {"sha": "99d4a153984e3c0e123f121ceb3891ae73646362", "filename": "libstdc++-v3/include/tr1/poly_laguerre.tcc", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be59c9322ac42053f9a752fd0748513f27cc1c96/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fpoly_laguerre.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be59c9322ac42053f9a752fd0748513f27cc1c96/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fpoly_laguerre.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fpoly_laguerre.tcc?ref=be59c9322ac42053f9a752fd0748513f27cc1c96", "patch": "@@ -67,8 +67,7 @@ namespace tr1\n      */\n     template<typename _Tpa, typename _Tp>\n     _Tp\n-    __poly_laguerre_large_n(const unsigned __n, const _Tpa __alpha1,\n-                            const _Tp __x)\n+    __poly_laguerre_large_n(unsigned __n, _Tpa __alpha1, _Tp __x)\n     {\n       const _Tp __a = -_Tp(__n);\n       const _Tp __b = _Tp(__alpha1) + _Tp(1);\n@@ -122,8 +121,7 @@ namespace tr1\n      */\n     template<typename _Tpa, typename _Tp>\n     _Tp\n-    __poly_laguerre_hyperg(const unsigned int __n, const _Tpa __alpha1,\n-\t\t\t   const _Tp __x)\n+    __poly_laguerre_hyperg(unsigned int __n, _Tpa __alpha1, _Tp __x)\n     {\n       const _Tp __b = _Tp(__alpha1) + _Tp(1);\n       const _Tp __mx = -__x;\n@@ -179,8 +177,7 @@ namespace tr1\n      */\n     template<typename _Tpa, typename _Tp>\n     _Tp\n-    __poly_laguerre_recursion(const unsigned int __n,\n-                              const _Tpa __alpha1, const _Tp __x)\n+    __poly_laguerre_recursion(unsigned int __n, _Tpa __alpha1, _Tp __x)\n     {\n       //   Compute l_0.\n       _Tp __l_0 = _Tp(1);\n@@ -238,9 +235,8 @@ namespace tr1\n      *           degree @f$ \\alpha @f$, and argument x.\n      */\n     template<typename _Tpa, typename _Tp>\n-    inline _Tp\n-    __poly_laguerre(const unsigned int __n, const _Tpa __alpha1,\n-                    const _Tp __x)\n+    _Tp\n+    __poly_laguerre(unsigned int __n, _Tpa __alpha1, _Tp __x)\n     {\n       if (__x < _Tp(0))\n         std::__throw_domain_error(__N(\"Negative argument \"\n@@ -292,11 +288,8 @@ namespace tr1\n      */\n     template<typename _Tp>\n     inline _Tp\n-    __assoc_laguerre(const unsigned int __n, const unsigned int __m,\n-                     const _Tp __x)\n-    {\n-      return __poly_laguerre<unsigned int, _Tp>(__n, __m, __x);\n-    }\n+    __assoc_laguerre(unsigned int __n, unsigned int __m, _Tp __x)\n+    { return __poly_laguerre<unsigned int, _Tp>(__n, __m, __x); }\n \n \n     /**\n@@ -315,10 +308,8 @@ namespace tr1\n      */\n     template<typename _Tp>\n     inline _Tp\n-    __laguerre(const unsigned int __n, const _Tp __x)\n-    {\n-      return __poly_laguerre<unsigned int, _Tp>(__n, 0, __x);\n-    }\n+    __laguerre(unsigned int __n, _Tp __x)\n+    { return __poly_laguerre<unsigned int, _Tp>(__n, 0, __x); }\n \n   _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace std::tr1::__detail"}, {"sha": "4023204c543d934b1dd3fdd3a9880bee43d32ab0", "filename": "libstdc++-v3/include/tr1/riemann_zeta.tcc", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be59c9322ac42053f9a752fd0748513f27cc1c96/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Friemann_zeta.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be59c9322ac42053f9a752fd0748513f27cc1c96/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Friemann_zeta.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Friemann_zeta.tcc?ref=be59c9322ac42053f9a752fd0748513f27cc1c96", "patch": "@@ -70,7 +70,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __riemann_zeta_sum(const _Tp __s)\n+    __riemann_zeta_sum(_Tp __s)\n     {\n       //  A user shouldn't get to this.\n       if (__s < _Tp(1))\n@@ -107,7 +107,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __riemann_zeta_alt(const _Tp __s)\n+    __riemann_zeta_alt(_Tp __s)\n     {\n       _Tp __sgn = _Tp(1);\n       _Tp __zeta = _Tp(0);\n@@ -149,7 +149,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __riemann_zeta_glob(const _Tp __s)\n+    __riemann_zeta_glob(_Tp __s)\n     {\n       _Tp __zeta = _Tp(0);\n \n@@ -244,7 +244,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __riemann_zeta_product(const _Tp __s)\n+    __riemann_zeta_product(_Tp __s)\n     {\n       static const _Tp __prime[] = {\n         _Tp(2), _Tp(3), _Tp(5), _Tp(7), _Tp(11), _Tp(13), _Tp(17), _Tp(19),\n@@ -285,7 +285,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __riemann_zeta(const _Tp __s)\n+    __riemann_zeta(_Tp __s)\n     {\n       if (__isnan(__s))\n         return std::numeric_limits<_Tp>::quiet_NaN();\n@@ -357,7 +357,7 @@ namespace tr1\n      */\n     template<typename _Tp>\n     _Tp\n-    __hurwitz_zeta_glob(const _Tp __a, const _Tp __s)\n+    __hurwitz_zeta_glob(_Tp __a, _Tp __s)\n     {\n       _Tp __zeta = _Tp(0);\n \n@@ -422,10 +422,8 @@ namespace tr1\n      */\n     template<typename _Tp>\n     inline _Tp\n-    __hurwitz_zeta(const _Tp __a, const _Tp __s)\n-    {\n-      return __hurwitz_zeta_glob(__a, __s);\n-    }\n+    __hurwitz_zeta(_Tp __a, _Tp __s)\n+    { return __hurwitz_zeta_glob(__a, __s); }\n \n   _GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace std::tr1::__detail"}, {"sha": "abec0506c01ca4ab03b61440ea004c07879a6fd1", "filename": "libstdc++-v3/include/tr1/special_function_util.h", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be59c9322ac42053f9a752fd0748513f27cc1c96/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fspecial_function_util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be59c9322ac42053f9a752fd0748513f27cc1c96/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fspecial_function_util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fspecial_function_util.h?ref=be59c9322ac42053f9a752fd0748513f27cc1c96", "patch": "@@ -107,30 +107,22 @@ namespace tr1\n     /// out of intrinsics, this will disappear completely in favor of\n     /// std::isnan.\n     template<typename _Tp>\n-    inline bool __isnan(const _Tp __x)\n-    {\n-      return std::isnan(__x);\n-    }\n+    inline bool __isnan(_Tp __x)\n+    { return std::isnan(__x); }\n \n #else\n \n     template<typename _Tp>\n     inline bool __isnan(const _Tp __x)\n-    {\n-      return __builtin_isnan(__x);\n-    }\n+    { return __builtin_isnan(__x); }\n \n     template<>\n-    inline bool __isnan<float>(const float __x)\n-    {\n-      return __builtin_isnanf(__x);\n-    }\n+    inline bool __isnan<float>(float __x)\n+    { return __builtin_isnanf(__x); }\n \n     template<>\n-    inline bool __isnan<long double>(const long double __x)\n-    {\n-      return __builtin_isnanl(__x);\n-    }\n+    inline bool __isnan<long double>(long double __x)\n+    { return __builtin_isnanl(__x); }\n \n #endif\n "}, {"sha": "41afe5e37f6e1037baf5858c55442dd67a1f79eb", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/08_cyl_bessel_i/pr56216.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be59c9322ac42053f9a752fd0748513f27cc1c96/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F08_cyl_bessel_i%2Fpr56216.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be59c9322ac42053f9a752fd0748513f27cc1c96/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F08_cyl_bessel_i%2Fpr56216.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F08_cyl_bessel_i%2Fpr56216.cc?ref=be59c9322ac42053f9a752fd0748513f27cc1c96", "patch": "@@ -0,0 +1,47 @@\n+// 2013-02-08  Edward Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// PR libstdc++/56216 - Crash of Bessel functions at x==0!\n+\n+#include <testsuite_hooks.h>\n+#include <tr1/cmath>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  double j0 = std::tr1::cyl_bessel_j(0.0, 0.0);\n+  double i0 = std::tr1::cyl_bessel_i(0.0, 0.0);\n+  double j1 = std::tr1::cyl_bessel_j(1.0, 0.0);\n+  double i1 = std::tr1::cyl_bessel_i(1.0, 0.0);\n+\n+  VERIFY(j0 == 1.0);\n+  VERIFY(i0 == 1.0);\n+  VERIFY(j1 == 0.0);\n+  VERIFY(i1 == 0.0);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}]}