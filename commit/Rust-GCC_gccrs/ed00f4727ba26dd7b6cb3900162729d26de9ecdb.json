{"sha": "ed00f4727ba26dd7b6cb3900162729d26de9ecdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQwMGY0NzI3YmEyNmRkN2I2Y2IzOTAwMTYyNzI5ZDI2ZGU5ZWNkYg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2010-10-22T14:35:39Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-22T14:35:39Z"}, "message": "sem_case.adb, [...] (Bad_Predicated_Subtype_Use): Change order of parameters.\n\n2010-10-22  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_case.adb, sem_attr.adb (Bad_Predicated_Subtype_Use): Change order\n\tof parameters.\n\t* sem_ch13.adb (Build_Predicate_Function): Don't give inheritance\n\tmessages for generic actual subtypes.\n\t* sem_ch9.adb, sem_res.adb, sem_util.adb, sem_util.ads, sem_ch3.adb\n\t(Bad_Predicated_Subtype_Use): Use this procedure.\n\n2010-10-22  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch5.adb: Minor reformatting.\n\nFrom-SVN: r165829", "tree": {"sha": "543f7fc783f28c3700cd9065fc47d897e556b695", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/543f7fc783f28c3700cd9065fc47d897e556b695"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed00f4727ba26dd7b6cb3900162729d26de9ecdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed00f4727ba26dd7b6cb3900162729d26de9ecdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed00f4727ba26dd7b6cb3900162729d26de9ecdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed00f4727ba26dd7b6cb3900162729d26de9ecdb/comments", "author": null, "committer": null, "parents": [{"sha": "86200f6646bd6f79ce534253da034238ebbf5e10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86200f6646bd6f79ce534253da034238ebbf5e10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86200f6646bd6f79ce534253da034238ebbf5e10"}], "stats": {"total": 439, "additions": 228, "deletions": 211}, "files": [{"sha": "79b81ca3d2c1bce1b94332e9d9cdbfd1a9787664", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed00f4727ba26dd7b6cb3900162729d26de9ecdb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed00f4727ba26dd7b6cb3900162729d26de9ecdb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ed00f4727ba26dd7b6cb3900162729d26de9ecdb", "patch": "@@ -1,3 +1,16 @@\n+2010-10-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_case.adb, sem_attr.adb (Bad_Predicated_Subtype_Use): Change order\n+\tof parameters.\n+\t* sem_ch13.adb (Build_Predicate_Function): Don't give inheritance\n+\tmessages for generic actual subtypes.\n+\t* sem_ch9.adb, sem_res.adb, sem_util.adb, sem_util.ads, sem_ch3.adb\n+\t(Bad_Predicated_Subtype_Use): Use this procedure.\n+\n+2010-10-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch5.adb: Minor reformatting.\n+\n 2010-10-22  Robert Dewar  <dewar@adacore.com>\n \n \t* a-except-2005.adb (Rmsg_18): New message text."}, {"sha": "6b3be0fc5e464f73f1a25d38cfe97554b3f3d05d", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed00f4727ba26dd7b6cb3900162729d26de9ecdb/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed00f4727ba26dd7b6cb3900162729d26de9ecdb/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=ed00f4727ba26dd7b6cb3900162729d26de9ecdb", "patch": "@@ -842,7 +842,7 @@ package body Sem_Attr is\n          if Comes_From_Source (N) then\n             Error_Msg_Name_1 := Aname;\n             Bad_Predicated_Subtype_Use\n-              (P_Type, N, \"type& has predicates, attribute % not allowed\");\n+              (\"type& has predicates, attribute % not allowed\", N, P_Type);\n          end if;\n       end Bad_Attribute_For_Predicate;\n "}, {"sha": "10781c917bec66d458beb03e99d8dd57f2d15292", "filename": "gcc/ada/sem_case.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed00f4727ba26dd7b6cb3900162729d26de9ecdb/gcc%2Fada%2Fsem_case.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed00f4727ba26dd7b6cb3900162729d26de9ecdb/gcc%2Fada%2Fsem_case.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_case.adb?ref=ed00f4727ba26dd7b6cb3900162729d26de9ecdb", "patch": "@@ -866,9 +866,8 @@ package body Sem_Case is\n                              or else No (Static_Predicate (E))\n                            then\n                               Bad_Predicated_Subtype_Use\n-                                (E, N,\n-                                 \"cannot use subtype&  with non-static \"\n-                                 & \"predicate as case alternative\");\n+                                (\"cannot use subtype&  with non-static \"\n+                                 & \"predicate as case alternative\", N, E);\n \n                               --  Static predicate case\n "}, {"sha": "ec6212e309bf455b12dc48f05212a2b8ce1a3781", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed00f4727ba26dd7b6cb3900162729d26de9ecdb/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed00f4727ba26dd7b6cb3900162729d26de9ecdb/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=ed00f4727ba26dd7b6cb3900162729d26de9ecdb", "patch": "@@ -3888,9 +3888,13 @@ package body Sem_Ch13 is\n                    Right_Opnd => Exp);\n             end if;\n \n-            --  Output info message on inheritance if required\n+            --  Output info message on inheritance if required. Note we do not\n+            --  give this information for generic actual types, since it is\n+            --  unwelcome noise in that case in instantiations.\n \n-            if Opt.List_Inherited_Aspects then\n+            if Opt.List_Inherited_Aspects\n+              and then not Is_Generic_Actual_Type (Typ)\n+            then\n                Error_Msg_Sloc := Sloc (Predicate_Function (T));\n                Error_Msg_Node_2 := T;\n                Error_Msg_N (\"?info: & inherits predicate from & #\", Typ);\n@@ -4087,9 +4091,10 @@ package body Sem_Ch13 is\n \n             function Hi_Val (N : Node_Id) return Uint is\n             begin\n-               if Nkind (N) = N_Identifier then\n+               if Is_Static_Expression (N) then\n                   return Expr_Value (N);\n                else\n+                  pragma Assert (Nkind (N) = N_Range);\n                   return Expr_Value (High_Bound (N));\n                end if;\n             end Hi_Val;\n@@ -4100,9 +4105,10 @@ package body Sem_Ch13 is\n \n             function Lo_Val (N : Node_Id) return Uint is\n             begin\n-               if Nkind (N) = N_Identifier then\n+               if Is_Static_Expression (N) then\n                   return Expr_Value (N);\n                else\n+                  pragma Assert (Nkind (N) = N_Range);\n                   return Expr_Value (Low_Bound (N));\n                end if;\n             end Lo_Val;\n@@ -4124,19 +4130,19 @@ package body Sem_Ch13 is\n                   SHi := Hi_Val (N);\n                end if;\n \n-            --  Identifier case\n+            --  Static expression case\n \n-            else pragma Assert (Nkind (N) = N_Identifier);\n+            elsif Is_Static_Expression (N) then\n+               SLo := Lo_Val (N);\n+               SHi := Hi_Val (N);\n \n-               --  Static expression case\n+            --  Identifier (other than static expression) case\n \n-               if Is_Static_Expression (N) then\n-                  SLo := Lo_Val (N);\n-                  SHi := Hi_Val (N);\n+            else pragma Assert (Nkind (N) = N_Identifier);\n \n                --  Type case\n \n-               elsif Is_Type (Entity (N)) then\n+               if Is_Type (Entity (N)) then\n \n                   --  If type has static predicates, process them recursively\n "}, {"sha": "68f74b94f01d34513b4b00174c25e27c4223d9ea", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed00f4727ba26dd7b6cb3900162729d26de9ecdb/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed00f4727ba26dd7b6cb3900162729d26de9ecdb/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=ed00f4727ba26dd7b6cb3900162729d26de9ecdb", "patch": "@@ -4429,11 +4429,9 @@ package body Sem_Ch3 is\n \n          --  Check error of subtype with predicate for index type\n \n-         if Has_Predicates (Etype (Index)) then\n-            Error_Msg_NE\n-              (\"subtype& has predicate, not allowed as index subtype\",\n-               Index, Etype (Index));\n-         end if;\n+         Bad_Predicated_Subtype_Use\n+           (\"subtype& has predicate, not allowed as index subtype\",\n+            Index, Etype (Index));\n \n          --  Move to next index\n \n@@ -11402,9 +11400,9 @@ package body Sem_Ch3 is\n \n             --  Check error of subtype with predicate in index constraint\n \n-            elsif Has_Predicates (Entity (S)) then\n-               Error_Msg_NE\n-                 (\"subtype& has predicate, not allowed in index consraint\",\n+            else\n+               Bad_Predicated_Subtype_Use\n+                 (\"subtype& has predicate, not allowed in index constraint\",\n                   S, Entity (S));\n             end if;\n "}, {"sha": "eceb2818477024126519288c278bcc31378f4219", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 169, "deletions": 167, "changes": 336, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed00f4727ba26dd7b6cb3900162729d26de9ecdb/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed00f4727ba26dd7b6cb3900162729d26de9ecdb/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=ed00f4727ba26dd7b6cb3900162729d26de9ecdb", "patch": "@@ -1734,204 +1734,207 @@ package body Sem_Ch5 is\n \n       if No (N) then\n          return;\n+      end if;\n \n-      else\n-         declare\n-            Cond : constant Node_Id := Condition (N);\n+      --  Iteration scheme is present\n \n-         begin\n-            --  For WHILE loop, verify that the condition is a Boolean\n-            --  expression and resolve and check it.\n+      declare\n+         Cond : constant Node_Id := Condition (N);\n \n-            if Present (Cond) then\n-               Analyze_And_Resolve (Cond, Any_Boolean);\n-               Check_Unset_Reference (Cond);\n-               Set_Current_Value_Condition (N);\n-               return;\n+      begin\n+         --  For WHILE loop, verify that the condition is a Boolean\n+         --  expression and resolve and check it.\n \n-            elsif Present (Iterator_Specification (N)) then\n-               Analyze_Iterator_Specification (Iterator_Specification (N));\n+         if Present (Cond) then\n+            Analyze_And_Resolve (Cond, Any_Boolean);\n+            Check_Unset_Reference (Cond);\n+            Set_Current_Value_Condition (N);\n+            return;\n \n-            --  Else we have a FOR loop\n+         elsif Present (Iterator_Specification (N)) then\n+            Analyze_Iterator_Specification (Iterator_Specification (N));\n \n-            else\n-               declare\n-                  LP : constant Node_Id   := Loop_Parameter_Specification (N);\n-                  Id : constant Entity_Id := Defining_Identifier (LP);\n-                  DS : constant Node_Id   := Discrete_Subtype_Definition (LP);\n+         --  Else we have a FOR loop\n \n-               begin\n-                  Enter_Name (Id);\n-\n-                  --  We always consider the loop variable to be referenced,\n-                  --  since the loop may be used just for counting purposes.\n+         else\n+            declare\n+               LP : constant Node_Id   := Loop_Parameter_Specification (N);\n+               Id : constant Entity_Id := Defining_Identifier (LP);\n+               DS : constant Node_Id   := Discrete_Subtype_Definition (LP);\n \n-                  Generate_Reference (Id, N, ' ');\n+            begin\n+               Enter_Name (Id);\n \n-                  --  Check for case of loop variable hiding a local\n-                  --  variable (used later on to give a nice warning\n-                  --  if the hidden variable is never assigned).\n+               --  We always consider the loop variable to be referenced,\n+               --  since the loop may be used just for counting purposes.\n \n-                  declare\n-                     H : constant Entity_Id := Homonym (Id);\n-                  begin\n-                     if Present (H)\n-                       and then Enclosing_Dynamic_Scope (H) =\n-                                Enclosing_Dynamic_Scope (Id)\n-                       and then Ekind (H) = E_Variable\n-                       and then Is_Discrete_Type (Etype (H))\n-                     then\n-                        Set_Hiding_Loop_Variable (H, Id);\n-                     end if;\n-                  end;\n+               Generate_Reference (Id, N, ' ');\n \n-                  --  Now analyze the subtype definition. If it is\n-                  --  a range, create temporaries for bounds.\n+               --  Check for the case of loop variable hiding a local variable\n+               --  (used later on to give a nice warning if the hidden variable\n+               --  is never assigned).\n \n-                  if Nkind (DS) = N_Range\n-                    and then Expander_Active\n+               declare\n+                  H : constant Entity_Id := Homonym (Id);\n+               begin\n+                  if Present (H)\n+                    and then Enclosing_Dynamic_Scope (H) =\n+                    Enclosing_Dynamic_Scope (Id)\n+                    and then Ekind (H) = E_Variable\n+                    and then Is_Discrete_Type (Etype (H))\n                   then\n-                     Process_Bounds (DS);\n-                  else\n-                     Analyze (DS);\n+                     Set_Hiding_Loop_Variable (H, Id);\n+                  end if;\n+               end;\n \n-                     if Nkind (DS) = N_Function_Call\n-                       or else\n-                         (Is_Entity_Name (DS)\n-                           and then not Is_Type (Entity (DS)))\n-                     then\n-                        --  This is an iterator specification. Rewrite as such\n-                        --  and analyze.\n+               --  Now analyze the subtype definition. If it is a range, create\n+               --  temporaries for bounds.\n \n-                        declare\n-                           I_Spec : constant Node_Id :=\n-                                      Make_Iterator_Specification (Sloc (LP),\n-                                        Defining_Identifier =>\n-                                          Relocate_Node (Id),\n-                                        Name                =>\n-                                          Relocate_Node (DS),\n-                                        Subtype_Indication  =>\n-                                          Empty,\n-                                        Reverse_Present     =>\n-                                          Reverse_Present (LP));\n-                        begin\n-                           Set_Iterator_Specification (N, I_Spec);\n-                           Set_Loop_Parameter_Specification (N, Empty);\n-                           Analyze_Iterator_Specification (I_Spec);\n-                           return;\n-                        end;\n-                     end if;\n-                  end if;\n+               if Nkind (DS) = N_Range\n+                 and then Expander_Active\n+               then\n+                  Process_Bounds (DS);\n \n-                  if DS = Error then\n-                     return;\n-                  end if;\n+               --  Not a range or expander not active (is that right???)\n \n-                  --  The subtype indication may denote the completion of an\n-                  --  incomplete type declaration.\n+               else\n+                  Analyze (DS);\n \n-                  if Is_Entity_Name (DS)\n-                    and then Present (Entity (DS))\n-                    and then Is_Type (Entity (DS))\n-                    and then Ekind (Entity (DS)) = E_Incomplete_Type\n+                  if Nkind (DS) = N_Function_Call\n+                    or else\n+                      (Is_Entity_Name (DS)\n+                        and then not Is_Type (Entity (DS)))\n                   then\n-                     Set_Entity (DS, Get_Full_View (Entity (DS)));\n-                     Set_Etype  (DS, Entity (DS));\n-                  end if;\n+                     --  This is an iterator specification. Rewrite as such\n+                     --  and analyze.\n \n-                  if not Is_Discrete_Type (Etype (DS)) then\n-                     Wrong_Type (DS, Any_Discrete);\n-                     Set_Etype (DS, Any_Type);\n+                     declare\n+                        I_Spec : constant Node_Id :=\n+                                   Make_Iterator_Specification (Sloc (LP),\n+                                     Defining_Identifier =>\n+                                       Relocate_Node (Id),\n+                                     Name                =>\n+                                       Relocate_Node (DS),\n+                                     Subtype_Indication  =>\n+                                       Empty,\n+                                     Reverse_Present     =>\n+                                       Reverse_Present (LP));\n+                     begin\n+                        Set_Iterator_Specification (N, I_Spec);\n+                        Set_Loop_Parameter_Specification (N, Empty);\n+                        Analyze_Iterator_Specification (I_Spec);\n+                        return;\n+                     end;\n                   end if;\n+               end if;\n \n-                  Check_Controlled_Array_Attribute (DS);\n+               if DS = Error then\n+                  return;\n+               end if;\n \n-                  Make_Index (DS, LP);\n+               --  The subtype indication may denote the completion of an\n+               --  incomplete type declaration.\n \n-                  Set_Ekind (Id, E_Loop_Parameter);\n-                  Set_Etype (Id, Etype (DS));\n+               if Is_Entity_Name (DS)\n+                 and then Present (Entity (DS))\n+                 and then Is_Type (Entity (DS))\n+                 and then Ekind (Entity (DS)) = E_Incomplete_Type\n+               then\n+                  Set_Entity (DS, Get_Full_View (Entity (DS)));\n+                  Set_Etype  (DS, Entity (DS));\n+               end if;\n \n-                  --  Treat a range as an implicit reference to the type, to\n-                  --  inhibit spurious warnings.\n+               if not Is_Discrete_Type (Etype (DS)) then\n+                  Wrong_Type (DS, Any_Discrete);\n+                  Set_Etype (DS, Any_Type);\n+               end if;\n \n-                  Generate_Reference (Base_Type (Etype (DS)), N, ' ');\n-                  Set_Is_Known_Valid (Id, True);\n+               Check_Controlled_Array_Attribute (DS);\n \n-                  --  The loop is not a declarative part, so the only entity\n-                  --  declared \"within\" must be frozen explicitly.\n+               Make_Index (DS, LP);\n \n-                  declare\n-                     Flist : constant List_Id := Freeze_Entity (Id, N);\n-                  begin\n-                     if Is_Non_Empty_List (Flist) then\n-                        Insert_Actions (N, Flist);\n-                     end if;\n-                  end;\n+               Set_Ekind (Id, E_Loop_Parameter);\n+               Set_Etype (Id, Etype (DS));\n \n-                  --  Check for null or possibly null range and issue warning.\n-                  --  We suppress such messages in generic templates and\n-                  --  instances, because in practice they tend to be dubious\n-                  --  in these cases.\n+               --  Treat a range as an implicit reference to the type, to\n+               --  inhibit spurious warnings.\n \n-                  if Nkind (DS) = N_Range and then Comes_From_Source (N) then\n-                     declare\n-                        L : constant Node_Id := Low_Bound  (DS);\n-                        H : constant Node_Id := High_Bound (DS);\n+               Generate_Reference (Base_Type (Etype (DS)), N, ' ');\n+               Set_Is_Known_Valid (Id, True);\n \n-                     begin\n-                        --  If range of loop is null, issue warning\n+               --  The loop is not a declarative part, so the only entity\n+               --  declared \"within\" must be frozen explicitly.\n+\n+               declare\n+                  Flist : constant List_Id := Freeze_Entity (Id, N);\n+               begin\n+                  if Is_Non_Empty_List (Flist) then\n+                     Insert_Actions (N, Flist);\n+                  end if;\n+               end;\n+\n+               --  Check for null or possibly null range and issue warning. We\n+               --  suppress such messages in generic templates and instances,\n+               --  because in practice they tend to be dubious in these cases.\n+\n+               if Nkind (DS) = N_Range and then Comes_From_Source (N) then\n+                  declare\n+                     L : constant Node_Id := Low_Bound  (DS);\n+                     H : constant Node_Id := High_Bound (DS);\n+\n+                  begin\n+                     --  If range of loop is null, issue warning\n+\n+                     if Compile_Time_Compare\n+                          (L, H, Assume_Valid => True) = GT\n+                     then\n+                        --  Suppress the warning if inside a generic template\n+                        --  or instance, since in practice they tend to be\n+                        --  dubious in these cases since they can result from\n+                        --  intended parametrization.\n \n-                        if Compile_Time_Compare\n-                            (L, H, Assume_Valid => True) = GT\n+                        if not Inside_A_Generic\n+                          and then not In_Instance\n                         then\n-                           --  Suppress the warning if inside a generic\n-                           --  template or instance, since in practice they\n-                           --  tend to be dubious in these cases since they can\n-                           --  result from intended parametrization.\n+                           --  Specialize msg if invalid values could make\n+                           --  the loop non-null after all.\n \n-                           if not Inside_A_Generic\n-                              and then not In_Instance\n+                           if Compile_Time_Compare\n+                                (L, H, Assume_Valid => False) = GT\n                            then\n-                              --  Specialize msg if invalid values could make\n-                              --  the loop non-null after all.\n-\n-                              if Compile_Time_Compare\n-                                   (L, H, Assume_Valid => False) = GT\n-                              then\n-                                 Error_Msg_N\n-                                   (\"?loop range is null, \"\n-                                    & \"loop will not execute\",\n-                                    DS);\n+                              Error_Msg_N\n+                                (\"?loop range is null, loop will not execute\",\n+                                 DS);\n \n-                                 --  Since we know the range of the loop is\n-                                 --  null, set the appropriate flag to remove\n-                                 --  the loop entirely during expansion.\n+                              --  Since we know the range of the loop is\n+                              --  null, set the appropriate flag to remove\n+                              --  the loop entirely during expansion.\n \n-                                 Set_Is_Null_Loop (Parent (N));\n+                              Set_Is_Null_Loop (Parent (N));\n \n                               --  Here is where the loop could execute because\n                               --  of invalid values, so issue appropriate\n                               --  message and in this case we do not set the\n                               --  Is_Null_Loop flag since the loop may execute.\n \n-                              else\n-                                 Error_Msg_N\n-                                   (\"?loop range may be null, \"\n-                                    & \"loop may not execute\",\n-                                    DS);\n-                                 Error_Msg_N\n-                                   (\"?can only execute if invalid values \"\n-                                    & \"are present\",\n-                                    DS);\n-                              end if;\n+                           else\n+                              Error_Msg_N\n+                                (\"?loop range may be null, \"\n+                                 & \"loop may not execute\",\n+                                 DS);\n+                              Error_Msg_N\n+                                (\"?can only execute if invalid values \"\n+                                 & \"are present\",\n+                                 DS);\n                            end if;\n+                        end if;\n \n-                           --  In either case, suppress warnings in the body of\n-                           --  the loop, since it is likely that these warnings\n-                           --  will be inappropriate if the loop never actually\n-                           --  executes, which is likely.\n+                        --  In either case, suppress warnings in the body of\n+                        --  the loop, since it is likely that these warnings\n+                        --  will be inappropriate if the loop never actually\n+                        --  executes, which is likely.\n \n-                           Set_Suppress_Loop_Warnings (Parent (N));\n+                        Set_Suppress_Loop_Warnings (Parent (N));\n \n                         --  The other case for a warning is a reverse loop\n                         --  where the upper bound is the integer literal zero\n@@ -1944,22 +1947,21 @@ package body Sem_Ch5 is\n                         --  In practice, this is very likely to be a case of\n                         --  reversing the bounds incorrectly in the range.\n \n-                        elsif Reverse_Present (LP)\n-                          and then Nkind (Original_Node (H)) =\n-                                                          N_Integer_Literal\n-                          and then (Intval (Original_Node (H)) = Uint_0\n-                                      or else\n+                     elsif Reverse_Present (LP)\n+                       and then Nkind (Original_Node (H)) =\n+                                                      N_Integer_Literal\n+                       and then (Intval (Original_Node (H)) = Uint_0\n+                                  or else\n                                     Intval (Original_Node (H)) = Uint_1)\n-                        then\n-                           Error_Msg_N (\"?loop range may be null\", DS);\n-                           Error_Msg_N (\"\\?bounds may be wrong way round\", DS);\n-                        end if;\n-                     end;\n-                  end if;\n-               end;\n-            end if;\n-         end;\n-      end if;\n+                     then\n+                        Error_Msg_N (\"?loop range may be null\", DS);\n+                        Error_Msg_N (\"\\?bounds may be wrong way round\", DS);\n+                     end if;\n+                  end;\n+               end if;\n+            end;\n+         end if;\n+      end;\n    end Analyze_Iteration_Scheme;\n \n    -------------------------------------"}, {"sha": "a88b2d8874ebf1458e1e1d990c291e1ce0c5d0df", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed00f4727ba26dd7b6cb3900162729d26de9ecdb/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed00f4727ba26dd7b6cb3900162729d26de9ecdb/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=ed00f4727ba26dd7b6cb3900162729d26de9ecdb", "patch": "@@ -894,11 +894,9 @@ package body Sem_Ch9 is\n \n          --  Check subtype with predicate in entry family\n \n-         if Has_Predicates (Etype (D_Sdef)) then\n-            Error_Msg_NE\n-              (\"subtype& has predicate, not allowed in entry family\",\n-               D_Sdef, Etype (D_Sdef));\n-         end if;\n+         Bad_Predicated_Subtype_Use\n+           (\"subtype& has predicate, not allowed in entry family\",\n+            D_Sdef, Etype (D_Sdef));\n       end if;\n \n       --  Decorate Def_Id"}, {"sha": "de83fa24d522dfe68d601246d2ba02106ffa212a", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed00f4727ba26dd7b6cb3900162729d26de9ecdb/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed00f4727ba26dd7b6cb3900162729d26de9ecdb/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=ed00f4727ba26dd7b6cb3900162729d26de9ecdb", "patch": "@@ -8481,7 +8481,7 @@ package body Sem_Res is\n       --  Check bad use of type with predicates\n \n       if Has_Predicates (Etype (Drange)) then\n-         Error_Msg_NE\n+         Bad_Predicated_Subtype_Use\n            (\"subtype& has predicate, not allowed in slice\",\n             Drange, Etype (Drange));\n "}, {"sha": "f3a0b13c10db5a52f1af40c541f1900f0c363ca4", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed00f4727ba26dd7b6cb3900162729d26de9ecdb/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed00f4727ba26dd7b6cb3900162729d26de9ecdb/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=ed00f4727ba26dd7b6cb3900162729d26de9ecdb", "patch": "@@ -334,21 +334,21 @@ package body Sem_Util is\n    --------------------------------\n \n    procedure Bad_Predicated_Subtype_Use\n-     (Typ : Entity_Id;\n+     (Msg : String;\n       N   : Node_Id;\n-      Msg : String)\n+      Typ : Entity_Id)\n    is\n    begin\n       if Has_Predicates (Typ) then\n          if Is_Generic_Actual_Type (Typ) then\n-            Error_Msg_F (Msg & '?', Typ);\n-            Error_Msg_F (\"\\Program_Error will be raised at run time?\", Typ);\n+            Error_Msg_FE (Msg & '?', N, Typ);\n+            Error_Msg_F (\"\\Program_Error will be raised at run time?\", N);\n             Insert_Action (N,\n               Make_Raise_Program_Error (Sloc (N),\n                 Reason => PE_Bad_Predicated_Generic_Type));\n \n          else\n-            Error_Msg_F (Msg, Typ);\n+            Error_Msg_FE (Msg, N, Typ);\n          end if;\n       end if;\n    end Bad_Predicated_Subtype_Use;"}, {"sha": "935b410b069b79cb9dc4b690c104c80ee09edf2b", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed00f4727ba26dd7b6cb3900162729d26de9ecdb/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed00f4727ba26dd7b6cb3900162729d26de9ecdb/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=ed00f4727ba26dd7b6cb3900162729d26de9ecdb", "patch": "@@ -94,18 +94,19 @@ package Sem_Util is\n    --  whether an error or warning is given.\n \n    procedure Bad_Predicated_Subtype_Use\n-     (Typ : Entity_Id;\n+     (Msg : String;\n       N   : Node_Id;\n-      Msg : String);\n+      Typ : Entity_Id);\n    --  This is called when Typ, a predicated subtype, is used in a context\n-   --  which does not allow the use of a predicated subtype. Msg will be\n-   --  passed to Error_Msg_F to output an appropriate message. The caller\n-   --  should set up any insertions other than the & for the type itself.\n-   --  Note that if Typ is a generic actual type, then the message will be\n-   --  output as a warning, and a raise Program_Error is inserted using\n-   --  Insert_Action with node N as the insertion point. Node N also supplies\n-   --  the source location for construction of the raise node. If Typ is NOT a\n-   --  type with predicates this call has no effect.\n+   --  which does not allow the use of a predicated subtype. Msg is passed\n+   --  to Error_Msg_FE to output an appropriate message using N as the\n+   --  location, and Typ as the entity. The caller must set up any insertions\n+   --  other than the & for the type itself. Note that if Typ is a generic\n+   --  actual type, then the message will be output as a warning, and a\n+   --  raise Program_Error is inserted using Insert_Action with node N as\n+   --  the insertion point. Node N also supplies the source location for\n+   --  construction of the raise node. If Typ is NOT a type with predicates\n+   --  this call has no effect.\n \n    function Build_Actual_Subtype\n      (T : Entity_Id;"}]}