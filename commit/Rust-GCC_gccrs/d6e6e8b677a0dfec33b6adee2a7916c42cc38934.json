{"sha": "d6e6e8b677a0dfec33b6adee2a7916c42cc38934", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZlNmU4YjY3N2EwZGZlYzMzYjZhZGVlMmE3OTE2YzQyY2MzODkzNA==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2018-05-16T14:33:16Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2018-05-16T14:33:16Z"}, "message": "[AArch64] Improve register allocation of fma\n\nThis patch improves register allocation of fma by preferring to update the\naccumulator register.  This is done by adding fma insns with operand 1 as the\naccumulator.  The register allocator considers copy preferences only in operand\norder, so if the first operand is dead, it has the highest chance of being\nreused as the destination.  As a result code using fma often has a better\nregister allocation.  Performance of SPECFP2017 improves by over 0.5% on some\nimplementations, while it had no effect on other implementations.  Fma is more\nreadable too, in a simple example we now generate:\n\n\tfmadd\ts16, s2, s1, s16\n\tfmadd\ts7, s17, s16, s7\n\tfmadd\ts6, s16, s7, s6\n\tfmadd\ts5, s7, s6, s5\n\ninstead of:\n\n\tfmadd\ts16, s16, s2, s1\n\tfmadd\ts7, s7, s16, s6\n\tfmadd\ts6, s6, s7, s5\n\tfmadd\ts5, s5, s6, s4\n\n    gcc/\n\t* config/aarch64/aarch64.md (fma<mode>4): Change into expand pattern.\n\t(fnma<mode>4): Likewise.\n\t(fms<mode>4): Likewise.\n\t(fnms<mode>4): Likewise.\n\t(aarch64_fma<mode>4): Rename insn, reorder accumulator operand.\n\t(aarch64_fnma<mode>4): Likewise.\n\t(aarch64_fms<mode>4): Likewise.\n\t(aarch64_fnms<mode>4): Likewise.\n\t(aarch64_fnmadd<mode>4): Likewise.\n\nFrom-SVN: r260292", "tree": {"sha": "bb8538b7e4e61a8407039d886ceb97ef55c88f26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb8538b7e4e61a8407039d886ceb97ef55c88f26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6e6e8b677a0dfec33b6adee2a7916c42cc38934", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6e6e8b677a0dfec33b6adee2a7916c42cc38934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6e6e8b677a0dfec33b6adee2a7916c42cc38934", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6e6e8b677a0dfec33b6adee2a7916c42cc38934/comments", "author": null, "committer": null, "parents": [{"sha": "df0fc585b70b65a188de010f50cb90b0db3b9045", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df0fc585b70b65a188de010f50cb90b0db3b9045", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df0fc585b70b65a188de010f50cb90b0db3b9045"}], "stats": {"total": 101, "additions": 75, "deletions": 26}, "files": [{"sha": "6390b422f63ca72aaa7a310ad0c1311b8f08384d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e6e8b677a0dfec33b6adee2a7916c42cc38934/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e6e8b677a0dfec33b6adee2a7916c42cc38934/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6e6e8b677a0dfec33b6adee2a7916c42cc38934", "patch": "@@ -1,3 +1,15 @@\n+2018-05-16  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.md (fma<mode>4): Change into expand pattern.\n+\t(fnma<mode>4): Likewise.\n+\t(fms<mode>4): Likewise.\n+\t(fnms<mode>4): Likewise.\n+\t(aarch64_fma<mode>4): Rename insn, reorder accumulator operand.\n+\t(aarch64_fnma<mode>4): Likewise.\n+\t(aarch64_fms<mode>4): Likewise.\n+\t(aarch64_fnms<mode>4): Likewise.\n+\t(aarch64_fnmadd<mode>4): Likewise.\n+\n 2018-05-16  Jason Merrill  <jason@redhat.com>\n \n \t* tree.c (warn_deprecated_use): Return bool.  Simplify logic."}, {"sha": "6556303ad4d30e70f50a6c7f708419bc75b16580", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 63, "deletions": 26, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e6e8b677a0dfec33b6adee2a7916c42cc38934/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e6e8b677a0dfec33b6adee2a7916c42cc38934/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=d6e6e8b677a0dfec33b6adee2a7916c42cc38934", "patch": "@@ -4973,57 +4973,94 @@\n   [(set_attr \"type\" \"f_cvtf2i\")]\n )\n \n-;; fma - no throw\n+;; fma - expand fma into patterns with the accumulator operand first since\n+;; reusing the accumulator results in better register allocation.\n+;; The register allocator considers copy preferences in operand order,\n+;; so this prefers fmadd s0, s1, s2, s0 over fmadd s1, s1, s2, s0.\n+\n+(define_expand \"fma<mode>4\"\n+  [(set (match_operand:GPF_F16 0 \"register_operand\")\n+\t(fma:GPF_F16 (match_operand:GPF_F16 1 \"register_operand\")\n+\t\t     (match_operand:GPF_F16 2 \"register_operand\")\n+\t\t     (match_operand:GPF_F16 3 \"register_operand\")))]\n+  \"TARGET_FLOAT\"\n+)\n \n-(define_insn \"fma<mode>4\"\n+(define_insn \"*aarch64_fma<mode>4\"\n   [(set (match_operand:GPF_F16 0 \"register_operand\" \"=w\")\n-        (fma:GPF_F16 (match_operand:GPF_F16 1 \"register_operand\" \"w\")\n-\t\t     (match_operand:GPF_F16 2 \"register_operand\" \"w\")\n-\t\t     (match_operand:GPF_F16 3 \"register_operand\" \"w\")))]\n+\t(fma:GPF_F16 (match_operand:GPF_F16 2 \"register_operand\" \"w\")\n+\t\t     (match_operand:GPF_F16 3 \"register_operand\" \"w\")\n+\t\t     (match_operand:GPF_F16 1 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n-  \"fmadd\\\\t%<s>0, %<s>1, %<s>2, %<s>3\"\n+  \"fmadd\\\\t%<s>0, %<s>2, %<s>3, %<s>1\"\n   [(set_attr \"type\" \"fmac<stype>\")]\n )\n \n-(define_insn \"fnma<mode>4\"\n+(define_expand \"fnma<mode>4\"\n+  [(set (match_operand:GPF_F16 0 \"register_operand\")\n+\t(fma:GPF_F16\n+\t  (neg:GPF_F16 (match_operand:GPF_F16 1 \"register_operand\"))\n+\t  (match_operand:GPF_F16 2 \"register_operand\")\n+\t  (match_operand:GPF_F16 3 \"register_operand\")))]\n+  \"TARGET_FLOAT\"\n+)\n+\n+(define_insn \"*aarch64_fnma<mode>4\"\n   [(set (match_operand:GPF_F16 0 \"register_operand\" \"=w\")\n \t(fma:GPF_F16\n-\t  (neg:GPF_F16 (match_operand:GPF_F16 1 \"register_operand\" \"w\"))\n-\t  (match_operand:GPF_F16 2 \"register_operand\" \"w\")\n-\t  (match_operand:GPF_F16 3 \"register_operand\" \"w\")))]\n+\t  (neg:GPF_F16 (match_operand:GPF_F16 2 \"register_operand\" \"w\"))\n+\t  (match_operand:GPF_F16 3 \"register_operand\" \"w\")\n+\t  (match_operand:GPF_F16 1 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n-  \"fmsub\\\\t%<s>0, %<s>1, %<s>2, %<s>3\"\n+  \"fmsub\\\\t%<s>0, %<s>2, %<s>3, %<s>1\"\n   [(set_attr \"type\" \"fmac<stype>\")]\n )\n \n-(define_insn \"fms<mode>4\"\n+\n+(define_expand \"fms<mode>4\"\n+  [(set (match_operand:GPF 0 \"register_operand\")\n+\t(fma:GPF (match_operand:GPF 1 \"register_operand\")\n+\t\t (match_operand:GPF 2 \"register_operand\")\n+\t\t (neg:GPF (match_operand:GPF 3 \"register_operand\"))))]\n+  \"TARGET_FLOAT\"\n+)\n+\n+(define_insn \"*aarch64_fms<mode>4\"\n   [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n-        (fma:GPF (match_operand:GPF 1 \"register_operand\" \"w\")\n-\t\t (match_operand:GPF 2 \"register_operand\" \"w\")\n-\t\t (neg:GPF (match_operand:GPF 3 \"register_operand\" \"w\"))))]\n+\t(fma:GPF (match_operand:GPF 2 \"register_operand\" \"w\")\n+\t\t (match_operand:GPF 3 \"register_operand\" \"w\")\n+\t\t (neg:GPF (match_operand:GPF 1 \"register_operand\" \"w\"))))]\n   \"TARGET_FLOAT\"\n-  \"fnmsub\\\\t%<s>0, %<s>1, %<s>2, %<s>3\"\n+  \"fnmsub\\\\t%<s>0, %<s>2, %<s>3, %<s>1\"\n   [(set_attr \"type\" \"fmac<s>\")]\n )\n \n-(define_insn \"fnms<mode>4\"\n+(define_expand \"fnms<mode>4\"\n+  [(set (match_operand:GPF 0 \"register_operand\")\n+\t(fma:GPF (neg:GPF (match_operand:GPF 1 \"register_operand\"))\n+\t\t (match_operand:GPF 2 \"register_operand\")\n+\t\t (neg:GPF (match_operand:GPF 3 \"register_operand\"))))]\n+  \"TARGET_FLOAT\"\n+)\n+\n+(define_insn \"*aarch64_fnms<mode>4\"\n   [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n-\t(fma:GPF (neg:GPF (match_operand:GPF 1 \"register_operand\" \"w\"))\n-\t\t (match_operand:GPF 2 \"register_operand\" \"w\")\n-\t\t (neg:GPF (match_operand:GPF 3 \"register_operand\" \"w\"))))]\n+\t(fma:GPF (neg:GPF (match_operand:GPF 2 \"register_operand\" \"w\"))\n+\t\t (match_operand:GPF 3 \"register_operand\" \"w\")\n+\t\t (neg:GPF (match_operand:GPF 1 \"register_operand\" \"w\"))))]\n   \"TARGET_FLOAT\"\n-  \"fnmadd\\\\t%<s>0, %<s>1, %<s>2, %<s>3\"\n+  \"fnmadd\\\\t%<s>0, %<s>2, %<s>3, %<s>1\"\n   [(set_attr \"type\" \"fmac<s>\")]\n )\n \n ;; If signed zeros are ignored, -(a * b + c) = -a * b - c.\n-(define_insn \"*fnmadd<mode>4\"\n+(define_insn \"*aarch64_fnmadd<mode>4\"\n   [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n-\t(neg:GPF (fma:GPF (match_operand:GPF 1 \"register_operand\" \"w\")\n-\t\t\t  (match_operand:GPF 2 \"register_operand\" \"w\")\n-\t\t\t  (match_operand:GPF 3 \"register_operand\" \"w\"))))]\n+\t(neg:GPF (fma:GPF (match_operand:GPF 2 \"register_operand\" \"w\")\n+\t\t\t  (match_operand:GPF 3 \"register_operand\" \"w\")\n+\t\t\t  (match_operand:GPF 1 \"register_operand\" \"w\"))))]\n   \"!HONOR_SIGNED_ZEROS (<MODE>mode) && TARGET_FLOAT\"\n-  \"fnmadd\\\\t%<s>0, %<s>1, %<s>2, %<s>3\"\n+  \"fnmadd\\\\t%<s>0, %<s>2, %<s>3, %<s>1\"\n   [(set_attr \"type\" \"fmac<s>\")]\n )\n "}]}