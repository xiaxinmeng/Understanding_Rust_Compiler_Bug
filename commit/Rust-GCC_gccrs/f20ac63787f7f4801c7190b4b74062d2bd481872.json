{"sha": "f20ac63787f7f4801c7190b4b74062d2bd481872", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIwYWM2Mzc4N2Y3ZjQ4MDFjNzE5MGI0Yjc0MDYyZDJiZDQ4MTg3Mg==", "commit": {"author": {"name": "Jinsong Ji", "email": "jji@us.ibm.com", "date": "2018-09-27T20:48:53Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2018-09-27T20:48:53Z"}, "message": "mmintrin.h (_mm_unpackhi_pi8): Change __int128_t to __int128.\n\n2018-09-27  Jinsong Ji  <jji@us.ibm.com>\n\t    Bill Schmidt  <wschmidt@linux.ibm.com>\n\n\t* config/rs6000/mmintrin.h (_mm_unpackhi_pi8): Change __int128_t\n\tto __int128.\n\t(_mm_unpacklo_pi8): Likewise.\n\t(_mm_add_pi8): Likewise.\n\t(_mm_add_pi16): Likewise.\n\t(_mm_add_pi32): Likewise.\n\t(_mm_sub_pi8): Likewise.\n\t(_mm_sub_pi16): Likewise.\n\t(_mm_sub_pi32): Likewise.\n\t(_mm_cmpgt_pi8): Likewise.\n\t(_mm_cmpeq_pi16): Likewise.\n\t(_mm_cmpgt_pi16): Likewise.\n\t(_mm_cmpeq_pi32): Likewise.\n\t(_mm_cmpgt_pi32): Likewise.\n\t(_mm_adds_pi8): Likewise.\n\t(_mm_adds_pi16): Likewise.\n\t(_mm_adds_pu8): Likewise.\n\t(_mm_adds_pu16): Likewise.\n\t(_mm_subs_pi8): Likewise.\n\t(_mm_subs_pi16): Likewise.\n\t(_mm_subs_pu8): Likewise.\n\t(_mm_subs_pu16): Likewise.\n\t(_mm_madd_pi16): Likewise.\n\t(_mm_mulhi_pi16): Likewise.\n\t(_mm_mullo_pi16): Likewise.\n\t(_mm_sll_pi16): Likewise.\n\t(_mm_sra_pi16): Likewise.\n\t(_mm_srl_pi16): Likewise.\n\t(_mm_set1_pi16): Likewise.\n\t(_mm_set1_pi8): Likewise.\n\t* config/rs6000/xmmintrin.h (_mm_max_pi16): Likewise.\n\t(_mm_max_pu8): Likewise.\n\t(_mm_min_pi16): Likewise.\n\t(_mm_min_pu8): Likewise.\n\nFrom-SVN: r264678", "tree": {"sha": "1deeee62258ad7ac0206ba824217aa73bf08d691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1deeee62258ad7ac0206ba824217aa73bf08d691"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f20ac63787f7f4801c7190b4b74062d2bd481872", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f20ac63787f7f4801c7190b4b74062d2bd481872", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f20ac63787f7f4801c7190b4b74062d2bd481872", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f20ac63787f7f4801c7190b4b74062d2bd481872/comments", "author": null, "committer": null, "parents": [{"sha": "f3f518f2d86c2fe15887b35882f5ae74eb0e1693", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f518f2d86c2fe15887b35882f5ae74eb0e1693", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3f518f2d86c2fe15887b35882f5ae74eb0e1693"}], "stats": {"total": 66, "additions": 33, "deletions": 33}, "files": [{"sha": "78b7cae4dcff5e049cc0f113d5499e7b40b10703", "filename": "gcc/config/rs6000/mmintrin.h", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20ac63787f7f4801c7190b4b74062d2bd481872/gcc%2Fconfig%2Frs6000%2Fmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20ac63787f7f4801c7190b4b74062d2bd481872/gcc%2Fconfig%2Frs6000%2Fmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fmmintrin.h?ref=f20ac63787f7f4801c7190b4b74062d2bd481872", "patch": "@@ -236,7 +236,7 @@ _mm_unpackhi_pi8 (__m64 __m1, __m64 __m2)\n   a = (__vector unsigned char)vec_splats (__m1);\n   b = (__vector unsigned char)vec_splats (__m2);\n   c = vec_mergel (a, b);\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)c, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)c, 0));\n #else\n   __m64_union m1, m2, res;\n \n@@ -317,7 +317,7 @@ _mm_unpacklo_pi8 (__m64 __m1, __m64 __m2)\n   a = (__vector unsigned char)vec_splats (__m1);\n   b = (__vector unsigned char)vec_splats (__m2);\n   c = vec_mergel (a, b);\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)c, 1));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)c, 1));\n #else\n   __m64_union m1, m2, res;\n \n@@ -398,7 +398,7 @@ _mm_add_pi8 (__m64 __m1, __m64 __m2)\n   a = (__vector signed char)vec_splats (__m1);\n   b = (__vector signed char)vec_splats (__m2);\n   c = vec_add (a, b);\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)c, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)c, 0));\n #else\n   __m64_union m1, m2, res;\n \n@@ -434,7 +434,7 @@ _mm_add_pi16 (__m64 __m1, __m64 __m2)\n   a = (__vector signed short)vec_splats (__m1);\n   b = (__vector signed short)vec_splats (__m2);\n   c = vec_add (a, b);\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)c, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)c, 0));\n #else\n   __m64_union m1, m2, res;\n \n@@ -466,7 +466,7 @@ _mm_add_pi32 (__m64 __m1, __m64 __m2)\n   a = (__vector signed int)vec_splats (__m1);\n   b = (__vector signed int)vec_splats (__m2);\n   c = vec_add (a, b);\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)c, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)c, 0));\n #else\n   __m64_union m1, m2, res;\n \n@@ -496,7 +496,7 @@ _mm_sub_pi8 (__m64 __m1, __m64 __m2)\n   a = (__vector signed char)vec_splats (__m1);\n   b = (__vector signed char)vec_splats (__m2);\n   c = vec_sub (a, b);\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)c, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)c, 0));\n #else\n   __m64_union m1, m2, res;\n \n@@ -532,7 +532,7 @@ _mm_sub_pi16 (__m64 __m1, __m64 __m2)\n   a = (__vector signed short)vec_splats (__m1);\n   b = (__vector signed short)vec_splats (__m2);\n   c = vec_sub (a, b);\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)c, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)c, 0));\n #else\n   __m64_union m1, m2, res;\n \n@@ -564,7 +564,7 @@ _mm_sub_pi32 (__m64 __m1, __m64 __m2)\n   a = (__vector signed int)vec_splats (__m1);\n   b = (__vector signed int)vec_splats (__m2);\n   c = vec_sub (a, b);\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)c, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)c, 0));\n #else\n   __m64_union m1, m2, res;\n \n@@ -754,7 +754,7 @@ _mm_cmpgt_pi8 (__m64 __m1, __m64 __m2)\n   a = (__vector signed char)vec_splats (__m1);\n   b = (__vector signed char)vec_splats (__m2);\n   c = (__vector signed char)vec_cmpgt (a, b);\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)c, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)c, 0));\n #else\n   __m64_union m1, m2, res;\n \n@@ -791,7 +791,7 @@ _mm_cmpeq_pi16 (__m64 __m1, __m64 __m2)\n   a = (__vector signed short)vec_splats (__m1);\n   b = (__vector signed short)vec_splats (__m2);\n   c = (__vector signed short)vec_cmpeq (a, b);\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)c, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)c, 0));\n #else\n   __m64_union m1, m2, res;\n \n@@ -822,7 +822,7 @@ _mm_cmpgt_pi16 (__m64 __m1, __m64 __m2)\n   a = (__vector signed short)vec_splats (__m1);\n   b = (__vector signed short)vec_splats (__m2);\n   c = (__vector signed short)vec_cmpgt (a, b);\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)c, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)c, 0));\n #else\n   __m64_union m1, m2, res;\n \n@@ -855,7 +855,7 @@ _mm_cmpeq_pi32 (__m64 __m1, __m64 __m2)\n   a = (__vector signed int)vec_splats (__m1);\n   b = (__vector signed int)vec_splats (__m2);\n   c = (__vector signed int)vec_cmpeq (a, b);\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)c, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)c, 0));\n #else\n   __m64_union m1, m2, res;\n \n@@ -884,7 +884,7 @@ _mm_cmpgt_pi32 (__m64 __m1, __m64 __m2)\n   a = (__vector signed int)vec_splats (__m1);\n   b = (__vector signed int)vec_splats (__m2);\n   c = (__vector signed int)vec_cmpgt (a, b);\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)c, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)c, 0));\n #else\n   __m64_union m1, m2, res;\n \n@@ -915,7 +915,7 @@ _mm_adds_pi8 (__m64 __m1, __m64 __m2)\n   a = (__vector signed char)vec_splats (__m1);\n   b = (__vector signed char)vec_splats (__m2);\n   c = vec_adds (a, b);\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)c, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)c, 0));\n }\n \n extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -933,7 +933,7 @@ _mm_adds_pi16 (__m64 __m1, __m64 __m2)\n   a = (__vector signed short)vec_splats (__m1);\n   b = (__vector signed short)vec_splats (__m2);\n   c = vec_adds (a, b);\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)c, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)c, 0));\n }\n \n extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -951,7 +951,7 @@ _mm_adds_pu8 (__m64 __m1, __m64 __m2)\n   a = (__vector unsigned char)vec_splats (__m1);\n   b = (__vector unsigned char)vec_splats (__m2);\n   c = vec_adds (a, b);\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)c, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)c, 0));\n }\n \n extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -970,7 +970,7 @@ _mm_adds_pu16 (__m64 __m1, __m64 __m2)\n   a = (__vector unsigned short)vec_splats (__m1);\n   b = (__vector unsigned short)vec_splats (__m2);\n   c = vec_adds (a, b);\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)c, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)c, 0));\n }\n \n extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -989,7 +989,7 @@ _mm_subs_pi8 (__m64 __m1, __m64 __m2)\n   a = (__vector signed char)vec_splats (__m1);\n   b = (__vector signed char)vec_splats (__m2);\n   c = vec_subs (a, b);\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)c, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)c, 0));\n }\n \n extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -1008,7 +1008,7 @@ _mm_subs_pi16 (__m64 __m1, __m64 __m2)\n   a = (__vector signed short)vec_splats (__m1);\n   b = (__vector signed short)vec_splats (__m2);\n   c = vec_subs (a, b);\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)c, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)c, 0));\n }\n \n extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -1027,7 +1027,7 @@ _mm_subs_pu8 (__m64 __m1, __m64 __m2)\n   a = (__vector unsigned char)vec_splats (__m1);\n   b = (__vector unsigned char)vec_splats (__m2);\n   c = vec_subs (a, b);\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)c, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)c, 0));\n }\n \n extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -1046,7 +1046,7 @@ _mm_subs_pu16 (__m64 __m1, __m64 __m2)\n   a = (__vector unsigned short)vec_splats (__m1);\n   b = (__vector unsigned short)vec_splats (__m2);\n   c = vec_subs (a, b);\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)c, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)c, 0));\n }\n \n extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -1068,7 +1068,7 @@ _mm_madd_pi16 (__m64 __m1, __m64 __m2)\n   a = (__vector signed short)vec_splats (__m1);\n   b = (__vector signed short)vec_splats (__m2);\n   c = vec_vmsumshm (a, b, zero);\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)c, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)c, 0));\n }\n \n extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -1096,7 +1096,7 @@ _mm_mulhi_pi16 (__m64 __m1, __m64 __m2)\n   w1 = vec_vmulosh (a, b);\n   c = (__vector signed short)vec_perm (w0, w1, xform1);\n \n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)c, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)c, 0));\n }\n \n extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -1115,7 +1115,7 @@ _mm_mullo_pi16 (__m64 __m1, __m64 __m2)\n   a = (__vector signed short)vec_splats (__m1);\n   b = (__vector signed short)vec_splats (__m2);\n   c = a * b;\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)c, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)c, 0));\n }\n \n extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -1136,7 +1136,7 @@ _mm_sll_pi16 (__m64 __m, __m64 __count)\n       m = (__vector signed short)vec_splats (__m);\n       c = (__vector unsigned short)vec_splats ((unsigned short)__count);\n       r = vec_sl (m, (__vector unsigned short)c);\n-      return (__builtin_unpack_vector_int128 ((__vector __int128_t)r, 0));\n+      return (__builtin_unpack_vector_int128 ((__vector __int128)r, 0));\n     }\n   else\n   return (0);\n@@ -1205,7 +1205,7 @@ _mm_sra_pi16 (__m64 __m, __m64 __count)\n \tm = (__vector signed short)vec_splats (__m);\n \tc = (__vector unsigned short)vec_splats ((unsigned short)__count);\n \tr = vec_sra (m, (__vector unsigned short)c);\n-\treturn (__builtin_unpack_vector_int128 ((__vector __int128_t)r, 0));\n+\treturn (__builtin_unpack_vector_int128 ((__vector __int128)r, 0));\n     }\n   else\n   return (0);\n@@ -1274,7 +1274,7 @@ _mm_srl_pi16 (__m64 __m, __m64 __count)\n \tm = (__vector unsigned short)vec_splats (__m);\n \tc = (__vector unsigned short)vec_splats ((unsigned short)__count);\n \tr = vec_sr (m, (__vector unsigned short)c);\n-\treturn (__builtin_unpack_vector_int128 ((__vector __int128_t)r, 0));\n+\treturn (__builtin_unpack_vector_int128 ((__vector __int128)r, 0));\n     }\n   else\n     return (0);\n@@ -1417,7 +1417,7 @@ _mm_set1_pi16 (short __w)\n   __vector signed short w;\n \n   w = (__vector signed short)vec_splats (__w);\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)w, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)w, 0));\n #else\n   __m64_union res;\n \n@@ -1437,7 +1437,7 @@ _mm_set1_pi8 (signed char __b)\n   __vector signed char b;\n \n   b = (__vector signed char)vec_splats (__b);\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)b, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)b, 0));\n #else\n   __m64_union res;\n "}, {"sha": "ed6f1213da8dbc8233b08e15bbdf2d9a15690556", "filename": "gcc/config/rs6000/xmmintrin.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20ac63787f7f4801c7190b4b74062d2bd481872/gcc%2Fconfig%2Frs6000%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20ac63787f7f4801c7190b4b74062d2bd481872/gcc%2Fconfig%2Frs6000%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxmmintrin.h?ref=f20ac63787f7f4801c7190b4b74062d2bd481872", "patch": "@@ -1421,7 +1421,7 @@ _mm_max_pi16 (__m64 __A, __m64 __B)\n   b = (__vector signed short)vec_splats (__B);\n   c = (__vector __bool short)vec_cmpgt (a, b);\n   r = vec_sel (b, a, c);\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)r, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)r, 0));\n #else\n   __m64_union m1, m2, res;\n \n@@ -1459,7 +1459,7 @@ _mm_max_pu8 (__m64 __A, __m64 __B)\n   b = (__vector unsigned char)vec_splats (__B);\n   c = (__vector __bool char)vec_cmpgt (a, b);\n   r = vec_sel (b, a, c);\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)r, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)r, 0));\n #else\n   __m64_union m1, m2, res;\n   long i;\n@@ -1495,7 +1495,7 @@ _mm_min_pi16 (__m64 __A, __m64 __B)\n   b = (__vector signed short)vec_splats (__B);\n   c = (__vector __bool short)vec_cmplt (a, b);\n   r = vec_sel (b, a, c);\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)r, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)r, 0));\n #else\n   __m64_union m1, m2, res;\n \n@@ -1533,7 +1533,7 @@ _mm_min_pu8 (__m64 __A, __m64 __B)\n   b = (__vector unsigned char)vec_splats (__B);\n   c = (__vector __bool char)vec_cmplt (a, b);\n   r = vec_sel (b, a, c);\n-  return (__builtin_unpack_vector_int128 ((__vector __int128_t)r, 0));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128)r, 0));\n #else\n   __m64_union m1, m2, res;\n   long i;"}]}