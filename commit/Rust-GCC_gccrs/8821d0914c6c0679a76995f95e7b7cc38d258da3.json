{"sha": "8821d0914c6c0679a76995f95e7b7cc38d258da3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgyMWQwOTE0YzZjMDY3OWE3Njk5NWY5NWU3YjdjYzM4ZDI1OGRhMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2003-07-03T07:30:03Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2003-07-03T07:30:03Z"}, "message": "re PR rtl-optimization/11381 (volatile memory access optimized away)\n\n\tPR optimization/11381\n\t* simplify-rtx.c (simplify_relational_operation): Check that\n\ttwo equal operands have no side-effects before simplifying\n\tthe comparison.\n\nFrom-SVN: r68869", "tree": {"sha": "7e595affeb40107a2fa540e31a6dd8bea9a5cbed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e595affeb40107a2fa540e31a6dd8bea9a5cbed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8821d0914c6c0679a76995f95e7b7cc38d258da3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8821d0914c6c0679a76995f95e7b7cc38d258da3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8821d0914c6c0679a76995f95e7b7cc38d258da3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8821d0914c6c0679a76995f95e7b7cc38d258da3/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7960bf2230487ce4626051a2710ecdab9a57d183", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7960bf2230487ce4626051a2710ecdab9a57d183", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7960bf2230487ce4626051a2710ecdab9a57d183"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "b96942d042d144a316e1cbb33fed9b66b1562435", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8821d0914c6c0679a76995f95e7b7cc38d258da3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8821d0914c6c0679a76995f95e7b7cc38d258da3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8821d0914c6c0679a76995f95e7b7cc38d258da3", "patch": "@@ -1,3 +1,10 @@\n+2003-07-03  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR optimization/11381\n+\t* simplify-rtx.c (simplify_relational_operation): Check that\n+\ttwo equal operands have no side-effects before simplifying\n+\tthe comparison.\n+\n 2003-07-02  Jeff Law  <law@redhat.com>\n \n \t* expr.c (do_store_flag): Remove special case folding for"}, {"sha": "f49f53d66d8e54ccf69694fcbf2be3121c2ebfb6", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8821d0914c6c0679a76995f95e7b7cc38d258da3/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8821d0914c6c0679a76995f95e7b7cc38d258da3/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=8821d0914c6c0679a76995f95e7b7cc38d258da3", "patch": "@@ -2220,8 +2220,10 @@ simplify_relational_operation (code, mode, op0, op1)\n     return const0_rtx;\n \n   /* For modes without NaNs, if the two operands are equal, we know the\n-     result.  */\n-  if (!HONOR_NANS (GET_MODE (trueop0)) && rtx_equal_p (trueop0, trueop1))\n+     result except if they have side-effects.  */\n+  if (! HONOR_NANS (GET_MODE (trueop0))\n+      && rtx_equal_p (trueop0, trueop1)\n+      && ! side_effects_p (trueop0))\n     equal = 1, op0lt = 0, op0ltu = 0, op1lt = 0, op1ltu = 0;\n \n   /* If the operands are floating-point constants, see if we can fold"}, {"sha": "e598f212e7d841825c9bc7b5eb01581a46a7e67e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8821d0914c6c0679a76995f95e7b7cc38d258da3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8821d0914c6c0679a76995f95e7b7cc38d258da3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8821d0914c6c0679a76995f95e7b7cc38d258da3", "patch": "@@ -1,3 +1,7 @@\n+2003-07-03  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.dg/i386-volatile-1.c: New test.\n+\n 2003-07-02  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/11072"}, {"sha": "633ea5022ec9bb499ab58d12bf447b4f1a17331e", "filename": "gcc/testsuite/gcc.dg/i386-volatile-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8821d0914c6c0679a76995f95e7b7cc38d258da3/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-volatile-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8821d0914c6c0679a76995f95e7b7cc38d258da3/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-volatile-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-volatile-1.c?ref=8821d0914c6c0679a76995f95e7b7cc38d258da3", "patch": "@@ -0,0 +1,14 @@\n+/* PR optimization/11381 */\n+/* Originator: <tobias@ringstrom.mine.nu> */\n+/* { dg-do compile { target i?86-*-* } } */\n+/* { dg-options \"-O\" } */\n+\n+/* Verify that the comparison is not optimized away. */\n+\n+void foo(volatile unsigned int *vaddr)\n+{\n+  while (*vaddr != *vaddr)\n+    ;\n+}\n+\n+/* { dg-final { scan-assembler \"cmp\" } } */"}]}