{"sha": "b24513a1a2bb350286e09bb124c3dbcea348be92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI0NTEzYTFhMmJiMzUwMjg2ZTA5YmIxMjRjM2RiY2VhMzQ4YmU5Mg==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2012-03-14T16:33:37Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2012-03-14T16:33:37Z"}, "message": "Remove obsolete IRIX 6.5 support\n\n\tlibstdc++-v3:\n\t* configure.host (irix6.5*): Remove.\n\t* config/os/irix: Remove.\n\t* config/io/basic_file_stdio.cc (__basic_file<char>::showmanyc())\n\t[_GLIBCXX_FIONREAD_TAKES_OFF_T]: Remove.\n\n\t* doc/xml/faq.xml: Remove IRIX reference.\n\t* doc/xml/manual/using.xml (Finding Dynamic or Shared Libraries):\n\tRemove IRIX example.\n\n\t* testsuite/20_util/shared_ptr/thread/default_weaktoshared.cc:\n\tRemove mips-sgi-irix6* handling.\n\t* testsuite/20_util/shared_ptr/thread/mutex_weaktoshared.cc: Likewise.\n\t* testsuite/21_strings/basic_string/pthread18185.cc: Likewise.\n\t* testsuite/21_strings/basic_string/pthread4.cc: Likewise.\n\t* testsuite/22_locale/locale/cons/12658_thread-1.cc: Likewise.\n\t* testsuite/22_locale/locale/cons/12658_thread-2.cc: Likewise.\n\t* testsuite/23_containers/list/pthread1.cc: Likewise.\n\t* testsuite/23_containers/list/pthread5.cc: Likewise.\n\t* testsuite/23_containers/map/pthread6.cc: Likewise.\n\t* testsuite/23_containers/vector/debug/multithreaded_swap.cc: Likewise.\n\t* testsuite/27_io/basic_ofstream/pthread2.cc: Likewise.\n\t* testsuite/27_io/basic_ostringstream/pthread3.cc: Likewise.\n\t* testsuite/30_threads/async/42819.cc: Likewise.\n\t* testsuite/30_threads/async/49668.cc: Likewise.\n\t* testsuite/30_threads/async/any.cc: Likewise.\n\t* testsuite/30_threads/async/async.cc: Likewise.\n\t* testsuite/30_threads/async/launch.cc: Likewise.\n\t* testsuite/30_threads/async/sync.cc: Likewise.\n\t* testsuite/30_threads/call_once/39909.cc: Likewise.\n\t* testsuite/30_threads/call_once/49668.cc: Likewise.\n\t* testsuite/30_threads/call_once/call_once1.cc: Likewise.\n\t* testsuite/30_threads/condition_variable/cons/1.cc: Likewise.\n\t* testsuite/30_threads/condition_variable/members/1.cc: Likewise.\n\t* testsuite/30_threads/condition_variable/members/2.cc: Likewise.\n\t* testsuite/30_threads/condition_variable/native_handle/typesizes.cc:\n\tLikewise.\n\t* testsuite/30_threads/condition_variable_any/50862.cc: Likewise.\n\t* testsuite/30_threads/condition_variable_any/cons/1.cc: Likewise.\n\t* testsuite/30_threads/condition_variable_any/members/1.cc: Likewise.\n\t* testsuite/30_threads/condition_variable_any/members/2.cc: Likewise.\n\t* testsuite/30_threads/future/cons/move.cc: Likewise.\n\t* testsuite/30_threads/future/members/45133.cc: Likewise.\n\t* testsuite/30_threads/future/members/get.cc: Likewise.\n\t* testsuite/30_threads/future/members/get2.cc: Likewise.\n\t* testsuite/30_threads/future/members/share.cc: Likewise.\n\t* testsuite/30_threads/future/members/valid.cc: Likewise.\n\t* testsuite/30_threads/future/members/wait.cc: Likewise.\n\t* testsuite/30_threads/future/members/wait_for.cc: Likewise.\n\t* testsuite/30_threads/future/members/wait_until.cc: Likewise.\n\t* testsuite/30_threads/lock/1.cc: Likewise.\n\t* testsuite/30_threads/lock/2.cc: Likewise.\n\t* testsuite/30_threads/lock/3.cc: Likewise.\n\t* testsuite/30_threads/lock/4.cc: Likewise.\n\t* testsuite/30_threads/lock_guard/cons/1.cc: Likewise.\n\t* testsuite/30_threads/mutex/cons/1.cc: Likewise.\n\t* testsuite/30_threads/mutex/dest/destructor_locked.cc: Likewise.\n\t* testsuite/30_threads/mutex/lock/1.cc: Likewise.\n\t* testsuite/30_threads/mutex/native_handle/1.cc: Likewise.\n\t* testsuite/30_threads/mutex/native_handle/typesizes.cc: Likewise.\n\t* testsuite/30_threads/mutex/try_lock/1.cc: Likewise.\n\t* testsuite/30_threads/mutex/try_lock/2.cc: Likewise.\n\t* testsuite/30_threads/mutex/unlock/1.cc: Likewise.\n\t* testsuite/30_threads/packaged_task/49668.cc: Likewise.\n\t* testsuite/30_threads/packaged_task/cons/1.cc: Likewise.\n\t* testsuite/30_threads/packaged_task/cons/2.cc: Likewise.\n\t* testsuite/30_threads/packaged_task/cons/3.cc: Likewise.\n\t* testsuite/30_threads/packaged_task/cons/alloc.cc: Likewise.\n\t* testsuite/30_threads/packaged_task/cons/move.cc: Likewise.\n\t* testsuite/30_threads/packaged_task/cons/move_assign.cc: Likewise.\n\t* testsuite/30_threads/packaged_task/members/get_future.cc: Likewise.\n\t* testsuite/30_threads/packaged_task/members/get_future2.cc: Likewise.\n\t* testsuite/30_threads/packaged_task/members/invoke.cc: Likewise.\n\t* testsuite/30_threads/packaged_task/members/invoke2.cc: Likewise.\n\t* testsuite/30_threads/packaged_task/members/invoke3.cc: Likewise.\n\t* testsuite/30_threads/packaged_task/members/invoke4.cc: Likewise.\n\t* testsuite/30_threads/packaged_task/members/invoke5.cc: Likewise.\n\t* testsuite/30_threads/packaged_task/members/reset.cc: Likewise.\n\t* testsuite/30_threads/packaged_task/members/reset2.cc: Likewise.\n\t* testsuite/30_threads/packaged_task/members/swap.cc: Likewise.\n\t* testsuite/30_threads/packaged_task/members/valid.cc: Likewise.\n\t* testsuite/30_threads/promise/cons/1.cc: Likewise.\n\t* testsuite/30_threads/promise/cons/alloc.cc: Likewise.\n\t* testsuite/30_threads/promise/cons/move.cc: Likewise.\n\t* testsuite/30_threads/promise/cons/move_assign.cc: Likewise.\n\t* testsuite/30_threads/promise/members/get_future.cc: Likewise.\n\t* testsuite/30_threads/promise/members/get_future2.cc: Likewise.\n\t* testsuite/30_threads/promise/members/set_exception.cc: Likewise.\n\t* testsuite/30_threads/promise/members/set_exception2.cc: Likewise.\n\t* testsuite/30_threads/promise/members/set_value.cc: Likewise.\n\t* testsuite/30_threads/promise/members/set_value2.cc: Likewise.\n\t* testsuite/30_threads/promise/members/set_value3.cc: Likewise.\n\t* testsuite/30_threads/promise/members/swap.cc: Likewise.\n\t* testsuite/30_threads/recursive_mutex/cons/1.cc: Likewise.\n\t* testsuite/30_threads/recursive_mutex/dest/destructor_locked.cc:\n\tLikewise.\n\t* testsuite/30_threads/recursive_mutex/lock/1.cc: Likewise.\n\t* testsuite/30_threads/recursive_mutex/native_handle/1.cc: Likewise.\n\t* testsuite/30_threads/recursive_mutex/native_handle/typesizes.cc:\n\tLikewise.\n\t* testsuite/30_threads/recursive_mutex/try_lock/1.cc: Likewise.\n\t* testsuite/30_threads/recursive_mutex/try_lock/2.cc: Likewise.\n\t* testsuite/30_threads/recursive_mutex/unlock/1.cc: Likewise.\n\t* testsuite/30_threads/recursive_timed_mutex/cons/1.cc: Likewise.\n\t* testsuite/30_threads/recursive_timed_mutex/dest/destructor_locked.cc:\n\tLikewise.\n\t* testsuite/30_threads/recursive_timed_mutex/lock/1.cc: Likewise.\n\t* testsuite/30_threads/recursive_timed_mutex/lock/2.cc: Likewise.\n\t* testsuite/30_threads/recursive_timed_mutex/native_handle/1.cc:\n\tLikewise.\n\t* testsuite/30_threads/recursive_timed_mutex/native_handle/typesizes.cc:\n\tLikewise.\n\t* testsuite/30_threads/recursive_timed_mutex/try_lock/1.cc: Likewise.\n\t* testsuite/30_threads/recursive_timed_mutex/try_lock/2.cc: Likewise.\n\t* testsuite/30_threads/recursive_timed_mutex/try_lock_for/1.cc:\n\tLikewise.\n\t* testsuite/30_threads/recursive_timed_mutex/try_lock_for/2.cc:\n\tLikewise.\n\t* testsuite/30_threads/recursive_timed_mutex/try_lock_for/3.cc:\n\tLikewise.\n\t* testsuite/30_threads/recursive_timed_mutex/try_lock_until/1.cc:\n\tLikewise.\n\t* testsuite/30_threads/recursive_timed_mutex/try_lock_until/2.cc:\n\tLikewise.\n\t* testsuite/30_threads/recursive_timed_mutex/unlock/1.cc: Likewise.\n\t* testsuite/30_threads/shared_future/cons/move.cc: Likewise.\n\t* testsuite/30_threads/shared_future/members/45133.cc: Likewise.\n\t* testsuite/30_threads/shared_future/members/get.cc: Likewise.\n\t* testsuite/30_threads/shared_future/members/get2.cc: Likewise.\n\t* testsuite/30_threads/shared_future/members/valid.cc: Likewise.\n\t* testsuite/30_threads/shared_future/members/wait.cc: Likewise.\n\t* testsuite/30_threads/shared_future/members/wait_for.cc: Likewise.\n\t* testsuite/30_threads/shared_future/members/wait_until.cc: Likewise.\n\t* testsuite/30_threads/this_thread/1.cc: Likewise.\n\t* testsuite/30_threads/this_thread/2.cc: Likewise.\n\t* testsuite/30_threads/this_thread/3.cc: Likewise.\n\t* testsuite/30_threads/this_thread/4.cc: Likewise.\n\t* testsuite/30_threads/thread/cons/1.cc: Likewise.\n\t* testsuite/30_threads/thread/cons/2.cc: Likewise.\n\t* testsuite/30_threads/thread/cons/3.cc: Likewise.\n\t* testsuite/30_threads/thread/cons/4.cc: Likewise.\n\t* testsuite/30_threads/thread/cons/49668.cc: Likewise.\n\t* testsuite/30_threads/thread/cons/5.cc: Likewise.\n\t* testsuite/30_threads/thread/cons/6.cc: Likewise.\n\t* testsuite/30_threads/thread/cons/7.cc: Likewise.\n\t* testsuite/30_threads/thread/cons/8.cc: Likewise.\n\t* testsuite/30_threads/thread/cons/9.cc: Likewise.\n\t* testsuite/30_threads/thread/cons/moveable.cc: Likewise.\n\t* testsuite/30_threads/thread/members/1.cc: Likewise.\n\t* testsuite/30_threads/thread/members/2.cc: Likewise.\n\t* testsuite/30_threads/thread/members/3.cc: Likewise.\n\t* testsuite/30_threads/thread/members/4.cc: Likewise.\n\t* testsuite/30_threads/thread/members/5.cc: Likewise.\n\t* testsuite/30_threads/thread/members/hardware_concurrency.cc: Likewise.\n\t* testsuite/30_threads/thread/native_handle/typesizes.cc: Likewise.\n\t* testsuite/30_threads/thread/swap/1.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/cons/1.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/dest/destructor_locked.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/lock/1.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/native_handle/1.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/native_handle/typesizes.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/try_lock/1.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/try_lock/2.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/try_lock_for/1.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/try_lock_for/2.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/try_lock_for/3.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/try_lock_until/1.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/try_lock_until/2.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/unlock/1.cc: Likewise.\n\t* testsuite/30_threads/try_lock/1.cc: Likewise.\n\t* testsuite/30_threads/try_lock/2.cc: Likewise.\n\t* testsuite/30_threads/try_lock/3.cc: Likewise.\n\t* testsuite/30_threads/try_lock/4.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/cons/1.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/cons/2.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/cons/3.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/cons/4.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/cons/5.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/cons/6.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/locking/1.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/locking/2.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/locking/3.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/locking/4.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/modifiers/1.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/modifiers/2.cc: Likewise.\n\t* testsuite/ext/rope/pthread7-rope.cc: Likewise.\n\t* testsuite/tr1/2_general_utilities/shared_ptr/thread/default_weaktoshared.cc:\n\tLikewise.\n\t* testsuite/tr1/2_general_utilities/shared_ptr/thread/mutex_weaktoshared.cc:\n\tLikewise.\n\n\t* testsuite/23_containers/vector/capacity/resize/1.cc: Remove\n\tdg-options for mips*-*-irix6*.\n\n\t* testsuite/27_io/ios_base/storage/1.cc: Likewise.\n\t* testsuite/27_io/ios_base/storage/2.cc: Likewise.\n\t* testsuite/27_io/ios_base/storage/3.cc: Likewise.\n\n\t* testsuite/lib/libstdc++.exp (v3-build_support): Remove IRIX 6\n\tworkaround.\n\n\tlibjava:\n\t* configure.ac (libgcj_cv_exidx): Remove IRIX 6 ld workaround.\n\t(mips-sgi-irix6*): Remove.\n\t(mips-sgi-irix*): Remove.\n\t(AC_CHECK_HEADERS): Remove bstring.h.\n\t* configure: Regenerate.\n\t* include/config.h.in: Regenerate.\n\t* configure.host (mips-sgi-irix6*): Remove.\n\n\t* include/posix-signal.h [__sgi__]: Remove.\n\n\t* gnu/java/net/natPlainDatagramSocketImplPosix.cc\n\t[HAVE_BSTRING_H]: Remove.\n\t* gnu/java/net/natPlainDatagramSocketImplWin32.cc: Likewise.\n\t* gnu/java/net/natPlainSocketImplPosix.cc: Likewise.\n\n\tlibitm:\n\t* configure.tgt (*-*-irix6*): Remove.\n\n\tlibgomp:\n\t* configure.tgt (mips-sgi-irix6*): Remove.\n\n\tlibgfortran:\n\t* intrinsics/c99_functions.c [__sgi__ && !HAVE_COMPLEX_H]: Remove.\n\n\tlibgcc:\n\t* config.host (mips-sgi-irix6.5*): Remove.\n\t* config/mips/irix-crti.S: Remove.\n\t* config/mips/irix-crtn.S: Remove.\n\t* config/mips/irix6-unwind.h: Remove.\n\t* config/mips/t-irix6: Remove.\n\t* config/mips/t-slibgcc-irix: Remove.\n\n\tgnattools:\n\t* configure.ac (mips-sgi-irix*): Remove.\n\t* configure: Regenerate.\n\n\tgcc/testsuite:\n\t* g++.dg/other/anon5.C: Don't skip on mips-sgi-irix*.\n\t* g++.dg/tree-prof/partition1.C: Likewise.\n\t* g++.dg/tree-prof/partition2.C: Likewise.\n\t* g++.old-deja/g++.other/init19.C: Remove mips-sgi-irix*\n\thandling.\n\t* gcc.c-torture/compile/labels-3.c: Remove dg-options.\n\t* gcc.c-torture/execute/20010724-1.c: Remove.\n\t* gcc.c-torture/execute/20010724-1.x: Remove.\n\t* gcc.c-torture/execute/20040208-2.c: Remove.\n\t* gcc.c-torture/execute/20040208-2.x: Remove.\n\t* gcc.c-torture/execute/ieee/20000320-1.c [__mips__ && __sgi__]:\n\tRemove.\n\t(main) [__mips__ && __sgi__]: Remove.\n\t* gcc.c-torture/execute/ieee/copysign1.c: Remove IRIX reference.\n\t* gcc.c-torture/execute/ieee/copysign2.c: Likewise.\n\t* gcc.c-torture/execute/ieee/mul-subnormal-single-1.x: Remove\n\tmips-sgi-irix6* handling.\n\t* gcc.dg/cpp/assert4.c [__mips__]: Remove __sgi__, sgi.\n\t* gcc.dg/torture/20090618-1.c: Don't skip on mips-sgi-irix*.\n\t* gcc.dg/torture/builtin-frexp-1.c: Remove mips*-*-irix6*\n\thandling.\n\t* gcc.dg/torture/builtin-logb-1.c: Likewise.\n\t* gcc.dg/torture/pr47917.c: Remove mips-sgi-irix6.5 handling.\n\t* gcc.dg/tree-ssa/ssa-store-ccp-3.c: Don't skip on mips*-*-irix*.\n\t* gcc.misc-tests/linkage.exp: Remove mips-sgi-irix6* handling.\n\t* gcc.target/mips/args-1.c [!__sgi__]: Remove.\n\t* gcc.target/mips/interrupt_handler-2.c: Don't skip on\n\tmips-sgi-irix6*.\n\t* gcc.target/mips/interrupt_handler-3.c: Likewise.\n\t* gcc.target/mips/save-restore-1.c: Don't skip on mips-sgi-irix6*.\n\t* gcc.target/mips/save-restore-3.c: Likewise.\n\t* gcc.target/mips/save-restore-4.c: Likewise.\n\t* gcc.target/mips/save-restore-5.c: Likewise.\n\t* gfortran.dg/g77/cabs.f: Don't xfail on mips-sgi-irix6*.\n\t* lib/prune.exp (prune_gcc_output): Remove pruning of IRIX 6 ld\n\tmessages.\n\t* lib/target-libpath.exp (set_ld_library_path_env_vars): Remove\n\tIRIX 6 handling.\n\t(restore_ld_library_path_env_vars): Likewise.\n\t* lib/target-supports.exp (check_profiling_available): Remove\n\tmips*-*-irix* handling.\n\t(check_ascii_locale_available): Remove mips-sgi-irix* handling.\n\t(add_options_for_c99_runtime): Remove mips-sgi-irix6.5* handling.\n\t* objc.dg/stabs-1.m: Don't xfail on mips-sgi-irix6.5.\n\n\tgcc/ada:\n\t* gcc-interface/Makefile.in (mips-sgi-irix6*): Remove.\n\n\t* a-intnam-irix.ads, mlib-tgt-specific-irix.adb,\n\ts-intman-irix.adb, s-mastop-irix.adb, s-osinte-irix.adb,\n\ts-osinte-irix.ads, s-proinf-irix-athread.adb,\n\ts-proinf-irix-athread.ads, s-taprop-irix.adb, s-tasinf-irix.ads,\n\tsystem-irix-n32.ads, system-irix-n64.ads, system-irix-o32.ads:\n\tRemove.\n\n\t* adaint.c [__mips && __sgi]: Remove.\n\t(__gnat_number_of_cpus) [__mips && __sgi]: Remove.\n\t[IS_CROSS && !(__mips && __sgi)]: Remove.\n\t* adaint.h [sgi && _LFAPI]: Remove.\n\t* cstreams.c (__gnat_full_name) [sgi]: Remove.\n\t* env.c (__gnat_unsetenv) [__mips && __sgi]: Remove.\n\t(__gnat_clearenv) [__mips && __sgi]: Remove.\n\t* errno.c (_SGI_MP_SOURCE): Remove.\n\t* gsocket.h [sgi]: Remove.\n\t* init.c: Remove IRIX reference.\n\t[sgi]: Remove.\n\t* link.c [sgi]: Remove.\n\t* s-oscons-tmplt.c [__mips && __sgi] (IOV_MAX): Don't define.\n\t(main) [__mips && __sgi] (MAX_tv_sec): Don't define.\n\t(CLOCK_SGI_FAST, CLOCK_SGI_CYCLE): Remove.\n\t* sysdep.c [sgi]: Remove.\n\t(getc_immediate_common) [sgi]: Remove.\n\t(__gnat_localtime_tzoff) [sgi]: Remove.\n\t* terminals.c [__mips && __sgi] (IRIX): Don't define.\n\t[IRIX] (USE_GETPTY): Don't define.\n\t(allocate_pty_desc) [USE_GETPTY]: Remove.\n\n\t* g-traceb.ads: Remove IRIX reference.\n\t* g-trasym.ads: Likewise.\n\t* memtrack.adb: Likewise.\n\t* s-interr-sigaction.adb: Likewise.\n\n\t* gnat_rm.texi (Implementation Advice): Remove SGI info.\n\t(Implementation Defined Characteristics): Likewise.\n\t* gnat_ugn.texi (Summary of Run-Time Configurations, mips-irix):\n\tRemove.\n\t(Irix-Specific Considerations): Remove.\n\n\tgcc/cp:\n\t* Make-lang.in (doc/g++.1): Remove IRIX 6.5 reference.\n\n\tgcc:\n\t* config.gcc (enable_obsolete): Remove mips-sgi-irix6.5.\n\t(mips-sgi-irix6.5*): Remove.\n\t* config.host (mips-sgi-irix*): Remove.\n\t* configure.ac (enable_fixed_point): Remove mips*-sgi-irix*.\n\t(set_have_as_tls): Remove *-*-irix6*.\n\t(gcc_cv_ld_static_dynamic): Remove mips-sgi-irix6*.\n\t* configure: Regenerate.\n\n\t* config/mips/iris6.h: Remove.\n\t* config/mips/iris6.opt: Remove.\n\t* config/mips/t-irix6: Remove.\n\n\t* config/mips/mips.h (TARGET_GPWORD): Remove IRIX 6 N64 handling.\n\t(TARGET_IRIX6): Remove.\n\t(TARGET_CPU_CPP_BUILTINS): Remove IRIX 6 handling.\n\tDon't define LANGUAGE_C, _LANGUAGE_C for Objective-C.\n\t* config/mips/mips.c (mips_build_builtin_va_list): Remove IRIX 6\n\thandling.\n\t(mips_file_start): Likewise.\n\t* config/mips/mips-protos.h (irix_asm_output_align): Remove.\n\n\t* config/mips/driver-native.c [__sgi__]: Remove.\n\t(host_detect_local_cpu) [__sgi__]: Remove.\n\n\t* config/mips/gnu-user.h: Remove iris5.h reference.\n\n\t* config/mips/mips-modes.def: Remove IRIX 6 reference.\n\t* config/mips/gnu-user64.h (MIPS_TFMODE_FORMAT): Remove.\n\t* config/mips/mips.c (mips_option_override) [MIPS_TFMODE_FORMAT]:\n\tRemove.\n\n\t* gcc.c (main): Move asm_debug initialization ...\n\t(asm_debug): ... here.\n\n\t* ginclude/stddef.h (__STDDEF_H__): Don't define.\n\n\t* defaults.h (LINK_ELIMINATE_DUPLICATE_LDIRECTORIES): Remove.\n\t* system.h (LINK_ELIMINATE_DUPLICATE_LDIRECTORIES): Poison.\n\t* collect2.c [LINK_ELIMINATE_DUPLICATE_LDIRECTORIES]: Remove.\n\t(main) [LINK_ELIMINATE_DUPLICATE_LDIRECTORIES]: Remove.\n\t[LINK_ELIMINATE_DUPLICATE_LDIRECTORIES] (is_in_args): Remove.\n\t* doc/tm.texi.in (Driver, LINK_ELIMINATE_DUPLICATE_LDIRECTORIES):\n\tRemove.\n\t* doc/tm.texi: Regenerate.\n\n\t* doc/invoke.texi (Debugging Options, -gdwarf-<version>): Remove\n\tIRIX 6 reference.\n\t(MIPS Options, -march): Remove IRIX reference.\n\t* doc/install.texi (Binaries, SGI IRIX): Remove.\n\t(Specific, mips-sgi-irix6): Document IRIX 6.5 removal, remove rest\n\tof section.\n\t* doc/trouble.texi (Interoperation): Remove -lgl_s handling.\n\n\tfixincludes:\n\t* inclhack.def (broken_cabs): Remove IRIX and SunOS 4 support.\n\t(irix___restrict): Remove.\n\t(irix___generic1): Remove.\n\t(irix___generic2): Remove.\n\t(irix_asm_apostrophe): Remove.\n\t(irix_complex): Remove.\n\t(irix_pthread_init): Remove.\n\t(irix_socklen_t): Remove.\n\t(irix_stdint_c99_mode): Remove.\n\t(irix_stdint_c99_types): Remove.\n\t(irix_stdint_c99_macros): Remove.\n\t(irix_stdio_va_list): Remove IRIX 6.5 support.\n\t(irix_wcsftime): Remove.\n\t(stdio_va_list): Remove IRIX 6.5 support.\n\t(svr4_profil): Remove IRIX bypass.\n\t* fixincl.x: Regenerate.\n\n\t* tests/base/complex.h [IRIX_COMPLEX_CHECK]: Remove.\n\t* tests/base/internal/math_core.h: Remove.\n\t* tests/base/internal/sgimacros.h: Remove.\n\t* tests/base/internal/wchar_core.h: Remove.\n\t* tests/base/math.h [BROKEN_CABS_CHECK]: Remove IRIX and SunOS 4\n\tsupport.\n\t* tests/base/pthread.h [IRIX_PTHREAD_INIT_CHECK]: Remove.\n\t* tests/base/stdint-irix65.h: Remove.\n\t* tests/base/stdint.h [IRIX_STDINT_C99_MODE_CHECK]: Remove.\n\t* tests/base/sys/asm.h: Remove.\n\t* tests/base/sys/socket.h [IRIX_SOCKLEN_T_CHECK]: Remove.\n\n\tcontrib:\n\t* config-list.mk (LIST): Remove mips-sgi-irix6.5.\n\n\ttoplevel:\n\t* MAINTAINERS (OS Port Maintainers): Remove irix.\n\t* configure.ac (enable_libgomp): Remove *-*-irix6*.\n\t(unsupported_languages): Remove mips-sgi-irix6.*.\n\t(noconfigdirs): Don't add ${libgcj} for mips*-*-irix6*.\n\t(with_stabs): Remove.\n\t* configure: Regenerate.\n\nFrom-SVN: r185390", "tree": {"sha": "5175e6fd7593bf938b7a2ead15292f42da0c81e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5175e6fd7593bf938b7a2ead15292f42da0c81e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b24513a1a2bb350286e09bb124c3dbcea348be92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b24513a1a2bb350286e09bb124c3dbcea348be92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b24513a1a2bb350286e09bb124c3dbcea348be92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b24513a1a2bb350286e09bb124c3dbcea348be92/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "02f6574b2b58d88f6dfc355985cd9013e918bf77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02f6574b2b58d88f6dfc355985cd9013e918bf77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02f6574b2b58d88f6dfc355985cd9013e918bf77"}], "stats": {"total": 8118, "additions": 925, "deletions": 7193}, "files": [{"sha": "c652b1942981c57ff3f0f3e4e23ace52d0a3c75d", "filename": "ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,3 +1,12 @@\n+2012-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* MAINTAINERS (OS Port Maintainers): Remove irix.\n+\t* configure.ac (enable_libgomp): Remove *-*-irix6*.\n+\t(unsupported_languages): Remove mips-sgi-irix6.*.\n+\t(noconfigdirs): Don't add ${libgcj} for mips*-*-irix6*.\n+\t(with_stabs): Remove.\n+\t* configure: Regenerate.\n+\n 2012-03-12  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* MAINTAINERS (OS Port Maintainers): Remove osf."}, {"sha": "9514f70940de2f162fb30cb17617621e797982be", "filename": "MAINTAINERS", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/MAINTAINERS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/MAINTAINERS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/MAINTAINERS?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -122,7 +122,7 @@ freebsd\t\t\tLoren J. Rittle\t\tljrittle@acm.org\n GNU/Hurd\t\tThomas Schwinge\t\tthomas@schwinge.name\n hpux\t\t\tJohn David Anglin\tdave.anglin@nrc-cnrc.gc.ca\n hpux\t\t\tSteve Ellcey\t\tsje@cup.hp.com\n-irix, solaris\t\tRainer Orth\t\tro@CeBiTec.Uni-Bielefeld.DE\n+solaris\t\t\tRainer Orth\t\tro@CeBiTec.Uni-Bielefeld.DE\n netbsd\t\t\tJason Thorpe\t\tthorpej@netbsd.org\n netbsd\t\t\tKrister Walfridsson\tkrister.walfridsson@gmail.com\n sh-linux-gnu\t\tKaz Kojima\t\tkkojima@gcc.gnu.org"}, {"sha": "ac34e6674f6c9cbd9dd1cdbafcf05bfbb6848156", "filename": "configure", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -3054,7 +3054,7 @@ if test x$enable_libgomp = x ; then\n \t;;\n     *-*-netbsd* | *-*-freebsd* | *-*-openbsd* | *-*-dragonfly*)\n \t;;\n-    *-*-solaris2* | *-*-irix6* | *-*-hpux11*)\n+    *-*-solaris2* | *-*-hpux11*)\n \t;;\n     *-*-darwin* | *-*-aix*)\n \t;;\n@@ -3145,7 +3145,7 @@ case \"${target}\" in\n     ;;\n   m68k-*-*)\n     ;;\n-  mips-sgi-irix6.* | mips*-*-rtems*)\n+  mips*-*-rtems*)\n     ;;\n   mips*-*-linux*)\n     ;;\n@@ -3261,13 +3261,6 @@ case \"${target}\" in\n   rs6000-*-aix*)\n     noconfigdirs=\"$noconfigdirs ${libgcj}\"\n     ;;\n-  mips*-*-irix6*)\n-    # Linking libjava exceeds command-line length limits on at least\n-    # IRIX 6.2, but not on IRIX 6.5.\n-    # Also, boehm-gc won't build on IRIX 6.5, according to Jeffrey Oldham\n-    # <oldham@codesourcery.com>\n-    noconfigdirs=\"$noconfigdirs ${libgcj}\"\n-    ;;\n   *-*-lynxos*)\n     noconfigdirs=\"$noconfigdirs ${libgcj}\"\n     ;;\n@@ -6873,18 +6866,6 @@ case \"${enable_target_optspace}:${target}\" in\n     ;;\n esac\n \n-# Default to using --with-stabs for certain targets.\n-if test x${with_stabs} = x ; then\n-  case \"${target}\" in\n-  mips*-*-irix[56]*)\n-    ;;\n-  mips*-*-*)\n-    with_stabs=yes;\n-    extra_host_args=\"${extra_host_args} --with-stabs\"\n-    ;;\n-  esac\n-fi\n-\n # Some systems (e.g., one of the i386-aix systems the gas testers are\n # using) don't handle \"\\$\" correctly, so don't use it here.\n tooldir='${exec_prefix}'/${target_noncanonical}"}, {"sha": "9195bd711ed7eb1751c1e50794150fd5826e9826", "filename": "configure.ac", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -483,7 +483,7 @@ if test x$enable_libgomp = x ; then\n \t;;\n     *-*-netbsd* | *-*-freebsd* | *-*-openbsd* | *-*-dragonfly*)\n \t;;\n-    *-*-solaris2* | *-*-irix6* | *-*-hpux11*)\n+    *-*-solaris2* | *-*-hpux11*)\n \t;;\n     *-*-darwin* | *-*-aix*)\n \t;;\n@@ -571,7 +571,7 @@ case \"${target}\" in\n     ;;\n   m68k-*-*)\n     ;;\n-  mips-sgi-irix6.* | mips*-*-rtems*)\n+  mips*-*-rtems*)\n     ;;\n   mips*-*-linux*)\n     ;;\n@@ -687,13 +687,6 @@ case \"${target}\" in\n   rs6000-*-aix*)\n     noconfigdirs=\"$noconfigdirs ${libgcj}\"\n     ;;\n-  mips*-*-irix6*)\n-    # Linking libjava exceeds command-line length limits on at least\n-    # IRIX 6.2, but not on IRIX 6.5.\n-    # Also, boehm-gc won't build on IRIX 6.5, according to Jeffrey Oldham\n-    # <oldham@codesourcery.com>\n-    noconfigdirs=\"$noconfigdirs ${libgcj}\"\n-    ;;\n   *-*-lynxos*)\n     noconfigdirs=\"$noconfigdirs ${libgcj}\"\n     ;; \n@@ -2331,18 +2324,6 @@ case \"${enable_target_optspace}:${target}\" in\n     ;;\n esac\n \n-# Default to using --with-stabs for certain targets.\n-if test x${with_stabs} = x ; then\n-  case \"${target}\" in\n-  mips*-*-irix[[56]]*)\n-    ;;\n-  mips*-*-*)\n-    with_stabs=yes;\n-    extra_host_args=\"${extra_host_args} --with-stabs\"\n-    ;;\n-  esac\n-fi\n-\n # Some systems (e.g., one of the i386-aix systems the gas testers are\n # using) don't handle \"\\$\" correctly, so don't use it here.\n tooldir='${exec_prefix}'/${target_noncanonical}"}, {"sha": "210a7dc215bd02e2d1e3215d43dce2da876febb8", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,3 +1,7 @@\n+2012-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config-list.mk (LIST): Remove mips-sgi-irix6.5.\n+\n 2012-03-13  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gennews (files): Add files for GCC 4.7."}, {"sha": "72813159d3d52c6aaa779873f9a6c48453c8acaa", "filename": "contrib/config-list.mk", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/contrib%2Fconfig-list.mk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/contrib%2Fconfig-list.mk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fconfig-list.mk?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -36,7 +36,6 @@ LIST = alpha-linux-gnu alpha-freebsd6 alpha-netbsd alpha-openbsd \\\n   m32r-linux m32rle-linux m68k-elf m68k-netbsdelf \\\n   m68k-openbsd m68k-uclinux m68k-linux m68k-rtems \\\n   mcore-elf mep-elf microblaze-linux microblaze-elf \\\n-  mips-sgi-irix6.5OPT-with-stabsOPT-enable-threads=posixOPT-enable-obsolete \\\n   mips-netbsd \\\n   mips64el-st-linux-gnu mips64octeon-linux mipsisa64r2-linux \\\n   mipsisa32r2-linux-gnu mipsisa64r2-sde-elf mipsisa32-elfoabi \\"}, {"sha": "4f59eda0bd0b740a54322d5744aea1370b31aa1a", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,3 +1,34 @@\n+2012-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* inclhack.def (broken_cabs): Remove IRIX and SunOS 4 support.\n+\t(irix___restrict): Remove.\n+\t(irix___generic1): Remove.\n+\t(irix___generic2): Remove.\n+\t(irix_asm_apostrophe): Remove.\n+\t(irix_complex): Remove.\n+\t(irix_pthread_init): Remove.\n+\t(irix_socklen_t): Remove.\n+\t(irix_stdint_c99_mode): Remove.\n+\t(irix_stdint_c99_types): Remove.\n+\t(irix_stdint_c99_macros): Remove.\n+\t(irix_stdio_va_list): Remove IRIX 6.5 support.\n+\t(irix_wcsftime): Remove.\n+\t(stdio_va_list): Remove IRIX 6.5 support.\n+\t(svr4_profil): Remove IRIX bypass.\n+\t* fixincl.x: Regenerate.\n+\n+\t* tests/base/complex.h [IRIX_COMPLEX_CHECK]: Remove.\n+\t* tests/base/internal/math_core.h: Remove.\n+\t* tests/base/internal/sgimacros.h: Remove.\n+\t* tests/base/internal/wchar_core.h: Remove.\n+\t* tests/base/math.h [BROKEN_CABS_CHECK]: Remove IRIX and SunOS 4\n+\tsupport.\n+\t* tests/base/pthread.h [IRIX_PTHREAD_INIT_CHECK]: Remove.\n+\t* tests/base/stdint-irix65.h: Remove.\n+\t* tests/base/stdint.h [IRIX_STDINT_C99_MODE_CHECK]: Remove.\n+\t* tests/base/sys/asm.h: Remove.\n+\t* tests/base/sys/socket.h [IRIX_SOCKLEN_T_CHECK]: Remove.\n+\n 2012-03-12  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* inclhack.def (alpha___extern_prefix): Remove."}, {"sha": "ba7babc17be5f01df1999e6f6e71a1abf00d16ff", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 8, "deletions": 512, "changes": 520, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Monday March 12, 2012 at 04:25:19 PM MET\n+ * It has been AutoGen-ed  Wednesday March 14, 2012 at 02:41:19 PM MET\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Mon Mar 12 16:25:19 MET 2012\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Wed Mar 14 14:41:19 MET 2012\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 223 fixup descriptions.\n+ * This file contains 212 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -4314,203 +4314,6 @@ static const char* apzIp_Missing_SemiPatch[] = { sed_cmd_z,\n     \"-e\", \"/^struct/,/^};/s/}$/};/\",\n     (char*)NULL };\n \n-/* * * * * * * * * * * * * * * * * * * * * * * * * *\n- *\n- *  Description of Irix___Restrict fix\n- */\n-tSCC zIrix___RestrictName[] =\n-     \"irix___restrict\";\n-\n-/*\n- *  File name selection pattern\n- */\n-tSCC zIrix___RestrictList[] =\n-  \"internal/sgimacros.h\\0\";\n-/*\n- *  Machine/OS name selection pattern\n- */\n-tSCC* apzIrix___RestrictMachs[] = {\n-        \"mips-sgi-irix6.5\",\n-        (const char*)NULL };\n-\n-/*\n- *  content selection pattern - do fix if pattern found\n- */\n-tSCC zIrix___RestrictSelect0[] =\n-       \"(#ifdef __c99\\n\\\n-)(#[ \\t]*define __restrict restrict)\";\n-\n-#define    IRIX___RESTRICT_TEST_CT  1\n-static tTestDesc aIrix___RestrictTests[] = {\n-  { TT_EGREP,    zIrix___RestrictSelect0, (regex_t*)NULL }, };\n-\n-/*\n- *  Fix Command Arguments for Irix___Restrict\n- */\n-static const char* apzIrix___RestrictPatch[] = {\n-    \"format\",\n-    \"%1#  ifndef __cplusplus\\n\\\n-%2\\n\\\n-#  endif\",\n-    (char*)NULL };\n-\n-/* * * * * * * * * * * * * * * * * * * * * * * * * *\n- *\n- *  Description of Irix___Generic1 fix\n- */\n-tSCC zIrix___Generic1Name[] =\n-     \"irix___generic1\";\n-\n-/*\n- *  File name selection pattern\n- */\n-tSCC zIrix___Generic1List[] =\n-  \"internal/math_core.h\\0\";\n-/*\n- *  Machine/OS name selection pattern\n- */\n-tSCC* apzIrix___Generic1Machs[] = {\n-        \"mips-sgi-irix6.5\",\n-        (const char*)NULL };\n-\n-/*\n- *  content selection pattern - do fix if pattern found\n- */\n-tSCC zIrix___Generic1Select0[] =\n-       \"#define ([a-z]+)\\\\(x\\\\) *__generic.*\";\n-\n-#define    IRIX___GENERIC1_TEST_CT  1\n-static tTestDesc aIrix___Generic1Tests[] = {\n-  { TT_EGREP,    zIrix___Generic1Select0, (regex_t*)NULL }, };\n-\n-/*\n- *  Fix Command Arguments for Irix___Generic1\n- */\n-static const char* apzIrix___Generic1Patch[] = {\n-    \"format\",\n-    \"extern int %1(double);\\n\\\n-extern int %1f(float);\\n\\\n-extern int %1l(long double);\\n\\\n-#define %1(x) (sizeof(x) == sizeof(double) ? _%1(x) \\\\\\n\\\n-               : sizeof(x) == sizeof(float) ? _%1f(x) \\\\\\n\\\n-               : _%1l(x))\\n\",\n-    (char*)NULL };\n-\n-/* * * * * * * * * * * * * * * * * * * * * * * * * *\n- *\n- *  Description of Irix___Generic2 fix\n- */\n-tSCC zIrix___Generic2Name[] =\n-     \"irix___generic2\";\n-\n-/*\n- *  File name selection pattern\n- */\n-tSCC zIrix___Generic2List[] =\n-  \"internal/math_core.h\\0\";\n-/*\n- *  Machine/OS name selection pattern\n- */\n-tSCC* apzIrix___Generic2Machs[] = {\n-        \"mips-sgi-irix6.5\",\n-        (const char*)NULL };\n-\n-/*\n- *  content selection pattern - do fix if pattern found\n- */\n-tSCC zIrix___Generic2Select0[] =\n-       \"#define ([a-z]+)\\\\(x,y\\\\) *__generic.*\";\n-\n-#define    IRIX___GENERIC2_TEST_CT  1\n-static tTestDesc aIrix___Generic2Tests[] = {\n-  { TT_EGREP,    zIrix___Generic2Select0, (regex_t*)NULL }, };\n-\n-/*\n- *  Fix Command Arguments for Irix___Generic2\n- */\n-static const char* apzIrix___Generic2Patch[] = {\n-    \"format\",\n-    \"#define %1(x,y) \\\\\\n\\\n-  ((sizeof(x)<=4 && sizeof(y)<=4) ? _%1f(x,y) \\\\\\n\\\n-   : (sizeof(x)<=8 && sizeof(y)<=8) ? _%1(x,y) \\\\\\n\\\n-   : _%1l(x,y))\\n\",\n-    (char*)NULL };\n-\n-/* * * * * * * * * * * * * * * * * * * * * * * * * *\n- *\n- *  Description of Irix_Asm_Apostrophe fix\n- */\n-tSCC zIrix_Asm_ApostropheName[] =\n-     \"irix_asm_apostrophe\";\n-\n-/*\n- *  File name selection pattern\n- */\n-tSCC zIrix_Asm_ApostropheList[] =\n-  \"sys/asm.h\\0\";\n-/*\n- *  Machine/OS name selection pattern\n- */\n-#define apzIrix_Asm_ApostropheMachs (const char**)NULL\n-\n-/*\n- *  content selection pattern - do fix if pattern found\n- */\n-tSCC zIrix_Asm_ApostropheSelect0[] =\n-       \"^[ \\t]*#.*[Ww]e're\";\n-\n-#define    IRIX_ASM_APOSTROPHE_TEST_CT  1\n-static tTestDesc aIrix_Asm_ApostropheTests[] = {\n-  { TT_EGREP,    zIrix_Asm_ApostropheSelect0, (regex_t*)NULL }, };\n-\n-/*\n- *  Fix Command Arguments for Irix_Asm_Apostrophe\n- */\n-static const char* apzIrix_Asm_ApostrophePatch[] = {\n-    \"format\",\n-    \"%1 are\",\n-    \"^([ \\t]*#.*[Ww]e)'re\",\n-    (char*)NULL };\n-\n-/* * * * * * * * * * * * * * * * * * * * * * * * * *\n- *\n- *  Description of Irix_Complex fix\n- */\n-tSCC zIrix_ComplexName[] =\n-     \"irix_complex\";\n-\n-/*\n- *  File name selection pattern\n- */\n-tSCC zIrix_ComplexList[] =\n-  \"complex.h\\0\";\n-/*\n- *  Machine/OS name selection pattern\n- */\n-tSCC* apzIrix_ComplexMachs[] = {\n-        \"mips-sgi-irix6.5\",\n-        (const char*)NULL };\n-\n-/*\n- *  content selection pattern - do fix if pattern found\n- */\n-tSCC zIrix_ComplexSelect0[] =\n-       \"#define[ \\t]_Complex_I[ \\t]\\\\(\\\\(float[ \\t]_Complex\\\\)[ \\t]\\\\(__I__\\\\)\\\\)\";\n-\n-#define    IRIX_COMPLEX_TEST_CT  1\n-static tTestDesc aIrix_ComplexTests[] = {\n-  { TT_EGREP,    zIrix_ComplexSelect0, (regex_t*)NULL }, };\n-\n-/*\n- *  Fix Command Arguments for Irix_Complex\n- */\n-static const char* apzIrix_ComplexPatch[] = { sed_cmd_z,\n-    \"-e\", \"s/#define[ \\t]_Complex_I[ \\t]((float[ \\t]_Complex)[ \\t](__I__))/#define _Complex_I (__extension__ 1.0iF)/\",\n-    \"-e\", \"/#define[ \\t]imaginary[ \\t]_Imaginary/d\",\n-    \"-e\", \"/#define[ \\t]_Imaginary_I/d\",\n-    \"-e\", \"s/#define[ \\t]I[ \\t]_Imaginary_I/#define I _Complex_I/\",\n-    (char*)NULL };\n-\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Irix_Limits_Const fix\n@@ -4546,201 +4349,6 @@ static const char* apzIrix_Limits_ConstPatch[] = {\n     \"extern __const \",\n     (char*)NULL };\n \n-/* * * * * * * * * * * * * * * * * * * * * * * * * *\n- *\n- *  Description of Irix_Pthread_Init fix\n- */\n-tSCC zIrix_Pthread_InitName[] =\n-     \"irix_pthread_init\";\n-\n-/*\n- *  File name selection pattern\n- */\n-tSCC zIrix_Pthread_InitList[] =\n-  \"pthread.h\\0\";\n-/*\n- *  Machine/OS name selection pattern\n- */\n-tSCC* apzIrix_Pthread_InitMachs[] = {\n-        \"mips-sgi-irix6.5\",\n-        (const char*)NULL };\n-\n-/*\n- *  content selection pattern - do fix if pattern found\n- */\n-tSCC zIrix_Pthread_InitSelect0[] =\n-       \"^(#define[ \\t]+PTHREAD_.*_INITIALIZER[ \\t]+)(\\\\{ 0 \\\\})\";\n-\n-#define    IRIX_PTHREAD_INIT_TEST_CT  1\n-static tTestDesc aIrix_Pthread_InitTests[] = {\n-  { TT_EGREP,    zIrix_Pthread_InitSelect0, (regex_t*)NULL }, };\n-\n-/*\n- *  Fix Command Arguments for Irix_Pthread_Init\n- */\n-static const char* apzIrix_Pthread_InitPatch[] = {\n-    \"format\",\n-    \"%1{ %2 }\",\n-    (char*)NULL };\n-\n-/* * * * * * * * * * * * * * * * * * * * * * * * * *\n- *\n- *  Description of Irix_Socklen_T fix\n- */\n-tSCC zIrix_Socklen_TName[] =\n-     \"irix_socklen_t\";\n-\n-/*\n- *  File name selection pattern\n- */\n-tSCC zIrix_Socklen_TList[] =\n-  \"sys/socket.h\\0\";\n-/*\n- *  Machine/OS name selection pattern\n- */\n-tSCC* apzIrix_Socklen_TMachs[] = {\n-        \"mips-sgi-irix6.5\",\n-        (const char*)NULL };\n-\n-/*\n- *  content selection pattern - do fix if pattern found\n- */\n-tSCC zIrix_Socklen_TSelect0[] =\n-       \"(#define _SOCKLEN_T\\n\\\n-)(typedef u_int32_t socklen_t;)\";\n-\n-#define    IRIX_SOCKLEN_T_TEST_CT  1\n-static tTestDesc aIrix_Socklen_TTests[] = {\n-  { TT_EGREP,    zIrix_Socklen_TSelect0, (regex_t*)NULL }, };\n-\n-/*\n- *  Fix Command Arguments for Irix_Socklen_T\n- */\n-static const char* apzIrix_Socklen_TPatch[] = {\n-    \"format\",\n-    \"%1#if _NO_XOPEN4 && _NO_XOPEN5\\n\\\n-typedef int socklen_t;\\n\\\n-#else\\n\\\n-%2\\n\\\n-#endif /* _NO_XOPEN4 && _NO_XOPEN5 */\",\n-    (char*)NULL };\n-\n-/* * * * * * * * * * * * * * * * * * * * * * * * * *\n- *\n- *  Description of Irix_Stdint_C99_Mode fix\n- */\n-tSCC zIrix_Stdint_C99_ModeName[] =\n-     \"irix_stdint_c99_mode\";\n-\n-/*\n- *  File name selection pattern\n- */\n-tSCC zIrix_Stdint_C99_ModeList[] =\n-  \"stdint.h\\0\";\n-/*\n- *  Machine/OS name selection pattern\n- */\n-tSCC* apzIrix_Stdint_C99_ModeMachs[] = {\n-        \"mips-sgi-irix6.5\",\n-        (const char*)NULL };\n-\n-/*\n- *  content selection pattern - do fix if pattern found\n- */\n-tSCC zIrix_Stdint_C99_ModeSelect0[] =\n-       \"(#ifndef __c99\\n\\\n-)(#error This header file is to be used only for c99 mode compilations)\";\n-\n-#define    IRIX_STDINT_C99_MODE_TEST_CT  1\n-static tTestDesc aIrix_Stdint_C99_ModeTests[] = {\n-  { TT_EGREP,    zIrix_Stdint_C99_ModeSelect0, (regex_t*)NULL }, };\n-\n-/*\n- *  Fix Command Arguments for Irix_Stdint_C99_Mode\n- */\n-static const char* apzIrix_Stdint_C99_ModePatch[] = {\n-    \"format\",\n-    \"#if 0\\n\\\n-%2\",\n-    (char*)NULL };\n-\n-/* * * * * * * * * * * * * * * * * * * * * * * * * *\n- *\n- *  Description of Irix_Stdint_C99_Types fix\n- */\n-tSCC zIrix_Stdint_C99_TypesName[] =\n-     \"irix_stdint_c99_types\";\n-\n-/*\n- *  File name selection pattern\n- */\n-tSCC zIrix_Stdint_C99_TypesList[] =\n-  \"stdint-irix65.h\\0stdint.h\\0\";\n-/*\n- *  Machine/OS name selection pattern\n- */\n-tSCC* apzIrix_Stdint_C99_TypesMachs[] = {\n-        \"mips-sgi-irix6.5\",\n-        (const char*)NULL };\n-#define IRIX_STDINT_C99_TYPES_TEST_CT  0\n-#define aIrix_Stdint_C99_TypesTests   (tTestDesc*)NULL\n-\n-/*\n- *  Fix Command Arguments for Irix_Stdint_C99_Types\n- */\n-static const char* apzIrix_Stdint_C99_TypesPatch[] = { sed_cmd_z,\n-    \"-e\", \"s@^#define INT64_MIN.*(-0x7fffffffffffffff - 1)$@#define INT64_MIN               (-0x7fffffffffffffffLL - 1)@\",\n-    \"-e\", \"s@^#define INT64_MAX.*0x7fffffffffffffff$@#define INT64_MAX               0x7fffffffffffffffLL@\",\n-    \"-e\", \"s@^#define UINT32_MAX.*0xffffffff$@#define UINT32_MAX              0xffffffffU@\",\n-    \"-e\", \"s@^#define UINT64_MAX.*0xffffffffffffffff$@#define UINT64_MAX              0xffffffffffffffffULL@\",\n-    \"-e\", \"s@^#define INTPTR_MIN.*INT32_MIN$@#define INTPTR_MIN              (-0x7fffffffL - 1)@\",\n-    \"-e\", \"s@^#define INTPTR_MAX.*INT32_MAX$@#define INTPTR_MAX              0x7fffffffL@\",\n-    \"-e\", \"s@^#define UINTPTR_MAX.*UINT32_MAX$@#define UINTPTR_MAX             0xffffffffUL@\",\n-    \"-e\", \"s@^#define INTPTR_MIN.*INT64_MIN@#define INTPTR_MIN              (-0x7fffffffffffffffL - 1)@\",\n-    \"-e\", \"s@^#define INTPTR_MAX.*INT64_MAX$@#define INTPTR_MAX              0x7fffffffffffffffL@\",\n-    \"-e\", \"s@^#define UINTPTR_MAX.*UINT64_MAX$@#define UINTPTR_MAX             0xffffffffffffffffUL@\",\n-    \"-e\", \"s@^#define PTRDIFF_MIN.*INT64_MIN$@#define PTRDIFF_MIN             (-0x7fffffffffffffffL - 1)@\",\n-    \"-e\", \"s@^#define PTRDIFF_MAX.*INT64_MAX$@#define PTRDIFF_MAX             0x7fffffffffffffffL@\",\n-    \"-e\", \"s@^#define SIZE_MAX.*UINT64_MAX$@#define SIZE_MAX                0xffffffffffffffffUL@\",\n-    (char*)NULL };\n-\n-/* * * * * * * * * * * * * * * * * * * * * * * * * *\n- *\n- *  Description of Irix_Stdint_C99_Macros fix\n- */\n-tSCC zIrix_Stdint_C99_MacrosName[] =\n-     \"irix_stdint_c99_macros\";\n-\n-/*\n- *  File name selection pattern\n- */\n-tSCC zIrix_Stdint_C99_MacrosList[] =\n-  \"stdint-irix65.h\\0stdint.h\\0\";\n-/*\n- *  Machine/OS name selection pattern\n- */\n-tSCC* apzIrix_Stdint_C99_MacrosMachs[] = {\n-        \"mips-sgi-irix6.5\",\n-        (const char*)NULL };\n-#define IRIX_STDINT_C99_MACROS_TEST_CT  0\n-#define aIrix_Stdint_C99_MacrosTests   (tTestDesc*)NULL\n-\n-/*\n- *  Fix Command Arguments for Irix_Stdint_C99_Macros\n- */\n-static const char* apzIrix_Stdint_C99_MacrosPatch[] = { sed_cmd_z,\n-    \"-e\", \"s@^#define INT8_C(x).*int.*_t.*$@#define INT8_C(x)               (x)@\",\n-    \"-e\", \"s@^#define INT16_C(x).*int.*_t.*$@#define INT16_C(x)              (x)@\",\n-    \"-e\", \"s@^#define INT32_C(x).*int.*_t.*$@#define INT32_C(x)              (x)@\",\n-    \"-e\", \"s@^#define INT64_C(x).*int.*_t.*$@#define INT64_C(x)              (x ## LL)@\",\n-    \"-e\", \"s@^#define UINT8_C(x).*int.*_t.*$@#define UINT8_C(x)              (x)@\",\n-    \"-e\", \"s@^#define UINT16_C(x).*int.*_t.*$@#define UINT16_C(x)             (x)@\",\n-    \"-e\", \"s@^#define UINT32_C(x).*int.*_t.*$@#define UINT32_C(x)             (x ## U)@\",\n-    \"-e\", \"s@^#define UINT64_C(x).*int.*_t.*$@#define UINT64_C(x)             (x ## ULL)@\",\n-    \"-e\", \"s@^#define INTMAX_C(x).*int.*_t.*$@#define INTMAX_C(x)             (x ## LL)@\",\n-    \"-e\", \"s@^#define UINTMAX_C(x).*int.*_t.*$@#define UINTMAX_C(x)            (x ## ULL)@\",\n-    (char*)NULL };\n-\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Irix_Stdio_Va_List fix\n@@ -4752,7 +4360,7 @@ tSCC zIrix_Stdio_Va_ListName[] =\n  *  File name selection pattern\n  */\n tSCC zIrix_Stdio_Va_ListList[] =\n-  \"stdio.h\\0internal/stdio_core.h\\0\";\n+  \"stdio.h\\0\";\n /*\n  *  Machine/OS name selection pattern\n  */\n@@ -4776,45 +4384,6 @@ static const char* apzIrix_Stdio_Va_ListPatch[] = {\n     \"__gnuc_va_list\",\n     (char*)NULL };\n \n-/* * * * * * * * * * * * * * * * * * * * * * * * * *\n- *\n- *  Description of Irix_Wcsftime fix\n- */\n-tSCC zIrix_WcsftimeName[] =\n-     \"irix_wcsftime\";\n-\n-/*\n- *  File name selection pattern\n- */\n-tSCC zIrix_WcsftimeList[] =\n-  \"internal/wchar_core.h\\0\";\n-/*\n- *  Machine/OS name selection pattern\n- */\n-tSCC* apzIrix_WcsftimeMachs[] = {\n-        \"mips-sgi-irix6.5\",\n-        (const char*)NULL };\n-\n-/*\n- *  content selection pattern - do fix if pattern found\n- */\n-tSCC zIrix_WcsftimeSelect0[] =\n-       \"#if _NO_XOPEN5\\n\\\n-(extern size_t[ \\t]+wcsftime.*const char *.*)\";\n-\n-#define    IRIX_WCSFTIME_TEST_CT  1\n-static tTestDesc aIrix_WcsftimeTests[] = {\n-  { TT_EGREP,    zIrix_WcsftimeSelect0, (regex_t*)NULL }, };\n-\n-/*\n- *  Fix Command Arguments for Irix_Wcsftime\n- */\n-static const char* apzIrix_WcsftimePatch[] = {\n-    \"format\",\n-    \"#if _NO_XOPEN5 && !defined(__c99)\\n\\\n-%1\",\n-    (char*)NULL };\n-\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Kandr_Concat fix\n@@ -7269,7 +6838,7 @@ tSCC zStdio_Va_ListName[] =\n  *  File name selection pattern\n  */\n tSCC zStdio_Va_ListList[] =\n-  \"stdio.h\\0internal/stdio_core.h\\0internal/wchar_core.h\\0\";\n+  \"stdio.h\\0\";\n /*\n  *  Machine/OS name selection pattern\n  */\n@@ -7929,15 +7498,8 @@ tSCC zSvr4_ProfilList[] =\n tSCC zSvr4_ProfilSelect0[] =\n        \"profil\\\\(unsigned short \\\\*, unsigned int, unsigned int, unsigned int\\\\)\";\n \n-/*\n- *  content bypass pattern - skip fix if pattern found\n- */\n-tSCC zSvr4_ProfilBypass0[] =\n-       \"Silicon Graphics\";\n-\n-#define    SVR4_PROFIL_TEST_CT  2\n+#define    SVR4_PROFIL_TEST_CT  1\n static tTestDesc aSvr4_ProfilTests[] = {\n-  { TT_NEGREP,   zSvr4_ProfilBypass0, (regex_t*)NULL },\n   { TT_EGREP,    zSvr4_ProfilSelect0, (regex_t*)NULL }, };\n \n /*\n@@ -9068,9 +8630,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          265\n+#define REGEX_COUNT          255\n #define MACH_LIST_SIZE_LIMIT 181\n-#define FIX_COUNT            223\n+#define FIX_COUNT            212\n \n /*\n  *  Enumerate the fixes\n@@ -9180,19 +8742,8 @@ typedef enum {\n     IO_QUOTES_DEF_FIXIDX,\n     IO_QUOTES_USE_FIXIDX,\n     IP_MISSING_SEMI_FIXIDX,\n-    IRIX___RESTRICT_FIXIDX,\n-    IRIX___GENERIC1_FIXIDX,\n-    IRIX___GENERIC2_FIXIDX,\n-    IRIX_ASM_APOSTROPHE_FIXIDX,\n-    IRIX_COMPLEX_FIXIDX,\n     IRIX_LIMITS_CONST_FIXIDX,\n-    IRIX_PTHREAD_INIT_FIXIDX,\n-    IRIX_SOCKLEN_T_FIXIDX,\n-    IRIX_STDINT_C99_MODE_FIXIDX,\n-    IRIX_STDINT_C99_TYPES_FIXIDX,\n-    IRIX_STDINT_C99_MACROS_FIXIDX,\n     IRIX_STDIO_VA_LIST_FIXIDX,\n-    IRIX_WCSFTIME_FIXIDX,\n     KANDR_CONCAT_FIXIDX,\n     LINUX_IA64_UCONTEXT_FIXIDX,\n     LYNXOS_NO_WARNING_IN_SYS_TIME_H_FIXIDX,\n@@ -9822,71 +9373,16 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      IP_MISSING_SEMI_TEST_CT, FD_MACH_ONLY,\n      aIp_Missing_SemiTests,   apzIp_Missing_SemiPatch, 0 },\n \n-  {  zIrix___RestrictName,    zIrix___RestrictList,\n-     apzIrix___RestrictMachs,\n-     IRIX___RESTRICT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n-     aIrix___RestrictTests,   apzIrix___RestrictPatch, 0 },\n-\n-  {  zIrix___Generic1Name,    zIrix___Generic1List,\n-     apzIrix___Generic1Machs,\n-     IRIX___GENERIC1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n-     aIrix___Generic1Tests,   apzIrix___Generic1Patch, 0 },\n-\n-  {  zIrix___Generic2Name,    zIrix___Generic2List,\n-     apzIrix___Generic2Machs,\n-     IRIX___GENERIC2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n-     aIrix___Generic2Tests,   apzIrix___Generic2Patch, 0 },\n-\n-  {  zIrix_Asm_ApostropheName,    zIrix_Asm_ApostropheList,\n-     apzIrix_Asm_ApostropheMachs,\n-     IRIX_ASM_APOSTROPHE_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n-     aIrix_Asm_ApostropheTests,   apzIrix_Asm_ApostrophePatch, 0 },\n-\n-  {  zIrix_ComplexName,    zIrix_ComplexList,\n-     apzIrix_ComplexMachs,\n-     IRIX_COMPLEX_TEST_CT, FD_MACH_ONLY,\n-     aIrix_ComplexTests,   apzIrix_ComplexPatch, 0 },\n-\n   {  zIrix_Limits_ConstName,    zIrix_Limits_ConstList,\n      apzIrix_Limits_ConstMachs,\n      IRIX_LIMITS_CONST_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aIrix_Limits_ConstTests,   apzIrix_Limits_ConstPatch, 0 },\n \n-  {  zIrix_Pthread_InitName,    zIrix_Pthread_InitList,\n-     apzIrix_Pthread_InitMachs,\n-     IRIX_PTHREAD_INIT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n-     aIrix_Pthread_InitTests,   apzIrix_Pthread_InitPatch, 0 },\n-\n-  {  zIrix_Socklen_TName,    zIrix_Socklen_TList,\n-     apzIrix_Socklen_TMachs,\n-     IRIX_SOCKLEN_T_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n-     aIrix_Socklen_TTests,   apzIrix_Socklen_TPatch, 0 },\n-\n-  {  zIrix_Stdint_C99_ModeName,    zIrix_Stdint_C99_ModeList,\n-     apzIrix_Stdint_C99_ModeMachs,\n-     IRIX_STDINT_C99_MODE_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n-     aIrix_Stdint_C99_ModeTests,   apzIrix_Stdint_C99_ModePatch, 0 },\n-\n-  {  zIrix_Stdint_C99_TypesName,    zIrix_Stdint_C99_TypesList,\n-     apzIrix_Stdint_C99_TypesMachs,\n-     IRIX_STDINT_C99_TYPES_TEST_CT, FD_MACH_ONLY,\n-     aIrix_Stdint_C99_TypesTests,   apzIrix_Stdint_C99_TypesPatch, 0 },\n-\n-  {  zIrix_Stdint_C99_MacrosName,    zIrix_Stdint_C99_MacrosList,\n-     apzIrix_Stdint_C99_MacrosMachs,\n-     IRIX_STDINT_C99_MACROS_TEST_CT, FD_MACH_ONLY,\n-     aIrix_Stdint_C99_MacrosTests,   apzIrix_Stdint_C99_MacrosPatch, 0 },\n-\n   {  zIrix_Stdio_Va_ListName,    zIrix_Stdio_Va_ListList,\n      apzIrix_Stdio_Va_ListMachs,\n      IRIX_STDIO_VA_LIST_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aIrix_Stdio_Va_ListTests,   apzIrix_Stdio_Va_ListPatch, 0 },\n \n-  {  zIrix_WcsftimeName,    zIrix_WcsftimeList,\n-     apzIrix_WcsftimeMachs,\n-     IRIX_WCSFTIME_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n-     aIrix_WcsftimeTests,   apzIrix_WcsftimePatch, 0 },\n-\n   {  zKandr_ConcatName,    zKandr_ConcatList,\n      apzKandr_ConcatMachs,\n      KANDR_CONCAT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "8f36077829aace8e47841447ba65ae1b058196bf", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 3, "deletions": 285, "changes": 288, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -780,10 +780,6 @@ fix = {\n /*\n  *  Remove `extern double cabs' declarations from math.h.\n  *  This conflicts with C99.  Discovered on AIX.\n- *  IRIX 5 and IRIX 6 before 6.5.18 (where C99 support was introduced)\n- *  declares cabs() to take a struct __cabs_s argument.\n- *  SunOS4 has its cabs() declaration followed by a comment which\n- *  terminates on the following line.\n  *  Darwin hides its broken cabs in architecture-specific subdirs.\n  */\n fix = {\n@@ -799,11 +795,7 @@ fix = {\n                 \"#else\\n\"\n                 \"extern     double   cabs();\\n\"\n                 \"#endif\\n\"\n-                \"extern double cabs ( _Complex z );\\n\"\n-                \"extern double cabs(); /* This is a comment\\n\"\n-                \"                         and it ends here. */\\n\"\n-                \"extern double\tcabs(struct __cabs_s);\\n\"\n-                \"extern long double cabsl( struct __cabsl_s );\";\n+                \"extern double cabs ( _Complex z );\";\n };\n \n \n@@ -2242,110 +2234,6 @@ fix = {\n };\n \n \n-/*\n- *  IRIX 6.5.1[89] <internal/sgimacros.h> unconditionally defines\n- *  __restrict as restrict iff __c99.  This is wrong for C++, which\n- *  needs many C99 features, but only supports __restrict.\n- */\n-fix = {\n-    hackname  = irix___restrict;\n-    files     = internal/sgimacros.h;\n-    select    = \"(#ifdef __c99\\n)(#[ \\t]*define __restrict restrict)\";\n-\n-    mach      = \"mips-sgi-irix6.5\";\n-    c_fix     = format;\n-    c_fix_arg = \"%1\"\n-\t\t\"#  ifndef __cplusplus\\n%2\\n#  endif\";\n-\n-    test_text = \"#ifdef __c99\\n#  define __restrict restrict\";\n-};\n-\n-/*\n- * IRIX 6.5.22 <internal/math_core.h> uses the SGI c99 __generic() intrinsic\n- * to define the fpclasify, isfinite, isinf, isnan, isnormal and signbit \n- * functions.\n- *\n- * This was probably introduced around IRIX 6.5.18\n- */\n-fix = {\n-    hackname  = irix___generic1;\n-    files     = internal/math_core.h;\n-    mach      = \"mips-sgi-irix6.5\";\n-    select    = \"#define ([a-z]+)\\\\(x\\\\) *__generic.*\";\n-\n-    c_fix     = format;\n-    c_fix_arg = \"extern int %1(double);\\n\"\n-\t\t\"extern int %1f(float);\\n\"\n-\t\t\"extern int %1l(long double);\\n\"\n-\t\t\"#define %1(x) (sizeof(x) == sizeof(double) ? _%1(x) \\\\\\n\"\n-\t\t\"               : sizeof(x) == sizeof(float) ? _%1f(x) \\\\\\n\"\n-\t\t\"               : _%1l(x))\\n\";\n-\n-    test_text = \n-      \"#define isnan(x) __generic(x,,, _isnan, _isnanf, _isnanl,,,)(x)\\n\";\n-};\n-\n-\n-/* Likewise <internal/math_core.h> on IRIX 6.5.19 and later uses the SGI\n-   compiler's __generic intrinsic to define isgreater, isgreaterequal,\n-   isless, islessequal, islessgreater and isunordered functions.  */\n-fix = {\n-    hackname  = irix___generic2;\n-    files     = internal/math_core.h;\n-    mach      = \"mips-sgi-irix6.5\";\n-    select    = \"#define ([a-z]+)\\\\(x,y\\\\) *__generic.*\";\n-\n-    c_fix     = format;\n-    c_fix_arg = \"#define %1(x,y) \\\\\\n\"\n-\t\t\"  ((sizeof(x)<=4 && sizeof(y)<=4) ? _%1f(x,y) \\\\\\n\"\n-\t\t\"   : (sizeof(x)<=8 && sizeof(y)<=8) ? _%1(x,y) \\\\\\n\"\n-\t\t\"   : _%1l(x,y))\\n\";\n-\n-    test_text = \n-      \"#define isless(x,y)         __generic(x,y,, _isless, _islessf, _islessl,,,)(x,y)\";\n-};\n-\n-\n-/*\n- *  IRIX 5.2's <sys/asm.h> contains an asm comment with a contraction\n- *  that causes the assembly preprocessor to complain about an\n- *  unterminated character constant.\n- */\n-fix = {\n-    hackname  = irix_asm_apostrophe;\n-    files     = sys/asm.h;\n-\n-    select    = \"^[ \\t]*#.*[Ww]e're\";\n-    c_fix     = format;\n-    c_fix_arg = \"%1 are\";\n-    c_fix_arg = \"^([ \\t]*#.*[Ww]e)'re\";\n-    test_text = \"\\t# and we're on vacation\";\n-};\n-\n-\n-/*\n- * IRIX 6.5 complex.h defines _Complex_I and _Imaginary_I in terms of __I__,\n- * which is a MIPSpro compiler builtin.  Remove _Imaginary_I and imaginary\n- * definitions which are not supported by GCC. \n- */\n-fix = {\n-    hackname  = irix_complex;\n-    mach      = \"mips-sgi-irix6.5\";\n-    files     = complex.h;\n-    select    = \"#define[ \\t]_Complex_I[ \\t]\\\\(\\\\(float[ \\t]_Complex\\\\)[ \\t]\\\\(__I__\\\\)\\\\)\";\n-    sed\t      = \"s/#define[ \\t]_Complex_I[ \\t]((float[ \\t]_Complex)[ \\t](__I__))/\"\n-\t\t\"#define _Complex_I (__extension__ 1.0iF)/\";\n-    sed\t      = \"/#define[ \\t]imaginary[ \\t]_Imaginary/d\";\n-    sed\t      = \"/#define[ \\t]_Imaginary_I/d\";\n-    sed       = \"s/#define[ \\t]I[ \\t]_Imaginary_I/#define I _Complex_I/\";\n-    test_text = \"#define _Complex_I ((float _Complex) (__I__))\\n\"\n-\t\t\"#define imaginary _Imaginary\\n\"\n-\t\t\"// #define _Imaginary_I ((float _Imaginary) 1)\\n\"\n-\t\t\"#define _Imaginary_I __I__\\n\"\n-\t\t\"#define I _Imaginary_I\";\n-};\n-\n-\n /*\n  *  Non-traditional \"const\" declaration in Irix's limits.h.\n  */\n@@ -2360,155 +2248,12 @@ fix = {\n \n \n /*\n- *  IRIX 6.5 PTHREAD_*_INITIALIZER need an additional level of braces in\n- *  <pthread.h>.\n- */\n-fix = {\n-    hackname    = irix_pthread_init;\n-    files       = pthread.h;\n-    select      = \"^(#define[ \\t]+PTHREAD_.*_INITIALIZER[ \\t]+)(\\\\{ 0 \\\\})\";\n-\n-    mach\t= \"mips-sgi-irix6.5\";\n-    c_fix       = format;\n-    c_fix_arg   = \"%1{ %2 }\";\n-    test_text   = \"#define PTHREAD_MUTEX_INITIALIZER\t{ 0 }\\n\"\n-\t\t  \"#define PTHREAD_COND_INITIALIZER\t{ 0 }\\n\"\n-\t\t  \"#define PTHREAD_RWLOCK_INITIALIZER\t{ 0 }\";\n-};\n-\n-\n-/*\n- *  IRIX 6.5.1[78] <sys/socket.h> has a broken definition of socklen_t.\n- *  Various socket function prototypes use different types instead,\n- *  depending on the API in use (BSD, XPG4/5), but the socklen_t\n- *  definition doesn't reflect this (SGI Bug Id 864477, fixed in\n- *  IRIX 6.5.19).\n- */\n-fix = {\n-    hackname  = irix_socklen_t;\n-    files     = sys/socket.h;\n-    select    = \"(#define _SOCKLEN_T\\n)(typedef u_int32_t socklen_t;)\";\n-\n-    mach      = \"mips-sgi-irix6.5\";\n-    c_fix     = format;\n-    c_fix_arg = \"%1\"\n-    \t\t\"#if _NO_XOPEN4 && _NO_XOPEN5\\n\"\n-    \t\t\"typedef int socklen_t;\\n\"\n-\t\t\"#else\\n\"\n-    \t\t\"%2\\n\"\n-    \t\t\"#endif /* _NO_XOPEN4 && _NO_XOPEN5 */\";\n-\n-    test_text = \"#define _SOCKLEN_T\\ntypedef u_int32_t socklen_t;\";\n-};\n-\n-/*\n- *  IRIX 6.5 <stdint.h> only works with ISO C99 and errors out\n- *  otherwise.\n- */\n-fix = {\n-    hackname  = irix_stdint_c99_mode;\n-    files     = stdint.h;\n-    select = \"(#ifndef __c99\\n)(#error This header file is to be used only for c99 mode compilations)\";\n-\n-    mach      = \"mips-sgi-irix6.5\";\n-    c_fix  = format;\n-    c_fix_arg = \"#if 0\\n\"\n-\t        \"%2\";\n-    test_text =\n-    \"#ifndef __c99\\n#error This header file is to be used only for c99 mode compilations\\n#else\";\n-};\n-\n-\n-/*\n- *  IRIX 6.5 <stdint.h> has some *_MIN/MAX constants whose types don't\n- *  match the corresponding types, as required by ISO C99.\n- */\n-fix = {\n-    hackname  = irix_stdint_c99_types;\n-    files     = stdint-irix65.h, stdint.h;\n-    mach      = \"mips-sgi-irix6.5\";\n-    sed       = \"s@^#define INT64_MIN.*(-0x7fffffffffffffff - 1)$@\"\n-                \"#define INT64_MIN               (-0x7fffffffffffffffLL - 1)@\";\n-    sed       = \"s@^#define INT64_MAX.*0x7fffffffffffffff$@\"\n-                \"#define INT64_MAX               0x7fffffffffffffffLL@\";\n-    sed       = \"s@^#define UINT32_MAX.*0xffffffff$@\"\n-                \"#define UINT32_MAX              0xffffffffU@\";\n-    sed       = \"s@^#define UINT64_MAX.*0xffffffffffffffff$@\"\n-                \"#define UINT64_MAX              0xffffffffffffffffULL@\";\n-    sed       = \"s@^#define INTPTR_MIN.*INT32_MIN$@\"\n-                \"#define INTPTR_MIN              (-0x7fffffffL - 1)@\";\n-    sed       = \"s@^#define INTPTR_MAX.*INT32_MAX$@\"\n-                \"#define INTPTR_MAX              0x7fffffffL@\";\n-    sed       = \"s@^#define UINTPTR_MAX.*UINT32_MAX$@\"\n-                \"#define UINTPTR_MAX             0xffffffffUL@\";\n-    sed       = \"s@^#define INTPTR_MIN.*INT64_MIN@\"\n-                \"#define INTPTR_MIN              (-0x7fffffffffffffffL - 1)@\";\n-    sed       = \"s@^#define INTPTR_MAX.*INT64_MAX$@\"\n-                \"#define INTPTR_MAX              0x7fffffffffffffffL@\";\n-    sed       = \"s@^#define UINTPTR_MAX.*UINT64_MAX$@\"\n-                \"#define UINTPTR_MAX             0xffffffffffffffffUL@\";\n-    sed       = \"s@^#define PTRDIFF_MIN.*INT64_MIN$@\"\n-                \"#define PTRDIFF_MIN             (-0x7fffffffffffffffL - 1)@\";\n-    sed       = \"s@^#define PTRDIFF_MAX.*INT64_MAX$@\"\n-                \"#define PTRDIFF_MAX             0x7fffffffffffffffL@\";\n-    sed       = \"s@^#define SIZE_MAX.*UINT64_MAX$@\"\n-                \"#define SIZE_MAX                0xffffffffffffffffUL@\";\n-    test_text = \"#define INT64_MIN               (-0x7fffffffffffffff - 1)\\n\"\n-                \"#define INT64_MAX               0x7fffffffffffffff\\n\"\n-                \"#define UINT32_MAX              0xffffffff\\n\"\n-                \"#define UINT64_MAX              0xffffffffffffffff\\n\"\n-                \"#define INTPTR_MIN              INT32_MIN\\n\"\n-                \"#define INTPTR_MAX              INT32_MAX\\n\"\n-                \"#define UINTPTR_MAX             UINT32_MAX\\n\"\n-                \"#define INTPTR_MIN              INT64_MIN\\n\"\n-                \"#define INTPTR_MAX              INT64_MAX\\n\"\n-                \"#define UINTPTR_MAX             UINT64_MAX\\n\"\n-                \"#define PTRDIFF_MIN             INT64_MIN\\n\"\n-                \"#define PTRDIFF_MAX             INT64_MAX\\n\"\n-                \"#define SIZE_MAX                UINT64_MAX\";\n-};\n-\n-\n-/*\n- *  IRIX 6.5 <stdint.h> uses casts in some macros which cannot thus be used\n- *  in preprocessor tests, although ISO C99 requires this.\n- */\n-fix = {\n-    hackname  = irix_stdint_c99_macros;\n-    files     = stdint-irix65.h, stdint.h;\n-    mach      = \"mips-sgi-irix6.5\";\n-    sed       = \"s@^#define INT8_C(x).*int.*_t.*$@#define INT8_C(x)               (x)@\";\n-    sed       = \"s@^#define INT16_C(x).*int.*_t.*$@#define INT16_C(x)              (x)@\";\n-    sed       = \"s@^#define INT32_C(x).*int.*_t.*$@#define INT32_C(x)              (x)@\";\n-    sed       = \"s@^#define INT64_C(x).*int.*_t.*$@#define INT64_C(x)              (x ## LL)@\";\n-    sed       = \"s@^#define UINT8_C(x).*int.*_t.*$@#define UINT8_C(x)              (x)@\";\n-    sed       = \"s@^#define UINT16_C(x).*int.*_t.*$@#define UINT16_C(x)             (x)@\";\n-    sed       = \"s@^#define UINT32_C(x).*int.*_t.*$@#define UINT32_C(x)             (x ## U)@\";\n-    sed       = \"s@^#define UINT64_C(x).*int.*_t.*$@#define UINT64_C(x)             (x ## ULL)@\";\n-    sed       = \"s@^#define INTMAX_C(x).*int.*_t.*$@#define INTMAX_C(x)             (x ## LL)@\";\n-    sed       = \"s@^#define UINTMAX_C(x).*int.*_t.*$@#define UINTMAX_C(x)            (x ## ULL)@\";\n-    test_text = \"#define INT8_C(x)               (int_least8_t)(x)\\n\"\n-                \"#define INT16_C(x)              (int_least16_t)(x)\\n\"\n-                \"#define INT32_C(x)              (int_least32_t)(x)\\n\"\n-                \"#define INT64_C(x)              (int_least64_t)(x)\\n\"\n-                \"#define UINT8_C(x)              (uint_least8_t)(x)\\n\"\n-                \"#define UINT16_C(x)             (uint_least16_t)(x)\\n\"\n-                \"#define UINT32_C(x)             (uint_least32_t)(x)\\n\"\n-                \"#define UINT64_C(x)             (uint_least64_t)(x)\\n\"\n-                \"#define INTMAX_C(x)             (intmax_t)(x)\\n\"\n-                \"#define UINTMAX_C(x)            (uintmax_t)(x)\";\n-};\n-\n-\n-/*\n- *  IRIX 5.x's stdio.h and IRIX 6.5's internal/stdio_core.h declare\n- *  some functions that take a va_list as\n+ *  IRIX 5.x's stdio.h declares some functions that take a va_list as\n  *  taking char *.  However, GCC uses void * for va_list, so\n  *  calling vfprintf with a va_list fails in C++.  */\n fix = {\n     hackname  = irix_stdio_va_list;\n     files     = stdio.h;\n-    files     = internal/stdio_core.h;\n \n     select = '/\\* va_list \\*/ char \\*';\n     c_fix  = format;\n@@ -2518,26 +2263,6 @@ fix = {\n };\n \n \n-/*\n- *  IRIX 6.5.19 <internal/wchar_core.h> provides the XPG4 variant of\n- *  wcsftime by default.  ISO C99 requires the XPG5 variant instead.\n- */\n-fix = {\n-    hackname  = irix_wcsftime;\n-    files     = internal/wchar_core.h;\n-    select    = \"#if _NO_XOPEN5\\n(extern size_t[ \\t]+wcsftime.*const char \\*.*)\";\n-\n-    mach      = \"mips-sgi-irix6.5\";\n-    c_fix     = format;\n-    c_fix_arg = \"#if _NO_XOPEN5 && !defined(__c99)\\n%1\";\n-\n-    test_text = \"#if _NO_XOPEN5\\n\"\n-\t\t\"extern size_t wcsftime(wchar_t *, \"\n-\t\t\"__SGI_LIBC_NAMESPACE_QUALIFIER size_t, const char *, \"\n-\t\t\"const struct tm *);\";\n-};\n-\n-\n /*\n  * These files in Sun OS 4.x and ARM/RISCiX and BSD4.3\n  * use / * * / to concatenate tokens.\n@@ -3767,15 +3492,11 @@ fix = {\n  *  of __gnuc_va_list, __DJ_va_list, or _G_va_list is taken to\n  *  indicate that the header knows what it's doing -- under SUSv2,\n  *  stdio.h is required to define va_list, and we shouldn't break\n- *  that.  On IRIX 6.5, internal/wchar_core.h used to get its\n- *  definition of va_list from stdio.h.  Since this doesn't happen any\n- *  longer, use __gnuc_va_list there, too.\n+ *  that.\n  */\n fix = {\n     hackname = stdio_va_list;\n     files    = stdio.h;\n-    files    = internal/stdio_core.h;\n-    files    = internal/wchar_core.h;\n     bypass   = '__gnuc_va_list|_BSD_VA_LIST_|__DJ_va_list|_G_va_list';\n     /* \n      * On Solaris 10, the definition in \n@@ -4151,9 +3872,6 @@ fix = {\n \n     select    =\n     'profil\\(unsigned short \\*, unsigned int, unsigned int, unsigned int\\)';\n-    /* The fix is wrong on IRIX 5/6 and creates a conflict with another\n-       prototype in <sys/profil.h>.  */\n-    bypass    = 'Silicon Graphics';\n     c_fix     = format;\n     c_fix_arg = 'profil(unsigned short *, size_t, int, unsigned int)';\n "}, {"sha": "f648d6fc2c42242c4a4b83b1005c78867ea17328", "filename": "fixincludes/tests/base/complex.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/fixincludes%2Ftests%2Fbase%2Fcomplex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/fixincludes%2Ftests%2Fbase%2Fcomplex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fcomplex.h?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -21,12 +21,6 @@\n #endif  /* HPUX_IMAGINARY_I_CHECK */\n \n \n-#if defined( IRIX_COMPLEX_CHECK )\n-#define _Complex_I (__extension__ 1.0iF)\n-#define I _Complex_I\n-#endif  /* IRIX_COMPLEX_CHECK */\n-\n-\n #if defined( SOLARIS_COMPLEX_CHECK )\n #define _Complex_I (__extension__ 1.0iF)\n #define\tcomplex\t\t_Complex"}, {"sha": "f39ac3f90cf01fe879dae60a81ebaa74e359b5d3", "filename": "fixincludes/tests/base/internal/math_core.h", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/fixincludes%2Ftests%2Fbase%2Finternal%2Fmath_core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/fixincludes%2Ftests%2Fbase%2Finternal%2Fmath_core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Finternal%2Fmath_core.h?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,30 +0,0 @@\n-/*  DO NOT EDIT THIS FILE.\n-\n-    It has been auto-edited by fixincludes from:\n-\n-\t\"fixinc/tests/inc/internal/math_core.h\"\n-\n-    This had to be done to correct non-standard usages in the\n-    original, manufacturer supplied header file.  */\n-\n-\n-\n-#if defined( IRIX___GENERIC1_CHECK )\n-extern int isnan(double);\n-extern int isnanf(float);\n-extern int isnanl(long double);\n-#define isnan(x) (sizeof(x) == sizeof(double) ? _isnan(x) \\\n-               : sizeof(x) == sizeof(float) ? _isnanf(x) \\\n-               : _isnanl(x))\n-\n-\n-#endif  /* IRIX___GENERIC1_CHECK */\n-\n-\n-#if defined( IRIX___GENERIC2_CHECK )\n-#define isless(x,y) \\\n-  ((sizeof(x)<=4 && sizeof(y)<=4) ? _islessf(x,y) \\\n-   : (sizeof(x)<=8 && sizeof(y)<=8) ? _isless(x,y) \\\n-   : _islessl(x,y))\n-\n-#endif  /* IRIX___GENERIC2_CHECK */"}, {"sha": "a491e865af7bd40f6ed64db7554f3c82e6252860", "filename": "fixincludes/tests/base/internal/sgimacros.h", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/fixincludes%2Ftests%2Fbase%2Finternal%2Fsgimacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/fixincludes%2Ftests%2Fbase%2Finternal%2Fsgimacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Finternal%2Fsgimacros.h?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,17 +0,0 @@\n-/*  DO NOT EDIT THIS FILE.\n-\n-    It has been auto-edited by fixincludes from:\n-\n-\t\"fixinc/tests/inc/internal/sgimacros.h\"\n-\n-    This had to be done to correct non-standard usages in the\n-    original, manufacturer supplied header file.  */\n-\n-\n-\n-#if defined( IRIX___RESTRICT_CHECK )\n-#ifdef __c99\n-#  ifndef __cplusplus\n-#  define __restrict restrict\n-#  endif\n-#endif  /* IRIX___RESTRICT_CHECK */"}, {"sha": "9c9fc4e97b29b717400a9ada24291f4a579cf833", "filename": "fixincludes/tests/base/internal/wchar_core.h", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/fixincludes%2Ftests%2Fbase%2Finternal%2Fwchar_core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/fixincludes%2Ftests%2Fbase%2Finternal%2Fwchar_core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Finternal%2Fwchar_core.h?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,15 +0,0 @@\n-/*  DO NOT EDIT THIS FILE.\n-\n-    It has been auto-edited by fixincludes from:\n-\n-\t\"fixinc/tests/inc/internal/wchar_core.h\"\n-\n-    This had to be done to correct non-standard usages in the\n-    original, manufacturer supplied header file.  */\n-\n-\n-\n-#if defined( IRIX_WCSFTIME_CHECK )\n-#if _NO_XOPEN5 && !defined(__c99)\n-extern size_t wcsftime(wchar_t *, __SGI_LIBC_NAMESPACE_QUALIFIER size_t, const char *, const struct tm *);\n-#endif  /* IRIX_WCSFTIME_CHECK */"}, {"sha": "a97e88b32c8a83107b2181a35af3d10756899a92", "filename": "fixincludes/tests/base/math.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/fixincludes%2Ftests%2Fbase%2Fmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/fixincludes%2Ftests%2Fbase%2Fmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fmath.h?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -27,10 +27,6 @@\n \n #endif\n \n- /* This is a comment\n-                         and it ends here. */\n-\n-\n #endif  /* BROKEN_CABS_CHECK */\n \n "}, {"sha": "cb4cfc9a0f7afbaad7d62ee0c91658ee794b963c", "filename": "fixincludes/tests/base/pthread.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/fixincludes%2Ftests%2Fbase%2Fpthread.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/fixincludes%2Ftests%2Fbase%2Fpthread.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fpthread.h?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -70,13 +70,6 @@\n #endif  /* GLIBC_MUTEX_INIT_CHECK */\n \n \n-#if defined( IRIX_PTHREAD_INIT_CHECK )\n-#define PTHREAD_MUTEX_INITIALIZER\t{ { 0 } }\n-#define PTHREAD_COND_INITIALIZER\t{ { 0 } }\n-#define PTHREAD_RWLOCK_INITIALIZER\t{ { 0 } }\n-#endif  /* IRIX_PTHREAD_INIT_CHECK */\n-\n-\n #if defined( PTHREAD_INCOMPLETE_STRUCT_ARGUMENT_CHECK )\n extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask);\n #endif  /* PTHREAD_INCOMPLETE_STRUCT_ARGUMENT_CHECK */"}, {"sha": "d1757fb55228d83a3d94919251b1a0f4602a7b59", "filename": "fixincludes/tests/base/stdint-irix65.h", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/fixincludes%2Ftests%2Fbase%2Fstdint-irix65.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/fixincludes%2Ftests%2Fbase%2Fstdint-irix65.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fstdint-irix65.h?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,40 +0,0 @@\n-/*  DO NOT EDIT THIS FILE.\n-\n-    It has been auto-edited by fixincludes from:\n-\n-\t\"fixinc/tests/inc/stdint-irix65.h\"\n-\n-    This had to be done to correct non-standard usages in the\n-    original, manufacturer supplied header file.  */\n-\n-\n-\n-#if defined( IRIX_STDINT_C99_TYPES_CHECK )\n-#define INT64_MIN               (-0x7fffffffffffffffLL - 1)\n-#define INT64_MAX               0x7fffffffffffffffLL\n-#define UINT32_MAX              0xffffffffU\n-#define UINT64_MAX              0xffffffffffffffffULL\n-#define INTPTR_MIN              (-0x7fffffffL - 1)\n-#define INTPTR_MAX              0x7fffffffL\n-#define UINTPTR_MAX             0xffffffffUL\n-#define INTPTR_MIN              (-0x7fffffffffffffffL - 1)\n-#define INTPTR_MAX              0x7fffffffffffffffL\n-#define UINTPTR_MAX             0xffffffffffffffffUL\n-#define PTRDIFF_MIN             (-0x7fffffffffffffffL - 1)\n-#define PTRDIFF_MAX             0x7fffffffffffffffL\n-#define SIZE_MAX                0xffffffffffffffffUL\n-#endif  /* IRIX_STDINT_C99_TYPES_CHECK */\n-\n-\n-#if defined( IRIX_STDINT_C99_MACROS_CHECK )\n-#define INT8_C(x)               (x)\n-#define INT16_C(x)              (x)\n-#define INT32_C(x)              (x)\n-#define INT64_C(x)              (x ## LL)\n-#define UINT8_C(x)              (x)\n-#define UINT16_C(x)             (x)\n-#define UINT32_C(x)             (x ## U)\n-#define UINT64_C(x)             (x ## ULL)\n-#define INTMAX_C(x)             (x ## LL)\n-#define UINTMAX_C(x)            (x ## ULL)\n-#endif  /* IRIX_STDINT_C99_MACROS_CHECK */"}, {"sha": "54da0a1220d4159edd9ba128d07d934c28b0e3f2", "filename": "fixincludes/tests/base/stdint.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/fixincludes%2Ftests%2Fbase%2Fstdint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/fixincludes%2Ftests%2Fbase%2Fstdint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fstdint.h?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -14,10 +14,3 @@\n # define UINT8_C(c)\tc\n # define UINT16_C(c)\tc\n #endif  /* GLIBC_STDINT_CHECK */\n-\n-\n-#if defined( IRIX_STDINT_C99_MODE_CHECK )\n-#if 0\n-#error This header file is to be used only for c99 mode compilations\n-#else\n-#endif  /* IRIX_STDINT_C99_MODE_CHECK */"}, {"sha": "658830a7bf6f3f5c5268f47e15031f0d7746cd07", "filename": "fixincludes/tests/base/sys/asm.h", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/fixincludes%2Ftests%2Fbase%2Fsys%2Fasm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/fixincludes%2Ftests%2Fbase%2Fsys%2Fasm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Fasm.h?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,14 +0,0 @@\n-/*  DO NOT EDIT THIS FILE.\n-\n-    It has been auto-edited by fixincludes from:\n-\n-\t\"fixinc/tests/inc/sys/asm.h\"\n-\n-    This had to be done to correct non-standard usages in the\n-    original, manufacturer supplied header file.  */\n-\n-\n-\n-#if defined( IRIX_ASM_APOSTROPHE_CHECK )\n-\t# and we are on vacation\n-#endif  /* IRIX_ASM_APOSTROPHE_CHECK */"}, {"sha": "d0cd37e2574728a4bc2fbe5c75356cb59d9af0fb", "filename": "fixincludes/tests/base/sys/socket.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/fixincludes%2Ftests%2Fbase%2Fsys%2Fsocket.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/fixincludes%2Ftests%2Fbase%2Fsys%2Fsocket.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Fsocket.h?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -25,13 +25,3 @@\n #endif\n \n #endif  /* HPUX11_EXTERN_SENDPATH_CHECK */\n-\n-\n-#if defined( IRIX_SOCKLEN_T_CHECK )\n-#define _SOCKLEN_T\n-#if _NO_XOPEN4 && _NO_XOPEN5\n-typedef int socklen_t;\n-#else\n-typedef u_int32_t socklen_t;\n-#endif /* _NO_XOPEN4 && _NO_XOPEN5 */\n-#endif  /* IRIX_SOCKLEN_T_CHECK */"}, {"sha": "a12bdeb5aa43b736565a16c1427ad2d1fe78b0b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,3 +1,58 @@\n+2012-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config.gcc (enable_obsolete): Remove mips-sgi-irix6.5.\n+\t(mips-sgi-irix6.5*): Remove.\n+\t* config.host (mips-sgi-irix*): Remove.\n+\t* configure.ac (enable_fixed_point): Remove mips*-sgi-irix*.\n+\t(set_have_as_tls): Remove *-*-irix6*.\n+\t(gcc_cv_ld_static_dynamic): Remove mips-sgi-irix6*.\n+\t* configure: Regenerate.\n+\n+\t* config/mips/iris6.h: Remove.\n+\t* config/mips/iris6.opt: Remove.\n+\t* config/mips/t-irix6: Remove.\n+\n+\t* config/mips/mips.h (TARGET_GPWORD): Remove IRIX 6 N64 handling.\n+\t(TARGET_IRIX6): Remove.\n+\t(TARGET_CPU_CPP_BUILTINS): Remove IRIX 6 handling.\n+\tDon't define LANGUAGE_C, _LANGUAGE_C for Objective-C.\n+\t* config/mips/mips.c (mips_build_builtin_va_list): Remove IRIX 6\n+\thandling.\n+\t(mips_file_start): Likewise.\n+\t* config/mips/mips-protos.h (irix_asm_output_align): Remove.\n+\n+\t* config/mips/driver-native.c [__sgi__]: Remove.\n+\t(host_detect_local_cpu) [__sgi__]: Remove.\n+\n+\t* config/mips/gnu-user.h: Remove iris5.h reference.\n+\n+\t* config/mips/mips-modes.def: Remove IRIX 6 reference.\n+\t* config/mips/gnu-user64.h (MIPS_TFMODE_FORMAT): Remove.\n+\t* config/mips/mips.c (mips_option_override) [MIPS_TFMODE_FORMAT]:\n+\tRemove.\n+\n+\t* gcc.c (main): Move asm_debug initialization ...\n+\t(asm_debug): ... here.\n+\n+\t* ginclude/stddef.h (__STDDEF_H__): Don't define.\n+\n+\t* defaults.h (LINK_ELIMINATE_DUPLICATE_LDIRECTORIES): Remove.\n+\t* system.h (LINK_ELIMINATE_DUPLICATE_LDIRECTORIES): Poison.\n+\t* collect2.c [LINK_ELIMINATE_DUPLICATE_LDIRECTORIES]: Remove.\n+\t(main) [LINK_ELIMINATE_DUPLICATE_LDIRECTORIES]: Remove.\n+\t[LINK_ELIMINATE_DUPLICATE_LDIRECTORIES] (is_in_args): Remove.\n+\t* doc/tm.texi.in (Driver, LINK_ELIMINATE_DUPLICATE_LDIRECTORIES):\n+\tRemove.\n+\t* doc/tm.texi: Regenerate.\n+\n+\t* doc/invoke.texi (Debugging Options, -gdwarf-<version>): Remove\n+\tIRIX 6 reference.\n+\t(MIPS Options, -march): Remove IRIX reference.\n+\t* doc/install.texi (Binaries, SGI IRIX): Remove.\n+\t(Specific, mips-sgi-irix6): Document IRIX 6.5 removal, remove rest\n+\tof section.\n+\t* doc/trouble.texi (Interoperation): Remove -lgl_s handling.\n+\n 2012-03-14  Martin Jambor  <mjambor@suse.cz>\n \n \t* expr.c (expand_assignment): Use expand_expr with EXPAND_WRITE"}, {"sha": "b6e79e93eba26f853f370b2bb14bee3eb7613830", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,3 +1,47 @@\n+2012-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* gcc-interface/Makefile.in (mips-sgi-irix6*): Remove.\n+\n+\t* a-intnam-irix.ads, mlib-tgt-specific-irix.adb,\n+\ts-intman-irix.adb, s-mastop-irix.adb, s-osinte-irix.adb,\n+\ts-osinte-irix.ads, s-proinf-irix-athread.adb,\n+\ts-proinf-irix-athread.ads, s-taprop-irix.adb, s-tasinf-irix.ads,\n+\tsystem-irix-n32.ads, system-irix-n64.ads, system-irix-o32.ads:\n+\tRemove.\n+\n+\t* adaint.c [__mips && __sgi]: Remove.\n+\t(__gnat_number_of_cpus) [__mips && __sgi]: Remove.\n+\t[IS_CROSS && !(__mips && __sgi)]: Remove.\n+\t* adaint.h [sgi && _LFAPI]: Remove.\n+\t* cstreams.c (__gnat_full_name) [sgi]: Remove.\n+\t* env.c (__gnat_unsetenv) [__mips && __sgi]: Remove.\n+\t(__gnat_clearenv) [__mips && __sgi]: Remove.\n+\t* errno.c (_SGI_MP_SOURCE): Remove.\n+\t* gsocket.h [sgi]: Remove.\n+\t* init.c: Remove IRIX reference.\n+\t[sgi]: Remove.\n+\t* link.c [sgi]: Remove.\n+\t* s-oscons-tmplt.c [__mips && __sgi] (IOV_MAX): Don't define.\n+\t(main) [__mips && __sgi] (MAX_tv_sec): Don't define.\n+\t(CLOCK_SGI_FAST, CLOCK_SGI_CYCLE): Remove.\n+\t* sysdep.c [sgi]: Remove.\n+\t(getc_immediate_common) [sgi]: Remove.\n+\t(__gnat_localtime_tzoff) [sgi]: Remove.\n+\t* terminals.c [__mips && __sgi] (IRIX): Don't define.\n+\t[IRIX] (USE_GETPTY): Don't define.\n+\t(allocate_pty_desc) [USE_GETPTY]: Remove.\n+\n+\t* g-traceb.ads: Remove IRIX reference.\n+\t* g-trasym.ads: Likewise.\n+\t* memtrack.adb: Likewise.\n+\t* s-interr-sigaction.adb: Likewise.\n+\n+\t* gnat_rm.texi (Implementation Advice): Remove SGI info.\n+\t(Implementation Defined Characteristics): Likewise.\n+\t* gnat_ugn.texi (Summary of Run-Time Configurations, mips-irix):\n+\tRemove.\n+\t(Irix-Specific Considerations): Remove.\n+\n 2012-03-13  Tristan Gingold  <gingold@adacore.com>\n \n \t* gcc-interface/gigi.h (flag_vms_malloc64): Refine condition."}, {"sha": "65859c091cdc870ae7c17a9b7576691d3067180d", "filename": "gcc/ada/a-intnam-irix.ads", "status": "removed", "additions": 0, "deletions": 195, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fada%2Fa-intnam-irix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fada%2Fa-intnam-irix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-intnam-irix.ads?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,195 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                  GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                --\n---                                                                          --\n---                   A D A . I N T E R R U P T S . N A M E S                --\n---                                                                          --\n---                                  S p e c                                 --\n---                                                                          --\n---          Copyright (C) 1991-2011, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNARL is free software; you can redistribute it  and/or modify it  under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNARL was developed by the GNARL team at Florida State University.       --\n--- Extensive contributions were provided by Ada Core Technologies, Inc.     --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This is the Irix version of this package\n-\n---  The following signals are reserved by the run time (Athread library):\n-\n---  SIGFPE, SIGILL, SIGSEGV, SIGBUS, SIGTRAP, SIGSTOP, SIGKILL\n-\n---  The following signals are reserved by the run time (Pthread library):\n-\n---  SIGTSTP, SIGILL, SIGTRAP, SIGEMT, SIGFPE, SIGBUS, SIGSTOP, SIGKILL,\n---  SIGSEGV, SIGSYS, SIGXCPU, SIGXFSZ, SIGPROF, SIGPTINTR, SIGPTRESCHED,\n---  SIGABRT, SIGINT\n-\n---  The pragma Unreserve_All_Interrupts affects the following signal\n---  (Pthread library):\n-\n---  SIGINT: made available for Ada handler\n-\n---  This target-dependent package spec contains names of interrupts\n---  supported by the local system.\n-\n-with System.OS_Interface;\n-\n-package Ada.Interrupts.Names is\n-\n-   --  All identifiers in this unit are implementation defined\n-\n-   pragma Implementation_Defined;\n-\n-   --  Beware that the mapping of names to signals may be many-to-one. There\n-   --  may be aliases. Also, for all signal names that are not supported on\n-   --  the current system the value of the corresponding constant will be zero.\n-\n-   SIGHUP : constant Interrupt_ID :=\n-     System.OS_Interface.SIGHUP;      --  hangup\n-\n-   SIGINT : constant Interrupt_ID :=\n-     System.OS_Interface.SIGINT;      --  interrupt (rubout)\n-\n-   SIGQUIT : constant Interrupt_ID :=\n-     System.OS_Interface.SIGQUIT;     --  quit (ASCD FS)\n-\n-   SIGILL : constant Interrupt_ID :=\n-     System.OS_Interface.SIGILL;      --  illegal instruction (not reset)\n-\n-   SIGTRAP : constant Interrupt_ID :=\n-     System.OS_Interface.SIGTRAP;     --  trace trap (not reset)\n-\n-   SIGIOT : constant Interrupt_ID :=\n-     System.OS_Interface.SIGIOT;      --  IOT instruction\n-\n-   SIGABRT : constant Interrupt_ID :=\n-     System.OS_Interface.SIGABRT;     --  used by abort, replace SIGIOT in the\n-   --                                     future\n-\n-   SIGEMT : constant Interrupt_ID :=\n-     System.OS_Interface.SIGEMT;      --  EMT instruction\n-\n-   SIGFPE : constant Interrupt_ID :=\n-     System.OS_Interface.SIGFPE;      --  floating point exception\n-\n-   SIGKILL : constant Interrupt_ID :=\n-     System.OS_Interface.SIGKILL;     --  kill (cannot be caught or ignored)\n-\n-   SIGBUS : constant Interrupt_ID :=\n-     System.OS_Interface.SIGBUS;      --  bus error\n-\n-   SIGSEGV : constant Interrupt_ID :=\n-     System.OS_Interface.SIGSEGV;     --  segmentation violation\n-\n-   SIGSYS : constant Interrupt_ID :=\n-     System.OS_Interface.SIGSYS;      --  bad argument to system call\n-\n-   SIGPIPE : constant Interrupt_ID :=\n-     System.OS_Interface.SIGPIPE;     --  write on pipe with no one to read it\n-\n-   SIGALRM : constant Interrupt_ID :=\n-     System.OS_Interface.SIGALRM;     --  alarm clock\n-\n-   SIGTERM : constant Interrupt_ID :=\n-     System.OS_Interface.SIGTERM;     --  software termination signal from kill\n-\n-   SIGUSR1 : constant Interrupt_ID :=\n-     System.OS_Interface.SIGUSR1;     --  user defined signal 1\n-\n-   SIGUSR2 : constant Interrupt_ID :=\n-     System.OS_Interface.SIGUSR2;     --  user defined signal 2\n-\n-   SIGCLD : constant Interrupt_ID :=\n-     System.OS_Interface.SIGCLD;      --  alias for SIGCHLD\n-\n-   SIGCHLD : constant Interrupt_ID :=\n-     System.OS_Interface.SIGCHLD;     --  child status change\n-\n-   SIGPWR : constant Interrupt_ID :=\n-     System.OS_Interface.SIGPWR;      --  power-fail restart\n-\n-   SIGWINCH : constant Interrupt_ID :=\n-     System.OS_Interface.SIGWINCH;    --  window size change\n-\n-   SIGURG : constant Interrupt_ID :=\n-     System.OS_Interface.SIGURG;      --  urgent condition on IO channel\n-\n-   SIGPOLL : constant Interrupt_ID :=\n-     System.OS_Interface.SIGPOLL;     --  pollable event occurred\n-\n-   SIGIO : constant Interrupt_ID :=\n-     System.OS_Interface.SIGIO;       --  I/O possible (Solaris SIGPOLL alias)\n-\n-   SIGSTOP : constant Interrupt_ID :=\n-     System.OS_Interface.SIGSTOP;     --  stop (cannot be caught or ignored)\n-\n-   SIGTSTP : constant Interrupt_ID :=\n-     System.OS_Interface.SIGTSTP;     --  user stop requested from tty\n-\n-   SIGCONT : constant Interrupt_ID :=\n-     System.OS_Interface.SIGCONT;     --  stopped process has been continued\n-\n-   SIGTTIN : constant Interrupt_ID :=\n-     System.OS_Interface.SIGTTIN;     --  background tty read attempted\n-\n-   SIGTTOU : constant Interrupt_ID :=\n-     System.OS_Interface.SIGTTOU;     --  background tty write attempted\n-\n-   SIGVTALRM : constant Interrupt_ID :=\n-     System.OS_Interface.SIGVTALRM;   --  virtual timer expired\n-\n-   SIGPROF : constant Interrupt_ID :=\n-     System.OS_Interface.SIGPROF;     --  profiling timer expired\n-\n-   SIGXCPU : constant Interrupt_ID :=\n-     System.OS_Interface.SIGXCPU;     --  CPU time limit exceeded\n-\n-   SIGXFSZ : constant Interrupt_ID :=\n-     System.OS_Interface.SIGXFSZ;     --  filesize limit exceeded\n-\n-   SIGK32 : constant Interrupt_ID :=\n-     System.OS_Interface.SIGK32;      --  reserved for kernel (IRIX)\n-\n-   SIGCKPT : constant Interrupt_ID :=\n-     System.OS_Interface.SIGCKPT;     --  Checkpoint warning\n-\n-   SIGRESTART : constant Interrupt_ID :=\n-     System.OS_Interface.SIGRESTART;  --  Restart warning\n-\n-   SIGUME : constant Interrupt_ID :=\n-     System.OS_Interface.SIGUME;      --  Uncorrectable memory error\n-\n-   --  Signals defined for Posix 1003.1c\n-\n-   SIGPTINTR : constant Interrupt_ID :=\n-     System.OS_Interface.SIGPTINTR;    --  Pthread Interrupt Signal\n-\n-   SIGPTRESCHED : constant Interrupt_ID :=\n-     System.OS_Interface.SIGPTRESCHED; --  Pthread Rescheduling Signal\n-\n-   --  Posix 1003.1b signals\n-\n-   SIGRTMIN : constant Interrupt_ID :=\n-     System.OS_Interface.SIGRTMIN;    --  Posix 1003.1b signals\n-\n-   SIGRTMAX : constant Interrupt_ID :=\n-     System.OS_Interface.SIGRTMAX;    --  Posix 1003.1b signals\n-\n-end Ada.Interrupts.Names;"}, {"sha": "e13b01cdb6e5a3e1945bd1f50bb4bf8276c01718", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -62,7 +62,7 @@ extern \"C\" {\n \n #endif /* VxWorks */\n \n-#if (defined (__mips) && defined (__sgi)) || defined (__APPLE__)\n+#if defined (__APPLE__)\n #include <unistd.h>\n #endif\n \n@@ -2470,9 +2470,6 @@ __gnat_number_of_cpus (void)\n #if defined (linux) || defined (sun) || defined (AIX) || defined (__APPLE__)\n   cores = (int) sysconf (_SC_NPROCESSORS_ONLN);\n \n-#elif (defined (__mips) && defined (__sgi))\n-  cores = (int) sysconf (_SC_NPROC_ONLN);\n-\n #elif defined (__hpux__)\n   struct pst_dynamic psd;\n   if (pstat_getdynamic (&psd, sizeof (psd), 1, 0) != -1)\n@@ -3541,8 +3538,7 @@ _flush_cache()\n       && ! defined (__APPLE__) \\\n       && ! defined (_AIX) \\\n       && ! defined (VMS) \\\n-      && ! defined (__MINGW32__) \\\n-      && ! (defined (__mips) && defined (__sgi)))\n+      && ! defined (__MINGW32__))\n \n /* Dummy function to satisfy g-trasym.o. See the preprocessor conditional\n    just above for a list of native platforms that provide a non-dummy"}, {"sha": "8c46aed17734abd4984bb238d8d8a96db164822f", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2011, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2012, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -51,7 +51,7 @@ extern \"C\" {\n    determine at compile time what support the system offers for large files.\n    For now we just list the platforms we have manually tested. */\n \n-#if defined (__GLIBC__) || defined (sun)  || (defined (__sgi) && defined(_LFAPI))\n+#if defined (__GLIBC__) || defined (sun)\n #define GNAT_FOPEN fopen64\n #define GNAT_STAT stat64\n #define GNAT_FSTAT fstat64"}, {"sha": "894b056eaba13045202827a06dccabe1100b04d8", "filename": "gcc/ada/cstreams.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fcstreams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fcstreams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstreams.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *              Auxiliary C functions for Interfaces.C.Streams              *\n  *                                                                          *\n- *          Copyright (C) 1992-2011, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2012, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -187,7 +187,7 @@ __gnat_full_name (char *nam, char *buffer)\n \t  *p = '\\\\';\n     }\n \n-#elif defined (sgi) || defined (__FreeBSD__)\n+#elif defined (__FreeBSD__)\n \n   /* Use realpath function which resolves links and references to . and ..\n      on those Unix systems that support it. Note that GNU/Linux provides it but"}, {"sha": "78328dc371b59f4f58e44a1f4d2d0523362b56b2", "filename": "gcc/ada/env.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fenv.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -229,11 +229,10 @@ void __gnat_unsetenv (char *name) {\n   /* Not implemented */\n   return;\n #elif defined (__hpux__) || defined (sun) \\\n-     || (defined (__mips) && defined (__sgi)) \\\n      || (defined (__vxworks) && ! defined (__RTP__)) \\\n      || defined (_AIX) || defined (__Lynx__)\n \n-  /* On Solaris, HP-UX and IRIX there is no function to clear an environment\n+  /* On Solaris and HP-UX there is no function to clear an environment\n      variable. So we look for the variable in the environ table and delete it\n      by setting the entry to NULL. This can clearly cause some memory leaks\n      but free cannot be used on this context as not all strings in the environ\n@@ -287,9 +286,9 @@ void __gnat_clearenv (void) {\n #if defined (VMS)\n   /* not implemented */\n   return;\n-#elif defined (sun) || (defined (__mips) && defined (__sgi)) \\\n+#elif defined (sun) \\\n    || (defined (__vxworks) && ! defined (__RTP__)) || defined (__Lynx__)\n-  /* On Solaris, IRIX, VxWorks (not RTPs), and Lynx there is no system\n+  /* On Solaris, VxWorks (not RTPs), and Lynx there is no system\n      call to unset a variable or to clear the environment so set all\n      the entries in the environ table to NULL (see comment in\n      __gnat_unsetenv for more explanation). */"}, {"sha": "93c8660490aac7d1a3fbf9d926a41c5d34cfe493", "filename": "gcc/ada/errno.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Ferrno.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Ferrno.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrno.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *           Copyright (C) 1992-2009, Free Software Foundation, Inc.        *\n+ *           Copyright (C) 1992-2012, Free Software Foundation, Inc.        *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -38,7 +38,6 @@\n \n #define _REENTRANT\n #define _THREAD_SAFE\n-#define _SGI_MP_SOURCE\n \n #ifdef MaRTE\n "}, {"sha": "debb0c4034121a23d4fe713c11d17e52058a6f07", "filename": "gcc/ada/g-traceb.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fg-traceb.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fg-traceb.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-traceb.ads?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -60,7 +60,6 @@\n --     AiX PowerPC\n --     HP-UX\n --     GNU/Linux x86\n---     Irix MIPS\n --     LynxOS x86\n --     Solaris x86\n --     Solaris sparc"}, {"sha": "7b4e0035c7c95391c2d719c8280026edd2631bd1", "filename": "gcc/ada/g-trasym.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fg-trasym.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fg-trasym.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-trasym.ads?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -34,7 +34,6 @@\n --  The full capability is currently supported on the following targets:\n \n --     HP-UX ia64\n---     IRIX\n --     GNU/Linux x86, x86_64, ia64\n --     FreeBSD x86, x86_64\n --     Solaris sparc and x86"}, {"sha": "25d4d916d6fc874678f2068f156821b2a59b1f12", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1306,49 +1306,6 @@ ifeq ($(strip $(filter-out s390% linux%,$(arch) $(osys))),)\n   LIBRARY_VERSION := $(LIB_VERSION)\n endif\n \n-ifeq ($(strip $(filter-out mips sgi irix6%,$(targ))),)\n-  LIBGNAT_TARGET_PAIRS = \\\n-  a-intnam.ads<a-intnam-irix.ads \\\n-  a-synbar.adb<a-synbar-posix.adb \\\n-  a-synbar.ads<a-synbar-posix.ads \\\n-  s-inmaop.adb<s-inmaop-posix.adb \\\n-  s-intman.adb<s-intman-irix.adb \\\n-  s-mastop.adb<s-mastop-irix.adb \\\n-  s-osinte.adb<s-osinte-irix.adb \\\n-  s-osinte.ads<s-osinte-irix.ads \\\n-  s-osprim.adb<s-osprim-posix.adb \\\n-  s-proinf.adb<s-proinf-irix-athread.adb \\\n-  s-proinf.ads<s-proinf-irix-athread.ads \\\n-  s-taprop.adb<s-taprop-irix.adb \\\n-  s-tasinf.ads<s-tasinf-irix.ads \\\n-  s-taspri.ads<s-taspri-posix.ads \\\n-  s-tpopsp.adb<s-tpopsp-posix.adb \\\n-  s-traceb.adb<s-traceb-mastop.adb\n-\n-  ifeq ($(strip $(MULTISUBDIR)),/64)\n-    LIBGNAT_TARGET_PAIRS += \\\n-    system.ads<system-irix-n64.ads\n-  else\n-    ifeq ($(strip $(MULTISUBDIR)),/32)\n-      LIBGNAT_TARGET_PAIRS += \\\n-      system.ads<system-irix-o32.ads\n-    else\n-      LIBGNAT_TARGET_PAIRS += \\\n-      system.ads<system-irix-n32.ads\n-    endif\n-  endif\n-\n-  THREADSLIB = -lpthread\n-  GNATLIB_SHARED = gnatlib-shared-default\n-\n-  EH_MECHANISM=-gcc\n-  TOOLS_TARGET_PAIRS = mlib-tgt-specific.adb<mlib-tgt-specific-irix.adb\n-  TGT_LIB = -lexc\n-  MISCLIB = -lexc\n-  LIBRARY_VERSION := $(LIB_VERSION)\n-  GMEM_LIB = gmemlib\n-endif\n-\n ifeq ($(strip $(filter-out hppa% hp hpux10%,$(targ))),)\n   LIBGNAT_TARGET_PAIRS = \\\n   a-excpol.adb<a-excpol-abort.adb \\"}, {"sha": "82c61f4365c6dbca6d03dae132f0d6bdd28962c5", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -15,7 +15,7 @@\n @setfilename gnat_rm.info\n \n @copying\n-Copyright @copyright{} 1995-2008, Free Software Foundation, Inc.\n+Copyright @copyright{} 1995-2012, Free Software Foundation, Inc.\n \n Permission is granted to copy, distribute and/or modify this document\n under the terms of the GNU Free Documentation License, Version 1.3 or\n@@ -8928,10 +8928,6 @@ of interrupt blocking.\n Whenever possible, the implementation should allow interrupt handlers to\n be called directly by the hardware.\n @end cartouche\n-@c SGI info:\n-@ignore\n-This is never possible under IRIX, so this is followed by default.\n-@end ignore\n Followed on any target where the underlying operating system permits\n such direct calls.\n \n@@ -9244,11 +9240,6 @@ A requirement for conforming Ada compilers is that they provide\n documentation describing how the implementation deals with each of these\n issues.  In this chapter, you will find each point in Annex M listed\n followed by a description in italic font of how GNAT\n-@c SGI info:\n-@ignore\n-in the ProDev Ada\n-implementation on IRIX 5.3 operating system or greater\n-@end ignore\n handles the implementation dependence.\n \n You can use this chapter as a guide to minimizing implementation\n@@ -10515,11 +10506,6 @@ object does not keep its processor busy.\n on task dispatching.  See D.2.1(9).\n @end cartouche\n @noindent\n-@c SGI info\n-@ignore\n-Tasks map to IRIX threads, and the dispatching policy is as defined by\n-the IRIX implementation of threads.\n-@end ignore\n Tasks map to threads in the threads package used by GNAT@.  Where possible\n and appropriate, these threads correspond to native threads of the\n underlying operating system.\n@@ -10550,11 +10536,6 @@ of delay expirations for lower priority tasks.\n @strong{100}.  Implementation-defined task dispatching.  See D.2.2(18).\n @end cartouche\n @noindent\n-@c SGI info:\n-@ignore\n-Tasks map to IRIX threads, and the dispatching policy is as defined by\n-the IRIX implementation of threads.\n-@end ignore\n The policy is the same as that of the underlying threads implementation.\n \n @sp 1"}, {"sha": "1f73be75db52b2e8ea468ba1d41f5a33e141fcd8", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -584,7 +584,6 @@ Platform-Specific Information for the Run-Time Libraries\n * Solaris-Specific Considerations::\n * Linux-Specific Considerations::\n * AIX-Specific Considerations::\n-* Irix-Specific Considerations::\n * RTX-Specific Considerations::\n * HP-UX-Specific Considerations::\n \n@@ -22150,7 +22149,6 @@ information about several specific platforms.\n * Solaris-Specific Considerations::\n * Linux-Specific Considerations::\n * AIX-Specific Considerations::\n-* Irix-Specific Considerations::\n * RTX-Specific Considerations::\n * HP-UX-Specific Considerations::\n @end menu\n@@ -22188,11 +22186,6 @@ information about several specific platforms.\n @item @code{@ @ @ @ }Tasking    @tab pthread library\n @item @code{@ @ @ @ }Exceptions @tab ZCX\n @*\n-@item @b{mips-irix}\n-@item @code{@ @ }@i{rts-native (default)}\n-@item @code{@ @ @ @ }Tasking    @tab native IRIX threads\n-@item @code{@ @ @ @ }Exceptions @tab ZCX\n-@*\n @item @b{pa-hpux}\n @item @code{@ @ }@i{rts-native (default)}\n @item @code{@ @ @ @ }Tasking    @tab native HP-UX threads\n@@ -22481,24 +22474,6 @@ occurs in the environment task, or use @code{pragma Storage_Size} to\n specify a sufficiently large size for the stack of the task that contains\n this call.\n \n-@node Irix-Specific Considerations\n-@section Irix-Specific Considerations\n-@cindex Irix libraries\n-\n-@noindent\n-The GCC support libraries coming with the Irix compiler have moved to\n-their canonical place with respect to the general Irix ABI related\n-conventions. Running applications built with the default shared GNAT\n-run-time now requires the LD_LIBRARY_PATH environment variable to\n-include this location. A possible way to achieve this is to issue the\n-following command line on a bash prompt:\n-\n-@smallexample\n-@group\n-$  LD_LIBRARY_PATH=$LD_LIBRARY_PATH:`dirname \\`gcc --print-file-name=libgcc_s.so\\``\n-@end group\n-@end smallexample\n-\n @node RTX-Specific Considerations\n @section RTX-Specific Considerations\n @cindex RTX libraries"}, {"sha": "c364fdb0a5447b86b458f560010788d6f1453849", "filename": "gcc/ada/gsocket.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fgsocket.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fgsocket.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgsocket.h?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -202,7 +202,7 @@\n     defined (_WIN32) || defined (__APPLE__)\n # define HAVE_THREAD_SAFE_GETxxxBYyyy 1\n \n-#elif defined (sgi) || defined (linux) || defined (__GLIBC__) || \\\n+#elif defined (linux) || defined (__GLIBC__) || \\\n      (defined (sun) && defined (__SVR4) && !defined (__vxworks)) || \\\n       defined(__rtems__)\n # define HAVE_GETxxxBYyyy_R 1"}, {"sha": "4db5789526ca5b0858ee2563cadc0c648a83374d", "filename": "gcc/ada/init.c", "status": "modified", "additions": 2, "deletions": 169, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -70,7 +70,8 @@ extern \"C\" {\n extern void __gnat_raise_program_error (const char *, int);\n \n /* Addresses of exception data blocks for predefined exceptions.  Tasking_Error\n-   is not used in this unit, and the abort signal is only used on IRIX.  */\n+   is not used in this unit, and the abort signal is only used on IRIX.\n+   ??? Revisit this part since IRIX is no longer supported.  */\n extern struct Exception_Data constraint_error;\n extern struct Exception_Data numeric_error;\n extern struct Exception_Data program_error;\n@@ -603,174 +604,6 @@ __gnat_install_handler (void)\n   __gnat_handler_installed = 1;\n }\n \n-/****************/\n-/* IRIX Section */\n-/****************/\n-\n-#elif defined (sgi)\n-\n-#include <signal.h>\n-#include <siginfo.h>\n-\n-#ifndef NULL\n-#define NULL 0\n-#endif\n-\n-#define SIGADAABORT 48\n-#define SIGNAL_STACK_SIZE 4096\n-#define SIGNAL_STACK_ALIGNMENT 64\n-\n-#define Check_Abort_Status     \\\n-                      system__soft_links__check_abort_status\n-extern int (*Check_Abort_Status) (void);\n-\n-extern struct Exception_Data _abort_signal;\n-\n-/* We are not setting the SA_SIGINFO bit in the sigaction flags when\n-   connecting that handler, with the effects described in the sigaction\n-   man page:\n-\n-          SA_SIGINFO   If set and the signal is caught, sig is passed as the\n-                       first argument to the signal-catching function.  If the\n-                       second argument is not equal to NULL, it points to a\n-                       siginfo_t structure containing the reason why the\n-                       signal was generated [see siginfo(5)]; the third\n-                       argument points to a ucontext_t structure containing\n-                       the receiving process's context when the signal was\n-                       delivered [see ucontext(5)].  If cleared and the signal\n-                       is caught, the first argument is also the signal number\n-                       but the second argument is the signal code identifying\n-                       the cause of the signal. The third argument points to a\n-                       sigcontext_t structure containing the receiving\n-                       process's context when the signal was delivered. This\n-                       is the default behavior (see signal(5) for more\n-                       details).  Additionally, when SA_SIGINFO is set for a\n-                       signal, multiple occurrences of that signal will be\n-                       queued for delivery in FIFO order (see sigqueue(3) for\n-                       a more detailed explanation of this concept), if those\n-                       occurrences of that signal were generated using\n-                       sigqueue(3).  */\n-\n-static void\n-__gnat_error_handler (int sig, siginfo_t *reason, void *uc ATTRIBUTE_UNUSED)\n-{\n-  /* This handler is installed with SA_SIGINFO cleared, but there's no\n-     prototype for the resulting alternative three-argument form, so we\n-     have to hack around this by casting reason to the int actually\n-     passed.  */\n-  int code = (int) reason;\n-  struct Exception_Data *exception;\n-  const char *msg;\n-\n-  switch (sig)\n-    {\n-    case SIGSEGV:\n-      if (code == EFAULT)\n-\t{\n-\t  exception = &program_error;\n-\t  msg = \"SIGSEGV: (Invalid virtual address)\";\n-\t}\n-      else if (code == ENXIO)\n-\t{\n-\t  exception = &program_error;\n-\t  msg = \"SIGSEGV: (Read beyond mapped object)\";\n-\t}\n-      else if (code == ENOSPC)\n-\t{\n-\t  exception = &program_error; /* ??? storage_error ??? */\n-\t  msg = \"SIGSEGV: (Autogrow for file failed)\";\n-\t}\n-      else if (code == EACCES || code == EEXIST)\n-\t{\n-\t  /* ??? We handle stack overflows here, some of which do trigger\n-\t         SIGSEGV + EEXIST on Irix 6.5 although EEXIST is not part of\n-\t         the documented valid codes for SEGV in the signal(5) man\n-\t         page.  */\n-\n-\t  /* ??? Re-add smarts to further verify that we launched\n-\t\t the stack into a guard page, not an attempt to\n-\t\t write to .text or something.  */\n-\t  exception = &storage_error;\n-\t  msg = \"SIGSEGV: stack overflow or erroneous memory access\";\n-\t}\n-      else\n-\t{\n-\t  /* Just in case the OS guys did it to us again.  Sometimes\n-\t     they fail to document all of the valid codes that are\n-\t     passed to signal handlers, just in case someone depends\n-\t     on knowing all the codes.  */\n-\t  exception = &program_error;\n-\t  msg = \"SIGSEGV: (Undocumented reason)\";\n-\t}\n-      break;\n-\n-    case SIGBUS:\n-      /* Map all bus errors to Program_Error.  */\n-      exception = &program_error;\n-      msg = \"SIGBUS\";\n-      break;\n-\n-    case SIGFPE:\n-      /* Map all fpe errors to Constraint_Error.  */\n-      exception = &constraint_error;\n-      msg = \"SIGFPE\";\n-      break;\n-\n-    case SIGADAABORT:\n-      if ((*Check_Abort_Status) ())\n-\t{\n-\t  exception = &_abort_signal;\n-\t  msg = \"\";\n-\t}\n-      else\n-\treturn;\n-\n-      break;\n-\n-    default:\n-      /* Everything else is a Program_Error.  */\n-      exception = &program_error;\n-      msg = \"unhandled signal\";\n-    }\n-\n-  Raise_From_Signal_Handler (exception, msg);\n-}\n-\n-void\n-__gnat_install_handler (void)\n-{\n-  struct sigaction act;\n-\n-  /* Setup signal handler to map synchronous signals to appropriate\n-     exceptions.  Make sure that the handler isn't interrupted by another\n-     signal that might cause a scheduling event!\n-\n-     The handler is installed with SA_SIGINFO cleared, but there's no\n-     C++ prototype for the three-argument form, so fake it by using\n-     sa_sigaction and casting the arguments instead.  */\n-\n-  act.sa_sigaction = __gnat_error_handler;\n-  act.sa_flags = SA_NODEFER + SA_RESTART;\n-  sigfillset (&act.sa_mask);\n-  sigemptyset (&act.sa_mask);\n-\n-  /* Do not install handlers if interrupt state is \"System\".  */\n-  if (__gnat_get_interrupt_state (SIGABRT) != 's')\n-    sigaction (SIGABRT, &act, NULL);\n-  if (__gnat_get_interrupt_state (SIGFPE) != 's')\n-    sigaction (SIGFPE,  &act, NULL);\n-  if (__gnat_get_interrupt_state (SIGILL) != 's')\n-    sigaction (SIGILL,  &act, NULL);\n-  if (__gnat_get_interrupt_state (SIGSEGV) != 's')\n-    sigaction (SIGSEGV, &act, NULL);\n-  if (__gnat_get_interrupt_state (SIGBUS) != 's')\n-    sigaction (SIGBUS,  &act, NULL);\n-  if (__gnat_get_interrupt_state (SIGADAABORT) != 's')\n-    sigaction (SIGADAABORT,  &act, NULL);\n-\n-  __gnat_handler_installed = 1;\n-}\n-\n /*******************/\n /* LynxOS Section */\n /*******************/"}, {"sha": "88c48467a2100f6881672b084c4efc2e5b1ad5f6", "filename": "gcc/ada/link.c", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Flink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Flink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flink.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -96,27 +96,7 @@ extern \"C\" {\n #define SHARED 'H'\n #define STATIC 'T'\n \n-#if defined (sgi)\n-const char *__gnat_object_file_option = \"-Wl,-objectlist,\";\n-const char *__gnat_run_path_option = \"-Wl,-rpath,\";\n-int __gnat_link_max = 5000;\n-unsigned char __gnat_objlist_file_supported = 1;\n-char __gnat_shared_libgnat_default = STATIC;\n-char __gnat_shared_libgcc_default = STATIC;\n-unsigned char __gnat_using_gnu_linker = 0;\n-const char *__gnat_object_library_extension = \".a\";\n-unsigned char __gnat_separate_run_path_options = 0;\n-\n-/* The libgcc_s locations have changed in GCC 4.  The n32 version used\n-   to be in \"lib\", it moved to \"lib32\" and \"lib\" became the home of\n-   the o32 version.  We are targetting n32 by default, so ... */\n-#if __GNUC__ < 4\n-const char *__gnat_default_libgcc_subdir = \"lib\";\n-#else\n-const char *__gnat_default_libgcc_subdir = \"lib32\";\n-#endif\n-\n-#elif defined (__WIN32)\n+#if defined (__WIN32)\n const char *__gnat_object_file_option = \"\";\n const char *__gnat_run_path_option = \"\";\n int __gnat_link_max = 30000;"}, {"sha": "2499bb723e9a0ae1f8ab9bb5d630153e1e5ca4bf", "filename": "gcc/ada/memtrack.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fmemtrack.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fmemtrack.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmemtrack.adb?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -59,7 +59,6 @@\n --    AIX\n --    GNU/Linux\n --    HP-UX\n---    Irix\n --    Solaris\n --    Alpha OpenVMS\n "}, {"sha": "cba87387a9dd61ec1bb59a7e58677c62e7512870", "filename": "gcc/ada/mlib-tgt-specific-irix.adb", "status": "removed", "additions": 0, "deletions": 182, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fada%2Fmlib-tgt-specific-irix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fada%2Fmlib-tgt-specific-irix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmlib-tgt-specific-irix.adb?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,182 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                     M L I B . T G T . S P E C I F I C                    --\n---                              (IRIX Version)                              --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---                     Copyright (C) 2003-2008, AdaCore                     --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n--- http://www.gnu.org/licenses for a complete copy of the license.          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This is the IRIX version of the body\n-\n-with MLib.Fil;\n-with MLib.Utl;\n-with Opt;\n-with Output; use Output;\n-\n-package body MLib.Tgt.Specific is\n-\n-   --  Non default subprogram\n-\n-   procedure Build_Dynamic_Library\n-     (Ofiles       : Argument_List;\n-      Options      : Argument_List;\n-      Interfaces   : Argument_List;\n-      Lib_Filename : String;\n-      Lib_Dir      : String;\n-      Symbol_Data  : Symbol_Record;\n-      Driver_Name  : Name_Id := No_Name;\n-      Lib_Version  : String  := \"\";\n-      Auto_Init    : Boolean := False);\n-\n-   function Is_Archive_Ext (Ext : String) return Boolean;\n-\n-   ---------------------------\n-   -- Build_Dynamic_Library --\n-   ---------------------------\n-\n-   procedure Build_Dynamic_Library\n-     (Ofiles       : Argument_List;\n-      Options      : Argument_List;\n-      Interfaces   : Argument_List;\n-      Lib_Filename : String;\n-      Lib_Dir      : String;\n-      Symbol_Data  : Symbol_Record;\n-      Driver_Name  : Name_Id := No_Name;\n-      Lib_Version  : String  := \"\";\n-      Auto_Init    : Boolean := False)\n-   is\n-      pragma Unreferenced (Interfaces);\n-      pragma Unreferenced (Symbol_Data);\n-      pragma Unreferenced (Auto_Init);\n-\n-      Lib_File : constant String :=\n-                   \"lib\" & MLib.Fil.Append_To (Lib_Filename, DLL_Ext);\n-\n-      Lib_Path : constant String :=\n-                   Lib_Dir & Directory_Separator & Lib_File;\n-\n-      Version_Arg          : String_Access;\n-      Symbolic_Link_Needed : Boolean := False;\n-\n-      N_Options    : Argument_List := Options;\n-      Options_Last : Natural := N_Options'Last;\n-      --  After moving -lxxx to Options_2, N_Options up to index Options_Last\n-      --  will contain the Options to pass to MLib.Utl.Gcc.\n-\n-      Real_Options_2 : Argument_List (1 .. Options'Length);\n-      Real_Options_2_Last : Natural := 0;\n-      --  Real_Options_2 up to index Real_Options_2_Last will contain the\n-      --  Options_2 to pass to MLib.Utl.Gcc.\n-\n-   begin\n-      if Opt.Verbose_Mode then\n-         Write_Str (\"building relocatable shared library \");\n-         Write_Line (Lib_Path);\n-      end if;\n-\n-      --  Move all -lxxx to Options_2\n-\n-      declare\n-         Index : Natural := N_Options'First;\n-         Arg   : String_Access;\n-\n-      begin\n-         while Index <= Options_Last loop\n-            Arg := N_Options (Index);\n-\n-            if Arg'Length > 2\n-              and then Arg (Arg'First .. Arg'First + 1) = \"-l\"\n-            then\n-               Real_Options_2_Last := Real_Options_2_Last + 1;\n-               Real_Options_2 (Real_Options_2_Last) := Arg;\n-               N_Options (Index .. Options_Last - 1) :=\n-                 N_Options (Index + 1 .. Options_Last);\n-               Options_Last := Options_Last - 1;\n-\n-            else\n-               Index := Index + 1;\n-            end if;\n-         end loop;\n-      end;\n-\n-      if Lib_Version = \"\" then\n-         MLib.Utl.Gcc\n-           (Output_File => Lib_Path,\n-            Objects     => Ofiles,\n-            Options     => N_Options (N_Options'First .. Options_Last),\n-            Driver_Name => Driver_Name,\n-            Options_2   => Real_Options_2 (1 .. Real_Options_2_Last));\n-\n-      else\n-         declare\n-            Maj_Version : constant String :=\n-                            Major_Id_Name (Lib_File, Lib_Version);\n-         begin\n-            if Maj_Version'Length /= 0 then\n-               Version_Arg := new String'(\"-Wl,-soname,\" & Maj_Version);\n-\n-            else\n-               Version_Arg := new String'(\"-Wl,-soname,\" & Lib_Version);\n-            end if;\n-\n-            if Is_Absolute_Path (Lib_Version) then\n-               MLib.Utl.Gcc\n-                 (Output_File => Lib_Version,\n-                  Objects     => Ofiles,\n-                  Options     => N_Options (N_Options'First .. Options_Last) &\n-                  Version_Arg,\n-                  Driver_Name => Driver_Name,\n-                  Options_2   => Real_Options_2 (1 .. Real_Options_2_Last));\n-               Symbolic_Link_Needed := Lib_Version /= Lib_Path;\n-\n-            else\n-               MLib.Utl.Gcc\n-                 (Output_File => Lib_Dir & Directory_Separator & Lib_Version,\n-                  Objects     => Ofiles,\n-                  Options     => N_Options (N_Options'First .. Options_Last) &\n-                  Version_Arg,\n-                  Driver_Name => Driver_Name,\n-                  Options_2   => Real_Options_2 (1 .. Real_Options_2_Last));\n-               Symbolic_Link_Needed :=\n-                 Lib_Dir & Directory_Separator & Lib_Version /= Lib_Path;\n-            end if;\n-\n-            if Symbolic_Link_Needed then\n-               Create_Sym_Links\n-                 (Lib_Path, Lib_Version, Lib_Dir, Maj_Version);\n-            end if;\n-         end;\n-      end if;\n-   end Build_Dynamic_Library;\n-\n-   --------------------\n-   -- Is_Archive_Ext --\n-   --------------------\n-\n-   function Is_Archive_Ext (Ext : String) return Boolean is\n-   begin\n-      return Ext = \".a\" or else Ext = \".so\";\n-   end Is_Archive_Ext;\n-\n-begin\n-   Build_Dynamic_Library_Ptr := Build_Dynamic_Library'Access;\n-   Is_Archive_Ext_Ptr := Is_Archive_Ext'Access;\n-end MLib.Tgt.Specific;"}, {"sha": "46d38f39be09f5aa695386fd8e3a664f7d59fbe0", "filename": "gcc/ada/s-interr-sigaction.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fs-interr-sigaction.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fs-interr-sigaction.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr-sigaction.adb?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1998-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,7 +29,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This is the IRIX & NT version of this package\n+--  This is the NT version of this package\n \n with Ada.Task_Identification;\n with Ada.Unchecked_Conversion;"}, {"sha": "8084d471c2eb0db83c2d2f67b8527afe6c35e11e", "filename": "gcc/ada/s-intman-irix.adb", "status": "removed", "additions": 0, "deletions": 137, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fada%2Fs-intman-irix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fada%2Fs-intman-irix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-intman-irix.adb?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,137 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                 GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                 --\n---                                                                          --\n---           S Y S T E M . I N T E R R U P T _ M A N A G E M E N T          --\n---                                                                          --\n---                                  B o d y                                 --\n---                                                                          --\n---                      Copyright (C) 1995-2010, AdaCore                    --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNARL was developed by the GNARL team at Florida State University.       --\n--- Extensive contributions were provided by Ada Core Technologies, Inc.     --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This is a SGI Pthread version of this package\n-\n---  Make a careful study of all signals available under the OS, to see which\n---  need to be reserved, kept always unmasked, or kept always unmasked. Be on\n---  the lookout for special signals that may be used by the thread library.\n-\n-package body System.Interrupt_Management is\n-\n-   use System.OS_Interface;\n-\n-   type Interrupt_List is array (Interrupt_ID range <>) of Interrupt_ID;\n-   Exception_Interrupts : constant Interrupt_List :=\n-     (SIGTSTP, SIGILL, SIGTRAP, SIGEMT, SIGFPE, SIGBUS, SIGSTOP, SIGKILL,\n-      SIGSEGV, SIGSYS, SIGXCPU, SIGXFSZ, SIGPROF, SIGPTINTR, SIGPTRESCHED,\n-      SIGABRT, SIGPIPE);\n-\n-   Unreserve_All_Interrupts : Interfaces.C.int;\n-   pragma Import\n-     (C, Unreserve_All_Interrupts, \"__gl_unreserve_all_interrupts\");\n-\n-   function State (Int : Interrupt_ID) return Character;\n-   pragma Import (C, State, \"__gnat_get_interrupt_state\");\n-\n-   --  Get interrupt state.  Defined in a-init.c\n-   --  The input argument is the interrupt number,\n-   --  and the result is one of the following:\n-\n-   User    : constant Character := 'u';\n-   Runtime : constant Character := 'r';\n-   Default : constant Character := 's';\n-   --    'n'   this interrupt not set by any Interrupt_State pragma\n-   --    'u'   Interrupt_State pragma set state to User\n-   --    'r'   Interrupt_State pragma set state to Runtime\n-   --    's'   Interrupt_State pragma set state to System (use \"default\"\n-   --           system handler)\n-\n-   ----------------\n-   -- Initialize --\n-   ----------------\n-\n-   Initialized : Boolean := False;\n-\n-   procedure Initialize is\n-      use type Interfaces.C.int;\n-   begin\n-      if Initialized then\n-         return;\n-      end if;\n-\n-      Initialized := True;\n-      Abort_Task_Interrupt := SIGABRT;\n-\n-      --  Change this if you want to use another signal for task abort.\n-      --  SIGTERM might be a good one.\n-\n-      pragma Assert (Keep_Unmasked = (Interrupt_ID'Range => False));\n-      pragma Assert (Reserve = (Interrupt_ID'Range => False));\n-\n-      --  Process state of exception signals\n-\n-      for J in Exception_Interrupts'Range loop\n-         if State (Exception_Interrupts (J)) /= User then\n-            Keep_Unmasked (Exception_Interrupts (J)) := True;\n-            Reserve (Exception_Interrupts (J)) := True;\n-         end if;\n-      end loop;\n-\n-      if State (Abort_Task_Interrupt) /= User then\n-         Keep_Unmasked (Abort_Task_Interrupt) := True;\n-         Reserve (Abort_Task_Interrupt) := True;\n-      end if;\n-\n-      --  Set SIGINT to unmasked state as long as it's\n-      --  not in \"User\" state.  Check for Unreserve_All_Interrupts last\n-\n-      if State (SIGINT) /= User then\n-         Keep_Unmasked (SIGINT) := True;\n-      end if;\n-\n-      --  Check all signals for state that requires keeping them\n-      --  unmasked and reserved\n-\n-      for J in Interrupt_ID'Range loop\n-         if State (J) = Default or else State (J) = Runtime then\n-            Keep_Unmasked (J) := True;\n-            Reserve (J) := True;\n-         end if;\n-      end loop;\n-\n-      --  Process pragma Unreserve_All_Interrupts. This overrides any\n-      --  settings due to pragma Interrupt_State:\n-\n-      if Unreserve_All_Interrupts /= 0 then\n-         Keep_Unmasked (SIGINT) := False;\n-         Reserve (SIGINT) := False;\n-      end if;\n-\n-      --  We do not have Signal 0 in reality. We just use this value\n-      --  to identify not existing signals (see s-intnam.ads). Therefore,\n-      --  Signal 0 should not be used in all signal related operations hence\n-      --  mark it as reserved.\n-\n-      Reserve (0) := True;\n-   end Initialize;\n-\n-end System.Interrupt_Management;"}, {"sha": "2c8968b54833c109fc35543eb6babf8efe2df295", "filename": "gcc/ada/s-mastop-irix.adb", "status": "removed", "additions": 0, "deletions": 351, "changes": 351, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fada%2Fs-mastop-irix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fada%2Fs-mastop-irix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-mastop-irix.adb?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,351 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                     SYSTEM.MACHINE_STATE_OPERATIONS                      --\n---                                                                          --\n---                                 B o d y                                  --\n---                         (Version for IRIX/MIPS)                          --\n---                                                                          --\n---          Copyright (C) 1999-2009, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This version of Ada.Exceptions.Machine_State_Operations is for use on\n---  SGI Irix systems. By means of compile time conditional calculations, it\n---  can handle both n32/n64 and o32 modes.\n-\n-with System.Machine_Code; use System.Machine_Code;\n-with System.Memory;\n-with System.Soft_Links; use System.Soft_Links;\n-with Ada.Unchecked_Conversion;\n-\n-package body System.Machine_State_Operations is\n-\n-   use System.Storage_Elements;\n-\n-   --  The exc_unwind function in libexc operates on a Sigcontext\n-\n-   --  Type sigcontext_t is defined in /usr/include/sys/signal.h.\n-   --  We define an equivalent Ada type here. From the comments in\n-   --  signal.h:\n-\n-   --    sigcontext is not part of the ABI - so this version is used to\n-   --    handle 32 and 64 bit applications - it is a constant size regardless\n-   --    of compilation mode, and always returns 64 bit register values\n-\n-   type Uns32 is mod 2 ** 32;\n-   type Uns64 is mod 2 ** 64;\n-\n-   type Uns32_Ptr is access all Uns32;\n-   type Uns64_Array is array (Integer range <>) of Uns64;\n-\n-   type Reg_Array is array (0 .. 31) of Uns64;\n-\n-   type Sigcontext is record\n-      SC_Regmask           : Uns32;          --  0\n-      SC_Status            : Uns32;          --  4\n-      SC_PC                : Uns64;          --  8\n-      SC_Regs              : Reg_Array;      --  16\n-      SC_Fpregs            : Reg_Array;      --  272\n-      SC_Ownedfp           : Uns32;          --  528\n-      SC_Fpc_Csr           : Uns32;          --  532\n-      SC_Fpc_Eir           : Uns32;          --  536\n-      SC_Ssflags           : Uns32;          --  540\n-      SC_Mdhi              : Uns64;          --  544\n-      SC_Mdlo              : Uns64;          --  552\n-      SC_Cause             : Uns64;          --  560\n-      SC_Badvaddr          : Uns64;          --  568\n-      SC_Triggersave       : Uns64;          --  576\n-      SC_Sigset            : Uns64;          --  584\n-      SC_Fp_Rounded_Result : Uns64;          --  592\n-      SC_Pancake           : Uns64_Array (0 .. 5);\n-      SC_Pad               : Uns64_Array (0 .. 26);\n-   end record;\n-\n-   type Sigcontext_Ptr is access all Sigcontext;\n-\n-   SC_Regs_Pos   : constant String := \"16\";\n-   SC_Fpregs_Pos : constant String := \"272\";\n-   --  Byte offset of the Integer and Floating Point register save areas\n-   --  within the Sigcontext.\n-\n-   function To_Sigcontext_Ptr is\n-     new Ada.Unchecked_Conversion (Machine_State, Sigcontext_Ptr);\n-\n-   type Addr_Int is mod 2 ** Long_Integer'Size;\n-   --  An unsigned integer type whose size is the same as System.Address.\n-   --  We rely on the fact that Long_Integer'Size = System.Address'Size in\n-   --  all ABIs.  Type Addr_Int can be converted to Uns64.\n-\n-   function To_Code_Loc is\n-     new Ada.Unchecked_Conversion (Addr_Int, Code_Loc);\n-   function To_Addr_Int is\n-     new Ada.Unchecked_Conversion (System.Address, Addr_Int);\n-   function To_Uns32_Ptr is\n-     new Ada.Unchecked_Conversion (Addr_Int, Uns32_Ptr);\n-\n-   --------------------------------\n-   -- ABI-Dependent Declarations --\n-   --------------------------------\n-\n-   o32  : constant Boolean := System.Word_Size = 32;\n-   n32  : constant Boolean := System.Word_Size = 64;\n-   o32n : constant Natural := Boolean'Pos (o32);\n-   n32n : constant Natural := Boolean'Pos (n32);\n-   --  Flags to indicate which ABI is in effect for this compilation. For the\n-   --  purposes of this unit, the n32 and n64 ABIs are identical.\n-\n-   LSC : constant Character := Character'Val (o32n * Character'Pos ('w') +\n-                                              n32n * Character'Pos ('d'));\n-   --  This is 'w' for o32, and 'd' for n32/n64, used for constructing the\n-   --  load/store instructions used to save/restore machine instructions.\n-\n-   Roff : constant Character := Character'Val (o32n * Character'Pos ('4') +\n-                                               n32n * Character'Pos ('0'));\n-   --  Offset from first byte of a __uint64 register save location where\n-   --  the register value is stored.  For n32/64 we store the entire 64\n-   --  bit register into the uint64.  For o32, only 32 bits are stored\n-   --  at an offset of 4 bytes. This is used as part of expressions with\n-   --  '+' signs on both sides, so a null offset has to be '0' and not ' '\n-   --  to avoid assembler syntax errors on \"X + + Y\" in the latter case.\n-\n-   procedure Update_GP (Scp : Sigcontext_Ptr);\n-\n-   ---------------\n-   -- Update_GP --\n-   ---------------\n-\n-   procedure Update_GP (Scp : Sigcontext_Ptr) is\n-\n-      type F_op  is mod 2 ** 6;\n-      type F_reg is mod 2 ** 5;\n-      type F_imm is new Short_Integer;\n-\n-      type I_Type is record\n-         op    : F_op;\n-         rs    : F_reg;\n-         rt    : F_reg;\n-         imm   : F_imm;\n-      end record;\n-\n-      pragma Pack (I_Type);\n-      for I_Type'Size use 32;\n-\n-      type I_Type_Ptr is access all I_Type;\n-\n-      LW : constant F_op := 2#100011#;\n-      Reg_GP : constant := 28;\n-\n-      type Address_Int is mod 2 ** Standard'Address_Size;\n-      function To_I_Type_Ptr is new\n-        Ada.Unchecked_Conversion (Address_Int, I_Type_Ptr);\n-\n-      Ret_Ins : constant I_Type_Ptr := To_I_Type_Ptr (Address_Int (Scp.SC_PC));\n-      GP_Ptr  : Uns32_Ptr;\n-\n-   begin\n-      if Ret_Ins.op = LW and then Ret_Ins.rt = Reg_GP then\n-         GP_Ptr := To_Uns32_Ptr\n-           (Addr_Int (Scp.SC_Regs (Integer (Ret_Ins.rs)))\n-            + Addr_Int (Ret_Ins.imm));\n-         Scp.SC_Regs (Reg_GP) := Uns64 (GP_Ptr.all);\n-      end if;\n-   end Update_GP;\n-\n-   ----------------------------\n-   -- Allocate_Machine_State --\n-   ----------------------------\n-\n-   function Allocate_Machine_State return Machine_State is\n-   begin\n-      return Machine_State\n-        (Memory.Alloc (Sigcontext'Max_Size_In_Storage_Elements));\n-   end Allocate_Machine_State;\n-\n-   ----------------\n-   -- Fetch_Code --\n-   ----------------\n-\n-   function Fetch_Code (Loc : Code_Loc) return Code_Loc is\n-   begin\n-      return Loc;\n-   end Fetch_Code;\n-\n-   ------------------------\n-   -- Free_Machine_State --\n-   ------------------------\n-\n-   procedure Free_Machine_State (M : in out Machine_State) is\n-   begin\n-      Memory.Free (Address (M));\n-      M := Machine_State (Null_Address);\n-   end Free_Machine_State;\n-\n-   ------------------\n-   -- Get_Code_Loc --\n-   ------------------\n-\n-   function Get_Code_Loc (M : Machine_State) return Code_Loc is\n-      SC : constant Sigcontext_Ptr := To_Sigcontext_Ptr (M);\n-   begin\n-      return To_Code_Loc (Addr_Int (SC.SC_PC));\n-   end Get_Code_Loc;\n-\n-   --------------------------\n-   -- Machine_State_Length --\n-   --------------------------\n-\n-   function Machine_State_Length return Storage_Offset is\n-   begin\n-      return Sigcontext'Max_Size_In_Storage_Elements;\n-   end Machine_State_Length;\n-\n-   ---------------\n-   -- Pop_Frame --\n-   ---------------\n-\n-   procedure Pop_Frame (M : Machine_State) is\n-      Scp : constant Sigcontext_Ptr := To_Sigcontext_Ptr (M);\n-\n-      procedure Exc_Unwind (Scp : Sigcontext_Ptr; Fde : Long_Integer := 0);\n-      pragma Import (C, Exc_Unwind, \"exc_unwind\");\n-\n-      pragma Linker_Options (\"-lexc\");\n-\n-   begin\n-      --  exc_unwind is apparently not thread-safe under IRIX, so protect it\n-      --  against race conditions within the GNAT run time.\n-      --  ??? Note that we might want to use a fine grained lock here since\n-      --  Lock_Task is used in many other places.\n-\n-      Lock_Task.all;\n-\n-      Exc_Unwind (Scp);\n-\n-      Unlock_Task.all;\n-\n-      if Scp.SC_PC = 0 or else Scp.SC_PC = 1 then\n-\n-         --  A return value of 0 or 1 means exc_unwind couldn't find a parent\n-         --  frame. Propagate_Exception expects a zero return address to\n-         --  indicate TOS.\n-\n-         Scp.SC_PC := 0;\n-\n-      else\n-         --  Set the GP to restore to the caller value (not callee value)\n-         --  This is done only in o32 mode. In n32/n64 mode, GP is a normal\n-         --  callee save register\n-\n-         if o32 then\n-            Update_GP (Scp);\n-         end if;\n-\n-         --  Adjust the return address to the call site, not the\n-         --  instruction following the branch delay slot.  This may\n-         --  be necessary if the last instruction of a pragma No_Return\n-         --  subprogram is a call. The first instruction following the\n-         --  delay slot may be the start of another subprogram. We back\n-         --  off the address by 8, which points safely into the middle\n-         --  of the generated subprogram code, avoiding end effects.\n-\n-         Scp.SC_PC := Scp.SC_PC - 8;\n-      end if;\n-   end Pop_Frame;\n-\n-   -----------------------\n-   -- Set_Machine_State --\n-   -----------------------\n-\n-   procedure Set_Machine_State (M : Machine_State) is\n-\n-      SI : constant String (1 .. 2) := 's' & LSC;\n-      --  This is \"sw\" in o32 mode, and \"sd\" in n32 mode\n-\n-      SF : constant String (1 .. 4) := 's' & LSC & \"c1\";\n-      --  This is \"swc1\" in o32 mode and \"sdc1\" in n32 mode\n-\n-      PI : String renames SC_Regs_Pos;\n-      PF : String renames SC_Fpregs_Pos;\n-\n-      Scp : Sigcontext_Ptr;\n-\n-   begin\n-      --  Save the integer registers. Note that we know that $4 points\n-      --  to M, since that is where the first parameter is passed.\n-      --  Restore integer registers from machine state. Note that we know\n-      --  that $4 points to M since this is the standard calling sequence\n-\n-      <<Past_Prolog>>\n-\n-      Asm (SI & \" $16,  16*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n-      Asm (SI & \" $17,  17*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n-      Asm (SI & \" $18,  18*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n-      Asm (SI & \" $19,  19*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n-      Asm (SI & \" $20,  20*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n-      Asm (SI & \" $21,  21*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n-      Asm (SI & \" $22,  22*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n-      Asm (SI & \" $23,  23*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n-      Asm (SI & \" $24,  24*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n-      Asm (SI & \" $25,  25*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n-      Asm (SI & \" $26,  26*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n-      Asm (SI & \" $27,  27*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n-      Asm (SI & \" $28,  28*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n-      Asm (SI & \" $29,  29*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n-      Asm (SI & \" $30,  30*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n-      Asm (SI & \" $31,  31*8+\" & Roff & \"+\" & PI & \"($4)\", Volatile => True);\n-\n-      --  Restore floating-point registers from machine state\n-\n-      Asm (SF & \" $f16, 16*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n-      Asm (SF & \" $f17, 17*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n-      Asm (SF & \" $f18, 18*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n-      Asm (SF & \" $f19, 19*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n-      Asm (SF & \" $f20, 20*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n-      Asm (SF & \" $f21, 21*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n-      Asm (SF & \" $f22, 22*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n-      Asm (SF & \" $f23, 23*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n-      Asm (SF & \" $f24, 24*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n-      Asm (SF & \" $f25, 25*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n-      Asm (SF & \" $f26, 26*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n-      Asm (SF & \" $f27, 27*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n-      Asm (SF & \" $f28, 28*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n-      Asm (SF & \" $f29, 29*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n-      Asm (SF & \" $f30, 30*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n-      Asm (SF & \" $f31, 31*8+\" & Roff & \"+\" & PF & \"($4)\", Volatile => True);\n-\n-      --  Set the PC value for the context to a location after the\n-      --  prolog has been executed.\n-\n-      Scp := To_Sigcontext_Ptr (M);\n-      Scp.SC_PC := Uns64 (To_Addr_Int (Past_Prolog'Address));\n-\n-      --  We saved the state *inside* this routine, but what we want is\n-      --  the state at the call site. So we need to do one pop operation.\n-      --  This pop operation will properly set the PC value in the machine\n-      --  state, so there is no need to save PC in the above code.\n-\n-      Pop_Frame (M);\n-   end Set_Machine_State;\n-\n-end System.Machine_State_Operations;"}, {"sha": "6ea57752dc4f86507a532a63b53ffa7bf3f41430", "filename": "gcc/ada/s-oscons-tmplt.c", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fs-oscons-tmplt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fs-oscons-tmplt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-oscons-tmplt.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -84,15 +84,6 @@ pragma Style_Checks (\"M32766\");\n /** For Linux _XOPEN_SOURCE must be defined, otherwise IOV_MAX is not defined\n  **/\n #define _XOPEN_SOURCE 500\n-\n-#elif defined (__mips) && defined (__sgi)\n-/** For IRIX 6, _XOPEN5 must be defined and _XOPEN_IOV_MAX must be used as\n- ** IOV_MAX, otherwise IOV_MAX is not defined.  IRIX 5 has neither.\n- **/\n-#ifdef _XOPEN_IOV_MAX\n-#define _XOPEN5\n-#define IOV_MAX _XOPEN_IOV_MAX\n-#endif\n #endif\n \n /* Include gsocket.h before any system header so it can redefine FD_SETSIZE */\n@@ -1233,11 +1224,11 @@ CND(SIZEOF_tv_usec, \"tv_usec\")\n */\n \n /**\n- ** On Solaris and IRIX, field tv_sec in struct timeval has an undocumented\n+ ** On Solaris, field tv_sec in struct timeval has an undocumented\n  ** hard-wired limit of 100 million.\n  ** On IA64 HP-UX the limit is 2**31 - 1.\n  **/\n-#if defined (sun) || (defined (__mips) && defined (__sgi))\n+#if defined (sun)\n # define MAX_tv_sec \"100_000_000\"\n \n #elif defined (__hpux__)\n@@ -1348,11 +1339,6 @@ CND(CLOCK_MONOTONIC, \"System monotonic clock\")\n CND(CLOCK_FASTEST, \"Fastest clock\")\n #endif\n \n-#if defined (__sgi)\n-CND(CLOCK_SGI_FAST,  \"SGI fast clock\")\n-CND(CLOCK_SGI_CYCLE, \"SGI CPU clock\")\n-#endif\n-\n #ifndef CLOCK_THREAD_CPUTIME_ID\n # define CLOCK_THREAD_CPUTIME_ID -1\n #endif"}, {"sha": "cc3e015f742128d2d3b7382add2347c4b957272f", "filename": "gcc/ada/s-osinte-irix.adb", "status": "removed", "additions": 0, "deletions": 87, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fada%2Fs-osinte-irix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fada%2Fs-osinte-irix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-irix.adb?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,87 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                 GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                 --\n---                                                                          --\n---                   S Y S T E M . O S _ I N T E R F A C E                  --\n---                                                                          --\n---                                  B o d y                                 --\n---                                                                          --\n---         Copyright (C) 1992-2009  Free Software Foundation, Inc.          --\n---                                                                          --\n--- GNARL is free software; you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNARL was developed by the GNARL team at Florida State University.       --\n--- Extensive contributions were provided by Ada Core Technologies, Inc.     --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This is the IRIX version of this package\n-\n---  This package encapsulates all direct interfaces to OS services that are\n---  needed by children of System.\n-\n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during tasking\n---  operations. It causes infinite loops and other problems.\n-\n-with Interfaces.C; use Interfaces.C;\n-\n-package body System.OS_Interface is\n-\n-   ------------------\n-   -- pthread_init --\n-   ------------------\n-\n-   procedure pthread_init is\n-   begin\n-      null;\n-   end pthread_init;\n-\n-   -----------------\n-   -- To_Duration --\n-   -----------------\n-\n-   function To_Duration (TS : timespec) return Duration is\n-   begin\n-      return Duration (TS.tv_sec) + Duration (TS.tv_nsec) / 10#1#E9;\n-   end To_Duration;\n-\n-   -----------------\n-   -- To_Timespec --\n-   -----------------\n-\n-   function To_Timespec (D : Duration) return timespec is\n-      S : time_t;\n-      F : Duration;\n-\n-   begin\n-      S := time_t (Long_Long_Integer (D));\n-      F := D - Duration (S);\n-\n-      --  If F has negative value due to a round-up, adjust for positive F\n-      --  value.\n-\n-      if F < 0.0 then\n-         S := S - 1;\n-         F := F + 1.0;\n-      end if;\n-\n-      return timespec'(tv_sec => S,\n-                       tv_nsec => long (Long_Long_Integer (F * 10#1#E9)));\n-   end To_Timespec;\n-\n-end System.OS_Interface;"}, {"sha": "365a3de2dcab9876f4ca24159aa722e170953a05", "filename": "gcc/ada/s-osinte-irix.ads", "status": "removed", "additions": 0, "deletions": 519, "changes": 519, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fada%2Fs-osinte-irix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fada%2Fs-osinte-irix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-irix.ads?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,519 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                 GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                 --\n---                                                                          --\n---                   S Y S T E M . O S _ I N T E R F A C E                  --\n---                                                                          --\n---                                  S p e c                                 --\n---                                                                          --\n---             Copyright (C) 1991-1994, Florida State University            --\n---          Copyright (C) 1995-2011, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNARL was developed by the GNARL team at Florida State University.       --\n--- Extensive contributions were provided by Ada Core Technologies, Inc.     --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This is the SGI Pthreads version of this package\n-\n---  This package encapsulates all direct interfaces to OS services that are\n---  needed by the tasking run-time (libgnarl).\n-\n---  PLEASE DO NOT add any with-clauses to this package or remove the pragma\n---  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n-\n-with Ada.Unchecked_Conversion;\n-\n-with Interfaces.C;\n-\n-package System.OS_Interface is\n-\n-   pragma Preelaborate;\n-\n-   pragma Linker_Options (\"-lpthread\");\n-\n-   subtype int            is Interfaces.C.int;\n-   subtype short          is Interfaces.C.short;\n-   subtype long           is Interfaces.C.long;\n-   subtype unsigned       is Interfaces.C.unsigned;\n-   subtype unsigned_short is Interfaces.C.unsigned_short;\n-   subtype unsigned_long  is Interfaces.C.unsigned_long;\n-   subtype unsigned_char  is Interfaces.C.unsigned_char;\n-   subtype plain_char     is Interfaces.C.plain_char;\n-   subtype size_t         is Interfaces.C.size_t;\n-\n-   -----------\n-   -- Errno --\n-   -----------\n-\n-   function errno return int;\n-   pragma Import (C, errno, \"__get_errno\");\n-\n-   EINTR     : constant := 4;   --  interrupted system call\n-   EAGAIN    : constant := 11;  --  No more processes\n-   ENOMEM    : constant := 12;  --  Not enough core\n-   EINVAL    : constant := 22;  --  Invalid argument\n-   ETIMEDOUT : constant := 145; --  Connection timed out\n-\n-   -------------\n-   -- Signals --\n-   -------------\n-\n-   Max_Interrupt : constant := 64;\n-   type Signal is new int range 0 .. Max_Interrupt;\n-   for Signal'Size use int'Size;\n-\n-   SIGHUP     : constant := 1; --  hangup\n-   SIGINT     : constant := 2; --  interrupt (rubout)\n-   SIGQUIT    : constant := 3; --  quit (ASCD FS)\n-   SIGILL     : constant := 4; --  illegal instruction (not reset)\n-   SIGTRAP    : constant := 5; --  trace trap (not reset)\n-   SIGIOT     : constant := 6; --  IOT instruction\n-   SIGABRT    : constant := 6; --  used by abort, replace SIGIOT in the future\n-   SIGEMT     : constant := 7; --  EMT instruction\n-   SIGFPE     : constant := 8; --  floating point exception\n-   SIGKILL    : constant := 9; --  kill (cannot be caught or ignored)\n-   SIGBUS     : constant := 10; --  bus error\n-   SIGSEGV    : constant := 11; --  segmentation violation\n-   SIGSYS     : constant := 12; --  bad argument to system call\n-   SIGPIPE    : constant := 13; --  write on a pipe with no one to read it\n-   SIGALRM    : constant := 14; --  alarm clock\n-   SIGTERM    : constant := 15; --  software termination signal from kill\n-   SIGUSR1    : constant := 16; --  user defined signal 1\n-   SIGUSR2    : constant := 17; --  user defined signal 2\n-   SIGCLD     : constant := 18; --  alias for SIGCHLD\n-   SIGCHLD    : constant := 18; --  child status change\n-   SIGPWR     : constant := 19; --  power-fail restart\n-   SIGWINCH   : constant := 20; --  window size change\n-   SIGURG     : constant := 21; --  urgent condition on IO channel\n-   SIGPOLL    : constant := 22; --  pollable event occurred\n-   SIGIO      : constant := 22; --  I/O possible (Solaris SIGPOLL alias)\n-   SIGSTOP    : constant := 23; --  stop (cannot be caught or ignored)\n-   SIGTSTP    : constant := 24; --  user stop requested from tty\n-   SIGCONT    : constant := 25; --  stopped process has been continued\n-   SIGTTIN    : constant := 26; --  background tty read attempted\n-   SIGTTOU    : constant := 27; --  background tty write attempted\n-   SIGVTALRM  : constant := 28; --  virtual timer expired\n-   SIGPROF    : constant := 29; --  profiling timer expired\n-   SIGXCPU    : constant := 30; --  CPU time limit exceeded\n-   SIGXFSZ    : constant := 31; --  filesize limit exceeded\n-   SIGK32     : constant := 32; --  reserved for kernel (IRIX)\n-   SIGCKPT    : constant := 33; --  Checkpoint warning\n-   SIGRESTART : constant := 34; --  Restart warning\n-   SIGUME     : constant := 35; --  Uncorrectable memory error\n-   --  Signals defined for Posix 1003.1c\n-   SIGPTINTR    : constant := 47;\n-   SIGPTRESCHED : constant := 48;\n-   --  Posix 1003.1b signals\n-   SIGRTMIN   : constant := 49; --  Posix 1003.1b signals\n-   SIGRTMAX   : constant := 64; --  Posix 1003.1b signals\n-\n-   type sigset_t is private;\n-\n-   function sigaddset (set : access sigset_t; sig : Signal) return int;\n-   pragma Import (C, sigaddset, \"sigaddset\");\n-\n-   function sigdelset (set : access sigset_t; sig : Signal) return int;\n-   pragma Import (C, sigdelset, \"sigdelset\");\n-\n-   function sigfillset (set : access sigset_t) return int;\n-   pragma Import (C, sigfillset, \"sigfillset\");\n-\n-   function sigismember (set : access sigset_t; sig : Signal) return int;\n-   pragma Import (C, sigismember, \"sigismember\");\n-\n-   function sigemptyset (set : access sigset_t) return int;\n-   pragma Import (C, sigemptyset, \"sigemptyset\");\n-\n-   type array_type_2 is array (Integer range 0 .. 1) of int;\n-   type struct_sigaction is record\n-      sa_flags     : int;\n-      sa_handler   : System.Address;\n-      sa_mask      : sigset_t;\n-      sa_resv      : array_type_2;\n-   end record;\n-   pragma Convention (C, struct_sigaction);\n-\n-   type struct_sigaction_ptr is access all struct_sigaction;\n-\n-   SIG_BLOCK   : constant := 1;\n-   SIG_UNBLOCK : constant := 2;\n-   SIG_SETMASK : constant := 3;\n-\n-   SIG_DFL : constant := 0;\n-   SIG_IGN : constant := 1;\n-\n-   function sigaction\n-     (sig  : Signal;\n-      act  : struct_sigaction_ptr;\n-      oact : struct_sigaction_ptr := null) return int;\n-   pragma Import (C, sigaction, \"sigaction\");\n-\n-   ----------\n-   -- Time --\n-   ----------\n-\n-   type timespec is private;\n-   type timespec_ptr is access all timespec;\n-\n-   type clockid_t is new int;\n-\n-   SGI_CYCLECNTR_SIZE : constant := 165;\n-\n-   function syssgi (request : Interfaces.C.int) return Interfaces.C.ptrdiff_t;\n-   pragma Import (C, syssgi, \"syssgi\");\n-\n-   function clock_gettime\n-     (clock_id : clockid_t;\n-      tp       : access timespec) return int;\n-   pragma Import (C, clock_gettime, \"clock_gettime\");\n-\n-   function clock_getres\n-     (clock_id : clockid_t;\n-      tp       : access timespec) return int;\n-   pragma Import (C, clock_getres, \"clock_getres\");\n-\n-   function To_Duration (TS : timespec) return Duration;\n-   pragma Inline (To_Duration);\n-\n-   function To_Timespec (D : Duration) return timespec;\n-   pragma Inline (To_Timespec);\n-\n-   -------------------------\n-   -- Priority Scheduling --\n-   -------------------------\n-\n-   SCHED_FIFO  : constant := 1;\n-   SCHED_RR    : constant := 2;\n-   SCHED_TS    : constant := 3;\n-   SCHED_OTHER : constant := 3;\n-   SCHED_NP    : constant := 4;\n-\n-   function sched_get_priority_min (Policy : int) return int;\n-   pragma Import (C, sched_get_priority_min, \"sched_get_priority_min\");\n-\n-   function sched_get_priority_max (Policy : int) return int;\n-   pragma Import (C, sched_get_priority_max, \"sched_get_priority_max\");\n-\n-   -------------\n-   -- Process --\n-   -------------\n-\n-   type pid_t is private;\n-\n-   function kill (pid : pid_t; sig : Signal) return int;\n-   pragma Import (C, kill, \"kill\");\n-\n-   function getpid return pid_t;\n-   pragma Import (C, getpid, \"getpid\");\n-\n-   -------------\n-   -- Threads --\n-   -------------\n-\n-   type Thread_Body is access\n-     function (arg : System.Address) return System.Address;\n-   pragma Convention (C, Thread_Body);\n-\n-   function Thread_Body_Access is new\n-     Ada.Unchecked_Conversion (System.Address, Thread_Body);\n-\n-   type pthread_t           is private;\n-   subtype Thread_Id        is pthread_t;\n-\n-   type pthread_mutex_t     is limited private;\n-   type pthread_cond_t      is limited private;\n-   type pthread_attr_t      is limited private;\n-   type pthread_mutexattr_t is limited private;\n-   type pthread_condattr_t  is limited private;\n-   type pthread_key_t       is private;\n-\n-   PTHREAD_CREATE_DETACHED : constant := 1;\n-\n-   --  Read/Write lock not supported on SGI. To add support both types\n-   --  pthread_rwlock_t and pthread_rwlockattr_t must properly be defined\n-   --  with the associated routines pthread_rwlock_[init/destroy] and\n-   --  pthread_rwlock_[rdlock/wrlock/unlock].\n-\n-   subtype pthread_rwlock_t     is pthread_mutex_t;\n-   subtype pthread_rwlockattr_t is pthread_mutexattr_t;\n-\n-   -----------\n-   -- Stack --\n-   -----------\n-\n-   Alternate_Stack_Size : constant := 0;\n-   --  No alternate signal stack is used on this platform\n-\n-   ---------------------------------------\n-   -- Nonstandard Thread Initialization --\n-   ---------------------------------------\n-\n-   procedure pthread_init;\n-   pragma Inline (pthread_init);\n-   --  This is a dummy procedure to share some GNULLI files\n-\n-   -------------------------\n-   -- POSIX.1c  Section 3 --\n-   -------------------------\n-\n-   function sigwait\n-     (set : access sigset_t;\n-      sig : access Signal) return int;\n-   pragma Import (C, sigwait, \"sigwait\");\n-\n-   function pthread_kill\n-     (thread : pthread_t;\n-      sig    : Signal) return int;\n-   pragma Import (C, pthread_kill, \"pthread_kill\");\n-\n-   function pthread_sigmask\n-     (how  : int;\n-      set  : access sigset_t;\n-      oset : access sigset_t) return int;\n-   pragma Import (C, pthread_sigmask, \"pthread_sigmask\");\n-\n-   --------------------------\n-   -- POSIX.1c  Section 11 --\n-   --------------------------\n-\n-   function pthread_mutexattr_init\n-     (attr : access pthread_mutexattr_t) return int;\n-   pragma Import (C, pthread_mutexattr_init, \"pthread_mutexattr_init\");\n-\n-   function pthread_mutexattr_destroy\n-     (attr : access pthread_mutexattr_t) return int;\n-   pragma Import (C, pthread_mutexattr_destroy, \"pthread_mutexattr_destroy\");\n-\n-   function pthread_mutex_init\n-     (mutex : access pthread_mutex_t;\n-      attr  : access pthread_mutexattr_t) return int;\n-   pragma Import (C, pthread_mutex_init, \"pthread_mutex_init\");\n-\n-   function pthread_mutex_destroy (mutex : access pthread_mutex_t) return int;\n-   pragma Import (C, pthread_mutex_destroy, \"pthread_mutex_destroy\");\n-\n-   function pthread_mutex_lock (mutex : access pthread_mutex_t) return int;\n-   pragma Import (C, pthread_mutex_lock, \"pthread_mutex_lock\");\n-\n-   function pthread_mutex_unlock (mutex : access pthread_mutex_t) return int;\n-   pragma Import (C, pthread_mutex_unlock, \"pthread_mutex_unlock\");\n-\n-   function pthread_condattr_init\n-     (attr : access pthread_condattr_t) return int;\n-   pragma Import (C, pthread_condattr_init, \"pthread_condattr_init\");\n-\n-   function pthread_condattr_destroy\n-     (attr : access pthread_condattr_t) return int;\n-   pragma Import (C, pthread_condattr_destroy, \"pthread_condattr_destroy\");\n-\n-   function pthread_cond_init\n-     (cond : access pthread_cond_t;\n-      attr : access pthread_condattr_t) return int;\n-   pragma Import (C, pthread_cond_init, \"pthread_cond_init\");\n-\n-   function pthread_cond_destroy (cond : access pthread_cond_t) return int;\n-   pragma Import (C, pthread_cond_destroy, \"pthread_cond_destroy\");\n-\n-   function pthread_cond_signal (cond : access pthread_cond_t) return int;\n-   pragma Import (C, pthread_cond_signal, \"pthread_cond_signal\");\n-\n-   function pthread_cond_wait\n-     (cond  : access pthread_cond_t;\n-      mutex : access pthread_mutex_t) return int;\n-   pragma Import (C, pthread_cond_wait, \"pthread_cond_wait\");\n-\n-   function pthread_cond_timedwait\n-     (cond    : access pthread_cond_t;\n-      mutex   : access pthread_mutex_t;\n-      abstime : access timespec) return int;\n-   pragma Import (C, pthread_cond_timedwait, \"pthread_cond_timedwait\");\n-\n-   --------------------------\n-   -- POSIX.1c  Section 13 --\n-   --------------------------\n-\n-   PTHREAD_PRIO_NONE    : constant := 0;\n-   PTHREAD_PRIO_PROTECT : constant := 2;\n-   PTHREAD_PRIO_INHERIT : constant := 1;\n-\n-   function pthread_mutexattr_setprotocol\n-     (attr     : access pthread_mutexattr_t;\n-      protocol : int) return int;\n-   pragma Import (C, pthread_mutexattr_setprotocol);\n-\n-   function pthread_mutexattr_setprioceiling\n-     (attr     : access pthread_mutexattr_t;\n-      prioceiling : int) return int;\n-   pragma Import (C, pthread_mutexattr_setprioceiling);\n-\n-   type struct_sched_param is record\n-      sched_priority : int;\n-   end record;\n-   pragma Convention (C, struct_sched_param);\n-\n-   function pthread_setschedparam\n-     (thread : pthread_t;\n-      policy : int;\n-      param  : access struct_sched_param)\n-     return int;\n-   pragma Import (C, pthread_setschedparam, \"pthread_setschedparam\");\n-\n-   function pthread_attr_setscope\n-     (attr            : access pthread_attr_t;\n-      contentionscope : int) return int;\n-   pragma Import (C, pthread_attr_setscope, \"pthread_attr_setscope\");\n-\n-   function pthread_attr_setinheritsched\n-     (attr         : access pthread_attr_t;\n-      inheritsched : int) return int;\n-   pragma Import\n-     (C, pthread_attr_setinheritsched, \"pthread_attr_setinheritsched\");\n-\n-   function pthread_attr_setschedpolicy\n-     (attr   : access pthread_attr_t;\n-      policy : int) return int;\n-   pragma Import (C, pthread_attr_setschedpolicy);\n-\n-   function pthread_attr_setschedparam\n-     (attr        : access pthread_attr_t;\n-      sched_param : access struct_sched_param)\n-     return int;\n-   pragma Import (C, pthread_attr_setschedparam, \"pthread_attr_setschedparam\");\n-\n-   function sched_yield return int;\n-   pragma Import (C, sched_yield, \"sched_yield\");\n-\n-   ---------------------------\n-   -- P1003.1c - Section 16 --\n-   ---------------------------\n-\n-   function pthread_attr_init (attributes : access pthread_attr_t) return int;\n-   pragma Import (C, pthread_attr_init, \"pthread_attr_init\");\n-\n-   function pthread_attr_destroy\n-     (attributes : access pthread_attr_t) return int;\n-   pragma Import (C, pthread_attr_destroy, \"pthread_attr_destroy\");\n-\n-   function pthread_attr_setdetachstate\n-     (attr        : access pthread_attr_t;\n-      detachstate : int) return int;\n-   pragma Import (C, pthread_attr_setdetachstate);\n-\n-   function pthread_attr_setstacksize\n-     (attr      : access pthread_attr_t;\n-      stacksize : size_t) return int;\n-   pragma Import (C, pthread_attr_setstacksize, \"pthread_attr_setstacksize\");\n-\n-   function pthread_create\n-     (thread        : access pthread_t;\n-      attributes    : access pthread_attr_t;\n-      start_routine : Thread_Body;\n-      arg           : System.Address) return int;\n-   pragma Import (C, pthread_create, \"pthread_create\");\n-\n-   procedure pthread_exit (status : System.Address);\n-   pragma Import (C, pthread_exit, \"pthread_exit\");\n-\n-   function pthread_self return pthread_t;\n-   pragma Import (C, pthread_self, \"pthread_self\");\n-\n-   --------------------------\n-   -- POSIX.1c  Section 17 --\n-   --------------------------\n-\n-   function pthread_setspecific\n-     (key   : pthread_key_t;\n-      value : System.Address) return int;\n-   pragma Import (C, pthread_setspecific, \"pthread_setspecific\");\n-\n-   function pthread_getspecific (key : pthread_key_t) return System.Address;\n-   pragma Import (C, pthread_getspecific, \"pthread_getspecific\");\n-\n-   type destructor_pointer is access procedure (arg : System.Address);\n-   pragma Convention (C, destructor_pointer);\n-\n-   function pthread_key_create\n-     (key        : access pthread_key_t;\n-      destructor : destructor_pointer) return int;\n-   pragma Import (C, pthread_key_create, \"pthread_key_create\");\n-\n-   -------------------\n-   -- SGI Additions --\n-   -------------------\n-\n-   --  Non portable SGI 6.5 additions to the pthread interface must be\n-   --  executed from within the context of a system scope task.\n-\n-   function pthread_setrunon_np (cpu : int) return int;\n-   pragma Import (C, pthread_setrunon_np, \"pthread_setrunon_np\");\n-\n-private\n-\n-   type array_type_1 is array (Integer range 0 .. 3) of unsigned;\n-   type sigset_t is record\n-      X_X_sigbits : array_type_1;\n-   end record;\n-   pragma Convention (C, sigset_t);\n-\n-   type pid_t is new long;\n-\n-   type time_t is new long;\n-\n-   type timespec is record\n-      tv_sec  : time_t;\n-      tv_nsec : long;\n-   end record;\n-   pragma Convention (C, timespec);\n-\n-   type array_type_9 is array (Integer range 0 .. 4) of long;\n-   type pthread_attr_t is record\n-      X_X_D : array_type_9;\n-   end record;\n-   pragma Convention (C, pthread_attr_t);\n-\n-   type array_type_8 is array (Integer range 0 .. 1) of long;\n-   type pthread_condattr_t is record\n-      X_X_D : array_type_8;\n-   end record;\n-   pragma Convention (C, pthread_condattr_t);\n-\n-   type array_type_7 is array (Integer range 0 .. 1) of long;\n-   type pthread_mutexattr_t is record\n-      X_X_D : array_type_7;\n-   end record;\n-   pragma Convention (C, pthread_mutexattr_t);\n-\n-   type pthread_t is new unsigned;\n-\n-   type array_type_10 is array (Integer range 0 .. 7) of long;\n-   type pthread_mutex_t is record\n-      X_X_D : array_type_10;\n-   end record;\n-   pragma Convention (C, pthread_mutex_t);\n-\n-   type array_type_11 is array (Integer range 0 .. 7) of long;\n-   type pthread_cond_t is record\n-      X_X_D : array_type_11;\n-   end record;\n-   pragma Convention (C, pthread_cond_t);\n-\n-   type pthread_key_t is new int;\n-\n-end System.OS_Interface;"}, {"sha": "31e4dccf813ae2a6f5d6a6a81f503909b87bb3a9", "filename": "gcc/ada/s-proinf-irix-athread.adb", "status": "removed", "additions": 0, "deletions": 225, "changes": 225, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fada%2Fs-proinf-irix-athread.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fada%2Fs-proinf-irix-athread.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-proinf-irix-athread.adb?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,225 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                 S Y S T E M . P R O G R A M  _  I N F O                  --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---          Copyright (C) 1997-2009, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This is an Irix (old pthread library) version of this package\n-\n---  This package contains the parameters used by the run-time system at\n---  program startup. These parameters are isolated in this package body to\n---  facilitate replacement by the end user.\n---\n---  To replace the default values, copy this source file into your build\n---  directory, edit the file to reflect your desired behavior, and recompile\n---  with the command:\n---\n---     % gcc -c -O2 -gnatpg s-proinf.adb\n---\n---  then relink your application as usual.\n-\n-pragma Warnings (Off); -- why???\n-with System.OS_Lib;\n-pragma Warnings (On);\n-\n-package body System.Program_Info is\n-\n-   Kbytes : constant := 1024;\n-\n-   Default_Initial_Sproc_Count  : constant := 0;\n-   Default_Max_Sproc_Count      : constant := 128;\n-   Default_Sproc_Stack_Size     : constant := 16#4000#;\n-   Default_Stack_Guard_Pages    : constant := 1;\n-   Default_Default_Time_Slice   : constant := 0.0;\n-   Default_Default_Task_Stack   : constant := 12 * Kbytes;\n-   Default_Pthread_Sched_Signal : constant := 35;\n-   Default_Pthread_Arena_Size   : constant := 16#40000#;\n-   Default_Os_Default_Priority  : constant := 0;\n-\n-   -------------------------\n-   -- Initial_Sproc_Count --\n-   -------------------------\n-\n-   function Initial_Sproc_Count return Integer is\n-\n-      function sysmp (P1 : Integer) return Integer;\n-      pragma Import (C, sysmp, \"sysmp\", \"sysmp\");\n-\n-      MP_NPROCS : constant := 1; --   # processor in complex\n-\n-      Pthread_Sproc_Count : constant System.OS_Lib.String_Access :=\n-        System.OS_Lib.Getenv (\"PTHREAD_SPROC_COUNT\");\n-\n-   begin\n-      if Pthread_Sproc_Count.all'Length = 0 then\n-         return Default_Initial_Sproc_Count;\n-\n-      elsif Pthread_Sproc_Count.all = \"AUTO\" then\n-         return sysmp (MP_NPROCS);\n-\n-      else\n-         return Integer'Value (Pthread_Sproc_Count.all);\n-      end if;\n-\n-   exception\n-      when others =>\n-         return Default_Initial_Sproc_Count;\n-   end Initial_Sproc_Count;\n-\n-   ---------------------\n-   -- Max_Sproc_Count --\n-   ---------------------\n-\n-   function Max_Sproc_Count return Integer is\n-      Pthread_Max_Sproc_Count : constant System.OS_Lib.String_Access :=\n-        System.OS_Lib.Getenv (\"PTHREAD_MAX_SPROC_COUNT\");\n-\n-   begin\n-      if Pthread_Max_Sproc_Count.all'Length = 0 then\n-         return Default_Max_Sproc_Count;\n-      else\n-         return Integer'Value (Pthread_Max_Sproc_Count.all);\n-      end if;\n-   exception\n-      when others =>\n-         return Default_Max_Sproc_Count;\n-   end Max_Sproc_Count;\n-\n-   ----------------------\n-   -- Sproc_Stack_Size --\n-   ----------------------\n-\n-   function Sproc_Stack_Size return Integer is\n-   begin\n-      return Default_Sproc_Stack_Size;\n-   end Sproc_Stack_Size;\n-\n-   ------------------------\n-   -- Default_Time_Slice --\n-   ------------------------\n-\n-   function Default_Time_Slice return Duration is\n-      Pthread_Time_Slice_Sec : constant System.OS_Lib.String_Access :=\n-                                 System.OS_Lib.Getenv\n-                                   (\"PTHREAD_TIME_SLICE_SEC\");\n-      Pthread_Time_Slice_Usec : constant System.OS_Lib.String_Access :=\n-                                  System.OS_Lib.Getenv\n-                                    (\"PTHREAD_TIME_SLICE_USEC\");\n-\n-      Val_Sec, Val_Usec : Integer := 0;\n-\n-   begin\n-      if Pthread_Time_Slice_Sec.all'Length /= 0 or\n-        Pthread_Time_Slice_Usec.all'Length /= 0\n-      then\n-         if Pthread_Time_Slice_Sec.all'Length /= 0 then\n-            Val_Sec := Integer'Value (Pthread_Time_Slice_Sec.all);\n-         end if;\n-\n-         if Pthread_Time_Slice_Usec.all'Length /= 0 then\n-            Val_Usec := Integer'Value (Pthread_Time_Slice_Usec.all);\n-         end if;\n-\n-         return Duration (Val_Sec) + Duration (Val_Usec) / 1000.0;\n-      else\n-         return Default_Default_Time_Slice;\n-      end if;\n-\n-   exception\n-      when others =>\n-         return Default_Default_Time_Slice;\n-   end Default_Time_Slice;\n-\n-   ------------------------\n-   -- Default_Task_Stack --\n-   ------------------------\n-\n-   function Default_Task_Stack return Integer is\n-   begin\n-      return Default_Default_Task_Stack;\n-   end Default_Task_Stack;\n-\n-   -----------------------\n-   -- Stack_Guard_Pages --\n-   -----------------------\n-\n-   function Stack_Guard_Pages return Integer is\n-      Pthread_Stack_Guard_Pages : constant System.OS_Lib.String_Access :=\n-                                    System.OS_Lib.Getenv\n-                                      (\"PTHREAD_STACK_GUARD_PAGES\");\n-   begin\n-      if Pthread_Stack_Guard_Pages.all'Length /= 0 then\n-         return Integer'Value (Pthread_Stack_Guard_Pages.all);\n-      else\n-         return Default_Stack_Guard_Pages;\n-      end if;\n-   exception\n-      when others =>\n-         return Default_Stack_Guard_Pages;\n-   end Stack_Guard_Pages;\n-\n-   --------------------------\n-   -- Pthread_Sched_Signal --\n-   --------------------------\n-\n-   function Pthread_Sched_Signal return Integer is\n-   begin\n-      return Default_Pthread_Sched_Signal;\n-   end Pthread_Sched_Signal;\n-\n-   ------------------------\n-   -- Pthread_Arena_Size --\n-   ------------------------\n-\n-   function Pthread_Arena_Size  return Integer is\n-      Pthread_Arena_Size : constant System.OS_Lib.String_Access :=\n-                             System.OS_Lib.Getenv\n-                               (\"PTHREAD_ARENA_SIZE\");\n-\n-   begin\n-      if Pthread_Arena_Size.all'Length = 0 then\n-         return Default_Pthread_Arena_Size;\n-      else\n-         return Integer'Value (Pthread_Arena_Size.all);\n-      end if;\n-\n-   exception\n-      when others =>\n-         return Default_Pthread_Arena_Size;\n-   end Pthread_Arena_Size;\n-\n-   -------------------------\n-   -- Os_Default_Priority --\n-   -------------------------\n-\n-   function Os_Default_Priority return Integer is\n-   begin\n-      return Default_Os_Default_Priority;\n-   end Os_Default_Priority;\n-\n-end System.Program_Info;"}, {"sha": "8c24a5502602460fe25a6eada075b8f1f391329e", "filename": "gcc/ada/s-proinf-irix-athread.ads", "status": "removed", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fada%2Fs-proinf-irix-athread.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fada%2Fs-proinf-irix-athread.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-proinf-irix-athread.ads?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,76 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                 S Y S T E M . P R O G R A M  _  I N F O                  --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---          Copyright (C) 1997-2009, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This package contains the definitions and routines used as parameters to\n---  the run-time system at program startup for the SGI implementation.\n-\n-package System.Program_Info is\n-   pragma Preelaborate;\n-\n-   function Initial_Sproc_Count return Integer;\n-   --  The number of sproc created at program startup for scheduling threads\n-\n-   function Max_Sproc_Count return Integer;\n-   --  The maximum number of sprocs that can be created by the program for\n-   --  servicing threads. This limit includes both the pre-created sprocs and\n-   --  those explicitly created under program control.\n-\n-   function Sproc_Stack_Size return Integer;\n-   --  The size, in bytes, of the sproc's initial stack\n-\n-   function Default_Time_Slice  return Duration;\n-   --  The default time quanta for round-robin scheduling of threads of\n-   --  equal priority.  This default value can be overridden on a per-task\n-   --  basis by specifying an alternate value via the implementation-defined\n-   --  Task_Info pragma. See s-tasinf.ads for more information.\n-\n-   function Default_Task_Stack return Integer;\n-   --  The default stack size for each created thread. This default value can\n-   --  be overridden on a per-task basis by the language-defined Storage_Size\n-   --  pragma.\n-\n-   function Stack_Guard_Pages return Integer;\n-   --  The number of non-writable, guard pages to append to the bottom of\n-   --  each thread's stack.\n-\n-   function Pthread_Sched_Signal return Integer;\n-   --  The signal used by the Pthreads library to affect scheduling actions\n-   --  in remote sprocs.\n-\n-   function Pthread_Arena_Size return Integer;\n-   --  The size of the shared arena from which pthread locks are allocated.\n-   --  See the usinit(3p) man page for more information on shared arenas.\n-\n-   function Os_Default_Priority return Integer;\n-   --  The default Irix Non-Degrading priority for each sproc created to\n-   --  service threads.\n-\n-end System.Program_Info;"}, {"sha": "8893c010571fefcb74059037a09df039fe54d340", "filename": "gcc/ada/s-taprop-irix.adb", "status": "removed", "additions": 0, "deletions": 1358, "changes": 1358, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fada%2Fs-taprop-irix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fada%2Fs-taprop-irix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-irix.adb?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,1358 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                 GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                 --\n---                                                                          --\n---     S Y S T E M . T A S K _ P R I M I T I V E S . O P E R A T I O N S    --\n---                                                                          --\n---                                  B o d y                                 --\n---                                                                          --\n---         Copyright (C) 1992-2011, Free Software Foundation, Inc.          --\n---                                                                          --\n--- GNARL is free software; you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNARL was developed by the GNARL team at Florida State University.       --\n--- Extensive contributions were provided by Ada Core Technologies, Inc.     --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This is a IRIX (pthread library) version of this package\n-\n---  This package contains all the GNULL primitives that interface directly with\n---  the underlying OS.\n-\n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during tasking\n---  operations. It causes infinite loops and other problems.\n-\n-with Ada.Unchecked_Conversion;\n-\n-with Interfaces.C;\n-\n-with System.Task_Info;\n-with System.Tasking.Debug;\n-with System.Interrupt_Management;\n-with System.OS_Constants;\n-with System.OS_Primitives;\n-with System.IO;\n-\n-with System.Soft_Links;\n---  We use System.Soft_Links instead of System.Tasking.Initialization\n---  because the later is a higher level package that we shouldn't depend on.\n---  For example when using the restricted run time, it is replaced by\n---  System.Tasking.Restricted.Stages.\n-\n-package body System.Task_Primitives.Operations is\n-\n-   package OSC renames System.OS_Constants;\n-   package SSL renames System.Soft_Links;\n-\n-   use System.Tasking;\n-   use System.Tasking.Debug;\n-   use Interfaces.C;\n-   use System.OS_Interface;\n-   use System.OS_Primitives;\n-   use System.Parameters;\n-\n-   ----------------\n-   -- Local Data --\n-   ----------------\n-\n-   --  The followings are logically constants, but need to be initialized\n-   --  at run time.\n-\n-   Single_RTS_Lock : aliased RTS_Lock;\n-   --  This is a lock to allow only one thread of control in the RTS at\n-   --  a time; it is used to execute in mutual exclusion from all other tasks.\n-   --  Used mainly in Single_Lock mode, but also to protect All_Tasks_List\n-\n-   Environment_Task_Id : Task_Id;\n-   --  A variable to hold Task_Id for the environment task\n-\n-   Locking_Policy : Character;\n-   pragma Import (C, Locking_Policy, \"__gl_locking_policy\");\n-\n-   Time_Slice_Val : Integer;\n-   pragma Import (C, Time_Slice_Val, \"__gl_time_slice_val\");\n-\n-   Dispatching_Policy : Character;\n-   pragma Import (C, Dispatching_Policy, \"__gl_task_dispatching_policy\");\n-\n-   Unblocked_Signal_Mask : aliased sigset_t;\n-\n-   Foreign_Task_Elaborated : aliased Boolean := True;\n-   --  Used to identified fake tasks (i.e., non-Ada Threads)\n-\n-   Abort_Handler_Installed : Boolean := False;\n-   --  True if a handler for the abort signal is installed\n-\n-   --------------------\n-   -- Local Packages --\n-   --------------------\n-\n-   package Specific is\n-\n-      procedure Initialize (Environment_Task : Task_Id);\n-      pragma Inline (Initialize);\n-      --  Initialize various data needed by this package\n-\n-      function Is_Valid_Task return Boolean;\n-      pragma Inline (Is_Valid_Task);\n-      --  Does executing thread have a TCB?\n-\n-      procedure Set (Self_Id : Task_Id);\n-      pragma Inline (Set);\n-      --  Set the self id for the current task\n-\n-      function Self return Task_Id;\n-      pragma Inline (Self);\n-      --  Return a pointer to the Ada Task Control Block of the calling task\n-\n-   end Specific;\n-\n-   package body Specific is separate;\n-   --  The body of this package is target specific\n-\n-   ----------------------------------\n-   -- ATCB allocation/deallocation --\n-   ----------------------------------\n-\n-   package body ATCB_Allocation is separate;\n-   --  The body of this package is shared across several targets\n-\n-   ---------------------------------\n-   -- Support for foreign threads --\n-   ---------------------------------\n-\n-   function Register_Foreign_Thread (Thread : Thread_Id) return Task_Id;\n-   --  Allocate and Initialize a new ATCB for the current Thread\n-\n-   function Register_Foreign_Thread\n-     (Thread : Thread_Id) return Task_Id is separate;\n-\n-   -----------------------\n-   -- Local Subprograms --\n-   -----------------------\n-\n-   function To_Address is\n-     new Ada.Unchecked_Conversion (Task_Id, System.Address);\n-\n-   procedure Abort_Handler (Sig : Signal);\n-   --  Signal handler used to implement asynchronous abort\n-\n-   -------------------\n-   -- Abort_Handler --\n-   -------------------\n-\n-   procedure Abort_Handler (Sig : Signal) is\n-      pragma Unreferenced (Sig);\n-\n-      T       : constant Task_Id := Self;\n-      Result  : Interfaces.C.int;\n-      Old_Set : aliased sigset_t;\n-\n-   begin\n-      --  It's not safe to raise an exception when using GCC ZCX mechanism.\n-      --  Note that we still need to install a signal handler, since in some\n-      --  cases (e.g. shutdown of the Server_Task in System.Interrupts) we\n-      --  need to send the Abort signal to a task.\n-\n-      if ZCX_By_Default then\n-         return;\n-      end if;\n-\n-      if T.Deferral_Level = 0\n-        and then T.Pending_ATC_Level < T.ATC_Nesting_Level\n-      then\n-         --  Make sure signals used for RTS internal purpose are unmasked\n-\n-         Result := pthread_sigmask\n-           (SIG_UNBLOCK,\n-            Unblocked_Signal_Mask'Access,\n-            Old_Set'Access);\n-         pragma Assert (Result = 0);\n-\n-         raise Standard'Abort_Signal;\n-      end if;\n-   end Abort_Handler;\n-\n-   -----------------\n-   -- Stack_Guard --\n-   -----------------\n-\n-   --  The underlying thread system sets a guard page at the\n-   --  bottom of a thread stack, so nothing is needed.\n-\n-   procedure Stack_Guard (T : ST.Task_Id; On : Boolean) is\n-      pragma Unreferenced (On);\n-      pragma Unreferenced (T);\n-   begin\n-      null;\n-   end Stack_Guard;\n-\n-   -------------------\n-   -- Get_Thread_Id --\n-   -------------------\n-\n-   function Get_Thread_Id (T : ST.Task_Id) return OSI.Thread_Id is\n-   begin\n-      return T.Common.LL.Thread;\n-   end Get_Thread_Id;\n-\n-   ----------\n-   -- Self --\n-   ----------\n-\n-   function Self return Task_Id renames Specific.Self;\n-\n-   ---------------------\n-   -- Initialize_Lock --\n-   ---------------------\n-\n-   --  Note: mutexes and cond_variables needed per-task basis are initialized\n-   --  in Initialize_TCB and the Storage_Error is handled. Other mutexes (such\n-   --  as RTS_Lock, Memory_Lock...) used in RTS is initialized before any\n-   --  status change of RTS. Therefore raising Storage_Error in the following\n-   --  routines should be able to be handled safely.\n-\n-   procedure Initialize_Lock\n-     (Prio : System.Any_Priority;\n-      L    : not null access Lock)\n-   is\n-      Attributes : aliased pthread_mutexattr_t;\n-      Result     : Interfaces.C.int;\n-\n-   begin\n-      Result := pthread_mutexattr_init (Attributes'Access);\n-      pragma Assert (Result = 0 or else Result = ENOMEM);\n-\n-      if Result = ENOMEM then\n-         raise Storage_Error;\n-      end if;\n-\n-      if Locking_Policy = 'C' then\n-         Result :=\n-           pthread_mutexattr_setprotocol\n-             (Attributes'Access, PTHREAD_PRIO_PROTECT);\n-         pragma Assert (Result = 0);\n-\n-         Result :=\n-           pthread_mutexattr_setprioceiling\n-             (Attributes'Access, Interfaces.C.int (Prio));\n-         pragma Assert (Result = 0);\n-      end if;\n-\n-      Result := pthread_mutex_init (L.WO'Access, Attributes'Access);\n-      pragma Assert (Result = 0 or else Result = ENOMEM);\n-\n-      if Result = ENOMEM then\n-         Result := pthread_mutexattr_destroy (Attributes'Access);\n-         raise Storage_Error;\n-      end if;\n-\n-      Result := pthread_mutexattr_destroy (Attributes'Access);\n-      pragma Assert (Result = 0);\n-   end Initialize_Lock;\n-\n-   procedure Initialize_Lock\n-     (L     : not null access RTS_Lock;\n-      Level : Lock_Level)\n-   is\n-      pragma Unreferenced (Level);\n-\n-      Attributes : aliased pthread_mutexattr_t;\n-      Result : Interfaces.C.int;\n-\n-   begin\n-      Result := pthread_mutexattr_init (Attributes'Access);\n-      pragma Assert (Result = 0 or else Result = ENOMEM);\n-\n-      if Result = ENOMEM then\n-         raise Storage_Error;\n-      end if;\n-\n-      if Locking_Policy = 'C' then\n-         Result := pthread_mutexattr_setprotocol\n-           (Attributes'Access, PTHREAD_PRIO_PROTECT);\n-         pragma Assert (Result = 0);\n-\n-         Result := pthread_mutexattr_setprioceiling\n-            (Attributes'Access, Interfaces.C.int (System.Any_Priority'Last));\n-         pragma Assert (Result = 0);\n-      end if;\n-\n-      Result := pthread_mutex_init (L, Attributes'Access);\n-\n-      pragma Assert (Result = 0 or else Result = ENOMEM);\n-\n-      if Result = ENOMEM then\n-         Result := pthread_mutexattr_destroy (Attributes'Access);\n-         raise Storage_Error;\n-      end if;\n-\n-      Result := pthread_mutexattr_destroy (Attributes'Access);\n-      pragma Assert (Result = 0);\n-   end Initialize_Lock;\n-\n-   -------------------\n-   -- Finalize_Lock --\n-   -------------------\n-\n-   procedure Finalize_Lock (L : not null access Lock) is\n-      Result : Interfaces.C.int;\n-   begin\n-      Result := pthread_mutex_destroy (L.WO'Access);\n-      pragma Assert (Result = 0);\n-   end Finalize_Lock;\n-\n-   procedure Finalize_Lock (L : not null access RTS_Lock) is\n-      Result : Interfaces.C.int;\n-   begin\n-      Result := pthread_mutex_destroy (L);\n-      pragma Assert (Result = 0);\n-   end Finalize_Lock;\n-\n-   ----------------\n-   -- Write_Lock --\n-   ----------------\n-\n-   procedure Write_Lock\n-     (L : not null access Lock; Ceiling_Violation : out Boolean)\n-   is\n-      Result : Interfaces.C.int;\n-\n-   begin\n-      Result := pthread_mutex_lock (L.WO'Access);\n-      Ceiling_Violation := Result = EINVAL;\n-\n-      --  Assumes the cause of EINVAL is a priority ceiling violation\n-\n-      pragma Assert (Result = 0 or else Result = EINVAL);\n-   end Write_Lock;\n-\n-   procedure Write_Lock\n-     (L           : not null access RTS_Lock;\n-      Global_Lock : Boolean := False)\n-   is\n-      Result : Interfaces.C.int;\n-   begin\n-      if not Single_Lock or else Global_Lock then\n-         Result := pthread_mutex_lock (L);\n-         pragma Assert (Result = 0);\n-      end if;\n-   end Write_Lock;\n-\n-   procedure Write_Lock (T : Task_Id) is\n-      Result : Interfaces.C.int;\n-   begin\n-      if not Single_Lock then\n-         Result := pthread_mutex_lock (T.Common.LL.L'Access);\n-         pragma Assert (Result = 0);\n-      end if;\n-   end Write_Lock;\n-\n-   ---------------\n-   -- Read_Lock --\n-   ---------------\n-\n-   procedure Read_Lock\n-     (L : not null access Lock; Ceiling_Violation : out Boolean) is\n-   begin\n-      Write_Lock (L, Ceiling_Violation);\n-   end Read_Lock;\n-\n-   ------------\n-   -- Unlock --\n-   ------------\n-\n-   procedure Unlock (L : not null access Lock) is\n-      Result : Interfaces.C.int;\n-   begin\n-      Result := pthread_mutex_unlock (L.WO'Access);\n-      pragma Assert (Result = 0);\n-   end Unlock;\n-\n-   procedure Unlock\n-     (L           : not null access RTS_Lock;\n-      Global_Lock : Boolean := False)\n-   is\n-      Result : Interfaces.C.int;\n-   begin\n-      if not Single_Lock or else Global_Lock then\n-         Result := pthread_mutex_unlock (L);\n-         pragma Assert (Result = 0);\n-      end if;\n-   end Unlock;\n-\n-   procedure Unlock (T : Task_Id) is\n-      Result : Interfaces.C.int;\n-   begin\n-      if not Single_Lock then\n-         Result := pthread_mutex_unlock (T.Common.LL.L'Access);\n-         pragma Assert (Result = 0);\n-      end if;\n-   end Unlock;\n-\n-   -----------------\n-   -- Set_Ceiling --\n-   -----------------\n-\n-   --  Dynamic priority ceilings are not supported by the underlying system\n-\n-   procedure Set_Ceiling\n-     (L    : not null access Lock;\n-      Prio : System.Any_Priority)\n-   is\n-      pragma Unreferenced (L, Prio);\n-   begin\n-      null;\n-   end Set_Ceiling;\n-\n-   -----------\n-   -- Sleep --\n-   -----------\n-\n-   procedure Sleep\n-     (Self_ID : ST.Task_Id;\n-      Reason  : System.Tasking.Task_States)\n-   is\n-      pragma Unreferenced (Reason);\n-      Result : Interfaces.C.int;\n-\n-   begin\n-      Result :=\n-        pthread_cond_wait\n-          (cond  => Self_ID.Common.LL.CV'Access,\n-           mutex => (if Single_Lock\n-                     then Single_RTS_Lock'Access\n-                     else Self_ID.Common.LL.L'Access));\n-\n-      --  EINTR is not considered a failure\n-\n-      pragma Assert (Result = 0 or else Result = EINTR);\n-   end Sleep;\n-\n-   -----------------\n-   -- Timed_Sleep --\n-   -----------------\n-\n-   procedure Timed_Sleep\n-     (Self_ID  : Task_Id;\n-      Time     : Duration;\n-      Mode     : ST.Delay_Modes;\n-      Reason   : Task_States;\n-      Timedout : out Boolean;\n-      Yielded  : out Boolean)\n-   is\n-      pragma Unreferenced (Reason);\n-\n-      Base_Time  : constant Duration := Monotonic_Clock;\n-      Check_Time : Duration := Base_Time;\n-      Abs_Time   : Duration;\n-      Request    : aliased timespec;\n-      Result     : Interfaces.C.int;\n-\n-   begin\n-      Timedout := True;\n-      Yielded  := False;\n-\n-      Abs_Time :=\n-        (if Mode = Relative\n-         then Duration'Min (Time, Max_Sensible_Delay) + Check_Time\n-         else Duration'Min (Check_Time + Max_Sensible_Delay, Time));\n-\n-      if Abs_Time > Check_Time then\n-         Request := To_Timespec (Abs_Time);\n-\n-         loop\n-            exit when Self_ID.Pending_ATC_Level < Self_ID.ATC_Nesting_Level;\n-\n-            Result :=\n-              pthread_cond_timedwait\n-                (cond    => Self_ID.Common.LL.CV'Access,\n-                 mutex   => (if Single_Lock\n-                             then Single_RTS_Lock'Access\n-                             else Self_ID.Common.LL.L'Access),\n-                 abstime => Request'Access);\n-\n-            Check_Time := Monotonic_Clock;\n-            exit when Abs_Time <= Check_Time or else Check_Time < Base_Time;\n-\n-            if Result = 0 or else errno = EINTR then\n-               Timedout := False;\n-               exit;\n-            end if;\n-         end loop;\n-      end if;\n-   end Timed_Sleep;\n-\n-   -----------------\n-   -- Timed_Delay --\n-   -----------------\n-\n-   --  This is for use in implementing delay statements, so we assume\n-   --  the caller is abort-deferred but is holding no locks.\n-\n-   procedure Timed_Delay\n-     (Self_ID : Task_Id;\n-      Time    : Duration;\n-      Mode    : ST.Delay_Modes)\n-   is\n-      Base_Time  : constant Duration := Monotonic_Clock;\n-      Check_Time : Duration := Base_Time;\n-      Abs_Time   : Duration;\n-      Request    : aliased timespec;\n-      Result     : Interfaces.C.int;\n-\n-   begin\n-      if Single_Lock then\n-         Lock_RTS;\n-      end if;\n-\n-      Write_Lock (Self_ID);\n-\n-      Abs_Time :=\n-        (if Mode = Relative\n-         then Time + Check_Time\n-         else Duration'Min (Check_Time + Max_Sensible_Delay, Time));\n-\n-      if Abs_Time > Check_Time then\n-         Request := To_Timespec (Abs_Time);\n-         Self_ID.Common.State := Delay_Sleep;\n-\n-         loop\n-            exit when Self_ID.Pending_ATC_Level < Self_ID.ATC_Nesting_Level;\n-\n-            Result :=\n-              pthread_cond_timedwait\n-                (cond    => Self_ID.Common.LL.CV'Access,\n-                 mutex   => (if Single_Lock\n-                             then Single_RTS_Lock'Access\n-                             else Self_ID.Common.LL.L'Access),\n-                 abstime => Request'Access);\n-\n-            Check_Time := Monotonic_Clock;\n-            exit when Abs_Time <= Check_Time or else Check_Time < Base_Time;\n-\n-            pragma Assert (Result = 0\n-              or else Result = ETIMEDOUT\n-              or else Result = EINTR);\n-         end loop;\n-\n-         Self_ID.Common.State := Runnable;\n-      end if;\n-\n-      Unlock (Self_ID);\n-\n-      if Single_Lock then\n-         Unlock_RTS;\n-      end if;\n-\n-      Yield;\n-   end Timed_Delay;\n-\n-   ---------------------\n-   -- Monotonic_Clock --\n-   ---------------------\n-\n-   function Monotonic_Clock return Duration is\n-      TS     : aliased timespec;\n-      Result : Interfaces.C.int;\n-   begin\n-      Result := clock_gettime (OSC.CLOCK_RT_Ada, TS'Unchecked_Access);\n-      pragma Assert (Result = 0);\n-      return To_Duration (TS);\n-   end Monotonic_Clock;\n-\n-   -------------------\n-   -- RT_Resolution --\n-   -------------------\n-\n-   function RT_Resolution return Duration is\n-   begin\n-      --  The clock_getres (OSC.CLOCK_RT_Ada) function appears to return\n-      --  the interrupt resolution of the realtime clock and not the actual\n-      --  resolution of reading the clock. Even though this last value is\n-      --  only guaranteed to be 100 Hz, at least the Origin 200 appears to\n-      --  have a microsecond resolution or better.\n-\n-      --  ??? We should figure out a method to return the right value on\n-      --  all SGI hardware.\n-\n-      return 0.000_001;\n-   end RT_Resolution;\n-\n-   ------------\n-   -- Wakeup --\n-   ------------\n-\n-   procedure Wakeup (T : ST.Task_Id; Reason : System.Tasking.Task_States) is\n-      pragma Unreferenced (Reason);\n-      Result : Interfaces.C.int;\n-   begin\n-      Result := pthread_cond_signal (T.Common.LL.CV'Access);\n-      pragma Assert (Result = 0);\n-   end Wakeup;\n-\n-   -----------\n-   -- Yield --\n-   -----------\n-\n-   procedure Yield (Do_Yield : Boolean := True) is\n-      Result : Interfaces.C.int;\n-      pragma Unreferenced (Result);\n-   begin\n-      if Do_Yield then\n-         Result := sched_yield;\n-      end if;\n-   end Yield;\n-\n-   ------------------\n-   -- Set_Priority --\n-   ------------------\n-\n-   procedure Set_Priority\n-     (T                   : Task_Id;\n-      Prio                : System.Any_Priority;\n-      Loss_Of_Inheritance : Boolean := False)\n-   is\n-      pragma Unreferenced (Loss_Of_Inheritance);\n-\n-      Result       : Interfaces.C.int;\n-      Param        : aliased struct_sched_param;\n-      Sched_Policy : Interfaces.C.int;\n-\n-      use type System.Task_Info.Task_Info_Type;\n-\n-      function To_Int is new Ada.Unchecked_Conversion\n-        (System.Task_Info.Thread_Scheduling_Policy, Interfaces.C.int);\n-\n-      function Get_Policy (Prio : System.Any_Priority) return Character;\n-      pragma Import (C, Get_Policy, \"__gnat_get_specific_dispatching\");\n-      --  Get priority specific dispatching policy\n-\n-      Priority_Specific_Policy : constant Character := Get_Policy (Prio);\n-      --  Upper case first character of the policy name corresponding to the\n-      --  task as set by a Priority_Specific_Dispatching pragma.\n-\n-   begin\n-      T.Common.Current_Priority := Prio;\n-      Param.sched_priority := Interfaces.C.int (Prio);\n-\n-      if T.Common.Task_Info /= null then\n-         Sched_Policy := To_Int (T.Common.Task_Info.Policy);\n-\n-      elsif Dispatching_Policy = 'R'\n-        or else Priority_Specific_Policy = 'R'\n-        or else Time_Slice_Val > 0\n-      then\n-         Sched_Policy := SCHED_RR;\n-\n-      else\n-         Sched_Policy := SCHED_FIFO;\n-      end if;\n-\n-      Result := pthread_setschedparam (T.Common.LL.Thread, Sched_Policy,\n-        Param'Access);\n-      pragma Assert (Result = 0);\n-   end Set_Priority;\n-\n-   ------------------\n-   -- Get_Priority --\n-   ------------------\n-\n-   function Get_Priority (T : Task_Id) return System.Any_Priority is\n-   begin\n-      return T.Common.Current_Priority;\n-   end Get_Priority;\n-\n-   ----------------\n-   -- Enter_Task --\n-   ----------------\n-\n-   procedure Enter_Task (Self_ID : Task_Id) is\n-      Result : Interfaces.C.int;\n-\n-      function To_Int is new Ada.Unchecked_Conversion\n-        (System.Task_Info.CPU_Number, Interfaces.C.int);\n-\n-      use System.Task_Info;\n-\n-   begin\n-      Self_ID.Common.LL.Thread := pthread_self;\n-      Specific.Set (Self_ID);\n-\n-      if Self_ID.Common.Task_Info /= null\n-        and then Self_ID.Common.Task_Info.Scope = PTHREAD_SCOPE_SYSTEM\n-        and then Self_ID.Common.Task_Info.Runon_CPU /= ANY_CPU\n-      then\n-         Result := pthread_setrunon_np\n-           (To_Int (Self_ID.Common.Task_Info.Runon_CPU));\n-         pragma Assert (Result = 0);\n-      end if;\n-   end Enter_Task;\n-\n-   -------------------\n-   -- Is_Valid_Task --\n-   -------------------\n-\n-   function Is_Valid_Task return Boolean renames Specific.Is_Valid_Task;\n-\n-   -----------------------------\n-   -- Register_Foreign_Thread --\n-   -----------------------------\n-\n-   function Register_Foreign_Thread return Task_Id is\n-   begin\n-      if Is_Valid_Task then\n-         return Self;\n-      else\n-         return Register_Foreign_Thread (pthread_self);\n-      end if;\n-   end Register_Foreign_Thread;\n-\n-   --------------------\n-   -- Initialize_TCB --\n-   --------------------\n-\n-   procedure Initialize_TCB (Self_ID : Task_Id; Succeeded : out Boolean) is\n-      Result    : Interfaces.C.int;\n-      Cond_Attr : aliased pthread_condattr_t;\n-\n-   begin\n-      if not Single_Lock then\n-         Initialize_Lock (Self_ID.Common.LL.L'Access, ATCB_Level);\n-      end if;\n-\n-      Result := pthread_condattr_init (Cond_Attr'Access);\n-      pragma Assert (Result = 0 or else Result = ENOMEM);\n-\n-      if Result = 0 then\n-         Result :=\n-           pthread_cond_init (Self_ID.Common.LL.CV'Access, Cond_Attr'Access);\n-         pragma Assert (Result = 0 or else Result = ENOMEM);\n-      end if;\n-\n-      if Result = 0 then\n-         Succeeded := True;\n-      else\n-         if not Single_Lock then\n-            Result := pthread_mutex_destroy (Self_ID.Common.LL.L'Access);\n-            pragma Assert (Result = 0);\n-         end if;\n-\n-         Succeeded := False;\n-      end if;\n-\n-      Result := pthread_condattr_destroy (Cond_Attr'Access);\n-      pragma Assert (Result = 0);\n-   end Initialize_TCB;\n-\n-   -----------------\n-   -- Create_Task --\n-   -----------------\n-\n-   procedure Create_Task\n-     (T          : Task_Id;\n-      Wrapper    : System.Address;\n-      Stack_Size : System.Parameters.Size_Type;\n-      Priority   : System.Any_Priority;\n-      Succeeded  : out Boolean)\n-   is\n-      use System.Task_Info;\n-\n-      Attributes  : aliased pthread_attr_t;\n-      Sched_Param : aliased struct_sched_param;\n-      Result      : Interfaces.C.int;\n-\n-      function Thread_Body_Access is new\n-        Ada.Unchecked_Conversion (System.Address, Thread_Body);\n-      function To_Int is new Ada.Unchecked_Conversion\n-        (System.Task_Info.Thread_Scheduling_Scope, Interfaces.C.int);\n-      function To_Int is new Ada.Unchecked_Conversion\n-        (System.Task_Info.Thread_Scheduling_Inheritance, Interfaces.C.int);\n-      function To_Int is new Ada.Unchecked_Conversion\n-        (System.Task_Info.Thread_Scheduling_Policy, Interfaces.C.int);\n-\n-   begin\n-      Result := pthread_attr_init (Attributes'Access);\n-      pragma Assert (Result = 0 or else Result = ENOMEM);\n-\n-      if Result /= 0 then\n-         Succeeded := False;\n-         return;\n-      end if;\n-\n-      Result :=\n-        pthread_attr_setdetachstate\n-          (Attributes'Access, PTHREAD_CREATE_DETACHED);\n-      pragma Assert (Result = 0);\n-\n-      Result :=\n-        pthread_attr_setstacksize\n-          (Attributes'Access, Interfaces.C.size_t (Stack_Size));\n-      pragma Assert (Result = 0);\n-\n-      if T.Common.Task_Info /= null then\n-         Result :=\n-           pthread_attr_setscope\n-             (Attributes'Access, To_Int (T.Common.Task_Info.Scope));\n-         pragma Assert (Result = 0);\n-\n-         Result :=\n-           pthread_attr_setinheritsched\n-             (Attributes'Access, To_Int (T.Common.Task_Info.Inheritance));\n-         pragma Assert (Result = 0);\n-\n-         Result :=\n-           pthread_attr_setschedpolicy\n-             (Attributes'Access, To_Int (T.Common.Task_Info.Policy));\n-         pragma Assert (Result = 0);\n-\n-         Sched_Param.sched_priority :=\n-           Interfaces.C.int (T.Common.Task_Info.Priority);\n-\n-         Result :=\n-           pthread_attr_setschedparam\n-             (Attributes'Access, Sched_Param'Access);\n-         pragma Assert (Result = 0);\n-      end if;\n-\n-      --  Since the initial signal mask of a thread is inherited from the\n-      --  creator, and the Environment task has all its signals masked, we\n-      --  do not need to manipulate caller's signal mask at this point.\n-      --  All tasks in RTS will have All_Tasks_Mask initially.\n-\n-      --  Note: the use of Unrestricted_Access in the following call is needed\n-      --  because otherwise we have an error of getting a access-to-volatile\n-      --  value which points to a non-volatile object. But in this case it is\n-      --  safe to do this, since we know we have no problems with aliasing and\n-      --  Unrestricted_Access bypasses this check.\n-\n-      Result :=\n-        pthread_create\n-          (T.Common.LL.Thread'Unrestricted_Access,\n-           Attributes'Access,\n-           Thread_Body_Access (Wrapper),\n-           To_Address (T));\n-\n-      if Result /= 0\n-        and then T.Common.Task_Info /= null\n-        and then T.Common.Task_Info.Scope = PTHREAD_SCOPE_SYSTEM\n-      then\n-         --  The pthread_create call may have failed because we asked for a\n-         --  system scope pthread and none were available (probably because\n-         --  the program was not executed by the superuser). Let's try for\n-         --  a process scope pthread instead of raising Tasking_Error.\n-\n-         System.IO.Put_Line\n-           (\"Request for PTHREAD_SCOPE_SYSTEM in Task_Info pragma for task\");\n-         System.IO.Put (\"\"\"\");\n-         System.IO.Put (T.Common.Task_Image (1 .. T.Common.Task_Image_Len));\n-         System.IO.Put_Line (\"\"\" could not be honored. \");\n-         System.IO.Put_Line (\"Scope changed to PTHREAD_SCOPE_PROCESS\");\n-\n-         T.Common.Task_Info.Scope := PTHREAD_SCOPE_PROCESS;\n-         Result :=\n-           pthread_attr_setscope\n-             (Attributes'Access, To_Int (T.Common.Task_Info.Scope));\n-         pragma Assert (Result = 0);\n-\n-         --  Note: the use of Unrestricted_Access in the following call\n-         --  is needed because otherwise we have an error of getting a\n-         --  access-to-volatile value which points to a non-volatile object.\n-         --  But in this case it is safe to do this, since we know we have no\n-         --  aliasing problems and Unrestricted_Access bypasses this check.\n-\n-         Result :=\n-           pthread_create\n-             (T.Common.LL.Thread'Unrestricted_Access,\n-              Attributes'Access,\n-              Thread_Body_Access (Wrapper),\n-              To_Address (T));\n-      end if;\n-\n-      pragma Assert (Result = 0 or else Result = EAGAIN);\n-\n-      Succeeded := Result = 0;\n-\n-      if Succeeded then\n-\n-         --  The following needs significant commenting ???\n-\n-         if T.Common.Task_Info /= null then\n-            T.Common.Base_Priority := T.Common.Task_Info.Priority;\n-            Set_Priority (T, T.Common.Task_Info.Priority);\n-         else\n-            Set_Priority (T, Priority);\n-         end if;\n-      end if;\n-\n-      Result := pthread_attr_destroy (Attributes'Access);\n-      pragma Assert (Result = 0);\n-   end Create_Task;\n-\n-   ------------------\n-   -- Finalize_TCB --\n-   ------------------\n-\n-   procedure Finalize_TCB (T : Task_Id) is\n-      Result : Interfaces.C.int;\n-\n-   begin\n-      if not Single_Lock then\n-         Result := pthread_mutex_destroy (T.Common.LL.L'Access);\n-         pragma Assert (Result = 0);\n-      end if;\n-\n-      Result := pthread_cond_destroy (T.Common.LL.CV'Access);\n-      pragma Assert (Result = 0);\n-\n-      if T.Known_Tasks_Index /= -1 then\n-         Known_Tasks (T.Known_Tasks_Index) := null;\n-      end if;\n-\n-      ATCB_Allocation.Free_ATCB (T);\n-   end Finalize_TCB;\n-\n-   ---------------\n-   -- Exit_Task --\n-   ---------------\n-\n-   procedure Exit_Task is\n-   begin\n-      Specific.Set (null);\n-   end Exit_Task;\n-\n-   ----------------\n-   -- Abort_Task --\n-   ----------------\n-\n-   procedure Abort_Task (T : Task_Id) is\n-      Result : Interfaces.C.int;\n-   begin\n-      if Abort_Handler_Installed then\n-         Result :=\n-           pthread_kill\n-             (T.Common.LL.Thread,\n-              Signal (System.Interrupt_Management.Abort_Task_Interrupt));\n-         pragma Assert (Result = 0);\n-      end if;\n-   end Abort_Task;\n-\n-   ----------------\n-   -- Initialize --\n-   ----------------\n-\n-   procedure Initialize (S : in out Suspension_Object) is\n-      Mutex_Attr : aliased pthread_mutexattr_t;\n-      Cond_Attr  : aliased pthread_condattr_t;\n-      Result     : Interfaces.C.int;\n-\n-   begin\n-      --  Initialize internal state (always to False (RM D.10(6))\n-\n-      S.State := False;\n-      S.Waiting := False;\n-\n-      --  Initialize internal mutex\n-\n-      Result := pthread_mutexattr_init (Mutex_Attr'Access);\n-      pragma Assert (Result = 0 or else Result = ENOMEM);\n-\n-      if Result = ENOMEM then\n-         raise Storage_Error;\n-      end if;\n-\n-      Result := pthread_mutex_init (S.L'Access, Mutex_Attr'Access);\n-      pragma Assert (Result = 0 or else Result = ENOMEM);\n-\n-      if Result = ENOMEM then\n-         Result := pthread_mutexattr_destroy (Mutex_Attr'Access);\n-         pragma Assert (Result = 0);\n-\n-         raise Storage_Error;\n-      end if;\n-\n-      Result := pthread_mutexattr_destroy (Mutex_Attr'Access);\n-      pragma Assert (Result = 0);\n-\n-      --  Initialize internal condition variable\n-\n-      Result := pthread_condattr_init (Cond_Attr'Access);\n-      pragma Assert (Result = 0 or else Result = ENOMEM);\n-\n-      if Result /= 0 then\n-         Result := pthread_mutex_destroy (S.L'Access);\n-         pragma Assert (Result = 0);\n-\n-         if Result = ENOMEM then\n-            raise Storage_Error;\n-         end if;\n-      end if;\n-\n-      Result := pthread_cond_init (S.CV'Access, Cond_Attr'Access);\n-      pragma Assert (Result = 0 or else Result = ENOMEM);\n-\n-      if Result /= 0 then\n-         Result := pthread_mutex_destroy (S.L'Access);\n-         pragma Assert (Result = 0);\n-\n-         if Result = ENOMEM then\n-            Result := pthread_condattr_destroy (Cond_Attr'Access);\n-            pragma Assert (Result = 0);\n-            raise Storage_Error;\n-         end if;\n-      end if;\n-\n-      Result := pthread_condattr_destroy (Cond_Attr'Access);\n-      pragma Assert (Result = 0);\n-   end Initialize;\n-\n-   --------------\n-   -- Finalize --\n-   --------------\n-\n-   procedure Finalize (S : in out Suspension_Object) is\n-      Result : Interfaces.C.int;\n-\n-   begin\n-      --  Destroy internal mutex\n-\n-      Result := pthread_mutex_destroy (S.L'Access);\n-      pragma Assert (Result = 0);\n-\n-      --  Destroy internal condition variable\n-\n-      Result := pthread_cond_destroy (S.CV'Access);\n-      pragma Assert (Result = 0);\n-   end Finalize;\n-\n-   -------------------\n-   -- Current_State --\n-   -------------------\n-\n-   function Current_State (S : Suspension_Object) return Boolean is\n-   begin\n-      --  We do not want to use lock on this read operation. State is marked\n-      --  as Atomic so that we ensure that the value retrieved is correct.\n-\n-      return S.State;\n-   end Current_State;\n-\n-   ---------------\n-   -- Set_False --\n-   ---------------\n-\n-   procedure Set_False (S : in out Suspension_Object) is\n-      Result : Interfaces.C.int;\n-\n-   begin\n-      SSL.Abort_Defer.all;\n-\n-      Result := pthread_mutex_lock (S.L'Access);\n-      pragma Assert (Result = 0);\n-\n-      S.State := False;\n-\n-      Result := pthread_mutex_unlock (S.L'Access);\n-      pragma Assert (Result = 0);\n-\n-      SSL.Abort_Undefer.all;\n-   end Set_False;\n-\n-   --------------\n-   -- Set_True --\n-   --------------\n-\n-   procedure Set_True (S : in out Suspension_Object) is\n-      Result : Interfaces.C.int;\n-\n-   begin\n-      SSL.Abort_Defer.all;\n-\n-      Result := pthread_mutex_lock (S.L'Access);\n-      pragma Assert (Result = 0);\n-\n-      --  If there is already a task waiting on this suspension object then\n-      --  we resume it, leaving the state of the suspension object to False,\n-      --  as it is specified in ARM D.10 par. 9. Otherwise, it just leaves\n-      --  the state to True.\n-\n-      if S.Waiting then\n-         S.Waiting := False;\n-         S.State := False;\n-\n-         Result := pthread_cond_signal (S.CV'Access);\n-         pragma Assert (Result = 0);\n-\n-      else\n-         S.State := True;\n-      end if;\n-\n-      Result := pthread_mutex_unlock (S.L'Access);\n-      pragma Assert (Result = 0);\n-\n-      SSL.Abort_Undefer.all;\n-   end Set_True;\n-\n-   ------------------------\n-   -- Suspend_Until_True --\n-   ------------------------\n-\n-   procedure Suspend_Until_True (S : in out Suspension_Object) is\n-      Result : Interfaces.C.int;\n-\n-   begin\n-      SSL.Abort_Defer.all;\n-\n-      Result := pthread_mutex_lock (S.L'Access);\n-      pragma Assert (Result = 0);\n-\n-      if S.Waiting then\n-\n-         --  Program_Error must be raised upon calling Suspend_Until_True\n-         --  if another task is already waiting on that suspension object\n-         --  (RM D.10(10)).\n-\n-         Result := pthread_mutex_unlock (S.L'Access);\n-         pragma Assert (Result = 0);\n-\n-         SSL.Abort_Undefer.all;\n-\n-         raise Program_Error;\n-      else\n-         --  Suspend the task if the state is False. Otherwise, the task\n-         --  continues its execution, and the state of the suspension object\n-         --  is set to False (ARM D.10 par. 9).\n-\n-         if S.State then\n-            S.State := False;\n-         else\n-            S.Waiting := True;\n-\n-            loop\n-               --  Loop in case pthread_cond_wait returns earlier than expected\n-               --  (e.g. in case of EINTR caused by a signal).\n-\n-               Result := pthread_cond_wait (S.CV'Access, S.L'Access);\n-               pragma Assert (Result = 0 or else Result = EINTR);\n-\n-               exit when not S.Waiting;\n-            end loop;\n-         end if;\n-\n-         Result := pthread_mutex_unlock (S.L'Access);\n-         pragma Assert (Result = 0);\n-\n-         SSL.Abort_Undefer.all;\n-      end if;\n-   end Suspend_Until_True;\n-\n-   ----------------\n-   -- Check_Exit --\n-   ----------------\n-\n-   --  Dummy version\n-\n-   function Check_Exit (Self_ID : ST.Task_Id) return Boolean is\n-      pragma Unreferenced (Self_ID);\n-   begin\n-      return True;\n-   end Check_Exit;\n-\n-   --------------------\n-   -- Check_No_Locks --\n-   --------------------\n-\n-   function Check_No_Locks (Self_ID : ST.Task_Id) return Boolean is\n-      pragma Unreferenced (Self_ID);\n-   begin\n-      return True;\n-   end Check_No_Locks;\n-\n-   ----------------------\n-   -- Environment_Task --\n-   ----------------------\n-\n-   function Environment_Task return Task_Id is\n-   begin\n-      return Environment_Task_Id;\n-   end Environment_Task;\n-\n-   --------------\n-   -- Lock_RTS --\n-   --------------\n-\n-   procedure Lock_RTS is\n-   begin\n-      Write_Lock (Single_RTS_Lock'Access, Global_Lock => True);\n-   end Lock_RTS;\n-\n-   ----------------\n-   -- Unlock_RTS --\n-   ----------------\n-\n-   procedure Unlock_RTS is\n-   begin\n-      Unlock (Single_RTS_Lock'Access, Global_Lock => True);\n-   end Unlock_RTS;\n-\n-   ------------------\n-   -- Suspend_Task --\n-   ------------------\n-\n-   function Suspend_Task\n-     (T           : ST.Task_Id;\n-      Thread_Self : Thread_Id) return Boolean\n-   is\n-      pragma Unreferenced (T);\n-      pragma Unreferenced (Thread_Self);\n-   begin\n-      return False;\n-   end Suspend_Task;\n-\n-   -----------------\n-   -- Resume_Task --\n-   -----------------\n-\n-   function Resume_Task\n-     (T           : ST.Task_Id;\n-      Thread_Self : Thread_Id) return Boolean\n-   is\n-      pragma Unreferenced (T);\n-      pragma Unreferenced (Thread_Self);\n-   begin\n-      return False;\n-   end Resume_Task;\n-\n-   --------------------\n-   -- Stop_All_Tasks --\n-   --------------------\n-\n-   procedure Stop_All_Tasks is\n-   begin\n-      null;\n-   end Stop_All_Tasks;\n-\n-   ---------------\n-   -- Stop_Task --\n-   ---------------\n-\n-   function Stop_Task (T : ST.Task_Id) return Boolean is\n-      pragma Unreferenced (T);\n-   begin\n-      return False;\n-   end Stop_Task;\n-\n-   -------------------\n-   -- Continue_Task --\n-   -------------------\n-\n-   function Continue_Task (T : ST.Task_Id) return Boolean is\n-      pragma Unreferenced (T);\n-   begin\n-      return False;\n-   end Continue_Task;\n-\n-   ----------------\n-   -- Initialize --\n-   ----------------\n-\n-   procedure Initialize (Environment_Task : Task_Id) is\n-      act     : aliased struct_sigaction;\n-      old_act : aliased struct_sigaction;\n-      Tmp_Set : aliased sigset_t;\n-      Result  : Interfaces.C.int;\n-\n-      function State\n-        (Int : System.Interrupt_Management.Interrupt_ID) return Character;\n-      pragma Import (C, State, \"__gnat_get_interrupt_state\");\n-      --  Get interrupt state. Defined in a-init.c. The input argument is\n-      --  the interrupt number, and the result is one of the following:\n-\n-      Default : constant Character := 's';\n-      --    'n'   this interrupt not set by any Interrupt_State pragma\n-      --    'u'   Interrupt_State pragma set state to User\n-      --    'r'   Interrupt_State pragma set state to Runtime\n-      --    's'   Interrupt_State pragma set state to System (use \"default\"\n-      --           system handler)\n-\n-   begin\n-      Environment_Task_Id := Environment_Task;\n-\n-      Interrupt_Management.Initialize;\n-\n-      --  Initialize the lock used to synchronize chain of all ATCBs\n-\n-      Initialize_Lock (Single_RTS_Lock'Access, RTS_Lock_Level);\n-\n-      Specific.Initialize (Environment_Task);\n-\n-      --  Make environment task known here because it doesn't go through\n-      --  Activate_Tasks, which does it for all other tasks.\n-\n-      Known_Tasks (Known_Tasks'First) := Environment_Task;\n-      Environment_Task.Known_Tasks_Index := Known_Tasks'First;\n-\n-      Enter_Task (Environment_Task);\n-\n-      --  Prepare the set of signals that should unblocked in all tasks\n-\n-      Result := sigemptyset (Unblocked_Signal_Mask'Access);\n-      pragma Assert (Result = 0);\n-\n-      for J in Interrupt_Management.Interrupt_ID loop\n-         if System.Interrupt_Management.Keep_Unmasked (J) then\n-            Result := sigaddset (Unblocked_Signal_Mask'Access, Signal (J));\n-            pragma Assert (Result = 0);\n-         end if;\n-      end loop;\n-\n-      if State\n-          (System.Interrupt_Management.Abort_Task_Interrupt) /= Default\n-      then\n-         act.sa_flags := 0;\n-         act.sa_handler := Abort_Handler'Address;\n-\n-         Result := sigemptyset (Tmp_Set'Access);\n-         pragma Assert (Result = 0);\n-         act.sa_mask := Tmp_Set;\n-\n-         Result :=\n-           sigaction\n-             (Signal (System.Interrupt_Management.Abort_Task_Interrupt),\n-              act'Unchecked_Access,\n-              old_act'Unchecked_Access);\n-         pragma Assert (Result = 0);\n-         Abort_Handler_Installed := True;\n-      end if;\n-   end Initialize;\n-\n-   -----------------------\n-   -- Set_Task_Affinity --\n-   -----------------------\n-\n-   procedure Set_Task_Affinity (T : ST.Task_Id) is\n-      pragma Unreferenced (T);\n-\n-   begin\n-      --  Setting task affinity is not supported by the underlying system\n-\n-      null;\n-   end Set_Task_Affinity;\n-\n-end System.Task_Primitives.Operations;"}, {"sha": "6e9394fafbed817ac19936b7f4b4770b195faad1", "filename": "gcc/ada/s-tasinf-irix.ads", "status": "removed", "additions": 0, "deletions": 118, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fada%2Fs-tasinf-irix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fada%2Fs-tasinf-irix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasinf-irix.ads?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,118 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                     S Y S T E M . T A S K _ I N F O                      --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---          Copyright (C) 1992-2009 Free Software Foundation, Inc.          --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This package contains the definitions and routines associated with the\n---  implementation and use of the Task_Info pragma. It is specialized\n---  appropriately for targets that make use of this pragma.\n-\n---  Note: the compiler generates direct calls to this interface, via Rtsfind.\n---  Any changes to this interface may require corresponding compiler changes.\n-\n---  This unit may be used directly from an application program by providing\n---  an appropriate WITH, and the interface can be expected to remain stable.\n-\n---  This is the IRIX (kernel threads) version of this package\n-\n-with Interfaces.C;\n-\n-package System.Task_Info is\n-   pragma Preelaborate;\n-   pragma Elaborate_Body;\n-   --  To ensure that a body is allowed\n-\n-   -----------------------------------------\n-   -- Implementation of Task_Info Feature --\n-   -----------------------------------------\n-\n-   --  Pragma Task_Info allows an application to set the underlying\n-   --  pthread scheduling attributes for a specific task.\n-\n-   ------------------\n-   -- Declarations --\n-   ------------------\n-\n-   type Thread_Scheduling_Scope is\n-     (PTHREAD_SCOPE_PROCESS, PTHREAD_SCOPE_SYSTEM);\n-\n-   for Thread_Scheduling_Scope'Size use Interfaces.C.int'Size;\n-\n-   type Thread_Scheduling_Inheritance is\n-      (PTHREAD_EXPLICIT_SCHED, PTHREAD_INHERIT_SCHED);\n-\n-   for Thread_Scheduling_Inheritance'Size use Interfaces.C.int'Size;\n-\n-   type Thread_Scheduling_Policy is\n-      (SCHED_FIFO,   --  The first-in-first-out real-time policy\n-       SCHED_RR,     --  The round-robin real-time scheduling policy\n-       SCHED_TS);    --  The timeshare earnings based scheduling policy\n-\n-   for Thread_Scheduling_Policy'Size use Interfaces.C.int'Size;\n-   for Thread_Scheduling_Policy use\n-      (SCHED_FIFO => 1,\n-       SCHED_RR   => 2,\n-       SCHED_TS   => 3);\n-\n-   function SCHED_OTHER return Thread_Scheduling_Policy renames SCHED_TS;\n-\n-   No_Specified_Priority : constant := -1;\n-\n-   subtype Thread_Scheduling_Priority is Integer range\n-     No_Specified_Priority .. 255;\n-\n-   subtype FIFO_Priority is Thread_Scheduling_Priority range 0 .. 255;\n-\n-   subtype RR_Priority is Thread_Scheduling_Priority range 0 .. 255;\n-\n-   subtype TS_Priority is Thread_Scheduling_Priority range 1 .. 40;\n-\n-   subtype OTHER_Priority is Thread_Scheduling_Priority range 1 .. 40;\n-\n-   subtype CPU_Number is Integer range -1 .. Integer'Last;\n-   ANY_CPU : constant CPU_Number := CPU_Number'First;\n-\n-   type Thread_Attributes is record\n-      Scope       : Thread_Scheduling_Scope       := PTHREAD_SCOPE_PROCESS;\n-      Inheritance : Thread_Scheduling_Inheritance := PTHREAD_EXPLICIT_SCHED;\n-      Policy      : Thread_Scheduling_Policy      := SCHED_RR;\n-      Priority    : Thread_Scheduling_Priority    := No_Specified_Priority;\n-      Runon_CPU   : CPU_Number                    := ANY_CPU;\n-   end record;\n-\n-   Default_Thread_Attributes : constant Thread_Attributes :=\n-     (PTHREAD_SCOPE_PROCESS, PTHREAD_EXPLICIT_SCHED, SCHED_RR,\n-       No_Specified_Priority, ANY_CPU);\n-\n-   type Task_Info_Type is access all Thread_Attributes;\n-\n-   Unspecified_Task_Info : constant Task_Info_Type := null;\n-   --  Value passed to task in the absence of a Task_Info pragma\n-\n-end System.Task_Info;"}, {"sha": "61e934f4ba6b79af74305691dff53732c9b6e58e", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -251,7 +251,7 @@ __gnat_ttyname (int filedes)\n }\n #endif\n \f\n-#if defined (linux) || defined (sun) || defined (sgi) \\\n+#if defined (linux) || defined (sun) \\\n   || defined (WINNT) \\\n   || defined (__MACHTEN__) || defined (__hpux__) || defined (_AIX) \\\n   || (defined (__svr4__) && defined (i386)) || defined (__Lynx__) \\\n@@ -309,7 +309,7 @@ getc_immediate_common (FILE *stream,\n                        int *avail,\n                        int waiting)\n {\n-#if defined (linux) || defined (sun) || defined (sgi) \\\n+#if defined (linux) || defined (sun) \\\n     || defined (__CYGWIN32__) || defined (__MACHTEN__) || defined (__hpux__) \\\n     || defined (_AIX) || (defined (__svr4__) && defined (i386)) \\\n     || defined (__Lynx__) || defined (__FreeBSD__) || defined (__OpenBSD__) \\\n@@ -329,7 +329,7 @@ getc_immediate_common (FILE *stream,\n       /* Set RAW mode, with no echo */\n       termios_rec.c_lflag = termios_rec.c_lflag & ~ICANON & ~ECHO;\n \n-#if defined(linux) || defined (sun) || defined (sgi) \\\n+#if defined(linux) || defined (sun) \\\n     || defined (__MACHTEN__) || defined (__hpux__) \\\n     || defined (_AIX) || (defined (__svr4__) && defined (i386)) \\\n     || defined (__Lynx__) || defined (__FreeBSD__) || defined (__OpenBSD__) \\\n@@ -780,8 +780,8 @@ __gnat_localtime_tzoff (const time_t *timer, const int *is_historic, long *off)\n {\n   struct tm tp;\n \n-/* AIX, HPUX, SGI Irix, Sun Solaris */\n-#if defined (_AIX) || defined (__hpux__) || defined (sgi) || defined (sun)\n+/* AIX, HPUX, Sun Solaris */\n+#if defined (_AIX) || defined (__hpux__) || defined (sun)\n {\n   (*Lock_Task) ();\n "}, {"sha": "3dd0810d257ef836992a5a17743c9c7cc656ca81", "filename": "gcc/ada/system-irix-n32.ads", "status": "removed", "additions": 0, "deletions": 158, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fada%2Fsystem-irix-n32.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fada%2Fsystem-irix-n32.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-irix-n32.ads?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,158 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                        GNAT RUN-TIME COMPONENTS                          --\n---                                                                          --\n---                               S Y S T E M                                --\n---                                                                          --\n---                                 S p e c                                  --\n---                           (SGI Irix, n32 ABI)                            --\n---                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n---                                                                          --\n--- This specification is derived from the Ada Reference Manual for use with --\n--- GNAT. The copyright notice above, and the license provisions that follow --\n--- apply solely to the  contents of the part following the private keyword. --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-package System is\n-   pragma Pure;\n-   --  Note that we take advantage of the implementation permission to make\n-   --  this unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada\n-   --  2005, this is Pure in any case (AI-362).\n-\n-   type Name is (SYSTEM_NAME_GNAT);\n-   System_Name : constant Name := SYSTEM_NAME_GNAT;\n-\n-   --  System-Dependent Named Numbers\n-\n-   Min_Int               : constant := Long_Long_Integer'First;\n-   Max_Int               : constant := Long_Long_Integer'Last;\n-\n-   Max_Binary_Modulus    : constant := 2 ** Long_Long_Integer'Size;\n-   Max_Nonbinary_Modulus : constant := 2 ** Integer'Size - 1;\n-\n-   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n-   Max_Digits            : constant := Long_Long_Float'Digits;\n-\n-   Max_Mantissa          : constant := 63;\n-   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n-\n-   Tick                  : constant := 0.01;\n-\n-   --  Storage-related Declarations\n-\n-   type Address is private;\n-   pragma Preelaborable_Initialization (Address);\n-   Null_Address : constant Address;\n-\n-   Storage_Unit : constant := 8;\n-   Word_Size    : constant := 64;\n-   Memory_Size  : constant := 2 ** 32;\n-\n-   --  Address comparison\n-\n-   function \"<\"  (Left, Right : Address) return Boolean;\n-   function \"<=\" (Left, Right : Address) return Boolean;\n-   function \">\"  (Left, Right : Address) return Boolean;\n-   function \">=\" (Left, Right : Address) return Boolean;\n-   function \"=\"  (Left, Right : Address) return Boolean;\n-\n-   pragma Import (Intrinsic, \"<\");\n-   pragma Import (Intrinsic, \"<=\");\n-   pragma Import (Intrinsic, \">\");\n-   pragma Import (Intrinsic, \">=\");\n-   pragma Import (Intrinsic, \"=\");\n-\n-   --  Other System-Dependent Declarations\n-\n-   type Bit_Order is (High_Order_First, Low_Order_First);\n-   Default_Bit_Order : constant Bit_Order := High_Order_First;\n-   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n-\n-   --  Priority-related Declarations (RM D.1)\n-\n-   --  IRIX priorities as defined by realtime(5):\n-   --\n-   --  255        is for system-level interrupts\n-   --  240 - 254  are suggested for hard real-time threads\n-   --  200 - 239  are used by system device driver interrupt threads\n-   --  110 - 199  are suggested for interactive real-time applications\n-   --   90 - 109  are used by system daemon threads\n-   --    0 -  89  are suggested for soft real-time applications\n-   --\n-   --  We don't express the full range of IRIX priorities.  For now, we\n-   --  handle only the subset for soft real-time applications.\n-\n-   Max_Priority           : constant Positive := 88;\n-   Max_Interrupt_Priority : constant Positive := 89;\n-\n-   subtype Any_Priority       is Integer      range  0 .. 89;\n-   subtype Priority           is Any_Priority range  0 .. 88;\n-   subtype Interrupt_Priority is Any_Priority range 89 .. 89;\n-\n-   Default_Priority : constant Priority := 44;\n-\n-private\n-\n-   type Address is mod Memory_Size;\n-   Null_Address : constant Address := 0;\n-\n-   --------------------------------------\n-   -- System Implementation Parameters --\n-   --------------------------------------\n-\n-   --  These parameters provide information about the target that is used\n-   --  by the compiler. They are in the private part of System, where they\n-   --  can be accessed using the special circuitry in the Targparm unit\n-   --  whose source should be consulted for more detailed descriptions\n-   --  of the individual switch values.\n-\n-   Backend_Divide_Checks     : constant Boolean := False;\n-   Backend_Overflow_Checks   : constant Boolean := True;\n-   Command_Line_Args         : constant Boolean := True;\n-   Configurable_Run_Time     : constant Boolean := False;\n-   Denorm                    : constant Boolean := False;\n-   Duration_32_Bits          : constant Boolean := False;\n-   Exit_Status_Supported     : constant Boolean := True;\n-   Fractional_Fixed_Ops      : constant Boolean := False;\n-   Frontend_Layout           : constant Boolean := False;\n-   Machine_Overflows         : constant Boolean := False;\n-   Machine_Rounds            : constant Boolean := True;\n-   Preallocated_Stacks       : constant Boolean := False;\n-   Signed_Zeros              : constant Boolean := True;\n-   Stack_Check_Default       : constant Boolean := False;\n-   Stack_Check_Probes        : constant Boolean := True;\n-   Stack_Check_Limits        : constant Boolean := False;\n-   Support_Aggregates        : constant Boolean := True;\n-   Support_Composite_Assign  : constant Boolean := True;\n-   Support_Composite_Compare : constant Boolean := True;\n-   Support_Long_Shifts       : constant Boolean := True;\n-   Always_Compatible_Rep     : constant Boolean := True;\n-   Suppress_Standard_Library : constant Boolean := False;\n-   Use_Ada_Main_Program_Name : constant Boolean := False;\n-   ZCX_By_Default            : constant Boolean := True;\n-\n-   --  Note: Denorm is False because denormals are not supported on the\n-   --  R10000, and we want the code to be valid for this processor.\n-\n-end System;"}, {"sha": "916fa4d7dffa6b87d10fd533aea64081d0e4bcf2", "filename": "gcc/ada/system-irix-n64.ads", "status": "removed", "additions": 0, "deletions": 159, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fada%2Fsystem-irix-n64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fada%2Fsystem-irix-n64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-irix-n64.ads?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,159 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                        GNAT RUN-TIME COMPONENTS                          --\n---                                                                          --\n---                               S Y S T E M                                --\n---                                                                          --\n---                                 S p e c                                  --\n---                           (SGI Irix, n64 ABI)                            --\n---                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n---                                                                          --\n--- This specification is derived from the Ada Reference Manual for use with --\n--- GNAT. The copyright notice above, and the license provisions that follow --\n--- apply solely to the  contents of the part following the private keyword. --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-package System is\n-   pragma Pure;\n-   --  Note that we take advantage of the implementation permission to make\n-   --  this unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada\n-   --  2005, this is Pure in any case (AI-362).\n-\n-   type Name is (SYSTEM_NAME_GNAT);\n-   System_Name : constant Name := SYSTEM_NAME_GNAT;\n-\n-   --  System-Dependent Named Numbers\n-\n-   Min_Int               : constant := Long_Long_Integer'First;\n-   Max_Int               : constant := Long_Long_Integer'Last;\n-\n-   Max_Binary_Modulus    : constant := 2 ** Long_Long_Integer'Size;\n-   Max_Nonbinary_Modulus : constant := 2 ** Integer'Size - 1;\n-\n-   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n-   Max_Digits            : constant := Long_Long_Float'Digits;\n-\n-   Max_Mantissa          : constant := 63;\n-   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n-\n-   Tick                  : constant := 0.01;\n-\n-   --  Storage-related Declarations\n-\n-   type Address is private;\n-   pragma Preelaborable_Initialization (Address);\n-   Null_Address : constant Address;\n-\n-   Storage_Unit : constant := 8;\n-   Word_Size    : constant := 64;\n-   Memory_Size  : constant := 2 ** 64;\n-\n-   --  Address comparison\n-\n-   function \"<\"  (Left, Right : Address) return Boolean;\n-   function \"<=\" (Left, Right : Address) return Boolean;\n-   function \">\"  (Left, Right : Address) return Boolean;\n-   function \">=\" (Left, Right : Address) return Boolean;\n-   function \"=\"  (Left, Right : Address) return Boolean;\n-\n-   pragma Import (Intrinsic, \"<\");\n-   pragma Import (Intrinsic, \"<=\");\n-   pragma Import (Intrinsic, \">\");\n-   pragma Import (Intrinsic, \">=\");\n-   pragma Import (Intrinsic, \"=\");\n-\n-   --  Other System-Dependent Declarations\n-\n-   type Bit_Order is (High_Order_First, Low_Order_First);\n-   Default_Bit_Order : constant Bit_Order := High_Order_First;\n-   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n-\n-   --  Priority-related Declarations (RM D.1)\n-\n-   --  IRIX priorities as defined by realtime(5):\n-   --\n-   --  255        is for system-level interrupts\n-   --  240 - 254  are suggested for hard real-time threads\n-   --  200 - 239  are used by system device driver interrupt threads\n-   --  110 - 199  are suggested for interactive real-time applications\n-   --   90 - 109  are used by system daemon threads\n-   --    0 -  89  are suggested for soft real-time applications\n-   --\n-   --  We don't express the full range of IRIX priorities.  For now, we\n-   --  handle only the subset for soft real-time applications.\n-\n-   Max_Priority           : constant Positive := 88;\n-   Max_Interrupt_Priority : constant Positive := 89;\n-\n-   subtype Any_Priority       is Integer      range  0 .. 89;\n-   subtype Priority           is Any_Priority range  0 .. 88;\n-   subtype Interrupt_Priority is Any_Priority range 89 .. 89;\n-\n-   Default_Priority : constant Priority := 44;\n-\n-private\n-\n-   type Address is mod Memory_Size;\n-   Null_Address : constant Address := 0;\n-\n-   --------------------------------------\n-   -- System Implementation Parameters --\n-   --------------------------------------\n-\n-   --  These parameters provide information about the target that is used\n-   --  by the compiler. They are in the private part of System, where they\n-   --  can be accessed using the special circuitry in the Targparm unit\n-   --  whose source should be consulted for more detailed descriptions\n-   --  of the individual switch values.\n-\n-   Backend_Divide_Checks     : constant Boolean := False;\n-   Backend_Overflow_Checks   : constant Boolean := False;\n-   Command_Line_Args         : constant Boolean := True;\n-   Configurable_Run_Time     : constant Boolean := False;\n-   Denorm                    : constant Boolean := False;\n-   Duration_32_Bits          : constant Boolean := False;\n-   Exit_Status_Supported     : constant Boolean := True;\n-   Fractional_Fixed_Ops      : constant Boolean := False;\n-   Frontend_Layout           : constant Boolean := False;\n-   Machine_Overflows         : constant Boolean := False;\n-   Machine_Rounds            : constant Boolean := True;\n-   Preallocated_Stacks       : constant Boolean := False;\n-   Signed_Zeros              : constant Boolean := True;\n-   Stack_Check_Default       : constant Boolean := False;\n-   Stack_Check_Probes        : constant Boolean := True;\n-   Stack_Check_Limits        : constant Boolean := False;\n-   Support_64_Bit_Divides    : constant Boolean := True;\n-   Support_Aggregates        : constant Boolean := True;\n-   Support_Composite_Assign  : constant Boolean := True;\n-   Support_Composite_Compare : constant Boolean := True;\n-   Support_Long_Shifts       : constant Boolean := True;\n-   Always_Compatible_Rep     : constant Boolean := True;\n-   Suppress_Standard_Library : constant Boolean := False;\n-   Use_Ada_Main_Program_Name : constant Boolean := False;\n-   ZCX_By_Default            : constant Boolean := True;\n-\n-   --  Note: Denorm is False because denormals are not supported on the\n-   --  R10000, and we want the code to be valid for this processor.\n-\n-end System;"}, {"sha": "91d0afd9a07ea6cf7b506adc0bedb8123c931b8c", "filename": "gcc/ada/system-irix-o32.ads", "status": "removed", "additions": 0, "deletions": 146, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fada%2Fsystem-irix-o32.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fada%2Fsystem-irix-o32.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-irix-o32.ads?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,146 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                        GNAT RUN-TIME COMPONENTS                          --\n---                                                                          --\n---                               S Y S T E M                                --\n---                                                                          --\n---                                 S p e c                                  --\n---                           (SGI Irix, o32 ABI)                            --\n---                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n---                                                                          --\n--- This specification is derived from the Ada Reference Manual for use with --\n--- GNAT. The copyright notice above, and the license provisions that follow --\n--- apply solely to the  contents of the part following the private keyword. --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-package System is\n-   pragma Pure;\n-   --  Note that we take advantage of the implementation permission to make\n-   --  this unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada\n-   --  2005, this is Pure in any case (AI-362).\n-\n-   type Name is (SYSTEM_NAME_GNAT);\n-   System_Name : constant Name := SYSTEM_NAME_GNAT;\n-\n-   --  System-Dependent Named Numbers\n-\n-   Min_Int               : constant := Long_Long_Integer'First;\n-   Max_Int               : constant := Long_Long_Integer'Last;\n-\n-   Max_Binary_Modulus    : constant := 2 ** Long_Long_Integer'Size;\n-   Max_Nonbinary_Modulus : constant := 2 ** Integer'Size - 1;\n-\n-   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n-   Max_Digits            : constant := Long_Long_Float'Digits;\n-\n-   Max_Mantissa          : constant := 63;\n-   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n-\n-   Tick                  : constant := 0.01;\n-\n-   --  Storage-related Declarations\n-\n-   type Address is private;\n-   pragma Preelaborable_Initialization (Address);\n-   Null_Address : constant Address;\n-\n-   Storage_Unit : constant := 8;\n-   Word_Size    : constant := 32;\n-   Memory_Size  : constant := 2 ** 32;\n-\n-   --  Address comparison\n-\n-   function \"<\"  (Left, Right : Address) return Boolean;\n-   function \"<=\" (Left, Right : Address) return Boolean;\n-   function \">\"  (Left, Right : Address) return Boolean;\n-   function \">=\" (Left, Right : Address) return Boolean;\n-   function \"=\"  (Left, Right : Address) return Boolean;\n-\n-   pragma Import (Intrinsic, \"<\");\n-   pragma Import (Intrinsic, \"<=\");\n-   pragma Import (Intrinsic, \">\");\n-   pragma Import (Intrinsic, \">=\");\n-   pragma Import (Intrinsic, \"=\");\n-\n-   --  Other System-Dependent Declarations\n-\n-   type Bit_Order is (High_Order_First, Low_Order_First);\n-   Default_Bit_Order : constant Bit_Order := High_Order_First;\n-   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n-\n-   --  Priority-related Declarations (RM D.1)\n-\n-   Max_Priority           : constant Positive := 30;\n-   Max_Interrupt_Priority : constant Positive := 31;\n-\n-   subtype Any_Priority       is Integer      range  0 .. 31;\n-   subtype Priority           is Any_Priority range  0 .. 30;\n-   subtype Interrupt_Priority is Any_Priority range 31 .. 31;\n-\n-   Default_Priority : constant Priority := 15;\n-\n-private\n-\n-   type Address is mod Memory_Size;\n-   Null_Address : constant Address := 0;\n-\n-   --------------------------------------\n-   -- System Implementation Parameters --\n-   --------------------------------------\n-\n-   --  These parameters provide information about the target that is used\n-   --  by the compiler. They are in the private part of System, where they\n-   --  can be accessed using the special circuitry in the Targparm unit\n-   --  whose source should be consulted for more detailed descriptions\n-   --  of the individual switch values.\n-\n-   Backend_Divide_Checks     : constant Boolean := False;\n-   Backend_Overflow_Checks   : constant Boolean := True;\n-   Command_Line_Args         : constant Boolean := True;\n-   Configurable_Run_Time     : constant Boolean := False;\n-   Denorm                    : constant Boolean := False;\n-   Duration_32_Bits          : constant Boolean := False;\n-   Exit_Status_Supported     : constant Boolean := True;\n-   Fractional_Fixed_Ops      : constant Boolean := False;\n-   Frontend_Layout           : constant Boolean := False;\n-   Machine_Overflows         : constant Boolean := False;\n-   Machine_Rounds            : constant Boolean := True;\n-   Preallocated_Stacks       : constant Boolean := False;\n-   Signed_Zeros              : constant Boolean := True;\n-   Stack_Check_Default       : constant Boolean := False;\n-   Stack_Check_Probes        : constant Boolean := True;\n-   Stack_Check_Limits        : constant Boolean := False;\n-   Support_Aggregates        : constant Boolean := True;\n-   Support_Composite_Assign  : constant Boolean := True;\n-   Support_Composite_Compare : constant Boolean := True;\n-   Support_Long_Shifts       : constant Boolean := True;\n-   Always_Compatible_Rep     : constant Boolean := True;\n-   Suppress_Standard_Library : constant Boolean := False;\n-   Use_Ada_Main_Program_Name : constant Boolean := False;\n-   ZCX_By_Default            : constant Boolean := True;\n-\n-   --  Note: Denorm is False because denormals are not supported on the\n-   --  R10000, and we want the code to be valid for this processor.\n-\n-end System;"}, {"sha": "ca672c48b374a65b4be04dd2c860eab18de4c075", "filename": "gcc/ada/terminals.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fterminals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fada%2Fterminals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fterminals.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -976,9 +976,6 @@ __gnat_setup_winsize (void *desc, int rows, int columns)\n  || defined (__DragonFly__)\n #   define FREEBSD\n #endif\n-#if defined (__mips) && defined (__sgi)\n-#   define IRIX\n-#endif\n \n /* Include every system header we need */\n #define _GNU_SOURCE\n@@ -1025,7 +1022,6 @@ __gnat_setup_winsize (void *desc, int rows, int columns)\n       1- using a cloning device (USE_CLONE_DEVICE)\n       2- getpt                  (USE_GETPT)\n       3- openpty                (USE_OPENPTY)\n-      4- _getpty                (USE_GETPTY)\n \n    When using the cloning device method, the macro USE_CLONE_DEVICE should\n    contains a full path to the adequate device.\n@@ -1037,8 +1033,6 @@ __gnat_setup_winsize (void *desc, int rows, int columns)\n /* Configurable part */\n #if defined (__APPLE__) || defined (FREEBSD)\n #define USE_OPENPTY\n-#elif defined (IRIX)\n-#define USE_GETPTY\n #elif defined (linux)\n #define USE_GETPT\n #elif defined (sun)\n@@ -1093,9 +1087,6 @@ allocate_pty_desc (pty_desc **desc) {\n   master_fd = getpt ();\n #elif defined (USE_OPENPTY)\n   status = openpty (&master_fd, &slave_fd, NULL, NULL, NULL);\n-#elif defined (USE_GETPTY)\n-  slave_name = _getpty (&master_fd, O_RDWR | O_NDELAY, 0600, 0);\n-  if (slave_name == NULL) status = -1;\n #elif defined (USE_CLONE_DEVICE)\n   master_fd = open (USE_CLONE_DEVICE, O_RDWR | O_NONBLOCK, 0);\n #else"}, {"sha": "a52e95a64e200ae0f29ea136791b1707f3d6a348", "filename": "gcc/collect2.c", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,7 +1,7 @@\n /* Collect static initialization info into data structures that can be\n    traversed by C++ initialization and finalization routines.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011, 2012\n    Free Software Foundation, Inc.\n    Contributed by Chris Smith (csmith@convex.com).\n    Heavily modified by Michael Meissner (meissner@cygnus.com),\n@@ -323,9 +323,6 @@ static void write_c_file_glob (FILE *, const char *);\n #ifdef SCAN_LIBRARIES\n static void scan_libraries (const char *);\n #endif\n-#if LINK_ELIMINATE_DUPLICATE_LDIRECTORIES\n-static int is_in_args (const char *, const char **, const char **);\n-#endif\n #ifdef COLLECT_EXPORT_LIST\n #if 0\n static int is_in_list (const char *, struct id *);\n@@ -1524,15 +1521,6 @@ main (int argc, char **argv)\n \t    case 'L':\n \t      add_prefix (&cmdline_lib_dirs, arg+2);\n \t      break;\n-#else\n-#if LINK_ELIMINATE_DUPLICATE_LDIRECTORIES\n-\t    case 'L':\n-\t      if (is_in_args (arg,\n-\t\t\t      CONST_CAST2 (const char **, char **, ld1_argv),\n-\t\t\t      ld1 - 1))\n-\t\t--ld1;\n-\t      break;\n-#endif /* LINK_ELIMINATE_DUPLICATE_LDIRECTORIES */\n #endif\n \n \t    case 'o':\n@@ -2235,22 +2223,6 @@ write_list (FILE *stream, const char *prefix, struct id *list)\n     }\n }\n \n-#if LINK_ELIMINATE_DUPLICATE_LDIRECTORIES\n-/* Given a STRING, return nonzero if it occurs in the list in range\n-   [ARGS_BEGIN,ARGS_END).  */\n-\n-static int\n-is_in_args (const char *string, const char **args_begin,\n-\t    const char **args_end)\n-{\n-  const char **args_pointer;\n-  for (args_pointer = args_begin; args_pointer != args_end; ++args_pointer)\n-    if (strcmp (string, *args_pointer) == 0)\n-      return 1;\n-  return 0;\n-}\n-#endif /* LINK_ELIMINATE_DUPLICATE_LDIRECTORIES */\n-\n #ifdef COLLECT_EXPORT_LIST\n /* This function is really used only on AIX, but may be useful.  */\n #if 0"}, {"sha": "6fb3b351b842ca7ad66b8a27860bba056c9ae4f0", "filename": "gcc/config.gcc", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -250,7 +250,6 @@ case ${target} in\n  | arm*-*-rtems*\t\t\t\\\n  | arm*-*-uclinux*\t\t\t\\\n  | arm*-wince-pe*\t\t\t\\\n- | mips-sgi-irix6.5\t\t\t\\\n  | score-*\t\t\t\t\\\n  | *-*-solaris2.8*\t\t\t\\\n  )\n@@ -1682,26 +1681,6 @@ microblaze*-*-*)\n \tcxx_target_objs=\"${cxx_target_objs} microblaze-c.o\"\n         tmake_file=\"${tmake_file} microblaze/t-microblaze\"\n         ;;\n-mips-sgi-irix6.5*)\n-\ttm_file=\"elfos.h ${tm_file} mips/iris6.h\"\n-\ttmake_file=\"mips/t-irix6 t-slibgcc\"\n-\textra_options=\"${extra_options} rpath.opt mips/iris6.opt\"\n-\ttarget_cpu_default=\"MASK_ABICALLS\"\n-\ttm_defines=\"${tm_defines} MIPS_ISA_DEFAULT=3 MIPS_ABI_DEFAULT=ABI_N32\"\n-\t# Only IRIX Development Foundation 1.3 for IRIX 6.5 provides stdint.h.\n-\tuse_gcc_stdint=wrap\n-\tif test \"x$stabs\" = xyes\n-\tthen\n-\t\ttm_file=\"${tm_file} dbx.h\"\n-\tfi\n-\tif test \"x$gnu_ld\" = xyes\n-\tthen\n-\t\ttm_defines=\"${tm_defines} IRIX_USING_GNU_LD\"\n-\tfi\n-\tcase ${enable_threads}:${have_pthread_h} in\n-\t  \"\":yes | yes:yes ) thread_file=posix ;;\n-\tesac\n-\t;;\n mips*-*-netbsd*)\t\t\t# NetBSD/mips, either endian.\n \ttarget_cpu_default=\"MASK_ABICALLS\"\n \ttm_file=\"elfos.h ${tm_file} mips/elf.h netbsd.h netbsd-elf.h mips/netbsd.h\""}, {"sha": "0a01ddbb228e8db3841da5ce890cccacd0b505f1", "filename": "gcc/config.host", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.host?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -126,9 +126,9 @@ case ${host} in\n \t;;\n     esac\n     ;;\n-  mips*-*-linux* | mips-sgi-irix*)\n+  mips*-*-linux*)\n     case ${target} in\n-      mips*-*-linux* | mips-sgi-irix*)\n+      mips*-*-linux*)\n \thost_extra_gcc_objs=\"driver-native.o\"\n \thost_xmake_file=\"${host_xmake_file} mips/x-native\"\n       ;;"}, {"sha": "f221d78990e7552de6489ba1b8b665cde4a2409a", "filename": "gcc/config/mips/driver-native.c", "status": "modified", "additions": 1, "deletions": 60, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fconfig%2Fmips%2Fdriver-native.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fconfig%2Fmips%2Fdriver-native.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fdriver-native.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for the gcc driver.\n-   Copyright (C) 2008, 2011 Free Software Foundation, Inc.\n+   Copyright (C) 2008, 2011, 2012 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -22,59 +22,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tm.h\"\n \n-#ifdef __sgi__\n-#include <invent.h>\n-#include <sys/sbd.h>\n-\n-/* Cf. MIPS R10000 Microprocessor User Guide, Version 2.0, 14.13 Processor\n-   Revision Identifier (PRId) Register (15).\n-\n-   http://techpubs.sgi.com/library/tpl/cgi-bin/getdoc.cgi/hdwr/bks/SGI_Developer/books/R10K_UM/sgi_html/t5.Ver.2.0.book_279.html  */\n-\n-static const struct cpu_types {\n-  int impl;\n-  const char *cpu;\n-} cpu_types[] = {\n-  { C0_IMP_R2000, \"r2000\" },\n-  { C0_IMP_R3000, \"r3000\" },\n-  { C0_IMP_R6000, \"r6000\" },\n-  { C0_IMP_R4000, \"r4000\" },\n-  { C0_IMP_R6000A, \"r6000\" },\n-  { C0_IMP_R10000, \"r10000\" },\n-  { C0_IMP_R12000, \"r12000\" },\n-  { C0_IMP_R14000, \"r14000\" },\n-  { C0_IMP_R8000,  \"r8000\" },\n-  { C0_IMP_R4600,  \"r4600\" },\n-  { C0_IMP_R4700,  \"r4600\" },\n-  { C0_IMP_R4650,  \"r4650\" },\n-  { C0_IMP_R5000,  \"vr5000\" },\n-  { C0_IMP_RM7000, \"rm7000\" },\n-  { C0_IMP_RM5271, \"vr5000\" },\n-  { 0, 0 }\n-};\n-\n-static int\n-cputype (inventory_t *inv, void *arg)\n-{\n-  if (inv != NULL\n-      && inv->inv_class == INV_PROCESSOR\n-      && inv->inv_type == INV_CPUCHIP)\n-    {\n-      int i;\n-      /* inv_state is the cpu revision number.  */\n-      int impl = (inv->inv_state & C0_IMPMASK) >> C0_IMPSHIFT;\n-\n-      for (i = 0; cpu_types[i].cpu != NULL; i++)\n-\tif (cpu_types[i].impl == impl)\n-\t  {\n-\t    *((const char **) arg) = cpu_types[i].cpu;\n-\t    break;\n-\t  }\n-    }\n-  return 0;\n-}\n-#endif\n-\n /* This will be called by the spec parser in gcc.c when it sees\n    a %:local_cpu_detect(args) construct.  Currently it will be called\n    with either \"arch\" or \"tune\" as argument depending on if -march=native\n@@ -92,10 +39,8 @@ const char *\n host_detect_local_cpu (int argc, const char **argv)\n {\n   const char *cpu = NULL;\n-#ifndef __sgi__\n   char buf[128];\n   FILE *f;\n-#endif\n   bool arch;\n \n   if (argc < 1)\n@@ -105,9 +50,6 @@ host_detect_local_cpu (int argc, const char **argv)\n   if (!arch && strcmp (argv[0], \"tune\"))\n     return NULL;\n \n-#ifdef __sgi__\n-  scaninvent (cputype, &cpu);\n-#else\n   f = fopen (\"/proc/cpuinfo\", \"r\");\n   if (f == NULL)\n     return NULL;\n@@ -133,7 +75,6 @@ host_detect_local_cpu (int argc, const char **argv)\n       }\n \n   fclose (f);\n-#endif\n \n   if (cpu == NULL)\n     return NULL;"}, {"sha": "af03c3d19f02b92a6d1b2e45d81d811a96c3e399", "filename": "gcc/config/mips/gnu-user.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fconfig%2Fmips%2Fgnu-user.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fconfig%2Fmips%2Fgnu-user.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fgnu-user.h?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for MIPS systems using GNU userspace.\n    Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,\n-   2007, 2008, 2010, 2011 Free Software Foundation, Inc.\n+   2007, 2008, 2010, 2011, 2012 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -48,7 +48,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef SUBTARGET_CC1_SPEC\n #define SUBTARGET_CC1_SPEC \"%{profile:-p}\"\n \n-/* From iris5.h */\n /* -G is incompatible with -KPIC which is the default, so only allow objects\n    in the small data section if the user explicitly asks for it.  */\n #undef MIPS_DEFAULT_GVALUE"}, {"sha": "a4e26497bde6bac34550a2d232eca7b6bded7791", "filename": "gcc/config/mips/gnu-user64.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fconfig%2Fmips%2Fgnu-user64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fconfig%2Fmips%2Fgnu-user64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fgnu-user64.h?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for MIPS systems using GNU userspace and n32/64 abi.\n-   Copyright 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2010, 2011\n+   Copyright 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2010, 2011, 2012\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -52,9 +52,3 @@ along with GCC; see the file COPYING3.  If not see\n \n #undef LOCAL_LABEL_PREFIX\n #define LOCAL_LABEL_PREFIX (TARGET_OLDABI ? \"$\" : \".\")\n-\n-/* GNU/Linux doesn't use the same floating-point format that IRIX uses\n-   for long double.  There's no need to override this here, since\n-   ieee_quad_format is the default, but let's put this here to make\n-   sure nobody thinks we just forgot to set it to something else.  */\n-#define MIPS_TFMODE_FORMAT mips_quad_format"}, {"sha": "7ab1f7864dd289c2375153bc22a225f7ad561d53", "filename": "gcc/config/mips/iris6.h", "status": "removed", "additions": 0, "deletions": 353, "changes": 353, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,353 +0,0 @@\n-/* Definitions of target machine for GNU compiler.  IRIX 6.5 version.\n-   Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 2000,\n-   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n-   Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* We are compiling for IRIX 6 now.  */\n-#undef TARGET_IRIX6\n-#define TARGET_IRIX6 1\n-\n-/* Default to -mabi=n32 and -mips3.  */\n-#undef MULTILIB_DEFAULTS\n-#define MULTILIB_DEFAULTS { \"mabi=n32\" }\n-\n-/* -march=native handling only makes sense with compiler running on\n-   a MIPS chip.  */\n-#if defined(__mips__)\n-extern const char *host_detect_local_cpu (int argc, const char **argv);\n-# define EXTRA_SPEC_FUNCTIONS \\\n-  { \"local_cpu_detect\", host_detect_local_cpu },\n-\n-# define MARCH_MTUNE_NATIVE_SPECS\t\t\t\t\\\n-  \" %{march=native:%<march=native %:local_cpu_detect(arch)}\"\t\\\n-  \" %{mtune=native:%<mtune=native %:local_cpu_detect(tune)}\"\n-#else\n-# define MARCH_MTUNE_NATIVE_SPECS \"\"\n-#endif\n-\n-/* Force the default ABI onto the command line in order to make the specs\n-   easier to write.  */\n-#undef DRIVER_SELF_SPECS\n-#define DRIVER_SELF_SPECS \t\t\t\\\n-  \"%{!mabi=*: -mabi=n32}\", \t\t\t\\\n-  /* Configuration-independent MIPS rules.  */\t\\\n-  BASE_DRIVER_SELF_SPECS,\t\t\t\\\n-  MARCH_MTUNE_NATIVE_SPECS\n-\n-/* IRIX 6.5 has the float and long double forms of math functions.  */\n-#define TARGET_C99_FUNCTIONS 1\n-\n-/* MIPS specific debugging info */\n-#define MIPS_DEBUGGING_INFO 1\n-\n-/* Force the generation of dwarf .debug_frame sections even if not\n-   compiling -g.  This guarantees that we can unwind the stack.  */\n-#define DWARF2_FRAME_INFO 1\n-\n-/* The system unwinder in libexc requires a specific dwarf return address\n-   column to work.  */\n-#undef  DWARF_FRAME_RETURN_COLUMN\n-#define DWARF_FRAME_RETURN_COLUMN (FP_REG_LAST + 1)\n-\n-/* The size in bytes of a DWARF field indicating an offset or length\n-   relative to a debug info section, specified to be 4 bytes in the DWARF-2\n-   specification.  The SGI/MIPS ABI defines it to be the same as PTR_SIZE.  */\n-#define DWARF_OFFSET_SIZE PTR_SIZE\n-\n-/* The size in bytes of the initial length field in a debug info\n-   section.  The DWARF 3 (draft) specification defines this to be\n-   either 4 or 12 (with a 4-byte \"escape\" word when it's 12), but the\n-   SGI/MIPS ABI predates this standard and defines it to be the same\n-   as DWARF_OFFSET_SIZE.  */\n-#define DWARF_INITIAL_LENGTH_SIZE DWARF_OFFSET_SIZE\n-\n-/* MIPS assemblers don't have the usual .set foo,bar construct;\n-   .set is used for assembler options instead.  */\n-#undef SET_ASM_OP\n-#define ASM_OUTPUT_DEF(FILE, LABEL1, LABEL2)\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fputc ('\\t', FILE);\t\t\t\t\t\\\n-      assemble_name (FILE, LABEL1);\t\t\t\t\\\n-      fputs (\" = \", FILE);\t\t\t\t\t\\\n-      assemble_name (FILE, LABEL2);\t\t\t\t\\\n-      fputc ('\\n', FILE);\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-#undef LOCAL_LABEL_PREFIX\n-#define LOCAL_LABEL_PREFIX \".\"\n-\n-#undef ASM_DECLARE_OBJECT_NAME\n-#define ASM_DECLARE_OBJECT_NAME mips_declare_object_name\n-\n-#undef ASM_FINISH_DECLARE_OBJECT\n-#define ASM_FINISH_DECLARE_OBJECT mips_finish_declare_object\n-\n-/* The native IRIX 6 linker does not support merging without a special\n-   elspec(5) file.  */\n-#ifndef IRIX_USING_GNU_LD\n-#undef HAVE_GAS_SHF_MERGE\n-#define HAVE_GAS_SHF_MERGE 0\n-#endif\n-\n-/* Specify wchar_t types.  */\n-#undef WCHAR_TYPE\n-#define WCHAR_TYPE (Pmode == DImode ? \"int\" : \"long int\")\n-\n-#undef WCHAR_TYPE_SIZE\n-#define WCHAR_TYPE_SIZE INT_TYPE_SIZE\n-\n-/* Same for wint_t.  */\n-#undef WINT_TYPE\n-#define WINT_TYPE (Pmode == DImode ? \"int\" : \"long int\")\n-\n-#undef WINT_TYPE_SIZE\n-#define WINT_TYPE_SIZE INT_TYPE_SIZE\n-\n-/* C99 stdint.h types.  */\n-#define INT8_TYPE \"signed char\"\n-#define INT16_TYPE \"short int\"\n-#define INT32_TYPE \"int\"\n-#define INT64_TYPE \"long long int\"\n-#define UINT8_TYPE \"unsigned char\"\n-#define UINT16_TYPE \"short unsigned int\"\n-#define UINT32_TYPE \"unsigned int\"\n-#define UINT64_TYPE \"long long unsigned int\"\n-\n-#define INT_LEAST8_TYPE \"signed char\"\n-#define INT_LEAST16_TYPE \"short int\"\n-#define INT_LEAST32_TYPE \"int\"\n-#define INT_LEAST64_TYPE \"long long int\"\n-#define UINT_LEAST8_TYPE \"unsigned char\"\n-#define UINT_LEAST16_TYPE \"short unsigned int\"\n-#define UINT_LEAST32_TYPE \"unsigned int\"\n-#define UINT_LEAST64_TYPE \"long long unsigned int\"\n-\n-#define INT_FAST8_TYPE \"signed char\"\n-#define INT_FAST16_TYPE \"short int\"\n-#define INT_FAST32_TYPE \"int\"\n-#define INT_FAST64_TYPE \"long long int\"\n-#define UINT_FAST8_TYPE \"unsigned char\"\n-#define UINT_FAST16_TYPE \"short unsigned int\"\n-#define UINT_FAST32_TYPE \"unsigned int\"\n-#define UINT_FAST64_TYPE \"long long unsigned int\"\n-\n-#define INTMAX_TYPE \"long long int\"\n-#define UINTMAX_TYPE \"long long unsigned int\"\n-\n-#define INTPTR_TYPE \"long int\"\n-#define UINTPTR_TYPE \"long unsigned int\"\n-\n-#define SIG_ATOMIC_TYPE \"int\"\n-\n-/* Plain char is unsigned in the SGI compiler.  */\n-#undef DEFAULT_SIGNED_CHAR\n-#define DEFAULT_SIGNED_CHAR 0\n-\n-#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      builtin_define_std (\"host_mips\");\t\t\t\t\\\n-      builtin_define_std (\"sgi\");\t\t\t\t\\\n-      builtin_define_std (\"unix\");\t\t\t\t\\\n-      builtin_define_std (\"SYSTYPE_SVR4\");\t\t\t\\\n-      builtin_define (\"_MODERN_C\");\t\t\t\t\\\n-      builtin_define (\"_SVR4_SOURCE\");\t\t\t\t\\\n-      builtin_define (\"__DSO__\");\t\t\t\t\\\n-      builtin_assert (\"system=unix\");\t\t\t\t\\\n-      builtin_assert (\"system=svr4\");\t\t\t\t\\\n-      builtin_assert (\"machine=sgi\");\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-      if (!ISA_MIPS1 && !ISA_MIPS2)\t\t\t\t\\\n-\tbuiltin_define (\"_COMPILER_VERSION=601\");\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-      /* We must always define _LONGLONG, even when -ansi is\t\\\n-\t used, because IRIX 5 system header files require it.\t\\\n-\t This is OK, because gcc never warns when long long\t\\\n-\t is used in system header files.\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-\t An alternative would be to support the SGI builtin\t\\\n-\t type __long_long.  */\t\t\t\t\t\\\n-      builtin_define (\"_LONGLONG\");\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-      /* IRIX 6.5.18 and above provide many ISO C99\t\t\\\n-\t features protected by the __c99 macro.\t\t\t\\\n-\t libstdc++ v3 needs them as well.  */\t\t\t\\\n-      if (flag_isoc99 || c_dialect_cxx ())\t\t\t\\\n-\tbuiltin_define (\"__c99\");\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-      /* The GNU C++ standard library requires that\t\t\\\n-\t __EXTENSIONS__ and _SGI_SOURCE be defined on at\t\\\n-\t least IRIX 6.2 and probably all IRIX 6 prior to 6.5.\t\\\n-\t We don't need this on IRIX 6.5 itself, but it\t\t\\\n-\t shouldn't hurt other than the namespace pollution.  */\t\\\n-      if (!flag_iso || c_dialect_cxx ())\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"__EXTENSIONS__\");\t\t\t\\\n-\t  builtin_define (\"_SGI_SOURCE\");\t\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-#undef SUBTARGET_CC1_SPEC\n-#define SUBTARGET_CC1_SPEC \"%{static: -mno-abicalls}\"\n-\n-#undef SUBTARGET_CPP_SPEC\n-#define SUBTARGET_CPP_SPEC \"%{pthread:-D_REENTRANT}\"\n-\n-#undef INIT_SECTION_ASM_OP\n-#define INIT_SECTION_ASM_OP \"\\t.section\\t.gcc_init,\\\"ax\\\",@progbits\"\n-\n-#undef FINI_SECTION_ASM_OP\n-#define FINI_SECTION_ASM_OP \"\\t.section\\t.gcc_fini,\\\"ax\\\",@progbits\"\n-\n-#ifdef IRIX_USING_GNU_LD\n-#define IRIX_NO_UNRESOLVED \"\"\n-#else\n-#define IRIX_NO_UNRESOLVED \"-no_unresolved\"\n-#endif\n-\n-#ifdef IRIX_USING_GNU_LD\n-#define SUBTARGET_DONT_WARN_UNUSED_SPEC \"\"\n-#define SUBTARGET_WARN_UNUSED_SPEC \"\"\n-#else\n-#define SUBTARGET_DONT_WARN_UNUSED_SPEC \"-dont_warn_unused\"\n-#define SUBTARGET_WARN_UNUSED_SPEC \"-warn_unused\"\n-#endif\n-\n-/* Profiling is supported via libprof1.a not -lc_p as in IRIX 3.  */\n-#undef STARTFILE_SPEC\n-#define STARTFILE_SPEC \\\n-  \"%{!shared: \\\n-     %{mabi=n32: \\\n-       %{mips4:%{pg:/usr/lib32/mips4/gcrt1.o%s} \\\n-         %{!pg:%{p:/usr/lib32/mips4/mcrt1.o%s /usr/lib32/mips4/libprof1.a%s} \\\n-           %{!p:/usr/lib32/mips4/crt1.o%s}}} \\\n-       %{!mips4:%{pg:/usr/lib32/mips3/gcrt1.o%s} \\\n-         %{!pg:%{p:/usr/lib32/mips3/mcrt1.o%s /usr/lib32/mips3/libprof1.a%s} \\\n-           %{!p:/usr/lib32/mips3/crt1.o%s}}}} \\\n-     %{mabi=64: \\\n-       %{mips4:%{pg:/usr/lib64/mips4/gcrt1.o} \\\n-         %{!pg:%{p:/usr/lib64/mips4/mcrt1.o /usr/lib64/mips4/libprof1.a} \\\n-           %{!p:/usr/lib64/mips4/crt1.o}}} \\\n-       %{!mips4:%{pg:/usr/lib64/mips3/gcrt1.o} \\\n-         %{!pg:%{p:/usr/lib64/mips3/mcrt1.o /usr/lib64/mips3/libprof1.a} \\\n-           %{!p:/usr/lib64/mips3/crt1.o}}}}} \\\n-  irix-crti.o%s crtbegin.o%s\"\n-\n-#undef LIB_SPEC\n-#define LIB_SPEC \\\n-  \"%{mabi=n32: %{mips4:-L/usr/lib32/mips4} %{!mips4:-L/usr/lib32/mips3} \\\n-     -L/usr/lib32} \\\n-   %{mabi=64: %{mips4:-L/usr/lib64/mips4} %{!mips4:-L/usr/lib64/mips3} \\\n-     -L/usr/lib64} \\\n-   %{!shared:\" \\\n-     SUBTARGET_DONT_WARN_UNUSED_SPEC \\\n-     \" %{pthread:-lpthread} %{p:libprof1.a%s}%{pg:libprof1.a%s} -lc \" \\\n-     SUBTARGET_WARN_UNUSED_SPEC \"}\"\n-\n-/* Avoid getting two warnings for libgcc.a everytime we link.  libgcc.a\n-   contains references to copysignl, so link with libm to resolve them.  */\n-#undef LIBGCC_SPEC\n-#define LIBGCC_SPEC \\\n-  SUBTARGET_DONT_WARN_UNUSED_SPEC \" -lgcc -lm \" SUBTARGET_WARN_UNUSED_SPEC\n-\n-#undef ENDFILE_SPEC\n-#define ENDFILE_SPEC \\\n-  \"%{Ofast|ffast-math|funsafe-math-optimizations:crtfastmath.o%s} \\\n-   crtend.o%s irix-crtn.o%s \\\n-   %{!shared: \\\n-     %{mabi=n32:%{mips4:/usr/lib32/mips4/crtn.o%s}\\\n-       %{!mips4:/usr/lib32/mips3/crtn.o%s}}\\\n-     %{mabi=64:%{mips4:/usr/lib64/mips4/crtn.o%s}\\\n-       %{!mips4:/usr/lib64/mips3/crtn.o%s}}}\"\n-\n-/* Generic part of the LINK_SPEC.  */\n-#undef LINK_SPEC\n-#define LINK_SPEC \"\\\n-%{G*} %{EB} %{EL} %{mips1} %{mips2} %{mips3} %{mips4} \\\n-%{bestGnum} %{shared} %{non_shared} \\\n-%{call_shared} %{no_archive} %{exact_version} \\\n-%{!shared: \\\n-  %{!non_shared: %{!call_shared:%{!r: -call_shared \" IRIX_NO_UNRESOLVED \"}}}} \\\n-%{rpath} %{!r: -init __gcc_init -fini __gcc_fini} \" IRIX_SUBTARGET_LINK_SPEC\n-\n-#ifdef IRIX_USING_GNU_LD\n-#define IRIX_SUBTARGET_LINK_SPEC \\\n-  \"%{mabi=n32: -melf32bmipn32}%{mabi=64: -melf64bmip}\"\n-#else\n-  /* Explicitly hide crt symbols that would normally be marked with\n-     a \"hidden\" visibility attribute.\n-     \n-     We have traditionally disabled this attribute when using the\n-     native linker because the native linker's visibility support is\n-     not fully-compatible with the GNU linker's.  In particular, the\n-     native linker does not pull in archive objects purely to resolve\n-     references to the object's hidden symbols, whereas the GNU\n-     linker does.\n-     \n-     The gcc build system currently hides symbols in some static\n-     libraries (typically libgcov.a or libgcc.a) whenever visibility\n-     attributes are supported.  On targets with GNU semantics, this\n-     makes sure that uses of libx.so symbols in one dynamic object are\n-     not resolved to libx.a symbols in another dynamic object.  But\n-     on targets with IRIX semantics, hiding the symbols prevents the\n-     static archive from working at all.\n-     \n-     It would probably be better to enable visiblity attributes for\n-     IRIX ld and disable the static archives versioning.  It shouldn't\n-     make anything worse, since libx.a symbols are global by default\n-     anyway.  However, no-one has volunteered to do this yet.  */\n-\n-#define IRIX_SUBTARGET_LINK_SPEC \\\n-  \"%{w} -_SYSTYPE_SVR4 -woff 131 \\\n-   %{shared:-hidden_symbol __dso_handle} \\\n-   %{mabi=n32: -n32}%{mabi=64: -64}%{!mabi*: -n32}\"\n-#endif\n-\n-/* A linker error can empirically be avoided by removing duplicate\n-   library search directories.  */\n-#define LINK_ELIMINATE_DUPLICATE_LDIRECTORIES 1\n-\n-/* The SGI linker doesn't understand constructor priorities.  */\n-#ifndef IRIX_USING_GNU_LD\n-#define SUPPORTS_INIT_PRIORITY 0\n-#endif\n-\n-/* Add -g to mips.h default to avoid confusing gas with local symbols\n-   generated from stabs info.  */\n-#undef NM_FLAGS\n-#define NM_FLAGS \"-Bng\"\n-\n-/* The system header files are C++ aware.  */\n-/* ??? Unfortunately, most but not all of the headers are C++ aware.\n-   Specifically, curses.h is not, and as a consequence, defining this\n-   used to prevent libg++ building.  This is no longer the case so\n-   define it again to prevent other problems, e.g. with getopt in\n-   unistd.h.  We still need some way to fix just those files that need\n-   fixing.  */\n-#define NO_IMPLICIT_EXTERN_C 1\n-\n-/* -G is incompatible with -KPIC which is the default, so only allow objects\n-   in the small data section if the user explicitly asks for it.  */\n-#undef MIPS_DEFAULT_GVALUE\n-#define MIPS_DEFAULT_GVALUE 0\n-\n-#define MIPS_TFMODE_FORMAT mips_extended_format"}, {"sha": "05fc378c56b6342913dd269d16d6baaf21d8f2c0", "filename": "gcc/config/mips/iris6.opt", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fconfig%2Fmips%2Firis6.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Fconfig%2Fmips%2Firis6.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.opt?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,45 +0,0 @@\n-; IRIX 6.5 options.\n-\n-; Copyright (C) 2011\n-; Free Software Foundation, Inc.\n-;\n-; This file is part of GCC.\n-;\n-; GCC is free software; you can redistribute it and/or modify it under\n-; the terms of the GNU General Public License as published by the Free\n-; Software Foundation; either version 3, or (at your option) any later\n-; version.\n-;\n-; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-; for more details.\n-;\n-; You should have received a copy of the GNU General Public License\n-; along with GCC; see the file COPYING3.  If not see\n-; <http://www.gnu.org/licenses/>.\n-\n-; See the GCC internals manual (options.texi) for a description of\n-; this file's format.\n-\n-; Please try to keep this file in ASCII collating order.\n-\n-bestGnum\n-Driver\n-\n-call_shared\n-Driver\n-\n-exact_version\n-Driver\n-\n-no_archive\n-Driver\n-\n-non_shared\n-Driver\n-\n-pthread\n-Driver\n-\n-; This comment is to ensure we retain the blank line above."}, {"sha": "ef035caefc2c8010a9a6219dd7281c7aef68b6e2", "filename": "gcc/config/mips/mips-modes.def", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fconfig%2Fmips%2Fmips-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fconfig%2Fmips%2Fmips-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-modes.def?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n /* MIPS extra machine modes. \n-   Copyright (C) 2003, 2004, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2007, 2008, 2012 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -22,7 +22,6 @@ along with GCC; see the file COPYING3.  If not see\n RESET_FLOAT_FORMAT (SF, mips_single_format);\n RESET_FLOAT_FORMAT (DF, mips_double_format);\n \n-/* Irix6 will override this via MIPS_TFMODE_FORMAT.  */\n FLOAT_MODE (TF, 16, mips_quad_format);\n \n /* Vector modes.  */"}, {"sha": "d1fa160ff1ce85877d82fab56f10b6565e1169a9", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,6 +1,6 @@\n /* Prototypes of target machine for GNU compiler.  MIPS version.\n    Copyright (C) 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011\n+   1999, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011, 2012\n    Free Software Foundation, Inc.\n    Contributed by A. Lichnewsky (lich@inria.inria.fr).\n    Changed by Michael Meissner\t(meissner@osf.org).\n@@ -299,7 +299,6 @@ extern bool mips_linked_madd_p (rtx, rtx);\n extern bool mips_store_data_bypass_p (rtx, rtx);\n extern rtx mips_prefetch_cookie (rtx, rtx);\n \n-extern void irix_asm_output_align (FILE *, unsigned);\n extern const char *current_section_name (void);\n extern unsigned int current_section_flags (void);\n extern bool mips_use_ins_ext_p (rtx, HOST_WIDE_INT, HOST_WIDE_INT);"}, {"sha": "008c7768a92b2a94812fba40bb458954b1444949", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 38, "deletions": 48, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -5488,9 +5488,6 @@ mips_build_builtin_va_list (void)\n       layout_type (record);\n       return record;\n     }\n-  else if (TARGET_IRIX6)\n-    /* On IRIX 6, this type is 'char *'.  */\n-    return build_pointer_type (char_type_node);\n   else\n     /* Otherwise, we use 'void *'.  */\n     return ptr_type_node;\n@@ -8451,50 +8448,47 @@ mips_file_start (void)\n   default_file_start ();\n \n   /* Generate a special section to describe the ABI switches used to\n-     produce the resultant binary.  This is unnecessary on IRIX and\n-     causes unwanted warnings from the native linker.  */\n-  if (!TARGET_IRIX6)\n-    {\n-      /* Record the ABI itself.  Modern versions of binutils encode\n-\t this information in the ELF header flags, but GDB needs the\n-\t information in order to correctly debug binaries produced by\n-\t older binutils.  See the function mips_gdbarch_init in\n-\t gdb/mips-tdep.c.  */\n-      fprintf (asm_out_file, \"\\t.section .mdebug.%s\\n\\t.previous\\n\",\n-\t       mips_mdebug_abi_name ());\n-\n-      /* There is no ELF header flag to distinguish long32 forms of the\n-\t EABI from long64 forms.  Emit a special section to help tools\n-\t such as GDB.  Do the same for o64, which is sometimes used with\n-\t -mlong64.  */\n-      if (mips_abi == ABI_EABI || mips_abi == ABI_O64)\n-\tfprintf (asm_out_file, \"\\t.section .gcc_compiled_long%d\\n\"\n-\t\t \"\\t.previous\\n\", TARGET_LONG64 ? 64 : 32);\n+     produce the resultant binary.  */\n+\n+  /* Record the ABI itself.  Modern versions of binutils encode\n+     this information in the ELF header flags, but GDB needs the\n+     information in order to correctly debug binaries produced by\n+     older binutils.  See the function mips_gdbarch_init in\n+     gdb/mips-tdep.c.  */\n+  fprintf (asm_out_file, \"\\t.section .mdebug.%s\\n\\t.previous\\n\",\n+\t   mips_mdebug_abi_name ());\n+\n+  /* There is no ELF header flag to distinguish long32 forms of the\n+     EABI from long64 forms.  Emit a special section to help tools\n+     such as GDB.  Do the same for o64, which is sometimes used with\n+     -mlong64.  */\n+  if (mips_abi == ABI_EABI || mips_abi == ABI_O64)\n+    fprintf (asm_out_file, \"\\t.section .gcc_compiled_long%d\\n\"\n+\t     \"\\t.previous\\n\", TARGET_LONG64 ? 64 : 32);\n \n #ifdef HAVE_AS_GNU_ATTRIBUTE\n-      {\n-\tint attr;\n-\n-\t/* No floating-point operations, -mno-float.  */\n-\tif (TARGET_NO_FLOAT)\n-\t  attr = 0;\n-\t/* Soft-float code, -msoft-float.  */\n-\telse if (!TARGET_HARD_FLOAT_ABI)\n-\t  attr = 3;\n-\t/* Single-float code, -msingle-float.  */\n-\telse if (!TARGET_DOUBLE_FLOAT)\n-\t  attr = 2;\n-\t/* 64-bit FP registers on a 32-bit target, -mips32r2 -mfp64.  */\n-\telse if (!TARGET_64BIT && TARGET_FLOAT64)\n-\t  attr = 4;\n-\t/* Regular FP code, FP regs same size as GP regs, -mdouble-float.  */\n-\telse\n-\t  attr = 1;\n-\n-\tfprintf (asm_out_file, \"\\t.gnu_attribute 4, %d\\n\", attr);\n-      }\n+  {\n+    int attr;\n+\n+    /* No floating-point operations, -mno-float.  */\n+    if (TARGET_NO_FLOAT)\n+      attr = 0;\n+    /* Soft-float code, -msoft-float.  */\n+    else if (!TARGET_HARD_FLOAT_ABI)\n+      attr = 3;\n+    /* Single-float code, -msingle-float.  */\n+    else if (!TARGET_DOUBLE_FLOAT)\n+      attr = 2;\n+    /* 64-bit FP registers on a 32-bit target, -mips32r2 -mfp64.  */\n+    else if (!TARGET_64BIT && TARGET_FLOAT64)\n+      attr = 4;\n+    /* Regular FP code, FP regs same size as GP regs, -mdouble-float.  */\n+    else\n+      attr = 1;\n+\n+    fprintf (asm_out_file, \"\\t.gnu_attribute 4, %d\\n\", attr);\n+  }\n #endif\n-    }\n \n   /* If TARGET_ABICALLS, tell GAS to generate -KPIC code.  */\n   if (TARGET_ABICALLS)\n@@ -15982,10 +15976,6 @@ mips_option_override (void)\n \t}\n     }\n \n-#ifdef MIPS_TFMODE_FORMAT\n-  REAL_MODE_FORMAT (TFmode) = &MIPS_TFMODE_FORMAT;\n-#endif\n-\n   /* Make sure that the user didn't turn off paired single support when\n      MIPS-3D support is requested.  */\n   if (TARGET_MIPS3D"}, {"sha": "3f284a863cf6a3b2d9cd29c637d548ec0e7fdbdf", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 16, "deletions": 30, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -158,15 +158,9 @@ struct mips_cpu_info {\n    This is true for both the PIC and non-PIC VxWorks RTP modes.  */\n #define TARGET_USE_PIC_FN_ADDR_REG (TARGET_ABICALLS || TARGET_VXWORKS_RTP)\n \n-/* True if .gpword or .gpdword should be used for switch tables.\n-\n-   Although GAS does understand .gpdword, the SGI linker mishandles\n-   the relocations GAS generates (R_MIPS_GPREL32 followed by R_MIPS_64).\n-   We therefore disable GP-relative switch tables for n64 on IRIX targets.  */\n+/* True if .gpword or .gpdword should be used for switch tables.  */\n #define TARGET_GPWORD\t\t\t\t\\\n-  (TARGET_ABICALLS\t\t\t\t\\\n-   && !TARGET_ABSOLUTE_ABICALLS\t\t\t\\\n-   && !(mips_abi == ABI_64 && TARGET_IRIX6))\n+  (TARGET_ABICALLS && !TARGET_ABSOLUTE_ABICALLS)\n \n /* True if the output must have a writable .eh_frame.\n    See ASM_PREFERRED_EH_DATA_FORMAT for details.  */\n@@ -319,9 +313,6 @@ struct mips_cpu_info {\n    those loads and stores follow it.  */\n #define TARGET_SYNC_AFTER_SC (!TARGET_OCTEON)\n \n-/* IRIX specific stuff.  */\n-#define TARGET_IRIX6\t   0\n-\n /* Define preprocessor macros for the -march and -mtune options.\n    PREFIX is either _MIPS_ARCH or _MIPS_TUNE, INFO is the selected\n    processor.  If INFO's canonical name is \"foo\", define PREFIX to\n@@ -348,10 +339,7 @@ struct mips_cpu_info {\n #define TARGET_CPU_CPP_BUILTINS()\t\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      /* Everyone but IRIX defines this to mips.  */            \t\\\n-      if (!TARGET_IRIX6)                                         \t\\\n-\tbuiltin_assert (\"machine=mips\");                        \t\\\n-\t\t\t\t\t\t\t\t\t\\\n+      builtin_assert (\"machine=mips\");                        \t\t\\\n       builtin_assert (\"cpu=mips\");\t\t\t\t\t\\\n       builtin_define (\"__mips__\");     \t\t\t\t\t\\\n       builtin_define (\"_mips\");\t\t\t\t\t\t\\\n@@ -369,22 +357,20 @@ struct mips_cpu_info {\n       if (TARGET_64BIT)\t\t\t\t\t\t\t\\\n \tbuiltin_define (\"__mips64\");\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      if (!TARGET_IRIX6)\t\t\t\t\t\t\\\n+      /* Treat _R3000 and _R4000 like register-size\t\t\t\\\n+\t defines, which is how they've historically\t\t\t\\\n+\t been used.  */\t\t\t\t\t\t\t\\\n+      if (TARGET_64BIT)\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  /* Treat _R3000 and _R4000 like register-size\t\t\t\\\n-\t     defines, which is how they've historically\t\t\t\\\n-\t     been used.  */\t\t\t\t\t\t\\\n-\t  if (TARGET_64BIT)\t\t\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\t\\\n-\t      builtin_define_std (\"R4000\");\t\t\t\t\\\n-\t      builtin_define (\"_R4000\");\t\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\t\\\n-\t  else\t\t\t\t\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\t\\\n-\t      builtin_define_std (\"R3000\");\t\t\t\t\\\n-\t      builtin_define (\"_R3000\");\t\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\t\\\n+\t  builtin_define_std (\"R4000\");\t\t\t\t\t\\\n+\t  builtin_define (\"_R4000\");\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  builtin_define_std (\"R3000\");\t\t\t\t\t\\\n+\t  builtin_define (\"_R3000\");\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n       if (TARGET_FLOAT64)\t\t\t\t\t\t\\\n \tbuiltin_define (\"__mips_fpr=64\");\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n@@ -548,7 +534,7 @@ struct mips_cpu_info {\n \t{\t\t\t\t\t\t\t\t\\\n \t  builtin_define (\"_LANGUAGE_OBJECTIVE_C\");\t\t\t\\\n \t  builtin_define (\"__LANGUAGE_OBJECTIVE_C\");\t\t\t\\\n-\t  /* Bizarre, but needed at least for Irix.  */\t\t\t\\\n+\t  /* Bizarre, but retained for backwards compatibility.  */\t\\\n \t  builtin_define_std (\"LANGUAGE_C\");\t\t\t\t\\\n \t  builtin_define (\"_LANGUAGE_C\");\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\"}, {"sha": "ad34e559b9a14ab80f9e8021f6c5aa4e6734ff89", "filename": "gcc/configure", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -7131,16 +7131,7 @@ else\n       ;;\n \n     mips*-*-*)\n-      case $host in\n-\tmips*-sgi-irix*)\n-\t  { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: fixed-point is not supported on IRIX, ignored\" >&5\n-$as_echo \"$as_me: WARNING: fixed-point is not supported on IRIX, ignored\" >&2;}\n-\t  enable_fixed_point=no\n-\t  ;;\n-\t*)\n-\t  enable_fixed_point=yes\n-\t  ;;\n-      esac\n+      enable_fixed_point=yes\n       ;;\n     *)\n       { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: fixed-point is not supported for this target, ignored\" >&5\n@@ -17969,7 +17960,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17972 \"configure\"\n+#line 17963 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18075,7 +18066,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18078 \"configure\"\n+#line 18069 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -23620,11 +23611,6 @@ if test $gcc_cv_as_tls = yes; then\n fi\n fi\n case \"$target\" in\n-  *-*-irix6*)\n-    # IRIX 6.5 rld and libc.so lack TLS support, so even if gas and gld\n-    # with TLS support are in use, native TLS cannot work.\n-    set_have_as_tls=no\n-    ;;\n   # TLS was introduced in the Solaris 9 FCS release and backported to\n   # Solaris 8 patches.  Support for GNU-style TLS on x86 was only\n   # introduced in Solaris 9 4/04, replacing the earlier Sun style that Sun\n@@ -23820,10 +23806,6 @@ elif test x$gcc_cv_ld != x; then\n \t  gcc_cv_ld_dynamic_option=\"-adefault\"\n \tfi\n \t;;\n-      # IRIX 6 ld supports -Bstatic/-Bdynamic.\n-      mips-sgi-irix6*)\n-        gcc_cv_ld_static_dynamic=yes\n-        ;;\n       # Solaris 2 ld always supports -Bstatic/-Bdynamic.\n       *-*-solaris2*)\n         gcc_cv_ld_static_dynamic=yes"}, {"sha": "c3d203a0d6950d210c687255f66a6d2b8a8d793c", "filename": "gcc/configure.ac", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -661,15 +661,7 @@ AC_ARG_ENABLE(fixed-point,\n       ;;\n \n     mips*-*-*)\n-      case $host in\n-\tmips*-sgi-irix*)\n-\t  AC_MSG_WARN([fixed-point is not supported on IRIX, ignored])\n-\t  enable_fixed_point=no\n-\t  ;;\n-\t*)\n-\t  enable_fixed_point=yes\n-\t  ;;\n-      esac\n+      enable_fixed_point=yes\n       ;;\n     *)\n       AC_MSG_WARN([fixed-point is not supported for this target, ignored])\n@@ -3178,11 +3170,6 @@ else\n   [set_have_as_tls=yes])\n fi\n case \"$target\" in\n-  *-*-irix6*)\n-    # IRIX 6.5 rld and libc.so lack TLS support, so even if gas and gld\n-    # with TLS support are in use, native TLS cannot work.\n-    set_have_as_tls=no\n-    ;;\n   # TLS was introduced in the Solaris 9 FCS release and backported to\n   # Solaris 8 patches.  Support for GNU-style TLS on x86 was only\n   # introduced in Solaris 9 4/04, replacing the earlier Sun style that Sun\n@@ -3305,10 +3292,6 @@ elif test x$gcc_cv_ld != x; then\n \t  gcc_cv_ld_dynamic_option=\"-adefault\"\n \tfi\n \t;;\n-      # IRIX 6 ld supports -Bstatic/-Bdynamic.\n-      mips-sgi-irix6*)\n-        gcc_cv_ld_static_dynamic=yes\n-        ;;\n       # Solaris 2 ld always supports -Bstatic/-Bdynamic.\n       *-*-solaris2*)\n         gcc_cv_ld_static_dynamic=yes"}, {"sha": "4c99decd755b48569d048eb8ed300a1ad04a6b77", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,3 +1,7 @@\n+2012-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* Make-lang.in (doc/g++.1): Remove IRIX 6.5 reference.\n+\n 2012-03-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/52521"}, {"sha": "c32c87eb65af192c76b94681d2e495bb534ee273", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,6 +1,6 @@\n # Top level -*- makefile -*- fragment for GNU C++.\n #   Copyright (C) 1994, 1995, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-#   2005, 2007, 2008, 2009, 2010, 2011\n+#   2005, 2007, 2008, 2009, 2010, 2011, 2012\n #   Free Software Foundation, Inc.\n \n #This file is part of GCC.\n@@ -196,8 +196,8 @@ c++.install-common: installdirs\n \t  fi ; \\\n \tfi\n \n-# We can't use links because not everyone supports them, and we can't use\n-# .so because Irix 6.5 doesn't support them.  So just copy the manpage.\n+# We can't use links because not everyone supports them.  So just copy the\n+# manpage.\n doc/g++.1: doc/gcc.1\n \tcp $< doc/g++.1\n "}, {"sha": "1780dda3aee0eb84716167f4926cec01fd9e3a52", "filename": "gcc/defaults.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of various defaults for tm.h macros.\n    Copyright (C) 1992, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2005, 2007, 2008, 2009, 2010, 2011\n+   2005, 2007, 2008, 2009, 2010, 2011, 2012\n    Free Software Foundation, Inc.\n    Contributed by Ron Guilmette (rfg@monkeys.com)\n \n@@ -350,13 +350,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define SUPPORTS_INIT_PRIORITY 1\n #endif /* SUPPORTS_INIT_PRIORITY */\n \n-/* If duplicate library search directories can be removed from a\n-   linker command without changing the linker's semantics, give this\n-   symbol a nonzero.  */\n-#ifndef LINK_ELIMINATE_DUPLICATE_LDIRECTORIES\n-#define LINK_ELIMINATE_DUPLICATE_LDIRECTORIES 0\n-#endif /* LINK_ELIMINATE_DUPLICATE_LDIRECTORIES */\n-\n /* If we have a definition of INCOMING_RETURN_ADDR_RTX, assume that\n    the rest of the DWARF 2 frame unwind support is also provided.  */\n #if !defined (DWARF2_UNWIND_INFO) && defined (INCOMING_RETURN_ADDR_RTX)"}, {"sha": "96ae614f0d3a2ccc9f5761549d2cc731517f4c6c", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 3, "deletions": 104, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -2925,16 +2925,6 @@ Solaris 2 (SPARC, Intel):\n @uref{http://jupiterrise.com/tgcware/,,TGCware}\n @end itemize\n \n-@item\n-SGI IRIX:\n-@itemize\n-@item\n-@uref{http://nekochan.net/,,Nekoware}\n-\n-@item\n-@uref{http://jupiterrise.com/tgcware/,,TGCware}\n-@end itemize\n-\n @item\n Microsoft Windows:\n @itemize\n@@ -2948,7 +2938,6 @@ The @uref{http://www.mingw.org/,,MinGW} project.\n @uref{ftp://ftp.thewrittenword.com/packages/by-name/,,The\n Written Word} offers binaries for\n AIX 4.3.3, 5.1 and 5.2,\n-IRIX 6.5,\n GNU/Linux (i386),\n HP-UX 10.20, 11.00, and 11.11, and\n Solaris/SPARC 2.5.1, 2.6, 7, 8, 9 and 10.\n@@ -3944,99 +3933,9 @@ Support for IRIX 5 has been removed in GCC 4.6.\n @end html\n @heading @anchor{mips-sgi-irix6}mips-sgi-irix6\n \n-Support for IRIX 6.5 has been obsoleted in GCC 4.7, but can still be\n-enabled by configuring with @option{--enable-obsolete}.  Support will be\n-removed in GCC 4.8.  Support for IRIX 6 releases before 6.5 has been\n-removed in GCC 4.6, as well as support for the O32 ABI.  It is\n-@emph{strongly} recommended to upgrade to at least IRIX 6.5.18.  This\n-release introduced full ISO C99 support, though for the N32 and N64 ABIs\n-only.\n-\n-To build and use GCC on IRIX 6.5, you need the IRIX Development Foundation\n-(IDF) and IRIX Development Libraries (IDL).  They are included with the\n-IRIX 6.5 media.\n-\n-If you are using SGI's MIPSpro @command{cc} as your bootstrap compiler, you must\n-ensure that the N32 ABI is in use.  To test this, compile a simple C\n-file with @command{cc} and then run @command{file} on the\n-resulting object file.  The output should look like:\n-\n-@smallexample\n-test.o: ELF N32 MSB @dots{}\n-@end smallexample\n-\n-@noindent\n-If you see:\n-\n-@smallexample\n-test.o: ELF 32-bit MSB @dots{}\n-@end smallexample\n-\n-@noindent\n-or\n-\n-@smallexample\n-test.o: ELF 64-bit MSB @dots{}\n-@end smallexample\n-\n-@noindent\n-then your version of @command{cc} uses the O32 or N64 ABI by default.  You\n-should set the environment variable @env{CC} to @samp{cc -n32}\n-before configuring GCC@.\n-\n-If you want the resulting @command{gcc} to run on old 32-bit systems\n-with the MIPS R4400 CPU, you need to ensure that only code for the @samp{mips3}\n-instruction set architecture (ISA) is generated.  While GCC 3.x does\n-this correctly, both GCC 2.95 and SGI's MIPSpro @command{cc} may change\n-the ISA depending on the machine where GCC is built.  Using one of them\n-as the bootstrap compiler may result in @samp{mips4} code, which won't run at\n-all on @samp{mips3}-only systems.  For the test program above, you should see:\n-\n-@smallexample\n-test.o: ELF N32 MSB mips-3 @dots{}\n-@end smallexample\n-\n-@noindent\n-If you get:\n-\n-@smallexample\n-test.o: ELF N32 MSB mips-4 @dots{}\n-@end smallexample\n-\n-@noindent\n-instead, you should set the environment variable @env{CC} to @samp{cc\n--n32 -mips3} or @samp{gcc -mips3} respectively before configuring GCC@.\n-\n-MIPSpro C 7.4 may cause bootstrap failures, due to a bug when inlining\n-@code{memcmp}.  Either add @code{-U__INLINE_INTRINSICS} to the @env{CC}\n-environment variable as a workaround or upgrade to MIPSpro C 7.4.1m.\n-\n-GCC on IRIX 6.5 is usually built to support the N32 and N64 ABIs.  If\n-you build GCC on a system that doesn't have the N64 libraries installed\n-or cannot run 64-bit binaries,\n-you need to configure with @option{--disable-multilib} so GCC doesn't\n-try to use them.\n-Look for @file{/usr/lib64/libc.so.1} to see if you\n-have the 64-bit libraries installed.\n-\n-GCC must be configured with GNU @command{as}.  The latest version, from GNU\n-binutils 2.21, is known to work.  On the other hand, bootstrap fails\n-with GNU @command{ld} at least since GNU binutils 2.17.\n-\n-The @option{--enable-libgcj}\n-option is disabled by default: IRIX 6 uses a very low default limit\n-(20480) for the command line length.  Although @command{libtool} contains a\n-workaround for this problem, at least the N64 @samp{libgcj} is known not\n-to build despite this, running into an internal error of the native\n-@command{ld}.  A sure fix is to increase this limit (@samp{ncargs}) to\n-its maximum of 262144 bytes.  If you have root access, you can use the\n-@command{systune} command to do this.\n-@c FIXME: does this work with current libtool?\n-\n-@code{wchar_t} support in @samp{libstdc++} is not available for old\n-IRIX 6.5.x releases, @math{x < 19}.  The problem cannot be autodetected\n-and in order to build GCC for such targets you need to configure with\n-@option{--disable-wchar_t}.\n+Support for IRIX 6.5 has been removed in GCC 4.8.  Support for IRIX 6\n+releases before 6.5 has been removed in GCC 4.6, as well as support for\n+the O32 ABI.\n \n @html\n <hr />"}, {"sha": "4239482da298b0187845700331bbe0f3e1a8e4e1", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -4778,9 +4778,8 @@ assembler (GAS) to fail with an error.\n \n @item -gdwarf-@var{version}\n @opindex gdwarf-@var{version}\n-Produce debugging information in DWARF format (if that is\n-supported).  This is the format used by DBX on IRIX 6.  The value\n-of @var{version} may be either 2, 3 or 4; the default version is 2.\n+Produce debugging information in DWARF format (if that is supported).\n+The value of @var{version} may be either 2, 3 or 4; the default version is 2.\n \n Note that with DWARF Version 2 some ports require, and will always\n use, some non-conflicting DWARF 3 extensions in the unwind tables.\n@@ -15260,7 +15259,7 @@ The special value @samp{from-abi} selects the\n most compatible architecture for the selected ABI (that is,\n @samp{mips1} for 32-bit ABIs and @samp{mips3} for 64-bit ABIs)@.\n \n-Native Linux/GNU and IRIX toolchains also support the value @samp{native},\n+The native Linux/GNU toolchain also supports the value @samp{native},\n which selects the best architecture option for the host processor.\n @option{-march=native} has no effect if GCC does not recognize\n the processor."}, {"sha": "69f8aba39db29ff337ac27f331380d918e7b4a8f", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -387,12 +387,6 @@ the effect you need.  Overriding this macro may be avoidable by overriding\n @code{LINK_GCC_C_SEQUENCE_SPEC} instead.\n @end defmac\n \n-@defmac LINK_ELIMINATE_DUPLICATE_LDIRECTORIES\n-A nonzero value causes @command{collect2} to remove duplicate @option{-L@var{directory}} search\n-directories from linking commands.  Do not give it a nonzero value if\n-removing duplicate search directories changes the linker's semantics.\n-@end defmac\n-\n @deftypevr {Common Target Hook} bool TARGET_ALWAYS_STRIP_DOTDOT\n True if @file{..} components should always be removed from directory names computed relative to GCC's internal directories, false (default) if such components should be preserved and directory names containing them passed to other tools such as the linker.\n @end deftypevr"}, {"sha": "c24cf1eb1be398b3b9584c9087cf66bda35911c6", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -387,12 +387,6 @@ the effect you need.  Overriding this macro may be avoidable by overriding\n @code{LINK_GCC_C_SEQUENCE_SPEC} instead.\n @end defmac\n \n-@defmac LINK_ELIMINATE_DUPLICATE_LDIRECTORIES\n-A nonzero value causes @command{collect2} to remove duplicate @option{-L@var{directory}} search\n-directories from linking commands.  Do not give it a nonzero value if\n-removing duplicate search directories changes the linker's semantics.\n-@end defmac\n-\n @hook TARGET_ALWAYS_STRIP_DOTDOT\n \n @defmac MULTILIB_DEFAULTS"}, {"sha": "28bef4c35429c12a4c8ac20c98140f826de67df5", "filename": "gcc/doc/trouble.texi", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fdoc%2Ftrouble.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fdoc%2Ftrouble.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftrouble.texi?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -74,12 +74,6 @@ On some BSD systems, including some versions of Ultrix, use of profiling\n causes static variable destructors (currently used only in C++) not to\n be run.\n \n-@item\n-On some SGI systems, when you use @option{-lgl_s} as an option,\n-it gets translated magically to @samp{-lgl_s -lX11_s -lc_s}.\n-Naturally, this does not happen when you use GCC@.\n-You must specify all three options explicitly.\n-\n @item\n On a SPARC, GCC aligns all values of type @code{double} on an 8-byte\n boundary, and it expects every @code{double} to be so aligned.  The Sun"}, {"sha": "09f9b1548b8bbb819c046131cdfb7880fe6e0a75", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -703,7 +703,7 @@ proper position among the other output files.  */\n # define SYSROOT_HEADERS_SUFFIX_SPEC \"\"\n #endif\n \n-static const char *asm_debug;\n+static const char *asm_debug = ASM_DEBUG_SPEC;\n static const char *cpp_spec = CPP_SPEC;\n static const char *cc1_spec = CC1_SPEC;\n static const char *cc1plus_spec = CC1PLUS_SPEC;\n@@ -6118,10 +6118,6 @@ main (int argc, char **argv)\n   struct cl_decoded_option *decoded_options;\n   unsigned int decoded_options_count;\n \n-  /* Initialize here, not in definition.  The IRIX 6 O32 cc sometimes chokes\n-     on ?: in file-scope variable initializations.  */\n-  asm_debug = ASM_DEBUG_SPEC;\n-\n   p = argv[0] + strlen (argv[0]);\n   while (p != argv[0] && !IS_DIR_SEPARATOR (p[-1]))\n     --p;"}, {"sha": "fc8cfa674f0d9225cc11584d0c8def3414baf6ea", "filename": "gcc/ginclude/stddef.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fginclude%2Fstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fginclude%2Fstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstddef.h?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1989, 1997, 1998, 1999, 2000, 2002, 2004, 2009, 2011\n+/* Copyright (C) 1989, 1997, 1998, 1999, 2000, 2002, 2004, 2009, 2011, 2012\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -41,8 +41,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define _STDDEF_H_\n /* snaroff@next.com says the NeXT needs this.  */\n #define _ANSI_STDDEF_H\n-/* Irix 5.1 needs this.  */\n-#define __STDDEF_H__\n #endif\n \n #ifndef __sys_stdtypes_h"}, {"sha": "a3bb4f5f3bde6fb38b18306f3807555775955ea1", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -878,7 +878,8 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tMACHINE_TYPE TARGET_HAS_TARGETCM ASM_OUTPUT_BSS\t\t\t   \\\n \tSETJMP_VIA_SAVE_AREA FORBIDDEN_INC_DEC_CLASSES\t\t\t   \\\n \tPREFERRED_OUTPUT_RELOAD_CLASS SYSTEM_INCLUDE_DIR\t\t   \\\n-\tSTANDARD_INCLUDE_DIR STANDARD_INCLUDE_COMPONENT\n+\tSTANDARD_INCLUDE_DIR STANDARD_INCLUDE_COMPONENT \\\n+\tLINK_ELIMINATE_DUPLICATE_LDIRECTORIES\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}, {"sha": "c310aef01efacea4b0472da7c57a3e78e88d21b7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,3 +1,50 @@\n+2012-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* g++.dg/other/anon5.C: Don't skip on mips-sgi-irix*.\n+\t* g++.dg/tree-prof/partition1.C: Likewise.\n+\t* g++.dg/tree-prof/partition2.C: Likewise.\n+\t* g++.old-deja/g++.other/init19.C: Remove mips-sgi-irix*\n+\thandling.\n+\t* gcc.c-torture/compile/labels-3.c: Remove dg-options.\n+\t* gcc.c-torture/execute/20010724-1.c: Remove.\n+\t* gcc.c-torture/execute/20010724-1.x: Remove.\n+\t* gcc.c-torture/execute/20040208-2.c: Remove.\n+\t* gcc.c-torture/execute/20040208-2.x: Remove.\n+\t* gcc.c-torture/execute/ieee/20000320-1.c [__mips__ && __sgi__]:\n+\tRemove.\n+\t(main) [__mips__ && __sgi__]: Remove.\n+\t* gcc.c-torture/execute/ieee/copysign1.c: Remove IRIX reference.\n+\t* gcc.c-torture/execute/ieee/copysign2.c: Likewise.\n+\t* gcc.c-torture/execute/ieee/mul-subnormal-single-1.x: Remove\n+\tmips-sgi-irix6* handling.\n+\t* gcc.dg/cpp/assert4.c [__mips__]: Remove __sgi__, sgi.\n+\t* gcc.dg/torture/20090618-1.c: Don't skip on mips-sgi-irix*.\n+\t* gcc.dg/torture/builtin-frexp-1.c: Remove mips*-*-irix6*\n+\thandling.\n+\t* gcc.dg/torture/builtin-logb-1.c: Likewise.\n+\t* gcc.dg/torture/pr47917.c: Remove mips-sgi-irix6.5 handling.\n+\t* gcc.dg/tree-ssa/ssa-store-ccp-3.c: Don't skip on mips*-*-irix*.\n+\t* gcc.misc-tests/linkage.exp: Remove mips-sgi-irix6* handling.\n+\t* gcc.target/mips/args-1.c [!__sgi__]: Remove.\n+\t* gcc.target/mips/interrupt_handler-2.c: Don't skip on\n+\tmips-sgi-irix6*.\n+\t* gcc.target/mips/interrupt_handler-3.c: Likewise.\n+\t* gcc.target/mips/save-restore-1.c: Don't skip on mips-sgi-irix6*.\n+\t* gcc.target/mips/save-restore-3.c: Likewise.\n+\t* gcc.target/mips/save-restore-4.c: Likewise.\n+\t* gcc.target/mips/save-restore-5.c: Likewise.\n+\t* gfortran.dg/g77/cabs.f: Don't xfail on mips-sgi-irix6*.\n+\t* lib/prune.exp (prune_gcc_output): Remove pruning of IRIX 6 ld\n+\tmessages.\n+\t* lib/target-libpath.exp (set_ld_library_path_env_vars): Remove\n+\tIRIX 6 handling.\n+\t(restore_ld_library_path_env_vars): Likewise.\n+\t* lib/target-supports.exp (check_profiling_available): Remove\n+\tmips*-*-irix* handling.\n+\t(check_ascii_locale_available): Remove mips-sgi-irix* handling.\n+\t(add_options_for_c99_runtime): Remove mips-sgi-irix6.5* handling.\n+\t* objc.dg/stabs-1.m: Don't xfail on mips-sgi-irix6.5.\n+\n 2012-03-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/52582"}, {"sha": "12f0900f5f7ee462cbbe78f80a9d3d7a2ccb8a78", "filename": "gcc/testsuite/g++.dg/other/anon5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fanon5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fanon5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fanon5.C?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n // PR c++/34094\n-// { dg-do link { target { ! { *-*-darwin* *-*-hpux* *-*-solaris2.* mips-sgi-irix* } } } }\n+// { dg-do link { target { ! { *-*-darwin* *-*-hpux* *-*-solaris2.* } } } }\n // { dg-options \"-g\" }\n \n namespace {"}, {"sha": "d0dcbc4524b9e4c46c241b9a900f313f4fa3bfc6", "filename": "gcc/testsuite/g++.dg/tree-prof/partition1.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Fpartition1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Fpartition1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Fpartition1.C?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,6 +1,5 @@\n /* { dg-require-effective-target freorder } */\n /* { dg-options \"-O2 -freorder-blocks-and-partition\" } */\n-/* { dg-skip-if \"PR target/47683\" { mips-sgi-irix* } } */\n \n struct A { A () __attribute__((noinline)); ~A () __attribute__((noinline)); };\n A::A () { asm volatile (\"\" : : : \"memory\"); }"}, {"sha": "ca5671f3ffaccee68ed3445481d4b1c027ed3c7b", "filename": "gcc/testsuite/g++.dg/tree-prof/partition2.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Fpartition2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Fpartition2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Fpartition2.C?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,7 +1,6 @@\n // PR middle-end/45458\n // { dg-require-effective-target freorder }\n // { dg-options \"-fnon-call-exceptions -freorder-blocks-and-partition\" }\n-// { dg-skip-if \"PR target/47683\" { mips-sgi-irix* } }\n \n int\n main ()"}, {"sha": "1c686841243d962a46d7df5ec46effe650603f99", "filename": "gcc/testsuite/g++.old-deja/g++.other/init19.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finit19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finit19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finit19.C?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { xfail { { ! cxa_atexit } && { ! { mips-sgi-irix* *-*-solaris2* } } } } }\n+// { dg-do run { xfail { { ! cxa_atexit } && { ! *-*-solaris2* } } } }\n #include <stdlib.h>\n \n #define assert(x) do { if (! (x)) abort(); } while (0)"}, {"sha": "51ac88380b828a49da54237cd5d6636758072e8c", "filename": "gcc/testsuite/gcc.c-torture/compile/labels-3.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flabels-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flabels-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flabels-3.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,9 +1,3 @@\n-/* This test does not compile on mips-irix6 using the native assembler,\n-   though it does work with gas.  See PR6200.  Since we cannot (???)\n-   distinguish which assembler is being used, always pass -S for\n-   irix.  */\n-/* { dg-options \"-w -S\" { target mips*-*-irix* } } */\n-\n /* Verify that we can narrow the storage associated with label diffs.  */\n \n int foo (int a)"}, {"sha": "8ff7d0f44a0ed7c0a2fcc68ed2ee2fde3bc218bf", "filename": "gcc/testsuite/gcc.c-torture/execute/20010724-1.c", "status": "removed", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010724-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010724-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010724-1.c?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,59 +0,0 @@\n-/* Verify that the workarounds in config/mips/irix6-libc-compat.c are still\n-   needed.  */\n-\n-/* IRIX 6, unlike other Unix systems, defines union semun in <sys/sem.h>.\n-   Inhibit this definition to be able to run this test on other platforms.  */\n-#define _XOPEN_SOURCE\n-\n-#include <sys/types.h>\n-#include <netinet/in.h>\n-#include <arpa/inet.h>\n-#include <sys/ipc.h>\n-#include <sys/sem.h>\n-\n-union semun {\n-  int val;\n-  struct semid_ds *buf;\n-  ushort_t *array;\n-};\n-\n-int\n-main (void)\n-{\n-  struct in_addr ia;\n-  int semid;\n-  union semun su;\n-\n-  ia.s_addr = INADDR_BROADCAST;\n-\n-  if (strcmp (inet_ntoa (ia), \"255.255.255.255\") != 0)\n-    abort ();\n-\n-  ia.s_addr = INADDR_LOOPBACK;\n-\n-  if (inet_lnaof (ia) != 1)\n-    abort ();\n-\n-  if (inet_netof (ia) != IN_LOOPBACKNET)\n-    abort ();\n-\n-  ia = inet_makeaddr (IN_LOOPBACKNET, 1);\n-  if (ia.s_addr != INADDR_LOOPBACK)\n-    abort ();\n-\n-  if ((semid = semget (IPC_PRIVATE, 1, IPC_CREAT | IPC_EXCL | SEM_R | SEM_A)) < 0)\n-    abort ();\n-\n-  su.val = 10;\n-\n-  if (semctl (semid, 0, SETVAL, su) != 0)\n-    abort ();\n-\n-  if (semctl (semid, 0, GETVAL) != 10)\n-    abort ();\n-\n-  if (semctl (semid, 0, IPC_RMID) != 0)\n-    abort ();\n-\n-  return 0;\n-}"}, {"sha": "2f2f05634c48e36838de2119d2101ad4108daa65", "filename": "gcc/testsuite/gcc.c-torture/execute/20010724-1.x", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010724-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010724-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010724-1.x?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,3 +0,0 @@\n-# This test is only needed on IRIX 6\n-if { ! [istarget \"mips*-sgi-irix6*\"] } { return 1 }\n-return 0"}, {"sha": "d8a5afc946237e509f741f5b38f4696d08ff07a2", "filename": "gcc/testsuite/gcc.c-torture/execute/20040208-2.c", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040208-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040208-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040208-2.c?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,11 +0,0 @@\n-int main ()\n-{\n-  long double x, y;\n-\n-  x = 0x1.fffffffffffff8p1022L;\n-  x *= 2;\n-  y = 0x1.fffffffffffff8p1023L;\n-  if (memcmp (&x, &y, sizeof (x)) != 0)\n-    abort ();\n-  exit (0);\n-}"}, {"sha": "6c7d3d5500363f9ddee7a651db9ff9745e2b0d0e", "filename": "gcc/testsuite/gcc.c-torture/execute/20040208-2.x", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040208-2.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040208-2.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040208-2.x?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1 +0,0 @@\n-return [expr ![istarget mips*-*-irix6*]]"}, {"sha": "d750e1f37dbeac436c76407d25c9bb33ebab0b75", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/20000320-1.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2F20000320-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2F20000320-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2F20000320-1.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,6 +1,3 @@\n-#if defined(__mips__) && defined(__sgi__)\n-#include <sys/fpu.h>\n-#endif /* defined(__mips__) && defined(__sgi__) */\n #if __INT_MAX__ != 2147483647 || (__LONG_LONG_MAX__ != 9223372036854775807ll && __LONG_MAX__ != 9223372036854775807ll)\n int main(void) { exit (0); }\n #else\n@@ -34,15 +31,6 @@ void c(ull d, ul f)\n \n int main()\n {\n-#if defined(__mips__) && defined(__sgi__)\n-  /* Many MIPS chips round denormalized floating point numbers to zero\n-     rather than follow the IEEE standard.  Change the rounding mode\n-     to correspond to the IEEE rounding mode that rounds numbers to\n-     the nearest representable mode, the most common IEEE rounding\n-     mode.  */\n-  set_fpc_csr(0);\n-#endif /* defined(__mips__) && defined(__sgi__) */\n-\n   if (sizeof (float) != sizeof (ul)\n       || sizeof (double) != sizeof (ull))\n     exit (0);"}, {"sha": "034645a119273d3a4b206da85016b41859b73b6e", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/copysign1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fcopysign1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fcopysign1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fcopysign1.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -24,7 +24,7 @@\n    builds constants; the later is what we'll get from the negation operator\n    at runtime.  */\n /* ??? This hack only works for big-endian, which is fortunately true for\n-   all of AIX, Darwin, and Irix.  */\n+   AIX and, Darwin.  */\n #if LDBL_MANT_DIG == 106\n # undef fpsizeofl\n # define fpsizeofl\tsizeof(double)"}, {"sha": "8e176661e1db47f2d8b54e266aaf16eede9c0c33", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/copysign2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fcopysign2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fcopysign2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fcopysign2.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -24,7 +24,7 @@\n    builds constants; the later is what we'll get from the negation operator\n    at runtime.  */\n /* ??? This hack only works for big-endian, which is fortunately true for\n-   all of AIX, Darwin, and Irix.  */\n+   AIX and Darwin.  */\n #if LDBL_MANT_DIG == 106\n # undef fpsizeofl\n # define fpsizeofl\tsizeof(double)"}, {"sha": "16df951613053ec00cb73744584217525cdff8b0", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/mul-subnormal-single-1.x", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fmul-subnormal-single-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fmul-subnormal-single-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fmul-subnormal-single-1.x?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -3,11 +3,6 @@ if [istarget \"epiphany-*-*\"] {\n     # support subnormals.\n     return 1\n }\n-if [istarget \"mips-sgi-irix6*\"] {\n-    # IRIX 6 sets the MIPS IV flush to zero bit by default, so this test\n-    # isn't expected to work for n32 and n64 on MIPS IV targets.\n-    return 1\n-}\n if {[istarget \"m68k-*-*\"] && [check_effective_target_coldfire_fpu]} {\n     # ColdFire FPUs require software handling of subnormals.  We are\n     # not aware of any system that has this."}, {"sha": "92e3dba5ce6ca58105aee20e7f220d32cdb90bcc", "filename": "gcc/testsuite/gcc.dg/cpp/assert4.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert4.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,4 +1,6 @@\n-/* Copyright (C) 2003, 2006, 2008, 2009, 2011 Free Software Foundation, Inc.\n+/* Copyright (C) 2003, 2006, 2008, 2009, 2011, 2012\n+   Free Software Foundation, Inc.\n+\n    Test builtin preprocessor assertions.\n    By Kaveh Ghazi <ghazi@caip.rutgers.edu>.  */\n \n@@ -273,11 +275,10 @@\n #endif\n \n #if defined __mips__\n-# if !#cpu(mips) || (defined __sgi__ && !#machine(sgi)) \\\n-  || (!defined __sgi__ && !#machine(mips))\n+# if !#cpu(mips)\n #  error\n # endif\n-#elif #cpu(mips) || #machine(sgi) || #machine(mips)\n+#elif #cpu(mips) || #machine(mips)\n # error\n #endif\n "}, {"sha": "8b601d62c79d2ccbf815077405e5b5bb43b494b8", "filename": "gcc/testsuite/gcc.dg/torture/20090618-1.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2F20090618-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2F20090618-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2F20090618-1.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,6 +1,5 @@\n /* { dg-do run } */\n /* { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n-/* { dg-skip-if \"PR middle-end/47405\" { mips-sgi-irix* } } */\n \n extern void abort (void);\n "}, {"sha": "a66ce51fcc3a62fa279469e60148a4263c34aa7c", "filename": "gcc/testsuite/gcc.dg/torture/builtin-frexp-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-frexp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-frexp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-frexp-1.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -9,7 +9,7 @@\n /* { dg-options \"-fno-finite-math-only\" { target sh*-*-* } } */\n /* In order to fold algebraic exprs below, targets with \"composite\"\n    floating point formats need -funsafe-math-optimizations.  */\n-/* { dg-options \"-funsafe-math-optimizations\" { target mips*-*-irix6* powerpc*-*-* } } */\n+/* { dg-options \"-funsafe-math-optimizations\" { target powerpc*-*-* } } */\n \n extern void link_error(int);\n "}, {"sha": "387ed2f75fa48124d914fe43b35cddf2689c643b", "filename": "gcc/testsuite/gcc.dg/torture/builtin-logb-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-logb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-logb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-logb-1.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -9,7 +9,7 @@\n /* { dg-options \"-fno-finite-math-only\" { target sh*-*-* } } */\n /* In order to fold algebraic exprs below, targets with \"composite\"\n    floating point formats need -funsafe-math-optimizations.  */\n-/* { dg-options \"-funsafe-math-optimizations\" { target mips*-*-irix6* powerpc*-*-* } } */\n+/* { dg-options \"-funsafe-math-optimizations\" { target powerpc*-*-* } } */\n \n extern void link_error(int);\n "}, {"sha": "34346d908129ed9bad03c98c531d2e3202876312", "filename": "gcc/testsuite/gcc.dg/torture/pr47917.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47917.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47917.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47917.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run } */\n /* { dg-options \"-std=c99\" } */\n-/* { dg-options \"-std=c99 -D_XOPEN_SOURCE=500\" { target mips-sgi-irix6.5 *-*-solaris2.[89] } } */\n+/* { dg-options \"-std=c99 -D_XOPEN_SOURCE=500\" { target *-*-solaris2.[89] } } */\n /* { dg-options \"-std=gnu99\" { target *-*-hpux* } } */\n /* { dg-additional-options \"-D__USE_MINGW_ANSI_STDIO=1\" { target *-*-mingw* } } */\n /* { dg-xfail-if \"no C99 snprintf function\" { *-*-hpux10* } } */"}, {"sha": "e187735a4194a049b47d526e42c5c632e3c09be5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-store-ccp-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-store-ccp-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-store-ccp-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-store-ccp-3.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n-/* Skipped on MIPS GNU/Linux and IRIX target because __PIC__ can be\n+/* Skipped on MIPS GNU/Linux target because __PIC__ can be\n    defined for executables as well as shared libraries.  */\n-/* { dg-skip-if \"\" { *-*-darwin* hppa*64*-*-* mips*-*-linux* mips*-*-irix* *-*-mingw* } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"\" { *-*-darwin* hppa*64*-*-* mips*-*-linux* *-*-mingw* } { \"*\" } { \"\" } } */\n /* { dg-options \"-O2 -fno-common -fdump-tree-optimized\" } */\n \n const int conststaticvariable;"}, {"sha": "9b553ae295060f8b58846c4ab88cb024cab5863c", "filename": "gcc/testsuite/gcc.misc-tests/linkage.exp", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.misc-tests%2Flinkage.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.misc-tests%2Flinkage.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Flinkage.exp?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 1988, 90-96, 1997, 2000, 2001, 2002, 2007, 2008, 2010\n+# Copyright (C) 1988, 90-96, 1997, 2000, 2001, 2002, 2007, 2008, 2010, 2012\n # Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n@@ -28,18 +28,6 @@ if { [isnative] && ![is_remote host] } then {\n \n \t# Need to ensure ABI for native compiler matches gcc\n \tset native_cflags \"\"\n-\tif  [istarget \"mips-sgi-irix6*\"] {\n-\t    set file_string [exec file \"linkage-x.o\"]\n-\t    if [ string match \"*64*\" $file_string ] {\n-\t\tset native_cflags \"-64\"\n-\t    }\n-\t    if [ string match \"*ELF 32*\" $file_string ] {\n-\t\tset native_cflags \"-32\"\n-\t    }\n-\t    if [ string match \"*N32*\" $file_string ] {\n-\t\tset native_cflags \"-n32\"\n-\t    }\n-\t}\n \tif  [istarget \"sparc*-sun-solaris2*\"] {\n \t    set file_string [exec file \"linkage-x.o\"]\n \t    if [ string match \"*64*\" $file_string ] {"}, {"sha": "3a132deaf3b1e6716fac8a791d26a9fa8f8ea774", "filename": "gcc/testsuite/gcc.target/mips/args-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fargs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fargs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fargs-1.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -12,7 +12,7 @@ const char *optimized_for = _MIPS_TUNE;\n /* Test complementary macro pairs: exactly one of each pair\n    must be defined.  */\n \n-#if defined (_R3000) == defined (_R4000) && !defined (__sgi__)\n+#if defined (_R3000) == defined (_R4000)\n #error _R3000 / _R4000 mismatch\n #endif\n \n@@ -26,7 +26,7 @@ const char *optimized_for = _MIPS_TUNE;\n \n /* Check for __mips64 consistency.  */\n \n-#if defined (__mips64) != defined (_R4000) && !defined (__sgi__)\n+#if defined (__mips64) != defined (_R4000)\n #error __mips64 / _R4000 mismatch\n #endif\n "}, {"sha": "13b41e11885993195094d9ea43c6b58a198919be", "filename": "gcc/testsuite/gcc.target/mips/interrupt_handler-2.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finterrupt_handler-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finterrupt_handler-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finterrupt_handler-2.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -4,7 +4,6 @@\n /* { dg-final { scan-assembler \"\\t\\\\\\.cfi_restore 65\\n\" } } */\n /* { dg-final { scan-assembler-not \"\\\\\\.cfi_def_cfa( |\\t)\" } } */\n /* { dg-final { scan-assembler-not \"\\\\\\.cfi_def_cfa_register( |\\t)\" } } */\n-/* { dg-skip-if \"PR target/50580\" { mips-sgi-irix6* } } */\n \n extern void f (void);\n "}, {"sha": "2380123b16eebf629b4445fc5b94728b3fd99c21", "filename": "gcc/testsuite/gcc.target/mips/interrupt_handler-3.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finterrupt_handler-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finterrupt_handler-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finterrupt_handler-3.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -23,7 +23,6 @@\n /* { dg-final { scan-assembler \"\\t\\\\\\.cfi_def_cfa_offset 0\\n\" } } */\n /* { dg-final { scan-assembler-not \"\\\\\\.cfi_def_cfa( |\\t)\" } } */\n /* { dg-final { scan-assembler-not \"\\\\\\.cfi_def_cfa_register( |\\t)\" } } */\n-/* { dg-skip-if \"PR target/50580\" { mips-sgi-irix6* } } */\n \n extern void f (void);\n "}, {"sha": "f6a854ee9f3b18f5742c77af76a7f1e6ce8b1166", "filename": "gcc/testsuite/gcc.target/mips/save-restore-1.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsave-restore-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsave-restore-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsave-restore-1.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,6 +1,5 @@\n /* Check that we can use the save instruction to save varargs.  */\n /* { dg-options \"(-mips16) isa_rev>=1 -mabi=32 -O2\" } */\n-/* { dg-skip-if \"PR target/46610\" { mips-sgi-irix6* } } */\n \n #include <stdarg.h>\n "}, {"sha": "d45fe50ea6bd75bd5b6a21bd0a6ca75323346911", "filename": "gcc/testsuite/gcc.target/mips/save-restore-3.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsave-restore-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsave-restore-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsave-restore-3.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,7 +1,6 @@\n /* Check that we can use the save instruction to save spilled arguments\n    when the argument save area is out of range of a direct load or store.  */\n /* { dg-options \"(-mips16) isa_rev>=1 -mabi=32 -O2\" } */\n-/* { dg-skip-if \"PR target/46610\" { mips-sgi-irix6* } } */\n \n void bar (int *);\n "}, {"sha": "ef7722bce0948793bdeb7239434fdb426906b674", "filename": "gcc/testsuite/gcc.target/mips/save-restore-4.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsave-restore-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsave-restore-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsave-restore-4.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,6 +1,5 @@\n /* Check that we can use the save instruction to save $16, $17 and $31.  */\n /* { dg-options \"(-mips16) isa_rev>=1 -mabi=32 -O2\" } */\n-/* { dg-skip-if \"PR target/46610\" { mips-sgi-irix6* } } */\n \n void bar (void);\n "}, {"sha": "0dd823a68138040b04be0a1b47af765d4e9c334a", "filename": "gcc/testsuite/gcc.target/mips/save-restore-5.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsave-restore-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsave-restore-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsave-restore-5.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,6 +1,5 @@\n /* Check that we don't try to save the same register twice.  */\n /* { dg-options \"(-mips16) isa_rev>=1 -mgp32 -O2\" } */\n-/* { dg-skip-if \"PR target/46610\" { mips-sgi-irix6* } } */\n \n int bar (int, int, int, int);\n void frob (void);"}, {"sha": "eafe92c8f19f07e6bbab49c0ae75fa3134837af6", "filename": "gcc/testsuite/gfortran.dg/g77/cabs.f", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcabs.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcabs.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcabs.f?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,4 @@\n c { dg-do run }\n-c { dg-xfail-run-if \"PR target/16292\" { mips-sgi-irix6* } { -O0 } }\n       program cabs_1\n       complex      z0\n       real         r0"}, {"sha": "68a77b6ac48a3f71229728a3198e7519ac33a579", "filename": "gcc/testsuite/lib/prune.exp", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Flib%2Fprune.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Flib%2Fprune.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprune.exp?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,4 +1,4 @@\n-#   Copyright (C) 1997, 1999, 2000, 2002, 2004, 2007, 2008, 2010, 2011\n+#   Copyright (C) 1997, 1999, 2000, 2002, 2004, 2007, 2008, 2010, 2011, 2012\n #   Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n@@ -42,9 +42,6 @@ proc prune_gcc_output { text } {\n     regsub -all \"(^|\\n)\\[^\\n\\]*: Additional NOP may be necessary to workaround Itanium processor A/B step errata\" $text \"\" text\n     regsub -all \"(^|\\n)\\[^\\n*\\]*: Assembler messages:\\[^\\n\\]*\" $text \"\" text\n \n-    # Ignore second line of IRIX 6 linker multiline message.\n-    regsub -all \"(^|\\n)\\[ \\t\\]*that might degrade performance on an older version \\\\(rev. 2.2\\\\) R4000 processor.\\[^\\n\\]*\" $text \"\" text\n-\n     # Ignore harmless VTA note.\n     regsub -all \"(^|\\n)\\[^\\n\\]*: note: variable tracking size limit exceeded with -fvar-tracking-assignments, retrying without\\[^\\n\\]*\" $text \"\" text\n "}, {"sha": "2feab434ecdb3dcc1f778f4a1e9f5920d3f7e026", "filename": "gcc/testsuite/lib/target-libpath.exp", "status": "modified", "additions": 6, "deletions": 49, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Flib%2Ftarget-libpath.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Flib%2Ftarget-libpath.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-libpath.exp?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2004, 2005, 2007, 2009 Free Software Foundation, Inc.\n+# Copyright (C) 2004, 2005, 2007, 2009, 2012 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -20,8 +20,6 @@ set orig_environment_saved 0\n set orig_ld_library_path_saved 0\n set orig_ld_run_path_saved 0\n set orig_shlib_path_saved 0\n-set orig_ld_libraryn32_path_saved 0\n-set orig_ld_library64_path_saved 0\n set orig_ld_library_path_32_saved 0\n set orig_ld_library_path_64_saved 0\n set orig_dyld_library_path_saved 0\n@@ -39,8 +37,6 @@ proc set_ld_library_path_env_vars { } {\n   global orig_ld_library_path_saved\n   global orig_ld_run_path_saved\n   global orig_shlib_path_saved\n-  global orig_ld_libraryn32_path_saved\n-  global orig_ld_library64_path_saved\n   global orig_ld_library_path_32_saved\n   global orig_ld_library_path_64_saved\n   global orig_dyld_library_path_saved\n@@ -49,8 +45,6 @@ proc set_ld_library_path_env_vars { } {\n   global orig_ld_library_path\n   global orig_ld_run_path\n   global orig_shlib_path\n-  global orig_ld_libraryn32_path\n-  global orig_ld_library64_path\n   global orig_ld_library_path_32\n   global orig_ld_library_path_64\n   global orig_dyld_library_path\n@@ -94,14 +88,6 @@ proc set_ld_library_path_env_vars { } {\n       set orig_shlib_path \"$env(SHLIB_PATH)\"\n       set orig_shlib_path_saved 1\n     }\n-    if [info exists env(LD_LIBRARYN32_PATH)] {\n-      set orig_ld_libraryn32_path \"$env(LD_LIBRARYN32_PATH)\"\n-      set orig_ld_libraryn32_path_saved 1\n-    }\n-    if [info exists env(LD_LIBRARY64_PATH)] {\n-      set orig_ld_library64_path \"$env(LD_LIBRARY64_PATH)\"\n-      set orig_ld_library64_path_saved 1\n-    }\n     if [info exists env(LD_LIBRARY_PATH_32)] {\n       set orig_ld_library_path_32 \"$env(LD_LIBRARY_PATH_32)\"\n       set orig_ld_library_path_32_saved 1\n@@ -121,12 +107,11 @@ proc set_ld_library_path_env_vars { } {\n   # It only sets SHLIB_PATH and LD_LIBRARY_PATH when it executes a\n   # program.  We also need the environment set for compilations, etc.\n   #\n-  # On IRIX 6, we have to set variables akin to LD_LIBRARY_PATH, but\n-  # called LD_LIBRARYN32_PATH (for the N32 ABI) and LD_LIBRARY64_PATH\n-  # (for the 64-bit ABI).  The same applies to Darwin (DYLD_LIBRARY_PATH),\n-  # Solaris 32 bit (LD_LIBRARY_PATH_32), Solaris 64 bit (LD_LIBRARY_PATH_64),\n-  # and HP-UX (SHLIB_PATH).  In some cases, the variables are independent\n-  # of LD_LIBRARY_PATH, and in other cases LD_LIBRARY_PATH is used if the\n+  # On Darwin, we have to set variables akin to LD_LIBRARY_PATH, but called\n+  # DYLD_LIBRARY_PATH.  The same applies to Solaris 32 bit\n+  # (LD_LIBRARY_PATH_32), Solaris 64 bit (LD_LIBRARY_PATH_64), and HP-UX\n+  # (SHLIB_PATH).  In some cases, the variables are independent of\n+  # LD_LIBRARY_PATH, and in other cases LD_LIBRARY_PATH is used if the\n   # variable is not defined.\n   #\n   # Doing this is somewhat of a hack as ld_library_path gets repeated in\n@@ -150,20 +135,6 @@ proc set_ld_library_path_env_vars { } {\n   } else {\n     setenv SHLIB_PATH \"$ld_library_path\"\n   }\n-  if { $orig_ld_libraryn32_path_saved } {\n-    setenv LD_LIBRARYN32_PATH \"$ld_library_path:$orig_ld_libraryn32_path\"\n-  } elseif { $orig_ld_library_path_saved } {\n-    setenv LD_LIBRARYN32_PATH \"$ld_library_path:$orig_ld_library_path\"\n-  } else {\n-    setenv LD_LIBRARYN32_PATH \"$ld_library_path\"\n-  }\n-  if { $orig_ld_library64_path_saved } {\n-    setenv LD_LIBRARY64_PATH \"$ld_library_path:$orig_ld_library64_path\"\n-  } elseif { $orig_ld_library_path_saved } {\n-    setenv LD_LIBRARY64_PATH \"$ld_library_path:$orig_ld_library_path\"\n-  } else {\n-    setenv LD_LIBRARY64_PATH \"$ld_library_path\"\n-  }\n   if { $orig_ld_library_path_32_saved } {\n     setenv LD_LIBRARY_PATH_32 \"$ld_library_path:$orig_ld_library_path_32\"\n   } elseif { $orig_ld_library_path_saved } {\n@@ -196,17 +167,13 @@ proc restore_ld_library_path_env_vars { } {\n   global orig_ld_library_path_saved\n   global orig_ld_run_path_saved\n   global orig_shlib_path_saved\n-  global orig_ld_libraryn32_path_saved\n-  global orig_ld_library64_path_saved\n   global orig_ld_library_path_32_saved\n   global orig_ld_library_path_64_saved\n   global orig_dyld_library_path_saved\n   global orig_gcc_exec_prefix_saved\n   global orig_ld_library_path\n   global orig_ld_run_path\n   global orig_shlib_path\n-  global orig_ld_libraryn32_path\n-  global orig_ld_library64_path\n   global orig_ld_library_path_32\n   global orig_ld_library_path_64\n   global orig_dyld_library_path\n@@ -238,16 +205,6 @@ proc restore_ld_library_path_env_vars { } {\n   } elseif [info exists env(SHLIB_PATH)] {\n     unsetenv SHLIB_PATH\n   }\n-  if { $orig_ld_libraryn32_path_saved } {\n-    setenv LD_LIBRARYN32_PATH \"$orig_ld_libraryn32_path\"\n-  } elseif [info exists env(LD_LIBRARYN32_PATH)] {\n-    unsetenv LD_LIBRARYN32_PATH\n-  }\n-  if { $orig_ld_library64_path_saved } {\n-    setenv LD_LIBRARY64_PATH \"$orig_ld_library64_path\"\n-  } elseif [info exists env(LD_LIBRARY64_PATH)] {\n-    unsetenv LD_LIBRARY64_PATH\n-  }\n   if { $orig_ld_library_path_32_saved } {\n     setenv LD_LIBRARY_PATH_32 \"$orig_ld_library_path_32\"\n   } elseif [info exists env(LD_LIBRARY_PATH_32)] {"}, {"sha": "c6acb03bf4f2a26d44fcb20705d4106d1ffccdf7", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -466,15 +466,6 @@ proc check_profiling_available { test_what } {\n \treturn 0\n     }\n \n-    # Support for -p on irix relies on libprof1.a which doesn't appear to\n-    # exist on any irix6 system currently posting testsuite results.\n-    # Support for -pg on irix relies on gcrt1.o which doesn't exist yet.\n-    # See: http://gcc.gnu.org/ml/gcc/2002-10/msg00169.html\n-    if { [istarget mips*-*-irix*]\n-         && ($test_what == \"-p\" || $test_what == \"-pg\") } {\n-\treturn 0\n-    }\n-\n     # We don't yet support profiling for MIPS16.\n     if { [istarget mips*-*-*]\n \t && ![check_effective_target_nomips16]\n@@ -982,12 +973,7 @@ proc check_iconv_available { test_what } {\n # Return 1 if an ASCII locale is supported on this host, 0 otherwise.\n \n proc check_ascii_locale_available { } {\n-    if { ([ishost mips-sgi-irix*]) } {\n-\t# IRIX doesn't support an ASCII locale.\n-\treturn 0\n-    } else {\n-\treturn 1\n-    }\n+    return 1\n }\n \n # Return true if named sections are supported on this target.\n@@ -4122,9 +4108,6 @@ proc add_options_for_c99_runtime { flags } {\n     if { [istarget *-*-solaris2*] } {\n \treturn \"$flags -std=c99\"\n     }\n-    if { [istarget mips-sgi-irix6.5*] } {\n-\treturn \"$flags -std=c99\"\n-    }\n     if { [istarget powerpc-*-darwin*] } {\n \treturn \"$flags -mmacosx-version-min=10.3\"\n     }"}, {"sha": "e43f7d84aa410067cf3f6113222ed970887d0c66", "filename": "gcc/testsuite/objc.dg/stabs-1.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fobjc.dg%2Fstabs-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gcc%2Ftestsuite%2Fobjc.dg%2Fstabs-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstabs-1.m?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -16,4 +16,4 @@ @implementation MyClass\n @end\n \n /* See PR target/52152 for the xfail.  */\n-/* { dg-final { scan-assembler \"(.SUBSPA.*\\[\\$\\]CODE\\[\\$\\]|.text\\\"?)\\n\\t.stabs.*100,0,0,(\\[\\.\\$\\])?L?L\\[\\$\\]?etext\\[0-9\\]*\\n(\\[\\.\\$\\])?L?L\\[\\$\\]?etext\" { xfail mips*-*-elf* mips-sgi-irix6.5 } } } */\n+/* { dg-final { scan-assembler \"(.SUBSPA.*\\[\\$\\]CODE\\[\\$\\]|.text\\\"?)\\n\\t.stabs.*100,0,0,(\\[\\.\\$\\])?L?L\\[\\$\\]?etext\\[0-9\\]*\\n(\\[\\.\\$\\])?L?L\\[\\$\\]?etext\" { xfail mips*-*-elf* } } } */"}, {"sha": "d7333c60b85030ff98841c8f8d0b67fd25f2cb62", "filename": "gnattools/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gnattools%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gnattools%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gnattools%2FChangeLog?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,3 +1,8 @@\n+2012-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac (mips-sgi-irix*): Remove.\n+\t* configure: Regenerate.\n+\n 2011-10-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* Makefile.in (LOOSE_WARN): Delete."}, {"sha": "54a2be6c2db901f9a642a6e1f64dc9a9d10503a8", "filename": "gnattools/configure", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gnattools%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gnattools%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gnattools%2Fconfigure?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -2063,9 +2063,6 @@ case \"${target}\" in\n     mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n     indepsw.adb<indepsw-gnu.adb\"\n     ;;\n-  mips-sgi-irix*)\n-    TOOLS_TARGET_PAIRS=\"mlib-tgt-specific.adb<mlib-tgt-specific-irix.adb\"\n-    ;;\n   hppa*-hp-hpux10*) # Unlike hpux11\n     ;;\n   hppa*-hp-hpux11*)"}, {"sha": "4305e6bd58b8e1a0f0f907657be6f7b55c74a65b", "filename": "gnattools/configure.ac", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/gnattools%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/gnattools%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gnattools%2Fconfigure.ac?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -103,9 +103,6 @@ case \"${target}\" in\n     mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n     indepsw.adb<indepsw-gnu.adb\"\n     ;;\n-  mips-sgi-irix*)\n-    TOOLS_TARGET_PAIRS=\"mlib-tgt-specific.adb<mlib-tgt-specific-irix.adb\"\n-    ;;\n   hppa*-hp-hpux10*) # Unlike hpux11\n     ;;\n   hppa*-hp-hpux11*)"}, {"sha": "4a0897c2515956e4db619fbbe897bbbe8ee6d36b", "filename": "libgcc/config.host", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -726,11 +726,6 @@ microblaze*-*-*)\n         tmake_file=\"microblaze/t-microblaze t-fdpbit\"\n \textra_parts=\"crtbegin.o crtend.o crti.o crtn.o\"\n \t;;\n-mips-sgi-irix6.5*)\n-\ttmake_file=\"$tmake_file mips/t-irix6 t-crtfm mips/t-tpbit t-slibgcc mips/t-slibgcc-irix\"\n-\textra_parts=\"crtbegin.o crtend.o crtfastmath.o irix-crti.o irix-crtn.o\"\n-\tmd_unwind_header=mips/irix6-unwind.h\n-\t;;\n mips*-*-netbsd*)\t\t\t# NetBSD/mips, either endian.\n \t;;\n mips64*-*-linux* | mipsisa64*-*-linux*)"}, {"sha": "b9fc1918f74093cd28a5f8e74971eb2ea2a4258f", "filename": "libgcc/config/mips/irix-crti.S", "status": "removed", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/libgcc%2Fconfig%2Fmips%2Firix-crti.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/libgcc%2Fconfig%2Fmips%2Firix-crti.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmips%2Firix-crti.S?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,71 +0,0 @@\n-/* Copyright (C) 2004, 2008, 2011 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-\t.abicalls\n-\t.set\tnoreorder\n-\t.set\tnomacro\n-\n-/* The GNU and SGI linkers differ in their implementation of -init and -fini.\n-   With the GNU linker, there can only be a single -init option, and the\n-   linker simply sets DT_INIT to that value.  gcc's initialization and\n-   finalization code can go directly in .init, with the prologue and\n-   epilogue of the main initialization routine being provided by external\n-   object files (*crti.o and *crtn.o in this case).\n-\n-   The SGI linker instead accepts several -init options.  It will set DT_INIT\n-   to a linker-created function (placed in .init) that calls each of the -init\n-   functions in turn.  If there is any user code in .init, this linker-created\n-   function will be placed after it.  Note that such user code is not treated\n-   specially; it will only be called if the -init options arrange for it to\n-   be called.\n-\n-   In theory, the SGI model should allow the crti, crtn and intermediate code\n-   to go in .init, just like it can with the GNU linker.  However, doing this\n-   seems to confuse the linker and triggers an internal error:\n-\n-      ld32: FATAL   2  : Internal: at ../../ld/mips_code.c mips_code_fixup()\n-\t text section overflow!\n-\n-   (seen with MIPSpro 7.30).  We therefore put everything in a special\n-   .gcc_init section instead.  */\n-\n-\t.section .gcc_init,\"ax\",@progbits\n-\t.globl\t__gcc_init\n-__gcc_init:\n-\tdaddiu\t$sp,$sp,-16\n-\tsd\t$31,0($sp)\n-\tsd\t$28,8($sp)\n-\n-\t.section .gcc_fini,\"ax\",@progbits\n-\t.globl\t__gcc_fini\n-__gcc_fini:\n-\tdaddiu\t$sp,$sp,-16\n-\tsd\t$31,0($sp)\n-\tsd\t$28,8($sp)\n-\n-/* This object will typically be included in the final link for both\n-   shared libraries and executable, and we need to hide the symbols to\n-   prevent possible symbol preemption warnings from the SGI linker.  */\n-.hidden __gcc_init\n-.hidden __gcc_fini\n-"}, {"sha": "8194cacf5d7eaa588a4c0396d00d5f8d8c4b1e95", "filename": "libgcc/config/mips/irix-crtn.S", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/libgcc%2Fconfig%2Fmips%2Firix-crtn.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/libgcc%2Fconfig%2Fmips%2Firix-crtn.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmips%2Firix-crtn.S?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,38 +0,0 @@\n-/* Copyright (C) 2004, 2011 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-\t.abicalls\n-\t.set\tnoreorder\n-\t.set\tnomacro\n-\n-\t.section .gcc_init,\"ax\",@progbits\n-\tld\t$31,0($sp)\n-\tld\t$28,8($sp)\n-\tjr\t$31\n-\tdaddiu\t$sp,$sp,16\n-\n-\t.section .gcc_fini,\"ax\",@progbits\n-\tld\t$31,0($sp)\n-\tld\t$28,8($sp)\n-\tjr\t$31\n-\tdaddiu\t$sp,$sp,16"}, {"sha": "e862560fe341a9fbacfcb0718bf6e9506999c8ee", "filename": "libgcc/config/mips/irix6-unwind.h", "status": "removed", "additions": 0, "deletions": 180, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/libgcc%2Fconfig%2Fmips%2Firix6-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/libgcc%2Fconfig%2Fmips%2Firix6-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmips%2Firix6-unwind.h?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,180 +0,0 @@\n-/* DWARF2 EH unwinding support for MIPS IRIX 6.\n-   Copyright (C) 2011 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* Do code reading to identify a signal frame, and set the frame\n-   state data appropriately.  See unwind-dw2.c for the structs.  */\n-\n-/* This code was developed-for and only tested-in limited ABI\n-   configurations.  Characterize that.  */\n-\n-#if defined (_ABIN32) || defined (_ABI64)\n-#define SUPPORTED_ABI 1\n-#else\n-#define SUPPORTED_ABI 0\n-#endif\n-\n-#include <signal.h>\n-\n-#define MD_FALLBACK_FRAME_STATE_FOR mips_fallback_frame_state\n-\n-/* Look at the code around RA to see if it matches a sighandler caller with a\n-   sigcontext_t * argument (SA_SIGINFO cleared).  Return that pointer argument\n-   if it does match, or 0 otherwise.  */\n-\n-static sigcontext_t *\n-sigcontext_for (unsigned int *ra, void *cfa)\n-{\n-  /* IRIX 6.5, mono-threaded application.  We're lucky enough to be able\n-     to expect a short very sighandler specific sequence around.\n-\n-     <_sigtramp+124>:\tli\tv0,1088 (SYS_sigreturn)\n-     <_sigtramp+128>:\tsyscall  */\n-\n-  if (   ra[6] == 0x24020440\n-      && ra[7] == 0x0000000c)\n-    return (sigcontext_t *)(cfa + 0x30);\n-\n-  /* IRIX 6.5 variants, multi-threaded application, pthreads.  Nothing really\n-     sighandler specific handy, so match a fairly long constant sequence.  */\n-\n-#if _MIPS_SIM == _ABIN32\n-  /* \n-     <sig_fixup_mask+40>:\tsd\ts0,0(sp)\n-     <sig_fixup_mask+44>:\tsll\tra,a0,0x2\n-     <sig_fixup_mask+48>:\taddiu\tt9,t9,-28584/-28456/-28448\n-     <sig_fixup_mask+52>:\tlw\ts0,3804(at)\n-     <sig_fixup_mask+56>:\taddu\tt9,t9,ra\n-     <sig_fixup_mask+60>:\tlw\tt9,0(t9)\n-     <sig_fixup_mask+64>:\tld\tat,3696(at)\n-     <sig_fixup_mask+68>:\tld\ts2,88(s0)\n-     <sig_fixup_mask+72>:\tjalr\tt9\n-     <sig_fixup_mask+76>:\tsd\tat,88(s0)  */\n-   if (   ra[-10] == 0xffb00000\n-      && ra[ -9] == 0x0004f880\n-      && (ra[-8] == 0x27399058\n-\t  || ra[-8] == 0x273990d8\n-\t  || ra[-8] == 0x273990e0)\n-      && ra[ -7] == 0x8c300edc\n-      && ra[ -6] == 0x033fc821\n-      && ra[ -5] == 0x8f390000\n-      && ra[ -4] == 0xdc210e70\n-      && ra[ -3] == 0xde120058\n-      && ra[ -2] == 0x0320f809\n-      && ra[ -1] == 0xfe010058)\n-\n-#elif _MIPS_SIM == _ABI64\n-  /* \n-     <sig_fixup_mask+44>:\tsd\ts0,0(sp)\n-     <sig_fixup_mask+48>:\tdaddu\tt9,t9,ra\n-     <sig_fixup_mask+52>:\tdsll\tra,a0,0x3\n-     <sig_fixup_mask+56>:\tld\ts0,3880(at)\n-     <sig_fixup_mask+60>:\tdaddu\tt9,t9,ra\n-     <sig_fixup_mask+64>:\tld\tt9,0(t9)\n-     <sig_fixup_mask+68>:\tld\tat,3696(at)\n-     <sig_fixup_mask+72>:\tld\ts2,152(s0)\n-     <sig_fixup_mask+76>:\tjalr\tt9\n-     <sig_fixup_mask+80>:\tsd\tat,152(s0)  */\n-  if (   ra[-10] == 0xffb00000\n-      && ra[ -9] == 0x033fc82d\n-      && ra[ -8] == 0x0004f8f8\n-      && ra[ -7] == 0xdc300f28\n-      && ra[ -6] == 0x033fc82d\n-      && ra[ -5] == 0xdf390000\n-      && ra[ -4] == 0xdc210e70\n-      && ra[ -3] == 0xde120098\n-      && ra[ -2] == 0x0320f809\n-      && ra[ -1] == 0xfe010098)\n-#endif\n-    return (sigcontext_t *)(cfa + 0x60);\n-\n-  return 0;\n-}\n-\n-#define SIGCTX_GREG_ADDR(REGNO,SIGCTX) \\\n-  ((void *) &(SIGCTX)->sc_regs[REGNO])\n-\n-#define SIGCTX_FPREG_ADDR(REGNO,SIGCTX) \\\n-  ((void *) &(SIGCTX)->sc_fpregs[REGNO])\n-\n-static _Unwind_Reason_Code\n-mips_fallback_frame_state (struct _Unwind_Context *context,\n-\t\t\t   _Unwind_FrameState *fs)\n-{\n-  /* Return address and CFA of the frame we're attempting to unwind through,\n-     possibly a signal handler.  */\n-  void *ctx_ra  = (void *)context->ra;\n-  void *ctx_cfa = (void *)context->cfa;\n-\n-  /* CFA of the intermediate abstract kernel frame between the interrupted\n-     code and the signal handler, if we're indeed unwinding through a signal\n-     handler.  */\n-  void *k_cfa;\n-\n-  /* Pointer to the sigcontext_t structure pushed by the kernel when we're\n-     unwinding through a signal handler setup with SA_SIGINFO cleared.  */\n-  sigcontext_t *sigctx;\n-  int i;\n-\n-  if (! SUPPORTED_ABI)\n-    return _URC_END_OF_STACK;\n-    \n-  sigctx = sigcontext_for (ctx_ra, ctx_cfa);\n-\n-  if (sigctx == 0)\n-    return _URC_END_OF_STACK;\n-\n-  /* The abstract kernel frame's CFA is extactly the stack pointer\n-     value at the interruption point.  */\n-  k_cfa = *(void **)SIGCTX_GREG_ADDR (CTX_SP, sigctx);\n-\n-  /* State the rules to compute the CFA we have the value of: use the\n-     previous CFA and offset by the difference between the two.  See\n-     uw_update_context_1 for the supporting details.  */\n-  fs->regs.cfa_how = CFA_REG_OFFSET;\n-  fs->regs.cfa_reg = __builtin_dwarf_sp_column ();\n-  fs->regs.cfa_offset = k_cfa - ctx_cfa;\n-\n-  /* Fill the internal frame_state structure with information stating where\n-     each register of interest can be found from the CFA.  */\n-  for (i = 0; i <= 31; i ++)\n-    {\n-      fs->regs.reg[i].how = REG_SAVED_OFFSET;\n-      fs->regs.reg[i].loc.offset = SIGCTX_GREG_ADDR (i, sigctx) - k_cfa;\n-    }\n-\n-  for (i = 0; i <= 31; i ++)\n-    {\n-      fs->regs.reg[32+i].how = REG_SAVED_OFFSET;\n-      fs->regs.reg[32+i].loc.offset = SIGCTX_FPREG_ADDR (i, sigctx) - k_cfa;\n-    }\n-\n-  /* State the rules to find the kernel's code \"return address\", which is the\n-     address of the active instruction when the signal was caught.  */\n-  fs->retaddr_column = DWARF_FRAME_RETURN_COLUMN;\n-  fs->regs.reg[fs->retaddr_column].how = REG_SAVED_OFFSET;\n-  fs->regs.reg[fs->retaddr_column].loc.offset = (void *)&sigctx->sc_pc - k_cfa;\n-  fs->signal_frame = 1;\n-\n-  return _URC_NO_REASON;\n-}"}, {"sha": "c9bd3cdcb0a7c9f75caad623c41a1f9a054af44f", "filename": "libgcc/config/mips/t-irix6", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/libgcc%2Fconfig%2Fmips%2Ft-irix6", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/libgcc%2Fconfig%2Fmips%2Ft-irix6", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmips%2Ft-irix6?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,24 +0,0 @@\n-# Copyright (C) 1995, 1996, 1997, 1998, 2000, 2001, 2002, 2003, 2004, 2005,\n-# 2006, 2010, 2011 Free Software Foundation, Inc.\n-#\n-# This file is part of GCC.\n-#\n-# GCC is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3, or (at your option)\n-# any later version.\n-#\n-# GCC is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-\n-irix-crti.o: $(srcdir)/config/mips/irix-crti.S\n-\t$(crt_compile) -c $<\n-\n-irix-crtn.o: $(srcdir)/config/mips/irix-crtn.S\n-\t$(crt_compile) -c $<"}, {"sha": "47b2e0eec216079de3f1910c4f14371e28af0d97", "filename": "libgcc/config/mips/t-slibgcc-irix", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/libgcc%2Fconfig%2Fmips%2Ft-slibgcc-irix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/libgcc%2Fconfig%2Fmips%2Ft-slibgcc-irix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmips%2Ft-slibgcc-irix?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,7 +0,0 @@\n-# Build a shared libgcc library with the SGI linker.\n-\n-SHLIB_LDFLAGS = -Wl,-soname,$(SHLIB_SONAME) \\\n-\t-Wl,-exports_file,$(SHLIB_MAP)\n-\n-SHLIB_MKMAP = $(srcdir)/mkmap-flat.awk\n-SHLIB_MAPFILES = libgcc-std.ver"}, {"sha": "674ddbf66e76aa159344c3b83eb17efa1517a01f", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,3 +1,7 @@\n+2012-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* intrinsics/c99_functions.c [__sgi__ && !HAVE_COMPLEX_H]: Remove.\n+\n 2012-03-12  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure.ac: Remove Tru64 reference."}, {"sha": "516077694d33f83ed5cfa4e8a15a0e0a126bf520", "filename": "libgfortran/intrinsics/c99_functions.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libgfortran%2Fintrinsics%2Fc99_functions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libgfortran%2Fintrinsics%2Fc99_functions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fc99_functions.c?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -27,20 +27,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define C99_PROTOS_H WE_DONT_WANT_PROTOS_NOW\n #include \"libgfortran.h\"\n \n-/* IRIX's <math.h> declares a non-C99 compliant implementation of cabs,\n-   which takes two floating point arguments instead of a single complex.\n-   If <complex.h> is missing this prevents building of c99_functions.c.\n-   To work around this we redirect cabs{,f,l} calls to __gfc_cabs{,f,l}.  */\n-\n-#if defined(__sgi__) && !defined(HAVE_COMPLEX_H)\n-#undef HAVE_CABS\n-#undef HAVE_CABSF\n-#undef HAVE_CABSL\n-#define cabs __gfc_cabs\n-#define cabsf __gfc_cabsf\n-#define cabsl __gfc_cabsl\n-#endif\n-        \n /* On a C99 system \"I\" (with I*I = -1) should be defined in complex.h;\n    if not, we define a fallback version here.  */\n #ifndef I"}, {"sha": "81f0f02623b8064e0c18500266292af3d34f5f06", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,3 +1,7 @@\n+2012-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.tgt (mips-sgi-irix6*): Remove.\n+\n 2012-03-12  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure.tgt (alpha*-dec-osf*): Remove."}, {"sha": "09cab5177ede6290cffb67c8438cfca8c03c5b80", "filename": "libgomp/configure.tgt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libgomp%2Fconfigure.tgt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libgomp%2Fconfigure.tgt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure.tgt?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -133,10 +133,6 @@ case \"${target}\" in\n \tXLDFLAGS=\"${XLDFLAGS} -lpthread\"\n \t;;\n \n-  mips-sgi-irix6*)\n-\t# Need to link with -lpthread so libgomp.so is self-contained.\n-\tXLDFLAGS=\"${XLDFLAGS} -lpthread\"\n-\t;;\n   *)\n \t;;\n "}, {"sha": "384afb8b1ec4796f85397bd23a73e81f59e524e8", "filename": "libitm/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,3 +1,7 @@\n+2012-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.tgt (*-*-irix6*): Remove.\n+\n 2012-03-13  Torvald Riegel  <triegel@redhat.com>\n \n \tPR libitm/52526"}, {"sha": "e2a58885699323a11ec13f47465df0590798cfec", "filename": "libitm/configure.tgt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libitm%2Fconfigure.tgt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libitm%2Fconfigure.tgt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfigure.tgt?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -130,7 +130,7 @@ case \"${target}\" in\n \n   *-*-gnu* | *-*-k*bsd*-gnu \\\n   | *-*-netbsd* | *-*-freebsd* | *-*-openbsd* \\\n-  | *-*-solaris2* | *-*-sysv4* | *-*-irix6* | *-*-hpux11* \\\n+  | *-*-solaris2* | *-*-sysv4* | *-*-hpux11* \\\n   | *-*-darwin* | *-*-aix*)\n \t# POSIX system.  The OS is supported.\n \t;;"}, {"sha": "5ccdf14a3964eda3337e04a85051705bbe007fca", "filename": "libjava/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,3 +1,20 @@\n+2012-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac (libgcj_cv_exidx): Remove IRIX 6 ld workaround.\n+\t(mips-sgi-irix6*): Remove.\n+\t(mips-sgi-irix*): Remove.\n+\t(AC_CHECK_HEADERS): Remove bstring.h.\n+\t* configure: Regenerate.\n+\t* include/config.h.in: Regenerate.\n+\t* configure.host (mips-sgi-irix6*): Remove.\n+\n+\t* include/posix-signal.h [__sgi__]: Remove.\n+\n+\t* gnu/java/net/natPlainDatagramSocketImplPosix.cc\n+\t[HAVE_BSTRING_H]: Remove.\n+\t* gnu/java/net/natPlainDatagramSocketImplWin32.cc: Likewise.\n+\t* gnu/java/net/natPlainSocketImplPosix.cc: Likewise.\n+\n 2012-03-12  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure.ac (alpha*-dec-osf*): Remove."}, {"sha": "a6d4f28489651526e27b0eadbd6a79fbb9e6e089", "filename": "libjava/configure", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -599,7 +599,6 @@ ac_includes_default=\"\\\n #endif\"\n \n enable_option_checking=no\n-ac_c_werror_flag=\n ac_subst_vars='am__EXEEXT_FALSE\n am__EXEEXT_TRUE\n LTLIBOBJS\n@@ -13359,7 +13358,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 13362 \"configure\"\n+#line 13361 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -13465,7 +13464,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 13468 \"configure\"\n+#line 13467 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19458,7 +19457,7 @@ if test \"${enable_sjlj_exceptions+set}\" = set; then :\n   enableval=$enable_sjlj_exceptions; :\n else\n   cat > conftest.$ac_ext << EOF\n-#line 19461 \"configure\"\n+#line 19460 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()\n@@ -20576,14 +20575,6 @@ if test \"${libgcj_cv_exidx+set}\" = set; then :\n else\n   saved_ldflags=\"$LDFLAGS\"\n    LDFLAGS=\"${LDFLAGS} -Wl,--no-merge-exidx-entries\"\n-   # The IRIX 6 ld doesn't recognize --no-merge-exidx-entries, but only\n-   # warns about unknown options, which breaks the testsuite.  So enable\n-   # AC_LANG_WERROR, but there's currently (autoconf 2.64) no way to turn\n-   # it off again.  As a workaround, save and restore werror flag like\n-   # AC_PATH_XTRA.\n-   ac_xsave_c_werror_flag=$ac_c_werror_flag\n-\n-ac_c_werror_flag=yes\n    if test x$gcc_no_link = xyes; then\n   as_fn_error \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n fi\n@@ -20598,7 +20589,6 @@ else\n fi\n rm -f core conftest.err conftest.$ac_objext \\\n     conftest$ac_exeext conftest.$ac_ext\n-   ac_c_werror_flag=$ac_xsave_c_werror_flag\n    LDFLAGS=\"${saved_ldflags}\"\n \n fi\n@@ -23146,10 +23136,6 @@ fi\n    # requires -ldl.\n    if test \"$GC\" = boehm; then\n       case \"${host}\" in\n-          mips-sgi-irix6*)\n-\t    # While IRIX 6 has libdl for the O32 and N32 ABIs, the N64 one is\n-\t    # missing.  It's unnecessary anyway since dlopen lives in libc.\n-\t    ;;\n \t  *-*-darwin*)\n \t    ;;\n \t  *)\n@@ -23883,7 +23869,7 @@ esac\n # BSD_COMP is defined; just including sys/filio.h is simpler.\n # We avoid AC_HEADER_DIRENT since we really only care about dirent.h\n # for now.  If you change this, you also must update natFile.cc.\n-for ac_header in unistd.h bstring.h sys/time.h sys/types.h fcntl.h \\\n+for ac_header in unistd.h sys/time.h sys/types.h fcntl.h \\\n \t\t  sys/ioctl.h sys/filio.h sys/stat.h sys/select.h \\\n \t\t  sys/socket.h netinet/in.h arpa/inet.h netdb.h \\\n \t\t  pwd.h sys/config.h stdint.h langinfo.h locale.h \\\n@@ -24220,7 +24206,7 @@ SYSDEP_SOURCES=\n SIGNAL_HANDLER_AUX=\n \n case \"${host}\" in\n- mips-sgi-irix* | *-*-solaris2*)\n+ *-*-solaris2*)\n     SIGNAL_HANDLER=include/posix-signal.h\n     ;;\n  i?86-*-linux*)"}, {"sha": "488d0fa451b4ca68d6240ac39c7e041660e624ce", "filename": "libjava/configure.ac", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libjava%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libjava%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.ac?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -961,17 +961,9 @@ esac\n AC_CACHE_CHECK([for --no-merge-exidx-entries], [libgcj_cv_exidx],\n   [saved_ldflags=\"$LDFLAGS\"\n    LDFLAGS=\"${LDFLAGS} -Wl,--no-merge-exidx-entries\"\n-   # The IRIX 6 ld doesn't recognize --no-merge-exidx-entries, but only\n-   # warns about unknown options, which breaks the testsuite.  So enable\n-   # AC_LANG_WERROR, but there's currently (autoconf 2.64) no way to turn\n-   # it off again.  As a workaround, save and restore werror flag like\n-   # AC_PATH_XTRA.\n-   ac_xsave_[]_AC_LANG_ABBREV[]_werror_flag=$ac_[]_AC_LANG_ABBREV[]_werror_flag\n-   AC_LANG_WERROR\n    AC_LINK_IFELSE([int main(void){ return 0;} ],\n \t\t      [eval \"libgcj_cv_exidx=yes\"],\n \t\t      [eval \"libgcj_cv_exidx=no\"])\n-   ac_[]_AC_LANG_ABBREV[]_werror_flag=$ac_xsave_[]_AC_LANG_ABBREV[]_werror_flag\n    LDFLAGS=\"${saved_ldflags}\"]\n )\n if test \"${libgcj_cv_exidx}\" = \"yes\"; then\n@@ -1481,10 +1473,6 @@ else\n    # requires -ldl.\n    if test \"$GC\" = boehm; then\n       case \"${host}\" in\n-          mips-sgi-irix6*)\n-\t    # While IRIX 6 has libdl for the O32 and N32 ABIs, the N64 one is\n-\t    # missing.  It's unnecessary anyway since dlopen lives in libc.\n-\t    ;;\n \t  *-*-darwin*)\n \t    ;;\n \t  *)\n@@ -1636,7 +1624,7 @@ TL_AC_GXX_INCLUDE_DIR\n # BSD_COMP is defined; just including sys/filio.h is simpler.\n # We avoid AC_HEADER_DIRENT since we really only care about dirent.h\n # for now.  If you change this, you also must update natFile.cc.\n-AC_CHECK_HEADERS([unistd.h bstring.h sys/time.h sys/types.h fcntl.h \\\n+AC_CHECK_HEADERS([unistd.h sys/time.h sys/types.h fcntl.h \\\n \t\t  sys/ioctl.h sys/filio.h sys/stat.h sys/select.h \\\n \t\t  sys/socket.h netinet/in.h arpa/inet.h netdb.h \\\n \t\t  pwd.h sys/config.h stdint.h langinfo.h locale.h \\\n@@ -1732,7 +1720,7 @@ SYSDEP_SOURCES=\n SIGNAL_HANDLER_AUX=\n \n case \"${host}\" in\n- mips-sgi-irix* | *-*-solaris2*)\n+ *-*-solaris2*)\n     SIGNAL_HANDLER=include/posix-signal.h\n     ;;\n  i?86-*-linux*)"}, {"sha": "0c3b41c690e60b85a38dbb5009d58b2d5f328a2a", "filename": "libjava/configure.host", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libjava%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libjava%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.host?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -289,10 +289,6 @@ EOF\n \tsysdeps_dir=i386\n \tDIVIDESPEC=-f%{m32:no-}use-divide-subroutine\n \t;;\n-  mips-sgi-irix6* )\n-\tcan_unwind_signal=yes\n-\tsysdeps_dir=mips\n-\t;;\n   arm*-linux* )\n \tslow_pthread_self=no\n \tcan_unwind_signal=no"}, {"sha": "edec051ef6750538969db6637b95ea154230e8bd", "filename": "libjava/gnu/java/net/natPlainDatagramSocketImplPosix.cc", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplPosix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplPosix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplPosix.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -18,11 +18,6 @@ details.  */\n #include <errno.h>\n #include <string.h>\n \n-#if HAVE_BSTRING_H\n-// Needed for bzero, implicitly used by FD_ZERO on IRIX 5.2 \n-#include <bstring.h>\n-#endif\n-\n #include <gcj/cni.h>\n #include <gnu/java/net/PlainDatagramSocketImpl.h>\n #include <java/io/IOException.h>"}, {"sha": "d659b0b07d1f393870b6a62f0fa7b608dfdfff26", "filename": "libjava/gnu/java/net/natPlainDatagramSocketImplWin32.cc", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplWin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplWin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplWin32.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -10,11 +10,6 @@ details.  */\n #include <platform.h>\n #include <string.h>\n \n-#if HAVE_BSTRING_H\n-// Needed for bzero, implicitly used by FD_ZERO on IRIX 5.2\n-#include <bstring.h>\n-#endif\n-\n #include <gnu/java/net/PlainDatagramSocketImpl.h>\n #include <java/io/IOException.h>\n #include <java/net/BindException.h>"}, {"sha": "7671cc30b82744a302733c7aa4d87500af47793d", "filename": "libjava/gnu/java/net/natPlainSocketImplPosix.cc", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainSocketImplPosix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainSocketImplPosix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainSocketImplPosix.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -24,11 +24,6 @@ details.  */\n #include <errno.h>\n #include <string.h>\n \n-#if HAVE_BSTRING_H\n-// Needed for bzero, implicitly used by FD_ZERO on IRIX 5.2 \n-#include <bstring.h>\n-#endif\n-\n #include <gcj/cni.h>\n #include <gcj/javaprims.h>\n #include <gnu/java/net/PlainSocketImpl.h>"}, {"sha": "8e718ac2fd1507d2484601f22eb38aeaac552c05", "filename": "libjava/include/config.h.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libjava%2Finclude%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libjava%2Finclude%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fconfig.h.in?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -43,9 +43,6 @@\n /* Define if you have u_int32_t */\n #undef HAVE_BSD_INT32_DEFINED\n \n-/* Define to 1 if you have the <bstring.h> header file. */\n-#undef HAVE_BSTRING_H\n-\n /* Define to 1 if the target assembler supports thread-local storage. */\n #undef HAVE_CC_TLS\n "}, {"sha": "a0f96a905eac70e1dd287a9f983831f73817ad48", "filename": "libjava/include/posix-signal.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libjava%2Finclude%2Fposix-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libjava%2Finclude%2Fposix-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fposix-signal.h?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -22,8 +22,6 @@ details.  */\n \n #if defined __sun__ && defined __svr4__\n #define SA_FLAGS SA_NODEFER | SA_SIGINFO\n-#elif defined __sgi__\n-#define SA_FLAGS SA_NODEFER\n #else\n #error Must define SA_FLAGS.\n #endif"}, {"sha": "ef8b8efe80e3a68b9079a0443589e7c2745dce2c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 202, "deletions": 0, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,3 +1,205 @@\n+2012-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.host (irix6.5*): Remove.\n+\t* config/os/irix: Remove.\n+\t* config/io/basic_file_stdio.cc (__basic_file<char>::showmanyc())\n+\t[_GLIBCXX_FIONREAD_TAKES_OFF_T]: Remove.\n+\n+\t* doc/xml/faq.xml: Remove IRIX reference.\n+\t* doc/xml/manual/using.xml (Finding Dynamic or Shared Libraries):\n+\tRemove IRIX example.\n+\n+\t* testsuite/20_util/shared_ptr/thread/default_weaktoshared.cc:\n+\tRemove mips-sgi-irix6* handling.\n+\t* testsuite/20_util/shared_ptr/thread/mutex_weaktoshared.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/pthread18185.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/pthread4.cc: Likewise.\n+\t* testsuite/22_locale/locale/cons/12658_thread-1.cc: Likewise.\n+\t* testsuite/22_locale/locale/cons/12658_thread-2.cc: Likewise.\n+\t* testsuite/23_containers/list/pthread1.cc: Likewise.\n+\t* testsuite/23_containers/list/pthread5.cc: Likewise.\n+\t* testsuite/23_containers/map/pthread6.cc: Likewise.\n+\t* testsuite/23_containers/vector/debug/multithreaded_swap.cc: Likewise.\n+\t* testsuite/27_io/basic_ofstream/pthread2.cc: Likewise.\n+\t* testsuite/27_io/basic_ostringstream/pthread3.cc: Likewise.\n+\t* testsuite/30_threads/async/42819.cc: Likewise.\n+\t* testsuite/30_threads/async/49668.cc: Likewise.\n+\t* testsuite/30_threads/async/any.cc: Likewise.\n+\t* testsuite/30_threads/async/async.cc: Likewise.\n+\t* testsuite/30_threads/async/launch.cc: Likewise.\n+\t* testsuite/30_threads/async/sync.cc: Likewise.\n+\t* testsuite/30_threads/call_once/39909.cc: Likewise.\n+\t* testsuite/30_threads/call_once/49668.cc: Likewise.\n+\t* testsuite/30_threads/call_once/call_once1.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable/members/1.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable/members/2.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable/native_handle/typesizes.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/condition_variable_any/50862.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable_any/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable_any/members/1.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable_any/members/2.cc: Likewise.\n+\t* testsuite/30_threads/future/cons/move.cc: Likewise.\n+\t* testsuite/30_threads/future/members/45133.cc: Likewise.\n+\t* testsuite/30_threads/future/members/get.cc: Likewise.\n+\t* testsuite/30_threads/future/members/get2.cc: Likewise.\n+\t* testsuite/30_threads/future/members/share.cc: Likewise.\n+\t* testsuite/30_threads/future/members/valid.cc: Likewise.\n+\t* testsuite/30_threads/future/members/wait.cc: Likewise.\n+\t* testsuite/30_threads/future/members/wait_for.cc: Likewise.\n+\t* testsuite/30_threads/future/members/wait_until.cc: Likewise.\n+\t* testsuite/30_threads/lock/1.cc: Likewise.\n+\t* testsuite/30_threads/lock/2.cc: Likewise.\n+\t* testsuite/30_threads/lock/3.cc: Likewise.\n+\t* testsuite/30_threads/lock/4.cc: Likewise.\n+\t* testsuite/30_threads/lock_guard/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/mutex/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/mutex/dest/destructor_locked.cc: Likewise.\n+\t* testsuite/30_threads/mutex/lock/1.cc: Likewise.\n+\t* testsuite/30_threads/mutex/native_handle/1.cc: Likewise.\n+\t* testsuite/30_threads/mutex/native_handle/typesizes.cc: Likewise.\n+\t* testsuite/30_threads/mutex/try_lock/1.cc: Likewise.\n+\t* testsuite/30_threads/mutex/try_lock/2.cc: Likewise.\n+\t* testsuite/30_threads/mutex/unlock/1.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/49668.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/cons/2.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/cons/3.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/cons/alloc.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/cons/move.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/cons/move_assign.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/members/get_future.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/members/get_future2.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/members/invoke.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/members/invoke2.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/members/invoke3.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/members/invoke4.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/members/invoke5.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/members/reset.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/members/reset2.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/members/swap.cc: Likewise.\n+\t* testsuite/30_threads/packaged_task/members/valid.cc: Likewise.\n+\t* testsuite/30_threads/promise/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/promise/cons/alloc.cc: Likewise.\n+\t* testsuite/30_threads/promise/cons/move.cc: Likewise.\n+\t* testsuite/30_threads/promise/cons/move_assign.cc: Likewise.\n+\t* testsuite/30_threads/promise/members/get_future.cc: Likewise.\n+\t* testsuite/30_threads/promise/members/get_future2.cc: Likewise.\n+\t* testsuite/30_threads/promise/members/set_exception.cc: Likewise.\n+\t* testsuite/30_threads/promise/members/set_exception2.cc: Likewise.\n+\t* testsuite/30_threads/promise/members/set_value.cc: Likewise.\n+\t* testsuite/30_threads/promise/members/set_value2.cc: Likewise.\n+\t* testsuite/30_threads/promise/members/set_value3.cc: Likewise.\n+\t* testsuite/30_threads/promise/members/swap.cc: Likewise.\n+\t* testsuite/30_threads/recursive_mutex/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/recursive_mutex/dest/destructor_locked.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/recursive_mutex/lock/1.cc: Likewise.\n+\t* testsuite/30_threads/recursive_mutex/native_handle/1.cc: Likewise.\n+\t* testsuite/30_threads/recursive_mutex/native_handle/typesizes.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/recursive_mutex/try_lock/1.cc: Likewise.\n+\t* testsuite/30_threads/recursive_mutex/try_lock/2.cc: Likewise.\n+\t* testsuite/30_threads/recursive_mutex/unlock/1.cc: Likewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/dest/destructor_locked.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/lock/1.cc: Likewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/lock/2.cc: Likewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/native_handle/1.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/native_handle/typesizes.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock/1.cc: Likewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock/2.cc: Likewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock_for/1.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock_for/2.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock_for/3.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock_until/1.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock_until/2.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/unlock/1.cc: Likewise.\n+\t* testsuite/30_threads/shared_future/cons/move.cc: Likewise.\n+\t* testsuite/30_threads/shared_future/members/45133.cc: Likewise.\n+\t* testsuite/30_threads/shared_future/members/get.cc: Likewise.\n+\t* testsuite/30_threads/shared_future/members/get2.cc: Likewise.\n+\t* testsuite/30_threads/shared_future/members/valid.cc: Likewise.\n+\t* testsuite/30_threads/shared_future/members/wait.cc: Likewise.\n+\t* testsuite/30_threads/shared_future/members/wait_for.cc: Likewise.\n+\t* testsuite/30_threads/shared_future/members/wait_until.cc: Likewise.\n+\t* testsuite/30_threads/this_thread/1.cc: Likewise.\n+\t* testsuite/30_threads/this_thread/2.cc: Likewise.\n+\t* testsuite/30_threads/this_thread/3.cc: Likewise.\n+\t* testsuite/30_threads/this_thread/4.cc: Likewise.\n+\t* testsuite/30_threads/thread/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/thread/cons/2.cc: Likewise.\n+\t* testsuite/30_threads/thread/cons/3.cc: Likewise.\n+\t* testsuite/30_threads/thread/cons/4.cc: Likewise.\n+\t* testsuite/30_threads/thread/cons/49668.cc: Likewise.\n+\t* testsuite/30_threads/thread/cons/5.cc: Likewise.\n+\t* testsuite/30_threads/thread/cons/6.cc: Likewise.\n+\t* testsuite/30_threads/thread/cons/7.cc: Likewise.\n+\t* testsuite/30_threads/thread/cons/8.cc: Likewise.\n+\t* testsuite/30_threads/thread/cons/9.cc: Likewise.\n+\t* testsuite/30_threads/thread/cons/moveable.cc: Likewise.\n+\t* testsuite/30_threads/thread/members/1.cc: Likewise.\n+\t* testsuite/30_threads/thread/members/2.cc: Likewise.\n+\t* testsuite/30_threads/thread/members/3.cc: Likewise.\n+\t* testsuite/30_threads/thread/members/4.cc: Likewise.\n+\t* testsuite/30_threads/thread/members/5.cc: Likewise.\n+\t* testsuite/30_threads/thread/members/hardware_concurrency.cc: Likewise.\n+\t* testsuite/30_threads/thread/native_handle/typesizes.cc: Likewise.\n+\t* testsuite/30_threads/thread/swap/1.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/dest/destructor_locked.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/lock/1.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/native_handle/1.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/native_handle/typesizes.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/try_lock/1.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/try_lock/2.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/try_lock_for/1.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/try_lock_for/2.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/try_lock_for/3.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/try_lock_until/1.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/try_lock_until/2.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/unlock/1.cc: Likewise.\n+\t* testsuite/30_threads/try_lock/1.cc: Likewise.\n+\t* testsuite/30_threads/try_lock/2.cc: Likewise.\n+\t* testsuite/30_threads/try_lock/3.cc: Likewise.\n+\t* testsuite/30_threads/try_lock/4.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/cons/2.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/cons/3.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/cons/4.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/cons/5.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/cons/6.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/locking/1.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/locking/2.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/locking/3.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/locking/4.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/modifiers/1.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/modifiers/2.cc: Likewise.\n+\t* testsuite/ext/rope/pthread7-rope.cc: Likewise.\n+\t* testsuite/tr1/2_general_utilities/shared_ptr/thread/default_weaktoshared.cc:\n+\tLikewise.\n+\t* testsuite/tr1/2_general_utilities/shared_ptr/thread/mutex_weaktoshared.cc:\n+\tLikewise.\n+\n+\t* testsuite/23_containers/vector/capacity/resize/1.cc: Remove\n+\tdg-options for mips*-*-irix6*.\n+\n+\t* testsuite/27_io/ios_base/storage/1.cc: Likewise.\n+\t* testsuite/27_io/ios_base/storage/2.cc: Likewise.\n+\t* testsuite/27_io/ios_base/storage/3.cc: Likewise.\n+\n+\t* testsuite/lib/libstdc++.exp (v3-build_support): Remove IRIX 6\n+\tworkaround.\n+\n 2012-03-14  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/forward_list.h: Fix comments."}, {"sha": "65dd8baee3b3f5475af1c2501d745c79352f6275", "filename": "libstdc++-v3/config/io/basic_file_stdio.cc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,6 +1,6 @@\n // Wrapper of C-language FILE struct -*- C++ -*-\n \n-// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2006, 2007, 2009, 2010\n+// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2006, 2007, 2009, 2010, 2012\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -339,11 +339,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #ifndef _GLIBCXX_NO_IOCTL\n #ifdef FIONREAD\n     // Pipes and sockets.    \n-#ifdef _GLIBCXX_FIONREAD_TAKES_OFF_T\n-    off_t __num = 0;\n-#else\n     int __num = 0;\n-#endif\n     int __r = ioctl(this->fd(), FIONREAD, &__num);\n     if (!__r && __num >= 0)\n       return __num; "}, {"sha": "89158004298fb6a03372132e39aca277f919466b", "filename": "libstdc++-v3/config/os/irix/atomic_word.h", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fatomic_word.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fatomic_word.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fatomic_word.h?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,35 +0,0 @@\n-// Low-level type for atomic operations -*- C++ -*-\n-\n-// Copyright (C) 2004, 2009, 2010 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-/** @file bits/atomic_word.h\n- *  This is an internal header file, included by other library headers.\n- *  Do not attempt to use it directly. @headername{ext/atomicity.h}\n- */\n-\n-#ifndef _GLIBCXX_ATOMIC_WORD_H\n-#define _GLIBCXX_ATOMIC_WORD_H\t1\n-\n-typedef long _Atomic_word;\n-\n-#endif "}, {"sha": "0160a1616495338a22b3591ddecbcf5361baeec8", "filename": "libstdc++-v3/config/os/irix/atomicity.h", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fatomicity.h?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,41 +0,0 @@\n-// Low-level functions for atomic operations: IRIX version  -*- C++ -*-\n-\n-// Copyright (C) 2001, 2004, 2005, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-#include <mutex.h>\n-#include <ext/atomicity.h>\n-\n-namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n-  _Atomic_word\n-  __exchange_and_add(volatile _Atomic_word* __mem, int __val) throw ()\n-  { return (_Atomic_word) test_then_add((unsigned long*) const_cast<_Atomic_word*>(__mem), __val); }\n-\n-  void\n-  __atomic_add(volatile _Atomic_word* __mem, int __val) throw ()\n-  { __exchange_and_add(__mem, __val); }\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace"}, {"sha": "32a8716bc032d087cd5750f91420d8b5461973c8", "filename": "libstdc++-v3/config/os/irix/irix6.5/ctype_base.h", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_base.h?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,64 +0,0 @@\n-// Locale support -*- C++ -*-\n-\n-// Copyright (C) 1997, 1998, 1999, 2003, 2009, 2010\n-// Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-/** @file bits/ctype_base.h\n- *  This is an internal header file, included by other library headers.\n- *  Do not attempt to use it directly. @headername{locale}\n- */\n-\n-//\n-// ISO C++ 14882: 22.1  Locales\n-//\n-\n-// Information as gleaned from /usr/include/ctype.h on irix 6.5\n-\n-namespace std _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n-  /// @brief  Base class for ctype.\n-  struct ctype_base\n-  {\n-    // Non-standard typedefs.\n-    typedef int* \t\t__to_type;\n-\n-    // NB: Offsets into ctype<char>::_M_table force a particular size\n-    // on the mask type. Because of this, we don't use an enum.\n-    typedef unsigned int \tmask;\n-    static const mask upper    \t= _ISupper;\n-    static const mask lower \t= _ISlower;\n-    static const mask alpha \t= _ISalpha;\n-    static const mask digit \t= _ISdigit;\n-    static const mask xdigit \t= _ISxdigit;\n-    static const mask space \t= _ISspace;\n-    static const mask print \t= _ISprint;\n-    static const mask graph \t= _ISalpha | _ISdigit | _ISpunct;\n-    static const mask cntrl \t= _IScntrl;\n-    static const mask punct \t= _ISpunct;\n-    static const mask alnum \t= _ISalpha | _ISdigit;\n-  };\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace"}, {"sha": "aa2481bce02ce521ed705f6daccb8a69b41ea8a7", "filename": "libstdc++-v3/config/os/irix/irix6.5/ctype_configure_char.cc", "status": "removed", "additions": 0, "deletions": 101, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_configure_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_configure_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_configure_char.cc?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,101 +0,0 @@\n-// Locale support -*- C++ -*-\n-\n-// Copyright (C) 2011 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-/** @file ctype_configure_char.cc */\n-\n-//\n-// ISO C++ 14882: 22.1  Locales\n-//\n-\n-#include <locale>\n-#include <cstdlib>\n-#include <cstring>\n-\n-namespace std _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n-// Information as gleaned from /usr/include/ctype.h\n-\n-  const ctype_base::mask*\n-  ctype<char>::classic_table() throw()\n-  { return 0; }\n-\n-  ctype<char>::ctype(__c_locale, const mask* __table, bool __del,\n-\t\t     size_t __refs)\n-  : facet(__refs), _M_del(__table != 0 && __del),\n-  _M_toupper(NULL), _M_tolower(NULL),\n-  _M_table(!__table ?\n-\t   (const mask*) (__libc_attr._ctype_tbl->_class + 1) : __table)\n-  {\n-    memset(_M_widen, 0, sizeof(_M_widen));\n-    _M_widen_ok = 0;\n-    memset(_M_narrow, 0, sizeof(_M_narrow));\n-    _M_narrow_ok = 0;\n-  }\n-\n-  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n-  : facet(__refs), _M_del(__table != 0 && __del),\n-  _M_toupper(NULL), _M_tolower(NULL),\n-  _M_table(!__table ?\n-\t   (const mask*) (__libc_attr._ctype_tbl->_class + 1) : __table)\n-  {\n-    memset(_M_widen, 0, sizeof(_M_widen));\n-    _M_widen_ok = 0;\n-    memset(_M_narrow, 0, sizeof(_M_narrow));\n-    _M_narrow_ok = 0;\n-  }\n-\n-  char\n-  ctype<char>::do_toupper(char __c) const\n-  { return _toupper(__c); }\n-\n-  const char*\n-  ctype<char>::do_toupper(char* __low, const char* __high) const\n-  {\n-    while (__low < __high)\n-      {\n-\t*__low = do_toupper(*__low);\n-\t++__low;\n-      }\n-    return __high;\n-  }\n-\n-  char\n-  ctype<char>::do_tolower(char __c) const\n-  { return _tolower(__c); }\n-\n-  const char*\n-  ctype<char>::do_tolower(char* __low, const char* __high) const\n-  {\n-    while (__low < __high)\n-      {\n-\t*__low = do_tolower(*__low);\n-\t++__low;\n-      }\n-    return __high;\n-  }\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace"}, {"sha": "f08eea812ea78157d8f2d5b40d59c5a4a8184153", "filename": "libstdc++-v3/config/os/irix/irix6.5/ctype_inline.h", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_inline.h?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,74 +0,0 @@\n-// Locale support -*- C++ -*-\n-\n-// Copyright (C) 2000, 2002, 2009, 2010 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-/** @file bits/ctype_inline.h\n- *  This is an internal header file, included by other library headers.\n- *  Do not attempt to use it directly. @headername{locale}\n- */\n-\n-//\n-// ISO C++ 14882: 22.1  Locales\n-//\n-\n-// ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n-// functions go in ctype.cc\n-\n-namespace std _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n-  bool\n-  ctype<char>::\n-  is(mask __m, char __c) const\n-  { return (_M_table)[static_cast<unsigned char>(__c)] & __m; }\n-\n-  const char*\n-  ctype<char>::\n-  is(const char* __low, const char* __high, mask* __vec) const\n-  {\n-    while (__low < __high)\n-      *__vec++ = (_M_table)[static_cast<unsigned char>(*__low++)];\n-    return __high;\n-  }\n-\n-  const char*\n-  ctype<char>::\n-  scan_is(mask __m, const char* __low, const char* __high) const\n-  {\n-    while (__low < __high && ! this->is(__m, *__low))\n-      ++__low;\n-    return __low;\n-  }\n-\n-  const char*\n-  ctype<char>::\n-  scan_not(mask __m, const char* __low, const char* __high) const\n-  {\n-    while (__low < __high && this->is(__m, *__low))\n-      ++__low;\n-    return __low;\n-  }\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace"}, {"sha": "0e75e70c1f9d6c3b35a3dc22dfc914df3a5ccc5c", "filename": "libstdc++-v3/config/os/irix/irix6.5/os_defines.h", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6574b2b58d88f6dfc355985cd9013e918bf77/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6574b2b58d88f6dfc355985cd9013e918bf77/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fos_defines.h?ref=02f6574b2b58d88f6dfc355985cd9013e918bf77", "patch": "@@ -1,54 +0,0 @@\n-// Specific definitions for IRIX  -*- C++ -*-\n-\n-// Copyright (C) 2000, 2002, 2009, 2010 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-/** @file bits/os_defines.h\n- *  This is an internal header file, included by other library headers.\n- *  Do not attempt to use it directly. @headername{iosfwd}\n- */\n-\n-#ifndef _GLIBCXX_OS_DEFINES\n-#define _GLIBCXX_OS_DEFINES 1\n-\n-// System-specific #define, typedefs, corrections, etc, go here.  This\n-// file will come before all others.\n-\n-// We need large file support.  There are two ways to turn it on: by\n-// defining either _LARGEFILE64_SOURCE or _SGI_SOURCE.  However, it\n-// does not actually work to define only the former, as then\n-// <sys/stat.h> is invalid: `st_blocks' is defined to be a macro, but\n-// then used as a field name.  So, we have to turn on _SGI_SOURCE.\n-// That only works if _POSIX_SOURCE is turned off, so we have to\n-// explicitly turn it off.  (Some of the libio C files explicitly try\n-// to turn it on.)  _SGI_SOURCE is actually turned on implicitly via\n-// the command-line.\n-#undef _POSIX_SOURCE\n-\n-// GCC does not use thunks on IRIX. \n-#define _G_USING_THUNKS 0\n-\n-// FINOREAD takes an \"off_t *\" as argument.\n-#define _GLIBCXX_FIONREAD_TAKES_OFF_T\n-\n-#endif\n-"}, {"sha": "97b523362e4ac9317876894b3009848e6084efad", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -254,15 +254,6 @@ case \"${host_os}\" in\n   hpux*)\n     os_include_dir=\"os/hpux\"\n     ;;\n-  irix6.5*)\n-    os_include_dir=\"os/irix/irix6.5\"\n-    atomicity_dir=os/irix\n-    atomic_word_dir=os/irix\n-    # libstdc++.so relies on emutls on IRIX, which only works with the\n-    # real functions implemented in libpthread.so, not with the stubs in\n-    # libc, so always pass -lpthread.\n-    OPT_LDFLAGS=\"${OPT_LDFLAGS} -lpthread\"\n-    ;;\n   mingw32*)\n     case \"$host\" in\n       *-w64-*)"}, {"sha": "e2cf49a2f50ae5017e3bdda643e75b222a881fc0", "filename": "libstdc++-v3/doc/xml/faq.xml", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Ffaq.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Ffaq.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Ffaq.xml?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -372,9 +372,8 @@\n     <para>\n     The exact environment variable to use will depend on your\n     platform, e.g. DYLD_LIBRARY_PATH for Darwin,\n-    LD_LIBRARY_PATH_32/LD_LIBRARY_PATH_64 for Solaris 32-/64-bit,\n-    LD_LIBRARYN32_PATH/LD_LIBRARY64_PATH for Irix N32/64-bit ABIs and\n-    SHLIB_PATH for HP-UX.\n+    LD_LIBRARY_PATH_32/LD_LIBRARY_PATH_64 for Solaris 32-/64-bit\n+    and SHLIB_PATH for HP-UX.\n     </para>\n     <para>\n     See the man pages for <command>ld</command>, <command>ldd</command>"}, {"sha": "74a08ec2de3d611aa754a1f88fe68635c5bf6aba", "filename": "libstdc++-v3/doc/xml/manual/using.xml", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1181,12 +1181,6 @@ A quick read of the relevant part of the GCC\n               <literal>-Wl,-rpath,</literal><filename class=\"directory\">destdir/lib</filename>\n \t    </para>\n \t  </listitem>\n-\t  <listitem>\n-\t    <para>\n-\t      IRIX ld:\n-              <literal>-Wl,-rpath,</literal><filename class=\"directory\">destdir/lib</filename>\n-\t    </para>\n-\t  </listitem>\n \t  <listitem>\n \t  <para>\n \t    Solaris ld:"}, {"sha": "1fd18f64e1a2b560226816753d3b7f2710a6fcf0", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/thread/default_weaktoshared.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fthread%2Fdefault_weaktoshared.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fthread%2Fdefault_weaktoshared.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fthread%2Fdefault_weaktoshared.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -17,8 +17,8 @@\n \n // 20.6.6.2 Template class shared_ptr [util.smartptr.shared]\n \n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* } }\n-// { dg-options \"-pthread -std=gnu++0x\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* } }\n+// { dg-options \"-pthread -std=gnu++0x\" { target *-*-freebsd* *-*-netbsd* *-*-linux* } }\n // { dg-options \"-pthreads -std=gnu++0x\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n "}, {"sha": "97252b8e85549a697796040c83461974742088ef", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/thread/mutex_weaktoshared.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fthread%2Fmutex_weaktoshared.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fthread%2Fmutex_weaktoshared.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fthread%2Fmutex_weaktoshared.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -17,8 +17,8 @@\n \n // 20.6.6.2 Template class shared_ptr [util.smartptr.shared]\n \n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n "}, {"sha": "8974ec8c30c8c9917d8a3ed62e49009e09efc6d1", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/pthread18185.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fpthread18185.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fpthread18185.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fpthread18185.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -16,8 +16,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* } }\n-// { dg-options \"-pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* } }\n+// { dg-options \"-pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* } }\n // { dg-options \"-pthreads\" { target *-*-solaris* } }\n \n #include <ext/new_allocator.h>"}, {"sha": "6df08aee1c3ee041dc82613caeff8f739cd9364c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/pthread4.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fpthread4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fpthread4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fpthread4.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -20,8 +20,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* } }\n-// { dg-options \"-pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* } }\n+// { dg-options \"-pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* } }\n // { dg-options \"-pthreads\" { target *-*-solaris* } }\n \n #include <string>"}, {"sha": "34ad752a2f0fd91ec90d56d93b19cb9bf2c37d6b", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/12658_thread-1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F12658_thread-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F12658_thread-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F12658_thread-1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* } }\n-// { dg-options \"-pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* } }\n+// { dg-options \"-pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* } }\n // { dg-options \"-pthreads\" { target *-*-solaris* } }\n // { dg-require-namedlocale \"en_US\" }\n // { dg-require-namedlocale \"fr_FR\" }"}, {"sha": "e5d1ee37e3d1e7f6c94e7c447aa466a4cdcbd4b2", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/12658_thread-2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F12658_thread-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F12658_thread-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F12658_thread-2.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* } }\n-// { dg-options \"-pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* } }\n+// { dg-options \"-pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* } }\n // { dg-options \"-pthreads\" { target *-*-solaris* } }\n // { dg-require-namedlocale \"en_US\" }\n // { dg-require-namedlocale \"fr_FR\" }"}, {"sha": "b95269841ea177ec8f7d69066470ee2c745deeab", "filename": "libstdc++-v3/testsuite/23_containers/list/pthread1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fpthread1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fpthread1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fpthread1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -18,8 +18,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* } }\n-// { dg-options \"-pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* } }\n+// { dg-options \"-pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* } }\n // { dg-options \"-pthreads\" { target *-*-solaris* } }\n \n // This multi-threading C++/STL/POSIX code adheres to rules outlined here:"}, {"sha": "881fbbaf6dd5d9533a5f0870b3094738c8137b01", "filename": "libstdc++-v3/testsuite/23_containers/list/pthread5.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fpthread5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fpthread5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fpthread5.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -20,8 +20,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* } }\n-// { dg-options \"-pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* } }\n+// { dg-options \"-pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* } }\n // { dg-options \"-pthreads\" { target *-*-solaris* } }\n \n #include <vector>"}, {"sha": "49731d48988b6f6f2f97453cbee91c297611bbc2", "filename": "libstdc++-v3/testsuite/23_containers/map/pthread6.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fpthread6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fpthread6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fpthread6.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -19,8 +19,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* } }\n-// { dg-options \"-pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* } }\n+// { dg-options \"-pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* } }\n // { dg-options \"-pthreads\" { target *-*-solaris* } }\n \n #include <string>"}, {"sha": "5fc5eb8e822899027c484b3d2aa7f95e3b98f1a3", "filename": "libstdc++-v3/testsuite/23_containers/vector/capacity/resize/1.cc", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2Fresize%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2Fresize%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2Fresize%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,7 +1,8 @@\n // 1999-05-07\n // bkoz \n \n-// Copyright (C) 1999, 2002, 2004, 2005, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2002, 2004, 2005, 2009, 2012\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,11 +21,6 @@\n \n // 23.2.4.2 vector capacity\n \n-// XXX This test will not work for irix6 because of bug(s) in libc malloc\n-// XXX for very large allocations.  However -lmalloc seems to work.\n-// See http://gcc.gnu.org/ml/libstdc++/2002-12/msg00131.html\n-// { dg-options \"-lmalloc\" { target mips*-*-irix6* } }\n-\n // This fails on some versions of Darwin 8 because malloc doesn't return\n // NULL even if an allocation fails (filed as Radar 3884894).\n // { dg-do run { xfail *-*-darwin8.[0-4].* } }"}, {"sha": "74aaa76a9e53b8142b7c7a8f820ed24e10c50e7a", "filename": "libstdc++-v3/testsuite/23_containers/vector/debug/multithreaded_swap.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Fmultithreaded_swap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Fmultithreaded_swap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Fmultithreaded_swap.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "a894c0aaa81d14825423cdcf57ccfaafe51333df", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/pthread2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fpthread2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fpthread2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fpthread2.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -19,8 +19,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* } }\n-// { dg-options \"-pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* } }\n+// { dg-options \"-pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* } }\n // { dg-options \"-pthreads\" { target *-*-solaris* } }\n \n #include <fstream>"}, {"sha": "9174475e8d5dc55d7cb115270a713b629717643e", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/pthread3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fpthread3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fpthread3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fpthread3.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -19,8 +19,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* } }\n-// { dg-options \"-pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* } }\n+// { dg-options \"-pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* } }\n // { dg-options \"-pthreads\" { target *-*-solaris* } }\n \n #include <sstream>"}, {"sha": "b72ee1a2ae3d3e6f9e2b216cbd3e93d8ea503e0c", "filename": "libstdc++-v3/testsuite/27_io/ios_base/storage/1.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,6 +1,6 @@\n // 2000-12-19 bkoz\n \n-// Copyright (C) 2000, 2002, 2003, 2004, 2009 Free Software Foundation\n+// Copyright (C) 2000, 2002, 2003, 2004, 2009, 2012 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,12 +19,6 @@\n \n // 27.4.2.5 ios_base storage functions\n \n-// XXX This test will not work for some versions of irix6 because of\n-// XXX bug(s) in libc malloc for very large allocations.  However\n-// XXX -lmalloc seems to work.\n-// See http://gcc.gnu.org/ml/gcc/2002-05/msg01012.html\n-// { dg-options \"-lmalloc\" { target mips*-*-irix6* } }\n-\n #include <sstream>\n #include <iostream>\n #include <testsuite_hooks.h>"}, {"sha": "da1b74e5e8be133599392f2fea2987f22b9fd64c", "filename": "libstdc++-v3/testsuite/27_io/ios_base/storage/2.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F2.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,6 +1,6 @@\n // 2000-12-19 bkoz\n \n-// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009, 2012\n // Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -20,12 +20,6 @@\n \n // 27.4.2.5 ios_base storage functions\n \n-// XXX This test will not work for some versions of irix6 because of\n-// XXX bug(s) in libc malloc for very large allocations.  However\n-// XXX -lmalloc seems to work.\n-// See http://gcc.gnu.org/ml/gcc/2002-05/msg01012.html\n-// { dg-options \"-lmalloc\" { target mips*-*-irix6* } }\n-\n // This fails on some versions of Darwin 8 because malloc doesn't return\n // NULL even if an allocation fails (filed as Radar 3884894).\n // { dg-do run { xfail *-*-darwin8.[0-4].* } }"}, {"sha": "db6ac4ef767cefcf7a5b05cfe59034903494f070", "filename": "libstdc++-v3/testsuite/27_io/ios_base/storage/3.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F3.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,6 +1,6 @@\n // 2000-12-19 bkoz\n \n-// Copyright (C) 2000, 2002, 2003, 2004, 2009 Free Software Foundation\n+// Copyright (C) 2000, 2002, 2003, 2004, 2009, 2012 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,12 +19,6 @@\n \n // 27.4.2.5 ios_base storage functions\n \n-// XXX This test will not work for some versions of irix6 because of\n-// XXX bug(s) in libc malloc for very large allocations.  However\n-// XXX -lmalloc seems to work.\n-// See http://gcc.gnu.org/ml/gcc/2002-05/msg01012.html\n-// { dg-options \"-lmalloc\" { target mips*-*-irix6* } }\n-\n #include <sstream>\n #include <iostream>\n #include <testsuite_hooks.h>"}, {"sha": "04bd6cf46c4ed1a01c7fe220665712a9c87c506f", "filename": "libstdc++-v3/testsuite/30_threads/async/42819.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2F42819.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2F42819.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2F42819.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "a07ec93a647aa060073768d25571b2583a786b70", "filename": "libstdc++-v3/testsuite/30_threads/async/49668.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2F49668.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2F49668.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2F49668.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "d7cdda28146274de5c38899ef6d238cdfdb1c6c5", "filename": "libstdc++-v3/testsuite/30_threads/async/any.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fany.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fany.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fany.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "bf91bd684830c99760d8aac416b5d8b0b1b2febd", "filename": "libstdc++-v3/testsuite/30_threads/async/async.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fasync.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fasync.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fasync.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "4e93a1ad2fdce51c5c3d36634cee87a34161795a", "filename": "libstdc++-v3/testsuite/30_threads/async/launch.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Flaunch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Flaunch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Flaunch.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "fa311aacbe4cf6f8f5d92db4ffeca430e6318119", "filename": "libstdc++-v3/testsuite/30_threads/async/sync.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fsync.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fsync.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fsync.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "1e2630957cf84e991982b17b9d4d41f397dd1445", "filename": "libstdc++-v3/testsuite/30_threads/call_once/39909.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2F39909.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2F39909.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2F39909.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "daf8b9971fa53f7e85a4b36ab9050ed79c92edd8", "filename": "libstdc++-v3/testsuite/30_threads/call_once/49668.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2F49668.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2F49668.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2F49668.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "53ac70d14eb55cef9fb4f544c87c000b23a7c998", "filename": "libstdc++-v3/testsuite/30_threads/call_once/call_once1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2Fcall_once1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2Fcall_once1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2Fcall_once1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "664d22f279ab803a3533af6fe2e93f58b14816df", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/cons/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "7d556d8e2607fb882703fc4cb748960c5b1d4bea", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/members/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "d5986960cbd99371808e8e7aecde146b7544a29f", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/members/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F2.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "a791fd45c3f3de30379d4ffd962feb7eab3aab30", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/native_handle/typesizes.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fnative_handle%2Ftypesizes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fnative_handle%2Ftypesizes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fnative_handle%2Ftypesizes.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "5216044db50ebbf956a232bbc20d740f8a8e93c7", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/50862.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2F50862.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2F50862.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2F50862.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "139cf3b1625438c7aed391f0b796e4b1e69ea38a", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/cons/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "d4abd386234ee236386bb67c2aeb0a45a6365c04", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/members/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fmembers%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fmembers%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fmembers%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "a12e71dc663e161bf81ea496e99e7436845f9ca4", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/members/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fmembers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fmembers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fmembers%2F2.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "69f76f6c16f3a8433917b90c6e2c7e48818b8c67", "filename": "libstdc++-v3/testsuite/30_threads/future/cons/move.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fcons%2Fmove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fcons%2Fmove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fcons%2Fmove.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "a5c0c53b3154710c3a594867f16bff77e05596c8", "filename": "libstdc++-v3/testsuite/30_threads/future/members/45133.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2F45133.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2F45133.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2F45133.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "8534eb7bd90d03945cf0754ad9df094ce081828b", "filename": "libstdc++-v3/testsuite/30_threads/future/members/get.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fget.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fget.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fget.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "96938642dba2a261385f862f44cbdfdf634f4f48", "filename": "libstdc++-v3/testsuite/30_threads/future/members/get2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fget2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fget2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fget2.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "50206aca845ce2e4dfa6aeff065e9461b2093eba", "filename": "libstdc++-v3/testsuite/30_threads/future/members/share.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fshare.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fshare.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fshare.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "97485622102e9cecded3d5faab7900eae3745b93", "filename": "libstdc++-v3/testsuite/30_threads/future/members/valid.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fvalid.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fvalid.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fvalid.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "5225e19ec401f66101cc9925b456b600e4552337", "filename": "libstdc++-v3/testsuite/30_threads/future/members/wait.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fwait.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fwait.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fwait.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "4036eb32ff8507dbe958b09f30675c01a2c1e32b", "filename": "libstdc++-v3/testsuite/30_threads/future/members/wait_for.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fwait_for.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fwait_for.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fwait_for.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "7da8f08ad8f3b79b5ba58432177adef5f197d37c", "filename": "libstdc++-v3/testsuite/30_threads/future/members/wait_until.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fwait_until.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fwait_until.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fwait_until.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "cae7a87d094abf70b3f8a1216d5eef3057e97b84", "filename": "libstdc++-v3/testsuite/30_threads/lock/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "265f7509b60b30b9ef2c45ebd454557e158e24c0", "filename": "libstdc++-v3/testsuite/30_threads/lock/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock%2F2.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "16045926eb4e696c98b47efcab384f79680e86fa", "filename": "libstdc++-v3/testsuite/30_threads/lock/3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock%2F3.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "e8c6adce4b215772cf9fd4516879f42f129250bd", "filename": "libstdc++-v3/testsuite/30_threads/lock/4.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock%2F4.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "e9fb14957028f95d684853ef687811577a1ca2f9", "filename": "libstdc++-v3/testsuite/30_threads/lock_guard/cons/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock_guard%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock_guard%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock_guard%2Fcons%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "b9913902847c28a5a31cca6ab1f4eb575a10e472", "filename": "libstdc++-v3/testsuite/30_threads/mutex/cons/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "1a943af5e81d3b8eaee7b36d5c099c99ba8a4c76", "filename": "libstdc++-v3/testsuite/30_threads/mutex/dest/destructor_locked.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fdest%2Fdestructor_locked.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fdest%2Fdestructor_locked.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fdest%2Fdestructor_locked.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "ac3f78eef800b845fa3433d600b22b6e6341df03", "filename": "libstdc++-v3/testsuite/30_threads/mutex/lock/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Flock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Flock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Flock%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "8a02596654675c7c718679924d9a7f09bd73908b", "filename": "libstdc++-v3/testsuite/30_threads/mutex/native_handle/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fnative_handle%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fnative_handle%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fnative_handle%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "d7eee765d8630b091f3b94e3cb546210fda92fe3", "filename": "libstdc++-v3/testsuite/30_threads/mutex/native_handle/typesizes.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fnative_handle%2Ftypesizes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fnative_handle%2Ftypesizes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fnative_handle%2Ftypesizes.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "75c3438f5bf458b30d8a05d066839c3600d94835", "filename": "libstdc++-v3/testsuite/30_threads/mutex/try_lock/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Ftry_lock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Ftry_lock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Ftry_lock%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "3f59fb05de3a4a4332fe86963c838e5bbfb22167", "filename": "libstdc++-v3/testsuite/30_threads/mutex/try_lock/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Ftry_lock%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Ftry_lock%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Ftry_lock%2F2.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "8cbf00fc5f8e7e877a32589b980b8045b4775f60", "filename": "libstdc++-v3/testsuite/30_threads/mutex/unlock/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Funlock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Funlock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Funlock%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "6a87eebd7cb3ee6700fa5e961e901ce742760f87", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/49668.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2F49668.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2F49668.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2F49668.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "3f2aaaab0f7b38333d7f83be212e0dc7774ea69c", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/cons/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "35673cfeb3428cb4d0e18104e0fc9ce3d5bba160", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/cons/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2F2.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "b66f5c98f4576c5ea686363213207d71df93967c", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/cons/3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2F3.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "ed60aedafba401580dd4f63a256ecfee69aa4615", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/cons/alloc.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Falloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Falloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Falloc.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "53ca992e98abf056754e0800ef45ee3159f8958b", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/cons/move.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fmove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fmove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fmove.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "e8a772e3b2be17bcc0ca28e82fa5244859fea1b6", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/cons/move_assign.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fmove_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fmove_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fmove_assign.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "6a7749937406331ca512ff254ef204f8fb2aa5ab", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/members/get_future.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Fget_future.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Fget_future.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Fget_future.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "84efb2703a3862f857e2f5509ae03e1254987300", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/members/get_future2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Fget_future2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Fget_future2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Fget_future2.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "cb0b46aad87b35d473af4bf47d544cdbbf3de23d", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/members/invoke.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "58bac1fa405a7a5eb1b37351fff031a13f0afb51", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/members/invoke2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke2.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "4ded4fe75281f04f1d46514dc9d4f6dd2bd19ff0", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/members/invoke3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke3.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "c69ebbcd946b4bc6ca50586fd2807665cf891632", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/members/invoke4.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke4.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "bd859a567805b47388a67643650329c38f02571a", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/members/invoke5.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke5.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "963a4341c40ef6dcc7aea7be912fe9c5df73b27c", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/members/reset.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Freset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Freset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Freset.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "7b69a0624762bb55431c7a7b9db35da4b91b6e54", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/members/reset2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Freset2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Freset2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Freset2.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "7c994b7174c2bb606dd8221571948b3562262dba", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/members/swap.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Fswap.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "a3ab84e81131c46cc4ecb3480a769398c5f216ed", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/members/valid.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Fvalid.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Fvalid.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Fvalid.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "21cb0b0dc9a0c440b2496f5359adec784eead986", "filename": "libstdc++-v3/testsuite/30_threads/promise/cons/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "ddbc33fabb174afea5b4c8c29a8e26b1c72ed57f", "filename": "libstdc++-v3/testsuite/30_threads/promise/cons/alloc.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Falloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Falloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Falloc.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "38c558ad079de9f41b934f44cbad2469fb4f1e95", "filename": "libstdc++-v3/testsuite/30_threads/promise/cons/move.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fmove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fmove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fmove.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "ff516179ef8edbce0c5cef221ade38ff132f6f31", "filename": "libstdc++-v3/testsuite/30_threads/promise/cons/move_assign.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fmove_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fmove_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fmove_assign.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "3cd184880d51beb0f1ef47b32a26d7b39dab891f", "filename": "libstdc++-v3/testsuite/30_threads/promise/members/get_future.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fget_future.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fget_future.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fget_future.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "2e82bdcef3b245f1919123818f2bc91d35c562a6", "filename": "libstdc++-v3/testsuite/30_threads/promise/members/get_future2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fget_future2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fget_future2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fget_future2.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "7cb5265ae919cd6ed963216d4a18a2d1bfa6d95f", "filename": "libstdc++-v3/testsuite/30_threads/promise/members/set_exception.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_exception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_exception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_exception.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "e2de541110daa5ba8b31a3106b9e3a76e570caa5", "filename": "libstdc++-v3/testsuite/30_threads/promise/members/set_exception2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_exception2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_exception2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_exception2.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "39ff0231645ab02f6d91fd58e538b65dd9125f18", "filename": "libstdc++-v3/testsuite/30_threads/promise/members/set_value.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_value.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "3f431090eba800e706d0c623ac8c88c3e185b544", "filename": "libstdc++-v3/testsuite/30_threads/promise/members/set_value2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_value2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_value2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_value2.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "18fb7346d108e0b9ef2ce96267e4608e219c87b3", "filename": "libstdc++-v3/testsuite/30_threads/promise/members/set_value3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_value3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_value3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_value3.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "dae380417d46e3c833e2af944361280bda8ca8ce", "filename": "libstdc++-v3/testsuite/30_threads/promise/members/swap.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fswap.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "e276ae3b5c32a38d178aec28d8c25b69c2a41f52", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/cons/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "799dbb51bd743eaeafb8b7c8d6c0ec374ee96594", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/dest/destructor_locked.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fdest%2Fdestructor_locked.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fdest%2Fdestructor_locked.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fdest%2Fdestructor_locked.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "59d3f3ee75bc26dce72f913fc2362b8dc72203c5", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/lock/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Flock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Flock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Flock%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "a5491dca6f7aa42103cd6ffa8dc236b1d34e2120", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/native_handle/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fnative_handle%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fnative_handle%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fnative_handle%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "26655b48c7688b04f87833612a2c9140ccb00049", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/native_handle/typesizes.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fnative_handle%2Ftypesizes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fnative_handle%2Ftypesizes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fnative_handle%2Ftypesizes.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "6e5167c6063b89eeeb080ce7caf7edded429ccc2", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/try_lock/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Ftry_lock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Ftry_lock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Ftry_lock%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "f14d74e3e036a08b6719d2a1771ab2fc726a9bc2", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/try_lock/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Ftry_lock%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Ftry_lock%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Ftry_lock%2F2.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "cf6ec98ac881042830291043012f0c5fe218879f", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/unlock/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Funlock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Funlock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Funlock%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "191517e3c9c707b1b422254c79aaca0c3d9c1872", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/cons/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "20a91d563fbbc39387fc4cacad4131babc0da635", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/dest/destructor_locked.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fdest%2Fdestructor_locked.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fdest%2Fdestructor_locked.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fdest%2Fdestructor_locked.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "c8cec4e6f7cb07b305043bc0d62ec01c1d35cf6d", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/lock/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Flock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Flock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Flock%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "f577b7a3b0cc01cc8cf859beeffc87babf7eca85", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/lock/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Flock%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Flock%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Flock%2F2.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "c3eb5247491f5e65b1b6ed8c069e418b3c9e2c69", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/native_handle/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fnative_handle%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fnative_handle%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fnative_handle%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "02c5666f77d3d05f961a6d21aa993e6997edca32", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/native_handle/typesizes.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fnative_handle%2Ftypesizes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fnative_handle%2Ftypesizes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fnative_handle%2Ftypesizes.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "4846411726be240c5c518129b38e736691af67ee", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/try_lock/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "a31ca89b11c1f45b4ca3aac30b50c88bd74ce69c", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/try_lock/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock%2F2.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \"-std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \"-std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \"-std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \"-std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "d953689770673c8271450cc30cc36180d36c5e60", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/try_lock_for/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_for%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_for%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_for%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "7cc479ef16c88c1cbb3e7c231fe386b7878e8027", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/try_lock_for/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_for%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_for%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_for%2F2.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "07bb52306fcfac8d4e619e24dd7e3a98c20bccf1", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/try_lock_for/3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_for%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_for%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_for%2F3.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "4846411726be240c5c518129b38e736691af67ee", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/try_lock_until/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "cd8ab85049645e2a75141a2db3e5f023ca7c21f1", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/try_lock_until/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2F2.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "79e9d0d3d7da2ef3fb7e2cb5019aa69b025b94cf", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/unlock/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Funlock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Funlock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Funlock%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "18fcd004f7a8f6e3066df22be4f47eaad247cd84", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/cons/move.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fcons%2Fmove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fcons%2Fmove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fcons%2Fmove.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "adb0570e1a7b7babbb6706a7c471cc22cb012fb6", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/members/45133.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2F45133.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2F45133.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2F45133.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "4c8ef822f087e2bd48a84294ad76e9bc8f8416d9", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/members/get.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fget.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fget.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fget.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "86dfd5e2421a0e9e222c902b3ed478d38724fe25", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/members/get2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fget2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fget2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fget2.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "19cb3c1d6889b67bb156454f73b6517801f6ecec", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/members/valid.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fvalid.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fvalid.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fvalid.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "339f7eb73e145435ba7dcfc12d5afc6d899d8ae0", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/members/wait.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fwait.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fwait.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fwait.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "d54d9a87fa131f6fc2570605dd8c6972165c3edb", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/members/wait_for.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fwait_for.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fwait_for.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fwait_for.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "212a910fc760bcc4c28fb41de852f80c3079555d", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/members/wait_until.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fwait_until.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fwait_until.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fwait_until.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "1e18178c59851c7070096195bb820fda38b89200", "filename": "libstdc++-v3/testsuite/30_threads/this_thread/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "f6b4740713f466087108e4374e761f4dad26b18a", "filename": "libstdc++-v3/testsuite/30_threads/this_thread/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F2.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "b765f86aec932218f11e13a89109b52f63c35477", "filename": "libstdc++-v3/testsuite/30_threads/this_thread/3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F3.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "2f8e27ad1670c02611015667a3c0416e2ce58adc", "filename": "libstdc++-v3/testsuite/30_threads/this_thread/4.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F4.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "939612d86f2245c6ddc0e130452104187881aa56", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "a76404f2ee2146de6fe1165864da82025be76a99", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F2.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "93e472f9ffc92aeb3a834a4e50492cbf35fb34d5", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F3.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "e76bb4c3e94e69f4159c75f05e67a507d6d7d500", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/4.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F4.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "3fc0ea0d779923d4cbb2885292b6728a024c58c2", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/49668.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F49668.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F49668.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F49668.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "f589bf3f178f3942f36e3cd2f3bc66eb68c7e8f7", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/5.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F5.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "e06a45350587661b5fab3d9a641696235c55b79a", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/6.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F6.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "82e4ffe3b8bd8e82f42d1edfd83775e12369c6ca", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/7.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F7.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "11f971d57f23a85214095ba1dc9340c8201919a9", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/8.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F8.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "8f5014d5aa99705add281a419fbb4f8c5dfcd3d8", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/9.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F9.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F9.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F9.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "78217092ae51e2e976e0965b84097c0313563c4e", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/moveable.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fmoveable.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "889c386d8478eacb6887f71d9050160d778812a3", "filename": "libstdc++-v3/testsuite/30_threads/thread/members/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmembers%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmembers%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmembers%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "ab407dc721a74d562a7b80043ab2378bd3b4dbf1", "filename": "libstdc++-v3/testsuite/30_threads/thread/members/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmembers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmembers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmembers%2F2.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "df0573c372be4b86731bf1f6599eb99022cc1d13", "filename": "libstdc++-v3/testsuite/30_threads/thread/members/3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmembers%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmembers%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmembers%2F3.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "e6df22eab306852e38ac5e9196cef64bfc947406", "filename": "libstdc++-v3/testsuite/30_threads/thread/members/4.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmembers%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmembers%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmembers%2F4.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "1dcd6f8ed5a68c7e43bdc16bb8be36600013cb9a", "filename": "libstdc++-v3/testsuite/30_threads/thread/members/5.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmembers%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmembers%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmembers%2F5.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "11ae335ea07c3cc478a9d14068294ac16527ef3d", "filename": "libstdc++-v3/testsuite/30_threads/thread/members/hardware_concurrency.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmembers%2Fhardware_concurrency.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmembers%2Fhardware_concurrency.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmembers%2Fhardware_concurrency.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "df9d3dd1eb498c58d4356b820fd2ecd79523a251", "filename": "libstdc++-v3/testsuite/30_threads/thread/native_handle/typesizes.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fnative_handle%2Ftypesizes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fnative_handle%2Ftypesizes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fnative_handle%2Ftypesizes.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-linux* *-*-solaris* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-linux* *-*-solaris* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }"}, {"sha": "cddb3b1c9b1380c2012286020bcdc9bebb006465", "filename": "libstdc++-v3/testsuite/30_threads/thread/swap/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fswap%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fswap%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fswap%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "038fab66d70602e7766c390717eb1e5a8e03d2fd", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/cons/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "6da11141413bf84ba62ef5946a8aac993fe279aa", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/dest/destructor_locked.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fdest%2Fdestructor_locked.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fdest%2Fdestructor_locked.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fdest%2Fdestructor_locked.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "ef30aaaf46487ba1c8b0f74224308194581efed3", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/lock/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Flock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Flock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Flock%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "8e8ee6939a20c24588b470a9fdbc6f26d173592f", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/native_handle/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fnative_handle%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fnative_handle%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fnative_handle%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "fa8e45e69e5d6e3453b3b11aefaa9dc79ab1f65a", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/native_handle/typesizes.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fnative_handle%2Ftypesizes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fnative_handle%2Ftypesizes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fnative_handle%2Ftypesizes.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "ce230b49a14b10fe94231db4d53da6f282655db8", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "9877ae126ecbf8694925b0555556ed6498454de9", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock%2F2.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "d7ca0b36c329c89fc4c86fe33b17b3021599ff8e", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock_for/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_for%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_for%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_for%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "7099a22d4f78bb7808a3003fb390916094207cfd", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock_for/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_for%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_for%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_for%2F2.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "f24bfa8cfa1dde9c76bf9800d3f49e9dffcff03d", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock_for/3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_for%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_for%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_for%2F3.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "ce230b49a14b10fe94231db4d53da6f282655db8", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock_until/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "9877ae126ecbf8694925b0555556ed6498454de9", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock_until/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F2.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "48eeec0634aa8164f84464e152e5445e4d0a3423", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/unlock/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Funlock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Funlock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Funlock%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "0e9c69dbe76285eaf943361680a8a103b8ef3387", "filename": "libstdc++-v3/testsuite/30_threads/try_lock/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftry_lock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftry_lock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftry_lock%2F1.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "d79d23caef6a0521303c0516b9b0f3006017b933", "filename": "libstdc++-v3/testsuite/30_threads/try_lock/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftry_lock%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftry_lock%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftry_lock%2F2.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "7c73fc3ed52b3e448f257cf4bad4bbd3042cda35", "filename": "libstdc++-v3/testsuite/30_threads/try_lock/3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftry_lock%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftry_lock%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftry_lock%2F3.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}, {"sha": "b4430554b630dc1a71ccebb50dd2f0a25ee4ce29", "filename": "libstdc++-v3/testsuite/30_threads/try_lock/4.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftry_lock%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24513a1a2bb350286e09bb124c3dbcea348be92/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftry_lock%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftry_lock%2F4.cc?ref=b24513a1a2bb350286e09bb124c3dbcea348be92", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* mips-sgi-irix6* powerpc-ibm-aix* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* mips-sgi-irix6* powerpc-ibm-aix* } }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* powerpc-ibm-aix* } }\n // { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }"}]}