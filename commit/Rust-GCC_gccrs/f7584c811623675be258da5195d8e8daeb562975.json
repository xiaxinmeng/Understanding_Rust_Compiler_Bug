{"sha": "f7584c811623675be258da5195d8e8daeb562975", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc1ODRjODExNjIzNjc1YmUyNThkYTUxOTVkOGU4ZGFlYjU2Mjk3NQ==", "commit": {"author": {"name": "David Pagan", "email": "dave.pagan@oracle.com", "date": "2018-05-02T17:22:26Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-05-02T17:22:26Z"}, "message": "re PR c/30552 (gcc crashes when compiling examples with GNU statement expressions in VLAs (also involved: nested functions declared K&R-style))\n\n\tPR c/30552\n\t* c-decl.c (old_style_parameter_scope): New function.\n\t* c-parser.c (c_parser_postfix_expression): Check for statement\n\texpressions in old-style function parameter list declarations.\n\t* c-parser.h (old_style_parameter_scope): New extern declaration.\n\n\tPR c/30552\n\t* gcc.dg/noncompile/pr30552-1.c: New test.\n\t* gcc.dg/noncompile/pr30552-2.c: New test.\n\t* gcc.dg/noncompile/pr30552-3.c: New test.\n\t* gcc.dg/noncompile/pr30552-4.c: New test.\n\nFrom-SVN: r259849", "tree": {"sha": "efbf7e13707325d8fd0fe006a25ea5ece053f911", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efbf7e13707325d8fd0fe006a25ea5ece053f911"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7584c811623675be258da5195d8e8daeb562975", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7584c811623675be258da5195d8e8daeb562975", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7584c811623675be258da5195d8e8daeb562975", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7584c811623675be258da5195d8e8daeb562975/comments", "author": null, "committer": null, "parents": [{"sha": "621af561737ae17f6b4cffad9b79b1189503f011", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/621af561737ae17f6b4cffad9b79b1189503f011", "html_url": "https://github.com/Rust-GCC/gccrs/commit/621af561737ae17f6b4cffad9b79b1189503f011"}], "stats": {"total": 99, "additions": 98, "deletions": 1}, "files": [{"sha": "d88d70d99fc7a2aac5864df1c9a737478d885de3", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7584c811623675be258da5195d8e8daeb562975/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7584c811623675be258da5195d8e8daeb562975/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=f7584c811623675be258da5195d8e8daeb562975", "patch": "@@ -1,3 +1,11 @@\n+2018-05-02  David Pagan  <dave.pagan@oracle.com>\n+\n+\tPR c/30552\n+\t* c-decl.c (old_style_parameter_scope): New function.\n+\t* c-parser.c (c_parser_postfix_expression): Check for statement\n+\texpressions in old-style function parameter list declarations.\n+\t* c-parser.h (old_style_parameter_scope): New extern declaration.\n+\n 2018-04-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/84307"}, {"sha": "3c4b18edf562b18a108e48df20d3bec0713377ee", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7584c811623675be258da5195d8e8daeb562975/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7584c811623675be258da5195d8e8daeb562975/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=f7584c811623675be258da5195d8e8daeb562975", "patch": "@@ -952,6 +952,17 @@ global_bindings_p (void)\n   return current_scope == file_scope;\n }\n \n+/* Return true if we're declaring parameters in an old-style function\n+   declaration.  */\n+\n+bool\n+old_style_parameter_scope (void)\n+{\n+  /* If processing parameters and there is no function statement list, we\n+   * have an old-style function declaration.  */\n+  return (current_scope->parm_flag && !DECL_SAVED_TREE (current_function_decl));\n+}\n+\n void\n keep_next_level (void)\n {"}, {"sha": "6b41a615dbd480559792aa62adcc1e7acb91d57b", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7584c811623675be258da5195d8e8daeb562975/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7584c811623675be258da5195d8e8daeb562975/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=f7584c811623675be258da5195d8e8daeb562975", "patch": "@@ -7930,7 +7930,10 @@ c_parser_postfix_expression (c_parser *parser)\n \t  c_parser_consume_token (parser);\n \t  brace_loc = c_parser_peek_token (parser)->location;\n \t  c_parser_consume_token (parser);\n-\t  if (!building_stmt_list_p ())\n+\t  /* If we've not yet started the current function's statement list,\n+\t     or we're in the parameter scope of an old-style function\n+\t     declaration, statement expressions are not allowed.  */\n+\t  if (!building_stmt_list_p () || old_style_parameter_scope ())\n \t    {\n \t      error_at (loc, \"braced-group within expression allowed \"\n \t\t\t\"only inside a function\");"}, {"sha": "c9d38ace96c918044228d8070461e159afabd674", "filename": "gcc/c/c-parser.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7584c811623675be258da5195d8e8daeb562975/gcc%2Fc%2Fc-parser.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7584c811623675be258da5195d8e8daeb562975/gcc%2Fc%2Fc-parser.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.h?ref=f7584c811623675be258da5195d8e8daeb562975", "patch": "@@ -155,6 +155,9 @@ extern c_token * c_parser_tokens_buf (c_parser *parser, unsigned n);\n extern bool c_parser_error (c_parser *parser);\n extern void c_parser_set_error (c_parser *parser, bool);\n \n+/* A bit of a hack to have this here.  It would be better in a c-decl.h.  */\n+extern bool old_style_parameter_scope (void);\n+\n /* Return true if the next token from PARSER has the indicated\n    TYPE.  */\n "}, {"sha": "63750af34950db9d161c960791149f2c62f1b90f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7584c811623675be258da5195d8e8daeb562975/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7584c811623675be258da5195d8e8daeb562975/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f7584c811623675be258da5195d8e8daeb562975", "patch": "@@ -1,3 +1,11 @@\n+2018-05-02  David Pagan  <dave.pagan@oracle.com>\n+\n+\tPR c/30552\n+\t* gcc.dg/noncompile/pr30552-1.c: New test.\n+\t* gcc.dg/noncompile/pr30552-2.c: New test.\n+\t* gcc.dg/noncompile/pr30552-3.c: New test.\n+\t* gcc.dg/noncompile/pr30552-4.c: New test.\n+\n 2018-05-02  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/85597"}, {"sha": "a19d9e08fe9252919ddb8a1df9b7e06130b6fb34", "filename": "gcc/testsuite/gcc.dg/noncompile/pr30552-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7584c811623675be258da5195d8e8daeb562975/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr30552-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7584c811623675be258da5195d8e8daeb562975/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr30552-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr30552-1.c?ref=f7584c811623675be258da5195d8e8daeb562975", "patch": "@@ -0,0 +1,17 @@\n+/* PR c/30552 */\n+\n+/* Statement expression as formal array argument size in nested old-style \n+   function declaration should generate user error, not internal compiler \n+   error.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+int main()\n+{\n+  void fun(int a) /* { dg-error \"old-style parameter declarations in prototyped function definition\" } */\n+    int a[({void h(){}2;})]; /* { dg-error \"braced-group within expression allowed only inside a function\" } */\n+  {\n+  }\n+  return 0;\n+}"}, {"sha": "d88488397c6dfdb4873e5b48f69da190e7cabdc0", "filename": "gcc/testsuite/gcc.dg/noncompile/pr30552-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7584c811623675be258da5195d8e8daeb562975/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr30552-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7584c811623675be258da5195d8e8daeb562975/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr30552-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr30552-2.c?ref=f7584c811623675be258da5195d8e8daeb562975", "patch": "@@ -0,0 +1,17 @@\n+/* PR c/30552 */\n+\n+/* Another example of a statement expression as formal array argument size in\n+ * nested old-style function declaration should generate user error, not \n+ * internal compiler error.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+int main()\n+{\n+  void fun(a)\n+    int a[({int b=2; b;})]; /* { dg-error \"braced-group within expression allowed only inside a function\" } */\n+  {\n+  }\n+  return 0;\n+}"}, {"sha": "7b48e763ece01d2eced7133d254c160001ac2bf3", "filename": "gcc/testsuite/gcc.dg/noncompile/pr30552-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7584c811623675be258da5195d8e8daeb562975/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr30552-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7584c811623675be258da5195d8e8daeb562975/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr30552-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr30552-3.c?ref=f7584c811623675be258da5195d8e8daeb562975", "patch": "@@ -0,0 +1,15 @@\n+/* PR c/30552 */\n+\n+/* Related example where statement expression used as old-style formal array \n+ * argument size in an invalid nested function declaration should generate \n+ * user error, not internal compiler error. */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+int main()\n+{\n+  int g()\n+    int a[( {int b} )]; /* { dg-error \"braced-group within expression allowed only inside a function|declaration for parameter\" } */\n+  return 0; /* { dg-error \"expected declaration specifiers before\" } */\n+} /* { dg-error \"expected declaration specifiers before|end of input|expected declaration or statement at end of input\" } */"}, {"sha": "d1f9c6b083afed5d3d364a4100cb6c622597e080", "filename": "gcc/testsuite/gcc.dg/noncompile/pr30552-4.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7584c811623675be258da5195d8e8daeb562975/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr30552-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7584c811623675be258da5195d8e8daeb562975/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr30552-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr30552-4.c?ref=f7584c811623675be258da5195d8e8daeb562975", "patch": "@@ -0,0 +1,15 @@\n+/* PR c/30552 */\n+\n+/* Statement expression as formal array argument size in nested function\n+ * prototype scope is valid.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+int main()\n+{\n+  void fun(int a[({void h(){}10;})])\n+  {\n+  }\n+  return 0;\n+}"}]}