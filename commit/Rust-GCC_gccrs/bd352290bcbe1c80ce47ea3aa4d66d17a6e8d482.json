{"sha": "bd352290bcbe1c80ce47ea3aa4d66d17a6e8d482", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQzNTIyOTBiY2JlMWM4MGNlNDdlYTNhYTRkNjZkMTdhNmU4ZDQ4Mg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-09-21T17:37:00Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-09-21T17:37:00Z"}, "message": "re PR target/50464 (Using -Ofast -march=bdver1 results in internal compiler error: in extract_insn, at recog.c:2109)\n\n\tPR target/50464\n\t* config/i386/sse.md (xop_pcmov_<mode><avxsizesuffix>): Change\n\toperand 1 predicate to register_operand and operand 2 predicate\n\tto nonimmediate_operand.\n\t* config/i386/i386.c (ix86_expand_sse_movcc): When generating\n\txop_pcmov, force op_true to register.  Also, force op_false to\n\tregister if it doesn't satisfy nonimmediate_operand predicate.\n\ntestsuite/ChangeLog:\n\n\tPR target/50464\n\t* g++.dg/other/pr50464.C: New test.\n\nFrom-SVN: r179053", "tree": {"sha": "ae971a93333b822559742d9213ede6fd99d96a3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae971a93333b822559742d9213ede6fd99d96a3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd352290bcbe1c80ce47ea3aa4d66d17a6e8d482", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd352290bcbe1c80ce47ea3aa4d66d17a6e8d482", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd352290bcbe1c80ce47ea3aa4d66d17a6e8d482", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd352290bcbe1c80ce47ea3aa4d66d17a6e8d482/comments", "author": null, "committer": null, "parents": [{"sha": "655d51578160132920f0f88daadf8c9453c20045", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/655d51578160132920f0f88daadf8c9453c20045", "html_url": "https://github.com/Rust-GCC/gccrs/commit/655d51578160132920f0f88daadf8c9453c20045"}], "stats": {"total": 206, "additions": 198, "deletions": 8}, "files": [{"sha": "9b9d69880009f3f8df0cc1fb3dc4a0766518fd2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd352290bcbe1c80ce47ea3aa4d66d17a6e8d482/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd352290bcbe1c80ce47ea3aa4d66d17a6e8d482/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd352290bcbe1c80ce47ea3aa4d66d17a6e8d482", "patch": "@@ -1,3 +1,13 @@\n+2011-09-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/50464\n+\t* config/i386/sse.md (xop_pcmov_<mode><avxsizesuffix>): Change\n+\toperand 1 predicate to register_operand and operand 2 predicate\n+\tto nonimmediate_operand.\n+\t* config/i386/i386.c (ix86_expand_sse_movcc): When generating\n+\txop_pcmov, force op_true to register.  Also, force op_false to\n+\tregister if it doesn't satisfy nonimmediate_operand predicate.\n+\n 2011-09-21  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \t* config/i386/bmi2intrin.h (_mulx_u64): New.\n@@ -6,7 +16,8 @@\n 2011-09-21  Jan Hubicka  <jh@suse.cz>\n \n \tPR tree-optimization/50433\n-\t* ipa-inline-analysis.c (eliminated_by_inlining_prob): Use get_base_address.\n+\t* ipa-inline-analysis.c (eliminated_by_inlining_prob):\n+\tUse get_base_address.\n \n 2011-09-21  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "eae3ff21607bf68feeafbc4366726b3737f89989", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd352290bcbe1c80ce47ea3aa4d66d17a6e8d482/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd352290bcbe1c80ce47ea3aa4d66d17a6e8d482/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=bd352290bcbe1c80ce47ea3aa4d66d17a6e8d482", "patch": "@@ -18897,11 +18897,15 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n     }\n   else if (TARGET_XOP)\n     {\n-      rtx pcmov = gen_rtx_SET (mode, dest,\n-\t\t\t       gen_rtx_IF_THEN_ELSE (mode, cmp,\n-\t\t\t\t\t\t     op_true,\n-\t\t\t\t\t\t     op_false));\n-      emit_insn (pcmov);\n+      op_true = force_reg (mode, op_true);\n+\n+      if (!nonimmediate_operand (op_false, mode))\n+\top_false = force_reg (mode, op_false);\n+\n+      emit_insn (gen_rtx_SET (mode, dest,\n+\t\t\t      gen_rtx_IF_THEN_ELSE (mode, cmp,\n+\t\t\t\t\t\t    op_true,\n+\t\t\t\t\t\t    op_false)));\n     }\n   else\n     {"}, {"sha": "6c20ddbd8519832389229236a84bf7ac4c9ba197", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd352290bcbe1c80ce47ea3aa4d66d17a6e8d482/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd352290bcbe1c80ce47ea3aa4d66d17a6e8d482/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=bd352290bcbe1c80ce47ea3aa4d66d17a6e8d482", "patch": "@@ -10401,8 +10401,8 @@\n   [(set (match_operand:V 0 \"register_operand\" \"=x,x\")\n \t(if_then_else:V\n \t  (match_operand:V 3 \"nonimmediate_operand\" \"x,m\")\n-\t  (match_operand:V 1 \"vector_move_operand\" \"x,x\")\n-\t  (match_operand:V 2 \"vector_move_operand\" \"xm,x\")))]\n+\t  (match_operand:V 1 \"register_operand\" \"x,x\")\n+\t  (match_operand:V 2 \"nonimmediate_operand\" \"xm,x\")))]\n   \"TARGET_XOP\"\n   \"vpcmov\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"sse4arg\")])"}, {"sha": "0e68b06b152fb80a2cc2764877486b3142a99d0e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd352290bcbe1c80ce47ea3aa4d66d17a6e8d482/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd352290bcbe1c80ce47ea3aa4d66d17a6e8d482/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bd352290bcbe1c80ce47ea3aa4d66d17a6e8d482", "patch": "@@ -1,3 +1,8 @@\n+2011-09-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/50464\n+\t* g++.dg/other/pr50464.C: New test.\n+\n 2011-09-21  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \t* gcc.target/i386/bmi2-mulx32-2.c: New test."}, {"sha": "8c67213731a40e79b44a5cc68deafc4946480c4a", "filename": "gcc/testsuite/g++.dg/other/pr50464.C", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd352290bcbe1c80ce47ea3aa4d66d17a6e8d482/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr50464.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd352290bcbe1c80ce47ea3aa4d66d17a6e8d482/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr50464.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr50464.C?ref=bd352290bcbe1c80ce47ea3aa4d66d17a6e8d482", "patch": "@@ -0,0 +1,170 @@\n+// { dg-do compile { target i?86-*-* x86_64-*-* } }\n+// { dg-options \"-O3 -mxop\" }\n+\n+typedef long unsigned int size_t;\n+typedef unsigned long ulong_t;\n+typedef signed long slong_t;\n+\n+  template<typename _Iterator>\n+    struct iterator_traits\n+    {\n+      typedef typename _Iterator::reference reference;\n+    };\n+\n+  template<typename _Tp>\n+    struct iterator_traits<_Tp*>\n+    {\n+      typedef _Tp& reference;\n+    };\n+\n+  template<typename _Iterator, typename _Container>\n+    class __normal_iterator\n+    {\n+    protected:\n+      _Iterator _M_current;\n+      typedef iterator_traits<_Iterator> __traits_type;\n+\n+    public:\n+      typedef typename __traits_type::reference reference;\n+\n+      explicit\n+      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }\n+\n+      reference\n+      operator*() const\n+      { return *_M_current; }\n+\n+      __normal_iterator&\n+      operator++()\n+      {\n+         ++_M_current;\n+         return *this;\n+      }\n+\n+      const _Iterator&\n+      base() const\n+      { return _M_current; }\n+    };\n+\n+  template<typename _Iterator, typename _Container>\n+    inline bool\n+    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,\n+        const __normal_iterator<_Iterator, _Container>& __rhs)\n+    { return __lhs.base() != __rhs.base(); }\n+\n+  template<typename _Tp>\n+    class allocator\n+    {\n+    public:\n+      typedef _Tp* pointer;\n+      typedef _Tp value_type;\n+\n+      template<typename _Tp1>\n+        struct rebind\n+        { typedef allocator<_Tp1> other; };\n+\n+       pointer allocate(size_t __n, const void* = 0)\n+       {\n+          return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));\n+       }\n+    };\n+\n+  template<typename _Tp, typename _Alloc>\n+    struct _Vector_base\n+    {\n+      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;\n+\n+      struct _Vector_impl\n+      : public _Tp_alloc_type\n+      {\n+        typename _Tp_alloc_type::pointer _M_start;\n+        typename _Tp_alloc_type::pointer _M_finish;\n+        typename _Tp_alloc_type::pointer _M_end_of_storage;\n+\n+        _Vector_impl(_Tp_alloc_type const& __a) { }\n+      };\n+\n+    public:\n+      typedef _Alloc allocator_type;\n+\n+      _Vector_base(size_t __n, const allocator_type& __a)\n+      : _M_impl(__a)\n+      {\n+        this->_M_impl._M_start = this->_M_allocate(__n);\n+        this->_M_impl._M_finish = this->_M_impl._M_start;\n+        this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;\n+      }\n+\n+    public:\n+      _Vector_impl _M_impl;\n+\n+      typename _Tp_alloc_type::pointer\n+      _M_allocate(size_t __n)\n+      { return __n != 0 ? _M_impl.allocate(__n) : 0; }\n+\n+    };\n+\n+  template<typename _Tp, typename _Alloc = allocator<_Tp> >\n+    class vector : protected _Vector_base<_Tp, _Alloc>\n+    {\n+      typedef _Vector_base<_Tp, _Alloc> _Base;\n+      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;\n+\n+    public:\n+      typedef _Tp value_type;\n+      typedef typename _Tp_alloc_type::pointer pointer;\n+      typedef __normal_iterator<pointer, vector> iterator;\n+      typedef _Alloc allocator_type;\n+\n+    protected:\n+      using _Base::_M_allocate;\n+      using _Base::_M_impl;\n+\n+    public:\n+\n+      explicit\n+      vector(size_t __n, const value_type& __value = value_type(),\n+      const allocator_type& __a = allocator_type())\n+      : _Base(__n, __a)\n+      { _M_fill_initialize(__n, __value); }\n+\n+      iterator begin()\n+      { return iterator(this->_M_impl._M_start); }\n+\n+      iterator end()\n+      { return iterator(this->_M_impl._M_finish); }\n+\n+    protected:\n+      void\n+      _M_fill_initialize(size_t __n, const value_type& __value)\n+      {\n+         this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;\n+      }\n+    };\n+\n+  template<typename _InputIterator, typename _OutputIterator, typename _Tp>\n+    _OutputIterator\n+    replace_copy(_InputIterator __first, _InputIterator __last,\n+   _OutputIterator __result,\n+   const _Tp& __old_value, const _Tp& __new_value)\n+    {\n+      ;\n+      for (; __first != __last; ++__first, ++__result)\n+         if (*__first == __old_value)\n+            *__result = __new_value;\n+         else\n+            *__result = *__first;\n+      return __result;\n+    }\n+\n+extern size_t shape_rank;\n+\n+void createDataspaceIdentifier()\n+{\n+  vector< ulong_t > dataspaceDims( shape_rank );\n+  vector< ulong_t > maxDataspaceDims( shape_rank );\n+\n+  replace_copy(\n+    dataspaceDims.begin(), dataspaceDims.end(),\n+    maxDataspaceDims.begin(), ulong_t( 0 ), ((ulong_t)(slong_t)(-1)) );\n+}"}]}