{"sha": "1e099144a514d5b6211f5537471b6390f7771627", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUwOTkxNDRhNTE0ZDViNjIxMWY1NTM3NDcxYjYzOTBmNzc3MTYyNw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-04-10T19:28:46Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-04-10T19:28:46Z"}, "message": "class.c (layout_class_type): Correct handling for overlong bit-fields whose width is the same as an integer type.\n\n\t* class.c (layout_class_type): Correct handling for overlong\n\tbit-fields whose width is the same as an integer type.\n\n\t* g++.dg/abi/bitfield10.C: New test.\n\nFrom-SVN: r65432", "tree": {"sha": "7ab4edc89ca09cb672ff6d033db3d5d16b50ed13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ab4edc89ca09cb672ff6d033db3d5d16b50ed13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e099144a514d5b6211f5537471b6390f7771627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e099144a514d5b6211f5537471b6390f7771627", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e099144a514d5b6211f5537471b6390f7771627", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e099144a514d5b6211f5537471b6390f7771627/comments", "author": null, "committer": null, "parents": [{"sha": "021bad8e4fc613ba2b5e0f04597386704cf71728", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/021bad8e4fc613ba2b5e0f04597386704cf71728", "html_url": "https://github.com/Rust-GCC/gccrs/commit/021bad8e4fc613ba2b5e0f04597386704cf71728"}], "stats": {"total": 50, "additions": 36, "deletions": 14}, "files": [{"sha": "3e3e4f3d73cbfd62ce3043097c87597de5f1be34", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e099144a514d5b6211f5537471b6390f7771627/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e099144a514d5b6211f5537471b6390f7771627/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1e099144a514d5b6211f5537471b6390f7771627", "patch": "@@ -1,3 +1,8 @@\n+2003-04-10  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* class.c (layout_class_type): Correct handling for overlong\n+\tbit-fields whose width is the same as an integer type.\n+\n 2003-04-06  Zack Weinberg   <zack@codesourcery.com>\n \n \t* cp-tree.def: Make fourth element for all 'c' and 'x' nodes zero."}, {"sha": "ed0824a1c0e87b811230d5d057604fef3a434b82", "filename": "gcc/cp/class.c", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e099144a514d5b6211f5537471b6390f7771627/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e099144a514d5b6211f5537471b6390f7771627/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=1e099144a514d5b6211f5537471b6390f7771627", "patch": "@@ -4819,6 +4819,8 @@ layout_class_type (tree t, tree *virtuals_p)\n \t}\n \n       type = TREE_TYPE (field);\n+      \n+      padding = NULL_TREE;\n \n       /* If this field is a bit-field whose width is greater than its\n \t type, then there are some special rules for allocating\n@@ -4842,19 +4844,26 @@ layout_class_type (tree t, tree *virtuals_p)\n \t     type that fits.  */\n \t  integer_type = integer_types[itk - 1];\n \n-\t  if (abi_version_at_least (2) && TREE_CODE (t) == UNION_TYPE)\n-\t    /* In a union, the padding field must have the full width\n-\t       of the bit-field; all fields start at offset zero.  */\n-\t    padding = DECL_SIZE (field);\n-\t  else\n+\t  /* Figure out how much additional padding is required.  GCC\n+\t     3.2 always created a padding field, even if it had zero\n+\t     width.  */\n+\t  if (!abi_version_at_least (2)\n+\t      || INT_CST_LT (TYPE_SIZE (integer_type), DECL_SIZE (field)))\n \t    {\n-\t      if (warn_abi && TREE_CODE (t) == UNION_TYPE)\n-\t\twarning (\"size assigned to `%T' may not be \"\n-\t\t\t \"ABI-compliant and may change in a future \"\n-\t\t\t \"version of GCC\", \n-\t\t\t t);\n-\t      padding = size_binop (MINUS_EXPR, DECL_SIZE (field),\n-\t\t\t\t    TYPE_SIZE (integer_type));\n+\t      if (abi_version_at_least (2) && TREE_CODE (t) == UNION_TYPE)\n+\t\t/* In a union, the padding field must have the full width\n+\t\t   of the bit-field; all fields start at offset zero.  */\n+\t\tpadding = DECL_SIZE (field);\n+\t      else\n+\t\t{\n+\t\t  if (warn_abi && TREE_CODE (t) == UNION_TYPE)\n+\t\t    warning (\"size assigned to `%T' may not be \"\n+\t\t\t     \"ABI-compliant and may change in a future \"\n+\t\t\t     \"version of GCC\", \n+\t\t\t     t);\n+\t\t  padding = size_binop (MINUS_EXPR, DECL_SIZE (field),\n+\t\t\t\t\tTYPE_SIZE (integer_type));\n+\t\t}\n \t    }\n #ifdef PCC_BITFIELD_TYPE_MATTERS\n \t  /* An unnamed bitfield does not normally affect the\n@@ -4873,8 +4882,6 @@ layout_class_type (tree t, tree *virtuals_p)\n \t  DECL_ALIGN (field) = TYPE_ALIGN (integer_type);\n \t  DECL_USER_ALIGN (field) = TYPE_USER_ALIGN (integer_type);\n \t}\n-      else\n-\tpadding = NULL_TREE;\n \n       layout_nonempty_base_or_field (rli, field, NULL_TREE,\n \t\t\t\t     empty_base_offsets);\n@@ -4924,6 +4931,7 @@ layout_class_type (tree t, tree *virtuals_p)\n \t\t\t\t      char_type_node); \n \t  DECL_BIT_FIELD (padding_field) = 1;\n \t  DECL_SIZE (padding_field) = padding;\n+\t  DECL_CONTEXT (padding_field) = t;\n \t  layout_nonempty_base_or_field (rli, padding_field,\n \t\t\t\t\t NULL_TREE, \n \t\t\t\t\t empty_base_offsets);"}, {"sha": "52be21cb002692cefa23884e9982903d742b8c92", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e099144a514d5b6211f5537471b6390f7771627/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e099144a514d5b6211f5537471b6390f7771627/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1e099144a514d5b6211f5537471b6390f7771627", "patch": "@@ -1,3 +1,7 @@\n+2003-04-10  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.dg/abi/bitfield10.C: New test.\n+\n 2003-04-09  Mike Stump  <mrs@apple.com>\n \n \t* gcc.dg/pch/pch.exp: Make testcase names longer."}, {"sha": "df40fa3f2aa5b171d80cb91cb7b18a3424b0a28e", "filename": "gcc/testsuite/g++.dg/abi/bitfield10.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e099144a514d5b6211f5537471b6390f7771627/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e099144a514d5b6211f5537471b6390f7771627/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield10.C?ref=1e099144a514d5b6211f5537471b6390f7771627", "patch": "@@ -0,0 +1,5 @@\n+// { dg-options \"-w\" }\n+\n+struct S {\n+  int i : 64;\n+};"}]}