{"sha": "275a076f762daaf0e1d6148a1da1d7222f1aea9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc1YTA3NmY3NjJkYWFmMGUxZDYxNDhhMWRhMWQ3MjIyZjFhZWE5Zg==", "commit": {"author": {"name": "Daniel Cederman", "email": "cederman@gaisler.com", "date": "2019-03-25T08:12:17Z"}, "committer": {"name": "Daniel Hellstrom", "email": "daniel@gaisler.com", "date": "2021-09-16T11:05:53Z"}, "message": "sparc: Add scheduling information for LEON5\n\nThe LEON5 can often dual issue instructions from the same 64-bit aligned\ndouble word if there are no data dependencies. Add scheduling information\nto avoid scheduling unpairable instructions back-to-back.\n\ngcc/ChangeLog:\n\n\t* config/sparc/sparc-opts.h (enum sparc_processor_type): Add LEON5\n\t* config/sparc/sparc.c (struct processor_costs): Add LEON5 costs\n\t(leon5_adjust_cost): Increase cost of store with data dependency\n\ton ALU instruction and FPU anti-dependencies.\n\t(sparc_option_override): Add LEON5 costs\n\t(sparc_adjust_cost): Add LEON5 cost adjustments\n\t* config/sparc/sparc.h: Add LEON5\n\t* config/sparc/sparc.md: Include LEON5 scheduling information\n\t* config/sparc/sparc.opt: Add LEON5\n\t* doc/invoke.texi: Add LEON5\n\t* config/sparc/leon5.md: New file.", "tree": {"sha": "54b8364992f2c0826923f89f06306bf79e937f00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54b8364992f2c0826923f89f06306bf79e937f00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/275a076f762daaf0e1d6148a1da1d7222f1aea9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/275a076f762daaf0e1d6148a1da1d7222f1aea9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/275a076f762daaf0e1d6148a1da1d7222f1aea9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/275a076f762daaf0e1d6148a1da1d7222f1aea9f/comments", "author": {"login": "doac", "id": 2056695, "node_id": "MDQ6VXNlcjIwNTY2OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/2056695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doac", "html_url": "https://github.com/doac", "followers_url": "https://api.github.com/users/doac/followers", "following_url": "https://api.github.com/users/doac/following{/other_user}", "gists_url": "https://api.github.com/users/doac/gists{/gist_id}", "starred_url": "https://api.github.com/users/doac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doac/subscriptions", "organizations_url": "https://api.github.com/users/doac/orgs", "repos_url": "https://api.github.com/users/doac/repos", "events_url": "https://api.github.com/users/doac/events{/privacy}", "received_events_url": "https://api.github.com/users/doac/received_events", "type": "User", "site_admin": false}, "committer": {"login": "daniel-hellstrom", "id": 1167836, "node_id": "MDQ6VXNlcjExNjc4MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1167836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daniel-hellstrom", "html_url": "https://github.com/daniel-hellstrom", "followers_url": "https://api.github.com/users/daniel-hellstrom/followers", "following_url": "https://api.github.com/users/daniel-hellstrom/following{/other_user}", "gists_url": "https://api.github.com/users/daniel-hellstrom/gists{/gist_id}", "starred_url": "https://api.github.com/users/daniel-hellstrom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daniel-hellstrom/subscriptions", "organizations_url": "https://api.github.com/users/daniel-hellstrom/orgs", "repos_url": "https://api.github.com/users/daniel-hellstrom/repos", "events_url": "https://api.github.com/users/daniel-hellstrom/events{/privacy}", "received_events_url": "https://api.github.com/users/daniel-hellstrom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a053dab90e69c2a8289c95caec236f239a2a764b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a053dab90e69c2a8289c95caec236f239a2a764b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a053dab90e69c2a8289c95caec236f239a2a764b"}], "stats": {"total": 242, "additions": 220, "deletions": 22}, "files": [{"sha": "6a065b1a97437866019a94d69aec65fb83a15769", "filename": "gcc/config/sparc/leon5.md", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275a076f762daaf0e1d6148a1da1d7222f1aea9f/gcc%2Fconfig%2Fsparc%2Fleon5.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275a076f762daaf0e1d6148a1da1d7222f1aea9f/gcc%2Fconfig%2Fsparc%2Fleon5.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fleon5.md?ref=275a076f762daaf0e1d6148a1da1d7222f1aea9f", "patch": "@@ -0,0 +1,103 @@\n+;; Scheduling description for LEON5.\n+;;   Copyright (C) 2021 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+\n+;; The LEON5 can often dual issue instructions from the same 64-bit aligned\n+;; double word if there are no data dependencies.\n+;;\n+;; Avoid scheduling load/store, FPU, and multiply instructions back to\n+;; back, regardless of data dependencies.\n+;;\n+;; Push comparisons away from the associated branch instruction.\n+;;\n+;; Avoid scheduling ALU instructions with data dependencies back to back.\n+;;\n+;; Schedule three instructions between load and dependent instruction.\n+\n+(define_automaton \"leon5\")\n+\n+(define_cpu_unit \"leon5_memory\" \"leon5\")\n+(define_cpu_unit \"leon5_mul\" \"leon5\")\n+(define_cpu_unit \"grfpu_d\" \"grfpu\")\n+(define_cpu_unit \"grfpu_s\" \"grfpu\")\n+\n+(define_insn_reservation \"leon5_load\" 4\n+  (and (eq_attr \"cpu\" \"leon5\")\n+  (eq_attr \"type\" \"load,sload\"))\n+  \"leon5_memory * 2, nothing * 2\")\n+\n+(define_insn_reservation \"leon5_fpload\" 2\n+  (and (eq_attr \"cpu\" \"leon5\")\n+  (eq_attr \"type\" \"fpload\"))\n+  \"leon5_memory * 2 + grfpu_alu * 2\")\n+\n+(define_insn_reservation \"leon5_store\" 2\n+  (and (eq_attr \"cpu\" \"leon5\")\n+  (eq_attr \"type\" \"store\"))\n+  \"leon5_memory * 2\")\n+\n+(define_insn_reservation \"leon5_fpstore\" 2\n+  (and (eq_attr \"cpu\" \"leon5\")\n+  (eq_attr \"type\" \"fpstore\"))\n+  \"leon5_memory * 2 + grfpu_alu * 2\")\n+\n+(define_insn_reservation \"leon5_ialu\" 2\n+  (and (eq_attr \"cpu\" \"leon5\")\n+  (eq_attr \"type\" \"ialu, shift, ialuX\"))\n+  \"nothing * 2\")\n+\n+(define_insn_reservation \"leon5_compare\" 5\n+  (and (eq_attr \"cpu\" \"leon5\")\n+  (eq_attr \"type\" \"compare\"))\n+  \"nothing * 5\")\n+\n+(define_insn_reservation \"leon5_imul\" 4\n+  (and (eq_attr \"cpu\" \"leon5\")\n+  (eq_attr \"type\" \"imul\"))\n+  \"leon5_mul * 2, nothing * 2\")\n+\n+(define_insn_reservation \"leon5_idiv\" 35\n+  (and (eq_attr \"cpu\" \"leon5\")\n+  (eq_attr \"type\" \"imul\"))\n+  \"nothing * 35\")\n+\n+(define_insn_reservation \"leon5_fp_alu\" 5\n+  (and (eq_attr \"cpu\" \"leon5\")\n+  (eq_attr \"type\" \"fp,fpcmp,fpmul,fpmove\"))\n+  \"grfpu_alu * 2, nothing*3\")\n+\n+(define_insn_reservation \"leon5_fp_divs\" 17\n+  (and (eq_attr \"cpu\" \"leon5\")\n+  (eq_attr \"type\" \"fpdivs\"))\n+  \"grfpu_alu * 2 + grfpu_d*16, nothing\")\n+\n+(define_insn_reservation \"leon5_fp_divd\" 18\n+  (and (eq_attr \"cpu\" \"leon5\")\n+  (eq_attr \"type\" \"fpdivd\"))\n+  \"grfpu_alu * 2 + grfpu_d*17, nothing\")\n+\n+(define_insn_reservation \"leon5_fp_sqrts\" 25\n+  (and (eq_attr \"cpu\" \"leon5\")\n+  (eq_attr \"type\" \"fpsqrts\"))\n+  \"grfpu_alu * 2 + grfpu_s*24, nothing\")\n+\n+(define_insn_reservation \"leon5_fp_sqrtd\" 26\n+  (and (eq_attr \"cpu\" \"leon5\")\n+  (eq_attr \"type\" \"fpsqrtd\"))\n+  \"grfpu_alu * 2 + grfpu_s*25, nothing\")"}, {"sha": "9299cf6a2ff9a0d4bd13afa6a662093b396eaee9", "filename": "gcc/config/sparc/sparc-opts.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275a076f762daaf0e1d6148a1da1d7222f1aea9f/gcc%2Fconfig%2Fsparc%2Fsparc-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275a076f762daaf0e1d6148a1da1d7222f1aea9f/gcc%2Fconfig%2Fsparc%2Fsparc-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-opts.h?ref=275a076f762daaf0e1d6148a1da1d7222f1aea9f", "patch": "@@ -31,6 +31,7 @@ enum sparc_processor_type {\n   PROCESSOR_HYPERSPARC,\n   PROCESSOR_LEON,\n   PROCESSOR_LEON3,\n+  PROCESSOR_LEON5,\n   PROCESSOR_LEON3V7,\n   PROCESSOR_SPARCLITE,\n   PROCESSOR_F930,"}, {"sha": "6bc6f0ace6ae87bd307835975c3e101e8dd4ae8e", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275a076f762daaf0e1d6148a1da1d7222f1aea9f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275a076f762daaf0e1d6148a1da1d7222f1aea9f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=275a076f762daaf0e1d6148a1da1d7222f1aea9f", "patch": "@@ -269,6 +269,31 @@ struct processor_costs leon3_costs = {\n   3 /* branch cost */\n };\n \n+static const\n+struct processor_costs leon5_costs = {\n+  COSTS_N_INSNS (1), /* int load */\n+  COSTS_N_INSNS (1), /* int signed load */\n+  COSTS_N_INSNS (1), /* int zeroed load */\n+  COSTS_N_INSNS (1), /* float load */\n+  COSTS_N_INSNS (1), /* fmov, fneg, fabs */\n+  COSTS_N_INSNS (1), /* fadd, fsub */\n+  COSTS_N_INSNS (1), /* fcmp */\n+  COSTS_N_INSNS (1), /* fmov, fmovr */\n+  COSTS_N_INSNS (1), /* fmul */\n+  COSTS_N_INSNS (17), /* fdivs */\n+  COSTS_N_INSNS (18), /* fdivd */\n+  COSTS_N_INSNS (25), /* fsqrts */\n+  COSTS_N_INSNS (26), /* fsqrtd */\n+  COSTS_N_INSNS (4), /* imul */\n+  COSTS_N_INSNS (4), /* imulX */\n+  0, /* imul bit factor */\n+  COSTS_N_INSNS (35), /* idiv */\n+  COSTS_N_INSNS (35), /* idivX */\n+  COSTS_N_INSNS (1), /* movcc/movr */\n+  0, /* shift penalty */\n+  3 /* branch cost */\n+};\n+\n static const\n struct processor_costs sparclet_costs = {\n   COSTS_N_INSNS (3), /* int load */\n@@ -575,6 +600,7 @@ static int function_arg_slotno (const CUMULATIVE_ARGS *, machine_mode,\n \n static int supersparc_adjust_cost (rtx_insn *, int, rtx_insn *, int);\n static int hypersparc_adjust_cost (rtx_insn *, int, rtx_insn *, int);\n+static int leon5_adjust_cost (rtx_insn *, int, rtx_insn *, int);\n \n static void sparc_emit_set_const32 (rtx, rtx);\n static void sparc_emit_set_const64 (rtx, rtx);\n@@ -1687,6 +1713,7 @@ sparc_option_override (void)\n     { TARGET_CPU_hypersparc, PROCESSOR_HYPERSPARC },\n     { TARGET_CPU_leon, PROCESSOR_LEON },\n     { TARGET_CPU_leon3, PROCESSOR_LEON3 },\n+    { TARGET_CPU_leon5, PROCESSOR_LEON5 },\n     { TARGET_CPU_leon3v7, PROCESSOR_LEON3V7 },\n     { TARGET_CPU_sparclite, PROCESSOR_F930 },\n     { TARGET_CPU_sparclite86x, PROCESSOR_SPARCLITE86X },\n@@ -1718,6 +1745,7 @@ sparc_option_override (void)\n     { \"hypersparc\",\tMASK_ISA, MASK_V8 },\n     { \"leon\",\t\tMASK_ISA|MASK_FSMULD, MASK_V8|MASK_LEON },\n     { \"leon3\",\t\tMASK_ISA, MASK_V8|MASK_LEON3 },\n+    { \"leon5\",\t\tMASK_ISA, MASK_V8|MASK_LEON3 },\n     { \"leon3v7\",\tMASK_ISA, MASK_LEON3 },\n     { \"sparclite\",\tMASK_ISA, MASK_SPARCLITE },\n     /* The Fujitsu MB86930 is the original sparclite chip, with no FPU.  */\n@@ -2028,6 +2056,9 @@ sparc_option_override (void)\n     case PROCESSOR_LEON3V7:\n       sparc_costs = &leon3_costs;\n       break;\n+    case PROCESSOR_LEON5:\n+      sparc_costs = &leon5_costs;\n+      break;\n     case PROCESSOR_SPARCLET:\n     case PROCESSOR_TSC701:\n       sparc_costs = &sparclet_costs;\n@@ -10174,12 +10205,65 @@ hypersparc_adjust_cost (rtx_insn *insn, int dtype, rtx_insn *dep_insn,\n   return cost;\n }\n \n+static int\n+leon5_adjust_cost (rtx_insn *insn, int dtype, rtx_insn *dep_insn,\n+\t\t   int cost)\n+{\n+  enum attr_type insn_type, dep_type;\n+  rtx pat = PATTERN (insn);\n+  rtx dep_pat = PATTERN (dep_insn);\n+\n+  if (recog_memoized (insn) < 0 || recog_memoized (dep_insn) < 0)\n+    return cost;\n+\n+  insn_type = get_attr_type (insn);\n+  dep_type = get_attr_type (dep_insn);\n+\n+  switch (dtype)\n+    {\n+    case REG_DEP_TRUE:\n+      /* Data dependency; DEP_INSN writes a register that INSN reads some\n+\t cycles later.  */\n+\n+      switch (insn_type)\n+\t{\n+\tcase TYPE_STORE:\n+\t  /* Try to schedule three instructions between the store and\n+\t     the ALU instruction that generated the data.  */\n+\t  if (dep_type == TYPE_IALU || dep_type == TYPE_SHIFT)\n+\t    {\n+\t      if (GET_CODE (pat) != SET || GET_CODE (dep_pat) != SET)\n+\t\tbreak;\n+\n+\t      if (rtx_equal_p (SET_DEST (dep_pat), SET_SRC (pat)))\n+\t\treturn 4;\n+\t    }\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n+      break;\n+    case REG_DEP_ANTI:\n+      /* Penalize anti-dependencies for FPU instructions.  */\n+      if (fpop_insn_p (insn) || insn_type == TYPE_FPLOAD)\n+\treturn 4;\n+      break;\n+    default:\n+      break;\n+    }\n+\n+  return cost;\n+}\n+\n static int\n sparc_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep, int cost,\n \t\t   unsigned int)\n {\n   switch (sparc_cpu)\n     {\n+    case PROCESSOR_LEON5:\n+      cost = leon5_adjust_cost (insn, dep_type, dep, cost);\n+      break;\n     case PROCESSOR_SUPERSPARC:\n       cost = supersparc_adjust_cost (insn, dep_type, dep, cost);\n       break;"}, {"sha": "edafa9983705631031187cf3ec358d2520302c54", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275a076f762daaf0e1d6148a1da1d7222f1aea9f/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275a076f762daaf0e1d6148a1da1d7222f1aea9f/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=275a076f762daaf0e1d6148a1da1d7222f1aea9f", "patch": "@@ -120,21 +120,22 @@ along with GCC; see the file COPYING3.  If not see\n #define TARGET_CPU_leon\t\t4\n #define TARGET_CPU_leon3\t5\n #define TARGET_CPU_leon3v7\t6\n-#define TARGET_CPU_sparclite\t7\n-#define TARGET_CPU_f930\t\t7       /* alias */\n-#define TARGET_CPU_f934\t\t7       /* alias */\n-#define TARGET_CPU_sparclite86x\t8\n-#define TARGET_CPU_sparclet\t9\n-#define TARGET_CPU_tsc701\t9       /* alias */\n-#define TARGET_CPU_v9\t\t10\t/* generic v9 implementation */\n-#define TARGET_CPU_sparcv9\t10\t/* alias */\n-#define TARGET_CPU_sparc64\t10\t/* alias */\n-#define TARGET_CPU_ultrasparc\t11\n-#define TARGET_CPU_ultrasparc3\t12\n-#define TARGET_CPU_niagara\t13\n-#define TARGET_CPU_niagara2\t14\n-#define TARGET_CPU_niagara3\t15\n-#define TARGET_CPU_niagara4\t16\n+#define TARGET_CPU_leon5\t7\n+#define TARGET_CPU_sparclite\t8\n+#define TARGET_CPU_f930\t\t8       /* alias */\n+#define TARGET_CPU_f934\t\t8       /* alias */\n+#define TARGET_CPU_sparclite86x\t9\n+#define TARGET_CPU_sparclet\t10\n+#define TARGET_CPU_tsc701\t10       /* alias */\n+#define TARGET_CPU_v9\t\t11\t/* generic v9 implementation */\n+#define TARGET_CPU_sparcv9\t11\t/* alias */\n+#define TARGET_CPU_sparc64\t11\t/* alias */\n+#define TARGET_CPU_ultrasparc\t12\n+#define TARGET_CPU_ultrasparc3\t13\n+#define TARGET_CPU_niagara\t14\n+#define TARGET_CPU_niagara2\t15\n+#define TARGET_CPU_niagara3\t16\n+#define TARGET_CPU_niagara4\t17\n #define TARGET_CPU_niagara7\t19\n #define TARGET_CPU_m8\t\t20\n \n@@ -229,7 +230,8 @@ along with GCC; see the file COPYING3.  If not see\n #endif\n \n #if TARGET_CPU_DEFAULT == TARGET_CPU_leon \\\n- || TARGET_CPU_DEFAULT == TARGET_CPU_leon3\n+ || TARGET_CPU_DEFAULT == TARGET_CPU_leon3 \\\n+ || TARGET_CPU_DEFAULT == TARGET_CPU_leon5\n #define CPP_CPU32_DEFAULT_SPEC \"-D__leon__ -D__sparc_v8__\"\n #define ASM_CPU32_DEFAULT_SPEC AS_LEON_FLAG\n #endif\n@@ -285,6 +287,7 @@ along with GCC; see the file COPYING3.  If not see\n %{mcpu=hypersparc:-D__hypersparc__ -D__sparc_v8__} \\\n %{mcpu=leon:-D__leon__ -D__sparc_v8__} \\\n %{mcpu=leon3:-D__leon__ -D__sparc_v8__} \\\n+%{mcpu=leon5:-D__leon__ -D__sparc_v8__} \\\n %{mcpu=leon3v7:-D__leon__} \\\n %{mcpu=v9:-D__sparc_v9__} \\\n %{mcpu=ultrasparc:-D__sparc_v9__} \\\n@@ -337,6 +340,7 @@ along with GCC; see the file COPYING3.  If not see\n %{mcpu=hypersparc:-Av8} \\\n %{mcpu=leon:\" AS_LEON_FLAG \"} \\\n %{mcpu=leon3:\" AS_LEON_FLAG \"} \\\n+%{mcpu=leon5:\" AS_LEON_FLAG \"} \\\n %{mcpu=leon3v7:\" AS_LEONV7_FLAG \"} \\\n %{mv8plus:-Av8plus} \\\n %{mcpu=v9:-Av9} \\"}, {"sha": "294c918f660dfdc49dc62d30a54d01f24f99c990", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275a076f762daaf0e1d6148a1da1d7222f1aea9f/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275a076f762daaf0e1d6148a1da1d7222f1aea9f/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=275a076f762daaf0e1d6148a1da1d7222f1aea9f", "patch": "@@ -233,6 +233,7 @@\n    hypersparc,\n    leon,\n    leon3,\n+   leon5,\n    leon3v7,\n    sparclite,\n    f930,\n@@ -638,6 +639,7 @@\n (include \"supersparc.md\")\n (include \"hypersparc.md\")\n (include \"leon.md\")\n+(include \"leon5.md\")\n (include \"sparclet.md\")\n (include \"ultra1_2.md\")\n (include \"ultra3.md\")"}, {"sha": "658a187f862982f6d7802549c5dd96ad21ef40b9", "filename": "gcc/config/sparc/sparc.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275a076f762daaf0e1d6148a1da1d7222f1aea9f/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275a076f762daaf0e1d6148a1da1d7222f1aea9f/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.opt?ref=275a076f762daaf0e1d6148a1da1d7222f1aea9f", "patch": "@@ -175,6 +175,9 @@ Enum(sparc_processor) String(leon3) Value(PROCESSOR_LEON3)\n EnumValue\n Enum(sparc_processor) String(leon3v7) Value(PROCESSOR_LEON3V7)\n \n+EnumValue\n+Enum(sparc_processor) String(leon5) Value(PROCESSOR_LEON5)\n+\n EnumValue\n Enum(sparc_processor) String(sparclite) Value(PROCESSOR_SPARCLITE)\n "}, {"sha": "4acb94181d252d9278c84109506c23d4d0ba65a7", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275a076f762daaf0e1d6148a1da1d7222f1aea9f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275a076f762daaf0e1d6148a1da1d7222f1aea9f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=275a076f762daaf0e1d6148a1da1d7222f1aea9f", "patch": "@@ -29662,10 +29662,11 @@ so @option{-mno-lra} needs to be passed to get old Reload.\n Set the instruction set, register set, and instruction scheduling parameters\n for machine type @var{cpu_type}.  Supported values for @var{cpu_type} are\n @samp{v7}, @samp{cypress}, @samp{v8}, @samp{supersparc}, @samp{hypersparc},\n-@samp{leon}, @samp{leon3}, @samp{leon3v7}, @samp{sparclite}, @samp{f930},\n-@samp{f934}, @samp{sparclite86x}, @samp{sparclet}, @samp{tsc701}, @samp{v9},\n-@samp{ultrasparc}, @samp{ultrasparc3}, @samp{niagara}, @samp{niagara2},\n-@samp{niagara3}, @samp{niagara4}, @samp{niagara7} and @samp{m8}.\n+@samp{leon}, @samp{leon3}, @samp{leon3v7}, @samp{leon5}, @samp{sparclite},\n+@samp{f930}, @samp{f934}, @samp{sparclite86x}, @samp{sparclet}, @samp{tsc701},\n+@samp{v9}, @samp{ultrasparc}, @samp{ultrasparc3}, @samp{niagara},\n+@samp{niagara2}, @samp{niagara3}, @samp{niagara4}, @samp{niagara7} and\n+@samp{m8}.\n \n Native Solaris and GNU/Linux toolchains also support the value @samp{native},\n which selects the best architecture option for the host processor.\n@@ -29684,7 +29685,7 @@ implementations.\n cypress, leon3v7\n \n @item v8\n-supersparc, hypersparc, leon, leon3\n+supersparc, hypersparc, leon, leon3, leon5\n \n @item sparclite\n f930, f934, sparclite86x\n@@ -29751,7 +29752,7 @@ The same values for @option{-mcpu=@var{cpu_type}} can be used for\n @option{-mtune=@var{cpu_type}}, but the only useful values are those\n that select a particular CPU implementation.  Those are\n @samp{cypress}, @samp{supersparc}, @samp{hypersparc}, @samp{leon},\n-@samp{leon3}, @samp{leon3v7}, @samp{f930}, @samp{f934},\n+@samp{leon3}, @samp{leon3v7}, @samp{leon5}, @samp{f930}, @samp{f934},\n @samp{sparclite86x}, @samp{tsc701}, @samp{ultrasparc},\n @samp{ultrasparc3}, @samp{niagara}, @samp{niagara2}, @samp{niagara3},\n @samp{niagara4}, @samp{niagara7} and @samp{m8}.  With native Solaris"}]}