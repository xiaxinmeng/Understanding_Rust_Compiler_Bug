{"sha": "0588f8c8db031785f71616191b72e8df4de07532", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU4OGY4YzhkYjAzMTc4NWY3MTYxNjE5MWI3MmU4ZGY0ZGUwNzUzMg==", "commit": {"author": {"name": "Kyle Galloway", "email": "kgallowa@redhat.com", "date": "2007-02-08T18:21:00Z"}, "committer": {"name": "Kyle Galloway", "email": "kgallowa@gcc.gnu.org", "date": "2007-02-08T18:21:00Z"}, "message": "StackFrameCommandSet.java (executeGetValues): Pass jlong instead of ByteBuffer.\n\n2007-02-08  Kyle Galloway  <kgallowa@redhat.com>\n\n    * classpath/gnu/classpath/jdwp/processor/\n    StackFrameCommandSet.java (executeGetValues): Pass jlong instead\n    of ByteBuffer.\n    (executeSetValues): Ditto.\n    (executeThisObject): Ditto.\n    * classpath/gnu/classpath/jdwp/processor/\n    StackFrameCommandSet.class: Rebuilt.\n    * classpath/lib/gnu/classpath/jdwp/VMVirtualMachine.class:\n    Rebuilt.\n    * classpath/lib/gnu/classpath/jdwp/VMFrame.class: Rebuilt.\n    * classpath/lib/gnu/classpath/jdwp/exception/\n    InvalidFrameException.java: New file.\n    * gnu/classpath/jdwp/VMFrame.java: Added field for thread of\n    frame.\n    (Constructor): New method.\n    * gnu/classpath/jdwp/VMFrame.h: Regenerated.\n    * gnu/classpath/jdwp/VMVirtualMachine.java\n    (getFrame): Changed ByteBuffer to jlong.\n    * gnu/classpath/jdwp/natVMVirtualMachine.cc\n    (getFrame): Implement.\n    * gnu/classpath/jdwp/VMVirtualMachine.h: Regenerated.\n\nFrom-SVN: r121719", "tree": {"sha": "130de2f63f3612d6cfd4bc1a0fa9b273b6863f31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/130de2f63f3612d6cfd4bc1a0fa9b273b6863f31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0588f8c8db031785f71616191b72e8df4de07532", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0588f8c8db031785f71616191b72e8df4de07532", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0588f8c8db031785f71616191b72e8df4de07532", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0588f8c8db031785f71616191b72e8df4de07532/comments", "author": null, "committer": null, "parents": [{"sha": "e9105edd8c0478538778b5d1d2345ee8e9519783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9105edd8c0478538778b5d1d2345ee8e9519783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9105edd8c0478538778b5d1d2345ee8e9519783"}], "stats": {"total": 228, "additions": 177, "deletions": 51}, "files": [{"sha": "315912da9116106d0a32f0515da972810205ec4f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0588f8c8db031785f71616191b72e8df4de07532/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0588f8c8db031785f71616191b72e8df4de07532/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=0588f8c8db031785f71616191b72e8df4de07532", "patch": "@@ -1,4 +1,28 @@\n-2007-02-07  Kyle Galloway  <kgallowa@redhat.com>\n+2007-02-08  Kyle Galloway  <kgallowa@redhat.com>\n+\n+    * classpath/gnu/classpath/jdwp/processor/\n+    StackFrameCommandSet.java (executeGetValues): Pass jlong instead\n+    of ByteBuffer.\n+    (executeSetValues): Ditto.\n+    (executeThisObject): Ditto.\n+    * classpath/gnu/classpath/jdwp/processor/\n+    StackFrameCommandSet.class: Rebuilt.\n+    * classpath/lib/gnu/classpath/jdwp/VMVirtualMachine.class:\n+    Rebuilt.\n+    * classpath/lib/gnu/classpath/jdwp/VMFrame.class: Rebuilt.\n+    * classpath/lib/gnu/classpath/jdwp/exception/\n+    InvalidFrameException.java: New file.\n+    * gnu/classpath/jdwp/VMFrame.java: Added field for thread of\n+    frame.\n+    (Constructor): New method.\n+    * gnu/classpath/jdwp/VMFrame.h: Regenerated.\n+    * gnu/classpath/jdwp/VMVirtualMachine.java\n+    (getFrame): Changed ByteBuffer to jlong.\n+    * gnu/classpath/jdwp/natVMVirtualMachine.cc\n+    (getFrame): Implement.\n+    * gnu/classpath/jdwp/VMVirtualMachine.h: Regenerated.\n+\n+2007-02-08  Kyle Galloway  <kgallowa@redhat.com>\n \n     * include/java-interp.h (_Jv_InterpFrame): obj_ptr field added\n     to hold \"this\" pointer for frame."}, {"sha": "cf1e8c272dab43c911e66eed3aed67a9c3648443", "filename": "libjava/classpath/gnu/classpath/jdwp/processor/StackFrameCommandSet.java", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0588f8c8db031785f71616191b72e8df4de07532/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FStackFrameCommandSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0588f8c8db031785f71616191b72e8df4de07532/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FStackFrameCommandSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FStackFrameCommandSet.java?ref=0588f8c8db031785f71616191b72e8df4de07532", "patch": "@@ -1,5 +1,5 @@\n /* StackFrameCommandSet.java -- class to implement the StackFrame Command Set\n-   Copyright (C) 2005 Free Software Foundation\n+   Copyright (C) 2005, 2007 Free Software Foundation\n  \n This file is part of GNU Classpath.\n \n@@ -107,7 +107,8 @@ private void executeGetValues(ByteBuffer bb, DataOutputStream os)\n     // has a reference to them. Furthermore they are not ReferenceTypeIds since\n     // these are held permanently and we want these to be held only as long as\n     // the Thread is suspended.\n-    VMFrame frame = VMVirtualMachine.getFrame(thread, bb);\n+    long frameID = bb.getLong();\n+    VMFrame frame = VMVirtualMachine.getFrame(thread, frameID);\n     int slots = bb.getInt();\n     os.writeInt(slots); // Looks pointless but this is the protocol\n     for (int i = 0; i < slots; i++)\n@@ -125,7 +126,8 @@ private void executeSetValues(ByteBuffer bb, DataOutputStream os)\n     ObjectId tId = idMan.readObjectId(bb);\n     Thread thread = (Thread) tId.getObject();\n \n-    VMFrame frame = VMVirtualMachine.getFrame(thread, bb);\n+    long frameID = bb.getLong();\n+    VMFrame frame = VMVirtualMachine.getFrame(thread, frameID);\n \n     int slots = bb.getInt();\n     for (int i = 0; i < slots; i++)\n@@ -142,7 +144,8 @@ private void executeThisObject(ByteBuffer bb, DataOutputStream os)\n     ObjectId tId = idMan.readObjectId(bb);\n     Thread thread = (Thread) tId.getObject();\n \n-    VMFrame frame = VMVirtualMachine.getFrame(thread, bb);\n+    long frameID = bb.getLong();\n+    VMFrame frame = VMVirtualMachine.getFrame(thread, frameID);\n \n     Object thisObject = frame.getObject();\n     Value.writeTaggedValue(os, thisObject);"}, {"sha": "10e284132fa3b6b6b9c5ddc84f8425b1eef20978", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/VMFrame.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0588f8c8db031785f71616191b72e8df4de07532/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2FVMFrame.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0588f8c8db031785f71616191b72e8df4de07532/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2FVMFrame.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2FVMFrame.class?ref=0588f8c8db031785f71616191b72e8df4de07532"}, {"sha": "526d30b221bf829075c7ce6745eeab2fa424dbf7", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/VMVirtualMachine.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0588f8c8db031785f71616191b72e8df4de07532/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0588f8c8db031785f71616191b72e8df4de07532/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.class?ref=0588f8c8db031785f71616191b72e8df4de07532"}, {"sha": "9bdf0783cf3710812cc6d87cf3a56256c17b556f", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/exception/InvalidFrameException.class", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0588f8c8db031785f71616191b72e8df4de07532/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidFrameException.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0588f8c8db031785f71616191b72e8df4de07532/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidFrameException.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidFrameException.class?ref=0588f8c8db031785f71616191b72e8df4de07532"}, {"sha": "5b8fa18bafab2b36dac8ac5497234c5a472ba2fc", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/processor/StackFrameCommandSet.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0588f8c8db031785f71616191b72e8df4de07532/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FStackFrameCommandSet.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0588f8c8db031785f71616191b72e8df4de07532/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FStackFrameCommandSet.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FStackFrameCommandSet.class?ref=0588f8c8db031785f71616191b72e8df4de07532"}, {"sha": "8181f86a2c02e425a8d49dc6049cf74524683d3f", "filename": "libjava/gnu/classpath/jdwp/VMFrame.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0588f8c8db031785f71616191b72e8df4de07532/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMFrame.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0588f8c8db031785f71616191b72e8df4de07532/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMFrame.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMFrame.h?ref=0588f8c8db031785f71616191b72e8df4de07532", "patch": "@@ -29,15 +29,16 @@ class gnu::classpath::jdwp::VMFrame : public ::java::lang::Object\n {\n \n public:\n-  VMFrame();\n+  VMFrame(::java::lang::Thread *, jlong, ::gnu::classpath::jdwp::util::Location *);\n   virtual ::gnu::classpath::jdwp::util::Location * getLocation();\n   virtual ::java::lang::Object * getValue(jint);\n   virtual void setValue(jint, ::java::lang::Object *);\n   virtual ::java::lang::Object * getObject();\n   virtual jlong getId();\n   static const jint SIZE = 8;\n private:\n-  ::java::lang::Object * __attribute__((aligned(__alignof__( ::java::lang::Object)))) obj;\n+  ::java::lang::Thread * __attribute__((aligned(__alignof__( ::java::lang::Object)))) thread;\n+  ::java::lang::Object * obj;\n   ::gnu::classpath::jdwp::util::Location * loc;\n   jlong id;\n public:"}, {"sha": "e0f093fd68597c85f0a77d313880c7958223ba52", "filename": "libjava/gnu/classpath/jdwp/VMFrame.java", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0588f8c8db031785f71616191b72e8df4de07532/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMFrame.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0588f8c8db031785f71616191b72e8df4de07532/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMFrame.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMFrame.java?ref=0588f8c8db031785f71616191b72e8df4de07532", "patch": "@@ -1,5 +1,5 @@\n /* VMFrame.java -- Reference implementation of VM hooks for JDWP Frame access.\n-   Copyright (C) 2005, 2006 Free Software Foundation\n+   Copyright (C) 2005, 2006, 2007 Free Software Foundation\n \n This file is part of GNU Classpath.\n \n@@ -54,7 +54,10 @@\n    */\n   public static final int SIZE = 8;\n \n-  // The object this frame resides in\n+  // The thread this frame resides in\n+  private Thread thread;\n+   \n+  //The object of this frame\n   private Object obj;\n   \n   // The current location of this frame\n@@ -63,6 +66,20 @@\n   // id of this frame\n   private long id;\n   \n+  /**\n+   * Create a new VMFrame object.\n+   * \n+   * @param thr a Thread, the thread this frame is in\n+   * @param frame_id a long, the jframeID of this frame\n+   * @param frame_loc a Location, the location of this frame\n+   */\n+  public VMFrame(Thread thr, long frame_id, Location frame_loc)\n+  {\n+    thread = thr;\n+    id = frame_id;\n+    loc = frame_loc;\n+  }\n+  \n   /**\n    * Gets the current location of the frame.\n    */\n@@ -84,6 +101,14 @@ public Location getLocation()\n    * @param value The value to assign the variable to\n    */\n   public native void setValue(int slot, Object value);\n+  \n+  /**\n+   * Get the thread this frame is in.\n+   */\n+  public Thread getThread()\n+  {\n+    return thread;\n+  }\n \n   /**\n    * Get the object which is represented by 'this' in the context of the frame,"}, {"sha": "b90b476c04bc673867851266cc1a75def2d9e41d", "filename": "libjava/gnu/classpath/jdwp/VMVirtualMachine.h", "status": "modified", "additions": 30, "deletions": 38, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0588f8c8db031785f71616191b72e8df4de07532/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0588f8c8db031785f71616191b72e8df4de07532/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.h?ref=0588f8c8db031785f71616191b72e8df4de07532", "patch": "@@ -1,4 +1,3 @@\n-\n // DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n \n #ifndef __gnu_classpath_jdwp_VMVirtualMachine__\n@@ -17,59 +16,52 @@ extern \"Java\"\n     {\n       namespace jdwp\n       {\n-          class VMFrame;\n-          class VMMethod;\n-          class VMVirtualMachine;\n+        class VMVirtualMachine;\n         namespace event\n         {\n-            class EventRequest;\n+          class EventRequest;\n         }\n         namespace util\n         {\n-            class MethodResult;\n+          class MethodResult;\n         }\n+        class VMFrame;\n+        class VMMethod;\n       }\n     }\n   }\n-  namespace java\n-  {\n-    namespace nio\n-    {\n-        class ByteBuffer;\n-    }\n-  }\n }\n \n class gnu::classpath::jdwp::VMVirtualMachine : public ::java::lang::Object\n {\n-\n public:\n-  VMVirtualMachine();\n-  static void initialize();\n-  static void suspendThread(::java::lang::Thread *);\n-  static void suspendAllThreads();\n-  static void resumeThread(::java::lang::Thread *);\n-  static void resumeAllThreads();\n-  static jint getSuspendCount(::java::lang::Thread *);\n-  static jint getAllLoadedClassesCount();\n-  static ::java::util::Iterator * getAllLoadedClasses();\n-  static jint getClassStatus(::java::lang::Class *);\n-  static JArray< ::gnu::classpath::jdwp::VMMethod * > * getAllClassMethods(::java::lang::Class *);\n-  static ::gnu::classpath::jdwp::VMMethod * getClassMethod(::java::lang::Class *, jlong);\n-  static ::java::util::ArrayList * getFrames(::java::lang::Thread *, jint, jint);\n-  static ::gnu::classpath::jdwp::VMFrame * getFrame(::java::lang::Thread *, ::java::nio::ByteBuffer *);\n-  static jint getFrameCount(::java::lang::Thread *);\n-  static jint getThreadStatus(::java::lang::Thread *);\n-  static ::java::util::ArrayList * getLoadRequests(::java::lang::ClassLoader *);\n-  static ::gnu::classpath::jdwp::util::MethodResult * executeMethod(::java::lang::Object *, ::java::lang::Thread *, ::java::lang::Class *, ::java::lang::reflect::Method *, JArray< ::java::lang::Object * > *, jboolean);\n-  static ::java::lang::String * getSourceFile(::java::lang::Class *);\n-  static void registerEvent(::gnu::classpath::jdwp::event::EventRequest *);\n-  static void unregisterEvent(::gnu::classpath::jdwp::event::EventRequest *);\n-  static void clearEvents(jbyte);\n+  VMVirtualMachine ();\n+  static void initialize ();\n+  static void suspendThread (::java::lang::Thread *);\n+  static void suspendAllThreads ();\n+  static void resumeThread (::java::lang::Thread *);\n+  static void resumeAllThreads ();\n+  static jint getSuspendCount (::java::lang::Thread *);\n+  static jint getAllLoadedClassesCount ();\n+  static ::java::util::Iterator *getAllLoadedClasses ();\n+  static jint getClassStatus (::java::lang::Class *);\n+  static JArray< ::gnu::classpath::jdwp::VMMethod *> *getAllClassMethods (::java::lang::Class *);\n+  static ::gnu::classpath::jdwp::VMMethod *getClassMethod (::java::lang::Class *, jlong);\n+  static ::java::util::ArrayList *getFrames (::java::lang::Thread *, jint, jint);\n+  static ::gnu::classpath::jdwp::VMFrame *getFrame (::java::lang::Thread *, jlong);\n+  static jint getFrameCount (::java::lang::Thread *);\n+  static jint getThreadStatus (::java::lang::Thread *);\n+  static ::java::util::ArrayList *getLoadRequests (::java::lang::ClassLoader *);\n+  static ::gnu::classpath::jdwp::util::MethodResult *executeMethod (::java::lang::Object *, ::java::lang::Thread *, ::java::lang::Class *, ::java::lang::reflect::Method *, JArray< ::java::lang::Object *> *, jboolean);\n+  static ::java::lang::String *getSourceFile (::java::lang::Class *);\n+  static void registerEvent (::gnu::classpath::jdwp::event::EventRequest *);\n+  static void unregisterEvent (::gnu::classpath::jdwp::event::EventRequest *);\n+  static void clearEvents (jbyte);\n private:\n-  static ::java::util::Hashtable * _jdwp_suspend_counts;\n+  static ::java::util::Hashtable *_jdwp_suspend_counts;\n public:\n+\n   static ::java::lang::Class class$;\n };\n \n-#endif // __gnu_classpath_jdwp_VMVirtualMachine__\n+#endif /* __gnu_classpath_jdwp_VMVirtualMachine__ */"}, {"sha": "1b0f7f6fa3c4d67fe7496937f21094441d71a8f2", "filename": "libjava/gnu/classpath/jdwp/VMVirtualMachine.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0588f8c8db031785f71616191b72e8df4de07532/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0588f8c8db031785f71616191b72e8df4de07532/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.java?ref=0588f8c8db031785f71616191b72e8df4de07532", "patch": "@@ -1,7 +1,7 @@\n /* VMVirtualMachine.java -- A reference implementation of a JDWP virtual\n    machine\n \n-   Copyright (C) 2005, 2006 Free Software Foundation\n+   Copyright (C) 2005, 2006, 2007 Free Software Foundation\n \n This file is part of GNU Classpath.\n \n@@ -243,7 +243,7 @@ public static native ArrayList getFrames (Thread thread, int start,\n    * @param  bb      buffer containing the frame's ID\n    * @return the desired frame\n    */\n-  public static native VMFrame getFrame (Thread thread, ByteBuffer bb)\n+  public static native VMFrame getFrame (Thread thread, long frameID)\n     throws JdwpException;\n \n   /**"}, {"sha": "abe84e0e4e021b86e5fc33e72bbf901753a9c54b", "filename": "libjava/gnu/classpath/jdwp/exception/InvalidFrameException.h", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0588f8c8db031785f71616191b72e8df4de07532/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidFrameException.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0588f8c8db031785f71616191b72e8df4de07532/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidFrameException.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidFrameException.h?ref=0588f8c8db031785f71616191b72e8df4de07532", "patch": "@@ -0,0 +1,36 @@\n+\n+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n+\n+#ifndef __gnu_classpath_jdwp_exception_InvalidFrameException__\n+#define __gnu_classpath_jdwp_exception_InvalidFrameException__\n+\n+#pragma interface\n+\n+#include <gnu/classpath/jdwp/exception/JdwpException.h>\n+extern \"Java\"\n+{\n+  namespace gnu\n+  {\n+    namespace classpath\n+    {\n+      namespace jdwp\n+      {\n+        namespace exception\n+        {\n+            class InvalidFrameException;\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+class gnu::classpath::jdwp::exception::InvalidFrameException : public ::gnu::classpath::jdwp::exception::JdwpException\n+{\n+\n+public:\n+  InvalidFrameException(jlong);\n+  InvalidFrameException(::java::lang::String *);\n+  static ::java::lang::Class class$;\n+};\n+\n+#endif // __gnu_classpath_jdwp_exception_InvalidFrameException__"}, {"sha": "ab11b3ed299bfb916ea6f86460a2274aa1cc19b9", "filename": "libjava/gnu/classpath/jdwp/natVMVirtualMachine.cc", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0588f8c8db031785f71616191b72e8df4de07532/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0588f8c8db031785f71616191b72e8df4de07532/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc?ref=0588f8c8db031785f71616191b72e8df4de07532", "patch": "@@ -14,13 +14,16 @@ details. */\n #include <jvm.h>\n #include <jvmti.h>\n \n+#include <java-interp.h>\n+\n #include <java/lang/Class.h>\n #include <java/lang/ClassLoader.h>\n #include <java/lang/Integer.h>\n #include <java/lang/String.h>\n #include <java/lang/StringBuilder.h>\n #include <java/lang/Thread.h>\n #include <java/nio/ByteBuffer.h>\n+#include <java/nio/ByteBufferImpl.h>\n #include <java/util/ArrayList.h>\n #include <java/util/Collection.h>\n #include <java/util/Hashtable.h>\n@@ -39,6 +42,7 @@ details. */\n #include <gnu/classpath/jdwp/event/VmInitEvent.h>\n #include <gnu/classpath/jdwp/event/filters/IEventFilter.h>\n #include <gnu/classpath/jdwp/event/filters/LocationOnlyFilter.h>\n+#include <gnu/classpath/jdwp/exception/InvalidFrameException.h>\n #include <gnu/classpath/jdwp/exception/InvalidLocationException.h>\n #include <gnu/classpath/jdwp/exception/InvalidMethodException.h>\n #include <gnu/classpath/jdwp/exception/JdwpInternalErrorException.h>\n@@ -432,9 +436,50 @@ gnu::classpath::jdwp::VMVirtualMachine::getFrames (MAYBE_UNUSED Thread *thread,\n \n gnu::classpath::jdwp::VMFrame *\n gnu::classpath::jdwp::VMVirtualMachine::\n-getFrame (MAYBE_UNUSED Thread *thread, MAYBE_UNUSED::java::nio::ByteBuffer *bb)\n+getFrame (Thread *thread, jlong frameID)\n {\n-  return NULL;\n+  using namespace gnu::classpath::jdwp::exception;\n+  \n+  _Jv_Frame *vm_frame = (_Jv_Frame *) thread->frame;\n+  jint depth = 0;\n+  _Jv_Frame *frame = reinterpret_cast<_Jv_Frame *> (frameID); \n+  \n+  // We need to find the stack depth of the frame, so search through the call\n+  // stack to find it.  This also checks for a valid frameID.\n+  while (vm_frame != frame)\n+    {\n+      vm_frame = vm_frame->next;\n+      depth++;\n+      if (vm_frame == NULL)\n+        throw new InvalidFrameException (frameID);\n+    }\n+  \n+  Location *loc = NULL;\n+  jvmtiFrameInfo info;\n+  jvmtiError jerr;\n+  jint num_frames;\n+  jclass klass;\n+  \n+  // Get the info for the frame of interest\n+  jerr = _jdwp_jvmtiEnv->GetStackTrace (thread, depth, 1, &info, &num_frames);\n+   \n+  if (jerr != JVMTI_ERROR_NONE)\n+    throw_jvmti_error (jerr);\n+  \n+  jerr = _jdwp_jvmtiEnv->GetMethodDeclaringClass (info.method, &klass);\n+      \n+  if (jerr != JVMTI_ERROR_NONE)\n+    throw_jvmti_error (jerr);\n+\n+  VMMethod *meth \n+    = getClassMethod (klass, reinterpret_cast<jlong> (info.method));\n+  \n+  if (info.location == -1)\n+    loc = new Location (meth, 0);\n+  else\n+    loc = new Location (meth, info.location);\n+  \n+  return new VMFrame (thread, reinterpret_cast<jlong> (vm_frame), loc); \n }\n \n jint"}]}