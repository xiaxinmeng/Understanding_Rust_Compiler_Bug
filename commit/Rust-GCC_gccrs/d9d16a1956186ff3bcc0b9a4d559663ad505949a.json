{"sha": "d9d16a1956186ff3bcc0b9a4d559663ad505949a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlkMTZhMTk1NjE4NmZmM2JjYzBiOWE0ZDU1OTY2M2FkNTA1OTQ5YQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-08-22T12:19:01Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-08-22T12:19:01Z"}, "message": "Makefile.in (gccspec.o, cppspec.o): Update dependencies.\n\n\t* Makefile.in (gccspec.o, cppspec.o): Update dependencies.\n\t* common.opt (L, nodefaultlibs, nostdlib, pg, static): New\n\toptions.\n\t* config/avr/avr.h (LIBSTDCXX): Remove initial \"-l\".\n\t* config/freebsd.h (MATH_LIBRARY_PROFILE): Remove initial \"-l\".\n\t* config/i386/djgpp.h (LIBSTDCXX): Remove initial \"-l\".\n\t* config/rs6000/aix.h (LIBSTDCXX_STATIC): Remove initial \"-l\".\n\t* config/s390/tpf.h (MATH_LIBRARY, LIBSTDCXX): Remove initial\n\t\"-l\".\n\t* cppspec.c: Include opts.h.\n\t(lang_specific_driver): Use cl_decoded_option structures.\n\t* doc/tm.texi.in (MATH_LIBRARY): Update documentation.\n\t* doc/tm.texi: Regenerate.\n\t* gcc.c (translate_options): Translate -d to -foutput-class-dir=.\n\t(driver_handle_option): Allow driver options needing no special\n\tprocessing.\n\t(process_command): Decode options before call to\n\tlang_specific_driver.  Pass decoded options to\n\tlang_specific_driver.\n\t* gcc.h (lang_specific_driver): Update prototype.\n\t* gccspec.c: Include opts.h.\n\t(lang_specific_driver): Use cl_decoded_option structures.\n\t* opts-common.c (option_ok_for_language, generate_option,\n\tgenerate_option_input_file): New.\n\t(decode_cmdline_option): Use option_ok_for_language.\n\t(decode_cmdline_options_to_array): Use generate_option_input_file.\n\t(handle_generated_option): Use generate_option.\n\t* opts.h (generate_option, generate_option_input_file): Declare.\n\ncp:\n\t* Make-lang.in (g++spec.o): Update dependencies.\n\t* g++spec.c: Include opts.h\n\t(MATH_LIBRARY, LIBSTDCXX): Remove initial \"-l\".\n\t(lang_specific_driver): Use cl_decoded_option structures.\n\nfortran:\n\t* Make-lang.in (gfortranspec.o): Update dependencies.\n\t* gfortranspec.c: Include coretypes.h before gcc.h.  Include\n\topts.h.\n\t(MATH_LIBRARY, FORTRAN_LIBRARY): Remove initial \"-l\".\n\t(ADD_ARG_LIBGFORTRAN, Option, lookup_option): Remove.\n\t(g77_xargc): Make unsigned.\n\t(g77_xargv): Change to g77_x_decoded_options.\n\t(g77_newargc): Make unsigned.\n\t(g77_newargv): Change to g77_new_decoded_options.\n\t(strings_same, options_same): New.\n\t(append_arg): Use cl_decoded_option structures.\n\t(append_option): New.\n\t(add_arg_libgfortran): New.\n\t(lang_specific_driver): Use cl_decoded_option structures.\n\njava:\n\t* Make-lang.in (jvspec.o): Update dependencies.\n\t* jvspec.c: Include opts.h.\n\t(PARAM_ARG): Remove.\n\t(find_spec_file): Do not add leading -specs=.\n\t(lang_specific_driver): Use cl_decoded_option structures.\n\t* lang.opt (C, CLASSPATH, D, bootclasspath, classpath, encoding,\n\textdirs, fmain=, s-bc-abi): New options.\n\nFrom-SVN: r163459", "tree": {"sha": "c0fcc55a02b851820af00ecab1b47d4cc06898cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0fcc55a02b851820af00ecab1b47d4cc06898cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9d16a1956186ff3bcc0b9a4d559663ad505949a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9d16a1956186ff3bcc0b9a4d559663ad505949a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9d16a1956186ff3bcc0b9a4d559663ad505949a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9d16a1956186ff3bcc0b9a4d559663ad505949a/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3607fdb2db5f194374dc33c7ed4c55165b7344d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3607fdb2db5f194374dc33c7ed4c55165b7344d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3607fdb2db5f194374dc33c7ed4c55165b7344d6"}], "stats": {"total": 1775, "additions": 897, "deletions": 878}, "files": [{"sha": "ab3cff97f8627196548193bc9759150ab972d4db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9d16a1956186ff3bcc0b9a4d559663ad505949a", "patch": "@@ -1,3 +1,34 @@\n+2010-08-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* Makefile.in (gccspec.o, cppspec.o): Update dependencies.\n+\t* common.opt (L, nodefaultlibs, nostdlib, pg, static): New\n+\toptions.\n+\t* config/avr/avr.h (LIBSTDCXX): Remove initial \"-l\".\n+\t* config/freebsd.h (MATH_LIBRARY_PROFILE): Remove initial \"-l\".\n+\t* config/i386/djgpp.h (LIBSTDCXX): Remove initial \"-l\".\n+\t* config/rs6000/aix.h (LIBSTDCXX_STATIC): Remove initial \"-l\".\n+\t* config/s390/tpf.h (MATH_LIBRARY, LIBSTDCXX): Remove initial\n+\t\"-l\".\n+\t* cppspec.c: Include opts.h.\n+\t(lang_specific_driver): Use cl_decoded_option structures.\n+\t* doc/tm.texi.in (MATH_LIBRARY): Update documentation.\n+\t* doc/tm.texi: Regenerate.\n+\t* gcc.c (translate_options): Translate -d to -foutput-class-dir=.\n+\t(driver_handle_option): Allow driver options needing no special\n+\tprocessing.\n+\t(process_command): Decode options before call to\n+\tlang_specific_driver.  Pass decoded options to\n+\tlang_specific_driver.\n+\t* gcc.h (lang_specific_driver): Update prototype.\n+\t* gccspec.c: Include opts.h.\n+\t(lang_specific_driver): Use cl_decoded_option structures.\n+\t* opts-common.c (option_ok_for_language, generate_option,\n+\tgenerate_option_input_file): New.\n+\t(decode_cmdline_option): Use option_ok_for_language.\n+\t(decode_cmdline_options_to_array): Use generate_option_input_file.\n+\t(handle_generated_option): Use generate_option.\n+\t* opts.h (generate_option, generate_option_input_file): Declare.\n+\n 2010-08-22  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/mips/mips.c (mips_override_options): Rename to..."}, {"sha": "e9b9d986d955b18ae54cfd1923d1bc63e0ba8a6a", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=d9d16a1956186ff3bcc0b9a4d559663ad505949a", "patch": "@@ -2197,13 +2197,15 @@ gcc.o: gcc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) intl.h multilib.h \\\n   $(DRIVER_DEFINES) \\\n   -c $(srcdir)/gcc.c $(OUTPUT_OPTION))\n \n-gccspec.o: gccspec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(GCC_H)\n+gccspec.o: gccspec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(GCC_H) \\\n+    opts.h\n \t(SHLIB_LINK='$(SHLIB_LINK)'; \\\n \t$(COMPILER) $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n   $(DRIVER_DEFINES) \\\n   -c $(srcdir)/gccspec.c $(OUTPUT_OPTION))\n \n-cppspec.o: cppspec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(GCC_H)\n+cppspec.o: cppspec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(GCC_H) \\\n+    opts.h\n \n specs.h : s-specs ; @true\n s-specs : Makefile"}, {"sha": "fef81c1d6e25d4cf85bb09de075ff7b426cef6c2", "filename": "gcc/common.opt", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=d9d16a1956186ff3bcc0b9a4d559663ad505949a", "patch": "@@ -69,6 +69,9 @@ Driver Joined Separate\n E\n Driver\n \n+L\n+Driver Joined Separate\n+\n O\n Common JoinedOrMissing Optimization\n -O<number>\tSet optimization level to <number>\n@@ -1645,6 +1648,12 @@ Driver Joined Separate\n no-canonical-prefixes\n Driver\n \n+nodefaultlibs\n+Driver\n+\n+nostdlib\n+Driver\n+\n o\n Common Driver Joined Separate MissingArgError(missing filename after %qs)\n -o <file>\tPlace output into <file>\n@@ -1664,6 +1673,9 @@ pedantic-errors\n Common\n Like -pedantic but issue them as errors\n \n+pg\n+Driver\n+\n pipe\n Driver Var(use_pipes)\n \n@@ -1740,6 +1752,9 @@ Driver Separate\n specs=\n Driver Joined\n \n+static\n+Driver\n+\n static-libgcc\n Driver\n "}, {"sha": "fd3cd1d3a528fa8bf47ac51c4458c1a0221c04e6", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=d9d16a1956186ff3bcc0b9a4d559663ad505949a", "patch": "@@ -780,7 +780,7 @@ mmcu=*:-mmcu=%*}\"\n #define LIB_SPEC \\\n   \"%{!mmcu=at90s1*:%{!mmcu=attiny11:%{!mmcu=attiny12:%{!mmcu=attiny15:%{!mmcu=attiny28: -lc }}}}}\"\n \n-#define LIBSTDCXX \"-lgcc\"\n+#define LIBSTDCXX \"gcc\"\n /* No libstdc++ for now.  Empty string doesn't work.  */\n \n #define LIBGCC_SPEC \\"}, {"sha": "591ce1a66676587cce898c8dea5fde8980d881fb", "filename": "gcc/config/freebsd.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fconfig%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fconfig%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffreebsd.h?ref=d9d16a1956186ff3bcc0b9a4d559663ad505949a", "patch": "@@ -1,5 +1,6 @@\n /* Base configuration file for all FreeBSD targets.\n-   Copyright (C) 1999, 2000, 2001, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2007, 2008, 2009,\n+   2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -76,7 +77,7 @@ along with GCC; see the file COPYING3.  If not see\n #undef  WINT_TYPE\n #define WINT_TYPE \"int\"\n \n-#define MATH_LIBRARY_PROFILE    \"-lm_p\"\n+#define MATH_LIBRARY_PROFILE    \"m_p\"\n \n /* Code generation parameters.  */\n "}, {"sha": "e95ee49365bf98879d91f7d191ed0a7d859da624", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=d9d16a1956186ff3bcc0b9a4d559663ad505949a", "patch": "@@ -1,6 +1,6 @@\n /* Configuration for an i386 running MS-DOS with DJGPP.\n-   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004, 2005,\n-   2007 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2007,\n+   2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -166,7 +166,7 @@ along with GCC; see the file COPYING3.  If not see\n #define PTRDIFF_TYPE \"int\"\n \n /* Used to be defined in xm-djgpp.h, but moved here for cross-compilers.  */\n-#define LIBSTDCXX \"-lstdcxx\"\n+#define LIBSTDCXX \"stdcxx\"\n \n #define TARGET_VERSION fprintf (stderr, \" (80386, MS-DOS DJGPP)\"); \n "}, {"sha": "0bf781e853f44c1a6e9ec48e3dffd757920afa10", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=d9d16a1956186ff3bcc0b9a4d559663ad505949a", "patch": "@@ -156,7 +156,7 @@\n %{p:-L%R/lib/profiled -L%R/usr/lib/profiled} %{!shared:%{g*:-lg}} -lc\"\n \n /* Static linking with shared libstdc++ requires libsupc++ as well.  */\n-#define LIBSTDCXX_STATIC \"-lsupc++\"\n+#define LIBSTDCXX_STATIC \"supc++\"\n \n /* This now supports a natural alignment mode.  */\n /* AIX word-aligns FP doubles but doubleword-aligns 64-bit ints.  */"}, {"sha": "d2a0f966b0fa10c047887d181d6a8e4df50e5d4d", "filename": "gcc/config/s390/tpf.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fconfig%2Fs390%2Ftpf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fconfig%2Fs390%2Ftpf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Ftpf.h?ref=d9d16a1956186ff3bcc0b9a4d559663ad505949a", "patch": "@@ -1,5 +1,6 @@\n /* Definitions for target OS TPF for GNU compiler, for IBM S/390 hardware\n-   Copyright (C) 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2007, 2009,\n+   2010 Free Software Foundation, Inc.\n    Contributed by P.J. Darcy (darcypj@us.ibm.com),\n                   Hartmut Penner (hpenner@de.ibm.com), and\n                   Ulrich Weigand (uweigand@de.ibm.com).\n@@ -124,6 +125,6 @@ along with GCC; see the file COPYING3.  If not see\n #define MD_UNWIND_SUPPORT \"config/s390/tpf-unwind.h\"\n \n /* IBM copies these libraries over with these names.  */\n-#define MATH_LIBRARY \"-lCLBM\"\n-#define LIBSTDCXX \"-lCPP1\"\n+#define MATH_LIBRARY \"CLBM\"\n+#define LIBSTDCXX \"CPP1\"\n #endif /* ! _TPF_H */"}, {"sha": "f485d6ff910ab48665843a2f19990d2c44593255", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d9d16a1956186ff3bcc0b9a4d559663ad505949a", "patch": "@@ -1,3 +1,10 @@\n+2010-08-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* Make-lang.in (g++spec.o): Update dependencies.\n+\t* g++spec.c: Include opts.h\n+\t(MATH_LIBRARY, LIBSTDCXX): Remove initial \"-l\".\n+\t(lang_specific_driver): Use cl_decoded_option structures.\n+\n 2010-08-20  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* call.c: Use FOR_EACH_VEC_ELT."}, {"sha": "a2d34e3c3f315e63b238ae2cf1f0a4d79faf1c76", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=d9d16a1956186ff3bcc0b9a4d559663ad505949a", "patch": "@@ -53,7 +53,8 @@ c++: cc1plus$(exeext)\n # Tell GNU make to ignore these if they exist.\n .PHONY: c++\n \n-g++spec.o: $(srcdir)/cp/g++spec.c $(SYSTEM_H) coretypes.h $(TM_H) $(GCC_H) $(CONFIG_H)\n+g++spec.o: $(srcdir)/cp/g++spec.c $(SYSTEM_H) coretypes.h $(TM_H) $(GCC_H) \\\n+    $(CONFIG_H) opts.h\n \t(SHLIB_LINK='$(SHLIB_LINK)'; \\\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(DRIVER_DEFINES) \\\n \t\t$(INCLUDES) $(srcdir)/cp/g++spec.c)"}, {"sha": "9ebf6bc2eae8e2e1055de9b8a056caa1c3a1722c", "filename": "gcc/cp/g++spec.c", "status": "modified", "additions": 159, "deletions": 172, "changes": 331, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fcp%2Fg%2B%2Bspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fcp%2Fg%2B%2Bspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fg%2B%2Bspec.c?ref=d9d16a1956186ff3bcc0b9a4d559663ad505949a", "patch": "@@ -23,6 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"gcc.h\"\n+#include \"opts.h\"\n \n /* This bit is set if we saw a `-xfoo' language specification.  */\n #define LANGSPEC\t(1<<1)\n@@ -34,14 +35,14 @@ along with GCC; see the file COPYING3.  If not see\n #define SKIPOPT\t\t(1<<4)\n \n #ifndef MATH_LIBRARY\n-#define MATH_LIBRARY \"-lm\"\n+#define MATH_LIBRARY \"m\"\n #endif\n #ifndef MATH_LIBRARY_PROFILE\n #define MATH_LIBRARY_PROFILE MATH_LIBRARY\n #endif\n \n #ifndef LIBSTDCXX\n-#define LIBSTDCXX \"-lstdc++\"\n+#define LIBSTDCXX \"stdc++\"\n #endif\n #ifndef LIBSTDCXX_PROFILE\n #define LIBSTDCXX_PROFILE LIBSTDCXX\n@@ -51,10 +52,11 @@ along with GCC; see the file COPYING3.  If not see\n #endif\n \n void\n-lang_specific_driver (int *in_argc, const char *const **in_argv,\n+lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n+\t\t      unsigned int *in_decoded_options_count,\n \t\t      int *in_added_libraries)\n {\n-  int i, j;\n+  unsigned int i, j;\n \n   /* If nonzero, the user gave us the `-p' or `-pg' flag.  */\n   int saw_profile_flag = 0;\n@@ -71,23 +73,19 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n      -xc++/-xnone.  */\n   int added = 0;\n \n-  /* Used to track options that take arguments, so we don't go wrapping\n-     those with -xc++/-xnone.  */\n-  const char *quote = NULL;\n-\n   /* The new argument list will be contained in this.  */\n-  const char **arglist;\n+  struct cl_decoded_option *new_decoded_options;\n \n   /* Nonzero if we saw a `-xfoo' language specification on the\n      command line.  Used to avoid adding our own -xc++ if the user\n      already gave a language for the file.  */\n   int saw_speclang = 0;\n \n   /* \"-lm\" or \"-lmath\" if it appears on the command line.  */\n-  const char *saw_math = 0;\n+  const struct cl_decoded_option *saw_math = NULL;\n \n   /* \"-lc\" if it appears on the command line.  */\n-  const char *saw_libc = 0;\n+  const struct cl_decoded_option *saw_libc = NULL;\n \n   /* An array used to flag each argument that needs a bit set for\n      LANGSPEC, MATHLIB, or WITHLIBC.  */\n@@ -103,220 +101,206 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n   int shared_libgcc = 1;\n \n   /* The total number of arguments with the new stuff.  */\n-  int argc;\n+  unsigned int argc;\n \n   /* The argument list.  */\n-  const char *const *argv;\n+  struct cl_decoded_option *decoded_options;\n \n   /* The number of libraries added in.  */\n   int added_libraries;\n \n   /* The total number of arguments with the new stuff.  */\n-  int num_args = 1;\n+  unsigned int num_args = 1;\n \n-  argc = *in_argc;\n-  argv = *in_argv;\n+  argc = *in_decoded_options_count;\n+  decoded_options = *in_decoded_options;\n   added_libraries = *in_added_libraries;\n \n   args = XCNEWVEC (int, argc);\n \n   for (i = 1; i < argc; i++)\n     {\n-      /* If the previous option took an argument, we swallow it here.  */\n-      if (quote)\n-\t{\n-\t  quote = NULL;\n-\t  continue;\n-\t}\n+      const char *arg = decoded_options[i].arg;\n+      if (decoded_options[i].errors & CL_ERR_MISSING_ARG)\n+\tcontinue; /* Avoid examining arguments of options missing them.  */\n \n-      /* We don't do this anymore, since we don't get them with minus\n-\t signs on them.  */\n-      if (argv[i][0] == '\\0' || argv[i][1] == '\\0')\n-\tcontinue;\n-\n-      if (argv[i][0] == '-')\n+      switch (decoded_options[i].opt_index)\n \t{\n-\t  if (strcmp (argv[i], \"-nostdlib\") == 0\n-\t      || strcmp (argv[i], \"-nodefaultlibs\") == 0)\n-\t    {\n-\t      library = -1;\n-\t    }\n-\t  else if (strcmp (argv[i], MATH_LIBRARY) == 0)\n+\tcase OPT_nostdlib:\n+\tcase OPT_nodefaultlibs:\n+\t  library = -1;\n+\t  break;\n+\n+\tcase OPT_l:\n+\t  if (strcmp (arg, MATH_LIBRARY) == 0)\n \t    {\n \t      args[i] |= MATHLIB;\n \t      need_math = 0;\n \t    }\n-\t  else if (strcmp (argv[i], \"-lc\") == 0)\n+\t  else if (strcmp (arg, \"c\") == 0)\n \t    args[i] |= WITHLIBC;\n-\t  else if (strcmp (argv[i], \"-pg\") == 0 || strcmp (argv[i], \"-p\") == 0)\n-\t    saw_profile_flag++;\n-\t  else if (strncmp (argv[i], \"-x\", 2) == 0)\n-\t    {\n-\t      const char * arg;\n-\t      if (argv[i][2] != '\\0')\n-\t\targ = argv[i]+2;\n-\t      else if ((argv[i+1]) != NULL)\n-\t\t/* We need to swallow arg on next loop.  */\n-\t\tquote = arg = argv[i+1];\n-  \t      else  /* Error condition, message will be printed later.  */\n-\t\targ = \"\";\n-\t      if (library == 0\n-\t\t  && (strcmp (arg, \"c++\") == 0\n-\t\t      || strcmp (arg, \"c++-cpp-output\") == 0\n-\t\t      || strcmp (arg, \"objective-c++\") == 0\n-\t\t      || strcmp (arg, \"objective-c++-cpp-output\") == 0))\n-\t\tlibrary = 1;\n+\t  else\n+\t    /* Unrecognized libraries (e.g. -lfoo) may require libstdc++.  */\n+\t    library = (library == 0) ? 1 : library;\n+\t  break;\n+\n+\tcase OPT_pg:\n+\tcase OPT_p:\n+\t  saw_profile_flag++;\n+\t  break;\n+\n+\tcase OPT_x:\n+\t  if (library == 0\n+\t      && (strcmp (arg, \"c++\") == 0\n+\t\t  || strcmp (arg, \"c++-cpp-output\") == 0\n+\t\t  || strcmp (arg, \"objective-c++\") == 0\n+\t\t  || strcmp (arg, \"objective-c++-cpp-output\") == 0))\n+\t    library = 1;\n \t\t\n-\t      saw_speclang = 1;\n-\t    }\n-\t  else if (strcmp (argv[i], \"-ObjC++\") == 0)\n-\t    {\n-\t      if (library == 0)\n-\t\tlibrary = 1;\n-\t      saw_speclang = 1;\n-\t    }\n+\t  saw_speclang = 1;\n+\t  break;\n+\n+\tcase OPT_Xlinker:\n+\tcase OPT_Wl_:\n \t  /* Arguments that go directly to the linker might be .o files,\n \t     or something, and so might cause libstdc++ to be needed.  */\n-\t  else if (strcmp (argv[i], \"-Xlinker\") == 0)\n-\t    {\n-\t      quote = argv[i];\n-\t      if (library == 0)\n-\t\tlibrary = 1;\n-\t    }\n-\t  else if (strncmp (argv[i], \"-Wl,\", 4) == 0)\n-\t    library = (library == 0) ? 1 : library;\n-\t  /* Unrecognized libraries (e.g. -lfoo) may require libstdc++.  */\n-\t  else if (strncmp (argv[i], \"-l\", 2) == 0)\n-\t    library = (library == 0) ? 1 : library;\n-\t  else if (((argv[i][2] == '\\0'\n-\t\t     && strchr (\"bBVDUoeTuIYmLiA\", argv[i][1]) != NULL)\n-\t\t    || strcmp (argv[i], \"-Tdata\") == 0))\n-\t    quote = argv[i];\n-\t  else if ((argv[i][2] == '\\0'\n-\t\t    && strchr (\"cSEM\", argv[i][1]) != NULL)\n-\t\t   || strcmp (argv[i], \"-MM\") == 0\n-\t\t   || strcmp (argv[i], \"-fsyntax-only\") == 0)\n-\t    {\n-\t      /* Don't specify libraries if we won't link, since that would\n-\t\t cause a warning.  */\n-\t      library = -1;\n-\t    }\n-\t  else if (strcmp (argv[i], \"-static\") == 0)\n-\t    static_link = 1;\n-\t  else if (strcmp (argv[i], \"-static-libgcc\") == 0)\n-\t    shared_libgcc = 0;\n-\t  else if (strcmp (argv[i], \"-static-libstdc++\") == 0)\n-\t    {\n-\t      library = library >= 0 ? 2 : library;\n-\t      args[i] |= SKIPOPT;\n-\t    }\n-\t  else if (DEFAULT_WORD_SWITCH_TAKES_ARG (&argv[i][1]))\n-\t    i++;\n-\t  else\n-\t    /* Pass other options through.  */\n-\t    continue;\n-\t}\n-      else\n-\t{\n-\t  int len;\n-\n-\t  if (saw_speclang)\n-\t    {\n-\t      saw_speclang = 0;\n+\t  if (library == 0)\n+\t    library = 1;\n+\t  break;\n+\n+\tcase OPT_c:\n+\tcase OPT_S:\n+\tcase OPT_E:\n+\tcase OPT_M:\n+\tcase OPT_MM:\n+\tcase OPT_fsyntax_only:\n+\t  /* Don't specify libraries if we won't link, since that would\n+\t     cause a warning.  */\n+\t  library = -1;\n+\t  break;\n+\n+\tcase OPT_static:\n+\t  static_link = 1;\n+\t  break;\n+\n+\tcase OPT_static_libgcc:\n+\t  shared_libgcc = 0;\n+\t  break;\n+\n+\tcase OPT_static_libstdc__:\n+\t  library = library >= 0 ? 2 : library;\n+\t  args[i] |= SKIPOPT;\n+\t  break;\n+\n+\tcase OPT_SPECIAL_input_file:\n+\t  {\n+\t    int len;\n+\n+\t    /* We don't do this anymore, since we don't get them with minus\n+\t       signs on them.  */\n+\t    if (arg[0] == '\\0' || arg[1] == '\\0')\n \t      continue;\n-\t    }\n \n-\t  /* If the filename ends in .[chi], put options around it.\n-\t     But not if a specified -x option is currently active.  */\n-\t  len = strlen (argv[i]);\n-\t  if (len > 2\n-\t      && (argv[i][len - 1] == 'c'\n-\t\t  || argv[i][len - 1] == 'i'\n-\t\t  || argv[i][len - 1] == 'h')\n-\t      && argv[i][len - 2] == '.')\n-\t    {\n-\t      args[i] |= LANGSPEC;\n-\t      added += 2;\n-\t    }\n-\n-\t  /* If we don't know that this is a header file, we might\n-\t     need to be linking in the libraries.  */\n-\t  if (library == 0)\n-\t    {\n-\t      if ((len <= 2 || strcmp (argv[i] + (len - 2), \".H\") != 0)\n-\t\t  && (len <= 2 || strcmp (argv[i] + (len - 2), \".h\") != 0)\n-\t\t  && (len <= 4 || strcmp (argv[i] + (len - 4), \".hpp\") != 0)\n-\t\t  && (len <= 3 || strcmp (argv[i] + (len - 3), \".hp\") != 0)\n-\t\t  && (len <= 4 || strcmp (argv[i] + (len - 4), \".hxx\") != 0)\n-\t\t  && (len <= 4 || strcmp (argv[i] + (len - 4), \".h++\") != 0)\n-\t\t  && (len <= 4 || strcmp (argv[i] + (len - 4), \".HPP\") != 0)\n-\t\t  && (len <= 4 || strcmp (argv[i] + (len - 4), \".tcc\") != 0)\n-\t\t  && (len <= 3 || strcmp (argv[i] + (len - 3), \".hh\") != 0))\n-\t\tlibrary = 1;\n-\t    }\n+\t    if (saw_speclang)\n+\t      {\n+\t\tsaw_speclang = 0;\n+\t\tcontinue;\n+\t      }\n+\n+\t    /* If the filename ends in .[chi], put options around it.\n+\t       But not if a specified -x option is currently active.  */\n+\t    len = strlen (arg);\n+\t    if (len > 2\n+\t\t&& (arg[len - 1] == 'c'\n+\t\t    || arg[len - 1] == 'i'\n+\t\t    || arg[len - 1] == 'h')\n+\t\t&& arg[len - 2] == '.')\n+\t      {\n+\t\targs[i] |= LANGSPEC;\n+\t\tadded += 2;\n+\t      }\n+\n+\t    /* If we don't know that this is a header file, we might\n+\t       need to be linking in the libraries.  */\n+\t    if (library == 0)\n+\t      {\n+\t\tif ((len <= 2 || strcmp (arg + (len - 2), \".H\") != 0)\n+\t\t    && (len <= 2 || strcmp (arg + (len - 2), \".h\") != 0)\n+\t\t    && (len <= 4 || strcmp (arg + (len - 4), \".hpp\") != 0)\n+\t\t    && (len <= 3 || strcmp (arg + (len - 3), \".hp\") != 0)\n+\t\t    && (len <= 4 || strcmp (arg + (len - 4), \".hxx\") != 0)\n+\t\t    && (len <= 4 || strcmp (arg + (len - 4), \".h++\") != 0)\n+\t\t    && (len <= 4 || strcmp (arg + (len - 4), \".HPP\") != 0)\n+\t\t    && (len <= 4 || strcmp (arg + (len - 4), \".tcc\") != 0)\n+\t\t    && (len <= 3 || strcmp (arg + (len - 3), \".hh\") != 0))\n+\t\t  library = 1;\n+\t      }\n+\t  }\n+\t  break;\n \t}\n     }\n \n-  if (quote)\n-    fatal_error (\"argument to %qs missing\", quote);\n-\n   /* There's no point adding -shared-libgcc if we don't have a shared\n      libgcc.  */\n #ifndef ENABLE_SHARED_LIBGCC\n   shared_libgcc = 0;\n #endif\n \n-  /* Make sure to have room for the trailing NULL argument.\n-     Add one for shared_libgcc or extra static library.  */\n-  num_args = argc + added + need_math + (library > 0) * 4 + 2;\n-  arglist = XNEWVEC (const char *, num_args);\n+  /* Add one for shared_libgcc or extra static library.  */\n+  num_args = argc + added + need_math + (library > 0) * 4 + 1;\n+  new_decoded_options = XNEWVEC (struct cl_decoded_option, num_args);\n \n   i = 0;\n   j = 0;\n \n   /* Copy the 0th argument, i.e., the name of the program itself.  */\n-  arglist[i++] = argv[j++];\n+  new_decoded_options[j++] = decoded_options[i++];\n \n   /* NOTE: We start at 1 now, not 0.  */\n   while (i < argc)\n     {\n-      arglist[j] = argv[i];\n+      new_decoded_options[j] = decoded_options[i];\n \n       /* Make sure -lstdc++ is before the math library, since libstdc++\n \t itself uses those math routines.  */\n       if (!saw_math && (args[i] & MATHLIB) && library > 0)\n \t{\n \t  --j;\n-\t  saw_math = argv[i];\n+\t  saw_math = &decoded_options[i];\n \t}\n \n       if (!saw_libc && (args[i] & WITHLIBC) && library > 0)\n \t{\n \t  --j;\n-\t  saw_libc = argv[i];\n+\t  saw_libc = &decoded_options[i];\n \t}\n \n       /* Wrap foo.[chi] files in a language specification to\n \t force the gcc compiler driver to run cc1plus on them.  */\n       if (args[i] & LANGSPEC)\n \t{\n-\t  int len = strlen (argv[i]);\n-\t  switch (argv[i][len - 1])\n+\t  const char *arg = decoded_options[i].arg;\n+\t  int len = strlen (arg);\n+\t  switch (arg[len - 1])\n \t    {\n \t    case 'c':\n-\t      arglist[j++] = \"-xc++\";\n+\t      generate_option (OPT_x, \"c++\", 1, CL_DRIVER,\n+\t\t\t       &new_decoded_options[j++]);\n \t      break;\n \t    case 'i':\n-\t      arglist[j++] = \"-xc++-cpp-output\";\n+\t      generate_option (OPT_x, \"c++-cpp-output\", 1, CL_DRIVER,\n+\t\t\t       &new_decoded_options[j++]);\n \t      break;\n \t    case 'h':\n-\t      arglist[j++] = \"-xc++-header\";\n+\t      generate_option (OPT_x, \"c++-header\", 1, CL_DRIVER,\n+\t\t\t       &new_decoded_options[j++]);\n \t      break;\n \t    default:\n \t      gcc_unreachable ();\n \t    }\n-\t  arglist[j++] = argv[i];\n-\t  arglist[j] = \"-xnone\";\n+\t  new_decoded_options[j++] = decoded_options[i];\n+\t  generate_option (OPT_x, \"none\", 1, CL_DRIVER,\n+\t\t\t   &new_decoded_options[j]);\n \t}\n \n       if ((args[i] & SKIPOPT) != 0)\n@@ -332,48 +316,51 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n #ifdef HAVE_LD_STATIC_DYNAMIC\n       if (library > 1 && !static_link)\n \t{\n-\t  arglist[j] = \"-Wl,-Bstatic\";\n+\t  generate_option (OPT_Wl_, \"-Bstatic\", 1, CL_DRIVER,\n+\t\t\t   &new_decoded_options[j]);\n \t  j++;\n \t}\n #endif\n-      arglist[j] = saw_profile_flag ? LIBSTDCXX_PROFILE : LIBSTDCXX;\n-      if (arglist[j][0] != '-' || arglist[j][1] == 'l')\n-\tadded_libraries++;\n+      generate_option (OPT_l,\n+\t\t       saw_profile_flag ? LIBSTDCXX_PROFILE : LIBSTDCXX, 1,\n+\t\t       CL_DRIVER, &new_decoded_options[j]);\n+      added_libraries++;\n       j++;\n       /* Add target-dependent static library, if necessary.  */\n       if ((static_link || library > 1) && LIBSTDCXX_STATIC != NULL)\n \t{\n-\t  arglist[j] = LIBSTDCXX_STATIC;\n-\t  if (arglist[j][0] != '-' || arglist[j][1] == 'l')\n-\t    added_libraries++;\n+\t  generate_option (OPT_l, LIBSTDCXX_STATIC, 1,\n+\t\t\t   CL_DRIVER, &new_decoded_options[j]);\n+\t  added_libraries++;\n \t  j++;\n \t}\n #ifdef HAVE_LD_STATIC_DYNAMIC\n       if (library > 1 && !static_link)\n \t{\n-\t  arglist[j] = \"-Wl,-Bdynamic\";\n+\t  generate_option (OPT_Wl_, \"-Bdynamic\", 1, CL_DRIVER,\n+\t\t\t   &new_decoded_options[j]);\n \t  j++;\n \t}\n #endif\n     }\n   if (saw_math)\n-    arglist[j++] = saw_math;\n+    new_decoded_options[j++] = *saw_math;\n   else if (library > 0 && need_math)\n     {\n-      arglist[j] = saw_profile_flag ? MATH_LIBRARY_PROFILE : MATH_LIBRARY;\n-      if (arglist[j][0] != '-' || arglist[j][1] == 'l')\n-\tadded_libraries++;\n+      generate_option (OPT_l,\n+\t\t       saw_profile_flag ? MATH_LIBRARY_PROFILE : MATH_LIBRARY,\n+\t\t       1, CL_DRIVER, &new_decoded_options[j]);\n+      added_libraries++;\n       j++;\n     }\n   if (saw_libc)\n-    arglist[j++] = saw_libc;\n+    new_decoded_options[j++] = *saw_libc;\n   if (shared_libgcc && !static_link)\n-    arglist[j++] = \"-shared-libgcc\";\n-\n-  arglist[j] = NULL;\n+    generate_option (OPT_shared_libgcc, NULL, 1, CL_DRIVER,\n+\t\t     &new_decoded_options[j++]);\n \n-  *in_argc = j;\n-  *in_argv = arglist;\n+  *in_decoded_options_count = j;\n+  *in_decoded_options = new_decoded_options;\n   *in_added_libraries = added_libraries;\n }\n "}, {"sha": "6ca1660845a5da27d8d23022924598b31ecd7fd0", "filename": "gcc/cppspec.c", "status": "modified", "additions": 89, "deletions": 93, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fcppspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fcppspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppspec.c?ref=d9d16a1956186ff3bcc0b9a4d559663ad505949a", "patch": "@@ -22,6 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"gcc.h\"\n+#include \"opts.h\"\n \n /* The `cpp' executable installed in $(bindir) and $(cpp_install_dir)\n    is a customized version of the gcc driver.  It forces -E; -S and -c\n@@ -41,13 +42,14 @@ static const char *const known_suffixes[] =\n   NULL\n };\n \n-/* Filter argc and argv before processing by the gcc driver proper.  */\n+/* Filter the command line before processing by the gcc driver proper.  */\n void\n-lang_specific_driver (int *in_argc, const char *const **in_argv,\n+lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n+\t\t      unsigned int *in_decoded_options_count,\n \t\t      int *in_added_libraries ATTRIBUTE_UNUSED)\n {\n-  int argc = *in_argc;\n-  const char *const *argv = *in_argv;\n+  struct cl_decoded_option *decoded_options = *in_decoded_options;\n+  unsigned int argc = *in_decoded_options_count;\n \n   /* Do we need to read stdin? */\n   int read_stdin = 1;\n@@ -60,16 +62,16 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n \n   /* Positions to insert -xc, -xassembler-with-cpp, and -o, if necessary.\n      0 means unnecessary.  */\n-  int lang_c_here = 0;\n-  int lang_S_here = 0;\n-  int o_here = 0;\n+  unsigned int lang_c_here = 0;\n+  unsigned int lang_S_here = 0;\n+  unsigned int o_here = 0;\n \n   /* Do we need to fix up an input file with an unrecognized suffix? */\n   int need_fixups = 1;\n \n-  int i, j, quote = 0;\n-  const char **new_argv;\n-  int new_argc;\n+  unsigned int i, j;\n+  struct cl_decoded_option *new_decoded_options;\n+  unsigned int new_argc;\n   extern int is_cpp_driver;\n \n   is_cpp_driver = 1;\n@@ -79,117 +81,111 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n      the output file.  If we see a third input file, barf.  */\n   for (i = 1; i < argc; i++)\n     {\n-      if (quote == 1)\n+      switch (decoded_options[i].opt_index)\n \t{\n-\t  quote = 0;\n-\t  continue;\n-\t}\n+\tcase OPT_E:\n+\t  need_E = 0;\n+\t  break;\n \n-      if (argv[i][0] == '-')\n-\t{\n-\t  if (argv[i][1] == '\\0')\n-\t    read_stdin = 0;\n-\t  else if (argv[i][2] == '\\0')\n-\t    {\n-\t      if (argv[i][1] == 'E')\n-\t\tneed_E = 0;\n-\t      else if (argv[i][1] == 'S' || argv[i][1] == 'c')\n-\t\t{\n-\t\t  fatal_error (\"%qs is not a valid option to the \"\n-\t\t\t       \"preprocessor\", argv[i]);\n-\t\t  return;\n-\t\t}\n-\t      else if (argv[i][1] == 'x')\n-\t\t{\n-\t\t  need_fixups = 0;\n-\t\t  quote = 1;\n-\t\t}\n-\t      else if (SWITCH_TAKES_ARG (argv[i][1]))\n-\t\tquote = 1;\n-\t    }\n-\t  else if (argv[i][1] == 'x')\n-\t    need_fixups = 0;\n-\t  else if (WORD_SWITCH_TAKES_ARG (&argv[i][1]))\n-\t    quote = 1;\n-\t}\n-      else /* not an option */\n-\t{\n-\t  seen_input++;\n-\t  if (seen_input == 3)\n-\t    {\n-\t      fatal_error (\"too many input files\");\n-\t      return;\n-\t    }\n-\t  else if (seen_input == 2)\n-\t    {\n-\t      o_here = i;\n-\t    }\n-\t  else\n-\t    {\n+\tcase OPT_S:\n+\tcase OPT_c:\n+\t  fatal_error (\"%qs is not a valid option to the preprocessor\",\n+\t\t       decoded_options[i].orig_option_with_args_text);\n+\t  return;\n+\n+\tcase OPT_x:\n+\t  need_fixups = 0;\n+\t  break;\n+\n+\tcase OPT_SPECIAL_input_file:\n+\t  {\n+\t    const char *file = decoded_options[i].arg;\n+\n+\t    if (strcmp (file, \"-\") == 0)\n \t      read_stdin = 0;\n-\t      if (need_fixups)\n-\t\t{\n-\t\t  int l = strlen (argv[i]);\n-\t\t  int known = 0;\n-\t\t  const char *const *suff;\n-\n-\t\t  for (suff = known_suffixes; *suff; suff++)\n-\t\t    if (!strcmp (*suff, &argv[i][l - strlen(*suff)]))\n+\t    else\n+\t      {\n+\t\tseen_input++;\n+\t\tif (seen_input == 3)\n+\t\t  {\n+\t\t    fatal_error (\"too many input files\");\n+\t\t    return;\n+\t\t  }\n+\t\telse if (seen_input == 2)\n+\t\t  {\n+\t\t    o_here = i;\n+\t\t  }\n+\t\telse\n+\t\t  {\n+\t\t    read_stdin = 0;\n+\t\t    if (need_fixups)\n \t\t      {\n-\t\t\tknown = 1;\n-\t\t\tbreak;\n+\t\t\tint l = strlen (file);\n+\t\t\tint known = 0;\n+\t\t\tconst char *const *suff;\n+\n+\t\t\tfor (suff = known_suffixes; *suff; suff++)\n+\t\t\t  if (!strcmp (*suff, &file[l - strlen(*suff)]))\n+\t\t\t    {\n+\t\t\t      known = 1;\n+\t\t\t      break;\n+\t\t\t    }\n+\n+\t\t\tif (! known)\n+\t\t\t  {\n+\t\t\t    /* .s files are a special case; we have to\n+\t\t\t       treat them like .S files so\n+\t\t\t       -D__ASSEMBLER__ will be in effect.  */\n+\t\t\t    if (!strcmp (\".s\", &file[l - 2]))\n+\t\t\t      lang_S_here = i;\n+\t\t\t    else\n+\t\t\t      lang_c_here = i;\n+\t\t\t  }\n \t\t      }\n-\n-\t\t  if (! known)\n-\t\t    {\n-\t\t      /* .s files are a special case; we have to treat\n-\t\t\t them like .S files so -D__ASSEMBLER__ will be\n-\t\t\t in effect.  */\n-\t\t      if (!strcmp (\".s\", &argv[i][l - 2]))\n-\t\t\tlang_S_here = i;\n-\t\t      else\n-\t\t\tlang_c_here = i;\n-\t\t    }\n-\t\t}\n-\t    }\n+\t\t  }\n+\t      }\n+\t  }\n+\t  break;\n \t}\n     }\n \n   /* If we don't need to edit the command line, we can bail early.  */\n \n-  new_argc = argc + need_E + read_stdin\n-    + !!o_here + !!lang_c_here + !!lang_S_here;\n+  new_argc = argc + need_E + read_stdin + !!lang_c_here + !!lang_S_here;\n \n-  if (new_argc == argc)\n+  if (new_argc == argc && !o_here)\n     return;\n \n-  /* One more slot for a terminating null.  */\n-  new_argv = XNEWVEC (const char *, new_argc + 1);\n+  new_decoded_options = XNEWVEC (struct cl_decoded_option, new_argc);\n \n-  new_argv[0] = argv[0];\n+  new_decoded_options[0] = new_decoded_options[0];\n   j = 1;\n \n   if (need_E)\n-    new_argv[j++] = \"-E\";\n+    generate_option (OPT_E, NULL, 1, CL_DRIVER, &new_decoded_options[j++]);\n \n   for (i = 1; i < argc; i++, j++)\n     {\n       if (i == lang_c_here)\n-\tnew_argv[j++] = \"-xc\";\n+\tgenerate_option (OPT_x, \"c\", 1, CL_DRIVER, &new_decoded_options[j++]);\n       else if (i == lang_S_here)\n-\tnew_argv[j++] = \"-xassembler-with-cpp\";\n+\tgenerate_option (OPT_x, \"assembler-with-cpp\", 1, CL_DRIVER,\n+\t\t\t &new_decoded_options[j++]);\n       else if (i == o_here)\n-\tnew_argv[j++] = \"-o\";\n+\t{\n+\t  generate_option (OPT_o, decoded_options[i].arg, 1, CL_DRIVER,\n+\t\t\t   &new_decoded_options[j]);\n+\t  continue;\n+\t}\n \n-      new_argv[j] = argv[i];\n+      new_decoded_options[j] = decoded_options[i];\n     }\n \n   if (read_stdin)\n-    new_argv[j++] = \"-\";\n+    generate_option_input_file (\"-\", &new_decoded_options[j++]);\n \n-  new_argv[j] = NULL;\n-  *in_argc = new_argc;\n-  *in_argv = new_argv;\n+  *in_decoded_options_count = new_argc;\n+  *in_decoded_options = new_decoded_options;\n }\n \n /* Called before linking.  Returns 0 on success and -1 on failure.  */"}, {"sha": "c64cdf58cc077ec5d36dbcf61ea9869bb3cab838", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=d9d16a1956186ff3bcc0b9a4d559663ad505949a", "patch": "@@ -10695,10 +10695,11 @@ for overlap with regards to asm-declared registers.\n \n @defmac MATH_LIBRARY\n Define this macro as a C string constant for the linker argument to link\n-in the system math library, or @samp{\"\"} if the target does not have a\n+in the system math library, minus the initial @samp{\"-l\"}, or\n+@samp{\"\"} if the target does not have a\n separate math library.\n \n-You need only define this macro if the default of @samp{\"-lm\"} is wrong.\n+You need only define this macro if the default of @samp{\"m\"} is wrong.\n @end defmac\n \n @defmac LIBRARY_PATH_ENV"}, {"sha": "f0bdf68ae439a53baaa1f5066be1e9866e6f1041", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=d9d16a1956186ff3bcc0b9a4d559663ad505949a", "patch": "@@ -10675,10 +10675,11 @@ for overlap with regards to asm-declared registers.\n \n @defmac MATH_LIBRARY\n Define this macro as a C string constant for the linker argument to link\n-in the system math library, or @samp{\"\"} if the target does not have a\n+in the system math library, minus the initial @samp{\"-l\"}, or\n+@samp{\"\"} if the target does not have a\n separate math library.\n \n-You need only define this macro if the default of @samp{\"-lm\"} is wrong.\n+You need only define this macro if the default of @samp{\"m\"} is wrong.\n @end defmac\n \n @defmac LIBRARY_PATH_ENV"}, {"sha": "fcad92f4717a07cdbf02e882af94884d8b4835b1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d9d16a1956186ff3bcc0b9a4d559663ad505949a", "patch": "@@ -1,3 +1,20 @@\n+2010-08-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* Make-lang.in (gfortranspec.o): Update dependencies.\n+\t* gfortranspec.c: Include coretypes.h before gcc.h.  Include\n+\topts.h.\n+\t(MATH_LIBRARY, FORTRAN_LIBRARY): Remove initial \"-l\".\n+\t(ADD_ARG_LIBGFORTRAN, Option, lookup_option): Remove.\n+\t(g77_xargc): Make unsigned.\n+\t(g77_xargv): Change to g77_x_decoded_options.\n+\t(g77_newargc): Make unsigned.\n+\t(g77_newargv): Change to g77_new_decoded_options.\n+\t(strings_same, options_same): New.\n+\t(append_arg): Use cl_decoded_option structures.\n+\t(append_option): New.\n+\t(add_arg_libgfortran): New.\n+\t(lang_specific_driver): Use cl_decoded_option structures.\n+\n 2010-08-21  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/45271"}, {"sha": "d64ef5021f2d85d4cd42b83d65467d16e84fa710", "filename": "gcc/fortran/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Ffortran%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Ffortran%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FMake-lang.in?ref=d9d16a1956186ff3bcc0b9a4d559663ad505949a", "patch": "@@ -78,7 +78,7 @@ fortran: f951$(exeext)\n .PHONY: fortran\n \n gfortranspec.o: $(srcdir)/fortran/gfortranspec.c $(SYSTEM_H) $(TM_H) $(GCC_H) \\\n-\t$(CONFIG_H) coretypes.h intl.h\n+\t$(CONFIG_H) coretypes.h intl.h opts.h\n \t(SHLIB_LINK='$(SHLIB_LINK)'; \\\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(DRIVER_DEFINES) \\\n \t\t$(INCLUDES) $(srcdir)/fortran/gfortranspec.c)"}, {"sha": "4220280eb22688662b46f98e7ee4d69b65397c10", "filename": "gcc/fortran/gfortranspec.c", "status": "modified", "additions": 142, "deletions": 239, "changes": 381, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Ffortran%2Fgfortranspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Ffortran%2Fgfortranspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortranspec.c?ref=d9d16a1956186ff3bcc0b9a4d559663ad505949a", "patch": "@@ -48,202 +48,141 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"config.h\"\n #include \"system.h\"\n+#include \"coretypes.h\"\n #include \"gcc.h\"\n+#include \"opts.h\"\n \n-#include \"coretypes.h\"\n #include \"tm.h\"\n #include \"intl.h\"\n \n #ifndef MATH_LIBRARY\n-#define MATH_LIBRARY \"-lm\"\n+#define MATH_LIBRARY \"m\"\n #endif\n \n #ifndef FORTRAN_LIBRARY\n-#define FORTRAN_LIBRARY \"-lgfortran\"\n-#endif\n-\n-#ifdef HAVE_LD_STATIC_DYNAMIC\n-#define ADD_ARG_LIBGFORTRAN(arg) \\\n-  { \\\n-    if (static_lib && !static_linking) \\\n-      append_arg (\"-Wl,-Bstatic\"); \\\n-    append_arg (arg); \\\n-    if (static_lib && !static_linking) \\\n-      append_arg (\"-Wl,-Bdynamic\"); \\\n-  }\n-#else\n-#define ADD_ARG_LIBGFORTRAN(arg) append_arg (arg);\n+#define FORTRAN_LIBRARY \"gfortran\"\n #endif\n \n-\n-/* Options this driver needs to recognize, not just know how to\n-   skip over.  */\n-typedef enum\n-{\n-  OPTION_b,\t\t\t/* Aka --prefix.  */\n-  OPTION_B,\t\t\t/* Aka --target.  */\n-  OPTION_c,\t\t\t/* Aka --compile.  */\n-  OPTION_E,\t\t\t/* Aka --preprocess.  */\n-  OPTION_help,\t\t\t/* --help.  */\n-  OPTION_i,\t\t\t/* -imacros, -include, -include-*.  */\n-  OPTION_l,\n-  OPTION_L,\t\t\t/* Aka --library-directory.  */\n-  OPTION_nostdlib,\t\t/* Aka --no-standard-libraries, or\n-\t\t\t\t   -nodefaultlibs.  */\n-  OPTION_o,\t\t\t/* Aka --output.  */\n-  OPTION_S,\t\t\t/* Aka --assemble.  */\n-  OPTION_static,\t\t/* -static.  */\n-  OPTION_static_libgfortran,\t/* -static-libgfortran.  */\n-  OPTION_syntax_only,\t\t/* -fsyntax-only.  */\n-  OPTION_v,\t\t\t/* Aka --verbose.  */\n-  OPTION_version,\t\t/* --version.  */\n-  OPTION_V,\t\t\t/* Aka --use-version.  */\n-  OPTION_x,\t\t\t/* Aka --language.  */\n-  OPTION_\t\t\t/* Unrecognized or unimportant.  */\n-}\n-Option;\n-\n /* The original argument list and related info is copied here.  */\n-static int g77_xargc;\n-static const char *const *g77_xargv;\n-static void lookup_option (Option *, int *, const char **, const char *);\n-static void append_arg (const char *);\n+static unsigned int g77_xargc;\n+static const struct cl_decoded_option *g77_x_decoded_options;\n+static void append_arg (const struct cl_decoded_option *);\n \n /* The new argument list will be built here.  */\n-static int g77_newargc;\n-static const char **g77_newargv;\n-\n-/* Assumes text[0] == '-'.  Returns number of argv items that belong to\n-   (and follow) this one, an option id for options important to the\n-   caller, and a pointer to the first char of the arg, if embedded (else\n-   returns NULL, meaning no arg or it's the next argv).\n+static unsigned int g77_newargc;\n+static struct cl_decoded_option *g77_new_decoded_options;\n \n-   Note that this also assumes gcc.c's pass converting long options\n-   to short ones, where available, has already been run.  */\n+/* Return whether strings S1 and S2 are both NULL or both the same\n+   string.  */\n \n-static void\n-lookup_option (Option *xopt, int *xskip, const char **xarg, const char *text)\n+static bool\n+strings_same (const char *s1, const char *s2)\n {\n-  Option opt = OPTION_;\n-  int skip;\n-  const char *arg = NULL;\n-\n-  if ((skip = SWITCH_TAKES_ARG (text[1])))\n-    skip -= (text[2] != '\\0');\t/* See gcc.c.  */\n-\n-  if (text[1] == 'B')\n-    opt = OPTION_B, skip = (text[2] == '\\0'), arg = text + 2;\n-  else if (text[1] == 'b')\n-    opt = OPTION_b, skip = (text[2] == '\\0'), arg = text + 2;\n-  else if ((text[1] == 'c') && (text[2] == '\\0'))\n-    opt = OPTION_c, skip = 0;\n-  else if ((text[1] == 'E') && (text[2] == '\\0'))\n-    opt = OPTION_E, skip = 0;\n-  else if (text[1] == 'i')\n-    opt = OPTION_i, skip = 0;\n-  else if (text[1] == 'l')\n-    opt = OPTION_l;\n-  else if (text[1] == 'L')\n-    opt = OPTION_L, arg = text + 2;\n-  else if (text[1] == 'o')\n-    opt = OPTION_o;\n-  else if ((text[1] == 'S') && (text[2] == '\\0'))\n-    opt = OPTION_S, skip = 0;\n-  else if (text[1] == 'V')\n-    opt = OPTION_V, skip = (text[2] == '\\0');\n-  else if ((text[1] == 'v') && (text[2] == '\\0'))\n-    opt = OPTION_v, skip = 0;\n-  else if (text[1] == 'x')\n-    opt = OPTION_x, arg = text + 2;\n-  else if (text[1] == 'J')\n-    ;\n-  else\n-    {\n-      if ((skip = WORD_SWITCH_TAKES_ARG (text + 1)) != 0)  /* See gcc.c.  */\n-\t;\n-      else if (!strcmp (text, \"-fhelp\"))\t/* Really --help!! */\n-\topt = OPTION_help;\n-      else if (!strcmp (text, \"-nostdlib\")\n-\t       || !strcmp (text, \"-nodefaultlibs\"))\n-\topt = OPTION_nostdlib;\n-      else if (!strcmp (text, \"-fsyntax-only\"))\n-\topt = OPTION_syntax_only;\n-      else if (!strcmp (text, \"-static-libgfortran\"))\n-\topt = OPTION_static_libgfortran;\n-      else if (!strcmp (text, \"-static\"))\n-\topt = OPTION_static;\n-      else if (!strcmp (text, \"-fversion\"))\t/* Really --version!! */\n-\topt = OPTION_version;\n-      else if (!strcmp (text, \"-Xlinker\") || !strcmp (text, \"-specs\"))\n-\tskip = 1;\n-      else\n-\tskip = 0;\n-    }\n+  return s1 == s2 || (s1 != NULL && s2 != NULL && strcmp (s1, s2) == 0);\n+}\n \n-  if (xopt != NULL)\n-    *xopt = opt;\n-  if (xskip != NULL)\n-    *xskip = skip;\n-  if (xarg != NULL)\n-    {\n-      if ((arg != NULL) && (arg[0] == '\\0'))\n-\t*xarg = NULL;\n-      else\n-\t*xarg = arg;\n-    }\n+/* Return whether decoded option structures OPT1 and OPT2 are the\n+   same.  */\n+\n+static bool\n+options_same (const struct cl_decoded_option *opt1,\n+\t      const struct cl_decoded_option *opt2)\n+{\n+  return (opt1->opt_index == opt2->opt_index\n+\t  && strings_same (opt1->arg, opt2->arg)\n+\t  && strings_same (opt1->orig_option_with_args_text,\n+\t\t\t   opt2->orig_option_with_args_text)\n+\t  && strings_same (opt1->canonical_option[0],\n+\t\t\t   opt2->canonical_option[0])\n+\t  && strings_same (opt1->canonical_option[1],\n+\t\t\t   opt2->canonical_option[1])\n+\t  && strings_same (opt1->canonical_option[2],\n+\t\t\t   opt2->canonical_option[2])\n+\t  && strings_same (opt1->canonical_option[3],\n+\t\t\t   opt2->canonical_option[3])\n+\t  && (opt1->canonical_option_num_elements\n+\t      == opt2->canonical_option_num_elements)\n+\t  && opt1->value == opt2->value\n+\t  && opt1->errors == opt2->errors);\n }\n \n /* Append another argument to the list being built.  As long as it is\n    identical to the corresponding arg in the original list, just increment\n    the new arg count.  Otherwise allocate a new list, etc.  */\n \n static void\n-append_arg (const char *arg)\n+append_arg (const struct cl_decoded_option *arg)\n {\n-  static int newargsize;\n+  static unsigned int newargsize;\n \n #if 0\n   fprintf (stderr, \"`%s'\\n\", arg);\n #endif\n \n-  if (g77_newargv == g77_xargv\n+  if (g77_new_decoded_options == g77_x_decoded_options\n       && g77_newargc < g77_xargc\n-      && (arg == g77_xargv[g77_newargc]\n-\t  || !strcmp (arg, g77_xargv[g77_newargc])))\n+      && options_same (arg, &g77_x_decoded_options[g77_newargc]))\n     {\n       ++g77_newargc;\n       return;\t\t\t/* Nothing new here.  */\n     }\n \n-  if (g77_newargv == g77_xargv)\n+  if (g77_new_decoded_options == g77_x_decoded_options)\n     {\t\t\t\t/* Make new arglist.  */\n-      int i;\n+      unsigned int i;\n \n       newargsize = (g77_xargc << 2) + 20;\t/* This should handle all.  */\n-      g77_newargv = (const char **) xmalloc (newargsize * sizeof (char *));\n+      g77_new_decoded_options = XNEWVEC (struct cl_decoded_option, newargsize);\n \n       /* Copy what has been done so far.  */\n       for (i = 0; i < g77_newargc; ++i)\n-\tg77_newargv[i] = g77_xargv[i];\n+\tg77_new_decoded_options[i] = g77_x_decoded_options[i];\n     }\n \n   if (g77_newargc == newargsize)\n-    fatal_error (\"overflowed output arg list for %qs\", arg);\n+    fatal_error (\"overflowed output arg list for %qs\",\n+\t\t arg->orig_option_with_args_text);\n+\n+  g77_new_decoded_options[g77_newargc++] = *arg;\n+}\n \n-  g77_newargv[g77_newargc++] = arg;\n+/* Append an option described by OPT_INDEX, ARG and VALUE to the list\n+   being built.  */\n+static void\n+append_option (size_t opt_index, const char *arg, int value)\n+{\n+  struct cl_decoded_option decoded;\n+\n+  generate_option (opt_index, arg, value, CL_DRIVER, &decoded);\n+  append_arg (&decoded);\n+}\n+\n+/* Append a libgfortran argument to the list being built.  If\n+   FORCE_STATIC, ensure the library is linked statically.  */\n+\n+static void\n+add_arg_libgfortran (bool force_static ATTRIBUTE_UNUSED)\n+{\n+#ifdef HAVE_LD_STATIC_DYNAMIC\n+  if (force_static)\n+    append_option (OPT_Wl_, \"-Bstatic\", 1);\n+#endif\n+  append_option (OPT_l, FORTRAN_LIBRARY, 1);\n+#ifdef HAVE_LD_STATIC_DYNAMIC\n+  if (force_static)\n+    append_option (OPT_Wl_, \"-Bdynamic\", 1);\n+#endif\n }\n \n void\n-lang_specific_driver (int *in_argc, const char *const **in_argv,\n+lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n+\t\t      unsigned int *in_decoded_options_count,\n \t\t      int *in_added_libraries ATTRIBUTE_UNUSED)\n {\n-  int argc = *in_argc;\n-  const char *const *argv = *in_argv;\n-  int i;\n+  unsigned int argc = *in_decoded_options_count;\n+  struct cl_decoded_option *decoded_options = *in_decoded_options;\n+  unsigned int i;\n   int verbose = 0;\n-  Option opt;\n-  int skip;\n-  const char *arg;\n \n   /* This will be NULL if we encounter a situation where we should not\n      link in libf2c.  */\n@@ -261,13 +200,11 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n   /* By default, we throw on the math library if we have one.  */\n   int need_math = (MATH_LIBRARY[0] != '\\0');\n \n-#ifdef HAVE_LD_STATIC_DYNAMIC\n   /* Whether we should link a static libgfortran. */\n   int static_lib = 0; \n \n   /* Whether we need to link statically.  */\n   int static_linking = 0;\n-#endif\n \n   /* The number of input and output files in the incoming arg list.  */\n   int n_infiles = 0;\n@@ -276,91 +213,65 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n #if 0\n   fprintf (stderr, \"Incoming:\");\n   for (i = 0; i < argc; i++)\n-    fprintf (stderr, \" %s\", argv[i]);\n+    fprintf (stderr, \" %s\", decoded_options[i].orig_option_with_args_text);\n   fprintf (stderr, \"\\n\");\n #endif\n \n   g77_xargc = argc;\n-  g77_xargv = argv;\n+  g77_x_decoded_options = decoded_options;\n   g77_newargc = 0;\n-  g77_newargv = CONST_CAST2 (const char **, const char *const *, argv);\n+  g77_new_decoded_options = decoded_options;\n \n   /* First pass through arglist.\n \n      If -nostdlib or a \"turn-off-linking\" option is anywhere in the\n      command line, don't do any library-option processing (except\n-     relating to -x).  Also, if -v is specified, but no other options\n-     that do anything special (allowing -V version, etc.), remember\n-     to add special stuff to make gcc command actually invoke all\n-     the different phases of the compilation process so all the version\n-     numbers can be seen.\n-\n-     Also, here is where all problems with missing arguments to options\n-     are caught.  If this loop is exited normally, it means all options\n-     have the appropriate number of arguments as far as the rest of this\n-     program is concerned.  */\n+     relating to -x).  */\n \n   for (i = 1; i < argc; ++i)\n     {\n-      if ((argv[i][0] == '+') && (argv[i][1] == 'e'))\n-\t{\n-\t  continue;\n-\t}\n-\n-      if ((argv[i][0] != '-') || (argv[i][1] == '\\0'))\n+      switch (decoded_options[i].opt_index)\n \t{\n+\tcase OPT_SPECIAL_input_file:\n \t  ++n_infiles;\n \t  continue;\n-\t}\n-\n-      lookup_option (&opt, &skip, NULL, argv[i]);\n \n-      switch (opt)\n-\t{\n-\tcase OPTION_nostdlib:\n-\tcase OPTION_c:\n-\tcase OPTION_S:\n-\tcase OPTION_syntax_only:\n-\tcase OPTION_E:\n+\tcase OPT_nostdlib:\n+\tcase OPT_nodefaultlibs:\n+\tcase OPT_c:\n+\tcase OPT_S:\n+\tcase OPT_fsyntax_only:\n+\tcase OPT_E:\n \t  /* These options disable linking entirely or linking of the\n \t     standard libraries.  */\n \t  library = 0;\n \t  break;\n \n-\tcase OPTION_static_libgfortran:\n+\tcase OPT_static_libgfortran:\n #ifdef HAVE_LD_STATIC_DYNAMIC\n \t  static_lib = 1;\n #endif\n \t  break;\n \n-\tcase OPTION_static:\n+\tcase OPT_static:\n #ifdef HAVE_LD_STATIC_DYNAMIC\n \t  static_linking = 1;\n #endif\n \t  break;\n \n-\tcase OPTION_l:\n+\tcase OPT_l:\n \t  ++n_infiles;\n \t  break;\n \n-\tcase OPTION_o:\n+\tcase OPT_o:\n \t  ++n_outfiles;\n \t  break;\n \n-\tcase OPTION_v:\n+\tcase OPT_v:\n \t  verbose = 1;\n \t  break;\n \n-\tcase OPTION_b:\n-\tcase OPTION_B:\n-\tcase OPTION_L:\n-\tcase OPTION_i:\n-\tcase OPTION_V:\n-\t  /* These options are useful in conjunction with -v to get\n-\t     appropriate version info.  */\n-\t  break;\n-\n-\tcase OPTION_version:\n+\tcase OPT_fversion:\n \t  printf (\"GNU Fortran %s%s\\n\", pkgversion_string, version_string);\n \t  printf (\"Copyright %s 2010 Free Software Foundation, Inc.\\n\\n\",\n \t\t  _(\"(C)\"));\n@@ -371,22 +282,14 @@ For more information about these matters, see the file named COPYING\\n\\n\"));\n \t  exit (0);\n \t  break;\n \n-\tcase OPTION_help:\n+\tcase OPT_fhelp:\n \t  /* Let gcc.c handle this, as it has a really\n \t     cool facility for handling --help and --verbose --help.  */\n \t  return;\n \n \tdefault:\n \t  break;\n \t}\n-\n-      /* This is the one place we check for missing arguments in the\n-\t program.  */\n-\n-      if (i + skip < argc)\n-\ti += skip;\n-      else\n-\tfatal_error (\"argument to %qs missing\", argv[i]);\n     }\n \n   if ((n_outfiles != 0) && (n_infiles == 0))\n@@ -398,50 +301,50 @@ For more information about these matters, see the file named COPYING\\n\\n\"));\n \n   /* Second pass through arglist, transforming arguments as appropriate.  */\n \n-  append_arg (argv[0]);\t\t/* Start with command name, of course.  */\n+  append_arg (&decoded_options[0]); /* Start with command name, of course.  */\n \n   for (i = 1; i < argc; ++i)\n     {\n-      if (argv[i][0] == '\\0')\n+      if (decoded_options[i].errors & CL_ERR_MISSING_ARG)\n+\t{\n+\t  append_arg (&decoded_options[i]);\n+\t  continue;\n+\t}\n+\n+      if (decoded_options[i].opt_index == OPT_SPECIAL_input_file\n+\t  && decoded_options[i].arg[0] == '\\0')\n \t{\n-\t  append_arg (argv[i]);\t/* Interesting.  Just append as is.  */\n+\t  /* Interesting.  Just append as is.  */\n+\t  append_arg (&decoded_options[i]);\n \t  continue;\n \t}\n \n-      if ((argv[i][0] == '-') && (argv[i][1] != 'l'))\n+      if (decoded_options[i].opt_index != OPT_l\n+\t  && (decoded_options[i].opt_index != OPT_SPECIAL_input_file\n+\t      || strcmp (decoded_options[i].arg, \"-\") == 0))\n \t{\n \t  /* Not a filename or library.  */\n \n \t  if (saw_library == 1 && need_math)\t/* -l<library>.  */\n-\t    append_arg (MATH_LIBRARY);\n+\t    append_option (OPT_l, MATH_LIBRARY, 1);\n \n \t  saw_library = 0;\n \n-\t  lookup_option (&opt, &skip, &arg, argv[i]);\n-\n-\t  if (argv[i][1] == '\\0')\n+\t  if (decoded_options[i].opt_index == OPT_SPECIAL_input_file)\n \t    {\n-\t      append_arg (argv[i]);\t/* \"-\" == Standard input.  */\n+\t      append_arg (&decoded_options[i]);\t/* \"-\" == Standard input.  */\n \t      continue;\n \t    }\n \n-\t  if (opt == OPTION_x)\n+\t  if (decoded_options[i].opt_index == OPT_x)\n \t    {\n \t      /* Track input language.  */\n-\t      const char *lang;\n-\n-\t      if (arg == NULL)\n-\t\tlang = argv[i + 1];\n-\t      else\n-\t\tlang = arg;\n+\t      const char *lang = decoded_options[i].arg;\n \n \t      saw_speclang = (strcmp (lang, \"none\") != 0);\n \t    }\n \n-\t  append_arg (argv[i]);\n-\n-\t  for (; skip != 0; --skip)\n-\t    append_arg (argv[++i]);\n+\t  append_arg (&decoded_options[i]);\n \n \t  continue;\n \t}\n@@ -452,47 +355,47 @@ For more information about these matters, see the file named COPYING\\n\\n\"));\n \tsaw_library = 0;\t/* -xfoo currently active.  */\n       else\n \t{\t\t\t/* -lfoo or filename.  */\n-\t  if (strcmp (argv[i], MATH_LIBRARY) == 0)\n+\t  if (decoded_options[i].opt_index == OPT_l\n+\t      && strcmp (decoded_options[i].arg, MATH_LIBRARY) == 0)\n \t    {\n \t      if (saw_library == 1)\n \t\tsaw_library = 2;\t/* -l<library> -lm.  */\n \t      else\n-\t\t{\n-\t\t  ADD_ARG_LIBGFORTRAN (FORTRAN_LIBRARY);\n-\t\t}\n+\t\tadd_arg_libgfortran (static_lib && !static_linking);\n \t    }\n-\t  else if (strcmp (argv[i], FORTRAN_LIBRARY) == 0)\n+\t  else if (decoded_options[i].opt_index == OPT_l\n+\t      && strcmp (decoded_options[i].arg, FORTRAN_LIBRARY) == 0)\n \t    {\n \t      saw_library = 1;\t/* -l<library>.  */\n-\t      ADD_ARG_LIBGFORTRAN (argv[i]);\n+\t      add_arg_libgfortran (static_lib && !static_linking);\n \t      continue;\n \t    }\n \t  else\n \t    {\t\t\t/* Other library, or filename.  */\n \t      if (saw_library == 1 && need_math)\n-\t\tappend_arg (MATH_LIBRARY);\n+\t\tappend_option (OPT_l, MATH_LIBRARY, 1);\n \t      saw_library = 0;\n \t    }\n \t}\n-      append_arg (argv[i]);\n+      append_arg (&decoded_options[i]);\n     }\n \n   /* Append `-lgfortran -lm' as necessary.  */\n \n   if (library)\n     {\t\t\t\t/* Doing a link and no -nostdlib.  */\n       if (saw_speclang)\n-\tappend_arg (\"-xnone\");\n+\tappend_option (OPT_x, \"none\", 1);\n \n       switch (saw_library)\n \t{\n \tcase 0:\n-\t  ADD_ARG_LIBGFORTRAN (library);\n+\t  add_arg_libgfortran (static_lib && !static_linking);\n \t  /* Fall through.  */\n \n \tcase 1:\n \t  if (need_math)\n-\t    append_arg (MATH_LIBRARY);\n+\t    append_option (OPT_l, MATH_LIBRARY, 1);\n \tdefault:\n \t  break;\n \t}\n@@ -501,30 +404,30 @@ For more information about these matters, see the file named COPYING\\n\\n\"));\n #ifdef ENABLE_SHARED_LIBGCC\n   if (library)\n     {\n-      int i;\n+      unsigned int i;\n \n       for (i = 1; i < g77_newargc; i++)\n-\tif (g77_newargv[i][0] == '-')\n-\t  if (strcmp (g77_newargv[i], \"-static-libgcc\") == 0\n-\t      || strcmp (g77_newargv[i], \"-static\") == 0)\n-\t    break;\n+\tif (g77_new_decoded_options[i].opt_index == OPT_static_libgcc\n+\t    || g77_new_decoded_options[i].opt_index == OPT_static)\n+\t  break;\n \n       if (i == g77_newargc)\n-\tappend_arg (\"-shared-libgcc\");\n+\tappend_option (OPT_shared_libgcc, NULL, 1);\n     }\n \n #endif\n \n-  if (verbose && g77_newargv != g77_xargv)\n+  if (verbose && g77_new_decoded_options != g77_x_decoded_options)\n     {\n       fprintf (stderr, _(\"Driving:\"));\n       for (i = 0; i < g77_newargc; i++)\n-\tfprintf (stderr, \" %s\", g77_newargv[i]);\n+\tfprintf (stderr, \" %s\",\n+\t\t g77_new_decoded_options[i].orig_option_with_args_text);\n       fprintf (stderr, \"\\n\");\n     }\n \n-  *in_argc = g77_newargc;\n-  *in_argv = g77_newargv;\n+  *in_decoded_options_count = g77_newargc;\n+  *in_decoded_options = g77_new_decoded_options;\n }\n \n "}, {"sha": "ea49ec748e64edda784113851647f21aee1fdb91", "filename": "gcc/gcc.c", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=d9d16a1956186ff3bcc0b9a4d559663ad505949a", "patch": "@@ -1368,6 +1368,16 @@ translate_options (int *argcp, const char *const **argvp)\n \t  if (nskip + i > argc)\n \t    nskip = argc - i;\n \n+\t  /* Convert -d with a separate argument to\n+\t     -foutput-class-dir= for Java.  */\n+\t  if (c == 'd' && p[1] == 0 && argv[i + 1] != NULL)\n+\t    {\n+\t      newv[newindex++] = concat (\"-foutput-class-dir=\", argv[i + 1],\n+\t\t\t\t\t NULL);\n+\t      nskip = 0;\n+\t      i += 2;\n+\t    }\n+\n \t  while (nskip > 0)\n \t    {\n \t      newv[newindex++] = argv[i++];\n@@ -3849,12 +3859,6 @@ driver_handle_option (const struct cl_decoded_option *decoded,\n       do_save = false;\n       break;\n \n-    case OPT_S:\n-    case OPT_c:\n-    case OPT_E:\n-      /* have_c already set in a prescan above.  */\n-      break;\n-\n     case OPT_o:\n       have_o = 1;\n #if defined(HAVE_TARGET_EXECUTABLE_SUFFIX) || defined(HAVE_TARGET_OBJECT_SUFFIX)\n@@ -3878,7 +3882,10 @@ driver_handle_option (const struct cl_decoded_option *decoded,\n       break;\n \n     default:\n-      gcc_unreachable ();\n+      /* Various driver options need no special processing at this\n+\t point, having been handled in a prescan above or being\n+\t handled by specs.  */\n+      break;\n     }\n \n   if (do_save)\n@@ -3983,10 +3990,11 @@ process_command (int argc, const char **argv)\n      is relocated. The toolchain was either relocated using GCC_EXEC_PREFIX\n      or an automatically created GCC_EXEC_PREFIX from argv[0].  */\n \n+  decode_cmdline_options_to_array (argc, argv, CL_DRIVER,\n+\t\t\t\t   &decoded_options, &decoded_options_count);\n+\n   /* Do language-specific adjustment/addition of flags.  */\n-  lang_specific_driver (&argc,\n-\t\t\tCONST_CAST2 (const char *const **, const char ***,\n-\t\t\t\t     &argv),\n+  lang_specific_driver (&decoded_options, &decoded_options_count,\n \t\t\t&added_libraries);\n \n   if (gcc_exec_prefix)\n@@ -4118,9 +4126,6 @@ process_command (int argc, const char **argv)\n \n   last_language_n_infiles = -1;\n \n-  decode_cmdline_options_to_array (argc, argv, CL_DRIVER,\n-\t\t\t\t   &decoded_options, &decoded_options_count);\n-\n   handlers.unknown_option_callback = driver_unknown_option_callback;\n   handlers.wrong_lang_callback = driver_wrong_lang_callback;\n   handlers.post_handling_callback = driver_post_handling_callback;"}, {"sha": "091d9c862165113c551746608995d20559f28fff", "filename": "gcc/gcc.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fgcc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fgcc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.h?ref=d9d16a1956186ff3bcc0b9a4d559663ad505949a", "patch": "@@ -41,7 +41,8 @@ extern void set_input (const char *);\n /* Spec files linked with gcc.c must provide definitions for these.  */\n \n /* Called before processing to change/add/remove arguments.  */\n-extern void lang_specific_driver (int *, const char *const **, int *);\n+extern void lang_specific_driver (struct cl_decoded_option **,\n+\t\t\t\t  unsigned int *, int *);\n \n /* Called before linking.  Returns 0 on success and -1 on failure.  */\n extern int lang_specific_pre_link (void);"}, {"sha": "746ebf0c420b78f1812c82b0e85c1ec3e9f1f5de", "filename": "gcc/gccspec.c", "status": "modified", "additions": 36, "deletions": 34, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fgccspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fgccspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgccspec.c?ref=d9d16a1956186ff3bcc0b9a4d559663ad505949a", "patch": "@@ -1,5 +1,5 @@\n /* Specific flags and argument handling of the C front-end.\n-   Copyright (C) 1999, 2001, 2003, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2001, 2003, 2007, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -22,75 +22,77 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"gcc.h\"\n+#include \"opts.h\"\n \n-/* Filter argc and argv before processing by the gcc driver proper.  */\n+/* Filter command line before processing by the gcc driver proper.  */\n void\n-lang_specific_driver (int *in_argc ATTRIBUTE_UNUSED,\n-\t\t      const char *const **in_argv ATTRIBUTE_UNUSED,\n+lang_specific_driver (struct cl_decoded_option **in_decoded_options ATTRIBUTE_UNUSED,\n+\t\t      unsigned int *in_decoded_options_count ATTRIBUTE_UNUSED,\n \t\t      int *in_added_libraries ATTRIBUTE_UNUSED)\n {\n   /* Systems which use the NeXT runtime by default should arrange\n      for the shared libgcc to be used when -fgnu-runtime is passed\n      through specs.  */\n #if defined(ENABLE_SHARED_LIBGCC) && ! defined(NEXT_OBJC_RUNTIME)\n-  int i;\n+  unsigned int i;\n \n   /* The new argument list will be contained in this.  */\n-  const char **arglist;\n+  struct cl_decoded_option *new_decoded_options;\n \n   /* True if we should add -shared-libgcc to the command-line.  */\n   int shared_libgcc = 0;\n \n   /* The total number of arguments with the new stuff.  */\n-  int argc;\n+  unsigned int argc;\n \n   /* The argument list.  */\n-  const char *const *argv;\n+  struct cl_decoded_option *decoded_options;\n \n-  argc = *in_argc;\n-  argv = *in_argv;\n+  argc = *in_decoded_options_count;\n+  decoded_options = *in_decoded_options;\n \n   for (i = 1; i < argc; i++)\n     {\n-      if (argv[i][0] == '-')\n+      switch (decoded_options[i].opt_index)\n \t{\n-\t  if (strcmp (argv[i], \"-static-libgcc\") == 0\n-\t      || strcmp (argv[i], \"-static\") == 0)\n-\t    return;\n-\t}\n-      else\n-\t{\n-\t  int len;\n-\n-\t  /* If the filename ends in .m or .mi, we are compiling ObjC\n-\t     and want to pass -shared-libgcc.  */\n-\t  len = strlen (argv[i]);\n-\t  if ((len > 2 && argv[i][len - 2] == '.' && argv[i][len - 1] == 'm')\n-\t      ||  (len > 3 && argv[i][len - 3] == '.' && argv[i][len - 2] == 'm'\n-\t\t   && argv[i][len - 1] == 'i'))\n-\t    shared_libgcc = 1;\n+\tcase OPT_static_libgcc:\n+\tcase OPT_static:\n+\t  return;\n+\n+\tcase OPT_SPECIAL_input_file:\n+\t  {\n+\t    const char *file = decoded_options[i].arg;\n+\t    int len;\n+\n+\t    /* If the filename ends in .m or .mi, we are compiling\n+\t       ObjC and want to pass -shared-libgcc.  */\n+\t    len = strlen (file);\n+\t    if ((len > 2 && file[len - 2] == '.' && file[len - 1] == 'm')\n+\t\t||  (len > 3 && file[len - 3] == '.' && file[len - 2] == 'm'\n+\t\t     && file[len - 1] == 'i'))\n+\t      shared_libgcc = 1;\n+\t  }\n+\t  break;\n \t}\n     }\n \n   if  (shared_libgcc)\n     {\n-      /* Make sure to have room for the trailing NULL argument.  */\n-      arglist = XNEWVEC (const char *, argc + 2);\n+      new_decoded_options = XNEWVEC (struct cl_decoded_option, argc + 1);\n \n       i = 0;\n       do\n \t{\n-\t  arglist[i] = argv[i];\n+\t  new_decoded_options[i] = decoded_options[i];\n \t  i++;\n \t}\n       while (i < argc);\n \n-      arglist[i++] = \"-shared-libgcc\";\n-\n-      arglist[i] = NULL;\n+      generate_option (OPT_shared_libgcc, NULL, 1, CL_DRIVER,\n+\t\t       &new_decoded_options[i++]);\n \n-      *in_argc = i;\n-      *in_argv = arglist;\n+      *in_decoded_options_count = i;\n+      *in_decoded_options = new_decoded_options;\n     }\n #endif\n }"}, {"sha": "ca9a8d27857587a97d6e29a3887f20d6bce626ee", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=d9d16a1956186ff3bcc0b9a4d559663ad505949a", "patch": "@@ -1,3 +1,13 @@\n+2010-08-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* Make-lang.in (jvspec.o): Update dependencies.\n+\t* jvspec.c: Include opts.h.\n+\t(PARAM_ARG): Remove.\n+\t(find_spec_file): Do not add leading -specs=.\n+\t(lang_specific_driver): Use cl_decoded_option structures.\n+\t* lang.opt (C, CLASSPATH, D, bootclasspath, classpath, encoding,\n+\textdirs, fmain=, s-bc-abi): New options.\n+\n 2010-08-20  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* class.c: Use FOR_EACH_VEC_ELT."}, {"sha": "7d2a6a32b530bf5d14ee89907bb35cd7fd53ab90", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=d9d16a1956186ff3bcc0b9a4d559663ad505949a", "patch": "@@ -57,7 +57,7 @@ JAVA_TARGET_INDEPENDENT_BIN_TOOLS = jcf-dump\n .PHONY: java\n \n jvspec.o: $(srcdir)/java/jvspec.c $(SYSTEM_H) coretypes.h $(TM_H) \\\n-  $(GCC_H) $(CONFIG_H) java/jcf.h java/javaop.h\n+  $(GCC_H) $(CONFIG_H) java/jcf.h java/javaop.h opts.h\n \t(SHLIB_LINK='$(SHLIB_LINK)'; \\\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(DRIVER_DEFINES) \\\n \t\t$(INCLUDES) $(srcdir)/java/jvspec.c $(OUTPUT_OPTION))"}, {"sha": "cb8c1469ea7befe920e542145290dae585c15bd4", "filename": "gcc/java/jvspec.c", "status": "modified", "additions": 238, "deletions": 267, "changes": 505, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fjava%2Fjvspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fjava%2Fjvspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvspec.c?ref=d9d16a1956186ff3bcc0b9a4d559663ad505949a", "patch": "@@ -29,14 +29,13 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"tm.h\"\n #include \"gcc.h\"\n #include \"jcf.h\"\n+#include \"opts.h\"\n \n /* Name of spec file.  */\n #define SPEC_FILE \"libgcj.spec\"\n \n /* This bit is set if we saw a `-xfoo' language specification.  */\n #define LANGSPEC\t(1<<1)\n-/* True if this arg is a parameter to the previous option-taking arg. */\n-#define PARAM_ARG\t(1<<2)\n /* True if this arg is a .java input file name. */\n #define JAVA_FILE_ARG\t(1<<3)\n /* True if this arg is a .class input file name. */\n@@ -88,17 +87,13 @@ static char *\n find_spec_file (const char *dir)\n {\n   char *spec;\n-  int x;\n   struct stat sb;\n \n-  spec = XNEWVEC (char, strlen (dir) + sizeof (SPEC_FILE)\n-\t\t  + sizeof (\"-specs=\") + 4);\n-  strcpy (spec, \"-specs=\");\n-  x = strlen (spec);\n-  strcat (spec, dir);\n+  spec = XNEWVEC (char, strlen (dir) + sizeof (SPEC_FILE) + 4);\n+  strcpy (spec, dir);\n   strcat (spec, \"/\");\n   strcat (spec, SPEC_FILE);\n-  if (! stat (spec + x, &sb))\n+  if (! stat (spec, &sb))\n     return spec;\n   free (spec);\n   return NULL;\n@@ -142,10 +137,11 @@ verify_class_name (const char *name)\n }\n \n void\n-lang_specific_driver (int *in_argc, const char *const **in_argv,\n+lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n+\t\t      unsigned int *in_decoded_options_count,\n \t\t      int *in_added_libraries)\n {\n-  int i, j;\n+  unsigned int i, j;\n \n   int saw_save_temps = 0;\n \n@@ -174,12 +170,8 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n      libraries.  */\n   int added = 2;\n \n-  /* Used to track options that take arguments, so we don't go wrapping\n-     those with -xc++/-xnone.  */\n-  const char *quote = NULL;\n-\n   /* The new argument list will be contained in this.  */\n-  const char **arglist;\n+  struct cl_decoded_option *new_decoded_options;\n \n   /* Nonzero if we saw a `-xfoo' language specification on the\n      command line.  Used to avoid adding our own -xc++ if the user\n@@ -203,16 +195,16 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n   int *args;\n \n   /* The total number of arguments with the new stuff.  */\n-  int argc;\n+  unsigned int argc;\n \n   /* The argument list.  */\n-  const char *const *argv;\n+  struct cl_decoded_option *decoded_options;\n \n   /* The number of libraries added in.  */\n   int added_libraries;\n \n   /* The total number of arguments with the new stuff.  */\n-  int num_args = 1;\n+  unsigned int num_args = 1;\n \n   /* Nonzero if linking is supposed to happen.  */\n   int will_link = 1;\n@@ -226,182 +218,182 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n   /* If linking, nonzero if the BC-ABI is in use.  */\n   int link_for_bc_abi = 0;\n \n-  argc = *in_argc;\n-  argv = *in_argv;\n+  argc = *in_decoded_options_count;\n+  decoded_options = *in_decoded_options;\n   added_libraries = *in_added_libraries;\n \n   args = XCNEWVEC (int, argc);\n \n   for (i = 1; i < argc; i++)\n     {\n-      /* If the previous option took an argument, we swallow it here.  */\n-      if (quote)\n-\t{\n-\t  quote = NULL;\n-\t  args[i] |= PARAM_ARG;\n-\t  continue;\n-\t}\n-\n-      /* We don't do this anymore, since we don't get them with minus\n-\t signs on them.  */\n-      if (argv[i][0] == '\\0' || argv[i][1] == '\\0')\n-\tcontinue;\n-\n-      if (argv[i][0] == '-')\n+      switch (decoded_options[i].opt_index)\n \t{\n-\t  if (library != 0 && (strcmp (argv[i], \"-nostdlib\") == 0\n-\t\t\t       || strcmp (argv[i], \"-nodefaultlibs\") == 0))\n-\t    {\n-\t      library = 0;\n-\t    }\n-\t  else if (strncmp (argv[i], \"-fmain=\", 7) == 0)\n+\tcase OPT_nostdlib:\n+\tcase OPT_nodefaultlibs:\n+\t  library = 0;\n+\t  break;\n+\n+\tcase OPT_fmain_:\n+\t  main_class_name = decoded_options[i].arg;\n+\t  added--;\n+\t  break;\n+\n+\tcase OPT_fhelp:\n+\t  want_spec_file = 0;\n+\t  break;\n+\n+\tcase OPT_v:\n+\t  if (argc == 2)\n \t    {\n-\t      main_class_name = argv[i] + 7;\n-\t      added--;\n-\t    }\n-\t  else if (strcmp (argv[i], \"-fhelp\") == 0)\n-\t    want_spec_file = 0;\n-\t  else if (strcmp (argv[i], \"-v\") == 0)\n-\t    {\n-\t      if (argc == 2)\n-\t\t{\n-\t\t  /* If they only gave us `-v', don't try to link\n-\t\t     in libgcj.  */ \n-\t\t  library = 0;\n-\t\t}\n-\t    }\n-\t  else if (strncmp (argv[i], \"-x\", 2) == 0)\n-\t    saw_speclang = 1;\n-\t  else if (strcmp (argv[i], \"-C\") == 0)\n-\t    {\n-\t      saw_C = 1;\n-\t      want_spec_file = 0;\n-\t      if (library != 0)\n-\t\tadded -= 2;\n-\t      library = 0;\n-\t      will_link = 0;\n-\t    }\n-\t  else if (strncmp (argv[i], \"-fcompile-resource=\", 19) == 0)\n-\t    {\n-\t      saw_resource = 1;\n-\t      want_spec_file = 0;\n-\t      if (library != 0)\n-\t\t--added;\n+\t      /* If they only gave us `-v', don't try to link\n+\t\t in libgcj.  */ \n \t      library = 0;\n-\t      will_link = 0;\n-\t    }\n-\t  else if (argv[i][1] == 'D')\n-\t    saw_D = 1;\n-\t  else if (argv[i][1] == 'g')\n-\t    saw_g = 1;\n-\t  else if (argv[i][1] == 'O')\n-\t    saw_O = 1;\n-\t  else if ((argv[i][2] == '\\0'\n-\t\t    && strchr (\"bBVDUoeTuIYmLiAI\", argv[i][1]) != NULL)\n-\t\t   || strcmp (argv[i], \"-Tdata\") == 0\n-\t\t   || strcmp (argv[i], \"-MT\") == 0\n-\t\t   || strcmp (argv[i], \"-MF\") == 0)\n-\t    {\n-\t      if (strcmp (argv[i], \"-o\") == 0)\n-\t\tsaw_o = 1;\n-\t      quote = argv[i];\n-\t    }\n-\t  else if (strcmp (argv[i], \"-classpath\") == 0\n-\t\t   || strcmp (argv[i], \"-bootclasspath\") == 0\n-\t\t   || strcmp (argv[i], \"-CLASSPATH\") == 0\n-\t\t   || strcmp (argv[i], \"-encoding\") == 0\n-\t\t   || strcmp (argv[i], \"-extdirs\") == 0)\n-\t    {\n-\t      quote = argv[i];\n-\t      added -= 1;\n \t    }\n-\t  else if (library != 0 \n-\t\t   && ((argv[i][2] == '\\0'\n-\t\t\t&& strchr (\"cSEM\", argv[i][1]) != NULL)\n-\t\t       || strcmp (argv[i], \"-MM\") == 0))\n-\t    {\n-\t      /* Don't specify libraries if we won't link, since that would\n-\t\t cause a warning.  */\n-\t      library = 0;\n-\t      added -= 2;\n+\t  break;\n+\n+\tcase OPT_x:\n+\t  saw_speclang = 1;\n+\t  break;\n+\n+\tcase OPT_C:\n+\t  saw_C = 1;\n+\t  want_spec_file = 0;\n+\t  if (library != 0)\n+\t    added -= 2;\n+\t  library = 0;\n+\t  will_link = 0;\n+\t  break;\n+\n+\tcase OPT_fcompile_resource_:\n+\t  saw_resource = 1;\n+\t  want_spec_file = 0;\n+\t  if (library != 0)\n+\t    --added;\n+\t  library = 0;\n+\t  will_link = 0;\n+\t  break;\n+\n+\tcase OPT_D:\n+\t  saw_D = 1;\n+\t  break;\n+\n+\tcase OPT_g:\n+\tcase OPT_gcoff:\n+\tcase OPT_gdwarf_:\n+\tcase OPT_ggdb:\n+\tcase OPT_gstabs:\n+\tcase OPT_gstabs_:\n+\tcase OPT_gvms:\n+\tcase OPT_gxcoff:\n+\tcase OPT_gxcoff_:\n+\t  saw_g = 1;\n+\t  break;\n+\n+\tcase OPT_O:\n+\tcase OPT_Os:\n+\tcase OPT_Ofast:\n+\t  saw_O = 1;\n+\t  break;\n+\n+\tcase OPT_o:\n+\t  saw_o = 1;\n+\t  break;\n+\n+\tcase OPT_classpath:\n+\tcase OPT_bootclasspath:\n+\tcase OPT_CLASSPATH:\n+\tcase OPT_encoding:\n+\tcase OPT_extdirs:\n+\t  added -= 1;\n+\t  break;\n+\n+\tcase OPT_c:\n+\tcase OPT_S:\n+\tcase OPT_E:\n+\tcase OPT_M:\n+\tcase OPT_MM:\n+\t  /* Don't specify libraries if we won't link, since that would\n+\t     cause a warning.  */\n+\t  library = 0;\n+\t  added -= 2;\n+\n+\t  /* Remember this so we can confirm -fmain option.  */\n+\t  will_link = 0;\n+\t  break;\n+\n+\tcase OPT_fsyntax_only:\n+\t  library = 0;\n+\t  will_link = 0;\n+\t  continue;\n \n-\t      /* Remember this so we can confirm -fmain option.  */\n-\t      will_link = 0;\n-\t    }\n-\t  else if (strcmp (argv[i], \"-d\") == 0)\n-\t    {\n-\t      /* `-d' option is for javac compatibility.  */\n-\t      quote = argv[i];\n-\t      added -= 1;\n-\t    }\n-\t  else if (strcmp (argv[i], \"-fsyntax-only\") == 0\n-\t\t   || strcmp (argv[i], \"--syntax-only\") == 0)\n-\t    {\n-\t      library = 0;\n-\t      will_link = 0;\n-\t      continue;\n-\t    }\n-          else if (strcmp (argv[i], \"-save-temps\") == 0)\n-\t    saw_save_temps = 1;\n-          else if (strcmp (argv[i], \"-static-libgcc\") == 0\n-                   || strcmp (argv[i], \"-static\") == 0)\n-\t    shared_libgcc = 0;\n-\t  else if (strcmp (argv[i], \"-findirect-dispatch\") == 0\n-\t\t   || strcmp (argv[i], \"--indirect-dispatch\") == 0)\n-\t    {\n-\t      link_for_bc_abi = 1;\n-\t    }\n-\t  else\n-\t    /* Pass other options through.  */\n-\t    continue;\n-\t}\n-      else\n-\t{\n-\t  int len; \n+\tcase OPT_save_temps:\n+\t  saw_save_temps = 1;\n+\t  break;\n \n-\t  if (saw_speclang)\n-\t    {\n-\t      saw_speclang = 0;\n-\t      continue;\n-\t    }\n+\tcase OPT_static_libgcc:\n+\tcase OPT_static:\n+\t  shared_libgcc = 0;\n+\t  break;\n \n-\t  if (saw_resource)\n-\t    {\n-\t      args[i] |= RESOURCE_FILE_ARG;\n-\t      added += 2;  /* for -xjava and -xnone */\n-\t    }\n+\tcase OPT_findirect_dispatch:\n+\t  link_for_bc_abi = 1;\n+\t  break;\n \n-\t  if (argv[i][0] == '@')\n-\t    {\n-\t      args[i] |= INDIRECT_FILE_ARG;\n-\t      indirect_files_count++;\n-\t      added += 2;  /* for -xjava and -xnone */\n-\t    }\n+\tcase OPT_SPECIAL_input_file:\n+\t  {\n+\t    const char *arg = decoded_options[i].arg;\n+\t    int len;\n \n-\t  len = strlen (argv[i]);\n-\t  if (len > 5 && strcmp (argv[i] + len - 5, \".java\") == 0)\n-\t    {\n-\t      args[i] |= JAVA_FILE_ARG;\n-\t      java_files_count++;\n-\t    }\n-\t  if (len > 6 && strcmp (argv[i] + len - 6, \".class\") == 0)\n-\t    {\n-\t      args[i] |= CLASS_FILE_ARG;\n-\t      class_files_count++;\n-\t    }\n-\t  if (len > 4\n-\t      && (strcmp (argv[i] + len - 4, \".zip\") == 0\n-\t\t  || strcmp (argv[i] + len - 4, \".jar\") == 0))\n-\t    {\n-\t      args[i] |= ZIP_FILE_ARG;\n-\t      zip_files_count++;\n-\t    }\n+\t    /* We don't do this anymore, since we don't get them with minus\n+\t       signs on them.  */\n+\t    if (arg[0] == '\\0' || arg[1] == '\\0')\n+\t      continue;\n+\n+\t    if (saw_speclang)\n+\t      {\n+\t\tsaw_speclang = 0;\n+\t\tcontinue;\n+\t      }\n+\n+\t    if (saw_resource)\n+\t      {\n+\t\targs[i] |= RESOURCE_FILE_ARG;\n+\t\tadded += 2;  /* for -xjava and -xnone */\n+\t      }\n+\n+\t    if (arg[0] == '@')\n+\t      {\n+\t\targs[i] |= INDIRECT_FILE_ARG;\n+\t\tindirect_files_count++;\n+\t\tadded += 2;  /* for -xjava and -xnone */\n+\t      }\n+\n+\t    len = strlen (arg);\n+\t    if (len > 5 && strcmp (arg + len - 5, \".java\") == 0)\n+\t      {\n+\t\targs[i] |= JAVA_FILE_ARG;\n+\t\tjava_files_count++;\n+\t      }\n+\t    if (len > 6 && strcmp (arg + len - 6, \".class\") == 0)\n+\t      {\n+\t\targs[i] |= CLASS_FILE_ARG;\n+\t\tclass_files_count++;\n+\t      }\n+\t    if (len > 4\n+\t\t&& (strcmp (arg + len - 4, \".zip\") == 0\n+\t\t    || strcmp (arg + len - 4, \".jar\") == 0))\n+\t      {\n+\t\targs[i] |= ZIP_FILE_ARG;\n+\t\tzip_files_count++;\n+\t      }\n+\t  }\n+\n+\tdefault:\n+\t  /* Pass other options through.  */\n+\t  continue;\n \t}\n     }\n \n-  if (quote)\n-    fatal_error (\"argument to %qs missing\", quote);\n-\n   if (saw_D && ! main_class_name)\n     fatal_error (\"can't specify %<-D%> without %<--main%>\");\n \n@@ -475,112 +467,83 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n \n   num_args += link_for_bc_abi;\n \n-  arglist = XNEWVEC (const char *, num_args + 1);\n+  new_decoded_options = XNEWVEC (struct cl_decoded_option, num_args);\n   j = 0;\n \n-  arglist[j++] = argv[0];\n+  new_decoded_options[j++] = decoded_options[0];\n \n   if (combine_inputs || indirect_files_count > 0)\n-    arglist[j++] = \"-ffilelist-file\";\n+    generate_option (OPT_ffilelist_file, NULL, 1, CL_DRIVER,\n+\t\t     &new_decoded_options[j++]);\n \n   if (combine_inputs)\n     {\n-      arglist[j++] = \"-xjava\";\n-      arglist[j++] = filelist_filename;\n-      arglist[j++] = \"-xnone\";\n+      generate_option (OPT_x, \"java\", 1, CL_DRIVER,\n+\t\t       &new_decoded_options[j++]);\n+      generate_option_input_file (filelist_filename,\n+\t\t\t\t  &new_decoded_options[j++]);\n+      generate_option (OPT_x, \"none\", 1, CL_DRIVER,\n+\t\t       &new_decoded_options[j++]);\n     }\n \n   if (java_files_count > 0)\n-    arglist[j++] = \"-fsaw-java-file\";\n+    generate_option (OPT_fsaw_java_file, NULL, 1, CL_DRIVER,\n+\t\t     &new_decoded_options[j++]);\n \n   jcf_path_init ();\n   for (i = 1; i < argc; i++, j++)\n     {\n-      arglist[j] = argv[i];\n+      new_decoded_options[j] = decoded_options[i];\n \n-      if ((args[i] & PARAM_ARG))\n+      if (decoded_options[i].errors & CL_ERR_MISSING_ARG)\n \tcontinue;\n \n       if ((args[i] & RESOURCE_FILE_ARG) != 0)\n \t{\n-\t  arglist[j++] = \"-xjava\";\n-\t  arglist[j++] = argv[i];\n-\t  arglist[j] = \"-xnone\";\n+\t  generate_option (OPT_x, \"java\", 1, CL_DRIVER,\n+\t\t\t   &new_decoded_options[j++]);\n+\t  new_decoded_options[j++] = decoded_options[i];\n+\t  generate_option (OPT_x, \"none\", 1, CL_DRIVER,\n+\t\t\t   &new_decoded_options[j]);\n \t}\n \n-      if (argv[i][0] == '-' && argv[i][1] == 'I')\n-\t{\n-\t  const char *arg;\n-\t  if (argv[i][2] == '\\0')\n-\t    {\n-\t      gcc_assert (i + 1 < argc && (args[i + 1] & PARAM_ARG) != 0);\n-\t      arg = argv[i + 1];\n-\t      /* Drop the argument.  */\n-\t      ++i;\n-\t    }\n-\t  else\n-\t    arg = &argv[i][2];\n-\t  jcf_path_include_arg (arg);\n-\t  --j;\n-\t  continue;\n-\t}\n-      if (! strcmp (argv[i], \"-classpath\")\n-\t  || ! strcmp (argv[i], \"-CLASSPATH\"))\n-\t{\n-\t  jcf_path_classpath_arg (argv[i + 1]);\n-\t  ++i;\n-\t  --j;\n-\t  continue;\n-\t}\n-      if (! strcmp (argv[i], \"-bootclasspath\"))\n-\t{\n-\t  jcf_path_bootclasspath_arg (argv[i + 1]);\n-\t  ++i;\n-\t  --j;\n-\t  continue;\n-\t}\n-      if (! strncmp (argv[i], \"-fCLASSPATH=\", 12)\n-\t  || ! strncmp (argv[i], \"-fclasspath=\", 12))\n+      switch (decoded_options[i].opt_index)\n \t{\n-\t  const char *p = strchr (argv[i], '=');\n-\t  jcf_path_classpath_arg (p + 1);\n+\tcase OPT_I:\n+\t  jcf_path_include_arg (decoded_options[i].arg);\n \t  --j;\n \t  continue;\n-\t}\n-      if (! strncmp (argv[i], \"-fbootclasspath=\", 16))\n-\t{\n-\t  const char *p = strchr (argv[i], '=');\n-\t  jcf_path_bootclasspath_arg (p + 1);\n+\n+\tcase OPT_classpath:\n+\tcase OPT_CLASSPATH:\n+\tcase OPT_fCLASSPATH_:\n+\tcase OPT_fclasspath_:\n+\t  jcf_path_classpath_arg (decoded_options[i].arg);\n \t  --j;\n \t  continue;\n-\t}\n-      if (! strcmp (argv[i], \"-extdirs\"))\n-\t{\n-\t  jcf_path_extdirs_arg (argv[i + 1]);\n-\t  ++i;\n+\n+\tcase OPT_bootclasspath:\n+\tcase OPT_fbootclasspath_:\n+\t  jcf_path_bootclasspath_arg (decoded_options[i].arg);\n \t  --j;\n \t  continue;\n-\t}\n \n-      if (strcmp (argv[i], \"-encoding\") == 0)\n-\t{\n-\t  arglist[j] = concat (\"-f\", argv[i]+1, \"=\", argv[i+1], NULL);\n-\t  i++;\n+\tcase OPT_extdirs:\n+\t  jcf_path_extdirs_arg (decoded_options[i].arg);\n+\t  --j;\n \t  continue;\n-\t}\n \n-      if (strcmp (argv[i], \"-d\") == 0)\n-\t{\n-\t  arglist[j] = concat (\"-foutput-class-dir=\", argv[i + 1], NULL);\n-\t  ++i;\n+\tcase OPT_encoding:\n+\t  generate_option (OPT_fencoding_, decoded_options[i].arg, 1,\n+\t\t\t   CL_DRIVER, &new_decoded_options[j]);\n \t  continue;\n-\t}\n \n-      if (spec_file == NULL && strncmp (argv[i], \"-L\", 2) == 0)\n-\tspec_file = find_spec_file (argv[i] + 2);\n+\tcase OPT_L:\n+\t  if (spec_file == NULL)\n+\t    spec_file = find_spec_file (decoded_options[i].arg);\n+\t  break;\n \n-      if (strncmp (argv[i], \"-fmain=\", 7) == 0)\n-\t{\n+\tcase OPT_fmain_:\n \t  if (! will_link)\n \t    fatal_error (\"cannot specify %<main%> class when not linking\");\n \t  --j;\n@@ -589,9 +552,13 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n \n       if ((args[i] & INDIRECT_FILE_ARG) != 0)\n \t{\n-\t  arglist[j++] = \"-xjava\";\n-\t  arglist[j++] = argv[i]+1;  /* Drop '@'. */\n-\t  arglist[j] = \"-xnone\";\n+\t  generate_option (OPT_x, \"java\", 1, CL_DRIVER,\n+\t\t\t   &new_decoded_options[j++]);\n+\t  /* Drop '@'.  */\n+\t  generate_option_input_file (decoded_options[i].arg + 1,\n+\t\t\t\t      &new_decoded_options[j++]);\n+\t  generate_option (OPT_x, \"none\", 1, CL_DRIVER,\n+\t\t\t   &new_decoded_options[j]);\n \t}\n \n       if ((args[i] & (CLASS_FILE_ARG|ZIP_FILE_ARG)) && saw_C)\n@@ -603,7 +570,7 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n       if (combine_inputs\n \t  && (args[i] & (CLASS_FILE_ARG|JAVA_FILE_ARG|ZIP_FILE_ARG)) != 0)\n \t{\n-\t  fputs (argv[i], filelist_file);\n+\t  fputs (decoded_options[i].arg, filelist_file);\n \t  fputc ('\\n', filelist_file);\n \t  --j;\n \t  continue;\n@@ -613,7 +580,8 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n   /* Handle classpath setting.  We specify the bootclasspath since\n      that requires the fewest changes to our existing code...  */\n   jcf_path_seal (0);\n-  arglist[j++] = jcf_path_compute (\"-fbootclasspath=\");\n+  generate_option (OPT_fbootclasspath_, jcf_path_compute (\"\"), 1,\n+\t\t   CL_DRIVER, &new_decoded_options[j++]);\n \n   if (combine_inputs)\n     {\n@@ -623,33 +591,36 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n \n   /* If we saw no -O or -g option, default to -g1, for javac compatibility. */\n   if (saw_g + saw_O == 0)\n-    arglist[j++] = \"-g1\";\n+    generate_option (OPT_g, \"1\", 1, CL_DRIVER, &new_decoded_options[j++]);\n \n   /* Read the specs file corresponding to libgcj.\n      If we didn't find the spec file on the -L path, then we hope it\n      is somewhere in the standard install areas.  */\n   if (want_spec_file)\n-    arglist[j++] = spec_file == NULL ? \"-specs=libgcj.spec\" : spec_file;\n+    generate_option (OPT_specs_, spec_file == NULL ? \"libgcj.spec\" : spec_file,\n+\t\t     1, CL_DRIVER, &new_decoded_options[j++]);\n \n   if (saw_C)\n     {\n-      arglist[j++] = \"-fsyntax-only\";\n-      arglist[j++] = \"-femit-class-files\";\n-      arglist[j++] = \"-S\";\n-      arglist[j++] = \"-o\";\n-      arglist[j++] = \"NONE\";\n+      generate_option (OPT_fsyntax_only, NULL, 1, CL_DRIVER,\n+\t\t       &new_decoded_options[j++]);\n+      generate_option (OPT_femit_class_files, NULL, 1, CL_DRIVER,\n+\t\t       &new_decoded_options[j++]);\n+      generate_option (OPT_S, NULL, 1, CL_DRIVER, &new_decoded_options[j++]);\n+      generate_option (OPT_o, \"NONE\", 1, CL_DRIVER,\n+\t\t       &new_decoded_options[j++]);\n     }\n   \n   if (shared_libgcc)\n-    arglist[j++] = \"-shared-libgcc\";\n+    generate_option (OPT_shared_libgcc, NULL, 1, CL_DRIVER,\n+\t\t     &new_decoded_options[j++]);\n \n   if (link_for_bc_abi)\n-    arglist[j++] = \"-s-bc-abi\";\n-\n-  arglist[j] = NULL;\n+    generate_option (OPT_s_bc_abi, NULL, 1, CL_DRIVER,\n+\t\t     &new_decoded_options[j++]);\n \n-  *in_argc = j;\n-  *in_argv = arglist;\n+  *in_decoded_options_count = j;\n+  *in_decoded_options = new_decoded_options;\n   *in_added_libraries = added_libraries;\n }\n "}, {"sha": "3d6e902f622bcd9399cfa99c42b658559d780c6b", "filename": "gcc/java/lang.opt", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fjava%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fjava%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.opt?ref=d9d16a1956186ff3bcc0b9a4d559663ad505949a", "patch": "@@ -1,5 +1,5 @@\n ; Options for the Java front end.\n-; Copyright (C) 2003, 2005, 2007, 2009 Free Software Foundation, Inc.\n+; Copyright (C) 2003, 2005, 2007, 2009, 2010 Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n ;\n@@ -24,6 +24,17 @@\n Language\n Java\n \n+C\n+Driver\n+; Java driver option in fact distinct from C-family option with the same name.\n+\n+CLASSPATH\n+Driver Separate\n+\n+D\n+Driver Joined Separate\n+; Java driver option similar to C-family option.\n+\n I\n Java Joined Separate\n ; Documented for C\n@@ -76,6 +87,18 @@ Wredundant-modifiers\n Java Var(flag_redundant)\n Warn if modifiers are specified when not necessary\n \n+bootclasspath\n+Driver Separate\n+\n+classpath\n+Driver Separate\n+\n+encoding\n+Driver Separate\n+\n+extdirs\n+Driver Separate\n+\n fCLASSPATH=\n Java JoinedOrMissing RejectNegative\n --CLASSPATH\tDeprecated; use --classpath instead\n@@ -136,6 +159,9 @@ fextdirs=\n Java Joined RejectNegative\n --extdirs=<path>\tSet the extension directory path\n \n+fmain=\n+Driver JoinedOrMissing RejectNegative\n+\n fsource-filename=\n Java Joined Undocumented \n \n@@ -208,6 +234,9 @@ ftarget=\n Java Joined\n Set the target VM version\n \n+s-bc-abi\n+Driver\n+\n version\n Java RejectDriver\n "}, {"sha": "cd4ec2b55868acea682d2351f48aa55d4ac6e20e", "filename": "gcc/opts-common.c", "status": "modified", "additions": 72, "deletions": 39, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=d9d16a1956186ff3bcc0b9a4d559663ad505949a", "patch": "@@ -127,6 +127,23 @@ integral_argument (const char *arg)\n   return -1;\n }\n \n+/* Return whether OPTION is OK for the language given by\n+   LANG_MASK.  */\n+static bool\n+option_ok_for_language (const struct cl_option *option,\n+\t\t\tunsigned int lang_mask)\n+{\n+  if (!(option->flags & lang_mask))\n+    return false;\n+  else if ((option->flags & CL_TARGET)\n+\t   && (option->flags & (CL_LANG_ALL | CL_DRIVER))\n+\t   && !(option->flags & (lang_mask & ~CL_COMMON & ~CL_TARGET)))\n+    /* Complain for target flag language mismatches if any languages\n+       are specified.  */\n+    return false;\n+  return true;\n+}\n+\n /* Decode the switch beginning at ARGV for the language indicated by\n    LANG_MASK (including CL_COMMON and CL_TARGET if applicable), into\n    the structure *DECODED.  Returns the number of switches\n@@ -228,14 +245,8 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n     }\n \n   /* Check if this is a switch for a different front end.  */\n-  if (!(option->flags & lang_mask))\n+  if (!option_ok_for_language (option, lang_mask))\n     errors |= CL_ERR_WRONG_LANG;\n-  else if ((option->flags & CL_TARGET)\n-\t   && (option->flags & (CL_LANG_ALL | CL_DRIVER))\n-\t   && !(option->flags & (lang_mask & ~CL_COMMON & ~CL_TARGET)))\n-    /* Complain for target flag language mismatches if any languages\n-       are specified.  */\n-      errors |= CL_ERR_WRONG_LANG;\n \n   if (arg == NULL && (separate_arg_flag || joined_arg_flag))\n     errors |= CL_ERR_MISSING_ARG;\n@@ -346,16 +357,7 @@ decode_cmdline_options_to_array (unsigned int argc, const char **argv,\n       /* Interpret \"-\" or a non-switch as a file name.  */\n       if (opt[0] != '-' || opt[1] == '\\0')\n \t{\n-\t  opt_array[num_decoded_options].opt_index = OPT_SPECIAL_input_file;\n-\t  opt_array[num_decoded_options].arg = opt;\n-\t  opt_array[num_decoded_options].orig_option_with_args_text = opt;\n-\t  opt_array[num_decoded_options].canonical_option_num_elements = 1;\n-\t  opt_array[num_decoded_options].canonical_option[0] = opt;\n-\t  opt_array[num_decoded_options].canonical_option[1] = NULL;\n-\t  opt_array[num_decoded_options].canonical_option[2] = NULL;\n-\t  opt_array[num_decoded_options].canonical_option[3] = NULL;\n-\t  opt_array[num_decoded_options].value = 1;\n-\t  opt_array[num_decoded_options].errors = 0;\n+\t  generate_option_input_file (opt, &opt_array[num_decoded_options]);\n \t  num_decoded_options++;\n \t  n = 1;\n \t  continue;\n@@ -550,45 +552,76 @@ handle_generated_option (size_t opt_index, const char *arg, int value,\n \t\t\t unsigned int lang_mask, int kind,\n \t\t\t const struct cl_option_handlers *handlers)\n {\n-  const struct cl_option *option = &cl_options[opt_index];\n   struct cl_decoded_option decoded;\n \n-  decoded.opt_index = opt_index;\n-  decoded.arg = arg;\n-  decoded.canonical_option[2] = NULL;\n-  decoded.canonical_option[3] = NULL;\n-  decoded.value = value;\n-  decoded.errors = 0;\n+  generate_option (opt_index, arg, value, lang_mask, &decoded);\n+  return handle_option (&decoded, lang_mask, kind, handlers);\n+}\n+\n+/* Fill in *DECODED with an option described by OPT_INDEX, ARG and\n+   VALUE for a front end using LANG_MASK.  This is used when the\n+   compiler generates options internally.  */\n+\n+void\n+generate_option (size_t opt_index, const char *arg, int value,\n+\t\t unsigned int lang_mask, struct cl_decoded_option *decoded)\n+{\n+  const struct cl_option *option = &cl_options[opt_index];\n+\n+  decoded->opt_index = opt_index;\n+  decoded->arg = arg;\n+  decoded->canonical_option[2] = NULL;\n+  decoded->canonical_option[3] = NULL;\n+  decoded->value = value;\n+  decoded->errors = (option_ok_for_language (option, lang_mask)\n+\t\t     ? 0\n+\t\t     : CL_ERR_WRONG_LANG);\n \n   if (arg)\n     {\n       if (option->flags & CL_SEPARATE)\n \t{\n-\t  decoded.orig_option_with_args_text = concat (option->opt_text, \" \",\n-\t\t\t\t\t\t       arg, NULL);\n-\t  decoded.canonical_option[0] = option->opt_text;\n-\t  decoded.canonical_option[1] = arg;\n-\t  decoded.canonical_option_num_elements = 2;\n+\t  decoded->orig_option_with_args_text = concat (option->opt_text, \" \",\n+\t\t\t\t\t\t\targ, NULL);\n+\t  decoded->canonical_option[0] = option->opt_text;\n+\t  decoded->canonical_option[1] = arg;\n+\t  decoded->canonical_option_num_elements = 2;\n \t}\n       else\n \t{\n \t  gcc_assert (option->flags & CL_JOINED);\n-\t  decoded.orig_option_with_args_text = concat (option->opt_text, arg,\n-\t\t\t\t\t\t       NULL);\n-\t  decoded.canonical_option[0] = decoded.orig_option_with_args_text;\n-\t  decoded.canonical_option[1] = NULL;\n-\t  decoded.canonical_option_num_elements = 1;\n+\t  decoded->orig_option_with_args_text = concat (option->opt_text, arg,\n+\t\t\t\t\t\t\tNULL);\n+\t  decoded->canonical_option[0] = decoded->orig_option_with_args_text;\n+\t  decoded->canonical_option[1] = NULL;\n+\t  decoded->canonical_option_num_elements = 1;\n \t}\n     }\n   else\n     {\n-      decoded.orig_option_with_args_text = option->opt_text;\n-      decoded.canonical_option[0] = option->opt_text;\n-      decoded.canonical_option[1] = NULL;\n-      decoded.canonical_option_num_elements = 1;\n+      decoded->orig_option_with_args_text = option->opt_text;\n+      decoded->canonical_option[0] = option->opt_text;\n+      decoded->canonical_option[1] = NULL;\n+      decoded->canonical_option_num_elements = 1;\n     }\n+}\n \n-  return handle_option (&decoded, lang_mask, kind, handlers);\n+/* Fill in *DECODED with an option for input file FILE.  */\n+\n+void\n+generate_option_input_file (const char *file,\n+\t\t\t    struct cl_decoded_option *decoded)\n+{\n+  decoded->opt_index = OPT_SPECIAL_input_file;\n+  decoded->arg = file;\n+  decoded->orig_option_with_args_text = file;\n+  decoded->canonical_option_num_elements = 1;\n+  decoded->canonical_option[0] = file;\n+  decoded->canonical_option[1] = NULL;\n+  decoded->canonical_option[2] = NULL;\n+  decoded->canonical_option[3] = NULL;\n+  decoded->value = 1;\n+  decoded->errors = 0;\n }\n \n /* Handle the switch DECODED for the language indicated by LANG_MASK,"}, {"sha": "74e5733731de76c40071aa370e6bf536cb9ecb18", "filename": "gcc/opts.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d16a1956186ff3bcc0b9a4d559663ad505949a/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=d9d16a1956186ff3bcc0b9a4d559663ad505949a", "patch": "@@ -208,6 +208,11 @@ bool handle_option (const struct cl_decoded_option *decoded,\n bool handle_generated_option (size_t opt_index, const char *arg, int value,\n \t\t\t      unsigned int lang_mask, int kind,\n \t\t\t      const struct cl_option_handlers *handlers);\n+void generate_option (size_t opt_index, const char *arg, int value,\n+\t\t      unsigned int lang_mask,\n+\t\t      struct cl_decoded_option *decoded);\n+void generate_option_input_file (const char *file,\n+\t\t\t\t struct cl_decoded_option *decoded);\n extern void read_cmdline_option (struct cl_decoded_option *decoded,\n \t\t\t\t unsigned int lang_mask,\n \t\t\t\t const struct cl_option_handlers *handlers);"}]}