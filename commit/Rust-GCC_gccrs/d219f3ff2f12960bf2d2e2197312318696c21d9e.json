{"sha": "d219f3ff2f12960bf2d2e2197312318696c21d9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIxOWYzZmYyZjEyOTYwYmYyZDJlMjE5NzMxMjMxODY5NmMyMWQ5ZQ==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2003-05-06T14:02:09Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2003-05-06T14:02:09Z"}, "message": "typeck.c (build_unary_op): Deal with const qualifier in invalid pointer-to-member earlier.\n\n\t* typeck.c (build_unary_op): Deal with const qualifier in\n\tinvalid pointer-to-member earlier.\n\nFrom-SVN: r66522", "tree": {"sha": "0ab36aa0f33c5ca813c56d1a9a62c9e8ddf58787", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ab36aa0f33c5ca813c56d1a9a62c9e8ddf58787"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d219f3ff2f12960bf2d2e2197312318696c21d9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d219f3ff2f12960bf2d2e2197312318696c21d9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d219f3ff2f12960bf2d2e2197312318696c21d9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d219f3ff2f12960bf2d2e2197312318696c21d9e/comments", "author": null, "committer": null, "parents": [{"sha": "5b0f0db6d9533eed15c6868a5f57d92196e3264f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b0f0db6d9533eed15c6868a5f57d92196e3264f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b0f0db6d9533eed15c6868a5f57d92196e3264f"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "15ca7a65013310171693e48cfd7fd3beeea49b39", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d219f3ff2f12960bf2d2e2197312318696c21d9e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d219f3ff2f12960bf2d2e2197312318696c21d9e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d219f3ff2f12960bf2d2e2197312318696c21d9e", "patch": "@@ -1,3 +1,8 @@\n+2003-05-06  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\t* typeck.c (build_unary_op): Deal with const qualifier in\n+\tinvalid pointer-to-member earlier.\n+\n 2003-05-05  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/9537"}, {"sha": "20e602a883e4fd70ee212fa38f00ed3fd2e0907b", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d219f3ff2f12960bf2d2e2197312318696c21d9e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d219f3ff2f12960bf2d2e2197312318696c21d9e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=d219f3ff2f12960bf2d2e2197312318696c21d9e", "patch": "@@ -4430,26 +4430,27 @@ build_unary_op (code, xarg, noconvert)\n \t     We could defer this in non-MS mode, but it's easier to give\n \t     a useful error here.  */\n \n-\t  tree base = TREE_TYPE (TREE_OPERAND (arg, 0));\n+\t  /* Inside constant member functions, the `this' pointer\n+\t     contains an extra const qualifier.  TYPE_MAIN_VARIANT\n+\t     is used here to remove this const from the diagnostics\n+\t     and the created OFFSET_REF.  */\n+\t  tree base = TYPE_MAIN_VARIANT (TREE_TYPE (TREE_OPERAND (arg, 0)));\n \t  tree name = DECL_NAME (get_first_fn (TREE_OPERAND (arg, 1)));\n \n \t  if (! flag_ms_extensions)\n \t    {\n-\t      /* Inside constant member functions, the `this' pointer\n-\t\t contains an extra const qualifier.  TYPE_MAIN_VARIANT\n-\t\t is used here to remove this const from the diagnostics.  */\n \t      if (current_class_type\n \t\t  && TREE_OPERAND (arg, 0) == current_class_ref)\n \t\t/* An expression like &memfn.  */\n \t\tpedwarn (\"ISO C++ forbids taking the address of an unqualified\"\n \t\t\t \" or parenthesized non-static member function to form\"\n \t\t\t \" a pointer to member function.  Say `&%T::%D'\",\n-\t\t\t TYPE_MAIN_VARIANT (base), name);\n+\t\t\t base, name);\n \t      else\n \t\tpedwarn (\"ISO C++ forbids taking the address of a bound member\"\n \t\t\t \" function to form a pointer to member function.\"\n \t\t\t \"  Say `&%T::%D'\",\n-\t\t\t TYPE_MAIN_VARIANT (base), name);\n+\t\t\t base, name);\n \t    }\n \t  arg = build_offset_ref (base, name);\n         }"}]}