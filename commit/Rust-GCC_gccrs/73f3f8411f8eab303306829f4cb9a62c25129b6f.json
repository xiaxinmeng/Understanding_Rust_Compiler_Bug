{"sha": "73f3f8411f8eab303306829f4cb9a62c25129b6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNmM2Y4NDExZjhlYWIzMDMzMDY4MjlmNGNiOWE2MmMyNTEyOWI2Zg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-10-28T20:19:57Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-10-28T20:19:57Z"}, "message": "cris.h (FUNCTION_ARG, [...]): Delete.\n\n\t* config/cris/cris.h (FUNCTION_ARG, FUNCTION_INCOMING_ARG): Delete.\n\t(FUNCTION_ARG_ADVANCE): Delete.\n\t* config/cris/cris.c (cris_function_arg_1, cris_function_arg): New\n\tfunctions.\n\t(cris_function_incoming_arg, cris_function_arg_advance): New\n\tfunctions.\n\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_INCOMING_ARG): Define.\n\t(TARGET_FUNCTION_ARG_ADVANCE): Define.\n\nFrom-SVN: r166045", "tree": {"sha": "44ca92501fab5a4e930d4526332de599baa3c626", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44ca92501fab5a4e930d4526332de599baa3c626"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73f3f8411f8eab303306829f4cb9a62c25129b6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73f3f8411f8eab303306829f4cb9a62c25129b6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73f3f8411f8eab303306829f4cb9a62c25129b6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73f3f8411f8eab303306829f4cb9a62c25129b6f/comments", "author": null, "committer": null, "parents": [{"sha": "3acf034c5a48c45c39a5be03369cea154fe39f25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3acf034c5a48c45c39a5be03369cea154fe39f25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3acf034c5a48c45c39a5be03369cea154fe39f25"}], "stats": {"total": 86, "additions": 68, "deletions": 18}, "files": [{"sha": "1dd0bd0b17de76b77e294ec4252dfb68db576939", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f3f8411f8eab303306829f4cb9a62c25129b6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f3f8411f8eab303306829f4cb9a62c25129b6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73f3f8411f8eab303306829f4cb9a62c25129b6f", "patch": "@@ -1,3 +1,14 @@\n+2010-10-28  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/cris/cris.h (FUNCTION_ARG, FUNCTION_INCOMING_ARG): Delete.\n+\t(FUNCTION_ARG_ADVANCE): Delete.\n+\t* config/cris/cris.c (cris_function_arg_1, cris_function_arg): New\n+\tfunctions.\n+\t(cris_function_incoming_arg, cris_function_arg_advance): New\n+\tfunctions.\n+\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_INCOMING_ARG): Define.\n+\t(TARGET_FUNCTION_ARG_ADVANCE): Define.\n+\n 2010-10-28  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/lm32/lm32-protos.h (lm32_function_arg): Delete."}, {"sha": "fd5e0958ac5cad53b0317db80458431c12a9b098", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f3f8411f8eab303306829f4cb9a62c25129b6f/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f3f8411f8eab303306829f4cb9a62c25129b6f/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=73f3f8411f8eab303306829f4cb9a62c25129b6f", "patch": "@@ -129,6 +129,12 @@ static bool cris_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t    const_tree, bool);\n static int cris_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t   tree, bool);\n+static rtx cris_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t      const_tree, bool);\n+static rtx cris_function_incoming_arg (CUMULATIVE_ARGS *,\n+\t\t\t\t       enum machine_mode, const_tree, bool);\n+static void cris_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\t       const_tree, bool);\n static tree cris_md_asm_clobbers (tree, tree, tree);\n \n static bool cris_handle_option (size_t, const char *, int);\n@@ -214,6 +220,12 @@ static const struct default_options cris_option_optimization_table[] =\n #define TARGET_PASS_BY_REFERENCE cris_pass_by_reference\n #undef TARGET_ARG_PARTIAL_BYTES\n #define TARGET_ARG_PARTIAL_BYTES cris_arg_partial_bytes\n+#undef TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG cris_function_arg\n+#undef TARGET_FUNCTION_INCOMING_ARG\n+#define TARGET_FUNCTION_INCOMING_ARG cris_function_incoming_arg\n+#undef TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE cris_function_arg_advance\n #undef TARGET_MD_ASM_CLOBBERS\n #define TARGET_MD_ASM_CLOBBERS cris_md_asm_clobbers\n #undef TARGET_DEFAULT_TARGET_FLAGS\n@@ -3891,6 +3903,51 @@ cris_arg_partial_bytes (CUMULATIVE_ARGS *ca, enum machine_mode mode,\n     return 0;\n }\n \n+static rtx\n+cris_function_arg_1 (const CUMULATIVE_ARGS *ca,\n+\t\t     enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t     const_tree type ATTRIBUTE_UNUSED,\n+\t\t     bool named, bool incoming)\n+{\n+  if ((!incoming || named) && ca->regs < CRIS_MAX_ARGS_IN_REGS)\n+    return gen_rtx_REG (mode, CRIS_FIRST_ARG_REG + ca->regs);\n+  else\n+    return NULL_RTX;\n+}\n+\n+/* Worker function for TARGET_FUNCTION_ARG.\n+   The void_type_node is sent as a \"closing\" call.  */\n+\n+static rtx\n+cris_function_arg (CUMULATIVE_ARGS *ca, enum machine_mode mode,\n+\t\t   const_tree type, bool named)\n+{\n+  return cris_function_arg_1 (ca, mode, type, named, false);\n+}\n+\n+/* Worker function for TARGET_FUNCTION_INCOMING_ARG.\n+\n+   The differences between this and the previous, is that this one checks\n+   that an argument is named, since incoming stdarg/varargs arguments are\n+   pushed onto the stack, and we don't have to check against the \"closing\"\n+   void_type_node TYPE parameter.  */\n+\n+static rtx\n+cris_function_incoming_arg (CUMULATIVE_ARGS *ca, enum machine_mode mode,\n+\t\t\t    const_tree type, bool named)\n+{\n+  return cris_function_arg_1 (ca, mode, type, named, true);\n+}\n+\n+/* Worker function for TARGET_FUNCTION_ARG_ADVANCE.  */\n+\n+static void\n+cris_function_arg_advance (CUMULATIVE_ARGS *ca, enum machine_mode mode,\n+\t\t\t   const_tree type, bool named ATTRIBUTE_UNUSED)\n+{\n+  ca->regs += (3 + CRIS_FUNCTION_ARG_SIZE (mode, type)) / 4;\n+}\n+\n /* Worker function for TARGET_MD_ASM_CLOBBERS.  */\n \n static tree"}, {"sha": "776c44e2c812ef6f8c3cf22c36c9abc6e834c44b", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f3f8411f8eab303306829f4cb9a62c25129b6f/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f3f8411f8eab303306829f4cb9a62c25129b6f/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=73f3f8411f8eab303306829f4cb9a62c25129b6f", "patch": "@@ -848,21 +848,6 @@ enum reg_class\n \n /* Node: Register Arguments */\n \n-/* The void_type_node is sent as a \"closing\" call.  */\n-#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED)\t\t\t\\\n- ((CUM).regs < CRIS_MAX_ARGS_IN_REGS\t\t\t\t\\\n-  ? gen_rtx_REG (MODE, (CRIS_FIRST_ARG_REG) + (CUM).regs)\t\\\n-  : NULL_RTX)\n-\n-/* The differences between this and the previous, is that this one checks\n-   that an argument is named, since incoming stdarg/varargs arguments are\n-   pushed onto the stack, and we don't have to check against the \"closing\"\n-   void_type_node TYPE parameter.  */\n-#define FUNCTION_INCOMING_ARG(CUM, MODE, TYPE, NAMED)\t\t\\\n- ((NAMED) && (CUM).regs < CRIS_MAX_ARGS_IN_REGS\t\t\t\\\n-  ? gen_rtx_REG (MODE, CRIS_FIRST_ARG_REG + (CUM).regs)\t\t\\\n-  : NULL_RTX)\n-\n /* Contrary to what you'd believe, defining FUNCTION_ARG_CALLEE_COPIES\n    seems like a (small total) loss, at least for gcc-2.7.2 compiling and\n    running gcc-2.1 (small win in size, small loss running -- 100.1%),\n@@ -880,9 +865,6 @@ struct cum_args {int regs;};\n #define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL, N_NAMED_ARGS) \\\n  ((CUM).regs = 0)\n \n-#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\t\\\n- ((CUM).regs += (3 + CRIS_FUNCTION_ARG_SIZE (MODE, TYPE)) / 4)\n-\n #define FUNCTION_ARG_REGNO_P(REGNO)\t\t\t\\\n  ((REGNO) >= CRIS_FIRST_ARG_REG\t\t\t\t\\\n   && (REGNO) < CRIS_FIRST_ARG_REG + (CRIS_MAX_ARGS_IN_REGS))"}]}