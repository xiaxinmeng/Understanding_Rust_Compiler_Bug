{"sha": "52264dbf66412429f6967c304ccf81a9c3ffeed5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIyNjRkYmY2NjQxMjQyOWY2OTY3YzMwNGNjZjgxYTljM2ZmZWVkNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-05-16T11:21:11Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-05-16T11:21:11Z"}, "message": "re PR tree-optimization/61194 (vectorization failed with \"bit-precision arithmetic not supported\" even if conversion to int is requested)\n\n2014-05-16  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/61194\n\t* tree-vect-patterns.c (adjust_bool_pattern): Also handle\n\tbool patterns ending in a COND_EXPR.\n\n\t* gcc.dg/vect/pr61194.c: New testcase.\n\nFrom-SVN: r210514", "tree": {"sha": "b7c541e3389c5af8a3000e13721e770997aeba18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7c541e3389c5af8a3000e13721e770997aeba18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52264dbf66412429f6967c304ccf81a9c3ffeed5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52264dbf66412429f6967c304ccf81a9c3ffeed5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52264dbf66412429f6967c304ccf81a9c3ffeed5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52264dbf66412429f6967c304ccf81a9c3ffeed5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cd1464dbc692344c2e620ddd111c7bbdbd554b7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd1464dbc692344c2e620ddd111c7bbdbd554b7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd1464dbc692344c2e620ddd111c7bbdbd554b7e"}], "stats": {"total": 100, "additions": 99, "deletions": 1}, "files": [{"sha": "f2d0508336d2f4997338902fc4487d71f9dde042", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52264dbf66412429f6967c304ccf81a9c3ffeed5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52264dbf66412429f6967c304ccf81a9c3ffeed5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52264dbf66412429f6967c304ccf81a9c3ffeed5", "patch": "@@ -1,3 +1,9 @@\n+2014-05-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/61194\n+\t* tree-vect-patterns.c (adjust_bool_pattern): Also handle\n+\tbool patterns ending in a COND_EXPR.\n+\n 2014-05-16  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_rtx_mult_cost): Fix FNMUL case."}, {"sha": "ddf7647376b5687dd67f61ee7baa816f97cfe06f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52264dbf66412429f6967c304ccf81a9c3ffeed5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52264dbf66412429f6967c304ccf81a9c3ffeed5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=52264dbf66412429f6967c304ccf81a9c3ffeed5", "patch": "@@ -1,3 +1,8 @@\n+2014-05-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/61194\n+\t* gcc.dg/vect/pr61194.c: New testcase.\n+\n 2014-05-16  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/ssa-fre-39.c: New testcase."}, {"sha": "e10cff4b96c619d40cb67d6df7a45005d087ca63", "filename": "gcc/testsuite/gcc.dg/vect/pr61194.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52264dbf66412429f6967c304ccf81a9c3ffeed5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr61194.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52264dbf66412429f6967c304ccf81a9c3ffeed5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr61194.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr61194.c?ref=52264dbf66412429f6967c304ccf81a9c3ffeed5", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-require-effective-target vect_cond_mixed } */\n+/* { dg-additional-options \"-ftree-loop-if-convert-stores\" } */\n+\n+#include \"tree-vect.h\"\n+\n+static float x[1024];\n+static float y[1024];\n+static float z[1024];\n+static float w[1024];\n+\n+void __attribute__((noinline,noclone)) barX()\n+{\n+  int i;\n+  for (i=0; i<1024; ++i)\n+    z[i] = ((x[i]>0) & (w[i]<0)) ? z[i] : y[i];\n+}\n+\n+int main()\n+{\n+  int i;\n+\n+  check_vect ();\n+\n+  for (i = 0; i < 1024; ++i)\n+    {\n+      x[i] = -10 + i;\n+      w[i] = 100 - i;\n+      z[i] = 0.;\n+      y[i] = 1.;\n+      __asm__ volatile (\"\" : : : \"memory\");\n+    }\n+\n+  barX();\n+\n+  for (i = 0; i < 1024; ++i)\n+    if (z[i] != ((x[i]>0 && w[i]<0) ? 0. : 1.))\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "3d57eaba411b453f48483bcd08cbfc6b0e2a1cba", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52264dbf66412429f6967c304ccf81a9c3ffeed5/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52264dbf66412429f6967c304ccf81a9c3ffeed5/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=52264dbf66412429f6967c304ccf81a9c3ffeed5", "patch": "@@ -2889,7 +2889,12 @@ adjust_bool_pattern (tree var, tree out_type, tree trueval,\n      S5  e_b = c_b | d_b;\n      S6  f_T = (TYPE) e_b;\n \n-   where type 'TYPE' is an integral type.\n+   where type 'TYPE' is an integral type.  Or a similar pattern\n+   ending in\n+\n+     S6  f_Y = e_b ? r_Y : s_Y;\n+\n+   as results from if-conversion of a complex condition.\n \n    Input:\n \n@@ -2970,6 +2975,45 @@ vect_recog_bool_pattern (vec<gimple> *stmts, tree *type_in,\n \tdump_printf_loc (MSG_NOTE, vect_location,\n                          \"vect_recog_bool_pattern: detected:\\n\");\n \n+      return pattern_stmt;\n+    }\n+  else if (rhs_code == COND_EXPR\n+\t   && TREE_CODE (var) == SSA_NAME)\n+    {\n+      vectype = get_vectype_for_scalar_type (TREE_TYPE (lhs));\n+      if (vectype == NULL_TREE)\n+\treturn NULL;\n+\n+      /* Build a scalar type for the boolean result that when\n+         vectorized matches the vector type of the result in\n+\t size and number of elements.  */\n+      unsigned prec\n+\t= wi::udiv_trunc (TYPE_SIZE (vectype),\n+\t\t\t  TYPE_VECTOR_SUBPARTS (vectype)).to_uhwi ();\n+      tree type\n+\t= build_nonstandard_integer_type (prec,\n+\t\t\t\t\t  TYPE_UNSIGNED (TREE_TYPE (var)));\n+      if (get_vectype_for_scalar_type (type) == NULL_TREE)\n+\treturn NULL;\n+\n+      if (!check_bool_pattern (var, loop_vinfo, bb_vinfo))\n+\treturn NULL;\n+\n+      rhs = adjust_bool_pattern (var, type, NULL_TREE, stmts);\n+      lhs = vect_recog_temp_ssa_var (TREE_TYPE (lhs), NULL);\n+      pattern_stmt \n+\t  = gimple_build_assign_with_ops (COND_EXPR, lhs,\n+\t\t\t\t\t  build2 (NE_EXPR, boolean_type_node,\n+\t\t\t\t\t\t  rhs, build_int_cst (type, 0)),\n+\t\t\t\t\t  gimple_assign_rhs2 (last_stmt),\n+\t\t\t\t\t  gimple_assign_rhs3 (last_stmt));\n+      *type_out = vectype;\n+      *type_in = vectype;\n+      stmts->safe_push (last_stmt);\n+      if (dump_enabled_p ())\n+\tdump_printf_loc (MSG_NOTE, vect_location,\n+                         \"vect_recog_bool_pattern: detected:\\n\");\n+\n       return pattern_stmt;\n     }\n   else if (rhs_code == SSA_NAME"}]}