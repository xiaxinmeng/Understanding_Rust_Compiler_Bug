{"sha": "6ad58e822ee297cd93f9855630a8ab4fc9ad4036", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFkNThlODIyZWUyOTdjZDkzZjk4NTU2MzBhOGFiNGZjOWFkNDAzNg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2012-07-28T00:04:10Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2012-07-28T00:04:10Z"}, "message": "re PR target/54093 (ICE in in extract_insn, at recog.c:2129)\n\n\tPR target/54093\n\t* config/rs6000/rs6000.c (rs6000_secondary_reload): Limit 32-bit\n\tmulti-gpr reload to cases where predicate passes.  Do the same for\n\t64-bit multi-gpr reload.\n\nFrom-SVN: r189921", "tree": {"sha": "4c6b02eea54d838e8e7a8d7ea420452873d7015c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c6b02eea54d838e8e7a8d7ea420452873d7015c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ad58e822ee297cd93f9855630a8ab4fc9ad4036", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad58e822ee297cd93f9855630a8ab4fc9ad4036", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ad58e822ee297cd93f9855630a8ab4fc9ad4036", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad58e822ee297cd93f9855630a8ab4fc9ad4036/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5322d07e9c687b4340c4043a11518973e2d6ed9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5322d07e9c687b4340c4043a11518973e2d6ed9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5322d07e9c687b4340c4043a11518973e2d6ed9f"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "ca2d9419c9661b0449212498e937b03ad0d9fb99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad58e822ee297cd93f9855630a8ab4fc9ad4036/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad58e822ee297cd93f9855630a8ab4fc9ad4036/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ad58e822ee297cd93f9855630a8ab4fc9ad4036", "patch": "@@ -1,3 +1,10 @@\n+2012-07-28  Alan Modra  <amodra@gmail.com>\n+\n+\tPR target/54093\n+\t* config/rs6000/rs6000.c (rs6000_secondary_reload): Limit 32-bit\n+\tmulti-gpr reload to cases where predicate passes.  Do the same for\n+\t64-bit multi-gpr reload.\n+\n 2012-07-27  Nathan Froyd  <froydnj@gcc.gnu.org>\n \n \t* expmed.h (alg_hash, alg_hash_used_p, sdiv_pow2_cheap,"}, {"sha": "7bb9840317852fecb1f480b8f02b177a9a7aa55a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad58e822ee297cd93f9855630a8ab4fc9ad4036/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad58e822ee297cd93f9855630a8ab4fc9ad4036/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=6ad58e822ee297cd93f9855630a8ab4fc9ad4036", "patch": "@@ -13582,8 +13582,11 @@ rs6000_secondary_reload (bool in_p,\n \t   && GET_MODE_SIZE (GET_MODE (x)) >= UNITS_PER_WORD)\n     {\n       rtx off = address_offset (XEXP (x, 0));\n+      unsigned int extra = GET_MODE_SIZE (GET_MODE (x)) - UNITS_PER_WORD;\n \n-      if (off != NULL_RTX && (INTVAL (off) & 3) != 0)\n+      if (off != NULL_RTX\n+\t  && (INTVAL (off) & 3) != 0\n+\t  && (unsigned HOST_WIDE_INT) INTVAL (off) + 0x8000 < 0x10000 - extra)\n \t{\n \t  if (in_p)\n \t    sri->icode = CODE_FOR_reload_di_load;\n@@ -13601,10 +13604,17 @@ rs6000_secondary_reload (bool in_p,\n \t   && GET_MODE_SIZE (GET_MODE (x)) > UNITS_PER_WORD)\n     {\n       rtx off = address_offset (XEXP (x, 0));\n-\n+      unsigned int extra = GET_MODE_SIZE (GET_MODE (x)) - UNITS_PER_WORD;\n+\n+      /* We need a secondary reload only when our legitimate_address_p\n+\t says the address is good (as otherwise the entire address\n+\t will be reloaded).  So for mode sizes of 8 and 16 this will\n+\t be when the offset is in the ranges [0x7ffc,0x7fff] and\n+\t [0x7ff4,0x7ff7] respectively.  Note that the address we see\n+\t here may have been manipulated by legitimize_reload_address.  */\n       if (off != NULL_RTX\n-\t  && ((unsigned HOST_WIDE_INT) INTVAL (off) + 0x8000\n-\t      >= 0x1000u - (GET_MODE_SIZE (GET_MODE (x)) - UNITS_PER_WORD)))\n+\t  && ((unsigned HOST_WIDE_INT) INTVAL (off) - (0x8000 - extra)\n+\t      < UNITS_PER_WORD))\n \t{\n \t  if (in_p)\n \t    sri->icode = CODE_FOR_reload_si_load;"}]}