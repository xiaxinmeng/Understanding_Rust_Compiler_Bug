{"sha": "759812fddc81c0c131d4633b2a7f56412ce8dbed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU5ODEyZmRkYzgxYzBjMTMxZDQ2MzNiMmE3ZjU2NDEyY2U4ZGJlZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-01-28T13:24:09Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-01-28T13:24:09Z"}, "message": "libstdc++: Replace glibc-specific check for clock_gettime (PR 93325)\n\nIt's wrong to assume that clock_gettime is unavailable on any *-*-linux*\ntarget that doesn't have glibc 2.17 or later. Use a generic test instead\nof using __GLIBC_PREREQ. Only do that test when is_hosted=yes so that we\ndon't get an error for cross targets without a working linker.\n\nThis ensures that C library's clock_gettime will be used on non-glibc\ntargets, instead of an incorrect syscall to SYS_clock_gettime.\n\n\tPR libstdc++/93325\n\t* acinclude.m4 (GLIBCXX_ENABLE_LIBSTDCXX_TIME): Use AC_SEARCH_LIBS for\n\tclock_gettime instead of explicit glibc version check.\n\t* configure: Regenerate.", "tree": {"sha": "43b81f0ab850782123d44b0823d571789d71d671", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43b81f0ab850782123d44b0823d571789d71d671"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/759812fddc81c0c131d4633b2a7f56412ce8dbed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/759812fddc81c0c131d4633b2a7f56412ce8dbed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/759812fddc81c0c131d4633b2a7f56412ce8dbed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/759812fddc81c0c131d4633b2a7f56412ce8dbed/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c42e27c165b3ed1f2a388ed74091cd5a18bba85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c42e27c165b3ed1f2a388ed74091cd5a18bba85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c42e27c165b3ed1f2a388ed74091cd5a18bba85"}], "stats": {"total": 102, "additions": 70, "deletions": 32}, "files": [{"sha": "d75ebbc3662a6675a74786ba99b99dcc1f934bad", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/759812fddc81c0c131d4633b2a7f56412ce8dbed/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/759812fddc81c0c131d4633b2a7f56412ce8dbed/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=759812fddc81c0c131d4633b2a7f56412ce8dbed", "patch": "@@ -8,6 +8,13 @@\n \n \t* configure: Regenerate.\n \n+2020-01-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/93325\n+\t* acinclude.m4 (GLIBCXX_ENABLE_LIBSTDCXX_TIME): Use AC_SEARCH_LIBS for\n+\tclock_gettime instead of explicit glibc version check.\n+\t* configure: Regenerate.\n+\n 2020-01-27  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/93426"}, {"sha": "ee5e0336f2c3e0c32a0ff9c72528869bb2fcb22a", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/759812fddc81c0c131d4633b2a7f56412ce8dbed/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/759812fddc81c0c131d4633b2a7f56412ce8dbed/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=759812fddc81c0c131d4633b2a7f56412ce8dbed", "patch": "@@ -1422,20 +1422,14 @@ AC_DEFUN([GLIBCXX_ENABLE_LIBSTDCXX_TIME], [\n         ac_has_nanosleep=yes\n         ;;\n       gnu* | linux* | kfreebsd*-gnu | knetbsd*-gnu)\n-        AC_MSG_CHECKING([for at least GNU libc 2.17])\n-        AC_TRY_COMPILE(\n-          [#include <features.h>],\n-          [\n-          #if ! __GLIBC_PREREQ(2, 17)\n-          #error\n-          #endif\n-          ],\n-          [glibcxx_glibc217=yes], [glibcxx_glibc217=no])\n-        AC_MSG_RESULT($glibcxx_glibc217)\n-\n-        if test x\"$glibcxx_glibc217\" = x\"yes\"; then\n-          ac_has_clock_monotonic=yes\n-          ac_has_clock_realtime=yes\n+        # Don't use link test for freestanding library, in case gcc_no_link=yes\n+        if test x\"$is_hosted\" = xyes; then\n+          # Versions of glibc before 2.17 needed -lrt for clock_gettime.\n+          AC_SEARCH_LIBS(clock_gettime, [rt])\n+          if test x\"$ac_cv_search_clock_gettime\" = x\"none required\"; then\n+            ac_has_clock_monotonic=yes\n+            ac_has_clock_realtime=yes\n+          fi\n         fi\n         ac_has_nanosleep=yes\n         ac_has_sched_yield=yes"}, {"sha": "5e2892121f45e9b520edbb45e9dbd790a48ec5d8", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 55, "deletions": 18, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/759812fddc81c0c131d4633b2a7f56412ce8dbed/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/759812fddc81c0c131d4633b2a7f56412ce8dbed/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=759812fddc81c0c131d4633b2a7f56412ce8dbed", "patch": "@@ -21072,35 +21072,72 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n         ac_has_nanosleep=yes\n         ;;\n       gnu* | linux* | kfreebsd*-gnu | knetbsd*-gnu)\n-        { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for at least GNU libc 2.17\" >&5\n-$as_echo_n \"checking for at least GNU libc 2.17... \" >&6; }\n-        cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+        # Don't use link test for freestanding library, in case gcc_no_link=yes\n+        if test x\"$is_hosted\" = xyes; then\n+          # Versions of glibc before 2.17 needed -lrt for clock_gettime.\n+          { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for library containing clock_gettime\" >&5\n+$as_echo_n \"checking for library containing clock_gettime... \" >&6; }\n+if ${ac_cv_search_clock_gettime+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_func_search_save_LIBS=$LIBS\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n-#include <features.h>\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char clock_gettime ();\n int\n main ()\n {\n-\n-          #if ! __GLIBC_PREREQ(2, 17)\n-          #error\n-          #endif\n-\n+return clock_gettime ();\n   ;\n   return 0;\n }\n _ACEOF\n-if ac_fn_cxx_try_compile \"$LINENO\"; then :\n-  glibcxx_glibc217=yes\n+for ac_lib in '' rt; do\n+  if test -z \"$ac_lib\"; then\n+    ac_res=\"none required\"\n+  else\n+    ac_res=-l$ac_lib\n+    LIBS=\"-l$ac_lib  $ac_func_search_save_LIBS\"\n+  fi\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  ac_cv_search_clock_gettime=$ac_res\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext\n+  if ${ac_cv_search_clock_gettime+:} false; then :\n+  break\n+fi\n+done\n+if ${ac_cv_search_clock_gettime+:} false; then :\n+\n else\n-  glibcxx_glibc217=no\n+  ac_cv_search_clock_gettime=no\n fi\n-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n-        { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_glibc217\" >&5\n-$as_echo \"$glibcxx_glibc217\" >&6; }\n+rm conftest.$ac_ext\n+LIBS=$ac_func_search_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_search_clock_gettime\" >&5\n+$as_echo \"$ac_cv_search_clock_gettime\" >&6; }\n+ac_res=$ac_cv_search_clock_gettime\n+if test \"$ac_res\" != no; then :\n+  test \"$ac_res\" = \"none required\" || LIBS=\"$ac_res $LIBS\"\n \n-        if test x\"$glibcxx_glibc217\" = x\"yes\"; then\n-          ac_has_clock_monotonic=yes\n-          ac_has_clock_realtime=yes\n+fi\n+\n+          if test x\"$ac_cv_search_clock_gettime\" = x\"none required\"; then\n+            ac_has_clock_monotonic=yes\n+            ac_has_clock_realtime=yes\n+          fi\n         fi\n         ac_has_nanosleep=yes\n         ac_has_sched_yield=yes"}]}