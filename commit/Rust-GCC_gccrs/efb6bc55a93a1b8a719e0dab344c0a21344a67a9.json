{"sha": "efb6bc55a93a1b8a719e0dab344c0a21344a67a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZiNmJjNTVhOTNhMWI4YTcxOWUwZGFiMzQ0YzBhMjEzNDRhNjdhOQ==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2021-01-14T23:14:56Z"}, "committer": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2021-01-21T21:48:47Z"}, "message": "fwprop: Allow (subreg (mem)) simplifications\n\nSuppose we have:\n\n    (set (reg/v:TF 63) (mem/c:TF (reg/v:DI 62)))\n    (set (reg:FPRX2 66) (subreg:FPRX2 (reg/v:TF 63) 0))\n\nIt is clearly profitable to propagate the first insn into the second\none and get:\n\n    (set (reg:FPRX2 66) (mem/c:FPRX2 (reg/v:DI 62)))\n\nfwprop actually manages to perform this, but doesn't think the result is\nworth it, which results in unnecessary store/load sequences on s390.\nImprove the situation by classifying SUBREG -> MEM changes as\nprofitable.\n\ngcc/ChangeLog:\n\n2021-01-15  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* fwprop.c (fwprop_propagation::classify_result): Allow\n\t(subreg (mem)) simplifications.", "tree": {"sha": "2dfe597bcf21dafb47d0ea95e64e812f4e74c4e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dfe597bcf21dafb47d0ea95e64e812f4e74c4e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efb6bc55a93a1b8a719e0dab344c0a21344a67a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efb6bc55a93a1b8a719e0dab344c0a21344a67a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efb6bc55a93a1b8a719e0dab344c0a21344a67a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efb6bc55a93a1b8a719e0dab344c0a21344a67a9/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f645da0e4ab9438dfd0c047c710c7ec6a7d6d8f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f645da0e4ab9438dfd0c047c710c7ec6a7d6d8f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f645da0e4ab9438dfd0c047c710c7ec6a7d6d8f3"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "123cc228630c7a4a757912c9fa92636a3e65e750", "filename": "gcc/fwprop.c", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb6bc55a93a1b8a719e0dab344c0a21344a67a9/gcc%2Ffwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb6bc55a93a1b8a719e0dab344c0a21344a67a9/gcc%2Ffwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffwprop.c?ref=efb6bc55a93a1b8a719e0dab344c0a21344a67a9", "patch": "@@ -176,7 +176,7 @@ namespace\n     static const uint16_t CONSTANT = FIRST_SPARE_RESULT << 1;\n     static const uint16_t PROFITABLE = FIRST_SPARE_RESULT << 2;\n \n-    fwprop_propagation (rtx_insn *, rtx, rtx);\n+    fwprop_propagation (insn_info *, insn_info *, rtx, rtx);\n \n     bool changed_mem_p () const { return result_flags & CHANGED_MEM; }\n     bool folded_to_constants_p () const;\n@@ -185,13 +185,20 @@ namespace\n     bool check_mem (int, rtx) final override;\n     void note_simplification (int, uint16_t, rtx, rtx) final override;\n     uint16_t classify_result (rtx, rtx);\n+\n+  private:\n+    const bool single_use_p;\n+    const bool single_ebb_p;\n   };\n }\n \n /* Prepare to replace FROM with TO in INSN.  */\n \n-fwprop_propagation::fwprop_propagation (rtx_insn *insn, rtx from, rtx to)\n-  : insn_propagation (insn, from, to)\n+fwprop_propagation::fwprop_propagation (insn_info *use_insn,\n+\t\t\t\t\tinsn_info *def_insn, rtx from, rtx to)\n+  : insn_propagation (use_insn->rtl (), from, to),\n+    single_use_p (def_insn->num_uses () == 1),\n+    single_ebb_p (use_insn->ebb () == def_insn->ebb ())\n {\n   should_check_mems = true;\n   should_note_simplifications = true;\n@@ -262,6 +269,22 @@ fwprop_propagation::classify_result (rtx old_rtx, rtx new_rtx)\n       && GET_MODE (new_rtx) == GET_MODE_INNER (GET_MODE (from)))\n     return PROFITABLE;\n \n+  /* Allow (subreg (mem)) -> (mem) simplifications with the following\n+     exceptions:\n+     1) Propagating (mem)s into multiple uses is not profitable.\n+     2) Propagating (mem)s across EBBs may not be profitable if the source EBB\n+\truns less frequently.\n+     3) Propagating (mem)s into paradoxical (subreg)s is not profitable.\n+     4) Creating new (mem/v)s is not correct, since DCE will not remove the old\n+\tones.  */\n+  if (single_use_p\n+      && single_ebb_p\n+      && SUBREG_P (old_rtx)\n+      && !paradoxical_subreg_p (old_rtx)\n+      && MEM_P (new_rtx)\n+      && !MEM_VOLATILE_P (new_rtx))\n+    return PROFITABLE;\n+\n   return 0;\n }\n \n@@ -363,7 +386,7 @@ try_fwprop_subst_note (insn_info *use_insn, insn_info *def_insn,\n   rtx_insn *use_rtl = use_insn->rtl ();\n \n   insn_change_watermark watermark;\n-  fwprop_propagation prop (use_rtl, dest, src);\n+  fwprop_propagation prop (use_insn, def_insn, dest, src);\n   if (!prop.apply_to_rvalue (&XEXP (note, 0)))\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -426,7 +449,7 @@ try_fwprop_subst_pattern (obstack_watermark &attempt, insn_change &use_change,\n   rtx_insn *use_rtl = use_insn->rtl ();\n \n   insn_change_watermark watermark;\n-  fwprop_propagation prop (use_rtl, dest, src);\n+  fwprop_propagation prop (use_insn, def_insn, dest, src);\n   if (!prop.apply_to_pattern (loc))\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))"}]}