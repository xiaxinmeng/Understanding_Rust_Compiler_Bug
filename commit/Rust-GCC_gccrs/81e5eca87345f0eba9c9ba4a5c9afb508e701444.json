{"sha": "81e5eca87345f0eba9c9ba4a5c9afb508e701444", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFlNWVjYTg3MzQ1ZjBlYmE5YzliYTRhNWM5YWZiNTA4ZTcwMTQ0NA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-01-31T08:13:50Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-01-31T08:13:50Z"}, "message": "re PR c/59963 (Wrong column number for warning -Woverflow)\n\n\tPR c/59963\nc-family/\n\t* c-common.c (add_atomic_size_parameter): Pass vNULL to\n\tbuild_function_call_vec.\n\t(resolve_overloaded_builtin): Likewise.\n\t* c-common.h (build_function_call_vec): Adjust declaration.\ncp/\n\t* typeck.c (build_function_call_vec): Add dummy arg_loc parameter.\nc/\n\t* c-typeck.c (convert_lvalue_to_rvalue): Pass vNULL to\n\tbuild_function_call_vec.\n\t(build_function_call): Likewise.\n\t(build_atomic_assign): Likewise.\n\t(build_function_call_vec): Add arg_loc parameter.  Use it.\n\t(convert_arguments): Likewise.\n\t(convert_for_assignment): Rename rhs_loc to expr_loc.\n\t* c-parser.c (c_parser_attributes): Pass NULL to c_parser_expr_list.\n\t(c_parser_objc_keywordexpr): Likewise.\n\t(c_parser_postfix_expression_after_primary): Call\n\tbuild_function_call_vec with expr_loc rather than op_loc.\n\tCall c_parser_expr_list to fill arg_loc.  Pass arg_loc to\n\tbuild_function_call_vec.\n\t(c_parser_expr_list): Add locations parameter.  Fill it with locations\n\tof function arguments.\n\t* c-decl.c (finish_decl): Pass vNULL to build_function_call_vec.\nobjc/\n\t* objc-next-runtime-abi-02.c (build_throw_stmt): Pass vNULL to\n\tbuild_function_call_vec.\n\t(finish_catch): Likewise.\n\t(next_runtime_abi_02_get_class_reference): Likewise.\n\t* objc-next-runtime-abi-01.c (build_objc_method_call): Pass vNULL to\n\tbuild_function_call_vec.\n\t(build_throw_stmt): Likewise.\n\t* objc-gnu-runtime-abi-01.c: (build_objc_method_call): Pass vNULL to\n\tbuild_function_call_vec.\n\t(build_throw_stmt): Likewise.\ntestsuite/\n\t* gcc.dg/pr59940.c (g): Adjust dg-warning.\n\t(y): Adjust dg-error.\n\t* gcc.dg/cast-function-1.c (bar): Adjust dg-warnings.\n\t* gcc.dg/pr59963-1.c: New test.\n\t* gcc.dg/pr59963-2.c: New test.\n\t* gcc.dg/pr59963-3.c: New test.\n\nFrom-SVN: r207335", "tree": {"sha": "d72ad2d85070a83e828f16474ea193868efb9831", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d72ad2d85070a83e828f16474ea193868efb9831"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81e5eca87345f0eba9c9ba4a5c9afb508e701444", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81e5eca87345f0eba9c9ba4a5c9afb508e701444", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81e5eca87345f0eba9c9ba4a5c9afb508e701444", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81e5eca87345f0eba9c9ba4a5c9afb508e701444/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4f50b9ff5690abc3508483ac1df2a6346fc10fe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f50b9ff5690abc3508483ac1df2a6346fc10fe4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f50b9ff5690abc3508483ac1df2a6346fc10fe4"}], "stats": {"total": 262, "additions": 204, "deletions": 58}, "files": [{"sha": "381535aa65166300b8ed62f959e61fcd1e701228", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=81e5eca87345f0eba9c9ba4a5c9afb508e701444", "patch": "@@ -1,3 +1,11 @@\n+2014-01-31  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/59963\n+\t* c-common.c (add_atomic_size_parameter): Pass vNULL to\n+\tbuild_function_call_vec.\n+\t(resolve_overloaded_builtin): Likewise.\n+\t* c-common.h (build_function_call_vec): Adjust declaration.\n+\n 2014-01-30  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/59940"}, {"sha": "5ce1a3ef75a6f19d3d810805d03316cc819f21b6", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=81e5eca87345f0eba9c9ba4a5c9afb508e701444", "patch": "@@ -10382,7 +10382,7 @@ add_atomic_size_parameter (unsigned n, location_t loc, tree function,\n       vec_alloc (v, len + 1);\n       for (z = 0; z < len; z++)\n \tv->quick_push ((*params)[z]);\n-      f = build_function_call_vec (loc, function, v, NULL);\n+      f = build_function_call_vec (loc, vNULL, function, v, NULL);\n       vec_free (v);\n       return f;\n     }\n@@ -10813,7 +10813,8 @@ resolve_overloaded_builtin (location_t loc, tree function,\n \t  return error_mark_node;\n \n \tfirst_param = (*params)[0];\n-\tresult = build_function_call_vec (loc, new_function, params, NULL);\n+\tresult = build_function_call_vec (loc, vNULL, new_function, params,\n+\t\t\t\t\t  NULL);\n \tif (result == error_mark_node)\n \t  return result;\n \tif (orig_code != BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_N"}, {"sha": "f074ab1887bc758ffcf4dd777732518e6f438b72", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=81e5eca87345f0eba9c9ba4a5c9afb508e701444", "patch": "@@ -911,8 +911,8 @@ extern void c_do_switch_warnings (splay_tree, location_t, tree, tree);\n \n extern tree build_function_call (location_t, tree, tree);\n \n-extern tree build_function_call_vec (location_t, tree, vec<tree, va_gc> *,\n-\t\t\t\t     vec<tree, va_gc> *);\n+extern tree build_function_call_vec (location_t, vec<location_t>, tree,\n+\t\t\t\t     vec<tree, va_gc> *, vec<tree, va_gc> *);\n \n extern tree resolve_overloaded_builtin (location_t, tree, vec<tree, va_gc> *);\n "}, {"sha": "d9c528e25dcba49c73f2080af8fe9a0361070887", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=81e5eca87345f0eba9c9ba4a5c9afb508e701444", "patch": "@@ -1,3 +1,23 @@\n+2014-01-31  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/59963\n+\t* c-typeck.c (convert_lvalue_to_rvalue): Pass vNULL to\n+\tbuild_function_call_vec.\n+\t(build_function_call): Likewise.\n+\t(build_atomic_assign): Likewise.\n+\t(build_function_call_vec): Add arg_loc parameter.  Use it.\n+\t(convert_arguments): Likewise.\n+\t(convert_for_assignment): Rename rhs_loc to expr_loc.\n+\t* c-parser.c (c_parser_attributes): Pass NULL to c_parser_expr_list.\n+\t(c_parser_objc_keywordexpr): Likewise.\n+\t(c_parser_postfix_expression_after_primary): Call\n+\tbuild_function_call_vec with expr_loc rather than op_loc.\n+\tCall c_parser_expr_list to fill arg_loc.  Pass arg_loc to\n+\tbuild_function_call_vec.\n+\t(c_parser_expr_list): Add locations parameter.  Fill it with locations\n+\tof function arguments.\n+\t* c-decl.c (finish_decl): Pass vNULL to build_function_call_vec.\n+\n 2014-01-30  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/59940"}, {"sha": "7a7d68edf95ee51a3dfee447fc44f9e89a808345", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=81e5eca87345f0eba9c9ba4a5c9afb508e701444", "patch": "@@ -4569,7 +4569,7 @@ finish_decl (tree decl, location_t init_loc, tree init,\n \t  vec_alloc (v, 1);\n \t  v->quick_push (cleanup);\n \t  cleanup = build_function_call_vec (DECL_SOURCE_LOCATION (decl),\n-\t      \t\t\t\t     cleanup_decl, v, NULL);\n+\t\t\t\t\t     vNULL, cleanup_decl, v, NULL);\n \t  vec_free (v);\n \n \t  /* Don't warn about decl unused; the cleanup uses it.  */"}, {"sha": "8a4868b0db5a115ac1f667284d35f73119488a18", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=81e5eca87345f0eba9c9ba4a5c9afb508e701444", "patch": "@@ -1203,7 +1203,7 @@ static struct c_expr c_parser_expression (c_parser *);\n static struct c_expr c_parser_expression_conv (c_parser *);\n static vec<tree, va_gc> *c_parser_expr_list (c_parser *, bool, bool,\n \t\t\t\t\t     vec<tree, va_gc> **, location_t *,\n-\t\t\t\t\t     tree *);\n+\t\t\t\t\t     tree *, vec<location_t> *);\n static void c_parser_omp_construct (c_parser *);\n static void c_parser_omp_threadprivate (c_parser *);\n static void c_parser_omp_barrier (c_parser *);\n@@ -3958,7 +3958,7 @@ c_parser_attributes (c_parser *parser)\n \t\t  tree tree_list;\n \t\t  c_parser_consume_token (parser);\n \t\t  expr_list = c_parser_expr_list (parser, false, true,\n-\t\t\t\t\t\t  NULL, NULL, NULL);\n+\t\t\t\t\t\t  NULL, NULL, NULL, NULL);\n \t\t  tree_list = build_tree_list_vec (expr_list);\n \t\t  attr_args = tree_cons (NULL_TREE, arg1, tree_list);\n \t\t  release_tree_vector (expr_list);\n@@ -3971,7 +3971,7 @@ c_parser_attributes (c_parser *parser)\n \t      else\n \t\t{\n \t\t  expr_list = c_parser_expr_list (parser, false, true,\n-\t\t\t\t\t\t  NULL, NULL, NULL);\n+\t\t\t\t\t\t  NULL, NULL, NULL, NULL);\n \t\t  attr_args = build_tree_list_vec (expr_list);\n \t\t  release_tree_vector (expr_list);\n \t\t}\n@@ -7637,6 +7637,8 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n   unsigned int i;\n   vec<tree, va_gc> *exprlist;\n   vec<tree, va_gc> *origtypes = NULL;\n+  vec<location_t> arg_loc = vNULL;\n+\n   while (true)\n     {\n       location_t op_loc = c_parser_peek_token (parser)->location;\n@@ -7690,7 +7692,8 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t    exprlist = NULL;\n \t  else\n \t    exprlist = c_parser_expr_list (parser, true, false, &origtypes,\n-\t\t\t\t\t   sizeof_arg_loc, sizeof_arg);\n+\t\t\t\t\t   sizeof_arg_loc, sizeof_arg,\n+\t\t\t\t\t   &arg_loc);\n \t  c_parser_skip_until_found (parser, CPP_CLOSE_PAREN,\n \t\t\t\t     \"expected %<)%>\");\n \t  orig_expr = expr;\n@@ -7700,10 +7703,8 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t\t\t\t\t      expr.value, exprlist,\n \t\t\t\t\t      sizeof_arg,\n \t\t\t\t\t      sizeof_ptr_memacc_comptypes);\n-\t  /* FIXME diagnostics: Ideally we want the FUNCNAME, not the\n-\t     \"(\" after the FUNCNAME, which is what we have now.    */\n-\t  expr.value = build_function_call_vec (op_loc, expr.value, exprlist,\n-\t\t\t\t\t\torigtypes);\n+\t  expr.value = build_function_call_vec (expr_loc, arg_loc, expr.value,\n+\t\t\t\t\t\texprlist, origtypes);\n \t  expr.original_code = ERROR_MARK;\n \t  if (TREE_CODE (expr.value) == INTEGER_CST\n \t      && TREE_CODE (orig_expr.value) == FUNCTION_DECL\n@@ -7716,6 +7717,7 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t      release_tree_vector (exprlist);\n \t      release_tree_vector (origtypes);\n \t    }\n+\t  arg_loc.release ();\n \t  break;\n \tcase CPP_DOT:\n \t  /* Structure element reference.  */\n@@ -7869,7 +7871,8 @@ c_parser_expression_conv (c_parser *parser)\n \n /* Parse a non-empty list of expressions.  If CONVERT_P, convert\n    functions and arrays to pointers and lvalues to rvalues.  If\n-   FOLD_P, fold the expressions.\n+   FOLD_P, fold the expressions.  If LOCATIONS is non-NULL, save the\n+   locations of function arguments into this vector.\n \n    nonempty-expr-list:\n      assignment-expression\n@@ -7879,7 +7882,8 @@ c_parser_expression_conv (c_parser *parser)\n static vec<tree, va_gc> *\n c_parser_expr_list (c_parser *parser, bool convert_p, bool fold_p,\n \t\t    vec<tree, va_gc> **p_orig_types,\n-\t\t    location_t *sizeof_arg_loc, tree *sizeof_arg)\n+\t\t    location_t *sizeof_arg_loc, tree *sizeof_arg,\n+\t\t    vec<location_t> *locations)\n {\n   vec<tree, va_gc> *ret;\n   vec<tree, va_gc> *orig_types;\n@@ -7905,6 +7909,8 @@ c_parser_expr_list (c_parser *parser, bool convert_p, bool fold_p,\n   ret->quick_push (expr.value);\n   if (orig_types)\n     orig_types->quick_push (expr.original_type);\n+  if (locations)\n+    locations->safe_push (loc);\n   if (sizeof_arg != NULL\n       && cur_sizeof_arg_loc != UNKNOWN_LOCATION\n       && expr.original_code == SIZEOF_EXPR)\n@@ -7929,6 +7935,8 @@ c_parser_expr_list (c_parser *parser, bool convert_p, bool fold_p,\n       vec_safe_push (ret, expr.value);\n       if (orig_types)\n \tvec_safe_push (orig_types, expr.original_type);\n+      if (locations)\n+\tlocations->safe_push (loc);\n       if (++idx < 3\n \t  && sizeof_arg != NULL\n \t  && cur_sizeof_arg_loc != UNKNOWN_LOCATION\n@@ -9026,7 +9034,7 @@ c_parser_objc_keywordexpr (c_parser *parser)\n {\n   tree ret;\n   vec<tree, va_gc> *expr_list = c_parser_expr_list (parser, true, true,\n-\t\t\t\t\t\tNULL, NULL, NULL);\n+\t\t\t\t\t\tNULL, NULL, NULL, NULL);\n   if (vec_safe_length (expr_list) == 1)\n     {\n       /* Just return the expression, remove a level of"}, {"sha": "da6a6fc9f98535fbd98e0f139fad347e09a9a5ab", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 34, "deletions": 24, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=81e5eca87345f0eba9c9ba4a5c9afb508e701444", "patch": "@@ -89,8 +89,9 @@ static int function_types_compatible_p (const_tree, const_tree, bool *,\n \t\t\t\t\tbool *);\n static int type_lists_compatible_p (const_tree, const_tree, bool *, bool *);\n static tree lookup_field (tree, tree);\n-static int convert_arguments (location_t, tree, vec<tree, va_gc> *,\n-\t\t\t      vec<tree, va_gc> *, tree, tree);\n+static int convert_arguments (location_t, vec<location_t>, tree,\n+\t\t\t      vec<tree, va_gc> *, vec<tree, va_gc> *, tree,\n+\t\t\t      tree);\n static tree pointer_diff (location_t, tree, tree);\n static tree convert_for_assignment (location_t, location_t, tree, tree, tree,\n \t\t\t\t    enum impl_conv, bool, tree, tree, int);\n@@ -2014,7 +2015,7 @@ convert_lvalue_to_rvalue (location_t loc, struct c_expr exp,\n       params->quick_push (expr_addr);\n       params->quick_push (tmp_addr);\n       params->quick_push (seq_cst);\n-      func_call = build_function_call_vec (loc, fndecl, params, NULL);\n+      func_call = build_function_call_vec (loc, vNULL, fndecl, params, NULL);\n \n       /* Return tmp which contains the value loaded.  */\n       exp.value = build2 (COMPOUND_EXPR, nonatomic_type, func_call, tmp);\n@@ -2796,7 +2797,7 @@ build_function_call (location_t loc, tree function, tree params)\n   vec_alloc (v, list_length (params));\n   for (; params; params = TREE_CHAIN (params))\n     v->quick_push (TREE_VALUE (params));\n-  ret = build_function_call_vec (loc, function, v, NULL);\n+  ret = build_function_call_vec (loc, vNULL, function, v, NULL);\n   vec_free (v);\n   return ret;\n }\n@@ -2818,8 +2819,8 @@ static void inform_declaration (tree decl)\n    PARAMS.  */\n \n tree\n-build_function_call_vec (location_t loc, tree function,\n-\t\t\t vec<tree, va_gc> *params,\n+build_function_call_vec (location_t loc, vec<location_t> arg_loc,\n+\t\t\t tree function, vec<tree, va_gc> *params,\n \t\t\t vec<tree, va_gc> *origtypes)\n {\n   tree fntype, fundecl = 0;\n@@ -2901,8 +2902,8 @@ build_function_call_vec (location_t loc, tree function,\n   /* Convert the parameters to the types declared in the\n      function prototype, or apply default promotions.  */\n \n-  nargs = convert_arguments (loc, TYPE_ARG_TYPES (fntype), params, origtypes,\n-\t\t\t     function, fundecl);\n+  nargs = convert_arguments (loc, arg_loc, TYPE_ARG_TYPES (fntype), params,\n+\t\t\t     origtypes, function, fundecl);\n   if (nargs < 0)\n     return error_mark_node;\n \n@@ -2981,19 +2982,22 @@ build_function_call_vec (location_t loc, tree function,\n \n    This is also where warnings about wrong number of args are generated.\n \n+   ARG_LOC are locations of function arguments (if any).\n+\n    Returns the actual number of arguments processed (which may be less\n    than the length of VALUES in some error situations), or -1 on\n    failure.  */\n \n static int\n-convert_arguments (location_t loc, tree typelist, vec<tree, va_gc> *values,\n-\t\t   vec<tree, va_gc> *origtypes, tree function, tree fundecl)\n+convert_arguments (location_t loc, vec<location_t> arg_loc, tree typelist,\n+\t\t   vec<tree, va_gc> *values, vec<tree, va_gc> *origtypes,\n+\t\t   tree function, tree fundecl)\n {\n   tree typetail, val;\n   unsigned int parmnum;\n   bool error_args = false;\n   const bool type_generic = fundecl\n-    && lookup_attribute (\"type generic\", TYPE_ATTRIBUTES(TREE_TYPE (fundecl)));\n+    && lookup_attribute (\"type generic\", TYPE_ATTRIBUTES (TREE_TYPE (fundecl)));\n   bool type_generic_remove_excess_precision = false;\n   tree selector;\n \n@@ -3228,7 +3232,13 @@ convert_arguments (location_t loc, tree typelist, vec<tree, va_gc> *values,\n \t      if (excess_precision)\n \t\tval = build1 (EXCESS_PRECISION_EXPR, valtype, val);\n \t      origtype = (!origtypes) ? NULL_TREE : (*origtypes)[parmnum];\n-\t      parmval = convert_for_assignment (loc, UNKNOWN_LOCATION, type,\n+\t      bool arg_loc_ok = !arg_loc.is_empty ()\n+\t\t\t\t/* Some __atomic_* builtins have additional\n+\t\t\t\t   hidden argument at position 0.  */\n+\t\t\t\t&& values->length () == arg_loc.length ();\n+\t      parmval = convert_for_assignment (loc,\n+\t\t\t\t\t\targ_loc_ok ? arg_loc[parmnum]\n+\t\t\t\t\t\t: UNKNOWN_LOCATION, type,\n \t\t\t\t\t\tval, origtype, ic_argpass,\n \t\t\t\t\t\tnpc, fundecl, function,\n \t\t\t\t\t\tparmnum + 1);\n@@ -3252,7 +3262,7 @@ convert_arguments (location_t loc, tree typelist, vec<tree, va_gc> *values,\n \t    {\n \t      /* Convert `float' to `double'.  */\n \t      if (warn_double_promotion && !c_inhibit_evaluation_warnings)\n-\t\twarning (OPT_Wdouble_promotion,\n+\t\twarning_at (arg_loc[parmnum], OPT_Wdouble_promotion,\n \t\t\t \"implicit conversion from %qT to %qT when passing \"\n \t\t\t \"argument to function\",\n \t\t\t valtype, double_type_node);\n@@ -3619,7 +3629,7 @@ build_atomic_assign (location_t loc, tree lhs, enum tree_code modifycode,\n       params->quick_push (lhs_addr);\n       params->quick_push (rhs);\n       params->quick_push (seq_cst);\n-      func_call = build_function_call_vec (loc, fndecl, params, NULL);\n+      func_call = build_function_call_vec (loc, vNULL, fndecl, params, NULL);\n       add_stmt (func_call);\n \n       /* Finish the compound statement.  */\n@@ -3650,7 +3660,7 @@ build_atomic_assign (location_t loc, tree lhs, enum tree_code modifycode,\n   params->quick_push (lhs_addr);\n   params->quick_push (old_addr);\n   params->quick_push (seq_cst);\n-  func_call = build_function_call_vec (loc, fndecl, params, NULL);\n+  func_call = build_function_call_vec (loc, vNULL, fndecl, params, NULL);\n   add_stmt (func_call);\n   params->truncate (0);\n \n@@ -3689,7 +3699,7 @@ build_atomic_assign (location_t loc, tree lhs, enum tree_code modifycode,\n   params->quick_push (integer_zero_node);\n   params->quick_push (seq_cst);\n   params->quick_push (seq_cst);\n-  func_call = build_function_call_vec (loc, fndecl, params, NULL);\n+  func_call = build_function_call_vec (loc, vNULL, fndecl, params, NULL);\n \n   goto_stmt = build1 (GOTO_EXPR, void_type_node, done_decl);\n   SET_EXPR_LOCATION (goto_stmt, loc);\n@@ -5519,13 +5529,13 @@ convert_to_anonymous_field (location_t location, tree type, tree rhs)\n    ERRTYPE says whether it is argument passing, assignment,\n    initialization or return.\n \n-   LOCATION is the location of the assignment, RHS_LOC is the location of\n-   the RHS.\n+   LOCATION is the location of the assignment, EXPR_LOC is the location of\n+   the RHS or, for a function, location of an argument.\n    FUNCTION is a tree for the function being called.\n    PARMNUM is the number of the argument, for printing in error messages.  */\n \n static tree\n-convert_for_assignment (location_t location, location_t rhs_loc, tree type,\n+convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t\t\ttree rhs, tree origtype, enum impl_conv errtype,\n \t\t\tbool null_pointer_constant, tree fundecl,\n \t\t\ttree function, int parmnum)\n@@ -5698,7 +5708,7 @@ convert_for_assignment (location_t location, location_t rhs_loc, tree type,\n       rhs = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (rhs)), rhs);\n       SET_EXPR_LOCATION (rhs, location);\n \n-      rhs = convert_for_assignment (location, rhs_loc,\n+      rhs = convert_for_assignment (location, expr_loc,\n \t\t\t\t    build_pointer_type (TREE_TYPE (type)),\n \t\t\t\t    rhs, origtype, errtype,\n \t\t\t\t    null_pointer_constant, fundecl, function,\n@@ -5728,8 +5738,8 @@ convert_for_assignment (location_t location, location_t rhs_loc, tree type,\n       bool save = in_late_binary_op;\n       if (codel == BOOLEAN_TYPE || codel == COMPLEX_TYPE)\n \tin_late_binary_op = true;\n-      ret = convert_and_check (rhs_loc != UNKNOWN_LOCATION\n-\t\t\t       ? rhs_loc : location, type, orig_rhs);\n+      ret = convert_and_check (expr_loc != UNKNOWN_LOCATION\n+\t\t\t       ? expr_loc : location, type, orig_rhs);\n       if (codel == BOOLEAN_TYPE || codel == COMPLEX_TYPE)\n \tin_late_binary_op = save;\n       return ret;\n@@ -5739,8 +5749,8 @@ convert_for_assignment (location_t location, location_t rhs_loc, tree type,\n   if ((codel == RECORD_TYPE || codel == UNION_TYPE)\n       && codel == coder\n       && comptypes (type, rhstype))\n-    return convert_and_check (rhs_loc != UNKNOWN_LOCATION\n-\t\t\t      ? rhs_loc : location, type, rhs);\n+    return convert_and_check (expr_loc != UNKNOWN_LOCATION\n+\t\t\t      ? expr_loc : location, type, rhs);\n \n   /* Conversion to a transparent union or record from its member types.\n      This applies only to function arguments.  */"}, {"sha": "49700e3b61bc425c7905c55c92f018a475e26d60", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=81e5eca87345f0eba9c9ba4a5c9afb508e701444", "patch": "@@ -1,3 +1,8 @@\n+2014-01-31  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/59963\n+\t* typeck.c (build_function_call_vec): Add dummy arg_loc parameter.\n+\n 2014-01-30  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/57899"}, {"sha": "5fc0e6bb9d1dcb98467210c86b25dc34f9c4dad7", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=81e5eca87345f0eba9c9ba4a5c9afb508e701444", "patch": "@@ -3357,7 +3357,7 @@ build_function_call (location_t /*loc*/,\n \n /* Used by the C-common bits.  */\n tree\n-build_function_call_vec (location_t /*loc*/,\n+build_function_call_vec (location_t /*loc*/, vec<location_t> /*arg_loc*/,\n \t\t\t tree function, vec<tree, va_gc> *params,\n \t\t\t vec<tree, va_gc> * /*origtypes*/)\n {"}, {"sha": "ca9841eed55ca8872f01c23a7e2960abdabd1e73", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=81e5eca87345f0eba9c9ba4a5c9afb508e701444", "patch": "@@ -1,3 +1,17 @@\n+2014-01-31  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/59963\n+\t* objc-next-runtime-abi-02.c (build_throw_stmt): Pass vNULL to\n+\tbuild_function_call_vec.\n+\t(finish_catch): Likewise.\n+\t(next_runtime_abi_02_get_class_reference): Likewise.\n+\t* objc-next-runtime-abi-01.c (build_objc_method_call): Pass vNULL to\n+\tbuild_function_call_vec.\n+\t(build_throw_stmt): Likewise.\n+\t* objc-gnu-runtime-abi-01.c: (build_objc_method_call): Pass vNULL to\n+\tbuild_function_call_vec.\n+\t(build_throw_stmt): Likewise.\n+\n 2014-01-02  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tUpdate copyright years"}, {"sha": "8cfa1f87d7e3036143798d626e18ca80f2c3474e", "filename": "gcc/objc/objc-gnu-runtime-abi-01.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Fobjc%2Fobjc-gnu-runtime-abi-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Fobjc%2Fobjc-gnu-runtime-abi-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-gnu-runtime-abi-01.c?ref=81e5eca87345f0eba9c9ba4a5c9afb508e701444", "patch": "@@ -700,7 +700,7 @@ build_objc_method_call (location_t loc, int super_flag, tree method_prototype,\n      then cast the pointer, then call it with the method arguments.  */\n   tv->quick_push (lookup_object);\n   tv->quick_push (selector);\n-  method = build_function_call_vec (loc, sender, tv, NULL);\n+  method = build_function_call_vec (loc, vNULL, sender, tv, NULL);\n   vec_free (tv);\n \n   /* Pass the appropriate object to the method.  */\n@@ -715,7 +715,7 @@ build_objc_method_call (location_t loc, int super_flag, tree method_prototype,\n \n   /* Build an obj_type_ref, with the correct cast for the method call.  */\n   t = build3 (OBJ_TYPE_REF, sender_cast, method, lookup_object, size_zero_node);\n-  t = build_function_call_vec (loc, t, parms, NULL);\n+  t = build_function_call_vec (loc, vNULL, t, parms, NULL);\n   vec_free (parms);\n   return t;\n }\n@@ -2213,7 +2213,8 @@ build_throw_stmt (location_t loc, tree throw_expr, bool rethrown ATTRIBUTE_UNUSE\n   /* A throw is just a call to the runtime throw function with the\n      object as a parameter.  */\n   parms->quick_push (throw_expr);\n-  t = build_function_call_vec (loc, objc_exception_throw_decl, parms, NULL);\n+  t = build_function_call_vec (loc, vNULL, objc_exception_throw_decl, parms,\n+\t\t\t       NULL);\n   vec_free (parms);\n   return add_stmt (t);\n }"}, {"sha": "1879d1033e9edc83775e92e912327ef742643029", "filename": "gcc/objc/objc-next-runtime-abi-01.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c?ref=81e5eca87345f0eba9c9ba4a5c9afb508e701444", "patch": "@@ -882,7 +882,7 @@ build_objc_method_call (location_t loc, int super_flag, tree method_prototype,\n   /* Build an obj_type_ref, with the correct cast for the method call.  */\n   t = build3 (OBJ_TYPE_REF, sender_cast, method,\n \t\t\t    lookup_object, size_zero_node);\n-  t = build_function_call_vec (loc, t, parms, NULL);\n+  t = build_function_call_vec (loc, vNULL, t, parms, NULL);\n   vec_free (parms);\n   return t;\n }\n@@ -2866,7 +2866,8 @@ build_throw_stmt (location_t loc, tree throw_expr, bool rethrown ATTRIBUTE_UNUSE\n   /* A throw is just a call to the runtime throw function with the\n      object as a parameter.  */\n   parms->quick_push (throw_expr);\n-  t = build_function_call_vec (loc, objc_exception_throw_decl, parms, NULL);\n+  t = build_function_call_vec (loc, vNULL, objc_exception_throw_decl, parms,\n+\t\t\t       NULL);\n   vec_free (parms);\n   return add_stmt (t);\n }"}, {"sha": "ee43d2d0ce851275d26dfe0aa289f9dd3dba0a73", "filename": "gcc/objc/objc-next-runtime-abi-02.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c?ref=81e5eca87345f0eba9c9ba4a5c9afb508e701444", "patch": "@@ -1088,7 +1088,8 @@ next_runtime_abi_02_get_class_reference (tree ident)\n       t = my_build_string_pointer (IDENTIFIER_LENGTH (ident) + 1,\n \t\t\t\t   IDENTIFIER_POINTER (ident));\n       v->quick_push (t);\n-      t = build_function_call_vec (input_location, objc_get_class_decl, v, 0);\n+      t = build_function_call_vec (input_location, vNULL, objc_get_class_decl,\n+\t\t\t\t   v, 0);\n       vec_free (v);\n       return t;\n     }\n@@ -3622,14 +3623,16 @@ build_throw_stmt (location_t loc, tree throw_expr, bool rethrown)\n   tree t;\n   if (rethrown)\n     /* We have a separate re-throw entry.  */\n-    t = build_function_call_vec (loc, objc_rethrow_exception_decl, NULL, NULL);\n+    t = build_function_call_vec (loc, vNULL, objc_rethrow_exception_decl,\n+\t\t\t\t NULL, NULL);\n   else\n     {\n       /* Throw like the others...  */\n       vec<tree, va_gc> *parms;\n       vec_alloc (parms, 1);\n       parms->quick_push (throw_expr);\n-      t = build_function_call_vec (loc, objc_exception_throw_decl, parms, 0);\n+      t = build_function_call_vec (loc, vNULL, objc_exception_throw_decl,\n+\t\t\t\t   parms, 0);\n       vec_free (parms);\n     }\n   return add_stmt (t);\n@@ -3708,7 +3711,8 @@ finish_catch (struct objc_try_context **cur_try_context, tree curr_catch)\n \n   /* Pick up the new context we made in begin_try above...  */\n   ct = *cur_try_context;\n-  func = build_function_call_vec (loc, objc2_end_catch_decl, NULL, NULL);\n+  func = build_function_call_vec (loc, vNULL, objc2_end_catch_decl, NULL,\n+\t\t\t\t  NULL);\n   append_to_statement_list (func, &ct->finally_body);\n   try_exp = build_stmt (loc, TRY_FINALLY_EXPR, ct->try_body, ct->finally_body);\n   *cur_try_context = ct->outer;"}, {"sha": "117ef0c50855967eee0872a829bc0b03ab0d2aee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=81e5eca87345f0eba9c9ba4a5c9afb508e701444", "patch": "@@ -1,3 +1,13 @@\n+2014-01-31  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/59963\n+\t* gcc.dg/pr59940.c (g): Adjust dg-warning.\n+\t(y): Adjust dg-error.\n+\t* gcc.dg/cast-function-1.c (bar): Adjust dg-warnings.\n+\t* gcc.dg/pr59963-1.c: New test.\n+\t* gcc.dg/pr59963-2.c: New test.\n+\t* gcc.dg/pr59963-3.c: New test.\n+\n 2014-01-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/59923"}, {"sha": "ab42db1196c7e682cf56ce39e0b2d41d59377af4", "filename": "gcc/testsuite/gcc.dg/cast-function-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-function-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-function-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-function-1.c?ref=81e5eca87345f0eba9c9ba4a5c9afb508e701444", "patch": "@@ -18,14 +18,14 @@ typedef struct {\n \n void bar(double d, int i, str_t s)\n {\n-  d = ((double (*) (int)) foo1) (i);  /* { dg-warning \"33:non-compatible|abort\" } */\n-  i = ((int (*) (double)) foo1) (d);  /* { dg-warning \"33:non-compatible|abort\" } */\n-  s = ((str_t (*) (int)) foo1) (i);   /* { dg-warning \"32:non-compatible|abort\" } */\n+  d = ((double (*) (int)) foo1) (i);  /* { dg-warning \"7:non-compatible|abort\" } */\n+  i = ((int (*) (double)) foo1) (d);  /* { dg-warning \"7:non-compatible|abort\" } */\n+  s = ((str_t (*) (int)) foo1) (i);   /* { dg-warning \"7:non-compatible|abort\" } */\n   ((void (*) (int)) foo1) (d);        /* { dg-warning \"non-compatible|abort\" } */\n   i = ((int (*) (int)) foo1) (i);     /* { dg-bogus \"non-compatible|abort\" } */\n   (void) foo1 (i);                    /* { dg-bogus \"non-compatible|abort\" } */\n \n-  d = ((double (*) (int)) foo2) (i);  /* { dg-warning \"33:non-compatible|abort\" } */\n+  d = ((double (*) (int)) foo2) (i);  /* { dg-warning \"7:non-compatible|abort\" } */\n   i = ((int (*) (double)) foo2) (d);  /* { dg-bogus \"non-compatible|abort\" } */\n   s = ((str_t (*) (int)) foo2) (i);   /* { dg-warning \"non-compatible|abort\" } */\n   ((void (*) (int)) foo2) (d);        /* { dg-warning \"non-compatible|abort\" } */"}, {"sha": "b0fd17f50cbec78044fc628e16b2c785898a5ee5", "filename": "gcc/testsuite/gcc.dg/pr59940.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59940.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59940.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59940.c?ref=81e5eca87345f0eba9c9ba4a5c9afb508e701444", "patch": "@@ -15,13 +15,13 @@ g (void)\n   si = 3.2f; /* { dg-warning \"8:conversion\" } */\n   uc = 256; /* { dg-warning \"8:large integer implicitly truncated to unsigned type\" } */\n   si = 0x800000000; /* { dg-warning \"8:overflow in implicit constant conversion\" } */\n-  return f (si) /* { dg-warning \"12:conversion\" } */\n-         + f (si); /* { dg-warning \"14:conversion\" } */\n+  return f (si) /* { dg-warning \"13:conversion\" } */\n+         + f (si); /* { dg-warning \"15:conversion\" } */\n }\n \n int\n y (void)\n {\n-  f (); /* { dg-error \"5:too few arguments to function\" } */\n-  g (0xa); /* { dg-error \"5:too many arguments to function\" } */\n+  f (); /* { dg-error \"3:too few arguments to function\" } */\n+  g (0xa); /* { dg-error \"3:too many arguments to function\" } */\n }"}, {"sha": "4a369db4863f8e1984910855a041bddd9bdd84e4", "filename": "gcc/testsuite/gcc.dg/pr59963-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59963-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59963-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59963-1.c?ref=81e5eca87345f0eba9c9ba4a5c9afb508e701444", "patch": "@@ -0,0 +1,14 @@\n+/* PR c/59963 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wdouble-promotion\" } */\n+\n+extern void baz ();\n+extern void qux (int, ...);\n+\n+void\n+foo (float f)\n+{\n+  bar (f); /* { dg-warning \"8:implicit conversion\" } */\n+  baz (f); /* { dg-warning \"8:implicit conversion\" } */\n+  qux (42, f); /* { dg-warning \"12:implicit conversion\" } */\n+}"}, {"sha": "ea0594681a3df3e652627247cbff5f47ea4f9c2b", "filename": "gcc/testsuite/gcc.dg/pr59963-2.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59963-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59963-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59963-2.c?ref=81e5eca87345f0eba9c9ba4a5c9afb508e701444", "patch": "@@ -0,0 +1,36 @@\n+/* PR c/59963 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Woverflow -Wconversion\" } */\n+\n+extern void bar (unsigned char);\n+extern void bar8 (unsigned char, unsigned char, unsigned char, unsigned char,\n+\t\t  unsigned char, unsigned char, unsigned char, unsigned char);\n+extern void bazu (unsigned int, ...);\n+extern void bazi (char, int);\n+extern int f (short a, short b);\n+\n+int\n+g (void)\n+{\n+  return f (0xffffffffL, /* { dg-warning \"13:overflow in implicit constant conversion\" } */\n+            0xffffffffL) /* { dg-warning \"13:overflow in implicit constant conversion\" } */\n+\t && f (0xffffffffL, /* { dg-warning \"9:overflow in implicit constant conversion\" } */\n+\t       0xffffffffL); /* { dg-warning \"9:overflow in implicit constant conversion\" } */\n+}\n+\n+void\n+foo (int i)\n+{\n+  bar (256); /* { dg-warning \"8:large integer implicitly truncated to unsigned type\" } */\n+  bar (6.66f); /* { dg-warning \"8:conversion\" } */\n+  bar8 (-1, /* { dg-warning \"9:negative integer implicitly converted to unsigned type\" } */\n+\t -2, /* { dg-warning \"3:negative integer implicitly converted to unsigned type\" } */\n+\t  -3, /* { dg-warning \"4:negative integer implicitly converted to unsigned type\" } */\n+\t   -4, /* { dg-warning \"5:negative integer implicitly converted to unsigned type\" } */\n+\t    -5, /* { dg-warning \"6:negative integer implicitly converted to unsigned type\" } */\n+\t     -6, /* { dg-warning \"7:negative integer implicitly converted to unsigned type\" } */\n+\t      -7, /* { dg-warning \"8:negative integer implicitly converted to unsigned type\" } */\n+\t       -8); /* { dg-warning \"9:negative integer implicitly converted to unsigned type\" } */\n+  bazu (i, i); /* { dg-warning \"9:conversion\" } */\n+  bazi (0x8, 0x80000000); /* { dg-warning \"14:conversion of unsigned constant value to negative integer\" } */\n+}"}, {"sha": "eafa37473f3a8da4a45d4fa92d08ebee99f74744", "filename": "gcc/testsuite/gcc.dg/pr59963-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59963-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81e5eca87345f0eba9c9ba4a5c9afb508e701444/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59963-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59963-3.c?ref=81e5eca87345f0eba9c9ba4a5c9afb508e701444", "patch": "@@ -0,0 +1,14 @@\n+/* PR c/59963 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wconversion\" } */\n+\n+extern void foo (void *p);\n+\n+void\n+bar (void)\n+{\n+  {\n+    /* This must not ICE.  */\n+    int i __attribute__((cleanup (foo)));\n+  }\n+}"}]}