{"sha": "97b30a399ef561f6f37a2c08c830fdf3141bb504", "node_id": "C_kwDOANBUbNoAKDk3YjMwYTM5OWVmNTYxZjZmMzdhMmMwOGM4MzBmZGYzMTQxYmI1MDQ", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-15T04:11:00Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-29T02:59:10Z"}, "message": "c++: typeid and instantiation [PR102651]\n\nPR49387 was a problem with initially asking for a typeid for a class\ntemplate specialization before it was complete, and later actually filling\nin the descriptor when the class was complete, and thus disagreeing on the\nform of the descriptor.  I fixed that by forcing the class to be complete,\nbut this testcase shows why that approach is problematic.  So instead let's\nadjust the type of the descriptor later if needed.\n\n\tPR c++/102651\n\tPR c++/49387\n\ngcc/cp/ChangeLog:\n\n\t* rtti.cc (get_tinfo_decl_direct): Don't complete_type.\n\t(emit_tinfo_decl): Update tdesc type if needed.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/rtti/typeid-complete1.C: New test.", "tree": {"sha": "e5bef915442055e9d666eb2178cdc703331c6eb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5bef915442055e9d666eb2178cdc703331c6eb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97b30a399ef561f6f37a2c08c830fdf3141bb504", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97b30a399ef561f6f37a2c08c830fdf3141bb504", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97b30a399ef561f6f37a2c08c830fdf3141bb504", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97b30a399ef561f6f37a2c08c830fdf3141bb504/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "654f6978cdc85a3970ff2c478d4df3e55cf4d3ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/654f6978cdc85a3970ff2c478d4df3e55cf4d3ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/654f6978cdc85a3970ff2c478d4df3e55cf4d3ab"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "f5b43ec0fb258656980cfd7d72e5d68eb36f9a4b", "filename": "gcc/cp/rtti.cc", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b30a399ef561f6f37a2c08c830fdf3141bb504/gcc%2Fcp%2Frtti.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b30a399ef561f6f37a2c08c830fdf3141bb504/gcc%2Fcp%2Frtti.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.cc?ref=97b30a399ef561f6f37a2c08c830fdf3141bb504", "patch": "@@ -446,9 +446,6 @@ get_tinfo_decl_direct (tree type, tree name, int pseudo_ix)\n \n   gcc_checking_assert (TREE_CODE (type) != METHOD_TYPE);\n \n-  if (pseudo_ix < 0)\n-    type = complete_type (type);\n-\n   if (CLASS_TYPE_P (type))\n     d = CLASSTYPE_TYPEINFO_VAR (TYPE_MAIN_VARIANT (type));\n \n@@ -1693,7 +1690,17 @@ emit_tinfo_decl (tree decl)\n       tree init;\n \n       DECL_EXTERNAL (decl) = 0;\n-      init = get_pseudo_ti_init (type, get_pseudo_ti_index (type));\n+      int pseudo_ix = get_pseudo_ti_index (type);\n+      const tinfo_s *ti = get_tinfo_desc (pseudo_ix);\n+      if (TREE_TYPE (decl) != ti->type)\n+\t{\n+\t  /* If the class became complete since we first called get_tinfo_decl,\n+\t     its type_info descriptor may have switched from __class_type_info\n+\t     to e.g. __si_class_type_info.  */\n+\t  TREE_TYPE (decl) = ti->type;\n+\t  relayout_decl (decl);\n+\t}\n+      init = get_pseudo_ti_init (type, pseudo_ix);\n       DECL_INITIAL (decl) = init;\n       mark_used (decl);\n       cp_finish_decl (decl, init, false, NULL_TREE, 0);"}, {"sha": "8d3fec46801d9f0c4745da53605edb3091e8ca43", "filename": "gcc/testsuite/g++.dg/rtti/typeid-complete1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b30a399ef561f6f37a2c08c830fdf3141bb504/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Ftypeid-complete1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b30a399ef561f6f37a2c08c830fdf3141bb504/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Ftypeid-complete1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Ftypeid-complete1.C?ref=97b30a399ef561f6f37a2c08c830fdf3141bb504", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/102651\n+\n+#include <typeinfo>\n+\n+template <typename T>\n+struct S : T{\n+    T x;\n+};\n+\n+const void *p;\n+int main()\n+{\n+  p = &typeid( S<void>** );\n+}"}]}