{"sha": "8ab9333261065ccc8898f515571f0276321e005d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFiOTMzMzI2MTA2NWNjYzg4OThmNTE1NTcxZjAyNzYzMjFlMDA1ZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-02-27T21:27:27Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-02-27T21:27:27Z"}, "message": "re PR target/30970 (Register zeroing by xor N,N should be moved out of loop)\n\n        PR target/30970\n        * config/i386/sse.md (*mov<mode>_internal, *movv4sf_internal,\n        *movv2df_internal): Enable pattern only for valid operand\n        combinations.\n        * config/i386/i386.c (ix86_modes_tieable_p): For SSE registers,\n        tie only 128bit modes. For MMX registers, tie only 64bit modes.\n\ntestsuite/ChangeLog:\n\n\tPR target/30970\n\t* gcc.target/i386/gfortran.dg/pr30970.c: New test.\n\nFrom-SVN: r122387", "tree": {"sha": "4fad45ba36b586ccf01b80fa0d7a6e5aa52ae755", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fad45ba36b586ccf01b80fa0d7a6e5aa52ae755"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ab9333261065ccc8898f515571f0276321e005d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ab9333261065ccc8898f515571f0276321e005d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ab9333261065ccc8898f515571f0276321e005d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ab9333261065ccc8898f515571f0276321e005d/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b4141468342aa431ce55ca8f45c0ba20603302f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b4141468342aa431ce55ca8f45c0ba20603302f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b4141468342aa431ce55ca8f45c0ba20603302f"}], "stats": {"total": 51, "additions": 44, "deletions": 7}, "files": [{"sha": "dc5a8d14d623eb77ed39f348a1c6bd571f20783b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab9333261065ccc8898f515571f0276321e005d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab9333261065ccc8898f515571f0276321e005d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ab9333261065ccc8898f515571f0276321e005d", "patch": "@@ -1,3 +1,12 @@\n+2007-02-27  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/30970\n+\t* config/i386/sse.md (*mov<mode>_internal, *movv4sf_internal,\n+\t*movv2df_internal): Enable pattern only for valid operand\n+\tcombinations.\n+\t* config/i386/i386.c (ix86_modes_tieable_p): For SSE registers,\n+\ttie only 128bit modes. For MMX registers, tie only 64bit modes.\n+\n 2007-02-27  Mike Stump  <mrs@apple.com>\n \n \t* config/darwin-crt3.c: Avoid compilation when compiling for a"}, {"sha": "c0208301afd4f16515006ea7deb9b8e3365bed4a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab9333261065ccc8898f515571f0276321e005d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab9333261065ccc8898f515571f0276321e005d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8ab9333261065ccc8898f515571f0276321e005d", "patch": "@@ -18783,15 +18783,17 @@ ix86_modes_tieable_p (enum machine_mode mode1, enum machine_mode mode2)\n \n   /* If MODE2 is only appropriate for an SSE register, then tie with\n      any other mode acceptable to SSE registers.  */\n-  if (GET_MODE_SIZE (mode2) >= 8\n+  if (GET_MODE_SIZE (mode2) == 16\n       && ix86_hard_regno_mode_ok (FIRST_SSE_REG, mode2))\n-    return ix86_hard_regno_mode_ok (FIRST_SSE_REG, mode1);\n+    return (GET_MODE_SIZE (mode1) == 16\n+\t    && ix86_hard_regno_mode_ok (FIRST_SSE_REG, mode1));\n \n-  /* If MODE2 is appropriate for an MMX (or SSE) register, then tie\n+  /* If MODE2 is appropriate for an MMX register, then tie\n      with any other mode acceptable to MMX registers.  */\n   if (GET_MODE_SIZE (mode2) == 8\n       && ix86_hard_regno_mode_ok (FIRST_MMX_REG, mode2))\n-    return ix86_hard_regno_mode_ok (FIRST_MMX_REG, mode1);\n+    return (GET_MODE_SIZE (mode2) == 8\n+\t    && ix86_hard_regno_mode_ok (FIRST_MMX_REG, mode1));\n \n   return false;\n }"}, {"sha": "cc123cc3510349f01bb35f0b994b17f41c9e1284", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab9333261065ccc8898f515571f0276321e005d/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab9333261065ccc8898f515571f0276321e005d/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=8ab9333261065ccc8898f515571f0276321e005d", "patch": "@@ -60,7 +60,9 @@\n (define_insn \"*mov<mode>_internal\"\n   [(set (match_operand:SSEMODEI 0 \"nonimmediate_operand\" \"=x,x ,m\")\n \t(match_operand:SSEMODEI 1 \"nonimmediate_or_sse_const_operand\"  \"C ,xm,x\"))]\n-  \"TARGET_SSE && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"TARGET_SSE\n+   && (register_operand (operands[0], <MODE>mode)\n+       || register_operand (operands[1], <MODE>mode))\"\n {\n   switch (which_alternative)\n     {\n@@ -140,7 +142,9 @@\n (define_insn \"*movv4sf_internal\"\n   [(set (match_operand:V4SF 0 \"nonimmediate_operand\" \"=x,x,m\")\n \t(match_operand:V4SF 1 \"nonimmediate_or_sse_const_operand\" \"C,xm,x\"))]\n-  \"TARGET_SSE\"\n+  \"TARGET_SSE\n+   && (register_operand (operands[0], V4SFmode)\n+       || register_operand (operands[1], V4SFmode))\"\n {\n   switch (which_alternative)\n     {\n@@ -182,7 +186,9 @@\n (define_insn \"*movv2df_internal\"\n   [(set (match_operand:V2DF 0 \"nonimmediate_operand\" \"=x,x,m\")\n \t(match_operand:V2DF 1 \"nonimmediate_or_sse_const_operand\" \"C,xm,x\"))]\n-  \"TARGET_SSE && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"TARGET_SSE\n+   && (register_operand (operands[0], V2DFmode)\n+       || register_operand (operands[1], V2DFmode))\"\n {\n   switch (which_alternative)\n     {"}, {"sha": "1b31b2feef8a87be19545d02ccd285152f856854", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab9333261065ccc8898f515571f0276321e005d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab9333261065ccc8898f515571f0276321e005d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ab9333261065ccc8898f515571f0276321e005d", "patch": "@@ -1,3 +1,8 @@\n+2007-02-27  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/30970\n+\t* gcc.target/i386/gfortran.dg/pr30970.c: New test. \n+\n 2007-02-27  Mark Mitchell  <mark@codesourcery.com>\n \n \t* lib/target-supports.exp (check_effective_target_init_priority):"}, {"sha": "5ee7cb368d530ea81470b8322af46be70aa7b366", "filename": "gcc/testsuite/gcc.target/i386/pr30970.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab9333261065ccc8898f515571f0276321e005d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr30970.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab9333261065ccc8898f515571f0276321e005d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr30970.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr30970.c?ref=8ab9333261065ccc8898f515571f0276321e005d", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } }\n+/* { dg-options \"-msse2 -O2 -ftree-vectorize\" } */\n+\n+#define N 256\n+int b[N];\n+\n+void test()\n+{  \n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    b[i] = 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pxor\" 1 } } */"}]}