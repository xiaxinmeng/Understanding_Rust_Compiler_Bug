{"sha": "474bda6c46cd9bc40c35f8c7220a88f9587aa354", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc0YmRhNmM0NmNkOWJjNDBjMzVmOGM3MjIwYTg4Zjk1ODdhYTM1NA==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1995-02-15T06:41:25Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1995-02-15T06:41:25Z"}, "message": "varasm.c (const_hash): Add support for SET_TYPE constructors.\n\n* varasm.c (const_hash):  Add support for SET_TYPE constructors.\n(record_constant_1), (copy_constant):  Likewise.\n(output_constant):  Likewise.  (Also SET_TYPE INTEGER_CSTs.)\n\nFrom-SVN: r8955", "tree": {"sha": "cbbb89df1716f5cad381fe699dc2d404e122403b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbbb89df1716f5cad381fe699dc2d404e122403b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/474bda6c46cd9bc40c35f8c7220a88f9587aa354", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/474bda6c46cd9bc40c35f8c7220a88f9587aa354", "html_url": "https://github.com/Rust-GCC/gccrs/commit/474bda6c46cd9bc40c35f8c7220a88f9587aa354", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/474bda6c46cd9bc40c35f8c7220a88f9587aa354/comments", "author": null, "committer": null, "parents": [{"sha": "b4ee5a7269b4712db5cbd8e71eefad7df5fbec54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4ee5a7269b4712db5cbd8e71eefad7df5fbec54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4ee5a7269b4712db5cbd8e71eefad7df5fbec54"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "42cde912aa7245317989b67e3e515c51e7f56eb5", "filename": "gcc/varasm.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/474bda6c46cd9bc40c35f8c7220a88f9587aa354/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/474bda6c46cd9bc40c35f8c7220a88f9587aa354/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=474bda6c46cd9bc40c35f8c7220a88f9587aa354", "patch": "@@ -2149,6 +2149,12 @@ const_hash (exp)\n   else if (code == COMPLEX_CST)\n     return const_hash (TREE_REALPART (exp)) * 5\n       + const_hash (TREE_IMAGPART (exp));\n+  else if (code == CONSTRUCTOR && TREE_CODE (TREE_TYPE (exp)) == SET_TYPE)\n+    {\n+      len = int_size_in_bytes (TREE_TYPE (exp));\n+      p = (char*) alloca (len);\n+      get_set_constructor_bytes (exp, (unsigned char *) p, len);\n+    }\n   else if (code == CONSTRUCTOR)\n     {\n       register tree link;\n@@ -2274,6 +2280,12 @@ compare_constant_1 (exp, p)\n       p = compare_constant_1 (TREE_IMAGPART (exp), p);\n       return p;\n     }\n+  else if (code == CONSTRUCTOR && TREE_CODE (TREE_TYPE (exp)) == SET_TYPE)\n+    {\n+      len = int_size_in_bytes (TREE_TYPE (exp));\n+      strp = (char*) alloca (len);\n+      get_set_constructor_bytes (exp, (unsigned char *) strp, len);\n+    }\n   else if (code == CONSTRUCTOR)\n     {\n       register tree link;\n@@ -2418,6 +2430,16 @@ record_constant_1 (exp)\n       record_constant_1 (TREE_IMAGPART (exp));\n       return;\n     }\n+  else if (code == CONSTRUCTOR && TREE_CODE (TREE_TYPE (exp)) == SET_TYPE)\n+    {\n+      int nbytes = int_size_in_bytes (TREE_TYPE (exp));\n+      obstack_grow (&permanent_obstack, &nbytes, sizeof (nbytes));\n+      obstack_blank (&permanent_obstack, nbytes);\n+      get_set_constructor_bytes (exp,\n+\t\t\t\t (unsigned char *) permanent_obstack.next_free,\n+\t\t\t\t nbytes);\n+      return;\n+    }\n   else if (code == CONSTRUCTOR)\n     {\n       register tree link;\n@@ -2573,6 +2595,9 @@ copy_constant (exp)\n \tCONSTRUCTOR_ELTS (copy) = list;\n \tfor (tail = list; tail; tail = TREE_CHAIN (tail))\n \t  TREE_VALUE (tail) = copy_constant (TREE_VALUE (tail));\n+\tif (TREE_CODE (TREE_TYPE (exp)) == SET_TYPE)\n+\t  for (tail = list; tail; tail = TREE_CHAIN (tail))\n+\t    TREE_PURPOSE (tail) = copy_constant (TREE_PURPOSE (tail));\n \n \treturn copy;\n       }\n@@ -3489,6 +3514,22 @@ output_constant (exp, size)\n       else\n \tabort ();\n       return;\n+\n+    case SET_TYPE:\n+      if (TREE_CODE (exp) == INTEGER_CST)\n+\tassemble_integer (expand_expr (exp, NULL_RTX,\n+\t\t\t\t       VOIDmode, EXPAND_INITIALIZER),\n+\t\t\t  byte_size, 1);\n+      else if (TREE_CODE (exp) == CONSTRUCTOR)\n+\t{\n+\t  unsigned char *buffer = (unsigned char *) alloca (byte_size);\n+\t  if (get_set_constructor_bytes (constructor, buffer, byte_size))\n+\t    abort ();\n+\t  assemble_string (buffer, byte_size);\n+\t}\n+      else\n+\terror (\"unknown set constructor type\");\n+      return;\n     }\n \n   if (size > 0)"}]}