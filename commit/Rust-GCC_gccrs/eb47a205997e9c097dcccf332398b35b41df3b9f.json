{"sha": "eb47a205997e9c097dcccf332398b35b41df3b9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI0N2EyMDU5OTdlOWMwOTdkY2NjZjMzMjM5OGIzNWI0MWRmM2I5Zg==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2003-01-09T23:24:48Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2003-01-09T23:24:48Z"}, "message": "c4x.c (c4x_naked_function_p): Rename from c4x_assembler_function_p.\n\n\t* config/c4x/c4x.c (c4x_naked_function_p): Rename from\n\tc4x_assembler_function_p.\n\t(c4x_null_epilogue_p): Complement return value, all uses updated.\n\t(c4x_insert_attributes): Add naked.\n\nFrom-SVN: r61134", "tree": {"sha": "8a54dc950d29ff92ed42b608cafc98cc58c7ab4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a54dc950d29ff92ed42b608cafc98cc58c7ab4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb47a205997e9c097dcccf332398b35b41df3b9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb47a205997e9c097dcccf332398b35b41df3b9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb47a205997e9c097dcccf332398b35b41df3b9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb47a205997e9c097dcccf332398b35b41df3b9f/comments", "author": null, "committer": null, "parents": [{"sha": "d2097937c57963f4bea75df2d0abe691f74de3fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2097937c57963f4bea75df2d0abe691f74de3fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2097937c57963f4bea75df2d0abe691f74de3fe"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "4fe50b2261101768f81fd64f3b3c9645f7f534f5", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb47a205997e9c097dcccf332398b35b41df3b9f/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb47a205997e9c097dcccf332398b35b41df3b9f/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=eb47a205997e9c097dcccf332398b35b41df3b9f", "patch": "@@ -165,11 +165,12 @@ tree data_tree = NULL_TREE;\n tree pure_tree = NULL_TREE;\n tree noreturn_tree = NULL_TREE;\n tree interrupt_tree = NULL_TREE;\n+tree naked_tree = NULL_TREE;\n \n /* Forward declarations */\n static int c4x_isr_reg_used_p PARAMS ((unsigned int));\n static int c4x_leaf_function_p PARAMS ((void));\n-static int c4x_assembler_function_p PARAMS ((void));\n+static int c4x_naked_function_p PARAMS ((void));\n static int c4x_immed_float_p PARAMS ((rtx));\n static int c4x_a_register PARAMS ((rtx));\n static int c4x_x_register PARAMS ((rtx));\n@@ -785,13 +786,12 @@ c4x_leaf_function_p ()\n \n \n static int\n-c4x_assembler_function_p ()\n+c4x_naked_function_p ()\n {\n   tree type;\n \n   type = TREE_TYPE (current_function_decl);\n-  return (lookup_attribute (\"assembler\", TYPE_ATTRIBUTES (type)) != NULL)\n-    || (lookup_attribute (\"naked\", TYPE_ATTRIBUTES (type)) != NULL);\n+  return lookup_attribute (\"naked\", TYPE_ATTRIBUTES (type)) != NULL;\n }\n \n \n@@ -824,8 +824,8 @@ c4x_expand_prologue ()\n      is used so it won't needlessly push the frame pointer.  */\n   int dont_push_ar3;\n \n-  /* For __assembler__ function don't build a prologue.  */\n-  if (c4x_assembler_function_p ())\n+  /* For __naked__ function don't build a prologue.  */\n+  if (c4x_naked_function_p ())\n     {\n       return;\n     }\n@@ -1011,8 +1011,8 @@ c4x_expand_epilogue()\n   rtx insn;\n   int size = get_frame_size ();\n   \n-  /* For __assembler__ function build no epilogue.  */\n-  if (c4x_assembler_function_p ())\n+  /* For __naked__ function build no epilogue.  */\n+  if (c4x_naked_function_p ())\n     {\n       insn = emit_jump_insn (gen_return_from_epilogue ());\n       RTX_FRAME_RELATED_P (insn) = 1;\n@@ -1207,7 +1207,7 @@ c4x_null_epilogue_p ()\n   int regno;\n \n   if (reload_completed\n-      && ! c4x_assembler_function_p ()\n+      && ! c4x_naked_function_p ()\n       && ! c4x_interrupt_function_p ()\n       && ! current_function_calls_alloca\n       && ! current_function_args_size\n@@ -1217,10 +1217,10 @@ c4x_null_epilogue_p ()\n       for (regno = FIRST_PSEUDO_REGISTER - 1; regno >= 0; regno--)\n \tif (regs_ever_live[regno] && ! call_used_regs[regno]\n \t    && (regno != AR3_REGNO))\n-\t  return 0;\n-      return 1;\n+\t  return 1;\n+      return 0;\n     }\n-  return 0;\n+  return 1;\n }\n \n \n@@ -4608,6 +4608,7 @@ c4x_insert_attributes (decl, attributes)\n       c4x_check_attribute (\"const\", pure_tree, decl, attributes);\n       c4x_check_attribute (\"noreturn\", noreturn_tree, decl, attributes);\n       c4x_check_attribute (\"interrupt\", interrupt_tree, decl, attributes);\n+      c4x_check_attribute (\"naked\", naked_tree, decl, attributes);\n       break;\n \n     case VAR_DECL:\n@@ -4624,9 +4625,7 @@ const struct attribute_spec c4x_attribute_table[] =\n {\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n   { \"interrupt\",    0, 0, false, true,  true,  c4x_handle_fntype_attribute },\n-  /* FIXME: code elsewhere in this file treats \"naked\" as a synonym of\n-     \"interrupt\"; should it be accepted here?  */\n-  { \"assembler\",    0, 0, false, true,  true,  c4x_handle_fntype_attribute },\n+  { \"naked\",    0, 0, false, true,  true,  c4x_handle_fntype_attribute },\n   { \"leaf_pretend\", 0, 0, false, true,  true,  c4x_handle_fntype_attribute },\n   { NULL,           0, 0, false, false, false, NULL }\n };"}]}