{"sha": "636730cadd8be7f6280ea673cf44573bd49c37b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM2NzMwY2FkZDhiZTdmNjI4MGVhNjczY2Y0NDU3M2JkNDljMzdiMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-08-01T16:34:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-08-01T16:34:31Z"}, "message": "re PR target/81622 (ICE on invalid altivec code with ppc64{,le})\n\n\tPR target/81622\n\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin): For\n\t__builtin_vec_cmpne verify both arguments are compatible vectors\n\tbefore looking at TYPE_MODE on the element type.  For __builtin_vec_ld\n\tverify arg1_type is a pointer or array type.  For __builtin_vec_st,\n\tmove computation of aligned to after checking the argument types.\n\tFormatting fixes.\n\n\t* gcc.target/powerpc/pr81622.c: New test.\n\nFrom-SVN: r250785", "tree": {"sha": "3b5d3a64f03d1e23f0dfdc3e695117572dcceee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b5d3a64f03d1e23f0dfdc3e695117572dcceee9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/636730cadd8be7f6280ea673cf44573bd49c37b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/636730cadd8be7f6280ea673cf44573bd49c37b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/636730cadd8be7f6280ea673cf44573bd49c37b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/636730cadd8be7f6280ea673cf44573bd49c37b0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e1863eca8c8914cc5e05369dacdc5266cdca179", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e1863eca8c8914cc5e05369dacdc5266cdca179", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e1863eca8c8914cc5e05369dacdc5266cdca179"}], "stats": {"total": 78, "additions": 54, "deletions": 24}, "files": [{"sha": "7508c6ef8fdf986660a4225dd6bc068fcbddeb11", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/636730cadd8be7f6280ea673cf44573bd49c37b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/636730cadd8be7f6280ea673cf44573bd49c37b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=636730cadd8be7f6280ea673cf44573bd49c37b0", "patch": "@@ -1,5 +1,13 @@\n 2017-08-01  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/81622\n+\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin): For\n+\t__builtin_vec_cmpne verify both arguments are compatible vectors\n+\tbefore looking at TYPE_MODE on the element type.  For __builtin_vec_ld\n+\tverify arg1_type is a pointer or array type.  For __builtin_vec_st,\n+\tmove computation of aligned to after checking the argument types.\n+\tFormatting fixes.\n+\n \tPR target/80846\n \t* config/rs6000/vsx.md (vextract_fp_from_shorth,\n \tvextract_fp_from_shortl): Add element mode after mode in gen_vec_init*"}, {"sha": "9c14f95ed0454be448ccdc969303fc23c96b3907", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/636730cadd8be7f6280ea673cf44573bd49c37b0/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/636730cadd8be7f6280ea673cf44573bd49c37b0/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=636730cadd8be7f6280ea673cf44573bd49c37b0", "patch": "@@ -5872,6 +5872,12 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n       tree arg1 = (*arglist)[1];\n       tree arg1_type = TREE_TYPE (arg1);\n \n+      /* Both arguments must be vectors and the types must be compatible.  */\n+      if (TREE_CODE (arg0_type) != VECTOR_TYPE)\n+\tgoto bad;\n+      if (!lang_hooks.types_compatible_p (arg0_type, arg1_type))\n+\tgoto bad;\n+\n       /* Power9 instructions provide the most efficient implementation of\n \t ALTIVEC_BUILTIN_VEC_CMPNE if the mode is not DImode or TImode\n \t or SFmode or DFmode.  */\n@@ -5881,12 +5887,6 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t  || (TYPE_MODE (TREE_TYPE (arg0_type)) == SFmode)\n \t  || (TYPE_MODE (TREE_TYPE (arg0_type)) == DFmode))\n \t{\n-\t  /* Both arguments must be vectors and the types must be compatible.  */\n-\t  if (TREE_CODE (arg0_type) != VECTOR_TYPE)\n-\t    goto bad;\n-\t  if (!lang_hooks.types_compatible_p (arg0_type, arg1_type))\n-\t    goto bad;\n-\n \t  switch (TYPE_MODE (TREE_TYPE (arg0_type)))\n \t    {\n \t      /* vec_cmpneq (va, vb) == vec_nor (vec_cmpeq (va, vb),\n@@ -5951,8 +5951,8 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t __int128) and the types must be compatible.  */\n       if (TREE_CODE (arg0_type) != VECTOR_TYPE)\n \tgoto bad;\n-      if (!lang_hooks.types_compatible_p (arg0_type, arg1_type) ||\n-\t  !lang_hooks.types_compatible_p (arg1_type, arg2_type))\n+      if (!lang_hooks.types_compatible_p (arg0_type, arg1_type)\n+\t  || !lang_hooks.types_compatible_p (arg1_type, arg2_type))\n \tgoto bad;\n \n       switch (TYPE_MODE (TREE_TYPE (arg0_type)))\n@@ -6034,8 +6034,8 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t __int128) and the types must be compatible.  */\n       if (TREE_CODE (arg0_type) != VECTOR_TYPE)\n \tgoto bad;\n-      if (!lang_hooks.types_compatible_p (arg0_type, arg1_type) ||\n-\t  !lang_hooks.types_compatible_p (arg1_type, arg2_type))\n+      if (!lang_hooks.types_compatible_p (arg0_type, arg1_type)\n+\t  || !lang_hooks.types_compatible_p (arg1_type, arg2_type))\n \tgoto bad;\n \n       switch (TYPE_MODE (TREE_TYPE (arg0_type)))\n@@ -6484,6 +6484,9 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \n       /* Strip qualifiers like \"const\" from the pointer arg.  */\n       tree arg1_type = TREE_TYPE (arg1);\n+      if (!POINTER_TYPE_P (arg1_type) && TREE_CODE (arg1_type) != ARRAY_TYPE)\n+\tgoto bad;\n+\n       tree inner_type = TREE_TYPE (arg1_type);\n       if (TYPE_QUALS (TREE_TYPE (arg1_type)) != 0)\n \t{\n@@ -6572,11 +6575,6 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t      arg2 = build1 (ADDR_EXPR, arg2_type, arg2_elt0);\n \t    }\n \n-\t  tree addr = fold_build2_loc (loc, POINTER_PLUS_EXPR, arg2_type,\n-\t\t\t\t       arg2, arg1);\n-\t  tree aligned = fold_build2_loc (loc, BIT_AND_EXPR, arg2_type, addr,\n-\t\t\t\t\t  build_int_cst (arg2_type, -16));\n-\n \t  /* Find the built-in to make sure a compatible one exists; if not\n \t     we fall back to default handling to get the error message.  */\n \t  for (desc = altivec_overloaded_builtins;\n@@ -6589,6 +6587,12 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t\t&& rs6000_builtin_type_compatible (TREE_TYPE (arg2),\n \t\t\t\t\t\t   desc->op3))\n \t      {\n+\t\ttree addr = fold_build2_loc (loc, POINTER_PLUS_EXPR, arg2_type,\n+\t\t\t\t\t     arg2, arg1);\n+\t\ttree aligned\n+\t\t  = fold_build2_loc (loc, BIT_AND_EXPR, arg2_type,\n+\t\t\t\t     addr, build_int_cst (arg2_type, -16));\n+\n \t\ttree arg0_type = TREE_TYPE (arg0);\n \t\tif (TYPE_MODE (arg0_type) == V2DImode)\n \t\t  /* Type-based aliasing analysis thinks vector long\n@@ -6714,8 +6718,8 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t    overloaded_code = P6_BUILTIN_CMPB_32;\n \t  }\n \n-\twhile (desc->code && desc->code == fcode &&\n-\t       desc->overloaded_code != overloaded_code)\n+\twhile (desc->code && desc->code == fcode\n+\t       && desc->overloaded_code != overloaded_code)\n \t  desc++;\n \n \tif (desc->code && (desc->code == fcode)\n@@ -6761,8 +6765,8 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t    else\n \t      overloaded_code = P9V_BUILTIN_VSIEDP;\n \t  }\n-\twhile (desc->code && desc->code == fcode &&\n-\t       desc->overloaded_code != overloaded_code)\n+\twhile (desc->code && desc->code == fcode\n+\t       && desc->overloaded_code != overloaded_code)\n \t  desc++;\n \tif (desc->code && (desc->code == fcode)\n \t    && rs6000_builtin_type_compatible (types[0], desc->op1)\n@@ -6804,9 +6808,9 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n       }\n   }\n  bad:\n-    {\n-      const char *name = rs6000_overloaded_builtin_name (fcode);\n-      error (\"invalid parameter combination for AltiVec intrinsic %s\", name);\n-      return error_mark_node;\n-    }\n+  {\n+    const char *name = rs6000_overloaded_builtin_name (fcode);\n+    error (\"invalid parameter combination for AltiVec intrinsic %s\", name);\n+    return error_mark_node;\n+  }\n }"}, {"sha": "1449652b82485b05b6df1d17335c8ab1c61196fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/636730cadd8be7f6280ea673cf44573bd49c37b0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/636730cadd8be7f6280ea673cf44573bd49c37b0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=636730cadd8be7f6280ea673cf44573bd49c37b0", "patch": "@@ -1,3 +1,8 @@\n+2017-08-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/81622\n+\t* gcc.target/powerpc/pr81622.c: New test.\n+\n 2017-08-01  Steve Ellcey  <sellcey@cavium.com>\n \n \tPR tree-optimization/80925"}, {"sha": "fa13ac98a2bdbdd9bb7aedb6d10471b15150d9e0", "filename": "gcc/testsuite/gcc.target/powerpc/pr81622.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/636730cadd8be7f6280ea673cf44573bd49c37b0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr81622.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/636730cadd8be7f6280ea673cf44573bd49c37b0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr81622.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr81622.c?ref=636730cadd8be7f6280ea673cf44573bd49c37b0", "patch": "@@ -0,0 +1,13 @@\n+/* PR target/81622 */\n+/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n+\n+void\n+foo (void)\n+{\n+  __builtin_vec_ld (1, 2);\t/* { dg-error \"invalid parameter combination\" } */\n+  __builtin_vec_cmpne (1, 2);\t/* { dg-error \"invalid parameter combination\" } */\n+  __builtin_vec_st (1, 0, 5);\t/* { dg-error \"invalid parameter combination\" } */\n+}"}]}