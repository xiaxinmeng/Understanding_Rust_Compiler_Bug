{"sha": "64a5dc569892ecc32258baebfacdf1c1268ce9bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRhNWRjNTY5ODkyZWNjMzIyNThiYWViZmFjZGYxYzEyNjhjZTliYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2012-06-27T21:30:57Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2012-06-27T21:30:57Z"}, "message": "alpha: Cleaup builtins and folding\n\n        * config/alpha/alpha.c (alpha_dimode_u): New.\n        (alpha_init_builtins): Initialize it, and use it.\n        (alpha_fold_builtin_cmpbge): Use alpha_dimode_u.\n        (alpha_fold_builtin_zapnot, alpha_fold_builtin_insxx): Likewise.\n        (alpha_fold_vector_minmax, alpha_fold_builtin_perr): Likewise.\n        (alpha_fold_builtin_pklb, alpha_fold_builtin_pkwb): Likewise.\n        (alpha_fold_builtin_unpkbl, alpha_fold_builtin_unpkbw): Likewise.\n        (alpha_fold_builtin_cttz, alpha_fold_builtin_ctlz): Likewise.\n        (alpha_fold_builtin_ctpop): Likewise.\n        (alpha_fold_builtin_umulh): Remove.\n        (alpha_fold_builtin): Use MULT_HIGHPART_EXPR for UMULH; fix\n        typo in MAX_ARGS check.\n\nFrom-SVN: r189028", "tree": {"sha": "64a3e0f2d24a6f97ce721fd9c63ef199b61bfa03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64a3e0f2d24a6f97ce721fd9c63ef199b61bfa03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64a5dc569892ecc32258baebfacdf1c1268ce9bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a5dc569892ecc32258baebfacdf1c1268ce9bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64a5dc569892ecc32258baebfacdf1c1268ce9bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a5dc569892ecc32258baebfacdf1c1268ce9bc/comments", "author": null, "committer": null, "parents": [{"sha": "98449720f700d3460a6756f48c4870f3e9a3a6fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98449720f700d3460a6756f48c4870f3e9a3a6fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98449720f700d3460a6756f48c4870f3e9a3a6fd"}], "stats": {"total": 114, "additions": 46, "deletions": 68}, "files": [{"sha": "09c2d568b514aac699735afdadbd7cb717bb4312", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5dc569892ecc32258baebfacdf1c1268ce9bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5dc569892ecc32258baebfacdf1c1268ce9bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=64a5dc569892ecc32258baebfacdf1c1268ce9bc", "patch": "@@ -1,3 +1,18 @@\n+2012-06-27  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c (alpha_dimode_u): New.\n+\t(alpha_init_builtins): Initialize it, and use it.\n+\t(alpha_fold_builtin_cmpbge): Use alpha_dimode_u.\n+\t(alpha_fold_builtin_zapnot, alpha_fold_builtin_insxx): Likewise.\n+\t(alpha_fold_vector_minmax, alpha_fold_builtin_perr): Likewise.\n+\t(alpha_fold_builtin_pklb, alpha_fold_builtin_pkwb): Likewise.\n+\t(alpha_fold_builtin_unpkbl, alpha_fold_builtin_unpkbw): Likewise.\n+\t(alpha_fold_builtin_cttz, alpha_fold_builtin_ctlz): Likewise.\n+\t(alpha_fold_builtin_ctpop): Likewise.\n+\t(alpha_fold_builtin_umulh): Remove.\n+\t(alpha_fold_builtin): Use MULT_HIGHPART_EXPR for UMULH; fix\n+\ttypo in MAX_ARGS check.\n+\n 2012-06-27  Richard Henderson  <rth@redhat.com>\n \n \t* tree.def (MULT_HIGHPART_EXPR): New."}, {"sha": "5617ea313ded7c9e03002e6a4fcb9794dc7d0dde", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 31, "deletions": 68, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a5dc569892ecc32258baebfacdf1c1268ce9bc/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a5dc569892ecc32258baebfacdf1c1268ce9bc/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=64a5dc569892ecc32258baebfacdf1c1268ce9bc", "patch": "@@ -6461,6 +6461,7 @@ static struct alpha_builtin_def const two_arg_builtins[] = {\n   { \"__builtin_alpha_perr\",\tALPHA_BUILTIN_PERR,\tMASK_MAX, true }\n };\n \n+static GTY(()) tree alpha_dimode_u;\n static GTY(()) tree alpha_v8qi_u;\n static GTY(()) tree alpha_v8qi_s;\n static GTY(()) tree alpha_v4hi_u;\n@@ -6514,25 +6515,23 @@ alpha_add_builtins (const struct alpha_builtin_def *p, size_t count,\n static void\n alpha_init_builtins (void)\n {\n-  tree dimode_integer_type_node;\n   tree ftype;\n \n-  dimode_integer_type_node = lang_hooks.types.type_for_mode (DImode, 0);\n+  alpha_dimode_u = lang_hooks.types.type_for_mode (DImode, 1);\n+  alpha_v8qi_u = build_vector_type (unsigned_intQI_type_node, 8);\n+  alpha_v8qi_s = build_vector_type (intQI_type_node, 8);\n+  alpha_v4hi_u = build_vector_type (unsigned_intHI_type_node, 4);\n+  alpha_v4hi_s = build_vector_type (intHI_type_node, 4);\n \n-  ftype = build_function_type_list (dimode_integer_type_node, NULL_TREE);\n-  alpha_add_builtins (zero_arg_builtins, ARRAY_SIZE (zero_arg_builtins),\n-\t\t      ftype);\n+  ftype = build_function_type_list (alpha_dimode_u, NULL_TREE);\n+  alpha_add_builtins (zero_arg_builtins, ARRAY_SIZE (zero_arg_builtins), ftype);\n \n-  ftype = build_function_type_list (dimode_integer_type_node,\n-\t\t\t\t    dimode_integer_type_node, NULL_TREE);\n-  alpha_add_builtins (one_arg_builtins, ARRAY_SIZE (one_arg_builtins),\n-\t\t      ftype);\n+  ftype = build_function_type_list (alpha_dimode_u, alpha_dimode_u, NULL_TREE);\n+  alpha_add_builtins (one_arg_builtins, ARRAY_SIZE (one_arg_builtins), ftype);\n \n-  ftype = build_function_type_list (dimode_integer_type_node,\n-\t\t\t\t    dimode_integer_type_node,\n-\t\t\t\t    dimode_integer_type_node, NULL_TREE);\n-  alpha_add_builtins (two_arg_builtins, ARRAY_SIZE (two_arg_builtins),\n-\t\t      ftype);\n+  ftype = build_function_type_list (alpha_dimode_u, alpha_dimode_u,\n+\t\t\t\t    alpha_dimode_u, NULL_TREE);\n+  alpha_add_builtins (two_arg_builtins, ARRAY_SIZE (two_arg_builtins), ftype);\n \n   ftype = build_function_type_list (ptr_type_node, NULL_TREE);\n   alpha_builtin_function (\"__builtin_thread_pointer\", ftype,\n@@ -6558,11 +6557,6 @@ alpha_init_builtins (void)\n \n       vms_patch_builtins ();\n     }\n-\n-  alpha_v8qi_u = build_vector_type (unsigned_intQI_type_node, 8);\n-  alpha_v8qi_s = build_vector_type (intQI_type_node, 8);\n-  alpha_v4hi_u = build_vector_type (unsigned_intHI_type_node, 4);\n-  alpha_v4hi_s = build_vector_type (intHI_type_node, 4);\n }\n \n /* Expand an expression EXP that calls a built-in function,\n@@ -6675,10 +6669,10 @@ alpha_fold_builtin_cmpbge (unsigned HOST_WIDE_INT opint[], long op_const)\n \t  if (c0 >= c1)\n \t    val |= 1 << i;\n \t}\n-      return build_int_cst (long_integer_type_node, val);\n+      return build_int_cst (alpha_dimode_u, val);\n     }\n   else if (op_const == 2 && opint[1] == 0)\n-    return build_int_cst (long_integer_type_node, 0xff);\n+    return build_int_cst (alpha_dimode_u, 0xff);\n   return NULL;\n }\n \n@@ -6705,14 +6699,14 @@ alpha_fold_builtin_zapnot (tree *op, unsigned HOST_WIDE_INT opint[],\n \t  mask |= (unsigned HOST_WIDE_INT)0xff << (i * 8);\n \n       if (op_const & 1)\n-\treturn build_int_cst (long_integer_type_node, opint[0] & mask);\n+\treturn build_int_cst (alpha_dimode_u, opint[0] & mask);\n \n       if (op)\n-\treturn fold_build2 (BIT_AND_EXPR, long_integer_type_node, op[0],\n-\t\t\t    build_int_cst (long_integer_type_node, mask));\n+\treturn fold_build2 (BIT_AND_EXPR, alpha_dimode_u, op[0],\n+\t\t\t    build_int_cst (alpha_dimode_u, mask));\n     }\n   else if ((op_const & 1) && opint[0] == 0)\n-    return build_int_cst (long_integer_type_node, 0);\n+    return build_int_cst (alpha_dimode_u, 0);\n   return NULL;\n }\n \n@@ -6762,7 +6756,7 @@ alpha_fold_builtin_insxx (tree op[], unsigned HOST_WIDE_INT opint[],\n \t\t\t  bool is_high)\n {\n   if ((op_const & 1) && opint[0] == 0)\n-    return build_int_cst (long_integer_type_node, 0);\n+    return build_int_cst (alpha_dimode_u, 0);\n \n   if (op_const & 2)\n     {\n@@ -6820,44 +6814,13 @@ alpha_fold_builtin_mskxx (tree op[], unsigned HOST_WIDE_INT opint[],\n   return alpha_fold_builtin_zapnot (op, opint, op_const);\n }\n \n-static tree\n-alpha_fold_builtin_umulh (unsigned HOST_WIDE_INT opint[], long op_const)\n-{\n-  switch (op_const)\n-    {\n-    case 3:\n-      {\n-\tunsigned HOST_WIDE_INT l;\n-\tHOST_WIDE_INT h;\n-\n-\tmul_double (opint[0], 0, opint[1], 0, &l, &h);\n-\n-#if HOST_BITS_PER_WIDE_INT > 64\n-# error fixme\n-#endif\n-\n-\treturn build_int_cst (long_integer_type_node, h);\n-      }\n-\n-    case 1:\n-      opint[1] = opint[0];\n-      /* FALLTHRU */\n-    case 2:\n-      /* Note that (X*1) >> 64 == 0.  */\n-      if (opint[1] == 0 || opint[1] == 1)\n-\treturn build_int_cst (long_integer_type_node, 0);\n-      break;\n-    }\n-  return NULL;\n-}\n-\n static tree\n alpha_fold_vector_minmax (enum tree_code code, tree op[], tree vtype)\n {\n   tree op0 = fold_convert (vtype, op[0]);\n   tree op1 = fold_convert (vtype, op[1]);\n   tree val = fold_build2 (code, vtype, op0, op1);\n-  return fold_build1 (VIEW_CONVERT_EXPR, long_integer_type_node, val);\n+  return fold_build1 (VIEW_CONVERT_EXPR, alpha_dimode_u, val);\n }\n \n static tree\n@@ -6879,7 +6842,7 @@ alpha_fold_builtin_perr (unsigned HOST_WIDE_INT opint[], long op_const)\n \ttemp += b - a;\n     }\n \n-  return build_int_cst (long_integer_type_node, temp);\n+  return build_int_cst (alpha_dimode_u, temp);\n }\n \n static tree\n@@ -6893,7 +6856,7 @@ alpha_fold_builtin_pklb (unsigned HOST_WIDE_INT opint[], long op_const)\n   temp = opint[0] & 0xff;\n   temp |= (opint[0] >> 24) & 0xff00;\n \n-  return build_int_cst (long_integer_type_node, temp);\n+  return build_int_cst (alpha_dimode_u, temp);\n }\n \n static tree\n@@ -6909,7 +6872,7 @@ alpha_fold_builtin_pkwb (unsigned HOST_WIDE_INT opint[], long op_const)\n   temp |= (opint[0] >> 16) & 0xff0000;\n   temp |= (opint[0] >> 24) & 0xff000000;\n \n-  return build_int_cst (long_integer_type_node, temp);\n+  return build_int_cst (alpha_dimode_u, temp);\n }\n \n static tree\n@@ -6923,7 +6886,7 @@ alpha_fold_builtin_unpkbl (unsigned HOST_WIDE_INT opint[], long op_const)\n   temp = opint[0] & 0xff;\n   temp |= (opint[0] & 0xff00) << 24;\n \n-  return build_int_cst (long_integer_type_node, temp);\n+  return build_int_cst (alpha_dimode_u, temp);\n }\n \n static tree\n@@ -6939,7 +6902,7 @@ alpha_fold_builtin_unpkbw (unsigned HOST_WIDE_INT opint[], long op_const)\n   temp |= (opint[0] & 0x00ff0000) << 16;\n   temp |= (opint[0] & 0xff000000) << 24;\n \n-  return build_int_cst (long_integer_type_node, temp);\n+  return build_int_cst (alpha_dimode_u, temp);\n }\n \n static tree\n@@ -6955,7 +6918,7 @@ alpha_fold_builtin_cttz (unsigned HOST_WIDE_INT opint[], long op_const)\n   else\n     temp = exact_log2 (opint[0] & -opint[0]);\n \n-  return build_int_cst (long_integer_type_node, temp);\n+  return build_int_cst (alpha_dimode_u, temp);\n }\n \n static tree\n@@ -6971,7 +6934,7 @@ alpha_fold_builtin_ctlz (unsigned HOST_WIDE_INT opint[], long op_const)\n   else\n     temp = 64 - floor_log2 (opint[0]) - 1;\n \n-  return build_int_cst (long_integer_type_node, temp);\n+  return build_int_cst (alpha_dimode_u, temp);\n }\n \n static tree\n@@ -6987,7 +6950,7 @@ alpha_fold_builtin_ctpop (unsigned HOST_WIDE_INT opint[], long op_const)\n   while (op)\n     temp++, op &= op - 1;\n \n-  return build_int_cst (long_integer_type_node, temp);\n+  return build_int_cst (alpha_dimode_u, temp);\n }\n \n /* Fold one of our builtin functions.  */\n@@ -7000,7 +6963,7 @@ alpha_fold_builtin (tree fndecl, int n_args, tree *op,\n   long op_const = 0;\n   int i;\n \n-  if (n_args >= MAX_ARGS)\n+  if (n_args > MAX_ARGS)\n     return NULL;\n \n   for (i = 0; i < n_args; i++)\n@@ -7068,7 +7031,7 @@ alpha_fold_builtin (tree fndecl, int n_args, tree *op,\n       return alpha_fold_builtin_mskxx (op, opint, op_const, 0xff, true);\n \n     case ALPHA_BUILTIN_UMULH:\n-      return alpha_fold_builtin_umulh (opint, op_const);\n+      return fold_build2 (MULT_HIGHPART_EXPR, alpha_dimode_u, op[0], op[1]);\n \n     case ALPHA_BUILTIN_ZAP:\n       opint[1] ^= 0xff;"}]}