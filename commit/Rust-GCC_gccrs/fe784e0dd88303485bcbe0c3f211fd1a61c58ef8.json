{"sha": "fe784e0dd88303485bcbe0c3f211fd1a61c58ef8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU3ODRlMGRkODgzMDM0ODViY2JlMGMzZjIxMWZkMWE2MWM1OGVmOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-03-24T16:15:22Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-03-24T16:15:22Z"}, "message": "fold-const.c (fold_ternary_loc): Preserve the location (if any) of the argument in calls to fold_truth_not_expr.\n\n\t* fold-const.c (fold_ternary_loc): Preserve the location (if any) of\n\tthe argument in calls to fold_truth_not_expr.\n\nFrom-SVN: r171403", "tree": {"sha": "18d2c0f369112d771f572e44ac8bc4f35041a55c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18d2c0f369112d771f572e44ac8bc4f35041a55c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe784e0dd88303485bcbe0c3f211fd1a61c58ef8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe784e0dd88303485bcbe0c3f211fd1a61c58ef8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe784e0dd88303485bcbe0c3f211fd1a61c58ef8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe784e0dd88303485bcbe0c3f211fd1a61c58ef8/comments", "author": null, "committer": null, "parents": [{"sha": "e3c4580e400367dfceec3e4c0539b43fcb4ed340", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3c4580e400367dfceec3e4c0539b43fcb4ed340", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3c4580e400367dfceec3e4c0539b43fcb4ed340"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "20181f70c1247432593a88e51854d9165c8f2ebb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe784e0dd88303485bcbe0c3f211fd1a61c58ef8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe784e0dd88303485bcbe0c3f211fd1a61c58ef8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe784e0dd88303485bcbe0c3f211fd1a61c58ef8", "patch": "@@ -1,3 +1,8 @@\n+2011-03-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* fold-const.c (fold_ternary_loc): Preserve the location (if any) of\n+\tthe argument in calls to fold_truth_not_expr.\n+\n 2011-03-24  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* tree.c (record_node_allocation_statistics): New function."}, {"sha": "32b7a276bbc2509a549bd9783baa0d07f159917d", "filename": "gcc/fold-const.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe784e0dd88303485bcbe0c3f211fd1a61c58ef8/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe784e0dd88303485bcbe0c3f211fd1a61c58ef8/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=fe784e0dd88303485bcbe0c3f211fd1a61c58ef8", "patch": "@@ -13327,7 +13327,10 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \t\t\t\t\t     TREE_OPERAND (arg0, 1))\n \t  && !HONOR_SIGNED_ZEROS (TYPE_MODE (TREE_TYPE (op2))))\n \t{\n-\t  tem = fold_truth_not_expr (loc, arg0);\n+\t  location_t loc0 = EXPR_LOCATION (arg0);\n+\t  if (loc0 == UNKNOWN_LOCATION)\n+\t    loc0 = loc;\n+\t  tem = fold_truth_not_expr (loc0, arg0);\n \t  if (tem && COMPARISON_CLASS_P (tem))\n \t    {\n \t      tem = fold_cond_expr_with_comparison (loc, type, tem, op2, op1);\n@@ -13341,10 +13344,13 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n       if (truth_value_p (TREE_CODE (arg0))\n \t  && tree_swap_operands_p (op1, op2, false))\n \t{\n+\t  location_t loc0 = EXPR_LOCATION (arg0);\n+\t  if (loc0 == UNKNOWN_LOCATION)\n+\t    loc0 = loc;\n \t  /* See if this can be inverted.  If it can't, possibly because\n \t     it was a floating-point inequality comparison, don't do\n \t     anything.  */\n-\t  tem = fold_truth_not_expr (loc, arg0);\n+\t  tem = fold_truth_not_expr (loc0, arg0);\n \t  if (tem)\n \t    return fold_build3_loc (loc, code, type, tem, op2, op1);\n \t}\n@@ -13489,8 +13495,11 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \t  && truth_value_p (TREE_CODE (arg0))\n \t  && truth_value_p (TREE_CODE (arg1)))\n \t{\n+\t  location_t loc0 = EXPR_LOCATION (arg0);\n+\t  if (loc0 == UNKNOWN_LOCATION)\n+\t    loc0 = loc;\n \t  /* Only perform transformation if ARG0 is easily inverted.  */\n-\t  tem = fold_truth_not_expr (loc, arg0);\n+\t  tem = fold_truth_not_expr (loc0, arg0);\n \t  if (tem)\n \t    return fold_build2_loc (loc, TRUTH_ORIF_EXPR, type,\n \t\t\t\tfold_convert_loc (loc, type, tem),\n@@ -13502,8 +13511,11 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \t  && truth_value_p (TREE_CODE (arg0))\n \t  && truth_value_p (TREE_CODE (op2)))\n \t{\n+\t  location_t loc0 = EXPR_LOCATION (arg0);\n+\t  if (loc0 == UNKNOWN_LOCATION)\n+\t    loc0 = loc;\n \t  /* Only perform transformation if ARG0 is easily inverted.  */\n-\t  tem = fold_truth_not_expr (loc, arg0);\n+\t  tem = fold_truth_not_expr (loc0, arg0);\n \t  if (tem)\n \t    return fold_build2_loc (loc, TRUTH_ANDIF_EXPR, type,\n \t\t\t\tfold_convert_loc (loc, type, tem),"}]}