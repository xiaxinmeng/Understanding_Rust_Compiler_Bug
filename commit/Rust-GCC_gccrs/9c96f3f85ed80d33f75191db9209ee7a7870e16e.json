{"sha": "9c96f3f85ed80d33f75191db9209ee7a7870e16e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM5NmYzZjg1ZWQ4MGQzM2Y3NTE5MWRiOTIwOWVlN2E3ODcwZTE2ZQ==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2001-02-22T14:22:02Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2001-02-22T14:22:02Z"}, "message": "optimize.c: Include toplev.h for note_deferral_of_defined_inline_function prototype.\n\n\t* optimize.c: Include toplev.h for\n\tnote_deferral_of_defined_inline_function prototype.\n\nFrom-SVN: r39981", "tree": {"sha": "470774dc6bcf55fbad5b9a86c3e83e3e6850649d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/470774dc6bcf55fbad5b9a86c3e83e3e6850649d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c96f3f85ed80d33f75191db9209ee7a7870e16e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c96f3f85ed80d33f75191db9209ee7a7870e16e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c96f3f85ed80d33f75191db9209ee7a7870e16e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c96f3f85ed80d33f75191db9209ee7a7870e16e/comments", "author": null, "committer": null, "parents": [{"sha": "b3bae5e2bf8b2f06d687adb32740f6258b5e3b36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3bae5e2bf8b2f06d687adb32740f6258b5e3b36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3bae5e2bf8b2f06d687adb32740f6258b5e3b36"}], "stats": {"total": 102, "additions": 54, "deletions": 48}, "files": [{"sha": "36f24a464f7f02fafe1a6212011a0e20e0a8c43e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c96f3f85ed80d33f75191db9209ee7a7870e16e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c96f3f85ed80d33f75191db9209ee7a7870e16e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9c96f3f85ed80d33f75191db9209ee7a7870e16e", "patch": "@@ -1,3 +1,8 @@\n+2001-02-22  Andreas Jaeger  <aj@suse.de>\n+\n+\t* optimize.c: Include toplev.h for\n+\tnote_deferral_of_defined_inline_function prototype.\n+\n 2001-02-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* cp-tree.h (struct lang_decl_inlined_fns): New.\n@@ -56,7 +61,7 @@\n \tappropriate.\n \t(start_function): Set current_vtt_parm.\n \t(lang_mark_tree): Don't mark vtt_parm.\n-\t* decl2.c (maybe_retrofit_in_chrg): Do add the VTT parm to \n+\t* decl2.c (maybe_retrofit_in_chrg): Do add the VTT parm to\n \tDECL_ARGUMENTS.  Set DECL_HAS_VTT_PARM_P.\n \t* class.c (build_clone): Maybe remove the VTT parm.\n \t* optimize.c (maybe_clone_body): Set up the VTT parm.\n@@ -111,7 +116,7 @@\n \n \t* decl2.c (build_artificial_parm): Set TREE_READONLY.\n \n-\t* decl.c (bad_specifiers): Allow throw specs on things with \n+\t* decl.c (bad_specifiers): Allow throw specs on things with\n \tpointer-to-function or -member-function type.\n \t* init.c (build_default_init): Don't use a CONSTRUCTOR to initialize\n \ta pmf.\n@@ -220,7 +225,7 @@\n \tnon-virtual destructor.\n \t* init.c (build_delete): Explicitly call `operator delete' when\n \tdeleting an object with a non-virtual destructor.\n-\t\n+\n 2001-02-13  Jason Merrill  <jason@redhat.com>\n \n \t* lang-specs.h: Add more __EXCEPTIONS.\n@@ -251,7 +256,7 @@\n \t* decl2.c (flag_vtable_thunks): Always set it to 1.\n \t(flag_new_abi): Likewise.\n \t* lang-specs.h: Remove conditional on ENABLE_NEW_GXX_ABI.\n-\t\n+\n \t* Makefile.in (g++spec.o): Fix typo.\n \n 2001-02-09  Jason Merrill  <jason@redhat.com>\n@@ -275,7 +280,7 @@\n \t* typeck2.c (friendly_abort): Don't say anything if we have\n \tearlier errors or sorries.\n \n-\t* decl.c (check_tag_decl): Notice attempts to redefine bool and \n+\t* decl.c (check_tag_decl): Notice attempts to redefine bool and\n \twchar_t.  Ignore if in_system_header.\n \n \t* decl.c (maybe_push_cleanup_level): New fn...\n@@ -285,7 +290,7 @@\n \n 2001-02-07  Mark Mitchell  <mark@codesourcery.com>\n \n-\t* lang-specs.h: Use CPLUSPLUS_CPP_SPEC for the preprocessor \n+\t* lang-specs.h: Use CPLUSPLUS_CPP_SPEC for the preprocessor\n \tspec.\n \n 2001-02-06  Nathan Sidwell  <nathan@codesourcery.com>\n@@ -405,7 +410,7 @@ Sun Feb  4 15:52:44 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t(typeinfo_in_lib_p): New function.\n \t(synthesize_tinfo_var): Use it.\n \t(create_real_tinfo_var): Likewise.\n-\t\n+\n 2001-02-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* decl.c (push_class_binding): Use context_for_name_lookup instead\n@@ -622,7 +627,7 @@ Sun Feb  4 15:52:44 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n         * cvt.c (ocp_convert): Handle vector type conversion\n         * typeck2.c (digest_init): Handle vector type initializations\n-\t\t\n+\n 2001-01-16  Phil Edwards  <pme@sources.redhat.com>\n \n \t* g++spec.c:  Don't add libraries needlessly if -fsyntax-only\n@@ -791,7 +796,7 @@ Sun Feb  4 15:52:44 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \tDECL_INITIALIZED_IN_CLASS_P.\n \t(instantiate_class_template): Likewise.\n \t(instantiate_decl): Check DECL_INITIALIZED_IN_CLASS_P.\n-\t\n+\n \t* class.c (finish_struct): Constify saved_filename.\n \n 2001-01-08  Nathan Sidwell  <nathan@codesourcery.com>\n@@ -809,14 +814,14 @@ Sun Feb  4 15:52:44 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \tDon't set TREE_VALUE on the class_shadowed list.\n \n 2001-01-07  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n- \n-\t* decl2.c (acceptable_java_type): Allow references too. \n+\n+\t* decl2.c (acceptable_java_type): Allow references too.\n \t* init.c (build_java_class_ref): When using the new ABI, search\n \t`class$' and have it mangled with `mangle_decl.'\n \t* mangle.c (write_java_integer_type_codes): New function.\n \t(write_builtin_type): Detect and mangle Java integer and real\n \ttypes.\n- \n+\n 2001-01-07  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl2.c (grokfield): Don't accept `asm' specifiers for\n@@ -873,7 +878,7 @@ Sun Feb  4 15:52:44 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t(implicitly_declare_fn): Generate the exception spec too.\n \t* search.c (check_final_overrider): Check artificial functions\n \ttoo.\n-\t* typeck2.c (merge_exception_specifiers): New function.\t\n+\t* typeck2.c (merge_exception_specifiers): New function.\n \n 2001-01-03  Jason Merrill  <jason@redhat.com>\n \n@@ -913,7 +918,7 @@ Sun Feb  4 15:52:44 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t(tsubst_template_parms): Use size_int, not build_int_2.\n \t(tsubst): Likewise.\n \t* rtti.c (get_vmi_pseudo_type_info): Likewise.\n-\t\n+\n 2001-01-02  Richard Henderson  <rth@redhat.com>\n \n \t* parse.y (asm): Set ASM_INPUT_P.\n@@ -931,7 +936,7 @@ Sun Feb  4 15:52:44 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t* typeck.c (build_unary_op): Restore old &a.f diagnostic code.\n \t* cvt.c (convert_to_void): Use type_unknown_p.\n \n-\t* typeck.c (strip_all_pointer_quals): Also strip quals from \n+\t* typeck.c (strip_all_pointer_quals): Also strip quals from\n \tpointer-to-member types.\n \n \t* Make-lang.in (cp/TAGS): Use --no-globals.  Ignore parse.c, and treat"}, {"sha": "d1bfd0dd3c56bd9cdb90c5fd2503ebe18d28d89f", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 34, "deletions": 33, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c96f3f85ed80d33f75191db9209ee7a7870e16e/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c96f3f85ed80d33f75191db9209ee7a7870e16e/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=9c96f3f85ed80d33f75191db9209ee7a7870e16e", "patch": "@@ -13,7 +13,7 @@ GNU CC is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n General Public License for more details.\n-   \n+\n You should have received a copy of the GNU General Public License\n along with GNU CC; see the file COPYING.  If not, write to the Free\n Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n@@ -27,6 +27,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"insn-config.h\"\n #include \"input.h\"\n #include \"integrate.h\"\n+#include \"toplev.h\"\n #include \"varray.h\"\n #include \"ggc.h\"\n \n@@ -38,7 +39,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n      function-local static constants just like global static\n      constants; the back-end already knows not to output them if they\n      are not needed.\n-     \n+\n    o Provide heuristics to clamp inlining of recursive template\n      calls?  */\n \n@@ -104,9 +105,9 @@ remap_decl (decl, id)\n   if (!n)\n     {\n       tree t;\n-      \n+\n       /* Make a copy of the variable or label.  */\n-      t = copy_decl_for_inlining (decl, fn, \n+      t = copy_decl_for_inlining (decl, fn,\n \t\t\t\t  VARRAY_TREE (id->fns, 0));\n \n       /* The decl T could be a dynamic array or other variable size type,\n@@ -118,19 +119,19 @@ remap_decl (decl, id)\n \t  && TYPE_DOMAIN (TREE_TYPE (t)))\n \t{\n \t  TREE_TYPE (t) = copy_node (TREE_TYPE (t));\n-\t  TYPE_DOMAIN (TREE_TYPE (t)) \n+\t  TYPE_DOMAIN (TREE_TYPE (t))\n \t    = copy_node (TYPE_DOMAIN (TREE_TYPE (t)));\n \t  walk_tree (&TYPE_MAX_VALUE (TYPE_DOMAIN (TREE_TYPE (t))),\n \t\t     copy_body_r, id, NULL);\n \t}\n \n       /* Remember it, so that if we encounter this local entity\n \t again we can reuse this copy.  */\n-      n = splay_tree_insert (id->decl_map, \n-\t\t\t     (splay_tree_key) decl, \n+      n = splay_tree_insert (id->decl_map,\n+\t\t\t     (splay_tree_key) decl,\n \t\t\t     (splay_tree_value) t);\n     }\n- \n+\n   return (tree) n->value;\n }\n \n@@ -174,8 +175,8 @@ remap_block (scope_stmt, decls, id)\n       SCOPE_STMT_BLOCK (scope_stmt) = new_block;\n \n       /* Remap its variables.  */\n-      for (old_var = decls ? decls : BLOCK_VARS (old_block); \n-\t   old_var; \n+      for (old_var = decls ? decls : BLOCK_VARS (old_block);\n+\t   old_var;\n \t   old_var = TREE_CHAIN (old_var))\n \t{\n \t  tree new_var;\n@@ -227,7 +228,7 @@ remap_block (scope_stmt, decls, id)\n       splay_tree_node n;\n \n       /* Find this block in the table of remapped things.  */\n-      n = splay_tree_lookup (id->decl_map, \n+      n = splay_tree_lookup (id->decl_map,\n \t\t\t     (splay_tree_key) SCOPE_STMT_BLOCK (scope_stmt));\n       my_friendly_assert (n != NULL, 19991203);\n       SCOPE_STMT_BLOCK (scope_stmt) = (tree) n->value;\n@@ -293,11 +294,11 @@ copy_body_r (tp, walk_subtrees, data)\n       TREE_CHAIN (goto_stmt) = TREE_CHAIN (return_stmt);\n \n       /* If we're returning something, just turn that into an\n-\t assignment into the equivalent of the original \n+\t assignment into the equivalent of the original\n \t RESULT_DECL.  */\n       if (RETURN_EXPR (return_stmt))\n \t{\n-\t  *tp = build_stmt (EXPR_STMT, \n+\t  *tp = build_stmt (EXPR_STMT,\n \t\t\t    RETURN_EXPR (return_stmt));\n \t  STMT_IS_FULL_EXPR_P (*tp) = 1;\n \t  /* And then jump to the end of the function.  */\n@@ -322,11 +323,11 @@ copy_body_r (tp, walk_subtrees, data)\n       STRIP_TYPE_NOPS (new_decl);\n       *tp = new_decl;\n     }\n-  else if (nonstatic_local_decl_p (*tp) \n+  else if (nonstatic_local_decl_p (*tp)\n \t   && DECL_CONTEXT (*tp) != VARRAY_TREE (id->fns, 0))\n     my_friendly_abort (0);\n   else if (TREE_CODE (*tp) == SAVE_EXPR)\n-    remap_save_expr (tp, id->decl_map, VARRAY_TREE (id->fns, 0), \n+    remap_save_expr (tp, id->decl_map, VARRAY_TREE (id->fns, 0),\n \t\t     walk_subtrees);\n   else if (TREE_CODE (*tp) == UNSAVE_EXPR)\n     /* UNSAVE_EXPRs should not be generated until expansion time.  */\n@@ -416,19 +417,19 @@ initialize_inlined_parameters (id, args, fn)\n       tree init_stmt;\n       tree var;\n       tree value;\n-      \n+\n       /* Find the initializer.  */\n       value = TREE_VALUE (a);\n       /* If the parameter is never assigned to, we may not need to\n \t create a new variable here at all.  Instead, we may be able\n \t to just use the argument value.  */\n-      if (TREE_READONLY (p) \n+      if (TREE_READONLY (p)\n \t  && !TREE_ADDRESSABLE (p)\n \t  && !TREE_SIDE_EFFECTS (value))\n \t{\n \t  /* Simplify the value, if possible.  */\n \t  value = fold (decl_constant_value (value));\n-\t  \n+\n \t  /* We can't risk substituting complex expressions.  They\n \t     might contain variables that will be assigned to later.\n \t     Theoretically, we could check the expression to see if\n@@ -448,13 +449,13 @@ initialize_inlined_parameters (id, args, fn)\n \t      continue;\n \t    }\n \t}\n-\t\n+\n       /* Make an equivalent VAR_DECL.  */\n       var = copy_decl_for_inlining (p, fn, VARRAY_TREE (id->fns, 0));\n       /* Register the VAR_DECL as the equivalent for the PARM_DECL;\n \t that way, when the PARM_DECL is encountered, it will be\n \t automatically replaced by the VAR_DECL.  */\n-      splay_tree_insert (id->decl_map, \n+      splay_tree_insert (id->decl_map,\n \t\t\t (splay_tree_key) p,\n \t\t\t (splay_tree_value) var);\n \n@@ -526,8 +527,8 @@ declare_return_variable (id, use_stmt)\n       my_friendly_assert (VARRAY_ACTIVE_SIZE (id->target_exprs) != 0,\n \t\t\t  20000430);\n       var = TREE_OPERAND (VARRAY_TOP_TREE (id->target_exprs), 0);\n-      my_friendly_assert \n-\t(same_type_ignoring_top_level_qualifiers_p (TREE_TYPE (var), \n+      my_friendly_assert\n+\t(same_type_ignoring_top_level_qualifiers_p (TREE_TYPE (var),\n \t\t\t\t\t\t    TREE_TYPE (result)),\n \t 20000430);\n     }\n@@ -538,7 +539,7 @@ declare_return_variable (id, use_stmt)\n   /* Register the VAR_DECL as the equivalent for the RESULT_DECL; that\n      way, when the RESULT_DECL is encountered, it will be\n      automatically replaced by the VAR_DECL.  */\n-  splay_tree_insert (id->decl_map, \n+  splay_tree_insert (id->decl_map,\n \t\t     (splay_tree_key) result,\n \t\t     (splay_tree_value) var);\n \n@@ -594,8 +595,8 @@ inlinable_function_p (fn, id)\n \n   /* We can inline a template instantiation only if it's fully\n      instantiated.  */\n-  if (inlinable \n-      && DECL_TEMPLATE_INFO (fn) \n+  if (inlinable\n+      && DECL_TEMPLATE_INFO (fn)\n       && TI_PENDING_TEMPLATE_FLAG (DECL_TEMPLATE_INFO (fn)))\n     {\n       fn = instantiate_decl (fn, /*defer_ok=*/0);\n@@ -652,7 +653,7 @@ expand_call_inline (tp, walk_subtrees, data)\n \n   /* See what we've got.  */\n   id = (inline_data *) data;\n-  t = *tp;  \n+  t = *tp;\n \n   /* Recurse, but letting recursive invocations know that we are\n      inside the body of a TARGET_EXPR.  */\n@@ -775,9 +776,9 @@ expand_call_inline (tp, walk_subtrees, data)\n \n   /* Declare the return variable for the function.  */\n   STMT_EXPR_STMT (expr)\n-    = chainon (STMT_EXPR_STMT (expr), \n+    = chainon (STMT_EXPR_STMT (expr),\n \t       declare_return_variable (id, &use_stmt));\n-  \n+\n   /* After we've initialized the parameters, we insert the body of the\n      function itself.  */\n   inlined_body = &STMT_EXPR_STMT (expr);\n@@ -788,7 +789,7 @@ expand_call_inline (tp, walk_subtrees, data)\n   /* Close the block for the parameters.  */\n   scope_stmt = build_stmt (SCOPE_STMT, DECL_INITIAL (fn));\n   SCOPE_NO_CLEANUPS_P (scope_stmt) = 1;\n-  my_friendly_assert (DECL_INITIAL (fn) \n+  my_friendly_assert (DECL_INITIAL (fn)\n \t\t      && TREE_CODE (DECL_INITIAL (fn)) == BLOCK,\n \t\t      19991203);\n   remap_block (scope_stmt, NULL_TREE, id);\n@@ -799,7 +800,7 @@ expand_call_inline (tp, walk_subtrees, data)\n      before we evaluate the returned value below, because that evalulation\n      may cause RTL to be generated.  */\n   STMT_EXPR_STMT (expr)\n-    = chainon (STMT_EXPR_STMT (expr), \n+    = chainon (STMT_EXPR_STMT (expr),\n \t       build_stmt (LABEL_STMT, id->ret_label));\n \n   /* Finally, mention the returned value so that the value of the\n@@ -952,8 +953,8 @@ int\n calls_setjmp_p (fn)\n      tree fn;\n {\n-  return walk_tree_without_duplicates (&DECL_SAVED_TREE (fn), \n-\t\t\t\t       calls_setjmp_r, \n+  return walk_tree_without_duplicates (&DECL_SAVED_TREE (fn),\n+\t\t\t\t       calls_setjmp_r,\n \t\t\t\t       NULL) != NULL_TREE;\n }\n \n@@ -1080,7 +1081,7 @@ maybe_clone_body (fn)\n       expand_body (clone);\n       pop_from_top_level ();\n     }\n-  \n+\n   /* We don't need to process the original function any further.  */\n   return 1;\n }"}]}