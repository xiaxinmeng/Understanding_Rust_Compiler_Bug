{"sha": "0df5fa66b668795d65cdc45c8a5c8969fd56d1b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRmNWZhNjZiNjY4Nzk1ZDY1Y2RjNDVjOGE1Yzg5NjlmZDU2ZDFiOQ==", "commit": {"author": {"name": "Nikhil Benesch", "email": "nikhil.benesch@gmail.com", "date": "2020-12-14T07:37:11Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-12-14T07:39:32Z"}, "message": "-fgo-dump-spec: skip typedefs that match struct tag\n\ngcc/:\n\t* godump.c (go_output_typedef): Suppress typedefs whose name\n\tmatches the tag of the underlying struct, union, or enum.\n\tOutput declarations for enums that do not appear in typedefs.\ngcc/testsuite:\n\t* gcc.misc-tests/godump-1.c: Add test cases.", "tree": {"sha": "3ba2b5eef812246e4289bfb94e8df29ed27831c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ba2b5eef812246e4289bfb94e8df29ed27831c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0df5fa66b668795d65cdc45c8a5c8969fd56d1b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0df5fa66b668795d65cdc45c8a5c8969fd56d1b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0df5fa66b668795d65cdc45c8a5c8969fd56d1b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0df5fa66b668795d65cdc45c8a5c8969fd56d1b9/comments", "author": {"login": "benesch", "id": 882976, "node_id": "MDQ6VXNlcjg4Mjk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/882976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benesch", "html_url": "https://github.com/benesch", "followers_url": "https://api.github.com/users/benesch/followers", "following_url": "https://api.github.com/users/benesch/following{/other_user}", "gists_url": "https://api.github.com/users/benesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/benesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benesch/subscriptions", "organizations_url": "https://api.github.com/users/benesch/orgs", "repos_url": "https://api.github.com/users/benesch/repos", "events_url": "https://api.github.com/users/benesch/events{/privacy}", "received_events_url": "https://api.github.com/users/benesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e56e4d9566ce99707befa88bf4d11c74ec45c10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e56e4d9566ce99707befa88bf4d11c74ec45c10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e56e4d9566ce99707befa88bf4d11c74ec45c10"}], "stats": {"total": 39, "additions": 37, "deletions": 2}, "files": [{"sha": "ff3a4a9c52ce930694e7466fc7ff5a7295babc0f", "filename": "gcc/godump.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df5fa66b668795d65cdc45c8a5c8969fd56d1b9/gcc%2Fgodump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df5fa66b668795d65cdc45c8a5c8969fd56d1b9/gcc%2Fgodump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgodump.c?ref=0df5fa66b668795d65cdc45c8a5c8969fd56d1b9", "patch": "@@ -1155,15 +1155,25 @@ go_output_typedef (class godump_container *container, tree decl)\n     {\n       void **slot;\n       const char *type;\n+      tree original_type;\n \n       type = IDENTIFIER_POINTER (DECL_NAME (decl));\n+      original_type = DECL_ORIGINAL_TYPE (decl);\n+\n+      /* Suppress typedefs where the type name matches the underlying\n+\t struct/union/enum tag. This way we'll emit the struct definition\n+\t instead of an invalid recursive type.  */\n+      if (TYPE_IDENTIFIER (original_type) != NULL\n+\t  && IDENTIFIER_POINTER (TYPE_IDENTIFIER (original_type)) == type)\n+\treturn;\n+\n       /* If type defined already, skip.  */\n       slot = htab_find_slot (container->type_hash, type, INSERT);\n       if (*slot != NULL)\n \treturn;\n       *slot = CONST_CAST (void *, (const void *) type);\n \n-      if (!go_format_type (container, DECL_ORIGINAL_TYPE (decl), true, false,\n+      if (!go_format_type (container, original_type, true, false,\n \t\t\t   NULL, false))\n \t{\n \t  fprintf (go_dump_file, \"// \");\n@@ -1187,7 +1197,9 @@ go_output_typedef (class godump_container *container, tree decl)\n \n       container->decls_seen.add (decl);\n     }\n-  else if (RECORD_OR_UNION_TYPE_P (TREE_TYPE (decl)))\n+  else if ((RECORD_OR_UNION_TYPE_P (TREE_TYPE (decl))\n+\t    || TREE_CODE (TREE_TYPE (decl)) == ENUMERAL_TYPE)\n+\t   && TYPE_NAME (TREE_TYPE (decl)) != NULL)\n     {\n        void **slot;\n        const char *type;"}, {"sha": "d37ab0b5af4c41c62fbb66bc361f7b306a8699d8", "filename": "gcc/testsuite/gcc.misc-tests/godump-1.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df5fa66b668795d65cdc45c8a5c8969fd56d1b9/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgodump-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df5fa66b668795d65cdc45c8a5c8969fd56d1b9/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgodump-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgodump-1.c?ref=0df5fa66b668795d65cdc45c8a5c8969fd56d1b9", "patch": "@@ -396,6 +396,15 @@ typedef enum { ET1, ET2 } et_t;\n /* { dg-final { scan-file godump-1.out \"(?n)^const _ET1 = 0$\" } } */\n /* { dg-final { scan-file godump-1.out \"(?n)^const _ET2 = 1$\" } } */\n \n+typedef enum e_t_idem_v1 { ETIV1 } e_t_idem_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _e_t_idem_v1 u?int\\[0-9\\]*$\" } } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^const _ETIV1 = 0$\" } } */\n+\n+typedef enum e_t_idem_v2 e_t_idem_v2;\n+enum e_t_idem_v2 { ETIV2 };\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _e_t_idem_v2 u?int\\[0-9\\]*$\" } } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^const _ETIV2 = 0$\" } } */\n+\n enum { ETV1, ETV2 } et_v1;\n /* { dg-final { scan-file godump-1.out \"(?n)^var _et_v1 u?int\\[0-9\\]*$\" } } */\n /* { dg-final { scan-file godump-1.out \"(?n)^const _ETV1 = 0$\" } } */\n@@ -477,6 +486,13 @@ struct s_fwd v_fwd;\n struct s_fwd { };\n /* { dg-final { scan-file godump-1.out \"(?n)^type _s_fwd struct \\{ \\}$\" } } */\n \n+typedef struct s_t_idem_v1 {} s_t_idem_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _s_t_idem_v1 struct \\{ \\}$\" } } */\n+\n+typedef struct s_t_idem_v2 s_t_idem_v2;\n+struct s_t_idem_v2 { };\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _s_t_idem_v2 struct \\{ \\}$\" } } */\n+\n /*** nested structs ***/\n typedef struct { struct { uint8_t ca[3]; } s; uint32_t i; } tsn;\n /* { dg-final { scan-file godump-1.out \"(?n)^type _tsn struct \\{ s struct \\{ ca \\\\\\[2\\\\+1\\\\\\]uint8; \\}; i uint32; \\}$\" } } */\n@@ -756,6 +772,13 @@ typedef union { } tue;\n union { } ue;\n /* { dg-final { scan-file godump-1.out \"(?n)^var _ue struct \\{ \\}$\" } } */\n \n+typedef union u_t_idem_v1 { } u_t_idem_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _u_t_idem_v1 struct \\{ \\}$\" } } */\n+\n+typedef union u_t_idem_v2 u_t_idem_v2;\n+union u_t_idem_v2 { };\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _u_t_idem_v2 struct \\{ \\}$\" } } */\n+\n typedef union { uint8_t c; uint64_t l; } tu1;\n /* { dg-final { scan-file godump-1.out \"(?n)^type _tu1 struct \\{ c uint8; Godump_0_pad \\\\\\[.\\\\\\]byte; Godump_1_align \\\\\\[0\\\\\\]u?int64; \\}$\" } } */\n "}]}