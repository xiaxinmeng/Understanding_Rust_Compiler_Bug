{"sha": "ca1babb8e83558039ea2372b7acca5e5e524c06c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ExYmFiYjhlODM1NTgwMzllYTIzNzJiN2FjY2E1ZTVlNTI0YzA2Yw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-11-21T11:53:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-11-21T11:53:20Z"}, "message": "tree-ssa-forwprop.c (simplify_vce): New function.\n\n2013-11-21  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-forwprop.c (simplify_vce): New function.\n\t(ssa_forward_propagate_and_combine): Call it.\n\nFrom-SVN: r205211", "tree": {"sha": "0df94c02f15cfaf32285ab92b4f2b2f8db6736b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0df94c02f15cfaf32285ab92b4f2b2f8db6736b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca1babb8e83558039ea2372b7acca5e5e524c06c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1babb8e83558039ea2372b7acca5e5e524c06c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca1babb8e83558039ea2372b7acca5e5e524c06c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1babb8e83558039ea2372b7acca5e5e524c06c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "427a12dafc6541d7922bef44fc84024353de984d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/427a12dafc6541d7922bef44fc84024353de984d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/427a12dafc6541d7922bef44fc84024353de984d"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "f9c4cc564fe952a279381f824c1732d044a6acf6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1babb8e83558039ea2372b7acca5e5e524c06c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1babb8e83558039ea2372b7acca5e5e524c06c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca1babb8e83558039ea2372b7acca5e5e524c06c", "patch": "@@ -1,3 +1,8 @@\n+2013-11-21  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-forwprop.c (simplify_vce): New function.\n+\t(ssa_forward_propagate_and_combine): Call it.\n+\n 2013-11-21  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-loop-manip.c (vect_build_loop_niters,"}, {"sha": "0c9a79f6092fcb5d2c2cf7a28c9651d63dd5daa2", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1babb8e83558039ea2372b7acca5e5e524c06c/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1babb8e83558039ea2372b7acca5e5e524c06c/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=ca1babb8e83558039ea2372b7acca5e5e524c06c", "patch": "@@ -2994,6 +2994,69 @@ combine_conversions (gimple_stmt_iterator *gsi)\n   return 0;\n }\n \n+/* Combine VIEW_CONVERT_EXPRs with their defining statement.  */\n+\n+static bool\n+simplify_vce (gimple_stmt_iterator *gsi)\n+{\n+  gimple stmt = gsi_stmt (*gsi);\n+  tree type = TREE_TYPE (gimple_assign_lhs (stmt));\n+\n+  /* Drop useless VIEW_CONVERT_EXPRs.  */\n+  tree op = TREE_OPERAND (gimple_assign_rhs1 (stmt), 0);\n+  if (useless_type_conversion_p (type, TREE_TYPE (op)))\n+    {\n+      gimple_assign_set_rhs1 (stmt, op);\n+      update_stmt (stmt);\n+      return true;\n+    }\n+\n+  if (TREE_CODE (op) != SSA_NAME)\n+    return false;\n+\n+  gimple def_stmt = SSA_NAME_DEF_STMT (op);\n+  if (!is_gimple_assign (def_stmt))\n+    return false;\n+\n+  tree def_op = gimple_assign_rhs1 (def_stmt);\n+  switch (gimple_assign_rhs_code (def_stmt))\n+    {\n+    CASE_CONVERT:\n+      /* Strip integral conversions that do not change the precision.  */\n+      if ((INTEGRAL_TYPE_P (TREE_TYPE (op))\n+\t   || POINTER_TYPE_P (TREE_TYPE (op)))\n+\t  && (INTEGRAL_TYPE_P (TREE_TYPE (def_op))\n+\t      || POINTER_TYPE_P (TREE_TYPE (def_op)))\n+\t  && (TYPE_PRECISION (TREE_TYPE (op))\n+\t      == TYPE_PRECISION (TREE_TYPE (def_op))))\n+\t{\n+\t  TREE_OPERAND (gimple_assign_rhs1 (stmt), 0) = def_op;\n+\t  update_stmt (stmt);\n+\t  return true;\n+\t}\n+      break;\n+\n+    case VIEW_CONVERT_EXPR:\n+      /* Series of VIEW_CONVERT_EXPRs on register operands can\n+\t be contracted.  */\n+      if (TREE_CODE (TREE_OPERAND (def_op, 0)) == SSA_NAME)\n+\t{\n+\t  if (useless_type_conversion_p (type,\n+\t\t\t\t\t TREE_TYPE (TREE_OPERAND (def_op, 0))))\n+\t    gimple_assign_set_rhs1 (stmt, TREE_OPERAND (def_op, 0));\n+\t  else\n+\t    TREE_OPERAND (gimple_assign_rhs1 (stmt), 0)\n+\t\t= TREE_OPERAND (def_op, 0);\n+\t  update_stmt (stmt);\n+\t  return true;\n+\t}\n+\n+    default:;\n+    }\n+\n+  return false;\n+}\n+\n /* Combine an element access with a shuffle.  Returns true if there were\n    any changes made, else it returns false.  */\n  \n@@ -3491,6 +3554,8 @@ ssa_forward_propagate_and_combine (void)\n \t\t      \n \t\t    changed = did_something != 0;\n \t\t  }\n+\t\telse if (code == VIEW_CONVERT_EXPR)\n+\t\t  changed = simplify_vce (&gsi);\n \t\telse if (code == VEC_PERM_EXPR)\n \t\t  {\n \t\t    int did_something = simplify_permutation (&gsi);"}]}