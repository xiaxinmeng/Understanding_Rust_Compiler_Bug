{"sha": "3c954213eb65db35937c2415761827f10f457828", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M5NTQyMTNlYjY1ZGIzNTkzN2MyNDE1NzYxODI3ZjEwZjQ1NzgyOA==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2015-01-30T17:47:44Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2015-01-30T17:47:44Z"}, "message": "re PR target/64617 (ICE: Max. number of generated reload insns per insn is achieved (90) with -ftree-vectorize -mavx512bw -march=slm)\n\n2015-01-30  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR target/64617\n\t* lra-constraints.c (prohibited_class_reg_set_mode_p): New\n\tfunction.\n\t(process_alt_operands): Use it.\n\t(curr_insn_transform): Check the optional reload pseudo class is\n\tok for the mode.\n\n2015-01-30  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR target/64617\n\t* gcc.target/i386/pr64617.c: New test.\n\nFrom-SVN: r220294", "tree": {"sha": "e64c22793a483107ced6784af5070048c977e952", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e64c22793a483107ced6784af5070048c977e952"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c954213eb65db35937c2415761827f10f457828", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c954213eb65db35937c2415761827f10f457828", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c954213eb65db35937c2415761827f10f457828", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c954213eb65db35937c2415761827f10f457828/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "40fecdd62f7d293a214dd71b81de5e0f1099bba7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40fecdd62f7d293a214dd71b81de5e0f1099bba7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40fecdd62f7d293a214dd71b81de5e0f1099bba7"}], "stats": {"total": 102, "additions": 83, "deletions": 19}, "files": [{"sha": "59ca8d5f49bc4eac1f07ea535e91cb9d918bc700", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c954213eb65db35937c2415761827f10f457828/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c954213eb65db35937c2415761827f10f457828/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c954213eb65db35937c2415761827f10f457828", "patch": "@@ -1,3 +1,12 @@\n+2015-01-30  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/64617\n+\t* lra-constraints.c (prohibited_class_reg_set_mode_p): New\n+\tfunction.\n+\t(process_alt_operands): Use it.\n+\t(curr_insn_transform): Check the optional reload pseudo class is\n+\tok for the mode.\n+\n 2015-01-30  Joseph Myers  <joseph@codesourcery.com>\n \n \t* diagnostic.c (fatal_error (const char *, ...)): Remove function."}, {"sha": "762889ce13ce12646faa1afb59a40d351d79d281", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 32, "deletions": 19, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c954213eb65db35937c2415761827f10f457828/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c954213eb65db35937c2415761827f10f457828/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=3c954213eb65db35937c2415761827f10f457828", "patch": "@@ -1637,6 +1637,22 @@ reg_in_class_p (rtx reg, enum reg_class cl)\n   return in_class_p (reg, cl, NULL);\n }\n \n+/* Return true if SET of RCLASS contains no hard regs which can be\n+   used in MODE.  */\n+static bool\n+prohibited_class_reg_set_mode_p (enum reg_class rclass,\n+\t\t\t\t HARD_REG_SET &set,\n+\t\t\t\t enum machine_mode mode)\n+{\n+  HARD_REG_SET temp;\n+  \n+  lra_assert (hard_reg_set_subset_p (set, reg_class_contents[rclass]));\n+  COPY_HARD_REG_SET (temp, set);\n+  AND_COMPL_HARD_REG_SET (temp, lra_no_alloc_regs);\n+  return (hard_reg_set_subset_p\n+\t  (temp, ira_prohibited_class_mode_regs[rclass][mode]));\n+}\n+\n /* Major function to choose the current insn alternative and what\n    operands should be reloaded and how.\t If ONLY_ALTERNATIVE is not\n    negative we should consider only this alternative.  Return false if\n@@ -2311,28 +2327,20 @@ process_alt_operands (int only_alternative)\n \t\t     not hold the mode value.  */\n \t\t  && ! HARD_REGNO_MODE_OK (ira_class_hard_regs\n \t\t\t\t\t   [this_alternative][0],\n-\t\t\t\t\t   GET_MODE (*curr_id->operand_loc[nop])))\n-\t\t{\n-\t\t  HARD_REG_SET temp;\n-\t\t  \n-\t\t  COPY_HARD_REG_SET (temp, this_alternative_set);\n-\t\t  AND_COMPL_HARD_REG_SET (temp, lra_no_alloc_regs);\n+\t\t\t\t\t   GET_MODE (*curr_id->operand_loc[nop]))\n \t\t  /* The above condition is not enough as the first\n \t\t     reg in ira_class_hard_regs can be not aligned for\n \t\t     multi-words mode values.  */\n-\t\t  if (hard_reg_set_subset_p (temp,\n-\t\t\t\t\t     ira_prohibited_class_mode_regs\n-\t\t\t\t\t     [this_alternative]\n-\t\t\t\t\t     [GET_MODE (*curr_id->operand_loc[nop])]))\n-\t\t    {\n-\t\t      if (lra_dump_file != NULL)\n-\t\t\tfprintf\n-\t\t\t  (lra_dump_file,\n-\t\t\t   \"            alt=%d: reload pseudo for op %d \"\n-\t\t\t   \" can not hold the mode value -- refuse\\n\",\n-\t\t\t   nalt, nop);\n-\t\t      goto fail;\n-\t\t    }\n+\t\t  && (prohibited_class_reg_set_mode_p\n+\t\t      (this_alternative, this_alternative_set,\n+\t\t       GET_MODE (*curr_id->operand_loc[nop]))))\n+\t\t{\n+\t\t  if (lra_dump_file != NULL)\n+\t\t    fprintf (lra_dump_file,\n+\t\t\t     \"            alt=%d: reload pseudo for op %d \"\n+\t\t\t     \" can not hold the mode value -- refuse\\n\",\n+\t\t\t     nalt, nop);\n+\t\t  goto fail;\n \t\t}\n \n \t      /* Check strong discouragement of reload of non-constant\n@@ -3732,6 +3740,11 @@ curr_insn_transform (bool check_only_p)\n \t      && regno < new_regno_start\n \t      && ! lra_former_scratch_p (regno)\n \t      && reg_renumber[regno] < 0\n+\t      /* Check that the optional reload pseudo will be able to\n+\t\t hold given mode value.  */\n+\t      && ! (prohibited_class_reg_set_mode_p\n+\t\t    (goal_alt[i], reg_class_contents[goal_alt[i]],\n+\t\t     PSEUDO_REGNO_MODE (regno)))\n \t      && (curr_insn_set == NULL_RTX\n \t\t  || !((REG_P (SET_SRC (curr_insn_set))\n \t\t\t|| MEM_P (SET_SRC (curr_insn_set))"}, {"sha": "715ee2cac7da834102ab77f3348bdbcc53ba8c5e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c954213eb65db35937c2415761827f10f457828/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c954213eb65db35937c2415761827f10f457828/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3c954213eb65db35937c2415761827f10f457828", "patch": "@@ -1,3 +1,8 @@\n+2015-01-30  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/64617\n+\t* gcc.target/i386/pr64617.c: New test.\n+\n 2015-01-30  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/15184"}, {"sha": "6877d6ac01c79b9eb660dd4d7e48ac779a995d45", "filename": "gcc/testsuite/gcc.target/i386/pr64617.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c954213eb65db35937c2415761827f10f457828/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr64617.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c954213eb65db35937c2415761827f10f457828/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr64617.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr64617.c?ref=3c954213eb65db35937c2415761827f10f457828", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -ftree-vectorize -mavx512bw -march=slm\" } */\n+\n+unsigned short out2[128 * 8], b0, b1, b2, b3, b4, b5, b6, b7, b8;\n+\n+void\n+foo (unsigned short a0, unsigned short a1, unsigned short a2,\n+     unsigned short a3, unsigned short a4, unsigned short a5,\n+     unsigned short a6, unsigned short a7, unsigned short a8)\n+{\n+  int i;\n+  for (i = 0; i < 128; i++)\n+    {\n+      out2[i * 4] = a0 + 8;\n+    }\n+  for (i = 0; i < 128; i++)\n+    {\n+      b0 = a0 + 8;\n+      b1 = a1 + 7;\n+      b2 = a2 + 6;\n+      b3 = a3 + 5;\n+      b4 = a4 + 4;\n+      b5 = a5 + 3;\n+      b6 = a6 + 2;\n+      b7 = a7 + 1;\n+      b8 = a8 + 9;\n+\n+      out2[i * 8] = b0;\n+      out2[i * 8 + 1] = b1;\n+      out2[i * 8 + 2] = b4;\n+      out2[i * 8 + 3] = b5;\n+      out2[i * 8 + 4] = b6;\n+      out2[i * 8 + 5] = b2;\n+      out2[i * 8 + 6] = b7;\n+      out2[i * 8 + 7] = b8;\n+    }\n+}"}]}