{"sha": "f48e4da3259d52076f86aa081cece40dfda7b235", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ4ZTRkYTMyNTlkNTIwNzZmODZhYTA4MWNlY2U0MGRmZGE3YjIzNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-08-29T08:07:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-08-29T08:07:35Z"}, "message": "re PR tree-optimization/91568 (internal compiler error: in vect_schedule_slp_instance, at tree-vect-slp.c:3922)\n\n2019-08-29  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/91568\n\t* tree-vectorizer.h (_slp_tree::max_nunits): Add.\n\t(vect_update_max_nunits): Add overload for poly_uint64.\n\t* tree-vect-slp.c (vect_create_new_slp_node): Initialize it.\n\t(vect_build_slp_tree): Record max_nunits into the subtree\n\tand merge it upwards.\n\t(vect_print_slp_tree): Print max_nunits.\n\n\t* gfortran.dg/pr91568.f: New testcase.\n\nFrom-SVN: r275023", "tree": {"sha": "1614e85332b07f8e43f1bfa8746ecce55a7c2d1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1614e85332b07f8e43f1bfa8746ecce55a7c2d1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f48e4da3259d52076f86aa081cece40dfda7b235", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f48e4da3259d52076f86aa081cece40dfda7b235", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f48e4da3259d52076f86aa081cece40dfda7b235", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f48e4da3259d52076f86aa081cece40dfda7b235/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8a902edbbdb53a00209e88b6182457941ff196a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a902edbbdb53a00209e88b6182457941ff196a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a902edbbdb53a00209e88b6182457941ff196a9"}], "stats": {"total": 65, "additions": 56, "deletions": 9}, "files": [{"sha": "49ab435387b66f6399dbdd8d13459dd1902f6a18", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f48e4da3259d52076f86aa081cece40dfda7b235/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f48e4da3259d52076f86aa081cece40dfda7b235/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f48e4da3259d52076f86aa081cece40dfda7b235", "patch": "@@ -1,3 +1,13 @@\n+2019-08-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/91568\n+\t* tree-vectorizer.h (_slp_tree::max_nunits): Add.\n+\t(vect_update_max_nunits): Add overload for poly_uint64.\n+\t* tree-vect-slp.c (vect_create_new_slp_node): Initialize it.\n+\t(vect_build_slp_tree): Record max_nunits into the subtree\n+\tand merge it upwards.\n+\t(vect_print_slp_tree): Print max_nunits.\n+\n 2019-08-28  Marek Polacek  <polacek@redhat.com>\n \n \tImplement P1152R4: Deprecating some uses of volatile."}, {"sha": "3a4f36e167caadb0df7fd6f2bed79c329e31d7ec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f48e4da3259d52076f86aa081cece40dfda7b235/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f48e4da3259d52076f86aa081cece40dfda7b235/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f48e4da3259d52076f86aa081cece40dfda7b235", "patch": "@@ -1,3 +1,8 @@\n+2019-08-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/91568\n+\t* gfortran.dg/pr91568.f: New testcase.\n+\n 2019-08-28  Marek Polacek  <polacek@redhat.com>\n \n \tImplement P1152R4: Deprecating some uses of volatile."}, {"sha": "4ada559d692a77aba59b21e49d917c47a4c949dd", "filename": "gcc/testsuite/gfortran.dg/pr91568.f", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f48e4da3259d52076f86aa081cece40dfda7b235/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91568.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f48e4da3259d52076f86aa081cece40dfda7b235/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91568.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91568.f?ref=f48e4da3259d52076f86aa081cece40dfda7b235", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! { dg-options \"-Ofast\" }\n+      subroutine h3dall(z,hvec,hder,nterms)\n+      complex *16 hvec(0:1),hder(0:1)\n+      complex *16 z,zinv,ztmp/1.0/\n+      zinv=1.0/z\n+      do i=1,nterms\n+         ztmp=zinv*i\n+         hder(i)=hvec(i-1)-ztmp*hvec(i)\n+      enddo\n+      end"}, {"sha": "9b86b67734ad3e3506e9cee6a532b68decf24ae6", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f48e4da3259d52076f86aa081cece40dfda7b235/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f48e4da3259d52076f86aa081cece40dfda7b235/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=f48e4da3259d52076f86aa081cece40dfda7b235", "patch": "@@ -129,6 +129,7 @@ vect_create_new_slp_node (vec<stmt_vec_info> scalar_stmts)\n   SLP_TREE_TWO_OPERATORS (node) = false;\n   SLP_TREE_DEF_TYPE (node) = vect_internal_def;\n   node->refcnt = 1;\n+  node->max_nunits = 1;\n \n   unsigned i;\n   FOR_EACH_VEC_ELT (scalar_stmts, i, stmt_info)\n@@ -1067,14 +1068,22 @@ vect_build_slp_tree (vec_info *vinfo,\n \tdump_printf_loc (MSG_NOTE, vect_location, \"re-using %sSLP tree %p\\n\",\n \t\t\t *leader ? \"\" : \"failed \", *leader);\n       if (*leader)\n-\t(*leader)->refcnt++;\n+\t{\n+\t  (*leader)->refcnt++;\n+\t  vect_update_max_nunits (max_nunits, (*leader)->max_nunits);\n+\t}\n       return *leader;\n     }\n+  poly_uint64 this_max_nunits = 1;\n   slp_tree res = vect_build_slp_tree_2 (vinfo, stmts, group_size, max_nunits,\n \t\t\t\t\tmatches, npermutes, tree_size, bst_map);\n-  /* Keep a reference for the bst_map use.  */\n   if (res)\n-    res->refcnt++;\n+    {\n+      res->max_nunits = this_max_nunits;\n+      vect_update_max_nunits (max_nunits, this_max_nunits);\n+      /* Keep a reference for the bst_map use.  */\n+      res->refcnt++;\n+    }\n   bst_map->put (stmts.copy (), res);\n   return res;\n }\n@@ -1473,9 +1482,10 @@ vect_print_slp_tree (dump_flags_t dump_kind, dump_location_t loc,\n \n   dump_metadata_t metadata (dump_kind, loc.get_impl_location ());\n   dump_user_location_t user_loc = loc.get_user_location ();\n-  dump_printf_loc (metadata, user_loc, \"node%s %p\\n\",\n+  dump_printf_loc (metadata, user_loc, \"node%s %p (max_nunits=%u)\\n\",\n \t\t   SLP_TREE_DEF_TYPE (node) != vect_internal_def\n-\t\t   ? \" (external)\" : \"\", node);\n+\t\t   ? \" (external)\" : \"\", node,\n+\t\t   estimated_poly_value (node->max_nunits));\n   FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (node), i, stmt_info)\n     dump_printf_loc (metadata, user_loc, \"\\tstmt %d %G\", i, stmt_info->stmt);\n   if (SLP_TREE_CHILDREN (node).is_empty ())"}, {"sha": "05ad1c6862b151333375aae0f000d6f869f05833", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f48e4da3259d52076f86aa081cece40dfda7b235/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f48e4da3259d52076f86aa081cece40dfda7b235/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=f48e4da3259d52076f86aa081cece40dfda7b235", "patch": "@@ -132,6 +132,9 @@ struct _slp_tree {\n   unsigned int vec_stmts_size;\n   /* Reference count in the SLP graph.  */\n   unsigned int refcnt;\n+  /* The maximum number of vector elements for the subtree rooted\n+     at this node.  */\n+  poly_uint64 max_nunits;\n   /* Whether the scalar computations use two different operators.  */\n   bool two_operators;\n   /* The DEF type of this node.  */\n@@ -1375,19 +1378,27 @@ vect_get_num_copies (loop_vec_info loop_vinfo, tree vectype)\n }\n \n /* Update maximum unit count *MAX_NUNITS so that it accounts for\n-   the number of units in vector type VECTYPE.  *MAX_NUNITS can be 1\n-   if we haven't yet recorded any vector types.  */\n+   NUNITS.  *MAX_NUNITS can be 1 if we haven't yet recorded anything.  */\n \n static inline void\n-vect_update_max_nunits (poly_uint64 *max_nunits, tree vectype)\n+vect_update_max_nunits (poly_uint64 *max_nunits, poly_uint64 nunits)\n {\n   /* All unit counts have the form current_vector_size * X for some\n      rational X, so two unit sizes must have a common multiple.\n      Everything is a multiple of the initial value of 1.  */\n-  poly_uint64 nunits = TYPE_VECTOR_SUBPARTS (vectype);\n   *max_nunits = force_common_multiple (*max_nunits, nunits);\n }\n \n+/* Update maximum unit count *MAX_NUNITS so that it accounts for\n+   the number of units in vector type VECTYPE.  *MAX_NUNITS can be 1\n+   if we haven't yet recorded any vector types.  */\n+\n+static inline void\n+vect_update_max_nunits (poly_uint64 *max_nunits, tree vectype)\n+{\n+  vect_update_max_nunits (max_nunits, TYPE_VECTOR_SUBPARTS (vectype));\n+}\n+\n /* Return the vectorization factor that should be used for costing\n    purposes while vectorizing the loop described by LOOP_VINFO.\n    Pick a reasonable estimate if the vectorization factor isn't"}]}