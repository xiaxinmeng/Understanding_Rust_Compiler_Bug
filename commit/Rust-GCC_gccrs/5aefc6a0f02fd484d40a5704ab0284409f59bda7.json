{"sha": "5aefc6a0f02fd484d40a5704ab0284409f59bda7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFlZmM2YTBmMDJmZDQ4NGQ0MGE1NzA0YWIwMjg0NDA5ZjU5YmRhNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-05-19T19:14:42Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-05-19T19:14:42Z"}, "message": "tree-scalar-evolution.c (follow_ssa_edge_expr): Turn into CASE_CONVERT.\n\n\t* tree-scalar-evolution.c (follow_ssa_edge_expr) <NOP_EXPR>: Turn\n\tinto CASE_CONVERT.\n\t<PLUS_EXPR>: Strip useless type conversions instead of type nops.\n\tPropagate the type of the first operand.\n\t<ASSERT_EXPR>: Simplify.\n\t(follow_ssa_edge_in_rhs): Use gimple_expr_type to get the type.\n\tRewrite using the RHS code as discriminant.\n\t<NOP_EXPR>: Turn into CASE_CONVERT.\n\t<PLUS_EXPR>: Propagate the type of the first operand.\n\nFrom-SVN: r147716", "tree": {"sha": "a622fa5a302faf79b01e0d7a9a4b950457f506dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a622fa5a302faf79b01e0d7a9a4b950457f506dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5aefc6a0f02fd484d40a5704ab0284409f59bda7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5aefc6a0f02fd484d40a5704ab0284409f59bda7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5aefc6a0f02fd484d40a5704ab0284409f59bda7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5aefc6a0f02fd484d40a5704ab0284409f59bda7/comments", "author": null, "committer": null, "parents": [{"sha": "c8036448d18101ce03661a2e6179d07b6178b6fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8036448d18101ce03661a2e6179d07b6178b6fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8036448d18101ce03661a2e6179d07b6178b6fb"}], "stats": {"total": 142, "additions": 95, "deletions": 47}, "files": [{"sha": "569f646f67538249ba99c08c97e77f6a60281153", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aefc6a0f02fd484d40a5704ab0284409f59bda7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aefc6a0f02fd484d40a5704ab0284409f59bda7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5aefc6a0f02fd484d40a5704ab0284409f59bda7", "patch": "@@ -1,3 +1,15 @@\n+2009-05-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-scalar-evolution.c (follow_ssa_edge_expr) <NOP_EXPR>: Turn\n+\tinto CASE_CONVERT.\n+\t<PLUS_EXPR>: Strip useless type conversions instead of type nops.\n+\tPropagate the type of the first operand.\n+\t<ASSERT_EXPR>: Simplify.\n+\t(follow_ssa_edge_in_rhs): Use gimple_expr_type to get the type.\n+\tRewrite using the RHS code as discriminant.\n+\t<NOP_EXPR>: Turn into CASE_CONVERT.\n+\t<PLUS_EXPR>: Propagate the type of the first operand.\n+\n 2009-05-19  Steve Ellcey  <sje@cup.hp.com>\n \n \t* config/ia64/ia64-protos.h (ia64_dconst_0_5): New."}, {"sha": "3457351e5f5496730d485d04e94b84968aa12a80", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aefc6a0f02fd484d40a5704ab0284409f59bda7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aefc6a0f02fd484d40a5704ab0284409f59bda7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5aefc6a0f02fd484d40a5704ab0284409f59bda7", "patch": "@@ -1,3 +1,7 @@\n+2009-05-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/loop_optimization6.ad[sb]: New test.\n+\n 2009-05-19  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.c-torture/compile/20090519-1.c: New testcase."}, {"sha": "42f1717f1adeae15aef75764084b0e6b83095b64", "filename": "gcc/testsuite/gnat.dg/loop_optimization6.adb", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aefc6a0f02fd484d40a5704ab0284409f59bda7/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aefc6a0f02fd484d40a5704ab0284409f59bda7/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization6.adb?ref=5aefc6a0f02fd484d40a5704ab0284409f59bda7", "patch": "@@ -0,0 +1,25 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O -gnatp -fdump-tree-optimized\" }\n+\n+package body Loop_Optimization6 is\n+  procedure Foo is\n+  begin\n+    for I in 1 .. 1_000_000 loop\n+      A := A + 1;\n+    end loop;\n+  end Foo;\n+\n+  procedure Bar is\n+  begin\n+    for J in 1 .. 1_000 loop\n+      Foo;\n+    end loop;\n+  end Bar;\n+\n+  procedure Main is\n+  begin\n+    Bar;\n+  end;\n+end Loop_Optimization6;\n+\n+-- { dg-final { scan-tree-dump-not \"goto\" \"optimized\"} }"}, {"sha": "9b8a2670322b460e254de250b427550c4df3ba9c", "filename": "gcc/testsuite/gnat.dg/loop_optimization6.ads", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aefc6a0f02fd484d40a5704ab0284409f59bda7/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aefc6a0f02fd484d40a5704ab0284409f59bda7/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization6.ads?ref=5aefc6a0f02fd484d40a5704ab0284409f59bda7", "patch": "@@ -0,0 +1,4 @@\n+package Loop_Optimization6 is\n+  A : Integer := 0;\n+  procedure Main;\n+end Loop_Optimization6;"}, {"sha": "bac6e594d8f02ba32d961906d48c6bc90a03015c", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 50, "deletions": 47, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aefc6a0f02fd484d40a5704ab0284409f59bda7/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aefc6a0f02fd484d40a5704ab0284409f59bda7/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=5aefc6a0f02fd484d40a5704ab0284409f59bda7", "patch": "@@ -1141,11 +1141,10 @@ static t_bool\n follow_ssa_edge_expr (struct loop *loop, gimple at_stmt, tree expr, \n \t\t      gimple halting_phi, tree *evolution_of_loop, int limit)\n {\n-  t_bool res = t_false;\n-  tree rhs0, rhs1;\n-  tree type = TREE_TYPE (expr);\n-  enum tree_code code;\n-  \n+  enum tree_code code = TREE_CODE (expr);\n+  tree type = TREE_TYPE (expr), rhs0, rhs1;\n+  t_bool res;\n+\n   /* The EXPR is one of the following cases:\n      - an SSA_NAME, \n      - an INTEGER_CST,\n@@ -1154,10 +1153,10 @@ follow_ssa_edge_expr (struct loop *loop, gimple at_stmt, tree expr,\n      - a MINUS_EXPR,\n      - an ASSERT_EXPR,\n      - other cases are not yet handled.  */\n-  code = TREE_CODE (expr);\n+\n   switch (code)\n     {\n-    case NOP_EXPR:\n+    CASE_CONVERT:\n       /* This assignment is under the form \"a_1 = (cast) rhs.  */\n       res = follow_ssa_edge_expr (loop, at_stmt, TREE_OPERAND (expr, 0),\n \t\t\t\t  halting_phi, evolution_of_loop, limit);\n@@ -1168,43 +1167,42 @@ follow_ssa_edge_expr (struct loop *loop, gimple at_stmt, tree expr,\n       /* This assignment is under the form \"a_1 = 7\".  */\n       res = t_false;\n       break;\n-      \n+\n     case SSA_NAME:\n       /* This assignment is under the form: \"a_1 = b_2\".  */\n       res = follow_ssa_edge \n \t(loop, SSA_NAME_DEF_STMT (expr), halting_phi, evolution_of_loop, limit);\n       break;\n-      \n+\n     case POINTER_PLUS_EXPR:\n     case PLUS_EXPR:\n     case MINUS_EXPR:\n       /* This case is under the form \"rhs0 +- rhs1\".  */\n       rhs0 = TREE_OPERAND (expr, 0);\n       rhs1 = TREE_OPERAND (expr, 1);\n-      STRIP_TYPE_NOPS (rhs0);\n-      STRIP_TYPE_NOPS (rhs1);\n-      return follow_ssa_edge_binary (loop, at_stmt, type, rhs0, code, rhs1,\n-\t\t\t\t     halting_phi, evolution_of_loop, limit);\n+      type = TREE_TYPE (rhs0);\n+      STRIP_USELESS_TYPE_CONVERSION (rhs0);\n+      STRIP_USELESS_TYPE_CONVERSION (rhs1);\n+      res = follow_ssa_edge_binary (loop, at_stmt, type, rhs0, code, rhs1,\n+\t\t\t\t    halting_phi, evolution_of_loop, limit);\n+      break;\n \n     case ASSERT_EXPR:\n-      {\n-\t/* This assignment is of the form: \"a_1 = ASSERT_EXPR <a_2, ...>\"\n-\t   It must be handled as a copy assignment of the form a_1 = a_2.  */\n-\ttree op0 = ASSERT_EXPR_VAR (expr);\n-\tif (TREE_CODE (op0) == SSA_NAME)\n-\t  res = follow_ssa_edge (loop, SSA_NAME_DEF_STMT (op0),\n-\t\t\t\t halting_phi, evolution_of_loop, limit);\n-\telse\n-\t  res = t_false;\n-\tbreak;\n-      }\n-\n+      /* This assignment is of the form: \"a_1 = ASSERT_EXPR <a_2, ...>\"\n+\t It must be handled as a copy assignment of the form a_1 = a_2.  */\n+      rhs0 = ASSERT_EXPR_VAR (expr);\n+      if (TREE_CODE (rhs0) == SSA_NAME)\n+\tres = follow_ssa_edge (loop, SSA_NAME_DEF_STMT (rhs0),\n+\t\t\t       halting_phi, evolution_of_loop, limit);\n+      else\n+\tres = t_false;\n+      break;\n \n     default:\n       res = t_false;\n       break;\n     }\n-  \n+\n   return res;\n }\n \n@@ -1215,34 +1213,39 @@ static t_bool\n follow_ssa_edge_in_rhs (struct loop *loop, gimple stmt,\n \t\t\tgimple halting_phi, tree *evolution_of_loop, int limit)\n {\n-  tree type = TREE_TYPE (gimple_assign_lhs (stmt));\n   enum tree_code code = gimple_assign_rhs_code (stmt);\n+  tree type = gimple_expr_type (stmt), rhs1, rhs2;\n+  t_bool res;\n \n-  switch (get_gimple_rhs_class (code))\n+  switch (code)\n     {\n-    case GIMPLE_BINARY_RHS:\n-      return follow_ssa_edge_binary (loop, stmt, type,\n-\t\t\t\t     gimple_assign_rhs1 (stmt), code,\n-\t\t\t\t     gimple_assign_rhs2 (stmt),\n-\t\t\t\t     halting_phi, evolution_of_loop, limit);\n-    case GIMPLE_SINGLE_RHS:\n-      return follow_ssa_edge_expr (loop, stmt, gimple_assign_rhs1 (stmt),\n-\t\t\t\t   halting_phi, evolution_of_loop, limit);\n-    case GIMPLE_UNARY_RHS:\n-      if (code == NOP_EXPR)\n-\t{\n-\t  /* This assignment is under the form \"a_1 = (cast) rhs.  */\n-\t  t_bool res\n-\t    = follow_ssa_edge_expr (loop, stmt, gimple_assign_rhs1 (stmt),\n+    CASE_CONVERT:\n+      /* This assignment is under the form \"a_1 = (cast) rhs.  */\n+      res = follow_ssa_edge_expr (loop, stmt, gimple_assign_rhs1 (stmt),\n+\t\t\t\t  halting_phi, evolution_of_loop, limit);\n+      *evolution_of_loop = chrec_convert (type, *evolution_of_loop, stmt);\n+      break;\n+\n+    case POINTER_PLUS_EXPR:\n+    case PLUS_EXPR:\n+    case MINUS_EXPR:\n+      rhs1 = gimple_assign_rhs1 (stmt);\n+      rhs2 = gimple_assign_rhs2 (stmt);\n+      type = TREE_TYPE (rhs1);\n+      res = follow_ssa_edge_binary (loop, stmt, type, rhs1, code, rhs2,\n \t\t\t\t    halting_phi, evolution_of_loop, limit);\n-\t  *evolution_of_loop = chrec_convert (type, *evolution_of_loop, stmt);\n-\t  return res;\n-\t}\n-      /* FALLTHRU */\n+      break;\n \n     default:\n-      return t_false;\n+      if (get_gimple_rhs_class (code) == GIMPLE_SINGLE_RHS)\n+\tres = follow_ssa_edge_expr (loop, stmt, gimple_assign_rhs1 (stmt),\n+\t\t\t\t    halting_phi, evolution_of_loop, limit);\n+      else\n+\tres = t_false;\n+      break;\n     }\n+\n+  return res;\n }\n \n /* Checks whether the I-th argument of a PHI comes from a backedge.  */"}]}