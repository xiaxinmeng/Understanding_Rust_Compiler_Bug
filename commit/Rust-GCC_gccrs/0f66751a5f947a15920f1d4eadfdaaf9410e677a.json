{"sha": "0f66751a5f947a15920f1d4eadfdaaf9410e677a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY2Njc1MWE1Zjk0N2ExNTkyMGYxZDRlYWRmZGFhZjk0MTBlNjc3YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-05-05T13:31:02Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-05-05T13:31:02Z"}, "message": "openmp.c (gfc_match_omp_clauses): Restructuralize...\n\n\t* openmp.c (gfc_match_omp_clauses): Restructuralize, so that clause\n\tparsing is done in a big switch based on gfc_peek_ascii_char and\n\tindividual clauses under their first letters are sorted too.\n\nFrom-SVN: r235922", "tree": {"sha": "79d3a40b917ca5a5e9208349b5e83f95be462047", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79d3a40b917ca5a5e9208349b5e83f95be462047"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f66751a5f947a15920f1d4eadfdaaf9410e677a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f66751a5f947a15920f1d4eadfdaaf9410e677a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f66751a5f947a15920f1d4eadfdaaf9410e677a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f66751a5f947a15920f1d4eadfdaaf9410e677a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "568bac8c8ad9fc10a6f6b2ac191483585d07ffa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/568bac8c8ad9fc10a6f6b2ac191483585d07ffa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/568bac8c8ad9fc10a6f6b2ac191483585d07ffa5"}], "stats": {"total": 1245, "additions": 658, "deletions": 587}, "files": [{"sha": "950e1c331ce0619abbbdf3ee0145309c5e017d57", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f66751a5f947a15920f1d4eadfdaaf9410e677a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f66751a5f947a15920f1d4eadfdaaf9410e677a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0f66751a5f947a15920f1d4eadfdaaf9410e677a", "patch": "@@ -1,3 +1,9 @@\n+2016-05-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* openmp.c (gfc_match_omp_clauses): Restructuralize, so that clause\n+\tparsing is done in a big switch based on gfc_peek_ascii_char and\n+\tindividual clauses under their first letters are sorted too.\n+\n 2016-05-02  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* trans-types.c (gfc_build_complex_type):"}, {"sha": "1481719f6e695ecbc375a1f95813270a8467dc8d", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 652, "deletions": 587, "changes": 1239, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f66751a5f947a15920f1d4eadfdaaf9410e677a/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f66751a5f947a15920f1d4eadfdaaf9410e677a/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=0f66751a5f947a15920f1d4eadfdaaf9410e677a", "patch": "@@ -640,646 +640,711 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, uint64_t mask,\n       needs_space = false;\n       first = false;\n       gfc_gobble_whitespace ();\n-      if ((mask & OMP_CLAUSE_ASYNC) && !c->async)\n-\tif (gfc_match (\"async\") == MATCH_YES)\n-\t  {\n-\t    c->async = true;\n-\t    needs_space = false;\n-\t    if (gfc_match (\" ( %e )\", &c->async_expr) != MATCH_YES)\n-\t      {\n-\t\tc->async_expr = gfc_get_constant_expr (BT_INTEGER,\n-\t\t\t\t\t\t       gfc_default_integer_kind,\n-\t\t\t\t\t\t      &gfc_current_locus);\n-\t\tmpz_set_si (c->async_expr->value.integer, GOMP_ASYNC_NOVAL);\n-\t      }\n-\t    continue;\n-\t  }\n-      if ((mask & OMP_CLAUSE_GANG) && !c->gang)\n-\tif (gfc_match (\"gang\") == MATCH_YES)\n-\t  {\n-\t    c->gang = true;\n-\t    if (match_oacc_clause_gang(c) == MATCH_YES)\n-\t      needs_space = false;\n-\t    else\n-\t      needs_space = true;\n-\t    continue;\n-\t  }\n-      if ((mask & OMP_CLAUSE_WORKER) && !c->worker)\n-\tif (gfc_match (\"worker\") == MATCH_YES)\n-\t  {\n-\t    c->worker = true;\n-\t    if (gfc_match (\" ( num : %e )\", &c->worker_expr) == MATCH_YES\n-\t        || gfc_match (\" ( %e )\", &c->worker_expr) == MATCH_YES)\n-\t      needs_space = false;\n-\t    else\n-\t      needs_space = true;\n-\t    continue;\n-\t  }\n-      if ((mask & OMP_CLAUSE_VECTOR_LENGTH) && c->vector_length_expr == NULL\n-\t  && gfc_match (\"vector_length ( %e )\", &c->vector_length_expr)\n-\t  == MATCH_YES)\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_VECTOR) && !c->vector)\n-\tif (gfc_match (\"vector\") == MATCH_YES)\n-\t  {\n-\t    c->vector = true;\n-\t    if (gfc_match (\" ( length : %e )\", &c->vector_expr) == MATCH_YES\n-\t        || gfc_match (\" ( %e )\", &c->vector_expr) == MATCH_YES)\n-\t      needs_space = false;\n-\t    else\n-\t      needs_space = true;\n-\t    continue;\n-\t  }\n-      if ((mask & OMP_CLAUSE_IF) && c->if_expr == NULL\n-\t  && gfc_match (\"if ( %e )\", &c->if_expr) == MATCH_YES)\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_FINAL) && c->final_expr == NULL\n-\t  && gfc_match (\"final ( %e )\", &c->final_expr) == MATCH_YES)\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_NUM_THREADS) && c->num_threads == NULL\n-\t  && gfc_match (\"num_threads ( %e )\", &c->num_threads) == MATCH_YES)\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_PRIVATE)\n-\t  && gfc_match_omp_variable_list (\"private (\",\n-\t\t\t\t\t  &c->lists[OMP_LIST_PRIVATE], true)\n-\t     == MATCH_YES)\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_FIRSTPRIVATE)\n-\t  && gfc_match_omp_variable_list (\"firstprivate (\",\n-\t\t\t\t\t  &c->lists[OMP_LIST_FIRSTPRIVATE],\n-\t\t\t\t\t  true)\n-\t     == MATCH_YES)\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_LASTPRIVATE)\n-\t  && gfc_match_omp_variable_list (\"lastprivate (\",\n-\t\t\t\t\t  &c->lists[OMP_LIST_LASTPRIVATE],\n-\t\t\t\t\t  true)\n-\t     == MATCH_YES)\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_COPYPRIVATE)\n-\t  && gfc_match_omp_variable_list (\"copyprivate (\",\n-\t\t\t\t\t  &c->lists[OMP_LIST_COPYPRIVATE],\n-\t\t\t\t\t  true)\n-\t     == MATCH_YES)\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_SHARED)\n-\t  && gfc_match_omp_variable_list (\"shared (\",\n-\t\t\t\t\t  &c->lists[OMP_LIST_SHARED], true)\n-\t     == MATCH_YES)\n-\tcontinue;\n-      if (mask & OMP_CLAUSE_COPYIN)\n-\t{\n-\t  if (openacc)\n-\t    {\n-\t      if (gfc_match (\"copyin ( \") == MATCH_YES\n-\t\t  && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t\t       OMP_MAP_FORCE_TO))\n-\t\tcontinue;\n-\t    }\n-\t  else if (gfc_match_omp_variable_list (\"copyin (\",\n-\t\t\t\t\t\t&c->lists[OMP_LIST_COPYIN],\n-\t\t\t\t\t\ttrue) == MATCH_YES)\n-\t    continue;\n-\t}\n-      if ((mask & OMP_CLAUSE_NUM_GANGS) && c->num_gangs_expr == NULL\n-\t  && gfc_match (\"num_gangs ( %e )\", &c->num_gangs_expr) == MATCH_YES)\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_NUM_WORKERS) && c->num_workers_expr == NULL\n-\t  && gfc_match (\"num_workers ( %e )\", &c->num_workers_expr)\n-\t  == MATCH_YES)\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_COPY)\n-\t  && gfc_match (\"copy ( \") == MATCH_YES\n-\t  && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t       OMP_MAP_FORCE_TOFROM))\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_COPYOUT)\n-\t  && gfc_match (\"copyout ( \") == MATCH_YES\n-\t  && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t       OMP_MAP_FORCE_FROM))\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_CREATE)\n-\t  && gfc_match (\"create ( \") == MATCH_YES\n-\t  && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t       OMP_MAP_FORCE_ALLOC))\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_DELETE)\n-\t  && gfc_match (\"delete ( \") == MATCH_YES\n-\t  && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t       OMP_MAP_DELETE))\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_PRESENT)\n-\t  && gfc_match (\"present ( \") == MATCH_YES\n-\t  && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t       OMP_MAP_FORCE_PRESENT))\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_PRESENT_OR_COPY)\n-\t  && gfc_match (\"present_or_copy ( \") == MATCH_YES\n-\t  && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t       OMP_MAP_TOFROM))\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_PRESENT_OR_COPY)\n-\t  && gfc_match (\"pcopy ( \") == MATCH_YES\n-\t  && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t       OMP_MAP_TOFROM))\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_PRESENT_OR_COPYIN)\n-\t  && gfc_match (\"present_or_copyin ( \") == MATCH_YES\n-\t  && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t       OMP_MAP_TO))\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_PRESENT_OR_COPYIN)\n-\t  && gfc_match (\"pcopyin ( \") == MATCH_YES\n-\t  && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t       OMP_MAP_TO))\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_PRESENT_OR_COPYOUT)\n-\t  && gfc_match (\"present_or_copyout ( \") == MATCH_YES\n-\t  && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t       OMP_MAP_FROM))\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_PRESENT_OR_COPYOUT)\n-\t  && gfc_match (\"pcopyout ( \") == MATCH_YES\n-\t  && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t       OMP_MAP_FROM))\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_PRESENT_OR_CREATE)\n-\t  && gfc_match (\"present_or_create ( \") == MATCH_YES\n-\t  && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t       OMP_MAP_ALLOC))\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_PRESENT_OR_CREATE)\n-\t  && gfc_match (\"pcreate ( \") == MATCH_YES\n-\t  && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t       OMP_MAP_ALLOC))\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_DEVICEPTR)\n-\t  && gfc_match (\"deviceptr ( \") == MATCH_YES)\n+      bool end_colon;\n+      gfc_omp_namelist **head;\n+      old_loc = gfc_current_locus;\n+      char pc = gfc_peek_ascii_char ();\n+      switch (pc)\n \t{\n-\t  gfc_omp_namelist **list = &c->lists[OMP_LIST_MAP];\n-\t  gfc_omp_namelist **head = NULL;\n-\t  if (gfc_match_omp_variable_list (\"\", list, true, NULL, &head, false)\n-\t      == MATCH_YES)\n+\tcase 'a':\n+\t  end_colon = false;\n+\t  head = NULL;\n+\t  if ((mask & OMP_CLAUSE_ALIGNED)\n+\t      && gfc_match_omp_variable_list (\"aligned (\",\n+\t\t\t\t\t      &c->lists[OMP_LIST_ALIGNED],\n+\t\t\t\t\t      false, &end_colon,\n+\t\t\t\t\t      &head) == MATCH_YES)\n \t    {\n+\t      gfc_expr *alignment = NULL;\n \t      gfc_omp_namelist *n;\n+\n+\t      if (end_colon && gfc_match (\" %e )\", &alignment) != MATCH_YES)\n+\t\t{\n+\t\t  gfc_free_omp_namelist (*head);\n+\t\t  gfc_current_locus = old_loc;\n+\t\t  *head = NULL;\n+\t\t  break;\n+\t\t}\n \t      for (n = *head; n; n = n->next)\n-\t\tn->u.map_op = OMP_MAP_FORCE_DEVICEPTR;\n+\t\tif (n->next && alignment)\n+\t\t  n->expr = gfc_copy_expr (alignment);\n+\t\telse\n+\t\t  n->expr = alignment;\n \t      continue;\n \t    }\n-\t}\n-      if ((mask & OMP_CLAUSE_USE_DEVICE)\n-\t  && gfc_match_omp_variable_list (\"use_device (\",\n-\t\t\t\t\t  &c->lists[OMP_LIST_USE_DEVICE], true)\n-\t     == MATCH_YES)\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_DEVICE_RESIDENT)\n-\t  && gfc_match_omp_variable_list (\"device_resident (\",\n-\t\t\t\t\t  &c->lists[OMP_LIST_DEVICE_RESIDENT],\n-\t\t\t\t\t  true)\n-\t     == MATCH_YES)\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_LINK)\n-\t  && gfc_match_oacc_clause_link (\"link (\",\n-\t\t\t\t\t  &c->lists[OMP_LIST_LINK])\n-\t     == MATCH_YES)\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_OACC_DEVICE)\n-\t  && gfc_match (\"device ( \") == MATCH_YES\n-\t  && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t       OMP_MAP_FORCE_TO))\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_HOST_SELF)\n-\t  && (gfc_match (\"host ( \") == MATCH_YES\n-\t      || gfc_match (\"self ( \") == MATCH_YES)\n-\t  && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n-\t\t\t\t       OMP_MAP_FORCE_FROM))\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_TILE)\n-\t  && !c->tile_list\n-\t  && match_oacc_expr_list (\"tile (\", &c->tile_list, true) == MATCH_YES)\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_SEQ) && !c->seq\n-\t  && gfc_match (\"seq\") == MATCH_YES)\n-\t{\n-\t  c->seq = true;\n-\t  needs_space = true;\n-\t  continue;\n-\t}\n-      if ((mask & OMP_CLAUSE_INDEPENDENT) && !c->independent\n-\t  && gfc_match (\"independent\") == MATCH_YES)\n-\t{\n-\t  c->independent = true;\n-\t  needs_space = true;\n-\t  continue;\n-\t}\n-      if ((mask & OMP_CLAUSE_AUTO) && !c->par_auto\n-\t        && gfc_match (\"auto\") == MATCH_YES)\n-\t{\n-\t  c->par_auto = true;\n-\t  needs_space = true;\n-\t  continue;\n-\t}\n-      if ((mask & OMP_CLAUSE_WAIT) && !c->wait\n-\t        && gfc_match (\"wait\") == MATCH_YES)\n-\t{\n-\t  c->wait = true;\n-\t  match_oacc_expr_list (\" (\", &c->wait_list, false);\n-\t  continue;\n-\t}\n-      old_loc = gfc_current_locus;\n-      if ((mask & OMP_CLAUSE_REDUCTION)\n-\t  && gfc_match (\"reduction ( \") == MATCH_YES)\n-\t{\n-\t  gfc_omp_reduction_op rop = OMP_REDUCTION_NONE;\n-\t  char buffer[GFC_MAX_SYMBOL_LEN + 3];\n-\t  if (gfc_match_char ('+') == MATCH_YES)\n-\t    rop = OMP_REDUCTION_PLUS;\n-\t  else if (gfc_match_char ('*') == MATCH_YES)\n-\t    rop = OMP_REDUCTION_TIMES;\n-\t  else if (gfc_match_char ('-') == MATCH_YES)\n-\t    rop = OMP_REDUCTION_MINUS;\n-\t  else if (gfc_match (\".and.\") == MATCH_YES)\n-\t    rop = OMP_REDUCTION_AND;\n-\t  else if (gfc_match (\".or.\") == MATCH_YES)\n-\t    rop = OMP_REDUCTION_OR;\n-\t  else if (gfc_match (\".eqv.\") == MATCH_YES)\n-\t    rop = OMP_REDUCTION_EQV;\n-\t  else if (gfc_match (\".neqv.\") == MATCH_YES)\n-\t    rop = OMP_REDUCTION_NEQV;\n-\t  if (rop != OMP_REDUCTION_NONE)\n-\t    snprintf (buffer, sizeof buffer,\n-\t\t      \"operator %s\", gfc_op2string ((gfc_intrinsic_op) rop));\n-\t  else if (gfc_match_defined_op_name (buffer + 1, 1) == MATCH_YES)\n+\t  if ((mask & OMP_CLAUSE_ASYNC)\n+\t      && !c->async\n+\t      && gfc_match (\"async\") == MATCH_YES)\n+\t    {\n+\t      c->async = true;\n+\t      needs_space = false;\n+\t      if (gfc_match (\" ( %e )\", &c->async_expr) != MATCH_YES)\n+\t\t{\n+\t\t  c->async_expr\n+\t\t    = gfc_get_constant_expr (BT_INTEGER,\n+\t\t\t\t\t     gfc_default_integer_kind,\n+\t\t\t\t\t     &gfc_current_locus);\n+\t\t  mpz_set_si (c->async_expr->value.integer, GOMP_ASYNC_NOVAL);\n+\t\t}\n+\t      continue;\n+\t    }\n+\t  if ((mask & OMP_CLAUSE_AUTO)\n+\t      && !c->par_auto\n+\t      && gfc_match (\"auto\") == MATCH_YES)\n \t    {\n-\t      buffer[0] = '.';\n-\t      strcat (buffer, \".\");\n+\t      c->par_auto = true;\n+\t      needs_space = true;\n+\t      continue;\n \t    }\n-\t  else if (gfc_match_name (buffer) == MATCH_YES)\n+\t  break;\n+\tcase 'c':\n+\t  if ((mask & OMP_CLAUSE_COLLAPSE)\n+\t      && !c->collapse)\n \t    {\n-\t      gfc_symbol *sym;\n-\t      const char *n = buffer;\n+\t      gfc_expr *cexpr = NULL;\n+\t      match m = gfc_match (\"collapse ( %e )\", &cexpr);\n \n-\t      gfc_find_symbol (buffer, NULL, 1, &sym);\n-\t      if (sym != NULL)\n+\t      if (m == MATCH_YES)\n \t\t{\n-\t\t  if (sym->attr.intrinsic)\n-\t\t    n = sym->name;\n-\t\t  else if ((sym->attr.flavor != FL_UNKNOWN\n-\t\t\t    && sym->attr.flavor != FL_PROCEDURE)\n-\t\t\t   || sym->attr.external\n-\t\t\t   || sym->attr.generic\n-\t\t\t   || sym->attr.entry\n-\t\t\t   || sym->attr.result\n-\t\t\t   || sym->attr.dummy\n-\t\t\t   || sym->attr.subroutine\n-\t\t\t   || sym->attr.pointer\n-\t\t\t   || sym->attr.target\n-\t\t\t   || sym->attr.cray_pointer\n-\t\t\t   || sym->attr.cray_pointee\n-\t\t\t   || (sym->attr.proc != PROC_UNKNOWN\n-\t\t\t       && sym->attr.proc != PROC_INTRINSIC)\n-\t\t\t   || sym->attr.if_source != IFSRC_UNKNOWN\n-\t\t\t   || sym == sym->ns->proc_name)\n+\t\t  int collapse;\n+\t\t  const char *p = gfc_extract_int (cexpr, &collapse);\n+\t\t  if (p)\n \t\t    {\n-\t\t      sym = NULL;\n-\t\t      n = NULL;\n+\t\t      gfc_error_now (p);\n+\t\t      collapse = 1;\n \t\t    }\n-\t\t  else\n-\t\t    n = sym->name;\n+\t\t  else if (collapse <= 0)\n+\t\t    {\n+\t\t      gfc_error_now (\"COLLAPSE clause argument not\"\n+\t\t\t\t     \" constant positive integer at %C\");\n+\t\t      collapse = 1;\n+\t\t    }\n+\t\t  c->collapse = collapse;\n+\t\t  gfc_free_expr (cexpr);\n+\t\t  continue;\n \t\t}\n-\t      if (n == NULL)\n-\t\trop = OMP_REDUCTION_NONE;\n-\t      else if (strcmp (n, \"max\") == 0)\n-\t\trop = OMP_REDUCTION_MAX;\n-\t      else if (strcmp (n, \"min\") == 0)\n-\t\trop = OMP_REDUCTION_MIN;\n-\t      else if (strcmp (n, \"iand\") == 0)\n-\t\trop = OMP_REDUCTION_IAND;\n-\t      else if (strcmp (n, \"ior\") == 0)\n-\t\trop = OMP_REDUCTION_IOR;\n-\t      else if (strcmp (n, \"ieor\") == 0)\n-\t\trop = OMP_REDUCTION_IEOR;\n-\t      if (rop != OMP_REDUCTION_NONE\n-\t\t  && sym != NULL\n-\t\t  && ! sym->attr.intrinsic\n-\t\t  && ! sym->attr.use_assoc\n-\t\t  && ((sym->attr.flavor == FL_UNKNOWN\n-\t\t       && !gfc_add_flavor (&sym->attr, FL_PROCEDURE,\n-\t\t\t\t\t   sym->name, NULL))\n-\t\t      || !gfc_add_intrinsic (&sym->attr, NULL)))\n-\t\trop = OMP_REDUCTION_NONE;\n \t    }\n-\t  else\n-\t    buffer[0] = '\\0';\n-\t  gfc_omp_udr *udr\n-\t    = (buffer[0]\n-\t       ? gfc_find_omp_udr (gfc_current_ns, buffer, NULL) : NULL);\n-\t  gfc_omp_namelist **head = NULL;\n-\t  if (rop == OMP_REDUCTION_NONE && udr)\n-\t    rop = OMP_REDUCTION_USER;\n-\n-\t  if (gfc_match_omp_variable_list (\" :\",\n-\t\t\t\t\t   &c->lists[OMP_LIST_REDUCTION],\n-\t\t\t\t\t   false, NULL, &head, openacc)\n-\t      == MATCH_YES)\n+\t  if ((mask & OMP_CLAUSE_COPY)\n+\t      && gfc_match (\"copy ( \") == MATCH_YES\n+\t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n+\t\t\t\t\t   OMP_MAP_FORCE_TOFROM))\n+\t    continue;\n+\t  if (mask & OMP_CLAUSE_COPYIN)\n \t    {\n-\t      gfc_omp_namelist *n;\n-\t      if (rop == OMP_REDUCTION_NONE)\n+\t      if (openacc)\n \t\t{\n-\t\t  n = *head;\n-\t\t  *head = NULL;\n-\t\t  gfc_error_now (\"!$OMP DECLARE REDUCTION %s not found \"\n-\t\t\t\t \"at %L\", buffer, &old_loc);\n-\t\t  gfc_free_omp_namelist (n);\n+\t\t  if (gfc_match (\"copyin ( \") == MATCH_YES\n+\t\t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n+\t\t\t\t\t\t   OMP_MAP_FORCE_TO))\n+\t\t    continue;\n+\t\t}\n+\t      else if (gfc_match_omp_variable_list (\"copyin (\",\n+\t\t\t\t\t\t    &c->lists[OMP_LIST_COPYIN],\n+\t\t\t\t\t\t    true) == MATCH_YES)\n+\t\tcontinue;\n+\t    }\n+\t  if ((mask & OMP_CLAUSE_COPYOUT)\n+\t      && gfc_match (\"copyout ( \") == MATCH_YES\n+\t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n+\t\t\t\t\t   OMP_MAP_FORCE_FROM))\n+\t    continue;\n+\t  if ((mask & OMP_CLAUSE_COPYPRIVATE)\n+\t      && gfc_match_omp_variable_list (\"copyprivate (\",\n+\t\t\t\t\t      &c->lists[OMP_LIST_COPYPRIVATE],\n+\t\t\t\t\t      true) == MATCH_YES)\n+\t    continue;\n+\t  if ((mask & OMP_CLAUSE_CREATE)\n+\t      && gfc_match (\"create ( \") == MATCH_YES\n+\t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n+\t\t\t\t\t   OMP_MAP_FORCE_ALLOC))\n+\t    continue;\n+\t  break;\n+\tcase 'd':\n+\t  if ((mask & OMP_CLAUSE_DELETE)\n+\t      && gfc_match (\"delete ( \") == MATCH_YES\n+\t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n+\t\t\t\t\t   OMP_MAP_DELETE))\n+\t    continue;\n+\t  if ((mask & OMP_CLAUSE_DEFAULT)\n+\t      && c->default_sharing == OMP_DEFAULT_UNKNOWN)\n+\t    {\n+\t      if (gfc_match (\"default ( none )\") == MATCH_YES)\n+\t\tc->default_sharing = OMP_DEFAULT_NONE;\n+\t      else if (openacc)\n+\t\t/* c->default_sharing = OMP_DEFAULT_UNKNOWN */;\n+\t      else if (gfc_match (\"default ( shared )\") == MATCH_YES)\n+\t\tc->default_sharing = OMP_DEFAULT_SHARED;\n+\t      else if (gfc_match (\"default ( private )\") == MATCH_YES)\n+\t\tc->default_sharing = OMP_DEFAULT_PRIVATE;\n+\t      else if (gfc_match (\"default ( firstprivate )\") == MATCH_YES)\n+\t\tc->default_sharing = OMP_DEFAULT_FIRSTPRIVATE;\n+\t      if (c->default_sharing != OMP_DEFAULT_UNKNOWN)\n+\t\tcontinue;\n+\t    }\n+\t  if ((mask & OMP_CLAUSE_DEPEND)\n+\t      && gfc_match (\"depend ( \") == MATCH_YES)\n+\t    {\n+\t      match m = MATCH_YES;\n+\t      gfc_omp_depend_op depend_op = OMP_DEPEND_OUT;\n+\t      if (gfc_match (\"inout\") == MATCH_YES)\n+\t\tdepend_op = OMP_DEPEND_INOUT;\n+\t      else if (gfc_match (\"in\") == MATCH_YES)\n+\t\tdepend_op = OMP_DEPEND_IN;\n+\t      else if (gfc_match (\"out\") == MATCH_YES)\n+\t\tdepend_op = OMP_DEPEND_OUT;\n+\t      else\n+\t\tm = MATCH_NO;\n+\t      head = NULL;\n+\t      if (m == MATCH_YES\n+\t\t  && gfc_match_omp_variable_list (\" : \",\n+\t\t\t\t\t\t  &c->lists[OMP_LIST_DEPEND],\n+\t\t\t\t\t\t  false, NULL, &head,\n+\t\t\t\t\t\t  true) == MATCH_YES)\n+\t\t{\n+\t\t  gfc_omp_namelist *n;\n+\t\t  for (n = *head; n; n = n->next)\n+\t\t    n->u.depend_op = depend_op;\n+\t\t  continue;\n \t\t}\n \t      else\n-\t\tfor (n = *head; n; n = n->next)\n-\t\t  {\n-\t\t    n->u.reduction_op = rop;\n-\t\t    if (udr)\n-\t\t      {\n-\t\t\tn->udr = gfc_get_omp_namelist_udr ();\n-\t\t\tn->udr->udr = udr;\n-\t\t      }\n-\t\t  }\n-\t      continue;\n+\t\tgfc_current_locus = old_loc;\n \t    }\n-\t  else\n-\t    gfc_current_locus = old_loc;\n-\t}\n-      if ((mask & OMP_CLAUSE_DEFAULT)\n-\t  && c->default_sharing == OMP_DEFAULT_UNKNOWN)\n-\t{\n-\t  if (gfc_match (\"default ( none )\") == MATCH_YES)\n-\t    c->default_sharing = OMP_DEFAULT_NONE;\n-\t  else if (openacc)\n-\t    /* c->default_sharing = OMP_DEFAULT_UNKNOWN */;\n-\t  else if (gfc_match (\"default ( shared )\") == MATCH_YES)\n-\t    c->default_sharing = OMP_DEFAULT_SHARED;\n-\t  else if (gfc_match (\"default ( private )\") == MATCH_YES)\n-\t    c->default_sharing = OMP_DEFAULT_PRIVATE;\n-\t  else if (gfc_match (\"default ( firstprivate )\") == MATCH_YES)\n-\t    c->default_sharing = OMP_DEFAULT_FIRSTPRIVATE;\n-\t  if (c->default_sharing != OMP_DEFAULT_UNKNOWN)\n+\t  if ((mask & OMP_CLAUSE_DEVICE)\n+\t      && c->device == NULL\n+\t      && gfc_match (\"device ( %e )\", &c->device) == MATCH_YES)\n \t    continue;\n-\t}\n-      old_loc = gfc_current_locus;\n-      if ((mask & OMP_CLAUSE_SCHEDULE)\n-\t  && c->sched_kind == OMP_SCHED_NONE\n-\t  && gfc_match (\"schedule ( \") == MATCH_YES)\n-\t{\n-\t  if (gfc_match (\"static\") == MATCH_YES)\n-\t    c->sched_kind = OMP_SCHED_STATIC;\n-\t  else if (gfc_match (\"dynamic\") == MATCH_YES)\n-\t    c->sched_kind = OMP_SCHED_DYNAMIC;\n-\t  else if (gfc_match (\"guided\") == MATCH_YES)\n-\t    c->sched_kind = OMP_SCHED_GUIDED;\n-\t  else if (gfc_match (\"runtime\") == MATCH_YES)\n-\t    c->sched_kind = OMP_SCHED_RUNTIME;\n-\t  else if (gfc_match (\"auto\") == MATCH_YES)\n-\t    c->sched_kind = OMP_SCHED_AUTO;\n-\t  if (c->sched_kind != OMP_SCHED_NONE)\n+\t  if ((mask & OMP_CLAUSE_OACC_DEVICE)\n+\t      && gfc_match (\"device ( \") == MATCH_YES\n+\t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n+\t\t\t\t\t   OMP_MAP_FORCE_TO))\n+\t    continue;\n+\t  if ((mask & OMP_CLAUSE_DEVICEPTR)\n+\t      && gfc_match (\"deviceptr ( \") == MATCH_YES)\n+\t    {\n+\t      gfc_omp_namelist **list = &c->lists[OMP_LIST_MAP];\n+\t      gfc_omp_namelist **head = NULL;\n+\t      if (gfc_match_omp_variable_list (\"\", list, true, NULL,\n+\t\t\t\t\t       &head, false) == MATCH_YES)\n+\t\t{\n+\t\t  gfc_omp_namelist *n;\n+\t\t  for (n = *head; n; n = n->next)\n+\t\t    n->u.map_op = OMP_MAP_FORCE_DEVICEPTR;\n+\t\t  continue;\n+\t\t}\n+\t    }\n+\t  if ((mask & OMP_CLAUSE_DEVICE_RESIDENT)\n+\t      && gfc_match_omp_variable_list\n+\t\t   (\"device_resident (\",\n+\t\t    &c->lists[OMP_LIST_DEVICE_RESIDENT], true) == MATCH_YES)\n+\t    continue;\n+\t  if ((mask & OMP_CLAUSE_DIST_SCHEDULE)\n+\t      && c->dist_sched_kind == OMP_SCHED_NONE\n+\t      && gfc_match (\"dist_schedule ( static\") == MATCH_YES)\n \t    {\n \t      match m = MATCH_NO;\n-\t      if (c->sched_kind != OMP_SCHED_RUNTIME\n-\t\t  && c->sched_kind != OMP_SCHED_AUTO)\n-\t\tm = gfc_match (\" , %e )\", &c->chunk_size);\n+\t      c->dist_sched_kind = OMP_SCHED_STATIC;\n+\t      m = gfc_match (\" , %e )\", &c->dist_chunk_size);\n \t      if (m != MATCH_YES)\n \t\tm = gfc_match_char (')');\n \t      if (m != MATCH_YES)\n-\t\tc->sched_kind = OMP_SCHED_NONE;\n+\t\t{\n+\t\t  c->dist_sched_kind = OMP_SCHED_NONE;\n+\t\t  gfc_current_locus = old_loc;\n+\t\t}\n+\t      else\n+\t\tcontinue;\n \t    }\n-\t  if (c->sched_kind != OMP_SCHED_NONE)\n+\t  break;\n+\tcase 'f':\n+\t  if ((mask & OMP_CLAUSE_FINAL)\n+\t      && c->final_expr == NULL\n+\t      && gfc_match (\"final ( %e )\", &c->final_expr) == MATCH_YES)\n \t    continue;\n-\t  else\n-\t    gfc_current_locus = old_loc;\n-\t}\n-      if ((mask & OMP_CLAUSE_ORDERED) && !c->ordered\n-\t  && gfc_match (\"ordered\") == MATCH_YES)\n-\t{\n-\t  c->ordered = needs_space = true;\n-\t  continue;\n-\t}\n-      if ((mask & OMP_CLAUSE_UNTIED) && !c->untied\n-\t  && gfc_match (\"untied\") == MATCH_YES)\n-\t{\n-\t  c->untied = needs_space = true;\n-\t  continue;\n-\t}\n-      if ((mask & OMP_CLAUSE_MERGEABLE) && !c->mergeable\n-\t  && gfc_match (\"mergeable\") == MATCH_YES)\n-\t{\n-\t  c->mergeable = needs_space = true;\n-\t  continue;\n-\t}\n-      if ((mask & OMP_CLAUSE_COLLAPSE) && !c->collapse)\n-\t{\n-\t  gfc_expr *cexpr = NULL;\n-\t  match m = gfc_match (\"collapse ( %e )\", &cexpr);\n-\n-\t  if (m == MATCH_YES)\n+\t  if ((mask & OMP_CLAUSE_FIRSTPRIVATE)\n+\t      && gfc_match_omp_variable_list (\"firstprivate (\",\n+\t\t\t\t\t      &c->lists[OMP_LIST_FIRSTPRIVATE],\n+\t\t\t\t\t      true) == MATCH_YES)\n+\t    continue;\n+\t  if ((mask & OMP_CLAUSE_FROM)\n+\t      && gfc_match_omp_variable_list (\"from (\",\n+\t\t\t\t\t      &c->lists[OMP_LIST_FROM], false,\n+\t\t\t\t\t      NULL, &head, true) == MATCH_YES)\n+\t    continue;\n+\t  break;\n+\tcase 'g':\n+\t  if ((mask & OMP_CLAUSE_GANG)\n+\t      && !c->gang\n+\t      && gfc_match (\"gang\") == MATCH_YES)\n+\t    {\n+\t      c->gang = true;\n+\t      if (match_oacc_clause_gang(c) == MATCH_YES)\n+\t\tneeds_space = false;\n+\t      else\n+\t\tneeds_space = true;\n+\t      continue;\n+\t    }\n+\t  break;\n+\tcase 'h':\n+\t  if ((mask & OMP_CLAUSE_HOST_SELF)\n+\t      && gfc_match (\"host ( \") == MATCH_YES\n+\t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n+\t\t\t\t\t   OMP_MAP_FORCE_FROM))\n+\t    continue;\n+\t  break;\n+\tcase 'i':\n+\t  if ((mask & OMP_CLAUSE_IF)\n+\t      && c->if_expr == NULL\n+\t      && gfc_match (\"if ( %e )\", &c->if_expr) == MATCH_YES)\n+\t    continue;\n+\t  if ((mask & OMP_CLAUSE_INBRANCH)\n+\t      && !c->inbranch\n+\t      && !c->notinbranch\n+\t      && gfc_match (\"inbranch\") == MATCH_YES)\n+\t    {\n+\t      c->inbranch = needs_space = true;\n+\t      continue;\n+\t    }\n+\t  if ((mask & OMP_CLAUSE_INDEPENDENT)\n+\t      && !c->independent\n+\t      && gfc_match (\"independent\") == MATCH_YES)\n+\t    {\n+\t      c->independent = true;\n+\t      needs_space = true;\n+\t      continue;\n+\t    }\n+\t  break;\n+\tcase 'l':\n+\t  if ((mask & OMP_CLAUSE_LASTPRIVATE)\n+\t      && gfc_match_omp_variable_list (\"lastprivate (\",\n+\t\t\t\t\t      &c->lists[OMP_LIST_LASTPRIVATE],\n+\t\t\t\t\t      true) == MATCH_YES)\n+\t    continue;\n+\t  end_colon = false;\n+\t  head = NULL;\n+\t  if ((mask & OMP_CLAUSE_LINEAR)\n+\t      && gfc_match_omp_variable_list (\"linear (\",\n+\t\t\t\t\t      &c->lists[OMP_LIST_LINEAR],\n+\t\t\t\t\t      false, &end_colon,\n+\t\t\t\t\t      &head) == MATCH_YES)\n \t    {\n-\t      int collapse;\n-\t      const char *p = gfc_extract_int (cexpr, &collapse);\n-\t      if (p)\n+\t      gfc_expr *step = NULL;\n+\n+\t      if (end_colon && gfc_match (\" %e )\", &step) != MATCH_YES)\n \t\t{\n-\t\t  gfc_error_now (p);\n-\t\t  collapse = 1;\n+\t\t  gfc_free_omp_namelist (*head);\n+\t\t  gfc_current_locus = old_loc;\n+\t\t  *head = NULL;\n+\t\t  break;\n \t\t}\n-\t      else if (collapse <= 0)\n+\t      else if (!end_colon)\n \t\t{\n-\t\t  gfc_error_now (\"COLLAPSE clause argument not\"\n-\t\t\t\t \" constant positive integer at %C\");\n-\t\t  collapse = 1;\n+\t\t  step = gfc_get_constant_expr (BT_INTEGER,\n+\t\t\t\t\t\tgfc_default_integer_kind,\n+\t\t\t\t\t\t&old_loc);\n+\t\t  mpz_set_si (step->value.integer, 1);\n \t\t}\n-\t      c->collapse = collapse;\n-\t      gfc_free_expr (cexpr);\n+\t      (*head)->expr = step;\n \t      continue;\n \t    }\n-\t}\n-      if ((mask & OMP_CLAUSE_INBRANCH) && !c->inbranch && !c->notinbranch\n-\t  && gfc_match (\"inbranch\") == MATCH_YES)\n-\t{\n-\t  c->inbranch = needs_space = true;\n-\t  continue;\n-\t}\n-      if ((mask & OMP_CLAUSE_NOTINBRANCH) && !c->notinbranch && !c->inbranch\n-\t  && gfc_match (\"notinbranch\") == MATCH_YES)\n-\t{\n-\t  c->notinbranch = needs_space = true;\n-\t  continue;\n-\t}\n-      if ((mask & OMP_CLAUSE_PROC_BIND)\n-\t  && c->proc_bind == OMP_PROC_BIND_UNKNOWN)\n-\t{\n-\t  if (gfc_match (\"proc_bind ( master )\") == MATCH_YES)\n-\t    c->proc_bind = OMP_PROC_BIND_MASTER;\n-\t  else if (gfc_match (\"proc_bind ( spread )\") == MATCH_YES)\n-\t    c->proc_bind = OMP_PROC_BIND_SPREAD;\n-\t  else if (gfc_match (\"proc_bind ( close )\") == MATCH_YES)\n-\t    c->proc_bind = OMP_PROC_BIND_CLOSE;\n-\t  if (c->proc_bind != OMP_PROC_BIND_UNKNOWN)\n+\t  if ((mask & OMP_CLAUSE_LINK)\n+\t      && (gfc_match_oacc_clause_link (\"link (\",\n+\t\t\t\t\t      &c->lists[OMP_LIST_LINK])\n+\t\t  == MATCH_YES))\n \t    continue;\n-\t}\n-      if ((mask & OMP_CLAUSE_SAFELEN) && c->safelen_expr == NULL\n-\t  && gfc_match (\"safelen ( %e )\", &c->safelen_expr) == MATCH_YES)\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_SIMDLEN) && c->simdlen_expr == NULL\n-\t  && gfc_match (\"simdlen ( %e )\", &c->simdlen_expr) == MATCH_YES)\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_UNIFORM)\n-\t  && gfc_match_omp_variable_list (\"uniform (\",\n-\t\t\t\t\t  &c->lists[OMP_LIST_UNIFORM], false)\n-\t     == MATCH_YES)\n-\tcontinue;\n-      bool end_colon = false;\n-      gfc_omp_namelist **head = NULL;\n-      old_loc = gfc_current_locus;\n-      if ((mask & OMP_CLAUSE_ALIGNED)\n-\t  && gfc_match_omp_variable_list (\"aligned (\",\n-\t\t\t\t\t  &c->lists[OMP_LIST_ALIGNED], false,\n-\t\t\t\t\t  &end_colon, &head)\n-\t     == MATCH_YES)\n-\t{\n-\t  gfc_expr *alignment = NULL;\n-\t  gfc_omp_namelist *n;\n-\n-\t  if (end_colon\n-\t      && gfc_match (\" %e )\", &alignment) != MATCH_YES)\n+\t  break;\n+\tcase 'm':\n+\t  if ((mask & OMP_CLAUSE_MAP)\n+\t      && gfc_match (\"map ( \") == MATCH_YES)\n \t    {\n-\t      gfc_free_omp_namelist (*head);\n-\t      gfc_current_locus = old_loc;\n-\t      *head = NULL;\n-\t      break;\n+\t      gfc_omp_map_op map_op = OMP_MAP_TOFROM;\n+\t      if (gfc_match (\"alloc : \") == MATCH_YES)\n+\t\tmap_op = OMP_MAP_ALLOC;\n+\t      else if (gfc_match (\"tofrom : \") == MATCH_YES)\n+\t\tmap_op = OMP_MAP_TOFROM;\n+\t      else if (gfc_match (\"to : \") == MATCH_YES)\n+\t\tmap_op = OMP_MAP_TO;\n+\t      else if (gfc_match (\"from : \") == MATCH_YES)\n+\t\tmap_op = OMP_MAP_FROM;\n+\t      head = NULL;\n+\t      if (gfc_match_omp_variable_list (\"\", &c->lists[OMP_LIST_MAP],\n+\t\t\t\t\t       false, NULL, &head,\n+\t\t\t\t\t       true) == MATCH_YES)\n+\t\t{\n+\t\t  gfc_omp_namelist *n;\n+\t\t  for (n = *head; n; n = n->next)\n+\t\t    n->u.map_op = map_op;\n+\t\t  continue;\n+\t\t}\n+\t      else\n+\t\tgfc_current_locus = old_loc;\n \t    }\n-\t  for (n = *head; n; n = n->next)\n-\t    if (n->next && alignment)\n-\t      n->expr = gfc_copy_expr (alignment);\n-\t    else\n-\t      n->expr = alignment;\n-\t  continue;\n-\t}\n-      end_colon = false;\n-      head = NULL;\n-      old_loc = gfc_current_locus;\n-      if ((mask & OMP_CLAUSE_LINEAR)\n-\t  && gfc_match_omp_variable_list (\"linear (\",\n-\t\t\t\t\t  &c->lists[OMP_LIST_LINEAR], false,\n-\t\t\t\t\t  &end_colon, &head)\n-\t     == MATCH_YES)\n-\t{\n-\t  gfc_expr *step = NULL;\n+\t  if ((mask & OMP_CLAUSE_MERGEABLE) && !c->mergeable\n+\t      && gfc_match (\"mergeable\") == MATCH_YES)\n+\t    {\n+\t      c->mergeable = needs_space = true;\n+\t      continue;\n+\t    }\n+\t  break;\n+\tcase 'n':\n+\t  if ((mask & OMP_CLAUSE_NOTINBRANCH)\n+\t      && !c->notinbranch\n+\t      && !c->inbranch\n+\t      && gfc_match (\"notinbranch\") == MATCH_YES)\n+\t    {\n+\t      c->notinbranch = needs_space = true;\n+\t      continue;\n+\t    }\n+\t  if ((mask & OMP_CLAUSE_NUM_GANGS)\n+\t      && c->num_gangs_expr == NULL\n+\t      && gfc_match (\"num_gangs ( %e )\",\n+\t\t\t    &c->num_gangs_expr) == MATCH_YES)\n+\t    continue;\n+\t  if ((mask & OMP_CLAUSE_NUM_TEAMS)\n+\t      && c->num_teams == NULL\n+\t      && gfc_match (\"num_teams ( %e )\", &c->num_teams) == MATCH_YES)\n+\t    continue;\n+\t  if ((mask & OMP_CLAUSE_NUM_THREADS)\n+\t      && c->num_threads == NULL\n+\t      && (gfc_match (\"num_threads ( %e )\", &c->num_threads)\n+\t\t  == MATCH_YES))\n+\t    continue;\n+\t  if ((mask & OMP_CLAUSE_NUM_WORKERS)\n+\t      && c->num_workers_expr == NULL\n+\t      && gfc_match (\"num_workers ( %e )\",\n+\t\t\t    &c->num_workers_expr) == MATCH_YES)\n+\t    continue;\n+\t  break;\n+\tcase 'o':\n+\t  if ((mask & OMP_CLAUSE_ORDERED)\n+\t      && !c->ordered\n+\t      && gfc_match (\"ordered\") == MATCH_YES)\n+\t    {\n+\t      c->ordered = needs_space = true;\n+\t      continue;\n+\t    }\n+\t  break;\n+\tcase 'p':\n+\t  if ((mask & OMP_CLAUSE_PRESENT_OR_COPY)\n+\t      && gfc_match (\"pcopy ( \") == MATCH_YES\n+\t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n+\t\t\t\t\t   OMP_MAP_TOFROM))\n+\t    continue;\n+\t  if ((mask & OMP_CLAUSE_PRESENT_OR_COPYIN)\n+\t      && gfc_match (\"pcopyin ( \") == MATCH_YES\n+\t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n+\t\t\t\t\t   OMP_MAP_TO))\n+\t    continue;\n+\t  if ((mask & OMP_CLAUSE_PRESENT_OR_COPYOUT)\n+\t      && gfc_match (\"pcopyout ( \") == MATCH_YES\n+\t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n+\t\t\t\t\t   OMP_MAP_FROM))\n+\t    continue;\n+\t  if ((mask & OMP_CLAUSE_PRESENT_OR_CREATE)\n+\t      && gfc_match (\"pcreate ( \") == MATCH_YES\n+\t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n+\t\t\t\t\t   OMP_MAP_ALLOC))\n+\t    continue;\n+\t  if ((mask & OMP_CLAUSE_PRESENT)\n+\t      && gfc_match (\"present ( \") == MATCH_YES\n+\t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n+\t\t\t\t\t   OMP_MAP_FORCE_PRESENT))\n+\t    continue;\n+\t  if ((mask & OMP_CLAUSE_PRESENT_OR_COPY)\n+\t      && gfc_match (\"present_or_copy ( \") == MATCH_YES\n+\t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n+\t\t\t\t\t   OMP_MAP_TOFROM))\n+\t    continue;\n+\t  if ((mask & OMP_CLAUSE_PRESENT_OR_COPYIN)\n+\t      && gfc_match (\"present_or_copyin ( \") == MATCH_YES\n+\t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n+\t\t\t\t\t   OMP_MAP_TO))\n+\t    continue;\n+\t  if ((mask & OMP_CLAUSE_PRESENT_OR_COPYOUT)\n+\t      && gfc_match (\"present_or_copyout ( \") == MATCH_YES\n+\t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n+\t\t\t\t\t   OMP_MAP_FROM))\n+\t    continue;\n+\t  if ((mask & OMP_CLAUSE_PRESENT_OR_CREATE)\n+\t      && gfc_match (\"present_or_create ( \") == MATCH_YES\n+\t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n+\t\t\t\t\t   OMP_MAP_ALLOC))\n+\t    continue;\n+\t  if ((mask & OMP_CLAUSE_PRIVATE)\n+\t      && gfc_match_omp_variable_list (\"private (\",\n+\t\t\t\t\t      &c->lists[OMP_LIST_PRIVATE],\n+\t\t\t\t\t      true) == MATCH_YES)\n+\t    continue;\n+\t  if ((mask & OMP_CLAUSE_PROC_BIND)\n+\t      && c->proc_bind == OMP_PROC_BIND_UNKNOWN)\n+\t    {\n+\t      if (gfc_match (\"proc_bind ( master )\") == MATCH_YES)\n+\t\tc->proc_bind = OMP_PROC_BIND_MASTER;\n+\t      else if (gfc_match (\"proc_bind ( spread )\") == MATCH_YES)\n+\t\tc->proc_bind = OMP_PROC_BIND_SPREAD;\n+\t      else if (gfc_match (\"proc_bind ( close )\") == MATCH_YES)\n+\t\tc->proc_bind = OMP_PROC_BIND_CLOSE;\n+\t      if (c->proc_bind != OMP_PROC_BIND_UNKNOWN)\n+\t\tcontinue;\n+\t    }\n+\t  break;\n+\tcase 'r':\n+\t  if ((mask & OMP_CLAUSE_REDUCTION)\n+\t      && gfc_match (\"reduction ( \") == MATCH_YES)\n+\t    {\n+\t      gfc_omp_reduction_op rop = OMP_REDUCTION_NONE;\n+\t      char buffer[GFC_MAX_SYMBOL_LEN + 3];\n+\t      if (gfc_match_char ('+') == MATCH_YES)\n+\t\trop = OMP_REDUCTION_PLUS;\n+\t      else if (gfc_match_char ('*') == MATCH_YES)\n+\t\trop = OMP_REDUCTION_TIMES;\n+\t      else if (gfc_match_char ('-') == MATCH_YES)\n+\t\trop = OMP_REDUCTION_MINUS;\n+\t      else if (gfc_match (\".and.\") == MATCH_YES)\n+\t\trop = OMP_REDUCTION_AND;\n+\t      else if (gfc_match (\".or.\") == MATCH_YES)\n+\t\trop = OMP_REDUCTION_OR;\n+\t      else if (gfc_match (\".eqv.\") == MATCH_YES)\n+\t\trop = OMP_REDUCTION_EQV;\n+\t      else if (gfc_match (\".neqv.\") == MATCH_YES)\n+\t\trop = OMP_REDUCTION_NEQV;\n+\t      if (rop != OMP_REDUCTION_NONE)\n+\t\tsnprintf (buffer, sizeof buffer, \"operator %s\",\n+\t\t\t  gfc_op2string ((gfc_intrinsic_op) rop));\n+\t      else if (gfc_match_defined_op_name (buffer + 1, 1) == MATCH_YES)\n+\t\t{\n+\t\t  buffer[0] = '.';\n+\t\t  strcat (buffer, \".\");\n+\t\t}\n+\t      else if (gfc_match_name (buffer) == MATCH_YES)\n+\t\t{\n+\t\t  gfc_symbol *sym;\n+\t\t  const char *n = buffer;\n \n-\t  if (end_colon\n-\t      && gfc_match (\" %e )\", &step) != MATCH_YES)\n+\t\t  gfc_find_symbol (buffer, NULL, 1, &sym);\n+\t\t  if (sym != NULL)\n+\t\t    {\n+\t\t      if (sym->attr.intrinsic)\n+\t\t\tn = sym->name;\n+\t\t      else if ((sym->attr.flavor != FL_UNKNOWN\n+\t\t\t\t&& sym->attr.flavor != FL_PROCEDURE)\n+\t\t\t       || sym->attr.external\n+\t\t\t       || sym->attr.generic\n+\t\t\t       || sym->attr.entry\n+\t\t\t       || sym->attr.result\n+\t\t\t       || sym->attr.dummy\n+\t\t\t       || sym->attr.subroutine\n+\t\t\t       || sym->attr.pointer\n+\t\t\t       || sym->attr.target\n+\t\t\t       || sym->attr.cray_pointer\n+\t\t\t       || sym->attr.cray_pointee\n+\t\t\t       || (sym->attr.proc != PROC_UNKNOWN\n+\t\t\t\t   && sym->attr.proc != PROC_INTRINSIC)\n+\t\t\t       || sym->attr.if_source != IFSRC_UNKNOWN\n+\t\t\t       || sym == sym->ns->proc_name)\n+\t\t\t{\n+\t\t\t  sym = NULL;\n+\t\t\t  n = NULL;\n+\t\t\t}\n+\t\t      else\n+\t\t\tn = sym->name;\n+\t\t    }\n+\t\t  if (n == NULL)\n+\t\t    rop = OMP_REDUCTION_NONE;\n+\t\t  else if (strcmp (n, \"max\") == 0)\n+\t\t    rop = OMP_REDUCTION_MAX;\n+\t\t  else if (strcmp (n, \"min\") == 0)\n+\t\t    rop = OMP_REDUCTION_MIN;\n+\t\t  else if (strcmp (n, \"iand\") == 0)\n+\t\t    rop = OMP_REDUCTION_IAND;\n+\t\t  else if (strcmp (n, \"ior\") == 0)\n+\t\t    rop = OMP_REDUCTION_IOR;\n+\t\t  else if (strcmp (n, \"ieor\") == 0)\n+\t\t    rop = OMP_REDUCTION_IEOR;\n+\t\t  if (rop != OMP_REDUCTION_NONE\n+\t\t      && sym != NULL\n+\t\t      && ! sym->attr.intrinsic\n+\t\t      && ! sym->attr.use_assoc\n+\t\t      && ((sym->attr.flavor == FL_UNKNOWN\n+\t\t\t  && !gfc_add_flavor (&sym->attr, FL_PROCEDURE,\n+\t\t\t\t\t      sym->name, NULL))\n+\t\t\t  || !gfc_add_intrinsic (&sym->attr, NULL)))\n+\t\t    rop = OMP_REDUCTION_NONE;\n+\t\t}\n+\t      else\n+\t\tbuffer[0] = '\\0';\n+\t      gfc_omp_udr *udr\n+\t\t= (buffer[0]\n+\t\t   ? gfc_find_omp_udr (gfc_current_ns, buffer, NULL) : NULL);\n+\t      gfc_omp_namelist **head = NULL;\n+\t      if (rop == OMP_REDUCTION_NONE && udr)\n+\t\trop = OMP_REDUCTION_USER;\n+\n+\t      if (gfc_match_omp_variable_list (\" :\",\n+\t\t\t\t\t       &c->lists[OMP_LIST_REDUCTION],\n+\t\t\t\t\t       false, NULL, &head,\n+\t\t\t\t\t       openacc) == MATCH_YES)\n+\t\t{\n+\t\t  gfc_omp_namelist *n;\n+\t\t  if (rop == OMP_REDUCTION_NONE)\n+\t\t    {\n+\t\t      n = *head;\n+\t\t      *head = NULL;\n+\t\t      gfc_error_now (\"!$OMP DECLARE REDUCTION %s not found \"\n+\t\t\t\t     \"at %L\", buffer, &old_loc);\n+\t\t      gfc_free_omp_namelist (n);\n+\t\t    }\n+\t\t  else\n+\t\t    for (n = *head; n; n = n->next)\n+\t\t      {\n+\t\t\tn->u.reduction_op = rop;\n+\t\t\tif (udr)\n+\t\t\t  {\n+\t\t\t    n->udr = gfc_get_omp_namelist_udr ();\n+\t\t\t    n->udr->udr = udr;\n+\t\t\t  }\n+\t\t      }\n+\t\t  continue;\n+\t\t}\n+\t      else\n+\t\tgfc_current_locus = old_loc;\n+\t    }\n+\t  break;\n+\tcase 's':\n+\t  if ((mask & OMP_CLAUSE_SAFELEN)\n+\t      && c->safelen_expr == NULL\n+\t      && gfc_match (\"safelen ( %e )\", &c->safelen_expr) == MATCH_YES)\n+\t    continue;\n+\t  if ((mask & OMP_CLAUSE_SCHEDULE)\n+\t      && c->sched_kind == OMP_SCHED_NONE\n+\t      && gfc_match (\"schedule ( \") == MATCH_YES)\n \t    {\n-\t      gfc_free_omp_namelist (*head);\n-\t      gfc_current_locus = old_loc;\n-\t      *head = NULL;\n-\t      break;\n+\t      if (gfc_match (\"static\") == MATCH_YES)\n+\t\tc->sched_kind = OMP_SCHED_STATIC;\n+\t      else if (gfc_match (\"dynamic\") == MATCH_YES)\n+\t\tc->sched_kind = OMP_SCHED_DYNAMIC;\n+\t      else if (gfc_match (\"guided\") == MATCH_YES)\n+\t\tc->sched_kind = OMP_SCHED_GUIDED;\n+\t      else if (gfc_match (\"runtime\") == MATCH_YES)\n+\t\tc->sched_kind = OMP_SCHED_RUNTIME;\n+\t      else if (gfc_match (\"auto\") == MATCH_YES)\n+\t\tc->sched_kind = OMP_SCHED_AUTO;\n+\t      if (c->sched_kind != OMP_SCHED_NONE)\n+\t\t{\n+\t\t  match m = MATCH_NO;\n+\t\t  if (c->sched_kind != OMP_SCHED_RUNTIME\n+\t\t      && c->sched_kind != OMP_SCHED_AUTO)\n+\t\t    m = gfc_match (\" , %e )\", &c->chunk_size);\n+\t\t  if (m != MATCH_YES)\n+\t\t    m = gfc_match_char (')');\n+\t\t  if (m != MATCH_YES)\n+\t\t    c->sched_kind = OMP_SCHED_NONE;\n+\t\t}\n+\t      if (c->sched_kind != OMP_SCHED_NONE)\n+\t\tcontinue;\n+\t      else\n+\t\tgfc_current_locus = old_loc;\n \t    }\n-\t  else if (!end_colon)\n+\t  if ((mask & OMP_CLAUSE_HOST_SELF)\n+\t      && gfc_match (\"self ( \") == MATCH_YES\n+\t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n+\t\t\t\t\t   OMP_MAP_FORCE_FROM))\n+\t    continue;\n+\t  if ((mask & OMP_CLAUSE_SEQ)\n+\t      && !c->seq\n+\t      && gfc_match (\"seq\") == MATCH_YES)\n \t    {\n-\t      step = gfc_get_constant_expr (BT_INTEGER,\n-\t\t\t\t\t    gfc_default_integer_kind,\n-\t\t\t\t\t    &old_loc);\n-\t      mpz_set_si (step->value.integer, 1);\n+\t      c->seq = true;\n+\t      needs_space = true;\n+\t      continue;\n \t    }\n-\t  (*head)->expr = step;\n-\t  continue;\n-\t}\n-      if ((mask & OMP_CLAUSE_DEPEND)\n-\t  && gfc_match (\"depend ( \") == MATCH_YES)\n-\t{\n-\t  match m = MATCH_YES;\n-\t  gfc_omp_depend_op depend_op = OMP_DEPEND_OUT;\n-\t  if (gfc_match (\"inout\") == MATCH_YES)\n-\t    depend_op = OMP_DEPEND_INOUT;\n-\t  else if (gfc_match (\"in\") == MATCH_YES)\n-\t    depend_op = OMP_DEPEND_IN;\n-\t  else if (gfc_match (\"out\") == MATCH_YES)\n-\t    depend_op = OMP_DEPEND_OUT;\n-\t  else\n-\t    m = MATCH_NO;\n-\t  head = NULL;\n-\t  if (m == MATCH_YES\n-\t      && gfc_match_omp_variable_list (\" : \",\n-\t\t\t\t\t      &c->lists[OMP_LIST_DEPEND],\n-\t\t\t\t\t      false, NULL, &head, true)\n-\t\t == MATCH_YES)\n+\t  if ((mask & OMP_CLAUSE_SHARED)\n+\t      && gfc_match_omp_variable_list (\"shared (\",\n+\t\t\t\t\t      &c->lists[OMP_LIST_SHARED],\n+\t\t\t\t\t      true) == MATCH_YES)\n+\t    continue;\n+\t  if ((mask & OMP_CLAUSE_SIMDLEN)\n+\t      && c->simdlen_expr == NULL\n+\t      && gfc_match (\"simdlen ( %e )\", &c->simdlen_expr) == MATCH_YES)\n+\t    continue;\n+\t  break;\n+\tcase 't':\n+\t  if ((mask & OMP_CLAUSE_THREAD_LIMIT)\n+\t      && c->thread_limit == NULL\n+\t      && gfc_match (\"thread_limit ( %e )\",\n+\t\t\t    &c->thread_limit) == MATCH_YES)\n+\t    continue;\n+\t  if ((mask & OMP_CLAUSE_TILE)\n+\t      && !c->tile_list\n+\t      && match_oacc_expr_list (\"tile (\", &c->tile_list,\n+\t\t\t\t       true) == MATCH_YES)\n+\t    continue;\n+\t  if ((mask & OMP_CLAUSE_TO)\n+\t      && gfc_match_omp_variable_list (\"to (\",\n+\t\t\t\t\t      &c->lists[OMP_LIST_TO], false,\n+\t\t\t\t\t      NULL, &head, true) == MATCH_YES)\n+\t    continue;\n+\t  break;\n+\tcase 'u':\n+\t  if ((mask & OMP_CLAUSE_UNIFORM)\n+\t      && gfc_match_omp_variable_list (\"uniform (\",\n+\t\t\t\t\t      &c->lists[OMP_LIST_UNIFORM],\n+\t\t\t\t\t      false) == MATCH_YES)\n+\t    continue;\n+\t  if ((mask & OMP_CLAUSE_UNTIED)\n+\t      && !c->untied\n+\t      && gfc_match (\"untied\") == MATCH_YES)\n \t    {\n-\t      gfc_omp_namelist *n;\n-\t      for (n = *head; n; n = n->next)\n-\t\tn->u.depend_op = depend_op;\n+\t      c->untied = needs_space = true;\n \t      continue;\n \t    }\n-\t  else\n-\t    gfc_current_locus = old_loc;\n-\t}\n-      if ((mask & OMP_CLAUSE_DIST_SCHEDULE)\n-\t  && c->dist_sched_kind == OMP_SCHED_NONE\n-\t  && gfc_match (\"dist_schedule ( static\") == MATCH_YES)\n-\t{\n-\t  match m = MATCH_NO;\n-\t  c->dist_sched_kind = OMP_SCHED_STATIC;\n-\t  m = gfc_match (\" , %e )\", &c->dist_chunk_size);\n-\t  if (m != MATCH_YES)\n-\t    m = gfc_match_char (')');\n-\t  if (m != MATCH_YES)\n+\t  if ((mask & OMP_CLAUSE_USE_DEVICE)\n+\t      && gfc_match_omp_variable_list (\"use_device (\",\n+\t\t\t\t\t      &c->lists[OMP_LIST_USE_DEVICE],\n+\t\t\t\t\t      true) == MATCH_YES)\n+\t    continue;\n+\t  break;\n+\tcase 'v':\n+\t  if ((mask & OMP_CLAUSE_VECTOR)\n+\t      && !c->vector\n+\t      && gfc_match (\"vector\") == MATCH_YES)\n \t    {\n-\t      c->dist_sched_kind = OMP_SCHED_NONE;\n-\t      gfc_current_locus = old_loc;\n+\t      c->vector = true;\n+\t      if (gfc_match (\" ( length : %e )\", &c->vector_expr) == MATCH_YES\n+\t\t  || gfc_match (\" ( %e )\", &c->vector_expr) == MATCH_YES)\n+\t\tneeds_space = false;\n+\t      else\n+\t\tneeds_space = true;\n+\t      continue;\n \t    }\n-\t  else\n+\t  if ((mask & OMP_CLAUSE_VECTOR_LENGTH)\n+\t      && c->vector_length_expr == NULL\n+\t      && (gfc_match (\"vector_length ( %e )\", &c->vector_length_expr)\n+\t\t  == MATCH_YES))\n \t    continue;\n-\t}\n-      if ((mask & OMP_CLAUSE_NUM_TEAMS) && c->num_teams == NULL\n-\t  && gfc_match (\"num_teams ( %e )\", &c->num_teams) == MATCH_YES)\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_DEVICE) && c->device == NULL\n-\t  && gfc_match (\"device ( %e )\", &c->device) == MATCH_YES)\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_THREAD_LIMIT) && c->thread_limit == NULL\n-\t  && gfc_match (\"thread_limit ( %e )\", &c->thread_limit) == MATCH_YES)\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_MAP)\n-\t  && gfc_match (\"map ( \") == MATCH_YES)\n-\t{\n-\t  gfc_omp_map_op map_op = OMP_MAP_TOFROM;\n-\t  if (gfc_match (\"alloc : \") == MATCH_YES)\n-\t    map_op = OMP_MAP_ALLOC;\n-\t  else if (gfc_match (\"tofrom : \") == MATCH_YES)\n-\t    map_op = OMP_MAP_TOFROM;\n-\t  else if (gfc_match (\"to : \") == MATCH_YES)\n-\t    map_op = OMP_MAP_TO;\n-\t  else if (gfc_match (\"from : \") == MATCH_YES)\n-\t    map_op = OMP_MAP_FROM;\n-\t  head = NULL;\n-\t  if (gfc_match_omp_variable_list (\"\", &c->lists[OMP_LIST_MAP],\n-\t\t\t\t\t   false, NULL, &head, true)\n-\t      == MATCH_YES)\n+\t  break;\n+\tcase 'w':\n+\t  if ((mask & OMP_CLAUSE_WAIT)\n+\t      && !c->wait\n+\t      && gfc_match (\"wait\") == MATCH_YES)\n \t    {\n-\t      gfc_omp_namelist *n;\n-\t      for (n = *head; n; n = n->next)\n-\t\tn->u.map_op = map_op;\n+\t      c->wait = true;\n+\t      match_oacc_expr_list (\" (\", &c->wait_list, false);\n \t      continue;\n \t    }\n-\t  else\n-\t    gfc_current_locus = old_loc;\n+\t  if ((mask & OMP_CLAUSE_WORKER)\n+\t      && !c->worker\n+\t      && gfc_match (\"worker\") == MATCH_YES)\n+\t    {\n+\t      c->worker = true;\n+\t      if (gfc_match (\" ( num : %e )\", &c->worker_expr) == MATCH_YES\n+\t\t  || gfc_match (\" ( %e )\", &c->worker_expr) == MATCH_YES)\n+\t\tneeds_space = false;\n+\t      else\n+\t\tneeds_space = true;\n+\t      continue;\n+\t    }\n+\t  break;\n \t}\n-      if ((mask & OMP_CLAUSE_TO)\n-\t  && gfc_match_omp_variable_list (\"to (\",\n-\t\t\t\t\t  &c->lists[OMP_LIST_TO], false,\n-\t\t\t\t\t  NULL, &head, true)\n-\t     == MATCH_YES)\n-\tcontinue;\n-      if ((mask & OMP_CLAUSE_FROM)\n-\t  && gfc_match_omp_variable_list (\"from (\",\n-\t\t\t\t\t  &c->lists[OMP_LIST_FROM], false,\n-\t\t\t\t\t  NULL, &head, true)\n-\t     == MATCH_YES)\n-\tcontinue;\n-\n       break;\n     }\n "}]}