{"sha": "9d6bb56678d647dca2e971c5ca11f8446fab70d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ2YmI1NjY3OGQ2NDdkY2EyZTk3MWM1Y2ExMWY4NDQ2ZmFiNzBkNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-09T00:29:14Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-09T00:29:14Z"}, "message": "mmix-protos.h (mmix_expand_builtin_va_arg): Remove.\n\n        * config/mmix/mmix-protos.h (mmix_expand_builtin_va_arg): Remove.\n        * config/mmix/mmix.c (TARGET_GIMPLIFY_VA_ARG_EXPR): New.\n        (mmix_gimplify_va_arg_expr): Rewrite from mmix_expand_builtin_va_arg.\n        * config/mmix/mmix.h (EXPAND_BUILTIN_VA_ARG): Remove.\n        (FRAME_POINTER_REQUIRED): Use current_function_has_nonlocal_label.\n\nFrom-SVN: r84336", "tree": {"sha": "1252670c552122a9a18b4aed0a58eccc2babeb19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1252670c552122a9a18b4aed0a58eccc2babeb19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d6bb56678d647dca2e971c5ca11f8446fab70d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d6bb56678d647dca2e971c5ca11f8446fab70d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d6bb56678d647dca2e971c5ca11f8446fab70d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d6bb56678d647dca2e971c5ca11f8446fab70d7/comments", "author": null, "committer": null, "parents": [{"sha": "4e15608a31c94a41fa22d9d840246be7e8e27c71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e15608a31c94a41fa22d9d840246be7e8e27c71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e15608a31c94a41fa22d9d840246be7e8e27c71"}], "stats": {"total": 129, "additions": 20, "deletions": 109}, "files": [{"sha": "b6f4818f4dda99c7fbe10df3ca6693bd42247a68", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6bb56678d647dca2e971c5ca11f8446fab70d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6bb56678d647dca2e971c5ca11f8446fab70d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d6bb56678d647dca2e971c5ca11f8446fab70d7", "patch": "@@ -1,5 +1,11 @@\n 2004-07-08  Richard Henderson  <rth@redhat.com>\n \n+\t* config/mmix/mmix-protos.h (mmix_expand_builtin_va_arg): Remove.\n+\t* config/mmix/mmix.c (TARGET_GIMPLIFY_VA_ARG_EXPR): New.\n+\t(mmix_gimplify_va_arg_expr): Rewrite from mmix_expand_builtin_va_arg.\n+\t* config/mmix/mmix.h (EXPAND_BUILTIN_VA_ARG): Remove.\n+\t(FRAME_POINTER_REQUIRED): Use current_function_has_nonlocal_label.\n+\n \t* config/m32r/m32r-protos.h (m32r_va_arg): Remove.\n \t* config/m32r/m32r.c (TARGET_GIMPLIFY_VA_ARG_EXPR): New.\n \t(m32r_gimplify_va_arg_expr): Rewrite from m32r_va_arg."}, {"sha": "e10e65bb0ea09f7a868f3fbac54adc8d1368d89a", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6bb56678d647dca2e971c5ca11f8446fab70d7/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6bb56678d647dca2e971c5ca11f8446fab70d7/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=9d6bb56678d647dca2e971c5ca11f8446fab70d7", "patch": "@@ -67,7 +67,6 @@ extern void mmix_asm_declare_register_global\n   (FILE *, tree, int, const char *);\n extern rtx mmix_function_arg\n   (const CUMULATIVE_ARGS *, enum machine_mode, tree, int, int);\n-extern rtx mmix_expand_builtin_va_arg (tree, tree);\n extern void mmix_asm_output_addr_diff_elt (FILE *, rtx, int, int);\n extern void mmix_asm_output_addr_vec_elt (FILE *, int);\n extern enum reg_class mmix_preferred_reload_class (rtx, enum reg_class);"}, {"sha": "9c7fb62652fdc559e5cfb8616edd240f61e8814a", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 13, "deletions": 100, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6bb56678d647dca2e971c5ca11f8446fab70d7/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6bb56678d647dca2e971c5ca11f8446fab70d7/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=9d6bb56678d647dca2e971c5ca11f8446fab70d7", "patch": "@@ -139,6 +139,7 @@ static void mmix_file_start (void);\n static void mmix_file_end (void);\n static bool mmix_rtx_costs (rtx, int, int, int *);\n static rtx mmix_struct_value_rtx (tree, int);\n+static tree mmix_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n \n \n /* Target structure macros.  Listed by node.  See `Using and Porting GCC'\n@@ -204,6 +205,8 @@ static rtx mmix_struct_value_rtx (tree, int);\n \n #undef TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS mmix_setup_incoming_varargs\n+#undef TARGET_GIMPLIFY_VA_ARG_EXPR\n+#define TARGET_GIMPLIFY_VA_ARG_EXPR mmix_gimplify_va_arg_expr\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \n@@ -843,109 +846,19 @@ mmix_setup_incoming_varargs (CUMULATIVE_ARGS *args_so_farp,\n     internal_error (\"MMIX Internal: Last named vararg would not fit in a register\");\n }\n \n-/* EXPAND_BUILTIN_VA_ARG.  */\n+/* Gimplify VA_ARG_EXPR.  All we need to do is figure out if TYPE is\n+   pass-by-reference and hand off to standard routines.  */\n \n-/* This is modified from the \"standard\" implementation of va_arg: read the\n-   value from the current (padded) address and increment by the (padded)\n-   size.  The difference for MMIX is that if the type is\n-   pass-by-reference, then perform an indirection.  */\n+static tree\n+mmix_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n+{\n+  CUMULATIVE_ARGS cum;\n+  cum.lib = 0;\n \n-rtx\n-mmix_expand_builtin_va_arg (tree valist, tree type)\n-{\n-  tree ptr_size = size_int (BITS_PER_WORD / BITS_PER_UNIT);\n-  tree addr_tree, type_size = NULL;\n-  tree align, alignm1;\n-  tree rounded_size;\n-  rtx addr;\n-\n-  /* Compute the rounded size of the type.  */\n-\n-  /* Get AP.  */\n-  addr_tree = valist;\n-  align = size_int (PARM_BOUNDARY / BITS_PER_UNIT);\n-  alignm1 = size_int (PARM_BOUNDARY / BITS_PER_UNIT - 1);\n-  if (type == error_mark_node\n-      || (type_size = TYPE_SIZE_UNIT (TYPE_MAIN_VARIANT (type))) == NULL\n-      || TREE_OVERFLOW (type_size))\n-    /* Presumably an error; the size isn't computable.  A message has\n-       supposedly been emitted elsewhere.  */\n-    rounded_size = size_zero_node;\n+  if (mmix_function_arg_pass_by_reference (&cum, TYPE_MODE (type), type, 0))\n+    return ind_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n   else\n-    rounded_size = fold (build (MULT_EXPR, sizetype,\n-\t\t\t\tfold (build (TRUNC_DIV_EXPR, sizetype,\n-\t\t\t\t\t     fold (build (PLUS_EXPR, sizetype,\n-\t\t\t\t\t\t\t  type_size, alignm1)),\n-\t\t\t\t\t     align)),\n-\t\t\t\talign));\n-\n- if (AGGREGATE_TYPE_P (type)\n-     && GET_MODE_UNIT_SIZE (TYPE_MODE (type)) < 8\n-     && GET_MODE_UNIT_SIZE (TYPE_MODE (type)) != 0)\n-   {\n-     /* Adjust for big-endian the location of aggregates passed in a\n-\tregister, but where the aggregate is accessed in a shorter mode\n-\tthan the natural register mode (i.e. it is accessed as SFmode(?),\n-\tSImode, HImode or QImode rather than DImode or DFmode(?)).  FIXME:\n-\tOr should we adjust the mode in which the aggregate is read, to be\n-\ta register size mode?  (Hum, nah, a small offset is generally\n-\tcheaper than a wider memory access on MMIX.)  */\n-     addr_tree\n-       = build (PLUS_EXPR, TREE_TYPE (addr_tree), addr_tree,\n-\t\tsize_int ((BITS_PER_WORD / BITS_PER_UNIT)\n-\t\t\t  - GET_MODE_UNIT_SIZE (TYPE_MODE (type))));\n-   }\n- else if (!integer_zerop (rounded_size))\n-   {\n-     if (!really_constant_p (type_size))\n-       /* Varying-size types come in by reference.  */\n-       addr_tree\n-\t = build1 (INDIRECT_REF, build_pointer_type (type), addr_tree);\n-     else\n-       {\n-\t /* If the size is less than a register, then we need to pad the\n-\t    address by adding the difference.  */\n-\t tree addend\n-\t   = fold (build (COND_EXPR, sizetype,\n-\t\t\t  fold (build (GT_EXPR, sizetype,\n-\t\t\t\t       rounded_size,\n-\t\t\t\t       align)),\n-\t\t\t  size_zero_node,\n-\t\t\t  fold (build (MINUS_EXPR, sizetype,\n-\t\t\t\t       rounded_size,\n-\t\t\t\t       type_size))));\n-\t tree addr_tree1\n-\t   = fold (build (PLUS_EXPR, TREE_TYPE (addr_tree), addr_tree,\n-\t\t\t  addend));\n-\n-\t /* If this type is larger than what fits in a register, then it\n-\t    is passed by reference.  */\n-\t addr_tree\n-\t   = fold (build (COND_EXPR, TREE_TYPE (addr_tree1),\n-\t\t\t  fold (build (GT_EXPR, sizetype,\n-\t\t\t\t       rounded_size,\n-\t\t\t\t       ptr_size)),\n-\t\t\t  build1 (INDIRECT_REF, build_pointer_type (type),\n-\t\t\t\t  addr_tree1),\n-\t\t\t  addr_tree1));\n-       }\n-   }\n-\n-  addr = expand_expr (addr_tree, NULL_RTX, Pmode, EXPAND_NORMAL);\n-  addr = copy_to_reg (addr);\n-\n-  if (!integer_zerop (rounded_size))\n-    {\n-      /* Compute new value for AP.  For MMIX, it is always advanced by the\n-\t size of a register.  */\n-      tree t = build (MODIFY_EXPR, TREE_TYPE (valist), valist,\n-\t\t      build (PLUS_EXPR, TREE_TYPE (valist), valist,\n-\t\t\t     ptr_size));\n-      TREE_SIDE_EFFECTS (t) = 1;\n-      expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n-    }\n-\n-  return addr;\n+    return std_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n }\n \n /* TRAMPOLINE_SIZE.  */"}, {"sha": "7d2ca84f626f15ae77876dcdcd48ba000d2a29e9", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6bb56678d647dca2e971c5ca11f8446fab70d7/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6bb56678d647dca2e971c5ca11f8446fab70d7/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=9d6bb56678d647dca2e971c5ca11f8446fab70d7", "patch": "@@ -687,7 +687,7 @@ enum reg_class\n /* Node: Elimination */\n /* FIXME: Is this requirement built-in?  Anyway, we should try to get rid\n    of it; we can deduce the value.  */\n-#define FRAME_POINTER_REQUIRED (nonlocal_goto_stack_level != NULL_RTX)\n+#define FRAME_POINTER_REQUIRED  current_function_has_nonlocal_label\n \n /* The frame-pointer is stored in a location that either counts to the\n    offset of incoming parameters, or that counts to the offset of the\n@@ -789,13 +789,6 @@ typedef struct { int regs; int lib; } CUMULATIVE_ARGS;\n #define FUNCTION_PROFILER(FILE, LABELNO)\t\\\n  mmix_function_profiler (FILE, LABELNO)\n \n-/* Node: Varargs */\n-\n-/* FIXME: This and other EXPAND_BUILTIN_VA_... target macros are not\n-   documented, although used by several targets.  */\n-#define EXPAND_BUILTIN_VA_ARG(VALIST, TYPE) \\\n- mmix_expand_builtin_va_arg (VALIST, TYPE)\n-\n /* Node: Trampolines */\n \n #define TRAMPOLINE_TEMPLATE(FILE) \\"}]}