{"sha": "852ee53c2775b43fef0bdba08c160ea95c1c7245", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUyZWU1M2MyNzc1YjQzZmVmMGJkYmEwOGMxNjBlYTk1YzFjNzI0NQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-05-03T15:01:20Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-05-03T15:01:20Z"}, "message": "PR libstdc++/84087 add default arguments to basic_string members (LWG 2268)\n\nThis change was a DR against C++11 and so should have been implemented\nyears ago.\n\n\tPR libstdc++/84087 LWG DR 2268 basic_string default arguments\n\t* include/bits/basic_string.h [_GLIBCXX_USE_CXX11_ABI=1]\n\t(append(const basic_string&, size_type, size_type)\n\t(assign(const basic_string&, size_type, size_type)\n\t(insert(size_type, const basic_string&, size_type, size_type)\n\t(replace(size_type,size_type,const basic_string&,size_type,size_type)\n\t(compare(size_type,size_type,constbasic_string&,size_type,size_type)):\n\tAdd default arguments (LWG 2268).\n\t[_GLIBCXX_USE_CXX11_ABI=0]\n\t(append(const basic_string&, size_type, size_type)\n\t(assign(const basic_string&, size_type, size_type)\n\t(insert(size_type, const basic_string&, size_type, size_type)\n\t(replace(size_type,size_type,const basic_string&,size_type,size_type)\n\t(compare(size_type,size_type,constbasic_string&,size_type,size_type)):\n\tLikewise.\n\t* testsuite/21_strings/basic_string/dr2268.cc: New test.\n\nFrom-SVN: r259895", "tree": {"sha": "3c558d45cbbbce1ee2ab96830fe036b2d53799fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c558d45cbbbce1ee2ab96830fe036b2d53799fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/852ee53c2775b43fef0bdba08c160ea95c1c7245", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852ee53c2775b43fef0bdba08c160ea95c1c7245", "html_url": "https://github.com/Rust-GCC/gccrs/commit/852ee53c2775b43fef0bdba08c160ea95c1c7245", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852ee53c2775b43fef0bdba08c160ea95c1c7245/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d49b3426947aa1064d8d224619da66daaf4bfb8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d49b3426947aa1064d8d224619da66daaf4bfb8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d49b3426947aa1064d8d224619da66daaf4bfb8a"}], "stats": {"total": 82, "additions": 72, "deletions": 10}, "files": [{"sha": "3b12844d02dc6dac9692a9748e008ba9b30cef5d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852ee53c2775b43fef0bdba08c160ea95c1c7245/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852ee53c2775b43fef0bdba08c160ea95c1c7245/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=852ee53c2775b43fef0bdba08c160ea95c1c7245", "patch": "@@ -1,5 +1,22 @@\n 2018-05-03  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/84087 LWG DR 2268 basic_string default arguments\n+\t* include/bits/basic_string.h [_GLIBCXX_USE_CXX11_ABI=1]\n+\t(append(const basic_string&, size_type, size_type)\n+\t(assign(const basic_string&, size_type, size_type)\n+\t(insert(size_type, const basic_string&, size_type, size_type)\n+\t(replace(size_type,size_type,const basic_string&,size_type,size_type)\n+\t(compare(size_type,size_type,constbasic_string&,size_type,size_type)):\n+\tAdd default arguments (LWG 2268).\n+\t[_GLIBCXX_USE_CXX11_ABI=0]\n+\t(append(const basic_string&, size_type, size_type)\n+\t(assign(const basic_string&, size_type, size_type)\n+\t(insert(size_type, const basic_string&, size_type, size_type)\n+\t(replace(size_type,size_type,const basic_string&,size_type,size_type)\n+\t(compare(size_type,size_type,constbasic_string&,size_type,size_type)):\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/dr2268.cc: New test.\n+\n \tPR libstdc++/84535\n \t* include/std/thread (thread::__not_same): New SFINAE helper.\n \t(thread::thread(_Callable&&, _Args&&...)): Add SFINAE constraint that"}, {"sha": "5bffa1c72a12c6af9a34590cb48536ba2aa8779b", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852ee53c2775b43fef0bdba08c160ea95c1c7245/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852ee53c2775b43fef0bdba08c160ea95c1c7245/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=852ee53c2775b43fef0bdba08c160ea95c1c7245", "patch": "@@ -1216,7 +1216,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  remainder of @a __str is appended.\n        */\n       basic_string&\n-      append(const basic_string& __str, size_type __pos, size_type __n)\n+      append(const basic_string& __str, size_type __pos, size_type __n = npos)\n       { return _M_append(__str._M_data()\n \t\t\t + __str._M_check(__pos, \"basic_string::append\"),\n \t\t\t __str._M_limit(__pos, __n)); }\n@@ -1381,7 +1381,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  __str, the remainder of @a __str is used.\n        */\n       basic_string&\n-      assign(const basic_string& __str, size_type __pos, size_type __n)\n+      assign(const basic_string& __str, size_type __pos, size_type __n = npos)\n       { return _M_replace(size_type(0), this->size(), __str._M_data()\n \t\t\t  + __str._M_check(__pos, \"basic_string::assign\"),\n \t\t\t  __str._M_limit(__pos, __n)); }\n@@ -1633,7 +1633,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       */\n       basic_string&\n       insert(size_type __pos1, const basic_string& __str,\n-\t     size_type __pos2, size_type __n)\n+\t     size_type __pos2, size_type __n = npos)\n       { return this->replace(__pos1, size_type(0), __str._M_data()\n \t\t\t     + __str._M_check(__pos2, \"basic_string::insert\"),\n \t\t\t     __str._M_limit(__pos2, __n)); }\n@@ -1881,7 +1881,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       */\n       basic_string&\n       replace(size_type __pos1, size_type __n1, const basic_string& __str,\n-\t      size_type __pos2, size_type __n2)\n+\t      size_type __pos2, size_type __n2 = npos)\n       { return this->replace(__pos1, __n1, __str._M_data()\n \t\t\t     + __str._M_check(__pos2, \"basic_string::replace\"),\n \t\t\t     __str._M_limit(__pos2, __n2)); }\n@@ -2941,7 +2941,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       */\n       int\n       compare(size_type __pos1, size_type __n1, const basic_string& __str,\n-\t      size_type __pos2, size_type __n2) const;\n+\t      size_type __pos2, size_type __n2 = npos) const;\n \n       /**\n        *  @brief  Compare to a C string.\n@@ -4135,7 +4135,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n        *  remainder of @a __str is appended.\n        */\n       basic_string&\n-      append(const basic_string& __str, size_type __pos, size_type __n);\n+      append(const basic_string& __str, size_type __pos, size_type __n = npos);\n \n       /**\n        *  @brief  Append a C substring.\n@@ -4280,7 +4280,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n        *  __str, the remainder of @a __str is used.\n        */\n       basic_string&\n-      assign(const basic_string& __str, size_type __pos, size_type __n)\n+      assign(const basic_string& __str, size_type __pos, size_type __n = npos)\n       { return this->assign(__str._M_data()\n \t\t\t    + __str._M_check(__pos, \"basic_string::assign\"),\n \t\t\t    __str._M_limit(__pos, __n)); }\n@@ -4468,7 +4468,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       */\n       basic_string&\n       insert(size_type __pos1, const basic_string& __str,\n-\t     size_type __pos2, size_type __n)\n+\t     size_type __pos2, size_type __n = npos)\n       { return this->insert(__pos1, __str._M_data()\n \t\t\t    + __str._M_check(__pos2, \"basic_string::insert\"),\n \t\t\t    __str._M_limit(__pos2, __n)); }\n@@ -4703,7 +4703,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       */\n       basic_string&\n       replace(size_type __pos1, size_type __n1, const basic_string& __str,\n-\t      size_type __pos2, size_type __n2)\n+\t      size_type __pos2, size_type __n2 = npos)\n       { return this->replace(__pos1, __n1, __str._M_data()\n \t\t\t     + __str._M_check(__pos2, \"basic_string::replace\"),\n \t\t\t     __str._M_limit(__pos2, __n2)); }\n@@ -5779,7 +5779,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       */\n       int\n       compare(size_type __pos1, size_type __n1, const basic_string& __str,\n-\t      size_type __pos2, size_type __n2) const;\n+\t      size_type __pos2, size_type __n2 = npos) const;\n \n       /**\n        *  @brief  Compare to a C string."}, {"sha": "3ad6860d81f574ec72e0c9e8a772e2380ab88a4b", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/dr2268.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852ee53c2775b43fef0bdba08c160ea95c1c7245/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fdr2268.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852ee53c2775b43fef0bdba08c160ea95c1c7245/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fdr2268.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fdr2268.cc?ref=852ee53c2775b43fef0bdba08c160ea95c1c7245", "patch": "@@ -0,0 +1,45 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  // PR libstdc++/84087\n+\n+  std::string s0 = \"string\";\n+  std::string s;\n+  s.append(s0, 2);\n+  VERIFY( s == \"ring\" );\n+  s.assign(s0, 3);\n+  VERIFY( s == \"ing\" );\n+  s.insert(2, s0, 4);\n+  VERIFY( s == \"inngg\" );\n+  s.replace(2, 3, s0, 2);\n+  VERIFY( s == \"inring\" );\n+  VERIFY( s.compare(2, 4, s0, 2) == 0 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}