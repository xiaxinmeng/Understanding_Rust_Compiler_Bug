{"sha": "0aa277bf0b4b794314ab3f11bab438d17b57465d", "node_id": "C_kwDOANBUbNoAKDBhYTI3N2JmMGI0Yjc5NDMxNGFiM2YxMWJhYjQzOGQxN2I1NzQ2NWQ", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-15T20:27:05Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-30T09:45:05Z"}, "message": "c-family: attribute ((aligned, mode)) [PR100545]\n\nThe problem here was that handle_mode_attribute clobbered the changes of any\nprevious attribute, only copying type qualifiers to the new type.  And\ncommon_handle_aligned_attribute had previously set up the typedef, so when\nwe later called set_underlying_type it saw DECL_ORIGINAL_TYPE set and just\nreturned, even though handle_mode_attribute had messed up the TREE_TYPE.\nSo, let's fix handle_mode_attribute to copy attributes, alignment, and\ntypedefness to the new type.\n\n\tPR c/100545\n\ngcc/c-family/ChangeLog:\n\n\t* c-attribs.cc (handle_mode_attribute): Copy attributes, aligned,\n\tand typedef.\n\t* c-common.cc (set_underlying_type): Add assert.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/attr-mode-1.c: New test.\n\t* c-c++-common/attr-mode-2.c: New test.", "tree": {"sha": "10bf1b97ecf8ad30860c0fadf657c01b9d289e51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10bf1b97ecf8ad30860c0fadf657c01b9d289e51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0aa277bf0b4b794314ab3f11bab438d17b57465d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aa277bf0b4b794314ab3f11bab438d17b57465d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aa277bf0b4b794314ab3f11bab438d17b57465d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aa277bf0b4b794314ab3f11bab438d17b57465d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66d1e440e14377a373d0e3d67f478cca4fd14dea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66d1e440e14377a373d0e3d67f478cca4fd14dea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66d1e440e14377a373d0e3d67f478cca4fd14dea"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "b1953a45f9bb70ab1e05a97c38d32fad0398133e", "filename": "gcc/c-family/c-attribs.cc", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aa277bf0b4b794314ab3f11bab438d17b57465d/gcc%2Fc-family%2Fc-attribs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aa277bf0b4b794314ab3f11bab438d17b57465d/gcc%2Fc-family%2Fc-attribs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.cc?ref=0aa277bf0b4b794314ab3f11bab438d17b57465d", "patch": "@@ -2199,7 +2199,21 @@ handle_mode_attribute (tree *node, tree name, tree args,\n \t  return NULL_TREE;\n \t}\n \n-      *node = build_qualified_type (typefm, TYPE_QUALS (type));\n+      /* Copy any quals and attributes to the new type.  */\n+      *node = build_type_attribute_qual_variant (typefm, TYPE_ATTRIBUTES (type),\n+\t\t\t\t\t\t TYPE_QUALS (type));\n+      if (TYPE_USER_ALIGN (type))\n+\t*node = build_aligned_type (*node, TYPE_ALIGN (type));\n+\n+      tree decl = node[2];\n+      if (decl && TYPE_NAME (type) == decl)\n+\t{\n+\t  /* Set up the typedef all over again.  */\n+\t  DECL_ORIGINAL_TYPE (decl) = NULL_TREE;\n+\t  TREE_TYPE (decl) = *node;\n+\t  set_underlying_type (decl);\n+\t  *node = TREE_TYPE (decl);\n+\t}\n     }\n \n   return NULL_TREE;"}, {"sha": "730faa9e87f5e959c80dd7e0d1c9ca20ae15aa76", "filename": "gcc/c-family/c-common.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aa277bf0b4b794314ab3f11bab438d17b57465d/gcc%2Fc-family%2Fc-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aa277bf0b4b794314ab3f11bab438d17b57465d/gcc%2Fc-family%2Fc-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.cc?ref=0aa277bf0b4b794314ab3f11bab438d17b57465d", "patch": "@@ -8153,15 +8153,16 @@ check_missing_format_attribute (tree ltype, tree rtype)\n void\n set_underlying_type (tree x)\n {\n-  if (x == error_mark_node)\n+  if (x == error_mark_node || TREE_TYPE (x) == error_mark_node)\n     return;\n   if (DECL_IS_UNDECLARED_BUILTIN (x) && TREE_CODE (TREE_TYPE (x)) != ARRAY_TYPE)\n     {\n       if (TYPE_NAME (TREE_TYPE (x)) == 0)\n \tTYPE_NAME (TREE_TYPE (x)) = x;\n     }\n-  else if (TREE_TYPE (x) != error_mark_node\n-\t   && DECL_ORIGINAL_TYPE (x) == NULL_TREE)\n+  else if (DECL_ORIGINAL_TYPE (x))\n+    gcc_checking_assert (TYPE_NAME (TREE_TYPE (x)) == x);\n+  else\n     {\n       tree tt = TREE_TYPE (x);\n       DECL_ORIGINAL_TYPE (x) = tt;"}, {"sha": "04a2431f5e51c14f217eded2937b5004cd2b4ab6", "filename": "gcc/testsuite/c-c++-common/attr-mode-1.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aa277bf0b4b794314ab3f11bab438d17b57465d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-mode-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aa277bf0b4b794314ab3f11bab438d17b57465d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-mode-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-mode-1.c?ref=0aa277bf0b4b794314ab3f11bab438d17b57465d", "patch": "@@ -0,0 +1,4 @@\n+// PR c/100545\n+// { dg-additional-options -g }\n+\n+typedef int fatp_t __attribute__((aligned, mode(SI)));"}, {"sha": "de65f49c6b60c3ab86e45ef145477e86ba54c6ce", "filename": "gcc/testsuite/c-c++-common/attr-mode-2.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aa277bf0b4b794314ab3f11bab438d17b57465d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-mode-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aa277bf0b4b794314ab3f11bab438d17b57465d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-mode-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-mode-2.c?ref=0aa277bf0b4b794314ab3f11bab438d17b57465d", "patch": "@@ -0,0 +1,4 @@\n+typedef int I;\n+int x;\n+I y __attribute__ ((mode(QI)));\n+extern I x;"}]}