{"sha": "347099d6ef97a689c52d883c5547f024a719da24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ3MDk5ZDZlZjk3YTY4OWM1MmQ4ODNjNTU0N2YwMjRhNzE5ZGEyNA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-15T04:47:08Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-15T04:47:08Z"}, "message": "(record_reg_classes): Ignore leading % when examining constraint.\n\nDon't bypass usual cost computation when a pseudo \"matches\"\na non-pseudo in matching operands.\n\nFrom-SVN: r2123", "tree": {"sha": "bf04555258e7ee4ae179b9c4a850415ef4bb27a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf04555258e7ee4ae179b9c4a850415ef4bb27a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/347099d6ef97a689c52d883c5547f024a719da24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/347099d6ef97a689c52d883c5547f024a719da24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/347099d6ef97a689c52d883c5547f024a719da24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/347099d6ef97a689c52d883c5547f024a719da24/comments", "author": null, "committer": null, "parents": [{"sha": "69c3f3434a856266240ac45b4f66624726cbf9e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69c3f3434a856266240ac45b4f66624726cbf9e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69c3f3434a856266240ac45b4f66624726cbf9e7"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "74b2d7a907ec5cf9bfa72023a8f38555e7a2e5e9", "filename": "gcc/regclass.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347099d6ef97a689c52d883c5547f024a719da24/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347099d6ef97a689c52d883c5547f024a719da24/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=347099d6ef97a689c52d883c5547f024a719da24", "patch": "@@ -910,6 +910,9 @@ record_reg_classes (n_alts, n_ops, ops, modes, constraints, insn)\n \t      continue;\n \t    }\n \n+\t  if (*p == '%')\n+\t    p++;\n+\n \t  /* If this alternative is only relevant when this operand\n \t     matches a previous operand, we do different things depending\n \t     on whether this operand is a pseudo-reg or not.  */\n@@ -967,9 +970,11 @@ record_reg_classes (n_alts, n_ops, ops, modes, constraints, insn)\n \t\t  this_op_costs[i] = this_op_costs[j];\n \t\t  if (! find_reg_note (insn, REG_DEAD, op))\n \t\t    alt_cost += 2;\n-\t\t}\n \n-\t      continue;\n+\t\t  /* This is in place of ordinary cost computation\n+\t\t     for this operand.  */\n+\t\t  continue;\n+\t\t}\n \t    }\n \n \t  /* Scan all the constraint letters.  See if the operand matches"}]}