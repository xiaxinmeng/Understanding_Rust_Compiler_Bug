{"sha": "4dc3fbb0eb1e89262e6f49e0ee80381d94db5494", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRjM2ZiYjBlYjFlODkyNjJlNmY0OWUwZWU4MDM4MWQ5NGRiNTQ5NA==", "commit": {"author": {"name": "Ami Tavory", "email": "atavory@gmail.com", "date": "2006-06-17T10:06:41Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-06-17T10:06:41Z"}, "message": "twister_rand_gen.cc: Adapt to simply use tr1::mt19937.\n\n2006-06-17  Ami Tavory  <atavory@gmail.com>\n\t    Paolo Carlini  <pcarlini@suse.de>\n\n\t* testsuite/util/rng/twister_rand_gen.cc: Adapt to simply use\n\ttr1::mt19937.\n\t* testsuite/util/rng/twister_rand_gen.hpp: Likewise.\n\nCo-Authored-By: Paolo Carlini <pcarlini@suse.de>\n\nFrom-SVN: r114740", "tree": {"sha": "b593e41c689e57eed39a6779649c91147ed4e289", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b593e41c689e57eed39a6779649c91147ed4e289"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4dc3fbb0eb1e89262e6f49e0ee80381d94db5494", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dc3fbb0eb1e89262e6f49e0ee80381d94db5494", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dc3fbb0eb1e89262e6f49e0ee80381d94db5494", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dc3fbb0eb1e89262e6f49e0ee80381d94db5494/comments", "author": {"login": "atavory", "id": 7824605, "node_id": "MDQ6VXNlcjc4MjQ2MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7824605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atavory", "html_url": "https://github.com/atavory", "followers_url": "https://api.github.com/users/atavory/followers", "following_url": "https://api.github.com/users/atavory/following{/other_user}", "gists_url": "https://api.github.com/users/atavory/gists{/gist_id}", "starred_url": "https://api.github.com/users/atavory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atavory/subscriptions", "organizations_url": "https://api.github.com/users/atavory/orgs", "repos_url": "https://api.github.com/users/atavory/repos", "events_url": "https://api.github.com/users/atavory/events{/privacy}", "received_events_url": "https://api.github.com/users/atavory/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "da71e18caeb8bcc6c85c7785c137ee0f99516fb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da71e18caeb8bcc6c85c7785c137ee0f99516fb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da71e18caeb8bcc6c85c7785c137ee0f99516fb4"}], "stats": {"total": 219, "additions": 56, "deletions": 163}, "files": [{"sha": "7ed9724d5c4194818e8f7a78dd51177268cfb3b5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc3fbb0eb1e89262e6f49e0ee80381d94db5494/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc3fbb0eb1e89262e6f49e0ee80381d94db5494/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4dc3fbb0eb1e89262e6f49e0ee80381d94db5494", "patch": "@@ -1,3 +1,10 @@\n+2006-06-17  Ami Tavory  <atavory@gmail.com>\n+\t    Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* testsuite/util/rng/twister_rand_gen.cc: Adapt to simply use\n+\ttr1::mt19937.\n+\t* testsuite/util/rng/twister_rand_gen.hpp: Likewise.\n+\n 2006-06-16  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/random (uniform_real<>::uniform_real(_RealType,"}, {"sha": "2163eb704fb887ee65bf3d72ebf7cb62b911e4f5", "filename": "libstdc++-v3/testsuite/util/rng/twister_rand_gen.cc", "status": "modified", "additions": 31, "deletions": 121, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc3fbb0eb1e89262e6f49e0ee80381d94db5494/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Frng%2Ftwister_rand_gen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc3fbb0eb1e89262e6f49e0ee80381d94db5494/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Frng%2Ftwister_rand_gen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Frng%2Ftwister_rand_gen.cc?ref=4dc3fbb0eb1e89262e6f49e0ee80381d94db5494", "patch": "@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n // General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License\n-// along with this library; see the file COPYING.  If not, write to\n-// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n-// MA 02111-1307, USA.\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n \n // As a special exception, you may use this file as part of a free\n // software library without restriction.  Specifically, if other files\n@@ -40,160 +40,70 @@\n // warranty.\n \n /**\n- * @file twister_rand_gen.cpp\n- * Contains a random number generator invented and implemented by\n- *    Makoto Matsumoto\n- *    (http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html)\n+ * @file twister_rand_gen.cc\n  */\n \n #include <util/rng/twister_rand_gen.hpp>\n #include <ctime>\n-#include <iostream>\n \n namespace pb_ds\n {\n   namespace test\n   {\n-#ifdef TWISTER_RAND_GEN_DEBUG\n+#ifdef PB_DS_TWISTER_RAND_GEN_DEBUG\n #define PB_DS_DBG_ASSERT(X) assert(X)\n #define PB_DS_DBG_VERIFY(X) assert(X)\n #define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef TWISTER_RAND_GEN_DEBUG\n-#define PB_DS_DBG_ASSERT(X)\n+#else // #ifdef PB_DS_TWISTER_RAND_GEN_DEBUG\n+#define PB_DS_DBG_ASSERT(X) \n #define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n #define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef TWISTER_RAND_GEN_DEBUG\n-\n-    enum\n-      {\n-\tmers_n = 624,\n-\tmers_m = 397,\n-\tmers_r = 31,\n-\tmers_u = 11,\n-\tmers_s = 7,\n-\tmers_t = 15,\n-\tmers_l = 18,\n-\tmers_a = 0x9908B0DF,\n-\tmers_b = 0x9D2C5680,\n-\tmers_c = 0xEFC60000\n-      };\n+#endif // #ifdef PB_DS_TWISTER_RAND_GEN_DEBUG\n \n     twister_rand_gen::\n-    twister_rand_gen(unsigned long seed)\n-    { init(seed); }\n+    twister_rand_gen(unsigned int seed)\n+    : m_base_generator(seed)\n+    {\n+      // Do nothing.\n+    }\n \n     void\n     twister_rand_gen::\n-    init(unsigned long seed)\n-    {\n-      m_a_mt[0]= seed;\n-\n-      for (m_mti=1; m_mti < mers_n; ++m_mti)\n-\tm_a_mt[m_mti] = (1812433253UL* (m_a_mt[m_mti-1] ^ (m_a_mt[m_mti-1] >> 30)) + m_mti);\n-\n-      union\n-      {\n-\tdouble m_f;\n-\tunsigned long m_a[2];\n-      } u;\n-\n-      u.m_f = 1.0;\n-\n-      if (u.m_a[1] == 0x3FF00000)\n-\tm_endianess = little;\n-      else if (u.m_a[0] == 0x3FF00000)\n-\tm_endianess = big;\n-      else\n-\tm_endianess = none;\n-    }\n+    init(unsigned int seed)\n+    { m_base_generator.seed(seed); }\n \n     unsigned long\n     twister_rand_gen::\n     get_unsigned_long(unsigned long min, unsigned long max)\n     {\n       PB_DS_DBG_ASSERT(max >= min);\n+\n       const double prob = get_prob();\n-      const unsigned long rand_word =(unsigned long)((max - min+ 1)*  prob) + min;\n+\n+      const unsigned long rand_word = \n+\t(unsigned long)((max - min + 1) * prob) + min;\n \n       PB_DS_DBG_ASSERT(rand_word <= max);\n+\n       return rand_word;\n     }\n \n     double\n     twister_rand_gen::\n     get_prob()\n     {\n-      union\n-      {\n-\tdouble m_f;\n-\tunsigned long m_a[2];\n-      } u;\n-\n-      unsigned long rand_word = get_unsigned_long_imp();\n-\n-      double ret;\n-\n-      switch(m_endianess)\n-\t{\n-\tcase little:\n-\t  u.m_a[0] =    rand_word << 20;\n-\t  u.m_a[1] = (rand_word >> 12) | 0x3FF00000;\n-\t  ret = u.m_f - 1.0;\n-\t  break;\n-\tcase big:\n-\t  u.m_a[1] =    rand_word << 20;\n-\t  u.m_a[0] = (rand_word >> 12) | 0x3FF00000;\n-\t  ret = u.m_f - 1.0;\n-\t  break;\n-\tcase none:\n-\tdefault:\n-\t  break;\n-\t}\n-\n-      ret = (double)rand_word * (1./((double)(unsigned long)(-1L)+1.));\n-\n-      PB_DS_DBG_ASSERT(ret >= 0);\n-      PB_DS_DBG_ASSERT(ret <= 1);\n+      const double eng_min = m_base_generator.min();\n+      const double eng_range =\n+\tstatic_cast<const double>(m_base_generator.max() - eng_min);\n \n-      return ret;\n-    }\n+      const double eng_res =\n+\tstatic_cast<const double>(m_base_generator() - eng_min);\n \n-    unsigned long\n-    twister_rand_gen::\n-    get_unsigned_long_imp()\n-    {\n-      unsigned long y;\n-      if (m_mti >= mers_n)\n-\t{\n-\t  const unsigned long LOWER_MASK = (1LU << mers_r) - 1;\n-\t  const unsigned long UPPER_MASK = static_cast<unsigned long>(-1L << mers_r);\n-\t  static const unsigned long m_a_mag01[2] = {0, mers_a};\n-\n-\t  unsigned long kk;\n-\t  for (kk=0; kk < mers_n-mers_m; ++kk)\n-\t    {\n-\t      y = (m_a_mt[kk]&  UPPER_MASK) | (m_a_mt[kk+1]&  LOWER_MASK);\n-\t      m_a_mt[kk] = m_a_mt[kk+mers_m] ^ (y >> 1) ^ m_a_mag01[y&  1];\n-\t    }\n-\n-\t  for (; kk < mers_n-1; ++kk)\n-\t    {\n-\t      y = (m_a_mt[kk]&  UPPER_MASK) | (m_a_mt[kk+1]&  LOWER_MASK);\n-\t      m_a_mt[kk] = m_a_mt[kk+(mers_m-mers_n)] ^ (y >> 1) ^ m_a_mag01[y&  1];\n-\t    }\n-\n-\t  y = (m_a_mt[mers_n-1]&  UPPER_MASK) | (m_a_mt[0]&  LOWER_MASK);\n-\t  m_a_mt[mers_n-1] = m_a_mt[mers_m-1] ^ (y >> 1) ^ m_a_mag01[y&  1];\n-\t  m_mti = 0;\n-\t}\n-\n-      y = m_a_mt[m_mti++];\n-\n-      y ^=    y >> mers_u;\n-      y ^= (y << mers_s)&  mers_b;\n-      y ^= (y << mers_t)&  mers_c;\n-      y ^=    y >> mers_l;\n-      return y;\n+      const double ret = eng_res / eng_range;\n+\n+      PB_DS_DBG_ASSERT(ret >=0 && ret <= 1);\n+\n+      return ret;\n     }\n \n #undef PB_DS_DBG_ASSERT"}, {"sha": "cbc8d1473b7234370a336f1ac09836ade98777a6", "filename": "libstdc++-v3/testsuite/util/rng/twister_rand_gen.hpp", "status": "modified", "additions": 18, "deletions": 42, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc3fbb0eb1e89262e6f49e0ee80381d94db5494/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Frng%2Ftwister_rand_gen.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc3fbb0eb1e89262e6f49e0ee80381d94db5494/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Frng%2Ftwister_rand_gen.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Frng%2Ftwister_rand_gen.hpp?ref=4dc3fbb0eb1e89262e6f49e0ee80381d94db5494", "patch": "@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n // General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License\n-// along with this library; see the file COPYING.  If not, write to\n-// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n-// MA 02111-1307, USA.\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n \n // As a special exception, you may use this file as part of a free\n // software library without restriction.  Specifically, if other files\n@@ -41,68 +41,44 @@\n \n /**\n  * @file twister_rand_gen.hpp\n- * Contains a random number generator invented and implemented by\n- *    Makoto Matsumoto\n- *    (http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html)\n  */\n \n #ifndef PB_DS_TWISTER_RAND_GEN_HPP\n #define PB_DS_TWISTER_RAND_GEN_HPP\n \n #include <ctime>\n #include <limits.h>\n+#include <tr1/random>\n \n namespace pb_ds\n {\n   namespace test\n   {\n     class twister_rand_gen\n     {\n-    private:\n-      enum\n-\t{\n-\t  mers_n = 624,\n-\t  mers_m = 397,\n-\t  mers_r = 31,\n-\t  mers_u = 11,\n-\t  mers_s = 7,\n-\t  mers_t = 15,\n-\t  mers_l = 18,\n-\t  mers_a = 0x9908B0DF,\n-\t  mers_b = 0x9D2C5680,\n-\t  mers_c = 0xEFC60000\n-\t};\n-\n-      unsigned long m_a_mt[mers_n];\n-      unsigned long m_mti;\n-\n-      enum endianess_type\n-\t{\n-\t  little,\n-\t  big,\n-\t  none\n-\t};\n-\n-      endianess_type m_endianess;\n-\n-      unsigned long\n-      get_unsigned_long_imp();\n-\n     public:\n-      twister_rand_gen(unsigned long seed = static_cast<unsigned long>(std::time(0)));\n+      twister_rand_gen(unsigned int seed = \n+\t\t       static_cast<unsigned int>(std::time(0)));\n \n       void\n-      init(unsigned long seed);\n+      init(unsigned int seed);\n \n-      static unsigned long\n+      static unsigned int\n       get_time_determined_seed()\n-      { return (static_cast<unsigned long>(std::time(0))); }\n+      { return(static_cast<unsigned int>(std::time(0))); }\n \n       unsigned long\n-      get_unsigned_long(unsigned long min = 0, unsigned long max = UINT_MAX - 1);\n+      get_unsigned_long(unsigned long min = 0, \n+\t\t\tunsigned long max = UINT_MAX - 1);\n \n       double\n       get_prob();\n+\n+    private:\n+      typedef std::tr1::mt19937 base_generator_t;\n+\n+    private:\n+      base_generator_t m_base_generator;\n     };\n   } // namespace test\n } // namespace pb_ds"}]}