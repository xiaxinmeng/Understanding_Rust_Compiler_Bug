{"sha": "dd6d1f8c3f8cd06fa2aa436de20a88c46a84d33c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ2ZDFmOGMzZjhjZDA2ZmEyYWE0MzZkZTIwYTg4YzQ2YTg0ZDMzYw==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2007-01-17T18:42:58Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2007-01-17T18:42:58Z"}, "message": "avr.h (AVR_HAVE_LPMX): New macro.\n\n\t* config/avr/avr.h (AVR_HAVE_LPMX): New macro.\n\t(AVR_ENHANCED): Rename to ...\n\t(AVR_HAVE_MUL): ... new.\n\t(avr_enhanced_p): Rename to ...\n\t(avr_have_mul_p): ... new.\n\t(TARGET_CPU_CPP_BUILTINS): Use 'avr_have_mul_p' instead of \n\t'avr_enhanced_p' for \"__AVR_ENHANCED__\". Define \"__AVR_HAVE_MUL__\".\n\t* config/avr/avr.c (avr_enhanced_p): Rename to ...\n\t(avr_have_mul_p): ... new.\n\t(base_arch_s): Rename 'enhanced' to 'have_mul'.\n\t(avr_override_options): Use 'avr_have_mul_p' and 'have_mul' instead of\n\t'avr_enhanced_p' and 'enhanced'.\n\t(ashlhi3_out, ashrhi3_out, lshrhi3_out, avr_rtx_costs): Use \n\tAVR_HAVE_MUL instead of AVR_ENHANCED.\n\t* avr.md (*tablejump_enh): Use AVR_HAVE_LPMX instead of AVR_ENHANCED.\n\t(mulqi3, *mulqi3_enh, *mulqi3_call, mulqihi3, umulqihi3, mulhi3, \n\t*mulhi3_enh, *mulhi3_call, mulsi3, *mulsi3_call): Use AVR_HAVE_MUL \n\tinstead of AVR_ENHANCED.\n\t(*tablejump_enh): Use AVR_HAVE_LPMX instead of AVR_ENHANCED.\n\t* libgcc.S: Use __AVR_HAVE_MUL__ instead of __AVR_ENHANCED__.\n\t(__tablejump__): Use __AVR_HAVE_LPMX__ instead of __AVR_ENHANCED__.\n\nFrom-SVN: r120865", "tree": {"sha": "5308ef5b9dccfd7d6ce87c837a5fad63b801fa09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5308ef5b9dccfd7d6ce87c837a5fad63b801fa09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd6d1f8c3f8cd06fa2aa436de20a88c46a84d33c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd6d1f8c3f8cd06fa2aa436de20a88c46a84d33c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd6d1f8c3f8cd06fa2aa436de20a88c46a84d33c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd6d1f8c3f8cd06fa2aa436de20a88c46a84d33c/comments", "author": null, "committer": null, "parents": [{"sha": "efb7e1e02617b779d8bd376d9dcccd0cdb4d3a94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efb7e1e02617b779d8bd376d9dcccd0cdb4d3a94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efb7e1e02617b779d8bd376d9dcccd0cdb4d3a94"}], "stats": {"total": 103, "additions": 65, "deletions": 38}, "files": [{"sha": "4794dde9a3e5b1019b7403bf365cf168be2913cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd6d1f8c3f8cd06fa2aa436de20a88c46a84d33c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd6d1f8c3f8cd06fa2aa436de20a88c46a84d33c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd6d1f8c3f8cd06fa2aa436de20a88c46a84d33c", "patch": "@@ -1,3 +1,27 @@\n+2007-01-17  Anatoly Sokolov <aesok@post.ru>\r\n+\r\n+\t* config/avr/avr.h (AVR_HAVE_LPMX): New macro.\r\n+\t(AVR_ENHANCED): Rename to ...\r\n+\t(AVR_HAVE_MUL): ... new.\r\n+\t(avr_enhanced_p): Rename to ...\r\n+\t(avr_have_mul_p): ... new.\r\n+\t(TARGET_CPU_CPP_BUILTINS): Use 'avr_have_mul_p' instead of \r\n+\t'avr_enhanced_p' for \"__AVR_ENHANCED__\". Define \"__AVR_HAVE_MUL__\".\r\n+\t* config/avr/avr.c (avr_enhanced_p): Rename to ...\r\n+\t(avr_have_mul_p): ... new.\r\n+\t(base_arch_s): Rename 'enhanced' to 'have_mul'.\r\n+\t(avr_override_options): Use 'avr_have_mul_p' and 'have_mul' instead of\r\n+\t'avr_enhanced_p' and 'enhanced'.\r\n+\t(ashlhi3_out, ashrhi3_out, lshrhi3_out, avr_rtx_costs): Use \r\n+\tAVR_HAVE_MUL instead of AVR_ENHANCED.\r\n+\t* avr.md (*tablejump_enh): Use AVR_HAVE_LPMX instead of AVR_ENHANCED.\r\n+\t(mulqi3, *mulqi3_enh, *mulqi3_call, mulqihi3, umulqihi3, mulhi3, \r\n+\t*mulhi3_enh, *mulhi3_call, mulsi3, *mulsi3_call): Use AVR_HAVE_MUL \r\n+\tinstead of AVR_ENHANCED.\r\n+\t(*tablejump_enh): Use AVR_HAVE_LPMX instead of AVR_ENHANCED.\r\n+\t* libgcc.S: Use __AVR_HAVE_MUL__ instead of __AVR_ENHANCED__.\r\n+\t(__tablejump__): Use __AVR_HAVE_LPMX__ instead of __AVR_ENHANCED__.\r\n+\n 2007-01-17  Ian Lance Taylor  <iant@google.com>\n \n \t* vec.h (VEC_reserve_exact): Define."}, {"sha": "d222a53d3c07f29f1a1dcbdfa9d5082e17d63717", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd6d1f8c3f8cd06fa2aa436de20a88c46a84d33c/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd6d1f8c3f8cd06fa2aa436de20a88c46a84d33c/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=dd6d1f8c3f8cd06fa2aa436de20a88c46a84d33c", "patch": "@@ -120,8 +120,8 @@ section *progmem_section;\n /* More than 8K of program memory: use \"call\" and \"jmp\".  */\n int avr_mega_p = 0;\n \n-/* Enhanced core: use \"movw\", \"mul\", ...  */\n-int avr_enhanced_p = 0;\n+/* Core have 'MUL*' instructions.  */\n+int avr_have_mul_p = 0;\n \n /* Assembler only.  */\n int avr_asm_only_p = 0;\n@@ -131,7 +131,7 @@ int avr_have_movw_lpmx_p = 0;\n \n struct base_arch_s {\n   int asm_only;\n-  int enhanced;\n+  int have_mul;\n   int mega;\n   int have_movw_lpmx;\n   const char *const macro;\n@@ -324,7 +324,7 @@ avr_override_options (void)\n \n   base = &avr_arch_types[t->arch];\n   avr_asm_only_p = base->asm_only;\n-  avr_enhanced_p = base->enhanced;\n+  avr_have_mul_p = base->have_mul;\n   avr_mega_p = base->mega;\n   avr_have_movw_lpmx_p = base->have_movw_lpmx;\n   avr_base_arch_macro = base->macro;\n@@ -3170,7 +3170,7 @@ ashlhi3_out (rtx insn, rtx operands[], int *len)\n \t\t      AS1 (lsl,%B0)     CR_TAB\n \t\t      AS2 (andi,%B0,0xe0));\n \t    }\n-\t  if (AVR_ENHANCED && scratch)\n+\t  if (AVR_HAVE_MUL && scratch)\n \t    {\n \t      *len = 5;\n \t      return (AS2 (ldi,%3,0x20) CR_TAB\n@@ -3191,7 +3191,7 @@ ashlhi3_out (rtx insn, rtx operands[], int *len)\n \t\t      AS2 (ldi,%3,0xe0) CR_TAB\n \t\t      AS2 (and,%B0,%3));\n \t    }\n-\t  if (AVR_ENHANCED)\n+\t  if (AVR_HAVE_MUL)\n \t    {\n \t      *len = 6;\n \t      return (\"set\"            CR_TAB\n@@ -3211,7 +3211,7 @@ ashlhi3_out (rtx insn, rtx operands[], int *len)\n \t\t  AS1 (lsl,%B0));\n \n \tcase 14:\n-\t  if (AVR_ENHANCED && ldi_ok)\n+\t  if (AVR_HAVE_MUL && ldi_ok)\n \t    {\n \t      *len = 5;\n \t      return (AS2 (ldi,%B0,0x40) CR_TAB\n@@ -3220,7 +3220,7 @@ ashlhi3_out (rtx insn, rtx operands[], int *len)\n \t\t      AS1 (clr,%A0)      CR_TAB\n \t\t      AS1 (clr,__zero_reg__));\n \t    }\n-\t  if (AVR_ENHANCED && scratch)\n+\t  if (AVR_HAVE_MUL && scratch)\n \t    {\n \t      *len = 5;\n \t      return (AS2 (ldi,%3,0x40) CR_TAB\n@@ -3500,7 +3500,7 @@ ashrhi3_out (rtx insn, rtx operands[], int *len)\n \t\t  AS1 (asr,%A0));\n \n \tcase 11:\n-\t  if (AVR_ENHANCED && ldi_ok)\n+\t  if (AVR_HAVE_MUL && ldi_ok)\n \t    {\n \t      *len = 5;\n \t      return (AS2 (ldi,%A0,0x20) CR_TAB\n@@ -3520,7 +3520,7 @@ ashrhi3_out (rtx insn, rtx operands[], int *len)\n \t\t  AS1 (asr,%A0));\n \n \tcase 12:\n-\t  if (AVR_ENHANCED && ldi_ok)\n+\t  if (AVR_HAVE_MUL && ldi_ok)\n \t    {\n \t      *len = 5;\n \t      return (AS2 (ldi,%A0,0x10) CR_TAB\n@@ -3541,7 +3541,7 @@ ashrhi3_out (rtx insn, rtx operands[], int *len)\n \t\t  AS1 (asr,%A0));\n \n \tcase 13:\n-\t  if (AVR_ENHANCED && ldi_ok)\n+\t  if (AVR_HAVE_MUL && ldi_ok)\n \t    {\n \t      *len = 5;\n \t      return (AS2 (ldi,%A0,0x08) CR_TAB\n@@ -3947,7 +3947,7 @@ lshrhi3_out (rtx insn, rtx operands[], int *len)\n \t\t      AS1 (lsr,%A0)     CR_TAB\n \t\t      AS2 (andi,%A0,0x07));\n \t    }\n-\t  if (AVR_ENHANCED && scratch)\n+\t  if (AVR_HAVE_MUL && scratch)\n \t    {\n \t      *len = 5;\n \t      return (AS2 (ldi,%3,0x08) CR_TAB\n@@ -3968,7 +3968,7 @@ lshrhi3_out (rtx insn, rtx operands[], int *len)\n \t\t      AS2 (ldi,%3,0x07) CR_TAB\n \t\t      AS2 (and,%A0,%3));\n \t    }\n-\t  if (AVR_ENHANCED)\n+\t  if (AVR_HAVE_MUL)\n \t    {\n \t      *len = 6;\n \t      return (\"set\"            CR_TAB\n@@ -3988,7 +3988,7 @@ lshrhi3_out (rtx insn, rtx operands[], int *len)\n \t\t  AS1 (lsr,%A0));\n \n \tcase 14:\n-\t  if (AVR_ENHANCED && ldi_ok)\n+\t  if (AVR_HAVE_MUL && ldi_ok)\n \t    {\n \t      *len = 5;\n \t      return (AS2 (ldi,%A0,0x04) CR_TAB\n@@ -3997,7 +3997,7 @@ lshrhi3_out (rtx insn, rtx operands[], int *len)\n \t\t      AS1 (clr,%B0)      CR_TAB\n \t\t      AS1 (clr,__zero_reg__));\n \t    }\n-\t  if (AVR_ENHANCED && scratch)\n+\t  if (AVR_HAVE_MUL && scratch)\n \t    {\n \t      *len = 5;\n \t      return (AS2 (ldi,%3,0x04) CR_TAB\n@@ -4983,15 +4983,15 @@ avr_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total)\n       switch (mode)\n \t{\n \tcase QImode:\n-\t  if (AVR_ENHANCED)\n+\t  if (AVR_HAVE_MUL)\n \t    *total = COSTS_N_INSNS (optimize_size ? 3 : 4);\n \t  else if (optimize_size)\n \t    *total = COSTS_N_INSNS (AVR_MEGA ? 2 : 1);\n \t  else\n \t    return false;\n \n \tcase HImode:\n-\t  if (AVR_ENHANCED)\n+\t  if (AVR_HAVE_MUL)\n \t    *total = COSTS_N_INSNS (optimize_size ? 7 : 10);\n \t  else if (optimize_size)\n \t    *total = COSTS_N_INSNS (AVR_MEGA ? 2 : 1);"}, {"sha": "2c054e6620237c06c204d59f8cdc5a10e4adb759", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd6d1f8c3f8cd06fa2aa436de20a88c46a84d33c/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd6d1f8c3f8cd06fa2aa436de20a88c46a84d33c/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=dd6d1f8c3f8cd06fa2aa436de20a88c46a84d33c", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for ATMEL AVR at90s8515, ATmega103/103L, ATmega603/603L microcontrollers.\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n    Free Software Foundation, Inc.\n    Contributed by Denis Chertykov (denisc@overta.ru)\n \n@@ -37,8 +37,10 @@ Boston, MA 02110-1301, USA.  */\n \tbuiltin_define (\"__AVR_HAVE_LPMX__\");\t\\\n       if (avr_asm_only_p)\t\t\t\\\n \tbuiltin_define (\"__AVR_ASM_ONLY__\");\t\\\n-      if (avr_enhanced_p)\t\t\t\\\n+      if (avr_have_mul_p)\t\t\t\\\n \tbuiltin_define (\"__AVR_ENHANCED__\");\t\\\n+      if (avr_have_mul_p)\t\t\t\\\n+\tbuiltin_define (\"__AVR_HAVE_MUL__\");\t\\\n       if (avr_mega_p)\t\t\t\t\\\n \tbuiltin_define (\"__AVR_MEGA__\");\t\\\n       if (TARGET_NO_INTERRUPTS)\t\t\t\\\n@@ -49,16 +51,17 @@ Boston, MA 02110-1301, USA.  */\n extern const char *avr_base_arch_macro;\n extern const char *avr_extra_arch_macro;\n extern int avr_mega_p;\n-extern int avr_enhanced_p;\n+extern int avr_have_mul_p;\n extern int avr_asm_only_p;\n extern int avr_have_movw_lpmx_p;\n #ifndef IN_LIBGCC2\n extern GTY(()) section *progmem_section;\n #endif\n \n #define AVR_MEGA (avr_mega_p && !TARGET_SHORT_CALLS)\n-#define AVR_ENHANCED (avr_enhanced_p)\n+#define AVR_HAVE_MUL (avr_have_mul_p)\n #define AVR_HAVE_MOVW (avr_have_movw_lpmx_p)\n+#define AVR_HAVE_LPMX (avr_have_movw_lpmx_p)\n \n #define TARGET_VERSION fprintf (stderr, \" (GNU assembler syntax)\");\n "}, {"sha": "d0b96e1130346785bf82d60db4c71c103a0f80b8", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd6d1f8c3f8cd06fa2aa436de20a88c46a84d33c/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd6d1f8c3f8cd06fa2aa436de20a88c46a84d33c/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=dd6d1f8c3f8cd06fa2aa436de20a88c46a84d33c", "patch": "@@ -707,7 +707,7 @@\n \t\t (match_operand:QI 2 \"register_operand\" \"\")))]\n   \"\"\n   \"{\n-  if (!AVR_ENHANCED)\n+  if (!AVR_HAVE_MUL)\n     {\n       emit_insn (gen_mulqi3_call (operands[0], operands[1], operands[2]));\n       DONE;\n@@ -718,7 +718,7 @@\n   [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n \t(mult:QI (match_operand:QI 1 \"register_operand\" \"r\")\n \t\t (match_operand:QI 2 \"register_operand\" \"r\")))]\n-  \"AVR_ENHANCED\"\n+  \"AVR_HAVE_MUL\"\n   \"mul %1,%2\n \tmov %0,r0\n \tclr r1\"\n@@ -737,7 +737,7 @@\n (define_insn \"*mulqi3_call\"\n   [(set (reg:QI 24) (mult:QI (reg:QI 24) (reg:QI 22)))\n    (clobber (reg:QI 22))]\n-  \"!AVR_ENHANCED\"\n+  \"!AVR_HAVE_MUL\"\n   \"%~call __mulqi3\"\n   [(set_attr \"type\" \"xcall\")\n    (set_attr \"cc\" \"clobber\")])\n@@ -746,7 +746,7 @@\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(mult:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"d\"))\n \t\t (sign_extend:HI (match_operand:QI 2 \"register_operand\" \"d\"))))]\n-  \"AVR_ENHANCED\"\n+  \"AVR_HAVE_MUL\"\n   \"muls %1,%2\n \tmovw %0,r0\n \tclr r1\"\n@@ -757,7 +757,7 @@\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(mult:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"r\"))\n \t\t (zero_extend:HI (match_operand:QI 2 \"register_operand\" \"r\"))))]\n-  \"AVR_ENHANCED\"\n+  \"AVR_HAVE_MUL\"\n   \"mul %1,%2\n \tmovw %0,r0\n \tclr r1\"\n@@ -771,7 +771,7 @@\n   \"\"\n   \"\n {\n-  if (!AVR_ENHANCED)\n+  if (!AVR_HAVE_MUL)\n     {\n       emit_insn (gen_mulhi3_call (operands[0], operands[1], operands[2]));\n       DONE;\n@@ -782,7 +782,7 @@\n   [(set (match_operand:HI 0 \"register_operand\" \"=&r\")\n \t(mult:HI (match_operand:HI 1 \"register_operand\" \"r\")\n \t\t (match_operand:HI 2 \"register_operand\" \"r\")))]\n-  \"AVR_ENHANCED\"\n+  \"AVR_HAVE_MUL\"\n   \"mul %A1,%A2\n \tmovw %0,r0\n \tmul %A1,%B2\n@@ -807,7 +807,7 @@\n   [(set (reg:HI 24) (mult:HI (reg:HI 24) (reg:HI 22)))\n    (clobber (reg:HI 22))\n    (clobber (reg:QI 21))]\n-  \"!AVR_ENHANCED\"\n+  \"!AVR_HAVE_MUL\"\n   \"%~call __mulhi3\"\n   [(set_attr \"type\" \"xcall\")\n    (set_attr \"cc\" \"clobber\")])\n@@ -821,14 +821,14 @@\n \t      (clobber (reg:HI 26))\n \t      (clobber (reg:HI 30))])\n    (set (match_operand:SI 0 \"register_operand\" \"\") (reg:SI 22))]\n-  \"AVR_ENHANCED\"\n+  \"AVR_HAVE_MUL\"\n   \"\")\n \n (define_insn \"*mulsi3_call\"\n   [(set (reg:SI 22) (mult:SI (reg:SI 22) (reg:SI 18)))\n    (clobber (reg:HI 26))\n    (clobber (reg:HI 30))]\n-  \"AVR_ENHANCED\"\n+  \"AVR_HAVE_MUL\"\n   \"%~call __mulsi3\"\n   [(set_attr \"type\" \"xcall\")\n    (set_attr \"cc\" \"clobber\")])\n@@ -2220,7 +2220,7 @@\n \t\t\tUNSPEC_INDEX_JMP))\n    (use (label_ref (match_operand 1 \"\" \"\")))\n    (clobber (match_dup 0))]\n-  \"AVR_MEGA && AVR_ENHANCED\"\n+  \"AVR_MEGA && AVR_HAVE_LPMX\"\n   \"lsl r30\n \trol r31\n \tlpm __tmp_reg__,Z+"}, {"sha": "c6814fe650e84806599dd5def375cb714272ec1e", "filename": "gcc/config/avr/libgcc.S", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd6d1f8c3f8cd06fa2aa436de20a88c46a84d33c/gcc%2Fconfig%2Favr%2Flibgcc.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd6d1f8c3f8cd06fa2aa436de20a88c46a84d33c/gcc%2Fconfig%2Favr%2Flibgcc.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Flibgcc.S?ref=dd6d1f8c3f8cd06fa2aa436de20a88c46a84d33c", "patch": "@@ -1,5 +1,5 @@\n /*  -*- Mode: Asm -*-  */\n-/* Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n+/* Copyright (C) 1998, 1999, 2000, 2007 Free Software Foundation, Inc.\n    Contributed by Denis Chertykov <denisc@overta.ru>\n \n This file is free software; you can redistribute it and/or modify it\n@@ -56,7 +56,7 @@ Boston, MA 02110-1301, USA.  */\n \t.endm\n \n /* Note: mulqi3, mulhi3 are open-coded on the enhanced core.  */\n-#if !defined (__AVR_ENHANCED__)\n+#if !defined (__AVR_HAVE_MUL__)\n /*******************************************************\n                Multiplication  8 x 8\n *******************************************************/\n@@ -159,7 +159,7 @@ __mulhi3_exit:\n \n .endfunc\n #endif /* defined (L_mulhi3) */\n-#endif /* !defined (__AVR_ENHANCED__) */\n+#endif /* !defined (__AVR_HAVE_MUL__) */\n \n #if defined (L_mulhisi3)\n \t.global\t__mulhisi3\n@@ -217,7 +217,7 @@ __umulhisi3:\n \t.global\t__mulsi3\n \t.func\t__mulsi3\n __mulsi3:\n-#if defined (__AVR_ENHANCED__)\n+#if defined (__AVR_HAVE_MUL__)\n \tmul\tr_arg1L, r_arg2L\n \tmovw\tr_resL, r0\n \tmul\tr_arg1H, r_arg2H\n@@ -281,7 +281,7 @@ __mulsi3_exit:\n \tmov_h\tr_arg1H,r_resH\n \tmov_l\tr_arg1L,r_resL\n \tret\n-#endif /* !defined (__AVR_ENHANCED__) */\n+#endif /* defined (__AVR_HAVE_MUL__) */\n #undef r_arg1L \n #undef r_arg1H \n #undef r_arg1HL\n@@ -668,7 +668,7 @@ __tablejump2__:\n \trol\tr31\n \t.global __tablejump__\n __tablejump__:\n-#if defined (__AVR_ENHANCED__)\n+#if defined (__AVR_HAVE_LPMX__)\n \tlpm\t__tmp_reg__, Z+\n \tlpm\tr31, Z\n \tmov\tr30, __tmp_reg__"}]}