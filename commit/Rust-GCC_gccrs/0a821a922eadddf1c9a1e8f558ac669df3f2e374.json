{"sha": "0a821a922eadddf1c9a1e8f558ac669df3f2e374", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE4MjFhOTIyZWFkZGRmMWM5YTFlOGY1NThhYzY2OWRmM2YyZTM3NA==", "commit": {"author": {"name": "Feng Wang", "email": "fengwang@nudt.edu.cn", "date": "2006-01-09T02:27:45Z"}, "committer": {"name": "Feng Wang", "email": "fengwang@gcc.gnu.org", "date": "2006-01-09T02:27:45Z"}, "message": "fortran ChangeLog entry:\n\n2006-01-09  Feng Wang  <fengwang@nudt.edu.cn>\n\n\tPR fortran/12456\n\t* trans-expr.c (gfc_to_single_character): New function that converts\n\tstring to single character if its length is 1.\n\t(gfc_build_compare_string):New function that compare string and handle\n\tsingle character specially.\n\t(gfc_conv_expr_op): Use gfc_build_compare_string.\n\t(gfc_trans_string_copy): Use gfc_to_single_character.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_strcmp): Use\n\tgfc_build_compare_string.\n\t* trans.h (gfc_build_compare_string): Add prototype.\n\ntestsuite ChangeLog entry:\n2006-01-09  Feng Wang  <fengwang@nudt.edu.cn>\n\n\tPR fortran/12456\n\t* gfortran.dg/single_char_string.f90: New test.\n\nFrom-SVN: r109489", "tree": {"sha": "06ce878d70c9a53f32fa40b3f08dc1bcb7dc3b5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06ce878d70c9a53f32fa40b3f08dc1bcb7dc3b5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a821a922eadddf1c9a1e8f558ac669df3f2e374", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a821a922eadddf1c9a1e8f558ac669df3f2e374", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a821a922eadddf1c9a1e8f558ac669df3f2e374", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a821a922eadddf1c9a1e8f558ac669df3f2e374/comments", "author": null, "committer": null, "parents": [{"sha": "7d60270a87ee95b8b67b3f86442a648600ba36cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d60270a87ee95b8b67b3f86442a648600ba36cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d60270a87ee95b8b67b3f86442a648600ba36cb"}], "stats": {"total": 149, "additions": 134, "deletions": 15}, "files": [{"sha": "a745970f38472deca9fd342ad3d9ef02dcd6810e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a821a922eadddf1c9a1e8f558ac669df3f2e374/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a821a922eadddf1c9a1e8f558ac669df3f2e374/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0a821a922eadddf1c9a1e8f558ac669df3f2e374", "patch": "@@ -1,3 +1,16 @@\n+2006-01-09  Feng Wang  <fengwang@nudt.edu.cn>\n+\n+\tPR fortran/12456\n+\t* trans-expr.c (gfc_to_single_character): New function that converts\n+\tstring to single character if its length is 1.\n+\t(gfc_build_compare_string):New function that compare string and handle\n+\tsingle character specially.\n+\t(gfc_conv_expr_op): Use gfc_build_compare_string.\n+\t(gfc_trans_string_copy): Use gfc_to_single_character.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_strcmp): Use\n+\tgfc_build_compare_string.\n+\t* trans.h (gfc_build_compare_string): Add prototype.\n+\n 2006-01-09  Feng Wang  <fengwang@nudt.edu.cn>\n \n \t* simplify.c (gfc_simplify_char): Use UCHAR_MAX instead of literal"}, {"sha": "e46075eaa8d44610c7f3fee0bf558a2c1c022c1c", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 71, "deletions": 12, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a821a922eadddf1c9a1e8f558ac669df3f2e374/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a821a922eadddf1c9a1e8f558ac669df3f2e374/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=0a821a922eadddf1c9a1e8f558ac669df3f2e374", "patch": "@@ -901,7 +901,6 @@ gfc_conv_concat_op (gfc_se * se, gfc_expr * expr)\n   se->string_length = len;\n }\n \n-\n /* Translates an op expression. Common (binary) cases are handled by this\n    function, others are passed on. Recursion is used in either case.\n    We use the fact that (op1.ts == op2.ts) (except for the power\n@@ -1043,23 +1042,15 @@ gfc_conv_expr_op (gfc_se * se, gfc_expr * expr)\n   gfc_conv_expr (&rse, expr->value.op.op2);\n   gfc_add_block_to_block (&se->pre, &rse.pre);\n \n-  /* For string comparisons we generate a library call, and compare the return\n-     value with 0.  */\n   if (checkstring)\n     {\n       gfc_conv_string_parameter (&lse);\n       gfc_conv_string_parameter (&rse);\n-      tmp = NULL_TREE;\n-      tmp = gfc_chainon_list (tmp, lse.string_length);\n-      tmp = gfc_chainon_list (tmp, lse.expr);\n-      tmp = gfc_chainon_list (tmp, rse.string_length);\n-      tmp = gfc_chainon_list (tmp, rse.expr);\n-\n-      /* Build a call for the comparison.  */\n-      lse.expr = build_function_call_expr (gfor_fndecl_compare_string, tmp);\n-      gfc_add_block_to_block (&lse.post, &rse.post);\n \n+      lse.expr = gfc_build_compare_string (lse.string_length, lse.expr,\n+\t\t\t\t\t   rse.string_length, rse.expr);\n       rse.expr = integer_zero_node;\n+      gfc_add_block_to_block (&lse.post, &rse.post);\n     }\n \n   type = gfc_typenode_for_spec (&expr->ts);\n@@ -1078,6 +1069,63 @@ gfc_conv_expr_op (gfc_se * se, gfc_expr * expr)\n   gfc_add_block_to_block (&se->post, &lse.post);\n }\n \n+/* If a string's length is one, we convert it to a single character.  */\n+\n+static tree\n+gfc_to_single_character (tree len, tree str)\n+{\n+  gcc_assert (POINTER_TYPE_P (TREE_TYPE (str)));\n+\n+  if (INTEGER_CST_P (len) && TREE_INT_CST_LOW (len) == 1\n+    && TREE_INT_CST_HIGH (len) == 0)\n+    {\n+      str = fold_convert (pchar_type_node, str);\n+      return build_fold_indirect_ref (str);\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+/* Compare two strings. If they are all single characters, the result is the\n+   subtraction of them. Otherwise, we build a library call.  */\n+\n+tree\n+gfc_build_compare_string (tree len1, tree str1, tree len2, tree str2)\n+{\n+  tree sc1;\n+  tree sc2;\n+  tree type;\n+  tree tmp;\n+\n+  gcc_assert (POINTER_TYPE_P (TREE_TYPE (str1)));\n+  gcc_assert (POINTER_TYPE_P (TREE_TYPE (str2)));\n+\n+  type = gfc_get_int_type (gfc_default_integer_kind);\n+\n+  sc1 = gfc_to_single_character (len1, str1);\n+  sc2 = gfc_to_single_character (len2, str2);\n+\n+  /* Deal with single character specially.  */\n+  if (sc1 != NULL_TREE && sc2 != NULL_TREE)\n+    {\n+      sc1 = fold_convert (type, sc1);\n+      sc2 = fold_convert (type, sc2);\n+      tmp = fold_build2 (MINUS_EXPR, type, sc1, sc2);\n+    }\n+   else\n+    {\n+      tmp = NULL_TREE;\n+      tmp = gfc_chainon_list (tmp, len1);\n+      tmp = gfc_chainon_list (tmp, str1);\n+      tmp = gfc_chainon_list (tmp, len2);\n+      tmp = gfc_chainon_list (tmp, str2);\n+\n+      /* Build a call for the comparison.  */\n+      tmp = build_function_call_expr (gfor_fndecl_compare_string, tmp);\n+    }\n+\n+  return tmp;\n+}\n \n static void\n gfc_conv_function_val (gfc_se * se, gfc_symbol * sym)\n@@ -1818,6 +1866,17 @@ gfc_trans_string_copy (stmtblock_t * block, tree dlen, tree dest,\n \t\t       tree slen, tree src)\n {\n   tree tmp;\n+  tree dsc;\n+  tree ssc;\n+\n+  /* Deal with single character specially.  */\n+  dsc = gfc_to_single_character (dlen, dest);\n+  ssc = gfc_to_single_character (slen, src);\n+  if (dsc != NULL_TREE && ssc != NULL_TREE)\n+    {\n+      gfc_add_modify_expr (block, dsc, ssc);\n+      return;\n+    }\n \n   tmp = NULL_TREE;\n   tmp = gfc_chainon_list (tmp, dlen);"}, {"sha": "4c6d63abf9a9311eec6c1528b8318418d9af1090", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a821a922eadddf1c9a1e8f558ac669df3f2e374/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a821a922eadddf1c9a1e8f558ac669df3f2e374/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=0a821a922eadddf1c9a1e8f558ac669df3f2e374", "patch": "@@ -2267,13 +2267,17 @@ gfc_conv_intrinsic_strcmp (gfc_se * se, gfc_expr * expr, int op)\n {\n   tree type;\n   tree args;\n+  tree arg2;\n \n   args = gfc_conv_intrinsic_function_args (se, expr);\n-  /* Build a call for the comparison.  */\n-  se->expr = build_function_call_expr (gfor_fndecl_compare_string, args);\n+  arg2 = TREE_CHAIN (TREE_CHAIN (args));\n+\n+  se->expr = gfc_build_compare_string (TREE_VALUE (args),\n+\t\tTREE_VALUE (TREE_CHAIN (args)), TREE_VALUE (arg2),\n+\t\tTREE_VALUE (TREE_CHAIN (arg2)));\n \n   type = gfc_typenode_for_spec (&expr->ts);\n-  se->expr = build2 (op, type, se->expr,\n+  se->expr = fold_build2 (op, type, se->expr,\n \t\t     build_int_cst (TREE_TYPE (se->expr), 0));\n }\n "}, {"sha": "e0b5138d91998e04d39afa9c12469108ba99c000", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a821a922eadddf1c9a1e8f558ac669df3f2e374/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a821a922eadddf1c9a1e8f558ac669df3f2e374/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=0a821a922eadddf1c9a1e8f558ac669df3f2e374", "patch": "@@ -268,6 +268,9 @@ void gfc_make_safe_expr (gfc_se * se);\n /* Makes sure se is suitable for passing as a function string parameter.  */\n void gfc_conv_string_parameter (gfc_se * se);\n \n+/* Compare two strings.  */\n+tree gfc_build_compare_string (tree, tree, tree, tree);\n+\n /* Add an item to the end of TREE_LIST.  */\n tree gfc_chainon_list (tree, tree);\n "}, {"sha": "e29aa6e78990e0a17dbb7391a4faa82f1b6f963f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a821a922eadddf1c9a1e8f558ac669df3f2e374/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a821a922eadddf1c9a1e8f558ac669df3f2e374/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0a821a922eadddf1c9a1e8f558ac669df3f2e374", "patch": "@@ -1,3 +1,7 @@\n+2006-01-09  Feng Wang  <fengwang@nudt.edu.cn>\n+\n+\t* gfortran.dg/single_char_string.f90: New test.\n+\n 2006-01-09  Feng Wang  <fengwang@nudt.edu.cn>\n \n \t* gfortran.dg/ichar_2.f90: New test."}, {"sha": "479456cfea86e404970791a1fa64f0880b7039bd", "filename": "gcc/testsuite/gfortran.dg/single_char_string.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a821a922eadddf1c9a1e8f558ac669df3f2e374/gcc%2Ftestsuite%2Fgfortran.dg%2Fsingle_char_string.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a821a922eadddf1c9a1e8f558ac669df3f2e374/gcc%2Ftestsuite%2Fgfortran.dg%2Fsingle_char_string.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsingle_char_string.f90?ref=0a821a922eadddf1c9a1e8f558ac669df3f2e374", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do run }\n+! { dg-options \"-fdump-tree-original\" }\n+! PR12456 - Optimize string(k:k) as single character.\n+\n+Program pr12456\n+character a\n+character b\n+character (len=5) :: c\n+integer i\n+\n+b = 'a'\n+a = b\n+if (a .ne. 'a') call abort()\n+if (a .ne. b) call abort()\n+c (3:3) = 'a'\n+if (c (3:3) .ne. b) call abort ()\n+if (c (3:3) .ne. 'a') call abort ()\n+if (LGT (a, c (3:3))) call abort ()\n+if (LGT (a, 'a')) call abort ()\n+\n+i = 3\n+c (i:i) = 'a'\n+if (c (i:i) .ne. b) call abort ()\n+if (c (i:i) .ne. 'a') call abort ()\n+if (LGT (a, c (i:i))) call abort ()\n+\n+if (a .gt. char (255)) call abort ()\n+end\n+\n+! There should not be _gfortran_compare_string and _gfortran_copy_string in\n+! the dumped file.\n+\n+! { dg-final { scan-tree-dump-times \"_gfortran_compare_string\" 0 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_copy_string\" 0 \"original\" } }\n+\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}