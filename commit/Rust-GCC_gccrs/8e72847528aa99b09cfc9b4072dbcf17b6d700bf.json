{"sha": "8e72847528aa99b09cfc9b4072dbcf17b6d700bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU3Mjg0NzUyOGFhOTliMDljZmM5YjQwNzJkYmNmMTdiNmQ3MDBiZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-12-30T08:53:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-12-30T08:53:10Z"}, "message": "re PR tree-optimization/59501 (Vector Gather with GCC 4.9 2013-12-08 Snapshot)\n\n\tPR target/59501\n\t* config/i386/i386.c (ix86_save_reg): Don't return true for drap_reg\n\tif !crtl->stack_realign_needed.\n\t(ix86_finalize_stack_realign_flags): If drap_reg isn't live on entry\n\tand stack_realign_needed will be false, clear drap_reg and need_drap.\n\tOptimize leaf functions that don't need stack frame even if\n\tcrtl->need_drap.\n\n\t* gcc.target/i386/pr59501-1.c: New test.\n\t* gcc.target/i386/pr59501-1a.c: New test.\n\t* gcc.target/i386/pr59501-2.c: New test.\n\t* gcc.target/i386/pr59501-2a.c: New test.\n\t* gcc.target/i386/pr59501-3.c: New test.\n\t* gcc.target/i386/pr59501-3a.c: New test.\n\t* gcc.target/i386/pr59501-4.c: New test.\n\t* gcc.target/i386/pr59501-4a.c: New test.\n\t* gcc.target/i386/pr59501-5.c: New test.\n\t* gcc.target/i386/pr59501-6.c: New test.\n\nFrom-SVN: r206243", "tree": {"sha": "0649e97443c7d9592033f4f7069d09922c90a60c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0649e97443c7d9592033f4f7069d09922c90a60c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e72847528aa99b09cfc9b4072dbcf17b6d700bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e72847528aa99b09cfc9b4072dbcf17b6d700bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e72847528aa99b09cfc9b4072dbcf17b6d700bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e72847528aa99b09cfc9b4072dbcf17b6d700bf/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5cf5a0e59b7ad7736d36b0042881f0c0788ccd82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cf5a0e59b7ad7736d36b0042881f0c0788ccd82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cf5a0e59b7ad7736d36b0042881f0c0788ccd82"}], "stats": {"total": 217, "additions": 215, "deletions": 2}, "files": [{"sha": "b0870aa1f851552b32fb36b3a9cc35a107030ea5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e72847528aa99b09cfc9b4072dbcf17b6d700bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e72847528aa99b09cfc9b4072dbcf17b6d700bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e72847528aa99b09cfc9b4072dbcf17b6d700bf", "patch": "@@ -1,3 +1,13 @@\n+2013-12-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/59501\n+\t* config/i386/i386.c (ix86_save_reg): Don't return true for drap_reg\n+\tif !crtl->stack_realign_needed.\n+\t(ix86_finalize_stack_realign_flags): If drap_reg isn't live on entry\n+\tand stack_realign_needed will be false, clear drap_reg and need_drap.\n+\tOptimize leaf functions that don't need stack frame even if\n+\tcrtl->need_drap.\n+\n 2013-12-30   H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/59605"}, {"sha": "0a90ead8970ea15a3ac1768bd93384da3d2264cc", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e72847528aa99b09cfc9b4072dbcf17b6d700bf/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e72847528aa99b09cfc9b4072dbcf17b6d700bf/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8e72847528aa99b09cfc9b4072dbcf17b6d700bf", "patch": "@@ -9189,7 +9189,9 @@ ix86_save_reg (unsigned int regno, bool maybe_eh_return)\n \t}\n     }\n \n-  if (crtl->drap_reg && regno == REGNO (crtl->drap_reg))\n+  if (crtl->drap_reg\n+      && regno == REGNO (crtl->drap_reg)\n+      && crtl->stack_realign_needed)\n     return true;\n \n   return (df_regs_ever_live_p (regno)\n@@ -10427,12 +10429,23 @@ ix86_finalize_stack_realign_flags (void)\n       return;\n     }\n \n+  /* If drap has been set, but it actually isn't live at the start\n+     of the function and !stack_realign, there is no reason to set it up.  */\n+  if (crtl->drap_reg && !stack_realign)\n+    {\n+      basic_block bb = ENTRY_BLOCK_PTR_FOR_FN (cfun)->next_bb;\n+      if (! REGNO_REG_SET_P (DF_LR_IN (bb), REGNO (crtl->drap_reg)))\n+\t{\n+\t  crtl->drap_reg = NULL_RTX;\n+\t  crtl->need_drap = false;\n+\t}\n+    }\n+\n   /* If the only reason for frame_pointer_needed is that we conservatively\n      assumed stack realignment might be needed, but in the end nothing that\n      needed the stack alignment had been spilled, clear frame_pointer_needed\n      and say we don't need stack realignment.  */\n   if (stack_realign\n-      && !crtl->need_drap\n       && frame_pointer_needed\n       && crtl->is_leaf\n       && flag_omit_frame_pointer\n@@ -10470,6 +10483,18 @@ ix86_finalize_stack_realign_flags (void)\n \t      }\n \t}\n \n+      /* If drap has been set, but it actually isn't live at the start\n+\t of the function, there is no reason to set it up.  */\n+      if (crtl->drap_reg)\n+\t{\n+\t  basic_block bb = ENTRY_BLOCK_PTR_FOR_FN (cfun)->next_bb;\n+\t  if (! REGNO_REG_SET_P (DF_LR_IN (bb), REGNO (crtl->drap_reg)))\n+\t    {\n+\t      crtl->drap_reg = NULL_RTX;\n+\t      crtl->need_drap = false;\n+\t    }\n+\t}\n+\n       frame_pointer_needed = false;\n       stack_realign = false;\n       crtl->max_used_stack_slot_alignment = incoming_stack_boundary;"}, {"sha": "e5f1a82c8879d8aeedd760640737b780190db971", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e72847528aa99b09cfc9b4072dbcf17b6d700bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e72847528aa99b09cfc9b4072dbcf17b6d700bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8e72847528aa99b09cfc9b4072dbcf17b6d700bf", "patch": "@@ -1,3 +1,17 @@\n+2013-12-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/59501\n+\t* gcc.target/i386/pr59501-1.c: New test.\n+\t* gcc.target/i386/pr59501-1a.c: New test.\n+\t* gcc.target/i386/pr59501-2.c: New test.\n+\t* gcc.target/i386/pr59501-2a.c: New test.\n+\t* gcc.target/i386/pr59501-3.c: New test.\n+\t* gcc.target/i386/pr59501-3a.c: New test.\n+\t* gcc.target/i386/pr59501-4.c: New test.\n+\t* gcc.target/i386/pr59501-4a.c: New test.\n+\t* gcc.target/i386/pr59501-5.c: New test.\n+\t* gcc.target/i386/pr59501-6.c: New test.\n+\n 2013-12-30   H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/59605"}, {"sha": "6a104eef1adcbe6bd12e6d2351c0cb85146db436", "filename": "gcc/testsuite/gcc.target/i386/pr59501-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e72847528aa99b09cfc9b4072dbcf17b6d700bf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e72847528aa99b09cfc9b4072dbcf17b6d700bf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-1.c?ref=8e72847528aa99b09cfc9b4072dbcf17b6d700bf", "patch": "@@ -0,0 +1,30 @@\n+/* PR target/59501 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx -mno-accumulate-outgoing-args\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include CHECK_H\n+\n+typedef double V __attribute__ ((vector_size (32)));\n+\n+__attribute__((noinline, noclone)) V\n+foo (double *x, unsigned *y)\n+{\n+  V r = { x[y[0]], x[y[1]], x[y[2]], x[y[3]] };\n+  return r;\n+}\n+\n+static void\n+TEST (void)\n+{\n+  double a[16];\n+  unsigned b[4] = { 5, 0, 15, 7 };\n+  int i;\n+  for (i = 0; i < 16; i++)\n+    a[i] = 0.5 + i;\n+  V v = foo (a, b);\n+  if (v[0] != 5.5 || v[1] != 0.5 || v[2] != 15.5 || v[3] != 7.5)\n+    __builtin_abort ();\n+}"}, {"sha": "5b468e55635b83f108b4832bfa5e1036cdbe1e65", "filename": "gcc/testsuite/gcc.target/i386/pr59501-1a.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e72847528aa99b09cfc9b4072dbcf17b6d700bf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e72847528aa99b09cfc9b4072dbcf17b6d700bf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-1a.c?ref=8e72847528aa99b09cfc9b4072dbcf17b6d700bf", "patch": "@@ -0,0 +1,17 @@\n+/* PR target/59501 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx -mno-accumulate-outgoing-args\" } */\n+\n+typedef double V __attribute__ ((vector_size (32)));\n+\n+V\n+foo (double *x, unsigned *y)\n+{\n+  V r = { x[y[0]], x[y[1]], x[y[2]], x[y[3]] };\n+  return r;\n+}\n+\n+/* Verify no dynamic realignment is performed.  */\n+/* { dg-final { scan-assembler-not \"and\\[^\\n\\r]*sp\" } } */\n+/* And DRAP isn't needed either.  */\n+/* { dg-final { scan-assembler-not \"r10\" } } */"}, {"sha": "8ce177deb8e42de9ec17c6079475c21acfb17423", "filename": "gcc/testsuite/gcc.target/i386/pr59501-2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e72847528aa99b09cfc9b4072dbcf17b6d700bf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e72847528aa99b09cfc9b4072dbcf17b6d700bf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-2.c?ref=8e72847528aa99b09cfc9b4072dbcf17b6d700bf", "patch": "@@ -0,0 +1,5 @@\n+/* PR target/59501 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx -maccumulate-outgoing-args\" } */\n+\n+#include \"pr59501-1.c\""}, {"sha": "c0fe36269611d658b4ff99e9cd3d33bc9110fb9a", "filename": "gcc/testsuite/gcc.target/i386/pr59501-2a.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e72847528aa99b09cfc9b4072dbcf17b6d700bf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e72847528aa99b09cfc9b4072dbcf17b6d700bf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-2a.c?ref=8e72847528aa99b09cfc9b4072dbcf17b6d700bf", "patch": "@@ -0,0 +1,10 @@\n+/* PR target/59501 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx -maccumulate-outgoing-args\" } */\n+\n+#include \"pr59501-1a.c\"\n+\n+/* Verify no dynamic realignment is performed.  */\n+/* { dg-final { scan-assembler-not \"and\\[^\\n\\r]*sp\" } } */\n+/* And DRAP isn't needed either.  */\n+/* { dg-final { scan-assembler-not \"r10\" } } */"}, {"sha": "0bf5ef6139a31650b13c232903c8b13cd066e2c1", "filename": "gcc/testsuite/gcc.target/i386/pr59501-3.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e72847528aa99b09cfc9b4072dbcf17b6d700bf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e72847528aa99b09cfc9b4072dbcf17b6d700bf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-3.c?ref=8e72847528aa99b09cfc9b4072dbcf17b6d700bf", "patch": "@@ -0,0 +1,30 @@\n+/* PR target/59501 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx -mno-accumulate-outgoing-args\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include CHECK_H\n+\n+typedef double V __attribute__ ((vector_size (32)));\n+\n+__attribute__((noinline, noclone)) V\n+foo (double *x, int a, int b, int c, int d, int e, int f, unsigned *y)\n+{\n+  V r = { x[y[0]], x[y[1]], x[y[2]], x[y[3]] };\n+  return r;\n+}\n+\n+static void\n+TEST (void)\n+{\n+  double a[16];\n+  unsigned b[4] = { 5, 0, 15, 7 };\n+  int i;\n+  for (i = 0; i < 16; i++)\n+    a[i] = 0.5 + i;\n+  V v = foo (a, 0, 0, 0, 0, 0, 0, b);\n+  if (v[0] != 5.5 || v[1] != 0.5 || v[2] != 15.5 || v[3] != 7.5)\n+    __builtin_abort ();\n+}"}, {"sha": "ded4336fc88e2c0c36bc8b8ef70d5e27fa6e9b30", "filename": "gcc/testsuite/gcc.target/i386/pr59501-3a.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e72847528aa99b09cfc9b4072dbcf17b6d700bf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-3a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e72847528aa99b09cfc9b4072dbcf17b6d700bf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-3a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-3a.c?ref=8e72847528aa99b09cfc9b4072dbcf17b6d700bf", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/59501 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx -mno-accumulate-outgoing-args\" } */\n+\n+typedef double V __attribute__ ((vector_size (32)));\n+\n+V\n+foo (double *x, int a, int b, int c, int d, int e, int f, unsigned *y)\n+{\n+  V r = { x[y[0]], x[y[1]], x[y[2]], x[y[3]] };\n+  return r;\n+}\n+\n+/* Verify no dynamic realignment is performed.  */\n+/* { dg-final { scan-assembler-not \"and\\[^\\n\\r]*sp\" } } */"}, {"sha": "43a5ad2428aac4aae107c76feb5ba4e912eadf2a", "filename": "gcc/testsuite/gcc.target/i386/pr59501-4.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e72847528aa99b09cfc9b4072dbcf17b6d700bf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e72847528aa99b09cfc9b4072dbcf17b6d700bf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-4.c?ref=8e72847528aa99b09cfc9b4072dbcf17b6d700bf", "patch": "@@ -0,0 +1,5 @@\n+/* PR target/59501 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx -maccumulate-outgoing-args\" } */\n+\n+#include \"pr59501-3.c\""}, {"sha": "5c3cb683a2ebd7133077edbf21a00d1882627e12", "filename": "gcc/testsuite/gcc.target/i386/pr59501-4a.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e72847528aa99b09cfc9b4072dbcf17b6d700bf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-4a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e72847528aa99b09cfc9b4072dbcf17b6d700bf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-4a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-4a.c?ref=8e72847528aa99b09cfc9b4072dbcf17b6d700bf", "patch": "@@ -0,0 +1,8 @@\n+/* PR target/59501 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx -maccumulate-outgoing-args\" } */\n+\n+#include \"pr59501-3a.c\"\n+\n+/* Verify no dynamic realignment is performed.  */\n+/* { dg-final { scan-assembler-not \"and\\[^\\n\\r]*sp\" { xfail *-*-* } } } */"}, {"sha": "f2feca8ec4f09997be0194e7ad33f2d017346473", "filename": "gcc/testsuite/gcc.target/i386/pr59501-5.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e72847528aa99b09cfc9b4072dbcf17b6d700bf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e72847528aa99b09cfc9b4072dbcf17b6d700bf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-5.c?ref=8e72847528aa99b09cfc9b4072dbcf17b6d700bf", "patch": "@@ -0,0 +1,39 @@\n+/* PR target/59501 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx -mno-accumulate-outgoing-args\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include CHECK_H\n+\n+typedef double V __attribute__ ((vector_size (32)));\n+\n+__attribute__((noinline, noclone)) void\n+bar (char *p)\n+{\n+  p[0] = 1;\n+  p[37] = 2;\n+  asm volatile (\"\" : : \"r\" (p) : \"memory\");\n+}\n+\n+__attribute__((noinline, noclone)) V\n+foo (double *x, int a, int b, int c, int d, int e, int f, unsigned *y)\n+{\n+  bar (__builtin_alloca (a + b + c + d + e + f));\n+  V r = { x[y[0]], x[y[1]], x[y[2]], x[y[3]] };\n+  return r;\n+}\n+\n+static void\n+TEST (void)\n+{\n+  double a[16];\n+  unsigned b[4] = { 5, 0, 15, 7 };\n+  int i;\n+  for (i = 0; i < 16; i++)\n+    a[i] = 0.5 + i;\n+  V v = foo (a, 0, 30, 0, 0, 8, 0, b);\n+  if (v[0] != 5.5 || v[1] != 0.5 || v[2] != 15.5 || v[3] != 7.5)  \n+    __builtin_abort ();\n+}"}, {"sha": "d0ac2425b9029b99618218f5601bf9bd0f48e397", "filename": "gcc/testsuite/gcc.target/i386/pr59501-6.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e72847528aa99b09cfc9b4072dbcf17b6d700bf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e72847528aa99b09cfc9b4072dbcf17b6d700bf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59501-6.c?ref=8e72847528aa99b09cfc9b4072dbcf17b6d700bf", "patch": "@@ -0,0 +1,5 @@\n+/* PR target/59501 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx -maccumulate-outgoing-args\" } */\n+\n+#include \"pr59501-5.c\""}]}