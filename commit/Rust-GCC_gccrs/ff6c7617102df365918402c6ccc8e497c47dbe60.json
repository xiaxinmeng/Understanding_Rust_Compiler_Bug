{"sha": "ff6c7617102df365918402c6ccc8e497c47dbe60", "node_id": "C_kwDOANBUbNoAKGZmNmM3NjE3MTAyZGYzNjU5MTg0MDJjNmNjYzhlNDk3YzQ3ZGJlNjA", "commit": {"author": {"name": "Takayuki 'January June' Suwa", "email": "jjsuwa_sys3175@yahoo.co.jp", "date": "2023-01-14T05:03:55Z"}, "committer": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2023-01-14T18:03:14Z"}, "message": "xtensa: Remove old broken tweak for leaf function\n\nIn the before-IRA era, ORDER_REGS_FOR_LOCAL_ALLOC was called for each\nfunction in Xtensa, and there was register allocation table reordering\nfor leaf functions to compensate for the poor performance of local-alloc.\n\nToday the adjustment hook is still called via its alternative\nADJUST_REG_ALLOC_ORDER, but it is only called once at the start of the IRA,\nand leaf_function_p() erroneously returns true and also gives no argument\ncount.\n\nThat straightforwardly misleads register allocation that all functions are\nalways leaves with no arguments, which leads to inefficiencies in allocation\nresults.\n\nFortunately, IRA is smart enough than local-alloc to not need such assistance.\n\nThis patch does away with the antiquated by removing the wreckage that no\nlonger works.\n\ngcc/ChangeLog:\n\n\t* config/xtensa/xtensa-protos.h (order_regs_for_local_alloc):\n\tRename to xtensa_adjust_reg_alloc_order.\n\t* config/xtensa/xtensa.cc (xtensa_adjust_reg_alloc_order):\n\tDitto.  And also remove code to reorder register numbers for\n\tleaf functions, rename the tables, and adjust the allocation\n\torder for the call0 ABI to use register A0 more.\n\t(xtensa_leaf_regs): Remove.\n\t* config/xtensa/xtensa.h (REG_ALLOC_ORDER): Cosmetics.\n\t(order_regs_for_local_alloc): Rename as the above.\n\t(LEAF_REGISTERS, LEAF_REG_REMAP, leaf_function): Remove.", "tree": {"sha": "3a2b627b67a43b13f8938fb695bdaf66eec582b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a2b627b67a43b13f8938fb695bdaf66eec582b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff6c7617102df365918402c6ccc8e497c47dbe60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff6c7617102df365918402c6ccc8e497c47dbe60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff6c7617102df365918402c6ccc8e497c47dbe60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff6c7617102df365918402c6ccc8e497c47dbe60/comments", "author": {"login": "jjsuwa-sys3175", "id": 73290592, "node_id": "MDQ6VXNlcjczMjkwNTky", "avatar_url": "https://avatars.githubusercontent.com/u/73290592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jjsuwa-sys3175", "html_url": "https://github.com/jjsuwa-sys3175", "followers_url": "https://api.github.com/users/jjsuwa-sys3175/followers", "following_url": "https://api.github.com/users/jjsuwa-sys3175/following{/other_user}", "gists_url": "https://api.github.com/users/jjsuwa-sys3175/gists{/gist_id}", "starred_url": "https://api.github.com/users/jjsuwa-sys3175/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jjsuwa-sys3175/subscriptions", "organizations_url": "https://api.github.com/users/jjsuwa-sys3175/orgs", "repos_url": "https://api.github.com/users/jjsuwa-sys3175/repos", "events_url": "https://api.github.com/users/jjsuwa-sys3175/events{/privacy}", "received_events_url": "https://api.github.com/users/jjsuwa-sys3175/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3b99b84609af310c72b4d6221621f5b63a3c169", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3b99b84609af310c72b4d6221621f5b63a3c169", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3b99b84609af310c72b4d6221621f5b63a3c169"}], "stats": {"total": 128, "additions": 30, "deletions": 98}, "files": [{"sha": "7b5790c5fc4be327f6167b07dc9af876bff0e622", "filename": "gcc/config/xtensa/xtensa-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff6c7617102df365918402c6ccc8e497c47dbe60/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff6c7617102df365918402c6ccc8e497c47dbe60/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h?ref=ff6c7617102df365918402c6ccc8e497c47dbe60", "patch": "@@ -78,7 +78,7 @@ extern long compute_frame_size (poly_int64);\n extern bool xtensa_use_return_instruction_p (void);\n extern void xtensa_expand_prologue (void);\n extern void xtensa_expand_epilogue (bool);\n-extern void order_regs_for_local_alloc (void);\n+extern void xtensa_adjust_reg_alloc_order (void);\n extern enum reg_class xtensa_regno_to_class (int regno);\n extern HOST_WIDE_INT xtensa_initial_elimination_offset (int from, int to);\n extern const char **xtensa_get_config_strings (void);"}, {"sha": "9b363bdbf9e46f35cb4e6c7e3b758af53cf42b80", "filename": "gcc/config/xtensa/xtensa.cc", "status": "modified", "additions": 15, "deletions": 60, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff6c7617102df365918402c6ccc8e497c47dbe60/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff6c7617102df365918402c6ccc8e497c47dbe60/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc?ref=ff6c7617102df365918402c6ccc8e497c47dbe60", "patch": "@@ -107,18 +107,6 @@ struct GTY(()) machine_function\n   rtx last_logues_a9_content;\n };\n \n-/* Vector, indexed by hard register number, which contains 1 for a\n-   register that is allowable in a candidate for leaf function\n-   treatment.  */\n-\n-const char xtensa_leaf_regs[FIRST_PSEUDO_REGISTER] =\n-{\n-  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n-  1, 1, 1,\n-  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n-  1\n-};\n-\n static void xtensa_option_override (void);\n static enum internal_test map_test_to_internal_test (enum rtx_code);\n static rtx gen_int_relational (enum rtx_code, rtx, rtx);\n@@ -4140,58 +4128,25 @@ xtensa_secondary_reload (bool in_p, rtx x, reg_class_t rclass,\n   return NO_REGS;\n }\n \n+/* Called once at the start of IRA, by ADJUST_REG_ALLOC_ORDER.  */\n \n void\n-order_regs_for_local_alloc (void)\n+xtensa_adjust_reg_alloc_order (void)\n {\n-  if (!leaf_function_p ())\n-    {\n-      static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n+  static const int reg_windowed_alloc_order[FIRST_PSEUDO_REGISTER] =\n \tREG_ALLOC_ORDER;\n-      static const int reg_nonleaf_alloc_order_call0[FIRST_PSEUDO_REGISTER] =\n-\t{\n-\t  11, 10,  9,  8,  7,  6,  5,  4,  3,  2, 12, 13, 14, 15,\n-\t  18,\n-\t  19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n-\t  0,  1, 16, 17,\n-\t  35,\n-\t};\n-\n-      memcpy (reg_alloc_order, TARGET_WINDOWED_ABI ?\n-\t      reg_nonleaf_alloc_order : reg_nonleaf_alloc_order_call0,\n-\t      FIRST_PSEUDO_REGISTER * sizeof (int));\n-    }\n-  else\n-    {\n-      int i, num_arg_regs;\n-      int nxt = 0;\n-\n-      /* Use the AR registers in increasing order (skipping a0 and a1)\n-\t but save the incoming argument registers for a last resort.  */\n-      num_arg_regs = crtl->args.info.arg_words;\n-      if (num_arg_regs > MAX_ARGS_IN_REGISTERS)\n-\tnum_arg_regs = MAX_ARGS_IN_REGISTERS;\n-      for (i = GP_ARG_FIRST; i < 16 - num_arg_regs; i++)\n-\treg_alloc_order[nxt++] = i + num_arg_regs;\n-      for (i = 0; i < num_arg_regs; i++)\n-\treg_alloc_order[nxt++] = GP_ARG_FIRST + i;\n-\n-      /* List the coprocessor registers in order.  */\n-      for (i = 0; i < BR_REG_NUM; i++)\n-\treg_alloc_order[nxt++] = BR_REG_FIRST + i;\n-\n-      /* List the FP registers in order for now.  */\n-      for (i = 0; i < 16; i++)\n-\treg_alloc_order[nxt++] = FP_REG_FIRST + i;\n-\n-      /* GCC requires that we list *all* the registers....  */\n-      reg_alloc_order[nxt++] = 0;\t/* a0 = return address */\n-      reg_alloc_order[nxt++] = 1;\t/* a1 = stack pointer */\n-      reg_alloc_order[nxt++] = 16;\t/* pseudo frame pointer */\n-      reg_alloc_order[nxt++] = 17;\t/* pseudo arg pointer */\n-\n-      reg_alloc_order[nxt++] = ACC_REG_FIRST;\t/* MAC16 accumulator */\n-    }\n+  static const int reg_call0_alloc_order[FIRST_PSEUDO_REGISTER] =\n+  {\n+     9, 10, 11,  7,  6,  5,  4,  3,  2,  8,  0, 12, 13, 14, 15,\n+    18,\n+    19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n+     1, 16, 17,\n+    35,\n+  };\n+\n+  memcpy (reg_alloc_order, TARGET_WINDOWED_ABI ?\n+\t  reg_windowed_alloc_order : reg_call0_alloc_order,\n+\t  FIRST_PSEUDO_REGISTER * sizeof (int));\n }\n \n "}, {"sha": "6fcf45fbdfe4deaa8665f0f878a67bdbf62871f4", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 14, "deletions": 37, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff6c7617102df365918402c6ccc8e497c47dbe60/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff6c7617102df365918402c6ccc8e497c47dbe60/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=ff6c7617102df365918402c6ccc8e497c47dbe60", "patch": "@@ -238,44 +238,21 @@ along with GCC; see the file COPYING3.  If not see\n   1,\t\t\t\t\t\t\t\t\t\\\n }\n \n-/* For non-leaf procedures on Xtensa processors, the allocation order\n-   is as specified below by REG_ALLOC_ORDER.  For leaf procedures, we\n-   want to use the lowest numbered registers first to minimize\n-   register window overflows.  However, local-alloc is not smart\n-   enough to consider conflicts with incoming arguments.  If an\n-   incoming argument in a2 is live throughout the function and\n-   local-alloc decides to use a2, then the incoming argument must\n-   either be spilled or copied to another register.  To get around\n-   this, we define ADJUST_REG_ALLOC_ORDER to redefine\n-   reg_alloc_order for leaf functions such that lowest numbered\n-   registers are used first with the exception that the incoming\n-   argument registers are not used until after other register choices\n-   have been exhausted.  */\n-\n-#define REG_ALLOC_ORDER \\\n-{  8,  9, 10, 11, 12, 13, 14, 15,  7,  6,  5,  4,  3,  2, \\\n-  18, \\\n-  19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, \\\n-   0,  1, 16, 17, \\\n-  35, \\\n-}\n-\n-#define ADJUST_REG_ALLOC_ORDER order_regs_for_local_alloc ()\n-\n-/* For Xtensa, the only point of this is to prevent GCC from otherwise\n-   giving preference to call-used registers.  To minimize window\n-   overflows for the AR registers, we want to give preference to the\n-   lower-numbered AR registers.  For other register files, which are\n-   not windowed, we still prefer call-used registers, if there are any.  */\n-extern const char xtensa_leaf_regs[FIRST_PSEUDO_REGISTER];\n-#define LEAF_REGISTERS xtensa_leaf_regs\n+/* For the windowed register ABI on Xtensa processors, the allocation\n+   order is as specified below by REG_ALLOC_ORDER.\n+   For the call0 ABI, on the other hand, ADJUST_REG_ALLOC_ORDER hook\n+   will be called once at the start of IRA, replacing it with the\n+   appropriate one.  */\n \n-/* For Xtensa, no remapping is necessary, but this macro must be\n-   defined if LEAF_REGISTERS is defined.  */\n-#define LEAF_REG_REMAP(REGNO) ((int) (REGNO))\n-\n-/* This must be declared if LEAF_REGISTERS is set.  */\n-extern int leaf_function;\n+#define REG_ALLOC_ORDER\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+   8,  9, 10, 11, 12, 13, 14, 15,  7,  6,  5,  4,  3,  2,\t\t\\\n+  18,\t\t\t\t\t\t\t\t\t\\\n+  19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\t\\\n+   0,  1, 16, 17,\t\t\t\t\t\t\t\\\n+  35,\t\t\t\t\t\t\t\t\t\\\n+}\n+#define ADJUST_REG_ALLOC_ORDER xtensa_adjust_reg_alloc_order ()\n \n /* Internal macros to classify a register number.  */\n "}]}