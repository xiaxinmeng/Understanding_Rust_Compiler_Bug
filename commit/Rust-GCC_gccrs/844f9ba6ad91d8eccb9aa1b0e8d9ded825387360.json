{"sha": "844f9ba6ad91d8eccb9aa1b0e8d9ded825387360", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ0ZjliYTZhZDkxZDhlY2NiOWFhMWIwZThkOWRlZDgyNTM4NzM2MA==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-05-21T20:53:36Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-05-21T20:53:36Z"}, "message": "stdio_filebuf.h: Add header guards.\n\n2002-05-21  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* include/ext/stdio_filebuf.h:  Add header guards.  Doxygenate.\n\nFrom-SVN: r53699", "tree": {"sha": "53c801a39c9535f57c1cb2b91299dc0e7ef9c9dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53c801a39c9535f57c1cb2b91299dc0e7ef9c9dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/844f9ba6ad91d8eccb9aa1b0e8d9ded825387360", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/844f9ba6ad91d8eccb9aa1b0e8d9ded825387360", "html_url": "https://github.com/Rust-GCC/gccrs/commit/844f9ba6ad91d8eccb9aa1b0e8d9ded825387360", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/844f9ba6ad91d8eccb9aa1b0e8d9ded825387360/comments", "author": null, "committer": null, "parents": [{"sha": "59f801a0dc3b875aaa79f39e3c18796195b3ca01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59f801a0dc3b875aaa79f39e3c18796195b3ca01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59f801a0dc3b875aaa79f39e3c18796195b3ca01"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "c45456c4c6a6d57946a2842e1883786207e22bd8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844f9ba6ad91d8eccb9aa1b0e8d9ded825387360/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844f9ba6ad91d8eccb9aa1b0e8d9ded825387360/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=844f9ba6ad91d8eccb9aa1b0e8d9ded825387360", "patch": "@@ -1,3 +1,7 @@\n+2002-05-21  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* include/ext/stdio_filebuf.h:  Add header guards.  Doxygenate.\n+\n 2002-05-21  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* docs/doxygen/user.cfg.in (EXCLUDE):  Add 'CVS'."}, {"sha": "cd869a8db325449df5cb116564ffe43a74b07fbf", "filename": "libstdc++-v3/include/ext/stdio_filebuf.h", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844f9ba6ad91d8eccb9aa1b0e8d9ded825387360/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844f9ba6ad91d8eccb9aa1b0e8d9ded825387360/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h?ref=844f9ba6ad91d8eccb9aa1b0e8d9ded825387360", "patch": "@@ -27,10 +27,27 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file ext/stdio_filebuf.h\n+ *  This file is a GNU extension to the Standard C++ Library.\n+ */\n+\n+#ifndef _EXT_STDIO_FILEBUF\n+#define _EXT_STDIO_FILEBUF\n+\n+#pragma GCC system_header\n #include <fstream>\n \n namespace __gnu_cxx\n {\n+  /**\n+   *  @class stdio_filebuf ext/stdio_filebuf.h <ext/stdio_filebuf.h>\n+   *  @brief Provides a layer of compatibility for C/POSIX.\n+   *\n+   *  This GNU extension provides extensions for working with standard C\n+   *  FILE*'s and POSIX file descriptors.  It must be instantiated by the\n+   *  user with the type of character used in the file stream, e.g.,\n+   *  stdio_filebuf<char>.\n+  */\n   template<typename _CharT, typename _Traits = std::char_traits<_CharT> >\n     class stdio_filebuf : public std::basic_filebuf<_CharT, _Traits>\n     {\n@@ -47,15 +64,47 @@ namespace __gnu_cxx\n       char_type\t\t\t_M_unbuf[4];\n       \n     public:\n+      /**\n+       *  @param  fd  An open file descriptor.\n+       *  @param  mode  Same meaning as in a standard filebuf.\n+       *  @param  del  Whether to close the file on destruction.\n+       *  @param  size  Optimal or preferred size of internal buffer, in bytes.\n+       *\n+       *  This constructor associates a file stream buffer with an open\n+       *  POSIX file descriptor.  Iff @a del is true, then the associated\n+       *  file will be closed when the stdio_filebuf is closed/destroyed.\n+      */\n       stdio_filebuf(int __fd, std::ios_base::openmode __mode, bool __del, \n \t\t    int_type __size);\n \n+      /**\n+       *  @param  f  An open @c FILE*.\n+       *  @param  mode  Same meaning as in a standard filebuf.\n+       *  @param  size  Optimal or preferred size of internal buffer, in bytes.\n+       *                Defaults to system's @c BUFSIZ.\n+       *\n+       *  This constructor associates a file stream buffer with an open\n+       *  C @c FILE*.  The @c FILE* will not be automatically closed when the\n+       *  stdio_filebuf is closed/destroyed.\n+      */\n       stdio_filebuf(std::__c_file* __f, std::ios_base::openmode __mode, \n \t\t    int_type __size = static_cast<int_type>(BUFSIZ));\n \n+      /**\n+       *  Possibly closes the external data stream, in the case of the file\n+       *  descriptor constructor and @c del @c == @c true.\n+      */\n       virtual\n       ~stdio_filebuf();\n \n+      /**\n+       *  @return  The underlying file descriptor.\n+       *\n+       *  Once associated with an external data stream, this function can be\n+       *  used to access the underlying POSIX file descriptor.  Note that\n+       *  there is no way for the library to track what you do with the\n+       *  descriptor, so be careful.\n+      */\n       int\n       fd()\n       { return _M_file.fd(); }\n@@ -111,3 +160,5 @@ namespace __gnu_cxx\n \t}\n     }\n } // namespace __gnu_cxx\n+\n+#endif /* _EXT_STDIO_FILEBUF */"}]}