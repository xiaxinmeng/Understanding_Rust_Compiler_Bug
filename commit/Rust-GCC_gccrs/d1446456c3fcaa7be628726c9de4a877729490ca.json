{"sha": "d1446456c3fcaa7be628726c9de4a877729490ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE0NDY0NTZjM2ZjYWE3YmU2Mjg3MjZjOWRlNGE4Nzc3Mjk0OTBjYQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2017-04-18T15:00:43Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-04-18T15:00:43Z"}, "message": "regcprop.c (maybe_mode_change): Avoid creating copies of the stack pointer.\n\n\t* regcprop.c (maybe_mode_change): Avoid creating copies of the\n\tstack pointer.\n\n\tRevert:\n\t2017-04-13  Jeff Law  <law@redhat.com>\n\t* config/mips.mips.md (zero_extendsidi2): Do not allow SP to appear\n\tin operands[1] if it is a MEM and TARGET_MIPS16 is active.\n\nFrom-SVN: r246970", "tree": {"sha": "bf42d7f94795c94d38ce7af3875c9809475a0fa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf42d7f94795c94d38ce7af3875c9809475a0fa8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1446456c3fcaa7be628726c9de4a877729490ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1446456c3fcaa7be628726c9de4a877729490ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1446456c3fcaa7be628726c9de4a877729490ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1446456c3fcaa7be628726c9de4a877729490ca/comments", "author": null, "committer": null, "parents": [{"sha": "8c468e1dcd29c3ca6d0ee2d9099c22b10e24e0ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c468e1dcd29c3ca6d0ee2d9099c22b10e24e0ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c468e1dcd29c3ca6d0ee2d9099c22b10e24e0ac"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "8da35cc67e3d3533f0302ebe987a664a784f0bd7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1446456c3fcaa7be628726c9de4a877729490ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1446456c3fcaa7be628726c9de4a877729490ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1446456c3fcaa7be628726c9de4a877729490ca", "patch": "@@ -1,3 +1,13 @@\n+2017-04-18  Jeff Law  <law@redhat.com>\n+\n+\t* regcprop.c (maybe_mode_change): Avoid creating copies of the\n+\tstack pointer.\n+\n+\tRevert:\n+\t2017-04-13  Jeff Law  <law@redhat.com>\n+\t* config/mips.mips.md (zero_extendsidi2): Do not allow SP to appear\n+\tin operands[1] if it is a MEM and TARGET_MIPS16 is active.\n+\n 2017-04-18  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/79453"}, {"sha": "7acf00d0451d82c906fb5a86ece521d3c9ee6fc6", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1446456c3fcaa7be628726c9de4a877729490ca/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1446456c3fcaa7be628726c9de4a877729490ca/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=d1446456c3fcaa7be628726c9de4a877729490ca", "patch": "@@ -3493,10 +3493,7 @@\n (define_insn_and_split \"*zero_extendsidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n         (zero_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"d,W\")))]\n-  \"TARGET_64BIT && !ISA_HAS_EXT_INS\n-   && !(TARGET_MIPS16\n-        && MEM_P (operands[1])\n-        && reg_mentioned_p (stack_pointer_rtx, operands[1]))\"\n+  \"TARGET_64BIT && !ISA_HAS_EXT_INS\"\n   \"@\n    #\n    lwu\\t%0,%1\"\n@@ -3512,10 +3509,7 @@\n (define_insn \"*zero_extendsidi2_dext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n         (zero_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"d,W\")))]\n-  \"TARGET_64BIT && ISA_HAS_EXT_INS\n-   && !(TARGET_MIPS16\n-        && MEM_P (operands[1])\n-        && reg_mentioned_p (stack_pointer_rtx, operands[1]))\"\n+  \"TARGET_64BIT && ISA_HAS_EXT_INS\"\n   \"@\n    dext\\t%0,%1,0,32\n    lwu\\t%0,%1\""}, {"sha": "367d85a7e242e9765767dcdd29080bd1fde3eb84", "filename": "gcc/regcprop.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1446456c3fcaa7be628726c9de4a877729490ca/gcc%2Fregcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1446456c3fcaa7be628726c9de4a877729490ca/gcc%2Fregcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregcprop.c?ref=d1446456c3fcaa7be628726c9de4a877729490ca", "patch": "@@ -396,6 +396,13 @@ maybe_mode_change (machine_mode orig_mode, machine_mode copy_mode,\n       && GET_MODE_SIZE (copy_mode) < GET_MODE_SIZE (new_mode))\n     return NULL_RTX;\n \n+  /* Avoid creating multiple copies of the stack pointer.  Some ports\n+     assume there is one and only one stack pointer.\n+\n+     It's unclear if we need to do the same for other special registers.  */\n+  if (regno == STACK_POINTER_REGNUM)\n+    return NULL_RTX;\n+\n   if (orig_mode == new_mode)\n     return gen_raw_REG (new_mode, regno);\n   else if (mode_change_ok (orig_mode, new_mode, regno))"}]}