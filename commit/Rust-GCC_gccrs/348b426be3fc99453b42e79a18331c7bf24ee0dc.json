{"sha": "348b426be3fc99453b42e79a18331c7bf24ee0dc", "node_id": "C_kwDOANBUbNoAKDM0OGI0MjZiZTNmYzk5NDUzYjQyZTc5YTE4MzMxYzdiZjI0ZWUwZGM", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-07T13:16:13Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-07T13:16:13Z"}, "message": "c++: Add testcase for C++23 P2316R2 - consistent character literal encoding [PR102615]\n\nI believe we need no changes to the compiler for P2316R2, seems we treat\ncharacter literals the same between preprocessor and C++ expressions,\nhere is a testcase that should verify it.\n\nNote, seems the internal charset for GCC can be either UTF-8 or UTF-EBCDIC,\nbut I bet it is very hard (at least for me) to actually test the latter.\nI'd guess one needs all system headers to be in EBCDIC and the gcc sources too.\nBut looking around the source, I'm a little bit worried about the UTF-EBCDIC\ncase.\nOne is:\n #if  '\\n' == 0x0A && ' ' == 0x20 && '0' == 0x30 \\\n    && 'A' == 0x41 && 'a' == 0x61 && '!' == 0x21\n #  define HOST_CHARSET HOST_CHARSET_ASCII\n #else\n # if '\\n' == 0x15 && ' ' == 0x40 && '0' == 0xF0 \\\n    && 'A' == 0xC1 && 'a' == 0x81 && '!' == 0x5A\n #  define HOST_CHARSET HOST_CHARSET_EBCDIC\n # else\n #  define HOST_CHARSET HOST_CHARSET_UNKNOWN\n # endif\n #endif\nin include/safe-ctype.h, does that mean we only support EBCDIC if -funsigned-char\nand otherwise fail to build gcc?  Because with -fsigned-char, '0' is -0x10\nrather than 0xF0, 'A' is -0x3F rather than 0xC1 and 'a' is -0x7F rather than\n0x81.\nAnd another thing, if HOST_CHARSET == HOST_CHARSET_EBCDIC, how does the libcpp/lex.c\nstatic const cppchar_t utf8_signifier = 0xC0;\n...\n      if (*buffer->cur >= utf8_signifier)\n        {\n          if (_cpp_valid_utf8 (pfile, &buffer->cur, buffer->rlimit, 1 + !first,\n                               state, &s))\n            return true;\n        }\nwork?  Because in UTF-EBCDIC, >= 0xC0 isn't the right test for start of\nmulti-byte character, it is more complicated and seems _cpp_valid_utf8\nassumes UTF-8 as the host charset.\n\n2021-10-07  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/102615\n\t* g++.dg/cpp23/charlit-encoding1.C: New testcase for C++23 P2316R2.", "tree": {"sha": "9abd79c677bf3d4266cb73d457de67b99d382ffd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9abd79c677bf3d4266cb73d457de67b99d382ffd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/348b426be3fc99453b42e79a18331c7bf24ee0dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/348b426be3fc99453b42e79a18331c7bf24ee0dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/348b426be3fc99453b42e79a18331c7bf24ee0dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/348b426be3fc99453b42e79a18331c7bf24ee0dc/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ebf2c14c60f5f37c00bea66aba46c25d4bcf473", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ebf2c14c60f5f37c00bea66aba46c25d4bcf473", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ebf2c14c60f5f37c00bea66aba46c25d4bcf473"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "736f022ea954e3149d9447149886e0325a939718", "filename": "gcc/testsuite/g++.dg/cpp23/charlit-encoding1.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/348b426be3fc99453b42e79a18331c7bf24ee0dc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fcharlit-encoding1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/348b426be3fc99453b42e79a18331c7bf24ee0dc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fcharlit-encoding1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fcharlit-encoding1.C?ref=348b426be3fc99453b42e79a18331c7bf24ee0dc", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/102615 - P2316R2 - Consistent character literal encoding\n+// { dg-do run }\n+\n+extern \"C\" void abort ();\n+\n+int\n+main ()\n+{\n+#if ' ' == 0x20\n+  if (' ' != 0x20)\n+    abort ();\n+#elif ' ' == 0x40\n+  if (' ' != 0x40)\n+    abort ();\n+#else\n+  if (' ' == 0x20 || ' ' == 0x40)\n+    abort ();\n+#endif\n+#if 'a' == 0x61\n+  if ('a' != 0x61)\n+    abort ();\n+#elif 'a' == 0x81\n+  if ('a' != 0x81)\n+    abort ();\n+#elif 'a' == -0x7F\n+  if ('a' != -0x7F)\n+    abort ();\n+#else\n+  if ('a' == 0x61 || 'a' == 0x81 || 'a' == -0x7F)\n+    abort ();\n+#endif\n+  return 0;\n+}"}]}