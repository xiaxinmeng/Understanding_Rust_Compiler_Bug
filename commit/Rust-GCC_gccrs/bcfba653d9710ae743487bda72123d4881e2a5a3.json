{"sha": "bcfba653d9710ae743487bda72123d4881e2a5a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNmYmE2NTNkOTcxMGFlNzQzNDg3YmRhNzIxMjNkNDg4MWUyYTVhMw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-25T17:16:51Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-25T17:16:51Z"}, "message": "config/epiphany: Use rtx_insn\n\ngcc/\n\t* config/epiphany/epiphany-protos.h (epiphany_final_prescan_insn):\n\tStrengthen first param \"insn\" from rtx to rtx_insn *.\n\n\t* config/epiphany/epiphany.c (epiphany_final_prescan_insn):\n\tLikewise.\n\t(frame_insn): Likewise for return type.  Introduce local \"insn\"\n\tfor use in place of local \"x\" for use as an rtx_insn *.\n\t(frame_move_insn): Strengthen return type from rtx to rtx_insn *.\n\t(epiphany_expand_prologue): Likewise for local \"insn\".\n\t* config/epiphany/mode-switch-use.c (insert_uses): Likewise.\n\t* config/epiphany/resolve-sw-modes.c\n\t(pass_resolve_sw_modes::execute): Likewise for locals \"insn\" and\n\t\"seq\".\n\nFrom-SVN: r214441", "tree": {"sha": "7e321ca4b880de166dc3be91e320c534fa57e677", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e321ca4b880de166dc3be91e320c534fa57e677"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcfba653d9710ae743487bda72123d4881e2a5a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcfba653d9710ae743487bda72123d4881e2a5a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcfba653d9710ae743487bda72123d4881e2a5a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcfba653d9710ae743487bda72123d4881e2a5a3/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa4e645e7674aec77ae6466c81e5c4d974cbb70c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa4e645e7674aec77ae6466c81e5c4d974cbb70c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa4e645e7674aec77ae6466c81e5c4d974cbb70c"}], "stats": {"total": 45, "additions": 32, "deletions": 13}, "files": [{"sha": "bd34252b449fc94bfb943f298d5b38243707d6b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcfba653d9710ae743487bda72123d4881e2a5a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcfba653d9710ae743487bda72123d4881e2a5a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bcfba653d9710ae743487bda72123d4881e2a5a3", "patch": "@@ -1,3 +1,19 @@\n+2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* config/epiphany/epiphany-protos.h (epiphany_final_prescan_insn):\n+\tStrengthen first param \"insn\" from rtx to rtx_insn *.\n+\n+\t* config/epiphany/epiphany.c (epiphany_final_prescan_insn):\n+\tLikewise.\n+\t(frame_insn): Likewise for return type.  Introduce local \"insn\"\n+\tfor use in place of local \"x\" for use as an rtx_insn *.\n+\t(frame_move_insn): Strengthen return type from rtx to rtx_insn *.\n+\t(epiphany_expand_prologue): Likewise for local \"insn\".\n+\t* config/epiphany/mode-switch-use.c (insert_uses): Likewise.\n+\t* config/epiphany/resolve-sw-modes.c\n+\t(pass_resolve_sw_modes::execute): Likewise for locals \"insn\" and\n+\t\"seq\".\n+\n 2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n \n \t* config/c6x/c6x-protos.h (c6x_get_unit_specifier): Strengthen"}, {"sha": "a40cb58c2e408bc6b246d71e67083b11ab42c1a0", "filename": "gcc/config/epiphany/epiphany-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcfba653d9710ae743487bda72123d4881e2a5a3/gcc%2Fconfig%2Fepiphany%2Fepiphany-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcfba653d9710ae743487bda72123d4881e2a5a3/gcc%2Fconfig%2Fepiphany%2Fepiphany-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany-protos.h?ref=bcfba653d9710ae743487bda72123d4881e2a5a3", "patch": "@@ -27,7 +27,7 @@ extern struct rtx_def *gen_compare_reg (enum machine_mode, enum rtx_code,\n #endif\n \n /* Declarations for various fns used in the .md file.  */\n-extern void epiphany_final_prescan_insn (rtx, rtx *, int);\n+extern void epiphany_final_prescan_insn (rtx_insn *, rtx *, int);\n extern bool epiphany_is_long_call_p (rtx);\n extern bool epiphany_small16 (rtx);\n bool epiphany_uninterruptible_p (tree decl);"}, {"sha": "792475ff86bc8358da78fc7bd40d8da97d20bb98", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcfba653d9710ae743487bda72123d4881e2a5a3/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcfba653d9710ae743487bda72123d4881e2a5a3/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=bcfba653d9710ae743487bda72123d4881e2a5a3", "patch": "@@ -76,7 +76,7 @@ static tree epiphany_handle_forwarder_attribute (tree *, tree, tree, int,\n \t\t\t\t\t\t bool *);\n static bool epiphany_pass_by_reference (cumulative_args_t, enum machine_mode,\n \t\t\t\t\tconst_tree, bool);\n-static rtx frame_insn (rtx);\n+static rtx_insn *frame_insn (rtx);\n \f\n /* defines for the initialization of the GCC target structure.  */\n #define TARGET_ATTRIBUTE_TABLE epiphany_attribute_table\n@@ -1440,7 +1440,7 @@ epiphany_print_operand_address (FILE *file, rtx addr)\n }\n \n void\n-epiphany_final_prescan_insn (rtx insn ATTRIBUTE_UNUSED,\n+epiphany_final_prescan_insn (rtx_insn *insn ATTRIBUTE_UNUSED,\n \t\t\t     rtx *opvec ATTRIBUTE_UNUSED,\n \t\t\t     int noperands ATTRIBUTE_UNUSED)\n {\n@@ -1545,11 +1545,12 @@ frame_subreg_note (rtx set, int offset)\n   return set;\n }\n \n-static rtx\n+static rtx_insn *\n frame_insn (rtx x)\n {\n   int i;\n   rtx note = NULL_RTX;\n+  rtx_insn *insn;\n \n   if (GET_CODE (x) == PARALLEL)\n     {\n@@ -1584,14 +1585,14 @@ frame_insn (rtx x)\n     note = gen_rtx_PARALLEL (VOIDmode,\n \t\t\t     gen_rtvec (2, frame_subreg_note (x, 0),\n \t\t\t\t\tframe_subreg_note (x, UNITS_PER_WORD)));\n-  x = emit_insn (x);\n-  RTX_FRAME_RELATED_P (x) = 1;\n+  insn = emit_insn (x);\n+  RTX_FRAME_RELATED_P (insn) = 1;\n   if (note)\n-    add_reg_note (x, REG_FRAME_RELATED_EXPR, note);\n-  return x;\n+    add_reg_note (insn, REG_FRAME_RELATED_EXPR, note);\n+  return insn;\n }\n \n-static rtx\n+static rtx_insn *\n frame_move_insn (rtx to, rtx from)\n {\n   return frame_insn (gen_rtx_SET (VOIDmode, to, from));\n@@ -1819,7 +1820,8 @@ epiphany_expand_prologue (void)\n      register save.  */\n   if (current_frame_info.last_slot >= 0)\n     {\n-      rtx ip, mem2, insn, note;\n+      rtx ip, mem2, note;\n+      rtx_insn *insn;\n \n       gcc_assert (current_frame_info.last_slot != GPR_FP\n \t\t  || (!current_frame_info.need_fp"}, {"sha": "b57b854034aa36a376e049b66c0413b2b98ce0fc", "filename": "gcc/config/epiphany/mode-switch-use.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcfba653d9710ae743487bda72123d4881e2a5a3/gcc%2Fconfig%2Fepiphany%2Fmode-switch-use.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcfba653d9710ae743487bda72123d4881e2a5a3/gcc%2Fconfig%2Fepiphany%2Fmode-switch-use.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fmode-switch-use.c?ref=bcfba653d9710ae743487bda72123d4881e2a5a3", "patch": "@@ -49,7 +49,7 @@ insert_uses (void)\n   for (e = N_ENTITIES - 1; e >= 0; e--)\n     {\n       int no_mode = num_modes[e];\n-      rtx insn;\n+      rtx_insn *insn;\n       int mode;\n \n       if (!OPTIMIZE_MODE_SWITCHING (e))"}, {"sha": "47c11ff711c4e03ea486d496496fafeb98bb9ded", "filename": "gcc/config/epiphany/resolve-sw-modes.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcfba653d9710ae743487bda72123d4881e2a5a3/gcc%2Fconfig%2Fepiphany%2Fresolve-sw-modes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcfba653d9710ae743487bda72123d4881e2a5a3/gcc%2Fconfig%2Fepiphany%2Fresolve-sw-modes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fresolve-sw-modes.c?ref=bcfba653d9710ae743487bda72123d4881e2a5a3", "patch": "@@ -77,7 +77,8 @@ unsigned\n pass_resolve_sw_modes::execute (function *fun)\n {\n   basic_block bb;\n-  rtx insn, src;\n+  rtx_insn *insn;\n+  rtx src;\n   vec<basic_block> todo;\n   sbitmap pushed;\n   bool need_commit = false;\n@@ -155,7 +156,7 @@ pass_resolve_sw_modes::execute (function *fun)\n       FOR_EACH_EDGE (e, ei, bb->succs)\n \t{\n \t  basic_block succ = e->dest;\n-\t  rtx seq;\n+\t  rtx_insn *seq;\n \n \t  if (!REGNO_REG_SET_P (DF_LIVE_IN (succ), jilted_reg))\n \t    continue;"}]}