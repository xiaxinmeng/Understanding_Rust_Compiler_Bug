{"sha": "997718c768cbd55f7e2d6a6e8c37ab382dd59c7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk3NzE4Yzc2OGNiZDU1ZjdlMmQ2YTZlOGMzN2FiMzgyZGQ1OWM3Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-10-15T06:38:02Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-10-15T06:38:02Z"}, "message": "1750a.md (movstrqi): Add missing output reload constraint.\n\n\n\t* 1750a.md (movstrqi): Add missing output reload constraint.\n\t(call_value): Likewise.\n\t* a29k.md (cpxxx patterns): Add missing match_operator mode.\n\t(jmpfdec): Add missing inout reload constraint.\n\t* elxsi.md (addsi patterns): Add missing output reload constraint.\n\t(move from sp): Use @ alternates.\n\t(call_value): No constraint on output.\n\t* fr30.md (movsi_pop): Add missing output reload constraint.\n\t(movsf_constant_store): Likewise.\n\t(splits): Remove constraints.\n\t(subsi3): Add missing mode.\n\t* i370.md (cmpstrsi+1): Add missing output reload constraint.\n\t(call_value): Likewise.\n\t* i960.md (cmpinc/cmpdec patterns): Add inout reload constraints.\n\t* m32r.h (PREDICATE_CODES): Add seth_add3_operand.\n\t* m32r.md (movsicc_internal): Add output reload constraint.\n\t(movstrsi_internal): Add inout reload constraints.\n\t* m88k.h (reg_names): Don't declare.\n\t(SPECIAL_MODE_PREDICATES): New.\n\t* m88k.md (*): Use register_operand not reg_or_0_operand\n\ton destinations.\n\t* mn10200.h (PREDICATE_CODES): New.\n\t* ns32k.md (ffs pattern): Add output reload constraint.\n\t* pdp11.md (sob pattern): Add inout reload constraint.\n\t* sh.md (splits): Remove constraints.\n\t(indirect_jump_scratch, fpu_switch): Add output reload constraint.\n\t* v850.md (pattern_is_ok_for_epilogue): Likewise.\n\t* vax.md (jgequ pattern): Add inout reload constraint.\n\nFrom-SVN: r30008", "tree": {"sha": "6961d842b244b73c4676dcdd51ab81f9796bfce8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6961d842b244b73c4676dcdd51ab81f9796bfce8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/comments", "author": null, "committer": null, "parents": [{"sha": "ffccc6bee2b00018fd09b26a5ce5d0bbc6900e94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffccc6bee2b00018fd09b26a5ce5d0bbc6900e94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffccc6bee2b00018fd09b26a5ce5d0bbc6900e94"}], "stats": {"total": 147, "additions": 95, "deletions": 52}, "files": [{"sha": "dfacdb9d6c506166464b6299df97c6f1bc84eb94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=997718c768cbd55f7e2d6a6e8c37ab382dd59c7f", "patch": "@@ -1,3 +1,34 @@\n+Thu Oct 14 23:19:34 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* 1750a.md (movstrqi): Add missing output reload constraint.\n+\t(call_value): Likewise.\n+\t* a29k.md (cpxxx patterns): Add missing match_operator mode.\n+\t(jmpfdec): Add missing inout reload constraint.\n+\t* elxsi.md (addsi patterns): Add missing output reload constraint.\n+\t(move from sp): Use @ alternates.\n+\t(call_value): No constraint on output.\n+\t* fr30.md (movsi_pop): Add missing output reload constraint.\n+\t(movsf_constant_store): Likewise.\n+\t(splits): Remove constraints.\n+\t(subsi3): Add missing mode.\n+\t* i370.md (cmpstrsi+1): Add missing output reload constraint.\n+\t(call_value): Likewise.\n+\t* i960.md (cmpinc/cmpdec patterns): Add inout reload constraints.\n+\t* m32r.h (PREDICATE_CODES): Add seth_add3_operand.\n+\t* m32r.md (movsicc_internal): Add output reload constraint.\n+\t(movstrsi_internal): Add inout reload constraints.\n+\t* m88k.h (reg_names): Don't declare.\n+\t(SPECIAL_MODE_PREDICATES): New.\n+\t* m88k.md (*): Use register_operand not reg_or_0_operand\n+\ton destinations.\n+\t* mn10200.h (PREDICATE_CODES): New.\n+\t* ns32k.md (ffs pattern): Add output reload constraint.\n+\t* pdp11.md (sob pattern): Add inout reload constraint.\n+\t* sh.md (splits): Remove constraints.\n+\t(indirect_jump_scratch, fpu_switch): Add output reload constraint.\n+\t* v850.md (pattern_is_ok_for_epilogue): Likewise.\n+\t* vax.md (jgequ pattern): Add inout reload constraint.\n+\n Fri Oct 15 00:05:00 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* configure.in (djgpp): Revert previous patch."}, {"sha": "f53b77afb06f944a6f29b8bfa5c392a70ccb8ac7", "filename": "gcc/config/1750a/1750a.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2F1750a%2F1750a.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2F1750a%2F1750a.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.md?ref=997718c768cbd55f7e2d6a6e8c37ab382dd59c7f", "patch": "@@ -133,7 +133,7 @@\n ;; block move.\n \n (define_insn \"movstrqi\"\n-  [(set (match_operand:BLK 0 \"mov_memory_operand\" \"m\")\n+  [(set (match_operand:BLK 0 \"mov_memory_operand\" \"=m\")\n \t(match_operand:BLK 1 \"mov_memory_operand\" \"m\"))\n    (use (match_operand:QI 2 \"general_operand\" \"r\"))\n    (match_operand 3 \"\" \"\")\n@@ -1352,7 +1352,7 @@\n ;; Call subroutine, returning value in operand 0\n ;; (which must be a hard register).\n (define_insn \"call_value\"\n-  [(set (match_operand 0 \"register_operand\" \"r\")\n+  [(set (match_operand 0 \"register_operand\" \"=r\")\n         (call (match_operand:QI 1 \"memory_operand\" \"m\")\n               (match_operand:QI 2 \"general_operand\" \"g\")))]\n   ;; Operand 2 not really used for 1750."}, {"sha": "998d89272ac6b745bfb7ba63fdefa8f5383761a8", "filename": "gcc/config/a29k/a29k.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Fa29k%2Fa29k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Fa29k%2Fa29k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.md?ref=997718c768cbd55f7e2d6a6e8c37ab382dd59c7f", "patch": "@@ -337,15 +337,15 @@\n ;; CPxxx, DEQ, DGT, DGE, FEQ, FGT, FGE\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(match_operator 3 \"comparison_operator\"\n+\t(match_operator:SI 3 \"comparison_operator\"\n \t\t\t[(match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t\t (match_operand:SI 2 \"srcb_operand\" \"rI\")]))]\n   \"\"\n   \"cp%J3 %0,%1,%2\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(match_operator 3 \"fp_comparison_operator\"\n+\t(match_operator:SI 3 \"fp_comparison_operator\"\n \t\t\t[(match_operand:SF 1 \"register_operand\" \"r\")\n \t\t\t (match_operand:SF 2 \"register_operand\" \"r\")]))]\n   \"! TARGET_SOFT_FLOAT\"\n@@ -354,7 +354,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(match_operator 3 \"fp_comparison_operator\"\n+\t(match_operator:SI 3 \"fp_comparison_operator\"\n \t\t\t[(match_operand:DF 1 \"register_operand\" \"r\")\n \t\t\t (match_operand:DF 2 \"register_operand\" \"r\")]))]\n   \"! TARGET_SOFT_FLOAT\"\n@@ -2861,7 +2861,7 @@\n ;; JMPFDEC\n (define_insn \"\"\n   [(set (pc)\n-\t(if_then_else (ge (match_operand:SI 0 \"gpc_reg_operand\" \"r\")\n+\t(if_then_else (ge (match_operand:SI 0 \"gpc_reg_operand\" \"+r\")\n \t\t\t  (const_int 0))\n \t\t      (label_ref (match_operand 1 \"\" \"\"))\n \t\t      (pc)))"}, {"sha": "9611ac22ed7be519decc0751aa39973adc4c920c", "filename": "gcc/config/elxsi/elxsi.md", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Felxsi%2Felxsi.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Felxsi%2Felxsi.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felxsi%2Felxsi.md?ref=997718c768cbd55f7e2d6a6e8c37ab382dd59c7f", "patch": "@@ -46,14 +46,14 @@\n   \"add.64\\\\t.sp,%0\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t (plus:SI (reg:SI 15)\n \t\t  (match_operand:SI 1 \"general_operand\" \"g\")))]\n   \"\"\n   \"ld.32\\\\t%0,.sp\\;add.64\\\\t%0,%1\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t (plus:SI (match_operand:SI 1 \"general_operand\" \"g\")\n \t\t  (reg:SI 15)))]\n   \"\"\n@@ -73,14 +73,12 @@\n   \"ld.32\\\\t.sp,%0\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"m,r\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=m,r\")\n \t (reg:SI 15))]\n   \"\"\n-  \"*\n-  if (which_alternative == 0)\n-    return \\\"st.32\\\\t.sp,%0\\\";\n-  return \\\"ld.32\\\\t%0,.sp\\\";\n-\")\n+  \"@\n+   st.32\\\\t.sp,%0\n+   ld.32\\\\t%0,.sp\")\n \n ; tstdi is first test insn so that it is the one to match\n ; a constant argument.\n@@ -1394,7 +1392,7 @@ if (0) {\n   \")\n \n (define_insn \"call_value\"\n-  [(set (match_operand 0 \"\" \"g\")\n+  [(set (match_operand 0 \"\" \"\")\n \t(call (match_operand:QI 1 \"general_operand\" \"m\")\n \t      (match_operand:QI 2 \"general_operand\" \"g\")))]\n   \"\""}, {"sha": "6618fe3a20375898702a29e36c1ed1d1ff863443", "filename": "gcc/config/fr30/fr30.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Ffr30%2Ffr30.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Ffr30%2Ffr30.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.md?ref=997718c768cbd55f7e2d6a6e8c37ab382dd59c7f", "patch": "@@ -149,7 +149,7 @@\n \n ;; Pop a register off the stack\n (define_insn \"movsi_pop\"\n-  [(set:SI (match_operand:SI 0 \"register_operand\" \"a\")\n+  [(set:SI (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(mem:SI (post_inc:SI (reg:SI 15))))]\n   \"\"\n   \"ld\t@r15+, %0\"\n@@ -288,8 +288,8 @@\n ;; If we are loading a small negative constant we can save space\n ;; and time by loading the positive value and then sign extending it.\n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\"  \"r\")\n-\t(match_operand:SI 1 \"immediate_operand\" \"i\"))]\n+  [(set (match_operand:SI 0 \"register_operand\"  \"\")\n+\t(match_operand:SI 1 \"immediate_operand\" \"\"))]\n    \"INTVAL (operands[1]) <= -1 && INTVAL (operands[1]) >= -128\"\n    [(set:SI (match_dup 0) (match_dup 2))\n     (set:SI (match_dup 0) (sign_extend:SI (subreg:QI (match_dup 0) 0)))]\n@@ -302,8 +302,8 @@\n ;; not have any of its bottom 24 bit set, then we can save time\n ;; and space by loading the byte value and shifting it into place.\n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\"  \"r\")\n-\t(match_operand:SI 1 \"immediate_operand\" \"i\"))]\n+  [(set (match_operand:SI 0 \"register_operand\"  \"\")\n+\t(match_operand:SI 1 \"immediate_operand\" \"\"))]\n    \"(INTVAL (operands[1]) < 0) && (INTVAL (operands[1]) & 0x00ffffff == 0)\"\n    [(set:SI (match_dup 0) (match_dup 2))\n     (parallel [(set:SI (match_dup 0) (ashift:SI (match_dup 0) (const_int 24)))\n@@ -319,8 +319,8 @@\n ;; range, then we can save time and space by loading the byte value\n ;; and shifting it into place.\n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\"  \"r\")\n-\t(match_operand:SI 1 \"immediate_operand\" \"i\"))]\n+  [(set (match_operand:SI 0 \"register_operand\"  \"\")\n+\t(match_operand:SI 1 \"immediate_operand\" \"\"))]\n    \"(INTVAL (operands[1]) > 0x00ffffff)\n    && ((INTVAL (operands[1]) >> exact_log2 (INTVAL (operands[1]) & (- INTVAL (operands[1])))) < 0x100)\"\n    [(set:SI (match_dup 0) (match_dup 2))\n@@ -528,7 +528,7 @@\n )\n \n (define_insn \"*movsf_constant_store\"\n-  [(set (match_operand:SF 0 \"memory_operand\"    \"m\")\n+  [(set (match_operand:SF 0 \"memory_operand\"    \"=m\")\n \t(match_operand:SF 1 \"immediate_operand\" \"F\"))]\n   \"\"\n   \"*\n@@ -695,8 +695,8 @@\n \n (define_insn \"subsi3\"\n   [(set (match_operand:SI 0 \"register_operand\"       \"=r\")\n-\t(minus (match_operand:SI 1 \"register_operand\" \"0\")\n-\t       (match_operand:SI 2 \"register_operand\" \"r\")))]\n+\t(minus:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+\t          (match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"\"\n   \"subn\t%2, %0\"\n )"}, {"sha": "7fba86357892c11cf2c13ba5ba6b7e61e34fbc70", "filename": "gcc/config/i370/i370.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Fi370%2Fi370.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Fi370%2Fi370.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.md?ref=997718c768cbd55f7e2d6a6e8c37ab382dd59c7f", "patch": "@@ -552,7 +552,7 @@ check_label_emit ();\n ; Compare a block that is less than 256 bytes in length.\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"d\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(compare (match_operand:BLK 1 \"s_operand\" \"m\")\n \t\t (match_operand:BLK 2 \"s_operand\" \"m\")))\n    (use (match_operand:QI 3 \"immediate_operand\" \"I\"))]\n@@ -4598,7 +4598,7 @@ check_label_emit ();\n ;\n \n (define_insn \"call_value\"\n-  [(set (match_operand 0 \"\" \"rf\")\n+  [(set (match_operand 0 \"\" \"=rf\")\n  \t(call (match_operand:QI 1 \"memory_operand\" \"m\")\n  \t      (match_operand:SI 2 \"general_operand\" \"i\")))\n    (clobber (reg:SI 2))\n@@ -4669,7 +4669,7 @@ check_label_emit ();\n )\n \n (define_insn \"\"\n-  [(set (match_operand 0 \"\" \"rf\")\n+  [(set (match_operand 0 \"\" \"=rf\")\n \t(call (mem:QI (match_operand:SI 1 \"\" \"i\"))\n \t      (match_operand:SI 2 \"general_operand\" \"g\")))\n    (clobber (reg:SI 2))"}, {"sha": "1e5c1124f1057f10f06fdf0ee197c821d4f5ed72", "filename": "gcc/config/i960/i960.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Fi960%2Fi960.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Fi960%2Fi960.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.md?ref=997718c768cbd55f7e2d6a6e8c37ab382dd59c7f", "patch": "@@ -220,7 +220,7 @@\n (define_insn \"\"\n   [(set (reg:CC 36)\n \t(compare (match_operand:SI 0 \"arith_operand\" \"d\")\n-\t\t (match_operand:SI 1 \"arith_operand\" \"d\")))\n+\t\t (match_operand:SI 1 \"arith_operand\" \"+d\")))\n    (set (match_dup 1) (plus:SI (match_dup 1) (const_int 1)))]\n   \"0\"\n   \"cmpinci\t%0,%1\"\n@@ -229,7 +229,7 @@\n (define_insn \"\"\n   [(set (reg:CC_UNS 36)\n \t(compare (match_operand:SI 0 \"arith_operand\" \"d\")\n-\t\t (match_operand:SI 1 \"arith_operand\" \"d\")))\n+\t\t (match_operand:SI 1 \"arith_operand\" \"+d\")))\n    (set (match_dup 1) (plus:SI (match_dup 1) (const_int 1)))]\n   \"0\"\n   \"cmpinco\t%0,%1\"\n@@ -238,7 +238,7 @@\n (define_insn \"\"\n   [(set (reg:CC 36)\n \t(compare (match_operand:SI 0 \"arith_operand\" \"d\")\n-\t\t (match_operand:SI 1 \"arith_operand\" \"d\")))\n+\t\t (match_operand:SI 1 \"arith_operand\" \"+d\")))\n    (set (match_dup 1) (minus:SI (match_dup 1) (const_int 1)))]\n   \"0\"\n   \"cmpdeci\t%0,%1\"\n@@ -247,7 +247,7 @@\n (define_insn \"\"\n   [(set (reg:CC_UNS 36)\n \t(compare (match_operand:SI 0 \"arith_operand\" \"d\")\n-\t\t (match_operand:SI 1 \"arith_operand\" \"d\")))\n+\t\t (match_operand:SI 1 \"arith_operand\" \"+d\")))\n    (set (match_dup 1) (minus:SI (match_dup 1) (const_int 1)))]\n   \"0\"\n   \"cmpdeco\t%0,%1\""}, {"sha": "032e089c3be0754c541f785761360e7012b86d12", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=997718c768cbd55f7e2d6a6e8c37ab382dd59c7f", "patch": "@@ -1981,7 +1981,8 @@ enum m32r_function_type\n { \"call_address_operand\",\t{ SYMBOL_REF, LABEL_REF, CONST }},\t\\\n { \"small_insn_p\",\t\t{ INSN, CALL_INSN, JUMP_INSN }},\t\\\n { \"m32r_block_immediate_operand\",{ CONST_INT }},\t\t\t\\\n-{ \"large_insn_p\",\t\t{ INSN, CALL_INSN, JUMP_INSN }},\n+{ \"large_insn_p\",\t\t{ INSN, CALL_INSN, JUMP_INSN }},\t\\\n+{ \"seth_add3_operand\",\t\t{ SYMBOL_REF, LABEL_REF, CONST }},\n \n /* Functions declared in m32r.c */\n #define XPROTO(ARGS) ()"}, {"sha": "0ad11f021de573d49cce4205cc63403f33d4ba13", "filename": "gcc/config/m32r/m32r.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Fm32r%2Fm32r.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Fm32r%2Fm32r.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.md?ref=997718c768cbd55f7e2d6a6e8c37ab382dd59c7f", "patch": "@@ -1675,7 +1675,7 @@\n \n ;; Generate the conditional instructions based on how the carry flag is examined.\n (define_insn \"*movsicc_internal\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(if_then_else:SI (match_operand 1 \"carry_compare_operand\" \"\")\n \t\t\t (match_operand:SI 2 \"conditional_move_operand\" \"O\")\n \t\t\t (match_operand:SI 3 \"conditional_move_operand\" \"O\")\n@@ -1781,8 +1781,8 @@\n ;; Insn generated by block moves\n \n (define_insn \"movstrsi_internal\"\n-  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"r\"))\t;; destination\n-\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"r\")))\t;; source\n+  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"+r\"))\t;; destination\n+\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"+r\")))\t;; source\n    (use (match_operand:SI 2 \"m32r_block_immediate_operand\" \"J\"));; # bytes to move\n    (set (match_dup 0) (plus:SI (match_dup 0) (minus:SI (match_dup 2) (const_int 4))))\n    (set (match_dup 1) (plus:SI (match_dup 1) (match_dup 2)))"}, {"sha": "2937857ebfd6f0697b6d5c47ba5a7307deee3a92", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=997718c768cbd55f7e2d6a6e8c37ab382dd59c7f", "patch": "@@ -157,7 +157,6 @@ extern int target_flags;\t\t\t/* -m compiler switches */\n extern int frame_pointer_needed;\t\t/* current function has a FP */\n extern int flag_delayed_branch;\t\t\t/* -fdelayed-branch */\n extern int flag_pic;\t\t\t\t/* -fpic */\n-extern char * reg_names[];\n \n /* Specify the default monitors.  The meaning of these values can\n    be obtained by doing \"grep MONITOR_GCC *m88k*\".  Generally, the\n@@ -1496,6 +1495,13 @@ extern struct rtx_def *m88k_va_arg ();\n   {\"equality_op\", {EQ, NE}},\t\t\t\t\t\t\\\n   {\"pc_or_label_ref\", {PC, LABEL_REF}},\n \n+/* A list of predicates that do special things with modes, and so\n+   should not elicit warnings for VOIDmode match_operand.  */\n+\n+#define SPECIAL_MODE_PREDICATES\t\t\\\n+  \"partial_ccmode_register_operand\",\t\\\n+  \"pc_or_label_ref\",\n+\n /* The case table contains either words or branch instructions.  This says\n    which.  We always claim that the vector is PC-relative.  It is position\n    independent when -fpic is used.  */"}, {"sha": "85d944e2c364ec355f5b62cde0234bc6c9744630", "filename": "gcc/config/m88k/m88k.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Fm88k%2Fm88k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Fm88k%2Fm88k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.md?ref=997718c768cbd55f7e2d6a6e8c37ab382dd59c7f", "patch": "@@ -2556,7 +2556,7 @@\n ;; Add with carry insns.\n \n (define_insn \"\"\n-  [(parallel [(set (match_operand:SI 0 \"reg_or_0_operand\" \"=r\")\n+  [(parallel [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t\t   (plus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"rO\")\n \t\t\t    (match_operand:SI 2 \"reg_or_0_operand\" \"rO\")))\n \t      (set (reg:CC 0)\n@@ -2572,7 +2572,7 @@\n   \"addu.co %#r0,%r0,%r1\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"reg_or_0_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(plus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"rO\")\n \t\t (unspec:SI [(match_operand:SI 2 \"reg_or_0_operand\" \"rO\")\n \t\t\t     (reg:CC 0)] 0)))]\n@@ -2676,7 +2676,7 @@\n ;; Subtract with carry insns.\n \n (define_insn \"\"\n-  [(parallel [(set (match_operand:SI 0 \"reg_or_0_operand\" \"=r\")\n+  [(parallel [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t\t   (minus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"rO\")\n \t\t\t     (match_operand:SI 2 \"reg_or_0_operand\" \"rO\")))\n \t      (set (reg:CC 0)\n@@ -2692,7 +2692,7 @@\n   \"subu.co %#r0,%r0,%r1\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"reg_or_0_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(minus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"rO\")\n \t\t  (unspec:SI [(match_operand:SI 2 \"reg_or_0_operand\" \"rO\")\n \t\t\t      (reg:CC 0)] 1)))]"}, {"sha": "6f9cceb7c922a848e8e0ab12b3d7c3e70603164a", "filename": "gcc/config/mn10200/mn10200.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.h?ref=997718c768cbd55f7e2d6a6e8c37ab382dd59c7f", "patch": "@@ -1060,6 +1060,13 @@ do { char dstr[30];\t\t\t\t\t\\\n \n #define FILE_ASM_OP \"\\t.file\\n\"\n \n+#define PREDICATE_CODES\t\t\t\t\t\t\t\\\n+  {\"call_address_operand\",\t{ SYMBOL_REF, REG }},\t\t\t\\\n+  {\"constant_memory_operand\",\t{ MEM }},\t\t\t\t\\\n+  {\"extendpsi_operand\",\t\t{ PLUS, CONST_INT, CONST_DOUBLE, CONST,\t\\\n+\t\t\t\t  SYMBOL_REF, LABEL_REF, SUBREG, REG, MEM }}, \\\n+  {\"nshift_operator\",\t\t{ ASHIFTRT, LSHIFTRT, ASHIFT }},\n+\n extern void asm_file_start ();\n extern void print_operand ();\n extern void print_operand_address ();"}, {"sha": "476332481096d33be3f5b1f7efd1fcc533d3a8ad", "filename": "gcc/config/ns32k/ns32k.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Fns32k%2Fns32k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Fns32k%2Fns32k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.md?ref=997718c768cbd55f7e2d6a6e8c37ab382dd59c7f", "patch": "@@ -2904,7 +2904,7 @@\n ;; ffs instructions\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"ro\")\n+  [(set (match_operand:SI 0 \"general_operand\" \"=ro\")\n \t(minus:SI \n \t\t(plus:SI (ffs:SI (zero_extract:SI \n \t\t\t\t(match_operand:SI 1 \"general_operand\" \"g\") "}, {"sha": "469e8e20db439e36f0ebebc13de42de981d9c4cf", "filename": "gcc/config/pdp11/pdp11.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.md?ref=997718c768cbd55f7e2d6a6e8c37ab382dd59c7f", "patch": "@@ -223,7 +223,7 @@\n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else\n-\t (ne (plus:HI (match_operand:HI 0 \"register_operand\" \"r\")\n+\t (ne (plus:HI (match_operand:HI 0 \"register_operand\" \"+r\")\n \t\t      (const_int -1))\n \t     (const_int 0))\n \t (label_ref (match_operand 1 \"\" \"\"))"}, {"sha": "8ed98291dd45e01cc49ec34cc99c9f709288b661", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=997718c768cbd55f7e2d6a6e8c37ab382dd59c7f", "patch": "@@ -2943,17 +2943,17 @@\n    (set_attr \"type\" \"pcload,move\")])\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"y\")\n-\t(match_operand:SI 1 \"immediate_operand\" \"I\"))\n-   (clobber (match_operand:SI 2 \"register_operand\" \"r\"))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(match_operand:SI 1 \"immediate_operand\" \"\"))\n+   (clobber (match_operand:SI 2 \"register_operand\" \"\"))]\n   \"\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (match_dup 2))]\n   \"\")\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"y\")\n-\t(match_operand:SI 1 \"memory_operand\" \">\"))\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(match_operand:SI 1 \"memory_operand\" \"\"))\n    (clobber (reg:SI 0))]\n   \"\"\n   [(set (match_dup 0) (match_dup 1))]\n@@ -2992,7 +2992,7 @@\n ;; This one has the additional purpose to record a possible scratch register\n ;; for the following branch.\n (define_insn \"indirect_jump_scratch\"\n-  [(set (match_operand 0 \"register_operand\" \"r\")\n+  [(set (match_operand 0 \"register_operand\" \"=r\")\n \t(unspec [(match_operand 1 \"const_int_operand\" \"\")] 4))]\n   \"\"\n   \"\"\n@@ -3791,7 +3791,7 @@\n ;; The gp_fpul type for r/!c might look a bit odd, but it actually schedules\n ;; like a gpr <-> fpul move.\n (define_insn \"fpu_switch\"\n-  [(set (match_operand:PSI 0 \"register_operand\" \"c,c,r,c,c,r,m,r\")\n+  [(set (match_operand:PSI 0 \"register_operand\" \"=c,c,r,c,c,r,m,r\")\n \t(match_operand:PSI 1 \"general_movsrc_operand\" \"c,>,m,m,r,r,r,!c\"))]\n   \"! reload_completed\n    || true_regnum (operands[0]) != FPSCR_REG || GET_CODE (operands[1]) != MEM"}, {"sha": "d1df676e99de32481826e171b0d6d7d42d4ff0d3", "filename": "gcc/config/v850/v850.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Fv850%2Fv850.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Fv850%2Fv850.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.md?ref=997718c768cbd55f7e2d6a6e8c37ab382dd59c7f", "patch": "@@ -1255,7 +1255,7 @@\n    [(return)\n     (set (reg:SI 3)\n \t (plus:SI (reg:SI 3) (match_operand:SI 1 \"immediate_operand\" \"i\")))\n-    (set (match_operand:SI 2 \"register_is_ok_for_epilogue\" \"r\")\n+    (set (match_operand:SI 2 \"register_is_ok_for_epilogue\" \"=r\")\n \t (mem:SI (plus:SI (reg:SI 3)\n \t\t\t  (match_operand:SI 3 \"immediate_operand\" \"i\"))))])]\n  \"TARGET_PROLOG_FUNCTION && TARGET_V850\""}, {"sha": "0f48a314415f64b06fa2fdd2ed37e2abf981a44a", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=997718c768cbd55f7e2d6a6e8c37ab382dd59c7f", "patch": "@@ -1825,7 +1825,7 @@\n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else\n-\t (ne (match_operand:SI 0 \"general_operand\" \"g\")\n+\t (ne (match_operand:SI 0 \"general_operand\" \"+g\")\n \t     (const_int 0))\n \t (label_ref (match_operand 1 \"\" \"\"))\n \t (pc)))"}]}