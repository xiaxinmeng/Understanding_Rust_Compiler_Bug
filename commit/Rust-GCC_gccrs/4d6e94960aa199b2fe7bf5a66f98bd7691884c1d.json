{"sha": "4d6e94960aa199b2fe7bf5a66f98bd7691884c1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ2ZTk0OTYwYWExOTliMmZlN2JmNWE2NmY5OGJkNzY5MTg4NGMxZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-07-21T19:37:58Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-07-21T19:42:09Z"}, "message": "c++: Fix scan forward over pragma [PR96257]\n\nIt turns out that the paren scanning code is used for speculatively searching\nto see if we're looking at a compound_literal.  So we shouldn't always purge\npragma tokens.\n\n\tgcc/cp/\n\t* parser.c (cp_lexer_consume_token): Drop PRAGMA_EOL assert.\n\t(cp_parser_skip_to_closing_parenthesis_1): Only pass start token\n\tto pragma skipper if recovering.\n\t(cp_parser_skip_to_pragma_eol): Only purge and change pragma\n\tstate when recovering.\n\tgcc/testsuite/\n\t* g++.dg/parse/pr96257.C: New.", "tree": {"sha": "a9e4bce1eb8d4b9514d0baa8322d95d61fb1e0fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9e4bce1eb8d4b9514d0baa8322d95d61fb1e0fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d6e94960aa199b2fe7bf5a66f98bd7691884c1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d6e94960aa199b2fe7bf5a66f98bd7691884c1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d6e94960aa199b2fe7bf5a66f98bd7691884c1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d6e94960aa199b2fe7bf5a66f98bd7691884c1d/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28f2a080cc27531a8c78aec9f44aeff4961c2a4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28f2a080cc27531a8c78aec9f44aeff4961c2a4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28f2a080cc27531a8c78aec9f44aeff4961c2a4c"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "5a2d73d1ab04a5d5f80118332b43b6a2147a3c4d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d6e94960aa199b2fe7bf5a66f98bd7691884c1d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d6e94960aa199b2fe7bf5a66f98bd7691884c1d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4d6e94960aa199b2fe7bf5a66f98bd7691884c1d", "patch": "@@ -1121,8 +1121,6 @@ cp_lexer_consume_token (cp_lexer* lexer)\n {\n   cp_token *token = lexer->next_token;\n \n-  gcc_assert (!lexer->in_pragma || token->type != CPP_PRAGMA_EOL);\n-\n   do\n     {\n       gcc_assert (token->type != CPP_EOF);\n@@ -3691,7 +3689,7 @@ cp_parser_skip_to_closing_parenthesis_1 (cp_parser *parser,\n \n \tcase CPP_PRAGMA:\n \t  /* We fell into a pragma.  Skip it, and continue. */\n-\t  cp_parser_skip_to_pragma_eol (parser, token);\n+\t  cp_parser_skip_to_pragma_eol (parser, recovering ? token : nullptr);\n \t  continue;\n \n \tdefault:\n@@ -3930,15 +3928,14 @@ cp_parser_skip_to_closing_brace (cp_parser *parser)\n \n /* Consume tokens until we reach the end of the pragma.  The PRAGMA_TOK\n    parameter is the PRAGMA token, allowing us to purge the entire pragma\n-   sequence.  */\n+   sequence.  PRAGMA_TOK can be NULL, if we're speculatively scanning\n+   forwards (not error recovery).  */\n \n static void\n cp_parser_skip_to_pragma_eol (cp_parser* parser, cp_token *pragma_tok)\n {\n   cp_token *token;\n \n-  parser->lexer->in_pragma = false;\n-\n   do\n     {\n       /* The preprocessor makes sure that a PRAGMA_EOL token appears\n@@ -3950,8 +3947,12 @@ cp_parser_skip_to_pragma_eol (cp_parser* parser, cp_token *pragma_tok)\n     }\n   while (token->type != CPP_PRAGMA_EOL);\n \n-  /* Ensure that the pragma is not parsed again.  */\n-  cp_lexer_purge_tokens_after (parser->lexer, pragma_tok);\n+  if (pragma_tok)\n+    {\n+      /* Ensure that the pragma is not parsed again.  */\n+      cp_lexer_purge_tokens_after (parser->lexer, pragma_tok);\n+      parser->lexer->in_pragma = false;\n+    }\n }\n \n /* Require pragma end of line, resyncing with it as necessary.  The"}, {"sha": "34b0208c5d70aebc91026236cad2ed42e665f66a", "filename": "gcc/testsuite/g++.dg/parse/pr96257.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d6e94960aa199b2fe7bf5a66f98bd7691884c1d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr96257.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d6e94960aa199b2fe7bf5a66f98bd7691884c1d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr96257.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr96257.C?ref=4d6e94960aa199b2fe7bf5a66f98bd7691884c1d", "patch": "@@ -0,0 +1,18 @@\n+// PR96257 we scan forwards checking for a compound literal.  Do not\n+// eat the tokens when doing that!\n+/* { dg-require-effective-target fopenmp } */\n+/* { dg-additional-options -fopenmp }  */\n+\n+int\n+f2 ()\n+{\n+  int s = (int // { dg-error \"expected\" }\n+#pragma omp atomic capture\n+       ){1};\n+\n+  int t = (int // { dg-error \"expected\" }\n+#pragma omp atomic capture ){\n+    {1};\n+\n+    return s + t;\n+} // { dg-bogus \"expected\" }"}]}