{"sha": "588d3ade1368851d1f6a239bcc7a76539ae13649", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg4ZDNhZGUxMzY4ODUxZDFmNmEyMzliY2M3YTc2NTM5YWUxMzY0OQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-10-05T02:49:16Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-10-05T02:49:16Z"}, "message": "Makefile.in (OBJS): Added tree-inline.o.\n\n* Makefile.in (OBJS): Added tree-inline.o.\n(c-common.o): Depend on tree-inline.h.\n(tree-inline.o): New target.\n* c-common.c: Include tree-inline.h.\n(c_mark_lang_decl): Don't mark saved_tree.\n(c_common_lang_init): Set lang_anon_aggr_type_p.\n* c-common.h (walk_tree_fn, DECL_SAVED_TREE): Moved to tree.h.\n(struct c_lang_decl): Moved saved_tree to tree_decl.\n* ggc-common.c: Mark saved_tree and inlined_fns of FUNCTION_DECLs.\n* integrate.h (function_attribute_inlinable_p): Declare it.\n* integrate.c (function_attribute_inlinable_p): Export it.\n* tree-inline.c: New file.  Define variables declared in...\n* tree-inline.h: New file.  Declare functions to be moved to\ntree-inline.c.  Define macros and declare types and hooks for\nlanguage-specific tree inlining.\n(flag_inline_trees): Moved definition from cp/decl2.c.\n* tree.h (walk_tree_fn, DECL_SAVED_TREE): Moved from c-common.h.\n(TREE_READONLY_DECL_P, DECL_INLINED_FNS): Moved from cp/cp-tree.h.\n(struct tree_decl): Moved saved_tree from c_lang_decl and\ninlined_fns from C++'s lang_decl.\n\nFrom-SVN: r46021", "tree": {"sha": "2f6c9d765b33ae23a613a61116ed9e165f3ee6d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f6c9d765b33ae23a613a61116ed9e165f3ee6d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/588d3ade1368851d1f6a239bcc7a76539ae13649", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/588d3ade1368851d1f6a239bcc7a76539ae13649", "html_url": "https://github.com/Rust-GCC/gccrs/commit/588d3ade1368851d1f6a239bcc7a76539ae13649", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/588d3ade1368851d1f6a239bcc7a76539ae13649/comments", "author": null, "committer": null, "parents": [{"sha": "25af8512559873d4b6e67d27a07f504a585b6037", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25af8512559873d4b6e67d27a07f504a585b6037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25af8512559873d4b6e67d27a07f504a585b6037"}], "stats": {"total": 273, "additions": 250, "deletions": 23}, "files": [{"sha": "4fe40a3f1237b52fb36ed9f9372e05a133a8ed2c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/588d3ade1368851d1f6a239bcc7a76539ae13649/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/588d3ade1368851d1f6a239bcc7a76539ae13649/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=588d3ade1368851d1f6a239bcc7a76539ae13649", "patch": "@@ -1,3 +1,26 @@\n+2001-10-04  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* Makefile.in (OBJS): Added tree-inline.o.\n+\t(c-common.o): Depend on tree-inline.h.\n+\t(tree-inline.o): New target.\n+\t* c-common.c: Include tree-inline.h.\n+\t(c_mark_lang_decl): Don't mark saved_tree.\n+\t(c_common_lang_init): Set lang_anon_aggr_type_p.\n+\t* c-common.h (walk_tree_fn, DECL_SAVED_TREE): Moved to tree.h.\n+\t(struct c_lang_decl): Moved saved_tree to tree_decl.\n+\t* ggc-common.c: Mark saved_tree and inlined_fns of FUNCTION_DECLs.\n+\t* integrate.h (function_attribute_inlinable_p): Declare it.\n+\t* integrate.c (function_attribute_inlinable_p): Export it.\n+\t* tree-inline.c: New file.  Define variables declared in...\n+\t* tree-inline.h: New file.  Declare functions to be moved to\n+\ttree-inline.c.  Define macros and declare types and hooks for\n+\tlanguage-specific tree inlining.\n+\t(flag_inline_trees): Moved definition from cp/decl2.c.\n+\t* tree.h (walk_tree_fn, DECL_SAVED_TREE): Moved from c-common.h.\n+\t(TREE_READONLY_DECL_P, DECL_INLINED_FNS): Moved from cp/cp-tree.h.\n+\t(struct tree_decl): Moved saved_tree from c_lang_decl and\n+\tinlined_fns from C++'s lang_decl.\n+\n 2001-10-04  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* Makefile.in (STAGE2_FLAGS_TO_PASS): Remove patches which"}, {"sha": "f6a4d74ca33345518ec895cb7e74a30ecfbe8caa", "filename": "gcc/Makefile.in", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/588d3ade1368851d1f6a239bcc7a76539ae13649/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/588d3ade1368851d1f6a239bcc7a76539ae13649/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=588d3ade1368851d1f6a239bcc7a76539ae13649", "patch": "@@ -748,7 +748,7 @@ OBJS =\t\t\t\t\t\t\t\t\t\\\n  sdbout.o sibcall.o simplify-rtx.o splay-tree.o ssa.o ssa-ccp.o         \\\n  ssa-dce.o stmt.o stor-layout.o stringpool.o timevar.o toplev.o tree.o  \\\n  unroll.o varasm.o varray.o version.o xcoffout.o cfg.o cfganal.o\t\\\n- cfgbuild.o cfgcleanup.o cfgloop.o cfgrtl.o        \\\n+ cfgbuild.o cfgcleanup.o cfgloop.o cfgrtl.o tree-inline.o \t\t\\\n  $(GGC) $(out_object_file) $(EXTRA_OBJS)\n \n BACKEND = main.o libbackend.a\n@@ -1249,7 +1249,8 @@ s-under: $(GCC_PASSES)\n \n c-common.o : c-common.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(OBSTACK_H) \\\n \t$(C_COMMON_H) flags.h toplev.h output.h c-pragma.h $(RTL_H) $(GGC_H) \\\n-\t$(EXPR_H) $(TM_P_H) builtin-types.def builtin-attrs.def $(TARGET_H)\n+\t$(EXPR_H) $(TM_P_H) builtin-types.def builtin-attrs.def $(TARGET_H) \\\n+\ttree-inline.h\n \n # A file used by all variants of C and some other languages.\n \n@@ -1350,6 +1351,8 @@ convert.o: convert.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) flags.h convert.h toplev.\n \n tree.o : tree.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) flags.h function.h toplev.h \\\n    $(GGC_H) $(HASHTAB_H) $(TARGET_H) output.h $(TM_P_H)\n+tree-inline.o : tree-inline.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n+   tree-inline.h\n print-tree.o : print-tree.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(GGC_H)\n stor-layout.o : stor-layout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) flags.h \\\n    function.h $(EXPR_H) $(RTL_H) toplev.h $(GGC_H) $(TM_P_H)"}, {"sha": "2f5b00a4b0002b54cdc4b50f1bac6798c854be3c", "filename": "gcc/c-common.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/588d3ade1368851d1f6a239bcc7a76539ae13649/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/588d3ade1368851d1f6a239bcc7a76539ae13649/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=588d3ade1368851d1f6a239bcc7a76539ae13649", "patch": "@@ -22,6 +22,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"config.h\"\n #include \"system.h\"\n #include \"tree.h\"\n+#include \"tree-inline.h\"\n #include \"flags.h\"\n #include \"toplev.h\"\n #include \"output.h\"\n@@ -3331,7 +3332,6 @@ void\n c_mark_lang_decl (c)\n      struct c_lang_decl *c;\n {\n-  ggc_mark_tree (c->saved_tree);\n }\n \n /* Mark F for GC.  */\n@@ -3831,6 +3831,8 @@ c_common_lang_init ()\n   if (flag_bounds_check < 0)\n     flag_bounds_check = flag_bounded_pointers;\n \n+  lang_anon_aggr_type_p = anon_aggr_type_p;\n+\n   /* Special format checking options don't work without -Wformat; warn if\n      they are used.  */\n   if (warn_format_y2k && !warn_format)"}, {"sha": "2212ceea865a59420c0191395ace930554333e47", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/588d3ade1368851d1f6a239bcc7a76539ae13649/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/588d3ade1368851d1f6a239bcc7a76539ae13649/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=588d3ade1368851d1f6a239bcc7a76539ae13649", "patch": "@@ -316,12 +316,6 @@ extern void (*lang_expand_function_end)         PARAMS ((void));\n extern int (*lang_missing_noreturn_ok_p)\tPARAMS ((tree));\n \n \n-/* The type of a function that walks over tree structure.  */\n-\n-typedef tree (*walk_tree_fn)                    PARAMS ((tree *,\n-\t\t\t\t\t\t\t int *,\n-\t\t\t\t\t\t\t void *));\n-\n extern stmt_tree current_stmt_tree              PARAMS ((void));\n extern tree *current_scope_stmt_stack           PARAMS ((void));\n extern void begin_stmt_tree                     PARAMS ((tree *));\n@@ -344,17 +338,9 @@ extern void mark_stmt_tree                      PARAMS ((void *));\n    DECL_LANG_SPECIFIC field.  */\n \n struct c_lang_decl {\n-  /* In a FUNCTION_DECL, this is DECL_SAVED_TREE.  */\n-  tree saved_tree;\n+  char dummy;\n };\n \n-/* In a FUNCTION_DECL, the saved representation of the body of the\n-   entire function.  Usually a COMPOUND_STMT, but in C++ this may also\n-   be a RETURN_INIT, CTOR_INITIALIZER, or TRY_BLOCK.  */\n-#define DECL_SAVED_TREE(NODE)\t\t\t\t\t\t    \\\n-  (((struct c_lang_decl *) DECL_LANG_SPECIFIC (FUNCTION_DECL_CHECK (NODE))) \\\n-   ->saved_tree)\n-\n /* In a FUNCTION_DECL for which DECL_BUILT_IN does not hold, this is\n      the approximate number of statements in this function.  There is\n      no need for this number to be exact; it is only used in various"}, {"sha": "5fdd5e16fdd8fae69424e7b5b07e5d60666dec35", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/588d3ade1368851d1f6a239bcc7a76539ae13649/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/588d3ade1368851d1f6a239bcc7a76539ae13649/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=588d3ade1368851d1f6a239bcc7a76539ae13649", "patch": "@@ -463,8 +463,13 @@ ggc_mark_trees ()\n \t  ggc_mark_tree (DECL_VINDEX (t));\n \t  if (DECL_ASSEMBLER_NAME_SET_P (t))\n \t    ggc_mark_tree (DECL_ASSEMBLER_NAME (t));\n-\t  if (TREE_CODE (t) == FUNCTION_DECL && DECL_SAVED_INSNS (t))\n-\t    ggc_mark_struct_function (DECL_SAVED_INSNS (t));\n+\t  if (TREE_CODE (t) == FUNCTION_DECL)\n+\t    {\n+\t      ggc_mark_tree (DECL_SAVED_TREE (t));\n+\t      ggc_mark_tree (DECL_INLINED_FNS (t));\n+\t      if (DECL_SAVED_INSNS (t))\n+\t\tggc_mark_struct_function (DECL_SAVED_INSNS (t));\n+\t    }\n \t  lang_mark_tree (t);\n \t  break;\n "}, {"sha": "9105deef854bd3ec01e9978cdd6d1e6e007f97ec", "filename": "gcc/integrate.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/588d3ade1368851d1f6a239bcc7a76539ae13649/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/588d3ade1368851d1f6a239bcc7a76539ae13649/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=588d3ade1368851d1f6a239bcc7a76539ae13649", "patch": "@@ -77,8 +77,6 @@ typedef struct initial_value_struct {\n   initial_value_pair *entries;\n } initial_value_struct;\n \n-static bool function_attribute_inlinable_p PARAMS ((tree));\n-\n static void setup_initial_hard_reg_value_integration PARAMS ((struct function *, struct inline_remap *));\n \n static rtvec initialize_for_inline\tPARAMS ((tree));\n@@ -129,7 +127,7 @@ get_label_from_map (map, i)\n \n /* Return false if the function FNDECL cannot be inlined on account of its\n    attributes, true otherwise.  */\n-static bool\n+bool\n function_attribute_inlinable_p (fndecl)\n      tree fndecl;\n {"}, {"sha": "888a8b4f70948cbf53bd5d80994d247f7c090876", "filename": "gcc/integrate.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/588d3ade1368851d1f6a239bcc7a76539ae13649/gcc%2Fintegrate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/588d3ade1368851d1f6a239bcc7a76539ae13649/gcc%2Fintegrate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.h?ref=588d3ade1368851d1f6a239bcc7a76539ae13649", "patch": "@@ -152,6 +152,11 @@ extern union tree_node *copy_decl_for_inlining PARAMS ((union tree_node *,\n \t\t\t\t\t\t      union tree_node *,\n \t\t\t\t\t\t      union tree_node *));\n \n+/* Check whether there's any attribute in a function declaration that\n+   makes the function uninlinable.  Returns false if it finds any,\n+   true otherwise.  */\n+extern bool function_attribute_inlinable_p PARAMS ((union tree_node *));\n+\n extern void try_constants PARAMS ((rtx, struct inline_remap *));\n \n /* Return the label indicated.  */"}, {"sha": "3679e20df4572da5709f6c96b1f80ad61dbcd8ce", "filename": "gcc/tree-inline.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/588d3ade1368851d1f6a239bcc7a76539ae13649/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/588d3ade1368851d1f6a239bcc7a76539ae13649/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=588d3ade1368851d1f6a239bcc7a76539ae13649", "patch": "@@ -0,0 +1,43 @@\n+/* Control and data flow functions for trees.\n+   Copyright 2001 Free Software Foundation, Inc.\n+   Contributed by Alexandre Oliva <aoliva@redhat.com>\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"tree.h\"\n+#include \"tree-inline.h\"\n+\n+/* Definitions of language hooks.  */\n+\n+treeopt_walk_subtrees_type *lang_walk_subtrees;\n+treeopt_cannot_inline_tree_fn_type *lang_cannot_inline_tree_fn;\n+treeopt_disregard_inline_limits_type *lang_disregard_inline_limits;\n+treeopt_add_pending_fn_decls_type *lang_add_pending_fn_decls;\n+treeopt_tree_chain_matters_p_type *lang_tree_chain_matters_p;\n+treeopt_auto_var_in_fn_p_type *lang_auto_var_in_fn_p;\n+treeopt_copy_res_decl_for_inlining_type *lang_copy_res_decl_for_inlining;\n+treeopt_anon_aggr_type_p *lang_anon_aggr_type_p;\n+\n+/* 0 if we should not perform inlining.\n+   1 if we should expand functions calls inline at the tree level.  \n+   2 if we should consider *all* functions to be inline \n+   candidates.  */\n+\n+int flag_inline_trees = 0;"}, {"sha": "6e00f962789a860dd84a02ed138f4e215fada8d3", "filename": "gcc/tree-inline.h", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/588d3ade1368851d1f6a239bcc7a76539ae13649/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/588d3ade1368851d1f6a239bcc7a76539ae13649/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=588d3ade1368851d1f6a239bcc7a76539ae13649", "patch": "@@ -0,0 +1,139 @@\n+/* Tree inlining hooks and declarations.\n+   Copyright 2001 Free Software Foundation, Inc.\n+   Contributed by Alexandre Oliva  <aoliva@redhat.com>\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#ifndef GCC_TREE_INLINE_H\n+#define GCC_TREE_INLINE_H\n+\n+/* Function prototypes.  */\n+\n+void optimize_inline_calls PARAMS ((tree));\n+tree walk_tree PARAMS ((tree*, walk_tree_fn, void*, void*));\n+tree walk_tree_without_duplicates PARAMS ((tree*, walk_tree_fn, void*));\n+tree copy_tree_r PARAMS ((tree*, int*, void*));\n+void clone_body PARAMS ((tree, tree, void*));\n+void remap_save_expr PARAMS ((tree*, void*, tree, int*));\n+\n+/* LANG_WALK_SUBTREES is called by walk_tree() after handling common\n+   cases, but before walking code-specific sub-trees.  If\n+   lang_walk_subtrees is defined for a language, it should handle\n+   language-specific tree codes, as well as language-specific\n+   information associated to common tree codes.  If a tree node is\n+   completely handled within this function, it should set *SUBTREES to\n+   0, so that generic handling isn't attempted.  For language-specific\n+   tree codes, generic handling would abort(), so make sure it is set\n+   properly.  Both SUBTREES and *SUBTREES is guaranteed to be non-zero\n+   when the function is called.  */\n+\n+#define LANG_WALK_SUBTREES(TP,SUBTREES,FUNC,DATA,HTAB) \\\n+  (lang_walk_subtrees \\\n+   ? (*lang_walk_subtrees)((TP),(SUBTREES),(FUNC),(DATA),(HTAB)) \\\n+   : 0)\n+typedef tree treeopt_walk_subtrees_type PARAMS ((tree*, int*, walk_tree_fn,\n+\t\t\t\t\t\t void*, void*));\n+extern treeopt_walk_subtrees_type *lang_walk_subtrees;\n+\n+/* LANG_CANNOT_INLINE_TREE_FN is called to determine whether there are\n+   language-specific reasons for not inlining a given function.  */\n+\n+#define LANG_CANNOT_INLINE_TREE_FN(FNP) \\\n+  (lang_cannot_inline_tree_fn ? (*lang_cannot_inline_tree_fn)(FNP) : 0)\n+typedef int treeopt_cannot_inline_tree_fn_type PARAMS ((tree*));\n+extern treeopt_cannot_inline_tree_fn_type *lang_cannot_inline_tree_fn;\n+\n+/* LANG_DISREGARD_INLINE_LIMITS is called to determine whether a\n+   function should be inlined even if it would exceed inlining limits.  */\n+\n+#define LANG_DISREGARD_INLINE_LIMITS(FN) \\\n+  (lang_disregard_inline_limits ? (*lang_disregard_inline_limits)(FN) : 0)\n+typedef int treeopt_disregard_inline_limits_type PARAMS ((tree));\n+extern treeopt_disregard_inline_limits_type *lang_disregard_inline_limits;\n+\n+/* LANG_ADD_PENDING_FN_DECLS is called before starting to inline a\n+   function, to push any language-specific functions that should not\n+   be inlined into the current function, into VAFNP.  PFN is the top\n+   of varray, and should be returned if no functions are pushed into\n+   VAFNP.  The top of the varray should be returned.  */\n+\n+#define LANG_ADD_PENDING_FN_DECLS(VAFNP,PFN) \\\n+  (lang_add_pending_fn_decls \\\n+   ? (*lang_add_pending_fn_decls)((VAFNP),(PFN)) \\\n+   : (PFN))\n+typedef tree treeopt_add_pending_fn_decls_type PARAMS ((void*,tree));\n+extern treeopt_add_pending_fn_decls_type *lang_add_pending_fn_decls;\n+\n+/* LANG_TREE_CHAIN_MATTERS_P indicates whether the TREE_CHAIN of a\n+   language-specific tree node is relevant, i.e., whether it should be\n+   walked, copied and preserved across copies.  */\n+\n+#define LANG_TREE_CHAIN_MATTERS_P(T) \\\n+  (lang_tree_chain_matters_p ? (*lang_tree_chain_matters_p)(T) : 0)\n+typedef int treeopt_tree_chain_matters_p_type PARAMS ((tree));\n+extern treeopt_tree_chain_matters_p_type *lang_tree_chain_matters_p;\n+\n+/* LANG_AUTO_VAR_IN_FN_P is called to determine whether VT is an\n+   automatic variable defined in function FT.  */\n+\n+#define LANG_AUTO_VAR_IN_FN_P(VT,FT) \\\n+  (lang_auto_var_in_fn_p ? (*lang_auto_var_in_fn_p)((VT),(FT)) \\\n+   : (DECL_P (VT) && DECL_CONTEXT (VT) == (FT) \\\n+      && (((TREE_CODE (VT) == VAR_DECL || TREE_CODE (VT) == PARM_DECL) \\\n+\t   && ! TREE_STATIC (VT)) \\\n+\t  || TREE_CODE (VT) == LABEL_DECL \\\n+\t  || TREE_CODE (VT) == RESULT_DECL)))\n+typedef int treeopt_auto_var_in_fn_p_type PARAMS ((tree,tree));\n+extern treeopt_auto_var_in_fn_p_type *lang_auto_var_in_fn_p;\n+\n+/* LANG_COPY_RES_DECL_FOR_INLINING should return a declaration for the\n+   result RES of function FN to be inlined into CALLER.  NDP points to\n+   an integer that should be set in case a new declaration wasn't\n+   created (presumably because RES was of aggregate type, such that a\n+   TARGET_EXPR is used for the result).  TEXPS is a pointer to a\n+   varray with the stack of TARGET_EXPRs seen while inlining functions\n+   into caller; the top of TEXPS is supposed to match RES.  */\n+\n+#define LANG_COPY_RES_DECL_FOR_INLINING(RES,FN,CALLER,DM,NDP,TEXPS) \\\n+  (lang_copy_res_decl_for_inlining \\\n+   ? (*lang_copy_res_decl_for_inlining)((RES),(FN),(CALLER),\\\n+\t\t\t\t\t(DM),(NDP),(TEXPS)) \\\n+   : copy_decl_for_inlining ((RES), (FN), (CALLER)))\n+typedef tree treeopt_copy_res_decl_for_inlining_type PARAMS ((tree, tree,\n+\t\t\t\t\t\t\t      tree, void*,\n+\t\t\t\t\t\t\t      int*, void*));\n+extern treeopt_copy_res_decl_for_inlining_type\n+*lang_copy_res_decl_for_inlining;\n+\n+/* LANG_ANON_AGGR_TYPE_P determines whether T is a type node\n+   representing an anonymous aggregate (union, struct, etc), i.e., one\n+   whose members are in the same scope as the union itself.  */\n+\n+#define LANG_ANON_AGGR_TYPE_P(T) \\\n+  (lang_anon_aggr_type_p ? (*lang_anon_aggr_type_p)(T) : 0)\n+typedef int treeopt_anon_aggr_type_p PARAMS ((tree));\n+extern treeopt_anon_aggr_type_p *lang_anon_aggr_type_p;\n+\n+/* 0 if we should not perform inlining.\n+   1 if we should expand functions calls inline at the tree level.  \n+   2 if we should consider *all* functions to be inline \n+   candidates.  */\n+\n+extern int flag_inline_trees;\n+\n+#endif /* GCC_TREE_INLINE_H */"}, {"sha": "def0e132ed5cd171063861953a0feef5a8474655", "filename": "gcc/tree.h", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/588d3ade1368851d1f6a239bcc7a76539ae13649/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/588d3ade1368851d1f6a239bcc7a76539ae13649/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=588d3ade1368851d1f6a239bcc7a76539ae13649", "patch": "@@ -560,6 +560,10 @@ extern void tree_class_check_failed PARAMS ((const tree, int,\n    when the node is a type).  */\n #define TREE_READONLY(NODE) ((NODE)->common.readonly_flag)\n \n+/* Non-zero if NODE is a _DECL with TREE_READONLY set.  */\n+#define TREE_READONLY_DECL_P(NODE) \\\n+  (TREE_READONLY (NODE) && DECL_P (NODE))\n+\n /* Value of expression is constant.\n    Always appears in all ..._CST nodes.\n    May also appear in an arithmetic expression, an ADDR_EXPR or a CONSTRUCTOR\n@@ -1547,6 +1551,14 @@ struct tree_type\n /* In a FUNCTION_DECL, nonzero if the function cannot be inlined.  */\n #define DECL_UNINLINABLE(NODE) (FUNCTION_DECL_CHECK (NODE)->decl.uninlinable)\n \n+/* In a FUNCTION_DECL, the saved representation of the body of the\n+   entire function.  Usually a COMPOUND_STMT, but in C++ this may also\n+   be a RETURN_INIT, CTOR_INITIALIZER, or TRY_BLOCK.  */\n+#define DECL_SAVED_TREE(NODE) (FUNCTION_DECL_CHECK (NODE)->decl.saved_tree)\n+\n+/* List of FUNCION_DECLs inlined into this function's body.  */\n+#define DECL_INLINED_FNS(NODE) (FUNCTION_DECL_CHECK (NODE)->decl.inlined_fns)\n+\n /* Nonzero in a FUNCTION_DECL means this is a built-in function\n    that is not specified by ansi C and that users are supposed to be allowed\n    to redefine for any purpose whatever.  */\n@@ -1769,6 +1781,13 @@ struct tree_decl\n     int i;\n   } u2;\n \n+  /* In a FUNCTION_DECL, this is DECL_SAVED_TREE.  */\n+  tree saved_tree;\n+\n+  /* In a FUNCTION_DECL, these are function data which is to be kept\n+     as long as FUNCTION_DECL is kept.  */\n+  tree inlined_fns;\n+\n   tree vindex;\n   HOST_WIDE_INT pointer_alias_set;\n   /* Points to a structure whose details depend on the language in use.  */\n@@ -3050,6 +3069,10 @@ extern void dwarf2out_return_save\tPARAMS ((const char *, long));\n \n extern void dwarf2out_return_reg\tPARAMS ((const char *, unsigned));\n \n+/* The type of a function that walks over tree structure.  */\n+\n+typedef tree (*walk_tree_fn)\t\tPARAMS ((tree *, int *, void *));\n+\n \f\n /* Redefine abort to report an internal error w/o coredump, and\n    reporting the location of the error in the source file.  This logic"}]}