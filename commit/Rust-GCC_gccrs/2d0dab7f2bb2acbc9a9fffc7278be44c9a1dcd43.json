{"sha": "2d0dab7f2bb2acbc9a9fffc7278be44c9a1dcd43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQwZGFiN2YyYmIyYWNiYzlhOWZmZmM3Mjc4YmU0NGM5YTFkY2Q0Mw==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2005-07-02T14:15:11Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2005-07-02T14:15:11Z"}, "message": "tree-ssa-dom.c (find_equivalent_equality_comparison): Do not a eliminate type conversion which feeds an equality comparison if...\n\n\n        * tree-ssa-dom.c (find_equivalent_equality_comparison): Do not\n        a eliminate type conversion which feeds an equality comparison\n        if the original type or either operand in the comparison is a\n        function pointer.\n\n\t* gcc.dg/tree-ssa/pr22051-1.c: New test.\n\t* gcc.dg/tree-ssa/pr22051-2.c: New test.\n\nFrom-SVN: r101534", "tree": {"sha": "bc249b4ee590ce8d295fe4bb0175dcaab1069eb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc249b4ee590ce8d295fe4bb0175dcaab1069eb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d0dab7f2bb2acbc9a9fffc7278be44c9a1dcd43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d0dab7f2bb2acbc9a9fffc7278be44c9a1dcd43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d0dab7f2bb2acbc9a9fffc7278be44c9a1dcd43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d0dab7f2bb2acbc9a9fffc7278be44c9a1dcd43/comments", "author": null, "committer": null, "parents": [{"sha": "c85ce869e757158c55fd428befdb59ad5d537c1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c85ce869e757158c55fd428befdb59ad5d537c1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c85ce869e757158c55fd428befdb59ad5d537c1f"}], "stats": {"total": 82, "additions": 82, "deletions": 0}, "files": [{"sha": "6e5396a04a261edc0b83fc5470261e24201d0e6e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d0dab7f2bb2acbc9a9fffc7278be44c9a1dcd43/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d0dab7f2bb2acbc9a9fffc7278be44c9a1dcd43/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d0dab7f2bb2acbc9a9fffc7278be44c9a1dcd43", "patch": "@@ -1,3 +1,10 @@\n+2005-07-02  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-dom.c (find_equivalent_equality_comparison): Do not\n+\ta eliminate type conversion which feeds an equality comparison\n+\tif the original type or either operand in the comparison is a\n+\tfunction pointer.\n+\n 2005-07-02  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* c.opt, common.opt, config/bfin/bfin.opt, config/pa/pa.opt,"}, {"sha": "320f6ecf10a182ac1adb2cdb2126f06f189346f0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d0dab7f2bb2acbc9a9fffc7278be44c9a1dcd43/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d0dab7f2bb2acbc9a9fffc7278be44c9a1dcd43/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2d0dab7f2bb2acbc9a9fffc7278be44c9a1dcd43", "patch": "@@ -1,3 +1,8 @@\n+2005-07-02  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/pr22051-1.c: New test.\n+\t* gcc.dg/tree-ssa/pr22051-2.c: New test.\n+\n 2005-07-02  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/format/gcc_diag-1.c: Update."}, {"sha": "4815be0ac9e13c0c8f8e10832d809ea584119750", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr22051-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d0dab7f2bb2acbc9a9fffc7278be44c9a1dcd43/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr22051-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d0dab7f2bb2acbc9a9fffc7278be44c9a1dcd43/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr22051-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr22051-1.c?ref=2d0dab7f2bb2acbc9a9fffc7278be44c9a1dcd43", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile }  */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" }  */\n+\n+\n+void *arf ();\n+int\n+foo()\n+{\n+  void *p = arf ();\n+\n+  if ((void (*)(void))p != 0)\n+    return 1;\n+  else\n+    return 2;\n+}\n+\n+/* The cast to a function pointer type must remain after all optimizations\n+   are complete so that function pointer canonicalization works on those\n+   targets which require it.  */\n+/* { dg-final { scan-tree-dump-times \"if \\\\(\\\\(void \\\\(\\\\*<.*>\\\\) \\\\(void\\\\)\\\\) p\" 1 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */\n+\n+"}, {"sha": "aa4c00aa682e31ebcc81e6292bd999c64660d69f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr22051-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d0dab7f2bb2acbc9a9fffc7278be44c9a1dcd43/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr22051-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d0dab7f2bb2acbc9a9fffc7278be44c9a1dcd43/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr22051-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr22051-2.c?ref=2d0dab7f2bb2acbc9a9fffc7278be44c9a1dcd43", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile }  */\n+/* { dg-options \"-O2 -fdump-tree-optimized -w\" }  */\n+\n+\n+\n+\n+void *arf ();\n+int\n+foo()\n+{\n+  void (*q)(void);\n+  int r = q;\n+\n+  if (r != 0)\n+    return 1;\n+  else\n+    return 2;\n+}\n+\n+/* The cast to an int type must remain after all optimizations are complete\n+   so that we do not try to canonicalize a function pointer for the\n+   comparison when no such canonicalization is wanted.  */\n+/* { dg-final { scan-tree-dump-times \"if \\\\(\\\\(int\\\\) q\" 1 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */\n+"}, {"sha": "e341a68242aea7f4dba53147a22cdee450dd56a5", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d0dab7f2bb2acbc9a9fffc7278be44c9a1dcd43/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d0dab7f2bb2acbc9a9fffc7278be44c9a1dcd43/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=2d0dab7f2bb2acbc9a9fffc7278be44c9a1dcd43", "patch": "@@ -1882,6 +1882,18 @@ find_equivalent_equality_comparison (tree cond)\n     {\n       tree def_rhs = TREE_OPERAND (def_stmt, 1);\n \n+\n+      /* If either operand to the comparison is a pointer to\n+\t a function, then we can not apply this optimization\n+\t as some targets require function pointers to be\n+\t canonicalized and in this case this optimization would\n+\t eliminate a necessary canonicalization.  */\n+      if ((POINTER_TYPE_P (TREE_TYPE (op0))\n+\t   && TREE_CODE (TREE_TYPE (TREE_TYPE (op0))) == FUNCTION_TYPE)\n+\t  || (POINTER_TYPE_P (TREE_TYPE (op1))\n+\t      && TREE_CODE (TREE_TYPE (TREE_TYPE (op1))) == FUNCTION_TYPE))\n+\treturn NULL;\n+\t      \n       /* Now make sure the RHS of the MODIFY_EXPR is a typecast.  */\n       if ((TREE_CODE (def_rhs) == NOP_EXPR\n \t   || TREE_CODE (def_rhs) == CONVERT_EXPR)\n@@ -1895,6 +1907,16 @@ find_equivalent_equality_comparison (tree cond)\n \t      > TYPE_PRECISION (TREE_TYPE (def_rhs)))\n \t    return NULL;\n \n+\t  /* If the inner type of the conversion is a pointer to\n+\t     a function, then we can not apply this optimization\n+\t     as some targets require function pointers to be\n+\t     canonicalized.  This optimization would result in\n+\t     canonicalization of the pointer when it was not originally\n+\t     needed/intended.  */\n+\t  if (POINTER_TYPE_P (def_rhs_inner_type)\n+\t      && TREE_CODE (TREE_TYPE (def_rhs_inner_type)) == FUNCTION_TYPE)\n+\t    return NULL;\n+\n \t  /* What we want to prove is that if we convert OP1 to\n \t     the type of the object inside the NOP_EXPR that the\n \t     result is still equivalent to SRC. "}]}