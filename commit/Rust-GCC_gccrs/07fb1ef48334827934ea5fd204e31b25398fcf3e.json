{"sha": "07fb1ef48334827934ea5fd204e31b25398fcf3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdmYjFlZjQ4MzM0ODI3OTM0ZWE1ZmQyMDRlMzFiMjUzOThmY2YzZQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-05-30T08:58:51Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-30T08:58:51Z"}, "message": "[Ada] Minor reformatting\n\n2018-05-30  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* exp_aggr.adb, exp_unst.adb, freeze.adb, libgnat/a-direct.adb: Minor\n\treformatting.\n\nFrom-SVN: r260948", "tree": {"sha": "7f33091cf5c15355f69a595c7e19db70c7b23fd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f33091cf5c15355f69a595c7e19db70c7b23fd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07fb1ef48334827934ea5fd204e31b25398fcf3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07fb1ef48334827934ea5fd204e31b25398fcf3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07fb1ef48334827934ea5fd204e31b25398fcf3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07fb1ef48334827934ea5fd204e31b25398fcf3e/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e00ee732dd5ec5bbd663f685dfe1411028c71a5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e00ee732dd5ec5bbd663f685dfe1411028c71a5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e00ee732dd5ec5bbd663f685dfe1411028c71a5a"}], "stats": {"total": 53, "additions": 30, "deletions": 23}, "files": [{"sha": "528eea4eaa20f6044236c4eefbd1ea4f65b20f2e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07fb1ef48334827934ea5fd204e31b25398fcf3e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07fb1ef48334827934ea5fd204e31b25398fcf3e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=07fb1ef48334827934ea5fd204e31b25398fcf3e", "patch": "@@ -1,3 +1,8 @@\n+2018-05-30  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_aggr.adb, exp_unst.adb, freeze.adb, libgnat/a-direct.adb: Minor\n+\treformatting.\n+\n 2018-05-30  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_unst.adb (Visit_Node): Handle the semantic Procedure_To_Call"}, {"sha": "b8955d73dd053856b1d7ef66cd36e3288a18d786", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07fb1ef48334827934ea5fd204e31b25398fcf3e/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07fb1ef48334827934ea5fd204e31b25398fcf3e/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=07fb1ef48334827934ea5fd204e31b25398fcf3e", "patch": "@@ -4738,7 +4738,7 @@ package body Exp_Aggr is\n             if Is_Packed (Etype (N))\n               or else\n                 (Is_Record_Type (Component_Type (Etype (N)))\n-                 and then Has_Discriminants (Component_Type (Etype (N))))\n+                  and then Has_Discriminants (Component_Type (Etype (N))))\n             then\n                null;\n             else"}, {"sha": "6451246210a786869aacb1c6c2c51fc8a5fe5c58", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07fb1ef48334827934ea5fd204e31b25398fcf3e/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07fb1ef48334827934ea5fd204e31b25398fcf3e/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=07fb1ef48334827934ea5fd204e31b25398fcf3e", "patch": "@@ -720,8 +720,8 @@ package body Exp_Unst is\n                --  other calls.\n \n                when N_Allocator\n-                  | N_Free_Statement\n                   | N_Extended_Return_Statement\n+                  | N_Free_Statement\n                   | N_Simple_Return_Statement\n                =>\n                   declare\n@@ -735,8 +735,8 @@ package body Exp_Unst is\n                      end if;\n                   end;\n \n-               --  A 'Access reference is a (potential) call.\n-               --  Other attributes require special handling.\n+               --  A 'Access reference is a (potential) call. Other attributes\n+               --  require special handling.\n \n                when N_Attribute_Reference =>\n                   declare\n@@ -795,9 +795,9 @@ package body Exp_Unst is\n                      end case;\n                   end;\n \n-               --  Component associations in aggregates are either static\n-               --  or else the aggregate will be expanded into assignments,\n-               --  in which case the expression is analyzed later and provides\n+               --  Component associations in aggregates are either static or\n+               --  else the aggregate will be expanded into assignments, in\n+               --  which case the expression is analyzed later and provides\n                --  no relevant code generation.\n \n                when N_Component_Association =>"}, {"sha": "3f0350a36823f7797aeef1a13de7122203481a22", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07fb1ef48334827934ea5fd204e31b25398fcf3e/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07fb1ef48334827934ea5fd204e31b25398fcf3e/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=07fb1ef48334827934ea5fd204e31b25398fcf3e", "patch": "@@ -3447,12 +3447,11 @@ package body Freeze is\n                      null;\n                   else\n                      Error_Msg_NE\n-                       (\"Thread_Local_Storage variable& is \"\n-                        & \"improperly initialized\", Decl, E);\n+                       (\"Thread_Local_Storage variable& is improperly \"\n+                        & \"initialized\", Decl, E);\n                      Error_Msg_NE\n-                       (\"\\only allowed initialization is explicit \"\n-                        & \"NULL, static expression or static aggregate\",\n-                          Decl, E);\n+                       (\"\\only allowed initialization is explicit NULL, \"\n+                        & \"static expression or static aggregate\", Decl, E);\n                   end if;\n                end if;\n             end;"}, {"sha": "c232223d5078a6de5b8cf8df3b32dfbfd2b3211b", "filename": "gcc/ada/libgnat/a-direct.adb", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07fb1ef48334827934ea5fd204e31b25398fcf3e/gcc%2Fada%2Flibgnat%2Fa-direct.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07fb1ef48334827934ea5fd204e31b25398fcf3e/gcc%2Fada%2Flibgnat%2Fa-direct.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-direct.adb?ref=07fb1ef48334827934ea5fd204e31b25398fcf3e", "patch": "@@ -1079,8 +1079,8 @@ package body Ada.Directories is\n       Test_File : Directory_Entry_Type;\n \n       function GNAT_name_case_equivalence return Interfaces.C.int;\n-      pragma Import\n-        (C, GNAT_name_case_equivalence, \"__gnat_name_case_equivalence\");\n+      pragma Import (C, GNAT_name_case_equivalence,\n+                     \"__gnat_name_case_equivalence\");\n \n    begin\n       --  Check for the invalid case\n@@ -1101,18 +1101,19 @@ package body Ada.Directories is\n       --  fall through to a Status_Error where we then take the imprecise\n       --  default for the host OS.\n \n-      Start_Search (Search    => S,\n-                    Directory => To_String (Dir_Path),\n-                    Pattern   => \"\",\n-                    Filter    => (Directory => False, others => True));\n+      Start_Search\n+        (Search    => S,\n+         Directory => To_String (Dir_Path),\n+         Pattern   => \"\",\n+         Filter    => (Directory => False, others => True));\n \n       loop\n          Get_Next_Entry (S, Test_File);\n \n          --  Check if we have found a \"caseable\" file\n \n          exit when To_Lower (Simple_Name (Test_File)) /=\n-                     To_Upper (Simple_Name (Test_File));\n+                   To_Upper (Simple_Name (Test_File));\n       end loop;\n \n       End_Search (S);\n@@ -1160,6 +1161,7 @@ package body Ada.Directories is\n       return Case_Sensitive;\n    exception\n       when Status_Error =>\n+\n          --  There is no unobtrusive way to check for the directory's casing so\n          --  return the OS default.\n \n@@ -1437,10 +1439,11 @@ package body Ada.Directories is\n             Case_Sensitive := False;\n          end if;\n \n-         Pat := Compile\n-           (Pattern,\n-            Glob           => True,\n-            Case_Sensitive => Case_Sensitive);\n+         Pat :=\n+           Compile\n+             (Pattern,\n+              Glob           => True,\n+              Case_Sensitive => Case_Sensitive);\n       exception\n          when Error_In_Regexp =>\n             Free (Search.Value);"}]}