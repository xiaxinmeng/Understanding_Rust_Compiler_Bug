{"sha": "a13c5b70a48cdfeef426eb3c394a963ebd7aff46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTEzYzViNzBhNDhjZGZlZWY0MjZlYjNjMzk0YTk2M2ViZDdhZmY0Ng==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2007-02-13T18:57:01Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2007-02-13T18:57:01Z"}, "message": "* gnu/classpath/jdwp/natVMVirtualMachine.cc\n        (jdwpBreakpointCB): New function.\n        (jdwpVMInitCB): Define and enable the breakpoint\n        callback.\n\nFrom-SVN: r121889", "tree": {"sha": "0063b7e73f3674970a68e69e728b48abb52b3e8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0063b7e73f3674970a68e69e728b48abb52b3e8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a13c5b70a48cdfeef426eb3c394a963ebd7aff46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a13c5b70a48cdfeef426eb3c394a963ebd7aff46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a13c5b70a48cdfeef426eb3c394a963ebd7aff46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a13c5b70a48cdfeef426eb3c394a963ebd7aff46/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b3a00d65b811cb24a05542d86dfa4276f3a3aef4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3a00d65b811cb24a05542d86dfa4276f3a3aef4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3a00d65b811cb24a05542d86dfa4276f3a3aef4"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "efd3543e60c27b2d326fb0c6f561e69b8b08920a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a13c5b70a48cdfeef426eb3c394a963ebd7aff46/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a13c5b70a48cdfeef426eb3c394a963ebd7aff46/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a13c5b70a48cdfeef426eb3c394a963ebd7aff46", "patch": "@@ -1,3 +1,10 @@\n+2007-02-13  Keith Seitz  <keiths@redhat.com>\n+\n+\t* gnu/classpath/jdwp/natVMVirtualMachine.cc\n+\t(jdwpBreakpointCB): New function.\n+\t(jdwpVMInitCB): Define and enable the breakpoint\n+\tcallback.\n+\n 2007-02-13  Andrew Haley  <aph@redhat.com>\n \n \t* testsuite/libjava.lang/Divide_2.out"}, {"sha": "d219f5889567a9e02a0a0e3144c81aa914febf7d", "filename": "libjava/gnu/classpath/jdwp/natVMVirtualMachine.cc", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a13c5b70a48cdfeef426eb3c394a963ebd7aff46/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a13c5b70a48cdfeef426eb3c394a963ebd7aff46/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc?ref=a13c5b70a48cdfeef426eb3c394a963ebd7aff46", "patch": "@@ -15,8 +15,6 @@ details. */\n #include <jvm.h>\n #include <jvmti.h>\n \n-#include <java-interp.h>\n-\n #include <java/lang/Class.h>\n #include <java/lang/ClassLoader.h>\n #include <java/lang/Integer.h>\n@@ -34,6 +32,7 @@ details. */\n #include <gnu/classpath/jdwp/VMFrame.h>\n #include <gnu/classpath/jdwp/VMMethod.h>\n #include <gnu/classpath/jdwp/VMVirtualMachine.h>\n+#include <gnu/classpath/jdwp/event/BreakpointEvent.h>\n #include <gnu/classpath/jdwp/event/ClassPrepareEvent.h>\n #include <gnu/classpath/jdwp/event/EventManager.h>\n #include <gnu/classpath/jdwp/event/EventRequest.h>\n@@ -71,6 +70,8 @@ struct step_info\n static Location *get_request_location (EventRequest *);\n static gnu::classpath::jdwp::event::filters::StepFilter *\n get_request_step_filter (EventRequest *);\n+static void JNICALL jdwpBreakpointCB (jvmtiEnv *, JNIEnv *, jthread,\n+\t\t\t\t      jmethodID, jlocation);\n static void JNICALL jdwpClassPrepareCB (jvmtiEnv *, JNIEnv *, jthread, jclass);\n static void JNICALL jdwpThreadEndCB (jvmtiEnv *, JNIEnv *, jthread);\n static void JNICALL jdwpThreadStartCB (jvmtiEnv *, JNIEnv *, jthread);\n@@ -643,6 +644,29 @@ throw_jvmti_error (jvmtiError err)\n   throw new JdwpInternalErrorException (msg);\n }\n \n+static void JNICALL\n+jdwpBreakpointCB (jvmtiEnv *env, MAYBE_UNUSED JNIEnv *jni_env,\n+\t\t  jthread thread, jmethodID method, jlocation location)\n+{\n+  jclass klass;\n+  jvmtiError err;\n+  err = env->GetMethodDeclaringClass (method, &klass);\n+  JvAssert (err == JVMTI_ERROR_NONE);\n+\n+  using namespace gnu::classpath::jdwp;\n+\n+  jlong methodId = reinterpret_cast<jlong> (method);\n+  VMMethod *meth = VMVirtualMachine::getClassMethod (klass, methodId);\n+  Location *loc = new Location (meth, location);\n+  JvAssert (thread->frame.frame_type == frame_interpreter);\n+  _Jv_InterpFrame *iframe\n+    = reinterpret_cast<_Jv_InterpFrame *> (thread->interp_frame);\n+  jobject instance = iframe->get_this_ptr ();\n+  event::BreakpointEvent *event\n+    = new event::BreakpointEvent (thread, loc, instance);\n+  Jdwp::notify (event);\n+}\n+\n static void JNICALL\n jdwpClassPrepareCB (jvmtiEnv *env, MAYBE_UNUSED JNIEnv *jni_env,\n \t\t    jthread thread, jclass klass)\n@@ -703,13 +727,15 @@ jdwpVMInitCB (MAYBE_UNUSED jvmtiEnv *env, MAYBE_UNUSED JNIEnv *jni_env,\n {\n   // The VM is now initialized, add our callbacks\n   jvmtiEventCallbacks callbacks;\n+  DEFINE_CALLBACK (callbacks, Breakpoint);\n   DEFINE_CALLBACK (callbacks, ClassPrepare);\n   DEFINE_CALLBACK (callbacks, ThreadEnd);\n   DEFINE_CALLBACK (callbacks, ThreadStart);\n   DEFINE_CALLBACK (callbacks, VMDeath);\n   _jdwp_jvmtiEnv->SetEventCallbacks (&callbacks, sizeof (callbacks));\n \n   // Enable callbacks\n+  ENABLE_EVENT (BREAKPOINT, NULL);\n   ENABLE_EVENT (CLASS_PREPARE, NULL);\n   ENABLE_EVENT (THREAD_END, NULL);\n   ENABLE_EVENT (THREAD_START, NULL);"}]}