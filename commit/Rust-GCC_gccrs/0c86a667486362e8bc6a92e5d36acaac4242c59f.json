{"sha": "0c86a667486362e8bc6a92e5d36acaac4242c59f", "node_id": "C_kwDOANBUbNoAKDBjODZhNjY3NDg2MzYyZThiYzZhOTJlNWQzNmFjYWFjNDI0MmM1OWY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-02T12:35:53Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-02T12:35:53Z"}, "message": "libstdc++: _Bfloat16 for <compare>\n\nJon pointed out that we have TODO: _Bfloat16 in <compare>.\nRight now _S_fp_fmt() returns _Binary16 for _Float16, __fp16 as well\nas __bf16 and it actually works because we don't have a special handling\nof _Binary16.  So, either we could just document that, but I'm a little bit\nafraid if HPPA or MIPS don't start supporting _Float16 and/or __bf16.\nIf they do, we have the\n #if defined __hppa__ || (defined __mips__ && !defined __mips_nan2008)\n                  // IEEE 754-1985 allowed the meaning of the quiet/signaling\n                  // bit to be reversed. Flip that to give desired ordering.\n                  if (__builtin_isnan(__x) && __builtin_isnan(__y))\n                    {\n                      using _Int = decltype(__ix);\n\n                      constexpr int __nantype = __fmt == _Binary32  ?  22\n                                              : __fmt == _Binary64  ?  51\n                                              : __fmt == _Binary128 ? 111\n                                              : -1;\n                      constexpr _Int __bit = _Int(1) << __nantype;\n                      __ix ^= __bit;\n                      __iy ^= __bit;\n                    }\n #endif\ncode, the only one where we actually care whether something is\n_Binary{32,64,128} (elsewhere we just care about the x86 and m68k 80bits\nor double double or just floating point type's sizeof) and we'd need\nto handle there _Binary16 and/or _Bfloat16.\n\nSo this patch uses different enum for it even when it isn't needed right\nnow, after all _Binary16 isn't needed either and we could just use\n_Binary32...\n\n2022-11-02  Jakub Jelinek  <jakub@redhat.com>\n\n\t* libsupc++/compare (_Strong_order::_Fp_fmt): Add _Bfloat16.\n\t(_Strong_order::_Bfloat16): New static data member.\n\t(_Strong_order::_S_fp_fmt): Return _Bfloat16 for std::bfloat16_t.", "tree": {"sha": "d7fd16e72b857d6cff207befab72a718cc3cdb5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7fd16e72b857d6cff207befab72a718cc3cdb5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c86a667486362e8bc6a92e5d36acaac4242c59f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c86a667486362e8bc6a92e5d36acaac4242c59f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c86a667486362e8bc6a92e5d36acaac4242c59f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c86a667486362e8bc6a92e5d36acaac4242c59f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3299cde4f33121f82a7a25d10c152ac96d2b035", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3299cde4f33121f82a7a25d10c152ac96d2b035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3299cde4f33121f82a7a25d10c152ac96d2b035"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "e25f4ef52cb8b218ca955a1b736307cb56873f44", "filename": "libstdc++-v3/libsupc++/compare", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c86a667486362e8bc6a92e5d36acaac4242c59f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c86a667486362e8bc6a92e5d36acaac4242c59f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare?ref=0c86a667486362e8bc6a92e5d36acaac4242c59f", "patch": "@@ -672,7 +672,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n \t_X86_80bit,  // x86 80-bit extended precision\n \t_M68k_80bit, // m68k 80-bit extended precision\n \t_Dbldbl, // IBM 128-bit double-double\n-\t// TODO: _Bfloat16,\n+\t_Bfloat16,   // std::bfloat16_t\n       };\n \n #ifndef __cpp_using_enum\n@@ -684,6 +684,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n       static constexpr _Fp_fmt _X86_80bit = _Fp_fmt::_X86_80bit;\n       static constexpr _Fp_fmt _M68k_80bit = _Fp_fmt::_M68k_80bit;\n       static constexpr _Fp_fmt _Dbldbl = _Fp_fmt::_Dbldbl;\n+      static constexpr _Fp_fmt _Bfloat16 = _Fp_fmt::_Bfloat16;\n #endif\n \n       // Identify the format used by a floating-point type.\n@@ -714,6 +715,10 @@ namespace std _GLIBCXX_VISIBILITY(default)\n \t  if constexpr (__is_same(_Tp, __float80))\n \t    return _X86_80bit;\n #endif\n+#ifdef __STDCPP_BFLOAT16_T__\n+\t  if constexpr (__is_same(_Tp, decltype(0.0bf16)))\n+\t    return _Bfloat16;\n+#endif\n \n \t  constexpr int __width = sizeof(_Tp) * __CHAR_BIT__;\n "}]}