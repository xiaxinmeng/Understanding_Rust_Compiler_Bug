{"sha": "4e43f0cb269748aa0bfab531e63196d0dd3021c2", "node_id": "C_kwDOANBUbNoAKDRlNDNmMGNiMjY5NzQ4YWEwYmZhYjUzMWU2MzE5NmQwZGQzMDIxYzI", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-14T14:25:35Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-15T13:42:09Z"}, "message": "RISC-V: Add vmadd vx C++ api test\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vmadd_vx_mu_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmadd_vx_mu_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmadd_vx_mu_rv64-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmadd_vx_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmadd_vx_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmadd_vx_rv64-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmadd_vx_tu_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmadd_vx_tu_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmadd_vx_tu_rv64-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmadd_vx_tum_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmadd_vx_tum_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmadd_vx_tum_rv64-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmadd_vx_tumu_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmadd_vx_tumu_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmadd_vx_tumu_rv64-3.C: New test.", "tree": {"sha": "f49d3e035267af1b328451e44ab42c1da2a2aca3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f49d3e035267af1b328451e44ab42c1da2a2aca3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e43f0cb269748aa0bfab531e63196d0dd3021c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e43f0cb269748aa0bfab531e63196d0dd3021c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e43f0cb269748aa0bfab531e63196d0dd3021c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e43f0cb269748aa0bfab531e63196d0dd3021c2/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47919b0decb469054a784ef32c98486074808d9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47919b0decb469054a784ef32c98486074808d9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47919b0decb469054a784ef32c98486074808d9d"}], "stats": {"total": 5238, "additions": 5238, "deletions": 0}, "files": [{"sha": "c28f0b510a37b1814321ae1cf72c04e061c3b0f5", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadd_vx_mu_rv64-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_mu_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_mu_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_mu_rv64-1.C?ref=4e43f0cb269748aa0bfab531e63196d0dd3021c2", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmadd_mu(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmadd_mu(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmadd_mu(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmadd_mu(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmadd_mu(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmadd_mu(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmadd_mu(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmadd_mu(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmadd_mu(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmadd_mu(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmadd_mu(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmadd_mu(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmadd_mu(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmadd_mu(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmadd_mu(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmadd_mu(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmadd_mu(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmadd_mu(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmadd_mu(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmadd_mu(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmadd_mu(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmadd_mu(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmadd_mu(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmadd_mu(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmadd_mu(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmadd_mu(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmadd_mu(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmadd_mu(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmadd_mu(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmadd_mu(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmadd_mu(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmadd_mu(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmadd_mu(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmadd_mu(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmadd_mu(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmadd_mu(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmadd_mu(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmadd_mu(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmadd_mu(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmadd_mu(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmadd_mu(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmadd_mu(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmadd_mu(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmadd_mu(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "9ca2f6d1d4b4fa647070b647fa102053bce4e6fe", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadd_vx_mu_rv64-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_mu_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_mu_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_mu_rv64-2.C?ref=4e43f0cb269748aa0bfab531e63196d0dd3021c2", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmadd_mu(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmadd_mu(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmadd_mu(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmadd_mu(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmadd_mu(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmadd_mu(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmadd_mu(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmadd_mu(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmadd_mu(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmadd_mu(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmadd_mu(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmadd_mu(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmadd_mu(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmadd_mu(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmadd_mu(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmadd_mu(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmadd_mu(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmadd_mu(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmadd_mu(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmadd_mu(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmadd_mu(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmadd_mu(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmadd_mu(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmadd_mu(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmadd_mu(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmadd_mu(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmadd_mu(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmadd_mu(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmadd_mu(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmadd_mu(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmadd_mu(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmadd_mu(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmadd_mu(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmadd_mu(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmadd_mu(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmadd_mu(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmadd_mu(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmadd_mu(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmadd_mu(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmadd_mu(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmadd_mu(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmadd_mu(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmadd_mu(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmadd_mu(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "ccd85761e22e0f7e34eba68143f2a9302d21f537", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadd_vx_mu_rv64-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_mu_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_mu_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_mu_rv64-3.C?ref=4e43f0cb269748aa0bfab531e63196d0dd3021c2", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmadd_mu(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmadd_mu(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmadd_mu(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmadd_mu(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmadd_mu(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmadd_mu(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmadd_mu(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmadd_mu(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmadd_mu(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmadd_mu(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmadd_mu(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmadd_mu(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmadd_mu(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmadd_mu(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmadd_mu(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmadd_mu(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmadd_mu(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmadd_mu(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmadd_mu(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmadd_mu(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmadd_mu(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmadd_mu(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmadd_mu(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmadd_mu(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmadd_mu(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmadd_mu(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmadd_mu(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmadd_mu(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmadd_mu(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmadd_mu(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmadd_mu(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmadd_mu(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmadd_mu(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmadd_mu(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmadd_mu(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmadd_mu(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmadd_mu(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmadd_mu(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmadd_mu(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmadd_mu(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmadd_mu(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmadd_mu(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmadd_mu(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmadd_mu(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "3b83cd5b98b6b430c02087e2abd04c9a49a80237", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadd_vx_rv64-1.C", "status": "added", "additions": 578, "deletions": 0, "changes": 578, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_rv64-1.C?ref=4e43f0cb269748aa0bfab531e63196d0dd3021c2", "patch": "@@ -0,0 +1,578 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmadd(vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmadd(vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmadd(vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmadd(vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmadd(vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmadd(vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmadd(vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmadd(vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmadd(vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmadd(vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmadd(vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmadd(vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmadd(vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmadd(vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmadd(vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmadd(vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmadd(vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmadd(vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmadd(vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmadd(vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmadd(vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmadd(vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmadd(vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmadd(vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmadd(vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmadd(vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmadd(vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmadd(vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmadd(vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmadd(vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmadd(vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmadd(vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmadd(vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmadd(vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmadd(vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmadd(vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmadd(vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmadd(vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmadd(vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmadd(vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmadd(vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmadd(vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmadd(vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmadd(vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf8_t test___riscv_vmadd(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmadd(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmadd(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmadd(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmadd(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmadd(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmadd(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmadd(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmadd(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmadd(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmadd(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmadd(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmadd(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmadd(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmadd(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmadd(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmadd(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmadd(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmadd(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmadd(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmadd(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmadd(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmadd(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmadd(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmadd(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmadd(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmadd(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmadd(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmadd(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmadd(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmadd(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmadd(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmadd(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmadd(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmadd(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmadd(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmadd(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmadd(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmadd(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmadd(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmadd(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmadd(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmadd(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmadd(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "5203d693674b59f59659295e5c58ed1de4e5f96f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadd_vx_rv64-2.C", "status": "added", "additions": 578, "deletions": 0, "changes": 578, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_rv64-2.C?ref=4e43f0cb269748aa0bfab531e63196d0dd3021c2", "patch": "@@ -0,0 +1,578 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmadd(vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmadd(vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmadd(vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmadd(vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmadd(vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmadd(vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmadd(vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmadd(vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmadd(vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmadd(vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmadd(vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmadd(vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmadd(vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmadd(vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmadd(vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmadd(vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmadd(vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmadd(vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmadd(vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmadd(vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmadd(vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmadd(vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmadd(vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmadd(vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmadd(vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmadd(vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmadd(vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmadd(vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmadd(vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmadd(vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmadd(vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmadd(vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmadd(vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmadd(vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmadd(vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmadd(vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmadd(vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmadd(vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmadd(vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmadd(vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmadd(vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmadd(vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmadd(vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmadd(vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf8_t test___riscv_vmadd(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmadd(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmadd(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmadd(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmadd(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmadd(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmadd(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmadd(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmadd(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmadd(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmadd(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmadd(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmadd(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmadd(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmadd(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmadd(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmadd(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmadd(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmadd(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmadd(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmadd(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmadd(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmadd(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmadd(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmadd(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmadd(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmadd(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmadd(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmadd(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmadd(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmadd(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmadd(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmadd(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmadd(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmadd(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmadd(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmadd(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmadd(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmadd(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmadd(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmadd(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmadd(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmadd(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmadd(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "6d3f78b6327ef340de8b05bc51dab1f3c99249ef", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadd_vx_rv64-3.C", "status": "added", "additions": 578, "deletions": 0, "changes": 578, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_rv64-3.C?ref=4e43f0cb269748aa0bfab531e63196d0dd3021c2", "patch": "@@ -0,0 +1,578 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmadd(vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmadd(vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmadd(vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmadd(vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmadd(vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmadd(vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmadd(vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmadd(vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmadd(vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmadd(vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmadd(vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmadd(vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmadd(vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmadd(vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmadd(vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmadd(vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmadd(vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmadd(vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmadd(vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmadd(vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmadd(vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmadd(vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmadd(vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmadd(vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmadd(vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmadd(vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmadd(vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmadd(vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmadd(vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmadd(vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmadd(vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmadd(vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmadd(vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmadd(vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmadd(vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmadd(vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmadd(vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmadd(vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmadd(vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmadd(vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmadd(vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmadd(vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmadd(vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmadd(vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf8_t test___riscv_vmadd(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmadd(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmadd(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmadd(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmadd(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmadd(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmadd(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmadd(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmadd(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmadd(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmadd(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmadd(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmadd(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmadd(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmadd(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmadd(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmadd(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmadd(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmadd(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmadd(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmadd(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmadd(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmadd(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmadd(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmadd(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmadd(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmadd(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmadd(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmadd(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmadd(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmadd(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmadd(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmadd(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmadd(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmadd(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmadd(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmadd(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmadd(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmadd(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmadd(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmadd(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmadd(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmadd(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmadd(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "2c2045af48a6d22916f75190597c38775efb918e", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadd_vx_tu_rv64-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_tu_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_tu_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_tu_rv64-1.C?ref=4e43f0cb269748aa0bfab531e63196d0dd3021c2", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmadd_tu(vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmadd_tu(vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmadd_tu(vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmadd_tu(vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmadd_tu(vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmadd_tu(vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmadd_tu(vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmadd_tu(vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmadd_tu(vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmadd_tu(vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmadd_tu(vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmadd_tu(vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmadd_tu(vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmadd_tu(vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmadd_tu(vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmadd_tu(vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmadd_tu(vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmadd_tu(vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmadd_tu(vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmadd_tu(vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmadd_tu(vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmadd_tu(vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmadd_tu(vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmadd_tu(vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmadd_tu(vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmadd_tu(vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmadd_tu(vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmadd_tu(vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmadd_tu(vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmadd_tu(vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmadd_tu(vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmadd_tu(vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmadd_tu(vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmadd_tu(vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmadd_tu(vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmadd_tu(vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmadd_tu(vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmadd_tu(vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmadd_tu(vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmadd_tu(vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmadd_tu(vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmadd_tu(vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmadd_tu(vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmadd_tu(vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "ffd8bcd46a6dd525176095edde44d37e07fa8319", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadd_vx_tu_rv64-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_tu_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_tu_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_tu_rv64-2.C?ref=4e43f0cb269748aa0bfab531e63196d0dd3021c2", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmadd_tu(vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmadd_tu(vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmadd_tu(vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmadd_tu(vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmadd_tu(vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmadd_tu(vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmadd_tu(vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmadd_tu(vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmadd_tu(vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmadd_tu(vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmadd_tu(vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmadd_tu(vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmadd_tu(vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmadd_tu(vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmadd_tu(vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmadd_tu(vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmadd_tu(vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmadd_tu(vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmadd_tu(vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmadd_tu(vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmadd_tu(vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmadd_tu(vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmadd_tu(vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmadd_tu(vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmadd_tu(vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmadd_tu(vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmadd_tu(vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmadd_tu(vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmadd_tu(vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmadd_tu(vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmadd_tu(vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmadd_tu(vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmadd_tu(vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmadd_tu(vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmadd_tu(vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmadd_tu(vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmadd_tu(vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmadd_tu(vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmadd_tu(vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmadd_tu(vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmadd_tu(vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmadd_tu(vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmadd_tu(vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmadd_tu(vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "6cd70c7bf593a78205cad7b23d1f079097f32aac", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadd_vx_tu_rv64-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_tu_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_tu_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_tu_rv64-3.C?ref=4e43f0cb269748aa0bfab531e63196d0dd3021c2", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmadd_tu(vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmadd_tu(vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmadd_tu(vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmadd_tu(vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmadd_tu(vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmadd_tu(vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmadd_tu(vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmadd_tu(vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmadd_tu(vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmadd_tu(vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmadd_tu(vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmadd_tu(vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmadd_tu(vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmadd_tu(vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmadd_tu(vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmadd_tu(vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmadd_tu(vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmadd_tu(vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmadd_tu(vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmadd_tu(vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmadd_tu(vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmadd_tu(vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmadd_tu(vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmadd_tu(vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmadd_tu(vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmadd_tu(vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmadd_tu(vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmadd_tu(vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmadd_tu(vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmadd_tu(vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmadd_tu(vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmadd_tu(vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmadd_tu(vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmadd_tu(vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmadd_tu(vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmadd_tu(vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmadd_tu(vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmadd_tu(vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmadd_tu(vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmadd_tu(vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmadd_tu(vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmadd_tu(vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmadd_tu(vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmadd_tu(vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "cc2d4952ee42a779785c1f82f95ac7c44c1c4b87", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadd_vx_tum_rv64-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_tum_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_tum_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_tum_rv64-1.C?ref=4e43f0cb269748aa0bfab531e63196d0dd3021c2", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmadd_tum(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmadd_tum(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmadd_tum(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmadd_tum(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmadd_tum(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmadd_tum(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmadd_tum(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmadd_tum(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmadd_tum(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmadd_tum(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmadd_tum(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmadd_tum(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmadd_tum(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmadd_tum(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmadd_tum(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmadd_tum(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmadd_tum(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmadd_tum(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmadd_tum(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmadd_tum(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmadd_tum(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmadd_tum(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmadd_tum(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmadd_tum(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmadd_tum(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmadd_tum(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmadd_tum(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmadd_tum(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmadd_tum(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmadd_tum(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmadd_tum(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmadd_tum(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmadd_tum(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmadd_tum(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmadd_tum(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmadd_tum(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmadd_tum(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmadd_tum(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmadd_tum(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmadd_tum(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmadd_tum(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmadd_tum(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmadd_tum(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmadd_tum(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "7c7237de8e11ea4eecfbf4eeb4ecf33ddce3037f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadd_vx_tum_rv64-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_tum_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_tum_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_tum_rv64-2.C?ref=4e43f0cb269748aa0bfab531e63196d0dd3021c2", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmadd_tum(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmadd_tum(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmadd_tum(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmadd_tum(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmadd_tum(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmadd_tum(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmadd_tum(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmadd_tum(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmadd_tum(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmadd_tum(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmadd_tum(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmadd_tum(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmadd_tum(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmadd_tum(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmadd_tum(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmadd_tum(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmadd_tum(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmadd_tum(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmadd_tum(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmadd_tum(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmadd_tum(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmadd_tum(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmadd_tum(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmadd_tum(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmadd_tum(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmadd_tum(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmadd_tum(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmadd_tum(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmadd_tum(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmadd_tum(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmadd_tum(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmadd_tum(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmadd_tum(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmadd_tum(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmadd_tum(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmadd_tum(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmadd_tum(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmadd_tum(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmadd_tum(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmadd_tum(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmadd_tum(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmadd_tum(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmadd_tum(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmadd_tum(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "c5f321eef24f3da8438182569a053ebce7bd3912", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadd_vx_tum_rv64-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_tum_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_tum_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_tum_rv64-3.C?ref=4e43f0cb269748aa0bfab531e63196d0dd3021c2", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmadd_tum(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmadd_tum(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmadd_tum(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmadd_tum(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmadd_tum(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmadd_tum(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmadd_tum(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmadd_tum(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmadd_tum(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmadd_tum(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmadd_tum(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmadd_tum(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmadd_tum(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmadd_tum(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmadd_tum(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmadd_tum(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmadd_tum(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmadd_tum(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmadd_tum(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmadd_tum(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmadd_tum(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmadd_tum(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmadd_tum(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmadd_tum(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmadd_tum(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmadd_tum(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmadd_tum(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmadd_tum(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmadd_tum(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmadd_tum(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmadd_tum(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmadd_tum(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmadd_tum(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmadd_tum(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmadd_tum(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmadd_tum(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmadd_tum(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmadd_tum(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmadd_tum(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmadd_tum(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmadd_tum(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmadd_tum(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmadd_tum(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmadd_tum(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "b4f6d6e2c6bfda5373ba81646c5c8a3ca0d73f91", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadd_vx_tumu_rv64-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_tumu_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_tumu_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_tumu_rv64-1.C?ref=4e43f0cb269748aa0bfab531e63196d0dd3021c2", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmadd_tumu(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmadd_tumu(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmadd_tumu(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmadd_tumu(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmadd_tumu(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmadd_tumu(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmadd_tumu(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmadd_tumu(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmadd_tumu(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmadd_tumu(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmadd_tumu(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmadd_tumu(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmadd_tumu(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmadd_tumu(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmadd_tumu(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmadd_tumu(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmadd_tumu(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmadd_tumu(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmadd_tumu(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmadd_tumu(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmadd_tumu(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmadd_tumu(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmadd_tumu(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmadd_tumu(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmadd_tumu(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmadd_tumu(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmadd_tumu(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmadd_tumu(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmadd_tumu(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmadd_tumu(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmadd_tumu(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmadd_tumu(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmadd_tumu(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmadd_tumu(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmadd_tumu(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmadd_tumu(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmadd_tumu(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmadd_tumu(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmadd_tumu(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmadd_tumu(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmadd_tumu(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmadd_tumu(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmadd_tumu(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmadd_tumu(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "597a166757c2e10793a1e2da2d920246f6909f2f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadd_vx_tumu_rv64-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_tumu_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_tumu_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_tumu_rv64-2.C?ref=4e43f0cb269748aa0bfab531e63196d0dd3021c2", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmadd_tumu(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmadd_tumu(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmadd_tumu(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmadd_tumu(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmadd_tumu(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmadd_tumu(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmadd_tumu(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmadd_tumu(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmadd_tumu(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmadd_tumu(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmadd_tumu(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmadd_tumu(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmadd_tumu(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmadd_tumu(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmadd_tumu(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmadd_tumu(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmadd_tumu(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmadd_tumu(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmadd_tumu(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmadd_tumu(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmadd_tumu(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmadd_tumu(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmadd_tumu(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmadd_tumu(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmadd_tumu(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmadd_tumu(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmadd_tumu(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmadd_tumu(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmadd_tumu(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmadd_tumu(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmadd_tumu(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmadd_tumu(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmadd_tumu(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmadd_tumu(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmadd_tumu(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmadd_tumu(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmadd_tumu(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmadd_tumu(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmadd_tumu(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmadd_tumu(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmadd_tumu(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmadd_tumu(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmadd_tumu(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmadd_tumu(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "dad3f21fd22f411eda1039f4acdfa9abcdc06678", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadd_vx_tumu_rv64-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_tumu_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e43f0cb269748aa0bfab531e63196d0dd3021c2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_tumu_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadd_vx_tumu_rv64-3.C?ref=4e43f0cb269748aa0bfab531e63196d0dd3021c2", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmadd_tumu(vbool64_t mask,vint8mf8_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmadd_tumu(vbool32_t mask,vint8mf4_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmadd_tumu(vbool16_t mask,vint8mf2_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmadd_tumu(vbool8_t mask,vint8m1_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmadd_tumu(vbool4_t mask,vint8m2_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmadd_tumu(vbool2_t mask,vint8m4_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmadd_tumu(vbool1_t mask,vint8m8_t vd,int8_t rs1,vint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmadd_tumu(vbool64_t mask,vint16mf4_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmadd_tumu(vbool32_t mask,vint16mf2_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmadd_tumu(vbool16_t mask,vint16m1_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmadd_tumu(vbool8_t mask,vint16m2_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmadd_tumu(vbool4_t mask,vint16m4_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmadd_tumu(vbool2_t mask,vint16m8_t vd,int16_t rs1,vint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmadd_tumu(vbool64_t mask,vint32mf2_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmadd_tumu(vbool32_t mask,vint32m1_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmadd_tumu(vbool16_t mask,vint32m2_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmadd_tumu(vbool8_t mask,vint32m4_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmadd_tumu(vbool4_t mask,vint32m8_t vd,int32_t rs1,vint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmadd_tumu(vbool64_t mask,vint64m1_t vd,int64_t rs1,vint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmadd_tumu(vbool32_t mask,vint64m2_t vd,int64_t rs1,vint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmadd_tumu(vbool16_t mask,vint64m4_t vd,int64_t rs1,vint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmadd_tumu(vbool8_t mask,vint64m8_t vd,int64_t rs1,vint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmadd_tumu(vbool64_t mask,vuint8mf8_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmadd_tumu(vbool32_t mask,vuint8mf4_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmadd_tumu(vbool16_t mask,vuint8mf2_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmadd_tumu(vbool8_t mask,vuint8m1_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmadd_tumu(vbool4_t mask,vuint8m2_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmadd_tumu(vbool2_t mask,vuint8m4_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmadd_tumu(vbool1_t mask,vuint8m8_t vd,uint8_t rs1,vuint8m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmadd_tumu(vbool64_t mask,vuint16mf4_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmadd_tumu(vbool32_t mask,vuint16mf2_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmadd_tumu(vbool16_t mask,vuint16m1_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmadd_tumu(vbool8_t mask,vuint16m2_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmadd_tumu(vbool4_t mask,vuint16m4_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmadd_tumu(vbool2_t mask,vuint16m8_t vd,uint16_t rs1,vuint16m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmadd_tumu(vbool64_t mask,vuint32mf2_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmadd_tumu(vbool32_t mask,vuint32m1_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmadd_tumu(vbool16_t mask,vuint32m2_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmadd_tumu(vbool8_t mask,vuint32m4_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmadd_tumu(vbool4_t mask,vuint32m8_t vd,uint32_t rs1,vuint32m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmadd_tumu(vbool64_t mask,vuint64m1_t vd,uint64_t rs1,vuint64m1_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmadd_tumu(vbool32_t mask,vuint64m2_t vd,uint64_t rs1,vuint64m2_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmadd_tumu(vbool16_t mask,vuint64m4_t vd,uint64_t rs1,vuint64m4_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmadd_tumu(vbool8_t mask,vuint64m8_t vd,uint64_t rs1,vuint64m8_t vs2,size_t vl)\n+{\n+    return __riscv_vmadd_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}]}