{"sha": "1b48c8cc6aa67c74548b9710eb3bed80c073f870", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI0OGM4Y2M2YWE2N2M3NDU0OGI5NzEwZWIzYmVkODBjMDczZjg3MA==", "commit": {"author": {"name": "Adrian Straetling", "email": "straetling@de.ibm.com", "date": "2005-12-14T16:10:10Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2005-12-14T16:10:10Z"}, "message": "s390.md (\"d0\", \"1\"): New mode attributes.\n\n2005-12-14  Adrian Straetling  <straetling@de.ibm.com>\n\n\t* config/s390/s390.md (\"d0\", \"1\"): New mode attributes.\n\t(\"<shift>di3\", \"<shift>si3\"): Merge.\n\t(\"*<shift>di3_and\", \"*<shift>si3_and\"): Merge.\n\t(\"ashrdi3\", \"ashrsi3\"): Merge.\n\t(\"*ashrdi3_cc\", \"*ashrsi3_cc\"): Merge.\n\t(\"*ashrdi3_cc_and\", \"*ashrsi3_cc_and\"): Merge.\n\t(\"*ashrdi3_cconly\", \"*ashrsi3_cconly\"): Merge.\n\t(\"*ashrdi3_cconly_and\", \"*ashrsi3_cconly_and\"): Merge.\n\t(\"*ashrdi3\", \"*ashrsi3\"): Merge.\n\t(\"*ashrdi3_and\", \"*ashrsi3_and\"): Merge.\n\nFrom-SVN: r108516", "tree": {"sha": "477d367f5f8a92106a13ad2bfc1d2699aaaa70d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/477d367f5f8a92106a13ad2bfc1d2699aaaa70d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b48c8cc6aa67c74548b9710eb3bed80c073f870", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b48c8cc6aa67c74548b9710eb3bed80c073f870", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b48c8cc6aa67c74548b9710eb3bed80c073f870", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b48c8cc6aa67c74548b9710eb3bed80c073f870/comments", "author": null, "committer": null, "parents": [{"sha": "56477c21e0535f02329ec21ee68f921b360f3a4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56477c21e0535f02329ec21ee68f921b360f3a4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56477c21e0535f02329ec21ee68f921b360f3a4c"}], "stats": {"total": 263, "additions": 92, "deletions": 171}, "files": [{"sha": "a50c1e325b5da44b0be0151e0a618ac45a805e9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b48c8cc6aa67c74548b9710eb3bed80c073f870/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b48c8cc6aa67c74548b9710eb3bed80c073f870/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b48c8cc6aa67c74548b9710eb3bed80c073f870", "patch": "@@ -1,3 +1,16 @@\n+2005-12-14  Adrian Straetling  <straetling@de.ibm.com>\n+\n+\t* config/s390/s390.md (\"d0\", \"1\"): New mode attributes.\n+\t(\"<shift>di3\", \"<shift>si3\"): Merge.\n+\t(\"*<shift>di3_and\", \"*<shift>si3_and\"): Merge.\n+\t(\"ashrdi3\", \"ashrsi3\"): Merge.\n+\t(\"*ashrdi3_cc\", \"*ashrsi3_cc\"): Merge.\n+\t(\"*ashrdi3_cc_and\", \"*ashrsi3_cc_and\"): Merge.\n+\t(\"*ashrdi3_cconly\", \"*ashrsi3_cconly\"): Merge.\n+\t(\"*ashrdi3_cconly_and\", \"*ashrsi3_cconly_and\"): Merge.\n+\t(\"*ashrdi3\", \"*ashrsi3\"): Merge.\n+\t(\"*ashrdi3_and\", \"*ashrsi3_and\"): Merge.\n+\n 2005-12-14  Adrian Straetling  <straetling@de.ibm.com>\n \n \t* config/s390/s390.md (\"extend<mode>di2\", \"extend<mode>si2\"): Merge."}, {"sha": "274c2336edd3a5d883b56bcd300f2516c3658e9e", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 79, "deletions": 171, "changes": 250, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b48c8cc6aa67c74548b9710eb3bed80c073f870/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b48c8cc6aa67c74548b9710eb3bed80c073f870/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=1b48c8cc6aa67c74548b9710eb3bed80c073f870", "patch": "@@ -299,6 +299,16 @@\n ;; and \"meebr\" in SFmode.  This is needed for the 'mul<mode>3' pattern. \n (define_mode_attr dee [(DF \"d\") (SF \"ee\")])\n \n+;; In GPR and P templates, a constraint like \"<d0>\" will expand to \"d\" in DImode\n+;; and \"0\" in SImode. This allows to combine instructions of which the 31bit\n+;; version only operates on one register.\n+(define_mode_attr d0 [(DI \"d\") (SI \"0\")])\n+\n+;; In combination with d0 this allows to combine instructions of which the 31bit\n+;; version only operates on one register. The DImode version needs an additional\n+;; register for the assembler output.\n+(define_mode_attr 1 [(DI \"%1,\") (SI \"\")])\n+  \n ;; In SHIFT templates, a string like \"s<lr>dl\" will expand to \"sldl\" in \n ;; 'ashift' and \"srdl\" in 'lshiftrt'.\n (define_code_attr lr [(ashift \"l\") (lshiftrt \"r\")])\n@@ -6208,13 +6218,13 @@\n ;;\n \n ;\n-; (ashl|lshr)di3 instruction pattern(s).\n+; (ashl|lshr)(di|si)3 instruction pattern(s).\n ;\n \n-(define_expand \"<shift>di3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (SHIFT:DI (match_operand:DI 1 \"register_operand\" \"\")\n-                  (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"\")))]\n+(define_expand \"<shift><mode>3\"\n+  [(set (match_operand:DSI 0 \"register_operand\" \"\")\n+        (SHIFT:DSI (match_operand:DSI 1 \"register_operand\" \"\")\n+                   (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"\")))]\n   \"\"\n   \"\")\n \n@@ -6227,13 +6237,13 @@\n   [(set_attr \"op_type\"  \"RS\")\n    (set_attr \"atype\"    \"reg\")])\n \n-(define_insn \"*<shift>di3_64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (SHIFT:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-                  (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")))]\n-  \"TARGET_64BIT\"\n-  \"s<lr>lg\\t%0,%1,%Y2\"\n-  [(set_attr \"op_type\"  \"RSE\")\n+(define_insn \"*<shift><mode>3\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+        (SHIFT:GPR (match_operand:GPR 1 \"register_operand\" \"<d0>\")\n+                   (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")))]\n+  \"\"\n+  \"s<lr>l<g>\\t%0,<1>%Y2\"\n+  [(set_attr \"op_type\"  \"RS<E>\")\n    (set_attr \"atype\"    \"reg\")])\n \n (define_insn \"*<shift>di3_31_and\"\n@@ -6246,25 +6256,25 @@\n   [(set_attr \"op_type\"  \"RS\")\n    (set_attr \"atype\"    \"reg\")])\n \n-(define_insn \"*<shift>di3_64_and\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (SHIFT:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-                  (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n-\t\t\t  (match_operand:SI 3 \"const_int_operand\"   \"n\"))))]\n-  \"TARGET_64BIT && (INTVAL (operands[3]) & 63) == 63\"\n-  \"s<lr>lg\\t%0,%1,%Y2\"\n-  [(set_attr \"op_type\"  \"RSE\")\n+(define_insn \"*<shift><mode>3_and\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+        (SHIFT:GPR (match_operand:GPR 1 \"register_operand\" \"<d0>\")\n+                   (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n+\t\t\t   (match_operand:SI 3 \"const_int_operand\"   \"n\"))))]\n+  \"(INTVAL (operands[3]) & 63) == 63\"\n+  \"s<lr>l<g>\\t%0,<1>%Y2\"\n+  [(set_attr \"op_type\"  \"RS<E>\")\n    (set_attr \"atype\"    \"reg\")])\n \n ;\n-; ashrdi3 instruction pattern(s).\n+; ashr(di|si)3 instruction pattern(s).\n ;\n \n-(define_expand \"ashrdi3\"\n+(define_expand \"ashr<mode>3\"\n   [(parallel\n-    [(set (match_operand:DI 0 \"register_operand\" \"\")\n-          (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n-                       (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"\")))\n+    [(set (match_operand:DSI 0 \"register_operand\" \"\")\n+          (ashiftrt:DSI (match_operand:DSI 1 \"register_operand\" \"\")\n+                        (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"\")))\n      (clobber (reg:CC CC_REGNUM))])]\n   \"\"\n   \"\")\n@@ -6302,37 +6312,37 @@\n   [(set_attr \"op_type\"  \"RS\")\n    (set_attr \"atype\"    \"reg\")])\n \n-(define_insn \"*ashrdi3_cc_64\"\n+(define_insn \"*ashr<mode>3_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-                              (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\"))\n+        (compare (ashiftrt:GPR (match_operand:GPR 1 \"register_operand\" \"<d0>\")\n+                               (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\"))\n                  (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (ashiftrt:DI (match_dup 1) (match_dup 2)))]\n-  \"s390_match_ccmode(insn, CCSmode) && TARGET_64BIT\"\n-  \"srag\\t%0,%1,%Y2\"\n-  [(set_attr \"op_type\"  \"RSE\")\n+   (set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+        (ashiftrt:GPR (match_dup 1) (match_dup 2)))]\n+  \"s390_match_ccmode(insn, CCSmode)\"\n+  \"sra<g>\\t%0,<1>%Y2\"\n+  [(set_attr \"op_type\"  \"RS<E>\")\n    (set_attr \"atype\"    \"reg\")])\n \n-(define_insn \"*ashrdi3_cconly_64\"\n+(define_insn \"*ashr<mode>3_cconly\"\n   [(set (reg CC_REGNUM)\n-        (compare (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-                              (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\"))\n+        (compare (ashiftrt:GPR (match_operand:GPR 1 \"register_operand\" \"<d0>\")\n+                               (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\"))\n                  (const_int 0)))\n-   (clobber (match_scratch:DI 0 \"=d\"))]\n-  \"s390_match_ccmode(insn, CCSmode) && TARGET_64BIT\"\n-  \"srag\\t%0,%1,%Y2\"\n-  [(set_attr \"op_type\"  \"RSE\")\n+   (clobber (match_scratch:GPR 0 \"=d\"))]\n+  \"s390_match_ccmode(insn, CCSmode)\"\n+  \"sra<g>\\t%0,<1>%Y2\"\n+  [(set_attr \"op_type\"  \"RS<E>\")\n    (set_attr \"atype\"    \"reg\")])\n \n-(define_insn \"*ashrdi3_64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-                     (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")))\n+(define_insn \"*ashr<mode>3\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+        (ashiftrt:GPR (match_operand:GPR 1 \"register_operand\" \"<d0>\")\n+                      (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_64BIT\"\n-  \"srag\\t%0,%1,%Y2\"\n-  [(set_attr \"op_type\"  \"RSE\")\n+  \"\"\n+  \"sra<g>\\t%0,<1>%Y2\"\n+  [(set_attr \"op_type\"  \"RS<E>\")\n    (set_attr \"atype\"    \"reg\")])\n \n \n@@ -6376,142 +6386,40 @@\n   [(set_attr \"op_type\"  \"RS\")\n    (set_attr \"atype\"    \"reg\")])\n \n-(define_insn \"*ashrdi3_cc_64_and\"\n+(define_insn \"*ashr<mode>3_cc_and\"\n   [(set (reg CC_REGNUM)\n-        (compare (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-                              (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n-\t\t\t\t      (match_operand:SI 3 \"const_int_operand\"   \"n\")))\n+        (compare (ashiftrt:GPR (match_operand:GPR 1 \"register_operand\" \"<d0>\")\n+                               (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n+\t\t\t\t       (match_operand:SI 3 \"const_int_operand\"   \"n\")))\n \t\t (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (ashiftrt:DI (match_dup 1) (and:SI (match_dup 2) (match_dup 3))))]\n-  \"TARGET_64BIT && s390_match_ccmode(insn, CCSmode)\n-   && (INTVAL (operands[3]) & 63) == 63\"\n-  \"srag\\t%0,%1,%Y2\"\n-  [(set_attr \"op_type\"  \"RSE\")\n-   (set_attr \"atype\"    \"reg\")])\n-\n-(define_insn \"*ashrdi3_cconly_64_and\"\n-  [(set (reg CC_REGNUM)\n-        (compare (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-                              (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n-\t\t\t\t      (match_operand:SI 3 \"const_int_operand\"   \"n\")))\n-                 (const_int 0)))\n-   (clobber (match_scratch:DI 0 \"=d\"))]\n-  \"TARGET_64BIT && s390_match_ccmode(insn, CCSmode)\n-   && (INTVAL (operands[3]) & 63) == 63\"\n-  \"srag\\t%0,%1,%Y2\"\n-  [(set_attr \"op_type\"  \"RSE\")\n-   (set_attr \"atype\"    \"reg\")])\n-\n-(define_insn \"*ashrdi3_64_and\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-                     (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n-\t\t\t     (match_operand:SI 3 \"const_int_operand\"   \"n\"))))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_64BIT && (INTVAL (operands[3]) & 63) == 63\"\n-  \"srag\\t%0,%1,%Y2\"\n-  [(set_attr \"op_type\"  \"RSE\")\n-   (set_attr \"atype\"    \"reg\")])\n-\n-;\n-; (ashl|lshr)si3 instruction pattern(s).\n-;\n-\n-(define_insn \"<shift>si3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-        (SHIFT:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-                  (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")))]\n-  \"\"\n-  \"s<lr>l\\t%0,%Y2\"\n-  [(set_attr \"op_type\"  \"RS\")\n-   (set_attr \"atype\"    \"reg\")])\n-\n-(define_insn \"*<shift>si3_and\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-        (SHIFT:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-                  (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n-\t\t\t  (match_operand:SI 3 \"const_int_operand\"   \"n\"))))]\n-  \"(INTVAL (operands[3]) & 63) == 63\"\n-  \"s<lr>l\\t%0,%Y2\"\n-  [(set_attr \"op_type\"  \"RS\")\n-   (set_attr \"atype\"    \"reg\")])\n-\n-;\n-; ashrsi3 instruction pattern(s).\n-;\n-\n-(define_insn \"*ashrsi3_cc\"\n-  [(set (reg CC_REGNUM)\n-        (compare (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-                              (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\"))\n-                 (const_int 0)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=d\")\n-        (ashiftrt:SI (match_dup 1) (match_dup 2)))]\n-  \"s390_match_ccmode(insn, CCSmode)\"\n-  \"sra\\t%0,%Y2\"\n-  [(set_attr \"op_type\"  \"RS\")\n-   (set_attr \"atype\"    \"reg\")])\n-\n-\n-(define_insn \"*ashrsi3_cconly\"\n-  [(set (reg CC_REGNUM)\n-        (compare (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-                              (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\"))\n-                 (const_int 0)))\n-   (clobber (match_scratch:SI 0 \"=d\"))]\n-  \"s390_match_ccmode(insn, CCSmode)\"\n-  \"sra\\t%0,%Y2\"\n-  [(set_attr \"op_type\"  \"RS\")\n-   (set_attr \"atype\"    \"reg\")])\n-\n-(define_insn \"ashrsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-        (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-                     (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"\"\n-  \"sra\\t%0,%Y2\"\n-  [(set_attr \"op_type\"  \"RS\")\n-   (set_attr \"atype\"    \"reg\")])\n-\n-; with implicit ANDs\n-\n-(define_insn \"*ashrsi3_cc_and\"\n-  [(set (reg CC_REGNUM)\n-        (compare (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-                              (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n-\t\t\t\t      (match_operand:SI 3 \"const_int_operand\"   \"n\")))\n-                 (const_int 0)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=d\")\n-        (ashiftrt:SI (match_dup 1) (and:SI (match_dup 2) (match_dup 3))))]\n+   (set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+        (ashiftrt:GPR (match_dup 1) (and:SI (match_dup 2) (match_dup 3))))]\n   \"s390_match_ccmode(insn, CCSmode) && (INTVAL (operands[3]) & 63) == 63\"\n-  \"sra\\t%0,%Y2\"\n-  [(set_attr \"op_type\"  \"RS\")\n+  \"sra<g>\\t%0,<1>%Y2\"\n+  [(set_attr \"op_type\"  \"RS<E>\")\n    (set_attr \"atype\"    \"reg\")])\n \n-\n-(define_insn \"*ashrsi3_cconly_and\"\n+(define_insn \"*ashr<mode>3_cconly_and\"\n   [(set (reg CC_REGNUM)\n-        (compare (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-                              (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n-\t\t\t\t      (match_operand:SI 3 \"const_int_operand\"   \"n\")))\n+        (compare (ashiftrt:GPR (match_operand:GPR 1 \"register_operand\" \"<d0>\")\n+                               (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n+\t\t\t\t       (match_operand:SI 3 \"const_int_operand\"   \"n\")))\n                  (const_int 0)))\n-   (clobber (match_scratch:SI 0 \"=d\"))]\n+   (clobber (match_scratch:GPR 0 \"=d\"))]\n   \"s390_match_ccmode(insn, CCSmode) && (INTVAL (operands[3]) & 63) == 63\"\n-  \"sra\\t%0,%Y2\"\n-  [(set_attr \"op_type\"  \"RS\")\n+  \"sra<g>\\t%0,<1>%Y2\"\n+  [(set_attr \"op_type\"  \"RS<E>\")\n    (set_attr \"atype\"    \"reg\")])\n \n-(define_insn \"*ashrsi3_and\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-        (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-                     (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n-\t\t\t     (match_operand:SI 3 \"const_int_operand\"   \"n\"))))\n+(define_insn \"*ashr<mode>3_and\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+        (ashiftrt:GPR (match_operand:GPR 1 \"register_operand\" \"<d0>\")\n+                      (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n+\t\t\t      (match_operand:SI 3 \"const_int_operand\"   \"n\"))))\n    (clobber (reg:CC CC_REGNUM))]\n   \"(INTVAL (operands[3]) & 63) == 63\"\n-  \"sra\\t%0,%Y2\"\n-  [(set_attr \"op_type\"  \"RS\")\n+  \"sra<g>\\t%0,<1>%Y2\"\n+  [(set_attr \"op_type\"  \"RS<E>\")\n    (set_attr \"atype\"    \"reg\")])\n \n "}]}