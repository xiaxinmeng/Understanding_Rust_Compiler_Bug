{"sha": "62d3c075d52f1b92481bd0cdb9b0ef242210f512", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJkM2MwNzVkNTJmMWI5MjQ4MWJkMGNkYjliMGVmMjQyMjEwZjUxMg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-09-17T18:24:37Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-09-17T18:24:37Z"}, "message": "re PR fortran/82173 ([meta-bug] Parameterized derived type errors)\n\n2017-09-17  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/82173\n\t* decl.c (gfc_get_pdt_instance): Use the component initializer\n\texpression for the default, rather than the parameter value.\n\t* resolve.c (resolve_pdt): New function.\n\t(resolve_symbol): Call it. Remove false error, prohibiting\n\tdeferred type parameters for dummy arguments.\n\n\tPR fortran/60483\n\t* primary.c (gfc_match_varspec): If the type of an associate\n\tname is unknown and yet there is a match, try resolving the\n\ttarget expression and using its type.\n\n2017-09-17  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/82173\n\t* gfortran.dg/pdt_1.f03 : Eliminate spurious error checks.\n\t* gfortran.dg/pdt_2.f03 : The same.\n\t* gfortran.dg/pdt_3.f03 : The same.\n\t* gfortran.dg/pdt_4.f03 : Add 'modtype' and two new errors in\n\tmodule 'bad_vars'. Add error concerning assumed parameters and\n\tsave attribute.\n\t* gfortran.dg/pdt_11.f03 : New test.\n\n\tPR fortran/60483\n\t* gfortran.dg/associate_9.f90 : Remove XFAIL and change to run.\n\t* gfortran.dg/associate_25.f90 : New test.\n\t* gfortran.dg/pdt_12.f03 : New test.\n\nFrom-SVN: r252894", "tree": {"sha": "958630e32be5d6d40ebd26e96c747264a7f7378f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/958630e32be5d6d40ebd26e96c747264a7f7378f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62d3c075d52f1b92481bd0cdb9b0ef242210f512", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62d3c075d52f1b92481bd0cdb9b0ef242210f512", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62d3c075d52f1b92481bd0cdb9b0ef242210f512", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62d3c075d52f1b92481bd0cdb9b0ef242210f512/comments", "author": null, "committer": null, "parents": [{"sha": "7ac3ed134b4ad4a0e82ed1acc062e694128f103b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ac3ed134b4ad4a0e82ed1acc062e694128f103b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ac3ed134b4ad4a0e82ed1acc062e694128f103b"}], "stats": {"total": 272, "additions": 246, "deletions": 26}, "files": [{"sha": "b6abf24e2f196a565527d252a03d68d01e2cb1d1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d3c075d52f1b92481bd0cdb9b0ef242210f512/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d3c075d52f1b92481bd0cdb9b0ef242210f512/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=62d3c075d52f1b92481bd0cdb9b0ef242210f512", "patch": "@@ -1,3 +1,17 @@\n+2017-09-17  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82173\n+\t* decl.c (gfc_get_pdt_instance): Use the component initializer\n+\texpression for the default, rather than the parameter value.\n+\t* resolve.c (resolve_pdt): New function.\n+\t(resolve_symbol): Call it. Remove false error, prohibiting\n+\tdeferred type parameters for dummy arguments.\n+\n+\tPR fortran/60483\n+\t* primary.c (gfc_match_varspec): If the type of an associate\n+\tname is unknown and yet there is a match, try resolving the\n+\ttarget expression and using its type.\n+\n 2017-09-15  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/82184"}, {"sha": "18220a127c3c69351f4e797f5c84ad0ef5f97704", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d3c075d52f1b92481bd0cdb9b0ef242210f512/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d3c075d52f1b92481bd0cdb9b0ef242210f512/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=62d3c075d52f1b92481bd0cdb9b0ef242210f512", "patch": "@@ -3275,8 +3275,8 @@ gfc_get_pdt_instance (gfc_actual_arglist *param_list, gfc_symbol **sym,\n \t    kind_expr = gfc_copy_expr (actual_param->expr);\n \t  else\n \t    {\n-\t      if (param->value)\n-\t\tkind_expr = gfc_copy_expr (param->value);\n+\t      if (c1->initializer)\n+\t\tkind_expr = gfc_copy_expr (c1->initializer);\n \t      else if (!(actual_param && param->attr.pdt_len))\n \t\t{\n \t\t  gfc_error (\"The derived parameter '%qs' at %C does not \""}, {"sha": "21e5be2b40ab845bbd36e645a7f6fc240d03a449", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d3c075d52f1b92481bd0cdb9b0ef242210f512/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d3c075d52f1b92481bd0cdb9b0ef242210f512/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=62d3c075d52f1b92481bd0cdb9b0ef242210f512", "patch": "@@ -2055,10 +2055,21 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,\n       && gfc_get_default_type (sym->name, sym->ns)->type == BT_DERIVED)\n     gfc_set_default_type (sym, 0, sym->ns);\n \n+  /* Before throwing an error try resolving the target expression of\n+     associate names. This should resolve function calls, for example.  */\n   if (sym->ts.type == BT_UNKNOWN && m == MATCH_YES)\n     {\n-      gfc_error (\"Symbol %qs at %C has no IMPLICIT type\", sym->name);\n-      return MATCH_ERROR;\n+      if (sym->assoc && sym->assoc->target)\n+\t{\n+\t  gfc_resolve_expr (sym->assoc->target);\n+\t  sym->ts = sym->assoc->target->ts;\n+\t}\n+\n+      if (sym->ts.type == BT_UNKNOWN)\n+\t{\n+\t  gfc_error (\"Symbol %qs at %C has no IMPLICIT type\", sym->name);\n+\t  return MATCH_ERROR;\n+\t}\n     }\n   else if ((sym->ts.type != BT_DERIVED && sym->ts.type != BT_CLASS)\n            && m == MATCH_YES)"}, {"sha": "89dea5f7ae223415f139e0931adefb8bb2df63f1", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 54, "deletions": 9, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d3c075d52f1b92481bd0cdb9b0ef242210f512/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d3c075d52f1b92481bd0cdb9b0ef242210f512/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=62d3c075d52f1b92481bd0cdb9b0ef242210f512", "patch": "@@ -14125,6 +14125,57 @@ resolve_fl_parameter (gfc_symbol *sym)\n }\n \n \n+/* Called by resolve_symbol to chack PDTs.  */\n+\n+static void\n+resolve_pdt (gfc_symbol* sym)\n+{\n+  gfc_symbol *derived = NULL;\n+  gfc_actual_arglist *param;\n+  gfc_component *c;\n+  bool const_len_exprs = true;\n+  bool assumed_len_exprs = false;\n+\n+  if (sym->ts.type == BT_DERIVED)\n+    derived = sym->ts.u.derived;\n+  else if (sym->ts.type == BT_CLASS)\n+    derived = CLASS_DATA (sym)->ts.u.derived;\n+  else\n+    gcc_unreachable ();\n+\n+  gcc_assert (derived->attr.pdt_type);\n+\n+  for (param = sym->param_list; param; param = param->next)\n+    {\n+      c = gfc_find_component (derived, param->name, false, true, NULL);\n+      gcc_assert (c);\n+      if (c->attr.pdt_kind)\n+\tcontinue;\n+\n+      if (param->expr && !gfc_is_constant_expr (param->expr)\n+\t  && c->attr.pdt_len)\n+\tconst_len_exprs = false;\n+      else if (param->spec_type == SPEC_ASSUMED)\n+\tassumed_len_exprs = true;\n+    }\n+\n+  if (!const_len_exprs\n+      && (sym->ns->proc_name->attr.is_main_program\n+\t  || sym->ns->proc_name->attr.flavor == FL_MODULE\n+\t  || sym->attr.save != SAVE_NONE))\n+    gfc_error (\"The AUTOMATIC object %qs at %L must not have the \"\n+\t       \"SAVE attribute or be a variable declared in the \"\n+\t       \"main program, a module or a submodule(F08/C513)\",\n+\t       sym->name, &sym->declared_at);\n+\n+  if (assumed_len_exprs && !(sym->attr.dummy\n+      || sym->attr.select_type_temporary || sym->attr.associate_var))\n+    gfc_error (\"The object %qs at %L with ASSUMED type parameters \"\n+\t       \"must be a dummy or a SELECT TYPE selector(F08/4.2)\",\n+\t       sym->name, &sym->declared_at);\n+}\n+\n+\n /* Do anything necessary to resolve a symbol.  Right now, we just\n    assume that an otherwise unknown symbol is a variable.  This sort\n    of thing commonly happens for symbols in module.  */\n@@ -14381,15 +14432,6 @@ resolve_symbol (gfc_symbol *sym)\n       return;\n     }\n \n-  if (sym->attr.dummy && sym->ts.type == BT_DERIVED\n-      && sym->ts.u.derived->attr.pdt_type\n-      && gfc_spec_list_type (sym->param_list, NULL) == SPEC_DEFERRED)\n-    {\n-      gfc_error (\"%qs at %L cannot have DEFERRED type parameters because \"\n-\t\t \"it is a dummy argument\", sym->name, &sym->declared_at);\n-      return;\n-    }\n-\n   if (sym->attr.value && sym->ts.type == BT_CHARACTER)\n     {\n       gfc_charlen *cl = sym->ts.u.cl;\n@@ -14927,6 +14969,9 @@ resolve_symbol (gfc_symbol *sym)\n       || (sym->attr.flavor == FL_PROCEDURE && sym->attr.function))\n     if (!resolve_typespec_used (&sym->ts, &sym->declared_at, sym->name))\n       return;\n+\n+  if (sym->param_list)\n+    resolve_pdt (sym);\n }\n \n "}, {"sha": "d40f08e13cf091985df7d3f4328ac32c410106ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d3c075d52f1b92481bd0cdb9b0ef242210f512/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d3c075d52f1b92481bd0cdb9b0ef242210f512/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=62d3c075d52f1b92481bd0cdb9b0ef242210f512", "patch": "@@ -1,3 +1,19 @@\n+2017-09-17  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82173\n+\t* gfortran.dg/pdt_1.f03 : Eliminate spurious error checks.\n+\t* gfortran.dg/pdt_2.f03 : The same.\n+\t* gfortran.dg/pdt_3.f03 : The same.\n+\t* gfortran.dg/pdt_4.f03 : Add 'modtype' and two new errors in\n+\tmodule 'bad_vars'. Add error concerning assumed parameters and\n+\tsave attribute.\n+\t* gfortran.dg/pdt_11.f03 : New test.\n+\n+\tPR fortran/60483\n+\t* gfortran.dg/associate_9.f90 : Remove XFAIL and change to run.\n+\t* gfortran.dg/associate_25.f90 : New test.\n+\t* gfortran.dg/pdt_12.f03 : New test.\n+\n 2017-09-15  Andrew Sutton  <andrew.n.sutton@gmail.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "5644031e15e17474780bd061a6ae8be97bc0b033", "filename": "gcc/testsuite/gfortran.dg/associate_25.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d3c075d52f1b92481bd0cdb9b0ef242210f512/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_25.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d3c075d52f1b92481bd0cdb9b0ef242210f512/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_25.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_25.f90?ref=62d3c075d52f1b92481bd0cdb9b0ef242210f512", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do run }\n+!\n+! Checks the fix for PR60483.\n+!\n+! Contributed by Anthony Lewis  <antony@cosmologist.info>\n+!\n+module A\n+  implicit none\n+  Type T\n+    integer :: val = 2\n+  contains\n+    final :: testfree\n+  end type\n+  integer :: final_flag = 0\n+contains\n+  subroutine testfree(this)\n+    Type(T) this\n+    final_flag = this%val + final_flag\n+  end subroutine\n+  subroutine Testf()\n+    associate(X => T()) ! This was failing: Symbol 'x' at (1) has no IMPLICIT type\n+      final_flag = X%val\n+    end associate\n+! This should now be 4 but the finalization is not happening.\n+! TODO put it right!\n+    if (final_flag .ne. 2) call abort\n+  end subroutine Testf\n+end module\n+\n+  use A\n+  call Testf\n+end"}, {"sha": "56aad453e374a14f2c13a86136786032bb904766", "filename": "gcc/testsuite/gfortran.dg/associate_9.f03", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d3c075d52f1b92481bd0cdb9b0ef242210f512/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_9.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d3c075d52f1b92481bd0cdb9b0ef242210f512/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_9.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_9.f03?ref=62d3c075d52f1b92481bd0cdb9b0ef242210f512", "patch": "@@ -1,7 +1,6 @@\n-! { dg-do compile }\n+! { dg-do run }\n ! { dg-options \"-std=f2003 -fall-intrinsics\" }\n \n-! FIXME: Change into run test and remove excess error expectation.\n \n ! PR fortran/38936\n ! Association to derived-type, where the target type is not know\n@@ -46,5 +45,3 @@ PROGRAM main\n     IF (x%comp /= 10) CALL abort ()\n   END ASSOCIATE\n END PROGRAM main\n-\n-! { dg-excess-errors \"Syntex error in IF\" }"}, {"sha": "9dfdc1d665216a876bba442422cf296aa8f10019", "filename": "gcc/testsuite/gfortran.dg/pdt_1.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d3c075d52f1b92481bd0cdb9b0ef242210f512/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_1.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d3c075d52f1b92481bd0cdb9b0ef242210f512/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_1.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_1.f03?ref=62d3c075d52f1b92481bd0cdb9b0ef242210f512", "patch": "@@ -21,7 +21,7 @@\n   end type\n \n   type(mytype(b=4)) :: z(2)\n-  type(mytype(ftype, pdt_len)) :: z2\n+  type(mytype(ftype, 4)) :: z2\n \n   z(1)%i = 1\n   z(2)%i = 2"}, {"sha": "42113ae6b2bd9af9900e43894f9b22a5b114442a", "filename": "gcc/testsuite/gfortran.dg/pdt_11.f03", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d3c075d52f1b92481bd0cdb9b0ef242210f512/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_11.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d3c075d52f1b92481bd0cdb9b0ef242210f512/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_11.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_11.f03?ref=62d3c075d52f1b92481bd0cdb9b0ef242210f512", "patch": "@@ -0,0 +1,52 @@\n+! { dg-do run }\n+!\n+! Rolls together 'len_par_06_pos.f90' and 'len_par_07_pos.f90', both of which\n+! failed to compile.\n+!\n+! Contributed by Reinhold Bader  <reinhold.bader@lrz.de>\n+!\n+module m_type_decs\n+\n+  implicit none\n+\n+  type :: matrix(rk, n, m)\n+     integer, kind :: rk\n+     integer, len :: n = 15, m = 20\n+     real(rk) :: entry(n, m)\n+  end type matrix\n+\n+  type :: fdef(rk, n)\n+     integer, kind :: rk = kind(1.0)\n+     integer, len :: n = 15\n+  end type\n+\n+end module\n+\n+program test\n+\n+  use m_type_decs\n+  implicit none\n+  integer, parameter :: rk1=kind(1.d0)\n+  type(matrix(rk1,:,:)), allocatable :: o_matrix\n+  type(fdef(n=:)), allocatable :: o_fdef\n+\n+  allocate(matrix(rk=rk1)::o_matrix)\n+\n+  if (o_matrix%n == 15 .and. o_matrix%m == 20) then\n+     write(*,*) 'o_matrix OK'\n+  else\n+     write(*,*) 'o_matrix FAIL'\n+     call abort\n+  end if\n+\n+  allocate(fdef(n=12)::o_fdef)\n+\n+  if (o_fdef%n == 12) then\n+     write(*,*) 'o_fdef OK'\n+  else\n+     write(*,*) 'o_fdef FAIL'\n+     call abort\n+  end if\n+end program test\n+\n+"}, {"sha": "8051b27f97a1b4f388dd5408111426578d7c7a6d", "filename": "gcc/testsuite/gfortran.dg/pdt_12.f03", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d3c075d52f1b92481bd0cdb9b0ef242210f512/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_12.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d3c075d52f1b92481bd0cdb9b0ef242210f512/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_12.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_12.f03?ref=62d3c075d52f1b92481bd0cdb9b0ef242210f512", "patch": "@@ -0,0 +1,42 @@\n+! { dg-do run }\n+!\n+! Checks PDTs with ASSOCIATE.\n+! Was failing for same reason as PR60483.\n+!\n+! Contributed by Reinhold Bader  <reinhold.bader@lrz.de>\n+!\n+module matrix_mod_assumed_05\n+\n+  implicit none\n+\n+  type :: matrix(rk, n, m)\n+     integer, kind :: rk\n+     integer, len :: n, m\n+     real(rk) :: entry(n, m)\n+  end type matrix\n+  integer, parameter :: rk=kind(1.d0)\n+  integer :: mm=20, nn=15\n+\n+contains\n+  function factory()\n+    type(matrix(rk, :, :)), allocatable :: factory\n+    allocate(matrix(rk, nn, mm) :: factory)\n+  end function\n+end module\n+\n+program test\n+\n+  use matrix_mod_assumed_05\n+  implicit none\n+\n+  associate (o_matrix => factory())\n+    if (o_matrix%n == nn .and. o_matrix%m == mm) then  ! Symbol 'o_matrix' at (1) has no IMPLICIT type\n+     write(*,*) 'OK'\n+    else\n+     write(*,*) 'FAIL'\n+     call abort\n+    end if\n+  end associate\n+\n+end program test\n+"}, {"sha": "34e217dc787308ab90f2e1071c7760264c9d317d", "filename": "gcc/testsuite/gfortran.dg/pdt_2.f03", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d3c075d52f1b92481bd0cdb9b0ef242210f512/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_2.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d3c075d52f1b92481bd0cdb9b0ef242210f512/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_2.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_2.f03?ref=62d3c075d52f1b92481bd0cdb9b0ef242210f512", "patch": "@@ -7,7 +7,6 @@\n !\n   implicit none\n   integer, parameter :: ftype = kind(0.0e0)\n-  integer :: pdt_len = 4\n   integer :: i\n   type :: mytype (a,b)\n     integer, kind :: a = kind(0.0d0)\n@@ -17,7 +16,7 @@\n     character (len = b*b) :: chr\n   end type\n \n-  type(mytype(ftype, pdt_len)) :: z2\n+  type(mytype(ftype, 4)) :: z2\n   call foobar (z2)\n contains\n   subroutine foobar (arg)"}, {"sha": "02ad757533d8293ca4d504d8bcc1f2f1f35f3057", "filename": "gcc/testsuite/gfortran.dg/pdt_3.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d3c075d52f1b92481bd0cdb9b0ef242210f512/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_3.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d3c075d52f1b92481bd0cdb9b0ef242210f512/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_3.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_3.f03?ref=62d3c075d52f1b92481bd0cdb9b0ef242210f512", "patch": "@@ -34,7 +34,7 @@ module vars\n \n   real, allocatable :: matrix (:,:)\n   type(thytype(ftype, 4, 4)) :: w\n-  type(x(8,4,mat_dim)) :: q\n+  type(x(8,4,256)) :: q\n   class(mytype(ftype, :)), allocatable :: cz\n \n   w%d = reshape ([(real(i), i = 1, d_dim*d_dim)],[d_dim,d_dim])"}, {"sha": "13c00af79f1fb44d06038ee423ed8dcc9fd508c3", "filename": "gcc/testsuite/gfortran.dg/pdt_4.f03", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d3c075d52f1b92481bd0cdb9b0ef242210f512/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_4.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d3c075d52f1b92481bd0cdb9b0ef242210f512/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_4.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_4.f03?ref=62d3c075d52f1b92481bd0cdb9b0ef242210f512", "patch": "@@ -2,13 +2,25 @@\n !\n ! Test bad PDT coding: Based on pdt_3.f03\n !\n-module vars\n+module m\n   integer :: d_dim = 4\n   integer :: mat_dim = 256\n   integer, parameter :: ftype = kind(0.0d0)\n+  type :: modtype (a,b)\n+    integer, kind :: a = kind(0.0e0)\n+    integer, LEN :: b = 4\n+    integer :: i\n+    real(kind = a) :: d(b, b)\n+  end type\n+end module\n+\n+module bad_vars\n+  use m\n+  type(modtype(8,mat_dim)) :: mod_q ! { dg-error \"must not have the SAVE attribute\" }\n+  type(modtype(8,*)) :: mod_r       ! { dg-error \"ASSUMED type parameters\" }\n end module\n \n-  use vars\n+  use m\n   implicit none\n   integer :: i\n   integer, kind :: bad_kind    ! { dg-error \"not allowed outside a TYPE definition\" }\n@@ -50,7 +62,7 @@ module vars\n   type(thytype(:, 4, 4)) :: w_ugh    ! { dg-error \"cannot either be ASSUMED or DEFERRED\" }\n \n   type(thytype(ftype, b=4, h=4)) :: w\n-  type(x(8,4,mat_dim)) :: q\n+  type(x(8,4,mat_dim)) :: q          ! { dg-error \"must not have the SAVE attribute\" }\n   class(mytype(ftype, :)), allocatable :: cz\n \n   w%a = 1                           ! { dg-error \"assignment to a KIND or LEN component\" }\n@@ -82,9 +94,9 @@ module vars\n   deallocate (cz)\n contains\n   subroutine foo(arg)\n-    type (mytype(4, *)) :: arg      ! used to have an invalid \"is being used before it is defined\"\n+    type (mytype(4, *)) :: arg      ! OK\n   end subroutine\n-  subroutine bar(arg)               ! { dg-error \"cannot have DEFERRED type parameters\" }\n+  subroutine bar(arg)               ! OK\n     type (thytype(8, :, 4) :: arg\n   end subroutine\n end"}]}