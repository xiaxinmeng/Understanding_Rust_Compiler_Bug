{"sha": "7d9641ccfa24bbfed5cf7f03eae558439817bb6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q5NjQxY2NmYTI0YmJmZWQ1Y2Y3ZjAzZWFlNTU4NDM5ODE3YmI2ZQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2012-05-29T14:53:50Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2012-05-29T14:53:50Z"}, "message": "directives.c: Fix typos.\n\n\t* directives.c: Fix typos.\n\t* include/line-map.h: Fix typos.\n\t* line-map.c: Fix typos.\n\t* macro.c: Fix typos.\n\nFrom-SVN: r187966", "tree": {"sha": "ac515777ea7bd3841b8b1fea55c7a964a850e6de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac515777ea7bd3841b8b1fea55c7a964a850e6de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d9641ccfa24bbfed5cf7f03eae558439817bb6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d9641ccfa24bbfed5cf7f03eae558439817bb6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d9641ccfa24bbfed5cf7f03eae558439817bb6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d9641ccfa24bbfed5cf7f03eae558439817bb6e/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9474e8ab4a4f8b22a4411a0688cea4c870378425", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9474e8ab4a4f8b22a4411a0688cea4c870378425", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9474e8ab4a4f8b22a4411a0688cea4c870378425"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "e526af243424b352ea64d4915bf64fe68e277565", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9641ccfa24bbfed5cf7f03eae558439817bb6e/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9641ccfa24bbfed5cf7f03eae558439817bb6e/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=7d9641ccfa24bbfed5cf7f03eae558439817bb6e", "patch": "@@ -1,3 +1,10 @@\n+2012-05-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* directives.c: Fix typos.\n+\t* include/line-map.h: Fix typos.\n+\t* line-map.c: Fix typos.\n+\t* macro.c: Fix typos.\n+\n 2012-05-25  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR bootstrap/53459"}, {"sha": "e37b148da8775c6d949c47b13c9dee95841ff885", "filename": "libcpp/directives.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9641ccfa24bbfed5cf7f03eae558439817bb6e/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9641ccfa24bbfed5cf7f03eae558439817bb6e/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=7d9641ccfa24bbfed5cf7f03eae558439817bb6e", "patch": "@@ -446,7 +446,7 @@ _cpp_handle_directive (cpp_reader *pfile, int indented)\n \t \n \t We exclude the -fdirectives-only case because macro expansion\n \t has not been performed yet, and block comments can cause spaces\n-\t to preceed the directive.  */\n+\t to precede the directive.  */\n       if (CPP_OPTION (pfile, preprocessed)\n \t  && !CPP_OPTION (pfile, directives_only)\n \t  && (indented || !(dir->flags & IN_I)))"}, {"sha": "fe1a18e1fa5f34774e409b7128c33d05f2ad0c49", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9641ccfa24bbfed5cf7f03eae558439817bb6e/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9641ccfa24bbfed5cf7f03eae558439817bb6e/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=7d9641ccfa24bbfed5cf7f03eae558439817bb6e", "patch": "@@ -159,7 +159,7 @@ struct GTY(()) line_map_macro {\n \n      Note that a virtual location is a location returned by\n      linemap_add_macro_token.  It encodes the relevant locations (x,y\n-     pairs) of that token accross the macro expansions from which it\n+     pairs) of that token across the macro expansions from which it\n      (the token) might come from.\n \n      In the example above x1 (for token \"+\") is going to be the same\n@@ -370,7 +370,7 @@ struct GTY(()) line_maps {\n #define LINEMAPS_LAST_ALLOCATED_ORDINARY_MAP(SET) \\\n   LINEMAPS_LAST_ALLOCATED_MAP(SET, false)\n \n-/* Returns a pointer to the begining of the region where macro maps\n+/* Returns a pointer to the beginning of the region where macro maps\n    are allcoated.  */\n #define LINEMAPS_MACRO_MAPS(SET) \\\n   LINEMAPS_MAPS(SET, true)\n@@ -450,7 +450,7 @@ extern const struct line_map *linemap_add\n extern const struct line_map *linemap_lookup\n   (struct line_maps *, source_location);\n \n-/* Returns TRUE if the line table set tracks token locations accross\n+/* Returns TRUE if the line table set tracks token locations across\n    macro expansion, FALSE otherwise.  */\n bool linemap_tracks_macro_expansion_locs_p (struct line_maps *);\n "}, {"sha": "8a368eec2cbe3071a1bacefe5e8b4730e97a8b71", "filename": "libcpp/line-map.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9641ccfa24bbfed5cf7f03eae558439817bb6e/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9641ccfa24bbfed5cf7f03eae558439817bb6e/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=7d9641ccfa24bbfed5cf7f03eae558439817bb6e", "patch": "@@ -269,7 +269,7 @@ linemap_add (struct line_maps *set, enum lc_reason reason,\n   return map;\n }\n \n-/* Returns TRUE if the line table set tracks token locations accross\n+/* Returns TRUE if the line table set tracks token locations across\n    macro expansion, FALSE otherwise.  */\n \n bool\n@@ -1118,7 +1118,7 @@ linemap_unwind_toward_expansion (struct line_maps *set,\n    of a macro M and if its spelling location is reserved (e.g, a\n    location for a built-in token), then this function unwinds (using\n    linemap_unwind_toward_expansion) the location until a location that\n-   is not reserved and is not in a sytem header is reached.  In other\n+   is not reserved and is not in a system header is reached.  In other\n    words, this unwinds the reserved location until a location that is\n    in real source code is reached.\n "}, {"sha": "c2bf06652fae3e37f9bea29071cc54bc9ec7c330", "filename": "libcpp/macro.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9641ccfa24bbfed5cf7f03eae558439817bb6e/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9641ccfa24bbfed5cf7f03eae558439817bb6e/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=7d9641ccfa24bbfed5cf7f03eae558439817bb6e", "patch": "@@ -72,7 +72,7 @@ struct macro_arg_token_iter\n   /* A pointer to the current token pointed to by the iterator.  */\n   const cpp_token **token_ptr;\n   /* A pointer to the \"full\" location of the current token.  If\n-     -ftrack-macro-expansion is used this location tracks loci accross\n+     -ftrack-macro-expansion is used this location tracks loci across\n      macro expansion.  */\n   const source_location *location_ptr;\n #ifdef ENABLE_CHECKING\n@@ -1221,7 +1221,7 @@ delete_macro_args (_cpp_buff *buff, unsigned num_args)\n \n /* Set the INDEXth token of the macro argument ARG. TOKEN is the token\n    to set, LOCATION is its virtual location.  \"Virtual\" location means\n-   the location that encodes loci accross macro expansion. Otherwise\n+   the location that encodes loci across macro expansion. Otherwise\n    it has to be TOKEN->SRC_LOC.  KIND is the kind of tokens the\n    argument ARG is supposed to contain.  Note that ARG must be\n    tailored so that it has enough room to contain INDEX + 1 numbers of\n@@ -1346,7 +1346,7 @@ macro_arg_token_iter_init (macro_arg_token_iter *iter,\n \n /* Move the iterator one token forward. Note that if IT was\n    initialized on an argument that has a stringified token, moving it\n-   foward doesn't make sense as a stringified token is essentially one\n+   forward doesn't make sense as a stringified token is essentially one\n    string.  */\n static void\n macro_arg_token_iter_forward (macro_arg_token_iter *it)\n@@ -1965,7 +1965,7 @@ tokens_buff_remove_last_token (_cpp_buff *tokens_buff)\n    means -ftrack-macro-expansion is effect; it then points to where to\n    insert the virtual location of TOKEN.  TOKEN is the token to\n    insert.  VIRT_LOC is the virtual location of the token, i.e, the\n-   location possibly encoding its locus accross macro expansion.  If\n+   location possibly encoding its locus across macro expansion.  If\n    TOKEN is an argument of a function-like macro (inside a macro\n    replacement list), PARM_DEF_LOC is the spelling location of the\n    macro parameter that TOKEN is replacing, in the replacement list of\n@@ -2010,7 +2010,7 @@ tokens_buff_put_token_to (const cpp_token **dest,\n    reaches BUFFER's size; it aborts in that situation.\n \n    TOKEN is the token to append. VIRT_LOC is the virtual location of\n-   the token, i.e, the location possibly encoding its locus accross\n+   the token, i.e, the location possibly encoding its locus across\n    macro expansion. If TOKEN is an argument of a function-like macro\n    (inside a macro replacement list), PARM_DEF_LOC is the location of\n    the macro parameter that TOKEN is replacing.  If TOKEN doesn't come\n@@ -2226,7 +2226,7 @@ _cpp_pop_context (cpp_reader *pfile)\n       if (macro != NULL\n \t  /* Several contiguous macro expansion contexts can be\n \t     associated to the same macro; that means it's the same\n-\t     macro expansion that spans accross all these (sub)\n+\t     macro expansion that spans across all these (sub)\n \t     contexts.  So we should re-enable an expansion-disabled\n \t     macro only when we are sure we are really out of that\n \t     macro expansion.  */\n@@ -2264,7 +2264,7 @@ reached_end_of_context (cpp_context *context)\n /* Consume the next token contained in the current context of PFILE,\n    and return it in *TOKEN. It's \"full location\" is returned in\n    *LOCATION. If -ftrack-macro-location is in effeect, fFull location\"\n-   means the location encoding the locus of the token accross macro\n+   means the location encoding the locus of the token across macro\n    expansion; otherwise it's just is the \"normal\" location of the\n    token which (*TOKEN)->src_loc.  */\n static inline void"}]}