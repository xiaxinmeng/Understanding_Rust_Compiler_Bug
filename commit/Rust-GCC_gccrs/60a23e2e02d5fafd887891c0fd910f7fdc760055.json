{"sha": "60a23e2e02d5fafd887891c0fd910f7fdc760055", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBhMjNlMmUwMmQ1ZmFmZDg4Nzg5MWMwZmQ5MTBmN2ZkYzc2MDA1NQ==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2005-09-06T19:46:58Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2005-09-06T19:46:58Z"}, "message": "re PR middle-end/14997 (ncurses build fails with Ada)\n\n\tPR middle-end/14997\n\t* expr.c (expand_expr_real) <normal_inner_ref>: Force op0 to mem\n\twhen we would be extracting outside its bit span (bitpos+bitsize\n\tlarger than its mode), possible with some VIEW_CONVERT_EXPRs from\n\tAda unchecked conversions.\n\nCo-Authored-By: Eric Botcazou <ebotcazou@adacore.com>\n\nFrom-SVN: r103963", "tree": {"sha": "a66d1ad60cf6547def8ae7569332633b548ddf3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a66d1ad60cf6547def8ae7569332633b548ddf3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60a23e2e02d5fafd887891c0fd910f7fdc760055", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60a23e2e02d5fafd887891c0fd910f7fdc760055", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60a23e2e02d5fafd887891c0fd910f7fdc760055", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60a23e2e02d5fafd887891c0fd910f7fdc760055/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "29a153937a9c2c93a6f69b3b0dbf2f9dedfed943", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29a153937a9c2c93a6f69b3b0dbf2f9dedfed943", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29a153937a9c2c93a6f69b3b0dbf2f9dedfed943"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "1f93ae7218ccfd4c5d094c6375286490419d397a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60a23e2e02d5fafd887891c0fd910f7fdc760055/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60a23e2e02d5fafd887891c0fd910f7fdc760055/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60a23e2e02d5fafd887891c0fd910f7fdc760055", "patch": "@@ -1,3 +1,12 @@\n+2005-09-06  Olivier Hainque  <hainque@adacore.com>\n+            Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR middle-end/14997\n+\t* expr.c (expand_expr_real) <normal_inner_ref>: Force op0 to mem\n+\twhen we would be extracting outside its bit span (bitpos+bitsize\n+\tlarger than its mode), possible with some VIEW_CONVERT_EXPRs from\n+\tAda unchecked conversions.\n+\n 2005-09-06  Steven Bosscher  <stevenb@suse.de>\n \n \t* tree-ssa-pre.c (try_look_through_load): New function."}, {"sha": "ff6adec6855435756b57245a2866be8077cae37b", "filename": "gcc/expr.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60a23e2e02d5fafd887891c0fd910f7fdc760055/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60a23e2e02d5fafd887891c0fd910f7fdc760055/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=60a23e2e02d5fafd887891c0fd910f7fdc760055", "patch": "@@ -7178,25 +7178,30 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t\t\t  || modifier == EXPAND_STACK_PARM)\n \t\t\t ? modifier : EXPAND_NORMAL);\n \n-\t/* If this is a constant, put it into a register if it is a\n-\t   legitimate constant and OFFSET is 0 and memory if it isn't.  */\n+\t/* If this is a constant, put it into a register if it is a legitimate\n+\t   constant, OFFSET is 0, and we won't try to extract outside the\n+\t   register (in case we were passed a partially uninitialized object\n+\t   or a view_conversion to a larger size).  Force the constant to\n+\t   memory otherwise.  */\n \tif (CONSTANT_P (op0))\n \t  {\n \t    enum machine_mode mode = TYPE_MODE (TREE_TYPE (tem));\n \t    if (mode != BLKmode && LEGITIMATE_CONSTANT_P (op0)\n-\t\t&& offset == 0)\n+\t\t&& offset == 0\n+\t\t&& bitpos + bitsize <= GET_MODE_BITSIZE (mode))\n \t      op0 = force_reg (mode, op0);\n \t    else\n \t      op0 = validize_mem (force_const_mem (mode, op0));\n \t  }\n \n- \t/* Otherwise, if this object not in memory and we either have an\n- \t   offset or a BLKmode result, put it there.  This case can't occur in\n- \t   C, but can in Ada if we have unchecked conversion of an expression\n- \t   from a scalar type to an array or record type or for an\n- \t   ARRAY_RANGE_REF whose type is BLKmode.  */\n+\t/* Otherwise, if this object not in memory and we either have an\n+\t   offset, a BLKmode result, or a reference outside the object, put it\n+\t   there.  Such cases can occur in Ada if we have unchecked conversion\n+\t   of an expression from a scalar type to an array or record type or\n+\t   for an ARRAY_RANGE_REF whose type is BLKmode.  */\n \telse if (!MEM_P (op0)\n \t\t && (offset != 0\n+\t\t     || (bitpos + bitsize > GET_MODE_BITSIZE (GET_MODE (op0)))\n \t\t     || (code == ARRAY_RANGE_REF && mode == BLKmode)))\n \t  {\n \t    tree nt = build_qualified_type (TREE_TYPE (tem),"}]}