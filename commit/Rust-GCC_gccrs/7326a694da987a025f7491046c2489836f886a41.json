{"sha": "7326a694da987a025f7491046c2489836f886a41", "node_id": "C_kwDOANBUbNoAKDczMjZhNjk0ZGE5ODdhMDI1Zjc0OTEwNDZjMjQ4OTgzNmY4ODZhNDE", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-10T06:49:07Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T10:31:43Z"}, "message": "RISC-V: Add vssra.vx C++ API tests\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vssra_vx-1.C: New test.\n\t* g++.target/riscv/rvv/base/vssra_vx-2.C: New test.\n\t* g++.target/riscv/rvv/base/vssra_vx-3.C: New test.\n\t* g++.target/riscv/rvv/base/vssra_vx_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vssra_vx_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vssra_vx_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vssra_vx_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vssra_vx_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vssra_vx_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vssra_vx_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vssra_vx_tum-2.C: New test.\n\t* g++.target/riscv/rvv/base/vssra_vx_tum-3.C: New test.\n\t* g++.target/riscv/rvv/base/vssra_vx_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vssra_vx_tumu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vssra_vx_tumu-3.C: New test.", "tree": {"sha": "efa77eff2a1a94c74b9d87c22cd8deba14a206be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efa77eff2a1a94c74b9d87c22cd8deba14a206be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7326a694da987a025f7491046c2489836f886a41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7326a694da987a025f7491046c2489836f886a41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7326a694da987a025f7491046c2489836f886a41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7326a694da987a025f7491046c2489836f886a41/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02b0325269b6dca8c2da32bf3db4663a9190e6d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02b0325269b6dca8c2da32bf3db4663a9190e6d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02b0325269b6dca8c2da32bf3db4663a9190e6d4"}], "stats": {"total": 2862, "additions": 2862, "deletions": 0}, "files": [{"sha": "23985cd3ebbccbc3090ac6aba15906bc17818620", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vx-1.C", "status": "added", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx-1.C?ref=7326a694da987a025f7491046c2489836f886a41", "patch": "@@ -0,0 +1,314 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra(vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra(vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra(vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra(vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra(vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra(vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra(vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra(vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra(vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra(vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra(vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra(vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra(vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra(vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra(vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra(vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra(vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra(vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra(vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra(vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra(vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra(vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint8mf8_t test___riscv_vssra(vbool64_t mask,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra(vbool32_t mask,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra(vbool16_t mask,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra(vbool8_t mask,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra(vbool4_t mask,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra(vbool2_t mask,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra(vbool1_t mask,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra(vbool64_t mask,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra(vbool32_t mask,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra(vbool16_t mask,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra(vbool8_t mask,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra(vbool4_t mask,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra(vbool2_t mask,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra(vbool64_t mask,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra(vbool32_t mask,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra(vbool16_t mask,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra(vbool8_t mask,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra(vbool4_t mask,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra(vbool64_t mask,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra(vbool32_t mask,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra(vbool16_t mask,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra(vbool8_t mask,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "c7f36db94f882e019b30711e4db0d273019547d4", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vx-2.C", "status": "added", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx-2.C?ref=7326a694da987a025f7491046c2489836f886a41", "patch": "@@ -0,0 +1,314 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra(vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra(vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra(vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra(vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra(vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra(vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra(vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra(vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra(vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra(vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra(vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra(vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra(vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra(vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra(vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra(vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra(vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra(vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra(vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra(vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra(vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra(vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint8mf8_t test___riscv_vssra(vbool64_t mask,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra(vbool32_t mask,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra(vbool16_t mask,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra(vbool8_t mask,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra(vbool4_t mask,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra(vbool2_t mask,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra(vbool1_t mask,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra(vbool64_t mask,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra(vbool32_t mask,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra(vbool16_t mask,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra(vbool8_t mask,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra(vbool4_t mask,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra(vbool2_t mask,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra(vbool64_t mask,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra(vbool32_t mask,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra(vbool16_t mask,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra(vbool8_t mask,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra(vbool4_t mask,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra(vbool64_t mask,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra(vbool32_t mask,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra(vbool16_t mask,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra(vbool8_t mask,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "c5ff47ae379773b24f1bccaa2486ad940869fefc", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vx-3.C", "status": "added", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx-3.C?ref=7326a694da987a025f7491046c2489836f886a41", "patch": "@@ -0,0 +1,314 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra(vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra(vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra(vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra(vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra(vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra(vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra(vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra(vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra(vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra(vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra(vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra(vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra(vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra(vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra(vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra(vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra(vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra(vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra(vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra(vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra(vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra(vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint8mf8_t test___riscv_vssra(vbool64_t mask,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra(vbool32_t mask,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra(vbool16_t mask,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra(vbool8_t mask,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra(vbool4_t mask,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra(vbool2_t mask,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra(vbool1_t mask,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra(vbool64_t mask,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra(vbool32_t mask,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra(vbool16_t mask,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra(vbool8_t mask,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra(vbool4_t mask,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra(vbool2_t mask,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra(vbool64_t mask,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra(vbool32_t mask,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra(vbool16_t mask,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra(vbool8_t mask,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra(vbool4_t mask,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra(vbool64_t mask,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra(vbool32_t mask,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra(vbool16_t mask,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra(vbool8_t mask,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "2490257db8bd4015a2307562eba0bd4a92161599", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vx_mu-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_mu-1.C?ref=7326a694da987a025f7491046c2489836f886a41", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "a335a9591ed1938b8fe3374df91f40ee561ecb23", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vx_mu-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_mu-2.C?ref=7326a694da987a025f7491046c2489836f886a41", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "2e70517cade5acf59489ca53f6552e82d1888faa", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vx_mu-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_mu-3.C?ref=7326a694da987a025f7491046c2489836f886a41", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "4b52410c216d3f25aedf9e64ba07af16353f91b4", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vx_tu-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_tu-1.C?ref=7326a694da987a025f7491046c2489836f886a41", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra_tu(vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra_tu(vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra_tu(vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra_tu(vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra_tu(vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra_tu(vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra_tu(vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra_tu(vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra_tu(vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra_tu(vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra_tu(vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra_tu(vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra_tu(vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra_tu(vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra_tu(vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra_tu(vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra_tu(vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra_tu(vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra_tu(vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra_tu(vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra_tu(vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra_tu(vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */"}, {"sha": "63076738b1fffb9c785b9cf0919e3a2da7a0b248", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vx_tu-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_tu-2.C?ref=7326a694da987a025f7491046c2489836f886a41", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra_tu(vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra_tu(vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra_tu(vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra_tu(vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra_tu(vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra_tu(vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra_tu(vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra_tu(vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra_tu(vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra_tu(vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra_tu(vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra_tu(vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra_tu(vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra_tu(vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra_tu(vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra_tu(vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra_tu(vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra_tu(vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra_tu(vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra_tu(vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra_tu(vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra_tu(vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */"}, {"sha": "111e3a06084594a305f74fd898f8af38602714ae", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vx_tu-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_tu-3.C?ref=7326a694da987a025f7491046c2489836f886a41", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra_tu(vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra_tu(vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra_tu(vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra_tu(vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra_tu(vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra_tu(vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra_tu(vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra_tu(vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra_tu(vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra_tu(vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra_tu(vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra_tu(vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra_tu(vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra_tu(vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra_tu(vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra_tu(vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra_tu(vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra_tu(vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra_tu(vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra_tu(vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra_tu(vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra_tu(vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */"}, {"sha": "b015812d2c676c9661c50a333999d82527920c90", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vx_tum-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_tum-1.C?ref=7326a694da987a025f7491046c2489836f886a41", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "80247efaf83e63fe6581565a455315801da4eb8c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vx_tum-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_tum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_tum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_tum-2.C?ref=7326a694da987a025f7491046c2489836f886a41", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "50f075811aee302dd554012ff6949c0f18b4a4f5", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vx_tum-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_tum-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_tum-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_tum-3.C?ref=7326a694da987a025f7491046c2489836f886a41", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "632fb380f59803e586f1df1e69084432eb8a708d", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vx_tumu-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_tumu-1.C?ref=7326a694da987a025f7491046c2489836f886a41", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "1249c6cfd8fda7e8229750518fca2e618d4d9c6a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vx_tumu-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_tumu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_tumu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_tumu-2.C?ref=7326a694da987a025f7491046c2489836f886a41", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "90cb29e8e4e5e17d45943c0439a0f83ba693cbd4", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vx_tumu-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_tumu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7326a694da987a025f7491046c2489836f886a41/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_tumu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vx_tumu-3.C?ref=7326a694da987a025f7491046c2489836f886a41", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vssra\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}]}