{"sha": "0089537230ac9ec84dd102fd707a5f059c8f3577", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA4OTUzNzIzMGFjOWVjODRkZDEwMmZkNzA3YTVmMDU5YzhmMzU3Nw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-09-17T15:20:23Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-09-17T15:20:23Z"}, "message": "Define pretty printers for C++17 library components\n\n\t* python/libstdcxx/v6/printers.py (StdVariantPrinter): Define.\n\t(StdExpAnyPrinter, StdExpOptionalPrinter, StdExpStringViewPrinter):\n\tRegister for C++17 components in namespace std. Strip inline namespace\n\tfrom typename.\n\nFrom-SVN: r240215", "tree": {"sha": "4d12ca6742f905965748ca40a68c0aac62b5d5d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d12ca6742f905965748ca40a68c0aac62b5d5d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0089537230ac9ec84dd102fd707a5f059c8f3577", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0089537230ac9ec84dd102fd707a5f059c8f3577", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0089537230ac9ec84dd102fd707a5f059c8f3577", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0089537230ac9ec84dd102fd707a5f059c8f3577/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70428957af54a9b90f4ad6b063deb09d461c2a4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70428957af54a9b90f4ad6b063deb09d461c2a4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70428957af54a9b90f4ad6b063deb09d461c2a4f"}], "stats": {"total": 73, "additions": 63, "deletions": 10}, "files": [{"sha": "70ff276beb47fa64a59058e7316cb852c1124fb8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0089537230ac9ec84dd102fd707a5f059c8f3577/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0089537230ac9ec84dd102fd707a5f059c8f3577/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0089537230ac9ec84dd102fd707a5f059c8f3577", "patch": "@@ -1,3 +1,10 @@\n+2016-09-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* python/libstdcxx/v6/printers.py (StdVariantPrinter): Define.\n+\t(StdExpAnyPrinter, StdExpOptionalPrinter, StdExpStringViewPrinter):\n+\tRegister for C++17 components in namespace std. Strip inline namespace\n+\tfrom typename.\n+\n 2016-09-16  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/manual/profile_mode.xml: Fix typo."}, {"sha": "8c29760e01c36224bab45cbb1f6d6b6a8384f5ed", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 56, "deletions": 10, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0089537230ac9ec84dd102fd707a5f059c8f3577/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0089537230ac9ec84dd102fd707a5f059c8f3577/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=0089537230ac9ec84dd102fd707a5f059c8f3577", "patch": "@@ -920,10 +920,10 @@ def display_hint (self):\n \n \n class StdExpAnyPrinter(SingleObjContainerPrinter):\n-    \"Print a std::experimental::any\"\n+    \"Print a std::any or std::experimental::any\"\n \n     def __init__ (self, typename, val):\n-        self.typename = 'std::experimental::any'\n+        self.typename = re.sub('^std::experimental::fundamentals_v\\d::', 'std::experimental::', typename, 1)\n         self.val = val\n         self.contained_type = None\n         contained_value = None\n@@ -932,11 +932,11 @@ def __init__ (self, typename, val):\n         if mgr != 0:\n             func = gdb.block_for_pc(int(mgr.cast(gdb.lookup_type('intptr_t'))))\n             if not func:\n-                raise ValueError(\"Invalid function pointer in std::experimental::any\")\n+                raise ValueError(\"Invalid function pointer in %s\" % self.typename)\n             rx = r\"\"\"({0}::_Manager_\\w+<.*>)::_S_manage\\({0}::_Op, {0} const\\*, {0}::_Arg\\*\\)\"\"\".format(typename)\n             m = re.match(rx, func.function.name)\n             if not m:\n-                raise ValueError(\"Unknown manager function in std::experimental::any\")\n+                raise ValueError(\"Unknown manager function in %s\" % self.typename)\n \n             # FIXME need to expand 'std::string' so that gdb.lookup_type works\n             mgrname = re.sub(\"std::string(?!\\w)\", str(gdb.lookup_type('std::string').strip_typedefs()), m.group(1))\n@@ -948,7 +948,7 @@ def __init__ (self, typename, val):\n             elif '::_Manager_external' in mgrname:\n                 valptr = self.val['_M_storage']['_M_ptr']\n             else:\n-                raise ValueError(\"Unknown manager function in std::experimental::any\")\n+                raise ValueError(\"Unknown manager function in %s\" % self.typename)\n             contained_value = valptr.cast(self.contained_type.pointer()).dereference()\n             visualizer = gdb.default_visualizer(contained_value)\n         super(StdExpAnyPrinter, self).__init__ (contained_value, visualizer)\n@@ -963,11 +963,11 @@ def to_string (self):\n         return desc + valtype\n \n class StdExpOptionalPrinter(SingleObjContainerPrinter):\n-    \"Print a std::experimental::optional\"\n+    \"Print a std::optional or std::experimental::optional\"\n \n     def __init__ (self, typename, val):\n         valtype = self._recognize (val.type.template_argument(0))\n-        self.typename = \"std::experimental::optional<%s>\" % valtype\n+        self.typename = re.sub('^std::(experimental::|)(fundamentals_v\\d::|)(.*)', r'std::\\1\\3<%s>' % valtype, typename, 1)\n         self.val = val\n         contained_value = val['_M_payload'] if self.val['_M_engaged'] else None\n         visualizer = gdb.default_visualizer (val['_M_payload'])\n@@ -980,8 +980,44 @@ def to_string (self):\n             return self.typename + \" containing \" + self.visualizer.to_string ()\n         return self.typename\n \n+class StdVariantPrinter(SingleObjContainerPrinter):\n+    \"Print a std::variant\"\n+\n+    def __init__(self, typename, val):\n+        alternatives = self._template_args(val)\n+        self.alts = alternatives\n+        self.typename = \"%s<%s>\" % (typename, ', '.join([self._recognize(alt) for alt in alternatives]))\n+        self.index = val['_M_index']\n+        if self.index >= len(alternatives):\n+            self.contained_type = None\n+            contained_value = None\n+            visualizer = None\n+        else:\n+            self.contained_type = alternatives[int(self.index)]\n+            addr = val['_M_first']['_M_storage'].address\n+            contained_value = addr.cast(self.contained_type.pointer()).dereference()\n+            visualizer = gdb.default_visualizer(contained_value)\n+        super (StdVariantPrinter, self).__init__(contained_value, visualizer)\n+\n+    def _template_args(self, val):\n+        n = 0\n+        args = ()\n+        while True:\n+            try:\n+                args += (val.type.template_argument(n),)\n+            except:\n+                return args\n+            n += 1\n+\n+    def to_string(self):\n+        if self.contained_value is None:\n+            return \"%s [no value]\" % self.typename\n+        if hasattr(self.visualizer, 'children'):\n+            return \"%s [alternative %d] %s\" % (self.typename, self.index, self.visualizer.to_string())\n+        return self.typename\n+\n class StdExpStringViewPrinter:\n-    \"Print a std::experimental::basic_string_view\"\n+    \"Print a std::basic_string_view or std::experimental::basic_string_view\"\n \n     def __init__ (self, typename, val):\n         self.val = val\n@@ -1385,7 +1421,7 @@ def build_libstdcxx_dictionary ():\n     libstdcxx_printer.add('std::__debug::unique_ptr', UniquePointerPrinter)\n     libstdcxx_printer.add('std::__debug::vector', StdVectorPrinter)\n \n-    # These are the TR1 and C++0x printers.\n+    # These are the TR1 and C++11 printers.\n     # For array - the default GDB pretty-printer seems reasonable.\n     libstdcxx_printer.add_version('std::', 'shared_ptr', SharedPointerPrinter)\n     libstdcxx_printer.add_version('std::', 'weak_ptr', SharedPointerPrinter)\n@@ -1411,7 +1447,7 @@ def build_libstdcxx_dictionary ():\n     libstdcxx_printer.add_version('std::tr1::', 'unordered_multiset',\n                                   Tr1UnorderedSetPrinter)\n \n-    # These are the C++0x printer registrations for -D_GLIBCXX_DEBUG cases.\n+    # These are the C++11 printer registrations for -D_GLIBCXX_DEBUG cases.\n     # The tr1 namespace printers do not seem to have any debug\n     # equivalents, so do no register them.\n     libstdcxx_printer.add('std::__debug::unordered_map',\n@@ -1438,6 +1474,16 @@ def build_libstdcxx_dictionary ():\n     libstdcxx_printer.add_version('std::experimental::filesystem::v1::__cxx11::',\n                                   'path', StdExpPathPrinter)\n \n+    # C++17 components\n+    libstdcxx_printer.add_version('std::',\n+                                  'any', StdExpAnyPrinter)\n+    libstdcxx_printer.add_version('std::',\n+                                  'optional', StdExpOptionalPrinter)\n+    libstdcxx_printer.add_version('std::',\n+                                  'basic_string_view', StdExpStringViewPrinter)\n+    libstdcxx_printer.add_version('std::',\n+                                  'variant', StdVariantPrinter)\n+\n     # Extensions.\n     libstdcxx_printer.add_version('__gnu_cxx::', 'slist', StdSlistPrinter)\n "}]}