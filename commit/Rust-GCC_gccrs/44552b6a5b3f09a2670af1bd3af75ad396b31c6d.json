{"sha": "44552b6a5b3f09a2670af1bd3af75ad396b31c6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ1NTJiNmE1YjNmMDlhMjY3MGFmMWJkM2FmNzVhZDM5NmIzMWM2ZA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-08-18T06:45:51Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-08-18T06:45:51Z"}, "message": "pa.md (high for symbolic operands): TARGET_KERNEL version is now default.\n\n        * pa.md (high for symbolic operands): TARGET_KERNEL version is\n        now default.  Delete ! TARGET_KERNEL version.\n\nFrom-SVN: r5179", "tree": {"sha": "d2fbd6cd66540342075a8523fadec41f914c6627", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2fbd6cd66540342075a8523fadec41f914c6627"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44552b6a5b3f09a2670af1bd3af75ad396b31c6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44552b6a5b3f09a2670af1bd3af75ad396b31c6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44552b6a5b3f09a2670af1bd3af75ad396b31c6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44552b6a5b3f09a2670af1bd3af75ad396b31c6d/comments", "author": null, "committer": null, "parents": [{"sha": "ba365a1952a253b9dca064c5af1ece63aebac95e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba365a1952a253b9dca064c5af1ece63aebac95e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba365a1952a253b9dca064c5af1ece63aebac95e"}], "stats": {"total": 33, "additions": 4, "deletions": 29}, "files": [{"sha": "c78b9c35f7153d17c4ba42a4d14ecdf8545ca89c", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44552b6a5b3f09a2670af1bd3af75ad396b31c6d/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44552b6a5b3f09a2670af1bd3af75ad396b31c6d/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=44552b6a5b3f09a2670af1bd3af75ad396b31c6d", "patch": "@@ -1069,45 +1069,20 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"12\")])\n \n-;; For kernel code always use addil; else we can lose due to a linker\n-;; bug involving absolute symbols and \"ldil;add\" style relocations\n+;; Always use addil rather than ldil;add sequences.  This allows the\n+;; HP linker to eliminate the dp relocation if the symbolic operand\n+;; lives in the TEXT space.\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(high:SI (match_operand 1 \"\" \"\")))]\n-  \"TARGET_KERNEL && symbolic_operand(operands[1], Pmode)\n+  \"symbolic_operand(operands[1], Pmode)\n    && ! function_label_operand (operands[1])\n    && ! read_only_operand (operands[1])\"\n   \"@\n    addil L'%G1,%%r27\"\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"4\")])\n \n-;; For all symbolic operands *except* function addresses and read-only\n-;; operands (which live in TEXT space and do not require relocation).  \n-;;\n-;; The constraints are a little strange.  \n-;; The basic idea is to prefer %r1 as much as possible for register \n-;; allocation (hence we do not allow regclass to know about the general\n-;; register case (via *r).\n-;; We also want to avoid spilling %r1 as that will cause every use\n-;; of %r1 to be reloaded, so we make the %r1 case very expensive\n-;; as far as reload is concerned (via !a).\n-;;\n-;; The real solution is to not spill all pseudos allocated to %r1\n-;; when %r1 is needed as a spill register, but that is considerably\n-;; more difficult than coercing decent behavior via constraints.\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=!a,*r\")\n-\t(high:SI (match_operand 1 \"\" \"\")))]\n-  \"! TARGET_KERNEL && symbolic_operand(operands[1], Pmode)\n-   && ! function_label_operand (operands[1])\n-   && ! read_only_operand (operands[1])\"\n-  \"@\n-   addil L'%G1,%%r27\n-   ldil L'%G1,%0\\;add %0,%%r27,%0\"\n-  [(set_attr \"type\" \"binary,binary\")\n-   (set_attr \"length\" \"4,8\")])\n-\n ;; This is for use in the prologue/epilogue code.  We need it \n ;; to add large constants to a stack pointer or frame pointer.\n ;; Because of the additional %r1 pressure, we probably do not"}]}