{"sha": "6f762481a21f211c03b6eda416b5d5737c3ed4b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY3NjI0ODFhMjFmMjExYzAzYjZlZGE0MTZiNWQ1NzM3YzNlZDRiNw==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-11-02T21:12:38Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-11-07T11:50:23Z"}, "message": "Objective-C/C++ (C-family) : Add missing 'atomic' property attribute.\n\nThis is the default, but it is still legal in user code and therefore\nwe should handle it in parsing.  Fix whitespace issues in the lines\naffected.\n\ngcc/c-family/ChangeLog:\n\n\t* c-common.c (c_common_reswords): Add 'atomic' property\n\tattribute.\n\t* c-common.h (enum rid): Add RID_PROPATOMIC for atomic\n\tproperty attributes.\n\ngcc/objc/ChangeLog:\n\n\t* objc-act.c (objc_prop_attr_kind_for_rid): Handle\n\tRID_PROPATOMIC.\n\ngcc/testsuite/ChangeLog:\n\n\t* obj-c++.dg/property/at-property-4.mm: Test atomic property\n\tattribute.\n\t* objc.dg/property/at-property-4.m: Likewise.", "tree": {"sha": "4161b1ecdf8f258514b70f54e4cf0b1cf9937804", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4161b1ecdf8f258514b70f54e4cf0b1cf9937804"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f762481a21f211c03b6eda416b5d5737c3ed4b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f762481a21f211c03b6eda416b5d5737c3ed4b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f762481a21f211c03b6eda416b5d5737c3ed4b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f762481a21f211c03b6eda416b5d5737c3ed4b7/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c30bf43eb2325caa4cb32a697ac1127c15205d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c30bf43eb2325caa4cb32a697ac1127c15205d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c30bf43eb2325caa4cb32a697ac1127c15205d7"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "d4d3228b8f637e187a911e3cfb52e463373e8286", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f762481a21f211c03b6eda416b5d5737c3ed4b7/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f762481a21f211c03b6eda416b5d5737c3ed4b7/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=6f762481a21f211c03b6eda416b5d5737c3ed4b7", "patch": "@@ -571,14 +571,15 @@ const struct c_common_resword c_common_reswords[] =\n   { \"oneway\",\t\tRID_ONEWAY,\t\tD_OBJC },\n   { \"out\",\t\tRID_OUT,\t\tD_OBJC },\n   /* These are recognized inside a property attribute list */\n-  { \"assign\",\t        RID_ASSIGN,\t\tD_OBJC }, \n-  { \"copy\",\t        RID_COPY,\t\tD_OBJC }, \n-  { \"getter\",\t\tRID_GETTER,\t\tD_OBJC }, \n-  { \"nonatomic\",\tRID_NONATOMIC,\t\tD_OBJC }, \n-  { \"readonly\",\t\tRID_READONLY,\t\tD_OBJC }, \n-  { \"readwrite\",\tRID_READWRITE,\t\tD_OBJC }, \n-  { \"retain\",\t        RID_RETAIN,\t\tD_OBJC }, \n-  { \"setter\",\t\tRID_SETTER,\t\tD_OBJC }, \n+  { \"assign\",\t\tRID_ASSIGN,\t\tD_OBJC },\n+  { \"atomic\",\t\tRID_PROPATOMIC,\t\tD_OBJC },\n+  { \"copy\",\t\tRID_COPY,\t\tD_OBJC },\n+  { \"getter\",\t\tRID_GETTER,\t\tD_OBJC },\n+  { \"nonatomic\",\tRID_NONATOMIC,\t\tD_OBJC },\n+  { \"readonly\",\t\tRID_READONLY,\t\tD_OBJC },\n+  { \"readwrite\",\tRID_READWRITE,\t\tD_OBJC },\n+  { \"retain\",\t\tRID_RETAIN,\t\tD_OBJC },\n+  { \"setter\",\t\tRID_SETTER,\t\tD_OBJC },\n };\n \n const unsigned int num_c_common_reswords ="}, {"sha": "7e2cd5342aa6db3d7219ba2ec216cd4adb16a227", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f762481a21f211c03b6eda416b5d5737c3ed4b7/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f762481a21f211c03b6eda416b5d5737c3ed4b7/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=6f762481a21f211c03b6eda416b5d5737c3ed4b7", "patch": "@@ -85,7 +85,7 @@ enum rid\n   RID_GETTER, RID_SETTER,\n   RID_READONLY, RID_READWRITE,\n   RID_ASSIGN, RID_RETAIN, RID_COPY,\n-  RID_NONATOMIC,\n+  RID_PROPATOMIC, RID_NONATOMIC,\n \n   /* C (reserved and imaginary types not implemented, so any use is a\n      syntax error) */"}, {"sha": "2dad46aa77e6fe4f11d57ea7b2190a30fa890339", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f762481a21f211c03b6eda416b5d5737c3ed4b7/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f762481a21f211c03b6eda416b5d5737c3ed4b7/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=6f762481a21f211c03b6eda416b5d5737c3ed4b7", "patch": "@@ -822,6 +822,7 @@ objc_prop_attr_kind_for_rid (enum rid prop_rid)\n       case RID_RETAIN:\t\treturn OBJC_PROPERTY_ATTR_RETAIN;\n       case RID_COPY:\t\treturn OBJC_PROPERTY_ATTR_COPY;\n \n+      case RID_PROPATOMIC:\treturn OBJC_PROPERTY_ATTR_ATOMIC;\n       case RID_NONATOMIC:\treturn OBJC_PROPERTY_ATTR_NONATOMIC;\n \n     }"}, {"sha": "31f2eb4336ab246f9d578f09dd0d6f7c73ac6535", "filename": "gcc/testsuite/obj-c++.dg/property/at-property-4.mm", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f762481a21f211c03b6eda416b5d5737c3ed4b7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f762481a21f211c03b6eda416b5d5737c3ed4b7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-4.mm?ref=6f762481a21f211c03b6eda416b5d5737c3ed4b7", "patch": "@@ -16,6 +16,7 @@ - (void) mySetter2: (int)property;\n /* Test that all the new property attributes can be parsed.  */\n @property (assign)    id property_a;\n @property (copy)      id property_b;\n+@property (atomic)    int property_ca;\n @property (nonatomic) int property_c;\n @property (readonly)  int property_d;\n @property (readwrite) int property_e;\n@@ -34,6 +35,8 @@ - (void) mySetter2: (int)property;\n @property (assign, copy) id d;            /* { dg-error \".copy. attribute conflicts with .assign. attribute\" } */\n @property (copy, retain) id e;            /* { dg-error \".retain. attribute conflicts with .copy. attribute\" } */\n \n+@property (atomic, nonatomic) int property_j; /* { dg-error {'nonatomic' attribute conflicts with 'atomic' attribute} } */\n+\n @property (setter=mySetter:,setter=mySetter2:)  int f; /* { dg-warning {multiple property 'setter' methods specified, the latest one will be used} } */\n @property (getter=myGetter, getter=myGetter2 )  int g; /* { dg-warning {multiple property 'getter' methods specified, the latest one will be used} } */\n "}, {"sha": "31f2eb4336ab246f9d578f09dd0d6f7c73ac6535", "filename": "gcc/testsuite/objc.dg/property/at-property-4.m", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f762481a21f211c03b6eda416b5d5737c3ed4b7/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f762481a21f211c03b6eda416b5d5737c3ed4b7/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-4.m?ref=6f762481a21f211c03b6eda416b5d5737c3ed4b7", "patch": "@@ -16,6 +16,7 @@ - (void) mySetter2: (int)property;\n /* Test that all the new property attributes can be parsed.  */\n @property (assign)    id property_a;\n @property (copy)      id property_b;\n+@property (atomic)    int property_ca;\n @property (nonatomic) int property_c;\n @property (readonly)  int property_d;\n @property (readwrite) int property_e;\n@@ -34,6 +35,8 @@ - (void) mySetter2: (int)property;\n @property (assign, copy) id d;            /* { dg-error \".copy. attribute conflicts with .assign. attribute\" } */\n @property (copy, retain) id e;            /* { dg-error \".retain. attribute conflicts with .copy. attribute\" } */\n \n+@property (atomic, nonatomic) int property_j; /* { dg-error {'nonatomic' attribute conflicts with 'atomic' attribute} } */\n+\n @property (setter=mySetter:,setter=mySetter2:)  int f; /* { dg-warning {multiple property 'setter' methods specified, the latest one will be used} } */\n @property (getter=myGetter, getter=myGetter2 )  int g; /* { dg-warning {multiple property 'getter' methods specified, the latest one will be used} } */\n "}]}