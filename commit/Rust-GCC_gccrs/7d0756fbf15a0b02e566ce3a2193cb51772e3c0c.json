{"sha": "7d0756fbf15a0b02e566ce3a2193cb51772e3c0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QwNzU2ZmJmMTVhMGIwMmU1NjZjZTNhMjE5M2NiNTE3NzJlM2MwYw==", "commit": {"author": {"name": "Catherine Moore", "email": "clm@cygnus.com", "date": "1998-09-28T06:24:06Z"}, "committer": {"name": "Catherine Moore", "email": "clm@gcc.gnu.org", "date": "1998-09-28T06:24:06Z"}, "message": "flags.h: Add flag_data_sections.\n\n        * flags.h:  Add flag_data_sections.\n        * toplev.c:  Add option -fdata-sections.  Add flag_data_sections.\n        (compile_file):  Error if flag_data_sections not supported.\n        * varasm.c (assemble_variable):  Handle flag_data_sections.\n        * config/svr4.h:  Modify prefixes for UNIQUE_SECTION_NAME.\n        * config/mips/elf.h:  Likewise.\n        * config/mips/elf64.h:  Likewise.\n        * invoke.texi:  Describe -fdata-sections.\n\nFrom-SVN: r22619", "tree": {"sha": "94a5b1127023dfb6300c924e2c3d5cf44307f9df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94a5b1127023dfb6300c924e2c3d5cf44307f9df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d0756fbf15a0b02e566ce3a2193cb51772e3c0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d0756fbf15a0b02e566ce3a2193cb51772e3c0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d0756fbf15a0b02e566ce3a2193cb51772e3c0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d0756fbf15a0b02e566ce3a2193cb51772e3c0c/comments", "author": null, "committer": null, "parents": [{"sha": "52464fd6e7c701672ba8826d2831ea8f5e38fa15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52464fd6e7c701672ba8826d2831ea8f5e38fa15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52464fd6e7c701672ba8826d2831ea8f5e38fa15"}], "stats": {"total": 184, "additions": 172, "deletions": 12}, "files": [{"sha": "5a01f5a65caa974d0fa7717507a6a2eac7258139", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d0756fbf15a0b02e566ce3a2193cb51772e3c0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d0756fbf15a0b02e566ce3a2193cb51772e3c0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d0756fbf15a0b02e566ce3a2193cb51772e3c0c", "patch": "@@ -1,3 +1,14 @@\n+Mon Sep 28 07:54:03 1998  Catherine Moore  <clm@cygnus.com>\n+ \n+        * flags.h:  Add flag_data_sections.\n+        * toplev.c:  Add option -fdata-sections.  Add flag_data_sections.\n+        (compile_file):  Error if flag_data_sections not supported.\n+        * varasm.c (assemble_variable):  Handle flag_data_sections.\n+        * config/svr4.h:  Modify prefixes for UNIQUE_SECTION_NAME.\n+        * config/mips/elf.h:  Likewise.\n+        * config/mips/elf64.h:  Likewise.\n+        * invoke.texi:  Describe -fdata-sections.\n+ \n Mon Sep 28 04:15:44 1998  Craig Burley  <burley@melange.gnu.org>\n \n \t* invoke.texi (-ffloat-store): Clarify that this option"}, {"sha": "a5401f843113465f390c3f30a3bf6a88fa80aaa9", "filename": "gcc/config/mips/elf.h", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d0756fbf15a0b02e566ce3a2193cb51772e3c0c/gcc%2Fconfig%2Fmips%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d0756fbf15a0b02e566ce3a2193cb51772e3c0c/gcc%2Fconfig%2Fmips%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf.h?ref=7d0756fbf15a0b02e566ce3a2193cb51772e3c0c", "patch": "@@ -169,3 +169,64 @@ do {\t\t\t\t\t\t\t\t\t \\\n   fputc ('\\n', FILE);\t\t\t\t\\\n  } while (0)\n \n+#define UNIQUE_SECTION(DECL,RELOC)\t\t\t\t\t   \\\n+do {\t\t\t\t\t\t\t\t\t   \\\n+  int len, size, sec;\t\t\t\t\t\t\t   \\\n+  char *name, *string, *prefix;\t\t\t\t\t\t   \\\n+  static char *prefixes[4][2] = {\t\t\t\t\t   \\\n+    { \".text.\", \".gnu.linkonce.t.\" },\t\t\t\t\t   \\\n+    { \".rodata.\", \".gnu.linkonce.r.\" },\t\t\t\t\t   \\\n+    { \".data.\", \".gnu.linkonce.d.\" },\t\t\t\t\t   \\\n+    { \".sdata.\", \".gnu.linkonce.s.\" }\t\t\t\t\t   \\\n+  };\t\t\t\t\t\t\t\t\t   \\\n+\t\t\t\t\t\t\t\t\t   \\\n+  name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (DECL));\t\t   \\\n+  size = int_size_in_bytes (TREE_TYPE (decl));\t\t\t\t   \\\n+\t\t\t\t\t\t\t\t\t   \\\n+  /* Determine the base section we are interested in:\t\t\t   \\\n+     0=text, 1=rodata, 2=data, 3=sdata.  */\t\t\t\t   \\\n+  if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\t   \\\n+    sec = 0;\t\t\t\t\t\t\t\t   \\\n+  else if ((TARGET_EMBEDDED_PIC || TARGET_MIPS16)\t\t\t   \\\n+      && TREE_CODE (decl) == STRING_CST\t\t\t\t\t   \\\n+      && !flag_writable_strings)\t\t\t\t\t   \\\n+    {\t\t\t\t\t\t\t\t\t   \\\n+      /* For embedded position independent code, put constant strings\t   \\\n+\t in the text section, because the data section is limited to\t   \\\n+\t 64K in size.  For mips16 code, put strings in the text\t\t   \\\n+\t section so that a PC relative load instruction can be used to\t   \\\n+\t get their address.  */\t\t\t\t\t\t   \\\n+      sec = 0;\t\t\t\t\t\t\t\t   \\\n+    }\t\t\t\t\t\t\t\t\t   \\\n+  else if (TARGET_EMBEDDED_DATA)\t\t\t\t\t   \\\n+    {\t\t\t\t\t\t\t\t\t   \\\n+      /* For embedded applications, always put an object in read-only data \\\n+\t if possible, in order to reduce RAM usage.  */\t\t\t   \\\n+\t\t\t\t\t\t\t\t\t   \\\n+      if (DECL_READONLY_SECTION (DECL, RELOC))\t\t\t\t   \\\n+\tsec = 1;\t\t\t\t\t\t\t   \\\n+      else if (size > 0 && size <= mips_section_threshold)\t\t   \\\n+\tsec = 3;\t\t\t\t\t\t\t   \\\n+      else\t\t\t\t\t\t\t\t   \\\n+\tsec = 2;\t\t\t\t\t\t\t   \\\n+    }\t\t\t\t\t\t\t\t\t   \\\n+  else\t\t\t\t\t\t\t\t\t   \\\n+    {\t\t\t\t\t\t\t\t\t   \\\n+      /* For hosted applications, always put an object in small data if\t   \\\n+\t possible, as this gives the best performance.  */\t\t   \\\n+\t\t\t\t\t\t\t\t\t   \\\n+      if (size > 0 && size <= mips_section_threshold)\t\t\t   \\\n+\tsec = 3;\t\t\t\t\t\t\t   \\\n+      else if (DECL_READONLY_SECTION (DECL, RELOC))\t\t\t   \\\n+\tsec = 1;\t\t\t\t\t\t\t   \\\n+      else\t\t\t\t\t\t\t\t   \\\n+\tsec = 2;\t\t\t\t\t\t\t   \\\n+    }\t\t\t\t\t\t\t\t\t   \\\n+\t\t\t\t\t\t\t\t\t   \\\n+  prefix = prefixes[sec][DECL_ONE_ONLY (DECL)];\t\t\t\t   \\\n+  len = strlen (name) + strlen (prefix);\t\t\t\t   \\\n+  string = alloca (len + 1);\t\t\t\t\t\t   \\\n+  sprintf (string, \"%s%s\", prefix, name);\t\t\t\t   \\\n+\t\t\t\t\t\t\t\t\t   \\\n+  DECL_SECTION_NAME (DECL) = build_string (len, string);\t\t   \\\n+} while (0)"}, {"sha": "b6cf3721c777f63b1400a843246cfeaa5a5f4ada", "filename": "gcc/config/mips/elf64.h", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d0756fbf15a0b02e566ce3a2193cb51772e3c0c/gcc%2Fconfig%2Fmips%2Felf64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d0756fbf15a0b02e566ce3a2193cb51772e3c0c/gcc%2Fconfig%2Fmips%2Felf64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf64.h?ref=7d0756fbf15a0b02e566ce3a2193cb51772e3c0c", "patch": "@@ -195,3 +195,64 @@ do {\t\t\t\t\t\t\t\t\t \\\n   fputc ('\\n', FILE);\t\t\t\t\\\n  } while (0)\n \n+#define UNIQUE_SECTION(DECL,RELOC)\t\t\t\t\t   \\\n+do {\t\t\t\t\t\t\t\t\t   \\\n+  int len, size, sec;\t\t\t\t\t\t\t   \\\n+  char *name, *string, *prefix;\t\t\t\t\t\t   \\\n+  static char *prefixes[4][2] = {\t\t\t\t\t   \\\n+    { \".text.\", \".gnu.linkonce.t.\" },\t\t\t\t\t   \\\n+    { \".rodata.\", \".gnu.linkonce.r.\" },\t\t\t\t\t   \\\n+    { \".data.\", \".gnu.linkonce.d.\" },\t\t\t\t\t   \\\n+    { \".sdata.\", \".gnu.linkonce.s.\" }\t\t\t\t\t   \\\n+  };\t\t\t\t\t\t\t\t\t   \\\n+\t\t\t\t\t\t\t\t\t   \\\n+  name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (DECL));\t\t   \\\n+  size = int_size_in_bytes (TREE_TYPE (decl));\t\t\t\t   \\\n+\t\t\t\t\t\t\t\t\t   \\\n+  /* Determine the base section we are interested in:\t\t\t   \\\n+     0=text, 1=rodata, 2=data, 3=sdata.  */\t\t\t\t   \\\n+  if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\t   \\\n+    sec = 0;\t\t\t\t\t\t\t\t   \\\n+  else if ((TARGET_EMBEDDED_PIC || TARGET_MIPS16)\t\t\t   \\\n+      && TREE_CODE (decl) == STRING_CST\t\t\t\t\t   \\\n+      && !flag_writable_strings)\t\t\t\t\t   \\\n+    {\t\t\t\t\t\t\t\t\t   \\\n+      /* For embedded position independent code, put constant strings\t   \\\n+\t in the text section, because the data section is limited to\t   \\\n+\t 64K in size.  For mips16 code, put strings in the text\t\t   \\\n+\t section so that a PC relative load instruction can be used to\t   \\\n+\t get their address.  */\t\t\t\t\t\t   \\\n+      sec = 0;\t\t\t\t\t\t\t\t   \\\n+    }\t\t\t\t\t\t\t\t\t   \\\n+  else if (TARGET_EMBEDDED_DATA)\t\t\t\t\t   \\\n+    {\t\t\t\t\t\t\t\t\t   \\\n+      /* For embedded applications, always put an object in read-only data \\\n+\t if possible, in order to reduce RAM usage.  */\t\t\t   \\\n+\t\t\t\t\t\t\t\t\t   \\\n+      if (DECL_READONLY_SECTION (DECL, RELOC))\t\t\t\t   \\\n+\tsec = 1;\t\t\t\t\t\t\t   \\\n+      else if (size > 0 && size <= mips_section_threshold)\t\t   \\\n+\tsec = 3;\t\t\t\t\t\t\t   \\\n+      else\t\t\t\t\t\t\t\t   \\\n+\tsec = 2;\t\t\t\t\t\t\t   \\\n+    }\t\t\t\t\t\t\t\t\t   \\\n+  else\t\t\t\t\t\t\t\t\t   \\\n+    {\t\t\t\t\t\t\t\t\t   \\\n+      /* For hosted applications, always put an object in small data if\t   \\\n+\t possible, as this gives the best performance.  */\t\t   \\\n+\t\t\t\t\t\t\t\t\t   \\\n+      if (size > 0 && size <= mips_section_threshold)\t\t\t   \\\n+\tsec = 3;\t\t\t\t\t\t\t   \\\n+      else if (DECL_READONLY_SECTION (DECL, RELOC))\t\t\t   \\\n+\tsec = 1;\t\t\t\t\t\t\t   \\\n+      else\t\t\t\t\t\t\t\t   \\\n+\tsec = 2;\t\t\t\t\t\t\t   \\\n+    }\t\t\t\t\t\t\t\t\t   \\\n+\t\t\t\t\t\t\t\t\t   \\\n+  prefix = prefixes[sec][DECL_ONE_ONLY (DECL)];\t\t\t\t   \\\n+  len = strlen (name) + strlen (prefix);\t\t\t\t   \\\n+  string = alloca (len + 1);\t\t\t\t\t\t   \\\n+  sprintf (string, \"%s%s\", prefix, name);\t\t\t\t   \\\n+\t\t\t\t\t\t\t\t\t   \\\n+  DECL_SECTION_NAME (DECL) = build_string (len, string);\t\t   \\\n+} while (0)"}, {"sha": "ef7a1d9df843717844d17e22e18fd555031d08e7", "filename": "gcc/config/svr4.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d0756fbf15a0b02e566ce3a2193cb51772e3c0c/gcc%2Fconfig%2Fsvr4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d0756fbf15a0b02e566ce3a2193cb51772e3c0c/gcc%2Fconfig%2Fsvr4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr4.h?ref=7d0756fbf15a0b02e566ce3a2193cb51772e3c0c", "patch": "@@ -655,7 +655,15 @@ do {\t\t\t\t\t\t\t\t\\\n   name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (DECL));\t\\\n \t\t\t\t\t\t\t\t\\\n   if (! DECL_ONE_ONLY (DECL))\t\t\t\t\t\\\n-    prefix = \".\";\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      prefix = \".\";                                             \\\n+      if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n+\tprefix = \".text.\";\t\t\t\t\t\\\n+      else if (DECL_READONLY_SECTION (DECL, RELOC))\t\t\\\n+\tprefix = \".rodata.\";\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\\\n+\tprefix = \".data.\";\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n   else if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n     prefix = \".gnu.linkonce.t.\";\t\t\t\t\\\n   else if (DECL_READONLY_SECTION (DECL, RELOC))\t\t\t\\\n@@ -669,7 +677,6 @@ do {\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n   DECL_SECTION_NAME (DECL) = build_string (len, string);\t\\\n } while (0)\n-\n /* A C statement (sans semicolon) to output an element in the table of\n    global constructors.  */\n #define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\"}, {"sha": "a40375065e38341bbd74266fbd8c3fcd29ba5408", "filename": "gcc/flags.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d0756fbf15a0b02e566ce3a2193cb51772e3c0c/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d0756fbf15a0b02e566ce3a2193cb51772e3c0c/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=7d0756fbf15a0b02e566ce3a2193cb51772e3c0c", "patch": "@@ -398,6 +398,10 @@ extern int flag_inhibit_size_directive;\n \n extern int flag_function_sections;\n \n+/* ... and similar for data.  */\n+ \n+extern int flag_data_sections;\n+\n /* -fverbose-asm causes extra commentary information to be produced in\n    the generated assembly code (to make it more readable).  This option\n    is generally only of use to those who actually need to read the"}, {"sha": "5c6d84594ea98457e7180afb1fd4d7054b4819c1", "filename": "gcc/invoke.texi", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d0756fbf15a0b02e566ce3a2193cb51772e3c0c/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d0756fbf15a0b02e566ce3a2193cb51772e3c0c/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=7d0756fbf15a0b02e566ce3a2193cb51772e3c0c", "patch": "@@ -151,9 +151,9 @@ in the following sections.\n -fcaller-saves  -fcse-follow-jumps  -fcse-skip-blocks\n -fdelayed-branch   -fexpensive-optimizations\n -ffast-math  -ffloat-store  -fforce-addr  -fforce-mem\n--ffunction-sections  -fgcse -finline-functions\n--fkeep-inline-functions  -fno-default-inline\n--fno-defer-pop  -fno-function-cse\n+-fdata-sections -ffunction-sections  -fgcse \n+-finline-functions -fkeep-inline-functions\n+-fno-default-inline -fno-defer-pop  -fno-function-cse\n -fno-inline  -fno-peephole  -fomit-frame-pointer -fregmove\n -frerun-cse-after-loop  -frerun-loop-opt -fschedule-insns\n -fschedule-insns2  -fstrength-reduce  -fthread-jumps\n@@ -2340,18 +2340,20 @@ especially useful on machines with a relatively small number of\n registers and where memory load instructions take more than one cycle.\n \n @item -ffunction-sections\n-Place each function into its own section in the output file if the\n-target supports arbitrary sections.  The function's name determines\n-the section's name in the output file.\n+@item -fdata-sections\n+Place each function or data item into its own section in the output\n+file if the target supports arbitrary sections.  The name of the\n+function or the name of the data item determines the section's name\n+in the output file.\n \n-Use this option on systems where the linker can perform optimizations\n+Use these options on systems where the linker can perform optimizations\n to improve locality of reference in the instruction space.  HPPA\n processors running HP-UX and Sparc processors running Solaris 2 have\n linkers with such optimizations.  Other systems using the ELF object format\n as well as AIX may have these optimizations in the future.\n \n-Only use this option when there are significant benefits from doing\n-so.  When you specify this option, the assembler and linker will\n+Only use these options when there are significant benefits from doing\n+so.  When you specify these options, the assembler and linker will\n create larger object and executable files and will also be slower.\n You will not be able to use @code{gprof} on all systems if you\n specify this option and you may have problems with debugging if"}, {"sha": "96956bf24fce3ff5cb70a854a5aeee653a36a94b", "filename": "gcc/toplev.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d0756fbf15a0b02e566ce3a2193cb51772e3c0c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d0756fbf15a0b02e566ce3a2193cb51772e3c0c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=7d0756fbf15a0b02e566ce3a2193cb51772e3c0c", "patch": "@@ -528,6 +528,10 @@ int flag_no_peephole = 0;\n \n /* Nonzero allows GCC to violate some IEEE or ANSI rules regarding math\n    operations in the interest of optimization.  For example it allows\n+/* ... and similar for data.  */\n+ \n+int flag_data_sections = 0;\n+\n    GCC to assume arguments to sqrt are nonnegative numbers, allowing\n    faster code for sqrt to be generated.  */\n \n@@ -932,6 +936,8 @@ documented_lang_options[] =\n      enabled by default.  */\n \n   { \"-ansi\", \"Compile just for ANSI C\" },\n+  {\"data-sections\", &flag_data_sections, 1,\n+   \"place data items into their own section\" },\n   { \"-fallow-single-precision\",\n     \"Do not promote floats to double if using -traditional\" },\n \n@@ -2809,6 +2815,12 @@ compile_file (name)\n \n     for (i = 0, decl = globals; i < len; i++, decl = TREE_CHAIN (decl))\n       vec[len - i - 1] = decl;\n+  if (flag_data_sections)\n+    {\n+      warning (\"-fdata-sections not supported for this target.\");\n+      flag_data_sections = 0;\n+    }\n+\n \n     for (i = 0; i < len; i++)\n       {"}, {"sha": "d3e12b9cb86b1cd9b9ba12a06ab49fd9ac2faed2", "filename": "gcc/varasm.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d0756fbf15a0b02e566ce3a2193cb51772e3c0c/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d0756fbf15a0b02e566ce3a2193cb51772e3c0c/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=7d0756fbf15a0b02e566ce3a2193cb51772e3c0c", "patch": "@@ -1464,7 +1464,9 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n     reloc = output_addressed_constants (DECL_INITIAL (decl));\n \n #ifdef ASM_OUTPUT_SECTION_NAME\n-  if (UNIQUE_SECTION_P (decl))\n+  if ((flag_data_sections != 0\n+       && DECL_SECTION_NAME (decl) == NULL_TREE)\n+      || UNIQUE_SECTION_P (decl))\n     UNIQUE_SECTION (decl, reloc);\n #endif\n "}]}