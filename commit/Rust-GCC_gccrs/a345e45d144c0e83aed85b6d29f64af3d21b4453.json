{"sha": "a345e45d144c0e83aed85b6d29f64af3d21b4453", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM0NWU0NWQxNDRjMGU4M2FlZDg1YjZkMjlmNjRhZjNkMjFiNDQ1Mw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2011-05-24T02:38:19Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2011-05-24T02:38:19Z"}, "message": "re PR libstdc++/37144 (A bug in include/ext/pb_ds/detail/pat_trie_/constructors_destructor_fn_imps.hpp)\n\n2011-05-23  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/37144\n\tPR libstdc++/28457\n\tInterface changes for ext/pb_ds.\n\tPB_DS_BASE_C_DEC to unique PB_DS_*_BASE macros.\n\t* include/ext/pb_ds/assoc_container.hpp (container_base): Remove.\n\t(basic_hash_table, basic_branch, list_update): Derive from\n\tcontainer_base_dispatch.\n\t* include/ext/pb_ds/list_update_policy.hpp (null_lu_metadata): Remove.\n\t(move_to_front_lu_policy): To lu_move_to_front_policy.\n\t(counter_lu_policy): To lu_counter_policy.\n\t* include/ext/pb_ds/tree_policy.hpp (null_tree_node_update): Remove.\n\t* include/ext/pb_ds/tag_and_trait.hpp (container_base_dispatch): Adjust\n\ttemplate parameters, declare here.\n\t(null_mapped_type) Remove.\n\t(null_type): Just use this for template tricks everywhere.\n\t* include/ext/pb_ds/hash_policy.hpp (null_hash_fn, null_probe_fn):\n\tRemove.\n\t* include/ext/pb_ds/trie_policy.hpp (null_trie_node_update): Remove.\n\t(string_trie_e_access_traits): To trie_string_access_traits.\n\t* include/ext/pb_ds/priority_queue.hpp: Use container_base_dispatch.\n\n\tFile changes.\n\t* include/Makefile.am (pb_headers): Removed and changed file names.\n\t* include/Makefile.in: Regenerated.\n\t* include/ext/pb_ds/detail/basic_types.hpp: Remove.\n\t* include/ext/pb_ds/detail/bin_search_tree_/\n\t  cond_dtor_entry_dealtor.hpp: Remove.\n\t* include/ext/pb_ds/detail/bin_search_tree_/\n\t  cond_key_dtor_entry_dealtor.hpp: Remove.\n\t* include/ext/pb_ds/detail/binary_heap_/const_point_iterator.hpp: Move..\n\t* include/ext/pb_ds/detail/binary_heap_/\n\t  point_const_iterator.hpp: ..here.\n\t* include/ext/pb_ds/detail/basic_tree_policy: Move to...\n\t* include/ext/pb_ds/detail/branch_policy: This.\n\t* include/ext/pb_ds/detail/branch_policy/\n\t  basic_tree_policy_base.hpp: Move...\n\t* include/ext/pb_ds/detail/branch_policy/branch_policy.hpp: ...here.\n\t* include/ext/pb_ds/detail/branch_policy/null_node_metadata.hpp: Add.\n\t* include/ext/pb_ds/detail/branch_policy/traits.hpp: Add.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\tnull_metadata.hpp: Remove.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\tconst_point_iterator.hpp: Move...\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\tpoint_const_iterator.hpp: ...here.\n\t* include/ext/pb_ds/detail/list_update_policy/\n\tcounter_lu_metadata.hpp: Move..\n\t* include/ext/pb_ds/detail/list_update_policy/\n\tlu_counter_metadata.hpp: ...here.\n\t* include/ext/pb_ds/detail/list_update_policy/\n\tcounter_lu_policy_imp.hpp: Remove.\n\t* include/ext/pb_ds/detail/list_update_policy/\n\tmtf_lu_policy_imp.hpp: Remove.\n\t* include/ext/pb_ds/detail/trie_policy/\n\tstring_trie_e_access_traits_imp.hpp: Move...\n\t* include/ext/pb_ds/detail/trie_policy/\n\tsample_trie_access_traits.hpp: ...here.\n\t* include/ext/pb_ds/detail/trie_policy/\n\tsample_trie_e_access_traits.hpp: Move...\n\t* include/ext/pb_ds/detail/trie_policy/\n\ttrie_string_access_traits_imp.hpp: ...here.\n\t* include/ext/pb_ds/detail/trie_policy/null_node_update_imp.hpp: Remove.\n\t* include/ext/pb_ds/detail/tree_policy/null_node_update_imp.hpp: Remove.\n\t* include/ext/pb_ds/detail/ov_tree_map_/cond_dtor.hpp: Remove.\n\t* include/ext/pb_ds/detail/pat_trie_/pat_trie_base.hpp: New, fold all\n\ttypes found in the following files into pat_trie_base.\n\t* include/ext/pb_ds/detail/pat_trie_/const_child_iterator.hpp: Folded.\n\t* include/ext/pb_ds/detail/pat_trie_/\n\t  cond_dtor_entry_dealtor.hpp: Folded.\n\t* include/ext/pb_ds/detail/pat_trie_/child_iterator.hpp: Folded.\n\t* include/ext/pb_ds/detail/pat_trie_/split_join_branch_bag.hpp: Folded.\n\t* include/ext/pb_ds/detail/pat_trie_/head.hpp: Folded.\n\t* include/ext/pb_ds/detail/pat_trie_/leaf.hpp: Folded.\n\t* include/ext/pb_ds/detail/pat_trie_/node_base.hpp: Folded.\n\t* include/ext/pb_ds/detail/pat_trie_/node_metadata_base.hpp: Folded.\n\t* include/ext/pb_ds/detail/pat_trie_/internal_node.hpp: Folded.\n\t* include/ext/pb_ds/detail/pat_trie_/node_iterators.hpp: Folded.\n\t* include/ext/pb_ds/detail/pat_trie_/point_iterators.hpp: Folded.\n\t* include/ext/pb_ds/detail/pat_trie_/synth_e_access_traits.hpp: Move...\n\t* include/ext/pb_ds/detail/pat_trie_/synth_access_traits.hpp: ...here.\n\t* include/ext/pb_ds/detail/unordered_iterator/\n\tconst_point_iterator.hpp: Move...\n\t* include/ext/pb_ds/detail/unordered_iterator/\n\tpoint_const_iterator.hpp: ...here.\n\n\n\tAdjust for above changes.\n\t* include/ext/pb_ds/detail/resize_policy/sample_size_policy.hpp: Same.\n\t* include/ext/pb_ds/detail/resize_policy/sample_resize_policy.hpp: Same.\n\t* include/ext/pb_ds/detail/resize_policy/\n\t  sample_resize_trigger.hpp: Same.\n\t* include/ext/pb_ds/detail/binomial_heap_base_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binomial_heap_base_/find_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binomial_heap_base_/insert_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binomial_heap_base_/\n\t  binomial_heap_base_.hpp: Same.\n\t* include/ext/pb_ds/detail/binomial_heap_base_/\n\t  constructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binomial_heap_base_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binomial_heap_base_/\n\t  split_join_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/container_base_dispatch.hpp: Same. Adjust\n\t  for template parameter ordering change.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\t  erase_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\t  constructor_destructor_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/cmp_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\t  insert_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/find_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\t  policy_access_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\t  resize_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\t  constructor_destructor_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\t  insert_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/info_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\t  entry_list_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/trace_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\t  find_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\t  debug_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/cc_ht_map_.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/resize_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\t  constructor_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\t  cond_key_dtor_entry_dealtor.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/insert_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\t  debug_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\t  erase_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/size_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\t  iterators_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\t  resize_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\t  standard_policies.hpp: Same.\n\t* include/ext/pb_ds/detail/tree_trace_base.hpp: Same.\n\t* include/ext/pb_ds/detail/unordered_iterator/iterator.hpp: Same.\n\t* include/ext/pb_ds/detail/unordered_iterator/const_iterator.hpp: Same.\n\t* include/ext/pb_ds/detail/unordered_iterator/point_iterator.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/find_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/policy_access_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/r_erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/update_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/insert_join_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/\n\t  constructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/pat_trie_.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/split_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/traits.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/info_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/rotate_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/trace_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/iterators_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/bin_search_tree_/find_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/bin_search_tree_/\n\t  policy_access_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/bin_search_tree_/r_erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/bin_search_tree_/\n\t  constructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/bin_search_tree_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/bin_search_tree_/traits.hpp: Same.\n\t* include/ext/pb_ds/detail/bin_search_tree_/info_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/bin_search_tree_/rotate_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/bin_search_tree_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/bin_search_tree_/bin_search_tree_.hpp: Same.\n\t* include/ext/pb_ds/detail/bin_search_tree_/insert_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/bin_search_tree_/node_iterators.hpp: Same.\n\t* include/ext/pb_ds/detail/bin_search_tree_/point_iterators.hpp: Same.\n\t* include/ext/pb_ds/detail/bin_search_tree_/\n\t  split_join_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/bin_search_tree_/iterators_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_policy/\n\t  sample_update_policy.hpp: Same.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\t  trace_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\t  erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\t  erase_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\t  constructor_destructor_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\t  insert_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/find_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\t  policy_access_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\t  resize_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/gp_ht_map_.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\t  constructor_destructor_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\t  insert_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\t  iterator_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/info_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\t  find_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/trace_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\t  find_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\t  debug_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/resize_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\t  constructor_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/insert_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\t  debug_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\t  erase_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\t  resize_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\t  standard_policies.hpp: Same.\n\t* include/ext/pb_ds/detail/standard_policies.hpp: Same.\n\t* include/ext/pb_ds/detail/types_traits.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/find_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/policy_access_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/const_iterator.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/entry_cmp.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/\n\t  constructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/info_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/trace_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/entry_pred.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/insert_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/binary_heap_.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/resize_policy.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/split_join_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/iterators_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/tree_policy/order_statistics_imp.hpp: Same.\n\t* include/ext/pb_ds/detail/tree_policy/node_metadata_selector.hpp: Same.\n\t* include/ext/pb_ds/detail/tree_policy/\n\t  sample_tree_node_update.hpp: Same.\n\t* include/ext/pb_ds/detail/trie_policy/order_statistics_imp.hpp: Same.\n\t* include/ext/pb_ds/detail/trie_policy/\n\t  sample_trie_node_update.hpp: Same.\n\t* include/ext/pb_ds/detail/trie_policy/trie_policy_base.hpp: Same.\n\t* include/ext/pb_ds/detail/trie_policy/\n\t  prefix_search_node_update_imp.hpp: Same.\n\t* include/ext/pb_ds/detail/trie_policy/node_metadata_selector.hpp: Same.\n\t* include/ext/pb_ds/detail/cond_dealtor.hpp: Same.\n\t* include/ext/pb_ds/detail/priority_queue_base_dispatch.hpp: Same.\n\t  Adjust for template parameter change, fold into\n\t  container_base_dispatch.\n\t* include/ext/pb_ds/detail/pairing_heap_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pairing_heap_/find_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pairing_heap_/insert_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pairing_heap_/\n\t  constructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pairing_heap_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pairing_heap_/pairing_heap_.hpp: Same.\n\t* include/ext/pb_ds/detail/pairing_heap_/split_join_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binomial_heap_/\n\t  constructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binomial_heap_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binomial_heap_/binomial_heap_.hpp: Same.\n\t* include/ext/pb_ds/detail/constructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/type_utils.hpp: Same.\n\t* include/ext/pb_ds/detail/eq_fn/hash_eq_fn.hpp: Same.\n\t* include/ext/pb_ds/detail/eq_fn/eq_by_less.hpp: Same.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\t  policy_access_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\t  left_child_next_sibling_heap_.hpp: Same.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\t  const_iterator.hpp: Same.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\t  insert_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\t  constructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\t  debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\t  node.hpp: Same.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\t  info_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\t  iterators_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/thin_heap_/trace_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/thin_heap_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/thin_heap_/find_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/thin_heap_/thin_heap_.hpp: Same.\n\t* include/ext/pb_ds/detail/thin_heap_/insert_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/thin_heap_/\n\t  constructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/thin_heap_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/thin_heap_/split_join_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/policy_access_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/insert_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/ov_tree_map_.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/\n\t  constructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/node_iterators.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/split_join_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/info_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/traits.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/iterators_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/debug_map_base.hpp: Same.\n\t* include/ext/pb_ds/detail/hash_fn/ranged_probe_fn.hpp: Same.\n\t* include/ext/pb_ds/detail/hash_fn/sample_probe_fn.hpp: Same.\n\t* include/ext/pb_ds/detail/hash_fn/sample_ranged_probe_fn.hpp: Same.\n\t* include/ext/pb_ds/detail/hash_fn/sample_range_hashing.hpp: Same.\n\t* include/ext/pb_ds/detail/hash_fn/probe_fn_base.hpp: Same.\n\t* include/ext/pb_ds/detail/hash_fn/ranged_hash_fn.hpp: Same.\n\t* include/ext/pb_ds/detail/hash_fn/sample_ranged_hash_fn.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/find_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/insert_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/\n\t  constructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/splay_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/node.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/split_join_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/info_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/splay_tree_.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/traits.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_map_/trace_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_map_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_map_/\n\t  entry_metadata_base.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_map_/find_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_map_/lu_map_.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_map_/\n\t  constructor_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_map_/insert_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_map_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_map_/info_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_map_/iterators_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rc_binomial_heap_/trace_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rc_binomial_heap_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rc_binomial_heap_/\n\t  rc_binomial_heap_.hpp: Same.\n\t* include/ext/pb_ds/detail/rc_binomial_heap_/insert_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rc_binomial_heap_/\n\t  constructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rc_binomial_heap_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rc_binomial_heap_/rc.hpp: Same.\n\t* include/ext/pb_ds/detail/rc_binomial_heap_/\n\t  split_join_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rb_tree_map_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rb_tree_map_/find_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rb_tree_map_/insert_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rb_tree_map_/\n\t  constructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rb_tree_map_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rb_tree_map_/rb_tree_.hpp: Same.\n\t* include/ext/pb_ds/detail/rb_tree_map_/node.hpp: Same.\n\t* include/ext/pb_ds/detail/rb_tree_map_/split_join_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rb_tree_map_/info_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rb_tree_map_/traits.hpp: Same.\n\n\n\tDocumentation changes.\n\t* include/ext/pb_ds/*: Add doxygen markup.\n\t* doc/doxygen/user.cfg.in: Add details for extracting comments\n\tfrom pb_ds.\n\t* scripts/run_doxygen: Fixup __gnu_pb_ds::detail.\n\t* scripts/make_graph.py: Move to svg output. Re-format generated tables.\n\n\t* doc/Makefile.am (stamp-html-copy): New rule.\n\t(stamp-html): Use it to copy non-generated files into html docs.\n\t* doc/Makefile.in: Regenerated.\n\n\t* doc/html/ext/pb_ds/sample_trie_e_access_traits.html: Move...\n\t* doc/html/ext/pb_ds/trie_string_access_traits.html: ...here.\n\t* doc/html/ext/pb_ds/string_trie_e_access_traits.html: Move..\n\t* doc/html/ext/pb_ds/sample_trie_access_traits.html: ...here.\n\n\t* doc/html/ext/pb_ds/tree_text_lor_find_timing_test_local.png,\n\thash_random_int_erase_mem_usage_test_local.png,\n\tmultimap_text_insert_mem_usage_test_small_s2p_hash_local.png,\n\ttree_text_insert_timing_test_pat_trie_local.png ,\n\tmultimap_text_insert_mem_usage_test_small_s2p_tree_local.png ,\n\tpriority_queue_text_modify_down_timing_test_local.png,\n\tgp_hash_random_int_subscript_timing_test_find_local.png,\n\ttext_find_timing_test_hash_local.png,\n\tmultimap_text_insert_timing_test_small_s2p_hash_local.png,\n\tmultimap_text_insert_timing_test_small_s2p_tree_local.png,\n\tmultimap_text_insert_mem_usage_test_large_s2p_hash_local.png,\n\tmultimap_text_insert_mem_usage_test_large_s2p_tree_local.png,\n\tmultimap_text_insert_timing_test_large_s2p_hash_local.png,\n\thash_zlob_random_int_find_timing_test_local.png,\n\tmultimap_text_insert_timing_test_large_s2p_tree_local.png,\n\tbinary_priority_queue_random_int_push_timing_test_local.png,\n\tpriority_queue_text_pop_mem_usage_test_local.png,\n\tpriority_queue_text_modify_down_timing_test_pairing_thin_local.png,\n\ttree_split_join_timing_test_local.png,\n\tmultimap_text_find_timing_test_small_s2p_hash_local.png,\n\tccgp_hash_random_int_subscript_timing_test_insert_local.png,\n\tpriority_queue_random_int_push_pop_timing_test_local.png,\n\tmultimap_text_find_timing_test_small_s2p_tree_local.png,\n\tgp_hash_random_int_subscript_timing_test_insert_local.png,\n\tpriority_queue_text_push_timing_test_local.png,\n\tcc_hash_random_int_subscript_timing_test_find_local.png,\n\ttree_text_insert_timing_test_vector_tree_local.png,\n\tmultimap_text_find_timing_test_large_s2p_hash_local.png,\n\tpairing_priority_queue_text_push_timing_test_local.png,\n\ttree_order_statistics_timing_test_local.png,\n\tpriority_queue_text_push_pop_timing_test_local.png,\n\ttext_find_timing_test_tree_like_local.png,\n\tmultimap_text_find_timing_test_large_s2p_tree_local.png,\n\tpriority_queue_text_modify_up_timing_test_pairing_thin_local.png,\n\tcc_hash_random_int_subscript_timing_test_insert_local.png,\n\tpriority_queue_text_modify_up_timing_test_local.png,\n\trandom_int_find_find_timing_test_tree_local.png,\n\tpriority_queue_random_int_push_timing_test_local.png,\n\ttree_text_insert_timing_test_node_tree_local.png,\n\tpairing_priority_queue_text_push_pop_timing_test_local.png,\n\tgp_hash_random_int_find_timing_test_local.png,\n\tcc_hash_random_int_find_timing_test_local.png,\n\tpriority_queue_text_join_timing_test_local.png: Update local pngs.\n\n\n\tTestsuite changes.\n\t* testsuite/ext/pb_ds/regression/tree_no_data_map_rand_debug.cc: New.\n\t* testsuite/ext/pb_ds/regression/tree_data_map_rand_debug.cc: New.\n\t* testsuite/ext/pb_ds/regression/priority_queue_rand_debug.cc: New.\n\t* testsuite/ext/pb_ds/regression/trie_no_data_map_rand_debug.cc: New.\n\t* testsuite/ext/pb_ds/regression/trie_data_map_rand_debug.cc: New.\n\t* testsuite/ext/pb_ds/regression/list_update_no_data_map_rand_debug.cc:\n\tNew.\n\t* testsuite/ext/pb_ds/regression/list_update_data_map_rand_debug.cc:\n\tNew.\n\t* testsuite/ext/pb_ds/regression/hash_no_data_map_rand_debug.cc: New.\n\t* testsuite/ext/pb_ds/regression/hash_data_map_rand_debug.cc: New.\n\n\t* testsuite/ext/pb_ds/regression/list_update_data_map_rand.cc: Fix typo.\n\n\t* testsuite/ext/pb_ds/example/basic_set.cc: Update.\n\t* testsuite/ext/pb_ds/example/ranged_hash.cc: Same.\n\t* testsuite/ext/pb_ds/example/tree_order_statistics.cc: Same.\n\t* testsuite/ext/pb_ds/example/trie_prefix_search.cc: Same.\n\t* testsuite/ext/pb_ds/example/trie_dna.cc: Same.\n\t* testsuite/ext/pb_ds/example/tree_intervals.cc: Same.\n\t* testsuite/ext/pb_ds/example/basic_multimap.cc: Same.\n\t* testsuite/performance/ext/pb_ds/hash_random_int_erase_mem_usage.cc:\n\t  Same.\n\t* testsuite/performance/ext/pb_ds/tree_split_join_timing.cc: Same.\n\t* testsuite/performance/ext/pb_ds/tree_order_statistics_timing.cc: Same.\n\t* testsuite/data/make_graph_test_infos.xml: Same.\n\t* testsuite/util/regression/common_type.hpp: Same.\n\t* testsuite/util/regression/trait/assoc/native_type_trait.hpp: Same.\n\t* testsuite/util/regression/trait/assoc/trait.hpp: Same.\n\t* testsuite/util/regression/trait/assoc/type_trait.hpp: Same.\n\t* testsuite/util/regression/rand/priority_queue/\n\t  rand_regression_test.hpp: Same.\n\t* testsuite/util/regression/rand/priority_queue/\n\t  container_rand_regression_test.tcc: Same.\n\t* testsuite/util/regression/rand/assoc/rand_regression_test.hpp: Same.\n\t* testsuite/util/regression/rand/assoc/container_rand_regression_test.h\n\t* testsuite/util/regression/rand/assoc/\n\t  container_rand_regression_test.tcc: Same.\n\t* testsuite/util/native_type/native_priority_queue.hpp: Same.\n\t* testsuite/util/native_type/native_multimap.hpp: Same.\n\t* testsuite/util/native_type/native_hash_multimap.hpp: Same.\n\t* testsuite/util/native_type/native_set.hpp: Same.\n\t* testsuite/util/native_type/native_map.hpp: Same.\n\t* testsuite/util/native_type/native_hash_set.hpp: Same.\n\t* testsuite/util/native_type/native_hash_map.hpp: Same.\n\t* testsuite/util/testsuite_containers.h\n\t* testsuite/util/common_type/priority_queue/common_type.hpp: Same.\n\t* testsuite/util/common_type/assoc/common_type.hpp: Same.\n\t* testsuite/util/common_type/assoc/string_form.hpp: Same.\n\t* testsuite/util/common_type/assoc/template_policy.hpp: Same.\n\t* testsuite/util/common_type/assoc/detail/\n\t  trigger_policy_string_form.hpp: Same.\n\t* testsuite/util/common_type/assoc/detail/ds_string_form.hpp: Same.\n\t* testsuite/util/common_type/assoc/detail/\n\t  size_policy_string_form.hpp: Same.\n\t* testsuite/util/common_type/assoc/detail/\n\t  probe_fn_string_form.hpp: Same.\n\t* testsuite/util/common_type/assoc/detail/\n\t  tree_supports_order_statistics.hpp: Same.\n\t* testsuite/util/common_type/assoc/detail/\n\t  trie_supports_prefix_search.hpp: Same.\n\t* testsuite/util/common_type/assoc/detail/\n\t  list_update_policy_string_form.hpp: Same.\n\t* testsuite/util/common_type/assoc/detail/\n\t  trie_supports_order_statistics.hpp: Same.\n\t* testsuite/util/common_type/assoc/native_set.hpp: Same.\n\t* testsuite/util/performance/assoc/timing/common_type.hpp: Same.\n\t* testsuite/util/performance/assoc/timing/multimap_find_test.hpp: Same.\n\t* testsuite/util/performance/assoc/multimap_common_type.hpp: Same.\n\nFrom-SVN: r174100", "tree": {"sha": "3a3e2385c96d7603cc7578228f954bd4d03d73a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a3e2385c96d7603cc7578228f954bd4d03d73a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a345e45d144c0e83aed85b6d29f64af3d21b4453", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a345e45d144c0e83aed85b6d29f64af3d21b4453", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a345e45d144c0e83aed85b6d29f64af3d21b4453", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a345e45d144c0e83aed85b6d29f64af3d21b4453/comments", "author": null, "committer": null, "parents": [{"sha": "ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c"}], "stats": {"total": 19408, "additions": 9230, "deletions": 10178}, "files": [{"sha": "9c1cc0396e4dd21546a6136bafa3e161351e5838", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 509, "deletions": 0, "changes": 509, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -1,3 +1,512 @@\n+2011-05-23  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/37144\n+\tPR libstdc++/28457\n+\tInterface changes for ext/pb_ds.\n+\tPB_DS_BASE_C_DEC to unique PB_DS_*_BASE macros.\n+\t* include/ext/pb_ds/assoc_container.hpp (container_base): Remove.\n+\t(basic_hash_table, basic_branch, list_update): Derive from\n+\tcontainer_base_dispatch.\n+\t* include/ext/pb_ds/list_update_policy.hpp (null_lu_metadata): Remove.\n+\t(move_to_front_lu_policy): To lu_move_to_front_policy.\n+\t(counter_lu_policy): To lu_counter_policy.\n+\t* include/ext/pb_ds/tree_policy.hpp (null_tree_node_update): Remove.\n+\t* include/ext/pb_ds/tag_and_trait.hpp (container_base_dispatch): Adjust\n+\ttemplate parameters, declare here.\n+\t(null_mapped_type) Remove.\n+\t(null_type): Just use this for template tricks everywhere.\n+\t* include/ext/pb_ds/hash_policy.hpp (null_hash_fn, null_probe_fn):\n+\tRemove.\n+\t* include/ext/pb_ds/trie_policy.hpp (null_trie_node_update): Remove.\n+\t(string_trie_e_access_traits): To trie_string_access_traits.\n+\t* include/ext/pb_ds/priority_queue.hpp: Use container_base_dispatch.\n+\n+\tFile changes.\n+\t* include/Makefile.am (pb_headers): Removed and changed file names.\n+\t* include/Makefile.in: Regenerated.\n+\t* include/ext/pb_ds/detail/basic_types.hpp: Remove.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/\n+\t  cond_dtor_entry_dealtor.hpp: Remove.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/\n+\t  cond_key_dtor_entry_dealtor.hpp: Remove.\n+\t* include/ext/pb_ds/detail/binary_heap_/const_point_iterator.hpp: Move..\n+\t* include/ext/pb_ds/detail/binary_heap_/\n+\t  point_const_iterator.hpp: ..here.\n+\t* include/ext/pb_ds/detail/basic_tree_policy: Move to...\n+\t* include/ext/pb_ds/detail/branch_policy: This.\n+\t* include/ext/pb_ds/detail/branch_policy/\n+\t  basic_tree_policy_base.hpp: Move...\n+\t* include/ext/pb_ds/detail/branch_policy/branch_policy.hpp: ...here.\n+\t* include/ext/pb_ds/detail/branch_policy/null_node_metadata.hpp: Add.\n+\t* include/ext/pb_ds/detail/branch_policy/traits.hpp: Add.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\tnull_metadata.hpp: Remove.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\tconst_point_iterator.hpp: Move...\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\tpoint_const_iterator.hpp: ...here.\n+\t* include/ext/pb_ds/detail/list_update_policy/\n+\tcounter_lu_metadata.hpp: Move..\n+\t* include/ext/pb_ds/detail/list_update_policy/\n+\tlu_counter_metadata.hpp: ...here.\n+\t* include/ext/pb_ds/detail/list_update_policy/\n+\tcounter_lu_policy_imp.hpp: Remove.\n+\t* include/ext/pb_ds/detail/list_update_policy/\n+\tmtf_lu_policy_imp.hpp: Remove.\n+\t* include/ext/pb_ds/detail/trie_policy/\n+\tstring_trie_e_access_traits_imp.hpp: Move...\n+\t* include/ext/pb_ds/detail/trie_policy/\n+\tsample_trie_access_traits.hpp: ...here.\n+\t* include/ext/pb_ds/detail/trie_policy/\n+\tsample_trie_e_access_traits.hpp: Move...\n+\t* include/ext/pb_ds/detail/trie_policy/\n+\ttrie_string_access_traits_imp.hpp: ...here.\n+\t* include/ext/pb_ds/detail/trie_policy/null_node_update_imp.hpp: Remove.\n+\t* include/ext/pb_ds/detail/tree_policy/null_node_update_imp.hpp: Remove.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/cond_dtor.hpp: Remove.\n+\t* include/ext/pb_ds/detail/pat_trie_/pat_trie_base.hpp: New, fold all\n+\ttypes found in the following files into pat_trie_base.\n+\t* include/ext/pb_ds/detail/pat_trie_/const_child_iterator.hpp: Folded.\n+\t* include/ext/pb_ds/detail/pat_trie_/\n+\t  cond_dtor_entry_dealtor.hpp: Folded.\n+\t* include/ext/pb_ds/detail/pat_trie_/child_iterator.hpp: Folded.\n+\t* include/ext/pb_ds/detail/pat_trie_/split_join_branch_bag.hpp: Folded.\n+\t* include/ext/pb_ds/detail/pat_trie_/head.hpp: Folded.\n+\t* include/ext/pb_ds/detail/pat_trie_/leaf.hpp: Folded.\n+\t* include/ext/pb_ds/detail/pat_trie_/node_base.hpp: Folded.\n+\t* include/ext/pb_ds/detail/pat_trie_/node_metadata_base.hpp: Folded.\n+\t* include/ext/pb_ds/detail/pat_trie_/internal_node.hpp: Folded.\n+\t* include/ext/pb_ds/detail/pat_trie_/node_iterators.hpp: Folded.\n+\t* include/ext/pb_ds/detail/pat_trie_/point_iterators.hpp: Folded.\n+\t* include/ext/pb_ds/detail/pat_trie_/synth_e_access_traits.hpp: Move...\n+\t* include/ext/pb_ds/detail/pat_trie_/synth_access_traits.hpp: ...here.\n+\t* include/ext/pb_ds/detail/unordered_iterator/\n+\tconst_point_iterator.hpp: Move...\n+\t* include/ext/pb_ds/detail/unordered_iterator/\n+\tpoint_const_iterator.hpp: ...here.\n+\n+\n+\tAdjust for above changes.\n+\t* include/ext/pb_ds/detail/resize_policy/sample_size_policy.hpp: Same.\n+\t* include/ext/pb_ds/detail/resize_policy/sample_resize_policy.hpp: Same.\n+\t* include/ext/pb_ds/detail/resize_policy/\n+\t  sample_resize_trigger.hpp: Same.\n+\t* include/ext/pb_ds/detail/binomial_heap_base_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binomial_heap_base_/find_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binomial_heap_base_/insert_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binomial_heap_base_/\n+\t  binomial_heap_base_.hpp: Same.\n+\t* include/ext/pb_ds/detail/binomial_heap_base_/\n+\t  constructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binomial_heap_base_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binomial_heap_base_/\n+\t  split_join_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/container_base_dispatch.hpp: Same. Adjust\n+\t  for template parameter ordering change.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\t  erase_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\t  constructor_destructor_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/cmp_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\t  insert_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/find_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\t  policy_access_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\t  resize_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\t  constructor_destructor_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\t  insert_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/info_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\t  entry_list_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/trace_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\t  find_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\t  debug_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/cc_ht_map_.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/resize_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\t  constructor_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\t  cond_key_dtor_entry_dealtor.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/insert_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\t  debug_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\t  erase_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/size_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\t  iterators_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\t  resize_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\t  standard_policies.hpp: Same.\n+\t* include/ext/pb_ds/detail/tree_trace_base.hpp: Same.\n+\t* include/ext/pb_ds/detail/unordered_iterator/iterator.hpp: Same.\n+\t* include/ext/pb_ds/detail/unordered_iterator/const_iterator.hpp: Same.\n+\t* include/ext/pb_ds/detail/unordered_iterator/point_iterator.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/find_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/policy_access_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/r_erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/update_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/insert_join_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/\n+\t  constructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/pat_trie_.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/split_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/traits.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/info_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/rotate_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/trace_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/iterators_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/find_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/\n+\t  policy_access_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/r_erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/\n+\t  constructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/traits.hpp: Same.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/info_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/rotate_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/bin_search_tree_.hpp: Same.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/insert_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/node_iterators.hpp: Same.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/point_iterators.hpp: Same.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/\n+\t  split_join_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/iterators_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_policy/\n+\t  sample_update_policy.hpp: Same.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\t  trace_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\t  erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\t  erase_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\t  constructor_destructor_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\t  insert_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/find_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\t  policy_access_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\t  resize_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/gp_ht_map_.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\t  constructor_destructor_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\t  insert_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\t  iterator_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/info_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\t  find_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/trace_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\t  find_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\t  debug_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/resize_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\t  constructor_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/insert_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\t  debug_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\t  erase_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\t  resize_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\t  standard_policies.hpp: Same.\n+\t* include/ext/pb_ds/detail/standard_policies.hpp: Same.\n+\t* include/ext/pb_ds/detail/types_traits.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/find_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/policy_access_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/const_iterator.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/entry_cmp.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/\n+\t  constructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/info_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/trace_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/entry_pred.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/insert_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/binary_heap_.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/resize_policy.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/split_join_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/iterators_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/tree_policy/order_statistics_imp.hpp: Same.\n+\t* include/ext/pb_ds/detail/tree_policy/node_metadata_selector.hpp: Same.\n+\t* include/ext/pb_ds/detail/tree_policy/\n+\t  sample_tree_node_update.hpp: Same.\n+\t* include/ext/pb_ds/detail/trie_policy/order_statistics_imp.hpp: Same.\n+\t* include/ext/pb_ds/detail/trie_policy/\n+\t  sample_trie_node_update.hpp: Same.\n+\t* include/ext/pb_ds/detail/trie_policy/trie_policy_base.hpp: Same.\n+\t* include/ext/pb_ds/detail/trie_policy/\n+\t  prefix_search_node_update_imp.hpp: Same.\n+\t* include/ext/pb_ds/detail/trie_policy/node_metadata_selector.hpp: Same.\n+\t* include/ext/pb_ds/detail/cond_dealtor.hpp: Same.\n+\t* include/ext/pb_ds/detail/priority_queue_base_dispatch.hpp: Same.\n+\t  Adjust for template parameter change, fold into\n+\t  container_base_dispatch.\n+\t* include/ext/pb_ds/detail/pairing_heap_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pairing_heap_/find_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pairing_heap_/insert_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pairing_heap_/\n+\t  constructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pairing_heap_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pairing_heap_/pairing_heap_.hpp: Same.\n+\t* include/ext/pb_ds/detail/pairing_heap_/split_join_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binomial_heap_/\n+\t  constructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binomial_heap_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binomial_heap_/binomial_heap_.hpp: Same.\n+\t* include/ext/pb_ds/detail/constructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/type_utils.hpp: Same.\n+\t* include/ext/pb_ds/detail/eq_fn/hash_eq_fn.hpp: Same.\n+\t* include/ext/pb_ds/detail/eq_fn/eq_by_less.hpp: Same.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\t  policy_access_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\t  left_child_next_sibling_heap_.hpp: Same.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\t  const_iterator.hpp: Same.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\t  insert_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\t  constructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\t  debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\t  node.hpp: Same.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\t  info_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\t  iterators_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/thin_heap_/trace_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/thin_heap_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/thin_heap_/find_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/thin_heap_/thin_heap_.hpp: Same.\n+\t* include/ext/pb_ds/detail/thin_heap_/insert_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/thin_heap_/\n+\t  constructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/thin_heap_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/thin_heap_/split_join_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/policy_access_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/insert_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/ov_tree_map_.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/\n+\t  constructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/node_iterators.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/split_join_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/info_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/traits.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/iterators_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/debug_map_base.hpp: Same.\n+\t* include/ext/pb_ds/detail/hash_fn/ranged_probe_fn.hpp: Same.\n+\t* include/ext/pb_ds/detail/hash_fn/sample_probe_fn.hpp: Same.\n+\t* include/ext/pb_ds/detail/hash_fn/sample_ranged_probe_fn.hpp: Same.\n+\t* include/ext/pb_ds/detail/hash_fn/sample_range_hashing.hpp: Same.\n+\t* include/ext/pb_ds/detail/hash_fn/probe_fn_base.hpp: Same.\n+\t* include/ext/pb_ds/detail/hash_fn/ranged_hash_fn.hpp: Same.\n+\t* include/ext/pb_ds/detail/hash_fn/sample_ranged_hash_fn.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/find_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/insert_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/\n+\t  constructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/splay_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/node.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/split_join_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/info_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/splay_tree_.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/traits.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_map_/trace_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_map_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_map_/\n+\t  entry_metadata_base.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_map_/find_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_map_/lu_map_.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_map_/\n+\t  constructor_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_map_/insert_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_map_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_map_/info_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_map_/iterators_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rc_binomial_heap_/trace_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rc_binomial_heap_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rc_binomial_heap_/\n+\t  rc_binomial_heap_.hpp: Same.\n+\t* include/ext/pb_ds/detail/rc_binomial_heap_/insert_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rc_binomial_heap_/\n+\t  constructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rc_binomial_heap_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rc_binomial_heap_/rc.hpp: Same.\n+\t* include/ext/pb_ds/detail/rc_binomial_heap_/\n+\t  split_join_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/find_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/insert_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/\n+\t  constructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/rb_tree_.hpp: Same.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/node.hpp: Same.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/split_join_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/info_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/traits.hpp: Same.\n+\n+\n+\tDocumentation changes.\n+\t* include/ext/pb_ds/*: Add doxygen markup.\n+\t* doc/doxygen/user.cfg.in: Add details for extracting comments\n+\tfrom pb_ds.\n+\t* scripts/run_doxygen: Fixup __gnu_pb_ds::detail.\n+\t* scripts/make_graph.py: Move to svg output. Re-format generated tables.\n+\n+\t* doc/Makefile.am (stamp-html-copy): New rule.\n+\t(stamp-html): Use it to copy non-generated files into html docs.\n+\t* doc/Makefile.in: Regenerated.\n+\n+\t* doc/html/ext/pb_ds/sample_trie_e_access_traits.html: Move...\n+\t* doc/html/ext/pb_ds/trie_string_access_traits.html: ...here.\n+\t* doc/html/ext/pb_ds/string_trie_e_access_traits.html: Move..\n+\t* doc/html/ext/pb_ds/sample_trie_access_traits.html: ...here.\n+\n+\t* doc/html/ext/pb_ds/tree_text_lor_find_timing_test_local.png,\n+\thash_random_int_erase_mem_usage_test_local.png,\n+\tmultimap_text_insert_mem_usage_test_small_s2p_hash_local.png,\n+\ttree_text_insert_timing_test_pat_trie_local.png ,\n+\tmultimap_text_insert_mem_usage_test_small_s2p_tree_local.png ,\n+\tpriority_queue_text_modify_down_timing_test_local.png,\n+\tgp_hash_random_int_subscript_timing_test_find_local.png,\n+\ttext_find_timing_test_hash_local.png,\n+\tmultimap_text_insert_timing_test_small_s2p_hash_local.png,\n+\tmultimap_text_insert_timing_test_small_s2p_tree_local.png,\n+\tmultimap_text_insert_mem_usage_test_large_s2p_hash_local.png,\n+\tmultimap_text_insert_mem_usage_test_large_s2p_tree_local.png,\n+\tmultimap_text_insert_timing_test_large_s2p_hash_local.png,\n+\thash_zlob_random_int_find_timing_test_local.png,\n+\tmultimap_text_insert_timing_test_large_s2p_tree_local.png,\n+\tbinary_priority_queue_random_int_push_timing_test_local.png,\n+\tpriority_queue_text_pop_mem_usage_test_local.png,\n+\tpriority_queue_text_modify_down_timing_test_pairing_thin_local.png,\n+\ttree_split_join_timing_test_local.png,\n+\tmultimap_text_find_timing_test_small_s2p_hash_local.png,\n+\tccgp_hash_random_int_subscript_timing_test_insert_local.png,\n+\tpriority_queue_random_int_push_pop_timing_test_local.png,\n+\tmultimap_text_find_timing_test_small_s2p_tree_local.png,\n+\tgp_hash_random_int_subscript_timing_test_insert_local.png,\n+\tpriority_queue_text_push_timing_test_local.png,\n+\tcc_hash_random_int_subscript_timing_test_find_local.png,\n+\ttree_text_insert_timing_test_vector_tree_local.png,\n+\tmultimap_text_find_timing_test_large_s2p_hash_local.png,\n+\tpairing_priority_queue_text_push_timing_test_local.png,\n+\ttree_order_statistics_timing_test_local.png,\n+\tpriority_queue_text_push_pop_timing_test_local.png,\n+\ttext_find_timing_test_tree_like_local.png,\n+\tmultimap_text_find_timing_test_large_s2p_tree_local.png,\n+\tpriority_queue_text_modify_up_timing_test_pairing_thin_local.png,\n+\tcc_hash_random_int_subscript_timing_test_insert_local.png,\n+\tpriority_queue_text_modify_up_timing_test_local.png,\n+\trandom_int_find_find_timing_test_tree_local.png,\n+\tpriority_queue_random_int_push_timing_test_local.png,\n+\ttree_text_insert_timing_test_node_tree_local.png,\n+\tpairing_priority_queue_text_push_pop_timing_test_local.png,\n+\tgp_hash_random_int_find_timing_test_local.png,\n+\tcc_hash_random_int_find_timing_test_local.png,\n+\tpriority_queue_text_join_timing_test_local.png: Update local pngs.\n+\n+\n+\tTestsuite changes.\n+\t* testsuite/ext/pb_ds/regression/tree_no_data_map_rand_debug.cc: New.\n+\t* testsuite/ext/pb_ds/regression/tree_data_map_rand_debug.cc: New.\n+\t* testsuite/ext/pb_ds/regression/priority_queue_rand_debug.cc: New.\n+\t* testsuite/ext/pb_ds/regression/trie_no_data_map_rand_debug.cc: New.\n+\t* testsuite/ext/pb_ds/regression/trie_data_map_rand_debug.cc: New.\n+\t* testsuite/ext/pb_ds/regression/list_update_no_data_map_rand_debug.cc:\n+\tNew.\n+\t* testsuite/ext/pb_ds/regression/list_update_data_map_rand_debug.cc:\n+\tNew.\n+\t* testsuite/ext/pb_ds/regression/hash_no_data_map_rand_debug.cc: New.\n+\t* testsuite/ext/pb_ds/regression/hash_data_map_rand_debug.cc: New.\n+\n+\t* testsuite/ext/pb_ds/regression/list_update_data_map_rand.cc: Fix typo.\n+\n+\t* testsuite/ext/pb_ds/example/basic_set.cc: Update.\n+\t* testsuite/ext/pb_ds/example/ranged_hash.cc: Same.\n+\t* testsuite/ext/pb_ds/example/tree_order_statistics.cc: Same.\n+\t* testsuite/ext/pb_ds/example/trie_prefix_search.cc: Same.\n+\t* testsuite/ext/pb_ds/example/trie_dna.cc: Same.\n+\t* testsuite/ext/pb_ds/example/tree_intervals.cc: Same.\n+\t* testsuite/ext/pb_ds/example/basic_multimap.cc: Same.\n+\t* testsuite/performance/ext/pb_ds/hash_random_int_erase_mem_usage.cc:\n+\t  Same.\n+\t* testsuite/performance/ext/pb_ds/tree_split_join_timing.cc: Same.\n+\t* testsuite/performance/ext/pb_ds/tree_order_statistics_timing.cc: Same.\n+\t* testsuite/data/make_graph_test_infos.xml: Same.\n+\t* testsuite/util/regression/common_type.hpp: Same.\n+\t* testsuite/util/regression/trait/assoc/native_type_trait.hpp: Same.\n+\t* testsuite/util/regression/trait/assoc/trait.hpp: Same.\n+\t* testsuite/util/regression/trait/assoc/type_trait.hpp: Same.\n+\t* testsuite/util/regression/rand/priority_queue/\n+\t  rand_regression_test.hpp: Same.\n+\t* testsuite/util/regression/rand/priority_queue/\n+\t  container_rand_regression_test.tcc: Same.\n+\t* testsuite/util/regression/rand/assoc/rand_regression_test.hpp: Same.\n+\t* testsuite/util/regression/rand/assoc/container_rand_regression_test.h\n+\t* testsuite/util/regression/rand/assoc/\n+\t  container_rand_regression_test.tcc: Same.\n+\t* testsuite/util/native_type/native_priority_queue.hpp: Same.\n+\t* testsuite/util/native_type/native_multimap.hpp: Same.\n+\t* testsuite/util/native_type/native_hash_multimap.hpp: Same.\n+\t* testsuite/util/native_type/native_set.hpp: Same.\n+\t* testsuite/util/native_type/native_map.hpp: Same.\n+\t* testsuite/util/native_type/native_hash_set.hpp: Same.\n+\t* testsuite/util/native_type/native_hash_map.hpp: Same.\n+\t* testsuite/util/testsuite_containers.h\n+\t* testsuite/util/common_type/priority_queue/common_type.hpp: Same.\n+\t* testsuite/util/common_type/assoc/common_type.hpp: Same.\n+\t* testsuite/util/common_type/assoc/string_form.hpp: Same.\n+\t* testsuite/util/common_type/assoc/template_policy.hpp: Same.\n+\t* testsuite/util/common_type/assoc/detail/\n+\t  trigger_policy_string_form.hpp: Same.\n+\t* testsuite/util/common_type/assoc/detail/ds_string_form.hpp: Same.\n+\t* testsuite/util/common_type/assoc/detail/\n+\t  size_policy_string_form.hpp: Same.\n+\t* testsuite/util/common_type/assoc/detail/\n+\t  probe_fn_string_form.hpp: Same.\n+\t* testsuite/util/common_type/assoc/detail/\n+\t  tree_supports_order_statistics.hpp: Same.\n+\t* testsuite/util/common_type/assoc/detail/\n+\t  trie_supports_prefix_search.hpp: Same.\n+\t* testsuite/util/common_type/assoc/detail/\n+\t  list_update_policy_string_form.hpp: Same.\n+\t* testsuite/util/common_type/assoc/detail/\n+\t  trie_supports_order_statistics.hpp: Same.\n+\t* testsuite/util/common_type/assoc/native_set.hpp: Same.\n+\t* testsuite/util/performance/assoc/timing/common_type.hpp: Same.\n+\t* testsuite/util/performance/assoc/timing/multimap_find_test.hpp: Same.\n+\t* testsuite/util/performance/assoc/multimap_common_type.hpp: Same.\n+\n 2011-05-23  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/streambuf_iterator.h: Use noexcept per the FDIS."}, {"sha": "7e75cc71d21a9ea00c94765016de738737b04a8f", "filename": "libstdc++-v3/doc/Makefile.am", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2FMakefile.am?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -136,9 +136,17 @@ doc-install-xml: doc-xml\n \n # HTML\n htmldir=\"$(DESTDIR)@docdir@\"\n-stamp-html: stamp-html-docbook stamp-html-doxygen\n+stamp-html: stamp-html-copy stamp-html-doxygen\n \t$(STAMP) stamp-html\n \n+copydir=${docbook_outdir}/html/manual/ext/\n+stamp-html-copy: stamp-html-docbook\n+\tcp -r ${top_srcdir}/doc/html/ext ${docbook_outdir}/html/manual/ext\n+\tcd ${docbook_outdir}/html/manual/ext\n+\trm -rf ${docbook_outdir}/html/manual/ext/.svn \n+\trm -rf ${docbook_outdir}/html/manual/ext/pb_ds/.svn\n+\t$(STAMP) stamp-html-copy\n+\n doc-html: stamp-html\n \n doc-install-html: doc-html"}, {"sha": "8247b60a91aa2e2250dccfb96f622717c7e377f3", "filename": "libstdc++-v3/doc/Makefile.in", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2FMakefile.in?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -324,6 +324,7 @@ AM_CPPFLAGS = $(GLIBCXX_INCLUDES)\n \n # XML\n xmldir = \"$(DESTDIR)@docdir@\"\n+copydir = ${docbook_outdir}/html/manual/ext/\n \n # EPUB\n # Assumes ruby installed\n@@ -649,8 +650,14 @@ doc-install-xml: doc-xml\n \ttest -z ${xmldir} || $(mkinstalldirs) ${xmldir}\n \t$(INSTALL_DATA) ${manual_xml} ${xmldir}\n \t$(INSTALL_DATA)\t${api_xml} ${xmldir}\n-stamp-html: stamp-html-docbook stamp-html-doxygen\n+stamp-html: stamp-html-copy stamp-html-doxygen\n \t$(STAMP) stamp-html\n+stamp-html-copy: stamp-html-docbook\n+\tcp -r ${top_srcdir}/doc/html/ext ${docbook_outdir}/html/manual/ext\n+\tcd ${docbook_outdir}/html/manual/ext\n+\trm -rf ${docbook_outdir}/html/manual/ext/.svn \n+\trm -rf ${docbook_outdir}/html/manual/ext/pb_ds/.svn\n+\t$(STAMP) stamp-html-copy\n \n doc-html: stamp-html\n "}, {"sha": "6332dc199090cc68e14f1b10af3774c864f780f3", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 292, "deletions": 207, "changes": 499, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -1,4 +1,4 @@\n-# Doxyfile 1.7.2\n+# Doxyfile 1.7.4\n \n # This file describes the settings to be used by the documentation system\n # doxygen (www.doxygen.org) for a project.\n@@ -33,6 +33,19 @@ PROJECT_NAME           = libstdc++\n \n PROJECT_NUMBER         =\n \n+# Using the PROJECT_BRIEF tag one can provide an optional one line description\n+# for a project that appears at the top of each page and should give viewer\n+# a quick idea about the purpose of the project. Keep the description short.\n+\n+PROJECT_BRIEF          =\n+\n+# With the PROJECT_LOGO tag one can specify an logo or icon that is\n+# included in the documentation. The maximum height of the logo should not\n+# exceed 55 pixels and the maximum width should not exceed 200 pixels.\n+# Doxygen will copy the logo to the output directory.\n+\n+PROJECT_LOGO           =\n+\n # The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute)\n # base path where the generated documentation will be put.\n # If a relative path is entered, it will be relative to the location\n@@ -57,7 +70,7 @@ CREATE_SUBDIRS         = NO\n # Croatian, Czech, Danish, Dutch, Esperanto, Farsi, Finnish, French, German,\n # Greek, Hungarian, Italian, Japanese, Japanese-en (Japanese with English\n # messages), Korean, Korean-en, Lithuanian, Norwegian, Macedonian, Persian,\n-# Polish, Portuguese, Romanian, Russian, Serbian, Serbian-Cyrilic, Slovak,\n+# Polish, Portuguese, Romanian, Russian, Serbian, Serbian-Cyrillic, Slovak,\n # Slovene, Spanish, Swedish, Ukrainian, and Vietnamese.\n \n OUTPUT_LANGUAGE        = English\n@@ -179,10 +192,9 @@ TAB_SIZE               = 4\n # will result in a user-defined paragraph with heading \"Side Effects:\".\n # You can put \\n's in the value part of an alias to insert newlines.\n \n-ALIASES = doctodo=\"@todo\\nNeeds documentation! See http://gcc.gnu.org/onlinedocs/libstdc++/manual/documentation_style.html\"\n-\n-ALIASES += headername{1}=\"Instead, include <\\1>.\"\n-ALIASES += headername{2}=\"Instead, include <\\1> or <\\2>.\"\n+ALIASES                = \"doctodo=@todo\\nNeeds documentation! See http://gcc.gnu.org/onlinedocs/libstdc++/manual/documentation_style.html\" \\\n+\t\t\t \"headername{1}=Instead, include <\\1>.\" \\\n+\t\t\t \"headername{2}=Instead, include <\\1> or <\\2>.\"\n \n # Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C\n # sources only. Doxygen will then generate output that is more tailored for C.\n@@ -266,6 +278,13 @@ DISTRIBUTE_GROUP_DOC   = YES\n \n SUBGROUPING            = YES\n \n+# When the INLINE_GROUPED_CLASSES tag is set to YES, classes, structs and\n+# unions are shown inside the group in which they are included (e.g. using\n+# @ingroup) instead of on a separate page (for HTML and Man pages) or\n+# section (for LaTeX and RTF).\n+\n+INLINE_GROUPED_CLASSES = NO\n+\n # When TYPEDEF_HIDES_STRUCT is enabled, a typedef of a struct, union, or enum\n # is documented as struct, union, or enum with the name of the typedef. So\n # typedef struct TypeS {} TypeT, will appear in the documentation as a struct\n@@ -282,7 +301,7 @@ TYPEDEF_HIDES_STRUCT   = NO\n # For small to medium size projects (<1000 input files) the default value is\n # probably good enough. For larger projects a too small cache size can cause\n # doxygen to be busy swapping symbols to and from disk most of the time\n-# causing a significant performance penality.\n+# causing a significant performance penalty.\n # If the system has enough physical memory increasing the cache will improve the\n # performance by keeping more symbols in memory. Note that the value works on\n # a logarithmic scale so increasing the size by one will roughly double the\n@@ -441,6 +460,15 @@ SORT_GROUP_NAMES       = YES\n \n SORT_BY_SCOPE_NAME     = YES\n \n+# If the STRICT_PROTO_MATCHING option is enabled and doxygen fails to\n+# do proper type resolution of all parameters of a function it will reject a\n+# match between the prototype and the implementation of a member function even\n+# if there is only one candidate or it is obvious which candidate to choose\n+# by doing a simple string match. By disabling STRICT_PROTO_MATCHING doxygen\n+# will still accept a match between prototype and implementation in such cases.\n+\n+STRICT_PROTO_MATCHING  = NO\n+\n # The GENERATE_TODOLIST tag can be used to enable (YES) or\n # disable (NO) the todo list. This list is created by putting \\todo\n # commands in the documentation.\n@@ -585,142 +613,165 @@ WARN_LOGFILE           =\n # with spaces.\n \n INPUT                  = @srcdir@/doc/doxygen/doxygroups.cc \\\n-                         @srcdir@/libsupc++/cxxabi.h \\\n-                         @srcdir@/libsupc++/exception \\\n-                         @srcdir@/libsupc++/initializer_list \\\n-                         @srcdir@/libsupc++/new \\\n-                         @srcdir@/libsupc++/typeinfo \\\n-                         include/algorithm \\\n-                         include/array \\\n-                         include/atomic \\\n-                         include/bitset \\\n-                         include/chrono \\\n-                         include/complex \\\n-                         include/condition_variable \\\n-                         include/deque \\\n-                         include/forward_list \\\n-                         include/fstream \\\n-                         include/functional \\\n-                         include/future \\\n-                         include/iomanip \\\n-                         include/ios \\\n-                         include/iosfwd \\\n-                         include/iostream \\\n-                         include/istream \\\n-                         include/iterator \\\n-                         include/limits \\\n-                         include/list \\\n-                         include/locale \\\n-                         include/map \\\n-                         include/memory \\\n-                         include/mutex \\\n-                         include/numeric \\\n-                         include/ostream \\\n-                         include/queue \\\n-                         include/random \\\n-                         include/ratio \\\n-                         include/regex \\\n-                         include/set \\\n-                         include/sstream \\\n-                         include/stack \\\n-                         include/stdexcept \\\n-                         include/streambuf \\\n-                         include/string \\\n-                         include/system_error \\\n-                         include/thread \\\n-                         include/tuple \\\n-                         include/typeindex \\\n-                         include/type_traits \\\n-                         include/unordered_map \\\n-                         include/unordered_set \\\n-                         include/utility \\\n-                         include/valarray \\\n-                         include/vector \\\n-                         include/cassert \\\n-                         include/ccomplex \\\n-                         include/cctype \\\n-                         include/cerrno \\\n-                         include/cfenv \\\n-                         include/cfloat \\\n-                         include/cinttypes \\\n-                         include/ciso646 \\\n-                         include/climits \\\n-                         include/clocale \\\n-                         include/cmath \\\n-                         include/csetjmp \\\n-                         include/csignal \\\n-                         include/cstdarg \\\n-                         include/cstdbool \\\n-                         include/cstddef \\\n-                         include/cstdint \\\n-                         include/cstdio \\\n-                         include/cstdlib \\\n-                         include/cstring \\\n-                         include/ctgmath \\\n-                         include/ctime \\\n-                         include/cwchar \\\n-                         include/cwctype \\\n-                         include/backward/hash_map \\\n-                         include/backward/hash_set \\\n-                         include/backward/strstream \\\n-                         include/debug/bitset \\\n-                         include/debug/deque \\\n-                         include/debug/forward_list \\\n-                         include/debug/list \\\n-                         include/debug/map \\\n-                         include/debug/set \\\n-                         include/debug/string \\\n-                         include/debug/unordered_map \\\n-                         include/debug/unordered_set \\\n-                         include/debug/vector \\\n-                         include/profile/bitset \\\n-                         include/profile/deque \\\n-                         include/profile/forward_list \\\n-                         include/profile/list \\\n-                         include/profile/map \\\n-                         include/profile/set \\\n-                         include/profile/unordered_map \\\n-                         include/profile/unordered_set \\\n-                         include/profile/vector \\\n-                         include/ext/algorithm \\\n-                         include/ext/functional \\\n-                         include/ext/iterator \\\n-                         include/ext/memory \\\n-                         include/ext/numeric \\\n-                         include/ext/rb_tree \\\n-                         include/ext/rope \\\n-                         include/ext/slist \\\n-                         include/parallel/algorithm \\\n-                         include/parallel/numeric \\\n-                         include/tr1/ccomplex \\\n-                         include/tr1/cctype \\\n-                         include/tr1/cfenv \\\n-                         include/tr1/cfloat \\\n-                         include/tr1/cinttypes \\\n-                         include/tr1/climits \\\n-                         include/tr1/cmath \\\n-                         include/tr1/complex \\\n-                         include/tr1/cstdarg \\\n-                         include/tr1/cstdbool \\\n-                         include/tr1/cstdint \\\n-                         include/tr1/cstdio \\\n-                         include/tr1/cstdlib \\\n-                         include/tr1/ctgmath \\\n-                         include/tr1/ctime \\\n-                         include/tr1/cwchar \\\n-                         include/tr1/cwctype \\\n-                         include/decimal/decimal \\\n-                         include/ \\\n-                         include/@host_alias@/bits \\\n-                         include/backward \\\n-                         include/bits \\\n-                         include/debug \\\n-                         include/parallel \\\n-                         include/profile \\\n-                         include/profile/impl \\\n-                         include/ext \\\n-                         include/ext/pb_ds \\\n-                         include/ext/pb_ds/detail\n+\t\t\t @srcdir@/libsupc++/cxxabi.h \\\n+\t\t\t @srcdir@/libsupc++/exception \\\n+\t\t\t @srcdir@/libsupc++/initializer_list \\\n+\t\t\t @srcdir@/libsupc++/new \\\n+\t\t\t @srcdir@/libsupc++/typeinfo \\\n+\t\t\t include/algorithm \\\n+\t\t\t include/array \\\n+\t\t\t include/atomic \\\n+\t\t\t include/bitset \\\n+\t\t\t include/chrono \\\n+\t\t\t include/complex \\\n+\t\t\t include/condition_variable \\\n+\t\t\t include/deque \\\n+\t\t\t include/forward_list \\\n+\t\t\t include/fstream \\\n+\t\t\t include/functional \\\n+\t\t\t include/future \\\n+\t\t\t include/iomanip \\\n+\t\t\t include/ios \\\n+\t\t\t include/iosfwd \\\n+\t\t\t include/iostream \\\n+\t\t\t include/istream \\\n+\t\t\t include/iterator \\\n+\t\t\t include/limits \\\n+\t\t\t include/list \\\n+\t\t\t include/locale \\\n+\t\t\t include/map \\\n+\t\t\t include/memory \\\n+\t\t\t include/mutex \\\n+\t\t\t include/numeric \\\n+\t\t\t include/ostream \\\n+\t\t\t include/queue \\\n+\t\t\t include/random \\\n+\t\t\t include/ratio \\\n+\t\t\t include/regex \\\n+\t\t\t include/set \\\n+\t\t\t include/sstream \\\n+\t\t\t include/stack \\\n+\t\t\t include/stdexcept \\\n+\t\t\t include/streambuf \\\n+\t\t\t include/string \\\n+\t\t\t include/system_error \\\n+\t\t\t include/thread \\\n+\t\t\t include/tuple \\\n+\t\t\t include/typeindex \\\n+\t\t\t include/type_traits \\\n+\t\t\t include/unordered_map \\\n+\t\t\t include/unordered_set \\\n+\t\t\t include/utility \\\n+\t\t\t include/valarray \\\n+\t\t\t include/vector \\\n+\t\t\t include/cassert \\\n+\t\t\t include/ccomplex \\\n+\t\t\t include/cctype \\\n+\t\t\t include/cerrno \\\n+\t\t\t include/cfenv \\\n+\t\t\t include/cfloat \\\n+\t\t\t include/cinttypes \\\n+\t\t\t include/ciso646 \\\n+\t\t\t include/climits \\\n+\t\t\t include/clocale \\\n+\t\t\t include/cmath \\\n+\t\t\t include/csetjmp \\\n+\t\t\t include/csignal \\\n+\t\t\t include/cstdarg \\\n+\t\t\t include/cstdbool \\\n+\t\t\t include/cstddef \\\n+\t\t\t include/cstdint \\\n+\t\t\t include/cstdio \\\n+\t\t\t include/cstdlib \\\n+\t\t\t include/cstring \\\n+\t\t\t include/ctgmath \\\n+\t\t\t include/ctime \\\n+\t\t\t include/cwchar \\\n+\t\t\t include/cwctype \\\n+\t\t\t include/ \\\n+\t\t\t include/bits \\\n+\t\t\t include/@host_alias@/bits \\\n+\t\t\t include/backward \\\n+\t\t\t include/backward/hash_map \\\n+\t\t\t include/backward/hash_set \\\n+\t\t\t include/backward/strstream \\\n+\t\t\t include/debug \\\n+\t\t\t include/debug/bitset \\\n+\t\t\t include/debug/deque \\\n+\t\t\t include/debug/forward_list \\\n+\t\t\t include/debug/list \\\n+\t\t\t include/debug/map \\\n+\t\t\t include/debug/set \\\n+\t\t\t include/debug/string \\\n+\t\t\t include/debug/unordered_map \\\n+\t\t\t include/debug/unordered_set \\\n+\t\t\t include/debug/vector \\\n+\t\t\t include/profile \\\n+\t\t\t include/profile/impl \\\n+\t\t\t include/profile/bitset \\\n+\t\t\t include/profile/deque \\\n+\t\t\t include/profile/forward_list \\\n+\t\t\t include/profile/list \\\n+\t\t\t include/profile/map \\\n+\t\t\t include/profile/set \\\n+\t\t\t include/profile/unordered_map \\\n+\t\t\t include/profile/unordered_set \\\n+\t\t\t include/profile/vector \\\n+\t\t\t include/ext/algorithm \\\n+\t\t\t include/ext/functional \\\n+\t\t\t include/ext/iterator \\\n+\t\t\t include/ext/memory \\\n+\t\t\t include/ext/numeric \\\n+\t\t\t include/ext/rb_tree \\\n+\t\t\t include/ext/rope \\\n+\t\t\t include/ext/slist \\\n+\t\t\t include/parallel \\\n+\t\t\t include/parallel/algorithm \\\n+\t\t\t include/parallel/numeric \\\n+\t\t\t include/tr1/ccomplex \\\n+\t\t\t include/tr1/cctype \\\n+\t\t\t include/tr1/cfenv \\\n+\t\t\t include/tr1/cfloat \\\n+\t\t\t include/tr1/cinttypes \\\n+\t\t\t include/tr1/climits \\\n+\t\t\t include/tr1/cmath \\\n+\t\t\t include/tr1/complex \\\n+\t\t\t include/tr1/cstdarg \\\n+\t\t\t include/tr1/cstdbool \\\n+\t\t\t include/tr1/cstdint \\\n+\t\t\t include/tr1/cstdio \\\n+\t\t\t include/tr1/cstdlib \\\n+\t\t\t include/tr1/ctgmath \\\n+\t\t\t include/tr1/ctime \\\n+\t\t\t include/tr1/cwchar \\\n+\t\t\t include/tr1/cwctype \\\n+\t\t\t include/decimal/decimal \\\n+\t\t\t include/ext \\\n+\t\t\t include/ext/pb_ds \\\n+\t\t\t include/ext/pb_ds/detail \\\n+\t\t\t include/ext/pb_ds/detail/binary_heap_ \\\n+\t\t\t include/ext/pb_ds/detail/binomial_heap_ \\\n+\t\t\t include/ext/pb_ds/detail/binomial_heap_base_ \\\n+\t\t\t include/ext/pb_ds/detail/bin_search_tree_ \\\n+\t\t\t include/ext/pb_ds/detail/branch_policy \\\n+\t\t\t include/ext/pb_ds/detail/cc_hash_table_map_ \\\n+\t\t\t include/ext/pb_ds/detail/eq_fn \\\n+\t\t\t include/ext/pb_ds/detail/gp_hash_table_map_ \\\n+\t\t\t include/ext/pb_ds/detail/hash_fn \\\n+\t\t\t include/ext/pb_ds/detail/left_child_next_sibling_heap_ \\\n+\t\t\t include/ext/pb_ds/detail/list_update_map_ \\\n+\t\t\t include/ext/pb_ds/detail/list_update_policy \\\n+\t\t\t include/ext/pb_ds/detail/ov_tree_map_ \\\n+\t\t\t include/ext/pb_ds/detail/pairing_heap_ \\\n+\t\t\t include/ext/pb_ds/detail/pat_trie_ \\\n+\t\t\t include/ext/pb_ds/detail/rb_tree_map_ \\\n+\t\t\t include/ext/pb_ds/detail/rc_binomial_heap_ \\\n+\t\t\t include/ext/pb_ds/detail/resize_policy \\\n+\t\t\t include/ext/pb_ds/detail/splay_tree_ \\\n+\t\t\t include/ext/pb_ds/detail/thin_heap_ \\\n+\t\t\t include/ext/pb_ds/detail/tree_policy \\\n+\t\t\t include/ext/pb_ds/detail/trie_policy \\\n+\t\t\t include/ext/pb_ds/detail/unordered_iterator\n \n # This tag can be used to specify the character encoding of the source files\n # that doxygen parses. Internally doxygen uses the UTF-8 encoding, which is\n@@ -736,11 +787,11 @@ INPUT_ENCODING         = UTF-8\n # blank the following patterns are tested:\n # *.c *.cc *.cxx *.cpp *.c++ *.d *.java *.ii *.ixx *.ipp *.i++ *.inl *.h *.hh\n # *.hxx *.hpp *.h++ *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm *.dox *.py\n-# *.f90 *.f *.vhd *.vhdl\n+# *.f90 *.f *.for *.vhd *.vhdl\n \n FILE_PATTERNS          = *.h \\\n-                         *.hpp \\\n-                         *.tcc\n+\t\t\t *.hpp \\\n+\t\t\t *.tcc\n \n # The RECURSIVE tag can be used to turn specify whether or not subdirectories\n # should be searched for input files as well. Possible values are YES and NO.\n@@ -755,7 +806,7 @@ RECURSIVE              = NO\n EXCLUDE                = Makefile\n \n # The EXCLUDE_SYMLINKS tag can be used select whether or not files or\n-# directories that are symbolic links (a Unix filesystem feature) are excluded\n+# directories that are symbolic links (a Unix file system feature) are excluded\n # from the input.\n \n EXCLUDE_SYMLINKS       = NO\n@@ -766,9 +817,10 @@ EXCLUDE_SYMLINKS       = NO\n # against the file with absolute path, so to exclude all test directories\n # for example use the pattern */test/*\n \n-EXCLUDE_PATTERNS       = stamp-* doxygroups.cc \\\n-                         *.gch \\\n-                         */.svn/*\n+EXCLUDE_PATTERNS       = stamp-* \\\n+\t\t\t doxygroups.cc \\\n+\t\t\t *.gch \\\n+\t\t\t */.svn/*\n \n # The EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names\n # (namespaces, classes, functions, etc.) that should be excluded from the\n@@ -821,8 +873,8 @@ INPUT_FILTER           =\n # filter if there is a match.\n # The filters are a list of the form:\n # pattern=filter (like *.cpp=my_cpp_filter). See INPUT_FILTER for further\n-# info on how filters are used. If FILTER_PATTERNS is empty, INPUT_FILTER\n-# is applied to all files.\n+# info on how filters are used. If FILTER_PATTERNS is empty or if\n+# non of the patterns match the file name, INPUT_FILTER is applied.\n \n FILTER_PATTERNS        =\n \n@@ -832,6 +884,14 @@ FILTER_PATTERNS        =\n \n FILTER_SOURCE_FILES    = NO\n \n+# The FILTER_SOURCE_PATTERNS tag can be used to specify source filters per file\n+# pattern. A pattern will override the setting for FILTER_PATTERN (if any)\n+# and it is also possible to disable source filtering for a specific pattern\n+# using *.ext= (so without naming a filter). This option only has effect when\n+# FILTER_SOURCE_FILES is enabled.\n+\n+FILTER_SOURCE_PATTERNS =\n+\n #---------------------------------------------------------------------------\n # configuration options related to source browsing\n #---------------------------------------------------------------------------\n@@ -934,7 +994,13 @@ HTML_FILE_EXTENSION    = .html\n \n # The HTML_HEADER tag can be used to specify a personal HTML header for\n # each generated HTML page. If it is left blank doxygen will generate a\n-# standard header.\n+# standard header. Note that when using a custom header you are responsible\n+# for the proper inclusion of any scripts and style sheets that doxygen\n+# needs, which is dependent on the configuration options used.\n+# It is adviced to generate a default header using \"doxygen -w html\n+# header.html footer.html stylesheet.css YourConfigFile\" and then modify\n+# that header. Note that the header is subject to change so you typically\n+# have to redo this when upgrading to a newer version of doxygen or when changing the value of configuration settings such as GENERATE_TREEVIEW!\n \n HTML_HEADER            =\n \n@@ -953,6 +1019,15 @@ HTML_FOOTER            =\n \n HTML_STYLESHEET        =\n \n+# The HTML_EXTRA_FILES tag can be used to specify one or more extra images or\n+# other source files which should be copied to the HTML output directory. Note\n+# that these files will be copied to the base HTML output directory. Use the\n+# $relpath$ marker in the HTML_HEADER and/or HTML_FOOTER files to load these\n+# files. In the HTML_STYLESHEET file, use the file name only. Also note that\n+# the files will be copied as-is; there are no commands or markers available.\n+\n+HTML_EXTRA_FILES       =\n+\n # The HTML_COLORSTYLE_HUE tag controls the color of the HTML output.\n # Doxygen will adjust the colors in the stylesheet and background images\n # according to this color. Hue is specified as an angle on a colorwheel,\n@@ -1155,9 +1230,10 @@ ECLIPSE_DOC_ID         = org.doxygen.Project\n \n DISABLE_INDEX          = YES\n \n-# This tag can be used to set the number of enum values (range [0,1..20])\n-# that doxygen will group on one line in the generated HTML documentation.\n-# Note that a value of 0 will completely suppress the enum values from appearing in the overview section.\n+# The ENUM_VALUES_PER_LINE tag can be used to set the number of enum values\n+# (range [0,1..20]) that doxygen will group on one line in the generated HTML\n+# documentation. Note that a value of 0 will completely suppress the enum\n+# values from appearing in the overview section.\n \n ENUM_VALUES_PER_LINE   = 4\n \n@@ -1216,7 +1292,8 @@ USE_MATHJAX            = NO\n # HTML output directory using the MATHJAX_RELPATH option. The destination\n # directory should contain the MathJax.js script. For instance, if the mathjax\n # directory is located at the same level as the HTML output directory, then\n-# MATHJAX_RELPATH should be ../mathjax. The default value points to the mathjax.org site, so you can quickly see the result without installing\n+# MATHJAX_RELPATH should be ../mathjax. The default value points to the\n+# mathjax.org site, so you can quickly see the result without installing\n # MathJax, but it is strongly recommended to install a local copy of MathJax\n # before deployment.\n \n@@ -1295,6 +1372,13 @@ EXTRA_PACKAGES         = amsmath\n \n LATEX_HEADER           =\n \n+# The LATEX_FOOTER tag can be used to specify a personal LaTeX footer for\n+# the generated latex document. The footer should contain everything after\n+# the last chapter. If it is left blank doxygen will generate a\n+# standard footer. Notice: only use this tag if you know what you are doing!\n+\n+LATEX_FOOTER           =\n+\n # If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated\n # is prepared for conversion to pdf (using ps2pdf). The pdf file will\n # contain links (just like the HTML output) instead of page references\n@@ -1504,15 +1588,15 @@ MACRO_EXPANSION        = YES\n EXPAND_ONLY_PREDEF     = NO\n \n # If the SEARCH_INCLUDES tag is set to YES (the default) the includes files\n-# in the INCLUDE_PATH (see below) will be search if a #include is found.\n+# pointed to by INCLUDE_PATH will be searched when a #include is found.\n \n SEARCH_INCLUDES        = YES\n \n # The INCLUDE_PATH tag can be used to specify one or more directories that\n # contain include files that are not input files but should be processed by\n # the preprocessor.\n \n-INCLUDE_PATH           =\n+INCLUDE_PATH           = include\n \n # You can use the INCLUDE_FILE_PATTERNS tag to specify one or more wildcard\n # patterns (like *.h and *.hpp) to filter out the header-files in the\n@@ -1530,57 +1614,59 @@ INCLUDE_FILE_PATTERNS  =\n # instead of the = operator.\n \n PREDEFINED             = __cplusplus \\\n-                         __GTHREADS \\\n-                         _GLIBCXX_HAS_GTHREADS \\\n-                         __GXX_EXPERIMENTAL_CXX0X__ \\\n-                         _GLIBCXX_INCLUDE_AS_CXX0X \\\n-                         \"_GLIBCXX_PURE= \" \\\n-                         \"_GLIBCXX_CONST= \" \\\n-                         \"_GLIBCXX_NORETURN= \" \\\n-                         \"_GLIBCXX_NOTHROW= \" \\\n-                         \"_GLIBCXX_STD_C= \" \\\n-                         \"_GLIBCXX_STD_A= \" \\\n+\t\t\t __GTHREADS \\\n+\t\t\t _GLIBCXX_HAS_GTHREADS \\\n+\t\t\t __GXX_EXPERIMENTAL_CXX0X__ \\\n+\t\t\t _GLIBCXX_INCLUDE_AS_CXX0X \\\n+\t\t\t \"_GLIBCXX_PURE= \" \\\n+\t\t\t \"_GLIBCXX_CONST= \" \\\n+\t\t\t \"_GLIBCXX_NORETURN= \" \\\n+\t\t\t \"_GLIBCXX_NOTHROW= \" \\\n+\t\t\t \"_GLIBCXX_STD_C= \" \\\n+\t\t\t \"_GLIBCXX_STD_A= \" \\\n \t\t\t \"_GLIBCXX_VISIBILITY(V)= \" \\\n-                         \"_GLIBCXX_BEGIN_NAMESPACE_VERSION= \" \\\n-                         \"_GLIBCXX_BEGIN_NAMESPACE_ALGO= \" \\\n-                         \"_GLIBCXX_BEGIN_NAMESPACE_CONTAINER= \" \\\n-                         \"_GLIBCXX_BEGIN_NAMESPACE_LDBL= \" \\\n-                         \"_GLIBCXX_END_NAMESPACE_VERSION= \" \\\n-                         \"_GLIBCXX_END_NAMESPACE_ALGO= \" \\\n-                         \"_GLIBCXX_END_NAMESPACE_CONTAINER= \" \\\n-                         \"_GLIBCXX_END_NAMESPACE_LDBL= \" \\\n-                         \"_GLIBCXX_TEMPLATE_ARGS=...  \" \\\n-                         _GLIBCXX_DEPRECATED \\\n-                         _GLIBCXX_CONSTEXPR=constexpr \\\n-                         _GLIBCXX_USE_CONSTEXPR=constexpr \\\n-                         _GLIBCXX_USE_WCHAR_T \\\n-                         _GLIBCXX_USE_LONG_LONG \\\n-                         _GLIBCXX_USE_C99_STDINT_TR1 \\\n-                         _GLIBCXX_ATOMIC_BUILTINS_1 \\\n-                         _GLIBCXX_ATOMIC_BUILTINS_2 \\\n-                         _GLIBCXX_ATOMIC_BUILTINS_4 \\\n-                         _GLIBCXX_ATOMIC_BUILTINS_8 \\\n-                         _GLIBCXX_USE_SCHED_YIELD \\\n-                         _GLIBCXX_USE_NANOSLEEP \\\n-                         __GXX_RTTI \\\n-                         __glibcxx_function_requires=// \\\n-                         __glibcxx_class_requires=// \\\n-                         __glibcxx_class_requires2=// \\\n-                         __glibcxx_class_requires3=// \\\n-                         __glibcxx_class_requires4=//\n+\t\t\t \"_GLIBCXX_BEGIN_NAMESPACE_VERSION= \" \\\n+\t\t\t \"_GLIBCXX_BEGIN_NAMESPACE_ALGO= \" \\\n+\t\t\t \"_GLIBCXX_BEGIN_NAMESPACE_CONTAINER= \" \\\n+\t\t\t \"_GLIBCXX_BEGIN_NAMESPACE_LDBL= \" \\\n+\t\t\t \"_GLIBCXX_END_NAMESPACE_VERSION= \" \\\n+\t\t\t \"_GLIBCXX_END_NAMESPACE_ALGO= \" \\\n+\t\t\t \"_GLIBCXX_END_NAMESPACE_CONTAINER= \" \\\n+\t\t\t \"_GLIBCXX_END_NAMESPACE_LDBL= \" \\\n+\t\t\t \"_GLIBCXX_TEMPLATE_ARGS=...  \" \\\n+\t\t\t _GLIBCXX_DEPRECATED \\\n+\t\t\t _GLIBCXX_CONSTEXPR=constexpr \\\n+\t\t\t _GLIBCXX_USE_CONSTEXPR=constexpr \\\n+\t\t\t _GLIBCXX_USE_WCHAR_T \\\n+\t\t\t _GLIBCXX_USE_LONG_LONG \\\n+\t\t\t _GLIBCXX_USE_C99_STDINT_TR1 \\\n+\t\t\t _GLIBCXX_ATOMIC_BUILTINS_1 \\\n+\t\t\t _GLIBCXX_ATOMIC_BUILTINS_2 \\\n+\t\t\t _GLIBCXX_ATOMIC_BUILTINS_4 \\\n+\t\t\t _GLIBCXX_ATOMIC_BUILTINS_8 \\\n+\t\t\t _GLIBCXX_USE_SCHED_YIELD \\\n+\t\t\t _GLIBCXX_USE_NANOSLEEP \\\n+\t\t\t PB_DS_DATA_TRUE_INDICATOR \\\n+\t\t\t __EXCEPTIONS \\\n+\t\t\t __GXX_RTTI \\\n+\t\t\t __glibcxx_function_requires=// \\\n+\t\t\t __glibcxx_class_requires=// \\\n+\t\t\t __glibcxx_class_requires2=// \\\n+\t\t\t __glibcxx_class_requires3=// \\\n+\t\t\t __glibcxx_class_requires4=//\n \n # If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then\n # this tag can be used to specify a list of macro names that should be expanded.\n # The macro definition that is found in the sources will be used.\n-# Use the PREDEFINED tag if you want to use a different macro definition.\n+# Use the PREDEFINED tag if you want to use a different macro definition that\n+# overrules the definition found in the source code.\n \n EXPAND_AS_DEFINED      =\n \n # If the SKIP_FUNCTION_MACROS tag is set to YES (the default) then\n-# doxygen's preprocessor will remove all function-like macros that are alone\n-# on a line, have an all uppercase name, and do not end with a semicolon. Such\n-# function macros are typically used for boiler-plate code, and will confuse\n-# the parser if not removed.\n+# doxygen's preprocessor will remove all references to function-like macros\n+# that are alone on a line, have an all uppercase name, and do not end with a\n+# semicolon, because these will confuse the parser if not removed.\n \n SKIP_FUNCTION_MACROS   = YES\n \n@@ -1671,11 +1757,10 @@ HAVE_DOT               = YES\n \n DOT_NUM_THREADS        = 0\n \n-# By default doxygen will write a font called FreeSans.ttf to the output\n-# directory and reference it in all dot files that doxygen generates. This\n-# font does not include all possible unicode characters however, so when you need\n-# these (or just want a differently looking font) you can specify the font name\n-# using DOT_FONTNAME. You need need to make sure dot is able to find the font,\n+# By default doxygen will write a font called Helvetica to the output\n+# directory and reference it in all dot files that doxygen generates.\n+# When you want a differently looking font you can specify the font name\n+# using DOT_FONTNAME. You need to make sure dot is able to find the font,\n # which can be done by putting it in a standard location or by setting the\n # DOTFONTPATH environment variable or by setting DOT_FONTPATH to the directory\n # containing the font.\n@@ -1767,7 +1852,7 @@ GRAPHICAL_HIERARCHY    = YES\n DIRECTORY_GRAPH        = YES\n \n # The DOT_IMAGE_FORMAT tag can be used to set the image format of the images\n-# generated by dot. Possible values are png, jpg, or gif.\n+# generated by dot. Possible values are svg, png, jpg, or gif.\n # If left blank png will be used.\n \n DOT_IMAGE_FORMAT       = png"}, {"sha": "c69cf1e7641a7fe8a51bc8f073daf582026bbb21", "filename": "libstdc++-v3/doc/html/ext/pb_ds/binary_priority_queue_random_int_push_timing_test_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fbinary_priority_queue_random_int_push_timing_test_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fbinary_priority_queue_random_int_push_timing_test_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fbinary_priority_queue_random_int_push_timing_test_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "40404c87518e00b14dc433de6c1c06a489a7321e", "filename": "libstdc++-v3/doc/html/ext/pb_ds/cc_hash_random_int_find_timing_test_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fcc_hash_random_int_find_timing_test_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fcc_hash_random_int_find_timing_test_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fcc_hash_random_int_find_timing_test_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "bb5f30b68b9749ab61540d9c1ec31e66f610b7f4", "filename": "libstdc++-v3/doc/html/ext/pb_ds/cc_hash_random_int_subscript_timing_test_find_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fcc_hash_random_int_subscript_timing_test_find_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fcc_hash_random_int_subscript_timing_test_find_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fcc_hash_random_int_subscript_timing_test_find_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "8dc7735c113589440027c3d3b03c4beea1087518", "filename": "libstdc++-v3/doc/html/ext/pb_ds/cc_hash_random_int_subscript_timing_test_insert_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fcc_hash_random_int_subscript_timing_test_insert_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fcc_hash_random_int_subscript_timing_test_insert_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fcc_hash_random_int_subscript_timing_test_insert_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "2b8c0e76d5f2453ab0e4e5cd97c0cb34103587ed", "filename": "libstdc++-v3/doc/html/ext/pb_ds/ccgp_hash_random_int_subscript_timing_test_insert_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fccgp_hash_random_int_subscript_timing_test_insert_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fccgp_hash_random_int_subscript_timing_test_insert_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fccgp_hash_random_int_subscript_timing_test_insert_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "299737dd6fc6f3be1527d8033f80164be169d54e", "filename": "libstdc++-v3/doc/html/ext/pb_ds/gp_hash_random_int_find_timing_test_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fgp_hash_random_int_find_timing_test_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fgp_hash_random_int_find_timing_test_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fgp_hash_random_int_find_timing_test_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "7e4d7fadc62a31bbcf230a4f074cc3d3b056cff5", "filename": "libstdc++-v3/doc/html/ext/pb_ds/gp_hash_random_int_subscript_timing_test_find_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fgp_hash_random_int_subscript_timing_test_find_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fgp_hash_random_int_subscript_timing_test_find_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fgp_hash_random_int_subscript_timing_test_find_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "587ff1d145c8f6f32cefa6a2909b6287cfb8733b", "filename": "libstdc++-v3/doc/html/ext/pb_ds/gp_hash_random_int_subscript_timing_test_insert_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fgp_hash_random_int_subscript_timing_test_insert_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fgp_hash_random_int_subscript_timing_test_insert_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fgp_hash_random_int_subscript_timing_test_insert_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "66bb0eb46e2804f1e6343ac9b149b027546f6c04", "filename": "libstdc++-v3/doc/html/ext/pb_ds/hash_random_int_erase_mem_usage_test_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fhash_random_int_erase_mem_usage_test_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fhash_random_int_erase_mem_usage_test_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fhash_random_int_erase_mem_usage_test_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "81848ba8b2e3d445667e8fd3f9b75a37d0d978a1", "filename": "libstdc++-v3/doc/html/ext/pb_ds/hash_zlob_random_int_find_timing_test_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fhash_zlob_random_int_find_timing_test_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fhash_zlob_random_int_find_timing_test_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fhash_zlob_random_int_find_timing_test_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "121af9e45a1b5e6946ab8bd8079e6d3f3aa170bf", "filename": "libstdc++-v3/doc/html/ext/pb_ds/multimap_text_find_timing_test_large_s2p_hash_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_find_timing_test_large_s2p_hash_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_find_timing_test_large_s2p_hash_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_find_timing_test_large_s2p_hash_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "3ac90d56c860aa3999b2b74590d5fe20fc48d4c1", "filename": "libstdc++-v3/doc/html/ext/pb_ds/multimap_text_find_timing_test_large_s2p_tree_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_find_timing_test_large_s2p_tree_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_find_timing_test_large_s2p_tree_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_find_timing_test_large_s2p_tree_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "4fc3d594afc943b6bcb20b5e37602781a3166b20", "filename": "libstdc++-v3/doc/html/ext/pb_ds/multimap_text_find_timing_test_small_s2p_hash_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_find_timing_test_small_s2p_hash_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_find_timing_test_small_s2p_hash_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_find_timing_test_small_s2p_hash_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "123c3a648b80bd5e0376a54cb41aa87be12c2b00", "filename": "libstdc++-v3/doc/html/ext/pb_ds/multimap_text_find_timing_test_small_s2p_tree_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_find_timing_test_small_s2p_tree_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_find_timing_test_small_s2p_tree_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_find_timing_test_small_s2p_tree_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "73a35cef612f6a565f8cd4624aa2faed6123fa87", "filename": "libstdc++-v3/doc/html/ext/pb_ds/multimap_text_insert_mem_usage_test_large_s2p_hash_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_insert_mem_usage_test_large_s2p_hash_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_insert_mem_usage_test_large_s2p_hash_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_insert_mem_usage_test_large_s2p_hash_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "fce364cb318d8814b72e0c6cb42c0fa4e9e58d2f", "filename": "libstdc++-v3/doc/html/ext/pb_ds/multimap_text_insert_mem_usage_test_large_s2p_tree_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_insert_mem_usage_test_large_s2p_tree_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_insert_mem_usage_test_large_s2p_tree_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_insert_mem_usage_test_large_s2p_tree_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "df0becc112c9964855b1a8ae32e95fb00ac0e970", "filename": "libstdc++-v3/doc/html/ext/pb_ds/multimap_text_insert_mem_usage_test_small_s2p_hash_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_insert_mem_usage_test_small_s2p_hash_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_insert_mem_usage_test_small_s2p_hash_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_insert_mem_usage_test_small_s2p_hash_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "9bacb35ce545c0915825c622326ac994b0cf52ef", "filename": "libstdc++-v3/doc/html/ext/pb_ds/multimap_text_insert_mem_usage_test_small_s2p_tree_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_insert_mem_usage_test_small_s2p_tree_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_insert_mem_usage_test_small_s2p_tree_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_insert_mem_usage_test_small_s2p_tree_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "de6ee23391e117e95b524d366c56f36990af89bf", "filename": "libstdc++-v3/doc/html/ext/pb_ds/multimap_text_insert_timing_test_large_s2p_hash_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_insert_timing_test_large_s2p_hash_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_insert_timing_test_large_s2p_hash_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_insert_timing_test_large_s2p_hash_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "307ca2db18763402e240492698308a7dc8bca8a2", "filename": "libstdc++-v3/doc/html/ext/pb_ds/multimap_text_insert_timing_test_large_s2p_tree_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_insert_timing_test_large_s2p_tree_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_insert_timing_test_large_s2p_tree_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_insert_timing_test_large_s2p_tree_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "4174fabe923d64918101af1793e40e4332408f50", "filename": "libstdc++-v3/doc/html/ext/pb_ds/multimap_text_insert_timing_test_small_s2p_hash_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_insert_timing_test_small_s2p_hash_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_insert_timing_test_small_s2p_hash_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_insert_timing_test_small_s2p_hash_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "c5f4e57e6d7c3e1f238c27c471c71fb59d124420", "filename": "libstdc++-v3/doc/html/ext/pb_ds/multimap_text_insert_timing_test_small_s2p_tree_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_insert_timing_test_small_s2p_tree_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_insert_timing_test_small_s2p_tree_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fmultimap_text_insert_timing_test_small_s2p_tree_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "81f7a5900a023384ccbc4a4c81cc44bcfde231f9", "filename": "libstdc++-v3/doc/html/ext/pb_ds/pairing_priority_queue_text_push_pop_timing_test_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpairing_priority_queue_text_push_pop_timing_test_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpairing_priority_queue_text_push_pop_timing_test_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpairing_priority_queue_text_push_pop_timing_test_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "472d8691f2e7b69512e89d9c2daa5b138e0117aa", "filename": "libstdc++-v3/doc/html/ext/pb_ds/pairing_priority_queue_text_push_timing_test_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpairing_priority_queue_text_push_timing_test_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpairing_priority_queue_text_push_timing_test_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpairing_priority_queue_text_push_timing_test_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "b8cc15330abeaabdad1f3a138bb0b3b7d72be962", "filename": "libstdc++-v3/doc/html/ext/pb_ds/priority_queue_random_int_push_pop_timing_test_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_random_int_push_pop_timing_test_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_random_int_push_pop_timing_test_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_random_int_push_pop_timing_test_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "51fa718d279e43fcae7f19c619ae2d7484a00471", "filename": "libstdc++-v3/doc/html/ext/pb_ds/priority_queue_random_int_push_timing_test_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_random_int_push_timing_test_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_random_int_push_timing_test_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_random_int_push_timing_test_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "67318f04896a176ea21675a4b08d6b8f0728209f", "filename": "libstdc++-v3/doc/html/ext/pb_ds/priority_queue_text_join_timing_test_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_text_join_timing_test_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_text_join_timing_test_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_text_join_timing_test_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "d8d3b7a7ada1cbc73cfe83b4460d8a63d40e768b", "filename": "libstdc++-v3/doc/html/ext/pb_ds/priority_queue_text_modify_down_timing_test_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_text_modify_down_timing_test_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_text_modify_down_timing_test_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_text_modify_down_timing_test_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "23ac5e73ec1c05753d5f6628efdaa8271f52f296", "filename": "libstdc++-v3/doc/html/ext/pb_ds/priority_queue_text_modify_down_timing_test_pairing_thin_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_text_modify_down_timing_test_pairing_thin_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_text_modify_down_timing_test_pairing_thin_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_text_modify_down_timing_test_pairing_thin_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "dc48e39df5d8b7dfc778f965a0c1afd5a817a331", "filename": "libstdc++-v3/doc/html/ext/pb_ds/priority_queue_text_modify_up_timing_test_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_text_modify_up_timing_test_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_text_modify_up_timing_test_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_text_modify_up_timing_test_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "9a73934c7731c4fecfd06601b4db1451f7f230ee", "filename": "libstdc++-v3/doc/html/ext/pb_ds/priority_queue_text_modify_up_timing_test_pairing_thin_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_text_modify_up_timing_test_pairing_thin_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_text_modify_up_timing_test_pairing_thin_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_text_modify_up_timing_test_pairing_thin_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "d1966e33d98b017d60a9e69bf8d7111697046aae", "filename": "libstdc++-v3/doc/html/ext/pb_ds/priority_queue_text_pop_mem_usage_test_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_text_pop_mem_usage_test_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_text_pop_mem_usage_test_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_text_pop_mem_usage_test_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "fd52d5a16c5f1a2ca83f4560ee7c8bfa7ad72f63", "filename": "libstdc++-v3/doc/html/ext/pb_ds/priority_queue_text_push_pop_timing_test_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_text_push_pop_timing_test_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_text_push_pop_timing_test_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_text_push_pop_timing_test_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "18cca76c2944f349116169318174bf14e71260a1", "filename": "libstdc++-v3/doc/html/ext/pb_ds/priority_queue_text_push_timing_test_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_text_push_timing_test_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_text_push_timing_test_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fpriority_queue_text_push_timing_test_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "dd7c184dd435a19272e88fad490ddb76c8999d57", "filename": "libstdc++-v3/doc/html/ext/pb_ds/random_int_find_find_timing_test_tree_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Frandom_int_find_find_timing_test_tree_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Frandom_int_find_find_timing_test_tree_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Frandom_int_find_find_timing_test_tree_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "a46c91b1d1580a93f0ffa8b8259183a5c57b6fd3", "filename": "libstdc++-v3/doc/html/ext/pb_ds/sample_trie_access_traits.html", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fsample_trie_access_traits.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fsample_trie_access_traits.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Fsample_trie_access_traits.html?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "previous_filename": "libstdc++-v3/doc/html/ext/pb_ds/sample_trie_e_access_traits.html"}, {"sha": "5364778241dff27501093cfa740c6dea79f2db92", "filename": "libstdc++-v3/doc/html/ext/pb_ds/text_find_timing_test_hash_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Ftext_find_timing_test_hash_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Ftext_find_timing_test_hash_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Ftext_find_timing_test_hash_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "8ec5cfbce7a833e2d3ea738697636e084c2bb9d1", "filename": "libstdc++-v3/doc/html/ext/pb_ds/text_find_timing_test_tree_like_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Ftext_find_timing_test_tree_like_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Ftext_find_timing_test_tree_like_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Ftext_find_timing_test_tree_like_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "9f46319f8081010d6b1bc88819ed44ed937c956a", "filename": "libstdc++-v3/doc/html/ext/pb_ds/tree_order_statistics_timing_test_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Ftree_order_statistics_timing_test_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Ftree_order_statistics_timing_test_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Ftree_order_statistics_timing_test_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "fe5ba81c49e29aeffab63609d77ff33547e36dcd", "filename": "libstdc++-v3/doc/html/ext/pb_ds/tree_split_join_timing_test_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Ftree_split_join_timing_test_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Ftree_split_join_timing_test_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Ftree_split_join_timing_test_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "c98488c041a8fcb2c7a7f5d2adb37cd533a7e05f", "filename": "libstdc++-v3/doc/html/ext/pb_ds/tree_text_insert_timing_test_node_tree_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Ftree_text_insert_timing_test_node_tree_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Ftree_text_insert_timing_test_node_tree_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Ftree_text_insert_timing_test_node_tree_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "eff7eefb09d89c0099eabda19010d4832f37b291", "filename": "libstdc++-v3/doc/html/ext/pb_ds/tree_text_insert_timing_test_pat_trie_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Ftree_text_insert_timing_test_pat_trie_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Ftree_text_insert_timing_test_pat_trie_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Ftree_text_insert_timing_test_pat_trie_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "f67156d452ee6e0f7cb39df697dcd288533ba525", "filename": "libstdc++-v3/doc/html/ext/pb_ds/tree_text_insert_timing_test_vector_tree_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Ftree_text_insert_timing_test_vector_tree_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Ftree_text_insert_timing_test_vector_tree_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Ftree_text_insert_timing_test_vector_tree_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "960803b05f5ae58fcc6f52291ae337558bc7f94a", "filename": "libstdc++-v3/doc/html/ext/pb_ds/tree_text_lor_find_timing_test_local.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Ftree_text_lor_find_timing_test_local.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Ftree_text_lor_find_timing_test_local.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Ftree_text_lor_find_timing_test_local.png?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "4ce9e864a95198b10d9a580ade7a83eb72b5fdd3", "filename": "libstdc++-v3/doc/html/ext/pb_ds/trie_string_access_traits.html", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Ftrie_string_access_traits.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Ftrie_string_access_traits.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Fpb_ds%2Ftrie_string_access_traits.html?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "previous_filename": "libstdc++-v3/doc/html/ext/pb_ds/string_trie_e_access_traits.html"}, {"sha": "73b858993d06b6a8ca14a5303d839676655ca9db", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 13, "deletions": 32, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -201,7 +201,7 @@ pb_subdirs = \\\n \t${pb_builddir}/detail/pairing_heap_ \\\n \t${pb_builddir}/detail/splay_tree_ \\\n \t${pb_builddir}/detail/list_update_map_ \\\n-\t${pb_builddir}/detail/basic_tree_policy \\\n+\t${pb_builddir}/detail/branch_policy \\\n \t${pb_builddir}/detail/trie_policy \\\n \t${pb_builddir}/detail/gp_hash_table_map_ \\\n \t${pb_builddir}/detail/tree_policy \\\n@@ -236,13 +236,12 @@ pb_headers1 = \\\n \t${pb_srcdir}/tag_and_trait.hpp \\\n \t${pb_srcdir}/tree_policy.hpp \\\n \t${pb_srcdir}/trie_policy.hpp \\\n-\t${pb_srcdir}/detail/basic_tree_policy/basic_tree_policy_base.hpp \\\n-\t${pb_srcdir}/detail/basic_tree_policy/null_node_metadata.hpp \\\n-\t${pb_srcdir}/detail/basic_tree_policy/traits.hpp \\\n-\t${pb_srcdir}/detail/basic_types.hpp \\\n+\t${pb_srcdir}/detail/branch_policy/branch_policy.hpp \\\n+\t${pb_srcdir}/detail/branch_policy/null_node_metadata.hpp \\\n+\t${pb_srcdir}/detail/branch_policy/traits.hpp \\\n \t${pb_srcdir}/detail/binary_heap_/binary_heap_.hpp \\\n \t${pb_srcdir}/detail/binary_heap_/const_iterator.hpp \\\n-\t${pb_srcdir}/detail/binary_heap_/const_point_iterator.hpp \\\n+\t${pb_srcdir}/detail/binary_heap_/point_const_iterator.hpp \\\n \t${pb_srcdir}/detail/binary_heap_/constructors_destructor_fn_imps.hpp \\\n \t${pb_srcdir}/detail/binary_heap_/debug_fn_imps.hpp \\\n \t${pb_srcdir}/detail/binary_heap_/entry_cmp.hpp \\\n@@ -266,9 +265,7 @@ pb_headers1 = \\\n \t${pb_srcdir}/detail/binomial_heap_/binomial_heap_.hpp \\\n \t${pb_srcdir}/detail/binomial_heap_/constructors_destructor_fn_imps.hpp \\\n \t${pb_srcdir}/detail/binomial_heap_/debug_fn_imps.hpp \\\n-\t${pb_srcdir}/detail/bin_search_tree_/bin_search_tree_.hpp \\\n-\t${pb_srcdir}/detail/bin_search_tree_/cond_dtor_entry_dealtor.hpp \\\n-\t${pb_srcdir}/detail/bin_search_tree_/cond_key_dtor_entry_dealtor.hpp\n+\t${pb_srcdir}/detail/bin_search_tree_/bin_search_tree_.hpp \n \n pb_headers2 = \\\n \t${pb_srcdir}/detail/bin_search_tree_/constructors_destructor_fn_imps.hpp \\\n@@ -359,7 +356,7 @@ pb_headers4 = \\\n \t${pb_srcdir}/detail/hash_fn/sample_ranged_probe_fn.hpp \\\n \t${pb_srcdir}/detail/hash_fn/sample_range_hashing.hpp \\\n \t${pb_srcdir}/detail/left_child_next_sibling_heap_/const_iterator.hpp \\\n-\t${pb_srcdir}/detail/left_child_next_sibling_heap_/const_point_iterator.hpp \\\n+\t${pb_srcdir}/detail/left_child_next_sibling_heap_/point_const_iterator.hpp \\\n \t${pb_srcdir}/detail/left_child_next_sibling_heap_/constructors_destructor_fn_imps.hpp \\\n \t${pb_srcdir}/detail/left_child_next_sibling_heap_/debug_fn_imps.hpp \\\n \t${pb_srcdir}/detail/left_child_next_sibling_heap_/erase_fn_imps.hpp \\\n@@ -368,7 +365,6 @@ pb_headers4 = \\\n \t${pb_srcdir}/detail/left_child_next_sibling_heap_/iterators_fn_imps.hpp \\\n \t${pb_srcdir}/detail/left_child_next_sibling_heap_/left_child_next_sibling_heap_.hpp \\\n \t${pb_srcdir}/detail/left_child_next_sibling_heap_/node.hpp \\\n-\t${pb_srcdir}/detail/left_child_next_sibling_heap_/null_metadata.hpp \\\n \t${pb_srcdir}/detail/left_child_next_sibling_heap_/policy_access_fn_imps.hpp \\\n \t${pb_srcdir}/detail/left_child_next_sibling_heap_/trace_fn_imps.hpp \\\n \t${pb_srcdir}/detail/list_update_map_/constructor_destructor_fn_imps.hpp \\\n@@ -381,12 +377,9 @@ pb_headers4 = \\\n \t${pb_srcdir}/detail/list_update_map_/iterators_fn_imps.hpp \\\n \t${pb_srcdir}/detail/list_update_map_/lu_map_.hpp \\\n \t${pb_srcdir}/detail/list_update_map_/trace_fn_imps.hpp \\\n-\t${pb_srcdir}/detail/list_update_policy/counter_lu_metadata.hpp \\\n-\t${pb_srcdir}/detail/list_update_policy/counter_lu_policy_imp.hpp \\\n-\t${pb_srcdir}/detail/list_update_policy/mtf_lu_policy_imp.hpp \\\n+\t${pb_srcdir}/detail/list_update_policy/lu_counter_metadata.hpp \\\n \t${pb_srcdir}/detail/list_update_policy/sample_update_policy.hpp \\\n \t${pb_srcdir}/detail/debug_map_base.hpp \\\n-\t${pb_srcdir}/detail/ov_tree_map_/cond_dtor.hpp \\\n \t${pb_srcdir}/detail/ov_tree_map_/constructors_destructor_fn_imps.hpp \\\n \t${pb_srcdir}/detail/ov_tree_map_/debug_fn_imps.hpp \\\n \t${pb_srcdir}/detail/ov_tree_map_/erase_fn_imps.hpp \\\n@@ -407,30 +400,20 @@ pb_headers5 = \\\n \t${pb_srcdir}/detail/pairing_heap_/insert_fn_imps.hpp \\\n \t${pb_srcdir}/detail/pairing_heap_/pairing_heap_.hpp \\\n \t${pb_srcdir}/detail/pairing_heap_/split_join_fn_imps.hpp \\\n-\t${pb_srcdir}/detail/pat_trie_/child_iterator.hpp \\\n-\t${pb_srcdir}/detail/pat_trie_/cond_dtor_entry_dealtor.hpp \\\n-\t${pb_srcdir}/detail/pat_trie_/const_child_iterator.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/constructors_destructor_fn_imps.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/debug_fn_imps.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/erase_fn_imps.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/find_fn_imps.hpp \\\n-\t${pb_srcdir}/detail/pat_trie_/head.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/info_fn_imps.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/insert_join_fn_imps.hpp \\\n-\t${pb_srcdir}/detail/pat_trie_/internal_node.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/iterators_fn_imps.hpp \\\n-\t${pb_srcdir}/detail/pat_trie_/leaf.hpp \\\n-\t${pb_srcdir}/detail/pat_trie_/node_base.hpp \\\n-\t${pb_srcdir}/detail/pat_trie_/node_iterators.hpp \\\n-\t${pb_srcdir}/detail/pat_trie_/node_metadata_base.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/pat_trie_.hpp \\\n-\t${pb_srcdir}/detail/pat_trie_/point_iterators.hpp \\\n+\t${pb_srcdir}/detail/pat_trie_/pat_trie_base.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/policy_access_fn_imps.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/r_erase_fn_imps.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/rotate_fn_imps.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/split_fn_imps.hpp \\\n-\t${pb_srcdir}/detail/pat_trie_/split_join_branch_bag.hpp \\\n-\t${pb_srcdir}/detail/pat_trie_/synth_e_access_traits.hpp \\\n+\t${pb_srcdir}/detail/pat_trie_/synth_access_traits.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/trace_fn_imps.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/traits.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/update_fn_imps.hpp \\\n@@ -487,22 +470,20 @@ pb_headers7 = \\\n \t${pb_srcdir}/detail/thin_heap_/thin_heap_.hpp \\\n \t${pb_srcdir}/detail/thin_heap_/trace_fn_imps.hpp \\\n \t${pb_srcdir}/detail/tree_policy/node_metadata_selector.hpp \\\n-\t${pb_srcdir}/detail/tree_policy/null_node_update_imp.hpp \\\n \t${pb_srcdir}/detail/tree_policy/order_statistics_imp.hpp \\\n \t${pb_srcdir}/detail/tree_policy/sample_tree_node_update.hpp \\\n \t${pb_srcdir}/detail/tree_trace_base.hpp \\\n \t${pb_srcdir}/detail/trie_policy/node_metadata_selector.hpp \\\n-\t${pb_srcdir}/detail/trie_policy/null_node_update_imp.hpp \\\n \t${pb_srcdir}/detail/trie_policy/order_statistics_imp.hpp \\\n \t${pb_srcdir}/detail/trie_policy/prefix_search_node_update_imp.hpp \\\n-\t${pb_srcdir}/detail/trie_policy/sample_trie_e_access_traits.hpp \\\n+\t${pb_srcdir}/detail/trie_policy/sample_trie_access_traits.hpp \\\n \t${pb_srcdir}/detail/trie_policy/sample_trie_node_update.hpp \\\n-\t${pb_srcdir}/detail/trie_policy/string_trie_e_access_traits_imp.hpp \\\n+\t${pb_srcdir}/detail/trie_policy/trie_string_access_traits_imp.hpp \\\n \t${pb_srcdir}/detail/trie_policy/trie_policy_base.hpp \\\n \t${pb_srcdir}/detail/types_traits.hpp \\\n \t${pb_srcdir}/detail/type_utils.hpp \\\n \t${pb_srcdir}/detail/unordered_iterator/const_iterator.hpp \\\n-\t${pb_srcdir}/detail/unordered_iterator/const_point_iterator.hpp \\\n+\t${pb_srcdir}/detail/unordered_iterator/point_const_iterator.hpp \\\n \t${pb_srcdir}/detail/unordered_iterator/iterator.hpp \\\n \t${pb_srcdir}/detail/unordered_iterator/point_iterator.hpp\n "}, {"sha": "aa90813309236850f68f62ae2454c15913d2dd9d", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 13, "deletions": 32, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -451,7 +451,7 @@ pb_subdirs = \\\n \t${pb_builddir}/detail/pairing_heap_ \\\n \t${pb_builddir}/detail/splay_tree_ \\\n \t${pb_builddir}/detail/list_update_map_ \\\n-\t${pb_builddir}/detail/basic_tree_policy \\\n+\t${pb_builddir}/detail/branch_policy \\\n \t${pb_builddir}/detail/trie_policy \\\n \t${pb_builddir}/detail/gp_hash_table_map_ \\\n \t${pb_builddir}/detail/tree_policy \\\n@@ -486,13 +486,12 @@ pb_headers1 = \\\n \t${pb_srcdir}/tag_and_trait.hpp \\\n \t${pb_srcdir}/tree_policy.hpp \\\n \t${pb_srcdir}/trie_policy.hpp \\\n-\t${pb_srcdir}/detail/basic_tree_policy/basic_tree_policy_base.hpp \\\n-\t${pb_srcdir}/detail/basic_tree_policy/null_node_metadata.hpp \\\n-\t${pb_srcdir}/detail/basic_tree_policy/traits.hpp \\\n-\t${pb_srcdir}/detail/basic_types.hpp \\\n+\t${pb_srcdir}/detail/branch_policy/branch_policy.hpp \\\n+\t${pb_srcdir}/detail/branch_policy/null_node_metadata.hpp \\\n+\t${pb_srcdir}/detail/branch_policy/traits.hpp \\\n \t${pb_srcdir}/detail/binary_heap_/binary_heap_.hpp \\\n \t${pb_srcdir}/detail/binary_heap_/const_iterator.hpp \\\n-\t${pb_srcdir}/detail/binary_heap_/const_point_iterator.hpp \\\n+\t${pb_srcdir}/detail/binary_heap_/point_const_iterator.hpp \\\n \t${pb_srcdir}/detail/binary_heap_/constructors_destructor_fn_imps.hpp \\\n \t${pb_srcdir}/detail/binary_heap_/debug_fn_imps.hpp \\\n \t${pb_srcdir}/detail/binary_heap_/entry_cmp.hpp \\\n@@ -516,9 +515,7 @@ pb_headers1 = \\\n \t${pb_srcdir}/detail/binomial_heap_/binomial_heap_.hpp \\\n \t${pb_srcdir}/detail/binomial_heap_/constructors_destructor_fn_imps.hpp \\\n \t${pb_srcdir}/detail/binomial_heap_/debug_fn_imps.hpp \\\n-\t${pb_srcdir}/detail/bin_search_tree_/bin_search_tree_.hpp \\\n-\t${pb_srcdir}/detail/bin_search_tree_/cond_dtor_entry_dealtor.hpp \\\n-\t${pb_srcdir}/detail/bin_search_tree_/cond_key_dtor_entry_dealtor.hpp\n+\t${pb_srcdir}/detail/bin_search_tree_/bin_search_tree_.hpp \n \n pb_headers2 = \\\n \t${pb_srcdir}/detail/bin_search_tree_/constructors_destructor_fn_imps.hpp \\\n@@ -609,7 +606,7 @@ pb_headers4 = \\\n \t${pb_srcdir}/detail/hash_fn/sample_ranged_probe_fn.hpp \\\n \t${pb_srcdir}/detail/hash_fn/sample_range_hashing.hpp \\\n \t${pb_srcdir}/detail/left_child_next_sibling_heap_/const_iterator.hpp \\\n-\t${pb_srcdir}/detail/left_child_next_sibling_heap_/const_point_iterator.hpp \\\n+\t${pb_srcdir}/detail/left_child_next_sibling_heap_/point_const_iterator.hpp \\\n \t${pb_srcdir}/detail/left_child_next_sibling_heap_/constructors_destructor_fn_imps.hpp \\\n \t${pb_srcdir}/detail/left_child_next_sibling_heap_/debug_fn_imps.hpp \\\n \t${pb_srcdir}/detail/left_child_next_sibling_heap_/erase_fn_imps.hpp \\\n@@ -618,7 +615,6 @@ pb_headers4 = \\\n \t${pb_srcdir}/detail/left_child_next_sibling_heap_/iterators_fn_imps.hpp \\\n \t${pb_srcdir}/detail/left_child_next_sibling_heap_/left_child_next_sibling_heap_.hpp \\\n \t${pb_srcdir}/detail/left_child_next_sibling_heap_/node.hpp \\\n-\t${pb_srcdir}/detail/left_child_next_sibling_heap_/null_metadata.hpp \\\n \t${pb_srcdir}/detail/left_child_next_sibling_heap_/policy_access_fn_imps.hpp \\\n \t${pb_srcdir}/detail/left_child_next_sibling_heap_/trace_fn_imps.hpp \\\n \t${pb_srcdir}/detail/list_update_map_/constructor_destructor_fn_imps.hpp \\\n@@ -631,12 +627,9 @@ pb_headers4 = \\\n \t${pb_srcdir}/detail/list_update_map_/iterators_fn_imps.hpp \\\n \t${pb_srcdir}/detail/list_update_map_/lu_map_.hpp \\\n \t${pb_srcdir}/detail/list_update_map_/trace_fn_imps.hpp \\\n-\t${pb_srcdir}/detail/list_update_policy/counter_lu_metadata.hpp \\\n-\t${pb_srcdir}/detail/list_update_policy/counter_lu_policy_imp.hpp \\\n-\t${pb_srcdir}/detail/list_update_policy/mtf_lu_policy_imp.hpp \\\n+\t${pb_srcdir}/detail/list_update_policy/lu_counter_metadata.hpp \\\n \t${pb_srcdir}/detail/list_update_policy/sample_update_policy.hpp \\\n \t${pb_srcdir}/detail/debug_map_base.hpp \\\n-\t${pb_srcdir}/detail/ov_tree_map_/cond_dtor.hpp \\\n \t${pb_srcdir}/detail/ov_tree_map_/constructors_destructor_fn_imps.hpp \\\n \t${pb_srcdir}/detail/ov_tree_map_/debug_fn_imps.hpp \\\n \t${pb_srcdir}/detail/ov_tree_map_/erase_fn_imps.hpp \\\n@@ -657,30 +650,20 @@ pb_headers5 = \\\n \t${pb_srcdir}/detail/pairing_heap_/insert_fn_imps.hpp \\\n \t${pb_srcdir}/detail/pairing_heap_/pairing_heap_.hpp \\\n \t${pb_srcdir}/detail/pairing_heap_/split_join_fn_imps.hpp \\\n-\t${pb_srcdir}/detail/pat_trie_/child_iterator.hpp \\\n-\t${pb_srcdir}/detail/pat_trie_/cond_dtor_entry_dealtor.hpp \\\n-\t${pb_srcdir}/detail/pat_trie_/const_child_iterator.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/constructors_destructor_fn_imps.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/debug_fn_imps.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/erase_fn_imps.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/find_fn_imps.hpp \\\n-\t${pb_srcdir}/detail/pat_trie_/head.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/info_fn_imps.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/insert_join_fn_imps.hpp \\\n-\t${pb_srcdir}/detail/pat_trie_/internal_node.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/iterators_fn_imps.hpp \\\n-\t${pb_srcdir}/detail/pat_trie_/leaf.hpp \\\n-\t${pb_srcdir}/detail/pat_trie_/node_base.hpp \\\n-\t${pb_srcdir}/detail/pat_trie_/node_iterators.hpp \\\n-\t${pb_srcdir}/detail/pat_trie_/node_metadata_base.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/pat_trie_.hpp \\\n-\t${pb_srcdir}/detail/pat_trie_/point_iterators.hpp \\\n+\t${pb_srcdir}/detail/pat_trie_/pat_trie_base.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/policy_access_fn_imps.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/r_erase_fn_imps.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/rotate_fn_imps.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/split_fn_imps.hpp \\\n-\t${pb_srcdir}/detail/pat_trie_/split_join_branch_bag.hpp \\\n-\t${pb_srcdir}/detail/pat_trie_/synth_e_access_traits.hpp \\\n+\t${pb_srcdir}/detail/pat_trie_/synth_access_traits.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/trace_fn_imps.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/traits.hpp \\\n \t${pb_srcdir}/detail/pat_trie_/update_fn_imps.hpp \\\n@@ -737,22 +720,20 @@ pb_headers7 = \\\n \t${pb_srcdir}/detail/thin_heap_/thin_heap_.hpp \\\n \t${pb_srcdir}/detail/thin_heap_/trace_fn_imps.hpp \\\n \t${pb_srcdir}/detail/tree_policy/node_metadata_selector.hpp \\\n-\t${pb_srcdir}/detail/tree_policy/null_node_update_imp.hpp \\\n \t${pb_srcdir}/detail/tree_policy/order_statistics_imp.hpp \\\n \t${pb_srcdir}/detail/tree_policy/sample_tree_node_update.hpp \\\n \t${pb_srcdir}/detail/tree_trace_base.hpp \\\n \t${pb_srcdir}/detail/trie_policy/node_metadata_selector.hpp \\\n-\t${pb_srcdir}/detail/trie_policy/null_node_update_imp.hpp \\\n \t${pb_srcdir}/detail/trie_policy/order_statistics_imp.hpp \\\n \t${pb_srcdir}/detail/trie_policy/prefix_search_node_update_imp.hpp \\\n-\t${pb_srcdir}/detail/trie_policy/sample_trie_e_access_traits.hpp \\\n+\t${pb_srcdir}/detail/trie_policy/sample_trie_access_traits.hpp \\\n \t${pb_srcdir}/detail/trie_policy/sample_trie_node_update.hpp \\\n-\t${pb_srcdir}/detail/trie_policy/string_trie_e_access_traits_imp.hpp \\\n+\t${pb_srcdir}/detail/trie_policy/trie_string_access_traits_imp.hpp \\\n \t${pb_srcdir}/detail/trie_policy/trie_policy_base.hpp \\\n \t${pb_srcdir}/detail/types_traits.hpp \\\n \t${pb_srcdir}/detail/type_utils.hpp \\\n \t${pb_srcdir}/detail/unordered_iterator/const_iterator.hpp \\\n-\t${pb_srcdir}/detail/unordered_iterator/const_point_iterator.hpp \\\n+\t${pb_srcdir}/detail/unordered_iterator/point_const_iterator.hpp \\\n \t${pb_srcdir}/detail/unordered_iterator/iterator.hpp \\\n \t${pb_srcdir}/detail/unordered_iterator/point_iterator.hpp\n "}, {"sha": "d366f431ccf7b1ef48b0873b6f8eb03eee73bde4", "filename": "libstdc++-v3/include/ext/pb_ds/assoc_container.hpp", "status": "modified", "additions": 116, "deletions": 179, "changes": 295, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -46,90 +46,20 @@\n #include <ext/pb_ds/tag_and_trait.hpp>\n #include <ext/pb_ds/detail/standard_policies.hpp>\n #include <ext/pb_ds/detail/container_base_dispatch.hpp>\n-#include <ext/pb_ds/detail/basic_tree_policy/traits.hpp>\n+#include <ext/pb_ds/detail/branch_policy/traits.hpp>\n \n namespace __gnu_pbds\n {\n-  /** @defgroup pbds Policy-Based Data Structures\n-   *  @ingroup extensions\n-   *\n-   *  This is a library of policy-based elementary data structures:\n-   *  associative containers and priority queues. It is designed for\n-   *  high-performance, flexibility, semantic safety, and conformance\n-   *  to the corresponding containers in std (except for some points\n-   *  where it differs by design).\n-   *\n-   *  For details, see: \n-   *  http://gcc.gnu.org/onlinedocs/libstdc++/ext/pb_ds/index.html\n-   *\n+  /**\n+   *  @addtogroup pbds\n    *  @{\n    */\n- \n-#define PB_DS_BASE_C_DEC \\\n-  detail::container_base_dispatch<Key, Mapped, Tag, Policy_Tl, Allocator>::type\n-\n-  /// An abstract basic associative container.\n-  template<typename Key, \n-\t   typename Mapped, \n-\t   typename Tag, \n-\t   typename Policy_Tl, \n-\t   typename Allocator>\n-  class container_base : public PB_DS_BASE_C_DEC\n-  {\n-  private:\n-    typedef typename PB_DS_BASE_C_DEC \t\t\tbase_type;\n-\n-  public:\n-    typedef Tag \t\t\t\t\tcontainer_category;\n-    typedef Allocator \t\t\t\t\tallocator_type;\n-    typedef typename allocator_type::size_type \t\tsize_type;\n-    typedef typename allocator_type::difference_type \tdifference_type;\n-\n-    // key_type\n-    typedef typename allocator_type::template rebind<Key>::other::value_type key_type;\n-    typedef typename allocator_type::template rebind<key_type>::other key_rebind;\n-    typedef typename key_rebind::reference \t\tkey_reference;\n-    typedef typename key_rebind::const_reference \tconst_key_reference;\n-    typedef typename key_rebind::pointer \t\tkey_pointer;\n-    typedef typename key_rebind::const_pointer \t\tconst_key_pointer;\n-\n-    // mapped_type\n-    typedef Mapped \t\t\t\t\tmapped_type;\n-    typedef typename allocator_type::template rebind<mapped_type>::other mapped_rebind;\n-    typedef typename mapped_rebind::reference \t\tmapped_reference;\n-    typedef typename mapped_rebind::const_reference\tconst_mapped_reference;\n-    typedef typename mapped_rebind::pointer \t\tmapped_pointer;\n-    typedef typename mapped_rebind::const_pointer \tconst_mapped_pointer;\n-\n-    // value_type\n-    typedef typename base_type::value_type \t\tvalue_type;\n-    typedef typename allocator_type::template rebind<value_type>::other value_rebind;\n-    typedef typename value_rebind::reference\t\treference;\n-    typedef typename value_rebind::const_reference \tconst_reference;\n-    typedef typename value_rebind::pointer \t\tpointer;\n-    typedef typename value_rebind::const_pointer \tconst_pointer;\n-\n-    // iterators\n-    typedef typename base_type::iterator \t\titerator;\n-    typedef typename base_type::const_iterator \t\tconst_iterator;\n-    typedef typename base_type::point_iterator \t\tpoint_iterator;\n-    typedef typename base_type::const_point_iterator \tconst_point_iterator;\n-\n-    virtual\n-    ~container_base() { }\n-\n-  protected:\n-#define PB_DS_CLASS_NAME \t\tcontainer_base\n-#include <ext/pb_ds/detail/constructors_destructor_fn_imps.hpp>\n-#undef PB_DS_CLASS_NAME\n-  };\n-\n-#undef PB_DS_BASE_C_DEC\n \n-\n-#define PB_DS_BASE_C_DEC \\\n-  container_base<Key, Mapped, Tag, typename __gnu_cxx::typelist::append< \\\n-  typename __gnu_cxx::typelist::create4<Hash_Fn, Eq_Fn, Resize_Policy, detail::integral_constant<int, Store_Hash> >::type, Policy_TL>::type, Allocator>\n+#define PB_DS_HASH_BASE \\\n+  detail::container_base_dispatch<Key, Mapped, _Alloc, Tag, \\\n+    typename __gnu_cxx::typelist::append< \\\n+    typename __gnu_cxx::typelist::create4<Hash_Fn, Eq_Fn, Resize_Policy, \\\n+    detail::integral_constant<int, Store_Hash> >::type, Policy_Tl>::type>::type\n \n   /// An abstract basic hash-based associative container.\n   template<typename Key,\n@@ -139,12 +69,12 @@ namespace __gnu_pbds\n \t   typename Resize_Policy,\n \t   bool Store_Hash,\n \t   typename Tag,\n-\t   typename Policy_TL,\n-\t   typename Allocator>\n-  class basic_hash_table : public PB_DS_BASE_C_DEC\n+\t   typename Policy_Tl,\n+\t   typename _Alloc>\n+  class basic_hash_table : public PB_DS_HASH_BASE\n   {\n   private:\n-    typedef PB_DS_BASE_C_DEC base_type;\n+    typedef typename PB_DS_HASH_BASE \t\tbase_type;\n \n   public:\n     virtual\n@@ -156,17 +86,17 @@ namespace __gnu_pbds\n #undef PB_DS_CLASS_NAME\n \n   private:\n-    basic_hash_table& \n+    basic_hash_table&\n     operator=(const base_type&);\n   };\n \n-#undef PB_DS_BASE_C_DEC\n+#undef PB_DS_HASH_BASE\n \n \n-#define PB_DS_BASE_C_DEC \\\n+#define PB_DS_CC_HASH_BASE \\\n   basic_hash_table<Key, Mapped,\tHash_Fn, Eq_Fn, Resize_Policy, Store_Hash, \\\n \t\t   cc_hash_tag,\t\\\n-\t  typename __gnu_cxx::typelist::create1<Comb_Hash_Fn>::type, Allocator>\n+\t  typename __gnu_cxx::typelist::create1<Comb_Hash_Fn>::type, _Alloc>\n \n   /// A concrete collision-chaining hash-based associative container.\n   template<typename Key,\n@@ -176,24 +106,25 @@ namespace __gnu_pbds\n \t   typename Comb_Hash_Fn = detail::default_comb_hash_fn::type,\n \t   typename Resize_Policy = typename detail::default_resize_policy<Comb_Hash_Fn>::type,\n \t   bool Store_Hash = detail::default_store_hash,\n-\t   typename Allocator = std::allocator<char> >\n-  class cc_hash_table :  public PB_DS_BASE_C_DEC\n+\t   typename _Alloc = std::allocator<char> >\n+  class cc_hash_table :  public PB_DS_CC_HASH_BASE\n   {\n   private:\n-    typedef PB_DS_BASE_C_DEC \tbase_type;\n+    typedef PB_DS_CC_HASH_BASE \t\t\tbase_type;\n \n   public:\n-    typedef Hash_Fn \t\thash_fn;\n-    typedef Eq_Fn \t\teq_fn;\n-    typedef Resize_Policy \tresize_policy;\n-    typedef Comb_Hash_Fn \tcomb_hash_fn;\n+    typedef cc_hash_tag\t       \t\t\tcontainer_category;\n+    typedef Hash_Fn \t\t\t\thash_fn;\n+    typedef Eq_Fn \t\t\t\teq_fn;\n+    typedef Resize_Policy \t\t\tresize_policy;\n+    typedef Comb_Hash_Fn \t\t\tcomb_hash_fn;\n \n     // Default constructor.\n     cc_hash_table() { }\n \n     // Constructor taking some policy objects. r_hash_fn will be\n     // copied by the Hash_Fn object of the container object.\n-    cc_hash_table(const hash_fn& h) \n+    cc_hash_table(const hash_fn& h)\n     : base_type(h) { }\n \n     // Constructor taking some policy objects. r_hash_fn will be\n@@ -217,8 +148,8 @@ namespace __gnu_pbds\n     // r_comb_hash_fn will be copied by the comb_hash_fn object of the\n     // container object, and r_resize_policy will be copied by the\n     // resize_policy object of the container object.\n-    cc_hash_table(const hash_fn& h, const eq_fn& e, const comb_hash_fn& ch, \n-\t\t  const resize_policy& rp)    \n+    cc_hash_table(const hash_fn& h, const eq_fn& e, const comb_hash_fn& ch,\n+\t\t  const resize_policy& rp)\n     : base_type(h, e, ch, rp) { }\n \n     // Constructor taking __iterators to a range of value_types. The\n@@ -269,7 +200,7 @@ namespace __gnu_pbds\n     // object of the container object, and r_resize_policy will be\n     // copied by the resize_policy object of the container object.\n     template<typename It>\n-    cc_hash_table(It first, It last, const hash_fn& h, const eq_fn& e, \n+    cc_hash_table(It first, It last, const hash_fn& h, const eq_fn& e,\n \t\t  const comb_hash_fn& ch, const resize_policy& rp)\n     : base_type(h, e, ch, rp)\n     { this->copy_from_range(first, last); }\n@@ -281,7 +212,7 @@ namespace __gnu_pbds\n     virtual\n     ~cc_hash_table() { }\n \n-    cc_hash_table& \n+    cc_hash_table&\n     operator=(const cc_hash_table& other)\n     {\n       if (this != &other)\n@@ -297,13 +228,13 @@ namespace __gnu_pbds\n     { base_type::swap(other); }\n   };\n \n-#undef PB_DS_BASE_C_DEC\n+#undef PB_DS_CC_HASH_BASE\n \n \n-#define PB_DS_BASE_C_DEC \\\n+#define PB_DS_GP_HASH_BASE \\\n   basic_hash_table<Key, Mapped,\tHash_Fn, Eq_Fn, Resize_Policy, Store_Hash, \\\n \t\t   gp_hash_tag, \\\n-\t\t   typename __gnu_cxx::typelist::create2<Comb_Probe_Fn, Probe_Fn>::type, Allocator>\n+  typename __gnu_cxx::typelist::create2<Comb_Probe_Fn, Probe_Fn>::type, _Alloc>\n \n   /// A concrete general-probing hash-based associative container.\n   template<typename Key,\n@@ -314,18 +245,19 @@ namespace __gnu_pbds\n \t   typename Probe_Fn = typename detail::default_probe_fn<Comb_Probe_Fn>::type,\n \t   typename Resize_Policy = typename detail::default_resize_policy<Comb_Probe_Fn>::type,\n \t   bool Store_Hash = detail::default_store_hash,\n-\t   typename Allocator = std::allocator<char> >\n-  class gp_hash_table : public PB_DS_BASE_C_DEC\n+\t   typename _Alloc = std::allocator<char> >\n+  class gp_hash_table : public PB_DS_GP_HASH_BASE\n   {\n   private:\n-    typedef PB_DS_BASE_C_DEC \tbase_type;\n+    typedef PB_DS_GP_HASH_BASE \t\t\tbase_type;\n \n   public:\n-    typedef Hash_Fn \t\thash_fn;\n-    typedef Eq_Fn \t\teq_fn;\n-    typedef Comb_Probe_Fn\tcomb_probe_fn;\n-    typedef Probe_Fn \t\tprobe_fn;\n-    typedef Resize_Policy \tresize_policy;\n+    typedef gp_hash_tag\t       \t\t\tcontainer_category;\n+    typedef Hash_Fn \t\t\t\thash_fn;\n+    typedef Eq_Fn \t\t\t\teq_fn;\n+    typedef Comb_Probe_Fn\t\t\tcomb_probe_fn;\n+    typedef Probe_Fn \t\t\t\tprobe_fn;\n+    typedef Resize_Policy \t\t\tresize_policy;\n \n     // Default constructor.\n     gp_hash_table() { }\n@@ -356,7 +288,7 @@ namespace __gnu_pbds\n     // r_comb_probe_fn will be copied by the comb_probe_fn object of\n     // the container object, and r_probe_fn will be copied by the\n     // probe_fn object of the container object.\n-    gp_hash_table(const hash_fn& h, const eq_fn& e, const comb_probe_fn& cp, \n+    gp_hash_table(const hash_fn& h, const eq_fn& e, const comb_probe_fn& cp,\n \t\t  const probe_fn& p)\n     : base_type(h, e, cp, p) { }\n \n@@ -367,7 +299,7 @@ namespace __gnu_pbds\n     // the container object, r_probe_fn will be copied by the probe_fn\n     // object of the container object, and r_resize_policy will be\n     // copied by the Resize_Policy object of the container object.\n-    gp_hash_table(const hash_fn& h, const eq_fn& e, const comb_probe_fn& cp, \n+    gp_hash_table(const hash_fn& h, const eq_fn& e, const comb_probe_fn& cp,\n \t\t  const probe_fn& p, const resize_policy& rp)\n     : base_type(h, e, cp, p, rp) { }\n \n@@ -406,7 +338,7 @@ namespace __gnu_pbds\n     // object, and r_comb_probe_fn will be copied by the comb_probe_fn\n     // object of the container object.\n     template<typename It>\n-    gp_hash_table(It first, It last, const hash_fn& h, const eq_fn& e, \n+    gp_hash_table(It first, It last, const hash_fn& h, const eq_fn& e,\n \t\t  const comb_probe_fn& cp)\n     : base_type(h, e, cp)\n     { base_type::copy_from_range(first, last); }\n@@ -420,7 +352,7 @@ namespace __gnu_pbds\n     // object of the container object, and r_probe_fn will be copied\n     // by the probe_fn object of the container object.\n     template<typename It>\n-    gp_hash_table(It first, It last, const hash_fn& h, const eq_fn& e, \n+    gp_hash_table(It first, It last, const hash_fn& h, const eq_fn& e,\n \t\t  const comb_probe_fn& cp, const probe_fn& p)\n     : base_type(h, e, cp, p)\n     { base_type::copy_from_range(first, last); }\n@@ -436,8 +368,8 @@ namespace __gnu_pbds\n     // r_resize_policy will be copied by the resize_policy object of\n     // the container object.\n     template<typename It>\n-    gp_hash_table(It first, It last, const hash_fn& h, const eq_fn& e, \n-\t\t  const comb_probe_fn& cp, const probe_fn& p, \n+    gp_hash_table(It first, It last, const hash_fn& h, const eq_fn& e,\n+\t\t  const comb_probe_fn& cp, const probe_fn& p,\n \t\t  const resize_policy& rp)\n     : base_type(h, e, cp, p, rp)\n     { base_type::copy_from_range(first, last); }\n@@ -449,7 +381,7 @@ namespace __gnu_pbds\n     virtual\n     ~gp_hash_table() { }\n \n-    gp_hash_table& \n+    gp_hash_table&\n     operator=(const gp_hash_table& other)\n     {\n       if (this != &other)\n@@ -465,56 +397,58 @@ namespace __gnu_pbds\n     { base_type::swap(other); }\n   };\n \n-#undef PB_DS_BASE_C_DEC\n-\n+#undef PB_DS_GP_HASH_BASE\n \n-#define PB_DS_BASE_C_DEC \\\n-  container_base<Key, Mapped, Tag, Policy_Tl, Allocator>\n+#define PB_DS_BRANCH_BASE \\\n+  detail::container_base_dispatch<Key, Mapped, _Alloc, Tag, Policy_Tl>::type\n \n   /// An abstract basic tree-like (tree, trie) associative container.\n-  template<typename Key, typename Mapped, typename Tag, \n-\t   typename Node_Update, typename Policy_Tl, typename Allocator>\n-  class basic_tree : public PB_DS_BASE_C_DEC\n+  template<typename Key, typename Mapped, typename Tag,\n+\t   typename Node_Update, typename Policy_Tl, typename _Alloc>\n+  class basic_branch : public PB_DS_BRANCH_BASE\n   {\n   private:\n-    typedef PB_DS_BASE_C_DEC \tbase_type;\n+    typedef typename PB_DS_BRANCH_BASE \t       \tbase_type;\n \n   public:\n-    typedef Node_Update \tnode_update;\n+    typedef Node_Update \t\t\tnode_update;\n \n     virtual\n-    ~basic_tree() { }\n+    ~basic_branch() { }\n \n   protected:\n-#define PB_DS_CLASS_NAME \t\tbasic_tree\n+#define PB_DS_CLASS_NAME \t\tbasic_branch\n #include <ext/pb_ds/detail/constructors_destructor_fn_imps.hpp>\n #undef PB_DS_CLASS_NAME\n   };\n \n-#undef PB_DS_BASE_C_DEC\n+#undef PB_DS_BRANCH_BASE\n \n \n-#define PB_DS_TREE_NODE_AND_IT_TRAITS_C_DEC \\\n-  detail::tree_traits<Key, Mapped,Cmp_Fn,Node_Update,Tag, Allocator>\n+#define PB_DS_TREE_NODE_AND_IT_TRAITS \\\n+  detail::tree_traits<Key, Mapped,Cmp_Fn,Node_Update,Tag,_Alloc>\n \n-#define PB_DS_BASE_C_DEC \\\n-  basic_tree<Key,Mapped,Tag,typename PB_DS_TREE_NODE_AND_IT_TRAITS_C_DEC::node_update, \\\n-\t     typename __gnu_cxx::typelist::create2<Cmp_Fn, PB_DS_TREE_NODE_AND_IT_TRAITS_C_DEC >::type, Allocator>\n+#define PB_DS_TREE_BASE \\\n+  basic_branch<Key,Mapped, Tag, \\\n+\t       typename PB_DS_TREE_NODE_AND_IT_TRAITS::node_update, \\\n+\t       typename __gnu_cxx::typelist::create2<Cmp_Fn, \\\n+\t       PB_DS_TREE_NODE_AND_IT_TRAITS>::type, _Alloc>\n \n-  /// A concrete basic tree-based associative container.\n+  /// A basic tree-based associative container.\n   template<typename Key, typename Mapped, typename Cmp_Fn = std::less<Key>,\n \t   typename Tag = rb_tree_tag,\n-\t   template<typename Const_Node_Iterator, typename Node_Iterator, typename Cmp_Fn_, typename Allocator_>\n-  class Node_Update = __gnu_pbds::null_tree_node_update,\n-\t   typename Allocator = std::allocator<char> >\n-  class tree : public PB_DS_BASE_C_DEC\n+\t   template<typename Node_CItr, typename Node_Itr,\n+\t\t    typename Cmp_Fn_, typename _Alloc_>\n+\t   class Node_Update = null_node_update,\n+\t   typename _Alloc = std::allocator<char> >\n+  class tree : public PB_DS_TREE_BASE\n   {\n   private:\n-    typedef PB_DS_BASE_C_DEC \tbase_type;\n+    typedef PB_DS_TREE_BASE \t\t\tbase_type;\n \n   public:\n     // Comparison functor type.\n-    typedef Cmp_Fn \t\tcmp_fn;\n+    typedef Cmp_Fn \t\t\t\tcmp_fn;\n \n     tree() { }\n \n@@ -545,7 +479,7 @@ namespace __gnu_pbds\n     virtual\n     ~tree() { }\n \n-    tree& \n+    tree&\n     operator=(const tree& other)\n     {\n       if (this != &other)\n@@ -561,43 +495,46 @@ namespace __gnu_pbds\n     { base_type::swap(other); }\n   };\n \n-#undef PB_DS_BASE_C_DEC\n-#undef PB_DS_TREE_NODE_AND_IT_TRAITS_C_DEC\n+#undef PB_DS_TREE_BASE\n+#undef PB_DS_TREE_NODE_AND_IT_TRAITS\n \n \n-#define PB_DS_TRIE_NODE_AND_ITS_TRAITS \\\n-  detail::trie_traits<Key,Mapped,E_Access_Traits,Node_Update,Tag,Allocator>\n+#define PB_DS_TRIE_NODE_AND_IT_TRAITS \\\n+  detail::trie_traits<Key,Mapped,_ATraits,Node_Update,Tag,_Alloc>\n \n-#define PB_DS_BASE_C_DEC \\\n-  basic_tree<Key,Mapped,Tag, typename PB_DS_TRIE_NODE_AND_ITS_TRAITS::node_update, \\\n-\t     typename __gnu_cxx::typelist::create2<E_Access_Traits, PB_DS_TRIE_NODE_AND_ITS_TRAITS >::type, Allocator>\n+#define PB_DS_TRIE_BASE \\\n+  basic_branch<Key,Mapped,Tag, \\\n+\t       typename PB_DS_TRIE_NODE_AND_IT_TRAITS::node_update, \\\n+\t       typename __gnu_cxx::typelist::create2<_ATraits, \\\n+\t       PB_DS_TRIE_NODE_AND_IT_TRAITS >::type, _Alloc>\n \n-  /// A concrete basic trie-based associative container.\n+  /// A basic trie-based associative container.\n   template<typename Key,\n \t   typename Mapped,\n-\t   typename E_Access_Traits = typename detail::default_trie_e_access_traits<Key>::type,\n+\t   typename _ATraits = \\\n+\t\t    typename detail::default_trie_access_traits<Key>::type,\n \t   typename Tag = pat_trie_tag,\n-\t   template<typename Const_Node_Iterator,\n-\t\t    typename Node_Iterator,\n-\t\t    typename E_Access_Traits_,\n-\t\t    typename Allocator_>\n-  class Node_Update = null_trie_node_update,\n-\t   typename Allocator = std::allocator<char> >\n-  class trie : public PB_DS_BASE_C_DEC\n+\t   template<typename Node_CItr,\n+\t\t    typename Node_Itr,\n+\t\t    typename _ATraits_,\n+\t\t    typename _Alloc_>\n+\t   class Node_Update = null_node_update,\n+\t   typename _Alloc = std::allocator<char> >\n+  class trie : public PB_DS_TRIE_BASE\n   {\n   private:\n-    typedef PB_DS_BASE_C_DEC base_type;\n+    typedef PB_DS_TRIE_BASE\t\t\tbase_type;\n \n   public:\n     // Element access traits type.\n-    typedef E_Access_Traits e_access_traits;\n+    typedef _ATraits \t\t\t\taccess_traits;\n \n     trie() { }\n \n-    // Constructor taking some policy objects. r_e_access_traits will\n-    // be copied by the E_Access_Traits object of the container\n+    // Constructor taking some policy objects. r_access_traits will\n+    // be copied by the _ATraits object of the container\n     // object.\n-    trie(const e_access_traits& t)\n+    trie(const access_traits& t)\n     : base_type(t) { }\n \n     // Constructor taking __iterators to a range of value_types. The\n@@ -611,7 +548,7 @@ namespace __gnu_pbds\n     // some policy objects. The value_types between first_it and\n     // last_it will be inserted into the container object.\n     template<typename It>\n-    trie(It first, It last, const e_access_traits& t)\n+    trie(It first, It last, const access_traits& t)\n     : base_type(t)\n     { base_type::copy_from_range(first, last); }\n \n@@ -621,7 +558,7 @@ namespace __gnu_pbds\n     virtual\n     ~trie() { }\n \n-    trie& \n+    trie&\n     operator=(const trie& other)\n     {\n       if (this != &other)\n@@ -637,29 +574,29 @@ namespace __gnu_pbds\n     { base_type::swap(other); }\n   };\n \n-#undef PB_DS_BASE_C_DEC\n-#undef PB_DS_TRIE_NODE_AND_ITS_TRAITS\n+#undef PB_DS_TRIE_BASE\n+#undef PB_DS_TRIE_NODE_AND_IT_TRAITS\n \n \n-#define PB_DS_BASE_C_DEC \\\n-  container_base<Key, Mapped, list_update_tag, \\\n-\t\t typename __gnu_cxx::typelist::create2<Eq_Fn, Update_Policy>::type, Allocator>\n+#define PB_DS_LU_BASE \\\n+  detail::container_base_dispatch<Key, Mapped, _Alloc, list_update_tag,\t\\\n+    typename __gnu_cxx::typelist::create2<Eq_Fn, Update_Policy>::type>::type\n \n   /// A list-update based associative container.\n   template<typename Key,\n \t   typename Mapped,\n \t   class Eq_Fn = typename detail::default_eq_fn<Key>::type,\n \t   class Update_Policy = detail::default_update_policy::type,\n-\t   class Allocator = std::allocator<char> >\n-  class list_update : public PB_DS_BASE_C_DEC\n+\t   class _Alloc = std::allocator<char> >\n+  class list_update : public PB_DS_LU_BASE\n   {\n   private:\n-    typedef PB_DS_BASE_C_DEC \tbase_type;\n+    typedef typename PB_DS_LU_BASE \t\tbase_type;\n \n   public:\n-    typedef Eq_Fn \t\teq_fn;\n-    typedef Update_Policy \tupdate_policy;\n-    typedef Allocator \t\tallocator;\n+    typedef list_update_tag\t       \t\tcontainer_category;\n+    typedef Eq_Fn \t\t\t\teq_fn;\n+    typedef Update_Policy \t\t\tupdate_policy;\n \n     list_update() { }\n \n@@ -676,7 +613,7 @@ namespace __gnu_pbds\n     virtual\n     ~list_update() { }\n \n-    list_update& \n+    list_update&\n     operator=(const list_update& other)\n     {\n       if (this !=& other)\n@@ -692,9 +629,9 @@ namespace __gnu_pbds\n     { base_type::swap(other); }\n   };\n \n-#undef PB_DS_BASE_C_DEC\n+#undef PB_DS_LU_BASE\n \n   // @} group pbds\n } // namespace __gnu_pbds\n \n-#endif \n+#endif"}, {"sha": "aac1397ddfb76c307d73b5cf71c8ed3fc3c28570", "filename": "libstdc++-v3/include/ext/pb_ds/detail/basic_types.hpp", "status": "removed", "additions": 0, "deletions": 211, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbasic_types.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbasic_types.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbasic_types.hpp?ref=ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c", "patch": "@@ -1,211 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 3, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file basic_types.hpp\n- * Contains basic types used by containers.\n- */\n-\n-#ifndef PB_DS_BASIC_TYPES_HPP\n-#define PB_DS_BASIC_TYPES_HPP\n-\n-#include <algorithm>\n-#include <utility>\n-#include <ext/pb_ds/tag_and_trait.hpp>\n-#include <ext/pb_ds/detail/type_utils.hpp>\n-\n-namespace __gnu_pbds\n-{\n-  namespace detail\n-  {\n-    template<typename Key, typename Mapped, typename Allocator, bool Store_Hash>\n-    struct value_type_base;\n-\n-    /**\n-     * Specialization of value_type_base for the case where the hash value\n-     * is not stored alongside each value.\n-     **/\n-    template<typename Key, typename Mapped, typename Allocator>\n-    struct value_type_base<Key, Mapped, Allocator, false>\n-    {\n-      typedef typename Allocator::template rebind<Mapped>::other mapped_type_allocator;\n-      typedef typename mapped_type_allocator::value_type mapped_type;\n-      typedef typename mapped_type_allocator::pointer mapped_pointer;\n-      typedef typename mapped_type_allocator::const_pointer const_mapped_pointer;\n-      typedef typename mapped_type_allocator::reference mapped_reference;\n-      typedef typename mapped_type_allocator::const_reference const_mapped_reference;\n-\n-      typedef typename Allocator::template rebind<std::pair<const Key, Mapped> >::other value_type_allocator;\n-      typedef typename value_type_allocator::value_type value_type;\n-      typedef typename value_type_allocator::pointer pointer;\n-      typedef typename value_type_allocator::const_pointer const_pointer;\n-      typedef typename value_type_allocator::reference reference;\n-      typedef typename value_type_allocator::const_reference const_reference;\n-\n-      struct stored_value_type\n-      {\n-\tvalue_type m_value;\n-      };\n-    };\n-\n-    /**\n-     * Specialization of value_type_base for the case where the hash value\n-     * is stored alongside each value.\n-     **/\n-    template<typename Key, typename Mapped, typename Allocator>\n-    struct value_type_base<Key, Mapped, Allocator, true>\n-    {\n-      typedef typename Allocator::template rebind<Mapped>::other mapped_type_allocator;\n-      typedef typename mapped_type_allocator::value_type mapped_type;\n-      typedef typename mapped_type_allocator::pointer mapped_pointer;\n-      typedef typename mapped_type_allocator::const_pointer const_mapped_pointer;\n-      typedef typename mapped_type_allocator::reference mapped_reference;\n-      typedef typename mapped_type_allocator::const_reference const_mapped_reference;\n-\n-      typedef typename Allocator::template rebind<std::pair<const Key, Mapped> >::other value_type_allocator;\n-      typedef typename value_type_allocator::value_type value_type;\n-      typedef typename value_type_allocator::pointer pointer;\n-      typedef typename value_type_allocator::const_pointer const_pointer;\n-      typedef typename value_type_allocator::reference reference;\n-      typedef typename value_type_allocator::const_reference const_reference;\n-\n-      struct stored_value_type\n-      {\n-\tvalue_type m_value;\n-\ttypename Allocator::size_type m_hash;\n-      };\n-    };\n-\n-#define PB_DS_CLASS_T_DEC \\\n-    template<typename Key, typename Allocator>\n-\n-#define PB_DS_CLASS_C_DEC \\\n-    value_type_base<Key, null_mapped_type, Allocator, false>\n-\n-    /**\n-     * Specialization of value_type_base for the case where the hash value\n-     * is not stored alongside each value.\n-     **/\n-    template<typename Key, typename Allocator>\n-    struct value_type_base<Key, null_mapped_type, Allocator, false>\n-    {\n-      typedef typename Allocator::template rebind<null_mapped_type>::other mapped_type_allocator;\n-      typedef typename mapped_type_allocator::value_type mapped_type;\n-      typedef typename mapped_type_allocator::pointer mapped_pointer;\n-      typedef typename mapped_type_allocator::const_pointer const_mapped_pointer;\n-      typedef typename mapped_type_allocator::reference mapped_reference;\n-      typedef typename mapped_type_allocator::const_reference const_mapped_reference;\n-\n-      typedef Key value_type;\n-\n-      typedef typename Allocator::template rebind<value_type>::other value_type_allocator;\n-      typedef typename value_type_allocator::pointer pointer;\n-      typedef typename value_type_allocator::const_pointer const_pointer;\n-      typedef typename value_type_allocator::reference reference;\n-      typedef typename value_type_allocator::const_reference const_reference;\n-\n-      struct stored_value_type\n-      {\n-\tvalue_type m_value;\n-      };\n-\n-      static null_mapped_type s_null_mapped;\n-    };\n-\n-    PB_DS_CLASS_T_DEC\n-    null_mapped_type PB_DS_CLASS_C_DEC::s_null_mapped;\n-\n-#undef PB_DS_CLASS_T_DEC\n-#undef PB_DS_CLASS_C_DEC\n-\n-#define PB_DS_CLASS_T_DEC \\\n-    template<typename Key, typename Allocator>\n-\n-#define PB_DS_CLASS_C_DEC \\\n-    value_type_base<Key, null_mapped_type, Allocator, true>\n-\n-    /**\n-     * Specialization of value_type_base for the case where the hash value\n-     * is stored alongside each value.\n-     **/\n-    template<typename Key, typename Allocator>\n-    struct value_type_base<Key, null_mapped_type, Allocator, true>\n-    {\n-      typedef typename Allocator::template rebind<null_mapped_type>::other mapped_type_allocator;\n-      typedef typename mapped_type_allocator::value_type mapped_type;\n-      typedef typename mapped_type_allocator::pointer mapped_pointer;\n-      typedef typename mapped_type_allocator::const_pointer const_mapped_pointer;\n-      typedef typename mapped_type_allocator::reference mapped_reference;\n-      typedef typename mapped_type_allocator::const_reference const_mapped_reference;\n-\n-      typedef Key value_type;\n-\n-      typedef typename Allocator::template rebind<value_type>::other value_type_allocator;\n-      typedef typename value_type_allocator::pointer pointer;\n-      typedef typename value_type_allocator::const_pointer const_pointer;\n-      typedef typename value_type_allocator::reference reference;\n-      typedef typename value_type_allocator::const_reference const_reference;\n-\n-      struct stored_value_type\n-      {\n-\tvalue_type m_value;\n-\ttypename Allocator::size_type m_hash;\n-      };\n-\n-      static null_mapped_type s_null_mapped;\n-    };\n-\n-    PB_DS_CLASS_T_DEC\n-    null_mapped_type PB_DS_CLASS_C_DEC::s_null_mapped;\n-\n-#undef PB_DS_CLASS_T_DEC\n-#undef PB_DS_CLASS_C_DEC\n-\n-    template<typename Key, typename Mapped>\n-    struct no_throw_copies\n-    {\n-      typedef integral_constant<int, is_simple<Key>::value && is_simple<Mapped>::value> indicator;\n-    };\n-\n-    template<typename Key>\n-    struct no_throw_copies<Key, null_mapped_type>\n-    {\n-      typedef integral_constant<int, is_simple<Key>::value> indicator;\n-    };\n-  } // namespace detail\n-} // namespace __gnu_pbds\n-\n-#endif \n-"}, {"sha": "a875e300d4d3984951d3a1b6480efe15f622618b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/bin_search_tree_.hpp", "status": "modified", "additions": 152, "deletions": 240, "changes": 392, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fbin_search_tree_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fbin_search_tree_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fbin_search_tree_.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,22 +34,20 @@\n // warranty.\n \n /**\n- * @file bin_search_tree_.hpp\n- * Contains an implementation class for bin_search_tree_.\n- */\n-/*\n- * This implementation uses an idea from the SGI STL (using a @a header node\n- *    which is needed for efficient iteration).\n+ *  @file bin_search_tree_/bin_search_tree_.hpp\n+ *  Contains an implementation class for binary search tree.\n  */\n \n #include <ext/pb_ds/exception.hpp>\n+#include <ext/pb_ds/tree_policy.hpp>\n #include <ext/pb_ds/detail/eq_fn/eq_by_less.hpp>\n #include <ext/pb_ds/detail/types_traits.hpp>\n-#include <ext/pb_ds/detail/debug_map_base.hpp>\n-#include <ext/pb_ds/tree_policy.hpp>\n #include <ext/pb_ds/detail/cond_dealtor.hpp>\n #include <ext/pb_ds/detail/type_utils.hpp>\n #include <ext/pb_ds/detail/tree_trace_base.hpp>\n+#ifdef _GLIBCXX_DEBUG\n+#include <ext/pb_ds/detail/debug_map_base.hpp>\n+#endif\n #include <utility>\n #include <functional>\n #include <debug/debug.h>\n@@ -58,201 +56,129 @@ namespace __gnu_pbds\n {\n   namespace detail\n   {\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n-    template<typename Key, typename Mapped, class Cmp_Fn,\t\t\\\n-\t     class Node_And_It_Traits, class Allocator>\n-\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-#define PB_DS_CLASS_NAME\t\t\t\\\n-    bin_search_tree_data_\n-#endif \n+#define PB_DS_BIN_TREE_NAME bin_search_tree_map\n+#endif\n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n-#define PB_DS_CLASS_NAME\t\t\t\\\n-    bin_search_tree_no_data_\n-#endif \n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\t\\\n-    PB_DS_CLASS_NAME<\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\t\\\n-\t\t\t\t\t\tMapped,\t\t\t\\\n-\t\t\t\t\t\tCmp_Fn,\t\t\t\\\n-\t\t\t\t\t\tNode_And_It_Traits,\t\\\n-\t\t\t\t\t\tAllocator>\n-\n-#define PB_DS_TYPES_TRAITS_C_DEC\t\t\t\t\\\n-    types_traits<\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\t\tMapped,\t\t\\\n-\t\t\t\t\t\tAllocator,\t\\\n-\t\t\t\t\t\tfalse>\n+#define PB_DS_BIN_TREE_NAME bin_search_tree_set\n+#endif\n \n-#ifdef _GLIBCXX_DEBUG\n-#define PB_DS_DEBUG_MAP_BASE_C_DEC\t\t\t\t\t\\\n-    debug_map_base<Key,\teq_by_less<Key, Cmp_Fn>, \\\n-\t      typename Allocator::template rebind<Key>::other::const_reference>\n-#endif \n+#define PB_DS_CLASS_T_DEC \\\n+    template<typename Key, typename Mapped, typename Cmp_Fn, \\\n+\t     typename Node_And_It_Traits, typename _Alloc>\n \n-#ifdef PB_DS_DATA_TRUE_INDICATOR\n-#define PB_DS_V2F(X) (X).first\n-#define PB_DS_V2S(X) (X).second\n-#define PB_DS_EP2VP(X)& ((X)->m_value)\n-#endif \n+#define PB_DS_CLASS_C_DEC \\\n+    PB_DS_BIN_TREE_NAME<Key, Mapped, Cmp_Fn, Node_And_It_Traits, _Alloc>\n \n-#ifdef PB_DS_DATA_FALSE_INDICATOR\n-#define PB_DS_V2F(X) (X)\n-#define PB_DS_V2S(X) Mapped_Data()\n-#define PB_DS_EP2VP(X)& ((X)->m_value.first)\n-#endif \n+#define PB_DS_BIN_TREE_TRAITS_BASE \\\n+    types_traits<Key, Mapped, _Alloc, false>\n+\n+#ifdef _GLIBCXX_DEBUG\n+#define PB_DS_DEBUG_MAP_BASE_C_DEC  \\\n+    debug_map_base<Key,\teq_by_less<Key, Cmp_Fn>, \\\n+\t      typename _Alloc::template rebind<Key>::other::const_reference>\n+#endif\n \n #ifdef PB_DS_TREE_TRACE\n-#define PB_DS_TREE_TRACE_BASE_C_DEC\t\t\t\t\t\\\n-    tree_trace_base<\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\ttypename Node_And_It_Traits::const_node_iterator, \\\n-\t\t\t\t\t\t\t\t\ttypename Node_And_It_Traits::node_iterator, \\\n-\t\t\t\t\t\t\t\t\tCmp_Fn,\t\\\n-\t\t\t\t\t\t\t\t\ttrue, \\\n-\t\t\t\t\t\t\t\t\tAllocator>\n-#endif \n-\n-    /**\n-     * class description = \"8i|\\|4ree $34rc|-| 7r33 74813.\">\n-     **/\n-    template<typename Key,\n-\t     typename Mapped,\n-\t     class Cmp_Fn,\n-\t     class Node_And_It_Traits,\n-\t     class Allocator>\n-    class PB_DS_CLASS_NAME :\n+#define PB_DS_TREE_TRACE_BASE_C_DEC \\\n+    tree_trace_base<typename Node_And_It_Traits::node_const_iterator, \\\n+\t\t    typename Node_And_It_Traits::node_iterator,\t      \\\n+\t\t    Cmp_Fn, true, _Alloc>\n+#endif\n+\n+\n+    /*\n+     *  @brief Binary search tree (BST).\n+     *\n+     *  This implementation uses an idea from the SGI STL (using a @a\n+     *  header node which is needed for efficient iteration).\n+     */\n+    template<typename Key, typename Mapped, typename Cmp_Fn,\n+\t     typename Node_And_It_Traits, typename _Alloc>\n+    class PB_DS_BIN_TREE_NAME :\n #ifdef _GLIBCXX_DEBUG\n       public PB_DS_DEBUG_MAP_BASE_C_DEC,\n-#endif \n+#endif\n #ifdef PB_DS_TREE_TRACE\n       public PB_DS_TREE_TRACE_BASE_C_DEC,\n-#endif \n+#endif\n       public Cmp_Fn,\n-      public PB_DS_TYPES_TRAITS_C_DEC,\n+      public PB_DS_BIN_TREE_TRAITS_BASE,\n       public Node_And_It_Traits::node_update\n     {\n+      typedef Node_And_It_Traits \t\t\ttraits_type;\n \n     protected:\n+      typedef PB_DS_BIN_TREE_TRAITS_BASE \t       \ttraits_base;\n+\n       typedef\n-      typename Allocator::template rebind<\n-      typename Node_And_It_Traits::node>::other\n+      typename _Alloc::template rebind<typename traits_type::node>::other\n       node_allocator;\n \n-      typedef typename node_allocator::value_type node;\n-\n-      typedef typename node_allocator::pointer node_pointer;\n+      typedef typename node_allocator::value_type \tnode;\n+      typedef typename node_allocator::pointer \t\tnode_pointer;\n \n-      typedef PB_DS_TYPES_TRAITS_C_DEC traits_base;\n-\n-      typedef\n-      typename Node_And_It_Traits::null_node_update_pointer\n+      typedef typename traits_type::null_node_update_pointer\n       null_node_update_pointer;\n \n     private:\n-      typedef cond_dealtor< node, Allocator> cond_dealtor_t;\n+      typedef cond_dealtor<node, _Alloc> \t\tcond_dealtor_t;\n \n #ifdef _GLIBCXX_DEBUG\n-      typedef PB_DS_DEBUG_MAP_BASE_C_DEC debug_base;\n-#endif \n+      typedef PB_DS_DEBUG_MAP_BASE_C_DEC \t\tdebug_base;\n+#endif\n \n     public:\n-\n-      typedef typename Allocator::size_type size_type;\n-\n-      typedef typename Allocator::difference_type difference_type;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::key_type key_type;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::key_pointer key_pointer;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_key_pointer\n-      const_key_pointer;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::key_reference key_reference;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_key_reference\n-      const_key_reference;\n+      typedef typename _Alloc::size_type \t\tsize_type;\n+      typedef typename _Alloc::difference_type \tdifference_type;\n+      typedef typename traits_base::key_type \t\tkey_type;\n+      typedef typename traits_base::key_pointer \tkey_pointer;\n+      typedef typename traits_base::key_const_pointer \tkey_const_pointer;\n+      typedef typename traits_base::key_reference \tkey_reference;\n+      typedef typename traits_base::key_const_reference key_const_reference;\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::mapped_type mapped_type;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::mapped_pointer\n-      mapped_pointer;\n+      typedef typename traits_base::mapped_type \tmapped_type;\n+      typedef typename traits_base::mapped_pointer \tmapped_pointer;\n+      typedef typename traits_base::mapped_const_pointer mapped_const_pointer;\n+      typedef typename traits_base::mapped_reference \tmapped_reference;\n+      typedef typename traits_base::mapped_const_reference mapped_const_reference;\n+#endif\n \n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_mapped_pointer\n-      const_mapped_pointer;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::mapped_reference\n-      mapped_reference;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_mapped_reference\n-      const_mapped_reference;\n-#endif \n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::value_type value_type;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::pointer pointer;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::const_pointer const_pointer;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::reference reference;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_reference\n-      const_reference;\n-\n-      typedef\n-      typename Node_And_It_Traits::const_point_iterator\n-      const_point_iterator;\n-\n-      typedef const_point_iterator const_iterator;\n-\n-      typedef typename Node_And_It_Traits::point_iterator point_iterator;\n+      typedef typename traits_base::value_type \t\tvalue_type;\n+      typedef typename traits_base::pointer \t\tpointer;\n+      typedef typename traits_base::const_pointer \tconst_pointer;\n+      typedef typename traits_base::reference \t\treference;\n+      typedef typename traits_base::const_reference \tconst_reference;\n+      typedef typename traits_type::point_const_iterator point_const_iterator;\n \n-      typedef point_iterator iterator;\n+      typedef point_const_iterator \t\t\tconst_iterator;\n+      typedef typename traits_type::point_iterator \tpoint_iterator;\n+      typedef point_iterator \t\t\t\titerator;\n \n-      typedef\n-      typename Node_And_It_Traits::const_reverse_iterator\n-      const_reverse_iterator;\n-\n-      typedef typename Node_And_It_Traits::reverse_iterator reverse_iterator;\n-\n-      typedef\n-      typename Node_And_It_Traits::const_node_iterator\n-      const_node_iterator;\n+      typedef typename traits_type::const_reverse_iterator const_reverse_iterator;\n \n-      typedef typename Node_And_It_Traits::node_iterator node_iterator;\n+      typedef typename traits_type::reverse_iterator \treverse_iterator;\n+      typedef typename traits_type::node_const_iterator node_const_iterator;\n+      typedef typename traits_type::node_iterator \tnode_iterator;\n+      typedef typename traits_type::node_update \tnode_update;\n \n-      typedef Cmp_Fn cmp_fn;\n-\n-      typedef Allocator allocator_type;\n-\n-      typedef typename Node_And_It_Traits::node_update node_update;\n-\n-    public:\n+      typedef Cmp_Fn \t\t\t\t\tcmp_fn;\n+      typedef _Alloc \t\t\t\t\tallocator_type;\n \n-      PB_DS_CLASS_NAME();\n+      PB_DS_BIN_TREE_NAME();\n \n-      PB_DS_CLASS_NAME(const Cmp_Fn& r_cmp_fn);\n+      PB_DS_BIN_TREE_NAME(const Cmp_Fn&);\n \n-      PB_DS_CLASS_NAME(const Cmp_Fn& r_cmp_fn, const node_update& r_update);\n+      PB_DS_BIN_TREE_NAME(const Cmp_Fn&, const node_update&);\n \n-      PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other);\n+      PB_DS_BIN_TREE_NAME(const PB_DS_CLASS_C_DEC&);\n \n       void\n-      swap(PB_DS_CLASS_C_DEC& other);\n+      swap(PB_DS_CLASS_C_DEC&);\n \n-      ~PB_DS_CLASS_NAME();\n+      ~PB_DS_BIN_TREE_NAME();\n \n       inline bool\n       empty() const;\n@@ -263,29 +189,29 @@ namespace __gnu_pbds\n       inline size_type\n       max_size() const;\n \n-      Cmp_Fn& \n+      Cmp_Fn&\n       get_cmp_fn();\n \n-      const Cmp_Fn& \n+      const Cmp_Fn&\n       get_cmp_fn() const;\n \n       inline point_iterator\n-      lower_bound(const_key_reference r_key);\n+      lower_bound(key_const_reference);\n \n-      inline const_point_iterator\n-      lower_bound(const_key_reference r_key) const;\n+      inline point_const_iterator\n+      lower_bound(key_const_reference) const;\n \n       inline point_iterator\n-      upper_bound(const_key_reference r_key);\n+      upper_bound(key_const_reference);\n \n-      inline const_point_iterator\n-      upper_bound(const_key_reference r_key) const;\n+      inline point_const_iterator\n+      upper_bound(key_const_reference) const;\n \n       inline point_iterator\n-      find(const_key_reference r_key);\n+      find(key_const_reference);\n \n-      inline const_point_iterator\n-      find(const_key_reference r_key) const;\n+      inline point_const_iterator\n+      find(key_const_reference) const;\n \n       inline iterator\n       begin();\n@@ -311,13 +237,13 @@ namespace __gnu_pbds\n       inline const_reverse_iterator\n       rend() const;\n \n-      inline const_node_iterator\n+      inline node_const_iterator\n       node_begin() const;\n \n       inline node_iterator\n       node_begin();\n \n-      inline const_node_iterator\n+      inline node_const_iterator\n       node_end() const;\n \n       inline node_iterator\n@@ -327,148 +253,139 @@ namespace __gnu_pbds\n       clear();\n \n     protected:\n-\n       void\n-      value_swap(PB_DS_CLASS_C_DEC& other);\n+      value_swap(PB_DS_CLASS_C_DEC&);\n \n       void\n       initialize_min_max();\n \n       inline iterator\n-      insert_imp_empty(const_reference r_value);\n+      insert_imp_empty(const_reference);\n \n       inline iterator\n-      insert_leaf_new(const_reference r_value, node_pointer p_nd, bool left_nd);\n+      insert_leaf_new(const_reference, node_pointer, bool);\n \n       inline node_pointer\n-      get_new_node_for_leaf_insert(const_reference r_val, false_type);\n+      get_new_node_for_leaf_insert(const_reference, false_type);\n \n       inline node_pointer\n-      get_new_node_for_leaf_insert(const_reference r_val, true_type);\n+      get_new_node_for_leaf_insert(const_reference, true_type);\n \n       inline void\n-      actual_erase_node(node_pointer p_nd);\n+      actual_erase_node(node_pointer);\n \n       inline std::pair<node_pointer, bool>\n-      erase(node_pointer p_nd);\n+      erase(node_pointer);\n \n       inline void\n-      update_min_max_for_erased_node(node_pointer p_nd);\n+      update_min_max_for_erased_node(node_pointer);\n \n       static void\n-      clear_imp(node_pointer p_nd);\n+      clear_imp(node_pointer);\n \n-      inline std::pair<\n-\tpoint_iterator,\n-\tbool>\n-      insert_leaf(const_reference r_value);\n+      inline std::pair<point_iterator, bool>\n+      insert_leaf(const_reference);\n \n       inline void\n-      rotate_left(node_pointer p_x);\n+      rotate_left(node_pointer);\n \n       inline void\n-      rotate_right(node_pointer p_y);\n+      rotate_right(node_pointer);\n \n       inline void\n-      rotate_parent(node_pointer p_nd);\n+      rotate_parent(node_pointer);\n \n       inline void\n-      apply_update(node_pointer p_nd, null_node_update_pointer);\n+      apply_update(node_pointer, null_node_update_pointer);\n \n       template<typename Node_Update_>\n-      inline void\n-      apply_update(node_pointer p_nd, Node_Update_* p_update);\n+\tinline void\n+\tapply_update(node_pointer, Node_Update_*);\n \n       inline void\n-      update_to_top(node_pointer p_nd, null_node_update_pointer);\n+      update_to_top(node_pointer, null_node_update_pointer);\n \n       template<typename Node_Update_>\n-      inline void\n-      update_to_top(node_pointer p_nd, Node_Update_* p_update);\n+\tinline void\n+\tupdate_to_top(node_pointer, Node_Update_*);\n \n       bool\n-      join_prep(PB_DS_CLASS_C_DEC& other);\n+      join_prep(PB_DS_CLASS_C_DEC&);\n \n       void\n-      join_finish(PB_DS_CLASS_C_DEC& other);\n+      join_finish(PB_DS_CLASS_C_DEC&);\n \n       bool\n-      split_prep(const_key_reference r_key, PB_DS_CLASS_C_DEC& other);\n+      split_prep(key_const_reference, PB_DS_CLASS_C_DEC&);\n \n       void\n-      split_finish(PB_DS_CLASS_C_DEC& other);\n+      split_finish(PB_DS_CLASS_C_DEC&);\n \n       size_type\n-      recursive_count(node_pointer p_nd) const;\n+      recursive_count(node_pointer) const;\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid(const char* file, int line) const;\n+      assert_valid(const char*, int) const;\n \n       void\n-      structure_only_assert_valid(const char* file, int line) const;\n+      structure_only_assert_valid(const char*, int) const;\n \n       void\n-      assert_node_consistent(const node_pointer p_nd,\n-\t\t\t     const char* file, int line) const;\n-#endif \n+      assert_node_consistent(const node_pointer, const char*, int) const;\n+#endif\n \n     private:\n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_iterators(const char* file, int line) const;\n+      assert_iterators(const char*, int) const;\n \n       void\n-      assert_consistent_with_debug_base(const char* file, int line) const;\n+      assert_consistent_with_debug_base(const char*, int) const;\n \n       void\n-      assert_node_consistent_with_left(const node_pointer p_nd,\n-\t\t\t\t       const char* file, int line) const;\n+      assert_node_consistent_with_left(const node_pointer,\n+\t\t\t\t       const char*, int) const;\n \n       void\n-      assert_node_consistent_with_right(const node_pointer p_nd,\n-\t\t\t\t\tconst char* file, int line) const;\n+      assert_node_consistent_with_right(const node_pointer,\n+\t\t\t\t\tconst char*, int) const;\n \n       void\n-      assert_consistent_with_debug_base(const node_pointer p_nd,\n-\t\t\t\t\tconst char* file, int line) const;\n+      assert_consistent_with_debug_base(const node_pointer,\n+\t\t\t\t\tconst char*, int) const;\n \n       void\n-      assert_min(const char* file, int line) const;\n+      assert_min(const char*, int) const;\n \n       void\n-      assert_min_imp(const node_pointer p_nd,\n-\t\t     const char* file, int line) const;\n+      assert_min_imp(const node_pointer, const char*, int) const;\n \n       void\n-      assert_max(const char* file, int line) const;\n+      assert_max(const char*, int) const;\n \n       void\n-      assert_max_imp(const node_pointer p_nd,\n-\t\t     const char* file, int line) const;\n+      assert_max_imp(const node_pointer, const char*, int) const;\n \n       void\n-      assert_size(const char* file, int line) const;\n+      assert_size(const char*, int) const;\n \n-      typedef std::pair< const_pointer, const_pointer> node_consistent_t;\n+      typedef std::pair<const_pointer, const_pointer> node_consistent_t;\n \n       node_consistent_t\n-      assert_node_consistent_(const node_pointer p_nd,\n-\t\t\t      const char* file, int line) const;\n-#endif \n+      assert_node_consistent_(const node_pointer, const char*, int) const;\n+#endif\n \n       void\n       initialize();\n \n       node_pointer\n-      recursive_copy_node(const node_pointer p_nd);\n+      recursive_copy_node(const node_pointer);\n \n     protected:\n-      node_pointer m_p_head;\n-\n-      size_type m_size;\n-\n-      static node_allocator s_node_allocator;\n+      node_pointer \t\tm_p_head;\n+      size_type \t\tm_size;\n+      static node_allocator \ts_node_allocator;\n     };\n \n #define PB_DS_STRUCT_ONLY_ASSERT_VALID(X)\t\t\t\t\\\n@@ -492,17 +409,12 @@ namespace __gnu_pbds\n #undef PB_DS_STRUCT_ONLY_ASSERT_VALID\n #undef PB_DS_CLASS_C_DEC\n #undef PB_DS_CLASS_T_DEC\n-#undef PB_DS_CLASS_NAME\n-#undef PB_DS_TYPES_TRAITS_C_DEC\n+#undef PB_DS_BIN_TREE_NAME\n+#undef PB_DS_BIN_TREE_TRAITS_BASE\n #undef PB_DS_DEBUG_MAP_BASE_C_DEC\n \n #ifdef PB_DS_TREE_TRACE\n #undef PB_DS_TREE_TRACE_BASE_C_DEC\n-#endif \n-\n-#undef PB_DS_V2F\n-#undef PB_DS_EP2VP\n-#undef PB_DS_V2S\n-\n+#endif\n   } // namespace detail\n } // namespace __gnu_pbds"}, {"sha": "370574c9087104fd084ec291313b0280db01f44d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/cond_dtor_entry_dealtor.hpp", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fcond_dtor_entry_dealtor.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fcond_dtor_entry_dealtor.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fcond_dtor_entry_dealtor.hpp?ref=ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c", "patch": "@@ -1,70 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 3, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file cond_dtor_entry_dealtor.hpp\n- * Contains a binary tree container conditional deallocator\n- */\n-\n-class bin_search_tree_cond_dtor_entry_dealtor_\n-{\n-public:\n-  inline\n-  bin_search_tree_cond_dtor_entry_dealtor_(node_pointer p_nd) : m_p_nd(p_nd),\n-\t\t\t\t\t\t\t\tm_no_action_dtor(false)\n-  { }\n-\n-  inline void\n-  set_no_action_dtor()\n-  {\n-    m_no_action_dtor = true;\n-  }\n-\n-  inline\n-  ~bin_search_tree_cond_dtor_entry_dealtor_()\n-  {\n-    if (m_no_action_dtor)\n-      return;\n-\n-    typename Allocator::template rebind<Node>::other().\n-      deallocate(m_p_nd, 1);\n-  }\n-\n-protected:\n-  node_pointer m_p_nd;\n-\n-  bool m_no_action_dtor;\n-};\n-"}, {"sha": "612ecebbe940e1cdd65824065c909c76400e6d65", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/cond_key_dtor_entry_dealtor.hpp", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fcond_key_dtor_entry_dealtor.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fcond_key_dtor_entry_dealtor.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fcond_key_dtor_entry_dealtor.hpp?ref=ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c", "patch": "@@ -1,81 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 3, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file cond_key_dtor_entry_dealtor.hpp\n- * Contains a binary tree container conditional deallocator\n- */\n-\n-class bin_seach_tree_cond_key_dtor_entry_dealtor_\n-{\n-public:\n-  inline\n-  bin_seach_tree_cond_key_dtor_entry_dealtor_(node_pointer p_nd) : m_p_nd(p_nd),\n-\t\t\t\t\t\t\t\t   m_no_action_dtor(false),\n-\t\t\t\t\t\t\t\t   m_key_destruct(false)\n-  { }\n-\n-  inline void\n-  set_no_action_dtor()\n-  {\n-    m_no_action_dtor = true;\n-  }\n-\n-  inline void\n-  set_key_destruct()\n-  {\n-    m_key_destruct = true;\n-  }\n-\n-  inline\n-  ~bin_seach_tree_cond_key_dtor_entry_dealtor_()\n-  {\n-    if (m_no_action_dtor)\n-      return;\n-\n-    if (m_key_destruct)\n-      m_p_nd->m_value.first.~Key();\n-\n-    bin_tree_base::s_alloc.deallocate(m_p_nd, 1);\n-  }\n-\n-protected:\n-  node_pointer m_p_nd;\n-\n-  bool m_no_action_dtor;\n-\n-  bool m_key_destruct;\n-};\n-"}, {"sha": "2815b4274a9f069a093563a547283d26864e5ffb", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fconstructors_destructor_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -35,7 +35,7 @@\n // warranty.\n \n /**\n- * @file constructors_destructor_fn_imps.hpp\n+ * @file bin_search_tree_/constructors_destructor_fn_imps.hpp\n  * Contains an implementation class for bin_search_tree_.\n  */\n \n@@ -45,15 +45,15 @@ PB_DS_CLASS_C_DEC::s_node_allocator;\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME() : m_p_head(s_node_allocator.allocate(1)), m_size(0)\n+PB_DS_BIN_TREE_NAME() : m_p_head(s_node_allocator.allocate(1)), m_size(0)\n {\n   initialize();\n   PB_DS_STRUCT_ONLY_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME(const Cmp_Fn& r_cmp_fn) :\n+PB_DS_BIN_TREE_NAME(const Cmp_Fn& r_cmp_fn) :\n   Cmp_Fn(r_cmp_fn), m_p_head(s_node_allocator.allocate(1)), m_size(0)\n {\n   initialize();\n@@ -62,7 +62,7 @@ PB_DS_CLASS_NAME(const Cmp_Fn& r_cmp_fn) :\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME(const Cmp_Fn& r_cmp_fn, const node_update& r_node_update) :\n+PB_DS_BIN_TREE_NAME(const Cmp_Fn& r_cmp_fn, const node_update& r_node_update) :\n   Cmp_Fn(r_cmp_fn),\n   node_update(r_node_update),\n   m_p_head(s_node_allocator.allocate(1)),\n@@ -74,7 +74,7 @@ PB_DS_CLASS_NAME(const Cmp_Fn& r_cmp_fn, const node_update& r_node_update) :\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n+PB_DS_BIN_TREE_NAME(const PB_DS_CLASS_C_DEC& other) :\n #ifdef _GLIBCXX_DEBUG\n   debug_base(other),\n #endif \n@@ -132,7 +132,7 @@ value_swap(PB_DS_CLASS_C_DEC& other)\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-~PB_DS_CLASS_NAME()\n+~PB_DS_BIN_TREE_NAME()\n {\n   clear();\n   s_node_allocator.deallocate(m_p_head, 1);"}, {"sha": "1f77e31cf39734c4028081d723a33010ddc2db37", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/debug_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fdebug_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file debug_fn_imps.hpp\n+ * @file bin_search_tree_/debug_fn_imps.hpp\n  * Contains an implementation class for bin_search_tree_.\n  */\n \n@@ -272,8 +272,6 @@ PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n assert_size(const char* __file, int __line) const\n-{\n-  PB_DS_DEBUG_VERIFY(recursive_count(m_p_head->m_p_parent) == m_size);\n-}\n+{ PB_DS_DEBUG_VERIFY(recursive_count(m_p_head->m_p_parent) == m_size); }\n \n #endif"}, {"sha": "1d1b17040d081bb58d6c0036a1479b5ba8d3597b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/erase_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ferase_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file erase_fn_imps.hpp\n+ * @file bin_search_tree_/erase_fn_imps.hpp\n  * Contains an implementation class for bin_search_tree_.\n  */\n \n@@ -45,11 +45,8 @@ actual_erase_node(node_pointer p_z)\n {\n   _GLIBCXX_DEBUG_ASSERT(m_size > 0);\n   --m_size;\n-\n-  _GLIBCXX_DEBUG_ONLY(erase_existing(PB_DS_V2F(p_z->m_value));)\n-\n+  _GLIBCXX_DEBUG_ONLY(debug_base::erase_existing(PB_DS_V2F(p_z->m_value));)\n   p_z->~node();\n-\n   s_node_allocator.deallocate(p_z, 1);\n }\n \n@@ -61,24 +58,19 @@ update_min_max_for_erased_node(node_pointer p_z)\n   if (m_size == 1)\n     {\n       m_p_head->m_p_left = m_p_head->m_p_right = m_p_head;\n-\n       return;\n     }\n \n   if (m_p_head->m_p_left == p_z)\n     {\n       iterator it(p_z);\n-\n       ++it;\n-\n       m_p_head->m_p_left = it.m_p_nd;\n     }\n   else if (m_p_head->m_p_right == p_z)\n     {\n       iterator it(p_z);\n-\n       --it;\n-\n       m_p_head->m_p_right = it.m_p_nd;\n     }\n }\n@@ -89,15 +81,10 @@ PB_DS_CLASS_C_DEC::\n clear()\n {\n   PB_DS_STRUCT_ONLY_ASSERT_VALID((*this))\n-\n   clear_imp(m_p_head->m_p_parent);\n-\n   m_size = 0;\n-\n   initialize();\n-\n   _GLIBCXX_DEBUG_ONLY(debug_base::clear();)\n-\n   PB_DS_STRUCT_ONLY_ASSERT_VALID((*this))\n }\n \n@@ -110,11 +97,7 @@ clear_imp(node_pointer p_nd)\n     return;\n \n   clear_imp(p_nd->m_p_left);\n-\n   clear_imp(p_nd->m_p_right);\n-\n   p_nd->~node();\n-\n   s_node_allocator.deallocate(p_nd, 1);\n }\n-"}, {"sha": "03b7fe89416157e8bd3ebecdb64fcffae5e924b8", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/find_fn_imps.hpp", "status": "modified", "additions": 38, "deletions": 49, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ffind_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,149 +34,138 @@\n // warranty.\n \n /**\n- * @file find_fn_imps.hpp\n+ * @file bin_search_tree_/find_fn_imps.hpp\n  * Contains an implementation class for bin_search_tree_.\n  */\n \n PB_DS_CLASS_T_DEC\n-inline typename PB_DS_CLASS_C_DEC::const_point_iterator\n+inline typename PB_DS_CLASS_C_DEC::point_const_iterator\n PB_DS_CLASS_C_DEC::\n-lower_bound(const_key_reference r_key) const\n+lower_bound(key_const_reference r_key) const\n {\n   node_pointer p_pot = m_p_head;\n   node_pointer p_nd = m_p_head->m_p_parent;\n \n   while (p_nd != 0)\n-    if (Cmp_Fn::operator()(\n-\t\t\t   PB_DS_V2F(p_nd->m_value),\n-\t\t\t   r_key))\n+    if (Cmp_Fn::operator()(PB_DS_V2F(p_nd->m_value), r_key))\n       p_nd = p_nd->m_p_right;\n     else\n       {\n \tp_pot = p_nd;\n-\n \tp_nd = p_nd->m_p_left;\n       }\n-\n-  return (iterator(p_pot));\n+  return iterator(p_pot);\n }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n-lower_bound(const_key_reference r_key)\n+lower_bound(key_const_reference r_key)\n {\n   node_pointer p_pot = m_p_head;\n   node_pointer p_nd = m_p_head->m_p_parent;\n \n   while (p_nd != 0)\n-    if (Cmp_Fn::operator()(\n-\t\t\t   PB_DS_V2F(p_nd->m_value),\n-\t\t\t   r_key))\n+    if (Cmp_Fn::operator()(PB_DS_V2F(p_nd->m_value), r_key))\n       p_nd = p_nd->m_p_right;\n     else\n       {\n \tp_pot = p_nd;\n-\n \tp_nd = p_nd->m_p_left;\n       }\n-\n-  return (iterator(p_pot));\n+  return iterator(p_pot);\n }\n \n PB_DS_CLASS_T_DEC\n-inline typename PB_DS_CLASS_C_DEC::const_point_iterator\n+inline typename PB_DS_CLASS_C_DEC::point_const_iterator\n PB_DS_CLASS_C_DEC::\n-upper_bound(const_key_reference r_key) const\n+upper_bound(key_const_reference r_key) const\n {\n   node_pointer p_pot = m_p_head;\n   node_pointer p_nd = m_p_head->m_p_parent;\n \n   while (p_nd != 0)\n-    if (Cmp_Fn::operator()(r_key,\n-\t\t\t   PB_DS_V2F(p_nd->m_value)))\n+    if (Cmp_Fn::operator()(r_key, PB_DS_V2F(p_nd->m_value)))\n       {\n-\tp_pot = p_nd,\n-\n-\t  p_nd = p_nd->m_p_left;\n+\tp_pot = p_nd;\n+\tp_nd = p_nd->m_p_left;\n       }\n     else\n       p_nd = p_nd->m_p_right;\n-\n-  return (const_iterator(p_pot));\n+  return const_iterator(p_pot);\n }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n-upper_bound(const_key_reference r_key)\n+upper_bound(key_const_reference r_key)\n {\n   node_pointer p_pot = m_p_head;\n   node_pointer p_nd = m_p_head->m_p_parent;\n \n   while (p_nd != 0)\n-    if (Cmp_Fn::operator()(r_key,\n-\t\t\t   PB_DS_V2F(p_nd->m_value)))\n+    if (Cmp_Fn::operator()(r_key, PB_DS_V2F(p_nd->m_value)))\n       {\n-\tp_pot = p_nd,\n-\n-\t  p_nd = p_nd->m_p_left;\n+\tp_pot = p_nd;\n+\tp_nd = p_nd->m_p_left;\n       }\n     else\n       p_nd = p_nd->m_p_right;\n-\n-  return (point_iterator(p_pot));\n+  return point_iterator(p_pot);\n }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n-find(const_key_reference r_key)\n+find(key_const_reference r_key)\n {\n   PB_DS_STRUCT_ONLY_ASSERT_VALID((*this))\n-\n   node_pointer p_pot = m_p_head;\n   node_pointer p_nd = m_p_head->m_p_parent;\n \n   while (p_nd != 0)\n     if (!Cmp_Fn::operator()(PB_DS_V2F(p_nd->m_value), r_key))\n       {\n \tp_pot = p_nd;\n-\n \tp_nd = p_nd->m_p_left;\n       }\n     else\n       p_nd = p_nd->m_p_right;\n \n-  return point_iterator((p_pot != m_p_head\n-\t\t\t && Cmp_Fn::operator()(r_key,\n-\t\t\t\t\t       PB_DS_V2F(p_pot->m_value)))\n-\t\t\t\t? m_p_head : p_pot);\n+  node_pointer ret = p_pot;\n+  if (p_pot != m_p_head)\n+    {\n+      const bool __cmp = Cmp_Fn::operator()(r_key, PB_DS_V2F(p_pot->m_value));\n+      if (__cmp)\n+\tret = m_p_head;\n+    }\n+  return point_iterator(ret);\n }\n \n PB_DS_CLASS_T_DEC\n-inline typename PB_DS_CLASS_C_DEC::const_point_iterator\n+inline typename PB_DS_CLASS_C_DEC::point_const_iterator\n PB_DS_CLASS_C_DEC::\n-find(const_key_reference r_key) const\n+find(key_const_reference r_key) const\n {\n   PB_DS_STRUCT_ONLY_ASSERT_VALID((*this))\n-\n   node_pointer p_pot = m_p_head;\n   node_pointer p_nd = m_p_head->m_p_parent;\n \n   while (p_nd != 0)\n     if (!Cmp_Fn::operator()(PB_DS_V2F(p_nd->m_value), r_key))\n       {\n \tp_pot = p_nd;\n-\n \tp_nd = p_nd->m_p_left;\n       }\n     else\n       p_nd = p_nd->m_p_right;\n \n-  return const_point_iterator((p_pot != m_p_head\n-\t\t\t       && Cmp_Fn::operator()(r_key,\n-\t\t\t\t\t\t     PB_DS_V2F(p_pot->m_value)))\n-\t\t\t\t\t? m_p_head : p_pot);\n+  node_pointer ret = p_pot;\n+  if (p_pot != m_p_head)\n+    {\n+      const bool __cmp = Cmp_Fn::operator()(r_key, PB_DS_V2F(p_pot->m_value));\n+      if (__cmp)\n+\tret = m_p_head;\n+    }\n+  return point_const_iterator(ret);\n }\n-"}, {"sha": "54cd52e04ba863081cb45ecd27207ec408da16ab", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/info_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Finfo_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file info_fn_imps.hpp\n+ * @file bin_search_tree_/info_fn_imps.hpp\n  * Contains an implementation class for bin_search_tree_.\n  */\n "}, {"sha": "5a9a03e867e862c12f40baec5e20a4ab50879a91", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/insert_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Finsert_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file insert_fn_imps.hpp\n+ * @file bin_search_tree_/insert_fn_imps.hpp\n  * Contains an implementation class for bin_search_tree_.\n  */\n \n@@ -101,38 +101,30 @@ insert_leaf_new(const_reference r_value, node_pointer p_nd, bool left_nd)\n   if (left_nd)\n     {\n       _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_left == 0);\n-      _GLIBCXX_DEBUG_ASSERT(Cmp_Fn::operator()(\n-\t\t\t\t\t  PB_DS_V2F(r_value),\n-\t\t\t\t\t  PB_DS_V2F(p_nd->m_value)));\n+      _GLIBCXX_DEBUG_ASSERT(Cmp_Fn::operator()(PB_DS_V2F(r_value),\n+\t\t\t\t\t       PB_DS_V2F(p_nd->m_value)));\n \n       p_nd->m_p_left = p_new_nd;\n-\n       if (m_p_head->m_p_left == p_nd)\n \tm_p_head->m_p_left = p_new_nd;\n     }\n   else\n     {\n       _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_right == 0);\n-      _GLIBCXX_DEBUG_ASSERT(Cmp_Fn::operator()(\n-\t\t\t\t\t  PB_DS_V2F(p_nd->m_value),\n-\t\t\t\t\t  PB_DS_V2F(r_value)));\n+      _GLIBCXX_DEBUG_ASSERT(Cmp_Fn::operator()(PB_DS_V2F(p_nd->m_value),\n+\t\t\t\t\t       PB_DS_V2F(r_value)));\n \n       p_nd->m_p_right = p_new_nd;\n-\n       if (m_p_head->m_p_right == p_nd)\n \tm_p_head->m_p_right = p_new_nd;\n     }\n \n   p_new_nd->m_p_parent = p_nd;\n-\n   p_new_nd->m_p_left = p_new_nd->m_p_right = 0;\n-\n   PB_DS_ASSERT_NODE_CONSISTENT(p_nd)\n \n   update_to_top(p_new_nd, (node_update* )this);\n-\n   _GLIBCXX_DEBUG_ONLY(debug_base::insert_new(PB_DS_V2F(r_value));)\n-\n   return iterator(p_new_nd);\n }\n \n@@ -148,13 +140,10 @@ insert_imp_empty(const_reference r_value)\n     m_p_head->m_p_parent = p_new_node;\n \n   p_new_node->m_p_parent = m_p_head;\n-\n   p_new_node->m_p_left = p_new_node->m_p_right = 0;\n-\n   _GLIBCXX_DEBUG_ONLY(debug_base::insert_new(PB_DS_V2F(r_value));)\n \n   update_to_top(m_p_head->m_p_parent, (node_update*)this);\n-\n   return iterator(p_new_node);\n }\n \n@@ -164,18 +153,14 @@ PB_DS_CLASS_C_DEC::\n get_new_node_for_leaf_insert(const_reference r_val, false_type)\n {\n   node_pointer p_new_nd = s_node_allocator.allocate(1);\n-\n   cond_dealtor_t cond(p_new_nd);\n \n   new (const_cast<void* >(static_cast<const void* >(&p_new_nd->m_value)))\n     typename node::value_type(r_val);\n \n   cond.set_no_action();\n-\n   p_new_nd->m_p_left = p_new_nd->m_p_right = 0;\n-\n   ++m_size;\n-\n   return p_new_nd;\n }\n \n@@ -190,9 +175,6 @@ get_new_node_for_leaf_insert(const_reference r_val, true_type)\n     typename node::value_type(r_val);\n \n   p_new_nd->m_p_left = p_new_nd->m_p_right = 0;\n-\n   ++m_size;\n-\n   return p_new_nd;\n }\n-"}, {"sha": "8076084aefd5dc08c50031dbf6c0e2e00d59b0d5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/iterators_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fiterators_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fiterators_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fiterators_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file iterators_fn_imps.hpp\n+ * @file bin_search_tree_/iterators_fn_imps.hpp\n  * Contains an implementation class for bin_search_tree_.\n  */\n \n@@ -103,11 +103,11 @@ rend() const\n }\n \n PB_DS_CLASS_T_DEC\n-inline typename PB_DS_CLASS_C_DEC::const_node_iterator\n+inline typename PB_DS_CLASS_C_DEC::node_const_iterator\n PB_DS_CLASS_C_DEC::\n node_begin() const\n {\n-  return (const_node_iterator(m_p_head->m_p_parent));\n+  return (node_const_iterator(m_p_head->m_p_parent));\n }\n \n PB_DS_CLASS_T_DEC\n@@ -119,11 +119,11 @@ node_begin()\n }\n \n PB_DS_CLASS_T_DEC\n-inline typename PB_DS_CLASS_C_DEC::const_node_iterator\n+inline typename PB_DS_CLASS_C_DEC::node_const_iterator\n PB_DS_CLASS_C_DEC::\n node_end() const\n {\n-  return (const_node_iterator(0));\n+  return (node_const_iterator(0));\n }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "d64bdf75d9c24a22165f20925b8098d8f092b5d1", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/node_iterators.hpp", "status": "modified", "additions": 18, "deletions": 30, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fnode_iterators.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fnode_iterators.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fnode_iterators.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file node_iterators.hpp\n+ * @file bin_search_tree_/node_iterators.hpp\n  * Contains an implementation class for bin_search_tree_.\n  */\n \n@@ -47,31 +47,27 @@ namespace __gnu_pbds\n {\n   namespace detail\n   {\n-\n #define PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC\t\t\t\\\n     bin_search_tree_const_node_it_<\t\t\t\t\t\\\n \t\t\t\t\t\t\tNode,\t\t\\\n \t\t\t\t\t\t\tConst_Iterator,\t\\\n \t\t\t\t\t\t\tIterator,\t\\\n-\t\t\t\t\t\t\tAllocator>\n+\t\t\t\t\t\t\t_Alloc>\n \n-    // Const node iterator.\n+    /// Const node iterator.\n     template<typename Node,\n \t     class Const_Iterator,\n \t     class Iterator,\n-\t     class Allocator>\n+\t     typename _Alloc>\n     class bin_search_tree_const_node_it_\n     {\n-    private:\n-\n     private:\n       typedef\n-      typename Allocator::template rebind<\n+      typename _Alloc::template rebind<\n       Node>::other::pointer\n       node_pointer;\n \n     public:\n-\n       // Category.\n       typedef trivial_iterator_tag iterator_category;\n \n@@ -92,11 +88,9 @@ namespace __gnu_pbds\n \n       // Const metadata reference type.\n       typedef\n-      typename Allocator::template rebind<\n+      typename _Alloc::template rebind<\n \tmetadata_type>::other::const_reference\n-      const_metadata_reference;\n-\n-    public:\n+      metadata_const_reference;\n \n       // Default constructor.\n       /*\n@@ -105,7 +99,8 @@ namespace __gnu_pbds\n       */\n \n       inline\n-      bin_search_tree_const_node_it_(const node_pointer p_nd = 0) : m_p_nd(const_cast<node_pointer>(p_nd))\n+      bin_search_tree_const_node_it_(const node_pointer p_nd = 0) \n+      : m_p_nd(const_cast<node_pointer>(p_nd))\n       { }\n \n       // Access.\n@@ -116,7 +111,7 @@ namespace __gnu_pbds\n       }\n \n       // Metadata access.\n-      inline const_metadata_reference\n+      inline metadata_const_reference\n       get_metadata() const\n       {\n \treturn (m_p_nd->get_metadata());\n@@ -150,7 +145,6 @@ namespace __gnu_pbds\n \treturn (m_p_nd != other.m_p_nd);\n       }\n \n-    public:\n       node_pointer m_p_nd;\n     };\n \n@@ -159,26 +153,23 @@ namespace __gnu_pbds\n \t\t\t\t\t\tNode,\t\t\\\n \t\t\t\t\t\tConst_Iterator, \\\n \t\t\t\t\t\tIterator,\t\\\n-\t\t\t\t\t\tAllocator>\n+\t\t\t\t\t\t_Alloc>\n \n-    // Node iterator.\n+    /// Node iterator.\n     template<typename Node,\n \t     class Const_Iterator,\n \t     class Iterator,\n-\t     class Allocator>\n-    class bin_search_tree_node_it_ : \n-      public PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC\n-\n+\t     typename _Alloc>\n+    class bin_search_tree_node_it_ \n+    : public PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC\n     {\n-\n     private:\n       typedef\n-      typename Allocator::template rebind<\n+      typename _Alloc::template rebind<\n       Node>::other::pointer\n       node_pointer;\n \n     public:\n-\n       // __Iterator's value type.\n       typedef Iterator value_type;\n \n@@ -188,17 +179,15 @@ namespace __gnu_pbds\n       // __Iterator's __const reference type.\n       typedef Iterator const_reference;\n \n-    public:\n-\n       // Default constructor.\n       /*\n \tinline\n \tbin_search_tree_node_it_();\n       */\n \n       inline\n-      bin_search_tree_node_it_(const node_pointer p_nd = 0) : PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC(\n-\t\t\t\t\t\t\t\t\t\t\t\t\t    const_cast<node_pointer>(p_nd))\n+      bin_search_tree_node_it_(const node_pointer p_nd = 0) \n+      : PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC(const_cast<node_pointer>(p_nd))\n       { }\n \n       // Access.\n@@ -227,7 +216,6 @@ namespace __gnu_pbds\n     };\n \n #undef PB_DS_TREE_CONST_NODE_ITERATOR_CLASS_C_DEC\n-\n #undef PB_DS_TREE_NODE_ITERATOR_CLASS_C_DEC\n \n   } // namespace detail"}, {"sha": "d99924878c301d390d110a39ce792ba8e9bc6cbc", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/point_iterators.hpp", "status": "modified", "additions": 17, "deletions": 31, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fpoint_iterators.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fpoint_iterators.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fpoint_iterators.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file point_iterators.hpp\n+ * @file bin_search_tree_/point_iterators.hpp\n  * Contains an implementation class for bin_search_tree_.\n  */\n \n@@ -58,7 +58,7 @@ namespace __gnu_pbds\n \t\t\t\t\t\tReference,\t\t\\\n \t\t\t\t\t\tConst_Reference,\t\\\n \t\t\t\t\t\tIs_Forward_Iterator,\t\\\n-\t\t\t\t\t\tAllocator>\n+\t\t\t\t\t\t_Alloc>\n \n #define PB_DS_TREE_CONST_ODIR_IT_C_DEC\t\t\t\t\t\\\n     bin_search_tree_const_it_<\t\t\t\t\t\t\\\n@@ -69,7 +69,7 @@ namespace __gnu_pbds\n \t\t\t\t\t\tReference,\t\t\\\n \t\t\t\t\t\tConst_Reference,\t\\\n \t\t\t\t\t\t!Is_Forward_Iterator,\t\\\n-\t\t\t\t\t\tAllocator>\n+\t\t\t\t\t\t_Alloc>\n \n #define PB_DS_TREE_IT_C_DEC\t\t\t\t\t\t\\\n     bin_search_tree_it_<\t\t\t\t\t\t\\\n@@ -80,7 +80,7 @@ namespace __gnu_pbds\n \t\t\t\t\t\tReference,\t\t\\\n \t\t\t\t\t\tConst_Reference,\t\\\n \t\t\t\t\t\tIs_Forward_Iterator,\t\\\n-\t\t\t\t\t\tAllocator>\n+\t\t\t\t\t\t_Alloc>\n \n #define PB_DS_TREE_ODIR_IT_C_DEC\t\t\t\t\t\\\n     bin_search_tree_it_<\t\t\t\t\t\t\\\n@@ -91,37 +91,27 @@ namespace __gnu_pbds\n \t\t\t\t\t\t\tReference,\t\\\n \t\t\t\t\t\t\tConst_Reference, \\\n \t\t\t\t\t\t\t!Is_Forward_Iterator, \\\n-\t\t\t\t\t\t\tAllocator>\n+\t\t\t\t\t\t\t_Alloc>\n \n-    // Const iterator.\n+    /// Const iterator.\n     template<typename Node_Pointer,\n \t     typename Value_Type,\n \t     typename Pointer,\n \t     typename Const_Pointer,\n \t     typename Reference,\n \t     typename Const_Reference,\n \t     bool Is_Forward_Iterator,\n-\t     class Allocator>\n+\t     typename _Alloc>\n     class bin_search_tree_const_it_\n     {\n-\n-    public:\n-\n-      typedef std::bidirectional_iterator_tag iterator_category;\n-\n-      typedef typename Allocator::difference_type difference_type;\n-\n-      typedef Value_Type value_type;\n-\n-      typedef Pointer pointer;\n-\n-      typedef Const_Pointer const_pointer;\n-\n-      typedef Reference reference;\n-\n-      typedef Const_Reference const_reference;\n-\n     public:\n+      typedef std::bidirectional_iterator_tag \t\titerator_category;\n+      typedef typename _Alloc::difference_type \tdifference_type;\n+      typedef Value_Type \t\t\t\tvalue_type;\n+      typedef Pointer \t\t\t\t\tpointer;\n+      typedef Const_Pointer \t\t\t\tconst_pointer;\n+      typedef Reference \t\t\t\treference;\n+      typedef Const_Reference \t\t\t\tconst_reference;\n \n       inline\n       bin_search_tree_const_it_(const Node_Pointer p_nd = 0) \n@@ -280,22 +270,18 @@ namespace __gnu_pbds\n       Node_Pointer m_p_nd;\n     };\n \n-    // Iterator.\n+    /// Iterator.\n     template<typename Node_Pointer,\n \t     typename Value_Type,\n \t     typename Pointer,\n \t     typename Const_Pointer,\n \t     typename Reference,\n \t     typename Const_Reference,\n \t     bool Is_Forward_Iterator,\n-\t     class Allocator>\n-    class bin_search_tree_it_ : \n-      public PB_DS_TREE_CONST_IT_C_DEC\n-\n+\t     typename _Alloc>\n+    class bin_search_tree_it_ : public PB_DS_TREE_CONST_IT_C_DEC\n     {\n-\n     public:\n-\n       inline\n       bin_search_tree_it_(const Node_Pointer p_nd = 0) \n       : PB_DS_TREE_CONST_IT_C_DEC((Node_Pointer)p_nd)"}, {"sha": "5b71c407f7f108b9c867368535bf2e30d54cf397", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/policy_access_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fpolicy_access_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fpolicy_access_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fpolicy_access_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,23 +34,19 @@\n // warranty.\n \n /**\n- * @file policy_access_fn_imps.hpp\n+ * @file bin_search_tree_/policy_access_fn_imps.hpp\n  * Contains an implementation class for bin_search_tree_.\n  */\n \n PB_DS_CLASS_T_DEC\n Cmp_Fn& \n PB_DS_CLASS_C_DEC::\n get_cmp_fn()\n-{\n-  return (*this);\n-}\n+{ return (*this); }\n \n PB_DS_CLASS_T_DEC\n const Cmp_Fn& \n PB_DS_CLASS_C_DEC::\n get_cmp_fn() const\n-{\n-  return (*this);\n-}\n+{ return (*this); }\n "}, {"sha": "cfcccadb18236ef0c042b6cd7c5c74d5831c35a2", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/r_erase_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fr_erase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fr_erase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fr_erase_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file r_erase_fn_imps.hpp\n+ * @file bin_search_tree_/r_erase_fn_imps.hpp\n  * Contains an implementation class for bin_search_tree_.\n  */\n \n@@ -45,11 +45,8 @@ actual_erase_node(node_pointer p_z)\n {\n   _GLIBCXX_DEBUG_ASSERT(m_size > 0);\n   --m_size;\n-\n   _GLIBCXX_DEBUG_ONLY(erase_existing(PB_DS_V2F(p_z->m_value));)\n-\n   p_z->~node();\n-\n   s_node_allocator.deallocate(p_z, 1);\n }\n \n@@ -61,24 +58,19 @@ update_min_max_for_erased_node(node_pointer p_z)\n   if (m_size == 1)\n     {\n       m_p_head->m_p_left = m_p_head->m_p_right = m_p_head;\n-\n       return;\n     }\n \n   if (m_p_head->m_p_left == p_z)\n     {\n       iterator it(p_z);\n-\n       ++it;\n-\n       m_p_head->m_p_left = it.m_p_nd;\n     }\n   else if (m_p_head->m_p_right == p_z)\n     {\n       iterator it(p_z);\n-\n       --it;\n-\n       m_p_head->m_p_right = it.m_p_nd;\n     }\n }\n@@ -89,15 +81,10 @@ PB_DS_CLASS_C_DEC::\n clear()\n {\n   PB_DS_STRUCT_ONLY_ASSERT_VALID((*this))\n-\n-    clear_imp(m_p_head->m_p_parent);\n-\n+  clear_imp(m_p_head->m_p_parent);\n   m_size = 0;\n-\n   initialize();\n-\n   _GLIBCXX_DEBUG_ONLY(debug_base::clear();)\n-\n   PB_DS_STRUCT_ONLY_ASSERT_VALID((*this))\n }\n \n@@ -110,11 +97,7 @@ clear_imp(node_pointer p_nd)\n     return;\n \n   clear_imp(p_nd->m_p_left);\n-\n   clear_imp(p_nd->m_p_right);\n-\n   p_nd->~Node();\n-\n   s_node_allocator.deallocate(p_nd, 1);\n }\n-"}, {"sha": "63c757cc1364c9e66a83850aae8a089a0b61df4a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/rotate_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Frotate_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Frotate_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Frotate_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file rotate_fn_imps.hpp\n+ * @file bin_search_tree_/rotate_fn_imps.hpp\n  * Contains imps for rotating nodes.\n  */\n \n@@ -130,7 +130,7 @@ PB_DS_CLASS_C_DEC::\n apply_update(node_pointer p_nd, Node_Update_*  /*p_update*/)\n {\n   node_update::operator()(node_iterator(p_nd),\n-\t\t\t  const_node_iterator(static_cast<node_pointer>(0)));\n+\t\t\t  node_const_iterator(static_cast<node_pointer>(0)));\n }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "be2fd344ccf7d6c82627345af6f45225a6b5e574", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/split_join_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fsplit_join_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file split_join_fn_imps.hpp\n+ * @file bin_search_tree_/split_join_fn_imps.hpp\n  * Contains an implementation class for bin_search_tree_.\n  */\n \n@@ -85,7 +85,7 @@ join_finish(PB_DS_CLASS_C_DEC& other)\n PB_DS_CLASS_T_DEC\n bool\n PB_DS_CLASS_C_DEC::\n-split_prep(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n+split_prep(key_const_reference r_key, PB_DS_CLASS_C_DEC& other)\n {\n   PB_DS_ASSERT_VALID((*this))\n   PB_DS_ASSERT_VALID(other)"}, {"sha": "3066c381f42ba86ca4d66e854942c886aa14fc99", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/traits.hpp", "status": "modified", "additions": 48, "deletions": 63, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ftraits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ftraits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ftraits.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file traits.hpp\n+ * @file bin_search_tree_/traits.hpp\n  * Contains an implementation for bin_search_tree_.\n  */\n \n@@ -48,199 +48,184 @@ namespace __gnu_pbds\n {\n   namespace detail\n   {\n-\n+    /// Binary search tree traits, primary template.\n     template<typename Key,\n \t     typename Mapped,\n \t     class Cmp_Fn,\n-\t     template<typename Const_Node_Iterator,\n-\t\t      class Node_Iterator,\n+\t     template<typename Node_CItr,\n+\t\t      class Node_Itr,\n \t\t      class Cmp_Fn,\n-\t\t      class Allocator>\n+\t\t      typename _Alloc>\n     class Node_Update,\n \t     class Node,\n-\t     class Allocator>\n+\t     typename _Alloc>\n     struct bin_search_tree_traits\n     {\n     private:\n-      typedef\n-      types_traits<\n-      Key,\n-      Mapped,\n-      Allocator,\n-      false>\n-      type_traits;\n+      typedef types_traits<Key, Mapped, _Alloc, false> type_traits;\n \n     public:\n       typedef Node node;\n \n       typedef\n       bin_search_tree_const_it_<\n-\ttypename Allocator::template rebind<\n+\ttypename _Alloc::template rebind<\n \tnode>::other::pointer,\n \ttypename type_traits::value_type,\n \ttypename type_traits::pointer,\n \ttypename type_traits::const_pointer,\n \ttypename type_traits::reference,\n \ttypename type_traits::const_reference,\n \ttrue,\n-\tAllocator>\n-      const_point_iterator;\n+\t_Alloc>\n+      point_const_iterator;\n \n       typedef\n       bin_search_tree_it_<\n-\ttypename Allocator::template rebind<\n+\ttypename _Alloc::template rebind<\n \tnode>::other::pointer,\n \ttypename type_traits::value_type,\n \ttypename type_traits::pointer,\n \ttypename type_traits::const_pointer,\n \ttypename type_traits::reference,\n \ttypename type_traits::const_reference,\n \ttrue,\n-\tAllocator>\n+\t_Alloc>\n       point_iterator;\n \n       typedef\n       bin_search_tree_const_it_<\n-\ttypename Allocator::template rebind<\n+\ttypename _Alloc::template rebind<\n \tnode>::other::pointer,\n \ttypename type_traits::value_type,\n \ttypename type_traits::pointer,\n \ttypename type_traits::const_pointer,\n \ttypename type_traits::reference,\n \ttypename type_traits::const_reference,\n \tfalse,\n-\tAllocator>\n+\t_Alloc>\n       const_reverse_iterator;\n \n       typedef\n       bin_search_tree_it_<\n-\ttypename Allocator::template rebind<\n+\ttypename _Alloc::template rebind<\n \tnode>::other::pointer,\n \ttypename type_traits::value_type,\n \ttypename type_traits::pointer,\n \ttypename type_traits::const_pointer,\n \ttypename type_traits::reference,\n \ttypename type_traits::const_reference,\n \tfalse,\n-\tAllocator>\n+\t_Alloc>\n       reverse_iterator;\n \n       typedef\n       bin_search_tree_const_node_it_<\n \tNode,\n-\tconst_point_iterator,\n+\tpoint_const_iterator,\n \tpoint_iterator,\n-\tAllocator>\n-      const_node_iterator;\n+\t_Alloc>\n+      node_const_iterator;\n \n       typedef\n       bin_search_tree_node_it_<\n \tNode,\n-\tconst_point_iterator,\n+\tpoint_const_iterator,\n \tpoint_iterator,\n-\tAllocator>\n+\t_Alloc>\n       node_iterator;\n \n       typedef\n       Node_Update<\n-\tconst_node_iterator,\n+\tnode_const_iterator,\n \tnode_iterator,\n \tCmp_Fn,\n-\tAllocator>\n+\t_Alloc>\n       node_update;\n \n       typedef\n-      __gnu_pbds::null_tree_node_update<\n-\tconst_node_iterator,\n+      __gnu_pbds::null_node_update<\n+\tnode_const_iterator,\n \tnode_iterator,\n \tCmp_Fn,\n-\tAllocator>* \n+\t_Alloc>* \n       null_node_update_pointer;\n     };\n \n+    /// Specialization.\n     template<typename Key,\n \t     class Cmp_Fn,\n-\t     template<typename Const_Node_Iterator,\n-\t\t      class Node_Iterator,\n+\t     template<typename Node_CItr,\n+\t\t      class Node_Itr,\n \t\t      class Cmp_Fn,\n-\t\t      class Allocator>\n+\t\t      typename _Alloc>\n     class Node_Update,\n \t     class Node,\n-\t     class Allocator>\n+\t     typename _Alloc>\n     struct bin_search_tree_traits<\n       Key,\n-      null_mapped_type,\n+      null_type,\n       Cmp_Fn,\n       Node_Update,\n       Node,\n-      Allocator>\n+      _Alloc>\n     {\n     private:\n-      typedef\n-      types_traits<\n-      Key,\n-      null_mapped_type,\n-      Allocator,\n-      false>\n-      type_traits;\n+      typedef types_traits<Key, null_type, _Alloc, false> type_traits;\n \n     public:\n       typedef Node node;\n \n       typedef\n       bin_search_tree_const_it_<\n-\ttypename Allocator::template rebind<\n+\ttypename _Alloc::template rebind<\n \tnode>::other::pointer,\n \ttypename type_traits::value_type,\n \ttypename type_traits::pointer,\n \ttypename type_traits::const_pointer,\n \ttypename type_traits::reference,\n \ttypename type_traits::const_reference,\n \ttrue,\n-\tAllocator>\n-      const_point_iterator;\n+\t_Alloc>\n+      point_const_iterator;\n \n-      typedef const_point_iterator point_iterator;\n+      typedef point_const_iterator point_iterator;\n \n       typedef\n       bin_search_tree_const_it_<\n-\ttypename Allocator::template rebind<\n+\ttypename _Alloc::template rebind<\n \tnode>::other::pointer,\n \ttypename type_traits::value_type,\n \ttypename type_traits::pointer,\n \ttypename type_traits::const_pointer,\n \ttypename type_traits::reference,\n \ttypename type_traits::const_reference,\n \tfalse,\n-\tAllocator>\n+\t_Alloc>\n       const_reverse_iterator;\n \n       typedef const_reverse_iterator reverse_iterator;\n \n       typedef\n       bin_search_tree_const_node_it_<\n \tNode,\n-\tconst_point_iterator,\n+\tpoint_const_iterator,\n \tpoint_iterator,\n-\tAllocator>\n-      const_node_iterator;\n+\t_Alloc>\n+      node_const_iterator;\n \n-      typedef const_node_iterator node_iterator;\n+      typedef node_const_iterator node_iterator;\n \n       typedef\n-      Node_Update<\n-\tconst_node_iterator,\n-\tnode_iterator,\n-\tCmp_Fn,\n-\tAllocator>\n+      Node_Update<node_const_iterator, node_iterator, Cmp_Fn, _Alloc>\n       node_update;\n \n       typedef\n-      __gnu_pbds::null_tree_node_update<\n-\tconst_node_iterator,\n+      __gnu_pbds::null_node_update<\n+\tnode_const_iterator,\n \tnode_iterator,\n \tCmp_Fn,\n-\tAllocator>* \n+\t_Alloc>* \n       null_node_update_pointer;\n     };\n "}, {"sha": "ee408e8ea0294484284a1c3ac8e45188aa5ccf32", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/binary_heap_.hpp", "status": "modified", "additions": 135, "deletions": 142, "changes": 277, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fbinary_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fbinary_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fbinary_heap_.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,17 +34,13 @@\n // warranty.\n \n /**\n- * @file binary_heap_.hpp\n+ * @file binary_heap_/binary_heap_.hpp\n  * Contains an implementation class for a binary heap.\n  */\n \n #ifndef PB_DS_BINARY_HEAP_HPP\n #define PB_DS_BINARY_HEAP_HPP\n \n-/*\n- * Based on CLRS.\n- */\n-\n #include <queue>\n #include <algorithm>\n #include <ext/pb_ds/detail/cond_dealtor.hpp>\n@@ -53,7 +49,7 @@\n #include <ext/pb_ds/detail/binary_heap_/entry_cmp.hpp>\n #include <ext/pb_ds/detail/binary_heap_/entry_pred.hpp>\n #include <ext/pb_ds/detail/binary_heap_/resize_policy.hpp>\n-#include <ext/pb_ds/detail/binary_heap_/const_point_iterator.hpp>\n+#include <ext/pb_ds/detail/binary_heap_/point_const_iterator.hpp>\n #include <ext/pb_ds/detail/binary_heap_/const_iterator.hpp>\n #ifdef PB_DS_BINARY_HEAP_TRACE_\n #include <iostream>\n@@ -66,126 +62,85 @@ namespace __gnu_pbds\n   namespace detail\n   {\n #define PB_DS_CLASS_T_DEC \\\n-    template<typename Value_Type, class Cmp_Fn, class Allocator>\n+    template<typename Value_Type, typename Cmp_Fn, typename _Alloc>\n \n #define PB_DS_CLASS_C_DEC \\\n-    binary_heap_<Value_Type, Cmp_Fn, Allocator>\n+    binary_heap<Value_Type, Cmp_Fn, _Alloc>\n \n #define PB_DS_ENTRY_CMP_DEC \\\n-    entry_cmp<Value_Type, Cmp_Fn, is_simple<Value_Type>::value, Allocator>::type\n+    entry_cmp<Value_Type, Cmp_Fn, _Alloc, is_simple<Value_Type>::value>::type\n \n #define PB_DS_RESIZE_POLICY_DEC\t\\\n-    __gnu_pbds::detail::resize_policy<typename Allocator::size_type>\n+    __gnu_pbds::detail::resize_policy<typename _Alloc::size_type>\n \n     /**\n-     * class description = \"Base class for some types of h3ap$\">\n-     **/\n-    template<typename Value_Type, class Cmp_Fn, class Allocator>\n-    class binary_heap_ : public PB_DS_ENTRY_CMP_DEC,\n-\t\t\t public PB_DS_RESIZE_POLICY_DEC\n+     *  @brief Binary heaps composed of resize and compare policies.\n+     *\n+     *  Based on CLRS.\n+     */\n+    template<typename Value_Type, typename Cmp_Fn, typename _Alloc>\n+    class binary_heap\n+    : public PB_DS_ENTRY_CMP_DEC, public PB_DS_RESIZE_POLICY_DEC\n     {\n+    public:\n+      typedef Value_Type \t\t\t\tvalue_type;\n+      typedef Cmp_Fn \t\t\t\t\tcmp_fn;\n+      typedef _Alloc \t\t\t\t\tallocator_type;\n+      typedef typename _Alloc::size_type \t\tsize_type;\n+      typedef typename _Alloc::difference_type \t\tdifference_type;\n+      typedef typename PB_DS_ENTRY_CMP_DEC \t\tentry_cmp;\n+      typedef PB_DS_RESIZE_POLICY_DEC \t\t\tresize_policy;\n+      typedef cond_dealtor<value_type, _Alloc> \t\tcond_dealtor_t;\n \n     private:\n       enum\n \t{\n-\t  simple_value = is_simple<Value_Type>::value\n+\t  simple_value = is_simple<value_type>::value\n \t};\n \n-      typedef integral_constant<int, simple_value> no_throw_copies_t;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tValue_Type>::other\n-      value_allocator;\n-\n-      typedef\n-      typename __conditional_type<\n-\tsimple_value,\n-\tValue_Type,\n-\ttypename value_allocator::pointer>::__type\n-      entry;\n+      typedef integral_constant<int, simple_value> \tno_throw_copies_t;\n \n-      typedef\n-      typename Allocator::template rebind<\n-\tentry>::other\n-      entry_allocator;\n-\n-      typedef typename entry_allocator::pointer entry_pointer;\n-\n-      typedef typename PB_DS_ENTRY_CMP_DEC entry_cmp;\n-\n-      typedef PB_DS_RESIZE_POLICY_DEC resize_policy;\n-\n-      typedef\n-      cond_dealtor<\n-\tValue_Type,\n-\tAllocator>\n-      cond_dealtor_t;\n+      typedef typename _Alloc::template rebind<value_type>\t__rebind_v;\n+      typedef typename __rebind_v::other \t\tvalue_allocator;\n \n     public:\n+      typedef typename value_allocator::pointer\t\tpointer;\n+      typedef typename value_allocator::const_pointer\tconst_pointer;\n+      typedef typename value_allocator::reference\treference;\n+      typedef typename value_allocator::const_reference\tconst_reference;\n \n-      typedef typename Allocator::size_type size_type;\n-\n-      typedef typename Allocator::difference_type difference_type;\n+      typedef typename __conditional_type<simple_value,\n+\t\t\t\t\t  value_type, pointer>::__type\n+      \t\t\t\t\t\t\tentry;\n \n-      typedef Value_Type value_type;\n+      typedef typename _Alloc::template rebind<entry>::other\n+      \t\t\t\t\t\t\tentry_allocator;\n \n-      typedef\n-      typename Allocator::template rebind<\n-\tvalue_type>::other::pointer\n-      pointer;\n+      typedef typename entry_allocator::pointer \tentry_pointer;\n \n-      typedef\n-      typename Allocator::template rebind<\n-\tvalue_type>::other::const_pointer\n-      const_pointer;\n+      typedef binary_heap_point_const_iterator_<value_type, entry,\n+\t\t\t\t\t\tsimple_value, _Alloc>\n+      \t\t\t\t\t\t\tpoint_const_iterator;\n \n-      typedef\n-      typename Allocator::template rebind<\n-\tvalue_type>::other::reference\n-      reference;\n+      typedef point_const_iterator \t\t\tpoint_iterator;\n \n-      typedef\n-      typename Allocator::template rebind<\n-\tvalue_type>::other::const_reference\n-      const_reference;\n+      typedef binary_heap_const_iterator_<value_type, entry,\n+\t\t\t\t\t  simple_value, _Alloc>\n+      \t\t\t\t\t\t\tconst_iterator;\n \n-      typedef\n-      binary_heap_const_point_iterator_<\n-\tvalue_type,\n-\tentry,\n-\tsimple_value,\n-\tAllocator>\n-      const_point_iterator;\n+      typedef const_iterator \t\t\t\titerator;\n \n-      typedef const_point_iterator point_iterator;\n \n-      typedef\n-      binary_heap_const_iterator_<\n-\tvalue_type,\n-\tentry,\n-\tsimple_value,\n-\tAllocator>\n-      const_iterator;\n+      binary_heap();\n \n-      typedef const_iterator iterator;\n+      binary_heap(const cmp_fn&);\n \n-      typedef Cmp_Fn cmp_fn;\n-\n-      typedef Allocator allocator_type;\n-\n-    public:\n-\n-      binary_heap_();\n-\n-      binary_heap_(const Cmp_Fn& r_cmp_fn);\n-\n-      binary_heap_(const PB_DS_CLASS_C_DEC& other);\n+      binary_heap(const binary_heap&);\n \n       void\n-      swap(PB_DS_CLASS_C_DEC& other);\n+      swap(binary_heap&);\n \n-      ~binary_heap_();\n+      ~binary_heap();\n \n       inline bool\n       empty() const;\n@@ -196,17 +151,17 @@ namespace __gnu_pbds\n       inline size_type\n       max_size() const;\n \n-      Cmp_Fn& \n+      Cmp_Fn&\n       get_cmp_fn();\n \n-      const Cmp_Fn& \n+      const Cmp_Fn&\n       get_cmp_fn() const;\n \n       inline point_iterator\n-      push(const_reference r_val);\n+      push(const_reference);\n \n       void\n-      modify(point_iterator it, const_reference r_new_val);\n+      modify(point_iterator, const_reference);\n \n       inline const_reference\n       top() const;\n@@ -215,17 +170,17 @@ namespace __gnu_pbds\n       pop();\n \n       inline void\n-      erase(point_iterator it);\n+      erase(point_iterator);\n \n       template<typename Pred>\n-      typename PB_DS_CLASS_C_DEC::size_type\n-      erase_if(Pred pred);\n+\tsize_type\n+\terase_if(Pred);\n \n-      inline static void\n-      erase_at(entry_pointer a_entries, size_type size, false_type);\n+      inline void\n+      erase_at(entry_pointer, size_type, false_type);\n \n-      inline static void\n-      erase_at(entry_pointer a_entries, size_type size, true_type);\n+      inline void\n+      erase_at(entry_pointer, size_type, true_type);\n \n       inline iterator\n       begin();\n@@ -243,48 +198,43 @@ namespace __gnu_pbds\n       clear();\n \n       template<typename Pred>\n-      void\n-      split(Pred pred, PB_DS_CLASS_C_DEC& other);\n+\tvoid\n+\tsplit(Pred, binary_heap&);\n \n       void\n-      join(PB_DS_CLASS_C_DEC& other);\n+      join(binary_heap&);\n \n #ifdef PB_DS_BINARY_HEAP_TRACE_\n       void\n       trace() const;\n-#endif \n+#endif\n \n     protected:\n-\n       template<typename It>\n-      void\n-      copy_from_range(It first_it, It last_it);\n+\tvoid\n+\tcopy_from_range(It, It);\n \n     private:\n-\n       void\n-      value_swap(PB_DS_CLASS_C_DEC& other);\n-\n-      inline void\n-      insert_value(const_reference r_val, false_type);\n+      value_swap(binary_heap&);\n \n       inline void\n-      insert_value(value_type val, true_type);\n+      insert_value(const_reference, false_type);\n \n       inline void\n-      insert_entry(entry e);\n+      insert_value(value_type, true_type);\n \n       inline void\n       resize_for_insert_if_needed();\n \n       inline void\n-      swap_value_imp(entry_pointer p_e, value_type new_val, true_type);\n+      swap_value_imp(entry_pointer, value_type, true_type);\n \n       inline void\n-      swap_value_imp(entry_pointer p_e, const_reference r_new_val, false_type);\n+      swap_value_imp(entry_pointer, const_reference, false_type);\n \n       void\n-      fix(entry_pointer p_e);\n+      fix(entry_pointer);\n \n       inline const_reference\n       top_imp(true_type) const;\n@@ -293,48 +243,91 @@ namespace __gnu_pbds\n       top_imp(false_type) const;\n \n       inline static size_type\n-      left_child(size_type i);\n+      left_child(size_type);\n \n       inline static size_type\n-      right_child(size_type i);\n+      right_child(size_type);\n \n       inline static size_type\n-      parent(size_type i);\n+      parent(size_type);\n \n       inline void\n       resize_for_erase_if_needed();\n \n       template<typename Pred>\n       size_type\n-      partition(Pred pred);\n+      partition(Pred);\n \n-#ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid(const char* file, int line) const;\n-#endif \n+      make_heap()\n+      {\n+\tconst entry_cmp& m_cmp = static_cast<entry_cmp&>(*this);\n+\tentry_pointer end = m_a_entries + m_size;\n+\tstd::make_heap(m_a_entries, end, m_cmp);\n+\t_GLIBCXX_DEBUG_ASSERT(is_heap());\n+      }\n \n-#ifdef PB_DS_BINARY_HEAP_TRACE_\n       void\n-      trace_entry(const entry& r_e, false_type) const;\n+      push_heap()\n+      {\n+\tif (!is_heap())\n+\t  make_heap();\n+\telse\n+\t  {\n+\t    const entry_cmp& m_cmp = static_cast<entry_cmp&>(*this);\n+\t    entry_pointer end = m_a_entries + m_size;\n+\t    std::push_heap(m_a_entries, end, m_cmp);\n+\t  }\n+      }\n \n       void\n-      trace_entry(const entry& r_e, true_type) const;\n-#endif \n+      pop_heap()\n+      {\n+\tconst entry_cmp& m_cmp = static_cast<entry_cmp&>(*this);\n+\tentry_pointer end = m_a_entries + m_size;\n+\tstd::pop_heap(m_a_entries, end, m_cmp);\n+      }\n+\n+      bool\n+      is_heap()\n+      {\n+\tconst entry_cmp& m_cmp = static_cast<entry_cmp&>(*this);\n+\tentry_pointer end = m_a_entries + m_size;\n+\tbool p = std::__is_heap(m_a_entries, end, m_cmp);\n+\treturn p;\n+      }\n \n-    private:\n-      static entry_allocator s_entry_allocator;\n-\n-      static value_allocator s_value_allocator;\n+#ifdef _GLIBCXX_DEBUG\n+      void\n+      assert_valid(const char*, int) const;\n+#endif\n \n-      static no_throw_copies_t s_no_throw_copies_ind;\n+#ifdef PB_DS_BINARY_HEAP_TRACE_\n+      void\n+      trace_entry(const entry&, false_type) const;\n \n-      size_type m_size;\n+      void\n+      trace_entry(const entry&, true_type) const;\n+#endif\n \n-      size_type m_actual_size;\n+      static entry_allocator \ts_entry_allocator;\n+      static value_allocator \ts_value_allocator;\n+      static no_throw_copies_t \ts_no_throw_copies_ind;\n \n-      entry_pointer m_a_entries;\n+      size_type \t\tm_size;\n+      size_type \t\tm_actual_size;\n+      entry_pointer \t\tm_a_entries;\n     };\n \n+#define PB_DS_ASSERT_VALID(X) \\\n+  _GLIBCXX_DEBUG_ONLY(X.assert_valid(__FILE__, __LINE__);)\n+\n+#define PB_DS_DEBUG_VERIFY(_Cond)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY_AT(_Cond,\t\t\t\t\t\\\n+\t\t\t   _M_message(#_Cond\" assertion from %1;:%2;\")\t\\\n+\t\t\t   ._M_string(__FILE__)._M_integer(__LINE__)\t\\\n+\t\t\t   ,__file,__line)\n+\n #include <ext/pb_ds/detail/binary_heap_/insert_fn_imps.hpp>\n #include <ext/pb_ds/detail/binary_heap_/constructors_destructor_fn_imps.hpp>\n #include <ext/pb_ds/detail/binary_heap_/iterators_fn_imps.hpp>\n@@ -354,4 +347,4 @@ namespace __gnu_pbds\n   } // namespace detail\n } // namespace __gnu_pbds\n \n-#endif \n+#endif"}, {"sha": "a6ac261b9ba2de7538f896765022518a5fdb1633", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/const_iterator.hpp", "status": "modified", "additions": 26, "deletions": 39, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconst_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconst_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconst_iterator.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,65 +34,56 @@\n // warranty.\n \n /**\n- * @file const_iterator.hpp\n+ * @file binary_heap_/const_iterator.hpp\n  * Contains an iterator class returned by the table's const find and insert\n  *     methods.\n  */\n \n #ifndef PB_DS_BINARY_HEAP_CONST_ITERATOR_HPP\n #define PB_DS_BINARY_HEAP_CONST_ITERATOR_HPP\n \n-#include <ext/pb_ds/detail/binary_heap_/const_point_iterator.hpp>\n+#include <ext/pb_ds/detail/binary_heap_/point_const_iterator.hpp>\n #include <debug/debug.h>\n \n namespace __gnu_pbds\n {\n   namespace detail\n   {\n+#define PB_DS_BIN_HEAP_CIT_BASE \\\n+    binary_heap_point_const_iterator_<Value_Type, Entry, Simple, _Alloc>\n \n-#define PB_DS_CLASS_C_DEC \\\n-    binary_heap_const_iterator_<Value_Type, Entry, Simple, Allocator>\n-\n-#define PB_DS_BASE_C_DEC \\\n-    binary_heap_const_point_iterator_<Value_Type, Entry, Simple, Allocator>\n-\n-    // Const point-type iterator.\n+    /// Const point-type iterator.\n     template<typename Value_Type,\n \t     typename Entry,\n \t     bool Simple,\n-\t     class Allocator>\n-    class binary_heap_const_iterator_ : public PB_DS_BASE_C_DEC\n+\t     typename _Alloc>\n+    class binary_heap_const_iterator_ : public PB_DS_BIN_HEAP_CIT_BASE\n     {\n-\n     private:\n-      typedef typename PB_DS_BASE_C_DEC::entry_pointer entry_pointer;\n-\n-      typedef PB_DS_BASE_C_DEC base_type;\n+      typedef PB_DS_BIN_HEAP_CIT_BASE \t\t       \tbase_type;\n+      typedef typename base_type::entry_pointer \tentry_pointer;\n \n     public:\n-\n       // Category.\n-      typedef std::forward_iterator_tag iterator_category;\n+      typedef std::forward_iterator_tag \t\titerator_category;\n \n       // Difference type.\n-      typedef typename Allocator::difference_type difference_type;\n+      typedef typename _Alloc::difference_type \t\tdifference_type;\n \n       // Iterator's value type.\n-      typedef typename base_type::value_type value_type;\n+      typedef typename base_type::value_type \t\tvalue_type;\n \n       // Iterator's pointer type.\n-      typedef typename base_type::pointer pointer;\n+      typedef typename base_type::pointer \t\tpointer;\n \n       // Iterator's const pointer type.\n-      typedef typename base_type::const_pointer const_pointer;\n+      typedef typename base_type::const_pointer \tconst_pointer;\n \n       // Iterator's reference type.\n-      typedef typename base_type::reference reference;\n+      typedef typename base_type::reference \t\treference;\n \n       // Iterator's const reference type.\n-      typedef typename base_type::const_reference const_reference;\n-\n-    public:\n+      typedef typename base_type::const_reference \tconst_reference;\n \n       inline\n       binary_heap_const_iterator_(entry_pointer p_e) : base_type(p_e)\n@@ -105,35 +96,32 @@ namespace __gnu_pbds\n \n       // Copy constructor.\n       inline\n-      binary_heap_const_iterator_(const PB_DS_CLASS_C_DEC& other) : base_type(other)\n+      binary_heap_const_iterator_(const binary_heap_const_iterator_& other) \n+      : base_type(other)\n       { }\n \n       // Compares content to a different iterator object.\n       inline bool\n-      operator==(const PB_DS_CLASS_C_DEC& other) const\n-      {\n-\treturn base_type::m_p_e == other.m_p_e;\n-      }\n+      operator==(const binary_heap_const_iterator_& other) const\n+      { return base_type::m_p_e == other.m_p_e; }\n \n       // Compares content (negatively) to a different iterator object.\n       inline bool\n-      operator!=(const PB_DS_CLASS_C_DEC& other) const\n-      {\n-\treturn base_type::m_p_e != other.m_p_e;\n-      }\n+      operator!=(const binary_heap_const_iterator_& other) const\n+      { return base_type::m_p_e != other.m_p_e; }\n \n-      inline PB_DS_CLASS_C_DEC& \n+      inline binary_heap_const_iterator_& \n       operator++()\n       {\n \t_GLIBCXX_DEBUG_ASSERT(base_type::m_p_e != 0);\n \tinc();\n \treturn *this;\n       }\n \n-      inline PB_DS_CLASS_C_DEC\n+      inline binary_heap_const_iterator_\n       operator++(int)\n       {\n-\tPB_DS_CLASS_C_DEC ret_it(base_type::m_p_e);\n+\tbinary_heap_const_iterator_ ret_it(base_type::m_p_e);\n \toperator++();\n \treturn ret_it;\n       }\n@@ -144,8 +132,7 @@ namespace __gnu_pbds\n       { ++base_type::m_p_e; }\n     };\n \n-#undef PB_DS_CLASS_C_DEC\n-#undef PB_DS_BASE_C_DEC\n+#undef PB_DS_BIN_HEAP_CIT_BASE\n   } // namespace detail\n } // namespace __gnu_pbds\n "}, {"sha": "9602385fbb169ffea1abb8b2e68037db9a0df2bd", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 14, "deletions": 34, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconstructors_destructor_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -35,7 +35,7 @@\n // warranty.\n \n /**\n- * @file constructors_destructor_fn_imps.hpp\n+ * @file binary_heap_/constructors_destructor_fn_imps.hpp\n  * Contains an implementation class for binary_heap_.\n  */\n \n@@ -62,55 +62,37 @@ copy_from_range(It first_it, It last_it)\n       insert_value(*first_it, s_no_throw_copies_ind);\n       ++first_it;\n     }\n-\n-  std::make_heap(m_a_entries, m_a_entries + m_size, static_cast<entry_cmp& >(*this));\n-\n-  PB_DS_ASSERT_VALID((*this))\n+  make_heap();\n+ PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-binary_heap_() :\n-  m_size(0),\n-  m_actual_size(resize_policy::min_size),\n+binary_heap()\n+: m_size(0), m_actual_size(resize_policy::min_size),\n   m_a_entries(s_entry_allocator.allocate(m_actual_size))\n-{\n-  PB_DS_ASSERT_VALID((*this))\n-}\n+{ PB_DS_ASSERT_VALID((*this)) }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-binary_heap_(const Cmp_Fn& r_cmp_fn) :\n-  entry_cmp(r_cmp_fn),\n-  m_size(0),\n-  m_actual_size(resize_policy::min_size),\n+binary_heap(const Cmp_Fn& r_cmp_fn)\n+: entry_cmp(r_cmp_fn), m_size(0), m_actual_size(resize_policy::min_size),\n   m_a_entries(s_entry_allocator.allocate(m_actual_size))\n-{\n-  PB_DS_ASSERT_VALID((*this))\n-}\n+{ PB_DS_ASSERT_VALID((*this)) }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-binary_heap_(const PB_DS_CLASS_C_DEC& other) :\n-  entry_cmp(other),\n-  resize_policy(other),\n-  m_size(0),\n+binary_heap(const PB_DS_CLASS_C_DEC& other)\n+: entry_cmp(other), resize_policy(other), m_size(0),\n   m_actual_size(other.m_actual_size),\n   m_a_entries(s_entry_allocator.allocate(m_actual_size))\n {\n   PB_DS_ASSERT_VALID(other)\n   _GLIBCXX_DEBUG_ASSERT(m_a_entries != other.m_a_entries);\n \n-  const_iterator first_it = other.begin();\n-  const_iterator last_it = other.end();\n-\n   __try\n     {\n-      while (first_it != last_it)\n-        {\n-\t  insert_value(*first_it, s_no_throw_copies_ind);\n-\t  ++first_it;\n-        }\n+      copy_from_range(other.begin(), other.end());\n     }\n   __catch(...)\n     {\n@@ -131,9 +113,8 @@ swap(PB_DS_CLASS_C_DEC& other)\n   PB_DS_ASSERT_VALID((*this))\n   PB_DS_ASSERT_VALID(other)\n   _GLIBCXX_DEBUG_ASSERT(m_a_entries != other.m_a_entries);\n-\n   value_swap(other);\n-  std::swap((entry_cmp& )(*this), (entry_cmp& )other);\n+  std::swap((entry_cmp&)(*this), (entry_cmp&)other);\n   PB_DS_ASSERT_VALID((*this))\n   PB_DS_ASSERT_VALID(other)\n }\n@@ -151,10 +132,9 @@ value_swap(PB_DS_CLASS_C_DEC& other)\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-~binary_heap_()\n+~binary_heap()\n {\n   for (size_type i = 0; i < m_size; ++i)\n     erase_at(m_a_entries, i, s_no_throw_copies_ind);\n   s_entry_allocator.deallocate(m_a_entries, m_actual_size);\n }\n-"}, {"sha": "b1b0f5ba1b996dc1fd4c189487e113fb23ef62b5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/debug_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fdebug_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file debug_fn_imps.hpp\n+ * @file binary_heap_/debug_fn_imps.hpp\n  * Contains an implementation class for a binary_heap.\n  */\n \n@@ -47,15 +47,15 @@ assert_valid(const char* __file, int __line) const\n {\n #ifdef PB_DS_REGRESSION\n   s_entry_allocator.check_allocated(m_a_entries, m_actual_size);\n-#endif \n+#endif\n \n   resize_policy::assert_valid(__file, __line);\n   PB_DS_DEBUG_VERIFY(m_size <= m_actual_size);\n   for (size_type i = 0; i < m_size; ++i)\n     {\n #ifdef PB_DS_REGRESSION\n       s_value_allocator.check_allocated(m_a_entries[i], 1);\n-#endif \n+#endif\n \n       if (left_child(i) < m_size)\n \tPB_DS_DEBUG_VERIFY(!entry_cmp::operator()(m_a_entries[i], m_a_entries[left_child(i)]));\n@@ -69,4 +69,4 @@ assert_valid(const char* __file, int __line) const\n     }\n }\n \n-#endif \n+#endif"}, {"sha": "42e799fc8bd91d6f1c067dbb7788402d1f9f4976", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/entry_cmp.hpp", "status": "modified", "additions": 30, "deletions": 38, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fentry_cmp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fentry_cmp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fentry_cmp.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file entry_cmp.hpp\n+ * @file binary_heap_/entry_cmp.hpp\n  * Contains an implementation class for a binary_heap.\n  */\n \n@@ -45,48 +45,40 @@ namespace __gnu_pbds\n {\n   namespace detail\n   {\n+    /// Entry compare, primary template.\n+    template<typename _VTp, typename Cmp_Fn, typename _Alloc, bool No_Throw>\n+      struct entry_cmp;\n \n-    template<typename Value_Type,\n-\t     class Cmp_Fn,\n-\t     bool No_Throw,\n-\t     class Allocator>\n-    struct entry_cmp\n-    {\n-      typedef Cmp_Fn type;\n-    };\n-\n-    template<typename Value_Type, class Cmp_Fn, class Allocator>\n-    struct entry_cmp<\n-      Value_Type,\n-      Cmp_Fn,\n-      false,\n-      Allocator>\n-    {\n-    public:\n-      typedef\n-      typename Allocator::template rebind<\n-      Value_Type>::other::const_pointer\n-      entry;\n-\n-      struct type : public Cmp_Fn\n+    /// Specialization, true.\n+    template<typename _VTp, typename Cmp_Fn, typename _Alloc>\n+      struct entry_cmp<_VTp, Cmp_Fn, _Alloc, true>\n       {\n-      public:\n-\tinline\n-\ttype()\n-\t{ }\n+\t/// Compare.\n+\ttypedef Cmp_Fn \t\t\t\t\t\ttype;\n+      };\n+\n+    /// Specialization, false.\n+    template<typename _VTp, typename Cmp_Fn, typename _Alloc>\n+      struct entry_cmp<_VTp, Cmp_Fn, _Alloc, false>\n+      {\n+      private:\n+\ttypedef typename _Alloc::template rebind<_VTp>\t\t__rebind_v;\n \n-\tinline\n-\ttype(const Cmp_Fn& other) : Cmp_Fn(other)\n-\t{ }\n+      public:\n+\ttypedef typename __rebind_v::other::const_pointer\tentry;\n \n-\tinline bool\n-\toperator()(entry p_lhs,  entry p_rhs) const\n+\t/// Compare plus entry.\n+\tstruct type : public Cmp_Fn\n \t{\n-\t  return Cmp_Fn::operator()(*p_lhs, * p_rhs);\n-\t}\n-      };\n-    };\n+\t  type() { }\n \n+\t  type(const Cmp_Fn& other) : Cmp_Fn(other) { }\n+\n+\t  bool\n+\t  operator()(entry lhs, entry rhs) const\n+\t  { return Cmp_Fn::operator()(*lhs, *rhs); }\n+\t};\n+      };\n   } // namespace detail\n } // namespace __gnu_pbds\n "}, {"sha": "001876ef1f05f95d0cfbcc22086b9792c05775e0", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/entry_pred.hpp", "status": "modified", "additions": 30, "deletions": 38, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fentry_pred.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fentry_pred.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fentry_pred.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file entry_pred.hpp\n+ * @file binary_heap_/entry_pred.hpp\n  * Contains an implementation class for a binary_heap.\n  */\n \n@@ -45,48 +45,40 @@ namespace __gnu_pbds\n {\n   namespace detail\n   {\n+    /// Entry predicate primary class template.\n+    template<typename _VTp, typename Pred, typename _Alloc, bool No_Throw>\n+      struct entry_pred;\n \n-    template<typename Value_Type,\n-\t     class Pred,\n-\t     bool No_Throw,\n-\t     class Allocator>\n-    struct entry_pred\n-    {\n-      typedef Pred type;\n-    };\n-\n-    template<typename Value_Type, class Pred, class Allocator>\n-    struct entry_pred<\n-      Value_Type,\n-      Pred,\n-      false,\n-      Allocator>\n-    {\n-    public:\n-      typedef\n-      typename Allocator::template rebind<\n-      Value_Type>::other::const_pointer\n-      entry;\n-\n-      struct type : public Pred\n+    /// Specialization, true.\n+    template<typename _VTp, typename Pred, typename _Alloc>\n+      struct entry_pred<_VTp, Pred, _Alloc, true>\n       {\n-      public:\n-\tinline\n-\ttype()\n-\t{ }\n+\ttypedef Pred \t\t\t\t\t\ttype;\n+      };\n+\n+    /// Specialization, false.\n+    template<typename _VTp, typename Pred, typename _Alloc>\n+      struct entry_pred<_VTp, Pred, _Alloc, false>\n+      {\n+      private:\n+\ttypedef typename _Alloc::template rebind<_VTp>\t\t__rebind_v;\n \n-\tinline\n-\ttype(const Pred& other) : Pred(other)\n-\t{ }\n+      public:\n+\ttypedef typename __rebind_v::other::const_pointer\tentry;\n \n-\tinline bool\n-\toperator()(entry p_v) const\n+\tstruct type : public Pred\n \t{\n-\t  return Pred::operator()(*p_v);\n-\t}\n-      };\n-    };\n+\t  inline\n+\t  type() { }\n \n+\t  inline\n+\t  type(const Pred& other) : Pred(other) { }\n+\n+\t  inline bool\n+\t  operator()(entry p_v) const\n+\t  { return Pred::operator()(*p_v); }\n+\t};\n+      };\n   } // namespace detail\n } // namespace __gnu_pbds\n "}, {"sha": "f204d81f603998e1e333a447269dcc7600c12884", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/erase_fn_imps.hpp", "status": "modified", "additions": 19, "deletions": 52, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Ferase_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -35,7 +35,7 @@\n // warranty.\n \n /**\n- * @file erase_fn_imps.hpp\n+ * @file binary_heap_/erase_fn_imps.hpp\n  * Contains an implementation class for a binary_heap.\n  */\n \n@@ -49,23 +49,17 @@ clear()\n \n   __try\n     {\n-      const size_type actual_size = resize_policy::get_new_size_for_arbitrary(0);\n-\n-      entry_pointer a_entries = s_entry_allocator.allocate(actual_size);\n-\n-      resize_policy::notify_arbitrary(actual_size);\n-\n+      const size_type new_size = resize_policy::get_new_size_for_arbitrary(0);\n+      entry_pointer new_entries = s_entry_allocator.allocate(new_size);\n+      resize_policy::notify_arbitrary(new_size);\n       s_entry_allocator.deallocate(m_a_entries, m_actual_size);\n-\n-      m_actual_size = actual_size;\n-\n-      m_a_entries = a_entries;\n+      m_actual_size = new_size;\n+      m_a_entries = new_entries;\n     }\n   __catch(...)\n     { }\n \n   m_size = 0;\n-\n   PB_DS_ASSERT_VALID((*this))\n }\n \n@@ -92,13 +86,9 @@ pop()\n   PB_DS_ASSERT_VALID((*this))\n   _GLIBCXX_DEBUG_ASSERT(!empty());\n \n-  erase_at(m_a_entries, 0, s_no_throw_copies_ind);\n-\n-  std::pop_heap(m_a_entries, m_a_entries + m_size,\n-\t\tstatic_cast<entry_cmp& >(*this));\n-\n+  pop_heap();\n+  erase_at(m_a_entries, m_size - 1, s_no_throw_copies_ind);\n   resize_for_erase_if_needed();\n-\n   _GLIBCXX_DEBUG_ASSERT(m_size > 0);\n   --m_size;\n \n@@ -113,43 +103,32 @@ erase_if(Pred pred)\n {\n   PB_DS_ASSERT_VALID((*this))\n \n-  typedef typename entry_pred<value_type, Pred, simple_value, Allocator>::type\n+  typedef typename entry_pred<value_type, Pred, _Alloc, simple_value>::type\n     pred_t;\n \n   const size_type left = partition(pred_t(pred));\n-\n   _GLIBCXX_DEBUG_ASSERT(m_size >= left);\n-\n   const size_type ersd = m_size - left;\n-\n   for (size_type i = left; i < m_size; ++i)\n     erase_at(m_a_entries, i, s_no_throw_copies_ind);\n \n   __try\n     {\n-      const size_type actual_size =\n+      const size_type new_size =\n \tresize_policy::get_new_size_for_arbitrary(left);\n \n-      entry_pointer a_entries = s_entry_allocator.allocate(actual_size);\n-\n-      std::copy(m_a_entries, m_a_entries + left, a_entries);\n-\n+      entry_pointer new_entries = s_entry_allocator.allocate(new_size);\n+      std::copy(m_a_entries, m_a_entries + left, new_entries);\n       s_entry_allocator.deallocate(m_a_entries, m_actual_size);\n-\n-      m_actual_size = actual_size;\n-\n+      m_actual_size = new_size;\n       resize_policy::notify_arbitrary(m_actual_size);\n     }\n   __catch(...)\n     { };\n \n   m_size = left;\n-\n-  std::make_heap(m_a_entries, m_a_entries + m_size,\n-\t\t static_cast<entry_cmp& >(*this));\n-\n+  make_heap();\n   PB_DS_ASSERT_VALID((*this))\n-\n   return ersd;\n }\n \n@@ -162,16 +141,12 @@ erase(point_iterator it)\n   _GLIBCXX_DEBUG_ASSERT(!empty());\n \n   const size_type fix_pos = it.m_p_e - m_a_entries;\n-\n   std::swap(*it.m_p_e, m_a_entries[m_size - 1]);\n-\n   erase_at(m_a_entries, m_size - 1, s_no_throw_copies_ind);\n-\n   resize_for_erase_if_needed();\n \n   _GLIBCXX_DEBUG_ASSERT(m_size > 0);\n   --m_size;\n-\n   _GLIBCXX_DEBUG_ASSERT(fix_pos <= m_size);\n \n   if (fix_pos != m_size)\n@@ -190,21 +165,15 @@ resize_for_erase_if_needed()\n \n   __try\n     {\n-      const size_type new_actual_size =\n-\tresize_policy::get_new_size_for_shrink();\n-\n-      entry_pointer a_new_entries = s_entry_allocator.allocate(new_actual_size);\n-\n+      const size_type new_size = resize_policy::get_new_size_for_shrink();\n+      entry_pointer new_entries = s_entry_allocator.allocate(new_size);\n       resize_policy::notify_shrink_resize();\n \n       _GLIBCXX_DEBUG_ASSERT(m_size > 0);\n-      std::copy(m_a_entries, m_a_entries + m_size - 1, a_new_entries);\n-\n+      std::copy(m_a_entries, m_a_entries + m_size - 1, new_entries);\n       s_entry_allocator.deallocate(m_a_entries, m_actual_size);\n-\n-      m_actual_size = new_actual_size;\n-\n-      m_a_entries = a_new_entries;\n+      m_actual_size = new_size;\n+      m_a_entries = new_entries;\n     }\n   __catch(...)\n     { }\n@@ -230,9 +199,7 @@ partition(Pred pred)\n       else\n \t{\n \t  _GLIBCXX_DEBUG_ASSERT(left < right);\n-\n \t  std::swap(m_a_entries[left], m_a_entries[right]);\n-\n \t  ++left;\n \t  --right;\n \t}"}, {"sha": "c445dc0c31f4968ce4ece860b6c4c29181204367", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/find_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Ffind_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file find_fn_imps.hpp\n+ * @file binary_heap_/find_fn_imps.hpp\n  * Contains an implementation class for a binary_heap.\n  */\n \n@@ -45,47 +45,35 @@ top() const\n {\n   PB_DS_ASSERT_VALID((*this))\n   _GLIBCXX_DEBUG_ASSERT(!empty());\n-\n   return top_imp(s_no_throw_copies_ind);\n }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_reference\n PB_DS_CLASS_C_DEC::\n top_imp(true_type) const\n-{\n-  return* m_a_entries;\n-}\n+{ return *m_a_entries; }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_reference\n PB_DS_CLASS_C_DEC::\n top_imp(false_type) const\n-{\n-  return** m_a_entries;\n-}\n+{ return **m_a_entries; }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n left_child(size_type i)\n-{\n-  return i*  2 + 1;\n-}\n+{ return i * 2 + 1; }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n right_child(size_type i)\n-{\n-  return i*  2 + 2;\n-}\n+{ return i * 2 + 2; }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n parent(size_type i)\n-{\n-  return (i - 1) / 2;\n-}\n-\n+{ return (i - 1) / 2; }"}, {"sha": "ae36d3181a11bfda1f57689931961fe690001b2b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/info_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Finfo_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,31 +34,25 @@\n // warranty.\n \n /**\n- * @file info_fn_imps.hpp\n+ * @file binary_heap_/info_fn_imps.hpp\n  * Contains an implementation class for a binary_heap.\n  */\n \n PB_DS_CLASS_T_DEC\n inline bool\n PB_DS_CLASS_C_DEC::\n empty() const\n-{\n-  return (m_size == 0);\n-}\n+{ return m_size == 0; }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n size() const\n-{\n-  return (m_size);\n-}\n+{ return m_size; }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n max_size() const\n-{\n-  return (s_entry_allocator.max_size());\n-}\n+{ return s_entry_allocator.max_size(); }\n "}, {"sha": "1e1ed969e723dbf1e32bc0623d552998cb3ab8be", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/insert_fn_imps.hpp", "status": "modified", "additions": 38, "deletions": 47, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Finsert_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file insert_fn_imps.hpp\n+ * @file binary_heap_/insert_fn_imps.hpp\n  * Contains an implementation class for a binary_heap.\n  */\n \n@@ -45,8 +45,7 @@ push(const_reference r_val)\n {\n   PB_DS_ASSERT_VALID((*this))\n   insert_value(r_val, s_no_throw_copies_ind);\n-  std::push_heap(m_a_entries, m_a_entries + m_size, \n-\t\t static_cast<entry_cmp&>(*this));\n+  push_heap();\n   PB_DS_ASSERT_VALID((*this))\n   return point_iterator(m_a_entries);\n }\n@@ -57,7 +56,6 @@ PB_DS_CLASS_C_DEC::\n insert_value(value_type val, true_type)\n {\n   resize_for_insert_if_needed();\n-\n   m_a_entries[m_size++] = val;\n }\n \n@@ -74,15 +72,6 @@ insert_value(const_reference r_val, false_type)\n   m_a_entries[m_size++] = p_new;\n }\n \n-PB_DS_CLASS_T_DEC\n-inline void\n-PB_DS_CLASS_C_DEC::\n-insert_entry(entry e)\n-{\n-  resize_for_insert_if_needed();\n-  m_a_entries[m_size++] = e;\n-}\n-\n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n@@ -94,13 +83,15 @@ resize_for_insert_if_needed()\n       return;\n     }\n \n-  const size_type new_actual_size = resize_policy::get_new_size_for_grow();\n-  entry_pointer a_new_entries = s_entry_allocator.allocate(new_actual_size);\n+  const size_type new_size = resize_policy::get_new_size_for_grow();\n+  entry_pointer new_entries = s_entry_allocator.allocate(new_size);\n   resize_policy::notify_grow_resize();\n-  std::copy(m_a_entries, m_a_entries + m_size, a_new_entries);\n+\n+  std::copy(m_a_entries, m_a_entries + m_size, new_entries);\n   s_entry_allocator.deallocate(m_a_entries, m_actual_size);\n-  m_actual_size = new_actual_size;\n-  m_a_entries = a_new_entries;\n+  m_actual_size = new_size;\n+  m_a_entries = new_entries;\n+  make_heap();\n }\n \n PB_DS_CLASS_T_DEC\n@@ -112,6 +103,7 @@ modify(point_iterator it, const_reference r_new_val)\n   swap_value_imp(it.m_p_e, r_new_val, s_no_throw_copies_ind);\n   fix(it.m_p_e);\n   PB_DS_ASSERT_VALID((*this))\n+  _GLIBCXX_DEBUG_ASSERT(is_heap());\n }\n \n PB_DS_CLASS_T_DEC\n@@ -123,43 +115,44 @@ fix(entry_pointer p_e)\n   if (i > 0 && entry_cmp::operator()(m_a_entries[parent(i)], m_a_entries[i]))\n     {\n       size_type parent_i = parent(i);\n-      while (i > 0 \n+      while (i > 0\n \t     && entry_cmp::operator()(m_a_entries[parent_i], m_a_entries[i]))\n-        {\n+\t{\n \t  std::swap(m_a_entries[i], m_a_entries[parent_i]);\n \t  i = parent_i;\n \t  parent_i = parent(i);\n-        }\n+\t}\n \n       PB_DS_ASSERT_VALID((*this))\n       return;\n     }\n \n   while (i < m_size)\n     {\n-      const size_type left_child_i = left_child(i);\n-      const size_type right_child_i = right_child(i);\n-      _GLIBCXX_DEBUG_ASSERT(right_child_i > left_child_i);\n-      const bool smaller_than_left_child = left_child_i < m_size && \n-\tentry_cmp::operator()(m_a_entries[i], m_a_entries[left_child_i]);\n-\n-      const bool smaller_than_right_child = right_child_i < m_size && \n-\tentry_cmp::operator()(m_a_entries[i], m_a_entries[right_child_i]);\n-\n-      const bool swap_with_r_child = smaller_than_right_child && (!smaller_than_left_child || entry_cmp::operator()(m_a_entries[left_child_i], m_a_entries[right_child_i]));\n-\n-      const bool swap_with_l_child = !swap_with_r_child && smaller_than_left_child;\n-\n-      if (swap_with_l_child)\n-        {\n-\t  std::swap(m_a_entries[i], m_a_entries[left_child_i]);\n-\t  i = left_child_i;\n-        }\n-      else if (swap_with_r_child)\n-        {\n-\t  std::swap(m_a_entries[i], m_a_entries[right_child_i]);\n-\t  i = right_child_i;\n-        }\n+      const size_type lchild_i = left_child(i);\n+      const size_type rchild_i = right_child(i);\n+      _GLIBCXX_DEBUG_ASSERT(rchild_i > lchild_i);\n+\n+      const bool smaller_than_lchild = lchild_i < m_size &&\n+\tentry_cmp::operator()(m_a_entries[i], m_a_entries[lchild_i]);\n+\n+      const bool smaller_than_rchild = rchild_i < m_size &&\n+\tentry_cmp::operator()(m_a_entries[i], m_a_entries[rchild_i]);\n+\n+      const bool swap_with_rchild = smaller_than_rchild && (!smaller_than_lchild || entry_cmp::operator()(m_a_entries[lchild_i], m_a_entries[rchild_i]));\n+\n+      const bool swap_with_lchild = !swap_with_rchild && smaller_than_lchild;\n+\n+      if (swap_with_lchild)\n+\t{\n+\t  std::swap(m_a_entries[i], m_a_entries[lchild_i]);\n+\t  i = lchild_i;\n+\t}\n+      else if (swap_with_rchild)\n+\t{\n+\t  std::swap(m_a_entries[i], m_a_entries[rchild_i]);\n+\t  i = rchild_i;\n+\t}\n       else\n \ti = m_size;\n     }\n@@ -169,9 +162,7 @@ PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n swap_value_imp(entry_pointer p_e, value_type new_val, true_type)\n-{\n-  * p_e = new_val;\n-}\n+{ *p_e = new_val; }\n \n PB_DS_CLASS_T_DEC\n inline void"}, {"sha": "daaf2e4a7f89e113b28a3fd1855962c08d80326e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/iterators_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fiterators_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fiterators_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fiterators_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,39 +34,31 @@\n // warranty.\n \n /**\n- * @file iterators_fn_imps.hpp\n+ * @file binary_heap_/iterators_fn_imps.hpp\n  * Contains an implementation class for a binary_heap.\n  */\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::iterator\n PB_DS_CLASS_C_DEC::\n begin()\n-{\n-  return (iterator(m_a_entries));\n-}\n+{ return iterator(m_a_entries); }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_iterator\n PB_DS_CLASS_C_DEC::\n begin() const\n-{\n-  return (const_iterator(m_a_entries));\n-}\n+{ return const_iterator(m_a_entries); }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::iterator\n PB_DS_CLASS_C_DEC::\n end()\n-{\n-  return (iterator(m_a_entries + m_size));\n-}\n+{ return iterator(m_a_entries + m_size); }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_iterator\n PB_DS_CLASS_C_DEC::\n end() const\n-{\n-  return (const_iterator(m_a_entries + m_size));\n-}\n+{ return const_iterator(m_a_entries + m_size); }\n "}, {"sha": "873626073878368362ee47b6ba41a68cb0efe8a6", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/point_const_iterator.hpp", "status": "renamed", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fpoint_const_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fpoint_const_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fpoint_const_iterator.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,9 +34,9 @@\n // warranty.\n \n /**\n- * @file const_point_iterator.hpp\n+ * @file binary_heap_/point_const_iterator.hpp\n  * Contains an iterator class returned by the table's const find and insert\n- *     methods.\n+ * methods.\n  */\n \n #ifndef PB_DS_BINARY_HEAP_CONST_FIND_ITERATOR_HPP\n@@ -51,11 +51,11 @@ namespace __gnu_pbds\n   {\n     // Const point-type iterator.\n     template<typename Value_Type, typename Entry, bool Simple, \n-\t     typename Allocator>\n-    class binary_heap_const_point_iterator_\n+\t     typename _Alloc>\n+    class binary_heap_point_const_iterator_\n     {\n     protected:\n-      typedef typename Allocator::template rebind<Entry>::other::pointer entry_pointer;\n+      typedef typename _Alloc::template rebind<Entry>::other::pointer entry_pointer;\n \n     public:\n       // Category.\n@@ -68,35 +68,35 @@ namespace __gnu_pbds\n       typedef Value_Type value_type;\n \n       // Iterator's pointer type.\n-      typedef typename Allocator::template rebind<value_type>::other::pointer\n+      typedef typename _Alloc::template rebind<value_type>::other::pointer\n       pointer;\n \n       // Iterator's const pointer type.\n       typedef\n-      typename Allocator::template rebind<value_type>::other::const_pointer\n+      typename _Alloc::template rebind<value_type>::other::const_pointer\n       const_pointer;\n \n       // Iterator's reference type.\n       typedef\n-      typename Allocator::template rebind<value_type>::other::reference\n+      typename _Alloc::template rebind<value_type>::other::reference\n       reference;\n \n       // Iterator's const reference type.\n       typedef\n-      typename Allocator::template rebind<value_type>::other::const_reference\n+      typename _Alloc::template rebind<value_type>::other::const_reference\n       const_reference;\n \n       inline\n-      binary_heap_const_point_iterator_(entry_pointer p_e) : m_p_e(p_e)\n+      binary_heap_point_const_iterator_(entry_pointer p_e) : m_p_e(p_e)\n       { }\n \n       // Default constructor.\n       inline\n-      binary_heap_const_point_iterator_() : m_p_e(0) { }\n+      binary_heap_point_const_iterator_() : m_p_e(0) { }\n \n       // Copy constructor.\n       inline\n-      binary_heap_const_point_iterator_(const binary_heap_const_point_iterator_& other)\n+      binary_heap_point_const_iterator_(const binary_heap_point_const_iterator_& other)\n       : m_p_e(other.m_p_e)\n       { }\n \n@@ -118,12 +118,12 @@ namespace __gnu_pbds\n \n       // Compares content to a different iterator object.\n       inline bool\n-      operator==(const binary_heap_const_point_iterator_& other) const\n+      operator==(const binary_heap_point_const_iterator_& other) const\n       { return m_p_e == other.m_p_e; }\n \n       // Compares content (negatively) to a different iterator object.\n       inline bool\n-      operator!=(const binary_heap_const_point_iterator_& other) const\n+      operator!=(const binary_heap_point_const_iterator_& other) const\n       { return m_p_e != other.m_p_e; }\n \n     private:", "previous_filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/const_point_iterator.hpp"}, {"sha": "f3782221b495db4795a08df42d75b3772da0857a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/policy_access_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fpolicy_access_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fpolicy_access_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fpolicy_access_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file policy_access_fn_imps.hpp\n+ * @file binary_heap_/policy_access_fn_imps.hpp\n  * Contains an implementation class for a binary_heap.\n  */\n "}, {"sha": "e3d74bffd69898c6cbf1615914f4dff8f4cc36eb", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/resize_policy.hpp", "status": "modified", "additions": 87, "deletions": 100, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fresize_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fresize_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fresize_policy.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file resize_policy.hpp\n+ * @file binary_heap_/resize_policy.hpp\n  * Contains an implementation class for a binary_heap.\n  */\n \n@@ -47,49 +47,58 @@ namespace __gnu_pbds\n {\n   namespace detail\n   {\n-\n-#define PB_DS_CLASS_T_DEC template<typename Size_Type>\n-\n-#define PB_DS_CLASS_C_DEC resize_policy<Size_Type>\n-\n-    template<typename Size_Type>\n+    /// Resize policy for binary heap.\n+    template<typename _Tp>\n     class resize_policy\n     {\n-    public:\n-      typedef Size_Type size_type;\n-\n+    private:\n       enum\n \t{\n-\t  min_size = 16\n+\t  ratio = 8,\n+\t  factor = 2\n \t};\n \n+      // Next shrink size.\n+      _Tp \t\tm_shrink_size;\n+\n+      // Next grow size.\n+      _Tp \t\tm_grow_size;\n+\n     public:\n-      inline\n-      resize_policy();\n+      typedef _Tp\tsize_type;\n+\n+      static const _Tp\tmin_size = 16;\n+\n+      resize_policy() : m_shrink_size(0), m_grow_size(min_size)\n+      { PB_DS_ASSERT_VALID((*this)) }\n+\n+      resize_policy(const resize_policy& other)\n+      : m_shrink_size(other.m_shrink_size), m_grow_size(other.m_grow_size)\n+      { PB_DS_ASSERT_VALID((*this)) }\n \n       inline void\n-      swap(PB_DS_CLASS_C_DEC& other);\n+      swap(resize_policy<_Tp>&);\n \n       inline bool\n-      resize_needed_for_grow(size_type size) const;\n+      resize_needed_for_grow(size_type) const;\n \n       inline bool\n-      resize_needed_for_shrink(size_type size) const;\n+      resize_needed_for_shrink(size_type) const;\n \n       inline bool\n-      grow_needed(size_type size) const;\n+      grow_needed(size_type) const;\n \n       inline bool\n-      shrink_needed(size_type size) const;\n+      shrink_needed(size_type) const;\n \n       inline size_type\n       get_new_size_for_grow() const;\n \n       inline size_type\n       get_new_size_for_shrink() const;\n \n-      size_type\n-      get_new_size_for_arbitrary(size_type size) const;\n+      inline size_type\n+      get_new_size_for_arbitrary(size_type) const;\n \n       inline void\n       notify_grow_resize();\n@@ -98,83 +107,67 @@ namespace __gnu_pbds\n       notify_shrink_resize();\n \n       void\n-      notify_arbitrary(size_type actual_size);\n+      notify_arbitrary(size_type);\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid(const char* file, int line) const;\n-#endif \n+      assert_valid(const char*, int) const;\n+#endif\n \n #ifdef PB_DS_BINARY_HEAP_TRACE_\n       void\n       trace() const;\n-#endif \n-\n-    private:\n-      enum\n-\t{\n-\t  ratio = 8,\n-\t  factor = 2\n-\t};\n-\n-    private:\n-      size_type m_next_shrink_size;\n-      size_type m_next_grow_size;\n+#endif\n     };\n \n-    PB_DS_CLASS_T_DEC\n-    inline\n-    PB_DS_CLASS_C_DEC::\n-    resize_policy() :\n-      m_next_shrink_size(0),\n-      m_next_grow_size(min_size)\n-    { PB_DS_ASSERT_VALID((*this)) }\n+    template<typename _Tp>\n+      const _Tp resize_policy<_Tp>::min_size;\n \n-    PB_DS_CLASS_T_DEC\n+    template<typename _Tp>\n     inline void\n-    PB_DS_CLASS_C_DEC::\n-    swap(PB_DS_CLASS_C_DEC& other)\n+    resize_policy<_Tp>::\n+    swap(resize_policy<_Tp>& other)\n     {\n-      std::swap(m_next_shrink_size, other.m_next_shrink_size);\n-      std::swap(m_next_grow_size, other.m_next_grow_size);\n+      std::swap(m_shrink_size, other.m_shrink_size);\n+      std::swap(m_grow_size, other.m_grow_size);\n     }\n \n-    PB_DS_CLASS_T_DEC\n+    template<typename _Tp>\n     inline bool\n-    PB_DS_CLASS_C_DEC::\n+    resize_policy<_Tp>::\n     resize_needed_for_grow(size_type size) const\n     {\n-      _GLIBCXX_DEBUG_ASSERT(size <= m_next_grow_size);\n-      return size == m_next_grow_size;\n+      _GLIBCXX_DEBUG_ASSERT(size <= m_grow_size);\n+      return size == m_grow_size;\n     }\n \n-    PB_DS_CLASS_T_DEC\n+    template<typename _Tp>\n     inline bool\n-    PB_DS_CLASS_C_DEC::\n+    resize_policy<_Tp>::\n     resize_needed_for_shrink(size_type size) const\n     {\n-      _GLIBCXX_DEBUG_ASSERT(size <= m_next_grow_size);\n-      return size == m_next_shrink_size;\n+      _GLIBCXX_DEBUG_ASSERT(size <= m_grow_size);\n+      return size == m_shrink_size;\n     }\n \n-    PB_DS_CLASS_T_DEC\n-    inline typename PB_DS_CLASS_C_DEC::size_type\n-    PB_DS_CLASS_C_DEC::\n+    template<typename _Tp>\n+    inline typename resize_policy<_Tp>::size_type\n+    resize_policy<_Tp>::\n     get_new_size_for_grow() const\n-    { return m_next_grow_size*  factor; }\n+    { return m_grow_size * factor; }\n \n-    PB_DS_CLASS_T_DEC\n-    inline typename PB_DS_CLASS_C_DEC::size_type\n-    PB_DS_CLASS_C_DEC::\n+    template<typename _Tp>\n+    inline typename resize_policy<_Tp>::size_type\n+    resize_policy<_Tp>::\n     get_new_size_for_shrink() const\n     {\n-      const size_type half_size = m_next_grow_size / factor;\n-      return std::max(static_cast<size_type>(min_size), half_size);\n+      const size_type half_size = m_grow_size / factor;\n+      return std::max(min_size, half_size);\n     }\n \n-    PB_DS_CLASS_T_DEC\n-    inline typename PB_DS_CLASS_C_DEC::size_type\n-    PB_DS_CLASS_C_DEC::\n+    template<typename _Tp>\n+    inline typename resize_policy<_Tp>::size_type\n+    resize_policy<_Tp>::\n     get_new_size_for_arbitrary(size_type size) const\n     {\n       size_type ret = min_size;\n@@ -183,71 +176,65 @@ namespace __gnu_pbds\n       return ret;\n     }\n \n-    PB_DS_CLASS_T_DEC\n+    template<typename _Tp>\n     inline void\n-    PB_DS_CLASS_C_DEC::\n+    resize_policy<_Tp>::\n     notify_grow_resize()\n     {\n       PB_DS_ASSERT_VALID((*this))\n-      _GLIBCXX_DEBUG_ASSERT(m_next_grow_size >= min_size);\n-      m_next_grow_size *= factor;\n-      m_next_shrink_size = m_next_grow_size / ratio;\n+      _GLIBCXX_DEBUG_ASSERT(m_grow_size >= min_size);\n+      m_grow_size *= factor;\n+      m_shrink_size = m_grow_size / ratio;\n       PB_DS_ASSERT_VALID((*this))\n     }\n \n-    PB_DS_CLASS_T_DEC\n+    template<typename _Tp>\n     inline void\n-    PB_DS_CLASS_C_DEC::\n+    resize_policy<_Tp>::\n     notify_shrink_resize()\n     {\n       PB_DS_ASSERT_VALID((*this))\n-      m_next_shrink_size /= factor;\n-      if (m_next_shrink_size == 1)\n-\tm_next_shrink_size = 0;\n-\n-      m_next_grow_size =\n-\tstd::max(m_next_grow_size / factor, static_cast<size_type>(min_size));\n+      m_shrink_size /= factor;\n+      if (m_shrink_size == 1)\n+\tm_shrink_size = 0;\n+      m_grow_size = std::max(m_grow_size / factor, min_size);\n       PB_DS_ASSERT_VALID((*this))\n     }\n \n-    PB_DS_CLASS_T_DEC\n+    template<typename _Tp>\n     inline void\n-    PB_DS_CLASS_C_DEC::\n+    resize_policy<_Tp>::\n     notify_arbitrary(size_type actual_size)\n     {\n-      m_next_grow_size = actual_size;\n-      m_next_shrink_size = m_next_grow_size / ratio;\n+      m_grow_size = actual_size;\n+      m_shrink_size = m_grow_size / ratio;\n       PB_DS_ASSERT_VALID((*this))\n     }\n \n #ifdef _GLIBCXX_DEBUG\n-    PB_DS_CLASS_T_DEC\n+    template<typename _Tp>\n     void\n-    PB_DS_CLASS_C_DEC::\n+    resize_policy<_Tp>::\n     assert_valid(const char* __file, int __line) const\n     {\n-      PB_DS_DEBUG_VERIFY(m_next_shrink_size == 0 ||\n-\t\t       m_next_shrink_size*  ratio == m_next_grow_size);\n-\n-      PB_DS_DEBUG_VERIFY(m_next_grow_size >= min_size);\n+      PB_DS_DEBUG_VERIFY(m_shrink_size == 0\n+\t\t\t || m_shrink_size * ratio == m_grow_size);\n+      PB_DS_DEBUG_VERIFY(m_grow_size >= min_size);\n     }\n-#endif \n+#endif\n \n #ifdef PB_DS_BINARY_HEAP_TRACE_\n-    PB_DS_CLASS_T_DEC\n+    template<typename _Tp>\n     void\n-    PB_DS_CLASS_C_DEC::\n+    resize_policy<_Tp>::\n     trace() const\n     {\n-      std::cerr << \"shrink = \" << m_next_shrink_size <<\n-\t\" grow = \" << m_next_grow_size << std::endl;\n+      std::cerr << \"shrink = \" << m_shrink_size\n+\t\t<< \" grow = \" << m_grow_size << std::endl;\n     }\n-#endif \n-\n-#undef PB_DS_CLASS_T_DEC\n-#undef PB_DS_CLASS_C_DEC\n+#endif\n \n } // namespace detail\n } // namespace __gnu_pbds\n \n-#endif \n+#endif"}, {"sha": "0d09b535730e0f7cdfa27c636b708df4a7650ae3", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/split_join_fn_imps.hpp", "status": "modified", "additions": 20, "deletions": 32, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fsplit_join_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -35,7 +35,7 @@\n // warranty.\n \n /**\n- * @file split_join_fn_imps.hpp\n+ * @file binary_heap_/split_join_fn_imps.hpp\n  * Contains an implementation class for a binary_heap.\n  */\n \n@@ -48,40 +48,30 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n   PB_DS_ASSERT_VALID((*this))\n \n   typedef\n-    typename entry_pred<\n-    value_type,\n-    Pred,\n-    simple_value,\n-    Allocator>::type\n+    typename entry_pred<value_type, Pred, _Alloc, simple_value>::type\n     pred_t;\n \n   const size_type left = partition(pred_t(pred));\n-\n   _GLIBCXX_DEBUG_ASSERT(m_size >= left);\n \n   const size_type ersd = m_size - left;\n-\n   _GLIBCXX_DEBUG_ASSERT(m_size >= ersd);\n \n-  const size_type actual_size =\n-    resize_policy::get_new_size_for_arbitrary(left);\n-\n-  const size_type other_actual_size =\n-    other.get_new_size_for_arbitrary(ersd);\n+  const size_type new_size = resize_policy::get_new_size_for_arbitrary(left);\n+  const size_type other_actual_size = other.get_new_size_for_arbitrary(ersd);\n \n   entry_pointer a_entries = 0;\n   entry_pointer a_other_entries = 0;\n \n   __try\n     {\n-      a_entries = s_entry_allocator.allocate(actual_size);\n-\n+      a_entries = s_entry_allocator.allocate(new_size);\n       a_other_entries = s_entry_allocator.allocate(other_actual_size);\n     }\n   __catch(...)\n     {\n       if (a_entries != 0)\n-\ts_entry_allocator.deallocate(a_entries, actual_size);\n+\ts_entry_allocator.deallocate(a_entries, new_size);\n \n       if (a_other_entries != 0)\n \ts_entry_allocator.deallocate(a_other_entries, other_actual_size);\n@@ -92,14 +82,14 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n   for (size_type i = 0; i < other.m_size; ++i)\n     erase_at(other.m_a_entries, i, s_no_throw_copies_ind);\n \n-  _GLIBCXX_DEBUG_ASSERT(actual_size >= left);\n+  _GLIBCXX_DEBUG_ASSERT(new_size >= left);\n   std::copy(m_a_entries, m_a_entries + left, a_entries);\n   std::copy(m_a_entries + left, m_a_entries + m_size, a_other_entries);\n \n   s_entry_allocator.deallocate(m_a_entries, m_actual_size);\n   s_entry_allocator.deallocate(other.m_a_entries, other.m_actual_size);\n \n-  m_actual_size = actual_size;\n+  m_actual_size = new_size;\n   other.m_actual_size = other_actual_size;\n \n   m_size = left;\n@@ -108,8 +98,8 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n   m_a_entries = a_entries;\n   other.m_a_entries = a_other_entries;\n \n-  std::make_heap(m_a_entries, m_a_entries + m_size, static_cast<entry_cmp& >(*this));\n-  std::make_heap(other.m_a_entries, other.m_a_entries + other.m_size, static_cast<entry_cmp& >(other));\n+  make_heap();\n+  other.make_heap();\n \n   resize_policy::notify_arbitrary(m_actual_size);\n   other.notify_arbitrary(other.m_actual_size);\n@@ -127,20 +117,20 @@ join(PB_DS_CLASS_C_DEC& other)\n   PB_DS_ASSERT_VALID(other)\n \n   const size_type len = m_size + other.m_size;\n-  const size_type actual_size = resize_policy::get_new_size_for_arbitrary(len);\n+  const size_type new_size = resize_policy::get_new_size_for_arbitrary(len);\n \n   entry_pointer a_entries = 0;\n   entry_pointer a_other_entries = 0;\n \n   __try\n     {\n-      a_entries = s_entry_allocator.allocate(actual_size);\n+      a_entries = s_entry_allocator.allocate(new_size);\n       a_other_entries = s_entry_allocator.allocate(resize_policy::min_size);\n     }\n   __catch(...)\n     {\n       if (a_entries != 0)\n-\ts_entry_allocator.deallocate(a_entries, actual_size);\n+\ts_entry_allocator.deallocate(a_entries, new_size);\n \n       if (a_other_entries != 0)\n \ts_entry_allocator.deallocate(a_other_entries, resize_policy::min_size);\n@@ -149,25 +139,23 @@ join(PB_DS_CLASS_C_DEC& other)\n     }\n \n   std::copy(m_a_entries, m_a_entries + m_size, a_entries);\n-  std::copy(other.m_a_entries, other.m_a_entries + other.m_size, a_entries + m_size);\n+  std::copy(other.m_a_entries, other.m_a_entries + other.m_size,\n+\t    a_entries + m_size);\n \n   s_entry_allocator.deallocate(m_a_entries, m_actual_size);\n   m_a_entries = a_entries;\n   m_size = len;\n-  m_actual_size = actual_size;\n-\n-  resize_policy::notify_arbitrary(actual_size);\n-\n-  std::make_heap(m_a_entries, m_a_entries + m_size, static_cast<entry_cmp& >(*this));\n+  m_actual_size = new_size;\n+  resize_policy::notify_arbitrary(new_size);\n+  make_heap();\n \n   s_entry_allocator.deallocate(other.m_a_entries, other.m_actual_size);\n   other.m_a_entries = a_other_entries;\n   other.m_size = 0;\n   other.m_actual_size = resize_policy::min_size;\n-\n   other.notify_arbitrary(resize_policy::min_size);\n-\n+  other.make_heap();\n+  \n   PB_DS_ASSERT_VALID((*this))\n   PB_DS_ASSERT_VALID(other)\n }\n-"}, {"sha": "2704ec65c1b9b010d5098dc740f8251e13dcc7f2", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/trace_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Ftrace_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Ftrace_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Ftrace_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file trace_fn_imps.hpp\n+ * @file binary_heap_/trace_fn_imps.hpp\n  * Contains an implementation class for a binary_heap.\n  */\n "}, {"sha": "d8704f65c41b83d6aa92e940111c6004f2ac94fa", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_/binomial_heap_.hpp", "status": "modified", "additions": 28, "deletions": 36, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fbinomial_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fbinomial_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fbinomial_heap_.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -53,64 +53,56 @@ namespace __gnu_pbds\n {\n   namespace detail\n   {\n-\n #define PB_DS_CLASS_T_DEC \\\n-    template<typename Value_Type, class Cmp_Fn, class Allocator>\n+    template<typename Value_Type, typename Cmp_Fn, typename _Alloc>\n \n #define PB_DS_CLASS_C_DEC \\\n-    binomial_heap_<Value_Type, Cmp_Fn, Allocator>\n-\n-#define PB_DS_BASE_C_DEC \\\n-    binomial_heap_base_<Value_Type, Cmp_Fn, Allocator>\n+    binomial_heap<Value_Type, Cmp_Fn, _Alloc>\n \n-    /**\n-     * class description = \"8y|\\|0|\\/|i41 h34p 74813\">\n-     **/\n-    template<typename Value_Type, class Cmp_Fn, class Allocator>\n-    class binomial_heap_ : public PB_DS_BASE_C_DEC\n+    /// Binomial heap.\n+    template<typename Value_Type, typename Cmp_Fn, typename _Alloc>\n+    class binomial_heap\n+    : public binomial_heap_base<Value_Type, Cmp_Fn, _Alloc>\n     {\n     private:\n-      typedef PB_DS_BASE_C_DEC base_type;\n-      typedef typename base_type::node_pointer node_pointer;\n-      typedef typename base_type::const_node_pointer const_node_pointer;\n+      typedef binomial_heap_base<Value_Type, Cmp_Fn, _Alloc> \tbase_type;\n+      typedef typename base_type::node_pointer \t\tnode_pointer;\n+      typedef typename base_type::node_const_pointer \tnode_const_pointer;\n \n     public:\n-      typedef Value_Type value_type;\n-      typedef typename Allocator::size_type size_type;\n-      typedef typename Allocator::difference_type difference_type;\n-      typedef typename base_type::pointer pointer;\n-      typedef typename base_type::const_pointer const_pointer;\n-      typedef typename base_type::reference reference;\n-      typedef typename base_type::const_reference const_reference;\n-      typedef typename base_type::const_point_iterator const_point_iterator;\n-      typedef typename base_type::point_iterator point_iterator;\n-      typedef typename base_type::const_iterator const_iterator;\n-      typedef typename base_type::iterator iterator;\n-      typedef typename base_type::cmp_fn cmp_fn;\n-      typedef typename base_type::allocator_type allocator_type;\n+      typedef Value_Type \t\t\t\tvalue_type;\n+      typedef typename _Alloc::size_type \t\tsize_type;\n+      typedef typename _Alloc::difference_type \t\tdifference_type;\n+      typedef typename base_type::pointer \t\tpointer;\n+      typedef typename base_type::const_pointer \tconst_pointer;\n+      typedef typename base_type::reference \t\treference;\n+      typedef typename base_type::const_reference \tconst_reference;\n+      typedef typename base_type::point_const_iterator \tpoint_const_iterator;\n+      typedef typename base_type::point_iterator \tpoint_iterator;\n+      typedef typename base_type::const_iterator \tconst_iterator;\n+      typedef typename base_type::iterator \t\titerator;\n+      typedef typename base_type::cmp_fn \t\tcmp_fn;\n+      typedef typename base_type::allocator_type \tallocator_type;\n \n-      binomial_heap_();\n+      binomial_heap();\n \n-      binomial_heap_(const Cmp_Fn& r_cmp_fn);\n+      binomial_heap(const Cmp_Fn&);\n \n-      binomial_heap_(const PB_DS_CLASS_C_DEC& other);\n+      binomial_heap(const binomial_heap&);\n \n-      ~binomial_heap_();\n+      ~binomial_heap();\n \n     protected:\n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid(const char* file, int line) const;\n-#endif \n+      assert_valid(const char*, int) const;\n+#endif\n     };\n \n #include <ext/pb_ds/detail/binomial_heap_/constructors_destructor_fn_imps.hpp>\n #include <ext/pb_ds/detail/binomial_heap_/debug_fn_imps.hpp>\n \n #undef PB_DS_CLASS_C_DEC\n-\n #undef PB_DS_CLASS_T_DEC\n-\n-#undef PB_DS_BASE_C_DEC\n   } // namespace detail\n } // namespace __gnu_pbds"}, {"sha": "ee8d89c9dfb32005f9a5ff5a2fd0b06df815c85e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fconstructors_destructor_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,28 +34,27 @@\n // warranty.\n \n /**\n- * @file constructors_destructor_fn_imps.hpp\n+ * @file detail/binomial_heap_/constructors_destructor_fn_imps.hpp\n  * Contains an implementation for binomial_heap_.\n  */\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-binomial_heap_()\n+binomial_heap()\n { PB_DS_ASSERT_VALID((*this)) }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-binomial_heap_(const Cmp_Fn& r_cmp_fn) :\n-  PB_DS_BASE_C_DEC(r_cmp_fn)\n+binomial_heap(const Cmp_Fn& r_cmp_fn)\n+: base_type(r_cmp_fn)\n { PB_DS_ASSERT_VALID((*this)) }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-binomial_heap_(const PB_DS_CLASS_C_DEC& other) :\n-  PB_DS_BASE_C_DEC(other)\n+binomial_heap(const PB_DS_CLASS_C_DEC& other)\n+: base_type(other)\n { PB_DS_ASSERT_VALID((*this)) }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-~binomial_heap_() { }\n-\n+~binomial_heap() { }"}, {"sha": "12949aedb2b324ba0bde94bbdff6f58b649e8a7f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_/debug_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fdebug_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file debug_fn_imps.hpp\n+ * @file detail/binomial_heap_/debug_fn_imps.hpp\n  * Contains an implementation for binomial_heap_.\n  */\n "}, {"sha": "9d260d0e17e333aaa60b516dc60b9e5cec4ddde0", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/binomial_heap_base_.hpp", "status": "modified", "additions": 59, "deletions": 92, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fbinomial_heap_base_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fbinomial_heap_base_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fbinomial_heap_base_.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file binomial_heap_base_.hpp\n+ * @file binomial_heap_base_/binomial_heap_base_.hpp\n  * Contains an implementation class for a base of binomial heaps.\n  */\n \n@@ -51,96 +51,65 @@\n #include <ext/pb_ds/detail/cond_dealtor.hpp>\n #include <ext/pb_ds/detail/type_utils.hpp>\n #include <ext/pb_ds/detail/left_child_next_sibling_heap_/left_child_next_sibling_heap_.hpp>\n-#include <ext/pb_ds/detail/left_child_next_sibling_heap_/null_metadata.hpp>\n \n namespace __gnu_pbds\n {\n   namespace detail\n   {\n-\n #define PB_DS_CLASS_T_DEC \\\n-    template<typename Value_Type, class Cmp_Fn, class Allocator>\n+    template<typename Value_Type, typename Cmp_Fn, typename _Alloc>\n \n #define PB_DS_CLASS_C_DEC \\\n-    binomial_heap_base_<Value_Type, Cmp_Fn, Allocator>\n+    binomial_heap_base<Value_Type, Cmp_Fn, _Alloc>\n \n #ifdef _GLIBCXX_DEBUG\n-#define PB_DS_BASE_C_DEC \\\n-    left_child_next_sibling_heap_<Value_Type, Cmp_Fn, \\\n-\t\t\t\t  typename Allocator::size_type, \\\n-\t\t\t\t  Allocator, false>\n-#else \n-#define PB_DS_BASE_C_DEC \\\n-    left_child_next_sibling_heap_<Value_Type, Cmp_Fn,\t\\\n-\t\t\t\ttypename Allocator::size_type, Allocator>\n-#endif \n-\n-    /**\n-     * class description = \"8y|\\|0|\\/|i41 h34p 74813\">\n-     **/\n-    template<typename Value_Type, class Cmp_Fn, class Allocator>\n-    class binomial_heap_base_ : public PB_DS_BASE_C_DEC\n-    {\n+#define PB_DS_B_HEAP_BASE \\\n+  left_child_next_sibling_heap<Value_Type, Cmp_Fn, \\\n+\t\t\t\ttypename _Alloc::size_type,  _Alloc, false>\n+#else\n+#define PB_DS_B_HEAP_BASE \\\n+  left_child_next_sibling_heap<Value_Type, Cmp_Fn, \\\n+\t\t\t\ttypename _Alloc::size_type, _Alloc>\n+#endif\n \n+    /// Base class for binomial heap.\n+    template<typename Value_Type, typename Cmp_Fn, typename _Alloc>\n+    class binomial_heap_base\n+    : public PB_DS_B_HEAP_BASE\n+    {\n     private:\n-      typedef PB_DS_BASE_C_DEC base_type;\n+      typedef typename _Alloc::template rebind<Value_Type>::other __rebind_v;\n+      typedef PB_DS_B_HEAP_BASE\t  \t\t\tbase_type;\n \n     protected:\n-      typedef typename base_type::node node;\n-\n-      typedef typename base_type::node_pointer node_pointer;\n-\n-      typedef typename base_type::const_node_pointer const_node_pointer;\n+      typedef typename base_type::node \t\t\tnode;\n+      typedef typename base_type::node_pointer \t\tnode_pointer;\n+      typedef typename base_type::node_const_pointer \tnode_const_pointer;\n \n     public:\n-\n-      typedef typename Allocator::size_type size_type;\n-\n-      typedef typename Allocator::difference_type difference_type;\n-\n-      typedef Value_Type value_type;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tvalue_type>::other::pointer\n-      pointer;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tvalue_type>::other::const_pointer\n-      const_pointer;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tvalue_type>::other::reference\n-      reference;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tvalue_type>::other::const_reference\n-      const_reference;\n-\n-      typedef\n-      typename PB_DS_BASE_C_DEC::const_point_iterator\n-      const_point_iterator;\n-\n-      typedef typename PB_DS_BASE_C_DEC::point_iterator point_iterator;\n-\n-      typedef typename PB_DS_BASE_C_DEC::const_iterator const_iterator;\n-\n-      typedef typename PB_DS_BASE_C_DEC::iterator iterator;\n-\n-      typedef Cmp_Fn cmp_fn;\n-\n-      typedef Allocator allocator_type;\n+      typedef Value_Type \t\t\t\tvalue_type;\n+      typedef Cmp_Fn \t\t\t\t\tcmp_fn;\n+      typedef _Alloc \t\t\t\t\tallocator_type;\n+      typedef typename _Alloc::size_type \t\tsize_type;\n+      typedef typename _Alloc::difference_type \t\tdifference_type;\n+\n+      typedef typename __rebind_v::pointer \t\tpointer;\n+      typedef typename __rebind_v::const_pointer \tconst_pointer;\n+      typedef typename __rebind_v::reference \t\treference;\n+      typedef typename __rebind_v::const_reference   \tconst_reference;\n+\n+      typedef typename base_type::point_const_iterator \tpoint_const_iterator;\n+      typedef typename base_type::point_iterator \tpoint_iterator;\n+      typedef typename base_type::const_iterator \tconst_iterator;\n+      typedef typename base_type::iterator \t\titerator;\n \n     public:\n \n       inline point_iterator\n-      push(const_reference r_val);\n+      push(const_reference);\n \n       void\n-      modify(point_iterator it, const_reference r_new_val);\n+      modify(point_iterator, const_reference);\n \n       inline const_reference\n       top() const;\n@@ -149,72 +118,72 @@ namespace __gnu_pbds\n       pop();\n \n       void\n-      erase(point_iterator it);\n+      erase(point_iterator);\n \n       inline void\n       clear();\n \n       template<typename Pred>\n       size_type\n-      erase_if(Pred pred);\n+      erase_if(Pred);\n \n       template<typename Pred>\n       void\n-      split(Pred pred, PB_DS_CLASS_C_DEC& other);\n+      split(Pred, PB_DS_CLASS_C_DEC&);\n \n       void\n-      join(PB_DS_CLASS_C_DEC& other);\n+      join(PB_DS_CLASS_C_DEC&);\n \n     protected:\n \n-      binomial_heap_base_();\n+      binomial_heap_base();\n \n-      binomial_heap_base_(const Cmp_Fn& r_cmp_fn);\n+      binomial_heap_base(const Cmp_Fn&);\n \n-      binomial_heap_base_(const PB_DS_CLASS_C_DEC& other);\n+      binomial_heap_base(const PB_DS_CLASS_C_DEC&);\n \n       void\n-      swap(PB_DS_CLASS_C_DEC& other);\n+      swap(PB_DS_CLASS_C_DEC&);\n \n-      ~binomial_heap_base_();\n+      ~binomial_heap_base();\n \n       template<typename It>\n       void\n-      copy_from_range(It first_it, It last_it);\n+      copy_from_range(It, It);\n \n       inline void\n       find_max();\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid(bool strictly_binomial, const char* file, int line) const;\n+      assert_valid(bool, const char*, int) const;\n \n       void\n-      assert_max(const char* file, int line) const;\n-#endif \n+      assert_max(const char*, int) const;\n+#endif\n \n     private:\n \n       inline node_pointer\n-      fix(node_pointer p_nd) const;\n+      fix(node_pointer) const;\n \n       inline void\n-      insert_node(node_pointer p_nd);\n+      insert_node(node_pointer);\n \n       inline void\n-      remove_parentless_node(node_pointer p_nd);\n+      remove_parentless_node(node_pointer);\n \n       inline node_pointer\n-      join(node_pointer p_lhs, node_pointer p_rhs) const;\n+      join(node_pointer, node_pointer) const;\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_node_consistent(const_node_pointer, bool, bool,\n+      assert_node_consistent(node_const_pointer, bool, bool,\n \t\t\t     const char*, int) const;\n #endif\n \n     protected:\n-      node_pointer m_p_max;\n+      node_pointer \tm_p_max;\n     };\n \n #define PB_DS_ASSERT_VALID_COND(X, _StrictlyBinomial)\t\t\t\\\n@@ -235,10 +204,8 @@ namespace __gnu_pbds\n #undef PB_DS_ASSERT_VALID_COND\n #undef PB_DS_CLASS_C_DEC\n #undef PB_DS_CLASS_T_DEC\n-#undef PB_DS_BASE_C_DEC\n-\n-\n+#undef PB_DS_B_HEAP_BASE\n   } // namespace detail\n } // namespace __gnu_pbds\n \n-#endif \n+#endif"}, {"sha": "ef9d0e3b30043d3afa33f9f6d5edd3905d649992", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fconstructors_destructor_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file constructors_destructor_fn_imps.hpp\n+ * @file binomial_heap_base_/constructors_destructor_fn_imps.hpp\n  * Contains an implementation class for a base of binomial heaps.\n  */\n \n@@ -46,52 +46,40 @@ copy_from_range(It first_it, It last_it)\n {\n   while (first_it != last_it)\n     push(*(first_it++));\n-\n   PB_DS_ASSERT_VALID_COND((*this),false)\n }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-binomial_heap_base_() :\n-  m_p_max(0)\n+binomial_heap_base() : m_p_max(0)\n {\n   PB_DS_ASSERT_VALID_COND((*this),false)\n }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-binomial_heap_base_(const Cmp_Fn& r_cmp_fn) :\n-  PB_DS_BASE_C_DEC(r_cmp_fn),\n-  m_p_max(0)\n-{\n-  PB_DS_ASSERT_VALID_COND((*this),false)\n-}\n+binomial_heap_base(const Cmp_Fn& r_cmp_fn)\n+: base_type(r_cmp_fn), m_p_max(0)\n+{ PB_DS_ASSERT_VALID_COND((*this),false) }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-binomial_heap_base_(const PB_DS_CLASS_C_DEC& other) :\n-  PB_DS_BASE_C_DEC(other),\n-  m_p_max(0)\n-{\n-  PB_DS_ASSERT_VALID_COND((*this),false)\n-}\n+binomial_heap_base(const PB_DS_CLASS_C_DEC& other)\n+: base_type(other), m_p_max(0)\n+{ PB_DS_ASSERT_VALID_COND((*this),false) }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n   PB_DS_ASSERT_VALID_COND((*this),false)\n-\n   base_type::swap(other);\n-\n   std::swap(m_p_max, other.m_p_max);\n-\n   PB_DS_ASSERT_VALID_COND((*this),false)\n }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-~binomial_heap_base_()\n+~binomial_heap_base()\n { }\n-"}, {"sha": "137ec4b0c6ece35209ab64919f3e90a5d5cce713", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/debug_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fdebug_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -35,7 +35,7 @@\n // warranty.\n \n /**\n- * @file debug_fn_imps.hpp\n+ * @file binomial_heap_base_/debug_fn_imps.hpp\n  * Contains an implementation class for a base of binomial heaps.\n  */\n \n@@ -68,7 +68,7 @@ assert_max(const char* __file, int __line) const\n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_node_consistent(const_node_pointer p_nd, bool strictly_binomial,\n+assert_node_consistent(node_const_pointer p_nd, bool strictly_binomial,\n \t\t       bool increasing, const char* __file, int __line) const\n {\n   PB_DS_DEBUG_VERIFY(increasing || strictly_binomial);"}, {"sha": "2cdc456dd7dcc4e531eb8d70aef465d128c012da", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/erase_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Ferase_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file erase_fn_imps.hpp\n+ * @file binomial_heap_base_/erase_fn_imps.hpp\n  * Contains an implementation class for a base of binomial heaps.\n  */\n \n@@ -50,15 +50,10 @@ pop()\n     find_max();\n \n   _GLIBCXX_DEBUG_ASSERT(m_p_max != 0);\n-\n   node_pointer p_nd = m_p_max;\n-\n   remove_parentless_node(m_p_max);\n-\n   base_type::actual_erase_node(p_nd);\n-\n   m_p_max = 0;\n-\n   PB_DS_ASSERT_VALID_COND((*this),true)\n }\n \n@@ -71,8 +66,7 @@ remove_parentless_node(node_pointer p_nd)\n   _GLIBCXX_DEBUG_ASSERT(base_type::parent(p_nd) == 0);\n \n   node_pointer p_cur_root = p_nd == base_type::m_p_root?\n-    p_nd->m_p_next_sibling :\n-    base_type::m_p_root;\n+    p_nd->m_p_next_sibling : base_type::m_p_root;\n \n   if (p_cur_root != 0)\n     p_cur_root->m_p_prev_or_parent = 0;\n@@ -84,17 +78,14 @@ remove_parentless_node(node_pointer p_nd)\n     p_nd->m_p_next_sibling->m_p_prev_or_parent = p_nd->m_p_prev_or_parent;\n \n   node_pointer p_child = p_nd->m_p_l_child;\n-\n   if (p_child != 0)\n     {\n       p_child->m_p_prev_or_parent = 0;\n-\n       while (p_child->m_p_next_sibling != 0)\n \tp_child = p_child->m_p_next_sibling;\n     }\n \n   m_p_max = 0;\n-\n   base_type::m_p_root = join(p_cur_root, p_child);\n }\n \n@@ -104,7 +95,6 @@ PB_DS_CLASS_C_DEC::\n clear()\n {\n   base_type::clear();\n-\n   m_p_max = 0;\n }\n \n@@ -117,13 +107,9 @@ erase(point_iterator it)\n   _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n \n   base_type::bubble_to_top(it.m_p_nd);\n-\n   remove_parentless_node(it.m_p_nd);\n-\n   base_type::actual_erase_node(it.m_p_nd);\n-\n   m_p_max = 0;\n-\n   PB_DS_ASSERT_VALID_COND((*this),true)\n }\n \n@@ -138,55 +124,38 @@ erase_if(Pred pred)\n   if (base_type::empty())\n     {\n       PB_DS_ASSERT_VALID_COND((*this),true)\n-\n       return 0;\n     }\n \n   base_type::to_linked_list();\n-\n   node_pointer p_out = base_type::prune(pred);\n-\n   size_type ersd = 0;\n-\n   while (p_out != 0)\n     {\n       ++ersd;\n-\n       node_pointer p_next = p_out->m_p_next_sibling;\n-\n       base_type::actual_erase_node(p_out);\n-\n       p_out = p_next;\n     }\n \n   node_pointer p_cur = base_type::m_p_root;\n-\n   base_type::m_p_root = 0;\n-\n   while (p_cur != 0)\n     {\n       node_pointer p_next = p_cur->m_p_next_sibling;\n-\n       p_cur->m_p_l_child = p_cur->m_p_prev_or_parent = 0;\n-\n       p_cur->m_metadata = 0;\n-\n       p_cur->m_p_next_sibling = base_type::m_p_root;\n \n       if (base_type::m_p_root != 0)\n \tbase_type::m_p_root->m_p_prev_or_parent = p_cur;\n \n       base_type::m_p_root = p_cur;\n-\n       base_type::m_p_root = fix(base_type::m_p_root);\n-\n       p_cur = p_next;\n     }\n \n   m_p_max = 0;\n-\n   PB_DS_ASSERT_VALID_COND((*this),true)\n-\n   return ersd;\n }\n-"}, {"sha": "8059917f9df809394ce5a0c63c4095de8a0b0bf5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/find_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Ffind_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file find_fn_imps.hpp\n+ * @file binomial_heap_base_/find_fn_imps.hpp\n  * Contains an implementation class for a base of binomial heaps.\n  */\n \n@@ -59,14 +59,11 @@ PB_DS_CLASS_C_DEC::\n find_max()\n {\n   node_pointer p_cur = base_type::m_p_root;\n-\n   m_p_max = p_cur;\n-\n   while (p_cur != 0)\n     {\n       if (Cmp_Fn::operator()(m_p_max->m_value, p_cur->m_value))\n \tm_p_max = p_cur;\n-\n       p_cur = p_cur->m_p_next_sibling;\n     }\n }"}, {"sha": "30f49db063578a4169cea5123936ab2ae1bff61f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/insert_fn_imps.hpp", "status": "modified", "additions": 14, "deletions": 52, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Finsert_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file insert_fn_imps.hpp\n+ * @file binomial_heap_base_/insert_fn_imps.hpp\n  * Contains an implementation class for a base of binomial heaps.\n  */\n \n@@ -44,15 +44,10 @@ PB_DS_CLASS_C_DEC::\n push(const_reference r_val)\n {\n   PB_DS_ASSERT_VALID_COND((*this),true)\n-\n   node_pointer p_nd = base_type::get_new_node_for_insert(r_val);\n-\n   insert_node(p_nd);\n-\n   m_p_max = 0;\n-\n   PB_DS_ASSERT_VALID_COND((*this),true)\n-\n   return point_iterator(p_nd);\n }\n \n@@ -63,60 +58,42 @@ insert_node(node_pointer p_nd)\n {\n   if (base_type::m_p_root == 0)\n     {\n-      p_nd->m_p_next_sibling = p_nd->m_p_prev_or_parent =\n-\tp_nd->m_p_l_child = 0;\n-\n+      p_nd->m_p_next_sibling = 0;\n+      p_nd->m_p_prev_or_parent = 0;\n+      p_nd->m_p_l_child = 0;\n       p_nd->m_metadata = 0;\n-\n       base_type::m_p_root = p_nd;\n-\n       return;\n     }\n \n   if (base_type::m_p_root->m_metadata > 0)\n     {\n       p_nd->m_p_prev_or_parent = p_nd->m_p_l_child = 0;\n-\n       p_nd->m_p_next_sibling = base_type::m_p_root;\n-\n       base_type::m_p_root->m_p_prev_or_parent = p_nd;\n-\n       base_type::m_p_root = p_nd;\n-\n       p_nd->m_metadata = 0;\n-\n       return;\n     }\n \n   if (Cmp_Fn::operator()(base_type::m_p_root->m_value, p_nd->m_value))\n     {\n       p_nd->m_p_next_sibling = base_type::m_p_root->m_p_next_sibling;\n-\n       p_nd->m_p_prev_or_parent = 0;\n-\n       p_nd->m_metadata = 1;\n-\n       p_nd->m_p_l_child = base_type::m_p_root;\n-\n       base_type::m_p_root->m_p_prev_or_parent = p_nd;\n-\n       base_type::m_p_root->m_p_next_sibling = 0;\n-\n       base_type::m_p_root = p_nd;\n     }\n   else\n     {\n       p_nd->m_p_next_sibling = 0;\n-\n       p_nd->m_p_l_child = 0;\n-\n       p_nd->m_p_prev_or_parent = base_type::m_p_root;\n-\n       p_nd->m_metadata = 0;\n-\n       _GLIBCXX_DEBUG_ASSERT(base_type::m_p_root->m_p_l_child == 0);\n       base_type::m_p_root->m_p_l_child = p_nd;\n-\n       base_type::m_p_root->m_metadata = 1;\n     }\n \n@@ -128,36 +105,31 @@ inline typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n fix(node_pointer p_nd) const\n {\n-  while (p_nd->m_p_next_sibling != 0&& \n+  while (p_nd->m_p_next_sibling != 0 &&\n \t p_nd->m_metadata == p_nd->m_p_next_sibling->m_metadata)\n     {\n       node_pointer p_next = p_nd->m_p_next_sibling;\n-\n       if (Cmp_Fn::operator()(p_nd->m_value, p_next->m_value))\n-        {\n-\t  p_next->m_p_prev_or_parent =\n-\t    p_nd->m_p_prev_or_parent;\n+\t{\n+\t  p_next->m_p_prev_or_parent = p_nd->m_p_prev_or_parent;\n \n \t  if (p_nd->m_p_prev_or_parent != 0)\n \t    p_nd->m_p_prev_or_parent->m_p_next_sibling = p_next;\n \n \t  base_type::make_child_of(p_nd, p_next);\n-\n \t  ++p_next->m_metadata;\n-\n \t  p_nd = p_next;\n-        }\n+\t}\n       else\n-        {\n+\t{\n \t  p_nd->m_p_next_sibling = p_next->m_p_next_sibling;\n \n \t  if (p_nd->m_p_next_sibling != 0)\n \t    p_next->m_p_next_sibling = 0;\n \n \t  base_type::make_child_of(p_next, p_nd);\n-\n \t  ++p_nd->m_metadata;\n-        }\n+\t}\n     }\n \n   if (p_nd->m_p_next_sibling != 0)\n@@ -178,39 +150,29 @@ modify(point_iterator it, const_reference r_new_val)\n   PB_DS_ASSERT_BASE_NODE_CONSISTENT(p_nd, false)\n \n   const bool bubble_up = Cmp_Fn::operator()(p_nd->m_value, r_new_val);\n-\n   p_nd->m_value = r_new_val;\n \n   if (bubble_up)\n     {\n       node_pointer p_parent = base_type::parent(p_nd);\n-\n-      while (p_parent != 0&& \n+      while (p_parent != 0 &&\n \t     Cmp_Fn::operator()(p_parent->m_value, p_nd->m_value))\n-        {\n+\t{\n \t  base_type::swap_with_parent(p_nd, p_parent);\n-\n \t  p_parent = base_type::parent(p_nd);\n-        }\n+\t}\n \n       if (p_nd->m_p_prev_or_parent == 0)\n \tbase_type::m_p_root = p_nd;\n \n       m_p_max = 0;\n-\n       PB_DS_ASSERT_VALID_COND((*this),true)\n-\n-        return;\n+      return;\n     }\n \n   base_type::bubble_to_top(p_nd);\n-\n   remove_parentless_node(p_nd);\n-\n   insert_node(p_nd);\n-\n   m_p_max = 0;\n-\n   PB_DS_ASSERT_VALID_COND((*this),true)\n }\n-"}, {"sha": "44bc4ed7c4dc2e479cea174591245f66f73d166d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/split_join_fn_imps.hpp", "status": "modified", "additions": 17, "deletions": 52, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fsplit_join_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file split_join_fn_imps.hpp\n+ * @file binomial_heap_base_/split_join_fn_imps.hpp\n  * Contains an implementation class for a base of binomial heaps.\n  */\n \n@@ -48,72 +48,54 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n   PB_DS_ASSERT_VALID_COND(other,true)\n \n   other.clear();\n-\n   if (base_type::empty())\n     {\n       PB_DS_ASSERT_VALID_COND((*this),true)\n       PB_DS_ASSERT_VALID_COND(other,true)\n-\n       return;\n     }\n \n   base_type::to_linked_list();\n-\n   node_pointer p_out = base_type::prune(pred);\n-\n   while (p_out != 0)\n     {\n       _GLIBCXX_DEBUG_ASSERT(base_type::m_size > 0);\n       --base_type::m_size;\n-\n       ++other.m_size;\n \n       node_pointer p_next = p_out->m_p_next_sibling;\n-\n       p_out->m_p_l_child = p_out->m_p_prev_or_parent = 0;\n-\n       p_out->m_metadata = 0;\n \n       p_out->m_p_next_sibling = other.m_p_root;\n-\n       if (other.m_p_root != 0)\n \tother.m_p_root->m_p_prev_or_parent = p_out;\n \n       other.m_p_root = p_out;\n-\n       other.m_p_root = other.fix(other.m_p_root);\n-\n       p_out = p_next;\n     }\n \n   PB_DS_ASSERT_VALID_COND(other,true)\n-\n   node_pointer p_cur = base_type::m_p_root;\n-\n   base_type::m_p_root = 0;\n \n   while (p_cur != 0)\n     {\n       node_pointer p_next = p_cur->m_p_next_sibling;\n-\n       p_cur->m_p_l_child = p_cur->m_p_prev_or_parent = 0;\n-\n       p_cur->m_metadata = 0;\n-\n       p_cur->m_p_next_sibling = base_type::m_p_root;\n \n       if (base_type::m_p_root != 0)\n \tbase_type::m_p_root->m_p_prev_or_parent = p_cur;\n \n       base_type::m_p_root = p_cur;\n-\n       base_type::m_p_root = fix(base_type::m_p_root);\n-\n       p_cur = p_next;\n     }\n \n   m_p_max = 0;\n-\n   PB_DS_ASSERT_VALID_COND((*this),true)\n   PB_DS_ASSERT_VALID_COND(other,true)\n }\n@@ -127,14 +109,11 @@ join(PB_DS_CLASS_C_DEC& other)\n   PB_DS_ASSERT_VALID_COND(other,true)\n \n   node_pointer p_other = other.m_p_root;\n-\n   if (p_other != 0)\n     do\n       {\n \tnode_pointer p_next = p_other->m_p_next_sibling;\n-\n \tstd::swap(p_other->m_p_next_sibling, p_other->m_p_prev_or_parent);\n-\n \tp_other = p_next;\n       }\n     while (p_other != 0);\n@@ -157,68 +136,55 @@ PB_DS_CLASS_C_DEC::\n join(node_pointer p_lhs, node_pointer p_rhs) const\n {\n   node_pointer p_ret = 0;\n-\n   node_pointer p_cur = 0;\n \n   while (p_lhs != 0 || p_rhs != 0)\n     {\n       if (p_rhs == 0)\n-        {\n+\t{\n \t  if (p_cur == 0)\n \t    p_ret = p_cur = p_lhs;\n \t  else\n-            {\n+\t    {\n \t      p_cur->m_p_next_sibling = p_lhs;\n-\n \t      p_lhs->m_p_prev_or_parent = p_cur;\n-            }\n-\n+\t    }\n \t  p_cur = p_lhs = 0;\n-        }\n+\t}\n       else if (p_lhs == 0 || p_rhs->m_metadata < p_lhs->m_metadata)\n-        {\n+\t{\n \t  if (p_cur == 0)\n-            {\n+\t    {\n \t      p_ret = p_cur = p_rhs;\n-\n \t      p_rhs = p_rhs->m_p_prev_or_parent;\n-            }\n+\t    }\n \t  else\n-            {\n+\t    {\n \t      p_cur->m_p_next_sibling = p_rhs;\n-\n \t      p_rhs = p_rhs->m_p_prev_or_parent;\n-\n \t      p_cur->m_p_next_sibling->m_p_prev_or_parent = p_cur;\n-\n \t      p_cur = p_cur->m_p_next_sibling;\n-            }\n-        }\n+\t    }\n+\t}\n       else if (p_lhs->m_metadata < p_rhs->m_metadata)\n-        {\n+\t{\n \t  if (p_cur == 0)\n \t    p_ret = p_cur = p_lhs;\n \t  else\n-            {\n+\t    {\n \t      p_cur->m_p_next_sibling = p_lhs;\n-\n \t      p_lhs->m_p_prev_or_parent = p_cur;\n-\n \t      p_cur = p_cur->m_p_next_sibling;\n-            }\n-\n+\t    }\n \t  p_lhs = p_cur->m_p_next_sibling;\n-        }\n+\t}\n       else\n-        {\n+\t{\n \t  node_pointer p_next_rhs = p_rhs->m_p_prev_or_parent;\n-\n \t  p_rhs->m_p_next_sibling = p_lhs;\n-\n \t  p_lhs = fix(p_rhs);\n-\n \t  p_rhs = p_next_rhs;\n-        }\n+\t}\n     }\n \n   if (p_cur != 0)\n@@ -229,4 +195,3 @@ join(node_pointer p_lhs, node_pointer p_rhs) const\n \n   return p_ret;\n }\n-"}, {"sha": "efe39f2fe4a4b7f808701e879f91e72e328db8fe", "filename": "libstdc++-v3/include/ext/pb_ds/detail/branch_policy/branch_policy.hpp", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbranch_policy%2Fbranch_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbranch_policy%2Fbranch_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbranch_policy%2Fbranch_policy.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -0,0 +1,124 @@\n+// -*- C++ -*-\n+\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the terms\n+// of the GNU General Public License as published by the Free Software\n+// Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// This library is distributed in the hope that it will be useful, but\n+// WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n+\n+// Permission to use, copy, modify, sell, and distribute this software\n+// is hereby granted without fee, provided that the above copyright\n+// notice appears in all copies, and that both that copyright notice\n+// and this permission notice appear in supporting documentation. None\n+// of the above authors, nor IBM Haifa Research Laboratories, make any\n+// representation about the suitability of this software for any\n+// purpose. It is provided \"as is\" without express or implied\n+// warranty.\n+\n+/**\n+ * @file branch_policy/branch_policy.hpp\n+ * Contains a base class for branch policies.\n+ */\n+\n+#ifndef PB_DS_BRANCH_POLICY_BASE_HPP\n+#define PB_DS_BRANCH_POLICY_BASE_HPP\n+\n+#include <ext/pb_ds/tag_and_trait.hpp>\n+\n+namespace __gnu_pbds\n+{\n+  /// A null node updator, indicating that no node updates are required.\n+  template<typename _Tp1, typename _Tp2, typename _Tp3, typename _Tp4>\n+    struct null_node_update : public null_type\n+    { };\n+\n+  namespace detail\n+  {\n+    /// Primary template, base class for branch structure policies.\n+    template<typename Node_CItr, typename Node_Itr, typename _Alloc>\n+      struct branch_policy\n+      {\n+      protected:\n+\ttypedef typename Node_Itr::value_type \t\tit_type;\n+\ttypedef typename std::iterator_traits<it_type>::value_type value_type;\n+\ttypedef typename value_type::first_type \tkey_type;\n+\n+\ttypedef typename remove_const<value_type>::type\trcvalue_type;\n+\ttypedef typename remove_const<key_type>::type\trckey_type;\n+\n+\ttypedef typename _Alloc::template rebind<rcvalue_type>::other rebind_v;\n+\ttypedef typename _Alloc::template rebind<rckey_type>::other   rebind_k;\n+\n+\ttypedef\ttypename rebind_v::reference \t\treference;\n+\ttypedef\ttypename rebind_v::const_reference \tconst_reference;\n+\ttypedef\ttypename rebind_v::const_pointer\tconst_pointer;\n+\n+\ttypedef\ttypename rebind_k::const_reference \tkey_const_reference;\n+\n+\tstatic inline key_const_reference\n+\textract_key(const_reference r_val)\n+\t{ return r_val.first; }\n+\n+\tvirtual it_type\n+\tend() = 0;\n+\n+\tit_type\n+\tend_iterator() const\n+\t{ return const_cast<branch_policy*>(this)->end(); }\n+\n+\tvirtual\n+\t~branch_policy() { }\n+      };\n+\n+    /// Specialization for const iterators.\n+    template<typename Node_CItr, typename _Alloc>\n+      struct branch_policy<Node_CItr, Node_CItr, _Alloc>\n+      {\n+      protected:\n+\ttypedef typename Node_CItr::value_type \t\t   it_type;\n+       \ttypedef typename std::iterator_traits<it_type>::value_type value_type;\n+\ttypedef typename remove_const<value_type>::type\t\t   rcvalue_type;\n+\ttypedef typename _Alloc::template rebind<rcvalue_type>::other rebind_v;\n+\ttypedef\ttypename rebind_v::reference \t\treference;\n+\ttypedef\ttypename rebind_v::const_reference \tconst_reference;\n+\ttypedef\ttypename rebind_v::const_pointer\tconst_pointer;\n+\n+\ttypedef value_type \t\t\t\tkey_type;\n+\ttypedef\ttypename rebind_v::const_reference \tkey_const_reference;\n+\n+\tstatic inline key_const_reference\n+\textract_key(const_reference r_val)\n+\t{ return r_val; }\n+\n+\tvirtual it_type\n+\tend() const = 0;\n+\n+\tit_type\n+\tend_iterator() const\n+\t{ return end(); }\n+\n+\tvirtual\n+\t~branch_policy() { }\n+      };\n+  } // namespace detail\n+} // namespace __gnu_pbds\n+\n+#endif // #ifndef PB_DS_BRANCH_POLICY_BASE_HPP"}, {"sha": "caa8dd738d3754bb9f20a4c1f326536e5c40822a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/branch_policy/null_node_metadata.hpp", "status": "renamed", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbranch_policy%2Fnull_node_metadata.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbranch_policy%2Fnull_node_metadata.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbranch_policy%2Fnull_node_metadata.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2008, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -34,22 +34,33 @@\n // warranty.\n \n /**\n- * @file null_metadata.hpp\n- * Contains an implementation struct for this type of heap's node.\n+ * @file branch_policy/null_node_metadata.hpp\n+ * Contains an implementation class for tree-like classes.\n  */\n \n-#ifndef PB_DS_LEFT_CHILD_NEXT_SIBLING_HEAP_0_METADATA_HPP\n-#define PB_DS_LEFT_CHILD_NEXT_SIBLING_HEAP_0_METADATA_HPP\n+#ifndef PB_DS_0_NODE_METADATA_HPP\n+#define PB_DS_0_NODE_METADATA_HPP\n+\n+#include <ext/pb_ds/detail/types_traits.hpp>\n \n namespace __gnu_pbds\n {\n   namespace detail\n   {\n-\n-    struct null_left_child_next_sibling_heap_node_metadata\n-    { };\n-\n+    /// Constant node iterator.\n+    template<typename Key, typename Data, typename _Alloc>\n+      struct dumnode_const_iterator\n+      {\n+      private:\n+\ttypedef types_traits<Key, Data, _Alloc, false>\t__traits_type;\n+\ttypedef typename __traits_type::pointer        \tconst_iterator;\n+\t\n+      public:\n+\ttypedef const_iterator \t\t\t\tvalue_type;\n+\ttypedef const_iterator \t\t\t\tconst_reference;\n+\ttypedef const_reference \t       \t\treference;\n+      };\n   } // namespace detail\n } // namespace __gnu_pbds\n \n-#endif // #ifndef PB_DS_LEFT_CHILD_NEXT_SIBLING_HEAP_0_METADATA_HPP\n+#endif", "previous_filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/null_metadata.hpp"}, {"sha": "92f9f444453a7f7ac29e857f846d71a18f88fbcf", "filename": "libstdc++-v3/include/ext/pb_ds/detail/branch_policy/traits.hpp", "status": "renamed", "additions": 47, "deletions": 38, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbranch_policy%2Ftraits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbranch_policy%2Ftraits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbranch_policy%2Ftraits.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -34,53 +34,62 @@\n // warranty.\n \n /**\n- * @file node_metadata_base.hpp\n- * Contains an internal PB_DS_BASE_C_DEC for a patricia tree.\n+ * @file branch_policy/traits.hpp\n+ * Contains an implementation class for tree-like classes.\n  */\n \n-#ifndef PB_DS_PAT_TRIE_NODE_METADATA_BASE_HPP\n-#define PB_DS_PAT_TRIE_NODE_METADATA_BASE_HPP\n+#ifndef PB_DS_NODE_AND_IT_TRAITS_HPP\n+#define PB_DS_NODE_AND_IT_TRAITS_HPP\n \n-#include <ext/pb_ds/detail/basic_tree_policy/null_node_metadata.hpp>\n+#include <ext/pb_ds/detail/types_traits.hpp>\n+#include <ext/pb_ds/detail/bin_search_tree_/traits.hpp>\n+#include <ext/pb_ds/detail/tree_policy/node_metadata_selector.hpp>\n+#include <ext/pb_ds/detail/trie_policy/node_metadata_selector.hpp>\n+\n+#define PB_DS_DEBUG_VERIFY(_Cond)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY_AT(_Cond,\t\t\t\t\t\\\n+\t\t\t   _M_message(#_Cond\" assertion from %1;:%2;\")\t\\\n+\t\t\t   ._M_string(__FILE__)._M_integer(__LINE__)\t\\\n+\t\t\t   ,__file,__line)\n \n namespace __gnu_pbds\n {\n   namespace detail\n   {\n-\n-    template<typename Metadata, class Allocator>\n-    struct pat_trie_node_metadata_base\n-    {\n-    public:\n-      typedef Metadata metadata_type;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tmetadata_type>::other::const_reference\n-      const_metadata_reference;\n-\n-    public:\n-      inline const_metadata_reference\n-      get_metadata() const\n-      {\n-\treturn (m_metadata);\n-      }\n-\n-    public:\n-      metadata_type m_metadata;\n-    };\n-\n-    template<typename Allocator>\n-    struct pat_trie_node_metadata_base<\n-      null_node_metadata,\n-      Allocator>\n-    {\n-    public:\n-      typedef null_node_metadata metadata_type;\n-    };\n+    /// Tree traits class, primary template.\n+    template<typename Key,\n+\t     typename Data,\n+\t     typename Cmp_Fn,\n+\t     template<typename Node_CItr,\n+\t\t      typename Node_Itr,\n+\t\t      typename Cmp_Fn_,\n+\t\t      typename _Alloc>\n+\t     class Node_Update,\n+\t     typename Tag,\n+\t     typename _Alloc>\n+    struct tree_traits;\n+\n+    /// Trie traits class, primary template.\n+    template<typename Key,\n+\t     typename Data,\n+\t     typename _ATraits,\n+\t     template<typename Node_CItr,\n+\t\t      typename Node_Itr,\n+\t\t      typename _ATraits_,\n+\t\t      typename _Alloc>\n+\t     class Node_Update,\n+\t     typename Tag,\n+\t     typename _Alloc>\n+    struct trie_traits;\n \n   } // namespace detail\n } // namespace __gnu_pbds\n \n-#endif // #ifndef PB_DS_PAT_TRIE_NODE_BASE_HPP\n+#include <ext/pb_ds/detail/rb_tree_map_/traits.hpp>\n+#include <ext/pb_ds/detail/splay_tree_/traits.hpp>\n+#include <ext/pb_ds/detail/ov_tree_map_/traits.hpp>\n+#include <ext/pb_ds/detail/pat_trie_/traits.hpp>\n+\n+#undef PB_DS_DEBUG_VERIFY\n \n+#endif // #ifndef PB_DS_NODE_AND_IT_TRAITS_HPP", "previous_filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/node_metadata_base.hpp"}, {"sha": "f1c2540e7d523a3cdbbb451d19a7762d14ab4e9a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/cc_ht_map_.hpp", "status": "modified", "additions": 133, "deletions": 140, "changes": 273, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcc_ht_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcc_ht_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcc_ht_map_.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -35,7 +35,7 @@\n // warranty.\n \n /**\n- * @file cc_ht_map_.hpp\n+ * @file cc_hash_table_map_/cc_ht_map_.hpp\n  * Contains an implementation class for cc_ht_map_.\n  */\n \n@@ -49,126 +49,116 @@\n #include <ext/pb_ds/detail/eq_fn/hash_eq_fn.hpp>\n #ifdef _GLIBCXX_DEBUG\n #include <ext/pb_ds/detail/debug_map_base.hpp>\n-#endif \n+#endif\n #ifdef PB_DS_HT_MAP_TRACE_\n #include <iostream>\n-#endif \n+#endif\n #include <debug/debug.h>\n \n namespace __gnu_pbds\n {\n   namespace detail\n   {\n+#ifdef PB_DS_DATA_TRUE_INDICATOR\n+#define PB_DS_CC_HASH_NAME cc_ht_map\n+#endif\n+\n+#ifdef PB_DS_DATA_FALSE_INDICATOR\n+#define PB_DS_CC_HASH_NAME cc_ht_set\n+#endif\n \n #define PB_DS_CLASS_T_DEC \\\n     template<typename Key, typename Mapped, typename Hash_Fn, \\\n-\t     typename Eq_Fn, typename Allocator, bool Store_Hash, \\\n+\t     typename Eq_Fn, typename _Alloc, bool Store_Hash, \\\n \t     typename Comb_Hash_Fn, typename Resize_Policy>\n \n-#ifdef PB_DS_DATA_TRUE_INDICATOR\n-#define PB_DS_CLASS_NAME cc_ht_map_data_\n-#endif \n-\n-#ifdef PB_DS_DATA_FALSE_INDICATOR\n-#define PB_DS_CLASS_NAME cc_ht_map_no_data_\n-#endif \n-\n #define PB_DS_CLASS_C_DEC \\\n-    PB_DS_CLASS_NAME<Key, Mapped, Hash_Fn, Eq_Fn, Allocator,\t\\\n+    PB_DS_CC_HASH_NAME<Key, Mapped, Hash_Fn, Eq_Fn, _Alloc,\t\\\n \t\t     Store_Hash, Comb_Hash_Fn, Resize_Policy>\n \n #define PB_DS_HASH_EQ_FN_C_DEC \\\n-    hash_eq_fn<Key, Eq_Fn, Allocator, Store_Hash>\n+    hash_eq_fn<Key, Eq_Fn, _Alloc, Store_Hash>\n \n #define PB_DS_RANGED_HASH_FN_C_DEC \\\n-    ranged_hash_fn<Key,\tHash_Fn, Allocator, Comb_Hash_Fn, Store_Hash>\n+    ranged_hash_fn<Key,\tHash_Fn, _Alloc, Comb_Hash_Fn, Store_Hash>\n \n-#define PB_DS_TYPES_TRAITS_C_DEC \\\n-    types_traits<Key, Mapped, Allocator, Store_Hash>\n+#define PB_DS_CC_HASH_TRAITS_BASE \\\n+    types_traits<Key, Mapped, _Alloc, Store_Hash>\n \n #ifdef _GLIBCXX_DEBUG\n #define PB_DS_DEBUG_MAP_BASE_C_DEC \\\n-    debug_map_base<Key,\tEq_Fn, typename Allocator::template rebind<Key>::other::const_reference>\n-#endif \n-\n-#ifdef PB_DS_DATA_TRUE_INDICATOR\n-#define PB_DS_V2F(X) (X).first\n-#define PB_DS_V2S(X) (X).second\n-#endif \n-\n-#ifdef PB_DS_DATA_FALSE_INDICATOR\n-#define PB_DS_V2F(X) (X)\n-#define PB_DS_V2S(X) Mapped_Data()\n+    debug_map_base<Key,\tEq_Fn, \\\n+\t\t  typename _Alloc::template rebind<Key>::other::const_reference>\n #endif\n \n-    // <011i$i0|\\|-<|-|4i|\\|i|\\|g |-|4$|-| 74813.\n+    /// Collision chaining hash.\n     template<typename Key,\n \t     typename Mapped,\n \t     typename Hash_Fn,\n \t     typename Eq_Fn,\n-\t     typename Allocator,\n+\t     typename _Alloc,\n \t     bool Store_Hash,\n \t     typename Comb_Hash_Fn,\n \t     typename Resize_Policy >\n-    class PB_DS_CLASS_NAME:\n+    class PB_DS_CC_HASH_NAME:\n #ifdef _GLIBCXX_DEBUG\n       protected PB_DS_DEBUG_MAP_BASE_C_DEC,\n-#endif \n+#endif\n       public PB_DS_HASH_EQ_FN_C_DEC,\n       public Resize_Policy,\n       public PB_DS_RANGED_HASH_FN_C_DEC,\n-      public PB_DS_TYPES_TRAITS_C_DEC\n+      public PB_DS_CC_HASH_TRAITS_BASE\n     {\n     private:\n-      typedef PB_DS_TYPES_TRAITS_C_DEC traits_base;\n-      typedef typename traits_base::comp_hash comp_hash;\n-      typedef typename traits_base::value_type value_type_;\n-      typedef typename traits_base::pointer pointer_;\n+      typedef PB_DS_CC_HASH_TRAITS_BASE\t       \ttraits_base;\n+      typedef typename traits_base::comp_hash \tcomp_hash;\n+      typedef typename traits_base::value_type \tvalue_type_;\n+      typedef typename traits_base::pointer \tpointer_;\n       typedef typename traits_base::const_pointer const_pointer_;\n-      typedef typename traits_base::reference reference_;\n+      typedef typename traits_base::reference \treference_;\n       typedef typename traits_base::const_reference const_reference_;\n \n-      struct entry : public traits_base::stored_value_type\n+      struct entry : public traits_base::stored_data_type\n       {\n-\ttypename Allocator::template rebind<entry>::other::pointer m_p_next;\n+\ttypename _Alloc::template rebind<entry>::other::pointer m_p_next;\n       };\n \n-      typedef cond_dealtor<entry, Allocator> cond_dealtor_t;\n+      typedef cond_dealtor<entry, _Alloc> \tcond_dealtor_t;\n \n-      typedef typename Allocator::template rebind<entry>::other entry_allocator;\n+      typedef typename _Alloc::template rebind<entry>::other entry_allocator;\n       typedef typename entry_allocator::pointer entry_pointer;\n       typedef typename entry_allocator::const_pointer const_entry_pointer;\n       typedef typename entry_allocator::reference entry_reference;\n       typedef typename entry_allocator::const_reference const_entry_reference;\n \n-      typedef typename Allocator::template rebind<entry_pointer>::other entry_pointer_allocator;\n+      typedef typename _Alloc::template rebind<entry_pointer>::other entry_pointer_allocator;\n       typedef typename entry_pointer_allocator::pointer entry_pointer_array;\n \n       typedef PB_DS_RANGED_HASH_FN_C_DEC ranged_hash_fn_base;\n       typedef PB_DS_HASH_EQ_FN_C_DEC hash_eq_fn_base;\n       typedef Resize_Policy resize_base;\n \n #ifdef _GLIBCXX_DEBUG\n-      typedef PB_DS_DEBUG_MAP_BASE_C_DEC debug_base;\n-#endif \n+      typedef PB_DS_DEBUG_MAP_BASE_C_DEC \tdebug_base;\n+#endif\n \n-#define PB_DS_GEN_POS std::pair<entry_pointer, typename Allocator::size_type>\n+#define PB_DS_GEN_POS std::pair<entry_pointer, typename _Alloc::size_type>\n \n-#include <ext/pb_ds/detail/unordered_iterator/const_point_iterator.hpp>\n+#include <ext/pb_ds/detail/unordered_iterator/point_const_iterator.hpp>\n #include <ext/pb_ds/detail/unordered_iterator/point_iterator.hpp>\n #include <ext/pb_ds/detail/unordered_iterator/const_iterator.hpp>\n #include <ext/pb_ds/detail/unordered_iterator/iterator.hpp>\n \n #undef PB_DS_GEN_POS\n \n     public:\n-      typedef Allocator allocator_type;\n-      typedef typename Allocator::size_type size_type;\n-      typedef typename Allocator::difference_type difference_type;\n-      typedef Hash_Fn hash_fn;\n-      typedef Eq_Fn eq_fn;\n-      typedef Comb_Hash_Fn comb_hash_fn;\n-      typedef Resize_Policy resize_policy;\n+      typedef _Alloc \t\t\t\tallocator_type;\n+      typedef typename _Alloc::size_type \tsize_type;\n+      typedef typename _Alloc::difference_type \tdifference_type;\n+      typedef Hash_Fn \t\t\t\thash_fn;\n+      typedef Eq_Fn \t\t\t\teq_fn;\n+      typedef Comb_Hash_Fn \t\t\tcomb_hash_fn;\n+      typedef Resize_Policy \t\t\tresize_policy;\n \n       enum\n \t{\n@@ -177,55 +167,55 @@ namespace __gnu_pbds\n \n       typedef typename traits_base::key_type key_type;\n       typedef typename traits_base::key_pointer key_pointer;\n-      typedef typename traits_base::const_key_pointer const_key_pointer;\n+      typedef typename traits_base::key_const_pointer key_const_pointer;\n       typedef typename traits_base::key_reference key_reference;\n-      typedef typename traits_base::const_key_reference const_key_reference;\n+      typedef typename traits_base::key_const_reference key_const_reference;\n       typedef typename traits_base::mapped_type mapped_type;\n       typedef typename traits_base::mapped_pointer mapped_pointer;\n-      typedef typename traits_base::const_mapped_pointer const_mapped_pointer;\n+      typedef typename traits_base::mapped_const_pointer mapped_const_pointer;\n       typedef typename traits_base::mapped_reference mapped_reference;\n-      typedef typename traits_base::const_mapped_reference const_mapped_reference;\n-      typedef typename traits_base::value_type value_type;\n-      typedef typename traits_base::pointer pointer;\n+      typedef typename traits_base::mapped_const_reference mapped_const_reference;\n+      typedef typename traits_base::value_type \tvalue_type;\n+      typedef typename traits_base::pointer \tpointer;\n       typedef typename traits_base::const_pointer const_pointer;\n-      typedef typename traits_base::reference reference;\n+      typedef typename traits_base::reference \treference;\n       typedef typename traits_base::const_reference const_reference;\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-      typedef point_iterator_ point_iterator;\n-#endif \n+      typedef point_iterator_ \t\t\tpoint_iterator;\n+#endif\n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n-      typedef const_point_iterator_ point_iterator;\n-#endif \n+      typedef point_const_iterator_ \t\tpoint_iterator;\n+#endif\n \n-      typedef const_point_iterator_ const_point_iterator;\n+      typedef point_const_iterator_ \t\tpoint_const_iterator;\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-      typedef iterator_ iterator;\n-#endif \n+      typedef iterator_ \t\t\titerator;\n+#endif\n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n-      typedef const_iterator_ iterator;\n-#endif \n+      typedef const_iterator_ \t\t\titerator;\n+#endif\n \n-      typedef const_iterator_ const_iterator;\n+      typedef const_iterator_ \t\t\tconst_iterator;\n \n-      PB_DS_CLASS_NAME();\n+      PB_DS_CC_HASH_NAME();\n \n-      PB_DS_CLASS_NAME(const Hash_Fn&);\n+      PB_DS_CC_HASH_NAME(const Hash_Fn&);\n \n-      PB_DS_CLASS_NAME(const Hash_Fn&, const Eq_Fn&);\n+      PB_DS_CC_HASH_NAME(const Hash_Fn&, const Eq_Fn&);\n \n-      PB_DS_CLASS_NAME(const Hash_Fn&, const Eq_Fn&, const Comb_Hash_Fn&);\n+      PB_DS_CC_HASH_NAME(const Hash_Fn&, const Eq_Fn&, const Comb_Hash_Fn&);\n \n-      PB_DS_CLASS_NAME(const Hash_Fn&, const Eq_Fn&, const Comb_Hash_Fn&, \n+      PB_DS_CC_HASH_NAME(const Hash_Fn&, const Eq_Fn&, const Comb_Hash_Fn&,\n \t\t       const Resize_Policy&);\n \n-      PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC&);\n+      PB_DS_CC_HASH_NAME(const PB_DS_CLASS_C_DEC&);\n \n       virtual\n-      ~PB_DS_CLASS_NAME();\n+      ~PB_DS_CC_HASH_NAME();\n \n       void\n       swap(PB_DS_CLASS_C_DEC&);\n@@ -246,59 +236,59 @@ namespace __gnu_pbds\n       inline bool\n       empty() const;\n \n-      Hash_Fn& \n+      Hash_Fn&\n       get_hash_fn();\n \n-      const Hash_Fn& \n+      const Hash_Fn&\n       get_hash_fn() const;\n \n-      Eq_Fn& \n+      Eq_Fn&\n       get_eq_fn();\n \n-      const Eq_Fn& \n+      const Eq_Fn&\n       get_eq_fn() const;\n \n-      Comb_Hash_Fn& \n+      Comb_Hash_Fn&\n       get_comb_hash_fn();\n \n-      const Comb_Hash_Fn& \n+      const Comb_Hash_Fn&\n       get_comb_hash_fn() const;\n \n-      Resize_Policy& \n+      Resize_Policy&\n       get_resize_policy();\n \n-      const Resize_Policy& \n+      const Resize_Policy&\n       get_resize_policy() const;\n \n       inline std::pair<point_iterator, bool>\n       insert(const_reference r_val)\n       { return insert_imp(r_val, traits_base::m_store_extra_indicator); }\n \n       inline mapped_reference\n-      operator[](const_key_reference r_key)\n+      operator[](key_const_reference r_key)\n       {\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n \treturn (subscript_imp(r_key, traits_base::m_store_extra_indicator));\n-#else \n+#else\n \tinsert(r_key);\n-\treturn traits_base::s_null_mapped;\n-#endif \n+\treturn traits_base::s_null_type;\n+#endif\n       }\n \n       inline point_iterator\n-      find(const_key_reference);\n+      find(key_const_reference);\n \n-      inline const_point_iterator\n-      find(const_key_reference) const;\n+      inline point_const_iterator\n+      find(key_const_reference) const;\n \n       inline point_iterator\n       find_end();\n \n-      inline const_point_iterator\n+      inline point_const_iterator\n       find_end() const;\n \n       inline bool\n-      erase(const_key_reference);\n+      erase(key_const_reference);\n \n       template<typename Pred>\n       inline size_type\n@@ -321,13 +311,13 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid(const char* file, int line) const;\n-#endif \n+      assert_valid(const char*, int) const;\n+#endif\n \n #ifdef PB_DS_HT_MAP_TRACE_\n       void\n       trace() const;\n-#endif \n+#endif\n \n     private:\n       void\n@@ -340,19 +330,23 @@ namespace __gnu_pbds\n       do_resize_if_needed_no_throw();\n \n       void\n-      resize_imp(size_type new_size);\n+      resize_imp(size_type);\n \n       void\n-      do_resize(size_type new_size);\n+      do_resize(size_type);\n \n       void\n       resize_imp_no_exceptions(size_type, entry_pointer_array, size_type);\n \n       inline entry_pointer\n-      resize_imp_no_exceptions_reassign_pointer(entry_pointer, entry_pointer_array, false_type);\n+      resize_imp_no_exceptions_reassign_pointer(entry_pointer,\n+\t\t\t\t\t\tentry_pointer_array,\n+\t\t\t\t\t\tfalse_type);\n \n       inline entry_pointer\n-      resize_imp_no_exceptions_reassign_pointer(entry_pointer, entry_pointer_array, true_type);\n+      resize_imp_no_exceptions_reassign_pointer(entry_pointer,\n+\t\t\t\t\t\tentry_pointer_array,\n+\t\t\t\t\t\ttrue_type);\n \n       void\n       deallocate_links_in_list(entry_pointer);\n@@ -368,14 +362,14 @@ namespace __gnu_pbds\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       inline mapped_reference\n-      subscript_imp(const_key_reference r_key, false_type)\n+      subscript_imp(key_const_reference r_key, false_type)\n       {\n \t_GLIBCXX_DEBUG_ONLY(assert_valid(__FILE__, __LINE__);)\n-        const size_type pos = ranged_hash_fn_base::operator()(r_key);\n+\tconst size_type pos = ranged_hash_fn_base::operator()(r_key);\n \tentry_pointer p_e = m_entries[pos];\n \tresize_base::notify_insert_search_start();\n \n-\twhile (p_e != 0 \n+\twhile (p_e != 0\n \t       && !hash_eq_fn_base::operator()(p_e->m_value.first, r_key))\n \t  {\n \t    resize_base::notify_insert_search_collision();\n@@ -394,14 +388,15 @@ namespace __gnu_pbds\n       }\n \n       inline mapped_reference\n-      subscript_imp(const_key_reference r_key, true_type)\n+      subscript_imp(key_const_reference r_key, true_type)\n       {\n \t_GLIBCXX_DEBUG_ONLY(assert_valid(__FILE__, __LINE__);)\n \tcomp_hash pos_hash_pair = ranged_hash_fn_base::operator()(r_key);\n \tentry_pointer p_e = m_entries[pos_hash_pair.first];\n \tresize_base::notify_insert_search_start();\n-\twhile (p_e != 0 && \n-\t       !hash_eq_fn_base::operator()(p_e->m_value.first, p_e->m_hash, r_key, pos_hash_pair.second))\n+\twhile (p_e != 0 &&\n+\t       !hash_eq_fn_base::operator()(p_e->m_value.first, p_e->m_hash,\n+\t\t\t\t\t    r_key, pos_hash_pair.second))\n \t  {\n \t    resize_base::notify_insert_search_collision();\n \t    p_e = p_e->m_p_next;\n@@ -415,10 +410,10 @@ namespace __gnu_pbds\n \t  }\n \n \tPB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n-\treturn insert_new_imp(value_type(r_key, mapped_type()), \n+\treturn insert_new_imp(value_type(r_key, mapped_type()),\n \t\t\t      pos_hash_pair)->second;\n       }\n-#endif \n+#endif\n \n       inline std::pair<point_iterator, bool>\n       insert_imp(const_reference, false_type);\n@@ -433,7 +428,8 @@ namespace __gnu_pbds\n \t  pos = ranged_hash_fn_base::operator()(PB_DS_V2F(r_val));\n \n \t// Following lines might throw an exception.\n-\tentry_pointer p_e = get_entry(r_val, traits_base::m_no_throw_copies_indicator);\n+\tentry_pointer p_e = get_entry(r_val,\n+\t\t\t\t      traits_base::m_no_throw_copies_indicator);\n \n \t// At this point no exceptions can be thrown.\n \tp_e->m_p_next = m_entries[pos];\n@@ -452,7 +448,8 @@ namespace __gnu_pbds\n \tif (do_resize_if_needed())\n \t  r_pos_hash_pair = ranged_hash_fn_base::operator()(PB_DS_V2F(r_val));\n \n-\tentry_pointer p_e = get_entry(r_val, traits_base::m_no_throw_copies_indicator);\n+\tentry_pointer p_e = get_entry(r_val,\n+\t\t\t\t      traits_base::m_no_throw_copies_indicator);\n \n \t// At this point no exceptions can be thrown.\n \tp_e->m_hash = r_pos_hash_pair.second;\n@@ -465,11 +462,11 @@ namespace __gnu_pbds\n       }\n \n       inline pointer\n-      find_key_pointer(const_key_reference r_key, false_type)\n+      find_key_pointer(key_const_reference r_key, false_type)\n       {\n \tentry_pointer p_e = m_entries[ranged_hash_fn_base::operator()(r_key)];\n \tresize_base::notify_find_search_start();\n-\twhile (p_e != 0 && \n+\twhile (p_e != 0 &&\n \t       !hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value), r_key))\n \t  {\n \t    resize_base::notify_find_search_collision();\n@@ -483,17 +480,17 @@ namespace __gnu_pbds\n \t  PB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n \telse\n \t  PB_DS_CHECK_KEY_EXISTS(r_key)\n-#endif \n+#endif\n \treturn &p_e->m_value;\n       }\n \n       inline pointer\n-      find_key_pointer(const_key_reference r_key, true_type)\n+      find_key_pointer(key_const_reference r_key, true_type)\n       {\n \tcomp_hash pos_hash_pair = ranged_hash_fn_base::operator()(r_key);\n \tentry_pointer p_e = m_entries[pos_hash_pair.first];\n \tresize_base::notify_find_search_start();\n-\twhile (p_e != 0 && \n+\twhile (p_e != 0 &&\n \t       !hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value),\n \t\t\t\t\t    p_e->m_hash,\n \t\t\t\t\t    r_key, pos_hash_pair.second))\n@@ -509,30 +506,30 @@ namespace __gnu_pbds\n \t  PB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n \telse\n \t  PB_DS_CHECK_KEY_EXISTS(r_key)\n-#endif \n+#endif\n \treturn &p_e->m_value;\n       }\n \n       inline bool\n-      erase_in_pos_imp(const_key_reference, size_type);\n+      erase_in_pos_imp(key_const_reference, size_type);\n \n       inline bool\n-      erase_in_pos_imp(const_key_reference, const comp_hash&);\n+      erase_in_pos_imp(key_const_reference, const comp_hash&);\n \n       inline void\n       erase_entry_pointer(entry_pointer&);\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       void\n-      inc_it_state(pointer& r_p_value, \n+      inc_it_state(pointer& r_p_value,\n \t\t   std::pair<entry_pointer, size_type>& r_pos) const\n       {\n-\tinc_it_state((const_mapped_pointer& )r_p_value, r_pos);\n+\tinc_it_state((mapped_const_pointer& )r_p_value, r_pos);\n       }\n-#endif \n+#endif\n \n       void\n-      inc_it_state(const_pointer& r_p_value, \n+      inc_it_state(const_pointer& r_p_value,\n \t\t   std::pair<entry_pointer, size_type>& r_pos) const\n       {\n \t_GLIBCXX_DEBUG_ASSERT(r_p_value != 0);\n@@ -554,7 +551,7 @@ namespace __gnu_pbds\n       }\n \n       void\n-      get_start_it_state(pointer& r_p_value, \n+      get_start_it_state(pointer& r_p_value,\n \t\t\t std::pair<entry_pointer, size_type>& r_pos) const\n       {\n \tfor (r_pos.second = 0; r_pos.second < m_num_e; ++r_pos.second)\n@@ -570,26 +567,26 @@ namespace __gnu_pbds\n #ifdef _GLIBCXX_DEBUG\n       void\n       assert_entry_pointer_array_valid(const entry_pointer_array,\n-\t\t\t\t       const char* file, int line) const;\n+\t\t\t\t       const char*, int) const;\n \n       void\n       assert_entry_pointer_valid(const entry_pointer, true_type,\n-\t\t\t\t const char* file, int line) const;\n+\t\t\t\t const char*, int) const;\n \n       void\n       assert_entry_pointer_valid(const entry_pointer, false_type,\n-\t\t\t\t const char* file, int line) const;\n-#endif \n+\t\t\t\t const char*, int) const;\n+#endif\n \n #ifdef PB_DS_HT_MAP_TRACE_\n       void\n       trace_list(const_entry_pointer) const;\n-#endif \n+#endif\n \n     private:\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       friend class iterator_;\n-#endif \n+#endif\n \n       friend class const_iterator_;\n \n@@ -598,16 +595,16 @@ namespace __gnu_pbds\n       static iterator \t\t\ts_end_it;\n       static const_iterator \t\ts_const_end_it;\n       static point_iterator \t\ts_find_end_it;\n-      static const_point_iterator \ts_const_find_end_it;\n+      static point_const_iterator \ts_const_find_end_it;\n \n       size_type \t\t\tm_num_e;\n       size_type \t\t\tm_num_used_e;\n       entry_pointer_array \t\tm_entries;\n \n       enum\n \t{\n-\t  store_hash_ok = !Store_Hash \n-\t                  || !is_same<Hash_Fn, __gnu_pbds::null_hash_fn>::value\n+\t  store_hash_ok = !Store_Hash\n+\t\t\t  || !is_same<Hash_Fn, __gnu_pbds::null_type>::value\n \t};\n \n       PB_DS_STATIC_ASSERT(sth, store_hash_ok);\n@@ -629,12 +626,8 @@ namespace __gnu_pbds\n #undef PB_DS_CLASS_C_DEC\n #undef PB_DS_HASH_EQ_FN_C_DEC\n #undef PB_DS_RANGED_HASH_FN_C_DEC\n-#undef PB_DS_TYPES_TRAITS_C_DEC\n+#undef PB_DS_CC_HASH_TRAITS_BASE\n #undef PB_DS_DEBUG_MAP_BASE_C_DEC\n-#undef PB_DS_CLASS_NAME\n-#undef PB_DS_V2F\n-#undef PB_DS_V2S\n-\n+#undef PB_DS_CC_HASH_NAME\n   } // namespace detail\n } // namespace __gnu_pbds\n-"}, {"sha": "4f7116f573f86772a7c7de131adc1b8743b19407", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/cmp_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcmp_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcmp_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcmp_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file cmp_fn_imps.hpp\n+ * @file cc_hash_table_map_/cmp_fn_imps.hpp\n  * Contains implementations of cc_ht_map_'s entire container comparison related\n  *    functions.\n  */\n@@ -58,9 +58,9 @@ cmp_with_other(const Other_Map_Type& other) const\n   for (typename Other_Map_Type::const_iterator it = other.begin();\n        it != other.end(); ++it)\n     {\n-      const_key_reference r_key = const_key_reference(PB_DS_V2F(*it));\n+      key_const_reference r_key = key_const_reference(PB_DS_V2F(*it));\n \n-      const_mapped_pointer p_mapped_value =\n+      mapped_const_pointer p_mapped_value =\n \tconst_cast<PB_DS_CLASS_C_DEC& >(*this).\n \tfind_key_pointer(r_key, traits_base::m_store_extra_indicator);\n "}, {"sha": "5b2db9b0f642f635c9115e929a3284991d8cbe35", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/cond_key_dtor_entry_dealtor.hpp", "status": "modified", "additions": 25, "deletions": 52, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcond_key_dtor_entry_dealtor.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcond_key_dtor_entry_dealtor.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcond_key_dtor_entry_dealtor.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -34,84 +34,57 @@\n // warranty.\n \n /**\n- * @file cond_key_dtor_entry_dealtor.hpp\n+ * @file cc_hash_table_map_/cond_key_dtor_entry_dealtor.hpp\n  * Contains a conditional key destructor, used for exception handling.\n  */\n \n namespace __gnu_pbds\n {\n   namespace detail\n   {\n-\n-#define PB_DS_CLASS_T_DEC template<typename HT_Map>\n-#define PB_DS_CLASS_C_DEC PB_DS_CKDED_CLASS_NAME<HT_Map>\n-\n-    /**\n-     * A conditional key destructor, used for exception handling.\n-     **/\n+    /// Conditional dey destructor, cc_hash.\n     template<typename HT_Map>\n-    class PB_DS_CKDED_CLASS_NAME\n+    class cond_dealtor\n     {\n     public:\n-      typedef typename HT_Map::entry entry;\n-      typedef typename HT_Map::entry_allocator entry_allocator;\n-      typedef typename HT_Map::key_type key_type;\n+      typedef typename HT_Map::entry \t\tentry;\n+      typedef typename HT_Map::entry_allocator \tentry_allocator;\n+      typedef typename HT_Map::key_type \tkey_type;\n \n-      inline\n-      PB_DS_CKDED_CLASS_NAME(entry_allocator* p_a, entry* p_e);\n+      cond_dealtor(entry_allocator* p_a, entry* p_e)\n+      : m_p_a(p_a), m_p_e(p_e), m_key_destruct(false),\n+\tm_no_action_destructor(false)\n+      { }\n \n       inline\n-      ~PB_DS_CKDED_CLASS_NAME();\n+      ~cond_dealtor();\n \n-      inline void\n-      set_key_destruct();\n+      void\n+      set_key_destruct()\n+      { m_key_destruct = true; }\n \n-      inline void\n-      set_no_action_destructor();\n+      void\n+      set_no_action_destructor()\n+      { m_no_action_destructor = true; }\n \n     protected:\n-      entry_allocator* const m_p_a;\n-      entry* const m_p_e;\n+      entry_allocator* const \t\t\tm_p_a;\n+      entry* const \t\t\t\tm_p_e;\n \n-      bool m_key_destruct;\n-      bool m_no_action_destructor;\n+      bool \t\t\t\t\tm_key_destruct;\n+      bool \t\t\t\t\tm_no_action_destructor;\n     };\n \n-    PB_DS_CLASS_T_DEC\n-    inline\n-    PB_DS_CLASS_C_DEC::\n-    PB_DS_CKDED_CLASS_NAME(entry_allocator* p_a, entry* p_e) \n-    : m_p_a(p_a), m_p_e(p_e), m_key_destruct(false), \n-      m_no_action_destructor(false)\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n-    inline void\n-    PB_DS_CLASS_C_DEC::\n-    set_key_destruct()\n-    { m_key_destruct = true; }\n-\n-    PB_DS_CLASS_T_DEC\n-    inline void\n-    PB_DS_CLASS_C_DEC::\n-    set_no_action_destructor()\n-    { m_no_action_destructor = true; }\n-\n-    PB_DS_CLASS_T_DEC\n+    template<typename HT_Map>\n     inline\n-    PB_DS_CLASS_C_DEC::\n-    ~PB_DS_CKDED_CLASS_NAME()\n+    cond_dealtor<HT_Map>::\n+    ~cond_dealtor()\n     {\n       if (m_no_action_destructor)\n \treturn;\n       if (m_key_destruct)\n \tm_p_e->m_value.first.~key_type();\n       m_p_a->deallocate(m_p_e, 1);\n     }\n-\n-#undef PB_DS_CLASS_T_DEC\n-#undef PB_DS_CLASS_C_DEC\n-\n   } // namespace detail\n } // namespace __gnu_pbds\n-"}, {"sha": "9d37d9f86c3227a2eea9a3e6732e2be13addacbe", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/constructor_destructor_fn_imps.hpp", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -35,9 +35,9 @@\n // warranty.\n \n /**\n- * @file constructor_destructor_fn_imps.hpp\n+ * @file cc_hash_table_map_/constructor_destructor_fn_imps.hpp\n  * Contains implementations of cc_ht_map_'s constructors, destructor,\n- *    and related functions.\n+ * and related functions.\n  */\n \n PB_DS_CLASS_T_DEC\n@@ -60,7 +60,7 @@ copy_from_range(It first_it, It last_it)\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME() :\n+PB_DS_CC_HASH_NAME() :\n   ranged_hash_fn_base(resize_base::get_nearest_larger_size(1)),\n   m_num_e(resize_base::get_nearest_larger_size(1)), m_num_used_e(0),\n   m_entries(s_entry_pointer_allocator.allocate(m_num_e))\n@@ -71,7 +71,7 @@ PB_DS_CLASS_NAME() :\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn) :\n+PB_DS_CC_HASH_NAME(const Hash_Fn& r_hash_fn) :\n   ranged_hash_fn_base(resize_base::get_nearest_larger_size(1), r_hash_fn),\n   m_num_e(resize_base::get_nearest_larger_size(1)), m_num_used_e(0),\n   m_entries(s_entry_pointer_allocator.allocate(m_num_e))\n@@ -82,7 +82,7 @@ PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn) :\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn) :\n+PB_DS_CC_HASH_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn) :\n   PB_DS_HASH_EQ_FN_C_DEC(r_eq_fn),\n   ranged_hash_fn_base(resize_base::get_nearest_larger_size(1), r_hash_fn),\n   m_num_e(resize_base::get_nearest_larger_size(1)), m_num_used_e(0),\n@@ -96,7 +96,8 @@ PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn) :\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, const Comb_Hash_Fn& r_comb_hash_fn) :\n+PB_DS_CC_HASH_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, \n+\t\t   const Comb_Hash_Fn& r_comb_hash_fn) :\n   PB_DS_HASH_EQ_FN_C_DEC(r_eq_fn),\n   ranged_hash_fn_base(resize_base::get_nearest_larger_size(1),\n \t\t      r_hash_fn, r_comb_hash_fn),\n@@ -109,7 +110,9 @@ PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, const Comb_Hash\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, const Comb_Hash_Fn& r_comb_hash_fn, const Resize_Policy& r_resize_policy) :\n+PB_DS_CC_HASH_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, \n+\t\t   const Comb_Hash_Fn& r_comb_hash_fn, \n+\t\t   const Resize_Policy& r_resize_policy) :\n   PB_DS_HASH_EQ_FN_C_DEC(r_eq_fn),\n   Resize_Policy(r_resize_policy),\n   ranged_hash_fn_base(resize_base::get_nearest_larger_size(1),\n@@ -123,7 +126,7 @@ PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, const Comb_Hash\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n+PB_DS_CC_HASH_NAME(const PB_DS_CLASS_C_DEC& other) :\n   PB_DS_HASH_EQ_FN_C_DEC(other),\n   resize_base(other), ranged_hash_fn_base(other),\n   m_num_e(resize_base::get_nearest_larger_size(1)), m_num_used_e(0),\n@@ -133,19 +136,19 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n   PB_DS_ASSERT_VALID((*this))\n     __try\n       {\n-        copy_from_range(other.begin(), other.end());\n+\tcopy_from_range(other.begin(), other.end());\n       }\n     __catch(...)\n       {\n-        deallocate_all();\n-        __throw_exception_again;\n+\tdeallocate_all();\n+\t__throw_exception_again;\n       }\n   PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-~PB_DS_CLASS_NAME()\n+~PB_DS_CC_HASH_NAME()\n { deallocate_all(); }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "1f68349d929388d283445395491d764f1b8ca61e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/constructor_destructor_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,15 +34,15 @@\n // warranty.\n \n /**\n- * @file constructor_destructor_no_store_hash_fn_imps.hpp\n+ * @file cc_hash_table_map_/constructor_destructor_no_store_hash_fn_imps.hpp\n  * Contains implementations of cc_ht_map_'s constructors, destructor,\n  *    and related functions.\n  */\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n-constructor_insert_new_imp(const_mapped_reference r_val, size_type pos, \n+constructor_insert_new_imp(mapped_const_reference r_val, size_type pos, \n \t\t\t   false_type)\n {\n   // Following lines might throw an exception."}, {"sha": "f6a73af6d65de6a9118171630c50dcd138bf88eb", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/constructor_destructor_store_hash_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,9 +34,9 @@\n // warranty.\n \n /**\n- * @file constructor_destructor_store_hash_fn_imps.hpp\n+ * @file cc_hash_table_map_/constructor_destructor_store_hash_fn_imps.hpp\n  * Contains implementations of cc_ht_map_'s constructors, destructor,\n- *    and related functions.\n+ * and related functions.\n  */\n \n PB_DS_CLASS_T_DEC\n@@ -49,7 +49,7 @@ constructor_insert_new_imp(const_reference r_val, size_type pos, true_type)\n \n   // At this point no exceptions can be thrown.\n   p->m_p_next = m_entries[pos];\n-  p->m_hash = ranged_hash_fn_base::operator()((const_key_reference)(PB_DS_V2F(p->m_value))).second;\n+  p->m_hash = ranged_hash_fn_base::operator()((key_const_reference)(PB_DS_V2F(p->m_value))).second;\n \n   m_entries[pos] = p;\n   _GLIBCXX_DEBUG_ONLY(debug_base::insert_new(r_key);)"}, {"sha": "c5af1d3ea4aa9034fe258b7a38c2c8dd96bba5df", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/debug_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file debug_fn_imps.hpp\n+ * @file cc_hash_table_map_/debug_fn_imps.hpp\n  * Contains implementations of cc_ht_map_'s debug-mode functions.\n  */\n "}, {"sha": "1c19cac95901b57f52e9e6a5aa510d37f0e41dea", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/debug_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file debug_no_store_hash_fn_imps.hpp\n+ * @file cc_hash_table_map_/debug_no_store_hash_fn_imps.hpp\n  * Contains implementations of cc_ht_map_'s debug-mode functions.\n  */\n \n@@ -47,4 +47,4 @@ assert_entry_pointer_valid(const entry_pointer p, false_type,\n \t\t\t   const char* __file, int __line) const\n { debug_base::check_key_exists(PB_DS_V2F(p->m_value), __file, __line); }\n \n-#endif \n+#endif"}, {"sha": "76ad8c6bff5cc24537bcd45633aa32eb09c76f60", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/debug_store_hash_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_store_hash_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file debug_store_hash_fn_imps.hpp\n+ * @file cc_hash_table_map_/debug_store_hash_fn_imps.hpp\n  * Contains implementations of cc_ht_map_'s debug-mode functions.\n  */\n "}, {"sha": "74404035f997f03178e16462b18ef6469ab25424", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/entry_list_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fentry_list_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fentry_list_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fentry_list_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file entry_list_fn_imps.hpp\n+ * @file cc_hash_table_map_/entry_list_fn_imps.hpp\n  * Contains implementations of cc_ht_map_'s entry-list related functions.\n  */\n "}, {"sha": "c9c4b1c745d6907f59c3e5c76f3877e3210aad24", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/erase_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file erase_fn_imps.hpp\n+ * @file cc_hash_table_map_/erase_fn_imps.hpp\n  * Contains implementations of cc_ht_map_'s erase related functions.\n  */\n "}, {"sha": "1e2661efa55a434f8ff67691e3b3135a973043b3", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/erase_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,15 +34,15 @@\n // warranty.\n \n /**\n- * @file erase_no_store_hash_fn_imps.hpp\n+ * @file cc_hash_table_map_/erase_no_store_hash_fn_imps.hpp\n  * Contains implementations of cc_ht_map_'s erase related functions,\n  * when the hash value is not stored.\n  */\n \n PB_DS_CLASS_T_DEC\n inline bool\n PB_DS_CLASS_C_DEC::\n-erase(const_key_reference r_key)\n+erase(key_const_reference r_key)\n {\n   PB_DS_ASSERT_VALID((*this))\n   return erase_in_pos_imp(r_key, ranged_hash_fn_base::operator()(r_key));\n@@ -51,7 +51,7 @@ erase(const_key_reference r_key)\n PB_DS_CLASS_T_DEC\n inline bool\n PB_DS_CLASS_C_DEC::\n-erase_in_pos_imp(const_key_reference r_key, size_type pos)\n+erase_in_pos_imp(key_const_reference r_key, size_type pos)\n {\n   PB_DS_ASSERT_VALID((*this))\n   entry_pointer p_e = m_entries[pos];\n@@ -78,24 +78,23 @@ erase_in_pos_imp(const_key_reference r_key, size_type pos)\n     {\n       entry_pointer p_next_e = p_e->m_p_next;\n       if (p_next_e == 0)\n-        {\n+\t{\n \t  resize_base::notify_erase_search_end();\n \t  PB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n-          PB_DS_ASSERT_VALID((*this))\n-          return false;\n-        }\n+\t  PB_DS_ASSERT_VALID((*this))\n+\t  return false;\n+\t}\n \n       if (hash_eq_fn_base::operator()(PB_DS_V2F(p_next_e->m_value), r_key))\n-        {\n+\t{\n \t  resize_base::notify_erase_search_end();\n \t  PB_DS_CHECK_KEY_EXISTS(r_key)\n-          erase_entry_pointer(p_e->m_p_next);\n+\t  erase_entry_pointer(p_e->m_p_next);\n \t  do_resize_if_needed_no_throw();\n \t  PB_DS_ASSERT_VALID((*this))\n-          return true;\n-        }\n+\t  return true;\n+\t}\n       resize_base::notify_erase_search_collision();\n       p_e = p_next_e;\n     }\n }\n-"}, {"sha": "a4cddeafb67619050d6fc6794b5046bec518390c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/erase_store_hash_fn_imps.hpp", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_store_hash_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,15 +34,15 @@\n // warranty.\n \n /**\n- * @file erase_store_hash_fn_imps.hpp\n+ * @file cc_hash_table_map_/erase_store_hash_fn_imps.hpp\n  * Contains implementations of cc_ht_map_'s erase related functions,\n  * when the hash value is stored.\n  */\n \n PB_DS_CLASS_T_DEC\n inline bool\n PB_DS_CLASS_C_DEC::\n-erase_in_pos_imp(const_key_reference r_key, const comp_hash& r_pos_hash_pair)\n+erase_in_pos_imp(key_const_reference r_key, const comp_hash& r_pos_hash_pair)\n {\n   PB_DS_ASSERT_VALID((*this))\n   entry_pointer p_e = m_entries[r_pos_hash_pair.first];\n@@ -70,26 +70,25 @@ erase_in_pos_imp(const_key_reference r_key, const comp_hash& r_pos_hash_pair)\n     {\n       entry_pointer p_next_e = p_e->m_p_next;\n       if (p_next_e == 0)\n-        {\n+\t{\n \t  resize_base::notify_erase_search_end();\n \t  PB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n-          PB_DS_ASSERT_VALID((*this))\n-          return false;\n-        }\n+\t  PB_DS_ASSERT_VALID((*this))\n+\t  return false;\n+\t}\n \n       if (hash_eq_fn_base::operator()(PB_DS_V2F(p_next_e->m_value),\n \t\t\t\t      p_next_e->m_hash, r_key,\n \t\t\t\t      r_pos_hash_pair.second))\n-        {\n+\t{\n \t  resize_base::notify_erase_search_end();\n \t  PB_DS_CHECK_KEY_EXISTS(r_key)\n-          erase_entry_pointer(p_e->m_p_next);\n+\t  erase_entry_pointer(p_e->m_p_next);\n \t  do_resize_if_needed_no_throw();\n \t  PB_DS_ASSERT_VALID((*this))\n-          return true;\n-        }\n+\t  return true;\n+\t}\n       resize_base::notify_erase_search_collision();\n       p_e = p_next_e;\n     }\n }\n-"}, {"sha": "e3f363f41ed39cc9922d2ceac5538de859aad3ba", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/find_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ffind_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,23 +34,23 @@\n // warranty.\n \n /**\n- * @file find_fn_imps.hpp\n+ * @file cc_hash_table_map_/find_fn_imps.hpp\n  * Contains implementations of cc_ht_map_'s find related functions.\n  */\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n-find(const_key_reference r_key)\n+find(key_const_reference r_key)\n {\n   PB_DS_ASSERT_VALID((*this))\n   return find_key_pointer(r_key, traits_base::m_store_extra_indicator);\n }\n \n PB_DS_CLASS_T_DEC\n-inline typename PB_DS_CLASS_C_DEC::const_point_iterator\n+inline typename PB_DS_CLASS_C_DEC::point_const_iterator\n PB_DS_CLASS_C_DEC::\n-find(const_key_reference r_key) const\n+find(key_const_reference r_key) const\n {\n   PB_DS_ASSERT_VALID((*this))\n   return const_cast<PB_DS_CLASS_C_DEC& >(*this).find_key_pointer(r_key, \n@@ -64,7 +64,7 @@ find_end()\n { return 0; }\n \n PB_DS_CLASS_T_DEC\n-inline typename PB_DS_CLASS_C_DEC::const_point_iterator\n+inline typename PB_DS_CLASS_C_DEC::point_const_iterator\n PB_DS_CLASS_C_DEC::\n find_end() const\n { return 0; }"}, {"sha": "d532c4f45bec9b5b969be03a10eccb0ceeb8f5ef", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/find_store_hash_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ffind_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ffind_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ffind_store_hash_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file find_store_hash_fn_imps.hpp\n+ * @file cc_hash_table_map_/find_store_hash_fn_imps.hpp\n  * Contains implementations of cc_ht_map_'s find related functions,\n  * when the hash value is stored.\n  */"}, {"sha": "99eea41c598165969bced1c588b7ffa06136b19d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/info_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finfo_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file info_fn_imps.hpp\n+ * @file cc_hash_table_map_/info_fn_imps.hpp\n  * Contains implementations of cc_ht_map_'s entire container info related\n  * functions.\n  */\n@@ -76,8 +76,8 @@ cmp_with_other(const Other_Map_Type& other) const\n   for (typename Other_Map_Type::const_iterator it = other.begin();\n        it != other.end(); ++it)\n     {\n-      const_key_reference r_key =(const_key_reference)PB_DS_V2F(*it);\n-      const_mapped_pointer p_mapped_value =\n+      key_const_reference r_key =(key_const_reference)PB_DS_V2F(*it);\n+      mapped_const_pointer p_mapped_value =\n \tconst_cast<PB_DS_CLASS_C_DEC& >(*this).\n \tfind_key_pointer(r_key, traits_base::m_store_extra_indicator);\n "}, {"sha": "dc7d44cc504c1a527a5af632d9d0cc2622b9009a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/insert_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file insert_fn_imps.hpp\n+ * @file cc_hash_table_map_/insert_fn_imps.hpp\n  * Contains implementations of cc_ht_map_'s insert related functions.\n  */\n "}, {"sha": "ba898739589b2b1551a8da6c54ba17b2df0bbfde", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/insert_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file insert_no_store_hash_fn_imps.hpp\n+ * @file cc_hash_table_map_/insert_no_store_hash_fn_imps.hpp\n  * Contains implementations of cc_ht_map_'s insert related functions,\n  * when the hash value is not stored.\n  */\n@@ -45,7 +45,7 @@ PB_DS_CLASS_C_DEC::\n insert_imp(const_reference r_val, false_type)\n {\n   PB_DS_ASSERT_VALID((*this))\n-  const_key_reference r_key = PB_DS_V2F(r_val);\n+  key_const_reference r_key = PB_DS_V2F(r_val);\n   const size_type pos = ranged_hash_fn_base::operator()(r_key);\n   entry_pointer p_e = m_entries[pos];\n   resize_base::notify_insert_search_start();"}, {"sha": "f4553976cfb4d6aa506f56417b14e16cea5c915a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/insert_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_store_hash_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file insert_store_hash_fn_imps.hpp\n+ * @file cc_hash_table_map_/insert_store_hash_fn_imps.hpp\n  * Contains implementations of cc_ht_map_'s insert related functions,\n  * when the hash value is stored.\n  */\n@@ -45,7 +45,7 @@ PB_DS_CLASS_C_DEC::\n insert_imp(const_reference r_val, true_type)\n {\n   PB_DS_ASSERT_VALID((*this))\n-  const_key_reference key = PB_DS_V2F(r_val);\n+  key_const_reference key = PB_DS_V2F(r_val);\n   comp_hash pos_hash_pair = ranged_hash_fn_base::operator()(key);\n   entry_pointer p_e = m_entries[pos_hash_pair.first];\n   resize_base::notify_insert_search_start();"}, {"sha": "5be4a9caab0fe9a3e14746c7a2dcfa0284470211", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/iterators_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fiterators_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fiterators_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fiterators_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file iterators_fn_imps.hpp\n+ * @file cc_hash_table_map_/iterators_fn_imps.hpp\n  * Contains implementations of cc_ht_map_'s iterators related functions, e.g.,\n  * begin().\n  */"}, {"sha": "5bf12c8f166b04396ef11d42b537fcc1882e2cf8", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/policy_access_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fpolicy_access_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fpolicy_access_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fpolicy_access_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file policy_access_fn_imps.hpp\n+ * @file cc_hash_table_map_/policy_access_fn_imps.hpp\n  * Contains implementations of cc_ht_map_'s policy access\n  *    functions.\n  */"}, {"sha": "66145b81da10ca48ab5bfd11b5a158ff6f2c379f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/resize_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -35,7 +35,7 @@\n // warranty.\n \n /**\n- * @file resize_fn_imps.hpp\n+ * @file cc_hash_table_map_/resize_fn_imps.hpp\n  * Contains implementations of cc_ht_map_'s resize related functions.\n  */\n "}, {"sha": "f43850818b6d9d3a3a8f7c8be7f1db9648d31e63", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/resize_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_no_store_hash_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,9 +34,9 @@\n // warranty.\n \n /**\n- * @file resize_no_store_hash_fn_imps.hpp\n+ * @file cc_hash_table_map_/resize_no_store_hash_fn_imps.hpp\n  * Contains implementations of cc_ht_map_'s resize related functions, when the\n- *    hash value is not stored.\n+ * hash value is not stored.\n  */\n \n PB_DS_CLASS_T_DEC"}, {"sha": "1901b803938f215fd9687a8fb037401eac1527c9", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/resize_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_store_hash_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,9 +34,9 @@\n // warranty.\n \n /**\n- * @file resize_store_hash_fn_imps.hpp\n+ * @file cc_hash_table_map_/resize_store_hash_fn_imps.hpp\n  * Contains implementations of cc_ht_map_'s resize related functions, when the\n- *    hash value is stored.\n+ * hash value is stored.\n  */\n \n PB_DS_CLASS_T_DEC"}, {"sha": "ff11890e6936bf3281ac64edaa65d6516b163177", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/size_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fsize_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fsize_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fsize_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,9 +34,9 @@\n // warranty.\n \n /**\n- * @file size_fn_imps.hpp\n+ * @file cc_hash_table_map_/size_fn_imps.hpp\n  * Contains implementations of cc_ht_map_'s entire container size related\n- *    functions.\n+ * functions.\n  */\n \n PB_DS_CLASS_T_DEC"}, {"sha": "3c07f95a496d5ea31a685066fdec45cd99324269", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/standard_policies.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fstandard_policies.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fstandard_policies.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fstandard_policies.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file standard_policies.hpp\n+ * @file cc_hash_table_map_/standard_policies.hpp\n  * Contains standard policies for cc_ht_map types.\n  */\n "}, {"sha": "ede1d6a8fc98c54a451fe7061301b66e9a6d29a9", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/trace_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ftrace_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ftrace_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ftrace_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file trace_fn_imps.hpp\n+ * @file cc_hash_table_map_/trace_fn_imps.hpp\n  * Contains implementations of cc_ht_map_'s trace-mode functions.\n  */\n "}, {"sha": "eb87bea9e24810341968d941fd966229b3cf14de", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cond_dealtor.hpp", "status": "modified", "additions": 35, "deletions": 76, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcond_dealtor.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcond_dealtor.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcond_dealtor.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file cond_dealtor.hpp\n+ * @file detail/cond_dealtor.hpp\n  * Contains a conditional deallocator.\n  */\n \n@@ -43,83 +43,42 @@\n \n namespace __gnu_pbds\n {\n-\n   namespace detail\n   {\n-\n-#define PB_DS_COND_DEALTOR_CLASS_T_DEC\t\t\\\n-    template<typename Entry, class Allocator>\n-\n-#define PB_DS_COND_DEALTOR_CLASS_C_DEC\t\t\t\t\\\n-    cond_dealtor<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tEntry,\t\t\\\n-\t\t\t\t\t\tAllocator>\n-\n-    template<typename Entry, class Allocator>\n-    class cond_dealtor\n-    {\n-    public:\n-      typedef\n-      typename Allocator::template rebind<Entry>::other\n-      entry_allocator;\n-\n-      typedef typename entry_allocator::pointer entry_pointer;\n-\n-    public:\n-      inline\n-      cond_dealtor(entry_pointer p_e);\n-\n-      inline\n-      ~cond_dealtor();\n-\n-      inline void\n-      set_no_action();\n-\n-    private:\n-      entry_pointer m_p_e;\n-\n-      bool m_no_action_destructor;\n-\n-      static entry_allocator s_alloc;\n-    };\n-\n-    PB_DS_COND_DEALTOR_CLASS_T_DEC\n-    typename PB_DS_COND_DEALTOR_CLASS_C_DEC::entry_allocator\n-    PB_DS_COND_DEALTOR_CLASS_C_DEC::s_alloc;\n-\n-    PB_DS_COND_DEALTOR_CLASS_T_DEC\n-    inline\n-    PB_DS_COND_DEALTOR_CLASS_C_DEC::\n-    cond_dealtor(entry_pointer p_e) :\n-      m_p_e(p_e),\n-      m_no_action_destructor(false)\n-    { }\n-\n-    PB_DS_COND_DEALTOR_CLASS_T_DEC\n-    inline void\n-    PB_DS_COND_DEALTOR_CLASS_C_DEC::\n-    set_no_action()\n-    {\n-      m_no_action_destructor = true;\n-    }\n-\n-    PB_DS_COND_DEALTOR_CLASS_T_DEC\n-    inline\n-    PB_DS_COND_DEALTOR_CLASS_C_DEC::\n-    ~cond_dealtor()\n-    {\n-      if (m_no_action_destructor)\n-        return;\n-\n-      s_alloc.deallocate(m_p_e, 1);\n-    }\n-\n-#undef PB_DS_COND_DEALTOR_CLASS_T_DEC\n-#undef PB_DS_COND_DEALTOR_CLASS_C_DEC\n-\n+    /// Conditional deallocate constructor argument.\n+    template<typename Entry, typename _Alloc>\n+      class cond_dealtor\n+      {\n+\ttypedef typename _Alloc::template rebind<Entry>\t__rebind_e;\n+\n+      public:\n+\ttypedef typename __rebind_e::other \t\tentry_allocator;\n+\ttypedef typename entry_allocator::pointer \tentry_pointer;\n+\n+\tcond_dealtor(entry_pointer p_e)\n+\t: m_p_e(p_e), m_no_action_destructor(false) { }\n+\n+\t~cond_dealtor()\n+\t{\n+\t  if (m_no_action_destructor)\n+\t    return;\n+\t  s_alloc.deallocate(m_p_e, 1);\n+\t}\n+\n+\tvoid\n+\tset_no_action()\n+\t{ m_no_action_destructor = true; }\n+\n+      private:\n+\tentry_pointer \t\tm_p_e;\n+\tbool \t\t\tm_no_action_destructor;\n+\tstatic entry_allocator \ts_alloc;\n+      };\n+\n+    template<typename Entry, class _Alloc>\n+      typename cond_dealtor<Entry, _Alloc>::entry_allocator\n+      cond_dealtor<Entry, _Alloc>::s_alloc;\n   } // namespace detail\n-\n } // namespace __gnu_pbds\n \n #endif // #ifndef PB_DS_COND_DEALTOR_HPP\n-"}, {"sha": "a960b7d2317049454a0a3c55057b649fee0b80ea", "filename": "libstdc++-v3/include/ext/pb_ds/detail/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fconstructors_destructor_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file constructors_destructor_fn_imps.hpp\n+ * @file detail/constructors_destructor_fn_imps.hpp\n  * Contains constructors_destructor_fn_imps applicable to different containers.\n  */\n "}, {"sha": "37217d950b710b4d94ac36a106c6500620847917", "filename": "libstdc++-v3/include/ext/pb_ds/detail/container_base_dispatch.hpp", "status": "modified", "additions": 104, "deletions": 105, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcontainer_base_dispatch.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcontainer_base_dispatch.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcontainer_base_dispatch.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -35,7 +35,7 @@\n \n /**\n  * @file container_base_dispatch.hpp\n- * Contains an associative container dispatching base.\n+ * Contains associative container dispatching.\n  */\n \n #ifndef PB_DS_ASSOC_CNTNR_BASE_DS_DISPATCHER_HPP\n@@ -60,60 +60,38 @@\n \t\t\t\t\t\t\t   __FILE__, __LINE__);)\n \n #define PB_DS_DATA_TRUE_INDICATOR\n+#define PB_DS_V2F(X) (X).first\n+#define PB_DS_V2S(X) (X).second\n+#define PB_DS_EP2VP(X)& ((X)->m_value)\n #include <ext/pb_ds/detail/list_update_map_/lu_map_.hpp>\n-#undef PB_DS_DATA_TRUE_INDICATOR\n-\n-#define PB_DS_DATA_FALSE_INDICATOR\n-#include <ext/pb_ds/detail/list_update_map_/lu_map_.hpp>\n-#undef PB_DS_DATA_FALSE_INDICATOR\n-\n-#define PB_DS_DATA_TRUE_INDICATOR\n+#include <ext/pb_ds/detail/bin_search_tree_/bin_search_tree_.hpp>\n #include <ext/pb_ds/detail/rb_tree_map_/rb_tree_.hpp>\n-#undef PB_DS_DATA_TRUE_INDICATOR\n-\n-#define PB_DS_DATA_FALSE_INDICATOR\n-#include <ext/pb_ds/detail/rb_tree_map_/rb_tree_.hpp>\n-#undef PB_DS_DATA_FALSE_INDICATOR\n-\n-#define PB_DS_DATA_TRUE_INDICATOR\n-#include <ext/pb_ds/detail/splay_tree_/splay_tree_.hpp>\n-#undef PB_DS_DATA_TRUE_INDICATOR\n-\n-#define PB_DS_DATA_FALSE_INDICATOR\n #include <ext/pb_ds/detail/splay_tree_/splay_tree_.hpp>\n-#undef PB_DS_DATA_FALSE_INDICATOR\n-\n-#define PB_DS_DATA_TRUE_INDICATOR\n-#include <ext/pb_ds/detail/ov_tree_map_/ov_tree_map_.hpp>\n-#undef PB_DS_DATA_TRUE_INDICATOR\n-\n-#define PB_DS_DATA_FALSE_INDICATOR\n #include <ext/pb_ds/detail/ov_tree_map_/ov_tree_map_.hpp>\n-#undef PB_DS_DATA_FALSE_INDICATOR\n-\n-#define PB_DS_DATA_TRUE_INDICATOR\n-#include <ext/pb_ds/detail/cc_hash_table_map_/cc_ht_map_.hpp>\n-#undef PB_DS_DATA_TRUE_INDICATOR\n-\n-#define PB_DS_DATA_FALSE_INDICATOR\n #include <ext/pb_ds/detail/cc_hash_table_map_/cc_ht_map_.hpp>\n-#undef PB_DS_DATA_FALSE_INDICATOR\n-\n-#define PB_DS_DATA_TRUE_INDICATOR\n-#include <ext/pb_ds/detail/gp_hash_table_map_/gp_ht_map_.hpp>\n-#undef PB_DS_DATA_TRUE_INDICATOR\n-\n-#define PB_DS_DATA_FALSE_INDICATOR\n #include <ext/pb_ds/detail/gp_hash_table_map_/gp_ht_map_.hpp>\n-#undef PB_DS_DATA_FALSE_INDICATOR\n-\n-#define PB_DS_DATA_TRUE_INDICATOR\n #include <ext/pb_ds/detail/pat_trie_/pat_trie_.hpp>\n #undef PB_DS_DATA_TRUE_INDICATOR\n+#undef PB_DS_V2F\n+#undef PB_DS_V2S\n+#undef PB_DS_EP2VP\n \n #define PB_DS_DATA_FALSE_INDICATOR\n+#define PB_DS_V2F(X) (X)\n+#define PB_DS_V2S(X) Mapped_Data()\n+#define PB_DS_EP2VP(X)& ((X)->m_value.first)\n+#include <ext/pb_ds/detail/list_update_map_/lu_map_.hpp>\n+#include <ext/pb_ds/detail/bin_search_tree_/bin_search_tree_.hpp>\n+#include <ext/pb_ds/detail/rb_tree_map_/rb_tree_.hpp>\n+#include <ext/pb_ds/detail/splay_tree_/splay_tree_.hpp>\n+#include <ext/pb_ds/detail/ov_tree_map_/ov_tree_map_.hpp>\n+#include <ext/pb_ds/detail/cc_hash_table_map_/cc_ht_map_.hpp>\n+#include <ext/pb_ds/detail/gp_hash_table_map_/gp_ht_map_.hpp>\n #include <ext/pb_ds/detail/pat_trie_/pat_trie_.hpp>\n #undef PB_DS_DATA_FALSE_INDICATOR\n+#undef PB_DS_V2F\n+#undef PB_DS_V2S\n+#undef PB_DS_EP2VP\n \n #undef PB_DS_CHECK_KEY_DOES_NOT_EXIST\n #undef PB_DS_CHECK_KEY_EXISTS\n@@ -124,28 +102,26 @@ namespace __gnu_pbds\n {\n namespace detail\n {\n-  // Primary template.\n-  template<typename Key, typename Mapped, typename Data_Structure_Taq,\n-\t   typename Policy_Tl, typename Alloc>\n-    struct container_base_dispatch;\n-\n-  template<typename Key, typename Mapped, typename Policy_Tl, typename Alloc>\n-    struct container_base_dispatch<Key, Mapped, list_update_tag, \n-\t\t\t\t   Policy_Tl, Alloc>\n+  /// Specialization for list-update map.\n+  template<typename Key, typename Mapped, typename _Alloc, typename Policy_Tl>\n+    struct container_base_dispatch<Key, Mapped, _Alloc, list_update_tag,\n+\t\t\t\t   Policy_Tl>\n     {\n     private:\n       typedef __gnu_cxx::typelist::at_index<Policy_Tl, 0>\tat0;\n       typedef typename at0::type\t\t\t    \tat0t;\n       typedef __gnu_cxx::typelist::at_index<Policy_Tl, 1> \tat1;\n       typedef typename at1::type\t\t\t    \tat1t;\n-      \n+\n     public:\n-      typedef lu_map_data_<Key, Mapped, at0t, Alloc, at1t>\ttype;\n+      /// Dispatched type.\n+      typedef lu_map<Key, Mapped, at0t, _Alloc, at1t>\ttype;\n     };\n \n-  template<typename Key, typename Policy_Tl, typename Alloc>\n-    struct container_base_dispatch<Key, null_mapped_type, list_update_tag,\n-\t\t\t\t   Policy_Tl, Alloc>\n+  /// Specialization for list-update set.\n+  template<typename Key, typename _Alloc, typename Policy_Tl>\n+    struct container_base_dispatch<Key, null_type, _Alloc, list_update_tag,\n+\t\t\t\t   Policy_Tl>\n     {\n     private:\n       typedef __gnu_cxx::typelist::at_index<Policy_Tl, 0>\tat0;\n@@ -154,34 +130,39 @@ namespace detail\n       typedef typename at1::type\t\t\t    \tat1t;\n \n     public:\n-      typedef lu_map_no_data_<Key, null_mapped_type, at0t, Alloc, at1t> type;\n+      /// Dispatched type.\n+      typedef lu_set<Key, null_type, at0t, _Alloc, at1t> type;\n     };\n \n-  template<typename Key, typename Mapped, typename Policy_Tl, typename Alloc>\n-    struct container_base_dispatch<Key, Mapped, pat_trie_tag, Policy_Tl, Alloc>\n+  /// Specialization for PATRICIA trie map.\n+  template<typename Key, typename Mapped, typename _Alloc, typename Policy_Tl>\n+  struct container_base_dispatch<Key, Mapped, _Alloc, pat_trie_tag, Policy_Tl>\n     {\n     private:\n       typedef __gnu_cxx::typelist::at_index<Policy_Tl, 1> \tat1;\n       typedef typename at1::type\t\t\t    \tat1t;\n \n     public:\n-      typedef pat_trie_data_<Key, Mapped, at1t, Alloc> \t\ttype;\n+      typedef pat_trie_map<Key, Mapped, at1t, _Alloc> \t\ttype;\n     };\n \n-  template<typename Key, typename Policy_Tl, typename Alloc>\n-    struct container_base_dispatch<Key, null_mapped_type, pat_trie_tag,\n-\t\t\t\t   Policy_Tl, Alloc>\n+  /// Specialization for PATRICIA trie set.\n+  template<typename Key, typename _Alloc, typename Policy_Tl>\n+    struct container_base_dispatch<Key, null_type, _Alloc, pat_trie_tag,\n+\t\t\t\t   Policy_Tl>\n     {\n     private:\n       typedef __gnu_cxx::typelist::at_index<Policy_Tl, 1> \tat1;\n       typedef typename at1::type\t\t\t    \tat1t;\n \n     public:\n-      typedef pat_trie_no_data_<Key, null_mapped_type, at1t, Alloc> type;\n+      /// Dispatched type.\n+      typedef pat_trie_set<Key, null_type, at1t, _Alloc> type;\n     };\n \n-  template<typename Key, typename Mapped, typename Policy_Tl, typename Alloc>\n-    struct container_base_dispatch<Key, Mapped, rb_tree_tag, Policy_Tl, Alloc>\n+  /// Specialization for R-B tree map.\n+  template<typename Key, typename Mapped, typename _Alloc, typename Policy_Tl>\n+    struct container_base_dispatch<Key, Mapped, _Alloc, rb_tree_tag, Policy_Tl>\n     {\n     private:\n       typedef __gnu_cxx::typelist::at_index<Policy_Tl, 0>\tat0;\n@@ -190,12 +171,14 @@ namespace detail\n       typedef typename at1::type\t\t\t    \tat1t;\n \n     public:\n-      typedef rb_tree_data_<Key, Mapped, at0t, at1t, Alloc> \ttype;\n+      /// Dispatched type.\n+      typedef rb_tree_map<Key, Mapped, at0t, at1t, _Alloc> \ttype;\n     };\n \n-  template<typename Key, typename Policy_Tl, typename Alloc>\n-    struct container_base_dispatch<Key, null_mapped_type, rb_tree_tag,\n-\t\t\t\t   Policy_Tl, Alloc>\n+  /// Specialization for R-B tree set.\n+  template<typename Key, typename _Alloc, typename Policy_Tl>\n+    struct container_base_dispatch<Key, null_type, _Alloc, rb_tree_tag,\n+\t\t\t\t   Policy_Tl>\n     {\n     private:\n       typedef __gnu_cxx::typelist::at_index<Policy_Tl, 0>\tat0;\n@@ -204,12 +187,13 @@ namespace detail\n       typedef typename at1::type\t\t\t    \tat1t;\n \n     public:\n-      typedef rb_tree_no_data_<Key, null_mapped_type, at0t, at1t, Alloc> type;\n+      typedef rb_tree_set<Key, null_type, at0t, at1t, _Alloc> type;\n     };\n \n-  template<typename Key, typename Mapped, typename Policy_Tl, typename Alloc>\n-    struct container_base_dispatch<Key, Mapped, splay_tree_tag, \n-\t\t\t\t   Policy_Tl, Alloc>\n+  /// Specialization splay tree map.\n+  template<typename Key, typename Mapped, typename _Alloc, typename Policy_Tl>\n+  struct container_base_dispatch<Key, Mapped, _Alloc, splay_tree_tag,\n+\t\t\t\t   Policy_Tl>\n     {\n     private:\n       typedef __gnu_cxx::typelist::at_index<Policy_Tl, 0>\tat0;\n@@ -218,12 +202,14 @@ namespace detail\n       typedef typename at1::type\t\t\t    \tat1t;\n \n     public:\n-      typedef splay_tree_data_<Key, Mapped, at0t, at1t, Alloc> \ttype;\n+      /// Dispatched type.\n+      typedef splay_tree_map<Key, Mapped, at0t, at1t, _Alloc> \ttype;\n     };\n \n-  template<typename Key, typename Policy_Tl, typename Alloc>\n-    struct container_base_dispatch<Key, null_mapped_type, splay_tree_tag,\n-\t\t\t\t   Policy_Tl, Alloc>\n+  /// Specialization splay tree set.\n+  template<typename Key, typename _Alloc, typename Policy_Tl>\n+    struct container_base_dispatch<Key, null_type, _Alloc, splay_tree_tag,\n+\t\t\t\t   Policy_Tl>\n     {\n     private:\n       typedef __gnu_cxx::typelist::at_index<Policy_Tl, 0>\tat0;\n@@ -232,11 +218,13 @@ namespace detail\n       typedef typename at1::type\t\t\t    \tat1t;\n \n     public:\n-      typedef splay_tree_no_data_<Key, null_mapped_type, at0t, at1t, Alloc> type;\n+      /// Dispatched type.\n+      typedef splay_tree_set<Key, null_type, at0t, at1t, _Alloc> type;\n   };\n \n-  template<typename Key, typename Mapped, typename Policy_Tl, typename Alloc>\n-    struct container_base_dispatch<Key, Mapped, ov_tree_tag, Policy_Tl, Alloc>\n+    /// Specialization ordered-vector tree map.\n+  template<typename Key, typename Mapped, typename _Alloc, typename Policy_Tl>\n+    struct container_base_dispatch<Key, Mapped, _Alloc, ov_tree_tag, Policy_Tl>\n     {\n     private:\n       typedef __gnu_cxx::typelist::at_index<Policy_Tl, 0>\tat0;\n@@ -245,12 +233,14 @@ namespace detail\n       typedef typename at1::type\t\t\t    \tat1t;\n \n     public:\n-      typedef ov_tree_data_<Key, Mapped, at0t, at1t, Alloc> \ttype;\n+      /// Dispatched type.\n+      typedef ov_tree_map<Key, Mapped, at0t, at1t, _Alloc> \ttype;\n   };\n \n-  template<typename Key, typename Policy_Tl, typename Alloc>\n-    struct container_base_dispatch<Key, null_mapped_type, ov_tree_tag,\n-\t\t\t\t   Policy_Tl, Alloc>\n+    /// Specialization ordered-vector tree set.\n+  template<typename Key, typename _Alloc, typename Policy_Tl>\n+    struct container_base_dispatch<Key, null_type, _Alloc, ov_tree_tag,\n+\t\t\t\t   Policy_Tl>\n     {\n     private:\n       typedef __gnu_cxx::typelist::at_index<Policy_Tl, 0>\tat0;\n@@ -259,11 +249,13 @@ namespace detail\n       typedef typename at1::type\t\t\t    \tat1t;\n \n     public:\n-      typedef ov_tree_no_data_<Key, null_mapped_type, at0t, at1t, Alloc> type;\n+      /// Dispatched type.\n+      typedef ov_tree_set<Key, null_type, at0t, at1t, _Alloc> type;\n   };\n \n-  template<typename Key, typename Mapped, typename Policy_Tl, typename Alloc>\n-    struct container_base_dispatch<Key, Mapped, cc_hash_tag, Policy_Tl, Alloc>\n+    /// Specialization colision-chaining hash map.\n+  template<typename Key, typename Mapped, typename _Alloc, typename Policy_Tl>\n+    struct container_base_dispatch<Key, Mapped, _Alloc, cc_hash_tag, Policy_Tl>\n     {\n     private:\n       typedef __gnu_cxx::typelist::at_index<Policy_Tl, 0>\tat0;\n@@ -278,13 +270,15 @@ namespace detail\n       typedef typename at4::type\t\t\t    \tat4t;\n \n     public:\n-      typedef cc_ht_map_data_<Key, Mapped, at0t, at1t, Alloc, at3t::value, \n-\t\t\t      at4t, at2t> \t\t\ttype;\n+      /// Dispatched type.\n+      typedef cc_ht_map<Key, Mapped, at0t, at1t, _Alloc, \n+\t\t\tat3t::value, at4t, at2t> \t       \ttype;\n   };\n \n-  template<typename Key, typename Policy_Tl, typename Alloc>\n-    struct container_base_dispatch<Key, null_mapped_type, cc_hash_tag, \n-\t\t\t\t   Policy_Tl, Alloc>\n+    /// Specialization colision-chaining hash set.\n+  template<typename Key, typename _Alloc, typename Policy_Tl>\n+    struct container_base_dispatch<Key, null_type, _Alloc, cc_hash_tag,\n+\t\t\t\t   Policy_Tl>\n     {\n     private:\n       typedef __gnu_cxx::typelist::at_index<Policy_Tl, 0>\tat0;\n@@ -299,12 +293,14 @@ namespace detail\n       typedef typename at4::type\t\t\t    \tat4t;\n \n     public:\n-      typedef cc_ht_map_no_data_<Key, null_mapped_type, at0t, at1t, Alloc, \n+      /// Dispatched type.\n+      typedef cc_ht_set<Key, null_type, at0t, at1t, _Alloc,\n \t\t\t\t at3t::value, at4t, at2t>    \ttype;\n   };\n \n-  template<typename Key, typename Mapped, typename Policy_Tl, typename Alloc>\n-    struct container_base_dispatch<Key, Mapped, gp_hash_tag, Policy_Tl, Alloc>\n+    /// Specialization general-probe hash map.\n+  template<typename Key, typename Mapped, typename _Alloc, typename Policy_Tl>\n+    struct container_base_dispatch<Key, Mapped, _Alloc, gp_hash_tag, Policy_Tl>\n     {\n     private:\n       typedef __gnu_cxx::typelist::at_index<Policy_Tl, 0>\tat0;\n@@ -321,13 +317,15 @@ namespace detail\n       typedef typename at5::type\t\t\t    \tat5t;\n \n     public:\n-      typedef gp_ht_map_data_<Key, Mapped, at0t, at1t, Alloc, at3t::value, \n-\t\t\t      at4t, at5t, at2t> \t\ttype;\n+      /// Dispatched type.\n+      typedef gp_ht_map<Key, Mapped, at0t, at1t, _Alloc, \n+\t\t\tat3t::value, at4t, at5t, at2t> \t\ttype;\n   };\n \n-  template<typename Key, typename Policy_Tl, typename Alloc>\n-    struct container_base_dispatch<Key, null_mapped_type, gp_hash_tag,\n-\t\t\t\t   Policy_Tl, Alloc>\n+    /// Specialization general-probe hash set.\n+  template<typename Key, typename _Alloc, typename Policy_Tl>\n+    struct container_base_dispatch<Key, null_type, _Alloc, gp_hash_tag,\n+\t\t\t\t   Policy_Tl>\n     {\n     private:\n       typedef __gnu_cxx::typelist::at_index<Policy_Tl, 0>\tat0;\n@@ -344,10 +342,11 @@ namespace detail\n       typedef typename at5::type\t\t\t    \tat5t;\n \n     public:\n-      typedef gp_ht_map_no_data_<Key, null_mapped_type, at0t, at1t, Alloc,\n-\t\t\t\t at3t::value, at4t, at5t, at2t>\ttype;\n+      /// Dispatched type.\n+      typedef gp_ht_set<Key, null_type, at0t, at1t, _Alloc,\n+\t\t\tat3t::value, at4t, at5t, at2t>\t\ttype;\n   };\n } // namespace detail\n } // namespace __gnu_pbds\n \n-#endif \n+#endif"}, {"sha": "c1709ba452d4a64c1cba7ca9072a150cba0a193f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/debug_map_base.hpp", "status": "modified", "additions": 68, "deletions": 71, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fdebug_map_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fdebug_map_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fdebug_map_base.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -35,7 +35,7 @@\n // warranty.\n \n /**\n- * @file debug_map_base.hpp\n+ * @file detail/debug_map_base.hpp\n  * Contains a debug-mode base for all maps.\n  */\n \n@@ -63,73 +63,69 @@ namespace __gnu_pbds\n     { return (__out << '(' << p.first << ',' << p.second << ')'); }\n \n #define PB_DS_CLASS_T_DEC \\\n-    template<typename Key, class Eq_Fn, typename Const_Key_Reference>\n+    template<typename Key, typename Eq_Fn, typename Const_Key_Reference>\n \n #define PB_DS_CLASS_C_DEC \\\n     debug_map_base<Key, Eq_Fn, Const_Key_Reference>\n \n-    template<typename Key, class Eq_Fn, typename Const_Key_Reference>\n+    /// Debug base class.\n+    template<typename Key, typename Eq_Fn, typename Const_Key_Reference>\n     class debug_map_base\n     {\n     private:\n-      typedef typename std::allocator<Key> \t\tkey_allocator;\n-      typedef typename key_allocator::size_type \tsize_type;\n-      typedef Const_Key_Reference \t\t\tconst_key_reference;\n-      typedef std::_GLIBCXX_STD_C::list<Key> \t\tkey_set;\n-      typedef typename key_set::iterator \t\tkey_set_iterator;\n-      typedef typename key_set::const_iterator \t\tconst_key_set_iterator;\n-      typedef __gnu_cxx::throw_allocator_random<Key>\tkey_db_allocator;\n-      typedef typename key_db_allocator::never_adjustor\tnever_adjustor;\n+      typedef Const_Key_Reference \t\t\tkey_const_reference;\n+      typedef std::_GLIBCXX_STD_C::list<Key> \t\tkey_repository;\n+      typedef typename key_repository::size_type       \tsize_type;\n+      typedef typename key_repository::iterator\t       \titerator;\n+      typedef typename key_repository::const_iterator  \tconst_iterator;\n \n     protected:\n       debug_map_base();\n \n-      debug_map_base(const PB_DS_CLASS_C_DEC& other);\n+      debug_map_base(const PB_DS_CLASS_C_DEC&);\n \n       ~debug_map_base();\n \n       inline void\n-      insert_new(const_key_reference r_key);\n+      insert_new(key_const_reference);\n \n       inline void\n-      erase_existing(const_key_reference r_key);\n+      erase_existing(key_const_reference);\n \n       void\n       clear();\n \n       inline void\n-      check_key_exists(const_key_reference r_key,\n-\t\t       const char* file, int line) const;\n+      check_key_exists(key_const_reference, const char*, int) const;\n \n       inline void\n-      check_key_does_not_exist(const_key_reference r_key,\n-\t\t\t       const char* file, int line) const;\n+      check_key_does_not_exist(key_const_reference, const char*, int) const;\n \n       inline void\n-      check_size(size_type size, const char* file, int line) const;\n+      check_size(size_type, const char*, int) const;\n \n       void\n-      swap(PB_DS_CLASS_C_DEC& other);\n+      swap(PB_DS_CLASS_C_DEC&);\n \n       template<typename Cmp_Fn>\n       void\n-      split(const_key_reference, Cmp_Fn, PB_DS_CLASS_C_DEC&);\n+      split(key_const_reference, Cmp_Fn, PB_DS_CLASS_C_DEC&);\n \n       void\n-      join(PB_DS_CLASS_C_DEC& other, bool with_cleanup = true);\n+      join(PB_DS_CLASS_C_DEC&, bool with_cleanup = true);\n \n     private:\n       void\n-      assert_valid(const char* file, int line) const;\n+      assert_valid(const char*, int) const;\n \n-      const_key_set_iterator\n-      find(const_key_reference r_key) const;\n+      const_iterator\n+      find(key_const_reference) const;\n \n-      key_set_iterator\n-      find(const_key_reference r_key);\n+      iterator\n+      find(key_const_reference);\n \n-      key_set \tm_key_set;\n-      Eq_Fn \tm_eq;\n+      key_repository \tm_keys;\n+      Eq_Fn \t\tm_eq;\n     };\n \n     PB_DS_CLASS_T_DEC\n@@ -139,7 +135,8 @@ namespace __gnu_pbds\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n-    debug_map_base(const PB_DS_CLASS_C_DEC& other) : m_key_set(other.m_key_set)\n+    debug_map_base(const PB_DS_CLASS_C_DEC& other)\n+    : m_keys(other.m_keys), m_eq(other.m_eq)\n     { PB_DS_ASSERT_VALID((*this)) }\n \n     PB_DS_CLASS_T_DEC\n@@ -150,20 +147,19 @@ namespace __gnu_pbds\n     PB_DS_CLASS_T_DEC\n     inline void\n     PB_DS_CLASS_C_DEC::\n-    insert_new(const_key_reference r_key)\n+    insert_new(key_const_reference r_key)\n     {\n       PB_DS_ASSERT_VALID((*this))\n \n-      if (find(r_key) != m_key_set.end())\n+      if (find(r_key) != m_keys.end())\n \t{\n \t  std::cerr << \"insert_new key already present \" << r_key << std::endl;\n-\t  std::abort;\n+\t  std::abort();\n \t}\n \n-      never_adjustor never;\n       __try\n \t{\n-\t  m_key_set.push_back(r_key);\n+\t  m_keys.push_back(r_key);\n \t}\n       __catch(...)\n \t{\n@@ -177,16 +173,16 @@ namespace __gnu_pbds\n     PB_DS_CLASS_T_DEC\n     inline void\n     PB_DS_CLASS_C_DEC::\n-    erase_existing(const_key_reference r_key)\n+    erase_existing(key_const_reference r_key)\n     {\n       PB_DS_ASSERT_VALID((*this))\n-      key_set_iterator it = find(r_key);\n-      if (it == m_key_set.end())\n+      iterator it = find(r_key);\n+      if (it == m_keys.end())\n \t{\n \t  std::cerr << \"erase_existing\" << r_key << std::endl;\n \t  std::abort();\n \t}\n-      m_key_set.erase(it);\n+      m_keys.erase(it);\n       PB_DS_ASSERT_VALID((*this))\n     }\n \n@@ -196,18 +192,18 @@ namespace __gnu_pbds\n     clear()\n     {\n       PB_DS_ASSERT_VALID((*this))\n-      m_key_set.clear();\n+      m_keys.clear();\n       PB_DS_ASSERT_VALID((*this))\n     }\n \n     PB_DS_CLASS_T_DEC\n     inline void\n     PB_DS_CLASS_C_DEC::\n-    check_key_exists(const_key_reference r_key,\n+    check_key_exists(key_const_reference r_key,\n \t\t     const char* __file, int __line) const\n     {\n       assert_valid(__file, __line);\n-      if (find(r_key) == m_key_set.end())\n+      if (find(r_key) == m_keys.end())\n \t{\n \t  std::cerr << __file << ':' << __line << \": check_key_exists \"\n \t\t    << r_key << std::endl;\n@@ -218,11 +214,11 @@ namespace __gnu_pbds\n     PB_DS_CLASS_T_DEC\n     inline void\n     PB_DS_CLASS_C_DEC::\n-    check_key_does_not_exist(const_key_reference r_key,\n+    check_key_does_not_exist(key_const_reference r_key,\n \t\t\t     const char* __file, int __line) const\n     {\n       assert_valid(__file, __line);\n-      if (find(r_key) != m_key_set.end())\n+      if (find(r_key) != m_keys.end())\n \t{\n \t  using std::cerr;\n \t  using std::endl;\n@@ -238,11 +234,11 @@ namespace __gnu_pbds\n     check_size(size_type size, const char* __file, int __line) const\n     {\n       assert_valid(__file, __line);\n-      const size_type key_set_size = m_key_set.size();\n-      if (size != key_set_size)\n+      const size_type keys_size = m_keys.size();\n+      if (size != keys_size)\n \t{\n-\t  std::cerr << __file << ':' << __line << \": check_size \" << size\n-\t\t    << \" != \" << key_set_size << std::endl;\n+\t  std::cerr << __file << ':' << __line << \": check_size \"\n+\t\t    << size << \" != \" << keys_size << std::endl;\n \t  std::abort();\n \t}\n      }\n@@ -253,31 +249,32 @@ namespace __gnu_pbds\n     swap(PB_DS_CLASS_C_DEC& other)\n     {\n       PB_DS_ASSERT_VALID((*this))\n-      m_key_set.swap(other.m_key_set);\n+      m_keys.swap(other.m_keys);\n+      std::swap(m_eq, other.m_eq);\n       PB_DS_ASSERT_VALID((*this))\n     }\n \n     PB_DS_CLASS_T_DEC\n-    typename PB_DS_CLASS_C_DEC::const_key_set_iterator\n+    typename PB_DS_CLASS_C_DEC::const_iterator\n     PB_DS_CLASS_C_DEC::\n-    find(const_key_reference r_key) const\n+    find(key_const_reference r_key) const\n     {\n       PB_DS_ASSERT_VALID((*this))\n-      typedef const_key_set_iterator iterator_type;\n-      for (iterator_type it = m_key_set.begin(); it != m_key_set.end(); ++it)\n+      typedef const_iterator iterator_type;\n+      for (iterator_type it = m_keys.begin(); it != m_keys.end(); ++it)\n \tif (m_eq(*it, r_key))\n \t  return it;\n-      return m_key_set.end();\n+      return m_keys.end();\n     }\n \n     PB_DS_CLASS_T_DEC\n-    typename PB_DS_CLASS_C_DEC::key_set_iterator\n+    typename PB_DS_CLASS_C_DEC::iterator\n     PB_DS_CLASS_C_DEC::\n-    find(const_key_reference r_key)\n+    find(key_const_reference r_key)\n     {\n       PB_DS_ASSERT_VALID((*this))\n-      key_set_iterator it = m_key_set.begin();\n-      while (it != m_key_set.end())\n+      iterator it = m_keys.begin();\n+      while (it != m_keys.end())\n \t{\n \t  if (m_eq(*it, r_key))\n \t    return it;\n@@ -291,12 +288,12 @@ namespace __gnu_pbds\n     PB_DS_CLASS_C_DEC::\n     assert_valid(const char* __file, int __line) const\n     {\n-      const_key_set_iterator prime_it = m_key_set.begin();\n-      while (prime_it != m_key_set.end())\n+      const_iterator prime_it = m_keys.begin();\n+      while (prime_it != m_keys.end())\n \t{\n-\t  const_key_set_iterator sec_it = prime_it;\n+\t  const_iterator sec_it = prime_it;\n \t  ++sec_it;\n-\t  while (sec_it != m_key_set.end())\n+\t  while (sec_it != m_keys.end())\n \t    {\n \t      PB_DS_DEBUG_VERIFY(!m_eq(*sec_it, *prime_it));\n \t      PB_DS_DEBUG_VERIFY(!m_eq(*prime_it, *sec_it));\n@@ -310,15 +307,15 @@ namespace __gnu_pbds\n     template<typename Cmp_Fn>\n     void\n     PB_DS_CLASS_C_DEC::\n-    split(const_key_reference r_key, Cmp_Fn cmp_fn, PB_DS_CLASS_C_DEC& other)\n+    split(key_const_reference r_key, Cmp_Fn cmp_fn, PB_DS_CLASS_C_DEC& other)\n     {\n       other.clear();\n-      key_set_iterator it = m_key_set.begin();\n-      while (it != m_key_set.end())\n-\tif (cmp_fn(r_key, * it))\n+      iterator it = m_keys.begin();\n+      while (it != m_keys.end())\n+\tif (cmp_fn(r_key, *it))\n \t  {\n \t    other.insert_new(*it);\n-\t    it = m_key_set.erase(it);\n+\t    it = m_keys.erase(it);\n \t  }\n \telse\n \t  ++it;\n@@ -329,16 +326,16 @@ namespace __gnu_pbds\n     PB_DS_CLASS_C_DEC::\n     join(PB_DS_CLASS_C_DEC& other, bool with_cleanup)\n     {\n-      key_set_iterator it = other.m_key_set.begin();\n-      while (it != other.m_key_set.end())\n+      iterator it = other.m_keys.begin();\n+      while (it != other.m_keys.end())\n \t{\n \t  insert_new(*it);\n \t  if (with_cleanup)\n-\t    it = other.m_key_set.erase(it);\n+\t    it = other.m_keys.erase(it);\n \t  else\n \t    ++it;\n \t}\n-      _GLIBCXX_DEBUG_ASSERT(!with_cleanup || other.m_key_set.empty());\n+      _GLIBCXX_DEBUG_ASSERT(!with_cleanup || other.m_keys.empty());\n     }\n \n #undef PB_DS_CLASS_T_DEC"}, {"sha": "389bdcdb637b24dc212c04c0c8bc12008e2592e6", "filename": "libstdc++-v3/include/ext/pb_ds/detail/eq_fn/eq_by_less.hpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Feq_fn%2Feq_by_less.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Feq_fn%2Feq_by_less.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Feq_fn%2Feq_by_less.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -51,6 +51,7 @@ namespace __gnu_pbds\n {\n   namespace detail\n   {\n+    /// Equivalence function.\n     template<typename Key, class Cmp_Fn>\n     struct eq_by_less : private Cmp_Fn\n     {"}, {"sha": "6255d55eb0e73460f3533eb0f14863cef849a716", "filename": "libstdc++-v3/include/ext/pb_ds/detail/eq_fn/hash_eq_fn.hpp", "status": "modified", "additions": 41, "deletions": 111, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Feq_fn%2Fhash_eq_fn.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Feq_fn%2Fhash_eq_fn.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Feq_fn%2Fhash_eq_fn.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -36,7 +36,7 @@\n /**\n  * @file hash_eq_fn.hpp\n  * Contains 2 eqivalence functions, one employing a hash value,\n- *    and one ignoring it.\n+ * and one ignoring it.\n  */\n \n #ifndef PB_DS_HASH_EQ_FN_HPP\n@@ -49,130 +49,60 @@ namespace __gnu_pbds\n {\n   namespace detail\n   {\n-    template<typename Key, class Eq_Fn, class Allocator, bool Store_Hash>\n-    struct hash_eq_fn;\n+    template<typename Key, typename Eq_Fn, typename _Alloc, bool Store_Hash>\n+      struct hash_eq_fn;\n \n-#define PB_DS_CLASS_T_DEC \\\n-    template<typename Key, class Eq_Fn, class Allocator>\n-\n-#define PB_DS_CLASS_C_DEC \\\n-    hash_eq_fn<Key, Eq_Fn, Allocator, false>\n-\n-    /**\n-     * Specialization 1- The client requests that hash values not be stored.\n-     **/\n-    template<typename Key, class Eq_Fn, class Allocator>\n-    struct hash_eq_fn<Key, Eq_Fn, Allocator, false> : public Eq_Fn\n+    /// Specialization 1 - The client requests that hash values not be stored.\n+    template<typename Key, typename Eq_Fn, typename _Alloc>\n+    struct hash_eq_fn<Key, Eq_Fn, _Alloc, false> : public Eq_Fn\n     {\n-      typedef Eq_Fn eq_fn_base;\n-\n-      typedef typename Allocator::template rebind<Key>::other key_allocator;\n-\n-      typedef typename key_allocator::const_reference const_key_reference;\n+      typedef Eq_Fn \t\t\t\t\t   eq_fn_base;\n+      typedef typename _Alloc::template rebind<Key>::other key_allocator;\n+      typedef typename key_allocator::const_reference \t   key_const_reference;\n \n-      hash_eq_fn();\n+      hash_eq_fn() { }\n \n-      hash_eq_fn(const Eq_Fn& r_eq_fn);\n+      hash_eq_fn(const Eq_Fn& r_eq_fn) : Eq_Fn(r_eq_fn) { }\n \n-      inline bool\n-      operator()(const_key_reference r_lhs_key, const_key_reference r_rhs_key) const;\n+      bool\n+      operator()(key_const_reference r_lhs_key, \n+\t\t key_const_reference r_rhs_key) const\n+      { return eq_fn_base::operator()(r_lhs_key, r_rhs_key); }\n \n-      inline void\n-      swap(const PB_DS_CLASS_C_DEC& other);\n+      void\n+      swap(const hash_eq_fn& other)\n+      { std::swap((Eq_Fn&)(*this), (Eq_Fn&)other); }\n     };\n \n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    hash_eq_fn()\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n-    inline void\n-    PB_DS_CLASS_C_DEC::\n-    swap(const PB_DS_CLASS_C_DEC& other)\n-    { std::swap((Eq_Fn& )(*this), (Eq_Fn& )other); }\n-\n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    hash_eq_fn(const Eq_Fn& r_eq_fn) :\n-      Eq_Fn(r_eq_fn)\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n-    inline bool\n-    PB_DS_CLASS_C_DEC::\n-    operator()(const_key_reference r_lhs_key, const_key_reference r_rhs_key) const\n-    { return (eq_fn_base::operator()(r_lhs_key, r_rhs_key)); }\n-\n-#undef PB_DS_CLASS_T_DEC\n-#undef PB_DS_CLASS_C_DEC\n-\n-#define PB_DS_CLASS_T_DEC \\\n-    template<typename Key, class Eq_Fn, class Allocator>\n-\n-#define PB_DS_CLASS_C_DEC \\\n-    hash_eq_fn<Key, Eq_Fn, Allocator, true>\n-\n-    /**\n-     * Specialization 2- The client requests that hash values be stored.\n-     **/\n-    template<typename Key, class Eq_Fn, class Allocator>\n-    struct hash_eq_fn<Key, Eq_Fn, Allocator, true> :\n-      public Eq_Fn\n-    {\n-      typedef typename Allocator::size_type size_type;\n-\n-      typedef Eq_Fn eq_fn_base;\n \n-      typedef typename Allocator::template rebind<Key>::other key_allocator;\n+    /// Specialization 2 - The client requests that hash values be stored.\n+    template<typename Key, class Eq_Fn, class _Alloc>\n+    struct hash_eq_fn<Key, Eq_Fn, _Alloc, true> : public Eq_Fn\n+    {\n+      typedef typename _Alloc::size_type \t\t   size_type;\n+      typedef Eq_Fn \t\t\t\t\t   eq_fn_base;\n+      typedef typename _Alloc::template rebind<Key>::other key_allocator;\n+      typedef typename key_allocator::const_reference \t   key_const_reference;\n \n-      typedef typename key_allocator::const_reference const_key_reference;\n+      hash_eq_fn() { }\n \n-      hash_eq_fn();\n+      hash_eq_fn(const Eq_Fn& r_eq_fn) : Eq_Fn(r_eq_fn) { }\n \n-      hash_eq_fn(const Eq_Fn& r_eq_fn);\n+      bool\n+      operator()(key_const_reference r_lhs_key, size_type lhs_hash, \n+\t\t key_const_reference r_rhs_key, size_type rhs_hash) const\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(!eq_fn_base::operator()(r_lhs_key, r_rhs_key) \n+\t\t\t      || lhs_hash == rhs_hash);\n \n-      inline bool\n-      operator()(const_key_reference r_lhs_key, size_type lhs_hash, \n-\t\t const_key_reference r_rhs_key, size_type rhs_hash) const;\n+\treturn (lhs_hash == rhs_hash && \n+\t\teq_fn_base::operator()(r_lhs_key, r_rhs_key));\n+      }\n \n-      inline void\n-      swap(const PB_DS_CLASS_C_DEC& other);\n+      void\n+      swap(const hash_eq_fn& other)\n+      { std::swap((Eq_Fn&)(*this), (Eq_Fn&)(other)); }\n     };\n-\n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    hash_eq_fn()\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    hash_eq_fn(const Eq_Fn& r_eq_fn) :\n-      Eq_Fn(r_eq_fn)\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n-    inline bool\n-    PB_DS_CLASS_C_DEC::\n-    operator()(const_key_reference r_lhs_key, size_type lhs_hash, \n-\t       const_key_reference r_rhs_key, size_type rhs_hash) const\n-    {\n-      _GLIBCXX_DEBUG_ASSERT(!eq_fn_base::operator()(r_lhs_key, r_rhs_key) \n-\t\t            || lhs_hash == rhs_hash);\n-\n-      return (lhs_hash == rhs_hash && \n-\t      eq_fn_base::operator()(r_lhs_key, r_rhs_key));\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    inline void\n-    PB_DS_CLASS_C_DEC::\n-    swap(const PB_DS_CLASS_C_DEC& other)\n-    { std::swap((Eq_Fn& )(*this), (Eq_Fn& )(other)); }\n-\n-#undef PB_DS_CLASS_T_DEC\n-#undef PB_DS_CLASS_C_DEC\n-\n   } // namespace detail\n } // namespace __gnu_pbds\n "}, {"sha": "8a51541b528b34bfe7a15db4070bf5666b6412d7", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/constructor_destructor_fn_imps.hpp", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -35,9 +35,9 @@\n // warranty.\n \n /**\n- * @file constructor_destructor_fn_imps.hpp\n+ * @file gp_hash_table_map_/constructor_destructor_fn_imps.hpp\n  * Contains implementations of gp_ht_map_'s constructors, destructor,\n- *    and related functions.\n+ * and related functions.\n  */\n \n PB_DS_CLASS_T_DEC\n@@ -56,7 +56,7 @@ copy_from_range(It first_it, It last_it)\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME() \n+PB_DS_GP_HASH_NAME() \n : ranged_probe_fn_base(resize_base::get_nearest_larger_size(1)),\n   m_num_e(resize_base::get_nearest_larger_size(1)), m_num_used_e(0),\n   m_entries(s_entry_allocator.allocate(m_num_e))\n@@ -67,7 +67,7 @@ PB_DS_CLASS_NAME()\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn)    \n+PB_DS_GP_HASH_NAME(const Hash_Fn& r_hash_fn)    \n : ranged_probe_fn_base(resize_base::get_nearest_larger_size(1), r_hash_fn),\n   m_num_e(resize_base::get_nearest_larger_size(1)), m_num_used_e(0),\n   m_entries(s_entry_allocator.allocate(m_num_e))\n@@ -78,7 +78,7 @@ PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn)\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn) \n+PB_DS_GP_HASH_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn) \n : hash_eq_fn_base(r_eq_fn),\n   ranged_probe_fn_base(resize_base::get_nearest_larger_size(1), r_hash_fn),\n   m_num_e(resize_base::get_nearest_larger_size(1)), m_num_used_e(0),\n@@ -90,7 +90,7 @@ PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn)\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, \n+PB_DS_GP_HASH_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, \n \t\t const Comb_Probe_Fn& r_comb_hash_fn) \n : hash_eq_fn_base(r_eq_fn),\n   ranged_probe_fn_base(resize_base::get_nearest_larger_size(1),\n@@ -104,7 +104,7 @@ PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn,\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, \n+PB_DS_GP_HASH_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, \n \t\t const Comb_Probe_Fn& comb_hash_fn, const Probe_Fn& prober) \n : hash_eq_fn_base(r_eq_fn),\n   ranged_probe_fn_base(resize_base::get_nearest_larger_size(1),\n@@ -118,7 +118,7 @@ PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn,\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, \n+PB_DS_GP_HASH_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, \n \t\t const Comb_Probe_Fn& comb_hash_fn, const Probe_Fn& prober, \n \t\t const Resize_Policy& r_resize_policy) \n : hash_eq_fn_base(r_eq_fn), resize_base(r_resize_policy),\n@@ -133,7 +133,7 @@ PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn,\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n+PB_DS_GP_HASH_NAME(const PB_DS_CLASS_C_DEC& other) :\n #ifdef _GLIBCXX_DEBUG\n   debug_base(other),\n #endif \n@@ -166,7 +166,7 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-~PB_DS_CLASS_NAME()\n+~PB_DS_GP_HASH_NAME()\n { deallocate_all(); }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "d077cbf3cea75d5819dd59ced9186d5341e8e17b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/constructor_destructor_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,15 +34,15 @@\n // warranty.\n \n /**\n- * @file constructor_destructor_no_store_hash_fn_imps.hpp\n+ * @file gp_hash_table_map_/constructor_destructor_no_store_hash_fn_imps.hpp\n  * Contains implementations of gp_ht_map_'s constructors, destructor,\n  *    and related functions.\n  */\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n-constructor_insert_new_imp(const_mapped_reference r_val, size_type pos, \n+constructor_insert_new_imp(mapped_const_reference r_val, size_type pos, \n \t\t\t   false_type)\n {\n   _GLIBCXX_DEBUG_ASSERT(m_entries[pos].m_stat != valid_entry_status)k;"}, {"sha": "ff83c20b8f53d8d584141dddd6c8ac3ad7bcf5cf", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/constructor_destructor_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,15 +34,15 @@\n // warranty.\n \n /**\n- * @file constructor_destructor_store_hash_fn_imps.hpp\n+ * @file gp_hash_table_map_/constructor_destructor_store_hash_fn_imps.hpp\n  * Contains implementations of gp_ht_map_'s constructors, destructor,\n  * and related functions.\n  */\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n-constructor_insert_new_imp(const_mapped_reference r_val, size_type pos, \n+constructor_insert_new_imp(mapped_const_reference r_val, size_type pos, \n \t\t\t   true_type)\n {\n   _GLIBCXX_DEBUG_ASSERT(m_entries[pos].m_stat != valid_entry_status);"}, {"sha": "cad9a733be937bb2eaf56dbb47009ab45761e07c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/debug_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file debug_fn_imps.hpp\n+ * @file gp_hash_table_map_/debug_fn_imps.hpp\n  * Contains implementations of gp_ht_map_'s debug-mode functions.\n  */\n "}, {"sha": "ff9bdae14a09d473cec3b849661b8df6300f5c81", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/debug_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file debug_no_store_hash_fn_imps.hpp\n+ * @file gp_hash_table_map_/debug_no_store_hash_fn_imps.hpp\n  * Contains implementations of gp_ht_map_'s debug-mode functions.\n  */\n \n@@ -57,7 +57,7 @@ assert_entry_array_valid(const entry_array a_entries, false_type,\n \t  break;\n         case valid_entry_status:\n \t  {\n-\t    const_key_reference r_key = PB_DS_V2F(p_e->m_value);\n+\t    key_const_reference r_key = PB_DS_V2F(p_e->m_value);\n \t    debug_base::check_key_exists(r_key, __file, __line);\n \t    ++iterated_num_used_e;\n \t    break;"}, {"sha": "488b6b9236cbaae1751b2526701ab3b1915c1d68", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/debug_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_store_hash_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file debug_store_hash_fn_imps.hpp\n+ * @file gp_hash_table_map_/debug_store_hash_fn_imps.hpp\n  * Contains implementations of gp_ht_map_'s debug-mode functions.\n  */\n \n@@ -58,7 +58,7 @@ assert_entry_array_valid(const entry_array a_entries, true_type,\n \t  break;\n         case valid_entry_status:\n \t  {\n-\t    const_key_reference r_key = PB_DS_V2F(p_e->m_value);\n+\t    key_const_reference r_key = PB_DS_V2F(p_e->m_value);\n \t    debug_base::check_key_exists(r_key, __file, __line);\n \n \t    const comp_hash pos_hash_pair = ranged_probe_fn_base::operator()(r_key);"}, {"sha": "0e6227bc7cf9c0a76200fb43511fc098de439ebd", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/erase_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file erase_fn_imps.hpp\n+ * @file gp_hash_table_map_/erase_fn_imps.hpp\n  * Contains implementations of gp_ht_map_'s erase related functions.\n  */\n \n@@ -93,7 +93,7 @@ erase_if(Pred pred)\n PB_DS_CLASS_T_DEC\n inline bool\n PB_DS_CLASS_C_DEC::\n-erase(const_key_reference r_key)\n+erase(key_const_reference r_key)\n { return erase_imp(r_key, traits_base::m_store_extra_indicator); }\n \n #include <ext/pb_ds/detail/gp_hash_table_map_/erase_no_store_hash_fn_imps.hpp>"}, {"sha": "d95b9a72b4634340a6cddcd7a48bbf4dd767b7be", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/erase_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,15 +34,15 @@\n // warranty.\n \n /**\n- * @file erase_no_store_hash_fn_imps.hpp\n+ * @file gp_hash_table_map_/erase_no_store_hash_fn_imps.hpp\n  * Contains implementations of gp_ht_map_'s erase related functions,\n  * when the hash value is not stored.\n  */\n \n PB_DS_CLASS_T_DEC\n inline bool\n PB_DS_CLASS_C_DEC::\n-erase_imp(const_key_reference r_key,  false_type)\n+erase_imp(key_const_reference r_key,  false_type)\n {\n   PB_DS_ASSERT_VALID((*this))\n   size_type hash = ranged_probe_fn_base::operator()(r_key);"}, {"sha": "9ccad4f94b7af95b48aa8b77db9f94289dc42265", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/erase_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_store_hash_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,15 +34,15 @@\n // warranty.\n \n /**\n- * @file erase_store_hash_fn_imps.hpp\n+ * @file gp_hash_table_map_/erase_store_hash_fn_imps.hpp\n  * Contains implementations of gp_ht_map_'s erase related functions,\n  * when the hash value is stored.\n  */\n \n PB_DS_CLASS_T_DEC\n inline bool\n PB_DS_CLASS_C_DEC::\n-erase_imp(const_key_reference r_key, true_type)\n+erase_imp(key_const_reference r_key, true_type)\n {\n   const comp_hash pos_hash_pair = ranged_probe_fn_base::operator()(r_key);\n   size_type i;"}, {"sha": "e6e9c5f0da9b937d09a4ad5f7eff2939eb25fd2c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/find_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ffind_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,23 +34,23 @@\n // warranty.\n \n /**\n- * @file find_fn_imps.hpp\n+ * @file gp_hash_table_map_/find_fn_imps.hpp\n  * Contains implementations of gp_ht_map_'s find related functions.\n  */\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n-find(const_key_reference r_key)\n+find(key_const_reference r_key)\n {\n   PB_DS_ASSERT_VALID((*this))\n   return find_key_pointer(r_key, traits_base::m_store_extra_indicator);\n }\n \n PB_DS_CLASS_T_DEC\n-inline typename PB_DS_CLASS_C_DEC::const_point_iterator\n+inline typename PB_DS_CLASS_C_DEC::point_const_iterator\n PB_DS_CLASS_C_DEC::\n-find(const_key_reference r_key) const\n+find(key_const_reference r_key) const\n {\n   PB_DS_ASSERT_VALID((*this))\n   return const_cast<PB_DS_CLASS_C_DEC&>(*this).find_key_pointer(r_key, traits_base::m_store_extra_indicator);\n@@ -63,7 +63,7 @@ find_end()\n { return 0; }\n \n PB_DS_CLASS_T_DEC\n-inline typename PB_DS_CLASS_C_DEC::const_point_iterator\n+inline typename PB_DS_CLASS_C_DEC::point_const_iterator\n PB_DS_CLASS_C_DEC::\n find_end() const\n { return 0; }"}, {"sha": "2af9781b5e3de73a2f89ac164eb35077c32e09b9", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/find_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ffind_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ffind_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ffind_no_store_hash_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,13 +34,13 @@\n // warranty.\n \n /**\n- * @file find_no_store_hash_fn_imps.hpp\n+ * @file gp_hash_table_map_/find_no_store_hash_fn_imps.hpp\n  * Contains implementations of gp_ht_map_'s find related functions,\n  * when the hash value is not stored.\n  */\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::pointer\n PB_DS_CLASS_C_DEC::\n-find_key_pointer(const_key_reference r_key, false_type)\n+find_key_pointer(key_const_reference r_key, false_type)\n "}, {"sha": "80c7788c70fd3e248bd3fa913f2d3ad69a9ed9d5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/find_store_hash_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ffind_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ffind_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ffind_store_hash_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file find_store_hash_fn_imps.hpp\n+ * @file gp_hash_table_map_/find_store_hash_fn_imps.hpp\n  * Contains implementations of gp_ht_map_'s insert related functions,\n  * when the hash value is stored.\n  */"}, {"sha": "4ce94aefecdac63311ba31cb2991d64df0e63fdd", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/gp_ht_map_.hpp", "status": "modified", "additions": 122, "deletions": 137, "changes": 259, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -35,8 +35,8 @@\n // warranty.\n \n /**\n- * @file gp_ht_map_.hpp\n- * Contains an implementation class for gp_ht_map_.\n+ * @file gp_hash_table_map_/gp_ht_map_.hpp\n+ * Contains an implementation class for general probing hash.\n  */\n \n #include <ext/pb_ds/tag_and_trait.hpp>\n@@ -47,7 +47,7 @@\n #include <utility>\n #ifdef PB_DS_HT_MAP_TRACE_\n #include <iostream>\n-#endif \n+#endif\n #ifdef _GLIBCXX_DEBUG\n #include <ext/pb_ds/detail/debug_map_base.hpp>\n #endif\n@@ -57,73 +57,66 @@ namespace __gnu_pbds\n {\n   namespace detail\n   {\n-#define PB_DS_CLASS_T_DEC \\\n-    template<typename Key, typename Mapped, typename Hash_Fn, typename Eq_Fn, \\\n-\t     typename Allocator, bool Store_Hash, typename Comb_Probe_Fn, \\\n-\t     typename Probe_Fn,\ttypename Resize_Policy>\n-\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-#define PB_DS_CLASS_NAME gp_ht_map_data_\n+#define PB_DS_GP_HASH_NAME gp_ht_map\n #endif\n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n-#define PB_DS_CLASS_NAME gp_ht_map_no_data_\n-#endif \n+#define PB_DS_GP_HASH_NAME gp_ht_set\n+#endif\n+\n+#define PB_DS_CLASS_T_DEC \\\n+   template<typename Key, typename Mapped, typename Hash_Fn, typename Eq_Fn, \\\n+\t    typename _Alloc, bool Store_Hash, typename Comb_Probe_Fn, \\\n+\t    typename Probe_Fn,\ttypename Resize_Policy>\n \n #define PB_DS_CLASS_C_DEC \\\n-    PB_DS_CLASS_NAME<Key, Mapped, Hash_Fn, Eq_Fn, Allocator,\t\\\n-\t\t     Store_Hash, Comb_Probe_Fn, Probe_Fn, Resize_Policy>\n+   PB_DS_GP_HASH_NAME<Key, Mapped, Hash_Fn, Eq_Fn, _Alloc, \\\n+\t\t    Store_Hash, Comb_Probe_Fn, Probe_Fn, Resize_Policy>\n \n #define PB_DS_HASH_EQ_FN_C_DEC \\\n-    hash_eq_fn<Key, Eq_Fn, Allocator, Store_Hash>\n+    hash_eq_fn<Key, Eq_Fn, _Alloc, Store_Hash>\n \n #define PB_DS_RANGED_PROBE_FN_C_DEC \\\n-    ranged_probe_fn<Key, Hash_Fn, Allocator, Comb_Probe_Fn, Probe_Fn, Store_Hash>\n+   ranged_probe_fn<Key, Hash_Fn, _Alloc, Comb_Probe_Fn, Probe_Fn, Store_Hash>\n \n-#define PB_DS_TYPES_TRAITS_C_DEC \\\n-    types_traits<Key, Mapped, Allocator, Store_Hash>\n+#define PB_DS_GP_HASH_TRAITS_BASE \\\n+   types_traits<Key, Mapped, _Alloc, Store_Hash>\n \n #ifdef _GLIBCXX_DEBUG\n #define PB_DS_DEBUG_MAP_BASE_C_DEC \\\n-    debug_map_base<Key, Eq_Fn, typename Allocator::template rebind<Key>::other::const_reference>\n-#endif \n-\n-#ifdef PB_DS_DATA_TRUE_INDICATOR\n-#define PB_DS_V2F(X) (X).first\n-#define PB_DS_V2S(X) (X).second\n-#endif \n-\n-#ifdef PB_DS_DATA_FALSE_INDICATOR\n-#define PB_DS_V2F(X) (X)\n-#define PB_DS_V2S(X) Mapped()\n+   debug_map_base<Key, Eq_Fn, \\\n+\t\t  typename _Alloc::template rebind<Key>::other::const_reference>\n #endif\n \n+\n+    /// General probing hash.\n     template<typename Key,\n \t     typename Mapped,\n \t     typename Hash_Fn,\n \t     typename Eq_Fn,\n-\t     typename Allocator,\n+\t     typename _Alloc,\n \t     bool Store_Hash,\n \t     typename Comb_Probe_Fn,\n \t     typename Probe_Fn,\n \t     typename Resize_Policy>\n-    class PB_DS_CLASS_NAME :\n+    class PB_DS_GP_HASH_NAME :\n #ifdef _GLIBCXX_DEBUG\n       protected PB_DS_DEBUG_MAP_BASE_C_DEC,\n-#endif \n+#endif\n       public PB_DS_HASH_EQ_FN_C_DEC,\n       public Resize_Policy,\n       public PB_DS_RANGED_PROBE_FN_C_DEC,\n-      public PB_DS_TYPES_TRAITS_C_DEC\n+      public PB_DS_GP_HASH_TRAITS_BASE\n     {\n     private:\n-      typedef PB_DS_TYPES_TRAITS_C_DEC traits_base;\n-      typedef typename traits_base::value_type value_type_;\n-      typedef typename traits_base::pointer pointer_;\n+      typedef PB_DS_GP_HASH_TRAITS_BASE\t       \ttraits_base;\n+      typedef typename traits_base::value_type \tvalue_type_;\n+      typedef typename traits_base::pointer \tpointer_;\n       typedef typename traits_base::const_pointer const_pointer_;\n-      typedef typename traits_base::reference reference_;\n+      typedef typename traits_base::reference \treference_;\n       typedef typename traits_base::const_reference const_reference_;\n-      typedef typename traits_base::comp_hash comp_hash;\n+      typedef typename traits_base::comp_hash\tcomp_hash;\n \n       enum entry_status\n \t{\n@@ -132,112 +125,112 @@ namespace __gnu_pbds\n \t  erased_entry_status\n \t} __attribute__ ((packed));\n \n-      struct entry : public traits_base::stored_value_type\n+      struct entry : public traits_base::stored_data_type\n       {\n \tentry_status m_stat;\n       };\n \n-      typedef typename Allocator::template rebind<entry>::other entry_allocator;\n+      typedef typename _Alloc::template rebind<entry>::other entry_allocator;\n       typedef typename entry_allocator::pointer entry_pointer;\n       typedef typename entry_allocator::const_pointer const_entry_pointer;\n       typedef typename entry_allocator::reference entry_reference;\n       typedef typename entry_allocator::const_reference const_entry_reference;\n       typedef typename entry_allocator::pointer entry_array;\n \n-      typedef PB_DS_RANGED_PROBE_FN_C_DEC ranged_probe_fn_base;\n+      typedef PB_DS_RANGED_PROBE_FN_C_DEC \tranged_probe_fn_base;\n \n #ifdef _GLIBCXX_DEBUG\n-      typedef PB_DS_DEBUG_MAP_BASE_C_DEC debug_base;\n-#endif \n+      typedef PB_DS_DEBUG_MAP_BASE_C_DEC \tdebug_base;\n+#endif\n \n-      typedef PB_DS_HASH_EQ_FN_C_DEC hash_eq_fn_base;\n-      typedef Resize_Policy resize_base;\n+      typedef PB_DS_HASH_EQ_FN_C_DEC \t\thash_eq_fn_base;\n+      typedef Resize_Policy \t\t\tresize_base;\n \n-#define PB_DS_GEN_POS typename Allocator::size_type\n+#define PB_DS_GEN_POS typename _Alloc::size_type\n \n-#include <ext/pb_ds/detail/unordered_iterator/const_point_iterator.hpp>\n+#include <ext/pb_ds/detail/unordered_iterator/point_const_iterator.hpp>\n #include <ext/pb_ds/detail/unordered_iterator/point_iterator.hpp>\n #include <ext/pb_ds/detail/unordered_iterator/const_iterator.hpp>\n #include <ext/pb_ds/detail/unordered_iterator/iterator.hpp>\n \n #undef PB_DS_GEN_POS\n \n     public:\n-      typedef Allocator allocator_type;\n-      typedef typename Allocator::size_type size_type;\n-      typedef typename Allocator::difference_type difference_type;\n-      typedef Hash_Fn hash_fn;\n-      typedef Eq_Fn eq_fn;\n-      typedef Probe_Fn probe_fn;\n-      typedef Comb_Probe_Fn comb_probe_fn;\n-      typedef Resize_Policy resize_policy;\n+      typedef _Alloc \t\t\t\tallocator_type;\n+      typedef typename _Alloc::size_type \tsize_type;\n+      typedef typename _Alloc::difference_type \tdifference_type;\n+      typedef Hash_Fn \t\t\t\thash_fn;\n+      typedef Eq_Fn \t\t\t\teq_fn;\n+      typedef Probe_Fn \t\t\t\tprobe_fn;\n+      typedef Comb_Probe_Fn \t\t\tcomb_probe_fn;\n+      typedef Resize_Policy \t\t\tresize_policy;\n \n       enum\n \t{\n \t  store_hash = Store_Hash\n \t};\n \n-      typedef typename traits_base::key_type key_type;\n+      typedef typename traits_base::key_type \tkey_type;\n       typedef typename traits_base::key_pointer key_pointer;\n-      typedef typename traits_base::const_key_pointer const_key_pointer;\n+      typedef typename traits_base::key_const_pointer key_const_pointer;\n       typedef typename traits_base::key_reference key_reference;\n-      typedef typename traits_base::const_key_reference const_key_reference;\n+      typedef typename traits_base::key_const_reference key_const_reference;\n       typedef typename traits_base::mapped_type mapped_type;\n       typedef typename traits_base::mapped_pointer mapped_pointer;\n-      typedef typename traits_base::const_mapped_pointer const_mapped_pointer;\n+      typedef typename traits_base::mapped_const_pointer mapped_const_pointer;\n       typedef typename traits_base::mapped_reference mapped_reference;\n-      typedef typename traits_base::const_mapped_reference const_mapped_reference;\n+      typedef typename traits_base::mapped_const_reference mapped_const_reference;\n       typedef typename traits_base::value_type value_type;\n       typedef typename traits_base::pointer pointer;\n       typedef typename traits_base::const_pointer const_pointer;\n       typedef typename traits_base::reference reference;\n       typedef typename traits_base::const_reference const_reference;\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-      typedef point_iterator_ point_iterator;\n-#endif \n+      typedef point_iterator_ \t\t\tpoint_iterator;\n+#endif\n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n-      typedef const_point_iterator_ point_iterator;\n-#endif \n+      typedef point_const_iterator_ \t\tpoint_iterator;\n+#endif\n \n-      typedef const_point_iterator_ const_point_iterator;\n+      typedef point_const_iterator_ \t\tpoint_const_iterator;\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-      typedef iterator_ iterator;\n-#endif \n+      typedef iterator_ \t\t\titerator;\n+#endif\n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n-      typedef const_iterator_ iterator;\n-#endif \n+      typedef const_iterator_ \t\t\titerator;\n+#endif\n \n-      typedef const_iterator_ const_iterator;\n+      typedef const_iterator_ \t\t\tconst_iterator;\n \n-      PB_DS_CLASS_NAME();\n+      PB_DS_GP_HASH_NAME();\n \n-      PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC&);\n+      PB_DS_GP_HASH_NAME(const PB_DS_CLASS_C_DEC&);\n \n-      PB_DS_CLASS_NAME(const Hash_Fn&);\n+      PB_DS_GP_HASH_NAME(const Hash_Fn&);\n \n-      PB_DS_CLASS_NAME(const Hash_Fn&, const Eq_Fn&);\n+      PB_DS_GP_HASH_NAME(const Hash_Fn&, const Eq_Fn&);\n \n-      PB_DS_CLASS_NAME(const Hash_Fn&, const Eq_Fn&, const Comb_Probe_Fn&);\n+      PB_DS_GP_HASH_NAME(const Hash_Fn&, const Eq_Fn&, const Comb_Probe_Fn&);\n \n-      PB_DS_CLASS_NAME(const Hash_Fn&, const Eq_Fn&, const Comb_Probe_Fn&, \n+      PB_DS_GP_HASH_NAME(const Hash_Fn&, const Eq_Fn&, const Comb_Probe_Fn&,\n \t\t       const Probe_Fn&);\n \n-      PB_DS_CLASS_NAME(const Hash_Fn&, const Eq_Fn&, const Comb_Probe_Fn&, \n+      PB_DS_GP_HASH_NAME(const Hash_Fn&, const Eq_Fn&, const Comb_Probe_Fn&,\n \t\t       const Probe_Fn&, const Resize_Policy&);\n \n       template<typename It>\n       void\n-      copy_from_range(It first_it, It last_it);\n+      copy_from_range(It, It);\n \n       virtual\n-      ~PB_DS_CLASS_NAME();\n+      ~PB_DS_GP_HASH_NAME();\n \n       void\n-      swap(PB_DS_CLASS_C_DEC& other);\n+      swap(PB_DS_CLASS_C_DEC&);\n \n       inline size_type\n       size() const;\n@@ -248,72 +241,72 @@ namespace __gnu_pbds\n       inline bool\n       empty() const;\n \n-      Hash_Fn& \n+      Hash_Fn&\n       get_hash_fn();\n \n-      const Hash_Fn& \n+      const Hash_Fn&\n       get_hash_fn() const;\n \n-      Eq_Fn& \n+      Eq_Fn&\n       get_eq_fn();\n \n-      const Eq_Fn& \n+      const Eq_Fn&\n       get_eq_fn() const;\n \n-      Probe_Fn& \n+      Probe_Fn&\n       get_probe_fn();\n \n-      const Probe_Fn& \n+      const Probe_Fn&\n       get_probe_fn() const;\n \n-      Comb_Probe_Fn& \n+      Comb_Probe_Fn&\n       get_comb_probe_fn();\n \n-      const Comb_Probe_Fn& \n+      const Comb_Probe_Fn&\n       get_comb_probe_fn() const;\n \n-      Resize_Policy& \n+      Resize_Policy&\n       get_resize_policy();\n \n-      const Resize_Policy& \n+      const Resize_Policy&\n       get_resize_policy() const;\n \n       inline std::pair<point_iterator, bool>\n       insert(const_reference r_val)\n       {\n-\t_GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid(__FILE__, __LINE__);)\n-        return insert_imp(r_val, traits_base::m_store_extra_indicator);\n+       _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid(__FILE__, __LINE__);)\n+\treturn insert_imp(r_val, traits_base::m_store_extra_indicator);\n       }\n \n       inline mapped_reference\n-      operator[](const_key_reference r_key)\n+      operator[](key_const_reference r_key)\n       {\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n \treturn subscript_imp(r_key, traits_base::m_store_extra_indicator);\n-#else \n+#else\n \tinsert(r_key);\n-        return traits_base::s_null_mapped;\n+\treturn traits_base::s_null_type;\n #endif\n       }\n \n       inline point_iterator\n-      find(const_key_reference r_key);\n+      find(key_const_reference);\n \n-      inline const_point_iterator\n-      find(const_key_reference r_key) const;\n+      inline point_const_iterator\n+      find(key_const_reference) const;\n \n       inline point_iterator\n       find_end();\n \n-      inline const_point_iterator\n+      inline point_const_iterator\n       find_end() const;\n \n       inline bool\n-      erase(const_key_reference r_key);\n+      erase(key_const_reference);\n \n       template<typename Pred>\n       inline size_type\n-      erase_if(Pred prd);\n+      erase_if(Pred);\n \n       void\n       clear();\n@@ -332,18 +325,18 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid(const char* file, int line) const;\n-#endif \n+      assert_valid(const char*, int) const;\n+#endif\n \n #ifdef PB_DS_HT_MAP_TRACE_\n       void\n       trace() const;\n-#endif \n+#endif\n \n     private:\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       friend class iterator_;\n-#endif \n+#endif\n \n       friend class const_iterator_;\n \n@@ -378,10 +371,10 @@ namespace __gnu_pbds\n       resize_imp_reassign(entry_pointer, entry_array, true_type);\n \n       inline size_type\n-      find_ins_pos(const_key_reference, false_type);\n+      find_ins_pos(key_const_reference, false_type);\n \n       inline comp_hash\n-      find_ins_pos(const_key_reference, true_type);\n+      find_ins_pos(key_const_reference, true_type);\n \n       inline std::pair<point_iterator, bool>\n       insert_imp(const_reference, false_type);\n@@ -399,14 +392,12 @@ namespace __gnu_pbds\n \t\t\t     traits_base::m_store_extra_indicator);\n \n \t_GLIBCXX_DEBUG_ASSERT(m_entries[pos].m_stat != valid_entry_status);\n-\n \tentry* const p_e = m_entries + pos;\n \tnew (&p_e->m_value) value_type(r_val);\n \tp_e->m_stat = valid_entry_status;\n \tresize_base::notify_inserted(++m_num_used_e);\n \n \t_GLIBCXX_DEBUG_ONLY(debug_base::insert_new(PB_DS_V2F(p_e->m_value));)\n-\n \t_GLIBCXX_DEBUG_ONLY(assert_valid(__FILE__, __LINE__);)\n \treturn &p_e->m_value;\n       }\n@@ -432,18 +423,17 @@ namespace __gnu_pbds\n \tresize_base::notify_inserted(++m_num_used_e);\n \n \t_GLIBCXX_DEBUG_ONLY(debug_base::insert_new(PB_DS_V2F(p_e->m_value));)\n-\n \t_GLIBCXX_DEBUG_ONLY(assert_valid(__FILE__, __LINE__);)\n \treturn &p_e->m_value;\n       }\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       inline mapped_reference\n-      subscript_imp(const_key_reference key, false_type)\n+      subscript_imp(key_const_reference key, false_type)\n       {\n \t_GLIBCXX_DEBUG_ONLY(assert_valid(__FILE__, __LINE__);)\n \n-\tconst size_type pos = find_ins_pos(key, \n+\tconst size_type pos = find_ins_pos(key,\n \t\t\t\t\t traits_base::m_store_extra_indicator);\n \n \tentry_pointer p_e = &m_entries[pos];\n@@ -455,12 +445,12 @@ namespace __gnu_pbds\n       }\n \n       inline mapped_reference\n-      subscript_imp(const_key_reference key, true_type)\n+      subscript_imp(key_const_reference key, true_type)\n       {\n \t_GLIBCXX_DEBUG_ONLY(assert_valid(__FILE__, __LINE__);)\n \n-\tcomp_hash pos_hash_pair =\n-\t  find_ins_pos(key, traits_base::m_store_extra_indicator);\n+\tcomp_hash pos_hash_pair = find_ins_pos(key,\n+\t\t\t\t\t traits_base::m_store_extra_indicator);\n \n \tif (m_entries[pos_hash_pair.first].m_stat != valid_entry_status)\n \t  return insert_new_imp(value_type(key, mapped_type()),\n@@ -472,16 +462,16 @@ namespace __gnu_pbds\n #endif\n \n       inline pointer\n-      find_key_pointer(const_key_reference key, false_type)\n+      find_key_pointer(key_const_reference key, false_type)\n       {\n \tconst size_type hash = ranged_probe_fn_base::operator()(key);\n-\tsize_type i;\n \tresize_base::notify_find_search_start();\n \n \t// Loop until entry is found or until all possible entries accessed.\n-\tfor (i = 0; i < m_num_e; ++i)\n+\tfor (size_type i = 0; i < m_num_e; ++i)\n \t  {\n-\t    const size_type pos = ranged_probe_fn_base::operator()(key, hash, i);\n+\t    const size_type pos = ranged_probe_fn_base::operator()(key,\n+\t\t\t\t\t\t\t\t   hash, i);\n \n \t    entry* const p_e = m_entries + pos;\n \t    switch (p_e->m_stat)\n@@ -516,14 +506,13 @@ namespace __gnu_pbds\n       }\n \n       inline pointer\n-      find_key_pointer(const_key_reference key, true_type)\n+      find_key_pointer(key_const_reference key, true_type)\n       {\n \tcomp_hash pos_hash_pair = ranged_probe_fn_base::operator()(key);\n-\tsize_type i;\n \tresize_base::notify_find_search_start();\n \n \t// Loop until entry is found or until all possible entries accessed.\n-\tfor (i = 0; i < m_num_e; ++i)\n+\tfor (size_type i = 0; i < m_num_e; ++i)\n \t  {\n \t    const size_type pos =\n \t      ranged_probe_fn_base::operator()(key, pos_hash_pair.second, i);\n@@ -564,19 +553,19 @@ namespace __gnu_pbds\n       }\n \n       inline bool\n-      erase_imp(const_key_reference, true_type);\n+      erase_imp(key_const_reference, true_type);\n \n       inline bool\n-      erase_imp(const_key_reference, false_type);\n+      erase_imp(key_const_reference, false_type);\n \n       inline void\n-      erase_entry(entry_pointer p_e);\n+      erase_entry(entry_pointer);\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       void\n       inc_it_state(pointer& r_p_value, size_type& r_pos) const\n-      { inc_it_state((const_mapped_pointer& )r_p_value, r_pos); }\n-#endif \n+      { inc_it_state((mapped_const_pointer& )r_p_value, r_pos); }\n+#endif\n \n       void\n       inc_it_state(const_pointer& r_p_value, size_type& r_pos) const\n@@ -627,12 +616,12 @@ namespace __gnu_pbds\n #ifdef _GLIBCXX_DEBUG\n       void\n       assert_entry_array_valid(const entry_array, false_type,\n-\t\t\t       const char* file, int line) const;\n+\t\t\t       const char*, int) const;\n \n       void\n       assert_entry_array_valid(const entry_array, true_type,\n-\t\t\t       const char* file, int line) const;\n-#endif \n+\t\t\t       const char*, int) const;\n+#endif\n \n       static entry_allocator \ts_entry_allocator;\n       static iterator \t\ts_end_it;\n@@ -644,8 +633,8 @@ namespace __gnu_pbds\n \n       enum\n \t{\n-\t  store_hash_ok = !Store_Hash \n-\t                  || !is_same<Hash_Fn, __gnu_pbds::null_hash_fn>::value\n+\t  store_hash_ok = !Store_Hash\n+\t\t\t  || !is_same<Hash_Fn, __gnu_pbds::null_type>::value\n \t};\n \n       PB_DS_STATIC_ASSERT(sth, store_hash_ok);\n@@ -666,12 +655,8 @@ namespace __gnu_pbds\n #undef PB_DS_CLASS_C_DEC\n #undef PB_DS_HASH_EQ_FN_C_DEC\n #undef PB_DS_RANGED_PROBE_FN_C_DEC\n-#undef PB_DS_TYPES_TRAITS_C_DEC\n+#undef PB_DS_GP_HASH_TRAITS_BASE\n #undef PB_DS_DEBUG_MAP_BASE_C_DEC\n-#undef PB_DS_CLASS_NAME\n-#undef PB_DS_V2F\n-#undef PB_DS_V2S\n-\n+#undef PB_DS_GP_HASH_NAME\n   } // namespace detail\n } // namespace __gnu_pbds\n-"}, {"sha": "8fa762b7718037220dc527ab7c4dbf0a691ff89a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/info_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finfo_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,9 +34,9 @@\n // warranty.\n \n /**\n- * @file info_fn_imps.hpp\n+ * @file gp_hash_table_map_/info_fn_imps.hpp\n  * Contains implementations of gp_ht_map_'s entire container info related\n- *    functions.\n+ * functions.\n  */\n \n PB_DS_CLASS_T_DEC"}, {"sha": "03731778bec77f46124f8a39acb3dbee992306f8", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/insert_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file insert_fn_imps.hpp\n+ * @file gp_hash_table_map_/insert_fn_imps.hpp\n  * Contains implementations of gp_ht_map_'s insert related functions.\n  */\n "}, {"sha": "03b2c9b8ee392b8df8beec9915338c954a850a8b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/insert_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,15 +34,15 @@\n // warranty.\n \n /**\n- * @file insert_no_store_hash_fn_imps.hpp\n+ * @file gp_hash_table_map_/insert_no_store_hash_fn_imps.hpp\n  * Contains implementations of gp_ht_map_'s insert related functions,\n  * when the hash value is not stored.\n  */\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n-find_ins_pos(const_key_reference r_key, false_type)\n+find_ins_pos(key_const_reference r_key, false_type)\n {\n   size_type hash = ranged_probe_fn_base::operator()(r_key);\n   size_type i;\n@@ -95,7 +95,7 @@ inline std::pair<typename PB_DS_CLASS_C_DEC::point_iterator, bool>\n PB_DS_CLASS_C_DEC::\n insert_imp(const_reference r_val, false_type)\n {\n-  const_key_reference r_key = PB_DS_V2F(r_val);\n+  key_const_reference r_key = PB_DS_V2F(r_val);\n   const size_type pos = find_ins_pos(r_key, \n \t\t\t\t     traits_base::m_store_extra_indicator);\n "}, {"sha": "856306a7ab137293f31943973655e62fcfd77083", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/insert_store_hash_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_store_hash_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,15 +34,15 @@\n // warranty.\n \n /**\n- * @file insert_store_hash_fn_imps.hpp\n+ * @file gp_hash_table_map_/insert_store_hash_fn_imps.hpp\n  * Contains implementations of gp_ht_map_'s find related functions,\n  * when the hash value is stored.\n  */\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::comp_hash\n PB_DS_CLASS_C_DEC::\n-find_ins_pos(const_key_reference r_key, true_type)\n+find_ins_pos(key_const_reference r_key, true_type)\n {\n   PB_DS_ASSERT_VALID((*this))\n   comp_hash pos_hash_pair = ranged_probe_fn_base::operator()(r_key);\n@@ -100,7 +100,7 @@ inline std::pair<typename PB_DS_CLASS_C_DEC::point_iterator, bool>\n PB_DS_CLASS_C_DEC::\n insert_imp(const_reference r_val, true_type)\n {\n-  const_key_reference r_key = PB_DS_V2F(r_val);\n+  key_const_reference r_key = PB_DS_V2F(r_val);\n   comp_hash pos_hash_pair = find_ins_pos(r_key, \n \t\t\t\t\t traits_base::m_store_extra_indicator);\n "}, {"sha": "695b03eedc0c6d4b98722a0daa65a9d31b023690", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/iterator_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fiterator_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fiterator_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fiterator_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,9 +34,9 @@\n // warranty.\n \n /**\n- * @file iterator_fn_imps.hpp\n+ * @file gp_hash_table_map_/iterator_fn_imps.hpp\n  * Contains implementations of gp_ht_map_'s iterators related functions, e.g.,\n- *    begin().\n+ * begin().\n  */\n \n PB_DS_CLASS_T_DEC"}, {"sha": "22afeb7690f6d18b8406f913912833543aa6158b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/policy_access_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fpolicy_access_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fpolicy_access_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fpolicy_access_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,9 +34,9 @@\n // warranty.\n \n /**\n- * @file policy_access_fn_imps.hpp\n+ * @file gp_hash_table_map_/policy_access_fn_imps.hpp\n  * Contains implementations of gp_ht_map_'s policy agpess\n- *    functions.\n+ * functions.\n  */\n \n PB_DS_CLASS_T_DEC"}, {"sha": "76b6174efef739cc0545419a6397fb1a0752dfe6", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/resize_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -35,7 +35,7 @@\n // warranty.\n \n /**\n- * @file resize_fn_imps.hpp\n+ * @file gp_hash_table_map_/resize_fn_imps.hpp\n  * Contains implementations of gp_ht_map_'s resize related functions.\n  */\n \n@@ -80,7 +80,7 @@ PB_DS_CLASS_C_DEC::\n resize_imp(size_type new_size)\n {\n #ifdef PB_DS_REGRESSION\n-  typename Allocator::group_adjustor adjust(m_num_e);\n+  typename _Alloc::group_adjustor adjust(m_num_e);\n #endif \n \n   if (new_size == m_num_e)"}, {"sha": "8819238b6da0f826b12ce924fef36556f798f979", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/resize_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_no_store_hash_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,9 +34,9 @@\n // warranty.\n \n /**\n- * @file resize_no_store_hash_fn_imps.hpp\n+ * @file gp_hash_table_map_/resize_no_store_hash_fn_imps.hpp\n  * Contains implementations of gp_ht_map_'s resize related functions, when the\n- *    hash value is not stored.\n+ * hash value is not stored.\n  */\n \n PB_DS_CLASS_T_DEC\n@@ -45,7 +45,7 @@ PB_DS_CLASS_C_DEC::\n resize_imp_reassign(entry_pointer p_e, entry_array a_entries_resized, \n \t\t    false_type)\n {\n-  const_key_reference r_key = PB_DS_V2F(p_e->m_value);\n+  key_const_reference r_key = PB_DS_V2F(p_e->m_value);\n   size_type hash = ranged_probe_fn_base::operator()(r_key);\n   size_type i;\n   for (i = 0; i < m_num_e; ++i)"}, {"sha": "c291747ed149fee13c7898e3ac868e1ab62f2991", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/resize_store_hash_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_store_hash_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,9 +34,9 @@\n // warranty.\n \n /**\n- * @file resize_store_hash_fn_imps.hpp\n+ * @file gp_hash_table_map_/resize_store_hash_fn_imps.hpp\n  * Contains implementations of gp_ht_map_'s resize related functions, when the\n- *    hash value is stored.\n+ * hash value is stored.\n  */\n \n PB_DS_CLASS_T_DEC\n@@ -45,7 +45,7 @@ PB_DS_CLASS_C_DEC::\n resize_imp_reassign(entry_pointer p_e, entry_array a_entries_resized, \n \t\t    true_type)\n {\n-  const_key_reference r_key = PB_DS_V2F(p_e->m_value);\n+  key_const_reference r_key = PB_DS_V2F(p_e->m_value);\n   size_type hash = ranged_probe_fn_base::operator()(r_key, p_e->m_hash);\n \n   size_type i;"}, {"sha": "74aeba4d63d49c8c0a851103a3c038212453e3a4", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/standard_policies.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fstandard_policies.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fstandard_policies.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fstandard_policies.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file standard_policies.hpp\n+ * @file gp_hash_table_map_/standard_policies.hpp\n  * Contains standard policies for gp_ht_map types.\n  */\n "}, {"sha": "0e6a7da087e34842023c499153e8a4b1288c93f1", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/trace_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ftrace_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ftrace_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ftrace_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file trace_fn_imps.hpp\n+ * @file gp_hash_table_map_/trace_fn_imps.hpp\n  * Contains implementations of gp_ht_map_'s trace-mode functions.\n  */\n "}, {"sha": "19855ac1e8bab91c80d5702efe18cfea16f1b780", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/probe_fn_base.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fprobe_fn_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fprobe_fn_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fprobe_fn_base.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -47,7 +47,7 @@ namespace __gnu_pbds\n {\n   namespace detail\n   {\n-    template<typename Allocator>\n+    template<typename _Alloc>\n     class probe_fn_base\n     {\n     protected:"}, {"sha": "8567851f79839e20a0a5c1bd6ac36f75ca6e81f6", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/ranged_hash_fn.hpp", "status": "modified", "additions": 41, "deletions": 42, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_hash_fn.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_hash_fn.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_hash_fn.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -42,41 +42,40 @@\n #ifndef PB_DS_RANGED_HASH_FN_HPP\n #define PB_DS_RANGED_HASH_FN_HPP\n \n-#include <ext/pb_ds/detail/basic_types.hpp>\n #include <utility>\n #include <debug/debug.h>\n \n namespace __gnu_pbds\n {\n   namespace detail\n   {\n-    template<typename Key, typename Hash_Fn, typename Allocator, \n+    template<typename Key, typename Hash_Fn, typename _Alloc, \n \t     typename Comb_Hash_Fn, bool Store_Hash>\n     class ranged_hash_fn;\n \n #define PB_DS_CLASS_T_DEC \\\n-    template<typename Key, typename Hash_Fn, typename Allocator, \\\n+    template<typename Key, typename Hash_Fn, typename _Alloc, \\\n \t     typename Comb_Hash_Fn>\n \n #define PB_DS_CLASS_C_DEC \\\n-    ranged_hash_fn<Key,\tHash_Fn, Allocator, Comb_Hash_Fn, false>\n+    ranged_hash_fn<Key,\tHash_Fn, _Alloc, Comb_Hash_Fn, false>\n \n     /**\n      * Specialization 1\n      * The client supplies a hash function and a ranged hash function,\n      * and requests that hash values not be stored.\n      **/\n-    template<typename Key, typename Hash_Fn, typename Allocator, \n+    template<typename Key, typename Hash_Fn, typename _Alloc, \n \t     typename Comb_Hash_Fn>\n-    class ranged_hash_fn< Key, Hash_Fn, Allocator, Comb_Hash_Fn, false> \n+    class ranged_hash_fn< Key, Hash_Fn, _Alloc, Comb_Hash_Fn, false> \n     : public Hash_Fn, public Comb_Hash_Fn\n     {\n     protected:\n-      typedef typename Allocator::size_type size_type;\n+      typedef typename _Alloc::size_type size_type;\n       typedef Hash_Fn hash_fn_base;\n       typedef Comb_Hash_Fn comb_hash_fn_base;\n-      typedef typename Allocator::template rebind< Key>::other key_allocator;\n-      typedef typename key_allocator::const_reference const_key_reference;\n+      typedef typename _Alloc::template rebind< Key>::other key_allocator;\n+      typedef typename key_allocator::const_reference key_const_reference;\n \n       ranged_hash_fn(size_type);\n \n@@ -91,7 +90,7 @@ namespace __gnu_pbds\n       notify_resized(size_type);\n \n       inline size_type\n-      operator()(const_key_reference) const;\n+      operator()(key_const_reference) const;\n     };\n \n     PB_DS_CLASS_T_DEC\n@@ -130,36 +129,36 @@ namespace __gnu_pbds\n     PB_DS_CLASS_T_DEC\n     inline typename PB_DS_CLASS_C_DEC::size_type\n     PB_DS_CLASS_C_DEC::\n-    operator()(const_key_reference r_key) const\n+    operator()(key_const_reference r_key) const\n     { return (comb_hash_fn_base::operator()(hash_fn_base::operator()(r_key)));}\n \n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_C_DEC\n \n #define PB_DS_CLASS_T_DEC \\\n-    template<typename Key, typename Hash_Fn, typename Allocator, \\\n+    template<typename Key, typename Hash_Fn, typename _Alloc, \\\n \t     typename Comb_Hash_Fn>\n \n #define PB_DS_CLASS_C_DEC \\\n-    ranged_hash_fn<Key,Hash_Fn,\tAllocator, Comb_Hash_Fn, true>\n+    ranged_hash_fn<Key,Hash_Fn,\t_Alloc, Comb_Hash_Fn, true>\n \n     /**\n      * Specialization 2\n      * The client supplies a hash function and a ranged hash function,\n      * and requests that hash values be stored.\n      **/\n-    template<typename Key, typename Hash_Fn, typename Allocator,\n+    template<typename Key, typename Hash_Fn, typename _Alloc,\n \t     typename Comb_Hash_Fn>\n-    class ranged_hash_fn<Key, Hash_Fn, Allocator, Comb_Hash_Fn, true> \n+    class ranged_hash_fn<Key, Hash_Fn, _Alloc, Comb_Hash_Fn, true> \n     : public Hash_Fn, public Comb_Hash_Fn\n     {\n     protected:\n-      typedef typename Allocator::size_type size_type;\n+      typedef typename _Alloc::size_type size_type;\n       typedef std::pair<size_type, size_type> comp_hash;\n       typedef Hash_Fn hash_fn_base;\n       typedef Comb_Hash_Fn comb_hash_fn_base;\n-      typedef typename Allocator::template rebind<Key>::other key_allocator;\n-      typedef typename key_allocator::const_reference const_key_reference;\n+      typedef typename _Alloc::template rebind<Key>::other key_allocator;\n+      typedef typename key_allocator::const_reference key_const_reference;\n \n       ranged_hash_fn(size_type);\n \n@@ -174,10 +173,10 @@ namespace __gnu_pbds\n       notify_resized(size_type);\n \n       inline comp_hash\n-      operator()(const_key_reference) const;\n+      operator()(key_const_reference) const;\n \n       inline comp_hash\n-      operator()(const_key_reference, size_type) const;\n+      operator()(key_const_reference, size_type) const;\n     };\n \n     PB_DS_CLASS_T_DEC\n@@ -216,7 +215,7 @@ namespace __gnu_pbds\n     PB_DS_CLASS_T_DEC\n     inline typename PB_DS_CLASS_C_DEC::comp_hash\n     PB_DS_CLASS_C_DEC::\n-    operator()(const_key_reference r_key) const\n+    operator()(key_const_reference r_key) const\n     {\n       const size_type hash = hash_fn_base::operator()(r_key);\n       return std::make_pair(comb_hash_fn_base::operator()(hash), hash);\n@@ -227,9 +226,9 @@ namespace __gnu_pbds\n     PB_DS_CLASS_C_DEC::\n     operator()\n #ifdef _GLIBCXX_DEBUG\n-      (const_key_reference r_key, size_type hash) const\n+      (key_const_reference r_key, size_type hash) const\n #else \n-      (const_key_reference /*r_key*/, size_type hash) const\n+      (key_const_reference /*r_key*/, size_type hash) const\n #endif\n     {\n       _GLIBCXX_DEBUG_ASSERT(hash == hash_fn_base::operator()(r_key));\n@@ -240,30 +239,30 @@ namespace __gnu_pbds\n #undef PB_DS_CLASS_C_DEC\n \n #define PB_DS_CLASS_T_DEC \\\n-    template<typename Key, typename Allocator, typename Comb_Hash_Fn>\n+    template<typename Key, typename _Alloc, typename Comb_Hash_Fn>\n \n #define PB_DS_CLASS_C_DEC \\\n-    ranged_hash_fn<Key,\tnull_hash_fn, Allocator, Comb_Hash_Fn, false>\n+    ranged_hash_fn<Key,\tnull_type, _Alloc, Comb_Hash_Fn, false>\n \n     /**\n      * Specialization 3\n      * The client does not supply a hash function (by specifying\n-     * null_hash_fn as the Hash_Fn parameter), and requests that hash\n+     * null_type as the Hash_Fn parameter), and requests that hash\n      * values not be stored.\n      **/\n-    template<typename Key, typename Allocator, typename Comb_Hash_Fn>\n-    class ranged_hash_fn<Key, null_hash_fn, Allocator, Comb_Hash_Fn, false> \n-    : public null_hash_fn, public Comb_Hash_Fn\n+    template<typename Key, typename _Alloc, typename Comb_Hash_Fn>\n+    class ranged_hash_fn<Key, null_type, _Alloc, Comb_Hash_Fn, false> \n+    : public Comb_Hash_Fn\n     {\n     protected:\n-      typedef typename Allocator::size_type size_type;\n+      typedef typename _Alloc::size_type size_type;\n       typedef Comb_Hash_Fn comb_hash_fn_base;\n \n       ranged_hash_fn(size_type);\n \n       ranged_hash_fn(size_type, const Comb_Hash_Fn&);\n \n-      ranged_hash_fn(size_type, const null_hash_fn&, const Comb_Hash_Fn&);\n+      ranged_hash_fn(size_type, const null_type&, const Comb_Hash_Fn&);\n \n       void\n       swap(PB_DS_CLASS_C_DEC&);\n@@ -282,7 +281,7 @@ namespace __gnu_pbds\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n-    ranged_hash_fn(size_type size, const null_hash_fn& r_null_hash_fn, \n+    ranged_hash_fn(size_type size, const null_type& r_null_type, \n \t\t   const Comb_Hash_Fn& r_comb_hash_fn) \n     : Comb_Hash_Fn(r_comb_hash_fn)\n     { }\n@@ -297,30 +296,30 @@ namespace __gnu_pbds\n #undef PB_DS_CLASS_C_DEC\n \n #define PB_DS_CLASS_T_DEC \\\n-    template<typename Key, typename Allocator, typename Comb_Hash_Fn>\n+    template<typename Key, typename _Alloc, typename Comb_Hash_Fn>\n \n #define PB_DS_CLASS_C_DEC \\\n-    ranged_hash_fn<Key,\tnull_hash_fn, Allocator, Comb_Hash_Fn, true>\n+    ranged_hash_fn<Key,\tnull_type, _Alloc, Comb_Hash_Fn, true>\n \n     /**\n      * Specialization 4\n      * The client does not supply a hash function (by specifying\n-     * null_hash_fn as the Hash_Fn parameter), and requests that hash\n+     * null_type as the Hash_Fn parameter), and requests that hash\n      * values be stored.\n      **/\n-    template<typename Key, typename Allocator, typename Comb_Hash_Fn>\n-    class ranged_hash_fn<Key, null_hash_fn, Allocator, Comb_Hash_Fn, true> \n-    : public null_hash_fn, public Comb_Hash_Fn\n+    template<typename Key, typename _Alloc, typename Comb_Hash_Fn>\n+    class ranged_hash_fn<Key, null_type, _Alloc, Comb_Hash_Fn, true> \n+    : public Comb_Hash_Fn\n     {\n     protected:\n-      typedef typename Allocator::size_type size_type;\n+      typedef typename _Alloc::size_type size_type;\n       typedef Comb_Hash_Fn comb_hash_fn_base;\n \n       ranged_hash_fn(size_type);\n \n       ranged_hash_fn(size_type, const Comb_Hash_Fn&);\n \n-      ranged_hash_fn(size_type, const null_hash_fn&, const Comb_Hash_Fn&);\n+      ranged_hash_fn(size_type, const null_type&, const Comb_Hash_Fn&);\n \n       void\n       swap(PB_DS_CLASS_C_DEC&);\n@@ -339,7 +338,7 @@ namespace __gnu_pbds\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n-    ranged_hash_fn(size_type size, const null_hash_fn& r_null_hash_fn, \n+    ranged_hash_fn(size_type size, const null_type& r_null_type, \n \t\t   const Comb_Hash_Fn& r_comb_hash_fn) \n     : Comb_Hash_Fn(r_comb_hash_fn)\n     { }"}, {"sha": "b13de65555ac11a2c90da8095b8f8288783143b5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/ranged_probe_fn.hpp", "status": "modified", "additions": 35, "deletions": 36, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_probe_fn.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_probe_fn.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_probe_fn.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -42,43 +42,42 @@\n #ifndef PB_DS_RANGED_PROBE_FN_HPP\n #define PB_DS_RANGED_PROBE_FN_HPP\n \n-#include <ext/pb_ds/detail/basic_types.hpp>\n #include <utility>\n #include <debug/debug.h>\n \n namespace __gnu_pbds\n {\n   namespace detail\n   {\n-    template<typename Key, typename Hash_Fn, typename Allocator,\n+    template<typename Key, typename Hash_Fn, typename _Alloc,\n \t     typename Comb_Probe_Fn, typename Probe_Fn, bool Store_Hash>\n     class ranged_probe_fn;\n \n #define PB_DS_CLASS_T_DEC \\\n-    template<typename Key, typename Hash_Fn, typename Allocator, \\\n+    template<typename Key, typename Hash_Fn, typename _Alloc, \\\n \t     typename Comb_Probe_Fn, typename Probe_Fn>\n \n #define PB_DS_CLASS_C_DEC \\\n-    ranged_probe_fn<Key, Hash_Fn, Allocator, Comb_Probe_Fn, Probe_Fn, false>\n+    ranged_probe_fn<Key, Hash_Fn, _Alloc, Comb_Probe_Fn, Probe_Fn, false>\n \n     /**\n      * Specialization 1     \n      * The client supplies a probe function and a ranged probe\n      * function, and requests that hash values not be stored.\n      **/\n-    template<typename Key, typename Hash_Fn, typename Allocator,\n+    template<typename Key, typename Hash_Fn, typename _Alloc,\n \t     typename Comb_Probe_Fn, typename Probe_Fn>\n-    class ranged_probe_fn<Key, Hash_Fn, Allocator, Comb_Probe_Fn,\n+    class ranged_probe_fn<Key, Hash_Fn, _Alloc, Comb_Probe_Fn,\n \t\t\t  Probe_Fn, false> \n     : public Hash_Fn, public Comb_Probe_Fn, public Probe_Fn\n     {\n     protected:\n-      typedef typename Allocator::size_type size_type;\n+      typedef typename _Alloc::size_type size_type;\n       typedef Comb_Probe_Fn comb_probe_fn_base;\n       typedef Hash_Fn hash_fn_base;\n       typedef Probe_Fn probe_fn_base;\n-      typedef typename Allocator::template rebind<Key>::other key_allocator;\n-      typedef typename key_allocator::const_reference const_key_reference;\n+      typedef typename _Alloc::template rebind<Key>::other key_allocator;\n+      typedef typename key_allocator::const_reference key_const_reference;\n \n       ranged_probe_fn(size_type);\n \n@@ -96,10 +95,10 @@ namespace __gnu_pbds\n       notify_resized(size_type);\n \n       inline size_type\n-      operator()(const_key_reference) const;\n+      operator()(key_const_reference) const;\n \n       inline size_type\n-      operator()(const_key_reference, size_type, size_type) const;\n+      operator()(key_const_reference, size_type, size_type) const;\n     };\n \n     PB_DS_CLASS_T_DEC\n@@ -146,13 +145,13 @@ namespace __gnu_pbds\n     PB_DS_CLASS_T_DEC\n     inline typename PB_DS_CLASS_C_DEC::size_type\n     PB_DS_CLASS_C_DEC::\n-    operator()(const_key_reference r_key) const\n+    operator()(key_const_reference r_key) const\n     { return comb_probe_fn_base::operator()(hash_fn_base::operator()(r_key)); }\n \n     PB_DS_CLASS_T_DEC\n     inline typename PB_DS_CLASS_C_DEC::size_type\n     PB_DS_CLASS_C_DEC::\n-    operator()(const_key_reference, size_type hash, size_type i) const\n+    operator()(key_const_reference, size_type hash, size_type i) const\n     {\n       return comb_probe_fn_base::operator()(hash + probe_fn_base::operator()(i));\n     }\n@@ -161,30 +160,30 @@ namespace __gnu_pbds\n #undef PB_DS_CLASS_C_DEC\n \n #define PB_DS_CLASS_T_DEC \\\n-    template<typename Key, typename Hash_Fn, typename Allocator, \\\n+    template<typename Key, typename Hash_Fn, typename _Alloc, \\\n \t     typename Comb_Probe_Fn, typename Probe_Fn>\n \n #define PB_DS_CLASS_C_DEC \\\n-    ranged_probe_fn<Key, Hash_Fn, Allocator, Comb_Probe_Fn, Probe_Fn, true>\n+    ranged_probe_fn<Key, Hash_Fn, _Alloc, Comb_Probe_Fn, Probe_Fn, true>\n \n     /**\n      * Specialization 2- The client supplies a probe function and a ranged\n      *    probe function, and requests that hash values not be stored.\n      **/\n-    template<typename Key, typename Hash_Fn, typename Allocator,\n+    template<typename Key, typename Hash_Fn, typename _Alloc,\n \t     typename Comb_Probe_Fn, typename Probe_Fn>\n-    class ranged_probe_fn<Key, Hash_Fn, Allocator, Comb_Probe_Fn, \n+    class ranged_probe_fn<Key, Hash_Fn, _Alloc, Comb_Probe_Fn, \n \t\t\t  Probe_Fn, true> \n     : public Hash_Fn, public Comb_Probe_Fn, public Probe_Fn\n     {\n     protected:\n-      typedef typename Allocator::size_type size_type;\n+      typedef typename _Alloc::size_type size_type;\n       typedef std::pair<size_type, size_type> comp_hash;\n       typedef Comb_Probe_Fn comb_probe_fn_base;\n       typedef Hash_Fn hash_fn_base;\n       typedef Probe_Fn probe_fn_base;\n-      typedef typename Allocator::template rebind<Key>::other key_allocator;\n-      typedef typename key_allocator::const_reference const_key_reference;\n+      typedef typename _Alloc::template rebind<Key>::other key_allocator;\n+      typedef typename key_allocator::const_reference key_const_reference;\n \n       ranged_probe_fn(size_type);\n \n@@ -203,13 +202,13 @@ namespace __gnu_pbds\n       notify_resized(size_type);\n \n       inline comp_hash\n-      operator()(const_key_reference) const;\n+      operator()(key_const_reference) const;\n \n       inline size_type\n-      operator()(const_key_reference, size_type, size_type) const;\n+      operator()(key_const_reference, size_type, size_type) const;\n \n       inline size_type\n-      operator()(const_key_reference, size_type) const;\n+      operator()(key_const_reference, size_type) const;\n     };\n \n     PB_DS_CLASS_T_DEC\n@@ -256,7 +255,7 @@ namespace __gnu_pbds\n     PB_DS_CLASS_T_DEC\n     inline typename PB_DS_CLASS_C_DEC::comp_hash\n     PB_DS_CLASS_C_DEC::\n-    operator()(const_key_reference r_key) const\n+    operator()(key_const_reference r_key) const\n     {\n       const size_type hash = hash_fn_base::operator()(r_key);\n       return std::make_pair(comb_probe_fn_base::operator()(hash), hash);\n@@ -265,7 +264,7 @@ namespace __gnu_pbds\n     PB_DS_CLASS_T_DEC\n     inline typename PB_DS_CLASS_C_DEC::size_type\n     PB_DS_CLASS_C_DEC::\n-    operator()(const_key_reference, size_type hash, size_type i) const\n+    operator()(key_const_reference, size_type hash, size_type i) const\n     {\n       return comb_probe_fn_base::operator()(hash + probe_fn_base::operator()(i));\n     }\n@@ -275,9 +274,9 @@ namespace __gnu_pbds\n     PB_DS_CLASS_C_DEC::\n     operator()\n #ifdef _GLIBCXX_DEBUG\n-      (const_key_reference r_key, size_type hash) const\n+      (key_const_reference r_key, size_type hash) const\n #else \n-      (const_key_reference /*r_key*/, size_type hash) const\n+      (key_const_reference /*r_key*/, size_type hash) const\n #endif \n     {\n       _GLIBCXX_DEBUG_ASSERT(hash == hash_fn_base::operator()(r_key));\n@@ -292,16 +291,16 @@ namespace __gnu_pbds\n      * The client does not supply a hash function or probe function,\n      * and requests that hash values not be stored.\n      **/\n-    template<typename Key, typename Allocator, typename Comb_Probe_Fn>\n-    class ranged_probe_fn<Key, null_hash_fn, Allocator, Comb_Probe_Fn, \n-\t\t\t  null_probe_fn, false> \n-    : public Comb_Probe_Fn, public null_hash_fn, public null_probe_fn\n+    template<typename Key, typename _Alloc, typename Comb_Probe_Fn>\n+    class ranged_probe_fn<Key, null_type, _Alloc, Comb_Probe_Fn, \n+\t\t\t  null_type, false> \n+    : public Comb_Probe_Fn\n     {\n     protected:\n-      typedef typename Allocator::size_type size_type;\n+      typedef typename _Alloc::size_type size_type;\n       typedef Comb_Probe_Fn comb_probe_fn_base;\n-      typedef typename Allocator::template rebind<Key>::other key_allocator;\n-      typedef typename key_allocator::const_reference const_key_reference;\n+      typedef typename _Alloc::template rebind<Key>::other key_allocator;\n+      typedef typename key_allocator::const_reference key_const_reference;\n \n       ranged_probe_fn(size_type size)\n       { Comb_Probe_Fn::notify_resized(size); }\n@@ -310,9 +309,9 @@ namespace __gnu_pbds\n       : Comb_Probe_Fn(r_comb_probe_fn)\n       { }\n \n-      ranged_probe_fn(size_type, const null_hash_fn&, \n+      ranged_probe_fn(size_type, const null_type&, \n \t\t      const Comb_Probe_Fn& r_comb_probe_fn, \n-\t\t      const null_probe_fn&)\n+\t\t      const null_type&)\n       : Comb_Probe_Fn(r_comb_probe_fn)\n       { }\n "}, {"sha": "3ca9001e02586dec657c60229ba6f53a64323324", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/sample_probe_fn.hpp", "status": "modified", "additions": 23, "deletions": 28, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_probe_fn.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_probe_fn.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_probe_fn.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -41,33 +41,28 @@\n #ifndef PB_DS_SAMPLE_PROBE_FN_HPP\n #define PB_DS_SAMPLE_PROBE_FN_HPP\n \n-// A sample probe policy.\n-class sample_probe_fn\n+namespace __gnu_pbds\n {\n-\n-public:\n-\n-  // Size type.\n-  typedef std::size_t size_type;\n-\n-public:\n-\n-  // Default constructor.\n-  sample_probe_fn();\n-\n-  // Copy constructor.\n-  sample_probe_fn(const sample_probe_fn& other);\n-\n-  // Swaps content.\n-  inline void\n-  swap(sample_probe_fn& other);\n-\n-protected:\n-\n-  // Returns the i-th offset from the hash value of some key r_key.\n-  inline size_type\n-  operator()(const_key_reference r_key, size_type i) const;\n-\n-};\n-\n+  /// A sample probe policy.\n+  class sample_probe_fn\n+  {\n+  public:\n+    typedef std::size_t size_type;\n+\n+    // Default constructor.\n+    sample_probe_fn();\n+\n+    // Copy constructor.\n+    sample_probe_fn(const sample_probe_fn&);\n+\n+    // Swaps content.\n+    inline void\n+    swap(sample_probe_fn&);\n+\n+  protected:\n+    // Returns the i-th offset from the hash value of some key r_key.\n+    inline size_type\n+    operator()(key_const_reference r_key, size_type i) const;\n+  };\n+}\n #endif // #ifndef PB_DS_SAMPLE_PROBE_FN_HPP"}, {"sha": "3092376832ccbbc2f4f0879098cee95f12fec283", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/sample_range_hashing.hpp", "status": "modified", "additions": 29, "deletions": 32, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_range_hashing.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_range_hashing.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_range_hashing.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -41,37 +41,34 @@\n #ifndef PB_DS_SAMPLE_RANGE_HASHING_HPP\n #define PB_DS_SAMPLE_RANGE_HASHING_HPP\n \n-// A sample range-hashing functor.\n-class sample_range_hashing\n+namespace __gnu_pbds\n {\n-\n-public:\n-\n-  // Size type.\n-  typedef std::size_t size_type;\n-\n-public:\n-\n-  // Default constructor.\n-  sample_range_hashing();\n-\n-  // Copy constructor.\n-  sample_range_hashing(const sample_range_hashing& other);\n-\n-  // Swaps content.\n-  inline void\n-  swap(sample_range_hashing& other);\n-\n-protected:\n-\n-  // Notifies the policy object that the container's __size has changed to size.\n-  void\n-  notify_resized(size_type size);\n-\n-  // Transforms the __hash value hash into a ranged-hash value.\n-  inline size_type\n-  operator()(size_type hash) const;\n-\n-};\n-\n+  /// A sample range-hashing functor.\n+  class sample_range_hashing\n+  {\n+  public:\n+    // Size type.\n+    typedef std::size_t size_type;\n+\n+    // Default constructor.\n+    sample_range_hashing();\n+\n+    // Copy constructor.\n+    sample_range_hashing(const sample_range_hashing& other);\n+\n+    // Swaps content.\n+    inline void\n+    swap(sample_range_hashing& other);\n+\n+  protected:\n+    // Notifies the policy object that the container's __size has\n+    // changed to size.\n+    void\n+    notify_resized(size_type);\n+\n+    // Transforms the __hash value hash into a ranged-hash value.\n+    inline size_type\n+    operator()(size_type ) const;\n+  };\n+}\n #endif // #ifndef PB_DS_SAMPLE_RANGE_HASHING_HPP"}, {"sha": "cc9aaab9134300d7d8e6ae7933092d1f365b94c5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/sample_ranged_hash_fn.hpp", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_ranged_hash_fn.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_ranged_hash_fn.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_ranged_hash_fn.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -41,37 +41,35 @@\n #ifndef PB_DS_SAMPLE_RANGED_HASH_FN_HPP\n #define PB_DS_SAMPLE_RANGED_HASH_FN_HPP\n \n-// A sample ranged-hash functor.\n-class sample_ranged_hash_fn\n+namespace __gnu_pbds\n {\n+  /// A sample ranged-hash functor.\n+  class sample_ranged_hash_fn\n+  {\n+  public:\n+    typedef std::size_t size_type;\n \n-public:\n+    // Default constructor.\n+    sample_ranged_hash_fn();\n \n-  // Size type.\n-  typedef std::size_t size_type;\n+    // Copy constructor.\n+    sample_ranged_hash_fn(const sample_ranged_hash_fn&);\n \n-public:\n+    // Swaps content.\n+    inline void\n+    swap(sample_ranged_hash_fn&);\n \n-  // Default constructor.\n-  sample_ranged_hash_fn();\n+  protected:\n \n-  // Copy constructor.\n-  sample_ranged_hash_fn(const sample_ranged_hash_fn& other);\n+    // Notifies the policy object that the container's __size has\n+    // changed to size.\n+    void\n+    notify_resized(size_type);\n \n-  // Swaps content.\n-  inline void\n-  swap(sample_ranged_hash_fn& other);\n-\n-protected:\n-\n-  // Notifies the policy object that the container's __size has changed to size.\n-  void\n-  notify_resized(size_type size);\n-\n-  // Transforms r_key into a position within the table.\n-  inline size_type\n-  operator()(const_key_reference r_key) const;\n-\n-};\n+    // Transforms key_const_reference into a position within the table.\n+    inline size_type\n+    operator()(key_const_reference) const;\n \n+  };\n+}\n #endif // #ifndef PB_DS_SAMPLE_RANGED_HASH_FN_HPP"}, {"sha": "b362f3d354fbf43ca4c307bb81c37fe794b05c2a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/sample_ranged_probe_fn.hpp", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_ranged_probe_fn.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_ranged_probe_fn.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fsample_ranged_probe_fn.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -41,37 +41,37 @@\n #ifndef PB_DS_SAMPLE_RANGED_PROBE_FN_HPP\n #define PB_DS_SAMPLE_RANGED_PROBE_FN_HPP\n \n-// A sample ranged-probe functor.\n-class sample_ranged_probe_fn\n+namespace __gnu_pbds\n {\n+  /// A sample ranged-probe functor.\n+  class sample_ranged_probe_fn\n+  {\n+  public:\n+    typedef std::size_t \tsize_type;\n \n-public:\n+    // Default constructor.\n+    sample_ranged_probe_fn();\n \n-  // Size type.\n-  typedef std::size_t size_type;\n+    // Copy constructor.\n+    sample_ranged_probe_fn(const sample_ranged_probe_fn&);\n \n-public:\n+    // Swaps content.\n+    inline void\n+    swap(sample_ranged_probe_fn&);\n \n-  // Default constructor.\n-  sample_ranged_probe_fn();\n+  protected:\n \n-  // Copy constructor.\n-  sample_ranged_probe_fn(const sample_ranged_probe_fn& other);\n+    // Notifies the policy object that the container's __size has\n+    // changed to size.\n+    void\n+    notify_resized(size_type);\n \n-  // Swaps content.\n-  inline void\n-  swap(sample_ranged_probe_fn& other);\n-\n-protected:\n-\n-  // Notifies the policy object that the container's __size has changed to size.\n-  void\n-  notify_resized(size_type size);\n-\n-  // Transforms the const key reference r_key into the i-th position within the table. This method is called for each collision within the probe sequence.\n-  inline size_type\n-  operator()(const_key_reference r_key, std::size_t hash, size_type i) const;\n-\n-};\n+    // Transforms the const key reference r_key into the i-th position\n+    // within the table. This method is called for each collision within\n+    // the probe sequence.\n+    inline size_type\n+    operator()(key_const_reference, std::size_t, size_type) const;\n \n+  };\n+}\n #endif // #ifndef PB_DS_SAMPLE_RANGED_PROBE_FN_HPP"}, {"sha": "e51abe17e06cc607ec0dfb8873b3ad2a7e4c3e6d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/const_iterator.hpp", "status": "modified", "additions": 27, "deletions": 30, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconst_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconst_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconst_iterator.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,65 +34,61 @@\n // warranty.\n \n /**\n- * @file const_iterator.hpp\n+ * @file left_child_next_sibling_heap_/const_iterator.hpp\n  * Contains an iterator class returned by the table's const find and insert\n- *     methods.\n+ * methods.\n  */\n \n #ifndef PB_DS_LEFT_CHILD_NEXT_SIBLING_HEAP_CONST_ITERATOR_HPP\n #define PB_DS_LEFT_CHILD_NEXT_SIBLING_HEAP_CONST_ITERATOR_HPP\n \n-#include <ext/pb_ds/detail/left_child_next_sibling_heap_/const_point_iterator.hpp>\n+#include <ext/pb_ds/detail/left_child_next_sibling_heap_/point_const_iterator.hpp>\n #include <debug/debug.h>\n \n namespace __gnu_pbds\n {\n   namespace detail\n   {\n+#define PB_DS_CLASS_C_DEC  \\\n+    left_child_next_sibling_heap_const_iterator_<Node, _Alloc>\n \n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\t\\\n-    left_child_next_sibling_heap_const_iterator_<Node, Allocator>\n+#define PB_DS_BASIC_HEAP_CIT_BASE \\\n+    left_child_next_sibling_heap_node_point_const_iterator_<Node, _Alloc>\n \n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n-    left_child_next_sibling_heap_node_const_point_iterator_<Node, Allocator>\n-\n-    // Const point-type iterator.\n-    template<typename Node, class Allocator>\n-    class left_child_next_sibling_heap_const_iterator_ : public PB_DS_BASE_C_DEC\n+    /// Const point-type iterator.\n+    template<typename Node, typename _Alloc>\n+    class left_child_next_sibling_heap_const_iterator_\n+    : public PB_DS_BASIC_HEAP_CIT_BASE\n     {\n-\n     private:\n-      typedef typename PB_DS_BASE_C_DEC::node_pointer node_pointer;\n-\n-      typedef PB_DS_BASE_C_DEC base_type;\n+      typedef PB_DS_BASIC_HEAP_CIT_BASE \t      \tbase_type;\n+      typedef typename base_type::node_pointer\t\tnode_pointer;\n \n     public:\n-\n       // Category.\n-      typedef std::forward_iterator_tag iterator_category;\n+      typedef std::forward_iterator_tag \t\titerator_category;\n \n       // Difference type.\n-      typedef typename Allocator::difference_type difference_type;\n+      typedef typename _Alloc::difference_type \t\tdifference_type;\n \n       // Iterator's value type.\n-      typedef typename base_type::value_type value_type;\n+      typedef typename base_type::value_type \t\tvalue_type;\n \n       // Iterator's pointer type.\n-      typedef typename base_type::pointer pointer;\n+      typedef typename base_type::pointer \t\tpointer;\n \n       // Iterator's const pointer type.\n-      typedef typename base_type::const_pointer const_pointer;\n+      typedef typename base_type::const_pointer \tconst_pointer;\n \n       // Iterator's reference type.\n-      typedef typename base_type::reference reference;\n+      typedef typename base_type::reference \t\treference;\n \n       // Iterator's const reference type.\n-      typedef typename base_type::const_reference const_reference;\n-\n-    public:\n+      typedef typename base_type::const_reference \tconst_reference;\n \n       inline\n-      left_child_next_sibling_heap_const_iterator_(node_pointer p_nd) : base_type(p_nd)\n+      left_child_next_sibling_heap_const_iterator_(node_pointer p_nd)\n+      : base_type(p_nd)\n       { }\n \n       // Default constructor.\n@@ -115,7 +111,7 @@ namespace __gnu_pbds\n       operator!=(const PB_DS_CLASS_C_DEC& other) const\n       { return (base_type::m_p_nd != other.m_p_nd); }\n \n-      inline PB_DS_CLASS_C_DEC& \n+      inline PB_DS_CLASS_C_DEC&\n       operator++()\n       {\n \t_GLIBCXX_DEBUG_ASSERT(base_type::m_p_nd != 0);\n@@ -147,16 +143,17 @@ namespace __gnu_pbds\n \t  {\n \t    node_pointer p_next = base_type::m_p_nd;\n \t    base_type::m_p_nd = base_type::m_p_nd->m_p_prev_or_parent;\n-\t    if (base_type::m_p_nd == 0 || base_type::m_p_nd->m_p_l_child == p_next)\n+\t    if (base_type::m_p_nd == 0\n+\t\t|| base_type::m_p_nd->m_p_l_child == p_next)\n \t      return;\n \t  }\n       }\n     };\n \n #undef PB_DS_CLASS_C_DEC\n-#undef PB_DS_BASE_C_DEC\n+#undef PB_DS_BASIC_HEAP_CIT_BASE\n \n   } // namespace detail\n } // namespace __gnu_pbds\n \n-#endif \n+#endif"}, {"sha": "5cec97b327384f69687b53dc498d09248a4aff56", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconstructors_destructor_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -35,7 +35,7 @@\n // warranty.\n \n /**\n- * @file constructors_destructor_fn_imps.hpp\n+ * @file left_child_next_sibling_heap_/constructors_destructor_fn_imps.hpp\n  * Contains an implementation class for left_child_next_sibling_heap_.\n  */\n \n@@ -49,7 +49,7 @@ PB_DS_CLASS_C_DEC::s_no_throw_copies_ind;\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-left_child_next_sibling_heap_() :\n+left_child_next_sibling_heap() :\n   m_p_root(0),\n   m_size(0)\n {\n@@ -58,7 +58,7 @@ left_child_next_sibling_heap_() :\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-left_child_next_sibling_heap_(const Cmp_Fn& r_cmp_fn) :\n+left_child_next_sibling_heap(const Cmp_Fn& r_cmp_fn) :\n   Cmp_Fn(r_cmp_fn),\n   m_p_root(0),\n   m_size(0)\n@@ -68,7 +68,7 @@ left_child_next_sibling_heap_(const Cmp_Fn& r_cmp_fn) :\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-left_child_next_sibling_heap_(const PB_DS_CLASS_C_DEC& other) \n+left_child_next_sibling_heap(const PB_DS_CLASS_C_DEC& other) \n : Cmp_Fn(other), m_p_root(0), m_size(0)\n {\n   m_size = other.m_size;\n@@ -102,15 +102,15 @@ value_swap(PB_DS_CLASS_C_DEC& other)\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-~left_child_next_sibling_heap_()\n+~left_child_next_sibling_heap()\n {\n   clear();\n }\n \n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n-recursive_copy_node(const_node_pointer p_nd)\n+recursive_copy_node(node_const_pointer p_nd)\n {\n   if (p_nd == 0)\n     return (0);"}, {"sha": "500fac11207d80b4afa2d325874aaf2911561018", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/debug_fn_imps.hpp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fdebug_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file debug_fn_imps.hpp\n+ * @file left_child_next_sibling_heap_/debug_fn_imps.hpp\n  * Contains an implementation class for left_child_next_sibling_heap_.\n  */\n \n@@ -56,7 +56,7 @@ assert_valid(const char* __file, int __line) const\n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_node_consistent(const_node_pointer p_nd, bool single_link,\n+assert_node_consistent(node_const_pointer p_nd, bool single_link,\n \t\t       const char* __file, int __line) const\n {\n   if (p_nd == 0)\n@@ -73,10 +73,10 @@ assert_node_consistent(const_node_pointer p_nd, bool single_link,\n   if (p_nd->m_p_l_child == 0)\n     return;\n \n-  const_node_pointer p_child = p_nd->m_p_l_child;\n+  node_const_pointer p_child = p_nd->m_p_l_child;\n   while (p_child != 0)\n     {\n-      const_node_pointer p_next_child = p_child->m_p_next_sibling;\n+      node_const_pointer p_next_child = p_child->m_p_next_sibling;\n       PB_DS_DEBUG_VERIFY(!Cmp_Fn::operator()(p_nd->m_value, p_child->m_value));\n       p_child = p_next_child;\n     }\n@@ -102,13 +102,13 @@ assert_size(const char* __file, int __line) const\n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n-size_under_node(const_node_pointer p_nd)\n+size_under_node(node_const_pointer p_nd)\n { return 1 + size_from_node(p_nd->m_p_l_child); }\n \n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n-size_from_node(const_node_pointer p_nd)\n+size_from_node(node_const_pointer p_nd)\n {\n   size_type ret = 0;\n   while (p_nd != 0)\n@@ -122,10 +122,10 @@ size_from_node(const_node_pointer p_nd)\n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n-degree(const_node_pointer p_nd)\n+degree(node_const_pointer p_nd)\n {\n   size_type ret = 0;\n-  const_node_pointer p_child = p_nd->m_p_l_child;\n+  node_const_pointer p_child = p_nd->m_p_l_child;\n   while (p_child != 0)\n     {\n       ++ret;"}, {"sha": "c7d5602318b34efd29a7719b9ef342c1f638e135", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/erase_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Ferase_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file erase_fn_imps.hpp\n+ * @file left_child_next_sibling_heap_/erase_fn_imps.hpp\n  * Contains an implementation class for left_child_next_sibling_heap_.\n  */\n \n@@ -92,7 +92,7 @@ to_linked_list()\n       p_cur = p_cur->m_p_next_sibling;\n \n #ifdef _GLIBCXX_DEBUG\n-  const_node_pointer p_counter = m_p_root;\n+  node_const_pointer p_counter = m_p_root;\n   size_type count = 0;\n   while (p_counter != 0)\n     {"}, {"sha": "3535a0351aaf159eac06e027b282455da1a4893c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/info_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Finfo_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file info_fn_imps.hpp\n+ * @file left_child_next_sibling_heap_/info_fn_imps.hpp\n  * Contains an implementation class for left_child_next_sibling_heap_.\n  */\n "}, {"sha": "e5031c8d9d0de0233ade75ec7d026fe041210840", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/insert_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Finsert_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file insert_fn_imps.hpp\n+ * @file left_child_next_sibling_heap_/insert_fn_imps.hpp\n  * Contains an implementation class for left_child_next_sibling_heap_.\n  */\n "}, {"sha": "40b0a17c78b703345ac683d2b41c6e22fc770cd0", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/iterators_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fiterators_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fiterators_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fiterators_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file iterators_fn_imps.hpp\n+ * @file left_child_next_sibling_heap_/iterators_fn_imps.hpp\n  * Contains an implementation class for left_child_next_sibling_heap_.\n  */\n "}, {"sha": "b6f3b51710b6b00b024fe1d2b10da20ca1c1ec78", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/left_child_next_sibling_heap_.hpp", "status": "modified", "additions": 93, "deletions": 153, "changes": 246, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fleft_child_next_sibling_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fleft_child_next_sibling_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fleft_child_next_sibling_heap_.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file left_child_next_sibling_heap_.hpp\n+ * @file left_child_next_sibling_heap_/left_child_next_sibling_heap_.hpp\n  * Contains an implementation class for a basic heap.\n  */\n \n@@ -49,159 +49,102 @@\n #include <ext/pb_ds/detail/cond_dealtor.hpp>\n #include <ext/pb_ds/detail/type_utils.hpp>\n #include <ext/pb_ds/detail/left_child_next_sibling_heap_/node.hpp>\n-#include <ext/pb_ds/detail/left_child_next_sibling_heap_/const_point_iterator.hpp>\n+#include <ext/pb_ds/detail/left_child_next_sibling_heap_/point_const_iterator.hpp>\n #include <ext/pb_ds/detail/left_child_next_sibling_heap_/const_iterator.hpp>\n #ifdef PB_DS_LC_NS_HEAP_TRACE_\n #include <iostream>\n-#endif \n+#endif\n #include <debug/debug.h>\n \n namespace __gnu_pbds\n {\n   namespace detail\n   {\n-\n-#ifdef _GLIBCXX_DEBUG\n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n-    template<\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\ttypename Value_Type,\t\\\n-\t\t\t\t\t\tclass Cmp_Fn,\t\t\\\n-\t\t\t\t\t\ttypename Node_Metadata,\t\\\n-\t\t\t\t\t\tclass Allocator,\t\\\n-\t\t\t\t\t\tbool Single_Link_Roots>\n-#else \n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n-    template<\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\ttypename Value_Type,\t\\\n-\t\t\t\t\t\tclass Cmp_Fn,\t\t\\\n-\t\t\t\t\t\ttypename Node_Metadata,\t\\\n-\t\t\t\t\t\tclass Allocator>\n-#endif \n-\n-#ifdef _GLIBCXX_DEBUG\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\t\\\n-    left_child_next_sibling_heap_<\t\t\t\t\t\\\n-\t\t\t\t\t\t\tValue_Type,\t\\\n-\t\t\t\t\t\t\tCmp_Fn,\t\t\\\n-\t\t\t\t\t\t\tNode_Metadata,\t\\\n-\t\t\t\t\t\t\tAllocator,\t\\\n-\t\t\t\t\t\t\tSingle_Link_Roots>\n-#else \n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\t\\\n-    left_child_next_sibling_heap_<\t\t\t\t\t\\\n-\t\t\t\t\t\t\tValue_Type,\t\\\n-\t\t\t\t\t\t\tCmp_Fn,\t\t\\\n-\t\t\t\t\t\t\tNode_Metadata,\t\\\n-\t\t\t\t\t\t\tAllocator>\n-#endif \n-\n-    /**\n-     * class description = \"Base class for some types of h3ap$\">\n-     **/\n #ifdef _GLIBCXX_DEBUG\n+#define PB_DS_CLASS_T_DEC \\\n+    template<typename Value_Type, typename Cmp_Fn, typename Node_Metadata, \\\n+\t     typename _Alloc, bool Single_Link_Roots>\n+\n+#define PB_DS_CLASS_C_DEC \\\n+    left_child_next_sibling_heap<Value_Type, Cmp_Fn, Node_Metadata,\t\\\n+\t\t\t\t  _Alloc, Single_Link_Roots>\n+#else\n+#define PB_DS_CLASS_T_DEC \\\n+    template<typename Value_Type, typename Cmp_Fn, typename Node_Metadata, \\\n+\t     typename _Alloc>\n+\n+#define PB_DS_CLASS_C_DEC \\\n+    left_child_next_sibling_heap<Value_Type, Cmp_Fn, Node_Metadata, _Alloc>\n+#endif\n+\n+    /// Base class for a basic heap.\n     template<typename Value_Type,\n-\t     class Cmp_Fn,\n+\t     typename Cmp_Fn,\n \t     typename Node_Metadata,\n-\t     class Allocator,\n-\t     bool Single_Link_Roots>\n-#else \n-    template<typename Value_Type,\n-\t     class Cmp_Fn,\n-\t     typename Node_Metadata,\n-\t     class Allocator>\n-#endif \n-    class left_child_next_sibling_heap_ : public Cmp_Fn\n+\t     typename _Alloc\n+#ifdef _GLIBCXX_DEBUG\n+\t     ,bool Single_Link_Roots>\n+#else\n+\t     >\n+#endif\n+    class left_child_next_sibling_heap : public Cmp_Fn\n     {\n-\n     protected:\n       typedef\n-      typename Allocator::template rebind<\n-      left_child_next_sibling_heap_node_<\n-      Value_Type,\n-      Node_Metadata,\n-      Allocator> >::other\n+      typename _Alloc::template rebind<\n+      left_child_next_sibling_heap_node_<Value_Type, Node_Metadata, \n+\t\t\t\t\t _Alloc> >::other\n       node_allocator;\n \n-      typedef typename node_allocator::value_type node;\n-\n-      typedef typename node_allocator::pointer node_pointer;\n-\n-      typedef typename node_allocator::const_pointer const_node_pointer;\n-\n+      typedef typename node_allocator::value_type     \tnode;\n+      typedef typename node_allocator::pointer \t\tnode_pointer;\n+      typedef typename node_allocator::const_pointer\tnode_const_pointer;\n       typedef Node_Metadata node_metadata;\n-\n-      typedef std::pair< node_pointer, node_pointer> node_pointer_pair;\n+      typedef std::pair< node_pointer, node_pointer> \tnode_pointer_pair;\n \n     private:\n-      typedef cond_dealtor< node, Allocator> cond_dealtor_t;\n+      typedef cond_dealtor< node, _Alloc> \t\tcond_dealtor_t;\n \n       enum\n \t{\n \t  simple_value = is_simple<Value_Type>::value\n \t};\n \n-      typedef integral_constant<int, simple_value> no_throw_copies_t;\n+      typedef integral_constant<int, simple_value> \tno_throw_copies_t;\n+      typedef typename _Alloc::template rebind<Value_Type>\t__rebind_v;\n \n     public:\n+      typedef typename _Alloc::size_type \t\tsize_type;\n+      typedef typename _Alloc::difference_type \tdifference_type;\n+      typedef Value_Type \t\t\t\tvalue_type;\n \n-      typedef typename Allocator::size_type size_type;\n-\n-      typedef typename Allocator::difference_type difference_type;\n+      typedef typename __rebind_v::other::pointer \tpointer;\n+      typedef typename __rebind_v::other::const_pointer const_pointer;\n+      typedef typename __rebind_v::other::reference\treference;\n+      typedef typename __rebind_v::other::const_reference const_reference;\n \n-      typedef Value_Type value_type;\n+      typedef left_child_next_sibling_heap_node_point_const_iterator_<node, _Alloc>\n+      point_const_iterator;\n \n-      typedef\n-      typename Allocator::template rebind<\n-\tvalue_type>::other::pointer\n-      pointer;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tvalue_type>::other::const_pointer\n-      const_pointer;\n+      typedef point_const_iterator \t\t\tpoint_iterator;\n \n-      typedef\n-      typename Allocator::template rebind<\n-\tvalue_type>::other::reference\n-      reference;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tvalue_type>::other::const_reference\n-      const_reference;\n-\n-      typedef\n-      left_child_next_sibling_heap_node_const_point_iterator_<\n-\tnode,\n-\tAllocator>\n-      const_point_iterator;\n-\n-      typedef const_point_iterator point_iterator;\n-\n-      typedef\n-      left_child_next_sibling_heap_const_iterator_<\n-\tnode,\n-\tAllocator>\n+      typedef left_child_next_sibling_heap_const_iterator_<node, _Alloc>\n       const_iterator;\n \n-      typedef const_iterator iterator;\n-\n-      typedef Cmp_Fn cmp_fn;\n-\n-      typedef Allocator allocator_type;\n+      typedef const_iterator \t\t\t\titerator;\n+      typedef Cmp_Fn \t\t\t\t\tcmp_fn;\n+      typedef _Alloc \t\t\t\t\tallocator_type;\n \n     public:\n \n-      left_child_next_sibling_heap_();\n-\n-      left_child_next_sibling_heap_(const Cmp_Fn& r_cmp_fn);\n-\n-      left_child_next_sibling_heap_(const PB_DS_CLASS_C_DEC& other);\n+      left_child_next_sibling_heap();\n+      left_child_next_sibling_heap(const Cmp_Fn&);\n+      left_child_next_sibling_heap(const left_child_next_sibling_heap&);\n \n       void\n-      swap(PB_DS_CLASS_C_DEC& other);\n+      swap(PB_DS_CLASS_C_DEC&);\n \n-      ~left_child_next_sibling_heap_();\n+      ~left_child_next_sibling_heap();\n \n       inline bool\n       empty() const;\n@@ -212,10 +155,10 @@ namespace __gnu_pbds\n       inline size_type\n       max_size() const;\n \n-      Cmp_Fn& \n+      Cmp_Fn&\n       get_cmp_fn();\n \n-      const Cmp_Fn& \n+      const Cmp_Fn&\n       get_cmp_fn() const;\n \n       inline iterator\n@@ -236,100 +179,97 @@ namespace __gnu_pbds\n #ifdef PB_DS_LC_NS_HEAP_TRACE_\n       void\n       trace() const;\n-#endif \n+#endif\n \n     protected:\n \n       inline node_pointer\n-      get_new_node_for_insert(const_reference r_val);\n+      get_new_node_for_insert(const_reference);\n \n       inline static void\n-      make_child_of(node_pointer p_nd, node_pointer p_new_parent);\n+      make_child_of(node_pointer, node_pointer);\n \n       void\n-      value_swap(PB_DS_CLASS_C_DEC& other);\n+      value_swap(left_child_next_sibling_heap&);\n \n       inline static node_pointer\n-      parent(node_pointer p_nd);\n+      parent(node_pointer);\n \n       inline void\n-      swap_with_parent(node_pointer p_nd, node_pointer p_parent);\n+      swap_with_parent(node_pointer, node_pointer);\n \n       void\n-      bubble_to_top(node_pointer p_nd);\n+      bubble_to_top(node_pointer);\n \n       inline void\n-      actual_erase_node(node_pointer p_nd);\n+      actual_erase_node(node_pointer);\n \n       void\n-      clear_imp(node_pointer p_nd);\n+      clear_imp(node_pointer);\n \n       void\n       to_linked_list();\n \n       template<typename Pred>\n       node_pointer\n-      prune(Pred pred);\n+      prune(Pred);\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid(const char* file, int line) const;\n+      assert_valid(const char*, int) const;\n \n       void\n-      assert_node_consistent(const_node_pointer p_nd, bool single_link,\n-\t\t\t     const char* file, int line) const;\n+      assert_node_consistent(node_const_pointer, bool, const char*, int) const;\n \n       static size_type\n-      size_under_node(const_node_pointer p_nd);\n+      size_under_node(node_const_pointer);\n \n       static size_type\n-      degree(const_node_pointer p_nd);\n-#endif \n+      degree(node_const_pointer);\n+#endif\n \n #ifdef PB_DS_LC_NS_HEAP_TRACE_\n       static void\n-      trace_node(const_node_pointer, size_type level);\n-#endif \n-\n-    protected:\n-      node_pointer m_p_root;\n-\n-      size_type m_size;\n+      trace_node(node_const_pointer, size_type);\n+#endif\n \n     private:\n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_iterators(const char* file, int line) const;\n+      assert_iterators(const char*, int) const;\n \n       void\n-      assert_size(const char* file, int line) const;\n+      assert_size(const char*, int) const;\n \n       static size_type\n-      size_from_node(const_node_pointer p_nd);\n-#endif \n+      size_from_node(node_const_pointer);\n+#endif\n \n       node_pointer\n-      recursive_copy_node(const_node_pointer p_nd);\n+      recursive_copy_node(node_const_pointer);\n \n       inline node_pointer\n-      get_new_node_for_insert(const_reference r_val, false_type);\n+      get_new_node_for_insert(const_reference, false_type);\n \n       inline node_pointer\n-      get_new_node_for_insert(const_reference r_val, true_type);\n+      get_new_node_for_insert(const_reference, true_type);\n \n #ifdef PB_DS_LC_NS_HEAP_TRACE_\n       template<typename Metadata_>\n       static void\n-      trace_node_metadata(const_node_pointer p_nd, type_to_type<Metadata_>);\n+      trace_node_metadata(node_const_pointer, type_to_type<Metadata_>);\n \n       static void\n-      trace_node_metadata(const_node_pointer, type_to_type<null_left_child_next_sibling_heap_node_metadata>);\n-#endif \n+      trace_node_metadata(node_const_pointer,\n+\t\t\t  type_to_type<null_type>);\n+#endif\n+    protected:\n+      node_pointer \t\tm_p_root;\n+      size_type \t\tm_size;\n \n     private:\n-      static node_allocator s_node_allocator;\n-\n-      static no_throw_copies_t s_no_throw_copies_ind;\n+      static node_allocator \ts_node_allocator;\n+      static no_throw_copies_t \ts_no_throw_copies_ind;\n     };\n \n #include <ext/pb_ds/detail/left_child_next_sibling_heap_/constructors_destructor_fn_imps.hpp>\n@@ -347,4 +287,4 @@ namespace __gnu_pbds\n   } // namespace detail\n } // namespace __gnu_pbds\n \n-#endif \n+#endif"}, {"sha": "d74b86c42d94123cb7c10ae837be6b58cbac24da", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/node.hpp", "status": "modified", "additions": 23, "deletions": 56, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fnode.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fnode.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fnode.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,87 +34,54 @@\n // warranty.\n \n /**\n- * @file node.hpp\n+ * @file left_child_next_sibling_heap_/node.hpp\n  * Contains an implementation struct for this type of heap's node.\n  */\n \n #ifndef PB_DS_LEFT_CHILD_NEXT_SIBLING_HEAP_NODE_HPP\n #define PB_DS_LEFT_CHILD_NEXT_SIBLING_HEAP_NODE_HPP\n \n-#include <ext/pb_ds/detail/left_child_next_sibling_heap_/null_metadata.hpp>\n-\n namespace __gnu_pbds\n {\n   namespace detail\n   {\n-\n-    template<typename Value_Type, typename Metadata_Type, class Allocator>\n+    /// Node.\n+    template<typename _Value, typename _Metadata, typename _Alloc>\n     struct left_child_next_sibling_heap_node_\n     {\n     private:\n-      typedef\n-      left_child_next_sibling_heap_node_<\n-      Value_Type,\n-      Metadata_Type,\n-      Allocator>\n-      this_type;\n-\n-    public:\n-      typedef typename Allocator::size_type size_type;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tthis_type>::other::pointer\n-      node_pointer;\n-\n-      typedef Value_Type value_type;\n-\n-      typedef Metadata_Type metadata_type;\n+      typedef left_child_next_sibling_heap_node_<_Value, _Metadata, _Alloc> this_type;\n \n     public:\n-      value_type m_value;\n+      typedef _Value \t\t\t\tvalue_type;\n+      typedef typename _Alloc::size_type \tsize_type;\n+      typedef _Metadata \t\t\tmetadata_type;\n \n-      metadata_type m_metadata;\n+      typedef typename _Alloc::template rebind<this_type>::other::pointer node_pointer;\n \n-      node_pointer m_p_l_child;\n-\n-      node_pointer m_p_next_sibling;\n-\n-      node_pointer m_p_prev_or_parent;\n+      value_type \tm_value;\n+      metadata_type \tm_metadata;\n+      node_pointer \tm_p_l_child;\n+      node_pointer \tm_p_next_sibling;\n+      node_pointer \tm_p_prev_or_parent;\n     };\n \n-    template<typename Value_Type, class Allocator>\n-    struct left_child_next_sibling_heap_node_<\n-      Value_Type,\n-      null_left_child_next_sibling_heap_node_metadata,\n-      Allocator>\n+    template<typename _Value, typename _Alloc>\n+    struct left_child_next_sibling_heap_node_<_Value, null_type, _Alloc>\n     {\n     private:\n-      typedef\n-      left_child_next_sibling_heap_node_<\n-      Value_Type,\n-      null_left_child_next_sibling_heap_node_metadata,\n-      Allocator>\n-      this_type;\n+      typedef left_child_next_sibling_heap_node_<_Value, null_type, _Alloc> this_type;\n \n     public:\n-      typedef typename Allocator::size_type size_type;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tthis_type>::other::pointer\n-      node_pointer;\n-\n-      typedef Value_Type value_type;\n-\n-    public:\n-      value_type m_value;\n-\n-      node_pointer m_p_l_child;\n+      typedef _Value \t\t\t\tvalue_type;\n+      typedef typename _Alloc::size_type \tsize_type;\n \n-      node_pointer m_p_next_sibling;\n+      typedef typename _Alloc::template rebind<this_type>::other::pointer node_pointer;\n \n-      node_pointer m_p_prev_or_parent;\n+      value_type \tm_value;\n+      node_pointer \tm_p_l_child;\n+      node_pointer \tm_p_next_sibling;\n+      node_pointer \tm_p_prev_or_parent;\n     };\n \n   } // namespace detail"}, {"sha": "5b29254f6aa9a03ce5579d061a0a5712c925b499", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/point_const_iterator.hpp", "status": "renamed", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fpoint_const_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fpoint_const_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fpoint_const_iterator.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,9 +34,9 @@\n // warranty.\n \n /**\n- * @file const_point_iterator.hpp\n+ * @file left_child_next_sibling_heap_/point_const_iterator.hpp\n  * Contains an iterator class returned by the table's const find and insert\n- *     methods.\n+ * methods.\n  */\n \n #ifndef PB_DS_LEFT_CHILD_NEXT_SIBLING_HEAP_CONST_FIND_ITERATOR_HPP\n@@ -51,18 +51,18 @@ namespace __gnu_pbds\n   {\n \n #define PB_DS_CLASS_T_DEC\t\t\t\\\n-    template<typename Node, class Allocator>\n+    template<typename Node, typename _Alloc>\n \n #define PB_DS_CLASS_C_DEC \\\n-    left_child_next_sibling_heap_node_const_point_iterator_<Node, Allocator>\n+    left_child_next_sibling_heap_node_point_const_iterator_<Node, _Alloc>\n \n-    // Const point-type iterator.\n-    template<typename Node, class Allocator>\n-    class left_child_next_sibling_heap_node_const_point_iterator_\n+    /// Const point-type iterator.\n+    template<typename Node, typename _Alloc>\n+    class left_child_next_sibling_heap_node_point_const_iterator_\n     {\n \n     protected:\n-      typedef typename Allocator::template rebind<Node>::other::pointer node_pointer;\n+      typedef typename _Alloc::template rebind<Node>::other::pointer node_pointer;\n \n     public:\n \n@@ -77,42 +77,42 @@ namespace __gnu_pbds\n \n       // Iterator's pointer type.\n       typedef\n-      typename Allocator::template rebind<\n+      typename _Alloc::template rebind<\n \tvalue_type>::other::pointer\n       pointer;\n \n       // Iterator's const pointer type.\n       typedef\n-      typename Allocator::template rebind<\n+      typename _Alloc::template rebind<\n \tvalue_type>::other::const_pointer\n       const_pointer;\n \n       // Iterator's reference type.\n       typedef\n-      typename Allocator::template rebind<\n+      typename _Alloc::template rebind<\n \tvalue_type>::other::reference\n       reference;\n \n       // Iterator's const reference type.\n       typedef\n-      typename Allocator::template rebind<\n+      typename _Alloc::template rebind<\n \tvalue_type>::other::const_reference\n       const_reference;\n \n     public:\n \n       inline\n-      left_child_next_sibling_heap_node_const_point_iterator_(node_pointer p_nd) : m_p_nd(p_nd)\n+      left_child_next_sibling_heap_node_point_const_iterator_(node_pointer p_nd) : m_p_nd(p_nd)\n       { }\n \n       // Default constructor.\n       inline\n-      left_child_next_sibling_heap_node_const_point_iterator_() : m_p_nd(0)\n+      left_child_next_sibling_heap_node_point_const_iterator_() : m_p_nd(0)\n       { }\n \n       // Copy constructor.\n       inline\n-      left_child_next_sibling_heap_node_const_point_iterator_(const PB_DS_CLASS_C_DEC& other) : m_p_nd(other.m_p_nd)\n+      left_child_next_sibling_heap_node_point_const_iterator_(const PB_DS_CLASS_C_DEC& other) : m_p_nd(other.m_p_nd)\n       { }\n \n       // Access.", "previous_filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/const_point_iterator.hpp"}, {"sha": "b2d0d8527d71669e29e3267fb76b0e6cb3713fe4", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/policy_access_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fpolicy_access_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fpolicy_access_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fpolicy_access_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file policy_access_fn_imps.hpp\n+ * @file left_child_next_sibling_heap_/policy_access_fn_imps.hpp\n  * Contains an implementation class for left_child_next_sibling_heap_.\n  */\n "}, {"sha": "28ee13e91224b8ab8c773c3fb2b66a52d51132c0", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/trace_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Ftrace_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Ftrace_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Ftrace_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file trace_fn_imps.hpp\n+ * @file left_child_next_sibling_heap_/trace_fn_imps.hpp\n  * Contains an implementation class for left_child_next_sibling_heap_.\n  */\n \n@@ -46,16 +46,14 @@ PB_DS_CLASS_C_DEC::\n trace() const\n {\n   std::cerr << std::endl;\n-\n   trace_node(m_p_root, 0);\n-\n   std::cerr << std::endl;\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-trace_node(const_node_pointer p_nd, size_type level)\n+trace_node(node_const_pointer p_nd, size_type level)\n {\n   while (p_nd != 0)\n     {\n@@ -68,11 +66,8 @@ trace_node(const_node_pointer p_nd, size_type level)\n \t\" left = \" << p_nd->m_p_l_child << \" \";\n \n       trace_node_metadata(p_nd, type_to_type<node_metadata>());\n-\n       std::cerr << p_nd->m_value << std::endl;\n-\n       trace_node(p_nd->m_p_l_child, level + 1);\n-\n       p_nd = p_nd->m_p_next_sibling;\n     }\n }\n@@ -81,15 +76,15 @@ PB_DS_CLASS_T_DEC\n template<typename Metadata_>\n void\n PB_DS_CLASS_C_DEC::\n-trace_node_metadata(const_node_pointer p_nd, type_to_type<Metadata_>)\n+trace_node_metadata(node_const_pointer p_nd, type_to_type<Metadata_>)\n {\n   std::cerr << \"(\" << p_nd->m_metadata << \") \";\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-trace_node_metadata(const_node_pointer, type_to_type<null_left_child_next_sibling_heap_node_metadata>)\n+trace_node_metadata(node_const_pointer, type_to_type<null_type>)\n { }\n \n #endif // #ifdef PB_DS_LC_NS_HEAP_TRACE_"}, {"sha": "8ec39a6acefd7c532d227abde60f713e601afe10", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/constructor_destructor_fn_imps.hpp", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fconstructor_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fconstructor_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fconstructor_destructor_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -35,8 +35,7 @@\n // warranty.\n \n /**\n- * @file constructor_destructor_fn_imps.hpp\n- * Contains implementations of PB_DS_CLASS_NAME.\n+ * @file list_update_map_/constructor_destructor_fn_imps.hpp\n  */\n \n PB_DS_CLASS_T_DEC\n@@ -47,7 +46,7 @@ PB_DS_CLASS_T_DEC\n Eq_Fn PB_DS_CLASS_C_DEC::s_eq_fn;\n \n PB_DS_CLASS_T_DEC\n-null_lu_metadata PB_DS_CLASS_C_DEC::s_null_lu_metadata;\n+null_type PB_DS_CLASS_C_DEC::s_null_type;\n \n PB_DS_CLASS_T_DEC\n Update_Policy PB_DS_CLASS_C_DEC::s_update_policy;\n@@ -68,33 +67,33 @@ copy_from_range(It first_it, It last_it)\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME() : m_p_l(0)\n+PB_DS_LU_NAME() : m_p_l(0)\n { PB_DS_ASSERT_VALID((*this)) }\n \n PB_DS_CLASS_T_DEC\n template<typename It>\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME(It first_it, It last_it) : m_p_l(0)\n+PB_DS_LU_NAME(It first_it, It last_it) : m_p_l(0)\n {\n   copy_from_range(first_it, last_it);\n   PB_DS_ASSERT_VALID((*this));\n }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) : \n+PB_DS_LU_NAME(const PB_DS_CLASS_C_DEC& other) :\n m_p_l(0)\n {\n   __try\n     {\n       for (const_iterator it = other.begin(); it != other.end(); ++it)\n-        {\n-\t  entry_pointer p_l = allocate_new_entry(*it, \n-\t\t\tPB_DS_TYPES_TRAITS_C_DEC::m_no_throw_copies_indicator);\n+\t{\n+\t  entry_pointer p_l = allocate_new_entry(*it,\n+\t\t\t\t      traits_base::m_no_throw_copies_indicator);\n \n \t  p_l->m_p_next = m_p_l;\n \t  m_p_l = p_l;\n-        }\n+\t}\n     }\n   __catch(...)\n     {\n@@ -134,6 +133,5 @@ deallocate_all()\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-~PB_DS_CLASS_NAME()\n+~PB_DS_LU_NAME()\n { deallocate_all(); }\n-"}, {"sha": "510c9050015f3518071b87e732075c8d6df51b09", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/debug_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fdebug_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file debug_fn_imps.hpp\n+ * @file list_update_map_/debug_fn_imps.hpp\n  * Contains implementations of cc_ht_map_'s debug-mode functions.\n  */\n "}, {"sha": "f1e440a72a0557e8cde2dc0ce8026c213133c42f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/entry_metadata_base.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fentry_metadata_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fentry_metadata_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fentry_metadata_base.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file entry_metadata_base.hpp\n+ * @file list_update_map_/entry_metadata_base.hpp\n  * Contains an implementation for a list update map.\n  */\n \n@@ -52,7 +52,7 @@ namespace __gnu_pbds\n     };\n     \n     template<>\n-    struct lu_map_entry_metadata_base<null_lu_metadata>\n+    struct lu_map_entry_metadata_base<null_type>\n     { };  \n   } // namespace detail\n } // namespace __gnu_pbds"}, {"sha": "bbd7b8355eaa0855b6ea27170b0e7c33d5780883", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/erase_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ferase_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,14 +34,14 @@\n // warranty.\n \n /**\n- * @file erase_fn_imps.hpp\n+ * @file list_update_map_/erase_fn_imps.hpp\n  * Contains implementations of lu_map_.\n  */\n \n PB_DS_CLASS_T_DEC\n inline bool\n PB_DS_CLASS_C_DEC::\n-erase(const_key_reference r_key)\n+erase(key_const_reference r_key)\n {\n   PB_DS_ASSERT_VALID((*this))\n   if (m_p_l == 0)"}, {"sha": "0d5f98aaf7e7765ee0936c88f8778a607120a6a0", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/find_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ffind_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,14 +34,14 @@\n // warranty.\n \n /**\n- * @file find_fn_imps.hpp\n+ * @file list_update_map_/find_fn_imps.hpp\n  * Contains implementations of lu_map_.\n  */\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::entry_pointer\n PB_DS_CLASS_C_DEC::\n-find_imp(const_key_reference r_key) const\n+find_imp(key_const_reference r_key) const\n {\n   if (m_p_l == 0)\n     return 0;\n@@ -85,6 +85,6 @@ apply_update(entry_pointer p_l, type_to_type<Metadata>)\n PB_DS_CLASS_T_DEC\n inline bool\n PB_DS_CLASS_C_DEC::\n-apply_update(entry_pointer, type_to_type<null_lu_metadata>)\n-{ return s_update_policy(s_null_lu_metadata); }\n+apply_update(entry_pointer, type_to_type<null_type>)\n+{ return s_update_policy(s_null_type); }\n "}, {"sha": "294d73a0187bb72868015e95dfbdead2a8cbf601", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/info_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finfo_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file info_fn_imps.hpp\n+ * @file list_update_map_/info_fn_imps.hpp\n  * Contains implementations of lu_map_.\n  */\n "}, {"sha": "9c250df49a1f4e7717f08e2042c0e9ee619fd99c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/insert_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finsert_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file insert_fn_imps.hpp\n+ * @file list_update_map_/insert_fn_imps.hpp\n  * Contains implementations of lu_map_.\n  */\n \n@@ -101,6 +101,6 @@ init_entry_metadata(entry_pointer p_l, type_to_type<Metadata>)\n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n-init_entry_metadata(entry_pointer, type_to_type<null_lu_metadata>)\n+init_entry_metadata(entry_pointer, type_to_type<null_type>)\n { }\n "}, {"sha": "2a1aa6c9dd039ab072b9f23c7853ba57ccb1990d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/iterators_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fiterators_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fiterators_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fiterators_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file iterators_fn_imps.hpp\n+ * @file list_update_map_/iterators_fn_imps.hpp\n  * Contains implementations of lu_map_.\n  */\n "}, {"sha": "9e48f17f7cdef03490aee58b33ba67a4d81ff5ed", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/lu_map_.hpp", "status": "modified", "additions": 75, "deletions": 91, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Flu_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Flu_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Flu_map_.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file lu_map_.hpp\n+ * @file list_update_map_/lu_map_.hpp\n  * Contains a list update map.\n  */\n \n@@ -47,82 +47,70 @@\n #include <ext/pb_ds/exception.hpp>\n #ifdef _GLIBCXX_DEBUG\n #include <ext/pb_ds/detail/debug_map_base.hpp>\n-#endif \n+#endif\n #ifdef PB_DS_LU_MAP_TRACE_\n #include <iostream>\n-#endif \n+#endif\n #include <debug/debug.h>\n \n namespace __gnu_pbds\n {\n   namespace detail\n   {\n-#define PB_DS_CLASS_T_DEC \\\n-    template<typename Key, typename Mapped, class Eq_Fn, \\\n-\t     class Allocator, class Update_Policy>\n-\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-#define PB_DS_CLASS_NAME lu_map_data_\n-#endif \n+#define PB_DS_LU_NAME lu_map\n+#endif\n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n-#define PB_DS_CLASS_NAME lu_map_no_data_\n-#endif \n+#define PB_DS_LU_NAME lu_set\n+#endif\n+\n+#define PB_DS_CLASS_T_DEC \\\n+    template<typename Key, typename Mapped, typename Eq_Fn, \\\n+\t     typename _Alloc, typename Update_Policy>\n \n #define PB_DS_CLASS_C_DEC \\\n-    PB_DS_CLASS_NAME<Key, Mapped, Eq_Fn, Allocator, Update_Policy>\n+    PB_DS_LU_NAME<Key, Mapped, Eq_Fn, _Alloc, Update_Policy>\n \n-#define PB_DS_TYPES_TRAITS_C_DEC \\\n-    types_traits<Key, Mapped, Allocator, false>\n+#define PB_DS_LU_TRAITS_BASE \\\n+    types_traits<Key, Mapped, _Alloc, false>\n \n #ifdef _GLIBCXX_DEBUG\n #define PB_DS_DEBUG_MAP_BASE_C_DEC \\\n     debug_map_base<Key, Eq_Fn, \\\n-\t      typename Allocator::template rebind<Key>::other::const_reference>\n-#endif \n-\n-#ifdef PB_DS_DATA_TRUE_INDICATOR\n-#define PB_DS_V2F(X) (X).first\n-#define PB_DS_V2S(X) (X).second\n-#define PB_DS_EP2VP(X)& ((X)->m_value)\n-#endif \n-\n-#ifdef PB_DS_DATA_FALSE_INDICATOR\n-#define PB_DS_V2F(X) (X)\n-#define PB_DS_V2S(X) Mapped_Data()\n-#define PB_DS_EP2VP(X)& ((X)->m_value.first)\n-#endif \n+\t      typename _Alloc::template rebind<Key>::other::const_reference>\n+#endif\n \n-    /* Skip to the lu, my darling. */\n-    // list-based (with updates) associative container.\n+    /// list-based (with updates) associative container.\n+    /// Skip to the lu, my darling.\n     template<typename Key,\n \t     typename Mapped,\n-\t     class Eq_Fn,\n-\t     class Allocator,\n-\t     class Update_Policy>\n-    class PB_DS_CLASS_NAME :\n+\t     typename Eq_Fn,\n+\t     typename _Alloc,\n+\t     typename Update_Policy>\n+    class PB_DS_LU_NAME :\n #ifdef _GLIBCXX_DEBUG\n       protected PB_DS_DEBUG_MAP_BASE_C_DEC,\n-#endif \n-      public PB_DS_TYPES_TRAITS_C_DEC\n+#endif\n+      public PB_DS_LU_TRAITS_BASE\n     {\n     private:\n-      typedef PB_DS_TYPES_TRAITS_C_DEC traits_base;\n+      typedef PB_DS_LU_TRAITS_BASE \t       \ttraits_base;\n \n-      struct entry \n+      struct entry\n      : public lu_map_entry_metadata_base<typename Update_Policy::metadata_type>\n       {\n \ttypename traits_base::value_type m_value;\n-\ttypename Allocator::template rebind<entry>::other::pointer m_p_next;\n+\ttypename _Alloc::template rebind<entry>::other::pointer m_p_next;\n       };\n \n-      typedef typename Allocator::template rebind<entry>::other entry_allocator;\n+      typedef typename _Alloc::template rebind<entry>::other entry_allocator;\n       typedef typename entry_allocator::pointer entry_pointer;\n       typedef typename entry_allocator::const_pointer const_entry_pointer;\n       typedef typename entry_allocator::reference entry_reference;\n       typedef typename entry_allocator::const_reference const_entry_reference;\n \n-      typedef typename Allocator::template rebind<entry_pointer>::other entry_pointer_allocator;\n+      typedef typename _Alloc::template rebind<entry_pointer>::other entry_pointer_allocator;\n       typedef typename entry_pointer_allocator::pointer entry_pointer_array;\n \n       typedef typename traits_base::value_type value_type_;\n@@ -133,7 +121,7 @@ namespace __gnu_pbds\n \n #define PB_DS_GEN_POS entry_pointer\n \n-#include <ext/pb_ds/detail/unordered_iterator/const_point_iterator.hpp>\n+#include <ext/pb_ds/detail/unordered_iterator/point_const_iterator.hpp>\n #include <ext/pb_ds/detail/unordered_iterator/point_iterator.hpp>\n #include <ext/pb_ds/detail/unordered_iterator/const_iterator.hpp>\n #include <ext/pb_ds/detail/unordered_iterator/iterator.hpp>\n@@ -143,63 +131,63 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n       typedef PB_DS_DEBUG_MAP_BASE_C_DEC debug_base;\n-#endif \n+#endif\n \n-      typedef cond_dealtor<entry, Allocator> cond_dealtor_t;\n+      typedef cond_dealtor<entry, _Alloc> cond_dealtor_t;\n \n     public:\n-      typedef Allocator allocator_type;\n-      typedef typename Allocator::size_type size_type;\n-      typedef typename Allocator::difference_type difference_type;\n+      typedef _Alloc allocator_type;\n+      typedef typename _Alloc::size_type size_type;\n+      typedef typename _Alloc::difference_type difference_type;\n       typedef Eq_Fn eq_fn;\n       typedef Update_Policy update_policy;\n       typedef typename Update_Policy::metadata_type update_metadata;\n       typedef typename traits_base::key_type key_type;\n       typedef typename traits_base::key_pointer key_pointer;\n-      typedef typename traits_base::const_key_pointer const_key_pointer;\n+      typedef typename traits_base::key_const_pointer key_const_pointer;\n       typedef typename traits_base::key_reference key_reference;\n-      typedef typename traits_base::const_key_reference const_key_reference;\n+      typedef typename traits_base::key_const_reference key_const_reference;\n       typedef typename traits_base::mapped_type mapped_type;\n       typedef typename traits_base::mapped_pointer mapped_pointer;\n-      typedef typename traits_base::const_mapped_pointer const_mapped_pointer;\n+      typedef typename traits_base::mapped_const_pointer mapped_const_pointer;\n       typedef typename traits_base::mapped_reference mapped_reference;\n-      typedef typename traits_base::const_mapped_reference const_mapped_reference;\n+      typedef typename traits_base::mapped_const_reference mapped_const_reference;\n       typedef typename traits_base::value_type value_type;\n       typedef typename traits_base::pointer pointer;\n       typedef typename traits_base::const_pointer const_pointer;\n       typedef typename traits_base::reference reference;\n       typedef typename traits_base::const_reference const_reference;\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-      typedef point_iterator_ point_iterator;\n-#endif \n+      typedef point_iterator_ \t\t\tpoint_iterator;\n+#endif\n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n-      typedef const_point_iterator_ point_iterator;\n-#endif \n+      typedef point_const_iterator_ \t\tpoint_iterator;\n+#endif\n \n-      typedef const_point_iterator_ const_point_iterator;\n+      typedef point_const_iterator_ \t\tpoint_const_iterator;\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-      typedef iterator_ iterator;\n-#endif \n+      typedef iterator_ \t\t\titerator;\n+#endif\n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n-      typedef const_iterator_ iterator;\n-#endif \n+      typedef const_iterator_ \t\t\titerator;\n+#endif\n \n-      typedef const_iterator_ const_iterator;\n+      typedef const_iterator_ \t\t\tconst_iterator;\n \n     public:\n-      PB_DS_CLASS_NAME();\n+      PB_DS_LU_NAME();\n \n-      PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC&);\n+      PB_DS_LU_NAME(const PB_DS_CLASS_C_DEC&);\n \n       virtual\n-      ~PB_DS_CLASS_NAME();\n+      ~PB_DS_LU_NAME();\n \n       template<typename It>\n-      PB_DS_CLASS_NAME(It first_it, It last_it);\n+      PB_DS_LU_NAME(It, It);\n \n       void\n       swap(PB_DS_CLASS_C_DEC&);\n@@ -214,38 +202,38 @@ namespace __gnu_pbds\n       empty() const;\n \n       inline mapped_reference\n-      operator[](const_key_reference r_key)\n+      operator[](key_const_reference r_key)\n       {\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n \t_GLIBCXX_DEBUG_ONLY(assert_valid(__FILE__, __LINE__);)\n \treturn insert(std::make_pair(r_key, mapped_type())).first->second;\n-#else \n+#else\n \tinsert(r_key);\n-\treturn traits_base::s_null_mapped;\n-#endif \n+\treturn traits_base::s_null_type;\n+#endif\n       }\n \n       inline std::pair<point_iterator, bool>\n       insert(const_reference);\n \n       inline point_iterator\n-      find(const_key_reference r_key)\n+      find(key_const_reference r_key)\n       {\n \t_GLIBCXX_DEBUG_ONLY(assert_valid(__FILE__, __LINE__);)\n \tentry_pointer p_e = find_imp(r_key);\n \treturn point_iterator(p_e == 0 ? 0: &p_e->m_value);\n       }\n \n-      inline const_point_iterator\n-      find(const_key_reference r_key) const\n+      inline point_const_iterator\n+      find(key_const_reference r_key) const\n       {\n \t_GLIBCXX_DEBUG_ONLY(assert_valid(__FILE__, __LINE__);)\n \tentry_pointer p_e = find_imp(r_key);\n-\treturn const_point_iterator(p_e == 0 ? 0: &p_e->m_value);\n+\treturn point_const_iterator(p_e == 0 ? 0: &p_e->m_value);\n       }\n \n       inline bool\n-      erase(const_key_reference);\n+      erase(key_const_reference);\n \n       template<typename Pred>\n       inline size_type\n@@ -269,7 +257,7 @@ namespace __gnu_pbds\n #ifdef _GLIBCXX_DEBUG\n       void\n       assert_valid(const char* file, int line) const;\n-#endif \n+#endif\n \n #ifdef PB_DS_LU_MAP_TRACE_\n       void\n@@ -285,7 +273,7 @@ namespace __gnu_pbds\n     private:\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       friend class iterator_;\n-#endif \n+#endif\n \n       friend class const_iterator_;\n \n@@ -300,7 +288,7 @@ namespace __gnu_pbds\n       init_entry_metadata(entry_pointer, type_to_type<Metadata>);\n \n       inline static void\n-      init_entry_metadata(entry_pointer, type_to_type<null_lu_metadata>);\n+      init_entry_metadata(entry_pointer, type_to_type<null_type>);\n \n       void\n       deallocate_all();\n@@ -323,18 +311,18 @@ namespace __gnu_pbds\n       apply_update(entry_pointer, type_to_type<Metadata>);\n \n       inline static bool\n-      apply_update(entry_pointer, type_to_type<null_lu_metadata>);\n+      apply_update(entry_pointer, type_to_type<null_type>);\n \n       inline entry_pointer\n-      find_imp(const_key_reference) const;\n+      find_imp(key_const_reference) const;\n \n-      static entry_allocator s_entry_allocator;\n-      static Eq_Fn s_eq_fn;\n-      static Update_Policy s_update_policy;\n-      static type_to_type<update_metadata> s_metadata_type_indicator;\n-      static null_lu_metadata s_null_lu_metadata;\n+      static entry_allocator \t\t\ts_entry_allocator;\n+      static Eq_Fn \t\t\t\ts_eq_fn;\n+      static Update_Policy \t\t\ts_update_policy;\n+      static type_to_type<update_metadata> \ts_metadata_type_indicator;\n+      static null_type \t\t\t\ts_null_type;\n \n-      mutable entry_pointer m_p_l;\n+      mutable entry_pointer \t\t\tm_p_l;\n     };\n \n #include <ext/pb_ds/detail/list_update_map_/constructor_destructor_fn_imps.hpp>\n@@ -348,12 +336,8 @@ namespace __gnu_pbds\n \n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_C_DEC\n-#undef  PB_DS_TYPES_TRAITS_C_DEC\n+#undef PB_DS_LU_TRAITS_BASE\n #undef PB_DS_DEBUG_MAP_BASE_C_DEC\n-#undef PB_DS_CLASS_NAME\n-#undef PB_DS_V2F\n-#undef PB_DS_EP2VP\n-#undef PB_DS_V2S\n-\n+#undef PB_DS_LU_NAME\n   } // namespace detail\n } // namespace __gnu_pbds"}, {"sha": "1ee219ae55386e7bf4c7cf5065ec516d02c09424", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/trace_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ftrace_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ftrace_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ftrace_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file trace_fn_imps.hpp\n+ * @file list_update_map_/trace_fn_imps.hpp\n  * Contains implementations of lu_map_.\n  */\n "}, {"sha": "f74a9fb54855e68d78370331b81fc6b1540ff7e0", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_policy/counter_lu_policy_imp.hpp", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fcounter_lu_policy_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fcounter_lu_policy_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fcounter_lu_policy_imp.hpp?ref=ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c", "patch": "@@ -1,51 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 3, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file counter_lu_policy_imp.hpp\n- * Contains a lu counter policy implementation.\n- */\n-\n-PB_DS_CLASS_T_DEC\n-detail::counter_lu_metadata<typename Allocator::size_type>\n-PB_DS_CLASS_C_DEC::\n-operator()() const\n-{ return (base_type::operator()(max_count)); }\n-\n-PB_DS_CLASS_T_DEC\n-bool\n-PB_DS_CLASS_C_DEC::\n-operator()(metadata_reference r_data) const\n-{ return (base_type::operator()(r_data, max_count)); }"}, {"sha": "74ab81388bb787befc4a8e54417cb9a882be4bc4", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_policy/lu_counter_metadata.hpp", "status": "renamed", "additions": 33, "deletions": 31, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Flu_counter_metadata.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Flu_counter_metadata.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Flu_counter_metadata.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -1,6 +1,7 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2009, 2010, 2011\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -34,7 +35,7 @@\n // warranty.\n \n /**\n- * @file counter_lu_metadata.hpp\n+ * @file lu_counter_metadata.hpp\n  * Contains implementation of a lu counter policy's metadata.\n  */\n \n@@ -43,44 +44,45 @@ namespace __gnu_pbds\n   namespace detail\n   {\n     template<typename Size_Type>\n-    class counter_lu_policy_base;\n+      class lu_counter_policy_base;\n \n-    // A list-update metadata type that moves elements to the front of\n-    // the list based on the counter algorithm.\n+    /// A list-update metadata type that moves elements to the front of\n+    /// the list based on the counter algorithm.\n     template<typename Size_Type = std::size_t>\n-    class counter_lu_metadata\n-    {\n-    public:\n-      typedef Size_Type size_type;\n+      class lu_counter_metadata\n+      {\n+      public:\n+\ttypedef Size_Type \tsize_type;\n \n-    private:\n-      counter_lu_metadata(size_type init_count) : m_count(init_count)\n-      { }\n+      private:\n+\tlu_counter_metadata(size_type init_count) : m_count(init_count)\n+\t{ }\n \n-      friend class counter_lu_policy_base<size_type>;\n+\tfriend class lu_counter_policy_base<size_type>;\n \n-      mutable size_type m_count;\n+\tmutable size_type \tm_count;\n     };\n \n+    /// Base class for list-update counter policy.\n     template<typename Size_Type>\n-    class counter_lu_policy_base\n-    {\n-    protected:\n-      typedef Size_Type size_type;\n+      class lu_counter_policy_base\n+      {\n+      protected:\n+\ttypedef Size_Type \tsize_type;\n \n-      counter_lu_metadata<size_type>\n-      operator()(size_type max_size) const\n-      { return counter_lu_metadata<Size_Type>(std::rand() % max_size); }\n+\tlu_counter_metadata<size_type>\n+\toperator()(size_type max_size) const\n+\t{ return lu_counter_metadata<Size_Type>(std::rand() % max_size); }\n \n-      template<typename Metadata_Reference>\n-      bool\n-      operator()(Metadata_Reference r_data, size_type m_max_count) const\n-      {\n-\tif (++r_data.m_count != m_max_count)\n-\t  return false;\n-\tr_data.m_count = 0;\n-\treturn true;\n-      }\n-    };\n+\ttemplate<typename Metadata_Reference>\n+\tbool\n+\toperator()(Metadata_Reference r_data, size_type m_max_count) const\n+\t{\n+\t  if (++r_data.m_count != m_max_count)\n+\t    return false;\n+\t  r_data.m_count = 0;\n+\t  return true;\n+\t}\n+      };\n   } // namespace detail\n } // namespace __gnu_pbds", "previous_filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_policy/counter_lu_metadata.hpp"}, {"sha": "34426c5382183c3929749f4e86830f64d4a66927", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_policy/mtf_lu_policy_imp.hpp", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fmtf_lu_policy_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fmtf_lu_policy_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fmtf_lu_policy_imp.hpp?ref=ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c", "patch": "@@ -1,55 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 3, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file mtf_lu_policy_imp.hpp\n- * Contains a move-to-front policy implementation.\n- */\n-\n-PB_DS_CLASS_T_DEC\n-null_lu_metadata PB_DS_CLASS_C_DEC::s_metadata;\n-\n-PB_DS_CLASS_T_DEC\n-typename PB_DS_CLASS_C_DEC::metadata_type\n-PB_DS_CLASS_C_DEC::\n-operator()() const\n-{ return s_metadata; }\n-\n-PB_DS_CLASS_T_DEC\n-inline bool\n-PB_DS_CLASS_C_DEC::\n-operator()(metadata_reference /*r_data*/) const\n-{ return true; }\n-"}, {"sha": "13ee6e1c7b05932f036dbb5a841bca9dbd031f1a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_policy/sample_update_policy.hpp", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fsample_update_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fsample_update_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fsample_update_policy.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -41,34 +41,36 @@\n #ifndef PB_DS_SAMPLE_UPDATE_POLICY_HPP\n #define PB_DS_SAMPLE_UPDATE_POLICY_HPP\n \n-// A sample list-update policy.\n-struct sample_update_policy\n+namespace __gnu_pbds\n {\n-  // Default constructor.\n-  sample_update_policy();\n+  /// A sample list-update policy.\n+  struct sample_update_policy\n+  {\n+    // Default constructor.\n+    sample_update_policy();\n \n-  // Copy constructor.\n-  sample_update_policy(const sample_update_policy&);\n+    // Copy constructor.\n+    sample_update_policy(const sample_update_policy&);\n \n-  // Swaps content.\n-  inline void\n-  swap(sample_update_policy& other);\n+    // Swaps content.\n+    inline void\n+    swap(sample_update_policy& other);\n \n-protected:\n-  // Metadata on which this functor operates.\n-  typedef some_metadata_type metadata_type;\n+  protected:\n+    // Metadata on which this functor operates.\n+    typedef some_metadata_type metadata_type;\n \n-  // Creates a metadata object.\n-  metadata_type\n-  operator()() const;\n+    // Creates a metadata object.\n+    metadata_type\n+    operator()() const;\n \n-  // Decides whether a metadata object should be moved to the front of\n-  // the list. A list-update based containers object will call this\n-  // method to decide whether to move a node to the front of the\n-  // list. The method shoule return true if the node should be moved\n-  // to the front of the list.\n-  bool\n-  operator()(metadata_reference) const;\n-};\n-\n-#endif \n+    // Decides whether a metadata object should be moved to the front of\n+    // the list. A list-update based containers object will call this\n+    // method to decide whether to move a node to the front of the\n+    // list. The method shoule return true if the node should be moved\n+    // to the front of the list.\n+    bool\n+    operator()(metadata_reference) const;\n+  };\n+}\n+#endif"}, {"sha": "e2c4b9ae9c4c75474a1f0a869d860bccb0ffd55a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/cond_dtor.hpp", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fcond_dtor.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fcond_dtor.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fcond_dtor.hpp?ref=ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c", "patch": "@@ -1,74 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 3, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file cond_dtor.hpp\n- * Contains a conditional destructor\n- */\n-\n-template<typename Size_Type>\n-class cond_dtor\n-{\n-public:\n-  cond_dtor(value_vector a_vec, iterator& r_last_it, Size_Type total_size) \n-  : m_a_vec(a_vec), m_r_last_it(r_last_it), m_max_size(total_size),\n-    m_no_action(false)\n-  { }\n-\n-  ~cond_dtor()\n-  {\n-    if (m_no_action)\n-      return;\n-    iterator it = m_a_vec;\n-    while (it != m_r_last_it)\n-      {\n-\tit->~value_type();\n-\t++it;\n-      }\n-\n-    if (m_max_size > 0)\n-      value_allocator().deallocate(m_a_vec, m_max_size);\n-  }\n-\n-  inline void\n-  set_no_action()\n-  { m_no_action = true; }\n-\n-protected:\n-  value_vector m_a_vec;\n-  iterator& m_r_last_it;\n-  const Size_Type m_max_size;\n-  bool m_no_action;\n-};"}, {"sha": "494ded24bd678c32aaa2667a2911ae5053d2d81c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 41, "deletions": 51, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fconstructors_destructor_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file constructors_destructor_fn_imps.hpp\n+ * @file ov_tree_map_/constructors_destructor_fn_imps.hpp\n  * Contains an implementation class for ov_tree_.\n  */\n \n@@ -48,7 +48,7 @@ PB_DS_CLASS_C_DEC::s_metadata_alloc;\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_OV_TREE_CLASS_NAME() :\n+PB_DS_OV_TREE_NAME() :\n   m_a_values(0),\n   m_a_metadata(0),\n   m_end_it(0),\n@@ -57,8 +57,8 @@ PB_DS_OV_TREE_CLASS_NAME() :\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_OV_TREE_CLASS_NAME(const Cmp_Fn& r_cmp_fn) :\n-  cmp_fn_base(r_cmp_fn),\n+PB_DS_OV_TREE_NAME(const Cmp_Fn& r_cmp_fn) :\n+  cmp_fn(r_cmp_fn),\n   m_a_values(0),\n   m_a_metadata(0),\n   m_end_it(0),\n@@ -67,9 +67,9 @@ PB_DS_OV_TREE_CLASS_NAME(const Cmp_Fn& r_cmp_fn) :\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_OV_TREE_CLASS_NAME(const Cmp_Fn& r_cmp_fn, const node_update& r_node_update) :\n-  cmp_fn_base(r_cmp_fn),\n-  node_update(r_node_update),\n+PB_DS_OV_TREE_NAME(const Cmp_Fn& r_cmp_fn, const node_update& r_nodeu) :\n+  cmp_fn(r_cmp_fn),\n+  node_update(r_nodeu),\n   m_a_values(0),\n   m_a_metadata(0),\n   m_end_it(0),\n@@ -78,11 +78,11 @@ PB_DS_OV_TREE_CLASS_NAME(const Cmp_Fn& r_cmp_fn, const node_update& r_node_updat\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_OV_TREE_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n+PB_DS_OV_TREE_NAME(const PB_DS_CLASS_C_DEC& other) :\n #ifdef PB_DS_TREE_TRACE\n-  PB_DS_TREE_TRACE_BASE_C_DEC(other),\n-#endif \n-  cmp_fn_base(other),\n+  trace_base(other),\n+#endif\n+  cmp_fn(other),\n   node_update(other),\n   m_a_values(0),\n   m_a_metadata(0),\n@@ -100,23 +100,14 @@ PB_DS_CLASS_C_DEC::\n copy_from_range(It first_it, It last_it)\n {\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-  typedef\n-    std::map<\n-    key_type,\n-    mapped_type,\n-    Cmp_Fn,\n-    typename Allocator::template rebind<\n-    value_type>::other>\n+  typedef std::map<key_type, mapped_type, Cmp_Fn,\n+\t\t   typename _Alloc::template rebind<value_type>::other>\n     map_type;\n-#else \n-  typedef\n-    std::set<\n-    key_type,\n-    Cmp_Fn,\n-    typename Allocator::template rebind<\n-    Key>::other>\n+#else\n+  typedef std::set<key_type, Cmp_Fn,\n+\t\t   typename _Alloc::template rebind<Key>::other>\n     map_type;\n-#endif \n+#endif\n \n   map_type m(first_it, last_it);\n   copy_from_ordered_range(m.begin(), m.end());\n@@ -141,37 +132,34 @@ copy_from_ordered_range(It first_it, It last_it)\n   cond_dtor<size_type> cd(a_values, target_it, len);\n   while (source_it != source_end_it)\n     {\n-      new (const_cast<void* >(static_cast<const void* >(target_it)))\n-\tvalue_type(*source_it++);\n-\n+      void* __v = const_cast<void*>(static_cast<const void*>(target_it));\n+      new (__v) value_type(*source_it++);\n       ++target_it;\n     }\n \n-  reallocate_metadata((node_update* )this, len);\n+  reallocate_metadata((node_update*)this, len);\n   cd.set_no_action();\n   m_a_values = a_values;\n   m_size = len;\n   m_end_it = m_a_values + m_size;\n-  update(PB_DS_node_begin_imp(), (node_update* )this);\n+  update(PB_DS_node_begin_imp(), (node_update*)this);\n \n #ifdef _GLIBCXX_DEBUG\n   for (const_iterator dbg_it = m_a_values; dbg_it != m_end_it; ++dbg_it)\n-    {\n-      debug_base::insert_new(PB_DS_V2F(*dbg_it));\n-    }\n+    debug_base::insert_new(PB_DS_V2F(*dbg_it));\n #endif\n }\n \n PB_DS_CLASS_T_DEC\n template<typename It>\n void\n PB_DS_CLASS_C_DEC::\n-copy_from_ordered_range(It first_it, It last_it, It other_first_it, \n+copy_from_ordered_range(It first_it, It last_it, It other_first_it,\n \t\t\tIt other_last_it)\n {\n   clear();\n-  const size_type len = std::distance(first_it, last_it) \n-    \t\t         + std::distance(other_first_it, other_last_it);\n+  const size_type len = std::distance(first_it, last_it)\n+    \t\t\t + std::distance(other_first_it, other_last_it);\n \n   value_vector a_values = s_value_alloc.allocate(len);\n \n@@ -206,9 +194,7 @@ copy_from_ordered_range(It first_it, It last_it, It other_first_it,\n \n #ifdef _GLIBCXX_DEBUG\n   for (const_iterator dbg_it = m_a_values; dbg_it != m_end_it; ++dbg_it)\n-    {\n-      debug_base::insert_new(PB_DS_V2F(*dbg_it));\n-    }\n+    debug_base::insert_new(PB_DS_V2F(*dbg_it));\n #endif\n }\n \n@@ -220,7 +206,10 @@ swap(PB_DS_CLASS_C_DEC& other)\n   PB_DS_ASSERT_VALID((*this))\n   PB_DS_ASSERT_VALID(other)\n   value_swap(other);\n-  std::swap((Cmp_Fn& )(*this), (Cmp_Fn& )other);\n+  std::swap(static_cast<cmp_fn&>(*this),\n+\t    static_cast<cmp_fn&>(other));\n+  std::swap(static_cast<traits_base&>(*this),\n+\t    static_cast<traits_base&>(other));\n   PB_DS_ASSERT_VALID(other)\n   PB_DS_ASSERT_VALID((*this))\n }\n@@ -230,26 +219,26 @@ void\n PB_DS_CLASS_C_DEC::\n value_swap(PB_DS_CLASS_C_DEC& other)\n {\n+  _GLIBCXX_DEBUG_ONLY(debug_base::swap(other);)\n   std::swap(m_a_values, other.m_a_values);\n   std::swap(m_a_metadata, other.m_a_metadata);\n   std::swap(m_size, other.m_size);\n   std::swap(m_end_it, other.m_end_it);\n-  _GLIBCXX_DEBUG_ONLY(debug_base::swap(other);)\n }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-~PB_DS_OV_TREE_CLASS_NAME()\n+~PB_DS_OV_TREE_NAME()\n {\n-  //PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID((*this))\n   cond_dtor<size_type> cd(m_a_values, m_end_it, m_size);\n   reallocate_metadata((node_update*)this, 0);\n }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n-update(node_iterator /*it*/, null_node_update_pointer)\n+update(node_iterator, null_node_update_pointer)\n { }\n \n PB_DS_CLASS_T_DEC\n@@ -258,10 +247,11 @@ void\n PB_DS_CLASS_C_DEC::\n update(node_iterator nd_it, Node_Update* p_update)\n {\n-  const_node_iterator end_it = PB_DS_node_end_imp();\n-  if (nd_it == end_it)\n-    return;\n-  update(nd_it.get_l_child(), p_update);\n-  update(nd_it.get_r_child(), p_update);\n-  node_update::operator()(nd_it, end_it);\n+  node_const_iterator end_it = PB_DS_node_end_imp();\n+  if (nd_it != end_it)\n+    {\n+      update(nd_it.get_l_child(), p_update);\n+      update(nd_it.get_r_child(), p_update);\n+      node_update::operator()(nd_it, end_it);\n+    }\n }"}, {"sha": "8c27a46500f4f6e8041fbefa3ee4e007d7ddad6b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/debug_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fdebug_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file debug_fn_imps.hpp\n+ * @file ov_tree_map_/debug_fn_imps.hpp\n  * Contains an implementation class for ov_tree_.\n  */\n \n@@ -76,5 +76,4 @@ assert_iterators(const char* __file, int __line) const\n   PB_DS_DEBUG_VERIFY(iterated_num == m_size);\n }\n \n-#endif \n-\n+#endif"}, {"sha": "31eb7c74920b8be96a31485d0984cb5e960c944f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/erase_fn_imps.hpp", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Ferase_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file erase_fn_imps.hpp\n+ * @file ov_tree_map_/erase_fn_imps.hpp\n  * Contains an implementation class for ov_tree_.\n  */\n \n@@ -70,11 +70,12 @@ erase_if(Pred pred)\n   PB_DS_ASSERT_VALID((*this))\n \n #ifdef PB_DS_REGRESSION\n-    typename Allocator::group_adjustor adjust(m_size);\n-#endif \n+    typename _Alloc::group_adjustor adjust(m_size);\n+#endif\n \n   size_type new_size = 0;\n   size_type num_val_ersd = 0;\n+\n   for (iterator source_it = begin(); source_it != m_end_it; ++source_it)\n     if (!pred(*source_it))\n       ++new_size;\n@@ -94,16 +95,16 @@ erase_if(Pred pred)\n   for (iterator source_it = begin(); source_it != m_end_it; ++source_it)\n     {\n       if (!pred(*source_it))\n-        {\n-\t  new (const_cast<void*>(static_cast<const void* >(target_it)))\n+\t{\n+\t  new (const_cast<void*>(static_cast<const void*>(target_it)))\n \t    value_type(*source_it);\n \n \t  _GLIBCXX_DEBUG_ONLY(debug_base::insert_new(PB_DS_V2F(*source_it)));\n \t  ++target_it;\n-        }\n+\t}\n     }\n \n-  reallocate_metadata((node_update* )this, new_size);\n+  reallocate_metadata((node_update*)this, new_size);\n   cd.set_no_action();\n \n   {\n@@ -113,7 +114,7 @@ erase_if(Pred pred)\n   m_a_values = a_new_values;\n   m_size = new_size;\n   m_end_it = target_it;\n-  update(node_begin(), (node_update* )this);\n+  update(node_begin(), (node_update*)this);\n   PB_DS_ASSERT_VALID((*this))\n   return num_val_ersd;\n }\n@@ -131,8 +132,8 @@ erase_imp(It it)\n   PB_DS_CHECK_KEY_EXISTS(PB_DS_V2F(*it))\n \n #ifdef PB_DS_REGRESSION\n-    typename Allocator::group_adjustor adjust(m_size);\n-#endif \n+    typename _Alloc::group_adjustor adjust(m_size);\n+#endif\n \n   _GLIBCXX_DEBUG_ASSERT(m_size > 0);\n   value_vector a_values = s_value_alloc.allocate(m_size - 1);\n@@ -149,43 +150,42 @@ erase_imp(It it)\n     {\n       if (source_it != it)\n \t{\n-          _GLIBCXX_DEBUG_ONLY(++cnt;)\n+\t  _GLIBCXX_DEBUG_ONLY(++cnt;)\n \t  _GLIBCXX_DEBUG_ASSERT(cnt != m_size);\n-          new (const_cast<void* >(static_cast<const void* >(target_it)))\n+\t  new (const_cast<void*>(static_cast<const void*>(target_it)))\n \t      value_type(*source_it);\n \n-          ++target_it;\n+\t  ++target_it;\n \t}\n       else\n \tret_it = target_it;\n     ++source_it;\n     }\n \n   _GLIBCXX_DEBUG_ASSERT(m_size > 0);\n-  reallocate_metadata((node_update* )this, m_size - 1);\n+  reallocate_metadata((node_update*)this, m_size - 1);\n   cd.set_no_action();\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::erase_existing(PB_DS_V2F(*it));)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::erase_existing(PB_DS_V2F(*it));)\n   {\n     cond_dtor<size_type> cd1(m_a_values, m_end_it, m_size);\n   }\n \n   m_a_values = a_values;\n   --m_size;\n   m_end_it = m_a_values + m_size;\n-  update(node_begin(), (node_update* )this);\n+  update(node_begin(), (node_update*)this);\n   PB_DS_ASSERT_VALID((*this))\n   return It(ret_it);\n }\n \n PB_DS_CLASS_T_DEC\n bool\n PB_DS_CLASS_C_DEC::\n-erase(const_key_reference r_key)\n+erase(key_const_reference r_key)\n {\n   point_iterator it = find(r_key);\n   if (it == end())\n     return false;\n   erase(it);\n   return true;\n }\n-"}, {"sha": "6beee7118c76fbe44805da33d4c5a4de7f940b4c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/info_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Finfo_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file info_fn_imps.hpp\n+ * @file ov_tree_map_/info_fn_imps.hpp\n  * Contains an implementation class for ov_tree_.\n  */\n "}, {"sha": "e96628bdd88e4c822a94cb638ba0206bcdcb219e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/insert_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Finsert_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file insert_fn_imps.hpp\n+ * @file ov_tree_map_/insert_fn_imps.hpp\n  * Contains an implementation class for ov_tree_.\n  */\n "}, {"sha": "af866866ce0c3cbb3856638e07b8a058d8ea8f5a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/iterators_fn_imps.hpp", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fiterators_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fiterators_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fiterators_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,18 +34,18 @@\n // warranty.\n \n /**\n- * @file iterators_fn_imps.hpp\n+ * @file ov_tree_map_/iterators_fn_imps.hpp\n  * Contains an implementation class for ov_tree_.\n  */\n \n PB_DS_CLASS_T_DEC\n-inline typename PB_DS_CLASS_C_DEC::const_node_iterator\n+inline typename PB_DS_CLASS_C_DEC::node_const_iterator\n PB_DS_CLASS_C_DEC::\n node_begin() const\n { return PB_DS_node_begin_imp(); }\n \n PB_DS_CLASS_T_DEC\n-inline typename PB_DS_CLASS_C_DEC::const_node_iterator\n+inline typename PB_DS_CLASS_C_DEC::node_const_iterator\n PB_DS_CLASS_C_DEC::\n node_end() const\n { return PB_DS_node_end_imp(); }\n@@ -63,23 +63,23 @@ node_end()\n { return PB_DS_node_end_imp(); }\n \n PB_DS_CLASS_T_DEC\n-inline typename PB_DS_CLASS_C_DEC::const_node_iterator\n+inline typename PB_DS_CLASS_C_DEC::node_const_iterator\n PB_DS_CLASS_C_DEC::\n PB_DS_node_begin_imp() const\n {\n-  return const_node_iterator(const_cast<pointer>(mid_pointer(begin(), end())),\n+  return node_const_iterator(const_cast<pointer>(mid_pointer(begin(), end())),\n \t\t\t      const_cast<pointer>(begin()),\n \t\t\t      const_cast<pointer>(end()),(m_a_metadata == 0)?\n \t\t\t      0 :\n \t\t\t      mid_pointer(m_a_metadata, m_a_metadata + m_size));\n }\n \n PB_DS_CLASS_T_DEC\n-inline typename PB_DS_CLASS_C_DEC::const_node_iterator\n+inline typename PB_DS_CLASS_C_DEC::node_const_iterator\n PB_DS_CLASS_C_DEC::\n PB_DS_node_end_imp() const\n {\n-  return const_node_iterator(end(), end(), end(),\n+  return node_const_iterator(end(), end(), end(),\n \t\t     (m_a_metadata == 0) ? 0 : m_a_metadata + m_size);\n }\n "}, {"sha": "79c9504385362790b57f8f7041cb711d798c4ba8", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/node_iterators.hpp", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fnode_iterators.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fnode_iterators.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fnode_iterators.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file node_iterators.hpp\n+ * @file ov_tree_map_/node_iterators.hpp\n  * Contains an implementation class for ov_tree_.\n  */\n \n@@ -49,28 +49,27 @@ namespace __gnu_pbds\n {\n   namespace detail\n   {\n-\n #define PB_DS_OV_TREE_CONST_NODE_ITERATOR_C_DEC\t\\\n-    ov_tree_node_const_it_<Value_Type, Metadata_Type, Allocator>\n+    ov_tree_node_const_it_<Value_Type, Metadata_Type, _Alloc>\n \n-    // Const node reference.\n-    template<typename Value_Type, typename Metadata_Type, class Allocator>\n+    /// Const node reference.\n+    template<typename Value_Type, typename Metadata_Type, typename _Alloc>\n     class ov_tree_node_const_it_\n     {\n \n     protected:\n       typedef\n-      typename Allocator::template rebind<\n+      typename _Alloc::template rebind<\n       Value_Type>::other::pointer\n       pointer;\n \n       typedef\n-      typename Allocator::template rebind<\n+      typename _Alloc::template rebind<\n \tValue_Type>::other::const_pointer\n       const_pointer;\n \n       typedef\n-      typename Allocator::template rebind<\n+      typename _Alloc::template rebind<\n \tMetadata_Type>::other::const_pointer\n       const_metadata_pointer;\n \n@@ -93,28 +92,28 @@ namespace __gnu_pbds\n       typedef trivial_iterator_difference_type difference_type;\n \n       typedef\n-      typename Allocator::template rebind<\n+      typename _Alloc::template rebind<\n \tValue_Type>::other::const_pointer\n       value_type;\n \n       typedef\n-      typename Allocator::template rebind<\n+      typename _Alloc::template rebind<\n \ttypename remove_const<\n \tValue_Type>::type>::other::const_pointer\n       reference;\n \n       typedef\n-      typename Allocator::template rebind<\n+      typename _Alloc::template rebind<\n \ttypename remove_const<\n \tValue_Type>::type>::other::const_pointer\n       const_reference;\n \n       typedef Metadata_Type metadata_type;\n \n       typedef\n-      typename Allocator::template rebind<\n+      typename _Alloc::template rebind<\n \tmetadata_type>::other::const_reference\n-      const_metadata_reference;\n+      metadata_const_reference;\n \n     public:\n       inline\n@@ -125,12 +124,12 @@ namespace __gnu_pbds\n       operator*() const\n       { return m_p_value; }\n \n-      inline const_metadata_reference\n+      inline metadata_const_reference\n       get_metadata() const\n       {\n \tenum\n \t  {\n-\t    has_metadata = !is_same<Metadata_Type, null_node_metadata>::value\n+\t    has_metadata = !is_same<Metadata_Type, null_type>::value\n \t  };\n \n \tPB_DS_STATIC_ASSERT(should_have_metadata, has_metadata);\n@@ -196,10 +195,10 @@ namespace __gnu_pbds\n     };\n \n #define PB_DS_OV_TREE_NODE_ITERATOR_C_DEC \\\n-    ov_tree_node_it_<Value_Type, Metadata_Type, Allocator>\n+    ov_tree_node_it_<Value_Type, Metadata_Type, _Alloc>\n \n-    // Node reference.\n-    template<typename Value_Type, typename Metadata_Type, class Allocator>\n+    /// Node reference.\n+    template<typename Value_Type, typename Metadata_Type, typename _Alloc>\n     class ov_tree_node_it_ : public PB_DS_OV_TREE_CONST_NODE_ITERATOR_C_DEC\n     {\n \n@@ -223,18 +222,18 @@ namespace __gnu_pbds\n       typedef trivial_iterator_difference_type difference_type;\n \n       typedef\n-      typename Allocator::template rebind<\n+      typename _Alloc::template rebind<\n \tValue_Type>::other::pointer\n       value_type;\n \n       typedef\n-      typename Allocator::template rebind<\n+      typename _Alloc::template rebind<\n \ttypename remove_const<\n \tValue_Type>::type>::other::pointer\n       reference;\n \n       typedef\n-      typename Allocator::template rebind<\n+      typename _Alloc::template rebind<\n \ttypename remove_const<\n \tValue_Type>::type>::other::pointer\n       const_reference;\n@@ -270,7 +269,9 @@ namespace __gnu_pbds\n       get_r_child() const\n       {\n \tif (base_type::m_p_value == base_type::m_p_end_value)\n-\t  return (this_type(base_type::m_p_end_value,  base_type::m_p_end_value,  base_type::m_p_end_value));\n+\t  return this_type(base_type::m_p_end_value,\n+\t\t\t   base_type::m_p_end_value,  \n+\t\t\t   base_type::m_p_end_value);\n \n \tconst_metadata_pointer p_end_metadata =\n \t  base_type::m_p_metadata + (base_type::m_p_end_value - base_type::m_p_value);"}, {"sha": "20a435047dd65232232af089b0e0d3766b8e48c3", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/ov_tree_map_.hpp", "status": "modified", "additions": 165, "deletions": 157, "changes": 322, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fov_tree_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fov_tree_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fov_tree_map_.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,19 +34,21 @@\n // warranty.\n \n /**\n- * @file ov_tree_map_.hpp\n+ * @file ov_tree_map_/ov_tree_map_.hpp\n  * Contains an implementation class for ov_tree_.\n  */\n \n #include <map>\n #include <set>\n+#include <ext/pb_ds/exception.hpp>\n #include <ext/pb_ds/tree_policy.hpp>\n #include <ext/pb_ds/detail/eq_fn/eq_by_less.hpp>\n #include <ext/pb_ds/detail/types_traits.hpp>\n-#include <ext/pb_ds/detail/debug_map_base.hpp>\n #include <ext/pb_ds/detail/type_utils.hpp>\n-#include <ext/pb_ds/exception.hpp>\n #include <ext/pb_ds/detail/tree_trace_base.hpp>\n+#ifdef _GLIBCXX_DEBUG\n+#include <ext/pb_ds/detail/debug_map_base.hpp>\n+#endif\n #include <utility>\n #include <functional>\n #include <algorithm>\n@@ -58,159 +60,171 @@ namespace __gnu_pbds\n {\n   namespace detail\n   {\n-#define PB_DS_CLASS_T_DEC \\\n-    template<typename Key, typename Mapped, class Cmp_Fn, \\\n-\t     class Node_And_It_Traits, class Allocator>\n-\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-#define PB_DS_OV_TREE_CLASS_NAME ov_tree_data_\n-#endif \n+#define PB_DS_OV_TREE_NAME ov_tree_map\n+#define PB_DS_CONST_NODE_ITERATOR_NAME ov_tree_node_const_iterator_map\n+#endif\n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n-#define PB_DS_OV_TREE_CLASS_NAME ov_tree_no_data_\n-#endif \n+#define PB_DS_OV_TREE_NAME ov_tree_set\n+#define PB_DS_CONST_NODE_ITERATOR_NAME ov_tree_node_const_iterator_set\n+#endif\n \n-#ifdef PB_DS_DATA_TRUE_INDICATOR\n-#define PB_DS_CONST_NODE_ITERATOR_NAME ov_tree_const_node_iterator_data_\n-#else \n-#define PB_DS_CONST_NODE_ITERATOR_NAME ov_tree_const_node_iterator_no_data_\n-#endif \n+#define PB_DS_CLASS_T_DEC \\\n+    template<typename Key, typename Mapped, typename Cmp_Fn, \\\n+\t     typename Node_And_It_Traits, typename _Alloc>\n \n #define PB_DS_CLASS_C_DEC \\\n-   PB_DS_OV_TREE_CLASS_NAME<Key, Mapped, Cmp_Fn, Node_And_It_Traits, Allocator>\n+   PB_DS_OV_TREE_NAME<Key, Mapped, Cmp_Fn, Node_And_It_Traits, _Alloc>\n \n-#define PB_DS_TYPES_TRAITS_C_DEC \\\n-    types_traits<Key, Mapped, Allocator, false>\n+#define PB_DS_OV_TREE_TRAITS_BASE \\\n+    types_traits<Key, Mapped, _Alloc, false>\n \n #ifdef _GLIBCXX_DEBUG\n #define PB_DS_DEBUG_MAP_BASE_C_DEC \\\n     debug_map_base<Key, eq_by_less<Key, Cmp_Fn>, \\\n-       \ttypename Allocator::template rebind<Key>::other::const_reference>\n-#endif \n-\n-#ifdef PB_DS_DATA_TRUE_INDICATOR\n-#define PB_DS_V2F(X) (X).first\n-#define PB_DS_V2S(X) (X).second\n-#define PB_DS_EP2VP(X)& ((X)->m_value)\n-#endif \n-\n-#ifdef PB_DS_DATA_FALSE_INDICATOR\n-#define PB_DS_V2F(X) (X)\n-#define PB_DS_V2S(X) Mapped_Data()\n-#define PB_DS_EP2VP(X)& ((X)->m_value.first)\n-#endif \n+       \ttypename _Alloc::template rebind<Key>::other::const_reference>\n+#endif\n \n #ifdef PB_DS_TREE_TRACE\n #define PB_DS_TREE_TRACE_BASE_C_DEC \\\n-    tree_trace_base<typename Node_And_It_Traits::const_node_iterator,\t\\\n+    tree_trace_base<typename Node_And_It_Traits::node_const_iterator,\t\\\n \t\t    typename Node_And_It_Traits::node_iterator,\t\t\\\n-\t\t    Cmp_Fn, false, Allocator>\n+\t\t    Cmp_Fn, false, _Alloc>\n #endif\n \n #ifndef PB_DS_CHECK_KEY_EXISTS\n #  error Missing definition\n #endif\n \n-    // Ordered-vector tree associative-container.\n-    template<typename Key, typename Mapped, class Cmp_Fn,\n-\t     class Node_And_It_Traits, class Allocator>\n-    class PB_DS_OV_TREE_CLASS_NAME :\n+    /// Ordered-vector tree associative-container.\n+    template<typename Key, typename Mapped, typename Cmp_Fn,\n+\t     typename Node_And_It_Traits, typename _Alloc>\n+    class PB_DS_OV_TREE_NAME :\n #ifdef _GLIBCXX_DEBUG\n       protected PB_DS_DEBUG_MAP_BASE_C_DEC,\n-#endif \n+#endif\n #ifdef PB_DS_TREE_TRACE\n       public PB_DS_TREE_TRACE_BASE_C_DEC,\n-#endif \n+#endif\n       public Cmp_Fn,\n       public Node_And_It_Traits::node_update,\n-      public PB_DS_TYPES_TRAITS_C_DEC\n+      public PB_DS_OV_TREE_TRAITS_BASE\n     {\n     private:\n-      typedef PB_DS_TYPES_TRAITS_C_DEC traits_base;\n+      typedef PB_DS_OV_TREE_TRAITS_BASE\t       \t\ttraits_base;\n+      typedef Node_And_It_Traits\t\t\ttraits_type;\n \n       typedef typename remove_const<typename traits_base::value_type>::type non_const_value_type;\n \n-      typedef typename Allocator::template rebind<non_const_value_type>::other value_allocator;\n-      typedef typename value_allocator::pointer value_vector;\n-\n-\n-      typedef Cmp_Fn cmp_fn_base;\n+      typedef typename _Alloc::template rebind<non_const_value_type>::other value_allocator;\n+      typedef typename value_allocator::pointer \tvalue_vector;\n \n #ifdef _GLIBCXX_DEBUG\n-      typedef PB_DS_DEBUG_MAP_BASE_C_DEC debug_base;\n-#endif \n+      typedef PB_DS_DEBUG_MAP_BASE_C_DEC \t\tdebug_base;\n+#endif\n+\n+#ifdef PB_DS_TREE_TRACE\n+      typedef PB_DS_TREE_TRACE_BASE_C_DEC \t\ttrace_base;\n+#endif\n \n-      typedef typename traits_base::pointer mapped_pointer_;\n-      typedef typename traits_base::const_pointer const_mapped_pointer_;\n+      typedef typename traits_base::pointer \t\tmapped_pointer_;\n+      typedef typename traits_base::const_pointer \tmapped_const_pointer_;\n \n-      typedef typename Node_And_It_Traits::metadata_type metadata_type;\n+      typedef typename traits_type::metadata_type \tmetadata_type;\n \n-      typedef typename Allocator::template rebind<metadata_type>::other metadata_allocator;\n-      typedef typename metadata_allocator::pointer metadata_pointer;\n-      typedef typename metadata_allocator::const_reference const_metadata_reference;\n-      typedef typename metadata_allocator::reference metadata_reference;\n+      typedef typename _Alloc::template rebind<metadata_type>::other metadata_allocator;\n+      typedef typename metadata_allocator::pointer \tmetadata_pointer;\n+      typedef typename metadata_allocator::const_reference metadata_const_reference;\n+      typedef typename metadata_allocator::reference \tmetadata_reference;\n \n-      typedef\n-      typename Node_And_It_Traits::null_node_update_pointer\n+      typedef typename traits_type::null_node_update_pointer\n       null_node_update_pointer;\n \n     public:\n-\n-      typedef Allocator allocator_type;\n-      typedef typename Allocator::size_type size_type;\n-      typedef typename Allocator::difference_type difference_type;\n-\n-      typedef Cmp_Fn cmp_fn;\n-\n-      typedef typename Node_And_It_Traits::node_update node_update;\n-\n-      typedef typename traits_base::key_type key_type;\n-      typedef typename traits_base::key_pointer key_pointer;\n-      typedef typename traits_base::const_key_pointer const_key_pointer;\n-      typedef typename traits_base::key_reference key_reference;\n-      typedef typename traits_base::const_key_reference const_key_reference;\n-      typedef typename traits_base::mapped_type mapped_type;\n-      typedef typename traits_base::mapped_pointer mapped_pointer;\n-      typedef typename traits_base::const_mapped_pointer const_mapped_pointer;\n-      typedef typename traits_base::mapped_reference mapped_reference;\n-      typedef typename traits_base::const_mapped_reference const_mapped_reference;\n-      typedef typename traits_base::value_type value_type;\n-      typedef typename traits_base::pointer pointer;\n-      typedef typename traits_base::const_pointer const_pointer;\n-      typedef typename traits_base::reference reference;\n-      typedef typename traits_base::const_reference const_reference;\n-\n-      typedef const_pointer const_point_iterator;\n-\n+      typedef ov_tree_tag \t\t\t\t container_category;\n+      typedef _Alloc \t\t\t\t\tallocator_type;\n+      typedef typename _Alloc::size_type \t\tsize_type;\n+      typedef typename _Alloc::difference_type \t\tdifference_type;\n+      typedef Cmp_Fn \t\t\t\t\tcmp_fn;\n+\n+      typedef typename traits_base::key_type \t\tkey_type;\n+      typedef typename traits_base::key_pointer \tkey_pointer;\n+      typedef typename traits_base::key_const_pointer \tkey_const_pointer;\n+      typedef typename traits_base::key_reference \tkey_reference;\n+      typedef typename traits_base::key_const_reference key_const_reference;\n+      typedef typename traits_base::mapped_type \tmapped_type;\n+      typedef typename traits_base::mapped_pointer \tmapped_pointer;\n+      typedef typename traits_base::mapped_const_pointer mapped_const_pointer;\n+      typedef typename traits_base::mapped_reference \tmapped_reference;\n+      typedef typename traits_base::mapped_const_reference mapped_const_reference;\n+      typedef typename traits_base::value_type \t\tvalue_type;\n+      typedef typename traits_base::pointer \t\tpointer;\n+      typedef typename traits_base::const_pointer \tconst_pointer;\n+      typedef typename traits_base::reference \t\treference;\n+      typedef typename traits_base::const_reference \tconst_reference;\n+\n+      typedef const_pointer \t\t\t\tpoint_const_iterator;\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-      typedef pointer point_iterator;\n-#else \n-      typedef const_point_iterator point_iterator;\n-#endif \n-\n-      typedef const_point_iterator const_iterator;\n-\n-      typedef point_iterator iterator;\n-\n-#include <ext/pb_ds/detail/ov_tree_map_/cond_dtor.hpp>\n+      typedef pointer \t\t\t\t\tpoint_iterator;\n+#else\n+      typedef point_const_iterator \t\t\tpoint_iterator;\n+#endif\n \n-      typedef\n-      typename Node_And_It_Traits::const_node_iterator\n-      const_node_iterator;\n+      typedef point_iterator \t\t\t\titerator;\n+      typedef point_const_iterator \t\t\tconst_iterator;\n+\n+      /// Conditional destructor.\n+      template<typename Size_Type>\n+        class cond_dtor\n+        {\n+\tpublic:\n+\t  cond_dtor(value_vector a_vec, iterator& r_last_it, \n+\t\t    Size_Type total_size) \n+\t  : m_a_vec(a_vec), m_r_last_it(r_last_it), m_max_size(total_size),\n+\t    m_no_action(false)\n+\t  { }\n+\n+\t  ~cond_dtor()\n+\t  {\n+\t    if (m_no_action)\n+\t      return;\n+\t    iterator it = m_a_vec;\n+\t    while (it != m_r_last_it)\n+\t      {\n+\t\tit->~value_type();\n+\t\t++it;\n+\t      }\n+\t    \n+\t    if (m_max_size > 0)\n+\t      value_allocator().deallocate(m_a_vec, m_max_size);\n+\t  }\n \n-      typedef typename Node_And_It_Traits::node_iterator node_iterator;\n+\t  inline void\n+\t  set_no_action()\n+\t  { m_no_action = true; }\n+\t  \n+\tprotected:\n+\t  value_vector \t\tm_a_vec;\n+\t  iterator& \t\tm_r_last_it;\n+\t  const Size_Type \tm_max_size;\n+\t  bool \t\t\tm_no_action;\n+       };\n+      \n+      typedef typename traits_type::node_update \tnode_update;\n+      typedef typename traits_type::node_iterator \tnode_iterator;\n+      typedef typename traits_type::node_const_iterator\tnode_const_iterator;\n \n-    public:\n \n-      PB_DS_OV_TREE_CLASS_NAME();\n+      PB_DS_OV_TREE_NAME();\n \n-      PB_DS_OV_TREE_CLASS_NAME(const Cmp_Fn&);\n+      PB_DS_OV_TREE_NAME(const Cmp_Fn&);\n \n-      PB_DS_OV_TREE_CLASS_NAME(const Cmp_Fn&, const node_update&);\n+      PB_DS_OV_TREE_NAME(const Cmp_Fn&, const node_update&);\n \n-      PB_DS_OV_TREE_CLASS_NAME(const PB_DS_CLASS_C_DEC&);\n+      PB_DS_OV_TREE_NAME(const PB_DS_CLASS_C_DEC&);\n \n-      ~PB_DS_OV_TREE_CLASS_NAME();\n+      ~PB_DS_OV_TREE_NAME();\n \n       void\n       swap(PB_DS_CLASS_C_DEC&);\n@@ -228,14 +242,14 @@ namespace __gnu_pbds\n       inline size_type\n       size() const;\n \n-      Cmp_Fn& \n+      Cmp_Fn&\n       get_cmp_fn();\n \n-      const Cmp_Fn& \n+      const Cmp_Fn&\n       get_cmp_fn() const;\n \n       inline mapped_reference\n-      operator[](const_key_reference r_key)\n+      operator[](key_const_reference r_key)\n       {\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n \tPB_DS_ASSERT_VALID((*this))\n@@ -246,19 +260,18 @@ namespace __gnu_pbds\n \t    PB_DS_ASSERT_VALID((*this))\n \t     return it->second;\n \t  }\n-\n-\treturn (insert_new_val(it, std::make_pair(r_key, mapped_type()))->second);\n-#else \n+\treturn insert_new_val(it, std::make_pair(r_key, mapped_type()))->second;\n+#else\n \tinsert(r_key);\n-\treturn traits_base::s_null_mapped;\n-#endif \n+\treturn traits_base::s_null_type;\n+#endif\n       }\n \n       inline std::pair<point_iterator, bool>\n       insert(const_reference r_value)\n       {\n \tPB_DS_ASSERT_VALID((*this))\n-\tconst_key_reference r_key = PB_DS_V2F(r_value);\n+\tkey_const_reference r_key = PB_DS_V2F(r_value);\n \tpoint_iterator it = lower_bound(r_key);\n \n \tif (it != end()&&  !Cmp_Fn::operator()(r_key, PB_DS_V2F(*it)))\n@@ -272,30 +285,30 @@ namespace __gnu_pbds\n       }\n \n       inline point_iterator\n-      lower_bound(const_key_reference r_key)\n+      lower_bound(key_const_reference r_key)\n       {\n \tpointer it = m_a_values;\n \tpointer e_it = m_a_values + m_size;\n \twhile (it != e_it)\n \t  {\n \t    pointer mid_it = it + ((e_it - it) >> 1);\n-\t    if (cmp_fn_base::operator()(PB_DS_V2F(*mid_it), r_key))\n+\t    if (cmp_fn::operator()(PB_DS_V2F(*mid_it), r_key))\n \t      it = ++mid_it;\n \t    else\n \t      e_it = mid_it;\n \t  }\n \treturn it;\n       }\n \n-      inline const_point_iterator\n-      lower_bound(const_key_reference r_key) const\n+      inline point_const_iterator\n+      lower_bound(key_const_reference r_key) const\n       { return const_cast<PB_DS_CLASS_C_DEC& >(*this).lower_bound(r_key); }\n \n       inline point_iterator\n-      upper_bound(const_key_reference r_key)\n+      upper_bound(key_const_reference r_key)\n       {\n \titerator pot_it = lower_bound(r_key);\n-\tif (pot_it != end()&&  !Cmp_Fn::operator()(r_key, PB_DS_V2F(*pot_it)))\n+\tif (pot_it != end() && !Cmp_Fn::operator()(r_key, PB_DS_V2F(*pot_it)))\n \t  {\n \t    PB_DS_CHECK_KEY_EXISTS(r_key)\n \t    return ++pot_it;\n@@ -305,12 +318,12 @@ namespace __gnu_pbds\n \treturn pot_it;\n       }\n \n-      inline const_point_iterator\n-      upper_bound(const_key_reference r_key) const\n+      inline point_const_iterator\n+      upper_bound(key_const_reference r_key) const\n       { return const_cast<PB_DS_CLASS_C_DEC&>(*this).upper_bound(r_key); }\n \n       inline point_iterator\n-      find(const_key_reference r_key)\n+      find(key_const_reference r_key)\n       {\n \tPB_DS_ASSERT_VALID((*this))\n \titerator pot_it = lower_bound(r_key);\n@@ -324,12 +337,12 @@ namespace __gnu_pbds\n \treturn end();\n       }\n \n-      inline const_point_iterator\n-      find(const_key_reference r_key) const\n-      { return (const_cast<PB_DS_CLASS_C_DEC& >(*this).find(r_key)); }\n+      inline point_const_iterator\n+      find(key_const_reference r_key) const\n+      { return (const_cast<PB_DS_CLASS_C_DEC&>(*this).find(r_key)); }\n \n       bool\n-      erase(const_key_reference);\n+      erase(key_const_reference);\n \n       template<typename Pred>\n       inline size_type\n@@ -346,7 +359,7 @@ namespace __gnu_pbds\n       join(PB_DS_CLASS_C_DEC&);\n \n       void\n-      split(const_key_reference, PB_DS_CLASS_C_DEC&);\n+      split(key_const_reference, PB_DS_CLASS_C_DEC&);\n \n       inline iterator\n       begin()\n@@ -364,10 +377,10 @@ namespace __gnu_pbds\n       end() const\n       { return m_end_it; }\n \n-      inline const_node_iterator\n+      inline node_const_iterator\n       node_begin() const;\n \n-      inline const_node_iterator\n+      inline node_const_iterator\n       node_end() const;\n \n       inline node_iterator\n@@ -379,7 +392,7 @@ namespace __gnu_pbds\n     private:\n \n       inline void\n-      update(node_iterator /*it*/, null_node_update_pointer);\n+      update(node_iterator, null_node_update_pointer);\n \n       template<typename Node_Update>\n       void\n@@ -415,8 +428,8 @@ namespace __gnu_pbds\n       insert_new_val(iterator it, const_reference r_value)\n       {\n #ifdef PB_DS_REGRESSION\n-\t  typename Allocator::group_adjustor adjust(m_size);\n-#endif \n+\ttypename _Alloc::group_adjustor adjust(m_size);\n+#endif\n \n \tPB_DS_CHECK_KEY_DOES_NOT_EXIST(PB_DS_V2F(r_value))\n \n@@ -430,23 +443,23 @@ namespace __gnu_pbds\n \tcond_dtor<size_type> cd(a_values, target_it, m_size + 1);\n \twhile (source_it != it)\n \t  {\n-\t    new (const_cast<void* >(static_cast<const void* >(target_it)))\n+\t    new (const_cast<void*>(static_cast<const void*>(target_it)))\n \t      value_type(*source_it++);\n \t    ++target_it;\n \t  }\n \n-\tnew (const_cast<void* >(static_cast<const void* >(ret_it = target_it)))\n+\tnew (const_cast<void*>(static_cast<const void*>(ret_it = target_it)))\n \t  value_type(r_value);\n \t++target_it;\n \n \twhile (source_it != source_end_it)\n \t  {\n-\t    new (const_cast<void* >(static_cast<const void* >(target_it)))\n+\t    new (const_cast<void*>(static_cast<const void*>(target_it)))\n \t      value_type(*source_it++);\n \t    ++target_it;\n \t  }\n \n-\treallocate_metadata((node_update* )this, m_size + 1);\n+\treallocate_metadata((node_update*)this, m_size + 1);\n \tcd.set_no_action();\n \tif (m_size != 0)\n \t  {\n@@ -464,20 +477,20 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid(const char* file, int line) const;\n+      assert_valid(const char*, int) const;\n \n       void\n-      assert_iterators(const char* file, int line) const;\n-#endif \n+      assert_iterators(const char*, int) const;\n+#endif\n \n       template<typename It>\n       It\n-      erase_imp(It it);\n+      erase_imp(It);\n \n-      inline const_node_iterator\n+      inline node_const_iterator\n       PB_DS_node_begin_imp() const;\n \n-      inline const_node_iterator\n+      inline node_const_iterator\n       PB_DS_node_end_imp() const;\n \n       inline node_iterator\n@@ -487,13 +500,13 @@ namespace __gnu_pbds\n       PB_DS_node_end_imp();\n \n     private:\n-      static value_allocator s_value_alloc;\n+      static value_allocator \ts_value_alloc;\n       static metadata_allocator s_metadata_alloc;\n \n-      value_vector m_a_values;\n-      metadata_pointer m_a_metadata;\n-      iterator m_end_it;\n-      size_type m_size;\n+      value_vector \t\tm_a_values;\n+      metadata_pointer \t\tm_a_metadata;\n+      iterator \t\t\tm_end_it;\n+      size_type \t\tm_size;\n     };\n \n #include <ext/pb_ds/detail/ov_tree_map_/constructors_destructor_fn_imps.hpp>\n@@ -507,17 +520,12 @@ namespace __gnu_pbds\n \n #undef PB_DS_CLASS_C_DEC\n #undef PB_DS_CLASS_T_DEC\n-#undef PB_DS_OV_TREE_CLASS_NAME\n-#undef PB_DS_TYPES_TRAITS_C_DEC\n+#undef PB_DS_OV_TREE_NAME\n+#undef PB_DS_OV_TREE_TRAITS_BASE\n #undef PB_DS_DEBUG_MAP_BASE_C_DEC\n #ifdef PB_DS_TREE_TRACE\n #undef PB_DS_TREE_TRACE_BASE_C_DEC\n-#endif \n-\n-#undef PB_DS_V2F\n-#undef PB_DS_EP2VP\n-#undef PB_DS_V2S\n+#endif\n #undef PB_DS_CONST_NODE_ITERATOR_NAME\n-\n   } // namespace detail\n } // namespace __gnu_pbds"}, {"sha": "eafe0b039b2be1dc900fcf333f309f9ed54af728", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/policy_access_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fpolicy_access_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fpolicy_access_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fpolicy_access_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,8 +34,8 @@\n // warranty.\n \n /**\n- * @file policy_access_fn_imps.hpp\n- * Contains an implementation class for bin_search_tree_.\n+ * @file ov_tree_map_/policy_access_fn_imps.hpp\n+ * Contains an implementation class for ov_tree.\n  */\n \n PB_DS_CLASS_T_DEC"}, {"sha": "a12c2320cc2cb9c714ed1618e923e8af245a2d96", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/split_join_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fsplit_join_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,14 +34,14 @@\n // warranty.\n \n /**\n- * @file split_join_fn_imps.hpp\n+ * @file ov_tree_map_/split_join_fn_imps.hpp\n  * Contains an implementation class for ov_tree_.\n  */\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n+split(key_const_reference r_key, PB_DS_CLASS_C_DEC& other)\n {\n   PB_DS_ASSERT_VALID((*this))\n   PB_DS_ASSERT_VALID(other)\n@@ -73,17 +73,15 @@ split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n       return;\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(debug_base::join(other);)\n   iterator it = upper_bound(r_key);\n   PB_DS_CLASS_C_DEC new_other(other, other);\n   new_other.copy_from_ordered_range(it, end());\n-  PB_DS_CLASS_C_DEC new_this(*this, * this);\n+  PB_DS_CLASS_C_DEC new_this(*this, *this);\n   new_this.copy_from_ordered_range(begin(), it);\n \n   // No exceptions from this point.\n-  _GLIBCXX_DEBUG_ONLY(debug_base::split(r_key,(Cmp_Fn& )(*this), other);)\n-  other.update(other.node_begin(), (node_update* )(&other));\n-  update(node_begin(), (node_update* )this);\n+  other.update(other.node_begin(), (node_update*)(&other));\n+  update(node_begin(), (node_update*)this);\n   other.value_swap(new_other);\n   value_swap(new_this);\n   PB_DS_ASSERT_VALID((*this))\n@@ -120,14 +118,13 @@ join(PB_DS_CLASS_C_DEC& other)\n   PB_DS_CLASS_C_DEC new_this(*this, *this);\n \n   if (greater)\n-    new_this.copy_from_ordered_range(begin(), end(), \n+    new_this.copy_from_ordered_range(begin(), end(),\n \t\t\t\t     other.begin(), other.end());\n   else\n     new_this.copy_from_ordered_range(other.begin(), other.end(),\n \t\t\t\t     begin(), end());\n \n   // No exceptions from this point.\n-  _GLIBCXX_DEBUG_ONLY(debug_base::join(other, false);)\n   value_swap(new_this);\n   other.clear();\n   PB_DS_ASSERT_VALID((*this))"}, {"sha": "359e599627bce2136393ef4639cc53b1a0d4230c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/traits.hpp", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Ftraits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Ftraits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Ftraits.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file traits.hpp\n+ * @file ov_tree_map_/traits.hpp\n  * Contains an implementation class for ov_tree_.\n  */\n \n@@ -47,135 +47,135 @@ namespace __gnu_pbds\n {\n   namespace detail\n   {\n-\n+    /// Tree traits.\n     template<typename Key,\n \t     typename Mapped,\n \t     class Cmp_Fn,\n-\t     template<typename Const_Node_Iterator,\n-\t\t      class Node_Iterator,\n+\t     template<typename Node_CItr,\n+\t\t      class Node_Itr,\n \t\t      class Cmp_Fn_,\n-\t\t      class Allocator_>\n+\t\t      typename _Alloc_>\n     class Node_Update,\n-\t     class Allocator>\n+\t     typename _Alloc>\n     struct tree_traits<\n       Key,\n       Mapped,\n       Cmp_Fn,\n       Node_Update,\n       ov_tree_tag,\n-      Allocator>\n+      _Alloc>\n     {\n     private:\n       typedef\n       typename types_traits<\n       Key,\n       Mapped,\n-      Allocator,\n+      _Alloc,\n       false>::value_type\n       value_type;\n \n     public:\n       typedef\n-      typename tree_node_metadata_selector<\n+      typename tree_node_metadata_dispatch<\n       Key,\n       Mapped,\n       Cmp_Fn,\n       Node_Update,\n-      Allocator>::type\n+      _Alloc>::type\n       metadata_type;\n \n       typedef\n       ov_tree_node_const_it_<\n \tvalue_type,\n \tmetadata_type,\n-\tAllocator>\n-      const_node_iterator;\n+\t_Alloc>\n+      node_const_iterator;\n \n       typedef\n       ov_tree_node_it_<\n \tvalue_type,\n \tmetadata_type,\n-\tAllocator>\n+\t_Alloc>\n       node_iterator;\n \n       typedef\n       Node_Update<\n-\tconst_node_iterator,\n+\tnode_const_iterator,\n \tnode_iterator,\n \tCmp_Fn,\n-\tAllocator>\n+\t_Alloc>\n       node_update;\n \n       typedef\n-      __gnu_pbds::null_tree_node_update<\n-\tconst_node_iterator,\n+      __gnu_pbds::null_node_update<\n+\tnode_const_iterator,\n \tnode_iterator,\n \tCmp_Fn,\n-\tAllocator>* \n+\t_Alloc>* \n       null_node_update_pointer;\n     };\n \n+    /// Specialization.\n     template<typename Key,\n \t     class Cmp_Fn,\n-\t     template<typename Const_Node_Iterator,\n-\t\t      class Node_Iterator,\n+\t     template<typename Node_CItr,\n+\t\t      class Node_Itr,\n \t\t      class Cmp_Fn_,\n-\t\t      class Allocator_>\n+\t\t      typename _Alloc_>\n     class Node_Update,\n-\t     class Allocator>\n+\t     typename _Alloc>\n     struct tree_traits<\n       Key,\n-      null_mapped_type,\n+      null_type,\n       Cmp_Fn,\n       Node_Update,\n       ov_tree_tag,\n-      Allocator>\n+      _Alloc>\n     {\n     private:\n       typedef\n       typename types_traits<\n       Key,\n-      null_mapped_type,\n-      Allocator,\n+      null_type,\n+      _Alloc,\n       false>::value_type\n       value_type;\n \n     public:\n       typedef\n-      typename tree_node_metadata_selector<\n+      typename tree_node_metadata_dispatch<\n       Key,\n-      null_mapped_type,\n+      null_type,\n       Cmp_Fn,\n       Node_Update,\n-      Allocator>::type\n+      _Alloc>::type\n       metadata_type;\n \n       typedef\n       ov_tree_node_const_it_<\n \tvalue_type,\n \tmetadata_type,\n-\tAllocator>\n-      const_node_iterator;\n+\t_Alloc>\n+      node_const_iterator;\n \n-      typedef const_node_iterator node_iterator;\n+      typedef node_const_iterator node_iterator;\n \n       typedef\n       Node_Update<\n-\tconst_node_iterator,\n-\tconst_node_iterator,\n+\tnode_const_iterator,\n+\tnode_const_iterator,\n \tCmp_Fn,\n-\tAllocator>\n+\t_Alloc>\n       node_update;\n \n       typedef\n-      __gnu_pbds::null_tree_node_update<\n-\tconst_node_iterator,\n+      __gnu_pbds::null_node_update<\n+\tnode_const_iterator,\n \tnode_iterator,\n \tCmp_Fn,\n-\tAllocator>* \n+\t_Alloc>* \n       null_node_update_pointer;\n     };\n-\n   } // namespace detail\n } // namespace __gnu_pbds\n "}, {"sha": "0b836c549cdcdf94d95561df7a6c04515a28c43c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pairing_heap_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fconstructors_destructor_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file constructors_destructor_fn_imps.hpp\n+ * @file pairing_heap_/constructors_destructor_fn_imps.hpp\n  * Contains an implementation class for a pairing heap.\n  */\n \n@@ -46,46 +46,37 @@ copy_from_range(It first_it, It last_it)\n {\n   while (first_it != last_it)\n     push(*(first_it++));\n-\n   PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-pairing_heap_()\n-{\n-  PB_DS_ASSERT_VALID((*this))\n-}\n+pairing_heap()\n+{ PB_DS_ASSERT_VALID((*this)) }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-pairing_heap_(const Cmp_Fn& r_cmp_fn) :\n-  PB_DS_BASE_C_DEC(r_cmp_fn)\n-{\n-  PB_DS_ASSERT_VALID((*this))\n-}\n+pairing_heap(const Cmp_Fn& r_cmp_fn)\n+: base_type(r_cmp_fn)\n+{ PB_DS_ASSERT_VALID((*this)) }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-pairing_heap_(const PB_DS_CLASS_C_DEC& other) :\n-  PB_DS_BASE_C_DEC(other)\n-{\n-  PB_DS_ASSERT_VALID((*this))\n-}\n+pairing_heap(const PB_DS_CLASS_C_DEC& other)\n+: base_type(other)\n+{ PB_DS_ASSERT_VALID((*this)) }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n   PB_DS_ASSERT_VALID((*this))\n-\n-  PB_DS_BASE_C_DEC::swap(other);\n-\n+  base_type::swap(other);\n   PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-~pairing_heap_()\n+~pairing_heap()\n { }"}, {"sha": "802c95e9b50b911292c86af39953365011714259", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pairing_heap_/debug_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fdebug_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file debug_fn_imps.hpp\n+ * @file pairing_heap_/debug_fn_imps.hpp\n  * Contains an implementation class for a pairing heap.\n  */\n "}, {"sha": "d6303c3294ed53078fd3703187cff45a7496a99f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pairing_heap_/erase_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Ferase_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file erase_fn_imps.hpp\n+ * @file pairing_heap_/erase_fn_imps.hpp\n  * Contains an implementation class for a pairing heap.\n  */\n "}, {"sha": "49b2ca6342dd7798929caa3d0b264f763a5adc5b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pairing_heap_/find_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Ffind_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file find_fn_imps.hpp\n+ * @file pairing_heap_/find_fn_imps.hpp\n  * Contains an implementation class for a pairing heap.\n  */\n \n@@ -45,6 +45,5 @@ top() const\n {\n   PB_DS_ASSERT_VALID((*this))\n   _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n-\n   return base_type::m_p_root->m_value;\n }"}, {"sha": "ced5eeb0819289972a6b9c42063b7a6c14d51c38", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pairing_heap_/insert_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Finsert_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file insert_fn_imps.hpp\n+ * @file pairing_heap_/insert_fn_imps.hpp\n  * Contains an implementation class for a pairing heap.\n  */\n \n@@ -44,13 +44,9 @@ PB_DS_CLASS_C_DEC::\n push(const_reference r_val)\n {\n   PB_DS_ASSERT_VALID((*this))\n-\n   node_pointer p_new_nd = base_type::get_new_node_for_insert(r_val);\n-\n   push_imp(p_new_nd);\n-\n   PB_DS_ASSERT_VALID((*this))\n-\n   return point_iterator(p_new_nd);\n }\n \n@@ -60,20 +56,16 @@ PB_DS_CLASS_C_DEC::\n push_imp(node_pointer p_nd)\n {\n   p_nd->m_p_l_child = 0;\n-\n   if (base_type::m_p_root == 0)\n     {\n       p_nd->m_p_next_sibling = p_nd->m_p_prev_or_parent = 0;\n-\n       base_type::m_p_root = p_nd;\n     }\n   else if (Cmp_Fn::operator()(base_type::m_p_root->m_value, p_nd->m_value))\n     {\n       p_nd->m_p_next_sibling = p_nd->m_p_prev_or_parent = 0;\n-\n       base_type::make_child_of(base_type::m_p_root, p_nd);\n       PB_DS_ASSERT_NODE_CONSISTENT(p_nd, false)\n-\n       base_type::m_p_root = p_nd;\n     }\n   else\n@@ -89,13 +81,8 @@ PB_DS_CLASS_C_DEC::\n modify(point_iterator it, const_reference r_new_val)\n {\n   PB_DS_ASSERT_VALID((*this))\n-\n   remove_node(it.m_p_nd);\n-\n   it.m_p_nd->m_value = r_new_val;\n-\n   push_imp(it.m_p_nd);\n-\n   PB_DS_ASSERT_VALID((*this))\n }\n-"}, {"sha": "85e098ad4c8d6d179ef1aa480f6bd0031a3805c1", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pairing_heap_/pairing_heap_.hpp", "status": "modified", "additions": 51, "deletions": 88, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fpairing_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fpairing_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fpairing_heap_.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file pairing_heap_.hpp\n+ * @file pairing_heap_/pairing_heap_.hpp\n  * Contains an implementation class for a pairing heap.\n  */\n \n@@ -48,106 +48,69 @@\n #include <ext/pb_ds/detail/cond_dealtor.hpp>\n #include <ext/pb_ds/detail/type_utils.hpp>\n #include <ext/pb_ds/detail/left_child_next_sibling_heap_/left_child_next_sibling_heap_.hpp>\n-#include <ext/pb_ds/detail/left_child_next_sibling_heap_/null_metadata.hpp>\n #include <debug/debug.h>\n \n namespace __gnu_pbds\n {\n   namespace detail\n   {\n-\n #define PB_DS_CLASS_T_DEC \\\n-  template<typename Value_Type, class Cmp_Fn, class Allocator>\n+  template<typename Value_Type, typename Cmp_Fn, typename _Alloc>\n \n #define PB_DS_CLASS_C_DEC \\\n-  pairing_heap_<Value_Type, Cmp_Fn, Allocator>\n+  pairing_heap<Value_Type, Cmp_Fn, _Alloc>\n \n #ifdef _GLIBCXX_DEBUG\n-#define PB_DS_BASE_C_DEC \\\n-  left_child_next_sibling_heap_<Value_Type, \\\n-\t\t\t\tCmp_Fn,\t\\\n-\t\t\t\tnull_left_child_next_sibling_heap_node_metadata, \\\n-\t\t\t\tAllocator, \\\n-\t\t\t\tfalse>\n-#else \n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n-  left_child_next_sibling_heap_<Value_Type, \\\n-\t\t\t\tCmp_Fn,\t\\\n-\t\t\t\tnull_left_child_next_sibling_heap_node_metadata, \\\n-\t\t\t\tAllocator>\n-#endif \n-\n-    /**\n-     * class description = \"P4ri|\\|g h3ap$\">\n-     **/\n-    template<typename Value_Type, class Cmp_Fn, class Allocator>\n-    class pairing_heap_ : public PB_DS_BASE_C_DEC\n-    {\n+#define PB_DS_P_HEAP_BASE \\\n+  left_child_next_sibling_heap<Value_Type, Cmp_Fn, null_type, _Alloc, false>\n+#else\n+#define PB_DS_P_HEAP_BASE \\\n+  left_child_next_sibling_heap<Value_Type, Cmp_Fn, null_type, _Alloc>\n+#endif\n \n+    /// Pairing heap.\n+    template<typename Value_Type, typename Cmp_Fn, typename _Alloc>\n+    class pairing_heap : public PB_DS_P_HEAP_BASE\n+    {\n     private:\n-      typedef PB_DS_BASE_C_DEC base_type;\n+      typedef PB_DS_P_HEAP_BASE\t\t\t\tbase_type;\n+      typedef typename base_type::node_pointer \t\tnode_pointer;\n \n-      typedef typename base_type::node_pointer node_pointer;\n+      typedef typename _Alloc::template rebind<Value_Type>::other __rebind_a;\n \n     public:\n+      typedef Value_Type \t\t\t\tvalue_type;\n+      typedef Cmp_Fn \t\t\t\t\tcmp_fn;\n+      typedef _Alloc \t\t\t\t\tallocator_type;\n+      typedef typename _Alloc::size_type \t\tsize_type;\n+      typedef typename _Alloc::difference_type \t\tdifference_type;\n \n-      typedef typename Allocator::size_type size_type;\n-\n-      typedef typename Allocator::difference_type difference_type;\n-\n-      typedef Value_Type value_type;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tvalue_type>::other::pointer\n-      pointer;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tvalue_type>::other::const_pointer\n-      const_pointer;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tvalue_type>::other::reference\n-      reference;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tvalue_type>::other::const_reference\n-      const_reference;\n-\n-      typedef\n-      typename PB_DS_BASE_C_DEC::const_point_iterator\n-      const_point_iterator;\n-\n-      typedef typename PB_DS_BASE_C_DEC::point_iterator point_iterator;\n-\n-      typedef typename PB_DS_BASE_C_DEC::const_iterator const_iterator;\n-\n-      typedef typename PB_DS_BASE_C_DEC::iterator iterator;\n-\n-      typedef Cmp_Fn cmp_fn;\n-\n-      typedef Allocator allocator_type;\n+      typedef typename __rebind_a::pointer \t\tpointer;\n+      typedef typename __rebind_a::const_pointer \tconst_pointer;\n+      typedef typename __rebind_a::reference\t\treference;\n+      typedef typename __rebind_a::const_reference \tconst_reference;\n \n+      typedef typename base_type::point_const_iterator\tpoint_const_iterator;\n+      typedef typename base_type::point_iterator \tpoint_iterator;\n+      typedef typename base_type::const_iterator \tconst_iterator;\n+      typedef typename base_type::iterator \t\titerator;\n \n-      pairing_heap_();\n+      pairing_heap();\n \n-      pairing_heap_(const Cmp_Fn& r_cmp_fn);\n+      pairing_heap(const Cmp_Fn&);\n \n-      pairing_heap_(const PB_DS_CLASS_C_DEC& other);\n+      pairing_heap(const pairing_heap&);\n \n       void\n-      swap(PB_DS_CLASS_C_DEC& other);\n+      swap(pairing_heap&);\n \n-      ~pairing_heap_();\n+      ~pairing_heap();\n \n       inline point_iterator\n-      push(const_reference r_val);\n+      push(const_reference);\n \n       void\n-      modify(point_iterator it, const_reference r_new_val);\n+      modify(point_iterator, const_reference);\n \n       inline const_reference\n       top() const;\n@@ -156,51 +119,51 @@ namespace __gnu_pbds\n       pop();\n \n       void\n-      erase(point_iterator it);\n+      erase(point_iterator);\n \n       template<typename Pred>\n       size_type\n-      erase_if(Pred pred);\n+      erase_if(Pred);\n \n       template<typename Pred>\n       void\n-      split(Pred pred, PB_DS_CLASS_C_DEC& other);\n+      split(Pred, pairing_heap&);\n \n       void\n-      join(PB_DS_CLASS_C_DEC& other);\n+      join(pairing_heap&);\n \n     protected:\n \n       template<typename It>\n       void\n-      copy_from_range(It first_it, It last_it);\n+      copy_from_range(It, It);\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid(const char* file, int line) const;\n+      assert_valid(const char*, int) const;\n #endif\n \n     private:\n \n       inline void\n-      push_imp(node_pointer p_nd);\n+      push_imp(node_pointer);\n \n       node_pointer\n-      join_node_children(node_pointer p_nd);\n+      join_node_children(node_pointer);\n \n       node_pointer\n-      forward_join(node_pointer p_nd, node_pointer p_next);\n+      forward_join(node_pointer, node_pointer);\n \n       node_pointer\n-      back_join(node_pointer p_nd, node_pointer p_next);\n+      back_join(node_pointer, node_pointer);\n \n       void\n-      remove_node(node_pointer p_nd);\n+      remove_node(node_pointer);\n     };\n \n-#define PB_DS_ASSERT_NODE_CONSISTENT(_Node, _Bool)\t\t\t\\\n-  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(_Node, _Bool,\t\t\\\n-\t\t\t\t\t     __FILE__, __LINE__);)\n+#define PB_DS_ASSERT_NODE_CONSISTENT(_Node, _Bool) \\\n+ _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(_Node, _Bool,\t\\\n+\t\t\t\t\t\t       __FILE__, __LINE__);)\n \n #include <ext/pb_ds/detail/pairing_heap_/constructors_destructor_fn_imps.hpp>\n #include <ext/pb_ds/detail/pairing_heap_/debug_fn_imps.hpp>\n@@ -212,7 +175,7 @@ namespace __gnu_pbds\n #undef PB_DS_ASSERT_NODE_CONSISTENT\n #undef PB_DS_CLASS_C_DEC\n #undef PB_DS_CLASS_T_DEC\n-#undef PB_DS_BASE_C_DEC\n+#undef PB_DS_P_HEAP_BASE\n \n   } // namespace detail\n } // namespace __gnu_pbds"}, {"sha": "a74ed63b8453ebe4390c377e62a1097b0dfc7484", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pairing_heap_/split_join_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fsplit_join_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file split_join_fn_imps.hpp\n+ * @file pairing_heap_/split_join_fn_imps.hpp\n  * Contains an implementation class for a pairing heap.\n  */\n \n@@ -53,44 +53,32 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n     {\n       PB_DS_ASSERT_VALID((*this))\n       PB_DS_ASSERT_VALID(other)\n-\n       return;\n     }\n \n   base_type::to_linked_list();\n-\n   node_pointer p_out = base_type::prune(pred);\n-\n   while (p_out != 0)\n     {\n       _GLIBCXX_DEBUG_ASSERT(base_type::m_size > 0);\n       --base_type::m_size;\n-\n       ++other.m_size;\n-\n       node_pointer p_next = p_out->m_p_next_sibling;\n-\n       p_out->m_p_l_child = p_out->m_p_next_sibling = p_out->m_p_prev_or_parent = 0;\n \n       other.push_imp(p_out);\n-\n       p_out = p_next;\n     }\n \n   PB_DS_ASSERT_VALID(other)\n-\n   node_pointer p_cur = base_type::m_p_root;\n-\n   base_type::m_p_root = 0;\n-\n   while (p_cur != 0)\n     {\n       node_pointer p_next = p_cur->m_p_next_sibling;\n-\n       p_cur->m_p_l_child = p_cur->m_p_next_sibling = p_cur->m_p_prev_or_parent = 0;\n \n       push_imp(p_cur);\n-\n       p_cur = p_next;\n     }\n \n@@ -110,7 +98,6 @@ join(PB_DS_CLASS_C_DEC& other)\n     {\n       PB_DS_ASSERT_VALID((*this))\n       PB_DS_ASSERT_VALID(other)\n-\n       return;\n     }\n \n@@ -120,7 +107,6 @@ join(PB_DS_CLASS_C_DEC& other)\n     {\n       base_type::make_child_of(base_type::m_p_root, other.m_p_root);\n       PB_DS_ASSERT_NODE_CONSISTENT(other.m_p_root, false)\n-\n       base_type::m_p_root = other.m_p_root;\n     }\n   else\n@@ -130,11 +116,8 @@ join(PB_DS_CLASS_C_DEC& other)\n     }\n \n   base_type::m_size += other.m_size;\n-\n   other.m_p_root = 0;\n   other.m_size = 0;\n-\n   PB_DS_ASSERT_VALID((*this))\n   PB_DS_ASSERT_VALID(other)\n }\n-"}, {"sha": "b7cdf236311cdf311a6da427331800d36f911015", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/child_iterator.hpp", "status": "removed", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fchild_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fchild_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fchild_iterator.hpp?ref=ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c", "patch": "@@ -1,93 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 3, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file child_iterator.hpp\n- * Contains a iterator for a patricia tree.\n- */\n-\n-struct iterator : public const_iterator\n-{\n-public:\n-  typedef std::forward_iterator_tag iterator_category;\n-  typedef typename Allocator::difference_type difference_type;\n-  typedef node_pointer value_type;\n-  typedef node_pointer_pointer pointer;\n-  typedef node_pointer_reference reference;\n-\n-  inline\n-  iterator(node_pointer_pointer p_p_cur = 0,  \n-\t   node_pointer_pointer p_p_end = 0) \n-  : const_iterator(p_p_cur, p_p_end)\n-  { }\n-\n-  inline bool\n-  operator==(const iterator& other) const\n-  { return const_iterator::m_p_p_cur == other.m_p_p_cur; }\n-\n-  inline bool\n-  operator!=(const iterator& other) const\n-  { return const_iterator::m_p_p_cur != other.m_p_p_cur; }\n-\n-  inline iterator& \n-  operator++()\n-  {\n-    const_iterator::operator++();\n-    return *this;\n-  }\n-\n-  inline iterator\n-  operator++(int)\n-  {\n-    iterator ret_it(*this);\n-    operator++();\n-    return ret_it;\n-  }\n-\n-  node_pointer_pointer\n-  operator->()\n-  {\n-    _GLIBCXX_DEBUG_ONLY(const_iterator::assert_referencible();)\n-    return const_iterator::m_p_p_cur;\n-  }\n-\n-  node_pointer\n-  operator*()\n-  {\n-    _GLIBCXX_DEBUG_ONLY(const_iterator::assert_referencible();)\n-    return *const_iterator::m_p_p_cur;\n-  }\n-};\n-"}, {"sha": "184b986522fabe8217eb5f53ba52a14b8ac493fa", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/cond_dtor_entry_dealtor.hpp", "status": "removed", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fcond_dtor_entry_dealtor.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fcond_dtor_entry_dealtor.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fcond_dtor_entry_dealtor.hpp?ref=ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c", "patch": "@@ -1,79 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 3, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file cond_dtor_entry_dealtor.hpp\n- * Contains a binary tree container conditional deallocator\n- */\n-\n-class cond_dealtor\n-{\n-public:\n-  inline\n-  cond_dealtor(leaf_pointer p_nd) : m_p_nd(p_nd),\n-\t\t\t\t    m_no_action_dtor(false),\n-\t\t\t\t    m_call_destructor(false)\n-  { }\n-\n-  inline void\n-  set_no_action_dtor()\n-  {\n-    m_no_action_dtor = true;\n-  }\n-\n-  inline void\n-  set_call_destructor()\n-  {\n-    m_call_destructor = true;\n-  }\n-\n-  inline\n-  ~cond_dealtor()\n-  {\n-    if (m_no_action_dtor)\n-      return;\n-\n-    if (m_call_destructor)\n-      m_p_nd->~leaf();\n-\n-    s_leaf_allocator.deallocate(m_p_nd, 1);\n-  }\n-\n-protected:\n-  leaf_pointer m_p_nd;\n-  bool m_no_action_dtor;\n-  bool m_call_destructor;\n-};\n-"}, {"sha": "730148e1429016ce6daad0b03538308e68c47df3", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/const_child_iterator.hpp", "status": "removed", "additions": 0, "deletions": 111, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconst_child_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconst_child_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconst_child_iterator.hpp?ref=ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c", "patch": "@@ -1,111 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 3, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file const_child_iterator.hpp\n- * Contains a const_iterator for a patricia tree.\n- */\n-\n-struct const_iterator\n-{\n-public:\n-  typedef std::forward_iterator_tag iterator_category;\n-\n-  typedef typename Allocator::difference_type difference_type;\n-\n-  typedef node_pointer value_type;\n-\n-  typedef node_pointer_pointer pointer;\n-\n-  typedef node_pointer_reference reference;\n-\n-public:\n-  inline\n-  const_iterator(node_pointer_pointer p_p_cur = 0,  \n-\t\t node_pointer_pointer p_p_end = 0) \n-  : m_p_p_cur(p_p_cur), m_p_p_end(p_p_end)\n-  { }\n-\n-  inline bool\n-  operator==(const const_iterator& other) const\n-  { return m_p_p_cur == other.m_p_p_cur; }\n-\n-  inline bool\n-  operator!=(const const_iterator& other) const\n-  { return m_p_p_cur != other.m_p_p_cur; }\n-\n-  inline const_iterator& \n-  operator++()\n-  {\n-    do\n-      ++m_p_p_cur;\n-    while (m_p_p_cur != m_p_p_end&& * m_p_p_cur == 0);\n-    return *this;\n-  }\n-\n-  inline const_iterator\n-  operator++(int)\n-  {\n-    const_iterator ret_it(*this);\n-    operator++();\n-    return ret_it;\n-  }\n-\n-  const node_pointer_pointer\n-  operator->() const\n-  {\n-    _GLIBCXX_DEBUG_ONLY(assert_referencible();)\n-    return (m_p_p_cur);\n-  }\n-\n-  const_node_pointer\n-  operator*() const\n-  {\n-    _GLIBCXX_DEBUG_ONLY(assert_referencible();)\n-    return (*m_p_p_cur);\n-  }\n-\n-protected:\n-#ifdef _GLIBCXX_DEBUG\n-  void\n-  assert_referencible() const\n-  { _GLIBCXX_DEBUG_ASSERT(m_p_p_cur != m_p_p_end&& * m_p_p_cur != 0); }\n-#endif \n-\n-public:\n-  node_pointer_pointer m_p_p_cur;\n-  node_pointer_pointer m_p_p_end;\n-};\n-"}, {"sha": "8370a2ec885007d328d7b4ecc5db656d9f62633a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 27, "deletions": 31, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconstructors_destructor_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -1,4 +1,4 @@\n-// -*- C++ -*-\n+ // -*- C++ -*-\n \n // Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n@@ -35,25 +35,25 @@\n // warranty.\n \n /**\n- * @file constructors_destructor_fn_imps.hpp\n- * Contains an implementation class for bin_search_tree_.\n+ * @file pat_trie_/constructors_destructor_fn_imps.hpp\n+ * Contains an implementation class for pat_trie.\n  */\n \n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::head_allocator\n PB_DS_CLASS_C_DEC::s_head_allocator;\n \n PB_DS_CLASS_T_DEC\n-typename PB_DS_CLASS_C_DEC::internal_node_allocator\n-PB_DS_CLASS_C_DEC::s_internal_node_allocator;\n+typename PB_DS_CLASS_C_DEC::inode_allocator\n+PB_DS_CLASS_C_DEC::s_inode_allocator;\n \n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::leaf_allocator\n PB_DS_CLASS_C_DEC::s_leaf_allocator;\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME() :\n+PB_DS_PAT_TRIE_NAME() :\n   m_p_head(s_head_allocator.allocate(1)),\n   m_size(0)\n {\n@@ -63,8 +63,8 @@ PB_DS_CLASS_NAME() :\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME(const e_access_traits& r_e_access_traits) :\n-  synth_e_access_traits(r_e_access_traits),\n+PB_DS_PAT_TRIE_NAME(const access_traits& r_access_traits) :\n+  synth_access_traits(r_access_traits),\n   m_p_head(s_head_allocator.allocate(1)),\n   m_size(0)\n {\n@@ -74,11 +74,11 @@ PB_DS_CLASS_NAME(const e_access_traits& r_e_access_traits) :\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n+PB_DS_PAT_TRIE_NAME(const PB_DS_CLASS_C_DEC& other) :\n #ifdef _GLIBCXX_DEBUG\n   debug_base(other),\n #endif\n-  synth_e_access_traits(other),\n+  synth_access_traits(other),\n   node_update(other),\n   m_p_head(s_head_allocator.allocate(1)),\n   m_size(0)\n@@ -115,7 +115,7 @@ swap(PB_DS_CLASS_C_DEC& other)\n   PB_DS_ASSERT_VALID((*this))\n   PB_DS_ASSERT_VALID(other)\n   value_swap(other);\n-  std::swap((e_access_traits& )(*this), (e_access_traits& )other);\n+  std::swap((access_traits& )(*this), (access_traits& )other);\n   PB_DS_ASSERT_VALID((*this))\n   PB_DS_ASSERT_VALID(other)\n }\n@@ -132,7 +132,7 @@ value_swap(PB_DS_CLASS_C_DEC& other)\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-~PB_DS_CLASS_NAME()\n+~PB_DS_PAT_TRIE_NAME()\n {\n   clear();\n   s_head_allocator.deallocate(m_p_head, 1);\n@@ -163,36 +163,33 @@ copy_from_range(It first_it, It last_it)\n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n-recursive_copy_node(const_node_pointer p_other_nd)\n+recursive_copy_node(node_const_pointer p_ncp)\n {\n-  _GLIBCXX_DEBUG_ASSERT(p_other_nd != 0);\n-  if (p_other_nd->m_type == pat_trie_leaf_node_type)\n+  _GLIBCXX_DEBUG_ASSERT(p_ncp != 0);\n+  if (p_ncp->m_type == leaf_node)\n     {\n-      const_leaf_pointer p_other_leaf = static_cast<const_leaf_pointer>(p_other_nd);\n-\n+      leaf_const_pointer p_other_lf = static_cast<leaf_const_pointer>(p_ncp);\n       leaf_pointer p_new_lf = s_leaf_allocator.allocate(1);\n       cond_dealtor cond(p_new_lf);\n-      new (p_new_lf) leaf(p_other_leaf->value());\n-      apply_update(p_new_lf, (node_update* )this);\n+      new (p_new_lf) leaf(p_other_lf->value());\n+      apply_update(p_new_lf, (node_update*)this);\n       cond.set_no_action_dtor();\n       return (p_new_lf);\n     }\n \n-  _GLIBCXX_DEBUG_ASSERT(p_other_nd->m_type == pat_trie_internal_node_type);\n-  node_pointer a_p_children[internal_node::arr_size];\n+  _GLIBCXX_DEBUG_ASSERT(p_ncp->m_type == i_node);\n+  node_pointer a_p_children[inode::arr_size];\n   size_type child_i = 0;\n-  const_internal_node_pointer p_other_internal_nd =\n-    static_cast<const_internal_node_pointer>(p_other_nd);\n+  inode_const_pointer p_icp = static_cast<inode_const_pointer>(p_ncp);\n \n-  typename internal_node::const_iterator child_it =\n-    p_other_internal_nd->begin();\n+  typename inode::const_iterator child_it = p_icp->begin();\n \n-  internal_node_pointer p_ret;\n+  inode_pointer p_ret;\n   __try\n     {\n-      while (child_it != p_other_internal_nd->end())\n+      while (child_it != p_icp->end())\n \ta_p_children[child_i++] = recursive_copy_node(*(child_it++));\n-      p_ret = s_internal_node_allocator.allocate(1);\n+      p_ret = s_inode_allocator.allocate(1);\n     }\n   __catch(...)\n     {\n@@ -201,15 +198,14 @@ recursive_copy_node(const_node_pointer p_other_nd)\n       __throw_exception_again;\n     }\n \n-  new (p_ret) internal_node(p_other_internal_nd->get_e_ind(),\n-\t\t\t    pref_begin(a_p_children[0]));\n+  new (p_ret) inode(p_icp->get_e_ind(), pref_begin(a_p_children[0]));\n \n   --child_i;\n   _GLIBCXX_DEBUG_ASSERT(child_i >= 1);\n   do\n     p_ret->add_child(a_p_children[child_i], pref_begin(a_p_children[child_i]),\n \t\t     pref_end(a_p_children[child_i]), this);\n   while (child_i-- > 0);\n-  apply_update(p_ret, (node_update* )this);\n+  apply_update(p_ret, (node_update*)this);\n   return p_ret;\n }"}, {"sha": "0aa4b28c10ef90f3f2a26958a86051ddf19f6e3e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/debug_fn_imps.hpp", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fdebug_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,7 +34,7 @@\n // warranty.\n \n /**\n- * @file debug_fn_imps.hpp\n+ * @file pat_trie_/debug_fn_imps.hpp\n  * Contains an implementation class for pat_trie_.\n  */\n \n@@ -57,8 +57,8 @@ assert_valid(const char* __file, int __line) const\n       return;\n     }\n \n-  PB_DS_DEBUG_VERIFY(m_p_head->m_p_min->m_type == pat_trie_leaf_node_type);\n-  PB_DS_DEBUG_VERIFY(m_p_head->m_p_max->m_type == pat_trie_leaf_node_type);\n+  PB_DS_DEBUG_VERIFY(m_p_head->m_p_min->m_type == leaf_node);\n+  PB_DS_DEBUG_VERIFY(m_p_head->m_p_max->m_type == leaf_node);\n   PB_DS_DEBUG_VERIFY(!empty());\n }\n \n@@ -87,8 +87,8 @@ assert_reverse_iterators(const char* __file, int __line) const\n   for (const_reverse_iterator it = rbegin(); it != rend(); ++it)\n     {\n       ++calc_size;\n-      const_node_pointer p_nd =\n-\tconst_cast<PB_DS_CLASS_C_DEC* >(this)->find_imp(PB_DS_V2F(*it));\n+      node_const_pointer p_nd =\n+\tconst_cast<PB_DS_CLASS_C_DEC*>(this)->find_imp(PB_DS_V2F(*it));\n       PB_DS_DEBUG_VERIFY(p_nd == it.m_p_nd);\n     }\n   PB_DS_DEBUG_VERIFY(calc_size == m_size);\n@@ -97,22 +97,19 @@ assert_reverse_iterators(const char* __file, int __line) const\n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n-recursive_count_leafs(const_node_pointer p_nd,\n-\t\t      const char* __file, int __line)\n+recursive_count_leafs(node_const_pointer p_nd, const char* __file, int __line)\n {\n   if (p_nd == 0)\n     return (0);\n-  if (p_nd->m_type == pat_trie_leaf_node_type)\n+  if (p_nd->m_type == leaf_node)\n     return (1);\n-  PB_DS_DEBUG_VERIFY(p_nd->m_type == pat_trie_internal_node_type);\n+  PB_DS_DEBUG_VERIFY(p_nd->m_type == i_node);\n   size_type ret = 0;\n-  for (typename internal_node::const_iterator it =\n-\t static_cast<const_internal_node_pointer>(p_nd)->begin();\n-       it != static_cast<const_internal_node_pointer>(p_nd)->end();\n+  for (typename inode::const_iterator it = static_cast<inode_const_pointer>(p_nd)->begin();\n+       it != static_cast<inode_const_pointer>(p_nd)->end();\n        ++it)\n     ret += recursive_count_leafs(*it, __file, __line);\n   return ret;\n }\n \n-#endif \n-\n+#endif"}, {"sha": "c0ccd108e42961dd64f25dfca1cb162eb6de6dbd", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/erase_fn_imps.hpp", "status": "modified", "additions": 55, "deletions": 59, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ferase_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,24 +34,24 @@\n // warranty.\n \n /**\n- * @file erase_fn_imps.hpp\n- * Contains an implementation class for bin_search_tree_.\n+ * @file pat_trie_/erase_fn_imps.hpp\n+ * Contains an implementation class for pat_trie.\n  */\n \n PB_DS_CLASS_T_DEC\n inline bool\n PB_DS_CLASS_C_DEC::\n-erase(const_key_reference r_key)\n+erase(key_const_reference r_key)\n {\n   node_pointer p_nd = find_imp(r_key);\n-  if (p_nd == 0 || p_nd->m_type == pat_trie_internal_node_type)\n+  if (p_nd == 0 || p_nd->m_type == i_node)\n     {\n       PB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n       return false;\n     }\n \n-  _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == pat_trie_leaf_node_type);\n-  if (!synth_e_access_traits::equal_keys(PB_DS_V2F(reinterpret_cast<leaf_pointer>(p_nd)->value()), r_key))\n+  _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == leaf_node);\n+  if (!synth_access_traits::equal_keys(PB_DS_V2F(reinterpret_cast<leaf_pointer>(p_nd)->value()), r_key))\n     {\n       PB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n       return false;\n@@ -66,48 +66,47 @@ erase(const_key_reference r_key)\n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-erase_fixup(internal_node_pointer p_nd)\n+erase_fixup(inode_pointer p_nd)\n {\n   _GLIBCXX_DEBUG_ASSERT(std::distance(p_nd->begin(), p_nd->end()) >= 1);\n   if (std::distance(p_nd->begin(), p_nd->end()) == 1)\n     {\n       node_pointer p_parent = p_nd->m_p_parent;\n       if (p_parent == m_p_head)\n-\tm_p_head->m_p_parent =* p_nd->begin();\n+\tm_p_head->m_p_parent = *p_nd->begin();\n       else\n-        {\n-\t  _GLIBCXX_DEBUG_ASSERT(p_parent->m_type == pat_trie_internal_node_type);\n-\t  node_pointer p_new_child =* p_nd->begin();\n-\t  static_cast<internal_node_pointer>(p_parent)->replace_child(\n-\t\t\t\t\t\t\t\t      p_new_child,\n-\t\t\t\t\t\t\t\t      pref_begin(p_new_child),\n-\t\t\t\t\t\t\t\t      pref_end(p_new_child),\n-\t\t\t\t\t\t\t\t      this);\n-        }\n+\t{\n+\t  _GLIBCXX_DEBUG_ASSERT(p_parent->m_type == i_node);\n+\t  node_pointer p_new_child = *p_nd->begin();\n+\n+\t  typedef inode_pointer inode_ptr;\n+\t  inode_ptr p_internal = static_cast<inode_ptr>(p_parent);\n+\t  p_internal->replace_child(p_new_child, pref_begin(p_new_child),\n+\t\t\t\t    pref_end(p_new_child), this);\n+\t}\n       (*p_nd->begin())->m_p_parent = p_nd->m_p_parent;\n-      p_nd->~internal_node();\n-      s_internal_node_allocator.deallocate(p_nd, 1);\n+      p_nd->~inode();\n+      s_inode_allocator.deallocate(p_nd, 1);\n \n       if (p_parent == m_p_head)\n \treturn;\n \n-      _GLIBCXX_DEBUG_ASSERT(p_parent->m_type == pat_trie_internal_node_type);\n-      p_nd = static_cast<internal_node_pointer>(p_parent);\n+      _GLIBCXX_DEBUG_ASSERT(p_parent->m_type == i_node);\n+      p_nd = static_cast<inode_pointer>(p_parent);\n     }\n \n   while (true)\n     {\n       _GLIBCXX_DEBUG_ASSERT(std::distance(p_nd->begin(), p_nd->end()) > 1);\n       p_nd->update_prefixes(this);\n-      apply_update(p_nd, (node_update* )this);\n+      apply_update(p_nd, (node_update*)this);\n       PB_DS_ASSERT_NODE_VALID(p_nd)\n-      if (p_nd->m_p_parent->m_type == pat_trie_head_node_type)\n-        return;\n+      if (p_nd->m_p_parent->m_type == head_node)\n+\treturn;\n \n-      _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_parent->m_type ==\n-\t\t       pat_trie_internal_node_type);\n+      _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_parent->m_type == i_node);\n \n-      p_nd = static_cast<internal_node_pointer>(p_nd->m_p_parent);\n+      p_nd = static_cast<inode_pointer>(p_nd->m_p_parent);\n     }\n }\n \n@@ -118,7 +117,7 @@ actual_erase_leaf(leaf_pointer p_l)\n {\n   _GLIBCXX_DEBUG_ASSERT(m_size > 0);\n   --m_size;\n-  _GLIBCXX_DEBUG_ONLY(erase_existing(PB_DS_V2F(p_l->value())));\n+  _GLIBCXX_DEBUG_ONLY(debug_base::erase_existing(PB_DS_V2F(p_l->value())));\n   p_l->~leaf();\n   s_leaf_allocator.deallocate(p_l, 1);\n }\n@@ -128,38 +127,37 @@ void\n PB_DS_CLASS_C_DEC::\n clear()\n {\n-  PB_DS_ASSERT_VALID((*this))\n-  if (empty())\n-    return;\n-\n-  clear_imp(m_p_head->m_p_parent);\n-  m_size = 0;\n-  initialize();\n-  _GLIBCXX_DEBUG_ONLY(debug_base::clear();)\n-  PB_DS_ASSERT_VALID((*this))\n+  if (!empty())\n+    {\n+      clear_imp(m_p_head->m_p_parent);\n+      m_size = 0;\n+      initialize();\n+      _GLIBCXX_DEBUG_ONLY(debug_base::clear();)\n+      PB_DS_ASSERT_VALID((*this))\n+    }\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n clear_imp(node_pointer p_nd)\n {\n-  if (p_nd->m_type == pat_trie_internal_node_type)\n+  if (p_nd->m_type == i_node)\n     {\n-      _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == pat_trie_internal_node_type);\n-      for (typename internal_node::iterator it =\n-\t     static_cast<internal_node_pointer>(p_nd)->begin();\n-\t   it != static_cast<internal_node_pointer>(p_nd)->end();\n+      _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == i_node);\n+      for (typename inode::iterator it =\n+\t     static_cast<inode_pointer>(p_nd)->begin();\n+\t   it != static_cast<inode_pointer>(p_nd)->end();\n \t   ++it)\n-        {\n+\t{\n \t  node_pointer p_child =* it;\n \t  clear_imp(p_child);\n-        }\n-      s_internal_node_allocator.deallocate(static_cast<internal_node_pointer>(p_nd), 1);\n+\t}\n+      s_inode_allocator.deallocate(static_cast<inode_pointer>(p_nd), 1);\n       return;\n     }\n \n-  _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == pat_trie_leaf_node_type);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == leaf_node);\n   static_cast<leaf_pointer>(p_nd)->~leaf();\n   s_leaf_allocator.deallocate(static_cast<leaf_pointer>(p_nd), 1);\n }\n@@ -176,7 +174,7 @@ erase(const_iterator it)\n \n   const_iterator ret_it = it;\n   ++ret_it;\n-  _GLIBCXX_DEBUG_ASSERT(it.m_p_nd->m_type == pat_trie_leaf_node_type);\n+  _GLIBCXX_DEBUG_ASSERT(it.m_p_nd->m_type == leaf_node);\n   erase_leaf(static_cast<leaf_pointer>(it.m_p_nd));\n   PB_DS_ASSERT_VALID((*this))\n   return ret_it;\n@@ -194,7 +192,7 @@ erase(iterator it)\n     return it;\n   iterator ret_it = it;\n   ++ret_it;\n-  _GLIBCXX_DEBUG_ASSERT(it.m_p_nd->m_type == pat_trie_leaf_node_type);\n+  _GLIBCXX_DEBUG_ASSERT(it.m_p_nd->m_type == leaf_node);\n   erase_leaf(static_cast<leaf_pointer>(it.m_p_nd));\n   PB_DS_ASSERT_VALID((*this))\n   return ret_it;\n@@ -213,7 +211,7 @@ erase(const_reverse_iterator it)\n   const_reverse_iterator ret_it = it;\n   ++ret_it;\n \n-  _GLIBCXX_DEBUG_ASSERT(it.m_p_nd->m_type == pat_trie_leaf_node_type);\n+  _GLIBCXX_DEBUG_ASSERT(it.m_p_nd->m_type == leaf_node);\n   erase_leaf(static_cast<leaf_pointer>(it.m_p_nd));\n   PB_DS_ASSERT_VALID((*this))\n   return ret_it;\n@@ -232,7 +230,7 @@ erase(reverse_iterator it)\n   reverse_iterator ret_it = it;\n   ++ret_it;\n \n-  _GLIBCXX_DEBUG_ASSERT(it.m_p_nd->m_type == pat_trie_leaf_node_type);\n+  _GLIBCXX_DEBUG_ASSERT(it.m_p_nd->m_type == leaf_node);\n   erase_leaf(static_cast<leaf_pointer>(it.m_p_nd));\n   PB_DS_ASSERT_VALID((*this))\n   return ret_it;\n@@ -254,8 +252,8 @@ erase_if(Pred pred)\n       PB_DS_ASSERT_VALID((*this))\n       if (pred(*it))\n \t{\n-          ++num_ersd;\n-          it = erase(it);\n+\t  ++num_ersd;\n+\t  it = erase(it);\n \t}\n       else\n \t++it;\n@@ -271,19 +269,17 @@ PB_DS_CLASS_C_DEC::\n erase_leaf(leaf_pointer p_l)\n {\n   update_min_max_for_erased_leaf(p_l);\n-  if (p_l->m_p_parent->m_type == pat_trie_head_node_type)\n+  if (p_l->m_p_parent->m_type == head_node)\n     {\n       _GLIBCXX_DEBUG_ASSERT(size() == 1);\n       clear();\n       return;\n     }\n \n   _GLIBCXX_DEBUG_ASSERT(size() > 1);\n-  _GLIBCXX_DEBUG_ASSERT(p_l->m_p_parent->m_type ==\n-\t\t   pat_trie_internal_node_type);\n+  _GLIBCXX_DEBUG_ASSERT(p_l->m_p_parent->m_type == i_node);\n \n-  internal_node_pointer p_parent =\n-    static_cast<internal_node_pointer>(p_l->m_p_parent);\n+  inode_pointer p_parent = static_cast<inode_pointer>(p_l->m_p_parent);\n \n   p_parent->remove_child(p_l);\n   erase_fixup(p_parent);\n@@ -302,15 +298,15 @@ update_min_max_for_erased_leaf(leaf_pointer p_l)\n       return;\n     }\n \n-  if (p_l == static_cast<const_leaf_pointer>(m_p_head->m_p_min))\n+  if (p_l == static_cast<leaf_const_pointer>(m_p_head->m_p_min))\n     {\n       iterator it(p_l);\n       ++it;\n       m_p_head->m_p_min = it.m_p_nd;\n       return;\n     }\n \n-  if (p_l == static_cast<const_leaf_pointer>(m_p_head->m_p_max))\n+  if (p_l == static_cast<leaf_const_pointer>(m_p_head->m_p_max))\n     {\n       iterator it(p_l);\n       --it;"}, {"sha": "bbef9d7a04365631cb2c5221a165b2d6fa530744", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/find_fn_imps.hpp", "status": "modified", "additions": 67, "deletions": 67, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ffind_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,25 +34,25 @@\n // warranty.\n \n /**\n- * @file find_fn_imps.hpp\n- * Contains an implementation class for bin_search_tree_.\n+ * @file pat_trie_/find_fn_imps.hpp\n+ * Contains an implementation class for pat_trie.\n  */\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n-find(const_key_reference r_key)\n+find(key_const_reference r_key)\n {\n   PB_DS_ASSERT_VALID((*this))\n   node_pointer p_nd = find_imp(r_key);\n \n-  if (p_nd == 0 || p_nd->m_type != pat_trie_leaf_node_type)\n+  if (p_nd == 0 || p_nd->m_type != leaf_node)\n     {\n       PB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n       return end();\n     }\n \n-  if (synth_e_access_traits::equal_keys(PB_DS_V2F(static_cast<leaf_pointer>(p_nd)->value()), r_key))\n+  if (synth_access_traits::equal_keys(PB_DS_V2F(static_cast<leaf_pointer>(p_nd)->value()), r_key))\n     {\n       PB_DS_CHECK_KEY_EXISTS(r_key)\n       return iterator(p_nd);\n@@ -63,21 +63,21 @@ find(const_key_reference r_key)\n }\n \n PB_DS_CLASS_T_DEC\n-inline typename PB_DS_CLASS_C_DEC::const_point_iterator\n+inline typename PB_DS_CLASS_C_DEC::point_const_iterator\n PB_DS_CLASS_C_DEC::\n-find(const_key_reference r_key) const\n+find(key_const_reference r_key) const\n {\n   PB_DS_ASSERT_VALID((*this))\n \n-  const_node_pointer p_nd = const_cast<PB_DS_CLASS_C_DEC* >(this)->find_imp(r_key);\n+  node_const_pointer p_nd = const_cast<PB_DS_CLASS_C_DEC* >(this)->find_imp(r_key);\n \n-  if (p_nd == 0 || p_nd->m_type != pat_trie_leaf_node_type)\n+  if (p_nd == 0 || p_nd->m_type != leaf_node)\n     {\n       PB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n       return end();\n     }\n \n-  if (synth_e_access_traits::equal_keys(PB_DS_V2F(static_cast<const_leaf_pointer>(p_nd)->value()), r_key))\n+  if (synth_access_traits::equal_keys(PB_DS_V2F(static_cast<leaf_const_pointer>(p_nd)->value()), r_key))\n     {\n       PB_DS_CHECK_KEY_EXISTS(r_key)\n       return const_iterator(const_cast<node_pointer>(p_nd));\n@@ -90,23 +90,23 @@ find(const_key_reference r_key) const\n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n-find_imp(const_key_reference r_key)\n+find_imp(key_const_reference r_key)\n {\n   if (empty())\n-    return (0);\n+    return 0;\n \n-  typename synth_e_access_traits::const_iterator b_it =\n-    synth_e_access_traits::begin(r_key);\n-  typename synth_e_access_traits::const_iterator e_it =\n-    synth_e_access_traits::end(r_key);\n+  typename synth_access_traits::const_iterator b_it =\n+    synth_access_traits::begin(r_key);\n+  typename synth_access_traits::const_iterator e_it =\n+    synth_access_traits::end(r_key);\n \n   node_pointer p_nd = m_p_head->m_p_parent;\n   _GLIBCXX_DEBUG_ASSERT(p_nd != 0);\n \n-  while (p_nd->m_type != pat_trie_leaf_node_type)\n+  while (p_nd->m_type != leaf_node)\n     {\n-      _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == pat_trie_internal_node_type);\n-      node_pointer p_next_nd = static_cast<internal_node_pointer>(p_nd)->get_child_node(b_it,  e_it,  this);\n+      _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == i_node);\n+      node_pointer p_next_nd = static_cast<inode_pointer>(p_nd)->get_child_node(b_it,  e_it,  this);\n \n       if (p_next_nd == 0)\n \treturn p_nd;\n@@ -118,152 +118,152 @@ find_imp(const_key_reference r_key)\n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n-lower_bound_imp(const_key_reference r_key)\n+lower_bound_imp(key_const_reference r_key)\n {\n   if (empty())\n     return (m_p_head);\n \n   node_pointer p_nd = m_p_head->m_p_parent;\n   _GLIBCXX_DEBUG_ASSERT(p_nd != 0);\n \n-  typename PB_DS_CLASS_C_DEC::const_e_iterator b_it =\n-    synth_e_access_traits::begin(r_key);\n+  typename PB_DS_CLASS_C_DEC::a_const_iterator b_it =\n+    synth_access_traits::begin(r_key);\n \n-  typename PB_DS_CLASS_C_DEC::const_e_iterator e_it =\n-    synth_e_access_traits::end(r_key);\n+  typename PB_DS_CLASS_C_DEC::a_const_iterator e_it =\n+    synth_access_traits::end(r_key);\n \n   size_type checked_ind = 0;\n   while (true)\n     {\n-      if (p_nd->m_type == pat_trie_leaf_node_type)\n+      if (p_nd->m_type == leaf_node)\n         {\n-\t  if (!synth_e_access_traits::cmp_keys(PB_DS_V2F(static_cast<const_leaf_pointer>(p_nd)->value()), r_key))\n+\t  if (!synth_access_traits::cmp_keys(PB_DS_V2F(static_cast<leaf_const_pointer>(p_nd)->value()), r_key))\n \t    return p_nd;\n \t  iterator it(p_nd);\n \t  ++it;\n \t  return it.m_p_nd;\n         }\n \n-      _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == pat_trie_internal_node_type);\n+      _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == i_node);\n       const size_type new_checked_ind =\n-\tstatic_cast<internal_node_pointer>(p_nd)->get_e_ind();\n+\tstatic_cast<inode_pointer>(p_nd)->get_e_ind();\n \n       p_nd =\n-\tstatic_cast<internal_node_pointer>(p_nd)->get_lower_bound_child_node(                b_it, e_it, checked_ind, this);\n+\tstatic_cast<inode_pointer>(p_nd)->get_lower_bound_child_node(                b_it, e_it, checked_ind, this);\n       checked_ind = new_checked_ind;\n     }\n }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n-lower_bound(const_key_reference r_key)\n+lower_bound(key_const_reference r_key)\n { return point_iterator(lower_bound_imp(r_key)); }\n \n PB_DS_CLASS_T_DEC\n-inline typename PB_DS_CLASS_C_DEC::const_point_iterator\n+inline typename PB_DS_CLASS_C_DEC::point_const_iterator\n PB_DS_CLASS_C_DEC::\n-lower_bound(const_key_reference r_key) const\n+lower_bound(key_const_reference r_key) const\n {\n-  return const_point_iterator(const_cast<PB_DS_CLASS_C_DEC* >(this)->lower_bound_imp(r_key));\n+  return point_const_iterator(const_cast<PB_DS_CLASS_C_DEC* >(this)->lower_bound_imp(r_key));\n }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n-upper_bound(const_key_reference r_key)\n+upper_bound(key_const_reference r_key)\n {\n   point_iterator l_bound_it = lower_bound(r_key);\n \n   _GLIBCXX_DEBUG_ASSERT(l_bound_it == end() ||\n-\t\t   !synth_e_access_traits::cmp_keys(PB_DS_V2F(*l_bound_it),\n+\t\t   !synth_access_traits::cmp_keys(PB_DS_V2F(*l_bound_it),\n \t\t\t\t\t\t    r_key));\n \n   if (l_bound_it == end() ||\n-      synth_e_access_traits::cmp_keys(r_key, PB_DS_V2F(*l_bound_it)))\n+      synth_access_traits::cmp_keys(r_key, PB_DS_V2F(*l_bound_it)))\n     return l_bound_it;\n \n   return ++l_bound_it;\n }\n \n PB_DS_CLASS_T_DEC\n-inline typename PB_DS_CLASS_C_DEC::const_point_iterator\n+inline typename PB_DS_CLASS_C_DEC::point_const_iterator\n PB_DS_CLASS_C_DEC::\n-upper_bound(const_key_reference r_key) const\n+upper_bound(key_const_reference r_key) const\n {\n-  const_point_iterator l_bound_it = lower_bound(r_key);\n+  point_const_iterator l_bound_it = lower_bound(r_key);\n \n   _GLIBCXX_DEBUG_ASSERT(l_bound_it == end() ||\n-\t\t   !synth_e_access_traits::cmp_keys(PB_DS_V2F(*l_bound_it),\n+\t\t   !synth_access_traits::cmp_keys(PB_DS_V2F(*l_bound_it),\n \t\t\t\t\t\t    r_key));\n \n   if (l_bound_it == end() ||\n-      synth_e_access_traits::cmp_keys(r_key, PB_DS_V2F(*l_bound_it)))\n+      synth_access_traits::cmp_keys(r_key, PB_DS_V2F(*l_bound_it)))\n     return l_bound_it;\n   return ++l_bound_it;\n }\n \n PB_DS_CLASS_T_DEC\n-inline typename PB_DS_CLASS_C_DEC::const_e_iterator\n+inline typename PB_DS_CLASS_C_DEC::a_const_iterator\n PB_DS_CLASS_C_DEC::\n-pref_begin(const_node_pointer p_nd)\n+pref_begin(node_const_pointer p_nd)\n {\n-  if (p_nd->m_type == pat_trie_leaf_node_type)\n-    return (synth_e_access_traits::begin(PB_DS_V2F(static_cast<const_leaf_pointer>(p_nd)->value())));\n+  if (p_nd->m_type == leaf_node)\n+    return (synth_access_traits::begin(PB_DS_V2F(static_cast<leaf_const_pointer>(p_nd)->value())));\n \n-  _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == pat_trie_internal_node_type);\n-  return static_cast<const_internal_node_pointer>(p_nd)->pref_b_it();\n+  _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == i_node);\n+  return static_cast<inode_const_pointer>(p_nd)->pref_b_it();\n }\n \n PB_DS_CLASS_T_DEC\n-inline typename PB_DS_CLASS_C_DEC::const_e_iterator\n+inline typename PB_DS_CLASS_C_DEC::a_const_iterator\n PB_DS_CLASS_C_DEC::\n-pref_end(const_node_pointer p_nd)\n+pref_end(node_const_pointer p_nd)\n {\n-  if (p_nd->m_type == pat_trie_leaf_node_type)\n-    return (synth_e_access_traits::end(PB_DS_V2F(static_cast<const_leaf_pointer>(p_nd)->value())));\n+  if (p_nd->m_type == leaf_node)\n+    return (synth_access_traits::end(PB_DS_V2F(static_cast<leaf_const_pointer>(p_nd)->value())));\n \n-  _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == pat_trie_internal_node_type);\n-  return static_cast<const_internal_node_pointer>(p_nd)->pref_e_it();\n+  _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == i_node);\n+  return static_cast<inode_const_pointer>(p_nd)->pref_e_it();\n }\n \n PB_DS_CLASS_T_DEC\n-inline typename PB_DS_CLASS_C_DEC::const_leaf_pointer\n+inline typename PB_DS_CLASS_C_DEC::leaf_const_pointer\n PB_DS_CLASS_C_DEC::\n-leftmost_descendant(const_node_pointer p_nd)\n+leftmost_descendant(node_const_pointer p_nd)\n {\n-  if (p_nd->m_type == pat_trie_leaf_node_type)\n-    return static_cast<const_leaf_pointer>(p_nd);\n-  return static_cast<const_internal_node_pointer>(p_nd)->leftmost_descendant();\n+  if (p_nd->m_type == leaf_node)\n+    return static_cast<leaf_const_pointer>(p_nd);\n+  return static_cast<inode_const_pointer>(p_nd)->leftmost_descendant();\n }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::leaf_pointer\n PB_DS_CLASS_C_DEC::\n leftmost_descendant(node_pointer p_nd)\n {\n-  if (p_nd->m_type == pat_trie_leaf_node_type)\n+  if (p_nd->m_type == leaf_node)\n     return static_cast<leaf_pointer>(p_nd);\n-  return static_cast<internal_node_pointer>(p_nd)->leftmost_descendant();\n+  return static_cast<inode_pointer>(p_nd)->leftmost_descendant();\n }\n \n PB_DS_CLASS_T_DEC\n-inline typename PB_DS_CLASS_C_DEC::const_leaf_pointer\n+inline typename PB_DS_CLASS_C_DEC::leaf_const_pointer\n PB_DS_CLASS_C_DEC::\n-rightmost_descendant(const_node_pointer p_nd)\n+rightmost_descendant(node_const_pointer p_nd)\n {\n-  if (p_nd->m_type == pat_trie_leaf_node_type)\n-    return static_cast<const_leaf_pointer>(p_nd);\n-  return static_cast<const_internal_node_pointer>(p_nd)->rightmost_descendant();\n+  if (p_nd->m_type == leaf_node)\n+    return static_cast<leaf_const_pointer>(p_nd);\n+  return static_cast<inode_const_pointer>(p_nd)->rightmost_descendant();\n }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::leaf_pointer\n PB_DS_CLASS_C_DEC::\n rightmost_descendant(node_pointer p_nd)\n {\n-  if (p_nd->m_type == pat_trie_leaf_node_type)\n+  if (p_nd->m_type == leaf_node)\n     return static_cast<leaf_pointer>(p_nd);\n-  return static_cast<internal_node_pointer>(p_nd)->rightmost_descendant();\n+  return static_cast<inode_pointer>(p_nd)->rightmost_descendant();\n }\n "}, {"sha": "bca847db7847b24c35169762f81bce0ca25bc8f5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/head.hpp", "status": "removed", "additions": 0, "deletions": 129, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fhead.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fhead.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fhead.hpp?ref=ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c", "patch": "@@ -1,129 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 3, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file head.hpp\n- * Contains a leaf for a patricia tree.\n- */\n-\n-#ifndef PB_DS_PAT_TRIE_IHEAD_HPP\n-#define PB_DS_PAT_TRIE_IHEAD_HPP\n-\n-#include <ext/pb_ds/detail/pat_trie_/node_base.hpp>\n-#include <debug/debug.h>\n-\n-namespace __gnu_pbds\n-{\n-  namespace detail\n-  {\n-#define PB_DS_CLASS_T_DEC \\\n-    template<typename Type_Traits, typename E_Access_Traits,\t\\\n-\t      typename Metadata, typename Allocator>\n-\n-#define PB_DS_CLASS_C_DEC \\\n-    pat_trie_head<Type_Traits, E_Access_Traits,\tMetadata, Allocator>\n-\n-#define PB_DS_BASE_C_DEC \\\n-    pat_trie_node_base<Type_Traits, E_Access_Traits, Metadata, Allocator>\n-\n-    template<typename Type_Traits,\n-\t     typename E_Access_Traits,\n-\t     typename Metadata,\n-\t     typename Allocator>\n-    struct pat_trie_head : public PB_DS_BASE_C_DEC\n-    {\n-    private:\n-      typedef E_Access_Traits e_access_traits;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\te_access_traits>::other::const_pointer\n-      const_e_access_traits_pointer;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tPB_DS_BASE_C_DEC>::other::pointer\n-      node_pointer;\n-\n-#ifdef _GLIBCXX_DEBUG\n-      typedef\n-      typename PB_DS_BASE_C_DEC::subtree_debug_info\n-      subtree_debug_info;\n-#endif \n-\n-    public:\n-      pat_trie_head();\n-\n-#ifdef _GLIBCXX_DEBUG\n-      virtual subtree_debug_info\n-      assert_valid_imp(const_e_access_traits_pointer p_traits,\n-\t\t       const char* file, int line) const;\n-#endif \n-\n-    public:\n-      node_pointer m_p_min;\n-\n-      node_pointer m_p_max;\n-    };\n-\n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    pat_trie_head() : PB_DS_BASE_C_DEC(pat_trie_head_node_type)\n-    { }\n-\n-#ifdef _GLIBCXX_DEBUG\n-    PB_DS_CLASS_T_DEC\n-    typename PB_DS_CLASS_C_DEC::subtree_debug_info\n-    PB_DS_CLASS_C_DEC::\n-    assert_valid_imp(const_e_access_traits_pointer /*p_traits*/,\n-\t\t     const char* __file, int __line) const\n-    {\n-      _GLIBCXX_DEBUG_VERIFY_AT(false,\n-\t\t\t       _M_message(\"Assertion from %1;:%2;\")\n-\t\t\t       ._M_string(__FILE__)._M_integer(__LINE__),\n-\t\t\t       __file, __line);\n-      return subtree_debug_info();\n-    }\n-#endif \n-\n-#undef PB_DS_CLASS_T_DEC\n-#undef PB_DS_CLASS_C_DEC\n-#undef PB_DS_BASE_C_DEC\n-\n-  } // namespace detail\n-} // namespace __gnu_pbds\n-\n-#endif\n-"}, {"sha": "8246b5182520db189a92e304827a6fc9d5dfb7f6", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/info_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finfo_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,8 +34,8 @@\n // warranty.\n \n /**\n- * @file info_fn_imps.hpp\n- * Contains an implementation class for bin_search_tree_.\n+ * @file pat_trie_/info_fn_imps.hpp\n+ * Contains an implementation class for pat_trie.\n  */\n \n PB_DS_CLASS_T_DEC\n@@ -54,5 +54,5 @@ PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n max_size() const\n-{ return s_internal_node_allocator.max_size(); }\n+{ return s_inode_allocator.max_size(); }\n "}, {"sha": "1b11280fd321d653eb95ed18bf2cefd40ccb0cb1", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/insert_join_fn_imps.hpp", "status": "modified", "additions": 106, "deletions": 103, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finsert_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finsert_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finsert_join_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,8 +34,8 @@\n // warranty.\n \n /**\n- * @file insert_join_fn_imps.hpp\n- * Contains an implementation class for bin_search_tree_.\n+ * @file pat_trie_/insert_join_fn_imps.hpp\n+ * Contains an implementation class for pat_trie.\n  */\n \n PB_DS_CLASS_T_DEC\n@@ -45,15 +45,15 @@ join(PB_DS_CLASS_C_DEC& other)\n {\n   PB_DS_ASSERT_VALID((*this))\n   PB_DS_ASSERT_VALID(other)\n-  split_join_branch_bag bag;\n+  branch_bag bag;\n   if (!join_prep(other, bag))\n     {\n       PB_DS_ASSERT_VALID((*this))\n       PB_DS_ASSERT_VALID(other)\n       return;\n     }\n \n-  m_p_head->m_p_parent = rec_join(m_p_head->m_p_parent, \n+  m_p_head->m_p_parent = rec_join(m_p_head->m_p_parent,\n \t\t\t\t  other.m_p_head->m_p_parent, 0, bag);\n \n   m_p_head->m_p_parent->m_p_parent = m_p_head;\n@@ -68,7 +68,7 @@ join(PB_DS_CLASS_C_DEC& other)\n PB_DS_CLASS_T_DEC\n bool\n PB_DS_CLASS_C_DEC::\n-join_prep(PB_DS_CLASS_C_DEC& other, split_join_branch_bag& r_bag)\n+join_prep(PB_DS_CLASS_C_DEC& other, branch_bag& r_bag)\n {\n   PB_DS_ASSERT_VALID((*this))\n   PB_DS_ASSERT_VALID(other)\n@@ -82,12 +82,12 @@ join_prep(PB_DS_CLASS_C_DEC& other, split_join_branch_bag& r_bag)\n     }\n \n   const bool greater =\n-    synth_e_access_traits::cmp_keys(PB_DS_V2F(static_cast<const_leaf_pointer>(m_p_head->m_p_max)->value()),\n-\t\t\t\t    PB_DS_V2F(static_cast<const_leaf_pointer>(other.m_p_head->m_p_min)->value()));\n+    synth_access_traits::cmp_keys(PB_DS_V2F(static_cast<leaf_const_pointer>(m_p_head->m_p_max)->value()),\n+\t\t\t\t    PB_DS_V2F(static_cast<leaf_const_pointer>(other.m_p_head->m_p_min)->value()));\n \n   const bool lesser =\n-    synth_e_access_traits::cmp_keys(PB_DS_V2F(static_cast<const_leaf_pointer>(other.m_p_head->m_p_max)->value()),\n-\t\t\t\t    PB_DS_V2F(static_cast<const_leaf_pointer>(m_p_head->m_p_min)->value()));\n+    synth_access_traits::cmp_keys(PB_DS_V2F(static_cast<leaf_const_pointer>(other.m_p_head->m_p_max)->value()),\n+\t\t\t\t    PB_DS_V2F(static_cast<leaf_const_pointer>(m_p_head->m_p_min)->value()));\n \n   if (!greater && !lesser)\n     __throw_join_error();\n@@ -100,91 +100,92 @@ join_prep(PB_DS_CLASS_C_DEC& other, split_join_branch_bag& r_bag)\n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-rec_join_prep(const_node_pointer p_l, const_node_pointer p_r, split_join_branch_bag& r_bag)\n+rec_join_prep(node_const_pointer p_l, node_const_pointer p_r, \n+\t      branch_bag& r_bag)\n {\n-  if (p_l->m_type == pat_trie_leaf_node_type)\n+  if (p_l->m_type == leaf_node)\n     {\n-      if (p_r->m_type == pat_trie_leaf_node_type)\n-        {\n-\t  rec_join_prep(static_cast<const_leaf_pointer>(p_l),\n-\t\t\tstatic_cast<const_leaf_pointer>(p_r), r_bag);\n+      if (p_r->m_type == leaf_node)\n+\t{\n+\t  rec_join_prep(static_cast<leaf_const_pointer>(p_l),\n+\t\t\tstatic_cast<leaf_const_pointer>(p_r), r_bag);\n \t  return;\n-        }\n+\t}\n \n-      _GLIBCXX_DEBUG_ASSERT(p_r->m_type == pat_trie_internal_node_type);\n-      rec_join_prep(static_cast<const_leaf_pointer>(p_l),\n-\t\t    static_cast<const_internal_node_pointer>(p_r), r_bag);\n+      _GLIBCXX_DEBUG_ASSERT(p_r->m_type == i_node);\n+      rec_join_prep(static_cast<leaf_const_pointer>(p_l),\n+\t\t    static_cast<inode_const_pointer>(p_r), r_bag);\n       return;\n     }\n \n-  _GLIBCXX_DEBUG_ASSERT(p_l->m_type == pat_trie_internal_node_type);\n-  if (p_r->m_type == pat_trie_leaf_node_type)\n+  _GLIBCXX_DEBUG_ASSERT(p_l->m_type == i_node);\n+  if (p_r->m_type == leaf_node)\n     {\n-      rec_join_prep(static_cast<const_internal_node_pointer>(p_l),\n-\t\t    static_cast<const_leaf_pointer>(p_r), r_bag);\n+      rec_join_prep(static_cast<inode_const_pointer>(p_l),\n+\t\t    static_cast<leaf_const_pointer>(p_r), r_bag);\n       return;\n     }\n \n-  _GLIBCXX_DEBUG_ASSERT(p_r->m_type == pat_trie_internal_node_type);\n+  _GLIBCXX_DEBUG_ASSERT(p_r->m_type == i_node);\n \n-  rec_join_prep(static_cast<const_internal_node_pointer>(p_l),\n-\t\tstatic_cast<const_internal_node_pointer>(p_r), r_bag);\n+  rec_join_prep(static_cast<inode_const_pointer>(p_l),\n+\t\tstatic_cast<inode_const_pointer>(p_r), r_bag);\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-rec_join_prep(const_leaf_pointer /*p_l*/, const_leaf_pointer /*p_r*/, \n-\t      split_join_branch_bag& r_bag)\n+rec_join_prep(leaf_const_pointer /*p_l*/, leaf_const_pointer /*p_r*/,\n+\t      branch_bag& r_bag)\n { r_bag.add_branch(); }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-rec_join_prep(const_leaf_pointer /*p_l*/, const_internal_node_pointer /*p_r*/, \n-\t      split_join_branch_bag& r_bag)\n+rec_join_prep(leaf_const_pointer /*p_l*/, inode_const_pointer /*p_r*/,\n+\t      branch_bag& r_bag)\n { r_bag.add_branch(); }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-rec_join_prep(const_internal_node_pointer /*p_l*/, const_leaf_pointer /*p_r*/, \n-\t      split_join_branch_bag& r_bag)\n+rec_join_prep(inode_const_pointer /*p_l*/, leaf_const_pointer /*p_r*/,\n+\t      branch_bag& r_bag)\n { r_bag.add_branch(); }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-rec_join_prep(const_internal_node_pointer p_l, const_internal_node_pointer p_r,\n-\t      split_join_branch_bag& r_bag)\n+rec_join_prep(inode_const_pointer p_l, inode_const_pointer p_r,\n+\t      branch_bag& r_bag)\n {\n-  if (p_l->get_e_ind() == p_r->get_e_ind() && \n-      synth_e_access_traits::equal_prefixes(p_l->pref_b_it(), p_l->pref_e_it(),\n+  if (p_l->get_e_ind() == p_r->get_e_ind() &&\n+      synth_access_traits::equal_prefixes(p_l->pref_b_it(), p_l->pref_e_it(),\n \t\t\t\t\t    p_r->pref_b_it(), p_r->pref_e_it()))\n     {\n-      for (typename internal_node::const_iterator it = p_r->begin();\n+      for (typename inode::const_iterator it = p_r->begin();\n \t   it != p_r->end(); ++ it)\n-        {\n-\t  const_node_pointer p_l_join_child = p_l->get_join_child(*it, this);\n+\t{\n+\t  node_const_pointer p_l_join_child = p_l->get_join_child(*it, this);\n \t  if (p_l_join_child != 0)\n \t    rec_join_prep(p_l_join_child, * it, r_bag);\n-        }\n+\t}\n       return;\n     }\n \n-  if (p_r->get_e_ind() < p_l->get_e_ind() && \n+  if (p_r->get_e_ind() < p_l->get_e_ind() &&\n       p_r->should_be_mine(p_l->pref_b_it(), p_l->pref_e_it(), 0, this))\n     {\n-      const_node_pointer p_r_join_child = p_r->get_join_child(p_l, this);\n+      node_const_pointer p_r_join_child = p_r->get_join_child(p_l, this);\n       if (p_r_join_child != 0)\n \trec_join_prep(p_r_join_child, p_l, r_bag);\n       return;\n     }\n \n-  if (p_r->get_e_ind() < p_l->get_e_ind() && \n+  if (p_r->get_e_ind() < p_l->get_e_ind() &&\n       p_r->should_be_mine(p_l->pref_b_it(), p_l->pref_e_it(), 0, this))\n     {\n-      const_node_pointer p_r_join_child = p_r->get_join_child(p_l, this);\n+      node_const_pointer p_r_join_child = p_r->get_join_child(p_l, this);\n       if (p_r_join_child != 0)\n \trec_join_prep(p_r_join_child, p_l, r_bag);\n       return;\n@@ -195,56 +196,57 @@ rec_join_prep(const_internal_node_pointer p_l, const_internal_node_pointer p_r,\n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n-rec_join(node_pointer p_l, node_pointer p_r, size_type checked_ind, split_join_branch_bag& r_bag)\n+rec_join(node_pointer p_l, node_pointer p_r, size_type checked_ind, \n+\t branch_bag& r_bag)\n {\n   _GLIBCXX_DEBUG_ASSERT(p_r != 0);\n   if (p_l == 0)\n     {\n-      apply_update(p_r, (node_update* )this);\n+      apply_update(p_r, (node_update*)this);\n       return (p_r);\n     }\n \n-  if (p_l->m_type == pat_trie_leaf_node_type)\n+  if (p_l->m_type == leaf_node)\n     {\n-      if (p_r->m_type == pat_trie_leaf_node_type)\n-        {\n+      if (p_r->m_type == leaf_node)\n+\t{\n \t  node_pointer p_ret = rec_join(static_cast<leaf_pointer>(p_l),\n \t\t\t\t\tstatic_cast<leaf_pointer>(p_r), r_bag);\n-\t  apply_update(p_ret, (node_update* )this);\n+\t  apply_update(p_ret, (node_update*)this);\n \t  return p_ret;\n-        }\n+\t}\n \n-      _GLIBCXX_DEBUG_ASSERT(p_r->m_type == pat_trie_internal_node_type);\n+      _GLIBCXX_DEBUG_ASSERT(p_r->m_type == i_node);\n       node_pointer p_ret = rec_join(static_cast<leaf_pointer>(p_l),\n-\t\t\t\t    static_cast<internal_node_pointer>(p_r),\n+\t\t\t\t    static_cast<inode_pointer>(p_r),\n \t\t\t\t    checked_ind, r_bag);\n-      apply_update(p_ret, (node_update* )this);\n+      apply_update(p_ret, (node_update*)this);\n       return p_ret;\n     }\n \n-  _GLIBCXX_DEBUG_ASSERT(p_l->m_type == pat_trie_internal_node_type);\n-  if (p_r->m_type == pat_trie_leaf_node_type)\n+  _GLIBCXX_DEBUG_ASSERT(p_l->m_type == i_node);\n+  if (p_r->m_type == leaf_node)\n     {\n-      node_pointer p_ret = rec_join(static_cast<internal_node_pointer>(p_l),\n+      node_pointer p_ret = rec_join(static_cast<inode_pointer>(p_l),\n \t\t\t\t    static_cast<leaf_pointer>(p_r),\n \t\t\t\t    checked_ind, r_bag);\n-      apply_update(p_ret, (node_update* )this);\n+      apply_update(p_ret, (node_update*)this);\n       return p_ret;\n     }\n \n-  _GLIBCXX_DEBUG_ASSERT(p_r->m_type == pat_trie_internal_node_type);\n-  node_pointer p_ret = rec_join(static_cast<internal_node_pointer>(p_l),\n-\t\t\t\tstatic_cast<internal_node_pointer>(p_r), \n+  _GLIBCXX_DEBUG_ASSERT(p_r->m_type == i_node);\n+  node_pointer p_ret = rec_join(static_cast<inode_pointer>(p_l),\n+\t\t\t\tstatic_cast<inode_pointer>(p_r),\n \t\t\t\tr_bag);\n \n-  apply_update(p_ret, (node_update* )this);\n+  apply_update(p_ret, (node_update*)this);\n   return p_ret;\n }\n \n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n-rec_join(leaf_pointer p_l, leaf_pointer p_r, split_join_branch_bag& r_bag)\n+rec_join(leaf_pointer p_l, leaf_pointer p_r, branch_bag& r_bag)\n {\n   _GLIBCXX_DEBUG_ASSERT(p_r != 0);\n   if (p_l == 0)\n@@ -257,13 +259,13 @@ rec_join(leaf_pointer p_l, leaf_pointer p_r, split_join_branch_bag& r_bag)\n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n-rec_join(leaf_pointer p_l, internal_node_pointer p_r, size_type checked_ind, \n-\t split_join_branch_bag& r_bag)\n+rec_join(leaf_pointer p_l, inode_pointer p_r, size_type checked_ind,\n+\t branch_bag& r_bag)\n {\n #ifdef _GLIBCXX_DEBUG\n   const size_type lhs_leafs = PB_DS_RECURSIVE_COUNT_LEAFS(p_l);\n   const size_type rhs_leafs = PB_DS_RECURSIVE_COUNT_LEAFS(p_r);\n-#endif \n+#endif\n \n   _GLIBCXX_DEBUG_ASSERT(p_r != 0);\n   node_pointer p_ret = rec_join(p_r, p_l, checked_ind, r_bag);\n@@ -274,22 +276,22 @@ rec_join(leaf_pointer p_l, internal_node_pointer p_r, size_type checked_ind,\n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n-rec_join(internal_node_pointer p_l, leaf_pointer p_r, size_type checked_ind, split_join_branch_bag& r_bag)\n+rec_join(inode_pointer p_l, leaf_pointer p_r, size_type checked_ind, branch_bag& r_bag)\n {\n   _GLIBCXX_DEBUG_ASSERT(p_l != 0);\n   _GLIBCXX_DEBUG_ASSERT(p_r != 0);\n \n #ifdef _GLIBCXX_DEBUG\n   const size_type lhs_leafs = PB_DS_RECURSIVE_COUNT_LEAFS(p_l);\n   const size_type rhs_leafs = PB_DS_RECURSIVE_COUNT_LEAFS(p_r);\n-#endif \n+#endif\n \n   if (!p_l->should_be_mine(pref_begin(p_r), pref_end(p_r), checked_ind, this))\n     {\n       node_pointer p_ret = insert_branch(p_l, p_r, r_bag);\n       PB_DS_ASSERT_NODE_VALID(p_ret)\n       _GLIBCXX_DEBUG_ASSERT(PB_DS_RECURSIVE_COUNT_LEAFS(p_ret) ==\n-       \t\t            lhs_leafs + rhs_leafs);\n+       \t\t\t    lhs_leafs + rhs_leafs);\n       return p_ret;\n     }\n \n@@ -312,37 +314,38 @@ rec_join(internal_node_pointer p_l, leaf_pointer p_r, size_type checked_ind, spl\n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n-rec_join(internal_node_pointer p_l, internal_node_pointer p_r, split_join_branch_bag& r_bag)\n+rec_join(inode_pointer p_l, inode_pointer p_r, \n+\t branch_bag& r_bag)\n {\n   _GLIBCXX_DEBUG_ASSERT(p_l != 0);\n   _GLIBCXX_DEBUG_ASSERT(p_r != 0);\n \n #ifdef _GLIBCXX_DEBUG\n   const size_type lhs_leafs = PB_DS_RECURSIVE_COUNT_LEAFS(p_l);\n   const size_type rhs_leafs = PB_DS_RECURSIVE_COUNT_LEAFS(p_r);\n-#endif \n+#endif\n \n-  if (p_l->get_e_ind() == p_r->get_e_ind() && \n-      synth_e_access_traits::equal_prefixes(p_l->pref_b_it(), p_l->pref_e_it(),\n+  if (p_l->get_e_ind() == p_r->get_e_ind() &&\n+      synth_access_traits::equal_prefixes(p_l->pref_b_it(), p_l->pref_e_it(),\n \t\t\t\t\t    p_r->pref_b_it(), p_r->pref_e_it()))\n     {\n-      for (typename internal_node::iterator it = p_r->begin();\n+      for (typename inode::iterator it = p_r->begin();\n \t   it != p_r->end(); ++ it)\n-        {\n+\t{\n \t  node_pointer p_new_child = rec_join(p_l->get_join_child(*it, this),\n \t\t\t\t\t      * it, 0, r_bag);\n \t  p_l->replace_child(p_new_child, pref_begin(p_new_child),\n \t\t\t     pref_end(p_new_child), this);\n-        }\n+\t}\n \n-      p_r->~internal_node();\n-      s_internal_node_allocator.deallocate(p_r, 1);\n+      p_r->~inode();\n+      s_inode_allocator.deallocate(p_r, 1);\n       PB_DS_ASSERT_NODE_VALID(p_l)\n       _GLIBCXX_DEBUG_ASSERT(PB_DS_RECURSIVE_COUNT_LEAFS(p_l) == lhs_leafs + rhs_leafs);\n       return p_l;\n     }\n \n-  if (p_l->get_e_ind() < p_r->get_e_ind() && \n+  if (p_l->get_e_ind() < p_r->get_e_ind() &&\n       p_l->should_be_mine(p_r->pref_b_it(), p_r->pref_e_it(), 0, this))\n     {\n       node_pointer p_new_child = rec_join(p_l->get_join_child(p_r, this),\n@@ -353,13 +356,13 @@ rec_join(internal_node_pointer p_l, internal_node_pointer p_r, split_join_branch\n       return p_l;\n     }\n \n-  if (p_r->get_e_ind() < p_l->get_e_ind() && \n+  if (p_r->get_e_ind() < p_l->get_e_ind() &&\n       p_r->should_be_mine(p_l->pref_b_it(), p_l->pref_e_it(), 0, this))\n     {\n       node_pointer p_new_child = rec_join(p_r->get_join_child(p_l, this), p_l,\n \t\t\t\t\t  0, r_bag);\n \n-      p_r->replace_child(p_new_child, pref_begin(p_new_child), \n+      p_r->replace_child(p_new_child, pref_begin(p_new_child),\n \t\t\t pref_end(p_new_child), this);\n \n       PB_DS_ASSERT_NODE_VALID(p_r)\n@@ -379,8 +382,8 @@ PB_DS_CLASS_C_DEC::\n insert(const_reference r_val)\n {\n   node_pointer p_lf = find_imp(PB_DS_V2F(r_val));\n-  if (p_lf != 0 && p_lf->m_type == pat_trie_leaf_node_type && \n-      synth_e_access_traits::equal_keys(PB_DS_V2F(static_cast<leaf_pointer>(p_lf)->value()), PB_DS_V2F(r_val)))\n+  if (p_lf != 0 && p_lf->m_type == leaf_node &&\n+      synth_access_traits::equal_keys(PB_DS_V2F(static_cast<leaf_pointer>(p_lf)->value()), PB_DS_V2F(r_val)))\n     {\n       PB_DS_CHECK_KEY_EXISTS(PB_DS_V2F(r_val))\n       PB_DS_ASSERT_VALID((*this))\n@@ -393,34 +396,34 @@ insert(const_reference r_val)\n   cond_dealtor cond(p_new_lf);\n \n   new (p_new_lf) leaf(r_val);\n-  apply_update(p_new_lf, (node_update* )this);\n+  apply_update(p_new_lf, (node_update*)this);\n   cond.set_call_destructor();\n-  split_join_branch_bag bag;\n+  branch_bag bag;\n   bag.add_branch();\n   m_p_head->m_p_parent = rec_join(m_p_head->m_p_parent, p_new_lf, 0, bag);\n   m_p_head->m_p_parent->m_p_parent = m_p_head;\n   cond.set_no_action_dtor();\n   ++m_size;\n   update_min_max_for_inserted_leaf(p_new_lf);\n-  _GLIBCXX_DEBUG_ONLY(debug_base::insert_new(PB_DS_V2F(r_val));)   \n+  _GLIBCXX_DEBUG_ONLY(debug_base::insert_new(PB_DS_V2F(r_val));)\n   PB_DS_ASSERT_VALID((*this))\n   return std::make_pair(point_iterator(p_new_lf), true);\n }\n \n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n-keys_diff_ind(typename e_access_traits::const_iterator b_l,\n-\t      typename e_access_traits::const_iterator e_l,\n-\t      typename e_access_traits::const_iterator b_r,\n-\t      typename e_access_traits::const_iterator e_r)\n+keys_diff_ind(typename access_traits::const_iterator b_l,\n+\t      typename access_traits::const_iterator e_l,\n+\t      typename access_traits::const_iterator b_r,\n+\t      typename access_traits::const_iterator e_r)\n {\n   size_type diff_pos = 0;\n   while (b_l != e_l)\n     {\n       if (b_r == e_r)\n \treturn (diff_pos);\n-      if (e_access_traits::e_pos(*b_l) != e_access_traits::e_pos(*b_r))\n+      if (access_traits::e_pos(*b_l) != access_traits::e_pos(*b_r))\n \treturn (diff_pos);\n       ++b_l;\n       ++b_r;\n@@ -431,20 +434,20 @@ keys_diff_ind(typename e_access_traits::const_iterator b_l,\n }\n \n PB_DS_CLASS_T_DEC\n-typename PB_DS_CLASS_C_DEC::internal_node_pointer\n+typename PB_DS_CLASS_C_DEC::inode_pointer\n PB_DS_CLASS_C_DEC::\n-insert_branch(node_pointer p_l, node_pointer p_r, split_join_branch_bag& r_bag)\n+insert_branch(node_pointer p_l, node_pointer p_r, branch_bag& r_bag)\n {\n-  typename synth_e_access_traits::const_iterator left_b_it = pref_begin(p_l);\n-  typename synth_e_access_traits::const_iterator left_e_it = pref_end(p_l);\n-  typename synth_e_access_traits::const_iterator right_b_it = pref_begin(p_r);\n-  typename synth_e_access_traits::const_iterator right_e_it = pref_end(p_r);\n+  typename synth_access_traits::const_iterator left_b_it = pref_begin(p_l);\n+  typename synth_access_traits::const_iterator left_e_it = pref_end(p_l);\n+  typename synth_access_traits::const_iterator right_b_it = pref_begin(p_r);\n+  typename synth_access_traits::const_iterator right_e_it = pref_end(p_r);\n \n-  const size_type diff_ind = keys_diff_ind(left_b_it, left_e_it, \n+  const size_type diff_ind = keys_diff_ind(left_b_it, left_e_it,\n \t\t\t\t\t   right_b_it, right_e_it);\n \n-  internal_node_pointer p_new_nd = r_bag.get_branch();\n-  new (p_new_nd) internal_node(diff_ind, left_b_it);\n+  inode_pointer p_new_nd = r_bag.get_branch();\n+  new (p_new_nd) inode(diff_ind, left_b_it);\n   p_new_nd->add_child(p_l, left_b_it, left_e_it, this);\n   p_new_nd->add_child(p_r, right_b_it, right_e_it, this);\n   p_l->m_p_parent = p_new_nd;\n@@ -459,11 +462,11 @@ PB_DS_CLASS_C_DEC::\n update_min_max_for_inserted_leaf(leaf_pointer p_new_lf)\n {\n   if (m_p_head->m_p_min == m_p_head ||\n-      synth_e_access_traits::cmp_keys(PB_DS_V2F(p_new_lf->value()),\n-\t\t\t\t      PB_DS_V2F(static_cast<const_leaf_pointer>(m_p_head->m_p_min)->value())))\n+      synth_access_traits::cmp_keys(PB_DS_V2F(p_new_lf->value()),\n+\t\t\t\t      PB_DS_V2F(static_cast<leaf_const_pointer>(m_p_head->m_p_min)->value())))\n     m_p_head->m_p_min = p_new_lf;\n \n   if (m_p_head->m_p_max == m_p_head ||\n-      synth_e_access_traits::cmp_keys(PB_DS_V2F(static_cast<const_leaf_pointer>(m_p_head->m_p_max)->value()), PB_DS_V2F(p_new_lf->value())))\n+      synth_access_traits::cmp_keys(PB_DS_V2F(static_cast<leaf_const_pointer>(m_p_head->m_p_max)->value()), PB_DS_V2F(p_new_lf->value())))\n     m_p_head->m_p_max = p_new_lf;\n }"}, {"sha": "cb8b6740d79d9963b40e3b1f499072c6c9f05d74", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/internal_node.hpp", "status": "removed", "additions": 0, "deletions": 603, "changes": 603, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finternal_node.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finternal_node.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finternal_node.hpp?ref=ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c", "patch": "@@ -1,603 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006, 2007, 2009, 2010, 2011\n-// Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 3, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file internal_node.hpp\n- * Contains an internal PB_DS_BASE_C_DEC for a patricia tree.\n- */\n-\n-#ifndef PB_DS_PAT_TRIE_INTERNAL_NODE_HPP\n-#define PB_DS_PAT_TRIE_INTERNAL_NODE_HPP\n-\n-#include <debug/debug.h>\n-\n-namespace __gnu_pbds\n-{\n-  namespace detail\n-  {\n-#define PB_DS_CLASS_T_DEC \\\n-    template<typename Type_Traits, typename E_Access_Traits,  \\\n-\t     typename Metadata, typename Allocator>\n-\n-#define PB_DS_CLASS_C_DEC \\\n-    pat_trie_internal_node<Type_Traits, E_Access_Traits, Metadata, Allocator>\n-\n-#define PB_DS_BASE_C_DEC \\\n-    pat_trie_node_base<Type_Traits, E_Access_Traits, Metadata, Allocator>\n-\n-#define PB_DS_LEAF_C_DEC \\\n-    pat_trie_leaf<Type_Traits, E_Access_Traits, Metadata, Allocator>\n-\n-    template<typename Type_Traits,\n-\t     typename E_Access_Traits,\n-\t     typename Metadata,\n-\t     typename Allocator>\n-    struct pat_trie_internal_node : public PB_DS_BASE_C_DEC\n-    {\n-    private:\n-      typedef PB_DS_BASE_C_DEC \t\t\tbase_type;\n-      typedef Type_Traits \t\t\ttype_traits;\n-      typedef typename type_traits::value_type \tvalue_type;\n-      typedef typename Allocator::size_type \tsize_type;\n-\n-      typedef E_Access_Traits e_access_traits;\n-      typedef typename e_access_traits::const_iterator const_e_iterator;\n-      typedef typename Allocator::template rebind<e_access_traits>::other access_rebind;\n-      typedef typename access_rebind::const_pointer const_e_access_traits_pointer;\n-\n-      typedef typename Allocator::template rebind<base_type>::other base_rebind;\n-      typedef typename base_rebind::pointer node_pointer;\n-      typedef typename base_rebind::const_pointer const_node_pointer;\n-\n-      typedef PB_DS_LEAF_C_DEC leaf;\n-      typedef typename Allocator::template rebind<leaf>::other leaf_rebind;\n-      typedef typename leaf_rebind::pointer leaf_pointer;\n-      typedef typename leaf_rebind::const_pointer const_leaf_pointer;\n-\n-      typedef typename Allocator::template rebind<pat_trie_internal_node>::other internal_node_rebind;\n-      typedef typename internal_node_rebind::pointer internal_node_pointer;\n-      typedef typename internal_node_rebind::const_pointer const_internal_node_pointer;\n-\n-#ifdef _GLIBCXX_DEBUG\n-      typedef typename base_type::subtree_debug_info subtree_debug_info;\n-\n-      virtual subtree_debug_info\n-      assert_valid_imp(const_e_access_traits_pointer,\n-\t\t       const char* file, int line) const;\n-#endif \n-\n-      inline size_type\n-      get_pref_pos(const_e_iterator, const_e_iterator, \n-\t\t   const_e_access_traits_pointer) const;\n-\n-    public:\n-      typedef typename Allocator::template rebind<node_pointer>::other node_pointer_rebind;\n-      typedef typename node_pointer_rebind::pointer node_pointer_pointer;\n-      typedef typename node_pointer_rebind::reference node_pointer_reference;\n-\n-      enum\n-\t{\n-\t  arr_size = E_Access_Traits::max_size + 1\n-\t};\n-      PB_DS_STATIC_ASSERT(min_arr_size, arr_size >= 2);\n-\n-#include <ext/pb_ds/detail/pat_trie_/const_child_iterator.hpp>\n-#include <ext/pb_ds/detail/pat_trie_/child_iterator.hpp>\n-\n-      pat_trie_internal_node(size_type, const const_e_iterator);\n-\n-      void\n-      update_prefixes(const_e_access_traits_pointer);\n-\n-      const_iterator\n-      begin() const;\n-\n-      iterator\n-      begin();\n-\n-      const_iterator\n-      end() const;\n-\n-      iterator\n-      end();\n-\n-      inline node_pointer\n-      get_child_node(const_e_iterator, const_e_iterator, \n-\t\t     const_e_access_traits_pointer);\n-\n-      inline const_node_pointer\n-      get_child_node(const_e_iterator, const_e_iterator, \n-\t\t     const_e_access_traits_pointer) const;\n-\n-      inline iterator\n-      get_child_it(const_e_iterator, const_e_iterator, \n-\t\t   const_e_access_traits_pointer);\n-\n-      inline node_pointer\n-      get_lower_bound_child_node(const_e_iterator, const_e_iterator, \n-\t\t\t\t size_type, const_e_access_traits_pointer);\n-\n-      inline node_pointer\n-      add_child(node_pointer, const_e_iterator, const_e_iterator, \n-\t\tconst_e_access_traits_pointer);\n-\n-      inline const_node_pointer\n-      get_join_child(const_node_pointer, const_e_access_traits_pointer) const;\n-\n-      inline node_pointer\n-      get_join_child(node_pointer, const_e_access_traits_pointer);\n-\n-      void\n-      remove_child(node_pointer p_nd);\n-\n-      iterator\n-      remove_child(iterator it);\n-\n-      void\n-      replace_child(node_pointer, const_e_iterator, const_e_iterator, \n-\t\t    const_e_access_traits_pointer);\n-\n-      inline const_e_iterator\n-      pref_b_it() const;\n-\n-      inline const_e_iterator\n-      pref_e_it() const;\n-\n-      inline size_type\n-      get_e_ind() const;\n-\n-      bool\n-      should_be_mine(const_e_iterator, const_e_iterator, size_type, \n-\t\t     const_e_access_traits_pointer) const;\n-\n-      leaf_pointer\n-      leftmost_descendant();\n-\n-      const_leaf_pointer\n-      leftmost_descendant() const;\n-\n-      leaf_pointer\n-      rightmost_descendant();\n-\n-      const_leaf_pointer\n-      rightmost_descendant() const;\n-\n-#ifdef _GLIBCXX_DEBUG\n-      size_type\n-      e_ind() const;\n-#endif \n-\n-    private:\n-      pat_trie_internal_node(const pat_trie_internal_node&);\n-\n-      size_type\n-      get_begin_pos() const;\n-\n-      const size_type m_e_ind;\n-      const_e_iterator m_pref_b_it;\n-      const_e_iterator m_pref_e_it;\n-      node_pointer m_a_p_children[arr_size];\n-      static leaf_rebind s_leaf_alloc;\n-      static internal_node_rebind s_internal_node_alloc;\n-    };\n-\n-    PB_DS_CLASS_T_DEC\n-    typename PB_DS_CLASS_C_DEC::leaf_rebind\n-    PB_DS_CLASS_C_DEC::s_leaf_alloc;\n-\n-    PB_DS_CLASS_T_DEC\n-    typename PB_DS_CLASS_C_DEC::internal_node_rebind\n-    PB_DS_CLASS_C_DEC::s_internal_node_alloc;\n-\n-    PB_DS_CLASS_T_DEC\n-    inline typename PB_DS_CLASS_C_DEC::size_type\n-    PB_DS_CLASS_C_DEC::\n-    get_pref_pos(const_e_iterator b_it, const_e_iterator e_it, \n-\t\t const_e_access_traits_pointer p_traits) const\n-    {\n-      if (static_cast<std::size_t>(std::distance(b_it, e_it)) <= m_e_ind)\n-\treturn 0;\n-      std::advance(b_it, m_e_ind);\n-      return 1 + p_traits->e_pos(*b_it);\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    pat_trie_internal_node(size_type len, const const_e_iterator it) :\n-      PB_DS_BASE_C_DEC(pat_trie_internal_node_type),\n-      m_e_ind(len), m_pref_b_it(it), m_pref_e_it(it)\n-    {\n-      std::advance(m_pref_e_it, m_e_ind);\n-      std::fill(m_a_p_children, m_a_p_children + arr_size,\n-\t\tstatic_cast<node_pointer>(0));\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    void\n-    PB_DS_CLASS_C_DEC::\n-    update_prefixes(const_e_access_traits_pointer p_traits)\n-    {\n-      node_pointer p_first = *begin();\n-      if (p_first->m_type == pat_trie_leaf_node_type)\n-\t{\n-\t  const_leaf_pointer p = static_cast<const_leaf_pointer>(p_first);\n-\t  m_pref_b_it = p_traits->begin(e_access_traits::extract_key(p->value()));\n-\t}\n-      else\n-\t{\n-\t  _GLIBCXX_DEBUG_ASSERT(p_first->m_type == pat_trie_internal_node_type);\n-\t  m_pref_b_it = static_cast<internal_node_pointer>(p_first)->pref_b_it();\n-\t}\n-      m_pref_e_it = m_pref_b_it;\n-      std::advance(m_pref_e_it, m_e_ind);\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    typename PB_DS_CLASS_C_DEC::const_iterator\n-    PB_DS_CLASS_C_DEC::\n-    begin() const\n-    {\n-      typedef node_pointer_pointer pointer_type;\n-      pointer_type p = const_cast<pointer_type>(m_a_p_children);\n-      return const_iterator(p + get_begin_pos(), p + arr_size);\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    typename PB_DS_CLASS_C_DEC::iterator\n-    PB_DS_CLASS_C_DEC::\n-    begin()\n-    {\n-      return iterator(m_a_p_children + get_begin_pos(), \n-\t\t      m_a_p_children + arr_size);\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    typename PB_DS_CLASS_C_DEC::const_iterator\n-    PB_DS_CLASS_C_DEC::\n-    end() const\n-    {\n-      typedef node_pointer_pointer pointer_type;\n-      pointer_type p = const_cast<pointer_type>(m_a_p_children) + arr_size;\n-      return const_iterator(p, p);\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    typename PB_DS_CLASS_C_DEC::iterator\n-    PB_DS_CLASS_C_DEC::\n-    end()\n-    { return iterator(m_a_p_children + arr_size, m_a_p_children + arr_size); }\n-\n-    PB_DS_CLASS_T_DEC\n-    inline typename PB_DS_CLASS_C_DEC::node_pointer\n-    PB_DS_CLASS_C_DEC::\n-    get_child_node(const_e_iterator b_it, const_e_iterator e_it, \n-\t\t   const_e_access_traits_pointer p_traits)\n-    {\n-      const size_type i = get_pref_pos(b_it, e_it, p_traits);\n-      _GLIBCXX_DEBUG_ASSERT(i < arr_size);\n-      return m_a_p_children[i];\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    inline typename PB_DS_CLASS_C_DEC::iterator\n-    PB_DS_CLASS_C_DEC::\n-    get_child_it(const_e_iterator b_it, const_e_iterator e_it, \n-\t\t const_e_access_traits_pointer p_traits)\n-    {\n-      const size_type i = get_pref_pos(b_it, e_it, p_traits);\n-      _GLIBCXX_DEBUG_ASSERT(i < arr_size);\n-      _GLIBCXX_DEBUG_ASSERT(m_a_p_children[i] != 0);\n-      return iterator(m_a_p_children + i, m_a_p_children + i);\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    inline typename PB_DS_CLASS_C_DEC::const_node_pointer\n-    PB_DS_CLASS_C_DEC::\n-    get_child_node(const_e_iterator b_it, const_e_iterator e_it, \n-\t\t   const_e_access_traits_pointer p_traits) const\n-    { return const_cast<node_pointer>(get_child_node(b_it, e_it, p_traits)); }\n-\n-    PB_DS_CLASS_T_DEC\n-    typename PB_DS_CLASS_C_DEC::node_pointer\n-    PB_DS_CLASS_C_DEC::\n-    get_lower_bound_child_node(const_e_iterator b_it, const_e_iterator e_it, \n-\t\t\t       size_type checked_ind, \n-\t\t\t       const_e_access_traits_pointer p_traits)\n-    {\n-      if (!should_be_mine(b_it, e_it, checked_ind, p_traits))\n-\t{\n-\t  if (p_traits->cmp_prefixes(b_it, e_it, m_pref_b_it, m_pref_e_it, true))\n-\t    return leftmost_descendant();\n-\t  return rightmost_descendant();\n-\t}\n-\n-      size_type i = get_pref_pos(b_it, e_it, p_traits);\n-      _GLIBCXX_DEBUG_ASSERT(i < arr_size);\n-\n-      if (m_a_p_children[i] != 0)\n-\treturn m_a_p_children[i];\n-\n-      while (++i < arr_size)\n-\tif (m_a_p_children[i] != 0)\n-\t  {\n-\t    if (m_a_p_children[i]->m_type == pat_trie_leaf_node_type)\n-\t      return m_a_p_children[i];\n-\n-\t    _GLIBCXX_DEBUG_ASSERT(m_a_p_children[i]->m_type == pat_trie_internal_node_type);\n-\n-\t    return static_cast<internal_node_pointer>(m_a_p_children[i])->leftmost_descendant();\n-\t  }\n-\n-      return rightmost_descendant();\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    inline typename PB_DS_CLASS_C_DEC::node_pointer\n-    PB_DS_CLASS_C_DEC::\n-    add_child(node_pointer p_nd, const_e_iterator b_it, const_e_iterator e_it, \n-\t      const_e_access_traits_pointer p_traits)\n-    {\n-      const size_type i = get_pref_pos(b_it, e_it, p_traits);\n-      _GLIBCXX_DEBUG_ASSERT(i < arr_size);\n-      if (m_a_p_children[i] == 0)\n-\t{\n-\t  m_a_p_children[i] = p_nd;\n-\t  p_nd->m_p_parent = this;\n-\t  return p_nd;\n-\t}\n-      return m_a_p_children[i];\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    typename PB_DS_CLASS_C_DEC::const_node_pointer\n-    PB_DS_CLASS_C_DEC::\n-    get_join_child(const_node_pointer p_nd, const_e_access_traits_pointer p_traits) const\n-    {\n-      node_pointer p = const_cast<node_pointer>(p_nd);\n-      return const_cast<internal_node_pointer>(this)->get_join_child(p, p_traits);\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    typename PB_DS_CLASS_C_DEC::node_pointer\n-    PB_DS_CLASS_C_DEC::\n-    get_join_child(node_pointer p_nd, const_e_access_traits_pointer p_traits)\n-    {\n-      size_type i;\n-      const_e_iterator b_it;\n-      const_e_iterator e_it;\n-      if (p_nd->m_type == pat_trie_leaf_node_type)\n-\t{\n-\t  typename Type_Traits::const_key_reference r_key =\n-\t    e_access_traits::extract_key(static_cast<const_leaf_pointer>(p_nd)->value());\n-\n-\t  b_it = p_traits->begin(r_key);\n-\t  e_it = p_traits->end(r_key);\n-\t}\n-      else\n-\t{\n-\t  b_it = static_cast<internal_node_pointer>(p_nd)->pref_b_it();\n-\t  e_it = static_cast<internal_node_pointer>(p_nd)->pref_e_it();\n-\t}\n-      i = get_pref_pos(b_it, e_it, p_traits);\n-      _GLIBCXX_DEBUG_ASSERT(i < arr_size);\n-      return m_a_p_children[i];\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    void\n-    PB_DS_CLASS_C_DEC::\n-    remove_child(node_pointer p_nd)\n-    {\n-      size_type i = 0;\n-      for (; i < arr_size; ++i)\n-\tif (m_a_p_children[i] == p_nd)\n-\t  {\n-\t    m_a_p_children[i] = 0;\n-\t    return;\n-\t  }\n-      _GLIBCXX_DEBUG_ASSERT(i != arr_size);\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    typename PB_DS_CLASS_C_DEC::iterator\n-    PB_DS_CLASS_C_DEC::\n-    remove_child(iterator it)\n-    {\n-      iterator ret = it;\n-      ++ret;\n-      * it.m_p_p_cur = 0;\n-      return ret;\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    void\n-    PB_DS_CLASS_C_DEC::\n-    replace_child(node_pointer p_nd, const_e_iterator b_it, \n-\t\t  const_e_iterator e_it, \n-\t\t  const_e_access_traits_pointer p_traits)\n-    {\n-      const size_type i = get_pref_pos(b_it, e_it, p_traits);\n-      _GLIBCXX_DEBUG_ASSERT(i < arr_size);\n-      m_a_p_children[i] = p_nd;\n-      p_nd->m_p_parent = this;\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    inline typename PB_DS_CLASS_C_DEC::const_e_iterator\n-    PB_DS_CLASS_C_DEC::\n-    pref_b_it() const\n-    { return m_pref_b_it; }\n-\n-    PB_DS_CLASS_T_DEC\n-    inline typename PB_DS_CLASS_C_DEC::const_e_iterator\n-    PB_DS_CLASS_C_DEC::\n-    pref_e_it() const\n-    { return m_pref_e_it; }\n-\n-    PB_DS_CLASS_T_DEC\n-    inline typename PB_DS_CLASS_C_DEC::size_type\n-    PB_DS_CLASS_C_DEC::\n-    get_e_ind() const\n-    { return m_e_ind; }\n-\n-    PB_DS_CLASS_T_DEC\n-    bool\n-    PB_DS_CLASS_C_DEC::\n-    should_be_mine(const_e_iterator b_it, const_e_iterator e_it, \n-\t\t   size_type checked_ind, \n-\t\t   const_e_access_traits_pointer p_traits) const\n-    {\n-      if (m_e_ind == 0)\n-\treturn true;\n-\n-      const size_type num_es = std::distance(b_it, e_it);\n-      if (num_es < m_e_ind)\n-\treturn false;\n-\n-      const_e_iterator key_b_it = b_it;\n-      std::advance(key_b_it, checked_ind);\n-      const_e_iterator key_e_it = b_it;\n-      std::advance(key_e_it, m_e_ind);\n-\n-      const_e_iterator value_b_it = m_pref_b_it;\n-      std::advance(value_b_it, checked_ind);\n-      const_e_iterator value_e_it = m_pref_b_it;\n-      std::advance(value_e_it, m_e_ind);\n-\n-      return p_traits->equal_prefixes(key_b_it, key_e_it, value_b_it, \n-\t\t\t\t      value_e_it);\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    typename PB_DS_CLASS_C_DEC::leaf_pointer\n-    PB_DS_CLASS_C_DEC::\n-    leftmost_descendant()\n-    {\n-      node_pointer p_pot =* begin();\n-      if (p_pot->m_type == pat_trie_leaf_node_type)\n-\treturn (static_cast<leaf_pointer>(p_pot));\n-      _GLIBCXX_DEBUG_ASSERT(p_pot->m_type == pat_trie_internal_node_type);\n-      return static_cast<internal_node_pointer>(p_pot)->leftmost_descendant();\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    typename PB_DS_CLASS_C_DEC::const_leaf_pointer\n-    PB_DS_CLASS_C_DEC::\n-    leftmost_descendant() const\n-    {\n-      return const_cast<internal_node_pointer>(this)->leftmost_descendant();\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    typename PB_DS_CLASS_C_DEC::leaf_pointer\n-    PB_DS_CLASS_C_DEC::\n-    rightmost_descendant()\n-    {\n-      const size_type num_children = std::distance(begin(), end());\n-      _GLIBCXX_DEBUG_ASSERT(num_children >= 2);\n-\n-      iterator it = begin();\n-      std::advance(it, num_children - 1);\n-      node_pointer p_pot =* it;\n-      if (p_pot->m_type == pat_trie_leaf_node_type)\n-\treturn static_cast<leaf_pointer>(p_pot);\n-      _GLIBCXX_DEBUG_ASSERT(p_pot->m_type == pat_trie_internal_node_type);\n-      return static_cast<internal_node_pointer>(p_pot)->rightmost_descendant();\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    typename PB_DS_CLASS_C_DEC::const_leaf_pointer\n-    PB_DS_CLASS_C_DEC::\n-    rightmost_descendant() const\n-    {\n-      return const_cast<internal_node_pointer>(this)->rightmost_descendant();\n-    }\n-\n-#ifdef _GLIBCXX_DEBUG\n-    PB_DS_CLASS_T_DEC\n-    typename PB_DS_CLASS_C_DEC::size_type\n-    PB_DS_CLASS_C_DEC::\n-    e_ind() const\n-    { return m_e_ind; }\n-#endif \n-\n-    PB_DS_CLASS_T_DEC\n-    typename PB_DS_CLASS_C_DEC::size_type\n-    PB_DS_CLASS_C_DEC::\n-    get_begin_pos() const\n-    {\n-      size_type i;\n-      for (i = 0; i < arr_size && m_a_p_children[i] == 0; ++i)\n-\t;\n-      return i;\n-    }\n-\n-#ifdef _GLIBCXX_DEBUG\n-    PB_DS_CLASS_T_DEC\n-    typename PB_DS_CLASS_C_DEC::subtree_debug_info\n-    PB_DS_CLASS_C_DEC::\n-    assert_valid_imp(const_e_access_traits_pointer p_traits,\n-\t\t     const char* __file, int __line) const\n-    {\n-      PB_DS_DEBUG_VERIFY(base_type::m_type == pat_trie_internal_node_type);\n-      PB_DS_DEBUG_VERIFY(static_cast<size_type>(std::distance(pref_b_it(), pref_e_it())) == m_e_ind);\n-      PB_DS_DEBUG_VERIFY(std::distance(begin(), end()) >= 2);\n-\n-      for (typename pat_trie_internal_node::const_iterator it = begin();\n-\t   it != end(); ++it)\n-\t{\n-\t  const_node_pointer p_nd =* it;\n-\t  PB_DS_DEBUG_VERIFY(p_nd->m_p_parent == this);\n-\t  subtree_debug_info child_ret =\n-\t    p_nd->assert_valid_imp(p_traits, __file, __line);\n-\n-\t  PB_DS_DEBUG_VERIFY(static_cast<size_type>(std::distance(child_ret.first, child_ret.second)) >= m_e_ind);\n-\t  PB_DS_DEBUG_VERIFY(should_be_mine(child_ret.first, child_ret.second, 0, p_traits));\n-\t  PB_DS_DEBUG_VERIFY(get_pref_pos(child_ret.first, child_ret.second, p_traits) == static_cast<size_type>(it.m_p_p_cur - m_a_p_children));\n-\t}\n-      return std::make_pair(pref_b_it(), pref_e_it());\n-    }\n-#endif \n-\n-#undef PB_DS_CLASS_T_DEC\n-#undef PB_DS_CLASS_C_DEC\n-#undef PB_DS_BASE_C_DEC\n-#undef PB_DS_LEAF_C_DEC\n-\n-  } // namespace detail\n-} // namespace __gnu_pbds\n-\n-#endif"}, {"sha": "d53f1b274b36b3c88ea655d72b6c7f9de8ebd102", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/iterators_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fiterators_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fiterators_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fiterators_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -34,8 +34,8 @@\n // warranty.\n \n /**\n- * @file iterators_fn_imps.hpp\n- * Contains an implementation class for bin_search_tree_.\n+ * @file pat_trie_/iterators_fn_imps.hpp\n+ * Contains an implementation class for pat_trie.\n  */\n \n PB_DS_CLASS_T_DEC\n@@ -95,10 +95,10 @@ rend() const\n { return const_reverse_iterator(m_p_head); }\n \n PB_DS_CLASS_T_DEC\n-inline typename PB_DS_CLASS_C_DEC::const_node_iterator\n+inline typename PB_DS_CLASS_C_DEC::node_const_iterator\n PB_DS_CLASS_C_DEC::\n node_begin() const\n-{ return const_node_iterator(m_p_head->m_p_parent, this); }\n+{ return node_const_iterator(m_p_head->m_p_parent, this); }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::node_iterator\n@@ -107,10 +107,10 @@ node_begin()\n { return node_iterator(m_p_head->m_p_parent, this); }\n \n PB_DS_CLASS_T_DEC\n-inline typename PB_DS_CLASS_C_DEC::const_node_iterator\n+inline typename PB_DS_CLASS_C_DEC::node_const_iterator\n PB_DS_CLASS_C_DEC::\n node_end() const\n-{ return const_node_iterator(0, this); }\n+{ return node_const_iterator(0, this); }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::node_iterator"}, {"sha": "de8057a02197da50d8e0cc5ae70432810a2aa716", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/leaf.hpp", "status": "removed", "additions": 0, "deletions": 169, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fleaf.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fleaf.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fleaf.hpp?ref=ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c", "patch": "@@ -1,169 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 3, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file leaf.hpp\n- * Contains a pat_trie_leaf for a patricia tree.\n- */\n-\n-#ifndef PB_DS_PAT_TRIE_LEAF_HPP\n-#define PB_DS_PAT_TRIE_LEAF_HPP\n-\n-#include <debug/debug.h>\n-\n-namespace __gnu_pbds\n-{\n-  namespace detail\n-  {\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n-    template<class Type_Traits,\t\t\t\t\t\t\\\n-\t     class E_Access_Traits,\t\t\t\t\t\\\n-\t     class Metadata,\t\t\t\t\t\t\\\n-\t     class Allocator>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\t\\\n-    pat_trie_leaf<Type_Traits,\t\t\t\t\t\t\\\n-\t\t  E_Access_Traits,\t\t\t\t\t\\\n-\t\t  Metadata,\t\t\t\t\t\t\\\n-\t\t  Allocator>\n-\n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n-    pat_trie_node_base<Type_Traits,\t\t\t\t\t\\\n-\t\t       E_Access_Traits,\t\t\t\t\t\\\n-\t\t       Metadata,\t\t\t\t\t\\\n-\t\t       Allocator>\n-\n-#define PB_DS_PAT_TRIE_SUBTREE_DEBUG_INFO_C_DEC\t\t\t\t\\\n-    pat_trie_subtree_debug_info<Type_Traits,\t\t\t\t\\\n-\t\t\t\tE_Access_Traits,\t\t\t\\\n-\t\t\t\tAllocator>\n-\n-    template<typename Type_Traits,\n-\t     class E_Access_Traits,\n-\t     class Metadata,\n-\t     class Allocator>\n-    struct pat_trie_leaf : public PB_DS_BASE_C_DEC\n-    {\n-    private:\n-      typedef typename Type_Traits::value_type value_type;\n-\n-      typedef typename Type_Traits::const_reference const_reference;\n-\n-      typedef typename Type_Traits::reference reference;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tE_Access_Traits>::other::const_pointer\n-      const_e_access_traits_pointer;\n-\n-#ifdef _GLIBCXX_DEBUG\n-      typedef\n-      typename PB_DS_BASE_C_DEC::subtree_debug_info\n-      subtree_debug_info;\n-#endif \n-\n-      typedef PB_DS_BASE_C_DEC base_type;\n-\n-    public:\n-      pat_trie_leaf(const_reference r_val);\n-\n-      inline reference\n-      value();\n-\n-      inline const_reference\n-      value() const;\n-\n-#ifdef _GLIBCXX_DEBUG\n-      virtual subtree_debug_info\n-      assert_valid_imp(const_e_access_traits_pointer p_traits,\n-\t\t       const char* file, int line) const;\n-\n-      virtual\n-      ~pat_trie_leaf();\n-#endif \n-\n-    private:\n-      pat_trie_leaf(const PB_DS_CLASS_C_DEC& other);\n-\n-      value_type m_value;\n-    };\n-\n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    pat_trie_leaf(const_reference r_val) :\n-    PB_DS_BASE_C_DEC(pat_trie_leaf_node_type), m_value(r_val)\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n-    inline typename PB_DS_CLASS_C_DEC::reference\n-    PB_DS_CLASS_C_DEC::\n-    value()\n-    { return m_value; }\n-\n-    PB_DS_CLASS_T_DEC\n-    inline typename PB_DS_CLASS_C_DEC::const_reference\n-    PB_DS_CLASS_C_DEC::\n-    value() const\n-    { return m_value; }\n-\n-#ifdef _GLIBCXX_DEBUG\n-    PB_DS_CLASS_T_DEC\n-    typename PB_DS_CLASS_C_DEC::subtree_debug_info\n-    PB_DS_CLASS_C_DEC::\n-    assert_valid_imp(const_e_access_traits_pointer p_traits,\n-\t\t     const char* __file, int __line) const\n-    {\n-      PB_DS_DEBUG_VERIFY(base_type::m_type == pat_trie_leaf_node_type);\n-      subtree_debug_info ret;\n-      const_reference r_val = value();\n-      return std::make_pair(p_traits->begin(p_traits->extract_key(r_val)),\n-\t\t\t     p_traits->end(p_traits->extract_key(r_val)));\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    ~pat_trie_leaf() { }\n-#endif \n-\n-#undef PB_DS_CLASS_T_DEC\n-#undef PB_DS_CLASS_C_DEC\n-#undef PB_DS_BASE_C_DEC\n-#undef PB_DS_PAT_TRIE_SUBTREE_DEBUG_INFO_C_DEC\n-\n-  } // namespace detail\n-} // namespace __gnu_pbds\n-\n-#endif "}, {"sha": "6e131e4074cc26f51e7d97af256ad2d4ef924d31", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/node_base.hpp", "status": "removed", "additions": 0, "deletions": 131, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fnode_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fnode_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fnode_base.hpp?ref=ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c", "patch": "@@ -1,131 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 3, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file node_base.hpp\n- * Contains a pat_trie_node_base base for a patricia tree.\n- */\n-\n-#ifndef PB_DS_PAT_TRIE_NODE_BASE_HPP\n-#define PB_DS_PAT_TRIE_NODE_BASE_HPP\n-\n-#include <ext/pb_ds/detail/pat_trie_/node_metadata_base.hpp>\n-\n-namespace __gnu_pbds\n-{\n-  namespace detail\n-  {\n-#define PB_DS_CLASS_T_DEC \\\n-    template<typename Type_Traits, typename E_Access_Traits,\t\\\n-\t     typename Metadata,\ttypename Allocator>\n-\n-#define PB_DS_CLASS_C_DEC \\\n-    pat_trie_node_base<Type_Traits, E_Access_Traits, Metadata, Allocator>\n-\n-#define PB_DS_PAT_TRIE_SUBTREE_DEBUG_INFO_C_DEC\t\\\n-    pat_trie_subtree_debug_info<Type_Traits, E_Access_Traits, Allocator>\n-\n-    enum pat_trie_node_type\n-      {\n-\tpat_trie_internal_node_type,\n-\tpat_trie_leaf_node_type,\n-\tpat_trie_head_node_type\n-      };\n-\n-    template<typename Type_Traits,\n-\t     typename E_Access_Traits,\n-\t     typename Metadata,\n-\t     typename Allocator>\n-    struct pat_trie_node_base : public pat_trie_node_metadata_base<\n-      Metadata,\n-      Allocator>\n-    {\n-    public:\n-      typedef\n-      typename Allocator::template rebind<\n-      pat_trie_node_base>::other::pointer\n-      node_pointer;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tE_Access_Traits>::other::const_pointer\n-      const_e_access_traits_pointer;\n-\n-#ifdef _GLIBCXX_DEBUG\n-      typedef\n-      std::pair<\n-\ttypename E_Access_Traits::const_iterator,\n-\ttypename E_Access_Traits::const_iterator>\n-      subtree_debug_info;\n-#endif \n-\n-      pat_trie_node_base(pat_trie_node_type type);\n-\n-#ifdef _GLIBCXX_DEBUG\n-      void\n-      assert_valid(const_e_access_traits_pointer p_traits,\n-\t\t   const char* file, int line) const;\n-\n-      virtual subtree_debug_info\n-      assert_valid_imp(const_e_access_traits_pointer p_traits,\n-\t\t       const char* file, int line) const = 0;\n-#endif \n-\n-      node_pointer m_p_parent;\n-      const pat_trie_node_type m_type;\n-    };\n-\n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    pat_trie_node_base(pat_trie_node_type type) : m_type(type)\n-    { }\n-\n-#ifdef _GLIBCXX_DEBUG\n-    PB_DS_CLASS_T_DEC\n-    void\n-    PB_DS_CLASS_C_DEC::\n-    assert_valid(const_e_access_traits_pointer p_traits,\n-\t\t const char* __file, int __line) const\n-    { assert_valid_imp(p_traits, __file, __line); }\n-#endif \n-\n-#undef PB_DS_CLASS_T_DEC\n-#undef PB_DS_CLASS_C_DEC\n-#undef PB_DS_PAT_TRIE_SUBTREE_DEBUG_INFO_C_DEC\n-\n-  } // namespace detail\n-} // namespace __gnu_pbds\n-\n-#endif "}, {"sha": "c57462868bdd16365d6be3741890ff20ab35e3ad", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/node_iterators.hpp", "status": "removed", "additions": 0, "deletions": 338, "changes": 338, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fnode_iterators.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fnode_iterators.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fnode_iterators.hpp?ref=ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c", "patch": "@@ -1,338 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 3, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file node_iterators.hpp\n- * Contains an implementation class for pat_trie_.\n- */\n-\n-#ifndef PB_DS_PAT_TRIE_NODE_ITERATORS_HPP\n-#define PB_DS_PAT_TRIE_NODE_ITERATORS_HPP\n-\n-#include <debug/debug.h>\n-\n-namespace __gnu_pbds\n-{\n-  namespace detail\n-  {\n-\n-#define PB_DS_PAT_TRIE_CONST_NODE_ITERATOR_C_DEC\t\t\t\\\n-    pat_trie_const_node_it_<\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\tNode,\t\t\\\n-\t\t\t\t\t\t\tLeaf,\t\t\\\n-\t\t\t\t\t\t\tHead,\t\t\\\n-\t\t\t\t\t\t\tInternal_Node,\t\\\n-\t\t\t\t\t\t\tConst_Iterator,\t\\\n-\t\t\t\t\t\t\tIterator,\t\\\n-\t\t\t\t\t\t\tE_Access_Traits, \\\n-\t\t\t\t\t\t\tAllocator>\n-\n-#define PB_DS_PAT_TRIE_NODE_ITERATOR_C_DEC\t\t\t\\\n-    pat_trie_node_it_<\t\t\t\t\t\t\\\n-\t\t\t\t\tNode,\t\t\t\\\n-\t\t\t\t\tLeaf,\t\t\t\\\n-\t\t\t\t\tHead,\t\t\t\\\n-\t\t\t\t\tInternal_Node,\t\t\\\n-\t\t\t\t\tConst_Iterator,\t\t\\\n-\t\t\t\t\tIterator,\t\t\\\n-\t\t\t\t\tE_Access_Traits,\t\\\n-\t\t\t\t\tAllocator>\n-\n-    // Const node iterator.\n-    template<typename Node,\n-\t     class Leaf,\n-\t     class Head,\n-\t     class Internal_Node,\n-\t     class Const_Iterator,\n-\t     class Iterator,\n-\t     class E_Access_Traits,\n-\t     class Allocator>\n-    class pat_trie_const_node_it_\n-    {\n-    protected:\n-      typedef\n-      typename Allocator::template rebind<\n-      Node>::other::pointer\n-      node_pointer;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tLeaf>::other::const_pointer\n-      const_leaf_pointer;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tLeaf>::other::pointer\n-      leaf_pointer;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tInternal_Node>::other::pointer\n-      internal_node_pointer;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tInternal_Node>::other::const_pointer\n-      const_internal_node_pointer;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tE_Access_Traits>::other::const_pointer\n-      const_e_access_traits_pointer;\n-\n-    private:\n-      inline typename E_Access_Traits::const_iterator\n-      pref_begin() const\n-      {\n-\tif (m_p_nd->m_type == pat_trie_leaf_node_type)\n-\t  return (m_p_traits->begin(\n-\t\t\t\t    m_p_traits->extract_key(\n-\t\t\t\t\t\t\t    static_cast<const_leaf_pointer>(m_p_nd)->value())));\n-\n-\t_GLIBCXX_DEBUG_ASSERT(m_p_nd->m_type == pat_trie_internal_node_type);\n-\n-\treturn (static_cast<const_internal_node_pointer>(m_p_nd)->pref_b_it());\n-      }\n-\n-      inline typename E_Access_Traits::const_iterator\n-      pref_end() const\n-      {\n-\tif (m_p_nd->m_type == pat_trie_leaf_node_type)\n-\t  return (m_p_traits->end(\n-\t\t\t\t  m_p_traits->extract_key(\n-\t\t\t\t\t\t\t  static_cast<const_leaf_pointer>(m_p_nd)->value())));\n-\n-\t_GLIBCXX_DEBUG_ASSERT(m_p_nd->m_type == pat_trie_internal_node_type);\n-\n-\treturn (static_cast<const_internal_node_pointer>(m_p_nd)->pref_e_it());\n-      }\n-\n-    public:\n-\n-      // Size type.\n-      typedef typename Allocator::size_type size_type;\n-\n-      // Category.\n-      typedef trivial_iterator_tag iterator_category;\n-\n-      // Difference type.\n-      typedef trivial_iterator_difference_type difference_type;\n-\n-      // __Iterator's value type.\n-      typedef Const_Iterator value_type;\n-\n-      // __Iterator's reference type.\n-      typedef value_type reference;\n-\n-      // __Iterator's __const reference type.\n-      typedef value_type const_reference;\n-\n-      // Element access traits.\n-      typedef E_Access_Traits e_access_traits;\n-\n-      // A key's element __const iterator.\n-      typedef typename e_access_traits::const_iterator const_e_iterator;\n-\n-      // Metadata type.\n-      typedef typename Node::metadata_type metadata_type;\n-\n-      // Const metadata reference type.\n-      typedef\n-      typename Allocator::template rebind<\n-\tmetadata_type>::other::const_reference\n-      const_metadata_reference;\n-\n-      // Default constructor.\n-      /*\n-\tinline\n-\tpat_trie_const_node_it_()\n-      */\n-      inline\n-      pat_trie_const_node_it_(node_pointer p_nd = 0,  \n-\t\t\t      const_e_access_traits_pointer p_traits = 0) \n-      : m_p_nd(const_cast<node_pointer>(p_nd)), m_p_traits(p_traits)\n-      { }\n-\n-      // Subtree valid prefix.\n-      inline std::pair<const_e_iterator, const_e_iterator>\n-      valid_prefix() const\n-      { return std::make_pair(pref_begin(), pref_end()); }\n-\n-      // Const access; returns the __const iterator* associated with\n-      // the current leaf.\n-      inline const_reference\n-      operator*() const\n-      {\n-\t_GLIBCXX_DEBUG_ASSERT(num_children() == 0);\n-\treturn Const_Iterator(m_p_nd);\n-      }\n-\n-      // Metadata access.\n-      inline const_metadata_reference\n-      get_metadata() const\n-      { return m_p_nd->get_metadata(); }\n-\n-      // Returns the number of children in the corresponding node.\n-      inline size_type\n-      num_children() const\n-      {\n-\tif (m_p_nd->m_type == pat_trie_leaf_node_type)\n-\t  return 0;\n-\t_GLIBCXX_DEBUG_ASSERT(m_p_nd->m_type == pat_trie_internal_node_type);\n-\treturn std::distance(static_cast<internal_node_pointer>(m_p_nd)->begin(),  static_cast<internal_node_pointer>(m_p_nd)->end());\n-      }\n-\n-      // Returns a __const node __iterator to the corresponding node's\n-      // i-th child.\n-      PB_DS_PAT_TRIE_CONST_NODE_ITERATOR_C_DEC\n-      get_child(size_type i) const\n-      {\n-\t_GLIBCXX_DEBUG_ASSERT(m_p_nd->m_type == pat_trie_internal_node_type);\n-\ttypename Internal_Node::iterator it =\n-\t  static_cast<internal_node_pointer>(m_p_nd)->begin();\n-\n-\tstd::advance(it, i);\n-\treturn PB_DS_PAT_TRIE_CONST_NODE_ITERATOR_C_DEC(*it, m_p_traits);\n-      }\n-\n-      // Compares content to a different iterator object.\n-      inline bool\n-      operator==(const PB_DS_PAT_TRIE_CONST_NODE_ITERATOR_C_DEC& other) const\n-      { return (m_p_nd == other.m_p_nd); }\n-\n-      // Compares content (negatively) to a different iterator object.\n-      inline bool\n-      operator!=(const PB_DS_PAT_TRIE_CONST_NODE_ITERATOR_C_DEC& other) const\n-      { return m_p_nd != other.m_p_nd; }\n-\n-    private:\n-\n-      friend class PB_DS_CLASS_C_DEC;\n-\n-    public:\n-      node_pointer m_p_nd;\n-\n-      const_e_access_traits_pointer m_p_traits;\n-    };\n-\n-    // Node iterator.\n-    template<typename Node,\n-\t     class Leaf,\n-\t     class Head,\n-\t     class Internal_Node,\n-\t     class Const_Iterator,\n-\t     class Iterator,\n-\t     class E_Access_Traits,\n-\t     class Allocator>\n-    class pat_trie_node_it_ : \n-      public PB_DS_PAT_TRIE_CONST_NODE_ITERATOR_C_DEC\n-\n-    {\n-    private:\n-      typedef\n-      typename Allocator::template rebind<\n-      Node>::other::pointer\n-      node_pointer;\n-\n-      typedef Iterator iterator;\n-\n-      typedef PB_DS_PAT_TRIE_CONST_NODE_ITERATOR_C_DEC base_type;\n-\n-      typedef\n-      typename base_type::const_e_access_traits_pointer\n-      const_e_access_traits_pointer;\n-\n-      typedef typename base_type::internal_node_pointer internal_node_pointer;\n-\n-    public:\n-\n-      // Size type.\n-      typedef\n-      typename PB_DS_PAT_TRIE_CONST_NODE_ITERATOR_C_DEC::size_type\n-      size_type;\n-\n-      // __Iterator's value type.\n-      typedef Iterator value_type;\n-\n-      // __Iterator's reference type.\n-      typedef value_type reference;\n-\n-      // __Iterator's __const reference type.\n-      typedef value_type const_reference;\n-\n-      // Default constructor.\n-      /*\n-\tinline\n-\tpat_trie_node_it_() ;\n-      */\n-\n-      inline\n-      pat_trie_node_it_(node_pointer p_nd = 0,  const_e_access_traits_pointer p_traits = 0) : base_type(p_nd, p_traits)\n-      { }\n-\n-      // Access; returns the iterator*  associated with the current leaf.\n-      inline reference\n-      operator*() const\n-      {\n-\t_GLIBCXX_DEBUG_ASSERT(base_type::num_children() == 0);\n-\treturn Iterator(base_type::m_p_nd);\n-\n-      }\n-\n-      // Returns a node __iterator to the corresponding node's i-th child.\n-      PB_DS_PAT_TRIE_NODE_ITERATOR_C_DEC\n-      get_child(size_type i) const\n-      {\n-\t_GLIBCXX_DEBUG_ASSERT(base_type::m_p_nd->m_type == pat_trie_internal_node_type);\n-\n-\ttypename Internal_Node::iterator it =\n-\t  static_cast<internal_node_pointer>(base_type::m_p_nd)->begin();\n-\n-\tstd::advance(it, i);\n-\treturn PB_DS_PAT_TRIE_NODE_ITERATOR_C_DEC(*it, base_type::m_p_traits);\n-      }\n-\n-    private:\n-      friend class PB_DS_CLASS_C_DEC;\n-    };\n-\n-#undef PB_DS_PAT_TRIE_CONST_NODE_ITERATOR_C_DEC\n-#undef PB_DS_PAT_TRIE_NODE_ITERATOR_C_DEC\n-\n-  } // namespace detail\n-} // namespace __gnu_pbds\n-\n-#endif \n-"}, {"sha": "46bb016e25ebf84acb09214394d1919e00a18525", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/pat_trie_.hpp", "status": "modified", "additions": 271, "deletions": 211, "changes": 482, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -35,172 +35,249 @@\n // warranty.\n \n /**\n- * @file pat_trie_.hpp\n+ * @file pat_trie_/pat_trie_.hpp\n  * Contains an implementation class for a patricia tree.\n  */\n \n-/**\n- * This implementation loosely borrows ideas from:\n- * 1) Fast Mergeable Integer Maps, Okasaki, Gill 1998\n- * 2) Ptset: Sets of integers implemented as Patricia trees,\n- *    Jean-Christophe Filliatr, 2000\n- **/\n-\n-#include <ext/pb_ds/detail/pat_trie_/synth_e_access_traits.hpp>\n-#include <ext/pb_ds/detail/pat_trie_/node_base.hpp>\n-#include <ext/pb_ds/exception.hpp>\n-#include <ext/pb_ds/tag_and_trait.hpp>\n-#include <ext/pb_ds/detail/eq_fn/eq_by_less.hpp>\n-#include <ext/pb_ds/detail/types_traits.hpp>\n-#include <ext/pb_ds/tree_policy.hpp>\n-#include <ext/pb_ds/detail/cond_dealtor.hpp>\n-#include <ext/pb_ds/detail/type_utils.hpp>\n #include <iterator>\n #include <utility>\n #include <algorithm>\n #include <functional>\n #include <assert.h>\n #include <list>\n+#include <ext/pb_ds/exception.hpp>\n+#include <ext/pb_ds/tag_and_trait.hpp>\n+#include <ext/pb_ds/tree_policy.hpp>\n+#include <ext/pb_ds/detail/cond_dealtor.hpp>\n+#include <ext/pb_ds/detail/type_utils.hpp>\n+#include <ext/pb_ds/detail/types_traits.hpp>\n+#include <ext/pb_ds/detail/eq_fn/eq_by_less.hpp>\n+#include <ext/pb_ds/detail/pat_trie_/synth_access_traits.hpp>\n+#include <ext/pb_ds/detail/pat_trie_/pat_trie_base.hpp>\n #ifdef _GLIBCXX_DEBUG\n #include <ext/pb_ds/detail/debug_map_base.hpp>\n-#endif \n+#endif\n #include <debug/debug.h>\n \n namespace __gnu_pbds\n {\n   namespace detail\n   {\n-#define PB_DS_CLASS_T_DEC \\\n-    template<typename Key, typename Mapped, typename Node_And_It_Traits, \\\n-\t     typename Allocator>\n-\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-#define PB_DS_CLASS_NAME pat_trie_data_\n-#endif \n+#define PB_DS_PAT_TRIE_NAME pat_trie_map\n+#endif\n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n-#define PB_DS_CLASS_NAME pat_trie_no_data_\n-#endif \n+#define PB_DS_PAT_TRIE_NAME pat_trie_set\n+#endif\n+\n+#define PB_DS_CLASS_T_DEC \\\n+    template<typename Key, typename Mapped, typename Node_And_It_Traits, \\\n+\t     typename _Alloc>\n \n #define PB_DS_CLASS_C_DEC \\\n-    PB_DS_CLASS_NAME<Key, Mapped, Node_And_It_Traits, Allocator>\n+    PB_DS_PAT_TRIE_NAME<Key, Mapped, Node_And_It_Traits, _Alloc>\n \n-#define PB_DS_TYPES_TRAITS_C_DEC \\\n-    types_traits<Key, Mapped, Allocator, false>\n+#define PB_DS_PAT_TRIE_TRAITS_BASE \\\n+    types_traits<Key, Mapped, _Alloc, false>\n \n #ifdef _GLIBCXX_DEBUG\n #define PB_DS_DEBUG_MAP_BASE_C_DEC \\\n-    debug_map_base<Key,\teq_by_less<Key, \\\n-\t\t\tstd::less<Key> >, typename Allocator::template rebind<Key>::other::const_reference>\n-#endif \n-\n-#ifdef PB_DS_DATA_TRUE_INDICATOR\n-#define PB_DS_V2F(X) (X).first\n-#define PB_DS_V2S(X) (X).second\n-#define PB_DS_EP2VP(X)& ((X)->m_value)\n-#endif \n+    debug_map_base<Key,\teq_by_less<Key, std::less<Key> >, \\\n+\t\t typename _Alloc::template rebind<Key>::other::const_reference>\n+#endif\n \n-#ifdef PB_DS_DATA_FALSE_INDICATOR\n-#define PB_DS_V2F(X) (X)\n-#define PB_DS_V2S(X) Mapped_Data()\n-#define PB_DS_EP2VP(X)& ((X)->m_value.first)\n-#endif \n \n     /**\n-     * class description = PATRICIA trie implementation.\">\n-     **/\n-    template<typename Key,\n-\t     typename Mapped,\n-\t     typename Node_And_It_Traits,\n-\t     typename Allocator>\n-    class PB_DS_CLASS_NAME :\n+     *  @brief PATRICIA trie.\n+     *\n+     * This implementation loosely borrows ideas from:\n+     * 1) Fast Mergeable Integer Maps, Okasaki, Gill 1998\n+     * 2) Ptset: Sets of integers implemented as Patricia trees,\n+     *    Jean-Christophe Filliatr, 2000\n+     */\n+    template<typename Key, typename Mapped, typename Node_And_It_Traits,\n+\t     typename _Alloc>\n+    class PB_DS_PAT_TRIE_NAME :\n #ifdef _GLIBCXX_DEBUG\n       public PB_DS_DEBUG_MAP_BASE_C_DEC,\n-#endif \n-      public Node_And_It_Traits::synth_e_access_traits,\n+#endif\n+      public Node_And_It_Traits::synth_access_traits,\n       public Node_And_It_Traits::node_update,\n-      public PB_DS_TYPES_TRAITS_C_DEC\n+      public PB_DS_PAT_TRIE_TRAITS_BASE,\n+      public pat_trie_base\n     {\n     private:\n-      typedef PB_DS_TYPES_TRAITS_C_DEC traits_base;\n+      typedef pat_trie_base\t\t\t\tbase_type;\n+      typedef PB_DS_PAT_TRIE_TRAITS_BASE \t       \ttraits_base;\n+      typedef Node_And_It_Traits\t\t\ttraits_type;\n+\n+      typedef typename traits_type::synth_access_traits synth_access_traits;\n+      typedef typename synth_access_traits::const_iterator a_const_iterator;\n+\n+      typedef typename traits_type::node \t\tnode;\n+      typedef typename _Alloc::template rebind<node>\t__rebind_n;\n+      typedef typename __rebind_n::other::const_pointer node_const_pointer;\n+      typedef typename __rebind_n::other::pointer \tnode_pointer;\n+\n+      typedef typename traits_type::head \t\thead;\n+      typedef typename _Alloc::template rebind<head>\t__rebind_h;\n+      typedef typename __rebind_h::other \t\thead_allocator;\n+      typedef typename head_allocator::pointer \t\thead_pointer;\n+\n+      typedef typename traits_type::leaf \t\tleaf;\n+      typedef typename _Alloc::template rebind<leaf>\t__rebind_l;\n+      typedef typename __rebind_l::other \t\tleaf_allocator;\n+      typedef typename leaf_allocator::pointer \t\tleaf_pointer;\n+      typedef typename leaf_allocator::const_pointer \tleaf_const_pointer;\n+\n+      typedef typename traits_type::inode \t\tinode;\n+      typedef typename inode::iterator \t\t\tinode_iterator;\n+      typedef typename _Alloc::template rebind<inode> \t__rebind_in;\n+      typedef typename __rebind_in::other \t\t__rebind_ina;\n+      typedef typename __rebind_in::other      \t       \tinode_allocator;\n+      typedef typename __rebind_ina::pointer \t\tinode_pointer;\n+      typedef typename __rebind_ina::const_pointer \tinode_const_pointer;\n+\n+\n+      /// Conditional deallocator.\n+      class cond_dealtor\n+      {\n+      protected:\n+\tleaf_pointer \t\tm_p_nd;\n+\tbool \t\t\tm_no_action_dtor;\n+\tbool \t\t\tm_call_destructor;\n+\n+      public:\n+\tcond_dealtor(leaf_pointer p_nd)\n+\t: m_p_nd(p_nd), m_no_action_dtor(false), m_call_destructor(false)\n+\t{ }\n \n-      typedef typename Node_And_It_Traits::synth_e_access_traits synth_e_access_traits;\n-      typedef typename Allocator::template rebind<synth_e_access_traits>::other::const_pointer const_e_access_traits_pointer;\n-      typedef typename synth_e_access_traits::const_iterator const_e_iterator;\n+\tvoid\n+\tset_no_action_dtor()\n+\t{ m_no_action_dtor = true; }\n \n-      typedef typename Node_And_It_Traits::node node;\n-      typedef typename Allocator::template rebind<node>::other::const_pointer const_node_pointer;\n+\tvoid\n+\tset_call_destructor()\n+\t{ m_call_destructor = true; }\n \n-      typedef typename Allocator::template rebind<node>::other::pointer node_pointer;\n+\t~cond_dealtor()\n+\t{\n+\t  if (m_no_action_dtor)\n+\t    return;\n \n-      typedef typename Node_And_It_Traits::head head;\n-      typedef typename Allocator::template rebind<head>::other head_allocator;\n-      typedef typename head_allocator::pointer head_pointer;\n+\t  if (m_call_destructor)\n+\t    m_p_nd->~leaf();\n \n-      typedef typename Node_And_It_Traits::leaf leaf;\n-      typedef typename Allocator::template rebind<leaf>::other leaf_allocator;\n-      typedef typename leaf_allocator::const_pointer const_leaf_pointer;\n-      typedef typename leaf_allocator::pointer leaf_pointer;\n+\t  s_leaf_allocator.deallocate(m_p_nd, 1);\n+\t}\n+      };\n \n-      typedef typename Node_And_It_Traits::internal_node internal_node;\n-      typedef typename Allocator::template rebind<internal_node>::other internal_node_allocator;\n-      typedef typename internal_node_allocator::const_pointer const_internal_node_pointer;\n-      typedef typename internal_node_allocator::pointer internal_node_pointer;\n \n-#include <ext/pb_ds/detail/pat_trie_/cond_dtor_entry_dealtor.hpp>\n+      /// Branch bag, for split-join.\n+      class branch_bag\n+      {\n+      private:\n+\ttypedef inode_pointer \t\t\t       \t__inp;\n+\ttypedef typename _Alloc::template rebind<__inp>::other \t__rebind_inp;\n \n #ifdef _GLIBCXX_DEBUG\n-      typedef PB_DS_DEBUG_MAP_BASE_C_DEC debug_base;\n-#endif \n+\ttypedef std::_GLIBCXX_STD_C::list<__inp, __rebind_inp> \tbag_type;\n+#else\n+\ttypedef std::list<__inp, __rebind_inp> \t\t\tbag_type;\n+#endif\n+\n+\tbag_type \t\t\t\t\t\tm_bag;\n+      public:\n+\tvoid\n+\tadd_branch()\n+\t{\n+\t  inode_pointer p_nd = s_inode_allocator.allocate(1);\n+\t  __try\n+\t    {\n+\t      m_bag.push_back(p_nd);\n+\t    }\n+\t  __catch(...)\n+\t    {\n+\t      s_inode_allocator.deallocate(p_nd, 1);\n+\t      __throw_exception_again;\n+\t    }\n+\t}\n+\n+\tinode_pointer\n+\tget_branch()\n+\t{\n+\t  _GLIBCXX_DEBUG_ASSERT(!m_bag.empty());\n+\t  inode_pointer p_nd = *m_bag.begin();\n+\t  m_bag.pop_front();\n+\t  return p_nd;\n+\t}\n+\n+\t~branch_bag()\n+\t{\n+\t  while (!m_bag.empty())\n+\t    {\n+\t      inode_pointer p_nd = *m_bag.begin();\n+\t      s_inode_allocator.deallocate(p_nd, 1);\n+\t      m_bag.pop_front();\n+\t    }\n+\t}\n+\n+\tinline bool\n+\tempty() const\n+\t{ return m_bag.empty(); }\n+      };\n \n-#include <ext/pb_ds/detail/pat_trie_/split_join_branch_bag.hpp>\n+#ifdef _GLIBCXX_DEBUG\n+      typedef PB_DS_DEBUG_MAP_BASE_C_DEC \t\tdebug_base;\n+#endif\n \n-      typedef typename Node_And_It_Traits::null_node_update_pointer null_node_update_pointer;\n+      typedef typename traits_type::null_node_update_pointer null_node_update_pointer;\n \n     public:\n-      typedef pat_trie_tag container_category;\n-      typedef Allocator allocator_type;\n-      typedef typename Allocator::size_type size_type;\n-      typedef typename Allocator::difference_type difference_type;\n-\n-      typedef typename traits_base::key_type key_type;\n-      typedef typename traits_base::key_pointer key_pointer;\n-      typedef typename traits_base::const_key_pointer const_key_pointer;\n-      typedef typename traits_base::key_reference key_reference;\n-      typedef typename traits_base::const_key_reference const_key_reference;\n-      typedef typename traits_base::mapped_type mapped_type;\n-      typedef typename traits_base::mapped_pointer mapped_pointer;\n-      typedef typename traits_base::const_mapped_pointer const_mapped_pointer;\n-      typedef typename traits_base::mapped_reference mapped_reference;\n-      typedef typename traits_base::const_mapped_reference const_mapped_reference;\n-      typedef typename traits_base::value_type value_type;\n-      typedef typename traits_base::pointer pointer;\n-      typedef typename traits_base::const_pointer const_pointer;\n-      typedef typename traits_base::reference reference;\n-      typedef typename traits_base::const_reference const_reference;\n-\n-      typedef typename Node_And_It_Traits::const_iterator const_point_iterator;\n-      typedef typename Node_And_It_Traits::iterator point_iterator;\n-      typedef const_point_iterator const_iterator;\n-      typedef point_iterator iterator;\n-\n-      typedef typename Node_And_It_Traits::const_reverse_iterator const_reverse_iterator;\n-      typedef typename Node_And_It_Traits::reverse_iterator reverse_iterator;\n-      typedef typename Node_And_It_Traits::const_node_iterator const_node_iterator;\n-      typedef typename Node_And_It_Traits::node_iterator node_iterator;\n-      typedef typename Node_And_It_Traits::e_access_traits e_access_traits;\n-      typedef typename Node_And_It_Traits::node_update node_update;\n-\n-      PB_DS_CLASS_NAME();\n-\n-      PB_DS_CLASS_NAME(const e_access_traits&);\n-\n-      PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC&);\n+      typedef pat_trie_tag \t\t\t\tcontainer_category;\n+      typedef _Alloc \t\t\t\t\tallocator_type;\n+      typedef typename _Alloc::size_type \t\tsize_type;\n+      typedef typename _Alloc::difference_type \t\tdifference_type;\n+\n+      typedef typename traits_base::key_type \t\tkey_type;\n+      typedef typename traits_base::key_pointer \tkey_pointer;\n+      typedef typename traits_base::key_const_pointer \tkey_const_pointer;\n+      typedef typename traits_base::key_reference \tkey_reference;\n+      typedef typename traits_base::key_const_reference key_const_reference;\n+      typedef typename traits_base::mapped_type \tmapped_type;\n+      typedef typename traits_base::mapped_pointer \tmapped_pointer;\n+      typedef typename traits_base::mapped_const_pointer mapped_const_pointer;\n+      typedef typename traits_base::mapped_reference \tmapped_reference;\n+      typedef typename traits_base::mapped_const_reference mapped_const_reference;\n+      typedef typename traits_base::value_type \t\tvalue_type;\n+      typedef typename traits_base::pointer \t\tpointer;\n+      typedef typename traits_base::const_pointer \tconst_pointer;\n+      typedef typename traits_base::reference \t\treference;\n+      typedef typename traits_base::const_reference \tconst_reference;\n+\n+      typedef typename traits_type::access_traits \taccess_traits;\n+      typedef typename traits_type::const_iterator \tpoint_const_iterator;\n+      typedef typename traits_type::iterator \t\tpoint_iterator;\n+      typedef point_const_iterator \t\t\tconst_iterator;\n+      typedef point_iterator \t\t\t\titerator;\n+\n+      typedef typename traits_type::reverse_iterator \treverse_iterator;\n+      typedef typename traits_type::const_reverse_iterator const_reverse_iterator;\n+      typedef typename traits_type::node_const_iterator node_const_iterator;\n+      typedef typename traits_type::node_iterator \tnode_iterator;\n+      typedef typename traits_type::node_update \tnode_update;\n+\n+      PB_DS_PAT_TRIE_NAME();\n+\n+      PB_DS_PAT_TRIE_NAME(const access_traits&);\n+\n+      PB_DS_PAT_TRIE_NAME(const PB_DS_CLASS_C_DEC&);\n \n       void\n       swap(PB_DS_CLASS_C_DEC&);\n \n-      ~PB_DS_CLASS_NAME();\n+      ~PB_DS_PAT_TRIE_NAME();\n \n       inline bool\n       empty() const;\n@@ -211,71 +288,71 @@ namespace __gnu_pbds\n       inline size_type\n       max_size() const;\n \n-      e_access_traits& \n-      get_e_access_traits();\n+      access_traits&\n+      get_access_traits();\n \n-      const e_access_traits& \n-      get_e_access_traits() const;\n+      const access_traits&\n+      get_access_traits() const;\n \n-      node_update& \n+      node_update&\n       get_node_update();\n \n-      const node_update& \n+      const node_update&\n       get_node_update() const;\n \n       inline std::pair<point_iterator, bool>\n       insert(const_reference);\n \n       inline mapped_reference\n-      operator[](const_key_reference r_key)\n+      operator[](key_const_reference r_key)\n       {\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n \treturn insert(std::make_pair(r_key, mapped_type())).first->second;\n-#else \n+#else\n \tinsert(r_key);\n-\treturn traits_base::s_null_mapped;\n-#endif \n+\treturn traits_base::s_null_type;\n+#endif\n       }\n \n       inline point_iterator\n-      find(const_key_reference);\n+      find(key_const_reference);\n \n-      inline const_point_iterator\n-      find(const_key_reference) const;\n+      inline point_const_iterator\n+      find(key_const_reference) const;\n \n       inline point_iterator\n-      lower_bound(const_key_reference);\n+      lower_bound(key_const_reference);\n \n-      inline const_point_iterator\n-      lower_bound(const_key_reference) const;\n+      inline point_const_iterator\n+      lower_bound(key_const_reference) const;\n \n       inline point_iterator\n-      upper_bound(const_key_reference);\n+      upper_bound(key_const_reference);\n \n-      inline const_point_iterator\n-      upper_bound(const_key_reference) const;\n+      inline point_const_iterator\n+      upper_bound(key_const_reference) const;\n \n       void\n       clear();\n \n       inline bool\n-      erase(const_key_reference);\n+      erase(key_const_reference);\n \n       inline const_iterator\n       erase(const_iterator);\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       inline iterator\n       erase(iterator);\n-#endif \n+#endif\n \n       inline const_reverse_iterator\n       erase(const_reverse_iterator);\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       inline reverse_iterator\n       erase(reverse_iterator);\n-#endif \n+#endif\n \n       template<typename Pred>\n       inline size_type\n@@ -285,7 +362,7 @@ namespace __gnu_pbds\n       join(PB_DS_CLASS_C_DEC&);\n \n       void\n-      split(const_key_reference, PB_DS_CLASS_C_DEC&);\n+      split(key_const_reference, PB_DS_CLASS_C_DEC&);\n \n       inline iterator\n       begin();\n@@ -311,13 +388,13 @@ namespace __gnu_pbds\n       inline const_reverse_iterator\n       rend() const;\n \n-      inline const_node_iterator\n+      inline node_const_iterator\n       node_begin() const;\n \n       inline node_iterator\n       node_begin();\n \n-      inline const_node_iterator\n+      inline node_const_iterator\n       node_end() const;\n \n       inline node_iterator\n@@ -326,10 +403,9 @@ namespace __gnu_pbds\n #ifdef PB_DS_PAT_TRIE_TRACE_\n       void\n       trace() const;\n-#endif \n+#endif\n \n     protected:\n-\n       template<typename It>\n       void\n       copy_from_range(It, It);\n@@ -338,10 +414,9 @@ namespace __gnu_pbds\n       value_swap(PB_DS_CLASS_C_DEC&);\n \n       node_pointer\n-      recursive_copy_node(const_node_pointer);\n+      recursive_copy_node(node_const_pointer);\n \n     private:\n-\n       void\n       initialize();\n \n@@ -353,54 +428,46 @@ namespace __gnu_pbds\n       apply_update(node_pointer, Node_Update_*);\n \n       bool\n-      join_prep(PB_DS_CLASS_C_DEC&, split_join_branch_bag&);\n+      join_prep(PB_DS_CLASS_C_DEC&, branch_bag&);\n \n       void\n-      rec_join_prep(const_node_pointer, const_node_pointer, \n-\t\t    split_join_branch_bag&);\n+      rec_join_prep(node_const_pointer, node_const_pointer, branch_bag&);\n \n       void\n-      rec_join_prep(const_leaf_pointer, const_leaf_pointer, \n-\t\t    split_join_branch_bag&);\n+      rec_join_prep(leaf_const_pointer, leaf_const_pointer, branch_bag&);\n \n       void\n-      rec_join_prep(const_leaf_pointer, const_internal_node_pointer, \n-\t\t    split_join_branch_bag&);\n+      rec_join_prep(leaf_const_pointer, inode_const_pointer, branch_bag&);\n \n       void\n-      rec_join_prep(const_internal_node_pointer, const_leaf_pointer, \n-\t\t    split_join_branch_bag&);\n+      rec_join_prep(inode_const_pointer, leaf_const_pointer, branch_bag&);\n \n       void\n-      rec_join_prep(const_internal_node_pointer, const_internal_node_pointer, \n-\t\t    split_join_branch_bag&);\n+      rec_join_prep(inode_const_pointer, inode_const_pointer, branch_bag&);\n \n       node_pointer\n-      rec_join(node_pointer, node_pointer, size_type, split_join_branch_bag&);\n+      rec_join(node_pointer, node_pointer, size_type, branch_bag&);\n \n       node_pointer\n-      rec_join(leaf_pointer, leaf_pointer, split_join_branch_bag&);\n+      rec_join(leaf_pointer, leaf_pointer, branch_bag&);\n \n       node_pointer\n-      rec_join(leaf_pointer, internal_node_pointer, size_type, \n-\t       split_join_branch_bag&);\n+      rec_join(leaf_pointer, inode_pointer, size_type, branch_bag&);\n \n       node_pointer\n-      rec_join(internal_node_pointer, leaf_pointer, size_type, \n-\t       split_join_branch_bag&);\n+      rec_join(inode_pointer, leaf_pointer, size_type, branch_bag&);\n \n       node_pointer\n-      rec_join(internal_node_pointer, internal_node_pointer, \n-\t       split_join_branch_bag&);\n+      rec_join(inode_pointer, inode_pointer, branch_bag&);\n \n       size_type\n-      keys_diff_ind(typename e_access_traits::const_iterator,\n-\t\t    typename e_access_traits::const_iterator,\n-\t\t    typename e_access_traits::const_iterator,\n-\t\t    typename e_access_traits::const_iterator);\n+      keys_diff_ind(typename access_traits::const_iterator,\n+\t\t    typename access_traits::const_iterator,\n+\t\t    typename access_traits::const_iterator,\n+\t\t    typename access_traits::const_iterator);\n \n-      internal_node_pointer\n-      insert_branch(node_pointer, node_pointer, split_join_branch_bag&);\n+      inode_pointer\n+      insert_branch(node_pointer, node_pointer, branch_bag&);\n \n       void\n       update_min_max_for_inserted_leaf(leaf_pointer);\n@@ -415,90 +482,87 @@ namespace __gnu_pbds\n       clear_imp(node_pointer);\n \n       void\n-      erase_fixup(internal_node_pointer);\n+      erase_fixup(inode_pointer);\n \n       void\n       update_min_max_for_erased_leaf(leaf_pointer);\n \n-      static inline const_e_iterator\n-      pref_begin(const_node_pointer);\n+      static inline a_const_iterator\n+      pref_begin(node_const_pointer);\n \n-      static inline const_e_iterator\n-      pref_end(const_node_pointer);\n+      static inline a_const_iterator\n+      pref_end(node_const_pointer);\n \n       inline node_pointer\n-      find_imp(const_key_reference);\n+      find_imp(key_const_reference);\n \n       inline node_pointer\n-      lower_bound_imp(const_key_reference);\n+      lower_bound_imp(key_const_reference);\n \n       inline node_pointer\n-      upper_bound_imp(const_key_reference);\n+      upper_bound_imp(key_const_reference);\n \n-      inline static const_leaf_pointer\n-      leftmost_descendant(const_node_pointer);\n+      inline static leaf_const_pointer\n+      leftmost_descendant(node_const_pointer);\n \n       inline static leaf_pointer\n       leftmost_descendant(node_pointer);\n \n-      inline static const_leaf_pointer\n-      rightmost_descendant(const_node_pointer);\n+      inline static leaf_const_pointer\n+      rightmost_descendant(node_const_pointer);\n \n       inline static leaf_pointer\n       rightmost_descendant(node_pointer);\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid(const char* file, int line) const;\n+      assert_valid(const char*, int) const;\n \n       void\n-      assert_iterators(const char* file, int line) const;\n+      assert_iterators(const char*, int) const;\n \n       void\n-      assert_reverse_iterators(const char* file, int line) const;\n+      assert_reverse_iterators(const char*, int) const;\n \n       static size_type\n-      recursive_count_leafs(const_node_pointer,\n-\t\t\t    const char* file, int line);\n-#endif \n+      recursive_count_leafs(node_const_pointer, const char*, int);\n+#endif\n \n #ifdef PB_DS_PAT_TRIE_TRACE_\n       static void\n-      trace_node(const_node_pointer, size_type);\n+      trace_node(node_const_pointer, size_type);\n \n       template<typename Metadata_>\n       static void\n-      trace_node_metadata(const_node_pointer, type_to_type<Metadata_>);\n+      trace_node_metadata(node_const_pointer, type_to_type<Metadata_>);\n \n       static void\n-      trace_node_metadata(const_node_pointer, type_to_type<null_node_metadata>);\n-#endif \n+      trace_node_metadata(node_const_pointer, type_to_type<null_type>);\n+#endif\n \n       leaf_pointer\n-      split_prep(const_key_reference, PB_DS_CLASS_C_DEC&, \n-\t\t split_join_branch_bag&);\n+      split_prep(key_const_reference, PB_DS_CLASS_C_DEC&, branch_bag&);\n \n       node_pointer\n-      rec_split(node_pointer, const_e_iterator, const_e_iterator, \n-\t\tPB_DS_CLASS_C_DEC&, split_join_branch_bag&);\n+      rec_split(node_pointer, a_const_iterator, a_const_iterator,\n+\t\tPB_DS_CLASS_C_DEC&, branch_bag&);\n \n       void\n-      split_insert_branch(size_type, const_e_iterator, \n-\t\t\t  typename internal_node::iterator, \n-\t\t\t  size_type, split_join_branch_bag&);\n+      split_insert_branch(size_type, a_const_iterator, inode_iterator,\n+\t\t\t  size_type, branch_bag&);\n \n-      static head_allocator s_head_allocator;\n-      static internal_node_allocator s_internal_node_allocator;\n-      static leaf_allocator s_leaf_allocator;\n+      static head_allocator \t\ts_head_allocator;\n+      static inode_allocator \t\ts_inode_allocator;\n+      static leaf_allocator \t\ts_leaf_allocator;\n \n-      head_pointer m_p_head;\n-      size_type m_size;\n+      head_pointer \t\t\tm_p_head;\n+      size_type \t\t\tm_size;\n     };\n \n-#define PB_DS_ASSERT_NODE_VALID(X)\t\t\t\t\t\\\n+#define PB_DS_ASSERT_NODE_VALID(X) \\\n   _GLIBCXX_DEBUG_ONLY(X->assert_valid(this, __FILE__, __LINE__);)\n \n-#define PB_DS_RECURSIVE_COUNT_LEAFS(X)\t\t\t\t\t\\\n+#define PB_DS_RECURSIVE_COUNT_LEAFS(X) \\\n   recursive_count_leafs(X, __FILE__, __LINE__)\n \n #include <ext/pb_ds/detail/pat_trie_/constructors_destructor_fn_imps.hpp>\n@@ -517,12 +581,8 @@ namespace __gnu_pbds\n #undef PB_DS_ASSERT_NODE_VALID\n #undef PB_DS_CLASS_C_DEC\n #undef PB_DS_CLASS_T_DEC\n-#undef PB_DS_CLASS_NAME\n-#undef PB_DS_TYPES_TRAITS_C_DEC\n+#undef PB_DS_PAT_TRIE_NAME\n+#undef PB_DS_PAT_TRIE_TRAITS_BASE\n #undef PB_DS_DEBUG_MAP_BASE_C_DEC\n-#undef PB_DS_V2F\n-#undef PB_DS_EP2VP\n-#undef PB_DS_V2S\n-\n   } // namespace detail\n } // namespace __gnu_pbds"}, {"sha": "b3718b51ed23e44d4d33d445d54931c5eee712a0", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/pat_trie_base.hpp", "status": "added", "additions": 1357, "deletions": 0, "changes": 1357, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_base.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "patch": "@@ -0,0 +1,1357 @@\n+// -*- C++ -*-\n+\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the terms\n+// of the GNU General Public License as published by the Free Software\n+// Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// This library is distributed in the hope that it will be useful, but\n+// WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n+\n+// Permission to use, copy, modify, sell, and distribute this software\n+// is hereby granted without fee, provided that the above copyright\n+// notice appears in all copies, and that both that copyright notice\n+// and this permission notice appear in supporting documentation. None\n+// of the above authors, nor IBM Haifa Research Laboratories, make any\n+// representation about the suitability of this software for any\n+// purpose. It is provided \"as is\" without express or implied\n+// warranty.\n+\n+/**\n+ * @file pat_trie_/pat_trie_base.hpp\n+ * Contains the base class for a patricia tree.\n+ */\n+\n+#ifndef PB_DS_PAT_TRIE_BASE\n+#define PB_DS_PAT_TRIE_BASE\n+\n+#include <debug/debug.h>\n+\n+namespace __gnu_pbds\n+{\n+  namespace detail\n+  {\n+    /// Base type for PATRICIA trees.\n+    struct pat_trie_base\n+    {\n+      /// Three types of nodes.\n+      enum node_type\n+\t{\n+\t  i_node,\n+\t  leaf_node,\n+\t  head_node\n+\t};\n+\n+      /// Metadata base primary template.\n+      template<typename Metadata, typename _Alloc>\n+\tstruct _Metadata\n+\t{\n+\t  typedef Metadata     \t\t\t\t\tmetadata_type;\n+\t  typedef _Alloc     \t\t\t\t\tallocator_type;\n+\t  typedef typename _Alloc::template rebind<Metadata>\t__rebind_m;\n+\t  typedef typename __rebind_m::other::const_reference  const_reference;\n+\n+\t  const_reference\n+\t  get_metadata() const\n+\t  { return m_metadata; }\n+\n+\t  metadata_type \t\t\t\t\tm_metadata;\n+\t};\n+\n+      /// Specialization for null metadata.\n+      template<typename _Alloc>\n+\tstruct _Metadata<null_type, _Alloc>\n+\t{\n+\t  typedef null_type \t\t\t\t\tmetadata_type;\n+\t  typedef _Alloc     \t\t\t\t\tallocator_type;\n+\t};\n+\n+\n+      /// Node base.\n+      template<typename _ATraits, typename Metadata>\n+      struct _Node_base\n+      : public Metadata\n+      {\n+      private:\n+\ttypedef typename Metadata::allocator_type\t\t_Alloc;\n+\n+      public:\n+\ttypedef _Alloc\t\t\t\t\t\tallocator_type;\n+\ttypedef _ATraits\t\t\t\t\taccess_traits;\n+\ttypedef typename _ATraits::type_traits\t\t\ttype_traits;\n+\ttypedef typename _Alloc::template rebind<_Node_base>\t__rebind_n;\n+\ttypedef typename __rebind_n::other::pointer \t\tnode_pointer;\n+\n+\tnode_pointer \t\t\t\t\t\tm_p_parent;\n+\tconst node_type \t       \t\t\t\tm_type;\n+\n+\t_Node_base(node_type type) : m_type(type)\n+\t{ }\n+\n+\ttypedef typename _Alloc::template rebind<_ATraits>    __rebind_at;\n+\ttypedef typename __rebind_at::other::const_pointer    a_const_pointer;\n+\ttypedef typename _ATraits::const_iterator\t      a_const_iterator;\n+\n+#ifdef _GLIBCXX_DEBUG\n+\ttypedef std::pair<a_const_iterator, a_const_iterator> node_debug_info;\n+\n+\tvoid\n+\tassert_valid(a_const_pointer p_traits,\n+\t\t     const char* __file, int __line) const\n+\t{ assert_valid_imp(p_traits, __file, __line); }\n+\n+\tvirtual node_debug_info\n+\tassert_valid_imp(a_const_pointer, const char*, int) const = 0;\n+#endif\n+      };\n+\n+\n+    /// Head node for PATRICIA tree.\n+    template<typename _ATraits, typename Metadata>\n+    struct _Head\n+    : public _Node_base<_ATraits, Metadata>\n+    {\n+      typedef _Node_base<_ATraits, Metadata> \t\t\tbase_type;\n+      typedef typename base_type::type_traits\t\t\ttype_traits;\n+      typedef typename base_type::node_pointer\t\t\tnode_pointer;\n+\n+      node_pointer\t\t\t\t\t\tm_p_min;\n+      node_pointer\t\t\t\t\t\tm_p_max;\n+\n+      _Head() : base_type(head_node) { }\n+\n+#ifdef _GLIBCXX_DEBUG\n+      typedef typename base_type::node_debug_info      \t       node_debug_info;\n+      typedef typename base_type::a_const_pointer \t       a_const_pointer;\n+\n+      virtual node_debug_info\n+      assert_valid_imp(a_const_pointer, const char* __file, int __line) const\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY_AT(false,\n+\t\t\t\t _M_message(\"Assertion from %1;:%2;\")\n+\t\t\t\t ._M_string(__FILE__)._M_integer(__LINE__),\n+\t\t\t\t __file, __line);\n+\treturn node_debug_info();\n+      }\n+#endif\n+    };\n+\n+\n+    /// Leaf node for PATRICIA tree.\n+    template<typename _ATraits, typename Metadata>\n+    struct _Leaf\n+    : public _Node_base<_ATraits, Metadata>\n+    {\n+      typedef _Node_base<_ATraits, Metadata> \t   \t    \tbase_type;\n+      typedef typename base_type::type_traits\t\t\ttype_traits;\n+      typedef typename type_traits::value_type\t\t\tvalue_type;\n+      typedef typename type_traits::reference\t\t\treference;\n+      typedef typename type_traits::const_reference    \t\tconst_reference;\n+\n+    private:\n+      value_type\t\t\t\t\t\tm_value;\n+\n+      _Leaf(const _Leaf&);\n+\n+    public:\n+      _Leaf(const_reference other)\n+      : base_type(leaf_node), m_value(other) { }\n+\n+      reference\n+      value()\n+      { return m_value; }\n+\n+      const_reference\n+      value() const\n+      { return m_value; }\n+\n+#ifdef _GLIBCXX_DEBUG\n+      typedef typename base_type::node_debug_info      \t\tnode_debug_info;\n+      typedef typename base_type::a_const_pointer      \t\ta_const_pointer;\n+\n+      virtual node_debug_info\n+      assert_valid_imp(a_const_pointer p_traits,\n+\t\t       const char* __file, int __line) const\n+      {\n+\tPB_DS_DEBUG_VERIFY(base_type::m_type == leaf_node);\n+\tnode_debug_info ret;\n+\tconst_reference r_val = value();\n+\treturn std::make_pair(p_traits->begin(p_traits->extract_key(r_val)),\n+\t\t\t      p_traits->end(p_traits->extract_key(r_val)));\n+      }\n+\n+      virtual\n+      ~_Leaf() { }\n+#endif\n+    };\n+\n+\n+    /// Internal node type, PATRICIA tree.\n+    template<typename _ATraits, typename Metadata>\n+    struct _Inode\n+    : public _Node_base<_ATraits, Metadata>\n+    {\n+      typedef _Node_base<_ATraits, Metadata> \t\t\tbase_type;\n+      typedef typename base_type::type_traits\t\t\ttype_traits;\n+      typedef typename base_type::access_traits\t       \t\taccess_traits;\n+      typedef typename type_traits::value_type \t\t\tvalue_type;\n+      typedef typename base_type::allocator_type\t\t_Alloc;\n+      typedef _Alloc\t\t\t\t\t\tallocator_type;\n+      typedef typename _Alloc::size_type \t\t\tsize_type;\n+\n+    private:\n+      typedef typename base_type::a_const_pointer      \t       a_const_pointer;\n+      typedef typename base_type::a_const_iterator     \t      a_const_iterator;\n+\n+      typedef typename base_type::node_pointer\t\t\tnode_pointer;\n+      typedef typename _Alloc::template rebind<base_type>\t__rebind_n;\n+      typedef typename __rebind_n::other::const_pointer      node_const_pointer;\n+\n+      typedef _Leaf<_ATraits, Metadata>\t \t\t\tleaf;\n+      typedef typename _Alloc::template rebind<leaf>::other \t__rebind_l;\n+      typedef typename __rebind_l::pointer \t\t\tleaf_pointer;\n+      typedef typename __rebind_l::const_pointer \t    leaf_const_pointer;\n+\n+      typedef typename _Alloc::template rebind<_Inode>::other \t__rebind_in;\n+      typedef typename __rebind_in::pointer \t\t\tinode_pointer;\n+      typedef typename __rebind_in::const_pointer \t    inode_const_pointer;\n+\n+      inline size_type\n+      get_pref_pos(a_const_iterator, a_const_iterator, a_const_pointer) const;\n+\n+    public:\n+      typedef typename _Alloc::template rebind<node_pointer>::other __rebind_np;\n+      typedef typename __rebind_np::pointer \t\tnode_pointer_pointer;\n+      typedef typename __rebind_np::reference \t\tnode_pointer_reference;\n+\n+      enum\n+\t{\n+\t  arr_size = _ATraits::max_size + 1\n+\t};\n+      PB_DS_STATIC_ASSERT(min_arr_size, arr_size >= 2);\n+\n+\n+      /// Constant child iterator.\n+      struct const_iterator\n+      {\n+\tnode_pointer_pointer \t\t\t\tm_p_p_cur;\n+\tnode_pointer_pointer \t\t\t\tm_p_p_end;\n+\n+\ttypedef std::forward_iterator_tag \t\titerator_category;\n+\ttypedef typename _Alloc::difference_type \tdifference_type;\n+\ttypedef node_pointer \t\t\t\tvalue_type;\n+\ttypedef node_pointer_pointer \t\t\tpointer;\n+\ttypedef node_pointer_reference \t\t\treference;\n+\n+\tconst_iterator(node_pointer_pointer p_p_cur = 0,\n+\t\t       node_pointer_pointer p_p_end = 0)\n+\t: m_p_p_cur(p_p_cur), m_p_p_end(p_p_end)\n+\t{ }\n+\n+\tbool\n+\toperator==(const const_iterator& other) const\n+\t{ return m_p_p_cur == other.m_p_p_cur; }\n+\n+\tbool\n+\toperator!=(const const_iterator& other) const\n+\t{ return m_p_p_cur != other.m_p_p_cur; }\n+\n+\tconst_iterator&\n+\toperator++()\n+\t{\n+\t  do\n+\t    ++m_p_p_cur;\n+\t  while (m_p_p_cur != m_p_p_end && *m_p_p_cur == 0);\n+\t  return *this;\n+\t}\n+\n+\tconst_iterator\n+\toperator++(int)\n+\t{\n+\t  const_iterator ret_it(*this);\n+\t  operator++();\n+\t  return ret_it;\n+\t}\n+\n+\tconst node_pointer_pointer\n+\toperator->() const\n+\t{\n+\t  _GLIBCXX_DEBUG_ONLY(assert_referencible();)\n+\t  return m_p_p_cur;\n+\t}\n+\n+\tnode_const_pointer\n+\toperator*() const\n+\t{\n+\t  _GLIBCXX_DEBUG_ONLY(assert_referencible();)\n+\t  return *m_p_p_cur;\n+\t}\n+\n+      protected:\n+#ifdef _GLIBCXX_DEBUG\n+\tvoid\n+\tassert_referencible() const\n+\t{ _GLIBCXX_DEBUG_ASSERT(m_p_p_cur != m_p_p_end && *m_p_p_cur != 0); }\n+#endif\n+      };\n+\n+\n+      /// Child iterator.\n+      struct iterator : public const_iterator\n+      {\n+      public:\n+\ttypedef std::forward_iterator_tag \t\titerator_category;\n+\ttypedef typename _Alloc::difference_type \tdifference_type;\n+\ttypedef node_pointer \t\t\t\tvalue_type;\n+\ttypedef node_pointer_pointer \t\t\tpointer;\n+\ttypedef node_pointer_reference \t\t\treference;\n+\n+\tinline\n+\titerator(node_pointer_pointer p_p_cur = 0,\n+\t\t node_pointer_pointer p_p_end = 0)\n+\t: const_iterator(p_p_cur, p_p_end) { }\n+\n+\tbool\n+\toperator==(const iterator& other) const\n+\t{ return const_iterator::m_p_p_cur == other.m_p_p_cur; }\n+\n+\tbool\n+\toperator!=(const iterator& other) const\n+\t{ return const_iterator::m_p_p_cur != other.m_p_p_cur; }\n+\n+\titerator&\n+\toperator++()\n+\t{\n+\t  const_iterator::operator++();\n+\t  return *this;\n+\t}\n+\n+\titerator\n+\toperator++(int)\n+\t{\n+\t  iterator ret_it(*this);\n+\t  operator++();\n+\t  return ret_it;\n+\t}\n+\n+\tnode_pointer_pointer\n+\toperator->()\n+\t{\n+\t  _GLIBCXX_DEBUG_ONLY(const_iterator::assert_referencible();)\n+\t  return const_iterator::m_p_p_cur;\n+\t}\n+\n+\tnode_pointer\n+\toperator*()\n+\t{\n+\t  _GLIBCXX_DEBUG_ONLY(const_iterator::assert_referencible();)\n+\t  return *const_iterator::m_p_p_cur;\n+\t}\n+      };\n+\n+\n+      _Inode(size_type, const a_const_iterator);\n+\n+      void\n+      update_prefixes(a_const_pointer);\n+\n+      const_iterator\n+      begin() const;\n+\n+      iterator\n+      begin();\n+\n+      const_iterator\n+      end() const;\n+\n+      iterator\n+      end();\n+\n+      inline node_pointer\n+      get_child_node(a_const_iterator, a_const_iterator, a_const_pointer);\n+\n+      inline node_const_pointer\n+      get_child_node(a_const_iterator, a_const_iterator, a_const_pointer) const;\n+\n+      inline iterator\n+      get_child_it(a_const_iterator, a_const_iterator, a_const_pointer);\n+\n+      inline node_pointer\n+      get_lower_bound_child_node(a_const_iterator, a_const_iterator,\n+\t\t\t\t size_type, a_const_pointer);\n+\n+      inline node_pointer\n+      add_child(node_pointer, a_const_iterator, a_const_iterator,\n+\t\ta_const_pointer);\n+\n+      inline node_const_pointer\n+      get_join_child(node_const_pointer, a_const_pointer) const;\n+\n+      inline node_pointer\n+      get_join_child(node_pointer, a_const_pointer);\n+\n+      void\n+      remove_child(node_pointer);\n+\n+      void\n+      remove_child(iterator);\n+\n+      void\n+      replace_child(node_pointer, a_const_iterator, a_const_iterator,\n+\t\t    a_const_pointer);\n+\n+      inline a_const_iterator\n+      pref_b_it() const;\n+\n+      inline a_const_iterator\n+      pref_e_it() const;\n+\n+      bool\n+      should_be_mine(a_const_iterator, a_const_iterator, size_type,\n+\t\t     a_const_pointer) const;\n+\n+      leaf_pointer\n+      leftmost_descendant();\n+\n+      leaf_const_pointer\n+      leftmost_descendant() const;\n+\n+      leaf_pointer\n+      rightmost_descendant();\n+\n+      leaf_const_pointer\n+      rightmost_descendant() const;\n+\n+#ifdef _GLIBCXX_DEBUG\n+      typedef typename base_type::node_debug_info \t       node_debug_info;\n+\n+      virtual node_debug_info\n+      assert_valid_imp(a_const_pointer, const char*, int) const;\n+#endif\n+\n+      size_type\n+      get_e_ind() const\n+      { return m_e_ind; }\n+\n+    private:\n+      _Inode(const _Inode&);\n+\n+      size_type\n+      get_begin_pos() const;\n+\n+      static __rebind_l\t\t\ts_leaf_alloc;\n+      static __rebind_in \t\ts_inode_alloc;\n+\n+      const size_type \t\t\tm_e_ind;\n+      a_const_iterator \t\t\tm_pref_b_it;\n+      a_const_iterator \t\t\tm_pref_e_it;\n+      node_pointer \t\t\tm_a_p_children[arr_size];\n+    };\n+\n+#define PB_DS_CONST_IT_C_DEC \\\n+    _CIter<Node, Leaf, Head, Inode, Is_Forward_Iterator>\n+\n+#define PB_DS_CONST_ODIR_IT_C_DEC \\\n+    _CIter<Node, Leaf, Head, Inode, !Is_Forward_Iterator>\n+\n+#define PB_DS_IT_C_DEC \\\n+    _Iter<Node, Leaf, Head, Inode, Is_Forward_Iterator>\n+\n+#define PB_DS_ODIR_IT_C_DEC \\\n+    _Iter<Node, Leaf, Head, Inode, !Is_Forward_Iterator>\n+\n+\n+    /// Const iterator.\n+    template<typename Node, typename Leaf, typename Head, typename Inode,\n+\t     bool Is_Forward_Iterator>\n+    class _CIter\n+    {\n+    public:\n+      // These types are all the same for the first four template arguments.\n+      typedef typename Node::allocator_type\t\tallocator_type;\n+      typedef typename Node::type_traits\t\ttype_traits;\n+\n+      typedef std::bidirectional_iterator_tag \t\titerator_category;\n+      typedef typename allocator_type::difference_type\tdifference_type;\n+      typedef typename type_traits::value_type\t\tvalue_type;\n+      typedef typename type_traits::pointer \t\tpointer;\n+      typedef typename type_traits::reference \t\treference;\n+      typedef typename type_traits::const_pointer \tconst_pointer;\n+      typedef typename type_traits::const_reference \tconst_reference;\n+\n+      typedef allocator_type\t\t\t\t_Alloc;\n+      typedef typename _Alloc::template rebind<Node>\t__rebind_n;\n+      typedef typename __rebind_n::other::pointer\tnode_pointer;\n+      typedef typename _Alloc::template rebind<Leaf>\t__rebind_l;\n+      typedef typename __rebind_l::other::pointer\tleaf_pointer;\n+      typedef typename __rebind_l::other::const_pointer\tleaf_const_pointer;\n+      typedef typename _Alloc::template rebind<Head>\t__rebind_h;\n+      typedef typename __rebind_h::other::pointer\thead_pointer;\n+\n+      typedef typename _Alloc::template rebind<Inode> __rebind_in;\n+      typedef typename __rebind_in::other::pointer \tinode_pointer;\n+      typedef typename Inode::iterator\t\t\tinode_iterator;\n+\n+      node_pointer \t\t\t\t\tm_p_nd;\n+\n+      _CIter(node_pointer p_nd = 0) : m_p_nd(p_nd)\n+      { }\n+\n+      _CIter(const PB_DS_CONST_ODIR_IT_C_DEC& other)\n+      : m_p_nd(other.m_p_nd)\n+      { }\n+\n+      _CIter&\n+      operator=(const _CIter& other)\n+      {\n+\tm_p_nd = other.m_p_nd;\n+\treturn *this;\n+      }\n+\n+      _CIter&\n+      operator=(const PB_DS_CONST_ODIR_IT_C_DEC& other)\n+      {\n+\tm_p_nd = other.m_p_nd;\n+\treturn *this;\n+      }\n+\n+      const_pointer\n+      operator->() const\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(m_p_nd->m_type == leaf_node);\n+\treturn &static_cast<leaf_pointer>(m_p_nd)->value();\n+      }\n+\n+      const_reference\n+      operator*() const\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(m_p_nd->m_type == leaf_node);\n+\treturn static_cast<leaf_pointer>(m_p_nd)->value();\n+      }\n+\n+      bool\n+      operator==(const _CIter& other) const\n+      { return m_p_nd == other.m_p_nd; }\n+\n+      bool\n+      operator==(const PB_DS_CONST_ODIR_IT_C_DEC& other) const\n+      { return m_p_nd == other.m_p_nd; }\n+\n+      bool\n+      operator!=(const _CIter& other) const\n+      { return m_p_nd != other.m_p_nd; }\n+\n+      bool\n+      operator!=(const PB_DS_CONST_ODIR_IT_C_DEC& other) const\n+      { return m_p_nd != other.m_p_nd; }\n+\n+      _CIter&\n+      operator++()\n+      {\n+\tinc(integral_constant<int, Is_Forward_Iterator>());\n+\treturn *this;\n+      }\n+\n+      _CIter\n+      operator++(int)\n+      {\n+\t_CIter ret_it(m_p_nd);\n+\toperator++();\n+\treturn ret_it;\n+      }\n+\n+      _CIter&\n+      operator--()\n+      {\n+\tdec(integral_constant<int, Is_Forward_Iterator>());\n+\treturn *this;\n+      }\n+\n+      _CIter\n+      operator--(int)\n+      {\n+\t_CIter ret_it(m_p_nd);\n+\toperator--();\n+\treturn ret_it;\n+      }\n+\n+    protected:\n+      void\n+      inc(false_type)\n+      { dec(true_type()); }\n+\n+      void\n+      inc(true_type)\n+      {\n+\tif (m_p_nd->m_type == head_node)\n+\t  {\n+\t    m_p_nd = static_cast<head_pointer>(m_p_nd)->m_p_min;\n+\t    return;\n+\t  }\n+\n+\tnode_pointer p_y = m_p_nd->m_p_parent;\n+\twhile (p_y->m_type != head_node && get_larger_sibling(m_p_nd) == 0)\n+\t  {\n+\t    m_p_nd = p_y;\n+\t    p_y = p_y->m_p_parent;\n+\t  }\n+\n+\tif (p_y->m_type == head_node)\n+\t  {\n+\t    m_p_nd = p_y;\n+\t    return;\n+\t  }\n+\tm_p_nd = leftmost_descendant(get_larger_sibling(m_p_nd));\n+      }\n+\n+      void\n+      dec(false_type)\n+      { inc(true_type()); }\n+\n+      void\n+      dec(true_type)\n+      {\n+\tif (m_p_nd->m_type == head_node)\n+\t  {\n+\t    m_p_nd = static_cast<head_pointer>(m_p_nd)->m_p_max;\n+\t    return;\n+\t  }\n+\n+\tnode_pointer p_y = m_p_nd->m_p_parent;\n+\twhile (p_y->m_type != head_node && get_smaller_sibling(m_p_nd) == 0)\n+\t  {\n+\t    m_p_nd = p_y;\n+\t    p_y = p_y->m_p_parent;\n+\t  }\n+\n+\tif (p_y->m_type == head_node)\n+\t  {\n+\t    m_p_nd = p_y;\n+\t    return;\n+\t  }\n+\tm_p_nd = rightmost_descendant(get_smaller_sibling(m_p_nd));\n+      }\n+\n+      static node_pointer\n+      get_larger_sibling(node_pointer p_nd)\n+      {\n+\tinode_pointer p_parent = static_cast<inode_pointer>(p_nd->m_p_parent);\n+\n+\tinode_iterator it = p_parent->begin();\n+\twhile (*it != p_nd)\n+\t  ++it;\n+\n+\tinode_iterator next_it = it;\n+\t++next_it;\n+\treturn (next_it == p_parent->end())? 0 : *next_it;\n+      }\n+\n+      static node_pointer\n+      get_smaller_sibling(node_pointer p_nd)\n+      {\n+\tinode_pointer p_parent = static_cast<inode_pointer>(p_nd->m_p_parent);\n+\n+\tinode_iterator it = p_parent->begin();\n+\tif (*it == p_nd)\n+\t  return 0;\n+\n+\tinode_iterator prev_it;\n+\tdo\n+\t  {\n+\t    prev_it = it;\n+\t    ++it;\n+\t    if (*it == p_nd)\n+\t      return *prev_it;\n+\t  }\n+\twhile (true);\n+\n+\t_GLIBCXX_DEBUG_ASSERT(false);\n+\treturn 0;\n+      }\n+\n+      static leaf_pointer\n+      leftmost_descendant(node_pointer p_nd)\n+      {\n+\tif (p_nd->m_type == leaf_node)\n+\t  return static_cast<leaf_pointer>(p_nd);\n+\treturn static_cast<inode_pointer>(p_nd)->leftmost_descendant();\n+      }\n+\n+      static leaf_pointer\n+      rightmost_descendant(node_pointer p_nd)\n+      {\n+\tif (p_nd->m_type == leaf_node)\n+\t  return static_cast<leaf_pointer>(p_nd);\n+\treturn static_cast<inode_pointer>(p_nd)->rightmost_descendant();\n+      }\n+    };\n+\n+\n+    /// Iterator.\n+    template<typename Node, typename Leaf, typename Head, typename Inode,\n+\t     bool Is_Forward_Iterator>\n+    class _Iter\n+    : public _CIter<Node, Leaf, Head, Inode, Is_Forward_Iterator>\n+    {\n+    public:\n+      typedef _CIter<Node, Leaf, Head, Inode, Is_Forward_Iterator>\n+      \t\t\t\t\t\t\tbase_type;\n+      typedef typename base_type::allocator_type\tallocator_type;\n+      typedef typename base_type::type_traits\t\ttype_traits;\n+      typedef typename type_traits::value_type\t\tvalue_type;\n+      typedef typename type_traits::pointer \t\tpointer;\n+      typedef typename type_traits::reference \t\treference;\n+\n+      typedef typename base_type::node_pointer\t\tnode_pointer;\n+      typedef typename base_type::leaf_pointer\t\tleaf_pointer;\n+      typedef typename base_type::leaf_const_pointer\tleaf_const_pointer;\n+      typedef typename base_type::head_pointer\t\thead_pointer;\n+      typedef typename base_type::inode_pointer \tinode_pointer;\n+\n+      _Iter(node_pointer p_nd = 0)\n+      : base_type(p_nd) { }\n+\n+      _Iter(const PB_DS_ODIR_IT_C_DEC& other)\n+      : base_type(other.m_p_nd) { }\n+\n+      _Iter&\n+      operator=(const _Iter& other)\n+      {\n+\tbase_type::m_p_nd = other.m_p_nd;\n+\treturn *this;\n+      }\n+\n+      _Iter&\n+      operator=(const PB_DS_ODIR_IT_C_DEC& other)\n+      {\n+\tbase_type::m_p_nd = other.m_p_nd;\n+\treturn *this;\n+      }\n+\n+      pointer\n+      operator->() const\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(base_type::m_p_nd->m_type == leaf_node);\n+\treturn &static_cast<leaf_pointer>(base_type::m_p_nd)->value();\n+      }\n+\n+      reference\n+      operator*() const\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(base_type::m_p_nd->m_type == leaf_node);\n+\treturn static_cast<leaf_pointer>(base_type::m_p_nd)->value();\n+      }\n+\n+      _Iter&\n+      operator++()\n+      {\n+\tbase_type::operator++();\n+\treturn *this;\n+      }\n+\n+      _Iter\n+      operator++(int)\n+      {\n+\t_Iter ret(base_type::m_p_nd);\n+\toperator++();\n+\treturn ret;\n+      }\n+\n+      _Iter&\n+      operator--()\n+      {\n+\tbase_type::operator--();\n+\treturn *this;\n+      }\n+\n+      _Iter\n+      operator--(int)\n+      {\n+\t_Iter ret(base_type::m_p_nd);\n+\toperator--();\n+\treturn ret;\n+      }\n+    };\n+\n+#undef PB_DS_CONST_ODIR_IT_C_DEC\n+#undef PB_DS_ODIR_IT_C_DEC\n+\n+\n+#define PB_DS_PAT_TRIE_NODE_CONST_ITERATOR_C_DEC \\\n+    _Node_citer<Node, Leaf, Head, Inode, _CIterator, Iterator, _ATraits, _Alloc>\n+\n+#define PB_DS_PAT_TRIE_NODE_ITERATOR_C_DEC \\\n+    _Node_iter<Node, Leaf, Head, Inode, _CIterator, Iterator, _ATraits, _Alloc>\n+\n+    /// Node const iterator.\n+    template<typename Node,\n+\t     typename Leaf,\n+\t     typename Head,\n+\t     typename Inode,\n+\t     typename _CIterator,\n+\t     typename Iterator,\n+\t     typename _Alloc>\n+    class _Node_citer\n+    {\n+    protected:\n+      typedef typename _Alloc::template rebind<Node>\t__rebind_n;\n+      typedef typename __rebind_n::other::pointer\tnode_pointer;\n+\n+      typedef typename _Alloc::template rebind<Leaf>\t__rebind_l;\n+      typedef typename __rebind_l::other::pointer\tleaf_pointer;\n+      typedef typename __rebind_l::other::const_pointer\tleaf_const_pointer;\n+\n+      typedef typename _Alloc::template rebind<Inode> \t__rebind_in;\n+      typedef typename __rebind_in::other::pointer \tinode_pointer;\n+      typedef typename __rebind_in::other::const_pointer inode_const_pointer;\n+\n+      typedef typename Node::a_const_pointer\t\ta_const_pointer;\n+      typedef typename Node::a_const_iterator\t\ta_const_iterator;\n+\n+    private:\n+      a_const_iterator\n+      pref_begin() const\n+      {\n+\tif (m_p_nd->m_type == leaf_node)\n+\t  {\n+\t    leaf_const_pointer lcp = static_cast<leaf_const_pointer>(m_p_nd);\n+\t    return m_p_traits->begin(m_p_traits->extract_key(lcp->value()));\n+\t  }\n+\t_GLIBCXX_DEBUG_ASSERT(m_p_nd->m_type == i_node);\n+\treturn static_cast<inode_const_pointer>(m_p_nd)->pref_b_it();\n+      }\n+\n+      a_const_iterator\n+      pref_end() const\n+      {\n+\tif (m_p_nd->m_type == leaf_node)\n+\t  {\n+\t    leaf_const_pointer lcp = static_cast<leaf_const_pointer>(m_p_nd);\n+\t    return m_p_traits->end(m_p_traits->extract_key(lcp->value()));\n+\t  }\n+\t_GLIBCXX_DEBUG_ASSERT(m_p_nd->m_type == i_node);\n+\treturn static_cast<inode_const_pointer>(m_p_nd)->pref_e_it();\n+      }\n+\n+    public:\n+      typedef trivial_iterator_tag \t\t\titerator_category;\n+      typedef trivial_iterator_difference_type \t\tdifference_type;\n+      typedef typename _Alloc::size_type \t\tsize_type;\n+\n+      typedef _CIterator \t\t       \t\tvalue_type;\n+      typedef value_type \t\t\t\treference;\n+      typedef value_type \t\t\t\tconst_reference;\n+\n+      // Metadata type.\n+      typedef typename Node::metadata_type \t\tmetadata_type;\n+\n+      // Const metadata reference type.\n+      typedef typename _Alloc::template rebind<metadata_type> __rebind_m;\n+      typedef typename __rebind_m::other \t\t__rebind_ma;\n+      typedef typename __rebind_ma::const_reference    metadata_const_reference;\n+\n+      inline\n+      _Node_citer(node_pointer p_nd = 0, a_const_pointer p_traits = 0)\n+      : m_p_nd(const_cast<node_pointer>(p_nd)), m_p_traits(p_traits)\n+      { }\n+\n+      // Subtree valid prefix.\n+      std::pair<a_const_iterator, a_const_iterator>\n+      valid_prefix() const\n+      { return std::make_pair(pref_begin(), pref_end()); }\n+\n+      // Const access; returns the __const iterator* associated with\n+      // the current leaf.\n+      const_reference\n+      operator*() const\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(num_children() == 0);\n+\treturn _CIterator(m_p_nd);\n+      }\n+\n+      // Metadata access.\n+      metadata_const_reference\n+      get_metadata() const\n+      { return m_p_nd->get_metadata(); }\n+\n+      // Returns the number of children in the corresponding node.\n+      size_type\n+      num_children() const\n+      {\n+\tif (m_p_nd->m_type == leaf_node)\n+\t  return 0;\n+\t_GLIBCXX_DEBUG_ASSERT(m_p_nd->m_type == i_node);\n+\tinode_pointer inp = static_cast<inode_pointer>(m_p_nd);\n+\treturn std::distance(inp->begin(), inp->end());\n+      }\n+\n+      // Returns a __const node __iterator to the corresponding node's\n+      // i-th child.\n+      _Node_citer\n+      get_child(size_type i) const\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(m_p_nd->m_type == i_node);\n+\tinode_pointer inp = static_cast<inode_pointer>(m_p_nd);\n+\ttypename Inode::iterator it = inp->begin();\n+\tstd::advance(it, i);\n+\treturn _Node_citer(*it, m_p_traits);\n+      }\n+\n+      // Compares content to a different iterator object.\n+      bool\n+      operator==(const _Node_citer& other) const\n+      { return m_p_nd == other.m_p_nd; }\n+\n+      // Compares content (negatively) to a different iterator object.\n+      bool\n+      operator!=(const _Node_citer& other) const\n+      { return m_p_nd != other.m_p_nd; }\n+\n+      node_pointer \t\t\tm_p_nd;\n+      a_const_pointer \t\t\tm_p_traits;\n+    };\n+\n+\n+    /// Node iterator.\n+    template<typename Node,\n+\t     typename Leaf,\n+\t     typename Head,\n+\t     typename Inode,\n+\t     typename _CIterator,\n+\t     typename Iterator,\n+\t     typename _Alloc>\n+    class _Node_iter\n+    : public _Node_citer<Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc>\n+    {\n+    private:\n+      typedef _Node_citer<Node, Leaf, Head, Inode,\n+\t\t\t  _CIterator, Iterator, _Alloc>\tbase_type;\n+      typedef typename _Alloc::template rebind<Node>\t__rebind_n;\n+      typedef typename __rebind_n::other::pointer\tnode_pointer;\n+      typedef typename base_type::inode_pointer \tinode_pointer;\n+      typedef typename base_type::a_const_pointer \ta_const_pointer;\n+      typedef Iterator \t\t\t\t\titerator;\n+\n+    public:\n+      typedef typename base_type::size_type \t\tsize_type;\n+\n+      typedef Iterator \t\t\t\t\tvalue_type;\n+      typedef value_type \t\t\t\treference;\n+      typedef value_type \t\t\t\tconst_reference;\n+\n+      _Node_iter(node_pointer p_nd = 0, a_const_pointer p_traits = 0)\n+      : base_type(p_nd, p_traits)\n+      { }\n+\n+      // Access; returns the iterator*  associated with the current leaf.\n+      reference\n+      operator*() const\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(base_type::num_children() == 0);\n+\treturn iterator(base_type::m_p_nd);\n+      }\n+\n+      // Returns a node __iterator to the corresponding node's i-th child.\n+      _Node_iter\n+      get_child(size_type i) const\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(base_type::m_p_nd->m_type == i_node);\n+\n+\ttypename Inode::iterator it =\n+\t  static_cast<inode_pointer>(base_type::m_p_nd)->begin();\n+\n+\tstd::advance(it, i);\n+\treturn _Node_iter(*it, base_type::m_p_traits);\n+      }\n+    };\n+    };\n+\n+\n+#define PB_DS_CLASS_T_DEC \\\n+    template<typename _ATraits, typename Metadata>\n+\n+#define PB_DS_CLASS_C_DEC \\\n+    pat_trie_base::_Inode<_ATraits, Metadata>\n+\n+    PB_DS_CLASS_T_DEC\n+    typename PB_DS_CLASS_C_DEC::__rebind_l\n+    PB_DS_CLASS_C_DEC::s_leaf_alloc;\n+\n+    PB_DS_CLASS_T_DEC\n+    typename PB_DS_CLASS_C_DEC::__rebind_in\n+    PB_DS_CLASS_C_DEC::s_inode_alloc;\n+\n+    PB_DS_CLASS_T_DEC\n+    inline typename PB_DS_CLASS_C_DEC::size_type\n+    PB_DS_CLASS_C_DEC::\n+    get_pref_pos(a_const_iterator b_it, a_const_iterator e_it,\n+\t\t a_const_pointer p_traits) const\n+    {\n+      if (static_cast<std::size_t>(std::distance(b_it, e_it)) <= m_e_ind)\n+\treturn 0;\n+      std::advance(b_it, m_e_ind);\n+      return 1 + p_traits->e_pos(*b_it);\n+    }\n+\n+    PB_DS_CLASS_T_DEC\n+    PB_DS_CLASS_C_DEC::\n+    _Inode(size_type len, const a_const_iterator it)\n+    : base_type(i_node), m_e_ind(len), m_pref_b_it(it), m_pref_e_it(it)\n+    {\n+      std::advance(m_pref_e_it, m_e_ind);\n+      std::fill(m_a_p_children, m_a_p_children + arr_size,\n+\t\tstatic_cast<node_pointer>(0));\n+    }\n+\n+    PB_DS_CLASS_T_DEC\n+    void\n+    PB_DS_CLASS_C_DEC::\n+    update_prefixes(a_const_pointer p_traits)\n+    {\n+      node_pointer p_first = *begin();\n+      if (p_first->m_type == leaf_node)\n+\t{\n+\t  leaf_const_pointer p = static_cast<leaf_const_pointer>(p_first);\n+\t  m_pref_b_it = p_traits->begin(access_traits::extract_key(p->value()));\n+\t}\n+      else\n+\t{\n+\t  inode_pointer p = static_cast<inode_pointer>(p_first);\n+\t  _GLIBCXX_DEBUG_ASSERT(p_first->m_type == i_node);\n+\t  m_pref_b_it = p->pref_b_it();\n+\t}\n+      m_pref_e_it = m_pref_b_it;\n+      std::advance(m_pref_e_it, m_e_ind);\n+    }\n+\n+    PB_DS_CLASS_T_DEC\n+    typename PB_DS_CLASS_C_DEC::const_iterator\n+    PB_DS_CLASS_C_DEC::\n+    begin() const\n+    {\n+      typedef node_pointer_pointer pointer_type;\n+      pointer_type p = const_cast<pointer_type>(m_a_p_children);\n+      return const_iterator(p + get_begin_pos(), p + arr_size);\n+    }\n+\n+    PB_DS_CLASS_T_DEC\n+    typename PB_DS_CLASS_C_DEC::iterator\n+    PB_DS_CLASS_C_DEC::\n+    begin()\n+    {\n+      return iterator(m_a_p_children + get_begin_pos(),\n+\t\t      m_a_p_children + arr_size);\n+    }\n+\n+    PB_DS_CLASS_T_DEC\n+    typename PB_DS_CLASS_C_DEC::const_iterator\n+    PB_DS_CLASS_C_DEC::\n+    end() const\n+    {\n+      typedef node_pointer_pointer pointer_type;\n+      pointer_type p = const_cast<pointer_type>(m_a_p_children) + arr_size;\n+      return const_iterator(p, p);\n+    }\n+\n+    PB_DS_CLASS_T_DEC\n+    typename PB_DS_CLASS_C_DEC::iterator\n+    PB_DS_CLASS_C_DEC::\n+    end()\n+    { return iterator(m_a_p_children + arr_size, m_a_p_children + arr_size); }\n+\n+    PB_DS_CLASS_T_DEC\n+    inline typename PB_DS_CLASS_C_DEC::node_pointer\n+    PB_DS_CLASS_C_DEC::\n+    get_child_node(a_const_iterator b_it, a_const_iterator e_it,\n+\t\t   a_const_pointer p_traits)\n+    {\n+      const size_type i = get_pref_pos(b_it, e_it, p_traits);\n+      _GLIBCXX_DEBUG_ASSERT(i < arr_size);\n+      return m_a_p_children[i];\n+    }\n+\n+    PB_DS_CLASS_T_DEC\n+    inline typename PB_DS_CLASS_C_DEC::iterator\n+    PB_DS_CLASS_C_DEC::\n+    get_child_it(a_const_iterator b_it, a_const_iterator e_it,\n+\t\t a_const_pointer p_traits)\n+    {\n+      const size_type i = get_pref_pos(b_it, e_it, p_traits);\n+      _GLIBCXX_DEBUG_ASSERT(i < arr_size);\n+      _GLIBCXX_DEBUG_ASSERT(m_a_p_children[i] != 0);\n+      return iterator(m_a_p_children + i, m_a_p_children + i);\n+    }\n+\n+    PB_DS_CLASS_T_DEC\n+    inline typename PB_DS_CLASS_C_DEC::node_const_pointer\n+    PB_DS_CLASS_C_DEC::\n+    get_child_node(a_const_iterator b_it, a_const_iterator e_it,\n+\t\t   a_const_pointer p_traits) const\n+    { return const_cast<node_pointer>(get_child_node(b_it, e_it, p_traits)); }\n+\n+    PB_DS_CLASS_T_DEC\n+    typename PB_DS_CLASS_C_DEC::node_pointer\n+    PB_DS_CLASS_C_DEC::\n+    get_lower_bound_child_node(a_const_iterator b_it, a_const_iterator e_it,\n+\t\t\t       size_type checked_ind,\n+\t\t\t       a_const_pointer p_traits)\n+    {\n+      if (!should_be_mine(b_it, e_it, checked_ind, p_traits))\n+\t{\n+\t  if (p_traits->cmp_prefixes(b_it, e_it, m_pref_b_it,\n+\t\t\t\t     m_pref_e_it, true))\n+\t    return leftmost_descendant();\n+\t  return rightmost_descendant();\n+\t}\n+\n+      size_type i = get_pref_pos(b_it, e_it, p_traits);\n+      _GLIBCXX_DEBUG_ASSERT(i < arr_size);\n+\n+      if (m_a_p_children[i] != 0)\n+\treturn m_a_p_children[i];\n+\n+      while (++i < arr_size)\n+\tif (m_a_p_children[i] != 0)\n+\t  {\n+\t    const node_type& __nt = m_a_p_children[i]->m_type;\n+\t    node_pointer ret = m_a_p_children[i];\n+\n+\t    if (__nt == leaf_node)\n+\t      return ret;\n+\n+\t    _GLIBCXX_DEBUG_ASSERT(__nt == i_node);\n+\t    inode_pointer inp = static_cast<inode_pointer>(ret);\n+\t    return inp->leftmost_descendant();\n+\t  }\n+\n+      return rightmost_descendant();\n+    }\n+\n+    PB_DS_CLASS_T_DEC\n+    inline typename PB_DS_CLASS_C_DEC::node_pointer\n+    PB_DS_CLASS_C_DEC::\n+    add_child(node_pointer p_nd, a_const_iterator b_it, a_const_iterator e_it,\n+\t      a_const_pointer p_traits)\n+    {\n+      const size_type i = get_pref_pos(b_it, e_it, p_traits);\n+      _GLIBCXX_DEBUG_ASSERT(i < arr_size);\n+      if (m_a_p_children[i] == 0)\n+\t{\n+\t  m_a_p_children[i] = p_nd;\n+\t  p_nd->m_p_parent = this;\n+\t  return p_nd;\n+\t}\n+      return m_a_p_children[i];\n+    }\n+\n+    PB_DS_CLASS_T_DEC\n+    typename PB_DS_CLASS_C_DEC::node_const_pointer\n+    PB_DS_CLASS_C_DEC::\n+    get_join_child(node_const_pointer p_nd,\n+\t\t   a_const_pointer p_tr) const\n+    {\n+      node_pointer p = const_cast<node_pointer>(p_nd);\n+      return const_cast<inode_pointer>(this)->get_join_child(p, p_tr);\n+    }\n+\n+    PB_DS_CLASS_T_DEC\n+    typename PB_DS_CLASS_C_DEC::node_pointer\n+    PB_DS_CLASS_C_DEC::\n+    get_join_child(node_pointer p_nd, a_const_pointer p_traits)\n+    {\n+      size_type i;\n+      a_const_iterator b_it;\n+      a_const_iterator e_it;\n+      if (p_nd->m_type == leaf_node)\n+\t{\n+\t  leaf_const_pointer p = static_cast<leaf_const_pointer>(p_nd);\n+\n+\t  typedef typename type_traits::key_const_reference kcr;\n+\t  kcr r_key = access_traits::extract_key(p->value());\n+\t  b_it = p_traits->begin(r_key);\n+\t  e_it = p_traits->end(r_key);\n+\t}\n+      else\n+\t{\n+\t  b_it = static_cast<inode_pointer>(p_nd)->pref_b_it();\n+\t  e_it = static_cast<inode_pointer>(p_nd)->pref_e_it();\n+\t}\n+      i = get_pref_pos(b_it, e_it, p_traits);\n+      _GLIBCXX_DEBUG_ASSERT(i < arr_size);\n+      return m_a_p_children[i];\n+    }\n+\n+    PB_DS_CLASS_T_DEC\n+    void\n+    PB_DS_CLASS_C_DEC::\n+    remove_child(node_pointer p_nd)\n+    {\n+      size_type i = 0;\n+      for (; i < arr_size; ++i)\n+\tif (m_a_p_children[i] == p_nd)\n+\t  {\n+\t    m_a_p_children[i] = 0;\n+\t    return;\n+\t  }\n+      _GLIBCXX_DEBUG_ASSERT(i != arr_size);\n+    }\n+\n+    PB_DS_CLASS_T_DEC\n+    void\n+    PB_DS_CLASS_C_DEC::\n+    remove_child(iterator it)\n+    { *it.m_p_p_cur = 0; }\n+\n+    PB_DS_CLASS_T_DEC\n+    void\n+    PB_DS_CLASS_C_DEC::\n+    replace_child(node_pointer p_nd, a_const_iterator b_it,\n+\t\t  a_const_iterator e_it,\n+\t\t  a_const_pointer p_traits)\n+    {\n+      const size_type i = get_pref_pos(b_it, e_it, p_traits);\n+      _GLIBCXX_DEBUG_ASSERT(i < arr_size);\n+      m_a_p_children[i] = p_nd;\n+      p_nd->m_p_parent = this;\n+    }\n+\n+    PB_DS_CLASS_T_DEC\n+    inline typename PB_DS_CLASS_C_DEC::a_const_iterator\n+    PB_DS_CLASS_C_DEC::\n+    pref_b_it() const\n+    { return m_pref_b_it; }\n+\n+    PB_DS_CLASS_T_DEC\n+    inline typename PB_DS_CLASS_C_DEC::a_const_iterator\n+    PB_DS_CLASS_C_DEC::\n+    pref_e_it() const\n+    { return m_pref_e_it; }\n+\n+    PB_DS_CLASS_T_DEC\n+    bool\n+    PB_DS_CLASS_C_DEC::\n+    should_be_mine(a_const_iterator b_it, a_const_iterator e_it,\n+\t\t   size_type checked_ind,\n+\t\t   a_const_pointer p_traits) const\n+    {\n+      if (m_e_ind == 0)\n+\treturn true;\n+\n+      const size_type num_es = std::distance(b_it, e_it);\n+      if (num_es < m_e_ind)\n+\treturn false;\n+\n+      a_const_iterator key_b_it = b_it;\n+      std::advance(key_b_it, checked_ind);\n+      a_const_iterator key_e_it = b_it;\n+      std::advance(key_e_it, m_e_ind);\n+\n+      a_const_iterator value_b_it = m_pref_b_it;\n+      std::advance(value_b_it, checked_ind);\n+      a_const_iterator value_e_it = m_pref_b_it;\n+      std::advance(value_e_it, m_e_ind);\n+\n+      return p_traits->equal_prefixes(key_b_it, key_e_it, value_b_it,\n+\t\t\t\t      value_e_it);\n+    }\n+\n+    PB_DS_CLASS_T_DEC\n+    typename PB_DS_CLASS_C_DEC::leaf_pointer\n+    PB_DS_CLASS_C_DEC::\n+    leftmost_descendant()\n+    {\n+      node_pointer p_pot = *begin();\n+      if (p_pot->m_type == leaf_node)\n+\treturn (static_cast<leaf_pointer>(p_pot));\n+      _GLIBCXX_DEBUG_ASSERT(p_pot->m_type == i_node);\n+      return static_cast<inode_pointer>(p_pot)->leftmost_descendant();\n+    }\n+\n+    PB_DS_CLASS_T_DEC\n+    typename PB_DS_CLASS_C_DEC::leaf_const_pointer\n+    PB_DS_CLASS_C_DEC::\n+    leftmost_descendant() const\n+    { return const_cast<inode_pointer>(this)->leftmost_descendant(); }\n+\n+    PB_DS_CLASS_T_DEC\n+    typename PB_DS_CLASS_C_DEC::leaf_pointer\n+    PB_DS_CLASS_C_DEC::\n+    rightmost_descendant()\n+    {\n+      const size_type num_children = std::distance(begin(), end());\n+      _GLIBCXX_DEBUG_ASSERT(num_children >= 2);\n+\n+      iterator it = begin();\n+      std::advance(it, num_children - 1);\n+      node_pointer p_pot =* it;\n+      if (p_pot->m_type == leaf_node)\n+\treturn static_cast<leaf_pointer>(p_pot);\n+      _GLIBCXX_DEBUG_ASSERT(p_pot->m_type == i_node);\n+      return static_cast<inode_pointer>(p_pot)->rightmost_descendant();\n+    }\n+\n+    PB_DS_CLASS_T_DEC\n+    typename PB_DS_CLASS_C_DEC::leaf_const_pointer\n+    PB_DS_CLASS_C_DEC::\n+    rightmost_descendant() const\n+    { return const_cast<inode_pointer>(this)->rightmost_descendant(); }\n+\n+    PB_DS_CLASS_T_DEC\n+    typename PB_DS_CLASS_C_DEC::size_type\n+    PB_DS_CLASS_C_DEC::\n+    get_begin_pos() const\n+    {\n+      size_type i = 0;\n+      for (i; i < arr_size && m_a_p_children[i] == 0; ++i)\n+\t;\n+      return i;\n+    }\n+\n+#ifdef _GLIBCXX_DEBUG\n+    PB_DS_CLASS_T_DEC\n+    typename PB_DS_CLASS_C_DEC::node_debug_info\n+    PB_DS_CLASS_C_DEC::\n+    assert_valid_imp(a_const_pointer p_traits,\n+\t\t     const char* __file, int __line) const\n+    {\n+      PB_DS_DEBUG_VERIFY(base_type::m_type == i_node);\n+      PB_DS_DEBUG_VERIFY(static_cast<size_type>(std::distance(pref_b_it(), pref_e_it())) == m_e_ind);\n+      PB_DS_DEBUG_VERIFY(std::distance(begin(), end()) >= 2);\n+\n+      for (typename _Inode::const_iterator it = begin(); it != end(); ++it)\n+\t{\n+\t  node_const_pointer p_nd = *it;\n+\t  PB_DS_DEBUG_VERIFY(p_nd->m_p_parent == this);\n+\t  node_debug_info child_ret = p_nd->assert_valid_imp(p_traits,\n+\t\t\t\t\t\t\t     __file, __line);\n+\n+\t  PB_DS_DEBUG_VERIFY(static_cast<size_type>(std::distance(child_ret.first, child_ret.second)) >= m_e_ind);\n+\t  PB_DS_DEBUG_VERIFY(should_be_mine(child_ret.first, child_ret.second, 0, p_traits));\n+\t  PB_DS_DEBUG_VERIFY(get_pref_pos(child_ret.first, child_ret.second, p_traits) == static_cast<size_type>(it.m_p_p_cur - m_a_p_children));\n+\t}\n+      return std::make_pair(pref_b_it(), pref_e_it());\n+    }\n+#endif\n+\n+#undef PB_DS_CLASS_T_DEC\n+#undef PB_DS_CLASS_C_DEC\n+  } // namespace detail\n+} // namespace __gnu_pbds\n+\n+#endif"}, {"sha": "a3e15062b3e7e148b25dfc6738d92cd22c27ce5f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/point_iterators.hpp", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpoint_iterators.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpoint_iterators.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpoint_iterators.hpp?ref=ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c"}, {"sha": "0afc2d40a60c1a78edee463e41fdfb85c3cd5285", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/policy_access_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpolicy_access_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpolicy_access_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpolicy_access_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "6a5582da2559837a3bcc4971f743ac24f5788391", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/r_erase_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fr_erase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fr_erase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fr_erase_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "683b3a9087c9dfc64aff606ababb1af8c6154540", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/rotate_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Frotate_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Frotate_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Frotate_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "c2aa9cde821eb2d9ef82cc230871810c2f3d9502", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/split_fn_imps.hpp", "status": "modified", "additions": 78, "deletions": 82, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "9cecae51770e8ebe0529dc3e0a40b57948a20cbb", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/split_join_branch_bag.hpp", "status": "removed", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_join_branch_bag.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_join_branch_bag.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_join_branch_bag.hpp?ref=ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c"}, {"sha": "7cce3c530ff9da1215fc41d3495db67506be0e57", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/synth_access_traits.hpp", "status": "renamed", "additions": 69, "deletions": 80, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsynth_access_traits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsynth_access_traits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsynth_access_traits.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "previous_filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/synth_e_access_traits.hpp"}, {"sha": "c8b54547fc89c6a8ce44b33fa7e22ad705f783be", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/trace_fn_imps.hpp", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ftrace_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ftrace_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ftrace_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "2e64c52480f303b96e93a19d767274f9049644dd", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/traits.hpp", "status": "modified", "additions": 58, "deletions": 270, "changes": 328, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ftraits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ftraits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ftraits.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "12ef07bd6078fb3e15b10fdc12090aa4b1662965", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/update_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fupdate_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fupdate_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fupdate_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "739d2b18bf628ea4760d4ecce195e2818bc38e3c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/priority_queue_base_dispatch.hpp", "status": "modified", "additions": 36, "deletions": 25, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpriority_queue_base_dispatch.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpriority_queue_base_dispatch.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpriority_queue_base_dispatch.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "669c00c29b8414f19d11fc14b8ce5a550a41e4fa", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fconstructors_destructor_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "40961edf81f21b9ae92704cf3da96eb6f684ed01", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/debug_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fdebug_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "14e75328970f1c88e2e24b2c17043ae6b63cfbf2", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/erase_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ferase_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "9203dd4d7a652d581ad2999bfb8f17a49a327eeb", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/find_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ffind_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "0903e211427b64b5c8b5aa5097df57c20f62855a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/info_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Finfo_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "97dc8489ab1ae6e9c6e6dcc89c5f1998ba9dabfb", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/insert_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Finsert_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "b6f80b2b1307221f957fbc344462bd6f4867f718", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/node.hpp", "status": "modified", "additions": 34, "deletions": 33, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fnode.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fnode.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fnode.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "a0e374b350ca0418971466367032e775a37cf4e6", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/rb_tree_.hpp", "status": "modified", "additions": 64, "deletions": 102, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Frb_tree_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Frb_tree_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Frb_tree_.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "54c7b2396d7f1caac270487ff8d96dfb1fbd357f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/split_join_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fsplit_join_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "e6f2d8974ffeb60e44f4ab9b109df0d8204da4fe", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/traits.hpp", "status": "modified", "additions": 31, "deletions": 55, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ftraits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ftraits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ftraits.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "5c9c05f2f10a0501bcf844f058836e8537b1576d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rc_binomial_heap_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fconstructors_destructor_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "b7a1b58fe8da277f99a29b17cfdc6cf3fa1f5247", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rc_binomial_heap_/debug_fn_imps.hpp", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fdebug_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "a8c619e5a1cd6b3e1845d20e25b504efd49fd389", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rc_binomial_heap_/erase_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Ferase_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "aae0a72c97c1ebfa49319c54f665b33bd03f47fc", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rc_binomial_heap_/insert_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Finsert_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "ea27c47ba6ba5df9f9748dac98d2d36d53f11b46", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rc_binomial_heap_/rc.hpp", "status": "modified", "additions": 56, "deletions": 78, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Frc.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Frc.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Frc.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "e4d6704910878d118a82b543ca40d8eddf229d1a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rc_binomial_heap_/rc_binomial_heap_.hpp", "status": "modified", "additions": 48, "deletions": 76, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Frc_binomial_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Frc_binomial_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Frc_binomial_heap_.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "13bf78e51fdd218d3468cddfcd3401f9be0b3062", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rc_binomial_heap_/split_join_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fsplit_join_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "27b5bc4b97df93e4142f008454e35856f68602d3", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rc_binomial_heap_/trace_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Ftrace_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Ftrace_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Ftrace_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "97533a34e457dfa42792c65ec213b2985125404e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/sample_resize_policy.hpp", "status": "modified", "additions": 81, "deletions": 81, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_resize_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_resize_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_resize_policy.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "ebc28b7cbc7e9f8eb2cce2fcf2d145a853f0a8f5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/sample_resize_trigger.hpp", "status": "modified", "additions": 92, "deletions": 93, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_resize_trigger.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_resize_trigger.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_resize_trigger.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "b6c49aea69dfe709f531d24430184e9786a0ddc7", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/sample_size_policy.hpp", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_size_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_size_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fsample_size_policy.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "2383e9625528c1788749c46c77b480a93fff29d6", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fconstructors_destructor_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "e6a4694b291bfffbe86440dc29cf9ba3dcf0f6cc", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/debug_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fdebug_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "9546321e6f0e0fb2d29d4e7c39b6d845c64a7e12", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/erase_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ferase_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "6e1a4ef06e29b95f5801bf57dddcfd016ee6b67a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/find_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ffind_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "8996903b016dda3bcfb201ea5e9ee5fcac912677", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/info_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Finfo_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "2f895b5bffa139205b4f696c45944f2be2d4d751", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/insert_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Finsert_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "111976d550018fe7f45c7e46be335b437a49b5e6", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/node.hpp", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fnode.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fnode.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fnode.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "035684509415a8068edebf539e5982e4ae66909a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/splay_fn_imps.hpp", "status": "modified", "additions": 30, "deletions": 32, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "4d67dba4d8597a040b15b79de12d162e5846c127", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/splay_tree_.hpp", "status": "modified", "additions": 63, "deletions": 97, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_tree_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_tree_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_tree_.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "1fcfe7980507ec036188887432830da93f6360ad", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/split_join_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplit_join_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "e5020ec92f0f925b41ff8b237814cc8bf9062da5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/traits.hpp", "status": "modified", "additions": 31, "deletions": 51, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ftraits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ftraits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ftraits.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "cdb09d451d48dcff6da9da9fe88794a6b5b97026", "filename": "libstdc++-v3/include/ext/pb_ds/detail/standard_policies.hpp", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fstandard_policies.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fstandard_policies.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fstandard_policies.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "fe0b983265f4c43d0dab7143f29fccece709c97e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fconstructors_destructor_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "3eb8541429103cc2e20cafce83eeed12f3756591", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/debug_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fdebug_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "11b7d773f9b9957063b6735acaa6f1fcc10077fc", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/erase_fn_imps.hpp", "status": "modified", "additions": 7, "deletions": 51, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Ferase_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "d0ba860ed4fcf056b3231c89da33f0888634eac9", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/find_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Ffind_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "67b7f3a3a1a773972bb112610e16b17ce397e4a2", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/insert_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 50, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Finsert_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "279cf6611eb8cee95bce1333c96527f8152d235e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/split_join_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fsplit_join_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "fb30eb1b774723f5b7f537902914372b0f542fc3", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/thin_heap_.hpp", "status": "modified", "additions": 73, "deletions": 112, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fthin_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fthin_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fthin_heap_.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "63a356414d15989cfde29d97709b2c2eed1dd987", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/trace_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Ftrace_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Ftrace_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Ftrace_fn_imps.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "1279b4dca495ed974d5e1ef4735edb73e1bef2a1", "filename": "libstdc++-v3/include/ext/pb_ds/detail/tree_policy/node_metadata_selector.hpp", "status": "modified", "additions": 32, "deletions": 53, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_policy%2Fnode_metadata_selector.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_policy%2Fnode_metadata_selector.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_policy%2Fnode_metadata_selector.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "006a3eb04763639e428048102ae9765029570d70", "filename": "libstdc++-v3/include/ext/pb_ds/detail/tree_policy/null_node_update_imp.hpp", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_policy%2Fnull_node_update_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_policy%2Fnull_node_update_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_policy%2Fnull_node_update_imp.hpp?ref=ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c"}, {"sha": "84397f3dffcee7f83bdaf114057eb6be5bea1b48", "filename": "libstdc++-v3/include/ext/pb_ds/detail/tree_policy/order_statistics_imp.hpp", "status": "modified", "additions": 19, "deletions": 39, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_policy%2Forder_statistics_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_policy%2Forder_statistics_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_policy%2Forder_statistics_imp.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "cb455da42d6436c133e330685fb7180981294b2b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/tree_policy/sample_tree_node_update.hpp", "status": "modified", "additions": 18, "deletions": 28, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_policy%2Fsample_tree_node_update.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_policy%2Fsample_tree_node_update.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_policy%2Fsample_tree_node_update.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "78cee8680433f8e679c259a3f0e989f3814239fe", "filename": "libstdc++-v3/include/ext/pb_ds/detail/tree_trace_base.hpp", "status": "modified", "additions": 42, "deletions": 72, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_trace_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_trace_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_trace_base.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "b20181b8aef9f89ca861d1024803fc652054b7f3", "filename": "libstdc++-v3/include/ext/pb_ds/detail/trie_policy/node_metadata_selector.hpp", "status": "modified", "additions": 32, "deletions": 53, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fnode_metadata_selector.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fnode_metadata_selector.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fnode_metadata_selector.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "65245e9dc9914bb3fb09033b9f9c06b49bff9daa", "filename": "libstdc++-v3/include/ext/pb_ds/detail/trie_policy/null_node_update_imp.hpp", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fnull_node_update_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fnull_node_update_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fnull_node_update_imp.hpp?ref=ab015ce4ccd3b8394d1ff55a233a9ac3b5f0702c"}, {"sha": "ff9595e94a04a92e64436be030157e66129ffcbe", "filename": "libstdc++-v3/include/ext/pb_ds/detail/trie_policy/order_statistics_imp.hpp", "status": "modified", "additions": 36, "deletions": 57, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Forder_statistics_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Forder_statistics_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Forder_statistics_imp.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "04771dd725e995a3ea8af50a67a135ccf30d46ae", "filename": "libstdc++-v3/include/ext/pb_ds/detail/trie_policy/prefix_search_node_update_imp.hpp", "status": "modified", "additions": 25, "deletions": 37, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fprefix_search_node_update_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fprefix_search_node_update_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fprefix_search_node_update_imp.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "59edfbb5760224fc23dd87f84a2431ac3ae0ff3a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/trie_policy/sample_trie_access_traits.hpp", "status": "renamed", "additions": 33, "deletions": 45, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fsample_trie_access_traits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fsample_trie_access_traits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fsample_trie_access_traits.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "previous_filename": "libstdc++-v3/include/ext/pb_ds/detail/trie_policy/sample_trie_e_access_traits.hpp"}, {"sha": "6c97aee052a68e286410b2ff4f40b04219de7897", "filename": "libstdc++-v3/include/ext/pb_ds/detail/trie_policy/sample_trie_node_update.hpp", "status": "modified", "additions": 20, "deletions": 28, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fsample_trie_node_update.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fsample_trie_node_update.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fsample_trie_node_update.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "2668a87d9226134ee9b3e3d8a0bb018ea1228868", "filename": "libstdc++-v3/include/ext/pb_ds/detail/trie_policy/trie_policy_base.hpp", "status": "modified", "additions": 57, "deletions": 99, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Ftrie_policy_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Ftrie_policy_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Ftrie_policy_base.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "c6d9c4901368dd842791bea43a495355445d2c80", "filename": "libstdc++-v3/include/ext/pb_ds/detail/trie_policy/trie_string_access_traits_imp.hpp", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Ftrie_string_access_traits_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Ftrie_string_access_traits_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Ftrie_string_access_traits_imp.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "previous_filename": "libstdc++-v3/include/ext/pb_ds/detail/trie_policy/string_trie_e_access_traits_imp.hpp"}, {"sha": "79899857b0de9337d82709a7c8623cd93d229413", "filename": "libstdc++-v3/include/ext/pb_ds/detail/type_utils.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftype_utils.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftype_utils.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftype_utils.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "50db9b2bc90b403ad579669a1fa48836190c54b7", "filename": "libstdc++-v3/include/ext/pb_ds/detail/types_traits.hpp", "status": "modified", "additions": 235, "deletions": 29, "changes": 264, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypes_traits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypes_traits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypes_traits.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "d1221413c6693285bbd77190e8914954baaaaa07", "filename": "libstdc++-v3/include/ext/pb_ds/detail/unordered_iterator/const_iterator.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fconst_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fconst_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fconst_iterator.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "52b90a511e0d759ac8245ed2aa12103b50c28154", "filename": "libstdc++-v3/include/ext/pb_ds/detail/unordered_iterator/iterator.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fiterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fiterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fiterator.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "257067a89520575d672ac201055b76c2a8845036", "filename": "libstdc++-v3/include/ext/pb_ds/detail/unordered_iterator/point_const_iterator.hpp", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fpoint_const_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fpoint_const_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fpoint_const_iterator.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453", "previous_filename": "libstdc++-v3/include/ext/pb_ds/detail/unordered_iterator/const_point_iterator.hpp"}, {"sha": "f74f03d7a483b1e88835eb763838b50536fe733f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/unordered_iterator/point_iterator.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fpoint_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fpoint_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fpoint_iterator.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "1fa9303510916c99ee27556bea9c9206170e4e43", "filename": "libstdc++-v3/include/ext/pb_ds/hash_policy.hpp", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fhash_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fhash_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fhash_policy.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "e879b8088c9034a6e11de17e78fc81d94cadec05", "filename": "libstdc++-v3/include/ext/pb_ds/list_update_policy.hpp", "status": "modified", "additions": 78, "deletions": 88, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Flist_update_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Flist_update_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Flist_update_policy.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "8cd7a26db6a1e173658d9e2e905fc56aafa7344b", "filename": "libstdc++-v3/include/ext/pb_ds/priority_queue.hpp", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fpriority_queue.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fpriority_queue.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fpriority_queue.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}, {"sha": "d5df54f58770145700756a85f2a4484a2b8367b4", "filename": "libstdc++-v3/include/ext/pb_ds/tag_and_trait.hpp", "status": "modified", "additions": 186, "deletions": 107, "changes": 293, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftag_and_trait.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a345e45d144c0e83aed85b6d29f64af3d21b4453/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftag_and_trait.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftag_and_trait.hpp?ref=a345e45d144c0e83aed85b6d29f64af3d21b4453"}]}