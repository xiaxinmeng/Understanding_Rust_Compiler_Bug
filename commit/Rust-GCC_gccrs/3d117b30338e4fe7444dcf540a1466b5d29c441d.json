{"sha": "3d117b30338e4fe7444dcf540a1466b5d29c441d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QxMTdiMzAzMzhlNGZlNzQ0NGRjZjU0MGExNDY2YjVkMjljNDQxZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-03-12T15:31:51Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-03-12T15:31:51Z"}, "message": "i386.c: Commit forgotten hunk in previous patch.\n\n\t* i386.c: Commit forgotten hunk in previous patch.\n\t(regclass_map): Add extended registers.\n\t(dbx_register_map): Add missing frame register.\n\nFrom-SVN: r40413", "tree": {"sha": "8f9e11f79e75b488db51ef67f683669a2347b24b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f9e11f79e75b488db51ef67f683669a2347b24b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d117b30338e4fe7444dcf540a1466b5d29c441d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d117b30338e4fe7444dcf540a1466b5d29c441d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d117b30338e4fe7444dcf540a1466b5d29c441d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d117b30338e4fe7444dcf540a1466b5d29c441d/comments", "author": null, "committer": null, "parents": [{"sha": "1e07edd31518c5fc5226d874f9d0d144dfbaa429", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e07edd31518c5fc5226d874f9d0d144dfbaa429", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e07edd31518c5fc5226d874f9d0d144dfbaa429"}], "stats": {"total": 56, "additions": 32, "deletions": 24}, "files": [{"sha": "07ce6e539e1914289f84d3a32e0cbfb0e53127d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d117b30338e4fe7444dcf540a1466b5d29c441d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d117b30338e4fe7444dcf540a1466b5d29c441d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d117b30338e4fe7444dcf540a1466b5d29c441d", "patch": "@@ -1,3 +1,9 @@\n+Mon Mar 12 16:27:56 CET 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.c: Commit forgotten hunk in previous patch.\n+\t(regclass_map): Add extended registers.\n+\t(dbx_register_map): Add missing frame register.\n+\n Mon Mar 12 15:41:08 CET 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.md (all XFmode patterns except swapxf): Disable for 64bit."}, {"sha": "70fd21d384a2804e54ab4ee920531a14775dcf95", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d117b30338e4fe7444dcf540a1466b5d29c441d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d117b30338e4fe7444dcf540a1466b5d29c441d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3d117b30338e4fe7444dcf540a1466b5d29c441d", "patch": "@@ -339,18 +339,24 @@ enum reg_class const regclass_map[FIRST_PSEUDO_REGISTER] =\n   SSE_REGS, SSE_REGS, SSE_REGS, SSE_REGS, SSE_REGS, SSE_REGS,\n   SSE_REGS, SSE_REGS,\n   MMX_REGS, MMX_REGS, MMX_REGS, MMX_REGS, MMX_REGS, MMX_REGS,\n-  MMX_REGS, MMX_REGS\n+  MMX_REGS, MMX_REGS,\n+  NON_Q_REGS, NON_Q_REGS, NON_Q_REGS, NON_Q_REGS,\n+  NON_Q_REGS, NON_Q_REGS, NON_Q_REGS, NON_Q_REGS,\n+  SSE_REGS, SSE_REGS, SSE_REGS, SSE_REGS, SSE_REGS, SSE_REGS,\n+  SSE_REGS, SSE_REGS,\n };\n \n-/* The \"default\" register map.  */\n+/* The \"default\" register map used in 32bit mode.  */\n \n int const dbx_register_map[FIRST_PSEUDO_REGISTER] =\n {\n   0, 2, 1, 3, 6, 7, 4, 5,\t\t/* general regs */\n   12, 13, 14, 15, 16, 17, 18, 19,\t/* fp regs */\n-  -1, -1, -1, -1,\t\t\t/* arg, flags, fpsr, dir */\n+  -1, -1, -1, -1, -1,\t\t\t/* arg, flags, fpsr, dir, frame */\n   21, 22, 23, 24, 25, 26, 27, 28,\t/* SSE */\n   29, 30, 31, 32, 33, 34, 35, 36,       /* MMX */\n+  -1, -1, -1, -1, -1, -1, -1, -1,\t/* extended integer registers */\n+  -1, -1, -1, -1, -1, -1, -1, -1,\t/* extended SSE registers */\n };\n \n /* The \"default\" register map used in 64bit mode.  */"}, {"sha": "19f91d2a514d7fee7f8c81083721d9aa5fff3a78", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d117b30338e4fe7444dcf540a1466b5d29c441d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d117b30338e4fe7444dcf540a1466b5d29c441d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3d117b30338e4fe7444dcf540a1466b5d29c441d", "patch": "@@ -4021,7 +4021,7 @@\n   [(set_attr \"type\" \"fmov,multi\")\n    (set_attr \"mode\" \"DF\")])\n \n-(define_insn \"*truncxfdf2_2\"\n+(define_insn \"*trunctfdf2_2\"\n   [(set (match_operand:DF 0 \"memory_operand\" \"=m\")\n \t(float_truncate:DF\n \t  (match_operand:TF 1 \"register_operand\" \"f\")))]\n@@ -7955,18 +7955,19 @@\n ;; than 31.\n \n (define_expand \"ashldi3\"\n-  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t\t   (ashift:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-\t\t\t      (match_operand:QI 2 \"nonmemory_operand\" \"Jc\")))\n+  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t\t   (ashift:DI (match_operand:DI 1 \"register_operand\" \"\")\n+\t\t\t      (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n \t      (clobber (reg:CC 17))])]\n   \"\"\n   \"\n {\n-  if (TARGET_CMOVE && ! immediate_operand (operands[2], QImode))\n+  if (!TARGET_64BIT && TARGET_CMOVE && ! immediate_operand (operands[2], QImode))\n     {\n       emit_insn (gen_ashldi3_1 (operands[0], operands[1], operands[2]));\n       DONE;\n     }\n+  ix86_expand_binary_operator (ASHIFT, DImode, operands); DONE;\n }\")\n \n (define_insn \"ashldi3_1\"\n@@ -8096,12 +8097,7 @@\n       return \\\"add{l}\\\\t{%0, %0|%0, %0}\\\";\n \n     case TYPE_LEA:\n-      if (GET_CODE (operands[2]) != CONST_INT\n-\t  || (unsigned HOST_WIDE_INT) INTVAL (operands[2]) > 3)\n-\tabort ();\n-      operands[1] = gen_rtx_MULT (SImode, operands[1],\n-\t\t\t\t  GEN_INT (1 << INTVAL (operands[2])));\n-      return \\\"lea{l}\\\\t{%a1, %0|%0, %a1}\\\";\n+      return \\\"#\\\";\n \n     default:\n       if (REG_P (operands[2]))\n@@ -8694,7 +8690,7 @@\n   \"sar{w}\\\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length\") \n-     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+     (if_then_else (match_operand 0 \"register_operand\" \"\") \n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -8727,7 +8723,7 @@\n   \"sar{w}\\\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length\") \n-     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+     (if_then_else (match_operand 0 \"register_operand\" \"\") \n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -8766,7 +8762,7 @@\n   \"sar{b}\\\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length\") \n-     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+     (if_then_else (match_operand 0 \"register_operand\" \"\") \n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -8799,7 +8795,7 @@\n   \"sar{b}\\\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length\") \n-     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+     (if_then_else (match_operand 0 \"register_operand\" \"\") \n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -8967,7 +8963,7 @@\n   \"shr{w}\\\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length\") \n-     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+     (if_then_else (match_operand 0 \"register_operand\" \"\") \n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -9039,7 +9035,7 @@\n   \"shr{b}\\\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length\") \n-     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+     (if_then_else (match_operand 0 \"register_operand\" \"\") \n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -9147,7 +9143,7 @@\n   \"rol{w}\\\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length\") \n-     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+     (if_then_else (match_operand 0 \"register_operand\" \"\") \n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -9181,7 +9177,7 @@\n   \"rol{b}\\\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length\") \n-     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+     (if_then_else (match_operand 0 \"register_operand\" \"\") \n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -9249,7 +9245,7 @@\n   \"ror{w}\\\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length\") \n-     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+     (if_then_else (match_operand 0 \"register_operand\" \"\") \n \t(const_string \"2\")\n \t(const_string \"*\")))])\n \n@@ -9283,7 +9279,7 @@\n   \"ror{b}\\\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length\") \n-     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+     (if_then_else (match_operand 0 \"register_operand\" \"\") \n \t(const_string \"2\")\n \t(const_string \"*\")))])\n "}]}