{"sha": "f49278e65eb8259aa7c0703a32553f0ebc133047", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ5Mjc4ZTY1ZWI4MjU5YWE3YzA3MDNhMzI1NTNmMGViYzEzMzA0Nw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2012-06-19T21:08:03Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2012-06-19T21:08:03Z"}, "message": "Set cache parameters for alpha\n\nFrom-SVN: r188794", "tree": {"sha": "c573400a1d0a506806c8e246d40428939ef46b90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c573400a1d0a506806c8e246d40428939ef46b90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f49278e65eb8259aa7c0703a32553f0ebc133047", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f49278e65eb8259aa7c0703a32553f0ebc133047", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f49278e65eb8259aa7c0703a32553f0ebc133047", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f49278e65eb8259aa7c0703a32553f0ebc133047/comments", "author": null, "committer": null, "parents": [{"sha": "70f42967b3b48d63a8e90bd19b4277a64d6ccd21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70f42967b3b48d63a8e90bd19b4277a64d6ccd21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70f42967b3b48d63a8e90bd19b4277a64d6ccd21"}], "stats": {"total": 76, "additions": 59, "deletions": 17}, "files": [{"sha": "2c8eb9e930dba378fea42c4776f81ae5f9345796", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f49278e65eb8259aa7c0703a32553f0ebc133047/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f49278e65eb8259aa7c0703a32553f0ebc133047/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f49278e65eb8259aa7c0703a32553f0ebc133047", "patch": "@@ -1,3 +1,9 @@\n+2012-06-19  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c: Include params.h.\n+\t(alpha_option_override): Initialize PARAM_L1_CACHE_LINE_SIZE,\n+\tPARAM_L1_CACHE_SIZE, PARAM_L2_CACHE_SIZE for the cpu tuning.\n+\n 2012-06-19  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* doc/tm.texi.in (TARGET_OBJC_DECLARE_UNRESOLVED_CLASS_REFERENCE,"}, {"sha": "374986674daa62b951151f9f666fa5d55f96c6e4", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 53, "deletions": 17, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f49278e65eb8259aa7c0703a32553f0ebc133047/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f49278e65eb8259aa7c0703a32553f0ebc133047/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=f49278e65eb8259aa7c0703a32553f0ebc133047", "patch": "@@ -57,6 +57,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"df.h\"\n #include \"libfuncs.h\"\n #include \"opts.h\"\n+#include \"params.h\"\n \n /* Specify which cpu to schedule for.  */\n enum processor_type alpha_tune;\n@@ -224,24 +225,40 @@ alpha_option_override (void)\n     const char *const name;\n     const enum processor_type processor;\n     const int flags;\n+    const unsigned short line_size; /* in bytes */\n+    const unsigned short l1_size;   /* in kb.  */\n+    const unsigned short l2_size;   /* in kb.  */\n   } cpu_table[] = {\n-    { \"ev4\",\tPROCESSOR_EV4, 0 },\n-    { \"ev45\",\tPROCESSOR_EV4, 0 },\n-    { \"21064\",\tPROCESSOR_EV4, 0 },\n-    { \"ev5\",\tPROCESSOR_EV5, 0 },\n-    { \"21164\",\tPROCESSOR_EV5, 0 },\n-    { \"ev56\",\tPROCESSOR_EV5, MASK_BWX },\n-    { \"21164a\",\tPROCESSOR_EV5, MASK_BWX },\n-    { \"pca56\",\tPROCESSOR_EV5, MASK_BWX|MASK_MAX },\n-    { \"21164PC\",PROCESSOR_EV5, MASK_BWX|MASK_MAX },\n-    { \"21164pc\",PROCESSOR_EV5, MASK_BWX|MASK_MAX },\n-    { \"ev6\",\tPROCESSOR_EV6, MASK_BWX|MASK_MAX|MASK_FIX },\n-    { \"21264\",\tPROCESSOR_EV6, MASK_BWX|MASK_MAX|MASK_FIX },\n-    { \"ev67\",\tPROCESSOR_EV6, MASK_BWX|MASK_MAX|MASK_FIX|MASK_CIX },\n-    { \"21264a\",\tPROCESSOR_EV6, MASK_BWX|MASK_MAX|MASK_FIX|MASK_CIX }\n+    /* EV4/LCA45 had 8k L1 caches; EV45 had 16k L1 caches.\n+       EV4/EV45 had 128k to 16M 32-byte direct Bcache.  LCA45\n+       had 64k to 8M 8-byte direct Bcache.  */\n+    { \"ev4\",\tPROCESSOR_EV4, 0, 32, 8, 8*1024 },\n+    { \"21064\",\tPROCESSOR_EV4, 0, 32, 8, 8*1024 },\n+    { \"ev45\",\tPROCESSOR_EV4, 0, 32, 16, 16*1024 },\n+\n+    /* EV5 or EV56 had 8k 32 byte L1, 96k 32 or 64 byte L2,\n+       and 1M to 16M 64 byte L3 (not modeled).\n+       PCA56 had 16k 64-byte cache; PCA57 had 32k Icache.\n+       PCA56 had 8k 64-byte cache; PCA57 had 16k Dcache.  */\n+    { \"ev5\",\tPROCESSOR_EV5, 0, 32, 8, 96 },\n+    { \"21164\",\tPROCESSOR_EV5, 0, 32, 8, 96 },\n+    { \"ev56\",\tPROCESSOR_EV5, MASK_BWX, 32, 8, 96 },\n+    { \"21164a\",\tPROCESSOR_EV5, MASK_BWX, 32, 8, 96 },\n+    { \"pca56\",\tPROCESSOR_EV5, MASK_BWX|MASK_MAX, 64, 16, 4*1024 },\n+    { \"21164PC\",PROCESSOR_EV5, MASK_BWX|MASK_MAX, 64, 16, 4*1024 },\n+    { \"21164pc\",PROCESSOR_EV5, MASK_BWX|MASK_MAX, 64, 16, 4*1024 },\n+\n+    /* EV6 had 64k 64 byte L1, 1M to 16M Bcache.  */\n+    { \"ev6\",\tPROCESSOR_EV6, MASK_BWX|MASK_MAX|MASK_FIX, 64, 64, 16*1024 },\n+    { \"21264\",\tPROCESSOR_EV6, MASK_BWX|MASK_MAX|MASK_FIX, 64, 64, 16*1024 },\n+    { \"ev67\",\tPROCESSOR_EV6, MASK_BWX|MASK_MAX|MASK_FIX|MASK_CIX,\n+      64, 64, 16*1024 },\n+    { \"21264a\",\tPROCESSOR_EV6, MASK_BWX|MASK_MAX|MASK_FIX|MASK_CIX,\n+      64, 64, 16*1024 }\n   };\n \n   int const ct_size = ARRAY_SIZE (cpu_table);\n+  int line_size = 0, l1_size = 0, l2_size = 0;\n   int i;\n \n #ifdef SUBTARGET_OVERRIDE_OPTIONS\n@@ -314,9 +331,12 @@ alpha_option_override (void)\n       for (i = 0; i < ct_size; i++)\n \tif (! strcmp (alpha_cpu_string, cpu_table [i].name))\n \t  {\n-\t    alpha_tune = alpha_cpu = cpu_table [i].processor;\n+\t    alpha_tune = alpha_cpu = cpu_table[i].processor;\n+\t    line_size = cpu_table[i].line_size;\n+\t    l1_size = cpu_table[i].l1_size;\n+\t    l2_size = cpu_table[i].l2_size;\n \t    target_flags &= ~ (MASK_BWX | MASK_MAX | MASK_FIX | MASK_CIX);\n-\t    target_flags |= cpu_table [i].flags;\n+\t    target_flags |= cpu_table[i].flags;\n \t    break;\n \t  }\n       if (i == ct_size)\n@@ -328,13 +348,29 @@ alpha_option_override (void)\n       for (i = 0; i < ct_size; i++)\n \tif (! strcmp (alpha_tune_string, cpu_table [i].name))\n \t  {\n-\t    alpha_tune = cpu_table [i].processor;\n+\t    alpha_tune = cpu_table[i].processor;\n+\t    line_size = cpu_table[i].line_size;\n+\t    l1_size = cpu_table[i].l1_size;\n+\t    l2_size = cpu_table[i].l2_size;\n \t    break;\n \t  }\n       if (i == ct_size)\n \terror (\"bad value %qs for -mtune switch\", alpha_tune_string);\n     }\n \n+  if (line_size)\n+    maybe_set_param_value (PARAM_L1_CACHE_LINE_SIZE, line_size,\n+\t\t\t   global_options.x_param_values,\n+\t\t\t   global_options_set.x_param_values);\n+  if (l1_size)\n+    maybe_set_param_value (PARAM_L1_CACHE_SIZE, l1_size,\n+\t\t\t   global_options.x_param_values,\n+\t\t\t   global_options_set.x_param_values);\n+  if (l2_size)\n+    maybe_set_param_value (PARAM_L2_CACHE_SIZE, l2_size,\n+\t\t\t   global_options.x_param_values,\n+\t\t\t   global_options_set.x_param_values);\n+\n   /* Do some sanity checks on the above options.  */\n \n   if ((alpha_fptm == ALPHA_FPTM_SU || alpha_fptm == ALPHA_FPTM_SUI)"}]}