{"sha": "c53e9440603b38c70dcb744a18c463b1452c9b5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUzZTk0NDA2MDNiMzhjNzBkY2I3NDRhMThjNDYzYjE0NTJjOWI1Zg==", "commit": {"author": {"name": "Jan Brittenson", "email": "bson@gnu.org", "date": "1993-09-23T17:15:31Z"}, "committer": {"name": "Jan Brittenson", "email": "bson@gnu.org", "date": "1993-09-23T17:15:31Z"}, "message": "changed bytecode rtx structure references into macros\n\nFrom-SVN: r5437", "tree": {"sha": "5cd42cab1c60a70cc435d1e40efd616da2966265", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cd42cab1c60a70cc435d1e40efd616da2966265"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c53e9440603b38c70dcb744a18c463b1452c9b5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c53e9440603b38c70dcb744a18c463b1452c9b5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c53e9440603b38c70dcb744a18c463b1452c9b5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c53e9440603b38c70dcb744a18c463b1452c9b5f/comments", "author": null, "committer": null, "parents": [{"sha": "45d7f9b9595aa08afd934ad4db311a304093a9d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45d7f9b9595aa08afd934ad4db311a304093a9d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45d7f9b9595aa08afd934ad4db311a304093a9d3"}], "stats": {"total": 43, "additions": 21, "deletions": 22}, "files": [{"sha": "11acaa4468020f607a977b05164921f4556466eb", "filename": "gcc/stmt.c", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c53e9440603b38c70dcb744a18c463b1452c9b5f/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c53e9440603b38c70dcb744a18c463b1452c9b5f/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=c53e9440603b38c70dcb744a18c463b1452c9b5f", "patch": "@@ -640,7 +640,7 @@ expand_label (label)\n     {\n       if (! DECL_RTL (label))\n \tDECL_RTL (label) = bc_gen_rtx ((char *) 0, 0, bc_get_bytecode_label ());\n-      if (! bc_emit_bytecode_labeldef (DECL_RTL (label)->bc_label))\n+      if (! bc_emit_bytecode_labeldef (BYTECODE_BC_LABEL (DECL_RTL (label))))\n \terror (\"multiply defined label\");\n       return;\n     }\n@@ -861,7 +861,7 @@ bc_expand_goto_internal (opcode, label, body)\n \n       for (block = block_stack; block; block = block->next)\n \t{\n-\t  if (block->data.block.first_insn->uid < label->uid)\n+\t  if (BYTECODE_BC_LABEL (block->data.block.first_insn)->uid < label->uid)\n \t    break;\n \t  if (block->data.block.bc_stack_level)\n \t    stack_level = block->data.block.bc_stack_level;\n@@ -2253,7 +2253,7 @@ bc_expand_start_cond (cond, exitflag)\n   thiscond->data.case_stmt.nominal_type = cond;\n   bc_expand_expr (cond);\n   bc_emit_bytecode (jumpifnot);\n-  bc_emit_bytecode_labelref (thiscond->exit_label->bc_label);\n+  bc_emit_bytecode_labelref (BYTECODE_BC_LABEL (thiscond->exit_label));\n \n #ifdef DEBUG_PRINT_CODE\n   fputc ('\\n', stderr);\n@@ -2267,7 +2267,7 @@ bc_expand_end_cond ()\n {\n   struct nesting *thiscond = cond_stack;\n \n-  bc_emit_bytecode_labeldef (thiscond->exit_label->bc_label);\n+  bc_emit_bytecode_labeldef (BYTECODE_BC_LABEL (thiscond->exit_label));\n }\n \n /* Generate code for the start of the else- clause of\n@@ -2280,13 +2280,13 @@ bc_expand_start_else ()\n   thiscond->data.cond.endif_label = thiscond->exit_label;\n   thiscond->exit_label = gen_label_rtx ();\n   bc_emit_bytecode (jump);\n-  bc_emit_bytecode_labelref (thiscond->exit_label->bc_label);\n+  bc_emit_bytecode_labelref (BYTECODE_BC_LABEL (thiscond->exit_label));\n \n #ifdef DEBUG_PRINT_CODE\n   fputc ('\\n', stderr);\n #endif\n \n-  bc_emit_bytecode_labeldef (thiscond->data.cond.endif_label->bc_label);\n+  bc_emit_bytecode_labeldef (BYTECODE_BC_LABEL (thiscond->data.cond.endif_label));\n }\n \f\n /* Generate RTL for the start of a loop.  EXIT_FLAG is nonzero if this\n@@ -2316,7 +2316,7 @@ expand_start_loop (exit_flag)\n \n   if (output_bytecode)\n     {\n-      bc_emit_bytecode_labeldef (thisloop->data.loop.start_label->bc_label);\n+      bc_emit_bytecode_labeldef (BYTECODE_BC_LABEL (thisloop->data.loop.start_label));\n       return thisloop;\n     }\n \n@@ -2350,7 +2350,7 @@ expand_loop_continue_here ()\n {\n   if (output_bytecode)\n     {\n-      bc_emit_bytecode_labeldef (loop_stack->data.loop.continue_label->bc_label);\n+      bc_emit_bytecode_labeldef (BYTECODE_BC_LABEL (loop_stack->data.loop.continue_label));\n       return;\n     }\n   do_pending_stack_adjust ();\n@@ -2365,13 +2365,13 @@ bc_expand_end_loop ()\n   struct nesting *thisloop = loop_stack;\n \n   bc_emit_bytecode (jump);\n-  bc_emit_bytecode_labelref (thisloop->data.loop.start_label->bc_label);\n+  bc_emit_bytecode_labelref (BYTECODE_BC_LABEL (thisloop->data.loop.start_label));\n \n #ifdef DEBUG_PRINT_CODE\n   fputc ('\\n', stderr);\n #endif\n \n-  bc_emit_bytecode_labeldef (thisloop->exit_label->bc_label);\n+  bc_emit_bytecode_labeldef (BYTECODE_BC_LABEL (thisloop->exit_label));\n   POPSTACK (loop_stack);\n   last_expr_type = 0;\n }\n@@ -2546,8 +2546,8 @@ expand_exit_loop_if_false (whichloop, cond)\n   if (output_bytecode)\n     {\n       bc_expand_expr (cond);\n-      bc_expand_goto_internal (jumpifnot,\n-\t\t\t       whichloop->exit_label->bc_label, NULL_RTX);\n+      bc_expand_goto_internal (jumpifnot, BYTECODE_BC_LABEL (whichloop->exit_label),\n+\t\t\t       NULL_RTX);\n     }\n   else\n     do_jump (cond, whichloop->data.loop.end_label, NULL_RTX);\n@@ -3317,7 +3317,7 @@ bc_expand_end_bindings (vars, mark_ends, dont_jump_in)\n       if (! TREE_USED (TREE_VALUE (decl)) && TREE_CODE (TREE_VALUE (decl)) == VAR_DECL)\n \twarning_with_decl (decl, \"unused variable `%s'\");\n \n-  bc_emit_bytecode_labeldef (thisbind->exit_label->bc_label);\n+  bc_emit_bytecode_labeldef (BYTECODE_BC_LABEL (thisbind->exit_label));\n \n   /* Pop block/bindings off stack */\n   POPSTACK (nesting_stack);\n@@ -3957,7 +3957,7 @@ bc_expand_start_case (thiscase, expr, type, printname)\n \n   thiscase->data.case_stmt.skip_label = gen_label_rtx ();\n   bc_emit_bytecode (jump);\n-  bc_emit_bytecode_labelref (thiscase->data.case_stmt.skip_label->bc_label);\n+  bc_emit_bytecode_labelref (BYTECODE_BC_LABEL (thiscase->data.case_stmt.skip_label));\n \n #ifdef DEBUG_PRINT_CODE\n   fputc ('\\n', stderr);\n@@ -4851,15 +4851,15 @@ bc_expand_end_case (expr)\n   struct case_node *c;\n \n   bc_emit_bytecode (jump);\n-  bc_emit_bytecode_labelref (thiscase->exit_label->bc_label);\n+  bc_emit_bytecode_labelref (BYTECODE_BC_LABEL (thiscase->exit_label));\n \n #ifdef DEBUG_PRINT_CODE\n   fputc ('\\n', stderr);\n #endif\n \n   /* Now that the size of the jump table is known, emit the actual\n      indexed jump instruction.  */\n-  bc_emit_bytecode_labeldef (thiscase->data.case_stmt.skip_label->bc_label);\n+  bc_emit_bytecode_labeldef (BYTECODE_BC_LABEL (thiscase->data.case_stmt.skip_label));\n \n   opcode = TYPE_MODE (thiscase->data.case_stmt.nominal_type) == SImode\n     ? TREE_UNSIGNED (thiscase->data.case_stmt.nominal_type) ? caseSU : caseSI\n@@ -4879,10 +4879,9 @@ bc_expand_end_case (expr)\n \t\t\t  sizeof thiscase->data.case_stmt.num_ranges);\n \n   if (thiscase->data.case_stmt.default_label)\n-    bc_emit_bytecode_labelref (DECL_RTL (thiscase->\n-\t\t\t\t\t data.case_stmt.default_label)->bc_label);\n+    bc_emit_bytecode_labelref (BYTECODE_BC_LABEL (DECL_RTL (thiscase->data.case_stmt.default_label)));\n   else\n-    bc_emit_bytecode_labelref (thiscase->exit_label->bc_label);\n+    bc_emit_bytecode_labelref (BYTECODE_BC_LABEL (thiscase->exit_label));\n \n   /* Output the jump table.  */\n \n@@ -4898,7 +4897,7 @@ bc_expand_end_case (expr)\n \topcode = TREE_INT_CST_LOW (c->high);\n \tbc_emit_bytecode_const ((char *) &opcode, sizeof opcode);\n \n-\tbc_emit_bytecode_labelref (DECL_RTL (c->code_label)->bc_label);\n+\tbc_emit_bytecode_labelref (BYTECODE_BC_LABEL (DECL_RTL (c->code_label)));\n       }\n   else\n     if (TYPE_MODE (thiscase->data.case_stmt.nominal_type) == DImode)\n@@ -4907,14 +4906,14 @@ bc_expand_end_case (expr)\n \t  bc_emit_bytecode_DI_const (c->low);\n \t  bc_emit_bytecode_DI_const (c->high);\n \n-\t  bc_emit_bytecode_labelref (DECL_RTL (c->code_label)->bc_label);\n+\t  bc_emit_bytecode_labelref (BYTECODE_BC_LABEL (DECL_RTL (c->code_label)));\n \t}\n     else\n       /* Bad mode */\n       abort ();\n \n     \n-  bc_emit_bytecode_labeldef (thiscase->exit_label->bc_label);\n+  bc_emit_bytecode_labeldef (BYTECODE_BC_LABEL (thiscase->exit_label));\n \n   /* Possibly issue enumeration warnings.  */\n "}]}