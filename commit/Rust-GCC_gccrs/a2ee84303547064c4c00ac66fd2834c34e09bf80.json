{"sha": "a2ee84303547064c4c00ac66fd2834c34e09bf80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJlZTg0MzAzNTQ3MDY0YzRjMDBhYzY2ZmQyODM0YzM0ZTA5YmY4MA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-04-28T23:27:40Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2000-04-28T23:27:40Z"}, "message": "regmove.c (struct record_stack_memrefs_data): New.\n\n\t* regmove.c (struct record_stack_memrefs_data): New.\n\t(record_stack_memrefs): New function.\n\t(combine_stack_adjustments_for_block): Use it.\n\nFrom-SVN: r33529", "tree": {"sha": "ca0ace4f28ac0a11daeb30daf851ad58902ce4af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca0ace4f28ac0a11daeb30daf851ad58902ce4af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2ee84303547064c4c00ac66fd2834c34e09bf80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2ee84303547064c4c00ac66fd2834c34e09bf80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2ee84303547064c4c00ac66fd2834c34e09bf80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2ee84303547064c4c00ac66fd2834c34e09bf80/comments", "author": null, "committer": null, "parents": [{"sha": "0c4c16df3e0184bb42f56b292b969bb52572b861", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c4c16df3e0184bb42f56b292b969bb52572b861", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c4c16df3e0184bb42f56b292b969bb52572b861"}], "stats": {"total": 82, "additions": 64, "deletions": 18}, "files": [{"sha": "fc171e01fbc8204ae50fa41120c5cf82ae1a4cfa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ee84303547064c4c00ac66fd2834c34e09bf80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ee84303547064c4c00ac66fd2834c34e09bf80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2ee84303547064c4c00ac66fd2834c34e09bf80", "patch": "@@ -1,3 +1,9 @@\n+Sat Apr 29 01:18:45 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n+\n+\t* regmove.c (struct record_stack_memrefs_data): New.\n+\t(record_stack_memrefs): New function.\n+\t(combine_stack_adjustments_for_block): Use it.\n+\n Sat Apr 29 01:15:27 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \n \t* calls.c (calls_function_1):  Propertly handle TREE_LIST expressions;"}, {"sha": "5b244a028f5348da54a30791bf6aec03ca578ed6", "filename": "gcc/regmove.c", "status": "modified", "additions": 58, "deletions": 18, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ee84303547064c4c00ac66fd2834c34e09bf80/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ee84303547064c4c00ac66fd2834c34e09bf80/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=a2ee84303547064c4c00ac66fd2834c34e09bf80", "patch": "@@ -2100,6 +2100,7 @@ static struct csa_memlist *record_one_stack_memref\n static int try_apply_stack_adjustment\n   PARAMS ((rtx, struct csa_memlist *, HOST_WIDE_INT, HOST_WIDE_INT));\n static void combine_stack_adjustments_for_block PARAMS ((basic_block));\n+static int record_stack_memrefs \tPARAMS ((rtx *, void *));\n \n \n /* Main entry point for stack adjustment combination.  */\n@@ -2258,6 +2259,51 @@ try_apply_stack_adjustment (insn, memlist, new_adjust, delta)\n     return 0;\n }\n \n+/* Called via for_each_rtx and used to record all stack memory references in\n+   the insn and discard all other stack pointer references.  */\n+struct record_stack_memrefs_data\n+{\n+  rtx insn;\n+  struct csa_memlist *memlist;\n+};\n+\n+static int\n+record_stack_memrefs (xp, data)\n+     rtx *xp;\n+     void *data;\n+{\n+  rtx x = *xp;\n+  struct record_stack_memrefs_data *d =\n+    (struct record_stack_memrefs_data *) data;\n+  if (!x)\n+    return 0;\n+  switch (GET_CODE (x))\n+    {\n+    case MEM:\n+      if (!reg_mentioned_p (stack_pointer_rtx, x))\n+\treturn -1;\n+      /* We are not able to handle correctly all possible memrefs containing\n+         stack pointer, so this check is neccesary.  */\n+      if (stack_memref_p (x))\n+\t{\n+\t  d->memlist = record_one_stack_memref (d->insn, xp, d->memlist);\n+\t  return -1;\n+\t}\n+      return 1;\n+    case REG:\n+      /* ??? We want be able to handle non-memory stack pointer references\n+         later.  For now just discard all insns refering to stack pointer\n+         outside mem expressions.  We would probably want to teach\n+\t validate_replace to simplify expressions first.  */\n+      if (x == stack_pointer_rtx)\n+\treturn 1;\n+      break;\n+    default:\n+      break;\n+    }\n+  return 0;\n+}\n+\n /* Subroutine of combine_stack_adjustments, called for each basic block.  */\n \n static void \n@@ -2269,6 +2315,7 @@ combine_stack_adjustments_for_block (bb)\n   struct csa_memlist *memlist = NULL;\n   rtx pending_delete;\n   rtx insn, next;\n+  struct record_stack_memrefs_data data;\n \n   for (insn = bb->head; ; insn = next)\n     {\n@@ -2277,7 +2324,7 @@ combine_stack_adjustments_for_block (bb)\n       pending_delete = NULL_RTX;\n       next = NEXT_INSN (insn);\n \n-      if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+      if (! INSN_P (insn))\n \tgoto processed;\n \n       set = single_set_for_csa (insn);\n@@ -2337,23 +2384,6 @@ combine_stack_adjustments_for_block (bb)\n \t      goto processed;\n \t    }\n \n-\t  /* Find loads from stack memory and record them.  */\n-\t  if (last_sp_set && stack_memref_p (src)\n-\t      && ! reg_mentioned_p (stack_pointer_rtx, dest))\n-\t    {\n-\t      memlist = record_one_stack_memref (insn, &SET_SRC (set), memlist);\n-\t      goto processed;\n-\t    }\n-\n-\t  /* Find stores to stack memory and record them.  */\n-\t  if (last_sp_set && stack_memref_p (dest)\n-\t      && ! reg_mentioned_p (stack_pointer_rtx, src))\n-\t    {\n-\t      memlist = record_one_stack_memref (insn, &SET_DEST (set),\n-\t\t\t\t\t\t memlist);\n-\t      goto processed;\n-\t    }\n-\n \t  /* Find a predecrement of exactly the previous adjustment and\n \t     turn it into a direct store.  Obviously we can't do this if\n \t     there were any intervening uses of the stack pointer.  */\n@@ -2380,6 +2410,16 @@ combine_stack_adjustments_for_block (bb)\n \t    }\n \t}\n \n+      data.insn = insn;\n+      data.memlist = memlist;\n+      if (GET_CODE (insn) != CALL_INSN && last_sp_set\n+\t  && !for_each_rtx (&PATTERN (insn), record_stack_memrefs, &data))\n+\t{\n+\t   memlist = data.memlist;\n+\t   goto processed;\n+\t}\n+      memlist = data.memlist;\n+\n       /* Otherwise, we were not able to process the instruction. \n \t Do not continue collecting data across such a one.  */\n       if (last_sp_set"}]}