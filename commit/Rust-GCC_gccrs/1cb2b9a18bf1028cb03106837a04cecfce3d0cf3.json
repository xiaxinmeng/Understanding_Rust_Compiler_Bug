{"sha": "1cb2b9a18bf1028cb03106837a04cecfce3d0cf3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNiMmI5YTE4YmYxMDI4Y2IwMzEwNjgzN2EwNGNlY2ZjZTNkMGNmMw==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2012-10-10T10:43:53Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2012-10-10T10:43:53Z"}, "message": "PR c++/53540 - using fails to be equivalent to typedef\n\nIn the example of this problem report, during the substituting of int\ninto 'function', tsubst_aggr_type fails for the alias ctxt1.  This is\nbecause TYPE_TEMPLATE_INFO looks for the TEMPLATE_INFO of the ctxt1\nalias at the wrong place and was wrongly finding it to be NULL.\nNamely, it was looking for it in the DECL_TEMPLATE_INFO of the\ndeclaration of the type -- as if ctxt1 was an alias template\nspecialization -- rather than looking for it in its\nCLASSTYPE_TEMPLATE_INFO.\n\nFixed thus.  The other hunks of the patch are a cleanup to make a\nbetter use of alias_template_specialization_p.\n\nBootstrapped and tested on x86_64-unknown-linux-gnu against trunk.\n\ngcc/cp\n\n\t* cp-tree.h (TYPE_TEMPLATE_INFO): For an alias that is not an\n\tinstance of alias template, don't look for its TEMPLATE_INFO in\n\tits declaration.\n\t(alias_template_specialization_p): Take const_tree.\n\t* pt.c (alias_template_specialization_p): Take a const_tree.\n\tDon't call primary_template_instantiation_p.\n\t(primary_template_instantiation_p): Call\n\talias_template_specialization_p.\n\ngcc/testsuite/\n\n\t* g++.dg/cpp0x/alias-decl-24.C: New test.\n\nFrom-SVN: r192304", "tree": {"sha": "d0cb318eabc3722bd3ddc22fcf107c69f3fe0417", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0cb318eabc3722bd3ddc22fcf107c69f3fe0417"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cb2b9a18bf1028cb03106837a04cecfce3d0cf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cb2b9a18bf1028cb03106837a04cecfce3d0cf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cb2b9a18bf1028cb03106837a04cecfce3d0cf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cb2b9a18bf1028cb03106837a04cecfce3d0cf3/comments", "author": null, "committer": null, "parents": [{"sha": "a5fdcc3b9cda361bb6289d966b32240aaf86d659", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5fdcc3b9cda361bb6289d966b32240aaf86d659", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5fdcc3b9cda361bb6289d966b32240aaf86d659"}], "stats": {"total": 64, "additions": 51, "deletions": 13}, "files": [{"sha": "a52b643c6387de39a52df77470b6bb9d8daa5eab", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb2b9a18bf1028cb03106837a04cecfce3d0cf3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb2b9a18bf1028cb03106837a04cecfce3d0cf3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1cb2b9a18bf1028cb03106837a04cecfce3d0cf3", "patch": "@@ -1,3 +1,15 @@\n+2012-10-09  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/53540 - using fails to be equivalent to typedef\n+\t* cp-tree.h (TYPE_TEMPLATE_INFO): For an alias that is not an\n+\tinstance of alias template, don't look for its TEMPLATE_INFO in\n+\tits declaration.\n+\t(alias_template_specialization_p): Take const_tree.\n+\t* pt.c (alias_template_specialization_p): Take a const_tree.\n+\tDon't call primary_template_instantiation_p.\n+\t(primary_template_instantiation_p): Call\n+\talias_template_specialization_p.\n+\n 2012-10-10  Dodji Seketeli  <dodji@redhat.com>\n \n \t* parser (cp_parser_statement): Parse c++11 attributes"}, {"sha": "35819ed10c48f2e398a8a5fae3d88068ae0db7ca", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb2b9a18bf1028cb03106837a04cecfce3d0cf3/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb2b9a18bf1028cb03106837a04cecfce3d0cf3/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1cb2b9a18bf1028cb03106837a04cecfce3d0cf3", "patch": "@@ -2646,8 +2646,8 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n    template info for the alias template, not the one (if any) for the\n    template of the underlying type.  */\n #define TYPE_TEMPLATE_INFO(NODE)\t\t\t\t\t\\\n-  (TYPE_ALIAS_P (NODE)\t\t\t\t\t\t\t\\\n-   ? ((TYPE_NAME (NODE) && DECL_LANG_SPECIFIC (TYPE_NAME (NODE)))\t\\\n+  ((TYPE_ALIAS_P (NODE) && DECL_LANG_SPECIFIC (TYPE_NAME (NODE)))\t\\\n+   ? (DECL_LANG_SPECIFIC (TYPE_NAME (NODE))\t\t\t\t\\\n       ? DECL_TEMPLATE_INFO (TYPE_NAME (NODE))\t\t\t\t\\\n       : NULL_TREE)\t\t\t\t\t\t\t\\\n    : ((TREE_CODE (NODE) == ENUMERAL_TYPE)\t\t\t\t\\\n@@ -5437,7 +5437,7 @@ extern bool reregister_specialization\t\t(tree, tree, tree);\n extern tree fold_non_dependent_expr\t\t(tree);\n extern tree fold_non_dependent_expr_sfinae\t(tree, tsubst_flags_t);\n extern bool alias_type_or_template_p            (tree);\n-extern bool alias_template_specialization_p     (tree);\n+extern bool alias_template_specialization_p     (const_tree);\n extern bool explicit_class_specialization_p     (tree);\n extern int push_tinst_level                     (tree);\n extern void pop_tinst_level                     (void);"}, {"sha": "d81626cb35ecc4a97d9a5cca1546324eff39679e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb2b9a18bf1028cb03106837a04cecfce3d0cf3/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb2b9a18bf1028cb03106837a04cecfce3d0cf3/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1cb2b9a18bf1028cb03106837a04cecfce3d0cf3", "patch": "@@ -2929,10 +2929,7 @@ primary_template_instantiation_p (const_tree t)\n   else if (CLASS_TYPE_P (t) && !TYPE_DECL_ALIAS_P (TYPE_NAME (t)))\n     return CLASSTYPE_TEMPLATE_INSTANTIATION (t)\n \t   && PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (t));\n-  else if (TYPE_P (t)\n-\t   && TYPE_TEMPLATE_INFO (t)\n-\t   && PRIMARY_TEMPLATE_P (TYPE_TI_TEMPLATE (t))\n-\t   && DECL_TEMPLATE_INSTANTIATION (TYPE_NAME (t)))\n+  else if (alias_template_specialization_p (t))\n     return true;\n   return false;\n }\n@@ -5077,11 +5074,14 @@ alias_type_or_template_p (tree t)\n /* Return TRUE iff is a specialization of an alias template.  */\n \n bool\n-alias_template_specialization_p (tree t)\n+alias_template_specialization_p (const_tree t)\n {\n   if (t == NULL_TREE)\n     return false;\n-  return (primary_template_instantiation_p (t)\n+  \n+  return (TYPE_P (t)\n+\t  && TYPE_TEMPLATE_INFO (t)\n+\t  && PRIMARY_TEMPLATE_P (TYPE_TI_TEMPLATE (t))\n \t  && DECL_ALIAS_TEMPLATE_P (TYPE_TI_TEMPLATE (t)));\n }\n \n@@ -10945,10 +10945,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n     {\n       tree decl = TYPE_NAME (t);\n \n-      if (TYPE_DECL_ALIAS_P (decl)\n-\t  && DECL_LANG_SPECIFIC (decl)\n-\t  && DECL_TEMPLATE_INFO (decl)\n-\t  && PRIMARY_TEMPLATE_P (DECL_TI_TEMPLATE (decl)))\n+      if (alias_template_specialization_p (t))\n \t{\n \t  /* DECL represents an alias template and we want to\n \t     instantiate it.  */"}, {"sha": "5efc952bad29dc0f3cf068eadf98d07efef48015", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb2b9a18bf1028cb03106837a04cecfce3d0cf3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb2b9a18bf1028cb03106837a04cecfce3d0cf3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1cb2b9a18bf1028cb03106837a04cecfce3d0cf3", "patch": "@@ -1,3 +1,8 @@\n+2012-10-09  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/53540 - using fails to be equivalent to typedef\n+\t* g++.dg/cpp0x/alias-decl-24.C: New test.\n+\n 2012-10-10  Dodji Seketeli  <dodji@redhat.com>\n \n \t* g++.dg/cpp0x/gen-attrs-8.C: Update the test to reflect the fact"}, {"sha": "b68fa9346b442f744fdb25800251ca1295eb2f4e", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-24.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb2b9a18bf1028cb03106837a04cecfce3d0cf3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb2b9a18bf1028cb03106837a04cecfce3d0cf3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-24.C?ref=1cb2b9a18bf1028cb03106837a04cecfce3d0cf3", "patch": "@@ -0,0 +1,24 @@\n+// Origin: PR c++/53540\n+// { dg-do compile { target c++11 } }\n+\n+template <typename T>\n+struct context\n+{\n+  typedef int type;\n+};\n+\n+template <typename T>\n+void function()\n+{\n+  using ctx1 = context<T>;\n+  typename ctx1::type f1;\n+\n+  typedef context<T> ctx2;\n+  typename ctx2::type f2;\n+}\n+\n+int main()\n+{\n+  function<int>();\n+}\n+"}]}