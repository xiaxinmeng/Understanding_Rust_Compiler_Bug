{"sha": "222bb619fbdc3775767cde2d500c92d58ce1d499", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIyYmI2MTlmYmRjMzc3NTc2N2NkZTJkNTAwYzkyZDU4Y2UxZDQ5OQ==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-02-07T00:03:21Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-02-07T00:03:21Z"}, "message": "configopts.html: Fix HTML markup.\n\n2001-02-06  Phil Edwards  <pme@sources.redhat.com>\n\n\t* docs/html/configopts.html:  Fix HTML markup.\n\t* docs/html/install.html:  Bring up to date.\n\t* docs/html/17_intro/C++STYLE:  Add global variable conventions.\n\t* docs/html/21_strings/howto.html:  More notes.\n\t* docs/html/22_locale/howto.html:  Fix HTML markup.\n\t* docs/html/27_io/howto.html:  More notes.\n\t* docs/html/27_io/binary_iostreams_kanze.txt:  New file.\n\t* docs/html/27_io/binary_iostreams_kuehl.txt:  New file.\n\nFrom-SVN: r39503", "tree": {"sha": "0400ed0be7df372052c26bba69ebb9f937c93155", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0400ed0be7df372052c26bba69ebb9f937c93155"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/222bb619fbdc3775767cde2d500c92d58ce1d499", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/222bb619fbdc3775767cde2d500c92d58ce1d499", "html_url": "https://github.com/Rust-GCC/gccrs/commit/222bb619fbdc3775767cde2d500c92d58ce1d499", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/222bb619fbdc3775767cde2d500c92d58ce1d499/comments", "author": null, "committer": null, "parents": [{"sha": "ca21b4a51c8e1c6f6f36188dd82be0596ba1722f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca21b4a51c8e1c6f6f36188dd82be0596ba1722f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca21b4a51c8e1c6f6f36188dd82be0596ba1722f"}], "stats": {"total": 308, "additions": 233, "deletions": 75}, "files": [{"sha": "c8ad4a7b9f59492e6e2704531f05f1541efcdbad", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222bb619fbdc3775767cde2d500c92d58ce1d499/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222bb619fbdc3775767cde2d500c92d58ce1d499/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=222bb619fbdc3775767cde2d500c92d58ce1d499", "patch": "@@ -1,3 +1,14 @@\n+2001-02-06  Phil Edwards  <pme@sources.redhat.com>\n+\n+\t* docs/html/configopts.html:  Fix HTML markup.\n+\t* docs/html/install.html:  Bring up to date.\n+\t* docs/html/17_intro/C++STYLE:  Add global variable conventions.\n+\t* docs/html/21_strings/howto.html:  More notes.\n+\t* docs/html/22_locale/howto.html:  Fix HTML markup.\n+\t* docs/html/27_io/howto.html:  More notes.\n+\t* docs/html/27_io/binary_iostreams_kanze.txt:  New file.\n+\t* docs/html/27_io/binary_iostreams_kuehl.txt:  New file.\n+\n 2001-02-06  Jeffrey Oldham  <oldham@codesourcery.com>\n \n \t* src/misc-inst.cc (_S_pad_char): Modify declaration's parameters"}, {"sha": "c162a1f6ad4754470ea6d4ef0a2b1a31f123e623", "filename": "libstdc++-v3/docs/html/17_intro/C++STYLE", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222bb619fbdc3775767cde2d500c92d58ce1d499/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FC%2B%2BSTYLE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222bb619fbdc3775767cde2d500c92d58ce1d499/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FC%2B%2BSTYLE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FC%2B%2BSTYLE?ref=222bb619fbdc3775767cde2d500c92d58ce1d499", "patch": "@@ -6,7 +6,7 @@ This library is written to appropriate C++ coding standards.  As such,\n it is intended to precede the recommendations of the GNU Coding\n Standard, which can be referenced here:\n \n-http://www.gnu.ai.mit.edu/prep/standards_toc.html \n+http://www.gnu.org/prep/standards_toc.html\n \n ChangeLog entries for member functions should use the\n classname::member function name syntax as follows:\n@@ -27,7 +27,7 @@ Notable areas of divergence from what may be previous local practice\n   char &c = *p;      // wrong\n   \n     Reason: In C++, definitions are mixed with executable code.  Here,       \n-\t    p          is being initialized, not *p.  This is near-universal\n+\t    p is being initialized, not *p.  This is near-universal\n             practice among C++ programmers; it is normal for C hackers\n             to switch spontaneously as they gain experience.\n \n@@ -184,6 +184,16 @@ Notable areas of divergence from what may be previous local practice\n \n    return __ret;\n \n+14. Location of global variables.\n+   All global variables of class type, whether in the \"user visable\"\n+   space (e.g., cin) or the implementation namespace, must be defined\n+   as a character array with the appropriate alignment and then later\n+   re-initialized to the correct value.\n+\n+   This is due to startup issues on certain platforms, such as AIX.\n+   For more explanation and examples, see src/globals.cc.  All such\n+   variables should be contained in that file, for simplicity.\n+\n \n \n The library currently has a mixture of GNU-C and modern C++ coding"}, {"sha": "cdc83685965a08ab016fef682438c8bb468c3f14", "filename": "libstdc++-v3/docs/html/21_strings/howto.html", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222bb619fbdc3775767cde2d500c92d58ce1d499/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222bb619fbdc3775767cde2d500c92d58ce1d499/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html?ref=222bb619fbdc3775767cde2d500c92d58ce1d499", "patch": "@@ -8,7 +8,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 HOWTO:  Chapter 21</TITLE>\n <LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.7 2000/12/03 23:47:47 jsm28 Exp $ -->\n+<!-- $Id: howto.html,v 1.1 2000/12/10 04:04:55 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -236,6 +236,13 @@ <H2><A NAME=\"3\">Breaking a C++ string into tokens</A></H2>\n       with reading the new function names, this version is recommended\n       as an example.\n    </P>\n+   <P><B>Added February 2001:</B>  Mark Wilden pointed out that the\n+      standard <TT>std::getline()</TT> function can be used with standard\n+      <A HREF=\"../27_io/howto.html\">istringstreams</A> to perform\n+      tokenizing as well.  Build an istringstream from the input text,\n+      and then use std::getline with varying delimiters (the three-argument\n+      signature) to extract tokens into a string.\n+   </P>\n    <P>Return <A HREF=\"#top\">to top of page</A> or\n       <A HREF=\"../faq/index.html\">to the FAQ</A>.\n    </P>\n@@ -324,7 +331,7 @@ <H2><A NAME=\"4\">Simple transformations</A></H2>\n Comments and suggestions are welcome, and may be sent to\n <A HREF=\"mailto:pme@sources.redhat.com\">Phil Edwards</A> or\n <A HREF=\"mailto:gdr@gcc.gnu.org\">Gabriel Dos Reis</A>.\n-<BR> $Id: howto.html,v 1.7 2000/12/03 23:47:47 jsm28 Exp $\n+<BR> $Id: howto.html,v 1.1 2000/12/10 04:04:55 pme Exp $\n </EM></P>\n \n "}, {"sha": "cbf1daf61d3f5ca58b86ff2fce0c245a8396baaa", "filename": "libstdc++-v3/docs/html/22_locale/howto.html", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222bb619fbdc3775767cde2d500c92d58ce1d499/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222bb619fbdc3775767cde2d500c92d58ce1d499/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fhowto.html?ref=222bb619fbdc3775767cde2d500c92d58ce1d499", "patch": "@@ -8,7 +8,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 HOWTO:  Chapter 22</TITLE>\n <LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.8 2000/12/03 23:47:47 jsm28 Exp $ -->\n+<!-- $Id: howto.html,v 1.1 2000/12/10 04:04:55 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -56,9 +56,9 @@ <H2><A NAME=\"1\">Stroustrup on Locales</A></H2>\n \n <HR>\n <H2><A NAME=\"2\">Nathan Myers on Locales</A></H2>\n-   <P> An article entitled \"The Standard C++ Locale\" was published in\n-   Dr. Dobb's Journal and can be found\n-      <A HREF=\"http://www.cantrip.org/locale.html\">here</A>\n+   <P> An article entitled &quot;The Standard C++ Locale&quot; was\n+       published in Dr. Dobb's Journal and can be found\n+      <A HREF=\"http://www.cantrip.org/locale.html\">here</A>.\n    </P>\n    <P>Return <A HREF=\"#top\">to top of page</A> or\n       <A HREF=\"../faq/index.html\">to the FAQ</A>.\n@@ -67,7 +67,7 @@ <H2><A NAME=\"2\">Nathan Myers on Locales</A></H2>\n <HR>\n <H2><A NAME=\"5\">class locale</A></H2>\n    <P> Notes made during the implementation of locales can be found \n-   <A HREF=\"locale.html\">here</A>.\n+       <A HREF=\"locale.html\">here</A>.\n    </P>\n    <P>Return <A HREF=\"#top\">to top of page</A> or\n       <A HREF=\"../faq/index.html\">to the FAQ</A>.\n@@ -76,7 +76,7 @@ <H2><A NAME=\"5\">class locale</A></H2>\n <HR>\n <H2><A NAME=\"4\">class codecvt</A></H2>\n    <P> Notes made during the implementation of codecvt can be found \n-   <A HREF=\"codecvt.html\">here</A>.\n+       <A HREF=\"codecvt.html\">here</A>.\n    </P>\n \n    <P> The following is the abstract from the implementation notes:\n@@ -104,7 +104,7 @@ <H2><A NAME=\"4\">class codecvt</A></H2>\n <HR>\n <H2><A NAME=\"5\">class ctype</A></H2>\n    <P> Notes made during the implementation of ctype can be found \n-   <A HREF=\"ctype.html\">here</A>.\n+       <A HREF=\"ctype.html\">here</A>.\n    </P>\n    <P>Return <A HREF=\"#top\">to top of page</A> or\n       <A HREF=\"../faq/index.html\">to the FAQ</A>.\n@@ -114,7 +114,7 @@ <H2><A NAME=\"5\">class ctype</A></H2>\n <H2><A NAME=\"6\">Correct Transformations</A></H2>\n    <!-- Jumping directly here from chapter 21. -->\n    <P>A very common question on newsgroups and mailing lists is, &quot;How\n-      do I do &lt;foo&gt; to a character string?\" where &lt;foo&gt; is\n+      do I do &lt;foo&gt; to a character string?&quot; where &lt;foo&gt; is\n       a task such as changing all the letters to uppercase, to lowercase,\n       testing for digits, etc.  A skilled and conscientious programmer\n       will follow the question with another, &quot;And how do I make the\n@@ -227,7 +227,7 @@ <H2><A NAME=\"6\">Correct Transformations</A></H2>\n Comments and suggestions are welcome, and may be sent to\n <A HREF=\"mailto:pme@sources.redhat.com\">Phil Edwards</A> or\n <A HREF=\"mailto:gdr@gcc.gnu.org\">Gabriel Dos Reis</A>.\n-<BR> $Id: howto.html,v 1.8 2000/12/03 23:47:47 jsm28 Exp $\n+<BR> $Id: howto.html,v 1.1 2000/12/10 04:04:55 pme Exp $\n </EM></P>\n \n "}, {"sha": "65d79c996c5d3b0bb4f97c1da31195300df05e8e", "filename": "libstdc++-v3/docs/html/27_io/binary_iostreams_kanze.txt", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222bb619fbdc3775767cde2d500c92d58ce1d499/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fbinary_iostreams_kanze.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222bb619fbdc3775767cde2d500c92d58ce1d499/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fbinary_iostreams_kanze.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fbinary_iostreams_kanze.txt?ref=222bb619fbdc3775767cde2d500c92d58ce1d499", "patch": "@@ -0,0 +1,51 @@\n+\n+From: James Kanze <kanze@gabi-soft.de>\n+Newsgroups: comp.lang.c++.moderated\n+Subject: Re: binary iostreams ?\n+Date: 3 Feb 2001 14:28:19 -0500\n+Message-ID: <86lmro86qp.fsf@alex.gabi-soft.de>\n+\n+\"Plinio Conti\" <plinio.contiNO@SPAMMINGmclink.it> writes:\n+\n+|>  Why std c++ library stream classes are only text-oriented?\n+\n+Because that is the only universally recognized format.\n+\n+|>  I mean, if I want to write an int, a float, etc. AS IT IS I can't\n+|>  use streams, because they write and read a human readable text\n+|>  format of numbers.\n+\n+Correct.\n+\n+|>  Does anyone know how to solve the problem?\n+\n+It depends on what you really want to do.  If you are just dumping a\n+block of memory to disk, in order to free up memory, and will reread it\n+later in the same run of the same program, ostream::write and\n+istream::read are what you need.  Note, however, that this ony works 1)\n+in the same run of the same program, and 2) for PODs without pointers.\n+\n+If you are writing something that will be read by another program, or a\n+later run of the same program, you'll have to define a specific format\n+to use, and implement streams to input and output that.  If you are\n+writing something that will be read by an existing program, or be\n+transmitted over a network to another machine, you will have to find out\n+what protocol is expected, and adher to it.\n+\n+|>  Any public library?\n+\n+Not that I know of.  I think that there is a library somewhere that\n+outputs in format RPC, or maybe some Internet format.\n+\n+|>  What do you think about this choice?\n+\n+What other choice is possible?  It's not reasonable to ask the standard\n+to support all binary formats, and it's not reasonable for it to favor\n+any one of them.  Given that, what else can you do.\n+\n+--\n+James Kanze                               mailto:kanze@gabi-soft.de\n+Conseils en informatique orient\ufffde objet/\n+                   Beratung in objektorientierter Datenverarbeitung\n+Ziegelh\ufffdttenweg 17a, 60598 Frankfurt, Germany Tel. +49(069)63198627\n+"}, {"sha": "901701ff4805651e2c5231102f38e489f0c22c29", "filename": "libstdc++-v3/docs/html/27_io/binary_iostreams_kuehl.txt", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222bb619fbdc3775767cde2d500c92d58ce1d499/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fbinary_iostreams_kuehl.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222bb619fbdc3775767cde2d500c92d58ce1d499/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fbinary_iostreams_kuehl.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fbinary_iostreams_kuehl.txt?ref=222bb619fbdc3775767cde2d500c92d58ce1d499", "patch": "@@ -0,0 +1,89 @@\n+\n+From: kuehl@ramsen.informatik.uni-konstanz.de (Dietmar Kuehl)\n+Newsgroups: comp.std.c++\n+Subject: Re: binary iostreams ?\n+Date: Sat,  3 Feb 2001 17:17:49 GMT\n+Message-ID: <95hctq$suu$2@news.BelWue.DE>\n+\n+Hi,\n+Plinio Conti (plinio.contiNO@SPAMMINGmclink.it) wrote:\n+: Why std c++ library stream classes are only text-oriented?\n+\n+There is only a text oriented front end to stream buffers because text\n+input and output does not vary between platforms. This is very\n+different for binary output. For example, binary output has to consider\n+\n+- word sizes: Is an 'int' two, four, or eight bytes long? The same\n+  questions arise for all other built-in types.\n+\n+- what is the bit pattern of a value? I think that at least implicitly\n+  in the standard a binary representation for integer types is required.\n+  I don't think that it is required to use two's complement. In any\n+  case, the floating point representations do differ, eg. in their\n+  number of bytes used.\n+\n+- what \"endianess\" is to be used?\n+\n+Basically it is possible to decide a format for each of those. This,\n+however, implies inefficient implementations on platforms where the\n+format does not match the internal representation.\n+\n+What many people asking for binary I/O forget is that binary I/O also\n+requires some form of formatting! Assuming that just writing data and\n+then reading it in will work is asking for problems, eg. when the\n+compiler version changes and they decided to use a 32 bit integer\n+rather than a 16 bit integer: It is not even necessary to switch\n+platforms to run into problems!\n+\n+: I mean, if I want to write an int, a float, etc. AS IT IS I can't use\n+: streams, because they write and read a human readable text format of\n+: numbers.\n+\n+Which is for most I/O a reasonable approach. If it is not for you, you\n+might want to consider a data base: File I/O is not really useful as a\n+persistance mechanism. It is fine eg. for user interaction (text I/O),\n+logging (text I/O), cross platfrom program interaction (formatted I/O),\n+and data exchange (formatted I/O). In all these cases, the I/O is\n+formatted, although possible using a binary format. For persistance,\n+data bases are used. Depending on your needs, a relational or an object\n+oriented one may be better suited.\n+\n+That said, it is worth to mention that it is easy to create a hierarchy\n+similar to IOStreams built on top of stream buffers but doing binary\n+formatting. A somewhat aged example is found at\n+<ftp://ftp.fmi.uni-konstanz.de/pub/algo/personal/kuehl/binio.tar.gz>.\n+This uses XDR formatting of the binary data (well, if I remmeber \n+correctly, it is easy to plug in a different binary formatting).\n+\n+: Does anyone know how to solve the problem?\n+\n+Use a data base, text formatting, or binary formatting. With the\n+details you have given it is impossible to tell which of those is the\n+right approach because you haven't told *why* you want a binary format\n+and *what* you want to do. That basically means that you came up with\n+solution and you want us to confirm that it is the right one without\n+telling us what problem is solved! Until I have seen the problem I\n+doubt that binary I/O is the right approach...\n+\n+... and, BTW, using 'std::istream::read()' and 'std::ostream::write()'\n+is almost certainly the *wrong* approach! These functions are an\n+historical mistake which should have been corrected in the standard:\n+It is my understanding that these methods were present in the IOStream\n+version predating the rework from Jerry Schwartz and were left in to\n+be compatible with the earlier stuff although they were not necessary:\n+You could get binary I/O from the stream buffer level. The original\n+IOStream library (maybe you remember using <stream.h>) did not have\n+stream buffers and thus basic support for binary I/O was also present\n+on the streams level.\n+\n+: What do you think about this choice?\n+\n+When I wrote the above paragraph about confirming your choice, I haven't\n+read this question! As I said above: You told us what solution you have\n+choosen without stating what problem is solved. We cannot determine\n+whether your choice is the right one. Actually, I'm pretty sure it is\n+the wrong one but without seen the details I can't be certain.\n+--\n+<mailto:dietmar_kuehl@yahoo.com> <http://www.dietmar-kuehl.de/>\n+Phaidros eaSE - Easy Software Engineering: <http://www.phaidros.com/>\n+"}, {"sha": "a6aa045781c386307dae7cbf795e929631c58e77", "filename": "libstdc++-v3/docs/html/27_io/howto.html", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222bb619fbdc3775767cde2d500c92d58ce1d499/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222bb619fbdc3775767cde2d500c92d58ce1d499/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html?ref=222bb619fbdc3775767cde2d500c92d58ce1d499", "patch": "@@ -8,7 +8,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 HOWTO:  Chapter 27</TITLE>\n <LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.1 2000/12/10 04:04:56 pme Exp $ -->\n+<!-- $Id: howto.html,v 1.2 2001/01/23 17:02:27 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -29,6 +29,7 @@ <H1>Contents</H1>\n    <LI><A HREF=\"#4\">Iostreams class hierarchy diagram</A>\n    <LI><A HREF=\"#5\">What is this &lt;sstream&gt;/stringstreams thing?</A>\n    <LI><A HREF=\"#6\">Deriving a stream buffer</A>\n+   <LI><A HREF=\"#7\">More on binary I/O</A>\n </UL>\n \n <HR>\n@@ -196,9 +197,9 @@ <H2><A NAME=\"3\">Binary I/O</A></H2>\n    <P>Sorry.  Them's the breaks.\n    </P>\n    <P>This isn't going to try and be a complete tutorial on reading and\n-      writing binary files (because &quot;binary&quot; covers a lot of\n-      ground), but we will try and clear up a couple of misconceptions\n-      and common errors.\n+      writing binary files (because &quot;binary&quot;\n+      <A HREF=\"#7\">covers a lot of ground)</A>, but we will try and clear\n+      up a couple of misconceptions and common errors.\n    </P>\n    <P>First, <TT>ios::binary</TT> has exactly one defined effect, no more\n       and no less.  Normal text mode has to be concerned with the newline\n@@ -224,7 +225,7 @@ <H2><A NAME=\"3\">Binary I/O</A></H2>\n    <P>Third, using the <TT>get()</TT> and <TT>put()/write()</TT> member\n       functions still aren't guaranteed to help you.  These are\n       &quot;unformatted&quot; I/O functions, but still character-based.\n-      (This may or may not be what you want.)\n+      (This may or may not be what you want, see below.)\n    </P>\n    <P>Notice how all the problems here are due to the inappropriate use\n       of <EM>formatting</EM> functions and classes to perform something\n@@ -383,6 +384,31 @@ <H2><A NAME=\"6\">Deriving a stream buffer</A></H2>\n       Try it yourself!\n    </P>\n \n+<HR>\n+<H2><A NAME=\"7\">More on binary I/O</A></H2>\n+   <P>Towards the beginning of February 2001, the subject of\n+      &quot;binary&quot; I/O was brought up in a couple of places at the\n+      same time.  One notable place was Usenet, where James Kanze and\n+      Dietmar K&uuml;hl separately posted articles on why attempting\n+      generic binary I/O was not a good idea.  (Here are copies of\n+      <A HREF=\"binary_iostreams_kanze.txt\">Kanze's article</A> and\n+      <A HREF=\"binary_iostreams_kuehl.txt\">K&uuml;hl's article</A>.)\n+   </P>\n+   <P>Briefly, the problems of byte ordering and type sizes mean that\n+      the unformatted functions like <TT>ostream::put()</TT> and\n+      <TT>istream::get()</TT> cannot safely be used to communicate\n+      between arbitrary programs, or across a network, or from one\n+      invocation of a program to another invocation of the same program\n+      on a different platform, etc.\n+   </P>\n+   <P>The entire Usenet thread is instructive, and took place under the\n+      subject heading &quot;binary iostreams&quot; on both comp.std.c++\n+      and comp.lang.c++.moderated in parallel.  Also in that thread,\n+      Dietmar K&uuml;hl mentioned that he had written a pair of stream\n+      classes that would read and write XDR, which is a good step towards\n+      a portable binary format.\n+   </P>\n+\n \n <!-- ####################################################### -->\n \n@@ -391,7 +417,7 @@ <H2><A NAME=\"6\">Deriving a stream buffer</A></H2>\n Comments and suggestions are welcome, and may be sent to\n <A HREF=\"mailto:pme@sources.redhat.com\">Phil Edwards</A> or\n <A HREF=\"mailto:gdr@gcc.gnu.org\">Gabriel Dos Reis</A>.\n-<BR> $Id: howto.html,v 1.1 2000/12/10 04:04:56 pme Exp $\n+<BR> $Id: howto.html,v 1.2 2001/01/23 17:02:27 pme Exp $\n </EM></P>\n \n "}, {"sha": "78572aa902e8fb9d2f8cc61bff8628e9c9e7affb", "filename": "libstdc++-v3/docs/html/configopts.html", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222bb619fbdc3775767cde2d500c92d58ce1d499/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222bb619fbdc3775767cde2d500c92d58ce1d499/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html?ref=222bb619fbdc3775767cde2d500c92d58ce1d499", "patch": "@@ -7,7 +7,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 configure options</TITLE>\n <LINK REL=StyleSheet HREF=\"lib3styles.css\">\n-<!-- $Id: configopts.html,v 1.4 2001/01/21 09:36:09 pme Exp $ -->\n+<!-- $Id: configopts.html,v 1.5 2001/01/30 09:18:50 bkoz Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -80,8 +80,8 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n         model based on langinfo/iconv (from <A\n         HREF=\"http://sources.redhat.com/glibc/\">glibc</A>, the GNU C\n         library), or 'generic' to use a generic &quot;C&quot;\n-        abstraction which consists of \"C\" locale info.  The default is\n-        'generic'.\n+        abstraction which consists of &quot;C&quot; locale info.\n+\tThe default is 'generic'.\n      </P>\n \n  <DT><TT>--enable-long-long  </TT>\n@@ -137,7 +137,6 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n        <TT>--with-gxx-include-dir=_dirname_</TT> during configuration.\n      </P>\n \n-\n  <DT><TT>--with-gxx-include-dir=&lt;include-files dir&gt;</TT>\n  <DD><P>Adds support for named libstdc++ include directory.  For instance,\n         the following puts all the libstdc++ headers into a directory\n@@ -193,7 +192,7 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n \n <HR>\n <P CLASS=\"fineprint\"><EM>\n-$Id: configopts.html,v 1.4 2001/01/21 09:36:09 pme Exp $\n+$Id: configopts.html,v 1.5 2001/01/30 09:18:50 bkoz Exp $\n </EM></P>\n \n "}, {"sha": "fcc0c0dcdce27f19c637af71c32a273d246864d2", "filename": "libstdc++-v3/docs/html/install.html", "status": "modified", "additions": 16, "deletions": 51, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222bb619fbdc3775767cde2d500c92d58ce1d499/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222bb619fbdc3775767cde2d500c92d58ce1d499/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html?ref=222bb619fbdc3775767cde2d500c92d58ce1d499", "patch": "@@ -7,7 +7,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 Installation Instructions</TITLE>\n <LINK REL=StyleSheet HREF=\"lib3styles.css\">\n-<!-- $Id: install.html,v 1.2 2001/01/21 09:36:09 pme Exp $ -->\n+<!-- $Id: install.html,v 1.3 2001/01/23 17:02:26 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -58,7 +58,8 @@ <H2><A NAME=\"prereqs\">Tools you will need beforehand</A></H2>\n    <P>If you don't have bash, and want to run <TT>'make check'</TT> to\n       test your build, you'll need to get bash 2.x.  Also recommended\n       is GNU Make, since it is the only 'make' that will parse these\n-      makefiles correctly.\n+      makefiles correctly.  We are moving to DejaGNU, so you'll\n+      probably want to get that.\n    </P>\n \n    <P>As of June 19, 2000, libstdc++ attempts to use tricky and\n@@ -151,10 +152,11 @@ <H2><A NAME=\"srcsetup\">Setting up the source directories</A></H2>\n    <P><B>...with a gcc-2.9[67] snapshot</B>\n       <P>Unpack the <EM>gccsrcdir</EM> and go into that directory.  For\n          instance, <TT>gcc-2.95.2</TT> is a valid <EM>gccsrcdir</EM>.\n-         Once in <EM>gccsrcdir</EM>, you'll need to rename the libstdc++-v3\n-         directory which comes with that snapshot:\n+         Once in <EM>gccsrcdir</EM>, you'll need to rename or delete\n+\t the libstdc++-v3 directory which comes with that snapshot:\n          <PRE>\n-   mv libstdc++-v3 libstdc++-v3-previous</PRE>\n+   mv libstdc++-v3 libstdc++-v3-previous  <STRONG>[OR]</STRONG>\n+   rm -r libstdc++-v3</PRE>\n       </P>\n       <P>Next, unpack the libstdc++-v3 library tarball into the\n          <EM>gccsrcdir</EM> directory; it will create a\n@@ -173,9 +175,11 @@ <H2><A NAME=\"srcsetup\">Setting up the source directories</A></H2>\n    <P><B>...with CVS gcc</B> \n       <P>Check out or download the gcc sources: the resulting source\n          directory is <EM>gccsrcdir</EM>.  Once in <EM>gccsrcdir</EM>,\n-         you'll need to rename the libstdc++-v3 directory which comes\n-         with that snapshot:\n-   mv libstdc++-v3 libstdc++-v3-previous</PRE>\n+         you'll need to rename or delete the libstdc++-v3 directory\n+\t which comes with that snapshot:\n+         <PRE>\n+   mv libstdc++-v3 libstdc++-v3-previous  <STRONG>[OR]</STRONG>\n+   rm -r libstdc++-v3</PRE>\n       </P>\n       <P>Next, unpack the libstdc++-v3 library tarball into this\n          <EM>gccsrcdir</EM> directory; it will create a\n@@ -208,13 +212,7 @@ <H2><A NAME=\"config\">Configuring</A></H2>\n \n    <P><PRE>\n    cd <EM>gccbuilddir</EM>\n-   <EM>gccsrcdir</EM>/configure --prefix=<EM>destdir</EM> --enable-libstdcxx-v3</PRE>\n-   </P>\n-   \n-   <P>Adding <TT>--enable-libstdcxx-v3</TT> automatically selects libstdc++-v3\n-      as the C++ library to be used alongside the C++ compiler being built,\n-      and also enables -fhonor-std by default.  This option is not available\n-      with gcc-2.95.2.\n+   <EM>gccsrcdir</EM>/configure --prefix=<EM>destdir</EM> --other-opts...</PRE>\n    </P>\n \n \n@@ -239,10 +237,6 @@ <H3>[re]building only libstdc++</H3>\n       This will configure and build the C++ library in the\n       <EM>gccbuilddir/cpu-vendor-OS/</EM>libstdc++ directory.\n    </P>\n-   <P>If the build fails with a &quot;warning: can't inline call&quot;\n-      message when compiling stringMAIN.cc, see <A HREF=\"#Werror\">the\n-      resolution at the end of this document</A>.\n-   </P>\n    <P>If you are rebuilding from a previous build [attempt], some\n       information is kept in a cache file.  This is stored in\n       <EM>gccbuilddir/cpu-vendor-OS/</EM> if you are building with\n@@ -258,7 +252,7 @@ <H3>[re]building only libstdc++</H3>\n       or \n       <PRE>\n    make install-gcc\n-   make install-target-<EM>libstdc++-rule</EM></PRE>\n+   make install-target-libstdc++-v3</PRE>\n    </P>\n \n \n@@ -271,7 +265,7 @@ <H2><A NAME=\"postinstall\">Post-installation</A></H2>\n    include/g++-v3/\n       bits/\n       ext/\n-   cpu-vendor-OS/include/g++-v3/\n+   CPU-vendor-OS/include/g++-v3/\n       bits/\n       ext/</PRE>\n    </P>\n@@ -326,35 +320,6 @@ <H2><A NAME=\"usage\">Using the library</A></H2>\n    </P>\n \n \n-<HR>\n-<H3><A NAME=\"Werror\"><TT>warning: can't inline call to</TT>...</A></H3>\n-   <P>When building the .8 snapshot with g++ 2.95.2, compilation may halt\n-      with this warning message.  The &quot;problem&quot; is the -Werror\n-      flag being passed to the compiler, which says to treat warnings as\n-      errors.  (This plus a high warning level makes us track down bugs\n-      <EM>quickly</EM>.)  The compiler can't inline a certain call, prints\n-      a warning, and dies.\n-   </P>\n-   <P>The workaround is to edit either <EM>libsrcdir</EM>/src/Makefile.in\n-      (before configuring) or <EM>bld-libstdc++</EM>/src/Makefile\n-      (after configuring).  There's one line that reads\n-      <PRE>\n-   WERROR = -Werror</PRE>\n-      Delete the flag itself, so that the line reads\n-      <PRE>\n-   WERROR =</PRE>\n-      Then the compiler will still print a warning, but it won't die.\n-   </P>\n-   <P>For the curious, this &quot;problem&quot; is actually a symptom\n-      of something else.  The compiler in CVS could inline more than what\n-      2.95.2 does, and the libstdc++ changes were made with that\n-      compiler.  One of the libstdc++ maintainers explains this\n-<A HREF=\"http://gcc.gnu.org/ml/libstdc++/2000-q1/msg00420.html\">here</A>.\n-   </P>\n-   <P>This has been patched in current CVS sources.\n-   </P>\n-\n-\n <!--\n <HR>\n <H2><A NAME=\"\"></A></H2>\n@@ -370,7 +335,7 @@ <H2><A NAME=\"\"></A></H2>\n Comments and suggestions are welcome, and may be sent to\n <A HREF=\"mailto:pme@sources.redhat.com\">Phil Edwards</A> or\n <A HREF=\"mailto:gdr@gcc.gnu.org\">Gabriel Dos Reis</A>.\n-<BR> $Id: install.html,v 1.2 2001/01/21 09:36:09 pme Exp $\n+<BR> $Id: install.html,v 1.3 2001/01/23 17:02:26 pme Exp $\n </EM></P>\n \n "}]}