{"sha": "d6a488f243acfac4bdbbb0eefbee3ae916159cf5", "node_id": "C_kwDOANBUbNoAKGQ2YTQ4OGYyNDNhY2ZhYzRiZGJiYjBlZWZiZWUzYWU5MTYxNTljZjU", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-10-14T13:07:01Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-10-14T13:07:01Z"}, "message": "c++ modules: ICE with dynamic_cast [PR106304]\n\nThe FUNCTION_DECL we build for __dynamic_cast has an empty DECL_CONTEXT\nbut trees_out::tree_node expects FUNCTION_DECLs to have non-empty\nDECL_CONTEXT, thus we crash when streaming out the dynamic_cast in the\nbelow testcase.\n\nThis patch naively fixes this by setting DECL_CONTEXT for __dynamic_cast\nappropriately.  I suppose we should push it into the namespace too, like\nwe do for __cxa_atexit which is similarly lazily declared.\n\n\tPR c++/106304\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.cc (cxx_dynamic_cast_fn_p): Check for abi_node\n\tinstead of global_namespace.\n\t* rtti.cc (build_dynamic_cast_1): Set DECL_CONTEXT and\n\tDECL_SOURCE_LOCATION when building dynamic_cast_node.  Push\n\tit into the namespace.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/modules/pr106304_a.C: New test.\n\t* g++.dg/modules/pr106304_b.C: New test.", "tree": {"sha": "176780cf7d0809701da5f0fba501c21771a4b78a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/176780cf7d0809701da5f0fba501c21771a4b78a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6a488f243acfac4bdbbb0eefbee3ae916159cf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6a488f243acfac4bdbbb0eefbee3ae916159cf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6a488f243acfac4bdbbb0eefbee3ae916159cf5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6a488f243acfac4bdbbb0eefbee3ae916159cf5/comments", "author": null, "committer": null, "parents": [{"sha": "a75e9bee7c23403d3cc7085a249f230de50c4c3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a75e9bee7c23403d3cc7085a249f230de50c4c3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a75e9bee7c23403d3cc7085a249f230de50c4c3e"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "03663961bb8bf04234f23477fe629ad7b9f36f75", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a488f243acfac4bdbbb0eefbee3ae916159cf5/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a488f243acfac4bdbbb0eefbee3ae916159cf5/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=d6a488f243acfac4bdbbb0eefbee3ae916159cf5", "patch": "@@ -2088,7 +2088,7 @@ cxx_dynamic_cast_fn_p (tree fndecl)\n {\n   return (cxx_dialect >= cxx20\n \t  && id_equal (DECL_NAME (fndecl), \"__dynamic_cast\")\n-\t  && CP_DECL_CONTEXT (fndecl) == global_namespace);\n+\t  && CP_DECL_CONTEXT (fndecl) == abi_node);\n }\n \n /* Often, we have an expression in the form of address + offset, e.g."}, {"sha": "a85c7b56409035bbc19d7de3011a67bbae06e961", "filename": "gcc/cp/rtti.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a488f243acfac4bdbbb0eefbee3ae916159cf5/gcc%2Fcp%2Frtti.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a488f243acfac4bdbbb0eefbee3ae916159cf5/gcc%2Fcp%2Frtti.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.cc?ref=d6a488f243acfac4bdbbb0eefbee3ae916159cf5", "patch": "@@ -787,6 +787,10 @@ build_dynamic_cast_1 (location_t loc, tree type, tree expr,\n \t\t\t       NULL_TREE));\n \t      dcast_fn = (build_library_fn_ptr\n \t\t\t  (fn_name, fn_type, ECF_LEAF | ECF_PURE | ECF_NOTHROW));\n+\t      /* As with __cxa_atexit in get_atexit_node.  */\n+\t      DECL_CONTEXT (dcast_fn) = FROB_CONTEXT (current_namespace);\n+\t      DECL_SOURCE_LOCATION (dcast_fn) = BUILTINS_LOCATION;\n+\t      dcast_fn = pushdecl (dcast_fn, /*hiding=*/true);\n \t      pop_abi_namespace (flags);\n \t      dynamic_cast_node = dcast_fn;\n \t    }"}, {"sha": "b999eeccf4abf3443bfcf2b983c30ff1cf9cc9ed", "filename": "gcc/testsuite/g++.dg/modules/pr106304_a.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a488f243acfac4bdbbb0eefbee3ae916159cf5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr106304_a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a488f243acfac4bdbbb0eefbee3ae916159cf5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr106304_a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr106304_a.C?ref=d6a488f243acfac4bdbbb0eefbee3ae916159cf5", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/106304\n+// { dg-additional-options -fmodules-ts }\n+// { dg-module-cmi pr106304 }\n+\n+export module pr106304;\n+\n+struct A { virtual ~A() = default; };\n+struct B : A { };\n+\n+inline const B* as_b(const A& a) {\n+  return dynamic_cast<const B*>(&a);\n+}"}, {"sha": "e8333909c8de27ba064ac924f0837ccfcaa447b8", "filename": "gcc/testsuite/g++.dg/modules/pr106304_b.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a488f243acfac4bdbbb0eefbee3ae916159cf5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr106304_b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a488f243acfac4bdbbb0eefbee3ae916159cf5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr106304_b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr106304_b.C?ref=d6a488f243acfac4bdbbb0eefbee3ae916159cf5", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/106304\n+// { dg-additional-options -fmodules-ts }\n+\n+module pr106304;\n+\n+void f(A& a) {\n+  as_b(a);\n+}"}]}