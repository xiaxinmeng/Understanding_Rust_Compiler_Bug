{"sha": "c020c92b121315f101365221f05aca9d686a82f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAyMGM5MmIxMjEzMTVmMTAxMzY1MjIxZjA1YWNhOWQ2ODZhODJmMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-06-18T11:02:45Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-06-18T11:02:45Z"}, "message": "tree-sra.c (type_internals_preclude_sra_p): Return true if the element type is volatile.\n\n\t* tree-sra.c (type_internals_preclude_sra_p) <ARRAY_TYPE>: Return true\n\tif the element type is volatile.\nada/\n\t* gcc-interface/decl.c (gnat_to_gnu_component_type): Use GNAT_TYPE\n\tlocal variable throughout.  Remove useless call to Base_Type.\n\t(gnat_to_gnu_field): Use GNAT_FIELD_TYPE local variable throughout.\n\tTake it also into account for the volatileness of the field.  Set the\n\tTREE_SIDE_EFFECTS flag as well in this case.  Reorder some warnings.\n\nFrom-SVN: r175176", "tree": {"sha": "c905c1e124af4453a2ccb5759bc9ce57ab62e467", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c905c1e124af4453a2ccb5759bc9ce57ab62e467"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c020c92b121315f101365221f05aca9d686a82f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c020c92b121315f101365221f05aca9d686a82f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c020c92b121315f101365221f05aca9d686a82f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c020c92b121315f101365221f05aca9d686a82f0/comments", "author": null, "committer": null, "parents": [{"sha": "10f13f2279ec2b2ea34dda5fe1d45a54b3725369", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10f13f2279ec2b2ea34dda5fe1d45a54b3725369", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10f13f2279ec2b2ea34dda5fe1d45a54b3725369"}], "stats": {"total": 159, "additions": 136, "deletions": 23}, "files": [{"sha": "d85c2bb78ff424ade05aa407d71a5f386f0b9e95", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c020c92b121315f101365221f05aca9d686a82f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c020c92b121315f101365221f05aca9d686a82f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c020c92b121315f101365221f05aca9d686a82f0", "patch": "@@ -1,3 +1,8 @@\n+2011-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-sra.c (type_internals_preclude_sra_p) <ARRAY_TYPE>: Return true\n+\tif the element type is volatile.\n+\n 2011-06-18  Jan Hubicka  <jh@suse.cz>\n \n \t* lto-symtab.c (lto_varpool_replace_node): Remove code handling\n@@ -123,7 +128,7 @@\n \t(arm_legitimate_ldrd_p): New function.\n \t(arm_output_ldrd): New function.\n \n-2010-06-16  Joern Rennecke  <joern.rennecke@embecosm.com>\n+2011-06-16  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \tPR middle-end/46500\n \t* doc/tm.texi.in: Update Copyright date."}, {"sha": "c27f132e0c4a5d7bf066c39243da8b9328c3e6ec", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c020c92b121315f101365221f05aca9d686a82f0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c020c92b121315f101365221f05aca9d686a82f0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c020c92b121315f101365221f05aca9d686a82f0", "patch": "@@ -1,3 +1,11 @@\n+2011-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_component_type): Use GNAT_TYPE\n+\tlocal variable throughout.  Remove useless call to Base_Type.\n+\t(gnat_to_gnu_field): Use GNAT_FIELD_TYPE local variable throughout.\n+\tTake it also into account for the volatileness of the field.  Set the\n+\tTREE_SIDE_EFFECTS flag as well in this case.  Reorder some warnings.\n+\n 2011-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (Identifier_to_gnu): Don't set TREE_THIS_NOTRAP"}, {"sha": "1f9083a454ea4fbe7e731cbba27aba8b0cd41445", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c020c92b121315f101365221f05aca9d686a82f0/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c020c92b121315f101365221f05aca9d686a82f0/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=c020c92b121315f101365221f05aca9d686a82f0", "patch": "@@ -5229,15 +5229,16 @@ static tree\n gnat_to_gnu_component_type (Entity_Id gnat_array, bool definition,\n \t\t\t    bool debug_info_p)\n {\n-  tree gnu_type = gnat_to_gnu_type (Component_Type (gnat_array));\n+  const Entity_Id gnat_type = Component_Type (gnat_array);\n+  tree gnu_type = gnat_to_gnu_type (gnat_type);\n   tree gnu_comp_size;\n \n   /* Try to get a smaller form of the component if needed.  */\n   if ((Is_Packed (gnat_array)\n        || Has_Component_Size_Clause (gnat_array))\n       && !Is_Bit_Packed_Array (gnat_array)\n       && !Has_Aliased_Components (gnat_array)\n-      && !Strict_Alignment (Component_Type (gnat_array))\n+      && !Strict_Alignment (gnat_type)\n       && TREE_CODE (gnu_type) == RECORD_TYPE\n       && !TYPE_FAT_POINTER_P (gnu_type)\n       && host_integerp (TYPE_SIZE (gnu_type), 1))\n@@ -5301,7 +5302,7 @@ gnat_to_gnu_component_type (Entity_Id gnat_array, bool definition,\n \t\t\t  debug_info_p, gnat_array);\n     }\n \n-  if (Has_Volatile_Components (Base_Type (gnat_array)))\n+  if (Has_Volatile_Components (gnat_array))\n     gnu_type\n       = build_qualified_type (gnu_type,\n \t\t\t      TYPE_QUALS (gnu_type) | TYPE_QUAL_VOLATILE);\n@@ -6716,12 +6717,16 @@ static tree\n gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n \t\t   bool definition, bool debug_info_p)\n {\n+  const Entity_Id gnat_field_type = Etype (gnat_field);\n+  tree gnu_field_type = gnat_to_gnu_type (gnat_field_type);\n   tree gnu_field_id = get_entity_name (gnat_field);\n-  tree gnu_field_type = gnat_to_gnu_type (Etype (gnat_field));\n   tree gnu_field, gnu_size, gnu_pos;\n+  bool is_volatile\n+    = (Treat_As_Volatile (gnat_field) || Treat_As_Volatile (gnat_field_type));\n   bool needs_strict_alignment\n-    = (Is_Aliased (gnat_field) || Strict_Alignment (Etype (gnat_field))\n-       || Treat_As_Volatile (gnat_field));\n+    = (is_volatile\n+       || Is_Aliased (gnat_field)\n+       || Strict_Alignment (gnat_field_type));\n \n   /* If this field requires strict alignment, we cannot pack it because\n      it would very likely be under-aligned in the record.  */\n@@ -6737,7 +6742,7 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n     gnu_size = validate_size (Esize (gnat_field), gnu_field_type,\n \t\t\t      gnat_field, FIELD_DECL, false, true);\n   else if (packed == 1)\n-    gnu_size = validate_size (RM_Size (Etype (gnat_field)), gnu_field_type,\n+    gnu_size = validate_size (RM_Size (gnat_field_type), gnu_field_type,\n \t\t\t      gnat_field, FIELD_DECL, false, true);\n   else\n     gnu_size = NULL_TREE;\n@@ -6829,7 +6834,7 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n \t  if (gnu_size\n \t      && !operand_equal_p (gnu_size, TYPE_SIZE (gnu_field_type), 0))\n \t    {\n-\t      if (Is_Atomic (gnat_field) || Is_Atomic (Etype (gnat_field)))\n+\t      if (Is_Atomic (gnat_field) || Is_Atomic (gnat_field_type))\n \t\tpost_error_ne_tree\n \t\t  (\"atomic field& must be natural size of type{ (^)}\",\n \t\t   Last_Bit (Component_Clause (gnat_field)), gnat_field,\n@@ -6841,7 +6846,7 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n \t\t   Last_Bit (Component_Clause (gnat_field)), gnat_field,\n \t\t   TYPE_SIZE (gnu_field_type));\n \n-\t      else if (Strict_Alignment (Etype (gnat_field)))\n+\t      else if (Strict_Alignment (gnat_field_type))\n \t\tpost_error_ne_tree\n \t\t  (\"size of & with aliased or tagged components not ^ bits\",\n \t\t   Last_Bit (Component_Clause (gnat_field)), gnat_field,\n@@ -6854,19 +6859,19 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n \t\t\t      (TRUNC_MOD_EXPR, gnu_pos,\n \t\t\t       bitsize_int (TYPE_ALIGN (gnu_field_type)))))\n \t    {\n-\t      if (Is_Aliased (gnat_field))\n+\t      if (is_volatile)\n \t\tpost_error_ne_num\n-\t\t  (\"position of aliased field& must be multiple of ^ bits\",\n+\t\t  (\"position of volatile field& must be multiple of ^ bits\",\n \t\t   First_Bit (Component_Clause (gnat_field)), gnat_field,\n \t\t   TYPE_ALIGN (gnu_field_type));\n \n-\t      else if (Treat_As_Volatile (gnat_field))\n+\t      else if (Is_Aliased (gnat_field))\n \t\tpost_error_ne_num\n-\t\t  (\"position of volatile field& must be multiple of ^ bits\",\n+\t\t  (\"position of aliased field& must be multiple of ^ bits\",\n \t\t   First_Bit (Component_Clause (gnat_field)), gnat_field,\n \t\t   TYPE_ALIGN (gnu_field_type));\n \n-\t      else if (Strict_Alignment (Etype (gnat_field)))\n+\t      else if (Strict_Alignment (gnat_field_type))\n \t\tpost_error_ne_num\n   (\"position of & with aliased or tagged components not multiple of ^ bits\",\n \t\t   First_Bit (Component_Clause (gnat_field)), gnat_field,\n@@ -6901,7 +6906,7 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n   if (TREE_CODE (gnu_field_type) == RECORD_TYPE\n       && !gnu_size\n       && CONTAINS_PLACEHOLDER_P (TYPE_SIZE (gnu_field_type))\n-      && !Is_Constrained (Underlying_Type (Etype (gnat_field))))\n+      && !Is_Constrained (Underlying_Type (gnat_field_type)))\n     {\n       gnu_size = max_size (TYPE_SIZE (gnu_field_type), true);\n       packed = 0;\n@@ -6953,7 +6958,7 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n     = create_field_decl (gnu_field_id, gnu_field_type, gnu_record_type,\n \t\t\t gnu_size, gnu_pos, packed, Is_Aliased (gnat_field));\n   Sloc_to_locus (Sloc (gnat_field), &DECL_SOURCE_LOCATION (gnu_field));\n-  TREE_THIS_VOLATILE (gnu_field) = Treat_As_Volatile (gnat_field);\n+  TREE_THIS_VOLATILE (gnu_field) = TREE_SIDE_EFFECTS (gnu_field) = is_volatile;\n \n   if (Ekind (gnat_field) == E_Discriminant)\n     DECL_DISCRIMINANT_NUMBER (gnu_field)"}, {"sha": "907b94d74f7ba7b4b84bd0f5f40af16bd8436794", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c020c92b121315f101365221f05aca9d686a82f0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c020c92b121315f101365221f05aca9d686a82f0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c020c92b121315f101365221f05aca9d686a82f0", "patch": "@@ -1,3 +1,10 @@\n+2011-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/volatile6.adb: New test.\n+\t* gnat.dg/volatile7.adb: Likewise.\n+\t* gnat.dg/volatile8.adb: Likewise.\n+\t* gnat.dg/volatile9.adb: Likewise.\n+\n 2011-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/constant3.adb: New test."}, {"sha": "aeaacb028f7ec7fb8840412c79f565b6373b6219", "filename": "gcc/testsuite/gnat.dg/volatile6.adb", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c020c92b121315f101365221f05aca9d686a82f0/gcc%2Ftestsuite%2Fgnat.dg%2Fvolatile6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c020c92b121315f101365221f05aca9d686a82f0/gcc%2Ftestsuite%2Fgnat.dg%2Fvolatile6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvolatile6.adb?ref=c020c92b121315f101365221f05aca9d686a82f0", "patch": "@@ -0,0 +1,20 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O2 -fdump-tree-optimized\" }\n+\n+function Volatile6 return Integer is\n+\n+  type Vol is new Integer;\n+  pragma Volatile (Vol);\n+\n+  V : Vol := 0;\n+\n+begin\n+  for J in 1 .. 10 loop\n+     V := V + 1;\n+  end loop;\n+\n+  return Integer (V);\n+end;\n+\n+-- { dg-final { scan-tree-dump \"goto\" \"optimized\" } }\n+-- { dg-final { cleanup-tree-dump \"optimized\" } }"}, {"sha": "d0eb48ffee6c21d6f6dd6a60a4d5313b5187ee1d", "filename": "gcc/testsuite/gnat.dg/volatile7.adb", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c020c92b121315f101365221f05aca9d686a82f0/gcc%2Ftestsuite%2Fgnat.dg%2Fvolatile7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c020c92b121315f101365221f05aca9d686a82f0/gcc%2Ftestsuite%2Fgnat.dg%2Fvolatile7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvolatile7.adb?ref=c020c92b121315f101365221f05aca9d686a82f0", "patch": "@@ -0,0 +1,24 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O2 -fdump-tree-optimized\" }\n+\n+function Volatile7 return Integer is\n+\n+   type Vol is new Integer;\n+   pragma Volatile (Vol);\n+\n+   type R is record\n+      X : Vol := 0;\n+   end record;\n+\n+   V : R;\n+\n+begin\n+   for J in 1 .. 10 loop\n+      V.X := V.X + 1;\n+   end loop;\n+\n+   return Integer (V.X);\n+end;\n+\n+-- { dg-final { scan-tree-dump \"goto\" \"optimized\" } }\n+-- { dg-final { cleanup-tree-dump \"optimized\" } }"}, {"sha": "83f7488580e2bc17edb66419d263b9f12260a279", "filename": "gcc/testsuite/gnat.dg/volatile8.adb", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c020c92b121315f101365221f05aca9d686a82f0/gcc%2Ftestsuite%2Fgnat.dg%2Fvolatile8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c020c92b121315f101365221f05aca9d686a82f0/gcc%2Ftestsuite%2Fgnat.dg%2Fvolatile8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvolatile8.adb?ref=c020c92b121315f101365221f05aca9d686a82f0", "patch": "@@ -0,0 +1,22 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O2 -fdump-tree-optimized\" }\n+\n+function Volatile8 return Integer is\n+\n+   type Vol is new Integer;\n+   pragma Volatile (Vol);\n+\n+   type A is array (1..4) of Vol;\n+\n+   V : A := (others => 0);\n+\n+begin\n+   for J in 1 .. 10 loop\n+      V(1) := V(1) + 1;\n+   end loop;\n+\n+   return Integer (V(1));\n+end;\n+\n+-- { dg-final { scan-tree-dump \"goto\" \"optimized\" } }\n+-- { dg-final { cleanup-tree-dump \"optimized\" } }"}, {"sha": "52b55aee23afd3983c315950112705812d7d26a0", "filename": "gcc/testsuite/gnat.dg/volatile9.adb", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c020c92b121315f101365221f05aca9d686a82f0/gcc%2Ftestsuite%2Fgnat.dg%2Fvolatile9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c020c92b121315f101365221f05aca9d686a82f0/gcc%2Ftestsuite%2Fgnat.dg%2Fvolatile9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvolatile9.adb?ref=c020c92b121315f101365221f05aca9d686a82f0", "patch": "@@ -0,0 +1,20 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O2 -fdump-tree-optimized\" }\n+\n+function Volatile9 return Integer is\n+\n+   type A is array (1..4) of Integer;\n+   pragma Volatile_Components (A);\n+\n+   V : A := (others => 0);\n+\n+begin\n+   for J in 1 .. 10 loop\n+      V(1) := V(1) + 1;\n+   end loop;\n+\n+   return V(1);\n+end;\n+\n+-- { dg-final { scan-tree-dump \"goto\" \"optimized\" } }\n+-- { dg-final { cleanup-tree-dump \"optimized\" } }"}, {"sha": "322abb570a42d3b239e14b0b41bd7434f94560ba", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c020c92b121315f101365221f05aca9d686a82f0/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c020c92b121315f101365221f05aca9d686a82f0/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=c020c92b121315f101365221f05aca9d686a82f0", "patch": "@@ -671,8 +671,7 @@ type_internals_preclude_sra_p (tree type)\n \t\t    && int_bit_position (fld) % BITS_PER_UNIT != 0))\n \t      return true;\n \n-\t    if (AGGREGATE_TYPE_P (ft)\n-\t\t&& type_internals_preclude_sra_p (ft))\n+\t    if (AGGREGATE_TYPE_P (ft) && type_internals_preclude_sra_p (ft))\n \t      return true;\n \t  }\n \n@@ -681,10 +680,13 @@ type_internals_preclude_sra_p (tree type)\n     case ARRAY_TYPE:\n       et = TREE_TYPE (type);\n \n-      if (AGGREGATE_TYPE_P (et))\n-\treturn type_internals_preclude_sra_p (et);\n-      else\n-\treturn false;\n+      if (TYPE_VOLATILE (et))\n+\treturn true;\n+\n+      if (AGGREGATE_TYPE_P (et) && type_internals_preclude_sra_p (et))\n+\treturn true;\n+\n+      return false;\n \n     default:\n       return false;"}]}