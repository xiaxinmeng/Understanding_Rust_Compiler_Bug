{"sha": "58f87503427e27bb069bd1841100f3c53440d51a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThmODc1MDM0MjdlMjdiYjA2OWJkMTg0MTEwMGYzYzUzNDQwZDUxYQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-08-12T00:16:28Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-08-12T00:16:28Z"}, "message": "Daily bump.", "tree": {"sha": "c9abce1dc57c4ef5a0e246f0127ac52030e4611f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9abce1dc57c4ef5a0e246f0127ac52030e4611f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58f87503427e27bb069bd1841100f3c53440d51a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f87503427e27bb069bd1841100f3c53440d51a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58f87503427e27bb069bd1841100f3c53440d51a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f87503427e27bb069bd1841100f3c53440d51a/comments", "author": null, "committer": null, "parents": [{"sha": "93f1dbc7cdcc4b31ea4061efb4c2acf2d4f81eb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93f1dbc7cdcc4b31ea4061efb4c2acf2d4f81eb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93f1dbc7cdcc4b31ea4061efb4c2acf2d4f81eb8"}], "stats": {"total": 253, "additions": 252, "deletions": 1}, "files": [{"sha": "31f7659d7c4bda4ab0167f4f125eb98df820064e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f87503427e27bb069bd1841100f3c53440d51a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f87503427e27bb069bd1841100f3c53440d51a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58f87503427e27bb069bd1841100f3c53440d51a", "patch": "@@ -1,3 +1,123 @@\n+2021-08-11  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-builtin-new.def: Add always, power5, and\n+\tpower6 stanzas.\n+\n+2021-08-11  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-builtin-new.def: Add vsx stanza.\n+\n+2021-08-11  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-builtin-new.def: Finish altivec stanza.\n+\t* config/rs6000/rs6000-call.c (rs6000_init_builtins): Move\n+\tinitialization of pcvoid_type_node here...\n+\t(altivec_init_builtins): ...from here.\n+\t* config/rs6000/rs6000.h (rs6000_builtin_type_index): Add\n+\tRS6000_BTI_const_ptr_void.\n+\t(pcvoid_type_node): New macro.\n+\n+2021-08-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR target/101877\n+\t* tree-ssa-forwprop.c (pass_forwprop::execute): Do not decompose\n+\thard-register accesses.\n+\n+2021-08-11  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-operands.c (operands_scanner::get_expr_operands):\n+\tDo not look at COMPONENT_REF FIELD_DECLs TREE_THIS_VOLATILE\n+\tto determine has_volatile_ops.\n+\n+2021-08-11  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n+\n+\t* cfgexpand.c (expand_used_vars): Reuse attribs local variable.\n+\n+2021-08-11  Jan Hubicka  <hubicka@ucw.cz>\n+\t    Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* ipa-modref.c (modref_lattice::dump): Fix escape_point's min_flags\n+\tdumping.\n+\t(modref_lattice::merge_deref): Fix handling of indirect scape points.\n+\t(update_escape_summary_1): Likewise.\n+\t(update_escape_summary): Likewise.\n+\t(ipa_merge_modref_summary_after_inlining): Likewise.\n+\n+2021-08-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/101858\n+\t* fold-const.c (fold_binary_loc): Guard simplification\n+\tof  X < (cast) (1 << Y) to integer types.\n+\n+2021-08-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101861\n+\t* tree-vect-stmts.c (vectorizable_load): Fix error in\n+\tprevious change with regard to gather vectorization.\n+\n+2021-08-11  prathamesh.kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR target/66791\n+\t* config/arm/arm_neon.h (vdup_n_s8): Replace call to builtin\n+\twith constructor.\n+\t(vdup_n_s16): Likewise.\n+\t(vdup_n_s32): Likewise.\n+\t(vdup_n_s64): Likewise.\n+\t(vdup_n_u8): Likewise.\n+\t(vdup_n_u16): Likewise.\n+\t(vdup_n_u32): Likewise.\n+\t(vdup_n_u64): Likewise.\n+\t(vdup_n_p8): Likewise.\n+\t(vdup_n_p16): Likewise.\n+\t(vdup_n_p64): Likewise.\n+\t(vdup_n_f16): Likewise.\n+\t(vdup_n_f32): Likewise.\n+\t(vdupq_n_s8): Likewise.\n+\t(vdupq_n_s16): Likewise.\n+\t(vdupq_n_s32): Likewise.\n+\t(vdupq_n_s64): Likewise.\n+\t(vdupq_n_u8): Likewise.\n+\t(vdupq_n_u16): Likewise.\n+\t(vdupq_n_u32): Likewise.\n+\t(vdupq_n_u64): Likewise.\n+\t(vdupq_n_p8): Likewise.\n+\t(vdupq_n_p16): Likewise.\n+\t(vdupq_n_p64): Likewise.\n+\t(vdupq_n_f16): Likewise.\n+\t(vdupq_n_f32): Likewise.\n+\t(vmov_n_s8): Replace call to builtin with call to corresponding\n+\tvdup_n intrinsic.\n+\t(vmov_n_s16): Likewise.\n+\t(vmov_n_s32): Likewise.\n+\t(vmov_n_s64): Likewise.\n+\t(vmov_n_u8): Likewise.\n+\t(vmov_n_u16): Likewise.\n+\t(vmov_n_u32): Likewise.\n+\t(vmov_n_u64): Likewise.\n+\t(vmov_n_p8): Likewise.\n+\t(vmov_n_p16): Likewise.\n+\t(vmov_n_f16): Likewise.\n+\t(vmov_n_f32): Likewise.\n+\t(vmovq_n_s8): Likewise.\n+\t(vmovq_n_s16): Likewise.\n+\t(vmovq_n_s32): Likewise.\n+\t(vmovq_n_s64): Likewise.\n+\t(vmovq_n_u8): Likewise.\n+\t(vmovq_n_u16): Likewise.\n+\t(vmovq_n_u32): Likewise.\n+\t(vmovq_n_u64): Likewise.\n+\t(vmovq_n_p8): Likewise.\n+\t(vmovq_n_p16): Likewise.\n+\t(vmovq_n_f16): Likewise.\n+\t(vmovq_n_f32): Likewise.\n+\t* config/arm/arm_neon_builtins.def: Remove entries for vdup_n.\n+\n+2021-08-11  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/98309\n+\t* config/i386/i386.md (ldexp<mode>3): Extend to vscalefs[sd]\n+\twhen TARGET_AVX512F and TARGET_SSE_MATH.\n+\n 2021-08-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/80355"}, {"sha": "cffca645a16e4207f8d29977c107a48f82ed28b3", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f87503427e27bb069bd1841100f3c53440d51a/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f87503427e27bb069bd1841100f3c53440d51a/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=58f87503427e27bb069bd1841100f3c53440d51a", "patch": "@@ -1 +1 @@\n-20210811\n+20210812"}, {"sha": "8e19ca47a03c9689bb50fcd35ed4568333113227", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f87503427e27bb069bd1841100f3c53440d51a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f87503427e27bb069bd1841100f3c53440d51a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=58f87503427e27bb069bd1841100f3c53440d51a", "patch": "@@ -1,3 +1,10 @@\n+2021-08-11  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR debug/101598\n+\t* gcc-interface/trans.c (Subprogram_Body_to_gnu): Set the\n+\tDECL_SOURCE_LOCATION of DECL_IGNORED_P gnu_subprog_decl to\n+\tUNKNOWN_LOCATION.\n+\n 2021-07-25  Arnaud Charlet  <charlet@adacore.com>\n \n \t* libgnat/s-osprim__x32.adb: Add missing with clause."}, {"sha": "fd4aa6e80751863653ed8fd3b6eed654ad25a539", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f87503427e27bb069bd1841100f3c53440d51a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f87503427e27bb069bd1841100f3c53440d51a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=58f87503427e27bb069bd1841100f3c53440d51a", "patch": "@@ -1,3 +1,40 @@\n+2021-08-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101725\n+\tDR 2082\n+\t* cp-tree.h (unevaluated_p): Return true for REQUIRES_EXPR.\n+\t* decl.c (local_variable_p_walkfn): Don't walk into unevaluated\n+\toperands.\n+\t* parser.c (cp_parser_primary_expression) <case CPP_NAME>: Never\n+\treject uses of local variables in unevaluated contexts.\n+\t* tree.c (cp_walk_subtrees) <case REQUIRES_EXPR>: Increment\n+\tcp_unevaluated_operand.  Use cp_walk_tree directly instead of\n+\tWALK_SUBTREE to avoid the goto.  Use REQUIRES_EXPR_REQS instead\n+\tof TREE_OPERAND directly.\n+\n+2021-08-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/101786\n+\t* decl2.c (var_defined_without_dynamic_init): Return true for\n+\tDECL_DECLARED_CONSTINIT_P with complete type and trivial destructor.\n+\n+2021-08-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/79501\n+\t* parser.c (maybe_adjust_declarator_for_dguide): New, split\n+\tout from ...\n+\t(cp_parser_init_declarator): ... here.\n+\t(cp_parser_member_declaration): Use it.\n+\n+2021-08-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/89062\n+\t* parser.c (cp_parser_parameter_declaration_list): Don't call\n+\tgrokdeclarator if cp_parser_error_occurred.\n+\t(cp_parser_parameter_declaration): Simulate an error if we see\n+\tthe beginning of a CTAD form, i.e. if we see an opening brace\n+\tafter the decl-specifier-seq and the type is a CTAD placeholder.\n+\n 2021-08-10  Jakub Jelinek  <jakub@redhat.com>\n \n \t* parser.c (cp_parser_member_declaration): Move odsd declaration"}, {"sha": "5f9623bf5c79003039c230b1b20bb49d90fac63f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f87503427e27bb069bd1841100f3c53440d51a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f87503427e27bb069bd1841100f3c53440d51a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=58f87503427e27bb069bd1841100f3c53440d51a", "patch": "@@ -1,3 +1,15 @@\n+2021-08-11  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* iso-c-binding.def (c_float128, c_float128_complex): Check\n+\tfloat128_type_node instead of gfc_float128_type_node.\n+\t* trans-types.c (gfc_init_kinds, gfc_build_real_type):\n+\tUpdate comments re supported 128-bit floating-point types.\n+\n+2021-08-11  Richard Biener  <rguenther@suse.de>\n+\n+\t* trans-common.c (create_common): Set TREE_THIS_VOLATILE on the\n+\tCOMPONENT_REF if the field is volatile.\n+\n 2021-08-07  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/68568"}, {"sha": "eaae0838709d1a3b265eac3db059b3c0146cdc28", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f87503427e27bb069bd1841100f3c53440d51a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f87503427e27bb069bd1841100f3c53440d51a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=58f87503427e27bb069bd1841100f3c53440d51a", "patch": "@@ -1,3 +1,55 @@\n+2021-08-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101725\n+\tDR 2082\n+\t* g++.dg/DRs/dr2082.C: New test.\n+\t* g++.dg/cpp2a/concepts-uneval4.C: New test.\n+\n+2021-08-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/101786\n+\t* g++.dg/cpp2a/constinit16.C: New test.\n+\n+2021-08-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/79501\n+\t* g++.dg/cpp1z/class-deduction98.C: New test.\n+\n+2021-08-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/89062\n+\t* g++.dg/cpp1z/class-deduction97.C: New test.\n+\n+2021-08-11  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/lto/pr48622_1.c: Provide non-LTO definition\n+\tof ashift_qi_1.\n+\n+2021-08-11  Jan Hubicka  <jh@suse.cz>\n+\n+\t* c-c++-common/modref-dse.c: New test.\n+\n+2021-08-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/101858\n+\t* gcc.dg/pr101858.c: New testcase.\n+\n+2021-08-11  prathamesh.kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR target/66791\n+\t* gcc.target/arm/pr51534.c: Adjust test.\n+\n+2021-08-11  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/98309\n+\t* gcc.target/i386/pr98309-1.c: New test.\n+\t* gcc.target/i386/pr98309-2.c: New test.\n+\n+2021-08-11  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\tPR middle-end/101674\n+\t* gcc.dg/uninit-pred-9_b.c: Xfail for cris-*-* too.\n+\n 2021-08-10  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR libfortran/101305"}, {"sha": "bf7c4b4b25d7c89b3202aaac9a95913a7657c2be", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f87503427e27bb069bd1841100f3c53440d51a/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f87503427e27bb069bd1841100f3c53440d51a/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=58f87503427e27bb069bd1841100f3c53440d51a", "patch": "@@ -1,3 +1,8 @@\n+2021-08-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* sanitizer_common/sanitizer_common_interceptors.inc: Cherry-pick\n+\tllvm-project revision faef0d042f523357fe5590e7cb6a8391cf0351a8.\n+\n 2021-08-03  Mos\u00e8 Giordano  <mose@gnu.org>\n \n \tPR sanitizer/101111"}, {"sha": "7d480a43b11743ba0fd686ddc46dc3c3e2a8bbaa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f87503427e27bb069bd1841100f3c53440d51a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f87503427e27bb069bd1841100f3c53440d51a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=58f87503427e27bb069bd1841100f3c53440d51a", "patch": "@@ -1,3 +1,21 @@\n+2021-08-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/101866\n+\t* testsuite/experimental/random/randint.cc: Loop and retry if\n+\treseed() produces the same sequence.\n+\n+2021-08-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/type_traits (__cpp_lib_is_pointer_interconvertible)\n+\t(is_pointer_interconvertible_base_of_v)\n+\t(is_pointer_interconvertible_base_of): Define for C++20.\n+\t* include/std/version (__cpp_lib_is_pointer_interconvertible):\n+\tDefine.\n+\t* testsuite/23_containers/span/layout_compat.cc: Use correct\n+\tfeature test macro for std::is_layout_compatible_v.\n+\t* testsuite/20_util/is_pointer_interconvertible/value.cc: New test.\n+\t* testsuite/20_util/is_pointer_interconvertible/version.cc: New test.\n+\n 2021-08-09  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/regex.h (basic_regex::transform_primary): Use"}]}