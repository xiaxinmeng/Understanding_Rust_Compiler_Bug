{"sha": "fc72d1ed3c8b11437981487755a7d6edfaf06d22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM3MmQxZWQzYzhiMTE0Mzc5ODE0ODc3NTVhN2Q2ZWRmYWYwNmQyMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-11-16T21:30:41Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-11-16T21:30:41Z"}, "message": "Fix tuple decomposition decltype.\n\n\t* decl.c (store_decomp_type, lookup_decomp_type): New.\n\t(cp_finish_decomp): Call store_decomp_type.\n\t* semantics.c (finish_decltype_type): Call lookup_decomp_type.\n\t* cp-tree.h: Declare lookup_decomp_type.\n\nFrom-SVN: r242513", "tree": {"sha": "2550dbae7c32ca1011f1b45cf788c648f8f3c47d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2550dbae7c32ca1011f1b45cf788c648f8f3c47d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc72d1ed3c8b11437981487755a7d6edfaf06d22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc72d1ed3c8b11437981487755a7d6edfaf06d22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc72d1ed3c8b11437981487755a7d6edfaf06d22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc72d1ed3c8b11437981487755a7d6edfaf06d22/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e2be5aefcc78b213c2f44e50cbec2c799f40f8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e2be5aefcc78b213c2f44e50cbec2c799f40f8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e2be5aefcc78b213c2f44e50cbec2c799f40f8b"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "fdbd1536002a9db68fb04a06692762f9370829ec", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc72d1ed3c8b11437981487755a7d6edfaf06d22/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc72d1ed3c8b11437981487755a7d6edfaf06d22/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fc72d1ed3c8b11437981487755a7d6edfaf06d22", "patch": "@@ -1,3 +1,10 @@\n+2016-11-16  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl.c (store_decomp_type, lookup_decomp_type): New.\n+\t(cp_finish_decomp): Call store_decomp_type.\n+\t* semantics.c (finish_decltype_type): Call lookup_decomp_type.\n+\t* cp-tree.h: Declare lookup_decomp_type.\n+\n 2016-11-15  Jakub Jelinek  <jakub@redhat.com>\n \n \t* decl.c (cp_finish_decomp): For DECL_NAMESPACE_SCOPE_P decl,"}, {"sha": "cb1b9faef0ef8963d25981bdbadea3d5f40c74b4", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc72d1ed3c8b11437981487755a7d6edfaf06d22/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc72d1ed3c8b11437981487755a7d6edfaf06d22/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=fc72d1ed3c8b11437981487755a7d6edfaf06d22", "patch": "@@ -5808,6 +5808,7 @@ extern tree start_decl\t\t\t\t(const cp_declarator *, cp_decl_specifier_seq *, int,\n extern void start_decl_1\t\t\t(tree, bool);\n extern bool check_array_initializer\t\t(tree, tree, tree);\n extern void cp_finish_decl\t\t\t(tree, tree, bool, tree, int);\n+extern tree lookup_decomp_type\t\t\t(tree);\n extern void cp_finish_decomp\t\t\t(tree, tree, unsigned int);\n extern int cp_complete_array_type\t\t(tree *, tree, bool);\n extern int cp_complete_array_type_or_error\t(tree *, tree, bool, tsubst_flags_t);"}, {"sha": "c54a2de0af666f740c4864f49935a97ca885b0e9", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc72d1ed3c8b11437981487755a7d6edfaf06d22/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc72d1ed3c8b11437981487755a7d6edfaf06d22/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=fc72d1ed3c8b11437981487755a7d6edfaf06d22", "patch": "@@ -7293,6 +7293,22 @@ get_tuple_decomp_init (tree decl, unsigned i)\n     }\n }\n \n+/* It's impossible to recover the decltype of a tuple decomposition variable\n+   based on the actual type of the variable, so store it in a hash table.  */\n+static GTY(()) hash_map<tree,tree> *decomp_type_table;\n+static void\n+store_decomp_type (tree v, tree t)\n+{\n+  if (!decomp_type_table)\n+    decomp_type_table = hash_map<tree,tree>::create_ggc (13);\n+  decomp_type_table->put (v, t);\n+}\n+tree\n+lookup_decomp_type (tree v)\n+{\n+  return *decomp_type_table->get (v);\n+}\n+\n /* Finish a decomposition declaration.  DECL is the underlying declaration\n    \"e\", FIRST is the head of a chain of decls for the individual identifiers\n    chained through DECL_CHAIN in reverse order and COUNT is the number of\n@@ -7467,6 +7483,8 @@ cp_finish_decomp (tree decl, tree first, unsigned int count)\n \t\t      v[i]);\n \t      goto error_out;\n \t    }\n+\t  /* Save the decltype away before reference collapse.  */\n+\t  store_decomp_type (v[i], eltype);\n \t  eltype = cp_build_reference_type (eltype, !lvalue_p (init));\n \t  TREE_TYPE (v[i]) = eltype;\n \t  layout_decl (v[i], 0);"}, {"sha": "96c67a59a009279f22a626c2da5c88e5d5540772", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc72d1ed3c8b11437981487755a7d6edfaf06d22/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc72d1ed3c8b11437981487755a7d6edfaf06d22/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=fc72d1ed3c8b11437981487755a7d6edfaf06d22", "patch": "@@ -8902,7 +8902,7 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p,\n \t    return unlowered_expr_type (expr);\n \t  else\n \t    /* Expr is a reference variable for the tuple case.  */\n-\t    return non_reference (TREE_TYPE (expr));\n+\t    return lookup_decomp_type (expr);\n \t}\n \n       switch (TREE_CODE (expr))"}, {"sha": "484094b6c583722ffeba74e8f83a3afccc0791e3", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp17.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc72d1ed3c8b11437981487755a7d6edfaf06d22/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc72d1ed3c8b11437981487755a7d6edfaf06d22/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp17.C?ref=fc72d1ed3c8b11437981487755a7d6edfaf06d22", "patch": "@@ -0,0 +1,15 @@\n+// { dg-options -std=c++1z }\n+\n+#include <tuple>\n+\n+template <typename, typename> struct same_type;\n+template <typename T> struct same_type<T, T> {};\n+\n+int main() {\n+  int i;\n+  std::tuple<int,int&,int&&> tuple = { 1, i, 1 };\n+  auto &[v, r, rr] = tuple;\n+  same_type<decltype(v), int>{};\n+  same_type<decltype(r), int&>{};\n+  same_type<decltype(rr), int&&>{};\n+}"}, {"sha": "0a82a4aceb8d513ac58d05a36b28f20240eb0fb4", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc72d1ed3c8b11437981487755a7d6edfaf06d22/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc72d1ed3c8b11437981487755a7d6edfaf06d22/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=fc72d1ed3c8b11437981487755a7d6edfaf06d22", "patch": "@@ -2457,8 +2457,7 @@ extern void decl_value_expr_insert (tree, tree);\n \n /* In a VAR_DECL or PARM_DECL, the location at which the value may be found,\n    if transformations have made this more complicated than evaluating the\n-   decl itself.  This should only be used for debugging; once this field has\n-   been set, the decl itself may not legitimately appear in the function.  */\n+   decl itself.  */\n #define DECL_HAS_VALUE_EXPR_P(NODE) \\\n   (TREE_CHECK3 (NODE, VAR_DECL, PARM_DECL, RESULT_DECL) \\\n    ->decl_common.decl_flag_2)"}]}