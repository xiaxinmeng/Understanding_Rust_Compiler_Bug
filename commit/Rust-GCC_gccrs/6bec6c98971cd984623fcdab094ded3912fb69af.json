{"sha": "6bec6c98971cd984623fcdab094ded3912fb69af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJlYzZjOTg5NzFjZDk4NDYyM2ZjZGFiMDk0ZGVkMzkxMmZiNjlhZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-02T14:10:05Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-02T14:10:05Z"}, "message": "sse.md (V): New mode iterator.\n\n\t* config/i386/sse.md (V): New mode iterator.\n\t(V_128): Rename from SSEMODE.  Make V2DF mode conditional on\n\tTARGET_SSE2.\n\t(V_256): Rename from AVX256MODE.\n\t(VF): Make V4SF mode unconditional.  Add TARGET_SSE instruction\n\tcondition to all users.\n\t(VF1): Ditto.\n\t(VF2): Make V2DF mode unconditional.  Add TARGET_SSE2 instruction\n\tcondition to all users.\n\t(VF_128): Make V4SF mode unconditional.\n\t(VF_256): Rename from AVX256MODEF2P.\n\t(VI4F_128): Rename from SSEMODE4S.\n\t(VI8F_128): Rename from SSEMODE2D.\n\t(VI4F_256): Rename from AVX256MODE8P.\n\t(VI8F_256): Rename from AVX256MODE4P.\n\t(avxsizesuffix): Add V16HI, V4DI, V8HI and V2DI modes.\n\t(ssescalarmodesuffix): Remove SF and DF modes.\n\t(SSEMODE124): Remove.\n\t(SSEMODE1248): Ditto.\n\t(SSEMODEF2P): Ditto.\n\t(AVXMODEF2P): Ditto.\n\t(AVXMODEFDP): Ditto.\n\t(AVXMODEFSP): Ditto.\n\t(VEC_EXTRACT_MODE): Make V16QI, V8HI, V4SI, V2DI, V4SF and V2DF modes\n\tunconditional.\n\t(VEC_EXTRACT_EVENODD_MODE): Rename from SSEMODE_EO.  Make V4SF mode\n\tunconditional.\n\t(xop_pcmov_<mode><avxsizesuffix>): Merge from xop_pcmov_<mode> and\n\txop_pcmov_<mode>256.  Use V mode iterator.\n\n\tAdjust RTX patterns globally for renamed mode attributes.\n\nFrom-SVN: r173253", "tree": {"sha": "0494966377303f63bb7c2676da3bf326f6914abc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0494966377303f63bb7c2676da3bf326f6914abc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bec6c98971cd984623fcdab094ded3912fb69af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bec6c98971cd984623fcdab094ded3912fb69af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bec6c98971cd984623fcdab094ded3912fb69af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bec6c98971cd984623fcdab094ded3912fb69af/comments", "author": null, "committer": null, "parents": [{"sha": "2dfdcb4bebb6ce3a5ee2da2b8aa7166df860d4d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dfdcb4bebb6ce3a5ee2da2b8aa7166df860d4d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dfdcb4bebb6ce3a5ee2da2b8aa7166df860d4d2"}], "stats": {"total": 735, "additions": 377, "deletions": 358}, "files": [{"sha": "3279294ab82e88c4e54b5df0bc071844ffa52c32", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bec6c98971cd984623fcdab094ded3912fb69af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bec6c98971cd984623fcdab094ded3912fb69af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6bec6c98971cd984623fcdab094ded3912fb69af", "patch": "@@ -1,3 +1,37 @@\n+2011-05-02  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (V): New mode iterator.\n+\t(V_128): Rename from SSEMODE.  Make V2DF mode conditional on\n+\tTARGET_SSE2.\n+\t(V_256): Rename from AVX256MODE.\n+\t(VF): Make V4SF mode unconditional.  Add TARGET_SSE instruction\n+\tcondition to all users.\n+\t(VF1): Ditto.\n+\t(VF2): Make V2DF mode unconditional.  Add TARGET_SSE2 instruction\n+\tcondition to all users.\n+\t(VF_128): Make V4SF mode unconditional.\n+\t(VF_256): Rename from AVX256MODEF2P.\n+\t(VI4F_128): Rename from SSEMODE4S.\n+\t(VI8F_128): Rename from SSEMODE2D.\n+\t(VI4F_256): Rename from AVX256MODE8P.\n+\t(VI8F_256): Rename from AVX256MODE4P.\n+\t(avxsizesuffix): Add V16HI, V4DI, V8HI and V2DI modes.\n+\t(ssescalarmodesuffix): Remove SF and DF modes.\n+\t(SSEMODE124): Remove.\n+\t(SSEMODE1248): Ditto.\n+\t(SSEMODEF2P): Ditto.\n+\t(AVXMODEF2P): Ditto.\n+\t(AVXMODEFDP): Ditto.\n+\t(AVXMODEFSP): Ditto.\n+\t(VEC_EXTRACT_MODE): Make V16QI, V8HI, V4SI, V2DI, V4SF and V2DF modes\n+\tunconditional.\n+\t(VEC_EXTRACT_EVENODD_MODE): Rename from SSEMODE_EO.  Make V4SF mode\n+\tunconditional.\n+\t(xop_pcmov_<mode><avxsizesuffix>): Merge from xop_pcmov_<mode> and\n+\txop_pcmov_<mode>256.  Use V mode iterator.\n+\n+\tAdjust RTX patterns globally for renamed mode attributes.\n+\n 2011-05-02  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* haifa-sched.c (sched_emit_insn): Emit insn before first\n@@ -49,7 +83,7 @@\n \tUpdate prototype.\n \t(ira_allocate_and_set_costs): Change aclass argument type form\n \t'enum reg_class' to reg_class_t.\n-\t* ira-build.c (ira_allocate_cost_vector, ira_free_cost_vector): \n+\t* ira-build.c (ira_allocate_cost_vector, ira_free_cost_vector):\n \tChange aclass argument type to reg_class_t.\n \t(update_conflict_hard_reg_costs): Change type aclass and pref vars\n \tto reg_class_t.\n@@ -87,7 +121,7 @@\n \n 2011-04-30  Jan Hubicka  <jh@suse.cz>\n \n-\tPR middle-end/48752 \n+\tPR middle-end/48752\n \t* ipa-inline.c (early_inliner): Disable when doing late\n \taddition of function.\n \n@@ -367,13 +401,11 @@\n \ti[34567]86-*-gnu* | i[34567]86-*-kopensolaris*-gnu,\n \tx86_64-*-kfreebsd*-gnu | x86_64-*-knetbsd*-gnu): Don't use\n \tlinux*.h headers.\n-\t* config/gnu-user.h (TARGET_C99_FUNCTIONS, TARGET_HAS_SINCOS):\n-\tDefine.\n+\t* config/gnu-user.h (TARGET_C99_FUNCTIONS, TARGET_HAS_SINCOS): Define.\n \t* config/i386/gnu.h (MD_UNWIND_SUPPORT): Don't undefine.\n \t* config/i386/kfreebsd-gnu.h (MD_UNWIND_SUPPORT): Don't undefine.\n \t* config/i386/knetbsd-gnu.h (MD_UNWIND_SUPPORT): Don't undefine.\n-\t* config/i386/kopensolaris-gnu.h (MD_UNWIND_SUPPORT): Don't\n-\tundefine.\n+\t* config/i386/kopensolaris-gnu.h (MD_UNWIND_SUPPORT): Don't undefine.\n \t* config/i386/linux-unwind.h (x86_fallback_frame_state): Don't use\n \tREG_NAME.\n \t* config/i386/linux.h (REG_NAME): Don't define.\n@@ -383,8 +415,8 @@\n \n 2011-04-28  Jan Hubicka  <jh@suse.cz>\n \n-\t* ipa-inline-analysis.c (will_be_nonconstant_predicate): Take nonconstant_names\n-\tarray.\n+\t* ipa-inline-analysis.c (will_be_nonconstant_predicate): Take\n+\tnonconstant_names array.\n \t(estimate_function_body_sizes): Build nonconstant_names array; handle\n \tBUILT_IN_CONSTANT_P.\n \n@@ -396,7 +428,7 @@\n \n \t* tree-ssa-structalias.c (solve_constraints): Build succ graph\n \tas late as possible.\n- \n+\n 2011-04-28  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-structalias.c (dump_constraint): Don't end the line.\n@@ -762,7 +794,7 @@\n \n \t* c-family/c-common.c (struct c_common_resword): Add __underlying_type.\n \t* c-family/c-common.h (enum rid): Add RID_UNDERLYING_TYPE.\n-        * doc/extend.texi: Document __underlying_type.\n+\t* doc/extend.texi: Document __underlying_type.\n \n 2011-04-25  Segher Boessenkool  <segher@kernel.crashing.org>\n "}, {"sha": "894afc157a8c078bcb2da5ac8223c1f68e055968", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 335, "deletions": 348, "changes": 683, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bec6c98971cd984623fcdab094ded3912fb69af/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bec6c98971cd984623fcdab094ded3912fb69af/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=6bec6c98971cd984623fcdab094ded3912fb69af", "patch": "@@ -18,7 +18,7 @@\n ;; along with GCC; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>.\n \n-;; All vector modes including V1TImode.\n+;; All vector modes including V1TImode, used in move patterns.\n (define_mode_iterator V16\n   [(V32QI \"TARGET_AVX\") V16QI\n    (V16HI \"TARGET_AVX\") V8HI\n@@ -28,22 +28,43 @@\n    (V8SF \"TARGET_AVX\") V4SF\n    (V4DF \"TARGET_AVX\") V2DF])\n \n+;; All vector modes\n+(define_mode_iterator V\n+  [(V32QI \"TARGET_AVX\") V16QI\n+   (V16HI \"TARGET_AVX\") V8HI\n+   (V8SI \"TARGET_AVX\") V4SI\n+   (V4DI \"TARGET_AVX\") V2DI\n+   (V8SF \"TARGET_AVX\") V4SF\n+   (V4DF \"TARGET_AVX\") (V2DF \"TARGET_SSE2\")])\n+\n+;; All 128bit vector modes\n+(define_mode_iterator V_128\n+  [V16QI V8HI V4SI V2DI V4SF (V2DF \"TARGET_SSE2\")])\n+\n+;; All 256bit vector modes\n+(define_mode_iterator V_256\n+  [V32QI V16HI V8SI V4DI V8SF V4DF])\n+\n ;; All vector float modes\n (define_mode_iterator VF\n-  [(V4SF \"TARGET_SSE\") (V2DF \"TARGET_SSE2\")\n-   (V8SF \"TARGET_AVX\") (V4DF \"TARGET_AVX\")])\n+  [(V8SF \"TARGET_AVX\") V4SF\n+   (V4DF \"TARGET_AVX\") (V2DF \"TARGET_SSE2\")])\n \n ;; All SFmode vector float modes\n (define_mode_iterator VF1\n-  [(V4SF \"TARGET_SSE\") (V8SF \"TARGET_AVX\")])\n+  [(V8SF \"TARGET_AVX\") V4SF])\n \n ;; All DFmode vector float modes\n (define_mode_iterator VF2\n-  [(V2DF \"TARGET_SSE2\") (V4DF \"TARGET_AVX\")])\n+  [(V4DF \"TARGET_AVX\") V2DF])\n \n ;; All 128bit vector float modes\n (define_mode_iterator VF_128\n-  [(V4SF \"TARGET_SSE\") (V2DF \"TARGET_SSE2\")])\n+  [V4SF (V2DF \"TARGET_SSE2\")])\n+\n+;; All 256bit vector float modes\n+(define_mode_iterator VF_256\n+  [V8SF V4DF])\n \n ;; All vector integer modes\n (define_mode_iterator VI\n@@ -70,6 +91,12 @@\n (define_mode_iterator VI24_128 [V8HI V4SI])\n (define_mode_iterator VI248_128 [V8HI V4SI V2DI])\n \n+;; Int-float size matches\n+(define_mode_iterator VI4F_128 [V4SI V4SF])\n+(define_mode_iterator VI8F_128 [V2DI V2DF])\n+(define_mode_iterator VI4F_256 [V8SI V8SF])\n+(define_mode_iterator VI8F_256 [V4DI V4DF])\n+\n ;; Mapping from float mode to required SSE level\n (define_mode_attr sse\n   [(SF \"sse\") (DF \"sse2\")\n@@ -88,8 +115,8 @@\n    (V8SF \"avx\") (V4DF \"avx\")])\n \n (define_mode_attr avxsizesuffix\n-  [(V32QI \"256\") (V8SI \"256\")\n-   (V16QI \"\")  (V4SI \"\")\n+  [(V32QI \"256\") (V16HI \"256\") (V8SI \"256\") (V4DI \"256\")\n+   (V16QI \"\") (V8HI \"\") (V4SI \"\") (V2DI \"\")\n    (V8SF \"256\") (V4DF \"256\")\n    (V4SF \"\") (V2DF \"\")])\n  \n@@ -135,8 +162,7 @@\n \n ;; SSE scalar suffix for vector modes\n (define_mode_attr ssescalarmodesuffix\n-  [(SF \"ss\") (DF \"sd\")\n-   (V8SF \"ss\") (V4DF \"sd\")\n+  [(V8SF \"ss\") (V4DF \"sd\")\n    (V4SF \"ss\") (V2DF \"sd\")\n    (V8SI \"ss\") (V4DI \"sd\")\n    (V4SI \"d\")])\n@@ -161,59 +187,12 @@\n \n \n \n-\n-;; All 16-byte vector modes handled by SSE\n-(define_mode_iterator SSEMODE [V16QI V8HI V4SI V2DI V4SF V2DF])\n-\n-;; All 32-byte vector modes handled by AVX\n-(define_mode_iterator AVX256MODE [V32QI V16HI V8SI V4DI V8SF V4DF])\n-\n-;; All vector modes handled by AVX\n-(define_mode_iterator AVXMODE\n-  [V16QI V8HI V4SI V2DI V4SF V2DF V32QI V16HI V8SI V4DI V8SF V4DF])\n-\n ;; Mix-n-match\n-(define_mode_iterator SSEMODE124 [V16QI V8HI V4SI])\n-(define_mode_iterator SSEMODE1248 [V16QI V8HI V4SI V2DI])\n-(define_mode_iterator SSEMODEF2P [V4SF V2DF])\n-\n-(define_mode_iterator AVX256MODEF2P [V8SF V4DF])\n (define_mode_iterator AVX256MODE2P [V8SI V8SF V4DF])\n (define_mode_iterator AVX256MODE24P [V8SI V8SF V4DI V4DF])\n-(define_mode_iterator AVX256MODE4P [V4DI V4DF])\n-(define_mode_iterator AVX256MODE8P [V8SI V8SF])\n-(define_mode_iterator AVXMODEF2P [V4SF V2DF V8SF V4DF])\n-(define_mode_iterator AVXMODEFDP [V2DF V4DF])\n-(define_mode_iterator AVXMODEFSP [V4SF V8SF])\n \n (define_mode_iterator FMAMODE [SF DF V4SF V2DF V8SF V4DF])\n \n-;; Int-float size matches\n-(define_mode_iterator SSEMODE4S [V4SF V4SI])\n-(define_mode_iterator SSEMODE2D [V2DF V2DI])\n-\n-;; Modes handled by vec_extract_even/odd pattern.\n-(define_mode_iterator SSEMODE_EO\n-  [(V4SF \"TARGET_SSE\")\n-   (V2DF \"TARGET_SSE2\")\n-   (V2DI \"TARGET_SSE2\") (V4SI \"TARGET_SSE2\")\n-   (V8HI \"TARGET_SSE2\") (V16QI \"TARGET_SSE2\")\n-   (V4DF \"TARGET_AVX\") (V8SF \"TARGET_AVX\")])\n-\n-;; Modes handled by storent patterns.\n-(define_mode_iterator STORENT_MODE\n-  [(SF \"TARGET_SSE4A\") (DF \"TARGET_SSE4A\")\n-   (SI \"TARGET_SSE2\") (V2DI \"TARGET_SSE2\")\n-   (V4SF \"TARGET_SSE\") (V2DF \"TARGET_SSE2\")\n-   (V4DF \"TARGET_AVX\") (V8SF \"TARGET_AVX\")])\n-\n-;; Modes handled by vector extract patterns.\n-(define_mode_iterator VEC_EXTRACT_MODE\n-  [(V2DI \"TARGET_SSE\") (V4SI \"TARGET_SSE\")\n-   (V8HI \"TARGET_SSE\") (V16QI \"TARGET_SSE\")\n-   (V2DF \"TARGET_SSE\") (V4SF \"TARGET_SSE\")\n-   (V4DF \"TARGET_AVX\") (V8SF \"TARGET_AVX\")])\n-\n ;; Patterns whose name begins with \"sse{,2,3}_\" are invoked by intrinsics.\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n@@ -403,7 +382,7 @@\n \t(unspec:VF\n \t  [(match_operand:VF 1 \"nonimmediate_operand\" \"\")]\n \t  UNSPEC_MOVU))]\n-  \"\"\n+  \"TARGET_SSE\"\n {\n   if (MEM_P (operands[0]) && MEM_P (operands[1]))\n     operands[1] = force_reg (<MODE>mode, operands[1]);\n@@ -414,7 +393,7 @@\n \t(unspec:VF\n \t  [(match_operand:VF 1 \"nonimmediate_operand\" \"xm,x\")]\n \t  UNSPEC_MOVU))]\n-  \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"TARGET_SSE && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"%vmovu<ssemodesuffix>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"movu\" \"1\")\n@@ -507,11 +486,19 @@\n ; that directly map to insns are defined; it would be possible to\n ; define patterns for other modes that would expand to several insns.\n \n+;; Modes handled by storent patterns.\n+(define_mode_iterator STORENT_MODE\n+  [(SI \"TARGET_SSE2\") (SF \"TARGET_SSE4A\") (DF \"TARGET_SSE4A\")\n+   (V2DI \"TARGET_SSE2\")\n+   (V8SF \"TARGET_AVX\") V4SF\n+   (V4DF \"TARGET_AVX\") (V2DF \"TARGET_SSE2\")])\n+\n (define_expand \"storent<mode>\"\n   [(set (match_operand:STORENT_MODE 0 \"memory_operand\" \"\")\n \t(unspec:STORENT_MODE\n \t  [(match_operand:STORENT_MODE 1 \"register_operand\" \"\")]\n-\t  UNSPEC_MOVNT))])\n+\t  UNSPEC_MOVNT))]\n+  \"TARGET_SSE\")\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n@@ -523,15 +510,15 @@\n   [(set (match_operand:VF 0 \"register_operand\" \"\")\n \t(absneg:VF\n \t  (match_operand:VF 1 \"register_operand\" \"\")))]\n-  \"\"\n+  \"TARGET_SSE\"\n   \"ix86_expand_fp_absneg_operator (<CODE>, <MODE>mode, operands); DONE;\")\n \n (define_insn_and_split \"*absneg<mode>2\"\n   [(set (match_operand:VF 0 \"register_operand\" \"=x,x,x,x\")\n \t(match_operator:VF 3 \"absneg_operator\"\n \t  [(match_operand:VF 1 \"nonimmediate_operand\" \"0, xm,x, m\")]))\n    (use (match_operand:VF 2 \"nonimmediate_operand\"    \"xm,0, xm,x\"))]\n-  \"\"\n+  \"TARGET_SSE\"\n   \"#\"\n   \"reload_completed\"\n   [(const_int 0)]\n@@ -569,15 +556,15 @@\n \t(plusminus:VF\n \t  (match_operand:VF 1 \"nonimmediate_operand\" \"\")\n \t  (match_operand:VF 2 \"nonimmediate_operand\" \"\")))]\n-  \"\"\n+  \"TARGET_SSE\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n (define_insn \"*<plusminus_insn><mode>3\"\n   [(set (match_operand:VF 0 \"register_operand\" \"=x,x\")\n \t(plusminus:VF\n \t  (match_operand:VF 1 \"nonimmediate_operand\" \"<comm>0,x\")\n \t  (match_operand:VF 2 \"nonimmediate_operand\" \"xm,xm\")))]\n-  \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  \"TARGET_SSE && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"@\n    <plusminus_mnemonic><ssemodesuffix>\\t{%2, %0|%0, %2}\n    v<plusminus_mnemonic><ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n@@ -594,7 +581,7 @@\n \t    (match_operand:VF_128 2 \"nonimmediate_operand\" \"xm,xm\"))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n-  \"\"\n+  \"TARGET_SSE\"\n   \"@\n    <plusminus_mnemonic><ssescalarmodesuffix>\\t{%2, %0|%0, %2}\n    v<plusminus_mnemonic><ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n@@ -608,15 +595,15 @@\n \t(mult:VF\n \t  (match_operand:VF 1 \"nonimmediate_operand\" \"\")\n \t  (match_operand:VF 2 \"nonimmediate_operand\" \"\")))]\n-  \"\"\n+  \"TARGET_SSE\"\n   \"ix86_fixup_binary_operands_no_copy (MULT, <MODE>mode, operands);\")\n \n (define_insn \"*mul<mode>3\"\n   [(set (match_operand:VF 0 \"register_operand\" \"=x,x\")\n \t(mult:VF\n \t  (match_operand:VF 1 \"nonimmediate_operand\" \"%0,x\")\n \t  (match_operand:VF 2 \"nonimmediate_operand\" \"xm,xm\")))]\n-  \"ix86_binary_operator_ok (MULT, <MODE>mode, operands)\"\n+  \"TARGET_SSE && ix86_binary_operator_ok (MULT, <MODE>mode, operands)\"\n   \"@\n    mul<ssemodesuffix>\\t{%2, %0|%0, %2}\n    vmul<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n@@ -633,7 +620,7 @@\n \t    (match_operand:VF_128 2 \"nonimmediate_operand\" \"xm,xm\"))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n-  \"\"\n+  \"TARGET_SSE\"\n   \"@\n    mul<ssescalarmodesuffix>\\t{%2, %0|%0, %2}\n    vmul<ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n@@ -646,14 +633,14 @@\n   [(set (match_operand:VF2 0 \"register_operand\" \"\")\n \t(div:VF2 (match_operand:VF2 1 \"register_operand\" \"\")\n \t\t (match_operand:VF2 2 \"nonimmediate_operand\" \"\")))]\n-  \"\"\n+  \"TARGET_SSE2\"\n   \"ix86_fixup_binary_operands_no_copy (DIV, <MODE>mode, operands);\")\n \n (define_expand \"div<mode>3\"\n   [(set (match_operand:VF1 0 \"register_operand\" \"\")\n \t(div:VF1 (match_operand:VF1 1 \"register_operand\" \"\")\n \t\t (match_operand:VF1 2 \"nonimmediate_operand\" \"\")))]\n-  \"\"\n+  \"TARGET_SSE\"\n {\n   ix86_fixup_binary_operands_no_copy (DIV, <MODE>mode, operands);\n \n@@ -671,7 +658,7 @@\n \t(div:VF\n \t  (match_operand:VF 1 \"register_operand\" \"0,x\")\n \t  (match_operand:VF 2 \"nonimmediate_operand\" \"xm,xm\")))]\n-  \"\"\n+  \"TARGET_SSE\"\n   \"@\n    div<ssemodesuffix>\\t{%2, %0|%0, %2}\n    vdiv<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n@@ -688,7 +675,7 @@\n \t    (match_operand:VF_128 2 \"nonimmediate_operand\" \"xm,xm\"))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n-  \"\"\n+  \"TARGET_SSE\"\n   \"@\n    div<ssescalarmodesuffix>\\t{%2, %0|%0, %2}\n    vdiv<ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n@@ -701,7 +688,7 @@\n   [(set (match_operand:VF1 0 \"register_operand\" \"=x\")\n \t(unspec:VF1\n \t  [(match_operand:VF1 1 \"nonimmediate_operand\" \"xm\")] UNSPEC_RCP))]\n-  \"\"\n+  \"TARGET_SSE\"\n   \"%vrcpps\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"atom_sse_attr\" \"rcp\")\n@@ -727,12 +714,13 @@\n \n (define_expand \"sqrt<mode>2\"\n   [(set (match_operand:VF2 0 \"register_operand\" \"\")\n-\t(sqrt:VF2 (match_operand:VF2 1 \"nonimmediate_operand\" \"\")))])\n+\t(sqrt:VF2 (match_operand:VF2 1 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_SSE2\")\n \n (define_expand \"sqrt<mode>2\"\n   [(set (match_operand:VF1 0 \"register_operand\" \"\")\n \t(sqrt:VF1 (match_operand:VF1 1 \"nonimmediate_operand\" \"\")))]\n-  \"\"\n+  \"TARGET_SSE\"\n {\n   if (TARGET_SSE_MATH && TARGET_RECIP && !optimize_insn_for_size_p ()\n       && flag_finite_math_only && !flag_trapping_math\n@@ -746,7 +734,7 @@\n (define_insn \"<sse>_sqrt<mode>2\"\n   [(set (match_operand:VF 0 \"register_operand\" \"=x\")\n \t(sqrt:VF (match_operand:VF 1 \"nonimmediate_operand\" \"xm\")))]\n-  \"\"\n+  \"TARGET_SSE\"\n   \"%vsqrt<ssemodesuffix>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"atom_sse_attr\" \"sqrt\")\n@@ -760,7 +748,7 @@\n \t    (match_operand:VF_128 1 \"nonimmediate_operand\" \"xm,xm\"))\n \t  (match_operand:VF_128 2 \"register_operand\" \"0,x\")\n \t  (const_int 1)))]\n-  \"\"\n+  \"TARGET_SSE\"\n   \"@\n    sqrt<ssescalarmodesuffix>\\t{%1, %0|%0, %1}\n    vsqrt<ssescalarmodesuffix>\\t{%1, %2, %0|%0, %2, %1}\"\n@@ -784,7 +772,7 @@\n   [(set (match_operand:VF1 0 \"register_operand\" \"=x\")\n \t(unspec:VF1\n \t  [(match_operand:VF1 1 \"nonimmediate_operand\" \"xm\")] UNSPEC_RSQRT))]\n-  \"\"\n+  \"TARGET_SSE\"\n   \"%vrsqrtps\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"prefix\" \"maybe_vex\")\n@@ -815,7 +803,7 @@\n \t(smaxmin:VF\n \t  (match_operand:VF 1 \"nonimmediate_operand\" \"\")\n \t  (match_operand:VF 2 \"nonimmediate_operand\" \"\")))]\n-  \"\"\n+  \"TARGET_SSE\"\n {\n   if (!flag_finite_math_only)\n     operands[1] = force_reg (<MODE>mode, operands[1]);\n@@ -827,7 +815,7 @@\n \t(smaxmin:VF\n \t  (match_operand:VF 1 \"nonimmediate_operand\" \"%0,x\")\n \t  (match_operand:VF 2 \"nonimmediate_operand\" \"xm,xm\")))]\n-  \"flag_finite_math_only\n+  \"TARGET_SSE && flag_finite_math_only\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"@\n    <maxmin_float><ssemodesuffix>\\t{%2, %0|%0, %2}\n@@ -842,7 +830,7 @@\n \t(smaxmin:VF\n \t  (match_operand:VF 1 \"register_operand\" \"0,x\")\n \t  (match_operand:VF 2 \"nonimmediate_operand\" \"xm,xm\")))]\n-  \"!flag_finite_math_only\"\n+  \"TARGET_SSE && !flag_finite_math_only\"\n   \"@\n    <maxmin_float><ssemodesuffix>\\t{%2, %0|%0, %2}\n    v<maxmin_float><ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n@@ -859,7 +847,7 @@\n \t    (match_operand:VF_128 2 \"nonimmediate_operand\" \"xm,xm\"))\n \t (match_dup 1)\n \t (const_int 1)))]\n-  \"\"\n+  \"TARGET_SSE\"\n   \"@\n    <maxmin_float><ssescalarmodesuffix>\\t{%2, %0|%0, %2}\n    v<maxmin_float><ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n@@ -880,7 +868,7 @@\n \t  [(match_operand:VF 1 \"register_operand\" \"0,x\")\n \t   (match_operand:VF 2 \"nonimmediate_operand\" \"xm,xm\")]\n \t UNSPEC_IEEE_MIN))]\n-  \"\"\n+  \"TARGET_SSE\"\n   \"@\n    min<ssemodesuffix>\\t{%2, %0|%0, %2}\n    vmin<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n@@ -895,7 +883,7 @@\n \t  [(match_operand:VF 1 \"register_operand\" \"0,x\")\n \t   (match_operand:VF 2 \"nonimmediate_operand\" \"xm,xm\")]\n \t UNSPEC_IEEE_MAX))]\n-  \"\"\n+  \"TARGET_SSE\"\n   \"@\n    max<ssemodesuffix>\\t{%2, %0|%0, %2}\n    vmax<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n@@ -1205,7 +1193,7 @@\n \t(match_operator:VF 3 \"sse_comparison_operator\"\n \t  [(match_operand:VF 1 \"register_operand\" \"0,x\")\n \t   (match_operand:VF 2 \"nonimmediate_operand\" \"xm,xm\")]))]\n-  \"\"\n+  \"TARGET_SSE\"\n   \"@\n    cmp%D3<ssemodesuffix>\\t{%2, %0|%0, %2}\n    vcmp%D3<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n@@ -1223,7 +1211,7 @@\n \t    (match_operand:VF_128 2 \"nonimmediate_operand\" \"xm,xm\")])\n \t (match_dup 1)\n \t (const_int 1)))]\n-  \"\"\n+  \"TARGET_SSE\"\n   \"@\n    cmp%D3<ssescalarmodesuffix>\\t{%2, %0|%0, %2}\n    vcmp%D3<ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n@@ -1281,7 +1269,7 @@\n              (match_operand:VF 5 \"nonimmediate_operand\" \"\")])\n           (match_operand:VF 1 \"general_operand\" \"\")\n           (match_operand:VF 2 \"general_operand\" \"\")))]\n-  \"\"\n+  \"TARGET_SSE\"\n {\n   bool ok = ix86_expand_fp_vcond (operands);\n   gcc_assert (ok);\n@@ -1300,7 +1288,7 @@\n \t  (not:VF\n \t    (match_operand:VF 1 \"register_operand\" \"0,x\"))\n \t  (match_operand:VF 2 \"nonimmediate_operand\" \"xm,xm\")))]\n-  \"\"\n+  \"TARGET_SSE\"\n {\n   static char buf[32];\n   const char *insn;\n@@ -1332,15 +1320,15 @@\n \t(any_logic:VF\n \t  (match_operand:VF 1 \"nonimmediate_operand\" \"\")\n \t  (match_operand:VF 2 \"nonimmediate_operand\" \"\")))]\n-  \"\"\n+  \"TARGET_SSE\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n (define_insn \"*<code><mode>3\"\n   [(set (match_operand:VF 0 \"register_operand\" \"=x,x\")\n \t(any_logic:VF\n \t  (match_operand:VF 1 \"nonimmediate_operand\" \"%0,x\")\n \t  (match_operand:VF 2 \"nonimmediate_operand\" \"xm,xm\")))]\n-  \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  \"TARGET_SSE && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n {\n   static char buf[32];\n   const char *insn;\n@@ -1377,7 +1365,7 @@\n \t\t(match_operand:VF 2 \"nonimmediate_operand\" \"\")))\n    (set (match_operand:VF 0 \"register_operand\" \"\")\n \t(ior:VF (match_dup 4) (match_dup 5)))]\n-  \"\"\n+  \"TARGET_SSE\"\n {\n   operands[3] = ix86_build_signbit_mask (<MODE>mode, 1, 0);\n \n@@ -1487,35 +1475,31 @@\n \t  (match_operand:FMAMODE 1 \"nonimmediate_operand\")\n \t  (match_operand:FMAMODE 2 \"nonimmediate_operand\")\n \t  (match_operand:FMAMODE 3 \"nonimmediate_operand\")))]\n-  \"(TARGET_FMA || TARGET_FMA4) && TARGET_SSE_MATH\"\n-  \"\")\n+  \"(TARGET_FMA || TARGET_FMA4) && TARGET_SSE_MATH\")\n \n (define_expand \"fms<mode>4\"\n   [(set (match_operand:FMAMODE 0 \"register_operand\")\n \t(fma:FMAMODE\n \t  (match_operand:FMAMODE 1 \"nonimmediate_operand\")\n \t  (match_operand:FMAMODE 2 \"nonimmediate_operand\")\n \t  (neg:FMAMODE (match_operand:FMAMODE 3 \"nonimmediate_operand\"))))]\n-  \"(TARGET_FMA || TARGET_FMA4) && TARGET_SSE_MATH\"\n-  \"\")\n+  \"(TARGET_FMA || TARGET_FMA4) && TARGET_SSE_MATH\")\n \n (define_expand \"fnma<mode>4\"\n   [(set (match_operand:FMAMODE 0 \"register_operand\")\n \t(fma:FMAMODE\n \t  (neg:FMAMODE (match_operand:FMAMODE 1 \"nonimmediate_operand\"))\n \t  (match_operand:FMAMODE 2 \"nonimmediate_operand\")\n \t  (match_operand:FMAMODE 3 \"nonimmediate_operand\")))]\n-  \"(TARGET_FMA || TARGET_FMA4) && TARGET_SSE_MATH\"\n-  \"\")\n+  \"(TARGET_FMA || TARGET_FMA4) && TARGET_SSE_MATH\")\n \n (define_expand \"fnms<mode>4\"\n   [(set (match_operand:FMAMODE 0 \"register_operand\")\n \t(fma:FMAMODE\n \t  (neg:FMAMODE (match_operand:FMAMODE 1 \"nonimmediate_operand\"))\n \t  (match_operand:FMAMODE 2 \"nonimmediate_operand\")\n \t  (neg:FMAMODE (match_operand:FMAMODE 3 \"nonimmediate_operand\"))))]\n-  \"(TARGET_FMA || TARGET_FMA4) && TARGET_SSE_MATH\"\n-  \"\")\n+  \"(TARGET_FMA || TARGET_FMA4) && TARGET_SSE_MATH\")\n \n ;; The builtin for fma4intrin.h is not constrained by SSE math enabled.\n (define_expand \"fma4i_fmadd_<mode>\"\n@@ -1524,8 +1508,7 @@\n \t  (match_operand:FMAMODE 1 \"nonimmediate_operand\")\n \t  (match_operand:FMAMODE 2 \"nonimmediate_operand\")\n \t  (match_operand:FMAMODE 3 \"nonimmediate_operand\")))]\n-  \"TARGET_FMA || TARGET_FMA4\"\n-  \"\")\n+  \"TARGET_FMA || TARGET_FMA4\")\n \n (define_insn \"*fma4i_fmadd_<mode>\"\n   [(set (match_operand:FMAMODE 0 \"register_operand\" \"=x,x\")\n@@ -1579,12 +1562,12 @@\n ;; entire destination register, with the high-order elements zeroed.\n \n (define_expand \"fma4i_vmfmadd_<mode>\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\")\n-\t(vec_merge:SSEMODEF2P\n-\t  (fma:SSEMODEF2P\n-\t    (match_operand:SSEMODEF2P 1 \"nonimmediate_operand\")\n-\t    (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\")\n-\t    (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\"))\n+  [(set (match_operand:VF_128 0 \"register_operand\")\n+\t(vec_merge:VF_128\n+\t  (fma:VF_128\n+\t    (match_operand:VF_128 1 \"nonimmediate_operand\")\n+\t    (match_operand:VF_128 2 \"nonimmediate_operand\")\n+\t    (match_operand:VF_128 3 \"nonimmediate_operand\"))\n \t  (match_dup 4)\n \t  (const_int 1)))]\n   \"TARGET_FMA4\"\n@@ -1593,59 +1576,59 @@\n })\n \n (define_insn \"*fma4i_vmfmadd_<mode>\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x,x\")\n-\t(vec_merge:SSEMODEF2P\n-\t  (fma:SSEMODEF2P\n-\t    (match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"%x,x\")\n-\t    (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \" x,m\")\n-\t    (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"xm,x\"))\n-\t  (match_operand:SSEMODEF2P 4 \"const0_operand\" \"\")\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=x,x\")\n+\t(vec_merge:VF_128\n+\t  (fma:VF_128\n+\t    (match_operand:VF_128 1 \"nonimmediate_operand\" \"%x,x\")\n+\t    (match_operand:VF_128 2 \"nonimmediate_operand\" \" x,m\")\n+\t    (match_operand:VF_128 3 \"nonimmediate_operand\" \"xm,x\"))\n+\t  (match_operand:VF_128 4 \"const0_operand\" \"\")\n \t  (const_int 1)))]\n   \"TARGET_FMA4\"\n   \"vfmadd<ssescalarmodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*fma4i_vmfmsub_<mode>\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x,x\")\n-\t(vec_merge:SSEMODEF2P\n-\t  (fma:SSEMODEF2P\n-\t    (match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"%x,x\")\n-\t    (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \" x,m\")\n-\t    (neg:SSEMODEF2P\n-\t      (match_operand:SSEMODEF2P 3 \"nonimmediate_operand\" \"xm,x\")))\n-\t  (match_operand:SSEMODEF2P 4 \"const0_operand\" \"\")\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=x,x\")\n+\t(vec_merge:VF_128\n+\t  (fma:VF_128\n+\t    (match_operand:VF_128 1 \"nonimmediate_operand\" \"%x,x\")\n+\t    (match_operand:VF_128 2 \"nonimmediate_operand\" \" x,m\")\n+\t    (neg:VF_128\n+\t      (match_operand:VF_128 3 \"nonimmediate_operand\" \"xm,x\")))\n+\t  (match_operand:VF_128 4 \"const0_operand\" \"\")\n \t  (const_int 1)))]\n   \"TARGET_FMA4\"\n   \"vfmsub<ssescalarmodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*fma4i_vmfnmadd_<mode>\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x,x\")\n-\t(vec_merge:SSEMODEF2P\n-\t  (fma:SSEMODEF2P\n-\t    (neg:SSEMODEF2P\n-\t      (match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"%x,x\"))\n-\t    (match_operand:SSEMODEF2P   2 \"nonimmediate_operand\" \" x,m\")\n-\t    (match_operand:SSEMODEF2P   3 \"nonimmediate_operand\" \"xm,x\"))\n-\t  (match_operand:SSEMODEF2P 4 \"const0_operand\" \"\")\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=x,x\")\n+\t(vec_merge:VF_128\n+\t  (fma:VF_128\n+\t    (neg:VF_128\n+\t      (match_operand:VF_128 1 \"nonimmediate_operand\" \"%x,x\"))\n+\t    (match_operand:VF_128   2 \"nonimmediate_operand\" \" x,m\")\n+\t    (match_operand:VF_128   3 \"nonimmediate_operand\" \"xm,x\"))\n+\t  (match_operand:VF_128 4 \"const0_operand\" \"\")\n \t  (const_int 1)))]\n   \"TARGET_FMA4\"\n   \"vfnmadd<ssescalarmodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*fma4i_vmfnmsub_<mode>\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x,x\")\n-\t(vec_merge:SSEMODEF2P\n-\t  (fma:SSEMODEF2P\n-\t    (neg:SSEMODEF2P\n-\t      (match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"%x,x\"))\n-\t    (match_operand:SSEMODEF2P   2 \"nonimmediate_operand\" \" x,m\")\n-\t    (neg:SSEMODEF2P\n-\t      (match_operand:SSEMODEF2P   3 \"nonimmediate_operand\" \"xm,x\")))\n-\t  (match_operand:SSEMODEF2P 4 \"const0_operand\" \"\")\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=x,x\")\n+\t(vec_merge:VF_128\n+\t  (fma:VF_128\n+\t    (neg:VF_128\n+\t      (match_operand:VF_128 1 \"nonimmediate_operand\" \"%x,x\"))\n+\t    (match_operand:VF_128   2 \"nonimmediate_operand\" \" x,m\")\n+\t    (neg:VF_128\n+\t      (match_operand:VF_128   3 \"nonimmediate_operand\" \"xm,x\")))\n+\t  (match_operand:VF_128 4 \"const0_operand\" \"\")\n \t  (const_int 1)))]\n   \"TARGET_FMA4\"\n   \"vfnmsub<ssescalarmodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n@@ -1668,34 +1651,33 @@\n ;; But this doesn't seem useful in practice.\n \n (define_expand \"fmaddsub_<mode>\"\n-  [(set (match_operand:AVXMODEF2P 0 \"register_operand\")\n-\t(unspec:AVXMODEF2P\n-\t  [(match_operand:AVXMODEF2P 1 \"nonimmediate_operand\")\n-\t   (match_operand:AVXMODEF2P 2 \"nonimmediate_operand\")\n-\t   (match_operand:AVXMODEF2P 3 \"nonimmediate_operand\")]\n+  [(set (match_operand:VF 0 \"register_operand\")\n+\t(unspec:VF\n+\t  [(match_operand:VF 1 \"nonimmediate_operand\")\n+\t   (match_operand:VF 2 \"nonimmediate_operand\")\n+\t   (match_operand:VF 3 \"nonimmediate_operand\")]\n \t  UNSPEC_FMADDSUB))]\n-  \"TARGET_FMA || TARGET_FMA4\"\n-  \"\")\n+  \"TARGET_FMA || TARGET_FMA4\")\n \n (define_insn \"*fma4_fmaddsub_<mode>\"\n-  [(set (match_operand:AVXMODEF2P 0 \"register_operand\" \"=x,x\")\n-\t(unspec:AVXMODEF2P\n-\t  [(match_operand:AVXMODEF2P 1 \"nonimmediate_operand\" \"%x,x\")\n-\t   (match_operand:AVXMODEF2P 2 \"nonimmediate_operand\" \" x,m\")\n-\t   (match_operand:AVXMODEF2P 3 \"nonimmediate_operand\" \"xm,x\")]\n+  [(set (match_operand:VF 0 \"register_operand\" \"=x,x\")\n+\t(unspec:VF\n+\t  [(match_operand:VF 1 \"nonimmediate_operand\" \"%x,x\")\n+\t   (match_operand:VF 2 \"nonimmediate_operand\" \" x,m\")\n+\t   (match_operand:VF 3 \"nonimmediate_operand\" \"xm,x\")]\n \t  UNSPEC_FMADDSUB))]\n   \"TARGET_FMA4\"\n   \"vfmaddsubps\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*fma4_fmsubadd_<mode>\"\n-  [(set (match_operand:AVXMODEF2P 0 \"register_operand\" \"=x,x\")\n-\t(unspec:AVXMODEF2P\n-\t  [(match_operand:AVXMODEF2P 1 \"nonimmediate_operand\" \"%x,x\")\n-\t   (match_operand:AVXMODEF2P 2 \"nonimmediate_operand\" \" x,m\")\n-\t   (neg:AVXMODEF2P\n-\t     (match_operand:AVXMODEF2P 3 \"nonimmediate_operand\" \"xm,x\"))]\n+  [(set (match_operand:VF 0 \"register_operand\" \"=x,x\")\n+\t(unspec:VF\n+\t  [(match_operand:VF 1 \"nonimmediate_operand\" \"%x,x\")\n+\t   (match_operand:VF 2 \"nonimmediate_operand\" \" x,m\")\n+\t   (neg:VF\n+\t     (match_operand:VF 3 \"nonimmediate_operand\" \"xm,x\"))]\n \t  UNSPEC_FMADDSUB))]\n   \"TARGET_FMA4\"\n   \"vfmsubaddps\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n@@ -1769,11 +1751,11 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*fma_fmaddsub_<mode>\"\n-  [(set (match_operand:AVXMODEF2P 0 \"register_operand\" \"=x,x,x\")\n-\t(unspec:AVXMODEF2P\n-\t  [(match_operand:AVXMODEF2P 1 \"nonimmediate_operand\" \"%0, 0,x\")\n-\t   (match_operand:AVXMODEF2P 2 \"nonimmediate_operand\" \"xm, x,xm\")\n-\t   (match_operand:AVXMODEF2P 3 \"nonimmediate_operand\" \" x,xm,0\")]\n+  [(set (match_operand:VF 0 \"register_operand\" \"=x,x,x\")\n+\t(unspec:VF\n+\t  [(match_operand:VF 1 \"nonimmediate_operand\" \"%0, 0,x\")\n+\t   (match_operand:VF 2 \"nonimmediate_operand\" \"xm, x,xm\")\n+\t   (match_operand:VF 3 \"nonimmediate_operand\" \" x,xm,0\")]\n \t  UNSPEC_FMADDSUB))]\n   \"TARGET_FMA\"\n   \"@\n@@ -1784,12 +1766,12 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*fma_fmsubadd_<mode>\"\n-  [(set (match_operand:AVXMODEF2P 0 \"register_operand\" \"=x,x,x\")\n-\t(unspec:AVXMODEF2P\n-\t  [(match_operand:AVXMODEF2P   1 \"nonimmediate_operand\" \"%0, 0,x\")\n-\t   (match_operand:AVXMODEF2P   2 \"nonimmediate_operand\" \"xm, x,xm\")\n-\t   (neg:AVXMODEF2P\n-\t     (match_operand:AVXMODEF2P 3 \"nonimmediate_operand\" \" x,xm,0\"))]\n+  [(set (match_operand:VF 0 \"register_operand\" \"=x,x,x\")\n+\t(unspec:VF\n+\t  [(match_operand:VF   1 \"nonimmediate_operand\" \"%0, 0,x\")\n+\t   (match_operand:VF   2 \"nonimmediate_operand\" \"xm, x,xm\")\n+\t   (neg:VF\n+\t     (match_operand:VF 3 \"nonimmediate_operand\" \" x,xm,0\"))]\n \t  UNSPEC_FMADDSUB))]\n   \"TARGET_FMA\"\n   \"@\n@@ -3124,11 +3106,11 @@\n })\n \n (define_insn \"sse_shufps_<mode>\"\n-  [(set (match_operand:SSEMODE4S 0 \"register_operand\" \"=x,x\")\n-\t(vec_select:SSEMODE4S\n+  [(set (match_operand:VI4F_128 0 \"register_operand\" \"=x,x\")\n+\t(vec_select:VI4F_128\n \t  (vec_concat:<ssedoublevecmode>\n-\t    (match_operand:SSEMODE4S 1 \"register_operand\" \"0,x\")\n-\t    (match_operand:SSEMODE4S 2 \"nonimmediate_operand\" \"xm,xm\"))\n+\t    (match_operand:VI4F_128 1 \"register_operand\" \"0,x\")\n+\t    (match_operand:VI4F_128 2 \"nonimmediate_operand\" \"xm,xm\"))\n \t  (parallel [(match_operand 3 \"const_0_to_3_operand\" \"\")\n \t\t     (match_operand 4 \"const_0_to_3_operand\" \"\")\n \t\t     (match_operand 5 \"const_4_to_7_operand\" \"\")\n@@ -3372,7 +3354,7 @@\n    (set_attr \"mode\" \"V4SF,V4SF,V2SF,V2SF\")])\n \n (define_expand \"vec_init<mode>\"\n-  [(match_operand:SSEMODE 0 \"register_operand\" \"\")\n+  [(match_operand:V_128 0 \"register_operand\" \"\")\n    (match_operand 1 \"\" \"\")]\n   \"TARGET_SSE\"\n {\n@@ -3383,13 +3365,13 @@\n ;; Avoid combining registers from different units in a single alternative,\n ;; see comment above inline_secondary_memory_needed function in i386.c\n (define_insn \"*vec_set<mode>_0_sse4_1\"\n-  [(set (match_operand:SSEMODE4S 0 \"nonimmediate_operand\"\n+  [(set (match_operand:VI4F_128 0 \"nonimmediate_operand\"\n \t  \"=x,x,x ,x,x,x  ,x  ,m,m,m\")\n-\t(vec_merge:SSEMODE4S\n-\t  (vec_duplicate:SSEMODE4S\n+\t(vec_merge:VI4F_128\n+\t  (vec_duplicate:VI4F_128\n \t    (match_operand:<ssescalarmode> 2 \"general_operand\"\n \t  \" x,m,*r,x,x,*rm,*rm,x,*r,fF\"))\n-\t  (match_operand:SSEMODE4S 1 \"vector_move_operand\"\n+\t  (match_operand:VI4F_128 1 \"vector_move_operand\"\n \t  \" C,C,C ,0,x,0  ,x  ,0,0 ,0\")\n \t  (const_int 1)))]\n   \"TARGET_SSE4_1\"\n@@ -3414,13 +3396,13 @@\n ;; Avoid combining registers from different units in a single alternative,\n ;; see comment above inline_secondary_memory_needed function in i386.c\n (define_insn \"*vec_set<mode>_0_sse2\"\n-  [(set (match_operand:SSEMODE4S 0 \"nonimmediate_operand\"\n+  [(set (match_operand:VI4F_128 0 \"nonimmediate_operand\"\n \t  \"=x,x ,x,m,m ,m\")\n-\t(vec_merge:SSEMODE4S\n-\t  (vec_duplicate:SSEMODE4S\n+\t(vec_merge:VI4F_128\n+\t  (vec_duplicate:VI4F_128\n \t    (match_operand:<ssescalarmode> 2 \"general_operand\"\n \t  \" m,*r,x,x,*r,fF\"))\n-\t  (match_operand:SSEMODE4S 1 \"vector_move_operand\"\n+\t  (match_operand:VI4F_128 1 \"vector_move_operand\"\n \t  \" C, C,0,0,0 ,0\")\n \t  (const_int 1)))]\n   \"TARGET_SSE2\"\n@@ -3437,13 +3419,13 @@\n ;; Avoid combining registers from different units in a single alternative,\n ;; see comment above inline_secondary_memory_needed function in i386.c\n (define_insn \"vec_set<mode>_0\"\n-  [(set (match_operand:SSEMODE4S 0 \"nonimmediate_operand\"\n+  [(set (match_operand:VI4F_128 0 \"nonimmediate_operand\"\n \t  \"=x,x,m,m ,m\")\n-\t(vec_merge:SSEMODE4S\n-\t  (vec_duplicate:SSEMODE4S\n+\t(vec_merge:VI4F_128\n+\t  (vec_duplicate:VI4F_128\n \t    (match_operand:<ssescalarmode> 2 \"general_operand\"\n \t  \" m,x,x,*r,fF\"))\n-\t  (match_operand:SSEMODE4S 1 \"vector_move_operand\"\n+\t  (match_operand:VI4F_128 1 \"vector_move_operand\"\n \t  \" C,0,0,0 ,0\")\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n@@ -3519,9 +3501,9 @@\n    (set_attr \"mode\" \"V4SF\")])\n \n (define_split\n-  [(set (match_operand:SSEMODE4S 0 \"memory_operand\" \"\")\n-\t(vec_merge:SSEMODE4S\n-\t  (vec_duplicate:SSEMODE4S\n+  [(set (match_operand:VI4F_128 0 \"memory_operand\" \"\")\n+\t(vec_merge:VI4F_128\n+\t  (vec_duplicate:VI4F_128\n \t    (match_operand:<ssescalarmode> 1 \"nonmemory_operand\" \"\"))\n \t  (match_dup 0)\n \t  (const_int 1)))]\n@@ -3534,7 +3516,7 @@\n })\n \n (define_expand \"vec_set<mode>\"\n-  [(match_operand:SSEMODE 0 \"register_operand\" \"\")\n+  [(match_operand:V_128 0 \"register_operand\" \"\")\n    (match_operand:<ssescalarmode> 1 \"register_operand\" \"\")\n    (match_operand 2 \"const_int_operand\" \"\")]\n   \"TARGET_SSE\"\n@@ -3565,7 +3547,7 @@\n \n (define_expand \"avx_vextractf128<mode>\"\n   [(match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"\")\n-   (match_operand:AVX256MODE 1 \"register_operand\" \"\")\n+   (match_operand:V_256 1 \"register_operand\" \"\")\n    (match_operand:SI 2 \"const_0_to_1_operand\" \"\")]\n   \"TARGET_AVX\"\n {\n@@ -3590,7 +3572,7 @@\n (define_insn_and_split \"vec_extract_lo_<mode>\"\n   [(set (match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"=x,m\")\n \t(vec_select:<ssehalfvecmode>\n-\t  (match_operand:AVX256MODE4P 1 \"nonimmediate_operand\" \"xm,x\")\n+\t  (match_operand:VI8F_256 1 \"nonimmediate_operand\" \"xm,x\")\n \t  (parallel [(const_int 0) (const_int 1)])))]\n   \"TARGET_AVX\"\n   \"#\"\n@@ -3609,7 +3591,7 @@\n (define_insn \"vec_extract_hi_<mode>\"\n   [(set (match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"=x,m\")\n \t(vec_select:<ssehalfvecmode>\n-\t  (match_operand:AVX256MODE4P 1 \"register_operand\" \"x,x\")\n+\t  (match_operand:VI8F_256 1 \"register_operand\" \"x,x\")\n \t  (parallel [(const_int 2) (const_int 3)])))]\n   \"TARGET_AVX\"\n   \"vextractf128\\t{$0x1, %1, %0|%0, %1, 0x1}\"\n@@ -3623,7 +3605,7 @@\n (define_insn_and_split \"vec_extract_lo_<mode>\"\n   [(set (match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"=x,m\")\n \t(vec_select:<ssehalfvecmode>\n-\t  (match_operand:AVX256MODE8P 1 \"nonimmediate_operand\" \"xm,x\")\n+\t  (match_operand:VI4F_256 1 \"nonimmediate_operand\" \"xm,x\")\n \t  (parallel [(const_int 0) (const_int 1)\n \t\t     (const_int 2) (const_int 3)])))]\n   \"TARGET_AVX\"\n@@ -3643,7 +3625,7 @@\n (define_insn \"vec_extract_hi_<mode>\"\n   [(set (match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"=x,m\")\n \t(vec_select:<ssehalfvecmode>\n-\t  (match_operand:AVX256MODE8P 1 \"register_operand\" \"x,x\")\n+\t  (match_operand:VI4F_256 1 \"register_operand\" \"x,x\")\n \t  (parallel [(const_int 4) (const_int 5)\n \t\t     (const_int 6) (const_int 7)])))]\n   \"TARGET_AVX\"\n@@ -3771,6 +3753,12 @@\n   DONE;\n })\n \n+;; Modes handled by vec_extract patterns.\n+(define_mode_iterator VEC_EXTRACT_MODE\n+  [V16QI V8HI V4SI V2DI\n+   (V8SF \"TARGET_AVX\") V4SF\n+   (V4DF \"TARGET_AVX\") V2DF])\n+\n (define_expand \"vec_extract<mode>\"\n   [(match_operand:<ssescalarmode> 0 \"register_operand\" \"\")\n    (match_operand:VEC_EXTRACT_MODE 1 \"register_operand\" \"\")\n@@ -4091,21 +4079,30 @@\n   DONE;\n })\n \n+;; Modes handled by vec_extract_even/odd pattern.\n+(define_mode_iterator VEC_EXTRACT_EVENODD_MODE\n+  [(V16QI \"TARGET_SSE2\")\n+   (V8HI \"TARGET_SSE2\")\n+   (V4SI \"TARGET_SSE2\")\n+   (V2DI \"TARGET_SSE2\") \n+   (V8SF \"TARGET_AVX\") V4SF\n+   (V4DF \"TARGET_AVX\") (V2DF \"TARGET_SSE2\")])\n+\n (define_expand \"vec_extract_even<mode>\"\n-  [(match_operand:SSEMODE_EO 0 \"register_operand\" \"\")\n-   (match_operand:SSEMODE_EO 1 \"register_operand\" \"\")\n-   (match_operand:SSEMODE_EO 2 \"register_operand\" \"\")]\n-  \"\"\n+  [(match_operand:VEC_EXTRACT_EVENODD_MODE 0 \"register_operand\" \"\")\n+   (match_operand:VEC_EXTRACT_EVENODD_MODE 1 \"register_operand\" \"\")\n+   (match_operand:VEC_EXTRACT_EVENODD_MODE 2 \"register_operand\" \"\")]\n+  \"TARGET_SSE\"\n {\n   ix86_expand_vec_extract_even_odd (operands[0], operands[1], operands[2], 0);\n   DONE;\n })\n \n (define_expand \"vec_extract_odd<mode>\"\n-  [(match_operand:SSEMODE_EO 0 \"register_operand\" \"\")\n-   (match_operand:SSEMODE_EO 1 \"register_operand\" \"\")\n-   (match_operand:SSEMODE_EO 2 \"register_operand\" \"\")]\n-  \"\"\n+  [(match_operand:VEC_EXTRACT_EVENODD_MODE 0 \"register_operand\" \"\")\n+   (match_operand:VEC_EXTRACT_EVENODD_MODE 1 \"register_operand\" \"\")\n+   (match_operand:VEC_EXTRACT_EVENODD_MODE 2 \"register_operand\" \"\")]\n+  \"TARGET_SSE\"\n {\n   ix86_expand_vec_extract_even_odd (operands[0], operands[1], operands[2], 1);\n   DONE;\n@@ -4150,11 +4147,11 @@\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse2_shufpd_<mode>\"\n-  [(set (match_operand:SSEMODE2D 0 \"register_operand\" \"=x,x\")\n-\t(vec_select:SSEMODE2D\n+  [(set (match_operand:VI8F_128 0 \"register_operand\" \"=x,x\")\n+\t(vec_select:VI8F_128\n \t  (vec_concat:<ssedoublevecmode>\n-\t    (match_operand:SSEMODE2D 1 \"register_operand\" \"0,x\")\n-\t    (match_operand:SSEMODE2D 2 \"nonimmediate_operand\" \"xm,xm\"))\n+\t    (match_operand:VI8F_128 1 \"register_operand\" \"0,x\")\n+\t    (match_operand:VI8F_128 2 \"nonimmediate_operand\" \"xm,xm\"))\n \t  (parallel [(match_operand 3 \"const_0_to_1_operand\" \"\")\n \t\t     (match_operand 4 \"const_2_to_3_operand\" \"\")])))]\n   \"TARGET_SSE2\"\n@@ -6905,7 +6902,7 @@\n \t(unspec:SI\n \t  [(match_operand:VF 1 \"register_operand\" \"x\")]\n \t  UNSPEC_MOVMSK))]\n-  \"\"\n+  \"TARGET_SSE\"\n   \"%vmovmsk<ssemodesuffix>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"maybe_vex\")\n@@ -7706,10 +7703,10 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"ssse3_psign<mode>3\"\n-  [(set (match_operand:SSEMODE124 0 \"register_operand\" \"=x,x\")\n-\t(unspec:SSEMODE124\n-\t  [(match_operand:SSEMODE124 1 \"register_operand\" \"0,x\")\n-\t   (match_operand:SSEMODE124 2 \"nonimmediate_operand\" \"xm,xm\")]\n+  [(set (match_operand:VI124_128 0 \"register_operand\" \"=x,x\")\n+\t(unspec:VI124_128\n+\t  [(match_operand:VI124_128 1 \"register_operand\" \"0,x\")\n+\t   (match_operand:VI124_128 2 \"nonimmediate_operand\" \"xm,xm\")]\n \t  UNSPEC_PSIGN))]\n   \"TARGET_SSSE3\"\n   \"@\n@@ -7783,9 +7780,9 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"abs<mode>2\"\n-  [(set (match_operand:SSEMODE124 0 \"register_operand\" \"=x\")\n-\t(abs:SSEMODE124\n-\t  (match_operand:SSEMODE124 1 \"nonimmediate_operand\" \"xm\")))]\n+  [(set (match_operand:VI124_128 0 \"register_operand\" \"=x\")\n+\t(abs:VI124_128\n+\t  (match_operand:VI124_128 1 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_SSSE3\"\n   \"%vpabs<ssemodesuffix>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sselog1\")\n@@ -7826,7 +7823,7 @@\n   [(set (match_operand:<ssescalarmode> 0 \"memory_operand\" \"=m\")\n \t(unspec:<ssescalarmode>\n \t  [(vec_select:<ssescalarmode>\n-\t     (match_operand:SSEMODEF2P 1 \"register_operand\" \"x\")\n+\t     (match_operand:VF_128 1 \"register_operand\" \"x\")\n \t     (parallel [(const_int 0)]))]\n \t  UNSPEC_MOVNT))]\n   \"TARGET_SSE4A\"\n@@ -7995,7 +7992,7 @@\n (define_insn \"sse4_1_pblendvb\"\n   [(set (match_operand:V16QI 0 \"reg_not_xmm0_operand\" \"=x,x\")\n \t(unspec:V16QI\n-\t  [(match_operand:V16QI 1 \"reg_not_xmm0_operand_maybe_avx\"  \"0,x\")\n+\t  [(match_operand:V16QI 1 \"reg_not_xmm0_operand_maybe_avx\" \"0,x\")\n \t   (match_operand:V16QI 2 \"nonimm_not_xmm0_operand_maybe_avx\" \"xm,xm\")\n \t   (match_operand:V16QI 3 \"register_operand\" \"Yz,x\")]\n \t  UNSPEC_BLENDV))]\n@@ -8820,22 +8817,12 @@\n    (set_attr \"mode\" \"TI\")])\n \n ;; XOP parallel XMM conditional moves\n-(define_insn \"xop_pcmov_<mode>\"\n-  [(set (match_operand:SSEMODE 0 \"register_operand\" \"=x,x\")\n-\t(if_then_else:SSEMODE\n-\t  (match_operand:SSEMODE 3 \"nonimmediate_operand\" \"x,m\")\n-\t  (match_operand:SSEMODE 1 \"vector_move_operand\" \"x,x\")\n-\t  (match_operand:SSEMODE 2 \"vector_move_operand\" \"xm,x\")))]\n-  \"TARGET_XOP\"\n-  \"vpcmov\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"type\" \"sse4arg\")])\n-\n-(define_insn \"xop_pcmov_<mode>256\"\n-  [(set (match_operand:AVX256MODE 0 \"register_operand\" \"=x,x\")\n-\t(if_then_else:AVX256MODE\n-\t  (match_operand:AVX256MODE 3 \"nonimmediate_operand\" \"x,m\")\n-\t  (match_operand:AVX256MODE 1 \"vector_move_operand\" \"x,x\")\n-\t  (match_operand:AVX256MODE 2 \"vector_move_operand\" \"xm,x\")))]\n+(define_insn \"xop_pcmov_<mode><avxsizesuffix>\"\n+  [(set (match_operand:V 0 \"register_operand\" \"=x,x\")\n+\t(if_then_else:V\n+\t  (match_operand:V 3 \"nonimmediate_operand\" \"x,m\")\n+\t  (match_operand:V 1 \"vector_move_operand\" \"x,x\")\n+\t  (match_operand:V 2 \"vector_move_operand\" \"xm,x\")))]\n   \"TARGET_XOP\"\n   \"vpcmov\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"sse4arg\")])\n@@ -9335,9 +9322,9 @@\n \n ;; XOP packed rotate instructions\n (define_expand \"rotl<mode>3\"\n-  [(set (match_operand:SSEMODE1248 0 \"register_operand\" \"\")\n-\t(rotate:SSEMODE1248\n-\t (match_operand:SSEMODE1248 1 \"nonimmediate_operand\" \"\")\n+  [(set (match_operand:VI_128 0 \"register_operand\" \"\")\n+\t(rotate:VI_128\n+\t (match_operand:VI_128 1 \"nonimmediate_operand\" \"\")\n \t (match_operand:SI 2 \"general_operand\")))]\n   \"TARGET_XOP\"\n {\n@@ -9366,9 +9353,9 @@\n })\n \n (define_expand \"rotr<mode>3\"\n-  [(set (match_operand:SSEMODE1248 0 \"register_operand\" \"\")\n-\t(rotatert:SSEMODE1248\n-\t (match_operand:SSEMODE1248 1 \"nonimmediate_operand\" \"\")\n+  [(set (match_operand:VI_128 0 \"register_operand\" \"\")\n+\t(rotatert:VI_128\n+\t (match_operand:VI_128 1 \"nonimmediate_operand\" \"\")\n \t (match_operand:SI 2 \"general_operand\")))]\n   \"TARGET_XOP\"\n {\n@@ -9399,9 +9386,9 @@\n })\n \n (define_insn \"xop_rotl<mode>3\"\n-  [(set (match_operand:SSEMODE1248 0 \"register_operand\" \"=x\")\n-\t(rotate:SSEMODE1248\n-\t (match_operand:SSEMODE1248 1 \"nonimmediate_operand\" \"xm\")\n+  [(set (match_operand:VI_128 0 \"register_operand\" \"=x\")\n+\t(rotate:VI_128\n+\t (match_operand:VI_128 1 \"nonimmediate_operand\" \"xm\")\n \t (match_operand:SI 2 \"const_0_to_<sserotatemax>_operand\" \"n\")))]\n   \"TARGET_XOP\"\n   \"vprot<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n@@ -9410,9 +9397,9 @@\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"xop_rotr<mode>3\"\n-  [(set (match_operand:SSEMODE1248 0 \"register_operand\" \"=x\")\n-\t(rotatert:SSEMODE1248\n-\t (match_operand:SSEMODE1248 1 \"nonimmediate_operand\" \"xm\")\n+  [(set (match_operand:VI_128 0 \"register_operand\" \"=x\")\n+\t(rotatert:VI_128\n+\t (match_operand:VI_128 1 \"nonimmediate_operand\" \"xm\")\n \t (match_operand:SI 2 \"const_0_to_<sserotatemax>_operand\" \"n\")))]\n   \"TARGET_XOP\"\n {\n@@ -9424,9 +9411,9 @@\n    (set_attr \"mode\" \"TI\")])\n \n (define_expand \"vrotr<mode>3\"\n-  [(match_operand:SSEMODE1248 0 \"register_operand\" \"\")\n-   (match_operand:SSEMODE1248 1 \"register_operand\" \"\")\n-   (match_operand:SSEMODE1248 2 \"register_operand\" \"\")]\n+  [(match_operand:VI_128 0 \"register_operand\" \"\")\n+   (match_operand:VI_128 1 \"register_operand\" \"\")\n+   (match_operand:VI_128 2 \"register_operand\" \"\")]\n   \"TARGET_XOP\"\n {\n   rtx reg = gen_reg_rtx (<MODE>mode);\n@@ -9436,27 +9423,27 @@\n })\n \n (define_expand \"vrotl<mode>3\"\n-  [(match_operand:SSEMODE1248 0 \"register_operand\" \"\")\n-   (match_operand:SSEMODE1248 1 \"register_operand\" \"\")\n-   (match_operand:SSEMODE1248 2 \"register_operand\" \"\")]\n+  [(match_operand:VI_128 0 \"register_operand\" \"\")\n+   (match_operand:VI_128 1 \"register_operand\" \"\")\n+   (match_operand:VI_128 2 \"register_operand\" \"\")]\n   \"TARGET_XOP\"\n {\n   emit_insn (gen_xop_vrotl<mode>3 (operands[0], operands[1], operands[2]));\n   DONE;\n })\n \n (define_insn \"xop_vrotl<mode>3\"\n-  [(set (match_operand:SSEMODE1248 0 \"register_operand\" \"=x,x\")\n-\t(if_then_else:SSEMODE1248\n-\t (ge:SSEMODE1248\n-\t  (match_operand:SSEMODE1248 2 \"nonimmediate_operand\" \"x,m\")\n+  [(set (match_operand:VI_128 0 \"register_operand\" \"=x,x\")\n+\t(if_then_else:VI_128\n+\t (ge:VI_128\n+\t  (match_operand:VI_128 2 \"nonimmediate_operand\" \"x,m\")\n \t  (const_int 0))\n-\t (rotate:SSEMODE1248\n-\t  (match_operand:SSEMODE1248 1 \"nonimmediate_operand\" \"xm,x\")\n+\t (rotate:VI_128\n+\t  (match_operand:VI_128 1 \"nonimmediate_operand\" \"xm,x\")\n \t  (match_dup 2))\n-\t (rotatert:SSEMODE1248\n+\t (rotatert:VI_128\n \t  (match_dup 1)\n-\t  (neg:SSEMODE1248 (match_dup 2)))))]\n+\t  (neg:VI_128 (match_dup 2)))))]\n   \"TARGET_XOP && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"vprot<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -9467,9 +9454,9 @@\n ;; XOP packed shift instructions.\n ;; FIXME: add V2DI back in\n (define_expand \"vlshr<mode>3\"\n-  [(match_operand:SSEMODE124 0 \"register_operand\" \"\")\n-   (match_operand:SSEMODE124 1 \"register_operand\" \"\")\n-   (match_operand:SSEMODE124 2 \"register_operand\" \"\")]\n+  [(match_operand:VI124_128 0 \"register_operand\" \"\")\n+   (match_operand:VI124_128 1 \"register_operand\" \"\")\n+   (match_operand:VI124_128 2 \"register_operand\" \"\")]\n   \"TARGET_XOP\"\n {\n   rtx neg = gen_reg_rtx (<MODE>mode);\n@@ -9479,9 +9466,9 @@\n })\n \n (define_expand \"vashr<mode>3\"\n-  [(match_operand:SSEMODE124 0 \"register_operand\" \"\")\n-   (match_operand:SSEMODE124 1 \"register_operand\" \"\")\n-   (match_operand:SSEMODE124 2 \"register_operand\" \"\")]\n+  [(match_operand:VI124_128 0 \"register_operand\" \"\")\n+   (match_operand:VI124_128 1 \"register_operand\" \"\")\n+   (match_operand:VI124_128 2 \"register_operand\" \"\")]\n   \"TARGET_XOP\"\n {\n   rtx neg = gen_reg_rtx (<MODE>mode);\n@@ -9491,27 +9478,27 @@\n })\n \n (define_expand \"vashl<mode>3\"\n-  [(match_operand:SSEMODE124 0 \"register_operand\" \"\")\n-   (match_operand:SSEMODE124 1 \"register_operand\" \"\")\n-   (match_operand:SSEMODE124 2 \"register_operand\" \"\")]\n+  [(match_operand:VI124_128 0 \"register_operand\" \"\")\n+   (match_operand:VI124_128 1 \"register_operand\" \"\")\n+   (match_operand:VI124_128 2 \"register_operand\" \"\")]\n   \"TARGET_XOP\"\n {\n   emit_insn (gen_xop_ashl<mode>3 (operands[0], operands[1], operands[2]));\n   DONE;\n })\n \n (define_insn \"xop_ashl<mode>3\"\n-  [(set (match_operand:SSEMODE1248 0 \"register_operand\" \"=x,x\")\n-\t(if_then_else:SSEMODE1248\n-\t (ge:SSEMODE1248\n-\t  (match_operand:SSEMODE1248 2 \"nonimmediate_operand\" \"x,m\")\n+  [(set (match_operand:VI_128 0 \"register_operand\" \"=x,x\")\n+\t(if_then_else:VI_128\n+\t (ge:VI_128\n+\t  (match_operand:VI_128 2 \"nonimmediate_operand\" \"x,m\")\n \t  (const_int 0))\n-\t (ashift:SSEMODE1248\n-\t  (match_operand:SSEMODE1248 1 \"nonimmediate_operand\" \"xm,x\")\n+\t (ashift:VI_128\n+\t  (match_operand:VI_128 1 \"nonimmediate_operand\" \"xm,x\")\n \t  (match_dup 2))\n-\t (ashiftrt:SSEMODE1248\n+\t (ashiftrt:VI_128\n \t  (match_dup 1)\n-\t  (neg:SSEMODE1248 (match_dup 2)))))]\n+\t  (neg:VI_128 (match_dup 2)))))]\n   \"TARGET_XOP && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"vpsha<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -9520,17 +9507,17 @@\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"xop_lshl<mode>3\"\n-  [(set (match_operand:SSEMODE1248 0 \"register_operand\" \"=x,x\")\n-\t(if_then_else:SSEMODE1248\n-\t (ge:SSEMODE1248\n-\t  (match_operand:SSEMODE1248 2 \"nonimmediate_operand\" \"x,m\")\n+  [(set (match_operand:VI_128 0 \"register_operand\" \"=x,x\")\n+\t(if_then_else:VI_128\n+\t (ge:VI_128\n+\t  (match_operand:VI_128 2 \"nonimmediate_operand\" \"x,m\")\n \t  (const_int 0))\n-\t (ashift:SSEMODE1248\n-\t  (match_operand:SSEMODE1248 1 \"nonimmediate_operand\" \"xm,x\")\n+\t (ashift:VI_128\n+\t  (match_operand:VI_128 1 \"nonimmediate_operand\" \"xm,x\")\n \t  (match_dup 2))\n-\t (lshiftrt:SSEMODE1248\n+\t (lshiftrt:VI_128\n \t  (match_dup 1)\n-\t  (neg:SSEMODE1248 (match_dup 2)))))]\n+\t  (neg:VI_128 (match_dup 2)))))]\n   \"TARGET_XOP && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"vpshl<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -9652,10 +9639,10 @@\n \n ;; scalar insns\n (define_expand \"xop_vmfrcz<mode>2\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\")\n-\t(vec_merge:SSEMODEF2P\n-\t  (unspec:SSEMODEF2P\n-\t   [(match_operand:SSEMODEF2P 1 \"nonimmediate_operand\")]\n+  [(set (match_operand:VF_128 0 \"register_operand\")\n+\t(vec_merge:VF_128\n+\t  (unspec:VF_128\n+\t   [(match_operand:VF_128 1 \"nonimmediate_operand\")]\n \t   UNSPEC_FRCZ)\n \t  (match_dup 3)\n \t  (const_int 1)))]\n@@ -9665,23 +9652,23 @@\n })\n \n (define_insn \"*xop_vmfrcz_<mode>\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x\")\n-\t(vec_merge:SSEMODEF2P\n-\t  (unspec:SSEMODEF2P\n-\t   [(match_operand:SSEMODEF2P 1 \"nonimmediate_operand\" \"xm\")]\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=x\")\n+\t(vec_merge:VF_128\n+\t  (unspec:VF_128\n+\t   [(match_operand:VF_128 1 \"nonimmediate_operand\" \"xm\")]\n \t   UNSPEC_FRCZ)\n-\t  (match_operand:SSEMODEF2P 2 \"const0_operand\")\n+\t  (match_operand:VF_128 2 \"const0_operand\")\n \t  (const_int 1)))]\n   \"TARGET_XOP\"\n   \"vfrcz<ssescalarmodesuffix>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt1\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"xop_maskcmp<mode>3\"\n-  [(set (match_operand:SSEMODE1248 0 \"register_operand\" \"=x\")\n-\t(match_operator:SSEMODE1248 1 \"ix86_comparison_int_operator\"\n-\t [(match_operand:SSEMODE1248 2 \"register_operand\" \"x\")\n-\t  (match_operand:SSEMODE1248 3 \"nonimmediate_operand\" \"xm\")]))]\n+  [(set (match_operand:VI_128 0 \"register_operand\" \"=x\")\n+\t(match_operator:VI_128 1 \"ix86_comparison_int_operator\"\n+\t [(match_operand:VI_128 2 \"register_operand\" \"x\")\n+\t  (match_operand:VI_128 3 \"nonimmediate_operand\" \"xm\")]))]\n   \"TARGET_XOP\"\n   \"vpcom%Y1<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"sse4arg\")\n@@ -9692,10 +9679,10 @@\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"xop_maskcmp_uns<mode>3\"\n-  [(set (match_operand:SSEMODE1248 0 \"register_operand\" \"=x\")\n-\t(match_operator:SSEMODE1248 1 \"ix86_comparison_uns_operator\"\n-\t [(match_operand:SSEMODE1248 2 \"register_operand\" \"x\")\n-\t  (match_operand:SSEMODE1248 3 \"nonimmediate_operand\" \"xm\")]))]\n+  [(set (match_operand:VI_128 0 \"register_operand\" \"=x\")\n+\t(match_operator:VI_128 1 \"ix86_comparison_uns_operator\"\n+\t [(match_operand:VI_128 2 \"register_operand\" \"x\")\n+\t  (match_operand:VI_128 3 \"nonimmediate_operand\" \"xm\")]))]\n   \"TARGET_XOP\"\n   \"vpcom%Y1u<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"ssecmp\")\n@@ -9709,11 +9696,11 @@\n ;; and pcomneu* not to be converted to the signed ones in case somebody needs\n ;; the exact instruction generated for the intrinsic.\n (define_insn \"xop_maskcmp_uns2<mode>3\"\n-  [(set (match_operand:SSEMODE1248 0 \"register_operand\" \"=x\")\n-\t(unspec:SSEMODE1248\n-\t [(match_operator:SSEMODE1248 1 \"ix86_comparison_uns_operator\"\n-\t  [(match_operand:SSEMODE1248 2 \"register_operand\" \"x\")\n-\t   (match_operand:SSEMODE1248 3 \"nonimmediate_operand\" \"xm\")])]\n+  [(set (match_operand:VI_128 0 \"register_operand\" \"=x\")\n+\t(unspec:VI_128\n+\t [(match_operator:VI_128 1 \"ix86_comparison_uns_operator\"\n+\t  [(match_operand:VI_128 2 \"register_operand\" \"x\")\n+\t   (match_operand:VI_128 3 \"nonimmediate_operand\" \"xm\")])]\n \t UNSPEC_XOP_UNSIGNED_CMP))]\n   \"TARGET_XOP\"\n   \"vpcom%Y1u<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\"\n@@ -9726,10 +9713,10 @@\n ;; Pcomtrue and pcomfalse support.  These are useless instructions, but are\n ;; being added here to be complete.\n (define_insn \"xop_pcom_tf<mode>3\"\n-  [(set (match_operand:SSEMODE1248 0 \"register_operand\" \"=x\")\n-\t(unspec:SSEMODE1248\n-\t  [(match_operand:SSEMODE1248 1 \"register_operand\" \"x\")\n-\t   (match_operand:SSEMODE1248 2 \"nonimmediate_operand\" \"xm\")\n+  [(set (match_operand:VI_128 0 \"register_operand\" \"=x\")\n+\t(unspec:VI_128\n+\t  [(match_operand:VI_128 1 \"register_operand\" \"x\")\n+\t   (match_operand:VI_128 2 \"nonimmediate_operand\" \"xm\")\n \t   (match_operand:SI 3 \"const_int_operand\" \"n\")]\n \t  UNSPEC_XOP_TRUEFALSE))]\n   \"TARGET_XOP\"\n@@ -9745,10 +9732,10 @@\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"xop_vpermil2<mode>3\"\n-  [(set (match_operand:AVXMODEF2P 0 \"register_operand\" \"=x\")\n-\t(unspec:AVXMODEF2P\n-\t  [(match_operand:AVXMODEF2P 1 \"register_operand\" \"x\")\n-\t   (match_operand:AVXMODEF2P 2 \"nonimmediate_operand\" \"%x\")\n+  [(set (match_operand:VF 0 \"register_operand\" \"=x\")\n+\t(unspec:VF\n+\t  [(match_operand:VF 1 \"register_operand\" \"x\")\n+\t   (match_operand:VF 2 \"nonimmediate_operand\" \"%x\")\n \t   (match_operand:<sseintvecmode> 3 \"nonimmediate_operand\" \"xm\")\n \t   (match_operand:SI 4 \"const_0_to_3_operand\" \"n\")]\n \t  UNSPEC_VPERMIL2))]\n@@ -9928,8 +9915,8 @@\n   \"operands[2] = gen_rtx_REG (<ssehalfvecmode>mode, REGNO (operands[0]));\")\n \n (define_insn \"avx_vbroadcastf128_<mode>\"\n-  [(set (match_operand:AVX256MODE 0 \"register_operand\" \"=x,x,x\")\n-\t(vec_concat:AVX256MODE\n+  [(set (match_operand:V_256 0 \"register_operand\" \"=x,x,x\")\n+\t(vec_concat:V_256\n \t  (match_operand:<ssehalfvecmode> 1 \"nonimmediate_operand\" \"m,0,?x\")\n \t  (match_dup 1)))]\n   \"TARGET_AVX\"\n@@ -9975,15 +9962,15 @@\n    (set_attr \"mode\" \"SF,SF,V4SF\")])\n \n (define_insn_and_split \"*avx_vperm_broadcast_<mode>\"\n-  [(set (match_operand:AVX256MODEF2P 0 \"register_operand\" \"=x,x,x\")\n-\t(vec_select:AVX256MODEF2P\n-\t  (match_operand:AVX256MODEF2P 1 \"nonimmediate_operand\" \"m,o,?x\")\n+  [(set (match_operand:VF_256 0 \"register_operand\" \"=x,x,x\")\n+\t(vec_select:VF_256\n+\t  (match_operand:VF_256 1 \"nonimmediate_operand\" \"m,o,?x\")\n \t  (match_parallel 2 \"avx_vbroadcast_operand\"\n \t    [(match_operand 3 \"const_int_operand\" \"C,n,n\")])))]\n   \"TARGET_AVX\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(set (match_dup 0) (vec_duplicate:AVX256MODEF2P (match_dup 1)))]\n+  [(set (match_dup 0) (vec_duplicate:VF_256 (match_dup 1)))]\n {\n   rtx op0 = operands[0], op1 = operands[1];\n   int elt = INTVAL (operands[3]);\n@@ -10011,9 +9998,9 @@\n })\n \n (define_expand \"avx_vpermil<mode>\"\n-  [(set (match_operand:AVXMODEFDP 0 \"register_operand\" \"\")\n-\t(vec_select:AVXMODEFDP\n-\t  (match_operand:AVXMODEFDP 1 \"nonimmediate_operand\" \"\")\n+  [(set (match_operand:VF2 0 \"register_operand\" \"\")\n+\t(vec_select:VF2\n+\t  (match_operand:VF2 1 \"nonimmediate_operand\" \"\")\n \t  (match_operand:SI 2 \"const_0_to_255_operand\" \"\")))]\n   \"TARGET_AVX\"\n {\n@@ -10033,9 +10020,9 @@\n })\n \n (define_expand \"avx_vpermil<mode>\"\n-  [(set (match_operand:AVXMODEFSP 0 \"register_operand\" \"\")\n-\t(vec_select:AVXMODEFSP\n-\t  (match_operand:AVXMODEFSP 1 \"nonimmediate_operand\" \"\")\n+  [(set (match_operand:VF1 0 \"register_operand\" \"\")\n+\t(vec_select:VF1\n+\t  (match_operand:VF1 1 \"nonimmediate_operand\" \"\")\n \t  (match_operand:SI 2 \"const_0_to_255_operand\" \"\")))]\n   \"TARGET_AVX\"\n {\n@@ -10059,9 +10046,9 @@\n })\n \n (define_insn \"*avx_vpermilp<mode>\"\n-  [(set (match_operand:AVXMODEF2P 0 \"register_operand\" \"=x\")\n-\t(vec_select:AVXMODEF2P\n-\t  (match_operand:AVXMODEF2P 1 \"nonimmediate_operand\" \"xm\")\n+  [(set (match_operand:VF 0 \"register_operand\" \"=x\")\n+\t(vec_select:VF\n+\t  (match_operand:VF 1 \"nonimmediate_operand\" \"xm\")\n \t  (match_parallel 2 \"\"\n \t    [(match_operand 3 \"const_int_operand\" \"\")])))]\n   \"TARGET_AVX\n@@ -10078,9 +10065,9 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"avx_vpermilvar<mode>3\"\n-  [(set (match_operand:AVXMODEF2P 0 \"register_operand\" \"=x\")\n-\t(unspec:AVXMODEF2P\n-\t  [(match_operand:AVXMODEF2P 1 \"register_operand\" \"x\")\n+  [(set (match_operand:VF 0 \"register_operand\" \"=x\")\n+\t(unspec:VF\n+\t  [(match_operand:VF 1 \"register_operand\" \"x\")\n \t   (match_operand:<sseintvecmode> 2 \"nonimmediate_operand\" \"xm\")]\n \t  UNSPEC_VPERMIL))]\n   \"TARGET_AVX\"\n@@ -10164,8 +10151,8 @@\n    (set_attr \"mode\" \"V8SF\")])\n \n (define_expand \"avx_vinsertf128<mode>\"\n-  [(match_operand:AVX256MODE 0 \"register_operand\" \"\")\n-   (match_operand:AVX256MODE 1 \"register_operand\" \"\")\n+  [(match_operand:V_256 0 \"register_operand\" \"\")\n+   (match_operand:V_256 1 \"register_operand\" \"\")\n    (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"\")\n    (match_operand:SI 3 \"const_0_to_1_operand\" \"\")]\n   \"TARGET_AVX\"\n@@ -10189,11 +10176,11 @@\n })\n \n (define_insn \"vec_set_lo_<mode>\"\n-  [(set (match_operand:AVX256MODE4P 0 \"register_operand\" \"=x\")\n-\t(vec_concat:AVX256MODE4P\n+  [(set (match_operand:VI8F_256 0 \"register_operand\" \"=x\")\n+\t(vec_concat:VI8F_256\n \t  (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"xm\")\n \t  (vec_select:<ssehalfvecmode>\n-\t    (match_operand:AVX256MODE4P 1 \"register_operand\" \"x\")\n+\t    (match_operand:VI8F_256 1 \"register_operand\" \"x\")\n \t    (parallel [(const_int 2) (const_int 3)]))))]\n   \"TARGET_AVX\"\n   \"vinsertf128\\t{$0x0, %2, %1, %0|%0, %1, %2, 0x0}\"\n@@ -10204,10 +10191,10 @@\n    (set_attr \"mode\" \"V8SF\")])\n \n (define_insn \"vec_set_hi_<mode>\"\n-  [(set (match_operand:AVX256MODE4P 0 \"register_operand\" \"=x\")\n-\t(vec_concat:AVX256MODE4P\n+  [(set (match_operand:VI8F_256 0 \"register_operand\" \"=x\")\n+\t(vec_concat:VI8F_256\n \t  (vec_select:<ssehalfvecmode>\n-\t    (match_operand:AVX256MODE4P 1 \"register_operand\" \"x\")\n+\t    (match_operand:VI8F_256 1 \"register_operand\" \"x\")\n \t    (parallel [(const_int 0) (const_int 1)]))\n \t  (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_AVX\"\n@@ -10219,11 +10206,11 @@\n    (set_attr \"mode\" \"V8SF\")])\n \n (define_insn \"vec_set_lo_<mode>\"\n-  [(set (match_operand:AVX256MODE8P 0 \"register_operand\" \"=x\")\n-\t(vec_concat:AVX256MODE8P\n+  [(set (match_operand:VI4F_256 0 \"register_operand\" \"=x\")\n+\t(vec_concat:VI4F_256\n \t  (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"xm\")\n \t  (vec_select:<ssehalfvecmode>\n-\t    (match_operand:AVX256MODE8P 1 \"register_operand\" \"x\")\n+\t    (match_operand:VI4F_256 1 \"register_operand\" \"x\")\n \t    (parallel [(const_int 4) (const_int 5)\n \t\t       (const_int 6) (const_int 7)]))))]\n   \"TARGET_AVX\"\n@@ -10235,10 +10222,10 @@\n    (set_attr \"mode\" \"V8SF\")])\n \n (define_insn \"vec_set_hi_<mode>\"\n-  [(set (match_operand:AVX256MODE8P 0 \"register_operand\" \"=x\")\n-\t(vec_concat:AVX256MODE8P\n+  [(set (match_operand:VI4F_256 0 \"register_operand\" \"=x\")\n+\t(vec_concat:VI4F_256\n \t  (vec_select:<ssehalfvecmode>\n-\t    (match_operand:AVX256MODE8P 1 \"register_operand\" \"x\")\n+\t    (match_operand:VI4F_256 1 \"register_operand\" \"x\")\n \t    (parallel [(const_int 0) (const_int 1)\n \t\t       (const_int 2) (const_int 3)]))\n \t  (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"xm\")))]\n@@ -10383,7 +10370,7 @@\n })\n \n (define_expand \"vec_init<mode>\"\n-  [(match_operand:AVX256MODE 0 \"register_operand\" \"\")\n+  [(match_operand:V_256 0 \"register_operand\" \"\")\n    (match_operand 1 \"\" \"\")]\n   \"TARGET_AVX\"\n {\n@@ -10392,8 +10379,8 @@\n })\n \n (define_insn \"*vec_concat<mode>_avx\"\n-  [(set (match_operand:AVX256MODE 0 \"register_operand\"   \"=x,x\")\n-\t(vec_concat:AVX256MODE\n+  [(set (match_operand:V_256 0 \"register_operand\" \"=x,x\")\n+\t(vec_concat:V_256\n \t  (match_operand:<ssehalfvecmode> 1 \"register_operand\" \"x,x\")\n \t  (match_operand:<ssehalfvecmode> 2 \"vector_move_operand\" \"xm,C\")))]\n   \"TARGET_AVX\""}]}