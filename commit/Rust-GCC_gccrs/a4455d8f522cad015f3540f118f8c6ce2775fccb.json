{"sha": "a4455d8f522cad015f3540f118f8c6ce2775fccb", "node_id": "C_kwDOANBUbNoAKGE0NDU1ZDhmNTIyY2FkMDE1ZjM1NDBmMTE4ZjhjNmNlMjc3NWZjY2I", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-05-26T08:55:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-26T08:55:57Z"}, "message": "Merge #1280\n\n1280: Str's have the same layout as [T] r=philberty a=philberty\n\nRaw strings have a very specific type layout which maps over to Slices. It\r\nalso has very specific type checking rules so for example:\r\n\r\n    let a:&str = \"TEST 1\";\r\n    let b:&str = &\"TEST 2\";\r\n\r\nAre both the same type this is likely to be for all DST's but lets do one\r\nrule at a time.\r\n\r\nFixes #1023 #1271\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "523681227dc0a48b4f7176ca9dcedd37a46f1f51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/523681227dc0a48b4f7176ca9dcedd37a46f1f51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4455d8f522cad015f3540f118f8c6ce2775fccb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJij0CdCRBK7hj4Ov3rIwAAVKUIAIxRgQ3S0Yf02t/GJkNm4L51\n0c58lSHp4Wwor3tcoe0JzDrJldsHTRVLB0q7t31haBJ0y1kLMVnyRdy/vRBx4Vnf\n9WQwn+aUIOLKuyW+w+lj/4U0h7IWz3MSpDR2YZ7D9UwmDo9t93paFpkR3U4GjziG\nzqfd+NGFEq/HDf7qPsayJOk1Y/G24TJb+sJNLGBmZZC5kTHIgS6eRPNuZB04ni64\nevkY0DSJF3E8+/fjpJaDtQcWgASwc7OS3tyH7lHz1IisdHVu1+NDKSexAXPeyi7f\nozYum0TEA1x6PZLAt4a2XmuAT7anqWP5WU4en4tIOwtznklvJdTbx3onwy0caoA=\n=kWH2\n-----END PGP SIGNATURE-----\n", "payload": "tree 523681227dc0a48b4f7176ca9dcedd37a46f1f51\nparent 5c84a5ca514398f858020c378c5a26f0593eaee3\nparent 4cfd6942c07021db05beae40e1128901e37109e6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1653555357 +0000\ncommitter GitHub <noreply@github.com> 1653555357 +0000\n\nMerge #1280\n\n1280: Str's have the same layout as [T] r=philberty a=philberty\n\nRaw strings have a very specific type layout which maps over to Slices. It\r\nalso has very specific type checking rules so for example:\r\n\r\n    let a:&str = \"TEST 1\";\r\n    let b:&str = &\"TEST 2\";\r\n\r\nAre both the same type this is likely to be for all DST's but lets do one\r\nrule at a time.\r\n\r\nFixes #1023 #1271\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4455d8f522cad015f3540f118f8c6ce2775fccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4455d8f522cad015f3540f118f8c6ce2775fccb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4455d8f522cad015f3540f118f8c6ce2775fccb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c84a5ca514398f858020c378c5a26f0593eaee3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c84a5ca514398f858020c378c5a26f0593eaee3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c84a5ca514398f858020c378c5a26f0593eaee3"}, {"sha": "4cfd6942c07021db05beae40e1128901e37109e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cfd6942c07021db05beae40e1128901e37109e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cfd6942c07021db05beae40e1128901e37109e6"}], "stats": {"total": 315, "additions": 249, "deletions": 66}, "files": [{"sha": "4168bb8806b9fe058f28f0b1e9d28043dbdf222f", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4455d8f522cad015f3540f118f8c6ce2775fccb/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4455d8f522cad015f3540f118f8c6ce2775fccb/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=a4455d8f522cad015f3540f118f8c6ce2775fccb", "patch": "@@ -1014,13 +1014,28 @@ tree\n CompileExpr::compile_string_literal (const HIR::LiteralExpr &expr,\n \t\t\t\t     const TyTy::BaseType *tyty)\n {\n+  tree fat_pointer = TyTyResolveCompile::compile (ctx, tyty);\n+\n   rust_assert (expr.get_lit_type () == HIR::Literal::STRING);\n   const auto literal_value = expr.get_literal ();\n \n   auto base = ctx->get_backend ()->string_constant_expression (\n     literal_value.as_string ());\n-  return address_expression (base, build_pointer_type (TREE_TYPE (base)),\n-\t\t\t     expr.get_locus ());\n+  tree data = address_expression (base, build_pointer_type (TREE_TYPE (base)),\n+\t\t\t\t  expr.get_locus ());\n+\n+  TyTy::BaseType *usize = nullptr;\n+  bool ok = ctx->get_tyctx ()->lookup_builtin (\"usize\", &usize);\n+  rust_assert (ok);\n+  tree type = TyTyResolveCompile::compile (ctx, usize);\n+\n+  mpz_t ival;\n+  mpz_init_set_ui (ival, literal_value.as_string ().size ());\n+  tree size = double_int_to_tree (type, mpz_get_double_int (type, ival, true));\n+\n+  return ctx->get_backend ()->constructor_expression (fat_pointer, false,\n+\t\t\t\t\t\t      {data, size}, -1,\n+\t\t\t\t\t\t      expr.get_locus ());\n }\n \n tree"}, {"sha": "6068e0d81fdf975ea1fb6d0b8924f7de107c6ded", "filename": "gcc/rust/backend/rust-compile-type.cc", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4455d8f522cad015f3540f118f8c6ce2775fccb/gcc%2Frust%2Fbackend%2Frust-compile-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4455d8f522cad015f3540f118f8c6ce2775fccb/gcc%2Frust%2Fbackend%2Frust-compile-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-type.cc?ref=a4455d8f522cad015f3540f118f8c6ce2775fccb", "patch": "@@ -525,6 +525,7 @@ void\n TyTyResolveCompile::visit (const TyTy::ReferenceType &type)\n {\n   const TyTy::SliceType *slice = nullptr;\n+  const TyTy::StrType *str = nullptr;\n   if (type.is_dyn_slice_type (&slice))\n     {\n       tree type_record = create_slice_type_record (*slice);\n@@ -538,6 +539,18 @@ TyTyResolveCompile::visit (const TyTy::ReferenceType &type)\n \n       return;\n     }\n+  else if (type.is_dyn_str_type (&str))\n+    {\n+      tree type_record = create_str_type_record (*str);\n+      std::string dyn_str_type_str\n+\t= std::string (type.is_mutable () ? \"&mut \" : \"&\") + \"str\";\n+\n+      translated\n+\t= ctx->get_backend ()->named_type (dyn_str_type_str, type_record,\n+\t\t\t\t\t   str->get_locus ());\n+\n+      return;\n+    }\n \n   tree base_compiled_type\n     = TyTyResolveCompile::compile (ctx, type.get_base (), trait_object_mode);\n@@ -556,6 +569,7 @@ void\n TyTyResolveCompile::visit (const TyTy::PointerType &type)\n {\n   const TyTy::SliceType *slice = nullptr;\n+  const TyTy::StrType *str = nullptr;\n   if (type.is_dyn_slice_type (&slice))\n     {\n       tree type_record = create_slice_type_record (*slice);\n@@ -569,6 +583,18 @@ TyTyResolveCompile::visit (const TyTy::PointerType &type)\n \n       return;\n     }\n+  else if (type.is_dyn_str_type (&str))\n+    {\n+      tree type_record = create_str_type_record (*str);\n+      std::string dyn_str_type_str\n+\t= std::string (type.is_mutable () ? \"*mut \" : \"*const \") + \"str\";\n+\n+      translated\n+\t= ctx->get_backend ()->named_type (dyn_str_type_str, type_record,\n+\t\t\t\t\t   str->get_locus ());\n+\n+      return;\n+    }\n \n   tree base_compiled_type\n     = TyTyResolveCompile::compile (ctx, type.get_base (), trait_object_mode);\n@@ -586,7 +612,7 @@ TyTyResolveCompile::visit (const TyTy::PointerType &type)\n void\n TyTyResolveCompile::visit (const TyTy::StrType &type)\n {\n-  tree raw_str = ctx->get_backend ()->raw_str_type ();\n+  tree raw_str = create_str_type_record (type);\n   translated\n     = ctx->get_backend ()->named_type (\"str\", raw_str,\n \t\t\t\t       Linemap::predeclared_location ());\n@@ -657,5 +683,31 @@ TyTyResolveCompile::create_slice_type_record (const TyTy::SliceType &type)\n   return record;\n }\n \n+tree\n+TyTyResolveCompile::create_str_type_record (const TyTy::StrType &type)\n+{\n+  // lookup usize\n+  TyTy::BaseType *usize = nullptr;\n+  bool ok = ctx->get_tyctx ()->lookup_builtin (\"usize\", &usize);\n+  rust_assert (ok);\n+\n+  tree char_ptr = build_pointer_type (char_type_node);\n+  tree const_char_type = build_qualified_type (char_ptr, TYPE_QUAL_CONST);\n+\n+  tree element_type = const_char_type;\n+  tree data_field_ty = build_pointer_type (element_type);\n+  Backend::typed_identifier data_field (\"data\", data_field_ty,\n+\t\t\t\t\ttype.get_locus ());\n+\n+  tree len_field_ty = TyTyResolveCompile::compile (ctx, usize);\n+  Backend::typed_identifier len_field (\"len\", len_field_ty, type.get_locus ());\n+\n+  tree record = ctx->get_backend ()->struct_type ({data_field, len_field});\n+  SLICE_FLAG (record) = 1;\n+  TYPE_MAIN_VARIANT (record) = ctx->insert_main_variant (record);\n+\n+  return record;\n+}\n+\n } // namespace Compile\n } // namespace Rust"}, {"sha": "c9b6b62104629ea8453b5d7fd493271f5c624fb1", "filename": "gcc/rust/backend/rust-compile-type.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4455d8f522cad015f3540f118f8c6ce2775fccb/gcc%2Frust%2Fbackend%2Frust-compile-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4455d8f522cad015f3540f118f8c6ce2775fccb/gcc%2Frust%2Fbackend%2Frust-compile-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-type.h?ref=a4455d8f522cad015f3540f118f8c6ce2775fccb", "patch": "@@ -62,6 +62,7 @@ class TyTyResolveCompile : public TyTy::TyConstVisitor\n \n protected:\n   tree create_slice_type_record (const TyTy::SliceType &type);\n+  tree create_str_type_record (const TyTy::StrType &type);\n \n private:\n   TyTyResolveCompile (Context *ctx, bool trait_object_mode);"}, {"sha": "9bcd01c814cf3d18d9324dbcc79f1fedc45cbfe8", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4455d8f522cad015f3540f118f8c6ce2775fccb/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4455d8f522cad015f3540f118f8c6ce2775fccb/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=a4455d8f522cad015f3540f118f8c6ce2775fccb", "patch": "@@ -210,6 +210,12 @@ HIRCompileBase::coercion_site (tree rvalue, const TyTy::BaseType *rval,\n \n   if (expected->get_kind () == TyTy::TypeKind::REF)\n     {\n+      // this is a dyn object\n+      if (SLICE_TYPE_P (TREE_TYPE (rvalue)))\n+\t{\n+\t  return rvalue;\n+\t}\n+\n       // bad coercion... of something to a reference\n       if (actual->get_kind () != TyTy::TypeKind::REF)\n \treturn error_mark_node;\n@@ -218,11 +224,6 @@ HIRCompileBase::coercion_site (tree rvalue, const TyTy::BaseType *rval,\n \t= static_cast<const TyTy::ReferenceType *> (expected);\n       const TyTy::ReferenceType *act\n \t= static_cast<const TyTy::ReferenceType *> (actual);\n-      if (act->is_dyn_slice_type ())\n-\t{\n-\t  // nothing to do\n-\t  return rvalue;\n-\t}\n \n       tree expected_type = TyTyResolveCompile::compile (ctx, act->get_base ());\n       tree deref_rvalue\n@@ -232,7 +233,7 @@ HIRCompileBase::coercion_site (tree rvalue, const TyTy::BaseType *rval,\n       tree coerced\n \t= coercion_site (deref_rvalue, act->get_base (), exp->get_base (),\n \t\t\t lvalue_locus, rvalue_locus);\n-      if (exp->is_dyn_slice_type () && SLICE_TYPE_P (TREE_TYPE (coerced)))\n+      if (exp->is_dyn_object () && SLICE_TYPE_P (TREE_TYPE (coerced)))\n \treturn coerced;\n \n       return address_expression (coerced,\n@@ -241,6 +242,12 @@ HIRCompileBase::coercion_site (tree rvalue, const TyTy::BaseType *rval,\n     }\n   else if (expected->get_kind () == TyTy::TypeKind::POINTER)\n     {\n+      // this is a dyn object\n+      if (SLICE_TYPE_P (TREE_TYPE (rvalue)))\n+\t{\n+\t  return rvalue;\n+\t}\n+\n       // bad coercion... of something to a reference\n       bool valid_coercion = actual->get_kind () == TyTy::TypeKind::REF\n \t\t\t    || actual->get_kind () == TyTy::TypeKind::POINTER;\n@@ -256,11 +263,6 @@ HIRCompileBase::coercion_site (tree rvalue, const TyTy::BaseType *rval,\n \t{\n \t  const TyTy::ReferenceType *act\n \t    = static_cast<const TyTy::ReferenceType *> (actual);\n-\t  if (act->is_dyn_slice_type ())\n-\t    {\n-\t      // nothing to do\n-\t      return rvalue;\n-\t    }\n \n \t  actual_base = act->get_base ();\n \t  expected_type = TyTyResolveCompile::compile (ctx, act->get_base ());\n@@ -269,11 +271,6 @@ HIRCompileBase::coercion_site (tree rvalue, const TyTy::BaseType *rval,\n \t{\n \t  const TyTy::PointerType *act\n \t    = static_cast<const TyTy::PointerType *> (actual);\n-\t  if (act->is_dyn_slice_type ())\n-\t    {\n-\t      // nothing to do\n-\t      return rvalue;\n-\t    }\n \n \t  actual_base = act->get_base ();\n \t  expected_type = TyTyResolveCompile::compile (ctx, act->get_base ());\n@@ -286,6 +283,8 @@ HIRCompileBase::coercion_site (tree rvalue, const TyTy::BaseType *rval,\n \t\t\t\t\t\t    rvalue_locus);\n       tree coerced = coercion_site (deref_rvalue, actual_base, exp->get_base (),\n \t\t\t\t    lvalue_locus, rvalue_locus);\n+      if (exp->is_dyn_object () && SLICE_TYPE_P (TREE_TYPE (coerced)))\n+\treturn coerced;\n \n       return address_expression (coerced,\n \t\t\t\t build_pointer_type (TREE_TYPE (coerced)),"}, {"sha": "8427cc9afc41e11467a1ece58b7136d2360abbb3", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4455d8f522cad015f3540f118f8c6ce2775fccb/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4455d8f522cad015f3540f118f8c6ce2775fccb/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=a4455d8f522cad015f3540f118f8c6ce2775fccb", "patch": "@@ -925,6 +925,26 @@ class TypeCheckExpr : public TypeCheckBase\n     TyTy::BaseType *resolved_base\n       = TypeCheckExpr::Resolve (expr.get_expr ().get ());\n \n+    // In Rust this is valid because of DST's\n+    //\n+    // fn test() {\n+    //     let a:&str = \"TEST 1\";\n+    //     let b:&str = &\"TEST 2\";\n+    // }\n+    if (resolved_base->get_kind () == TyTy::TypeKind::REF)\n+      {\n+\tconst TyTy::ReferenceType *ref\n+\t  = static_cast<const TyTy::ReferenceType *> (resolved_base);\n+\n+\t// this might end up being a more generic is_dyn object check but lets\n+\t// double check dyn traits type-layout first\n+\tif (ref->is_dyn_str_type ())\n+\t  {\n+\t    infered = resolved_base;\n+\t    return;\n+\t  }\n+      }\n+\n     if (expr.get_is_double_borrow ())\n       {\n \t// FIXME double_reference"}, {"sha": "ab7f59a349a84d60911cc61a6f345efbe6ce54e5", "filename": "gcc/rust/typecheck/rust-tycheck-dump.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4455d8f522cad015f3540f118f8c6ce2775fccb/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4455d8f522cad015f3540f118f8c6ce2775fccb/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h?ref=a4455d8f522cad015f3540f118f8c6ce2775fccb", "patch": "@@ -98,6 +98,7 @@ class TypeResolverDump : public TypeCheckBase\n \n   void visit (HIR::BlockExpr &expr) override\n   {\n+    dump += \"{\\n\";\n     indentation_level++;\n \n     for (auto &s : expr.get_statements ())\n@@ -115,6 +116,13 @@ class TypeResolverDump : public TypeCheckBase\n       }\n \n     indentation_level--;\n+    dump += \"}\\n\";\n+  }\n+\n+  void visit (HIR::UnsafeBlockExpr &expr) override\n+  {\n+    dump += \"unsafe \";\n+    expr.get_block_expr ()->accept_vis (*this);\n   }\n \n   void visit (HIR::LetStmt &stmt) override"}, {"sha": "1a44c75aace128d7e6b1ff4e2b0a9e2676b6134c", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 70, "deletions": 42, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4455d8f522cad015f3540f118f8c6ce2775fccb/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4455d8f522cad015f3540f118f8c6ce2775fccb/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=a4455d8f522cad015f3540f118f8c6ce2775fccb", "patch": "@@ -2126,6 +2126,42 @@ class CharType : public BaseType\n   bool is_concrete () const override final { return true; }\n };\n \n+class StrType : public BaseType\n+{\n+public:\n+  StrType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n+    : BaseType (ref, ref, TypeKind::STR,\n+\t\t{Resolver::CanonicalPath::create_empty (),\n+\t\t Linemap::predeclared_location ()},\n+\t\trefs)\n+  {}\n+\n+  StrType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n+    : BaseType (ref, ty_ref, TypeKind::STR,\n+\t\t{Resolver::CanonicalPath::create_empty (),\n+\t\t Linemap::predeclared_location ()},\n+\t\trefs)\n+  {}\n+\n+  std::string get_name () const override final { return as_string (); }\n+\n+  void accept_vis (TyVisitor &vis) override;\n+  void accept_vis (TyConstVisitor &vis) const override;\n+\n+  std::string as_string () const override;\n+\n+  BaseType *unify (BaseType *other) override;\n+  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  BaseType *coerce (BaseType *other) override;\n+  BaseType *cast (BaseType *other) override;\n+\n+  bool is_equal (const BaseType &other) const override;\n+\n+  BaseType *clone () const final override;\n+  BaseType *monomorphized_clone () const final override;\n+  bool is_concrete () const override final { return true; }\n+};\n+\n class ReferenceType : public BaseType\n {\n public:\n@@ -2180,21 +2216,35 @@ class ReferenceType : public BaseType\n \n   bool is_mutable () const { return mut == Mutability::Mut; }\n \n-  bool is_dyn_slice_type () const\n+  bool is_dyn_object () const\n   {\n-    return get_base ()->destructure ()->get_kind () == TyTy::TypeKind::SLICE;\n+    return is_dyn_slice_type () || is_dyn_str_type ();\n   }\n \n-  bool is_dyn_slice_type (const TyTy::SliceType **slice) const\n+  bool is_dyn_slice_type (const TyTy::SliceType **slice = nullptr) const\n   {\n     const TyTy::BaseType *element = get_base ()->destructure ();\n     if (element->get_kind () != TyTy::TypeKind::SLICE)\n       return false;\n+    if (slice == nullptr)\n+      return true;\n \n     *slice = static_cast<const TyTy::SliceType *> (element);\n     return true;\n   }\n \n+  bool is_dyn_str_type (const TyTy::StrType **str = nullptr) const\n+  {\n+    const TyTy::BaseType *element = get_base ()->destructure ();\n+    if (element->get_kind () != TyTy::TypeKind::STR)\n+      return false;\n+    if (str == nullptr)\n+      return true;\n+\n+    *str = static_cast<const TyTy::StrType *> (element);\n+    return true;\n+  }\n+\n private:\n   TyVar base;\n   Mutability mut;\n@@ -2256,62 +2306,40 @@ class PointerType : public BaseType\n \n   bool is_const () const { return mut == Mutability::Imm; }\n \n-  bool is_dyn_slice_type () const\n+  bool is_dyn_object () const\n   {\n-    return get_base ()->destructure ()->get_kind () == TyTy::TypeKind::SLICE;\n+    return is_dyn_slice_type () || is_dyn_str_type ();\n   }\n \n-  bool is_dyn_slice_type (const TyTy::SliceType **slice) const\n+  bool is_dyn_slice_type (const TyTy::SliceType **slice = nullptr) const\n   {\n     const TyTy::BaseType *element = get_base ()->destructure ();\n     if (element->get_kind () != TyTy::TypeKind::SLICE)\n       return false;\n+    if (slice == nullptr)\n+      return true;\n \n     *slice = static_cast<const TyTy::SliceType *> (element);\n     return true;\n   }\n \n+  bool is_dyn_str_type (const TyTy::StrType **str = nullptr) const\n+  {\n+    const TyTy::BaseType *element = get_base ()->destructure ();\n+    if (element->get_kind () != TyTy::TypeKind::STR)\n+      return false;\n+    if (str == nullptr)\n+      return true;\n+\n+    *str = static_cast<const TyTy::StrType *> (element);\n+    return true;\n+  }\n+\n private:\n   TyVar base;\n   Mutability mut;\n };\n \n-class StrType : public BaseType\n-{\n-public:\n-  StrType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n-    : BaseType (ref, ref, TypeKind::STR,\n-\t\t{Resolver::CanonicalPath::create_empty (),\n-\t\t Linemap::predeclared_location ()},\n-\t\trefs)\n-  {}\n-\n-  StrType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n-    : BaseType (ref, ty_ref, TypeKind::STR,\n-\t\t{Resolver::CanonicalPath::create_empty (),\n-\t\t Linemap::predeclared_location ()},\n-\t\trefs)\n-  {}\n-\n-  std::string get_name () const override final { return as_string (); }\n-\n-  void accept_vis (TyVisitor &vis) override;\n-  void accept_vis (TyConstVisitor &vis) const override;\n-\n-  std::string as_string () const override;\n-\n-  BaseType *unify (BaseType *other) override;\n-  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n-  BaseType *coerce (BaseType *other) override;\n-  BaseType *cast (BaseType *other) override;\n-\n-  bool is_equal (const BaseType &other) const override;\n-\n-  BaseType *clone () const final override;\n-  BaseType *monomorphized_clone () const final override;\n-  bool is_concrete () const override final { return true; }\n-};\n-\n // https://doc.rust-lang.org/std/primitive.never.html\n //\n // Since the `!` type is really complicated and it is even still unstable"}, {"sha": "5a0fe6cf5304b136d55a36602e7d5805725f5ff4", "filename": "gcc/testsuite/rust/compile/issue-1023.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4455d8f522cad015f3540f118f8c6ce2775fccb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1023.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4455d8f522cad015f3540f118f8c6ce2775fccb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1023.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1023.rs?ref=a4455d8f522cad015f3540f118f8c6ce2775fccb", "patch": "@@ -0,0 +1,4 @@\n+// { dg-additional-options \"-w\" }\n+fn foo(e: &str) -> &str {\n+    &\"\"\n+}"}, {"sha": "5dd6418de4cd29e3f1a9334e54bdba857389ea3f", "filename": "gcc/testsuite/rust/compile/issue-1271.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4455d8f522cad015f3540f118f8c6ce2775fccb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1271.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4455d8f522cad015f3540f118f8c6ce2775fccb/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1271.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1271.rs?ref=a4455d8f522cad015f3540f118f8c6ce2775fccb", "patch": "@@ -0,0 +1,5 @@\n+// { dg-additional-options \"-w\" }\n+fn test() {\n+    let a: &str = \"TEST 1\";\n+    let b: &str = &\"TEST 2\";\n+}"}, {"sha": "3087d4d0a5f8ad01382e81aa244a325563ac0c80", "filename": "gcc/testsuite/rust/compile/xfail/slice1.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c84a5ca514398f858020c378c5a26f0593eaee3/gcc%2Ftestsuite%2Frust%2Fcompile%2Fxfail%2Fslice1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c84a5ca514398f858020c378c5a26f0593eaee3/gcc%2Ftestsuite%2Frust%2Fcompile%2Fxfail%2Fslice1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fxfail%2Fslice1.rs?ref=5c84a5ca514398f858020c378c5a26f0593eaee3", "patch": "@@ -1,5 +0,0 @@\n-// { dg-additional-options \"-w\" }\n-\n-fn foo(e: &str) -> &str { // { dg-bogus \"expected\" \"#391\" { xfail *-*-* } }\n-    &\"\" // { dg-bogus \"expected\" \"#391\" { xfail *-*-* } }\n-}"}, {"sha": "be89184ed38fd31318bcc89c95dde640f13f72b9", "filename": "gcc/testsuite/rust/execute/torture/str-layout1.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4455d8f522cad015f3540f118f8c6ce2775fccb/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fstr-layout1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4455d8f522cad015f3540f118f8c6ce2775fccb/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fstr-layout1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fstr-layout1.rs?ref=a4455d8f522cad015f3540f118f8c6ce2775fccb", "patch": "@@ -0,0 +1,56 @@\n+// { dg-additional-options \"-w\" }\n+// { dg-output \"t1sz=5 t2sz=10\" }\n+mod mem {\n+    extern \"rust-intrinsic\" {\n+        fn transmute<T, U>(_: T) -> U;\n+    }\n+}\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+struct FatPtr<T> {\n+    data: *const T,\n+    len: usize,\n+}\n+\n+pub union Repr<T> {\n+    rust: *const [T],\n+    rust_mut: *mut [T],\n+    raw: FatPtr<T>,\n+}\n+\n+impl<T> [T] {\n+    pub const fn len(&self) -> usize {\n+        unsafe { Repr { rust: self }.raw.len }\n+    }\n+}\n+\n+impl str {\n+    pub const fn len(&self) -> usize {\n+        self.as_bytes().len()\n+    }\n+\n+    pub const fn as_bytes(&self) -> &[u8] {\n+        unsafe { mem::transmute(self) }\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let t1: &str = \"TEST1\";\n+    let t2: &str = &\"TEST_12345\";\n+\n+    let t1sz = t1.len();\n+    let t2sz = t2.len();\n+\n+    unsafe {\n+        let a = \"t1sz=%i t2sz=%i\\n\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, t1sz as i32, t2sz as i32);\n+    }\n+\n+    0\n+}"}]}