{"sha": "858904db9ee5873db3c28b4ba0f4258e9c8ece0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU4OTA0ZGI5ZWU1ODczZGIzYzI4YjRiYTBmNDI1OGU5YzhlY2UwZA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2005-12-18T01:19:20Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2005-12-18T01:19:20Z"}, "message": "tree-vn.c (vn_add): Use XNEW.\n\n        * tree-vn.c (vn_add): Use XNEW.\n        * tree-ssa-ccp.c (ccp_initialize): Use XNEWVEC.\n        (ccp_fold): Likewise.\n        (fold_stmt_r): Use explicit cast to convert from void *.\n        * tree-outof-ssa.c (new_temp_expr_table): Use XCNEWVEC.\n        (new_temp_expr_table): Likewise.\n        * gimplify.c (lookup_tmp_var): Use XNEW.\n        (gimplify_asm_expr): Use explcit cast to convert from void *.\n        * tree-into-ssa.c (get_ssa_name_ann): Likewise.\n        (get_def_blocks_for): Use XNEW.\n        (add_to_repl_tbl): Likewise.\n        (mark_def_sites): Use explicit cast to convert from void *.\n        (def_blocks_free): Likewise.\n        (mark_def_sites_initialize_block): Likewise.\n        (update_ssa): Use XNEWVEC.\n        * tree-dfa.c (create_var_ann): Use GGC_NEW.\n        (create_stmt_ann): Likewise.\n        (create_tree_ann): Likewise.\n        (referenced_var_insert): Likewise.\n        (set_default_def): Likewise.\n        (referenced_var_lookup_if_exists): Use explicit cast to\n        * convert\n        from void *.\n        (referenced_var_lookup): Likewise.\n        (default_def): Likewise.\n        (set_default_def): Likewise.\n        * tree-cfg.c (create_bb): Likewise.\n        (edge_to_cases_cleanup): Likewise.\n        (verify_node_sharing): Likewise.\n        (record_switch_edge): Use XNEW.\n        (cleanup_dead_labels): Use XCNEWVEC.\n        (tree_duplicate_sese_region): Use XNEWVEC.\n        * tree-scalar-evolution.c (get_instantiated_value): Likewise.\n        * tree-ssa.c (verify_ssa): Use XCNEWVEC.\n        (int_tree_map_eq): Use explicit cast to convert from void *.\n        * libgcov.c (gcov_exit): Use explicit cast to convert from\n        * void *.\n        (__gcov_execl): Likewise.\n        (__gcov_execlp): Likewise.\n        (__gcov_execle): Likewise.\n        * tree-eh.c (struct_ptr_eq): Likewise.\n        (struct_ptr_hash): Likewise.\n        (lookup_stmt_eh_region_fn): Likewise.\n        (outside_finally_tree): Likewise.\n        (find_goto_replacement): Likewise.\n        (make_eh_edge): Likewise.\n        (mark_eh_edge): Likewise.\n        (add_stmt_to_eh_region_fn): Use GGC_NEW.\n        (record_in_finally_tree): Use XNEW.\n        (maybe_record_in_goto_queue): Use XRESIZEVEC.\n        (lower_try_finally_copy): Use XCNEWVEC.\n\nFrom-SVN: r108736", "tree": {"sha": "47c51434efd5419a4c84affaa30de90732e3007d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47c51434efd5419a4c84affaa30de90732e3007d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/858904db9ee5873db3c28b4ba0f4258e9c8ece0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/858904db9ee5873db3c28b4ba0f4258e9c8ece0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/858904db9ee5873db3c28b4ba0f4258e9c8ece0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/858904db9ee5873db3c28b4ba0f4258e9c8ece0d/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0e27ef71a5e6b0a413a2ea667a085656e9d638b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e27ef71a5e6b0a413a2ea667a085656e9d638b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e27ef71a5e6b0a413a2ea667a085656e9d638b4"}], "stats": {"total": 164, "additions": 111, "deletions": 53}, "files": [{"sha": "a590463e70fca58dc2213a9a41d237776b7e8624", "filename": "gcc/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858904db9ee5873db3c28b4ba0f4258e9c8ece0d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858904db9ee5873db3c28b4ba0f4258e9c8ece0d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=858904db9ee5873db3c28b4ba0f4258e9c8ece0d", "patch": "@@ -4,6 +4,58 @@\n \tdwarf2out_def_cfa. Only add space for frame pointer to cfa_offset\n \twhen frame_pointer_needed. \n \n+2005-12-17  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* tree-vn.c (vn_add): Use XNEW.\n+\t* tree-ssa-ccp.c (ccp_initialize): Use XNEWVEC.\n+\t(ccp_fold): Likewise.\n+\t(fold_stmt_r): Use explicit cast to convert from void *.\n+\t* tree-outof-ssa.c (new_temp_expr_table): Use XCNEWVEC.\n+\t(new_temp_expr_table): Likewise.\n+\t* gimplify.c (lookup_tmp_var): Use XNEW.\n+\t(gimplify_asm_expr): Use explcit cast to convert from void *.\n+\t* tree-into-ssa.c (get_ssa_name_ann): Likewise.\n+\t(get_def_blocks_for): Use XNEW.\n+\t(add_to_repl_tbl): Likewise.\n+\t(mark_def_sites): Use explicit cast to convert from void *.\n+\t(def_blocks_free): Likewise.\n+\t(mark_def_sites_initialize_block): Likewise.\n+\t(update_ssa): Use XNEWVEC.\n+\t* tree-dfa.c (create_var_ann): Use GGC_NEW.\n+\t(create_stmt_ann): Likewise.\n+\t(create_tree_ann): Likewise.\n+\t(referenced_var_insert): Likewise.\n+\t(set_default_def): Likewise.\n+\t(referenced_var_lookup_if_exists): Use explicit cast to convert\n+\tfrom void *.\n+\t(referenced_var_lookup): Likewise.\n+\t(default_def): Likewise.\n+\t(set_default_def): Likewise.\n+\t* tree-cfg.c (create_bb): Likewise.\n+\t(edge_to_cases_cleanup): Likewise.\n+\t(verify_node_sharing): Likewise.\n+\t(record_switch_edge): Use XNEW.\n+\t(cleanup_dead_labels): Use XCNEWVEC.\n+\t(tree_duplicate_sese_region): Use XNEWVEC.\n+\t* tree-scalar-evolution.c (get_instantiated_value): Likewise.\n+\t* tree-ssa.c (verify_ssa): Use XCNEWVEC.\n+\t(int_tree_map_eq): Use explicit cast to convert from void *.\n+\t* libgcov.c (gcov_exit): Use explicit cast to convert from void *.\n+\t(__gcov_execl): Likewise.\n+\t(__gcov_execlp): Likewise.\n+\t(__gcov_execle): Likewise.\n+\t* tree-eh.c (struct_ptr_eq): Likewise.\n+\t(struct_ptr_hash): Likewise.\n+\t(lookup_stmt_eh_region_fn): Likewise.\n+\t(outside_finally_tree): Likewise.\n+\t(find_goto_replacement): Likewise.\n+\t(make_eh_edge): Likewise.\n+\t(mark_eh_edge): Likewise.\n+\t(add_stmt_to_eh_region_fn): Use GGC_NEW.\n+\t(record_in_finally_tree): Use XNEW.\n+\t(maybe_record_in_goto_queue): Use XRESIZEVEC.\n+\t(lower_try_finally_copy): Use XCNEWVEC.\n+\n 2005-12-17  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* tree-inline.c (copy_body_r): Use explicit cast when converting"}, {"sha": "8783dc65df82976a0269b17d40f376a2e4a817ba", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858904db9ee5873db3c28b4ba0f4258e9c8ece0d/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858904db9ee5873db3c28b4ba0f4258e9c8ece0d/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=858904db9ee5873db3c28b4ba0f4258e9c8ece0d", "patch": "@@ -473,7 +473,7 @@ lookup_tmp_var (tree val, bool is_formal)\n       slot = htab_find_slot (gimplify_ctxp->temp_htab, (void *)&elt, INSERT);\n       if (*slot == NULL)\n \t{\n-\t  elt_p = xmalloc (sizeof (*elt_p));\n+\t  elt_p = XNEW (elt_t);\n \t  elt_p->val = val;\n \t  elt_p->temp = ret = create_tmp_from_val (val);\n \t  *slot = (void *) elt_p;\n@@ -3705,7 +3705,7 @@ gimplify_asm_expr (tree *expr_p, tree *pre_p, tree *post_p)\n \t\t\tbreak;\n \t\t    }\n \n-\t\t  str = alloca (len);\n+\t\t  str = (char *) alloca (len);\n \t\t  for (beg = p + 1, dst = str;;)\n \t\t    {\n \t\t      const char *tem;"}, {"sha": "494759e6bed167a75084fe944bc6461d2e9e40a7", "filename": "gcc/libgcov.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858904db9ee5873db3c28b4ba0f4258e9c8ece0d/gcc%2Flibgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858904db9ee5873db3c28b4ba0f4258e9c8ece0d/gcc%2Flibgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcov.c?ref=858904db9ee5873db3c28b4ba0f4258e9c8ece0d", "patch": "@@ -218,7 +218,7 @@ gcov_exit (void)\n     prefix_length = 0;\n   \n   /* Allocate and initialize the filename scratch space.  */\n-  gi_filename = alloca (prefix_length + gcov_max_filename + 1);\n+  gi_filename = (char *) alloca (prefix_length + gcov_max_filename + 1);\n   if (prefix_length)\n     memcpy (gi_filename, gcov_prefix, prefix_length);\n   gi_filename_up = gi_filename + prefix_length;\n@@ -786,7 +786,7 @@ __gcov_execl (const char *path, const char *arg, ...)\n     length++;\n   va_end (ap);\n \n-  args = alloca (length * sizeof (void *));\n+  args = (char **) alloca (length * sizeof (void *));\n   args[0] = (char *) arg;\n   for (i = 1; i < length; i++)\n     args[i] = va_arg (aq, char *);\n@@ -817,7 +817,7 @@ __gcov_execlp (const char *path, const char *arg, ...)\n     length++;\n   va_end (ap);\n \n-  args = alloca (length * sizeof (void *));\n+  args = (char **) alloca (length * sizeof (void *));\n   args[0] = (char *) arg;\n   for (i = 1; i < length; i++)\n     args[i] = va_arg (aq, char *);\n@@ -849,7 +849,7 @@ __gcov_execle (const char *path, const char *arg, ...)\n     length++;\n   va_end (ap);\n \n-  args = alloca (length * sizeof (void *));\n+  args = (char **) alloca (length * sizeof (void *));\n   args[0] = (char *) arg;\n   for (i = 1; i < length; i++)\n     args[i] = va_arg (aq, char *);"}, {"sha": "3f925b3b0123bebeb29b98ba661d0530cb99920e", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858904db9ee5873db3c28b4ba0f4258e9c8ece0d/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858904db9ee5873db3c28b4ba0f4258e9c8ece0d/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=858904db9ee5873db3c28b4ba0f4258e9c8ece0d", "patch": "@@ -374,7 +374,7 @@ create_bb (void *h, void *e, basic_block after)\n \n   bb->index = last_basic_block;\n   bb->flags = BB_NEW;\n-  bb->stmt_list = h ? h : alloc_stmt_list ();\n+  bb->stmt_list = h ? (tree) h : alloc_stmt_list ();\n \n   /* Add the new block to the linked list of blocks.  */\n   link_block (bb, after);\n@@ -640,7 +640,7 @@ edge_to_cases_eq (const void *p1, const void *p2)\n static void\n edge_to_cases_cleanup (void *p)\n {\n-  struct edge_to_cases_elt *elt = p;\n+  struct edge_to_cases_elt *elt = (struct edge_to_cases_elt *) p;\n   tree t, next;\n \n   for (t = elt->case_labels; t; t = next)\n@@ -691,7 +691,7 @@ record_switch_edge (edge e, tree case_label)\n \n   /* Build a hash table element so we can see if E is already\n      in the table.  */\n-  elt = xmalloc (sizeof (struct edge_to_cases_elt));\n+  elt = XNEW (struct edge_to_cases_elt);\n   elt->e = e;\n   elt->case_labels = case_label;\n \n@@ -942,7 +942,7 @@ void\n cleanup_dead_labels (void)\n {\n   basic_block bb;\n-  label_for_bb = xcalloc (last_basic_block, sizeof (tree));\n+  label_for_bb = XCNEWVEC (tree, last_basic_block);\n \n   /* Find a suitable label for each block.  We use the first user-defined\n      label if there is one, or otherwise just the first label we see.  */\n@@ -3453,7 +3453,7 @@ verify_node_sharing (tree * tp, int *walk_subtrees, void *data)\n \n   slot = htab_find_slot (htab, *tp, INSERT);\n   if (*slot)\n-    return *slot;\n+    return (tree) *slot;\n   *slot = *tp;\n \n   return NULL;\n@@ -4343,15 +4343,15 @@ tree_duplicate_sese_region (edge entry, edge exit,\n \n   if (!region_copy)\n     {\n-      region_copy = xmalloc (sizeof (basic_block) * n_region);\n+      region_copy = XNEWVEC (basic_block, n_region);\n       free_region_copy = true;\n     }\n \n   gcc_assert (!need_ssa_update_p ());\n \n   /* Record blocks outside the region that are dominated by something\n      inside.  */\n-  doms = xmalloc (sizeof (basic_block) * n_basic_blocks);\n+  doms = XNEWVEC (basic_block, n_basic_blocks);\n   initialize_original_copy_tables ();\n \n   n_doms = get_dominated_by_region (CDI_DOMINATORS, region, n_region, doms);"}, {"sha": "89cdd6ed849c2f326319cd9ff43f77b5c37c122b", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858904db9ee5873db3c28b4ba0f4258e9c8ece0d/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858904db9ee5873db3c28b4ba0f4258e9c8ece0d/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=858904db9ee5873db3c28b4ba0f4258e9c8ece0d", "patch": "@@ -157,7 +157,7 @@ create_var_ann (tree t)\n   gcc_assert (DECL_P (t));\n   gcc_assert (!t->common.ann || t->common.ann->common.type == VAR_ANN);\n \n-  ann = ggc_alloc (sizeof (*ann));\n+  ann = GGC_NEW (struct var_ann_d);\n   memset ((void *) ann, 0, sizeof (*ann));\n \n   ann->common.type = VAR_ANN;\n@@ -178,7 +178,7 @@ create_stmt_ann (tree t)\n   gcc_assert (is_gimple_stmt (t));\n   gcc_assert (!t->common.ann || t->common.ann->common.type == STMT_ANN);\n \n-  ann = ggc_alloc (sizeof (*ann));\n+  ann = GGC_NEW (struct stmt_ann_d);\n   memset ((void *) ann, 0, sizeof (*ann));\n \n   ann->common.type = STMT_ANN;\n@@ -201,7 +201,7 @@ create_tree_ann (tree t)\n   gcc_assert (t);\n   gcc_assert (!t->common.ann || t->common.ann->common.type == TREE_ANN_COMMON);\n \n-  ann = ggc_alloc (sizeof (*ann));\n+  ann = GGC_NEW (union tree_ann_d);\n   memset ((void *) ann, 0, sizeof (*ann));\n \n   ann->common.type = TREE_ANN_COMMON;\n@@ -580,7 +580,7 @@ referenced_var_lookup_if_exists (unsigned int uid)\n {\n   struct int_tree_map *h, in;\n   in.uid = uid;\n-  h = htab_find_with_hash (referenced_vars, &in, uid);\n+  h = (struct int_tree_map *) htab_find_with_hash (referenced_vars, &in, uid);\n   if (h)\n     return h->to;\n   return NULL_TREE;\n@@ -594,7 +594,7 @@ referenced_var_lookup (unsigned int uid)\n {\n   struct int_tree_map *h, in;\n   in.uid = uid;\n-  h = htab_find_with_hash (referenced_vars, &in, uid);\n+  h = (struct int_tree_map *) htab_find_with_hash (referenced_vars, &in, uid);\n   gcc_assert (h || uid == 0);\n   if (h)\n     return h->to;\n@@ -609,7 +609,7 @@ referenced_var_insert (unsigned int uid, tree to)\n   struct int_tree_map *h;\n   void **loc;\n \n-  h = ggc_alloc (sizeof (struct int_tree_map));\n+  h = GGC_NEW (struct int_tree_map);\n   h->uid = uid;\n   h->to = to;\n   loc = htab_find_slot_with_hash (referenced_vars, h, uid, INSERT);\n@@ -625,7 +625,8 @@ default_def (tree var)\n   struct int_tree_map *h, in;\n   gcc_assert (SSA_VAR_P (var));\n   in.uid = DECL_UID (var);\n-  h = htab_find_with_hash (default_defs, &in, DECL_UID (var));\n+  h = (struct int_tree_map *) htab_find_with_hash (default_defs, &in,\n+                                                   DECL_UID (var));\n   if (h)\n     return h->to;\n   return NULL_TREE;\n@@ -653,14 +654,14 @@ set_default_def (tree var, tree def)\n   /* Default definition might be changed by tail call optimization.  */\n   if (!*loc)\n     {\n-      h = ggc_alloc (sizeof (struct int_tree_map));\n+      h = GGC_NEW (struct int_tree_map);\n       h->uid = DECL_UID (var);\n       h->to = def;\n       *(struct int_tree_map **)  loc = h;\n     }\n    else\n     {\n-      h = *loc;\n+      h = (struct int_tree_map *) *loc;\n       h->to = def;\n     }\n }"}, {"sha": "a0469933b1c440ad53da79b1d4f19498670df502", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858904db9ee5873db3c28b4ba0f4258e9c8ece0d/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858904db9ee5873db3c28b4ba0f4258e9c8ece0d/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=858904db9ee5873db3c28b4ba0f4258e9c8ece0d", "patch": "@@ -57,15 +57,15 @@ using_eh_for_cleanups (void)\n static int\n struct_ptr_eq (const void *a, const void *b)\n {\n-  const void * const * x = a;\n-  const void * const * y = b;\n+  const void * const * x = (const void * const *) a;\n+  const void * const * y = (const void * const *) b;\n   return *x == *y;\n }\n \n static hashval_t\n struct_ptr_hash (const void *a)\n {\n-  const void * const * x = a;\n+  const void * const * x = (const void * const *) a;\n   return (size_t)*x >> 4;\n }\n \n@@ -100,7 +100,7 @@ add_stmt_to_eh_region_fn (struct function *ifun, tree t, int num)\n   gcc_assert (num >= 0);\n   gcc_assert (TREE_CODE (t) != RESX_EXPR);\n \n-  n = ggc_alloc (sizeof (*n));\n+  n = GGC_NEW (struct throw_stmt_node);\n   n->stmt = t;\n   n->region_nr = num;\n \n@@ -168,7 +168,8 @@ lookup_stmt_eh_region_fn (struct function *ifun, tree t)\n     return -2;\n \n   n.stmt = t;\n-  p = htab_find (get_eh_throw_stmt_table (ifun), &n);\n+  p = (struct throw_stmt_node *) htab_find (get_eh_throw_stmt_table (ifun),\n+                                            &n);\n \n   return (p ? p->region_nr : -1);\n }\n@@ -202,7 +203,7 @@ record_in_finally_tree (tree child, tree parent)\n   struct finally_tree_node *n;\n   void **slot;\n \n-  n = xmalloc (sizeof (*n));\n+  n = XNEW (struct finally_tree_node);\n   n->child = child;\n   n->parent = parent;\n \n@@ -266,7 +267,7 @@ outside_finally_tree (tree start, tree target)\n   do\n     {\n       n.child = start;\n-      p = htab_find (finally_tree, &n);\n+      p = (struct finally_tree_node *) htab_find (finally_tree, &n);\n       if (!p)\n \treturn true;\n       start = p->parent;\n@@ -369,7 +370,8 @@ find_goto_replacement (struct leh_tf_state *tf, tree stmt)\n {\n   struct goto_queue_node tmp, *ret;\n   tmp.stmt = stmt;\n-  ret = bsearch (&tmp, tf->goto_queue, tf->goto_queue_active,\n+  ret = (struct goto_queue_node *)\n+     bsearch (&tmp, tf->goto_queue, tf->goto_queue_active,\n \t\t sizeof (struct goto_queue_node), goto_queue_cmp);\n   return (ret ? ret->repl_stmt : NULL);\n }\n@@ -537,7 +539,7 @@ maybe_record_in_goto_queue (struct leh_state *state, tree stmt)\n       size = (size ? size * 2 : 32);\n       tf->goto_queue_size = size;\n       tf->goto_queue\n-\t= xrealloc (tf->goto_queue, size * sizeof (struct goto_queue_node));\n+         = XRESIZEVEC (struct goto_queue_node, tf->goto_queue, size);\n     }\n \n   q = &tf->goto_queue[active];\n@@ -1058,14 +1060,14 @@ lower_try_finally_copy (struct leh_state *state, struct leh_tf_state *tf)\n       struct goto_queue_node *q, *qe;\n       tree return_val = NULL;\n       int return_index, index;\n-      struct\n+      struct labels_s\n       {\n \tstruct goto_queue_node *q;\n \ttree label;\n       } *labels;\n \n       return_index = VEC_length (tree, tf->dest_array);\n-      labels = xcalloc (sizeof (*labels), return_index + 1);\n+      labels = XCNEWVEC (struct labels_s, return_index + 1);\n \n       q = tf->goto_queue;\n       qe = q + tf->goto_queue_active;\n@@ -1713,7 +1715,7 @@ make_eh_edge (struct eh_region *region, void *data)\n   tree stmt, lab;\n   basic_block src, dst;\n \n-  stmt = data;\n+  stmt = (tree) data;\n   lab = get_eh_region_tree_label (region);\n \n   src = bb_for_stmt (stmt);\n@@ -1755,7 +1757,7 @@ mark_eh_edge (struct eh_region *region, void *data)\n   basic_block src, dst;\n   edge e;\n \n-  stmt = data;\n+  stmt = (tree) data;\n   lab = get_eh_region_tree_label (region);\n \n   src = bb_for_stmt (stmt);"}, {"sha": "6acd69ef3e065ab250651f97f6a086ba057767fd", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858904db9ee5873db3c28b4ba0f4258e9c8ece0d/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858904db9ee5873db3c28b4ba0f4258e9c8ece0d/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=858904db9ee5873db3c28b4ba0f4258e9c8ece0d", "patch": "@@ -246,7 +246,7 @@ get_ssa_name_ann (tree name)\n   if (!SSA_NAME_AUX (name))\n     SSA_NAME_AUX (name) = xcalloc (1, sizeof (struct ssa_name_info));\n \n-  return SSA_NAME_AUX (name);\n+  return (struct ssa_name_info *) SSA_NAME_AUX (name);\n }\n \n \n@@ -365,7 +365,7 @@ get_def_blocks_for (tree var)\n   slot = htab_find_slot (def_blocks, (void *) &db, INSERT);\n   if (*slot == NULL)\n     {\n-      db_p = xmalloc (sizeof (*db_p));\n+      db_p = XNEW (struct def_blocks_d);\n       db_p->var = var;\n       db_p->def_blocks = BITMAP_ALLOC (NULL);\n       db_p->phi_blocks = BITMAP_ALLOC (NULL);\n@@ -532,7 +532,7 @@ add_to_repl_tbl (tree new, tree old)\n   slot = htab_find_slot (repl_tbl, (void *) &m, INSERT);\n   if (*slot == NULL)\n     {\n-      mp = xmalloc (sizeof (*mp));\n+      mp = XNEW (struct repl_map_d);\n       mp->name = new;\n       mp->set = BITMAP_ALLOC (NULL);\n       *slot = (void *) mp;\n@@ -630,7 +630,8 @@ mark_def_sites (struct dom_walk_data *walk_data,\n \t\tbasic_block bb,\n \t\tblock_stmt_iterator bsi)\n {\n-  struct mark_def_sites_global_data *gd = walk_data->global_data;\n+  struct mark_def_sites_global_data *gd =\n+     (struct mark_def_sites_global_data *) walk_data->global_data;\n   bitmap kills = gd->kills;\n   tree stmt, def;\n   use_operand_p use_p;\n@@ -1203,7 +1204,7 @@ def_blocks_eq (const void *p1, const void *p2)\n static void\n def_blocks_free (void *p)\n {\n-  struct def_blocks_d *entry = p;\n+  struct def_blocks_d *entry = (struct def_blocks_d *) p;\n   BITMAP_FREE (entry->def_blocks);\n   BITMAP_FREE (entry->phi_blocks);\n   BITMAP_FREE (entry->livein_blocks);\n@@ -1645,7 +1646,8 @@ static void\n mark_def_sites_initialize_block (struct dom_walk_data *walk_data,\n \t\t\t\t basic_block bb ATTRIBUTE_UNUSED)\n {\n-  struct mark_def_sites_global_data *gd = walk_data->global_data;\n+  struct mark_def_sites_global_data *gd =\n+     (struct mark_def_sites_global_data *) walk_data->global_data;\n   bitmap kills = gd->kills;\n   bitmap_clear (kills);\n }\n@@ -2744,7 +2746,7 @@ update_ssa (unsigned update_flags)\n \n       /* If the caller requested PHI nodes to be added, compute\n \t dominance frontiers.  */\n-      dfs = xmalloc (last_basic_block * sizeof (bitmap));\n+      dfs = XNEWVEC (bitmap, last_basic_block);\n       FOR_EACH_BB (bb)\n \tdfs[bb->index] = BITMAP_ALLOC (NULL);\n       compute_dominance_frontiers (dfs);"}, {"sha": "ae93bcaa94a9dd4b7ee994718a92cba2a5ed95c7", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858904db9ee5873db3c28b4ba0f4258e9c8ece0d/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858904db9ee5873db3c28b4ba0f4258e9c8ece0d/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=858904db9ee5873db3c28b4ba0f4258e9c8ece0d", "patch": "@@ -1340,12 +1340,12 @@ new_temp_expr_table (var_map map)\n {\n   temp_expr_table_p t;\n \n-  t = (temp_expr_table_p) xmalloc (sizeof (struct temp_expr_table_d));\n+  t = XNEW (struct temp_expr_table_d);\n   t->map = map;\n \n-  t->version_info = xcalloc (num_ssa_names + 1, sizeof (void *));\n-  t->partition_dep_list = xcalloc (num_var_partitions (map) + 1, \n-\t\t\t\t   sizeof (value_expr_p));\n+  t->version_info = XCNEWVEC (void *, num_ssa_names + 1);\n+  t->partition_dep_list = XCNEWVEC (value_expr_p,\n+                                    num_var_partitions (map) + 1);\n \n   t->replaceable = BITMAP_ALLOC (NULL);\n   t->partition_in_use = BITMAP_ALLOC (NULL);"}, {"sha": "2b0d817d8a7a8ea55854b3519c398fab6f85d302", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858904db9ee5873db3c28b4ba0f4258e9c8ece0d/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858904db9ee5873db3c28b4ba0f4258e9c8ece0d/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=858904db9ee5873db3c28b4ba0f4258e9c8ece0d", "patch": "@@ -1867,7 +1867,7 @@ get_instantiated_value (htab_t cache, tree version)\n   struct scev_info_str *info, pattern;\n   \n   pattern.var = version;\n-  info = htab_find (cache, &pattern);\n+  info = (struct scev_info_str *) htab_find (cache, &pattern);\n \n   if (info)\n     return info->chrec;"}, {"sha": "cd4bc9d67a6e5d98b4c5f3d6fb2f74847e5572ef", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858904db9ee5873db3c28b4ba0f4258e9c8ece0d/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858904db9ee5873db3c28b4ba0f4258e9c8ece0d/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=858904db9ee5873db3c28b4ba0f4258e9c8ece0d", "patch": "@@ -538,7 +538,7 @@ ccp_initialize (void)\n {\n   basic_block bb;\n \n-  const_val = xmalloc (num_ssa_names * sizeof (*const_val));\n+  const_val = XNEWVEC (prop_value_t, num_ssa_names);\n   memset (const_val, 0, num_ssa_names * sizeof (*const_val));\n \n   /* Initialize simulation flags for PHI nodes and statements.  */\n@@ -935,7 +935,7 @@ ccp_fold (tree stmt)\n \t  use_operand_p var_p;\n \n \t  /* Preserve the original values of every operand.  */\n-\t  orig = xmalloc (sizeof (tree) *  NUM_SSA_OPERANDS (stmt, SSA_OP_USE));\n+\t  orig = XNEWVEC (tree,  NUM_SSA_OPERANDS (stmt, SSA_OP_USE));\n \t  FOR_EACH_SSA_TREE_OPERAND (var, stmt, iter, SSA_OP_USE)\n \t    orig[i++] = var;\n \n@@ -1937,7 +1937,7 @@ struct fold_stmt_r_data\n static tree\n fold_stmt_r (tree *expr_p, int *walk_subtrees, void *data)\n {\n-  struct fold_stmt_r_data *fold_stmt_r_data = data;\n+  struct fold_stmt_r_data *fold_stmt_r_data = (struct fold_stmt_r_data *) data;\n   bool *inside_addr_expr_p = fold_stmt_r_data->inside_addr_expr_p;\n   bool *changed_p = fold_stmt_r_data->changed_p;\n   tree expr = *expr_p, t;"}, {"sha": "7d9f2740e8d38b782dcf181333bbf210a9f02037", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858904db9ee5873db3c28b4ba0f4258e9c8ece0d/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858904db9ee5873db3c28b4ba0f4258e9c8ece0d/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=858904db9ee5873db3c28b4ba0f4258e9c8ece0d", "patch": "@@ -634,7 +634,7 @@ verify_ssa (bool check_modified_stmt)\n {\n   size_t i;\n   basic_block bb;\n-  basic_block *definition_block = xcalloc (num_ssa_names, sizeof (basic_block));\n+  basic_block *definition_block = XCNEWVEC (basic_block, num_ssa_names);\n   ssa_op_iter iter;\n   tree op;\n   enum dom_state orig_dom_state = dom_computed[CDI_DOMINATORS];\n@@ -781,7 +781,8 @@ verify_ssa (bool check_modified_stmt)\n int\n int_tree_map_eq (const void *va, const void *vb)\n {\n-  const struct int_tree_map  *a = va, *b = vb;\n+  const struct int_tree_map *a = (const struct int_tree_map *) va;\n+  const struct int_tree_map *b = (const struct int_tree_map *) vb;\n   return (a->uid == b->uid);\n }\n "}, {"sha": "805318736339d494172a22443a6749438d722e4d", "filename": "gcc/tree-vn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858904db9ee5873db3c28b4ba0f4258e9c8ece0d/gcc%2Ftree-vn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858904db9ee5873db3c28b4ba0f4258e9c8ece0d/gcc%2Ftree-vn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vn.c?ref=858904db9ee5873db3c28b4ba0f4258e9c8ece0d", "patch": "@@ -201,7 +201,7 @@ vn_add (tree expr, tree val, tree stmt)\n   void **slot;\n   val_expr_pair_t new_pair;\n   \n-  new_pair = xmalloc (sizeof (struct val_expr_pair_d));\n+  new_pair = XNEW (struct val_expr_pair_d);\n   new_pair->e = expr;\n   new_pair->v = val;\n   new_pair->stmt = stmt;"}]}