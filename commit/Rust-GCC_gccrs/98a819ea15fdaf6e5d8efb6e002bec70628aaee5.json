{"sha": "98a819ea15fdaf6e5d8efb6e002bec70628aaee5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThhODE5ZWExNWZkYWY2ZTVkOGVmYjZlMDAyYmVjNzA2MjhhYWVlNQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2015-10-17T16:50:47Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2015-10-17T16:50:47Z"}, "message": "re PR fortran/67987 (ICE on declaring and initializing character with negative len)\n\n2015-10-17  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/67987\n\t* decl.c (char_len_param_value): Unwrap unlong line.  If LEN < 0,\n\tforce it to zero per the Fortran 90, 95, 2003, and 2008 Standards. \n\t* resolve.c (gfc_resolve_substring_charlen): Unwrap unlong line.\n\tIf 'start' is larger than 'end', length of substring is negative,\n\tso explicitly set it to zero.\n\t(resolve_charlen): Remove -Wsurprising warning.  Update comment to\n\treflect that the text is from the F2008 standard.\n\n2015-10-17  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/67987\n\t* gfortran.df/pr67987.f90: New test.\n\t* gfortran.dg/char_length_2.f90: Update testcase.\n\nFrom-SVN: r228933", "tree": {"sha": "538dc3982c7de62c55c6e43407ca68fd6c995ae1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/538dc3982c7de62c55c6e43407ca68fd6c995ae1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98a819ea15fdaf6e5d8efb6e002bec70628aaee5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98a819ea15fdaf6e5d8efb6e002bec70628aaee5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98a819ea15fdaf6e5d8efb6e002bec70628aaee5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98a819ea15fdaf6e5d8efb6e002bec70628aaee5/comments", "author": null, "committer": null, "parents": [{"sha": "767dc529b7ed5926d4900a4182826967beb8c2c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/767dc529b7ed5926d4900a4182826967beb8c2c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/767dc529b7ed5926d4900a4182826967beb8c2c2"}], "stats": {"total": 99, "additions": 71, "deletions": 28}, "files": [{"sha": "9c5bb766c9b81f2eb7f5d487696808533d13621f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98a819ea15fdaf6e5d8efb6e002bec70628aaee5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98a819ea15fdaf6e5d8efb6e002bec70628aaee5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=98a819ea15fdaf6e5d8efb6e002bec70628aaee5", "patch": "@@ -1,3 +1,14 @@\n+2015-10-17  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/67987\n+\t* decl.c (char_len_param_value): Unwrap unlong line.  If LEN < 0,\n+\tforce it to zero per the Fortran 90, 95, 2003, and 2008 Standards. \n+\t* resolve.c (gfc_resolve_substring_charlen): Unwrap unlong line.\n+\tIf 'start' is larger than 'end', length of substring is negative,\n+\tso explicitly set it to zero.\n+\t(resolve_charlen): Remove -Wsurprising warning.  Update comment to\n+\treflect that the text is from the F2008 standard.\n+\n 2015-10-16  Richard Biener  <rguenther@suse.de>\n \n \t* trans-intrinsic.c (gfc_conv_intrinsic_lib_function): Adjust"}, {"sha": "4871b7c364e10a0301580383c6ce3d2049a437cf", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98a819ea15fdaf6e5d8efb6e002bec70628aaee5/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98a819ea15fdaf6e5d8efb6e002bec70628aaee5/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=98a819ea15fdaf6e5d8efb6e002bec70628aaee5", "patch": "@@ -697,8 +697,7 @@ char_len_param_value (gfc_expr **expr, bool *deferred)\n \n   if (gfc_match_char (':') == MATCH_YES)\n     {\n-      if (!gfc_notify_std (GFC_STD_F2003, \"deferred type \"\n-\t\t\t   \"parameter at %C\"))\n+      if (!gfc_notify_std (GFC_STD_F2003, \"deferred type parameter at %C\"))\n \treturn MATCH_ERROR;\n \n       *deferred = true;\n@@ -708,11 +707,13 @@ char_len_param_value (gfc_expr **expr, bool *deferred)\n \n   m = gfc_match_expr (expr);\n \n-  if (m == MATCH_YES\n-      && !gfc_expr_check_typed (*expr, gfc_current_ns, false))\n+  if (m == MATCH_NO || m == MATCH_ERROR)\n+    return m;\n+\n+  if (!gfc_expr_check_typed (*expr, gfc_current_ns, false))\n     return MATCH_ERROR;\n \n-  if (m == MATCH_YES && (*expr)->expr_type == EXPR_FUNCTION)\n+  if ((*expr)->expr_type == EXPR_FUNCTION)\n     {\n       if ((*expr)->value.function.actual\n \t  && (*expr)->value.function.actual->expr->symtree)\n@@ -731,6 +732,15 @@ char_len_param_value (gfc_expr **expr, bool *deferred)\n \t    }\n \t}\n     }\n+\n+  /* F2008, 4.4.3.1:  The length is a type parameter; its kind is processor\n+     dependent and its value is greater than or equal to zero.\n+     F2008, 4.4.3.2:  If the character length parameter value evaluates to\n+     a negative value, the length of character entities declared is zero.  */\n+  if ((*expr)->expr_type == EXPR_CONSTANT\n+      && mpz_cmp_si ((*expr)->value.integer, 0) < 0)\n+    mpz_set_si ((*expr)->value.integer, 0);\n+\n   return m;\n \n syntax:"}, {"sha": "491507b0cee72f19d5d647a16f234de14ecce761", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98a819ea15fdaf6e5d8efb6e002bec70628aaee5/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98a819ea15fdaf6e5d8efb6e002bec70628aaee5/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=98a819ea15fdaf6e5d8efb6e002bec70628aaee5", "patch": "@@ -4562,8 +4562,7 @@ gfc_resolve_substring_charlen (gfc_expr *e)\n     {\n       if (e->ts.u.cl->length)\n \tgfc_free_expr (e->ts.u.cl->length);\n-      else if (e->expr_type == EXPR_VARIABLE\n-\t\t && e->symtree->n.sym->attr.dummy)\n+      else if (e->expr_type == EXPR_VARIABLE && e->symtree->n.sym->attr.dummy)\n \treturn;\n     }\n \n@@ -4596,12 +4595,19 @@ gfc_resolve_substring_charlen (gfc_expr *e)\n       return;\n     }\n \n-  /* Length = (end - start +1).  */\n+  /* Length = (end - start + 1).  */\n   e->ts.u.cl->length = gfc_subtract (end, start);\n   e->ts.u.cl->length = gfc_add (e->ts.u.cl->length,\n \t\t\t\tgfc_get_int_expr (gfc_default_integer_kind,\n \t\t\t\t\t\t  NULL, 1));\n \n+  /* F2008, 6.4.1:  Both the starting point and the ending point shall\n+     be within the range 1, 2, ..., n unless the starting point exceeds\n+     the ending point, in which case the substring has length zero.  */\n+\n+  if (mpz_cmp_si (e->ts.u.cl->length->value.integer, 0) < 0)\n+    mpz_set_si (e->ts.u.cl->length->value.integer, 0);\n+\n   e->ts.u.cl->length->ts.type = BT_INTEGER;\n   e->ts.u.cl->length->ts.kind = gfc_charlen_int_kind;\n \n@@ -10882,18 +10888,11 @@ resolve_charlen (gfc_charlen *cl)\n \t}\n     }\n \n-  /* \"If the character length parameter value evaluates to a negative\n-     value, the length of character entities declared is zero.\"  */\n+  /* F2008, 4.4.3.2:  If the character length parameter value evaluates to\n+     a negative value, the length of character entities declared is zero.  */\n   if (cl->length && !gfc_extract_int (cl->length, &i) && i < 0)\n-    {\n-      if (warn_surprising)\n-\tgfc_warning_now (OPT_Wsurprising,\n-\t\t\t \"CHARACTER variable at %L has negative length %d,\"\n-\t\t\t \" the length has been set to zero\",\n-\t\t\t &cl->length->where, i);\n-      gfc_replace_expr (cl->length,\n-\t\t\tgfc_get_int_expr (gfc_default_integer_kind, NULL, 0));\n-    }\n+    gfc_replace_expr (cl->length,\n+\t\t      gfc_get_int_expr (gfc_default_integer_kind, NULL, 0));\n \n   /* Check that the character length is not too large.  */\n   k = gfc_validate_kind (BT_INTEGER, gfc_charlen_int_kind, false);"}, {"sha": "b12db829324a0fb26b0c8c5eb10f116b8705f5df", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98a819ea15fdaf6e5d8efb6e002bec70628aaee5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98a819ea15fdaf6e5d8efb6e002bec70628aaee5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=98a819ea15fdaf6e5d8efb6e002bec70628aaee5", "patch": "@@ -1,3 +1,9 @@\n+2015-10-17  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/67987\n+\t* gfortran.df/pr67987.f90: New test.\n+\t* gfortran.dg/char_length_2.f90: Update testcase.\n+\n 2015-10-16  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/iamcu/test_basic_returning.c"}, {"sha": "f35c9b562172bdfed8375ad234ab3c83c67d4e2f", "filename": "gcc/testsuite/gfortran.dg/char_length_2.f90", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98a819ea15fdaf6e5d8efb6e002bec70628aaee5/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_length_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98a819ea15fdaf6e5d8efb6e002bec70628aaee5/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_length_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_length_2.f90?ref=98a819ea15fdaf6e5d8efb6e002bec70628aaee5", "patch": "@@ -1,14 +1,13 @@\n-! { dg-do link }\n-! { dg-options \"-Wsurprising\" }\n-! Tests the fix for PR 31250\n-! CHARACTER lengths weren't reduced early enough for all checks of\n-! them to be meaningful.  Furthermore negative string lengths weren't\n-! dealt with correctly.\n+! { dg-do compile }\n+! Tests the fix for PR 31250.\n+! The fix for PR fortran/67987 supercedes PR 31250, which removes\n+! the -Wsurprising option.\n+!\n CHARACTER(len=0) :: c1   ! This is OK.\n-CHARACTER(len=-1) :: c2  ! { dg-warning \"has negative length\" }\n+CHARACTER(len=-1) :: c2\n PARAMETER(I=-100)\n-CHARACTER(len=I) :: c3   ! { dg-warning \"has negative length\" }\n-CHARACTER(len=min(I,500)) :: c4  ! { dg-warning \"has negative length\" }\n+CHARACTER(len=I) :: c3\n+CHARACTER(len=min(I,500)) :: c4\n CHARACTER(len=max(I,500)) :: d1  ! no warning\n CHARACTER(len=5) :: d2   ! no warning\n "}, {"sha": "1d57f9bda06910bde06e5a1d83e840edbce70b24", "filename": "gcc/testsuite/gfortran.dg/pr67987.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98a819ea15fdaf6e5d8efb6e002bec70628aaee5/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr67987.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98a819ea15fdaf6e5d8efb6e002bec70628aaee5/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr67987.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr67987.f90?ref=98a819ea15fdaf6e5d8efb6e002bec70628aaee5", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+! PR fortran/67987\n+! PR fortran/67988\n+! Original code contributed by Gerhard Steinmetz\n+! gerhard dot steinmetz dot fortran at t-online dot de\n+subroutine p\n+   character(-8) :: c = ' '\n+end subroutine p\n+\n+subroutine pp\n+   character(3), parameter :: c = 'abc'\n+   character(3) :: x(1)\n+   x = c(:-2)\n+   print *, len(trim(x(1)))\n+   x = [ c(:-2) ]\n+   print *, len(trim(x(1)))\n+end subroutine pp\n+"}]}