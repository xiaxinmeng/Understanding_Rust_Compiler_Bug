{"sha": "4f602147b6abbe05f862d3feda8290d4cf5c583f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY2MDIxNDdiNmFiYmUwNWY4NjJkM2ZlZGE4MjkwZDRjZjVjNTgzZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-21T14:27:11Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-21T22:04:22Z"}, "message": "c++: Improve error recovery for =.\n\nIn a template we were happily embedding error_mark_node in a MODOP_EXPR,\nleading to confusion later.\n\ngcc/cp/ChangeLog:\n\n\t* typeck.c (build_x_modify_expr): Handle error_mark_node arguments.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/lambda/lambda-ice30.C: Adjust.\n\t* g++.dg/cpp0x/lambda/lambda-ice31.C: Adjust.\n\t* g++.dg/ext/fixed1.C: Adjust.\n\t* g++.dg/template/crash107.C: Adjust.\n\t* g++.dg/template/error35.C: Adjust.\n\t* g++.dg/template/sizeof-template-argument.C: Adjust.", "tree": {"sha": "eb820e6bff79f48df348fde354259b51082c9aed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb820e6bff79f48df348fde354259b51082c9aed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f602147b6abbe05f862d3feda8290d4cf5c583f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f602147b6abbe05f862d3feda8290d4cf5c583f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f602147b6abbe05f862d3feda8290d4cf5c583f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f602147b6abbe05f862d3feda8290d4cf5c583f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7272c8a038847cf67e888828e58fc0e00d1f5d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7272c8a038847cf67e888828e58fc0e00d1f5d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7272c8a038847cf67e888828e58fc0e00d1f5d5"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "f01ae6562546470cbd872c5325c375dcc2365f97", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f602147b6abbe05f862d3feda8290d4cf5c583f/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f602147b6abbe05f862d3feda8290d4cf5c583f/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=4f602147b6abbe05f862d3feda8290d4cf5c583f", "patch": "@@ -8768,6 +8768,9 @@ build_x_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n   tree overload = NULL_TREE;\n   tree op = build_nt (modifycode, NULL_TREE, NULL_TREE);\n \n+  if (lhs == error_mark_node || rhs == error_mark_node)\n+    return cp_expr (error_mark_node, loc);\n+\n   if (processing_template_decl)\n     {\n       if (modifycode == NOP_EXPR"}, {"sha": "7b0a155a31a723513cf997c33d34695f98179dea", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-ice30.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f602147b6abbe05f862d3feda8290d4cf5c583f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f602147b6abbe05f862d3feda8290d4cf5c583f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice30.C?ref=4f602147b6abbe05f862d3feda8290d4cf5c583f", "patch": "@@ -3,11 +3,11 @@\n \n template<int> void foo()\n {\n-  int x[=];  // { dg-error \"expected\" }\n+  int x[=];  // { dg-error \"\" }\n   [&x]{};\n }\n \n void bar()\n {\n-  foo<0>();\n+  foo<0>();\t\t\t// { dg-prune-output \"not declared\" }\n }"}, {"sha": "f0ecf8cc26f9f16cb40590a5f5a98933b47765a6", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-ice31.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f602147b6abbe05f862d3feda8290d4cf5c583f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice31.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f602147b6abbe05f862d3feda8290d4cf5c583f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice31.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice31.C?ref=4f602147b6abbe05f862d3feda8290d4cf5c583f", "patch": "@@ -4,5 +4,5 @@\n template<typename T> void foo()\n {\n   T x[=];  // { dg-error \"expected\" }\n-  [&x]{};\n+  [&x]{};  // { dg-prune-output \"not declared\" }\n }"}, {"sha": "92e3184ea5917ebdcb93358b47b4ccbd5e73dce0", "filename": "gcc/testsuite/g++.dg/ext/fixed1.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f602147b6abbe05f862d3feda8290d4cf5c583f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ffixed1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f602147b6abbe05f862d3feda8290d4cf5c583f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ffixed1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ffixed1.C?ref=4f602147b6abbe05f862d3feda8290d4cf5c583f", "patch": "@@ -6,3 +6,5 @@ template<int> struct A {};\n template<typename> struct B : A<sizeof(0=0r)> {};\t// { dg-error \"not supported\" }\n \n template<typename> struct C : A<sizeof(0=0r)> {};\t// { dg-error \"not supported\" }\n+\n+// { dg-prune-output \"template argument\" }"}, {"sha": "aab882d8446e1330eb4a41340773c970fc15b6a2", "filename": "gcc/testsuite/g++.dg/template/crash107.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f602147b6abbe05f862d3feda8290d4cf5c583f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash107.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f602147b6abbe05f862d3feda8290d4cf5c583f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash107.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash107.C?ref=4f602147b6abbe05f862d3feda8290d4cf5c583f", "patch": "@@ -10,9 +10,9 @@ template<typename FP_> struct Vec { // { dg-message \"note\" \"\" { target c++17_dow\n         X = y*rhs.z() - z*rhs.y(); // { dg-error \"not declared|no member\" }\n     }\n     Vec& operator^(Vec& rhs) {\n-        return Vec(*this)^=rhs; // { dg-message \"required\" }\n+        return Vec(*this)^=rhs;\n     }\n };\n Vec<double> v(3,4,12); // { dg-error \"no matching|too many initializers\" }\n Vec<double> V(12,4,3);  // { dg-error \"no matching|too many initializers\" }\n-Vec<double> c = v^V;   // { dg-message \"required\" }\n+Vec<double> c = v^V;"}, {"sha": "0ba8635507be6d9d7a770d90dc889f502697752d", "filename": "gcc/testsuite/g++.dg/template/error35.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f602147b6abbe05f862d3feda8290d4cf5c583f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror35.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f602147b6abbe05f862d3feda8290d4cf5c583f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror35.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror35.C?ref=4f602147b6abbe05f862d3feda8290d4cf5c583f", "patch": "@@ -1,3 +1,3 @@\n // PR c++/33494\n \n-template<int> void foo(int(*f=0)()); // { dg-error \"declared void|scope|erroneous-expression\" }\n+template<int> void foo(int(*f=0)()); // { dg-error \"declared void|scope|cannot be used as a function\" }"}, {"sha": "b5e12d699ae1ad6ce8d07cb9e2e4b019e9a01965", "filename": "gcc/testsuite/g++.dg/template/sizeof-template-argument.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f602147b6abbe05f862d3feda8290d4cf5c583f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsizeof-template-argument.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f602147b6abbe05f862d3feda8290d4cf5c583f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsizeof-template-argument.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsizeof-template-argument.C?ref=4f602147b6abbe05f862d3feda8290d4cf5c583f", "patch": "@@ -3,9 +3,9 @@\n \n template<int> struct A {};\n \n-template<typename> struct B : A <sizeof(=)> {}; /* { dg-error \"expected primary-expression\" } */\n+template<typename> struct B : A <sizeof(=)> {}; /* { dg-error \"\" } */\n \n-template<typename> struct C : A <sizeof(=)> {}; /* { dg-error \"expected primary-expression\" } */\n+template<typename> struct C : A <sizeof(=)> {}; /* { dg-error \"\" } */\n \n int a;\n "}]}