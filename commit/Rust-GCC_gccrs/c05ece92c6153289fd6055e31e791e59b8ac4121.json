{"sha": "c05ece92c6153289fd6055e31e791e59b8ac4121", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA1ZWNlOTJjNjE1MzI4OWZkNjA1NWUzMWU3OTFlNTliOGFjNDEyMQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2020-12-03T01:10:32Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2020-12-03T01:10:32Z"}, "message": "introduce overridable clear_cache emitter\n\nThis patch introduces maybe_emit_call_builtin___clear_cache for the\nbuiltin expander machinery and the trampoline initializers to use to\nclear the instruction cache, removing a source of inconsistencies and\nsubtle errors in low-level machinery.\n\nI've adjusted all trampoline_init implementations that used to issue\nexplicit calls to __clear_cache or similar to use this new primitive.\n\n\nSpecifically on vxworks targets, we needed to drop the __clear_cache\nsymbol in libgcc, for reasons related with linking that I didn't need\nto understand, and we wanted to call cacheTextUpdate directly, despite\nthe different calling conventions: the second argument is a length\nrather than the end address.\n\nSo I introduced a target hook to enable target OS-level overriding of\nbuiltin __clear_cache call emission, retaining nearly (*) the same\nlogic to govern the decision on whether to emit a call (or nothing, or\na machine-dependent insn) but enabling a call to a target\nsystem-defined function with different calling conventions to be\nissued, without having to modify .md files of the various\narchitectures supported by the target system to introduce or modify\nclear_cache insns.\n\n(*) I write \"nearly\" mainly because, when not optimizing, we'd issue a\ncall regardless, but since the call may now be overridden, I added it\nto the set of builtins that are not directly turned into calls when\nnot optimizing, following the normal expansion path instead.  It\nwouldn't be hard to skip the emission of cache-clearing insns when not\noptimizing, but it didn't seem very important, especially for the new\nuses from trampoline init.\n\n    Another difference that might be relevant is that now we expand\nthe begin and end arguments unconditionally.  This might make a\ndifference if they have side effects.  That's prettty much impossible\nat expand time, but I thought I'd mention it.\n\n\nI have NOT modified targets that did not issue cache-clearing calls in\ntrampoline init to use the new clear_cache-calling infrastructure even\nif it would expand to nothing.  I have considered doing so, to have\n__builtin___clear_cache and trampoline init call cacheTextUpdate on\nall vxworks targets, but decided not to, since on targets that don't\ndo any cache clearing, cacheTextUpdate ought to be a no-op, even\nthough rs6000 seems to use icbi and dcbf instructions in the function\ncalled to initialize a trampoline, but AFAICT not in the __clear_cache\nbuiltin.  Hopefully target maintainers will have a look and take\nadvantage of this new piece of infrastructure to remove such\n(apparent?) inconsistencies.  Not rs6000 and other that call asm-coded\ntrampoline setup instructions, for sure, but they might wish to\nintroduce a CLEAR_INSN_CACHE macro or a clear_cache expander if they\ndon't have one.\n\n\nfor  gcc/ChangeLog\n\n\t* builtins.c (default_emit_call_builtin___clear_cache): New.\n\t(maybe_emit_call_builtin___clear_cache): New.\n\t(expand_builtin___clear_cache): Split into the above.\n\t(expand_builtin): Do not issue clear_cache call any more.\n\t* builtins.h (maybe_emit_call_builtin___clear_cache): Declare.\n\t* config/aarch64/aarch64.c (aarch64_trampoline_init): Use\n\tmaybe_emit_call_builtin___clear_cache.\n\t* config/arc/arc.c (arc_trampoline_init): Likewise.\n\t* config/arm/arm.c (arm_trampoline_init): Likewise.\n\t* config/c6x/c6x.c (c6x_initialize_trampoline): Likewise.\n\t* config/csky/csky.c (csky_trampoline_init): Likewise.\n\t* config/m68k/linux.h (FInALIZE_TRAMPOLINE): Likewise.\n\t* config/tilegx/tilegx.c (tilegx_trampoline_init): Likewise.\n\t* config/tilepro/tilepro.c (tilepro_trampoline_init): Ditto.\n\t* config/vxworks.c: Include rtl.h, memmodel.h, and optabs.h.\n\t(vxworks_emit_call_builtin___clear_cache): New.\n\t* config/vxworks.h (CLEAR_INSN_CACHE): Drop.\n\t(TARGET_EMIT_CALL_BUILTIN___CLEAR_CACHE): Define.\n\t* target.def (trampoline_init): In the documentation, refer to\n\tmaybe_emit_call_builtin___clear_cache.\n\t(emit_call_builtin___clear_cache): New.\n\t* doc/tm.texi.in: Add new hook point.\n\t(CLEAR_CACHE_INSN): Remove duplicate 'both'.\n\t* doc/tm.texi: Rebuilt.\n\t* targhooks.h (default_meit_call_builtin___clear_cache):\n\tDeclare.\n\t* tree.h (BUILTIN_ASM_NAME_PTR): New.\n\nfor  libgcc/ChangeLog\n\n\t* config/t-vxworks (LIB2ADD): Drop.\n\t* config/t-vxworks7 (LIB2ADD): Likewise.\n\t* config/vxcache.c: Remove.", "tree": {"sha": "d8447e11d060d4674ffc88230224b747084f654f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8447e11d060d4674ffc88230224b747084f654f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c05ece92c6153289fd6055e31e791e59b8ac4121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c05ece92c6153289fd6055e31e791e59b8ac4121", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c05ece92c6153289fd6055e31e791e59b8ac4121", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c05ece92c6153289fd6055e31e791e59b8ac4121/comments", "author": null, "committer": null, "parents": [{"sha": "93d883c7734d92c021c624d82885d3a46532cf0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93d883c7734d92c021c624d82885d3a46532cf0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93d883c7734d92c021c624d82885d3a46532cf0b"}], "stats": {"total": 262, "additions": 159, "deletions": 103}, "files": [{"sha": "ecc12e69c14661d9ac3a74c2c9b48615d829cda4", "filename": "gcc/builtins.c", "status": "modified", "additions": 58, "deletions": 31, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=c05ece92c6153289fd6055e31e791e59b8ac4121", "patch": "@@ -7770,26 +7770,63 @@ expand_builtin_copysign (tree exp, rtx target, rtx subtarget)\n   return expand_copysign (op0, op1, target);\n }\n \n-/* Expand a call to __builtin___clear_cache.  */\n+/* Emit a call to __builtin___clear_cache.  */\n \n-static rtx\n-expand_builtin___clear_cache (tree exp)\n+void\n+default_emit_call_builtin___clear_cache (rtx begin, rtx end)\n {\n-  if (!targetm.code_for_clear_cache)\n+  rtx callee = gen_rtx_SYMBOL_REF (Pmode,\n+\t\t\t\t   BUILTIN_ASM_NAME_PTR\n+\t\t\t\t   (BUILT_IN_CLEAR_CACHE));\n+\n+  emit_library_call (callee,\n+\t\t     LCT_NORMAL, VOIDmode,\n+\t\t     begin, ptr_mode,\n+\t\t     end, ptr_mode);\n+}\n+\n+/* Emit a call to __builtin___clear_cache, unless the target specifies\n+   it as do-nothing.  This function can be used by trampoline\n+   finalizers to duplicate the effects of expanding a call to the\n+   clear_cache builtin.  */\n+\n+void\n+maybe_emit_call_builtin___clear_cache (rtx begin, rtx end)\n+{\n+  if (GET_MODE (begin) != ptr_mode || GET_MODE (end) != ptr_mode)\n     {\n-#ifdef CLEAR_INSN_CACHE\n-      /* There is no \"clear_cache\" insn, and __clear_cache() in libgcc\n-\t does something.  Just do the default expansion to a call to\n-\t __clear_cache().  */\n-      return NULL_RTX;\n-#else\n+      error (\"both arguments to %<__builtin___clear_cache%> must be pointers\");\n+      return;\n+    }\n+\n+  if (targetm.have_clear_cache ())\n+    {\n+      /* We have a \"clear_cache\" insn, and it will handle everything.  */\n+      class expand_operand ops[2];\n+\n+      create_address_operand (&ops[0], begin);\n+      create_address_operand (&ops[1], end);\n+\n+      if (maybe_expand_insn (targetm.code_for_clear_cache, 2, ops))\n+\treturn;\n+    }\n+  else\n+    {\n+#ifndef CLEAR_INSN_CACHE\n       /* There is no \"clear_cache\" insn, and __clear_cache() in libgcc\n \t does nothing.  There is no need to call it.  Do nothing.  */\n-      return const0_rtx;\n+      return;\n #endif /* CLEAR_INSN_CACHE */\n     }\n \n-  /* We have a \"clear_cache\" insn, and it will handle everything.  */\n+  targetm.calls.emit_call_builtin___clear_cache (begin, end);\n+}\n+\n+/* Expand a call to __builtin___clear_cache.  */\n+\n+static void\n+expand_builtin___clear_cache (tree exp)\n+{\n   tree begin, end;\n   rtx begin_rtx, end_rtx;\n \n@@ -7799,25 +7836,16 @@ expand_builtin___clear_cache (tree exp)\n   if (!validate_arglist (exp, POINTER_TYPE, POINTER_TYPE, VOID_TYPE))\n     {\n       error (\"both arguments to %<__builtin___clear_cache%> must be pointers\");\n-      return const0_rtx;\n+      return;\n     }\n \n-  if (targetm.have_clear_cache ())\n-    {\n-      class expand_operand ops[2];\n+  begin = CALL_EXPR_ARG (exp, 0);\n+  begin_rtx = expand_expr (begin, NULL_RTX, Pmode, EXPAND_NORMAL);\n \n-      begin = CALL_EXPR_ARG (exp, 0);\n-      begin_rtx = expand_expr (begin, NULL_RTX, Pmode, EXPAND_NORMAL);\n+  end = CALL_EXPR_ARG (exp, 1);\n+  end_rtx = expand_expr (end, NULL_RTX, Pmode, EXPAND_NORMAL);\n \n-      end = CALL_EXPR_ARG (exp, 1);\n-      end_rtx = expand_expr (end, NULL_RTX, Pmode, EXPAND_NORMAL);\n-\n-      create_address_operand (&ops[0], begin_rtx);\n-      create_address_operand (&ops[1], end_rtx);\n-      if (maybe_expand_insn (targetm.code_for_clear_cache, 2, ops))\n-\treturn const0_rtx;\n-    }\n-  return const0_rtx;\n+  maybe_emit_call_builtin___clear_cache (begin_rtx, end_rtx);\n }\n \n /* Given a trampoline address, make sure it satisfies TRAMPOLINE_ALIGNMENT.  */\n@@ -9507,6 +9535,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, machine_mode mode,\n       && fcode != BUILT_IN_EXECLE\n       && fcode != BUILT_IN_EXECVP\n       && fcode != BUILT_IN_EXECVE\n+      && fcode != BUILT_IN_CLEAR_CACHE\n       && !ALLOCA_FUNCTION_CODE_P (fcode)\n       && fcode != BUILT_IN_FREE)\n     return expand_call (exp, target, ignore);\n@@ -9696,10 +9725,8 @@ expand_builtin (tree exp, rtx target, rtx subtarget, machine_mode mode,\n       return expand_builtin_next_arg ();\n \n     case BUILT_IN_CLEAR_CACHE:\n-      target = expand_builtin___clear_cache (exp);\n-      if (target)\n-        return target;\n-      break;\n+      expand_builtin___clear_cache (exp);\n+      return const0_rtx;\n \n     case BUILT_IN_CLASSIFY_TYPE:\n       return expand_builtin_classify_type (exp);"}, {"sha": "09379e85d453bc4019acab929157c7b491049845", "filename": "gcc/builtins.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Fbuiltins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Fbuiltins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.h?ref=c05ece92c6153289fd6055e31e791e59b8ac4121", "patch": "@@ -128,6 +128,7 @@ extern tree fold_call_expr (location_t, tree, bool);\n extern tree fold_builtin_call_array (location_t, tree, tree, int, tree *);\n extern bool validate_gimple_arglist (const gcall *, ...);\n extern rtx default_expand_builtin (tree, rtx, rtx, machine_mode, int);\n+extern void maybe_emit_call_builtin___clear_cache (rtx, rtx);\n extern bool fold_builtin_next_arg (tree, bool);\n extern tree do_mpc_arg2 (tree, tree, tree, int, int (*)(mpc_ptr, mpc_srcptr, mpc_srcptr, mpc_rnd_t));\n extern tree fold_call_stmt (gcall *, bool);"}, {"sha": "67ffba02d3e650516d57280566de19ec51a02cdd", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=c05ece92c6153289fd6055e31e791e59b8ac4121", "patch": "@@ -11037,10 +11037,10 @@ aarch64_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n   /* XXX We should really define a \"clear_cache\" pattern and use\n      gen_clear_cache().  */\n   a_tramp = XEXP (m_tramp, 0);\n-  emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__clear_cache\"),\n-\t\t     LCT_NORMAL, VOIDmode, a_tramp, ptr_mode,\n-\t\t     plus_constant (ptr_mode, a_tramp, TRAMPOLINE_SIZE),\n-\t\t     ptr_mode);\n+  maybe_emit_call_builtin___clear_cache (a_tramp,\n+\t\t\t\t\t plus_constant (ptr_mode,\n+\t\t\t\t\t\t\ta_tramp,\n+\t\t\t\t\t\t\tTRAMPOLINE_SIZE));\n }\n \n static unsigned char"}, {"sha": "eabc122d5f121f5dc38050c26965b405b1f04653", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=c05ece92c6153289fd6055e31e791e59b8ac4121", "patch": "@@ -4418,10 +4418,10 @@ arc_initialize_trampoline (rtx tramp, tree fndecl, rtx cxt)\n \t\t   GEN_INT (TRAMPOLINE_SIZE), BLOCK_OP_NORMAL);\n   emit_move_insn (adjust_address (tramp, SImode, 8), fnaddr);\n   emit_move_insn (adjust_address (tramp, SImode, 12), cxt);\n-  emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__clear_cache\"),\n-\t\t     LCT_NORMAL, VOIDmode, XEXP (tramp, 0), Pmode,\n-\t\t     plus_constant (Pmode, XEXP (tramp, 0), TRAMPOLINE_SIZE),\n-\t\t     Pmode);\n+  maybe_emit_call_builtin___clear_cache (XEXP (tramp, 0),\n+\t\t\t\t\t plus_constant (Pmode,\n+\t\t\t\t\t\t\tXEXP (tramp, 0),\n+\t\t\t\t\t\t\tTRAMPOLINE_SIZE));\n }\n \n /* Add the given function declaration to emit code in JLI section.  */"}, {"sha": "2f0ef3b0d3c7c88f8312a6a06910135cb905fd3e", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c05ece92c6153289fd6055e31e791e59b8ac4121", "patch": "@@ -4170,9 +4170,10 @@ arm_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n     }\n \n   a_tramp = XEXP (m_tramp, 0);\n-  emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__clear_cache\"),\n-\t\t     LCT_NORMAL, VOIDmode, a_tramp, Pmode,\n-\t\t     plus_constant (Pmode, a_tramp, TRAMPOLINE_SIZE), Pmode);\n+  maybe_emit_call_builtin___clear_cache (a_tramp,\n+\t\t\t\t\t plus_constant (ptr_mode,\n+\t\t\t\t\t\t\ta_tramp,\n+\t\t\t\t\t\t\tTRAMPOLINE_SIZE));\n }\n \n /* Thumb trampolines should be entered in thumb mode, so set"}, {"sha": "78b2bff1fd9322e842b87b000309c69dbdc49216", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=c05ece92c6153289fd6055e31e791e59b8ac4121", "patch": "@@ -725,9 +725,10 @@ c6x_initialize_trampoline (rtx tramp, tree fndecl, rtx cxt)\n     }\n #ifdef CLEAR_INSN_CACHE\n   tramp = XEXP (tramp, 0);\n-  emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__gnu_clear_cache\"),\n-\t\t     LCT_NORMAL, VOIDmode, tramp, Pmode,\n-\t\t     plus_constant (Pmode, tramp, TRAMPOLINE_SIZE), Pmode);\n+  maybe_emit_call_builtin___clear_cache (tramp,\n+\t\t\t\t\t plus_constant (Pmode,\n+\t\t\t\t\t\t\ttramp,\n+\t\t\t\t\t\t\tTRAMPOLINE_SIZE));\n #endif\n }\n \f"}, {"sha": "3b03f3f19694b29b369689be60b054942fca43b8", "filename": "gcc/config/csky/csky.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Fconfig%2Fcsky%2Fcsky.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Fconfig%2Fcsky%2Fcsky.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky.c?ref=c05ece92c6153289fd6055e31e791e59b8ac4121", "patch": "@@ -5917,9 +5917,10 @@ csky_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n   emit_move_insn (mem, fnaddr);\n \n   a_tramp = XEXP (m_tramp, 0);\n-  emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__clear_cache\"),\n-\t\t     LCT_NORMAL, VOIDmode, a_tramp, Pmode,\n-\t\t     plus_constant (Pmode, a_tramp, TRAMPOLINE_SIZE), Pmode);\n+  maybe_emit_call_builtin___clear_cache (a_tramp,\n+\t\t\t\t\t plus_constant (Pmode,\n+\t\t\t\t\t\t\ta_tramp,\n+\t\t\t\t\t\t\tTRAMPOLINE_SIZE));\n }\n \n "}, {"sha": "a01647c62107ea55ba2b911af97321cca52cdd58", "filename": "gcc/config/m68k/linux.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Fconfig%2Fm68k%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Fconfig%2Fm68k%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux.h?ref=c05ece92c6153289fd6055e31e791e59b8ac4121", "patch": "@@ -194,10 +194,10 @@ along with GCC; see the file COPYING3.  If not see\n \n #undef FINALIZE_TRAMPOLINE\n #define FINALIZE_TRAMPOLINE(TRAMP)\t\t\t\t\t\\\n-  emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__clear_cache\"),\t\\\n-\t\t     LCT_NORMAL, VOIDmode, TRAMP, Pmode,\t\t\\\n-\t\t     plus_constant (Pmode, TRAMP, TRAMPOLINE_SIZE), \t\\\n-\t\t     Pmode);\n+  maybe_emit_call_builtin___clear_cache ((TRAMP),\t\t\t\\\n+\t\t\t\t\t plus_constant (Pmode,\t\t\\\n+\t\t\t\t\t\t\t(TRAMP),\t\\\n+\t\t\t\t\t\t\tTRAMPOLINE_SIZE))\n \n /* Clear the instruction cache from `beg' to `end'.  This makes an\n    inline system call to SYS_cacheflush.  The arguments are as"}, {"sha": "142e3427c2c4cc91844915738d192e44388d9dca", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=c05ece92c6153289fd6055e31e791e59b8ac4121", "patch": "@@ -5049,9 +5049,7 @@ tilegx_trampoline_init (rtx m_tramp, tree fndecl, rtx static_chain)\n   end_addr = force_reg (Pmode, plus_constant (Pmode, XEXP (m_tramp, 0),\n \t\t\t\t\t      TRAMPOLINE_SIZE));\n \n-  emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__clear_cache\"),\n-\t\t     LCT_NORMAL, VOIDmode, begin_addr, Pmode,\n-\t\t     end_addr, Pmode);\n+  maybe_emit_call_builtin___clear_cache (begin_addr, end_addr);\n }\n \n "}, {"sha": "3990194cadef9fe10a2d44f38e3d51f5d5893da7", "filename": "gcc/config/tilepro/tilepro.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.c?ref=c05ece92c6153289fd6055e31e791e59b8ac4121", "patch": "@@ -4458,9 +4458,7 @@ tilepro_trampoline_init (rtx m_tramp, tree fndecl, rtx static_chain)\n   end_addr = force_reg (Pmode, plus_constant (Pmode, XEXP (m_tramp, 0),\n \t\t\t\t\t      TRAMPOLINE_SIZE));\n \n-  emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__clear_cache\"),\n-\t\t     LCT_NORMAL, VOIDmode, begin_addr, Pmode,\n-\t\t     end_addr, Pmode);\n+  maybe_emit_call_builtin___clear_cache (begin_addr, end_addr);\n }\n \n "}, {"sha": "b67d21d07c635173561c0738a12420d84b7cfab2", "filename": "gcc/config/vxworks.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Fconfig%2Fvxworks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Fconfig%2Fvxworks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks.c?ref=c05ece92c6153289fd6055e31e791e59b8ac4121", "patch": "@@ -27,6 +27,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic-core.h\"\n #include \"output.h\"\n #include \"fold-const.h\"\n+#include \"rtl.h\"\n+#include \"memmodel.h\"\n+#include \"optabs.h\"\n \n #if !HAVE_INITFINI_ARRAY_SUPPORT\n /* Like default_named_section_asm_out_constructor, except that even\n@@ -169,4 +172,25 @@ vxworks_override_options (void)\n \n   if (!global_options_set.x_dwarf_version)\n     dwarf_version = VXWORKS_DWARF_VERSION_DEFAULT;\n+\n+}\n+\n+/* We don't want to use library symbol __clear_cache on SR0640.  Avoid\n+   it and issue a direct call to cacheTextUpdate.  It takes a size_t\n+   length rather than the END address, so we have to compute it.  */\n+\n+void\n+vxworks_emit_call_builtin___clear_cache (rtx begin, rtx end)\n+{\n+  /* STATUS cacheTextUpdate (void *, size_t); */\n+  rtx callee = gen_rtx_SYMBOL_REF (Pmode, \"cacheTextUpdate\");\n+\n+  enum machine_mode size_mode = TYPE_MODE (sizetype);\n+\n+  rtx len = simplify_gen_binary (MINUS, size_mode, end, begin);\n+\n+  emit_library_call (callee,\n+\t\t     LCT_NORMAL, VOIDmode,\n+\t\t     begin, ptr_mode,\n+\t\t     len, size_mode);\n }"}, {"sha": "cd4313982fa381ef4721ab60e0d3fa3561310b4b", "filename": "gcc/config/vxworks.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Fconfig%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Fconfig%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks.h?ref=c05ece92c6153289fd6055e31e791e59b8ac4121", "patch": "@@ -282,10 +282,13 @@ extern void vxworks_asm_out_destructor (rtx symbol, int priority);\n /* The diab linker does not handle .gnu_attribute sections.  */\n #undef HAVE_AS_GNU_ATTRIBUTE\n \n-/* We provide our own version of __clear_cache in libgcc, using a separate C\n-   file to facilitate #inclusion of VxWorks header files.  */\n-#undef CLEAR_INSN_CACHE\n-#define CLEAR_INSN_CACHE 1\n+/* We call vxworks's cacheTextUpdate instead of CLEAR_INSN_CACHE if\n+   needed.  We don't want to force a call on targets that don't define\n+   cache-clearing insns nor CLEAR_INSN_CACHE.  */\n+#undef TARGET_EMIT_CALL_BUILTIN___CLEAR_CACHE\n+#define TARGET_EMIT_CALL_BUILTIN___CLEAR_CACHE \\\n+  vxworks_emit_call_builtin___clear_cache\n+extern void vxworks_emit_call_builtin___clear_cache (rtx begin, rtx end);\n \n /* Default dwarf control values, for non-gdb debuggers that come with\n    VxWorks.  */"}, {"sha": "f5077655716fa870c96702b711abc71be3d7fdc7", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=c05ece92c6153289fd6055e31e791e59b8ac4121", "patch": "@@ -5457,11 +5457,24 @@ Note that the block move need only cover the constant parts of the\n trampoline.  If the target isolates the variable parts of the trampoline\n to the end, not all @code{TRAMPOLINE_SIZE} bytes need be copied.\n \n-If the target requires any other actions, such as flushing caches or\n+If the target requires any other actions, such as flushing caches\n+(possibly calling function maybe_emit_call_builtin___clear_cache) or\n enabling stack execution, these actions should be performed after\n initializing the trampoline proper.\n @end deftypefn\n \n+@deftypefn {Target Hook} void TARGET_EMIT_CALL_BUILTIN___CLEAR_CACHE (rtx @var{begin}, rtx @var{end})\n+On targets that do not define a @code{clear_cache} insn expander,\n+but that define the @code{CLEAR_CACHE_INSN} macro,\n+maybe_emit_call_builtin___clear_cache relies on this target hook\n+to clear an address range in the instruction cache.\n+\n+The default implementation calls the @code{__clear_cache} builtin,\n+taking the assembler name from the builtin declaration.  Overriding\n+definitions may call alternate functions, with alternate calling\n+conventions, or emit alternate RTX to perform the job.\n+@end deftypefn\n+\n @deftypefn {Target Hook} rtx TARGET_TRAMPOLINE_ADJUST_ADDRESS (rtx @var{addr})\n This hook should perform any machine-specific adjustment in\n the address of the trampoline.  Its argument contains the address of the\n@@ -5490,7 +5503,7 @@ the following macro.\n If defined, expands to a C expression clearing the @emph{instruction\n cache} in the specified interval.  The definition of this macro would\n typically be a series of @code{asm} statements.  Both @var{beg} and\n-@var{end} are both pointer expressions.\n+@var{end} are pointer expressions.\n @end defmac\n \n To use a standard subroutine, define the following macro.  In addition,"}, {"sha": "ad568581fd42f1e27edcc9b0f4d1199fb8787a68", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=c05ece92c6153289fd6055e31e791e59b8ac4121", "patch": "@@ -3877,6 +3877,8 @@ is used for aligning trampolines.\n \n @hook TARGET_TRAMPOLINE_INIT\n \n+@hook TARGET_EMIT_CALL_BUILTIN___CLEAR_CACHE\n+\n @hook TARGET_TRAMPOLINE_ADJUST_ADDRESS\n \n Implementing trampolines is difficult on many machines because they have\n@@ -3897,7 +3899,7 @@ the following macro.\n If defined, expands to a C expression clearing the @emph{instruction\n cache} in the specified interval.  The definition of this macro would\n typically be a series of @code{asm} statements.  Both @var{beg} and\n-@var{end} are both pointer expressions.\n+@var{end} are pointer expressions.\n @end defmac\n \n To use a standard subroutine, define the following macro.  In addition,"}, {"sha": "a0ea853b75f3b7c8ca478f3a7b1b4720bc0c57f2", "filename": "gcc/target.def", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=c05ece92c6153289fd6055e31e791e59b8ac4121", "patch": "@@ -5166,12 +5166,28 @@ Note that the block move need only cover the constant parts of the\\n\\\n trampoline.  If the target isolates the variable parts of the trampoline\\n\\\n to the end, not all @code{TRAMPOLINE_SIZE} bytes need be copied.\\n\\\n \\n\\\n-If the target requires any other actions, such as flushing caches or\\n\\\n+If the target requires any other actions, such as flushing caches\\n\\\n+(possibly calling function maybe_emit_call_builtin___clear_cache) or\\n\\\n enabling stack execution, these actions should be performed after\\n\\\n initializing the trampoline proper.\",\n  void, (rtx m_tramp, tree fndecl, rtx static_chain),\n  default_trampoline_init)\n \n+/* Emit a call to a function to clear the instruction cache.  */\n+DEFHOOK\n+(emit_call_builtin___clear_cache,\n+ \"On targets that do not define a @code{clear_cache} insn expander,\\n\\\n+but that define the @code{CLEAR_CACHE_INSN} macro,\\n\\\n+maybe_emit_call_builtin___clear_cache relies on this target hook\\n\\\n+to clear an address range in the instruction cache.\\n\\\n+\\n\\\n+The default implementation calls the @code{__clear_cache} builtin,\\n\\\n+taking the assembler name from the builtin declaration.  Overriding\\n\\\n+definitions may call alternate functions, with alternate calling\\n\\\n+conventions, or emit alternate RTX to perform the job.\",\n+ void, (rtx begin, rtx end),\n+ default_emit_call_builtin___clear_cache)\n+\n /* Adjust the address of the trampoline in a target-specific way.  */\n DEFHOOK\n (trampoline_adjust_address,"}, {"sha": "4542ba1b22d6e036dc84fbabc8f111279ef54110", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=c05ece92c6153289fd6055e31e791e59b8ac4121", "patch": "@@ -166,6 +166,7 @@ extern bool default_function_value_regno_p (const unsigned int);\n extern rtx default_internal_arg_pointer (void);\n extern rtx default_static_chain (const_tree, bool);\n extern void default_trampoline_init (rtx, tree, rtx);\n+extern void default_emit_call_builtin___clear_cache (rtx, rtx);\n extern poly_int64 default_return_pops_args (tree, tree, poly_int64);\n extern reg_class_t default_ira_change_pseudo_allocno_class (int, reg_class_t,\n \t\t\t\t\t\t\t    reg_class_t);"}, {"sha": "7faa49d42ba3346cdb08b29643484bb91c74bbc4", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ece92c6153289fd6055e31e791e59b8ac4121/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=c05ece92c6153289fd6055e31e791e59b8ac4121", "patch": "@@ -5600,6 +5600,13 @@ is_lang_specific (const_tree t)\n #define BUILTIN_VALID_P(FNCODE) \\\n   (IN_RANGE ((int)FNCODE, ((int)BUILT_IN_NONE) + 1, ((int) END_BUILTINS) - 1))\n \n+/* Obtain a pointer to the identifier string holding the asm name for\n+   BUILTIN, a BUILT_IN code.  This is handy if the target\n+   mangles/overrides the function name that implements the\n+   builtin.  */\n+#define BUILTIN_ASM_NAME_PTR(BUILTIN) \\\n+  (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (builtin_decl_explicit (BUILTIN))))\n+\n /* Return the tree node for an explicit standard builtin function or NULL.  */\n static inline tree\n builtin_decl_explicit (enum built_in_function fncode)"}, {"sha": "b4bb85bff08be279c78d8bb7d3ceae5e4d1d52c3", "filename": "libgcc/config/t-vxworks", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ece92c6153289fd6055e31e791e59b8ac4121/libgcc%2Fconfig%2Ft-vxworks", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ece92c6153289fd6055e31e791e59b8ac4121/libgcc%2Fconfig%2Ft-vxworks", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-vxworks?ref=c05ece92c6153289fd6055e31e791e59b8ac4121", "patch": "@@ -4,7 +4,6 @@ LIBGCC2_DEBUG_CFLAGS =\n # We provide our own implementation for __clear_cache, using a\n # VxWorks specific entry point.\n LIB2FUNCS_EXCLUDE += _clear_cache\n-LIB2ADD += $(srcdir)/config/vxcache.c\n \n # This ensures that the correct target headers are used; some VxWorks\n # system headers have names that collide with GCC's internal (host)"}, {"sha": "6ddd3e84f330982d0b28f7b22605ad7ab209ce1f", "filename": "libgcc/config/t-vxworks7", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ece92c6153289fd6055e31e791e59b8ac4121/libgcc%2Fconfig%2Ft-vxworks7", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ece92c6153289fd6055e31e791e59b8ac4121/libgcc%2Fconfig%2Ft-vxworks7", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-vxworks7?ref=c05ece92c6153289fd6055e31e791e59b8ac4121", "patch": "@@ -4,7 +4,6 @@ LIBGCC2_DEBUG_CFLAGS =\n # We provide our own implementation for __clear_cache, using a\n # VxWorks specific entry point.\n LIB2FUNCS_EXCLUDE += _clear_cache\n-LIB2ADD += $(srcdir)/config/vxcache.c\n \n # This ensures that the correct target headers are used; some VxWorks\n # system headers have names that collide with GCC's internal (host)"}, {"sha": "e25e0cce0a4c2053bd2c3ff7c91107c7fa73ef31", "filename": "libgcc/config/vxcache.c", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d883c7734d92c021c624d82885d3a46532cf0b/libgcc%2Fconfig%2Fvxcache.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d883c7734d92c021c624d82885d3a46532cf0b/libgcc%2Fconfig%2Fvxcache.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fvxcache.c?ref=93d883c7734d92c021c624d82885d3a46532cf0b", "patch": "@@ -1,35 +0,0 @@\n-/* Copyright (C) 2018-2020 Free Software Foundation, Inc.\n-   Contributed by Alexandre Oliva <oliva@adacore.com>\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* Instruction cache invalidation routine using VxWorks' cacheLib.  */\n-\n-#include <vxWorks.h>\n-#include <cacheLib.h>\n-\n-void\n-__clear_cache (char *beg __attribute__((__unused__)),\n-\t       char *end __attribute__((__unused__)))\n-{\n-  cacheTextUpdate (beg, end - beg);\n-}"}]}