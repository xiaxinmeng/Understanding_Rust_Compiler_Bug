{"sha": "00262c8ac76a4805ab153a7ed124fa671fc97fc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAyNjJjOGFjNzZhNDgwNWFiMTUzYTdlZDEyNGZhNjcxZmM5N2ZjNg==", "commit": {"author": {"name": "Martin v. L\u00f6wis", "email": "loewis@informatik.hu-berlin.de", "date": "2000-02-29T23:33:50Z"}, "committer": {"name": "Martin v. L\u00f6wis", "email": "loewis@gcc.gnu.org", "date": "2000-02-29T23:33:50Z"}, "message": "c-decl.c (current_function_decl): Move to toplev.c.\n\n\t* c-decl.c (current_function_decl): Move to toplev.c.\n\t(init_decl_processing): Don't add current_function_decl as a ggc\n\troot here.\n\t* dbxout.c (dbxout_symbol): Change return type to int.\n\t(dbxout_symbol_location, dbxout_syms): Likewise.\n\t(dbxout_block): Don't emit LBRAC/RBRAC pairs for blocks without\n\tany locals. Use current_function_func_begin_label if set.\n\t* dbxout.h (dbxout_symbol, dbxout_syms): Change return type.\n\t* dwarf2out.c (dwarf2out_begin_prologue): Set\n\tcurrent_function_func_begin_label.\n\t* final.c (final_start_function): Reset it.\n\t* toplev.c (current_function_decl): Define it here.\n\t(current_function_func_begin_label): New variable.\n\t(main): Add both as ggc roots.\n\t* tree.h (current_function_func_begin_label): Declare.\n\t* ch/decl.c (current_function_decl): Move to toplev.c.\n\t* cp/decl.c (current_function_decl): Move to toplev.c.\n\t* f/com.c (current_function_decl): Move to toplev.c.\n\t* java/decl.c (current_function_decl): Move to toplev.c.\n\nFrom-SVN: r32268", "tree": {"sha": "3761b362baeb6739f75a4be6a85810c78908ab10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3761b362baeb6739f75a4be6a85810c78908ab10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00262c8ac76a4805ab153a7ed124fa671fc97fc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00262c8ac76a4805ab153a7ed124fa671fc97fc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00262c8ac76a4805ab153a7ed124fa671fc97fc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00262c8ac76a4805ab153a7ed124fa671fc97fc6/comments", "author": null, "committer": null, "parents": [{"sha": "bf44874ee34bf00934f59c3b014d757da0e79523", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf44874ee34bf00934f59c3b014d757da0e79523", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf44874ee34bf00934f59c3b014d757da0e79523"}], "stats": {"total": 147, "additions": 97, "deletions": 50}, "files": [{"sha": "da5a81447cfcb8632c05d4a3c1ea7bd6f6f7ec70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00262c8ac76a4805ab153a7ed124fa671fc97fc6", "patch": "@@ -1,3 +1,21 @@\n+2000-03-01  Martin von Loewis  <loewis@informatik.hu-berlin.de>\n+\n+\t* c-decl.c (current_function_decl): Move to toplev.c.\n+\t(init_decl_processing): Don't add current_function_decl as a ggc\n+\troot here.\n+\t* dbxout.c (dbxout_symbol): Change return type to int.\n+\t(dbxout_symbol_location, dbxout_syms): Likewise.\n+\t(dbxout_block): Don't emit LBRAC/RBRAC pairs for blocks without\n+\tany locals. Use current_function_func_begin_label if set.\n+\t* dbxout.h (dbxout_symbol, dbxout_syms): Change return type.\n+\t* dwarf2out.c (dwarf2out_begin_prologue): Set\n+\tcurrent_function_func_begin_label.\n+\t* final.c (final_start_function): Reset it.\n+\t* toplev.c (current_function_decl): Define it here.\n+\t(current_function_func_begin_label): New variable.\n+\t(main): Add both as ggc roots.\n+\t* tree.h (current_function_func_begin_label): Declare.\n+\n Tue Feb 29 14:07:04 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* gcse.c: Cleanups throughout: mostly white-space, but also"}, {"sha": "ba632d018a409de8c4bfdeb9a124c9aebbfd756a", "filename": "gcc/c-decl.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=00262c8ac76a4805ab153a7ed124fa671fc97fc6", "patch": "@@ -133,10 +133,6 @@ static tree shadowed_labels;\n \n static int c_function_varargs;\n \n-/* The FUNCTION_DECL for the function currently being compiled,\n-   or 0 if between functions.  */\n-tree current_function_decl;\n-\n /* Set to 0 at beginning of a function definition, set to 1 if\n    a return statement that specifies a return value is seen.  */\n \n@@ -3079,7 +3075,6 @@ init_decl_processing ()\n   /* Record our roots.  */\n \n   ggc_add_tree_root (c_global_trees, CTI_MAX);\n-  ggc_add_tree_root (&current_function_decl, 1);\n   ggc_add_tree_root (&named_labels, 1);\n   ggc_add_tree_root (&shadowed_labels, 1);\n   ggc_add_root (&current_binding_level, 1, sizeof current_binding_level,"}, {"sha": "50135e982c5f1f70644c93980fdb516a0efb8727", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=00262c8ac76a4805ab153a7ed124fa671fc97fc6", "patch": "@@ -1,3 +1,7 @@\n+2000-03-01  Martin von Loewis  <loewis@informatik.hu-berlin.de>\n+\n+\t* decl.c (current_function_decl): Move to toplev.c.\n+\n Mon Feb 28 08:12:26 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* ch-tree.h (DECL_ACTION_NESTING_LEVEL): Use new tree union name."}, {"sha": "ddeb45f94f2f2192b77b5882d9477448f8defcb7", "filename": "gcc/ch/decl.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Fch%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Fch%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fdecl.c?ref=00262c8ac76a4805ab153a7ed124fa671fc97fc6", "patch": "@@ -375,10 +375,6 @@ static tree current_function_parms;\n \n static int c_function_varargs;\n \n-/* The FUNCTION_DECL for the function currently being compiled,\n-   or 0 if between functions.  */\n-tree current_function_decl;\n-\n /* These are irrelevant for Chill, but are referenced from from c-typeck.c. */\n int warn_format;\n int warn_traditional;"}, {"sha": "8f4ddaedbcdb7cc9e5c2a28637d5b857963d551b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=00262c8ac76a4805ab153a7ed124fa671fc97fc6", "patch": "@@ -1,3 +1,7 @@\n+2000-03-01  Martin von Loewis  <loewis@informatik.hu-berlin.de>\n+\n+\t* decl.c (current_function_decl): Move to toplev.c.\n+\n 2000-02-29  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* pt.c (fn_type_unification): Unify return type, whenever"}, {"sha": "9d4301bdd09e64ebfc486d726d6d71aa88877ae7", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=00262c8ac76a4805ab153a7ed124fa671fc97fc6", "patch": "@@ -313,10 +313,6 @@ static tree current_function_parm_tags;\n \n #define named_labels cp_function_chain->x_named_labels\n \n-/* The FUNCTION_DECL for the function currently being compiled,\n-   or 0 if between functions.  */\n-tree current_function_decl;\n-\n /* Set to 0 at beginning of a function definition, and whenever\n    a label (case or named) is defined.  Set to value of expression\n    returned from function when that value can be transformed into"}, {"sha": "054009281c4e0dd9bfa49bacc49a5919a2584dab", "filename": "gcc/dbxout.c", "status": "modified", "additions": 45, "deletions": 25, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=00262c8ac76a4805ab153a7ed124fa671fc97fc6", "patch": "@@ -1692,15 +1692,17 @@ dbxout_type_name (type)\n /* Output a .stabs for the symbol defined by DECL,\n    which must be a ..._DECL node in the normal namespace.\n    It may be a CONST_DECL, a FUNCTION_DECL, a PARM_DECL or a VAR_DECL.\n-   LOCAL is nonzero if the scope is less than the entire file.  */\n+   LOCAL is nonzero if the scope is less than the entire file.\n+   Return 1 if a stabs might have been emitted.  */\n \n-void\n+int\n dbxout_symbol (decl, local)\n      tree decl;\n      int local ATTRIBUTE_UNUSED;\n {\n   tree type = TREE_TYPE (decl);\n   tree context = NULL_TREE;\n+  int result = 0;\n \n   /* Cast avoids warning in old compilers.  */\n   current_sym_code = (STAB_CODE_TYPE) 0;\n@@ -1711,7 +1713,7 @@ dbxout_symbol (decl, local)\n \n   if ((DECL_NAME (decl) == 0 && TREE_CODE (decl) != TYPE_DECL)\n       || DECL_IGNORED_P (decl))\n-    return;\n+    return 0;\n \n   dbxout_prepare_symbol (decl);\n \n@@ -1729,7 +1731,7 @@ dbxout_symbol (decl, local)\n \n     case FUNCTION_DECL:\n       if (DECL_RTL (decl) == 0)\n-\treturn;\n+\treturn 0;\n       if (DECL_EXTERNAL (decl))\n \tbreak;\n       /* Don't mention a nested function under its parent.  */\n@@ -1744,6 +1746,7 @@ dbxout_symbol (decl, local)\n       fprintf (asmfile, \"%s \\\"%s:%c\", ASM_STABS_OP,\n \t       IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)),\n \t       TREE_PUBLIC (decl) ? 'F' : 'f');\n+      result = 1;\n \n       current_sym_code = N_FUN;\n       current_sym_addr = XEXP (DECL_RTL (decl), 0);\n@@ -1775,15 +1778,15 @@ dbxout_symbol (decl, local)\n \t don't duplicate it.  */\n       if (typevec[TYPE_SYMTAB_ADDRESS (type)].status == TYPE_DEFINED\n \t  && TYPE_NAME (TREE_TYPE (decl)) == decl)\n-\treturn;\n+\treturn 0;\n #endif\n       /* Don't output the same typedef twice.\n          And don't output what language-specific stuff doesn't want output.  */\n       if (TREE_ASM_WRITTEN (decl) || TYPE_DECL_SUPPRESS_DEBUG (decl))\n-\treturn;\n+\treturn 0;\n \n       FORCE_TEXT;\n-\n+      result = 1;\n       {\n \tint tag_needed = 1;\n \tint did_output = 0;\n@@ -1915,7 +1918,7 @@ dbxout_symbol (decl, local)\n       /* Named return value, treat like a VAR_DECL.  */\n     case VAR_DECL:\n       if (DECL_RTL (decl) == 0)\n-\treturn;\n+\treturn 0;\n       /* Don't mention a variable that is external.\n \t Let the file that defines it describe it.  */\n       if (DECL_EXTERNAL (decl))\n@@ -1945,7 +1948,7 @@ dbxout_symbol (decl, local)\n \t\t  fprintf (asmfile, HOST_WIDE_INT_PRINT_DEC, ival);\n \t\t  fprintf (asmfile, \"\\\",0x%x,0,0,0\\n\", N_LSYM);\n #endif\n-\t\t  return;\n+\t\t  return 1;\n \t\t}\n \t      else if (TREE_CODE (TREE_TYPE (decl)) == REAL_TYPE)\n \t\t{\n@@ -1962,20 +1965,22 @@ dbxout_symbol (decl, local)\n \tleaf_renumber_regs_insn (DECL_RTL (decl));\n #endif\n \n-      dbxout_symbol_location (decl, type, 0, DECL_RTL (decl));\n+      result = dbxout_symbol_location (decl, type, 0, DECL_RTL (decl));\n       break;\n       \n     default:\n       break;\n     }\n+  return result;\n }\n \f\n /* Output the stab for DECL, a VAR_DECL, RESULT_DECL or PARM_DECL.\n    Add SUFFIX to its name, if SUFFIX is not 0.\n    Describe the variable as residing in HOME\n-   (usually HOME is DECL_RTL (DECL), but not always).  */\n+   (usually HOME is DECL_RTL (DECL), but not always).\n+   Returns 1 if the stab was really emitted.  */\n \n-static void\n+static int\n dbxout_symbol_location (decl, type, suffix, home)\n      tree decl, type;\n      const char *suffix;\n@@ -1994,7 +1999,7 @@ dbxout_symbol_location (decl, type, suffix, home)\n     {\n       regno = REGNO (home);\n       if (regno >= FIRST_PSEUDO_REGISTER)\n-\treturn;\n+\treturn 0;\n     }\n   else if (GET_CODE (home) == SUBREG)\n     {\n@@ -2009,7 +2014,7 @@ dbxout_symbol_location (decl, type, suffix, home)\n \t{\n \t  regno = REGNO (value);\n \t  if (regno >= FIRST_PSEUDO_REGISTER)\n-\t    return;\n+\t    return 0;\n \t  regno += offset;\n \t}\n       alter_subreg (home);\n@@ -2163,13 +2168,13 @@ dbxout_symbol_location (decl, type, suffix, home)\n \tdbxout_symbol_location (decl, subtype, \"$real\", XEXP (home, 1));\n       else\n \tdbxout_symbol_location (decl, subtype, \"$imag\", XEXP (home, 1));\n-      return;\n+      return 1;\n     }\n   else\n     /* Address might be a MEM, when DECL is a variable-sized object.\n        Or it might be const0_rtx, meaning previous passes\n        want us to ignore this variable.  */\n-    return;\n+    return 0;\n \n   /* Ok, start a symtab entry and output the variable name.  */\n   FORCE_TEXT;\n@@ -2185,6 +2190,7 @@ dbxout_symbol_location (decl, type, suffix, home)\n #ifdef DBX_STATIC_BLOCK_END\n   DBX_STATIC_BLOCK_END (asmfile, current_sym_code);\n #endif\n+  return 1;\n }\n \f\n /* Output the symbol name of DECL for a stabs, with suffix SUFFIX.\n@@ -2240,17 +2246,20 @@ dbxout_finish_symbol (sym)\n #endif\n }\n \n-/* Output definitions of all the decls in a chain.  */\n+/* Output definitions of all the decls in a chain. Return non-zero if\n+   anything was output */\n \n-void\n+int\n dbxout_syms (syms)\n      tree syms;\n {\n+  int result = 0;\n   while (syms)\n     {\n-      dbxout_symbol (syms, 1);\n+      result += dbxout_symbol (syms, 1);\n       syms = TREE_CHAIN (syms);\n     }\n+  return result;\n }\n \f\n /* The following two functions output definitions of function parameters.\n@@ -2615,16 +2624,27 @@ dbxout_block (block, depth, args)\n      tree args;\n {\n   int blocknum = -1;\n+  int ignored;\n+\n+#if DBX_BLOCKS_FUNCTION_RELATIVE\n+  char *begin_label; \n+  if (current_function_func_begin_label != NULL_TREE)\n+    begin_label = IDENTIFIER_POINTER (current_function_func_begin_label);\n+  else\n+    begin_label = XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0);\n+#endif\n \n   while (block)\n     {\n       /* Ignore blocks never expanded or otherwise marked as real.  */\n       if (TREE_USED (block) && TREE_ASM_WRITTEN (block))\n \t{\n #ifndef DBX_LBRAC_FIRST\n-\t  /* In dbx format, the syms of a block come before the N_LBRAC.  */\n+\t  /* In dbx format, the syms of a block come before the N_LBRAC.\n+\t     If nothing is output, we don't need the N_LBRAC, either. */\n+\t  ignored = 1;\n \t  if (debug_info_level != DINFO_LEVEL_TERSE || depth == 0)\n-\t    dbxout_syms (BLOCK_VARS (block));\n+\t    ignored = dbxout_syms (BLOCK_VARS (block));\n \t  if (args)\n \t    dbxout_reg_parms (args);\n #endif\n@@ -2633,7 +2653,7 @@ dbxout_block (block, depth, args)\n \t     the block.  Use the block's tree-walk order to generate\n \t     the assembler symbols LBBn and LBEn\n \t     that final will define around the code in this block.  */\n-\t  if (depth > 0 && debug_info_level != DINFO_LEVEL_TERSE)\n+\t  if (depth > 0 && !ignored)\n \t    {\n \t      char buf[20];\n \t      blocknum = BLOCK_NUMBER (block);\n@@ -2664,7 +2684,7 @@ dbxout_block (block, depth, args)\n \t      assemble_name (asmfile, buf);\n #if DBX_BLOCKS_FUNCTION_RELATIVE\n \t      fputc ('-', asmfile);\n-\t      assemble_name (asmfile, XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0));\n+\t      assemble_name (asmfile, begin_label);\n #endif\n \t      fprintf (asmfile, \"\\n\");\n #endif\n@@ -2683,7 +2703,7 @@ dbxout_block (block, depth, args)\n \t  dbxout_block (BLOCK_SUBBLOCKS (block), depth + 1, NULL_TREE);\n \n \t  /* Refer to the marker for the end of the block.  */\n-\t  if (depth > 0 && debug_info_level != DINFO_LEVEL_TERSE)\n+\t  if (depth > 0 && !ignored)\n \t    {\n \t      char buf[20];\n \t      ASM_GENERATE_INTERNAL_LABEL (buf, \"LBE\", blocknum);\n@@ -2694,7 +2714,7 @@ dbxout_block (block, depth, args)\n \t      assemble_name (asmfile, buf);\n #if DBX_BLOCKS_FUNCTION_RELATIVE\n \t      fputc ('-', asmfile);\n-\t      assemble_name (asmfile, XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0));\n+\t      assemble_name (asmfile, begin_label);\n #endif\n \t      fprintf (asmfile, \"\\n\");\n #endif"}, {"sha": "d13fbf105e7d4464aadae3d988f8b99aea84d53f", "filename": "gcc/dbxout.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Fdbxout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Fdbxout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.h?ref=00262c8ac76a4805ab153a7ed124fa671fc97fc6", "patch": "@@ -27,10 +27,10 @@ extern void dbxout_resume_previous_source_file\tPARAMS ((void));\n extern void dbxout_source_file\t\tPARAMS ((FILE *, const char *));\n extern void dbxout_types\t\tPARAMS ((tree));\n extern void dbxout_args\t\t\tPARAMS ((tree));\n-extern void dbxout_symbol\t\tPARAMS ((tree, int));\n+extern int dbxout_symbol\t\tPARAMS ((tree, int));\n extern void dbxout_parms\t\tPARAMS ((tree));\n extern void dbxout_reg_parms\t\tPARAMS ((tree));\n-extern void dbxout_syms\t\t\tPARAMS ((tree));\n+extern int dbxout_syms\t\t\tPARAMS ((tree));\n extern void dbxout_function\t\tPARAMS ((tree));\n extern void dbxout_source_line\t\tPARAMS ((FILE *, const char *, int));\n extern void dbxout_begin_function\tPARAMS ((tree));"}, {"sha": "d3b84cd7feab9de53373c4ea91df70fc2b0e21fc", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=00262c8ac76a4805ab153a7ed124fa671fc97fc6", "patch": "@@ -1852,6 +1852,7 @@ dwarf2out_begin_prologue ()\n   ASM_GENERATE_INTERNAL_LABEL (label, FUNC_BEGIN_LABEL,\n \t\t\t       current_funcdef_number);\n   ASM_OUTPUT_LABEL (asm_out_file, label);\n+  current_function_func_begin_label = get_identifier (label);\n \n   /* Expand the fde table if necessary.  */\n   if (fde_table_in_use == fde_table_allocated)"}, {"sha": "819c601687d78f07d5f3ad357862648b2a1b28ab", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=00262c8ac76a4805ab153a7ed124fa671fc97fc6", "patch": "@@ -1,3 +1,7 @@\n+Wed Mar  1 00:31:44 2000  Martin von Loewis  <loewis@informatik.hu-berlin.de>\n+\n+\t* com.c (current_function_decl): Move to toplev.c.\n+\n Sun Feb 27 16:40:33 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* com.c (ffecom_arrayref_): Convert args to size_binop to proper type."}, {"sha": "2554cad6974de3c62d3fe2cc6fd0511440969844", "filename": "gcc/f/com.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=00262c8ac76a4805ab153a7ed124fa671fc97fc6", "patch": "@@ -217,12 +217,6 @@ typedef struct { unsigned :16, :16, :16; } vms_ino_t;\n \n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n \n-/* tree.h declares a bunch of stuff that it expects the front end to\n-   define.  Here are the definitions, which in the C front end are\n-   found in the file c-decl.c.  */\n-\n-tree current_function_decl;\n-\n /* ~~gcc/tree.h *should* declare this, because toplev.c and dwarfout.c\n    reference it.  */\n "}, {"sha": "948ecd33e5ddc6109993da209942d51bf4e940ac", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=00262c8ac76a4805ab153a7ed124fa671fc97fc6", "patch": "@@ -1599,6 +1599,8 @@ final_start_function (first, file, optimize)\n   /* Output DWARF definition of the function.  */\n   if (dwarf2out_do_frame ())\n     dwarf2out_begin_prologue ();\n+  else\n+    current_function_func_begin_label = 0;\n #endif\n \n   /* For SDB and XCOFF, the function beginning must be marked between"}, {"sha": "dcce63b75c494f7b0dbd14d0924e116e0ef4d343", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=00262c8ac76a4805ab153a7ed124fa671fc97fc6", "patch": "@@ -1,3 +1,7 @@\n+2000-03-01  Martin von Loewis  <loewis@informatik.hu-berlin.de>\n+\n+\t* decl.c (current_function_decl): Move to toplev.c.\n+\n Mon Feb 28 08:20:42 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* java-tree.h (LABEL_PC): Relect name changes in ../tree.h."}, {"sha": "cae86f0908af73a2c935942a89ddc4d2235f23ec", "filename": "gcc/java/decl.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=00262c8ac76a4805ab153a7ed124fa671fc97fc6", "patch": "@@ -283,10 +283,6 @@ static int keep_next_level_flag;\n \n static int keep_next_if_subblocks;\n   \n-/* The FUNCTION_DECL for the function currently being compiled,\n-   or 0 if between functions.  */\n-tree current_function_decl;\n-\n tree object_type_node;\n tree unqualified_object_id_node;\n tree object_ptr_type_node;"}, {"sha": "209fd091ae4230dc60b0c36e1dcf6e3fff4d4df2", "filename": "gcc/toplev.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=00262c8ac76a4805ab153a7ed124fa671fc97fc6", "patch": "@@ -307,6 +307,14 @@ int errorcount = 0;\n int warningcount = 0;\n int sorrycount = 0;\n \n+/* The FUNCTION_DECL for the function currently being compiled,\n+   or 0 if between functions.  */\n+tree current_function_decl;\n+\n+/* Set to the FUNC_BEGIN label of the current function, or NULL_TREE\n+   if none.  */\n+tree current_function_func_begin_label;\n+\n /* Pointer to function to compute the name to use to print a declaration.\n    DECL is the declaration in question.\n    VERBOSITY determines what information will be printed:\n@@ -4607,6 +4615,8 @@ main (argc, argv)\n   ggc_add_root (&input_file_stack, 1, sizeof input_file_stack,\n \t\tmark_file_stack);\n   ggc_add_rtx_root (&stack_limit_rtx, 1);\n+  ggc_add_tree_root (&current_function_decl, 1);\n+  ggc_add_tree_root (&current_function_func_begin_label, 1);\n \n   /* Perform language-specific options intialization.  */\n   lang_init_options ();"}, {"sha": "51157c6a2dc5cd993160e0424773b7753a708573", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00262c8ac76a4805ab153a7ed124fa671fc97fc6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=00262c8ac76a4805ab153a7ed124fa671fc97fc6", "patch": "@@ -2092,6 +2092,9 @@ extern int immediate_size_expand;\n \n extern tree current_function_decl;\n \n+/* Nonzero means a FUNC_BEGIN label was emitted.  */\n+extern tree current_function_func_begin_label;\n+\n /* Nonzero means all ..._TYPE nodes should be allocated permanently.  */\n \n extern int all_types_permanent;"}]}