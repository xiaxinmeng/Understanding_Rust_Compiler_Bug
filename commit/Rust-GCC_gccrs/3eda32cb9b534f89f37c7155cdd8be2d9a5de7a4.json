{"sha": "3eda32cb9b534f89f37c7155cdd8be2d9a5de7a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VkYTMyY2I5YjUzNGY4OWYzN2M3MTU1Y2RkOGJlMmQ5YTVkZTdhNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-11-30T01:03:36Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-11-30T01:03:36Z"}, "message": "libstdc++: Fix experimental::filesystem::u8path(const Source&) for Windows\n\nThis function failed to compile when called with a std::string.\n\nAlso, constructing a path with a char8_t string did not correctly treat\nthe string as already UTF-8 encoded.\n\n\t* include/bits/fs_path.h (u8path(InputIterator, InputIterator))\n\t(u8path(const Source&)) [_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Simplify\n\tconditions.\n\t* include/experimental/bits/fs_path.h [_GLIBCXX_FILESYSTEM_IS_WINDOWS]\n\t(__u8path(const Source&, char)): Add overloads for std::string and\n\ttypes convertible to std::string.\n\t(_Cvt::_S_wconvert): Add a new overload for char8_t strings and use\n\tcodecvt_utf8_utf16 to do the correct conversion.\n\nFrom-SVN: r278869", "tree": {"sha": "db412b30ab370c30397b51579c4e9e7bdfc21116", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db412b30ab370c30397b51579c4e9e7bdfc21116"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3eda32cb9b534f89f37c7155cdd8be2d9a5de7a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eda32cb9b534f89f37c7155cdd8be2d9a5de7a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eda32cb9b534f89f37c7155cdd8be2d9a5de7a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eda32cb9b534f89f37c7155cdd8be2d9a5de7a4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa80d0650ce612d88a62d072b63c2523d547fca8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa80d0650ce612d88a62d072b63c2523d547fca8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa80d0650ce612d88a62d072b63c2523d547fca8"}], "stats": {"total": 117, "additions": 67, "deletions": 50}, "files": [{"sha": "54c5f85ab8394120f03bb53ffce8c6f1f3dd6bee", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eda32cb9b534f89f37c7155cdd8be2d9a5de7a4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eda32cb9b534f89f37c7155cdd8be2d9a5de7a4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3eda32cb9b534f89f37c7155cdd8be2d9a5de7a4", "patch": "@@ -1,3 +1,14 @@\n+2019-11-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/fs_path.h (u8path(InputIterator, InputIterator))\n+\t(u8path(const Source&)) [_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Simplify\n+\tconditions.\n+\t* include/experimental/bits/fs_path.h [_GLIBCXX_FILESYSTEM_IS_WINDOWS]\n+\t(__u8path(const Source&, char)): Add overloads for std::string and\n+\ttypes convertible to std::string.\n+\t(_Cvt::_S_wconvert): Add a new overload for char8_t strings and use\n+\tcodecvt_utf8_utf16 to do the correct conversion.\n+\n 2019-11-29  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/fs_path.h (path::operator/=): Change template-head to"}, {"sha": "20ec42da57dade95ad10accd5754858196f4d280", "filename": "libstdc++-v3/include/bits/fs_path.h", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eda32cb9b534f89f37c7155cdd8be2d9a5de7a4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eda32cb9b534f89f37c7155cdd8be2d9a5de7a4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h?ref=3eda32cb9b534f89f37c7155cdd8be2d9a5de7a4", "patch": "@@ -691,14 +691,8 @@ namespace __detail\n     u8path(_InputIterator __first, _InputIterator __last)\n     {\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-#ifdef _GLIBCXX_USE_CHAR8_T\n-      if constexpr (is_same_v<_CharT, char8_t>)\n-\t{\n-\t  return path{ __first, __last };\n-\t}\n-      else\n+      if constexpr (is_same_v<_CharT, char>)\n \t{\n-#endif\n \t  // XXX This assumes native wide encoding is UTF-16.\n \t  std::codecvt_utf8_utf16<path::value_type> __cvt;\n \t  path::string_type __tmp;\n@@ -710,16 +704,16 @@ namespace __detail\n \t  else\n \t    {\n \t      const std::string __u8str{__first, __last};\n-\t      const char* const __ptr = __u8str.data();\n-\t      if (__str_codecvt_in_all(__ptr, __ptr + __u8str.size(), __tmp, __cvt))\n+\t      const char* const __p = __u8str.data();\n+\t      if (__str_codecvt_in_all(__p, __p + __u8str.size(), __tmp, __cvt))\n \t\treturn path{ __tmp };\n \t    }\n \t  _GLIBCXX_THROW_OR_ABORT(filesystem_error(\n \t      \"Cannot convert character sequence\",\n \t      std::make_error_code(errc::illegal_byte_sequence)));\n-#ifdef _GLIBCXX_USE_CHAR8_T\n \t}\n-#endif\n+      else\n+\treturn path{ __first, __last };\n #else\n       // This assumes native normal encoding is UTF-8.\n       return path{ __first, __last };\n@@ -737,14 +731,8 @@ namespace __detail\n     u8path(const _Source& __source)\n     {\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-#ifdef _GLIBCXX_USE_CHAR8_T\n-      if constexpr (is_same_v<_CharT, char8_t>)\n-\t{\n-\t  return path{ __source };\n-\t}\n-      else\n+      if constexpr (is_same_v<_CharT, char>)\n \t{\n-#endif\n \t  if constexpr (is_convertible_v<const _Source&, std::string_view>)\n \t    {\n \t      const std::string_view __s = __source;\n@@ -755,9 +743,9 @@ namespace __detail\n \t      std::string __s = path::_S_string_from_iter(__source);\n \t      return filesystem::u8path(__s.data(), __s.data() + __s.size());\n \t    }\n-#ifdef _GLIBCXX_USE_CHAR8_T\n \t}\n-#endif\n+      else\n+\treturn path{ __source };\n #else\n       return path{ __source };\n #endif"}, {"sha": "5ce012eec81bf9f9aeb42ab9685ff51ccd891bd7", "filename": "libstdc++-v3/include/experimental/bits/fs_path.h", "status": "modified", "additions": 48, "deletions": 30, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eda32cb9b534f89f37c7155cdd8be2d9a5de7a4/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eda32cb9b534f89f37c7155cdd8be2d9a5de7a4/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h?ref=3eda32cb9b534f89f37c7155cdd8be2d9a5de7a4", "patch": "@@ -644,8 +644,22 @@ namespace __detail\n \n   /// Create a path from a UTF-8-encoded sequence of char\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  inline path\n+  __u8path(const string& __s, char)\n+  {\n+    return filesystem::u8path(__s.data(), __s.data() + __s.size());\n+  }\n+\n   template<typename _Source>\n-    inline path\n+    inline __enable_if_t<is_convertible<const _Source&, string>::value, path>\n+    __u8path(const _Source& __source, char)\n+    {\n+      std::string __s = __source;\n+      return filesystem::u8path(__s.data(), __s.data() + __s.size());\n+    }\n+\n+  template<typename _Source>\n+    inline __enable_if_t<!is_convertible<const _Source&, string>::value, path>\n     __u8path(const _Source& __source, char)\n     {\n       std::string __s = path::_S_string_from_iter(__source);\n@@ -733,8 +747,21 @@ namespace __detail\n     struct path::_Cvt\n     {\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+      static string_type\n+      _S_wconvert(const char8_t* __f, const char8_t* __l, const char8_t*)\n+      {\n+\tconst char* __f2 = (const char*)__f;\n+\tconst char* __l2 = (const char*)__l;\n+\tstd::wstring __wstr;\n+\tstd::codecvt_utf8_utf16<wchar_t> __wcvt;\n+\tif (__str_codecvt_in_all(__f2, __l2, __wstr, __wcvt))\n+\t  return __wstr;\n+      }\n+#endif\n+\n       static string_type\n-      _S_wconvert(const char* __f, const char* __l, true_type)\n+      _S_wconvert(const char* __f, const char* __l, const char*)\n       {\n \tusing _Cvt = std::codecvt<wchar_t, char, mbstate_t>;\n \tconst auto& __cvt = std::use_facet<_Cvt>(std::locale{});\n@@ -747,36 +774,29 @@ namespace __detail\n       }\n \n       static string_type\n-      _S_wconvert(const _CharT* __f, const _CharT* __l, false_type)\n+      _S_wconvert(const _CharT* __f, const _CharT* __l, const void*)\n       {\n-#ifdef _GLIBCXX_USE_CHAR8_T\n-\tif constexpr (is_same<_CharT, char8_t>::value)\n-\t  return _S_wconvert((const char*)__f, (const char*)__l, true_type());\n-\telse\n-#endif\n+\tstruct _UCvt : std::codecvt<_CharT, char, std::mbstate_t>\n+\t{ } __cvt;\n+\tstd::string __str;\n+\tif (__str_codecvt_out_all(__f, __l, __str, __cvt))\n \t  {\n-\t    struct _UCvt : std::codecvt<_CharT, char, std::mbstate_t>\n-\t    { } __cvt;\n-\t    std::string __str;\n-\t    if (__str_codecvt_out_all(__f, __l, __str, __cvt))\n-\t      {\n-\t\tconst char* __f2 = __str.data();\n-\t\tconst char* __l2 = __f2 + __str.size();\n-\t\tstd::codecvt_utf8_utf16<wchar_t> __wcvt;\n-\t\tstd::wstring __wstr;\n-\t\tif (__str_codecvt_in_all(__f2, __l2, __wstr, __wcvt))\n-\t\t  return __wstr;\n-\t      }\n-\t    _GLIBCXX_THROW_OR_ABORT(filesystem_error(\n-\t\t  \"Cannot convert character sequence\",\n-\t\t  std::make_error_code(errc::illegal_byte_sequence)));\n+\t    const char* __f2 = __str.data();\n+\t    const char* __l2 = __f2 + __str.size();\n+\t    std::codecvt_utf8_utf16<wchar_t> __wcvt;\n+\t    std::wstring __wstr;\n+\t    if (__str_codecvt_in_all(__f2, __l2, __wstr, __wcvt))\n+\t      return __wstr;\n \t  }\n+\t_GLIBCXX_THROW_OR_ABORT(filesystem_error(\n+\t      \"Cannot convert character sequence\",\n+\t      std::make_error_code(errc::illegal_byte_sequence)));\n       }\n \n       static string_type\n       _S_convert(const _CharT* __f, const _CharT* __l)\n       {\n-\treturn _S_wconvert(__f, __l, is_same<_CharT, char>{});\n+\treturn _S_wconvert(__f, __l, (const _CharT*)nullptr);\n       }\n #else\n       static string_type\n@@ -786,19 +806,17 @@ namespace __detail\n \tif constexpr (is_same<_CharT, char8_t>::value)\n \t  return string_type(__f, __l);\n \telse\n-\t  {\n #endif\n+\t  {\n \t    struct _UCvt : std::codecvt<_CharT, char, std::mbstate_t>\n \t    { } __cvt;\n \t    std::string __str;\n \t    if (__str_codecvt_out_all(__f, __l, __str, __cvt))\n \t      return __str;\n-#ifdef _GLIBCXX_USE_CHAR8_T\n+\t    _GLIBCXX_THROW_OR_ABORT(filesystem_error(\n+\t\t  \"Cannot convert character sequence\",\n+\t\t  std::make_error_code(errc::illegal_byte_sequence)));\n \t  }\n-#endif\n-\t_GLIBCXX_THROW_OR_ABORT(filesystem_error(\n-\t      \"Cannot convert character sequence\",\n-\t      std::make_error_code(errc::illegal_byte_sequence)));\n       }\n #endif\n "}]}