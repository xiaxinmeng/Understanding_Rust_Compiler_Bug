{"sha": "ca34930415ad53674071f3d0280d775ea6d57ef0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EzNDkzMDQxNWFkNTM2NzQwNzFmM2QwMjgwZDc3NWVhNmQ1N2VmMA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-11-20T12:29:30Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-11-20T12:29:30Z"}, "message": "* gcc.dg/c90-intconst-1.c, gcc.dg/c99-intconst-1.c: New tests.\n\nFrom-SVN: r47215", "tree": {"sha": "861150fcfca79ea0f4315b26897ab26d85f79773", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/861150fcfca79ea0f4315b26897ab26d85f79773"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca34930415ad53674071f3d0280d775ea6d57ef0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca34930415ad53674071f3d0280d775ea6d57ef0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca34930415ad53674071f3d0280d775ea6d57ef0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca34930415ad53674071f3d0280d775ea6d57ef0/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f7a5cdc9988df85a7679368966dfab07ff9a1fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f7a5cdc9988df85a7679368966dfab07ff9a1fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f7a5cdc9988df85a7679368966dfab07ff9a1fd"}], "stats": {"total": 1406, "additions": 1406, "deletions": 0}, "files": [{"sha": "55e9b0210e2a4e9544ab8728e66294e2e3d8511c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca34930415ad53674071f3d0280d775ea6d57ef0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca34930415ad53674071f3d0280d775ea6d57ef0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca34930415ad53674071f3d0280d775ea6d57ef0", "patch": "@@ -1,3 +1,7 @@\n+2001-11-20  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/c90-intconst-1.c, gcc.dg/c99-intconst-1.c: New tests.\n+\n 2001-11-20  Nick Clifton  <nickc@cambridge.redhat.com>\n \n \t* gcc.c-torture/compile/981006-1.x: Treat XScale like ARM."}, {"sha": "de7371c06702035832fc901d773df0f33bcaeae2", "filename": "gcc/testsuite/gcc.dg/c90-intconst-1.c", "status": "added", "additions": 763, "deletions": 0, "changes": 763, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca34930415ad53674071f3d0280d775ea6d57ef0/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-intconst-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca34930415ad53674071f3d0280d775ea6d57ef0/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-intconst-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-intconst-1.c?ref=ca34930415ad53674071f3d0280d775ea6d57ef0", "patch": "@@ -0,0 +1,763 @@\n+/* Test for integer constant types.  */\n+\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk>.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n+\n+#include <limits.h>\n+\n+/* Assertion that constant C is of type T.  */\n+#define ASSERT_CONST_TYPE(C, T)\t\t\t\\\n+\tdo {\t\t\t\t\t\\\n+\t  typedef T type;\t\t\t\\\n+\t  typedef type **typepp;\t\t\\\n+\t  typedef __typeof__((C)) ctype;\t\\\n+\t  typedef ctype **ctypepp;\t\t\\\n+\t  typepp x = 0;\t\t\t\t\\\n+\t  ctypepp y = 0;\t\t\t\\\n+\t  x = y;\t\t\t\t\\\n+\t  y = x;\t\t\t\t\\\n+\t} while (0)\n+\n+/* (T *) if E is zero, (void *) otherwise.  */\n+#define type_if_not(T, E) __typeof__(0 ? (T *)0 : (void *)(E))\n+\n+/* (T *) if E is nonzero, (void *) otherwise.  */\n+#define type_if(T, E) type_if_not(T, !(E))\n+\n+/* Combine pointer types, all but one (void *).  */\n+#define type_comb2(T1, T2) __typeof__(0 ? (T1)0 : (T2)0)\n+#define type_comb3(T1, T2, T3) type_comb2(T1, type_comb2(T2, T3))\n+#define type_comb4(T1, T2, T3, T4)\t\t\t\t\\\n+\ttype_comb2(T1, type_comb2(T2, type_comb2(T3, T4)))\n+\n+/* (T1 *) if E1, otherwise (T2 *) if E2.  */\n+#define first_of2p(T1, E1, T2, E2) type_comb2(type_if(T1, (E1)),\t   \\\n+\t\t\t\t\t     type_if(T2, (!(E1) && (E2))))\n+/* (T1 *) if E1, otherwise (T2 *) if E2, otherwise (T3 *) if E3.  */\n+#define first_of3p(T1, E1, T2, E2, T3, E3)\t\t\t\\\n+\ttype_comb3(type_if(T1, (E1)),\t\t\t\t\\\n+\t\t   type_if(T2, (!(E1) && (E2))),\t\t\\\n+\t\t   type_if(T3, (!(E1) && !(E2) && (E3))))\n+/* (T1 *) if E1, otherwise (T2 *) if E2, otherwise (T3 *) if E3, otherwise\n+   (T4 *) if E4.  */\n+#define first_of4p(T1, E1, T2, E2, T3, E3, T4, E4)\t\t\t\\\n+\ttype_comb4(type_if(T1, (E1)),\t\t\t\t\t\\\n+\t\t   type_if(T2, (!(E1) && (E2))),\t\t\t\\\n+\t\t   type_if(T3, (!(E1) && !(E2) && (E3))),\t\t\\\n+\t\t   type_if(T4, (!(E1) && !(E2) && !(E3) && (E4))))\n+\n+/* Likewise, but return the original type rather than a pointer type.  */\n+#define first_of2(T1, E1, T2, E2)\t\t\t\\\n+\t__typeof__(*((first_of2p(T1, (E1), T2, (E2)))0))\n+#define first_of3(T1, E1, T2, E2, T3, E3)\t\t\t\t\\\n+\t__typeof__(*((first_of3p(T1, (E1), T2, (E2), T3, (E3)))0))\n+#define first_of4(T1, E1, T2, E2, T3, E3, T4, E4)\t\t\t    \\\n+\t__typeof__(*((first_of4p(T1, (E1), T2, (E2), T3, (E3), T4, (E4)))0))\n+\n+/* Types of constants according to the C90 rules.  */\n+#define C90_UNSUF_DEC_TYPE(C)\t\t\t\t\\\n+\tfirst_of3(int, (C) <= INT_MAX,\t\t\t\\\n+\t\t  long int, (C) <= LONG_MAX,\t\t\\\n+\t\t  unsigned long int, (C) <= ULONG_MAX)\n+#define C90_UNSUF_OCTHEX_TYPE(C)\t\t\t\\\n+\tfirst_of4(int, (C) <= INT_MAX,\t\t\t\\\n+\t\t  unsigned int, (C) <= UINT_MAX,\t\\\n+\t\t  long int, (C) <= LONG_MAX,\t\t\\\n+\t\t  unsigned long int, (C) <= ULONG_MAX)\n+#define C90_SUFu_TYPE(C)\t\t\t\t\\\n+\tfirst_of2(unsigned int, (C) <= UINT_MAX,\t\\\n+\t\t  unsigned long int, (C) <= ULONG_MAX)\n+#define C90_SUFl_TYPE(C)\t\t\t\t\\\n+\tfirst_of2(long int, (C) <= LONG_MAX,\t\t\\\n+\t\t  unsigned long int, (C) <= ULONG_MAX)\n+\n+/* Checks that constants have correct type.  */\n+#define CHECK_UNSUF_DEC_TYPE(C) ASSERT_CONST_TYPE((C), C90_UNSUF_DEC_TYPE((C)))\n+#define CHECK_UNSUF_OCTHEX_TYPE(C)\t\t\t\t\\\n+\tASSERT_CONST_TYPE((C), C90_UNSUF_OCTHEX_TYPE((C)))\n+#define CHECK_SUFu_TYPE(C) ASSERT_CONST_TYPE((C), C90_SUFu_TYPE((C)))\n+#define CHECK_SUFl_TYPE(C) ASSERT_CONST_TYPE((C), C90_SUFl_TYPE((C)))\n+#define CHECK_SUFul_TYPE(C) ASSERT_CONST_TYPE((C), unsigned long int)\n+\n+/* Check a decimal value, with all suffixes.  */\n+#define CHECK_DEC_CONST(C)\t\t\t\\\n+\tCHECK_UNSUF_DEC_TYPE(C);\t\t\\\n+\tCHECK_SUFu_TYPE(C##u);\t\t\t\\\n+\tCHECK_SUFu_TYPE(C##U);\t\t\t\\\n+\tCHECK_SUFl_TYPE(C##l);\t\t\t\\\n+\tCHECK_SUFl_TYPE(C##L);\t\t\t\\\n+\tCHECK_SUFul_TYPE(C##ul);\t\t\\\n+\tCHECK_SUFul_TYPE(C##uL);\t\t\\\n+\tCHECK_SUFul_TYPE(C##Ul);\t\t\\\n+\tCHECK_SUFul_TYPE(C##UL);\n+\n+/* Check an octal or hexadecimal value, with all suffixes.  */\n+#define CHECK_OCTHEX_CONST(C)\t\t\t\\\n+\tCHECK_UNSUF_OCTHEX_TYPE(C);\t\t\\\n+\tCHECK_SUFu_TYPE(C##u);\t\t\t\\\n+\tCHECK_SUFu_TYPE(C##U);\t\t\t\\\n+\tCHECK_SUFl_TYPE(C##l);\t\t\t\\\n+\tCHECK_SUFl_TYPE(C##L);\t\t\t\\\n+\tCHECK_SUFul_TYPE(C##ul);\t\t\\\n+\tCHECK_SUFul_TYPE(C##uL);\t\t\\\n+\tCHECK_SUFul_TYPE(C##Ul);\t\t\\\n+\tCHECK_SUFul_TYPE(C##UL);\n+\n+#define CHECK_OCT_CONST(C) CHECK_OCTHEX_CONST(C)\n+#define CHECK_HEX_CONST(C)\t\t\t\\\n+\tCHECK_OCTHEX_CONST(0x##C);\t\t\\\n+\tCHECK_OCTHEX_CONST(0X##C);\n+\n+/* True iff \"long\" is at least B bits.  This presumes that (B-2)/3 is at\n+   most 31.  */\n+#define LONG_AT_LEAST(B)\t\t\t\t\t\t\\\n+\t(LONG_MAX >> ((B)-2)/3 >> ((B)-2)/3 >> ((B)-2 - ((B)-2)/3 - ((B)-2)/3))\n+\n+#define LONG_HAS_BITS(B) (LONG_AT_LEAST((B)) && !LONG_AT_LEAST((B) + 1))\n+\n+/* Decimal values that are large enough to be unsigned.  Allow for up to\n+   64 bits in long.  */\n+#if LONG_HAS_BITS(32)\n+#define LARGE_UNSIGNED_DECIMAL 2147483648\n+#endif\n+#if LONG_HAS_BITS(33)\n+#define LARGE_UNSIGNED_DECIMAL 4294967296\n+#endif\n+#if LONG_HAS_BITS(34)\n+#define LARGE_UNSIGNED_DECIMAL 8589934592\n+#endif\n+#if LONG_HAS_BITS(35)\n+#define LARGE_UNSIGNED_DECIMAL 17179869184\n+#endif\n+#if LONG_HAS_BITS(36)\n+#define LARGE_UNSIGNED_DECIMAL 34359738368\n+#endif\n+#if LONG_HAS_BITS(37)\n+#define LARGE_UNSIGNED_DECIMAL 68719476736\n+#endif\n+#if LONG_HAS_BITS(38)\n+#define LARGE_UNSIGNED_DECIMAL 137438953472\n+#endif\n+#if LONG_HAS_BITS(39)\n+#define LARGE_UNSIGNED_DECIMAL 274877906944\n+#endif\n+#if LONG_HAS_BITS(40)\n+#define LARGE_UNSIGNED_DECIMAL 549755813888\n+#endif\n+#if LONG_HAS_BITS(41)\n+#define LARGE_UNSIGNED_DECIMAL 1099511627776\n+#endif\n+#if LONG_HAS_BITS(42)\n+#define LARGE_UNSIGNED_DECIMAL 2199023255552\n+#endif\n+#if LONG_HAS_BITS(43)\n+#define LARGE_UNSIGNED_DECIMAL 4398046511104\n+#endif\n+#if LONG_HAS_BITS(44)\n+#define LARGE_UNSIGNED_DECIMAL 8796093022208\n+#endif\n+#if LONG_HAS_BITS(45)\n+#define LARGE_UNSIGNED_DECIMAL 17592186044416\n+#endif\n+#if LONG_HAS_BITS(46)\n+#define LARGE_UNSIGNED_DECIMAL 35184372088832\n+#endif\n+#if LONG_HAS_BITS(47)\n+#define LARGE_UNSIGNED_DECIMAL 70368744177664\n+#endif\n+#if LONG_HAS_BITS(48)\n+#define LARGE_UNSIGNED_DECIMAL 140737488355328\n+#endif\n+#if LONG_HAS_BITS(49)\n+#define LARGE_UNSIGNED_DECIMAL 281474976710656\n+#endif\n+#if LONG_HAS_BITS(50)\n+#define LARGE_UNSIGNED_DECIMAL 562949953421312\n+#endif\n+#if LONG_HAS_BITS(51)\n+#define LARGE_UNSIGNED_DECIMAL 1125899906842624\n+#endif\n+#if LONG_HAS_BITS(52)\n+#define LARGE_UNSIGNED_DECIMAL 2251799813685248\n+#endif\n+#if LONG_HAS_BITS(53)\n+#define LARGE_UNSIGNED_DECIMAL 4503599627370496\n+#endif\n+#if LONG_HAS_BITS(54)\n+#define LARGE_UNSIGNED_DECIMAL 9007199254740992\n+#endif\n+#if LONG_HAS_BITS(55)\n+#define LARGE_UNSIGNED_DECIMAL 18014398509481984\n+#endif\n+#if LONG_HAS_BITS(56)\n+#define LARGE_UNSIGNED_DECIMAL 36028797018963968\n+#endif\n+#if LONG_HAS_BITS(57)\n+#define LARGE_UNSIGNED_DECIMAL 72057594037927936\n+#endif\n+#if LONG_HAS_BITS(58)\n+#define LARGE_UNSIGNED_DECIMAL 144115188075855872\n+#endif\n+#if LONG_HAS_BITS(59)\n+#define LARGE_UNSIGNED_DECIMAL 288230376151711744\n+#endif\n+#if LONG_HAS_BITS(60)\n+#define LARGE_UNSIGNED_DECIMAL 576460752303423488\n+#endif\n+#if LONG_HAS_BITS(61)\n+#define LARGE_UNSIGNED_DECIMAL 1152921504606846976\n+#endif\n+#if LONG_HAS_BITS(62)\n+#define LARGE_UNSIGNED_DECIMAL 2305843009213693952\n+#endif\n+#if LONG_HAS_BITS(63)\n+#define LARGE_UNSIGNED_DECIMAL 4611686018427387904\n+#endif\n+#if LONG_HAS_BITS(64)\n+#define LARGE_UNSIGNED_DECIMAL 9223372036854775808\n+#endif\n+#if LONG_AT_LEAST(65)\n+#error \"extend this test to allow for long larger than 64 bits\"\n+#endif\n+\n+#define cat(x, y) x ## y\n+#define xcat(x, y) cat(x, y)\n+\n+#define LARGE_UNSIGNED_DECIMALl xcat(LARGE_UNSIGNED_DECIMAL, l)\n+#define LARGE_UNSIGNED_DECIMALL xcat(LARGE_UNSIGNED_DECIMAL, L)\n+#define LARGE_UNSIGNED_DECIMALu xcat(LARGE_UNSIGNED_DECIMAL, u)\n+#define LARGE_UNSIGNED_DECIMALU xcat(LARGE_UNSIGNED_DECIMAL, U)\n+#define LARGE_UNSIGNED_DECIMALul xcat(LARGE_UNSIGNED_DECIMAL, ul)\n+#define LARGE_UNSIGNED_DECIMALuL xcat(LARGE_UNSIGNED_DECIMAL, uL)\n+#define LARGE_UNSIGNED_DECIMALUl xcat(LARGE_UNSIGNED_DECIMAL, Ul)\n+#define LARGE_UNSIGNED_DECIMALUL xcat(LARGE_UNSIGNED_DECIMAL, UL)\n+\n+void\n+foo (void)\n+{\n+  /* Decimal.  */\n+  /* Check all 2^n and 2^n - 1 up to 2^63 - 1.  Check values that would be\n+     unsigned separately since they generate a warning.  */\n+  CHECK_DEC_CONST(1);\n+  CHECK_DEC_CONST(2);\n+  CHECK_DEC_CONST(3);\n+  CHECK_DEC_CONST(4);\n+  CHECK_DEC_CONST(7);\n+  CHECK_DEC_CONST(8);\n+  CHECK_DEC_CONST(15);\n+  CHECK_DEC_CONST(16);\n+  CHECK_DEC_CONST(31);\n+  CHECK_DEC_CONST(32);\n+  CHECK_DEC_CONST(63);\n+  CHECK_DEC_CONST(64);\n+  CHECK_DEC_CONST(127);\n+  CHECK_DEC_CONST(128);\n+  CHECK_DEC_CONST(255);\n+  CHECK_DEC_CONST(256);\n+  CHECK_DEC_CONST(511);\n+  CHECK_DEC_CONST(512);\n+  CHECK_DEC_CONST(1023);\n+  CHECK_DEC_CONST(1024);\n+  CHECK_DEC_CONST(2047);\n+  CHECK_DEC_CONST(2048);\n+  CHECK_DEC_CONST(4095);\n+  CHECK_DEC_CONST(4096);\n+  CHECK_DEC_CONST(8191);\n+  CHECK_DEC_CONST(8192);\n+  CHECK_DEC_CONST(16383);\n+  CHECK_DEC_CONST(16384);\n+  CHECK_DEC_CONST(32767);\n+  CHECK_DEC_CONST(32768);\n+  CHECK_DEC_CONST(65535);\n+  CHECK_DEC_CONST(65536);\n+  CHECK_DEC_CONST(131071);\n+  CHECK_DEC_CONST(131072);\n+  CHECK_DEC_CONST(262143);\n+  CHECK_DEC_CONST(262144);\n+  CHECK_DEC_CONST(524287);\n+  CHECK_DEC_CONST(524288);\n+  CHECK_DEC_CONST(1048575);\n+  CHECK_DEC_CONST(1048576);\n+  CHECK_DEC_CONST(2097151);\n+  CHECK_DEC_CONST(2097152);\n+  CHECK_DEC_CONST(4194303);\n+  CHECK_DEC_CONST(4194304);\n+  CHECK_DEC_CONST(8388607);\n+  CHECK_DEC_CONST(8388608);\n+  CHECK_DEC_CONST(16777215);\n+  CHECK_DEC_CONST(16777216);\n+  CHECK_DEC_CONST(33554431);\n+  CHECK_DEC_CONST(33554432);\n+  CHECK_DEC_CONST(67108863);\n+  CHECK_DEC_CONST(67108864);\n+  CHECK_DEC_CONST(134217727);\n+  CHECK_DEC_CONST(134217728);\n+  CHECK_DEC_CONST(268435455);\n+  CHECK_DEC_CONST(268435456);\n+  CHECK_DEC_CONST(536870911);\n+  CHECK_DEC_CONST(536870912);\n+  CHECK_DEC_CONST(1073741823);\n+  CHECK_DEC_CONST(1073741824);\n+  CHECK_DEC_CONST(2147483647);\n+#if LONG_AT_LEAST(33)\n+  CHECK_DEC_CONST(2147483648);\n+  CHECK_DEC_CONST(4294967295);\n+#endif\n+#if LONG_AT_LEAST(34)\n+  CHECK_DEC_CONST(4294967296);\n+  CHECK_DEC_CONST(8589934591);\n+#endif\n+#if LONG_AT_LEAST(35)\n+  CHECK_DEC_CONST(8589934592);\n+  CHECK_DEC_CONST(17179869183);\n+#endif\n+#if LONG_AT_LEAST(36)\n+  CHECK_DEC_CONST(17179869184);\n+  CHECK_DEC_CONST(34359738367);\n+#endif\n+#if LONG_AT_LEAST(37)\n+  CHECK_DEC_CONST(34359738368);\n+  CHECK_DEC_CONST(68719476735);\n+#endif\n+#if LONG_AT_LEAST(38)\n+  CHECK_DEC_CONST(68719476736);\n+  CHECK_DEC_CONST(137438953471);\n+#endif\n+#if LONG_AT_LEAST(39)\n+  CHECK_DEC_CONST(137438953472);\n+  CHECK_DEC_CONST(274877906943);\n+#endif\n+#if LONG_AT_LEAST(40)\n+  CHECK_DEC_CONST(274877906944);\n+  CHECK_DEC_CONST(549755813887);\n+#endif\n+#if LONG_AT_LEAST(41)\n+  CHECK_DEC_CONST(549755813888);\n+  CHECK_DEC_CONST(1099511627775);\n+#endif\n+#if LONG_AT_LEAST(42)\n+  CHECK_DEC_CONST(1099511627776);\n+  CHECK_DEC_CONST(2199023255551);\n+#endif\n+#if LONG_AT_LEAST(43)\n+  CHECK_DEC_CONST(2199023255552);\n+  CHECK_DEC_CONST(4398046511103);\n+#endif\n+#if LONG_AT_LEAST(44)\n+  CHECK_DEC_CONST(4398046511104);\n+  CHECK_DEC_CONST(8796093022207);\n+#endif\n+#if LONG_AT_LEAST(45)\n+  CHECK_DEC_CONST(8796093022208);\n+  CHECK_DEC_CONST(17592186044415);\n+#endif\n+#if LONG_AT_LEAST(46)\n+  CHECK_DEC_CONST(17592186044416);\n+  CHECK_DEC_CONST(35184372088831);\n+#endif\n+#if LONG_AT_LEAST(47)\n+  CHECK_DEC_CONST(35184372088832);\n+  CHECK_DEC_CONST(70368744177663);\n+#endif\n+#if LONG_AT_LEAST(48)\n+  CHECK_DEC_CONST(70368744177664);\n+  CHECK_DEC_CONST(140737488355327);\n+#endif\n+#if LONG_AT_LEAST(49)\n+  CHECK_DEC_CONST(140737488355328);\n+  CHECK_DEC_CONST(281474976710655);\n+#endif\n+#if LONG_AT_LEAST(50)\n+  CHECK_DEC_CONST(281474976710656);\n+  CHECK_DEC_CONST(562949953421311);\n+#endif\n+#if LONG_AT_LEAST(51)\n+  CHECK_DEC_CONST(562949953421312);\n+  CHECK_DEC_CONST(1125899906842623);\n+#endif\n+#if LONG_AT_LEAST(52)\n+  CHECK_DEC_CONST(1125899906842624);\n+  CHECK_DEC_CONST(2251799813685247);\n+#endif\n+#if LONG_AT_LEAST(53)\n+  CHECK_DEC_CONST(2251799813685248);\n+  CHECK_DEC_CONST(4503599627370495);\n+#endif\n+#if LONG_AT_LEAST(54)\n+  CHECK_DEC_CONST(4503599627370496);\n+  CHECK_DEC_CONST(9007199254740991);\n+#endif\n+#if LONG_AT_LEAST(55)\n+  CHECK_DEC_CONST(9007199254740992);\n+  CHECK_DEC_CONST(18014398509481983);\n+#endif\n+#if LONG_AT_LEAST(56)\n+  CHECK_DEC_CONST(18014398509481984);\n+  CHECK_DEC_CONST(36028797018963967);\n+#endif\n+#if LONG_AT_LEAST(57)\n+  CHECK_DEC_CONST(36028797018963968);\n+  CHECK_DEC_CONST(72057594037927935);\n+#endif\n+#if LONG_AT_LEAST(58)\n+  CHECK_DEC_CONST(72057594037927936);\n+  CHECK_DEC_CONST(144115188075855871);\n+#endif\n+#if LONG_AT_LEAST(59)\n+  CHECK_DEC_CONST(144115188075855872);\n+  CHECK_DEC_CONST(288230376151711743);\n+#endif\n+#if LONG_AT_LEAST(60)\n+  CHECK_DEC_CONST(288230376151711744);\n+  CHECK_DEC_CONST(576460752303423487);\n+#endif\n+#if LONG_AT_LEAST(61)\n+  CHECK_DEC_CONST(576460752303423488);\n+  CHECK_DEC_CONST(1152921504606846975);\n+#endif\n+#if LONG_AT_LEAST(62)\n+  CHECK_DEC_CONST(1152921504606846976);\n+  CHECK_DEC_CONST(2305843009213693951);\n+#endif\n+#if LONG_AT_LEAST(63)\n+  CHECK_DEC_CONST(2305843009213693952);\n+  CHECK_DEC_CONST(4611686018427387903);\n+#endif\n+#if LONG_AT_LEAST(64)\n+  CHECK_DEC_CONST(4611686018427387904);\n+  CHECK_DEC_CONST(9223372036854775807);\n+#endif\n+  /* Separate checks for values that are unsigned.  */\n+  CHECK_UNSUF_DEC_TYPE(LARGE_UNSIGNED_DECIMAL); /* { dg-warning \"unsigned\" \"unsigned decimal no suffix\" } */\n+  CHECK_SUFl_TYPE(LARGE_UNSIGNED_DECIMALl); /* { dg-warning \"unsigned\" \"unsigned decimal long suffix\" } */\n+  CHECK_SUFl_TYPE(LARGE_UNSIGNED_DECIMALL); /* { dg-warning \"unsigned\" \"unsigned decimal long suffix\" } */\n+  CHECK_SUFu_TYPE(LARGE_UNSIGNED_DECIMALu);\n+  CHECK_SUFu_TYPE(LARGE_UNSIGNED_DECIMALU);\n+  CHECK_SUFul_TYPE(LARGE_UNSIGNED_DECIMALul);\n+  CHECK_SUFul_TYPE(LARGE_UNSIGNED_DECIMALuL);\n+  CHECK_SUFul_TYPE(LARGE_UNSIGNED_DECIMALUl);\n+  CHECK_SUFul_TYPE(LARGE_UNSIGNED_DECIMALUL);\n+  /* Octal and hexadecimal.  */\n+  /* Check all 2^n and 2^n - 1 up to 2^64 - 1.  */\n+  CHECK_OCT_CONST(0);\n+  CHECK_HEX_CONST(0);\n+  CHECK_OCT_CONST(01);\n+  CHECK_HEX_CONST(1);\n+  CHECK_OCT_CONST(02);\n+  CHECK_HEX_CONST(2);\n+  CHECK_OCT_CONST(03);\n+  CHECK_HEX_CONST(3);\n+  CHECK_OCT_CONST(04);\n+  CHECK_HEX_CONST(4);\n+  CHECK_OCT_CONST(07);\n+  CHECK_HEX_CONST(7);\n+  CHECK_OCT_CONST(010);\n+  CHECK_HEX_CONST(8);\n+  CHECK_OCT_CONST(017);\n+  CHECK_HEX_CONST(f);\n+  CHECK_OCT_CONST(020);\n+  CHECK_HEX_CONST(10);\n+  CHECK_OCT_CONST(037);\n+  CHECK_HEX_CONST(1f);\n+  CHECK_OCT_CONST(040);\n+  CHECK_HEX_CONST(20);\n+  CHECK_OCT_CONST(077);\n+  CHECK_HEX_CONST(3f);\n+  CHECK_OCT_CONST(0100);\n+  CHECK_HEX_CONST(40);\n+  CHECK_OCT_CONST(0177);\n+  CHECK_HEX_CONST(7f);\n+  CHECK_OCT_CONST(0200);\n+  CHECK_HEX_CONST(80);\n+  CHECK_OCT_CONST(0377);\n+  CHECK_HEX_CONST(ff);\n+  CHECK_OCT_CONST(0400);\n+  CHECK_HEX_CONST(100);\n+  CHECK_OCT_CONST(0777);\n+  CHECK_HEX_CONST(1ff);\n+  CHECK_OCT_CONST(01000);\n+  CHECK_HEX_CONST(200);\n+  CHECK_OCT_CONST(01777);\n+  CHECK_HEX_CONST(3ff);\n+  CHECK_OCT_CONST(02000);\n+  CHECK_HEX_CONST(400);\n+  CHECK_OCT_CONST(03777);\n+  CHECK_HEX_CONST(7ff);\n+  CHECK_OCT_CONST(04000);\n+  CHECK_HEX_CONST(800);\n+  CHECK_OCT_CONST(07777);\n+  CHECK_HEX_CONST(fff);\n+  CHECK_OCT_CONST(010000);\n+  CHECK_HEX_CONST(1000);\n+  CHECK_OCT_CONST(017777);\n+  CHECK_HEX_CONST(1fff);\n+  CHECK_OCT_CONST(020000);\n+  CHECK_HEX_CONST(2000);\n+  CHECK_OCT_CONST(037777);\n+  CHECK_HEX_CONST(3fff);\n+  CHECK_OCT_CONST(040000);\n+  CHECK_HEX_CONST(4000);\n+  CHECK_OCT_CONST(077777);\n+  CHECK_HEX_CONST(7fff);\n+  CHECK_OCT_CONST(0100000);\n+  CHECK_HEX_CONST(8000);\n+  CHECK_OCT_CONST(0177777);\n+  CHECK_HEX_CONST(ffff);\n+  CHECK_OCT_CONST(0200000);\n+  CHECK_HEX_CONST(10000);\n+  CHECK_OCT_CONST(0377777);\n+  CHECK_HEX_CONST(1ffff);\n+  CHECK_OCT_CONST(0400000);\n+  CHECK_HEX_CONST(20000);\n+  CHECK_OCT_CONST(0777777);\n+  CHECK_HEX_CONST(3ffff);\n+  CHECK_OCT_CONST(01000000);\n+  CHECK_HEX_CONST(40000);\n+  CHECK_OCT_CONST(01777777);\n+  CHECK_HEX_CONST(7ffff);\n+  CHECK_OCT_CONST(02000000);\n+  CHECK_HEX_CONST(80000);\n+  CHECK_OCT_CONST(03777777);\n+  CHECK_HEX_CONST(fffff);\n+  CHECK_OCT_CONST(04000000);\n+  CHECK_HEX_CONST(100000);\n+  CHECK_OCT_CONST(07777777);\n+  CHECK_HEX_CONST(1fffff);\n+  CHECK_OCT_CONST(010000000);\n+  CHECK_HEX_CONST(200000);\n+  CHECK_OCT_CONST(017777777);\n+  CHECK_HEX_CONST(3fffff);\n+  CHECK_OCT_CONST(020000000);\n+  CHECK_HEX_CONST(400000);\n+  CHECK_OCT_CONST(037777777);\n+  CHECK_HEX_CONST(7fffff);\n+  CHECK_OCT_CONST(040000000);\n+  CHECK_HEX_CONST(800000);\n+  CHECK_OCT_CONST(077777777);\n+  CHECK_HEX_CONST(ffffff);\n+  CHECK_OCT_CONST(0100000000);\n+  CHECK_HEX_CONST(1000000);\n+  CHECK_OCT_CONST(0177777777);\n+  CHECK_HEX_CONST(1ffffff);\n+  CHECK_OCT_CONST(0200000000);\n+  CHECK_HEX_CONST(2000000);\n+  CHECK_OCT_CONST(0377777777);\n+  CHECK_HEX_CONST(3ffffff);\n+  CHECK_OCT_CONST(0400000000);\n+  CHECK_HEX_CONST(4000000);\n+  CHECK_OCT_CONST(0777777777);\n+  CHECK_HEX_CONST(7ffffff);\n+  CHECK_OCT_CONST(01000000000);\n+  CHECK_HEX_CONST(8000000);\n+  CHECK_OCT_CONST(01777777777);\n+  CHECK_HEX_CONST(fffffff);\n+  CHECK_OCT_CONST(02000000000);\n+  CHECK_HEX_CONST(10000000);\n+  CHECK_OCT_CONST(03777777777);\n+  CHECK_HEX_CONST(1fffffff);\n+  CHECK_OCT_CONST(04000000000);\n+  CHECK_HEX_CONST(20000000);\n+  CHECK_OCT_CONST(07777777777);\n+  CHECK_HEX_CONST(3fffffff);\n+  CHECK_OCT_CONST(010000000000);\n+  CHECK_HEX_CONST(40000000);\n+  CHECK_OCT_CONST(017777777777);\n+  CHECK_HEX_CONST(7fffffff);\n+  CHECK_OCT_CONST(020000000000);\n+  CHECK_HEX_CONST(80000000);\n+  CHECK_OCT_CONST(037777777777);\n+  CHECK_HEX_CONST(ffffffff);\n+#if LONG_AT_LEAST(33)\n+  CHECK_OCT_CONST(040000000000);\n+  CHECK_HEX_CONST(100000000);\n+  CHECK_OCT_CONST(077777777777);\n+  CHECK_HEX_CONST(1ffffffff);\n+#endif\n+#if LONG_AT_LEAST(34)\n+  CHECK_OCT_CONST(0100000000000);\n+  CHECK_HEX_CONST(200000000);\n+  CHECK_OCT_CONST(0177777777777);\n+  CHECK_HEX_CONST(3ffffffff);\n+#endif\n+#if LONG_AT_LEAST(35)\n+  CHECK_OCT_CONST(0200000000000);\n+  CHECK_HEX_CONST(400000000);\n+  CHECK_OCT_CONST(0377777777777);\n+  CHECK_HEX_CONST(7ffffffff);\n+#endif\n+#if LONG_AT_LEAST(36)\n+  CHECK_OCT_CONST(0400000000000);\n+  CHECK_HEX_CONST(800000000);\n+  CHECK_OCT_CONST(0777777777777);\n+  CHECK_HEX_CONST(fffffffff);\n+#endif\n+#if LONG_AT_LEAST(37)\n+  CHECK_OCT_CONST(01000000000000);\n+  CHECK_HEX_CONST(1000000000);\n+  CHECK_OCT_CONST(01777777777777);\n+  CHECK_HEX_CONST(1fffffffff);\n+#endif\n+#if LONG_AT_LEAST(38)\n+  CHECK_OCT_CONST(02000000000000);\n+  CHECK_HEX_CONST(2000000000);\n+  CHECK_OCT_CONST(03777777777777);\n+  CHECK_HEX_CONST(3fffffffff);\n+#endif\n+#if LONG_AT_LEAST(39)\n+  CHECK_OCT_CONST(04000000000000);\n+  CHECK_HEX_CONST(4000000000);\n+  CHECK_OCT_CONST(07777777777777);\n+  CHECK_HEX_CONST(7fffffffff);\n+#endif\n+#if LONG_AT_LEAST(40)\n+  CHECK_OCT_CONST(010000000000000);\n+  CHECK_HEX_CONST(8000000000);\n+  CHECK_OCT_CONST(017777777777777);\n+  CHECK_HEX_CONST(ffffffffff);\n+#endif\n+#if LONG_AT_LEAST(41)\n+  CHECK_OCT_CONST(020000000000000);\n+  CHECK_HEX_CONST(10000000000);\n+  CHECK_OCT_CONST(037777777777777);\n+  CHECK_HEX_CONST(1ffffffffff);\n+#endif\n+#if LONG_AT_LEAST(42)\n+  CHECK_OCT_CONST(040000000000000);\n+  CHECK_HEX_CONST(20000000000);\n+  CHECK_OCT_CONST(077777777777777);\n+  CHECK_HEX_CONST(3ffffffffff);\n+#endif\n+#if LONG_AT_LEAST(43)\n+  CHECK_OCT_CONST(0100000000000000);\n+  CHECK_HEX_CONST(40000000000);\n+  CHECK_OCT_CONST(0177777777777777);\n+  CHECK_HEX_CONST(7ffffffffff);\n+#endif\n+#if LONG_AT_LEAST(44)\n+  CHECK_OCT_CONST(0200000000000000);\n+  CHECK_HEX_CONST(80000000000);\n+  CHECK_OCT_CONST(0377777777777777);\n+  CHECK_HEX_CONST(fffffffffff);\n+#endif\n+#if LONG_AT_LEAST(45)\n+  CHECK_OCT_CONST(0400000000000000);\n+  CHECK_HEX_CONST(100000000000);\n+  CHECK_OCT_CONST(0777777777777777);\n+  CHECK_HEX_CONST(1fffffffffff);\n+#endif\n+#if LONG_AT_LEAST(46)\n+  CHECK_OCT_CONST(01000000000000000);\n+  CHECK_HEX_CONST(200000000000);\n+  CHECK_OCT_CONST(01777777777777777);\n+  CHECK_HEX_CONST(3fffffffffff);\n+#endif\n+#if LONG_AT_LEAST(47)\n+  CHECK_OCT_CONST(02000000000000000);\n+  CHECK_HEX_CONST(400000000000);\n+  CHECK_OCT_CONST(03777777777777777);\n+  CHECK_HEX_CONST(7fffffffffff);\n+#endif\n+#if LONG_AT_LEAST(48)\n+  CHECK_OCT_CONST(04000000000000000);\n+  CHECK_HEX_CONST(800000000000);\n+  CHECK_OCT_CONST(07777777777777777);\n+  CHECK_HEX_CONST(ffffffffffff);\n+#endif\n+#if LONG_AT_LEAST(49)\n+  CHECK_OCT_CONST(010000000000000000);\n+  CHECK_HEX_CONST(1000000000000);\n+  CHECK_OCT_CONST(017777777777777777);\n+  CHECK_HEX_CONST(1ffffffffffff);\n+#endif\n+#if LONG_AT_LEAST(50)\n+  CHECK_OCT_CONST(020000000000000000);\n+  CHECK_HEX_CONST(2000000000000);\n+  CHECK_OCT_CONST(037777777777777777);\n+  CHECK_HEX_CONST(3ffffffffffff);\n+#endif\n+#if LONG_AT_LEAST(51)\n+  CHECK_OCT_CONST(040000000000000000);\n+  CHECK_HEX_CONST(4000000000000);\n+  CHECK_OCT_CONST(077777777777777777);\n+  CHECK_HEX_CONST(7ffffffffffff);\n+#endif\n+#if LONG_AT_LEAST(52)\n+  CHECK_OCT_CONST(0100000000000000000);\n+  CHECK_HEX_CONST(8000000000000);\n+  CHECK_OCT_CONST(0177777777777777777);\n+  CHECK_HEX_CONST(fffffffffffff);\n+#endif\n+#if LONG_AT_LEAST(53)\n+  CHECK_OCT_CONST(0200000000000000000);\n+  CHECK_HEX_CONST(10000000000000);\n+  CHECK_OCT_CONST(0377777777777777777);\n+  CHECK_HEX_CONST(1fffffffffffff);\n+#endif\n+#if LONG_AT_LEAST(54)\n+  CHECK_OCT_CONST(0400000000000000000);\n+  CHECK_HEX_CONST(20000000000000);\n+  CHECK_OCT_CONST(0777777777777777777);\n+  CHECK_HEX_CONST(3fffffffffffff);\n+#endif\n+#if LONG_AT_LEAST(55)\n+  CHECK_OCT_CONST(01000000000000000000);\n+  CHECK_HEX_CONST(40000000000000);\n+  CHECK_OCT_CONST(01777777777777777777);\n+  CHECK_HEX_CONST(7fffffffffffff);\n+#endif\n+#if LONG_AT_LEAST(56)\n+  CHECK_OCT_CONST(02000000000000000000);\n+  CHECK_HEX_CONST(80000000000000);\n+  CHECK_OCT_CONST(03777777777777777777);\n+  CHECK_HEX_CONST(ffffffffffffff);\n+#endif\n+#if LONG_AT_LEAST(57)\n+  CHECK_OCT_CONST(04000000000000000000);\n+  CHECK_HEX_CONST(100000000000000);\n+  CHECK_OCT_CONST(07777777777777777777);\n+  CHECK_HEX_CONST(1ffffffffffffff);\n+#endif\n+#if LONG_AT_LEAST(58)\n+  CHECK_OCT_CONST(010000000000000000000);\n+  CHECK_HEX_CONST(200000000000000);\n+  CHECK_OCT_CONST(017777777777777777777);\n+  CHECK_HEX_CONST(3ffffffffffffff);\n+#endif\n+#if LONG_AT_LEAST(59)\n+  CHECK_OCT_CONST(020000000000000000000);\n+  CHECK_HEX_CONST(400000000000000);\n+  CHECK_OCT_CONST(037777777777777777777);\n+  CHECK_HEX_CONST(7ffffffffffffff);\n+#endif\n+#if LONG_AT_LEAST(60)\n+  CHECK_OCT_CONST(040000000000000000000);\n+  CHECK_HEX_CONST(800000000000000);\n+  CHECK_OCT_CONST(077777777777777777777);\n+  CHECK_HEX_CONST(fffffffffffffff);\n+#endif\n+#if LONG_AT_LEAST(61)\n+  CHECK_OCT_CONST(0100000000000000000000);\n+  CHECK_HEX_CONST(1000000000000000);\n+  CHECK_OCT_CONST(0177777777777777777777);\n+  CHECK_HEX_CONST(1fffffffffffffff);\n+#endif\n+#if LONG_AT_LEAST(62)\n+  CHECK_OCT_CONST(0200000000000000000000);\n+  CHECK_HEX_CONST(2000000000000000);\n+  CHECK_OCT_CONST(0377777777777777777777);\n+  CHECK_HEX_CONST(3fffffffffffffff);\n+#endif\n+#if LONG_AT_LEAST(63)\n+  CHECK_OCT_CONST(0400000000000000000000);\n+  CHECK_HEX_CONST(4000000000000000);\n+  CHECK_OCT_CONST(0777777777777777777777);\n+  CHECK_HEX_CONST(7fffffffffffffff);\n+#endif\n+#if LONG_AT_LEAST(64)\n+  CHECK_OCT_CONST(01000000000000000000000);\n+  CHECK_HEX_CONST(8000000000000000);\n+  CHECK_OCT_CONST(01777777777777777777777);\n+  CHECK_HEX_CONST(ffffffffffffffff);\n+#endif\n+}"}, {"sha": "629b0bcac2057e44e340f80cbb1820f6147382d5", "filename": "gcc/testsuite/gcc.dg/c99-intconst-1.c", "status": "added", "additions": 639, "deletions": 0, "changes": 639, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca34930415ad53674071f3d0280d775ea6d57ef0/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-intconst-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca34930415ad53674071f3d0280d775ea6d57ef0/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-intconst-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-intconst-1.c?ref=ca34930415ad53674071f3d0280d775ea6d57ef0", "patch": "@@ -0,0 +1,639 @@\n+/* Test for integer constant types.  */\n+\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk>.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+#include <limits.h>\n+\n+/* Assertion that constant C is of type T.  */\n+#define ASSERT_CONST_TYPE(C, T)\t\t\t\\\n+\tdo {\t\t\t\t\t\\\n+\t  typedef T type;\t\t\t\\\n+\t  typedef type **typepp;\t\t\\\n+\t  typedef __typeof__((C)) ctype;\t\\\n+\t  typedef ctype **ctypepp;\t\t\\\n+\t  typepp x = 0;\t\t\t\t\\\n+\t  ctypepp y = 0;\t\t\t\\\n+\t  x = y;\t\t\t\t\\\n+\t  y = x;\t\t\t\t\\\n+\t} while (0)\n+\n+/* (T *) if E is zero, (void *) otherwise.  */\n+#define type_if_not(T, E) __typeof__(0 ? (T *)0 : (void *)(E))\n+\n+/* (T *) if E is nonzero, (void *) otherwise.  */\n+#define type_if(T, E) type_if_not(T, !(E))\n+\n+/* Combine pointer types, all but one (void *).  */\n+#define type_comb2(T1, T2) __typeof__(0 ? (T1)0 : (T2)0)\n+#define type_comb3(T1, T2, T3) type_comb2(T1, type_comb2(T2, T3))\n+#define type_comb4(T1, T2, T3, T4)\t\t\t\t\\\n+\ttype_comb2(T1, type_comb2(T2, type_comb2(T3, T4)))\n+#define type_comb6(T1, T2, T3, T4, T5, T6)\t\t\t\t   \\\n+\ttype_comb2(T1,\t\t\t\t\t\t\t   \\\n+\t\t   type_comb2(T2,\t\t\t\t\t   \\\n+\t\t\t      type_comb2(T3,\t\t\t\t   \\\n+\t\t\t\t\t type_comb2(T4,\t\t\t   \\\n+\t\t\t\t\t\t    type_comb2(T5, T6)))))\n+\n+/* (T1 *) if E1, otherwise (T2 *) if E2.  */\n+#define first_of2p(T1, E1, T2, E2) type_comb2(type_if(T1, (E1)),\t   \\\n+\t\t\t\t\t     type_if(T2, (!(E1) && (E2))))\n+/* (T1 *) if E1, otherwise (T2 *) if E2, otherwise (T3 *) if E3.  */\n+#define first_of3p(T1, E1, T2, E2, T3, E3)\t\t\t\\\n+\ttype_comb3(type_if(T1, (E1)),\t\t\t\t\\\n+\t\t   type_if(T2, (!(E1) && (E2))),\t\t\\\n+\t\t   type_if(T3, (!(E1) && !(E2) && (E3))))\n+/* (T1 *) if E1, otherwise (T2 *) if E2, otherwise (T3 *) if E3, otherwise\n+   (T4 *) if E4.  */\n+#define first_of4p(T1, E1, T2, E2, T3, E3, T4, E4)\t\t\t\\\n+\ttype_comb4(type_if(T1, (E1)),\t\t\t\t\t\\\n+\t\t   type_if(T2, (!(E1) && (E2))),\t\t\t\\\n+\t\t   type_if(T3, (!(E1) && !(E2) && (E3))),\t\t\\\n+\t\t   type_if(T4, (!(E1) && !(E2) && !(E3) && (E4))))\n+/* (T1 *) if E1, otherwise (T2 *) if E2, otherwise (T3 *) if E3, otherwise\n+   (T4 *) if E4, otherwise (T5 *) if E5, otherwise (T6 *) if E6.  */\n+#define first_of6p(T1, E1, T2, E2, T3, E3, T4, E4, T5, E5, T6, E6)\t    \\\n+\ttype_comb6(type_if(T1, (E1)),\t\t\t\t\t    \\\n+\t\t   type_if(T2, (!(E1) && (E2))),\t\t\t    \\\n+\t\t   type_if(T3, (!(E1) && !(E2) && (E3))),\t\t    \\\n+\t\t   type_if(T4, (!(E1) && !(E2) && !(E3) && (E4))),\t    \\\n+\t\t   type_if(T5, (!(E1) && !(E2) && !(E3) && !(E4) && (E5))), \\\n+\t\t   type_if(T6, (!(E1) && !(E2) && !(E3)\t\t\t    \\\n+\t\t\t\t&& !(E4) && !(E5) && (E6))))\n+\n+/* Likewise, but return the original type rather than a pointer type.  */\n+#define first_of2(T1, E1, T2, E2)\t\t\t\\\n+\t__typeof__(*((first_of2p(T1, (E1), T2, (E2)))0))\n+#define first_of3(T1, E1, T2, E2, T3, E3)\t\t\t\t\\\n+\t__typeof__(*((first_of3p(T1, (E1), T2, (E2), T3, (E3)))0))\n+#define first_of4(T1, E1, T2, E2, T3, E3, T4, E4)\t\t\t    \\\n+\t__typeof__(*((first_of4p(T1, (E1), T2, (E2), T3, (E3), T4, (E4)))0))\n+#define first_of6(T1, E1, T2, E2, T3, E3, T4, E4, T5, E5, T6, E6)\t\\\n+\t__typeof__(*((first_of6p(T1, (E1), T2, (E2), T3, (E3),\t\t\\\n+\t\t\t\t T4, (E4), T5, (E5), T6, (E6)))0))\n+\n+/* Types of constants according to the C99 rules.  */\n+#define C99_UNSUF_DEC_TYPE(C)\t\t\t\t\\\n+\tfirst_of3(int, (C) <= INT_MAX,\t\t\t\\\n+\t\t  long int, (C) <= LONG_MAX,\t\t\\\n+\t\t  long long int, (C) <= LLONG_MAX)\n+#define C99_UNSUF_OCTHEX_TYPE(C)\t\t\t\t\\\n+\tfirst_of6(int, (C) <= INT_MAX,\t\t\t\t\\\n+\t\t  unsigned int, (C) <= UINT_MAX,\t\t\\\n+\t\t  long int, (C) <= LONG_MAX,\t\t\t\\\n+\t\t  unsigned long int, (C) <= ULONG_MAX,\t\t\\\n+\t\t  long long int, (C) <= LLONG_MAX,\t\t\\\n+\t\t  unsigned long long int, (C) <= ULLONG_MAX)\n+#define C99_SUFu_TYPE(C)\t\t\t\t\t\\\n+\tfirst_of3(unsigned int, (C) <= UINT_MAX,\t\t\\\n+\t\t  unsigned long int, (C) <= ULONG_MAX,\t\t\\\n+\t\t  unsigned long long int, (C) <= ULLONG_MAX)\n+#define C99_SUFl_DEC_TYPE(C)\t\t\t\t\\\n+\tfirst_of2(long int, (C) <= LONG_MAX,\t\t\\\n+\t\t  long long int, (C) <= LLONG_MAX)\n+#define C99_SUFl_OCTHEX_TYPE(C)\t\t\t\t\t\\\n+\tfirst_of4(long int, (C) <= LONG_MAX,\t\t\t\\\n+\t\t  unsigned long int, (C) <= ULONG_MAX,\t\t\\\n+\t\t  long long int, (C) <= LLONG_MAX,\t\t\\\n+\t\t  unsigned long long int, (C) <= ULLONG_MAX)\n+#define C99_SUFul_TYPE(C)\t\t\t\t\t\\\n+\tfirst_of2(unsigned long int, (C) <= ULONG_MAX,\t\t\\\n+\t\t  unsigned long long int, (C) <= ULLONG_MAX)\n+#define C99_SUFll_OCTHEX_TYPE(C)\t\t\t\t\\\n+\tfirst_of2(long long int, (C) <= LLONG_MAX,\t\t\\\n+\t\t  unsigned long long int, (C) <= ULLONG_MAX)\n+\n+/* Checks that constants have correct type.  */\n+#define CHECK_UNSUF_DEC_TYPE(C) ASSERT_CONST_TYPE((C), C99_UNSUF_DEC_TYPE((C)))\n+#define CHECK_UNSUF_OCTHEX_TYPE(C)\t\t\t\t\\\n+\tASSERT_CONST_TYPE((C), C99_UNSUF_OCTHEX_TYPE((C)))\n+#define CHECK_SUFu_TYPE(C) ASSERT_CONST_TYPE((C), C99_SUFu_TYPE((C)))\n+#define CHECK_SUFl_DEC_TYPE(C) ASSERT_CONST_TYPE((C), C99_SUFl_DEC_TYPE((C)))\n+#define CHECK_SUFl_OCTHEX_TYPE(C)\t\t\t\t\\\n+\tASSERT_CONST_TYPE((C), C99_SUFl_OCTHEX_TYPE((C)))\n+#define CHECK_SUFul_TYPE(C) ASSERT_CONST_TYPE((C), C99_SUFul_TYPE((C)))\n+#define CHECK_SUFll_DEC_TYPE(C) ASSERT_CONST_TYPE((C), long long int)\n+#define CHECK_SUFll_OCTHEX_TYPE(C)\t\t\t\t\\\n+\tASSERT_CONST_TYPE((C), C99_SUFll_OCTHEX_TYPE((C)))\n+#define CHECK_SUFull_TYPE(C) ASSERT_CONST_TYPE((C), unsigned long long int)\n+\n+/* Check a decimal value, with all suffixes.  */\n+#define CHECK_DEC_CONST(C)\t\t\t\\\n+\tCHECK_UNSUF_DEC_TYPE(C);\t\t\\\n+\tCHECK_SUFu_TYPE(C##u);\t\t\t\\\n+\tCHECK_SUFu_TYPE(C##U);\t\t\t\\\n+\tCHECK_SUFl_DEC_TYPE(C##l);\t\t\\\n+\tCHECK_SUFl_DEC_TYPE(C##L);\t\t\\\n+\tCHECK_SUFul_TYPE(C##ul);\t\t\\\n+\tCHECK_SUFul_TYPE(C##uL);\t\t\\\n+\tCHECK_SUFul_TYPE(C##Ul);\t\t\\\n+\tCHECK_SUFul_TYPE(C##UL);\t\t\\\n+\tCHECK_SUFll_DEC_TYPE(C##ll);\t\t\\\n+\tCHECK_SUFll_DEC_TYPE(C##LL);\t\t\\\n+\tCHECK_SUFull_TYPE(C##ull);\t\t\\\n+\tCHECK_SUFull_TYPE(C##uLL);\t\t\\\n+\tCHECK_SUFull_TYPE(C##Ull);\t\t\\\n+\tCHECK_SUFull_TYPE(C##ULL);\n+\n+/* Check an octal or hexadecimal value, with all suffixes.  */\n+#define CHECK_OCTHEX_CONST(C)\t\t\t\\\n+\tCHECK_UNSUF_OCTHEX_TYPE(C);\t\t\\\n+\tCHECK_SUFu_TYPE(C##u);\t\t\t\\\n+\tCHECK_SUFu_TYPE(C##U);\t\t\t\\\n+\tCHECK_SUFl_OCTHEX_TYPE(C##l);\t\t\\\n+\tCHECK_SUFl_OCTHEX_TYPE(C##L);\t\t\\\n+\tCHECK_SUFul_TYPE(C##ul);\t\t\\\n+\tCHECK_SUFul_TYPE(C##uL);\t\t\\\n+\tCHECK_SUFul_TYPE(C##Ul);\t\t\\\n+\tCHECK_SUFul_TYPE(C##UL);\t\t\\\n+\tCHECK_SUFll_OCTHEX_TYPE(C##ll);\t\t\\\n+\tCHECK_SUFll_OCTHEX_TYPE(C##LL);\t\t\\\n+\tCHECK_SUFull_TYPE(C##ull);\t\t\\\n+\tCHECK_SUFull_TYPE(C##uLL);\t\t\\\n+\tCHECK_SUFull_TYPE(C##Ull);\t\t\\\n+\tCHECK_SUFull_TYPE(C##ULL);\n+\n+#define CHECK_OCT_CONST(C) CHECK_OCTHEX_CONST(C)\n+#define CHECK_HEX_CONST(C)\t\t\t\\\n+\tCHECK_OCTHEX_CONST(0x##C);\t\t\\\n+\tCHECK_OCTHEX_CONST(0X##C);\n+\n+/* True iff \"long long\" is at least B bits.  This presumes that (B-2)/3 is at\n+   most 63.  */\n+#define LLONG_AT_LEAST(B)\t\t\t\\\n+\t(LLONG_MAX >> ((B)-2)/3 >> ((B)-2)/3\t\\\n+\t >> ((B)-2 - ((B)-2)/3 - ((B)-2)/3))\n+\n+#define LLONG_HAS_BITS(B) (LLONG_AT_LEAST((B)) && !LLONG_AT_LEAST((B) + 1))\n+\n+void\n+foo (void)\n+{\n+  /* Decimal.  */\n+  /* Check all 2^n and 2^n - 1 up to 2^71 - 1.  */\n+  CHECK_DEC_CONST(1);\n+  CHECK_DEC_CONST(2);\n+  CHECK_DEC_CONST(3);\n+  CHECK_DEC_CONST(4);\n+  CHECK_DEC_CONST(7);\n+  CHECK_DEC_CONST(8);\n+  CHECK_DEC_CONST(15);\n+  CHECK_DEC_CONST(16);\n+  CHECK_DEC_CONST(31);\n+  CHECK_DEC_CONST(32);\n+  CHECK_DEC_CONST(63);\n+  CHECK_DEC_CONST(64);\n+  CHECK_DEC_CONST(127);\n+  CHECK_DEC_CONST(128);\n+  CHECK_DEC_CONST(255);\n+  CHECK_DEC_CONST(256);\n+  CHECK_DEC_CONST(511);\n+  CHECK_DEC_CONST(512);\n+  CHECK_DEC_CONST(1023);\n+  CHECK_DEC_CONST(1024);\n+  CHECK_DEC_CONST(2047);\n+  CHECK_DEC_CONST(2048);\n+  CHECK_DEC_CONST(4095);\n+  CHECK_DEC_CONST(4096);\n+  CHECK_DEC_CONST(8191);\n+  CHECK_DEC_CONST(8192);\n+  CHECK_DEC_CONST(16383);\n+  CHECK_DEC_CONST(16384);\n+  CHECK_DEC_CONST(32767);\n+  CHECK_DEC_CONST(32768);\n+  CHECK_DEC_CONST(65535);\n+  CHECK_DEC_CONST(65536);\n+  CHECK_DEC_CONST(131071);\n+  CHECK_DEC_CONST(131072);\n+  CHECK_DEC_CONST(262143);\n+  CHECK_DEC_CONST(262144);\n+  CHECK_DEC_CONST(524287);\n+  CHECK_DEC_CONST(524288);\n+  CHECK_DEC_CONST(1048575);\n+  CHECK_DEC_CONST(1048576);\n+  CHECK_DEC_CONST(2097151);\n+  CHECK_DEC_CONST(2097152);\n+  CHECK_DEC_CONST(4194303);\n+  CHECK_DEC_CONST(4194304);\n+  CHECK_DEC_CONST(8388607);\n+  CHECK_DEC_CONST(8388608);\n+  CHECK_DEC_CONST(16777215);\n+  CHECK_DEC_CONST(16777216);\n+  CHECK_DEC_CONST(33554431);\n+  CHECK_DEC_CONST(33554432);\n+  CHECK_DEC_CONST(67108863);\n+  CHECK_DEC_CONST(67108864);\n+  CHECK_DEC_CONST(134217727);\n+  CHECK_DEC_CONST(134217728);\n+  CHECK_DEC_CONST(268435455);\n+  CHECK_DEC_CONST(268435456);\n+  CHECK_DEC_CONST(536870911);\n+  CHECK_DEC_CONST(536870912);\n+  CHECK_DEC_CONST(1073741823);\n+  CHECK_DEC_CONST(1073741824);\n+  CHECK_DEC_CONST(2147483647);\n+  CHECK_DEC_CONST(2147483648);\n+  CHECK_DEC_CONST(4294967295);\n+  CHECK_DEC_CONST(4294967296);\n+  CHECK_DEC_CONST(8589934591);\n+  CHECK_DEC_CONST(8589934592);\n+  CHECK_DEC_CONST(17179869183);\n+  CHECK_DEC_CONST(17179869184);\n+  CHECK_DEC_CONST(34359738367);\n+  CHECK_DEC_CONST(34359738368);\n+  CHECK_DEC_CONST(68719476735);\n+  CHECK_DEC_CONST(68719476736);\n+  CHECK_DEC_CONST(137438953471);\n+  CHECK_DEC_CONST(137438953472);\n+  CHECK_DEC_CONST(274877906943);\n+  CHECK_DEC_CONST(274877906944);\n+  CHECK_DEC_CONST(549755813887);\n+  CHECK_DEC_CONST(549755813888);\n+  CHECK_DEC_CONST(1099511627775);\n+  CHECK_DEC_CONST(1099511627776);\n+  CHECK_DEC_CONST(2199023255551);\n+  CHECK_DEC_CONST(2199023255552);\n+  CHECK_DEC_CONST(4398046511103);\n+  CHECK_DEC_CONST(4398046511104);\n+  CHECK_DEC_CONST(8796093022207);\n+  CHECK_DEC_CONST(8796093022208);\n+  CHECK_DEC_CONST(17592186044415);\n+  CHECK_DEC_CONST(17592186044416);\n+  CHECK_DEC_CONST(35184372088831);\n+  CHECK_DEC_CONST(35184372088832);\n+  CHECK_DEC_CONST(70368744177663);\n+  CHECK_DEC_CONST(70368744177664);\n+  CHECK_DEC_CONST(140737488355327);\n+  CHECK_DEC_CONST(140737488355328);\n+  CHECK_DEC_CONST(281474976710655);\n+  CHECK_DEC_CONST(281474976710656);\n+  CHECK_DEC_CONST(562949953421311);\n+  CHECK_DEC_CONST(562949953421312);\n+  CHECK_DEC_CONST(1125899906842623);\n+  CHECK_DEC_CONST(1125899906842624);\n+  CHECK_DEC_CONST(2251799813685247);\n+  CHECK_DEC_CONST(2251799813685248);\n+  CHECK_DEC_CONST(4503599627370495);\n+  CHECK_DEC_CONST(4503599627370496);\n+  CHECK_DEC_CONST(9007199254740991);\n+  CHECK_DEC_CONST(9007199254740992);\n+  CHECK_DEC_CONST(18014398509481983);\n+  CHECK_DEC_CONST(18014398509481984);\n+  CHECK_DEC_CONST(36028797018963967);\n+  CHECK_DEC_CONST(36028797018963968);\n+  CHECK_DEC_CONST(72057594037927935);\n+  CHECK_DEC_CONST(72057594037927936);\n+  CHECK_DEC_CONST(144115188075855871);\n+  CHECK_DEC_CONST(144115188075855872);\n+  CHECK_DEC_CONST(288230376151711743);\n+  CHECK_DEC_CONST(288230376151711744);\n+  CHECK_DEC_CONST(576460752303423487);\n+  CHECK_DEC_CONST(576460752303423488);\n+  CHECK_DEC_CONST(1152921504606846975);\n+  CHECK_DEC_CONST(1152921504606846976);\n+  CHECK_DEC_CONST(2305843009213693951);\n+  CHECK_DEC_CONST(2305843009213693952);\n+  CHECK_DEC_CONST(4611686018427387903);\n+  CHECK_DEC_CONST(4611686018427387904);\n+  CHECK_DEC_CONST(9223372036854775807);\n+#if LLONG_AT_LEAST(65)\n+  CHECK_DEC_CONST(9223372036854775808);\n+  CHECK_DEC_CONST(18446744073709551615);\n+#endif\n+#if LLONG_AT_LEAST(66)\n+  CHECK_DEC_CONST(18446744073709551616);\n+  CHECK_DEC_CONST(36893488147419103231);\n+#endif\n+#if LLONG_AT_LEAST(67)\n+  CHECK_DEC_CONST(36893488147419103232);\n+  CHECK_DEC_CONST(73786976294838206463);\n+#endif\n+#if LLONG_AT_LEAST(68)\n+  CHECK_DEC_CONST(73786976294838206464);\n+  CHECK_DEC_CONST(147573952589676412927);\n+#endif\n+#if LLONG_AT_LEAST(69)\n+  CHECK_DEC_CONST(147573952589676412928);\n+  CHECK_DEC_CONST(295147905179352825855);\n+#endif\n+#if LLONG_AT_LEAST(70)\n+  CHECK_DEC_CONST(295147905179352825856);\n+  CHECK_DEC_CONST(590295810358705651711);\n+#endif\n+#if LLONG_AT_LEAST(71)\n+  CHECK_DEC_CONST(590295810358705651712);\n+  CHECK_DEC_CONST(1180591620717411303423);\n+#endif\n+#if LLONG_AT_LEAST(72)\n+  CHECK_DEC_CONST(1180591620717411303424);\n+  CHECK_DEC_CONST(2361183241434822606847);\n+#endif\n+  /* Octal and hexadecimal.  */\n+  /* Check all 2^n and 2^n - 1 up to 2^72 - 1.  */\n+  CHECK_OCT_CONST(0);\n+  CHECK_HEX_CONST(0);\n+  CHECK_OCT_CONST(01);\n+  CHECK_HEX_CONST(1);\n+  CHECK_OCT_CONST(02);\n+  CHECK_HEX_CONST(2);\n+  CHECK_OCT_CONST(03);\n+  CHECK_HEX_CONST(3);\n+  CHECK_OCT_CONST(04);\n+  CHECK_HEX_CONST(4);\n+  CHECK_OCT_CONST(07);\n+  CHECK_HEX_CONST(7);\n+  CHECK_OCT_CONST(010);\n+  CHECK_HEX_CONST(8);\n+  CHECK_OCT_CONST(017);\n+  CHECK_HEX_CONST(f);\n+  CHECK_OCT_CONST(020);\n+  CHECK_HEX_CONST(10);\n+  CHECK_OCT_CONST(037);\n+  CHECK_HEX_CONST(1f);\n+  CHECK_OCT_CONST(040);\n+  CHECK_HEX_CONST(20);\n+  CHECK_OCT_CONST(077);\n+  CHECK_HEX_CONST(3f);\n+  CHECK_OCT_CONST(0100);\n+  CHECK_HEX_CONST(40);\n+  CHECK_OCT_CONST(0177);\n+  CHECK_HEX_CONST(7f);\n+  CHECK_OCT_CONST(0200);\n+  CHECK_HEX_CONST(80);\n+  CHECK_OCT_CONST(0377);\n+  CHECK_HEX_CONST(ff);\n+  CHECK_OCT_CONST(0400);\n+  CHECK_HEX_CONST(100);\n+  CHECK_OCT_CONST(0777);\n+  CHECK_HEX_CONST(1ff);\n+  CHECK_OCT_CONST(01000);\n+  CHECK_HEX_CONST(200);\n+  CHECK_OCT_CONST(01777);\n+  CHECK_HEX_CONST(3ff);\n+  CHECK_OCT_CONST(02000);\n+  CHECK_HEX_CONST(400);\n+  CHECK_OCT_CONST(03777);\n+  CHECK_HEX_CONST(7ff);\n+  CHECK_OCT_CONST(04000);\n+  CHECK_HEX_CONST(800);\n+  CHECK_OCT_CONST(07777);\n+  CHECK_HEX_CONST(fff);\n+  CHECK_OCT_CONST(010000);\n+  CHECK_HEX_CONST(1000);\n+  CHECK_OCT_CONST(017777);\n+  CHECK_HEX_CONST(1fff);\n+  CHECK_OCT_CONST(020000);\n+  CHECK_HEX_CONST(2000);\n+  CHECK_OCT_CONST(037777);\n+  CHECK_HEX_CONST(3fff);\n+  CHECK_OCT_CONST(040000);\n+  CHECK_HEX_CONST(4000);\n+  CHECK_OCT_CONST(077777);\n+  CHECK_HEX_CONST(7fff);\n+  CHECK_OCT_CONST(0100000);\n+  CHECK_HEX_CONST(8000);\n+  CHECK_OCT_CONST(0177777);\n+  CHECK_HEX_CONST(ffff);\n+  CHECK_OCT_CONST(0200000);\n+  CHECK_HEX_CONST(10000);\n+  CHECK_OCT_CONST(0377777);\n+  CHECK_HEX_CONST(1ffff);\n+  CHECK_OCT_CONST(0400000);\n+  CHECK_HEX_CONST(20000);\n+  CHECK_OCT_CONST(0777777);\n+  CHECK_HEX_CONST(3ffff);\n+  CHECK_OCT_CONST(01000000);\n+  CHECK_HEX_CONST(40000);\n+  CHECK_OCT_CONST(01777777);\n+  CHECK_HEX_CONST(7ffff);\n+  CHECK_OCT_CONST(02000000);\n+  CHECK_HEX_CONST(80000);\n+  CHECK_OCT_CONST(03777777);\n+  CHECK_HEX_CONST(fffff);\n+  CHECK_OCT_CONST(04000000);\n+  CHECK_HEX_CONST(100000);\n+  CHECK_OCT_CONST(07777777);\n+  CHECK_HEX_CONST(1fffff);\n+  CHECK_OCT_CONST(010000000);\n+  CHECK_HEX_CONST(200000);\n+  CHECK_OCT_CONST(017777777);\n+  CHECK_HEX_CONST(3fffff);\n+  CHECK_OCT_CONST(020000000);\n+  CHECK_HEX_CONST(400000);\n+  CHECK_OCT_CONST(037777777);\n+  CHECK_HEX_CONST(7fffff);\n+  CHECK_OCT_CONST(040000000);\n+  CHECK_HEX_CONST(800000);\n+  CHECK_OCT_CONST(077777777);\n+  CHECK_HEX_CONST(ffffff);\n+  CHECK_OCT_CONST(0100000000);\n+  CHECK_HEX_CONST(1000000);\n+  CHECK_OCT_CONST(0177777777);\n+  CHECK_HEX_CONST(1ffffff);\n+  CHECK_OCT_CONST(0200000000);\n+  CHECK_HEX_CONST(2000000);\n+  CHECK_OCT_CONST(0377777777);\n+  CHECK_HEX_CONST(3ffffff);\n+  CHECK_OCT_CONST(0400000000);\n+  CHECK_HEX_CONST(4000000);\n+  CHECK_OCT_CONST(0777777777);\n+  CHECK_HEX_CONST(7ffffff);\n+  CHECK_OCT_CONST(01000000000);\n+  CHECK_HEX_CONST(8000000);\n+  CHECK_OCT_CONST(01777777777);\n+  CHECK_HEX_CONST(fffffff);\n+  CHECK_OCT_CONST(02000000000);\n+  CHECK_HEX_CONST(10000000);\n+  CHECK_OCT_CONST(03777777777);\n+  CHECK_HEX_CONST(1fffffff);\n+  CHECK_OCT_CONST(04000000000);\n+  CHECK_HEX_CONST(20000000);\n+  CHECK_OCT_CONST(07777777777);\n+  CHECK_HEX_CONST(3fffffff);\n+  CHECK_OCT_CONST(010000000000);\n+  CHECK_HEX_CONST(40000000);\n+  CHECK_OCT_CONST(017777777777);\n+  CHECK_HEX_CONST(7fffffff);\n+  CHECK_OCT_CONST(020000000000);\n+  CHECK_HEX_CONST(80000000);\n+  CHECK_OCT_CONST(037777777777);\n+  CHECK_HEX_CONST(ffffffff);\n+  CHECK_OCT_CONST(040000000000);\n+  CHECK_HEX_CONST(100000000);\n+  CHECK_OCT_CONST(077777777777);\n+  CHECK_HEX_CONST(1ffffffff);\n+  CHECK_OCT_CONST(0100000000000);\n+  CHECK_HEX_CONST(200000000);\n+  CHECK_OCT_CONST(0177777777777);\n+  CHECK_HEX_CONST(3ffffffff);\n+  CHECK_OCT_CONST(0200000000000);\n+  CHECK_HEX_CONST(400000000);\n+  CHECK_OCT_CONST(0377777777777);\n+  CHECK_HEX_CONST(7ffffffff);\n+  CHECK_OCT_CONST(0400000000000);\n+  CHECK_HEX_CONST(800000000);\n+  CHECK_OCT_CONST(0777777777777);\n+  CHECK_HEX_CONST(fffffffff);\n+  CHECK_OCT_CONST(01000000000000);\n+  CHECK_HEX_CONST(1000000000);\n+  CHECK_OCT_CONST(01777777777777);\n+  CHECK_HEX_CONST(1fffffffff);\n+  CHECK_OCT_CONST(02000000000000);\n+  CHECK_HEX_CONST(2000000000);\n+  CHECK_OCT_CONST(03777777777777);\n+  CHECK_HEX_CONST(3fffffffff);\n+  CHECK_OCT_CONST(04000000000000);\n+  CHECK_HEX_CONST(4000000000);\n+  CHECK_OCT_CONST(07777777777777);\n+  CHECK_HEX_CONST(7fffffffff);\n+  CHECK_OCT_CONST(010000000000000);\n+  CHECK_HEX_CONST(8000000000);\n+  CHECK_OCT_CONST(017777777777777);\n+  CHECK_HEX_CONST(ffffffffff);\n+  CHECK_OCT_CONST(020000000000000);\n+  CHECK_HEX_CONST(10000000000);\n+  CHECK_OCT_CONST(037777777777777);\n+  CHECK_HEX_CONST(1ffffffffff);\n+  CHECK_OCT_CONST(040000000000000);\n+  CHECK_HEX_CONST(20000000000);\n+  CHECK_OCT_CONST(077777777777777);\n+  CHECK_HEX_CONST(3ffffffffff);\n+  CHECK_OCT_CONST(0100000000000000);\n+  CHECK_HEX_CONST(40000000000);\n+  CHECK_OCT_CONST(0177777777777777);\n+  CHECK_HEX_CONST(7ffffffffff);\n+  CHECK_OCT_CONST(0200000000000000);\n+  CHECK_HEX_CONST(80000000000);\n+  CHECK_OCT_CONST(0377777777777777);\n+  CHECK_HEX_CONST(fffffffffff);\n+  CHECK_OCT_CONST(0400000000000000);\n+  CHECK_HEX_CONST(100000000000);\n+  CHECK_OCT_CONST(0777777777777777);\n+  CHECK_HEX_CONST(1fffffffffff);\n+  CHECK_OCT_CONST(01000000000000000);\n+  CHECK_HEX_CONST(200000000000);\n+  CHECK_OCT_CONST(01777777777777777);\n+  CHECK_HEX_CONST(3fffffffffff);\n+  CHECK_OCT_CONST(02000000000000000);\n+  CHECK_HEX_CONST(400000000000);\n+  CHECK_OCT_CONST(03777777777777777);\n+  CHECK_HEX_CONST(7fffffffffff);\n+  CHECK_OCT_CONST(04000000000000000);\n+  CHECK_HEX_CONST(800000000000);\n+  CHECK_OCT_CONST(07777777777777777);\n+  CHECK_HEX_CONST(ffffffffffff);\n+  CHECK_OCT_CONST(010000000000000000);\n+  CHECK_HEX_CONST(1000000000000);\n+  CHECK_OCT_CONST(017777777777777777);\n+  CHECK_HEX_CONST(1ffffffffffff);\n+  CHECK_OCT_CONST(020000000000000000);\n+  CHECK_HEX_CONST(2000000000000);\n+  CHECK_OCT_CONST(037777777777777777);\n+  CHECK_HEX_CONST(3ffffffffffff);\n+  CHECK_OCT_CONST(040000000000000000);\n+  CHECK_HEX_CONST(4000000000000);\n+  CHECK_OCT_CONST(077777777777777777);\n+  CHECK_HEX_CONST(7ffffffffffff);\n+  CHECK_OCT_CONST(0100000000000000000);\n+  CHECK_HEX_CONST(8000000000000);\n+  CHECK_OCT_CONST(0177777777777777777);\n+  CHECK_HEX_CONST(fffffffffffff);\n+  CHECK_OCT_CONST(0200000000000000000);\n+  CHECK_HEX_CONST(10000000000000);\n+  CHECK_OCT_CONST(0377777777777777777);\n+  CHECK_HEX_CONST(1fffffffffffff);\n+  CHECK_OCT_CONST(0400000000000000000);\n+  CHECK_HEX_CONST(20000000000000);\n+  CHECK_OCT_CONST(0777777777777777777);\n+  CHECK_HEX_CONST(3fffffffffffff);\n+  CHECK_OCT_CONST(01000000000000000000);\n+  CHECK_HEX_CONST(40000000000000);\n+  CHECK_OCT_CONST(01777777777777777777);\n+  CHECK_HEX_CONST(7fffffffffffff);\n+  CHECK_OCT_CONST(02000000000000000000);\n+  CHECK_HEX_CONST(80000000000000);\n+  CHECK_OCT_CONST(03777777777777777777);\n+  CHECK_HEX_CONST(ffffffffffffff);\n+  CHECK_OCT_CONST(04000000000000000000);\n+  CHECK_HEX_CONST(100000000000000);\n+  CHECK_OCT_CONST(07777777777777777777);\n+  CHECK_HEX_CONST(1ffffffffffffff);\n+  CHECK_OCT_CONST(010000000000000000000);\n+  CHECK_HEX_CONST(200000000000000);\n+  CHECK_OCT_CONST(017777777777777777777);\n+  CHECK_HEX_CONST(3ffffffffffffff);\n+  CHECK_OCT_CONST(020000000000000000000);\n+  CHECK_HEX_CONST(400000000000000);\n+  CHECK_OCT_CONST(037777777777777777777);\n+  CHECK_HEX_CONST(7ffffffffffffff);\n+  CHECK_OCT_CONST(040000000000000000000);\n+  CHECK_HEX_CONST(800000000000000);\n+  CHECK_OCT_CONST(077777777777777777777);\n+  CHECK_HEX_CONST(fffffffffffffff);\n+  CHECK_OCT_CONST(0100000000000000000000);\n+  CHECK_HEX_CONST(1000000000000000);\n+  CHECK_OCT_CONST(0177777777777777777777);\n+  CHECK_HEX_CONST(1fffffffffffffff);\n+  CHECK_OCT_CONST(0200000000000000000000);\n+  CHECK_HEX_CONST(2000000000000000);\n+  CHECK_OCT_CONST(0377777777777777777777);\n+  CHECK_HEX_CONST(3fffffffffffffff);\n+  CHECK_OCT_CONST(0400000000000000000000);\n+  CHECK_HEX_CONST(4000000000000000);\n+  CHECK_OCT_CONST(0777777777777777777777);\n+  CHECK_HEX_CONST(7fffffffffffffff);\n+  CHECK_OCT_CONST(01000000000000000000000);\n+  CHECK_HEX_CONST(8000000000000000);\n+  CHECK_OCT_CONST(01777777777777777777777);\n+  CHECK_HEX_CONST(ffffffffffffffff);\n+#if LLONG_AT_LEAST(65)\n+  CHECK_OCT_CONST(02000000000000000000000);\n+  CHECK_HEX_CONST(10000000000000000);\n+  CHECK_OCT_CONST(03777777777777777777777);\n+  CHECK_HEX_CONST(1ffffffffffffffff);\n+#endif\n+#if LLONG_AT_LEAST(66)\n+  CHECK_OCT_CONST(04000000000000000000000);\n+  CHECK_HEX_CONST(20000000000000000);\n+  CHECK_OCT_CONST(07777777777777777777777);\n+  CHECK_HEX_CONST(3ffffffffffffffff);\n+#endif\n+#if LLONG_AT_LEAST(67)\n+  CHECK_OCT_CONST(010000000000000000000000);\n+  CHECK_HEX_CONST(40000000000000000);\n+  CHECK_OCT_CONST(017777777777777777777777);\n+  CHECK_HEX_CONST(7ffffffffffffffff);\n+#endif\n+#if LLONG_AT_LEAST(68)\n+  CHECK_OCT_CONST(020000000000000000000000);\n+  CHECK_HEX_CONST(80000000000000000);\n+  CHECK_OCT_CONST(037777777777777777777777);\n+  CHECK_HEX_CONST(fffffffffffffffff);\n+#endif\n+#if LLONG_AT_LEAST(69)\n+  CHECK_OCT_CONST(040000000000000000000000);\n+  CHECK_HEX_CONST(100000000000000000);\n+  CHECK_OCT_CONST(077777777777777777777777);\n+  CHECK_HEX_CONST(1fffffffffffffffff);\n+#endif\n+#if LLONG_AT_LEAST(70)\n+  CHECK_OCT_CONST(0100000000000000000000000);\n+  CHECK_HEX_CONST(200000000000000000);\n+  CHECK_OCT_CONST(0177777777777777777777777);\n+  CHECK_HEX_CONST(3fffffffffffffffff);\n+#endif\n+#if LLONG_AT_LEAST(71)\n+  CHECK_OCT_CONST(0200000000000000000000000);\n+  CHECK_HEX_CONST(400000000000000000);\n+  CHECK_OCT_CONST(0377777777777777777777777);\n+  CHECK_HEX_CONST(7fffffffffffffffff);\n+#endif\n+#if LLONG_AT_LEAST(72)\n+  CHECK_OCT_CONST(0400000000000000000000000);\n+  CHECK_HEX_CONST(800000000000000000);\n+  CHECK_OCT_CONST(0777777777777777777777777);\n+  CHECK_HEX_CONST(ffffffffffffffffff);\n+#endif\n+}"}]}