{"sha": "e73735563717fa9dfaf10dfa7dfe8242026d6c67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTczNzM1NTYzNzE3ZmE5ZGZhZjEwZGZhN2RmZTgyNDIwMjZkNmM2Nw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-01T23:27:04Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-01T23:27:04Z"}, "message": "(make_extraction): Don't make an extraction that has the potential of\ncrossing a boundary.\n\nFrom-SVN: r6462", "tree": {"sha": "ebc319a8d7896d8d57f672b025732d2282963a1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebc319a8d7896d8d57f672b025732d2282963a1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e73735563717fa9dfaf10dfa7dfe8242026d6c67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e73735563717fa9dfaf10dfa7dfe8242026d6c67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e73735563717fa9dfaf10dfa7dfe8242026d6c67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e73735563717fa9dfaf10dfa7dfe8242026d6c67/comments", "author": null, "committer": null, "parents": [{"sha": "08d95f9128a3edc487281033732341b2d95552be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08d95f9128a3edc487281033732341b2d95552be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08d95f9128a3edc487281033732341b2d95552be"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "25f029702380f324e49bd17dcc66f07654ac0c33", "filename": "gcc/combine.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73735563717fa9dfaf10dfa7dfe8242026d6c67/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73735563717fa9dfaf10dfa7dfe8242026d6c67/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=e73735563717fa9dfaf10dfa7dfe8242026d6c67", "patch": "@@ -5120,6 +5120,16 @@ make_extraction (mode, inner, pos, pos_rtx, len,\n       && ! in_compare && ! spans_byte && unsignedp)\n     return 0;\n \n+  /* Unless we are allowed to span bytes, reject this if we would be\n+     spanning bytes or if the position is not a constant and the length\n+     is not 1.  In all other cases, we would only be going outside\n+     out object in cases when an original shift would have been\n+     undefined.  */\n+  if (! spans_byte\n+      && ((pos_rtx == 0 && pos + len > GET_MODE_BITSIZE (is_mode))\n+\t  || (pos_rtx != 0 && len != 1)))\n+    return 0;\n+\n   /* Get the mode to use should INNER be a MEM, the mode for the position,\n      and the mode for the result.  */\n #ifdef HAVE_insv"}]}