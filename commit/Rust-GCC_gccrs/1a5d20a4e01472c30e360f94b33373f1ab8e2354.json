{"sha": "1a5d20a4e01472c30e360f94b33373f1ab8e2354", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE1ZDIwYTRlMDE0NzJjMzBlMzYwZjk0YjMzMzczZjFhYjhlMjM1NA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-07-14T14:53:30Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-07-14T14:53:30Z"}, "message": "re PR tree-optimization/49651 (nested lambdas and -O3 produced incorrect integer variable increments)\n\n2011-07-14  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/49651\n\t* tree-ssa-structalias.c (get_constraint_for_1): Properly\n\thandle dereferences with subvariables.\n\n\t* gcc.dg/torture/pr49651.c: New testcase.\n\nFrom-SVN: r176274", "tree": {"sha": "334b0e2f5c2ac0f46d98e0984a48323ca8f7287f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/334b0e2f5c2ac0f46d98e0984a48323ca8f7287f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a5d20a4e01472c30e360f94b33373f1ab8e2354", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a5d20a4e01472c30e360f94b33373f1ab8e2354", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a5d20a4e01472c30e360f94b33373f1ab8e2354", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a5d20a4e01472c30e360f94b33373f1ab8e2354/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5fbcc0ed20ecdfd980106ac22607c5baed60d234", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fbcc0ed20ecdfd980106ac22607c5baed60d234", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fbcc0ed20ecdfd980106ac22607c5baed60d234"}], "stats": {"total": 55, "additions": 53, "deletions": 2}, "files": [{"sha": "07b9252be5da05ac9bd98ab46ff86ba3082519e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5d20a4e01472c30e360f94b33373f1ab8e2354/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5d20a4e01472c30e360f94b33373f1ab8e2354/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a5d20a4e01472c30e360f94b33373f1ab8e2354", "patch": "@@ -1,3 +1,9 @@\n+2011-07-14  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/49651\n+\t* tree-ssa-structalias.c (get_constraint_for_1): Properly\n+\thandle dereferences with subvariables.\n+\n 2011-07-14  Richard Guenther  <rguenther@suse.de>\n \n \t* gimple-fold.c (fold_gimple_assign): Remove operand swapping."}, {"sha": "32b2a0aa4a6654b0d5f5239d8dc528d02a3e8413", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5d20a4e01472c30e360f94b33373f1ab8e2354/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5d20a4e01472c30e360f94b33373f1ab8e2354/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1a5d20a4e01472c30e360f94b33373f1ab8e2354", "patch": "@@ -1,3 +1,8 @@\n+2011-07-14  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/49651\n+\t* gcc.dg/torture/pr49651.c: New testcase.\n+\n 2011-07-14  Georg-Johann Lay  <avr@gjlay.de>\n \t\n \tPR target/43746"}, {"sha": "c58fe943c83103bca0d8cbd5e0d285fc75bce872", "filename": "gcc/testsuite/gcc.dg/torture/pr49651.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5d20a4e01472c30e360f94b33373f1ab8e2354/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr49651.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5d20a4e01472c30e360f94b33373f1ab8e2354/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr49651.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr49651.c?ref=1a5d20a4e01472c30e360f94b33373f1ab8e2354", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+\n+struct X {\n+    int *p;\n+    int *q;\n+};\n+\n+void __attribute__((noinline, noclone))\n+foo (struct X x) { *x.q = 0; }\n+\n+volatile int what;\n+struct X y;\n+\n+int main()\n+{\n+  int i, j;\n+  struct X x, *p;\n+  x.p = &i;\n+  x.q = &j;\n+  if (what)\n+    p = &y;\n+  else\n+    p = &x;\n+  j = 1;\n+  foo (*p);\n+  if (j != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "82f39c2fcada3918df400beeac013cec1637a7d3", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5d20a4e01472c30e360f94b33373f1ab8e2354/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5d20a4e01472c30e360f94b33373f1ab8e2354/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=1a5d20a4e01472c30e360f94b33373f1ab8e2354", "patch": "@@ -3258,9 +3258,18 @@ get_constraint_for_1 (tree t, VEC (ce_s, heap) **results, bool address_p,\n \n \t      /* If we are not taking the address then make sure to process\n \t\t all subvariables we might access.  */\n+\t      if (address_p)\n+\t\treturn;\n+\n \t      cs = *VEC_last (ce_s, *results);\n-\t      if (address_p\n-\t\t  || cs.type != SCALAR)\n+\t      if (cs.type == DEREF)\n+\t\t{\n+\t\t  /* For dereferences this means we have to defer it\n+\t\t     to solving time.  */\n+\t\t  VEC_last (ce_s, *results)->offset = UNKNOWN_OFFSET;\n+\t\t  return;\n+\t\t}\n+\t      if (cs.type != SCALAR)\n \t\treturn;\n \n \t      vi = get_varinfo (cs.var);"}]}