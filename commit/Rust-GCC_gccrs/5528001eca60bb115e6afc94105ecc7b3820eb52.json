{"sha": "5528001eca60bb115e6afc94105ecc7b3820eb52", "node_id": "C_kwDOANBUbNoAKDU1MjgwMDFlY2E2MGJiMTE1ZTZhZmM5NDEwNWVjYzdiMzgyMGViNTI", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-04-19T11:40:39Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-04-19T11:43:21Z"}, "message": "Fix ICE during HIR lowering of ExprWithBlock MatchExpr\n\nWhen we are lowering blocks using the visitor pattern we must use the\nBaseClass of ExprWithBlock to abstract away the notion that this expr\nhas a block such that we can handle cases like a block expr vs expressions\nwith a block. This makes the usage of hir lowering of match expressions to\nbe recursive, if we had more fine grained visitors in the AST we could fix\nthese types of problems with compile time enforced interfaces.\n\nFixes #858", "tree": {"sha": "439c89e149353c1e6c912ec93c06d3a2c47c6136", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/439c89e149353c1e6c912ec93c06d3a2c47c6136"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5528001eca60bb115e6afc94105ecc7b3820eb52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5528001eca60bb115e6afc94105ecc7b3820eb52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5528001eca60bb115e6afc94105ecc7b3820eb52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5528001eca60bb115e6afc94105ecc7b3820eb52/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d17e0aa7695ddb383e0a4fc43185e2ab42c81703", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d17e0aa7695ddb383e0a4fc43185e2ab42c81703", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d17e0aa7695ddb383e0a4fc43185e2ab42c81703"}], "stats": {"total": 132, "additions": 86, "deletions": 46}, "files": [{"sha": "512f4709c6dab2adc39699b1f44b760881805d4e", "filename": "gcc/rust/hir/rust-ast-lower-block.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5528001eca60bb115e6afc94105ecc7b3820eb52/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5528001eca60bb115e6afc94105ecc7b3820eb52/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h?ref=5528001eca60bb115e6afc94105ecc7b3820eb52", "patch": "@@ -191,6 +191,8 @@ class ASTLoweringExprWithBlock : public ASTLoweringBase\n \n   void visit (AST::WhileLoopExpr &expr) override;\n \n+  void visit (AST::MatchExpr &expr) override;\n+\n private:\n   ASTLoweringExprWithBlock ()\n     : ASTLoweringBase (), translated (nullptr), terminated (false)"}, {"sha": "022002e18e204174bcf1cbe5cce30ba325a7005e", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 1, "deletions": 46, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5528001eca60bb115e6afc94105ecc7b3820eb52/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5528001eca60bb115e6afc94105ecc7b3820eb52/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=5528001eca60bb115e6afc94105ecc7b3820eb52", "patch": "@@ -674,52 +674,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n \n   void visit (AST::MatchExpr &expr) override\n   {\n-    HIR::Expr *branch_value\n-      = ASTLoweringExpr::translate (expr.get_scrutinee_expr ().get ());\n-\n-    std::vector<HIR::MatchCase> match_arms;\n-    for (auto &match_case : expr.get_match_cases ())\n-      {\n-\tHIR::Expr *kase_expr\n-\t  = ASTLoweringExpr::translate (match_case.get_expr ().get ());\n-\n-\tHIR::Expr *kase_guard_expr = nullptr;\n-\tif (match_case.get_arm ().has_match_arm_guard ())\n-\t  {\n-\t    kase_guard_expr = ASTLoweringExpr::translate (\n-\t      match_case.get_arm ().get_guard_expr ().get ());\n-\t  }\n-\n-\tstd::vector<std::unique_ptr<HIR::Pattern> > match_arm_patterns;\n-\tfor (auto &pattern : match_case.get_arm ().get_patterns ())\n-\t  {\n-\t    HIR::Pattern *ptrn = ASTLoweringPattern::translate (pattern.get ());\n-\t    match_arm_patterns.push_back (std::unique_ptr<HIR::Pattern> (ptrn));\n-\t  }\n-\n-\tHIR::MatchArm arm (std::move (match_arm_patterns), expr.get_locus (),\n-\t\t\t   std::unique_ptr<HIR::Expr> (kase_guard_expr),\n-\t\t\t   match_case.get_arm ().get_outer_attrs ());\n-\n-\tauto crate_num = mappings->get_current_crate ();\n-\tAnalysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t       mappings->get_next_hir_id (crate_num),\n-\t\t\t\t       UNKNOWN_LOCAL_DEFID);\n-\n-\tHIR::MatchCase kase (std::move (mapping), std::move (arm),\n-\t\t\t     std::unique_ptr<HIR::Expr> (kase_expr));\n-\tmatch_arms.push_back (std::move (kase));\n-      }\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated\n-      = new HIR::MatchExpr (mapping, std::unique_ptr<HIR::Expr> (branch_value),\n-\t\t\t    std::move (match_arms), expr.get_inner_attrs (),\n-\t\t\t    expr.get_outer_attrs (), expr.get_locus ());\n+    translated = ASTLoweringExprWithBlock::translate (&expr, &terminated);\n   }\n \n   void visit (AST::RangeFromToExpr &expr) override"}, {"sha": "64c8f3671026aaaa52f4643efaaeb1803638367d", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5528001eca60bb115e6afc94105ecc7b3820eb52/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5528001eca60bb115e6afc94105ecc7b3820eb52/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=5528001eca60bb115e6afc94105ecc7b3820eb52", "patch": "@@ -299,6 +299,57 @@ ASTLoweringExprWithBlock::visit (AST::WhileLoopExpr &expr)\n \t\t\t      expr.get_outer_attrs ());\n }\n \n+void\n+ASTLoweringExprWithBlock::visit (AST::MatchExpr &expr)\n+{\n+  HIR::Expr *branch_value\n+    = ASTLoweringExpr::translate (expr.get_scrutinee_expr ().get ());\n+\n+  std::vector<HIR::MatchCase> match_arms;\n+  for (auto &match_case : expr.get_match_cases ())\n+    {\n+      HIR::Expr *kase_expr\n+\t= ASTLoweringExpr::translate (match_case.get_expr ().get ());\n+\n+      HIR::Expr *kase_guard_expr = nullptr;\n+      if (match_case.get_arm ().has_match_arm_guard ())\n+\t{\n+\t  kase_guard_expr = ASTLoweringExpr::translate (\n+\t    match_case.get_arm ().get_guard_expr ().get ());\n+\t}\n+\n+      std::vector<std::unique_ptr<HIR::Pattern> > match_arm_patterns;\n+      for (auto &pattern : match_case.get_arm ().get_patterns ())\n+\t{\n+\t  HIR::Pattern *ptrn = ASTLoweringPattern::translate (pattern.get ());\n+\t  match_arm_patterns.push_back (std::unique_ptr<HIR::Pattern> (ptrn));\n+\t}\n+\n+      HIR::MatchArm arm (std::move (match_arm_patterns), expr.get_locus (),\n+\t\t\t std::unique_ptr<HIR::Expr> (kase_guard_expr),\n+\t\t\t match_case.get_arm ().get_outer_attrs ());\n+\n+      auto crate_num = mappings->get_current_crate ();\n+      Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t     mappings->get_next_hir_id (crate_num),\n+\t\t\t\t     UNKNOWN_LOCAL_DEFID);\n+\n+      HIR::MatchCase kase (std::move (mapping), std::move (arm),\n+\t\t\t   std::unique_ptr<HIR::Expr> (kase_expr));\n+      match_arms.push_back (std::move (kase));\n+    }\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::MatchExpr (mapping, std::unique_ptr<HIR::Expr> (branch_value),\n+\t\t\t  std::move (match_arms), expr.get_inner_attrs (),\n+\t\t\t  expr.get_outer_attrs (), expr.get_locus ());\n+}\n+\n // rust-ast-lower-expr.h\n \n void"}, {"sha": "5a43f3e1b1aa8122d489d5287559f2727a6e3df8", "filename": "gcc/testsuite/rust/execute/torture/issue-858.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5528001eca60bb115e6afc94105ecc7b3820eb52/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-858.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5528001eca60bb115e6afc94105ecc7b3820eb52/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-858.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-858.rs?ref=5528001eca60bb115e6afc94105ecc7b3820eb52", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-output \"Result: 123\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+enum Foo<T> {\n+    A,\n+    B(T),\n+}\n+\n+fn main() -> i32 {\n+    let result = Foo::B(123);\n+\n+    match result {\n+        Foo::A => unsafe {\n+            let a = \"A\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        },\n+        Foo::B(x) => unsafe {\n+            let a = \"Result: %i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, x);\n+        },\n+    }\n+\n+    0\n+}"}]}