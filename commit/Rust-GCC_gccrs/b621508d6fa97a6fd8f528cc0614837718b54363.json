{"sha": "b621508d6fa97a6fd8f528cc0614837718b54363", "node_id": "C_kwDOANBUbNoAKGI2MjE1MDhkNmZhOTdhNmZkOGY1MjhjYzA2MTQ4Mzc3MThiNTQzNjM", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-26T00:16:26Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-26T00:16:26Z"}, "message": "Daily bump.", "tree": {"sha": "f1bef6ee99d260dc9e966bcd360b2b3a96d32e10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1bef6ee99d260dc9e966bcd360b2b3a96d32e10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b621508d6fa97a6fd8f528cc0614837718b54363", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b621508d6fa97a6fd8f528cc0614837718b54363", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b621508d6fa97a6fd8f528cc0614837718b54363", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b621508d6fa97a6fd8f528cc0614837718b54363/comments", "author": null, "committer": null, "parents": [{"sha": "f5bacd9c5be5e129688d9c91eeed05e7b968117e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5bacd9c5be5e129688d9c91eeed05e7b968117e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5bacd9c5be5e129688d9c91eeed05e7b968117e"}], "stats": {"total": 605, "additions": 604, "deletions": 1}, "files": [{"sha": "dd805e8d29ec3d0ffbacd4e26fe018694b371427", "filename": "gcc/ChangeLog", "status": "modified", "additions": 212, "deletions": 0, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b621508d6fa97a6fd8f528cc0614837718b54363/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b621508d6fa97a6fd8f528cc0614837718b54363/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b621508d6fa97a6fd8f528cc0614837718b54363", "patch": "@@ -1,3 +1,215 @@\n+2021-10-25  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* tree-vrp.c (vrp_simplify_cond_using_ranges): Add return type and\n+\tmove to vr-values.c.\n+\t(simplify_casted_conds): Move to vrp_folder class.\n+\t(execute_vrp): Call via vrp_folder now.\n+\t* vr-values.c (simplify_cond_using_ranges_1): Call simplify_casted_cond.\n+\t(simplify_using_ranges::simplify_casted_cond): Relocate from tree-vrp.c.\n+\t* vr-values.h (simplify_casted_cond): Add prototype.\n+\n+2021-10-25  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* tree-vrp.c (rvrp_folder::fold_stmt): If simplification fails, try\n+\tto fold anyway.\n+\n+2021-10-25  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* config/rs6000/smmintrin.h (_mm_testz_si128): Add \"extern\" to\n+\tfunction signature.\n+\t(_mm_testc_si128): Likewise.\n+\t(_mm_testnzc_si128): Likewise.\n+\t(_mm_blend_ps): Likewise.\n+\t(_mm_blendv_ps): Likewise.\n+\t(_mm_blend_pd): Likewise.\n+\t(_mm_blendv_pd): Likewise.\n+\t(_mm_ceil_pd): Likewise.\n+\t(_mm_ceil_sd): Likewise.\n+\t(_mm_ceil_ps): Likewise.\n+\t(_mm_ceil_ss): Likewise.\n+\t(_mm_floor_pd): Likewise.\n+\t(_mm_floor_sd): Likewise.\n+\t(_mm_floor_ps): Likewise.\n+\t(_mm_floor_ss): Likewise.\n+\t(_mm_minpos_epu16): Likewise.\n+\t(_mm_mul_epi32): Likewise.\n+\t(_mm_cvtepi8_epi16): Likewise.\n+\t(_mm_packus_epi32): Likewise.\n+\t(_mm_cmpgt_epi64): Likewise.\n+\n+2021-10-25  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* simplify-rtx.c (simplify_binary_operation_1) [SS_ASHIFT]: Simplify\n+\tshifts of the mode's smin_value and smax_value when the bit count\n+\toperand doesn't have side-effects.\n+\t[US_ASHIFT]: Likewise, simplify shifts of the mode's umax_value\n+\twhen the bit count operand doesn't have side-effects.\n+\t(simplify_const_binary_operation) [SS_ASHIFT, US_ASHIFT]: Perform\n+\tcompile-time evaluation of saturating left shifts with constant\n+\targuments.\n+\n+2021-10-25  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range.cc (gimple_ranger::export_global_ranges): Remove check\n+\tfor TDF_DETAILS.\n+\n+2021-10-25  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* flag-types.h (enum ranger_debug): Adjust values.\n+\t* params.opt (ranger_debug): Ditto.\n+\n+2021-10-25  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/102886\n+\t* tree-sra.c (totally_scalarize_subtree): Fix the out of\n+\taccess-condition.\n+\n+2021-10-25  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* tree-ssa-dce.c (simple_dce_from_worklist):\n+\tCheck stmt_unremovable_because_of_non_call_eh_p also\n+\tbefore removing the statement.\n+\n+2021-10-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102905\n+\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment):\n+\tUse vect_supportable_dr_alignment again to determine whether\n+\tan access is supported when not aligned.\n+\n+2021-10-25  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* config/riscv/riscv.c (riscv_rtx_costs): Handle cost model\n+\tfor zbs extension.\n+\n+2021-10-25  Jim Wilson  <jimw@sifive.com>\n+\t    Kito Cheng  <kito.cheng@sifive.com>\n+\t    Jia-Wei Chen  <jiawei@iscas.ac.cn>\n+\t    Shi-Hua Liao  <shihua@iscas.ac.cn>\n+\n+\t* config/riscv/bitmanip.md (shiftm1): New.\n+\t(*bset<mode>): Ditto.\n+\t(*bset<mode>_mask): Ditto.\n+\t(*bset<mode>_1): Ditto.\n+\t(*bset<mode>_1_mask): Ditto.\n+\t(*bseti<mode>): Ditto.\n+\t(*bclr<mode>): Ditto.\n+\t(*bclri<mode>): Ditto.\n+\t(*binv<mode>): Ditto.\n+\t(*binvi<mode>): Ditto.\n+\t(*bext<mode>): Ditto.\n+\t(*bexti): Ditto.\n+\t* config/riscv/predicates.md (splittable_const_int_operand):\n+\tHandle bseti.\n+\t(single_bit_mask_operand): New.\n+\t(not_single_bit_mask_operand): Ditto.\n+\t(const31_operand): Ditto.\n+\t(const63_operand): Ditto.\n+\t* config/riscv/riscv.c (riscv_build_integer_1): Handle bseti.\n+\t(riscv_output_move): Ditto.\n+\t(riscv_print_operand): Handle new operand type: T and S.\n+\t* config/riscv/riscv.h (SINGLE_BIT_MASK_OPERAND): New.\n+\n+2021-10-25  Jim Wilson  <jimw@sifive.com>\n+\n+\t* config/riscv/riscv.c (riscv_build_integer_1): Build integer\n+\twith rotate.\n+\n+2021-10-25  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* config/riscv/riscv.c (riscv_extend_cost): Handle cost model\n+\tfor zbb extension.\n+\t(riscv_rtx_costs): Ditto.\n+\n+2021-10-25  Jim Wilson  <jimw@sifive.com>\n+\t    Kito Cheng  <kito.cheng@sifive.com>\n+\t    Jia-Wei Chen  <jiawei@iscas.ac.cn>\n+\n+\t* config/riscv/bitmanip.md (bitmanip_bitwise): New.\n+\t(bitmanip_minmax): New.\n+\t(clz_ctz_pcnt): New.\n+\t(bitmanip_optab): New.\n+\t(bitmanip_insn): New.\n+\t(*<optab>_not<mode>): New.\n+\t(*xor_not<mode>): New.\n+\t(<bitmanip_optab>si2): New.\n+\t(*<bitmanip_optab>disi2): New.\n+\t(<bitmanip_optab>di2): New.\n+\t(*zero_extendhi<GPR:mode>2_bitmanip): New.\n+\t(*extend<SHORT:mode><SUPERQI:mode>2_zbb): New.\n+\t(*zero_extendhi<GPR:mode>2_zbb): New.\n+\t(rotrsi3): New.\n+\t(rotrdi3): New.\n+\t(rotrsi3_sext): New.\n+\t(rotlsi3): New.\n+\t(rotldi3): New.\n+\t(rotlsi3_sext): New.\n+\t(bswap<mode>2): New.\n+\t(<bitmanip_optab><mode>3): New.\n+\t* config/riscv/riscv.md (type): Add rotate.\n+\t(zero_extendhi<GPR:mode>2): Change to define_expand pattern.\n+\t(*zero_extendhi<GPR:mode>2): New.\n+\t(extend<SHORT:mode><SUPERQI:mode>2): Change to define_expand pattern.\n+\t(*extend<SHORT:mode><SUPERQI:mode>2): New.\n+\n+2021-10-25  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* config/riscv/riscv.c (riscv_extend_cost): Handle cost model\n+\tfor zba extension.\n+\t(riscv_rtx_costs): Ditto.\n+\n+2021-10-25  Jim Wilson  <jimw@sifive.com>\n+\t    Kito Cheng  <kito.cheng@sifive.com>\n+\t    Jia-Wei Chen  <jiawei@iscas.ac.cn>\n+\n+\t* config/riscv/bitmanip.md (*zero_extendsidi2_bitmanip): New.\n+\t(*shNadd): Ditto.\n+\t(*shNadduw): Ditto.\n+\t(*add.uw): Ditto.\n+\t(*slliuw): Ditto.\n+\t(riscv_rtx_costs): Ditto.\n+\t* config/riscv/riscv.md: Include bitmanip.md\n+\t(type): Add bitmanip bype.\n+\t(zero_extendsidi2): Change to define_expand pattern.\n+\t(*zero_extendsidi2_internal): New.\n+\t(zero_extendsidi2_shifted): Disable for ZBA.\n+\n+2021-10-25  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* common/config/riscv/riscv-common.c (riscv_ext_version_table):\n+\tAdd zba, zbb, zbc and zbs.\n+\t(riscv_ext_flag_table): Ditto.\n+\t* config/riscv/riscv-opts.h (MASK_ZBA): New.\n+\t(MASK_ZBB): Ditto.\n+\t(MASK_ZBC): Ditto.\n+\t(MASK_ZBS): Ditto.\n+\t(TARGET_ZBA): Ditto.\n+\t(TARGET_ZBB): Ditto.\n+\t(TARGET_ZBC): Ditto.\n+\t(TARGET_ZBS): Ditto.\n+\t* config/riscv/riscv.opt (riscv_zb_subext): New.\n+\n+2021-10-25  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/102464\n+\t* match.pd: Simplify (_Float16) sqrtf((float) a) to .SQRT(a)\n+\twhen direct_internal_fn_supported_p, similar for sqrt/sqrtl.\n+\n+2021-10-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102920\n+\t* tree-ssa-sccvn.h (expressions_equal_p): Add argument\n+\tcontrolling VN_TOP matching behavior.\n+\t* tree-ssa-sccvn.c (expressions_equal_p): Likewise.\n+\t(vn_phi_eq): Do not optimistically match VN_TOP.\n+\n+2021-10-25  konglin1  <lingling.kong@intel.com>\n+\n+\t* config/i386/sse.md (fma_<mode>_fadd_fmul): Add new\n+\tdefine_insn_and_split.\n+\t(fma_<mode>_fadd_fcmul):Likewise\n+\t(fma_<complexopname>_<mode>_fma_zero):Likewise\n+\n 2021-10-24  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config/pa/pa-d.c (pa_d_handle_target_float_abi): Don't check"}, {"sha": "657a4f1e007831a4bcff6bee996bf9dedbbc991a", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b621508d6fa97a6fd8f528cc0614837718b54363/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b621508d6fa97a6fd8f528cc0614837718b54363/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=b621508d6fa97a6fd8f528cc0614837718b54363", "patch": "@@ -1 +1 @@\n-20211025\n+20211026"}, {"sha": "ab7c0f587bb145bb0655c3f2a3a08fa7f402fd87", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 303, "deletions": 0, "changes": 303, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b621508d6fa97a6fd8f528cc0614837718b54363/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b621508d6fa97a6fd8f528cc0614837718b54363/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b621508d6fa97a6fd8f528cc0614837718b54363", "patch": "@@ -1,3 +1,306 @@\n+2021-10-25  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gcc-interface/Make-lang.in, gcc-interface/Makefile.in: Remove\n+\tgnatfind and gnatxref.\n+\n+2021-10-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Has_Possible_Literal_Aspects): If analysis of an\n+\toperator node fails to find  a possible interpretation, and one\n+\tof its operands is a literal or a named number, assign to the\n+\tnode the corresponding class type (Any_Integer, Any_String,\n+\tetc).\n+\t(Operator_Check): Call it before emitting a type error.\n+\t* sem_res.adb (Has_Applicable_User_Defined_Literal): Given a\n+\tliteral and a type, determine whether the type has a\n+\tuser_defined aspect that can apply to the literal, and rewrite\n+\tthe node as call to the corresponding function. Most of the code\n+\twas previously in procedure Resolve.\n+\t(Try_User_Defined_Literal): Check operands of a predefined\n+\toperator that fails to resolve, and apply\n+\tHas_Applicable_User_Defined_Literal to literal operands if any,\n+\tto find if a conversion will allow the operator to resolve\n+\tproperly.\n+\t(Resolve): Call the above when a literal or an operator with a\n+\tliteral operand fails to resolve.\n+\n+2021-10-25  Bob Duff  <duff@adacore.com>\n+\n+\t* freeze.adb (Freeze_Fixed_Point_Type): Remove\n+\tpreviously-inserted test for Uint_0; no longer needed.\n+\t* gen_il-gen.ads: Improve comments.\n+\t* repinfo.adb (Rep_Value): Use Ubool type for B.\n+\t* repinfo.ads (Node_Ref): Use Unegative type.\n+\t(Node_Ref_Or_Val): Document that values of this type can be\n+\tNo_Uint.\n+\t* exp_disp.adb (Make_Disp_Requeue_Body): Minor comment fix.\n+\t* sem_ch3.adb: Likewise.\n+\t* sem_ch8.adb: Likewise.\n+\t* sinfo-utils.adb (End_Location): End_Span can never be No_Uint,\n+\tso remove the \"if No (L)\" test.\n+\t* uintp.adb (Image_String): Use \"for ... of\" loop.\n+\t* uintp.ads (Unegative): New type for negative integers.  We\n+\tgive it a long name (unlike Unat and Upos) because it is rarely\n+\tused.\n+\n+2021-10-25  Etienne Servais  <servais@adacore.com>\n+\n+\t* errout.adb (Skip_Msg_Insertion_Warning): Adapt and format as\n+\tErroutc.Prescan_Message.Parse_Message_Class.\n+\t(Warn_Insertion): Adapt to new format.\n+\t* errout.ads: Update documentation.\n+\t* erroutc.adb (Get_Warning_Tag): Adapt to new format.\n+\t(Prescan_Message): Introduce Parse_Message_Class function.\n+\t(Validate_Specific_Warnings): Update ?W? to ?.w?.\n+\t* erroutc.ads: Update type and documentation.\n+\t* checks.adb (Validity_Check_Range): Update ?X? to ?.x?.\n+\t* exp_ch11.adb (Possible_Local_Raise): Update ?X? to ?.x?.\n+\t(Warn_If_No_Local_Raise): Likewise.\n+\t(Warn_If_No_Propagation): Likewise.\n+\t(Warn_No_Exception_Propagation_Active): Likewise.\n+\t* exp_ch4.adb (Expand_N_Allocator): Attach warning message to\n+\t-gnatw_a.\n+\t* exp_prag.adb (Expand_Pragma_Check): Update ?A? to ?.a?.\n+\t* exp_util.adb (Activate_Atomic_Synchronization): Update ?N? to\n+\t?.n?.\n+\t(Add_Invariant_Check): Update ?L? to ?.l?.\n+\t* freeze.adb (Check_Suspicious_Modulus): Update ?M? to ?.m?.\n+\t(Freeze_Entity): Update ?T? to ?.t?, ?Z? to ?.z?.\n+\t* par-util.adb (Warn_If_Standard_Redefinition): Update ?K? to\n+\t?.k?.\n+\t* sem_attr.adb (Min_Max): Update ?U? to ?.u?.\n+\t* sem_ch13.adb (Adjust_Record_For_Reverse_Bit_Order): Update ?V?\n+\tto ?.v?.\n+\t(Adjust_Record_For_Reverse_Bit_Order_Ada_95): Update ?V? to ?.v?.\n+\t(Component_Size_Case): Update ?S? to ?.s?.\n+\t(Analyze_Record_Representation_Clause): Update ?S? to ?.s? and\n+\t?C? to ?.c?.\n+\t(Add_Call): Update ?L? to ?.l?.\n+\t(Component_Order_Check): Attach warning message to -gnatw_r.\n+\t(Check_Component_List): Update ?H? to ?.h?.\n+\t(Set_Biased): Update ?B? to ?.b?.\n+\t* sem_ch3.adb (Modular_Type_Declaration): Update ?M? to ?.m?.\n+\t* sem_ch4.adb (Analyze_Mod): Update ?M? to ?.m?.\n+\t(Analyze_Quantified_Expression): Update ?T? to ?.t?.\n+\t* sem_ch6.adb (Check_Conformance): Attach warning message to\n+\t-gnatw_p.\n+\t(List_Inherited_Pre_Post_Aspects): Update ?L? to ?.l?.\n+\t* sem_ch7.adb (Unit_Requires_Body_Info): Update ?Y? to ?.y?.\n+\t* sem_ch8.adb (Analyze_Object_Renaming): Update ?R? to ?.r?.\n+\t* sem_prag.adb (Validate_Compile_Time_Warning_Or_Error): Attach\n+\twarning message to -gnatw_c.\n+\t* sem_res.adb (Check_Argument_Order): Update ?P? to ?.p?.\n+\t(Resolve_Comparison_Op): Update ?U? to ?.u?.\n+\t(Resolve_Range): Update ?U? to ?.u?.\n+\t(Resolve_Short_Circuit): Update ?A? to ?.a?.\n+\t(Resolve_Unary_Op): Update ?M? to ?.m?.\n+\t* sem_util.adb (Check_Result_And_Post_State): Update ?T? to ?.t?.\n+\t* sem_warn.adb (Output_Unused_Warnings_Off_Warnings): Update ?W?\n+\tto ?.w?.\n+\t* warnsw.ads: Update documentation for -gnatw_c.\n+\n+2021-10-25  Bob Duff  <duff@adacore.com>\n+\n+\t* inline.adb (Establish_Actual_Mapping_For_Inlined_Call): Fix\n+\tcomment.\n+\n+2021-10-25  Bob Duff  <duff@adacore.com>\n+\n+\t* gen_il-gen.adb (Put_Seinfo): Generate type\n+\tSeinfo.Type_Only_Enum based on type\n+\tGen_IL.Internals.Type_Only_Enum. Automatically generating a copy\n+\tof the type will help keep them in sync.  (Note that there are\n+\tno Ada compiler packages imported into Gen_IL.)  Add a Type_Only\n+\tfield to Field_Descriptor, so this information is available in\n+\tthe Ada compiler (as opposed to just in the Gen_IL \"compiler\").\n+\t(One_Comp): Add initialization of the Type_Only field of\n+\tField_Descriptor.\n+\t* gen_il-internals.ads (Image): Image function for\n+\tType_Only_Enum.\n+\t* atree.ads (Node_To_Fetch_From): New function to compute which\n+\tnode to fetch from, based on the Type_Only aspect.\n+\t* atree.adb (Get_Field_Value): Call Node_To_Fetch_From.\n+\t* treepr.adb (Print_Entity_Field): Call Node_To_Fetch_From.\n+\t(Print_Node_Field): Assert.\n+\t* sinfo-utils.adb (Walk_Sinfo_Fields,\n+\tWalk_Sinfo_Fields_Pairwise): Asserts.\n+\n+2021-10-25  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Composite_Equality): Fix style.\n+\t(Element_To_Compare): Simplify loop.\n+\t(Expand_Record_Equality): Adapt calls to Element_To_Compare.\n+\n+2021-10-25  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_case.adb (Composite_Case_Ops.Box_Value_Required): A new\n+\tfunction which takes a component type and returns a Boolean.\n+\tReturns True for the cases which were formerly forbidden as\n+\tcomponents (these checks were formerly performed in the\n+\tnow-deleted procedure\n+\tCheck_Composite_Case_Selector.Check_Component_Subtype).\n+\t(Composite_Case_Ops.Normalized_Case_Expr_Type): Hoist this\n+\tfunction out of the Array_Case_Ops package because it has been\n+\tgeneralized to also do the analogous thing in the case of a\n+\tdiscriminated type.\n+\t(Composite_Case_Ops.Scalar_Part_Count): Return 0 if\n+\tBox_Value_Required returns True for the given type/subtype.\n+\t(Composite_Case_Ops.Choice_Analysis.Choice_Analysis.Component_Bounds_Info.\n+\tTraverse_Discrete_Parts): Return without doing anything if\n+\tBox_Value_Required returns True for the given type/subtype.\n+\t(Composite_Case_Ops.Choice_Analysis.Parse_Choice.Traverse_Choice):\n+\tIf Box_Value_Required yields True for a given component type,\n+\tthen check that the value of that component in a choice\n+\texpression is indeed a box (in which case the component is\n+\tignored).\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Update\n+\tdocumentation.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2021-10-25  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnat/a-nbnbin__gmp.adb (From_String): Fix predicate\n+\tmismatch between subprogram declaration and body.\n+\n+2021-10-25  Bob Duff  <duff@adacore.com>\n+\n+\t* einfo-utils.adb (Declaration_Node): Avoid returning the\n+\tfollowing node kinds: N_Assignment_Statement, N_Integer_Literal,\n+\tN_Procedure_Call_Statement, N_Subtype_Indication, and\n+\tN_Type_Conversion.  Assert that the result is in N_Is_Decl or\n+\tempty.\n+\t* gen_il-gen-gen_nodes.adb (N_Is_Decl): Modify to match the\n+\tthings that Declaration_Node can return.\n+\n+2021-10-25  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnat/a-strsup.ads (Super_Length, Super_Element,\n+\tSuper_Slice): Add Global contracts.\n+\n+2021-10-25  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch3.adb (Predefined_Primitive_Bodies): Simplify detection\n+\tof existing equality operator.\n+\n+2021-10-25  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch3.adb (Predefined_Primitive_Bodies): Remove redundant\n+\tconditions related to interface types.\n+\n+2021-10-25  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* adaint.c (__gnat_portable_spawn): Do not expect execv to\n+\treturn 0.\n+\t(__gnat_portable_no_block_spawn): Likewise.\n+\n+2021-10-25  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Set New_S to Empty.\n+\n+2021-10-25  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnat/a-strunb.ads (Unbounded_String): Reference is never\n+\tnull.\n+\t* libgnat/a-strunb.adb (Finalize): Copy reference while it needs\n+\tto be deallocated.\n+\n+2021-10-25  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* lib-xref.adb (Get_Through_Renamings): Exit loop when an\n+\tenumeration literal is found.\n+\n+2021-10-25  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/s-widthu.adb: Add pragma Annotate.\n+\n+2021-10-25  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch8.adb (Build_Class_Wide_Wrapper): Previous version split\n+\tin two subprograms to factorize its functionality:\n+\tFind_Suitable_Candidate, and Build_Class_Wide_Wrapper. These\n+\troutines are also placed in the new subprogram\n+\tHandle_Instance_With_Class_Wide_Type.\n+\t(Handle_Instance_With_Class_Wide_Type): New subprogram that\n+\tencapsulates all the code that handles instantiations with\n+\tclass-wide types.\n+\t(Analyze_Subprogram_Renaming): Adjust code to invoke the new\n+\tnested subprogram Handle_Instance_With_Class_Wide_Type; adjust\n+\tdocumentation.\n+\n+2021-10-25  Bob Duff  <duff@adacore.com>\n+\n+\t* einfo-utils.ads, einfo-utils.adb (Alias, Set_Alias,\n+\tRenamed_Entity, Set_Renamed_Entity, Renamed_Object,\n+\tSet_Renamed_Object): Add assertions that reflect how these are\n+\tsupposed to be used and what they are supposed to return.\n+\t(Renamed_Entity_Or_Object): New getter.\n+\t(Set_Renamed_Object_Of_Possibly_Void): Setter that allows N to\n+\tbe E_Void.\n+\t* checks.adb (Ensure_Valid): Use Renamed_Entity_Or_Object\n+\tbecause this is called for both cases.\n+\t* exp_dbug.adb (Debug_Renaming_Declaration): Use\n+\tRenamed_Entity_Or_Object because this is called for both cases.\n+\tAdd assertions.\n+\t* exp_util.adb (Possible_Bit_Aligned_Component): Likewise.\n+\t* freeze.adb (Freeze_All_Ent): Likewise.\n+\t* sem_ch5.adb (Within_Function): Likewise.\n+\t* exp_attr.adb (Calculate_Header_Size): Call Renamed_Entity\n+\tinstead of Renamed_Object.\n+\t* exp_ch11.adb (Expand_N_Raise_Statement): Likewise.\n+\t* repinfo.adb (Find_Declaration): Likewise.\n+\t* sem_ch10.adb (Same_Unit, Process_Spec_Clauses,\n+\tAnalyze_With_Clause, Install_Parents): Likewise.\n+\t* sem_ch12.adb (Build_Local_Package, Needs_Body_Instantiated,\n+\tBuild_Subprogram_Renaming, Check_Formal_Package_Instance,\n+\tCheck_Generic_Actuals, In_Enclosing_Instance,\n+\tDenotes_Formal_Package, Process_Nested_Formal,\n+\tCheck_Initialized_Types, Map_Formal_Package_Entities,\n+\tRestore_Nested_Formal): Likewise.\n+\t* sem_ch6.adb (Report_Conflict): Likewise.\n+\t* sem_ch8.adb (Analyze_Exception_Renaming,\n+\tAnalyze_Generic_Renaming, Analyze_Package_Renaming,\n+\tIs_Primitive_Operator_In_Use, Declared_In_Actual,\n+\tNote_Redundant_Use): Likewise.\n+\t* sem_warn.adb (Find_Package_Renaming): Likewise.\n+\t* sem_elab.adb (Ultimate_Variable): Call Renamed_Object instead\n+\tof Renamed_Entity.\n+\t* exp_ch6.adb (Get_Function_Id): Call\n+\tSet_Renamed_Object_Of_Possibly_Void, because the defining\n+\tidentifer is still E_Void at this point.\n+\t* sem_util.adb (Function_Call_Or_Allocator_Level): Likewise.\n+\tRemove redundant (unreachable) code.\n+\t(Is_Object_Renaming, Is_Valid_Renaming): Call Renamed_Object\n+\tinstead of Renamed_Entity.\n+\t(Get_Fullest_View): Call Renamed_Entity instead of\n+\tRenamed_Object.\n+\t(Copy_Node_With_Replacement): Call\n+\tSet_Renamed_Object_Of_Possibly_Void because the defining entity\n+\tis sometimes E_Void.\n+\t* exp_ch5.adb (Expand_N_Assignment_Statement): Protect a call to\n+\tRenamed_Object with Is_Object to avoid assertion failure.\n+\t* einfo.ads: Minor comment fixes.\n+\t* inline.adb: Minor comment fixes.\n+\t* tbuild.ads: Minor comment fixes.\n+\n+2021-10-25  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch13.adb (Build_Discrete_Static_Predicate): Remove use of\n+\texception propagation since this code is exercised during the\n+\tbootstrap.\n+\n+2021-10-25  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch13.adb (Freeze_Entity_Checks): Perform same check on\n+\tpredicate expression inside pragma as inside aspect.\n+\t* sem_util.adb (Is_Current_Instance): Recognize possible\n+\toccurrence of subtype as current instance inside the pragma\n+\tPredicate.\n+\n+2021-10-25  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* erroutc.adb (Count_Compile_Time_Pragma_Warnings): Don't count\n+\tdeleted warnings.\n+\n 2021-10-22  Eric Gallager  <egallager@gcc.gnu.org>\n \n \tPR other/102663"}, {"sha": "5b232ad93cdd6ecb66e5c1d08595b5f092404fcc", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b621508d6fa97a6fd8f528cc0614837718b54363/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b621508d6fa97a6fd8f528cc0614837718b54363/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b621508d6fa97a6fd8f528cc0614837718b54363", "patch": "@@ -1,3 +1,7 @@\n+2021-10-25  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* trans-decl.c (gfc_conv_cfi_to_gfc): Initialize rank to NULL_TREE.\n+\n 2021-10-22  Eric Gallager  <egallager@gcc.gnu.org>\n \n \tPR other/102663"}, {"sha": "059ff8c9e4b845c7dea7a992720293cd3749a9b8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b621508d6fa97a6fd8f528cc0614837718b54363/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b621508d6fa97a6fd8f528cc0614837718b54363/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b621508d6fa97a6fd8f528cc0614837718b54363", "patch": "@@ -1,3 +1,76 @@\n+2021-10-25  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/vrp98.c: Disable evrp for vrp1 test.\n+\t* gcc.dg/tree-ssa/vrp98-1.c: New. Test for folding in evrp.\n+\n+2021-10-25  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.target/bfin/ssashift-1.c: New test case.\n+\n+2021-10-25  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/102907\n+\t* gcc.target/aarch64/shrn-combine-1.c: Disable SVE.\n+\t* gcc.target/aarch64/shrn-combine-2.c: Likewise.\n+\t* gcc.target/aarch64/shrn-combine-3.c: Likewise.\n+\t* gcc.target/aarch64/shrn-combine-4.c: Likewise.\n+\t* gcc.target/aarch64/shrn-combine-5.c: Likewise.\n+\t* gcc.target/aarch64/shrn-combine-6.c: Likewise.\n+\t* gcc.target/aarch64/shrn-combine-7.c: Likewise.\n+\n+2021-10-25  Jim Wilson  <jimw@sifive.com>\n+\t    Kito Cheng  <kito.cheng@sifive.com>\n+\t    Jia-Wei Chen  <jiawei@iscas.ac.cn>\n+\t    Shi-Hua Liao  <shihua@iscas.ac.cn>\n+\n+\t* gcc.target/riscv/zba-slliuw.c: Apply zbs to this testcase.\n+\t* gcc.target/riscv/zbs-bclr.c: New.\n+\t* gcc.target/riscv/zbs-bext.c: Ditto.\n+\t* gcc.target/riscv/zbs-binv.c: Ditto.\n+\t* gcc.target/riscv/zbs-bset.c: Ditto.\n+\n+2021-10-25  Jim Wilson  <jimw@sifive.com>\n+\n+\t* gcc.target/riscv/zbb-li-rotr.c: New.\n+\n+2021-10-25  Jim Wilson  <jimw@sifive.com>\n+\t    Kito Cheng  <kito.cheng@sifive.com>\n+\t    Jia-Wei Chen  <jiawei@iscas.ac.cn>\n+\n+\t* gcc.target/riscv/zbb-andn-orn-xnor-01.c: New.\n+\t* gcc.target/riscv/zbb-andn-orn-xnor-02.c: Ditto.\n+\t* gcc.target/riscv/zbb-min-max.c: Ditto.\n+\t* gcc.target/riscv/zbb-rol-ror-01.c: Ditto.\n+\t* gcc.target/riscv/zbb-rol-ror-02.c: Ditto.\n+\t* gcc.target/riscv/zbb-rol-ror-03.c: Ditto.\n+\t* gcc.target/riscv/zbbw.c: Ditto.\n+\n+2021-10-25  Jim Wilson  <jimw@sifive.com>\n+\t    Kito Cheng  <kito.cheng@sifive.com>\n+\t    Jia-Wei Chen  <jiawei@iscas.ac.cn>\n+\n+\t* gcc.target/riscv/zba-adduw.c: New.\n+\t* gcc.target/riscv/zba-shNadd-01.c: Ditto.\n+\t* gcc.target/riscv/zba-shNadd-02.c: Ditto.\n+\t* gcc.target/riscv/zba-shNadd-03.c: Ditto.\n+\t* gcc.target/riscv/zba-slliuw.c: Ditto.\n+\t* gcc.target/riscv/zba-zextw.c: Ditto.\n+\n+2021-10-25  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/102464\n+\t* gcc.target/i386/pr102464-sqrtph.c: New test.\n+\t* gcc.target/i386/pr102464-sqrtsh.c: New test.\n+\n+2021-10-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102920\n+\t* gcc.dg/torture/pr102920.c: New testcase.\n+\n+2021-10-25  konglin1  <lingling.kong@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-complex-fma.c: New test.\n+\n 2021-10-24  Roger Sayle  <roger@nextmovesoftware.com>\n \n \t* gcc.target/bfin/20090914-3.c: Tweak test case."}, {"sha": "9285bd643b25fd6ec2bf7e60275359394952c0d2", "filename": "libffi/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b621508d6fa97a6fd8f528cc0614837718b54363/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b621508d6fa97a6fd8f528cc0614837718b54363/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=b621508d6fa97a6fd8f528cc0614837718b54363", "patch": "@@ -1,3 +1,8 @@\n+2021-10-25  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* src/powerpc/linux64.S: Enable AltiVec insns.\n+\t* src/powerpc/linux64_closure.S: Ditto.\n+\n 2021-10-20  H.J. Lu  <hjl.tools@gmail.com>\n \n \t* LOCAL_PATCHES: New file."}, {"sha": "3ff917ce80fc4ad27f986e85553b26524cdb00eb", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b621508d6fa97a6fd8f528cc0614837718b54363/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b621508d6fa97a6fd8f528cc0614837718b54363/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=b621508d6fa97a6fd8f528cc0614837718b54363", "patch": "@@ -1,3 +1,9 @@\n+2021-10-25  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR testsuite/102910\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-gwv-2.c: Use __builtin_alloca\n+\tinstead of #include <alloca.h> + alloca.\n+\n 2021-10-21  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* libgomp.texi (Support of strictly structured blocks in Fortran):"}]}