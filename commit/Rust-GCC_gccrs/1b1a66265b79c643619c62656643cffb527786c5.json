{"sha": "1b1a66265b79c643619c62656643cffb527786c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIxYTY2MjY1Yjc5YzY0MzYxOWM2MjY1NjY0M2NmZmI1Mjc3ODZjNQ==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2010-06-12T13:43:48Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2010-06-12T13:43:48Z"}, "message": "resolve.c (resolve_global_procedure): Improved checking if an explicit interface is required.\n\ngcc/fortran/:\n2010-06-12  Daniel Franke  <franke.daniel@gmail.com>\n\n        * resolve.c (resolve_global_procedure): Improved checking if an\n        explicit interface is required.\n\ngcc/testsuite/:\n2010-06-12  Daniel Franke  <franke.daniel@gmail.com>\n\n        * gfortran.dg/whole_file_20.f03: New.\n\nFrom-SVN: r160663", "tree": {"sha": "3b7c540c729d0ef2d9990a23879a911449ee984b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b7c540c729d0ef2d9990a23879a911449ee984b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b1a66265b79c643619c62656643cffb527786c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b1a66265b79c643619c62656643cffb527786c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b1a66265b79c643619c62656643cffb527786c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b1a66265b79c643619c62656643cffb527786c5/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "57e215e4f732d236ebedc3231dd04faaff041fee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57e215e4f732d236ebedc3231dd04faaff041fee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57e215e4f732d236ebedc3231dd04faaff041fee"}], "stats": {"total": 159, "additions": 130, "deletions": 29}, "files": [{"sha": "02d6d4c2eea426f35ada51934bff733833efb244", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b1a66265b79c643619c62656643cffb527786c5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b1a66265b79c643619c62656643cffb527786c5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1b1a66265b79c643619c62656643cffb527786c5", "patch": "@@ -1,3 +1,8 @@\n+2010-06-12  Daniel Franke  <franke.daniel@gmail.com>\n+\n+        * resolve.c (resolve_global_procedure): Improved checking if an\n+        explicit interface is required.\n+\n 2010-06-12  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* trans-decl.c (gfc_build_intrinsic_function_decls): Fix"}, {"sha": "d5fa3708d4ecc5e32ce49c3403fd451a6e127a52", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 88, "deletions": 29, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b1a66265b79c643619c62656643cffb527786c5/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b1a66265b79c643619c62656643cffb527786c5/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=1b1a66265b79c643619c62656643cffb527786c5", "patch": "@@ -1858,29 +1858,6 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n \t    }\n \t}\n \n-      if (gsym->ns->proc_name->attr.function\n-\t    && gsym->ns->proc_name->as\n-\t    && gsym->ns->proc_name->as->rank\n-\t    && (!sym->as || sym->as->rank != gsym->ns->proc_name->as->rank))\n-\tgfc_error (\"The reference to function '%s' at %L either needs an \"\n-\t\t   \"explicit INTERFACE or the rank is incorrect\", sym->name,\n-\t\t   where);\n-\n-      /* Non-assumed length character functions.  */\n-      if (sym->attr.function && sym->ts.type == BT_CHARACTER\n-\t  && gsym->ns->proc_name->ts.u.cl->length != NULL)\n-\t{\n-\t  gfc_charlen *cl = sym->ts.u.cl;\n-\n-\t  if (!sym->attr.entry_master && sym->attr.if_source == IFSRC_UNKNOWN\n-\t      && cl && cl->length && cl->length->expr_type != EXPR_CONSTANT)\n-\t    {\n-\t      gfc_error (\"Nonconstant character-length function '%s' at %L \"\n-\t\t\t \"must have an explicit interface\", sym->name,\n-\t\t\t &sym->declared_at);\n-\t    }\n-\t}\n-\n       /* Differences in constant character lengths.  */\n       if (sym->attr.function && sym->ts.type == BT_CHARACTER)\n \t{\n@@ -1911,26 +1888,108 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n \t\t   sym->name, &sym->declared_at, gfc_typename (&sym->ts),\n \t\t   gfc_typename (&gsym->ns->proc_name->ts));\n \n-      /* Assumed shape arrays as dummy arguments.  */\n       if (gsym->ns->proc_name->formal)\n \t{\n \t  gfc_formal_arglist *arg = gsym->ns->proc_name->formal;\n \t  for ( ; arg; arg = arg->next)\n-\t    if (arg->sym && arg->sym->as\n-\t        && arg->sym->as->type == AS_ASSUMED_SHAPE)\n+\t    if (!arg->sym)\n+\t      continue;\n+\t    /* F2003, 12.3.1.1 (2a); F2008, 12.4.2.2 (2a)  */\n+\t    else if (arg->sym->attr.allocatable\n+\t\t     || arg->sym->attr.asynchronous\n+\t\t     || arg->sym->attr.optional\n+\t\t     || arg->sym->attr.pointer\n+\t\t     || arg->sym->attr.target\n+\t\t     || arg->sym->attr.value\n+\t\t     || arg->sym->attr.volatile_)\n+\t      {\n+\t\tgfc_error (\"Dummy argument '%s' of procedure '%s' at %L \"\n+\t\t\t   \"has an attribute that requires an explicit \"\n+\t\t\t   \"interface for this procedure\", arg->sym->name,\n+\t\t\t   sym->name, &sym->declared_at);\n+\t\tbreak;\n+\t      }\n+\t    /* F2003, 12.3.1.1 (2b); F2008, 12.4.2.2 (2b)  */\n+\t    else if (arg->sym && arg->sym->as\n+\t\t     && arg->sym->as->type == AS_ASSUMED_SHAPE)\n \t      {\n \t\tgfc_error (\"Procedure '%s' at %L with assumed-shape dummy \"\n-\t\t\t   \"'%s' argument must have an explicit interface\",\n+\t\t\t   \"argument '%s' must have an explicit interface\",\n \t\t\t   sym->name, &sym->declared_at, arg->sym->name);\n \t\tbreak;\n \t      }\n-\t    else if (arg->sym && arg->sym->attr.optional)\n+\t    /* F2008, 12.4.2.2 (2c)  */\n+\t    else if (arg->sym->attr.codimension)\n \t      {\n-\t\tgfc_error (\"Procedure '%s' at %L with optional dummy argument \"\n+\t\tgfc_error (\"Procedure '%s' at %L with coarray dummy argument \"\n \t\t\t   \"'%s' must have an explicit interface\",\n \t\t\t   sym->name, &sym->declared_at, arg->sym->name);\n \t\tbreak;\n \t      }\n+\t    /* F2003, 12.3.1.1 (2c); F2008, 12.4.2.2 (2d)   */\n+\t    else if (false) /* TODO: is a parametrized derived type  */\n+\t      {\n+\t\tgfc_error (\"Procedure '%s' at %L with parametrized derived \"\n+\t\t\t   \"type argument '%s' must have an explicit \"\n+\t\t\t   \"interface\", sym->name, &sym->declared_at,\n+\t\t\t   arg->sym->name);\n+\t\tbreak;\n+\t      }\n+\t    /* F2003, 12.3.1.1 (2d); F2008, 12.4.2.2 (2e)   */\n+\t    else if (arg->sym->ts.type == BT_CLASS)\n+\t      {\n+\t\tgfc_error (\"Procedure '%s' at %L with polymorphic dummy \"\n+\t\t\t   \"argument '%s' must have an explicit interface\",\n+\t\t\t   sym->name, &sym->declared_at, arg->sym->name);\n+\t\tbreak;\n+\t      }\n+\t}\n+\n+      if (gsym->ns->proc_name->attr.function)\n+\t{\n+\t  /* F2003, 12.3.1.1 (3a); F2008, 12.4.2.2 (3a) */\n+\t  if (gsym->ns->proc_name->as\n+\t      && gsym->ns->proc_name->as->rank\n+\t      && (!sym->as || sym->as->rank != gsym->ns->proc_name->as->rank))\n+\t    gfc_error (\"The reference to function '%s' at %L either needs an \"\n+\t\t       \"explicit INTERFACE or the rank is incorrect\", sym->name,\n+\t\t       where);\n+\n+\t  /* F2003, 12.3.1.1 (3b); F2008, 12.4.2.2 (3b) */\n+\t  if (gsym->ns->proc_name->result->attr.pointer\n+\t      || gsym->ns->proc_name->result->attr.allocatable)\n+\t    gfc_error (\"Function '%s' at %L with a POINTER or ALLOCATABLE \"\n+\t\t       \"result must have an explicit interface\", sym->name,\n+\t\t       where);\n+\n+\t  /* F2003, 12.3.1.1 (3c); F2008, 12.4.2.2 (3c)  */\n+\t  if (sym->ts.type == BT_CHARACTER\n+\t      && gsym->ns->proc_name->ts.u.cl->length != NULL)\n+\t    {\n+\t      gfc_charlen *cl = sym->ts.u.cl;\n+\n+\t      if (!sym->attr.entry_master && sym->attr.if_source == IFSRC_UNKNOWN\n+\t\t  && cl && cl->length && cl->length->expr_type != EXPR_CONSTANT)\n+\t\t{\n+\t\t  gfc_error (\"Nonconstant character-length function '%s' at %L \"\n+\t\t\t     \"must have an explicit interface\", sym->name,\n+\t\t\t     &sym->declared_at);\n+\t\t}\n+\t    }\n+\t}\n+\n+      /* F2003, 12.3.1.1 (4); F2008, 12.4.2.2 (4) */\n+      if (gsym->ns->proc_name->attr.elemental)\n+\t{\n+\t  gfc_error (\"ELEMENTAL procedure '%s' at %L must have an explicit \"\n+\t\t     \"interface\", sym->name, &sym->declared_at);\n+\t}\n+\n+      /* F2003, 12.3.1.1 (5); F2008, 12.4.2.2 (5) */\n+      if (gsym->ns->proc_name->attr.is_bind_c)\n+\t{\n+\t  gfc_error (\"Procedure '%s' at %L with BIND(C) attribute must have \"\n+\t\t     \"an explicit interface\", sym->name, &sym->declared_at);\n \t}\n \n       if (gfc_option.flag_whole_file == 1"}, {"sha": "b3129f183d000a97a18d2c681388d776c80e0100", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b1a66265b79c643619c62656643cffb527786c5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b1a66265b79c643619c62656643cffb527786c5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1b1a66265b79c643619c62656643cffb527786c5", "patch": "@@ -1,3 +1,7 @@\n+2010-06-12  Daniel Franke  <franke.daniel@gmail.com>\n+\n+        * gfortran.dg/whole_file_20.f03: New.\n+\n 2010-06-12  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.c-torture/compile/pc44485.c: New testcase."}, {"sha": "231a5aaf283c72189a11b5308fb2e0d6e65403c9", "filename": "gcc/testsuite/gfortran.dg/whole_file_20.f03", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b1a66265b79c643619c62656643cffb527786c5/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_20.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b1a66265b79c643619c62656643cffb527786c5/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_20.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_20.f03?ref=1b1a66265b79c643619c62656643cffb527786c5", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do \"compile\" }\n+! { dg-options \"-fwhole-file -fcoarray=single\" }\n+!\n+! Procedures with dummy arguments that are coarrays or polymorphic\n+! must have an explicit interface in the calling routine.\n+!\n+\n+MODULE classtype\n+  type :: t\n+    integer :: comp\n+  end type\n+END MODULE\n+\n+PROGRAM main\n+  USE classtype\n+  CLASS(t), POINTER :: tt\n+\n+  INTEGER :: coarr[*]\n+\n+  CALL coarray(coarr)         ! { dg-error \" must have an explicit interface\" }\n+  CALL polymorph(tt)          ! { dg-error \" must have an explicit interface\" }\n+END PROGRAM\n+\n+SUBROUTINE coarray(a)\n+  INTEGER :: a[*]\n+END SUBROUTINE\n+\n+SUBROUTINE polymorph(b)\n+  USE classtype\n+  CLASS(t) :: b\n+END SUBROUTINE\n+\n+! { dg-final { cleanup-modules \"classtype\" } }"}]}