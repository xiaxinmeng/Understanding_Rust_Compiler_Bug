{"sha": "de950d07f42ccf2d5c0d5d8399414840f22c80ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU5NTBkMDdmNDJjY2YyZDVjMGQ1ZDgzOTk0MTQ4NDBmMjJjODBiYQ==", "commit": {"author": {"name": "Nala Ginrut", "email": "mulei@gnu.org", "date": "2020-05-18T12:45:14Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:14Z"}, "message": "Refactor Resolution class", "tree": {"sha": "6cfec1a422ae4019e64e926193fba31d63dc9d7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cfec1a422ae4019e64e926193fba31d63dc9d7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de950d07f42ccf2d5c0d5d8399414840f22c80ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de950d07f42ccf2d5c0d5d8399414840f22c80ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de950d07f42ccf2d5c0d5d8399414840f22c80ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de950d07f42ccf2d5c0d5d8399414840f22c80ba/comments", "author": {"login": "NalaGinrut", "id": 19734, "node_id": "MDQ6VXNlcjE5NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/19734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NalaGinrut", "html_url": "https://github.com/NalaGinrut", "followers_url": "https://api.github.com/users/NalaGinrut/followers", "following_url": "https://api.github.com/users/NalaGinrut/following{/other_user}", "gists_url": "https://api.github.com/users/NalaGinrut/gists{/gist_id}", "starred_url": "https://api.github.com/users/NalaGinrut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NalaGinrut/subscriptions", "organizations_url": "https://api.github.com/users/NalaGinrut/orgs", "repos_url": "https://api.github.com/users/NalaGinrut/repos", "events_url": "https://api.github.com/users/NalaGinrut/events{/privacy}", "received_events_url": "https://api.github.com/users/NalaGinrut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fee2a060b371543d0b47e5969e4f933200ca9e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fee2a060b371543d0b47e5969e4f933200ca9e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fee2a060b371543d0b47e5969e4f933200ca9e6"}], "stats": {"total": 390, "additions": 196, "deletions": 194}, "files": [{"sha": "ee1c69267db5ead395eaa301a4b55615db0feb36", "filename": "gcc/rust/analysis/rust-resolution.h", "status": "modified", "additions": 196, "deletions": 194, "changes": 390, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de950d07f42ccf2d5c0d5d8399414840f22c80ba/gcc%2Frust%2Fanalysis%2Frust-resolution.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de950d07f42ccf2d5c0d5d8399414840f22c80ba/gcc%2Frust%2Fanalysis%2Frust-resolution.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-resolution.h?ref=de950d07f42ccf2d5c0d5d8399414840f22c80ba", "patch": "@@ -9,224 +9,226 @@\n namespace Rust {\n namespace Analysis {\n \n-class TypeResolution : public AST::ASTVisitor\n+class Resolution : public AST::ASTVisitor\n {\n public:\n-  static bool ResolveNamesAndTypes (AST::Crate &crate, TopLevelScan &toplevel);\n-\n-  ~TypeResolution ();\n+  ~Resolution (){};\n \n   // visitor impl\n   // rust-ast.h\n   // virtual void visit(AttrInput& attr_input);\n   // virtual void visit(TokenTree& token_tree);\n   // virtual void visit(MacroMatch& macro_match);\n-  virtual void visit (AST::Token &tok);\n-  virtual void visit (AST::DelimTokenTree &delim_tok_tree);\n-  virtual void visit (AST::AttrInputMetaItemContainer &input);\n-  // virtual void visit(MetaItem& meta_item);\n-  // virtual void vsit(Stmt& stmt);\n-  // virtual void visit(Expr& expr);\n-  virtual void visit (AST::IdentifierExpr &ident_expr);\n-  // virtual void visit(Pattern& pattern);\n-  // virtual void visit(Type& type);\n-  // virtual void visit(TypeParamBound& type_param_bound);\n-  virtual void visit (AST::Lifetime &lifetime);\n-  // virtual void visit(GenericParam& generic_param);\n-  virtual void visit (AST::LifetimeParam &lifetime_param);\n-  // virtual void visit(TraitItem& trait_item);\n-  // virtual void visit(InherentImplItem& inherent_impl_item);\n-  // virtual void visit(TraitImplItem& trait_impl_item);\n-  virtual void visit (AST::MacroInvocationSemi &macro);\n+  virtual void visit (AST::Token &tok) = 0;\n+  virtual void visit (AST::DelimTokenTree &delim_tok_tree) = 0;\n+  virtual void visit (AST::AttrInputMetaItemContainer &input) = 0;\n+  // virtual void visit(MetaItem& meta_item) = 0;\n+  // virtual void vsit(Stmt& stmt) = 0;\n+  // virtual void visit(Expr& expr) = 0;\n+  virtual void visit (AST::IdentifierExpr &ident_expr) = 0;\n+  // virtual void visit(Pattern& pattern) = 0;\n+  // virtual void visit(Type& type) = 0;\n+  // virtual void visit(TypeParamBound& type_param_bound) = 0;\n+  virtual void visit (AST::Lifetime &lifetime) = 0;\n+  // virtual void visit(GenericParam& generic_param) = 0;\n+  virtual void visit (AST::LifetimeParam &lifetime_param) = 0;\n+  // virtual void visit(TraitItem& trait_item) = 0;\n+  // virtual void visit(InherentImplItem& inherent_impl_item) = 0;\n+  // virtual void visit(TraitImplItem& trait_impl_item) = 0;\n+  virtual void visit (AST::MacroInvocationSemi &macro) = 0;\n \n   // rust-path.h\n-  virtual void visit (AST::PathInExpression &path);\n-  virtual void visit (AST::TypePathSegment &segment);\n-  virtual void visit (AST::TypePathSegmentGeneric &segment);\n-  virtual void visit (AST::TypePathSegmentFunction &segment);\n-  virtual void visit (AST::TypePath &path);\n-  virtual void visit (AST::QualifiedPathInExpression &path);\n-  virtual void visit (AST::QualifiedPathInType &path);\n+  virtual void visit (AST::PathInExpression &path) = 0;\n+  virtual void visit (AST::TypePathSegment &segment) = 0;\n+  virtual void visit (AST::TypePathSegmentGeneric &segment) = 0;\n+  virtual void visit (AST::TypePathSegmentFunction &segment) = 0;\n+  virtual void visit (AST::TypePath &path) = 0;\n+  virtual void visit (AST::QualifiedPathInExpression &path) = 0;\n+  virtual void visit (AST::QualifiedPathInType &path) = 0;\n \n   // rust-expr.h\n-  virtual void visit (AST::LiteralExpr &expr);\n-  virtual void visit (AST::AttrInputLiteral &attr_input);\n-  virtual void visit (AST::MetaItemLitExpr &meta_item);\n-  virtual void visit (AST::MetaItemPathLit &meta_item);\n-  virtual void visit (AST::BorrowExpr &expr);\n-  virtual void visit (AST::DereferenceExpr &expr);\n-  virtual void visit (AST::ErrorPropagationExpr &expr);\n-  virtual void visit (AST::NegationExpr &expr);\n-  virtual void visit (AST::ArithmeticOrLogicalExpr &expr);\n-  virtual void visit (AST::ComparisonExpr &expr);\n-  virtual void visit (AST::LazyBooleanExpr &expr);\n-  virtual void visit (AST::TypeCastExpr &expr);\n-  virtual void visit (AST::AssignmentExpr &expr);\n-  virtual void visit (AST::CompoundAssignmentExpr &expr);\n-  virtual void visit (AST::GroupedExpr &expr);\n-  // virtual void visit(ArrayElems& elems);\n-  virtual void visit (AST::ArrayElemsValues &elems);\n-  virtual void visit (AST::ArrayElemsCopied &elems);\n-  virtual void visit (AST::ArrayExpr &expr);\n-  virtual void visit (AST::ArrayIndexExpr &expr);\n-  virtual void visit (AST::TupleExpr &expr);\n-  virtual void visit (AST::TupleIndexExpr &expr);\n-  virtual void visit (AST::StructExprStruct &expr);\n-  // virtual void visit(StructExprField& field);\n-  virtual void visit (AST::StructExprFieldIdentifier &field);\n-  virtual void visit (AST::StructExprFieldIdentifierValue &field);\n-  virtual void visit (AST::StructExprFieldIndexValue &field);\n-  virtual void visit (AST::StructExprStructFields &expr);\n-  virtual void visit (AST::StructExprStructBase &expr);\n-  virtual void visit (AST::StructExprTuple &expr);\n-  virtual void visit (AST::StructExprUnit &expr);\n-  // virtual void visit(EnumExprField& field);\n-  virtual void visit (AST::EnumExprFieldIdentifier &field);\n-  virtual void visit (AST::EnumExprFieldIdentifierValue &field);\n-  virtual void visit (AST::EnumExprFieldIndexValue &field);\n-  virtual void visit (AST::EnumExprStruct &expr);\n-  virtual void visit (AST::EnumExprTuple &expr);\n-  virtual void visit (AST::EnumExprFieldless &expr);\n-  virtual void visit (AST::CallExpr &expr);\n-  virtual void visit (AST::MethodCallExpr &expr);\n-  virtual void visit (AST::FieldAccessExpr &expr);\n-  virtual void visit (AST::ClosureExprInner &expr);\n-  virtual void visit (AST::BlockExpr &expr);\n-  virtual void visit (AST::ClosureExprInnerTyped &expr);\n-  virtual void visit (AST::ContinueExpr &expr);\n-  virtual void visit (AST::BreakExpr &expr);\n-  virtual void visit (AST::RangeFromToExpr &expr);\n-  virtual void visit (AST::RangeFromExpr &expr);\n-  virtual void visit (AST::RangeToExpr &expr);\n-  virtual void visit (AST::RangeFullExpr &expr);\n-  virtual void visit (AST::RangeFromToInclExpr &expr);\n-  virtual void visit (AST::RangeToInclExpr &expr);\n-  virtual void visit (AST::ReturnExpr &expr);\n-  virtual void visit (AST::UnsafeBlockExpr &expr);\n-  virtual void visit (AST::LoopExpr &expr);\n-  virtual void visit (AST::WhileLoopExpr &expr);\n-  virtual void visit (AST::WhileLetLoopExpr &expr);\n-  virtual void visit (AST::ForLoopExpr &expr);\n-  virtual void visit (AST::IfExpr &expr);\n-  virtual void visit (AST::IfExprConseqElse &expr);\n-  virtual void visit (AST::IfExprConseqIf &expr);\n-  virtual void visit (AST::IfExprConseqIfLet &expr);\n-  virtual void visit (AST::IfLetExpr &expr);\n-  virtual void visit (AST::IfLetExprConseqElse &expr);\n-  virtual void visit (AST::IfLetExprConseqIf &expr);\n-  virtual void visit (AST::IfLetExprConseqIfLet &expr);\n-  // virtual void visit(MatchCase& match_case);\n-  virtual void visit (AST::MatchCaseBlockExpr &match_case);\n-  virtual void visit (AST::MatchCaseExpr &match_case);\n-  virtual void visit (AST::MatchExpr &expr);\n-  virtual void visit (AST::AwaitExpr &expr);\n-  virtual void visit (AST::AsyncBlockExpr &expr);\n+  virtual void visit (AST::LiteralExpr &expr) = 0;\n+  virtual void visit (AST::AttrInputLiteral &attr_input) = 0;\n+  virtual void visit (AST::MetaItemLitExpr &meta_item) = 0;\n+  virtual void visit (AST::MetaItemPathLit &meta_item) = 0;\n+  virtual void visit (AST::BorrowExpr &expr) = 0;\n+  virtual void visit (AST::DereferenceExpr &expr) = 0;\n+  virtual void visit (AST::ErrorPropagationExpr &expr) = 0;\n+  virtual void visit (AST::NegationExpr &expr) = 0;\n+  virtual void visit (AST::ArithmeticOrLogicalExpr &expr) = 0;\n+  virtual void visit (AST::ComparisonExpr &expr) = 0;\n+  virtual void visit (AST::LazyBooleanExpr &expr) = 0;\n+  virtual void visit (AST::TypeCastExpr &expr) = 0;\n+  virtual void visit (AST::AssignmentExpr &expr) = 0;\n+  virtual void visit (AST::CompoundAssignmentExpr &expr) = 0;\n+  virtual void visit (AST::GroupedExpr &expr) = 0;\n+  // virtual void visit(ArrayElems& elems) = 0;\n+  virtual void visit (AST::ArrayElemsValues &elems) = 0;\n+  virtual void visit (AST::ArrayElemsCopied &elems) = 0;\n+  virtual void visit (AST::ArrayExpr &expr) = 0;\n+  virtual void visit (AST::ArrayIndexExpr &expr) = 0;\n+  virtual void visit (AST::TupleExpr &expr) = 0;\n+  virtual void visit (AST::TupleIndexExpr &expr) = 0;\n+  virtual void visit (AST::StructExprStruct &expr) = 0;\n+  // virtual void visit(StructExprField& field) = 0;\n+  virtual void visit (AST::StructExprFieldIdentifier &field) = 0;\n+  virtual void visit (AST::StructExprFieldIdentifierValue &field) = 0;\n+  virtual void visit (AST::StructExprFieldIndexValue &field) = 0;\n+  virtual void visit (AST::StructExprStructFields &expr) = 0;\n+  virtual void visit (AST::StructExprStructBase &expr) = 0;\n+  virtual void visit (AST::StructExprTuple &expr) = 0;\n+  virtual void visit (AST::StructExprUnit &expr) = 0;\n+  // virtual void visit(EnumExprField& field) = 0;\n+  virtual void visit (AST::EnumExprFieldIdentifier &field) = 0;\n+  virtual void visit (AST::EnumExprFieldIdentifierValue &field) = 0;\n+  virtual void visit (AST::EnumExprFieldIndexValue &field) = 0;\n+  virtual void visit (AST::EnumExprStruct &expr) = 0;\n+  virtual void visit (AST::EnumExprTuple &expr) = 0;\n+  virtual void visit (AST::EnumExprFieldless &expr) = 0;\n+  virtual void visit (AST::CallExpr &expr) = 0;\n+  virtual void visit (AST::MethodCallExpr &expr) = 0;\n+  virtual void visit (AST::FieldAccessExpr &expr) = 0;\n+  virtual void visit (AST::ClosureExprInner &expr) = 0;\n+  virtual void visit (AST::BlockExpr &expr) = 0;\n+  virtual void visit (AST::ClosureExprInnerTyped &expr) = 0;\n+  virtual void visit (AST::ContinueExpr &expr) = 0;\n+  virtual void visit (AST::BreakExpr &expr) = 0;\n+  virtual void visit (AST::RangeFromToExpr &expr) = 0;\n+  virtual void visit (AST::RangeFromExpr &expr) = 0;\n+  virtual void visit (AST::RangeToExpr &expr) = 0;\n+  virtual void visit (AST::RangeFullExpr &expr) = 0;\n+  virtual void visit (AST::RangeFromToInclExpr &expr) = 0;\n+  virtual void visit (AST::RangeToInclExpr &expr) = 0;\n+  virtual void visit (AST::ReturnExpr &expr) = 0;\n+  virtual void visit (AST::UnsafeBlockExpr &expr) = 0;\n+  virtual void visit (AST::LoopExpr &expr) = 0;\n+  virtual void visit (AST::WhileLoopExpr &expr) = 0;\n+  virtual void visit (AST::WhileLetLoopExpr &expr) = 0;\n+  virtual void visit (AST::ForLoopExpr &expr) = 0;\n+  virtual void visit (AST::IfExpr &expr) = 0;\n+  virtual void visit (AST::IfExprConseqElse &expr) = 0;\n+  virtual void visit (AST::IfExprConseqIf &expr) = 0;\n+  virtual void visit (AST::IfExprConseqIfLet &expr) = 0;\n+  virtual void visit (AST::IfLetExpr &expr) = 0;\n+  virtual void visit (AST::IfLetExprConseqElse &expr) = 0;\n+  virtual void visit (AST::IfLetExprConseqIf &expr) = 0;\n+  virtual void visit (AST::IfLetExprConseqIfLet &expr) = 0;\n+  // virtual void visit(MatchCase& match_case) = 0;\n+  virtual void visit (AST::MatchCaseBlockExpr &match_case) = 0;\n+  virtual void visit (AST::MatchCaseExpr &match_case) = 0;\n+  virtual void visit (AST::MatchExpr &expr) = 0;\n+  virtual void visit (AST::AwaitExpr &expr) = 0;\n+  virtual void visit (AST::AsyncBlockExpr &expr) = 0;\n \n   // rust-item.h\n-  virtual void visit (AST::TypeParam &param);\n-  // virtual void visit(WhereClauseItem& item);\n-  virtual void visit (AST::LifetimeWhereClauseItem &item);\n-  virtual void visit (AST::TypeBoundWhereClauseItem &item);\n-  virtual void visit (AST::Method &method);\n-  virtual void visit (AST::ModuleBodied &module);\n-  virtual void visit (AST::ModuleNoBody &module);\n-  virtual void visit (AST::ExternCrate &crate);\n-  // virtual void visit(UseTree& use_tree);\n-  virtual void visit (AST::UseTreeGlob &use_tree);\n-  virtual void visit (AST::UseTreeList &use_tree);\n-  virtual void visit (AST::UseTreeRebind &use_tree);\n-  virtual void visit (AST::UseDeclaration &use_decl);\n-  virtual void visit (AST::Function &function);\n-  virtual void visit (AST::TypeAlias &type_alias);\n-  virtual void visit (AST::StructStruct &struct_item);\n-  virtual void visit (AST::TupleStruct &tuple_struct);\n-  virtual void visit (AST::EnumItem &item);\n-  virtual void visit (AST::EnumItemTuple &item);\n-  virtual void visit (AST::EnumItemStruct &item);\n-  virtual void visit (AST::EnumItemDiscriminant &item);\n-  virtual void visit (AST::Enum &enum_item);\n-  virtual void visit (AST::Union &union_item);\n-  virtual void visit (AST::ConstantItem &const_item);\n-  virtual void visit (AST::StaticItem &static_item);\n-  virtual void visit (AST::TraitItemFunc &item);\n-  virtual void visit (AST::TraitItemMethod &item);\n-  virtual void visit (AST::TraitItemConst &item);\n-  virtual void visit (AST::TraitItemType &item);\n-  virtual void visit (AST::Trait &trait);\n-  virtual void visit (AST::InherentImpl &impl);\n-  virtual void visit (AST::TraitImpl &impl);\n-  // virtual void visit(ExternalItem& item);\n-  virtual void visit (AST::ExternalStaticItem &item);\n-  virtual void visit (AST::ExternalFunctionItem &item);\n-  virtual void visit (AST::ExternBlock &block);\n+  virtual void visit (AST::TypeParam &param) = 0;\n+  // virtual void visit(WhereClauseItem& item) = 0;\n+  virtual void visit (AST::LifetimeWhereClauseItem &item) = 0;\n+  virtual void visit (AST::TypeBoundWhereClauseItem &item) = 0;\n+  virtual void visit (AST::Method &method) = 0;\n+  virtual void visit (AST::ModuleBodied &module) = 0;\n+  virtual void visit (AST::ModuleNoBody &module) = 0;\n+  virtual void visit (AST::ExternCrate &crate) = 0;\n+  // virtual void visit(UseTree& use_tree) = 0;\n+  virtual void visit (AST::UseTreeGlob &use_tree) = 0;\n+  virtual void visit (AST::UseTreeList &use_tree) = 0;\n+  virtual void visit (AST::UseTreeRebind &use_tree) = 0;\n+  virtual void visit (AST::UseDeclaration &use_decl) = 0;\n+  virtual void visit (AST::Function &function) = 0;\n+  virtual void visit (AST::TypeAlias &type_alias) = 0;\n+  virtual void visit (AST::StructStruct &struct_item) = 0;\n+  virtual void visit (AST::TupleStruct &tuple_struct) = 0;\n+  virtual void visit (AST::EnumItem &item) = 0;\n+  virtual void visit (AST::EnumItemTuple &item) = 0;\n+  virtual void visit (AST::EnumItemStruct &item) = 0;\n+  virtual void visit (AST::EnumItemDiscriminant &item) = 0;\n+  virtual void visit (AST::Enum &enum_item) = 0;\n+  virtual void visit (AST::Union &union_item) = 0;\n+  virtual void visit (AST::ConstantItem &const_item) = 0;\n+  virtual void visit (AST::StaticItem &static_item) = 0;\n+  virtual void visit (AST::TraitItemFunc &item) = 0;\n+  virtual void visit (AST::TraitItemMethod &item) = 0;\n+  virtual void visit (AST::TraitItemConst &item) = 0;\n+  virtual void visit (AST::TraitItemType &item) = 0;\n+  virtual void visit (AST::Trait &trait) = 0;\n+  virtual void visit (AST::InherentImpl &impl) = 0;\n+  virtual void visit (AST::TraitImpl &impl) = 0;\n+  // virtual void visit(ExternalItem& item) = 0;\n+  virtual void visit (AST::ExternalStaticItem &item) = 0;\n+  virtual void visit (AST::ExternalFunctionItem &item) = 0;\n+  virtual void visit (AST::ExternBlock &block) = 0;\n \n   // rust-macro.h\n-  virtual void visit (AST::MacroMatchFragment &match);\n-  virtual void visit (AST::MacroMatchRepetition &match);\n-  virtual void visit (AST::MacroMatcher &matcher);\n-  virtual void visit (AST::MacroRulesDefinition &rules_def);\n-  virtual void visit (AST::MacroInvocation &macro_invoc);\n-  virtual void visit (AST::MetaItemPath &meta_item);\n-  virtual void visit (AST::MetaItemSeq &meta_item);\n-  virtual void visit (AST::MetaWord &meta_item);\n-  virtual void visit (AST::MetaNameValueStr &meta_item);\n-  virtual void visit (AST::MetaListPaths &meta_item);\n-  virtual void visit (AST::MetaListNameValueStr &meta_item);\n+  virtual void visit (AST::MacroMatchFragment &match) = 0;\n+  virtual void visit (AST::MacroMatchRepetition &match) = 0;\n+  virtual void visit (AST::MacroMatcher &matcher) = 0;\n+  virtual void visit (AST::MacroRulesDefinition &rules_def) = 0;\n+  virtual void visit (AST::MacroInvocation &macro_invoc) = 0;\n+  virtual void visit (AST::MetaItemPath &meta_item) = 0;\n+  virtual void visit (AST::MetaItemSeq &meta_item) = 0;\n+  virtual void visit (AST::MetaWord &meta_item) = 0;\n+  virtual void visit (AST::MetaNameValueStr &meta_item) = 0;\n+  virtual void visit (AST::MetaListPaths &meta_item) = 0;\n+  virtual void visit (AST::MetaListNameValueStr &meta_item) = 0;\n \n   // rust-pattern.h\n-  virtual void visit (AST::LiteralPattern &pattern);\n-  virtual void visit (AST::IdentifierPattern &pattern);\n-  virtual void visit (AST::WildcardPattern &pattern);\n-  // virtual void visit(RangePatternBound& bound);\n-  virtual void visit (AST::RangePatternBoundLiteral &bound);\n-  virtual void visit (AST::RangePatternBoundPath &bound);\n-  virtual void visit (AST::RangePatternBoundQualPath &bound);\n-  virtual void visit (AST::RangePattern &pattern);\n-  virtual void visit (AST::ReferencePattern &pattern);\n-  // virtual void visit(StructPatternField& field);\n-  virtual void visit (AST::StructPatternFieldTuplePat &field);\n-  virtual void visit (AST::StructPatternFieldIdentPat &field);\n-  virtual void visit (AST::StructPatternFieldIdent &field);\n-  virtual void visit (AST::StructPattern &pattern);\n-  // virtual void visit(TupleStructItems& tuple_items);\n-  virtual void visit (AST::TupleStructItemsNoRange &tuple_items);\n-  virtual void visit (AST::TupleStructItemsRange &tuple_items);\n-  virtual void visit (AST::TupleStructPattern &pattern);\n-  // virtual void visit(TuplePatternItems& tuple_items);\n-  virtual void visit (AST::TuplePatternItemsMultiple &tuple_items);\n-  virtual void visit (AST::TuplePatternItemsRanged &tuple_items);\n-  virtual void visit (AST::TuplePattern &pattern);\n-  virtual void visit (AST::GroupedPattern &pattern);\n-  virtual void visit (AST::SlicePattern &pattern);\n+  virtual void visit (AST::LiteralPattern &pattern) = 0;\n+  virtual void visit (AST::IdentifierPattern &pattern) = 0;\n+  virtual void visit (AST::WildcardPattern &pattern) = 0;\n+  // virtual void visit(RangePatternBound& bound) = 0;\n+  virtual void visit (AST::RangePatternBoundLiteral &bound) = 0;\n+  virtual void visit (AST::RangePatternBoundPath &bound) = 0;\n+  virtual void visit (AST::RangePatternBoundQualPath &bound) = 0;\n+  virtual void visit (AST::RangePattern &pattern) = 0;\n+  virtual void visit (AST::ReferencePattern &pattern) = 0;\n+  // virtual void visit(StructPatternField& field) = 0;\n+  virtual void visit (AST::StructPatternFieldTuplePat &field) = 0;\n+  virtual void visit (AST::StructPatternFieldIdentPat &field) = 0;\n+  virtual void visit (AST::StructPatternFieldIdent &field) = 0;\n+  virtual void visit (AST::StructPattern &pattern) = 0;\n+  // virtual void visit(TupleStructItems& tuple_items) = 0;\n+  virtual void visit (AST::TupleStructItemsNoRange &tuple_items) = 0;\n+  virtual void visit (AST::TupleStructItemsRange &tuple_items) = 0;\n+  virtual void visit (AST::TupleStructPattern &pattern) = 0;\n+  // virtual void visit(TuplePatternItems& tuple_items) = 0;\n+  virtual void visit (AST::TuplePatternItemsMultiple &tuple_items) = 0;\n+  virtual void visit (AST::TuplePatternItemsRanged &tuple_items) = 0;\n+  virtual void visit (AST::TuplePattern &pattern) = 0;\n+  virtual void visit (AST::GroupedPattern &pattern) = 0;\n+  virtual void visit (AST::SlicePattern &pattern) = 0;\n \n   // rust-stmt.h\n-  virtual void visit (AST::EmptyStmt &stmt);\n-  virtual void visit (AST::LetStmt &stmt);\n-  virtual void visit (AST::ExprStmtWithoutBlock &stmt);\n-  virtual void visit (AST::ExprStmtWithBlock &stmt);\n+  virtual void visit (AST::EmptyStmt &stmt) = 0;\n+  virtual void visit (AST::LetStmt &stmt) = 0;\n+  virtual void visit (AST::ExprStmtWithoutBlock &stmt) = 0;\n+  virtual void visit (AST::ExprStmtWithBlock &stmt) = 0;\n \n   // rust-type.h\n-  virtual void visit (AST::TraitBound &bound);\n-  virtual void visit (AST::ImplTraitType &type);\n-  virtual void visit (AST::TraitObjectType &type);\n-  virtual void visit (AST::ParenthesisedType &type);\n-  virtual void visit (AST::ImplTraitTypeOneBound &type);\n-  virtual void visit (AST::TraitObjectTypeOneBound &type);\n-  virtual void visit (AST::TupleType &type);\n-  virtual void visit (AST::NeverType &type);\n-  virtual void visit (AST::RawPointerType &type);\n-  virtual void visit (AST::ReferenceType &type);\n-  virtual void visit (AST::ArrayType &type);\n-  virtual void visit (AST::SliceType &type);\n-  virtual void visit (AST::InferredType &type);\n-  virtual void visit (AST::BareFunctionType &type);\n+  virtual void visit (AST::TraitBound &bound) = 0;\n+  virtual void visit (AST::ImplTraitType &type) = 0;\n+  virtual void visit (AST::TraitObjectType &type) = 0;\n+  virtual void visit (AST::ParenthesisedType &type) = 0;\n+  virtual void visit (AST::ImplTraitTypeOneBound &type) = 0;\n+  virtual void visit (AST::TraitObjectTypeOneBound &type) = 0;\n+  virtual void visit (AST::TupleType &type) = 0;\n+  virtual void visit (AST::NeverType &type) = 0;\n+  virtual void visit (AST::RawPointerType &type) = 0;\n+  virtual void visit (AST::ReferenceType &type) = 0;\n+  virtual void visit (AST::ArrayType &type) = 0;\n+  virtual void visit (AST::SliceType &type) = 0;\n+  virtual void visit (AST::InferredType &type) = 0;\n+  virtual void visit (AST::BareFunctionType &type) = 0;\n \n private:\n-  TypeResolution (AST::Crate &crate, TopLevelScan &toplevel);\n-\n-  bool go ();\n-\n-  bool typesAreCompatible (AST::Type *lhs, AST::Type *rhs, Location locus);\n+  virtual bool go () = 0;\n+\n+protected:\n+  Resolution (AST::Crate &crate, TopLevelScan &toplevel)\n+    : crate (crate), toplevel (toplevel)\n+  {\n+    typeScope.Push ();\n+    scope.Push ();\n+  };\n \n   Scope<AST::Type *> scope;\n   Scope<AST::Type *> typeScope;"}]}