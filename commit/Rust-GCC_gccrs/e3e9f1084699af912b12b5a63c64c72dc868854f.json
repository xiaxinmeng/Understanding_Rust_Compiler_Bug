{"sha": "e3e9f1084699af912b12b5a63c64c72dc868854f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNlOWYxMDg0Njk5YWY5MTJiMTJiNWE2M2M2NGM3MmRjODY4ODU0Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2003-05-05T19:31:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2003-05-05T19:31:35Z"}, "message": "builtins.c (expand_builtin_mempcpy): New function.\n\n\t* builtins.c (expand_builtin_mempcpy): New function.\n\t(expand_builtin_stpcpy): Optimize stpcpy whose return value is\n\tignored into strcpy no matter what arguments it has.\n\t(expand_builtin) <case BUILT_IN_MEMPCPY>: Call\n\texpand_builtin_mempcpy.\n\n\t* gcc.c-torture/execute/string-opt-18.c (main): Add 3 new tests.\n\nFrom-SVN: r66498", "tree": {"sha": "28d5a88a130f796c626606f2d26616bec3b414a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28d5a88a130f796c626606f2d26616bec3b414a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3e9f1084699af912b12b5a63c64c72dc868854f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3e9f1084699af912b12b5a63c64c72dc868854f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3e9f1084699af912b12b5a63c64c72dc868854f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3e9f1084699af912b12b5a63c64c72dc868854f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6035d635b5b0bfb86fcb6413f6828d18ab4cf1f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6035d635b5b0bfb86fcb6413f6828d18ab4cf1f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6035d635b5b0bfb86fcb6413f6828d18ab4cf1f2"}], "stats": {"total": 88, "additions": 86, "deletions": 2}, "files": [{"sha": "0b57087b438417e99153edd5831bf22014d4c403", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3e9f1084699af912b12b5a63c64c72dc868854f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3e9f1084699af912b12b5a63c64c72dc868854f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3e9f1084699af912b12b5a63c64c72dc868854f", "patch": "@@ -1,3 +1,11 @@\n+2003-05-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* builtins.c (expand_builtin_mempcpy): New function.\n+\t(expand_builtin_stpcpy): Optimize stpcpy whose return value is\n+\tignored into strcpy no matter what arguments it has.\n+\t(expand_builtin) <case BUILT_IN_MEMPCPY>: Call\n+\texpand_builtin_mempcpy.\n+\n 2003-05-05  Aldy Hernandez  <aldyh@redhat.com>\n \n         * testsuite/gcc.dg/20030505.c: New."}, {"sha": "dfc17e569fdad06886b6589e3f05f790516d3c8c", "filename": "gcc/builtins.c", "status": "modified", "additions": 60, "deletions": 2, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3e9f1084699af912b12b5a63c64c72dc868854f/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3e9f1084699af912b12b5a63c64c72dc868854f/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=e3e9f1084699af912b12b5a63c64c72dc868854f", "patch": "@@ -126,6 +126,8 @@ static rtx expand_builtin_strcspn\tPARAMS ((tree, rtx,\n \t\t\t\t\t\t enum machine_mode));\n static rtx expand_builtin_memcpy\tPARAMS ((tree, rtx,\n \t\t\t\t\t\t enum machine_mode, int));\n+static rtx expand_builtin_mempcpy\tPARAMS ((tree, rtx,\n+\t\t\t\t\t\t enum machine_mode));\n static rtx expand_builtin_memmove\tPARAMS ((tree, rtx,\n \t\t\t\t\t\t enum machine_mode));\n static rtx expand_builtin_bcopy\t\tPARAMS ((tree));\n@@ -2345,6 +2347,43 @@ expand_builtin_memcpy (arglist, target, mode, endp)\n     }\n }\n \n+/* Expand a call to the mempcpy builtin, with arguments in ARGLIST.\n+   Return 0 if we failed the caller should emit a normal call,\n+   otherwise try to get the result in TARGET, if convenient (and in\n+   mode MODE if that's convenient).  */\n+\n+static rtx\n+expand_builtin_mempcpy (arglist, target, mode)\n+     tree arglist;\n+     rtx target;\n+     enum machine_mode mode;\n+{\n+  if (!validate_arglist (arglist,\n+\t\t\t POINTER_TYPE, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE))\n+    return 0;\n+  else\n+    {\n+      /* If return value is ignored, transform mempcpy into memcpy.  */\n+      if (target == const0_rtx)\n+\t{\n+\t  tree fn;\n+\t  rtx ret = expand_builtin_memcpy (arglist, target, mode, /*endp=*/0);\n+\n+\t  if (ret)\n+\t    return ret;\n+\n+\t  fn = implicit_built_in_decls[BUILT_IN_MEMCPY];\n+\t  if (!fn)\n+\t    return 0;\n+\n+\t  return expand_expr (build_function_call_expr (fn, arglist),\n+\t\t\t      target, mode, EXPAND_NORMAL);\n+\t}\n+\n+      return expand_builtin_memcpy (arglist, target, mode, /*endp=*/1);\n+    }\n+}\n+\n /* Expand expression EXP, which is a call to the memmove builtin.  Return 0\n    if we failed the caller should emit a normal call.  */\n \n@@ -2469,7 +2508,26 @@ expand_builtin_stpcpy (arglist, target, mode)\n   else\n     {\n       tree newarglist;\n-      tree len = c_strlen (TREE_VALUE (TREE_CHAIN (arglist)));\n+      tree len;\n+\n+      /* If return value is ignored, transform stpcpy into strcpy.  */\n+      if (target == const0_rtx)\n+\t{\n+\t  tree fn;\n+\t  rtx ret = expand_builtin_strcpy (arglist, target, mode);\n+\n+\t  if (ret)\n+\t    return ret;\n+\n+\t  fn = implicit_built_in_decls[BUILT_IN_STRCPY];\n+\t  if (!fn)\n+\t    return 0;\n+\n+\t  return expand_expr (build_function_call_expr (fn, arglist),\n+\t\t\t      target, mode, EXPAND_NORMAL);\n+\t}\n+\n+      len = c_strlen (TREE_VALUE (TREE_CHAIN (arglist)));\n       if (len == 0)\n \treturn 0;\n \n@@ -4586,7 +4644,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n       break;\n \n     case BUILT_IN_MEMPCPY:\n-      target = expand_builtin_memcpy (arglist, target, mode, /*endp=*/1);\n+      target = expand_builtin_mempcpy (arglist, target, mode);\n       if (target)\n \treturn target;\n       break;"}, {"sha": "536043aba922ab6b59974ae4185cd47bbd1909f8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3e9f1084699af912b12b5a63c64c72dc868854f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3e9f1084699af912b12b5a63c64c72dc868854f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e3e9f1084699af912b12b5a63c64c72dc868854f", "patch": "@@ -1,3 +1,7 @@\n+2003-05-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.c-torture/execute/string-opt-18.c (main): Add 3 new tests.\n+\n 2003-05-05  Geoffrey Keating  <geoffk@apple.com>\n \n \t* gcc.dg/unused-5.c: New test."}, {"sha": "dfa5c169e2dd07a9ccd7219b82dc83f2861711c0", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-18.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3e9f1084699af912b12b5a63c64c72dc868854f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3e9f1084699af912b12b5a63c64c72dc868854f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-18.c?ref=e3e9f1084699af912b12b5a63c64c72dc868854f", "patch": "@@ -15,6 +15,9 @@ extern int memcmp (const void *, const void *, size_t);\n \n const char s1[] = \"123\";\n char p[32] = \"\";\n+char *s2 = \"defg\";\n+char *s3 = \"FGH\";\n+size_t l1 = 1;\n \n int main()\n {\n@@ -60,6 +63,17 @@ int main()\n   if (__builtin_mempcpy (p, \"ABCDE\", 6) != p + 6 || memcmp (p, \"ABCDE\", 6))\n     abort ();\n \n+  /* If the result of stpcpy/mempcpy is ignored, gcc should use\n+     strcpy/memcpy.  */\n+  stpcpy (p + 3, s2);\n+  if (memcmp (p, \"ABCdefg\", 8))\n+    abort ();\n+  mempcpy (p + 5, s3, 1);\n+  if (memcmp (p, \"ABCdeFg\", 8))\n+    abort ();\n+  mempcpy (p + 6, s3 + 1, l1);\n+  if (memcmp (p, \"ABCdeFG\", 8))\n+    abort ();\n   return 0;\n }\n "}]}