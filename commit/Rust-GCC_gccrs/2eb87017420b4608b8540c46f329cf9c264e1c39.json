{"sha": "2eb87017420b4608b8540c46f329cf9c264e1c39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmViODcwMTc0MjBiNDYwOGI4NTQwYzQ2ZjMyOWNmOWMyNjRlMWMzOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-12T13:04:59Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-12T13:04:59Z"}, "message": "[multiple changes]\n\n2013-04-12  Robert Dewar  <dewar@adacore.com>\n\n\t* a-cfdlli.ads, g-socket.adb, s-fileio.adb: Minor reformatting.\n\n2013-04-12  Yannick Moy  <moy@adacore.com>\n\n\t* sem_attr.adb (Analyze_Attribute): Update analyse of\n\tAttribute_Old and Attribute_Result so they are allowed in the\n\tright-hand-side of an association in a Contract_Cases pragma.\n\t* sem_prag.adb (Analyze_CTC_In_Decl_Part): Add pre-analysis of\n\tthe expressions in a Contract_Cases pragma.\n\nFrom-SVN: r197905", "tree": {"sha": "1f32cbed376b2fe44e39b273fd884713fced3dcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f32cbed376b2fe44e39b273fd884713fced3dcb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2eb87017420b4608b8540c46f329cf9c264e1c39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eb87017420b4608b8540c46f329cf9c264e1c39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2eb87017420b4608b8540c46f329cf9c264e1c39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eb87017420b4608b8540c46f329cf9c264e1c39/comments", "author": null, "committer": null, "parents": [{"sha": "9686dbc79e2904ce4047003d78e30c7056321151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9686dbc79e2904ce4047003d78e30c7056321151", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9686dbc79e2904ce4047003d78e30c7056321151"}], "stats": {"total": 128, "additions": 114, "deletions": 14}, "files": [{"sha": "0f68e478b2f43236586b6c2f016370bdf32e5460", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb87017420b4608b8540c46f329cf9c264e1c39/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb87017420b4608b8540c46f329cf9c264e1c39/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2eb87017420b4608b8540c46f329cf9c264e1c39", "patch": "@@ -1,3 +1,15 @@\n+2013-04-12  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-cfdlli.ads, g-socket.adb, s-fileio.adb: Minor reformatting.\n+\n+2013-04-12  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Update analyse of\n+\tAttribute_Old and Attribute_Result so they are allowed in the\n+\tright-hand-side of an association in a Contract_Cases pragma.\n+\t* sem_prag.adb (Analyze_CTC_In_Decl_Part): Add pre-analysis of\n+\tthe expressions in a Contract_Cases pragma.\n+\n 2013-04-12  Robert Dewar  <dewar@adacore.com>\n \n \t* sem.ads, opt.ads: Minor comment edits."}, {"sha": "1078c1f5a341d3c5d852a0777e5086a19bf9fbb5", "filename": "gcc/ada/a-cfdlli.ads", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb87017420b4608b8540c46f329cf9c264e1c39/gcc%2Fada%2Fa-cfdlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb87017420b4608b8540c46f329cf9c264e1c39/gcc%2Fada%2Fa-cfdlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cfdlli.ads?ref=2eb87017420b4608b8540c46f329cf9c264e1c39", "patch": "@@ -49,11 +49,7 @@\n --      function Left  (Container : List; Position : Cursor) return List;\n --      function Right (Container : List; Position : Cursor) return List;\n \n---    See detailed specifications for these subprograms\n-\n---  private with Ada.Streams;\n---  private with Ada.Finalization;\n---  with Ada.Iterator_Interfaces;\n+--    See subprogram specifications that follow for details\n \n generic\n    type Element_Type is private;"}, {"sha": "e186258805a2a001e838179f8e7c1053754ccbd6", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb87017420b4608b8540c46f329cf9c264e1c39/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb87017420b4608b8540c46f329cf9c264e1c39/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=2eb87017420b4608b8540c46f329cf9c264e1c39", "patch": "@@ -733,7 +733,9 @@ package body GNAT.Sockets is\n          end if;\n       end if;\n \n-      --  Wait for socket to become available for writing\n+      --  Wait for socket to become available for writing (unless the Timeout\n+      --  is zero, in which case we consider that it has already expired, and\n+      --  we do not need to wait at all).\n \n       if Timeout = 0.0 then\n          Status := Expired;"}, {"sha": "64b89926753b657236dbc78951b17be40ef5620a", "filename": "gcc/ada/s-fileio.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb87017420b4608b8540c46f329cf9c264e1c39/gcc%2Fada%2Fs-fileio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb87017420b4608b8540c46f329cf9c264e1c39/gcc%2Fada%2Fs-fileio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fileio.adb?ref=2eb87017420b4608b8540c46f329cf9c264e1c39", "patch": "@@ -696,8 +696,8 @@ package body System.File_IO is\n                   Klen := KImage'Length;\n                   To_Lower (KImage);\n \n-                  if Index + Klen - 1 <= Form'Last and then\n-                    Form (Index .. Index + Klen - 1) = KImage\n+                  if Index + Klen - 1 <= Form'Last\n+                    and then Form (Index .. Index + Klen - 1) = KImage\n                   then\n                      case Parm is\n                         when Force_Record_Mode =>"}, {"sha": "888001270034e35d0ed3b190b9e0bdaef5b65b48", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 50, "deletions": 2, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb87017420b4608b8540c46f329cf9c264e1c39/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb87017420b4608b8540c46f329cf9c264e1c39/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=2eb87017420b4608b8540c46f329cf9c264e1c39", "patch": "@@ -4262,7 +4262,7 @@ package body Sem_Attr is\n \n          if In_Spec_Expression then\n \n-            --  Check in postcondition or Ensures clause\n+            --  Check in postcondition, Test_Case or Contract_Cases\n \n             Prag := N;\n             while not Nkind_In (Prag, N_Pragma,\n@@ -4302,6 +4302,30 @@ package body Sem_Attr is\n                   end if;\n                end;\n \n+            elsif Get_Pragma_Id (Prag) = Pragma_Contract_Cases then\n+               declare\n+                  Aggr : constant Node_Id :=\n+                    Expression (First (Pragma_Argument_Associations (Prag)));\n+                  Arg  : Node_Id;\n+\n+               begin\n+                  Arg := N;\n+                  while Arg /= Prag and Parent (Parent (Arg)) /= Aggr loop\n+                     Arg := Parent (Arg);\n+                  end loop;\n+\n+                  --  At this point, Parent (Arg) should be a\n+                  --  N_Component_Association. Attribute Old is only allowed in\n+                  --  the expression part of this association.\n+\n+                  if Nkind (Parent (Arg)) /= N_Component_Association\n+                    or else Arg /= Expression (Parent (Arg))\n+                  then\n+                     Error_Attr\n+                       (\"% attribute misplaced inside contract cases\", P);\n+                  end if;\n+               end;\n+\n             elsif Get_Pragma_Id (Prag) /= Pragma_Postcondition then\n                Error_Attr (\"% attribute can only appear in postcondition\", P);\n             end if;\n@@ -4654,7 +4678,7 @@ package body Sem_Attr is\n                Error_Attr;\n             end if;\n \n-            --  Check in postcondition or Ensures clause of function\n+            --  Check in postcondition, Test_Case or Contract_Cases of function\n \n             Prag := N;\n             while not Nkind_In (Prag, N_Pragma,\n@@ -4695,6 +4719,30 @@ package body Sem_Attr is\n                   end if;\n                end;\n \n+            elsif Get_Pragma_Id (Prag) = Pragma_Contract_Cases then\n+               declare\n+                  Aggr : constant Node_Id :=\n+                    Expression (First (Pragma_Argument_Associations (Prag)));\n+                  Arg  : Node_Id;\n+\n+               begin\n+                  Arg := N;\n+                  while Arg /= Prag and Parent (Parent (Arg)) /= Aggr loop\n+                     Arg := Parent (Arg);\n+                  end loop;\n+\n+                  --  At this point, Parent (Arg) should be a\n+                  --  N_Component_Association. Attribute Result is only\n+                  --  allowed in the expression part of this association.\n+\n+                  if Nkind (Parent (Arg)) /= N_Component_Association\n+                    or else Arg /= Expression (Parent (Arg))\n+                  then\n+                     Error_Attr\n+                       (\"% attribute misplaced inside contract cases\", P);\n+                  end if;\n+               end;\n+\n             elsif Get_Pragma_Id (Prag) /= Pragma_Postcondition then\n                Error_Attr\n                  (\"% attribute can only appear in postcondition of function\","}, {"sha": "230e44bbc408eb6f6d67e18b23969825b034228c", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 46, "deletions": 4, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eb87017420b4608b8540c46f329cf9c264e1c39/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eb87017420b4608b8540c46f329cf9c264e1c39/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=2eb87017420b4608b8540c46f329cf9c264e1c39", "patch": "@@ -248,6 +248,31 @@ package body Sem_Prag is\n    ------------------------------\n \n    procedure Analyze_CTC_In_Decl_Part (N : Node_Id; S : Entity_Id) is\n+\n+      procedure Analyze_Contract_Cases (Aggr : Node_Id);\n+      --  Pre-analyze the guard and consequence expressions of a Contract_Cases\n+      --  pragma/aspect aggregate expression.\n+\n+      procedure Analyze_Contract_Cases (Aggr : Node_Id) is\n+         Case_Guard : Node_Id;\n+         Conseq     : Node_Id;\n+         Post_Case  : Node_Id;\n+      begin\n+         Post_Case := First (Component_Associations (Aggr));\n+         while Present (Post_Case) loop\n+            Case_Guard := First (Choices (Post_Case));\n+            Conseq     := Expression (Post_Case);\n+\n+            --  Preanalyze the boolean expression, we treat this as a spec\n+            --  expression (i.e. similar to a default expression).\n+\n+            Preanalyze_Assert_Expression (Case_Guard, Standard_Boolean);\n+            Preanalyze_Assert_Expression (Conseq, Standard_Boolean);\n+\n+            Next (Post_Case);\n+         end loop;\n+      end Analyze_Contract_Cases;\n+\n    begin\n       --  Install formals and push subprogram spec onto scope stack so that we\n       --  can see the formals from the pragma.\n@@ -258,10 +283,27 @@ package body Sem_Prag is\n       --  Preanalyze the boolean expressions, we treat these as spec\n       --  expressions (i.e. similar to a default expression).\n \n-      Preanalyze_CTC_Args\n-        (N,\n-         Get_Requires_From_CTC_Pragma (N),\n-         Get_Ensures_From_CTC_Pragma (N));\n+      if Pragma_Name (N) = Name_Test_Case\n+        or else Pragma_Name (N) = Name_Contract_Case\n+      then\n+         Preanalyze_CTC_Args\n+           (N,\n+            Get_Requires_From_CTC_Pragma (N),\n+            Get_Ensures_From_CTC_Pragma (N));\n+\n+      elsif Pragma_Name (N) = Name_Contract_Cases then\n+         Analyze_Contract_Cases\n+           (Expression (First (Pragma_Argument_Associations (N))));\n+\n+         --  In ASIS mode, for a pragma generated from a source aspect, also\n+         --  analyze the original aspect expression.\n+\n+         if ASIS_Mode\n+           and then Present (Corresponding_Aspect (N))\n+         then\n+            Analyze_Contract_Cases (Expression (Corresponding_Aspect (N)));\n+         end if;\n+      end if;\n \n       --  Remove the subprogram from the scope stack now that the pre-analysis\n       --  of the expressions in the contract case or test case is done."}]}