{"sha": "6e9d5dfc2911e3acc6039ebfe3837e7ba4be197f", "node_id": "C_kwDOANBUbNoAKDZlOWQ1ZGZjMjkxMWUzYWNjNjAzOWViZmUzODM3ZTdiYTRiZTE5N2Y", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-07-05T20:20:05Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-07-12T17:18:19Z"}, "message": "Fortran: error recovery simplifying PACK with invalid arguments [PR106049]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/106049\n\t* simplify.cc (is_constant_array_expr): A non-zero-sized constant\n\tarray shall have a non-empty constructor.  When the constructor is\n\tempty or missing, treat as non-constant.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/106049\n\t* gfortran.dg/pack_simplify_1.f90: New test.", "tree": {"sha": "389eb082131642ae3cf61d359c38b838a379beee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/389eb082131642ae3cf61d359c38b838a379beee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e9d5dfc2911e3acc6039ebfe3837e7ba4be197f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e9d5dfc2911e3acc6039ebfe3837e7ba4be197f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e9d5dfc2911e3acc6039ebfe3837e7ba4be197f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e9d5dfc2911e3acc6039ebfe3837e7ba4be197f/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cab411a2b4b4f6a6b619d0650fade85288a31f9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cab411a2b4b4f6a6b619d0650fade85288a31f9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cab411a2b4b4f6a6b619d0650fade85288a31f9e"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "fb7259946537c5188b39d3d4b8aa024fe148a4d8", "filename": "gcc/fortran/simplify.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9d5dfc2911e3acc6039ebfe3837e7ba4be197f/gcc%2Ffortran%2Fsimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9d5dfc2911e3acc6039ebfe3837e7ba4be197f/gcc%2Ffortran%2Fsimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.cc?ref=6e9d5dfc2911e3acc6039ebfe3837e7ba4be197f", "patch": "@@ -233,6 +233,18 @@ is_constant_array_expr (gfc_expr *e)\n   if (e->expr_type != EXPR_ARRAY || !gfc_is_constant_expr (e))\n     return false;\n \n+  /* A non-zero-sized constant array shall have a non-empty constructor.  */\n+  if (e->rank > 0 && e->shape != NULL && e->value.constructor == NULL)\n+    {\n+      mpz_init_set_ui (size, 1);\n+      for (int j = 0; j < e->rank; j++)\n+\tmpz_mul (size, size, e->shape[j]);\n+      bool not_size0 = (mpz_cmp_si (size, 0) != 0);\n+      mpz_clear (size);\n+      if (not_size0)\n+\treturn false;\n+    }\n+\n   for (c = gfc_constructor_first (e->value.constructor);\n        c; c = gfc_constructor_next (c))\n     if (c->expr->expr_type != EXPR_CONSTANT"}, {"sha": "06bc55a14f3edc3736c02c5f8aafa720081c7ca7", "filename": "gcc/testsuite/gfortran.dg/pack_simplify_1.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9d5dfc2911e3acc6039ebfe3837e7ba4be197f/gcc%2Ftestsuite%2Fgfortran.dg%2Fpack_simplify_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9d5dfc2911e3acc6039ebfe3837e7ba4be197f/gcc%2Ftestsuite%2Fgfortran.dg%2Fpack_simplify_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpack_simplify_1.f90?ref=6e9d5dfc2911e3acc6039ebfe3837e7ba4be197f", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+! PR fortran/106049 - ICE in gfc_simplify_pack\n+! Contributed by G.Steinmetz\n+\n+program p\n+  type t\n+  end type\n+  logical, parameter :: m(0) = [ logical :: ]\n+  type(t), parameter :: a(0) = [ t :: ]\n+  type(t), parameter :: b(1) = [ t()  ]\n+  type(t), parameter :: c(1) = [ t :: ]        ! { dg-error \"Different shape\" }\n+  type(t), parameter :: d(0) = pack(a, m)\n+  type(t), parameter :: e(1) = pack(b, [.true.])\n+  type(t), parameter :: f(1) = pack(c, [.true.])\n+end"}]}