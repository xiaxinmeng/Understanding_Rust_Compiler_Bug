{"sha": "9e47051a3785f6a55dc63f9a1eaeccd19895c18c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU0NzA1MWEzNzg1ZjZhNTVkYzYzZjlhMWVhZWNjZDE5ODk1YzE4Yw==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2021-02-10T15:52:04Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-15T10:19:30Z"}, "message": "[Ada] AI12-0138: Iterators and other nonoverridable aspects\n\ngcc/ada/\n\n\t* sem_util.adb (Is_Confirming): Separate the handling of\n\tImplicit_Dereference, for which no pragma is generated but which\n\tis already checked for legality in Sem_Ch13, including renamed\n\tdiscriminants in a derived type.\n\t(Is_Confirming, Same_Name): For expanded names, only check\n\tmatching of selector, because prefix may correspond to original\n\tand derived types with different names and/or scopes. Semantic\n\tchecks on aspect expression have already verified its legality.\n\tAdd comments regarding possible gaps in RM description of the\n\tfeature.", "tree": {"sha": "aa32d64e82581a5045ba7c89d797cea06224fdcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa32d64e82581a5045ba7c89d797cea06224fdcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e47051a3785f6a55dc63f9a1eaeccd19895c18c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e47051a3785f6a55dc63f9a1eaeccd19895c18c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e47051a3785f6a55dc63f9a1eaeccd19895c18c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e47051a3785f6a55dc63f9a1eaeccd19895c18c/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d4fbcb4c98bc593e7e9ff7e0202d622d6c64f73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d4fbcb4c98bc593e7e9ff7e0202d622d6c64f73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d4fbcb4c98bc593e7e9ff7e0202d622d6c64f73"}], "stats": {"total": 30, "additions": 25, "deletions": 5}, "files": [{"sha": "20246823d88754c41ea9ed72cc6a6067c0e5e361", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e47051a3785f6a55dc63f9a1eaeccd19895c18c/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e47051a3785f6a55dc63f9a1eaeccd19895c18c/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=9e47051a3785f6a55dc63f9a1eaeccd19895c18c", "patch": "@@ -15886,18 +15886,32 @@ package body Sem_Util is\n                            Aspect_Spec_1, Aspect_Spec_2 : Node_Id)\n                           return Boolean is\n       function Names_Match (Nm1, Nm2 : Node_Id) return Boolean;\n+\n+      -----------------\n+      -- Names_Match --\n+      -----------------\n+\n       function Names_Match (Nm1, Nm2 : Node_Id) return Boolean is\n       begin\n          if Nkind (Nm1) /= Nkind (Nm2) then\n             return False;\n+            --  This may be too restrictive given that visibility\n+            --  may allow an identifier in one case and an expanded\n+            --  name in the other.\n          end if;\n          case Nkind (Nm1) is\n             when N_Identifier =>\n                return Name_Equals (Chars (Nm1), Chars (Nm2));\n+\n             when N_Expanded_Name =>\n-               return Names_Match (Prefix (Nm1), Prefix (Nm2))\n-                 and then Names_Match (Selector_Name (Nm1),\n-                                       Selector_Name (Nm2));\n+               --  An inherited operation has the same name as its\n+               --  ancestor, but they may have different scopes.\n+               --  This may be too permissive for Iterator_Element, which\n+               --  is intended to be identical in parent and derived type.\n+\n+               return Names_Match (Selector_Name (Nm1),\n+                                   Selector_Name (Nm2));\n+\n             when N_Empty =>\n                return True; -- needed for Aggregate aspect checking\n \n@@ -15925,8 +15939,7 @@ package body Sem_Util is\n          when Aspect_Default_Iterator\n             | Aspect_Iterator_Element\n             | Aspect_Constant_Indexing\n-            | Aspect_Variable_Indexing\n-            | Aspect_Implicit_Dereference =>\n+            | Aspect_Variable_Indexing =>\n             declare\n                Item_1 : constant Node_Id := Aspect_Rep_Item (Aspect_Spec_1);\n                Item_2 : constant Node_Id := Aspect_Rep_Item (Aspect_Spec_2);\n@@ -15942,6 +15955,13 @@ package body Sem_Util is\n                                    Expression (Item_2));\n             end;\n \n+         --  A confirming aspect for Implicit_Derenfence on a derived type\n+         --  has already been checked in Analyze_Aspect_Implicit_Dereference,\n+         --  including the presence of renamed discriminants.\n+\n+         when Aspect_Implicit_Dereference =>\n+            return True;\n+\n          --  one of a kind\n          when Aspect_Aggregate =>\n             declare"}]}