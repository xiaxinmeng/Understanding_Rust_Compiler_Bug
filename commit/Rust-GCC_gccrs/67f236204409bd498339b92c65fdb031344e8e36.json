{"sha": "67f236204409bd498339b92c65fdb031344e8e36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdmMjM2MjA0NDA5YmQ0OTgzMzliOTJjNjVmZGIwMzEzNDRlOGUzNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-09-15T02:09:05Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-09-15T02:09:05Z"}, "message": "re PR middle-end/17397 (gimplify ICE)\n\n\tPR middle-end/17397\n\t* gimplify.c (gimplify_addr_expr): Don't inadvertently change types\n\twhile folding <ADDR_EXPR <INDIRECT_REF X>>.\n\nFrom-SVN: r87528", "tree": {"sha": "0def536aabaa0d13bd39500073f84cb635da145e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0def536aabaa0d13bd39500073f84cb635da145e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67f236204409bd498339b92c65fdb031344e8e36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67f236204409bd498339b92c65fdb031344e8e36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67f236204409bd498339b92c65fdb031344e8e36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67f236204409bd498339b92c65fdb031344e8e36/comments", "author": null, "committer": null, "parents": [{"sha": "5ffcd77909762ca7091b915aef658f28c635ed36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ffcd77909762ca7091b915aef658f28c635ed36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ffcd77909762ca7091b915aef658f28c635ed36"}], "stats": {"total": 61, "additions": 51, "deletions": 10}, "files": [{"sha": "ff7e392a1779bd6e05cba307584fe3e9ea4021ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f236204409bd498339b92c65fdb031344e8e36/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f236204409bd498339b92c65fdb031344e8e36/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67f236204409bd498339b92c65fdb031344e8e36", "patch": "@@ -1,3 +1,9 @@\n+2004-09-14  Richard Henderson  <rth@redhat.com>\n+\n+\tPR middle-end/17397\n+\t* gimplify.c (gimplify_addr_expr): Don't inadvertently change types\n+\twhile folding <ADDR_EXPR <INDIRECT_REF X>>.\n+\n 2004-09-14  Andrew Pinski  <apinski@apple.com>\n \n \t* tree-ssa-copy.c (may_propagate_copy): Don't check the aliasing"}, {"sha": "027fd052b111fc7280c167252a407e30abb69cba", "filename": "gcc/gimplify.c", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f236204409bd498339b92c65fdb031344e8e36/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f236204409bd498339b92c65fdb031344e8e36/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=67f236204409bd498339b92c65fdb031344e8e36", "patch": "@@ -74,6 +74,9 @@ typedef struct gimple_temp_hash_elt\n \n /* Forward declarations.  */\n static enum gimplify_status gimplify_compound_expr (tree *, tree *, bool);\n+#ifdef ENABLE_CHECKING\n+static bool cpt_same_type (tree a, tree b);\n+#endif\n \n \n /* Return a hash value for a formal temporary table entry.  */\n@@ -3051,12 +3054,34 @@ gimplify_addr_expr (tree *expr_p, tree *pre_p, tree *post_p)\n   switch (TREE_CODE (op0))\n     {\n     case INDIRECT_REF:\n+    do_indirect_ref:\n       /* Check if we are dealing with an expression of the form '&*ptr'.\n \t While the front end folds away '&*ptr' into 'ptr', these\n \t expressions may be generated internally by the compiler (e.g.,\n \t builtins like __builtin_va_end).  */\n-      *expr_p = TREE_OPERAND (op0, 0);\n-      ret = GS_OK;\n+      /* Caution: the silent array decomposition semantics we allow for\n+\t ADDR_EXPR means we can't always discard the pair.  */\n+      {\n+\ttree op00 = TREE_OPERAND (op0, 0);\n+\ttree t_expr = TREE_TYPE (expr);\n+\ttree t_op00 = TREE_TYPE (op00);\n+\n+        if (!lang_hooks.types_compatible_p (t_expr, t_op00))\n+\t  {\n+#ifdef ENABLE_CHECKING\n+\t    tree t_op0 = TREE_TYPE (op0);\n+\t    gcc_assert (TREE_CODE (t_op0) == ARRAY_TYPE\n+\t\t\t&& POINTER_TYPE_P (t_expr)\n+\t\t\t&& cpt_same_type (TREE_TYPE (t_op0),\n+\t\t\t\t\t  TREE_TYPE (t_expr))\n+\t\t\t&& POINTER_TYPE_P (t_op00)\n+\t\t\t&& cpt_same_type (t_op0, TREE_TYPE (t_op00)));\n+#endif\n+\t    op00 = fold_convert (TREE_TYPE (expr), op00);\n+\t  }\n+        *expr_p = op00;\n+        ret = GS_OK;\n+      }\n       break;\n \n     case VIEW_CONVERT_EXPR:\n@@ -3079,14 +3104,12 @@ gimplify_addr_expr (tree *expr_p, tree *pre_p, tree *post_p)\n \t\t\t   is_gimple_addressable, fb_either);\n       if (ret != GS_ERROR)\n \t{\n-\t  /* The above may have made an INDIRECT_REF (e.g, Ada's NULL_EXPR),\n-\t     so check for it here.  It's not worth checking for the other\n-\t     cases above.  */\n-\t  if (TREE_CODE (TREE_OPERAND (expr, 0)) == INDIRECT_REF)\n-\t    {\n-\t      *expr_p = TREE_OPERAND (TREE_OPERAND (expr, 0), 0);\n-\t      break;\n-\t    }\n+\t  op0 = TREE_OPERAND (expr, 0);\n+\n+\t  /* For various reasons, the gimplification of the expression\n+\t     may have made a new INDIRECT_REF.  */\n+\t  if (TREE_CODE (op0) == INDIRECT_REF)\n+\t    goto do_indirect_ref;\n \n \t  /* Make sure TREE_INVARIANT, TREE_CONSTANT, and TREE_SIDE_EFFECTS\n \t     is set properly.  */"}, {"sha": "b857472f65f278b8c76e3fef699185c05abf9451", "filename": "gcc/testsuite/gcc.c-torture/compile/pr17397.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f236204409bd498339b92c65fdb031344e8e36/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr17397.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f236204409bd498339b92c65fdb031344e8e36/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr17397.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr17397.c?ref=67f236204409bd498339b92c65fdb031344e8e36", "patch": "@@ -0,0 +1,12 @@\n+/* ICE due to invalid GIMPLE created during strlen simplification.  */\n+\n+extern unsigned long strlen (__const char *__s);\n+extern void bar ();\n+extern int cols;\n+\n+void foo (void)\n+{\n+  char s[cols + 2];\n+  if (strlen (s) > 0)\n+    bar ();\n+}"}]}