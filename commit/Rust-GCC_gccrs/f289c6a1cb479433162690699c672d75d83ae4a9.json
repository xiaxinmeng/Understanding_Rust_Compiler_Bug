{"sha": "f289c6a1cb479433162690699c672d75d83ae4a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI4OWM2YTFjYjQ3OTQzMzE2MjY5MDY5OWM2NzJkNzVkODNhZTRhOQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-01-09T22:49:35Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-01-09T22:49:35Z"}, "message": "predicates.md (binary_float_operator, [...]): Remove redundant conditionals.\n\n\t* config/sh/predicates.md (binary_float_operator,\n\tbinary_logical_operator, commutative_float_operator,\n\tequality_comparison_operator, greater_comparison_operator,\n\tless_comparison_operator, logical_operator,\n\tnoncommutative_float_operator, shift_operator,\n\tsymbol_ref_operand, unary_float_operator): Remove redundant\n\tconditionals.\n\nFrom-SVN: r109512", "tree": {"sha": "679e42eebbfd03a9b539b9a0cd103d1174eadb8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/679e42eebbfd03a9b539b9a0cd103d1174eadb8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f289c6a1cb479433162690699c672d75d83ae4a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f289c6a1cb479433162690699c672d75d83ae4a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f289c6a1cb479433162690699c672d75d83ae4a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f289c6a1cb479433162690699c672d75d83ae4a9/comments", "author": null, "committer": null, "parents": [{"sha": "cc2804f14fb5443a0ffa668ff8fe89c7a7bb7746", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc2804f14fb5443a0ffa668ff8fe89c7a7bb7746", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc2804f14fb5443a0ffa668ff8fe89c7a7bb7746"}], "stats": {"total": 175, "additions": 30, "deletions": 145}, "files": [{"sha": "26f62eb810e7e70d0c6f390423d96892d13dd9c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f289c6a1cb479433162690699c672d75d83ae4a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f289c6a1cb479433162690699c672d75d83ae4a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f289c6a1cb479433162690699c672d75d83ae4a9", "patch": "@@ -1,4 +1,14 @@\n-2005-01-09  Jeff Law  <law@redhat.com>\n+2006-01-09  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* config/sh/predicates.md (binary_float_operator,\n+\tbinary_logical_operator, commutative_float_operator,\n+\tequality_comparison_operator, greater_comparison_operator,\n+\tless_comparison_operator, logical_operator,\n+\tnoncommutative_float_operator, shift_operator,\n+\tsymbol_ref_operand, unary_float_operator): Remove redundant\n+\tconditionals.\n+\n+2006-01-09  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-dom.c (simplify_cond_and_lookup_avail_expr): Remove\n \tcode to propagate the RHS of a cast into COND_EXPR_COND.  Remove\n@@ -94,7 +104,7 @@\n \t* config/darwin.c (darwin_emit_except_table_label): Define.\n \t* config/darwin.h (TARGET_ASM_EMIT_EXCEPT_TABLE): Ditto.\n \n-2005-01-06  Zdenek Dvorak <dvorakz@suse.cz>\n+2006-01-06  Zdenek Dvorak <dvorakz@suse.cz>\n \n \tPR tree-optimization/18527\n \t* tree-ssa-loop-niter.c (number_of_iterations_cond,\n@@ -114,7 +124,7 @@\n \t* tree-ssa-loop-ivopts.c (determine_biv_step, find_givs_in_stmt_scev,\n \tfind_givs_in_stmt): Changed due to simple_iv change.\n \n-2005-01-06  Jeff Law  <law@redhat.com>\n+2006-01-06  Jeff Law  <law@redhat.com>\n \n \tPR ada/24994\n \t* tree-cfg.c (bsi_replace): Rename final argument from\n@@ -302,7 +312,7 @@\n \t(c_parser_new): Merge into ...\n \t(c_parse_file): ... here.  Call c_parser_pragma_pch_preprocess.\n \n-2005-01-04  Jeff Law  <law@redhat.com>\n+2006-01-04  Jeff Law  <law@redhat.com>\n \n \tPR ada/24994\n \t* tree-cfg.c (bsi_replace): Remove the original statement"}, {"sha": "10367dd92a9b8e618f70a9f18d36816f20f6c6c7", "filename": "gcc/config/sh/predicates.md", "status": "modified", "additions": 16, "deletions": 141, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f289c6a1cb479433162690699c672d75d83ae4a9/gcc%2Fconfig%2Fsh%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f289c6a1cb479433162690699c672d75d83ae4a9/gcc%2Fconfig%2Fsh%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fpredicates.md?ref=f289c6a1cb479433162690699c672d75d83ae4a9", "patch": "@@ -207,41 +207,14 @@\n ;; TODO: Add a comment here.\n \n (define_predicate \"binary_float_operator\"\n-  (match_code \"plus,minus,mult,div\")\n-{\n-  if (GET_MODE (op) != mode)\n-    return 0;\n-  switch (GET_CODE (op))\n-    {\n-    case PLUS:\n-    case MINUS:\n-    case MULT:\n-    case DIV:\n-      return 1;\n-    default:\n-      break;\n-    }\n-  return 0;\n-})\n+  (and (match_code \"plus,minus,mult,div\")\n+       (match_test \"GET_MODE (op) == mode\")))\n \n ;; TODO: Add a comment here.\n \n (define_predicate \"binary_logical_operator\"\n-  (match_code \"and,ior,xor\")\n-{\n-  if (GET_MODE (op) != mode)\n-    return 0;\n-  switch (GET_CODE (op))\n-    {\n-    case IOR:\n-    case AND:\n-    case XOR:\n-      return 1;\n-    default:\n-      break;\n-    }\n-  return 0;\n-})\n+  (and (match_code \"and,ior,xor\")\n+       (match_test \"GET_MODE (op) == mode\")))\n \n ;; TODO: Add a comment here.\n \n@@ -290,29 +263,13 @@\n ;; TODO: Add a comment here.\n \n (define_predicate \"commutative_float_operator\"\n-  (match_code \"plus,mult\")\n-{\n-  if (GET_MODE (op) != mode)\n-    return 0;\n-  switch (GET_CODE (op))\n-    {\n-    case PLUS:\n-    case MULT:\n-      return 1;\n-    default:\n-      break;\n-    }\n-  return 0;\n-})\n+  (and (match_code \"plus,mult\")\n+       (match_test \"GET_MODE (op) == mode\")))\n \n ;; TODO: Add a comment here.\n \n (define_predicate \"equality_comparison_operator\"\n-  (match_code \"eq,ne\")\n-{\n-  return ((mode == VOIDmode || GET_MODE (op) == mode)\n-\t  && (GET_CODE (op) == EQ || GET_CODE (op) == NE));\n-})\n+  (match_code \"eq,ne\"))\n \n ;; TODO: Add a comment here.\n \n@@ -494,21 +451,7 @@\n ;; TODO: Add a comment here.\n \n (define_predicate \"greater_comparison_operator\"\n-  (match_code \"gt,ge,gtu,geu\")\n-{\n-  if (mode != VOIDmode && GET_MODE (op) != mode)\n-    return 0;\n-  switch (GET_CODE (op))\n-    {\n-    case GT:\n-    case GE:\n-    case GTU:\n-    case GEU:\n-      return 1;\n-    default:\n-      return 0;\n-    }\n-})\n+  (match_code \"gt,ge,gtu,geu\"))\n \n ;; TODO: Add a comment here.\n \n@@ -541,21 +484,7 @@\n ;; TODO: Add a comment here.\n \n (define_predicate \"less_comparison_operator\"\n-  (match_code \"lt,le,ltu,leu\")\n-{\n-  if (mode != VOIDmode && GET_MODE (op) != mode)\n-    return 0;\n-  switch (GET_CODE (op))\n-    {\n-    case LT:\n-    case LE:\n-    case LTU:\n-    case LEU:\n-      return 1;\n-    default:\n-      return 0;\n-    }\n-})\n+  (match_code \"lt,le,ltu,leu\"))\n \n ;; Returns 1 if OP is a valid source operand for a logical operation.\n \n@@ -586,20 +515,7 @@\n ;; TODO: Add a comment here.\n \n (define_predicate \"logical_operator\"\n-  (match_code \"and,ior,xor\")\n-{\n-  if (mode != VOIDmode && GET_MODE (op) != mode)\n-    return 0;\n-  switch (GET_CODE (op))\n-    {\n-    case AND:\n-    case IOR:\n-    case XOR:\n-      return 1;\n-    default:\n-      return 0;\n-    }\n-})\n+  (match_code \"and,ior,xor\"))\n \n ;; Like arith_reg_operand, but for register source operands of narrow\n ;; logical SHMEDIA operations: forbid subregs of DImode / TImode regs.\n@@ -639,20 +555,8 @@\n ;; TODO: Add a comment here.\n \n (define_predicate \"noncommutative_float_operator\"\n-  (match_code \"minus,div\")\n-{\n-  if (GET_MODE (op) != mode)\n-    return 0;\n-  switch (GET_CODE (op))\n-    {\n-    case MINUS:\n-    case DIV:\n-      return 1;\n-    default:\n-      break;\n-    }\n-  return 0;\n-})\n+  (and (match_code \"minus,div\")\n+       (match_test \"GET_MODE (op) == mode\")))\n \n ;; TODO: Add a comment here.\n \n@@ -783,28 +687,12 @@\n ;; TODO: Add a comment here.\n \n (define_predicate \"shift_operator\"\n-  (match_code \"ashift,ashiftrt,lshiftrt\")\n-{\n-  if (mode != VOIDmode && GET_MODE (op) != mode)\n-    return 0;\n-  switch (GET_CODE (op))\n-    {\n-    case ASHIFT:\n-    case ASHIFTRT:\n-    case LSHIFTRT:\n-      return 1;\n-    default:\n-      return 0;\n-    }\n-})\n+  (match_code \"ashift,ashiftrt,lshiftrt\"))\n \n ;; TODO: Add a comment here.\n \n (define_predicate \"symbol_ref_operand\"\n-  (match_code \"symbol_ref\")\n-{\n-  return (GET_CODE (op) == SYMBOL_REF);\n-})\n+  (match_code \"symbol_ref\"))\n \n ;; Same as target_reg_operand, except that label_refs and symbol_refs\n ;; are accepted before reload.\n@@ -884,21 +772,8 @@\n ;; TODO: Add a comment here.\n \n (define_predicate \"unary_float_operator\"\n-  (match_code \"abs,neg,sqrt\")\n-{\n-  if (GET_MODE (op) != mode)\n-    return 0;\n-  switch (GET_CODE (op))\n-    {\n-    case ABS:\n-    case NEG:\n-    case SQRT:\n-      return 1;\n-    default:\n-      break;\n-    }\n-  return 0;\n-})\n+  (and (match_code \"abs,neg,sqrt\")\n+       (match_test \"GET_MODE (op) == mode\")))\n \n ;; Return 1 if OP is a valid source operand for xor.\n "}]}