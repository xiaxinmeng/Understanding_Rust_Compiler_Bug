{"sha": "1201ebed5a36e1d766b951e7b51fdae7784a7e25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIwMWViZWQ1YTM2ZTFkNzY2Yjk1MWU3YjUxZmRhZTc3ODRhN2UyNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2004-06-10T05:32:44Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2004-06-10T05:32:44Z"}, "message": "clean up obsolete comment\n\nFrom-SVN: r82885", "tree": {"sha": "f91c7328da9b4b03e6544301f8ad93965672a8da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f91c7328da9b4b03e6544301f8ad93965672a8da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1201ebed5a36e1d766b951e7b51fdae7784a7e25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1201ebed5a36e1d766b951e7b51fdae7784a7e25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1201ebed5a36e1d766b951e7b51fdae7784a7e25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1201ebed5a36e1d766b951e7b51fdae7784a7e25/comments", "author": null, "committer": null, "parents": [{"sha": "dbfa8d15358235cfda20583a3c0c557bf50138c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbfa8d15358235cfda20583a3c0c557bf50138c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbfa8d15358235cfda20583a3c0c557bf50138c6"}], "stats": {"total": 17, "additions": 2, "deletions": 15}, "files": [{"sha": "d6b24320aa0e95965ff824690118d47c23a3fa65", "filename": "gcc/c-gimplify.c", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1201ebed5a36e1d766b951e7b51fdae7784a7e25/gcc%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1201ebed5a36e1d766b951e7b51fdae7784a7e25/gcc%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-gimplify.c?ref=1201ebed5a36e1d766b951e7b51fdae7784a7e25", "patch": "@@ -833,21 +833,8 @@ gimplify_return_stmt (tree *stmt_p)\n   return GS_OK;\n }\n \n-/* Gimplifies a DECL_STMT node T.\n-\n-   If a declaration V has an initial value I, create an expression 'V = I'\n-   and insert it after the DECL_STMT.\n-\n-   PRE_P is a queue for effects that should happen before the DECL_STMT.\n-\n-   MID_P is a queue for effects that should happen after the DECL_STMT,\n-   but before uses of the initialized decl.\n-\n-   POST_P is a queue for effects that should happen after uses of the\n-   initialized decl.\n-\n-   Usually these last two will be the same, but they may need to be\n-   different if the DECL_STMT is somehow embedded in an expression.  */\n+/* Gimplifies a DECL_STMT node *STMT_P by making any necessary allocation\n+   and initialization explicit.  */\n \n static enum gimplify_status\n gimplify_decl_stmt (tree *stmt_p)"}]}