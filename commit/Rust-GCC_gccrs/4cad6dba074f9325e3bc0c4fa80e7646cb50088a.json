{"sha": "4cad6dba074f9325e3bc0c4fa80e7646cb50088a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNhZDZkYmEwNzRmOTMyNWUzYmMwYzRmYTgwZTc2NDZjYjUwMDg4YQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2010-02-03T12:36:27Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2010-02-03T12:36:27Z"}, "message": "invoke.texi: Fix name of sched1 dump.\n\n\t* doc/invoke.texi: Fix name of sched1 dump.\n\n\t* opts.c (decode_options): Set flag_tree_switch_conversion\n\tonly conditionally on optimize >= 2.\n\n\t* gcse.c: Assorted comment fixes in pass description.\n\nFrom-SVN: r156466", "tree": {"sha": "4e37153ee8a5f7b27eccc8b2bc61df62c1374482", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e37153ee8a5f7b27eccc8b2bc61df62c1374482"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cad6dba074f9325e3bc0c4fa80e7646cb50088a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cad6dba074f9325e3bc0c4fa80e7646cb50088a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cad6dba074f9325e3bc0c4fa80e7646cb50088a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cad6dba074f9325e3bc0c4fa80e7646cb50088a/comments", "author": null, "committer": null, "parents": [{"sha": "693ee8cf85c6ea81151a2db2dffe8b9c05af2ddf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/693ee8cf85c6ea81151a2db2dffe8b9c05af2ddf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/693ee8cf85c6ea81151a2db2dffe8b9c05af2ddf"}], "stats": {"total": 41, "additions": 16, "deletions": 25}, "files": [{"sha": "62f96ffc251168ba7b02bbacee4171833a26ac73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cad6dba074f9325e3bc0c4fa80e7646cb50088a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cad6dba074f9325e3bc0c4fa80e7646cb50088a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4cad6dba074f9325e3bc0c4fa80e7646cb50088a", "patch": "@@ -1,3 +1,12 @@\n+2010-02-03  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* doc/invoke.texi: Fix name of sched1 dump.\n+\n+\t* opts.c (decode_options): Set flag_tree_switch_conversion\n+\tonly conditionally on optimize >= 2.\n+\n+\t* gcse.c: Assorted comment fixes in pass description.\n+\n 2010-02-03  Anthony Green  <green@moxielogic.com>\n \n \t* config/moxie/moxie.c (moxie_asm_trampoline_template): Introduce"}, {"sha": "e6a1367de9b4dfb3cc3cf59085745e0d2fc5dd17", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cad6dba074f9325e3bc0c4fa80e7646cb50088a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cad6dba074f9325e3bc0c4fa80e7646cb50088a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=4cad6dba074f9325e3bc0c4fa80e7646cb50088a", "patch": "@@ -5397,7 +5397,7 @@ On targets that use instruction scheduling, this option controls the\n amount of debugging output the scheduler prints.  This information is\n written to standard error, unless @option{-fdump-rtl-sched1} or\n @option{-fdump-rtl-sched2} is specified, in which case it is output\n-to the usual dump listing file, @file{.sched} or @file{.sched2}\n+to the usual dump listing file, @file{.sched1} or @file{.sched2}\n respectively.  However for @var{n} greater than nine, the output is\n always printed to standard error.\n "}, {"sha": "432e34d478ebd57b30db7b642cef0bf110223bbc", "filename": "gcc/gcse.c", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cad6dba074f9325e3bc0c4fa80e7646cb50088a/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cad6dba074f9325e3bc0c4fa80e7646cb50088a/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=4cad6dba074f9325e3bc0c4fa80e7646cb50088a", "patch": "@@ -171,20 +171,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dbgcnt.h\"\n #include \"target.h\"\n \n-/* Propagate flow information through back edges and thus enable PRE's\n-   moving loop invariant calculations out of loops.\n-\n-   Originally this tended to create worse overall code, but several\n-   improvements during the development of PRE seem to have made following\n-   back edges generally a win.\n-\n-   Note much of the loop invariant code motion done here would normally\n-   be done by loop.c, which has more heuristics for when to move invariants\n-   out of loops.  At some point we might need to move some of those\n-   heuristics into gcse.c.  */\n-\n /* We support GCSE via Partial Redundancy Elimination.  PRE optimizations\n-   are a superset of those done by GCSE.\n+   are a superset of those done by classic GCSE.\n \n    We perform the following steps:\n \n@@ -199,8 +187,6 @@ along with GCC; see the file COPYING3.  If not see\n       conditional jumps if the condition can be computed from a value of\n       an incoming edge.\n \n-   5) Perform store motion.\n-\n    Two passes of copy/constant propagation are done because the first one\n    enables more GCSE and the second one helps to clean up the copies that\n    GCSE creates.  This is needed more for PRE than for Classic because Classic\n@@ -212,18 +198,14 @@ along with GCC; see the file COPYING3.  If not see\n    (set (pseudo-reg) (expression)).\n    Function want_to_gcse_p says what these are.\n \n-   In addition, expressions in REG_EQUAL notes are candidates for GXSE-ing.\n+   In addition, expressions in REG_EQUAL notes are candidates for GCSE-ing.\n    This allows PRE to hoist expressions that are expressed in multiple insns,\n-   such as comprex address calculations (e.g. for PIC code, or loads with a\n-   high part and as lowe part).\n+   such as complex address calculations (e.g. for PIC code, or loads with a\n+   high part and a low part).\n \n    PRE handles moving invariant expressions out of loops (by treating them as\n    partially redundant).\n \n-   Eventually it would be nice to replace cse.c/gcse.c with SSA (static single\n-   assignment) based GVN (global value numbering).  L. T. Simpson's paper\n-   (Rice University) on value numbering is a useful reference for this.\n-\n    **********************\n \n    We used to support multiple passes but there are diminishing returns in\n@@ -271,7 +253,7 @@ along with GCC; see the file COPYING3.  If not see\n    argue it is not.  The number of iterations for the algorithm to converge\n    is typically 2-4 so I don't view it as that expensive (relatively speaking).\n \n-   PRE GCSE depends heavily on the second CSE pass to clean up the copies\n+   PRE GCSE depends heavily on the second CPROP pass to clean up the copies\n    we create.  To make an expression reach the place where it's redundant,\n    the result of the expression is copied to a new register, and the redundant\n    expression is deleted by replacing it with this new register.  Classic GCSE"}, {"sha": "75c2d525bb068fe9ce3209c4943d58c802acb58c", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cad6dba074f9325e3bc0c4fa80e7646cb50088a/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cad6dba074f9325e3bc0c4fa80e7646cb50088a/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=4cad6dba074f9325e3bc0c4fa80e7646cb50088a", "patch": "@@ -898,7 +898,7 @@ decode_options (unsigned int argc, const char **argv)\n   flag_tree_vrp = opt2;\n   flag_tree_builtin_call_dce = opt2;\n   flag_tree_pre = opt2;\n-  flag_tree_switch_conversion = 1;\n+  flag_tree_switch_conversion = opt2;\n   flag_ipa_cp = opt2;\n   flag_ipa_sra = opt2;\n "}]}