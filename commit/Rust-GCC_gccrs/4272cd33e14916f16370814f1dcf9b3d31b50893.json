{"sha": "4272cd33e14916f16370814f1dcf9b3d31b50893", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI3MmNkMzNlMTQ5MTZmMTYzNzA4MTRmMWRjZjliM2QzMWI1MDg5Mw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-06-01T10:44:07Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-06-01T10:44:07Z"}, "message": "[ARM] Use proper output modifier for DImode register in store exclusive patterns\n\n\t* config/arm/sync.md (arm_store_exclusive<mode>):\n\tUse 'H' output modifier on operands[2] rather than creating a new\n\tentry in out-of-bounds memory of the operands array.\n\t(arm_store_release_exclusivedi): Likewise.\n\nFrom-SVN: r236984", "tree": {"sha": "c123705aabb7badac4b55d231fda239130b1c9da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c123705aabb7badac4b55d231fda239130b1c9da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4272cd33e14916f16370814f1dcf9b3d31b50893", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4272cd33e14916f16370814f1dcf9b3d31b50893", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4272cd33e14916f16370814f1dcf9b3d31b50893", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4272cd33e14916f16370814f1dcf9b3d31b50893/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "39fa4aec86086b874af53424da8a6d4f5217729b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39fa4aec86086b874af53424da8a6d4f5217729b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39fa4aec86086b874af53424da8a6d4f5217729b"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "0bb7f286c8ed104cb9a4bf3a68dd99d49e5ed73f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4272cd33e14916f16370814f1dcf9b3d31b50893/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4272cd33e14916f16370814f1dcf9b3d31b50893/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4272cd33e14916f16370814f1dcf9b3d31b50893", "patch": "@@ -1,3 +1,10 @@\n+2016-06-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/sync.md (arm_store_exclusive<mode>):\n+\tUse 'H' output modifier on operands[2] rather than creating a new\n+\tentry in out-of-bounds memory of the operands array.\n+\t(arm_store_release_exclusivedi): Likewise.\n+\n 2016-06-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/arm.c (arm_fusion_enabled_p): New function."}, {"sha": "abcfbcb1eacaabc597c9fde475c1b56624fb5a59", "filename": "gcc/config/arm/sync.md", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4272cd33e14916f16370814f1dcf9b3d31b50893/gcc%2Fconfig%2Farm%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4272cd33e14916f16370814f1dcf9b3d31b50893/gcc%2Fconfig%2Farm%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fsync.md?ref=4272cd33e14916f16370814f1dcf9b3d31b50893", "patch": "@@ -452,14 +452,13 @@\n   {\n     if (<MODE>mode == DImode)\n       {\n-\trtx value = operands[2];\n \t/* The restrictions on target registers in ARM mode are that the two\n \t   registers are consecutive and the first one is even; Thumb is\n \t   actually more flexible, but DI should give us this anyway.\n-\t   Note that the 1st register always gets the lowest word in memory.  */\n-\tgcc_assert ((REGNO (value) & 1) == 0 || TARGET_THUMB2);\n-\toperands[3] = gen_rtx_REG (SImode, REGNO (value) + 1);\n-\treturn \"strexd%?\\t%0, %2, %3, %C1\";\n+\t   Note that the 1st register always gets the\n+\t   lowest word in memory.  */\n+\tgcc_assert ((REGNO (operands[2]) & 1) == 0 || TARGET_THUMB2);\n+\treturn \"strexd%?\\t%0, %2, %H2, %C1\";\n       }\n     return \"strex<sync_sfx>%?\\t%0, %2, %C1\";\n   }\n@@ -475,11 +474,9 @@\n \t  VUNSPEC_SLX))]\n   \"TARGET_HAVE_LDACQ && ARM_DOUBLEWORD_ALIGN\"\n   {\n-    rtx value = operands[2];\n     /* See comment in arm_store_exclusive<mode> above.  */\n-    gcc_assert ((REGNO (value) & 1) == 0 || TARGET_THUMB2);\n-    operands[3] = gen_rtx_REG (SImode, REGNO (value) + 1);\n-    return \"stlexd%?\\t%0, %2, %3, %C1\";\n+    gcc_assert ((REGNO (operands[2]) & 1) == 0 || TARGET_THUMB2);\n+    return \"stlexd%?\\t%0, %2, %H2, %C1\";\n   }\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])"}]}