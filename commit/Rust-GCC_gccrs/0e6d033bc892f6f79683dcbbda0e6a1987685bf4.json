{"sha": "0e6d033bc892f6f79683dcbbda0e6a1987685bf4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU2ZDAzM2JjODkyZjZmNzk2ODNkY2JiZGEwZTZhMTk4NzY4NWJmNA==", "commit": {"author": {"name": "Thomas Koenig", "email": "Thomas.Koenig@online.de", "date": "2005-06-25T09:56:37Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2005-06-25T09:56:37Z"}, "message": "[multiple changes]\n\n2005-06-25  Thomas Koenig  <Thomas.Koenig@online.de>\n\n        PR libfortran/22144\n        * m4/cshift1.m4: Remove const from argument ret.\n        Populate return array descriptor if ret->data is NULL.\n        * m4/eoshift1.m4: Likewise.\n        * m4/eoshift3.m4: Likewise.\n        * generated/cshift1_4.c:  Regenerated.\n        * generated/cshift1_8.c:  Regenerated.\n        * generated/eoshift1_4.c:  Regenerated.\n        * generated/eoshift1_8.c:  Regenerated.\n        * generated/eoshift3_4.c:  Regenerated.\n        * generated/eoshift3_8.c:  Regenerated.\n\n2005-06-25  Thomas Koenig <Thomas.Koenig@online.de>\n\n        PR libfortran/21144\n        * gfortran.dg/shift-alloc.f90:  New testcase.\n\nFrom-SVN: r101318", "tree": {"sha": "0bfeede6e9240f3c069b66974e9813ec2385f821", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bfeede6e9240f3c069b66974e9813ec2385f821"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e6d033bc892f6f79683dcbbda0e6a1987685bf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e6d033bc892f6f79683dcbbda0e6a1987685bf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e6d033bc892f6f79683dcbbda0e6a1987685bf4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e6d033bc892f6f79683dcbbda0e6a1987685bf4/comments", "author": null, "committer": null, "parents": [{"sha": "366ccddb2bc50711bd3a11c1dee97b50e8ef1677", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/366ccddb2bc50711bd3a11c1dee97b50e8ef1677", "html_url": "https://github.com/Rust-GCC/gccrs/commit/366ccddb2bc50711bd3a11c1dee97b50e8ef1677"}], "stats": {"total": 235, "additions": 223, "deletions": 12}, "files": [{"sha": "419e012bd44e3c1a18b0adb7b8e94b3a09eb27a6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e6d033bc892f6f79683dcbbda0e6a1987685bf4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e6d033bc892f6f79683dcbbda0e6a1987685bf4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e6d033bc892f6f79683dcbbda0e6a1987685bf4", "patch": "@@ -1,3 +1,8 @@\n+2005-06-25  Thomas Koenig <Thomas.Koenig@online.de>\n+\n+\tPR libfortran/21144\n+\t* gfortran.dg/shift-alloc.f90:  New testcase.\n+\n 2005-06-25  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* all files: Update FSF address in copyright headers."}, {"sha": "2d660317235ab75710bce4ea42b41d33ac5faf87", "filename": "gcc/testsuite/gfortran.dg/shift-alloc.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e6d033bc892f6f79683dcbbda0e6a1987685bf4/gcc%2Ftestsuite%2Fgfortran.dg%2Fshift-alloc.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e6d033bc892f6f79683dcbbda0e6a1987685bf4/gcc%2Ftestsuite%2Fgfortran.dg%2Fshift-alloc.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fshift-alloc.f90?ref=0e6d033bc892f6f79683dcbbda0e6a1987685bf4", "patch": "@@ -0,0 +1,18 @@\n+! { dg do-run }\n+! PR 22144: eoshift1, eoshift3 and cshift1 used to lack memory\n+! allocation, which caused the writes to segfault.\n+program main\n+  implicit none\n+  integer, dimension (:,:),allocatable :: a\n+  integer, dimension (3) :: sh, bo\n+  character(len=80) line1, line2\n+  integer :: i\n+  \n+  allocate (a(3,3))\n+  a = reshape((/(i,i=1,9)/),shape(a))\n+  sh = (/ 2, -1, -2 /)\n+  bo = (/ -3, -2, -1 /)\n+  write(unit=line1,fmt='(10I5)') cshift(a, shift=sh)\n+  write(unit=line1,fmt='(10I5)') eoshift(a, shift=sh)\n+  write(unit=line1,fmt='(10I5)') eoshift(a, shift=sh, boundary=bo)\n+end program main"}, {"sha": "9b2ddec62d2b7cb9d457009fe9960e83f2bf78eb", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e6d033bc892f6f79683dcbbda0e6a1987685bf4/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e6d033bc892f6f79683dcbbda0e6a1987685bf4/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=0e6d033bc892f6f79683dcbbda0e6a1987685bf4", "patch": "@@ -1,3 +1,17 @@\n+2005-06-25  Thomas Koenig  <Thomas.Koenig@online.de>\n+\n+        PR libfortran/22144\n+        * m4/cshift1.m4: Remove const from argument ret.\n+        Populate return array descriptor if ret->data is NULL.\n+        * m4/eoshift1.m4: Likewise.\n+        * m4/eoshift3.m4: Likewise.\n+        * generated/cshift1_4.c:  Regenerated.\n+        * generated/cshift1_8.c:  Regenerated.\n+        * generated/eoshift1_4.c:  Regenerated.\n+        * generated/eoshift1_8.c:  Regenerated.\n+        * generated/eoshift3_4.c:  Regenerated.\n+        * generated/eoshift3_8.c:  Regenerated.\n+\n 2005-06-24  Jerry DeLisle <jvdelisle@verizon.net>\n \n \tPR libfortran/21915"}, {"sha": "b86f9e51c7e3cee04e3675e21fc9988647fbb9d8", "filename": "libgfortran/generated/cshift1_4.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e6d033bc892f6f79683dcbbda0e6a1987685bf4/libgfortran%2Fgenerated%2Fcshift1_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e6d033bc892f6f79683dcbbda0e6a1987685bf4/libgfortran%2Fgenerated%2Fcshift1_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift1_4.c?ref=0e6d033bc892f6f79683dcbbda0e6a1987685bf4", "patch": "@@ -34,13 +34,13 @@ Boston, MA 02111-1307, USA.  */\n #include <string.h>\n #include \"libgfortran.h\"\n \n-void cshift1_4 (const gfc_array_char * ret,\n+void cshift1_4 (gfc_array_char * ret,\n \t\t\t   const gfc_array_char * array,\n \t\t\t   const gfc_array_i4 * h, const GFC_INTEGER_4 * pwhich);\n export_proto(cshift1_4);\n \n void\n-cshift1_4 (const gfc_array_char * ret,\n+cshift1_4 (gfc_array_char * ret,\n \t\t      const gfc_array_char * array,\n \t\t      const gfc_array_i4 * h, const GFC_INTEGER_4 * pwhich)\n {\n@@ -80,6 +80,25 @@ cshift1_4 (const gfc_array_char * ret,\n \n   size = GFC_DESCRIPTOR_SIZE (ret);\n \n+  if (ret->data == NULL)\n+    {\n+      int i;\n+\n+      ret->data = internal_malloc_size (size * size0 ((array_t *)array));\n+      ret->base = 0;\n+      ret->dtype = array->dtype;\n+      for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n+        {\n+          ret->dim[i].lbound = 0;\n+          ret->dim[i].ubound = array->dim[i].ubound - array->dim[i].lbound;\n+\n+          if (i == 0)\n+            ret->dim[i].stride = 1;\n+          else\n+            ret->dim[i].stride = (ret->dim[i-1].ubound + 1) * ret->dim[i-1].stride;\n+        }\n+    }\n+\n   extent[0] = 1;\n   count[0] = 0;\n   size = GFC_DESCRIPTOR_SIZE (array);"}, {"sha": "24c1b6e89e3e04c1c07d58c33ef28ebe5519f647", "filename": "libgfortran/generated/cshift1_8.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e6d033bc892f6f79683dcbbda0e6a1987685bf4/libgfortran%2Fgenerated%2Fcshift1_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e6d033bc892f6f79683dcbbda0e6a1987685bf4/libgfortran%2Fgenerated%2Fcshift1_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift1_8.c?ref=0e6d033bc892f6f79683dcbbda0e6a1987685bf4", "patch": "@@ -34,13 +34,13 @@ Boston, MA 02111-1307, USA.  */\n #include <string.h>\n #include \"libgfortran.h\"\n \n-void cshift1_8 (const gfc_array_char * ret,\n+void cshift1_8 (gfc_array_char * ret,\n \t\t\t   const gfc_array_char * array,\n \t\t\t   const gfc_array_i8 * h, const GFC_INTEGER_8 * pwhich);\n export_proto(cshift1_8);\n \n void\n-cshift1_8 (const gfc_array_char * ret,\n+cshift1_8 (gfc_array_char * ret,\n \t\t      const gfc_array_char * array,\n \t\t      const gfc_array_i8 * h, const GFC_INTEGER_8 * pwhich)\n {\n@@ -80,6 +80,25 @@ cshift1_8 (const gfc_array_char * ret,\n \n   size = GFC_DESCRIPTOR_SIZE (ret);\n \n+  if (ret->data == NULL)\n+    {\n+      int i;\n+\n+      ret->data = internal_malloc_size (size * size0 ((array_t *)array));\n+      ret->base = 0;\n+      ret->dtype = array->dtype;\n+      for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n+        {\n+          ret->dim[i].lbound = 0;\n+          ret->dim[i].ubound = array->dim[i].ubound - array->dim[i].lbound;\n+\n+          if (i == 0)\n+            ret->dim[i].stride = 1;\n+          else\n+            ret->dim[i].stride = (ret->dim[i-1].ubound + 1) * ret->dim[i-1].stride;\n+        }\n+    }\n+\n   extent[0] = 1;\n   count[0] = 0;\n   size = GFC_DESCRIPTOR_SIZE (array);"}, {"sha": "833efa2ae00af40deffd06d5da997d6057bb16c1", "filename": "libgfortran/generated/eoshift1_4.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e6d033bc892f6f79683dcbbda0e6a1987685bf4/libgfortran%2Fgenerated%2Feoshift1_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e6d033bc892f6f79683dcbbda0e6a1987685bf4/libgfortran%2Fgenerated%2Feoshift1_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift1_4.c?ref=0e6d033bc892f6f79683dcbbda0e6a1987685bf4", "patch": "@@ -37,14 +37,14 @@ Boston, MA 02111-1307, USA.  */\n static const char zeros[16] =\n   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n \n-extern void eoshift1_4 (const gfc_array_char *,\n+extern void eoshift1_4 (gfc_array_char *,\n \t\t\t\t     const gfc_array_char *,\n \t\t\t\t     const gfc_array_i4 *, const char *,\n \t\t\t\t     const GFC_INTEGER_4 *);\n export_proto(eoshift1_4);\n \n void\n-eoshift1_4 (const gfc_array_char *ret,\n+eoshift1_4 (gfc_array_char *ret,\n \t\t       const gfc_array_char *array,\n \t\t       const gfc_array_i4 *h, const char *pbound,\n \t\t       const GFC_INTEGER_4 *pwhich)\n@@ -95,6 +95,26 @@ eoshift1_4 (const gfc_array_char *ret,\n   extent[0] = 1;\n   count[0] = 0;\n   size = GFC_DESCRIPTOR_SIZE (array);\n+\n+  if (ret->data == NULL)\n+    {\n+      int i;\n+\n+      ret->data = internal_malloc_size (size * size0 ((array_t *)array));\n+      ret->base = 0;\n+      ret->dtype = array->dtype;\n+      for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n+        {\n+          ret->dim[i].lbound = 0;\n+          ret->dim[i].ubound = array->dim[i].ubound - array->dim[i].lbound;\n+\n+          if (i == 0)\n+            ret->dim[i].stride = 1;\n+          else\n+            ret->dim[i].stride = (ret->dim[i-1].ubound + 1) * ret->dim[i-1].stride;\n+        }\n+    }\n+\n   n = 0;\n   for (dim = 0; dim < GFC_DESCRIPTOR_RANK (array); dim++)\n     {"}, {"sha": "75d0f1e1e3d18f71e8ebcb9acb6a039ed8b59917", "filename": "libgfortran/generated/eoshift1_8.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e6d033bc892f6f79683dcbbda0e6a1987685bf4/libgfortran%2Fgenerated%2Feoshift1_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e6d033bc892f6f79683dcbbda0e6a1987685bf4/libgfortran%2Fgenerated%2Feoshift1_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift1_8.c?ref=0e6d033bc892f6f79683dcbbda0e6a1987685bf4", "patch": "@@ -37,14 +37,14 @@ Boston, MA 02111-1307, USA.  */\n static const char zeros[16] =\n   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n \n-extern void eoshift1_8 (const gfc_array_char *,\n+extern void eoshift1_8 (gfc_array_char *,\n \t\t\t\t     const gfc_array_char *,\n \t\t\t\t     const gfc_array_i8 *, const char *,\n \t\t\t\t     const GFC_INTEGER_8 *);\n export_proto(eoshift1_8);\n \n void\n-eoshift1_8 (const gfc_array_char *ret,\n+eoshift1_8 (gfc_array_char *ret,\n \t\t       const gfc_array_char *array,\n \t\t       const gfc_array_i8 *h, const char *pbound,\n \t\t       const GFC_INTEGER_8 *pwhich)\n@@ -95,6 +95,26 @@ eoshift1_8 (const gfc_array_char *ret,\n   extent[0] = 1;\n   count[0] = 0;\n   size = GFC_DESCRIPTOR_SIZE (array);\n+\n+  if (ret->data == NULL)\n+    {\n+      int i;\n+\n+      ret->data = internal_malloc_size (size * size0 ((array_t *)array));\n+      ret->base = 0;\n+      ret->dtype = array->dtype;\n+      for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n+        {\n+          ret->dim[i].lbound = 0;\n+          ret->dim[i].ubound = array->dim[i].ubound - array->dim[i].lbound;\n+\n+          if (i == 0)\n+            ret->dim[i].stride = 1;\n+          else\n+            ret->dim[i].stride = (ret->dim[i-1].ubound + 1) * ret->dim[i-1].stride;\n+        }\n+    }\n+\n   n = 0;\n   for (dim = 0; dim < GFC_DESCRIPTOR_RANK (array); dim++)\n     {"}, {"sha": "14c38b7bd6ae93c3838de00d87c978b201da54d0", "filename": "libgfortran/generated/eoshift3_4.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e6d033bc892f6f79683dcbbda0e6a1987685bf4/libgfortran%2Fgenerated%2Feoshift3_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e6d033bc892f6f79683dcbbda0e6a1987685bf4/libgfortran%2Fgenerated%2Feoshift3_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift3_4.c?ref=0e6d033bc892f6f79683dcbbda0e6a1987685bf4", "patch": "@@ -90,6 +90,25 @@ eoshift3_4 (gfc_array_char *ret, gfc_array_char *array,\n     which = 0;\n \n   size = GFC_DESCRIPTOR_SIZE (ret);\n+  if (ret->data == NULL)\n+    {\n+      int i;\n+\n+      ret->data = internal_malloc_size (size * size0 ((array_t *)array));\n+      ret->base = 0;\n+      ret->dtype = array->dtype;\n+      for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n+        {\n+          ret->dim[i].lbound = 0;\n+          ret->dim[i].ubound = array->dim[i].ubound - array->dim[i].lbound;\n+\n+          if (i == 0)\n+            ret->dim[i].stride = 1;\n+          else\n+            ret->dim[i].stride = (ret->dim[i-1].ubound + 1) * ret->dim[i-1].stride;\n+        }\n+    }\n+\n \n   extent[0] = 1;\n   count[0] = 0;"}, {"sha": "77617b074172cef8e1f5d00aaff0d4acdd7379db", "filename": "libgfortran/generated/eoshift3_8.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e6d033bc892f6f79683dcbbda0e6a1987685bf4/libgfortran%2Fgenerated%2Feoshift3_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e6d033bc892f6f79683dcbbda0e6a1987685bf4/libgfortran%2Fgenerated%2Feoshift3_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift3_8.c?ref=0e6d033bc892f6f79683dcbbda0e6a1987685bf4", "patch": "@@ -90,6 +90,25 @@ eoshift3_8 (gfc_array_char *ret, gfc_array_char *array,\n     which = 0;\n \n   size = GFC_DESCRIPTOR_SIZE (ret);\n+  if (ret->data == NULL)\n+    {\n+      int i;\n+\n+      ret->data = internal_malloc_size (size * size0 ((array_t *)array));\n+      ret->base = 0;\n+      ret->dtype = array->dtype;\n+      for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n+        {\n+          ret->dim[i].lbound = 0;\n+          ret->dim[i].ubound = array->dim[i].ubound - array->dim[i].lbound;\n+\n+          if (i == 0)\n+            ret->dim[i].stride = 1;\n+          else\n+            ret->dim[i].stride = (ret->dim[i-1].ubound + 1) * ret->dim[i-1].stride;\n+        }\n+    }\n+\n \n   extent[0] = 1;\n   count[0] = 0;"}, {"sha": "dd7653ab5175adb12c0ab7f80000e61123d81eb2", "filename": "libgfortran/m4/cshift1.m4", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e6d033bc892f6f79683dcbbda0e6a1987685bf4/libgfortran%2Fm4%2Fcshift1.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e6d033bc892f6f79683dcbbda0e6a1987685bf4/libgfortran%2Fm4%2Fcshift1.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fcshift1.m4?ref=0e6d033bc892f6f79683dcbbda0e6a1987685bf4", "patch": "@@ -35,13 +35,13 @@ Boston, MA 02111-1307, USA.  */\n #include \"libgfortran.h\"'\n include(iparm.m4)dnl\n \n-void cshift1_`'atype_kind (const gfc_array_char * ret,\n+void cshift1_`'atype_kind (gfc_array_char * ret,\n \t\t\t   const gfc_array_char * array,\n \t\t\t   const atype * h, const atype_name * pwhich);\n export_proto(cshift1_`'atype_kind);\n \n void\n-cshift1_`'atype_kind (const gfc_array_char * ret,\n+cshift1_`'atype_kind (gfc_array_char * ret,\n \t\t      const gfc_array_char * array,\n \t\t      const atype * h, const atype_name * pwhich)\n {\n@@ -81,6 +81,25 @@ cshift1_`'atype_kind (const gfc_array_char * ret,\n \n   size = GFC_DESCRIPTOR_SIZE (ret);\n \n+  if (ret->data == NULL)\n+    {\n+      int i;\n+\n+      ret->data = internal_malloc_size (size * size0 ((array_t *)array));\n+      ret->base = 0;\n+      ret->dtype = array->dtype;\n+      for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n+        {\n+          ret->dim[i].lbound = 0;\n+          ret->dim[i].ubound = array->dim[i].ubound - array->dim[i].lbound;\n+\n+          if (i == 0)\n+            ret->dim[i].stride = 1;\n+          else\n+            ret->dim[i].stride = (ret->dim[i-1].ubound + 1) * ret->dim[i-1].stride;\n+        }\n+    }\n+\n   extent[0] = 1;\n   count[0] = 0;\n   size = GFC_DESCRIPTOR_SIZE (array);"}, {"sha": "1d13f4820818a614b061166e0f33b71d3e70b250", "filename": "libgfortran/m4/eoshift1.m4", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e6d033bc892f6f79683dcbbda0e6a1987685bf4/libgfortran%2Fm4%2Feoshift1.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e6d033bc892f6f79683dcbbda0e6a1987685bf4/libgfortran%2Fm4%2Feoshift1.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Feoshift1.m4?ref=0e6d033bc892f6f79683dcbbda0e6a1987685bf4", "patch": "@@ -38,14 +38,14 @@ include(iparm.m4)dnl\n static const char zeros[16] =\n   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n \n-extern void eoshift1_`'atype_kind (const gfc_array_char *,\n+extern void eoshift1_`'atype_kind (gfc_array_char *,\n \t\t\t\t     const gfc_array_char *,\n \t\t\t\t     const atype *, const char *,\n \t\t\t\t     const atype_name *);\n export_proto(eoshift1_`'atype_kind);\n \n void\n-eoshift1_`'atype_kind (const gfc_array_char *ret,\n+eoshift1_`'atype_kind (gfc_array_char *ret,\n \t\t       const gfc_array_char *array,\n \t\t       const atype *h, const char *pbound,\n \t\t       const atype_name *pwhich)\n@@ -96,6 +96,26 @@ eoshift1_`'atype_kind (const gfc_array_char *ret,\n   extent[0] = 1;\n   count[0] = 0;\n   size = GFC_DESCRIPTOR_SIZE (array);\n+\n+  if (ret->data == NULL)\n+    {\n+      int i;\n+\n+      ret->data = internal_malloc_size (size * size0 ((array_t *)array));\n+      ret->base = 0;\n+      ret->dtype = array->dtype;\n+      for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n+        {\n+          ret->dim[i].lbound = 0;\n+          ret->dim[i].ubound = array->dim[i].ubound - array->dim[i].lbound;\n+\n+          if (i == 0)\n+            ret->dim[i].stride = 1;\n+          else\n+            ret->dim[i].stride = (ret->dim[i-1].ubound + 1) * ret->dim[i-1].stride;\n+        }\n+    }\n+\n   n = 0;\n   for (dim = 0; dim < GFC_DESCRIPTOR_RANK (array); dim++)\n     {"}, {"sha": "5001756df0cfc7a5050f5c7c15ffcdb66fcd1019", "filename": "libgfortran/m4/eoshift3.m4", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e6d033bc892f6f79683dcbbda0e6a1987685bf4/libgfortran%2Fm4%2Feoshift3.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e6d033bc892f6f79683dcbbda0e6a1987685bf4/libgfortran%2Fm4%2Feoshift3.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Feoshift3.m4?ref=0e6d033bc892f6f79683dcbbda0e6a1987685bf4", "patch": "@@ -91,6 +91,25 @@ eoshift3_`'atype_kind (gfc_array_char *ret, gfc_array_char *array,\n     which = 0;\n \n   size = GFC_DESCRIPTOR_SIZE (ret);\n+  if (ret->data == NULL)\n+    {\n+      int i;\n+\n+      ret->data = internal_malloc_size (size * size0 ((array_t *)array));\n+      ret->base = 0;\n+      ret->dtype = array->dtype;\n+      for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n+        {\n+          ret->dim[i].lbound = 0;\n+          ret->dim[i].ubound = array->dim[i].ubound - array->dim[i].lbound;\n+\n+          if (i == 0)\n+            ret->dim[i].stride = 1;\n+          else\n+            ret->dim[i].stride = (ret->dim[i-1].ubound + 1) * ret->dim[i-1].stride;\n+        }\n+    }\n+\n \n   extent[0] = 1;\n   count[0] = 0;"}]}