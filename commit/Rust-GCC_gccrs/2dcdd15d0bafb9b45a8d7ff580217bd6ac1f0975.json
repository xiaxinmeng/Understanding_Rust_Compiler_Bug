{"sha": "2dcdd15d0bafb9b45a8d7ff580217bd6ac1f0975", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRjZGQxNWQwYmFmYjliNDVhOGQ3ZmY1ODAyMTdiZDZhYzFmMDk3NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-11T16:24:17Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-11T16:24:17Z"}, "message": "c++: Fix zero initialization of flexible array members [PR99033]\n\narray_type_nelts returns error_mark_node for type of flexible array members\nand build_zero_init_1 was placing an error_mark_node into the CONSTRUCTOR,\non which e.g. varasm ICEs.  I think there is nothing erroneous on zero\ninitialization of flexible array members though, such arrays should simply\nget no elements, like they do if such classes are constructed (everything\nexcept when some larger initializer comes from an explicit initializer).\n\nSo, this patch handles [] arrays in zero initialization like [0] arrays\nand fixes handling of the [0] arrays - the\ntree_int_cst_equal (max_index, integer_minus_one_node) check\ndidn't do what it thought it would do, max_index is typically unsigned\ninteger (sizetype) and so it is never equal to a -1.\n\nWhat the patch doesn't do and maybe would be desirable is if it returns\nerror_mark_node for other reasons let the recursive callers not stick that\ninto CONSTRUCTOR but return error_mark_node instead.  But I don't have a\ntestcase where that would be needed right now.\n\n2021-02-11  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/99033\n\t* init.c (build_zero_init_1): Handle zero initialiation of\n\tflexible array members like initialization of [0] arrays.\n\tUse integer_minus_onep instead of comparison to integer_minus_one_node\n\tand integer_zerop instead of comparison against size_zero_node.\n\tFormatting fixes.\n\n\t* g++.dg/ext/flexary38.C: New test.", "tree": {"sha": "35b82277e29a2ab59f06f5844d580301fc360e78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35b82277e29a2ab59f06f5844d580301fc360e78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dcdd15d0bafb9b45a8d7ff580217bd6ac1f0975", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dcdd15d0bafb9b45a8d7ff580217bd6ac1f0975", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dcdd15d0bafb9b45a8d7ff580217bd6ac1f0975", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dcdd15d0bafb9b45a8d7ff580217bd6ac1f0975/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0da1c0cb7661ee9111bc475efddae80a026de34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0da1c0cb7661ee9111bc475efddae80a026de34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0da1c0cb7661ee9111bc475efddae80a026de34"}], "stats": {"total": 38, "additions": 29, "deletions": 9}, "files": [{"sha": "1381a23449e8f4ed71da7668a0f5d18901c76086", "filename": "gcc/cp/init.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dcdd15d0bafb9b45a8d7ff580217bd6ac1f0975/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dcdd15d0bafb9b45a8d7ff580217bd6ac1f0975/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=2dcdd15d0bafb9b45a8d7ff580217bd6ac1f0975", "patch": "@@ -247,9 +247,12 @@ build_zero_init_1 (tree type, tree nelts, bool static_storage_p,\n \n       /* Iterate over the array elements, building initializations.  */\n       if (nelts)\n-\tmax_index = fold_build2_loc (input_location,\n-\t\t\t\t MINUS_EXPR, TREE_TYPE (nelts),\n-\t\t\t\t nelts, integer_one_node);\n+\tmax_index = fold_build2_loc (input_location, MINUS_EXPR,\n+\t\t\t\t     TREE_TYPE (nelts), nelts,\n+\t\t\t\t     build_one_cst (TREE_TYPE (nelts)));\n+      /* Treat flexible array members like [0] arrays.  */\n+      else if (TYPE_DOMAIN (type) == NULL_TREE)\n+\tmax_index = build_minus_one_cst (sizetype);\n       else\n \tmax_index = array_type_nelts (type);\n \n@@ -261,20 +264,19 @@ build_zero_init_1 (tree type, tree nelts, bool static_storage_p,\n \n       /* A zero-sized array, which is accepted as an extension, will\n \t have an upper bound of -1.  */\n-      if (!tree_int_cst_equal (max_index, integer_minus_one_node))\n+      if (!integer_minus_onep (max_index))\n \t{\n \t  constructor_elt ce;\n \n \t  /* If this is a one element array, we just use a regular init.  */\n-\t  if (tree_int_cst_equal (size_zero_node, max_index))\n+\t  if (integer_zerop (max_index))\n \t    ce.index = size_zero_node;\n \t  else\n \t    ce.index = build2 (RANGE_EXPR, sizetype, size_zero_node,\n-\t\t\t\tmax_index);\n+\t\t\t       max_index);\n \n-\t  ce.value = build_zero_init_1 (TREE_TYPE (type),\n-\t\t\t\t\t /*nelts=*/NULL_TREE,\n-\t\t\t\t\t static_storage_p, NULL_TREE);\n+\t  ce.value = build_zero_init_1 (TREE_TYPE (type), /*nelts=*/NULL_TREE,\n+\t\t\t\t\tstatic_storage_p, NULL_TREE);\n \t  if (ce.value)\n \t    {\n \t      vec_alloc (v, 1);"}, {"sha": "4fa987bcb410b7fd54d9c3901c355ec647ebf89e", "filename": "gcc/testsuite/g++.dg/ext/flexary38.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dcdd15d0bafb9b45a8d7ff580217bd6ac1f0975/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dcdd15d0bafb9b45a8d7ff580217bd6ac1f0975/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary38.C?ref=2dcdd15d0bafb9b45a8d7ff580217bd6ac1f0975", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/99033\n+// { dg-do compile }\n+// { dg-options \"\" }\n+\n+struct T { int t; };\n+struct S { char c; int T::*b[]; } a;\n+struct U { char c; int T::*b[0]; } b;\n+struct V { char c; int T::*b[1]; } c;\n+struct W { char c; int T::*b[2]; } d;\n+\n+void\n+foo ()\n+{\n+  a.c = 1;\n+  b.c = 2;\n+  c.c = 3;\n+  d.c = 4;\n+}"}]}