{"sha": "2fa4a84980a8076f2819d0eac793a3fa215c6276", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZhNGE4NDk4MGE4MDc2ZjI4MTlkMGVhYzc5M2EzZmEyMTVjNjI3Ng==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-06-12T04:15:56Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-06-12T04:15:56Z"}, "message": "gcse.c (fis_get_condition): Make it a global function.\n\n\t* gcse.c (fis_get_condition): Make it a global function.\n\t* reload1.c (reload_cse_move2add): Detect implicit sets.\n\t* rtl.h: Add a prototype for fis_get_condition.\n\nFrom-SVN: r67814", "tree": {"sha": "85141565fe52d7f0a1a45c4dc9d1cb2189baa8da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85141565fe52d7f0a1a45c4dc9d1cb2189baa8da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fa4a84980a8076f2819d0eac793a3fa215c6276", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fa4a84980a8076f2819d0eac793a3fa215c6276", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fa4a84980a8076f2819d0eac793a3fa215c6276", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fa4a84980a8076f2819d0eac793a3fa215c6276/comments", "author": null, "committer": null, "parents": [{"sha": "58ac1d7f0ed6264255737ccba13f32d70fb79d22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58ac1d7f0ed6264255737ccba13f32d70fb79d22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58ac1d7f0ed6264255737ccba13f32d70fb79d22"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "e7d48447b19b6920b73974062ccb78c6eedb3400", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa4a84980a8076f2819d0eac793a3fa215c6276/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa4a84980a8076f2819d0eac793a3fa215c6276/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2fa4a84980a8076f2819d0eac793a3fa215c6276", "patch": "@@ -1,3 +1,9 @@\n+2003-06-12  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* gcse.c (fis_get_condition): Make it a global function.\n+\t* reload1.c (reload_cse_move2add): Detect implicit sets.\n+\t* rtl.h: Add a prototype for fis_get_condition.\n+\n 2003-06-11  Richard Henderson  <rth@redhat.com>\n \n \t* stmt.c (expand_asm_operands): Don't warn for memories with"}, {"sha": "0dbe56a63263a6d958d5ab22ab48262cbc6aedfb", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa4a84980a8076f2819d0eac793a3fa215c6276/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa4a84980a8076f2819d0eac793a3fa215c6276/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=2fa4a84980a8076f2819d0eac793a3fa215c6276", "patch": "@@ -611,7 +611,6 @@ static int load_killed_in_block_p    PARAMS ((basic_block, int, rtx, int));\n static void canon_list_insert        PARAMS ((rtx, rtx, void *));\n static int cprop_insn\t\tPARAMS ((rtx, int));\n static int cprop\t\tPARAMS ((int));\n-static rtx fis_get_condition\tPARAMS ((rtx));\n static void find_implicit_sets\tPARAMS ((void));\n static int one_cprop_pass\tPARAMS ((int, int, int));\n static bool constprop_register\tPARAMS ((rtx, rtx, rtx, int));\n@@ -4610,7 +4609,7 @@ cprop (alter_jumps)\n    recording the value of *every* register scaned by canonicalize_condition,\n    but this would require some code reorganization.  */\n \n-static rtx\n+rtx\n fis_get_condition (jump)\n      rtx jump;\n {"}, {"sha": "12f6689eaf19c34c8d553a8e476b025bb2c3580e", "filename": "gcc/reload1.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa4a84980a8076f2819d0eac793a3fa215c6276/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa4a84980a8076f2819d0eac793a3fa215c6276/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=2fa4a84980a8076f2819d0eac793a3fa215c6276", "patch": "@@ -9314,6 +9314,30 @@ reload_cse_move2add (first)\n \t    }\n \t}\n       note_stores (PATTERN (insn), move2add_note_store, NULL);\n+\n+      /* If INSN is a conditional branch, we try to extract an\n+\t implicit set out of it.  */\n+      if (any_condjump_p (insn) && onlyjump_p (insn))\n+\t{\n+\t  rtx cnd = fis_get_condition (insn);\n+\n+\t  if (cnd != NULL_RTX\n+\t      && GET_CODE (cnd) == NE\n+\t      && GET_CODE (XEXP (cnd, 0)) == REG\n+\t      /* The following two checks, which are also in\n+\t\t move2add_note_store, are intended to reduce the\n+\t\t number of calls to gen_rtx_SET to avoid memory\n+\t\t allocation if possible.  */\n+\t      && SCALAR_INT_MODE_P (GET_MODE (XEXP (cnd, 0)))\n+\t      && HARD_REGNO_NREGS (REGNO (XEXP (cnd, 0)), GET_MODE (XEXP (cnd, 0))) == 1\n+\t      && GET_CODE (XEXP (cnd, 1)) == CONST_INT)\n+\t    {\n+\t      rtx implicit_set =\n+\t\tgen_rtx_SET (VOIDmode, XEXP (cnd, 0), XEXP (cnd, 1));\n+\t      move2add_note_store (SET_DEST (implicit_set), implicit_set, 0);\n+\t    }\n+\t}\n+\n       /* If this is a CALL_INSN, all call used registers are stored with\n \t unknown values.  */\n       if (GET_CODE (insn) == CALL_INSN)"}, {"sha": "85bc64571ecbf82be64c58d393e9664f7f05e575", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa4a84980a8076f2819d0eac793a3fa215c6276/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa4a84980a8076f2819d0eac793a3fa215c6276/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=2fa4a84980a8076f2819d0eac793a3fa215c6276", "patch": "@@ -2168,6 +2168,7 @@ extern rtx expand_mult_highpart\t\tPARAMS ((enum machine_mode, rtx,\n \n /* In gcse.c */\n extern bool can_copy_p\t\t\tPARAMS ((enum machine_mode));\n+extern rtx fis_get_condition\t\tPARAMS ((rtx));\n #ifdef BUFSIZ\n extern int gcse_main\t\t\tPARAMS ((rtx, FILE *));\n extern int bypass_jumps\t\t\tPARAMS ((FILE *));"}]}