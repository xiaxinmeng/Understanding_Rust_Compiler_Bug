{"sha": "9a38acdfdce27d0e05e5167ebc210cfa8ff677bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWEzOGFjZGZkY2UyN2QwZTA1ZTUxNjdlYmMyMTBjZmE4ZmY2NzdiYw==", "commit": {"author": {"name": "Aditya Kumar", "email": "hiraditya@msn.com", "date": "2016-08-24T08:03:01Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-08-24T08:03:01Z"}, "message": "Remove trailing whitespace in C++ headers\n\n2016-08-24  Aditya Kumar  <hiraditya@msn.com>\n\n\t* include/bits/algorithmfwd.h: Remove trailing whitespace.\n\t* include/bits/shared_ptr_base.h: Likewise.\n\nFrom-SVN: r239731", "tree": {"sha": "550ecf62a4fb4457cfe61546782c36ab9fa76df9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/550ecf62a4fb4457cfe61546782c36ab9fa76df9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a38acdfdce27d0e05e5167ebc210cfa8ff677bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a38acdfdce27d0e05e5167ebc210cfa8ff677bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a38acdfdce27d0e05e5167ebc210cfa8ff677bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a38acdfdce27d0e05e5167ebc210cfa8ff677bc/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b6b8f85a3c39fd9a5673be73ae6c5dde1850306", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b6b8f85a3c39fd9a5673be73ae6c5dde1850306", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b6b8f85a3c39fd9a5673be73ae6c5dde1850306"}], "stats": {"total": 237, "additions": 121, "deletions": 116}, "files": [{"sha": "0d7e8bf7f594e7438e7a5dbfc10a9fa348981f40", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a38acdfdce27d0e05e5167ebc210cfa8ff677bc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a38acdfdce27d0e05e5167ebc210cfa8ff677bc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9a38acdfdce27d0e05e5167ebc210cfa8ff677bc", "patch": "@@ -1,3 +1,8 @@\n+2016-08-24  Aditya Kumar  <hiraditya@msn.com>\n+\n+\t* include/bits/algorithmfwd.h: Remove trailing whitespace.\n+\t* include/bits/shared_ptr_base.h: Likewise.\n+\n 2016-08-23  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/debug/array (array): Add _GLIBCXX17_CONSTEXPR."}, {"sha": "a61fea7243961e7ef11462a78948c5bdaa08401a", "filename": "libstdc++-v3/include/bits/algorithmfwd.h", "status": "modified", "additions": 103, "deletions": 103, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a38acdfdce27d0e05e5167ebc210cfa8ff677bc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a38acdfdce27d0e05e5167ebc210cfa8ff677bc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h?ref=9a38acdfdce27d0e05e5167ebc210cfa8ff677bc", "patch": "@@ -168,12 +168,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *\n    * These algorithms are variations of a classic binary search, and\n    * all assume that the sequence being searched is already sorted.\n-   * \n+   *\n    * The number of comparisons will be logarithmic (and as few as\n    * possible).  The number of steps through the sequence will be\n    * logarithmic for random-access iterators (e.g., pointers), and\n    * linear otherwise.\n-   * \n+   *\n    * The LWG has passed Defect Report 270, which notes: <em>The\n    * proposed resolution reinterprets binary search. Instead of\n    * thinking about searching for a value in a sorted range, we view\n@@ -202,11 +202,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   template<typename _FIter, typename _Tp>\n-    bool \n+    bool\n     binary_search(_FIter, _FIter, const _Tp&);\n \n   template<typename _FIter, typename _Tp, typename _Compare>\n-    bool \n+    bool\n     binary_search(_FIter, _FIter, const _Tp&, _Compare);\n \n #if __cplusplus > 201402L\n@@ -222,7 +222,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   template<typename _IIter, typename _OIter>\n-    _OIter \n+    _OIter\n     copy(_IIter, _IIter, _OIter);\n \n   template<typename _BIter1, typename _BIter2>\n@@ -251,7 +251,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     equal_range(_FIter, _FIter, const _Tp&, _Compare);\n \n   template<typename _FIter, typename _Tp>\n-    void \n+    void\n     fill(_FIter, _FIter, const _Tp&);\n \n   template<typename _OIter, typename _Size, typename _Tp>\n@@ -282,36 +282,36 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // generate_n\n \n   template<typename _IIter1, typename _IIter2>\n-    bool \n+    bool\n     includes(_IIter1, _IIter1, _IIter2, _IIter2);\n \n   template<typename _IIter1, typename _IIter2, typename _Compare>\n-    bool \n+    bool\n     includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);\n \n   template<typename _BIter>\n-    void \n+    void\n     inplace_merge(_BIter, _BIter, _BIter);\n \n   template<typename _BIter, typename _Compare>\n-    void \n+    void\n     inplace_merge(_BIter, _BIter, _BIter, _Compare);\n \n #if __cplusplus >= 201103L\n   template<typename _RAIter>\n-    bool \n+    bool\n     is_heap(_RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Compare>\n-    bool \n+    bool\n     is_heap(_RAIter, _RAIter, _Compare);\n \n   template<typename _RAIter>\n-    _RAIter \n+    _RAIter\n     is_heap_until(_RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Compare>\n-    _RAIter \n+    _RAIter\n     is_heap_until(_RAIter, _RAIter, _Compare);\n \n   template<typename _IIter, typename _Predicate>\n@@ -328,71 +328,71 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     is_permutation(_FIter1, _FIter1, _FIter2, _BinaryPredicate);\n \n   template<typename _FIter>\n-    bool \n+    bool\n     is_sorted(_FIter, _FIter);\n \n   template<typename _FIter, typename _Compare>\n-    bool \n+    bool\n     is_sorted(_FIter, _FIter, _Compare);\n \n   template<typename _FIter>\n-    _FIter \n+    _FIter\n     is_sorted_until(_FIter, _FIter);\n \n   template<typename _FIter, typename _Compare>\n-    _FIter \n+    _FIter\n     is_sorted_until(_FIter, _FIter, _Compare);\n #endif\n \n   template<typename _FIter1, typename _FIter2>\n-    void \n+    void\n     iter_swap(_FIter1, _FIter2);\n \n   template<typename _FIter, typename _Tp>\n-    _FIter \n+    _FIter\n     lower_bound(_FIter, _FIter, const _Tp&);\n \n   template<typename _FIter, typename _Tp, typename _Compare>\n-    _FIter \n+    _FIter\n     lower_bound(_FIter, _FIter, const _Tp&, _Compare);\n \n   template<typename _RAIter>\n-    void \n+    void\n     make_heap(_RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Compare>\n-    void \n+    void\n     make_heap(_RAIter, _RAIter, _Compare);\n \n-  template<typename _Tp> \n+  template<typename _Tp>\n     _GLIBCXX14_CONSTEXPR\n-    const _Tp& \n+    const _Tp&\n     max(const _Tp&, const _Tp&);\n \n   template<typename _Tp, typename _Compare>\n     _GLIBCXX14_CONSTEXPR\n-    const _Tp& \n+    const _Tp&\n     max(const _Tp&, const _Tp&, _Compare);\n \n   // max_element\n   // merge\n \n-  template<typename _Tp> \n+  template<typename _Tp>\n     _GLIBCXX14_CONSTEXPR\n-    const _Tp& \n+    const _Tp&\n     min(const _Tp&, const _Tp&);\n \n   template<typename _Tp, typename _Compare>\n     _GLIBCXX14_CONSTEXPR\n-    const _Tp& \n+    const _Tp&\n     min(const _Tp&, const _Tp&, _Compare);\n \n   // min_element\n \n #if __cplusplus >= 201103L\n   template<typename _Tp>\n     _GLIBCXX14_CONSTEXPR\n-    pair<const _Tp&, const _Tp&> \n+    pair<const _Tp&, const _Tp&>\n     minmax(const _Tp&, const _Tp&);\n \n   template<typename _Tp, typename _Compare>\n@@ -444,11 +444,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // mismatch\n \n   template<typename _BIter>\n-    bool \n+    bool\n     next_permutation(_BIter, _BIter);\n \n   template<typename _BIter, typename _Compare>\n-    bool \n+    bool\n     next_permutation(_BIter, _BIter, _Compare);\n \n #if __cplusplus >= 201103L\n@@ -482,65 +482,65 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   template<typename _RAIter>\n-    void \n+    void\n     pop_heap(_RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Compare>\n-    void \n+    void\n     pop_heap(_RAIter, _RAIter, _Compare);\n \n   template<typename _BIter>\n-    bool \n+    bool\n     prev_permutation(_BIter, _BIter);\n \n   template<typename _BIter, typename _Compare>\n-    bool \n+    bool\n     prev_permutation(_BIter, _BIter, _Compare);\n \n   template<typename _RAIter>\n-    void \n+    void\n     push_heap(_RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Compare>\n-    void \n+    void\n     push_heap(_RAIter, _RAIter, _Compare);\n \n   // random_shuffle\n \n   template<typename _FIter, typename _Tp>\n-    _FIter \n+    _FIter\n     remove(_FIter, _FIter, const _Tp&);\n \n   template<typename _FIter, typename _Predicate>\n-    _FIter \n+    _FIter\n     remove_if(_FIter, _FIter, _Predicate);\n \n   template<typename _IIter, typename _OIter, typename _Tp>\n-    _OIter \n+    _OIter\n     remove_copy(_IIter, _IIter, _OIter, const _Tp&);\n \n   template<typename _IIter, typename _OIter, typename _Predicate>\n-    _OIter \n+    _OIter\n     remove_copy_if(_IIter, _IIter, _OIter, _Predicate);\n \n   // replace\n \n   template<typename _IIter, typename _OIter, typename _Tp>\n-    _OIter \n+    _OIter\n     replace_copy(_IIter, _IIter, _OIter, const _Tp&, const _Tp&);\n \n   template<typename _Iter, typename _OIter, typename _Predicate, typename _Tp>\n-    _OIter \n+    _OIter\n     replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp&);\n \n   // replace_if\n \n   template<typename _BIter>\n-    void \n+    void\n     reverse(_BIter, _BIter);\n \n   template<typename _BIter, typename _OIter>\n-    _OIter \n+    _OIter\n     reverse_copy(_BIter, _BIter, _OIter);\n \n   inline namespace _V2\n@@ -551,7 +551,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   }\n \n   template<typename _FIter, typename _OIter>\n-    _OIter \n+    _OIter\n     rotate_copy(_FIter, _FIter, _FIter, _OIter);\n \n   // search\n@@ -568,15 +568,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   template<typename _RAIter>\n-    void \n+    void\n     sort_heap(_RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Compare>\n-    void \n+    void\n     sort_heap(_RAIter, _RAIter, _Compare);\n \n   template<typename _BIter, typename _Predicate>\n-    _BIter \n+    _BIter\n     stable_partition(_BIter, _BIter, _Predicate);\n \n #if __cplusplus < 201103L\n@@ -592,39 +592,39 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   template<typename _FIter1, typename _FIter2>\n-    _FIter2 \n+    _FIter2\n     swap_ranges(_FIter1, _FIter1, _FIter2);\n \n   // transform\n \n   template<typename _FIter>\n-    _FIter \n+    _FIter\n     unique(_FIter, _FIter);\n \n   template<typename _FIter, typename _BinaryPredicate>\n-    _FIter \n+    _FIter\n     unique(_FIter, _FIter, _BinaryPredicate);\n \n   // unique_copy\n \n   template<typename _FIter, typename _Tp>\n-    _FIter \n+    _FIter\n     upper_bound(_FIter, _FIter, const _Tp&);\n \n   template<typename _FIter, typename _Tp, typename _Compare>\n-    _FIter \n+    _FIter\n     upper_bound(_FIter, _FIter, const _Tp&, _Compare);\n \n _GLIBCXX_END_NAMESPACE_VERSION\n \n _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \n   template<typename _FIter>\n-    _FIter \n+    _FIter\n     adjacent_find(_FIter, _FIter);\n \n   template<typename _FIter, typename _BinaryPredicate>\n-    _FIter \n+    _FIter\n     adjacent_find(_FIter, _FIter, _BinaryPredicate);\n \n   template<typename _IIter, typename _Tp>\n@@ -636,15 +636,15 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n     count_if(_IIter, _IIter, _Predicate);\n \n   template<typename _IIter1, typename _IIter2>\n-    bool \n+    bool\n     equal(_IIter1, _IIter1, _IIter2);\n \n   template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>\n-    bool \n+    bool\n     equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate);\n \n   template<typename _IIter, typename _Tp>\n-    _IIter \n+    _IIter\n     find(_IIter, _IIter, const _Tp&);\n \n   template<typename _FIter1, typename _FIter2>\n@@ -660,52 +660,52 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n     find_if(_IIter, _IIter, _Predicate);\n \n   template<typename _IIter, typename _Funct>\n-    _Funct \n+    _Funct\n     for_each(_IIter, _IIter, _Funct);\n \n   template<typename _FIter, typename _Generator>\n-    void \n+    void\n     generate(_FIter, _FIter, _Generator);\n \n   template<typename _OIter, typename _Size, typename _Generator>\n     _OIter\n     generate_n(_OIter, _Size, _Generator);\n \n   template<typename _IIter1, typename _IIter2>\n-    bool \n+    bool\n     lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2);\n \n   template<typename _IIter1, typename _IIter2, typename _Compare>\n-    bool \n+    bool\n     lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);\n \n   template<typename _FIter>\n     _GLIBCXX14_CONSTEXPR\n-    _FIter \n+    _FIter\n     max_element(_FIter, _FIter);\n \n   template<typename _FIter, typename _Compare>\n     _GLIBCXX14_CONSTEXPR\n-    _FIter \n+    _FIter\n     max_element(_FIter, _FIter, _Compare);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter>\n-    _OIter \n+    _OIter\n     merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);\n \n-  template<typename _IIter1, typename _IIter2, typename _OIter, \n+  template<typename _IIter1, typename _IIter2, typename _OIter,\n \t   typename _Compare>\n-    _OIter \n+    _OIter\n     merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);\n \n   template<typename _FIter>\n     _GLIBCXX14_CONSTEXPR\n-    _FIter \n+    _FIter\n     min_element(_FIter, _FIter);\n \n   template<typename _FIter, typename _Compare>\n     _GLIBCXX14_CONSTEXPR\n-    _FIter \n+    _FIter\n     min_element(_FIter, _FIter, _Compare);\n \n   template<typename _IIter1, typename _IIter2>\n@@ -717,31 +717,31 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n     mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate);\n \n   template<typename _RAIter>\n-    void \n+    void\n     nth_element(_RAIter, _RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Compare>\n-    void \n+    void\n     nth_element(_RAIter, _RAIter, _RAIter, _Compare);\n \n   template<typename _RAIter>\n-    void \n+    void\n     partial_sort(_RAIter, _RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Compare>\n-    void \n+    void\n     partial_sort(_RAIter, _RAIter, _RAIter, _Compare);\n \n   template<typename _BIter, typename _Predicate>\n-    _BIter \n+    _BIter\n     partition(_BIter, _BIter, _Predicate);\n \n   template<typename _RAIter>\n-    void \n+    void\n     random_shuffle(_RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Generator>\n-    void \n+    void\n     random_shuffle(_RAIter, _RAIter,\n #if __cplusplus >= 201103L\n \t\t   _Generator&&);\n@@ -750,98 +750,98 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n #endif\n \n   template<typename _FIter, typename _Tp>\n-    void \n+    void\n     replace(_FIter, _FIter, const _Tp&, const _Tp&);\n \n   template<typename _FIter, typename _Predicate, typename _Tp>\n-    void \n+    void\n     replace_if(_FIter, _FIter, _Predicate, const _Tp&);\n \n   template<typename _FIter1, typename _FIter2>\n-    _FIter1 \n+    _FIter1\n     search(_FIter1, _FIter1, _FIter2, _FIter2);\n \n   template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>\n-    _FIter1 \n+    _FIter1\n     search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);\n \n   template<typename _FIter, typename _Size, typename _Tp>\n-    _FIter \n+    _FIter\n     search_n(_FIter, _FIter, _Size, const _Tp&);\n \n-  template<typename _FIter, typename _Size, typename _Tp, \n+  template<typename _FIter, typename _Size, typename _Tp,\n \t   typename _BinaryPredicate>\n-    _FIter \n+    _FIter\n     search_n(_FIter, _FIter, _Size, const _Tp&, _BinaryPredicate);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter>\n-    _OIter \n+    _OIter\n     set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);\n \n-  template<typename _IIter1, typename _IIter2, typename _OIter, \n+  template<typename _IIter1, typename _IIter2, typename _OIter,\n \t   typename _Compare>\n-    _OIter \n+    _OIter\n     set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter>\n-    _OIter \n+    _OIter\n     set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter,\n \t   typename _Compare>\n-    _OIter \n+    _OIter\n     set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter>\n     _OIter\n     set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);\n \n-  template<typename _IIter1, typename _IIter2, typename _OIter, \n+  template<typename _IIter1, typename _IIter2, typename _OIter,\n \t   typename _Compare>\n     _OIter\n-    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, \n+    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2,\n \t\t\t     _OIter, _Compare);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter>\n-    _OIter \n+    _OIter\n     set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter,\n \t   typename _Compare>\n-    _OIter \n+    _OIter\n     set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);\n \n   template<typename _RAIter>\n-    void \n+    void\n     sort(_RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Compare>\n-    void \n+    void\n     sort(_RAIter, _RAIter, _Compare);\n \n   template<typename _RAIter>\n-    void \n+    void\n     stable_sort(_RAIter, _RAIter);\n \n   template<typename _RAIter, typename _Compare>\n-    void \n+    void\n     stable_sort(_RAIter, _RAIter, _Compare);\n \n   template<typename _IIter, typename _OIter, typename _UnaryOperation>\n-    _OIter \n+    _OIter\n     transform(_IIter, _IIter, _OIter, _UnaryOperation);\n \n-  template<typename _IIter1, typename _IIter2, typename _OIter, \n+  template<typename _IIter1, typename _IIter2, typename _OIter,\n \t   typename _BinaryOperation>\n-    _OIter \n+    _OIter\n     transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation);\n \n   template<typename _IIter, typename _OIter>\n-    _OIter \n+    _OIter\n     unique_copy(_IIter, _IIter, _OIter);\n \n   template<typename _IIter, typename _OIter, typename _BinaryPredicate>\n-    _OIter \n+    _OIter\n     unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate);\n \n _GLIBCXX_END_NAMESPACE_ALGO"}, {"sha": "60b825c541e7ef2e2e358c9691ff693fbc8cac0e", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a38acdfdce27d0e05e5167ebc210cfa8ff677bc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a38acdfdce27d0e05e5167ebc210cfa8ff677bc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=9a38acdfdce27d0e05e5167ebc210cfa8ff677bc", "patch": "@@ -70,7 +70,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   public:\n     virtual char const* what() const noexcept;\n \n-    virtual ~bad_weak_ptr() noexcept;    \n+    virtual ~bad_weak_ptr() noexcept;\n   };\n \n   // Substitute for bad_weak_ptr object in the case of -fno-exceptions.\n@@ -108,31 +108,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class _Sp_counted_base\n     : public _Mutex_base<_Lp>\n     {\n-    public:  \n+    public:\n       _Sp_counted_base() noexcept\n       : _M_use_count(1), _M_weak_count(1) { }\n-      \n+\n       virtual\n       ~_Sp_counted_base() noexcept\n       { }\n-  \n+\n       // Called when _M_use_count drops to zero, to release the resources\n       // managed by *this.\n       virtual void\n       _M_dispose() noexcept = 0;\n-      \n+\n       // Called when _M_weak_count drops to zero.\n       virtual void\n       _M_destroy() noexcept\n       { delete this; }\n-      \n+\n       virtual void*\n       _M_get_deleter(const std::type_info&) noexcept = 0;\n \n       void\n       _M_add_ref_copy()\n       { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }\n-  \n+\n       void\n       _M_add_ref_lock();\n \n@@ -167,7 +167,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n               }\n \t  }\n       }\n-  \n+\n       void\n       _M_weak_add_ref() noexcept\n       { __gnu_cxx::__atomic_add_dispatch(&_M_weak_count, 1); }\n@@ -189,7 +189,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    _M_destroy();\n \t  }\n       }\n-  \n+\n       long\n       _M_get_use_count() const noexcept\n       {\n@@ -198,7 +198,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         return __atomic_load_n(&_M_use_count, __ATOMIC_RELAXED);\n       }\n \n-    private:  \n+    private:\n       _Sp_counted_base(_Sp_counted_base const&) = delete;\n       _Sp_counted_base& operator=(_Sp_counted_base const&) = delete;\n \n@@ -229,7 +229,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     }\n \n-  template<> \n+  template<>\n     inline void\n     _Sp_counted_base<_S_atomic>::\n     _M_add_ref_lock()\n@@ -241,10 +241,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  if (__count == 0)\n \t    __throw_bad_weak_ptr();\n \t  // Replace the current counter value with the old value + 1, as\n-\t  // long as it's not changed meanwhile. \n+\t  // long as it's not changed meanwhile.\n \t}\n       while (!__atomic_compare_exchange_n(&_M_use_count, &__count, __count + 1,\n-\t\t\t\t\t  true, __ATOMIC_ACQ_REL, \n+\t\t\t\t\t  true, __ATOMIC_ACQ_REL,\n \t\t\t\t\t  __ATOMIC_RELAXED));\n     }\n "}]}