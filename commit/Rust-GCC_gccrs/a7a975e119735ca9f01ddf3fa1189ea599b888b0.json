{"sha": "a7a975e119735ca9f01ddf3fa1189ea599b888b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdhOTc1ZTExOTczNWNhOWYwMWRkZjNmYTExODllYTU5OWI4ODhiMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-04-19T10:08:02Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-04-19T10:08:02Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r791", "tree": {"sha": "afa96038a56084700ac0109a5b5d8f4ab4e58423", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afa96038a56084700ac0109a5b5d8f4ab4e58423"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7a975e119735ca9f01ddf3fa1189ea599b888b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a975e119735ca9f01ddf3fa1189ea599b888b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7a975e119735ca9f01ddf3fa1189ea599b888b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a975e119735ca9f01ddf3fa1189ea599b888b0/comments", "author": null, "committer": null, "parents": [{"sha": "e5f6a288fb94fa9ca3bf7408fc03146fbd292003", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5f6a288fb94fa9ca3bf7408fc03146fbd292003", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5f6a288fb94fa9ca3bf7408fc03146fbd292003"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "0c06624092bad884304ec7353282a7c2da4782fc", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a975e119735ca9f01ddf3fa1189ea599b888b0/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a975e119735ca9f01ddf3fa1189ea599b888b0/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=a7a975e119735ca9f01ddf3fa1189ea599b888b0", "patch": "@@ -1234,20 +1234,22 @@ struct rt_cargs {int gregs, fregs; };\n #define CONST_COSTS(RTX,CODE,OUTER_CODE) \\\n   case CONST_INT:\t\t\t\t\t\t\\\n     if ((OUTER_CODE) == IOR && exact_log2 (INTVAL (RTX)) >= 0\t\\\n-\t|| (OUTER_CODE) == AND && exact_log2 (~INTVAL (RTX)) >= 0\t\\\n-\t|| (((OUTER_CODE) == PLUS || (OUTER_CODE) == MINUS)\t\t\\\n+\t|| (OUTER_CODE) == AND && exact_log2 (~INTVAL (RTX)) >= 0 \\\n+\t|| (((OUTER_CODE) == PLUS || (OUTER_CODE) == MINUS)\t\\\n \t    && (unsigned int) (INTVAL (RTX) + 15) < 31)\t\t\\\n \t|| ((OUTER_CODE) == SET && (unsigned int) INTVAL (RTX) < 16))\\\n       return 0;\t\t\t\t\t\t\t\\\n-    return ((unsigned)(INTVAL(RTX) + 0x8000) < 0x10000 || (INTVAL (RTX) & 0xffff0000) == 0) ? 0 : COSTS_N_INSNS (2);\\\n+    return ((unsigned int) (INTVAL(RTX) + 0x8000) < 0x10000\t\t\\\n+\t    || (INTVAL (RTX) & 0xffff0000) == 0) ? 0 : COSTS_N_INSNS (2);\\\n   case CONST:\t\t\t\t\t\t\t\\\n   case LABEL_REF:\t\t\t\t\t\t\\\n   case SYMBOL_REF:\t\t\t\t\t\t\\\n     if (current_function_operand (RTX, Pmode)) return 0;\t\\\n-    return COSTS_N_INSNS (2);\n+    return COSTS_N_INSNS (2);\t\t\t\t\t\\\n   case CONST_DOUBLE:\t\t\t\t\t\t\\\n     if ((RTX) == CONST0_RTX (GET_MODE (RTX))) return 2;\t\t\\\n-    return (GET_MODE_CLASS (GET_MODE (RTX)) == MODE_FLOAT) ? COSTS_N_INSNS (5) : COSTS_N_INSNS (4);\n+    return ((GET_MODE_CLASS (GET_MODE (RTX)) == MODE_FLOAT)\t\\\n+\t    ? COSTS_N_INSNS (5) : COSTS_N_INSNS (4));\n \n /* Provide the costs of a rtl expression.  This is in the body of a\n    switch on CODE. "}, {"sha": "39de456de2ec94fa8131df197e3c10bda36f0555", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a975e119735ca9f01ddf3fa1189ea599b888b0/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a975e119735ca9f01ddf3fa1189ea599b888b0/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=a7a975e119735ca9f01ddf3fa1189ea599b888b0", "patch": "@@ -1081,7 +1081,13 @@\n   int start = INTVAL (operands[3]) & 31;\n   int size = INTVAL (operands[2]) & 31;\n \n-  if ((start < 16 && start + size <= 16) || start >= 16)\n+  /* If the bitfield being tested fits in the upper or lower half of a\n+     word, it is possible to use andiu. or andil. to test it.  This is\n+     useful because the condition register set-use delay is smaller for\n+     andi[ul]. than for rlinm.  This doesn't work when the starting bit\n+     position is 0 because the LT and GT bits may be set wrong.  */\n+\n+  if ((start > 0 && start + size <= 16) || start >= 16)\n     {\n       operands[3] = gen_rtx (CONST_INT, VOIDmode,\n \t\t\t     ((1 << (16 - (start & 15)))\n@@ -1114,15 +1120,10 @@\n   int start = INTVAL (operands[3]) & 31;\n   int size = INTVAL (operands[2]) & 31;\n \n-  if ((start < 16 && start + size <= 16) || start >= 16)\n+  if (start >= 16 && start + size == 32)\n     {\n-      operands[3] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t     ((1 << (16 - (start & 15)))\n-\t\t\t      - (1 << (16 - (start & 15) - size))));\n-      if (start < 16)\n-\treturn \\\"andiu. %0,%1,%3\\\";\n-      else\n-\treturn \\\"andil. %0,%1,%3\\\";\n+      operands[3] = gen_rtx (CONST_INT, VOIDmode, (1 << (32 - start)) - 1);\n+      return \\\"andil. %0,%1,%3\\\";\n     }\n   \n   if (start + size >= 32)"}]}