{"sha": "b71b7a8ed8d39eb48751b6f84f41c2be45e9ed44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjcxYjdhOGVkOGQzOWViNDg3NTFiNmY4NGY0MWMyYmU0NWU5ZWQ0NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-05-17T12:53:30Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-05-17T12:53:30Z"}, "message": "re PR tree-optimization/71132 (gcc ICE at -O3 on valid code on x86_64-linux-gnu with \u201cseg fault\u201d)\n\n2016-05-17  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/71132\n\t* tree-loop-distribution.c (create_rdg_cd_edges): Pass in loop.\n\tOnly add control dependences for blocks in the loop.\n\t(build_rdg): Adjust.\n\t(generate_code_for_partition): Return whether loop should\n\tbe destroyed and delay that.\n\t(distribute_loop): Likewise.\n\t(pass_loop_distribution::execute): Record loops to be destroyed\n\tand perform delayed destroying of loops.\n\n\t* gcc.dg/torture/pr71132.c: New testcase.\n\nFrom-SVN: r236320", "tree": {"sha": "7f958dd4363ca0d3524f248ceb1479c8e213d71c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f958dd4363ca0d3524f248ceb1479c8e213d71c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b71b7a8ed8d39eb48751b6f84f41c2be45e9ed44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b71b7a8ed8d39eb48751b6f84f41c2be45e9ed44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b71b7a8ed8d39eb48751b6f84f41c2be45e9ed44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b71b7a8ed8d39eb48751b6f84f41c2be45e9ed44/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c51ad4678820228a3d318f342b5e52b472b9ac9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c51ad4678820228a3d318f342b5e52b472b9ac9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c51ad4678820228a3d318f342b5e52b472b9ac9"}], "stats": {"total": 76, "additions": 66, "deletions": 10}, "files": [{"sha": "72ea2966c1f3e8edbd38f090672c4758a5fbce51", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b71b7a8ed8d39eb48751b6f84f41c2be45e9ed44/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b71b7a8ed8d39eb48751b6f84f41c2be45e9ed44/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b71b7a8ed8d39eb48751b6f84f41c2be45e9ed44", "patch": "@@ -1,3 +1,15 @@\n+2016-05-17  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71132\n+\t* tree-loop-distribution.c (create_rdg_cd_edges): Pass in loop.\n+\tOnly add control dependences for blocks in the loop.\n+\t(build_rdg): Adjust.\n+\t(generate_code_for_partition): Return whether loop should\n+\tbe destroyed and delay that.\n+\t(distribute_loop): Likewise.\n+\t(pass_loop_distribution::execute): Record loops to be destroyed\n+\tand perform delayed destroying of loops.\n+\n 2016-05-17  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/70809"}, {"sha": "cc3570ca7ba130a8e85dddaa451de1411cae2ef8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b71b7a8ed8d39eb48751b6f84f41c2be45e9ed44/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b71b7a8ed8d39eb48751b6f84f41c2be45e9ed44/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b71b7a8ed8d39eb48751b6f84f41c2be45e9ed44", "patch": "@@ -1,3 +1,8 @@\n+2016-05-17  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71132\n+\t* gcc.dg/torture/pr71132.c: New testcase.\n+\n 2016-05-17  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* g++.dg/inherit/think1.C: Fix dg-do and dg-skip order."}, {"sha": "2991718ad3a57f96d42d630dbbd664e009ba4b31", "filename": "gcc/testsuite/gcc.dg/torture/pr71132.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b71b7a8ed8d39eb48751b6f84f41c2be45e9ed44/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71132.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b71b7a8ed8d39eb48751b6f84f41c2be45e9ed44/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71132.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71132.c?ref=b71b7a8ed8d39eb48751b6f84f41c2be45e9ed44", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+\n+typedef unsigned size_t;\n+struct {\n+    unsigned char buf[sizeof(long)];\n+} a;\n+size_t b;\n+int main()\n+{\n+  size_t c, i;\n+  unsigned char *d;\n+  for (; c < sizeof(long);)\n+    {\n+      d = a.buf;\n+      b = 0;\n+      for (; b < i; b++)\n+\t*d++ = '\\0';\n+      for (; c < b; c++)\n+\t*d++ = 'a';\n+      c = 0;\n+      for (; i < sizeof(long); i++)\n+\t;\n+    }\n+}"}, {"sha": "a801348453a46bab3f438494422fbedd087d5c01", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b71b7a8ed8d39eb48751b6f84f41c2be45e9ed44/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b71b7a8ed8d39eb48751b6f84f41c2be45e9ed44/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=b71b7a8ed8d39eb48751b6f84f41c2be45e9ed44", "patch": "@@ -312,7 +312,7 @@ create_rdg_flow_edges (struct graph *rdg)\n /* Creates the edges of the reduced dependence graph RDG.  */\n \n static void\n-create_rdg_cd_edges (struct graph *rdg, control_dependences *cd)\n+create_rdg_cd_edges (struct graph *rdg, control_dependences *cd, loop_p loop)\n {\n   int i;\n \n@@ -324,6 +324,7 @@ create_rdg_cd_edges (struct graph *rdg, control_dependences *cd)\n \t  edge_iterator ei;\n \t  edge e;\n \t  FOR_EACH_EDGE (e, ei, gimple_bb (stmt)->preds)\n+\t    if (flow_bb_inside_loop_p (loop, e->src))\n \t      create_edge_for_control_dependence (rdg, e->src, i, cd);\n \t}\n       else\n@@ -455,7 +456,7 @@ build_rdg (vec<loop_p> loop_nest, control_dependences *cd)\n \n   create_rdg_flow_edges (rdg);\n   if (cd)\n-    create_rdg_cd_edges (rdg, cd);\n+    create_rdg_cd_edges (rdg, cd, loop_nest[0]);\n \n   datarefs.release ();\n \n@@ -917,9 +918,9 @@ destroy_loop (struct loop *loop)\n \t\t\t   recompute_dominator (CDI_DOMINATORS, dest));\n }\n \n-/* Generates code for PARTITION.  */\n+/* Generates code for PARTITION.  Return whether LOOP needs to be destroyed.  */\n \n-static void\n+static bool \n generate_code_for_partition (struct loop *loop,\n \t\t\t     partition *partition, bool copy_p)\n {\n@@ -930,7 +931,7 @@ generate_code_for_partition (struct loop *loop,\n       gcc_assert (!partition_reduction_p (partition)\n \t\t  || !copy_p);\n       generate_loops_for_partition (loop, partition, copy_p);\n-      return;\n+      return false;\n \n     case PKIND_MEMSET:\n       generate_memset_builtin (loop, partition);\n@@ -947,7 +948,8 @@ generate_code_for_partition (struct loop *loop,\n   /* Common tail for partitions we turn into a call.  If this was the last\n      partition for which we generate code, we have to destroy the loop.  */\n   if (!copy_p)\n-    destroy_loop (loop);\n+    return true;\n+  return false;\n }\n \n \n@@ -1397,11 +1399,12 @@ pgcmp (const void *v1_, const void *v2_)\n /* Distributes the code from LOOP in such a way that producer\n    statements are placed before consumer statements.  Tries to separate\n    only the statements from STMTS into separate loops.\n-   Returns the number of distributed loops.  */\n+   Returns the number of distributed loops.  Set *DESTROY_P to whether\n+   LOOP needs to be destroyed.  */\n \n static int\n distribute_loop (struct loop *loop, vec<gimple *> stmts,\n-\t\t control_dependences *cd, int *nb_calls)\n+\t\t control_dependences *cd, int *nb_calls, bool *destroy_p)\n {\n   struct graph *rdg;\n   partition *partition;\n@@ -1644,11 +1647,12 @@ distribute_loop (struct loop *loop, vec<gimple *> stmts,\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     dump_rdg_partitions (dump_file, partitions);\n \n+  *destroy_p = false;\n   FOR_EACH_VEC_ELT (partitions, i, partition)\n     {\n       if (partition_builtin_p (partition))\n \t(*nb_calls)++;\n-      generate_code_for_partition (loop, partition, i < nbp - 1);\n+      *destroy_p |= generate_code_for_partition (loop, partition, i < nbp - 1);\n     }\n \n  ldist_done:\n@@ -1702,6 +1706,7 @@ pass_loop_distribution::execute (function *fun)\n   bool changed = false;\n   basic_block bb;\n   control_dependences *cd = NULL;\n+  auto_vec<loop_p> loops_to_be_destroyed;\n \n   FOR_ALL_BB_FN (bb, fun)\n     {\n@@ -1787,8 +1792,12 @@ pass_loop_distribution::execute (function *fun)\n \t      cd = new control_dependences (create_edge_list ());\n \t      free_dominance_info (CDI_POST_DOMINATORS);\n \t    }\n+\t  bool destroy_p;\n \t  nb_generated_loops = distribute_loop (loop, work_list, cd,\n-\t\t\t\t\t\t&nb_generated_calls);\n+\t\t\t\t\t\t&nb_generated_calls,\n+\t\t\t\t\t\t&destroy_p);\n+\t  if (destroy_p)\n+\t    loops_to_be_destroyed.safe_push (loop);\n \t}\n \n       if (nb_generated_loops + nb_generated_calls > 0)\n@@ -1806,6 +1815,12 @@ pass_loop_distribution::execute (function *fun)\n   if (cd)\n     delete cd;\n \n+  /* Destroy loop bodies that could not be reused.  Do this late as we\n+     otherwise can end up refering to stale data in control dependences.  */\n+  unsigned i;\n+  FOR_EACH_VEC_ELT (loops_to_be_destroyed, i, loop)\n+    destroy_loop (loop);\n+\n   if (changed)\n     {\n       /* Cached scalar evolutions now may refer to wrong or non-existing"}]}