{"sha": "3e077364f3f6aa74bc662d5c2f16264dd622a4a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UwNzczNjRmM2Y2YWE3NGJjNjYyZDVjMmYxNjI2NGRkNjIyYTRhOQ==", "commit": {"author": {"name": "Andrew Burgess", "email": "andrew.burgess@embecosm.com", "date": "2016-11-16T11:42:43Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2016-11-16T11:42:43Z"}, "message": "[ARC] Fix LE tests for nps400 variant.\n\ngcc/arc: New peephole2 and little endian arc test fixes\n\nResolve some test failures introduced for little endian arc as a result\nof the recent arc/nps400 additions.\n\nThere's a new peephole2 optimisation to merge together two zero_extracts\nin order that the movb instruction can be used.\n\nOne of the test cases is extended so that the test does something\nmeaningful in both big and little endian arc mode.\n\nOther tests have their expected results updated to reflect improvements\nin other areas of GCC.\n\ngcc/ChangeLog:\n\n Andrew Burgess  <andrew.burgess@embecosm.com>\n\n\t* config/arc/arc.md (movb peephole2): New peephole2 to merge two\n\tzero_extract operations to allow a movb to occur.\n\t* gcc.target/arc/movb-1.c: Update little endian arc results.\n\t* gcc.target/arc/movb-2.c: Likewise.\n\t* gcc.target/arc/movb-5.c: Likewise.\n\t* gcc.target/arc/movh_cl-1.c: Extend test to cover little endian\n\tarc.\n\nFrom-SVN: r242484", "tree": {"sha": "b45826a33dd122c016d0842c51be0ae9a6d5863f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b45826a33dd122c016d0842c51be0ae9a6d5863f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e077364f3f6aa74bc662d5c2f16264dd622a4a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e077364f3f6aa74bc662d5c2f16264dd622a4a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e077364f3f6aa74bc662d5c2f16264dd622a4a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e077364f3f6aa74bc662d5c2f16264dd622a4a9/comments", "author": {"login": "T-J-Teru", "id": 475372, "node_id": "MDQ6VXNlcjQ3NTM3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/T-J-Teru", "html_url": "https://github.com/T-J-Teru", "followers_url": "https://api.github.com/users/T-J-Teru/followers", "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}", "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}", "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions", "organizations_url": "https://api.github.com/users/T-J-Teru/orgs", "repos_url": "https://api.github.com/users/T-J-Teru/repos", "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}", "received_events_url": "https://api.github.com/users/T-J-Teru/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "61a58d07c68e4093f5cb59aadf3daa35db3d49a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61a58d07c68e4093f5cb59aadf3daa35db3d49a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61a58d07c68e4093f5cb59aadf3daa35db3d49a7"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "40922a098fb15398ff64b6187e2c5848822d50ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e077364f3f6aa74bc662d5c2f16264dd622a4a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e077364f3f6aa74bc662d5c2f16264dd622a4a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e077364f3f6aa74bc662d5c2f16264dd622a4a9", "patch": "@@ -1,3 +1,13 @@\n+2016-11-16  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* config/arc/arc.md (movb peephole2): New peephole2 to merge two\n+\tzero_extract operations to allow a movb to occur.\n+\t* testsuite/gcc.target/arc/movb-1.c: Update little endian arc results.\n+\t* testsuite/gcc.target/arc/movb-2.c: Likewise.\n+\t* testsuite/gcc.target/arc/movb-5.c: Likewise.\n+\t* testsuite/gcc.target/arc/movh_cl-1.c: Extend test to cover\n+\tlittle endian arc.\n+\n 2016-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "c494ca5dc604f62b5172f7469cf2cbb3ef984a4d", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e077364f3f6aa74bc662d5c2f16264dd622a4a9/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e077364f3f6aa74bc662d5c2f16264dd622a4a9/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=3e077364f3f6aa74bc662d5c2f16264dd622a4a9", "patch": "@@ -6225,6 +6225,20 @@\n    (set_attr \"iscompact\" \"maybe,false\")\n    (set_attr \"predicable\" \"no,no\")])\n \n+(define_peephole2\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(zero_extract:SI (match_dup 0)\n+\t\t\t (match_operand:SI 1 \"const_int_operand\" \"\")\n+\t\t\t (match_operand:SI 2 \"const_int_operand\" \"\")))\n+   (set (zero_extract:SI (match_operand:SI 3 \"register_operand\" \"\")\n+\t\t\t (match_dup 1)\n+\t\t\t (match_dup 2))\n+\t(match_dup 0))]\n+  \"TARGET_NPS_BITOPS\n+   && !reg_overlap_mentioned_p (operands[0], operands[3])\"\n+  [(set (zero_extract:SI (match_dup 3) (match_dup 1) (match_dup 2))\n+\t(zero_extract:SI (match_dup 0) (match_dup 1) (match_dup 2)))])\n+\n ;; include the arc-FPX instructions\n (include \"fpx.md\")\n "}, {"sha": "94d9f5fcd5e99da369ee037f1ae38485cc788d6c", "filename": "gcc/testsuite/gcc.target/arc/movb-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e077364f3f6aa74bc662d5c2f16264dd622a4a9/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmovb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e077364f3f6aa74bc662d5c2f16264dd622a4a9/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmovb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmovb-1.c?ref=3e077364f3f6aa74bc662d5c2f16264dd622a4a9", "patch": "@@ -10,4 +10,4 @@ f (void)\n   bar.b = foo.b;\n }\n /* { dg-final { scan-assembler \"movb\\[ \\t\\]+r\\[0-5\\]+, *r\\[0-5\\]+, *r\\[0-5\\]+, *5, *3, *8\" { target arceb-*-* } } } */\n-/* { dg-final { scan-assembler \"movb\\[ \\t\\]+r\\[0-5\\]+, *r\\[0-5\\]+, *r\\[0-5\\]+, *19, *21, *8\" { target arc-*-* } } } */\n+/* { dg-final { scan-assembler \"movb\\[ \\t\\]+r\\[0-5\\]+, *r\\[0-5\\]+, *r\\[0-5\\]+, *3, *5, *8\" { target arc-*-* } } } */"}, {"sha": "708f393497dc724c26921aa626989b8e5a59f3d7", "filename": "gcc/testsuite/gcc.target/arc/movb-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e077364f3f6aa74bc662d5c2f16264dd622a4a9/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmovb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e077364f3f6aa74bc662d5c2f16264dd622a4a9/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmovb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmovb-2.c?ref=3e077364f3f6aa74bc662d5c2f16264dd622a4a9", "patch": "@@ -9,5 +9,5 @@ f (void)\n {\n   bar.b = foo.b;\n }\n-/* { dg-final { scan-assembler \"movb\\[ \\t\\]+r\\[0-5\\]+, *r\\[0-5\\]+, *r\\[0-5\\]+, *23, *23, *9\" { target arc-*-* } } } */\n+/* { dg-final { scan-assembler \"movb\\[ \\t\\]+r\\[0-5\\]+, *r\\[0-5\\]+, *r\\[0-5\\]+, *7, *7, *9\" { target arc-*-* } } } */\n /* { dg-final { scan-assembler \"movb\\[ \\t\\]+r\\[0-5\\]+, *r\\[0-5\\]+, *r\\[0-5\\]+, *0, *0, *9\" { target arceb-*-* } } } */"}, {"sha": "d28588807820212c053fef45cc8fd413d807d4b7", "filename": "gcc/testsuite/gcc.target/arc/movb-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e077364f3f6aa74bc662d5c2f16264dd622a4a9/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmovb-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e077364f3f6aa74bc662d5c2f16264dd622a4a9/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmovb-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmovb-5.c?ref=3e077364f3f6aa74bc662d5c2f16264dd622a4a9", "patch": "@@ -9,5 +9,5 @@ f (void)\n {\n   bar.b = foo.b;\n }\n-/* { dg-final { scan-assembler \"movb\\[ \\t\\]+r\\[0-5\\]+, *r\\[0-5\\]+, *r\\[0-5\\]+, *23, *(23|7), *9\" { target arc-*-* } } } */\n+/* { dg-final { scan-assembler \"movb\\[ \\t\\]+r\\[0-5\\]+, *r\\[0-5\\]+, *r\\[0-5\\]+, *7, *7, *9\" { target arc-*-* } } } */\n /* { dg-final { scan-assembler \"movb\\[ \\t\\]+r\\[0-5\\]+, *r\\[0-5\\]+, *r\\[0-5\\]+, *0, *0, *9\" { target arceb-*-* } } } */"}, {"sha": "c6434811e8afd3096ec988c486a759523df1a32d", "filename": "gcc/testsuite/gcc.target/arc/movh_cl-1.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e077364f3f6aa74bc662d5c2f16264dd622a4a9/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmovh_cl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e077364f3f6aa74bc662d5c2f16264dd622a4a9/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmovh_cl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmovh_cl-1.c?ref=3e077364f3f6aa74bc662d5c2f16264dd622a4a9", "patch": "@@ -10,6 +10,9 @@ struct thing\n     {\n       unsigned a : 1;\n       unsigned b : 1;\n+      unsigned c : 28;\n+      unsigned d : 1;\n+      unsigned e : 1;\n     };\n   };\n };\n@@ -24,4 +27,12 @@ blah ()\n   func (xx.raw);\n }\n \n+void\n+woof ()\n+{\n+  struct thing xx;\n+  xx.d = xx.e = 1;\n+  func (xx.raw);\n+}\n+\n /* { dg-final { scan-assembler \"movh\\.cl r\\[0-9\\]+,0xc0000000>>16\" } } */"}]}