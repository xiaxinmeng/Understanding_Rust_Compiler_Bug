{"sha": "81c2c32de9c1058c33fcf77ada31186b4ae1f1fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFjMmMzMmRlOWMxMDU4YzMzZmNmNzdhZGEzMTE4NmI0YWUxZjFmZQ==", "commit": {"author": {"name": "Matthias Kretz", "email": "kretz@kde.org", "date": "2021-02-03T15:49:30Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-02-03T15:49:30Z"}, "message": "libstdc++: Fix mask reduction of simd_mask<double> on POWER7\n\nPOWER7 does not support __vector long long reductions, making the\ngeneric _S_popcount implementation ill-formed. Specializing _S_popcount\nfor PPC allows optimization and avoids the issue.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/bits/simd.h: Add __have_power10vec\n\tconditional on _ARCH_PWR10.\n\t* include/experimental/bits/simd_builtin.h: Forward declare\n\t_MaskImplPpc and use it as _MaskImpl when __ALTIVEC__ is\n\tdefined.\n\t(_MaskImplBuiltin::_S_some_of): Call _S_popcount from the\n\t_SuperImpl for optimizations and correctness.\n\t* include/experimental/bits/simd_ppc.h: Add _MaskImplPpc.\n\t(_MaskImplPpc::_S_popcount): Implement via vec_cntm for POWER10.\n\tOtherwise, for >=int use -vec_sums divided by a sizeof factor.\n\tFor <int use -vec_sums(vec_sum4s(...)) to sum all mask entries.", "tree": {"sha": "ade43ae42ef8baf375965866e4811c3a871d9389", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ade43ae42ef8baf375965866e4811c3a871d9389"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81c2c32de9c1058c33fcf77ada31186b4ae1f1fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81c2c32de9c1058c33fcf77ada31186b4ae1f1fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81c2c32de9c1058c33fcf77ada31186b4ae1f1fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81c2c32de9c1058c33fcf77ada31186b4ae1f1fe/comments", "author": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71f9b9bd0acc7d0749e159efb1b9b4c57197a77d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71f9b9bd0acc7d0749e159efb1b9b4c57197a77d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71f9b9bd0acc7d0749e159efb1b9b4c57197a77d"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "becd1d6a4bb7104938d62f3274c29ea9e768a154", "filename": "libstdc++-v3/include/experimental/bits/simd.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81c2c32de9c1058c33fcf77ada31186b4ae1f1fe/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81c2c32de9c1058c33fcf77ada31186b4ae1f1fe/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h?ref=81c2c32de9c1058c33fcf77ada31186b4ae1f1fe", "patch": "@@ -477,6 +477,11 @@ constexpr inline bool __support_neon_float =\n   false;\n #endif\n \n+#ifdef _ARCH_PWR10\n+constexpr inline bool __have_power10vec = true;\n+#else\n+constexpr inline bool __have_power10vec = false;\n+#endif\n #ifdef __POWER9_VECTOR__\n constexpr inline bool __have_power9vec = true;\n #else"}, {"sha": "7f728a10488b75280eb15a1f71dafaaf7b115d20", "filename": "libstdc++-v3/include/experimental/bits/simd_builtin.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81c2c32de9c1058c33fcf77ada31186b4ae1f1fe/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_builtin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81c2c32de9c1058c33fcf77ada31186b4ae1f1fe/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_builtin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_builtin.h?ref=81c2c32de9c1058c33fcf77ada31186b4ae1f1fe", "patch": "@@ -920,6 +920,7 @@ template <typename _Abi> struct _MaskImplX86;\n template <typename _Abi> struct _SimdImplNeon;\n template <typename _Abi> struct _MaskImplNeon;\n template <typename _Abi> struct _SimdImplPpc;\n+template <typename _Abi> struct _MaskImplPpc;\n \n // simd_abi::_VecBuiltin {{{\n template <int _UsedBytes>\n@@ -959,10 +960,11 @@ template <int _UsedBytes>\n     using _CommonImpl = _CommonImplBuiltin;\n #ifdef __ALTIVEC__\n     using _SimdImpl = _SimdImplPpc<_VecBuiltin<_UsedBytes>>;\n+    using _MaskImpl = _MaskImplPpc<_VecBuiltin<_UsedBytes>>;\n #else\n     using _SimdImpl = _SimdImplBuiltin<_VecBuiltin<_UsedBytes>>;\n-#endif\n     using _MaskImpl = _MaskImplBuiltin<_VecBuiltin<_UsedBytes>>;\n+#endif\n #endif\n \n     // }}}\n@@ -2899,7 +2901,7 @@ template <typename _Abi>\n       _GLIBCXX_SIMD_INTRINSIC static bool\n       _S_some_of(simd_mask<_Tp, _Abi> __k)\n       {\n-\tconst int __n_true = _S_popcount(__k);\n+\tconst int __n_true = _SuperImpl::_S_popcount(__k);\n \treturn __n_true > 0 && __n_true < int(_S_size<_Tp>);\n       }\n "}, {"sha": "ef52d129a85327799db54f770018d8bcebc2526d", "filename": "libstdc++-v3/include/experimental/bits/simd_ppc.h", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81c2c32de9c1058c33fcf77ada31186b4ae1f1fe/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_ppc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81c2c32de9c1058c33fcf77ada31186b4ae1f1fe/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_ppc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_ppc.h?ref=81c2c32de9c1058c33fcf77ada31186b4ae1f1fe", "patch": "@@ -30,6 +30,7 @@\n #ifndef __ALTIVEC__\n #error \"simd_ppc.h may only be included when AltiVec/VMX is available\"\n #endif\n+#include <altivec.h>\n \n _GLIBCXX_SIMD_BEGIN_NAMESPACE\n \n@@ -114,10 +115,42 @@ template <typename _Abi>\n     // }}}\n   };\n \n+// }}}\n+// _MaskImplPpc {{{\n+template <typename _Abi>\n+  struct _MaskImplPpc : _MaskImplBuiltin<_Abi>\n+  {\n+    using _Base = _MaskImplBuiltin<_Abi>;\n+\n+    // _S_popcount {{{\n+    template <typename _Tp>\n+      _GLIBCXX_SIMD_INTRINSIC static int _S_popcount(simd_mask<_Tp, _Abi> __k)\n+      {\n+\tconst auto __kv = __as_vector(__k);\n+\tif constexpr (__have_power10vec)\n+\t  {\n+\t    return vec_cntm(__to_intrin(__kv), 1);\n+\t  }\n+\telse if constexpr (sizeof(_Tp) >= sizeof(int))\n+\t  {\n+\t    using _Intrin = __intrinsic_type16_t<int>;\n+\t    const int __sum = -vec_sums(__intrin_bitcast<_Intrin>(__kv), _Intrin())[3];\n+\t    return __sum / (sizeof(_Tp) / sizeof(int));\n+\t  }\n+\telse\n+\t  {\n+\t    const auto __summed_to_int = vec_sum4s(__to_intrin(__kv), __intrinsic_type16_t<int>());\n+\t    return -vec_sums(__summed_to_int, __intrinsic_type16_t<int>())[3];\n+\t  }\n+      }\n+\n+    // }}}\n+  };\n+\n // }}}\n \n _GLIBCXX_SIMD_END_NAMESPACE\n #endif // __cplusplus >= 201703L\n #endif // _GLIBCXX_EXPERIMENTAL_SIMD_PPC_H_\n \n-// vim: foldmethod=marker sw=2 noet ts=8 sts=2 tw=80\n+// vim: foldmethod=marker foldmarker={{{,}}} sw=2 noet ts=8 sts=2 tw=100"}]}