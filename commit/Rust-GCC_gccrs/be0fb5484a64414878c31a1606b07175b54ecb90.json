{"sha": "be0fb5484a64414878c31a1606b07175b54ecb90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUwZmI1NDg0YTY0NDE0ODc4YzMxYTE2MDZiMDcxNzViNTRlY2I5MA==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-09-02T16:46:54Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-09-02T16:46:54Z"}, "message": "re PR fortran/91552 (ICE with valid array constructor)\n\n2019-09-02  Steven G. Kargl  <kargl@gc.gnu.org>\n\n\tPR fortran/91552\n\t* array.c (walk_array_constructor): New function.\n\t(gfc_match_array_constructor): Use it.\n\n2019-09-02  Steven G. Kargl  <kargl@gc.gnu.org>\n\n\tPR fortran/91552\n\t* gfortran.dg/pr91552.f90: New test.\n\nFrom-SVN: r275322", "tree": {"sha": "9a1396879160a26623228b2dae36b7b8fe54b292", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a1396879160a26623228b2dae36b7b8fe54b292"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be0fb5484a64414878c31a1606b07175b54ecb90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be0fb5484a64414878c31a1606b07175b54ecb90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be0fb5484a64414878c31a1606b07175b54ecb90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be0fb5484a64414878c31a1606b07175b54ecb90/comments", "author": null, "committer": null, "parents": [{"sha": "b82c2e6fce74a6283fb3efd195d62aa6a88ef561", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b82c2e6fce74a6283fb3efd195d62aa6a88ef561", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b82c2e6fce74a6283fb3efd195d62aa6a88ef561"}], "stats": {"total": 57, "additions": 51, "deletions": 6}, "files": [{"sha": "b0dfb0e7da42dbef06f6be573af436031b007b35", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0fb5484a64414878c31a1606b07175b54ecb90/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0fb5484a64414878c31a1606b07175b54ecb90/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=be0fb5484a64414878c31a1606b07175b54ecb90", "patch": "@@ -1,3 +1,9 @@\n+2019-09-02  Steven G. Kargl  <kargl@gc.gnu.org>\n+\n+\tPR fortran/91552\n+\t* array.c (walk_array_constructor): New function.\n+\t(gfc_match_array_constructor): Use it.\n+\n 2019-09-01  Paul Thomas  <pault@gcc.gnu.org>\n \n \t* array.c (spec_dimen_size): Check for the presence of"}, {"sha": "ba8a81655ed5b077c68c99e4eb191a5532e50332", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0fb5484a64414878c31a1606b07175b54ecb90/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0fb5484a64414878c31a1606b07175b54ecb90/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=be0fb5484a64414878c31a1606b07175b54ecb90", "patch": "@@ -1134,6 +1134,31 @@ match_array_cons_element (gfc_constructor_base *result)\n }\n \n \n+/* Convert components of an array constructor to the type in ts.  */\n+\n+static match\n+walk_array_constructor (gfc_typespec *ts, gfc_constructor_base head)\n+{\n+  gfc_constructor *c;\n+  gfc_expr *e;\n+  match m;\n+\n+  for (c = gfc_constructor_first (head); c; c = gfc_constructor_next (c))\n+    {\n+      e = c->expr;\n+      if (e->expr_type == EXPR_ARRAY && e->ts.type == BT_UNKNOWN\n+\t  && !e->ref && e->value.constructor)\n+\t{\n+\t  m = walk_array_constructor (ts, e->value.constructor);\n+\t  if (m == MATCH_ERROR)\n+\t    return m;\n+\t}\n+      else if (!gfc_convert_type (e, ts, 1) && e->ts.type != BT_UNKNOWN)\n+\treturn MATCH_ERROR;\n+  }\n+  return MATCH_YES;\n+}\n+\n /* Match an array constructor.  */\n \n match\n@@ -1263,14 +1288,13 @@ gfc_match_array_constructor (gfc_expr **result)\n \t    }\n \t}\n \n-      /* Walk the constructor and ensure type conversion for numeric types.  */\n+      /* Walk the constructor, and if possible, do type conversion for\n+\t numeric types.  */\n       if (gfc_numeric_ts (&ts))\n \t{\n-\t  c = gfc_constructor_first (head);\n-\t  for (; c; c = gfc_constructor_next (c))\n-\t    if (!gfc_convert_type (c->expr, &ts, 1)\n-\t\t&& c->expr->ts.type != BT_UNKNOWN)\n-\t      return MATCH_ERROR;\n+\t  m = walk_array_constructor (&ts, head);\n+\t  if (m == MATCH_ERROR)\n+\t    return m;\n \t}\n     }\n   else"}, {"sha": "c2608ce8db4fef65ee31e37bb3a83a340a652c6e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0fb5484a64414878c31a1606b07175b54ecb90/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0fb5484a64414878c31a1606b07175b54ecb90/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=be0fb5484a64414878c31a1606b07175b54ecb90", "patch": "@@ -1,3 +1,8 @@\n+2019-09-02  Steven G. Kargl  <kargl@gc.gnu.org>\n+\n+\tPR fortran/91552\n+\t* gfortran.dg/pr91552.f90: New test.\n+\n 2019-09-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR middle-end/91605"}, {"sha": "bb959185cf92aede4d65d93c25114558ce84e499", "filename": "gcc/testsuite/gfortran.dg/pr91552.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0fb5484a64414878c31a1606b07175b54ecb90/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91552.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0fb5484a64414878c31a1606b07175b54ecb90/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91552.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91552.f90?ref=be0fb5484a64414878c31a1606b07175b54ecb90", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do run }\n+! PR fortran/91552\n+! Code contributed by Gerhard Steinmetz.\n+program p\n+   real :: y(3), z(4)\n+   y = 2.0 * [real :: 1, [2], 3]\n+   z = 2.0 * [real :: 1, [2, [4]], 3]\n+   if (any(y /= [2., 4., 6.])) stop 1\n+   if (any(z /= [2., 4., 8., 6.])) stop 2\n+end"}]}