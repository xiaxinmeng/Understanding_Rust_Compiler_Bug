{"sha": "4e722cf1dc7dd6087ddf8f861e24a9d4ad4bbd6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU3MjJjZjFkYzdkZDYwODdkZGY4Zjg2MWUyNGE5ZDRhZDRiYmQ2YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-12-04T16:32:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-12-04T16:32:22Z"}, "message": "re PR tree-optimization/68680 (On-stack VLA does not cause instrumentation with -fstack-protector)\n\n\tPR tree-optimization/68680\n\t* calls.c (special_function_p): Return ECF_MAY_BE_ALLOCA for\n\tBUILT_IN_ALLOCA{,_WITH_ALIGN}.  Don't check for __builtin_alloca\n\tby name.\n\n\t* gcc.target/i386/pr68680.c: New test.\n\nFrom-SVN: r231279", "tree": {"sha": "7c61ee5c07542943bbc86b68ac6dbd570016fb95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c61ee5c07542943bbc86b68ac6dbd570016fb95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e722cf1dc7dd6087ddf8f861e24a9d4ad4bbd6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e722cf1dc7dd6087ddf8f861e24a9d4ad4bbd6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e722cf1dc7dd6087ddf8f861e24a9d4ad4bbd6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e722cf1dc7dd6087ddf8f861e24a9d4ad4bbd6a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "83b58b6b0e75383fb01cd65b29a8fa1779050269", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83b58b6b0e75383fb01cd65b29a8fa1779050269", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83b58b6b0e75383fb01cd65b29a8fa1779050269"}], "stats": {"total": 43, "additions": 37, "deletions": 6}, "files": [{"sha": "b6ff6e162f5ba3aad7357a57db8ebe36d91fde76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e722cf1dc7dd6087ddf8f861e24a9d4ad4bbd6a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e722cf1dc7dd6087ddf8f861e24a9d4ad4bbd6a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e722cf1dc7dd6087ddf8f861e24a9d4ad4bbd6a", "patch": "@@ -1,5 +1,10 @@\n 2015-12-04  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/68680\n+\t* calls.c (special_function_p): Return ECF_MAY_BE_ALLOCA for\n+\tBUILT_IN_ALLOCA{,_WITH_ALIGN}.  Don't check for __builtin_alloca\n+\tby name.\n+\n \tPR tree-optimization/68671\n \t* tree-ssa-reassoc.c (maybe_optimize_range_tests): For basic\n \tblocks starting with the successor of first bb we've modified"}, {"sha": "1eb4ec7549f1b45bf03ed0bd81213012af41deef", "filename": "gcc/calls.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e722cf1dc7dd6087ddf8f861e24a9d4ad4bbd6a/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e722cf1dc7dd6087ddf8f861e24a9d4ad4bbd6a/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=4e722cf1dc7dd6087ddf8f861e24a9d4ad4bbd6a", "patch": "@@ -502,12 +502,9 @@ special_function_p (const_tree fndecl, int flags)\n       /* We assume that alloca will always be called by name.  It\n \t makes no sense to pass it as a pointer-to-function to\n \t anything that does not understand its behavior.  */\n-      if (((IDENTIFIER_LENGTH (name_decl) == 6\n-\t    && name[0] == 'a'\n-\t    && ! strcmp (name, \"alloca\"))\n-\t   || (IDENTIFIER_LENGTH (name_decl) == 16\n-\t       && name[0] == '_'\n-\t       && ! strcmp (name, \"__builtin_alloca\"))))\n+      if (IDENTIFIER_LENGTH (name_decl) == 6\n+\t  && name[0] == 'a'\n+\t  && ! strcmp (name, \"alloca\"))\n \tflags |= ECF_MAY_BE_ALLOCA;\n \n       /* Disregard prefix _, __, __x or __builtin_.  */\n@@ -553,6 +550,17 @@ special_function_p (const_tree fndecl, int flags)\n \tflags |= ECF_NORETURN;\n     }\n \n+  if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n+    switch (DECL_FUNCTION_CODE (fndecl))\n+      {\n+      case BUILT_IN_ALLOCA:\n+      case BUILT_IN_ALLOCA_WITH_ALIGN:\n+\tflags |= ECF_MAY_BE_ALLOCA;\n+\tbreak;\n+      default:\n+\tbreak;\n+      }\n+\n   return flags;\n }\n "}, {"sha": "b36591a1847606d782eb4d556edaa1f5f9e86e7a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e722cf1dc7dd6087ddf8f861e24a9d4ad4bbd6a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e722cf1dc7dd6087ddf8f861e24a9d4ad4bbd6a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4e722cf1dc7dd6087ddf8f861e24a9d4ad4bbd6a", "patch": "@@ -1,5 +1,8 @@\n 2015-12-04  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/68680\n+\t* gcc.target/i386/pr68680.c: New test.\n+\n \tPR tree-optimization/68671\n \t* gcc.dg/pr68671.c: New test.\n "}, {"sha": "5524e156362ef94b0ba9a165581181ce13a57854", "filename": "gcc/testsuite/gcc.target/i386/pr68680.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e722cf1dc7dd6087ddf8f861e24a9d4ad4bbd6a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr68680.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e722cf1dc7dd6087ddf8f861e24a9d4ad4bbd6a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr68680.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr68680.c?ref=4e722cf1dc7dd6087ddf8f861e24a9d4ad4bbd6a", "patch": "@@ -0,0 +1,15 @@\n+/* PR tree-optimization/68680 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fstack-protector-strong\" } */\n+\n+int foo (char *);\n+\n+int\n+bar (unsigned long x)\n+{\n+  char a[x];\n+  return foo (a);\n+}\n+\n+/* Verify that this function is stack protected.  */\n+/* { dg-final { scan-assembler \"stack_chk_fail\" } } */"}]}