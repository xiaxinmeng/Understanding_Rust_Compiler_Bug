{"sha": "c104e8f1b67a75ea82c62f1fd2aac69c09127562", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzEwNGU4ZjFiNjdhNzVlYTgyYzYyZjFmZDJhYWM2OWMwOTEyNzU2Mg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-04-07T16:18:21Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-04-07T16:18:21Z"}, "message": "libstdc++: Restore ability to use <charconv> in C++14 (PR 94520)\n\nThis C++17 header is supported in C++14 as a GNU extension, but stopped\nworking last year because I made it depend on an internal helper which\nis only defined for C++17 and up.\n\n\tPR libstdc++/94520\n\t* include/std/charconv (__integer_to_chars_result_type)\n\t(__integer_from_chars_result_type): Use __or_ instead of __or_v_ to\n\tallow use in C++14.\n\t* testsuite/20_util/from_chars/1.cc: Run test as C++14 and replace\n\tuse of std::string_view with std::string.\n\t* testsuite/20_util/from_chars/2.cc: Likewise.\n\t* testsuite/20_util/to_chars/1.cc: Likewise.\n\t* testsuite/20_util/to_chars/2.cc: Likewise.", "tree": {"sha": "7f9095c5a83ad79c9fde41cb24572a793f394bf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f9095c5a83ad79c9fde41cb24572a793f394bf7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c104e8f1b67a75ea82c62f1fd2aac69c09127562", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c104e8f1b67a75ea82c62f1fd2aac69c09127562", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c104e8f1b67a75ea82c62f1fd2aac69c09127562", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c104e8f1b67a75ea82c62f1fd2aac69c09127562/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89b01e86ff8521a0decf292595089e5631cc9320", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89b01e86ff8521a0decf292595089e5631cc9320", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89b01e86ff8521a0decf292595089e5631cc9320"}], "stats": {"total": 204, "additions": 112, "deletions": 92}, "files": [{"sha": "b95a89373db8c8cf8aa956939f6e67994a040af7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c104e8f1b67a75ea82c62f1fd2aac69c09127562/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c104e8f1b67a75ea82c62f1fd2aac69c09127562/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c104e8f1b67a75ea82c62f1fd2aac69c09127562", "patch": "@@ -1,3 +1,15 @@\n+2020-04-07  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/94520\n+\t* include/std/charconv (__integer_to_chars_result_type)\n+\t(__integer_from_chars_result_type): Use __or_ instead of __or_v_ to\n+\tallow use in C++14.\n+\t* testsuite/20_util/from_chars/1.cc: Run test as C++14 and replace\n+\tuse of std::string_view with std::string.\n+\t* testsuite/20_util/from_chars/2.cc: Likewise.\n+\t* testsuite/20_util/to_chars/1.cc: Likewise.\n+\t* testsuite/20_util/to_chars/2.cc: Likewise.\n+\n 2020-04-06  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/94498"}, {"sha": "8c9ce9d280e7b7c8007a0f5921a687dee7fb4c0a", "filename": "libstdc++-v3/include/std/charconv", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c104e8f1b67a75ea82c62f1fd2aac69c09127562/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c104e8f1b67a75ea82c62f1fd2aac69c09127562/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv?ref=c104e8f1b67a75ea82c62f1fd2aac69c09127562", "patch": "@@ -68,9 +68,9 @@ namespace __detail\n {\n   template<typename _Tp>\n     using __integer_to_chars_result_type\n-      = enable_if_t<__or_v<__is_signed_integer<_Tp>,\n-\t\t\t   __is_unsigned_integer<_Tp>,\n-\t\t\t   is_same<char, remove_cv_t<_Tp>>>,\n+      = enable_if_t<__or_<__is_signed_integer<_Tp>,\n+\t\t\t  __is_unsigned_integer<_Tp>,\n+\t\t\t  is_same<char, remove_cv_t<_Tp>>>::value,\n \t\t    to_chars_result>;\n \n   // Pick an unsigned type of suitable size. This is used to reduce the\n@@ -564,9 +564,9 @@ namespace __detail\n \n   template<typename _Tp>\n     using __integer_from_chars_result_type\n-      = enable_if_t<__or_v<__is_signed_integer<_Tp>,\n-\t\t\t   __is_unsigned_integer<_Tp>,\n-\t\t\t   is_same<char, remove_cv_t<_Tp>>>,\n+      = enable_if_t<__or_<__is_signed_integer<_Tp>,\n+\t\t\t  __is_unsigned_integer<_Tp>,\n+\t\t\t  is_same<char, remove_cv_t<_Tp>>>::value,\n \t\t    from_chars_result>;\n \n } // namespace __detail"}, {"sha": "916025bc7c6f6d5e623cf4be37d2d8c4ecb636bb", "filename": "libstdc++-v3/testsuite/20_util/from_chars/1.cc", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c104e8f1b67a75ea82c62f1fd2aac69c09127562/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c104e8f1b67a75ea82c62f1fd2aac69c09127562/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F1.cc?ref=c104e8f1b67a75ea82c62f1fd2aac69c09127562", "patch": "@@ -15,21 +15,23 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17\" }\n-// { dg-do run { target c++17 } }\n+// <charconv> is supported in C++14 as a GNU extension\n+// { dg-do run { target c++14 } }\n \n #include <charconv>\n-#include <string_view>\n+#include <string>\n \n template<typename I>\n bool\n-check_from_chars(I expected, std::string_view s, int base = 0, char term = '\\0')\n+check_from_chars(I expected, std::string s, int base = 0, char term = '\\0')\n {\n+  const char* begin = s.data();\n+  const char* end = s.data() + s.length();\n   I val;\n   std::from_chars_result r = base == 0\n-    ? std::from_chars(s.begin(), s.end(), val)\n-    : std::from_chars(s.begin(), s.end(), val, base);\n-  return r.ec == std::errc{} && (r.ptr == s.end() || *r.ptr == term) && val == expected;\n+    ? std::from_chars(begin, end, val)\n+    : std::from_chars(begin, end, val, base);\n+  return r.ec == std::errc{} && (r.ptr == end || *r.ptr == term) && val == expected;\n }\n \n #include <climits>"}, {"sha": "902092fd42312c719fb71055d5778d383bf5eb82", "filename": "libstdc++-v3/testsuite/20_util/from_chars/2.cc", "status": "modified", "additions": 65, "deletions": 65, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c104e8f1b67a75ea82c62f1fd2aac69c09127562/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c104e8f1b67a75ea82c62f1fd2aac69c09127562/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F2.cc?ref=c104e8f1b67a75ea82c62f1fd2aac69c09127562", "patch": "@@ -15,11 +15,11 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17\" }\n-// { dg-do run { target c++17 } }\n+// <charconv> is supported in C++14 as a GNU extension\n+// { dg-do run { target c++14 } }\n \n #include <charconv>\n-#include <string_view>\n+#include <string>\n #include <testsuite_hooks.h>\n \n // Test std::from_chars error handling.\n@@ -29,45 +29,45 @@ test01()\n {\n   std::from_chars_result r;\n   int i = 999;\n-  std::string_view s;\n+  std::string s;\n \n   s = \"\";\n-  r = std::from_chars(s.begin(), s.end(), i);\n+  r = std::from_chars(s.data(), s.data() + s.length(), i);\n   VERIFY( r.ec == std::errc::invalid_argument );\n-  VERIFY( r.ptr == s.begin() );\n+  VERIFY( r.ptr == s.data() );\n   VERIFY( i == 999 );\n \n   s = \"*\";\n-  r = std::from_chars(s.begin(), s.end(), i);\n+  r = std::from_chars(s.data(), s.data() + s.length(), i);\n   VERIFY( r.ec == std::errc::invalid_argument );\n-  VERIFY( r.ptr == s.begin() );\n+  VERIFY( r.ptr == s.data() );\n   VERIFY( i == 999 );\n \n   s = \"-\";\n-  r = std::from_chars(s.begin(), s.end(), i);\n+  r = std::from_chars(s.data(), s.data() + s.length(), i);\n   VERIFY( r.ec == std::errc::invalid_argument );\n-  VERIFY( r.ptr == s.begin() );\n+  VERIFY( r.ptr == s.data() );\n   VERIFY( i == 999 );\n \n   s = \"-*\";\n-  r = std::from_chars(s.begin(), s.end(), i);\n+  r = std::from_chars(s.data(), s.data() + s.length(), i);\n   VERIFY( r.ec == std::errc::invalid_argument );\n-  VERIFY( r.ptr == s.begin() );\n+  VERIFY( r.ptr == s.data() );\n   VERIFY( i == 999 );\n \n   unsigned u = 888;\n   s = \"-1\";\n-  r = std::from_chars(s.begin(), s.end(), u);\n+  r = std::from_chars(s.data(), s.data() + s.length(), u);\n   VERIFY( r.ec == std::errc::invalid_argument );\n-  VERIFY( r.ptr == s.begin() );\n+  VERIFY( r.ptr == s.data() );\n   s = \"-a\";\n-  r = std::from_chars(s.begin(), s.end(), u);\n+  r = std::from_chars(s.data(), s.data() + s.length(), u);\n   VERIFY( r.ec == std::errc::invalid_argument );\n-  VERIFY( r.ptr == s.begin() );\n+  VERIFY( r.ptr == s.data() );\n   s = \"-\";\n-  r = std::from_chars(s.begin(), s.end(), u);\n+  r = std::from_chars(s.data(), s.data() + s.length(), u);\n   VERIFY( r.ec == std::errc::invalid_argument );\n-  VERIFY( r.ptr == s.begin() );\n+  VERIFY( r.ptr == s.data() );\n   VERIFY( u == 888 );\n \n   for (int base = 2; base <= 36; ++base)\n@@ -93,107 +93,107 @@ void\n test02()\n {\n   std::from_chars_result r;\n-  std::string_view s;\n+  std::string s;\n \n   signed char c = -5;\n   s = \"-10000001\";\n-  r = std::from_chars(s.begin(), s.end(), c, 2);\n+  r = std::from_chars(s.data(), s.data() + s.length(), c, 2);\n   VERIFY( r.ec == std::errc::result_out_of_range );\n-  VERIFY( r.ptr == s.end() );\n+  VERIFY( r.ptr == s.data() + s.length() );\n   s = \"-10000001*\";\n-  r = std::from_chars(s.begin(), s.end(), c, 2);\n+  r = std::from_chars(s.data(), s.data() + s.length(), c, 2);\n   VERIFY( r.ec == std::errc::result_out_of_range );\n-  VERIFY( r.ptr == s.begin() + 9 );\n+  VERIFY( r.ptr == s.data() + 9 );\n   s = \"-10000001000*\";\n-  r = std::from_chars(s.begin(), s.end(), c, 2);\n+  r = std::from_chars(s.data(), s.data() + s.length(), c, 2);\n   VERIFY( r.ec == std::errc::result_out_of_range );\n-  VERIFY( r.ptr == s.begin() + 12 );\n+  VERIFY( r.ptr == s.data() + 12 );\n   s = \"-129\";\n-  r = std::from_chars(s.begin(), s.end(), c, 10);\n+  r = std::from_chars(s.data(), s.data() + s.length(), c, 10);\n   VERIFY( r.ec == std::errc::result_out_of_range );\n-  VERIFY( r.ptr == s.end() );\n+  VERIFY( r.ptr == s.data() + s.length() );\n   s = \"-129*\";\n-  r = std::from_chars(s.begin(), s.end(), c, 10);\n+  r = std::from_chars(s.data(), s.data() + s.length(), c, 10);\n   VERIFY( r.ec == std::errc::result_out_of_range );\n-  VERIFY( r.ptr == s.begin() + 4 );\n+  VERIFY( r.ptr == s.data() + 4 );\n   s = \"-100\";\n-  r = std::from_chars(s.begin(), s.end(), c, 16);\n+  r = std::from_chars(s.data(), s.data() + s.length(), c, 16);\n   VERIFY( r.ec == std::errc::result_out_of_range );\n-  VERIFY( r.ptr == s.end() );\n+  VERIFY( r.ptr == s.data() + s.length() );\n   s = \"-100*\";\n-  r = std::from_chars(s.begin(), s.end(), c, 16);\n+  r = std::from_chars(s.data(), s.data() + s.length(), c, 16);\n   VERIFY( r.ec == std::errc::result_out_of_range );\n-  VERIFY( r.ptr == s.begin() + 4 );\n+  VERIFY( r.ptr == s.data() + 4 );\n   s = \"-81\";\n-  r = std::from_chars(s.begin(), s.end(), c, 16);\n+  r = std::from_chars(s.data(), s.data() + s.length(), c, 16);\n   VERIFY( r.ec == std::errc::result_out_of_range );\n-  VERIFY( r.ptr == s.end() );\n+  VERIFY( r.ptr == s.data() + s.length() );\n   s = \"-81*\";\n-  r = std::from_chars(s.begin(), s.end(), c, 16);\n+  r = std::from_chars(s.data(), s.data() + s.length(), c, 16);\n   VERIFY( r.ec == std::errc::result_out_of_range );\n-  VERIFY( r.ptr == s.begin() + 3 );\n+  VERIFY( r.ptr == s.data() + 3 );\n   s = \"128\";\n-  r = std::from_chars(s.begin(), s.end(), c, 10);\n+  r = std::from_chars(s.data(), s.data() + s.length(), c, 10);\n   VERIFY( r.ec == std::errc::result_out_of_range );\n-  VERIFY( r.ptr == s.end() );\n+  VERIFY( r.ptr == s.data() + s.length() );\n   s = \"128*\";\n-  r = std::from_chars(s.begin(), s.end(), c, 10);\n+  r = std::from_chars(s.data(), s.data() + s.length(), c, 10);\n   VERIFY( r.ec == std::errc::result_out_of_range );\n-  VERIFY( r.ptr == s.begin() + 3 );\n+  VERIFY( r.ptr == s.data() + 3 );\n   s = \"80\";\n-  r = std::from_chars(s.begin(), s.end(), c, 16);\n+  r = std::from_chars(s.data(), s.data() + s.length(), c, 16);\n   VERIFY( r.ec == std::errc::result_out_of_range );\n-  VERIFY( r.ptr == s.end() );\n+  VERIFY( r.ptr == s.data() + s.length() );\n   s = \"80*\";\n-  r = std::from_chars(s.begin(), s.end(), c, 16);\n+  r = std::from_chars(s.data(), s.data() + s.length(), c, 16);\n   VERIFY( r.ec == std::errc::result_out_of_range );\n-  VERIFY( r.ptr == s.begin() + 2 );\n+  VERIFY( r.ptr == s.data() + 2 );\n   VERIFY( c == -5 );\n \n   unsigned char uc = 9;\n   s = \"100000000\";\n-  r = std::from_chars(s.begin(), s.end(), uc, 2);\n+  r = std::from_chars(s.data(), s.data() + s.length(), uc, 2);\n   VERIFY( r.ec == std::errc::result_out_of_range );\n-  VERIFY( r.ptr == s.end() );\n+  VERIFY( r.ptr == s.data() + s.length() );\n   s = \"100000000*\";\n-  r = std::from_chars(s.begin(), s.end(), uc, 2);\n+  r = std::from_chars(s.data(), s.data() + s.length(), uc, 2);\n   VERIFY( r.ec == std::errc::result_out_of_range );\n-  VERIFY( r.ptr == s.begin() + 9 );\n+  VERIFY( r.ptr == s.data() + 9 );\n   s = \"100000000000*\";\n-  r = std::from_chars(s.begin(), s.end(), uc, 2);\n+  r = std::from_chars(s.data(), s.data() + s.length(), uc, 2);\n   VERIFY( r.ec == std::errc::result_out_of_range );\n-  VERIFY( r.ptr == s.begin() + 12 );\n+  VERIFY( r.ptr == s.data() + 12 );\n   s = \"256\";\n-  r = std::from_chars(s.begin(), s.end(), uc, 10);\n+  r = std::from_chars(s.data(), s.data() + s.length(), uc, 10);\n   VERIFY( r.ec == std::errc::result_out_of_range );\n-  VERIFY( r.ptr == s.end() );\n+  VERIFY( r.ptr == s.data() + s.length() );\n   s = \"256**\";\n-  r = std::from_chars(s.begin(), s.end(), uc, 10);\n+  r = std::from_chars(s.data(), s.data() + s.length(), uc, 10);\n   VERIFY( r.ec == std::errc::result_out_of_range );\n-  VERIFY( r.ptr == s.begin() + 3 );\n+  VERIFY( r.ptr == s.data() + 3 );\n   s = \"256000**\";\n-  r = std::from_chars(s.begin(), s.end(), uc, 10);\n+  r = std::from_chars(s.data(), s.data() + s.length(), uc, 10);\n   VERIFY( r.ec == std::errc::result_out_of_range );\n-  VERIFY( r.ptr == s.begin() + 6 );\n+  VERIFY( r.ptr == s.data() + 6 );\n   s = \"100\";\n-  r = std::from_chars(s.begin(), s.end(), uc, 16);\n+  r = std::from_chars(s.data(), s.data() + s.length(), uc, 16);\n   VERIFY( r.ec == std::errc::result_out_of_range );\n-  VERIFY( r.ptr == s.end() );\n+  VERIFY( r.ptr == s.data() + s.length() );\n   s = \"100**\";\n-  r = std::from_chars(s.begin(), s.end(), uc, 16);\n+  r = std::from_chars(s.data(), s.data() + s.length(), uc, 16);\n   VERIFY( r.ec == std::errc::result_out_of_range );\n-  VERIFY( r.ptr == s.begin() + 3 );\n+  VERIFY( r.ptr == s.data() + 3 );\n   s = \"100000**\";\n-  r = std::from_chars(s.begin(), s.end(), uc, 16);\n+  r = std::from_chars(s.data(), s.data() + s.length(), uc, 16);\n   VERIFY( r.ec == std::errc::result_out_of_range );\n-  VERIFY( r.ptr == s.begin() + 6 );\n+  VERIFY( r.ptr == s.data() + 6 );\n   VERIFY( uc == 9 );\n \n   unsigned long long ull = 123;\n   s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz****\";\n-  r = std::from_chars(s.begin(), s.end(), ull, 36);\n+  r = std::from_chars(s.data(), s.data() + s.length(), ull, 36);\n   VERIFY( r.ec == std::errc::result_out_of_range );\n-  VERIFY( r.ptr == s.begin() + 42 );\n+  VERIFY( r.ptr == s.data() + 42 );\n   VERIFY( ull == 123 );\n }\n "}, {"sha": "9c45921901077e1bd01585c3e577b6f77069359d", "filename": "libstdc++-v3/testsuite/20_util/to_chars/1.cc", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c104e8f1b67a75ea82c62f1fd2aac69c09127562/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c104e8f1b67a75ea82c62f1fd2aac69c09127562/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2F1.cc?ref=c104e8f1b67a75ea82c62f1fd2aac69c09127562", "patch": "@@ -15,23 +15,29 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17\" }\n-// { dg-do run { target c++17 } }\n+// { dg-do run { target c++14 } }\n // { dg-require-string-conversions \"\" }\n \n #include <charconv>\n-#include <string_view>\n+#if __cplusplus >= 201703L\n+# include <string_view>\n+using std::string_view;\n+#else\n+// <charconv> is supported in C++14 as a GNU extension\n+# include <string>\n+using string_view = std::string;\n+#endif\n \n template<typename I>\n bool\n-check_to_chars(I val, std::string_view expected, int base = 0)\n+check_to_chars(I val, string_view expected, int base = 0)\n {\n   // Space for minus sign, 64 binary digits, final '*', and null terminator:\n   char buf[67] = \"******************************************************************\";\n   std::to_chars_result r = base == 0\n     ? std::to_chars(buf, buf+sizeof(buf), val)\n     : std::to_chars(buf, buf+sizeof(buf), val, base);\n-  return r.ec == std::errc{} && *r.ptr == '*' && std::string_view(buf, r.ptr - buf) == expected;\n+  return r.ec == std::errc{} && *r.ptr == '*' && string_view(buf, r.ptr - buf) == expected;\n }\n \n #include <string>\n@@ -78,7 +84,7 @@ test01()\n   VERIFY( check_to_chars<signed long long>(123, \"123\") );\n   VERIFY( check_to_chars<unsigned long long>(123, \"123\") );\n \n-  if constexpr (std::is_signed_v<char>)\n+  if (std::is_signed<char>::value)\n     VERIFY( check_to_chars<char>(-79, \"-79\") );\n   VERIFY( check_to_chars<signed char>(-79, \"-79\") );\n   VERIFY( check_to_chars<signed short>(-79, \"-79\") );\n@@ -160,7 +166,7 @@ test02()\n   VERIFY( check_to_chars<signed long long>(123, \"123\", 10) );\n   VERIFY( check_to_chars<unsigned long long>(123, \"123\", 10) );\n \n-  if constexpr (std::is_signed_v<char>)\n+  if (std::is_signed<char>::value)\n     VERIFY( check_to_chars<char>(-79, \"-79\", 10) );\n   VERIFY( check_to_chars<signed char>(-79, \"-79\", 10) );\n   VERIFY( check_to_chars<signed short>(-79, \"-79\", 10) );\n@@ -385,7 +391,7 @@ test03()\n     VERIFY( check_to_chars<signed long long>(1, \"1\", base) );\n     VERIFY( check_to_chars<unsigned long long>(1, \"1\", base) );\n \n-    if constexpr (std::is_signed_v<char>)\n+    if (std::is_signed<char>::value)\n       VERIFY( check_to_chars<char>(-1, \"-1\", base) );\n     VERIFY( check_to_chars<signed char>(-1, \"-1\", base) );\n     VERIFY( check_to_chars<signed short>(-1, \"-1\", base) );\n@@ -407,7 +413,7 @@ test03()\n       VERIFY( check_to_chars<signed long long>(2, \"2\", base) );\n       VERIFY( check_to_chars<unsigned long long>(2, \"2\", base) );\n \n-      if constexpr (std::is_signed_v<char>)\n+      if (std::is_signed<char>::value)\n \tVERIFY( check_to_chars<char>(-2, \"-2\", base) );\n       VERIFY( check_to_chars<signed char>(-2, \"-2\", base) );\n       VERIFY( check_to_chars<signed short>(-2, \"-2\", base) );\n@@ -466,7 +472,7 @@ test04()\n   VERIFY( check_to_chars<signed long long>(123, to_string(123), 8) );\n   VERIFY( check_to_chars<unsigned long long>(123, to_string(123), 8) );\n \n-  if constexpr (std::is_signed_v<char>)\n+  if (std::is_signed<char>::value)\n     VERIFY( check_to_chars<char>(-79, to_string(-79), 8) );\n   VERIFY( check_to_chars<signed char>(-79, to_string(-79), 8) );\n   VERIFY( check_to_chars<signed short>(-79, to_string(-79), 8) );\n@@ -534,7 +540,7 @@ test05()\n   VERIFY( check_to_chars<signed long long>(123, to_string(123), 16) );\n   VERIFY( check_to_chars<unsigned long long>(123, to_string(123), 16) );\n \n-  if constexpr (std::is_signed_v<char>)\n+  if (std::is_signed<char>::value)\n     VERIFY( check_to_chars<char>(-79, to_string(-79), 16) );\n   VERIFY( check_to_chars<signed char>(-79, to_string(-79), 16) );\n   VERIFY( check_to_chars<signed short>(-79, to_string(-79), 16) );\n@@ -610,7 +616,7 @@ test06()\n   VERIFY( check_to_chars<signed long long>(123, to_string(123), 2) );\n   VERIFY( check_to_chars<unsigned long long>(123, to_string(123), 2) );\n \n-  if constexpr (std::is_signed_v<char>)\n+  if (std::is_signed<char>::value)\n     VERIFY( check_to_chars<char>(-79, to_string(-79), 2) );\n   VERIFY( check_to_chars<signed char>(-79, to_string(-79), 2) );\n   VERIFY( check_to_chars<signed short>(-79, to_string(-79), 2) );"}, {"sha": "8b9119f701f592afeffaac6f7d0c219d05c6cb41", "filename": "libstdc++-v3/testsuite/20_util/to_chars/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c104e8f1b67a75ea82c62f1fd2aac69c09127562/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c104e8f1b67a75ea82c62f1fd2aac69c09127562/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2F2.cc?ref=c104e8f1b67a75ea82c62f1fd2aac69c09127562", "patch": "@@ -15,8 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17\" }\n-// { dg-do run { target c++17 } }\n+// <charconv> is supported in C++14 as a GNU extension\n+// { dg-do run { target c++14 } }\n \n #include <charconv>\n #include <testsuite_hooks.h>"}]}