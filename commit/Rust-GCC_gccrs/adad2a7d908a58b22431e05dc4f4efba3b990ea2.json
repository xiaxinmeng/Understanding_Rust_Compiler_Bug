{"sha": "adad2a7d908a58b22431e05dc4f4efba3b990ea2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRhZDJhN2Q5MDhhNThiMjI0MzFlMDVkYzRmNGVmYmEzYjk5MGVhMg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2015-05-29T21:29:07Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2015-05-29T21:29:07Z"}, "message": "2015-05-29  Fran\u00e7ois Dumont  fdumont@gcc.gnu.org>\n\n\t* include/debug/debug.h (_GLIBCXX_DEBUG_ASSERT,\n\t_GLIBCXX_DEBUG_PEDASSERT, _GLIBCXX_DEBUG_ONLY): Move definition...\n\t* include/debug/assertions.h: ...here, new.\n\t* include/debug/formatter.h\n\t(_Error_formatter::_Is_iterator_value_type): New.\n\t(_Error_formatter::_Is_instance): New.\n\t(_Error_formatter::_Parameter): Make public and not friend anymore.\n\t(_Error_formatter::_Parameter::__instance): New _M_kind enum entry.\n\t(_Error_formatter::_Parameter::__iterator_value_type): New _M_kind enum\n\tentry.\n\t(_Error_formatter::_Parameter::_Type): New.\n\t(_Error_formatter::_Parameter::_Instance): New, inherit from\n\tlatter.\n\t(union _Error_formatter::_Parameter::_M_variant): Reorganize.\n\t(_Parameter(_Iterator const&, const char*, _Is_iterator)): Make all\n\toverloads take iterator through a const reference.\n\t(_Parameter(const _Iterator&, const char*, _Is_iterator_value_type)):\n\tNew.\n\t(_Parameter(const _Type&, const char*, _Is_instance)): New.\n\t(_Error_formatter::_M_print_type): Delete.\n\t(_Error_formatter::_M_iterator_value_type): New.\n\t(_Error_formatter::_M_instance): New.\n\t* include/Makefile.am: Add new above debug file.\n\t* include/Makefile.in: Regenerate.\n\t* include/debug/functions.h\n\t(__check_dereferenceable(const _Safe_iterator<>&),\n\t__valid_range(const _Safe_iterator<>&),\n\t__is_safe_random_iterator<_Safe_iterator<>>): Move...\n\t* include/debug/safe_iterator.h: ... here.\n\tReplace debug.h include with assertions.h.\n\t(__check_singular_aux): Move...\n\t* include/debug/safe_base.h: ... here.\n\t* include/debug/functions.h\n\t(__check_dereferenceable(const _Safe_local_iterator<>&),\n\t__valid_range(const _Safe_local_iterator<>&): Move...\n\t* include/debug/safe_local_iterator.h: ...here.\n\t* include/debug/safe_sequence.h: Replace debug.h with assertions.h.\n\tRemove _Safe_iterator declaration.\n\t* include/debug/safe_unordered_container.h: Replace debug.h with\n\tassertions.h.\n\t* include/debug/array: Replace safe_sequence.h include with\n\tformatter.h and macros.h.\n\t* include/debug/deque: Include functions.tcc.\n\t* include/debug/forward_list: Likewise.\n\t* include/debug/list: Likewise.\n\t* include/debug/string: Likewise.\n\t* include/debug/vector: Likewise.\n\t* include/bits/unique_ptr.h: Replace debug.h include with new\n\tassertions.h.\n\t* include/bits/stl_iterator_base_funcs.h: Likewise.\n\t* testsuite/23_containers/array/tuple_interface/get_debug_neg.cc:\n\tAdjust dg-error line number.\n\t* testsuite/23_containers/array/tuple_interface/\n\ttuple_element_debug_neg.cc: Likewise.\n\t* src/c++11/debug.cc: Adapt.\n\nFrom-SVN: r223877", "tree": {"sha": "4ecd5b0b0c4b5cb8aeeff48b582990fbbcb62202", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ecd5b0b0c4b5cb8aeeff48b582990fbbcb62202"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adad2a7d908a58b22431e05dc4f4efba3b990ea2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adad2a7d908a58b22431e05dc4f4efba3b990ea2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adad2a7d908a58b22431e05dc4f4efba3b990ea2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adad2a7d908a58b22431e05dc4f4efba3b990ea2/comments", "author": null, "committer": null, "parents": [{"sha": "8fd0be756e29db9d02e4d7e3d951a10d3f17ecd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fd0be756e29db9d02e4d7e3d951a10d3f17ecd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fd0be756e29db9d02e4d7e3d951a10d3f17ecd6"}], "stats": {"total": 615, "additions": 412, "deletions": 203}, "files": [{"sha": "c7b3b2d5ff42623743749541657055633bc6b5a6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=adad2a7d908a58b22431e05dc4f4efba3b990ea2", "patch": "@@ -1,3 +1,61 @@\n+2015-05-29  Fran\u00e7ois Dumont  fdumont@gcc.gnu.org>\n+\n+\t* include/debug/debug.h (_GLIBCXX_DEBUG_ASSERT,\n+\t_GLIBCXX_DEBUG_PEDASSERT, _GLIBCXX_DEBUG_ONLY): Move definition...\n+\t* include/debug/assertions.h: ...here, new.\n+\t* include/debug/formatter.h\n+\t(_Error_formatter::_Is_iterator_value_type): New.\n+\t(_Error_formatter::_Is_instance): New.\n+\t(_Error_formatter::_Parameter): Make public and not friend anymore.\n+\t(_Error_formatter::_Parameter::__instance): New _M_kind enum entry.\n+\t(_Error_formatter::_Parameter::__iterator_value_type): New _M_kind enum\n+\tentry.\n+\t(_Error_formatter::_Parameter::_Type): New.\n+\t(_Error_formatter::_Parameter::_Instance): New, inherit from\n+\tlatter.\n+\t(union _Error_formatter::_Parameter::_M_variant): Reorganize.\n+\t(_Parameter(_Iterator const&, const char*, _Is_iterator)): Make all\n+\toverloads take iterator through a const reference.\n+\t(_Parameter(const _Iterator&, const char*, _Is_iterator_value_type)):\n+\tNew.\n+\t(_Parameter(const _Type&, const char*, _Is_instance)): New.\n+\t(_Error_formatter::_M_print_type): Delete.\n+\t(_Error_formatter::_M_iterator_value_type): New.\n+\t(_Error_formatter::_M_instance): New.\n+\t* include/Makefile.am: Add new above debug file.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/debug/functions.h\n+\t(__check_dereferenceable(const _Safe_iterator<>&),\n+\t__valid_range(const _Safe_iterator<>&),\n+\t__is_safe_random_iterator<_Safe_iterator<>>): Move...\n+\t* include/debug/safe_iterator.h: ... here.\n+\tReplace debug.h include with assertions.h.\n+\t(__check_singular_aux): Move...\n+\t* include/debug/safe_base.h: ... here.\n+\t* include/debug/functions.h\n+\t(__check_dereferenceable(const _Safe_local_iterator<>&),\n+\t__valid_range(const _Safe_local_iterator<>&): Move...\n+\t* include/debug/safe_local_iterator.h: ...here.\n+\t* include/debug/safe_sequence.h: Replace debug.h with assertions.h.\n+\tRemove _Safe_iterator declaration.\n+\t* include/debug/safe_unordered_container.h: Replace debug.h with\n+\tassertions.h.\n+\t* include/debug/array: Replace safe_sequence.h include with\n+\tformatter.h and macros.h.\n+\t* include/debug/deque: Include functions.tcc.\n+\t* include/debug/forward_list: Likewise.\n+\t* include/debug/list: Likewise.\n+\t* include/debug/string: Likewise.\n+\t* include/debug/vector: Likewise.\n+\t* include/bits/unique_ptr.h: Replace debug.h include with new\n+\tassertions.h.\n+\t* include/bits/stl_iterator_base_funcs.h: Likewise.\n+\t* testsuite/23_containers/array/tuple_interface/get_debug_neg.cc:\n+\tAdjust dg-error line number.\n+\t* testsuite/23_containers/array/tuple_interface/\n+\ttuple_element_debug_neg.cc: Likewise.\n+\t* src/c++11/debug.cc: Adapt.\n+\n 2015-05-29  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/manual/status_cxx2017.xml: Fix duplicate ID attribute."}, {"sha": "927418ed8b08225a9b7edcea40115641bf5a9e8e", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=adad2a7d908a58b22431e05dc4f4efba3b990ea2", "patch": "@@ -759,6 +759,7 @@ debug_srcdir = ${glibcxx_srcdir}/include/debug\n debug_builddir = ./debug\n debug_headers = \\\n \t${debug_srcdir}/array \\\n+\t${debug_srcdir}/assertions.h \\\n \t${debug_srcdir}/bitset \\\n \t${debug_srcdir}/debug.h \\\n \t${debug_srcdir}/deque \\"}, {"sha": "0674d8ca976d8e2c9de2f49bbcd48d3cf26425fb", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=adad2a7d908a58b22431e05dc4f4efba3b990ea2", "patch": "@@ -1040,6 +1040,7 @@ debug_srcdir = ${glibcxx_srcdir}/include/debug\n debug_builddir = ./debug\n debug_headers = \\\n \t${debug_srcdir}/array \\\n+\t${debug_srcdir}/assertions.h \\\n \t${debug_srcdir}/bitset \\\n \t${debug_srcdir}/debug.h \\\n \t${debug_srcdir}/deque \\"}, {"sha": "516f8fcc04727a2d14c8809bb0c9136632fdfbc2", "filename": "libstdc++-v3/include/bits/stl_iterator_base_funcs.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h?ref=adad2a7d908a58b22431e05dc4f4efba3b990ea2", "patch": "@@ -62,7 +62,7 @@\n #pragma GCC system_header\n \n #include <bits/concept_check.h>\n-#include <debug/debug.h>\n+#include <debug/assertions.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {"}, {"sha": "08ce01f7c7e04816f3c5b18bb45ef59847b07bfb", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=adad2a7d908a58b22431e05dc4f4efba3b990ea2", "patch": "@@ -31,7 +31,7 @@\n #define _UNIQUE_PTR_H 1\n \n #include <bits/c++config.h>\n-#include <debug/debug.h>\n+#include <debug/assertions.h>\n #include <type_traits>\n #include <utility>\n #include <tuple>"}, {"sha": "7bb74c17664160b851ca095452c402c52a7a9f45", "filename": "libstdc++-v3/include/debug/array", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray?ref=adad2a7d908a58b22431e05dc4f4efba3b990ea2", "patch": "@@ -31,7 +31,8 @@\n \n #pragma GCC system_header\n \n-#include <debug/safe_sequence.h>\n+#include <debug/formatter.h>\n+#include <debug/macros.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {"}, {"sha": "9b9a48c49b3c2c0527f3096e42c5ebd6b992f603", "filename": "libstdc++-v3/include/debug/assertions.h", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fassertions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fassertions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fassertions.h?ref=adad2a7d908a58b22431e05dc4f4efba3b990ea2", "patch": "@@ -0,0 +1,52 @@\n+// Debugging support implementation -*- C++ -*-\n+\n+// Copyright (C) 2003-2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file debug/assertions.h\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n+#ifndef _GLIBCXX_DEBUG_ASSERTIONS_H\n+#define _GLIBCXX_DEBUG_ASSERTIONS_H 1\n+\n+#ifndef _GLIBCXX_DEBUG\n+\n+# define _GLIBCXX_DEBUG_ASSERT(_Condition)\n+# define _GLIBCXX_DEBUG_PEDASSERT(_Condition)\n+# define _GLIBCXX_DEBUG_ONLY(_Statement) ;\n+\n+#else\n+\n+#define _GLIBCXX_DEBUG_ASSERT(_Condition) __glibcxx_assert(_Condition)\n+\n+#ifdef _GLIBCXX_DEBUG_PEDANTIC\n+# define _GLIBCXX_DEBUG_PEDASSERT(_Condition) _GLIBCXX_DEBUG_ASSERT(_Condition)\n+#else\n+# define _GLIBCXX_DEBUG_PEDASSERT(_Condition)\n+#endif\n+\n+# define _GLIBCXX_DEBUG_ONLY(_Statement) _Statement\n+\n+#endif\n+\n+#endif // _GLIBCXX_DEBUG_ASSERTIONS"}, {"sha": "b6623e62eccf89ee50d3b272857e759a235f048d", "filename": "libstdc++-v3/include/debug/debug.h", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h?ref=adad2a7d908a58b22431e05dc4f4efba3b990ea2", "patch": "@@ -37,6 +37,8 @@\n  *  the standard library algorithms.\n */\n \n+#include <debug/assertions.h>\n+\n // Debug mode namespaces.\n \n /**\n@@ -58,9 +60,6 @@ namespace __gnu_debug\n \n #ifndef _GLIBCXX_DEBUG\n \n-# define _GLIBCXX_DEBUG_ASSERT(_Condition)\n-# define _GLIBCXX_DEBUG_PEDASSERT(_Condition)\n-# define _GLIBCXX_DEBUG_ONLY(_Statement) ;\n # define __glibcxx_requires_cond(_Cond,_Msg)\n # define __glibcxx_requires_valid_range(_First,_Last)\n # define __glibcxx_requires_non_empty_range(_First,_Last)\n@@ -83,16 +82,6 @@ namespace __gnu_debug\n \n # include <debug/macros.h>\n \n-#define _GLIBCXX_DEBUG_ASSERT(_Condition) __glibcxx_assert(_Condition)\n-\n-#ifdef _GLIBCXX_DEBUG_PEDANTIC\n-# define _GLIBCXX_DEBUG_PEDASSERT(_Condition) _GLIBCXX_DEBUG_ASSERT(_Condition)\n-#else\n-# define _GLIBCXX_DEBUG_PEDASSERT(_Condition)\n-#endif\n-\n-# define _GLIBCXX_DEBUG_ONLY(_Statement) _Statement\n-\n # define __glibcxx_requires_cond(_Cond,_Msg) _GLIBCXX_DEBUG_VERIFY(_Cond,_Msg)\n # define __glibcxx_requires_valid_range(_First,_Last) \\\n      __glibcxx_check_valid_range(_First,_Last)"}, {"sha": "378683921f785ffe80dacf5efe359706f5467735", "filename": "libstdc++-v3/include/debug/formatter.h", "status": "modified", "additions": 80, "deletions": 33, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h?ref=adad2a7d908a58b22431e05dc4f4efba3b990ea2", "patch": "@@ -154,8 +154,11 @@ namespace __gnu_debug\n \n     // Tags denoting the type of parameter for construction\n     struct _Is_iterator { };\n+    struct _Is_iterator_value_type { };\n     struct _Is_sequence { };\n+    struct _Is_instance { };\n \n+  public:\n     // A parameter that may be referenced by an error message\n     struct _Parameter\n     {\n@@ -165,30 +168,35 @@ namespace __gnu_debug\n \t__iterator,\n \t__sequence,\n \t__integer,\n-\t__string\n+\t__string,\n+\t__instance,\n+\t__iterator_value_type\n       } _M_kind;\n \n+      struct _Type\n+      {\n+\tconst char*\t\t_M_name;\n+\tconst type_info*\t_M_type;\n+      };\n+\n+      struct _Instance : _Type\n+      {\n+\tconst void*\t\t_M_address;\n+      };\n+\n       union\n       {\n \t// When _M_kind == __iterator\n-\tstruct\n+\tstruct : _Instance\n \t{\n-\t  const char*\t\t_M_name;\n-\t  const void*\t\t_M_address;\n-\t  const type_info*\t_M_type;\n \t  _Constness\t\t_M_constness;\n \t  _Iterator_state\t_M_state;\n \t  const void*\t\t_M_sequence;\n \t  const type_info*\t_M_seq_type;\n \t} _M_iterator;\n \n \t// When _M_kind == __sequence\n-\tstruct\n-\t{\n-\t  const char*\t\t_M_name;\n-\t  const void*\t\t_M_address;\n-\t  const type_info*\t_M_type;\n-\t} _M_sequence;\n+\t_Instance _M_sequence;\n \n \t// When _M_kind == __integer\n \tstruct\n@@ -203,6 +211,12 @@ namespace __gnu_debug\n \t  const char*\t\t_M_name;\n \t  const char*\t\t_M_value;\n \t} _M_string;\n+\n+\t// When _M_kind == __instance\n+\t_Instance _M_instance;\n+\n+\t// When _M_kind == __iterator_value_type\n+\t_Type _M_iterator_value_type;\n       } _M_variant;\n \n       _Parameter() : _M_kind(__unused_param), _M_variant() { }\n@@ -222,7 +236,7 @@ namespace __gnu_debug\n       }\n \n       template<typename _Iterator, typename _Sequence>\n-\t_Parameter(const _Safe_iterator<_Iterator, _Sequence>& __it,\n+\t_Parameter(_Safe_iterator<_Iterator, _Sequence> const& __it,\n \t\t   const char* __name, _Is_iterator)\n \t: _M_kind(__iterator),  _M_variant()\n \t{\n@@ -252,7 +266,7 @@ namespace __gnu_debug\n \t}\n \n       template<typename _Iterator, typename _Sequence>\n-\t_Parameter(const _Safe_local_iterator<_Iterator, _Sequence>& __it,\n+\t_Parameter(_Safe_local_iterator<_Iterator, _Sequence> const& __it,\n \t\t   const char* __name, _Is_iterator)\n \t: _M_kind(__iterator),  _M_variant()\n \t{\n@@ -280,41 +294,41 @@ namespace __gnu_debug\n \t}\n \n       template<typename _Type>\n-\t_Parameter(const _Type*& __it, const char* __name, _Is_iterator)\n+\t_Parameter(const _Type* const& __it, const char* __name, _Is_iterator)\n \t: _M_kind(__iterator), _M_variant()\n \t{\n \t  _M_variant._M_iterator._M_name = __name;\n \t  _M_variant._M_iterator._M_address = &__it;\n \t  _M_variant._M_iterator._M_type = _GLIBCXX_TYPEID(__it);\n-\t  _M_variant._M_iterator._M_constness = __mutable_iterator;\n-\t  _M_variant._M_iterator._M_state = __it? __unknown_state : __singular;\n+\t  _M_variant._M_iterator._M_constness = __const_iterator;\n+\t  _M_variant._M_iterator._M_state = __it ? __unknown_state : __singular;\n \t  _M_variant._M_iterator._M_sequence = 0;\n \t  _M_variant._M_iterator._M_seq_type = 0;\n \t}\n \n       template<typename _Type>\n-\t_Parameter(_Type*& __it, const char* __name, _Is_iterator)\n+\t_Parameter(_Type* const& __it, const char* __name, _Is_iterator)\n \t: _M_kind(__iterator), _M_variant()\n \t{\n \t  _M_variant._M_iterator._M_name = __name;\n \t  _M_variant._M_iterator._M_address = &__it;\n \t  _M_variant._M_iterator._M_type = _GLIBCXX_TYPEID(__it);\n-\t  _M_variant._M_iterator._M_constness = __const_iterator;\n-\t  _M_variant._M_iterator._M_state = __it? __unknown_state : __singular;\n+\t  _M_variant._M_iterator._M_constness = __mutable_iterator;\n+\t  _M_variant._M_iterator._M_state = __it ? __unknown_state : __singular;\n \t  _M_variant._M_iterator._M_sequence = 0;\n \t  _M_variant._M_iterator._M_seq_type = 0;\n \t}\n \n       template<typename _Iterator>\n-\t_Parameter(const _Iterator& __it, const char* __name, _Is_iterator)\n+\t_Parameter(_Iterator const& __it, const char* __name, _Is_iterator)\n \t: _M_kind(__iterator), _M_variant()\n \t{\n \t  _M_variant._M_iterator._M_name = __name;\n \t  _M_variant._M_iterator._M_address = &__it;\n \t  _M_variant._M_iterator._M_type = _GLIBCXX_TYPEID(__it);\n \t  _M_variant._M_iterator._M_constness = __unknown_constness;\n \t  _M_variant._M_iterator._M_state =\n-\t    __gnu_debug::__check_singular(__it)? __singular : __unknown_state;\n+\t    __gnu_debug::__check_singular(__it) ? __singular : __unknown_state;\n \t  _M_variant._M_iterator._M_sequence = 0;\n \t  _M_variant._M_iterator._M_seq_type = 0;\n \t}\n@@ -339,6 +353,25 @@ namespace __gnu_debug\n \t  _M_variant._M_sequence._M_type = _GLIBCXX_TYPEID(_Sequence);\n \t}\n \n+      template<typename _Iterator>\n+\t_Parameter(const _Iterator& __it, const char* __name,\n+\t\t   _Is_iterator_value_type)\n+\t: _M_kind(__iterator_value_type), _M_variant()\n+\t{\n+\t  _M_variant._M_iterator_value_type._M_name = __name;\n+\t  _M_variant._M_iterator_value_type._M_type =\n+\t    _GLIBCXX_TYPEID(typename std::iterator_traits<_Iterator>::value_type);\n+\t}\n+\n+      template<typename _Type>\n+\t_Parameter(const _Type& __inst, const char* __name, _Is_instance)\n+\t: _M_kind(__instance), _M_variant()\n+\t{\n+\t  _M_variant._M_instance._M_name = __name;\n+\t  _M_variant._M_instance._M_address = &__inst;\n+\t  _M_variant._M_instance._M_type = _GLIBCXX_TYPEID(_Type);\n+\t}\n+\n       void\n       _M_print_field(const _Error_formatter* __formatter,\n \t\t     const char* __name) const;\n@@ -347,9 +380,6 @@ namespace __gnu_debug\n       _M_print_description(const _Error_formatter* __formatter) const;\n     };\n \n-    friend struct _Parameter;\n-\n-  public:\n     template<typename _Iterator>\n       const _Error_formatter&\n       _M_iterator(const _Iterator& __it, const char* __name = 0)  const\n@@ -360,6 +390,17 @@ namespace __gnu_debug\n \treturn *this;\n       }\n \n+    template<typename _Iterator>\n+      const _Error_formatter&\n+      _M_iterator_value_type(const _Iterator& __it,\n+\t\t\t     const char* __name = 0)  const\n+      {\n+\tif (_M_num_parameters < std::size_t(__max_parameters))\n+\t  _M_parameters[_M_num_parameters++] =\n+\t    _Parameter(__it, __name, _Is_iterator_value_type());\n+\treturn *this;\n+      }\n+\n     const _Error_formatter&\n     _M_integer(long __value, const char* __name = 0) const\n     {\n@@ -386,6 +427,16 @@ namespace __gnu_debug\n \treturn *this;\n       }\n \n+    template<typename _Type>\n+      const _Error_formatter&\n+      _M_instance(const _Type& __inst, const char* __name = 0) const\n+      {\n+\tif (_M_num_parameters < std::size_t(__max_parameters))\n+\t  _M_parameters[_M_num_parameters++] = _Parameter(__inst, __name,\n+\t\t\t\t\t\t\t  _Is_instance());\n+\treturn *this;\n+      }\n+\n     const _Error_formatter&\n     _M_message(const char* __text) const\n     { _M_text = __text; return *this; }\n@@ -396,12 +447,6 @@ namespace __gnu_debug\n     _GLIBCXX_NORETURN void\n     _M_error() const;\n \n-  private:\n-    _Error_formatter(const char* __file, std::size_t __line)\n-    : _M_file(__file), _M_line(__line), _M_num_parameters(0), _M_text(0),\n-      _M_max_length(78), _M_column(1), _M_first_line(true), _M_wordwrap(false)\n-    { _M_get_max_length(); }\n-\n     template<typename _Tp>\n       void\n       _M_format_word(char*, int, const char*, _Tp) const throw ();\n@@ -412,9 +457,11 @@ namespace __gnu_debug\n     void\n     _M_print_string(const char* __string) const;\n \n-    void\n-    _M_print_type(const type_info* __info,\n-\t\t  const char* __unknown_name) const;\n+  private:\n+    _Error_formatter(const char* __file, std::size_t __line)\n+    : _M_file(__file), _M_line(__line), _M_num_parameters(0), _M_text(0),\n+      _M_max_length(78), _M_column(1), _M_first_line(true), _M_wordwrap(false)\n+    { _M_get_max_length(); }\n \n     void\n     _M_get_max_length() const throw ();"}, {"sha": "4a245dd9ed2da6b45ae9620d90aec44def657cbf", "filename": "libstdc++-v3/include/debug/functions.h", "status": "modified", "additions": 9, "deletions": 43, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h?ref=adad2a7d908a58b22431e05dc4f4efba3b990ea2", "patch": "@@ -30,24 +30,24 @@\n #define _GLIBCXX_DEBUG_FUNCTIONS_H 1\n \n #include <bits/c++config.h>\n-#include <bits/stl_iterator_base_types.h> // for iterator_traits, categories and\n-\t\t\t\t\t  // _Iter_base\n-#include <bits/cpp_type_traits.h>\t  // for __is_integer\n-#include <bits/move.h>                    // for __addressof and addressof\n-#include <bits/stl_function.h>\t\t  // for less\n+#include <bits/stl_iterator_base_types.h>\t// for iterator_traits,\n+\t\t\t\t\t\t// categories and _Iter_base\n+#include <bits/cpp_type_traits.h>\t\t// for __is_integer\n+\n+#include <bits/move.h>\t\t\t\t// for __addressof\n+#include <bits/stl_function.h>\t\t\t// for less\n #if __cplusplus >= 201103L\n-# include <type_traits>\t\t\t  // for is_lvalue_reference and __and_\n+# include <type_traits>\t\t\t\t// for is_lvalue_reference and\n+\t\t\t\t\t\t// conditional.\n #endif\n+\n #include <debug/formatter.h>\n \n namespace __gnu_debug\n {\n   template<typename _Iterator, typename _Sequence>\n     class _Safe_iterator;\n \n-  template<typename _Iterator, typename _Sequence>\n-    class _Safe_local_iterator;\n-\n   template<typename _Sequence>\n     struct _Insert_range_from_self_is_safe\n     { enum { __value = 0 }; };\n@@ -85,19 +85,6 @@ namespace __gnu_debug\n     __check_dereferenceable(const _Tp* __ptr)\n     { return __ptr; }\n \n-  /** Safe iterators know if they are dereferenceable. */\n-  template<typename _Iterator, typename _Sequence>\n-    inline bool\n-    __check_dereferenceable(const _Safe_iterator<_Iterator, _Sequence>& __x)\n-    { return __x._M_dereferenceable(); }\n-\n-  /** Safe local iterators know if they are dereferenceable. */\n-  template<typename _Iterator, typename _Sequence>\n-    inline bool\n-    __check_dereferenceable(const _Safe_local_iterator<_Iterator,\n-\t\t\t\t\t\t       _Sequence>& __x)\n-    { return __x._M_dereferenceable(); }\n-\n   /** If the distance between two random access iterators is\n    *  nonnegative, assume the range is valid.\n   */\n@@ -150,20 +137,6 @@ namespace __gnu_debug\n       return __valid_range_aux(__first, __last, _Integral());\n     }\n \n-  /** Safe iterators know how to check if they form a valid range. */\n-  template<typename _Iterator, typename _Sequence>\n-    inline bool\n-    __valid_range(const _Safe_iterator<_Iterator, _Sequence>& __first,\n-\t\t  const _Safe_iterator<_Iterator, _Sequence>& __last)\n-    { return __first._M_valid_range(__last); }\n-\n-  /** Safe local iterators know how to check if they form a valid range. */\n-  template<typename _Iterator, typename _Sequence>\n-    inline bool\n-    __valid_range(const _Safe_local_iterator<_Iterator, _Sequence>& __first,\n-\t\t  const _Safe_local_iterator<_Iterator, _Sequence>& __last)\n-    { return __first._M_valid_range(__last); }\n-\n   /* Checks that [first, last) is a valid range, and then returns\n    * __first. This routine is useful when we can't use a separate\n    * assertion statement because, e.g., we are in a constructor.\n@@ -535,13 +508,6 @@ namespace __gnu_debug\n       typedef std::__false_type __type;\n     };\n \n-  template<typename _Iterator, typename _Sequence>\n-    struct __is_safe_random_iterator<_Safe_iterator<_Iterator, _Sequence> >\n-    : std::__are_same<std::random_access_iterator_tag,\n-                      typename std::iterator_traits<_Iterator>::\n-\t\t      iterator_category>\n-    { };\n-\n   template<typename _Iterator>\n     struct _Siter_base\n     : std::_Iter_base<_Iterator, __is_safe_random_iterator<_Iterator>::__value>"}, {"sha": "b44ded013a8482eb5a26fa015b093ee8668c8979", "filename": "libstdc++-v3/include/debug/safe_base.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h?ref=adad2a7d908a58b22431e05dc4f4efba3b990ea2", "patch": "@@ -159,6 +159,13 @@ namespace __gnu_debug\n     }\n   };\n \n+  /** Iterators that derive from _Safe_iterator_base can be determined singular\n+   *  or non-singular.\n+   **/\n+  inline bool\n+  __check_singular_aux(const _Safe_iterator_base* __x)\n+  { return __x->_M_singular(); }\n+\n   /**\n    * @brief Base class that supports tracking of iterators that\n    * reference a sequence."}, {"sha": "9f2dcd1e2383fbfe5d7ce854e7597bc82f93872f", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=adad2a7d908a58b22431e05dc4f4efba3b990ea2", "patch": "@@ -29,7 +29,7 @@\n #ifndef _GLIBCXX_DEBUG_SAFE_ITERATOR_H\n #define _GLIBCXX_DEBUG_SAFE_ITERATOR_H 1\n \n-#include <debug/debug.h>\n+#include <debug/assertions.h>\n #include <debug/macros.h>\n #include <debug/functions.h>\n #include <debug/safe_base.h>\n@@ -55,13 +55,6 @@ namespace __gnu_debug\n \t{ return __it.base() == __it._M_get_sequence()->_M_base().begin(); }\n     };\n \n-  /** Iterators that derive from _Safe_iterator_base can be determined singular\n-   *  or non-singular.\n-   **/\n-  inline bool\n-  __check_singular_aux(const _Safe_iterator_base* __x)\n-  { return __x->_M_singular(); }\n-\n   /** The precision to which we can calculate the distance between\n    *  two iterators.\n    */\n@@ -93,11 +86,7 @@ namespace __gnu_debug\n     inline std::pair<typename std::iterator_traits<_Iterator>::difference_type,\n \t\t     _Distance_precision>\n     __get_distance(const _Iterator& __lhs, const _Iterator& __rhs)\n-    {\n-      typedef typename std::iterator_traits<_Iterator>::iterator_category\n-\t  _Category;\n-      return __get_distance(__lhs, __rhs, _Category());\n-    }\n+    { return __get_distance(__lhs, __rhs, std::__iterator_category(__lhs)); }\n \n   /** \\brief Safe iterator wrapper.\n    *\n@@ -768,6 +757,27 @@ namespace __gnu_debug\n     operator+(typename _Safe_iterator<_Iterator,_Sequence>::difference_type __n,\n \t      const _Safe_iterator<_Iterator, _Sequence>& __i) _GLIBCXX_NOEXCEPT\n     { return __i + __n; }\n+\n+  /** Safe iterators know if they are dereferenceable. */\n+  template<typename _Iterator, typename _Sequence>\n+    inline bool\n+    __check_dereferenceable(const _Safe_iterator<_Iterator, _Sequence>& __x)\n+    { return __x._M_dereferenceable(); }\n+\n+  /** Safe iterators know how to check if they form a valid range. */\n+  template<typename _Iterator, typename _Sequence>\n+    inline bool\n+    __valid_range(const _Safe_iterator<_Iterator, _Sequence>& __first,\n+\t\t  const _Safe_iterator<_Iterator, _Sequence>& __last)\n+    { return __first._M_valid_range(__last); }\n+\n+  template<typename _Iterator, typename _Sequence>\n+    struct __is_safe_random_iterator<_Safe_iterator<_Iterator, _Sequence> >\n+    : std::__are_same<std::random_access_iterator_tag,\n+                      typename std::iterator_traits<_Iterator>::\n+\t\t      iterator_category>\n+    { };\n+\n } // namespace __gnu_debug\n \n #include <debug/safe_iterator.tcc>"}, {"sha": "dcbe4400cacea372d25b741a1908be53968b8623", "filename": "libstdc++-v3/include/debug/safe_local_iterator.h", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h?ref=adad2a7d908a58b22431e05dc4f4efba3b990ea2", "patch": "@@ -29,11 +29,7 @@\n #ifndef _GLIBCXX_DEBUG_SAFE_LOCAL_ITERATOR_H\n #define _GLIBCXX_DEBUG_SAFE_LOCAL_ITERATOR_H 1\n \n-#include <debug/debug.h>\n-#include <debug/macros.h>\n-#include <debug/functions.h>\n #include <debug/safe_unordered_base.h>\n-#include <ext/type_traits.h>\n \n namespace __gnu_debug\n {\n@@ -432,6 +428,20 @@ namespace __gnu_debug\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n       return __lhs.base() != __rhs.base();\n     }\n+\n+  /** Safe local iterators know if they are dereferenceable. */\n+  template<typename _Iterator, typename _Sequence>\n+    inline bool\n+    __check_dereferenceable(const _Safe_local_iterator<_Iterator,\n+\t\t\t\t\t\t       _Sequence>& __x)\n+    { return __x._M_dereferenceable(); }\n+\n+  /** Safe local iterators know how to check if they form a valid range. */\n+  template<typename _Iterator, typename _Sequence>\n+    inline bool\n+    __valid_range(const _Safe_local_iterator<_Iterator, _Sequence>& __first,\n+\t\t  const _Safe_local_iterator<_Iterator, _Sequence>& __last)\n+    { return __first._M_valid_range(__last); }\n } // namespace __gnu_debug\n \n #include <debug/safe_local_iterator.tcc>"}, {"sha": "4e9397bd527ce170276066a7c0927a5af4308532", "filename": "libstdc++-v3/include/debug/safe_sequence.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_sequence.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_sequence.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_sequence.h?ref=adad2a7d908a58b22431e05dc4f4efba3b990ea2", "patch": "@@ -29,16 +29,13 @@\n #ifndef _GLIBCXX_DEBUG_SAFE_SEQUENCE_H\n #define _GLIBCXX_DEBUG_SAFE_SEQUENCE_H 1\n \n-#include <debug/debug.h>\n+#include <debug/assertions.h>\n #include <debug/macros.h>\n #include <debug/functions.h>\n #include <debug/safe_base.h>\n \n namespace __gnu_debug\n {\n-  template<typename _Iterator, typename _Sequence>\n-    class _Safe_iterator;\n-\n   /** A simple function object that returns true if the passed-in\n    *  value is not equal to the stored value. It saves typing over\n    *  using both bind1st and not_equal."}, {"sha": "8d4da958b1b3b98134c1d24c8519e37891dfef99", "filename": "libstdc++-v3/include/debug/safe_unordered_container.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_unordered_container.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_unordered_container.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_unordered_container.h?ref=adad2a7d908a58b22431e05dc4f4efba3b990ea2", "patch": "@@ -29,7 +29,7 @@\n #ifndef _GLIBCXX_DEBUG_SAFE_UNORDERED_CONTAINER_H\n #define _GLIBCXX_DEBUG_SAFE_UNORDERED_CONTAINER_H 1\n \n-#include <debug/debug.h>\n+#include <debug/assertions.h>\n #include <debug/macros.h>\n #include <debug/functions.h>\n #include <debug/safe_unordered_base.h>"}, {"sha": "be679920949ad0ce90cd5cc969074ed4f4e5a0e5", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=adad2a7d908a58b22431e05dc4f4efba3b990ea2", "patch": "@@ -742,8 +742,7 @@ namespace __debug\n     {\n       size_t\n       operator()(const __debug::vector<bool, _Alloc>& __b) const noexcept\n-      { return std::hash<_GLIBCXX_STD_C::vector<bool, _Alloc>>()\n-\t  (__b._M_base()); }\n+      { return std::hash<_GLIBCXX_STD_C::vector<bool, _Alloc>>()(__b); }\n     };\n #endif\n "}, {"sha": "f60e31f845b1d6e72533ca2e46ecb67b12250a80", "filename": "libstdc++-v3/src/c++11/debug.cc", "status": "modified", "additions": 154, "deletions": 83, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc?ref=adad2a7d908a58b22431e05dc4f4efba3b990ea2", "patch": "@@ -519,7 +519,122 @@ namespace __gnu_debug\n     if (_M_local_iterators == __it)\n       _M_local_iterators = __it->_M_next;\n   }\n+}\n+\n+namespace\n+{\n+  void\n+  print_type(const __gnu_debug::_Error_formatter* __formatter,\n+\t     const type_info* __info,\n+\t     const char* __unknown_name)\n+  {\n+    if (!__info)\n+      __formatter->_M_print_word(__unknown_name);\n+    else\n+      {\n+\tint __status;\n+\tchar* __demangled_name =\n+\t  __cxxabiv1::__cxa_demangle(__info->name(), NULL, NULL, &__status);\n+\t__formatter->_M_print_word(__status == 0\n+\t\t\t\t   ? __demangled_name : __info->name());\n+\tfree(__demangled_name);\n+      }\n+  }\n+\n+  bool\n+  print_field(\n+    const __gnu_debug::_Error_formatter* __formatter,\n+    const char* __name,\n+    const __gnu_debug::_Error_formatter::_Parameter::_Type& __variant)\n+  {\n+    if (strcmp(__name, \"name\") == 0)\n+      {\n+\tassert(__variant._M_name);\n+\t__formatter->_M_print_word(__variant._M_name);\n+      }\n+    else if (strcmp(__name, \"type\") == 0)\n+      print_type(__formatter, __variant._M_type, \"<unknown type>\");\n+    else\n+      return false;\n+\n+    return true;\n+  }\n+\n+  bool\n+  print_field(\n+    const __gnu_debug::_Error_formatter* __formatter,\n+    const char* __name,\n+    const __gnu_debug::_Error_formatter::_Parameter::_Instance& __variant)\n+  {\n+    const __gnu_debug::_Error_formatter::_Parameter::_Type& __type = __variant;\n+    if (print_field(__formatter, __name, __type))\n+      { }\n+    else if (strcmp(__name, \"address\") == 0)\n+      {\n+\tconst int __bufsize = 64;\n+\tchar __buf[__bufsize];\n+\t__formatter->_M_format_word(__buf, __bufsize, \"%p\",\n+\t\t\t\t    __variant._M_address);\n+\t__formatter->_M_print_word(__buf);\n+      }\n+    else\n+      return false;\n+\n+    return true;\n+  }\n \n+  void\n+  print_description(\n+\tconst __gnu_debug::_Error_formatter* __formatter,\n+\tconst __gnu_debug::_Error_formatter::_Parameter::_Type& __variant)\n+  {\n+    if (__variant._M_name)\n+      {\n+\tconst int __bufsize = 64;\n+\tchar __buf[__bufsize];\n+\t__formatter->_M_format_word(__buf, __bufsize, \"\\\"%s\\\" \",\n+\t\t\t\t    __variant._M_name);\n+\t__formatter->_M_print_word(__buf);\n+      }\n+\n+    if (__variant._M_type)\n+      {\n+\t__formatter->_M_print_word(\"  type = \");\n+\tprint_type(__formatter, __variant._M_type, \"<unknown type>\");\n+\t__formatter->_M_print_word(\";\\n\");\n+      }\n+  }\n+\n+\n+  void\n+  print_description(\n+\tconst __gnu_debug::_Error_formatter* __formatter,\n+\tconst __gnu_debug::_Error_formatter::_Parameter::_Instance& __variant)\n+  {\n+    const int __bufsize = 64;\n+    char __buf[__bufsize];\n+\n+    if (__variant._M_name)\n+      {\n+\t__formatter->_M_format_word(__buf, __bufsize, \"\\\"%s\\\" \",\n+\t\t\t\t    __variant._M_name);\n+\t__formatter->_M_print_word(__buf);\n+      }\n+\n+    __formatter->_M_format_word(__buf, __bufsize, \"@ 0x%p {\\n\",\n+\t\t\t\t__variant._M_address);\n+    __formatter->_M_print_word(__buf);\n+\n+    if (__variant._M_type)\n+      {\n+\t__formatter->_M_print_word(\"  type = \");\n+\tprint_type(__formatter, __variant._M_type, \"<unknown type>\");\n+      }\n+  }\n+}\n+\n+namespace __gnu_debug\n+{\n   void\n   _Error_formatter::_Parameter::\n   _M_print_field(const _Error_formatter* __formatter, const char* __name) const\n@@ -531,20 +646,8 @@ namespace __gnu_debug\n     switch (_M_kind)\n     {\n     case __iterator:\n-      if (strcmp(__name, \"name\") == 0)\n-\t{\n-\t  assert(_M_variant._M_iterator._M_name);\n-\t  __formatter->_M_print_word(_M_variant._M_iterator._M_name);\n-\t}\n-      else if (strcmp(__name, \"address\") == 0)\n-\t{\n-\t  __formatter->_M_format_word(__buf, __bufsize, \"%p\",\n-\t\t\t\t      _M_variant._M_iterator._M_address);\n-\t  __formatter->_M_print_word(__buf);\n-\t}\n-      else if (strcmp(__name, \"type\") == 0)\n-\t__formatter->_M_print_type(_M_variant._M_iterator._M_type,\n-\t\t\t\t   \"<unknown type>\");\n+      if (print_field(__formatter, __name, _M_variant._M_iterator))\n+\t{ }\n       else if (strcmp(__name, \"constness\") == 0)\n \t{\n \t  static const char* __constness_names[__last_constness] =\n@@ -579,28 +682,13 @@ namespace __gnu_debug\n \t  __formatter->_M_print_word(__buf);\n \t}\n       else if (strcmp(__name, \"seq_type\") == 0)\n-\t__formatter->_M_print_type(_M_variant._M_iterator._M_seq_type,\n-\t\t\t\t   \"<unknown seq_type>\");\n+\tprint_type(__formatter, _M_variant._M_iterator._M_seq_type,\n+\t\t   \"<unknown seq_type>\");\n       else\n \tassert(false);\n       break;\n     case __sequence:\n-      if (strcmp(__name, \"name\") == 0)\n-\t{\n-\t  assert(_M_variant._M_sequence._M_name);\n-\t  __formatter->_M_print_word(_M_variant._M_sequence._M_name);\n-\t}\n-      else if (strcmp(__name, \"address\") == 0)\n-\t{\n-\t  assert(_M_variant._M_sequence._M_address);\n-\t  __formatter->_M_format_word(__buf, __bufsize, \"%p\",\n-\t\t\t\t      _M_variant._M_sequence._M_address);\n-\t  __formatter->_M_print_word(__buf);\n-\t}\n-      else if (strcmp(__name, \"type\") == 0)\n-\t__formatter->_M_print_type(_M_variant._M_sequence._M_type,\n-\t\t\t\t   \"<unknown type>\");\n-      else\n+      if (!print_field(__formatter, __name, _M_variant._M_sequence))\n \tassert(false);\n       break;\n     case __integer:\n@@ -621,6 +709,14 @@ namespace __gnu_debug\n       else\n \tassert(false);\n       break;\n+    case __instance:\n+      if (!print_field(__formatter, __name, _M_variant._M_instance))\n+\tassert(false);\n+      break;\n+    case __iterator_value_type:\n+      if (!print_field(__formatter, __name, _M_variant._M_iterator_value_type))\n+\tassert(false);\n+      break;\n     default:\n       assert(false);\n       break;\n@@ -638,21 +734,10 @@ namespace __gnu_debug\n       {\n       case __iterator:\n \t__formatter->_M_print_word(\"iterator \");\n-\tif (_M_variant._M_iterator._M_name)\n-\t  {\n-\t    __formatter->_M_format_word(__buf, __bufsize, \"\\\"%s\\\" \",\n-\t\t\t\t\t_M_variant._M_iterator._M_name);\n-\t    __formatter->_M_print_word(__buf);\n-\t  }\n+\tprint_description(__formatter, _M_variant._M_iterator);\n \n-\t__formatter->_M_format_word(__buf, __bufsize, \"@ 0x%p {\\n\",\n-\t\t\t\t    _M_variant._M_iterator._M_address);\n-\t__formatter->_M_print_word(__buf);\n \tif (_M_variant._M_iterator._M_type)\n \t  {\n-\t    __formatter->_M_print_word(\"type = \");\n-\t    _M_print_field(__formatter, \"type\");\n-\n \t    if (_M_variant._M_iterator._M_constness != __unknown_constness)\n \t      {\n \t\t__formatter->_M_print_word(\" (\");\n@@ -687,25 +772,25 @@ namespace __gnu_debug\n \tbreak;\n       case __sequence:\n \t__formatter->_M_print_word(\"sequence \");\n-\tif (_M_variant._M_sequence._M_name)\n-\t  {\n-\t    __formatter->_M_format_word(__buf, __bufsize, \"\\\"%s\\\" \",\n-\t\t\t\t\t_M_variant._M_sequence._M_name);\n-\t    __formatter->_M_print_word(__buf);\n-\t  }\n-\n-\t__formatter->_M_format_word(__buf, __bufsize, \"@ 0x%p {\\n\",\n-\t\t\t\t    _M_variant._M_sequence._M_address);\n-\t__formatter->_M_print_word(__buf);\n+\tprint_description(__formatter, _M_variant._M_sequence);\n \n \tif (_M_variant._M_sequence._M_type)\n-\t  {\n-\t    __formatter->_M_print_word(\"  type = \");\n-\t    _M_print_field(__formatter, \"type\");\n-\t    __formatter->_M_print_word(\";\\n\");\n-\t  }\n+\t  __formatter->_M_print_word(\";\\n\");\n+\n \t__formatter->_M_print_word(\"}\\n\");\n \tbreak;\n+      case __instance:\n+\t__formatter->_M_print_word(\"instance \");\n+\tprint_description(__formatter, _M_variant._M_instance);\n+\n+\tif (_M_variant._M_instance._M_type)\n+\t  __formatter->_M_print_word(\";\\n\");\n+\n+\tbreak;\n+      case __iterator_value_type:\n+\t__formatter->_M_print_word(\"iterator::value_type \");\n+\tprint_description(__formatter, _M_variant._M_iterator_value_type);\n+\tbreak;\n       default:\n \tbreak;\n       }\n@@ -756,6 +841,8 @@ namespace __gnu_debug\n \t  {\n \t  case _Parameter::__iterator:\n \t  case _Parameter::__sequence:\n+\t  case _Parameter::__instance:\n+\t  case _Parameter::__iterator_value_type:\n \t    if (!__has_noninteger_parameters)\n \t      {\n \t\t_M_first_line = true;\n@@ -879,9 +966,9 @@ namespace __gnu_debug\n \n \t// Get the parameter number\n \tassert(*__start >= '1' && *__start <= '9');\n-\tsize_t __param = *__start - '0';\n-\t--__param;\n-\tassert(__param < _M_num_parameters);\n+\tsize_t __param_index = *__start - '0' - 1;\n+\tassert(__param_index < _M_num_parameters);\n+\tconst auto& __param = _M_parameters[__param_index];\n \n \t// '.' separates the parameter number from the field\n \t// name, if there is one.\n@@ -891,14 +978,14 @@ namespace __gnu_debug\n \t    assert(*__start == ';');\n \t    ++__start;\n \t    __buf[0] = '\\0';\n-\t    if (_M_parameters[__param]._M_kind == _Parameter::__integer)\n+\t    if (__param._M_kind == _Parameter::__integer)\n \t      {\n \t\t_M_format_word(__buf, __bufsize, \"%ld\",\n-\t\t\t       _M_parameters[__param]._M_variant._M_integer._M_value);\n+\t\t\t       __param._M_variant._M_integer._M_value);\n \t\t_M_print_word(__buf);\n \t      }\n-\t    else if (_M_parameters[__param]._M_kind == _Parameter::__string)\n-\t      _M_print_string(_M_parameters[__param]._M_variant._M_string._M_value);\n+\t    else if (__param._M_kind == _Parameter::__string)\n+\t      _M_print_string(__param._M_variant._M_string._M_value);\n \t    continue;\n \t  }\n \n@@ -916,23 +1003,7 @@ namespace __gnu_debug\n \t++__start;\n \t__field[__field_idx] = 0;\n \n-\t_M_parameters[__param]._M_print_field(this, __field);\n-      }\n-  }\n-\n-  void\n-  _Error_formatter::_M_print_type(const type_info* __info,\n-\t\t\t\t  const char* __unknown_name) const\n-  {\n-    if (!__info)\n-      _M_print_word(__unknown_name);\n-    else\n-      {\n-\tint __status;\n-\tchar* __demangled_name =\n-\t  __cxxabiv1::__cxa_demangle(__info->name(), NULL, NULL, &__status);\n-\t_M_print_word(__status == 0 ? __demangled_name : __info->name());\n-\tfree(__demangled_name);\n+\t__param._M_print_field(this, __field);\n       }\n   }\n "}, {"sha": "3e197fd3f310c221f2acd41d08b363bf587cc6fc", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/get_debug_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_debug_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_debug_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_debug_neg.cc?ref=adad2a7d908a58b22431e05dc4f4efba3b990ea2", "patch": "@@ -28,6 +28,6 @@ int n1 = std::get<1>(a);\n int n2 = std::get<1>(std::move(a));\n int n3 = std::get<1>(ca);\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 271 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 280 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 288 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 272 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 281 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 289 }"}, {"sha": "b7472a23a521778dd08bc80fc01c481628ae931d", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/tuple_element_debug_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_debug_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adad2a7d908a58b22431e05dc4f4efba3b990ea2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_debug_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_debug_neg.cc?ref=adad2a7d908a58b22431e05dc4f4efba3b990ea2", "patch": "@@ -23,4 +23,4 @@\n \n typedef std::tuple_element<1, std::array<int, 1>>::type type;\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 305 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 306 }"}]}