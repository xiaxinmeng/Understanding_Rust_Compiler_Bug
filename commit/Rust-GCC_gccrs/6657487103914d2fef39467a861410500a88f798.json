{"sha": "6657487103914d2fef39467a861410500a88f798", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY1NzQ4NzEwMzkxNGQyZmVmMzk0NjdhODYxNDEwNTAwYTg4Zjc5OA==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-04-30T16:36:07Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-04-30T16:36:07Z"}, "message": "Add execution + assembler tests of AArch64 UZP Intrinsics.\n\n\t* gcc.target/aarch64/simd/vuzpf32_1.c: New file.\n\t* gcc.target/aarch64/simd/vuzpf32.x: New file.\n\t* gcc.target/aarch64/simd/vuzpp16_1.c: New file.\n\t* gcc.target/aarch64/simd/vuzpp16.x: New file.\n\t* gcc.target/aarch64/simd/vuzpp8_1.c: New file.\n\t* gcc.target/aarch64/simd/vuzpp8.x: New file.\n\t* gcc.target/aarch64/simd/vuzpqf32_1.c: New file.\n\t* gcc.target/aarch64/simd/vuzpqf32.x: New file.\n\t* gcc.target/aarch64/simd/vuzpqp16_1.c: New file.\n\t* gcc.target/aarch64/simd/vuzpqp16.x: New file.\n\t* gcc.target/aarch64/simd/vuzpqp8_1.c: New file.\n\t* gcc.target/aarch64/simd/vuzpqp8.x: New file.\n\t* gcc.target/aarch64/simd/vuzpqs16_1.c: New file.\n\t* gcc.target/aarch64/simd/vuzpqs16.x: New file.\n\t* gcc.target/aarch64/simd/vuzpqs32_1.c: New file.\n\t* gcc.target/aarch64/simd/vuzpqs32.x: New file.\n\t* gcc.target/aarch64/simd/vuzpqs8_1.c: New file.\n\t* gcc.target/aarch64/simd/vuzpqs8.x: New file.\n\t* gcc.target/aarch64/simd/vuzpqu16_1.c: New file.\n\t* gcc.target/aarch64/simd/vuzpqu16.x: New file.\n\t* gcc.target/aarch64/simd/vuzpqu32_1.c: New file.\n\t* gcc.target/aarch64/simd/vuzpqu32.x: New file.\n\t* gcc.target/aarch64/simd/vuzpqu8_1.c: New file.\n\t* gcc.target/aarch64/simd/vuzpqu8.x: New file.\n\t* gcc.target/aarch64/simd/vuzps16_1.c: New file.\n\t* gcc.target/aarch64/simd/vuzps16.x: New file.\n\t* gcc.target/aarch64/simd/vuzps32_1.c: New file.\n\t* gcc.target/aarch64/simd/vuzps32.x: New file.\n\t* gcc.target/aarch64/simd/vuzps8_1.c: New file.\n\t* gcc.target/aarch64/simd/vuzps8.x: New file.\n\t* gcc.target/aarch64/simd/vuzpu16_1.c: New file.\n\t* gcc.target/aarch64/simd/vuzpu16.x: New file.\n\t* gcc.target/aarch64/simd/vuzpu32_1.c: New file.\n\t* gcc.target/aarch64/simd/vuzpu32.x: New file.\n\t* gcc.target/aarch64/simd/vuzpu8_1.c: New file.\n\t* gcc.target/aarch64/simd/vuzpu8.x: New file.\n\nFrom-SVN: r209940", "tree": {"sha": "af9a2308b3ca517816ebc0326076fda65b73aa77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af9a2308b3ca517816ebc0326076fda65b73aa77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6657487103914d2fef39467a861410500a88f798", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6657487103914d2fef39467a861410500a88f798", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6657487103914d2fef39467a861410500a88f798", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6657487103914d2fef39467a861410500a88f798/comments", "author": null, "committer": null, "parents": [{"sha": "e5bd20a4f1fc38e4079163b912bafe8eb03df397", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5bd20a4f1fc38e4079163b912bafe8eb03df397", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5bd20a4f1fc38e4079163b912bafe8eb03df397"}], "stats": {"total": 708, "additions": 708, "deletions": 0}, "files": [{"sha": "b409f94b27c34258413a1d51913ab1f21169d171", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -1,3 +1,42 @@\n+2014-04-30  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* gcc.target/aarch64/simd/vuzpf32_1.c: New file.\n+\t* gcc.target/aarch64/simd/vuzpf32.x: New file.\n+\t* gcc.target/aarch64/simd/vuzpp16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vuzpp16.x: New file.\n+\t* gcc.target/aarch64/simd/vuzpp8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vuzpp8.x: New file.\n+\t* gcc.target/aarch64/simd/vuzpqf32_1.c: New file.\n+\t* gcc.target/aarch64/simd/vuzpqf32.x: New file.\n+\t* gcc.target/aarch64/simd/vuzpqp16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vuzpqp16.x: New file.\n+\t* gcc.target/aarch64/simd/vuzpqp8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vuzpqp8.x: New file.\n+\t* gcc.target/aarch64/simd/vuzpqs16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vuzpqs16.x: New file.\n+\t* gcc.target/aarch64/simd/vuzpqs32_1.c: New file.\n+\t* gcc.target/aarch64/simd/vuzpqs32.x: New file.\n+\t* gcc.target/aarch64/simd/vuzpqs8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vuzpqs8.x: New file.\n+\t* gcc.target/aarch64/simd/vuzpqu16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vuzpqu16.x: New file.\n+\t* gcc.target/aarch64/simd/vuzpqu32_1.c: New file.\n+\t* gcc.target/aarch64/simd/vuzpqu32.x: New file.\n+\t* gcc.target/aarch64/simd/vuzpqu8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vuzpqu8.x: New file.\n+\t* gcc.target/aarch64/simd/vuzps16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vuzps16.x: New file.\n+\t* gcc.target/aarch64/simd/vuzps32_1.c: New file.\n+\t* gcc.target/aarch64/simd/vuzps32.x: New file.\n+\t* gcc.target/aarch64/simd/vuzps8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vuzps8.x: New file.\n+\t* gcc.target/aarch64/simd/vuzpu16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vuzpu16.x: New file.\n+\t* gcc.target/aarch64/simd/vuzpu32_1.c: New file.\n+\t* gcc.target/aarch64/simd/vuzpu32.x: New file.\n+\t* gcc.target/aarch64/simd/vuzpu8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vuzpu8.x: New file.\n+\n 2014-04-30  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/48329"}, {"sha": "86c3700e522251b9a11f52911b9b2d1f14fab298", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpf32.x", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpf32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpf32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpf32.x?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,26 @@\n+extern void abort (void);\n+\n+float32x2x2_t\n+test_vuzpf32 (float32x2_t _a, float32x2_t _b)\n+{\n+  return vuzp_f32 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  float32_t first[] = {1, 2};\n+  float32_t second[] = {3, 4};\n+  float32x2x2_t result = test_vuzpf32 (vld1_f32 (first), vld1_f32 (second));\n+  float32_t exp1[] = {1, 3};\n+  float32_t exp2[] = {2, 4};\n+  float32x2_t expect1 = vld1_f32 (exp1);\n+  float32x2_t expect2 = vld1_f32 (exp2);\n+\n+  for (i = 0; i < 2; i++)\n+    if ((result.val[0][i] != expect1[i]) || (result.val[1][i] != expect2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "fedee93a19cfff8febfc29a3d16a94957c253c4f", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpf32_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpf32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpf32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpf32_1.c?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vuzp_f32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vuzpf32.x\"\n+\n+/* { dg-final { scan-assembler-times \"uzp1\\[ \\t\\]+v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"uzp2\\[ \\t\\]+v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "bc45efcd96526f98b40abf3bb2bf2a26d11aac3b", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpp16.x", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpp16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpp16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpp16.x?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,26 @@\n+extern void abort (void);\n+\n+poly16x4x2_t\n+test_vuzpp16 (poly16x4_t _a, poly16x4_t _b)\n+{\n+  return vuzp_p16 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  poly16_t first[] = {1, 2, 3, 4};\n+  poly16_t second[] = {5, 6, 7, 8};\n+  poly16x4x2_t result = test_vuzpp16 (vld1_p16 (first), vld1_p16 (second));\n+  poly16_t exp1[] = {1, 3, 5, 7};\n+  poly16_t exp2[] = {2, 4, 6, 8};\n+  poly16x4_t expect1 = vld1_p16 (exp1);\n+  poly16x4_t expect2 = vld1_p16 (exp2);\n+\n+  for (i = 0; i < 4; i++)\n+    if ((result.val[0][i] != expect1[i]) || (result.val[1][i] != expect2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "03b07220640d4e67dbe9f957f82c32c735ab5d6e", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpp16_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpp16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpp16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpp16_1.c?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vuzp_p16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vuzpp16.x\"\n+\n+/* { dg-final { scan-assembler-times \"uzp1\\[ \\t\\]+v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"uzp2\\[ \\t\\]+v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "b4ef51cae7460b1a70611a8c2ef3db7b53c87860", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpp8.x", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpp8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpp8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpp8.x?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,26 @@\n+extern void abort (void);\n+\n+poly8x8x2_t\n+test_vuzpp8 (poly8x8_t _a, poly8x8_t _b)\n+{\n+  return vuzp_p8 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  poly8_t first[] = {1, 2, 3, 4, 5, 6, 7, 8};\n+  poly8_t second[] = {9, 10, 11, 12, 13, 14, 15, 16};\n+  poly8x8x2_t result = test_vuzpp8 (vld1_p8 (first), vld1_p8 (second));\n+  poly8_t exp1[] = {1, 3, 5, 7, 9, 11, 13, 15};\n+  poly8_t exp2[] = {2, 4, 6, 8, 10, 12, 14, 16};\n+  poly8x8_t expect1 = vld1_p8 (exp1);\n+  poly8x8_t expect2 = vld1_p8 (exp2);\n+\n+  for (i = 0; i < 8; i++)\n+    if ((result.val[0][i] != expect1[i]) || (result.val[1][i] != expect2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "5186b1f9166f744a2d985a0222c7aa53dfadb028", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpp8_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpp8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpp8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpp8_1.c?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vuzp_p8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vuzpp8.x\"\n+\n+/* { dg-final { scan-assembler-times \"uzp1\\[ \\t\\]+v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"uzp2\\[ \\t\\]+v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "f1b48da315fc6f6bf1311e1aa8ef250c0dbdcf0a", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpqf32.x", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqf32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqf32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqf32.x?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,26 @@\n+extern void abort (void);\n+\n+float32x4x2_t\n+test_vuzpqf32 (float32x4_t _a, float32x4_t _b)\n+{\n+  return vuzpq_f32 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  float32_t first[] = {1, 2, 3, 4};\n+  float32_t second[] = {5, 6, 7, 8};\n+  float32x4x2_t result = test_vuzpqf32 (vld1q_f32 (first), vld1q_f32 (second));\n+  float32_t exp1[] = {1, 3, 5, 7};\n+  float32_t exp2[] = {2, 4, 6, 8};\n+  float32x4_t expect1 = vld1q_f32 (exp1);\n+  float32x4_t expect2 = vld1q_f32 (exp2);\n+\n+  for (i = 0; i < 4; i++)\n+    if ((result.val[0][i] != expect1[i]) || (result.val[1][i] != expect2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "1167f7bbe00a1ab62d5cd0b12d9eac27b2d88ede", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpqf32_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqf32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqf32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqf32_1.c?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vuzpq_f32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vuzpqf32.x\"\n+\n+/* { dg-final { scan-assembler-times \"uzp1\\[ \\t\\]+v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"uzp2\\[ \\t\\]+v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "d4e08f74631d3474862a06565e4b98cedc2daca4", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpqp16.x", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqp16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqp16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqp16.x?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,26 @@\n+extern void abort (void);\n+\n+poly16x8x2_t\n+test_vuzpqp16 (poly16x8_t _a, poly16x8_t _b)\n+{\n+  return vuzpq_p16 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  poly16_t first[] = {1, 2, 3, 4, 5, 6, 7, 8};\n+  poly16_t second[] = {9, 10, 11, 12, 13, 14, 15, 16};\n+  poly16x8x2_t result = test_vuzpqp16 (vld1q_p16 (first), vld1q_p16 (second));\n+  poly16_t exp1[] = {1, 3, 5, 7, 9, 11, 13, 15};\n+  poly16_t exp2[] = {2, 4, 6, 8, 10, 12, 14, 16};\n+  poly16x8_t expect1 = vld1q_p16 (exp1);\n+  poly16x8_t expect2 = vld1q_p16 (exp2);\n+\n+  for (i = 0; i < 8; i++)\n+    if ((result.val[0][i] != expect1[i]) || (result.val[1][i] != expect2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "c6648045cf3dfe41457484ac0ef42ead8d1f5941", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpqp16_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqp16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqp16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqp16_1.c?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vuzpq_p16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vuzpqp16.x\"\n+\n+/* { dg-final { scan-assembler-times \"uzp1\\[ \\t\\]+v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"uzp2\\[ \\t\\]+v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "31541de7e14dd35a6ff476774c45251a1a0d4f19", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpqp8.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqp8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqp8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqp8.x?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+poly8x16x2_t\n+test_vuzpqp8 (poly8x16_t _a, poly8x16_t _b)\n+{\n+  return vuzpq_p8 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  poly8_t first[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n+  poly8_t second[] =\n+      {17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32};\n+  poly8x16x2_t result = test_vuzpqp8 (vld1q_p8 (first), vld1q_p8 (second));\n+  poly8_t exp1[] = {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31};\n+  poly8_t exp2[] = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32};\n+  poly8x16_t expect1 = vld1q_p8 (exp1);\n+  poly8x16_t expect2 = vld1q_p8 (exp2);\n+\n+  for (i = 0; i < 16; i++)\n+    if ((result.val[0][i] != expect1[i]) || (result.val[1][i] != expect2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "a9e6ce222e7249f596648ee55b85602c515d2a68", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpqp8_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqp8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqp8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqp8_1.c?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vuzpq_p8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vuzpqp8.x\"\n+\n+/* { dg-final { scan-assembler-times \"uzp1\\[ \\t\\]+v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"uzp2\\[ \\t\\]+v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "439107b2ec59115a934157e4ad1b518983a23805", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpqs16.x", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqs16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqs16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqs16.x?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,26 @@\n+extern void abort (void);\n+\n+int16x8x2_t\n+test_vuzpqs16 (int16x8_t _a, int16x8_t _b)\n+{\n+  return vuzpq_s16 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int16_t first[] = {1, 2, 3, 4, 5, 6, 7, 8};\n+  int16_t second[] = {9, 10, 11, 12, 13, 14, 15, 16};\n+  int16x8x2_t result = test_vuzpqs16 (vld1q_s16 (first), vld1q_s16 (second));\n+  int16_t exp1[] = {1, 3, 5, 7, 9, 11, 13, 15};\n+  int16_t exp2[] = {2, 4, 6, 8, 10, 12, 14, 16};\n+  int16x8_t expect1 = vld1q_s16 (exp1);\n+  int16x8_t expect2 = vld1q_s16 (exp2);\n+\n+  for (i = 0; i < 8; i++)\n+    if ((result.val[0][i] != expect1[i]) || (result.val[1][i] != expect2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "af1e28b7669dc61e3d9280c9e375aefded98ee5f", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpqs16_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqs16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqs16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqs16_1.c?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vuzpq_s16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vuzpqs16.x\"\n+\n+/* { dg-final { scan-assembler-times \"uzp1\\[ \\t\\]+v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"uzp2\\[ \\t\\]+v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "84463f038e59181a8c30330070331db7fc8b46a1", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpqs32.x", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqs32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqs32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqs32.x?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,26 @@\n+extern void abort (void);\n+\n+int32x4x2_t\n+test_vuzpqs32 (int32x4_t _a, int32x4_t _b)\n+{\n+  return vuzpq_s32 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int32_t first[] = {1, 2, 3, 4};\n+  int32_t second[] = {5, 6, 7, 8};\n+  int32x4x2_t result = test_vuzpqs32 (vld1q_s32 (first), vld1q_s32 (second));\n+  int32_t exp1[] = {1, 3, 5, 7};\n+  int32_t exp2[] = {2, 4, 6, 8};\n+  int32x4_t expect1 = vld1q_s32 (exp1);\n+  int32x4_t expect2 = vld1q_s32 (exp2);\n+\n+  for (i = 0; i < 4; i++)\n+    if ((result.val[0][i] != expect1[i]) || (result.val[1][i] != expect2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "a4bf7ac7e59cb2cdda272d1f80c3b6cd1d8cb42d", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpqs32_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqs32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqs32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqs32_1.c?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vuzpq_s32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vuzpqs32.x\"\n+\n+/* { dg-final { scan-assembler-times \"uzp1\\[ \\t\\]+v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"uzp2\\[ \\t\\]+v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "c8b916780d74dcb769b5452008eddb5fc2bcceb2", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpqs8.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqs8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqs8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqs8.x?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+int8x16x2_t\n+test_vuzpqs8 (int8x16_t _a, int8x16_t _b)\n+{\n+  return vuzpq_s8 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int8_t first[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n+  int8_t second[] =\n+      {17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32};\n+  int8x16x2_t result = test_vuzpqs8 (vld1q_s8 (first), vld1q_s8 (second));\n+  int8_t exp1[] = {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31};\n+  int8_t exp2[] = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32};\n+  int8x16_t expect1 = vld1q_s8 (exp1);\n+  int8x16_t expect2 = vld1q_s8 (exp2);\n+\n+  for (i = 0; i < 16; i++)\n+    if ((result.val[0][i] != expect1[i]) || (result.val[1][i] != expect2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "234a3292823564cd4b15f923df265cd2437343e6", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpqs8_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqs8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqs8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqs8_1.c?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vuzpq_s8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vuzpqs8.x\"\n+\n+/* { dg-final { scan-assembler-times \"uzp1\\[ \\t\\]+v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"uzp2\\[ \\t\\]+v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "1757467b46716831fd35a1da0607fe397326dfe1", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpqu16.x", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqu16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqu16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqu16.x?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,26 @@\n+extern void abort (void);\n+\n+uint16x8x2_t\n+test_vuzpqu16 (uint16x8_t _a, uint16x8_t _b)\n+{\n+  return vuzpq_u16 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint16_t first[] = {1, 2, 3, 4, 5, 6, 7, 8};\n+  uint16_t second[] = {9, 10, 11, 12, 13, 14, 15, 16};\n+  uint16x8x2_t result = test_vuzpqu16 (vld1q_u16 (first), vld1q_u16 (second));\n+  uint16_t exp1[] = {1, 3, 5, 7, 9, 11, 13, 15};\n+  uint16_t exp2[] = {2, 4, 6, 8, 10, 12, 14, 16};\n+  uint16x8_t expect1 = vld1q_u16 (exp1);\n+  uint16x8_t expect2 = vld1q_u16 (exp2);\n+\n+  for (i = 0; i < 8; i++)\n+    if ((result.val[0][i] != expect1[i]) || (result.val[1][i] != expect2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "3f029ed5439cd99a0ac452d24b4fecff8cb0f5cb", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpqu16_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqu16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqu16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqu16_1.c?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vuzpq_u16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vuzpqu16.x\"\n+\n+/* { dg-final { scan-assembler-times \"uzp1\\[ \\t\\]+v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"uzp2\\[ \\t\\]+v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "9ff23694c298a501657a51498f75b58b2cbcd207", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpqu32.x", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqu32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqu32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqu32.x?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,26 @@\n+extern void abort (void);\n+\n+uint32x4x2_t\n+test_vuzpqu32 (uint32x4_t _a, uint32x4_t _b)\n+{\n+  return vuzpq_u32 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint32_t first[] = {1, 2, 3, 4};\n+  uint32_t second[] = {5, 6, 7, 8};\n+  uint32x4x2_t result = test_vuzpqu32 (vld1q_u32 (first), vld1q_u32 (second));\n+  uint32_t exp1[] = {1, 3, 5, 7};\n+  uint32_t exp2[] = {2, 4, 6, 8};\n+  uint32x4_t expect1 = vld1q_u32 (exp1);\n+  uint32x4_t expect2 = vld1q_u32 (exp2);\n+\n+  for (i = 0; i < 4; i++)\n+    if ((result.val[0][i] != expect1[i]) || (result.val[1][i] != expect2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "16090eed7127e052b57f255787e81e98c93a2d6b", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpqu32_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqu32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqu32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqu32_1.c?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vuzpq_u32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vuzpqu32.x\"\n+\n+/* { dg-final { scan-assembler-times \"uzp1\\[ \\t\\]+v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"uzp2\\[ \\t\\]+v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "1f5288d0ce35c3f2ce74feb159f5e7cb82171b16", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpqu8.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqu8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqu8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqu8.x?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+uint8x16x2_t\n+test_vuzpqu8 (uint8x16_t _a, uint8x16_t _b)\n+{\n+  return vuzpq_u8 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint8_t first[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n+  uint8_t second[] =\n+      {17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32};\n+  uint8x16x2_t result = test_vuzpqu8 (vld1q_u8 (first), vld1q_u8 (second));\n+  uint8_t exp1[] = {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31};\n+  uint8_t exp2[] = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32};\n+  uint8x16_t expect1 = vld1q_u8 (exp1);\n+  uint8x16_t expect2 = vld1q_u8 (exp2);\n+\n+  for (i = 0; i < 16; i++)\n+    if ((result.val[0][i] != expect1[i]) || (result.val[1][i] != expect2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "6313e4c9b5d480fed91ef98359bfc80a5581ee21", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpqu8_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqu8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqu8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpqu8_1.c?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vuzpq_u8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vuzpqu8.x\"\n+\n+/* { dg-final { scan-assembler-times \"uzp1\\[ \\t\\]+v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"uzp2\\[ \\t\\]+v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "4775135d84204236d7fe839dac05359c60aefe5b", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzps16.x", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzps16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzps16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzps16.x?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,26 @@\n+extern void abort (void);\n+\n+int16x4x2_t\n+test_vuzps16 (int16x4_t _a, int16x4_t _b)\n+{\n+  return vuzp_s16 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int16_t first[] = {1, 2, 3, 4};\n+  int16_t second[] = {5, 6, 7, 8};\n+  int16x4x2_t result = test_vuzps16 (vld1_s16 (first), vld1_s16 (second));\n+  int16_t exp1[] = {1, 3, 5, 7};\n+  int16_t exp2[] = {2, 4, 6, 8};\n+  int16x4_t expect1 = vld1_s16 (exp1);\n+  int16x4_t expect2 = vld1_s16 (exp2);\n+\n+  for (i = 0; i < 4; i++)\n+    if ((result.val[0][i] != expect1[i]) || (result.val[1][i] != expect2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "f31bd31d0bf909f6569a01ab9a5da1ce214c8d49", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzps16_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzps16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzps16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzps16_1.c?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vuzp_s16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vuzps16.x\"\n+\n+/* { dg-final { scan-assembler-times \"uzp1\\[ \\t\\]+v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"uzp2\\[ \\t\\]+v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "6f885ce083bd19c7e83ffe2f4a75a529ae5ae4d2", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzps32.x", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzps32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzps32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzps32.x?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,26 @@\n+extern void abort (void);\n+\n+int32x2x2_t\n+test_vuzps32 (int32x2_t _a, int32x2_t _b)\n+{\n+  return vuzp_s32 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int32_t first[] = {1, 2};\n+  int32_t second[] = {3, 4};\n+  int32x2x2_t result = test_vuzps32 (vld1_s32 (first), vld1_s32 (second));\n+  int32_t exp1[] = {1, 3};\n+  int32_t exp2[] = {2, 4};\n+  int32x2_t expect1 = vld1_s32 (exp1);\n+  int32x2_t expect2 = vld1_s32 (exp2);\n+\n+  for (i = 0; i < 2; i++)\n+    if ((result.val[0][i] != expect1[i]) || (result.val[1][i] != expect2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "c9de7c8027a7873cd5fead25957c92e138fdbed6", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzps32_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzps32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzps32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzps32_1.c?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vuzp_s32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vuzps32.x\"\n+\n+/* { dg-final { scan-assembler-times \"uzp1\\[ \\t\\]+v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"uzp2\\[ \\t\\]+v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "62ccad4577974e16a05b37ef75b18b2a0be74cd7", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzps8.x", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzps8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzps8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzps8.x?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,26 @@\n+extern void abort (void);\n+\n+int8x8x2_t\n+test_vuzps8 (int8x8_t _a, int8x8_t _b)\n+{\n+  return vuzp_s8 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int8_t first[] = {1, 2, 3, 4, 5, 6, 7, 8};\n+  int8_t second[] = {9, 10, 11, 12, 13, 14, 15, 16};\n+  int8x8x2_t result = test_vuzps8 (vld1_s8 (first), vld1_s8 (second));\n+  int8_t exp1[] = {1, 3, 5, 7, 9, 11, 13, 15};\n+  int8_t exp2[] = {2, 4, 6, 8, 10, 12, 14, 16};\n+  int8x8_t expect1 = vld1_s8 (exp1);\n+  int8x8_t expect2 = vld1_s8 (exp2);\n+\n+  for (i = 0; i < 8; i++)\n+    if ((result.val[0][i] != expect1[i]) || (result.val[1][i] != expect2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "5962604ae42d32278ad4633f2382cce6afffe3b4", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzps8_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzps8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzps8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzps8_1.c?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vuzp_s8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vuzps8.x\"\n+\n+/* { dg-final { scan-assembler-times \"uzp1\\[ \\t\\]+v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"uzp2\\[ \\t\\]+v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "a5983f6f0b296b832837ea7e9cb7abd7fbe703ec", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpu16.x", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpu16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpu16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpu16.x?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,26 @@\n+extern void abort (void);\n+\n+uint16x4x2_t\n+test_vuzpu16 (uint16x4_t _a, uint16x4_t _b)\n+{\n+  return vuzp_u16 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint16_t first[] = {1, 2, 3, 4};\n+  uint16_t second[] = {5, 6, 7, 8};\n+  uint16x4x2_t result = test_vuzpu16 (vld1_u16 (first), vld1_u16 (second));\n+  uint16_t exp1[] = {1, 3, 5, 7};\n+  uint16_t exp2[] = {2, 4, 6, 8};\n+  uint16x4_t expect1 = vld1_u16 (exp1);\n+  uint16x4_t expect2 = vld1_u16 (exp2);\n+\n+  for (i = 0; i < 4; i++)\n+    if ((result.val[0][i] != expect1[i]) || (result.val[1][i] != expect2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "5025c5ff43e78d1cbb654357935a34c005da1dd8", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpu16_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpu16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpu16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpu16_1.c?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vuzp_u16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vuzpu16.x\"\n+\n+/* { dg-final { scan-assembler-times \"uzp1\\[ \\t\\]+v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"uzp2\\[ \\t\\]+v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "6bf673130d99c6c875aaccca022860bffab6d709", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpu32.x", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpu32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpu32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpu32.x?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,26 @@\n+extern void abort (void);\n+\n+uint32x2x2_t\n+test_vuzpu32 (uint32x2_t _a, uint32x2_t _b)\n+{\n+  return vuzp_u32 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint32_t first[] = {1, 2};\n+  uint32_t second[] = {3, 4};\n+  uint32x2x2_t result = test_vuzpu32 (vld1_u32 (first), vld1_u32 (second));\n+  uint32_t exp1[] = {1, 3};\n+  uint32_t exp2[] = {2, 4};\n+  uint32x2_t expect1 = vld1_u32 (exp1);\n+  uint32x2_t expect2 = vld1_u32 (exp2);\n+\n+  for (i = 0; i < 2; i++)\n+    if ((result.val[0][i] != expect1[i]) || (result.val[1][i] != expect2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "daae84bd6021b8bad97c5431d86615ee728d6f73", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpu32_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpu32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpu32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpu32_1.c?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vuzp_u32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vuzpu32.x\"\n+\n+/* { dg-final { scan-assembler-times \"uzp1\\[ \\t\\]+v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"uzp2\\[ \\t\\]+v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "c3e67e8418f1c336f6449a89da1c4c3e8bf763fc", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpu8.x", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpu8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpu8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpu8.x?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,26 @@\n+extern void abort (void);\n+\n+uint8x8x2_t\n+test_vuzpu8 (uint8x8_t _a, uint8x8_t _b)\n+{\n+  return vuzp_u8 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint8_t first[] = {1, 2, 3, 4, 5, 6, 7, 8};\n+  uint8_t second[] = {9, 10, 11, 12, 13, 14, 15, 16};\n+  uint8x8x2_t result = test_vuzpu8 (vld1_u8 (first), vld1_u8 (second));\n+  uint8_t exp1[] = {1, 3, 5, 7, 9, 11, 13, 15};\n+  uint8_t exp2[] = {2, 4, 6, 8, 10, 12, 14, 16};\n+  uint8x8_t expect1 = vld1_u8 (exp1);\n+  uint8x8_t expect2 = vld1_u8 (exp2);\n+\n+  for (i = 0; i < 8; i++)\n+    if ((result.val[0][i] != expect1[i]) || (result.val[1][i] != expect2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "57aa49c93309934b2ffe555626b59b53b6df1bf0", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vuzpu8_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpu8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6657487103914d2fef39467a861410500a88f798/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpu8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvuzpu8_1.c?ref=6657487103914d2fef39467a861410500a88f798", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vuzp_u8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vuzpu8.x\"\n+\n+/* { dg-final { scan-assembler-times \"uzp1\\[ \\t\\]+v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"uzp2\\[ \\t\\]+v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}]}