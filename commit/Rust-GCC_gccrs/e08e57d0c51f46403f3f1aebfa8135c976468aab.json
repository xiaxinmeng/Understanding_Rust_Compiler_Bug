{"sha": "e08e57d0c51f46403f3f1aebfa8135c976468aab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA4ZTU3ZDBjNTFmNDY0MDNmM2YxYWViZmE4MTM1Yzk3NjQ2OGFhYg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2007-04-23T19:43:54Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2007-04-23T19:43:54Z"}, "message": "re PR fortran/31618 ([4.2, 4.1 only] backspace intrinsic is not working on an unformatted file)\n\n2007-04-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/31618\n\t* io/transfer.c (read_block_direct):  Instead of calling us_read,\n\tset dtp->u.p.current_unit->current_record = 0 so that pre_position\n\twill read the record marker.\n\t(data_transfer_init):  For different error conditions, call\n\tgenerate_error, then return.\n\n2007-04-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/31618\n\t* gfortran.dg/backspace_8.f:  New test case.\n\nFrom-SVN: r124079", "tree": {"sha": "a0f753f8651bc3ca395a636bc80a13ee8f1a693c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0f753f8651bc3ca395a636bc80a13ee8f1a693c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e08e57d0c51f46403f3f1aebfa8135c976468aab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e08e57d0c51f46403f3f1aebfa8135c976468aab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e08e57d0c51f46403f3f1aebfa8135c976468aab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e08e57d0c51f46403f3f1aebfa8135c976468aab/comments", "author": null, "committer": null, "parents": [{"sha": "10e4d956c1cc45eae31573b566694339f0fa6cbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10e4d956c1cc45eae31573b566694339f0fa6cbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10e4d956c1cc45eae31573b566694339f0fa6cbe"}], "stats": {"total": 139, "additions": 101, "deletions": 38}, "files": [{"sha": "1358818206e6c1c37f3fb3e529f3cbbea27db124", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08e57d0c51f46403f3f1aebfa8135c976468aab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08e57d0c51f46403f3f1aebfa8135c976468aab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e08e57d0c51f46403f3f1aebfa8135c976468aab", "patch": "@@ -1,3 +1,8 @@\n+2007-04-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/31618\n+\t* gfortran.dg/backspace_8.f:  New test case.\n+\n 2007-04-23  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/31630"}, {"sha": "8c8c96aaceca1366f4bca1e7cf1b342533218805", "filename": "gcc/testsuite/gfortran.dg/backspace_8.f", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08e57d0c51f46403f3f1aebfa8135c976468aab/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_8.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08e57d0c51f46403f3f1aebfa8135c976468aab/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_8.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_8.f?ref=e08e57d0c51f46403f3f1aebfa8135c976468aab", "patch": "@@ -0,0 +1,18 @@\n+C { dg-do run }\n+C PR libfortran/31618 - backspace after an error didn't work.\n+      program main\n+      character*78 msg\n+      open (21, file=\"backspace_7.dat\", form=\"unformatted\")\n+      write (21) 42, 43\n+      write (21) 4711, 4712\n+      write (21) -1, -4\n+      rewind (21)\n+      read (21) i,j\n+      read (21,err=100,end=100) i,j,k\n+      call abort\n+ 100  continue\n+      backspace 21\n+      read (21) i,j\n+      if (i .ne. 4711 .or. j .ne. 4712) call abort\n+      close (21,status=\"delete\")\n+      end"}, {"sha": "d682fc10793b988ddcdc4c164aaa2c9a43d08e50", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08e57d0c51f46403f3f1aebfa8135c976468aab/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08e57d0c51f46403f3f1aebfa8135c976468aab/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=e08e57d0c51f46403f3f1aebfa8135c976468aab", "patch": "@@ -1,3 +1,12 @@\n+2007-04-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/31618\n+\t* io/transfer.c (read_block_direct):  Instead of calling us_read,\n+\tset dtp->u.p.current_unit->current_record = 0 so that pre_position\n+\twill read the record marker.\n+\t(data_transfer_init):  For different error conditions, call\n+\tgenerate_error, then return.\n+\n 2007-04-19  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* runtime/main.c (please_free_exe_path_when_done): New variable."}, {"sha": "f9f6657b737e4b281c67deb853872a501471c6f6", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 69, "deletions": 38, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08e57d0c51f46403f3f1aebfa8135c976468aab/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08e57d0c51f46403f3f1aebfa8135c976468aab/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=e08e57d0c51f46403f3f1aebfa8135c976468aab", "patch": "@@ -494,11 +494,11 @@ read_block_direct (st_parameter_dt *dtp, void *buf, size_t *nbytes)\n \t    }\n \t  else\n \t    {\n-\t      /* Let's make sure the file position is correctly set for the\n-\t\t next read statement.  */\n+\t      /* Let's make sure the file position is correctly pre-positioned\n+\t\t for the next read statement.  */\n \n+\t      dtp->u.p.current_unit->current_record = 0;\n \t      next_record_r_unf (dtp, 0);\n-\t      us_read (dtp, 0);\n \t      generate_error (&dtp->common, ERROR_SHORT_RECORD, NULL);\n \t      return;\n \t    }\n@@ -1769,15 +1769,18 @@ data_transfer_init (st_parameter_dt *dtp, int read_flag)\n   /* Check the action.  */\n \n   if (read_flag && dtp->u.p.current_unit->flags.action == ACTION_WRITE)\n-    generate_error (&dtp->common, ERROR_BAD_ACTION,\n-\t\t    \"Cannot read from file opened for WRITE\");\n+    {\n+      generate_error (&dtp->common, ERROR_BAD_ACTION,\n+\t\t      \"Cannot read from file opened for WRITE\");\n+      return;\n+    }\n \n   if (!read_flag && dtp->u.p.current_unit->flags.action == ACTION_READ)\n-    generate_error (&dtp->common, ERROR_BAD_ACTION,\n-\t\t    \"Cannot write to file opened for READ\");\n-\n-  if ((dtp->common.flags & IOPARM_LIBRETURN_MASK) != IOPARM_LIBRETURN_OK)\n-    return;\n+    {\n+      generate_error (&dtp->common, ERROR_BAD_ACTION,\n+\t\t      \"Cannot write to file opened for READ\");\n+      return;\n+    }\n \n   dtp->u.p.first_item = 1;\n \n@@ -1786,14 +1789,14 @@ data_transfer_init (st_parameter_dt *dtp, int read_flag)\n   if ((cf & IOPARM_DT_HAS_FORMAT) != 0)\n     parse_format (dtp);\n \n-  if ((dtp->common.flags & IOPARM_LIBRETURN_MASK) != IOPARM_LIBRETURN_OK)\n-    return;\n-\n   if (dtp->u.p.current_unit->flags.form == FORM_UNFORMATTED\n       && (cf & (IOPARM_DT_HAS_FORMAT | IOPARM_DT_LIST_FORMAT))\n \t != 0)\n-    generate_error (&dtp->common, ERROR_OPTION_CONFLICT,\n-\t\t    \"Format present for UNFORMATTED data transfer\");\n+    {\n+      generate_error (&dtp->common, ERROR_OPTION_CONFLICT,\n+\t\t      \"Format present for UNFORMATTED data transfer\");\n+      return;\n+    }\n \n   if ((cf & IOPARM_DT_HAS_NAMELIST_NAME) != 0 && dtp->u.p.ionml != NULL)\n      {\n@@ -1803,13 +1806,19 @@ data_transfer_init (st_parameter_dt *dtp, int read_flag)\n      }\n   else if (dtp->u.p.current_unit->flags.form == FORM_FORMATTED &&\n \t   !(cf & (IOPARM_DT_HAS_FORMAT | IOPARM_DT_LIST_FORMAT)))\n-    generate_error (&dtp->common, ERROR_OPTION_CONFLICT,\n-\t\t    \"Missing format for FORMATTED data transfer\");\n+    {\n+      generate_error (&dtp->common, ERROR_OPTION_CONFLICT,\n+\t\t      \"Missing format for FORMATTED data transfer\");\n+    }\n \n   if (is_internal_unit (dtp)\n       && dtp->u.p.current_unit->flags.form == FORM_UNFORMATTED)\n-    generate_error (&dtp->common, ERROR_OPTION_CONFLICT,\n-\t\t    \"Internal file cannot be accessed by UNFORMATTED data transfer\");\n+    {\n+      generate_error (&dtp->common, ERROR_OPTION_CONFLICT,\n+\t\t      \"Internal file cannot be accessed by UNFORMATTED \"\n+\t\t      \"data transfer\");\n+      return;\n+    }\n \n   /* Check the record or position number.  */\n \n@@ -1839,49 +1848,71 @@ data_transfer_init (st_parameter_dt *dtp, int read_flag)\n   if (dtp->u.p.advance_status != ADVANCE_UNSPECIFIED)\n     {\n       if (dtp->u.p.current_unit->flags.access == ACCESS_DIRECT)\n-\tgenerate_error (&dtp->common, ERROR_OPTION_CONFLICT,\n-\t\t\t\"ADVANCE specification conflicts with sequential access\");\n+\t{\n+\t  generate_error (&dtp->common, ERROR_OPTION_CONFLICT,\n+\t\t\t  \"ADVANCE specification conflicts with sequential access\");\n+\t  return;\n+\t}\n \n       if (is_internal_unit (dtp))\n-\tgenerate_error (&dtp->common, ERROR_OPTION_CONFLICT,\n-\t\t\t\"ADVANCE specification conflicts with internal file\");\n+\t{\n+\t  generate_error (&dtp->common, ERROR_OPTION_CONFLICT,\n+\t\t\t  \"ADVANCE specification conflicts with internal file\");\n+\t  return;\n+\t}\n \n       if ((cf & (IOPARM_DT_HAS_FORMAT | IOPARM_DT_LIST_FORMAT))\n \t  != IOPARM_DT_HAS_FORMAT)\n-\tgenerate_error (&dtp->common, ERROR_OPTION_CONFLICT,\n-\t\t\t\"ADVANCE specification requires an explicit format\");\n+\t{\n+\t  generate_error (&dtp->common, ERROR_OPTION_CONFLICT,\n+\t\t\t  \"ADVANCE specification requires an explicit format\");\n+\t  return;\n+\t}\n     }\n \n   if (read_flag)\n     {\n       if ((cf & IOPARM_EOR) != 0 && dtp->u.p.advance_status != ADVANCE_NO)\n-\tgenerate_error (&dtp->common, ERROR_MISSING_OPTION,\n-\t\t\t\"EOR specification requires an ADVANCE specification of NO\");\n+\t{\n+\t  generate_error (&dtp->common, ERROR_MISSING_OPTION,\n+\t\t\t  \"EOR specification requires an ADVANCE specification \"\n+\t\t\t  \"of NO\");\n+\t  return;\n+\t}\n \n       if ((cf & IOPARM_DT_HAS_SIZE) != 0 && dtp->u.p.advance_status != ADVANCE_NO)\n-\tgenerate_error (&dtp->common, ERROR_MISSING_OPTION,\n-\t\t\t\"SIZE specification requires an ADVANCE specification of NO\");\n-\n+\t{\n+\t  generate_error (&dtp->common, ERROR_MISSING_OPTION,\n+\t\t\t  \"SIZE specification requires an ADVANCE specification of NO\");\n+\t  return;\n+\t}\n     }\n   else\n     {\t\t\t\t/* Write constraints.  */\n       if ((cf & IOPARM_END) != 0)\n-\tgenerate_error (&dtp->common, ERROR_OPTION_CONFLICT,\n-\t\t\t\"END specification cannot appear in a write statement\");\n+\t{\n+\t  generate_error (&dtp->common, ERROR_OPTION_CONFLICT,\n+\t\t\t  \"END specification cannot appear in a write statement\");\n+\t  return;\n+\t}\n \n       if ((cf & IOPARM_EOR) != 0)\n-\tgenerate_error (&dtp->common, ERROR_OPTION_CONFLICT,\n-\t\t\t\"EOR specification cannot appear in a write statement\");\n+\t{\n+\t  generate_error (&dtp->common, ERROR_OPTION_CONFLICT,\n+\t\t\t  \"EOR specification cannot appear in a write statement\");\n+\t  return;\n+\t}\n \n       if ((cf & IOPARM_DT_HAS_SIZE) != 0)\n-\tgenerate_error (&dtp->common, ERROR_OPTION_CONFLICT,\n-\t\t\t\"SIZE specification cannot appear in a write statement\");\n+\t{\n+\t  generate_error (&dtp->common, ERROR_OPTION_CONFLICT,\n+\t\t\t  \"SIZE specification cannot appear in a write statement\");\n+\t  return;\n+\t}\n     }\n \n   if (dtp->u.p.advance_status == ADVANCE_UNSPECIFIED)\n     dtp->u.p.advance_status = ADVANCE_YES;\n-  if ((dtp->common.flags & IOPARM_LIBRETURN_MASK) != IOPARM_LIBRETURN_OK)\n-    return;\n \n   /* Sanity checks on the record number.  */\n   if ((cf & IOPARM_DT_HAS_REC) != 0)"}]}