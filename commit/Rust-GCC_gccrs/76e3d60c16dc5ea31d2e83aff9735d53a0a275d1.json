{"sha": "76e3d60c16dc5ea31d2e83aff9735d53a0a275d1", "node_id": "C_kwDOANBUbNoAKDc2ZTNkNjBjMTZkYzVlYTMxZDJlODNhZmY5NzM1ZDUzYTBhMjc1ZDE", "commit": {"author": {"name": "Jan Beulich", "email": "jbeulich@suse.com", "date": "2022-06-07T07:17:25Z"}, "committer": {"name": "Jan Beulich", "email": "jbeulich@suse.com", "date": "2022-06-07T07:17:25Z"}, "message": "x86-64: make \"length_vex\" also account for VEX.B use by register operand\n\nThe length attribute ought to be \"the (bounding maximum) length of an\ninstruction\" according to the comment next to its definition. A register\noperand encoded using the ModR/M.rm field will additionally use VEX.B\nfor encoding the highest bit of the register number. Hence for the high\n8 GPR registers as well as the [xy]mm{8..15} ones 3-byte VEX encoding\nmay be needed. Since it isn't known to the function calculating the\nlength which register goes where in the insn encoding, be conservative\nand assume a 3-byte VEX prefix whenever any such register operand is\npresent and there's no memory operand.\n\ngcc/\n\n\t* config/i386/i386.cc (ix86_attr_length_vex_default): Take REX.B\n\tinto account for reg-only insns.", "tree": {"sha": "591123830eb9c81f3a9e840c67090469bbf7aee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/591123830eb9c81f3a9e840c67090469bbf7aee9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76e3d60c16dc5ea31d2e83aff9735d53a0a275d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76e3d60c16dc5ea31d2e83aff9735d53a0a275d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76e3d60c16dc5ea31d2e83aff9735d53a0a275d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76e3d60c16dc5ea31d2e83aff9735d53a0a275d1/comments", "author": {"login": "jbeulich", "id": 5610135, "node_id": "MDQ6VXNlcjU2MTAxMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbeulich", "html_url": "https://github.com/jbeulich", "followers_url": "https://api.github.com/users/jbeulich/followers", "following_url": "https://api.github.com/users/jbeulich/following{/other_user}", "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions", "organizations_url": "https://api.github.com/users/jbeulich/orgs", "repos_url": "https://api.github.com/users/jbeulich/repos", "events_url": "https://api.github.com/users/jbeulich/events{/privacy}", "received_events_url": "https://api.github.com/users/jbeulich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbeulich", "id": 5610135, "node_id": "MDQ6VXNlcjU2MTAxMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbeulich", "html_url": "https://github.com/jbeulich", "followers_url": "https://api.github.com/users/jbeulich/followers", "following_url": "https://api.github.com/users/jbeulich/following{/other_user}", "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions", "organizations_url": "https://api.github.com/users/jbeulich/orgs", "repos_url": "https://api.github.com/users/jbeulich/repos", "events_url": "https://api.github.com/users/jbeulich/events{/privacy}", "received_events_url": "https://api.github.com/users/jbeulich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dd194e2ce201d057e4faaecc36d19e0d3695f57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dd194e2ce201d057e4faaecc36d19e0d3695f57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dd194e2ce201d057e4faaecc36d19e0d3695f57"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "3d189e124e4606597974f7e1c4526177fed5cc9b", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e3d60c16dc5ea31d2e83aff9735d53a0a275d1/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e3d60c16dc5ea31d2e83aff9735d53a0a275d1/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=76e3d60c16dc5ea31d2e83aff9735d53a0a275d1", "patch": "@@ -16820,7 +16820,8 @@ int\n ix86_attr_length_vex_default (rtx_insn *insn, bool has_0f_opcode,\n \t\t\t      bool has_vex_w)\n {\n-  int i;\n+  int i, reg_only = 2 + 1;\n+  bool has_mem = false;\n \n   /* Only 0f opcode can use 2 byte VEX prefix and  VEX W bit uses 3\n      byte VEX prefix.  */\n@@ -16840,16 +16841,23 @@ ix86_attr_length_vex_default (rtx_insn *insn, bool has_0f_opcode,\n \tif (GET_MODE (recog_data.operand[i]) == DImode\n \t    && GENERAL_REG_P (recog_data.operand[i]))\n \t  return 3 + 1;\n+\n+\t/* REX.B bit requires 3-byte VEX. Right here we don't know which\n+\t   operand will be encoded using VEX.B, so be conservative.  */\n+\tif (REX_INT_REGNO_P (recog_data.operand[i])\n+\t    || REX_SSE_REGNO_P (recog_data.operand[i]))\n+\t  reg_only = 3 + 1;\n       }\n-    else\n+    else if (MEM_P (recog_data.operand[i]))\n       {\n \t/* REX.X or REX.B bits use 3 byte VEX prefix.  */\n-\tif (MEM_P (recog_data.operand[i])\n-\t    && x86_extended_reg_mentioned_p (recog_data.operand[i]))\n+\tif (x86_extended_reg_mentioned_p (recog_data.operand[i]))\n \t  return 3 + 1;\n+\n+\thas_mem = true;\n       }\n \n-  return 2 + 1;\n+  return has_mem ? 2 + 1 : reg_only;\n }\n \f\n "}]}