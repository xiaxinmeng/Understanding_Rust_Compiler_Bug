{"sha": "7edb6247b8747757101145628e82aaaec4ac1384", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VkYjYyNDdiODc0Nzc1NzEwMTE0NTYyOGU4MmFhYWVjNGFjMTM4NA==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2011-01-19T22:57:47Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2011-01-19T22:57:47Z"}, "message": "re PR c++/47291 (ICE: SIGSEGV in size_binop_loc (fold-const.c:1427) with -g)\n\nFix PR c++/47291\n\ngcc/\n\tPR c++/47291\n\t* dwarf2out.c (generic_type_p, schedule_generic_params_dies_gen)\n\t(gen_scheduled_generic_parms_dies): New functions.\n\t(gen_struct_or_union_type_die): Schedule template parameters DIEs\n\tgeneration for the end of CU compilation.\n\t(dwarf2out_finish): Generate template parameters DIEs here.\n\ngcc/testsuite/\n\n\tPR c++/47291\n\t* g++.dg/debug/dwarf2/template-params-10.C: New test.\n\nFrom-SVN: r169036", "tree": {"sha": "9ac8184cce5ae01b7ba4b1252ac5dcc5e8f92a11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ac8184cce5ae01b7ba4b1252ac5dcc5e8f92a11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7edb6247b8747757101145628e82aaaec4ac1384", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7edb6247b8747757101145628e82aaaec4ac1384", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7edb6247b8747757101145628e82aaaec4ac1384", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7edb6247b8747757101145628e82aaaec4ac1384/comments", "author": null, "committer": null, "parents": [{"sha": "23d5ed5dcf5305653fc67dddf0a2ea53ca81add6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23d5ed5dcf5305653fc67dddf0a2ea53ca81add6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23d5ed5dcf5305653fc67dddf0a2ea53ca81add6"}], "stats": {"total": 93, "additions": 92, "deletions": 1}, "files": [{"sha": "51869a29a6584aa2dd5be9290b17213877f6af32", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edb6247b8747757101145628e82aaaec4ac1384/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edb6247b8747757101145628e82aaaec4ac1384/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7edb6247b8747757101145628e82aaaec4ac1384", "patch": "@@ -1,3 +1,12 @@\n+2011-01-19  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/47291\n+\t* dwarf2out.c (generic_type_p, schedule_generic_params_dies_gen)\n+    \t(gen_scheduled_generic_parms_dies): New functions.\n+    \t(gen_struct_or_union_type_die): Schedule template parameters DIEs\n+    \tgeneration for the end of CU compilation.\n+    \t(dwarf2out_finish): Generate template parameters DIEs here.\n+\n 2011-01-19  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/46240"}, {"sha": "2309297d2e1ac30658de45b081b9a0f7f57eeba9", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edb6247b8747757101145628e82aaaec4ac1384/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edb6247b8747757101145628e82aaaec4ac1384/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=7edb6247b8747757101145628e82aaaec4ac1384", "patch": "@@ -6196,6 +6196,12 @@ static GTY(()) struct dwarf_file_data * file_table_last_lookup;\n \n static GTY(()) VEC(die_arg_entry,gc) *tmpl_value_parm_die_table;\n \n+/* Instances of generic types for which we need to generate debug\n+   info that describe their generic parameters and arguments. That\n+   generation needs to happen once all types are properly laid out so\n+   we do it at the end of compilation.  */\n+static GTY(()) VEC(tree,gc) *generic_type_instances;\n+\n /* Offset from the \"steady-state frame pointer\" to the frame base,\n    within the current function.  */\n static HOST_WIDE_INT frame_pointer_fb_offset;\n@@ -6490,6 +6496,9 @@ static inline void add_AT_vms_delta (dw_die_ref, enum dwarf_attribute,\n \t\t\t\t     const char *, const char *);\n static void append_entry_to_tmpl_value_parm_die_table (dw_die_ref, tree);\n static void gen_remaining_tmpl_value_param_die_attribute (void);\n+static bool generic_type_p (tree);\n+static void schedule_generic_params_dies_gen (tree t);\n+static void gen_scheduled_generic_parms_dies (void);\n \n /* Section names used to hold DWARF debugging information.  */\n #ifndef DEBUG_INFO_SECTION\n@@ -20147,7 +20156,7 @@ gen_struct_or_union_type_die (tree type, dw_die_ref context_die,\n   /* Generate child dies for template paramaters.  */\n   if (debug_info_level > DINFO_LEVEL_TERSE\n       && COMPLETE_TYPE_P (type))\n-    gen_generic_params_dies (type);\n+    schedule_generic_params_dies_gen (type);\n \n   /* If this type has been completed, then give it a byte_size attribute and\n      then give a list of members.  */\n@@ -21574,6 +21583,33 @@ append_entry_to_tmpl_value_parm_die_table (dw_die_ref die, tree arg)\n \t\t &entry);\n }\n \n+/* Return TRUE if T is an instance of generic type, FALSE\n+   otherwise.  */\n+\n+static bool\n+generic_type_p (tree t)\n+{\n+  if (t == NULL_TREE || !TYPE_P (t))\n+    return false;\n+  return lang_hooks.get_innermost_generic_parms (t) != NULL_TREE;\n+}\n+\n+/* Schedule the generation of the generic parameter dies for the\n+  instance of generic type T. The proper generation itself is later\n+  done by gen_scheduled_generic_parms_dies. */\n+\n+static void\n+schedule_generic_params_dies_gen (tree t)\n+{\n+  if (!generic_type_p (t))\n+    return;\n+\n+  if (generic_type_instances == NULL)\n+    generic_type_instances = VEC_alloc (tree, gc, 256);\n+\n+  VEC_safe_push (tree, gc, generic_type_instances, t);\n+}\n+\n /* Add a DW_AT_const_value attribute to DIEs that were scheduled\n    by append_entry_to_tmpl_value_parm_die_table. This function must\n    be called after function DIEs have been generated.  */\n@@ -21591,6 +21627,24 @@ gen_remaining_tmpl_value_param_die_attribute (void)\n     }\n }\n \n+/* Generate generic parameters DIEs for instances of generic types\n+   that have been previously scheduled by\n+   schedule_generic_params_dies_gen. This function must be called\n+   after all the types of the CU have been laid out.  */\n+\n+static void\n+gen_scheduled_generic_parms_dies (void)\n+{\n+  unsigned i;\n+  tree t;\n+\n+  if (generic_type_instances == NULL)\n+    return;\n+  \n+  FOR_EACH_VEC_ELT (tree, generic_type_instances, i, t)\n+    gen_generic_params_dies (t);\n+}\n+\n \n /* Replace DW_AT_name for the decl with name.  */\n \n@@ -23153,6 +23207,7 @@ dwarf2out_finish (const char *filename)\n   htab_t comdat_type_table;\n   unsigned int i;\n \n+  gen_scheduled_generic_parms_dies ();\n   gen_remaining_tmpl_value_param_die_attribute ();\n \n   /* Add the name for the main input file now.  We delayed this from"}, {"sha": "07b41c8299edf40b5a247ddf286a107695dad908", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edb6247b8747757101145628e82aaaec4ac1384/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edb6247b8747757101145628e82aaaec4ac1384/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7edb6247b8747757101145628e82aaaec4ac1384", "patch": "@@ -1,3 +1,8 @@\n+2011-01-19  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/47291\n+    \t* g++.dg/debug/dwarf2/template-params-10.C: New test.\n+\n 2011-01-19  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/46240"}, {"sha": "c12fe3990261d51e64330c964103b30239d43004", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/template-params-10.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edb6247b8747757101145628e82aaaec4ac1384/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edb6247b8747757101145628e82aaaec4ac1384/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-10.C?ref=7edb6247b8747757101145628e82aaaec4ac1384", "patch": "@@ -0,0 +1,22 @@\n+// Origin PR c++/47291\n+// { dg-options \"-g -dA\" }\n+// { dg-do compile }\n+\n+struct S;\n+template< int S::* cst> struct D {};\n+\n+struct S\n+{\n+  int i;\n+  D < &S::i > di; //<-- folding &S::i was failing\n+                  // because i has no offset as S is not laid out yet\n+};\n+\n+int\n+main()\n+{\n+  S s;\n+  return s.i;\n+}\n+\n+// { dg-final { scan-assembler-times \"DIE \\\\(\\[^\\n\\r\\]*\\\\) DW_TAG_template_value_param\" 1 } }"}]}