{"sha": "56f503b88a240f1d77c8d6564656bc22269b4842", "node_id": "C_kwDOANBUbNoAKDU2ZjUwM2I4OGEyNDBmMWQ3N2M4ZDY1NjQ2NTZiYzIyMjY5YjQ4NDI", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-22T11:43:53Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-22T11:55:34Z"}, "message": "Qualified paths can have an optional as clause\n\nQualified paths can look like <dyn T>::bla with an associated impl block\nfor dynamic trait objects. If we implement similar fine grained visitors\nthat we use in the HIR this will help solve issues like this where we have\nmissing visitors.\n\nFixes #1249", "tree": {"sha": "976a9fa43b737d776185a7d91a0621cf184f9f31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/976a9fa43b737d776185a7d91a0621cf184f9f31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56f503b88a240f1d77c8d6564656bc22269b4842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56f503b88a240f1d77c8d6564656bc22269b4842", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56f503b88a240f1d77c8d6564656bc22269b4842", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56f503b88a240f1d77c8d6564656bc22269b4842/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dea70e1dafa603b2327bfb936d26fac95f46069", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dea70e1dafa603b2327bfb936d26fac95f46069", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dea70e1dafa603b2327bfb936d26fac95f46069"}], "stats": {"total": 73, "additions": 66, "deletions": 7}, "files": [{"sha": "b139c6a87202664bf45875c57b16bde7aec69db2", "filename": "gcc/rust/resolve/rust-ast-resolve-path.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f503b88a240f1d77c8d6564656bc22269b4842/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f503b88a240f1d77c8d6564656bc22269b4842/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc?ref=56f503b88a240f1d77c8d6564656bc22269b4842", "patch": "@@ -242,8 +242,9 @@ void\n ResolvePath::resolve_path (AST::QualifiedPathInExpression *expr)\n {\n   AST::QualifiedPathType &root_segment = expr->get_qualified_path_type ();\n-  ResolveType::go (&root_segment.get_as_type_path ());\n   ResolveType::go (root_segment.get_type ().get ());\n+  if (root_segment.has_as_clause ())\n+    ResolveType::go (&root_segment.get_as_type_path ());\n \n   for (auto &segment : expr->get_segments ())\n     {"}, {"sha": "6b08613755a04ed7ca919a895311948e55557b68", "filename": "gcc/rust/resolve/rust-ast-resolve-type.cc", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f503b88a240f1d77c8d6564656bc22269b4842/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f503b88a240f1d77c8d6564656bc22269b4842/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc?ref=56f503b88a240f1d77c8d6564656bc22269b4842", "patch": "@@ -477,6 +477,27 @@ ResolveTypeToCanonicalPath::visit (AST::SliceType &type)\n     }\n }\n \n+void\n+ResolveTypeToCanonicalPath::visit (AST::TraitObjectTypeOneBound &type)\n+{\n+  CanonicalPath path = CanonicalPath::create_empty ();\n+  bool ok\n+    = ResolveTypeToCanonicalPath::go (&type.get_trait_bound ().get_type_path (),\n+\t\t\t\t      path);\n+  if (ok)\n+    {\n+      std::string slice_path = \"<dyn \" + path.get () + \">\";\n+      result = CanonicalPath::new_seg (type.get_node_id (), slice_path);\n+    }\n+}\n+\n+void\n+ResolveTypeToCanonicalPath::visit (AST::TraitObjectType &type)\n+{\n+  // FIXME is this actually allowed? dyn A+B\n+  gcc_unreachable ();\n+}\n+\n ResolveTypeToCanonicalPath::ResolveTypeToCanonicalPath ()\n   : ResolverBase (), result (CanonicalPath::create_empty ())\n {}"}, {"sha": "5a71268c0d446db816140fed76dc83840554eb99", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f503b88a240f1d77c8d6564656bc22269b4842/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f503b88a240f1d77c8d6564656bc22269b4842/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=56f503b88a240f1d77c8d6564656bc22269b4842", "patch": "@@ -242,6 +242,10 @@ class ResolveTypeToCanonicalPath : public ResolverBase\n \n   void visit (AST::SliceType &type) override;\n \n+  void visit (AST::TraitObjectTypeOneBound &type) override;\n+\n+  void visit (AST::TraitObjectType &type) override;\n+\n private:\n   ResolveTypeToCanonicalPath ();\n "}, {"sha": "84f3b6ea6e61f0492231184977eceb5229db1b10", "filename": "gcc/rust/typecheck/rust-hir-type-check-path.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f503b88a240f1d77c8d6564656bc22269b4842/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f503b88a240f1d77c8d6564656bc22269b4842/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc?ref=56f503b88a240f1d77c8d6564656bc22269b4842", "patch": "@@ -34,13 +34,7 @@ TypeCheckExpr::visit (HIR::QualifiedPathInExpression &expr)\n \n   if (!qual_path_type.has_as_clause ())\n     {\n-      // then this is just a normal path-in-expression\n       NodeId root_resolved_node_id = UNKNOWN_NODEID;\n-      bool ok = resolver->lookup_resolved_type (\n-\tqual_path_type.get_type ()->get_mappings ().get_nodeid (),\n-\t&root_resolved_node_id);\n-      rust_assert (ok);\n-\n       resolve_segments (root_resolved_node_id, expr.get_segments (), 0, root,\n \t\t\texpr.get_mappings (), expr.get_locus ());\n       return;"}, {"sha": "072204ea877c255e18fefdcfca8e5e5f318cc6a6", "filename": "gcc/testsuite/rust/execute/torture/issue-1249.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f503b88a240f1d77c8d6564656bc22269b4842/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1249.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f503b88a240f1d77c8d6564656bc22269b4842/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1249.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1249.rs?ref=56f503b88a240f1d77c8d6564656bc22269b4842", "patch": "@@ -0,0 +1,39 @@\n+// { dg-options \"-w\" }\n+// { dg-output \"1\\n2\\n\" }\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+trait T {\n+    fn foo(&self);\n+}\n+\n+impl dyn T {\n+    fn bar(&self) {\n+        unsafe {\n+            let a = \"1\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf(c);\n+        }\n+        self.foo()\n+    }\n+}\n+\n+struct S;\n+impl T for S {\n+    fn foo(&self) {\n+        unsafe {\n+            let a = \"2\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+            printf(c);\n+        }\n+    }\n+}\n+\n+pub fn main() -> i32 {\n+    <dyn T>::bar(&S);\n+    0\n+}"}]}