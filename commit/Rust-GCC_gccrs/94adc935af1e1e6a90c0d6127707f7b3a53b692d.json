{"sha": "94adc935af1e1e6a90c0d6127707f7b3a53b692d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRhZGM5MzVhZjFlMWU2YTkwYzBkNjEyNzcwN2Y3YjNhNTNiNjkyZA==", "commit": {"author": {"name": "Li Jia He", "email": "helijia@linux.ibm.com", "date": "2019-05-06T06:00:03Z"}, "committer": {"name": "Li Jia He", "email": "helijia@gcc.gnu.org", "date": "2019-05-06T06:00:03Z"}, "message": "Fix a typo in two_value_replacement function\n\nGCC revision 267634 implemented two_value_replacement function.\nHowever, a typo occurred during the parameter check, which caused\nus to miss some optimizations.\n\nThe intent of the code might be to check that the input parameters\nare const int and their difference is one.  However, when I read\nthe code, I found that it is wrong to detect whether an input data\nplus one is equal to itself.  This could be a typo.\n\n2019-05-06  Li Jia He  <helijia@linux.ibm.com>\n\n\t* tree-ssa-phiopt.c (two_value_replacement): Fix a typo in parameter\n\tdetection.\n\t* gcc.dg/tree-ssa/pr37508.c: Add the no-ssa-phiopt option to skip phi\n\toptimization.\n\t* gcc.dg/tree-ssa/pr88676-2.c: New testcase.\n\nFrom-SVN: r270894", "tree": {"sha": "c087347418aaae4e42d5073352a705e1fc506f7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c087347418aaae4e42d5073352a705e1fc506f7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94adc935af1e1e6a90c0d6127707f7b3a53b692d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94adc935af1e1e6a90c0d6127707f7b3a53b692d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94adc935af1e1e6a90c0d6127707f7b3a53b692d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94adc935af1e1e6a90c0d6127707f7b3a53b692d/comments", "author": {"login": "HLJ2009", "id": 18440836, "node_id": "MDQ6VXNlcjE4NDQwODM2", "avatar_url": "https://avatars.githubusercontent.com/u/18440836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HLJ2009", "html_url": "https://github.com/HLJ2009", "followers_url": "https://api.github.com/users/HLJ2009/followers", "following_url": "https://api.github.com/users/HLJ2009/following{/other_user}", "gists_url": "https://api.github.com/users/HLJ2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/HLJ2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HLJ2009/subscriptions", "organizations_url": "https://api.github.com/users/HLJ2009/orgs", "repos_url": "https://api.github.com/users/HLJ2009/repos", "events_url": "https://api.github.com/users/HLJ2009/events{/privacy}", "received_events_url": "https://api.github.com/users/HLJ2009/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3997383be17b15752a55f6af948ff3d33be57858", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3997383be17b15752a55f6af948ff3d33be57858", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3997383be17b15752a55f6af948ff3d33be57858"}], "stats": {"total": 49, "additions": 45, "deletions": 4}, "files": [{"sha": "1a4bcebb6ad4b01d17adcbfcdd4a19b840129beb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94adc935af1e1e6a90c0d6127707f7b3a53b692d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94adc935af1e1e6a90c0d6127707f7b3a53b692d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=94adc935af1e1e6a90c0d6127707f7b3a53b692d", "patch": "@@ -1,3 +1,8 @@\n+2019-05-06  Li Jia He  <helijia@linux.ibm.com>\n+\n+\t* tree-ssa-phiopt.c (two_value_replacement): Fix a typo in parameter\n+\tdetection.\n+\n 2019-05-03  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/89400"}, {"sha": "bf4a602d73d06c17a691c3032cc58aa372527658", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94adc935af1e1e6a90c0d6127707f7b3a53b692d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94adc935af1e1e6a90c0d6127707f7b3a53b692d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=94adc935af1e1e6a90c0d6127707f7b3a53b692d", "patch": "@@ -1,3 +1,9 @@\n+2019-05-06  Li Jia He  <helijia@linux.ibm.com>\n+\n+\t* gcc.dg/tree-ssa/pr37508.c: Add the no-ssa-phiopt option to skip phi\n+\toptimization.\n+\t* gcc.dg/tree-ssa/pr88676-2.c: New testcase.\n+\n 2019-05-05  Thomas Koenig <tkoenig@gcc.gnu.org>\n \n \tPR fortran/90344"}, {"sha": "a6def045de40b725b5e44f2c0c6c6ed97e9c61c2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr37508.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94adc935af1e1e6a90c0d6127707f7b3a53b692d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr37508.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94adc935af1e1e6a90c0d6127707f7b3a53b692d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr37508.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr37508.c?ref=94adc935af1e1e6a90c0d6127707f7b3a53b692d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-fre -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fno-ssa-phiopt -fno-tree-fre -fdump-tree-vrp1\" } */\n \n struct foo1 {\n   int i:1;\n@@ -22,7 +22,7 @@ int test2 (struct foo2 *x)\n {\n   if (x->i == 0)\n     return 1;\n-  else if (x->i == -1) /* This test is already folded to false by ccp1.  */\n+  else if (x->i == -1) /* This test is already optimized by ccp1 or phiopt1.  */\n     return 1;\n   return 0;\n }\n@@ -31,7 +31,7 @@ int test3 (struct foo1 *x)\n {\n   if (x->i == 0)\n     return 1;\n-  else if (x->i == 1) /* This test is already folded to false by fold.  */\n+  else if (x->i == 1) /* This test is already optimized by ccp1 or phiopt1.  */\n     return 1;\n   return 0;\n }"}, {"sha": "a549a1ef13dac3c4f5a47ab4e00d10d212aeb4cd", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr88676-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94adc935af1e1e6a90c0d6127707f7b3a53b692d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr88676-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94adc935af1e1e6a90c0d6127707f7b3a53b692d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr88676-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr88676-2.c?ref=94adc935af1e1e6a90c0d6127707f7b3a53b692d", "patch": "@@ -0,0 +1,30 @@\n+/* PR tree-optimization/88676 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-phiopt1\" } */\n+/* { dg-final { scan-tree-dump-not \" = PHI <\" \"optimized\" } } */\n+\n+struct foo1 {\n+  int i:1;\n+};\n+struct foo2 {\n+  unsigned i:1;\n+};\n+\n+int test1 (struct foo1 *x)\n+{\n+  if (x->i == 0)\n+    return 1;\n+  else if (x->i == 1)\n+    return 1;\n+  return 0;\n+}\n+\n+int test2 (struct foo2 *x)\n+{\n+  if (x->i == 0)\n+    return 1;\n+  else if (x->i == -1)\n+    return 1;\n+  return 0;\n+}\n+"}, {"sha": "90674a2f3c49a852b208daf032b2934c343c45be", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94adc935af1e1e6a90c0d6127707f7b3a53b692d/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94adc935af1e1e6a90c0d6127707f7b3a53b692d/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=94adc935af1e1e6a90c0d6127707f7b3a53b692d", "patch": "@@ -602,7 +602,7 @@ two_value_replacement (basic_block cond_bb, basic_block middle_bb,\n       || TREE_CODE (arg1) != INTEGER_CST\n       || (tree_int_cst_lt (arg0, arg1)\n \t  ? wi::to_widest (arg0) + 1 != wi::to_widest (arg1)\n-\t  : wi::to_widest (arg1) + 1 != wi::to_widest (arg1)))\n+\t  : wi::to_widest (arg1) + 1 != wi::to_widest (arg0)))\n     return false;\n \n   if (!empty_block_p (middle_bb))"}]}