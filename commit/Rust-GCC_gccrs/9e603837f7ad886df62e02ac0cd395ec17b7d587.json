{"sha": "9e603837f7ad886df62e02ac0cd395ec17b7d587", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU2MDM4MzdmN2FkODg2ZGY2MmUwMmFjMGNkMzk1ZWMxN2I3ZDU4Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-31T10:06:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-31T10:06:56Z"}, "message": "wide-int: Fix wi::to_mpz [PR98474]\n\nThe following testcase is miscompiled, because niter analysis miscomputes\nthe number of iterations to 0.\nThe problem is that niter analysis uses mpz_t (wonder why, wouldn't\nwidest_int do the same job?) and when wi::to_mpz is called e.g. on the\nTYPE_MAX_VALUE of __uint128_t, it initializes the mpz_t result with wrong\nvalue.\nwi::to_mpz has code to handle negative wide_ints in signed types by\ninverting all bits, importing to mpz and complementing it, which is fine,\nbut doesn't handle correctly the case when the wide_int's len (times\nHOST_BITS_PER_WIDE_INT) is smaller than precision when wi::neg_p.\nE.g. the 0xffffffffffffffffffffffffffffffff TYPE_MAX_VALUE is represented\nin wide_int as 0xffffffffffffffff len 1, and wi::to_mpz would create\n0xffffffffffffffff mpz_t value from that.\nThis patch handles it by adding the needed -1 host wide int words (and has\nalso code to deal with precision that aren't multiple of\nHOST_BITS_PER_WIDE_INT).\n\n2020-12-31  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/98474\n\t* wide-int.cc (wi::to_mpz): If wide_int has MSB set, but type\n\tis unsigned and excess negative, append set bits after len until\n\tprecision.\n\n\t* gcc.c-torture/execute/pr98474.c: New test.", "tree": {"sha": "9da4cd21f5a2b6fc9ed1905e309d9c52276e131d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9da4cd21f5a2b6fc9ed1905e309d9c52276e131d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e603837f7ad886df62e02ac0cd395ec17b7d587", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e603837f7ad886df62e02ac0cd395ec17b7d587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e603837f7ad886df62e02ac0cd395ec17b7d587", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e603837f7ad886df62e02ac0cd395ec17b7d587/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9ec9902d7f1a9bf7a2778c3fb8fc75bc2df2cef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9ec9902d7f1a9bf7a2778c3fb8fc75bc2df2cef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9ec9902d7f1a9bf7a2778c3fb8fc75bc2df2cef"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "8c287994580b236782c196ee9a2d412cd2444278", "filename": "gcc/testsuite/gcc.c-torture/execute/pr98474.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e603837f7ad886df62e02ac0cd395ec17b7d587/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr98474.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e603837f7ad886df62e02ac0cd395ec17b7d587/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr98474.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr98474.c?ref=9e603837f7ad886df62e02ac0cd395ec17b7d587", "patch": "@@ -0,0 +1,30 @@\n+/* PR tree-optimization/98474 */\n+\n+#ifdef __SIZEOF_INT128__\n+typedef __uint128_t T;\n+#define N (__SIZEOF_INT128__ * __CHAR_BIT__ / 2)\n+#else\n+typedef unsigned long long T;\n+#define N (__SIZEOF_LONG_LONG__ * __CHAR_BIT__ / 2)\n+#endif\n+\n+__attribute__ ((noipa)) void\n+foo (T *x)\n+{\n+  *x += ((T) 1) << (N + 1);\n+}\n+\n+int\n+main ()\n+{\n+  T a = ((T) 1) << (N + 1);\n+  T b = a;\n+  T n;\n+  foo (&b);\n+  n = b;\n+  while (n >= a)\n+    n -= a;\n+  if ((int) (n >> N) != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "447bac1765b090c77052c926974950ac60b47c87", "filename": "gcc/wide-int.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e603837f7ad886df62e02ac0cd395ec17b7d587/gcc%2Fwide-int.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e603837f7ad886df62e02ac0cd395ec17b7d587/gcc%2Fwide-int.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int.cc?ref=9e603837f7ad886df62e02ac0cd395ec17b7d587", "patch": "@@ -230,6 +230,20 @@ wi::to_mpz (const wide_int_ref &x, mpz_t result, signop sgn)\n       t[len - 1] = (unsigned HOST_WIDE_INT) v[len - 1] << excess >> excess;\n       mpz_import (result, len, -1, sizeof (HOST_WIDE_INT), 0, 0, t);\n     }\n+  else if (excess < 0 && wi::neg_p (x))\n+    {\n+      int extra\n+\t= (-excess + HOST_BITS_PER_WIDE_INT - 1) / HOST_BITS_PER_WIDE_INT;\n+      HOST_WIDE_INT *t = XALLOCAVEC (HOST_WIDE_INT, len + extra);\n+      for (int i = 0; i < len; i++)\n+\tt[i] = v[i];\n+      for (int i = 0; i < extra; i++)\n+\tt[len + i] = -1;\n+      excess = (-excess) % HOST_BITS_PER_WIDE_INT;\n+      if (excess)\n+\tt[len + extra - 1] = (HOST_WIDE_INT_1U << excess) - 1;\n+      mpz_import (result, len + extra, -1, sizeof (HOST_WIDE_INT), 0, 0, t);\n+    }\n   else\n     mpz_import (result, len, -1, sizeof (HOST_WIDE_INT), 0, 0, v);\n }"}]}