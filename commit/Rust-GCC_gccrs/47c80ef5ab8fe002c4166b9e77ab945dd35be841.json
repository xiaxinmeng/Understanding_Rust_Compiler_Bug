{"sha": "47c80ef5ab8fe002c4166b9e77ab945dd35be841", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdjODBlZjVhYjhmZTAwMmM0MTY2YjllNzdhYjk0NWRkMzViZTg0MQ==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2014-06-23T21:52:31Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2014-06-23T21:52:31Z"}, "message": "re PR middle-end/39284 (Computed gotos combined too aggressively)\n\n        PR target/39284\n        * passes.def (peephole2): Move peephole2 pass before\n        before sched2 pass.\n        * config/i386/i386.md (peehole2): Combine memories\n        and indirect jumps.\n\nFrom-SVN: r211919", "tree": {"sha": "27a570c7008aafb5336eab029fece919f57bb6eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27a570c7008aafb5336eab029fece919f57bb6eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47c80ef5ab8fe002c4166b9e77ab945dd35be841", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47c80ef5ab8fe002c4166b9e77ab945dd35be841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47c80ef5ab8fe002c4166b9e77ab945dd35be841", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47c80ef5ab8fe002c4166b9e77ab945dd35be841/comments", "author": null, "committer": null, "parents": [{"sha": "9b7a5864abed3d317b8e4b0a37b3998848e7c81b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b7a5864abed3d317b8e4b0a37b3998848e7c81b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b7a5864abed3d317b8e4b0a37b3998848e7c81b"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "7d7bd2538a4f6ec8a4121251cecd3198c7e29e33", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c80ef5ab8fe002c4166b9e77ab945dd35be841/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c80ef5ab8fe002c4166b9e77ab945dd35be841/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47c80ef5ab8fe002c4166b9e77ab945dd35be841", "patch": "@@ -1,3 +1,11 @@\n+2014-06-23  Kai Tietz  <ktietz@redhat.com>\n+\n+\tPR target/39284\n+\t* passes.def (peephole2): Move peephole2 pass before\n+\tbefore sched2 pass.\n+\t* config/i386/i386.md (peehole2): Combine memories\n+\tand indirect jumps.\n+\n 2014-06-23  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-loop.c (gate_loop): New function."}, {"sha": "695b981f2e1251a0dc692576a44d5372757fbc58", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c80ef5ab8fe002c4166b9e77ab945dd35be841/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c80ef5ab8fe002c4166b9e77ab945dd35be841/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=47c80ef5ab8fe002c4166b9e77ab945dd35be841", "patch": "@@ -11466,6 +11466,15 @@\n \t\t\t    (match_dup 4)))\n \t      (unspec [(const_int 0)] UNSPEC_PEEPSIB)])])\n \n+;; Combining simple memory jump instruction\n+\n+(define_peephole2\n+  [(set (match_operand:W 0 \"register_operand\")\n+        (match_operand:W 1 \"memory_operand\"))\n+   (set (pc) (match_dup 0))]\n+  \"!TARGET_X32 && peep2_reg_dead_p (2, operands[0])\"\n+  [(set (pc) (match_dup 1))])\n+\n ;; Call subroutine, returning value in operand 0\n \n (define_expand \"call_value\""}, {"sha": "729be9cc90a8f68fb0ca5f59ac777715daa30f65", "filename": "gcc/passes.def", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c80ef5ab8fe002c4166b9e77ab945dd35be841/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c80ef5ab8fe002c4166b9e77ab945dd35be841/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=47c80ef5ab8fe002c4166b9e77ab945dd35be841", "patch": "@@ -394,13 +394,20 @@ along with GCC; see the file COPYING3.  If not see\n \t  NEXT_PASS (pass_rtl_dse2);\n \t  NEXT_PASS (pass_stack_adjustments);\n \t  NEXT_PASS (pass_jump2);\n-\t  NEXT_PASS (pass_peephole2);\n \t  NEXT_PASS (pass_if_after_reload);\n \t  NEXT_PASS (pass_regrename);\n \t  NEXT_PASS (pass_cprop_hardreg);\n \t  NEXT_PASS (pass_fast_rtl_dce);\n \t  NEXT_PASS (pass_duplicate_computed_gotos);\n \t  NEXT_PASS (pass_reorder_blocks);\n+\t  /* We need to run peephole2 pass after the duplicate-\n+\t     compute-gotos and the reorder-blocks pass (PR/39284).\n+\t     We have a single indirect branch in the entire function\n+\t     before duplicate-compute-gotos pass.  This vastly reduces\n+\t     the size of the CFG.\n+\t     For preventing to run peephole2 pass twice, its run after\n+\t     the jump2 got removed.  */\n+\t  NEXT_PASS (pass_peephole2);\n \t  NEXT_PASS (pass_branch_target_load_optimize2);\n \t  NEXT_PASS (pass_leaf_regs);\n \t  NEXT_PASS (pass_split_before_sched2);"}]}