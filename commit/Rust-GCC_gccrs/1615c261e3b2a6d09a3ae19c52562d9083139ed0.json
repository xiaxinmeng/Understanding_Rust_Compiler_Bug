{"sha": "1615c261e3b2a6d09a3ae19c52562d9083139ed0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYxNWMyNjFlM2IyYTZkMDlhM2FlMTljNTI1NjJkOTA4MzEzOWVkMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-12-05T14:41:47Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-12-05T14:41:47Z"}, "message": "vms.h (ADA_LONG_TYPE_SIZE): New macro.\n\n\t* config/alpha/vms.h (ADA_LONG_TYPE_SIZE): New macro.\n\t* doc/tm.texi (ADA_LONG_TYPE_SIZE): Document it.\n\nFrom-SVN: r47676", "tree": {"sha": "388a447bc5bbc7fb6d661b7b2e505cd64496ed2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/388a447bc5bbc7fb6d661b7b2e505cd64496ed2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1615c261e3b2a6d09a3ae19c52562d9083139ed0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1615c261e3b2a6d09a3ae19c52562d9083139ed0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1615c261e3b2a6d09a3ae19c52562d9083139ed0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1615c261e3b2a6d09a3ae19c52562d9083139ed0/comments", "author": null, "committer": null, "parents": [{"sha": "1218665b70c0577046f86c7d950832dd703a67d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1218665b70c0577046f86c7d950832dd703a67d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1218665b70c0577046f86c7d950832dd703a67d1"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "ef9ab80e18d85ee5204256a81dc893a14f9bca2e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1615c261e3b2a6d09a3ae19c52562d9083139ed0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1615c261e3b2a6d09a3ae19c52562d9083139ed0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1615c261e3b2a6d09a3ae19c52562d9083139ed0", "patch": "@@ -1,3 +1,8 @@\n+Wed Dec  5 09:33:39 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* config/alpha/vms.h (ADA_LONG_TYPE_SIZE): New macro.\n+\t* doc/tm.texi (ADA_LONG_TYPE_SIZE): Document it.\n+\n 2001-12-05  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcse.c (store_killed_in_insn): Consider pure calls"}, {"sha": "61b2fb6d76e8d24668acce9b1f84ce2aba138f2d", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1615c261e3b2a6d09a3ae19c52562d9083139ed0/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1615c261e3b2a6d09a3ae19c52562d9083139ed0/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=1615c261e3b2a6d09a3ae19c52562d9083139ed0", "patch": "@@ -80,9 +80,10 @@ Boston, MA 02111-1307, USA.  */\n #define STRUCT_VALUE 0\n #undef PCC_STATIC_STRUCT_RETURN\n \n-/* \"long\" is 32 bits.  */\n+/* \"long\" is 32 bits, but 64 bits for Ada.  */\n #undef LONG_TYPE_SIZE\n #define LONG_TYPE_SIZE 32\n+#define ADA_LONG_TYPE_SIZE 64\n \n /* Pointer is 32 bits but the hardware has 64-bit addresses, sign extended.  */\n #undef POINTER_SIZE"}, {"sha": "7932811a8bd683dd6739a825e7533b335af414c0", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1615c261e3b2a6d09a3ae19c52562d9083139ed0/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1615c261e3b2a6d09a3ae19c52562d9083139ed0/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=1615c261e3b2a6d09a3ae19c52562d9083139ed0", "patch": "@@ -1372,6 +1372,14 @@ unit.)\n A C expression for the size in bits of the type @code{long} on the\n target machine.  If you don't define this, the default is one word.\n \n+@findex ADA_LONG_TYPE_SIZE\n+@item ADA_LONG_TYPE_SIZE\n+On some machines, the size used for the Ada equivalent of the type\n+@code{long} by a native Ada compiler differs from that used by C.  In\n+that situation, define this macro to be a C expression to be used for\n+the size of that type.  If you don't define this, the default is the\n+value of @code{LONG_TYPE_SIZE}.\n+\n @findex MAX_LONG_TYPE_SIZE\n @item MAX_LONG_TYPE_SIZE\n Maximum number for the size in bits of the type @code{long} on the"}]}