{"sha": "4e9bb42b21a8399500c0021fa991a79c8c0574fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU5YmI0MmIyMWE4Mzk5NTAwYzAwMjFmYTk5MWE3OWM4YzA1NzRmYQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2002-03-13T02:03:36Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-03-13T02:03:36Z"}, "message": "expmed.c (store_bit_field): Reset alias set for memory.\n\n2002-03-13  Aldy Hernandez  <aldyh@redhat.com>\n\n        * expmed.c (store_bit_field): Reset alias set for memory.\n        (extract_bit_field): Same.\n\nFrom-SVN: r50706", "tree": {"sha": "1b39819b157fcddeed86c2fa50b7e410dac867f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b39819b157fcddeed86c2fa50b7e410dac867f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e9bb42b21a8399500c0021fa991a79c8c0574fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e9bb42b21a8399500c0021fa991a79c8c0574fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e9bb42b21a8399500c0021fa991a79c8c0574fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e9bb42b21a8399500c0021fa991a79c8c0574fa/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f9834e8055d89ec753d6bea65cb734dcd8f0dc0"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "761ecb34c8fdab4f9f84203e0afd073fb6b5ba39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9bb42b21a8399500c0021fa991a79c8c0574fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9bb42b21a8399500c0021fa991a79c8c0574fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e9bb42b21a8399500c0021fa991a79c8c0574fa", "patch": "@@ -1,3 +1,8 @@\n+2002-03-13  Aldy Hernandez  <aldyh@redhat.com>\n+\n+        * expmed.c (store_bit_field): Reset alias set for memory.\n+        (extract_bit_field): Same.\n+\n 2002-03-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* c-common.c (c_tree_code_type, c_tree_code_length,"}, {"sha": "48a3ef602785e144c835e506baf8572addb5a7c6", "filename": "gcc/expmed.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9bb42b21a8399500c0021fa991a79c8c0574fa/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9bb42b21a8399500c0021fa991a79c8c0574fa/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=4e9bb42b21a8399500c0021fa991a79c8c0574fa", "patch": "@@ -392,6 +392,15 @@ store_bit_field (str_rtx, bitsize, bitnum, fieldmode, value, total_size)\n       }\n   }\n \n+  /* We may be accessing data outside the field, which means\n+     we can alias adjacent data.  */\n+  if (GET_CODE (op0) == MEM)\n+    {\n+      op0 = shallow_copy_rtx (op0);\n+      set_mem_alias_set (op0, 0);\n+      set_mem_expr (op0, 0);\n+    }\n+\n   /* If OP0 is a register, BITPOS must count within a word.\n      But as we have it, it counts within whatever size OP0 now has.\n      On a bigendian machine, these are not the same, so convert.  */\n@@ -1069,6 +1078,15 @@ extract_bit_field (str_rtx, bitsize, bitnum, unsignedp,\n       }\n   }\n \n+  /* We may be accessing data outside the field, which means\n+     we can alias adjacent data.  */\n+  if (GET_CODE (op0) == MEM)\n+    {\n+      op0 = shallow_copy_rtx (op0);\n+      set_mem_alias_set (op0, 0);\n+      set_mem_expr (op0, 0);\n+    }\n+\n   /* ??? We currently assume TARGET is at least as big as BITSIZE.\n      If that's wrong, the solution is to test for it and set TARGET to 0\n      if needed.  */"}]}