{"sha": "cecbf6e2b3fcef0f3bd4131d78775e65e5bdaf4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VjYmY2ZTJiM2ZjZWYwZjNiZDQxMzFkNzg3NzVlNjVlNWJkYWY0YQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1998-05-21T11:52:31Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1998-05-21T11:52:31Z"}, "message": "reload1.c (reload_reg_free_for_value_p): Fix RELOAD_FOR_INPUT end of lifetime and RELOAD_FOR_OUTPUT start of lifetime.\n\n\t* reload1.c (reload_reg_free_for_value_p): Fix RELOAD_FOR_INPUT\n\tend of lifetime and RELOAD_FOR_OUTPUT start of lifetime.\n\nFrom-SVN: r19929", "tree": {"sha": "c803c0ffc785816b084c3742aee12692acaf1724", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c803c0ffc785816b084c3742aee12692acaf1724"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cecbf6e2b3fcef0f3bd4131d78775e65e5bdaf4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cecbf6e2b3fcef0f3bd4131d78775e65e5bdaf4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cecbf6e2b3fcef0f3bd4131d78775e65e5bdaf4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cecbf6e2b3fcef0f3bd4131d78775e65e5bdaf4a/comments", "author": null, "committer": null, "parents": [{"sha": "b52ce03da5fcaf93480c6f0d95e9be500a97fb33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b52ce03da5fcaf93480c6f0d95e9be500a97fb33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b52ce03da5fcaf93480c6f0d95e9be500a97fb33"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "1bca42dae8c745de89ae321dac6a26217f30d8a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecbf6e2b3fcef0f3bd4131d78775e65e5bdaf4a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecbf6e2b3fcef0f3bd4131d78775e65e5bdaf4a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cecbf6e2b3fcef0f3bd4131d78775e65e5bdaf4a", "patch": "@@ -1,3 +1,8 @@\n+Thu May 21 19:50:13 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* reload1.c (reload_reg_free_for_value_p): Fix RELOAD_FOR_INPUT\n+\tend of lifetime and RELOAD_FOR_OUTPUT start of lifetime.\n+\n Thu May 21 19:32:27 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* combine.c (nonzero_bits): For paradoxical subregs, take"}, {"sha": "e0602bed2aee0c1c68655532df4bfc170c94151e", "filename": "gcc/reload1.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecbf6e2b3fcef0f3bd4131d78775e65e5bdaf4a/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecbf6e2b3fcef0f3bd4131d78775e65e5bdaf4a/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=cecbf6e2b3fcef0f3bd4131d78775e65e5bdaf4a", "patch": "@@ -5003,7 +5003,14 @@ reload_reg_free_for_value_p (regno, opnum, type, value)\n      monotonic.\n      Some reload types use different 'buckets' for each operand.\n      So there are MAX_RECOG_OPERANDS different time values for each\n-     such reload type.  */\n+     such reload type.\n+     We compute TIME1 as the time when the register for the prospective\n+     new reload ceases to be live, and TIME2 for each existing\n+     reload as the time when that the reload register of that reload\n+     becomes live.\n+     Where there is little to be gained by exact lifetime calculations,\n+     we just make conservative assumptions, i.e. a longer lifetime;\n+     this is done in the 'default:' cases.  */\n   switch (type)\n     {\n     case RELOAD_FOR_OTHER_ADDRESS:\n@@ -5022,10 +5029,12 @@ reload_reg_free_for_value_p (regno, opnum, type, value)\n       time1 = opnum * 4 + 2;\n       break;\n     case RELOAD_FOR_INPUT:\n-      time1 = opnum * 4 + 3;\n+      /* All RELOAD_FOR_INPUT reloads remain live till just before the\n+\t instruction is executed.  */\n+      time1 = (MAX_RECOG_OPERANDS - 1) * 4 + 3;\n       break;\n     /* opnum * 4 + 3 < opnum * 4 + 4\n-       <= (MAX_RECOG_OPERAND - 1) * 4 + 4 == MAX_RECOG_OPERAND * 4 */\n+       <= (MAX_RECOG_OPERANDS - 1) * 4 + 4 == MAX_RECOG_OPERANDS * 4 */\n     case RELOAD_FOR_OUTPUT_ADDRESS:\n       time1 = MAX_RECOG_OPERANDS * 4 + opnum;\n       break;\n@@ -5057,10 +5066,13 @@ reload_reg_free_for_value_p (regno, opnum, type, value)\n \t    case RELOAD_FOR_INPUT:\n \t      time2 = reload_opnum[i] * 4 + 3;\n \t      break;\n-\t    /* RELOAD_FOR_OUTPUT and RELOAD_FOR_OUTPUT_ADDRESS reloads\n-\t       for identical operand number conflict with each other, so\n-\t       assign them the same time value.  */\n \t    case RELOAD_FOR_OUTPUT:\n+\t    /* All RELOAD_FOR_OUTPUT reloads become live just after the\n+\t       instruction is executed.  */\n+\t      time2 = MAX_RECOG_OPERANDS * 4;\n+\t      break;\n+\t    /* The first RELOAD_FOR_OUTPUT_ADDRESS reload conflicts with the\n+\t       RELOAD_FOR_OUTPUT reloads, so assign it the same time value.  */\n \t    case RELOAD_FOR_OUTPUT_ADDRESS:\n \t      time2 = MAX_RECOG_OPERANDS * 4 + reload_opnum[i];\n \t      break;"}]}