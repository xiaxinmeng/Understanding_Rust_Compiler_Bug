{"sha": "03934a56326d43c1c8bb185979a90830fd25f880", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM5MzRhNTYzMjZkNDNjMWM4YmIxODU5NzlhOTA4MzBmZDI1Zjg4MA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-03-23T18:41:07Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-03-23T18:41:07Z"}, "message": "syscall: Fix errno handling in syscall.Syscall and friends.\n\nFrom-SVN: r185746", "tree": {"sha": "2678a8c20eecaa458b104436ceab5777877c774a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2678a8c20eecaa458b104436ceab5777877c774a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03934a56326d43c1c8bb185979a90830fd25f880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03934a56326d43c1c8bb185979a90830fd25f880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03934a56326d43c1c8bb185979a90830fd25f880", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03934a56326d43c1c8bb185979a90830fd25f880/comments", "author": null, "committer": null, "parents": [{"sha": "df32732b0270070f98a99a5fcf7c0ebd83a2059e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df32732b0270070f98a99a5fcf7c0ebd83a2059e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df32732b0270070f98a99a5fcf7c0ebd83a2059e"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "d4bff9efc9c15492b2ae2eaac7bffdd287226881", "filename": "libgo/go/syscall/syscall_unix.go", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03934a56326d43c1c8bb185979a90830fd25f880/libgo%2Fgo%2Fsyscall%2Fsyscall_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03934a56326d43c1c8bb185979a90830fd25f880/libgo%2Fgo%2Fsyscall%2Fsyscall_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsyscall_unix.go?ref=03934a56326d43c1c8bb185979a90830fd25f880", "patch": "@@ -31,6 +31,7 @@ const darwinAMD64 = runtime.GOOS == \"darwin\" && runtime.GOARCH == \"amd64\"\n // expects a 32-bit one.\n func Syscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno) {\n \tEntersyscall()\n+\tSetErrno(0)\n \tvar r uintptr\n \tif unsafe.Sizeof(r) == 4 {\n \t\tr1 := c_syscall32(int32(trap), int32(a1), int32(a2), int32(a3), 0, 0, 0)\n@@ -46,6 +47,7 @@ func Syscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno) {\n \n func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno) {\n \tEntersyscall()\n+\tSetErrno(0)\n \tvar r uintptr\n \tif unsafe.Sizeof(r) == 4 {\n \t\tr1 := c_syscall32(int32(trap), int32(a1), int32(a2), int32(a3),\n@@ -63,6 +65,7 @@ func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno)\n \n func RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno) {\n \tvar r uintptr\n+\tSetErrno(0)\n \tif unsafe.Sizeof(r) == 4 {\n \t\tr1 := c_syscall32(int32(trap), int32(a1), int32(a2), int32(a3), 0, 0, 0)\n \t\tr = uintptr(r1)\n@@ -76,6 +79,7 @@ func RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno) {\n \n func RawSyscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno) {\n \tvar r uintptr\n+\tSetErrno(0)\n \tif unsafe.Sizeof(r) == 4 {\n \t\tr1 := c_syscall32(int32(trap), int32(a1), int32(a2), int32(a3),\n \t\t\tint32(a4), int32(a5), int32(a6))"}]}