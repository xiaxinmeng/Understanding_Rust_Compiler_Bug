{"sha": "cb4b6d170652b99b8aee2430737051cdc42b5517", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I0YjZkMTcwNjUyYjk5YjhhZWUyNDMwNzM3MDUxY2RjNDJiNTUxNw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2014-01-15T08:36:44Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2014-01-15T08:36:44Z"}, "message": "s390.c (s390_preferred_reload_class): Don't return ADDR_REGS for invalid symrefs in non-PIC code.\n\n2014-01-15  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* config/s390/s390.c (s390_preferred_reload_class): Don't return\n\tADDR_REGS for invalid symrefs in non-PIC code.\n\n2014-01-15  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* gcc.c-torture/compile/pr59803.c: New testcase.\n\nFrom-SVN: r206623", "tree": {"sha": "a7865eed1a9e633c4ac1eee4731c2dacee7f58b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7865eed1a9e633c4ac1eee4731c2dacee7f58b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb4b6d170652b99b8aee2430737051cdc42b5517", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb4b6d170652b99b8aee2430737051cdc42b5517", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb4b6d170652b99b8aee2430737051cdc42b5517", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb4b6d170652b99b8aee2430737051cdc42b5517/comments", "author": null, "committer": null, "parents": [{"sha": "2738b4c7e3ef411f52dd6664781c4cd8f5b901d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2738b4c7e3ef411f52dd6664781c4cd8f5b901d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2738b4c7e3ef411f52dd6664781c4cd8f5b901d4"}], "stats": {"total": 51, "additions": 47, "deletions": 4}, "files": [{"sha": "42c1344251cbf5f240b5dea581f9d50fac6b4e1e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb4b6d170652b99b8aee2430737051cdc42b5517/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb4b6d170652b99b8aee2430737051cdc42b5517/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb4b6d170652b99b8aee2430737051cdc42b5517", "patch": "@@ -1,3 +1,8 @@\n+2014-01-15  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* config/s390/s390.c (s390_preferred_reload_class): Don't return\n+\tADDR_REGS for invalid symrefs in non-PIC code.\n+\n 2014-01-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR other/58712"}, {"sha": "91f76f68aeac9d48a89558612a818af156a1739a", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb4b6d170652b99b8aee2430737051cdc42b5517/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb4b6d170652b99b8aee2430737051cdc42b5517/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=cb4b6d170652b99b8aee2430737051cdc42b5517", "patch": "@@ -3148,15 +3148,22 @@ s390_preferred_reload_class (rtx op, reg_class_t rclass)\n \t prefer ADDR_REGS.  If 'class' is not a superset\n \t of ADDR_REGS, e.g. FP_REGS, reject this reload.  */\n       case CONST:\n-\t/* A larl operand with odd addend will get fixed via secondary\n-\t   reload.  So don't request it to be pushed into literal\n-\t   pool.  */\n+\t/* Symrefs cannot be pushed into the literal pool with -fPIC\n+\t   so we *MUST NOT* return NO_REGS for these cases\n+\t   (s390_cannot_force_const_mem will return true).  \n+\n+\t   On the other hand we MUST return NO_REGS for symrefs with\n+\t   invalid addend which might have been pushed to the literal\n+\t   pool (no -fPIC).  Usually we would expect them to be\n+\t   handled via secondary reload but this does not happen if\n+\t   they are used as literal pool slot replacement in reload\n+\t   inheritance (see emit_input_reload_insns).  */\n \tif (TARGET_CPU_ZARCH\n \t    && GET_CODE (XEXP (op, 0)) == PLUS\n \t    && GET_CODE (XEXP (XEXP(op, 0), 0)) == SYMBOL_REF\n \t    && GET_CODE (XEXP (XEXP(op, 0), 1)) == CONST_INT)\n \t  {\n-\t    if (reg_class_subset_p (ADDR_REGS, rclass))\n+\t    if (flag_pic && reg_class_subset_p (ADDR_REGS, rclass))\n \t      return ADDR_REGS;\n \t    else\n \t      return NO_REGS;"}, {"sha": "7980dc3067d538091848bfc15e7a774b6e133a1d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb4b6d170652b99b8aee2430737051cdc42b5517/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb4b6d170652b99b8aee2430737051cdc42b5517/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cb4b6d170652b99b8aee2430737051cdc42b5517", "patch": "@@ -1,3 +1,7 @@\n+2014-01-15  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* gcc.c-torture/compile/pr59803.c: New testcase.\n+\n 2014-01-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/58943"}, {"sha": "d2b5d2098f5060e474dd0e2c68cc17a0c8fcd47c", "filename": "gcc/testsuite/gcc.c-torture/compile/pr59803.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb4b6d170652b99b8aee2430737051cdc42b5517/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr59803.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb4b6d170652b99b8aee2430737051cdc42b5517/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr59803.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr59803.c?ref=cb4b6d170652b99b8aee2430737051cdc42b5517", "patch": "@@ -0,0 +1,27 @@\n+/* PR target/59803 */\n+\n+extern void baz (void) __attribute__ ((__noreturn__));\n+struct A { int g, h; };\n+extern struct A a;\n+struct B { unsigned char i, j, k, l, m; };\n+int c, d, e;\n+static int f;\n+\n+void\n+foo (void)\n+{\n+  f = 1;\n+}\n+\n+void\n+bar (struct B *x)\n+{\n+  x->i = e;\n+  x->k = c;\n+  x->l = d;\n+  x->j = a.h;\n+  x->m = f;\n+  if (x->i != e) baz ();\n+  if (x->k != c) baz ();\n+  if (x->j != a.h) baz ();\n+}"}]}