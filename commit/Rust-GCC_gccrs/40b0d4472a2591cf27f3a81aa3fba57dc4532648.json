{"sha": "40b0d4472a2591cf27f3a81aa3fba57dc4532648", "node_id": "C_kwDOANBUbNoAKDQwYjBkNDQ3MmEyNTkxY2YyN2YzYTgxYWEzZmJhNTdkYzQ1MzI2NDg", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-01-17T19:32:30Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-01-17T19:32:30Z"}, "message": "libstdc++: Adjust fast_float's over/underflow behavior for conformance\n\nThis changes fast_float's handling of overflow/underflow to be\nconsistent with the standard: instead of returning errc{} and setting\nvalue to +-0 or +-infinity, just return errc::result_out_of_range and\ndon't modify value, as per [charconv.from.chars]/1.\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++17/fast_float/LOCAL_PATCHES: Update.\n\t* src/c++17/fast_float/fast_float.h (from_chars_advanced): In\n\tcase of over/underflow, return errc::result_out_of_range and don't\n\tmodify 'value'.", "tree": {"sha": "3d9005f8d25a592fb09c5f9d597e7879ac532dc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d9005f8d25a592fb09c5f9d597e7879ac532dc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40b0d4472a2591cf27f3a81aa3fba57dc4532648", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40b0d4472a2591cf27f3a81aa3fba57dc4532648", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40b0d4472a2591cf27f3a81aa3fba57dc4532648", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40b0d4472a2591cf27f3a81aa3fba57dc4532648/comments", "author": null, "committer": null, "parents": [{"sha": "f5c8b82512f9d3eda7e4c71853409d3ac6224777", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5c8b82512f9d3eda7e4c71853409d3ac6224777", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5c8b82512f9d3eda7e4c71853409d3ac6224777"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "71495d6728bf115bd4eaacc717e947de1ac8828e", "filename": "libstdc++-v3/src/c++17/fast_float/LOCAL_PATCHES", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b0d4472a2591cf27f3a81aa3fba57dc4532648/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffast_float%2FLOCAL_PATCHES", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b0d4472a2591cf27f3a81aa3fba57dc4532648/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffast_float%2FLOCAL_PATCHES", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffast_float%2FLOCAL_PATCHES?ref=40b0d4472a2591cf27f3a81aa3fba57dc4532648", "patch": "@@ -1 +1,2 @@\n r12-6647\n+r12-6648"}, {"sha": "97d289409441a0cab580457734080aa6b5a42141", "filename": "libstdc++-v3/src/c++17/fast_float/fast_float.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b0d4472a2591cf27f3a81aa3fba57dc4532648/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffast_float%2Ffast_float.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b0d4472a2591cf27f3a81aa3fba57dc4532648/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffast_float%2Ffast_float.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffast_float%2Ffast_float.h?ref=40b0d4472a2591cf27f3a81aa3fba57dc4532648", "patch": "@@ -2884,6 +2884,15 @@ from_chars_result from_chars_advanced(const char *first, const char *last,\n   // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),\n   // then we need to go the long way around again. This is very uncommon.\n   if(am.power2 < 0) { am = digit_comp<T>(pns, am); }\n+\n+  if((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {\n+    // In case of over/underflow, return result_out_of_range and don't modify value,\n+    // as per [charconv.from.chars]/1.  Note that LWG 3081 wants to modify value in\n+    // this case too.\n+    answer.ec = std::errc::result_out_of_range;\n+    return answer;\n+  }\n+\n   to_float(pns.negative, am, value);\n   return answer;\n }"}]}