{"sha": "9a1ea4b90728c19a0141fd9b6ab44a3c5ded5a7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWExZWE0YjkwNzI4YzE5YTAxNDFmZDliNmFiNDRhM2M1ZGVkNWE3Yw==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@linaro.org", "date": "2011-06-24T13:15:08Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2011-06-24T13:15:08Z"}, "message": "re PR target/49335 (ARM: Invalid assembler generated while compiling C++ code from 'codeblocks')\n\nFix PR target/49335\n\n2011-06-24  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n\n\tPR target/49335\n\t* config/arm/predicates.md (add_operator): New.\n\t* config/arm/arm.md (\"*arith_shiftsi\"): Fix for SP reg usage\n\tin Thumb2.\n\nFrom-SVN: r175375", "tree": {"sha": "2da037b88330aa430a1babad5bfcb36b727b71c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2da037b88330aa430a1babad5bfcb36b727b71c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a1ea4b90728c19a0141fd9b6ab44a3c5ded5a7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a1ea4b90728c19a0141fd9b6ab44a3c5ded5a7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a1ea4b90728c19a0141fd9b6ab44a3c5ded5a7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a1ea4b90728c19a0141fd9b6ab44a3c5ded5a7c/comments", "author": null, "committer": null, "parents": [{"sha": "23d11384dbf3b04e5dcbcf349bf34308ab8ec9ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23d11384dbf3b04e5dcbcf349bf34308ab8ec9ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23d11384dbf3b04e5dcbcf349bf34308ab8ec9ef"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "7eb822533330a252cd7a4c687d6e1ca27ff67407", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1ea4b90728c19a0141fd9b6ab44a3c5ded5a7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1ea4b90728c19a0141fd9b6ab44a3c5ded5a7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a1ea4b90728c19a0141fd9b6ab44a3c5ded5a7c", "patch": "@@ -1,3 +1,10 @@\n+2011-06-24  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n+\n+\tPR target/49335\n+\t* config/arm/predicates.md (add_operator): New.\n+\t* config/arm/arm.md (\"*arith_shiftsi\"): Fix for SP reg usage\n+\tin Thumb2.\n+\n 2011-06-24  Andi Kleen  <ak@linux.intel.com>\n \n \t* tree-sra.c (type_internals_preclude_sra_p): Add msg"}, {"sha": "26291afd615848021ba053ef3b3e86a85a85037e", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1ea4b90728c19a0141fd9b6ab44a3c5ded5a7c/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1ea4b90728c19a0141fd9b6ab44a3c5ded5a7c/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=9a1ea4b90728c19a0141fd9b6ab44a3c5ded5a7c", "patch": "@@ -8632,28 +8632,36 @@\n ;; Patterns to allow combination of arithmetic, cond code and shifts\n \n (define_insn \"*arith_shiftsi\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r,r\")\n         (match_operator:SI 1 \"shiftable_operator\"\n           [(match_operator:SI 3 \"shift_operator\"\n-             [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n-              (match_operand:SI 5 \"shift_amount_operand\" \"M,r\")])\n-           (match_operand:SI 2 \"s_register_operand\" \"rk,rk\")]))]\n+             [(match_operand:SI 4 \"s_register_operand\" \"r,r,r,r\")\n+              (match_operand:SI 5 \"shift_amount_operand\" \"M,M,M,r\")])\n+           (match_operand:SI 2 \"s_register_operand\" \"rk,rk,r,rk\")]))]\n   \"TARGET_32BIT\"\n   \"%i1%?\\\\t%0, %2, %4%S3\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"shift\" \"4\")\n-   (set_attr \"arch\" \"32,a\")\n-   ;; We have to make sure to disable the second alternative if\n+   (set_attr \"arch\" \"a,t2,t2,a\")\n+   ;; Thumb2 doesn't allow the stack pointer to be used for \n+   ;; operand1 for all operations other than add and sub. In this case \n+   ;; the minus operation is a candidate for an rsub and hence needs\n+   ;; to be disabled.\n+   ;; We have to make sure to disable the fourth alternative if\n    ;; the shift_operator is MULT, since otherwise the insn will\n    ;; also match a multiply_accumulate pattern and validate_change\n    ;; will allow a replacement of the constant with a register\n    ;; despite the checks done in shift_operator.\n    (set_attr_alternative \"insn_enabled\"\n \t\t\t [(const_string \"yes\")\n+\t\t\t  (if_then_else\n+\t\t\t   (match_operand:SI 1 \"add_operator\" \"\")\n+\t\t\t   (const_string \"yes\") (const_string \"no\"))\n+\t\t\t  (const_string \"yes\")\n \t\t\t  (if_then_else\n \t\t\t   (match_operand:SI 3 \"mult_operator\" \"\")\n \t\t\t   (const_string \"no\") (const_string \"yes\"))])\n-   (set_attr \"type\" \"alu_shift,alu_shift_reg\")])\n+   (set_attr \"type\" \"alu_shift,alu_shift,alu_shift,alu_shift_reg\")])\n \n (define_split\n   [(set (match_operand:SI 0 \"s_register_operand\" \"\")"}, {"sha": "4bd8af144b4b0d3096ae7a63b1d66573509ffe93", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1ea4b90728c19a0141fd9b6ab44a3c5ded5a7c/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1ea4b90728c19a0141fd9b6ab44a3c5ded5a7c/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=9a1ea4b90728c19a0141fd9b6ab44a3c5ded5a7c", "patch": "@@ -707,3 +707,6 @@\n (define_special_predicate \"neon_struct_operand\"\n   (and (match_code \"mem\")\n        (match_test \"TARGET_32BIT && neon_vector_mem_operand (op, 2)\")))\n+\n+(define_special_predicate \"add_operator\"\n+  (match_code \"plus\"))"}]}