{"sha": "a0a301fc978b4f62767e662efef007e7fd25a443", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBhMzAxZmM5NzhiNGY2Mjc2N2U2NjJlZmVmMDA3ZTdmZDI1YTQ0Mw==", "commit": {"author": {"name": "Doug Evans", "email": "devans@gcc.gnu.org", "date": "1997-10-20T20:49:22Z"}, "committer": {"name": "Doug Evans", "email": "devans@gcc.gnu.org", "date": "1997-10-20T20:49:22Z"}, "message": "sparc.h (SPARC_V9,SPARC_ARCH64): Delete.\n\n\t* sparc/sparc.h (SPARC_V9,SPARC_ARCH64): Delete.\n\t(DEFAULT_ARCH32_P): New macro.\n\t(TARGET_ARCH{32,64}): Allow compile time or runtime selection.\n\t(enum cmodel): Declare.\n\t(sparc_cmodel_string,sparc_cmodel): Declare.\n\t(SPARC_DEFAULT_CMODEL): Provide default.\n\t(TARGET_{MEDLOW,MEDANY}): Renamed to TARGET_CM_{MEDLOW,MEDANY}.\n\t(TARGET_FULLANY): Deleted.\n\t(TARGET_CM_MEDMID): New macro.\n\t(CPP_CPU_DEFAULT_SPEC): Renamed from CPP_DEFAULT_SPEC.\n\t(ASM_CPU_DEFAULT_SPEC): Renamed from ASM_DEFAULT_SPEC.\n\t(CPP_PREDEFINES): Take out stuff now handled by %(cpp_arch).\n\t(CPP_SPEC): Rewrite.\n\t(CPP_ARCH{,32,64,_DEFAULT}_SPEC): New macros.\n\t(CPP_{ENDIAN,SUBTARGET}_SPEC): New macros.\n\t(ASM_ARCH{,32,64,_DEFAULT}_SPEC): New macros.\n\t(ASM_SPEC): Add %(asm_arch).\n\t(EXTRA_SPECS): Rename cpp_default to cpp_cpu_default.\n\tRename asm_default to asm_cpu_default.\n\tAdd cpp_arch32, cpp_arch64, cpp_arch_default, cpp_arch, cpp_endian,\n\tcpp_subtarget, asm_arch32, asm_arch64, asm_arch_default, asm_arch.\n\t(NO_BUILTIN_{PTRDIFF,SIZE}_TYPE): Define ifdef SPARC_BI_ARCH.\n\t({PTRDIFF,SIZE}_TYPE): Provide 32 and 64 bit values.\n\t(MASK_INT64,MASK_LONG64): Delete.\n\t(MASK_ARCH64): Renamed to MASK_64BIT.\n\t(MASK_{MEDLOW,MEDANY,FULLANY,CODE_MODEL}): Delete.\n\t(EMBMEDANY_BASE_REG): Renamed from MEDANY_BASE_REG.\n\t(TARGET_SWITCHES): Always provide 64 bit options.\n\t(ARCH64_SWITCHES): Delete.\n\t(TARGET_OPTIONS): New option -mcmodel=.\n\t(INT_TYPE_SIZE): Always 32.\n\t(MAX_LONG_TYPE_SIZE): Define ifdef SPARC_BI_ARCH.\n\t(INIT_EXPANDERS): sparc64_init_expanders renamed to sparc_init_....\n\t(FUNCTION_{,BLOCK_}PROFILER): Delete TARGET_EMBMEDANY support.\n\t(PRINT_OPERAND_PUNCT_VALID_P): Add '_'.\n\t* sparc/linux-aout.h (CPP_PREDEFINES): Take out stuff handled by\n\tCPP_SPEC.\n\t(CPP_SUBTARGET_SPEC): Renamed from CPP_SPEC.\n\t* sparc/linux.h: Likewise.\n\t* sparc/linux64.h (SPARC_V9,SPARC_ARCH64): Delete.\n\t(ASM_CPU_DEFAULT_SPEC): Renamed from ASM_DEFAULT_SPEC.\n\t(TARGET_DEFAULT): Delete MASK_LONG64, MASK_MEDANY, add MASK_64BIT.\n\t(SPARC_DEFAULT_CMODEL): Define.\n\t(CPP_PREDEFINES): Take out stuff handled by CPP_SPEC.\n\t(CPP_SUBTARGET_SPEC): Renamed from CPP_SPEC.\n\t(LONG_DOUBLE_TYPE_SIZE): Define.\n\t(ASM_SPEC): Add %(asm_arch).\n\t* sparc/sol2.h (CPP_PREDEFINES): Take out stuff handled by CPP_SPEC.\n\t(CPP_SUBTARGET_SPEC): Renamed from CPP_SPEC.\n\t(TARGET_CPU_DEFAULT): Add ultrasparc case.\n\t* sparc/sp64-aout.h (SPARC_V9,SPARC_ARCH64): Delete.\n\t(TARGET_DEFAULT): MASK_ARCH64 renamed to MASK_64BIT.\n\t(SPARC_DEFAULT_CMODEL): Define.\n\t* sparc/sp64-elf.h (SPARC_V9,SPARC_ARCH64): Delete.\n\t(TARGET_DEFAULT): MASK_ARCH64 renamed to MASK_64BIT.  Delete\n\tMASK_LONG64, MASK_MEDANY.\n\t(SPARC_DEFAULT_CMODEL): Define.\n\t(CPP_PREDEFINES): Delete.\n\t(CPP_SUBTARGET_SPEC): Renamed from CPP_SPEC.\n\t(ASM_SPEC): Add %(asm_arch).\n\t(LONG_DOUBLE_TYPE_SIZE): Define.\n\t(DWARF2_DEBUGGING_INFO): Define.\n\t* sparc/splet.h (CPP_SPEC): Delete.\n\t* sparc/sysv4.h (CPP_PREDEFINES): Take out stuff handled by CPP_SPEC.\n\t(FUNCTION_BLOCK_PROFILER): Delete TARGET_EMBMEDANY support.\n\t(BLOCK_PROFILER): Likewise.\n\t* sparc/sparc.c (sparc_cmodel_string,sparc_cmodel): New globals.\n\t(sparc_override_options): Handle code model selection.\n\t(sparc_init_expanders): Renamed from sparc64_init_expanders.\n\t* sparc/sparc.md: TARGET_<code_model> renamed to TARGET_CM_....\n\tTARGET_MEDANY renamed to TARGET_CM_EMBMEDANY.\n\t(sethi_di_embmedany_{data,text}): Renamed from sethi_di_medany_....\n\t(sethi_di_fullany): Delete.\n\nFrom-SVN: r16108", "tree": {"sha": "5d0f69babd543de29ebd973944e29678b1d36785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d0f69babd543de29ebd973944e29678b1d36785"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0a301fc978b4f62767e662efef007e7fd25a443", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0a301fc978b4f62767e662efef007e7fd25a443", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0a301fc978b4f62767e662efef007e7fd25a443", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0a301fc978b4f62767e662efef007e7fd25a443/comments", "author": null, "committer": null, "parents": [{"sha": "2d5b6dea254eb59bcd22cae42b1a445713bf5452", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d5b6dea254eb59bcd22cae42b1a445713bf5452", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d5b6dea254eb59bcd22cae42b1a445713bf5452"}], "stats": {"total": 742, "additions": 383, "deletions": 359}, "files": [{"sha": "730b8308cd4d0bf4a68f604e69aec1c9a2a30432", "filename": "gcc/config/sparc/linux-aout.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a301fc978b4f62767e662efef007e7fd25a443/gcc%2Fconfig%2Fsparc%2Flinux-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a301fc978b4f62767e662efef007e7fd25a443/gcc%2Fconfig%2Fsparc%2Flinux-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux-aout.h?ref=a0a301fc978b4f62767e662efef007e7fd25a443", "patch": "@@ -70,10 +70,11 @@ Boston, MA 02111-1307, USA.  */\n #define WCHAR_TYPE_SIZE BITS_PER_WORD\n \n #undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-Dunix -Dsparc -Dlinux -Asystem(unix) -Asystem(posix) -Acpu(sparc) -Amachine(sparc)\"\n+#define CPP_PREDEFINES \"-Dunix -Dsparc -Dlinux -Asystem(unix) -Asystem(posix)\"\n \n-#undef CPP_SPEC\n-#define CPP_SPEC \"%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{msparclite:-D__sparclite__} %{mv8:-D__sparc_v8__} %{msupersparc:-D__supersparc__ -D__sparc_v8__} %{posix:-D_POSIX_SOURCE}\"\n+#undef CPP_SUBTARGET_SPEC\n+#define CPP_SUBTARGET_SPEC \\\n+\"%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{posix:-D_POSIX_SOURCE}\"\n \n /* Don't default to pcc-struct-return, because gcc is the only compiler,\n    and we want to retain compatibility with older gcc versions.  */"}, {"sha": "6f7a6ca9469e92208b7ac4128c25d1e2a6be8500", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a301fc978b4f62767e662efef007e7fd25a443/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a301fc978b4f62767e662efef007e7fd25a443/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=a0a301fc978b4f62767e662efef007e7fd25a443", "patch": "@@ -42,6 +42,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Use stabs instead of DWARF debug format.  */\n #define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n+\n #include <sparc/sysv4.h>\n \n #undef MD_EXEC_PREFIX\n@@ -102,13 +103,15 @@ Boston, MA 02111-1307, USA.  */\n #define WCHAR_TYPE_SIZE BITS_PER_WORD\n     \n #undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-D__ELF__ -Dunix -Dsparc -Dlinux -Asystem(unix) -Asystem(posix) -Acpu(sparc) -Amachine(sparc)\"\n+#define CPP_PREDEFINES \"-D__ELF__ -Dunix -Dsparc -Dlinux -Asystem(unix) -Asystem(posix)\"\n \n-#undef CPP_SPEC\n+#undef CPP_SUBTARGET_SPEC\n #ifdef USE_GNULIBC_1\n-#define CPP_SPEC \"%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{msparclite:-D__sparclite__} %{mv8:-D__sparc_v8__} %{msupersparc:-D__supersparc__ -D__sparc_v8__} %{posix:-D_POSIX_SOURCE}\"\n+#define CPP_SUBTARGET_SPEC \\\n+\"%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{posix:-D_POSIX_SOURCE}\"\n #else\n-#define CPP_SPEC \"%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{msparclite:-D__sparclite__} %{mv8:-D__sparc_v8__} %{msupersparc:-D__supersparc__ -D__sparc_v8__} %{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n+#define CPP_SUBTARGET_SPEC \\\n+\"%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n #endif\n \n #undef LIB_SPEC"}, {"sha": "56c2183013df03de523292acefc674e8fd2ff423", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a301fc978b4f62767e662efef007e7fd25a443/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a301fc978b4f62767e662efef007e7fd25a443/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=a0a301fc978b4f62767e662efef007e7fd25a443", "patch": "@@ -19,13 +19,11 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#define LINUX_DEFAULT_ELF\n-\n-/* This is a v9 only compiler.  -mv8 is not expected to work.  If you want\n-   a v8/v9 compiler, this isn't the place to do it.  */\n+/* ??? bi-architecture support will require changes to the linker\n+   related specs, among perhaps other things (multilibs).  */\n+/* #define SPARC_BI_ARCH */\n \n-#define SPARC_V9 1\t/* See sparc.h.  */\n-#define SPARC_ARCH64 1\n+#define LINUX_DEFAULT_ELF\n \n /* Don't assume anything about the header files. */\n #define NO_IMPLICIT_EXTERN_C\n@@ -47,8 +45,8 @@ Boston, MA 02111-1307, USA.  */\n         fprintf (FILE, \"\\t.version\\t\\\"01.01\\\"\\n\");                      \\\n   } while (0)\n   \n-#undef ASM_DEFAULT_SPEC\n-#define ASM_DEFAULT_SPEC \"-Av9a\"\n+#undef ASM_CPU_DEFAULT_SPEC\n+#define ASM_CPU_DEFAULT_SPEC \"-Av9a\"\n \n #undef  LIBGCC_SPEC\n #define LIBGCC_SPEC \\\n@@ -78,13 +76,17 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (sparc64 Linux/ELF)\");\n \n-/* A v9 compiler with stack-bias, 32 bit integers, 64 bit longs and\n-   64 bit pointers, in a Medium/Anywhere code model environment.  */\n+/* A 64 bit v9 compiler with stack-bias,\n+   in a Medium/Anywhere code model environment.  */\n \n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT \\\n-  (MASK_V9 + MASK_ARCH64 + MASK_LONG64 + MASK_PTR64 /* + MASK_HARD_QUAD */ \\\n-   + MASK_STACK_BIAS + MASK_MEDANY + MASK_APP_REGS + MASK_EPILOGUE + MASK_FPU)\n+  (MASK_V9 + MASK_PTR64 + MASK_64BIT /* + MASK_HARD_QUAD */ \\\n+   + MASK_STACK_BIAS + MASK_APP_REGS + MASK_EPILOGUE + MASK_FPU)\n+\n+/* The default code model.  */\n+#undef SPARC_DEFAULT_CMODEL\n+#define SPARC_DEFAULT_CMODEL CM_MEDANY\n \n #undef SIZE_TYPE\n #define SIZE_TYPE \"long long unsigned int\"\n@@ -97,20 +99,17 @@ Boston, MA 02111-1307, USA.  */\n    \n #undef WCHAR_TYPE_SIZE\n #define WCHAR_TYPE_SIZE BITS_PER_WORD\n+\n+#undef LONG_DOUBLE_TYPE_SIZE\n+#define LONG_DOUBLE_TYPE_SIZE 128\n     \n #undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-D__sparc__ -D__sparc__ -D__sparc_v9__ -D__arch64__ -D__ELF__ -Dunix -Dsparc -Dlinux -Asystem(unix) -Asystem(posix) -Acpu(sparc) -Amachine(sparc)\"\n+#define CPP_PREDEFINES \"-D__ELF__ -Dunix -Dsparc -Dlinux -Asystem(unix) -Asystem(posix)\"\n \n-#undef CPP_SPEC\n-#define CPP_SPEC \"\\\n+#undef CPP_SUBTARGET_SPEC\n+#define CPP_SUBTARGET_SPEC \"\\\n %{fPIC:-D__PIC__ -D__pic__} \\\n %{fpic:-D__PIC__ -D__pic__} \\\n-%{mint64:-D__INT_MAX__=9223372036854775807LL -D__LONG_MAX__=9223372036854775807LL} \\\n-%{mlong64:-D__LONG_MAX__=9223372036854775807LL} \\\n-%{mlittle-endian:-D__LITTLE_ENDIAN__} \\\n-%{msparclite:-D__sparclite__} \\\n-%{mv8:-D__sparc_v8__} \\\n-%{msupersparc:-D__supersparc__ -D__sparc_v8__} \\\n %{posix:-D_POSIX_SOURCE} \\\n \"\n /* We no longer link with libc_p.a or libg.a by default. If you\n@@ -162,7 +161,7 @@ Boston, MA 02111-1307, USA.  */\n %{Wa,*:%*} \\\n -s %{fpic:-K PIC} %{fPIC:-K PIC} \\\n %{mlittle-endian:-EL} \\\n-%(asm_cpu) \\\n+%(asm_cpu) %(asm_arch) \\\n \"\n \n /* Same as sparc.h */"}, {"sha": "9c2f0345429d90ace3e4709a4443fffc1575d2f2", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a301fc978b4f62767e662efef007e7fd25a443/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a301fc978b4f62767e662efef007e7fd25a443/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=a0a301fc978b4f62767e662efef007e7fd25a443", "patch": "@@ -25,14 +25,12 @@ Boston, MA 02111-1307, USA.  */\n \n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \\\n- \"-Dsun -Dsparc -Dunix -D__svr4__ -D__SVR4 \\\n-  -Asystem(unix) -Asystem(svr4) -Acpu(sparc) -Amachine(sparc)\\\n-  -D__GCC_NEW_VARARGS__\"\n+\"-Dsparc -Dsun -Dunix -D__svr4__ -D__SVR4 \\\n+-Asystem(unix) -Asystem(svr4)\"\n \n-#undef CPP_SPEC\n-#define CPP_SPEC \"\\\n+#undef CPP_SUBTARGET_SPEC\n+#define CPP_SUBTARGET_SPEC \"\\\n %{compat-bsd:-iwithprefixbefore ucbinclude -I/usr/ucbinclude} \\\n-%(cpp_cpu) \\\n \"\n \n /* The sun bundled assembler doesn't accept -Yd, (and neither does gas).\n@@ -46,15 +44,19 @@ Boston, MA 02111-1307, USA.  */\n \n /* This is here rather than in sparc.h because it's not known what\n    other assemblers will accept.  */\n-#if TARGET_CPU_DEFAULT == TARGET_CPU_sparc64\n-#undef ASM_DEFAULT_SPEC\n-#define ASM_DEFAULT_SPEC \"-xarch=v8plus\"\n+#if TARGET_CPU_DEFAULT == TARGET_CPU_v9\n+#undef ASM_CPU_DEFAULT_SPEC\n+#define ASM_CPU_DEFAULT_SPEC \"-xarch=v8plus\"\n+#endif\n+#if TARGET_CPU_DEFAULT == TARGET_CPU_ultrasparc\n+#undef ASM_CPU_DEFAULT_SPEC\n+#define ASM_CPU_DEFAULT_SPEC \"-xarch=v8plusa\"\n #endif\n #undef ASM_CPU_SPEC\n #define ASM_CPU_SPEC \"\\\n %{mcpu=v8plus:-xarch=v8plus} \\\n-%{mcpu=ultrasparc:-xarch=v8plus} \\\n-%{!mcpu*:%(asm_default)} \\\n+%{mcpu=ultrasparc:-xarch=v8plusa} \\\n+%{!mcpu*:%(asm_cpu_default)} \\\n \"\n \n /* However it appears that Solaris 2.0 uses the same reg numbering as"}, {"sha": "fbd4ef372f98ccf783c624cc70ad1bf4c4dc8532", "filename": "gcc/config/sparc/sp64-aout.h", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a301fc978b4f62767e662efef007e7fd25a443/gcc%2Fconfig%2Fsparc%2Fsp64-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a301fc978b4f62767e662efef007e7fd25a443/gcc%2Fconfig%2Fsparc%2Fsp64-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsp64-aout.h?ref=a0a301fc978b4f62767e662efef007e7fd25a443", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for SPARC64, a.out.\n-   Copyright (C) 1994, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1996, 1997 Free Software Foundation, Inc.\n    Contributed by Doug Evans, dje@cygnus.com.\n \n This file is part of GNU CC.\n@@ -19,14 +19,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* This is a v9 only compiler.  -mv8 is not expected to work.  If you want\n-   a v8/v9 compiler, this isn't the place to do it.\n-\n-   The only code model supported is Medium/Low.  */\n-\n-#define SPARC_V9 1\t/* See sparc.h.  */\n-#define SPARC_ARCH64 1\n-\n #include \"sparc/sparc.h\"\n #include \"aoutos.h\"\n \n@@ -35,5 +27,9 @@ Boston, MA 02111-1307, USA.  */\n \n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT \\\n-  (MASK_V9 + MASK_ARCH64 + MASK_PTR64 + MASK_HARD_QUAD \\\n-   + MASK_MEDLOW + MASK_APP_REGS + MASK_EPILOGUE + MASK_FPU)\n+  (MASK_V9 + MASK_PTR64 + MASK_64BIT + MASK_HARD_QUAD \\\n+   + MASK_APP_REGS + MASK_EPILOGUE + MASK_FPU)\n+\n+/* The only code model supported is Medium/Low.  */\n+#undef SPARC_DEFAULT_CMODEL\n+#define SPARC_DEFAULT_CMODEL CM_MEDLOW"}, {"sha": "0c0bb6bfbab8a9c930cbac90bb4e8fd800a40181", "filename": "gcc/config/sparc/sp64-elf.h", "status": "modified", "additions": 19, "deletions": 33, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a301fc978b4f62767e662efef007e7fd25a443/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a301fc978b4f62767e662efef007e7fd25a443/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h?ref=a0a301fc978b4f62767e662efef007e7fd25a443", "patch": "@@ -19,12 +19,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* This is a v9 only compiler.  -mcpu=v8 is not expected to work.  If you want\n-   a v8/v9 compiler, this isn't the place to do it.  */\n-\n-#define SPARC_V9 1\t/* See sparc.h.  */\n-#define SPARC_ARCH64 1\n-\n /* ??? We're taking the scheme of including another file and then overriding\n    the values we don't like a bit too far here.  The alternative is to more or\n    less duplicate all of svr4.h, sparc/sysv4.h, and sparc/sol2.h here\n@@ -35,30 +29,22 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (sparc64-elf)\")\n \n-/* A v9 compiler without stack-bias, lp64 sizes,\n+/* A 64 bit v9 compiler without stack-bias,\n    in a Medium/Anywhere code model environment.\n    There is no stack bias as this configuration is intended for\n    embedded systems.  */\n \n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT \\\n-  (MASK_V9 + MASK_ARCH64 + MASK_PTR64 + MASK_LONG64 + MASK_HARD_QUAD \\\n-   MASK_MEDANY + MASK_APP_REGS + MASK_EPILOGUE + MASK_FPU)\n-\n-/* __svr4__ is used by the C library */\n-/* ??? __arch64__ is subject to change.  */\n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"\\\n--D__sparc__ -D__sparc_v9__ -D__arch64__ -D__svr4__ \\\n--Acpu(sparc64) -Amachine(sparc64) \\\n-\"\n+(MASK_V9 + MASK_PTR64 + MASK_64BIT + MASK_HARD_QUAD \\\n+ + MASK_APP_REGS + MASK_EPILOGUE + MASK_FPU)\n \n-#undef CPP_SPEC\n-#define CPP_SPEC \"\\\n-%{mint64:-D__INT_MAX__=9223372036854775807LL -D__LONG_MAX__=9223372036854775807LL} \\\n-%{mlong64:-D__LONG_MAX__=9223372036854775807LL} \\\n-%{mlittle-endian:-D__LITTLE_ENDIAN__} \\\n-\"\n+#undef SPARC_DEFAULT_CMODEL\n+#define SPARC_DEFAULT_CMODEL CM_EMBMEDANY\n+\n+/* __svr4__ is used by the C library (FIXME) */\n+#undef CPP_SUBTARGET_SPEC\n+#define CPP_SUBTARGET_SPEC \"-D__svr4__\"\n \n #undef MD_EXEC_PREFIX\n #undef MD_STARTFILE_PREFIX\n@@ -67,6 +53,7 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_SPEC \"\\\n %{v:-V} -s %{fpic:-K PIC} %{fPIC:-K PIC} \\\n %{mlittle-endian:-EL} \\\n+%(asm_cpu) %(asm_arch) \\\n \"\n \n /* This is taken from sol2.h.  */\n@@ -102,23 +89,21 @@ crtbegin.o%s \\\n #undef WORDS_BIG_ENDIAN\n #define WORDS_BIG_ENDIAN (! TARGET_LITTLE_ENDIAN)\n \n-/* Unfortunately, svr4.h redefines these so we have to restore them to\n-   their original values in sparc.h.  */\n-/* ??? It might be possible to eventually get svr4.h to do the right thing.  */\n-\n-#undef PTRDIFF_TYPE\n-#define PTRDIFF_TYPE \"long long int\"\n-\n-#undef SIZE_TYPE\n-#define SIZE_TYPE \"long long unsigned int\"\n-\n /* ??? This should be 32 bits for v9 but what can we do?  */\n #undef WCHAR_TYPE\n #define WCHAR_TYPE \"short unsigned int\"\n \n #undef WCHAR_TYPE_SIZE\n #define WCHAR_TYPE_SIZE 16\n \n+#undef LONG_DOUBLE_TYPE_SIZE\n+#define LONG_DOUBLE_TYPE_SIZE 128\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"long long int\"\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"long long unsigned int\"\n+\n /* The medium/anywhere code model practically requires us to put jump tables\n    in the text section as gcc is unable to distinguish LABEL_REF's of jump\n    tables from other label refs (when we need to).  */\n@@ -131,6 +116,7 @@ crtbegin.o%s \\\n    anyway so it is the default.  */\n \n #define DWARF_DEBUGGING_INFO\n+#define DWARF2_DEBUGGING_INFO\n #define DBX_DEBUGGING_INFO\n \n #undef PREFERRED_DEBUGGING_TYPE"}, {"sha": "ef5124724014bbd8bf84d5557769318e4f92d5b1", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 61, "deletions": 17, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a301fc978b4f62767e662efef007e7fd25a443/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a301fc978b4f62767e662efef007e7fd25a443/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=a0a301fc978b4f62767e662efef007e7fd25a443", "patch": "@@ -105,7 +105,12 @@ static void sparc_init_modes ();\n \f\n /* Option handling.  */\n \n-/* Record options as passed by user.  */\n+/* Code model option as passed by user.  */\n+char *sparc_cmodel_string;\n+/* Parsed value.  */\n+enum cmodel sparc_cmodel;\n+\n+/* Record alignment options as passed by user.  */\n char *sparc_align_loops_string;\n char *sparc_align_jumps_string;\n char *sparc_align_funcs_string;\n@@ -133,16 +138,30 @@ enum processor_type sparc_cpu;\n void\n sparc_override_options ()\n {\n+  static struct code_model {\n+    char *name;\n+    int value;\n+  } cmodels[] = {\n+    { \"32\", CM_32 },\n+    { \"medlow\", CM_MEDLOW },\n+    { \"medmid\", CM_MEDMID },\n+    { \"medany\", CM_MEDANY },\n+    { \"embmedany\", CM_EMBMEDANY },\n+    { 0, 0 }\n+  };\n+  struct code_model *cmodel;\n   /* Map TARGET_CPU_DEFAULT to value for -m{arch,tune}=.  */\n   static struct cpu_default {\n     int cpu;\n     char *name;\n   } cpu_default[] = {\n+    /* There must be one entry here for each TARGET_CPU value.  */\n     { TARGET_CPU_sparc, \"cypress\" },\n-    { TARGET_CPU_v8, \"v8\" },\n-    { TARGET_CPU_supersparc, \"supersparc\" },\n     { TARGET_CPU_sparclet, \"tsc701\" },\n     { TARGET_CPU_sparclite, \"f930\" },\n+    { TARGET_CPU_v8, \"v8\" },\n+    { TARGET_CPU_supersparc, \"supersparc\" },\n+    { TARGET_CPU_v9, \"v9\" },\n     { TARGET_CPU_ultrasparc, \"ultrasparc\" },\n     { 0 }\n   };\n@@ -167,22 +186,47 @@ sparc_override_options ()\n     { \"sparclet\",   PROCESSOR_SPARCLET, MASK_ISA, MASK_SPARCLET },\n     /* TEMIC sparclet */\n     { \"tsc701\",     PROCESSOR_TSC701, MASK_ISA, MASK_SPARCLET },\n-    /* \"v9\" is used to specify a true 64 bit architecture.\n-       \"v8plus\" is what Sun calls Solaris2 running on UltraSPARC's.  */\n+    /* \"v8plus\" is what Sun calls Solaris2.5 running on UltraSPARC's.  */\n     { \"v8plus\",     PROCESSOR_V8PLUS, MASK_ISA, MASK_V9 },\n-#if SPARC_ARCH64\n     { \"v9\",         PROCESSOR_V9, MASK_ISA, MASK_V9 },\n-#endif\n     /* TI ultrasparc */\n     { \"ultrasparc\", PROCESSOR_ULTRASPARC, MASK_ISA, MASK_V9 },\n     { 0 }\n   };\n   struct cpu_table *cpu;\n   struct sparc_cpu_select *sel;\n+  int fpu;\n+\n+#ifndef SPARC_BI_ARCH\n+  /* Check for unsupported architecture size.  */\n+  if (! TARGET_64BIT != DEFAULT_ARCH32_P)\n+    {\n+      error (\"%s is not supported by this configuration\",\n+\t     DEFAULT_ARCH32_P ? \"-m64\" : \"-m32\");\n+    }\n+#endif\n+\n+  /* Code model selection.  */\n+  sparc_cmodel = SPARC_DEFAULT_CMODEL;\n+  if (sparc_cmodel_string != NULL)\n+    {\n+      if (TARGET_ARCH64)\n+\t{\n+\t  for (cmodel = &cmodels[0]; cmodel->name; cmodel++)\n+\t    if (strcmp (sparc_cmodel_string, cmodel->name) == 0)\n+\t      break;\n+\t  if (cmodel->name == NULL)\n+\t    error (\"bad value (%s) for -mcmodel= switch\", sparc_cmodel_string);\n+\t  else\n+\t    sparc_cmodel = cmodel->value;\n+\t}\n+      else\n+\terror (\"-mcmodel= is not supported on 32 bit systems\");\n+    }\n \n-  int fpu = TARGET_FPU; /* save current -mfpu status */\n+  fpu = TARGET_FPU; /* save current -mfpu status */\n \n-  /* Set the default.  */\n+  /* Set the default CPU.  */\n   for (def = &cpu_default[0]; def->name; ++def)\n     if (def->cpu == TARGET_CPU_DEFAULT)\n       break;\n@@ -284,7 +328,7 @@ static rtx fpconv_stack_temp;\n /* Called once for each function.  */\n \n void\n-sparc64_init_expanders ()\n+sparc_init_expanders ()\n {\n   fpconv_stack_temp = NULL_RTX;\n }\n@@ -295,10 +339,10 @@ rtx\n sparc64_fpconv_stack_temp ()\n {\n   if (fpconv_stack_temp == NULL_RTX)\n-      fpconv_stack_temp =\n-\tassign_stack_local (DImode, GET_MODE_SIZE (DImode), 0);\n+    fpconv_stack_temp =\n+      assign_stack_local (DImode, GET_MODE_SIZE (DImode), 0);\n \n-    return fpconv_stack_temp;\n+  return fpconv_stack_temp;\n }\n \f\n /* Miscellaneous utilities.  */\n@@ -532,7 +576,7 @@ sp64_medium_pic_operand (op, mode)\n /* Return 1 if the operand is a data segment reference.  This includes\n    the readonly data segment, or in other words anything but the text segment.\n    This is needed in the medium/anywhere code model on v9.  These values\n-   are accessed with MEDANY_BASE_REG.  */\n+   are accessed with EMBMEDANY_BASE_REG.  */\n \n int\n data_segment_operand (op, mode)\n@@ -4679,8 +4723,8 @@ print_operand (file, x, code)\n \tfputs (\"\\n\\tnop\", file);\n       return;\n     case '_':\n-      /* Output the Medium/Anywhere code model base register.  */\n-      fputs (MEDANY_BASE_REG, file);\n+      /* Output the Embedded Medium/Anywhere code model base register.  */\n+      fputs (EMBMEDANY_BASE_REG, file);\n       return;\n     case '@':\n       /* Print out what we are using as the frame pointer.  This might\n@@ -4944,7 +4988,7 @@ output_double_int (file, value)\n \t\t|| GET_CODE (value) == CODE_LABEL\n \t\t|| GET_CODE (value) == MINUS)))\n     {\n-      if (!TARGET_V9 || TARGET_MEDLOW)\n+      if (!TARGET_V9 || TARGET_CM_MEDLOW)\n \t{\n \t  ASM_OUTPUT_INT (file, const0_rtx);\n \t  ASM_OUTPUT_INT (file, value);"}, {"sha": "376ad28975776144a8297898def0d88ff85e4576", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 228, "deletions": 216, "changes": 444, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a301fc978b4f62767e662efef007e7fd25a443/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a301fc978b4f62767e662efef007e7fd25a443/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=a0a301fc978b4f62767e662efef007e7fd25a443", "patch": "@@ -22,105 +22,133 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n /* Note that some other tm.h files include this one and then override\n-   many of the definitions that relate to assembler syntax.  */\n-\n-/* Sparc64 support has been added by trying to allow for a day when one\n-   compiler can handle both v8 and v9.  There are a few cases where this\n-   isn't doable, but keep them to a minimum!\n-\n-   TARGET_V9 is used to select at runtime the sparc64 chip.\n-   TARGET_ARCH64 is used to select at runtime a 64 bit environment.\n-   SPARC_V9 is defined as 0 or 1 (so it may be used inside and outside\n-   #define's), and says whether the cpu is a sparc64 chip (which may be\n-   running in a 32 or 64 bit environment).\n-   SPARC_ARCH64 is defined as 0 for a 32 bit environment and 1 for a 64 bit\n-   environment.\n-\n-   In places where it is possible to choose at runtime, use TARGET_V9 and\n-   TARGET_ARCH64.  In places where it is currently not possible to select\n-   between the two at runtime use SPARC_{V9,ARCH64}.  Again, keep uses of\n-   SPARC_{V9,ARCH64} to a minimum.  No attempt is made to support both v8\n-   and v9 in the v9 compiler.\n-\n-   ??? All uses of SPARC_V9 have been removed.  Try not to add new ones.\n-*/\n+   whatever definitions are necessary.  */\n+\n+/* Specify this in a cover file to provide bi-architecture (32/64) support.  */\n+/* #define SPARC_BI_ARCH */\n+\n+/* Macro used later in this file to determine default architecture.  */\n+#define DEFAULT_ARCH32_P ((TARGET_DEFAULT & MASK_64BIT) == 0)\n \n-#ifndef SPARC_V9\n-#define SPARC_V9 0\n+/* TARGET_ARCH{32,64} are the main macros to decide which of the two\n+   architectures to compile for.  We allow targets to choose compile time or\n+   runtime selection.  */\n+#ifdef SPARC_BI_ARCH\n+#define TARGET_ARCH32 (! TARGET_64BIT)\n+#else\n+#define TARGET_ARCH32 (DEFAULT_ARCH32_P)\n #endif\n-#ifndef SPARC_ARCH64\n-#define SPARC_ARCH64 0\n+#define TARGET_ARCH64 (! TARGET_ARCH32)\n+\n+/* Code model selection.\n+   -mcmodel is used to select the v9 code model.\n+   Different code models aren't supported for v8 code.\n+\n+   TARGET_CM_32:     32 bit address space, top 32 bits = 0,\n+\t\t     pointers are 32 bits.  Note that this isn't intended\n+                     to imply a v8 abi.\n+\n+   TARGET_CM_MEDLOW: 32 bit address space, top 32 bits = 0,\n+                     avoid generating %uhi and %ulo terms,\n+\t\t     pointers are 64 bits.\n+\n+   TARGET_CM_MEDMID: 64 bit address space.\n+                     The executable must be in the low 16 TB of memory.\n+                     This corresponds to the low 44 bits, and the %[hml]44\n+                     relocs are used.\n+\n+   TARGET_CM_MEDANY: 64 bit address space.\n+                     The text and data segments have a maximum size of 31\n+                     bits and may be located anywhere.  The maximum offset\n+                     from any instruction to the label _GLOBAL_OFFSET_TABLE_\n+                     is 31 bits.\n+\n+   TARGET_CM_EMBMEDANY: 64 bit address space.\n+                     The text and data segments have a maximum size of 31 bits\n+                     and may be located anywhere.  Register %g4 contains\n+                     the start address of the data segment.\n+*/\n+\n+enum cmodel {\n+  CM_32,\n+  CM_MEDLOW,\n+  CM_MEDMID,\n+  CM_MEDANY,\n+  CM_EMBMEDANY\n+};\n+\n+/* Value of -mcmodel specified by user.  */\n+extern char *sparc_cmodel_string;\n+/* One of CM_FOO.  */\n+extern enum cmodel sparc_cmodel;\n+\n+/* V9 code model selection.  */\n+#define TARGET_CM_MEDLOW    (sparc_cmodel == CM_MEDLOW)\n+#define TARGET_CM_MEDMID    (sparc_cmodel == CM_MEDMID)\n+#define TARGET_CM_MEDANY    (sparc_cmodel == CM_MEDANY)\n+#define TARGET_CM_EMBMEDANY (sparc_cmodel == CM_EMBMEDANY)\n+\n+#ifndef SPARC_DEFAULT_CMODEL\n+#define SPARC_DEFAULT_CMODEL CM_MEDLOW\n #endif\n \n-/* Values of TARGET_CPU_DEFAULT, set via -D in the Makefile.  */\n+/* This is call-clobbered in the normal ABI, but is reserved in the\n+   home grown (aka upward compatible) embedded ABI.  */\n+#define EMBMEDANY_BASE_REG \"%g4\"\n+\f\n+/* Values of TARGET_CPU_DEFAULT, set via -D in the Makefile,\n+   and specified by the user via --with-cpu=foo.\n+   This specifies the cpu implementation, not the architecture size.  */\n #define TARGET_CPU_sparc\t0\n #define TARGET_CPU_v7\t\t0\t/* alias for previous */\n #define TARGET_CPU_sparclet\t1\n #define TARGET_CPU_sparclite\t2\n-#define TARGET_CPU_v8\t\t3\n+#define TARGET_CPU_v8\t\t3\t/* generic v8 implementation */\n #define TARGET_CPU_supersparc\t4\n-#define TARGET_CPU_ultrasparc\t5\n-#define TARGET_CPU_sparc64\t5\t/* alias for ultrasparc */\n+#define TARGET_CPU_v9\t\t5\t/* generic v9 implementation */\n+#define TARGET_CPU_sparc64\t5\t/* alias */\n+#define TARGET_CPU_ultrasparc\t6\n \n #if TARGET_CPU_DEFAULT == TARGET_CPU_sparc || TARGET_CPU_DEFAULT == TARGET_CPU_v8 || TARGET_CPU_DEFAULT == TARGET_CPU_supersparc\n-#define CPP_DEFAULT_SPEC \"\"\n-#define ASM_DEFAULT_SPEC \"\"\n-#else\n+#define CPP_CPU_DEFAULT_SPEC \"\"\n+#define ASM_CPU_DEFAULT_SPEC \"\"\n+#endif\n #if TARGET_CPU_DEFAULT == TARGET_CPU_sparclet\n-#define CPP_DEFAULT_SPEC \"-D__sparclet__\"\n-#define ASM_DEFAULT_SPEC \"-Asparclet\"\n-#else\n+#define CPP_CPU_DEFAULT_SPEC \"-D__sparclet__\"\n+#define ASM_CPU_DEFAULT_SPEC \"-Asparclet\"\n+#endif\n #if TARGET_CPU_DEFAULT == TARGET_CPU_sparclite\n-#define CPP_DEFAULT_SPEC \"-D__sparclite__\"\n-#define ASM_DEFAULT_SPEC \"-Asparclite\"\n-#else\n-#if TARGET_CPU_DEFAULT == TARGET_CPU_sparc64\n+#define CPP_CPU_DEFAULT_SPEC \"-D__sparclite__\"\n+#define ASM_CPU_DEFAULT_SPEC \"-Asparclite\"\n+#endif\n+#if TARGET_CPU_DEFAULT == TARGET_CPU_v9\n /* ??? What does Sun's CC pass?  */\n-#define CPP_DEFAULT_SPEC \"-D__sparc_v9__\"\n+#define CPP_CPU_DEFAULT_SPEC \"-D__sparc_v9__\"\n /* ??? It's not clear how other assemblers will handle this, so by default\n    use GAS.  Sun's Solaris assembler recognizes -xarch=v8plus, but this case\n    is handled in sol2.h.  */\n-#define ASM_DEFAULT_SPEC \"-Av9\"\n-#else\n-Unrecognized value in TARGET_CPU_DEFAULT.\n-#endif\n+#define ASM_CPU_DEFAULT_SPEC \"-Av9\"\n #endif\n+#if TARGET_CPU_DEFAULT == TARGET_CPU_ultrasparc\n+#define CPP_CPU_DEFAULT_SPEC \"-D__sparc_v9__\"\n+#define ASM_CPU_DEFAULT_SPEC \"-Av9a\"\n #endif\n+#ifndef CPP_CPU_DEFAULT_SPEC\n+Unrecognized value in TARGET_CPU_DEFAULT.\n #endif\n \n-/* Names to predefine in the preprocessor for this target machine.  */\n+/* Names to predefine in the preprocessor for this target machine.\n+   ??? It would be nice to not include any subtarget specific values here,\n+   however there's no way to portably provide subtarget values to\n+   CPP_PREFINES.  Also, -D values in CPP_SUBTARGET_SPEC don't get turned into\n+   into foo, __foo and __foo__.  */\n \n-/* ??? The GCC_NEW_VARARGS macro is now obsolete, because gcc always uses\n-   the right varags.h file when bootstrapping.  */\n-/* ??? It's not clear what value we want to use for -Acpu/machine for\n-   sparc64 in 32 bit environments, so for now we only use `sparc64' in\n-   64 bit environments.  */\n-/* ??? __arch64__ is subject to change.  */\n-\n-#if SPARC_ARCH64\n-#define CPP_PREDEFINES \\\n-  \"-Dsparc -Dsun -Dunix -D__arch64__ \\\n-   -Asystem(unix) -Asystem(bsd) -Acpu(sparc64) -Amachine(sparc64)\"\n-#else\n-#define CPP_PREDEFINES \\\n-  \"-Dsparc -Dsun -Dunix -D__GCC_NEW_VARARGS__ \\\n-   -Asystem(unix) -Asystem(bsd) -Acpu(sparc) -Amachine(sparc)\"\n-#endif\n+#define CPP_PREDEFINES \"-Dsparc -Dsun -Dunix -Asystem(unix) -Asystem(bsd)\"\n \n /* Define macros to distinguish architectures.  */\n \n-#if SPARC_ARCH64\n-#define CPP_SPEC \"\\\n-%{mint64:-D__INT_MAX__=9223372036854775807LL -D__LONG_MAX__=9223372036854775807LL} \\\n-%{mlong64:-D__LONG_MAX__=9223372036854775807LL} \\\n-\"\n-#else\n-#define CPP_SPEC \"%(cpp_cpu)\"\n-#endif\n-\n /* Common CPP definitions used by CPP_SPEC amongst the various targets\n    for handling -mcpu=xxx switches.  */\n-/* ??? v8plus/v9/ultrasparc handling is tentative */\n #define CPP_CPU_SPEC \"\\\n %{mcypress:} \\\n %{msparclite:-D__sparclite__} \\\n@@ -135,9 +163,34 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n %{mcpu=v8plus:-D__sparc_v9__} \\\n %{mcpu=v9:-D__sparc_v9__} \\\n %{mcpu=ultrasparc:-D__sparc_v9__} \\\n-%{!mcpu*:%{!mcypress:%{!msparclite:%{!mf930:%{!mf934:%{!mv8:%{!msupersparc:%(cpp_default)}}}}}}} \\\n+%{!mcpu*:%{!mcypress:%{!msparclite:%{!mf930:%{!mf934:%{!mv8:%{!msupersparc:%(cpp_cpu_default)}}}}}}} \\\n \"\n \n+/* ??? The GCC_NEW_VARARGS macro is now obsolete, because gcc always uses\n+   the right varags.h file when bootstrapping.  */\n+/* ??? It's not clear what value we want to use for -Acpu/machine for\n+   sparc64 in 32 bit environments, so for now we only use `sparc64' in\n+   64 bit environments.  */\n+\n+#define CPP_ARCH32_SPEC \"-D__GCC_NEW_VARARGS__ -Acpu(sparc) -Amachine(sparc)\"\n+#define CPP_ARCH64_SPEC \"-D__arch64__ -Acpu(sparc64) -Amachine(sparc64)\"\n+#define CPP_ARCH_DEFAULT_SPEC \\\n+(DEFAULT_ARCH32_P ? CPP_ARCH32_SPEC : CPP_ARCH64_SPEC)\n+\n+#define CPP_ARCH_SPEC \"\\\n+%{m32:%(cpp_arch32)} \\\n+%{m64:%(cpp_arch64)} \\\n+%{!m32:%{!m64:%(cpp_arch_default)}} \\\n+\"\n+\n+/* Macros to distinguish endianness.  */\n+#define CPP_ENDIAN_SPEC \"%{mlittle-endian:-D__LITTLE_ENDIAN__}\"\n+\n+/* Macros to distinguish the particular subtarget.  */\n+#define CPP_SUBTARGET_SPEC \"\"\n+\n+#define CPP_SPEC \"%(cpp_cpu) %(cpp_arch) %(cpp_endian) %(cpp_subtarget)\"\n+\n /* Prevent error on `-sun4' and `-target sun4' options.  */\n /* This used to translate -dalign to -malign, but that is no good\n    because it can't turn off the usual meaning of making debugging dumps.  */\n@@ -151,34 +204,46 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n %{mv8:-mcpu=v8} %{msupersparc:-mcpu=supersparc} \\\n \"\n \n-#define LIB_SPEC \"%{!shared:%{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p} %{g:-lg}}\"\n-\n-/* Provide required defaults for linker -e and -d switches.  */\n-\n-#define LINK_SPEC \\\n- \"%{!shared:%{!nostdlib:%{!r*:%{!e*:-e start}}} -dc -dp} %{static:-Bstatic} \\\n-  %{assert*} %{shared:%{!mimpure-text:-assert pure-text}}\"\n-\n-/* Special flags to the Sun-4 assembler when using pipe for input.  */\n-\n-#define ASM_SPEC \"\\\n-%| %{R} %{!pg:%{!p:%{fpic:-k} %{fPIC:-k}}} %{keep-local-as-symbols:-L} \\\n-%(asm_cpu) \\\n-\"\n-\n /* Override in target specific files.  */\n #define ASM_CPU_SPEC \"\\\n %{mcpu=sparclet:-Asparclet} %{mcpu=tsc701:-Asparclet} \\\n %{msparclite:-Asparclite} \\\n %{mf930:-Asparclite} %{mf934:-Asparclite} \\\n %{mcpu=sparclite:-Asparclite} \\\n %{mcpu=f930:-Asparclite} %{mcpu=f934:-Asparclite} \\\n-%{mcpu=v8plus:-Av9a} \\\n+%{mcpu=v8plus:-Av8plus} \\\n %{mcpu=v9:-Av9} \\\n %{mcpu=ultrasparc:-Av9a} \\\n-%{!mcpu*:%{!mcypress:%{!msparclite:%{!mf930:%{!mf934:%{!mv8:%{!msupersparc:%(asm_default)}}}}}}} \\\n+%{!mcpu*:%{!mcypress:%{!msparclite:%{!mf930:%{!mf934:%{!mv8:%{!msupersparc:%(asm_cpu_default)}}}}}}} \\\n \"\n \n+/* Word size selection, among other things.  */\n+#define ASM_ARCH32_SPEC \"-32\"\n+#define ASM_ARCH64_SPEC \"-64\"\n+#define ASM_ARCH_DEFAULT_SPEC \\\n+(DEFAULT_ARCH32_P ?  ASM_ARCH32_SPEC : ASM_ARCH64_SPEC)\n+\n+#define ASM_ARCH_SPEC \"\\\n+%{m32:%(asm_arch32)} \\\n+%{m64:%(asm_arch64)} \\\n+%{!m32:%{!m64:%(asm_arch_default)}} \\\n+\"\n+\n+/* Special flags to the Sun-4 assembler when using pipe for input.  */\n+\n+#define ASM_SPEC \"\\\n+%| %{R} %{!pg:%{!p:%{fpic:-k} %{fPIC:-k}}} %{keep-local-as-symbols:-L} \\\n+%(asm_cpu) %(asm_arch) \\\n+\"\n+\n+#define LIB_SPEC \"%{!shared:%{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p} %{g:-lg}}\"\n+\n+/* Provide required defaults for linker -e and -d switches.  */\n+\n+#define LINK_SPEC \\\n+ \"%{!shared:%{!nostdlib:%{!r*:%{!e*:-e start}}} -dc -dp} %{static:-Bstatic} \\\n+  %{assert*} %{shared:%{!mimpure-text:-assert pure-text}}\"\n+\n /* This macro defines names of additional specifications to put in the specs\n    that can be used in various specifications like CC1_SPEC.  Its definition\n    is an initializer with a subgrouping for each command option.\n@@ -189,22 +254,31 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n \n    Do not define this macro if it does not need to do anything.  */\n \n-#define EXTRA_SPECS\t\t\t\t\t\\\n+#define EXTRA_SPECS \\\n   { \"cpp_cpu\",\t\tCPP_CPU_SPEC },\t\t\t\\\n-  { \"cpp_default\",\tCPP_DEFAULT_SPEC },\t\t\\\n+  { \"cpp_cpu_default\",\tCPP_CPU_DEFAULT_SPEC },\t\t\\\n+  { \"cpp_arch32\",\tCPP_ARCH32_SPEC },\t\t\\\n+  { \"cpp_arch64\",\tCPP_ARCH64_SPEC },\t\t\\\n+  { \"cpp_arch_default\",\tCPP_ARCH_DEFAULT_SPEC },\t\\\n+  { \"cpp_arch\",\t\tCPP_ARCH_SPEC },\t\t\\\n+  { \"cpp_endian\",\tCPP_ENDIAN_SPEC },\t\t\\\n+  { \"cpp_subtarget\",\tCPP_SUBTARGET_SPEC },\t\t\\\n   { \"asm_cpu\",\t\tASM_CPU_SPEC },\t\t\t\\\n-  { \"asm_default\",\tASM_DEFAULT_SPEC },\t\t\\\n+  { \"asm_cpu_default\",\tASM_CPU_DEFAULT_SPEC },\t\t\\\n+  { \"asm_arch32\",\tASM_ARCH32_SPEC },\t\t\\\n+  { \"asm_arch64\",\tASM_ARCH64_SPEC },\t\t\\\n+  { \"asm_arch_default\",\tASM_ARCH_DEFAULT_SPEC },\t\\\n+  { \"asm_arch\",\t\tASM_ARCH_SPEC },\t\t\\\n   SUBTARGET_EXTRA_SPECS\n \n #define SUBTARGET_EXTRA_SPECS\n \f\n-#if SPARC_ARCH64\n-#define PTRDIFF_TYPE \"long long int\"\n-#define SIZE_TYPE \"long long unsigned int\"\n-#else\n-#define PTRDIFF_TYPE \"int\"\n-/* The default value for SIZE_TYPE is \"unsigned int\" which is what we want.  */\n+#ifdef SPARC_BI_ARCH\n+#define NO_BUILTIN_PTRDIFF_TYPE\n+#define NO_BUILTIN_SIZE_TYPE\n #endif\n+#define PTRDIFF_TYPE (TARGET_ARCH64 ? \"long long int\" : \"int\")\n+#define SIZE_TYPE (TARGET_ARCH64 ? \"long long unsigned int\" : \"unsigned int\")\n \n /* ??? This should be 32 bits for v9 but what can we do?  */\n #define WCHAR_TYPE \"short unsigned int\"\n@@ -335,48 +409,21 @@ extern int target_flags;\n #define MASK_LITTLE_ENDIAN 0x1000\n #define TARGET_LITTLE_ENDIAN (target_flags & MASK_LITTLE_ENDIAN)\n \n-/* Nonzero if ints are 64 bits.\n-   This automatically implies longs are 64 bits too.\n-   This option is for v9 only.  */\n-#define MASK_INT64 0x2000\n-#define TARGET_INT64 (target_flags & MASK_INT64)\n-\n-/* Nonzero if longs are 64 bits.\n-   This option is for v9 only.  */\n-#define MASK_LONG64 0x4000\n-#define TARGET_LONG64 (target_flags & MASK_LONG64)\n+/* 0x2000, 0x4000 are unused */\n \n /* Nonzero if pointers are 64 bits.\n    This is not a user selectable option, though it may be one day -\n    so it is used to determine pointer size instead of an architecture flag.  */\n #define MASK_PTR64 0x8000\n #define TARGET_PTR64 (target_flags & MASK_PTR64)\n \n-/* Nonzero if generating code to run in a 64 bit environment.  */\n-#define MASK_ARCH64 0x10000\n-#define TARGET_ARCH64 (target_flags & MASK_ARCH64)\n-#define TARGET_ARCH32 (! TARGET_ARCH64)\n-\n-/* SPARC64 memory models.\n-   TARGET_MEDLOW: 32 bit address space, top 32 bits = 0,\n-                  avoid generating %uhi and %ulo terms.\n-                  (pointers can be 32 or 64 bits)\n-   TARGET_MEDANY: 64 bit address space, data segment restricted to 4G, but\n-                  can be loaded anywhere (use %g4 as offset).\n-   TARGET_FULLANY: 64 bit address space, no restrictions.\n-                   This option is not fully supported yet.\n-   These options are for v9 only.  All mask values are nonzero so the v8\n-   compiler can assume this stuff won't interfere.  */\n-#define MASK_MEDLOW 0x20000\n-#define MASK_MEDANY 0x40000\n-#define MASK_FULLANY 0x60000\n-#define MASK_CODE_MODEL (MASK_MEDLOW + MASK_MEDANY)\n-#define TARGET_MEDLOW ((target_flags & MASK_CODE_MODEL) == MASK_MEDLOW)\n-#define TARGET_MEDANY ((target_flags & MASK_CODE_MODEL) == MASK_MEDANY)\n-#define TARGET_FULLANY ((target_flags & MASK_CODE_MODEL) == MASK_FULLANY)\n-\n-/* ??? There are hardcoded references to this reg in the .md file.  */\n-#define MEDANY_BASE_REG \"%g4\"\n+/* Nonzero if generating code to run in a 64 bit environment.\n+   This is intended to only be used by TARGET_ARCH{32,64} as they are the\n+   mechanism used to control compile time or run time selection.  */\n+#define MASK_64BIT 0x10000\n+#define TARGET_64BIT (target_flags & MASK_64BIT)\n+\n+/* 0x20000,0x40000 unused */\n \n /* Non-zero means use a stack bias of 2047.  Stack offsets are obtained by\n    adding 2047 to %sp.  This option is for v9 only and is the default.  */\n@@ -427,15 +474,22 @@ extern int target_flags;\n     {\"no-app-regs\", -MASK_APP_REGS},\t\\\n     {\"hard-quad-float\", MASK_HARD_QUAD}, \\\n     {\"soft-quad-float\", -MASK_HARD_QUAD}, \\\n-    /* ??? These are coerced to -mcpu=.  Delete in 2.9.  */ \\\n+    /* ??? These are deprecated, coerced to -mcpu=.  Delete in 2.9.  */ \\\n     {\"cypress\", 0},\t\t\t\\\n     {\"sparclite\", 0},\t\t\t\\\n     {\"f930\", 0},\t\t\t\\\n     {\"f934\", 0},\t\t\t\\\n     {\"v8\", 0},\t\t\t\t\\\n     {\"supersparc\", 0},\t\t\t\\\n+    /* End of deprecated options.  */\t\\\n+    /* -mptrNN exists for *experimental* purposes.  */ \\\n+/*  {\"ptr64\", MASK_PTR64}, */\t\t\\\n+/*  {\"ptr32\", -MASK_PTR64}, */\t\t\\\n+    {\"32\", -MASK_64BIT},\t\t\\\n+    {\"64\", MASK_64BIT},\t\t\t\\\n+    {\"stack-bias\", MASK_STACK_BIAS},\t\\\n+    {\"no-stack-bias\", -MASK_STACK_BIAS}, \\\n     SUBTARGET_SWITCHES\t\t\t\\\n-    ARCH64_SWITCHES\t\t\t\\\n     { \"\", TARGET_DEFAULT}}\n \n /* MASK_APP_REGS must always be the default because that's what\n@@ -446,32 +500,6 @@ extern int target_flags;\n /* This is meant to be redefined in target specific files.  */\n #define SUBTARGET_SWITCHES\n \n-/* ??? Until we support a combination 32/64 bit compiler, these options\n-   are only defined for the v9 compiler in a true 64 bit environment.  */\n-#if SPARC_ARCH64\n-#define ARCH64_SWITCHES \\\n-/*  {\"arch32\", -MASK_ARCH64}, */\t\\\n-/*  {\"arch64\", MASK_ARCH64}, */\t\t\\\n-    {\"int64\", MASK_INT64+MASK_LONG64},\t\\\n-    {\"int32\", -MASK_INT64},\t\t\\\n-    {\"int32\", MASK_LONG64},\t\t\\\n-    {\"long64\", -MASK_INT64},\t\t\\\n-    {\"long64\", MASK_LONG64},\t\t\\\n-    {\"long32\", -(MASK_INT64+MASK_LONG64)}, \\\n-/*  {\"ptr64\", MASK_PTR64}, */\t\t\\\n-/*  {\"ptr32\", -MASK_PTR64}, */\t\t\\\n-    {\"stack-bias\", MASK_STACK_BIAS},\t\\\n-    {\"no-stack-bias\", -MASK_STACK_BIAS}, \\\n-    {\"medlow\", -MASK_CODE_MODEL},\t\\\n-    {\"medlow\", MASK_MEDLOW},\t\t\\\n-    {\"medany\", -MASK_CODE_MODEL},\t\\\n-    {\"medany\", MASK_MEDANY},\t\t\\\n-    {\"fullany\", -MASK_CODE_MODEL},\t\\\n-    {\"fullany\", MASK_FULLANY},\n-#else\n-#define ARCH64_SWITCHES\n-#endif\n-\n /* Processor type.\n    These must match the values for the cpu attribute in sparc.md.  */\n enum processor_type {\n@@ -515,11 +543,12 @@ extern enum processor_type sparc_cpu;\n \n #define TARGET_OPTIONS \\\n {\t\t\t\t\t\t\t\\\n-  {\"cpu=\",  &sparc_select[1].string},\t\t\t\\\n-  {\"tune=\", &sparc_select[2].string},\t\t\t\\\n-  {\"align-loops=\",\t&sparc_align_loops_string },\t\\\n-  {\"align-jumps=\",\t&sparc_align_jumps_string },\t\\\n-  {\"align-functions=\",\t&sparc_align_funcs_string },\t\\\n+  { \"cpu=\",  &sparc_select[1].string },\t\t\t\\\n+  { \"tune=\", &sparc_select[2].string },\t\t\t\\\n+  { \"cmodel=\", &sparc_cmodel_string },\t\t\t\\\n+  { \"align-loops=\",\t&sparc_align_loops_string },\t\\\n+  { \"align-jumps=\",\t&sparc_align_jumps_string },\t\\\n+  { \"align-functions=\",\t&sparc_align_funcs_string },\t\\\n   SUBTARGET_OPTIONS \t\t\t\t\t\\\n }\n \n@@ -591,16 +620,17 @@ extern int sparc_align_funcs;\n /* Now define the sizes of the C data types.  */\n \n #define SHORT_TYPE_SIZE\t\t16\n-#define INT_TYPE_SIZE\t\t(TARGET_INT64 ? 64 : 32)\n-#define LONG_TYPE_SIZE\t\t(TARGET_LONG64 ? 64 : 32)\n+#define INT_TYPE_SIZE\t\t32\n+#define LONG_TYPE_SIZE\t\t(TARGET_ARCH64 ? 64 : 32)\n #define LONG_LONG_TYPE_SIZE\t64\n #define FLOAT_TYPE_SIZE\t\t32\n #define DOUBLE_TYPE_SIZE\t64\n \n-#define MAX_INT_TYPE_SIZE\t64\n+#if defined (SPARC_BI_ARCH)\n #define MAX_LONG_TYPE_SIZE\t64\n+#endif\n \n-#if SPARC_ARCH64\n+#if 0\n /* ??? This does not work in SunOS 4.x, so it is not enabled here.\n    Instead, it is enabled in sol2.h, because it does work under Solaris.  */\n /* Define for support of TFmode long double and REAL_ARITHMETIC.\n@@ -655,7 +685,6 @@ if (TARGET_ARCH64\t\t\t\t\\\n #define FUNCTION_BOUNDARY (1 << (sparc_align_funcs + 3))\n \n /* Alignment of field after `int : 0' in a structure.  */\n-/* ??? Should this be based on TARGET_INT64?  */\n #define EMPTY_FIELD_BOUNDARY (TARGET_ARCH64 ? 64 : 32)\n \n /* Every structure's size must be a multiple of this.  */\n@@ -791,11 +820,14 @@ if (TARGET_ARCH64\t\t\t\t\\\n    g5 through g7 are reserved for the operating system.\n \n    On v9 systems:\n-   g1,g4,g5 are free to use as temporaries.\n-   g1,g5 are free to use between calls if call is to external function via PLT.\n+   g1,g5 are free to use as temporaries, and are free to use between calls\n+   if the call is to an external function via the PLT.\n+   g4 is free to use as a temporary in the non-embedded case.\n+   g4 is reserved in the embedded case.\n    g2-g3 are reserved for applications.  Gcc normally uses them as\n    temporaries, but this can be disabled via the -mno-app-regs option.\n-   g6-g7 are reserved for the operating system.\n+   g6-g7 are reserved for the operating system (or application in\n+   embedded case).\n    ??? Register 1 is used as a temporary by the 64 bit sethi pattern, so must\n    currently be a fixed register until this pattern is rewritten.\n    Register 1 is also used when restoring call-preserved registers in large\n@@ -854,11 +886,11 @@ if (TARGET_ARCH64\t\t\t\t\\\n #define CONDITIONAL_REGISTER_USAGE\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n-    if (! SPARC_ARCH64)\t\t\t\t\t\t\\\n+    if (TARGET_ARCH32)\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\\\n \tfixed_regs[5] = 1;\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\\\n-    if (SPARC_ARCH64)\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\\\n \tfixed_regs[1] = 1;\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\\\n@@ -884,7 +916,7 @@ do\t\t\t\t\t\t\t\t\\\n     /* Don't unfix g2-g4 if they were fixed with -ffixed-.  */\t\\\n     fixed_regs[2] |= ! TARGET_APP_REGS;\t\t\t\t\\\n     fixed_regs[3] |= ! TARGET_APP_REGS;\t\t\t\t\\\n-    fixed_regs[4] |= ! TARGET_APP_REGS || TARGET_MEDANY;\t\\\n+    fixed_regs[4] |= ! TARGET_APP_REGS || TARGET_CM_EMBMEDANY;\t\\\n     if (TARGET_FLAT)\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\\\n \t/* Let the compiler believe the frame pointer is still\t\\\n@@ -962,7 +994,7 @@ extern int sparc_mode_class[];\n #define STACK_POINTER_OFFSET FIRST_PARM_OFFSET(0)\n \n /* The stack bias (amount by which the hardware register is offset by).  */\n-#define SPARC_STACK_BIAS (TARGET_STACK_BIAS ? 2047 : 0)\n+#define SPARC_STACK_BIAS ((TARGET_ARCH64 && TARGET_STACK_BIAS) ? 2047 : 0)\n \n /* Is stack biased? */\n #define STACK_BIAS SPARC_STACK_BIAS\n@@ -1579,11 +1611,9 @@ function_arg_padding ((MODE), (TYPE))\n    space at some point.\n    ??? Use assign_stack_temp?  */\n \n-extern void sparc64_init_expanders ();\n+extern void sparc_init_expanders ();\n extern struct rtx_def *sparc64_fpconv_stack_temp ();\n-#if SPARC_ARCH64\n-#define INIT_EXPANDERS sparc64_init_expanders ()\n-#endif\n+#define INIT_EXPANDERS sparc_init_expanders ()\n \n /* Define the information needed to generate branch and scc insns.  This is\n    stored from the compare operation.  Note that we can't use \"rtx\" here\n@@ -1655,8 +1685,6 @@ extern int leaf_function;\n     fputs (\"\\tsethi %hi(\", FILE);\t\t\t\t\\\n     assemble_name (FILE, buf);\t\t\t\t\t\\\n     fputs (\"),%o0\\n\", FILE);\t\t\t\t\t\\\n-    if (TARGET_MEDANY)\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tadd %%o0,%s,%%o0\\n\", MEDANY_BASE_REG);\t\\\n     fputs (\"\\tcall mcount\\n\\tadd %o0,%lo(\", FILE);\t\t\\\n     assemble_name (FILE, buf);\t\t\t\t\t\\\n     fputs (\"),%o0\\n\", FILE);\t\t\t\t\t\\\n@@ -1756,20 +1784,12 @@ do\t\t\t\t\t\t\t\\\n     switch (profile_block_flag)\t\t\t\t\\\n       {\t\t\t\t\t\t\t\\\n       case 2:\t\t\t\t\t\t\\\n-        if (TARGET_MEDANY)\t\t\t\t\\\n-          fprintf (FILE, \"\\tsethi %%hi(LPBX0),%%o0\\n\\tor %%0,%%lo(LPBX0),%%o0\\n\\tadd %%o0,%s,%%o0\\n\\tsethi %%hi(%d),%%o1\\n\\tcall ___bb_init_trace_func\\n\\tadd %g0,%%lo(%d),%%o1\\n\",\\\n-                   MEDANY_BASE_REG, bol, bol);\t\t\\\n-        else\t\t\t\t\t\t\\\n-          fprintf (FILE, \"\\tsethi %%hi(LPBX0),%%o0\\n\\tor %%o0,%%lo(LPBX0),%%o0\\n\\tsethi %%hi(%d),%%o1\\n\\tcall ___bb_init_trace_func\\n\\tor %%o1,%%lo(%d),%%o1\\n\",\\\n-                   bol, bol);\t\t\t\t\\\n+        fprintf (FILE, \"\\tsethi %%hi(LPBX0),%%o0\\n\\tor %%o0,%%lo(LPBX0),%%o0\\n\\tsethi %%hi(%d),%%o1\\n\\tcall ___bb_init_trace_func\\n\\tor %%o1,%%lo(%d),%%o1\\n\",\\\n+                 bol, bol);\t\t\t\t\\\n         break;\t\t\t\t\t\t\\\n       default:\t\t\t\t\t\t\\\n-        if (TARGET_MEDANY)\t\t\t\t\\\n-          fprintf (FILE, \"\\tsethi %%hi(LPBX0),%%o0\\n\\tor %%0,%%lo(LPBX0),%%o0\\n\\tld [%s+%%o0],%%o1\\n\\ttst %%o1\\n\\tbne LPY%d\\n\\tadd %%o0,%s,%%o0\\n\\tcall ___bb_init_func\\n\\tnop\\nLPY%d:\\n\",\\\n-                   MEDANY_BASE_REG, bol, MEDANY_BASE_REG, bol);\\\n-        else\t\t\t\t\t\t\\\n-          fprintf (FILE, \"\\tsethi %%hi(LPBX0),%%o0\\n\\tld [%%lo(LPBX0)+%%o0],%%o1\\n\\ttst %%o1\\n\\tbne LPY%d\\n\\tadd %%o0,%%lo(LPBX0),%%o0\\n\\tcall ___bb_init_func\\n\\tnop\\nLPY%d:\\n\",\\\n-                   bol, bol);\t\t\t\t\\\n+        fprintf (FILE, \"\\tsethi %%hi(LPBX0),%%o0\\n\\tld [%%lo(LPBX0)+%%o0],%%o1\\n\\ttst %%o1\\n\\tbne LPY%d\\n\\tadd %%o0,%%lo(LPBX0),%%o0\\n\\tcall ___bb_init_func\\n\\tnop\\nLPY%d:\\n\",\\\n+                 bol, bol);\t\t\t\t\\\n         break;\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\\\n@@ -1847,21 +1867,13 @@ do\t\t\t\t\t\\\n     switch (profile_block_flag)\t\t\\\n       {\t\t\t\t\t\\\n       case 2:\t\t\t\t\\\n-        if (TARGET_MEDANY)\t\t\\\n-          fprintf (FILE, \"\\tsethi %%hi(___bb),%%g1\\n\\tor %%0,%%lo(___bb),%%g1\\n\\tsethi %%hi(%d),%%g2\\n\\tor %%g2,%%lo(%d),%%g2\\n\\tst %%g2,[%s+%%g1]\\n\\tsethi %%hi(LPBX0),%%g2\\n\\tor %%0,%%lo(LPBX0),%%g2\\n\\tadd %%g2,%s,%%g2\\n\\tadd 4,%%g1,%%g1\\n\\tst %%g2,[%%g1+%%lo(___bb)]\\n\\tmov %%o7,%%g2\\n\\tcall ___bb_trace_func\\n\\tnop\\n\\tmov %%g2,%%o7\\n\",\\\n-                   blockn, blockn, MEDANY_BASE_REG, MEDANY_BASE_REG); \\\n-        else\t\t\t\t\\\n-          fprintf (FILE, \"\\tsethi %%hi(___bb),%%g1\\n\\tsethi %%hi(%d),%%g2\\n\\tor %%g2,%%lo(%d),%%g2\\n\\tst %%g2,[%%lo(___bb)+%%g1]\\n\\tsethi %%hi(LPBX0),%%g2\\n\\tor %%g2,%%lo(LPBX0),%%g2\\n\\tadd 4,%%g1,%%g1\\n\\tst %%g2,[%%lo(___bb)+%%g1]\\n\\tmov %%o7,%%g2\\n\\tcall ___bb_trace_func\\n\\tnop\\n\\tmov %%g2,%%o7\\n\",\\\n-                   blockn, blockn); \\\n+        fprintf (FILE, \"\\tsethi %%hi(___bb),%%g1\\n\\tsethi %%hi(%d),%%g2\\n\\tor %%g2,%%lo(%d),%%g2\\n\\tst %%g2,[%%lo(___bb)+%%g1]\\n\\tsethi %%hi(LPBX0),%%g2\\n\\tor %%g2,%%lo(LPBX0),%%g2\\n\\tadd 4,%%g1,%%g1\\n\\tst %%g2,[%%lo(___bb)+%%g1]\\n\\tmov %%o7,%%g2\\n\\tcall ___bb_trace_func\\n\\tnop\\n\\tmov %%g2,%%o7\\n\",\\\n+                 blockn, blockn); \\\n         break;\t\t\t\t\\\n       default:\t\t\t\t\\\n-        if (TARGET_MEDANY)\t\t\\\n-          fprintf (FILE, \"\\tsethi %%hi(LPBX2+%d),%%g1\\n\\tor %%g1,%%lo(LPBX2+%d),%%g1\\n\\tld [%%g1+%s],%%g2\\n\\tadd %%g2,1,%%g2\\n\\tst %%g2,[%%g1+%s]\\n\", \\\n-                         4 * blockn, 4 * blockn, MEDANY_BASE_REG, MEDANY_BASE_REG); \\\n-        else\t\t\t\t\\\n-          fprintf (FILE, \"\\tsethi %%hi(LPBX2+%d),%%g1\\n\\tld [%%lo(LPBX2+%d)+%%g1],%%g2\\n\\\n+        fprintf (FILE, \"\\tsethi %%hi(LPBX2+%d),%%g1\\n\\tld [%%lo(LPBX2+%d)+%%g1],%%g2\\n\\\n \\tadd %%g2,1,%%g2\\n\\tst %%g2,[%%lo(LPBX2+%d)+%%g1]\\n\", \\\n-                   4 * blockn, 4 * blockn, 4 * blockn); \\\n+                 4 * blockn, 4 * blockn, 4 * blockn); \\\n         break;\t\t\t\t\\\n       }\t\t\t\t\t\\\n   }\t\t\t\t\t\\\n@@ -2436,12 +2448,12 @@ extern struct rtx_def *legitimize_pic_address ();\n #define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\n \n /* If we are referencing a function make the SYMBOL_REF special.\n-   In the Medium/Anywhere code model, %g4 points to the data segment so we\n-   must not add it to function addresses.  */\n+   In the Embedded Medium/Anywhere code model, %g4 points to the data segment\n+   so we must not add it to function addresses.  */\n \n #define ENCODE_SECTION_INFO(DECL) \\\n   do {\t\t\t\t\t\t\t\\\n-    if (TARGET_MEDANY && TREE_CODE (DECL) == FUNCTION_DECL) \\\n+    if (TARGET_CM_EMBMEDANY && TREE_CODE (DECL) == FUNCTION_DECL) \\\n       SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;\t\\\n   } while (0)\n \f\n@@ -2910,7 +2922,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   ASM_GENERATE_INTERNAL_LABEL (label, \"L\", VALUE);\t\t\t\\\n   if (Pmode == SImode)\t\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\t.word\\t\");\t\t\t\t\t\\\n-  else if (TARGET_MEDLOW)\t\t\t\t\t\t\\\n+  else if (TARGET_CM_MEDLOW)\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\t.word\\t0\\n\\t.word\\t\");\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\t.xword\\t\");\t\t\t\t\t\\\n@@ -2927,7 +2939,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   ASM_GENERATE_INTERNAL_LABEL (label, \"L\", VALUE);\t\t\t\\\n   if (Pmode == SImode)\t\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\t.word\\t\");\t\t\t\t\t\\\n-  else if (TARGET_MEDLOW)\t\t\t\t\t\t\\\n+  else if (TARGET_CM_MEDLOW)\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\t.word\\t0\\n\\t.word\\t\");\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\t.xword\\t\");\t\t\t\t\t\\\n@@ -3014,7 +3026,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t(FILE, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (FUNCTION)));\t\\\n       fprintf (FILE, \",0\\n\");\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n-  else if (TARGET_MEDANY || TARGET_FULLANY)\t\t\t\t\\\n+  else if (TARGET_CM_EMBMEDANY)\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       fprintf (FILE, \"\\tsetx \");\t\t\t\t\t\\\n       assemble_name\t\t\t\t\t\t\t\\\n@@ -3055,7 +3067,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define TARGET_CR 015\n \n #define PRINT_OPERAND_PUNCT_VALID_P(CHAR) \\\n-  ((CHAR) == '#' || (CHAR) == '*' || (CHAR) == '^' || (CHAR) == '(')\n+  ((CHAR) == '#' || (CHAR) == '*' || (CHAR) == '^' || (CHAR) == '(' || (CHAR) == '_')\n \n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified."}, {"sha": "de1f090bcdb5ed63b3bb3b4248091ae6d5cdb224", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a301fc978b4f62767e662efef007e7fd25a443/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a301fc978b4f62767e662efef007e7fd25a443/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=a0a301fc978b4f62767e662efef007e7fd25a443", "patch": "@@ -1777,61 +1777,58 @@\n ;; Most of the required support for the various code models is here.\n ;; We can do this because sparcs need the high insn to load the address.  We\n ;; just need to get high to do the right thing for each code model.  Then each\n-;; uses the same \"%X+%lo(...)\" in the load/store insn.\n+;; uses the same \"%X+%lo(...)\" in the load/store insn, though in the case of\n+;; the medium/middle code model \"%lo\" is written \"%l44\".\n \n-;; When TARGET_MEDLOW, assume that the upper 32 bits of symbol addresses are\n+;; When TARGET_CM_MEDLOW, assume that the upper 32 bits of symbol addresses are\n ;; always 0.\n-;; When TARGET_MEDANY, the text and data segments have a maximum size of 32\n-;; bits and may be located anywhere.  MEDANY_BASE_REG contains the start\n+;; When TARGET_CM_MEDMID, the executable must be in the low 16 TB of memory.\n+;; This corresponds to the low 44 bits, and the %[hml]44 relocs are used.\n+;; ??? Not implemented yet.\n+;; When TARGET_CM_EMBMEDANY, the text and data segments have a maximum size of\n+;; 31 bits and may be located anywhere.  EMBMEDANY_BASE_REG contains the start\n ;; address of the data segment, currently %g4.\n-;; When TARGET_FULLANY, symbolic addresses are 64 bits.\n+;; When TARGET_CM_MEDANY, the text and data segments have a maximum size of 31\n+;; bits and may be located anywhere.  The maximum offset from any instruction\n+;; to the label _GLOBAL_OFFSET_TABLE_ is 31 bits.\n \n (define_insn \"*sethi_di_medlow\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(high:DI (match_operand 1 \"\" \"\")))\n   ;; The clobber is here because emit_move_sequence assumes the worst case.\n    (clobber (reg:DI 1))]\n-  \"TARGET_MEDLOW && check_pic (1)\"\n+  \"TARGET_CM_MEDLOW && check_pic (1)\"\n   \"sethi %%hi(%a1),%0\"\n   [(set_attr \"type\" \"move\")\n    (set_attr \"length\" \"1\")])\n \n (define_insn \"*sethi_di_medium_pic\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(high:DI (match_operand 1 \"sp64_medium_pic_operand\" \"\")))]\n-  \"(TARGET_MEDLOW || TARGET_MEDANY) && check_pic (1)\"\n+  \"(TARGET_CM_MEDLOW || TARGET_CM_EMBMEDANY) && check_pic (1)\"\n   \"sethi %%hi(%a1),%0\"\n   [(set_attr \"type\" \"move\")\n    (set_attr \"length\" \"1\")])\n \n ;; WARNING: %0 gets %hi(%1)+%g4.\n ;;          You cannot OR in %lo(%1), it must be added in.\n \n-(define_insn \"*sethi_di_medany_data\"\n+(define_insn \"*sethi_di_embmedany_data\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(high:DI (match_operand 1 \"data_segment_operand\" \"\")))\n   ;; The clobber is here because emit_move_sequence assumes the worst case.\n    (clobber (reg:DI 1))]\n-  \"TARGET_MEDANY && check_pic (1)\"\n-  \"sethi %%hi(%a1),%0; add %0,%%g4,%0\"\n+  \"TARGET_CM_EMBMEDANY && check_pic (1)\"\n+  \"sethi %%hi(%a1),%0; add %0,%_,%0\"\n   [(set_attr \"type\" \"move\")\n    (set_attr \"length\" \"2\")])\n \n-(define_insn \"*sethi_di_medany_text\"\n+(define_insn \"*sethi_di_embmedany_text\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(high:DI (match_operand 1 \"text_segment_operand\" \"\")))\n   ;; The clobber is here because emit_move_sequence assumes the worst case.\n    (clobber (reg:DI 1))]\n-  \"TARGET_MEDANY && check_pic (1)\"\n-  \"sethi %%uhi(%a1),%%g1; or %%g1,%%ulo(%a1),%%g1; sllx %%g1,32,%%g1; sethi %%hi(%a1),%0; or %0,%%g1,%0\"\n-  [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"5\")])\n-\n-(define_insn \"*sethi_di_fullany\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(high:DI (match_operand 1 \"\" \"\")))\n-   (clobber (reg:DI 1))]\n-  \"TARGET_FULLANY && check_pic (1)\"\n+  \"TARGET_CM_EMBMEDANY && check_pic (1)\"\n   \"sethi %%uhi(%a1),%%g1; or %%g1,%%ulo(%a1),%%g1; sllx %%g1,32,%%g1; sethi %%hi(%a1),%0; or %0,%%g1,%0\"\n   [(set_attr \"type\" \"move\")\n    (set_attr \"length\" \"5\")])"}, {"sha": "7665708db16a18eae8c6300016f8f5e70f19b16c", "filename": "gcc/config/sparc/splet.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a301fc978b4f62767e662efef007e7fd25a443/gcc%2Fconfig%2Fsparc%2Fsplet.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a301fc978b4f62767e662efef007e7fd25a443/gcc%2Fconfig%2Fsparc%2Fsplet.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsplet.h?ref=a0a301fc978b4f62767e662efef007e7fd25a443", "patch": "@@ -36,12 +36,6 @@ Boston, MA 02111-1307, USA.  */\n {\"broken-saverestore\", MASK_BROKEN_SAVERESTORE},\t\\\n {\"no-broken-saverestore\", -MASK_BROKEN_SAVERESTORE},\n \n-#undef CPP_SPEC\n-#define CPP_SPEC \"\\\n-%(cpp_cpu) \\\n-%{mlittle-endian:-D__LITTLE_ENDIAN__} \\\n-\"\n-\n #undef ASM_SPEC\n #define ASM_SPEC \"%{mlittle-endian:-EL} %(asm_cpu)\"\n "}, {"sha": "4c12769b1db6f3dec0b8eaad84b31e701b90149c", "filename": "gcc/config/sparc/sysv4.h", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a301fc978b4f62767e662efef007e7fd25a443/gcc%2Fconfig%2Fsparc%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a301fc978b4f62767e662efef007e7fd25a443/gcc%2Fconfig%2Fsparc%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsysv4.h?ref=a0a301fc978b4f62767e662efef007e7fd25a443", "patch": "@@ -52,9 +52,7 @@ Boston, MA 02111-1307, USA.  */\n    the Sparc running svr4.  __svr4__ is our extension.  */\n \n #define CPP_PREDEFINES \\\n-  \"-Dsparc -Dunix -D__svr4__ \\\n-   -Asystem(unix) -Asystem(svr4) -Acpu(sparc) -Amachine(sparc) \\\n-   -D__GCC_NEW_VARARGS__\"\n+\"-Dsparc -Dunix -D__svr4__ -Asystem(unix) -Asystem(svr4)\"\n \n /* The native assembler can't compute differences between symbols in different\n    sections when generating pic code, so we must put jump tables in the\n@@ -201,12 +199,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef FUNCTION_BLOCK_PROFILER\n #define FUNCTION_BLOCK_PROFILER(FILE, LABELNO)  \\\n   do { \\\n-    if (TARGET_MEDANY) \\\n-      fprintf (FILE, \"\\tsethi %%hi(.LLPBX0),%%o0\\n\\tor %%0,%%lo(.LLPBX0),%%o0\\n\\tld [%s+%%o0],%%o1\\n\\ttst %%o1\\n\\tbne .LLPY%d\\n\\tadd %%o0,%s,%%o0\\n\\tcall __bb_init_func\\n\\tnop\\nLPY%d:\\n\", \\\n-\t       MEDANY_BASE_REG, (LABELNO), MEDANY_BASE_REG, (LABELNO)); \\\n-    else \\\n-      fprintf (FILE, \"\\tsethi %%hi(.LLPBX0),%%o0\\n\\tld [%%lo(.LLPBX0)+%%o0],%%o1\\n\\ttst %%o1\\n\\tbne LPY%d\\n\\tadd %%o0,%%lo(.LLPBX0),%%o0\\n\\tcall __bb_init_func\\n\\tnop\\nLPY%d:\\n\", \\\n-\t       (LABELNO), (LABELNO)); \\\n+    fprintf (FILE, \"\\tsethi %%hi(.LLPBX0),%%o0\\n\\tld [%%lo(.LLPBX0)+%%o0],%%o1\\n\\ttst %%o1\\n\\tbne LPY%d\\n\\tadd %%o0,%%lo(.LLPBX0),%%o0\\n\\tcall __bb_init_func\\n\\tnop\\nLPY%d:\\n\", \\\n+\t     (LABELNO), (LABELNO)); \\\n   } while (0)\n \n /* Output assembler code to FILE to increment the entry-count for\n@@ -216,13 +210,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define BLOCK_PROFILER(FILE, BLOCKNO) \\\n { \\\n   int blockn = (BLOCKNO); \\\n-  if (TARGET_MEDANY) \\\n-    fprintf (FILE, \"\\tsethi %%hi(.LLPBX2+%d),%%g1\\n\\tor %%g1,%%lo(.LLPBX2+%d),%%g1\\n\\tld [%%g1+%s],%%g2\\n\\tadd %%g2,1,%%g2\\n\\tst %%g2,[%%g1+%s]\\n\", \\\n-\t     4 * blockn, 4 * blockn, MEDANY_BASE_REG, MEDANY_BASE_REG); \\\n-  else \\\n-    fprintf (FILE, \"\\tsethi %%hi(.LLPBX2+%d),%%g1\\n\\tld [%%lo(.LLPBX2+%d)+%%g1],%%g2\\n\\\n+  fprintf (FILE, \"\\tsethi %%hi(.LLPBX2+%d),%%g1\\n\\tld [%%lo(.LLPBX2+%d)+%%g1],%%g2\\n\\\n \\tadd %%g2,1,%%g2\\n\\tst %%g2,[%%lo(.LLPBX2+%d)+%%g1]\\n\", \\\n-\t     4 * blockn, 4 * blockn, 4 * blockn); \\\n+\t   4 * blockn, 4 * blockn, 4 * blockn); \\\n }\n \n /* A C statement (sans semicolon) to output to the stdio stream"}]}