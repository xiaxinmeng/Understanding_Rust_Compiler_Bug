{"sha": "bd2c62704bb7e012a3e780dec1288678f51bcd6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQyYzYyNzA0YmI3ZTAxMmEzZTc4MGRlYzEyODg2NzhmNTFiY2Q2Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-01-09T21:48:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-01-09T21:48:33Z"}, "message": "re PR translation/79019 (translatable string typo in cif-code.def:141)\n\n\tPR translation/79019\n\tPR translation/79020\n\t* params.def (PARAM_INLINE_MIN_SPEEDUP,\n\tPARAM_IPA_CP_SINGLE_CALL_PENALTY,\n\tPARAM_USE_AFTER_SCOPE_DIRECT_EMISSION_THRESHOLD): Fix typos\n\tin descriptions.\n\t* config/avr/avr.opt (maccumulate-args): Likewise.\n\t* config/msp430/msp430.opt (mwarn-mcu): Likewise.\n\t* common.opt (freport-bug): Likewise.\n\t* cif-code.def (CIF_FINAL_ERROR): Likewise.\n\t* doc/invoke.texi (ipa-cp-single-call-penalty): Likewise.\n\t* config/s390/s390.c (s390_invalid_binary_op): Fix spelling in\n\ttranslatable string.\n\t* config/i386/i386.c (function_value_32): Likewise.\n\t* config/nios2/nios2.c (nios2_valid_target_attribute_rec): Likewise.\n\t* config/msp430/msp430.c (msp430_option_override, msp430_attr):\n\tLikewise.\n\t* config/msp430/driver-msp430.c (msp430_select_hwmult_lib): Likewise.\n\t* common/config/msp430/msp430-common.c (msp430_handle_option):\n\tLikewise.\n\t* symtab.c (symtab_node::verify_base): Likewise.\n\t* opts.c (set_debug_level): Likewise.\n\t* tree.c (verify_type_variant): Likewise.  Fix typo in comment.\n\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin): Add\n\tmissing whitespace to translatable strings.\n\t* config/avr/avr.md (bswapsi2): Fix typo in comment.\n\t* config/sh/superh.h: Likewise.\n\t* config/i386/xopintrin.h: Likewise.\n\t* config/i386/znver1.md: Likewise.\n\t* config/rs6000/rs6000.c (struct rs6000_opt_mask): Likewise.\n\t* ipa-inline-analysis.c (compute_inline_parameters): Likewise.\n\t* double-int.h (struct double_int): Likewise.\n\t* double-int.c (div_and_round_double): Likewise.\n\t* wide-int.cc: Likewise.\n\t* tree-ssa.c (non_rewritable_mem_ref_base): Likewise.\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Likewise.\n\t* cfgcleanup.c (crossjumps_occured): Renamed to ...\n\t(crossjumps_occurred): ... this.\n\t(try_crossjump_bb, try_head_merge_bb, try_optimize_cfg, cleanup_cfg):\n\tAdjust all uses.\ncp/\n\t* semantics.c (finish_omp_clauses): Add missing whitespace to\n\ttranslatable strings.\n\t* cp-cilkplus.c (cpp_validate_cilk_plus_loop_aux): Fix comment typo.\nlto/\n\t* lto-symtab.c (lto_symtab_merge_symbols): Fix comment typo.\nfortran/\n\t* decl.c (attr_decl1): Fix spelling in translatable string.\n\t* intrinsic.texi: Fix spelling - invokation -> invocation.\n\t* lang.opt (faggressive-function-elimination, gfc_convert): Fix\n\ttypos in descriptions.\n\t* openmp.c (resolve_omp_clauses): Add missing whitespace to\n\ttranslatable strings.\nc-family/\n\t* c.opt (Wnormalized=): Fix typo in description.\ntestsuite/\n\t* c-c++-common/goacc/host_data-2.c (f): Adjust expected spelling of\n\tdiagnostics.\n\t* gfortran.dg/initialization_17.f90: Likewise.\n\nFrom-SVN: r244245", "tree": {"sha": "047a92ede46b9918d48d9e3a8d8931eaa0e1b261", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/047a92ede46b9918d48d9e3a8d8931eaa0e1b261"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd2c62704bb7e012a3e780dec1288678f51bcd6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd2c62704bb7e012a3e780dec1288678f51bcd6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd2c62704bb7e012a3e780dec1288678f51bcd6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd2c62704bb7e012a3e780dec1288678f51bcd6c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c1d8e7506f8b86e8205303d53f70cc8da2448d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c1d8e7506f8b86e8205303d53f70cc8da2448d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c1d8e7506f8b86e8205303d53f70cc8da2448d5"}], "stats": {"total": 246, "additions": 166, "deletions": 80}, "files": [{"sha": "76cb51b55a4727e39038d6aafd3fa921eddc53fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -1,5 +1,46 @@\n 2017-01-09  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR translation/79019\n+\tPR translation/79020\n+\t* params.def (PARAM_INLINE_MIN_SPEEDUP,\n+\tPARAM_IPA_CP_SINGLE_CALL_PENALTY,\n+\tPARAM_USE_AFTER_SCOPE_DIRECT_EMISSION_THRESHOLD): Fix typos\n+\tin descriptions.\n+\t* config/avr/avr.opt (maccumulate-args): Likewise.\n+\t* config/msp430/msp430.opt (mwarn-mcu): Likewise.\n+\t* common.opt (freport-bug): Likewise.\n+\t* cif-code.def (CIF_FINAL_ERROR): Likewise.\n+\t* doc/invoke.texi (ipa-cp-single-call-penalty): Likewise.\n+\t* config/s390/s390.c (s390_invalid_binary_op): Fix spelling in\n+\ttranslatable string.\n+\t* config/i386/i386.c (function_value_32): Likewise.\n+\t* config/nios2/nios2.c (nios2_valid_target_attribute_rec): Likewise.\n+\t* config/msp430/msp430.c (msp430_option_override, msp430_attr):\n+\tLikewise.\n+\t* config/msp430/driver-msp430.c (msp430_select_hwmult_lib): Likewise.\n+\t* common/config/msp430/msp430-common.c (msp430_handle_option):\n+\tLikewise.\n+\t* symtab.c (symtab_node::verify_base): Likewise.\n+\t* opts.c (set_debug_level): Likewise.\n+\t* tree.c (verify_type_variant): Likewise.  Fix typo in comment.\n+\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin): Add\n+\tmissing whitespace to translatable strings.\n+\t* config/avr/avr.md (bswapsi2): Fix typo in comment.\n+\t* config/sh/superh.h: Likewise.\n+\t* config/i386/xopintrin.h: Likewise.\n+\t* config/i386/znver1.md: Likewise.\n+\t* config/rs6000/rs6000.c (struct rs6000_opt_mask): Likewise.\n+\t* ipa-inline-analysis.c (compute_inline_parameters): Likewise.\n+\t* double-int.h (struct double_int): Likewise.\n+\t* double-int.c (div_and_round_double): Likewise.\n+\t* wide-int.cc: Likewise.\n+\t* tree-ssa.c (non_rewritable_mem_ref_base): Likewise.\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Likewise.\n+\t* cfgcleanup.c (crossjumps_occured): Renamed to ...\n+\t(crossjumps_occurred): ... this.\n+\t(try_crossjump_bb, try_head_merge_bb, try_optimize_cfg, cleanup_cfg):\n+\tAdjust all uses.\n+\n \tPR tree-optimization/78899\n \t* tree-if-conv.c (version_loop_for_if_conversion): Instead of\n \treturning bool return struct loop *, NULL for failure and the new"}, {"sha": "968d48398344a41e87e74664d27ae68374d9dc95", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -1,3 +1,9 @@\n+2017-01-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR translation/79019\n+\tPR translation/79020\n+\t* c.opt (Wnormalized=): Fix typo in description.\n+\n 2017-01-08  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/77708"}, {"sha": "104d8160c36d7119099ee9c771ed40e21fcfc0dc", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -802,7 +802,7 @@ C ObjC C++ ObjC++ Warning Alias(Wnormalized=,nfc,none)\n \n Wnormalized=\n C ObjC C++ ObjC++ RejectNegative Joined Warning CPP(warn_normalize) CppReason(CPP_W_NORMALIZE) Init(normalized_C) Var(cpp_warn_normalize) Enum(cpp_normalize_level)\n--Wnormalized=<none|id|nfc|nfkc>\tWarn about non-normalised Unicode strings.\n+-Wnormalized=<none|id|nfc|nfkc>\tWarn about non-normalized Unicode strings.\n \n ; Required for these enum values.\n SourceInclude"}, {"sha": "9663b68fb3281b57658c258f72d2f5d325af494e", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -60,7 +60,7 @@ along with GCC; see the file COPYING3.  If not see\n static bool first_pass;\n \n /* Set to true if crossjumps occurred in the latest run of try_optimize_cfg.  */\n-static bool crossjumps_occured;\n+static bool crossjumps_occurred;\n \n /* Set to true if we couldn't run an optimization due to stale liveness\n    information; we should run df_analyze to enable more opportunities.  */\n@@ -2283,7 +2283,7 @@ try_crossjump_bb (int mode, basic_block bb)\n     }\n \n   if (changed)\n-    crossjumps_occured = true;\n+    crossjumps_occurred = true;\n \n   return changed;\n }\n@@ -2584,7 +2584,7 @@ try_head_merge_bb (basic_block bb)\n   free (headptr);\n   free (nextptr);\n \n-  crossjumps_occured |= changed;\n+  crossjumps_occurred |= changed;\n \n   return changed;\n }\n@@ -2650,7 +2650,7 @@ try_optimize_cfg (int mode)\n   if (mode & (CLEANUP_CROSSJUMP | CLEANUP_THREADING))\n     clear_bb_flags ();\n \n-  crossjumps_occured = false;\n+  crossjumps_occurred = false;\n \n   FOR_EACH_BB_FN (bb, cfun)\n     update_forwarder_flag (bb);\n@@ -3169,7 +3169,7 @@ cleanup_cfg (int mode)\n \t  if ((mode & CLEANUP_EXPENSIVE) && !reload_completed\n \t      && !delete_trivially_dead_insns (get_insns (), max_reg_num ()))\n \t    break;\n-\t  if ((mode & CLEANUP_CROSSJUMP) && crossjumps_occured)\n+\t  if ((mode & CLEANUP_CROSSJUMP) && crossjumps_occurred)\n \t    run_fast_dce ();\n \t}\n       else"}, {"sha": "a2f05e016f2a8f4350dc804972ebc8141efb09cf", "filename": "gcc/cif-code.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fcif-code.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fcif-code.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcif-code.def?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -138,4 +138,4 @@ DEFCIFCODE(UNREACHABLE, CIF_FINAL_ERROR,\n \n /* We can't inline because of instrumentation thunk.  */\n DEFCIFCODE(CHKP, CIF_FINAL_ERROR,\n-\t   N_(\"caller is instrumetnation thunk\"))\n+\t   N_(\"caller is instrumentation thunk\"))"}, {"sha": "8ad5b77fe06cde5cf3030cef57dacfffe4a757e2", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -1262,7 +1262,7 @@ Suppress output of addresses in debugging dumps.\n freport-bug\n Common Driver Var(flag_report_bug)\n Collect and dump debug information into temporary file if ICE in C/C++\n-compiler occured.\n+compiler occurred.\n \n fdump-internal-locations\n Common Var(flag_dump_locations) Init(0)"}, {"sha": "7834314f122e0757ff7f889dde2d36ecb6973352", "filename": "gcc/common/config/msp430/msp430-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fcommon%2Fconfig%2Fmsp430%2Fmsp430-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fcommon%2Fconfig%2Fmsp430%2Fmsp430-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fmsp430%2Fmsp430-common.c?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -54,7 +54,7 @@ msp430_handle_option (struct gcc_options *opts ATTRIBUTE_UNUSED,\n \t}\n       else\n \t{\n-\t  error (\"unrecognised argument of -mcpu: %s\", decoded->arg);\n+\t  error (\"unrecognized argument of -mcpu: %s\", decoded->arg);\n \t  return false;\n \t}\n       break;"}, {"sha": "256b2b66b71b27b88a25bd7a5b234acad8410618", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -6284,7 +6284,7 @@\n   [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"none\")])\n \n-;; Swap Bytes (change byte-endianess)\n+;; Swap Bytes (change byte-endianness)\n \n (define_expand \"bswapsi2\"\n   [(set (reg:SI 22)"}, {"sha": "a1edec977857a681ee57f9af3090722c391bfd03", "filename": "gcc/config/avr/avr.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fconfig%2Favr%2Favr.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fconfig%2Favr%2Favr.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.opt?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -76,7 +76,7 @@ Make the linker relaxation machine assume that a program counter wrap-around occ\n \n maccumulate-args\n Target Report Mask(ACCUMULATE_OUTGOING_ARGS)\n-Accumulate outgoing function arguments and acquire/release the needed stack space for outpoing function arguments in function prologue/epilogue.  Without this option, outgoing arguments are pushed before calling a function and popped afterwards.  This option can lead to reduced code size for functions that call many functions that get their arguments on the stack like, for example printf.\n+Accumulate outgoing function arguments and acquire/release the needed stack space for outgoing function arguments in function prologue/epilogue.  Without this option, outgoing arguments are pushed before calling a function and popped afterwards.  This option can lead to reduced code size for functions that call many functions that get their arguments on the stack like, for example printf.\n \n mstrict-X\n Target Report Var(avr_strict_X) Init(0)"}, {"sha": "b173b894dee401f093c6ca48b579b639ebf98918", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -10390,7 +10390,7 @@ function_value_32 (machine_mode orig_mode, machine_mode mode,\n       int sse_level = ix86_function_sseregparm (fntype, fn, false);\n       if (sse_level == -1)\n \t{\n-\t  error (\"calling %qD with SSE caling convention without \"\n+\t  error (\"calling %qD with SSE calling convention without \"\n \t\t \"SSE/SSE2 enabled\", fn);\n \t  sorry (\"this is a GCC bug that can be worked around by adding \"\n \t\t \"attribute used to function called\");"}, {"sha": "3a83e249322f0f6f7f5df88e0e51fe8f07f18247", "filename": "gcc/config/i386/xopintrin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fconfig%2Fi386%2Fxopintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fconfig%2Fi386%2Fxopintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxopintrin.h?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -36,7 +36,7 @@\n #define __DISABLE_XOP__\n #endif /* __XOP__ */\n \n-/* Integer multiply/add intructions. */\n+/* Integer multiply/add instructions. */\n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_maccs_epi16(__m128i __A, __m128i __B, __m128i __C)\n {"}, {"sha": "8ea6d09407f1206c014d3247d002bb014691c4ac", "filename": "gcc/config/i386/znver1.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fconfig%2Fi386%2Fznver1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fconfig%2Fi386%2Fznver1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fznver1.md?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -120,7 +120,7 @@\n \t\t\t      (eq_attr \"type\" \"leave\"))\n \t\t\t \"znver1-double,znver1-ieu, znver1-store\")\n \n-;; Integer Instructions or General intructions\n+;; Integer Instructions or General instructions\n ;; Multiplications\n ;; Reg operands\n (define_insn_reservation \"znver1_imul\" 3"}, {"sha": "37ce669981bc8589443080dbad28d5606977b4e8", "filename": "gcc/config/msp430/driver-msp430.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fconfig%2Fmsp430%2Fdriver-msp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fconfig%2Fmsp430%2Fdriver-msp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fdriver-msp430.c?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -684,7 +684,7 @@ msp430_select_hwmult_lib (int argc ATTRIBUTE_UNUSED, const char ** argv ATTRIBUT\n \t\tcase 4: return \"-lmul_32\";\n \t\tcase 8: return \"-lmul_f5\";\n \t\tdefault:\n-\t\t  error (\"unrecognised hwpy field in msp430_mcu_data[%d]: %d\",\n+\t\t  error (\"unrecognized hwpy field in msp430_mcu_data[%d]: %d\",\n \t\t\t i, msp430_mcu_data[i].hwmpy);\n \t\t  break;\n \t\t}"}, {"sha": "fa2dbc20bce84aa82ad423b2a9d7392eeb3a92bd", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -809,11 +809,16 @@ msp430_option_override (void)\n \t\t{\n \t\t  if (target_cpu == NULL)\n \t\t    warning (0,\n-\t\t\t     \"Unrecognised MCU name '%s', assuming that it is just a MSP430 with no hardware multiply.\\nUse the -mcpu and -mhwmult options to set these explicitly.\",\n+\t\t\t     \"Unrecognized MCU name '%s', assuming that it is \"\n+\t\t\t     \"just a MSP430 with no hardware multiply.\\n\"\n+\t\t\t     \"Use the -mcpu and -mhwmult options to set \"\n+\t\t\t     \"these explicitly.\",\n \t\t\t     target_mcu);\n \t\t  else\n \t\t    warning (0,\n-\t\t\t     \"Unrecognised MCU name '%s', assuming that it has no hardware multiply.\\nUse the -mhwmult option to set this explicitly.\",\n+\t\t\t     \"Unrecognized MCU name '%s', assuming that it \"\n+\t\t\t     \"has no hardware multiply.\\nUse the -mhwmult \"\n+\t\t\t     \"option to set this explicitly.\",\n \t\t\t     target_mcu);\n \t\t}\n \n@@ -823,14 +828,15 @@ msp430_option_override (void)\n \t    {\n \t      if (msp430_warn_mcu)\n \t\twarning (0,\n-\t\t\t \"Unrecognised MCU name '%s', assuming that it just supports the MSP430 ISA.\\nUse the -mcpu option to set the ISA explicitly.\",\n+\t\t\t \"Unrecognized MCU name '%s', assuming that it just \"\n+\t\t\t \"supports the MSP430 ISA.\\nUse the -mcpu option to \"\n+\t\t\t \"set the ISA explicitly.\",\n \t\t\t target_mcu);\n \n \t      msp430x = false;\n \t    }\n \t  else if (msp430_warn_mcu)\n-\t    warning (0,\n-\t\t     \"Unrecognised MCU name '%s'.\", target_mcu);\n+\t    warning (0, \"Unrecognized MCU name '%s'.\", target_mcu);\n \t}\n     }\n \n@@ -1851,7 +1857,7 @@ msp430_attr (tree * node,\n \t    /* Allow the attribute to be added - the linker script\n \t       being used may still recognise this name.  */\n \t    warning (OPT_Wattributes,\n-\t\t     \"unrecognised interrupt vector argument of %qE attribute\",\n+\t\t     \"unrecognized interrupt vector argument of %qE attribute\",\n \t\t     name);\n \t  break;\n "}, {"sha": "c027201bacd8cf5bee9e3a0536a6395120a97bd6", "filename": "gcc/config/msp430/msp430.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fconfig%2Fmsp430%2Fmsp430.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fconfig%2Fmsp430%2Fmsp430.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.opt?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -12,7 +12,7 @@ Specify the MCU to build for.\n \n mwarn-mcu\n Target Report Var(msp430_warn_mcu) Init(1)\n-Warn if an MCU name is unrecognised or conflicts with other options (default: on).\n+Warn if an MCU name is unrecognized or conflicts with other options (default: on).\n \n mcpu=\n Target Report Joined RejectNegative Var(target_cpu)"}, {"sha": "e1b0372f4a9a678030650b689f956fdda68198cf", "filename": "gcc/config/nios2/nios2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -3818,7 +3818,7 @@ nios2_valid_target_attribute_rec (tree args)\n \t\t}\n \t      else\n \t\t{\n-\t\t  error (\"%<custom-%s=%> is not recognised as FPU instruction\",\n+\t\t  error (\"%<custom-%s=%> is not recognized as FPU instruction\",\n \t\t\t argstr + 7);\n \t\t  return false;\n \t\t}\t\t"}, {"sha": "b928547ca16433f7b85f48dc5c41bc8866ec24fd", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -6000,7 +6000,7 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t{\n           if (TYPE_READONLY (TREE_TYPE (type))\n \t      && !TYPE_READONLY (TREE_TYPE (decl_type)))\n-\t    warning (0, \"passing arg %d of %qE discards qualifiers from\"\n+\t    warning (0, \"passing arg %d of %qE discards qualifiers from \"\n \t\t        \"pointer target type\", n + 1, fndecl);\n \t  type = build_pointer_type (build_qualified_type (TREE_TYPE (type),\n \t\t\t\t\t\t\t   0));"}, {"sha": "02b521c8f5120b4a099f725fa3b3c043bd88f986", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -38525,7 +38525,7 @@ rs6000_asan_shadow_offset (void)\n \f\n /* Mask options that we want to support inside of attribute((target)) and\n    #pragma GCC target operations.  Note, we do not include things like\n-   64/32-bit, endianess, hard/soft floating point, etc. that would have\n+   64/32-bit, endianness, hard/soft floating point, etc. that would have\n    different calling sequences.  */\n \n struct rs6000_opt_mask {"}, {"sha": "bfb2865079074de0240caa00e0f8f72d4a99863a", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -15371,7 +15371,7 @@ s390_invalid_binary_op (int op ATTRIBUTE_UNUSED, const_tree type1, const_tree ty\n      operators.  */\n   if (!bool1_p && !bool2_p\n       && TYPE_UNSIGNED (type1) != TYPE_UNSIGNED (type2))\n-    return N_(\"types differ in signess\");\n+    return N_(\"types differ in signedness\");\n \n   plusminus_p = (op == PLUS_EXPR || op == MINUS_EXPR);\n   muldiv_p = (op == MULT_EXPR || op == RDIV_EXPR || op == TRUNC_DIV_EXPR"}, {"sha": "4f7ed3a4bc027a294101dacb4a6ece05cd10d1d8", "filename": "gcc/config/sh/superh.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fconfig%2Fsh%2Fsuperh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fconfig%2Fsh%2Fsuperh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsuperh.h?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -20,7 +20,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* This header file is used when the vendor name is set to 'superh'.\n    config.gcc already configured the compiler for SH4 only and switched\n-   the default endianess to little (although big endian is still available).\n+   the default endianness to little (although big endian is still available).\n    This file configures the spec file to the default board configuration\n    but in such a way that it can be overridden by a boardspecs file\n    (using the -specs= option). This file is expected to disable the"}, {"sha": "78bcd3f151940f1df1fd4ee012b0863af1d8419d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -1,3 +1,11 @@\n+2017-01-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR translation/79019\n+\tPR translation/79020\n+\t* semantics.c (finish_omp_clauses): Add missing whitespace to\n+\ttranslatable strings.\n+\t* cp-cilkplus.c (cpp_validate_cilk_plus_loop_aux): Fix comment typo.\n+\n 2017-01-07  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/78948 - instantiation from discarded statement"}, {"sha": "d147e7eac133f1ea9d81aa4e930811429eaf86ee", "filename": "gcc/cp/cp-cilkplus.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fcp%2Fcp-cilkplus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fcp%2Fcp-cilkplus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-cilkplus.c?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -137,7 +137,7 @@ cilk_cp_detect_spawn_and_unwrap (tree *exp0)\n    This function is passed in as a function pointer to walk_tree.  *TP is\n    the current tree pointer, *WALK_SUBTREES is set to 0 by this function if\n    recursing into TP's subtrees is unnecessary. *DATA is a bool variable that\n-   is set to false if an error has occured.  */\n+   is set to false if an error has occurred.  */\n \n static tree\n cpp_validate_cilk_plus_loop_aux (tree *tp, int *walk_subtrees, void *data)"}, {"sha": "342b671814cbf1193bce23cd251934f949fd3d5b", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -6221,7 +6221,7 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t\t  && t != integer_minus_one_node)\n \t\t\t{\n \t\t\t  warning_at (OMP_CLAUSE_LOCATION (c), 0,\n-\t\t\t\t      \"%<gang%> static value must be\"\n+\t\t\t\t      \"%<gang%> static value must be \"\n \t\t\t\t      \"positive\");\n \t\t\t  t = integer_one_node;\n \t\t\t}\n@@ -6288,12 +6288,12 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t\t  break;\n \t\t\tcase OMP_CLAUSE_VECTOR:\n \t\t\t  warning_at (OMP_CLAUSE_LOCATION (c), 0,\n-\t\t\t\t      \"%<vector%> length value must be\"\n+\t\t\t\t      \"%<vector%> length value must be \"\n \t\t\t\t      \"positive\");\n \t\t\t  break;\n \t\t\tcase OMP_CLAUSE_WORKER:\n \t\t\t  warning_at (OMP_CLAUSE_LOCATION (c), 0,\n-\t\t\t\t      \"%<worker%> num value must be\"\n+\t\t\t\t      \"%<worker%> num value must be \"\n \t\t\t\t      \"positive\");\n \t\t\t  break;\n \t\t\tdefault:\n@@ -7048,7 +7048,7 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t\t  && TREE_CODE (TREE_TYPE (type)) != ARRAY_TYPE)))\n \t\t{\n \t\t  error_at (OMP_CLAUSE_LOCATION (c),\n-\t\t\t    \"%qs variable is neither a pointer, nor an array\"\n+\t\t\t    \"%qs variable is neither a pointer, nor an array \"\n \t\t\t    \"nor reference to pointer or array\",\n \t\t\t    omp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n \t\t  remove = true;"}, {"sha": "9092e9c0e00765572d5adaf266e612d6dc97e4a2", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -10324,7 +10324,7 @@ Percentage penalty the recursive functions will receive when they\n are evaluated for cloning.\n \n @item ipa-cp-single-call-penalty\n-Percentage penalty functions containg a single call to another\n+Percentage penalty functions containing a single call to another\n function will receive when they are evaluated for cloning.\n \n "}, {"sha": "c787b4b7b769eb10dab0daf5679553716e8a6763", "filename": "gcc/double-int.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fdouble-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fdouble-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.c?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -614,7 +614,7 @@ div_and_round_double (unsigned code, int uns,\n \n \n /* Construct from a buffer of length LEN.  BUFFER will be read according\n-   to byte endianess and word endianess.  Only the lower LEN bytes\n+   to byte endianness and word endianness.  Only the lower LEN bytes\n    of the result are set; the remaining high bytes are cleared.  */\n \n double_int"}, {"sha": "2c70bb59694746c0117e8f52ad5fb4e179fb3e32", "filename": "gcc/double-int.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fdouble-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fdouble-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.h?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -60,7 +60,7 @@ struct double_int\n   static double_int from_pair (HOST_WIDE_INT high, unsigned HOST_WIDE_INT low);\n \n   /* Construct from a fuffer of length LEN.  BUFFER will be read according\n-     to byte endianess and word endianess.  */\n+     to byte endianness and word endianness.  */\n   static double_int from_buffer (const unsigned char *buffer, int len);\n \n   /* No copy assignment operator or destructor to keep the type a POD.  */"}, {"sha": "831b96847d1df70cf67beff920fc11750743cfc1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -1,3 +1,14 @@\n+2017-01-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR translation/79019\n+\tPR translation/79020\n+\t* decl.c (attr_decl1): Fix spelling in translatable string.\n+\t* intrinsic.texi: Fix spelling - invokation -> invocation.\n+\t* lang.opt (faggressive-function-elimination, gfc_convert): Fix\n+\ttypos in descriptions.\n+\t* openmp.c (resolve_omp_clauses): Add missing whitespace to\n+\ttranslatable strings.\n+\n 2017-01-08  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/78913"}, {"sha": "41acc94a0f49727ee213dbc212945a856a7ea11b", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -7127,7 +7127,7 @@ attr_decl1 (void)\n       if (current_attr.dimension && sym->value)\n \t{\n \t  gfc_error (\"Dimensions specified for %s at %L after its \"\n-\t\t     \"initialisation\", sym->name, &var_locus);\n+\t\t     \"initialization\", sym->name, &var_locus);\n \t  m = MATCH_ERROR;\n \t  goto cleanup;\n \t}"}, {"sha": "c1de29eaaa6d70bbe4e2338ac19fe2715dd08f40", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -1850,8 +1850,8 @@ Inverse function: @ref{TANH}\n @table @asis\n @item @emph{Description}:\n @code{ATOMIC_ADD(ATOM, VALUE)} atomically adds the value of @var{VAR} to the\n-variable @var{ATOM}. When @var{STAT} is present and the invokation was\n-successful, it is assigned the value 0. If it is present and the invokation\n+variable @var{ATOM}. When @var{STAT} is present and the invocation was\n+successful, it is assigned the value 0. If it is present and the invocation\n has failed, it is assigned a positive value; in particular, for a coindexed\n @var{ATOM}, if the remote image has stopped, it is assigned the value of\n @code{ISO_FORTRAN_ENV}'s @code{STAT_STOPPED_IMAGE} and if the remote image has\n@@ -1901,8 +1901,8 @@ end program atomic\n @item @emph{Description}:\n @code{ATOMIC_AND(ATOM, VALUE)} atomically defines @var{ATOM} with the bitwise\n AND between the values of @var{ATOM} and @var{VALUE}. When @var{STAT} is present\n-and the invokation was successful, it is assigned the value 0. If it is present\n-and the invokation has failed, it is assigned a positive value; in particular,\n+and the invocation was successful, it is assigned the value 0. If it is present\n+and the invocation has failed, it is assigned a positive value; in particular,\n for a coindexed @var{ATOM}, if the remote image has stopped, it is assigned the\n value of @code{ISO_FORTRAN_ENV}'s @code{STAT_STOPPED_IMAGE} and if the remote\n image has failed, the value @code{STAT_FAILED_IMAGE}.\n@@ -1951,8 +1951,8 @@ end program atomic\n @code{ATOMIC_CAS} compares the variable @var{ATOM} with the value of\n @var{COMPARE}; if the value is the same, @var{ATOM} is set to the value\n of @var{NEW}. Additionally, @var{OLD} is set to the value of @var{ATOM}\n-that was used for the comparison.  When @var{STAT} is present and the invokation\n-was successful, it is assigned the value 0. If it is present and the invokation\n+that was used for the comparison.  When @var{STAT} is present and the invocation\n+was successful, it is assigned the value 0. If it is present and the invocation\n has failed, it is assigned a positive value; in particular, for a coindexed\n @var{ATOM}, if the remote image has stopped, it is assigned the value of\n @code{ISO_FORTRAN_ENV}'s @code{STAT_STOPPED_IMAGE} and if the remote image has\n@@ -2003,8 +2003,8 @@ end program atomic\n @table @asis\n @item @emph{Description}:\n @code{ATOMIC_DEFINE(ATOM, VALUE)} defines the variable @var{ATOM} with the value\n-@var{VALUE} atomically. When @var{STAT} is present and the invokation was\n-successful, it is assigned the value 0. If it is present and the invokation\n+@var{VALUE} atomically. When @var{STAT} is present and the invocation was\n+successful, it is assigned the value 0. If it is present and the invocation\n has failed, it is assigned a positive value; in particular, for a coindexed\n @var{ATOM}, if the remote image has stopped, it is assigned the value of\n @code{ISO_FORTRAN_ENV}'s @code{STAT_STOPPED_IMAGE} and if the remote image has\n@@ -2055,8 +2055,8 @@ end program atomic\n @item @emph{Description}:\n @code{ATOMIC_FETCH_ADD(ATOM, VALUE, OLD)} atomically stores the value of\n @var{ATOM} in @var{OLD} and adds the value of @var{VAR} to the\n-variable @var{ATOM}. When @var{STAT} is present and the invokation was\n-successful, it is assigned the value 0. If it is present and the invokation\n+variable @var{ATOM}. When @var{STAT} is present and the invocation was\n+successful, it is assigned the value 0. If it is present and the invocation\n has failed, it is assigned a positive value; in particular, for a coindexed\n @var{ATOM}, if the remote image has stopped, it is assigned the value of\n @code{ISO_FORTRAN_ENV}'s @code{STAT_STOPPED_IMAGE} and if the remote image has\n@@ -2108,8 +2108,8 @@ end program atomic\n @item @emph{Description}:\n @code{ATOMIC_AND(ATOM, VALUE)} atomically stores the value of @var{ATOM} in\n @var{OLD} and defines @var{ATOM} with the bitwise AND between the values of\n-@var{ATOM} and @var{VALUE}. When @var{STAT} is present and the invokation was\n-successful, it is assigned the value 0. If it is present and the invokation has\n+@var{ATOM} and @var{VALUE}. When @var{STAT} is present and the invocation was\n+successful, it is assigned the value 0. If it is present and the invocation has\n failed, it is assigned a positive value; in particular, for a coindexed\n @var{ATOM}, if the remote image has stopped, it is assigned the value of\n @code{ISO_FORTRAN_ENV}'s @code{STAT_STOPPED_IMAGE} and if the remote image has\n@@ -2159,8 +2159,8 @@ end program atomic\n @item @emph{Description}:\n @code{ATOMIC_OR(ATOM, VALUE)} atomically stores the value of @var{ATOM} in\n @var{OLD} and defines @var{ATOM} with the bitwise OR between the values of\n-@var{ATOM} and @var{VALUE}. When @var{STAT} is present and the invokation was\n-successful, it is assigned the value 0. If it is present and the invokation has\n+@var{ATOM} and @var{VALUE}. When @var{STAT} is present and the invocation was\n+successful, it is assigned the value 0. If it is present and the invocation has\n failed, it is assigned a positive value; in particular, for a coindexed\n @var{ATOM}, if the remote image has stopped, it is assigned the value of\n @code{ISO_FORTRAN_ENV}'s @code{STAT_STOPPED_IMAGE} and if the remote image has\n@@ -2210,8 +2210,8 @@ end program atomic\n @item @emph{Description}:\n @code{ATOMIC_XOR(ATOM, VALUE)} atomically stores the value of @var{ATOM} in\n @var{OLD} and defines @var{ATOM} with the bitwise XOR between the values of\n-@var{ATOM} and @var{VALUE}. When @var{STAT} is present and the invokation was\n-successful, it is assigned the value 0. If it is present and the invokation has\n+@var{ATOM} and @var{VALUE}. When @var{STAT} is present and the invocation was\n+successful, it is assigned the value 0. If it is present and the invocation has\n failed, it is assigned a positive value; in particular, for a coindexed\n @var{ATOM}, if the remote image has stopped, it is assigned the value of\n @code{ISO_FORTRAN_ENV}'s @code{STAT_STOPPED_IMAGE} and if the remote image has\n@@ -2261,8 +2261,8 @@ end program atomic\n @item @emph{Description}:\n @code{ATOMIC_OR(ATOM, VALUE)} atomically defines @var{ATOM} with the bitwise\n AND between the values of @var{ATOM} and @var{VALUE}. When @var{STAT} is present\n-and the invokation was successful, it is assigned the value 0. If it is present\n-and the invokation has failed, it is assigned a positive value; in particular,\n+and the invocation was successful, it is assigned the value 0. If it is present\n+and the invocation has failed, it is assigned a positive value; in particular,\n for a coindexed @var{ATOM}, if the remote image has stopped, it is assigned the\n value of @code{ISO_FORTRAN_ENV}'s @code{STAT_STOPPED_IMAGE} and if the remote\n image has failed, the value @code{STAT_FAILED_IMAGE}.\n@@ -2310,8 +2310,8 @@ end program atomic\n @item @emph{Description}:\n @code{ATOMIC_DEFINE(ATOM, VALUE)} atomically assigns the value of the\n variable @var{ATOM} to @var{VALUE}. When @var{STAT} is present and the\n-invokation was successful, it is assigned the value 0. If it is present and the\n-invokation has failed, it is assigned a positive value; in particular, for a\n+invocation was successful, it is assigned the value 0. If it is present and the\n+invocation has failed, it is assigned a positive value; in particular, for a\n coindexed @var{ATOM}, if the remote image has stopped, it is assigned the value\n of @code{ISO_FORTRAN_ENV}'s @code{STAT_STOPPED_IMAGE} and if the remote image\n has failed, the value @code{STAT_FAILED_IMAGE}.\n@@ -2367,8 +2367,8 @@ end program atomic\n @item @emph{Description}:\n @code{ATOMIC_AND(ATOM, VALUE)} atomically defines @var{ATOM} with the bitwise\n XOR between the values of @var{ATOM} and @var{VALUE}. When @var{STAT} is present\n-and the invokation was successful, it is assigned the value 0. If it is present\n-and the invokation has failed, it is assigned a positive value; in particular,\n+and the invocation was successful, it is assigned the value 0. If it is present\n+and the invocation has failed, it is assigned a positive value; in particular,\n for a coindexed @var{ATOM}, if the remote image has stopped, it is assigned the\n value of @code{ISO_FORTRAN_ENV}'s @code{STAT_STOPPED_IMAGE} and if the remote\n image has failed, the value @code{STAT_FAILED_IMAGE}.\n@@ -5535,8 +5535,8 @@ end program test_etime\n @item @emph{Description}:\n @code{EVENT_QUERY} assignes the number of events to @var{COUNT} which have been\n posted to the @var{EVENT} variable and not yet been removed by calling\n-@code{EVENT WAIT}. When @var{STAT} is present and the invokation was successful,\n-it is assigned the value 0. If it is present and the invokation has failed,\n+@code{EVENT WAIT}. When @var{STAT} is present and the invocation was successful,\n+it is assigned the value 0. If it is present and the invocation has failed,\n it is assigned a positive value and @var{COUNT} is assigned the value @math{-1}.\n \n @item @emph{Standard}:"}, {"sha": "9670bf760075426e2ff68c4b40aa2bcc3925774f", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -359,7 +359,7 @@ Fortran Joined\n \n faggressive-function-elimination\n Fortran Var(flag_aggressive_function_elimination)\n-Eliminate multiple function invokations also for impure functions.\n+Eliminate multiple function invocations also for impure functions.\n \n falign-commons\n Fortran Var(flag_align_commons) Init(1)\n@@ -398,7 +398,7 @@ Fortran RejectNegative Joined Enum(gfc_convert) Var(flag_convert) Init(GFC_FLAG_\n -fconvert=<big-endian|little-endian|native|swap> The endianness used for unformatted files.\n \n Enum\n-Name(gfc_convert) Type(enum gfc_convert) UnknownError(Unrecognized option to endianess value: %qs)\n+Name(gfc_convert) Type(enum gfc_convert) UnknownError(Unrecognized option to endianness value: %qs)\n \n EnumValue\n Enum(gfc_convert) String(big-endian) Value(GFC_FLAG_CONVERT_BIG)"}, {"sha": "16b75fda3af4ebef49610a96059cf6b140f678b5", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -3967,7 +3967,7 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t\t     &expr->where);\n \telse if (if_without_mod)\n \t  {\n-\t    gfc_error (\"IF clause without modifier at %L used together with\"\n+\t    gfc_error (\"IF clause without modifier at %L used together with \"\n \t\t       \"IF clauses with modifiers\",\n \t\t       &omp_clauses->if_expr->where);\n \t    if_without_mod = false;\n@@ -4316,7 +4316,7 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t\t\t    if (!gfc_resolve_expr (n->expr)\n \t\t\t\t|| n->expr->ts.type != BT_INTEGER\n \t\t\t\t|| n->expr->rank != 0)\n-\t\t\t      gfc_error (\"SINK addend not a constant integer\"\n+\t\t\t      gfc_error (\"SINK addend not a constant integer \"\n \t\t\t\t\t \"at %L\", &n->where);\n \t\t\t  }\n \t\t\tcontinue;\n@@ -4627,7 +4627,7 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t\t\tlinear_op = n->u.linear_op;\n \t\t      }\n \t\t    else if (omp_clauses->orderedc)\n-\t\t      gfc_error (\"LINEAR clause specified together with\"\n+\t\t      gfc_error (\"LINEAR clause specified together with \"\n \t\t\t\t \"ORDERED clause with argument at %L\",\n \t\t\t\t &n->where);\n \t\t    else if (n->u.linear_op != OMP_LINEAR_REF"}, {"sha": "76ea850bda5f9d7aeb71341e004f5cc483227ca3", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -2967,7 +2967,7 @@ compute_inline_parameters (struct cgraph_node *node, bool early)\n       inline_update_overall_summary (node);\n       info->self_size = info->size;\n       info->self_time = info->time;\n-      /* We can not inline instrumetnation clones.  */\n+      /* We can not inline instrumentation clones.  */\n       if (node->thunk.add_pointer_bounds_args)\n \t{\n           info->inlinable = false;"}, {"sha": "f94add5585224b5e9c6df77f4dbc7c0b2e070f2f", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -1,3 +1,9 @@\n+2017-01-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR translation/79019\n+\tPR translation/79020\n+\t* lto-symtab.c (lto_symtab_merge_symbols): Fix comment typo.\n+\n 2017-01-06  Nathan Sidwell  <nathan@acm.org>\n \n \t* lto-partition.c (promote_symbol): Write to dump file sooner,"}, {"sha": "f61b1f801337f86142fef7d3ac4f91fd119dbfe3", "filename": "gcc/lto/lto-symtab.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Flto%2Flto-symtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Flto%2Flto-symtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-symtab.c?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -968,7 +968,7 @@ lto_symtab_merge_symbols (void)\n \n \t      /* The user defined assembler variables are also not unified by their\n \t\t symbol name (since it is irrelevant), but we need to unify symbol\n-\t\t nodes if tree merging occured.  */\n+\t\t nodes if tree merging occurred.  */\n \t      if ((vnode = dyn_cast <varpool_node *> (node))\n \t\t  && DECL_HARD_REGISTER (vnode->decl)\n \t\t  && (node2 = symtab_node::get (vnode->decl))"}, {"sha": "c5a14e41e4d9a896208b3a8daa2d06f82000eaba", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -2449,7 +2449,7 @@ set_debug_level (enum debug_info_type type, int extended, const char *arg,\n     {\n       int argval = integral_argument (arg);\n       if (argval == -1)\n-\terror_at (loc, \"unrecognised debug output level %qs\", arg);\n+\terror_at (loc, \"unrecognized debug output level %qs\", arg);\n       else if (argval > 3)\n \terror_at (loc, \"debug output level %qs is too high\", arg);\n       else"}, {"sha": "6c6cde24f0465965e7706f3a8adb662e6e1e1319", "filename": "gcc/params.def", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -51,7 +51,7 @@ DEFPARAM (PARAM_PREDICTABLE_BRANCH_OUTCOME,\n \n DEFPARAM (PARAM_INLINE_MIN_SPEEDUP,\n \t  \"inline-min-speedup\",\n-\t  \"The minimal estimated speedup allowing inliner to ignore inline-insns-single and inline-isnsns-auto.\",\n+\t  \"The minimal estimated speedup allowing inliner to ignore inline-insns-single and inline-insns-auto.\",\n \t  10, 0, 0)\n \n /* The single function inlining limit. This is the maximum size\n@@ -1007,7 +1007,7 @@ DEFPARAM (PARAM_IPA_CP_RECURSION_PENALTY,\n \n DEFPARAM (PARAM_IPA_CP_SINGLE_CALL_PENALTY,\n \t  \"ipa-cp-single-call-penalty\",\n-\t  \"Percentage penalty functions containg a single call to another \"\n+\t  \"Percentage penalty functions containing a single call to another \"\n \t  \"function will receive when they are evaluated for cloning..\",\n \t  15, 0, 100)\n \n@@ -1170,7 +1170,7 @@ DEFPARAM (PARAM_ASAN_INSTRUMENTATION_WITH_CALL_THRESHOLD,\n \n DEFPARAM (PARAM_USE_AFTER_SCOPE_DIRECT_EMISSION_THRESHOLD,\n \t \"use-after-scope-direct-emission-threshold\",\n-\t \"Use direct poisoning/unpoisoning intructions for variables \"\n+\t \"Use direct poisoning/unpoisoning instructions for variables \"\n \t \"smaller or equal to this number.\",\n \t 256, 0, INT_MAX)\n "}, {"sha": "87120970d34da49d52949627287d674673b0183b", "filename": "gcc/symtab.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -1029,7 +1029,7 @@ symtab_node::verify_base (void)\n     }\n   if (analyzed && !definition)\n     {\n-      error (\"node is analyzed byt it is not a definition\");\n+      error (\"node is analyzed but it is not a definition\");\n       error_found = true;\n     }\n   if (cpp_implicit_alias && !alias)"}, {"sha": "60f5c28aa8271068815ef48882a801ab5144cb2b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -1,3 +1,11 @@\n+2017-01-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR translation/79019\n+\tPR translation/79020\n+\t* c-c++-common/goacc/host_data-2.c (f): Adjust expected spelling of\n+\tdiagnostics.\n+\t* gfortran.dg/initialization_17.f90: Likewise.\n+\n 2017-01-09  Dominique d'Humieres  <dominiq@lps.ens.fr>\n \n \tPR testsuite/79026"}, {"sha": "6337465d06c63c89efc954c3050420eac5e5a044", "filename": "gcc/testsuite/c-c++-common/goacc/host_data-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fhost_data-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fhost_data-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fhost_data-2.c?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -14,12 +14,12 @@ f (void)\n #pragma acc host_data use_device(v2)\n   ;\n   /* { dg-error \".use_device_ptr. variable is neither a pointer nor an array\" \"\" { target c } 14 } */\n-  /* { dg-error \".use_device_ptr. variable is neither a pointer, nor an arraynor reference to pointer or array\" \"\" { target c++ } 14 } */\n+  /* { dg-error \".use_device_ptr. variable is neither a pointer, nor an array nor reference to pointer or array\" \"\" { target c++ } 14 } */\n   \n #pragma acc host_data use_device(v0)\n   ;\n   /* { dg-error \".use_device_ptr. variable is neither a pointer nor an array\" \"\" { target c } 19 } */\n-  /* { dg-error \".use_device_ptr. variable is neither a pointer, nor an arraynor reference to pointer or array\" \"\" { target c++ } 19 } */\n+  /* { dg-error \".use_device_ptr. variable is neither a pointer, nor an array nor reference to pointer or array\" \"\" { target c++ } 19 } */\n }\n \n "}, {"sha": "774869f955d67829f7f25015b55c9f756971a20e", "filename": "gcc/testsuite/gfortran.dg/initialization_17.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_17.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_17.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_17.f90?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -6,5 +6,5 @@\n !\n integer :: n = 5, m = 7\n parameter (n = 42) ! { dg-error \"Initializing already initialized variable\" }\n-dimension :: m(3)  ! { dg-error \"after its initialisation\" } \n+dimension :: m(3)  ! { dg-error \"after its initialization\" } \n end"}, {"sha": "97e17bbcfbf39ac0fa7eff23aa9b7981b1b148b4", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -2024,7 +2024,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n \t  /* ???  We can't handle bitfield precision extracts without\n \t     either using an alternate type for the BIT_FIELD_REF and\n \t     then doing a conversion or possibly adjusting the offset\n-\t     according to endianess.  */\n+\t     according to endianness.  */\n \t  && (! INTEGRAL_TYPE_P (vr->type)\n \t      || ref->size == TYPE_PRECISION (vr->type))\n \t  && ref->size % BITS_PER_UNIT == 0)"}, {"sha": "605ee0f64bc114a5b9144eadaf8d7b1656f0c35b", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -1411,7 +1411,7 @@ non_rewritable_mem_ref_base (tree ref)\n \t  /* ???  We can't handle bitfield precision extracts without\n \t     either using an alternate type for the BIT_FIELD_REF and\n \t     then doing a conversion or possibly adjusting the offset\n-\t     according to endianess.  */\n+\t     according to endianness.  */\n \t  && (! INTEGRAL_TYPE_P (TREE_TYPE (base))\n \t      || (wi::to_offset (TYPE_SIZE (TREE_TYPE (base)))\n \t\t  == TYPE_PRECISION (TREE_TYPE (base))))"}, {"sha": "f222d3f2d02768cb2a2bfa898367a351e3fb837a", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -13320,7 +13320,7 @@ verify_type_variant (const_tree t, tree tv)\n      - aggregates may have new TYPE_FIELDS list that list variants of\n        the main variant TYPE_FIELDS.\n      - vector types may differ by TYPE_VECTOR_OPAQUE\n-     - TYPE_METHODS is always NULL for vairant types and maintained for\n+     - TYPE_METHODS is always NULL for variant types and maintained for\n        main variant only.\n    */\n \n@@ -13523,7 +13523,7 @@ verify_type_variant (const_tree t, tree tv)\n   if (type_with_alias_set_p (t)\n       && !gimple_canonical_types_compatible_p (t, tv, false))\n     {\n-      error (\"type is not compatible with its vairant\");\n+      error (\"type is not compatible with its variant\");\n       debug_tree (tv);\n       error (\"type variant's TREE_TYPE\");\n       debug_tree (TREE_TYPE (tv));"}, {"sha": "dab4c194f23734b73e724ff316392f262aac80c4", "filename": "gcc/wide-int.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fwide-int.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2c62704bb7e012a3e780dec1288678f51bcd6c/gcc%2Fwide-int.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int.cc?ref=bd2c62704bb7e012a3e780dec1288678f51bcd6c", "patch": "@@ -151,7 +151,7 @@ wi::from_array (HOST_WIDE_INT *val, const HOST_WIDE_INT *xval,\n }\n \n /* Construct a wide int from a buffer of length LEN.  BUFFER will be\n-   read according to byte endianess and word endianess of the target.\n+   read according to byte endianness and word endianness of the target.\n    Only the lower BUFFER_LEN bytes of the result are set; the remaining\n    high bytes are cleared.  */\n wide_int"}]}