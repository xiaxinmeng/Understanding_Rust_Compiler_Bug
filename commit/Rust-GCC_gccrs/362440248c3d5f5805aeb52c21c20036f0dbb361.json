{"sha": "362440248c3d5f5805aeb52c21c20036f0dbb361", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYyNDQwMjQ4YzNkNWY1ODA1YWViNTJjMjFjMjAwMzZmMGRiYjM2MQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-05-04T17:58:40Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-05-04T17:58:40Z"}, "message": "bb-reorder.c (get_next_bb_note, [...]): Prototype.\n\n\t* bb-reorder.c (get_next_bb_note, get_prev_bb_note): Prototype.\n\n\t* diagnostic (vbuild_message_string, build_message_string,\n\tbuild_location_prefix, output_get_prefix, init_output_buffer,\n\toutput_notice, vline_wrapper_message_with_location,\n\tv_message_with_decl, default_print_error_function): De-constify.\n\t(set_real_maximum_length): Prototype.\n\n\t* diagnostic.h (struct output_buffer, init_output_buffer,\n\toutput_get_prefix, output_set_prefix): De-constify.\n\n\t* function.c (init_function_start): Constify.\n\n\t* gensupport.c (remove_constraints, process_rtx): Prototype.\n\n\t* gthr-posix.h: Indent uses of #pragma.\n\n\t* objc/objc-act.c (ggc_mark_imp_list, ggc_mark_hash_table):\n\tPrototype.\n\n\t* predict.c (find_expected_value): Delete prototype.\n\t(expected_value_to_br_prob): Initialize variable `ev_reg'.\n\n\t* sbitmap.h (debug_sbitmap): Prototype.\n\n\t* ssa.c (compute_coalesced_reg_partition): Prototype.\n\n\t* stor-layout.c (debug_rli): Prototype.\n\n\t* tree.h (round_down): Prototype.\n\t(init_function_start): Constify.\n\nch:\n\t* ch-tree.h (init_function_start): Constify.\n\nFrom-SVN: r33675", "tree": {"sha": "1e440c93b0cf9b6ab0028a87f03704e2286e4b61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e440c93b0cf9b6ab0028a87f03704e2286e4b61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/362440248c3d5f5805aeb52c21c20036f0dbb361", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/362440248c3d5f5805aeb52c21c20036f0dbb361", "html_url": "https://github.com/Rust-GCC/gccrs/commit/362440248c3d5f5805aeb52c21c20036f0dbb361", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/362440248c3d5f5805aeb52c21c20036f0dbb361/comments", "author": null, "committer": null, "parents": [{"sha": "57c578a6bfed5ffa4da16984b9f92a41d5bd68cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57c578a6bfed5ffa4da16984b9f92a41d5bd68cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57c578a6bfed5ffa4da16984b9f92a41d5bd68cb"}], "stats": {"total": 119, "additions": 83, "deletions": 36}, "files": [{"sha": "f5cacba3106d722978ae5a42cf70f6f0e8bd945a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=362440248c3d5f5805aeb52c21c20036f0dbb361", "patch": "@@ -1,3 +1,37 @@\n+2000-05-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* bb-reorder.c (get_next_bb_note, get_prev_bb_note): Prototype.\n+\t\n+\t* diagnostic (vbuild_message_string, build_message_string,\n+\tbuild_location_prefix, output_get_prefix, init_output_buffer,\n+\toutput_notice, vline_wrapper_message_with_location,\n+\tv_message_with_decl, default_print_error_function): De-constify.\n+\t(set_real_maximum_length): Prototype.\n+\n+\t* diagnostic.h (struct output_buffer, init_output_buffer,\n+\toutput_get_prefix, output_set_prefix): De-constify.\n+\n+\t* function.c (init_function_start): Constify.\n+\n+\t* gensupport.c (remove_constraints, process_rtx): Prototype.\n+\n+\t* gthr-posix.h: Indent uses of #pragma.\n+\n+\t* objc/objc-act.c (ggc_mark_imp_list, ggc_mark_hash_table):\n+\tPrototype.\n+\n+\t* predict.c (find_expected_value): Delete prototype.\n+\t(expected_value_to_br_prob): Initialize variable `ev_reg'.\n+\n+\t* sbitmap.h (debug_sbitmap): Prototype.\n+\n+\t* ssa.c (compute_coalesced_reg_partition): Prototype.\n+\n+\t* stor-layout.c (debug_rli): Prototype.\n+\n+\t* tree.h (round_down): Prototype.\n+\t(init_function_start): Constify.\n+\n 2000-05-04  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cpphash.h: #define __extension__ away if GCC_VERSION < 2095"}, {"sha": "83c2845cc839a3e6eaabeddd506f3e3ac95ac65e", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=362440248c3d5f5805aeb52c21c20036f0dbb361", "patch": "@@ -166,6 +166,8 @@ static void free_scope_forest_1\t\tPARAMS ((scope));\n static void free_scope_forest\t\tPARAMS ((scope_forest_info *));\n void dump_scope_forest\t\t\tPARAMS ((scope_forest_info *));\n static void dump_scope_forest_1\t\tPARAMS ((scope, int));\n+static rtx get_next_bb_note\t\tPARAMS ((rtx));\n+static rtx get_prev_bb_note\t\tPARAMS ((rtx));\n \n /* Skip over inter-block insns occurring after BB which are typically\n    associated with BB (e.g., barriers). If there are any such insns,"}, {"sha": "fe842119b9b101d7cba23d68dbccfbea9d82f42e", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=362440248c3d5f5805aeb52c21c20036f0dbb361", "patch": "@@ -1,3 +1,7 @@\n+2000-05-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* ch-tree.h (init_function_start): Constify.\n+\n 2000-04-18  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* ch/lex.c: Remove references to cccp.c."}, {"sha": "953a1dc4c3f156777f15dbf29c04e4af927fdec3", "filename": "gcc/ch/ch-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2Fch%2Fch-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2Fch%2Fch-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fch-tree.h?ref=362440248c3d5f5805aeb52c21c20036f0dbb361", "patch": "@@ -1113,7 +1113,7 @@ extern void validate_varying_array_ref          PARAMS ((tree, tree));\n /* in function.c */\n extern void expand_function_end                 PARAMS ((char *, int, int));\n extern void expand_function_start               PARAMS ((tree, int));\n-extern void init_function_start                 PARAMS ((tree, char *, int));\n+extern void init_function_start                 PARAMS ((tree, const char *, int));\n extern void pop_function_context                PARAMS ((void));\n extern void push_function_context               PARAMS ((void));\n "}, {"sha": "369d4a3a73d4124d57042bb42e3dbc34b4c15f44", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=362440248c3d5f5805aeb52c21c20036f0dbb361", "patch": "@@ -45,10 +45,10 @@ Boston, MA 02111-1307, USA.  */\n /* Prototypes. */\n static int doing_line_wrapping PARAMS ((void));\n \n-static const char *vbuild_message_string PARAMS ((const char *, va_list));\n-static const char *build_message_string PARAMS ((const char *, ...))\n+static char *vbuild_message_string PARAMS ((const char *, va_list));\n+static char *build_message_string PARAMS ((const char *, ...))\n      ATTRIBUTE_PRINTF_1;\n-static const char *build_location_prefix PARAMS ((const char *, int, int));\n+static char *build_location_prefix PARAMS ((const char *, int, int));\n static void output_notice PARAMS ((output_buffer *, const char *));\n static void line_wrapper_printf PARAMS ((FILE *, const char *, ...))\n      ATTRIBUTE_PRINTF_2;\n@@ -78,6 +78,7 @@ static void v_pedwarn_with_file_and_line PARAMS ((const char *, int,\n static void vsorry PARAMS ((const char *, va_list));\n static void report_file_and_line PARAMS ((const char *, int, int));\n static void vnotice PARAMS ((FILE *, const char *, va_list));\n+static void set_real_maximum_length PARAMS ((output_buffer *));\n \n extern int rtl_dump_and_exit;\n extern int inhibit_warnings;\n@@ -135,7 +136,7 @@ output_is_line_wrapping (buffer)\n }\n \n /* Return BUFFER's prefix.  */\n-const char *\n+char *\n output_get_prefix (buffer)\n      const output_buffer *buffer;\n {\n@@ -178,7 +179,7 @@ output_set_maximum_length (buffer, length)\n void\n output_set_prefix (buffer, prefix)\n      output_buffer *buffer;\n-     const char *prefix;\n+     char *prefix;\n {\n   buffer->prefix = prefix;\n   set_real_maximum_length (buffer);\n@@ -189,7 +190,7 @@ output_set_prefix (buffer, prefix)\n void\n init_output_buffer (buffer, prefix, maximum_length)\n      output_buffer *buffer;\n-     const char *prefix;\n+     char *prefix;\n      int maximum_length;\n {\n   obstack_init (&buffer->obstack);\n@@ -397,7 +398,7 @@ output_format (buffer, msg)\n   output_finish (buffer);\n }\n \n-static const char *\n+static char *\n vbuild_message_string (msgid, ap)\n      const char *msgid;\n      va_list ap;\n@@ -411,14 +412,14 @@ vbuild_message_string (msgid, ap)\n /*  Return a malloc'd string containing MSGID formatted a la\n     printf.  The caller is reponsible for freeing the memory.  */\n \n-static const char *\n+static char *\n build_message_string VPARAMS ((const char *msgid, ...))\n {\n #ifndef ANSI_PROTOTYPES\n   const char *msgid;\n #endif\n   va_list ap;\n-  const char *str;\n+  char *str;\n \n   VA_START (ap, msgid);\n \n@@ -437,7 +438,7 @@ build_message_string VPARAMS ((const char *msgid, ...))\n /* Return a malloc'd string describing a location.  The caller is\n    responsible for freeing the memory.  */\n \n-static const char *\n+static char *\n build_location_prefix (file, line, warn)\n      const char *file;\n      int line;\n@@ -466,10 +467,10 @@ output_notice (buffer, msgid)\n      output_buffer *buffer;\n      const char *msgid;\n {\n-  const char *message = vbuild_message_string (msgid, buffer->format_args);\n+  char *message = vbuild_message_string (msgid, buffer->format_args);\n \n   output_add_string (buffer, message);\n-  free ((char *) message);\n+  free (message);\n }\n \n \n@@ -540,7 +541,7 @@ vline_wrapper_message_with_location (file, line, warn, msgid, ap)\n   output_notice (&buffer, msgid);\n   output_flush_on (&buffer, stderr);\n \n-  free ((char*) output_get_prefix (&buffer));\n+  free (output_get_prefix (&buffer));\n   fputc ('\\n', stderr);\n }\n \n@@ -688,7 +689,7 @@ v_message_with_decl (decl, warn, msgid, ap)\n   if (doing_line_wrapping())\n     {\n       output_flush_on (&buffer, stderr);\n-      free ((char *) output_get_prefix (&buffer));\n+      free (output_get_prefix (&buffer));\n     }\n   \n   fputc ('\\n', stderr);\n@@ -1137,7 +1138,7 @@ default_print_error_function (file)\n {\n   if (last_error_function != current_function_decl)\n     {\n-      const char *prefix = NULL;\n+      char *prefix = NULL;\n       output_buffer buffer;\n       \n       if (file)"}, {"sha": "d6a5748eb698bcaee52524cca978b825ec743486", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=362440248c3d5f5805aeb52c21c20036f0dbb361", "patch": "@@ -40,7 +40,7 @@ struct output_buffer\n   /* The obstack where the text is built up.  */  \n   struct obstack obstack;\n   /* The prefix for each new line.   */\n-  const char *prefix;\n+  char *prefix;\n   /* The amount of characters output so far.  */  \n   int line_length;\n   /* The real upper bound of number of characters per line, taking into\n@@ -72,10 +72,10 @@ struct output_buffer\n extern printer_fn lang_printer;\n \n /* Prototypes */\n-void init_output_buffer\t\tPARAMS ((output_buffer *, const char *, int));\n+void init_output_buffer\t\tPARAMS ((output_buffer *, char *, int));\n void output_clear\t\tPARAMS ((output_buffer *));\n-const char *output_get_prefix\tPARAMS ((const output_buffer *));\n-void output_set_prefix\t\tPARAMS ((output_buffer *, const char *));\n+char *output_get_prefix\t\tPARAMS ((const output_buffer *));\n+void output_set_prefix\t\tPARAMS ((output_buffer *, char *));\n void output_set_maximum_length  PARAMS ((output_buffer *, int));\n void output_emit_prefix\t\tPARAMS ((output_buffer *));\n void output_add_newline\t\tPARAMS ((output_buffer *));"}, {"sha": "a0038d17d5db62e099f663cc7f71e74300a80609", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=362440248c3d5f5805aeb52c21c20036f0dbb361", "patch": "@@ -5960,7 +5960,7 @@ init_dummy_function_start ()\n void\n init_function_start (subr, filename, line)\n      tree subr;\n-     char *filename;\n+     const char *filename;\n      int line;\n {\n   prepare_function_start ();"}, {"sha": "9e77a97c057f1f6d507e99c398343a33f1ca1d0d", "filename": "gcc/gensupport.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=362440248c3d5f5805aeb52c21c20036f0dbb361", "patch": "@@ -37,6 +37,9 @@ struct queue_elem {\n \n static struct queue_elem *rtx_ready_queue;\n \n+static void remove_constraints PARAMS ((rtx));\n+static void process_rtx PARAMS ((rtx *));\n+\n /* Recursively remove constraints from an rtx.  */\n \n static void"}, {"sha": "1b765d2359a9b8481a4d7c46d52f4aeed70c986d", "filename": "gcc/gthr-posix.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2Fgthr-posix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2Fgthr-posix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-posix.h?ref=362440248c3d5f5805aeb52c21c20036f0dbb361", "patch": "@@ -45,16 +45,16 @@ typedef pthread_mutex_t __gthread_mutex_t;\n \n #if SUPPORTS_WEAK && GTHREAD_USE_WEAK\n \n-#pragma weak pthread_once\n-#pragma weak pthread_key_create\n-#pragma weak pthread_key_delete\n-#pragma weak pthread_getspecific\n-#pragma weak pthread_setspecific\n-#pragma weak pthread_create\n-\n-#pragma weak pthread_mutex_lock \n-#pragma weak pthread_mutex_trylock \n-#pragma weak pthread_mutex_unlock \n+ #pragma weak pthread_once\n+ #pragma weak pthread_key_create\n+ #pragma weak pthread_key_delete\n+ #pragma weak pthread_getspecific\n+ #pragma weak pthread_setspecific\n+ #pragma weak pthread_create\n+\n+ #pragma weak pthread_mutex_lock \n+ #pragma weak pthread_mutex_trylock \n+ #pragma weak pthread_mutex_unlock \n \n static void *__gthread_active_ptr = &pthread_create;\n "}, {"sha": "25eac5fa796dc465a2dcf4469dd0bd391402a7ab", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=362440248c3d5f5805aeb52c21c20036f0dbb361", "patch": "@@ -341,6 +341,8 @@ static void handle_class_ref\t\t\tPARAMS ((tree));\n static void generate_struct_by_value_array\tPARAMS ((void))\n      ATTRIBUTE_NORETURN;\n static void objc_act_parse_init\t\t\tPARAMS ((void));\n+static void ggc_mark_imp_list\t\t\tPARAMS ((void *));\n+static void ggc_mark_hash_table\t\t\tPARAMS ((void *));\n \n /*** Private Interface (data) ***/\n "}, {"sha": "b957e5f6050fb59408acac70c35ba13d62340a1e", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=362440248c3d5f5805aeb52c21c20036f0dbb361", "patch": "@@ -216,12 +216,10 @@ estimate_probability (loops_info)\n    expected values of registers.  Generate branch probabilities \n    based off these values.  */\n \n-static rtx find_expected_value\t\tPARAMS ((rtx, rtx));\n-\n void\n expected_value_to_br_prob ()\n {\n-  rtx insn, cond, ev = NULL_RTX, ev_reg;\n+  rtx insn, cond, ev = NULL_RTX, ev_reg = NULL_RTX;\n \n   for (insn = get_insns (); insn ; insn = NEXT_INSN (insn))\n     {"}, {"sha": "125979bedc588cb5fd7e1440d25008a3aa9ffbea", "filename": "gcc/sbitmap.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2Fsbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2Fsbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.h?ref=362440248c3d5f5805aeb52c21c20036f0dbb361", "patch": "@@ -135,4 +135,5 @@ extern void sbitmap_intersection_of_preds  PARAMS ((sbitmap, sbitmap *, int));\n extern void sbitmap_union_of_succs\t   PARAMS ((sbitmap, sbitmap *, int));\n extern void sbitmap_union_of_preds\t   PARAMS ((sbitmap, sbitmap *, int));\n \n+extern void debug_sbitmap\t\t   PARAMS ((sbitmap));\n #endif /* _SBITMAP_H */"}, {"sha": "b89bf15e88d9748be018fb0ea51d9c51297840e5", "filename": "gcc/ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2Fssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2Fssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa.c?ref=362440248c3d5f5805aeb52c21c20036f0dbb361", "patch": "@@ -153,7 +153,7 @@ static int coalesce_reg_in_phi\n static int coalesce_regs_in_successor_phi_nodes\n   PARAMS ((basic_block bb, partition p, conflict_graph conflicts));\n static partition compute_coalesced_reg_partition\n-  PARAMS (());\n+  PARAMS ((void));\n static int mark_reg_in_phi \n   PARAMS ((rtx *ptr, void *data));\n static void mark_phi_and_copy_regs"}, {"sha": "c5c69e3c8f4f0d402f6a802592e6e13af41f117e", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=362440248c3d5f5805aeb52c21c20036f0dbb361", "patch": "@@ -53,6 +53,7 @@ unsigned int set_alignment = 0;\n static void finalize_record_size\tPARAMS ((record_layout_info));\n static void finalize_type_size\t\tPARAMS ((tree));\n static void place_union_field\t\tPARAMS ((record_layout_info, tree));\n+extern void debug_rli\t\t\tPARAMS ((record_layout_info));\n \f\n /* SAVE_EXPRs for sizes of types and decls, waiting to be expanded.  */\n "}, {"sha": "a6e122f86c6a727d687afe0a04f66f8883561d7f", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362440248c3d5f5805aeb52c21c20036f0dbb361/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=362440248c3d5f5805aeb52c21c20036f0dbb361", "patch": "@@ -2069,6 +2069,7 @@ extern tree size_int_type_wide\t\tPARAMS ((HOST_WIDE_INT, tree));\n #define sbitsize_int(L) size_int_wide ((HOST_WIDE_INT) (L), SBITSIZETYPE)\n \n extern tree round_up\t\t\tPARAMS ((tree, int));\n+extern tree round_down\t\t\tPARAMS ((tree, int));\n extern tree get_pending_sizes\t\tPARAMS ((void));\n extern void put_pending_sizes\t\tPARAMS ((tree));\n \n@@ -2674,7 +2675,7 @@ extern void mark_varargs\t\tPARAMS ((void));\n extern void init_dummy_function_start\tPARAMS ((void));\n extern void expand_dummy_function_end\tPARAMS ((void));\n extern void init_function_for_compilation\tPARAMS ((void));\n-extern void init_function_start\t\tPARAMS ((tree, char *, int));\n+extern void init_function_start\t\tPARAMS ((tree, const char *, int));\n extern void assign_parms\t\tPARAMS ((tree));\n extern void put_var_into_stack\t\tPARAMS ((tree));\n extern void flush_addressof\t\tPARAMS ((tree));"}]}