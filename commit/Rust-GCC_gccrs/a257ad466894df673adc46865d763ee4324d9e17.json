{"sha": "a257ad466894df673adc46865d763ee4324d9e17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI1N2FkNDY2ODk0ZGY2NzNhZGM0Njg2NWQ3NjNlZTQzMjRkOWUxNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-11-28T13:04:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-11-28T13:04:27Z"}, "message": "re PR tree-optimization/88217 (Compile time and memory hog w/ -O2 -fstrict-enums -fno-tree-forwprop -fno-tree-fre)\n\n2018-11-28  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/88217\n\t* vr-values.c (vr_values::extract_range_from_phi_node): Make\n\tsure to handle results > +INF and < -INF correctly when\n\ttrying to drop down to +INF - 1 or -INF + 1.\n\n\t* g++.dg/pr88217.C: New testcase.\n\nFrom-SVN: r266557", "tree": {"sha": "bb9217b9fbab81210da2036428065e73b22e1fa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb9217b9fbab81210da2036428065e73b22e1fa1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a257ad466894df673adc46865d763ee4324d9e17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a257ad466894df673adc46865d763ee4324d9e17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a257ad466894df673adc46865d763ee4324d9e17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a257ad466894df673adc46865d763ee4324d9e17/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "20f65b5607d4cf5b4b61e8d1923bb922abadf1ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20f65b5607d4cf5b4b61e8d1923bb922abadf1ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20f65b5607d4cf5b4b61e8d1923bb922abadf1ba"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "2c5bfffb5ecc14330999e01d2218f4980b910b4c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a257ad466894df673adc46865d763ee4324d9e17/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a257ad466894df673adc46865d763ee4324d9e17/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a257ad466894df673adc46865d763ee4324d9e17", "patch": "@@ -1,3 +1,10 @@\n+2018-11-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/88217\n+\t* vr-values.c (vr_values::extract_range_from_phi_node): Make\n+\tsure to handle results > +INF and < -INF correctly when\n+\ttrying to drop down to +INF - 1 or -INF + 1.\n+\n 2018-11-28  Alan Modra  <amodra@gmail.com>\n \n \t* xcoffout.c (do_block): Signed/unsigned warning fix."}, {"sha": "9f2383a38c362f048d67121b6b3683fd7445745e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a257ad466894df673adc46865d763ee4324d9e17/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a257ad466894df673adc46865d763ee4324d9e17/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a257ad466894df673adc46865d763ee4324d9e17", "patch": "@@ -1,3 +1,8 @@\n+2018-11-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/88217\n+\t* g++.dg/pr88217.C: New testcase.\n+\n 2018-11-28  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/79351"}, {"sha": "b0506acabd736d49b4677529cea80513bf165cf8", "filename": "gcc/testsuite/g++.dg/pr88217.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a257ad466894df673adc46865d763ee4324d9e17/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr88217.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a257ad466894df673adc46865d763ee4324d9e17/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr88217.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr88217.C?ref=a257ad466894df673adc46865d763ee4324d9e17", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-O2 -fstrict-enums -fno-tree-forwprop -fno-tree-fre\" }\n+\n+extern \"C\" int printf (const char *, ...);\n+\n+enum E { e1, e2, e3, X };\n+E operator*(E e) { return e; }\n+E begin(E e) { return e; }\n+E end(E e) { return X; }\n+E operator++(E& e) { return e = E(e+1); }\n+\n+int main()\n+{\n+  for (auto e: e1)\n+    {\n+      printf (\"%d \", e);\n+    }\n+}"}, {"sha": "a0027c0b3531ecb7517e2b0163e2550c8423299a", "filename": "gcc/vr-values.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a257ad466894df673adc46865d763ee4324d9e17/gcc%2Fvr-values.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a257ad466894df673adc46865d763ee4324d9e17/gcc%2Fvr-values.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.c?ref=a257ad466894df673adc46865d763ee4324d9e17", "patch": "@@ -2857,7 +2857,8 @@ vr_values::extract_range_from_phi_node (gphi *phi, value_range *vr_result)\n       if (cmp_min < 0)\n \tnew_min = lhs_vr->min ();\n       else if (cmp_min > 0\n-\t       && !vrp_val_is_min (vr_result->min ()))\n+\t       && tree_int_cst_lt (vrp_val_min (vr_result->type ()),\n+\t\t\t\t   vr_result->min ()))\n \tnew_min = int_const_binop (PLUS_EXPR,\n \t\t\t\t   vrp_val_min (vr_result->type ()),\n \t\t\t\t   build_int_cst (vr_result->type (), 1));\n@@ -2866,7 +2867,8 @@ vr_values::extract_range_from_phi_node (gphi *phi, value_range *vr_result)\n       if (cmp_max > 0)\n \tnew_max = lhs_vr->max ();\n       else if (cmp_max < 0\n-\t       && !vrp_val_is_max (vr_result->max ()))\n+\t       && tree_int_cst_lt (vr_result->max (),\n+\t\t\t\t   vrp_val_max (vr_result->type ())))\n \tnew_max = int_const_binop (MINUS_EXPR,\n \t\t\t\t   vrp_val_max (vr_result->type ()),\n \t\t\t\t   build_int_cst (vr_result->type (), 1));"}]}