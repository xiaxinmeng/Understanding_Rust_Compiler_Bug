{"sha": "0076c82f7682660c97e6c2e2c72960f443b40bf9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA3NmM4MmY3NjgyNjYwYzk3ZTZjMmUyYzcyOTYwZjQ0M2I0MGJmOQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-11-17T09:45:35Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-11-17T09:45:35Z"}, "message": "re PR target/68263 (Vector \"*mov<mode>_internal\" fails to handle misaligned load/store from reload)\n\n\tPR target/68263\n\t* config/i386/i386.h (BIGGEST_ALIGNMENT): Always define\n\tto 32 for IAMCU.\n\t* config/i386/sse.md (*mov<mode>_internal): Always enable\n\tAVX and SSE unaligned moves for IAMCU.\n\nFrom-SVN: r230456", "tree": {"sha": "babc7b76fe64b403a53a2ebff7f6d6b1b7d0e447", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/babc7b76fe64b403a53a2ebff7f6d6b1b7d0e447"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0076c82f7682660c97e6c2e2c72960f443b40bf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0076c82f7682660c97e6c2e2c72960f443b40bf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0076c82f7682660c97e6c2e2c72960f443b40bf9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0076c82f7682660c97e6c2e2c72960f443b40bf9/comments", "author": null, "committer": null, "parents": [{"sha": "b6eab8196c2a2c9c3aab38aecb6c528e8afd67ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6eab8196c2a2c9c3aab38aecb6c528e8afd67ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6eab8196c2a2c9c3aab38aecb6c528e8afd67ab"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "ceda4722db943ffe06901b9e18e237fc0953f3a4", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0076c82f7682660c97e6c2e2c72960f443b40bf9/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0076c82f7682660c97e6c2e2c72960f443b40bf9/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=0076c82f7682660c97e6c2e2c72960f443b40bf9", "patch": "@@ -814,7 +814,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    TARGET_ABSOLUTE_BIGGEST_ALIGNMENT.  */\n \n #define BIGGEST_ALIGNMENT \\\n-  (TARGET_AVX512F ? 512 : (TARGET_AVX ? 256 : (TARGET_IAMCU ? 32 : 128)))\n+  (TARGET_IAMCU ? 32 : (TARGET_AVX512F ? 512 : (TARGET_AVX ? 256 : 128)))\n \n /* Maximum stack alignment.  */\n #define MAX_STACK_ALIGNMENT MAX_OFILE_ALIGNMENT"}, {"sha": "e7b517aeb6ce25a492e088733621ff19fc73861f", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0076c82f7682660c97e6c2e2c72960f443b40bf9/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0076c82f7682660c97e6c2e2c72960f443b40bf9/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=0076c82f7682660c97e6c2e2c72960f443b40bf9", "patch": "@@ -892,30 +892,30 @@\n \tcase MODE_V16SF:\n \tcase MODE_V8SF:\n \tcase MODE_V4SF:\n-\t  if (TARGET_AVX\n+\t  if ((TARGET_AVX || TARGET_IAMCU)\n \t      && (misaligned_operand (operands[0], <MODE>mode)\n \t\t  || misaligned_operand (operands[1], <MODE>mode)))\n-\t    return \"vmovups\\t{%1, %0|%0, %1}\";\n+\t    return \"%vmovups\\t{%1, %0|%0, %1}\";\n \t  else\n \t    return \"%vmovaps\\t{%1, %0|%0, %1}\";\n \n \tcase MODE_V8DF:\n \tcase MODE_V4DF:\n \tcase MODE_V2DF:\n-\t  if (TARGET_AVX\n+\t  if ((TARGET_AVX || TARGET_IAMCU)\n \t      && (misaligned_operand (operands[0], <MODE>mode)\n \t\t  || misaligned_operand (operands[1], <MODE>mode)))\n-\t    return \"vmovupd\\t{%1, %0|%0, %1}\";\n+\t    return \"%vmovupd\\t{%1, %0|%0, %1}\";\n \t  else\n \t    return \"%vmovapd\\t{%1, %0|%0, %1}\";\n \n \tcase MODE_OI:\n \tcase MODE_TI:\n-\t  if (TARGET_AVX\n+\t  if ((TARGET_AVX || TARGET_IAMCU)\n \t      && (misaligned_operand (operands[0], <MODE>mode)\n \t\t  || misaligned_operand (operands[1], <MODE>mode)))\n \t    return TARGET_AVX512VL ? \"vmovdqu64\\t{%1, %0|%0, %1}\"\n-\t\t\t\t   : \"vmovdqu\\t{%1, %0|%0, %1}\";\n+\t\t\t\t   : \"%vmovdqu\\t{%1, %0|%0, %1}\";\n \t  else\n \t    return TARGET_AVX512VL ? \"vmovdqa64\\t{%1, %0|%0, %1}\"\n \t\t\t\t   : \"%vmovdqa\\t{%1, %0|%0, %1}\";"}]}