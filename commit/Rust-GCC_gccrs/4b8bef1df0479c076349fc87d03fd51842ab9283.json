{"sha": "4b8bef1df0479c076349fc87d03fd51842ab9283", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI4YmVmMWRmMDQ3OWMwNzYzNDlmYzg3ZDAzZmQ1MTg0MmFiOTI4Mw==", "commit": {"author": {"name": "Philippe De Muyter", "email": "phdm@macqel.be", "date": "1998-03-23T22:35:37Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-03-23T22:35:37Z"}, "message": "m68k.md (zero_extendqidi2, [...]): New patterns.\n\n        * m68k/m68k.md (zero_extendqidi2, zero_extendhidi2): New patterns.\n        (zero_extendsidi2): Avoid useless copy.\n        (iordi_zext): New pattern.\n        (iorsi_zexthi_ashl16): Pattern reworked to avoid \"0\" constraint for\n        operand 2.\n        (iorsi_zext): New name for old unnamed pattern; indentation fixes.\n\nFrom-SVN: r18785", "tree": {"sha": "60d3d94b2b2b0ab708c126ed0afc4884acf2329f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60d3d94b2b2b0ab708c126ed0afc4884acf2329f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b8bef1df0479c076349fc87d03fd51842ab9283", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b8bef1df0479c076349fc87d03fd51842ab9283", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b8bef1df0479c076349fc87d03fd51842ab9283", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b8bef1df0479c076349fc87d03fd51842ab9283/comments", "author": {"login": "phdm", "id": 2923420, "node_id": "MDQ6VXNlcjI5MjM0MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/2923420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phdm", "html_url": "https://github.com/phdm", "followers_url": "https://api.github.com/users/phdm/followers", "following_url": "https://api.github.com/users/phdm/following{/other_user}", "gists_url": "https://api.github.com/users/phdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/phdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phdm/subscriptions", "organizations_url": "https://api.github.com/users/phdm/orgs", "repos_url": "https://api.github.com/users/phdm/repos", "events_url": "https://api.github.com/users/phdm/events{/privacy}", "received_events_url": "https://api.github.com/users/phdm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3cac0a21fa9e67abf1ab6a772f3d4e47a5689f35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cac0a21fa9e67abf1ab6a772f3d4e47a5689f35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cac0a21fa9e67abf1ab6a772f3d4e47a5689f35"}], "stats": {"total": 92, "additions": 70, "deletions": 22}, "files": [{"sha": "96fb0ca4af0a03ca5948c5a49d3a79c2d4c260e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8bef1df0479c076349fc87d03fd51842ab9283/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8bef1df0479c076349fc87d03fd51842ab9283/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b8bef1df0479c076349fc87d03fd51842ab9283", "patch": "@@ -1,5 +1,12 @@\n Mon Mar 23 23:26:42 1998  Philippe De Muyter  <phdm@macqel.be>\n \n+\t* m68k/m68k.md (zero_extendqidi2, zero_extendhidi2): New patterns.\n+\t(zero_extendsidi2): Avoid useless copy.\n+\t(iordi_zext): New pattern.\n+\t(iorsi_zexthi_ashl16): Pattern reworked to avoid \"0\" constraint for\n+\toperand 2.\n+\t(iorsi_zext): New name for old unnamed pattern; indentation fixes.\n+\n \t* m68k/m68k.md (ashldi_const): Allow shift count in range ]32,63].\n \t(ashldi3): Allow constant shift count in range ]32,63].\n \t(ashrdi_const, ashrid3, lshrdi_const, lshrdi3): Likewise."}, {"sha": "52b3fd06ac854b0dec7e21f35fc1921af43557f6", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 63, "deletions": 22, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8bef1df0479c076349fc87d03fd51842ab9283/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8bef1df0479c076349fc87d03fd51842ab9283/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=4b8bef1df0479c076349fc87d03fd51842ab9283", "patch": "@@ -1445,6 +1445,28 @@\n \f\n ;; zero extension instructions\n \n+(define_insn \"zero_extendqidi2\"\n+  [(set (match_operand:DI 0 \"general_operand\" \"=&d\")\n+\t(zero_extend:DI (match_operand:QI 1 \"general_operand\" \"dm\")))]\n+  \"\"\n+  \"*\n+{\n+  CC_STATUS_INIT;\n+  operands[2] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+  return \\\"moveq %#0,%0\\;moveq %#0,%2\\;move%.b %1,%2\\\";\n+}\")\n+\n+(define_insn \"zero_extendhidi2\"\n+  [(set (match_operand:DI 0 \"general_operand\" \"=&d\")\n+\t(zero_extend:DI (match_operand:HI 1 \"general_operand\" \"rm\")))]\n+  \"\"\n+  \"*\n+{\n+  CC_STATUS_INIT;\n+  operands[2] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+  return \\\"moveq %#0,%0\\;moveq %#0,%2\\;move%.w %1,%2\\\";\n+}\")\n+\n ;; this is the canonical form for (lshiftrt:DI x 32)\n (define_insn \"zero_extendsidi2\"\n   [(set (match_operand:DI 0 \"general_operand\" \"rm\")\n@@ -1461,10 +1483,13 @@\n     return \\\"clr%.l %0\\;move%.l %1,%0\\\";\n   else\n     operands[2] = adj_offsettable_operand (operands[0], 4);\n+  if (GET_CODE (operands[1]) != REG || GET_CODE (operands[1]) != REG\n+      || REGNO (operands[1]) != REGNO (operands[2]))\n+    output_asm_insn (\\\"move%.l %1,%2\\\", operands);\n   if (ADDRESS_REG_P (operands[0]))\n-    return \\\"move%.l %1,%2\\;sub%.l %0,%0\\\";\n+    return \\\"sub%.l %0,%0\\\";\n   else\n-    return \\\"move%.l %1,%2\\;clr%.l %0\\\";\n+    return \\\"clr%.l %0\\\";\n }\")\n \n (define_expand \"zero_extendhisi2\"\n@@ -3641,6 +3666,31 @@\n \f\n ;; inclusive-or instructions\n \n+(define_insn \"iordi_zext\"\n+  [(set (match_operand:DI 0 \"general_operand\" \"=o,d\")\n+    (ior:DI (zero_extend:DI (match_operand 1 \"general_operand\" \"dn,dmn\"))\n+        (match_operand:DI 2 \"general_operand\" \"0,0\")))]\n+  \"!TARGET_5200\"\n+  \"*\n+{\n+  int byte_mode;\n+\n+  CC_STATUS_INIT;\n+  if (GET_CODE (operands[0]) == REG)\n+    operands[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+  else\n+    operands[0] = adj_offsettable_operand (operands[0], 4);\n+  if (GET_MODE (operands[1]) == SImode)\n+    return \\\"or%.l %1,%0\\\";\n+  byte_mode = (GET_MODE (operands[1]) == QImode);\n+  if (GET_CODE (operands[0]) == MEM)\n+    operands[0] = adj_offsettable_operand (operands[0], byte_mode ? 3 : 2);\n+  if (byte_mode)\n+    return \\\"or%.b %1,%0\\\";\n+  else\n+    return \\\"or%.w %1,%0\\\";\n+}\")\n+\n ;; \"iordi3\" is mainly here to help combine().\n (define_insn \"iordi3\"\n   [(set (match_operand:DI 0 \"general_operand\" \"=o,d\")\n@@ -3790,33 +3840,24 @@\n ;; On all 68k models, this makes faster code in a special case.\n ;; See also ashlsi_16, ashrsi_16 and lshrsi_16.\n \n-;; ??? This pattern can not work as written, because it fails if operand 0\n-;; and operand 1 are the same register.  This can happen for alternative 1.\n-;; This will still fail even if an early clobber is added to the output\n-;; for alternative 1.  This is because reload may satisfy the matching\n-;; constraint by forcing the output to use exactly the same register as\n-;; operand 2, without noticing that this then causes a conflict with operand 1.\n-;; Possible fix: check for operand 0/1 overlap, and emit correct but slower\n-;; code.  This should be rare if the early clobber is added.\n-\n (define_insn \"iorsi_zexthi_ashl16\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=&d,d\")\n-    (ior:SI (zero_extend:SI (match_operand:HI 1 \"general_operand\" \"dmn,dmn\"))\n-        (ashift:SI (match_operand:SI 2 \"general_operand\" \"o,0\")\n+  [(set (match_operand:SI 0 \"general_operand\" \"=&d\")\n+    (ior:SI (zero_extend:SI (match_operand:HI 1 \"general_operand\" \"rmn\"))\n+        (ashift:SI (match_operand:SI 2 \"general_operand\" \"or\")\n             (const_int 16))))]\n-  \"0\"\n+  \"\"\n   \"*\n {\n   CC_STATUS_INIT;\n   if (GET_CODE (operands[2]) != REG)\n-    {\n       operands[2] = adj_offsettable_operand (operands[2], 2);\n-      output_asm_insn (\\\"move%.w %2,%0\\\", operands);\n-    }\n+  if (GET_CODE (operands[2]) != REG\n+  || REGNO (operands[2]) != REGNO (operands[0]))\n+    output_asm_insn (\\\"move%.w %2,%0\\\", operands);\n   return \\\"swap %0\\;mov%.w %1,%0\\\";\n }\")\n \n-(define_insn \"\"\n+(define_insn \"iorsi_zext\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=o,d\")\n     (ior:SI (zero_extend:SI (match_operand 1 \"general_operand\" \"dn,dmn\"))\n         (match_operand:SI 2 \"general_operand\" \"0,0\")))]\n@@ -3826,13 +3867,13 @@\n   int byte_mode;\n \n   CC_STATUS_INIT;\n-  byte_mode = (GET_MODE(operands[1]) == QImode);\n+  byte_mode = (GET_MODE (operands[1]) == QImode);\n   if (GET_CODE (operands[0]) == MEM)\n     operands[0] = adj_offsettable_operand (operands[0], byte_mode ? 3 : 2);\n   if (byte_mode)\n-\treturn \\\"or%.b %1,%0\\\";\n+    return \\\"or%.b %1,%0\\\";\n   else\n-\treturn \\\"or%.w %1,%0\\\";\n+    return \\\"or%.w %1,%0\\\";\n }\")\n \f\n ;; xor instructions"}]}