{"sha": "fe5798c059f2ed1cf87abb0bc38b8ad376f2b7d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU1Nzk4YzA1OWYyZWQxY2Y4N2FiYjBiYzM4YjhhZDM3NmYyYjdkNg==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2012-03-30T13:25:45Z"}, "committer": {"name": "Tristan Gingold", "email": "gingold@gcc.gnu.org", "date": "2012-03-30T13:25:45Z"}, "message": "ia64.c (ia64_section_type_flags): Remove common_object attribute handling.\n\n2012-03-30  Tristan Gingold  <gingold@adacore.com>\n\n\t* config/ia64/ia64.c (ia64_section_type_flags): Remove\n\tcommon_object attribute handling.\n\t(SECTION_VMS_OVERLAY): Remove\n\t(ia64_vms_common_object_attribute): Replace abort with an assert.\n\tDo not set DECL_SECTION_NAME.\n\t(ia64_vms_output_aligned_decl_common): Handle common_object\n\tattribute.\n\t(ia64_vms_elf_asm_named_section): Remove.\n\t* config/ia64/vms.h (TARGET_ASM_NAMED_SECTION): Remove.\n\nFrom-SVN: r186010", "tree": {"sha": "839b8906b87722f583c3862de1fc95096c4c0214", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/839b8906b87722f583c3862de1fc95096c4c0214"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe5798c059f2ed1cf87abb0bc38b8ad376f2b7d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe5798c059f2ed1cf87abb0bc38b8ad376f2b7d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe5798c059f2ed1cf87abb0bc38b8ad376f2b7d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe5798c059f2ed1cf87abb0bc38b8ad376f2b7d6/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5cc553023d518c014d264dc8e860078425bc9158", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cc553023d518c014d264dc8e860078425bc9158", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cc553023d518c014d264dc8e860078425bc9158"}], "stats": {"total": 95, "additions": 35, "deletions": 60}, "files": [{"sha": "2afe362ef9898dafbea00baf5deda1a4e194b774", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe5798c059f2ed1cf87abb0bc38b8ad376f2b7d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe5798c059f2ed1cf87abb0bc38b8ad376f2b7d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe5798c059f2ed1cf87abb0bc38b8ad376f2b7d6", "patch": "@@ -1,3 +1,15 @@\n+2012-03-30  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* config/ia64/ia64.c (ia64_section_type_flags): Remove\n+\tcommon_object attribute handling.\n+\t(SECTION_VMS_OVERLAY): Remove\n+\t(ia64_vms_common_object_attribute): Replace abort with an assert.\n+\tDo not set DECL_SECTION_NAME.\n+\t(ia64_vms_output_aligned_decl_common): Handle common_object\n+\tattribute.\n+\t(ia64_vms_elf_asm_named_section): Remove.\n+\t* config/ia64/vms.h (TARGET_ASM_NAMED_SECTION): Remove.\n+\n 2012-03-30  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/52786"}, {"sha": "4b8a6929b1edcd4f52121e501707695f4b203e3c", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 23, "deletions": 57, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe5798c059f2ed1cf87abb0bc38b8ad376f2b7d6/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe5798c059f2ed1cf87abb0bc38b8ad376f2b7d6/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=fe5798c059f2ed1cf87abb0bc38b8ad376f2b7d6", "patch": "@@ -740,9 +740,6 @@ ia64_handle_model_attribute (tree *node, tree name, tree args,\n   return NULL_TREE;\n }\n \n-/* The section must have global and overlaid attributes.  */\n-#define SECTION_VMS_OVERLAY SECTION_MACH_DEP\n-\n /* Part of the low level implementation of DEC Ada pragma Common_Object which\n    enables the shared use of variables stored in overlaid linker areas\n    corresponding to the use of Fortran COMMON.  */\n@@ -753,24 +750,18 @@ ia64_vms_common_object_attribute (tree *node, tree name, tree args,\n \t\t\t\t  bool *no_add_attrs)\n {\n     tree decl = *node;\n-    tree id, val;\n-    if (! DECL_P (decl))\n-      abort ();\n+    tree id;\n+\n+    gcc_assert (DECL_P (decl));\n   \n     DECL_COMMON (decl) = 1;\n     id = TREE_VALUE (args);\n-    if (TREE_CODE (id) == IDENTIFIER_NODE)\n-      val = build_string (IDENTIFIER_LENGTH (id), IDENTIFIER_POINTER (id));\n-    else if (TREE_CODE (id) == STRING_CST)\n-      val = id;\n-    else\n+    if (TREE_CODE (id) != IDENTIFIER_NODE && TREE_CODE (id) != STRING_CST)\n       {\n-\twarning (OPT_Wattributes,\n-\t\t \"%qE attribute requires a string constant argument\", name);\n+\terror (\"%qE attribute requires a string constant argument\", name);\n \t*no_add_attrs = true;\n \treturn NULL_TREE;\n       }\n-    DECL_SECTION_NAME (decl) = val;\n     return NULL_TREE;\n }\n \n@@ -783,50 +774,31 @@ ia64_vms_output_aligned_decl_common (FILE *file, tree decl, const char *name,\n {\n   tree attr = DECL_ATTRIBUTES (decl);\n \n-  /* As common_object attribute set DECL_SECTION_NAME check it before\n-     looking up the attribute.  */\n-  if (DECL_SECTION_NAME (decl) && attr)\n+  if (attr)\n     attr = lookup_attribute (\"common_object\", attr);\n-  else\n-    attr = NULL_TREE;\n-\n-  if (!attr)\n-    {\n-      /*  Code from elfos.h.  */\n-      fprintf (file, \"%s\", COMMON_ASM_OP);\n-      assemble_name (file, name);\n-      fprintf (file, \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",\n-\t       size, align / BITS_PER_UNIT);\n-    }\n-  else\n+  if (attr)\n     {\n-      ASM_OUTPUT_ALIGN (file, floor_log2 (align / BITS_PER_UNIT));\n-      ASM_OUTPUT_LABEL (file, name);\n-      ASM_OUTPUT_SKIP (file, size ? size : 1);\n-    }\n-}\n+      tree id = TREE_VALUE (TREE_VALUE (attr));\n+      const char *name;\n \n-/* Definition of TARGET_ASM_NAMED_SECTION for VMS.  */\n+      if (TREE_CODE (id) == IDENTIFIER_NODE)\n+        name = IDENTIFIER_POINTER (id);\n+      else if (TREE_CODE (id) == STRING_CST)\n+        name = TREE_STRING_POINTER (id);\n+      else\n+        abort ();\n \n-void\n-ia64_vms_elf_asm_named_section (const char *name, unsigned int flags,\n-\t\t\t\ttree decl)\n-{\n-  if (!(flags & SECTION_VMS_OVERLAY))\n-    {\n-      default_elf_asm_named_section (name, flags, decl);\n-      return;\n+      fprintf (file, \"\\t.vms_common\\t\\\"%s\\\",\", name);\n     }\n-  if (flags != (SECTION_VMS_OVERLAY | SECTION_WRITE))\n-    abort ();\n+  else\n+    fprintf (file, \"%s\", COMMON_ASM_OP);\n \n-  if (flags & SECTION_DECLARED)\n-    {\n-      fprintf (asm_out_file, \"\\t.section\\t%s\\n\", name);\n-      return;\n-    }\n+  /*  Code from elfos.h.  */\n+  assemble_name (file, name);\n+  fprintf (file, \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%u\",\n+           size, align / BITS_PER_UNIT);\n \n-  fprintf (asm_out_file, \"\\t.section\\t%s,\\\"awgO\\\"\\n\", name);\n+  fputc ('\\n', file);\n }\n \n static void\n@@ -10536,12 +10508,6 @@ ia64_section_type_flags (tree decl, const char *name, int reloc)\n       || strncmp (name, \".gnu.linkonce.sb.\", 17) == 0)\n     flags = SECTION_SMALL;\n \n-#if TARGET_ABI_OPEN_VMS\n-  if (decl && DECL_ATTRIBUTES (decl)\n-      && lookup_attribute (\"common_object\", DECL_ATTRIBUTES (decl)))\n-    flags |= SECTION_VMS_OVERLAY;\n-#endif\n-\n   flags |= default_section_type_flags (decl, name, reloc);\n   return flags;\n }"}, {"sha": "3e81d769897592a9005171451f07a40a5ba188f4", "filename": "gcc/config/ia64/vms.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe5798c059f2ed1cf87abb0bc38b8ad376f2b7d6/gcc%2Fconfig%2Fia64%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe5798c059f2ed1cf87abb0bc38b8ad376f2b7d6/gcc%2Fconfig%2Fia64%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fvms.h?ref=fe5798c059f2ed1cf87abb0bc38b8ad376f2b7d6", "patch": "@@ -121,9 +121,6 @@ STATIC func_ptr __CTOR_LIST__[1]                                             \\\n #undef TARGET_VALID_POINTER_MODE\n #define TARGET_VALID_POINTER_MODE ia64_vms_valid_pointer_mode\n \n-#undef TARGET_ASM_NAMED_SECTION\n-#define TARGET_ASM_NAMED_SECTION ia64_vms_elf_asm_named_section\n-\n /* Define this macro if it is advisable to hold scalars in registers\n    in a wider mode than that declared by the program.  In such cases,\n    the value is constrained to be within the bounds of the declared"}]}