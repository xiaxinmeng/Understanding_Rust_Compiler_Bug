{"sha": "96f218bb2aa467606a31c67b3f64c0ac04457f25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZmMjE4YmIyYWE0Njc2MDZhMzFjNjdiM2Y2NGMwYWMwNDQ1N2YyNQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1994-09-26T10:44:49Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1994-09-26T10:44:49Z"}, "message": "Allow memory/memory DImode add/subtract.\n\nFrom-SVN: r8128", "tree": {"sha": "6d15d6b09c65eb9db9ca892939a52b048242cd94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d15d6b09c65eb9db9ca892939a52b048242cd94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96f218bb2aa467606a31c67b3f64c0ac04457f25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96f218bb2aa467606a31c67b3f64c0ac04457f25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96f218bb2aa467606a31c67b3f64c0ac04457f25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96f218bb2aa467606a31c67b3f64c0ac04457f25/comments", "author": null, "committer": null, "parents": [{"sha": "68c1e17399798b38c22e7f20bfc4b7a5612e5f09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c1e17399798b38c22e7f20bfc4b7a5612e5f09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68c1e17399798b38c22e7f20bfc4b7a5612e5f09"}], "stats": {"total": 107, "additions": 97, "deletions": 10}, "files": [{"sha": "131ab7cef0853b47e7a532946c929131075f3a74", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 97, "deletions": 10, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96f218bb2aa467606a31c67b3f64c0ac04457f25/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96f218bb2aa467606a31c67b3f64c0ac04457f25/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=96f218bb2aa467606a31c67b3f64c0ac04457f25", "patch": "@@ -2345,25 +2345,69 @@\n ;;- add instructions\n \n (define_insn \"adddi3\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"=&r,ro\")\n-\t(plus:DI (match_operand:DI 1 \"general_operand\" \"%0,0\")\n-\t\t (match_operand:DI 2 \"general_operand\" \"o,riF\")))]\n+  [(set (match_operand:DI 0 \"general_operand\" \"=&r,ro,o,&r,o,o,o\")\n+\t(plus:DI (match_operand:DI 1 \"general_operand\" \"%0,0,0,or,riF,riF,o\")\n+\t\t (match_operand:DI 2 \"general_operand\" \"o,riF,o,oriF,riF,o,o\")))\n+   (clobber (match_scratch:SI 3 \"=X,X,&r,X,X,&r,&r\"))]\n   \"\"\n   \"*\n {\n-  rtx low[3], high[3];\n+  rtx low[3], high[3], xops[7];\n \n   CC_STATUS_INIT;\n \n   split_di (operands, 3, low, high);\n \n-  if (GET_CODE (low[2]) != CONST_INT || INTVAL (low[2]) != 0)\n+  if (!rtx_equal_p (operands[0], operands[1]))\n+    {\n+      xops[0] = high[0];\n+      xops[1] = low[0];\n+      xops[2] = high[1];\n+      xops[3] = low[1];\n+\n+      if (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n+\t{\n+\t  output_asm_insn (AS2 (mov%L1,%3,%1), xops);\n+\t  output_asm_insn (AS2 (mov%L0,%2,%0), xops);\n+\t}\n+      else\n+\t{\n+\t  xops[4] = high[2];\n+\t  xops[5] = low[2];\n+\t  xops[6] = operands[3];\n+\t  output_asm_insn (AS2 (mov%L6,%3,%6), xops);\n+\t  output_asm_insn (AS2 (add%L6,%5,%6), xops);\n+\t  output_asm_insn (AS2 (mov%L1,%6,%1), xops);\n+\t  output_asm_insn (AS2 (mov%L6,%2,%6), xops);\n+\t  output_asm_insn (AS2 (adc%L6,%4,%6), xops);\n+\t  output_asm_insn (AS2 (mov%L0,%6,%0), xops);\n+\t  RET;\n+\t}\n+    }\n+\n+  if (GET_CODE (operands[3]) == REG)\n+    {\n+      xops[0] = high[0];\n+      xops[1] = low[0];\n+      xops[2] = high[2];\n+      xops[3] = low[2];\n+      xops[4] = operands[3];\n+\n+      output_asm_insn (AS2 (mov%L4,%3,%4), xops);\n+      output_asm_insn (AS2 (add%L1,%4,%1), xops);\n+      output_asm_insn (AS2 (mov%L4,%2,%4), xops);\n+      output_asm_insn (AS2 (adc%L0,%4,%0), xops);\n+    }\n+\n+  else if (GET_CODE (low[2]) != CONST_INT || INTVAL (low[2]) != 0)\n     {\n       output_asm_insn (AS2 (add%L0,%2,%0), low);\n       output_asm_insn (AS2 (adc%L0,%2,%0), high);\n     }\n+\n   else\n     output_asm_insn (AS2 (add%L0,%2,%0), high);\n+\n   RET;\n }\")\n \n@@ -2546,23 +2590,66 @@\n ;;- subtract instructions\n \n (define_insn \"subdi3\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"=&r,ro\")\n-\t(minus:DI (match_operand:DI 1 \"general_operand\" \"0,0\")\n-\t\t  (match_operand:DI 2 \"general_operand\" \"o,riF\")))]\n+  [(set (match_operand:DI 0 \"general_operand\" \"=&r,ro,&r,o,o\")\n+\t(minus:DI (match_operand:DI 1 \"general_operand\" \"0,0,roiF,riF,o\")\n+\t\t  (match_operand:DI 2 \"general_operand\" \"o,riF,roiF,riF,o\")))\n+   (clobber (match_scratch:SI 3 \"=X,X,X,X,&r\"))]\n   \"\"\n   \"*\n {\n-  rtx low[3], high[3];\n+  rtx low[3], high[3], xops[7];\n \n   CC_STATUS_INIT;\n \n   split_di (operands, 3, low, high);\n \n-  if (GET_CODE (low[2]) != CONST_INT || INTVAL (low[2]) != 0)\n+  if (!rtx_equal_p (operands[0], operands[1]))\n+    {\n+      xops[0] = high[0];\n+      xops[1] = low[0];\n+      xops[2] = high[1];\n+      xops[3] = low[1];\n+\n+      if (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n+\t{\n+\t  output_asm_insn (AS2 (mov%L1,%3,%1), xops);\n+\t  output_asm_insn (AS2 (mov%L0,%2,%0), xops);\n+\t}\n+      else\n+\t{\n+\t  xops[4] = high[2];\n+\t  xops[5] = low[2];\n+\t  xops[6] = operands[3];\n+\t  output_asm_insn (AS2 (mov%L6,%3,%6), xops);\n+\t  output_asm_insn (AS2 (sub%L6,%5,%6), xops);\n+\t  output_asm_insn (AS2 (mov%L1,%6,%1), xops);\n+\t  output_asm_insn (AS2 (mov%L6,%2,%6), xops);\n+\t  output_asm_insn (AS2 (sbb%L6,%4,%6), xops);\n+\t  output_asm_insn (AS2 (mov%L0,%6,%0), xops);\n+\t  RET;\n+\t}\n+    }\n+\n+  if (GET_CODE (operands[3]) == REG)\n+    {\n+      xops[0] = high[0];\n+      xops[1] = low[0];\n+      xops[2] = high[2];\n+      xops[3] = low[2];\n+      xops[4] = operands[3];\n+\n+      output_asm_insn (AS2 (mov%L4,%3,%4), xops);\n+      output_asm_insn (AS2 (sub%L1,%4,%1), xops);\n+      output_asm_insn (AS2 (mov%L4,%2,%4), xops);\n+      output_asm_insn (AS2 (sbb%L0,%4,%0), xops);\n+    }\n+\n+  else if (GET_CODE (low[2]) != CONST_INT || INTVAL (low[2]) != 0)\n     {\n       output_asm_insn (AS2 (sub%L0,%2,%0), low);\n       output_asm_insn (AS2 (sbb%L0,%2,%0), high);\n     }\n+\n   else\n     output_asm_insn (AS2 (sub%L0,%2,%0), high);\n "}]}