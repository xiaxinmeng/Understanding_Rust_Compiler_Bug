{"sha": "f5eab47e103f6453d4b3f1390c0b855c43aa0210", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVlYWI0N2UxMDNmNjQ1M2Q0YjNmMTM5MGMwYjg1NWM0M2FhMDIxMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-08-30T06:28:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-08-30T06:28:21Z"}, "message": "re PR preprocessor/20348 (File not included when file with same name is included before)\n\n\tPR preprocessor/20348\n\tPR preprocessor/20356\n\t* files.c (_cpp_find_file, search_cache): Revert 2004-06-26 and\n\t2004-06-05 changes.\n\n\t* gcc.dg/cpp/pr20348.c: New test.\n\t* gcc.dg/cpp/pr20348.h: New file.\n\t* gcc.dg/cpp/inc/pr20348.h: New file.\n\t* gcc.dg/cpp/inc/pr20348-aux.h: New file.\n\t* gcc.dg/cpp/pr20356.c: New test.\n\t* gcc.dg/cpp/pr20356.h: New file.\n\t* gcc.dg/cpp/inc/pr20356.h: New file.\n\t* gcc.dg/cpp/inc/pr20356-aux.h: New file.\n\nFrom-SVN: r103629", "tree": {"sha": "b922d7af91c80fb097921024929e5f478a487d86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b922d7af91c80fb097921024929e5f478a487d86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5eab47e103f6453d4b3f1390c0b855c43aa0210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5eab47e103f6453d4b3f1390c0b855c43aa0210", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5eab47e103f6453d4b3f1390c0b855c43aa0210", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5eab47e103f6453d4b3f1390c0b855c43aa0210/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4dc0796f75c62945c1a8ffbec1ab86875b35a45c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dc0796f75c62945c1a8ffbec1ab86875b35a45c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dc0796f75c62945c1a8ffbec1ab86875b35a45c"}], "stats": {"total": 157, "additions": 106, "deletions": 51}, "files": [{"sha": "05e68f5754ea8929e26ff6edbee183355c78eea0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5eab47e103f6453d4b3f1390c0b855c43aa0210/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5eab47e103f6453d4b3f1390c0b855c43aa0210/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f5eab47e103f6453d4b3f1390c0b855c43aa0210", "patch": "@@ -1,3 +1,16 @@\n+2005-08-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/20348\n+\tPR preprocessor/20356\n+\t* gcc.dg/cpp/pr20348.c: New test.\n+\t* gcc.dg/cpp/pr20348.h: New file.\n+\t* gcc.dg/cpp/inc/pr20348.h: New file.\n+\t* gcc.dg/cpp/inc/pr20348-aux.h: New file.\n+\t* gcc.dg/cpp/pr20356.c: New test.\n+\t* gcc.dg/cpp/pr20356.h: New file.\n+\t* gcc.dg/cpp/inc/pr20356.h: New file.\n+\t* gcc.dg/cpp/inc/pr20356-aux.h: New file.\n+\n 2005-08-29  Jerry DeLisle  <jvdelisle@verizon.net>\n \n \t* gfortran.fortran-torture/execute/intrinsic_count.f90:"}, {"sha": "1f04c756975c3695c9118c262b6c6842706c0881", "filename": "gcc/testsuite/gcc.dg/cpp/inc/pr20348-aux.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5eab47e103f6453d4b3f1390c0b855c43aa0210/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Finc%2Fpr20348-aux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5eab47e103f6453d4b3f1390c0b855c43aa0210/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Finc%2Fpr20348-aux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Finc%2Fpr20348-aux.h?ref=f5eab47e103f6453d4b3f1390c0b855c43aa0210", "patch": "@@ -0,0 +1 @@\n+#include \"pr20348.h\""}, {"sha": "810bb36d792dad3f20a8715b13f78939359108c9", "filename": "gcc/testsuite/gcc.dg/cpp/inc/pr20348.h", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5eab47e103f6453d4b3f1390c0b855c43aa0210/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Finc%2Fpr20348.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5eab47e103f6453d4b3f1390c0b855c43aa0210/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Finc%2Fpr20348.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Finc%2Fpr20348.h?ref=f5eab47e103f6453d4b3f1390c0b855c43aa0210", "patch": "@@ -0,0 +1,9 @@\n+#ifndef MIDDLE\n+# ifndef INC_PR20348_H_SEEN\n+#  define INC_PR20348_H_SEEN\n+# else\n+#  error inc/pr20348.h included twice before MIDDLE definition\n+# endif\n+#else\n+# error inc/pr20348.h included after MIDDLE definition\n+#endif"}, {"sha": "3f4a67f8effd0d5d829eb3c281db08d22b90431a", "filename": "gcc/testsuite/gcc.dg/cpp/inc/pr20356-aux.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5eab47e103f6453d4b3f1390c0b855c43aa0210/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Finc%2Fpr20356-aux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5eab47e103f6453d4b3f1390c0b855c43aa0210/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Finc%2Fpr20356-aux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Finc%2Fpr20356-aux.h?ref=f5eab47e103f6453d4b3f1390c0b855c43aa0210", "patch": "@@ -0,0 +1 @@\n+#include \"pr20356.h\""}, {"sha": "5829257392c6ac5ca11cc2a7b64470e842f89801", "filename": "gcc/testsuite/gcc.dg/cpp/inc/pr20356.h", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5eab47e103f6453d4b3f1390c0b855c43aa0210/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Finc%2Fpr20356.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5eab47e103f6453d4b3f1390c0b855c43aa0210/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Finc%2Fpr20356.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Finc%2Fpr20356.h?ref=f5eab47e103f6453d4b3f1390c0b855c43aa0210", "patch": "@@ -0,0 +1,6 @@\n+#ifndef INC_PR20356_H\n+# define INC_PR20356_H\n+#endif\n+#ifndef PR20356_H\n+# include_next <pr20356.h>\n+#endif"}, {"sha": "f75f14290ca49fd7c68bf4ca9a835b403b4d7ce2", "filename": "gcc/testsuite/gcc.dg/cpp/pr20348.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5eab47e103f6453d4b3f1390c0b855c43aa0210/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr20348.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5eab47e103f6453d4b3f1390c0b855c43aa0210/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr20348.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr20348.c?ref=f5eab47e103f6453d4b3f1390c0b855c43aa0210", "patch": "@@ -0,0 +1,16 @@\n+/* PR preprocessor/20348 */\n+/* { dg-do compile } */\n+/* { dg-options \"-I$srcdir/gcc.dg/cpp -I$srcdir/gcc.dg/cpp/inc\" } */\n+\n+#include <pr20348-aux.h>\n+#define MIDDLE\n+#include <pr20348.h>\n+\n+#ifndef PR20348_H_SEEN\n+# error pr20348.h not included after MIDDLE definition\n+#endif\n+#ifndef INC_PR20348_H_SEEN\n+# error inc/pr20348.h not included before MIDDLE definition\n+#endif\n+\n+int i;"}, {"sha": "97ef80edbaacf7a6f92393aa0a85575d4d9da4c7", "filename": "gcc/testsuite/gcc.dg/cpp/pr20348.h", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5eab47e103f6453d4b3f1390c0b855c43aa0210/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr20348.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5eab47e103f6453d4b3f1390c0b855c43aa0210/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr20348.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr20348.h?ref=f5eab47e103f6453d4b3f1390c0b855c43aa0210", "patch": "@@ -0,0 +1,9 @@\n+#ifdef MIDDLE\n+# ifndef PR20348_H_SEEN\n+#  define PR20348_H_SEEN\n+# else\n+#  error pr20348.h included twice after MIDDLE definition\n+# endif\n+#else\n+# error pr20348.h included before MIDDLE definition\n+#endif"}, {"sha": "469ab0c0f6f0a42b902dd98cb5803a944dbd2d5c", "filename": "gcc/testsuite/gcc.dg/cpp/pr20356.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5eab47e103f6453d4b3f1390c0b855c43aa0210/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr20356.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5eab47e103f6453d4b3f1390c0b855c43aa0210/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr20356.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr20356.c?ref=f5eab47e103f6453d4b3f1390c0b855c43aa0210", "patch": "@@ -0,0 +1,14 @@\n+/* PR preprocessor/20356 */\n+/* { dg-do compile } */\n+/* { dg-options \"-I$srcdir/gcc.dg/cpp -I$srcdir/gcc.dg/cpp/inc\" } */\n+\n+#include <pr20356-aux.h>\n+\n+#ifndef PR20356_H\n+# error PR20356_H not defined\n+#endif\n+#ifndef INC_PR20356_H\n+# error INC_PR20356_H not defined\n+#endif\n+\n+int i;"}, {"sha": "a3f289145aca9cd64d7a1fac16816a25094c1191", "filename": "gcc/testsuite/gcc.dg/cpp/pr20356.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5eab47e103f6453d4b3f1390c0b855c43aa0210/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr20356.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5eab47e103f6453d4b3f1390c0b855c43aa0210/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr20356.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr20356.h?ref=f5eab47e103f6453d4b3f1390c0b855c43aa0210", "patch": "@@ -0,0 +1,5 @@\n+#ifndef PR20356_H\n+# define PR20356_H\n+#else\n+# include_next <pr20356.h>\n+#endif"}, {"sha": "1b62fcce3e2da875b7d59e14a262aca7e8eacfd1", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5eab47e103f6453d4b3f1390c0b855c43aa0210/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5eab47e103f6453d4b3f1390c0b855c43aa0210/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=f5eab47e103f6453d4b3f1390c0b855c43aa0210", "patch": "@@ -1,3 +1,10 @@\n+2005-08-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/20348\n+\tPR preprocessor/20356\n+\t* files.c (_cpp_find_file, search_cache): Revert 2004-06-26 and\n+\t2004-06-05 changes.\n+\n 2005-07-23  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* configure.ac (ACX_PROG_CC_WARNING_OPTS): add"}, {"sha": "779fec7ca63202e149c034185f01ffd77c8efa06", "filename": "libcpp/files.c", "status": "modified", "additions": 25, "deletions": 51, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5eab47e103f6453d4b3f1390c0b855c43aa0210/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5eab47e103f6453d4b3f1390c0b855c43aa0210/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=f5eab47e103f6453d4b3f1390c0b855c43aa0210", "patch": "@@ -416,21 +416,6 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, bool f\n   /* Try each path in the include chain.  */\n   for (; !fake ;)\n     {\n-      if (file->dir == pfile->quote_include\n-\t  || file->dir == pfile->bracket_include)\n-\t{\n-\t  entry = search_cache (*hash_slot, file->dir);\n-\t  if (entry)\n-\t    {\n-\t      /* Found the same file again.  Record it as reachable\n-\t\t from this position, too.  */\n-\t      free ((char *) file->name);\n-\t      free (file);\n-\t      file = entry->u.file;\n-\t      goto found;\n-\t    }\n-\t}\n-\n       if (find_file_in_dir (pfile, file, &invalid_pch))\n \tbreak;\n \n@@ -459,40 +444,33 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, bool f\n \t    }\n \t  break;\n \t}\n-    }\n \n-  /* This is a new file; put it in the list.  */\n-  file->next_file = pfile->all_files;\n-  pfile->all_files = file;\n+      /* Only check the cache for the starting location (done above)\n+\t and the quote and bracket chain heads because there are no\n+\t other possible starting points for searches.  */\n+      if (file->dir != pfile->bracket_include\n+\t  && file->dir != pfile->quote_include)\n+\tcontinue;\n \n-  /* If this file was found in the directory-of-the-current-file,\n-     check whether that directory is reachable via one of the normal\n-     search paths.  If so, we must record this entry as being\n-     reachable that way, otherwise we will mistakenly reprocess this\n-     file if it is included later from the normal search path.  */\n-  if (file->dir && start_dir->next == pfile->quote_include)\n-    {\n-      cpp_dir *d;\n-      cpp_dir *proper_start_dir = pfile->quote_include;\n+      entry = search_cache (*hash_slot, file->dir);\n+      if (entry)\n+\tbreak;\n+    }\n \n-      for (d = proper_start_dir;; d = d->next)\n-\t{\n-\t  if (d == pfile->bracket_include)\n-\t    proper_start_dir = d;\n-\t  if (d == 0)\n-\t    {\n-\t      proper_start_dir = 0;\n-\t      break;\n-\t    }\n-\t  /* file->dir->name will have a trailing slash.  */\n-\t  if (!strncmp (d->name, file->dir->name, file->dir->len - 1))\n-\t    break;\n-\t}\n-      if (proper_start_dir)\n-\tstart_dir = proper_start_dir;\n+  if (entry)\n+    {\n+      /* Cache for START_DIR too, sharing the _cpp_file structure.  */\n+      free ((char *) file->name);\n+      free (file);\n+      file = entry->u.file;\n+    }\n+  else\n+    {\n+      /* This is a new file; put it in the list.  */\n+      file->next_file = pfile->all_files;\n+      pfile->all_files = file;\n     }\n \n- found:\n   /* Store this new result in the hash table.  */\n   entry = new_file_hash_entry (pfile);\n   entry->next = *hash_slot;\n@@ -880,14 +858,10 @@ open_file_failed (cpp_reader *pfile, _cpp_file *file)\n static struct file_hash_entry *\n search_cache (struct file_hash_entry *head, const cpp_dir *start_dir)\n {\n-  struct file_hash_entry *p;\n+  while (head && head->start_dir != start_dir)\n+    head = head->next;\n \n-  /* Look for a file that was found from a search starting at the\n-     given location.  */\n-  for (p = head; p; p = p->next)\n-    if (p->start_dir == start_dir)\n-      return p;\n-  return 0;\n+  return head;\n }\n \n /* Allocate a new _cpp_file structure.  */"}]}