{"sha": "4be5e5b12d501cb3aae673e673c30363b32480df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJlNWU1YjEyZDUwMWNiM2FhZTY3M2U2NzNjMzAzNjNiMzI0ODBkZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-02-25T06:22:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-02-25T06:22:51Z"}, "message": "parser.c (cp_parser_constant_expression): Set non_integral_constant_expression correctly for C++0x too.\n\n\t* parser.c (cp_parser_constant_expression): Set\n\tnon_integral_constant_expression correctly for C++0x too.\n\t(cp_parser_static_assert): Allow non-constant expression.\n\t(cp_parser_direct_declarator): Expect non_constant_p to be set\n\tproperly for C++0x.\n\t* pt.c (value_dependent_expression_p): Handle TYPEID_EXPR.\n\t* semantics.c (maybe_constant_value): Check type_unknown_p too.\n\t(potential_rvalue_constant_expression): New.\n\t(require_potential_rvalue_constant_expression): New.\n\nFrom-SVN: r170488", "tree": {"sha": "49b81324ade09d98696d503e866b68909cbe56f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49b81324ade09d98696d503e866b68909cbe56f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4be5e5b12d501cb3aae673e673c30363b32480df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4be5e5b12d501cb3aae673e673c30363b32480df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4be5e5b12d501cb3aae673e673c30363b32480df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4be5e5b12d501cb3aae673e673c30363b32480df/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8da6ac3b5b71b1bb2d7c1883e7ab3ac05e6e8366", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8da6ac3b5b71b1bb2d7c1883e7ab3ac05e6e8366", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8da6ac3b5b71b1bb2d7c1883e7ab3ac05e6e8366"}], "stats": {"total": 113, "additions": 97, "deletions": 16}, "files": [{"sha": "3dba66e335bbc7a16e5e77bc6a58af33d2fcd458", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be5e5b12d501cb3aae673e673c30363b32480df/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be5e5b12d501cb3aae673e673c30363b32480df/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4be5e5b12d501cb3aae673e673c30363b32480df", "patch": "@@ -1,3 +1,15 @@\n+2011-02-24  Jason Merrill  <jason@redhat.com>\n+\n+\t* parser.c (cp_parser_constant_expression): Set\n+\tnon_integral_constant_expression correctly for C++0x too.\n+\t(cp_parser_static_assert): Allow non-constant expression.\n+\t(cp_parser_direct_declarator): Expect non_constant_p to be set\n+\tproperly for C++0x.\n+\t* pt.c (value_dependent_expression_p): Handle TYPEID_EXPR.\n+\t* semantics.c (maybe_constant_value): Check type_unknown_p too.\n+\t(potential_rvalue_constant_expression): New.\n+\t(require_potential_rvalue_constant_expression): New.\n+\n 2011-02-23  Jason Merrill  <jason@redhat.com>\n \n \t* cp-tree.h (DECL_PARM_LEVEL): New."}, {"sha": "d5a6d5c0763111cda4919961c00ee4ff1b04cf93", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be5e5b12d501cb3aae673e673c30363b32480df/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be5e5b12d501cb3aae673e673c30363b32480df/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4be5e5b12d501cb3aae673e673c30363b32480df", "patch": "@@ -5256,7 +5256,9 @@ extern tree register_constexpr_fundef (tree, tree);\n extern bool check_constexpr_ctor_body (tree, tree);\n extern tree ensure_literal_type_for_constexpr_object (tree);\n extern bool potential_constant_expression (tree);\n+extern bool potential_rvalue_constant_expression (tree);\n extern bool require_potential_constant_expression (tree);\n+extern bool require_potential_rvalue_constant_expression (tree);\n extern tree cxx_constant_value (tree);\n extern tree maybe_constant_value (tree);\n extern tree maybe_constant_init (tree);"}, {"sha": "93c184845f9131b49fd2abf552e529a006ccf43b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be5e5b12d501cb3aae673e673c30363b32480df/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be5e5b12d501cb3aae673e673c30363b32480df/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4be5e5b12d501cb3aae673e673c30363b32480df", "patch": "@@ -5824,12 +5824,10 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n   if (init && TREE_CODE (decl) == VAR_DECL)\n     {\n       DECL_NONTRIVIALLY_INITIALIZED_P (decl) = 1;\n-      /* FIXME we rely on TREE_CONSTANT below; basing that on\n-\t init_const_expr_p is probably wrong for C++0x.  */\n       if (init_const_expr_p)\n \t{\n-\t  /* Set these flags now for C++98 templates.  We'll update the\n-\t     flags in store_init_value for instantiations and C++0x.  */\n+\t  /* Set these flags now for templates.  We'll update the flags in\n+\t     store_init_value for instantiations.  */\n \t  DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl) = 1;\n \t  if (decl_maybe_constant_var_p (decl))\n \t    TREE_CONSTANT (decl) = 1;"}, {"sha": "314a2ff2c49703d655354aac38aeb71e90e9bff1", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be5e5b12d501cb3aae673e673c30363b32480df/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be5e5b12d501cb3aae673e673c30363b32480df/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4be5e5b12d501cb3aae673e673c30363b32480df", "patch": "@@ -7266,10 +7266,19 @@ cp_parser_constant_expression (cp_parser* parser,\n     = saved_integral_constant_expression_p;\n   parser->allow_non_integral_constant_expression_p\n     = saved_allow_non_integral_constant_expression_p;\n+  if (cxx_dialect >= cxx0x)\n+    {\n+      /* Require an rvalue constant expression here; that's what our\n+\t callers expect.  Reference constant expressions are handled\n+\t separately in e.g. cp_parser_template_argument.  */\n+      bool is_const = potential_rvalue_constant_expression (expression);\n+      parser->non_integral_constant_expression_p = !is_const;\n+      if (!is_const && !allow_non_constant_p)\n+\trequire_potential_rvalue_constant_expression (expression);\n+    }\n   if (allow_non_constant_p)\n     *non_constant_p = parser->non_integral_constant_expression_p;\n-  else if (parser->non_integral_constant_expression_p\n-\t   && cxx_dialect < cxx0x)\n+  else if (parser->non_integral_constant_expression_p)\n     expression = error_mark_node;\n   parser->non_integral_constant_expression_p\n     = saved_non_integral_constant_expression_p;\n@@ -10212,6 +10221,7 @@ cp_parser_static_assert(cp_parser *parser, bool member_p)\n   tree message;\n   cp_token *token;\n   location_t saved_loc;\n+  bool dummy;\n \n   /* Peek at the `static_assert' token so we can keep track of exactly\n      where the static assertion started.  */\n@@ -10231,11 +10241,12 @@ cp_parser_static_assert(cp_parser *parser, bool member_p)\n   /* Parse the `(' starting the static assertion condition.  */\n   cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN);\n \n-  /* Parse the constant-expression.  */\n+  /* Parse the constant-expression.  Allow a non-constant expression\n+     here in order to give better diagnostics in finish_static_assert.  */\n   condition = \n     cp_parser_constant_expression (parser,\n-                                   /*allow_non_constant_p=*/false,\n-                                   /*non_constant_p=*/NULL);\n+                                   /*allow_non_constant_p=*/true,\n+                                   /*non_constant_p=*/&dummy);\n \n   /* Parse the separating `,'.  */\n   cp_parser_require (parser, CPP_COMMA, RT_COMMA);\n@@ -15115,7 +15126,7 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\t= cp_parser_constant_expression (parser,\n \t\t\t\t\t\t /*allow_non_constant=*/true,\n \t\t\t\t\t\t &non_constant_p);\n-\t      if (!non_constant_p || cxx_dialect >= cxx0x)\n+\t      if (!non_constant_p)\n \t\t/* OK */;\n \t      /* Normally, the array bound must be an integral constant\n \t\t expression.  However, as an extension, we allow VLAs"}, {"sha": "ed9d28b0b2fd75babc5b6a5d10d80d16ad16034f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be5e5b12d501cb3aae673e673c30363b32480df/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be5e5b12d501cb3aae673e673c30363b32480df/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4be5e5b12d501cb3aae673e673c30363b32480df", "patch": "@@ -18091,6 +18091,7 @@ value_dependent_expression_p (tree expression)\n \n     case SIZEOF_EXPR:\n     case ALIGNOF_EXPR:\n+    case TYPEID_EXPR:\n       /* A `sizeof' expression is value-dependent if the operand is\n \t type-dependent or is a pack expansion.  */\n       expression = TREE_OPERAND (expression, 0);"}, {"sha": "199084a60081fd187fac86869866ca057d95a34e", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be5e5b12d501cb3aae673e673c30363b32480df/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be5e5b12d501cb3aae673e673c30363b32480df/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=4be5e5b12d501cb3aae673e673c30363b32480df", "patch": "@@ -7138,6 +7138,7 @@ maybe_constant_value (tree t)\n   tree r;\n \n   if (type_dependent_expression_p (t)\n+      || type_unknown_p (t)\n       || !potential_constant_expression (t)\n       || value_dependent_expression_p (t))\n     return t;\n@@ -7727,13 +7728,29 @@ potential_constant_expression (tree t)\n   return potential_constant_expression_1 (t, false, tf_none);\n }\n \n+/* As above, but require a constant rvalue.  */\n+\n+bool\n+potential_rvalue_constant_expression (tree t)\n+{\n+  return potential_constant_expression_1 (t, true, tf_none);\n+}\n+\n /* Like above, but complain about non-constant expressions.  */\n \n bool\n require_potential_constant_expression (tree t)\n {\n   return potential_constant_expression_1 (t, false, tf_warning_or_error);\n }\n+\n+/* Cross product of the above.  */\n+\n+bool\n+require_potential_rvalue_constant_expression (tree t)\n+{\n+  return potential_constant_expression_1 (t, true, tf_warning_or_error);\n+}\n \f\n /* Constructor for a lambda expression.  */\n "}, {"sha": "5acd9f250571176636042000d60facab7c25d010", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be5e5b12d501cb3aae673e673c30363b32480df/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be5e5b12d501cb3aae673e673c30363b32480df/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4be5e5b12d501cb3aae673e673c30363b32480df", "patch": "@@ -1,3 +1,11 @@\n+2011-02-24  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/constexpr-array-tparm.C: New.\n+\t* g++.dg/cpp0x/regress/parse-ambig5.C: Copy from parse/ambig5.C.\n+\t* g++.dg/cpp0x/regress/debug-debug7.C: Copy from debug/debug7.C.\n+\t* g++.dg/cpp0x/variadic20.C: Adjust expected errors.\n+\t* g++.dg/cpp0x/regress/template-function1.C: Likewise.\n+\n 2011-02-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/47878"}, {"sha": "c17090cc3b49da4da65255d6ccdff39cd820b510", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-array-tparm.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be5e5b12d501cb3aae673e673c30363b32480df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array-tparm.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be5e5b12d501cb3aae673e673c30363b32480df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array-tparm.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array-tparm.C?ref=4be5e5b12d501cb3aae673e673c30363b32480df", "patch": "@@ -0,0 +1,5 @@\n+// { dg-options -std=c++0x }\n+\n+template <const int I[2]> struct A { int ir[I[0]]; };\n+extern constexpr int ar[2] = { 1, 2 };\n+A<ar> a;"}, {"sha": "8ee8824719d84ec71011030745145d720eee675a", "filename": "gcc/testsuite/g++.dg/cpp0x/regress/debug-debug7.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be5e5b12d501cb3aae673e673c30363b32480df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Fdebug-debug7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be5e5b12d501cb3aae673e673c30363b32480df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Fdebug-debug7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Fdebug-debug7.C?ref=4be5e5b12d501cb3aae673e673c30363b32480df", "patch": "@@ -0,0 +1,19 @@\n+// { dg-do compile }\n+// { dg-options -std=c++0x }\n+\n+void f (int);\n+\n+int\n+main() {\n+\n+  int a = 4;\n+  int b = 5;\n+  int (*x)[b] = new int[a][b]; // { dg-error \"\" }\n+\n+  x[2][1] = 7;\n+\n+  for (int i = 0; i < a; ++i)\n+    for (int j = 0; j < b; ++j)\n+      f (x[i][j]);\n+  delete [] x;\n+}"}, {"sha": "9be2f9258faa5d66a2cd197b761d3ddeb2860163", "filename": "gcc/testsuite/g++.dg/cpp0x/regress/parse-ambig5.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be5e5b12d501cb3aae673e673c30363b32480df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Fparse-ambig5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be5e5b12d501cb3aae673e673c30363b32480df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Fparse-ambig5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Fparse-ambig5.C?ref=4be5e5b12d501cb3aae673e673c30363b32480df", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/41786\n+// { dg-options -std=c++0x }\n+\n+struct A { A(int, char const*); };\n+int main() {\n+  int i = 0, *b = &i;\n+  A a(int(b[i]), \"hello\");\n+}"}, {"sha": "028669e511e23ad7963b48d9449b78018e3e4028", "filename": "gcc/testsuite/g++.dg/cpp0x/regress/template-function1.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be5e5b12d501cb3aae673e673c30363b32480df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Ftemplate-function1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be5e5b12d501cb3aae673e673c30363b32480df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Ftemplate-function1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Ftemplate-function1.C?ref=4be5e5b12d501cb3aae673e673c30363b32480df", "patch": "@@ -4,25 +4,25 @@\n \n template<const char *, int> struct A {};\n const char func[] = \"abc\";\n-template<int N> struct A<func, N> {};\t// { dg-error \"cannot appear|is invalid|not a valid\" }\n+template<int N> struct A<func, N> {};\t// { dg-error \"cannot appear|is invalid|not a valid|not declared constexpr\" }\n \n char a1[1];\n A<a1, 0> a;\n \n template<const char *, int> struct B {};\n-template<int N> struct B<__FUNCTION__, N> {};\t// { dg-error \"cannot appear|is invalid|is not a valid\" }\n+template<int N> struct B<__FUNCTION__, N> {};\t// { dg-error \"cannot appear|is invalid|is not a valid|not declared constexpr\" }\n \n char b1[1];\n B<b1, 0> b;\n \n template<const char *, int> struct C {};\n-template<int N> struct C<__PRETTY_FUNCTION__, N> {};\t// { dg-error \"cannot appear|is invalid|is not a valid\" }\n+template<int N> struct C<__PRETTY_FUNCTION__, N> {};\t// { dg-error \"cannot appear|is invalid|is not a valid|not declared constexpr\" }\n \n char c1[1];\n C<c1, 0> c;\n \n template<const char *, int> struct D {};\n-template<int N> struct D<__func__, N> {};\t// { dg-error \"cannot appear|is invalid|is not a valid|function scope\" }\n+template<int N> struct D<__func__, N> {};\t// { dg-error \"cannot appear|is invalid|is not a valid|function scope|not declared constexpr\" }\n \n char d1[1];\n D<d1, 0> d;"}, {"sha": "7f2446e5585ae0c3d9b98ca3829e7946d6d3fc37", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic20.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be5e5b12d501cb3aae673e673c30363b32480df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be5e5b12d501cb3aae673e673c30363b32480df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic20.C?ref=4be5e5b12d501cb3aae673e673c30363b32480df", "patch": "@@ -37,9 +37,9 @@ struct metatuple<First, Second, Metafunctions...> { // { dg-error \"struct\" }\n \n int a0[metatuple<>::value == 0? 1 : -1];\n int a1[metatuple<add_pointer>::value == 1? 1 : -1];\n-int a2a[metatuple<add_pointer, add_pointer>::value == 2? 1 : -1]; // { dg-error \"ambiguous\" }\n+int a2a[metatuple<add_pointer, add_pointer>::value == 2? 1 : -1]; // { dg-error \"ambiguous|array bound\" }\n int a2b[metatuple<add_reference, add_reference>::value == 2? 1 : -1];\n-int a3[metatuple<add_pointer, add_reference>::value == 3? 1 : -1]; // { dg-error \"ambiguous\" }\n+int a3[metatuple<add_pointer, add_reference>::value == 3? 1 : -1]; // { dg-error \"ambiguous|array bound\" }\n int a4[metatuple<add_reference>::value == 4? 1 : -1];\n int a5[metatuple<add_reference, add_pointer>::value == 5? 1 : -1];\n "}]}