{"sha": "c354bbcc0e16d403267a067c7477c879e95ebbcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM1NGJiY2MwZTE2ZDQwMzI2N2EwNjdjNzQ3N2M4NzllOTVlYmJjZA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2002-09-23T12:21:04Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2002-09-23T12:21:04Z"}, "message": "* gcc.dg/20020919-1.c: New test.\n\nFrom-SVN: r57438", "tree": {"sha": "5ef02692fa1678d5d963376a9b326ddb7de6967d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ef02692fa1678d5d963376a9b326ddb7de6967d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c354bbcc0e16d403267a067c7477c879e95ebbcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c354bbcc0e16d403267a067c7477c879e95ebbcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c354bbcc0e16d403267a067c7477c879e95ebbcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c354bbcc0e16d403267a067c7477c879e95ebbcd/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "acb5d088cba8b44226e996eec678684f4b3c1f14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acb5d088cba8b44226e996eec678684f4b3c1f14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acb5d088cba8b44226e996eec678684f4b3c1f14"}], "stats": {"total": 249, "additions": 249, "deletions": 0}, "files": [{"sha": "4f958459e4886bf4c643db1aafedb4b4d710c00e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c354bbcc0e16d403267a067c7477c879e95ebbcd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c354bbcc0e16d403267a067c7477c879e95ebbcd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c354bbcc0e16d403267a067c7477c879e95ebbcd", "patch": "@@ -1,3 +1,7 @@\n+2002-09-23  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* gcc.dg/20020919-1.c: New test.\n+\n 2002-09-23  Mark Mitchell  <mark@codesourcery.com>\n \n \t* g++.dg/abi/bitfield6.C: New test."}, {"sha": "daf885817104e918b562dac2dd287c8b198db21c", "filename": "gcc/testsuite/gcc.dg/20020919-1.c", "status": "added", "additions": 245, "deletions": 0, "changes": 245, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c354bbcc0e16d403267a067c7477c879e95ebbcd/gcc%2Ftestsuite%2Fgcc.dg%2F20020919-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c354bbcc0e16d403267a067c7477c879e95ebbcd/gcc%2Ftestsuite%2Fgcc.dg%2F20020919-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020919-1.c?ref=c354bbcc0e16d403267a067c7477c879e95ebbcd", "patch": "@@ -0,0 +1,245 @@\n+/* Copyright (C) 2002  Free Software Foundation.\n+   by Hans-Peter Nilsson  <hp@axis.com>\n+\n+   Making sure that asm clobbers conflicting with asm-declared input\n+   operands are detected: ``You may not write a clobber description in a\n+   way that overlaps with an input or output operand''.\n+\n+   You must be this tall ---> fit two long longs in asm-declared registers\n+   to enter this amusement.  */\n+\n+/* { dg-do compile { target alpha-*-* cris-*-* i?86-*-* mmix-*-* powerpc-*-* rs6000-*-* } } */\n+/* { dg-options \"-O2\" } */\n+\n+/* Constructed examples; input/output (same register), output, input, and\n+   input and output (different registers).  */\n+\n+/* The long longs are used to test overlap overlap for multi-register\n+   registers.  REG2 and REG4 must be the second halves (defined as\n+   higher-numbered parts) of REG1 and REG3 respectively when two registers\n+   are needed.  */\n+\n+#if defined (__alpha__)\n+# define REG1 \"$1\"\n+# define REG2 \"$2\"\n+#elif defined (__CRIS__)\n+# define REG1 \"r10\"\n+# define REG2 \"r11\"\n+# define REG3 \"r12\"\n+# define REG4 \"r13\"\n+# define REG5 \"r9\"\n+#elif defined (__i386__)\n+# define REG1 \"%eax\"\n+# define REG2 \"%edx\"\n+# define REG3 \"%ecx\"\n+# define REG4 \"%ebx\"\n+#elif defined (__MMIX__)\n+# define REG1 \"$8\"\n+# define REG2 \"$9\"\n+#elif defined (__powerpc__) || defined (__PPC__) || defined (__ppc__) \\\n+\t|| defined (__POWERPC__) || defined (PPC) || defined (_IBMR2)\n+# define REG1 \"6\"\n+# define REG2 \"7\"\n+# define REG3 \"8\"\n+# define REG4 \"9\"\n+#endif\n+\n+/* For readability of the tests.  */\n+#ifdef REG3\n+# define REG1a REG1\n+# define REG1b REG2\n+# define REG2a REG3\n+# define REG2b REG4\n+#else\n+# define REG1a REG1\n+# define REG1b REG1\n+# define REG2a REG2\n+# define REG2b REG2\n+#endif\n+\n+/* REG5 is just another reg if there is one; the difference to REG4 is to\n+   keep the original set of registers for CRIS.  */\n+#ifndef REG5\n+#define REG5 REG2b\n+#endif\n+\n+void *\n+foo (void *p)\n+{\n+  register void *q asm (REG1) = p;\n+  asm (\"foo1 %0\" : \"=r\" (q) : \"0\" (q) : REG1); /* { dg-error \"conflict\" } */\n+  return q;\n+}\n+\n+void *\n+nfoo (void *p)\n+{\n+  register void *q asm (REG1) = p;\n+  asm (\"foo1 %0\" : \"=r\" (q) : \"0\" (q) : REG2);\n+  return q;\n+}\n+\n+long long\n+foolla (long long llp)\n+{\n+  register long long ll asm (REG1a) = llp;\n+  asm (\"foo1a %0\" : \"=r\" (ll) : \"0\" (ll) : REG1a); /* { dg-error \"conflict\" } */\n+  return ll;\n+}\n+\n+long long\n+nfoolla (long long llp)\n+{\n+  register long long ll asm (REG1a) = llp;\n+  asm (\"foo1a %0\" : \"=r\" (ll) : \"0\" (ll) : REG2a);\n+  return ll;\n+}\n+\n+long long\n+foollb (long long llp)\n+{\n+  register long long ll asm (REG1a) = llp;\n+  asm (\"foo1b %0\" : \"=r\" (ll) : \"0\" (ll) : REG1b); /* { dg-error \"conflict\" } */\n+  return ll;\n+}\n+\n+void *\n+bar (void *p)\n+{\n+  register void *q asm (REG1);\n+  register void *w asm (REG2) = p;\n+  asm (\"bar1 %1,%0\" : \"=r\" (q) : \"r\" (w) : REG1); /* { dg-error \"conflict\" } */\n+  return q;\n+}\n+\n+long long\n+barlla (long long llp)\n+{\n+  register long long ll asm (REG1a);\n+  register long long mm asm (REG2a) = llp;\n+  asm (\"bar1a %1,%0\" : \"=r\" (ll) : \"r\" (mm) : REG1b); /* { dg-error \"conflict\" } */\n+  return ll;\n+}\n+\n+long long\n+barllb (long long llp)\n+{\n+  register long long ll asm (REG1a);\n+  register long long mm asm (REG2a) = llp;\n+  asm (\"bar1b %1,%0\" : \"=r\" (ll) : \"r\" (mm) : REG2b); /* { dg-error \"conflict\" } */\n+  return ll;\n+}\n+\n+void *\n+foobar (void *p)\n+{\n+  register void *q asm (REG1);\n+  register void *w asm (REG2) = p;\n+  asm (\"foobar1 %1,%0\" : \"=r\" (q) : \"r\" (w) : REG2); /* { dg-error \"conflict\" } */\n+  return q;\n+}\n+\n+void *\n+nfoobar (void *p)\n+{\n+  register void *q asm (REG1);\n+  register void *w = p;\n+  asm (\"foobar1 %1,%0\" : \"=r\" (q) : \"r\" (w) : REG2);\n+  return q;\n+}\n+\n+long long\n+foobarlla (long long llp)\n+{\n+  register long long ll asm (REG1a);\n+  register long long mm asm (REG2a) = llp;\n+  asm (\"foobar1a %1,%0\" : \"=r\" (ll) : \"r\" (mm) : REG1b); /* { dg-error \"conflict\" } */\n+  return ll;\n+}\n+\n+long long\n+nfoobarlla (long long llp)\n+{\n+  register long long ll asm (REG1a);\n+  register long long mm = llp;\n+  asm (\"foobar1a %1,%0\" : \"=r\" (ll) : \"r\" (mm) : REG2a);\n+  return ll;\n+}\n+\n+long long\n+foobarllb (long long llp)\n+{\n+  register long long ll asm (REG1a);\n+  register long long mm asm (REG2a) = llp;\n+  asm (\"foobar1b %1,%0\" : \"=r\" (ll) : \"r\" (mm) : REG2b); /* { dg-error \"conflict\" } */\n+  return ll;\n+}\n+\n+long long\n+nfoobarllb (long long llp)\n+{\n+  register long long ll asm (REG1a);\n+  register long long mm = llp;\n+  asm (\"foobar1b %1,%0\" : \"=r\" (ll) : \"r\" (mm) : REG2b);\n+  return ll;\n+}\n+\n+void *\n+baz (void *p)\n+{\n+  register void *q asm (REG1);\n+  register void *w asm (REG2) = p;\n+  asm (\"baz1 %1,%0\" : \"=r\" (q) : \"r\" (w) : REG1, REG2); /* { dg-error \"conflict\" } */\n+  return q;\n+}\n+\n+void *\n+nbaz (void *p)\n+{\n+  register void *q;\n+  register void *w = p;\n+  asm (\"baz1 %1,%0\" : \"=r\" (q) : \"r\" (w) : REG1, REG2);\n+  return q;\n+}\n+\n+void *\n+nbaz2 (void *p)\n+{\n+  register void *q asm (REG1);\n+  register void *w asm (REG2) = p;\n+  asm (\"baz1 %1,%0\" : \"=r\" (q) : \"r\" (w));\n+  return q;\n+}\n+\n+long long\n+bazlla (long long llp)\n+{\n+  register long long ll asm (REG1a);\n+  register long long mm asm (REG2a) = llp;\n+  asm (\"baz1a %1,%0\" : \"=r\" (ll) : \"r\" (mm) : REG1a, REG2a); /* { dg-error \"conflict\" } */\n+  return ll;\n+}\n+\n+long long\n+bazllb (long long llp)\n+{\n+  register long long ll asm (REG1a);\n+  register long long mm asm (REG2a) = llp;\n+  asm (\"baz2a %1,%0\" : \"=r\" (ll) : \"r\" (mm) : REG1b, REG2b); /* { dg-error \"conflict\" } */\n+  return ll;\n+}\n+\n+/* Real-world example of bug.  */\n+\n+struct stat;\n+int\n+_dl_stat (const char *file_name, struct stat *buf)\n+{\n+  register long a asm (REG1) = (long) file_name;\n+  register long b asm (REG2) = (long) buf;\n+\n+  asm volatile (\"movu.w %1,$r9\\n\\tbreak 13\" : \"=r\" (a) : \"g\" (106), \"0\" (a), \"r\" (b) : REG1, REG5); /* { dg-error \"conflict\" } */\n+  if (a >= 0)\n+    return (int) a;\n+  return (int) -1;\n+}"}]}