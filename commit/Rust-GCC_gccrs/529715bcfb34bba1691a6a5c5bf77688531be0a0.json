{"sha": "529715bcfb34bba1691a6a5c5bf77688531be0a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI5NzE1YmNmYjM0YmJhMTY5MWE2YTVjNWJmNzc2ODg1MzFiZTBhMA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1991-12-01T04:57:28Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1991-12-01T04:57:28Z"}, "message": "entered into RCS\n\nFrom-SVN: r87", "tree": {"sha": "3a8cab829fba8ed3c4cc6602e2ec196fd4245454", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a8cab829fba8ed3c4cc6602e2ec196fd4245454"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/529715bcfb34bba1691a6a5c5bf77688531be0a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/529715bcfb34bba1691a6a5c5bf77688531be0a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/529715bcfb34bba1691a6a5c5bf77688531be0a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/529715bcfb34bba1691a6a5c5bf77688531be0a0/comments", "author": null, "committer": null, "parents": [{"sha": "ea76e85da8e1b01e32aa158babc6e48d5848cae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea76e85da8e1b01e32aa158babc6e48d5848cae0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea76e85da8e1b01e32aa158babc6e48d5848cae0"}], "stats": {"total": 254, "additions": 252, "deletions": 2}, "files": [{"sha": "5f2b7d1ed71501e787e2c64ad76febe081ea2f28", "filename": "gcc/config/m68k/3b1g.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/529715bcfb34bba1691a6a5c5bf77688531be0a0/gcc%2Fconfig%2Fm68k%2F3b1g.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/529715bcfb34bba1691a6a5c5bf77688531be0a0/gcc%2Fconfig%2Fm68k%2F3b1g.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2F3b1g.h?ref=529715bcfb34bba1691a6a5c5bf77688531be0a0", "patch": "@@ -17,9 +17,9 @@ You should have received a copy of the GNU General Public License\n along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n-#include \"tm-m68k.h\"\n+#include \"m68k.h\"\n \n-/* See tm-m68k.h.  0 means 68000 with no 68881.  */\n+/* See m68k.h.  0 means 68000 with no 68881.  */\n #define TARGET_DEFAULT 0\n \n /* Define __HAVE_68881 in preprocessor only if -m68881 is specified."}, {"sha": "4e1de76fd8df1ce955fe5ade3f19f130363fd6bf", "filename": "gcc/config/m68k/altos3068.h", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/529715bcfb34bba1691a6a5c5bf77688531be0a0/gcc%2Fconfig%2Fm68k%2Faltos3068.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/529715bcfb34bba1691a6a5c5bf77688531be0a0/gcc%2Fconfig%2Fm68k%2Faltos3068.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Faltos3068.h?ref=529715bcfb34bba1691a6a5c5bf77688531be0a0", "patch": "@@ -0,0 +1,107 @@\n+/* Definitions of target machine for GNU compiler.  Altos 3068 68020 version.\n+   Copyright (C) 1988,1989 Free Software Foundation, Inc.\n+\n+Written by Jyrki Kuoppala <jkp@cs.hut.fi>\n+Last modified: Mon Mar  6 22:47:58 1989\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+\n+#include \"m68k.h\"\n+\n+/* See m68k.h.  7 means 68020 with 68881.  */\n+/* 5 is without 68881.  Change to 7 if you have 68881 */\n+\n+#ifndef TARGET_DEFAULT\n+#define TARGET_DEFAULT 5\n+#endif\n+\n+/* Define __HAVE_68881__ in preprocessor,\n+   according to the -m flags.\n+   This will control the use of inline 68881 insns in certain macros.\n+   Also inform the program which CPU this is for.  */\n+\n+#if TARGET_DEFAULT & 02\n+\n+/* -m68881 is the default */\n+#define CPP_SPEC \\\n+\"%{!msoft-float:-D__HAVE_68881__ }\\\n+%{!ansi:%{m68000:-Dmc68010}%{mc68000:-Dmc68010}%{!mc68000:%{!m68000:-Dmc68020}}}\"\n+\n+#else\n+\n+/* -msoft-float is the default */\n+#define CPP_SPEC \\\n+\"%{m68881:-D__HAVE_68881__ }\\\n+%{!ansi:%{m68000:-Dmc68010}%{mc68000:-Dmc68010}%{!mc68000:%{!m68000:-Dmc68020}}}\"\n+\n+#endif\n+\n+/* -m68000 requires special flags to the assembler.  */\n+\n+#define ASM_SPEC \\\n+ \"%{m68000:-mc68010}%{mc68000:-mc68010}%{!mc68000:%{!m68000:-mc68020}}\"\n+\n+/* Names to predefine in the preprocessor for this target machine.  */\n+\n+#define CPP_PREDEFINES \"-Dmc68000 -DPORTAR -Dmc68k32 -Uvax -Dm68k -Dunix\"\n+\n+/* Every structure or union's size must be a multiple of 2 bytes.  */\n+\n+#define STRUCTURE_SIZE_BOUNDARY 16\n+\n+/* Generate calls to memcpy, memcmp and memset.  */\n+#define TARGET_MEM_FUNCTIONS\n+\n+/* We use gnu assembler, linker and gdb, so we want DBX format.  */\n+\n+#define DBX_DEBUGGING_INFO\n+\n+/* Tell some conditionals we will use GAS.  Is this really used?  */\n+\n+#define USE_GAS\n+\n+/* This is how to output an assembler line defining a `double' constant.  */\n+\n+#undef ASM_OUTPUT_DOUBLE\n+#define ASM_OUTPUT_DOUBLE(FILE,VALUE)                    \\\n+     fprintf (FILE, \"\\t.double 0r%.20e\\n\", (VALUE))\n+\n+/* This is how to output an assembler line defining a `float' constant.  */\n+\n+#undef ASM_OUTPUT_FLOAT\n+#define ASM_OUTPUT_FLOAT(FILE,VALUE)                    \\\n+     fprintf (FILE, \"\\t.single 0r%.20e\\n\", (VALUE))\n+\n+#undef ASM_OUTPUT_FLOAT_OPERAND\n+#define ASM_OUTPUT_FLOAT_OPERAND(FILE,VALUE)                \\\n+     fprintf (FILE, \"#0r%.9g\", (VALUE))\n+\n+#undef ASM_OUTPUT_DOUBLE_OPERAND\n+#define ASM_OUTPUT_DOUBLE_OPERAND(FILE,VALUE)                \\\n+     fprintf (FILE, \"#0r%.20g\", (VALUE))\n+\n+/* Return pointer values in both d0 and a0.  */\n+\n+#undef FUNCTION_EXTRA_EPILOGUE\n+#define FUNCTION_EXTRA_EPILOGUE(FILE, SIZE)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  extern int current_function_returns_pointer;\t\t\t\\\n+  if ((current_function_returns_pointer) && \t\t\t\\\n+      ! find_equiv_reg (0, get_last_insn (), 0, 0, 0, 8, Pmode))\\\n+    fprintf (FILE, \"\\tmovel d0,a0\\n\");\t\t\t\t\\\n+}"}, {"sha": "edd3d040082b2d54fe0170faa5ee2a15b4958d07", "filename": "gcc/config/m68k/ctix.h", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/529715bcfb34bba1691a6a5c5bf77688531be0a0/gcc%2Fconfig%2Fm68k%2Fctix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/529715bcfb34bba1691a6a5c5bf77688531be0a0/gcc%2Fconfig%2Fm68k%2Fctix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fctix.h?ref=529715bcfb34bba1691a6a5c5bf77688531be0a0", "patch": "@@ -0,0 +1,47 @@\n+/* Definitions of target machine for GNU compiler.\n+   Convergent Technologies MiniFrame version,\n+   using GAS and binutils with COFF encapsulation.\n+\n+   Written by Ronald Cole\n+\n+   Because the MiniFrame's C compiler is so completely lobotomized,\n+   bootstrapping this is damn near impossible!\n+   Write to me for information on obtaining the binaries...\n+\n+   bug reports to csusac!unify!rjc@ucdavis.edu\n+\n+   Copyright (C) 1990 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#include \"3b1g.h\"\n+\n+/* Names to predefine in the preprocessor for this target machine.  */\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-Dmc68000 -Dmc68k -Dunix -Dctix\"\n+\n+/* Where to look for robotussinized startfiles.  */\n+#undef STANDARD_STARTFILE_PREFIX\n+#define STANDARD_STARTFILE_PREFIX \"/usr/local/lib/gnu/\"\n+\n+/* Generate calls to the MiniFrame's library (for speed).  */\n+#define DIVSI3_LIBCALL \"ldiv\"\n+#define UDIVSI3_LIBCALL \"uldiv\"\n+#define MODSI3_LIBCALL \"lrem\"\n+#define UMODSI3_LIBCALL \"ulrem\"\n+#define MULSI3_LIBCALL \"lmul\"\n+#define UMULSI3_LIBCALL \"ulmul\""}, {"sha": "5ada17ccb48ad96a64b5ef526ce1a05df2977923", "filename": "gcc/config/m68k/hp310.h", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/529715bcfb34bba1691a6a5c5bf77688531be0a0/gcc%2Fconfig%2Fm68k%2Fhp310.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/529715bcfb34bba1691a6a5c5bf77688531be0a0/gcc%2Fconfig%2Fm68k%2Fhp310.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fhp310.h?ref=529715bcfb34bba1691a6a5c5bf77688531be0a0", "patch": "@@ -0,0 +1,32 @@\n+/* Definitions of target machine for GNU compiler.  HP-UX 68010 version.  */\n+\n+/* See m68k.h.  0 means 68000 without 68881 and no bitfields.   */\n+#define\tTARGET_DEFAULT 0\n+\n+#include \"hp320.h\"\n+\n+#undef CPP_SPEC\n+#undef ASM_SPEC\n+\n+/* HP does not support a 68020 without a 68881 or a 68010 with a 68881.\n+   However, -m68020 does not imply -m68881.  You must specify both\n+   if you want both.  */\n+\n+#ifdef HPUX_ASM\n+\n+#define CPP_SPEC \"-D__HPUX_ASM__ %{m68881: -D__HAVE_68881__}\\\n+%{m68020: -Dmc68020}%{mc68020: -Dmc68020}\\\n+%{!traditional:-D_INCLUDE__STDC__}\"\n+\n+#define ASM_SPEC \"%{!m68020:%{!mc68020:+X}}\"\n+\n+#else\t/* not HPUX_ASM */\n+\n+#define CPP_SPEC \"%{m68881: -D__HAVE_68881__}\\\n+%{m68020: -Dmc68020}%{mc68020: -Dmc68020}\\\n+%{!traditional:-D_INCLUDE__STDC__}\"\n+\n+#define ASM_SPEC \\\n+ \"%{m68000:-mc68000}%{mc68000:-mc68000}%{!mc68000:%{!m68000:-mc68020}}\"\n+\n+#endif\t/* not HPUX_ASM */"}, {"sha": "3076ca8eea7ba4259a5cba0e02d0b2aa4c25fb05", "filename": "gcc/config/m68k/hp310g.h", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/529715bcfb34bba1691a6a5c5bf77688531be0a0/gcc%2Fconfig%2Fm68k%2Fhp310g.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/529715bcfb34bba1691a6a5c5bf77688531be0a0/gcc%2Fconfig%2Fm68k%2Fhp310g.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fhp310g.h?ref=529715bcfb34bba1691a6a5c5bf77688531be0a0", "patch": "@@ -0,0 +1,12 @@\n+/* Definitions of target machine for GNU compiler.  HP-UX 68010 version.\n+   Use this file if GCC is supposed to work with the GNU assembler,\n+   GNU linker and GNU debugger using DBX debugging information.\n+   (In other words, much of HPUX has been cast aside.)  */\n+\n+/* This wants DBX format.  */\n+\n+#define DBX_DEBUGGING_INFO\n+\n+#define USE_GAS\n+\n+#include \"hp310.h\""}, {"sha": "fc22a5e7a4d5e818f37441e3e33843aac1011e2b", "filename": "gcc/config/m68k/hp320g.h", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/529715bcfb34bba1691a6a5c5bf77688531be0a0/gcc%2Fconfig%2Fm68k%2Fhp320g.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/529715bcfb34bba1691a6a5c5bf77688531be0a0/gcc%2Fconfig%2Fm68k%2Fhp320g.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fhp320g.h?ref=529715bcfb34bba1691a6a5c5bf77688531be0a0", "patch": "@@ -0,0 +1,12 @@\n+/* Definitions of target machine for GNU compiler.  HP-UX 68000/68020 version.\n+   Use this file if GCC is supposed to work with the GNU assembler,\n+   GNU linker and GNU debugger using DBX debugging information.\n+   (In other words, much of HPUX has been cast aside.)  */\n+\n+/* This wants DBX format.  */\n+\n+#define DBX_DEBUGGING_INFO\n+\n+#define USE_GAS\n+\n+#include \"hp320.h\""}, {"sha": "f24677b69c6b0d5ee9c656c634b4a2557493ccc6", "filename": "gcc/config/m68k/hp3bsd.h", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/529715bcfb34bba1691a6a5c5bf77688531be0a0/gcc%2Fconfig%2Fm68k%2Fhp3bsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/529715bcfb34bba1691a6a5c5bf77688531be0a0/gcc%2Fconfig%2Fm68k%2Fhp3bsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fhp3bsd.h?ref=529715bcfb34bba1691a6a5c5bf77688531be0a0", "patch": "@@ -0,0 +1,40 @@\n+#include \"m68k.h\"\n+\n+/* See m68k.h.  7 means 68020 with 68881.  */\n+\n+#define TARGET_DEFAULT 7\n+\n+/* Define __HAVE_68881__ in preprocessor, unless -msoft-float is specified.\n+   This will control the use of inline 68881 insns in certain macros.  */\n+\n+#define CPP_SPEC \"%{!msoft-float:-D__HAVE_68881__ -D__HAVE_FPU__}\"\n+\n+/* Names to predefine in the preprocessor for this target machine.  */\n+\n+#define CPP_PREDEFINES \"-Dmc68000 -Dmc68020 -Dhp300 -Dhp9000 -Dunix\"\n+\n+/* Link with libg.a when debugging, for dbx's sake.  */\n+\n+#define LIB_SPEC \"%{g:-lg} %{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p} \"\n+\n+/* Every structure or union's size must be a multiple of 2 bytes.  */\n+\n+#define STRUCTURE_SIZE_BOUNDARY 16\n+\n+/* This is BSD, so it wants DBX format.  */\n+\n+#define DBX_DEBUGGING_INFO\n+\n+/* Do not break .stabs pseudos into continuations.  */\n+\n+#define DBX_CONTIN_LENGTH 0\n+\n+/* This is the char to use for continuation (in case we need to turn\n+   continuation back on).  */\n+\n+#define DBX_CONTIN_CHAR '?'\n+\n+/* Don't use the `xsfoo;' construct in DBX output; this system\n+   doesn't support it.  */\n+\n+#define DBX_NO_XREFS"}]}