{"sha": "7bd1e1296cc36b558a27bbe09352c5c2aca4c5d5", "node_id": "C_kwDOANBUbNoAKDdiZDFlMTI5NmNjMzZiNTU4YTI3YmJlMDkzNTJjNWMyYWNhNGM1ZDU", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-01-25T20:12:51Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-01-26T17:18:32Z"}, "message": "warn-access: Prevent -Wuse-after-free on ARM [PR104213]\n\nHere, -Wuse-after-free warns about using 'this' which, on ARM, cdtors\nreturn, as mandated by the EABI.  To be entirely correct, it only\nrequires it for C1 and C2 ctors and D2 and D1 dtors, but I don't feel\nlike changing that now and possibly running into issues later on.\n\nThis patch uses suppress_warning on 'this' for certain cdtor_returns_this\ncases in the C++ FE, and then warn_invalid_pointer makes use of this\ninformation and doesn't warn.\n\nIn my first attempt I tried suppress_warning the MODIFY_EXPR or RETURN_EXPR\nwe build in build_delete_destructor_body, but the complication is that\nthe suppress_warning bits don't always survive gimplification; see e.g.\ngimplify_modify_expr where we do\n\n 6130       if (COMPARISON_CLASS_P (*from_p))\n 6131         copy_warning (assign, *from_p);\n\nbut here we're not dealing with a comparison.  Removing that check\nregresses uninit-pr74762.C.  Adding copy_warning (assign, *expr_p)\nregresses c-c++-common/uninit-17.c.\n\n\tPR target/104213\n\ngcc/cp/ChangeLog:\n\n\t* decl.cc (finish_constructor_body): Suppress -Wuse-after-free.\n\t(finish_destructor_body): Likewise.\n\t* optimize.cc (build_delete_destructor_body): Likewise.\n\ngcc/ChangeLog:\n\n\t* gimple-ssa-warn-access.cc (pass_waccess::warn_invalid_pointer): Don't\n\twarn when the SSA_NAME_VAR of REF has supressed -Wuse-after-free.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/warn/Wuse-after-free2.C: New test.\n\t* g++.dg/warn/Wuse-after-free3.C: New test.", "tree": {"sha": "6ecf06e955d8578e7caac690ea6fd02b7f6a4b39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ecf06e955d8578e7caac690ea6fd02b7f6a4b39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bd1e1296cc36b558a27bbe09352c5c2aca4c5d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bd1e1296cc36b558a27bbe09352c5c2aca4c5d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bd1e1296cc36b558a27bbe09352c5c2aca4c5d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bd1e1296cc36b558a27bbe09352c5c2aca4c5d5/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00d8321124123daf41f7c51526355a5a610cdeb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d8321124123daf41f7c51526355a5a610cdeb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00d8321124123daf41f7c51526355a5a610cdeb8"}], "stats": {"total": 43, "additions": 40, "deletions": 3}, "files": [{"sha": "6534a7fd320eb6b531a092a0ef9714feb4cafade", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bd1e1296cc36b558a27bbe09352c5c2aca4c5d5/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bd1e1296cc36b558a27bbe09352c5c2aca4c5d5/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=7bd1e1296cc36b558a27bbe09352c5c2aca4c5d5", "patch": "@@ -17315,6 +17315,7 @@ finish_constructor_body (void)\n       add_stmt (build_stmt (input_location, LABEL_EXPR, cdtor_label));\n \n       val = DECL_ARGUMENTS (current_function_decl);\n+      suppress_warning (val, OPT_Wuse_after_free);\n       val = build2 (MODIFY_EXPR, TREE_TYPE (val),\n \t\t    DECL_RESULT (current_function_decl), val);\n       /* Return the address of the object.  */\n@@ -17408,6 +17409,7 @@ finish_destructor_body (void)\n       tree val;\n \n       val = DECL_ARGUMENTS (current_function_decl);\n+      suppress_warning (val, OPT_Wuse_after_free);\n       val = build2 (MODIFY_EXPR, TREE_TYPE (val),\n \t\t    DECL_RESULT (current_function_decl), val);\n       /* Return the address of the object.  */"}, {"sha": "13ab8b7361ed8a64f796e0dcbbaad45600709671", "filename": "gcc/cp/optimize.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bd1e1296cc36b558a27bbe09352c5c2aca4c5d5/gcc%2Fcp%2Foptimize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bd1e1296cc36b558a27bbe09352c5c2aca4c5d5/gcc%2Fcp%2Foptimize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.cc?ref=7bd1e1296cc36b558a27bbe09352c5c2aca4c5d5", "patch": "@@ -166,6 +166,7 @@ build_delete_destructor_body (tree delete_dtor, tree complete_dtor)\n   if (targetm.cxx.cdtor_returns_this ())\n     {\n       tree val = DECL_ARGUMENTS (delete_dtor);\n+      suppress_warning (val, OPT_Wuse_after_free);\n       val = build2 (MODIFY_EXPR, TREE_TYPE (val),\n                     DECL_RESULT (delete_dtor), val);\n       add_stmt (build_stmt (0, RETURN_EXPR, val));"}, {"sha": "3dcaf4230b85bfeee304cfbc734c09696eda1d7a", "filename": "gcc/gimple-ssa-warn-access.cc", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bd1e1296cc36b558a27bbe09352c5c2aca4c5d5/gcc%2Fgimple-ssa-warn-access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bd1e1296cc36b558a27bbe09352c5c2aca4c5d5/gcc%2Fgimple-ssa-warn-access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-access.cc?ref=7bd1e1296cc36b558a27bbe09352c5c2aca4c5d5", "patch": "@@ -3880,9 +3880,17 @@ pass_waccess::warn_invalid_pointer (tree ref, gimple *use_stmt,\n \t\t\t\t    bool maybe, bool equality /* = false */)\n {\n   /* Avoid printing the unhelpful \"<unknown>\" in the diagnostics.  */\n-  if (ref && TREE_CODE (ref) == SSA_NAME\n-      && (!SSA_NAME_VAR (ref) || DECL_ARTIFICIAL (SSA_NAME_VAR (ref))))\n-    ref = NULL_TREE;\n+  if (ref && TREE_CODE (ref) == SSA_NAME)\n+    {\n+      tree var = SSA_NAME_VAR (ref);\n+      if (!var)\n+\tref = NULL_TREE;\n+      /* Don't warn for cases like when a cdtor returns 'this' on ARM.  */\n+      else if (warning_suppressed_p (var, OPT_Wuse_after_free))\n+\treturn;\n+      else if (DECL_ARTIFICIAL (var))\n+\tref = NULL_TREE;\n+    }\n \n   location_t use_loc = gimple_location (use_stmt);\n   if (use_loc == UNKNOWN_LOCATION)"}, {"sha": "6d5f2bf01b5ea60633a9a497246053fd5620c3a6", "filename": "gcc/testsuite/g++.dg/warn/Wuse-after-free2.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bd1e1296cc36b558a27bbe09352c5c2aca4c5d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuse-after-free2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bd1e1296cc36b558a27bbe09352c5c2aca4c5d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuse-after-free2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuse-after-free2.C?ref=7bd1e1296cc36b558a27bbe09352c5c2aca4c5d5", "patch": "@@ -0,0 +1,10 @@\n+// PR target/104213\n+// { dg-do compile }\n+// { dg-options \"-Wuse-after-free\" }\n+\n+class C\n+{\n+    virtual ~C();\n+};\n+\n+C::~C() {} // { dg-bogus \"used after\" }"}, {"sha": "1862ac8b09d9b8037a902689d4a62acd369a445a", "filename": "gcc/testsuite/g++.dg/warn/Wuse-after-free3.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bd1e1296cc36b558a27bbe09352c5c2aca4c5d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuse-after-free3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bd1e1296cc36b558a27bbe09352c5c2aca4c5d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuse-after-free3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuse-after-free3.C?ref=7bd1e1296cc36b558a27bbe09352c5c2aca4c5d5", "patch": "@@ -0,0 +1,16 @@\n+// PR target/104213\n+// { dg-do compile }\n+// { dg-options \"-Wuse-after-free\" }\n+// FIXME: We should not output the warning twice.\n+\n+struct A\n+{\n+  virtual ~A ();\n+  void f ();\n+};\n+\n+A::~A ()\n+{\n+  operator delete (this);\n+  f (); // { dg-warning \"used after\" }\n+} // { dg-warning \"used after\" }"}]}