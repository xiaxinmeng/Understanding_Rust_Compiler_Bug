{"sha": "6fc98adf766d2ce6179d8d7a165d101c8fc00391", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZjOThhZGY3NjZkMmNlNjE3OWQ4ZDdhMTY1ZDEwMWM4ZmMwMDM5MQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-01-31T01:17:11Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-01-31T01:17:11Z"}, "message": "re PR c++/19457 (Warning depends on cached constant)\n\n\tPR c++/19457\n\t* call.c (convert_like_real): Inline call to\n\tdubious_conversion_warnings here.\n\t* cp-tree.h (dubious_conversion_warnings): Remove.\n\t* semantics.c (finish_unary_op_expr): Copy INTEGER_CSTs before\n\tsetting TREE_NEGATED_INT.\n\t* typeck.c (dubious_conversion_warnings): Remove.\n\n\tPR c++/19349\n\t* name-lookup.c (pushdecl_namespace_level): Avoid accessing free'd\n\tmemory.\n\n\tPR c++/19457\n\t* g++.dg/warn/conv3.C: New test.\n\nFrom-SVN: r94463", "tree": {"sha": "5e527e579dc243e4d53a56e537c89e568908ccf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e527e579dc243e4d53a56e537c89e568908ccf0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fc98adf766d2ce6179d8d7a165d101c8fc00391", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fc98adf766d2ce6179d8d7a165d101c8fc00391", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fc98adf766d2ce6179d8d7a165d101c8fc00391", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fc98adf766d2ce6179d8d7a165d101c8fc00391/comments", "author": null, "committer": null, "parents": [{"sha": "ef3f52283738edb9bf764801c706a00ceb0d45ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef3f52283738edb9bf764801c706a00ceb0d45ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef3f52283738edb9bf764801c706a00ceb0d45ce"}], "stats": {"total": 132, "additions": 73, "deletions": 59}, "files": [{"sha": "19027354e1934f3b2a15105dc6559f4f61007de2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fc98adf766d2ce6179d8d7a165d101c8fc00391/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fc98adf766d2ce6179d8d7a165d101c8fc00391/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6fc98adf766d2ce6179d8d7a165d101c8fc00391", "patch": "@@ -1,3 +1,17 @@\n+2005-01-30  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/19457\n+\t* call.c (convert_like_real): Inline call to\n+\tdubious_conversion_warnings here.\n+\t* cp-tree.h (dubious_conversion_warnings): Remove.\n+\t* semantics.c (finish_unary_op_expr): Copy INTEGER_CSTs before\n+\tsetting TREE_NEGATED_INT.\n+\t* typeck.c (dubious_conversion_warnings): Remove.\n+\n+\tPR c++/19349\n+\t* name-lookup.c (pushdecl_namespace_level): Avoid accessing free'd\n+\tmemory. \n+\n 2005-01-28  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/19253"}, {"sha": "599aecfa84aaf917d795abca9efe8fd7a0f8e354", "filename": "gcc/cp/call.c", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fc98adf766d2ce6179d8d7a165d101c8fc00391/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fc98adf766d2ce6179d8d7a165d101c8fc00391/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=6fc98adf766d2ce6179d8d7a165d101c8fc00391", "patch": "@@ -4166,8 +4166,46 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n     }\n   \n   if (issue_conversion_warnings)\n-    expr = dubious_conversion_warnings\n-             (totype, expr, \"converting\", fn, argnum);\n+    {\n+      tree t = non_reference (totype);\n+\n+      /* Issue warnings about peculiar, but valid, uses of NULL.  */\n+      if (ARITHMETIC_TYPE_P (t) && expr == null_node)\n+\t{\n+\t  if (fn)\n+\t    warning (\"passing NULL to non-pointer argument %P of %qD\",\n+\t\t     argnum, fn);\n+\t  else\n+\t    warning (\"converting to non-pointer type %qT from NULL\", t);\n+\t}\n+\n+      /* Warn about assigning a floating-point type to an integer type.  */\n+      if (TREE_CODE (TREE_TYPE (expr)) == REAL_TYPE\n+\t  && TREE_CODE (t) == INTEGER_TYPE)\n+\t{\n+\t  if (fn)\n+\t    warning (\"passing %qT for argument %P to %qD\",\n+\t\t     TREE_TYPE (expr), argnum, fn);\n+\t  else\n+\t    warning (\"converting to %qT from %qT\", t, TREE_TYPE (expr));\n+\t}\n+      /* And warn about assigning a negative value to an unsigned\n+\t variable.  */\n+      else if (TYPE_UNSIGNED (t) && TREE_CODE (t) != BOOLEAN_TYPE)\n+\t{\n+\t  if (TREE_CODE (expr) == INTEGER_CST && TREE_NEGATED_INT (expr)) \n+\t    {\n+\t      if (fn)\n+\t\twarning (\"passing negative value %qE for argument %P to %qD\",\n+\t\t\t expr, argnum, fn);\n+\t      else\n+\t\twarning (\"converting negative value %qE to %qT\", expr, t);\n+\t    }\n+\t  \n+\t  overflow_warning (expr);\n+\t}\n+    }\n+\n   switch (convs->kind)\n     {\n     case ck_user:"}, {"sha": "ced845b842829f035755e79931191eef31a1b20f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fc98adf766d2ce6179d8d7a165d101c8fc00391/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fc98adf766d2ce6179d8d7a165d101c8fc00391/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6fc98adf766d2ce6179d8d7a165d101c8fc00391", "patch": "@@ -4298,7 +4298,6 @@ extern tree build_const_cast\t\t\t(tree, tree);\n extern tree build_c_cast\t\t\t(tree, tree);\n extern tree build_x_modify_expr\t\t\t(tree, enum tree_code, tree);\n extern tree build_modify_expr\t\t\t(tree, enum tree_code, tree);\n-extern tree dubious_conversion_warnings         (tree, tree, const char *, tree, int);\n extern tree convert_for_initialization\t\t(tree, tree, tree, int, const char *, tree, int);\n extern int comp_ptr_ttypes\t\t\t(tree, tree);\n extern int ptr_reasonably_similar\t\t(tree, tree);"}, {"sha": "bb40e53efa107c8a24d4ce7ed98dd3b3f360f086", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fc98adf766d2ce6179d8d7a165d101c8fc00391/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fc98adf766d2ce6179d8d7a165d101c8fc00391/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=6fc98adf766d2ce6179d8d7a165d101c8fc00391", "patch": "@@ -3024,9 +3024,9 @@ pushdecl_namespace_level (tree x)\n \n   /* Now, the type_shadowed stack may screw us.  Munge it so it does\n      what we want.  */\n-  if (TREE_CODE (x) == TYPE_DECL)\n+  if (TREE_CODE (t) == TYPE_DECL)\n     {\n-      tree name = DECL_NAME (x);\n+      tree name = DECL_NAME (t);\n       tree newval;\n       tree *ptr = (tree *)0;\n       for (; !global_scope_p (b); b = b->level_chain)\n@@ -3041,12 +3041,12 @@ pushdecl_namespace_level (tree x)\n \t\t   PT names.  It's gross, but I haven't time to fix it.  */\n               }\n         }\n-      newval = TREE_TYPE (x);\n+      newval = TREE_TYPE (t);\n       if (ptr == (tree *)0)\n         {\n           /* @@ This shouldn't be needed.  My test case \"zstring.cc\" trips\n              up here if this is changed to an assertion.  --KR  */\n-\t  SET_IDENTIFIER_TYPE_VALUE (name, x);\n+\t  SET_IDENTIFIER_TYPE_VALUE (name, t);\n \t}\n       else\n         {"}, {"sha": "c0e68d1d0e8d3c585fc3892e71b71f5a2b70f4ed", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fc98adf766d2ce6179d8d7a165d101c8fc00391/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fc98adf766d2ce6179d8d7a165d101c8fc00391/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=6fc98adf766d2ce6179d8d7a165d101c8fc00391", "patch": "@@ -1959,7 +1959,12 @@ finish_unary_op_expr (enum tree_code code, tree expr)\n       && TREE_CODE (result) == INTEGER_CST\n       && !TYPE_UNSIGNED (TREE_TYPE (result))\n       && INT_CST_LT (result, integer_zero_node))\n-    TREE_NEGATED_INT (result) = 1;\n+    {\n+      /* RESULT may be a cached INTEGER_CST, so we must copy it before\n+\t setting TREE_NEGATED_INT.  */\n+      result = copy_node (result);\n+      TREE_NEGATED_INT (result) = 1;\n+    }\n   overflow_warning (result);\n   return result;\n }"}, {"sha": "53a48d113d8927f00eee31bc47dfac9bb073cccf", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fc98adf766d2ce6179d8d7a165d101c8fc00391/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fc98adf766d2ce6179d8d7a165d101c8fc00391/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=6fc98adf766d2ce6179d8d7a165d101c8fc00391", "patch": "@@ -5813,57 +5813,6 @@ pfn_from_ptrmemfunc (tree t)\n   return build_ptrmemfunc_access_expr (t, pfn_identifier);\n }\n \n-/* Expression EXPR is about to be implicitly converted to TYPE.  Warn\n-   if this is a potentially dangerous thing to do.  Returns a possibly\n-   marked EXPR.  */\n-\n-tree\n-dubious_conversion_warnings (tree type, tree expr,\n-\t\t\t     const char *errtype, tree fndecl, int parmnum)\n-{\n-  type = non_reference (type);\n-  \n-  /* Issue warnings about peculiar, but valid, uses of NULL.  */\n-  if (ARITHMETIC_TYPE_P (type) && expr == null_node)\n-    {\n-      if (fndecl)\n-        warning (\"passing NULL used for non-pointer %s %P of %qD\",\n-                 errtype, parmnum, fndecl);\n-      else\n-        warning (\"%s to non-pointer type %qT from NULL\", errtype, type);\n-    }\n-  \n-  /* Warn about assigning a floating-point type to an integer type.  */\n-  if (TREE_CODE (TREE_TYPE (expr)) == REAL_TYPE\n-      && TREE_CODE (type) == INTEGER_TYPE)\n-    {\n-      if (fndecl)\n-\twarning (\"passing %qT for %s %P of %qD\",\n-                 TREE_TYPE (expr), errtype, parmnum, fndecl);\n-      else\n-\twarning (\"%s to %qT from %qT\", errtype, type, TREE_TYPE (expr));\n-    }\n-  /* And warn about assigning a negative value to an unsigned\n-     variable.  */\n-  else if (TYPE_UNSIGNED (type) && TREE_CODE (type) != BOOLEAN_TYPE)\n-    {\n-      if (TREE_CODE (expr) == INTEGER_CST && TREE_NEGATED_INT (expr))\n-\t{\n-\t  if (fndecl)\n-\t    warning (\"passing negative value %qE for %s %P of %qD\",\n-                     expr, errtype, parmnum, fndecl);\n-\t  else\n-\t    warning (\"%s of negative value %qE to %qT\", errtype, expr, type);\n-\t}\n-\n-      overflow_warning (expr);\n-\n-      if (TREE_CONSTANT (expr))\n-\texpr = fold_if_not_in_template (expr);\n-    }\n-  return expr;\n-}\n-\n /* Convert value RHS to type TYPE as preparation for an assignment to\n    an lvalue of type TYPE.  ERRTYPE is a string to use in error\n    messages: \"assignment\", \"return\", etc.  If FNDECL is non-NULL, we"}, {"sha": "c90f67197edfc0415e04023360b831f477fd35ac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fc98adf766d2ce6179d8d7a165d101c8fc00391/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fc98adf766d2ce6179d8d7a165d101c8fc00391/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6fc98adf766d2ce6179d8d7a165d101c8fc00391", "patch": "@@ -1,3 +1,8 @@\n+2005-01-30  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/19457\n+\t* g++.dg/warn/conv3.C: New test.\n+\n 2005-01-30  Bud Davis  <bdavis@gfortran.org>\n \n \tPR fortran/19647"}, {"sha": "5900c3aac383d7d78ddf233290dce91add0e5078", "filename": "gcc/testsuite/g++.dg/warn/conv3.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fc98adf766d2ce6179d8d7a165d101c8fc00391/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fconv3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fc98adf766d2ce6179d8d7a165d101c8fc00391/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fconv3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fconv3.C?ref=6fc98adf766d2ce6179d8d7a165d101c8fc00391", "patch": "@@ -0,0 +1,4 @@\n+// PR c++/19457\n+\n+int i=-1;\n+unsigned int j= ~0; // { dg-bogus \"\" }"}]}