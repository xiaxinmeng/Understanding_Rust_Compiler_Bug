{"sha": "63cb3926080e7f7e1b93dd94911ad4720813a081", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNjYjM5MjYwODBlN2Y3ZTFiOTNkZDk0OTExYWQ0NzIwODEzYTA4MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-09-21T19:59:29Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-09-21T19:59:29Z"}, "message": "Add from_macro_definition_at predicate for locations.\n\ngcc/\n\t* input.h (from_macro_definition_at): New.\nlibcpp/\n\t* line-map.c (linemap_location_from_macro_definition_p): New.\n\t* line-map.h: Declare it.\n\nFrom-SVN: r240330", "tree": {"sha": "452d1f9ed62885789446c7406e5160af2992acdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/452d1f9ed62885789446c7406e5160af2992acdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63cb3926080e7f7e1b93dd94911ad4720813a081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63cb3926080e7f7e1b93dd94911ad4720813a081", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63cb3926080e7f7e1b93dd94911ad4720813a081", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63cb3926080e7f7e1b93dd94911ad4720813a081/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c67c64efbe7082e3453f24016795af52179317b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c67c64efbe7082e3453f24016795af52179317b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c67c64efbe7082e3453f24016795af52179317b2"}], "stats": {"total": 60, "additions": 54, "deletions": 6}, "files": [{"sha": "bb998d165e7310511c23e24a63a8198d14914888", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63cb3926080e7f7e1b93dd94911ad4720813a081/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63cb3926080e7f7e1b93dd94911ad4720813a081/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63cb3926080e7f7e1b93dd94911ad4720813a081", "patch": "@@ -1,3 +1,7 @@\n+2016-09-21  Jason Merrill  <jason@redhat.com>\n+\n+\t* input.h (from_macro_definition_at): New.\n+\n 2016-09-21  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* doc/rtl.texi (JUMP_LABEL): Document RETURN and SIMPLE_RETURN values."}, {"sha": "fe80605967e11c2460c189057ae634c8edd42e5a", "filename": "gcc/input.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63cb3926080e7f7e1b93dd94911ad4720813a081/gcc%2Finput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63cb3926080e7f7e1b93dd94911ad4720813a081/gcc%2Finput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.h?ref=63cb3926080e7f7e1b93dd94911ad4720813a081", "patch": "@@ -77,6 +77,11 @@ extern location_t input_location;\n    comes from a macro expansion, O otherwise.  */\n #define from_macro_expansion_at(LOC) \\\n   ((linemap_location_from_macro_expansion_p (line_table, LOC)))\n+/* Return a positive value if LOCATION is the locus of a token that comes from\n+   a macro definition, O otherwise.  This differs from from_macro_expansion_at\n+   in its treatment of macro arguments, for which this returns false.  */\n+#define from_macro_definition_at(LOC) \\\n+  ((linemap_location_from_macro_definition_p (line_table, LOC)))\n \n static inline location_t\n get_pure_location (location_t loc)"}, {"sha": "e039069a7149902bb142e2b39c572812351b91ea", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63cb3926080e7f7e1b93dd94911ad4720813a081/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63cb3926080e7f7e1b93dd94911ad4720813a081/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=63cb3926080e7f7e1b93dd94911ad4720813a081", "patch": "@@ -1,3 +1,8 @@\n+2016-09-21  Jason Merrill  <jason@redhat.com>\n+\n+\t* line-map.c (linemap_location_from_macro_definition_p): New.\n+\t* line-map.h: Declare it.\n+\n 2016-09-15  David Malcolm  <dmalcolm@redhat.com>\n \n \t* include/line-map.h (class rich_location): Note that newlines"}, {"sha": "8be98b5f59799023a611543315e858d4870be8f1", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63cb3926080e7f7e1b93dd94911ad4720813a081/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63cb3926080e7f7e1b93dd94911ad4720813a081/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=63cb3926080e7f7e1b93dd94911ad4720813a081", "patch": "@@ -1086,12 +1086,16 @@ const char* linemap_map_get_macro_name (const line_map_macro *);\n int linemap_location_in_system_header_p (struct line_maps *,\n \t\t\t\t\t source_location);\n \n-/* Return TRUE if LOCATION is a source code location of a token coming\n-   from a macro replacement-list at a macro expansion point, FALSE\n-   otherwise.  */\n+/* Return TRUE if LOCATION is a source code location of a token that is part of\n+   a macro expansion, FALSE otherwise.  */\n bool linemap_location_from_macro_expansion_p (const struct line_maps *,\n \t\t\t\t\t      source_location);\n \n+/* TRUE if LOCATION is a source code location of a token that is part of the\n+   definition of a macro, FALSE otherwise.  */\n+bool linemap_location_from_macro_definition_p (struct line_maps *,\n+\t\t\t\t\t       source_location);\n+\n /* With the precondition that LOCATION is the locus of a token that is\n    an argument of a function-like macro MACRO_MAP and appears in the\n    expansion of MACRO_MAP, return the locus of that argument in the"}, {"sha": "c5c42f0966b81710ce77c4e2b72a2c4b64270186", "filename": "libcpp/line-map.c", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63cb3926080e7f7e1b93dd94911ad4720813a081/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63cb3926080e7f7e1b93dd94911ad4720813a081/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=63cb3926080e7f7e1b93dd94911ad4720813a081", "patch": "@@ -1223,9 +1223,8 @@ linemap_location_in_system_header_p (struct line_maps *set,\n   return false;\n }\n \n-/* Return TRUE if LOCATION is a source code location of a token coming\n-   from a macro replacement-list at a macro expansion point, FALSE\n-   otherwise.  */\n+/* Return TRUE if LOCATION is a source code location of a token that is part of\n+   a macro expansion, FALSE otherwise.  */\n \n bool\n linemap_location_from_macro_expansion_p (const struct line_maps *set,\n@@ -1570,6 +1569,37 @@ linemap_resolve_location (struct line_maps *set,\n   return loc;\n }\n \n+/* TRUE if LOCATION is a source code location of a token that is part of the\n+   definition of a macro, FALSE otherwise.  */\n+\n+bool\n+linemap_location_from_macro_definition_p (struct line_maps *set,\n+\t\t\t\t\t  source_location loc)\n+{\n+  if (IS_ADHOC_LOC (loc))\n+    loc = get_location_from_adhoc_loc (set, loc);\n+\n+  if (!linemap_location_from_macro_expansion_p (set, loc))\n+    return false;\n+\n+  while (true)\n+    {\n+      const struct line_map_macro *map\n+\t= linemap_check_macro (linemap_lookup (set, loc));\n+\n+      source_location s_loc\n+\t= linemap_macro_map_loc_unwind_toward_spelling (set, map, loc);\n+      if (linemap_location_from_macro_expansion_p (set, s_loc))\n+\tloc = s_loc;\n+      else\n+\t{\n+\t  source_location def_loc\n+\t    = linemap_macro_map_loc_to_def_point (map, loc);\n+\t  return s_loc == def_loc;\n+\t}\n+    }\n+}\n+\n /* \n    Suppose that LOC is the virtual location of a token T coming from\n    the expansion of a macro M.  This function then steps up to get the"}]}