{"sha": "9e269f7292efa5a81ecf66544d0bb6192e84ca65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUyNjlmNzI5MmVmYTVhODFlY2Y2NjU0NGQwYmI2MTkyZTg0Y2E2NQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-14T00:09:31Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-14T00:09:31Z"}, "message": "(ASM_OUTPUT_ASCII): Wrap in `do { ... } while (0)'.\n\nFrom-SVN: r6225", "tree": {"sha": "bf082a31775f8de607a18fc38ce35c64bb939b8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf082a31775f8de607a18fc38ce35c64bb939b8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e269f7292efa5a81ecf66544d0bb6192e84ca65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e269f7292efa5a81ecf66544d0bb6192e84ca65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e269f7292efa5a81ecf66544d0bb6192e84ca65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e269f7292efa5a81ecf66544d0bb6192e84ca65/comments", "author": null, "committer": null, "parents": [{"sha": "389bb5081b674d257ff802608c454801f89a75dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/389bb5081b674d257ff802608c454801f89a75dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/389bb5081b674d257ff802608c454801f89a75dc"}], "stats": {"total": 136, "additions": 60, "deletions": 76}, "files": [{"sha": "5e4cd865687278e7e228d042e671715219df9054", "filename": "gcc/config/clipper/clix.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Fclipper%2Fclix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Fclipper%2Fclix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclix.h?ref=9e269f7292efa5a81ecf66544d0bb6192e84ca65", "patch": "@@ -1,5 +1,5 @@\n-/* Definitions of target machine for GNU compiler.  Vax sysV version.\n-   Copyright (C) 1988 Free Software Foundation, Inc.\n+/* Definitions of target machine for GNU compiler.  Clipper/Clix version.\n+   Copyright (C) 1988, 1993 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -38,7 +38,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define HAVE_ATEXIT\n \n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN)\t\t\t\\\n-{\t\t\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\\\n   unsigned char *s;\t\t\t\t\t\\\n   int i;\t\t\t\t\t\t\\\n   for (i = 0, s = (unsigned char *)(PTR); i < (LEN); s++, i++)\t\\\n@@ -48,7 +48,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n       fprintf ((FILE), \"%s0x%x\", (i%8?\",\":\"\"), (unsigned)*s); \\\n     }\t\t\t\t\t\t\t\\\n   fputs (\"\\n\", (FILE));\t\t\t\t\t\\\n-}\n+} while (0)\n \n #undef ASM_OUTPUT_DOUBLE\n #define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\\"}, {"sha": "6dbfed8235388821b3b0696815c4225dde6b8e1e", "filename": "gcc/config/fx80/fx80.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Ffx80%2Ffx80.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Ffx80%2Ffx80.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffx80%2Ffx80.h?ref=9e269f7292efa5a81ecf66544d0bb6192e84ca65", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  Alliant FX version.\n-   Copyright (C) 1989 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 1993 Free Software Foundation, Inc.\n    Adapted from m68k.h by Paul Petersen (petersen@uicsrd.csrd.uiuc.edu)\n    and Joe Weening (weening@gang-of-four.stanford.edu).\n \n@@ -1117,14 +1117,14 @@ do { union { float f; long l;} tem;\t\t\t\\\n   fprintf (FILE, \"\\n\"))\n \n #define ASM_OUTPUT_ASCII(FILE,PTR,SIZE)               \\\n-{ int i; unsigned char *pp = (unsigned char *) (PTR);\t\t\\\n+do { int i; unsigned char *pp = (unsigned char *) (PTR);\t\\\n   fprintf((FILE), \"\\t.byte %d\", (unsigned int)*pp++);\t\t\\\n   for (i = 1; i < (SIZE); ++i, ++pp) {\t\t\t\t\\\n     if ((i % 8) == 0)\t\t\t\t\t\t\\\n       fprintf((FILE), \"\\n\\t.byte %d\", (unsigned int) *pp);\t\\\n     else\t\t\t\t\t\t\t\\\n       fprintf((FILE), \",%d\", (unsigned int) *pp); }\t\t\\\n-  fprintf ((FILE), \"\\n\");       }\n+  fprintf ((FILE), \"\\n\");       } while (0)\n \n /* This is how to output an assembler line for a numeric constant byte.  */\n "}, {"sha": "4f745c50a1b3e574c93853833e36b95d30249ade", "filename": "gcc/config/i860/bsd.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Fi860%2Fbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Fi860%2Fbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fbsd.h?ref=9e269f7292efa5a81ecf66544d0bb6192e84ca65", "patch": "@@ -9,7 +9,7 @@\n \n #define ASCII_DATA_ASM_OP \".byte\"\n #define\tASM_OUTPUT_ASCII(f, p, size)\t\\\n-{ register unsigned i;\t\t\t\\\n+do { register unsigned i;\t\t\\\n   int inside;\t\t\t\t\\\n   inside = FALSE;\t\t\t\\\n   for (i = 0; i < (size); i++) {\t\\\n@@ -43,4 +43,4 @@\n   if (inside)\t\t\t\t\\\n     putc('\"', (f));\t\t\t\\\n   putc('\\n', (f));\t\t\t\\\n-}\n+} while (0)"}, {"sha": "3aa1f9d1443c13f2f0d11a3fff5e92be5e42ecb3", "filename": "gcc/config/m68k/3b1.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Fm68k%2F3b1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Fm68k%2F3b1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2F3b1.h?ref=9e269f7292efa5a81ecf66544d0bb6192e84ca65", "patch": "@@ -1,10 +1,8 @@\n /* Definitions of target machine for GNU compiler.\n    AT&T UNIX PC version (pc7300, 3b1)\n+   Written by Alex Crain (alex@umbc3.umd.edu).\n \n-   Written by Alex Crain\n-   bug reports to alex@umbc3.umd.edu\n-\n-   Copyright (C) 1987 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1993 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -194,7 +192,7 @@ do { long l;\t\t\t\t\t\\\n /* Yet another null terminated string format. */\n \n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN) \\\n-  { register int sp = 0, lp = 0; \\\n+  do { register int sp = 0, lp = 0; \\\n     fprintf ((FILE), \"\\tbyte\\t\"); \\\n   loop: \\\n     if ((PTR)[sp] > ' ' && ! ((PTR)[sp] & 0x80) && (PTR)[sp] != '\\\\') \\\n@@ -210,7 +208,7 @@ do { long l;\t\t\t\t\t\\\n \telse \\\n \t  putc (',', (FILE)); \\\n \tgoto loop; } \\\n-    putc ('\\n', (FILE)); }\n+    putc ('\\n', (FILE)); } while (0)\n \n /* Note that in the case of the movhi which fetches an element of\n    an ADDR_DIFF_VEC the offset output is too large by 2."}, {"sha": "8cd09ce903d7e275d03bd51f7bf67569aea0de6b", "filename": "gcc/config/m68k/amix.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Fm68k%2Famix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Fm68k%2Famix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Famix.h?ref=9e269f7292efa5a81ecf66544d0bb6192e84ca65", "patch": "@@ -1,7 +1,7 @@\n /* Definitions of target machine for GNU compiler.\n    Commodore Amiga A3000UX version.\n \n-   Copyright (C) 1991 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1993 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -98,9 +98,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #undef ASM_OUTPUT_ASCII\n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN)\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\\\n   register int sp = 0, lp = 0, ch;\t\t\t\t\\\n-  fprintf ((FILE), \"\\t%s \", BYTE_ASM_OP);\t\t\t\t\\\n+  fprintf ((FILE), \"\\t%s \", BYTE_ASM_OP);\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n     ch = (PTR)[sp];\t\t\t\t\t\t\\\n     if (ch > ' ' && ! (ch & 0x80) && ch != '\\\\')\t\t\\\n@@ -124,7 +124,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\\\n   } while (sp < (LEN));\t\t\t\t\t\t\\\n   putc ('\\n', (FILE));\t\t\t\t\t\t\\\n-}\n+} while (0)\n \f\n /* The following should be unnecessary as a result of PIC_CASE_VECTOR_ADDRESS.\n    But rhealey@aggregate.com says they are still needed.  */"}, {"sha": "81e6b7362510b0e18e23ffe4768f98cfa7b11378", "filename": "gcc/config/m68k/crds.h", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Fm68k%2Fcrds.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Fm68k%2Fcrds.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fcrds.h?ref=9e269f7292efa5a81ecf66544d0bb6192e84ca65", "patch": "@@ -1,9 +1,6 @@\n /* Definitions of target machine for GNU compiler.\n    Charles River Data Systems UNiverse/32\n-\n-   Written by Gary E. Miller\n-   bug reports to Gary_Edmunds_Miller@cup.portal.com\n-\n+   Written by Gary E. Miller (Gary_Edmunds_Miller@cup.portal.com)\n    Copyright (C) 1987, 1993 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n@@ -209,7 +206,7 @@ do { long l[2];\t\t\t\t\t\t\\\n \n #undef  ASM_OUTPUT_ASCII\n #define  ASM_OUTPUT_ASCII(FILE, P , SIZE)\t\t\t\t\\\n-{  int i;\t\t\t\t\t\t\t\t\\\n+do {  int i;\t\t\t\t\t\t\t\t\\\n \t  fprintf ((FILE), \"\\t.ascii \\\"\");\t\t\t\t\\\n \t  for (i = 0; i < (SIZE); i++)\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n@@ -222,11 +219,11 @@ do { long l[2];\t\t\t\t\t\t\\\n \t\t  continue;\t\t\t\t\t\t\\\n \t        }\t\t\t\t\t\t\t\\\n \t       }\t\t\t\t\t\t\t\\\n-\t       /* brain dead asm doesn't understand char escapes */  \\\n+\t       /* brain dead asm doesn't understand char escapes */\t\\\n \t       fprintf ((FILE), \"\\\"\\n\\t.byte\\t%d\\n\\t.ascii \\\"\", c);\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n \t  fprintf ((FILE), \"\\\"\\n\");\t\t\t\t\t\\\n- }\n+ } while (0)\n \n \n /* Change all JBxx to Bxx.  Also change all DBRA to DBF."}, {"sha": "984c2de983593fc3efd4e3743cc3f7e2f1df2428", "filename": "gcc/config/m68k/hp320.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Fm68k%2Fhp320.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Fm68k%2Fhp320.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fhp320.h?ref=9e269f7292efa5a81ecf66544d0bb6192e84ca65", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  HP-UX 68000/68020 version.\n-   Copyright (C) 1987, 1988 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1988, 1993 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -594,7 +594,7 @@ do { long l[3];\t\t\t\t\t\t\t\t\\\n     }}\n \n #define\tASM_OUTPUT_ASCII(f, p, size)\t\\\n-{ register int i;\t\t\t\\\n+do { register int i;\t\t\t\\\n   int inside;\t\t\t\t\\\n   inside = FALSE;\t\t\t\\\n   for (i = 0; i < (size); i++) {\t\\\n@@ -628,7 +628,7 @@ do { long l[3];\t\t\t\t\t\t\t\t\\\n   if (inside)\t\t\t\t\\\n     putc('\"', (f));\t\t\t\\\n   putc('\\n', (f));\t\t\t\\\n-}\n+} while (0)\n \n /* Translate Motorola opcodes such as `jbeq'\n    into SGS opcodes such as `beq.w'."}, {"sha": "7533a740152b7355e08ba1e9d7795ce425bafbaf", "filename": "gcc/config/m68k/m68kv4.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Fm68k%2Fm68kv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Fm68k%2Fm68kv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68kv4.h?ref=9e269f7292efa5a81ecf66544d0bb6192e84ca65", "patch": "@@ -1,5 +1,5 @@\n /* Target definitions for GNU compiler for mc680x0 running System V.4\n-   Copyright (C) 1991 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1993 Free Software Foundation, Inc.\n \n    Written by Ron Guilmette (rfg@ncd.com) and Fred Fish (fnf@cygnus.com).\n \n@@ -201,7 +201,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    seems to be safer. */\n #undef ASM_OUTPUT_ASCII\n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN)\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\\\n   register int sp = 0, lp = 0, ch;\t\t\t\t\\\n   fprintf ((FILE), \"\\t%s \", BYTE_ASM_OP);\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n@@ -227,7 +227,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\\\n   } while (sp < (LEN));\t\t\t\t\t\t\\\n   putc ('\\n', (FILE));\t\t\t\t\t\t\\\n-}\n+} while (0)\n \n /* SVR4 m68k assembler is bitching on the syntax `2.b'.\n    So use the \"LLDnnn-LLnnn\" format.  Define LLDnnn after the table.  */"}, {"sha": "c63240219cae9bfe8348e8bb1930c418234bb204", "filename": "gcc/config/m68k/mot3300.h", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fmot3300.h?ref=9e269f7292efa5a81ecf66544d0bb6192e84ca65", "patch": "@@ -1,12 +1,8 @@\n /* Definitions of target machine for GNU compiler.  \n    SysV68 Motorola 3300 Delta Series\n-\n-   Written by Abramo and Roberto Bagnara\n-   after Alex Crain's 3B1 definitions.\n-\n-   Bug reports to bagnara@dipisa.di.unipi.it\n-\n-   Copyright (C) 1987 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1993 Free Software Foundation, Inc.\n+   Written by Abramo and Roberto Bagnara (bagnara@dipisa.di.unipi.it)\n+   based on Alex Crain's 3B1 definitions.\n \n This file is part of GNU CC.\n \n@@ -418,7 +414,7 @@ do { long l;\t\t\t\t\t\\\n \n #undef ASM_OUTPUT_ASCII\n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN) \\\n-  { register int sp = 0, lp = 0;\t\t\t\t\\\n+  do { register int sp = 0, lp = 0;\t\t\t\t\\\n     fprintf ((FILE), \"\\tbyte\\t\");\t\t\t\t\\\n   loop:\t\t\t\t\t\t\t\t\\\n     if ((PTR)[sp] > ' ' && ! ((PTR)[sp] & 0x80) && (PTR)[sp] != '\\\\')\t\\\n@@ -434,7 +430,7 @@ do { long l;\t\t\t\t\t\\\n \telse\t\t\t\t\t\t\t\\\n \t  putc (',', (FILE));\t\t\t\t\t\\\n \tgoto loop; }\t\t\t\t\t\t\\\n-    putc ('\\n', (FILE)); }\n+    putc ('\\n', (FILE)); } while (0)\n \n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified."}, {"sha": "588a3194a65251412a48f43744bb36e84dfb4a78", "filename": "gcc/config/m68k/sgs.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Fm68k%2Fsgs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Fm68k%2Fsgs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fsgs.h?ref=9e269f7292efa5a81ecf66544d0bb6192e84ca65", "patch": "@@ -1,8 +1,6 @@\n /* Definitions of target machine for GNU compiler for m68k targets using\n    assemblers derived from AT&T \"SGS\" releases.\n-\n    Copyright (C) 1991, 1993 Free Software Foundation, Inc.\n-\n    Written by Fred Fish (fnf@cygnus.com)\n \n This file is part of GNU CC.\n@@ -164,7 +162,7 @@ do { long l;\t\t\t\t\t\t\\\n    output the string one byte at a time. */\n \n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN)\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\\\n   register int sp = 0, lp = 0, ch;\t\t\t\t\\\n   fprintf ((FILE), \"\\t%s \", BYTE_ASM_OP);\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n@@ -190,7 +188,7 @@ do { long l;\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\\\n   } while (sp < (LEN));\t\t\t\t\t\t\\\n   putc ('\\n', (FILE));\t\t\t\t\t\t\\\n-}\n+} while (0)\n \n \n /* SGS based assemblers don't understand #NO_APP and #APP, so just don't"}, {"sha": "46d7eee1493382c0c1ffd8a6a3fd1cb4ff545c24", "filename": "gcc/config/m68k/tower-as.h", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Fm68k%2Ftower-as.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Fm68k%2Ftower-as.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ftower-as.h?ref=9e269f7292efa5a81ecf66544d0bb6192e84ca65", "patch": "@@ -1,16 +1,13 @@\n /* Definitions of target machine for GNU compiler.\n+   For NCR Tower 32/4x0 and 32/6x0 running System V Release 3.\n    Copyright (C) 1990, 1993 Free Software Foundation, Inc.\n+   Written by Robert Andersson (ra@intsys.no), International Systems,\n+   Oslo, Norway.\n \n-   Written by Robert Andersson, International Systems, Oslo, Norway.\n-   Send bug reports, questions and improvements to ra@intsys.no.\n-\n-   For NCR Tower 32/4x0 and 32/6x0 running System V Release 3.\n    This file outputs assembler source suitable for the native Tower as\n    and with sdb debugging symbols.  See tower.h for more comments.\n \n-   This file was based on m68k.h, hp320.h and 3b1.h\n-   as of the 1.37.1 version.\n-\n+   This file was based on m68k.h, hp320.h and 3b1.h as of the 1.37.1 version.\n \n This file is part of GNU CC.\n \n@@ -90,7 +87,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n   fprintf (FILE, \"\\tident\\t\\\"%s\\\" \\n\", NAME)\n \n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN) \\\n-  { register int sp = 0, lp = 0; \\\n+  do { register int sp = 0, lp = 0; \\\n     fprintf ((FILE), \"\\tbyte\\t\"); \\\n   loop: \\\n     if ((PTR)[sp] > ' ' && ! ((PTR)[sp] & 0x80) && (PTR)[sp] != '\\\\') \\\n@@ -106,7 +103,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \telse \\\n \t  putc (',', (FILE)); \\\n \tgoto loop; } \\\n-    putc ('\\n', (FILE)); }\n+    putc ('\\n', (FILE)); } while (0)\n \n /* Translate Motorola opcodes such as `jbeq'\n    into SGS/Tower opcodes such as `beq.w'."}, {"sha": "9d17bd10aa0a92e785e6103e9ec814cd741dfbe7", "filename": "gcc/config/mips/iris4.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Fmips%2Firis4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Fmips%2Firis4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis4.h?ref=9e269f7292efa5a81ecf66544d0bb6192e84ca65", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  Iris version 4.\n-   Copyright (C) 1991 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1993 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -27,7 +27,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    The quickest way to avoid the problem is not to use .ascii.  */\n #undef ASM_OUTPUT_ASCII\n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN)\t\t\t\\\n-{\t\t\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\\\n   unsigned char *s;\t\t\t\t\t\\\n   int i;\t\t\t\t\t\t\\\n   for (i = 0, s = (unsigned char *)(PTR); i < (LEN); s++, i++)\t\\\n@@ -37,4 +37,4 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n       fprintf ((FILE), \"%s0x%x\", (i%8?\",\":\"\"), (unsigned)*s); \\\n     }\t\t\t\t\t\t\t\\\n   fputs (\"\\n\", (FILE));\t\t\t\t\t\\\n-}\n+} while (0)"}, {"sha": "9550360f27d2eb23924a2ed9825637a4a136c022", "filename": "gcc/config/ns32k/encore.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Fns32k%2Fencore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Fns32k%2Fencore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fencore.h?ref=9e269f7292efa5a81ecf66544d0bb6192e84ca65", "patch": "@@ -1,7 +1,7 @@\n /* Definitions of target machine for GNU compiler.  ENCORE NS32000 version.\n-   Copyright (C) 1988 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1993 Free Software Foundation, Inc.\n    Adapted by Robert Brown (brown@harvard.harvard.edu) from the Sequent\n-     version by Michael Tiemann (tiemann@mcc.com).\n+   version by Michael Tiemann (tiemann@mcc.com).\n \n This file is part of GNU CC.\n \n@@ -149,7 +149,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n         }\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n   fprintf ((file), \"\\\"\\n\");\t\t\t\t\\\n-}\n+} while (0)\n \n /* Modify syntax of jsr instructions.  */\n #define CALL_MEMREF_IMPLICIT"}, {"sha": "ca7274bdf22864e643b67e9661fa822958fd3aa1", "filename": "gcc/config/tahoe/harris.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Ftahoe%2Fharris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Ftahoe%2Fharris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftahoe%2Fharris.h?ref=9e269f7292efa5a81ecf66544d0bb6192e84ca65", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  Harris tahoe version.\n-   Copyright (C) 1989 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 1993 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -65,7 +65,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n   output_file_directive ((FILE), main_input_filename);\n \n #define ASM_OUTPUT_ASCII(FILE, PTR, SIZE)\t\t\\\n-{\t\t\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\\\n   unsigned char *_p = (PTR);\t\t\t\t\\\n   int _thissize = (SIZE);\t\t\t\t\\\n   fprintf ((FILE), \"\\t.ascii \\\"\");\t\t\t\\\n@@ -83,4 +83,4 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \t}\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n   fprintf ((FILE), \"\\\"\\n\");\t\t\t\t\\\n-}\n+} while (0)"}, {"sha": "0e1af7dd4575ba66fc02631b6be9e6d10361b583", "filename": "gcc/config/tahoe/tahoe.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Ftahoe%2Ftahoe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Ftahoe%2Ftahoe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftahoe%2Ftahoe.h?ref=9e269f7292efa5a81ecf66544d0bb6192e84ca65", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  Tahoe version.\n-   Copyright (C) 1989 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 1993 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -25,9 +25,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n  *\n  * HCX/UX version by Piet van Oostrum (piet@cs.ruu.nl)\n  *\n- * Performance hacking by Michael Tiemann (tiemann@lurch.stanford.edu)\n- *\n- * Mail bugs reports or fixes to:\tgcc@cs.buffalo.edu\n+ * Performance hacking by Michael Tiemann (tiemann@cygnus.com)\n  */\n \n /* define this for the HCX/UX version */\n@@ -860,7 +858,7 @@ enum reg_class {NO_REGS,GENERAL_REGS,FPP_REG,ALL_REGS,LIM_REG_CLASSES};\n /* This is how to output an assembler line for an ASCII string.  */\n \n #define ASM_OUTPUT_ASCII(FILE, p, size)  \t\t\\\n-{\tregister int i;\t\t\t\t\t\\\n+do {\tregister int i;\t\t\t\t\t\\\n \t  fprintf ((FILE), \"\\t.ascii \\\"\"); \t\t\\\n \t  for (i = 0; i < (size); i++) \t\t\t\\\n \t    {\t\t\t\t\t\t\\\n@@ -874,7 +872,7 @@ enum reg_class {NO_REGS,GENERAL_REGS,FPP_REG,ALL_REGS,LIM_REG_CLASSES};\n \t\t  fprintf ((FILE), \"\\\\%03o\", c);\t\\\n \t\t}\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\\\n-\t  fprintf ((FILE), \"\\\"\\n\"); }\n+\t  fprintf ((FILE), \"\\\"\\n\"); } while (0)\n #endif\n \n /* This is how to output an assembler line for a numeric constant byte.  */"}, {"sha": "133452b3cc8ba5eab93aa8465775c0e42ea3b9a9", "filename": "gcc/config/vax/vaxv.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Fvax%2Fvaxv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Fvax%2Fvaxv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvaxv.h?ref=9e269f7292efa5a81ecf66544d0bb6192e84ca65", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  Vax sysV version.\n-   Copyright (C) 1988 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1993 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -51,8 +51,8 @@ output_file_directive ((FILE), main_input_filename)\n   fprintf ((FILE), \":\\n\\t.space %u\\n\", (ROUNDED)))\n \n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN)\t\t\t\\\n-{\t\t\t\t\t\t\t\\\n-  unsigned char *s;\t\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\\\n+  unsigned char *s;\t\t\t\t\t\\\n   int i;\t\t\t\t\t\t\\\n   for (i = 0, s = (PTR); i < (LEN); s++, i++)\t\t\\\n     {\t\t\t\t\t\t\t\\\n@@ -61,7 +61,7 @@ output_file_directive ((FILE), main_input_filename)\n       fprintf ((FILE), \"%s0x%x\", (i%8?\",\":\"\"), (unsigned)*s); \\\n     }\t\t\t\t\t\t\t\\\n   fputs (\"\\n\", (FILE));\t\t\t\t\t\\\n-}\n+} while (0)\n \n #undef ASM_OUTPUT_DOUBLE\n #define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\\"}, {"sha": "9282e32ac021bfe535ed19c9f1fa8e0a0dc69d7f", "filename": "gcc/config/we32k/we32k.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e269f7292efa5a81ecf66544d0bb6192e84ca65/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.h?ref=9e269f7292efa5a81ecf66544d0bb6192e84ca65", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.  AT&T we32000 version.\n+   Copyright (C) 1991, 1992, 1993 Free Software Foundation, Inc.\n    Contributed by John Wehle (john@feith1.uucp)\n-   Copyright (C) 1991-1992 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -857,7 +857,7 @@ do { union { float f; long l;} tem;\t\t\t\t\\\n   fprintf (FILE, \"\\t.byte 0x%x\\n\", (VALUE))\n \n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN)  \\\n-{\t\t\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\\\n   unsigned char *s;\t\t\t\t\t\\\n   int i;\t\t\t\t\t\t\\\n   for (i = 0, s = (unsigned char *)(PTR); i < (LEN); s++, i++)\t\\\n@@ -867,7 +867,7 @@ do { union { float f; long l;} tem;\t\t\t\t\\\n       fprintf ((FILE), \"%s0x%x\", (i%8?\",\":\"\"), (unsigned)*s); \\\n     }\t\t\t\t\t\t\t\\\n   fputs (\"\\n\", (FILE));\t\t\t\t\t\\\n-}\n+} while (0)\n \n /* This is how to output an insn to push a register on the stack.\n    It need not be very fast code.  */"}]}