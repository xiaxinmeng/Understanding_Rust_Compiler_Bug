{"sha": "135a171d9eac312352f58e0c09abac9156d9fbda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM1YTE3MWQ5ZWFjMzEyMzUyZjU4ZTBjMDlhYmFjOTE1NmQ5ZmJkYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-01-19T17:49:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-01-19T17:49:46Z"}, "message": "re PR gcov-profile/34610 (ICE with \"-fprofile-arcs -fopenmp\")\n\n\tPR gcov-profile/34610\n\t* tree-cfg.c (make_edges): Mark both outgoing edges from\n\tOMP_CONTINUE and from OMP_FOR as EDGE_ABNORMAL.\n\t* omp-low.c (expand_omp_for): Clear EDGE_ABNORMAL bits\n\tfrom OMP_FOR and OMP_CONTINUE outgoing edges.\n\n\t* tree-profile.c (tree_profiling): Return early if\n\tcfun->after_tree_profile != 0.  Set cfun->after_tree_profile\n\tat the end.\n\t* omp-low.c (expand_omp_parallel): Copy after_tree_profile\n\tfrom cfun to child_cfun.\n\t* function.h (struct function): Add after_tree_profile bit.\n\n\t* gcc.dg/gomp/pr34610.c: New test.\n\nFrom-SVN: r131653", "tree": {"sha": "c47ee4cdc097d5f98d818d66731d4ecf07beeff8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c47ee4cdc097d5f98d818d66731d4ecf07beeff8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/135a171d9eac312352f58e0c09abac9156d9fbda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/135a171d9eac312352f58e0c09abac9156d9fbda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/135a171d9eac312352f58e0c09abac9156d9fbda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/135a171d9eac312352f58e0c09abac9156d9fbda/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d7e2fcd0038214e3e3d9301fa7f22cccb54de009", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7e2fcd0038214e3e3d9301fa7f22cccb54de009", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7e2fcd0038214e3e3d9301fa7f22cccb54de009"}], "stats": {"total": 94, "additions": 85, "deletions": 9}, "files": [{"sha": "3fed0b22cab88656162005d029e14ec9232219ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135a171d9eac312352f58e0c09abac9156d9fbda/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135a171d9eac312352f58e0c09abac9156d9fbda/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=135a171d9eac312352f58e0c09abac9156d9fbda", "patch": "@@ -1,3 +1,18 @@\n+2008-01-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR gcov-profile/34610\n+\t* tree-cfg.c (make_edges): Mark both outgoing edges from\n+\tOMP_CONTINUE and from OMP_FOR as EDGE_ABNORMAL.\n+\t* omp-low.c (expand_omp_for): Clear EDGE_ABNORMAL bits\n+\tfrom OMP_FOR and OMP_CONTINUE outgoing edges.\n+\n+\t* tree-profile.c (tree_profiling): Return early if\n+\tcfun->after_tree_profile != 0.  Set cfun->after_tree_profile\n+\tat the end.\n+\t* omp-low.c (expand_omp_parallel): Copy after_tree_profile\n+\tfrom cfun to child_cfun.\n+\t* function.h (struct function): Add after_tree_profile bit.\n+\n 2008-01-19 Anatoly Sokolov <aesok@post.ru>\n \n \t* config/avr/avr.S (_exit): Disable interrupt."}, {"sha": "abc2303bcf74f473dd10700e7d8889e49b215214", "filename": "gcc/function.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135a171d9eac312352f58e0c09abac9156d9fbda/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135a171d9eac312352f58e0c09abac9156d9fbda/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=135a171d9eac312352f58e0c09abac9156d9fbda", "patch": "@@ -1,6 +1,7 @@\n /* Structure for saving state for a nested function.\n    Copyright (C) 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+   1999, 2000, 2003, 2004, 2005, 2006, 2007, 2008\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -459,6 +460,9 @@ struct function GTY(())\n   /* Nonzero if function being compiled needs to\n      return the address of where it has put a structure value.  */\n   unsigned int returns_pcc_struct : 1;\n+\n+  /* Nonzero if pass_tree_profile was run on this function.  */\n+  unsigned int after_tree_profile : 1;\n };\n \n /* If va_list_[gf]pr_size is set to this, it means we don't know how"}, {"sha": "ca0026604ce093a7b270f47b8c4e331c87199e38", "filename": "gcc/omp-low.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135a171d9eac312352f58e0c09abac9156d9fbda/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135a171d9eac312352f58e0c09abac9156d9fbda/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=135a171d9eac312352f58e0c09abac9156d9fbda", "patch": "@@ -2497,6 +2497,9 @@ expand_omp_parallel (struct omp_region *region)\n   entry_stmt = last_stmt (region->entry);\n   child_fn = OMP_PARALLEL_FN (entry_stmt);\n   child_cfun = DECL_STRUCT_FUNCTION (child_fn);\n+  /* If this function has been already instrumented, make sure\n+     the child function isn't instrumented again.  */\n+  child_cfun->after_tree_profile = cfun->after_tree_profile;\n \n   entry_bb = region->entry;\n   exit_bb = region->exit;\n@@ -3337,6 +3340,16 @@ expand_omp_for (struct omp_region *region)\n   extract_omp_for_data (last_stmt (region->entry), &fd);\n   region->sched_kind = fd.sched_kind;\n \n+  gcc_assert (EDGE_COUNT (region->entry->succs) == 2);\n+  BRANCH_EDGE (region->entry)->flags &= ~EDGE_ABNORMAL;\n+  FALLTHRU_EDGE (region->entry)->flags &= ~EDGE_ABNORMAL;\n+  if (region->cont)\n+    {\n+      gcc_assert (EDGE_COUNT (region->cont->succs) == 2);\n+      BRANCH_EDGE (region->cont)->flags &= ~EDGE_ABNORMAL;\n+      FALLTHRU_EDGE (region->cont)->flags &= ~EDGE_ABNORMAL;\n+    }\n+\n   if (fd.sched_kind == OMP_CLAUSE_SCHEDULE_STATIC\n       && !fd.have_ordered\n       && region->cont != NULL)"}, {"sha": "11e4ed41082690bfc4f74074ca2877d5f522b3bd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135a171d9eac312352f58e0c09abac9156d9fbda/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135a171d9eac312352f58e0c09abac9156d9fbda/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=135a171d9eac312352f58e0c09abac9156d9fbda", "patch": "@@ -1,3 +1,8 @@\n+2008-01-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR gcov-profile/34610\n+\t* gcc.dg/gomp/pr34610.c: New test.\n+\n 2008-01-19  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/34760"}, {"sha": "95353a5625edca0ee38d2a2c1cc73ff145ae54c5", "filename": "gcc/testsuite/gcc.dg/gomp/pr34610.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135a171d9eac312352f58e0c09abac9156d9fbda/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr34610.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135a171d9eac312352f58e0c09abac9156d9fbda/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr34610.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr34610.c?ref=135a171d9eac312352f58e0c09abac9156d9fbda", "patch": "@@ -0,0 +1,30 @@\n+/* PR gcov-profile/34610 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fprofile-arcs -fopenmp\" } */\n+\n+extern void bar (int);\n+extern void baz (int) __attribute__((noreturn));\n+\n+void\n+foo (int k)\n+{\n+  int i;\n+#pragma omp for schedule(dynamic)\n+  for (i = 0; i < 10; ++i)\n+    bar (i);\n+#pragma omp parallel for schedule(static)\n+  for (i = 0; i < 10; ++i)\n+    bar (i);\n+#pragma omp parallel for schedule(static, 4)\n+  for (i = 0; i < 10; ++i)\n+    bar (i);\n+  if (k)\n+  #pragma omp for schedule(dynamic)\n+    for (i = 0; i < 10; ++i)\n+      baz (i);\n+#pragma omp parallel\n+  for (i = 0; i < 10; ++i)\n+    bar (i);\n+}\n+\n+/* { dg-final { cleanup-coverage-files } } */"}, {"sha": "c702502f1a7d566314b700dd04571439fcfaab60", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135a171d9eac312352f58e0c09abac9156d9fbda/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135a171d9eac312352f58e0c09abac9156d9fbda/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=135a171d9eac312352f58e0c09abac9156d9fbda", "patch": "@@ -1,5 +1,5 @@\n /* Control flow functions for trees.\n-   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n    Free Software Foundation, Inc.\n    Contributed by Diego Novillo <dnovillo@redhat.com>\n \n@@ -544,14 +544,19 @@ make_edges (void)\n \t      switch (cur_region->type)\n \t\t{\n \t\tcase OMP_FOR:\n+\t\t  /* Mark all OMP_FOR and OMP_CONTINUE succs edges as abnormal\n+\t\t     to prevent splitting them.  */\n+\t\t  single_succ_edge (cur_region->entry)->flags |= EDGE_ABNORMAL;\n \t\t  /* Make the loopback edge.  */\n-\t\t  make_edge (bb, single_succ (cur_region->entry), 0);\n-\t      \n+\t\t  make_edge (bb, single_succ (cur_region->entry),\n+\t\t\t     EDGE_ABNORMAL);\n+\n \t\t  /* Create an edge from OMP_FOR to exit, which corresponds to\n \t\t     the case that the body of the loop is not executed at\n \t\t     all.  */\n-\t\t  make_edge (cur_region->entry, bb->next_bb, 0);\n-\t\t  fallthru = true;\n+\t\t  make_edge (cur_region->entry, bb->next_bb, EDGE_ABNORMAL);\n+\t\t  make_edge (bb, bb->next_bb, EDGE_FALLTHRU | EDGE_ABNORMAL);\n+\t\t  fallthru = false;\n \t\t  break;\n \n \t\tcase OMP_SECTIONS:"}, {"sha": "00fbd862ad9a6816599585197a51fbc3e4e7fab0", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135a171d9eac312352f58e0c09abac9156d9fbda/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135a171d9eac312352f58e0c09abac9156d9fbda/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=135a171d9eac312352f58e0c09abac9156d9fbda", "patch": "@@ -1,6 +1,6 @@\n /* Calculate branch probabilities, and basic block execution counts.\n    Copyright (C) 1990, 1991, 1992, 1993, 1994, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n    Free Software Foundation, Inc.\n    Contributed by James E. Wilson, UC Berkeley/Cygnus Support;\n    based on some ideas from Dain Samples of UC Berkeley.\n@@ -419,8 +419,11 @@ static unsigned int\n tree_profiling (void)\n {\n   /* Don't profile functions produced at destruction time, particularly\n-     the gcov datastructure initializer.  */\n-  if (cgraph_state == CGRAPH_STATE_FINISHED)\n+     the gcov datastructure initializer.  Don't profile if it has been\n+     already instrumented either (when OpenMP expansion creates\n+     child function from already instrumented body).  */\n+  if (cgraph_state == CGRAPH_STATE_FINISHED\n+      || cfun->after_tree_profile)\n     return 0;\n \n   /* Re-set global shared temporary variable for edge-counters.  */\n@@ -441,6 +444,7 @@ tree_profiling (void)\n      easy to adjust it, if and when there is some.  */\n   free_dominance_info (CDI_DOMINATORS);\n   free_dominance_info (CDI_POST_DOMINATORS);\n+  cfun->after_tree_profile = 1;\n   return 0;\n }\n "}]}