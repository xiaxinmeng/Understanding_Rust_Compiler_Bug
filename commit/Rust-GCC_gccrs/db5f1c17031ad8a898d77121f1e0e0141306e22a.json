{"sha": "db5f1c17031ad8a898d77121f1e0e0141306e22a", "node_id": "C_kwDOANBUbNoAKGRiNWYxYzE3MDMxYWQ4YTg5OGQ3NzEyMWYxZTBlMDE0MTMwNmUyMmE", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-02-08T13:46:32Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-02-08T13:46:32Z"}, "message": "c++: lambda in pack expansion using pack in constraint [PR103706]\n\nHere when expanding the pack expansion pattern containing a constrained\nlambda, the template argument for each Ts is an ARGUMENT_PACK_SELECT,\nwhich we store inside the lambda's LAMBDA_EXPR_REGEN_INFO.  Then during\nsatisfaction of the lambda's constraint C<Ts> the satisfaction cache\nuses this argument as part of the key to the corresponding sat_entry, but\niterative_hash_template_arg and template_args_equal deliberately don't\nhandle ARGUMENT_PACK_SELECT.\n\nSince it's wrong to preserve ARGUMENT_PACK_SELECT inside a hash table\ndue to its instability (as documented in iterative_hash_template_arg),\nthis patch helps make sure the satisfaction cache doesn't see such trees\nby resolving ARGUMENT_PACK_SELECT arguments before adding them to\nLAMBDA_EXPR_REGEN_INFO.\n\n\tPR c++/103706\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (preserve_args): New function.\n\t(tsubst_lambda_expr): Use it when setting LAMBDA_EXPR_REGEN_INFO.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-lambda19.C: New test.", "tree": {"sha": "ba7bfaa7d82679b892b618cef4dad13d5d3a72a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba7bfaa7d82679b892b618cef4dad13d5d3a72a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db5f1c17031ad8a898d77121f1e0e0141306e22a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db5f1c17031ad8a898d77121f1e0e0141306e22a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db5f1c17031ad8a898d77121f1e0e0141306e22a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db5f1c17031ad8a898d77121f1e0e0141306e22a/comments", "author": null, "committer": null, "parents": [{"sha": "34ba3d9a2bf72742b1c150a2dd17d10e3e3f0964", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34ba3d9a2bf72742b1c150a2dd17d10e3e3f0964", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34ba3d9a2bf72742b1c150a2dd17d10e3e3f0964"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "5115fba8d0fb05377e8ad054892e8ea5a14a710b", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5f1c17031ad8a898d77121f1e0e0141306e22a/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5f1c17031ad8a898d77121f1e0e0141306e22a/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=db5f1c17031ad8a898d77121f1e0e0141306e22a", "patch": "@@ -3743,6 +3743,41 @@ argument_pack_select_arg (tree t)\n   return arg;\n }\n \n+/* Return a modification of ARGS that's suitable for preserving inside a hash\n+   table.  In particular, this replaces each ARGUMENT_PACK_SELECT with its\n+   underlying argument.  ARGS is copied (upon modification) iff COW_P.  */\n+\n+static tree\n+preserve_args (tree args, bool cow_p = true)\n+{\n+  if (!args)\n+    return NULL_TREE;\n+\n+  for (int i = 0, len = TREE_VEC_LENGTH (args); i < len; ++i)\n+    {\n+      tree t = TREE_VEC_ELT (args, i);\n+      tree r;\n+      if (!t)\n+\tr = NULL_TREE;\n+      else if (TREE_CODE (t) == ARGUMENT_PACK_SELECT)\n+\tr = argument_pack_select_arg (t);\n+      else if (TREE_CODE (t) == TREE_VEC)\n+\tr = preserve_args (t, cow_p);\n+      else\n+\tr = t;\n+      if (r != t)\n+\t{\n+\t  if (cow_p)\n+\t    {\n+\t      args = copy_template_args (args);\n+\t      cow_p = false;\n+\t    }\n+\t  TREE_VEC_ELT (args, i) = r;\n+\t}\n+    }\n+\n+  return args;\n+}\n \n /* True iff FN is a function representing a built-in variadic parameter\n    pack.  */\n@@ -19511,10 +19546,11 @@ tsubst_lambda_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n   LAMBDA_EXPR_MUTABLE_P (r) = LAMBDA_EXPR_MUTABLE_P (t);\n   if (tree ti = LAMBDA_EXPR_REGEN_INFO (t))\n     LAMBDA_EXPR_REGEN_INFO (r)\n-      = build_template_info (t, add_to_template_args (TI_ARGS (ti), args));\n+      = build_template_info (t, add_to_template_args (TI_ARGS (ti),\n+\t\t\t\t\t\t      preserve_args (args)));\n   else\n     LAMBDA_EXPR_REGEN_INFO (r)\n-      = build_template_info (t, args);\n+      = build_template_info (t, preserve_args (args));\n \n   gcc_assert (LAMBDA_EXPR_THIS_CAPTURE (t) == NULL_TREE\n \t      && LAMBDA_EXPR_PENDING_PROXIES (t) == NULL);"}, {"sha": "1921f4892fd243d0cc5c751c55a6a2ce85d7de67", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-lambda19.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5f1c17031ad8a898d77121f1e0e0141306e22a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5f1c17031ad8a898d77121f1e0e0141306e22a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda19.C?ref=db5f1c17031ad8a898d77121f1e0e0141306e22a", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/103706\n+// { dg-do compile { target c++20 } }\n+\n+template<class T> concept C = __is_same(T, int);\n+\n+template<class... Ts> void f() {\n+  ([]() requires C<Ts> { return Ts(); }(), ...); // { dg-error \"no match\" }\n+}\n+\n+template void f<int, int, int>(); // { dg-bogus \"\" }\n+template void f<int, int, char>(); // { dg-message \"required from here\" }"}]}