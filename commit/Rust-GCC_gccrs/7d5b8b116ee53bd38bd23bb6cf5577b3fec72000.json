{"sha": "7d5b8b116ee53bd38bd23bb6cf5577b3fec72000", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q1YjhiMTE2ZWU1M2JkMzhiZDIzYmI2Y2Y1NTc3YjNmZWM3MjAwMA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-11-29T22:01:58Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-11-29T22:01:58Z"}, "message": "re PR c++/4842 (-Woverloaded-virtual does not work)\n\n\tPR c++/4842\n\t* class.c (get_basefndecls): Take an IDENTIFIER_NODE, not a\n\tFUNCTION_DECL, as input.\n\t(mark_overriders): Remove.\n\t(warn_hidden): Rework for the new ABI.\n\nFrom-SVN: r47458", "tree": {"sha": "fb078c647428342b9b08d1fda114e228d490f969", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb078c647428342b9b08d1fda114e228d490f969"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d5b8b116ee53bd38bd23bb6cf5577b3fec72000", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d5b8b116ee53bd38bd23bb6cf5577b3fec72000", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d5b8b116ee53bd38bd23bb6cf5577b3fec72000", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d5b8b116ee53bd38bd23bb6cf5577b3fec72000/comments", "author": null, "committer": null, "parents": [{"sha": "45aff9968ebeae5b26dd05f39242ab9e17ad0797", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45aff9968ebeae5b26dd05f39242ab9e17ad0797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45aff9968ebeae5b26dd05f39242ab9e17ad0797"}], "stats": {"total": 153, "additions": 75, "deletions": 78}, "files": [{"sha": "0177bc9f417029c336cb2b4a9d9baa44d04153cd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5b8b116ee53bd38bd23bb6cf5577b3fec72000/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5b8b116ee53bd38bd23bb6cf5577b3fec72000/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7d5b8b116ee53bd38bd23bb6cf5577b3fec72000", "patch": "@@ -1,3 +1,11 @@\n+2001-11-29  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/4842\n+\t* class.c (get_basefndecls): Take an IDENTIFIER_NODE, not a\n+\tFUNCTION_DECL, as input.\n+\t(mark_overriders): Remove.\n+\t(warn_hidden): Rework for the new ABI.\n+\n 2001-11-29  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/3471"}, {"sha": "e843c32b4585b341bbb285c7ecb7c0cf267e0cb8", "filename": "gcc/cp/class.c", "status": "modified", "additions": 57, "deletions": 78, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5b8b116ee53bd38bd23bb6cf5577b3fec72000/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5b8b116ee53bd38bd23bb6cf5577b3fec72000/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=7d5b8b116ee53bd38bd23bb6cf5577b3fec72000", "patch": "@@ -120,7 +120,6 @@ static void finish_struct_bits PARAMS ((tree));\n static int alter_access PARAMS ((tree, tree, tree));\n static void handle_using_decl PARAMS ((tree, tree));\n static int strictly_overrides PARAMS ((tree, tree));\n-static void mark_overriders PARAMS ((tree, tree));\n static void check_for_override PARAMS ((tree, tree));\n static tree dfs_modify_vtables PARAMS ((tree, void *));\n static tree modify_all_vtables PARAMS ((tree, int *, tree));\n@@ -2686,59 +2685,37 @@ strictly_overrides (fndecl1, fndecl2)\n \t  && kind != bk_same_type);\n }\n \n-/* Get the base virtual function declarations in T that are either\n-   overridden or hidden by FNDECL as a list.  We set TREE_PURPOSE with\n-   the overrider/hider.  */\n+/* Get the base virtual function declarations in T that have the\n+   indicated NAME.  */\n \n static tree\n-get_basefndecls (fndecl, t)\n-     tree fndecl, t;\n+get_basefndecls (name, t)\n+     tree name, t;\n {\n-  tree methods = TYPE_METHODS (t);\n+  tree methods;\n   tree base_fndecls = NULL_TREE;\n-  tree binfos = BINFO_BASETYPES (TYPE_BINFO (t));\n-  int i, n_baseclasses = binfos ? TREE_VEC_LENGTH (binfos) : 0;\n+  int n_baseclasses = CLASSTYPE_N_BASECLASSES (t);\n+  int i;\n \n-  while (methods)\n-    {\n-      if (TREE_CODE (methods) == FUNCTION_DECL\n-\t  && DECL_VINDEX (methods) != NULL_TREE\n-\t  && DECL_NAME (fndecl) == DECL_NAME (methods))\n-\tbase_fndecls = tree_cons (fndecl, methods, base_fndecls);\n-\n-      methods = TREE_CHAIN (methods);\n-    }\n+  for (methods = TYPE_METHODS (t); methods; methods = TREE_CHAIN (methods))\n+    if (TREE_CODE (methods) == FUNCTION_DECL\n+\t&& DECL_VINDEX (methods) != NULL_TREE\n+\t&& DECL_NAME (methods) == name)\n+      base_fndecls = tree_cons (NULL_TREE, methods, base_fndecls);\n \n   if (base_fndecls)\n     return base_fndecls;\n \n   for (i = 0; i < n_baseclasses; i++)\n     {\n-      tree base_binfo = TREE_VEC_ELT (binfos, i);\n-      tree basetype = BINFO_TYPE (base_binfo);\n-\n-      base_fndecls = chainon (get_basefndecls (fndecl, basetype),\n+      tree basetype = TYPE_BINFO_BASETYPE (t, i);\n+      base_fndecls = chainon (get_basefndecls (name, basetype),\n \t\t\t      base_fndecls);\n     }\n \n   return base_fndecls;\n }\n \n-/* Mark the functions that have been hidden with their overriders.\n-   Since we start out with all functions already marked with a hider,\n-   no need to mark functions that are just hidden.\n-\n-   Subroutine of warn_hidden.  */\n-\n-static void\n-mark_overriders (fndecl, base_fndecls)\n-     tree fndecl, base_fndecls;\n-{\n-  for (; base_fndecls; base_fndecls = TREE_CHAIN (base_fndecls))\n-    if (same_signature_p (fndecl, TREE_VALUE (base_fndecls)))\n-      TREE_PURPOSE (base_fndecls) = fndecl;\n-}\n-\n /* If this declaration supersedes the declaration of\n    a method declared virtual in the base class, then\n    mark this field as being virtual as well.  */\n@@ -2786,57 +2763,59 @@ warn_hidden (t)\n   /* We go through each separately named virtual function.  */\n   for (i = 2; i < n_methods && TREE_VEC_ELT (method_vec, i); ++i)\n     {\n-      tree fns = TREE_VEC_ELT (method_vec, i);\n-      tree fndecl = NULL_TREE;\n-\n-      tree base_fndecls = NULL_TREE;\n-      tree binfos = BINFO_BASETYPES (TYPE_BINFO (t));\n-      int i, n_baseclasses = binfos ? TREE_VEC_LENGTH (binfos) : 0;\n-\n-      /* First see if we have any virtual functions in this batch.  */\n-      for (; fns; fns = OVL_NEXT (fns))\n+      tree fns;\n+      tree name;\n+      tree fndecl;\n+      tree base_fndecls;\n+      int j;\n+\n+      /* All functions in this slot in the CLASSTYPE_METHOD_VEC will\n+\t have the same name.  Figure out what name that is.  */\n+      name = DECL_NAME (OVL_CURRENT (TREE_VEC_ELT (method_vec, i)));\n+      /* There are no possibly hidden functions yet.  */\n+      base_fndecls = NULL_TREE;\n+      /* Iterate through all of the base classes looking for possibly\n+\t hidden functions.  */\n+      for (j = 0; j < CLASSTYPE_N_BASECLASSES (t); j++)\n \t{\n-\t  fndecl = OVL_CURRENT (fns);\n-\t  if (DECL_VINDEX (fndecl))\n-\t    break;\n+\t  tree basetype = TYPE_BINFO_BASETYPE (t, j);\n+\t  base_fndecls = chainon (get_basefndecls (name, basetype),\n+\t\t\t\t  base_fndecls);\n \t}\n \n-      if (fns == NULL_TREE)\n+      /* If there are no functions to hide, continue. */\n+      if (!base_fndecls)\n \tcontinue;\n \n-      /* First we get a list of all possible functions that might be\n-\t hidden from each base class.  */\n-      for (i = 0; i < n_baseclasses; i++)\n+      /* Remove any overridden functions. */\n+      for (fns = TREE_VEC_ELT (method_vec, i); fns; fns = OVL_NEXT (fns))\n \t{\n-\t  tree base_binfo = TREE_VEC_ELT (binfos, i);\n-\t  tree basetype = BINFO_TYPE (base_binfo);\n-\n-\t  base_fndecls = chainon (get_basefndecls (fndecl, basetype),\n-\t\t\t\t  base_fndecls);\n+\t  fndecl = OVL_CURRENT (fns);\n+\t  if (DECL_VINDEX (fndecl))\n+\t    {\n+\t      tree *prev = &base_fndecls;\n+\t      \n+\t      while (*prev) \n+\t\t/* If the method from the base class has the same\n+\t\t   signature as the method from the derived class, it\n+\t\t   has been overridden.  */\n+\t\tif (same_signature_p (fndecl, TREE_VALUE (*prev)))\n+\t\t  *prev = TREE_CHAIN (*prev);\n+\t\telse\n+\t\t  prev = &TREE_CHAIN (*prev);\n+\t    }\n \t}\n \n-      fns = OVL_NEXT (fns);\n-\n-      /* ...then mark up all the base functions with overriders, preferring\n-\t overriders to hiders.  */\n-      if (base_fndecls)\n-\tfor (; fns; fns = OVL_NEXT (fns))\n-\t  {\n-\t    fndecl = OVL_CURRENT (fns);\n-\t    if (DECL_VINDEX (fndecl))\n-\t      mark_overriders (fndecl, base_fndecls);\n-\t  }\n-\n       /* Now give a warning for all base functions without overriders,\n \t as they are hidden.  */\n-      for (; base_fndecls; base_fndecls = TREE_CHAIN (base_fndecls))\n-\tif (!same_signature_p (TREE_PURPOSE (base_fndecls),\n-\t\t\t       TREE_VALUE (base_fndecls)))\n-\t  {\n-\t    /* Here we know it is a hider, and no overrider exists.  */\n-\t    cp_warning_at (\"`%D' was hidden\", TREE_VALUE (base_fndecls));\n-\t    cp_warning_at (\"  by `%D'\", TREE_PURPOSE (base_fndecls));\n-\t  }\n+      while (base_fndecls) \n+\t{\n+\t  /* Here we know it is a hider, and no overrider exists.  */\n+\t  cp_warning_at (\"`%D' was hidden\", TREE_VALUE (base_fndecls));\n+\t  cp_warning_at (\"  by `%D'\", \n+\t\t\t OVL_CURRENT (TREE_VEC_ELT (method_vec, i)));\n+\t  base_fndecls = TREE_CHAIN (base_fndecls);\n+\t}\n     }\n }\n "}, {"sha": "2712adde96c01bfdbd735f455bdafb39d93ef3fa", "filename": "gcc/testsuite/g++.old-deja/g++.warn/virt1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5b8b116ee53bd38bd23bb6cf5577b3fec72000/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.warn%2Fvirt1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5b8b116ee53bd38bd23bb6cf5577b3fec72000/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.warn%2Fvirt1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.warn%2Fvirt1.C?ref=7d5b8b116ee53bd38bd23bb6cf5577b3fec72000", "patch": "@@ -0,0 +1,10 @@\n+// Special g++ Options: -Woverloaded-virtual\n+// Build don't link:\n+\n+struct A {\n+  virtual void f(); // WARNING - hidden \n+};\n+\n+struct B: public A {\n+  void f(int); // WARNING - by this\n+};"}]}