{"sha": "c560591408440f441b8b327f5b41f9328d20b67b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU2MDU5MTQwODQ0MGY0NDFiOGIzMjdmNWI0MWY5MzI4ZDIwYjY3Yg==", "commit": {"author": {"name": "Paul E. Murphy", "email": "murp@ibm.com", "date": "2020-09-15T19:18:28Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-09-17T19:14:09Z"}, "message": "libgo: fix ptrace syscall hooks into glibc\n\nptrace is actually declared as a variadic function.  On ppc64le\nthe ABI requires to the caller to allocate space for the parameters\nand allows the caller to modify them.\n\nOn ppc64le, depending on how and what version of GCC is used,\nit will save to parameter save area.  This happened to clobber\na saved LR, and caused syscall.TestExecPtrace to fail with a timeout\nwhen the tracee segfaults, and waits for the parent process to inspect.\n\nWrap this function to avoid directly calling glibc's ptrace from go.\n\nFixes golang/go#36698\nFixes go/92567\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/254755", "tree": {"sha": "ac39d36225e7d451ca671154c9f424259b3c8702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac39d36225e7d451ca671154c9f424259b3c8702"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c560591408440f441b8b327f5b41f9328d20b67b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c560591408440f441b8b327f5b41f9328d20b67b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c560591408440f441b8b327f5b41f9328d20b67b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c560591408440f441b8b327f5b41f9328d20b67b/comments", "author": {"login": "pmur", "id": 12972156, "node_id": "MDQ6VXNlcjEyOTcyMTU2", "avatar_url": "https://avatars.githubusercontent.com/u/12972156?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmur", "html_url": "https://github.com/pmur", "followers_url": "https://api.github.com/users/pmur/followers", "following_url": "https://api.github.com/users/pmur/following{/other_user}", "gists_url": "https://api.github.com/users/pmur/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmur/subscriptions", "organizations_url": "https://api.github.com/users/pmur/orgs", "repos_url": "https://api.github.com/users/pmur/repos", "events_url": "https://api.github.com/users/pmur/events{/privacy}", "received_events_url": "https://api.github.com/users/pmur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4839de55e2c98619f4919254abb87e2f393aaead", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4839de55e2c98619f4919254abb87e2f393aaead", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4839de55e2c98619f4919254abb87e2f393aaead"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "6b590f6fd9465e9dbb3b63f6f32dad46d339d002", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c560591408440f441b8b327f5b41f9328d20b67b/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c560591408440f441b8b327f5b41f9328d20b67b/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=c560591408440f441b8b327f5b41f9328d20b67b", "patch": "@@ -1,4 +1,4 @@\n-a47485cd0e9ce6a8b3e88e53ccc0a440f0bd4351\n+6fd6418efb983827717f648a11bb5ca6fe93af30\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "823343d5075a8aaa0f339f657145dade50614045", "filename": "libgo/go/syscall/libcall_glibc.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c560591408440f441b8b327f5b41f9328d20b67b/libgo%2Fgo%2Fsyscall%2Flibcall_glibc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c560591408440f441b8b327f5b41f9328d20b67b/libgo%2Fgo%2Fsyscall%2Flibcall_glibc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_glibc.go?ref=c560591408440f441b8b327f5b41f9328d20b67b", "patch": "@@ -32,7 +32,7 @@ func Futimes(fd int, tv []Timeval) (err error) {\n }\n \n //sys\tptrace(request int, pid int, addr uintptr, data uintptr) (err error)\n-//ptrace(request _C_int, pid Pid_t, addr *byte, data *byte) _C_long\n+//__go_ptrace(request _C_int, pid Pid_t, addr *byte, data *byte) _C_long\n \n //sys\taccept4(fd int, sa *RawSockaddrAny, len *Socklen_t, flags int) (nfd int, err error)\n //accept4(fd _C_int, sa *RawSockaddrAny, len *Socklen_t, flags _C_int) _C_int"}, {"sha": "78fda0ea7ef1c6c93a092928b84a71035e670342", "filename": "libgo/go/syscall/libcall_linux.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c560591408440f441b8b327f5b41f9328d20b67b/libgo%2Fgo%2Fsyscall%2Flibcall_linux.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c560591408440f441b8b327f5b41f9328d20b67b/libgo%2Fgo%2Fsyscall%2Flibcall_linux.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_linux.go?ref=c560591408440f441b8b327f5b41f9328d20b67b", "patch": "@@ -11,7 +11,7 @@ import (\n )\n \n //sysnb raw_ptrace(request int, pid int, addr *byte, data *byte) (err Errno)\n-//ptrace(request _C_int, pid Pid_t, addr *byte, data *byte) _C_long\n+//__go_ptrace(request _C_int, pid Pid_t, addr *byte, data *byte) _C_long\n \n func ptracePeek(req int, pid int, addr uintptr, out []byte) (count int, err error) {\n \t// The peek requests are machine-size oriented, so we wrap it"}, {"sha": "f9270a97bfde1ce096ebae958bb9a12382dee70b", "filename": "libgo/runtime/go-varargs.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c560591408440f441b8b327f5b41f9328d20b67b/libgo%2Fruntime%2Fgo-varargs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c560591408440f441b8b327f5b41f9328d20b67b/libgo%2Fruntime%2Fgo-varargs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-varargs.c?ref=c560591408440f441b8b327f5b41f9328d20b67b", "patch": "@@ -18,6 +18,9 @@\n #ifdef HAVE_SYS_SYSCALL_H\n #include <sys/syscall.h>\n #endif\n+#ifdef HAVE_SYS_PTRACE_H\n+#include <sys/ptrace.h>\n+#endif\n \n /* The syscall package calls C functions.  The Go compiler can not\n    represent a C varargs functions.  On some systems it's important\n@@ -110,3 +113,16 @@ __go_syscall6(uintptr_t flag, uintptr_t a1, uintptr_t a2, uintptr_t a3,\n }\n \n #endif\n+\n+#ifdef HAVE_SYS_PTRACE_H\n+\n+// Despite documented appearances, this is actually implemented as\n+// a variadic function within glibc.\n+\n+long\n+__go_ptrace(int request, pid_t pid, uintptr_t addr, uintptr_t data)\n+{\n+  return ptrace (request, pid, addr, data);\n+}\n+\n+#endif"}]}