{"sha": "7ac4dfec3912ef0be85542a00628c3ba01ddea2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FjNGRmZWMzOTEyZWYwYmU4NTU0MmEwMDYyOGMzYmEwMWRkZWEyYQ==", "commit": {"author": {"name": "Marcus Comstedt", "email": "marcus@mc.pp.se", "date": "2021-03-19T19:49:08Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2021-03-23T09:32:41Z"}, "message": "RISC-V: Fix matches against subreg with a bytenum of 0 in riscv.md\n\nThese all intend the least significant subpart of the register.\nUse the same endian-neutral \"subreg_lowpart_operator\" predicate that\nARM does instead.\n\ngcc/\n\t* config/riscv/predicates.md (subreg_lowpart_operator): New predicate\n\t* config/riscv/riscv.md (*addsi3_extended2, *subsi3_extended2)\n\t(*negsi2_extended2, *mulsi3_extended2, *<optab>si3_mask)\n\t(*<optab>si3_mask_1, *<optab>di3_mask, *<optab>di3_mask_1)\n\t(*<optab>si3_extend_mask, *<optab>si3_extend_mask_1): Use\n\tnew predicate \"subreg_lowpart_operator\"", "tree": {"sha": "a9e0f6195977bd67711c2e5dde17f5465f17eed0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9e0f6195977bd67711c2e5dde17f5465f17eed0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ac4dfec3912ef0be85542a00628c3ba01ddea2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ac4dfec3912ef0be85542a00628c3ba01ddea2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ac4dfec3912ef0be85542a00628c3ba01ddea2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ac4dfec3912ef0be85542a00628c3ba01ddea2a/comments", "author": {"login": "zeldin", "id": 411296, "node_id": "MDQ6VXNlcjQxMTI5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/411296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zeldin", "html_url": "https://github.com/zeldin", "followers_url": "https://api.github.com/users/zeldin/followers", "following_url": "https://api.github.com/users/zeldin/following{/other_user}", "gists_url": "https://api.github.com/users/zeldin/gists{/gist_id}", "starred_url": "https://api.github.com/users/zeldin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zeldin/subscriptions", "organizations_url": "https://api.github.com/users/zeldin/orgs", "repos_url": "https://api.github.com/users/zeldin/repos", "events_url": "https://api.github.com/users/zeldin/events{/privacy}", "received_events_url": "https://api.github.com/users/zeldin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eb3a801a5ed947a50f941b63e30a0359fccf138", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eb3a801a5ed947a50f941b63e30a0359fccf138", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4eb3a801a5ed947a50f941b63e30a0359fccf138"}], "stats": {"total": 75, "additions": 40, "deletions": 35}, "files": [{"sha": "23211513554463cce3e7df13d995f487042994b5", "filename": "gcc/config/riscv/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac4dfec3912ef0be85542a00628c3ba01ddea2a/gcc%2Fconfig%2Friscv%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac4dfec3912ef0be85542a00628c3ba01ddea2a/gcc%2Fconfig%2Friscv%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fpredicates.md?ref=7ac4dfec3912ef0be85542a00628c3ba01ddea2a", "patch": "@@ -198,6 +198,11 @@\n (define_predicate \"signed_order_operator\"\n   (match_code \"eq,ne,lt,le,ge,gt\"))\n \n+(define_predicate \"subreg_lowpart_operator\"\n+  (ior (match_code \"truncate\")\n+       (and (match_code \"subreg\")\n+            (match_test \"subreg_lowpart_p (op)\"))))\n+\n (define_predicate \"fp_native_comparison\"\n   (match_code \"eq,lt,le,gt,ge\"))\n "}, {"sha": "c3687d57047b00618a311ca06ac48a7cd567c9a2", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac4dfec3912ef0be85542a00628c3ba01ddea2a/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac4dfec3912ef0be85542a00628c3ba01ddea2a/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=7ac4dfec3912ef0be85542a00628c3ba01ddea2a", "patch": "@@ -480,9 +480,9 @@\n (define_insn \"*addsi3_extended2\"\n   [(set (match_operand:DI                       0 \"register_operand\" \"=r,r\")\n \t(sign_extend:DI\n-\t  (subreg:SI (plus:DI (match_operand:DI 1 \"register_operand\" \" r,r\")\n-\t\t\t      (match_operand:DI 2 \"arith_operand\"    \" r,I\"))\n-\t\t     0)))]\n+\t  (match_operator:SI 3 \"subreg_lowpart_operator\"\n+\t     [(plus:DI (match_operand:DI 1 \"register_operand\" \" r,r\")\n+\t\t       (match_operand:DI 2 \"arith_operand\"    \" r,I\"))])))]\n   \"TARGET_64BIT\"\n   \"add%i2w\\t%0,%1,%2\"\n   [(set_attr \"type\" \"arith\")\n@@ -536,9 +536,9 @@\n (define_insn \"*subsi3_extended2\"\n   [(set (match_operand:DI                        0 \"register_operand\" \"= r\")\n \t(sign_extend:DI\n-\t  (subreg:SI (minus:DI (match_operand:DI 1 \"reg_or_0_operand\" \" rJ\")\n-\t\t\t       (match_operand:DI 2 \"register_operand\" \"  r\"))\n-\t\t     0)))]\n+\t  (match_operator:SI 3 \"subreg_lowpart_operator\"\n+\t    [(minus:DI (match_operand:DI 1 \"reg_or_0_operand\" \" rJ\")\n+\t\t       (match_operand:DI 2 \"register_operand\" \"  r\"))])))]\n   \"TARGET_64BIT\"\n   \"subw\\t%0,%z1,%2\"\n   [(set_attr \"type\" \"arith\")\n@@ -572,8 +572,8 @@\n (define_insn \"*negsi2_extended2\"\n   [(set (match_operand:DI                     0 \"register_operand\" \"=r\")\n \t(sign_extend:DI\n-\t (subreg:SI (neg:DI (match_operand:DI 1 \"register_operand\" \" r\"))\n-\t \t    0)))]\n+\t (match_operator:SI 2 \"subreg_lowpart_operator\"\n+\t   [(neg:DI (match_operand:DI 1 \"register_operand\" \" r\"))])))]\n   \"TARGET_64BIT\"\n   \"negw\\t%0,%1\"\n   [(set_attr \"type\" \"arith\")\n@@ -627,9 +627,9 @@\n (define_insn \"*mulsi3_extended2\"\n   [(set (match_operand:DI                       0 \"register_operand\" \"=r\")\n \t(sign_extend:DI\n-\t  (subreg:SI (mult:DI (match_operand:DI 1 \"register_operand\" \" r\")\n-\t\t\t      (match_operand:DI 2 \"register_operand\" \" r\"))\n-\t\t     0)))]\n+\t  (match_operator:SI 3 \"subreg_lowpart_operator\"\n+\t    [(mult:DI (match_operand:DI 1 \"register_operand\" \" r\")\n+\t\t      (match_operand:DI 2 \"register_operand\" \" r\"))])))]\n   \"TARGET_MUL && TARGET_64BIT\"\n   \"mulw\\t%0,%1,%2\"\n   [(set_attr \"type\" \"imul\")\n@@ -1591,10 +1591,10 @@\n   [(set (match_operand:SI     0 \"register_operand\" \"= r\")\n \t(any_shift:SI\n \t    (match_operand:SI 1 \"register_operand\" \"  r\")\n-\t    (subreg:QI\n-\t     (and:SI\n-\t      (match_operand:SI 2 \"register_operand\"  \"r\")\n-\t      (match_operand 3 \"const_int_operand\")) 0)))]\n+\t    (match_operator 4 \"subreg_lowpart_operator\"\n+\t     [(and:SI\n+\t       (match_operand:SI 2 \"register_operand\"  \"r\")\n+\t       (match_operand 3 \"const_int_operand\"))])))]\n   \"(INTVAL (operands[3]) & (GET_MODE_BITSIZE (SImode)-1))\n    == GET_MODE_BITSIZE (SImode)-1\"\n   \"#\"\n@@ -1610,10 +1610,10 @@\n   [(set (match_operand:SI     0 \"register_operand\" \"= r\")\n \t(any_shift:SI\n \t    (match_operand:SI 1 \"register_operand\" \"  r\")\n-\t    (subreg:QI\n-\t     (and:DI\n-\t      (match_operand:DI 2 \"register_operand\"  \"r\")\n-\t      (match_operand 3 \"const_int_operand\")) 0)))]\n+\t    (match_operator 4 \"subreg_lowpart_operator\"\n+\t     [(and:DI\n+\t       (match_operand:DI 2 \"register_operand\"  \"r\")\n+\t       (match_operand 3 \"const_int_operand\"))])))]\n   \"TARGET_64BIT\n    && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (SImode)-1))\n        == GET_MODE_BITSIZE (SImode)-1\"\n@@ -1646,10 +1646,10 @@\n   [(set (match_operand:DI     0 \"register_operand\" \"= r\")\n \t(any_shift:DI\n \t    (match_operand:DI 1 \"register_operand\" \"  r\")\n-\t    (subreg:QI\n-\t     (and:SI\n-\t      (match_operand:SI 2 \"register_operand\"  \"r\")\n-\t      (match_operand 3 \"const_int_operand\")) 0)))]\n+\t    (match_operator 4 \"subreg_lowpart_operator\"\n+\t     [(and:SI\n+\t       (match_operand:SI 2 \"register_operand\"  \"r\")\n+\t       (match_operand 3 \"const_int_operand\"))])))]\n   \"TARGET_64BIT\n    && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (DImode)-1))\n        == GET_MODE_BITSIZE (DImode)-1\"\n@@ -1666,10 +1666,10 @@\n   [(set (match_operand:DI     0 \"register_operand\" \"= r\")\n \t(any_shift:DI\n \t    (match_operand:DI 1 \"register_operand\" \"  r\")\n-\t    (subreg:QI\n-\t     (and:DI\n-\t      (match_operand:DI 2 \"register_operand\"  \"r\")\n-\t      (match_operand 3 \"const_int_operand\")) 0)))]\n+\t    (match_operator 4 \"subreg_lowpart_operator\"\n+\t     [(and:DI\n+\t       (match_operand:DI 2 \"register_operand\"  \"r\")\n+\t       (match_operand 3 \"const_int_operand\"))])))]\n   \"TARGET_64BIT\n    && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (DImode)-1))\n        == GET_MODE_BITSIZE (DImode)-1\"\n@@ -1702,10 +1702,10 @@\n \t(sign_extend:DI\n \t    (any_shift:SI\n \t     (match_operand:SI 1 \"register_operand\" \"  r\")\n-\t     (subreg:QI\n-\t      (and:SI\n-\t       (match_operand:SI 2 \"register_operand\" \" r\")\n-\t       (match_operand 3 \"const_int_operand\")) 0))))]\n+\t     (match_operator 4 \"subreg_lowpart_operator\"\n+\t      [(and:SI\n+\t        (match_operand:SI 2 \"register_operand\" \" r\")\n+\t        (match_operand 3 \"const_int_operand\"))]))))]\n   \"TARGET_64BIT\n    && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (SImode)-1))\n        == GET_MODE_BITSIZE (SImode)-1\"\n@@ -1724,10 +1724,10 @@\n \t(sign_extend:DI\n \t    (any_shift:SI\n \t     (match_operand:SI 1 \"register_operand\" \"  r\")\n-\t     (subreg:QI\n-\t      (and:DI\n-\t       (match_operand:DI 2 \"register_operand\" \" r\")\n-\t       (match_operand 3 \"const_int_operand\")) 0))))]\n+\t     (match_operator 4 \"subreg_lowpart_operator\"\n+\t      [(and:DI\n+\t        (match_operand:DI 2 \"register_operand\" \" r\")\n+\t        (match_operand 3 \"const_int_operand\"))]))))]\n   \"TARGET_64BIT\n    && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (SImode)-1))\n        == GET_MODE_BITSIZE (SImode)-1\""}]}