{"sha": "c8580138b04cb4f8167a7dd2f7240479a5d45ffa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg1ODAxMzhiMDRjYjRmODE2N2E3ZGQyZjcyNDA0NzlhNWQ0NWZmYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-09-12T18:05:03Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-09-12T18:05:03Z"}, "message": "pt.c (type_unification_real): Fix handling of DEDUCE_CONV with no deducible template parameters.\n\n\t* pt.c (type_unification_real): Fix handling of DEDUCE_CONV\n\twith no deducible template parameters.\n\t* call.c (rejection_reason_code): Add rr_template_conversion.\n\t(print_z_candidate): Handle it.\n\t(template_conversion_rejection): New.\n\t(build_user_type_conversion_1): Use it.\n\nFrom-SVN: r178791", "tree": {"sha": "3c2dfa16f342d9600137880ae0596723c88a36ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c2dfa16f342d9600137880ae0596723c88a36ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8580138b04cb4f8167a7dd2f7240479a5d45ffa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8580138b04cb4f8167a7dd2f7240479a5d45ffa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8580138b04cb4f8167a7dd2f7240479a5d45ffa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8580138b04cb4f8167a7dd2f7240479a5d45ffa/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "940023f4baf01438669c2316bc0e25eb73c9cf19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/940023f4baf01438669c2316bc0e25eb73c9cf19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/940023f4baf01438669c2316bc0e25eb73c9cf19"}], "stats": {"total": 66, "additions": 60, "deletions": 6}, "files": [{"sha": "6b6c36da4ec8cc441a01daeba06db0507bb3e086", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8580138b04cb4f8167a7dd2f7240479a5d45ffa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8580138b04cb4f8167a7dd2f7240479a5d45ffa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c8580138b04cb4f8167a7dd2f7240479a5d45ffa", "patch": "@@ -1,5 +1,12 @@\n 2011-09-12  Jason Merrill  <jason@redhat.com>\n \n+\t* pt.c (type_unification_real): Fix handling of DEDUCE_CONV\n+\twith no deducible template parameters.\n+\t* call.c (rejection_reason_code): Add rr_template_conversion.\n+\t(print_z_candidate): Handle it.\n+\t(template_conversion_rejection): New.\n+\t(build_user_type_conversion_1): Use it.\n+\n \t* call.c (merge_conversion_sequences): Set bad_p and user_conv_p\n \ton all of the second conversion sequence.\n \t(build_user_type_conversion_1): Set bad_p on the ck_user conv."}, {"sha": "81df80ed88ecd093d7488a2781cf13a8d6acc567", "filename": "gcc/cp/call.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8580138b04cb4f8167a7dd2f7240479a5d45ffa/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8580138b04cb4f8167a7dd2f7240479a5d45ffa/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=c8580138b04cb4f8167a7dd2f7240479a5d45ffa", "patch": "@@ -432,6 +432,7 @@ enum rejection_reason_code {\n   rr_none,\n   rr_arity,\n   rr_explicit_conversion,\n+  rr_template_conversion,\n   rr_arg_conversion,\n   rr_bad_arg_conversion,\n   rr_template_unification,\n@@ -653,6 +654,16 @@ explicit_conversion_rejection (tree from, tree to)\n   return r;\n }\n \n+static struct rejection_reason *\n+template_conversion_rejection (tree from, tree to)\n+{\n+  struct rejection_reason *r = alloc_rejection (rr_template_conversion);\n+  r->u.conversion.n_arg = 0;\n+  r->u.conversion.from_type = from;\n+  r->u.conversion.to_type = to;\n+  return r;\n+}\n+\n static struct rejection_reason *\n template_unification_rejection (tree tmpl, tree explicit_targs, tree targs,\n \t\t\t\tconst tree *args, unsigned int nargs,\n@@ -3135,6 +3146,12 @@ print_z_candidate (const char *msgstr, struct z_candidate *candidate)\n \t\t  \"conversion\", r->u.conversion.from_type,\n \t\t  r->u.conversion.to_type);\n \t  break;\n+\tcase rr_template_conversion:\n+\t  inform (loc, \"  conversion from return type %qT of template \"\n+\t\t  \"conversion function specialization to %qT is not an \"\n+\t\t  \"exact match\", r->u.conversion.from_type,\n+\t\t  r->u.conversion.to_type);\n+\t  break;\n \tcase rr_template_unification:\n \t  /* We use template_unification_error_rejection if unification caused\n \t     actual non-SFINAE errors, in which case we don't need to repeat\n@@ -3495,6 +3512,16 @@ build_user_type_conversion_1 (tree totype, tree expr, int flags)\n \t\t= bad_arg_conversion_rejection (NULL_TREE, -1,\n \t\t\t\t\t\trettype, totype);\n \t    }\n+\t  else if (primary_template_instantiation_p (cand->fn)\n+\t\t   && ics->rank > cr_exact)\n+\t    {\n+\t      /* 13.3.3.1.2: If the user-defined conversion is specified by\n+\t\t a specialization of a conversion function template, the\n+\t\t second standard conversion sequence shall have exact match\n+\t\t rank.  */\n+\t      cand->viable = -1;\n+\t      cand->reason = template_conversion_rejection (rettype, totype);\n+\t    }\n \t}\n     }\n "}, {"sha": "9a5e3ddf13bbd930fb986231b6190f2fbe6d9894", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8580138b04cb4f8167a7dd2f7240479a5d45ffa/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8580138b04cb4f8167a7dd2f7240479a5d45ffa/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c8580138b04cb4f8167a7dd2f7240479a5d45ffa", "patch": "@@ -14709,10 +14709,18 @@ type_unification_real (tree tparms,\n \n \t  if (same_type_p (parm, type))\n \t    continue;\n-\t  if (strict != DEDUCE_EXACT\n-\t      && can_convert_arg (parm, type, TYPE_P (arg) ? NULL_TREE : arg,\n-\t\t\t\t  flags))\n-\t    continue;\n+\t  if (strict == DEDUCE_CONV)\n+\t    {\n+\t      if (can_convert_arg (type, parm, NULL_TREE, flags))\n+\t\tcontinue;\n+\t    }\n+\t  else if (strict != DEDUCE_EXACT)\n+\t    {\n+\t      if (can_convert_arg (parm, type,\n+\t\t\t\t   TYPE_P (arg) ? NULL_TREE : arg,\n+\t\t\t\t   flags))\n+\t\tcontinue;\n+\t    }\n \n \t  if (strict == DEDUCE_EXACT)\n \t    return unify_type_mismatch (explain_p, parm, arg);"}, {"sha": "dde09f5773fd21e47eb769a78d9cb566a9138082", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8580138b04cb4f8167a7dd2f7240479a5d45ffa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8580138b04cb4f8167a7dd2f7240479a5d45ffa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c8580138b04cb4f8167a7dd2f7240479a5d45ffa", "patch": "@@ -1,5 +1,7 @@\n 2011-09-12  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/fntmpdefarg2.C: Add more tests.\n+\n \t* g++.dg/cpp0x/explicit7.C: New.\n \n 2011-09-12  Jakub Jelinek  <jakub@redhat.com>"}, {"sha": "d94843c1fe5687d561fc2c300d7a288544d56fcf", "filename": "gcc/testsuite/g++.dg/cpp0x/fntmpdefarg2.C", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8580138b04cb4f8167a7dd2f7240479a5d45ffa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffntmpdefarg2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8580138b04cb4f8167a7dd2f7240479a5d45ffa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffntmpdefarg2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffntmpdefarg2.C?ref=c8580138b04cb4f8167a7dd2f7240479a5d45ffa", "patch": "@@ -4,11 +4,21 @@\n struct B { };\n struct D : B { };\n struct A {\n-  template<typename T = void> operator D&();\n+  template<typename T = void> operator D&(); // { dg-message \"template conversion\" }\n   operator long();\n };\n \n void f(long);\n void f(B&);\n \n-int main() { f(A()); }\n+struct A2 {\n+  template<typename T = void> operator B&();\n+};\n+\n+void f2(const B&);\n+\n+int main() {\n+  f(A());\n+  f2(A2());\n+  f2(A());\t\t\t// { dg-error \"\" }\n+}"}]}