{"sha": "9804d4ecb057dfad2d03387c7b4b8c9e8d3cb04f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgwNGQ0ZWNiMDU3ZGZhZDJkMDMzODdjN2I0YjhjOWU4ZDNjYjA0Zg==", "commit": {"author": {"name": "Chao-ying Fu", "email": "fu@mips.com", "date": "2010-11-05T00:28:54Z"}, "committer": {"name": "Chao-ying Fu", "email": "chaoyingfu@gcc.gnu.org", "date": "2010-11-05T00:28:54Z"}, "message": "mips32-dsp.c: Add tests for madd, maddu, msub, msubu, mult, multu.\n\n2010-11-04  Chao-ying Fu  <fu@mips.com>\n\n\t* gcc.target/mips/mips32-dsp.c: Add tests for madd, maddu, msub,\n\tmsubu, mult, multu.\n\t* gcc.target/mips/mips32-dsp-run.c: Likewise.\n\nFrom-SVN: r166345", "tree": {"sha": "283d1650ff16e2f0f6480220249823e0fa6ffb03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/283d1650ff16e2f0f6480220249823e0fa6ffb03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9804d4ecb057dfad2d03387c7b4b8c9e8d3cb04f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9804d4ecb057dfad2d03387c7b4b8c9e8d3cb04f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9804d4ecb057dfad2d03387c7b4b8c9e8d3cb04f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9804d4ecb057dfad2d03387c7b4b8c9e8d3cb04f/comments", "author": null, "committer": null, "parents": [{"sha": "293b77b0578cf252c527d325913f08eadde5e2d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/293b77b0578cf252c527d325913f08eadde5e2d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/293b77b0578cf252c527d325913f08eadde5e2d5"}], "stats": {"total": 132, "additions": 132, "deletions": 0}, "files": [{"sha": "7bac010f78a330e5a4d6127e57453a5044fff0f7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9804d4ecb057dfad2d03387c7b4b8c9e8d3cb04f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9804d4ecb057dfad2d03387c7b4b8c9e8d3cb04f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9804d4ecb057dfad2d03387c7b4b8c9e8d3cb04f", "patch": "@@ -1,3 +1,9 @@\n+2010-11-04  Chao-ying Fu  <fu@mips.com>\n+\n+\t* gcc.target/mips/mips32-dsp.c: Add tests for madd, maddu, msub,\n+\tmsubu, mult, multu.\n+\t* gcc.target/mips/mips32-dsp-run.c: Likewise.\n+\n 2010-11-04  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tFixed using the Objective-C 2.0 dot-syntax with class names."}, {"sha": "ccbdef553ee086f1a8d04be038e7e51c794ff961", "filename": "gcc/testsuite/gcc.target/mips/mips32-dsp-run.c", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9804d4ecb057dfad2d03387c7b4b8c9e8d3cb04f/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips32-dsp-run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9804d4ecb057dfad2d03387c7b4b8c9e8d3cb04f/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips32-dsp-run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips32-dsp-run.c?ref=9804d4ecb057dfad2d03387c7b4b8c9e8d3cb04f", "patch": "@@ -10,6 +10,7 @@ typedef short v2q15 __attribute__ ((vector_size(4)));\n \n typedef int q31;\n typedef int i32;\n+typedef unsigned int ui32;\n typedef long long a64;\n \n NOMIPS16 void test_MIPS_DSP (void);\n@@ -59,6 +60,7 @@ NOMIPS16 void test_MIPS_DSP ()\n   v2q15 v2q15_a,v2q15_b,v2q15_c,v2q15_r,v2q15_s;\n   q31 q31_a,q31_b,q31_c,q31_r,q31_s;\n   i32 i32_a,i32_b,i32_c,i32_r,i32_s;\n+  ui32 ui32_a,ui32_b,ui32_c;\n   a64 a64_a,a64_b,a64_c,a64_r,a64_s;\n \n   void *ptr_a;\n@@ -997,5 +999,63 @@ NOMIPS16 void test_MIPS_DSP ()\n   i32_r = __builtin_mips_bposge32 ();\n   if (i32_r != i32_s)\n     abort ();\n+\n+#ifndef __mips64\n+  a64_a = 0x12345678;\n+  i32_b = 0x80000000;\n+  i32_c = 0x11112222;\n+  a64_s = 0xF7776EEF12345678LL;\n+  a64_r = __builtin_mips_madd (a64_a, i32_b, i32_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+#endif\n+\n+#ifndef __mips64\n+  a64_a = 0x12345678;\n+  ui32_b = 0x80000000;\n+  ui32_c = 0x11112222;\n+  a64_s = 0x0888911112345678LL;\n+  a64_r = __builtin_mips_maddu (a64_a, ui32_b, ui32_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+#endif\n+\n+#ifndef __mips64\n+  a64_a = 0x12345678;\n+  i32_b = 0x80000000;\n+  i32_c = 0x11112222;\n+  a64_s = 0x0888911112345678LL;\n+  a64_r = __builtin_mips_msub (a64_a, i32_b, i32_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+#endif\n+\n+#ifndef __mips64\n+  a64_a = 0x12345678;\n+  ui32_b = 0x80000000;\n+  ui32_c = 0x11112222;\n+  a64_s = 0xF7776EEF12345678LL;\n+  a64_r = __builtin_mips_msubu (a64_a, ui32_b, ui32_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+#endif\n+\n+#ifndef __mips64\n+  i32_a = 0x80000000;\n+  i32_b = 0x11112222;\n+  a64_s = 0xF7776EEF00000000LL;\n+  a64_r = __builtin_mips_mult (i32_a, i32_b);\n+  if (a64_r != a64_s)\n+    abort ();\n+#endif\n+\n+#ifndef __mips64\n+  ui32_a = 0x80000000;\n+  ui32_b = 0x11112222;\n+  a64_s = 0x888911100000000LL;\n+  a64_r = __builtin_mips_multu (ui32_a, ui32_b);\n+  if (a64_r != a64_s)\n+    abort ();\n+#endif\n }\n "}, {"sha": "c2a8ae7750511d29b3a132a412b767424acbaefd", "filename": "gcc/testsuite/gcc.target/mips/mips32-dsp.c", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9804d4ecb057dfad2d03387c7b4b8c9e8d3cb04f/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips32-dsp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9804d4ecb057dfad2d03387c7b4b8c9e8d3cb04f/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips32-dsp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips32-dsp.c?ref=9804d4ecb057dfad2d03387c7b4b8c9e8d3cb04f", "patch": "@@ -92,6 +92,12 @@\n /* { dg-final { scan-assembler \"lhx?\" } } */\n /* { dg-final { scan-assembler \"lwx?\" } } */\n /* { dg-final { scan-assembler \"bposge32\" } } */\n+/* { dg-final { scan-assembler \"madd\" } } */\n+/* { dg-final { scan-assembler \"maddu\" } } */\n+/* { dg-final { scan-assembler \"msub\" } } */\n+/* { dg-final { scan-assembler \"msubu\" } } */\n+/* { dg-final { scan-assembler \"mult\" } } */\n+/* { dg-final { scan-assembler \"multu\" } } */\n \n #include <stdlib.h>\n #include <stdio.h>\n@@ -101,6 +107,7 @@ typedef short v2q15 __attribute__ ((vector_size(4)));\n \n typedef int q31;\n typedef int i32;\n+typedef unsigned int ui32;\n typedef long long a64;\n \n NOMIPS16 void test_MIPS_DSP (void);\n@@ -150,6 +157,7 @@ NOMIPS16 void test_MIPS_DSP ()\n   v2q15 v2q15_a,v2q15_b,v2q15_c,v2q15_r,v2q15_s;\n   q31 q31_a,q31_b,q31_c,q31_r,q31_s;\n   i32 i32_a,i32_b,i32_c,i32_r,i32_s;\n+  ui32 ui32_a,ui32_b,ui32_c;\n   a64 a64_a,a64_b,a64_c,a64_r,a64_s;\n \n   void *ptr_a;\n@@ -1088,5 +1096,63 @@ NOMIPS16 void test_MIPS_DSP ()\n   i32_r = __builtin_mips_bposge32 ();\n   if (i32_r != i32_s)\n     abort ();\n+\n+#ifndef __mips64\n+  a64_a = 0x12345678;\n+  i32_b = 0x80000000;\n+  i32_c = 0x11112222;\n+  a64_s = 0xF7776EEF12345678LL;\n+  a64_r = __builtin_mips_madd (a64_a, i32_b, i32_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+#endif\n+\n+#ifndef __mips64\n+  a64_a = 0x12345678;\n+  ui32_b = 0x80000000;\n+  ui32_c = 0x11112222;\n+  a64_s = 0x0888911112345678LL;\n+  a64_r = __builtin_mips_maddu (a64_a, ui32_b, ui32_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+#endif\n+\n+#ifndef __mips64\n+  a64_a = 0x12345678;\n+  i32_b = 0x80000000;\n+  i32_c = 0x11112222;\n+  a64_s = 0x0888911112345678LL;\n+  a64_r = __builtin_mips_msub (a64_a, i32_b, i32_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+#endif\n+\n+#ifndef __mips64\n+  a64_a = 0x12345678;\n+  ui32_b = 0x80000000;\n+  ui32_c = 0x11112222;\n+  a64_s = 0xF7776EEF12345678LL;\n+  a64_r = __builtin_mips_msubu (a64_a, ui32_b, ui32_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+#endif\n+\n+#ifndef __mips64\n+  i32_a = 0x80000000;\n+  i32_b = 0x11112222;\n+  a64_s = 0xF7776EEF00000000LL;\n+  a64_r = __builtin_mips_mult (i32_a, i32_b);\n+  if (a64_r != a64_s)\n+    abort ();\n+#endif\n+\n+#ifndef __mips64\n+  ui32_a = 0x80000000;\n+  ui32_b = 0x11112222;\n+  a64_s = 0x888911100000000LL;\n+  a64_r = __builtin_mips_multu (ui32_a, ui32_b);\n+  if (a64_r != a64_s)\n+    abort ();\n+#endif\n }\n "}]}