{"sha": "27746ca994d4be2819fd4066217b1f6394cd4646", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc3NDZjYTk5NGQ0YmUyODE5ZmQ0MDY2MjE3YjFmNjM5NGNkNDY0Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-09-29T07:49:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-09-29T07:49:15Z"}, "message": "parser.c (cp_parser_member_declaration): Parse attributes before colon of a bitfield in addition to after colon.\n\ncp/\n\t* parser.c (cp_parser_member_declaration): Parse attributes before\n\tcolon of a bitfield in addition to after colon.\ntestsuite/\n\t* g++.dg/ext/bitfield7.C: New test.\n\t* g++.dg/ext/bitfield8.C: New test.\n\t* g++.dg/ext/bitfield9.C: New test.\n\nFrom-SVN: r253281", "tree": {"sha": "40968ed42dfe1d67b0df42c1ad2ffb77fa8ddcd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40968ed42dfe1d67b0df42c1ad2ffb77fa8ddcd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27746ca994d4be2819fd4066217b1f6394cd4646", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27746ca994d4be2819fd4066217b1f6394cd4646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27746ca994d4be2819fd4066217b1f6394cd4646", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27746ca994d4be2819fd4066217b1f6394cd4646/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2a38995899548c685e8bd794f79c5aad80fc6ef0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a38995899548c685e8bd794f79c5aad80fc6ef0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a38995899548c685e8bd794f79c5aad80fc6ef0"}], "stats": {"total": 96, "additions": 85, "deletions": 11}, "files": [{"sha": "95110b87c3c2df68f9acf3d651e037ec7f14e89d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27746ca994d4be2819fd4066217b1f6394cd4646/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27746ca994d4be2819fd4066217b1f6394cd4646/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=27746ca994d4be2819fd4066217b1f6394cd4646", "patch": "@@ -1,5 +1,8 @@\n 2017-09-29  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* parser.c (cp_parser_member_declaration): Parse attributes before\n+\tcolon of a bitfield in addition to after colon.\n+\n \t* Make-lang.in (check-c++-all): Test also c++2a.\n \n 2017-09-28  Jason Merrill  <jason@redhat.com>"}, {"sha": "71c27a40ce2c18f86fe9f86d692687d59d6cec5e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 44, "deletions": 11, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27746ca994d4be2819fd4066217b1f6394cd4646/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27746ca994d4be2819fd4066217b1f6394cd4646/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=27746ca994d4be2819fd4066217b1f6394cd4646", "patch": "@@ -23445,35 +23445,68 @@ cp_parser_member_declaration (cp_parser* parser)\n \t{\n \t  tree attributes = NULL_TREE;\n \t  tree first_attribute;\n+\t  bool is_bitfld = false;\n+\t  bool named_bitfld = false;\n \n \t  /* Peek at the next token.  */\n \t  token = cp_lexer_peek_token (parser->lexer);\n \n+\t  /* The following code wants to know early if it is a bit-field\n+\t     or some other declaration.  Attributes can appear before\n+\t     the `:' token, but are hopefully rare enough that the\n+\t     simplicity of the tentative lookup pays off.  */\n+\t  if (cp_next_tokens_can_be_attribute_p (parser)\n+\t      || (token->type == CPP_NAME\n+\t\t  && cp_nth_tokens_can_be_attribute_p (parser, 2)\n+\t\t  && (named_bitfld = true)))\n+\t    {\n+\t      cp_parser_parse_tentatively (parser);\n+\t      if (named_bitfld)\n+\t\tcp_lexer_consume_token (parser->lexer);\n+\t      cp_parser_attributes_opt (parser);\n+\t      token = cp_lexer_peek_token (parser->lexer);\n+\t      is_bitfld = cp_lexer_next_token_is (parser->lexer, CPP_COLON);\n+\t      cp_parser_abort_tentative_parse (parser);\n+\t    }\n+\n \t  /* Check for a bitfield declaration.  */\n-\t  if (token->type == CPP_COLON\n+\t  if (is_bitfld\n+\t      || token->type == CPP_COLON\n \t      || (token->type == CPP_NAME\n-\t\t  && cp_lexer_peek_nth_token (parser->lexer, 2)->type\n-\t\t  == CPP_COLON))\n+\t\t  && cp_lexer_nth_token_is (parser->lexer, 2, CPP_COLON)\n+\t\t  && (named_bitfld = true)))\n \t    {\n \t      tree identifier;\n \t      tree width;\n+\t      tree late_attributes = NULL_TREE;\n \n-\t      /* Get the name of the bitfield.  Note that we cannot just\n-\t\t check TOKEN here because it may have been invalidated by\n-\t\t the call to cp_lexer_peek_nth_token above.  */\n-\t      if (cp_lexer_peek_token (parser->lexer)->type != CPP_COLON)\n+\t      if (named_bitfld)\n \t\tidentifier = cp_parser_identifier (parser);\n \t      else\n \t\tidentifier = NULL_TREE;\n \n+\t      /* Look for attributes that apply to the bitfield.  */\n+\t      attributes = cp_parser_attributes_opt (parser);\n+\n \t      /* Consume the `:' token.  */\n \t      cp_lexer_consume_token (parser->lexer);\n+\n \t      /* Get the width of the bitfield.  */\n-\t      width\n-\t\t= cp_parser_constant_expression (parser);\n+\t      width = cp_parser_constant_expression (parser);\n+\n+\t      /* Look for attributes that apply to the bitfield after\n+\t\t the `:' token and width.  This is where GCC used to\n+\t\t parse attributes in the past, pedwarn if there is\n+\t\t a std attribute.  */\n+\t      if (cp_next_tokens_can_be_std_attribute_p (parser))\n+\t\tpedwarn (input_location, OPT_Wpedantic,\n+\t\t\t \"ISO C++ allows bit-field attributes only before \"\n+\t\t\t \"the %<:%> token\");\n+\n+\t      late_attributes = cp_parser_attributes_opt (parser);\n+\n+\t      attributes = chainon (attributes, late_attributes);\n \n-\t      /* Look for attributes that apply to the bitfield.  */\n-\t      attributes = cp_parser_attributes_opt (parser);\n \t      /* Remember which attributes are prefix attributes and\n \t\t which are not.  */\n \t      first_attribute = attributes;"}, {"sha": "0d637c8deabd8ab523acf34d8ecb4e5b8e8e7a15", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27746ca994d4be2819fd4066217b1f6394cd4646/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27746ca994d4be2819fd4066217b1f6394cd4646/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=27746ca994d4be2819fd4066217b1f6394cd4646", "patch": "@@ -1,5 +1,9 @@\n 2017-09-29  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* g++.dg/ext/bitfield7.C: New test.\n+\t* g++.dg/ext/bitfield8.C: New test.\n+\t* g++.dg/ext/bitfield9.C: New test.\n+\n \tPR c/82340\n \t* gcc.dg/tree-ssa/pr82340.c: New test.\n "}, {"sha": "4efc9bf2d042cfb845eba8a5e9447c37a377146d", "filename": "gcc/testsuite/g++.dg/ext/bitfield7.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27746ca994d4be2819fd4066217b1f6394cd4646/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbitfield7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27746ca994d4be2819fd4066217b1f6394cd4646/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbitfield7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbitfield7.C?ref=27746ca994d4be2819fd4066217b1f6394cd4646", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+/* { dg-options \"-Wno-packed-bitfield-compat -mno-ms-bitfields\" { target { i?86-*-mingw* x86_64-*-mingw* } } } */\n+\n+struct t /* { dg-message \"note: offset of packed bit-field 't::b' has changed in GCC 4.4\" \"\" { target pcc_bitfield_type_matters } } */\n+{\n+  char a:4;\n+  char b __attribute__ ((packed)) : 8;\n+  char c:4;\n+};\n+\n+int assrt[sizeof (struct t) == 2 ? 1 : -1];"}, {"sha": "688b28988f5fbe936d6ccb8f1f6710b14b04af9b", "filename": "gcc/testsuite/g++.dg/ext/bitfield8.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27746ca994d4be2819fd4066217b1f6394cd4646/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbitfield8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27746ca994d4be2819fd4066217b1f6394cd4646/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbitfield8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbitfield8.C?ref=27746ca994d4be2819fd4066217b1f6394cd4646", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target c++11 } } */\n+/* { dg-options \"\" } */\n+/* { dg-options \"-Wno-packed-bitfield-compat -mno-ms-bitfields\" { target { i?86-*-mingw* x86_64-*-mingw* } } } */\n+\n+struct t /* { dg-message \"note: offset of packed bit-field 't::b' has changed in GCC 4.4\" \"\" { target pcc_bitfield_type_matters } } */\n+{\n+  char a:4;\n+  char b [[gnu::packed]] : 8;\n+  char c:4;\n+};\n+\n+int assrt[sizeof (struct t) == 2 ? 1 : -1];"}, {"sha": "4a4ebf23c1fb5eca37c3b8a5370577f7028356ae", "filename": "gcc/testsuite/g++.dg/ext/bitfield9.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27746ca994d4be2819fd4066217b1f6394cd4646/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbitfield9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27746ca994d4be2819fd4066217b1f6394cd4646/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbitfield9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbitfield9.C?ref=27746ca994d4be2819fd4066217b1f6394cd4646", "patch": "@@ -0,0 +1,10 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-pedantic\" }\n+\n+struct S\n+{\n+  char a:4;\n+  char b:8 alignas(int);\t// { dg-warning \"ISO C\\\\+\\\\+ allows bit-field attributes only before the ':' token\" }\n+  char c:8 [[gnu::aligned(8)]];\t// { dg-warning \"ISO C\\\\+\\\\+ allows bit-field attributes only before the ':' token\" }\n+\t\t\t\t// { dg-error \"two consecutive '\\\\\\[' shall only introduce an attribute before '\\\\\\[' token\" \"\" { target *-*-* } .-1 }\n+};"}]}