{"sha": "d0234c7ea568a43931259a649dfc1bb2bf6e4d93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAyMzRjN2VhNTY4YTQzOTMxMjU5YTY0OWRmYzFiYjJiZjZlNGQ5Mw==", "commit": {"author": {"name": "Joel Sherrill", "email": "joel.sherrill@oarcorp.com", "date": "2011-12-02T15:17:14Z"}, "committer": {"name": "Joel Sherrill", "email": "joel@gcc.gnu.org", "date": "2011-12-02T15:17:14Z"}, "message": "s-tpopsp-rtems.adb: Use ATCB_Key rather than RTEMS_Ada_Self variable for consistency with other ports.\n\n2011-12-02  Joel Sherrill <joel.sherrill@oarcorp.com>\n\n\t* s-tpopsp-rtems.adb: Use ATCB_Key rather than RTEMS_Ada_Self variable\n\tfor consistency with other ports.\n\t* s-osinte-rtems.adb: Add body for dummy implementation of\n\tpthread_rwlockattr_setkind_np().\n\t* s-osinte-rtems.ads: Add missing clock and rwlock bindings.\n\t* terminals.c: Add __rtems__ conditionals to account for differences\n\tin termios implementation.\n\nFrom-SVN: r181924", "tree": {"sha": "5b3c66b9ef6c2e3f6a5abc3d00b5bd78c86f5158", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b3c66b9ef6c2e3f6a5abc3d00b5bd78c86f5158"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0234c7ea568a43931259a649dfc1bb2bf6e4d93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0234c7ea568a43931259a649dfc1bb2bf6e4d93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0234c7ea568a43931259a649dfc1bb2bf6e4d93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0234c7ea568a43931259a649dfc1bb2bf6e4d93/comments", "author": {"login": "joelsherrill", "id": 183688, "node_id": "MDQ6VXNlcjE4MzY4OA==", "avatar_url": "https://avatars.githubusercontent.com/u/183688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joelsherrill", "html_url": "https://github.com/joelsherrill", "followers_url": "https://api.github.com/users/joelsherrill/followers", "following_url": "https://api.github.com/users/joelsherrill/following{/other_user}", "gists_url": "https://api.github.com/users/joelsherrill/gists{/gist_id}", "starred_url": "https://api.github.com/users/joelsherrill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joelsherrill/subscriptions", "organizations_url": "https://api.github.com/users/joelsherrill/orgs", "repos_url": "https://api.github.com/users/joelsherrill/repos", "events_url": "https://api.github.com/users/joelsherrill/events{/privacy}", "received_events_url": "https://api.github.com/users/joelsherrill/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d600ef1636fda28b2e8612253b7ab1a04066af0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d600ef1636fda28b2e8612253b7ab1a04066af0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d600ef1636fda28b2e8612253b7ab1a04066af0e"}], "stats": {"total": 110, "additions": 90, "deletions": 20}, "files": [{"sha": "924c5544b50b8feb42f75a9816000b3b4586b60b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0234c7ea568a43931259a649dfc1bb2bf6e4d93/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0234c7ea568a43931259a649dfc1bb2bf6e4d93/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d0234c7ea568a43931259a649dfc1bb2bf6e4d93", "patch": "@@ -1,3 +1,13 @@\n+2011-12-02  Joel Sherrill <joel.sherrill@oarcorp.com>\n+\n+\t* s-tpopsp-rtems.adb: Use ATCB_Key rather than RTEMS_Ada_Self variable\n+\tfor consistency with other ports.\n+\t* s-osinte-rtems.adb: Add body for dummy implementation of\n+\tpthread_rwlockattr_setkind_np().\n+\t* s-osinte-rtems.ads: Add missing clock and rwlock bindings.\n+\t* terminals.c: Add __rtems__ conditionals to account for differences\n+\tin termios implementation.\n+\n 2011-12-02  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch3.adb, sem_attr.adb, a-comutr.adb, a-cbmutr.adb,"}, {"sha": "fc99ce4e8483f86a6098110041e2d7c014efa79d", "filename": "gcc/ada/s-osinte-rtems.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0234c7ea568a43931259a649dfc1bb2bf6e4d93/gcc%2Fada%2Fs-osinte-rtems.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0234c7ea568a43931259a649dfc1bb2bf6e4d93/gcc%2Fada%2Fs-osinte-rtems.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-rtems.adb?ref=d0234c7ea568a43931259a649dfc1bb2bf6e4d93", "patch": "@@ -122,4 +122,17 @@ package body System.OS_Interface is\n       return 0;\n    end sigaltstack;\n \n+   -----------------------------------\n+   -- pthread_rwlockattr_setkind_np --\n+   -----------------------------------\n+\n+   function pthread_rwlockattr_setkind_np\n+     (attr : access pthread_rwlockattr_t;\n+      pref : int) return int is\n+      pragma Unreferenced (attr);\n+      pragma Unreferenced (pref);\n+   begin\n+      return 0;\n+   end pthread_rwlockattr_setkind_np;\n+\n end System.OS_Interface;"}, {"sha": "8b9ae1297cdd3e3dfe6869a249abbbe6ee0e6fc9", "filename": "gcc/ada/s-osinte-rtems.ads", "status": "modified", "additions": 56, "deletions": 11, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0234c7ea568a43931259a649dfc1bb2bf6e4d93/gcc%2Fada%2Fs-osinte-rtems.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0234c7ea568a43931259a649dfc1bb2bf6e4d93/gcc%2Fada%2Fs-osinte-rtems.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-rtems.ads?ref=d0234c7ea568a43931259a649dfc1bb2bf6e4d93", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                   S p e c                                --\n --                                                                          --\n---          Copyright (C) 1997-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1997-2011 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -176,9 +176,10 @@ package System.OS_Interface is\n \n    type timespec is private;\n \n-   type clockid_t is private;\n+   type clockid_t is new int;\n \n-   CLOCK_REALTIME : constant clockid_t;\n+   CLOCK_REALTIME  : constant clockid_t;\n+   CLOCK_MONOTONIC : constant clockid_t;\n \n    function clock_gettime\n      (clock_id : clockid_t;\n@@ -236,12 +237,14 @@ package System.OS_Interface is\n    type pthread_t           is private;\n    subtype Thread_Id        is pthread_t;\n \n-   type pthread_mutex_t     is limited private;\n-   type pthread_cond_t      is limited private;\n-   type pthread_attr_t      is limited private;\n-   type pthread_mutexattr_t is limited private;\n-   type pthread_condattr_t  is limited private;\n-   type pthread_key_t       is private;\n+   type pthread_mutex_t      is limited private;\n+   type pthread_rwlock_t     is limited private;\n+   type pthread_cond_t       is limited private;\n+   type pthread_attr_t       is limited private;\n+   type pthread_mutexattr_t  is limited private;\n+   type pthread_rwlockattr_t is limited private;\n+   type pthread_condattr_t   is limited private;\n+   type pthread_key_t        is private;\n \n    No_Key : constant pthread_key_t;\n \n@@ -353,6 +356,40 @@ package System.OS_Interface is\n    function pthread_mutex_unlock (mutex : access pthread_mutex_t) return int;\n    pragma Import (C, pthread_mutex_unlock, \"pthread_mutex_unlock\");\n \n+   function pthread_rwlockattr_init\n+     (attr : access pthread_rwlockattr_t) return int;\n+   pragma Import (C, pthread_rwlockattr_init, \"pthread_rwlockattr_init\");\n+\n+   function pthread_rwlockattr_destroy\n+     (attr : access pthread_rwlockattr_t) return int;\n+   pragma Import (C, pthread_rwlockattr_destroy, \"pthread_rwlockattr_destroy\");\n+\n+   PTHREAD_RWLOCK_PREFER_READER_NP              : constant := 0;\n+   PTHREAD_RWLOCK_PREFER_WRITER_NP              : constant := 1;\n+   PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP : constant := 2;\n+\n+   function pthread_rwlockattr_setkind_np\n+     (attr : access pthread_rwlockattr_t;\n+      pref : int) return int;\n+\n+   function pthread_rwlock_init\n+     (mutex : access pthread_rwlock_t;\n+      attr  : access pthread_rwlockattr_t) return int;\n+   pragma Import (C, pthread_rwlock_init, \"pthread_rwlock_init\");\n+\n+   function pthread_rwlock_destroy\n+     (mutex : access pthread_rwlock_t) return int;\n+   pragma Import (C, pthread_rwlock_destroy, \"pthread_rwlock_destroy\");\n+\n+   function pthread_rwlock_rdlock (mutex : access pthread_rwlock_t) return int;\n+   pragma Import (C, pthread_rwlock_rdlock, \"pthread_rwlock_rdlock\");\n+\n+   function pthread_rwlock_wrlock (mutex : access pthread_rwlock_t) return int;\n+   pragma Import (C, pthread_rwlock_wrlock, \"pthread_rwlock_wrlock\");\n+\n+   function pthread_rwlock_unlock (mutex : access pthread_rwlock_t) return int;\n+   pragma Import (C, pthread_rwlock_unlock, \"pthread_rwlock_unlock\");\n+\n    function pthread_condattr_init\n      (attr : access pthread_condattr_t) return int;\n    pragma Import (C, pthread_condattr_init, \"pthread_condattr_init\");\n@@ -584,8 +621,8 @@ private\n    end record;\n    pragma Convention (C, timespec);\n \n-   type clockid_t is new rtems_id;\n-   CLOCK_REALTIME : constant clockid_t := 1;\n+   CLOCK_REALTIME :  constant clockid_t := 1;\n+   CLOCK_MONOTONIC : constant clockid_t := 4;\n \n    type pthread_attr_t is record\n       is_initialized  : int;\n@@ -616,10 +653,18 @@ private\n    end record;\n    pragma Convention (C, pthread_mutexattr_t);\n \n+   type pthread_rwlockattr_t is record\n+      is_initialized  : int;\n+      process_shared  : int;\n+   end record;\n+   pragma Convention (C, pthread_rwlockattr_t);\n+\n    type pthread_t is new rtems_id;\n \n    type pthread_mutex_t is new rtems_id;\n \n+   type pthread_rwlock_t is new rtems_id;\n+\n    type pthread_cond_t is new rtems_id;\n \n    type pthread_key_t is new rtems_id;"}, {"sha": "1d672b95324f9b17b7ab4b579adf9ca458207bea", "filename": "gcc/ada/s-tpopsp-rtems.adb", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0234c7ea568a43931259a649dfc1bb2bf6e4d93/gcc%2Fada%2Fs-tpopsp-rtems.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0234c7ea568a43931259a649dfc1bb2bf6e4d93/gcc%2Fada%2Fs-tpopsp-rtems.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpopsp-rtems.adb?ref=d0234c7ea568a43931259a649dfc1bb2bf6e4d93", "patch": "@@ -10,7 +10,7 @@\n --                             $Revision: 1.2 $\n --                                                                          --\n --            Copyright (C) 1991-2003, Florida State University             --\n---            Copyright (C) 2008, Free Software Foundation, Inc.            --\n+--            Copyright (C) 2008-2011, Free Software Foundation, Inc.       --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -48,8 +48,8 @@ package body Specific is\n    --  The following gives the Ada run-time direct access to a variable\n    --  context switched by RTEMS at the lowest level.\n \n-   RTEMS_Ada_Self : System.Address;\n-   pragma Import (C, RTEMS_Ada_Self, \"rtems_ada_self\");\n+   ATCB_Key : System.Address;\n+   pragma Import (C, ATCB_Key, \"rtems_ada_self\");\n \n    ----------------\n    -- Initialize --\n@@ -59,8 +59,7 @@ package body Specific is\n       pragma Warnings (Off, Environment_Task);\n \n    begin\n-      ATCB_Key := No_Key;\n-      RTEMS_Ada_Self := To_Address (Environment_Task);\n+      ATCB_Key := To_Address (Environment_Task);\n    end Initialize;\n \n    -------------------\n@@ -69,7 +68,7 @@ package body Specific is\n \n    function Is_Valid_Task return Boolean is\n    begin\n-      return RTEMS_Ada_Self /= System.Null_Address;\n+      return ATCB_Key /= System.Null_Address;\n    end Is_Valid_Task;\n \n    ---------\n@@ -78,7 +77,7 @@ package body Specific is\n \n    procedure Set (Self_Id : Task_Id) is\n    begin\n-      RTEMS_Ada_Self := To_Address (Self_Id);\n+      ATCB_Key := To_Address (Self_Id);\n    end Set;\n \n    ----------\n@@ -102,7 +101,7 @@ package body Specific is\n       Result : System.Address;\n \n    begin\n-      Result := RTEMS_Ada_Self;\n+      Result := ATCB_Key;\n \n       --  If the key value is Null, then it is a non-Ada task.\n "}, {"sha": "18a4f2a29bca2d157c74f219caf9515950702ae2", "filename": "gcc/ada/terminals.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0234c7ea568a43931259a649dfc1bb2bf6e4d93/gcc%2Fada%2Fterminals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0234c7ea568a43931259a649dfc1bb2bf6e4d93/gcc%2Fada%2Fterminals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fterminals.c?ref=d0234c7ea568a43931259a649dfc1bb2bf6e4d93", "patch": "@@ -991,7 +991,8 @@ __gnat_setup_winsize (void *desc, int rows, int columns)\n \n /* On some system termio is either absent or including it will disable termios\n    (HP-UX) */\n-#if ! defined (__hpux__) && ! defined (FREEBSD) && ! defined (__APPLE__)\n+#if ! defined (__hpux__) && ! defined (FREEBSD) && \\\n+    ! defined (__APPLE__) && ! defined(__rtems__)\n #   include <termio.h>\n #endif\n \n@@ -1142,10 +1143,12 @@ allocate_pty_desc (pty_desc **desc) {\n       return -1;\n     }\n \n+#if !defined(__rtems__)\n   /* grant access to the slave side */\n   grantpt (master_fd);\n   /* unlock the terminal */\n   unlockpt (master_fd);\n+#endif\n \n   /* set desc and return 0 */\n   result = malloc (sizeof (pty_desc));"}]}