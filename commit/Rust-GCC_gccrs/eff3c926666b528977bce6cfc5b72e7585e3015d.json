{"sha": "eff3c926666b528977bce6cfc5b72e7585e3015d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZmM2M5MjY2NjZiNTI4OTc3YmNlNmNmYzViNzJlNzU4NWUzMDE1ZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-03-07T04:45:05Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-03-07T04:45:05Z"}, "message": "ns32k-protos.h: Add a prototype for ns32k_notice_update_cc.\n\n\t* config/ns32k/ns32k-protos.h: Add a prototype for\n\tns32k_notice_update_cc.\n\t* config/ns32k/ns32k.c (ns32k_notice_update_cc): New.\n\t* config/ns32k/ns32k.h (NOTICE_UPDATE_CC): Call\n\tns32k_notice_update_cc.\n\nFrom-SVN: r79053", "tree": {"sha": "c571c0dd242d691e90b567d84790f2c2cdf59acb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c571c0dd242d691e90b567d84790f2c2cdf59acb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eff3c926666b528977bce6cfc5b72e7585e3015d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eff3c926666b528977bce6cfc5b72e7585e3015d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eff3c926666b528977bce6cfc5b72e7585e3015d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eff3c926666b528977bce6cfc5b72e7585e3015d/comments", "author": null, "committer": null, "parents": [{"sha": "22ea6b4f7f314c605f25fcd224c0efb9f39eaa6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22ea6b4f7f314c605f25fcd224c0efb9f39eaa6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22ea6b4f7f314c605f25fcd224c0efb9f39eaa6d"}], "stats": {"total": 126, "additions": 81, "deletions": 45}, "files": [{"sha": "4ca0747394288184f4b904f1f7a1c35cfad3cec5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff3c926666b528977bce6cfc5b72e7585e3015d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff3c926666b528977bce6cfc5b72e7585e3015d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eff3c926666b528977bce6cfc5b72e7585e3015d", "patch": "@@ -1,3 +1,11 @@\n+2004-03-06  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/ns32k/ns32k-protos.h: Add a prototype for\n+\tns32k_notice_update_cc.\n+\t* config/ns32k/ns32k.c (ns32k_notice_update_cc): New.\n+\t* config/ns32k/ns32k.h (NOTICE_UPDATE_CC): Call\n+\tns32k_notice_update_cc.\n+\n 2004-03-06  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.md (\"load_multiple\", \"*load_multiple_di\","}, {"sha": "76ab46de01e7d713f3246b0b3ebbd93c0bac1bd3", "filename": "gcc/config/ns32k/ns32k-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff3c926666b528977bce6cfc5b72e7585e3015d/gcc%2Fconfig%2Fns32k%2Fns32k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff3c926666b528977bce6cfc5b72e7585e3015d/gcc%2Fconfig%2Fns32k%2Fns32k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k-protos.h?ref=eff3c926666b528977bce6cfc5b72e7585e3015d", "patch": "@@ -34,6 +34,7 @@ extern void print_operand_address (FILE *, rtx);\n extern const char *output_move_double (rtx *);\n extern const char *output_shift_insn (rtx *);\n extern int symbolic_reference_mentioned_p (rtx);\n+extern void ns32k_notice_update_cc (rtx, rtx);\n #endif /* RTX_CODE */\n \n #ifdef TREE_CODE"}, {"sha": "0bfa7dd25598ce80907e9ed10957f416514494a2", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff3c926666b528977bce6cfc5b72e7585e3015d/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff3c926666b528977bce6cfc5b72e7585e3015d/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=eff3c926666b528977bce6cfc5b72e7585e3015d", "patch": "@@ -1568,3 +1568,74 @@ ns32k_struct_value_rtx (tree fntype ATTRIBUTE_UNUSED,\n {\n   return gen_rtx_REG (Pmode, NS32K_STRUCT_VALUE_REGNUM);\n }\n+\n+/* Worker function for NOTICE_UPDATE_CC.  */\n+\n+void\n+ns32k_notice_update_cc (rtx exp, rtx insn ATTRIBUTE_UNUSED)\n+{\n+  if (GET_CODE (exp) == SET)\n+    {\n+      if (GET_CODE (SET_DEST (exp)) == CC0)\n+\t{\n+\t  cc_status.flags = 0;\n+\t  cc_status.value1 = SET_DEST (exp);\n+\t  cc_status.value2 = SET_SRC (exp);\n+\t}\n+      else if (GET_CODE (SET_SRC (exp)) == CALL)\n+\t{\n+\t  CC_STATUS_INIT;\n+\t}\n+      else if (GET_CODE (SET_DEST (exp)) == REG)\n+\t{\n+\t  if (cc_status.value1\n+\t      && reg_overlap_mentioned_p (SET_DEST (exp), cc_status.value1))\n+\t    cc_status.value1 = 0;\n+\t  if (cc_status.value2\n+\t      && reg_overlap_mentioned_p (SET_DEST (exp), cc_status.value2))\n+\t    cc_status.value2 = 0;\n+\t}\n+      else if (GET_CODE (SET_DEST (exp)) == MEM)\n+\t{\n+\t  CC_STATUS_INIT;\n+\t}\n+    }\n+  else if (GET_CODE (exp) == PARALLEL\n+\t   && GET_CODE (XVECEXP (exp, 0, 0)) == SET)\n+    {\n+      if (GET_CODE (SET_DEST (XVECEXP (exp, 0, 0))) == CC0)\n+\t{\n+\t  cc_status.flags = 0;\n+\t  cc_status.value1 = SET_DEST (XVECEXP (exp, 0, 0));\n+\t  cc_status.value2 = SET_SRC (XVECEXP (exp, 0, 0));\n+\t}\n+      else if (GET_CODE (SET_DEST (XVECEXP (exp, 0, 0))) == REG)\n+\t{\n+\t  if (cc_status.value1\n+\t      && reg_overlap_mentioned_p (SET_DEST (XVECEXP (exp, 0, 0)),\n+\t\t\t\t\t  cc_status.value1))\n+\t    cc_status.value1 = 0;\n+\t  if (cc_status.value2\n+\t      && reg_overlap_mentioned_p (SET_DEST (XVECEXP (exp, 0, 0)),\n+\t\t\t\t\t  cc_status.value2))\n+\t    cc_status.value2 = 0;\n+\t}\n+      else if (GET_CODE (SET_DEST (XVECEXP (exp, 0, 0))) == MEM)\n+\t{\n+\t  CC_STATUS_INIT;\n+\t}\n+    }\n+  else if (GET_CODE (exp) == CALL)\n+    {\n+      /* all bets are off */\n+      CC_STATUS_INIT;\n+    }\n+  else\n+    {\n+      /* nothing happens? CC_STATUS_INIT; */\n+    }\n+  if (cc_status.value1 && GET_CODE (cc_status.value1) == REG\n+      && cc_status.value2\n+      && reg_overlap_mentioned_p (cc_status.value1, cc_status.value2))\n+    abort ();\n+}"}, {"sha": "b4b1455b859273c896dc42e20755d58b4eb02890", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 1, "deletions": 45, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff3c926666b528977bce6cfc5b72e7585e3015d/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff3c926666b528977bce6cfc5b72e7585e3015d/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=eff3c926666b528977bce6cfc5b72e7585e3015d", "patch": "@@ -1174,51 +1174,7 @@ __transfer_from_trampoline ()\t\t\\\n    Do not alter them if the instruction would not alter the cc's.  */\n \n #define NOTICE_UPDATE_CC(EXP, INSN) \\\n-{ if (GET_CODE (EXP) == SET)\t\t\t\t\t\\\n-    { if (GET_CODE (SET_DEST (EXP)) == CC0)\t\t\t\\\n-\t{ cc_status.flags = 0;\t\t\t\t\t\\\n-\t  cc_status.value1 = SET_DEST (EXP);\t\t\t\\\n-\t  cc_status.value2 = SET_SRC (EXP);\t\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-      else if (GET_CODE (SET_SRC (EXP)) == CALL)\t\t\\\n-\t{ CC_STATUS_INIT; }\t\t\t\t\t\\\n-      else if (GET_CODE (SET_DEST (EXP)) == REG)\t\t\\\n-\t{ if (cc_status.value1\t\t\t\t\t\\\n-\t      && reg_overlap_mentioned_p (SET_DEST (EXP), cc_status.value1)) \\\n-\t    cc_status.value1 = 0;\t\t\t\t\\\n-\t  if (cc_status.value2\t\t\t\t\t\\\n-\t      && reg_overlap_mentioned_p (SET_DEST (EXP), cc_status.value2)) \\\n-\t    cc_status.value2 = 0;\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-      else if (GET_CODE (SET_DEST (EXP)) == MEM)\t\t\\\n-\t{ CC_STATUS_INIT; }\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  else if (GET_CODE (EXP) == PARALLEL\t\t\t\t\\\n-\t   && GET_CODE (XVECEXP (EXP, 0, 0)) == SET)\t\t\\\n-    { if (GET_CODE (SET_DEST (XVECEXP (EXP, 0, 0))) == CC0)\t\\\n-\t{ cc_status.flags = 0;\t\t\t\t\t\\\n-\t  cc_status.value1 = SET_DEST (XVECEXP (EXP, 0, 0));\t\\\n-\t  cc_status.value2 = SET_SRC (XVECEXP (EXP, 0, 0));\t\\\n-\t}\t\t\t\t\t\t\t\\\n-      else if (GET_CODE (SET_DEST (XVECEXP (EXP, 0, 0))) == REG) \\\n-\t{ if (cc_status.value1\t\t\t\t\t\\\n-\t      && reg_overlap_mentioned_p (SET_DEST (XVECEXP (EXP, 0, 0)), cc_status.value1)) \\\n-\t    cc_status.value1 = 0;\t\t\t\t\\\n-\t  if (cc_status.value2\t\t\t\t\t\\\n-\t      && reg_overlap_mentioned_p (SET_DEST (XVECEXP (EXP, 0, 0)), cc_status.value2)) \\\n-\t    cc_status.value2 = 0;\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-      else if (GET_CODE (SET_DEST (XVECEXP (EXP, 0, 0))) == MEM) \\\n-\t{ CC_STATUS_INIT; }\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  else if (GET_CODE (EXP) == CALL)\t\t\t\t\\\n-    { /* all bets are off */ CC_STATUS_INIT; }\t\t\t\\\n-  else { /* nothing happens? CC_STATUS_INIT; */}\t\t\\\n-  if (cc_status.value1 && GET_CODE (cc_status.value1) == REG\t\\\n-      && cc_status.value2\t\t\t\t\t\\\n-      && reg_overlap_mentioned_p (cc_status.value1, cc_status.value2))\t\\\n-    abort ();\t\t\t\\\n-}\n+  ns32k_notice_update_cc ((EXP), (INSN))\n \n /* Describe the costs of the following register moves which are discouraged:\n    1.) Moves between the Floating point registers and the frame pointer and stack pointer"}]}