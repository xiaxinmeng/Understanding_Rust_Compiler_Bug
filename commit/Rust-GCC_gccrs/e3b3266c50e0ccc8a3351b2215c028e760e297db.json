{"sha": "e3b3266c50e0ccc8a3351b2215c028e760e297db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNiMzI2NmM1MGUwY2NjOGEzMzUxYjIyMTVjMDI4ZTc2MGUyOTdkYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-17T09:57:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-17T09:57:14Z"}, "message": "[multiple changes]\n\n2012-07-17  Tristan Gingold  <gingold@adacore.com>\n\n\t* treepr.adb, treepr.ads: Revert previous patch, unneeded.\n\n2012-07-17  Robert Dewar  <dewar@adacore.com>\n\n\t* s-assert.ads: Fix comments to make it clear that this is used\n\tfor all assertions, not just pragma Assert.\n\n2012-07-17  Jerome Guitton  <guitton@adacore.com>\n\n\t* par_sco.ads: Minor typo fix.\n\n2012-07-17  Gary Dismukes  <dismukes@adacore.com>\n\n\t* layout.adb (Layout_Type): In the case where the target is\n\tAAMP, use 32 bits (a single pointer) rather than 64 bits for an\n\tanonymous access-to-subprogram type if the type is library-level\n\tand Is_Local_Anonymous_Access is True.\n\n2012-07-17  Jose Ruiz  <ruiz@adacore.com>\n\n\t* s-tassta.adb, s-tarest.adb (Create_Task, Create_Restricted_Task,\n\tInitialize): Add comments explaining that the CPU affinity value that\n\tis passed to the run-time library can be either Unspecified_CPU, to\n\tindicate that the task inherits the affinity of its activating task,\n\tor a value in the range of CPU_Range but no greater than Number_Of_CPUs.\n\n2012-07-17  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_disp.adb (Make_DT): Remove decoration of Ada.Tags entities.\n\t(Make_Tags): Add decoration of Ada.Tags entities.\n\n2012-07-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Check_Statement_Sequence): When locating the\n\tlast significant statement in a sequence, ignore iserted nodes\n\tthat typically come from expansion of controlled operations.\n\n2012-07-17  Tristan Gingold  <gingold@adacore.com>\n\n\t* gnat_rm.texi: Document foreign exceptions.\n\nFrom-SVN: r189568", "tree": {"sha": "d558cfa3a545820a8f2bce9e4763b855670e3455", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d558cfa3a545820a8f2bce9e4763b855670e3455"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3b3266c50e0ccc8a3351b2215c028e760e297db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b3266c50e0ccc8a3351b2215c028e760e297db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3b3266c50e0ccc8a3351b2215c028e760e297db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b3266c50e0ccc8a3351b2215c028e760e297db/comments", "author": null, "committer": null, "parents": [{"sha": "2761f6e9c01cd38d26c68dc5d173e3fa41ee87bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2761f6e9c01cd38d26c68dc5d173e3fa41ee87bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2761f6e9c01cd38d26c68dc5d173e3fa41ee87bf"}], "stats": {"total": 191, "additions": 118, "deletions": 73}, "files": [{"sha": "5834f6d35824f39227e7387a2942644e5d469f73", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 39, "deletions": 7, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3266c50e0ccc8a3351b2215c028e760e297db/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3266c50e0ccc8a3351b2215c028e760e297db/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e3b3266c50e0ccc8a3351b2215c028e760e297db", "patch": "@@ -1,3 +1,42 @@\n+2012-07-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-assert.ads: Fix comments to make it clear that this is used\n+\tfor all assertions, not just pragma Assert.\n+\n+2012-07-17  Jerome Guitton  <guitton@adacore.com>\n+\n+\t* par_sco.ads: Minor typo fix.\n+\n+2012-07-17  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* layout.adb (Layout_Type): In the case where the target is\n+\tAAMP, use 32 bits (a single pointer) rather than 64 bits for an\n+\tanonymous access-to-subprogram type if the type is library-level\n+\tand Is_Local_Anonymous_Access is True.\n+\n+2012-07-17  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* s-tassta.adb, s-tarest.adb (Create_Task, Create_Restricted_Task,\n+\tInitialize): Add comments explaining that the CPU affinity value that\n+\tis passed to the run-time library can be either Unspecified_CPU, to\n+\tindicate that the task inherits the affinity of its activating task,\n+\tor a value in the range of CPU_Range but no greater than Number_Of_CPUs.\n+\n+2012-07-17  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.adb (Make_DT): Remove decoration of Ada.Tags entities.\n+\t(Make_Tags): Add decoration of Ada.Tags entities.\n+\n+2012-07-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Statement_Sequence): When locating the\n+\tlast significant statement in a sequence, ignore iserted nodes\n+\tthat typically come from expansion of controlled operations.\n+\n+2012-07-17  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* gnat_rm.texi: Document foreign exceptions.\n+\n 2012-07-17  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_prag.adb, treepr.ads: Minor reformatting.\n@@ -12,13 +51,6 @@\n \t* seh_init.c (__gnat_SEH_error_handler): Not compiled anymore\n \ton Windows 64 (+ SEH), as it is unused.\n \n-2012-07-17  Tristan Gingold  <gingold@adacore.com>\n-\n-\t* treepr.ads (psloc): Declare.\n-\t* treepr.adb (psloc): New debug procedure to print a sloc.\n-\t(Print_Sloc): New procedure, from ...\n-\t(Print_Node_Subtree): ... this.  Call Print_Sloc.\n-\n 2012-07-17  Javier Miranda  <miranda@adacore.com>\n \n \t* sem_prag.adb (CPP_Class): Transform obsolescent pragma CPP_Class into"}, {"sha": "98ecf0d43091b6bcab8e66bb330eac57559f4806", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3266c50e0ccc8a3351b2215c028e760e297db/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3266c50e0ccc8a3351b2215c028e760e297db/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=e3b3266c50e0ccc8a3351b2215c028e760e297db", "patch": "@@ -6255,12 +6255,6 @@ package body Exp_Disp is\n             Elmt : Elmt_Id;\n \n          begin\n-            --  Ensure that entities Prim_Ptr and Predef_Prims_Table_Ptr have\n-            --  the decoration required by the backend\n-\n-            Set_Is_Dispatch_Table_Entity (RTE (RE_Prim_Ptr));\n-            Set_Is_Dispatch_Table_Entity (RTE (RE_Predef_Prims_Table_Ptr));\n-\n             --  Object declarations\n \n             Elmt := First_Elmt (DT_Decl);\n@@ -7137,6 +7131,12 @@ package body Exp_Disp is\n       Set_Ekind        (DT_Ptr, E_Variable);\n       Set_Related_Type (DT_Ptr, Typ);\n \n+      --  Ensure that entities Prim_Ptr and Predef_Prims_Table_Ptr have\n+      --  the decoration required by the backend\n+\n+      Set_Is_Dispatch_Table_Entity (RTE (RE_Prim_Ptr));\n+      Set_Is_Dispatch_Table_Entity (RTE (RE_Predef_Prims_Table_Ptr));\n+\n       --  For CPP types there is no need to build the dispatch tables since\n       --  they are imported from the C++ side. If the CPP type has an IP then\n       --  we declare now the variable that will store the copy of the C++ tag."}, {"sha": "b0479307865e4930e59ff7e17822f73f755f6c3e", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3266c50e0ccc8a3351b2215c028e760e297db/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3266c50e0ccc8a3351b2215c028e760e297db/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=e3b3266c50e0ccc8a3351b2215c028e760e297db", "patch": "@@ -1869,8 +1869,6 @@ functions (see pragma @code{CPP_Constructor}). Such types are implicitly\n limited if not explicitly declared as limited or derived from a limited\n type, and an error is issued in that case.\n \n-Pragma @code{CPP_Class} is intended primarily for automatic generation\n-using an automatic binding generator tool.\n See @ref{Interfacing to C++} for related information.\n \n Note: Pragma @code{CPP_Class} is currently obsolete. It is supported\n@@ -1927,7 +1925,8 @@ If no constructors are imported, it is impossible to create any objects\n on the Ada side and the type is implicitly declared abstract.\n \n Pragma @code{CPP_Constructor} is intended primarily for automatic generation\n-using an automatic binding generator tool.\n+using an automatic binding generator tool (such as the @code{-fdump-ada-spec}\n+GCC switch).\n See @ref{Interfacing to C++} for more related information.\n \n Note: The use of functions returning class-wide types for constructors is\n@@ -16617,8 +16616,7 @@ of the length corresponding to the @code{@var{type}'Size} value in Ada.\n @noindent\n The interface to C++ makes use of the following pragmas, which are\n primarily intended to be constructed automatically using a binding generator\n-tool, although it is possible to construct them by hand.  No suitable binding\n-generator tool is supplied with GNAT though.\n+tool, although it is possible to construct them by hand.\n \n Using these pragmas it is possible to achieve complete\n inter-operability between Ada tagged types and C++ class definitions.\n@@ -16640,6 +16638,11 @@ This pragma identifies an imported function (imported in the usual way\n with pragma @code{Import}) as corresponding to a C++ constructor.\n @end table\n \n+In addition, C++ exceptions are propagated and can be handled in a\n+@code{others} choice of an exception handler. The corresponding Ada\n+occurrence has no message, and the simple name of the exception identity\n+contains @samp{Foreign_Exception}.\n+\n @node Interfacing to COBOL\n @section Interfacing to COBOL\n "}, {"sha": "cacc461468f812194894af9c0040837be581680a", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3266c50e0ccc8a3351b2215c028e760e297db/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3266c50e0ccc8a3351b2215c028e760e297db/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=e3b3266c50e0ccc8a3351b2215c028e760e297db", "patch": "@@ -2452,15 +2452,20 @@ package body Layout is\n             Init_Size (E, 2 * System_Address_Size);\n \n          --  When the target is AAMP, access-to-subprogram types are fat\n-         --  pointers consisting of the subprogram address and a static link\n-         --  (with the exception of library-level access types, where a simple\n-         --  subprogram address is used).\n+         --  pointers consisting of the subprogram address and a static link,\n+         --  with the exception of library-level access types (including\n+         --  library-level anonymous access types, such as for components),\n+         --  where a simple subprogram address is used.\n \n          elsif AAMP_On_Target\n            and then\n-             (Ekind (E) = E_Anonymous_Access_Subprogram_Type\n-               or else (Ekind (E) = E_Access_Subprogram_Type\n-                         and then Present (Enclosing_Subprogram (E))))\n+             ((Ekind (E) = E_Access_Subprogram_Type\n+                and then Present (Enclosing_Subprogram (E)))\n+                  or else\n+                    (Ekind (E) = E_Anonymous_Access_Subprogram_Type\n+                      and then\n+                        (not Is_Local_Anonymous_Access (E)\n+                          or else Present (Enclosing_Subprogram (E)))))\n          then\n             Init_Size (E, 2 * System_Address_Size);\n "}, {"sha": "a57f5c5b9820eb97d3e55912428a9956962cde6e", "filename": "gcc/ada/par_sco.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3266c50e0ccc8a3351b2215c028e760e297db/gcc%2Fada%2Fpar_sco.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3266c50e0ccc8a3351b2215c028e760e297db/gcc%2Fada%2Fpar_sco.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.ads?ref=e3b3266c50e0ccc8a3351b2215c028e760e297db", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2009-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2009-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -24,7 +24,7 @@\n ------------------------------------------------------------------------------\n \n --  This package contains the routines used to deal with generation and output\n---  of Soure Coverage Obligations (SCO's) used for coverage analysis purposes.\n+--  of Source Coverage Obligations (SCO's) used for coverage analysis purposes.\n --  See package SCOs for full documentation of format of SCO information.\n \n with Types; use Types;"}, {"sha": "c19f7c18a747c522bd4471e7431d325303acf899", "filename": "gcc/ada/s-assert.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3266c50e0ccc8a3351b2215c028e760e297db/gcc%2Fada%2Fs-assert.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3266c50e0ccc8a3351b2215c028e760e297db/gcc%2Fada%2Fs-assert.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-assert.ads?ref=e3b3266c50e0ccc8a3351b2215c028e760e297db", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,7 +29,9 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package provides support for the GNAT assert pragma\n+--  This package provides support for assertions (including pragma Assert,\n+--  pragma Debug, and Precondition/Postcondition/Predicate/Invariant aspects\n+--  and their corresponding pragmas).\n \n --  This unit may be used directly from an application program by providing\n --  an appropriate WITH, and the interface can be expected to remain stable."}, {"sha": "9643a181b5bc0b0c5c835588274b49aa58b9d673", "filename": "gcc/ada/s-tarest.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3266c50e0ccc8a3351b2215c028e760e297db/gcc%2Fada%2Fs-tarest.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3266c50e0ccc8a3351b2215c028e760e297db/gcc%2Fada%2Fs-tarest.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tarest.adb?ref=e3b3266c50e0ccc8a3351b2215c028e760e297db", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1999-2011, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1999-2012, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -483,6 +483,12 @@ package body System.Tasking.Restricted.Stages is\n          then Self_ID.Common.Base_Priority\n          else System.Any_Priority (Priority));\n \n+      --  Legal values of CPU are the special Unspecified_CPU value which is\n+      --  inserted by the compiler for tasks without CPU aspect, and those in\n+      --  the range of CPU_Range but no greater than Number_Of_CPUs. Otherwise\n+      --  the task is defined to have failed, and it becomes a completed task\n+      --  (RM D.16(14/3)).\n+\n       if CPU /= Unspecified_CPU\n         and then (CPU < Integer (System.Multiprocessors.CPU_Range'First)\n           or else CPU > Integer (System.Multiprocessors.CPU_Range'Last)\n@@ -492,6 +498,13 @@ package body System.Tasking.Restricted.Stages is\n \n       --  Normal CPU affinity\n       else\n+         --  When the application code says nothing about the task affinity\n+         --  (task without CPU aspect) then the compiler inserts the\n+         --  Unspecified_CPU value which indicates to the run-time library that\n+         --  the task will activate and execute on the same processor as its\n+         --  activating task if the activating task is assigned a processor\n+         --  (RM D.16(14/3)).\n+\n          Base_CPU :=\n            (if CPU = Unspecified_CPU\n             then Self_ID.Common.Base_CPU"}, {"sha": "57c28be4ee596fce9390fa2e8950c7f93fb9822b", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3266c50e0ccc8a3351b2215c028e760e297db/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3266c50e0ccc8a3351b2215c028e760e297db/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=e3b3266c50e0ccc8a3351b2215c028e760e297db", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2011, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2012, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -527,6 +527,12 @@ package body System.Tasking.Stages is\n          then Self_ID.Common.Base_Priority\n          else System.Any_Priority (Priority));\n \n+      --  Legal values of CPU are the special Unspecified_CPU value which is\n+      --  inserted by the compiler for tasks without CPU aspect, and those in\n+      --  the range of CPU_Range but no greater than Number_Of_CPUs. Otherwise\n+      --  the task is defined to have failed, and it becomes a completed task\n+      --  (RM D.16(14/3)).\n+\n       if CPU /= Unspecified_CPU\n         and then (CPU < Integer (System.Multiprocessors.CPU_Range'First)\n                     or else\n@@ -539,6 +545,13 @@ package body System.Tasking.Stages is\n       --  Normal CPU affinity\n \n       else\n+         --  When the application code says nothing about the task affinity\n+         --  (task without CPU aspect) then the compiler inserts the\n+         --  Unspecified_CPU value which indicates to the run-time library that\n+         --  the task will activate and execute on the same processor as its\n+         --  activating task if the activating task is assigned a processor\n+         --  (RM D.16(14/3)).\n+\n          Base_CPU :=\n            (if CPU = Unspecified_CPU\n             then Self_ID.Common.Base_CPU"}, {"sha": "b568ebbc94955f8c7c01d5c0d58d40f8a6e09b64", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3266c50e0ccc8a3351b2215c028e760e297db/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3266c50e0ccc8a3351b2215c028e760e297db/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=e3b3266c50e0ccc8a3351b2215c028e760e297db", "patch": "@@ -6633,6 +6633,11 @@ package body Sem_Ch6 is\n                 and then Exception_Junk (Last_Stm))\n            or else Nkind (Last_Stm) in N_Push_xxx_Label\n            or else Nkind (Last_Stm) in N_Pop_xxx_Label\n+\n+         --  Inserted code, such as finalization calls, is irrelevant: we only\n+         --  need to check original source.\n+\n+           or else Is_Rewrite_Insertion (Last_Stm)\n          loop\n             Prev (Last_Stm);\n          end loop;"}, {"sha": "0f61b04c2918b5f4f97588a2241fe26ef5fbed2b", "filename": "gcc/ada/treepr.adb", "status": "modified", "additions": 15, "deletions": 38, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3266c50e0ccc8a3351b2215c028e760e297db/gcc%2Fada%2Ftreepr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3266c50e0ccc8a3351b2215c028e760e297db/gcc%2Fada%2Ftreepr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftreepr.adb?ref=e3b3266c50e0ccc8a3351b2215c028e760e297db", "patch": "@@ -188,9 +188,6 @@ package body Treepr is\n    --  level and the bars used to link list elements). In addition, for lines\n    --  other than the first, an additional character Prefix_Char is output.\n \n-   procedure Print_Sloc (Loc : Source_Ptr);\n-   --  Print the human readable representation of Loc\n-\n    function Serial_Number (Id : Int) return Nat;\n    --  Given a Node_Id, List_Id or Elist_Id, returns the previously assigned\n    --  serial number, or zero if no serial number has yet been assigned.\n@@ -890,6 +887,7 @@ package body Treepr is\n       Field_To_Be_Printed : Boolean;\n       Prefix_Str_Char     : String (Prefix_Str'First .. Prefix_Str'Last + 1);\n \n+      Sfile : Source_File_Index;\n       Fmt   : UI_Format;\n \n    begin\n@@ -935,7 +933,20 @@ package body Treepr is\n          Print_Str (Prefix_Str_Char);\n          Print_Str (\"Sloc = \");\n \n-         Print_Sloc (Sloc (N));\n+         if Sloc (N) = Standard_Location then\n+            Print_Str (\"Standard_Location\");\n+\n+         elsif Sloc (N) = Standard_ASCII_Location then\n+            Print_Str (\"Standard_ASCII_Location\");\n+\n+         else\n+            Sfile := Get_Source_File_Index (Sloc (N));\n+            Print_Int (Int (Sloc (N)) - Int (Source_Text (Sfile)'First));\n+            Write_Str (\"  \");\n+            Write_Location (Sloc (N));\n+         end if;\n+\n+         Print_Eol;\n       end if;\n \n       --  Print Chars field if present\n@@ -1386,30 +1397,6 @@ package body Treepr is\n       Print_Term;\n    end Print_Node_Subtree;\n \n-   ----------------\n-   -- Print_Sloc --\n-   ----------------\n-\n-   procedure Print_Sloc (Loc : Source_Ptr) is\n-      Sfile : Source_File_Index;\n-\n-   begin\n-      if Loc = Standard_Location then\n-         Print_Str (\"Standard_Location\");\n-\n-      elsif Loc = Standard_ASCII_Location then\n-         Print_Str (\"Standard_ASCII_Location\");\n-\n-      else\n-         Sfile := Get_Source_File_Index (Loc);\n-         Print_Int (Int (Loc) - Int (Source_Text (Sfile)'First));\n-         Write_Str (\"  \");\n-         Write_Location (Loc);\n-      end if;\n-\n-      Print_Eol;\n-   end Print_Sloc;\n-\n    ---------------\n    -- Print_Str --\n    ---------------\n@@ -1537,16 +1524,6 @@ package body Treepr is\n       Print_Node (N, Label, ' ');\n    end Print_Tree_Node;\n \n-   -----------\n-   -- psloc --\n-   -----------\n-\n-   procedure psloc (Loc : Source_Ptr) is\n-   begin\n-      Phase := Printing;\n-      Print_Sloc (Loc);\n-   end psloc;\n-\n    --------\n    -- pt --\n    --------"}, {"sha": "212c49155b56a7a9557e103ea7a76a072d692aa4", "filename": "gcc/ada/treepr.ads", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3266c50e0ccc8a3351b2215c028e760e297db/gcc%2Fada%2Ftreepr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3266c50e0ccc8a3351b2215c028e760e297db/gcc%2Fada%2Ftreepr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftreepr.ads?ref=e3b3266c50e0ccc8a3351b2215c028e760e297db", "patch": "@@ -71,11 +71,6 @@ package Treepr is\n    pragma Export (Ada, ppp);\n    --  Same as Print_Node_Subtree\n \n-   procedure psloc (Loc : Source_Ptr);\n-   pragma Export (Ada, psloc);\n-   --  Prints the sloc Loc\n-   --  Why is this here??? use the routines in Sprint instead ???\n-\n    --  The following are no longer needed; you can use pp or ppp instead\n \n    procedure pe (E : Elist_Id);"}]}