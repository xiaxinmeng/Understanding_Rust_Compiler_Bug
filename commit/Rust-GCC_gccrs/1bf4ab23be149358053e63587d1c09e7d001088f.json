{"sha": "1bf4ab23be149358053e63587d1c09e7d001088f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJmNGFiMjNiZTE0OTM1ODA1M2U2MzU4N2QxYzA5ZTdkMDAxMDg4Zg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-07-09T22:00:59Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-07-09T22:00:59Z"}, "message": "Add wchar_t counterparts of the basic_stringbuf<char> tests.\n\n2004-07-09  Paolo Carlini  <pcarlini@suse.de>\n\n\tAdd wchar_t counterparts of the basic_stringbuf<char> tests.\n\t* testsuite/27_io/basic_stringbuf/imbue/wchar_t/1.cc, 9322.cc: New.\n\t* testsuite/27_io/basic_stringbuf/in_avail/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_stringbuf/overflow/wchar_t/1.cc, 2.cc,\n\t3599.cc, 9988.cc: Likewise.\n\t* testsuite/27_io/basic_stringbuf/sbumpc/wchar_t/1.cc, 9825.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_stringbuf/seekoff/wchar_t/1.cc, 2.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_stringbuf/seekoff/wchar_t/1.cc, 2.cc, 3.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_stringbuf/setbuf/wchar_t/1.cc, 2.cc, 3.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_stringbuf/sgetc/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_stringbuf/sgetn/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_stringbuf/snextc/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_stringbuf/sputbackc/wchar_t/1.cc, 9425.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_stringbuf/sputc/wchar_t/1.cc, 1057.cc,\n\t9404-1.cc: Likewise.\n\t* testsuite/27_io/basic_stringbuf/sputn/wchar_t/1.cc, 1057.cc,\n\t9404-2.cc: Likewise.\n\t* testsuite/27_io/basic_stringbuf/str/wchar_t/1.cc, 2.cc, 3.cc,\n\t3955.cc: Likewise.\n\t* testsuite/27_io/basic_stringbuf/sungetc/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_stringbuf/sync/wchar_t/1057.cc: Likewise.\n\nFrom-SVN: r84405", "tree": {"sha": "cf1146bb9f54e2457d216546e888341876b3a9f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf1146bb9f54e2457d216546e888341876b3a9f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bf4ab23be149358053e63587d1c09e7d001088f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bf4ab23be149358053e63587d1c09e7d001088f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bf4ab23be149358053e63587d1c09e7d001088f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bf4ab23be149358053e63587d1c09e7d001088f/comments", "author": null, "committer": null, "parents": [{"sha": "32e89bebc67451505f07ba857cf96157f618c7e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32e89bebc67451505f07ba857cf96157f618c7e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32e89bebc67451505f07ba857cf96157f618c7e9"}], "stats": {"total": 2444, "additions": 2444, "deletions": 0}, "files": [{"sha": "00ce84dac50c65b7e121cfe79961e3924a92a730", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -1,3 +1,32 @@\n+2004-07-09  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tAdd wchar_t counterparts of the basic_stringbuf<char> tests.\n+\t* testsuite/27_io/basic_stringbuf/imbue/wchar_t/1.cc, 9322.cc: New.\n+\t* testsuite/27_io/basic_stringbuf/in_avail/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_stringbuf/overflow/wchar_t/1.cc, 2.cc,\n+\t3599.cc, 9988.cc: Likewise.\n+\t* testsuite/27_io/basic_stringbuf/sbumpc/wchar_t/1.cc, 9825.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_stringbuf/seekoff/wchar_t/1.cc, 2.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_stringbuf/seekoff/wchar_t/1.cc, 2.cc, 3.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_stringbuf/setbuf/wchar_t/1.cc, 2.cc, 3.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_stringbuf/sgetc/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_stringbuf/sgetn/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_stringbuf/snextc/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_stringbuf/sputbackc/wchar_t/1.cc, 9425.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_stringbuf/sputc/wchar_t/1.cc, 1057.cc,\n+\t9404-1.cc: Likewise.\n+\t* testsuite/27_io/basic_stringbuf/sputn/wchar_t/1.cc, 1057.cc,\n+\t9404-2.cc: Likewise.\n+\t* testsuite/27_io/basic_stringbuf/str/wchar_t/1.cc, 2.cc, 3.cc,\n+\t3955.cc: Likewise.\n+\t* testsuite/27_io/basic_stringbuf/sungetc/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_stringbuf/sync/wchar_t/1057.cc: Likewise.\n+\n 2004-07-08  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/gslice.h: Trivial formatting fixes."}, {"sha": "855580d04adf9d28dc8fd9fee77bef3417076237", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/imbue/wchar_t/1.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fimbue%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fimbue%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fimbue%2Fwchar_t%2F1.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,46 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == wchar_t\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+std::wstring str_01(L\"mykonos. . . or what?\");\n+std::wstringbuf strb_01(str_01);\n+\n+// test the streambuf/stringbuf locale settings\n+void test02() \n+{\n+  std::locale loc_c = std::locale::classic();\n+  loc_c = strb_01.getloc();\n+  strb_01.pubimbue(loc_c); //This should initialize _M_init to true\n+  std::locale loc_tmp = strb_01.getloc(); \n+  VERIFY( loc_tmp == loc_c );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "b91b067534d9b35ed04b00010ebab45c211fd79c", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/imbue/wchar_t/9322.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fimbue%2Fwchar_t%2F9322.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fimbue%2Fwchar_t%2F9322.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fimbue%2Fwchar_t%2F9322.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,53 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1.3 Overridden virtual functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9322\n+void test03()\n+{\n+  using std::locale;\n+  bool test __attribute__((unused)) = true;\n+\n+  locale loc =  std::locale::classic();\n+  std::wstringbuf ob;\n+  VERIFY( ob.getloc() == loc );\n+\n+  locale::global(__gnu_test::try_named_locale(\"en_US\"));\n+  VERIFY( ob.getloc() == loc );\n+\n+  locale loc_de = __gnu_test::try_named_locale(\"de_DE\");\n+  locale ret = ob.pubimbue(loc_de);\n+  VERIFY( ob.getloc() == loc_de );\n+  VERIFY( ret == loc );\n+\n+  locale::global(loc);\n+  VERIFY( ob.getloc() == loc_de );\n+}\n+\n+int main() \n+{\n+  using namespace std;\n+  test03();\n+  return 0;\n+}"}, {"sha": "96fcbcdaf1016cdc00eaa41bcd3be6e147512281", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/in_avail/wchar_t/1.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fin_avail%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fin_avail%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fin_avail%2Fwchar_t%2F1.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,64 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == wchar_t\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+std::wstring str_01(L\"mykonos. . . or what?\");\n+std::wstring str_02(L\"paris, or sainte-maxime?\");\n+std::wstring str_03;\n+std::wstringbuf strb_01(str_01);\n+std::wstringbuf strb_02(str_02, std::ios_base::in);\n+std::wstringbuf strb_03(str_03, std::ios_base::out);\n+\n+// test overloaded virtual functions\n+void test04() \n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstring \t\tstr_tmp;\n+  std::wstringbuf \t\tstrb_tmp;\n+  std::streamoff  \t\tstrmof_1(-1), strmof_2;\n+  typedef std::wstringbuf::int_type int_type;\n+  typedef std::wstringbuf::traits_type traits_type;\n+  typedef std::wstringbuf::pos_type pos_type;\n+  typedef std::wstringbuf::off_type off_type;\n+\n+  // GET\n+  // int in_avail()\n+  strmof_1 = strb_01.in_avail();\n+  strmof_2 = strb_02.in_avail();\n+  VERIFY( strmof_1 != strmof_2 );\n+  VERIFY( strmof_1 == static_cast<std::streamoff>(str_01.length()) );\n+  VERIFY( strmof_2 == static_cast<std::streamoff>(str_02.length()) );\n+  strmof_1 = strb_03.in_avail(); \n+  // zero cuz write-only, or eof()? zero, from showmany\n+  VERIFY( strmof_1 == 0 ); \n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "7a15c3dbae445d8b0a8686a9ce95b03c27ca11ec", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/overflow/wchar_t/1.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fwchar_t%2F1.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,57 @@\n+// 2004-07-07  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1.3 basic_stringbuf overridden virtual functions.\n+\n+#include <sstream>\n+#include <cstdlib>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+wstring\n+data(unsigned len)\n+{\n+  wstring ret;\n+  for (unsigned i = 0; i < len; ++i)\n+    ret.push_back(L'a' + rand() % 26);\n+  return ret;\n+}\n+\n+void\n+test01(unsigned iter)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  for (unsigned n = 1; n <= iter; n *= 10)\n+    {\n+      const wstring str = data(n);\n+      wstringbuf sstr;\n+      for (unsigned i = 0; i < n; ++i)\n+\tsstr.sputc(str[i]);\n+      VERIFY( str == sstr.str() );\n+    }\n+}\n+\n+int main()\n+{\n+  test01(10000000);\n+  return 0;\n+}"}, {"sha": "324baabf10548a6cd97dcbe5979c68bd1aa8c712", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/overflow/wchar_t/2.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fwchar_t%2F2.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,81 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <sstream>\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+\n+// test03\n+// http://gcc.gnu.org/ml/libstdc++/2000-q1/msg00151.html\n+template<typename charT, typename traits = std::char_traits<charT> >\n+  class basic_nullbuf : public std::basic_stringbuf<charT, traits>\n+  {\n+  protected:\n+    typedef typename\n+      std::basic_stringbuf<charT, traits>::int_type int_type;\n+    virtual int_type \n+    overflow(int_type c) \n+    {  return traits::not_eof(c); }\n+  };\n+\n+typedef basic_nullbuf<wchar_t> nullbuf;\n+\n+template<typename T>\n+  wchar_t\n+  print(const T& x) \n+  {\n+   nullbuf ob;\n+   std::wostream out(&ob); \n+   out << x << std::endl;\n+   return (!out ? L'0' : L'1');\n+ }\n+\n+void test03() \n+{\n+  bool test __attribute__((unused)) = true;\n+  const std::wstring control01(L\"11111\");\n+  std::wstring test01;\n+\n+  test01 += print(true);\n+  test01 += print(3.14159);\n+  test01 += print(10);\n+  test01 += print(L'x');\n+  test01 += print(L\"pipo\");\n+\n+  VERIFY( test01 == control01 );\n+}\n+\n+int main() \n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "d95ead1d86d946eaafa8a4cf9ae724ed26144273", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/overflow/wchar_t/3599.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fwchar_t%2F3599.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fwchar_t%2F3599.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fwchar_t%2F3599.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,67 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <sstream>\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/3599\n+class testbuf : public std::wstringbuf\n+{\n+public:\n+  typedef std::wstringbuf::traits_type traits_type;\n+\n+  testbuf() : std::wstringbuf() { }\n+ \n+protected:\n+  int_type \n+  overflow(int_type c __attribute__((unused)) = traits_type::eof()) \n+  { return traits_type::not_eof(0); }\n+};\n+\n+void\n+test07()\n+{\n+  bool test __attribute__((unused)) = true;\n+  testbuf ob;\n+  std::wostream out(&ob); \n+\n+  out << L\"gasp\";\n+  VERIFY(out.good());\n+\n+  out << std::endl;\n+  VERIFY(out.good());\n+}\n+\n+int main() \n+{\n+  test07();\n+  return 0;\n+}"}, {"sha": "a156e81a6d7bf7f494b0a2b4496c3cc29a943955", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/overflow/wchar_t/9988.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fwchar_t%2F9988.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fwchar_t%2F9988.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fwchar_t%2F9988.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,63 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+class OverBuf : public std::wstringbuf\n+{\n+public:\n+  int_type pub_overflow(int_type c = traits_type::eof())\n+  { return std::wstringbuf::overflow(c); }\n+};\n+\n+// libstdc++/9988\n+// filebuf::overflow writes EOF to file\n+void test15()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+  \n+  OverBuf sb;\n+\n+  sb.sputc(L'a');\n+  sb.pub_overflow(L'b');\n+  sb.pub_overflow();\n+  sb.sputc(L'c');\n+\n+  wstringbuf sbin(sb.str(), ios_base::in);\n+  wstringbuf::int_type c;\n+  c = sbin.sbumpc();\n+  VERIFY( c == L'a' );\n+  c = sbin.sbumpc();\n+  VERIFY( c == L'b' );\n+  c = sbin.sbumpc();\n+  VERIFY( c == L'c' );\n+  c = sbin.sbumpc();\n+  VERIFY( c == wstringbuf::traits_type::eof() );\n+}\n+\n+int main() \n+{\n+  test15();\n+  return 0;\n+}"}, {"sha": "188a87ee600034acfa150eae77857dcaa4d59817", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sbumpc/wchar_t/1.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsbumpc%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsbumpc%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsbumpc%2Fwchar_t%2F1.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,73 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == wchar_t\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+std::wstring str_01(L\"mykonos. . . or what?\");\n+std::wstring str_02(L\"paris, or sainte-maxime?\");\n+std::wstring str_03;\n+std::wstringbuf strb_01(str_01);\n+std::wstringbuf strb_02(str_02, std::ios_base::in);\n+std::wstringbuf strb_03(str_03, std::ios_base::out);\n+\n+// test overloaded virtual functions\n+void test04() \n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstring \t\tstr_tmp;\n+  std::wstringbuf \t\tstrb_tmp;\n+  std::streamoff  \t\tstrmof_1(-1), strmof_2;\n+  typedef std::wstringbuf::int_type int_type;\n+  typedef std::wstringbuf::traits_type traits_type;\n+  typedef std::wstringbuf::pos_type pos_type;\n+  typedef std::wstringbuf::off_type off_type;\n+\n+  // GET\n+  strmof_1 = strb_01.in_avail();\n+  strmof_2 = strb_02.in_avail();\n+  strmof_1 = strb_03.in_avail(); \n+\n+  // int_type sbumpc()\n+  // if read_cur not avail, return uflow(), else return *read_cur & increment\n+  int_type c1 = strb_01.sbumpc();\n+  int_type c2 = strb_02.sbumpc();\n+  VERIFY( c1 != c2 );\n+  VERIFY( c1 == str_01[0] );\n+  VERIFY( c2 == str_02[0] ); //should equal first letter at this point\n+  int_type c3 = strb_01.sbumpc();\n+  int_type c4 = strb_02.sbumpc();\n+  VERIFY( c1 != c2 );\n+  VERIFY( c1 != c3 );\n+  VERIFY( c2 != c4 );\n+  int_type c5 = strb_03.sbumpc();\n+  VERIFY( c5 == traits_type::eof() );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "1a874ba1fadcc7bed818db0b7727b3d2379b7e71", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sbumpc/wchar_t/9825.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsbumpc%2Fwchar_t%2F9825.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsbumpc%2Fwchar_t%2F9825.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsbumpc%2Fwchar_t%2F9825.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,50 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9825\n+// filebuf::sputbackc breaks sbumpc\n+void test12()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  wstringbuf sbuf;\n+  sbuf.sputn(L\"crazy bees!\", 11);\n+  sbuf.pubseekoff(0, ios_base::beg);\n+  sbuf.sbumpc();\n+  sbuf.sputbackc(L'x');\n+  stringbuf::int_type c = sbuf.sbumpc();\n+  VERIFY( c == L'x' );\n+  c = sbuf.sbumpc();\n+  VERIFY( c == L'r' );\n+  c = sbuf.sbumpc();\n+  VERIFY( c == L'a' );\n+}\n+\n+int main() \n+{\n+  test12();\n+  return 0;\n+}"}, {"sha": "c1a659e6be1d975d605ff9b88ac753ae2e21b22d", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/seekoff/wchar_t/1.cc", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekoff%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekoff%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekoff%2Fwchar_t%2F1.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,121 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == wchar_t\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+std::wstring str_01(L\"mykonos. . . or what?\");\n+std::wstring str_02(L\"paris, or sainte-maxime?\");\n+std::wstring str_03;\n+std::wstringbuf strb_01(str_01);\n+std::wstringbuf strb_02(str_02, std::ios_base::in);\n+std::wstringbuf strb_03(str_03, std::ios_base::out);\n+\n+// test overloaded virtual functions\n+void test04() \n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstring \t\tstr_tmp;\n+  std::wstringbuf \t\tstrb_tmp;\n+  std::streamsize \t\tstrmsz_1, strmsz_2;\n+  typedef std::wstringbuf::int_type int_type;\n+  typedef std::wstringbuf::traits_type traits_type;\n+  typedef std::wstringbuf::pos_type pos_type;\n+  typedef std::wstringbuf::off_type off_type;\n+\n+  int_type c1 = strb_01.sbumpc();\n+  int_type c2 = strb_02.sbumpc();\n+  int_type c3 = strb_01.sbumpc();\n+\n+  // PUT\n+  strb_03.str(str_01); //reset\n+  \n+  // BUFFER MANAGEMENT & POSITIONING\n+\n+  // seekoff\n+  // pubseekoff(off_type off, ios_base::seekdir way, ios_base::openmode which)\n+  // alters the stream position to off\n+  pos_type pt_1(off_type(-1));\n+  pos_type pt_2(off_type(0));\n+  off_type off_1 = 0;\n+  off_type off_2 = 0;\n+  strb_01.str(str_01); //in|out (\"mykonos. . . or what?\");\n+  strb_02.str(str_02); //in (\"paris, or sainte-maxime?\");\n+  strb_03.str(str_03); //out (\"\")\n+  //IN|OUT\n+  //beg\n+  pt_1 = strb_01.pubseekoff(2, std::ios_base::beg);\n+  off_1 = off_type(pt_1);\n+  VERIFY( off_1 >= 0 );\n+  c1 = strb_01.snextc(); //current in pointer +1\n+  VERIFY( c1 == L'o' );\n+  c2 = strb_01.sputc(L'x');  //test current out pointer\n+  str_tmp = std::wstring(L\"myxonos. . . or what?\");\n+  VERIFY( strb_01.str() == str_tmp );\n+  //cur\n+  pt_1 = strb_01.pubseekoff(2, std::ios_base::cur);\n+  off_1 = off_type(pt_1);\n+  VERIFY( off_1 == -1 ); // can't seekoff for in and out + cur in sstreams\n+  pt_1 = strb_01.pubseekoff(2, std::ios_base::cur, std::ios_base::in);\n+  off_1 = off_type(pt_1);\n+  pt_2 = strb_01.pubseekoff(2, std::ios_base::cur, std::ios_base::in);\n+  off_2 = off_type(pt_2);\n+  VERIFY( off_2 == off_1 + 2 );\n+  c1 = strb_01.snextc(); //current in pointer + 1\n+  VERIFY( c1 == L' ' );\n+  c2 = strb_01.sputc(L'x');  //test current out pointer\n+  str_tmp = std::wstring(L\"myxxnos. . . or what?\");\n+  VERIFY( strb_01.str() == str_tmp );\n+  //end\n+  pt_2 = strb_01.pubseekoff(2, std::ios_base::end);\n+  off_1 = off_type(pt_2);\n+  VERIFY( off_1 == -1 ); // not a valid position\n+  VERIFY( strb_01.str() == str_tmp );\n+  // end part two (from the filebuf tests)\n+  strb_01.pubseekoff(0, std::ios_base::end);\n+  strmsz_1 = strb_01.in_avail(); // 0 cuz at the end\n+  c1 = strb_01.sgetc(); \n+  c2 = strb_01.sungetc();\n+  strmsz_2 = strb_01.in_avail(); // 1\n+  c3 = strb_01.sgetc();\n+  VERIFY( c1 != c2 );\n+  VERIFY( strmsz_2 != strmsz_1 );\n+  VERIFY( strmsz_2 == 1 );\n+  // end part three\n+  strmsz_1 = strb_01.str().size();\n+  strmsz_2 = strb_01.sputn(L\" ravi shankar meets carlos santana in LoHa\", 90);\n+  strb_01.pubseekoff(0, std::ios_base::end);\n+  strb_01.sputc(L'<');\n+  str_tmp = strb_01.str();\n+  VERIFY(static_cast<std::streamsize>(str_tmp.size()) == strmsz_1 + strmsz_2 + 1);\n+  // IN\n+  // OUT\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "63a0a2ea865463bf092cc62f70030a4565ade451", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/seekoff/wchar_t/2.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekoff%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekoff%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekoff%2Fwchar_t%2F2.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,59 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1.3 Overridden virtual functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test02(std::wstringbuf& in, bool pass)\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+  typedef wstreambuf::pos_type pos_type;\n+  typedef wstreambuf::off_type off_type;\n+  pos_type bad = pos_type(off_type(-1));\n+  pos_type p = 0;\n+\n+  // seekoff\n+  p = in.pubseekoff(0, ios_base::beg, ios_base::in);\n+  if (pass)\n+    VERIFY( p != bad );\n+\n+  p = in.pubseekoff(0, ios_base::beg, ios_base::out); \n+  VERIFY( p == bad );\n+\n+  p = in.pubseekoff(0, ios_base::beg); \n+  VERIFY( p == bad );\n+}\n+\n+int main() \n+{\n+  using namespace std;\n+\n+  // movie star, submarine scientist!\n+  wstringbuf in1(L\"Hedy Lamarr\", ios_base::in);\n+  wstringbuf in2(ios_base::in);\n+  wstringbuf in3(L\"\", ios_base::in);\n+  test02(in1, true);\n+  test02(in2, false);\n+  test02(in3, false);\n+  return 0;\n+}"}, {"sha": "bac614efa9fd4f09b1bff1044903f580e58f4572", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/seekpos/wchar_t/1.cc", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekpos%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekpos%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekpos%2Fwchar_t%2F1.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,94 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == wchar_t\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+std::wstring str_01(L\"mykonos. . . or what?\");\n+std::wstring str_02(L\"paris, or sainte-maxime?\");\n+std::wstring str_03;\n+std::wstringbuf strb_01(str_01);\n+std::wstringbuf strb_02(str_02, std::ios_base::in);\n+std::wstringbuf strb_03(str_03, std::ios_base::out);\n+\n+// test overloaded virtual functions\n+void test04() \n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstring \t\tstr_tmp;\n+  std::wstringbuf \t\tstrb_tmp;\n+  typedef std::wstringbuf::int_type int_type;\n+  typedef std::wstringbuf::traits_type traits_type;\n+  typedef std::wstringbuf::pos_type pos_type;\n+  typedef std::wstringbuf::off_type off_type;\n+\n+  int_type c1 = strb_01.sbumpc();\n+  int_type c2 = strb_02.sbumpc();\n+  int_type c3 = strb_01.sbumpc();\n+\n+  pos_type pt_1(off_type(-1));\n+  pos_type pt_2(off_type(0));\n+  off_type off_1 = 0;\n+  off_type off_2 = 0;\n+\n+  // PUT\n+  strb_03.str(str_01); //reset\n+  \n+  // BUFFER MANAGEMENT & POSITIONING\n+\n+  // seekpos\n+  // pubseekpos(pos_type sp, ios_base::openmode)\n+  // alters the stream position to sp\n+  strb_01.str(str_01); //in|out (\"mykonos. . . or what?\");\n+  strb_02.str(str_02); //in (\"paris, or sainte-maxime?\");\n+  strb_03.str(str_03); //out (\"\")\n+  //IN|OUT\n+  //beg\n+  pt_1 = strb_01.pubseekoff(2, std::ios_base::beg);\n+  off_1 = off_type(pt_1);\n+  VERIFY( off_1 >= 0 );\n+  pt_1 = strb_01.pubseekoff(0, std::ios_base::cur, std::ios_base::out);\n+  off_1 = off_type(pt_1);\n+  c1 = strb_01.snextc(); //current in pointer +1\n+  VERIFY( c1 == L'o' );\n+  c2 = strb_01.sputc(L'x');  //test current out pointer\n+  str_tmp = std::wstring(L\"myxonos. . . or what?\");\n+  VERIFY( strb_01.str() == str_tmp );\n+  strb_01.pubsync(); //resets pointers\n+  pt_2 = strb_01.pubseekpos(pt_1, std::ios_base::in|std::ios_base::out);\n+  off_2 = off_type(pt_2);\n+  VERIFY( off_1 == off_2 );\n+  c3 = strb_01.snextc(); //current in pointer +1\n+  VERIFY( c1 == c3 );\n+  c2 = strb_01.sputc(L'x');  //test current out pointer\n+  str_tmp = std::wstring(L\"myxonos. . . or what?\");\n+  VERIFY( strb_01.str() == str_tmp );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "eb82442dd55a8461c9b5d8eb67aa19e5fdc347c3", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/seekpos/wchar_t/2.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekpos%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekpos%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekpos%2Fwchar_t%2F2.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,60 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1.3 Overridden virtual functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test02(std::wstringbuf& in, bool pass)\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+  typedef wstreambuf::pos_type pos_type;\n+  typedef wstreambuf::off_type off_type;\n+  pos_type bad = pos_type(off_type(-1));\n+  pos_type p = 0;\n+\n+  // seekpos\n+  p = in.pubseekpos(0, ios_base::in);\n+  if (pass)\n+    VERIFY( p != bad );\n+\n+  p = in.pubseekpos(0, ios_base::out); \n+  VERIFY( p == bad );\n+\n+  p = in.pubseekpos(0); \n+  if (pass)\n+    VERIFY( p != bad );\n+}\n+\n+int main() \n+{\n+  using namespace std;\n+\n+  // movie star, submarine scientist!\n+  wstringbuf in1(L\"Hedy Lamarr\", ios_base::in);\n+  wstringbuf in2(ios_base::in);\n+  wstringbuf in3(L\"\", ios_base::in);\n+  test02(in1, true);\n+  test02(in2, false);\n+  test02(in3, false);\n+  return 0;\n+}"}, {"sha": "f9fc736a9af788ec482308089d086c04e27f2efd", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/seekpos/wchar_t/3.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekpos%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekpos%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekpos%2Fwchar_t%2F3.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,48 @@\n+// 2003-05-30  Paolo Carlini  <pcarlini@unitus.it>\n+\n+// Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+  typedef wstringbuf::pos_type pos_type;\n+  typedef wstringbuf::off_type off_type;\n+\n+  wstringbuf strb_01(ios_base::out);\n+\n+  strb_01.sputn(L\"broken peak\", 11);\n+  pos_type pt_1 = strb_01.pubseekoff(0, ios_base::end, ios_base::out);\n+\n+  // In general, according to 27.7.1.3,14, the below has undefined\n+  // behaviour since pt_1 + off_type(1) doesn't come from a\n+  // previous pubseekpos or pubseekoff. However, given v3 implementation,\n+  // this was useful to expose a bug in pubseekpos checks.\n+  pos_type pt_2 = strb_01.pubseekpos(pt_1 + off_type(1), ios_base::out);\n+  VERIFY( pt_2 == pos_type(off_type(-1)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ba01e1d395d66038378b692fd8b0c1508817d1e3", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/setbuf/wchar_t/1.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsetbuf%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsetbuf%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsetbuf%2Fwchar_t%2F1.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,64 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == wchar_t\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+std::wstring str_01(L\"mykonos. . . or what?\");\n+std::wstring str_02(L\"paris, or sainte-maxime?\");\n+std::wstring str_03;\n+std::wstringbuf strb_01(str_01);\n+std::wstringbuf strb_02(str_02, std::ios_base::in);\n+std::wstringbuf strb_03(str_03, std::ios_base::out);\n+\n+// test overloaded virtual functions\n+void test04() \n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstring \t\tstr_tmp;\n+  std::wstringbuf \t\tstrb_tmp;\n+  typedef std::wstringbuf::int_type int_type;\n+  typedef std::wstringbuf::traits_type traits_type;\n+  typedef std::wstringbuf::pos_type pos_type;\n+  typedef std::wstringbuf::off_type off_type;\n+\n+  // PUT\n+  strb_03.str(str_01); //reset\n+  \n+  // BUFFER MANAGEMENT & POSITIONING\n+  // setbuf\n+  // pubsetbuf(char_type* s, streamsize n)\n+  str_tmp = std::wstring(L\"naaaah, go to cebu\");\n+  strb_01.pubsetbuf(const_cast<wchar_t*> (str_tmp.c_str()), str_tmp.size());\n+  VERIFY( strb_01.str() == str_tmp );\n+  strb_01.pubsetbuf(0,0);\n+  VERIFY( strb_01.str() == str_tmp );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "569cec2df395c70be268558c54a94356704450be", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/setbuf/wchar_t/2.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsetbuf%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsetbuf%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsetbuf%2Fwchar_t%2F2.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,45 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  wchar_t buf[512];\n+  const wchar_t* strlit = L\"how to tell a story and other essays: mark twain\";\n+  const size_t strlitsize = std::wcslen(strlit);\n+  wstringbuf sbuf;\n+\n+  sbuf.pubsetbuf(buf, 512);\n+  sbuf.sputn(strlit, strlitsize);\n+  VERIFY( std::wcsncmp(strlit, buf, strlitsize) == 0 );\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "952fe2c136189ebe2b78fb717b69d3796200f078", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/setbuf/wchar_t/3.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsetbuf%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsetbuf%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsetbuf%2Fwchar_t%2F3.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,45 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test02()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  wchar_t buf[512];\n+  const wchar_t* strlit = L\"how to tell a story and other essays: mark twain\";\n+  const size_t strlitsize = std::wcslen(strlit);\n+  wstring s(L\"tmp\");\n+  wstringbuf sbuf(s, ios_base::out);\n+  sbuf.pubsetbuf(buf, strlitsize);\n+  sbuf.sputn(strlit, strlitsize);\n+  VERIFY( std::wcsncmp(strlit, buf, strlitsize) == 0 );\n+}\n+\n+int main() \n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "5912b05ad8f32cefb22e38f082bedacf1cf2da56", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sgetc/wchar_t/1.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsgetc%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsgetc%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsgetc%2Fwchar_t%2F1.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,75 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == wchar_t\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+std::wstring str_01(L\"mykonos. . . or what?\");\n+std::wstring str_02(L\"paris, or sainte-maxime?\");\n+std::wstring str_03;\n+std::wstringbuf strb_01(str_01);\n+std::wstringbuf strb_02(str_02, std::ios_base::in);\n+std::wstringbuf strb_03(str_03, std::ios_base::out);\n+\n+// test overloaded virtual functions\n+void test04() \n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstring \t\tstr_tmp;\n+  std::wstringbuf \t\tstrb_tmp;\n+  std::streamoff  \t\tstrmof_1(-1), strmof_2;\n+  typedef std::wstringbuf::int_type int_type;\n+  typedef std::wstringbuf::traits_type traits_type;\n+  typedef std::wstringbuf::pos_type pos_type;\n+  typedef std::wstringbuf::off_type off_type;\n+\n+  // GET\n+  strmof_1 = strb_01.in_avail();\n+  strmof_2 = strb_02.in_avail();\n+  strmof_1 = strb_03.in_avail(); \n+\n+  int_type c3 = strb_01.sbumpc();\n+  int_type c4 = strb_02.sbumpc();\n+  int_type c5 = strb_03.sbumpc();\n+\n+  // int_type sgetc()\n+  // if read_cur not avail, return uflow(), else return *read_cur  \n+  int_type c6 = strb_01.sgetc();\n+  int_type c7 = strb_02.sgetc();\n+  VERIFY( c6 != c3 );\n+  VERIFY( c7 != c4 );\n+  int_type c8 = strb_01.sgetc();\n+  int_type c9 = strb_02.sgetc();\n+  VERIFY( c6 == c8 );\n+  VERIFY( c7 == c9 );\n+  c5 = strb_03.sgetc();\n+  VERIFY( c5 == traits_type::eof() );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "e03806831b38f18abce2cbb7e76bfd37625dcbaa", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sgetn/wchar_t/1.cc", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsgetn%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsgetn%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsgetn%2Fwchar_t%2F1.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,109 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == wchar_t\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+std::wstring str_01(L\"mykonos. . . or what?\");\n+std::wstring str_02(L\"paris, or sainte-maxime?\");\n+std::wstring str_03;\n+std::wstringbuf strb_01(str_01);\n+std::wstringbuf strb_02(str_02, std::ios_base::in);\n+std::wstringbuf strb_03(str_03, std::ios_base::out);\n+\n+// test overloaded virtual functions\n+void test04() \n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstring \t\tstr_tmp;\n+  std::wstringbuf \t\tstrb_tmp;\n+  std::streamsize \t\tstrmsz_1, strmsz_2;\n+  std::streamoff  \t\tstrmof_1(-1), strmof_2;\n+  typedef std::wstringbuf::int_type int_type;\n+  typedef std::wstringbuf::traits_type traits_type;\n+  typedef std::wstringbuf::pos_type pos_type;\n+  typedef std::wstringbuf::off_type off_type;\n+\n+  // GET\n+  strmof_1 = strb_01.in_avail();\n+  strmof_2 = strb_02.in_avail();\n+  strmof_1 = strb_03.in_avail(); \n+\n+  int_type c1 = strb_01.sbumpc();\n+  int_type c2 = strb_02.sbumpc();\n+  strb_01.sbumpc();\n+  int_type c4 = strb_02.sbumpc();\n+  int_type c5 = strb_03.sbumpc();\n+\n+  // int_type sgetc()\n+  // if read_cur not avail, return uflow(), else return *read_cur  \n+  int_type c6 = strb_01.sgetc();\n+  int_type c7 = strb_02.sgetc();\n+  strb_01.sgetc();\n+  strb_02.sgetc();\n+   c5 = strb_03.sgetc();\n+\n+  // int_type snextc()\n+  // calls sbumpc and if sbumpc != eof, return sgetc\n+  c6 = strb_01.snextc();\n+  c7 = strb_02.snextc();\n+  c5 = strb_03.snextc();\n+\n+  // streamsize sgetn(char_type *s, streamsize n)\n+  // streamsize xsgetn(char_type *s, streamsize n)\n+  // assign up to n chars to s from input sequence, indexing in_cur as\n+  // approp and returning the number of chars assigned\n+  strmsz_1 = strb_01.in_avail();\n+  strmsz_2 = strb_02.in_avail();\n+  test = strmsz_1 != strmsz_2;\n+  VERIFY( strmsz_1 != static_cast<std::streamsize>(str_01.length()) );\n+  // because now we've moved into string\n+  VERIFY( strmsz_2 != static_cast<std::streamsize>(str_02.length()) ); \n+  wchar_t carray1[11] = L\"\";\n+  strmsz_1 = strb_01.sgetn(carray1, 10);\n+  wchar_t carray2[20] = L\"\";\n+  strmsz_2 = strb_02.sgetn(carray2, 10);\n+  VERIFY( strmsz_1 == strmsz_2 );\n+  VERIFY( strmsz_1 == 10 );\n+  c1 = strb_01.sgetc();\n+  c2 = strb_02.sgetc();\n+  VERIFY( c6 == c1 ); //just by co-incidence both o's\n+  VERIFY( c7 != c2 ); // n != i\n+  VERIFY( c1 == str_01[13] );\n+  VERIFY( c2 == str_02[13] ); //should equal fourteenth letter at this point\n+  strmsz_1 = strb_03.sgetn(carray1, 10);\n+  VERIFY( !strmsz_1 ); //zero\n+  strmsz_1 = strb_02.in_avail();\n+  strmsz_2 = strb_02.sgetn(carray2, strmsz_1 + 5);\n+  VERIFY( strmsz_1 == strmsz_2 ); //write off the end\n+  c4 = strb_02.sgetc(); // should be EOF\n+  VERIFY( c4 == traits_type::eof() );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "fa82e656594487b5af158d1e9069d5968acbbbfa", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/snextc/wchar_t/1.cc", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsnextc%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsnextc%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsnextc%2Fwchar_t%2F1.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,83 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == wchar_t\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+std::wstring str_01(L\"mykonos. . . or what?\");\n+std::wstring str_02(L\"paris, or sainte-maxime?\");\n+std::wstring str_03;\n+std::wstringbuf strb_01(str_01);\n+std::wstringbuf strb_02(str_02, std::ios_base::in);\n+std::wstringbuf strb_03(str_03, std::ios_base::out);\n+\n+// test overloaded virtual functions\n+void test04() \n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstring \t\tstr_tmp;\n+  std::wstringbuf \t\tstrb_tmp;\n+  std::streamoff  \t\tstrmof_1(-1), strmof_2;\n+  typedef std::wstringbuf::int_type int_type;\n+  typedef std::wstringbuf::traits_type traits_type;\n+  typedef std::wstringbuf::pos_type pos_type;\n+  typedef std::wstringbuf::off_type off_type;\n+\n+  // GET\n+  strmof_1 = strb_01.in_avail();\n+  strmof_2 = strb_02.in_avail();\n+  strmof_1 = strb_03.in_avail(); \n+\n+  strb_01.sbumpc();\n+  strb_02.sbumpc();\n+  strb_01.sbumpc();\n+  strb_02.sbumpc();\n+  int_type c5 = strb_03.sbumpc();\n+\n+  // int_type sgetc()\n+  // if read_cur not avail, return uflow(), else return *read_cur  \n+  int_type c6 = strb_01.sgetc();\n+  int_type c7 = strb_02.sgetc();\n+  int_type c8 = strb_01.sgetc();\n+  int_type c9 = strb_02.sgetc();\n+  c5 = strb_03.sgetc();\n+\n+  // int_type snextc()\n+  // calls sbumpc and if sbumpc != eof, return sgetc\n+  c6 = strb_01.snextc();\n+  c7 = strb_02.snextc();\n+  VERIFY( c6 != c8 );\n+  VERIFY( c7 != c9 );\n+  VERIFY( c6 == str_01[3] );\n+  VERIFY( c7 == str_02[3] ); //should equal fourth letter at this point\n+  c5 = strb_03.snextc();\n+  VERIFY( c5 == traits_type::eof() );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "a6e8ae623797405096f6c1e36852780b0e10994e", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sputbackc/wchar_t/1.cc", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputbackc%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputbackc%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputbackc%2Fwchar_t%2F1.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,120 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == wchar_t\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+std::wstring str_01(L\"mykonos. . . or what?\");\n+std::wstring str_02(L\"paris, or sainte-maxime?\");\n+std::wstring str_03;\n+std::wstringbuf strb_01(str_01);\n+std::wstringbuf strb_02(str_02, std::ios_base::in);\n+std::wstringbuf strb_03(str_03, std::ios_base::out);\n+\n+// test overloaded virtual functions\n+void test04() \n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstring \t\tstr_tmp, str_tmp2;\n+  std::wstringbuf \t\tstrb_tmp;\n+  std::streamsize \t\tstrmsz_1, strmsz_2;\n+  typedef std::wstringbuf::int_type int_type;\n+  typedef std::wstringbuf::traits_type traits_type;\n+  typedef std::wstringbuf::pos_type pos_type;\n+  typedef std::wstringbuf::off_type off_type;\n+\n+  int_type c1 = strb_01.sbumpc();\n+  int_type c2 = strb_02.sbumpc();\n+  int_type c3 = strb_01.sbumpc();\n+  int_type c4 = strb_02.sbumpc();\n+\n+  // PUT\n+  strb_03.str(str_01); //reset\n+  std::wstring::size_type sz1 = strb_03.str().length();\n+  std::wstring::size_type sz2 = strb_03.str().length();\n+  \n+  // streamsize sputn(const char_typs* s, streamsize n)\n+  // write up to n chars to out_cur from s, returning number assigned\n+  // NB *sputn will happily put '\\0' into your stream if you give it a chance*\n+  str_tmp = strb_03.str();\n+  sz1 = str_tmp.length();\n+  strmsz_1 = strb_03.sputn(L\"racadabras\", 10);//\"abracadabras or what?\"\n+  sz2 = strb_03.str().length();\n+  strmsz_2 = strb_03.sputn(L\", i wanna reach out and\", 10);\n+  sz2 = strb_03.str().length();\n+  str_tmp = strb_02.str();\n+  strmsz_1 = strb_02.sputn(L\"racadabra\", 10);\n+\n+  // PUTBACK\n+\n+  // int_type sputbackc(char_type c)\n+  // if in_cur not avail || ! traits::eq(c, gptr() [-1]), return pbfail\n+  // otherwise decrements in_cur and returns *gptr()\n+  strmsz_1 = strb_01.in_avail();\n+  str_tmp = strb_01.str();\n+  c1 = strb_01.sgetc(); //\"mykonos. . . 'o'r what?\"\n+  c2 = strb_01.sputbackc(L'z');//\"mykonos. . .zor what?\"\n+  c3 = strb_01.sgetc();\n+  str_tmp2 = strb_01.str();\n+  VERIFY( c1 != c2 );\n+  VERIFY( c3 == c2 );\n+  VERIFY( str_tmp2 == std::wstring(L\"mzkonos. . . or what?\") );\n+  VERIFY( str_tmp.size() == str_tmp2.size() );\n+  //test for _in_cur == _in_beg\n+  strb_01.str(str_tmp);\n+  strmsz_1 = strb_01.in_avail();\n+  c1 = strb_01.sgetc(); //\"'m'ykonos. . . or what?\"\n+  c2 = strb_01.sputbackc(L'z');//\"mykonos. . . or what?\"\n+  c3 = strb_01.sgetc();\n+  VERIFY( c1 != c2 );\n+  VERIFY( c3 != c2 );\n+  VERIFY( c1 == c3 );\n+  VERIFY( c2 == traits_type::eof() );\n+  VERIFY( strb_01.str() == str_tmp );\n+  VERIFY( str_tmp.size() == strb_01.str().size() );\n+  // test for replacing char with identical one\n+  strb_01.str(str_01); //reset\n+  strmsz_1 = strb_01.in_avail();\n+  strb_01.sbumpc();\n+  strb_01.sbumpc();\n+  c1 = strb_01.sgetc(); //\"my'k'onos. . . or what?\"\n+  c2 = strb_01.sputbackc(L'y');//\"mykonos. . . or what?\"\n+  c3 = strb_01.sgetc();\n+  VERIFY( c1 != c2 );\n+  VERIFY( c3 == c2 );\n+  VERIFY( c1 != c3 );\n+  VERIFY( strb_01.str() == str_01 );\n+  VERIFY( str_01.size() == strb_01.str().size() );\n+  //test for ios_base::out\n+  strmsz_2 = strb_03.in_avail();\n+  c4 = strb_03.sputbackc(L'x');\n+  VERIFY( c4 == traits_type::eof() );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "0ac6d87999610afc4b6853665d6cd693d90ac0a6", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sputbackc/wchar_t/9425.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputbackc%2Fwchar_t%2F9425.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputbackc%2Fwchar_t%2F9425.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputbackc%2Fwchar_t%2F9425.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,43 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9439, libstdc++/9425\n+// basic_filebuf<>::pbackfail calls basic_filebuf<>::seekoff, but\n+// fails to check the return value\n+void test09()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  wstringbuf sbuf;\n+  wstringbuf::int_type r = sbuf.sputbackc(L'a');\n+  VERIFY( r == wstringbuf::traits_type::eof() );\n+}\n+\n+int main() \n+{\n+  test09();\n+  return 0;\n+}"}, {"sha": "2c749711ab435342bba566e09eab3ff0ab84b41d", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sputc/wchar_t/1.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputc%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputc%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputc%2Fwchar_t%2F1.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,71 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == wchar_t\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+std::wstring str_01(L\"mykonos. . . or what?\");\n+std::wstring str_02(L\"paris, or sainte-maxime?\");\n+std::wstring str_03;\n+std::wstringbuf strb_01(str_01);\n+std::wstringbuf strb_02(str_02, std::ios_base::in);\n+std::wstringbuf strb_03(str_03, std::ios_base::out);\n+\n+// test overloaded virtual functions\n+void test04() \n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstring \t\tstr_tmp;\n+  std::wstringbuf \t\tstrb_tmp;\n+  typedef std::wstringbuf::int_type int_type;\n+  typedef std::wstringbuf::traits_type traits_type;\n+  typedef std::wstringbuf::pos_type pos_type;\n+  typedef std::wstringbuf::off_type off_type;\n+\n+  int_type c1 = strb_01.sbumpc();\n+  int_type c2 = strb_02.sbumpc();\n+  int_type c3 = strb_01.sbumpc();\n+\n+  // PUT\n+  // int_type sputc(char_type c)\n+  // if out_cur not avail, return overflow. Else, stores c at out_cur,\n+  // increments out_cur, and returns c as int_type\n+  strb_03.str(str_01); //reset\n+  std::wstring::size_type sz1 = strb_03.str().length();\n+  c1 = strb_03.sputc(L'a'); \n+  std::wstring::size_type sz2 = strb_03.str().length();\n+  VERIFY( sz1 == sz2 ); //cuz inserting at out_cur, which is at beg to start\n+  c2 = strb_03.sputc(L'b'); \n+  VERIFY( c1 != c2 );\n+  VERIFY( strb_03.str() != str_01 );\n+  c3 = strb_02.sputc(L'a'); // should be EOF because this is read-only\n+  VERIFY( c3 == traits_type::eof() );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "3fb14751a8f6d538faea31ce49be4b509c8fa38b", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sputc/wchar_t/1057.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputc%2Fwchar_t%2F1057.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputc%2Fwchar_t%2F1057.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputc%2Fwchar_t%2F1057.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,62 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <string>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+class nullsetpbuf : public std::wstringbuf\n+{\n+  wchar_t foo[64];\n+public:\n+  nullsetpbuf()\n+  {\n+    setp(foo, foo + 64);\n+    setp(NULL, NULL);\n+  }\n+};\n+\n+// libstdc++/1057\n+void test05()\n+{\n+  std::wstring text1 = L\"abcdefghijklmn\";\n+  \n+  nullsetpbuf nsp;\n+  // Immediate crash as sputc writes to null pointer\n+  nsp.sputc(L'a');\n+}\n+\n+int main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "d3da54edf6fa94395365c748c79ab8cbbc3a6969", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sputc/wchar_t/9404-1.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputc%2Fwchar_t%2F9404-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputc%2Fwchar_t%2F9404-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputc%2Fwchar_t%2F9404-1.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,73 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1.3 Overridden virtual functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+bool over_called;\n+\n+class Derived_stringbuf : public std::wstringbuf\n+{\n+public:\n+  int_type overflow(int_type c)\n+  {\n+    over_called = true;\n+    return std::wstringbuf::overflow(c);\n+  }\n+  \n+  const char_type* pub_epptr() const\n+  {\n+    return epptr();\n+  }\n+  \n+  const char_type* pub_pptr() const\n+  {\n+    return pptr();\n+  }\n+};\n+\n+// libstdc++/9404\n+void test04()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  bool over_expected;\n+\n+  // sputc\n+  Derived_stringbuf dsbuf_01;\n+  over_called = false;\n+  dsbuf_01.sputc(L'i');\n+  VERIFY( over_called );\n+  over_expected = dsbuf_01.pub_epptr() == dsbuf_01.pub_pptr();\n+  over_called = false;\n+  dsbuf_01.sputc(L'v');\n+  VERIFY( (!over_expected && !over_called)\n+\t  || (over_expected && over_called) );\n+  dsbuf_01.sputc(L'i');\n+  VERIFY( dsbuf_01.str() == L\"ivi\" ); // Sanity check.\n+}\n+\n+int main() \n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "450c2e70c981830a53a2ce8dab55661e213ba832", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sputn/wchar_t/1.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputn%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputn%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputn%2Fwchar_t%2F1.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,80 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == wchar_t\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+std::wstring str_01(L\"mykonos. . . or what?\");\n+std::wstring str_02(L\"paris, or sainte-maxime?\");\n+std::wstring str_03;\n+std::wstringbuf strb_01(str_01);\n+std::wstringbuf strb_02(str_02, std::ios_base::in);\n+std::wstringbuf strb_03(str_03, std::ios_base::out);\n+\n+// test overloaded virtual functions\n+void test04() \n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstring \t\tstr_tmp;\n+  std::wstringbuf \t\tstrb_tmp;\n+  std::streamsize \t\tstrmsz_1, strmsz_2;\n+  typedef std::wstringbuf::int_type int_type;\n+  typedef std::wstringbuf::traits_type traits_type;\n+  typedef std::wstringbuf::pos_type pos_type;\n+  typedef std::wstringbuf::off_type off_type;\n+\n+  // PUT\n+  strb_03.str(str_01); //reset\n+  std::wstring::size_type sz1 = strb_03.str().length();\n+  std::wstring::size_type sz2 = strb_03.str().length();\n+  \n+  // streamsize sputn(const char_type* s, streamsize n)\n+  // write up to n chars to out_cur from s, returning number assigned\n+  // NB *sputn will happily put '\\0' into your stream if you give it a chance*\n+  str_tmp = strb_03.str();\n+  sz1 = str_tmp.length();\n+  strmsz_1 = strb_03.sputn(L\"racadabras\", 10);//\"abracadabras or what?\"\n+  sz2 = strb_03.str().length();\n+  VERIFY( sz1 == sz2 ); //shouldn't have changed length\n+  VERIFY( strmsz_1 == 10 );\n+  VERIFY( str_tmp != strb_03.str() );\n+  strmsz_2 = strb_03.sputn(L\", i wanna reach out and\", 23);\n+  VERIFY( strmsz_1 != strmsz_2 ); // should re-allocate, copy 10 chars.\n+  VERIFY( strmsz_1 == 10 );\n+  VERIFY( strmsz_2 == 23 );\n+  sz2 = strb_03.str().length();\n+  VERIFY( sz1 != sz2 ); // need to change length\n+  VERIFY( str_tmp != strb_03.str() );\n+  str_tmp = strb_02.str();\n+  strmsz_1 = strb_02.sputn(L\"racadabra\", 10);\n+  VERIFY( strmsz_1 == 0 );  \n+  VERIFY( str_tmp == strb_02.str() );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "7d0b2d56e184e621728ca8f54c6aed387fcb918b", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sputn/wchar_t/1057.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputn%2Fwchar_t%2F1057.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputn%2Fwchar_t%2F1057.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputn%2Fwchar_t%2F1057.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,62 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <string>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+class nullsetpbuf : public std::wstringbuf\n+{\n+  wchar_t foo[64];\n+public:\n+  nullsetpbuf()\n+  {\n+    setp(foo, foo + 64);\n+    setp(NULL, NULL);\n+  }\n+};\n+\n+// libstdc++/1057\n+void test05()\n+{\n+  std::wstring text1 = L\"abcdefghijklmn\";\n+  \n+  nullsetpbuf nsp;\n+  // Immediate crash as xsputn writes to null pointer\n+  nsp.sputn(text1.c_str(), text1.length());\n+}\n+\n+int main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "1c448d1f3a31963d59fe432bc8433f73e82ec7b3", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sputn/wchar_t/9404-2.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputn%2Fwchar_t%2F9404-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputn%2Fwchar_t%2F9404-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsputn%2Fwchar_t%2F9404-2.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,73 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1.3 Overridden virtual functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+bool over_called;\n+\n+class Derived_stringbuf : public std::wstringbuf\n+{\n+public:\n+  int_type overflow(int_type c)\n+  {\n+    over_called = true;\n+    return std::wstringbuf::overflow(c);\n+  }\n+  \n+  const char_type* pub_epptr() const\n+  {\n+    return epptr();\n+  }\n+  \n+  const char_type* pub_pptr() const\n+  {\n+    return pptr();\n+  }\n+};\n+\n+// libstdc++/9404\n+void test04()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  bool over_expected;\n+  Derived_stringbuf dsbuf_01;\n+\n+  // sputn\n+  Derived_stringbuf dsbuf_02;\n+  over_called = false;\n+  dsbuf_02.sputn(L\"sonne's\", 7);\n+  VERIFY( over_called );\n+  over_expected = dsbuf_02.pub_epptr() == dsbuf_02.pub_pptr();\n+  over_called = false;\n+  dsbuf_02.sputn(L\" peak\", 5);\n+  VERIFY( (!over_expected && !over_called)\n+\t  || (over_expected && over_called) );\n+  VERIFY( dsbuf_02.str() == L\"sonne's peak\" ); // Sanity check.\n+}\n+\n+int main() \n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "4c89bc932c7d94c5b439fbc50ee9ec955f705d3d", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/str/wchar_t/1.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fwchar_t%2F1.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,74 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == wchar_t\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+std::wstring str_01(L\"mykonos. . . or what?\");\n+std::wstring str_02(L\"paris, or sainte-maxime?\");\n+std::wstring str_03;\n+std::wstringbuf strb_01(str_01);\n+std::wstringbuf strb_02(str_02, std::ios_base::in);\n+std::wstringbuf strb_03(str_03, std::ios_base::out);\n+\n+// test member functions\n+void test03() \n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  // stringbuf::str()\n+  VERIFY( strb_01.str() == str_01 );\n+  VERIFY( strb_02.str() == str_02 );\n+  VERIFY( strb_03.str() == str_03 );\n+ \n+  // stringbuf::str(string&)\n+  strb_03.str(L\"none of the above, go to the oberoi in cairo, egypt.\");\n+  strb_03.str(str_01);\n+  std::streamsize d1 = strb_01.in_avail();\n+  std::streamsize d2 = strb_03.in_avail();\n+  VERIFY( d1 ); // non-zero\n+  VERIFY( !d2 ); // zero, cuz ios_base::out\n+  VERIFY( d1 != d2 ); //these should be the same\n+  VERIFY( static_cast<std::streamsize>(str_01.length()) == d1 );  \n+  VERIFY( strb_01.str() == strb_03.str() ); //ditto\n+\n+  // stringbuf::str(string&) and stringbuf::stringbuf(string&), where the\n+  // string in question contains embedded NUL characters.  Note that in this\n+  // embedded-NUL situation, the size must be passed to the string ctor.\n+  std::wstring str_nulls(L\"eschew \\0 obfuscation\", 20);  // tested in 21_strings\n+  std::wstringbuf strb_normal(str_01);\n+  std::wstringbuf strb_nulls(str_nulls);\n+  strb_normal.str(str_nulls);  // tried using 'strb_01' rather than declaring\n+                               // another variable, but then test04 broke!\n+  VERIFY( strb_nulls.in_avail() == static_cast<std::streamsize>(str_nulls.size())  );\n+  VERIFY( strb_nulls.str().size() == 20 );\n+  VERIFY( strb_normal.in_avail() == static_cast<std::streamsize>(str_nulls.size()) );\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "fafd423b681950be2be39113e1082f0ce8fadb5f", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/str/wchar_t/2.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fwchar_t%2F2.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,55 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == wchar_t\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// http://gcc.gnu.org/ml/libstdc++/2003-02/msg00269.html\n+// Growing and then seeking to ios_base::beg triggered a bug in str(),\n+// which didn't notice the grow.\n+void test07()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::wstringbuf strb_01;\n+  strb_01.sputc(L's');\n+  strb_01.pubseekoff(0, std::ios_base::beg);\n+  std::wstring tmp = strb_01.str();\n+  VERIFY( tmp == L\"s\" );\n+\n+  std::wstring str(L\"strivi,\");\n+  std::wstringbuf strb_02(str);\n+  strb_02.pubseekoff(0, std::ios_base::end);\n+  strb_02.sputn(L\" no better!\", 11);\n+  strb_02.pubseekoff(0, std::ios_base::beg);\n+  tmp = strb_02.str();\n+  VERIFY( tmp == L\"strivi, no better!\" );\n+}\n+\n+int main()\n+{\n+  test07();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "3100de7ecbc6831e736349cd3378bad5d2dd9610", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/str/wchar_t/3.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fwchar_t%2F3.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,43 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == wchar_t\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test06()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::wostringstream os (L\"foo\", std::ios_base::app);\n+  os << L\"bar\";\n+\n+  VERIFY( os.str() == L\"foobar\" );\n+}\n+\n+int main()\n+{\n+  test06();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "c638128d0d245a9076f13d319510beda7f5dda54", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/str/wchar_t/3955.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fwchar_t%2F3955.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fwchar_t%2F3955.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fwchar_t%2F3955.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,44 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == wchar_t\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/3955 -- ios_base::app overwrites from the beginning\n+void test05()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::wostringstream os (L\"foo\");\n+  os << L\"bar\";\n+\n+  VERIFY( os.str() == L\"bar\" );\n+}\n+\n+int main()\n+{\n+  test05();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "a25ded4362b720ed59080dc81b0a5640e27c6c46", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sungetc/wchar_t/1.cc", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsungetc%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsungetc%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsungetc%2Fwchar_t%2F1.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,149 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == wchar_t\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+std::wstring str_01(L\"mykonos. . . or what?\");\n+std::wstring str_02(L\"paris, or sainte-maxime?\");\n+std::wstring str_03;\n+std::wstringbuf strb_01(str_01);\n+std::wstringbuf strb_02(str_02, std::ios_base::in);\n+std::wstringbuf strb_03(str_03, std::ios_base::out);\n+\n+// test overloaded virtual functions\n+void test04() \n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstring \t\tstr_tmp;\n+  std::wstringbuf \t\tstrb_tmp;\n+  std::streamsize \t\tstrmsz_1, strmsz_2;\n+  typedef std::wstringbuf::int_type int_type;\n+  typedef std::wstringbuf::traits_type traits_type;\n+  typedef std::wstringbuf::pos_type pos_type;\n+  typedef std::wstringbuf::off_type off_type;\n+\n+  int_type c1 = strb_01.sbumpc();\n+  int_type c2 = strb_02.sbumpc();\n+  int_type c3 = strb_01.sbumpc();\n+  int_type c4 = strb_02.sbumpc();\n+\n+  // PUT\n+  strb_03.str(str_01); //reset\n+  std::wstring::size_type sz1 = strb_03.str().length();\n+  std::wstring::size_type sz2 = strb_03.str().length();\n+  \n+  // streamsize sputn(const char_typs* s, streamsize n)\n+  // write up to n chars to out_cur from s, returning number assigned\n+  // NB *sputn will happily put '\\0' into your stream if you give it a chance*\n+  str_tmp = strb_03.str();\n+  sz1 = str_tmp.length();\n+  strmsz_1 = strb_03.sputn(L\"racadabras\", 10);//\"abracadabras or what?\"\n+  sz2 = strb_03.str().length();\n+  strmsz_2 = strb_03.sputn(L\", i wanna reach out and\", 10);\n+  sz2 = strb_03.str().length();\n+  str_tmp = strb_02.str();\n+  strmsz_1 = strb_02.sputn(L\"racadabra\", 10);\n+\n+  // PUTBACK\n+\n+  // int_type sputbackc(char_type c)\n+  // if in_cur not avail || ! traits::eq(c, gptr() [-1]), return pbfail\n+  // otherwise decrements in_cur and returns *gptr()\n+  strmsz_1 = strb_01.in_avail();\n+  str_tmp = strb_01.str();\n+  c1 = strb_01.sgetc(); //\"mykonos. . . 'o'r what?\"\n+  c2 = strb_01.sputbackc('z');//\"mykonos. . .zor what?\"\n+  c3 = strb_01.sgetc();\n+  //test for _in_cur == _in_beg\n+  strb_01.str(str_tmp);\n+  strmsz_1 = strb_01.in_avail();\n+  c1 = strb_01.sgetc(); //\"'m'ykonos. . . or what?\"\n+  c2 = strb_01.sputbackc(L'z');//\"mykonos. . . or what?\"\n+  c3 = strb_01.sgetc();\n+  // test for replacing char with identical one\n+  strb_01.str(str_01); //reset\n+  strmsz_1 = strb_01.in_avail();\n+  strb_01.sbumpc();\n+  strb_01.sbumpc();\n+  c1 = strb_01.sgetc(); //\"my'k'onos. . . or what?\"\n+  c2 = strb_01.sputbackc(L'y');//\"mykonos. . . or what?\"\n+  c3 = strb_01.sgetc();\n+  //test for ios_base::out\n+  strmsz_2 = strb_03.in_avail();\n+  c4 = strb_03.sputbackc(L'x');\n+\n+  // int_type sungetc()\n+  // if in_cur not avail, return pbackfail(), else decrement and\n+  // return to_int_type(*gptr())\n+  for (int i = 0; i<12; ++i)\n+    strb_01.sbumpc();\n+  strmsz_1 = strb_01.in_avail();\n+  str_tmp = strb_01.str();\n+  c1 = strb_01.sgetc(); //\"mykonos. . . 'o'r what?\"\n+  c2 = strb_01.sungetc();//\"mykonos. . . or what?\"\n+  c3 = strb_01.sgetc();\n+  VERIFY( c1 != c2 );\n+  VERIFY( c3 == c2 );\n+  VERIFY( c1 != c3 );\n+  VERIFY( c2 == L' ' );\n+  VERIFY( strb_01.str() == str_01 );\n+  VERIFY( str_01.size() == strb_01.str().size() );\n+  //test for _in_cur == _in_beg\n+  strb_01.str(str_tmp);\n+  strmsz_1 = strb_01.in_avail();\n+  c1 = strb_01.sgetc(); //\"'m'ykonos. . . or what?\"\n+  c2 = strb_01.sungetc();//\"mykonos. . . or what?\"\n+  c3 = strb_01.sgetc();\n+  VERIFY( c1 != c2 );\n+  VERIFY( c3 != c2 );\n+  VERIFY( c1 == c3 );\n+  VERIFY( c2 == traits_type::eof() );\n+  VERIFY( strb_01.str() == str_01 );\n+  VERIFY( str_01.size() == strb_01.str().size() );\n+  // test for replacing char with identical one\n+  strb_01.str(str_01); //reset\n+  strmsz_1 = strb_01.in_avail();\n+  strb_01.sbumpc();\n+  strb_01.sbumpc();\n+  c1 = strb_01.sgetc(); //\"my'k'onos. . . or what?\"\n+  c2 = strb_01.sungetc();//\"mykonos. . . or what?\"\n+  c3 = strb_01.sgetc();\n+  VERIFY( c1 != c2 );\n+  VERIFY( c3 == c2 );\n+  VERIFY( c1 != c3 );\n+  VERIFY( strb_01.str() == str_01 );\n+  VERIFY( str_01.size() == strb_01.str().size() );\n+  //test for ios_base::out\n+  strmsz_2 = strb_03.in_avail();\n+  c4 = strb_03.sungetc();\n+  VERIFY( c4 == traits_type::eof() );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "c84e3318d90ffd8b45da0d853ba443d7a8c1b667", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/sync/wchar_t/1057.cc", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsync%2Fwchar_t%2F1057.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf4ab23be149358053e63587d1c09e7d001088f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsync%2Fwchar_t%2F1057.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fsync%2Fwchar_t%2F1057.cc?ref=1bf4ab23be149358053e63587d1c09e7d001088f", "patch": "@@ -0,0 +1,109 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+class setpbuf : public std::wstringbuf\n+{\n+  wchar_t \tbuffer[4];\n+  std::wstring \tresult;\n+\n+public:\n+\n+  std::wstring&\n+  get_result()\n+  { return result; }\n+\n+  setpbuf()\n+  {\n+    wchar_t foo [32];\n+    setp(foo, foo + 32);\n+    setp(buffer, buffer + 4);\n+  }\n+\n+  ~setpbuf()\n+  { sync(); }\n+\n+  virtual int_type \n+  overflow(int_type n)\n+  {\n+    if (sync() != 0)\n+      return traits_type::eof();\n+    \n+    result += traits_type::to_char_type(n);\n+    \n+    return n;\n+  }\n+  \n+  virtual int \n+  sync()\n+  {\n+    result.append(pbase(), pptr());\n+    setp(buffer, buffer + 4);\n+    return 0;\n+  }\n+};\n+\n+// libstdc++/1057\n+void test04()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstring text = L\"abcdefghijklmn\";\n+  \n+  // 01\n+  setpbuf sp1;\n+  // Here xsputn writes over sp1.result\n+  sp1.sputn(text.c_str(), text.length());\n+\n+  // This crashes when result is accessed\n+  sp1.pubsync();\n+  VERIFY( sp1.get_result() == text );\n+  \n+  // 02\n+  setpbuf sp2;\n+  for (std::wstring::size_type i = 0; i < text.length(); ++i)\n+    {\n+      // sputc also writes over result\n+      sp2.sputc(text[i]);\n+    }\n+  \n+  // Crash here\n+  sp2.pubsync();\n+  VERIFY( sp2.get_result() == text );\n+}\n+\n+int main() \n+{\n+  test04();\n+  return 0;\n+}"}]}