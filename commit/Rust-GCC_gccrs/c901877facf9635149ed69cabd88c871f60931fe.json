{"sha": "c901877facf9635149ed69cabd88c871f60931fe", "node_id": "C_kwDOANBUbNoAKGM5MDE4NzdmYWNmOTYzNTE0OWVkNjljYWJkODhjODcxZjYwOTMxZmU", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-05-26T09:06:01Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-04T07:45:55Z"}, "message": "[Ada] Call-initialize all controlled objects in place\n\nThis changes the compiler to build in place almost all objects that need\nfinalization and are initialized with the result of a function call, thus\nsaving a pair of Adjust/Finalize calls for the anonymous return object.\n\ngcc/ada/\n\n\t* exp_ch3.adb (Expand_N_Object_Declaration): Don't adjust the object\n\tif the expression is a function call.\n\t<Rewrite_As_Renaming>: Return true if the object needs finalization\n\tand is initialized  with the result of a function call returned on\n\tthe secondary stack.\n\t* exp_ch6.adb (Expand_Ctrl_Function_Call): Add Use_Sec_Stack boolean\n\tparameter.  Early return if the parent is an object declaration and\n\tUse_Sec_Stack is false.\n\t(Expand_Call_Helper): Adjust call to Expand_Ctrl_Function_Call.\n\t* exp_ch7.adb (Find_Last_Init): Be prepared for initialization still\n\tpresent in the object declaration.\n\t* sem_ch3.adb (Analyze_Object_Declaration): Call the predicates\n\tNeeds_Secondary_Stack and Needs_Finalization to guard the renaming\n\toptimization.", "tree": {"sha": "507d544b31199e0fd649a8c297653e6120f02eae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/507d544b31199e0fd649a8c297653e6120f02eae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c901877facf9635149ed69cabd88c871f60931fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c901877facf9635149ed69cabd88c871f60931fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c901877facf9635149ed69cabd88c871f60931fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c901877facf9635149ed69cabd88c871f60931fe/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb6e8a7acd1b8ecf36489e01cafad61add528f23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb6e8a7acd1b8ecf36489e01cafad61add528f23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb6e8a7acd1b8ecf36489e01cafad61add528f23"}], "stats": {"total": 98, "additions": 56, "deletions": 42}, "files": [{"sha": "12173ae166e849ff8cb1dea593e5426a96d0c479", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c901877facf9635149ed69cabd88c871f60931fe/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c901877facf9635149ed69cabd88c871f60931fe/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=c901877facf9635149ed69cabd88c871f60931fe", "patch": "@@ -6810,28 +6810,25 @@ package body Exp_Ch3 is\n \n          --  If the object declaration appears in the form\n \n-         --    Obj : Ctrl_Typ := Func (...);\n+         --    Obj : Typ := Func (...);\n \n-         --  where Ctrl_Typ is controlled but not immutably limited type, then\n-         --  the expansion of the function call should use a dereference of the\n-         --  result to reference the value on the secondary stack.\n+         --  where Typ both needs finalization and is returned on the secondary\n+         --  stack, the object declaration can be rewritten into a dereference\n+         --  of the reference to the result built on the secondary stack (see\n+         --  Expand_Ctrl_Function_Call for this expansion of the call):\n \n-         --    Obj : Ctrl_Typ renames Func (...).all;\n+         --    type Axx is access all Typ;\n+         --    Rxx : constant Axx := Func (...)'reference;\n+         --    Obj : Typ renames Rxx.all;\n \n-         --  As a result, the call avoids an extra copy. This an optimization,\n-         --  but it is required for passing ACATS tests in some cases where it\n-         --  would otherwise make two copies. The RM allows removing redunant\n-         --  Adjust/Finalize calls, but does not allow insertion of extra ones.\n+         --  This avoids an extra copy and the pair of Adjust/Finalize calls.\n \n-         --  This part is disabled for now, because it breaks GNAT Studio\n-         --  builds\n-\n-         (False -- ???\n+         (not Is_Library_Level_Entity (Def_Id)\n             and then Nkind (Expr_Q) = N_Explicit_Dereference\n             and then not Comes_From_Source (Expr_Q)\n             and then Nkind (Original_Node (Expr_Q)) = N_Function_Call\n-            and then Nkind (Object_Definition (N)) in N_Has_Entity\n-            and then (Needs_Finalization (Entity (Object_Definition (N)))))\n+            and then Needs_Finalization (Typ)\n+            and then not Is_Class_Wide_Type (Typ))\n \n            --  If the initializing expression is for a variable with attribute\n            --  OK_To_Rename set, then transform:\n@@ -6843,8 +6840,7 @@ package body Exp_Ch3 is\n            --     Obj : Typ renames Expr;\n \n            --  provided that Obj is not aliased. The aliased case has to be\n-           --  excluded in general because Expr will not be aliased in\n-           --  general.\n+           --  excluded in general because Expr will not be aliased in general.\n \n            or else\n              (not Aliased_Present (N)\n@@ -6853,7 +6849,7 @@ package body Exp_Ch3 is\n                and then OK_To_Rename (Entity (Expr_Q))\n                and then Is_Entity_Name (Obj_Def));\n       begin\n-         --  Return False if there are any aspect specifications, because\n+         --  ??? Return False if there are any aspect specifications, because\n          --  otherwise we duplicate that corresponding implicit attribute\n          --  definition, and call Insert_Action, which has no place to insert\n          --  the attribute definition. The attribute definition is stored in\n@@ -7423,16 +7419,18 @@ package body Exp_Ch3 is\n                end if;\n             end if;\n \n-            --  If the type is controlled and not inherently limited, then\n-            --  the target is adjusted after the copy and attached to the\n-            --  finalization list. However, no adjustment is done in the case\n-            --  where the object was initialized by a call to a function whose\n-            --  result is built in place, since no copy occurred. Similarly, no\n-            --  adjustment is required if we are going to rewrite the object\n-            --  declaration into a renaming declaration.\n+            --  If the type needs finalization and is not inherently limited,\n+            --  then the target is adjusted after the copy and attached to the\n+            --  finalization list. However, no adjustment is needed in the case\n+            --  where the object has been initialized by a call to a function\n+            --  returning on the primary stack (see Expand_Ctrl_Function_Call)\n+            --  since no copy occurred, given that the type is by-reference.\n+            --  Similarly, no adjustment is needed if we are going to rewrite\n+            --  the object declaration into a renaming declaration.\n \n             if Needs_Finalization (Typ)\n               and then not Is_Limited_View (Typ)\n+              and then Nkind (Expr_Q) /= N_Function_Call\n               and then not Rewrite_As_Renaming\n             then\n                Adj_Call :="}, {"sha": "77e20bcfecb8bcbdd7ebb3bad7c0a9f32fb2f4eb", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c901877facf9635149ed69cabd88c871f60931fe/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c901877facf9635149ed69cabd88c871f60931fe/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=c901877facf9635149ed69cabd88c871f60931fe", "patch": "@@ -247,10 +247,10 @@ package body Exp_Ch6 is\n    procedure Expand_Call_Helper (N : Node_Id; Post_Call : out List_Id);\n    --  Does the main work of Expand_Call. Post_Call is as for Expand_Actuals.\n \n-   procedure Expand_Ctrl_Function_Call (N : Node_Id);\n+   procedure Expand_Ctrl_Function_Call (N : Node_Id; Use_Sec_Stack : Boolean);\n    --  N is a function call which returns a controlled object. Transform the\n    --  call into a temporary which retrieves the returned object from the\n-   --  secondary stack using 'reference.\n+   --  primary or secondary stack (Use_Sec_Stack says which) using 'reference.\n \n    procedure Expand_Non_Function_Return (N : Node_Id);\n    --  Expand a simple return statement found in a procedure body, entry body,\n@@ -4916,7 +4916,7 @@ package body Exp_Ch6 is\n       --  different processing applies. If the call is to a protected function,\n       --  the expansion above will call Expand_Call recursively. Otherwise the\n       --  function call is transformed into a reference to the result that has\n-      --  been built either on the return or the secondary stack.\n+      --  been built either on the primary or the secondary stack.\n \n       if Needs_Finalization (Etype (Subp)) then\n          if not Is_Build_In_Place_Function_Call (Call_Node)\n@@ -4925,7 +4925,8 @@ package body Exp_Ch6 is\n                or else\n                  not Is_Concurrent_Record_Type (Etype (First_Formal (Subp))))\n          then\n-            Expand_Ctrl_Function_Call (Call_Node);\n+            Expand_Ctrl_Function_Call\n+              (Call_Node, Needs_Secondary_Stack (Etype (Subp)));\n \n          --  Build-in-place function calls which appear in anonymous contexts\n          --  need a transient scope to ensure the proper finalization of the\n@@ -4956,7 +4957,10 @@ package body Exp_Ch6 is\n    -- Expand_Ctrl_Function_Call --\n    -------------------------------\n \n-   procedure Expand_Ctrl_Function_Call (N : Node_Id) is\n+   procedure Expand_Ctrl_Function_Call (N : Node_Id; Use_Sec_Stack : Boolean)\n+   is\n+      Par : constant Node_Id := Parent (N);\n+\n       function Is_Element_Reference (N : Node_Id) return Boolean;\n       --  Determine whether node N denotes a reference to an Ada 2012 container\n       --  element.\n@@ -4981,12 +4985,19 @@ package body Exp_Ch6 is\n    --  Start of processing for Expand_Ctrl_Function_Call\n \n    begin\n-      --  Optimization, if the returned value (which is on the sec-stack) is\n-      --  returned again, no need to copy/readjust/finalize, we can just pass\n-      --  the value thru (see Expand_N_Simple_Return_Statement), and thus no\n-      --  attachment is needed.\n+      --  Optimization: if the returned value is returned again, then no need\n+      --  to copy/readjust/finalize, we can just pass the value through (see\n+      --  Expand_N_Simple_Return_Statement), and thus no attachment is needed.\n+\n+      if Nkind (Par) = N_Simple_Return_Statement then\n+         return;\n+      end if;\n+\n+      --  Another optimization: if the returned value is used to initialize an\n+      --  object, and the secondary stack is not involved in the call, then no\n+      --  need to copy/readjust/finalize, we can just initialize it in place.\n \n-      if Nkind (Parent (N)) = N_Simple_Return_Statement then\n+      if Nkind (Par) = N_Object_Declaration and then not Use_Sec_Stack then\n          return;\n       end if;\n "}, {"sha": "2be891e1bb782d0b8ab76cc8b4ef711dec9d4109", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c901877facf9635149ed69cabd88c871f60931fe/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c901877facf9635149ed69cabd88c871f60931fe/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=c901877facf9635149ed69cabd88c871f60931fe", "patch": "@@ -3063,6 +3063,13 @@ package body Exp_Ch7 is\n \n                return;\n \n+            --  If the initialization is in the declaration, we're done, so\n+            --  early return if we have no more statements or they have been\n+            --  rewritten, which means that they were in the source code.\n+\n+            elsif No (Stmt) or else Original_Node (Stmt) /= Stmt then\n+               return;\n+\n             --  In all other cases the initialization calls follow the related\n             --  object. The general structure of object initialization built by\n             --  routine Default_Initialize_Object is as follows:\n@@ -3091,8 +3098,6 @@ package body Exp_Ch7 is\n             --  Otherwise the initialization calls follow the related object\n \n             else\n-               pragma Assert (Present (Stmt));\n-\n                Stmt_2 := Next_Suitable_Statement (Stmt);\n \n                --  Check for an optional call to Deep_Initialize which may"}, {"sha": "3bbb788ac0c58cdc584726bfb06d48aea47a7bb9", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c901877facf9635149ed69cabd88c871f60931fe/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c901877facf9635149ed69cabd88c871f60931fe/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=c901877facf9635149ed69cabd88c871f60931fe", "patch": "@@ -5046,21 +5046,21 @@ package body Sem_Ch3 is\n       end if;\n \n       --  Another optimization: if the nominal subtype is unconstrained and\n-      --  the expression is a function call that returns an unconstrained\n-      --  type, rewrite the declaration as a renaming of the result of the\n+      --  the expression is a function call that returns on the secondary\n+      --  stack, rewrite the declaration as a renaming of the result of the\n       --  call. The exceptions below are cases where the copy is expected,\n       --  either by the back end (Aliased case) or by the semantics, as for\n       --  initializing controlled types or copying tags for class-wide types.\n+      --  ??? To be moved to Expand_N_Object_Declaration.Rewrite_As_Renaming.\n \n       if Present (E)\n         and then Nkind (E) = N_Explicit_Dereference\n         and then Nkind (Original_Node (E)) = N_Function_Call\n         and then not Is_Library_Level_Entity (Id)\n-        and then not Is_Constrained (Underlying_Type (T))\n         and then not Is_Aliased (Id)\n+        and then Needs_Secondary_Stack (T)\n         and then not Is_Class_Wide_Type (T)\n-        and then not Is_Controlled (T)\n-        and then not Has_Controlled_Component (Base_Type (T))\n+        and then not Needs_Finalization (T)\n         and then Expander_Active\n       then\n          Rewrite (N,"}]}