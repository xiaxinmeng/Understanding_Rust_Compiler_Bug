{"sha": "b47374fa9bcf1d1349d9292610b8878692dd0ee0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ3Mzc0ZmE5YmNmMWQxMzQ5ZDkyOTI2MTBiODg3ODY5MmRkMGVlMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-04-09T21:15:38Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-04-09T21:15:38Z"}, "message": "sbitmap.c (sbitmap_union_of_diff, [...]): Do not return changed status.\n\n        * sbitmap.c (sbitmap_union_of_diff, sbitmap_a_and_b, sbitmap_a_xor_b,\n        sbitmap_a_or_b, sbitmap_a_or_b_and_c, sbitmap_a_and_b_or_c):\n        Do not return changed status.\n        (sbitmap_union_of_diff_cg, sbitmap_a_and_b_cg, sbitmap_a_xor_b_cg,\n        sbitmap_a_or_b_cg, sbitmap_a_or_b_and_c_cg, sbitmap_a_and_b_or_c_cg):\n        New functions that do return changed status.\n        * sbitmap.h: Update decls.\n        * gcse.c, lcm.c: Use _cg functions as needed.\n\nFrom-SVN: r52094", "tree": {"sha": "8754b8c85cc9b9c8aec4625d23bc14b3772ad4ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8754b8c85cc9b9c8aec4625d23bc14b3772ad4ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b47374fa9bcf1d1349d9292610b8878692dd0ee0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b47374fa9bcf1d1349d9292610b8878692dd0ee0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b47374fa9bcf1d1349d9292610b8878692dd0ee0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b47374fa9bcf1d1349d9292610b8878692dd0ee0/comments", "author": null, "committer": null, "parents": [{"sha": "1951818c2f0d1786ee339c5875578f864a5d2ae9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1951818c2f0d1786ee339c5875578f864a5d2ae9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1951818c2f0d1786ee339c5875578f864a5d2ae9"}], "stats": {"total": 338, "additions": 215, "deletions": 123}, "files": [{"sha": "a76237081176ca9526542d8e0fa11c003ee67504", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b47374fa9bcf1d1349d9292610b8878692dd0ee0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b47374fa9bcf1d1349d9292610b8878692dd0ee0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b47374fa9bcf1d1349d9292610b8878692dd0ee0", "patch": "@@ -1,3 +1,14 @@\n+2002-04-09  Richard Henderson  <rth@redhat.com>\n+\n+\t* sbitmap.c (sbitmap_union_of_diff, sbitmap_a_and_b, sbitmap_a_xor_b,\n+\tsbitmap_a_or_b, sbitmap_a_or_b_and_c, sbitmap_a_and_b_or_c):\n+\tDo not return changed status.\n+\t(sbitmap_union_of_diff_cg, sbitmap_a_and_b_cg, sbitmap_a_xor_b_cg,\n+\tsbitmap_a_or_b_cg, sbitmap_a_or_b_and_c_cg, sbitmap_a_and_b_or_c_cg):\n+\tNew functions that do return changed status.\n+\t* sbitmap.h: Update decls.\n+\t* gcse.c, lcm.c: Use _cg functions as needed.\n+\n Tue Apr  9 19:15:57 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* config.gcc (sh-*-elf*): Use sh/embed-elf.h instead of sh/elf.h."}, {"sha": "7a49ffc895511be526a3ffa3846dfb1b2cd90310", "filename": "gcc/gcse.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b47374fa9bcf1d1349d9292610b8878692dd0ee0/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b47374fa9bcf1d1349d9292610b8878692dd0ee0/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=b47374fa9bcf1d1349d9292610b8878692dd0ee0", "patch": "@@ -3023,8 +3023,8 @@ compute_rd ()\n       for (bb = 0; bb < n_basic_blocks; bb++)\n \t{\n \t  sbitmap_union_of_preds (reaching_defs[bb], rd_out, bb);\n-\t  changed |= sbitmap_union_of_diff (rd_out[bb], rd_gen[bb],\n-\t\t\t\t\t    reaching_defs[bb], rd_kill[bb]);\n+\t  changed |= sbitmap_union_of_diff_cg (rd_out[bb], rd_gen[bb],\n+\t\t\t\t\t       reaching_defs[bb], rd_kill[bb]);\n \t}\n       passes++;\n     }\n@@ -5559,8 +5559,8 @@ compute_code_hoist_vbeinout ()\n \t the convergence.  */\n       for (bb = n_basic_blocks - 1; bb >= 0; bb--)\n \t{\n-\t  changed |= sbitmap_a_or_b_and_c (hoist_vbein[bb], antloc[bb],\n-\t\t\t\t\t   hoist_vbeout[bb], transp[bb]);\n+\t  changed |= sbitmap_a_or_b_and_c_cg (hoist_vbein[bb], antloc[bb],\n+\t\t\t\t\t      hoist_vbeout[bb], transp[bb]);\n \t  if (bb != n_basic_blocks - 1)\n \t    sbitmap_intersection_of_succs (hoist_vbeout[bb], hoist_vbein, bb);\n \t}"}, {"sha": "bc95aea8dd543a10535ce88aef3e88e62f67e5af", "filename": "gcc/lcm.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b47374fa9bcf1d1349d9292610b8878692dd0ee0/gcc%2Flcm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b47374fa9bcf1d1349d9292610b8878692dd0ee0/gcc%2Flcm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flcm.c?ref=b47374fa9bcf1d1349d9292610b8878692dd0ee0", "patch": "@@ -162,7 +162,8 @@ compute_antinout_edge (antloc, transp, antin, antout)\n \t  sbitmap_intersection_of_succs (antout[bb], antin, bb);\n \t}\n \n-      if (sbitmap_a_or_b_and_c (antin[bb], antloc[bb], transp[bb], antout[bb]))\n+      if (sbitmap_a_or_b_and_c_cg (antin[bb], antloc[bb],\n+\t\t\t\t   transp[bb], antout[bb]))\n \t/* If the in state of this block changed, then we need\n \t   to add the predecessors of this block to the worklist\n \t   if they are not already on the worklist.  */\n@@ -331,10 +332,10 @@ compute_laterin (edge_list, earliest, antloc, later, laterin)\n \n       /* Calculate LATER for all outgoing edges.  */\n       for (e = b->succ; e != NULL; e = e->succ_next)\n-\tif (sbitmap_union_of_diff (later[(size_t) e->aux],\n-\t\t\t\t   earliest[(size_t) e->aux],\n-\t\t\t\t   laterin[e->src->index],\n-\t\t\t\t   antloc[e->src->index])\n+\tif (sbitmap_union_of_diff_cg (later[(size_t) e->aux],\n+\t\t\t\t      earliest[(size_t) e->aux],\n+\t\t\t\t      laterin[e->src->index],\n+\t\t\t\t      antloc[e->src->index])\n \t    /* If LATER for an outgoing edge was changed, then we need\n \t       to add the target of the outgoing edge to the worklist.  */\n \t    && e->dest != EXIT_BLOCK_PTR && e->dest->aux == 0)\n@@ -552,7 +553,7 @@ compute_available (avloc, kill, avout, avin)\n \t  sbitmap_intersection_of_preds (avin[bb], avout, bb);\n \t}\n \n-      if (sbitmap_union_of_diff (avout[bb], avloc[bb], avin[bb], kill[bb]))\n+      if (sbitmap_union_of_diff_cg (avout[bb], avloc[bb], avin[bb], kill[bb]))\n \t/* If the out state of this block changed, then we need\n \t   to add the successors of this block to the worklist\n \t   if they are not already on the worklist.  */\n@@ -678,10 +679,10 @@ compute_nearerout (edge_list, farthest, st_avloc, nearer, nearerout)\n \n       /* Calculate NEARER for all incoming edges.  */\n       for (e = b->pred; e != NULL; e = e->pred_next)\n-\tif (sbitmap_union_of_diff (nearer[(size_t) e->aux],\n-\t\t\t\t   farthest[(size_t) e->aux],\n-\t\t\t\t   nearerout[e->dest->index],\n-\t\t\t\t   st_avloc[e->dest->index])\n+\tif (sbitmap_union_of_diff_cg (nearer[(size_t) e->aux],\n+\t\t\t\t      farthest[(size_t) e->aux],\n+\t\t\t\t      nearerout[e->dest->index],\n+\t\t\t\t      st_avloc[e->dest->index])\n \t    /* If NEARER for an incoming edge was changed, then we need\n \t       to add the source of the incoming edge to the worklist.  */\n \t    && e->src != ENTRY_BLOCK_PTR && e->src->aux == 0)"}, {"sha": "c101cb07441c27e5a6ee61743d5860ea649db429", "filename": "gcc/sbitmap.c", "status": "modified", "additions": 173, "deletions": 102, "changes": 275, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b47374fa9bcf1d1349d9292610b8878692dd0ee0/gcc%2Fsbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b47374fa9bcf1d1349d9292610b8878692dd0ee0/gcc%2Fsbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.c?ref=b47374fa9bcf1d1349d9292610b8878692dd0ee0", "patch": "@@ -106,6 +106,7 @@ sbitmap_equal (a, b)\n {\n   return !memcmp (a->elms, b->elms, sizeof (SBITMAP_ELT_TYPE) * a->size);\n }\n+\n /* Zero all elements in a bitmap.  */\n \n void\n@@ -159,29 +160,41 @@ sbitmap_vector_ones (bmap, n_vecs)\n \n /* Set DST to be A union (B - C).\n    DST = A | (B & ~C).\n-   Return non-zero if any change is made.  */\n+   Returns true if any change is made.  */\n \n-int\n-sbitmap_union_of_diff (dst, a, b, c)\n+bool\n+sbitmap_union_of_diff_cg (dst, a, b, c)\n      sbitmap dst, a, b, c;\n {\n-  unsigned int i;\n-  sbitmap_ptr dstp, ap, bp, cp;\n-  int changed = 0;\n-\n-  for (dstp = dst->elms, ap = a->elms, bp = b->elms, cp = c->elms, i = 0;\n-       i < dst->size; i++, dstp++)\n+  unsigned int i, n = dst->size;\n+  sbitmap_ptr dstp = dst->elms;\n+  sbitmap_ptr ap = a->elms;\n+  sbitmap_ptr bp = b->elms;\n+  sbitmap_ptr cp = c->elms;\n+  SBITMAP_ELT_TYPE changed = 0;\n+\n+  for (i = 0; i < n; i++)\n     {\n       SBITMAP_ELT_TYPE tmp = *ap++ | (*bp++ & ~*cp++);\n-\n-      if (*dstp != tmp)\n-\t{\n-\t  changed = 1;\n-\t  *dstp = tmp;\n-\t}\n+      changed |= *dstp ^ tmp;\n+      *dstp++ = tmp;\n     }\n \n-  return changed;\n+  return changed != 0;\n+}\n+\n+void\n+sbitmap_union_of_diff (dst, a, b, c)\n+     sbitmap dst, a, b, c;\n+{\n+  unsigned int i, n = dst->size;\n+  sbitmap_ptr dstp = dst->elms;\n+  sbitmap_ptr ap = a->elms;\n+  sbitmap_ptr bp = b->elms;\n+  sbitmap_ptr cp = c->elms;\n+\n+  for (i = 0; i < n; i++)\n+    *dstp++ = *ap++ | (*bp++ & ~*cp++);\n }\n \n /* Set bitmap DST to the bitwise negation of the bitmap SRC.  */\n@@ -190,11 +203,12 @@ void\n sbitmap_not (dst, src)\n      sbitmap dst, src;\n {\n-  unsigned int i;\n-  sbitmap_ptr dstp, srcp;\n+  unsigned int i, n = dst->size;\n+  sbitmap_ptr dstp = dst->elms;\n+  sbitmap_ptr srcp = src->elms;\n \n-  for (dstp = dst->elms, srcp = src->elms, i = 0; i < dst->size; i++)\n-    *dstp++ = ~(*srcp++);\n+  for (i = 0; i < n; i++)\n+    *dstp++ = ~*srcp++;\n }\n \n /* Set the bits in DST to be the difference between the bits\n@@ -204,156 +218,213 @@ void\n sbitmap_difference (dst, a, b)\n      sbitmap dst, a, b;\n {\n-  unsigned int i;\n-  sbitmap_ptr dstp, ap, bp;\n+  unsigned int i, n = dst->size;\n+  sbitmap_ptr dstp = dst->elms;\n+  sbitmap_ptr ap = a->elms;\n+  sbitmap_ptr bp = b->elms;\n   \n-  for (dstp = dst->elms, ap = a->elms, bp = b->elms, i = 0; i < dst->size; i++)\n-    *dstp++ = *ap++ & (~*bp++);\n+  for (i = 0; i < n; i++)\n+    *dstp++ = *ap++ & ~*bp++;\n }\n \n /* Set DST to be (A and B).\n    Return non-zero if any change is made.  */\n \n-int\n-sbitmap_a_and_b (dst, a, b)\n+bool\n+sbitmap_a_and_b_cg (dst, a, b)\n      sbitmap dst, a, b;\n {\n-  unsigned int i;\n-  sbitmap_ptr dstp, ap, bp;\n-  int changed = 0;\n+  unsigned int i, n = dst->size;\n+  sbitmap_ptr dstp = dst->elms;\n+  sbitmap_ptr ap = a->elms;\n+  sbitmap_ptr bp = b->elms;\n+  SBITMAP_ELT_TYPE changed = 0;\n \n-  for (dstp = dst->elms, ap = a->elms, bp = b->elms, i = 0; i < dst->size;\n-       i++, dstp++)\n+  for (i = 0; i < n; i++)\n     {\n       SBITMAP_ELT_TYPE tmp = *ap++ & *bp++;\n-\n-      if (*dstp != tmp)\n-\t{\n-\t  changed = 1;\n-\t  *dstp = tmp;\n-\t}\n+      changed = *dstp ^ tmp;\n+      *dstp++ = tmp;\n     }\n \n-  return changed;\n+  return changed != 0;\n+}\n+\n+void\n+sbitmap_a_and_b (dst, a, b)\n+     sbitmap dst, a, b;\n+{\n+  unsigned int i, n = dst->size;\n+  sbitmap_ptr dstp = dst->elms;\n+  sbitmap_ptr ap = a->elms;\n+  sbitmap_ptr bp = b->elms;\n+\n+  for (i = 0; i < n; i++)\n+    *dstp++ = *ap++ & *bp++;\n }\n \n /* Set DST to be (A xor B)).\n    Return non-zero if any change is made.  */\n \n-int\n-sbitmap_a_xor_b (dst, a, b)\n+bool\n+sbitmap_a_xor_b_cg (dst, a, b)\n      sbitmap dst, a, b;\n {\n-  unsigned int i;\n-  sbitmap_ptr dstp, ap, bp;\n-  int changed = 0;\n-  \n-  for (dstp = dst->elms, ap = a->elms, bp = b->elms, i = 0; i < dst->size;\n-       i++, dstp++)\n+  unsigned int i, n = dst->size;\n+  sbitmap_ptr dstp = dst->elms;\n+  sbitmap_ptr ap = a->elms;\n+  sbitmap_ptr bp = b->elms;\n+  SBITMAP_ELT_TYPE changed = 0;\n+\n+  for (i = 0; i < n; i++)\n     {\n       SBITMAP_ELT_TYPE tmp = *ap++ ^ *bp++;\n-      \n-      if (*dstp != tmp)\n-\t{\n-\t  changed = 1;\n-\t  *dstp = tmp;\n-\t}\n+      changed = *dstp ^ tmp;\n+      *dstp++ = tmp;\n     }\n-  return changed;\n+\n+  return changed != 0;\n+}\n+\n+void\n+sbitmap_a_xor_b (dst, a, b)\n+     sbitmap dst, a, b;\n+{\n+  unsigned int i, n = dst->size;\n+  sbitmap_ptr dstp = dst->elms;\n+  sbitmap_ptr ap = a->elms;\n+  sbitmap_ptr bp = b->elms;\n+\n+  for (i = 0; i < n; i++)\n+    *dstp++ = *ap++ ^ *bp++;\n }\n \n /* Set DST to be (A or B)).\n    Return non-zero if any change is made.  */\n \n-int\n-sbitmap_a_or_b (dst, a, b)\n+bool\n+sbitmap_a_or_b_cg (dst, a, b)\n      sbitmap dst, a, b;\n {\n-  unsigned int i;\n-  sbitmap_ptr dstp, ap, bp;\n-  int changed = 0;\n+  unsigned int i, n = dst->size;\n+  sbitmap_ptr dstp = dst->elms;\n+  sbitmap_ptr ap = a->elms;\n+  sbitmap_ptr bp = b->elms;\n+  SBITMAP_ELT_TYPE changed = 0;\n \n-  for (dstp = dst->elms, ap = a->elms, bp = b->elms, i = 0; i < dst->size;\n-       i++, dstp++)\n+  for (i = 0; i < n; i++)\n     {\n       SBITMAP_ELT_TYPE tmp = *ap++ | *bp++;\n-\n-      if (*dstp != tmp)\n-\t{\n-\t  changed = 1;\n-\t  *dstp = tmp;\n-\t}\n+      changed = *dstp ^ tmp;\n+      *dstp++ = tmp;\n     }\n \n-  return changed;\n+  return changed != 0;\n+}\n+\n+void\n+sbitmap_a_or_b (dst, a, b)\n+     sbitmap dst, a, b;\n+{\n+  unsigned int i, n = dst->size;\n+  sbitmap_ptr dstp = dst->elms;\n+  sbitmap_ptr ap = a->elms;\n+  sbitmap_ptr bp = b->elms;\n+\n+  for (i = 0; i < n; i++)\n+    *dstp++ = *ap++ | *bp++;\n }\n \n /* Return non-zero if A is a subset of B.  */\n \n-int\n+bool\n sbitmap_a_subset_b_p (a, b)\n      sbitmap a, b;\n {\n-  unsigned int i;\n+  unsigned int i, n = a->size;\n   sbitmap_ptr ap, bp;\n \n-  for (ap = a->elms, bp = b->elms, i = 0; i < a->size; i++, ap++, bp++)\n+  for (ap = a->elms, bp = b->elms, i = 0; i < n; i++, ap++, bp++)\n     if ((*ap | *bp) != *bp)\n-      return 0;\n+      return false;\n \n-  return 1;\n+  return true;\n }\n \n /* Set DST to be (A or (B and C)).\n    Return non-zero if any change is made.  */\n \n-int\n-sbitmap_a_or_b_and_c (dst, a, b, c)\n+bool\n+sbitmap_a_or_b_and_c_cg (dst, a, b, c)\n      sbitmap dst, a, b, c;\n {\n-  unsigned int i;\n-  sbitmap_ptr dstp, ap, bp, cp;\n-  int changed = 0;\n-\n-  for (dstp = dst->elms, ap = a->elms, bp = b->elms, cp = c->elms, i = 0;\n-       i < dst->size; i++, dstp++)\n+  unsigned int i, n = dst->size;\n+  sbitmap_ptr dstp = dst->elms;\n+  sbitmap_ptr ap = a->elms;\n+  sbitmap_ptr bp = b->elms;\n+  sbitmap_ptr cp = c->elms;\n+  SBITMAP_ELT_TYPE changed = 0;\n+\n+  for (i = 0; i < n; i++)\n     {\n       SBITMAP_ELT_TYPE tmp = *ap++ | (*bp++ & *cp++);\n-\n-      if (*dstp != tmp)\n-\t{\n-\t  changed = 1;\n-\t  *dstp = tmp;\n-\t}\n+      changed |= *dstp ^ tmp;\n+      *dstp++ = tmp;\n     }\n \n-  return changed;\n+  return changed != 0;\n+}\n+\n+void\n+sbitmap_a_or_b_and_c (dst, a, b, c)\n+     sbitmap dst, a, b, c;\n+{\n+  unsigned int i, n = dst->size;\n+  sbitmap_ptr dstp = dst->elms;\n+  sbitmap_ptr ap = a->elms;\n+  sbitmap_ptr bp = b->elms;\n+  sbitmap_ptr cp = c->elms;\n+\n+  for (i = 0; i < n; i++)\n+    *dstp++ = *ap++ | (*bp++ & *cp++);\n }\n \n /* Set DST to be (A and (B or C)).\n    Return non-zero if any change is made.  */\n \n-int\n-sbitmap_a_and_b_or_c (dst, a, b, c)\n+bool\n+sbitmap_a_and_b_or_c_cg (dst, a, b, c)\n      sbitmap dst, a, b, c;\n {\n-  unsigned int i;\n-  sbitmap_ptr dstp, ap, bp, cp;\n-  int changed = 0;\n-\n-  for (dstp = dst->elms, ap = a->elms, bp = b->elms, cp = c->elms, i = 0;\n-       i < dst->size; i++, dstp++)\n+  unsigned int i, n = dst->size;\n+  sbitmap_ptr dstp = dst->elms;\n+  sbitmap_ptr ap = a->elms;\n+  sbitmap_ptr bp = b->elms;\n+  sbitmap_ptr cp = c->elms;\n+  SBITMAP_ELT_TYPE changed = 0;\n+\n+  for (i = 0; i < n; i++)\n     {\n       SBITMAP_ELT_TYPE tmp = *ap++ & (*bp++ | *cp++);\n-\n-      if (*dstp != tmp)\n-\t{\n-\t  changed = 1;\n-\t  *dstp = tmp;\n-\t}\n+      changed |= *dstp ^ tmp;\n+      *dstp++ = tmp;\n     }\n \n-  return changed;\n+  return changed != 0;\n+}\n+\n+void\n+sbitmap_a_and_b_or_c (dst, a, b, c)\n+     sbitmap dst, a, b, c;\n+{\n+  unsigned int i, n = dst->size;\n+  sbitmap_ptr dstp = dst->elms;\n+  sbitmap_ptr ap = a->elms;\n+  sbitmap_ptr bp = b->elms;\n+  sbitmap_ptr cp = c->elms;\n+\n+  for (i = 0; i < n; i++)\n+    *dstp++ = *ap++ & (*bp++ | *cp++);\n }\n \n #ifdef IN_GCC"}, {"sha": "864ea094acbc78bdcc77325ac4eeefff89ed78e0", "filename": "gcc/sbitmap.h", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b47374fa9bcf1d1349d9292610b8878692dd0ee0/gcc%2Fsbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b47374fa9bcf1d1349d9292610b8878692dd0ee0/gcc%2Fsbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.h?ref=b47374fa9bcf1d1349d9292610b8878692dd0ee0", "patch": "@@ -103,18 +103,27 @@ extern void sbitmap_ones\t\tPARAMS ((sbitmap));\n extern void sbitmap_vector_zero\t\tPARAMS ((sbitmap *, unsigned int));\n extern void sbitmap_vector_ones\t\tPARAMS ((sbitmap *, unsigned int));\n \n-extern int sbitmap_union_of_diff\tPARAMS ((sbitmap, sbitmap, sbitmap,\n+extern void sbitmap_union_of_diff\tPARAMS ((sbitmap, sbitmap, sbitmap,\n+\t\t\t\t\t\t sbitmap));\n+extern bool sbitmap_union_of_diff_cg\tPARAMS ((sbitmap, sbitmap, sbitmap,\n \t\t\t\t\t\t sbitmap));\n extern void sbitmap_difference\t\tPARAMS ((sbitmap, sbitmap, sbitmap));\n extern void sbitmap_not\t\t\tPARAMS ((sbitmap, sbitmap));\n-extern int sbitmap_a_or_b_and_c\t\tPARAMS ((sbitmap, sbitmap, sbitmap,\n+extern void sbitmap_a_or_b_and_c\tPARAMS ((sbitmap, sbitmap, sbitmap,\n+\t\t\t\t\t\t sbitmap));\n+extern bool sbitmap_a_or_b_and_c_cg\tPARAMS ((sbitmap, sbitmap, sbitmap,\n+\t\t\t\t\t\t sbitmap));\n+extern void sbitmap_a_and_b_or_c\tPARAMS ((sbitmap, sbitmap, sbitmap,\n \t\t\t\t\t\t sbitmap));\n-extern int sbitmap_a_and_b_or_c\t\tPARAMS ((sbitmap, sbitmap, sbitmap,\n+extern bool sbitmap_a_and_b_or_c_cg\tPARAMS ((sbitmap, sbitmap, sbitmap,\n \t\t\t\t\t\t sbitmap));\n-extern int sbitmap_a_and_b\t\tPARAMS ((sbitmap, sbitmap, sbitmap));\n-extern int sbitmap_a_or_b\t\tPARAMS ((sbitmap, sbitmap, sbitmap));\n-extern int sbitmap_a_xor_b              PARAMS ((sbitmap, sbitmap, sbitmap));\n-extern int sbitmap_a_subset_b_p\t\tPARAMS ((sbitmap, sbitmap));\n+extern void sbitmap_a_and_b\t\tPARAMS ((sbitmap, sbitmap, sbitmap));\n+extern bool sbitmap_a_and_b_cg\t\tPARAMS ((sbitmap, sbitmap, sbitmap));\n+extern void sbitmap_a_or_b\t\tPARAMS ((sbitmap, sbitmap, sbitmap));\n+extern bool sbitmap_a_or_b_cg\t\tPARAMS ((sbitmap, sbitmap, sbitmap));\n+extern void sbitmap_a_xor_b\t\tPARAMS ((sbitmap, sbitmap, sbitmap));\n+extern bool sbitmap_a_xor_b_cg\t\tPARAMS ((sbitmap, sbitmap, sbitmap));\n+extern bool sbitmap_a_subset_b_p\tPARAMS ((sbitmap, sbitmap));\n \n extern int sbitmap_first_set_bit\tPARAMS ((sbitmap));\n extern int sbitmap_last_set_bit\t\tPARAMS ((sbitmap));"}]}