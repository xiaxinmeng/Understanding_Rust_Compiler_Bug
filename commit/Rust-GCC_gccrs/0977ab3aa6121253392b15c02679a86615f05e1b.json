{"sha": "0977ab3aa6121253392b15c02679a86615f05e1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk3N2FiM2FhNjEyMTI1MzM5MmIxNWMwMjY3OWE4NjYxNWYwNWUxYg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-03-16T00:35:17Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-03-16T00:35:17Z"}, "message": "re PR middle-end/14535 (exception throwing in virtual function doesn't turn on the local destructors)\n\n        PR middle-end/14535\n        * except.c (collect_one_action_chain): Record action for cleanup\n        outer of exception spec.\n\t* g++.dg/eh/spec7.C: New.\n\nFrom-SVN: r79521", "tree": {"sha": "6f83cb950f53a1df02dec8609a2cc0e4816e0d90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f83cb950f53a1df02dec8609a2cc0e4816e0d90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0977ab3aa6121253392b15c02679a86615f05e1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0977ab3aa6121253392b15c02679a86615f05e1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0977ab3aa6121253392b15c02679a86615f05e1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0977ab3aa6121253392b15c02679a86615f05e1b/comments", "author": null, "committer": null, "parents": [{"sha": "199f5c2b84b096f5f2925029d9728bd422eb36da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/199f5c2b84b096f5f2925029d9728bd422eb36da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/199f5c2b84b096f5f2925029d9728bd422eb36da"}], "stats": {"total": 55, "additions": 53, "deletions": 2}, "files": [{"sha": "69a0bcc5f485a8f0e9a39faa0fcaf3db84a9a245", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0977ab3aa6121253392b15c02679a86615f05e1b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0977ab3aa6121253392b15c02679a86615f05e1b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0977ab3aa6121253392b15c02679a86615f05e1b", "patch": "@@ -1,3 +1,9 @@\n+2004-03-15  Richard Henderson  <rth@redhat.com>\n+\n+\tPR middle-end/14535\n+\t* except.c (collect_one_action_chain): Record action for cleanup\n+\touter of exception spec.\n+\n 2004-03-15  Ian Lance Taylor  <ian@wasabisystems.com>\n \n \t* config/rs6000/host-darwin.c (darwin_rs6000_gt_pch_use_address):"}, {"sha": "c739650eb9f89e7cd9503f86d68431d8525e73f0", "filename": "gcc/except.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0977ab3aa6121253392b15c02679a86615f05e1b/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0977ab3aa6121253392b15c02679a86615f05e1b/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=0977ab3aa6121253392b15c02679a86615f05e1b", "patch": "@@ -3365,8 +3365,18 @@ collect_one_action_chain (htab_t ar_hash, struct eh_region *region)\n       /* An exception specification adds its filter to the\n \t beginning of the chain.  */\n       next = collect_one_action_chain (ar_hash, region->outer);\n-      return add_action_record (ar_hash, region->u.allowed.filter,\n-\t\t\t\tnext < 0 ? 0 : next);\n+\n+      /* If there is no next action, terminate the chain.  */\n+      if (next == -1)\n+\tnext = 0;\n+      /* If all outer actions are cleanups or must_not_throw,\n+\t we'll have no action record for it, since we had wanted\n+\t to encode these states in the call-site record directly.\n+\t Add a cleanup action to the chain to catch these.  */\n+      else if (next <= 0)\n+\tnext = add_action_record (ar_hash, 0, 0);\n+      \n+      return add_action_record (ar_hash, region->u.allowed.filter, next);\n \n     case ERT_MUST_NOT_THROW:\n       /* A must-not-throw region with no inner handlers or cleanups"}, {"sha": "08586a2af75af56692a8b25da136ab35109357e6", "filename": "gcc/testsuite/g++.dg/eh/spec7.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0977ab3aa6121253392b15c02679a86615f05e1b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0977ab3aa6121253392b15c02679a86615f05e1b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec7.C?ref=0977ab3aa6121253392b15c02679a86615f05e1b", "patch": "@@ -0,0 +1,35 @@\n+// PR 14535\n+// { dg-do run }\n+// { dg-options \"-O -finline\" }\n+//\n+// Original test case failure required that Raiser constructor be inlined.\n+\n+extern \"C\" void abort(); \n+bool destructor_called = false; \n+ \n+struct B { \n+    virtual void Run(){}; \n+}; \n+ \n+struct D : public B { \n+    virtual void Run() \n+      { \n+        struct O { \n+            ~O() { destructor_called = true; }; \n+        } o; \n+         \n+        struct Raiser { \n+            Raiser()  throw( int ) {throw 1;}; \n+        } raiser; \n+      }; \n+}; \n+ \n+int main() { \n+    try { \n+      D d; \n+      static_cast<B&>(d).Run(); \n+    } catch (...) {} \n+ \n+    if (!destructor_called) \n+      abort (); \n+} "}]}