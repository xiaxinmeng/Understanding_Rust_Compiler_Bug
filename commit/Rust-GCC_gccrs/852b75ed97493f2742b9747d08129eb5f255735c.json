{"sha": "852b75ed97493f2742b9747d08129eb5f255735c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUyYjc1ZWQ5NzQ5M2YyNzQyYjk3NDdkMDgxMjllYjVmMjU1NzM1Yw==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2011-11-02T15:26:35Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2011-11-02T15:26:35Z"}, "message": "Move libgcc_tm_file to toplevel libgcc\n\n\tgcc:\n\t* configure.ac (libgcc_tm_file_list, libgcc_tm_include_list):\n\tRemove.\n\t* configure: Regenerate.\n\t* Makefile.in (libgcc_tm_file_list, libgcc_tm_include_list): Remove.\n\t(TM_H): Remove libgcc_tm.h, $(libgcc_tm_file_list).\n\t(libgcc_tm.h, cs-libgcc_tm.h): Remove.\n\t(clean): Remove libgcc_tm.h\n\t* mkconfig.sh: Don't include libgcc_tm.h in tm.h.\n\t* config.gcc (libgcc_tm_file): Remove.\n\t(arm*-*-linux*): Remove libgcc_tm_file for arm*-*-linux-*eabi.\n\t(arm*-*-uclinux*): Remove libgcc_tm_file for arm*-*-uclinux*eabi.\n\t(arm*-*-eabi*, arm*-*-symbianelf*): Remove libgcc_tm_file.\n\t(avr-*-rtems*): Likewise.\n\t(avr-*-*): Likewise.\n\t(frv-*-elf): Likewise.\n\t(frv-*-*linux*): Likewise.\n\t(h8300-*-rtems*): Likewise.\n\t(h8300-*-elf*): Likewise.\n\t(i[34567]86-*-darwin*): Likewise.\n\t(x86_64-*-darwin*): Likewise.\n\t(rx-*-elf*): Likewise.\n\t(tic6x-*-elf): Likewise.\n\t(tic6x-*-uclinux): Likewise.\n\t(i[34567]86-*-linux*, x86_64-*-linux*): Likewise.\n\n\tlibgcc:\n\t* configure.ac (tm_file_): New variable.\n\tDetermine from tm_file.\n\t(tm_file, tm_defines): Substitute.\n\t* configure: Regenerate.\n\t* mkheader.sh: New file.\n\t* Makefile.in (clean): Remove libgcc_tm.h.\n\t($(objects)): Depend on libgcc_tm.h.\n\t(libgcc_tm_defines, libgcc_tm_file): New variables.\n\t(libgcc_tm.h, libgcc_tm.stamp): New targets.\n\t($(libgcc-objects), $(libgcc-s-objects), $(libgcc-eh-objects))\n\t($(libgcov-objects), $(libunwind-objects), $(libunwind-s-objects))\n\t($(extra-parts)): Depend on libgcc_tm.h.\n\t* config.host (tm_defines, tm_file): New variable.\n\t(arm*-*-linux*): Set tm_file for arm*-*-linux-*eabi.\n\t(arm*-*-uclinux*): Set tm_file for arm*-*-uclinux*eabi.\n\t(arm*-*-eabi*, arm*-*-symbianelf*): Set tm_file.\n\t(avr-*-rtems*): Likewise.\n\t(avr-*-*): Likewise.\n\t(frv-*-elf): Likewise.\n\t(frv-*-*linux*): Likewise.\n\t(h8300-*-rtems*): Likewise.\n\t(h8300-*-elf*): Likewise.\n\t(i[34567]86-*-darwin*): Likewise.\n\t(x86_64-*-darwin*): Likewise.\n\t(rx-*-elf): Likewise.\n\t(tic6x-*-uclinux): Likewise.\n\t(tic6x-*-elf): Likewise.\n\t(i[34567]86-*-linux*, x86_64-*-linux*): Likewise.\n\t* config/alpha/gthr-posix.c: Include libgcc_tm.h.\n\t* config/i386/cygming-crtbegin.c: Likewise.\n\t* config/i386/cygming-crtend.c: Likewise.\n\t* config/ia64/fde-vms.c: Likewise.\n\t* config/ia64/unwind-ia64.c: Likewise.\n\t* config/libbid/bid_gcc_intrinsics.h: Likewise.\n\t* config/rs6000/darwin-fallback.c: Likewise.\n\t* config/stormy16/lib2funcs.c: Likewise.\n\t* config/xtensa/unwind-dw2-xtensa.c: Likewise.\n\t* crtstuff.c: Likewise.\n\t* dfp-bit.h: Likewise.\n\t* emutls.c: Likewise.\n\t* fixed-bit.c: Likewise.\n\t* fp-bit.c: Likewise.\n\t* generic-morestack-thread.c: Likewise.\n\t* generic-morestack.c: Likewise.\n\t* libgcc2.c: Likewise.\n\t* libgcov.c: Likewise.\n\t* unwind-dw2-fde-dip.c: Likewise.\n\t* unwind-dw2-fde.c: Likewise.\n\t* unwind-dw2.c: Likewise.\n\t* unwind-sjlj.c: Likewise.\n\nCo-Authored-By: Paolo Bonzini <bonzini@gnu.org>\n\nFrom-SVN: r180775", "tree": {"sha": "d5991f5a71b14aa4bfbd550a11c4048ae52ebf16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5991f5a71b14aa4bfbd550a11c4048ae52ebf16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/852b75ed97493f2742b9747d08129eb5f255735c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852b75ed97493f2742b9747d08129eb5f255735c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/852b75ed97493f2742b9747d08129eb5f255735c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852b75ed97493f2742b9747d08129eb5f255735c/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f9989b51a9bc3b0ad31bb5ad2c805ca03427801e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9989b51a9bc3b0ad31bb5ad2c805ca03427801e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9989b51a9bc3b0ad31bb5ad2c805ca03427801e"}], "stats": {"total": 298, "additions": 223, "deletions": 75}, "files": [{"sha": "f1e4860d1b9ed148c3e878f21d606ad40fccf9ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -1,3 +1,31 @@\n+2011-11-02  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\t    Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* configure.ac (libgcc_tm_file_list, libgcc_tm_include_list):\n+\tRemove.\n+\t* configure: Regenerate.\n+\t* Makefile.in (libgcc_tm_file_list, libgcc_tm_include_list): Remove.\n+\t(TM_H): Remove libgcc_tm.h, $(libgcc_tm_file_list).\n+\t(libgcc_tm.h, cs-libgcc_tm.h): Remove.\n+\t(clean): Remove libgcc_tm.h\n+\t* mkconfig.sh: Don't include libgcc_tm.h in tm.h.\n+\t* config.gcc (libgcc_tm_file): Remove.\n+\t(arm*-*-linux*): Remove libgcc_tm_file for arm*-*-linux-*eabi.\n+\t(arm*-*-uclinux*): Remove libgcc_tm_file for arm*-*-uclinux*eabi.\n+\t(arm*-*-eabi*, arm*-*-symbianelf*): Remove libgcc_tm_file.\n+\t(avr-*-rtems*): Likewise.\n+\t(avr-*-*): Likewise.\n+\t(frv-*-elf): Likewise.\n+\t(frv-*-*linux*): Likewise.\n+\t(h8300-*-rtems*): Likewise.\n+\t(h8300-*-elf*): Likewise.\n+\t(i[34567]86-*-darwin*): Likewise.\n+\t(x86_64-*-darwin*): Likewise.\n+\t(rx-*-elf*): Likewise.\n+\t(tic6x-*-elf): Likewise.\n+\t(tic6x-*-uclinux): Likewise.\n+\t(i[34567]86-*-linux*, x86_64-*-linux*): Likewise.\n+\n 2011-11-02  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* Makefile.in (LIBGCC2_DEBUG_CFLAGS LIBGCC2_CFLAGS)"}, {"sha": "cf1c8a7f30b1041ae5de26f9ead008131c2975f3", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -490,8 +490,6 @@ md_file=$(srcdir)/config/@md_file@\n tm_file_list=@tm_file_list@\n tm_include_list=@tm_include_list@\n tm_defines=@tm_defines@\n-libgcc_tm_file_list=@libgcc_tm_file_list@\n-libgcc_tm_include_list=@libgcc_tm_include_list@\n tm_p_file_list=@tm_p_file_list@\n tm_p_include_list=@tm_p_include_list@\n build_xm_file_list=@build_xm_file_list@\n@@ -790,8 +788,7 @@ CONFIG_H  = config.h  $(host_xm_file_list)\n TCONFIG_H = tconfig.h $(xm_file_list)\n TM_P_H    = tm_p.h    $(tm_p_file_list)\n GTM_H     = tm.h      $(tm_file_list) insn-constants.h\n-TM_H      = $(GTM_H) libgcc_tm.h $(libgcc_tm_file_list) insn-flags.h \\\n-\t$(OPTIONS_H)\n+TM_H      = $(GTM_H) insn-flags.h $(OPTIONS_H)\n \n # Variables for version information.\n BASEVER     := $(srcdir)/BASE-VER  # 4.x.y\n@@ -1599,7 +1596,6 @@ config.h: cs-config.h ; @true\n bconfig.h: cs-bconfig.h ; @true\n tconfig.h: cs-tconfig.h ; @true\n tm.h: cs-tm.h ; @true\n-libgcc_tm.h: cs-libgcc_tm.h ; @true\n tm_p.h: cs-tm_p.h ; @true\n \n cs-config.h: Makefile\n@@ -1622,11 +1618,6 @@ cs-tm.h: Makefile\n \tHEADERS=\"$(tm_include_list)\" DEFINES=\"$(tm_defines)\" \\\n \t$(SHELL) $(srcdir)/mkconfig.sh tm.h\n \n-cs-libgcc_tm.h: Makefile\n-\tTARGET_CPU_DEFAULT=\"\" \\\n-\tHEADERS=\"$(libgcc_tm_include_list)\" DEFINES=\"\" \\\n-\t$(SHELL) $(srcdir)/mkconfig.sh libgcc_tm.h\n-\n cs-tm_p.h: Makefile\n \tTARGET_CPU_DEFAULT=\"\" \\\n \tHEADERS=\"$(tm_p_include_list)\" DEFINES=\"\" \\\n@@ -4425,7 +4416,7 @@ clean: mostlyclean lang.clean\n \t-rm -f libgcc.a libgcc_eh.a libgcov.a\n \t-rm -f libgcc_s*\n \t-rm -f libunwind*\n-\t-rm -f config.h tconfig.h bconfig.h tm_p.h tm.h libgcc_tm.h\n+\t-rm -f config.h tconfig.h bconfig.h tm_p.h tm.h\n \t-rm -f options.c options.h optionlist\n \t-rm -f cs-*\n \t-rm -f doc/*.dvi"}, {"sha": "c1a77ff4db2c6b3032a22197ccf193a3909aa406", "filename": "gcc/config.gcc", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -84,12 +84,6 @@\n #\t\t\tbuild-directory files by prefixing them with \"./\".\n #\t\t\tAll other files should relative to $srcdir/config.\n #\n-#  libgcc_tm_file\tA list of target macro files used only for code\n-#\t\t\tbuilt for the target, not the host.  These files\n-#\t\t\tare relative to $srcdir/../libgcc/config and\n-#\t\t\tmust not have the same names as files in\n-#\t\t\t$srcdir/config.\n-#\n #  tm_p_file\t\tLocation of file with declarations for functions\n #\t\t\tin $out_file.\n #\n@@ -223,7 +217,6 @@ target_has_targetcm=no\n target_has_targetm_common=yes\n tm_defines=\n xm_defines=\n-libgcc_tm_file=\n # Set this to force installation and use of collect2.\n use_collect2=\n # Set this to override the default target model.\n@@ -831,7 +824,6 @@ arm*-*-linux*)\t\t\t# ARM GNU/Linux with ELF\n \tcase ${target} in\n \tarm*-*-linux-*eabi)\n \t    tm_file=\"$tm_file arm/bpabi.h arm/linux-eabi.h\"\n-\t    libgcc_tm_file=\"$libgcc_tm_file arm/bpabi-lib.h\"\n \t    tmake_file=\"$tmake_file arm/t-arm-elf arm/t-linux-eabi\"\n \t    # Define multilib configuration for arm-linux-androideabi.\n \t    case ${target} in\n@@ -859,7 +851,6 @@ arm*-*-uclinux*)\t\t# ARM ucLinux\n \tcase ${target} in\n \tarm*-*-uclinux*eabi)\n \t    tm_file=\"$tm_file arm/bpabi.h arm/uclinux-eabi.h\"\n-\t    libgcc_tm_file=\"$libgcc_tm_file arm/bpabi-lib.h\"\n   \t    # The BPABI long long divmod functions return a 128-bit value in\n \t    # registers r0-r3.  Correctly modeling that requires the use of\n \t    # TImode.\n@@ -880,7 +871,6 @@ arm*-*-eabi* | arm*-*-symbianelf* )\n \tneed_64bit_hwint=yes\n \tdefault_use_cxa_atexit=yes\n \ttm_file=\"dbxelf.h elfos.h arm/unknown-elf.h arm/elf.h arm/bpabi.h\"\n-\tlibgcc_tm_file=\"$libgcc_tm_file arm/bpabi-lib.h\"\n \ttmake_file=\"arm/t-arm arm/t-arm-elf\"\n \tcase ${target} in\n \tarm*-*-eabi*)\n@@ -889,7 +879,6 @@ arm*-*-eabi* | arm*-*-symbianelf* )\n \t  ;;\n \tarm*-*-symbianelf*)\n \t  tm_file=\"${tm_file} arm/symbian.h\"\n-\t  libgcc_tm_file=\"$libgcc_tm_file arm/symbian-lib.h\"\n \t  # We do not include t-bpabi for Symbian OS because the system\n \t  # provides its own implementation of the BPABI functions.\n \t  tmake_file=\"${tmake_file} arm/t-symbian\"\n@@ -913,14 +902,12 @@ arm*-wince-pe*)\n \t;;\n avr-*-rtems*)\n \ttm_file=\"elfos.h avr/elf.h avr/avr.h dbxelf.h avr/rtems.h rtems.h newlib-stdint.h\"\n-\tlibgcc_tm_file=\"$libgcc_tm_file avr/avr-lib.h\"\n \ttmake_file=\"avr/t-avr t-rtems avr/t-rtems\"\n \textra_gcc_objs=\"driver-avr.o avr-devices.o\"\n \textra_objs=\"avr-devices.o avr-log.o\"\n \t;;\n avr-*-*)\n \ttm_file=\"elfos.h avr/elf.h avr/avr.h dbxelf.h newlib-stdint.h\"\n-\tlibgcc_tm_file=\"$libgcc_tm_file avr/avr-lib.h\"\n \tuse_gcc_stdint=wrap\n \textra_gcc_objs=\"driver-avr.o avr-devices.o\"\n \textra_objs=\"avr-devices.o avr-log.o\"\n@@ -983,13 +970,11 @@ fr30-*-elf)\n \t;;\n frv-*-elf)\n \ttm_file=\"dbxelf.h elfos.h newlib-stdint.h ${tm_file}\"\n-\tlibgcc_tm_file=\"${libgcc_tm_file} frv/frv-abi.h\"\n \ttmake_file=frv/t-frv\n \t;;\n frv-*-*linux*)\n \ttm_file=\"dbxelf.h elfos.h ${tm_file} \\\n \t         gnu-user.h linux.h glibc-stdint.h frv/linux.h\"\n-\tlibgcc_tm_file=\"${libgcc_tm_file} frv/frv-abi.h\"\n \ttmake_file=\"${tmake_file} frv/t-frv frv/t-linux\"\n \t;;\n moxie-*-elf)\n@@ -1011,12 +996,10 @@ moxie-*-rtems*)\n h8300-*-rtems*)\n \ttmake_file=\"h8300/t-h8300 t-rtems h8300/t-rtems\"\n \ttm_file=\"h8300/h8300.h dbxelf.h elfos.h h8300/elf.h h8300/rtems.h rtems.h newlib-stdint.h\"\n-\tlibgcc_tm_file=\"$libgcc_tm_file h8300/h8300-lib.h\"\n \t;;\n h8300-*-elf*)\n \ttmake_file=\"h8300/t-h8300\"\n \ttm_file=\"h8300/h8300.h dbxelf.h elfos.h newlib-stdint.h h8300/elf.h\"\n-\tlibgcc_tm_file=\"$libgcc_tm_file h8300/h8300-lib.h\"\n \t;;\n hppa*64*-*-linux*)\n \ttarget_cpu_default=\"MASK_PA_11|MASK_PA_20\"\n@@ -1161,13 +1144,11 @@ i[34567]86-*-darwin*)\n \t# Baseline choice for a machine that allows m64 support.\n \twith_cpu=${with_cpu:-core2}\n \ttmake_file=\"${tmake_file} t-slibgcc\"\n-\tlibgcc_tm_file=\"$libgcc_tm_file i386/darwin-lib.h\"\n \t;;\n x86_64-*-darwin*)\n \twith_cpu=${with_cpu:-core2}\n \ttmake_file=\"${tmake_file} ${cpu_type}/t-darwin64 t-slibgcc\"\n \ttm_file=\"${tm_file} ${cpu_type}/darwin64.h\"\n-\tlibgcc_tm_file=\"$libgcc_tm_file i386/darwin-lib.h\"\n \t;;\n i[34567]86-*-elf*)\n \ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h newlib-stdint.h i386/i386elf.h\"\n@@ -2119,7 +2100,6 @@ rs6000-ibm-aix[6789].* | powerpc-ibm-aix[6789].*)\n \t;;\n rx-*-elf*)\n \ttm_file=\"dbxelf.h elfos.h newlib-stdint.h ${tm_file}\"\n-\tlibgcc_tm_file=\"${libgcc_tm_file} rx/rx-abi.h rx/rx-lib.h\"\n \ttmake_file=\"${tmake_file} rx/t-rx\"\n \t;;\n s390-*-linux*)\n@@ -2448,15 +2428,13 @@ spu-*-elf*)\n tic6x-*-elf)\n \ttm_file=\"elfos.h ${tm_file} c6x/elf-common.h c6x/elf.h\"\n \ttm_file=\"${tm_file} dbxelf.h tm-dwarf2.h newlib-stdint.h\"\n-\tlibgcc_tm_file=\"${libgcc_tm_file} c6x/c6x-abi.h\"\n \ttmake_file=\"c6x/t-c6x c6x/t-c6x-elf\"\n \tuse_collect2=no\n \t;;\n tic6x-*-uclinux)\n \ttm_file=\"elfos.h ${tm_file} gnu-user.h linux.h c6x/elf-common.h c6x/uclinux-elf.h\"\n \ttm_file=\"${tm_file} dbxelf.h tm-dwarf2.h glibc-stdint.h\"\n \ttm_file=\"${tm_file} ./sysroot-suffix.h\"\n-\tlibgcc_tm_file=\"${libgcc_tm_file} c6x/c6x-abi.h\"\n \ttmake_file=\"t-sysroot-suffix t-slibgcc\"\n \ttmake_file=\"${tmake_file} c6x/t-c6x c6x/t-c6x-elf c6x/t-c6x-uclinux\"\n \tuse_collect2=no\n@@ -2544,7 +2522,6 @@ esac\n case ${target} in\n i[34567]86-*-linux* | x86_64-*-linux*)\n \ttmake_file=\"${tmake_file} i386/t-pmm_malloc i386/t-i386\"\n-\tlibgcc_tm_file=\"${libgcc_tm_file} i386/value-unwind.h\"\n \t;;\n i[34567]86-*-* | x86_64-*-*)\n \ttmake_file=\"${tmake_file} i386/t-gmm_malloc i386/t-i386\""}, {"sha": "cb116d229935fa32bc6c5ba4dd4e62bc396dd600", "filename": "gcc/configure", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -618,8 +618,6 @@ xm_include_list\n xm_file_list\n tm_p_include_list\n tm_p_file_list\n-libgcc_tm_include_list\n-libgcc_tm_file_list\n tm_defines\n tm_include_list\n tm_file_list\n@@ -11789,13 +11787,6 @@ for f in $tm_file; do\n   esac\n done\n \n-libgcc_tm_file_list=\n-libgcc_tm_include_list=\n-for f in $libgcc_tm_file; do\n-  libgcc_tm_file_list=\"${libgcc_tm_file_list} \\$(srcdir)/../libgcc/config/$f\"\n-  libgcc_tm_include_list=\"${libgcc_tm_include_list} ../libgcc/config/$f\"\n-done\n-\n tm_p_file_list=\n tm_p_include_list=\n for f in $tm_p_file; do\n@@ -18068,7 +18059,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18071 \"configure\"\n+#line 18062 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18174,7 +18165,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18177 \"configure\"\n+#line 18168 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -27014,8 +27005,6 @@ fi\n \n \n \n-\n-\n \n \n "}, {"sha": "6ef0b84c6daf42b869a2343684f71cde0f95cf2c", "filename": "gcc/configure.ac", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -1715,13 +1715,6 @@ for f in $tm_file; do\n   esac\n done\n \n-libgcc_tm_file_list=\n-libgcc_tm_include_list=\n-for f in $libgcc_tm_file; do\n-  libgcc_tm_file_list=\"${libgcc_tm_file_list} \\$(srcdir)/../libgcc/config/$f\"\n-  libgcc_tm_include_list=\"${libgcc_tm_include_list} ../libgcc/config/$f\"\n-done\n-\n tm_p_file_list=\n tm_p_include_list=\n for f in $tm_p_file; do\n@@ -4972,8 +4965,6 @@ AC_SUBST(thread_file)\n AC_SUBST(tm_file_list)\n AC_SUBST(tm_include_list)\n AC_SUBST(tm_defines)\n-AC_SUBST(libgcc_tm_file_list)\n-AC_SUBST(libgcc_tm_include_list)\n AC_SUBST(tm_p_file_list)\n AC_SUBST(tm_p_include_list)\n AC_SUBST(xm_file_list)"}, {"sha": "e93d45fabb3bba656cf309348cafb4d69f519bca", "filename": "gcc/mkconfig.sh", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/gcc%2Fmkconfig.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/gcc%2Fmkconfig.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmkconfig.sh?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -89,19 +89,15 @@ if [ -n \"$HEADERS\" ]; then\n fi\n \n # If this is tm.h, now include insn-flags.h only if IN_GCC is defined\n-# but neither GENERATOR_FILE nor USED_FOR_TARGET is defined.  Also\n-# include libgcc_tm.h if USED_FOR_TARGET is defined.  (Much of this is\n-# temporary.)\n+# but neither GENERATOR_FILE nor USED_FOR_TARGET is defined.  (Much of this\n+# is temporary.)\n \n case $output in\n     tm.h )\n         cat >> ${output}T <<EOF\n #if defined IN_GCC && !defined GENERATOR_FILE && !defined USED_FOR_TARGET\n # include \"insn-flags.h\"\n #endif\n-#ifdef USED_FOR_TARGET\n-# include \"libgcc_tm.h\"\n-#endif\n EOF\n     ;;\n esac"}, {"sha": "c169190c3977b4d272f07368b2026aa6a02ef29e", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -1,3 +1,56 @@\n+2011-11-02  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac (tm_file_): New variable.\n+\tDetermine from tm_file.\n+\t(tm_file, tm_defines): Substitute.\n+\t* configure: Regenerate.\n+\t* mkheader.sh: New file.\n+\t* Makefile.in (clean): Remove libgcc_tm.h.\n+\t($(objects)): Depend on libgcc_tm.h.\n+\t(libgcc_tm_defines, libgcc_tm_file): New variables.\n+\t(libgcc_tm.h, libgcc_tm.stamp): New targets.\n+\t($(libgcc-objects), $(libgcc-s-objects), $(libgcc-eh-objects))\n+\t($(libgcov-objects), $(libunwind-objects), $(libunwind-s-objects))\n+\t($(extra-parts)): Depend on libgcc_tm.h.\n+\t* config.host (tm_defines, tm_file): New variable.\n+\t(arm*-*-linux*): Set tm_file for arm*-*-linux-*eabi.\n+\t(arm*-*-uclinux*): Set tm_file for arm*-*-uclinux*eabi.\n+\t(arm*-*-eabi*, arm*-*-symbianelf*): Set tm_file.\n+\t(avr-*-rtems*): Likewise.\n+\t(avr-*-*): Likewise.\n+\t(frv-*-elf): Likewise.\n+\t(frv-*-*linux*): Likewise.\n+\t(h8300-*-rtems*): Likewise.\n+\t(h8300-*-elf*): Likewise.\n+\t(i[34567]86-*-darwin*): Likewise.\n+\t(x86_64-*-darwin*): Likewise.\n+\t(rx-*-elf): Likewise.\n+\t(tic6x-*-uclinux): Likewise.\n+\t(tic6x-*-elf): Likewise.\n+\t(i[34567]86-*-linux*, x86_64-*-linux*): Likewise.\n+\t* config/alpha/gthr-posix.c: Include libgcc_tm.h.\n+\t* config/i386/cygming-crtbegin.c: Likewise.\n+\t* config/i386/cygming-crtend.c: Likewise.\n+\t* config/ia64/fde-vms.c: Likewise.\n+\t* config/ia64/unwind-ia64.c: Likewise.\n+\t* config/libbid/bid_gcc_intrinsics.h: Likewise.\n+\t* config/rs6000/darwin-fallback.c: Likewise.\n+\t* config/stormy16/lib2funcs.c: Likewise.\n+\t* config/xtensa/unwind-dw2-xtensa.c: Likewise.\n+\t* crtstuff.c: Likewise.\n+\t* dfp-bit.h: Likewise.\n+\t* emutls.c: Likewise.\n+\t* fixed-bit.c: Likewise.\n+\t* fp-bit.c: Likewise.\n+\t* generic-morestack-thread.c: Likewise.\n+\t* generic-morestack.c: Likewise.\n+\t* libgcc2.c: Likewise.\n+\t* libgcov.c: Likewise.\n+\t* unwind-dw2-fde-dip.c: Likewise.\n+\t* unwind-dw2-fde.c: Likewise.\n+\t* unwind-dw2.c: Likewise.\n+\t* unwind-sjlj.c: Likewise.\n+\n 2011-11-02  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure.ac: Include ../config/picflag.m4."}, {"sha": "2ea6ca69d64b713c85c4590abb93855540431ce9", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -121,7 +121,7 @@ installcheck:\n .PHONY: all clean\n \n clean:\n-\t-rm -f config.h stamp-h stmp-ldirs libgcc.map\n+\t-rm -f config.h libgcc_tm.h stamp-h stmp-ldirs libgcc.map\n \t-rm -f *$(objext)\n \t-rm -f *.dep\n \t-rm -f *.a\n@@ -338,6 +338,16 @@ SHLIBUNWIND_INSTALL =\n tmake_file = @tmake_file@\n include $(srcdir)/empty.mk $(tmake_file)\n \n+# Collect target defines and headers from config.host.\n+libgcc_tm_defines = @tm_defines@\n+libgcc_tm_file = @tm_file@\n+libgcc_tm.h: libgcc_tm.stamp; @true\n+libgcc_tm.stamp:\n+\tDEFINES='$(libgcc_tm_defines)' HEADERS='$(libgcc_tm_file)' \\\n+\t\t$(srcdir)/mkheader.sh > tmp-libgcc_tm.h\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-libgcc_tm.h libgcc_tm.h\n+\techo timestamp > $@\n+\n # Only handle shared libraries if both:\n #   - the user requested them\n #   - we know how to build them\n@@ -984,6 +994,11 @@ libgcc-extra-parts: $(EXTRA_PARTS)\n \n all: $(extra-parts)\n \n+$(libgcc-objects) $(libgcc-s-objects) $(libgcc-eh-objects) \\\n+\t$(libgcov-objects) \\\n+\t$(libunwind-objects) $(libunwind-s-objects) \\\n+\t$(extra-parts): libgcc_tm.h\n+\n install-unwind_h:\n \tdest=$(gcc_objdir)/include/tmp$$$$-unwind.h; \\\n \tcp unwind.h $$dest; \\"}, {"sha": "05f084b70a09d469bea5ecae70d2fc88c9b0d593", "filename": "libgcc/config.host", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -60,13 +60,20 @@\n #  tmake_file\t\tA list of machine-description-specific\n #\t\t\tmakefile-fragments, if different from\n #\t\t\t\"$cpu_type/t-$cpu_type\".\n+#  tm_defines\t\tList of target macros to define for all compilations.\n+#  tm_file\t\tA list of target macro files used only for code\n+#\t\t\tbuilt for the target, not the host.  These files\n+#\t\t\tare relative to $srcdir/config and must not have\n+#\t\t\tthe same names as files in $srcdir/../gcc/config.\n #  unwind_header\tThe name of the header file declaring the unwind\n #\t\t\truntime interface routines.\n \n asm_hidden_op=.hidden\n enable_execute_stack=\n extra_parts=\n tmake_file=\n+tm_file=\n+tm_define=\n md_unwind_header=no-unwind.h\n unwind_header=unwind-generic.h\n \n@@ -329,6 +336,7 @@ arm*-*-linux*)\t\t\t# ARM GNU/Linux with ELF\n \tcase ${host} in\n \tarm*-*-linux-*eabi)\n \t  tmake_file=\"${tmake_file} arm/t-elf arm/t-bpabi arm/t-linux-eabi t-slibgcc-libgcc\"\n+\t  tm_file=\"$tm_file arm/bpabi-lib.h\"\n \t  unwind_header=config/arm/unwind-arm.h\n \t  ;;\n \t*)\n@@ -342,6 +350,7 @@ arm*-*-uclinux*)\t\t# ARM ucLinux\n \tcase ${host} in\n \tarm*-*-uclinux*eabi)\n \t  tmake_file=\"${tmake_file} arm/t-bpabi\"\n+\t  tm_file=\"$tm_file arm/bpabi-lib.h\"\n \t  unwind_header=config/arm/unwind-arm.h\n \t  ;;\n \tesac\n@@ -354,13 +363,15 @@ arm*-*-ecos-elf)\n \t;;\n arm*-*-eabi* | arm*-*-symbianelf* )\n \ttmake_file=\"${tmake_file} arm/t-arm arm/t-elf t-fixedpoint-gnu-prefix\"\n+\ttm_file=\"$tm_file arm/bpabi-lib.h\"\n \tcase ${host} in\n \tarm*-*-eabi*)\n \t  tmake_file=\"${tmake_file} arm/t-bpabi\"\n \t  extra_parts=\"crtbegin.o crtend.o crti.o crtn.o\"\n \t  ;;\n \tarm*-*-symbianelf*)\n \t  tmake_file=\"${tmake_file} arm/t-symbian t-slibgcc-nolc-override\"\n+\t  tm_file=\"$tm_file arm/symbian-lib.h\"\n \t  # Symbian OS provides its own startup code.\n \t  ;;\n \tesac\n@@ -380,12 +391,14 @@ arm*-wince-pe*)\n \t;;\n avr-*-rtems*)\n \ttmake_file=\"$tmake_file avr/t-avr t-fpbit\"\n+\ttm_file=\"$tm_file avr/avr-lib.h\"\n \t# Don't use default.\n \textra_parts=\n \t;;\n avr-*-*)\n \t# Make HImode functions for AVR\n \ttmake_file=\"${cpu_type}/t-avr t-fpbit\"\n+\ttm_file=\"$tm_file avr/avr-lib.h\"\n \t;;\n bfin*-elf*)\n \ttmake_file=\"bfin/t-bfin bfin/t-elf bfin/t-crtlibid bfin/t-crtstuff t-fdpbit\"\n@@ -434,18 +447,22 @@ fr30-*-elf)\n \t;;\n frv-*-elf)\n \ttmake_file=\"$tmake_file frv/t-frv t-fdpbit\"\n+\ttm_file=\"$tm_file frv/frv-abi.h\"\n \t# Don't use crtbegin.o, crtend.o.\n \textra_parts=\"frvbegin.o frvend.o\"\n \t;;\n frv-*-*linux*)\n \ttmake_file=\"$tmake_file frv/t-frv frv/t-linux t-fdpbit\"\n+\ttm_file=\"$tm_file frv/frv-abi.h\"\n \t;;\n h8300-*-rtems*)\n \ttmake_file=\"$tmake_file h8300/t-h8300 t-fpbit\"\n+\ttm_file=\"$tm_file h8300/h8300-lib.h\"\n \textra_parts=\"$extra_parts crti.o crtn.o\"\n \t;;\n h8300-*-elf*)\n \ttmake_file=\"$tmake_file h8300/t-h8300 t-fpbit\"\n+\ttm_file=\"$tm_file h8300/h8300-lib.h\"\n \textra_parts=\"$extra_parts crti.o crtn.o\"\n \t;;\n hppa*64*-*-linux*)\n@@ -499,10 +516,12 @@ hppa[12]*-*-hpux11*)\n \t;;\n i[34567]86-*-darwin*)\n \ttmake_file=\"$tmake_file i386/t-crtpc i386/t-crtfm\"\n+\ttm_file=\"$tm_file i386/darwin-lib.h\"\n \textra_parts=\"$extra_parts crtprec32.o crtprec64.o crtprec80.o crtfastmath.o\"\n \t;;\n x86_64-*-darwin*)\n \ttmake_file=\"$tmake_file i386/t-crtpc i386/t-crtfm\"\n+\ttm_file=\"$tm_file i386/darwin-lib.h\"\n \textra_parts=\"$extra_parts crtprec32.o crtprec64.o crtprec80.o crtfastmath.o\"\n \t;;\n i[34567]86-*-elf*)\n@@ -907,6 +926,7 @@ rs6000-ibm-aix[56789].* | powerpc-ibm-aix[56789].*)\n \t;;\n rx-*-elf)\n \ttmake_file=\"rx/t-rx t-fdpbit\"\n+\ttm_file=\"$tm_file rx/rx-abi.h rx/rx-lib.h\"\n \t;;\n s390-*-linux*)\n \ttmake_file=\"${tmake_file} s390/t-crtstuff s390/t-linux s390/32/t-floattodi\"\n@@ -1046,11 +1066,13 @@ spu-*-elf*)\n \t;;\n tic6x-*-uclinux)\n \ttmake_file=\"${tmake_file} t-softfp-sfdf t-softfp-excl t-softfp c6x/t-elf  c6x/t-uclinux t-crtstuff-pic t-libgcc-pic t-slibgcc t-slibgcc-gld t-slibgcc-elf-ver t-gnu-prefix\"\n+\ttm_file=\"$tm_file c6x/c6x-abi.h\"\n \textra_parts=\"crtbeginS.o crtendS.o crti.o crtn.o\"\n \tunwind_header=config/c6x/unwind-c6x.h\n \t;;\n tic6x-*-elf)\n \ttmake_file=\"${tmake_file} t-softfp-sfdf t-softfp-excl t-softfp t-gnu-prefix c6x/t-elf\"\n+\ttm_file=\"$tm_file c6x/c6x-abi.h\"\n \textra_parts=\"$extra_parts crtbeginS.o crtendS.o crti.o crtn.o\"\n \tunwind_header=config/c6x/unwind-c6x.h\n \t;;\n@@ -1127,5 +1149,6 @@ i[34567]86-*-linux* | x86_64-*-linux*)\n \tif test \"${host_address}\" = 64; then\n \t\ttmake_file=\"${tmake_file} i386/${host_address}/t-softfp-compat\"\n \tfi\n+\ttm_file=\"${tm_file} i386/value-unwind.h\"\n \t;;\n esac"}, {"sha": "02681a4371ebf8243101c05eaaa340d0398088e9", "filename": "libgcc/config/alpha/gthr-posix.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fconfig%2Falpha%2Fgthr-posix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fconfig%2Falpha%2Fgthr-posix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Falpha%2Fgthr-posix.c?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -26,6 +26,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #include \"tconfig.h\"\n #include \"tm.h\"\n+#include \"libgcc_tm.h\"\n # define __gthrw_pragma(pragma) _Pragma (#pragma)\n /* Define so we provide weak definitions of functions used by libobjc only.  */\n #define _LIBOBJC_WEAK"}, {"sha": "b589841fd01b443cbd7cb2044857b424befc126f", "filename": "libgcc/config/i386/cygming-crtbegin.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fconfig%2Fi386%2Fcygming-crtbegin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fconfig%2Fi386%2Fcygming-crtbegin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcygming-crtbegin.c?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -1,5 +1,5 @@\n /* crtbegin object for windows32 targets.\n-   Copyright (C) 2007, 2009, 2010  Free Software Foundation, Inc.\n+   Copyright (C) 2007, 2009, 2010, 2011  Free Software Foundation, Inc.\n \n    Contributed by Danny Smith <dannysmith@users.sourceforge.net>\n \n@@ -32,6 +32,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"tsystem.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"libgcc_tm.h\"\n #include \"unwind-dw2-fde.h\"\n \n #define WIN32_LEAN_AND_MEAN"}, {"sha": "ea53c84f6f1fb49acd42cd8c8c30b73b5d29e5a7", "filename": "libgcc/config/i386/cygming-crtend.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fconfig%2Fi386%2Fcygming-crtend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fconfig%2Fi386%2Fcygming-crtend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcygming-crtend.c?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -1,5 +1,5 @@\n /* crtend object for windows32 targets.\n-   Copyright (C) 2007, 2008, 2009, 2010  Free Software Foundation, Inc.\n+   Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n \n    Contributed by Danny Smith <dannysmith@users.sourceforge.net>\n \n@@ -34,6 +34,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"tsystem.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"libgcc_tm.h\"\n #include \"unwind-dw2-fde.h\"\n \n #if defined(HAVE_LD_RO_RW_SECTION_MIXING)"}, {"sha": "234cb3d6b3bd4085cf0be1ac85dce0f42cbb7e58", "filename": "libgcc/config/ia64/fde-vms.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fconfig%2Fia64%2Ffde-vms.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fconfig%2Fia64%2Ffde-vms.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Ffde-vms.c?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -29,6 +29,7 @@\n #include \"tsystem.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"libgcc_tm.h\"\n #include <stddef.h>\n #include <stdlib.h>\n #include <stdio.h>"}, {"sha": "ca5c2670bf234bfd05a21e060ac852b838b454bb", "filename": "libgcc/config/ia64/unwind-ia64.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fconfig%2Fia64%2Funwind-ia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fconfig%2Fia64%2Funwind-ia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Funwind-ia64.c?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -31,6 +31,7 @@\n #include \"tsystem.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"libgcc_tm.h\"\n #include \"unwind.h\"\n #include \"unwind-ia64.h\"\n #include \"unwind-compat.h\""}, {"sha": "70529618c110a71f46e4c788dce6fb5aec81ef84", "filename": "libgcc/config/libbid/bid_gcc_intrinsics.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fconfig%2Flibbid%2Fbid_gcc_intrinsics.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fconfig%2Flibbid%2Fbid_gcc_intrinsics.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Flibbid%2Fbid_gcc_intrinsics.h?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2007, 2009, 2010  Free Software Foundation, Inc.\n+/* Copyright (C) 2007, 2009, 2010, 2011  Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -29,6 +29,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"tconfig.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"libgcc_tm.h\"\n \n #ifndef LIBGCC2_LONG_DOUBLE_TYPE_SIZE\n #define LIBGCC2_LONG_DOUBLE_TYPE_SIZE LONG_DOUBLE_TYPE_SIZE"}, {"sha": "a61ea0b9ca23ff9c3eafc20a1998de003a8c08c7", "filename": "libgcc/config/rs6000/darwin-fallback.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fconfig%2Frs6000%2Fdarwin-fallback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fconfig%2Frs6000%2Fdarwin-fallback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Fdarwin-fallback.c?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -1,5 +1,5 @@\n /* Fallback frame-state unwinder for Darwin.\n-   Copyright (C) 2004, 2005, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2007, 2009, 2011 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -28,6 +28,7 @@\n #include \"tsystem.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"libgcc_tm.h\"\n #include \"dwarf2.h\"\n #include \"unwind.h\"\n #include \"unwind-dw2.h\""}, {"sha": "a10a9b281193f23e3fa5bddfa4bc2304acbea4c8", "filename": "libgcc/config/stormy16/lib2funcs.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fconfig%2Fstormy16%2Flib2funcs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fconfig%2Fstormy16%2Flib2funcs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fstormy16%2Flib2funcs.c?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -4,7 +4,7 @@\n    files.  On this glorious day maybe this code can be integrated into\n    it too.  */\n \n-/* Copyright (C) 2005, 2008, 2009, 2010  Free Software Foundation, Inc.\n+/* Copyright (C) 2005, 2008, 2009, 2010, 2011  Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -31,6 +31,7 @@\n #include \"tsystem.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"libgcc_tm.h\"\n \n #ifdef HAVE_GAS_HIDDEN\n #define ATTRIBUTE_HIDDEN  __attribute__ ((__visibility__ (\"hidden\")))"}, {"sha": "2ded579929f030215a06530f1313ae11c29d60d2", "filename": "libgcc/config/xtensa/unwind-dw2-xtensa.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fconfig%2Fxtensa%2Funwind-dw2-xtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fconfig%2Fxtensa%2Funwind-dw2-xtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fxtensa%2Funwind-dw2-xtensa.c?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -28,6 +28,7 @@\n #include \"tsystem.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"libgcc_tm.h\"\n #include \"dwarf2.h\"\n #include \"unwind.h\"\n #ifdef __USING_SJLJ_EXCEPTIONS__"}, {"sha": "63b91b47a55bb4bab4d70baf07980da0b72a010f", "filename": "libgcc/configure", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -593,6 +593,8 @@ LIBOBJS\n asm_hidden_op\n extra_parts\n cpu_type\n+tm_defines\n+tm_file\n tmake_file\n sfp_machine_header\n set_use_emutls\n@@ -4785,6 +4787,16 @@ done\n tmake_file=\"${tmake_file_}\"\n \n \n+# Likewise export definitions for libgcc_tm.h\n+tm_file_=\n+for f in ${tm_file}\n+do\n+\ttm_file_=\"${tm_file_} \\$(srcdir)/config/$f\"\n+done\n+tm_file=\"${tm_file_}\"\n+\n+\n+\n # Substitute configuration variables\n \n "}, {"sha": "303a95ff54bb6268947d25a39f4fc850ddde02cf", "filename": "libgcc/configure.ac", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -354,6 +354,16 @@ done\n tmake_file=\"${tmake_file_}\"\n AC_SUBST(tmake_file)\n \n+# Likewise export definitions for libgcc_tm.h\n+tm_file_=\n+for f in ${tm_file}\n+do\n+\ttm_file_=\"${tm_file_} \\$(srcdir)/config/$f\"\n+done\n+tm_file=\"${tm_file_}\"\n+AC_SUBST(tm_file)\n+AC_SUBST(tm_defines)\n+\n # Substitute configuration variables\n AC_SUBST(cpu_type)\n AC_SUBST(extra_parts)"}, {"sha": "66b2cdf24469f291a6dd18e686a914b264aa1a8b", "filename": "libgcc/crtstuff.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fcrtstuff.c?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -62,6 +62,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"tsystem.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"libgcc_tm.h\"\n #include \"unwind-dw2-fde.h\"\n \n #ifndef FORCE_CODE_SECTION_ALIGN"}, {"sha": "c97869baca1a03207b57704bf951fd6f3f5b2437", "filename": "libgcc/dfp-bit.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fdfp-bit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fdfp-bit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fdfp-bit.h?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -1,5 +1,5 @@\n /* Header file for dfp-bit.c.\n-   Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -33,6 +33,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"tconfig.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"libgcc_tm.h\"\n \n #ifndef LIBGCC2_LONG_DOUBLE_TYPE_SIZE\n #define LIBGCC2_LONG_DOUBLE_TYPE_SIZE LONG_DOUBLE_TYPE_SIZE"}, {"sha": "22ea4403edbd564226d966c3921e2dc049baf81f", "filename": "libgcc/emutls.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Femutls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Femutls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Femutls.c?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -1,5 +1,5 @@\n /* TLS emulation.\n-   Copyright (C) 2006, 2008, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2006, 2008, 2009, 2011 Free Software Foundation, Inc.\n    Contributed by Jakub Jelinek <jakub@redhat.com>.\n \n This file is part of GCC.\n@@ -27,6 +27,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"tsystem.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"libgcc_tm.h\"\n #include \"gthr.h\"\n \n typedef unsigned int word __attribute__((mode(word)));"}, {"sha": "84e58155ccd54e1e8b8b39cf0bdfc4e22b5a5242", "filename": "libgcc/fixed-bit.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Ffixed-bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Ffixed-bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Ffixed-bit.c?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -1,5 +1,5 @@\n /* This is a software fixed-point library.\n-   Copyright (C) 2007, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2007, 2009, 2011 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -46,6 +46,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"tsystem.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"libgcc_tm.h\"\n \n #ifndef MIN_UNITS_PER_WORD\n #define MIN_UNITS_PER_WORD UNITS_PER_WORD"}, {"sha": "7509f76f71e81d5f2769cabcad4128f725e8f48e", "filename": "libgcc/fp-bit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Ffp-bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Ffp-bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Ffp-bit.c?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -37,6 +37,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"tconfig.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"libgcc_tm.h\"\n #include \"fp-bit.h\"\n \n /* The following macros can be defined to change the behavior of this file:"}, {"sha": "bbe6dd12b5a2835562e022fdcfaffb052835751b", "filename": "libgcc/generic-morestack-thread.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fgeneric-morestack-thread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fgeneric-morestack-thread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fgeneric-morestack-thread.c?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -27,6 +27,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"tsystem.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"libgcc_tm.h\"\n \n /* If inhibit_libc is defined, we can not compile this file.  The\n    effect is that people will not be able to use -fsplit-stack.  That"}, {"sha": "07bc2a6607353883839cd5562de3e1e3b1b6ebdc", "filename": "libgcc/generic-morestack.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fgeneric-morestack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fgeneric-morestack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fgeneric-morestack.c?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -27,6 +27,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"tsystem.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"libgcc_tm.h\"\n \n /* If inhibit_libc is defined, we can not compile this file.  The\n    effect is that people will not be able to use -fsplit-stack.  That"}, {"sha": "b672bcbdd415c1808a800ca4d71d74bc67523175", "filename": "libgcc/libgcc2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcc2.c?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -29,6 +29,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"tsystem.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"libgcc_tm.h\"\n \n #ifdef HAVE_GAS_HIDDEN\n #define ATTRIBUTE_HIDDEN  __attribute__ ((__visibility__ (\"hidden\")))"}, {"sha": "26370c5948cca5881e63b8915231c6b88ee26e2f", "filename": "libgcc/libgcov.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Flibgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Flibgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov.c?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -1,7 +1,7 @@\n /* Routines required for instrumenting a program.  */\n /* Compile this one with gcc.  */\n /* Copyright (C) 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2010\n+   2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -29,6 +29,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"tsystem.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"libgcc_tm.h\"\n \n #if defined(inhibit_libc)\n #define IN_LIBGCOV (-1)"}, {"sha": "69ea37049010cc00d48c9a9f32e7fc77855027c3", "filename": "libgcc/mkheader.sh", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fmkheader.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Fmkheader.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fmkheader.sh?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -0,0 +1,41 @@\n+#! /bin/sh\n+\n+# Copyright (C) 2001, 2002, 2006, 2007, 2010, 2011 Free Software Foundation, Inc.\n+# This file is part of GCC.\n+\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.  \n+\n+\n+# Print libgcc_tm.h to the standard output.\n+# DEFINES and HEADERS are expected to be set in the environment.\n+\n+# Add multiple inclusion protection guard, part one.\n+echo \"#ifndef LIBGCC_TM_H\"\n+echo \"#define LIBGCC_TM_H\"\n+\n+# Generate the body of the file\n+echo \"/* Automatically generated by mkheader.sh.  */\"\n+for def in $DEFINES; do\n+    echo \"#ifndef $def\" | sed 's/=.*//'\n+    echo \"# define $def\" | sed 's/=/ /'\n+    echo \"#endif\"\n+done\n+\n+for file in $HEADERS; do\n+    echo \"#include \\\"$file\\\"\"\n+done\n+\n+# Add multiple inclusion protection guard, part two.\n+echo \"#endif /* LIBGCC_TM_H */\""}, {"sha": "f57dc8c3925dbec6f40e26d1ef706f63fd873101", "filename": "libgcc/unwind-dw2-fde-dip.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Funwind-dw2-fde-dip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Funwind-dw2-fde-dip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2-fde-dip.c?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2001, 2002, 2003, 2004, 2005, 2009, 2010\n+/* Copyright (C) 2001, 2002, 2003, 2004, 2005, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Jakub Jelinek <jakub@redhat.com>.\n \n@@ -38,6 +38,7 @@\n #endif\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"libgcc_tm.h\"\n #include \"dwarf2.h\"\n #include \"unwind.h\"\n #define NO_BASE_OF_ENCODED_VALUE"}, {"sha": "7a783329f7cad4988e2e7bf3740d1067065a1159", "filename": "libgcc/unwind-dw2-fde.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Funwind-dw2-fde.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Funwind-dw2-fde.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2-fde.c?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines needed for unwinding stack frames for exception handling.  */\n /* Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2008,\n-   2009, 2010  Free Software Foundation, Inc.\n+   2009, 2010, 2011  Free Software Foundation, Inc.\n    Contributed by Jason Merrill <jason@cygnus.com>.\n \n This file is part of GCC.\n@@ -29,6 +29,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"tsystem.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"libgcc_tm.h\"\n #include \"dwarf2.h\"\n #include \"unwind.h\"\n #define NO_BASE_OF_ENCODED_VALUE"}, {"sha": "475ad00bf52331b6ded1592860e3426df1738fe3", "filename": "libgcc/unwind-dw2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2.c?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -27,6 +27,7 @@\n #include \"tsystem.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"libgcc_tm.h\"\n #include \"dwarf2.h\"\n #include \"unwind.h\"\n #ifdef __USING_SJLJ_EXCEPTIONS__"}, {"sha": "1fc1c5d3dc92253f518cb027c8551eb668c5d91a", "filename": "libgcc/unwind-sjlj.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Funwind-sjlj.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b75ed97493f2742b9747d08129eb5f255735c/libgcc%2Funwind-sjlj.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-sjlj.c?ref=852b75ed97493f2742b9747d08129eb5f255735c", "patch": "@@ -1,6 +1,6 @@\n /* SJLJ exception handling and frame unwind runtime interface routines.\n    Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2006,\n-   2009  Free Software Foundation, Inc.\n+   2009, 2011 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -27,6 +27,7 @@\n #include \"tsystem.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"libgcc_tm.h\"\n #include \"unwind.h\"\n #include \"gthr.h\"\n "}]}