{"sha": "763baff6f54ec6070e0ec6497363f5116ab4c874", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYzYmFmZjZmNTRlYzYwNzBlMGVjNjQ5NzM2M2Y1MTE2YWI0Yzg3NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-05-12T13:05:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-05-12T13:05:13Z"}, "message": "re PR middle-end/71062 (r235622 and restrict pointers)\n\n2016-05-12  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/71062\n\t* tree-ssa-alias.h (struct pt_solution): Add vars_contains_restrict\n\tfield.\n\t* tree-ssa-structalias.c (set_uids_in_ptset): Set vars_contains_restrict\n\tif the var is a restrict tag.\n\t* tree-ssa-alias.c (ptrs_compare_unequal): If vars_contains_restrict\n\tdo not disambiguate pointers against it.\n\t(dump_points_to_solution): Re-structure and adjust for new\n\tvars_contains_restrict flag.\n\t* gimple-pretty-print.c (pp_points_to_solution): Likewise.\n\n\t* gcc.dg/torture/pr71062.c: New testcase.\n\nFrom-SVN: r236174", "tree": {"sha": "84e63fa7e081279f7a68aca414b7f88e4487c667", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84e63fa7e081279f7a68aca414b7f88e4487c667"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/763baff6f54ec6070e0ec6497363f5116ab4c874", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/763baff6f54ec6070e0ec6497363f5116ab4c874", "html_url": "https://github.com/Rust-GCC/gccrs/commit/763baff6f54ec6070e0ec6497363f5116ab4c874", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/763baff6f54ec6070e0ec6497363f5116ab4c874/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cf48d8c4dc0556d165cd369eb5fa4d77fe823e59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf48d8c4dc0556d165cd369eb5fa4d77fe823e59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf48d8c4dc0556d165cd369eb5fa4d77fe823e59"}], "stats": {"total": 132, "additions": 106, "deletions": 26}, "files": [{"sha": "ddea24baf0d2b3d2aaf6f2fa40f05e8a7e4cf062", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763baff6f54ec6070e0ec6497363f5116ab4c874/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763baff6f54ec6070e0ec6497363f5116ab4c874/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=763baff6f54ec6070e0ec6497363f5116ab4c874", "patch": "@@ -1,3 +1,16 @@\n+2016-05-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71062\n+\t* tree-ssa-alias.h (struct pt_solution): Add vars_contains_restrict\n+\tfield.\n+\t* tree-ssa-structalias.c (set_uids_in_ptset): Set vars_contains_restrict\n+\tif the var is a restrict tag.\n+\t* tree-ssa-alias.c (ptrs_compare_unequal): If vars_contains_restrict\n+\tdo not disambiguate pointers against it.\n+\t(dump_points_to_solution): Re-structure and adjust for new\n+\tvars_contains_restrict flag.\n+\t* gimple-pretty-print.c (pp_points_to_solution): Likewise.\n+\n 2016-05-12  Martin Liska  <mliska@suse.cz>\n \n \t* doc/invoke.texi: Explain connection between -fsanitize-recover=address"}, {"sha": "4b0dc7c9a986bac37928a6992837c32ba0bbae75", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763baff6f54ec6070e0ec6497363f5116ab4c874/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763baff6f54ec6070e0ec6497363f5116ab4c874/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=763baff6f54ec6070e0ec6497363f5116ab4c874", "patch": "@@ -632,17 +632,37 @@ pp_points_to_solution (pretty_printer *buffer, struct pt_solution *pt)\n \t}\n       pp_right_brace (buffer);\n       if (pt->vars_contains_nonlocal\n-\t  && pt->vars_contains_escaped_heap)\n-\tpp_string (buffer, \" (nonlocal, escaped heap)\");\n-      else if (pt->vars_contains_nonlocal\n-\t       && pt->vars_contains_escaped)\n-\tpp_string (buffer, \" (nonlocal, escaped)\");\n-      else if (pt->vars_contains_nonlocal)\n-\tpp_string (buffer, \" (nonlocal)\");\n-      else if (pt->vars_contains_escaped_heap)\n-\tpp_string (buffer, \" (escaped heap)\");\n-      else if (pt->vars_contains_escaped)\n-\tpp_string (buffer, \" (escaped)\");\n+\t  || pt->vars_contains_escaped\n+\t  || pt->vars_contains_escaped_heap\n+\t  || pt->vars_contains_restrict)\n+\t{\n+\t  const char *comma = \"\";\n+\t  pp_string (buffer, \" (\");\n+\t  if (pt->vars_contains_nonlocal)\n+\t    {\n+\t      pp_string (buffer, \"nonlocal\");\n+\t      comma = \", \";\n+\t    }\n+\t  if (pt->vars_contains_escaped)\n+\t    {\n+\t      pp_string (buffer, comma);\n+\t      pp_string (buffer, \"escaped\");\n+\t      comma = \", \";\n+\t    }\n+\t  if (pt->vars_contains_escaped_heap)\n+\t    {\n+\t      pp_string (buffer, comma);\n+\t      pp_string (buffer, \"escaped heap\");\n+\t      comma = \", \";\n+\t    }\n+\t  if (pt->vars_contains_restrict)\n+\t    {\n+\t      pp_string (buffer, comma);\n+\t      pp_string (buffer, \"restrict\");\n+\t    }\n+\t  pp_string (buffer, \")\");\n+\t}\n+\n     }\n }\n "}, {"sha": "6dca22fd18259ef3732f5fc20ebde0bd95c3b20b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763baff6f54ec6070e0ec6497363f5116ab4c874/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763baff6f54ec6070e0ec6497363f5116ab4c874/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=763baff6f54ec6070e0ec6497363f5116ab4c874", "patch": "@@ -1,3 +1,8 @@\n+2016-05-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71062\n+\t* gcc.dg/torture/pr71062.c: New testcase.\n+\n 2016-05-12  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \tPR tree-optimization/71006"}, {"sha": "cc01dda2de46ce819659a4e10edb2dd9574ad938", "filename": "gcc/testsuite/gcc.dg/torture/pr71062.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763baff6f54ec6070e0ec6497363f5116ab4c874/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71062.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763baff6f54ec6070e0ec6497363f5116ab4c874/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71062.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71062.c?ref=763baff6f54ec6070e0ec6497363f5116ab4c874", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+\n+char bar;\n+\n+int __attribute__((noinline,noclone))\n+foo (char *__restrict p)\n+{\n+  if (p == &bar)\n+    return 1;\n+  return 0;\n+}\n+\n+int main()\n+{\n+  if (foo (&bar) != 1)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "b663ddfb0d5097b34d58cd14dba8e9a4bce4d24a", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763baff6f54ec6070e0ec6497363f5116ab4c874/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763baff6f54ec6070e0ec6497363f5116ab4c874/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=763baff6f54ec6070e0ec6497363f5116ab4c874", "patch": "@@ -363,14 +363,17 @@ ptrs_compare_unequal (tree ptr1, tree ptr2)\n   else if (obj1 && TREE_CODE (ptr2) == SSA_NAME)\n     {\n       struct ptr_info_def *pi = SSA_NAME_PTR_INFO (ptr2);\n-      if (!pi)\n+      /* We may not use restrict to optimize pointer comparisons.\n+         See PR71062.  So we have to assume that restrict-pointed-to\n+\t may be in fact obj1.  */\n+      if (!pi || pi->pt.vars_contains_restrict)\n \treturn false;\n       return !pt_solution_includes (&pi->pt, obj1);\n     }\n   else if (TREE_CODE (ptr1) == SSA_NAME && obj2)\n     {\n       struct ptr_info_def *pi = SSA_NAME_PTR_INFO (ptr1);\n-      if (!pi)\n+      if (!pi || pi->pt.vars_contains_restrict)\n \treturn false;\n       return !pt_solution_includes (&pi->pt, obj2);\n     }\n@@ -521,17 +524,31 @@ dump_points_to_solution (FILE *file, struct pt_solution *pt)\n       fprintf (file, \", points-to vars: \");\n       dump_decl_set (file, pt->vars);\n       if (pt->vars_contains_nonlocal\n-\t  && pt->vars_contains_escaped_heap)\n-\tfprintf (file, \" (nonlocal, escaped heap)\");\n-      else if (pt->vars_contains_nonlocal\n-\t       && pt->vars_contains_escaped)\n-\tfprintf (file, \" (nonlocal, escaped)\");\n-      else if (pt->vars_contains_nonlocal)\n-\tfprintf (file, \" (nonlocal)\");\n-      else if (pt->vars_contains_escaped_heap)\n-\tfprintf (file, \" (escaped heap)\");\n-      else if (pt->vars_contains_escaped)\n-\tfprintf (file, \" (escaped)\");\n+\t  || pt->vars_contains_escaped\n+\t  || pt->vars_contains_escaped_heap\n+\t  || pt->vars_contains_restrict)\n+\t{\n+\t  const char *comma = \"\";\n+\t  fprintf (file, \" (\");\n+\t  if (pt->vars_contains_nonlocal)\n+\t    {\n+\t      fprintf (file, \"nonlocal\");\n+\t      comma = \", \";\n+\t    }\n+\t  if (pt->vars_contains_escaped)\n+\t    {\n+\t      fprintf (file, \"%sescaped\", comma);\n+\t      comma = \", \";\n+\t    }\n+\t  if (pt->vars_contains_escaped_heap)\n+\t    {\n+\t      fprintf (file, \"%sescaped heap\", comma);\n+\t      comma = \", \";\n+\t    }\n+\t  if (pt->vars_contains_restrict)\n+\t    fprintf (file, \"%srestrict\", comma);\n+\t  fprintf (file, \")\");\n+\t}\n     }\n }\n "}, {"sha": "6680cc0a1eb674979794dda411638d7ffd67d8d8", "filename": "gcc/tree-ssa-alias.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763baff6f54ec6070e0ec6497363f5116ab4c874/gcc%2Ftree-ssa-alias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763baff6f54ec6070e0ec6497363f5116ab4c874/gcc%2Ftree-ssa-alias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.h?ref=763baff6f54ec6070e0ec6497363f5116ab4c874", "patch": "@@ -47,14 +47,16 @@ struct GTY(()) pt_solution\n      includes memory at address NULL.  */\n   unsigned int null : 1;\n \n-\n   /* Nonzero if the vars bitmap includes a variable included in 'nonlocal'.  */\n   unsigned int vars_contains_nonlocal : 1;\n   /* Nonzero if the vars bitmap includes a variable included in 'escaped'.  */\n   unsigned int vars_contains_escaped : 1;\n   /* Nonzero if the vars bitmap includes a anonymous heap variable that\n      escaped the function and thus became global.  */\n   unsigned int vars_contains_escaped_heap : 1;\n+  /* Nonzero if the vars bitmap includes a anonymous variable used to\n+     represent storage pointed to by a restrict qualified pointer.  */\n+  unsigned int vars_contains_restrict : 1;\n \n   /* Set of variables that this pointer may point to.  */\n   bitmap vars;"}, {"sha": "5e3c7d094b58a4296eae879a9c43a5b373a717ee", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763baff6f54ec6070e0ec6497363f5116ab4c874/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763baff6f54ec6070e0ec6497363f5116ab4c874/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=763baff6f54ec6070e0ec6497363f5116ab4c874", "patch": "@@ -6254,6 +6254,9 @@ set_uids_in_ptset (bitmap into, bitmap from, struct pt_solution *pt,\n \t  pt->vars_contains_escaped_heap = vi->is_heap_var;\n \t}\n \n+      if (vi->is_restrict_var)\n+\tpt->vars_contains_restrict = true;\n+\n       if (TREE_CODE (vi->decl) == VAR_DECL\n \t  || TREE_CODE (vi->decl) == PARM_DECL\n \t  || TREE_CODE (vi->decl) == RESULT_DECL)\n@@ -7505,7 +7508,7 @@ make_pass_build_ealias (gcc::context *ctxt)\n \n /* IPA PTA solutions for ESCAPED.  */\n struct pt_solution ipa_escaped_pt\n-  = { true, false, false, false, false, false, false, false, NULL };\n+  = { true, false, false, false, false, false, false, false, false, NULL };\n \n /* Associate node with varinfo DATA. Worker for\n    cgraph_for_symbol_thunks_and_aliases.  */"}]}