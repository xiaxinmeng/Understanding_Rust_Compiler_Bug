{"sha": "e9cf6a9776f6749d6a971034e5ec16cc63391a3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTljZjZhOTc3NmY2NzQ5ZDZhOTcxMDM0ZTVlYzE2Y2M2MzM5MWEzZg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-04-25T23:36:38Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-04-25T23:36:38Z"}, "message": "(struct move_by_pieces): Add to_struct and from_struct fields.\n\n(move_by_pieces): Set to_struct and from_struct fields.\n(move_by_pieces_1): Set MEM_IN_STRUCT_P of to1 and from1.\n(expand_builtin, case BUILT_IN_MEMCPY): New variable type.\nSet MEM_IN_STRUCT_P of src_mem and dest_mem.\n\nFrom-SVN: r9468", "tree": {"sha": "3ffb50c348ff42f4ed022071a225e0257399faa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ffb50c348ff42f4ed022071a225e0257399faa5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9cf6a9776f6749d6a971034e5ec16cc63391a3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9cf6a9776f6749d6a971034e5ec16cc63391a3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9cf6a9776f6749d6a971034e5ec16cc63391a3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9cf6a9776f6749d6a971034e5ec16cc63391a3f/comments", "author": null, "committer": null, "parents": [{"sha": "8521c499ab131282d6c4c2943cce525573d8cee3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8521c499ab131282d6c4c2943cce525573d8cee3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8521c499ab131282d6c4c2943cce525573d8cee3"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "04e5442e2c5aa43d7e9d78ef975ccaf282368370", "filename": "gcc/expr.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9cf6a9776f6749d6a971034e5ec16cc63391a3f/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9cf6a9776f6749d6a971034e5ec16cc63391a3f/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=e9cf6a9776f6749d6a971034e5ec16cc63391a3f", "patch": "@@ -118,10 +118,12 @@ struct move_by_pieces\n   rtx to_addr;\n   int autinc_to;\n   int explicit_inc_to;\n+  int to_struct;\n   rtx from;\n   rtx from_addr;\n   int autinc_from;\n   int explicit_inc_from;\n+  int from_struct;\n   int len;\n   int offset;\n   int reverse;\n@@ -1412,6 +1414,9 @@ move_by_pieces (to, from, len, align)\n   if (data.reverse) data.offset = len;\n   data.len = len;\n \n+  data.to_struct = MEM_IN_STRUCT_P (to);\n+  data.from_struct = MEM_IN_STRUCT_P (from);\n+\n   /* If copying requires more than two move insns,\n      copy addresses to registers (to make displacements shorter)\n      and use post-increment if available.  */\n@@ -1551,11 +1556,13 @@ move_by_pieces_1 (genfun, mode, data)\n \t     ? gen_rtx (MEM, mode, data->to_addr)\n \t     : change_address (data->to, mode,\n \t\t\t       plus_constant (data->to_addr, data->offset)));\n+      MEM_IN_STRUCT_P (to1) = data->to_struct;\n       from1 =\n \t(data->autinc_from\n \t ? gen_rtx (MEM, mode, data->from_addr)\n \t : change_address (data->from, mode,\n \t\t\t   plus_constant (data->from_addr, data->offset)));\n+      MEM_IN_STRUCT_P (from1) = data->from_struct;\n \n #ifdef HAVE_PRE_DECREMENT\n       if (data->explicit_inc_to < 0)\n@@ -7728,6 +7735,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t  tree dest = TREE_VALUE (arglist);\n \t  tree src = TREE_VALUE (TREE_CHAIN (arglist));\n \t  tree len = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n+\t  tree type;\n \n \t  int src_align\n \t    = get_pointer_alignment (src, BIGGEST_ALIGNMENT) / BITS_PER_UNIT;\n@@ -7747,11 +7755,23 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t  dest_rtx = expand_expr (dest, NULL_RTX, ptr_mode, EXPAND_SUM);\n \t  dest_mem = gen_rtx (MEM, BLKmode,\n \t\t\t      memory_address (BLKmode, dest_rtx));\n+\t  /* There could be a void* cast on top of the object.  */\n+\t  if (TREE_CODE (dest) == NOP_EXPR)\n+\t    type = TREE_TYPE (TREE_TYPE (TREE_OPERAND (dest, 0)));\n+\t  else\n+\t    type = TREE_TYPE (TREE_TYPE (dest));\n+\t  MEM_IN_STRUCT_P (dest_mem) = AGGREGATE_TYPE_P (type);\n \t  src_mem = gen_rtx (MEM, BLKmode,\n \t\t\t     memory_address (BLKmode,\n \t\t\t\t\t     expand_expr (src, NULL_RTX,\n \t\t\t\t\t\t\t  ptr_mode,\n \t\t\t\t\t\t\t  EXPAND_SUM)));\n+\t  /* There could be a void* cast on top of the object.  */\n+\t  if (TREE_CODE (src) == NOP_EXPR)\n+\t    type = TREE_TYPE (TREE_TYPE (TREE_OPERAND (src, 0)));\n+\t  else\n+\t    type = TREE_TYPE (TREE_TYPE (src));\n+\t  MEM_IN_STRUCT_P (src_mem) = AGGREGATE_TYPE_P (type);\n \n \t  /* Copy word part most expediently.  */\n \t  emit_block_move (dest_mem, src_mem,"}]}