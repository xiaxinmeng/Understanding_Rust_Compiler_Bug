{"sha": "35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzViNmI0MzdhYTAzZTk1YWIyZWI2ZmE1YWNhZjI1ZTA3YTliMTQzMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-07-26T14:34:19Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-07-26T14:34:19Z"}, "message": "re PR rtl-optimization/16643 (verify_local_live_at_start ICE after crossjumping & cfgcleanup)\n\n\tPR rtl-optimization/16643\n\t* cfglayout.h (cfg_layout_initialize): Add a flags parameter.\n\t* cfglayout.c (cfg_layout_initialize): Pass it to cleanup_cfg.\n\t* basic-block.h (reorder_basic_blocks): Add a flags parameter.\n\t* cfglayout.c (reorder_basic_blocks): Pass it to cfg_layout_initialize.\n\t(partition_hot_cold_basic_blocks): Pass 0 to cfg_layout_initialize.\n\t* function.c (thread_prologue_and_epilogue_insns): Likewise.\n\t* rtl.h (tracer): Add a flags parameter.\n\t* tracer.c (tracer): Pass it to cfg_layout_initialise.\n\t* passes.c (rest_of_handle_stack_regs): Pass 0 to reorder_basic_blocks.\n\t(rest_of_handle_reorder_blocks): Update calls to tracer and\n\treorder_basic_blocks, passing CLEANUP_UPDATE_LIFE if appropriate.\n\t(rest_of_handle_tracer): Pass 0 to tracer.\n\t(rest_of_handle_loop2): Pass 0 to cfg_layout_initialize.\n\nFrom-SVN: r85191", "tree": {"sha": "4287b222452a3f92e4472b74970cdf9826728da2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4287b222452a3f92e4472b74970cdf9826728da2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433/comments", "author": null, "committer": null, "parents": [{"sha": "fa0a2ae5e38f358c9c1b1480a6c5b291ea5201bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa0a2ae5e38f358c9c1b1480a6c5b291ea5201bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa0a2ae5e38f358c9c1b1480a6c5b291ea5201bd"}], "stats": {"total": 92, "additions": 66, "deletions": 26}, "files": [{"sha": "87eb2754359676cf9459e8a784899b2a4d7f3479", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433", "patch": "@@ -1,3 +1,20 @@\n+2004-07-26  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\tPR rtl-optimization/16643\n+\t* cfglayout.h (cfg_layout_initialize): Add a flags parameter.\n+\t* cfglayout.c (cfg_layout_initialize): Pass it to cleanup_cfg.\n+\t* basic-block.h (reorder_basic_blocks): Add a flags parameter.\n+\t* cfglayout.c (reorder_basic_blocks): Pass it to cfg_layout_initialize.\n+\t(partition_hot_cold_basic_blocks): Pass 0 to cfg_layout_initialize.\n+\t* function.c (thread_prologue_and_epilogue_insns): Likewise.\n+\t* rtl.h (tracer): Add a flags parameter.\n+\t* tracer.c (tracer): Pass it to cfg_layout_initialise.\n+\t* passes.c (rest_of_handle_stack_regs): Pass 0 to reorder_basic_blocks.\n+\t(rest_of_handle_reorder_blocks): Update calls to tracer and\n+\treorder_basic_blocks, passing CLEANUP_UPDATE_LIFE if appropriate.\n+\t(rest_of_handle_tracer): Pass 0 to tracer.\n+\t(rest_of_handle_loop2): Pass 0 to cfg_layout_initialize.\n+\n 2004-07-25  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000.md (movdi_internal64): Further disparage"}, {"sha": "c42a66d6f0a5e525806b43058adecd21f1f1789c", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433", "patch": "@@ -676,7 +676,7 @@ extern bool inside_basic_block_p (rtx);\n extern bool control_flow_insn_p (rtx);\n \n /* In bb-reorder.c */\n-extern void reorder_basic_blocks (void);\n+extern void reorder_basic_blocks (unsigned int);\n extern void partition_hot_cold_basic_blocks (void);\n \n /* In cfg.c */"}, {"sha": "90c14547aa62c8fe41012dd93b3b1059524f8e93", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433", "patch": "@@ -1908,10 +1908,11 @@ fix_edges_for_rarely_executed_code (edge *crossing_edges,\n   add_reg_crossing_jump_notes ();\n }\n \n-/* Reorder basic blocks.  The main entry point to this file.  */\n+/* Reorder basic blocks.  The main entry point to this file.  FLAGS is\n+   the set of flags to pass to cfg_layout_initialize().  */\n \n void\n-reorder_basic_blocks (void)\n+reorder_basic_blocks (unsigned int flags)\n {\n   int n_traces;\n   int i;\n@@ -1925,7 +1926,7 @@ reorder_basic_blocks (void)\n \n   timevar_push (TV_REORDER_BLOCKS);\n \n-  cfg_layout_initialize ();\n+  cfg_layout_initialize (flags);\n \n   set_edge_can_fallthru_flag ();\n   mark_dfs_back_edges ();\n@@ -1999,7 +2000,7 @@ partition_hot_cold_basic_blocks (void)\n   \n   crossing_edges = xcalloc (max_edges, sizeof (edge));\n \n-  cfg_layout_initialize ();\n+  cfg_layout_initialize (0);\n   \n   FOR_EACH_BB (cur_bb)\n     if (cur_bb->index >= 0"}, {"sha": "a81ce4c7f8cafc8029b85906015b1bee4867cfda", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433", "patch": "@@ -1133,11 +1133,15 @@ cfg_layout_duplicate_bb (basic_block bb)\n   return new_bb;\n }\n \f\n-/* Main entry point to this module - initialize the data structures for\n-   CFG layout changes.  It keeps LOOPS up-to-date if not null.  */\n+/* Main entry point to this module - initialize the datastructures for\n+   CFG layout changes.  It keeps LOOPS up-to-date if not null.\n+\n+   FLAGS is a set of additional flags to pass to cleanup_cfg().  It should\n+   include CLEANUP_UPDATE_LIFE if liveness information must be kept up\n+   to date.  */\n \n void\n-cfg_layout_initialize (void)\n+cfg_layout_initialize (unsigned int flags)\n {\n   basic_block bb;\n \n@@ -1152,7 +1156,7 @@ cfg_layout_initialize (void)\n \n   record_effective_endpoints ();\n \n-  cleanup_cfg (CLEANUP_CFGLAYOUT);\n+  cleanup_cfg (CLEANUP_CFGLAYOUT | flags);\n }\n \n /* Splits superblocks.  */"}, {"sha": "444e76a9e1e5050502195e8d6fea8ff9368cb444", "filename": "gcc/cfglayout.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433/gcc%2Fcfglayout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433/gcc%2Fcfglayout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.h?ref=35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433", "patch": "@@ -25,7 +25,7 @@\n \n extern rtx cfg_layout_function_footer;\n \n-extern void cfg_layout_initialize (void);\n+extern void cfg_layout_initialize (unsigned int);\n extern void cfg_layout_finalize (void);\n extern void insn_locators_initialize (void);\n extern void reemit_insn_block_notes (void);"}, {"sha": "20c5c5c3fb666929f52907315a1e18542058661a", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433", "patch": "@@ -5213,7 +5213,7 @@ thread_prologue_and_epilogue_insns (rtx f ATTRIBUTE_UNUSED)\n          use return.  Inserting a jump 'by hand' is extremely messy, so\n \t we take advantage of cfg_layout_finalize using\n \tfixup_fallthru_exit_predecessor.  */\n-      cfg_layout_initialize ();\n+      cfg_layout_initialize (0);\n       FOR_EACH_BB (cur_bb)\n \tif (cur_bb->index >= 0 && cur_bb->next_bb->index >= 0)\n \t  cur_bb->rbi->next = cur_bb->next_bb;"}, {"sha": "c290ff30d4ecd0657b5fc9a5d9261f776a0fb6bc", "filename": "gcc/passes.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433", "patch": "@@ -549,7 +549,7 @@ rest_of_handle_stack_regs (void)\n \t\t       | (flag_crossjumping ? CLEANUP_CROSSJUMP : 0))\n \t  && (flag_reorder_blocks || flag_reorder_blocks_and_partition))\n \t{\n-\t  reorder_basic_blocks ();\n+\t  reorder_basic_blocks (0);\n \t  cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_POST_REGSTACK);\n \t}\n     }\n@@ -734,23 +734,22 @@ static void\n rest_of_handle_reorder_blocks (void)\n {\n   bool changed;\n+  unsigned int liveness_flags;\n+\n   open_dump_file (DFI_bbro, current_function_decl);\n \n   /* Last attempt to optimize CFG, as scheduling, peepholing and insn\n      splitting possibly introduced more crossjumping opportunities.  */\n-  changed = cleanup_cfg (CLEANUP_EXPENSIVE\n-\t\t\t | (!HAVE_conditional_execution\n-\t\t\t    ? CLEANUP_UPDATE_LIFE : 0));\n+  liveness_flags = (!HAVE_conditional_execution ? CLEANUP_UPDATE_LIFE : 0);\n+  changed = cleanup_cfg (CLEANUP_EXPENSIVE | liveness_flags);\n \n   if (flag_sched2_use_traces && flag_schedule_insns_after_reload)\n-    tracer ();\n+    tracer (liveness_flags);\n   if (flag_reorder_blocks || flag_reorder_blocks_and_partition)\n-    reorder_basic_blocks ();\n+    reorder_basic_blocks (liveness_flags);\n   if (flag_reorder_blocks || flag_reorder_blocks_and_partition\n       || (flag_sched2_use_traces && flag_schedule_insns_after_reload))\n-    changed |= cleanup_cfg (CLEANUP_EXPENSIVE\n-\t\t\t    | (!HAVE_conditional_execution\n-\t\t\t       ? CLEANUP_UPDATE_LIFE : 0));\n+    changed |= cleanup_cfg (CLEANUP_EXPENSIVE | liveness_flags);\n \n   /* On conditional execution targets we can not update the life cheaply, so\n      we deffer the updating to after both cleanups.  This may lose some cases\n@@ -897,7 +896,7 @@ rest_of_handle_tracer (void)\n   open_dump_file (DFI_tracer, current_function_decl);\n   if (dump_file)\n     dump_flow_info (dump_file);\n-  tracer ();\n+  tracer (0);\n   cleanup_cfg (CLEANUP_EXPENSIVE);\n   reg_scan (get_insns (), max_reg_num (), 0);\n   close_dump_file (DFI_tracer, print_rtl_with_bb, get_insns ());\n@@ -1353,7 +1352,7 @@ rest_of_handle_loop2 (void)\n     dump_flow_info (dump_file);\n \n   /* Initialize structures for layout changes.  */\n-  cfg_layout_initialize ();\n+  cfg_layout_initialize (0);\n \n   loops = loop_optimizer_init (dump_file);\n "}, {"sha": "2d3390a6d17967318310c9114860a4dc55f265e9", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433", "patch": "@@ -2432,7 +2432,7 @@ extern void if_convert (int);\n extern void invert_br_probabilities (rtx);\n extern bool expensive_function_p (int);\n /* In tracer.c */\n-extern void tracer (void);\n+extern void tracer (unsigned int);\n \n /* In var-tracking.c */\n extern void variable_tracking_main (void);"}, {"sha": "27ba1fcc31b79c08f1f9b9d59b0d94089b301bbd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433", "patch": "@@ -1,3 +1,7 @@\n+2004-07-26  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* gcc.c-torture/compile/20040726-1.c: New test.\n+\n 2004-07-26  Niall Douglas  <s_fsfeurope2@nedprod.com>\n \t    Brian Ryner  <bryner@brianryner.com>\n "}, {"sha": "e53ccd655bbaab34049e9ca72f954d4a0cefa03c", "filename": "gcc/testsuite/gcc.c-torture/compile/20040726-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040726-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040726-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040726-1.c?ref=35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433", "patch": "@@ -0,0 +1,14 @@\n+/* PR rtl-optimization/16643 */\n+void foo (int a, int b, int c, int d, int e, int *f)\n+{\n+  if (a == 0)\n+    if (b == 0)\n+      if (c == 0)\n+\tif (d == 0)\n+\t  {\n+\t    *f = e;\n+\t    return;\n+\t  }\n+  *f = e;\n+  return;\n+}"}, {"sha": "dd263c4fdfd1766447c4cf2f395407c4f1fc436d", "filename": "gcc/tracer.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433/gcc%2Ftracer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433/gcc%2Ftracer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftracer.c?ref=35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433", "patch": "@@ -354,17 +354,18 @@ layout_superblocks (void)\n     }\n }\n \n-/* Main entry point to this file.  */\n+/* Main entry point to this file.  FLAGS is the set of flags to pass\n+   to cfg_layout_initialize().  */\n \n void\n-tracer (void)\n+tracer (unsigned int flags)\n {\n   if (n_basic_blocks <= 1)\n     return;\n \n   timevar_push (TV_TRACER);\n \n-  cfg_layout_initialize ();\n+  cfg_layout_initialize (flags);\n   mark_dfs_back_edges ();\n   if (dump_file)\n     dump_flow_info (dump_file);"}]}