{"sha": "e7c59a0e02560a05f2ef48922f25c54934752a7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdjNTlhMGUwMjU2MGEwNWYyZWY0ODkyMmYyNWM1NDkzNDc1MmE3Yw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-12-28T09:57:57Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-12-28T09:57:57Z"}, "message": "[multiple changes]\n\n2005-12-28  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/std/std_bitset.h (bitset<>::_M_copy_from_string,\n\tbitset<>::_M_copy_to_string, bitset<>::operator>>): Reverse loop.\n\n\t* testsuite/25_algorithms/heap/heap.cc (test01): Always enable\n\tcomplexity checks.\n\t* testsuite/18_support/numeric_limits/specialization.cc: Avoid\n\tunused parameter warning.\n\t* testsuite/18_support/numeric_limits/traps.cc: Acoid unused variable\n\twarning.\n\t* testsuite/ext/malloc_allocator/deallocate_global.cc: Fix format\n\tstring.\n\t* testsuite/ext/malloc_allocator/deallocate_local.cc: Likewise.\n\t* testsuite/ext/array_allocator/2.cc: Remove unused variable.\n\t* testsuite/tr1/3_function_objects/mem_fn.cc: Avoid unused variable\n\twarnings.\n\t* testsuite/tr1/6_containers/unordered/instantiate/set.cc: Just\n\tinstantiate.\n\t* testsuite/tr1/6_containers/unordered/instantiate/map.cc: Likewise.\n\t* testsuite/tr1/6_containers/unordered/instantiate/hash.cc: Likewise.\n\t* testsuite/tr1/6_containers/unordered/instantiate/multiset.cc:\n\tLikewise.\n\t* testsuite/tr1/6_containers/unordered/instantiate/multimap.cc:\n\tLikewise.\n\t* testsuite/tr1/6_containers/array/cons/aggregate_initialization.cc:\n\tAvoid unused variable warnings.\n\t* testsuite/tr1/6_containers/array/requirements/zero_sized_arrays.cc:\n\tLikewise.\n\t* testsuite/thread/18185.cc: Likewise.\n\t* testsuite/27_io/ios_base/storage/11584.cc: Likewise; avoid comparison\n\tbetween signed and unsigned warning.\n\t* testsuite/27_io/types/1.cc: Avoid unused variable warnings.\n\t* testsuite/testsuite_allocator.h (check_new): Likewise.\n\t(check_deallocate_null): Adjust return type.\n\t* testsuite/testsuite_hooks.h (bitmask_operators): Avoid unused\n\tvariable warnings.\n\t* testsuite/21_strings/c_strings/wchar_t/24559.cc: Avoid unused\n\tvariable warning.\n\n2005-12-28  Chris Jefferson  <chris@bubblescope.net>\n\n\t* include/std/std_bitset.h (bitset<0>::set, bitset<0>::reset,\n\tbitset<0>::flip, bitset<0>::test): Add inline specializations for\n\tbitset<0>.\n\n\t* testsuite/tr1/6_containers/unordered/insert/multiset_range.cc\n\t(test01): Add static cast.\n\t* testsuite/tr1/6_containers/unordered/insert/set_range.cc\n\t(test01): Likewise.\n\t* testsuite/testsuite_hooks.h (operator==(NonDefaultConstructible,\n\tNonDefaultConstructible), operator<(NonDefaultConstructible,\n\tNonDefaultConstrictible)): Avoid unused parameter warning.\n\nFrom-SVN: r109103", "tree": {"sha": "981b50da28009ea41eebe9fe7641784fcbf5f76d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/981b50da28009ea41eebe9fe7641784fcbf5f76d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7c59a0e02560a05f2ef48922f25c54934752a7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c59a0e02560a05f2ef48922f25c54934752a7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7c59a0e02560a05f2ef48922f25c54934752a7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c59a0e02560a05f2ef48922f25c54934752a7c/comments", "author": null, "committer": null, "parents": [{"sha": "6c8ccf1c5a3b530bd09cb1d103564d6bb1c71e2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c8ccf1c5a3b530bd09cb1d103564d6bb1c71e2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c8ccf1c5a3b530bd09cb1d103564d6bb1c71e2d"}], "stats": {"total": 459, "additions": 269, "deletions": 190}, "files": [{"sha": "b5a754bd70390c9887cdfe03d9d76193c9cd2b0e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e7c59a0e02560a05f2ef48922f25c54934752a7c", "patch": "@@ -1,3 +1,57 @@\n+2005-12-28  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/std/std_bitset.h (bitset<>::_M_copy_from_string,\n+\tbitset<>::_M_copy_to_string, bitset<>::operator>>): Reverse loop.\n+\n+\t* testsuite/25_algorithms/heap/heap.cc (test01): Always enable\n+\tcomplexity checks.\n+\t* testsuite/18_support/numeric_limits/specialization.cc: Avoid\n+\tunused parameter warning.\n+\t* testsuite/18_support/numeric_limits/traps.cc: Acoid unused variable\n+\twarning.\n+\t* testsuite/ext/malloc_allocator/deallocate_global.cc: Fix format\n+\tstring.\n+\t* testsuite/ext/malloc_allocator/deallocate_local.cc: Likewise.\n+\t* testsuite/ext/array_allocator/2.cc: Remove unused variable.\n+\t* testsuite/tr1/3_function_objects/mem_fn.cc: Avoid unused variable\n+\twarnings.\n+\t* testsuite/tr1/6_containers/unordered/instantiate/set.cc: Just\n+\tinstantiate.\n+\t* testsuite/tr1/6_containers/unordered/instantiate/map.cc: Likewise.\n+\t* testsuite/tr1/6_containers/unordered/instantiate/hash.cc: Likewise.\n+\t* testsuite/tr1/6_containers/unordered/instantiate/multiset.cc:\n+\tLikewise.\n+\t* testsuite/tr1/6_containers/unordered/instantiate/multimap.cc:\n+\tLikewise.\n+\t* testsuite/tr1/6_containers/array/cons/aggregate_initialization.cc:\n+\tAvoid unused variable warnings.\n+\t* testsuite/tr1/6_containers/array/requirements/zero_sized_arrays.cc:\n+\tLikewise.\n+\t* testsuite/thread/18185.cc: Likewise.\n+\t* testsuite/27_io/ios_base/storage/11584.cc: Likewise; avoid comparison\n+\tbetween signed and unsigned warning.\n+\t* testsuite/27_io/types/1.cc: Avoid unused variable warnings.\n+\t* testsuite/testsuite_allocator.h (check_new): Likewise.\n+\t(check_deallocate_null): Adjust return type.\n+\t* testsuite/testsuite_hooks.h (bitmask_operators): Avoid unused\n+\tvariable warnings.\n+\t* testsuite/21_strings/c_strings/wchar_t/24559.cc: Avoid unused\n+\tvariable warning.\n+\n+2005-12-28  Chris Jefferson  <chris@bubblescope.net>\n+\n+\t* include/std/std_bitset.h (bitset<0>::set, bitset<0>::reset,\n+\tbitset<0>::flip, bitset<0>::test): Add inline specializations for\n+\tbitset<0>.\n+\n+\t* testsuite/tr1/6_containers/unordered/insert/multiset_range.cc\n+\t(test01): Add static cast.\n+\t* testsuite/tr1/6_containers/unordered/insert/set_range.cc\n+\t(test01): Likewise.\n+\t* testsuite/testsuite_hooks.h (operator==(NonDefaultConstructible,\n+\tNonDefaultConstructible), operator<(NonDefaultConstructible,\n+\tNonDefaultConstrictible)): Avoid unused parameter warning.\n+\n 2005-12-26  Chris Jefferson  <chris@bubblescope.net>\n \n \t* include/ext/mt_allocator.h (__mt_alloc::__mt_alloc): Remove"}, {"sha": "ad47238ed6287e2533c7d9438c7ef59fd19581b3", "filename": "libstdc++-v3/include/std/std_bitset.h", "status": "modified", "additions": 50, "deletions": 11, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h?ref=e7c59a0e02560a05f2ef48922f25c54934752a7c", "patch": "@@ -1144,19 +1144,20 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n   template<size_t _Nb>\n     template<class _CharT, class _Traits, class _Alloc>\n       void\n-      bitset<_Nb>::_M_copy_from_string(const std::basic_string<_CharT, _Traits,\n-\t\t\t\t       _Alloc>& __s, size_t __pos, size_t __n)\n+      bitset<_Nb>::\n+      _M_copy_from_string(const std::basic_string<_CharT, _Traits,\n+\t\t\t  _Alloc>& __s, size_t __pos, size_t __n)\n       {\n \treset();\n \tconst size_t __nbits = std::min(_Nb, std::min(__n, __s.size() - __pos));\n-\tfor (size_t __i = 0; __i < __nbits; ++__i)\n+\tfor (size_t __i = __nbits; __i > 0; --__i)\n \t  {\n-\t    switch(__s[__pos + __nbits - __i - 1])\n+\t    switch(__s[__pos + __nbits - __i])\n \t      {\n \t      case '0':\n \t\tbreak;\n \t      case '1':\n-\t\tset(__i);\n+\t\tset(__i - 1);\n \t\tbreak;\n \t      default:\n \t\t__throw_invalid_argument(__N(\"bitset::_M_copy_from_string\"));\n@@ -1167,13 +1168,13 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n   template<size_t _Nb>\n     template<class _CharT, class _Traits, class _Alloc>\n       void\n-      bitset<_Nb>::_M_copy_to_string(std::basic_string<_CharT, _Traits,\n-\t\t\t\t     _Alloc>& __s) const\n+      bitset<_Nb>::\n+      _M_copy_to_string(std::basic_string<_CharT, _Traits, _Alloc>& __s) const\n       {\n \t__s.assign(_Nb, '0');\n-\tfor (size_t __i = 0; __i < _Nb; ++__i)\n-\t  if (_Unchecked_test(__i))\n-\t    __s[_Nb - 1 - __i] = '1';\n+\tfor (size_t __i = _Nb; __i > 0; --__i)\n+\t  if (_Unchecked_test(__i - 1))\n+\t    __s[_Nb - __i] = '1';\n       }\n \n   // 23.3.5.3 bitset operations:\n@@ -1242,7 +1243,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n \t      // 303. Bitset input operator underspecified\n \t      const char_type __zero = __is.widen('0');\n \t      const char_type __one = __is.widen('1');\n-\t      for (size_t __i = 0; __i < _Nb; ++__i)\n+\t      for (size_t __i = _Nb; __i > 0; --__i)\n \t\t{\n \t\t  static typename _Traits::int_type __eof = _Traits::eof();\n \t\t  \n@@ -1290,6 +1291,44 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       __x._M_copy_to_string(__tmp);\n       return __os << __tmp;\n     }\n+\n+  // Specializations for zero-sized bitsets, to avoid \"unsigned comparison\n+  // with zero\" warnings.\n+  template<>\n+    inline bitset<0>&\n+    bitset<0>::\n+    set(size_t, bool)\n+    {\n+      __throw_out_of_range(__N(\"bitset::set\"));\n+      return *this;\n+    }\n+      \n+  template<>\n+    inline bitset<0>&\n+    bitset<0>::\n+    reset(size_t)\n+    {\n+      __throw_out_of_range(__N(\"bitset::reset\"));\n+      return *this;\n+    }\n+      \n+  template<>\n+    inline bitset<0>&\n+    bitset<0>::\n+    flip(size_t)\n+    {\n+      __throw_out_of_range(__N(\"bitset::flip\"));\n+      return *this;\n+    }\n+      \n+  template<>\n+    inline bool\n+    bitset<0>::\n+    test(size_t) const\n+    {\n+      __throw_out_of_range(__N(\"bitset::test\"));\n+      return false;\n+    }\n   //@}\n \n _GLIBCXX_END_NESTED_NAMESPACE"}, {"sha": "0a1c8fec353d21bc24edb9fcdb5eb933fb80bc47", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/specialization.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fspecialization.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fspecialization.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fspecialization.cc?ref=e7c59a0e02560a05f2ef48922f25c54934752a7c", "patch": "@@ -3,7 +3,7 @@\n \n // 1999-08-23 bkoz\n \n-// Copyright (C) 1999, 2001, 2002, 2003, 2004 Free Software Foundation\n+// Copyright (C) 1999, 2001, 2002, 2003, 2004, 2005 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,7 +41,7 @@ template<typename T>\n \n struct B \n {\n-  B(int i = 0) { }\n+  B(int = 0) { }\n };\n \n "}, {"sha": "197a2518943a720dd11d55ed45a236c32f9c1c4a", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/traps.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Ftraps.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Ftraps.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Ftraps.cc?ref=e7c59a0e02560a05f2ef48922f25c54934752a7c", "patch": "@@ -26,14 +26,14 @@\n \n template<typename T>\n   void \n-  test_traps()\n+  test_traps(T r = T(0))\n   {\n     typedef T value_type;\n     volatile value_type i(5);\n     volatile value_type j(0);\n     \n     if (!std::numeric_limits<value_type>::traps)\n-      value_type r = i/j;\n+      r = i / j;\n   }\n \n // libstdc++/22203"}, {"sha": "9e2a17dea303040ae0442db3ed7f395327a0a914", "filename": "libstdc++-v3/testsuite/21_strings/c_strings/wchar_t/24559.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings%2Fwchar_t%2F24559.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings%2Fwchar_t%2F24559.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings%2Fwchar_t%2F24559.cc?ref=e7c59a0e02560a05f2ef48922f25c54934752a7c", "patch": "@@ -23,10 +23,10 @@\n // { dg-do compile }\n \n // libstdc++/24559\n+void test01(wchar_t* (*) (wchar_t *, const wchar_t*)) { }\n+\n int main()\n {\n-  typedef wchar_t* (*pf)(wchar_t *, const wchar_t*);\n-  pf p1 = std::wcspbrk;\n-\n+  test01(std::wcspbrk);\n   return 0;\n }"}, {"sha": "ba916a8f01e7eb9f5b067fa3502441172cabb0b6", "filename": "libstdc++-v3/testsuite/25_algorithms/heap/heap.cc", "status": "modified", "additions": 65, "deletions": 73, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fheap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fheap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fheap.cc?ref=e7c59a0e02560a05f2ef48922f25c54934752a7c", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,7 +19,6 @@\n // 25.3.6 Heap operations [lib.alg.heap.operations]\n \n #include <algorithm>\n-//#include <cmath>\n #include <testsuite_hooks.h>\n \n bool test __attribute__((unused)) = true;\n@@ -29,24 +28,24 @@ const int B[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n const int C[] = {17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};\n const int N = sizeof(A) / sizeof(int);\n \n-// This functor has the equivalent functionality of std::geater<>,\n+// This functor has the equivalent functionality of std::greater<>,\n // but there is no dependency on <functional> and it also tracks the\n // number of invocations since creation.\n class Gt\n {\n public:\n-    static int count() { return itsCount; }\n-    static void reset() { itsCount = 0; }\n-\n-    bool\n-    operator()(const int& x, const int& y)\n-    {\n-        ++itsCount;\n-        return x > y; \n-    }\n+  static int count() { return itsCount; }\n+  static void reset() { itsCount = 0; }\n+  \n+  bool\n+  operator()(const int& x, const int& y)\n+  {\n+    ++itsCount;\n+    return x > y; \n+  }\n \n private:\n-    static int itsCount;\n+  static int itsCount;\n };\n \n int Gt::itsCount = 0;\n@@ -57,84 +56,77 @@ int Gt::itsCount = 0;\n void\n test01()\n {\n-    // sort array s1 using push_heap/pop_heap\n-    int s1[N];\n-    std::copy(A, A + N, s1);\n-    VERIFY(std::equal(s1, s1 + N, A));\n-\n-    for (int i = 2; i <= N; ++i) {\n-        std::push_heap(s1, s1 + i);\n-    }\n-    for (int i = N; i >= 2; --i) {\n-        std::pop_heap(s1, s1 + i);\n-    }\n-    VERIFY(std::equal(s1, s1 + N, B));\n-\n-    // sort array s2 using make_heap/sort_heap\n-    int s2[N];\n-    std::copy(A, A + N, s2);\n-    VERIFY(std::equal(s2, s2 + N, A));\n-\n-    std::make_heap(s2, s2 + N);\n-    std::sort_heap(s2, s2 + N);\n-    VERIFY(std::equal(s2, s2 + N, B));\n+  // sort array s1 using push_heap/pop_heap\n+  int s1[N];\n+  std::copy(A, A + N, s1);\n+  VERIFY(std::equal(s1, s1 + N, A));\n+  \n+  for (int i = 2; i <= N; ++i)\n+    std::push_heap(s1, s1 + i);\n+  \n+  for (int i = N; i >= 2; --i)\n+    std::pop_heap(s1, s1 + i);\n+  \n+  VERIFY(std::equal(s1, s1 + N, B));\n+\n+  // sort array s2 using make_heap/sort_heap\n+  int s2[N];\n+  std::copy(A, A + N, s2);\n+  VERIFY(std::equal(s2, s2 + N, A));\n+  \n+  std::make_heap(s2, s2 + N);\n+  std::sort_heap(s2, s2 + N);\n+  VERIFY(std::equal(s2, s2 + N, B));\n }\n \n // Perform same tests as above but with the comparison predicate\n // versions, and add complexity constraint checks.\n void\n test02()\n {\n-    Gt gt;\n+  Gt gt;\n //    const int logN = static_cast<int>(std::log(static_cast<double>(N)) + 0.5);\n-    const int logN = 3;\n-\n-    int s1[N];\n-    std::copy(A, A + N, s1);\n-    VERIFY(std::equal(s1, s1 + N, A));\n-\n-    for (int i = 2; i <= N; ++i) {\n-        std::push_heap(s1, s1 + i, gt);\n-#ifndef _GLIBCXX_DEBUG\n-        VERIFY(gt.count() <= logN);\n-#endif\n-        gt.reset();\n+  const int logN = 3;\n+  \n+  int s1[N];\n+  std::copy(A, A + N, s1);\n+  VERIFY(std::equal(s1, s1 + N, A));\n+  \n+  for (int i = 2; i <= N; ++i)\n+    {\n+      std::push_heap(s1, s1 + i, gt);\n+      VERIFY(gt.count() <= logN);\n+      gt.reset();\n     }\n \n-    for (int i = N; i >= 2; --i) {\n-        std::pop_heap(s1, s1 + i, gt);\n-#ifndef _GLIBCXX_DEBUG\n-        VERIFY(gt.count() <= 2 * logN);\n-#endif\n-        gt.reset();\n+  for (int i = N; i >= 2; --i)\n+    {\n+      std::pop_heap(s1, s1 + i, gt);\n+      VERIFY(gt.count() <= 2 * logN);\n+      gt.reset();\n     }\n \n-    VERIFY(std::equal(s1, s1 + N, C));\n-\n-    // sort array s2 using make_heap/sort_heap\n-    int s2[N];\n-    std::copy(A, A + N, s2);\n-    VERIFY(std::equal(s2, s2 + N, A));\n-\n-    std::make_heap(s2, s2 + N, gt);\n-#ifndef _GLIBCXX_DEBUG\n-    VERIFY(gt.count() <= 3 * N);\n-#endif\n-    gt.reset();\n-\n-    std::sort_heap(s2, s2 + N, gt);\n-#ifndef _GLIBCXX_DEBUG\n-    VERIFY(gt.count() <= N * logN);\n-#endif\n-\n-    VERIFY(std::equal(s2, s2 + N, C));\n+  VERIFY(std::equal(s1, s1 + N, C));\n+  \n+  // sort array s2 using make_heap/sort_heap\n+  int s2[N];\n+  std::copy(A, A + N, s2);\n+  VERIFY(std::equal(s2, s2 + N, A));\n+  \n+  std::make_heap(s2, s2 + N, gt);\n+  VERIFY(gt.count() <= 3 * N);\n+  gt.reset();\n+\n+  std::sort_heap(s2, s2 + N, gt);\n+  VERIFY(gt.count() <= N * logN);\n+  \n+  VERIFY(std::equal(s2, s2 + N, C));\n }\n \n int\n main()\n {\n   test01();\n   test02();\n-\n   return 0;\n }"}, {"sha": "06eae990c80a786d0d3370d08cf386b2e449d255", "filename": "libstdc++-v3/testsuite/27_io/ios_base/storage/11584.cc", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F11584.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F11584.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F11584.cc?ref=e7c59a0e02560a05f2ef48922f25c54934752a7c", "patch": "@@ -1,6 +1,6 @@\n // 2004-01-25 jlquinn@gcc.gnu.org\n \n-// Copyright (C) 2004 Free Software Foundation\n+// Copyright (C) 2004, 2005 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -42,21 +42,22 @@ void operator delete[] (void *p) throw() { operator delete(p); }\n int main ()\n {\n   bool test __attribute__((unused)) = true;\n-  const int i = std::ios::xalloc ();\n+  const int i = std::ios::xalloc();\n+  VERIFY( i >= 0 );\n \n   new_fails = 1;\n   \n   // Successive accesses to failure storage clears to zero.\n-  std::cout.iword(100) = 0xdeadbeef;\n-  VERIFY(std::cout.iword(100) == 0);\n+  std::cout.iword(100) = 69;\n+  VERIFY( std::cout.iword(100) == 0 );\n   \n   // Access to pword failure storage shouldn't clear iword pword storage.\n   long& lr = std::cout.iword(100);\n-  lr = 0xdeadbeef;\n+  lr = 69;\n   \n   void* pv = std::cout.pword(100);\n-  VERIFY(pv == 0);\n-  VERIFY(lr == 0xdeadbeef);\n+  VERIFY( pv == 0 );\n+  VERIFY( lr == 69 );\n   \n   return 0;\n }"}, {"sha": "59965c820ab5e798bf41327556a54815dc8d4a7b", "filename": "libstdc++-v3/testsuite/27_io/types/1.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ftypes%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ftypes%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ftypes%2F1.cc?ref=e7c59a0e02560a05f2ef48922f25c54934752a7c", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2002, 2004 Free Software Foundation\n+// Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,8 +25,8 @@\n // Annex D, deprecated.\n void test01()\n {\n-  std::ios_base::streampos spos;\n-  std::ios_base::streamoff soff;\n+  typedef std::ios_base::streampos streampos_type;\n+  typedef std::ios_base::streamoff streamoff_type;\n }\n \n int main(void)"}, {"sha": "6ec4a1771ee6275d33e96477f6261376979c15e5", "filename": "libstdc++-v3/testsuite/ext/array_allocator/2.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F2.cc?ref=e7c59a0e02560a05f2ef48922f25c54934752a7c", "patch": "@@ -1,7 +1,7 @@\n // Expected execution error for PR19495.\n // { dg-do run { xfail powerpc*-*-linux* } }\n \n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -47,7 +47,6 @@ void test01()\n   typedef __gnu_cxx::array_allocator<char_type, array_type> allocator_type;\n   typedef basic_string<char_type, traits_type, allocator_type> string_type;\n \n-  size_t index = array_type::_S_index;\n   allocator_type a(&extern_array);\n   string_type s(a);\n     "}, {"sha": "97604735f2029f1f19eb9bde1a6bf80e131687db", "filename": "libstdc++-v3/testsuite/ext/malloc_allocator/deallocate_global.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fdeallocate_global.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fdeallocate_global.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fdeallocate_global.cc?ref=e7c59a0e02560a05f2ef48922f25c54934752a7c", "patch": "@@ -1,5 +1,5 @@\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -57,7 +57,8 @@ void operator delete(void* p) throw()\n   if (count == 0)\n     printf(\"All memory released \\n\");\n   else\n-    printf(\"%u allocations to be released \\n\", count);\n+    printf(\"%lu allocations to be released \\n\",\n+\t   static_cast<unsigned long>(count));\n   free(p);\n }\n "}, {"sha": "aafffae9d707773021048125ee263676dc3f2511", "filename": "libstdc++-v3/testsuite/ext/malloc_allocator/deallocate_local.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fdeallocate_local.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fdeallocate_local.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fdeallocate_local.cc?ref=e7c59a0e02560a05f2ef48922f25c54934752a7c", "patch": "@@ -1,5 +1,5 @@\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -44,7 +44,8 @@ void operator delete(void* p) throw()\n   if (alloc_cnt == 0)\n     printf(\"All memory released \\n\");\n   else\n-    printf(\"%u allocations to be released \\n\", alloc_cnt);\n+    printf(\"%lu allocations to be released \\n\",\n+\t   static_cast<unsigned long>(alloc_cnt));\n   free(p);\n }\n "}, {"sha": "3beb29d32b4aafedc69adff4f747dd8cccb3aecc", "filename": "libstdc++-v3/testsuite/testsuite_allocator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_allocator.h?ref=e7c59a0e02560a05f2ef48922f25c54934752a7c", "patch": "@@ -184,7 +184,7 @@ namespace __gnu_test\n     check_new(Alloc a = Alloc())\n     {\n       bool test __attribute__((unused)) = true;\n-      typename Alloc::pointer p = a.allocate(10);\n+      a.allocate(10);\n       test &= ( new_called == uses_global_new );\n       return test;\n     }\n@@ -201,7 +201,7 @@ namespace __gnu_test\n     }\n \n   template<typename Alloc>\n-    bool \n+    void \n     check_deallocate_null()\n     {\n       // Let's not core here..."}, {"sha": "38b80630fc232db1172ca68b1b13037e8fe14bde", "filename": "libstdc++-v3/testsuite/testsuite_hooks.h", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h?ref=e7c59a0e02560a05f2ef48922f25c54934752a7c", "patch": "@@ -104,10 +104,9 @@ namespace __gnu_test\n   // bitmask_operators\n   template<typename bitmask_type>\n     void\n-    bitmask_operators()\n+    bitmask_operators(bitmask_type a = bitmask_type(),\n+\t\t      bitmask_type b = bitmask_type())\n     {\n-      bitmask_type a;\n-      bitmask_type b;\n       a | b;\n       a & b;\n       a ^ b;\n@@ -168,13 +167,13 @@ namespace __gnu_test\n   };\n  \n   inline bool\n-  operator==(const NonDefaultConstructible& lhs,\n-\t     const NonDefaultConstructible& rhs)\n+  operator==(const NonDefaultConstructible&,\n+\t     const NonDefaultConstructible&)\n   { return false; }\n \n   inline bool\n-  operator<(const NonDefaultConstructible& lhs,\n-\t    const NonDefaultConstructible& rhs)\n+  operator<(const NonDefaultConstructible&,\n+\t    const NonDefaultConstructible&)\n   { return false; }\n \n "}, {"sha": "4ec6a6d0b3b602b2343d9e327945cd0a48f3af51", "filename": "libstdc++-v3/testsuite/thread/18185.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2F18185.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2F18185.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fthread%2F18185.cc?ref=e7c59a0e02560a05f2ef48922f25c54934752a7c", "patch": "@@ -1,5 +1,5 @@\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,8 +25,8 @@\n #include <string>\n #include <pthread.h>\n \n-static void *\n-foo (void *p)\n+static void*\n+foo (void*)\n {\n   typedef std::char_traits<char> traits_type;\n   typedef __gnu_cxx::new_allocator<char> allocator_type;\n@@ -47,7 +47,7 @@ int\n main ()\n {\n   pthread_t t;\n-  int j = pthread_create (&t, 0, foo, 0);\n-  int i = pthread_join (t, 0);\n+  pthread_create (&t, 0, foo, 0);\n+  pthread_join (t, 0);\n   return 0;\n }"}, {"sha": "2f780c1a994482ddc70ecfec76d8ab8eab5424d9", "filename": "libstdc++-v3/testsuite/tr1/3_function_objects/mem_fn.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Fmem_fn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Fmem_fn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Fmem_fn.cc?ref=e7c59a0e02560a05f2ef48922f25c54934752a7c", "patch": "@@ -39,7 +39,7 @@ struct dumb_ptr\n };\n \n // Test mem_fn with a data member\n-void test01()\n+void test01(int r = 0)\n {\n   using std::tr1::mem_fn;\n \n@@ -69,6 +69,9 @@ void test01()\n   const int& bypc = mem_fn(&X::bar)(ypc);\n   const int& byd = mem_fn(&X::bar)(yd);\n   const int& bydc = mem_fn(&X::bar)(ydc);\n+  \n+  // Avoid unused variable warnings.\n+  r = bx + bxc + bxp + bxpc + bxd + bxdc + by + byc + byp + bypc + byd + bydc;\n }\n \n int main()"}, {"sha": "1c6c8edd670c32e076c7fa4cd920ebaf89a6c4b1", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/cons/aggregate_initialization.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcons%2Faggregate_initialization.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcons%2Faggregate_initialization.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcons%2Faggregate_initialization.cc?ref=e7c59a0e02560a05f2ef48922f25c54934752a7c", "patch": "@@ -2,7 +2,7 @@\n \n // 2004-10-20  Benjamin Kosnik  <bkoz@redhat.com>\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,6 +31,8 @@ test01()\n \n   array_type a = { 0, 1, 2, 3, 4 };\n   array_type b = { 0, 1, 2, 3 };\n+\n+  a = b;\n }\n \n int main()"}, {"sha": "75b3e97720e5f6581ba03768f0b2096cc1cb9184", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/requirements/zero_sized_arrays.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Fzero_sized_arrays.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Fzero_sized_arrays.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Fzero_sized_arrays.cc?ref=e7c59a0e02560a05f2ef48922f25c54934752a7c", "patch": "@@ -1,6 +1,6 @@\n // 2004-10-20  Benjamin Kosnik  <bkoz@redhat.com>\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,6 +38,7 @@ test01()\n \n   // 3\n   // begin() == end()\n+  VERIFY( a.begin() == a.end() );\n   VERIFY( b.begin() == b.end() );\n \n   // 4: ?"}, {"sha": "a83fce3cd61bc1b9228efac38712bf69d16ac94a", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/insert/multiset_range.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finsert%2Fmultiset_range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finsert%2Fmultiset_range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finsert%2Fmultiset_range.cc?ref=e7c59a0e02560a05f2ef48922f25c54934752a7c", "patch": "@@ -27,7 +27,7 @@\n #include <iterator>\n #include <algorithm>\n #include <tr1/unordered_set>\n-#include \"testsuite_hooks.h\"\n+#include <testsuite_hooks.h>\n \n bool test __attribute__((unused)) = true;\n \n@@ -42,7 +42,7 @@ void test01()\n \t\t\t     \"magenta\", \"yellow\", \"orange\", \"pink\", \"gray\" };\n \n   s.insert(A+0, A+N);\n-  VERIFY(s.size() == N);\n+  VERIFY(s.size() == static_cast<unsigned int>(N));\n   VERIFY(std::distance(s.begin(), s.end()) == N);\n \n   for (int i = 0; i < N; ++i) {\n@@ -62,7 +62,7 @@ void test02()\n   const int A[N] = { 3, 7, 4, 8, 2, 4, 6, 7 };\n \n   s.insert(A+0, A+N);\n-  VERIFY(s.size() == N);\n+  VERIFY(s.size() == static_cast<unsigned int>(N));\n   VERIFY(std::distance(s.begin(), s.end()) == N);\n \n   VERIFY(std::count(s.begin(), s.end(), 2) == 1);"}, {"sha": "bfa4f73b1b20f31b7f4adbc51b2b7c298dc32bed", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/insert/set_range.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finsert%2Fset_range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finsert%2Fset_range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finsert%2Fset_range.cc?ref=e7c59a0e02560a05f2ef48922f25c54934752a7c", "patch": "@@ -27,7 +27,7 @@\n #include <iterator>\n #include <algorithm>\n #include <tr1/unordered_set>\n-#include \"testsuite_hooks.h\"\n+#include <testsuite_hooks.h>\n \n bool test __attribute__((unused)) = true;\n \n@@ -42,7 +42,7 @@ void test01()\n \t\t\t     \"magenta\", \"yellow\", \"orange\", \"pink\", \"gray\" };\n \n   s.insert(A+0, A+N);\n-  VERIFY(s.size() == N);\n+  VERIFY(s.size() == static_cast<unsigned int>(N));\n   VERIFY(std::distance(s.begin(), s.end()) == N);\n \n   for (int i = 0; i < N; ++i) {"}, {"sha": "382d69f715c43deaf2c9eb9e64e1f1e6849ad8a6", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/instantiate/hash.cc", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finstantiate%2Fhash.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finstantiate%2Fhash.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finstantiate%2Fhash.cc?ref=e7c59a0e02560a05f2ef48922f25c54934752a7c", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n \n-// 2005-2-17  Matt Austern  <austern@apple.com>\n+// 2005-02-17  Matt Austern  <austern@apple.com>\n //\n // Copyright (C) 2005 Free Software Foundation, Inc.\n //\n@@ -25,30 +25,27 @@\n #include <string>\n #include <tr1/functional>\n \n-int main()\n-{\n-  using namespace std::tr1;\n+using namespace std::tr1;\n \n-  // Verify that we can instantiate hash for every required type.\n-\n-  hash<bool> hb;\n-  hash<char> hc;\n-  hash<signed char> hsc;\n-  hash<unsigned char> huc;\n-  hash<short> hs;\n-  hash<int> hi;\n-  hash<long> hl;\n-  hash<unsigned short> hus;\n-  hash<unsigned int> hui;\n-  hash<unsigned long> hul;\n-  hash<float> hf;\n-  hash<double> hd;\n-  hash<long double> hld;\n-  hash<void*> hp;\n-  hash<std::string> hstr;\n+// Verify that we can instantiate hash for every required type.\n+template class hash<bool>;\n+template class hash<char>;\n+template class hash<signed char>;\n+template class hash<unsigned char>;\n+template class hash<short>;\n+template class hash<int>;\n+template class hash<long>;\n+template class hash<unsigned short>;\n+template class hash<unsigned int>;\n+template class hash<unsigned long>;\n+template class hash<float>;\n+template class hash<double>;\n+template class hash<long double>;\n+template class hash<void*>;\n+template class hash<std::string>;\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n-  hash<wchar_t> hw;\n-  hash<std::wstring> hwstr;\n+template class hash<wchar_t>;\n+template class hash<std::wstring>;\n #endif\n-}\n+"}, {"sha": "cb1cf2fc98e242ee51bd7aced2a16531d84996eb", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/instantiate/map.cc", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finstantiate%2Fmap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finstantiate%2Fmap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finstantiate%2Fmap.cc?ref=e7c59a0e02560a05f2ef48922f25c54934752a7c", "patch": "@@ -1,8 +1,8 @@\n // { dg-do compile }\n \n-// 2005-2-17  Matt Austern  <austern@apple.com>\n+// 2005-02-17  Matt Austern  <austern@apple.com>\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,13 +25,10 @@\n #include <string>\n #include <tr1/unordered_map>\n \n-int main()\n-{\n-  using namespace std;\n-  using namespace std::tr1;\n+using namespace std;\n+using namespace std::tr1;\n \n-  unordered_map<string, float> m1;\n-  unordered_map<string, float,\n-                hash<string>, equal_to<string>, \n-                allocator<pair<const string, float> >, true> s2;\n-}\n+template class unordered_map<string, float>;\n+template class unordered_map<string, float,\n+\t\t\t     hash<string>, equal_to<string>, \n+\t\t\t     allocator<pair<const string, float> >, true>;"}, {"sha": "73282612951f4afcb9740f09e9d2e7bc1f51701d", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/instantiate/multimap.cc", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finstantiate%2Fmultimap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finstantiate%2Fmultimap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finstantiate%2Fmultimap.cc?ref=e7c59a0e02560a05f2ef48922f25c54934752a7c", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n \n-// 2005-2-17  Matt Austern  <austern@apple.com>\n+// 2005-02-17  Matt Austern  <austern@apple.com>\n //\n // Copyright (C) 2005 Free Software Foundation, Inc.\n //\n@@ -25,13 +25,10 @@\n #include <string>\n #include <tr1/unordered_map>\n \n-int main()\n-{\n-  using namespace std;\n-  using namespace std::tr1;\n+using namespace std;\n+using namespace std::tr1;\n \n-  unordered_multimap<string, float> m1;\n-  unordered_multimap<string, float,\n-                     hash<string>, equal_to<string>, \n-                     allocator<pair<const string, float> >, true> s2;\n-}\n+template class unordered_multimap<string, float>;\n+template class unordered_multimap<string, float,\n+\t\t\t\t  hash<string>, equal_to<string>, \n+\t\t\t\t  allocator<pair<const string, float> >, true>;"}, {"sha": "e022e8bd8561c9dafc28bcdde28b8a503a999073", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/instantiate/multiset.cc", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finstantiate%2Fmultiset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finstantiate%2Fmultiset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finstantiate%2Fmultiset.cc?ref=e7c59a0e02560a05f2ef48922f25c54934752a7c", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n \n-// 2005-2-17  Matt Austern  <austern@apple.com>\n+// 2005-02-17  Matt Austern  <austern@apple.com>\n //\n // Copyright (C) 2005 Free Software Foundation, Inc.\n //\n@@ -24,11 +24,9 @@\n \n #include <tr1/unordered_set>\n \n-int main()\n-{\n-  using namespace std;\n-  using namespace std::tr1;\n+using namespace std;\n+using namespace std::tr1;\n \n-  unordered_multiset<int> s1;\n-  unordered_multiset<int, hash<int>, equal_to<int>, allocator<int>, true> s2;\n-}\n+template class unordered_multiset<int>;\n+template class unordered_multiset<int, hash<int>, equal_to<int>,\n+\t\t\t\t  allocator<int>, true>;"}, {"sha": "9bb892eccd6480295680b81d9a59a47e71063a98", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/instantiate/set.cc", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finstantiate%2Fset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c59a0e02560a05f2ef48922f25c54934752a7c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finstantiate%2Fset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Finstantiate%2Fset.cc?ref=e7c59a0e02560a05f2ef48922f25c54934752a7c", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n \n-// 2005-2-17  Matt Austern  <austern@apple.com>\n+// 2005-02-17  Matt Austern  <austern@apple.com>\n //\n // Copyright (C) 2005 Free Software Foundation, Inc.\n //\n@@ -24,11 +24,9 @@\n \n #include <tr1/unordered_set>\n \n-int main()\n-{\n-  using namespace std;\n-  using namespace std::tr1;\n+using namespace std;\n+using namespace std::tr1;\n \n-  unordered_set<int> s1;\n-  unordered_set<int, hash<int>, equal_to<int>, allocator<int>, true> s2;\n-}\n+template class unordered_set<int>;\n+template class unordered_set<int, hash<int>, equal_to<int>,\n+\t\t\t     allocator<int>, true>;"}]}