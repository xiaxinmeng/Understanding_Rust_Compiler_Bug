{"sha": "2bf492a1a4526f143064e41001f34fc1874feea7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJmNDkyYTFhNDUyNmYxNDMwNjRlNDEwMDFmMzRmYzE4NzRmZWVhNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-10-20T17:29:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-10-20T17:29:02Z"}, "message": "re PR c++/63601 (Segfault on usage of 'this' in unevaluated context inside lambda)\n\n\tPR c++/63601\n\t* lambda.c (current_nonlambda_function): New.\n\t* semantics.c (finish_this_expr): Use it.\n\t* cp-tree.h: Declare it.\n\nFrom-SVN: r216488", "tree": {"sha": "d36f2c6f7a0499a4eebd7a3cca9991eda2ffdf69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d36f2c6f7a0499a4eebd7a3cca9991eda2ffdf69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bf492a1a4526f143064e41001f34fc1874feea7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bf492a1a4526f143064e41001f34fc1874feea7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bf492a1a4526f143064e41001f34fc1874feea7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bf492a1a4526f143064e41001f34fc1874feea7/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "64dbfdec39c675bd644748af3cd712418bd11135", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64dbfdec39c675bd644748af3cd712418bd11135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64dbfdec39c675bd644748af3cd712418bd11135"}], "stats": {"total": 53, "additions": 35, "deletions": 18}, "files": [{"sha": "e61ae2bfa8359861e70fcb9fb8240b6a5b69d3fc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf492a1a4526f143064e41001f34fc1874feea7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf492a1a4526f143064e41001f34fc1874feea7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2bf492a1a4526f143064e41001f34fc1874feea7", "patch": "@@ -1,3 +1,10 @@\n+2014-10-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/63601\n+\t* lambda.c (current_nonlambda_function): New.\n+\t* semantics.c (finish_this_expr): Use it.\n+\t* cp-tree.h: Declare it.\n+\n 2014-10-17  Alan Modra  <amodra@gmail.com>\n \n \tPR middle-end/61848"}, {"sha": "0923d9f0f7cfc2ebc41efb8c92b9e9b929401729", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf492a1a4526f143064e41001f34fc1874feea7/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf492a1a4526f143064e41001f34fc1874feea7/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2bf492a1a4526f143064e41001f34fc1874feea7", "patch": "@@ -5961,6 +5961,7 @@ extern bool is_normal_capture_proxy             (tree);\n extern void register_capture_members\t\t(tree);\n extern tree lambda_expr_this_capture            (tree, bool);\n extern tree maybe_resolve_dummy\t\t\t(tree, bool);\n+extern tree current_nonlambda_function\t\t(void);\n extern tree nonlambda_method_basetype\t\t(void);\n extern void maybe_add_lambda_conv_op            (tree);\n extern bool is_lambda_ignored_entity            (tree);"}, {"sha": "d4030e332e7e0c179046d934b65b7afd0998c2e7", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf492a1a4526f143064e41001f34fc1874feea7/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf492a1a4526f143064e41001f34fc1874feea7/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=2bf492a1a4526f143064e41001f34fc1874feea7", "patch": "@@ -777,6 +777,17 @@ maybe_resolve_dummy (tree object, bool add_capture_p)\n   return object;\n }\n \n+/* Returns the innermost non-lambda function.  */\n+\n+tree\n+current_nonlambda_function (void)\n+{\n+  tree fn = current_function_decl;\n+  while (fn && LAMBDA_FUNCTION_P (fn))\n+    fn = decl_function_context (fn);\n+  return fn;\n+}\n+\n /* Returns the method basetype of the innermost non-lambda function, or\n    NULL_TREE if none.  */\n "}, {"sha": "26e66f512cf4bb6e01e606f5bb8660326ebbb081", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf492a1a4526f143064e41001f34fc1874feea7/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf492a1a4526f143064e41001f34fc1874feea7/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=2bf492a1a4526f143064e41001f34fc1874feea7", "patch": "@@ -2438,7 +2438,7 @@ finish_increment_expr (tree expr, enum tree_code code)\n tree\n finish_this_expr (void)\n {\n-  tree result;\n+  tree result = NULL_TREE;\n \n   if (current_class_ptr)\n     {\n@@ -2450,25 +2450,19 @@ finish_this_expr (void)\n       else\n         result = current_class_ptr;\n     }\n-  else if (current_function_decl\n-\t   && DECL_STATIC_FUNCTION_P (current_function_decl))\n-    {\n-      error (\"%<this%> is unavailable for static member functions\");\n-      result = error_mark_node;\n-    }\n-  else\n-    {\n-      if (current_function_decl)\n-\terror (\"invalid use of %<this%> in non-member function\");\n-      else\n-\terror (\"invalid use of %<this%> at top level\");\n-      result = error_mark_node;\n-    }\n \n-  /* The keyword 'this' is a prvalue expression.  */\n-  result = rvalue (result);\n+  if (result)\n+    /* The keyword 'this' is a prvalue expression.  */\n+    return rvalue (result);\n \n-  return result;\n+  tree fn = current_nonlambda_function ();\n+  if (fn && DECL_STATIC_FUNCTION_P (fn))\n+    error (\"%<this%> is unavailable for static member functions\");\n+  else if (fn)\n+    error (\"invalid use of %<this%> in non-member function\");\n+  else\n+    error (\"invalid use of %<this%> at top level\");\n+  return error_mark_node;\n }\n \n /* Finish a pseudo-destructor expression.  If SCOPE is NULL, the"}, {"sha": "0d273202bfb0319816443ffafbd5fb8e1dae6ac9", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-this20.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf492a1a4526f143064e41001f34fc1874feea7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-this20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf492a1a4526f143064e41001f34fc1874feea7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-this20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-this20.C?ref=2bf492a1a4526f143064e41001f34fc1874feea7", "patch": "@@ -0,0 +1,4 @@\n+// PR c++/63601\n+// { dg-do compile { target c++11 } }\n+\n+auto f = []{ sizeof(this); };\t// { dg-error \"this\" }"}]}