{"sha": "6c4aa5f6bd8aacf51ddceb78239a7a2da0a1b959", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM0YWE1ZjZiZDhhYWNmNTFkZGNlYjc4MjM5YTdhMmRhMGExYjk1OQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-10-02T14:08:53Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-10-02T14:08:53Z"}, "message": "builtins.c (unterminated_array): Add new arguments.\n\n\t* builtins.c (unterminated_array): Add new arguments.\n\tIf argument is not terminated, bubble up size and exact\n\tstate to callers.\n\t(expand_builtin_strnlen): Detect, avoid expanding\n\tand diagnose unterminated arrays.\n\t(c_strlen): Fill in offset of start of unterminated strings.\n\t* builtins.h (unterminated_array): Update prototype.\n\n\t* gcc.dg/warn-strnlen-no-nul.c: New.\n\nCo-Authored-By: Jeff Law <law@redhat.com>\n\nFrom-SVN: r264787", "tree": {"sha": "0ca3592e4948a9bcd6eeb25e34636deb6d1732e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ca3592e4948a9bcd6eeb25e34636deb6d1732e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c4aa5f6bd8aacf51ddceb78239a7a2da0a1b959", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c4aa5f6bd8aacf51ddceb78239a7a2da0a1b959", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c4aa5f6bd8aacf51ddceb78239a7a2da0a1b959", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c4aa5f6bd8aacf51ddceb78239a7a2da0a1b959/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "469218a3f9b8f72b38d82dd978ec231ab3de14ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/469218a3f9b8f72b38d82dd978ec231ab3de14ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/469218a3f9b8f72b38d82dd978ec231ab3de14ef"}], "stats": {"total": 470, "additions": 464, "deletions": 6}, "files": [{"sha": "40f87aaeae59c71cec80be2b712b282d6270ef05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4aa5f6bd8aacf51ddceb78239a7a2da0a1b959/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4aa5f6bd8aacf51ddceb78239a7a2da0a1b959/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c4aa5f6bd8aacf51ddceb78239a7a2da0a1b959", "patch": "@@ -1,3 +1,14 @@\n+2018-10-02  Martin Sebor  <msebor@redhat.com>\n+\t    Jeff Law  <law@redhat.com>\n+\n+\t* builtins.c (unterminated_array): Add new arguments.\n+\tIf argument is not terminated, bubble up size and exact\n+\tstate to callers.\n+\t(expand_builtin_strnlen): Detect, avoid expanding\n+\tand diagnose unterminated arrays.\n+\t(c_strlen): Fill in offset of start of unterminated strings.\n+\t* builtins.h (unterminated_array): Update prototype.\n+\n 2018-10-02  Richard Biener  <rguenther@suse.de>\n \n \t* config/i386/sse.md (reduc_plus_scal_v4df): Avoid the use"}, {"sha": "2cb1996dad338d1da565e2dccb265ead22c948ae", "filename": "gcc/builtins.c", "status": "modified", "additions": 92, "deletions": 5, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4aa5f6bd8aacf51ddceb78239a7a2da0a1b959/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4aa5f6bd8aacf51ddceb78239a7a2da0a1b959/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=6c4aa5f6bd8aacf51ddceb78239a7a2da0a1b959", "patch": "@@ -565,15 +565,50 @@ warn_string_no_nul (location_t loc, const char *fn, tree arg, tree decl)\n \n /* If EXP refers to an unterminated constant character array return\n    the declaration of the object of which the array is a member or\n-   element.  Otherwise return null.  */\n+   element and if SIZE is not null, set *SIZE to the size of\n+   the unterminated array and set *EXACT if the size is exact or\n+   clear it otherwise.  Otherwise return null.  */\n \n tree\n-unterminated_array (tree exp)\n+unterminated_array (tree exp, tree *size /* = NULL */, bool *exact /* = NULL */)\n {\n+  /* C_STRLEN will return NULL and set DECL in the info\n+     structure if EXP references a unterminated array.  */\n   c_strlen_data data;\n   memset (&data, 0, sizeof (c_strlen_data));\n-  c_strlen (exp, 1, &data);\n-  return data.decl;\n+  tree len = c_strlen (exp, 1, &data);\n+  if (len == NULL_TREE && data.len && data.decl)\n+     {\n+       if (size)\n+\t{\n+\t  len = data.len;\n+\t  if (data.off)\n+\t    {\n+\t      /* Constant offsets are already accounted for in data.len, but\n+\t\t not in a SSA_NAME + CST expression.  */\n+\t      if (TREE_CODE (data.off) == INTEGER_CST)\n+\t\t*exact = true;\n+\t      else if (TREE_CODE (data.off) == PLUS_EXPR\n+\t\t       && TREE_CODE (TREE_OPERAND (data.off, 1)) == INTEGER_CST)\n+\t\t{\n+\t\t  /* Subtract the offset from the size of the array.  */\n+\t\t  *exact = false;\n+\t\t  tree temp = TREE_OPERAND (data.off, 1);\n+\t\t  temp = fold_convert (ssizetype, temp);\n+\t\t  len = fold_build2 (MINUS_EXPR, ssizetype, len, temp);\n+\t\t}\n+\t      else\n+\t\t*exact = false;\n+\t    }\n+\t  else\n+\t    *exact = true;\n+\n+\t  *size = len;\n+\t}\n+       return data.decl;\n+     }\n+\n+  return NULL_TREE;\n }\n \n /* Compute the length of a null-terminated character string or wide\n@@ -685,6 +720,7 @@ c_strlen (tree src, int only_value, c_strlen_data *data, unsigned eltsize)\n       else if (len >= maxelts)\n \t{\n \t  data->decl = decl;\n+\t  data->off = byteoff;\n \t  data->len = ssize_int (len);\n \t  return NULL_TREE;\n \t}\n@@ -755,6 +791,7 @@ c_strlen (tree src, int only_value, c_strlen_data *data, unsigned eltsize)\n   if (len >= maxelts - eltoff)\n     {\n       data->decl = decl;\n+      data->off = byteoff;\n       data->len = ssize_int (len);\n       return NULL_TREE;\n     }\n@@ -3037,9 +3074,11 @@ expand_builtin_strnlen (tree exp, rtx target, machine_mode target_mode)\n   tree maxobjsize = max_object_size ();\n   tree func = get_callee_fndecl (exp);\n \n-  tree len = c_strlen (src, 0);\n   /* FIXME: Change c_strlen() to return sizetype instead of ssizetype\n      so these conversions aren't necessary.  */\n+  c_strlen_data data;\n+  memset (&data, 0, sizeof (c_strlen_data));\n+  tree len = c_strlen (src, 0, &data, 1);\n   if (len)\n     len = fold_convert_loc (loc, TREE_TYPE (bound), len);\n \n@@ -3053,7 +3092,43 @@ expand_builtin_strnlen (tree exp, rtx target, machine_mode target_mode)\n \t\t\t exp, func, bound, maxobjsize))\n \t  TREE_NO_WARNING (exp) = true;\n \n+      bool exact = true;\n       if (!len || TREE_CODE (len) != INTEGER_CST)\n+\t{\n+\t  /* Clear EXACT if LEN may be less than SRC suggests,\n+\t     such as in\n+\t       strnlen (&a[i], sizeof a)\n+\t     where the value of i is unknown.  Unless i's value is\n+\t     zero, the call is unsafe because the bound is greater. */\n+\t  data.decl = unterminated_array (src, &len, &exact);\n+\t  if (!data.decl)\n+\t    return NULL_RTX;\n+\t}\n+\n+      if (data.decl\n+\t  && !TREE_NO_WARNING (exp)\n+\t  && ((tree_int_cst_lt (len, bound))\n+\t      || !exact))\n+\t{\n+\t  location_t warnloc\n+\t    = expansion_point_location_if_in_system_header (loc);\n+\n+\t  if (warning_at (warnloc, OPT_Wstringop_overflow_,\n+\t\t\t  exact\n+\t\t\t  ? G_(\"%K%qD specified bound %E exceeds the size %E \"\n+\t\t\t       \"of unterminated array\")\n+\t\t\t  : G_(\"%K%qD specified bound %E may exceed the size \"\n+\t\t\t       \"of at most %E of unterminated array\"),\n+\t\t\t  exp, func, bound, len))\n+\t    {\n+\t      inform (DECL_SOURCE_LOCATION (data.decl),\n+\t\t      \"referenced argument declared here\");\n+\t      TREE_NO_WARNING (exp) = true;\n+\t      return NULL_RTX;\n+\t    }\n+\t}\n+\n+      if (!len)\n \treturn NULL_RTX;\n \n       len = fold_build2_loc (loc, MIN_EXPR, size_type_node, len, bound);\n@@ -3079,6 +3154,18 @@ expand_builtin_strnlen (tree exp, rtx target, machine_mode target_mode)\n   if (!len || TREE_CODE (len) != INTEGER_CST)\n     return NULL_RTX;\n \n+  if (!TREE_NO_WARNING (exp)\n+      && wi::ltu_p (wi::to_wide (len), min)\n+      && warning_at (loc, OPT_Wstringop_overflow_,\n+\t\t     \"%K%qD specified bound [%wu, %wu] \"\n+\t\t     \"exceeds the size %E of unterminated array\",\n+\t\t     exp, func, min.to_uhwi (), max.to_uhwi (), len))\n+    {\n+      inform (DECL_SOURCE_LOCATION (data.decl),\n+\t      \"referenced argument declared here\");\n+      TREE_NO_WARNING (exp) = true;\n+    }\n+\n   if (wi::gtu_p (min, wi::to_wide (len)))\n     return expand_expr (len, target, target_mode, EXPAND_NORMAL);\n "}, {"sha": "cf4f9b1b26439473278a3cf89a2be68c97e11e41", "filename": "gcc/builtins.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4aa5f6bd8aacf51ddceb78239a7a2da0a1b959/gcc%2Fbuiltins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4aa5f6bd8aacf51ddceb78239a7a2da0a1b959/gcc%2Fbuiltins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.h?ref=6c4aa5f6bd8aacf51ddceb78239a7a2da0a1b959", "patch": "@@ -111,7 +111,7 @@ extern internal_fn associated_internal_fn (tree);\n extern internal_fn replacement_internal_fn (gcall *);\n \n extern void warn_string_no_nul (location_t, const char *, tree, tree);\n-extern tree unterminated_array (tree);\n+extern tree unterminated_array (tree, tree * = NULL, bool * = NULL);\n extern tree max_object_size ();\n \n #endif /* GCC_BUILTINS_H */"}, {"sha": "3a906bff938f8908ef794172902b00129e7b692a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4aa5f6bd8aacf51ddceb78239a7a2da0a1b959/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4aa5f6bd8aacf51ddceb78239a7a2da0a1b959/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6c4aa5f6bd8aacf51ddceb78239a7a2da0a1b959", "patch": "@@ -1,3 +1,7 @@\n+2018-10-01  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/warn-strnlen-no-nul.c: New.\n+\n 2018-10-01  Carl Love  <cel@us.ibm.com>\n \n \tPR 69431"}, {"sha": "09a527ea337365d49e5f30215c39af228d1f167f", "filename": "gcc/testsuite/gcc.dg/warn-strnlen-no-nul.c", "status": "added", "additions": 356, "deletions": 0, "changes": 356, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c4aa5f6bd8aacf51ddceb78239a7a2da0a1b959/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-strnlen-no-nul.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c4aa5f6bd8aacf51ddceb78239a7a2da0a1b959/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-strnlen-no-nul.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-strnlen-no-nul.c?ref=6c4aa5f6bd8aacf51ddceb78239a7a2da0a1b959", "patch": "@@ -0,0 +1,356 @@\n+/* PR tree-optimization/86552 - missing warning for reading past the end\n+   of non-string arrays\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -ftrack-macro-expansion=0\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+extern size_t strnlen (const char*, size_t);\n+\n+const char a[5] = \"12345\";   /* { dg-message \"declared here\" } */\n+enum { asz = sizeof a };\n+\n+int v0 = 0;\n+int v1 = 1;\n+\n+void sink (int, ...);\n+\n+#define CONCAT(a, b)   a ## b\n+#define CAT(a, b)      CONCAT(a, b)\n+\n+#define T(str, n)\t\t\t\t\t\\\n+  __attribute__ ((noipa))\t\t\t\t\\\n+  void CAT (test_, __LINE__) (void) {\t\t\t\\\n+    int i0 = 0, i1 = i0 + 1, i2 = i1 + 1, i3 = i2 + 1;\t\\\n+    sink (strnlen (str, n), i0, i1, i2, i3);\t\t\\\n+  } typedef void dummy_type\n+\n+T (a, asz);\n+T (a, asz - 1);\n+T (a, asz - 2);\n+T (a, asz - 5);\n+T (&a[0], asz);\n+T (&a[0] + 1, asz);            /* { dg-warning \"specified bound 5 exceeds the size 4 of unterminated array\" } */\n+T (&a[1], asz);                /* { dg-warning \"specified bound 5 exceeds the size 4 of unterminated array\" } */\n+T (&a[1], asz - 1);\n+T (&a[v0], asz);               /* { dg-warning \"specified bound 5 may exceed the size of at most 5 of unterminated array\" } */\n+T (&a[v0] + 1, asz);           /* { dg-warning \"specified bound 5 may exceed the size of at most 5 of unterminated array\" } */\n+\n+T (a, asz + 1);                /* { dg-warning \"specified bound 6 exceeds the size 5 \" } */\n+T (&a[0], asz + 1);            /* { dg-warning \"unterminated\" } */\n+T (&a[0] + 1, asz - 1);\n+T (&a[0] + 1, asz + 1);        /* { dg-warning \"unterminated\" } */\n+T (&a[1], asz + 1);            /* { dg-warning \"unterminated\" } */\n+T (&a[v0], asz + 1);           /* { dg-warning \"unterminated\" } */\n+T (&a[v0] + 1, asz + 1);       /* { dg-warning \"unterminated\" } */\n+\n+\n+const char b[][5] = { /* { dg-message \"declared here\" } */\n+  \"12\", \"123\", \"1234\", \"54321\"\n+};\n+enum { bsz = sizeof b[0] };\n+\n+T (b[0], bsz);\n+T (b[1], bsz);\n+T (b[2], bsz);\n+T (b[3], bsz);\n+\n+T (b[0], bsz - 1);\n+T (b[1], bsz - 1);\n+T (b[2], bsz - 1);\n+T (b[3], bsz - 1);\n+\n+T (b[0], bsz + 1);\n+T (b[1], bsz + 1);\n+T (b[2], bsz + 1);\n+T (b[3], bsz + 1);            /* { dg-warning \"unterminated\" } */\n+\n+T (b[i0], bsz);\n+T (b[i1], bsz);\n+T (b[i2], bsz);\n+T (b[i3], bsz);\n+\n+T (b[i0], bsz + 1);\n+T (b[i1], bsz + 1);\n+T (b[i2], bsz + 1);\n+T (b[i3], bsz + 1);           /* { dg-warning \"unterminated\" } */\n+\n+T (b[v0], bsz);\n+T (b[v0], bsz + 1);\n+\n+T (&b[i2][i1], bsz);\n+T (&b[i2][i1] + i1, bsz);\n+T (&b[i2][v0], bsz);\n+T (&b[i2][i1] + v0, bsz);\n+\n+T (&b[i2][i1], bsz + 1);\n+T (&b[i2][i1] + i1, bsz + 1);\n+T (&b[i2][v0], bsz + 1);\n+T (&b[i2][i1] + v0, bsz + 1);\n+\n+T (&b[2][1], bsz);\n+T (&b[2][1] + i1, bsz);\n+T (&b[2][i0], bsz);\n+T (&b[2][1] + i0, bsz);\n+T (&b[2][1] + v0, bsz);\n+T (&b[2][v0], bsz);\n+\n+T (&b[2][1], bsz + 1);\n+T (&b[2][1] + i1, bsz + 1);\n+T (&b[2][i0], bsz + 1);\n+T (&b[2][1] + i0, bsz + 1);\n+T (&b[2][1] + v0, bsz + 1);\n+T (&b[2][v0], bsz + 1);\n+\n+T (&b[3][1], bsz);                /* { dg-warning \"unterminated\" } */\n+T (&b[3][1], bsz - 1);\n+T (&b[3][1] + 1, bsz);            /* { dg-warning \"unterminated\" } */\n+T (&b[3][1] + 1, bsz - 1);        /* { dg-warning \"unterminated\" } */\n+T (&b[3][1] + 1, bsz - 2);\n+T (&b[3][1] + i1, bsz);           /* { dg-warning \"unterminated\" } */\n+T (&b[3][1] + i1, bsz - i1);      /* { dg-warning \"unterminated\" } */\n+T (&b[3][1] + i1, bsz - i2);\n+T (&b[3][v0], bsz);\n+T (&b[3][1] + v0, bsz);           /* { dg-warning \"specified bound 5 may exceed the size of at most 4 of unterminated array\" } */\n+T (&b[3][v0] + v1, bsz);          /* { dg-warning \"specified bound 5 may exceed the size of at most 4 of unterminated array\" \"pr?????\" { xfail *-*-* } } */\n+\n+T (&b[3][1], bsz + 1);            /* { dg-warning \"unterminated\" } */\n+T (&b[3][1] + 1, bsz + 1);        /* { dg-warning \"unterminated\" } */\n+T (&b[3][1] + i1, bsz + 1);       /* { dg-warning \"unterminated\" } */\n+T (&b[3][v0], bsz + 1);           /* { dg-warning \"unterminated\" \"pr86936\" { xfail *-*-* } } */\n+T (&b[3][1] + v0, bsz + 1);       /* { dg-warning \"unterminated\" } */\n+T (&b[3][v0] + v1, bsz + 1);      /* { dg-warning \"unterminated\" \"pr86936\" { xfail *-*-* } } */\n+\n+T (&b[i3][i1], bsz);              /* { dg-warning \"unterminated\" } */\n+T (&b[i3][i1] + 1, bsz);          /* { dg-warning \"unterminated\" } */\n+T (&b[i3][i1] + i1, bsz);         /* { dg-warning \"specified bound 5 exceeds the size 3 of unterminated array\" } */\n+T (&b[i3][v0], bsz);\n+T (&b[i3][i1] + v0, bsz);         /* { dg-warning \"specified bound 5 may exceed the size of at most 4 of unterminated array\" } */\n+T (&b[i3][v0] + v1, bsz);\n+\n+T (&b[i3][i1], bsz + 1);          /* { dg-warning \"unterminated\" } */\n+T (&b[i3][i1] + 1, bsz + 1);      /* { dg-warning \"unterminated\" } */\n+T (&b[i3][i1] + i1, bsz + 1);     /* { dg-warning \"unterminated\" } */\n+T (&b[i3][v0], bsz + 1);          /* { dg-warning \"unterminated\" \"pr86919\" { xfail *-*-* } } */\n+T (&b[i3][i1] + v0, bsz + 1);     /* { dg-warning \"unterminated\" } */\n+T (&b[i3][v0] + v1, bsz + 1);     /* { dg-warning \"unterminated\" \"pr86919\" { xfail *-*-* } } */\n+\n+T (v0 ? \"\" : b[0], bsz);\n+T (v0 ? \"\" : b[1], bsz);\n+T (v0 ? \"\" : b[2], bsz);\n+T (v0 ? \"\" : b[3], bsz);\n+T (v0 ? b[0] : \"\", bsz);\n+T (v0 ? b[1] : \"\", bsz);\n+T (v0 ? b[2] : \"\", bsz);\n+T (v0 ? b[3] : \"\", bsz);\n+\n+T (v0 ? \"\" : b[0], bsz + 1);\n+T (v0 ? \"\" : b[1], bsz + 1);\n+T (v0 ? \"\" : b[2], bsz + 1);\n+T (v0 ? \"\" : b[3], bsz + 1);      /* { dg-warning \"unterminated\" \"pr86937\" { xfail *-*-* } } */\n+T (v0 ? b[0] : \"\", bsz + 1);\n+T (v0 ? b[1] : \"\", bsz + 1);\n+T (v0 ? b[2] : \"\", bsz + 1);\n+T (v0 ? b[3] : \"\", bsz + 1);      /* { dg-warning \"unterminated\" \"pr86937\" { xfail *-*-* } } */\n+\n+T (v0 ? \"\" : b[i0], bsz);\n+T (v0 ? \"\" : b[i1], bsz);\n+T (v0 ? \"\" : b[i2], bsz);\n+T (v0 ? \"\" : b[i3], bsz);\n+T (v0 ? b[i0] : \"\", bsz);\n+T (v0 ? b[i1] : \"\", bsz);\n+T (v0 ? b[i2] : \"\", bsz);\n+T (v0 ? b[i3] : \"\", bsz);\n+\n+T (v0 ? \"\" : b[i0], bsz + 1);\n+T (v0 ? \"\" : b[i1], bsz + 1);\n+T (v0 ? \"\" : b[i2], bsz + 1);\n+T (v0 ? \"\" : b[i3], bsz + 1);     /* { dg-warning \"unterminated\" \"pr86937\" { xfail *-*-* } } */\n+T (v0 ? b[i0] : \"\", bsz + 1);\n+T (v0 ? b[i1] : \"\", bsz + 1);\n+T (v0 ? b[i2] : \"\", bsz + 1);\n+T (v0 ? b[i3] : \"\", bsz + 1);     /* { dg-warning \"unterminated\" \"pr86937\" { xfail *-*-* } } */\n+\n+T (v0 ? \"1234\" : b[3], bsz);\n+T (v0 ? \"1234\" : b[i3], bsz);\n+T (v0 ? b[3] : \"1234\", bsz);\n+T (v0 ? b[i3] : \"1234\", bsz);\n+\n+T (v0 ? a : b[3], bsz);\n+T (v0 ? b[0] : b[2], bsz);\n+T (v0 ? b[2] : b[3], bsz);\n+T (v0 ? b[3] : b[2], bsz);\n+\n+T (v0 ? \"1234\" : b[3], bsz + 1);  /* { dg-warning \"unterminated\" \"pr86937\" { xfail *-*-* } } */\n+T (v0 ? \"1234\" : b[i3], bsz + 1); /* { dg-warning \"unterminated\" \"pr86937\" { xfail *-*-* } } */\n+T (v0 ? b[3] : \"1234\", bsz + 1);  /* { dg-warning \"unterminated\" \"pr86937\" { xfail *-*-* } } */\n+T (v0 ? b[i3] : \"1234\", bsz + 1); /* { dg-warning \"unterminated\" \"pr86937\" { xfail *-*-* } } */\n+\n+T (v0 ? a : b[3], bsz + 1);       /* { dg-warning \"unterminated\" \"pr86937\" { xfail *-*-* } } */\n+T (v0 ? b[0] : b[2], bsz + 1);\n+T (v0 ? b[2] : b[3], bsz + 1);    /* { dg-warning \"unterminated\" \"pr86937\" { xfail *-*-* } } */\n+T (v0 ? b[3] : b[2], bsz + 1);    /* { dg-warning \"unterminated\" \"pr86937\" { xfail *-*-* } } */\n+\n+struct A { char a[5], b[5]; };\n+\n+const struct A s = { \"1234\", \"12345\" };\n+\n+T (s.a, asz);\n+T (&s.a[0], asz);\n+T (&s.a[0] + 1, asz);\n+T (&s.a[0] + v0, asz);\n+T (&s.a[1], asz);\n+T (&s.a[1] + 1, asz);\n+T (&s.a[1] + v0, asz);\n+\n+T (&s.a[i0], asz);\n+T (&s.a[i0] + i1, asz);\n+T (&s.a[i0] + v0, asz);\n+T (&s.a[i1], asz);\n+T (&s.a[i1] + i1, asz);\n+T (&s.a[i1] + v0, asz);\n+\n+T (s.a, asz + 1);\n+T (&s.a[0], asz + 1);\n+T (&s.a[0] + 1, asz + 1);\n+T (&s.a[0] + v0, asz + 1);\n+T (&s.a[1], asz + 1);\n+T (&s.a[1] + 1, asz + 1);\n+T (&s.a[1] + v0, asz + 1);\n+\n+T (&s.a[i0], asz + 1);\n+T (&s.a[i0] + i1, asz + 1);\n+T (&s.a[i0] + v0, asz + 1);\n+T (&s.a[i1], asz + 1);\n+T (&s.a[i1] + i1, asz + 1);\n+T (&s.a[i1] + v0, asz + 1);\n+\n+T (s.b, bsz);\n+T (&s.b[0], bsz);\n+T (&s.b[0] + 1, bsz);             /* { dg-warning \"unterminated\" } */\n+T (&s.b[0] + v0, bsz);            /* { dg-warning \"unterminated\" } */\n+T (&s.b[1], bsz);                 /* { dg-warning \"unterminated\" } */\n+T (&s.b[1] + 1, bsz);             /* { dg-warning \"unterminated\" } */\n+T (&s.b[1] + v0, bsz);            /* { dg-warning \"unterminated\" } */\n+\n+T (&s.b[i0], bsz);\n+T (&s.b[i0] + i1, bsz);           /* { dg-warning \"unterminated\" } */\n+T (&s.b[i0] + v0, bsz);           /* { dg-warning \"unterminated\" } */\n+T (&s.b[i1], bsz);                /* { dg-warning \"unterminated\" } */\n+T (&s.b[i1] + i1, bsz);           /* { dg-warning \"unterminated\" } */\n+T (&s.b[i1] + v0, bsz);           /* { dg-warning \"unterminated\" } */\n+\n+T (s.b, bsz + 1);                 /* { dg-warning \"unterminated\" } */\n+T (&s.b[0], bsz + 1);             /* { dg-warning \"unterminated\" } */\n+T (&s.b[0] + 1, bsz + 1);         /* { dg-warning \"unterminated\" } */\n+T (&s.b[0] + v0, bsz + 1);        /* { dg-warning \"unterminated\" } */\n+T (&s.b[1], bsz + 1);             /* { dg-warning \"unterminated\" } */\n+T (&s.b[1] + 1, bsz + 1);         /* { dg-warning \"unterminated\" } */\n+T (&s.b[1] + v0, bsz + 1);        /* { dg-warning \"unterminated\" } */\n+\n+T (&s.b[i0], bsz + 1);            /* { dg-warning \"unterminated\" } */\n+T (&s.b[i0] + i1, bsz + 1);       /* { dg-warning \"unterminated\" } */\n+T (&s.b[i0] + v0, bsz + 1);       /* { dg-warning \"unterminated\" } */\n+T (&s.b[i1], bsz + 1);            /* { dg-warning \"unterminated\" } */\n+T (&s.b[i1] + i1, bsz + 1);       /* { dg-warning \"unterminated\" } */\n+T (&s.b[i1] + v0, bsz + 1);       /* { dg-warning \"unterminated\" } */\n+\n+struct B { struct A a[2]; };\n+\n+const struct B ba[] = {\n+  { { { \"123\", \"12345\" }, { \"12345\", \"123\" } } },\n+  { { { \"12345\", \"123\" }, { \"123\", \"12345\" } } },\n+  { { { \"1\", \"12\" },      { \"123\", \"1234\" } } },\n+  { { { \"123\", \"1234\" },  { \"12345\", \"12\" } } }\n+};\n+\n+T (ba[0].a[0].a, asz + 1);\n+T (&ba[0].a[0].a[0], asz + 1);\n+T (&ba[0].a[0].a[0] + 1, asz + 1);\n+T (&ba[0].a[0].a[0] + v0, asz + 1);\n+T (&ba[0].a[0].a[1], asz + 1);\n+T (&ba[0].a[0].a[1] + 1, asz + 1);\n+T (&ba[0].a[0].a[1] + v0, asz + 1);\n+\n+T (ba[0].a[0].b, bsz);\n+T (&ba[0].a[0].b[0], bsz);\n+T (&ba[0].a[0].b[0] + 1, bsz);        /* { dg-warning \"unterminated\" } */\n+T (&ba[0].a[0].b[0] + 1, bsz - 1);\n+T (&ba[0].a[0].b[0] + v0, bsz);       /* { dg-warning \"unterminated\" } */\n+T (&ba[0].a[0].b[1], bsz);            /* { dg-warning \"unterminated\" } */\n+T (&ba[0].a[0].b[1], bsz - 1);\n+T (&ba[0].a[0].b[1] + 1, bsz - 1);    /* { dg-warning \"unterminated\" } */\n+T (&ba[0].a[0].b[1] + 1, bsz - 2);\n+T (&ba[0].a[0].b[1] + 1, bsz);        /* { dg-warning \"unterminated\" } */\n+T (&ba[0].a[0].b[1] + v0, bsz);       /* { dg-warning \"unterminated\" } */\n+\n+T (ba[0].a[0].b, bsz + 1);            /* { dg-warning \"unterminated\" } */\n+T (&ba[0].a[0].b[0], bsz + 1);        /* { dg-warning \"unterminated\" } */\n+T (&ba[0].a[0].b[0] + 1, bsz + 1);    /* { dg-warning \"unterminated\" } */\n+T (&ba[0].a[0].b[0] + v0, bsz + 1);   /* { dg-warning \"unterminated\" } */\n+T (&ba[0].a[0].b[1], bsz + 1);        /* { dg-warning \"unterminated\" } */\n+T (&ba[0].a[0].b[1] + 1, bsz + 1);    /* { dg-warning \"unterminated\" } */\n+T (&ba[0].a[0].b[1] + v0, bsz + 1);   /* { dg-warning \"unterminated\" } */\n+\n+T (ba[0].a[1].a, asz + 1);            /* { dg-warning \"unterminated\" } */\n+T (&ba[0].a[1].a[0], asz + 1);        /* { dg-warning \"unterminated\" } */\n+T (&ba[0].a[1].a[0] + 1, asz + 1);    /* { dg-warning \"unterminated\" } */\n+T (&ba[0].a[1].a[0] + v0, asz + 1);   /* { dg-warning \"unterminated\" } */\n+T (&ba[0].a[1].a[1], asz + 1);        /* { dg-warning \"unterminated\" } */\n+T (&ba[0].a[1].a[1] + 1, asz + 1);    /* { dg-warning \"unterminated\" } */\n+T (&ba[0].a[1].a[1] + v0, asz + 1);   /* { dg-warning \"unterminated\" } */\n+\n+T (ba[0].a[1].b, bsz + 1);\n+T (&ba[0].a[1].b[0], bsz + 1);\n+T (&ba[0].a[1].b[0] + 1, bsz + 1);\n+T (&ba[0].a[1].b[0] + v0, bsz + 1);\n+T (&ba[0].a[1].b[1], bsz + 1);\n+T (&ba[0].a[1].b[1] + 1, bsz + 1);\n+T (&ba[0].a[1].b[1] + v0, bsz + 1);\n+\n+T (ba[1].a[0].a, asz);\n+T (&ba[1].a[0].a[0], asz);\n+T (&ba[1].a[0].a[0] + 1, asz);        /* { dg-warning \"unterminated\" } */\n+T (&ba[1].a[0].a[0] + v0, asz);       /* { dg-warning \"unterminated\" } */\n+T (&ba[1].a[0].a[1], asz);            /* { dg-warning \"unterminated\" } */\n+T (&ba[1].a[0].a[1] + 1, asz);        /* { dg-warning \"unterminated\" } */\n+T (&ba[1].a[0].a[1] + v0, asz);       /* { dg-warning \"unterminated\" } */\n+\n+T (ba[1].a[0].a, asz + 1);            /* { dg-warning \"unterminated\" } */\n+T (&ba[1].a[0].a[0], asz + 1);        /* { dg-warning \"unterminated\" } */\n+T (&ba[1].a[0].a[0] + 1, asz + 1);    /* { dg-warning \"unterminated\" } */\n+T (&ba[1].a[0].a[0] + v0, asz + 1);   /* { dg-warning \"unterminated\" } */\n+T (&ba[1].a[0].a[1], asz + 1);        /* { dg-warning \"unterminated\" } */\n+T (&ba[1].a[0].a[1] + 1, asz + 1);    /* { dg-warning \"unterminated\" } */\n+T (&ba[1].a[0].a[1] + v0, asz + 1);   /* { dg-warning \"unterminated\" } */\n+\n+T (ba[1].a[0].b, bsz);\n+T (&ba[1].a[0].b[0], bsz);\n+T (&ba[1].a[0].b[0] + 1, bsz);\n+T (&ba[1].a[0].b[0] + v0, bsz);\n+T (&ba[1].a[0].b[1], bsz);\n+T (&ba[1].a[0].b[1] + 1, bsz);\n+T (&ba[1].a[0].b[1] + v0, bsz);\n+\n+T (ba[1].a[1].a, asz);\n+T (&ba[1].a[1].a[0], asz);\n+T (&ba[1].a[1].a[0] + 1, asz);\n+T (&ba[1].a[1].a[0] + v0, asz);\n+T (&ba[1].a[1].a[1], asz);\n+T (&ba[1].a[1].a[1] + 1, asz);\n+T (&ba[1].a[1].a[1] + v0, asz);\n+\n+T (ba[1].a[1].b, bsz);\n+T (&ba[1].a[1].b[0], bsz);\n+T (&ba[1].a[1].b[0] + 1, bsz);        /* { dg-warning \"unterminated\" } */\n+T (&ba[1].a[1].b[0] + 1, bsz - 1);\n+T (&ba[1].a[1].b[0] + v0, bsz);       /* { dg-warning \"unterminated\" } */\n+T (&ba[1].a[1].b[1], bsz);            /* { dg-warning \"unterminated\" } */\n+T (&ba[1].a[1].b[1], bsz - 1);\n+T (&ba[1].a[1].b[1] + 1, bsz);        /* { dg-warning \"unterminated\" } */\n+T (&ba[1].a[1].b[1] + 1, bsz - 1);    /* { dg-warning \"unterminated\" } */\n+T (&ba[1].a[1].b[1] + 1, bsz - 2);\n+T (&ba[1].a[1].b[1] + 1, bsz - i2);\n+T (&ba[1].a[1].b[1] + v0, bsz);       /* { dg-warning \"unterminated\" } */\n+\n+/* Prune out warnings with no location (pr?????).\n+   { dg-prune-output \"cc1:\" } */"}]}