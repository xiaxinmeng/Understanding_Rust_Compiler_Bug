{"sha": "9f2bc5077debef2b046b6c10d38591ac324ad8b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYyYmM1MDc3ZGViZWYyYjA0NmI2YzEwZDM4NTkxYWMzMjRhZDhiNQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-07-16T17:12:02Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-07-19T08:26:12Z"}, "message": "[gcn] Work-around libgomp 'error: array subscript 0 is outside array bounds of \u2018__lds struct gomp_thread * __lds[0]\u2019 [-Werror=array-bounds]' [PR101484]\n\n... seen as of commit a110855667782dac7b674d3e328b253b3b3c919b \"Correct\nhandling of variable offset minus constant in -Warray-bounds [PR100137]\".\n\nAwaiting a different solution, of course.\n\n\tlibgomp/\n\tPR target/101484\n\t* config/gcn/team.c: Apply '-Werror=array-bounds' work-around.\n\t* libgomp.h [__AMDGCN__]: Likewise.", "tree": {"sha": "97ca95683939a273fa435ce8bee2587743399ad1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97ca95683939a273fa435ce8bee2587743399ad1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f2bc5077debef2b046b6c10d38591ac324ad8b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f2bc5077debef2b046b6c10d38591ac324ad8b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f2bc5077debef2b046b6c10d38591ac324ad8b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f2bc5077debef2b046b6c10d38591ac324ad8b5/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d7686a30fcf0e44133f28673b722b5f57e430c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d7686a30fcf0e44133f28673b722b5f57e430c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d7686a30fcf0e44133f28673b722b5f57e430c5"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "94ce2f2dfebe4081ece7157bdca92b941d4323af", "filename": "libgomp/config/gcn/team.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f2bc5077debef2b046b6c10d38591ac324ad8b5/libgomp%2Fconfig%2Fgcn%2Fteam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f2bc5077debef2b046b6c10d38591ac324ad8b5/libgomp%2Fconfig%2Fgcn%2Fteam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Fgcn%2Fteam.c?ref=9f2bc5077debef2b046b6c10d38591ac324ad8b5", "patch": "@@ -65,9 +65,12 @@ gomp_gcn_enter_kernel (void)\n       void * __lds *arena_start = (void * __lds *)TEAM_ARENA_START;\n       void * __lds *arena_free = (void * __lds *)TEAM_ARENA_FREE;\n       void * __lds *arena_end = (void * __lds *)TEAM_ARENA_END;\n+# pragma GCC diagnostic push\n+# pragma GCC diagnostic ignored \"-Warray-bounds\" /*TODO PR101484 */\n       *arena_start = team_arena;\n       *arena_free = team_arena;\n       *arena_end = team_arena + TEAM_ARENA_SIZE;\n+# pragma GCC diagnostic pop\n \n       /* Allocate and initialize the team-local-storage data.  */\n       struct gomp_thread *thrs = team_malloc_cleared (sizeof (*thrs)"}, {"sha": "4159cbe33347336058e976391f0c9c7ca101f891", "filename": "libgomp/libgomp.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f2bc5077debef2b046b6c10d38591ac324ad8b5/libgomp%2Flibgomp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f2bc5077debef2b046b6c10d38591ac324ad8b5/libgomp%2Flibgomp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.h?ref=9f2bc5077debef2b046b6c10d38591ac324ad8b5", "patch": "@@ -128,7 +128,10 @@ team_malloc (size_t size)\n        : \"=v\"(result) : \"v\"(TEAM_ARENA_FREE), \"v\"(size), \"e\"(1L) : \"memory\");\n \n   /* Handle OOM.  */\n+# pragma GCC diagnostic push\n+# pragma GCC diagnostic ignored \"-Warray-bounds\" /*TODO PR101484 */\n   if (result + size > *(void * __lds *)TEAM_ARENA_END)\n+# pragma GCC diagnostic pop\n     {\n       /* While this is experimental, let's make sure we know when OOM\n \t happens.  */\n@@ -159,8 +162,11 @@ team_free (void *ptr)\n      However, if we fell back to using heap then we should free it.\n      It would be better if this function could be a no-op, but at least\n      LDS loads are cheap.  */\n+# pragma GCC diagnostic push\n+# pragma GCC diagnostic ignored \"-Warray-bounds\" /*TODO PR101484 */\n   if (ptr < *(void * __lds *)TEAM_ARENA_START\n       || ptr >= *(void * __lds *)TEAM_ARENA_END)\n+# pragma GCC diagnostic pop\n     free (ptr);\n }\n #else\n@@ -789,13 +795,19 @@ static inline struct gomp_thread *gcn_thrs (void)\n {\n   /* The value is at the bottom of LDS.  */\n   struct gomp_thread * __lds *thrs = (struct gomp_thread * __lds *)4;\n+# pragma GCC diagnostic push\n+# pragma GCC diagnostic ignored \"-Warray-bounds\" /*TODO PR101484 */\n   return *thrs;\n+# pragma GCC diagnostic pop\n }\n static inline void set_gcn_thrs (struct gomp_thread *val)\n {\n   /* The value is at the bottom of LDS.  */\n   struct gomp_thread * __lds *thrs = (struct gomp_thread * __lds *)4;\n+# pragma GCC diagnostic push\n+# pragma GCC diagnostic ignored \"-Warray-bounds\" /*TODO PR101484 */\n   *thrs = val;\n+# pragma GCC diagnostic pop\n }\n static inline struct gomp_thread *gomp_thread (void)\n {"}]}