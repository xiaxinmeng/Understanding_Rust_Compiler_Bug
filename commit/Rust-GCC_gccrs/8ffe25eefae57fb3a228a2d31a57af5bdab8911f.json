{"sha": "8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZmZTI1ZWVmYWU1N2ZiM2EyMjhhMmQzMWE1N2FmNWJkYWI4OTExZg==", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-07-06T01:53:19Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-07-06T01:53:19Z"}, "message": "ira: Support more matching constraint forms with param [PR100328]\n\nThis patch is to make IRA consider matching constraint heavily,\neven if there is at least one other alternative with non-NO_REG\nregister class constraint, it will continue and check matching\nconstraint in all available alternatives and respect the\nmatching constraint with preferred register class.\n\nOne typical case is destructive FMA style instruction on rs6000.\nWithout this patch, for the mentioned FMA instruction, IRA won't\nrespect the matching constraint on VSX_REG since there are some\nalternative with FLOAT_REG which doesn't have matching constraint.\nIt can cause extra register copies since later reload has to make\ncode to respect the constraint.  This patch make IRA respect this\nmatching constraint on VSX_REG which is the preferred regclass,\nbut it excludes some cases where for one preferred register class\nthere can be two or more alternatives, one of them has the\nmatching constraint, while another doesn't have.  It also\nconsiders the possibility of free register copy.\n\nWith option Ofast unroll, this patch can help to improve SPEC2017\nbmk 508.namd_r +2.42% and 519.lbm_r +2.43% on Power8 while\n508.namd_r +3.02% and 519.lbm_r +3.85% on Power9 without any\nremarkable degradations.  It also improved something on SVE as\ntestcase changes showed and Richard's confirmation.\n\nBootstrapped & regtested on powerpc64le-linux-gnu P9,\nx86_64-redhat-linux and aarch64-linux-gnu.\n\ngcc/ChangeLog:\n\n\tPR rtl-optimization/100328\n\t* doc/invoke.texi (ira-consider-dup-in-all-alts): Document new\n\tparameter.\n\t* ira.c (ira_get_dup_out_num): Adjust as parameter\n\tparam_ira_consider_dup_in_all_alts.\n\t* params.opt (ira-consider-dup-in-all-alts): New.\n\t* ira-conflicts.c (process_regs_for_copy): Add one parameter\n\tsingle_input_op_has_cstr_p.\n\t(get_freq_for_shuffle_copy): New function.\n\t(add_insn_allocno_copies): Adjust as single_input_op_has_cstr_p.\n\t* ira-int.h (ira_get_dup_out_num): Add one bool parameter.\n\ngcc/testsuite/ChangeLog:\n\n\tPR rtl-optimization/100328\n\t* gcc.target/aarch64/sve/acle/asm/div_f16.c: Remove one xfail.\n\t* gcc.target/aarch64/sve/acle/asm/div_f32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/div_f64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/divr_f16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/divr_f32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/divr_f64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/mad_f16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/mad_f32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/mad_f64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/mla_f16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/mla_f32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/mla_f64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/mls_f16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/mls_f32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/mls_f64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/msb_f16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/msb_f32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/msb_f64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/mulx_f16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/mulx_f32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/mulx_f64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/nmad_f16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/nmad_f32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/nmad_f64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/nmla_f16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/nmla_f32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/nmla_f64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/nmls_f16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/nmls_f32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/nmls_f64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/nmsb_f16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/nmsb_f32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/nmsb_f64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/sub_f16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/sub_f32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/sub_f64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/subr_f16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/subr_f32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/subr_f64.c: Likewise.", "tree": {"sha": "d7b9e781a5eae40fff8d2b34ab95c99264a96c55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7b9e781a5eae40fff8d2b34ab95c99264a96c55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3543b5e8002c033b2304d7ac1d1e58218eebb51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3543b5e8002c033b2304d7ac1d1e58218eebb51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3543b5e8002c033b2304d7ac1d1e58218eebb51"}], "stats": {"total": 315, "additions": 248, "deletions": 67}, "files": [{"sha": "f470fc6be58e7f98e3176ffac5c912d0ddec7119", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -13917,6 +13917,16 @@ of available registers reserved for some other purposes is given\n by this parameter.  Default of the parameter\n is the best found from numerous experiments.\n \n+@item ira-consider-dup-in-all-alts\n+Make IRA to consider matching constraint (duplicated operand number)\n+heavily in all available alternatives for preferred register class.\n+If it is set as zero, it means IRA only respects the matching\n+constraint when it's in the only available alternative with an\n+appropriate register class.  Otherwise, it means IRA will check all\n+available alternatives for preferred register class even if it has\n+found some choice with an appropriate register class and respect the\n+found qualified matching constraint.\n+\n @item lra-inheritance-ebb-probability-cutoff\n LRA tries to reuse values reloaded in registers in subsequent insns.\n This optimization is called inheritance.  EBB is used as a region to"}, {"sha": "86c6f242f18d7085b9e8e600b23f6d4cd2697cea", "filename": "gcc/ira-conflicts.c", "status": "modified", "additions": 75, "deletions": 18, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Fira-conflicts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Fira-conflicts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-conflicts.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -233,19 +233,30 @@ go_through_subreg (rtx x, int *offset)\n   return reg;\n }\n \n+/* Return the recomputed frequency for this shuffle copy or its similar\n+   case, since it's not for a real move insn, make it smaller.  */\n+\n+static int\n+get_freq_for_shuffle_copy (int freq)\n+{\n+  return freq < 8 ? 1 : freq / 8;\n+}\n+\n /* Process registers REG1 and REG2 in move INSN with execution\n    frequency FREQ.  The function also processes the registers in a\n    potential move insn (INSN == NULL in this case) with frequency\n    FREQ.  The function can modify hard register costs of the\n    corresponding allocnos or create a copy involving the corresponding\n    allocnos.  The function does nothing if the both registers are hard\n-   registers.  When nothing is changed, the function returns\n-   FALSE.  */\n+   registers.  When nothing is changed, the function returns FALSE.\n+   SINGLE_INPUT_OP_HAS_CSTR_P is only meaningful when constraint_p\n+   is true, see function ira_get_dup_out_num for its meaning.  */\n static bool\n-process_regs_for_copy (rtx reg1, rtx reg2, bool constraint_p,\n-\t\t       rtx_insn *insn, int freq)\n+process_regs_for_copy (rtx reg1, rtx reg2, bool constraint_p, rtx_insn *insn,\n+\t\t       int freq, bool single_input_op_has_cstr_p = true)\n {\n-  int allocno_preferenced_hard_regno, cost, index, offset1, offset2;\n+  int allocno_preferenced_hard_regno, index, offset1, offset2;\n+  int cost, conflict_cost, move_cost;\n   bool only_regs_p;\n   ira_allocno_t a;\n   reg_class_t rclass, aclass;\n@@ -306,9 +317,52 @@ process_regs_for_copy (rtx reg1, rtx reg2, bool constraint_p,\n     return false;\n   ira_init_register_move_cost_if_necessary (mode);\n   if (HARD_REGISTER_P (reg1))\n-    cost = ira_register_move_cost[mode][aclass][rclass] * freq;\n+    move_cost = ira_register_move_cost[mode][aclass][rclass];\n+  else\n+    move_cost = ira_register_move_cost[mode][rclass][aclass];\n+\n+  if (!single_input_op_has_cstr_p)\n+    {\n+      /* When this is a constraint copy and the matching constraint\n+\t doesn't only exist for this given operand but also for some\n+\t other operand(s), it means saving the possible move cost does\n+\t NOT need to require reg1 and reg2 to use the same hardware\n+\t register, so this hardware preference isn't required to be\n+\t fixed.  To avoid it to over prefer this hardware register,\n+\t and over disparage this hardware register on conflicted\n+\t objects, we need some cost tweaking here, similar to what\n+\t we do for shuffle copy.  */\n+      gcc_assert (constraint_p);\n+      int reduced_freq = get_freq_for_shuffle_copy (freq);\n+      if (HARD_REGISTER_P (reg1))\n+\t/* For reg2 = opcode(reg1, reg3 ...), assume that reg3 is a\n+\t   pseudo register which has matching constraint on reg2,\n+\t   even if reg2 isn't assigned by reg1, it's still possible\n+\t   not to have register moves if reg2 and reg3 use the same\n+\t   hardware register.  So to avoid the allocation to over\n+\t   prefer reg1, we can just take it as a shuffle copy.  */\n+\tcost = conflict_cost = move_cost * reduced_freq;\n+      else\n+\t{\n+\t  /* For reg1 = opcode(reg2, reg3 ...), assume that reg3 is a\n+\t     pseudo register which has matching constraint on reg2,\n+\t     to save the register move, it's better to assign reg1\n+\t     to either of reg2 and reg3 (or one of other pseudos like\n+\t     reg3), it's reasonable to use freq for the cost.  But\n+\t     for conflict_cost, since reg2 and reg3 conflicts with\n+\t     each other, both of them has the chance to be assigned\n+\t     by reg1, assume reg3 has one copy which also conflicts\n+\t     with reg2, we shouldn't make it less preferred on reg1\n+\t     since reg3 has the same chance to be assigned by reg1.\n+\t     So it adjusts the conflic_cost to make it same as what\n+\t     we use for shuffle copy.  */\n+\t  cost = move_cost * freq;\n+\t  conflict_cost = move_cost * reduced_freq;\n+\t}\n+    }\n   else\n-    cost = ira_register_move_cost[mode][rclass][aclass] * freq;\n+    cost = conflict_cost = move_cost * freq;\n+\n   do\n     {\n       ira_allocate_and_set_costs\n@@ -317,7 +371,7 @@ process_regs_for_copy (rtx reg1, rtx reg2, bool constraint_p,\n       ira_allocate_and_set_costs\n \t(&ALLOCNO_CONFLICT_HARD_REG_COSTS (a), aclass, 0);\n       ALLOCNO_HARD_REG_COSTS (a)[index] -= cost;\n-      ALLOCNO_CONFLICT_HARD_REG_COSTS (a)[index] -= cost;\n+      ALLOCNO_CONFLICT_HARD_REG_COSTS (a)[index] -= conflict_cost;\n       if (ALLOCNO_HARD_REG_COSTS (a)[index] < ALLOCNO_CLASS_COST (a))\n \tALLOCNO_CLASS_COST (a) = ALLOCNO_HARD_REG_COSTS (a)[index];\n       ira_add_allocno_pref (a, allocno_preferenced_hard_regno, freq);\n@@ -420,7 +474,8 @@ add_insn_allocno_copies (rtx_insn *insn)\n       operand = recog_data.operand[i];\n       if (! REG_SUBREG_P (operand))\n \tcontinue;\n-      if ((n = ira_get_dup_out_num (i, alts)) >= 0)\n+      bool single_input_op_has_cstr_p;\n+      if ((n = ira_get_dup_out_num (i, alts, single_input_op_has_cstr_p)) >= 0)\n \t{\n \t  bound_p[n] = true;\n \t  dup = recog_data.operand[n];\n@@ -429,8 +484,8 @@ add_insn_allocno_copies (rtx_insn *insn)\n \t\t\t\tREG_P (operand)\n \t\t\t\t? operand\n \t\t\t\t: SUBREG_REG (operand)) != NULL_RTX)\n-\t    process_regs_for_copy (operand, dup, true, NULL,\n-\t\t\t\t   freq);\n+\t    process_regs_for_copy (operand, dup, true, NULL, freq,\n+\t\t\t\t   single_input_op_has_cstr_p);\n \t}\n     }\n   for (i = 0; i < recog_data.n_operands; i++)\n@@ -440,13 +495,15 @@ add_insn_allocno_copies (rtx_insn *insn)\n \t  && find_reg_note (insn, REG_DEAD,\n \t\t\t    REG_P (operand)\n \t\t\t    ? operand : SUBREG_REG (operand)) != NULL_RTX)\n-\t/* If an operand dies, prefer its hard register for the output\n-\t   operands by decreasing the hard register cost or creating\n-\t   the corresponding allocno copies.  The cost will not\n-\t   correspond to a real move insn cost, so make the frequency\n-\t   smaller.  */\n-\tprocess_reg_shuffles (insn, operand, i, freq < 8 ? 1 : freq / 8,\n-\t\t\t      bound_p);\n+\t{\n+\t  /* If an operand dies, prefer its hard register for the output\n+\t     operands by decreasing the hard register cost or creating\n+\t     the corresponding allocno copies.  The cost will not\n+\t     correspond to a real move insn cost, so make the frequency\n+\t     smaller.  */\n+\t  int new_freq = get_freq_for_shuffle_copy (freq);\n+\t  process_reg_shuffles (insn, operand, i, new_freq, bound_p);\n+\t}\n     }\n }\n "}, {"sha": "da748626e3135adb52ddde7b1deed564078e8f44", "filename": "gcc/ira-int.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Fira-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Fira-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-int.h?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -971,7 +971,7 @@ extern void ira_debug_disposition (void);\n extern void ira_debug_allocno_classes (void);\n extern void ira_init_register_move_cost (machine_mode);\n extern alternative_mask ira_setup_alts (rtx_insn *);\n-extern int ira_get_dup_out_num (int, alternative_mask);\n+extern int ira_get_dup_out_num (int, alternative_mask, bool &);\n \n /* ira-build.c */\n "}, {"sha": "866fb98f2e5acf9203f4f3f373e6014e23970510", "filename": "gcc/ira.c", "status": "modified", "additions": 119, "deletions": 9, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -1922,9 +1922,25 @@ ira_setup_alts (rtx_insn *insn)\n /* Return the number of the output non-early clobber operand which\n    should be the same in any case as operand with number OP_NUM (or\n    negative value if there is no such operand).  ALTS is the mask\n-   of alternatives that we should consider.  */\n+   of alternatives that we should consider.  SINGLE_INPUT_OP_HAS_CSTR_P\n+   should be set in this function, it indicates whether there is only\n+   a single input operand which has the matching constraint on the\n+   output operand at the position specified in return value.  If the\n+   pattern allows any one of several input operands holds the matching\n+   constraint, it's set as false, one typical case is destructive FMA\n+   instruction on target rs6000.  Note that for a non-NO_REG preferred\n+   register class with no free register move copy, if the parameter\n+   PARAM_IRA_CONSIDER_DUP_IN_ALL_ALTS is set to one, this function\n+   will check all available alternatives for matching constraints,\n+   even if it has found or will find one alternative with non-NO_REG\n+   regclass, it can respect more cases with matching constraints.  If\n+   PARAM_IRA_CONSIDER_DUP_IN_ALL_ALTS is set to zero,\n+   SINGLE_INPUT_OP_HAS_CSTR_P is always true, it will stop to find\n+   matching constraint relationship once it hits some alternative with\n+   some non-NO_REG regclass.  */\n int\n-ira_get_dup_out_num (int op_num, alternative_mask alts)\n+ira_get_dup_out_num (int op_num, alternative_mask alts,\n+\t\t     bool &single_input_op_has_cstr_p)\n {\n   int curr_alt, c, original;\n   bool ignore_p, use_commut_op_p;\n@@ -1937,10 +1953,42 @@ ira_get_dup_out_num (int op_num, alternative_mask alts)\n     return -1;\n   str = recog_data.constraints[op_num];\n   use_commut_op_p = false;\n+  single_input_op_has_cstr_p = true;\n+\n+  rtx op = recog_data.operand[op_num];\n+  int op_regno = reg_or_subregno (op);\n+  enum reg_class op_pref_cl = reg_preferred_class (op_regno);\n+  machine_mode op_mode = GET_MODE (op);\n+\n+  ira_init_register_move_cost_if_necessary (op_mode);\n+  /* If the preferred regclass isn't NO_REG, continue to find the matching\n+     constraint in all available alternatives with preferred regclass, even\n+     if we have found or will find one alternative whose constraint stands\n+     for a REG (non-NO_REG) regclass.  Note that it would be fine not to\n+     respect matching constraint if the register copy is free, so exclude\n+     it.  */\n+  bool respect_dup_despite_reg_cstr\n+    = param_ira_consider_dup_in_all_alts\n+      && op_pref_cl != NO_REGS\n+      && ira_register_move_cost[op_mode][op_pref_cl][op_pref_cl] > 0;\n+\n+  /* Record the alternative whose constraint uses the same regclass as the\n+     preferred regclass, later if we find one matching constraint for this\n+     operand with preferred reclass, we will visit these recorded\n+     alternatives to check whether if there is one alternative in which no\n+     any INPUT operands have one matching constraint same as our candidate.\n+     If yes, it means there is one alternative which is perfectly fine\n+     without satisfying this matching constraint.  If no, it means in any\n+     alternatives there is one other INPUT operand holding this matching\n+     constraint, it's fine to respect this matching constraint and further\n+     create this constraint copy since it would become harmless once some\n+     other takes preference and it's interfered.  */\n+  alternative_mask pref_cl_alts;\n+\n   for (;;)\n     {\n-      rtx op = recog_data.operand[op_num];\n-      \n+      pref_cl_alts = 0;\n+\n       for (curr_alt = 0, ignore_p = !TEST_BIT (alts, curr_alt),\n \t   original = -1;;)\n \t{\n@@ -1963,9 +2011,25 @@ ira_get_dup_out_num (int op_num, alternative_mask alts)\n \t\t{\n \t\t  enum constraint_num cn = lookup_constraint (str);\n \t\t  enum reg_class cl = reg_class_for_constraint (cn);\n-\t\t  if (cl != NO_REGS\n-\t\t      && !targetm.class_likely_spilled_p (cl))\n-\t\t    goto fail;\n+\t\t  if (cl != NO_REGS && !targetm.class_likely_spilled_p (cl))\n+\t\t    {\n+\t\t      if (respect_dup_despite_reg_cstr)\n+\t\t\t{\n+\t\t\t  /* If it's free to move from one preferred class to\n+\t\t\t     the one without matching constraint, it doesn't\n+\t\t\t     have to respect this constraint with costs.  */\n+\t\t\t  if (cl != op_pref_cl\n+\t\t\t      && (ira_reg_class_intersect[cl][op_pref_cl]\n+\t\t\t\t  != NO_REGS)\n+\t\t\t      && (ira_may_move_in_cost[op_mode][op_pref_cl][cl]\n+\t\t\t\t  == 0))\n+\t\t\t    goto fail;\n+\t\t\t  else if (cl == op_pref_cl)\n+\t\t\t    pref_cl_alts |= ALTERNATIVE_BIT (curr_alt);\n+\t\t\t}\n+\t\t      else\n+\t\t\tgoto fail;\n+\t\t    }\n \t\t  if (constraint_satisfied_p (op, cn))\n \t\t    goto fail;\n \t\t  break;\n@@ -1979,7 +2043,21 @@ ira_get_dup_out_num (int op_num, alternative_mask alts)\n \t\t  str = end;\n \t\t  if (original != -1 && original != n)\n \t\t    goto fail;\n-\t\t  original = n;\n+\t\t  gcc_assert (n < recog_data.n_operands);\n+\t\t  if (respect_dup_despite_reg_cstr)\n+\t\t    {\n+\t\t      const operand_alternative *op_alt\n+\t\t\t= &recog_op_alt[curr_alt * recog_data.n_operands];\n+\t\t      /* Only respect the one with preferred rclass, without\n+\t\t\t respect_dup_despite_reg_cstr it's possible to get\n+\t\t\t one whose regclass isn't preferred first before,\n+\t\t\t but it would fail since there should be other\n+\t\t\t alternatives with preferred regclass.  */\n+\t\t      if (op_alt[n].cl == op_pref_cl)\n+\t\t\toriginal = n;\n+\t\t    }\n+\t\t  else\n+\t\t    original = n;\n \t\t  continue;\n \t\t}\n \t      }\n@@ -1988,7 +2066,39 @@ ira_get_dup_out_num (int op_num, alternative_mask alts)\n       if (original == -1)\n \tgoto fail;\n       if (recog_data.operand_type[original] == OP_OUT)\n-\treturn original;\n+\t{\n+\t  if (pref_cl_alts == 0)\n+\t    return original;\n+\t  /* Visit these recorded alternatives to check whether\n+\t     there is one alternative in which no any INPUT operands\n+\t     have one matching constraint same as our candidate.\n+\t     Give up this candidate if so.  */\n+\t  int nop, nalt;\n+\t  for (nalt = 0; nalt < recog_data.n_alternatives; nalt++)\n+\t    {\n+\t      if (!TEST_BIT (pref_cl_alts, nalt))\n+\t\tcontinue;\n+\t      const operand_alternative *op_alt\n+\t\t= &recog_op_alt[nalt * recog_data.n_operands];\n+\t      bool dup_in_other = false;\n+\t      for (nop = 0; nop < recog_data.n_operands; nop++)\n+\t\t{\n+\t\t  if (recog_data.operand_type[nop] != OP_IN)\n+\t\t    continue;\n+\t\t  if (nop == op_num)\n+\t\t    continue;\n+\t\t  if (op_alt[nop].matches == original)\n+\t\t    {\n+\t\t      dup_in_other = true;\n+\t\t      break;\n+\t\t    }\n+\t\t}\n+\t      if (!dup_in_other)\n+\t\treturn -1;\n+\t    }\n+\t  single_input_op_has_cstr_p = false;\n+\t  return original;\n+\t}\n     fail:\n       if (use_commut_op_p)\n \tbreak;"}, {"sha": "577cd42c173de85362a037eb0067f640ed1b5bdc", "filename": "gcc/params.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -330,6 +330,10 @@ Max size of conflict table in MB.\n Common Joined UInteger Var(param_ira_max_loops_num) Init(100) Param Optimization\n Max loops number for regional RA.\n \n+-param=ira-consider-dup-in-all-alts=\n+Common Joined UInteger Var(param_ira_consider_dup_in_all_alts) Init(1) IntegerRange(0, 1) Param Optimization\n+Control ira to consider matching constraint (duplicated operand number) heavily in all available alternatives for preferred register class.  If it is set as zero, it means ira only respects the matching constraint when it's in the only available alternative with an appropriate register class.  Otherwise, it means ira will check all available alternatives for preferred register class even if it has found some choice with an appropriate register class and respect the found qualified matching constraint.\n+\n -param=iv-always-prune-cand-set-bound=\n Common Joined UInteger Var(param_iv_always_prune_cand_set_bound) Init(10) Param Optimization\n If number of candidates in the set is smaller, we always try to remove unused ivs during its optimization."}, {"sha": "8bcd094c9960bdc49f8afaafb025cf62dfa214c9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/div_f16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdiv_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdiv_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdiv_f16.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -218,7 +218,7 @@ TEST_UNIFORM_ZD (div_h4_f16_x_tied1, svfloat16_t, __fp16,\n \t\t z0 = svdiv_x (p0, z0, d4))\n \n /*\n-** div_h4_f16_x_untied: { xfail *-*-* }\n+** div_h4_f16_x_untied:\n **\tmov\tz0\\.h, h4\n **\tfdivr\tz0\\.h, p0/m, z0\\.h, z1\\.h\n **\tret"}, {"sha": "546c61dc78302a5260b2420612e92ff31a58b315", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/div_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdiv_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdiv_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdiv_f32.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -218,7 +218,7 @@ TEST_UNIFORM_ZD (div_s4_f32_x_tied1, svfloat32_t, float,\n \t\t z0 = svdiv_x (p0, z0, d4))\n \n /*\n-** div_s4_f32_x_untied: { xfail *-*-* }\n+** div_s4_f32_x_untied:\n **\tmov\tz0\\.s, s4\n **\tfdivr\tz0\\.s, p0/m, z0\\.s, z1\\.s\n **\tret"}, {"sha": "1e24bc2648404f570dbc703a8a9c52f1fc8b0a2f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/div_f64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdiv_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdiv_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdiv_f64.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -218,7 +218,7 @@ TEST_UNIFORM_ZD (div_d4_f64_x_tied1, svfloat64_t, double,\n \t\t z0 = svdiv_x (p0, z0, d4))\n \n /*\n-** div_d4_f64_x_untied: { xfail *-*-* }\n+** div_d4_f64_x_untied:\n **\tmov\tz0\\.d, d4\n **\tfdivr\tz0\\.d, p0/m, z0\\.d, z1\\.d\n **\tret"}, {"sha": "e293be65a060bff0ed954534b3833b750e7f9841", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/divr_f16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdivr_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdivr_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdivr_f16.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -239,7 +239,7 @@ TEST_UNIFORM_ZD (divr_h4_f16_x_tied1, svfloat16_t, __fp16,\n \t\t z0 = svdivr_x (p0, z0, d4))\n \n /*\n-** divr_h4_f16_x_untied: { xfail *-*-* }\n+** divr_h4_f16_x_untied:\n **\tmov\tz0\\.h, h4\n **\tfdiv\tz0\\.h, p0/m, z0\\.h, z1\\.h\n **\tret"}, {"sha": "04a7ac40bb2482fe613365f2c25559cff2cf454a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/divr_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdivr_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdivr_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdivr_f32.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -239,7 +239,7 @@ TEST_UNIFORM_ZD (divr_s4_f32_x_tied1, svfloat32_t, float,\n \t\t z0 = svdivr_x (p0, z0, d4))\n \n /*\n-** divr_s4_f32_x_untied: { xfail *-*-* }\n+** divr_s4_f32_x_untied:\n **\tmov\tz0\\.s, s4\n **\tfdiv\tz0\\.s, p0/m, z0\\.s, z1\\.s\n **\tret"}, {"sha": "bef1a9b059cb4899e3aef7b5a90429a9998248a0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/divr_f64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdivr_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdivr_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdivr_f64.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -239,7 +239,7 @@ TEST_UNIFORM_ZD (divr_d4_f64_x_tied1, svfloat64_t, double,\n \t\t z0 = svdivr_x (p0, z0, d4))\n \n /*\n-** divr_d4_f64_x_untied: { xfail *-*-* }\n+** divr_d4_f64_x_untied:\n **\tmov\tz0\\.d, d4\n **\tfdiv\tz0\\.d, p0/m, z0\\.d, z1\\.d\n **\tret"}, {"sha": "4b3148419c5c44edff324046c2c3576eb446526b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/mad_f16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmad_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmad_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmad_f16.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -281,7 +281,7 @@ TEST_UNIFORM_ZD (mad_h4_f16_x_tied2, svfloat16_t, __fp16,\n \t\t z0 = svmad_x (p0, z1, z0, d4))\n \n /*\n-** mad_h4_f16_x_untied: { xfail *-*-* }\n+** mad_h4_f16_x_untied:\n **\tmov\tz0\\.h, h4\n **\tfmla\tz0\\.h, p0/m, z1\\.h, z2\\.h\n **\tret"}, {"sha": "d5dbc85d5a3c92fe588dc3cdc0186590ab46270a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/mad_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmad_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmad_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmad_f32.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -281,7 +281,7 @@ TEST_UNIFORM_ZD (mad_s4_f32_x_tied2, svfloat32_t, float,\n \t\t z0 = svmad_x (p0, z1, z0, d4))\n \n /*\n-** mad_s4_f32_x_untied: { xfail *-*-* }\n+** mad_s4_f32_x_untied:\n **\tmov\tz0\\.s, s4\n **\tfmla\tz0\\.s, p0/m, z1\\.s, z2\\.s\n **\tret"}, {"sha": "7b5dc22826e4e2abaacfe5413ced88f21b90e8a9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/mad_f64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmad_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmad_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmad_f64.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -281,7 +281,7 @@ TEST_UNIFORM_ZD (mad_d4_f64_x_tied2, svfloat64_t, double,\n \t\t z0 = svmad_x (p0, z1, z0, d4))\n \n /*\n-** mad_d4_f64_x_untied: { xfail *-*-* }\n+** mad_d4_f64_x_untied:\n **\tmov\tz0\\.d, d4\n **\tfmla\tz0\\.d, p0/m, z1\\.d, z2\\.d\n **\tret"}, {"sha": "d32ce5845d10143239d79a9d3a27991fe1b5541c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/mla_f16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmla_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmla_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmla_f16.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -281,7 +281,7 @@ TEST_UNIFORM_ZD (mla_h4_f16_x_tied2, svfloat16_t, __fp16,\n \t\t z0 = svmla_x (p0, z1, z0, d4))\n \n /*\n-** mla_h4_f16_x_untied: { xfail *-*-* }\n+** mla_h4_f16_x_untied:\n **\tmov\tz0\\.h, h4\n **\tfmad\tz0\\.h, p0/m, z2\\.h, z1\\.h\n **\tret"}, {"sha": "d10ba69a53ef5f970873606b62ade5920d71225c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/mla_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmla_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmla_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmla_f32.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -281,7 +281,7 @@ TEST_UNIFORM_ZD (mla_s4_f32_x_tied2, svfloat32_t, float,\n \t\t z0 = svmla_x (p0, z1, z0, d4))\n \n /*\n-** mla_s4_f32_x_untied: { xfail *-*-* }\n+** mla_s4_f32_x_untied:\n **\tmov\tz0\\.s, s4\n **\tfmad\tz0\\.s, p0/m, z2\\.s, z1\\.s\n **\tret"}, {"sha": "94c1e0b07532af08e3c7323b2bca0da411c5588c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/mla_f64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmla_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmla_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmla_f64.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -281,7 +281,7 @@ TEST_UNIFORM_ZD (mla_d4_f64_x_tied2, svfloat64_t, double,\n \t\t z0 = svmla_x (p0, z1, z0, d4))\n \n /*\n-** mla_d4_f64_x_untied: { xfail *-*-* }\n+** mla_d4_f64_x_untied:\n **\tmov\tz0\\.d, d4\n **\tfmad\tz0\\.d, p0/m, z2\\.d, z1\\.d\n **\tret"}, {"sha": "b58104d5eafecf6eace317535accb913924b772c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/mls_f16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmls_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmls_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmls_f16.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -281,7 +281,7 @@ TEST_UNIFORM_ZD (mls_h4_f16_x_tied2, svfloat16_t, __fp16,\n \t\t z0 = svmls_x (p0, z1, z0, d4))\n \n /*\n-** mls_h4_f16_x_untied: { xfail *-*-* }\n+** mls_h4_f16_x_untied:\n **\tmov\tz0\\.h, h4\n **\tfmsb\tz0\\.h, p0/m, z2\\.h, z1\\.h\n **\tret"}, {"sha": "7d6e60519b0c2521fab5057e1fb43431a203c62f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/mls_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmls_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmls_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmls_f32.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -281,7 +281,7 @@ TEST_UNIFORM_ZD (mls_s4_f32_x_tied2, svfloat32_t, float,\n \t\t z0 = svmls_x (p0, z1, z0, d4))\n \n /*\n-** mls_s4_f32_x_untied: { xfail *-*-* }\n+** mls_s4_f32_x_untied:\n **\tmov\tz0\\.s, s4\n **\tfmsb\tz0\\.s, p0/m, z2\\.s, z1\\.s\n **\tret"}, {"sha": "a6ed28eec5c3a0d9039a43fd0b81b1105aa0c8c9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/mls_f64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmls_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmls_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmls_f64.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -281,7 +281,7 @@ TEST_UNIFORM_ZD (mls_d4_f64_x_tied2, svfloat64_t, double,\n \t\t z0 = svmls_x (p0, z1, z0, d4))\n \n /*\n-** mls_d4_f64_x_untied: { xfail *-*-* }\n+** mls_d4_f64_x_untied:\n **\tmov\tz0\\.d, d4\n **\tfmsb\tz0\\.d, p0/m, z2\\.d, z1\\.d\n **\tret"}, {"sha": "894961a9ec58ffffd18f7feea7cb6a3e15e1671d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/msb_f16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmsb_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmsb_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmsb_f16.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -281,7 +281,7 @@ TEST_UNIFORM_ZD (msb_h4_f16_x_tied2, svfloat16_t, __fp16,\n \t\t z0 = svmsb_x (p0, z1, z0, d4))\n \n /*\n-** msb_h4_f16_x_untied: { xfail *-*-* }\n+** msb_h4_f16_x_untied:\n **\tmov\tz0\\.h, h4\n **\tfmls\tz0\\.h, p0/m, z1\\.h, z2\\.h\n **\tret"}, {"sha": "0d0915958a3dbe9ba5346ff4859a02ab3c858899", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/msb_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmsb_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmsb_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmsb_f32.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -281,7 +281,7 @@ TEST_UNIFORM_ZD (msb_s4_f32_x_tied2, svfloat32_t, float,\n \t\t z0 = svmsb_x (p0, z1, z0, d4))\n \n /*\n-** msb_s4_f32_x_untied: { xfail *-*-* }\n+** msb_s4_f32_x_untied:\n **\tmov\tz0\\.s, s4\n **\tfmls\tz0\\.s, p0/m, z1\\.s, z2\\.s\n **\tret"}, {"sha": "52dc3968e2470d39ebcbdd405ac968618f76e41e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/msb_f64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmsb_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmsb_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmsb_f64.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -281,7 +281,7 @@ TEST_UNIFORM_ZD (msb_d4_f64_x_tied2, svfloat64_t, double,\n \t\t z0 = svmsb_x (p0, z1, z0, d4))\n \n /*\n-** msb_d4_f64_x_untied: { xfail *-*-* }\n+** msb_d4_f64_x_untied:\n **\tmov\tz0\\.d, d4\n **\tfmls\tz0\\.d, p0/m, z1\\.d, z2\\.d\n **\tret"}, {"sha": "b8d6bf5d92c8516d8e640eacdb556a0389de7e65", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/mulx_f16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmulx_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmulx_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmulx_f16.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -303,7 +303,7 @@ TEST_UNIFORM_ZD (mulx_h4_f16_x_tied1, svfloat16_t, __fp16,\n \t\t z0 = svmulx_x (p0, z0, d4))\n \n /*\n-** mulx_h4_f16_x_untied: { xfail *-*-* }\n+** mulx_h4_f16_x_untied:\n **\tmov\tz0\\.h, h4\n **\tfmulx\tz0\\.h, p0/m, z0\\.h, z1\\.h\n **\tret"}, {"sha": "b8f5c1310d7633f537b3e04f60d1a5c38b3f173b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/mulx_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmulx_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmulx_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmulx_f32.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -303,7 +303,7 @@ TEST_UNIFORM_ZD (mulx_s4_f32_x_tied1, svfloat32_t, float,\n \t\t z0 = svmulx_x (p0, z0, d4))\n \n /*\n-** mulx_s4_f32_x_untied: { xfail *-*-* }\n+** mulx_s4_f32_x_untied:\n **\tmov\tz0\\.s, s4\n **\tfmulx\tz0\\.s, p0/m, z0\\.s, z1\\.s\n **\tret"}, {"sha": "746cc94143dc184cc0a9cf080dd14e64c7e7639e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/mulx_f64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmulx_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmulx_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmulx_f64.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -303,7 +303,7 @@ TEST_UNIFORM_ZD (mulx_d4_f64_x_tied1, svfloat64_t, double,\n \t\t z0 = svmulx_x (p0, z0, d4))\n \n /*\n-** mulx_d4_f64_x_untied: { xfail *-*-* }\n+** mulx_d4_f64_x_untied:\n **\tmov\tz0\\.d, d4\n **\tfmulx\tz0\\.d, p0/m, z0\\.d, z1\\.d\n **\tret"}, {"sha": "92e0664e6476264f3db4ab42994353b61d962240", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/nmad_f16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmad_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmad_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmad_f16.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -281,7 +281,7 @@ TEST_UNIFORM_ZD (nmad_h4_f16_x_tied2, svfloat16_t, __fp16,\n \t\t z0 = svnmad_x (p0, z1, z0, d4))\n \n /*\n-** nmad_h4_f16_x_untied: { xfail *-*-* }\n+** nmad_h4_f16_x_untied:\n **\tmov\tz0\\.h, h4\n **\tfnmla\tz0\\.h, p0/m, z1\\.h, z2\\.h\n **\tret"}, {"sha": "cef731ebcfe862070f9038b13c16ded37e5ae961", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/nmad_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmad_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmad_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmad_f32.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -281,7 +281,7 @@ TEST_UNIFORM_ZD (nmad_s4_f32_x_tied2, svfloat32_t, float,\n \t\t z0 = svnmad_x (p0, z1, z0, d4))\n \n /*\n-** nmad_s4_f32_x_untied: { xfail *-*-* }\n+** nmad_s4_f32_x_untied:\n **\tmov\tz0\\.s, s4\n **\tfnmla\tz0\\.s, p0/m, z1\\.s, z2\\.s\n **\tret"}, {"sha": "43b97c0de50ea6ef773ad3509ca2b748698b43bc", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/nmad_f64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmad_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmad_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmad_f64.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -281,7 +281,7 @@ TEST_UNIFORM_ZD (nmad_d4_f64_x_tied2, svfloat64_t, double,\n \t\t z0 = svnmad_x (p0, z1, z0, d4))\n \n /*\n-** nmad_d4_f64_x_untied: { xfail *-*-* }\n+** nmad_d4_f64_x_untied:\n **\tmov\tz0\\.d, d4\n **\tfnmla\tz0\\.d, p0/m, z1\\.d, z2\\.d\n **\tret"}, {"sha": "75d0ec7d3ab3a463d3bb3c144ef806abd0a0541d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/nmla_f16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmla_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmla_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmla_f16.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -281,7 +281,7 @@ TEST_UNIFORM_ZD (nmla_h4_f16_x_tied2, svfloat16_t, __fp16,\n \t\t z0 = svnmla_x (p0, z1, z0, d4))\n \n /*\n-** nmla_h4_f16_x_untied: { xfail *-*-* }\n+** nmla_h4_f16_x_untied:\n **\tmov\tz0\\.h, h4\n **\tfnmad\tz0\\.h, p0/m, z2\\.h, z1\\.h\n **\tret"}, {"sha": "da594d3eb955c31be180883602de254ce61a4740", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/nmla_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmla_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmla_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmla_f32.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -281,7 +281,7 @@ TEST_UNIFORM_ZD (nmla_s4_f32_x_tied2, svfloat32_t, float,\n \t\t z0 = svnmla_x (p0, z1, z0, d4))\n \n /*\n-** nmla_s4_f32_x_untied: { xfail *-*-* }\n+** nmla_s4_f32_x_untied:\n **\tmov\tz0\\.s, s4\n **\tfnmad\tz0\\.s, p0/m, z2\\.s, z1\\.s\n **\tret"}, {"sha": "73f15f417627b012a1ea557b5d0ef0b642793a39", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/nmla_f64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmla_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmla_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmla_f64.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -281,7 +281,7 @@ TEST_UNIFORM_ZD (nmla_d4_f64_x_tied2, svfloat64_t, double,\n \t\t z0 = svnmla_x (p0, z1, z0, d4))\n \n /*\n-** nmla_d4_f64_x_untied: { xfail *-*-* }\n+** nmla_d4_f64_x_untied:\n **\tmov\tz0\\.d, d4\n **\tfnmad\tz0\\.d, p0/m, z2\\.d, z1\\.d\n **\tret"}, {"sha": "ccf7e51ffc99986763b9de1ae706bf5a50860ed8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/nmls_f16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmls_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmls_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmls_f16.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -281,7 +281,7 @@ TEST_UNIFORM_ZD (nmls_h4_f16_x_tied2, svfloat16_t, __fp16,\n \t\t z0 = svnmls_x (p0, z1, z0, d4))\n \n /*\n-** nmls_h4_f16_x_untied: { xfail *-*-* }\n+** nmls_h4_f16_x_untied:\n **\tmov\tz0\\.h, h4\n **\tfnmsb\tz0\\.h, p0/m, z2\\.h, z1\\.h\n **\tret"}, {"sha": "10d345026f703c0ad62efe65ed7bdb60e05c340b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/nmls_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmls_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmls_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmls_f32.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -281,7 +281,7 @@ TEST_UNIFORM_ZD (nmls_s4_f32_x_tied2, svfloat32_t, float,\n \t\t z0 = svnmls_x (p0, z1, z0, d4))\n \n /*\n-** nmls_s4_f32_x_untied: { xfail *-*-* }\n+** nmls_s4_f32_x_untied:\n **\tmov\tz0\\.s, s4\n **\tfnmsb\tz0\\.s, p0/m, z2\\.s, z1\\.s\n **\tret"}, {"sha": "bf2a4418a9fe2667005feaf66371a50aa00a597a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/nmls_f64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmls_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmls_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmls_f64.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -281,7 +281,7 @@ TEST_UNIFORM_ZD (nmls_d4_f64_x_tied2, svfloat64_t, double,\n \t\t z0 = svnmls_x (p0, z1, z0, d4))\n \n /*\n-** nmls_d4_f64_x_untied: { xfail *-*-* }\n+** nmls_d4_f64_x_untied:\n **\tmov\tz0\\.d, d4\n **\tfnmsb\tz0\\.d, p0/m, z2\\.d, z1\\.d\n **\tret"}, {"sha": "5311ceb4408fefbc124ca642b55433e0b14298cb", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/nmsb_f16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmsb_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmsb_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmsb_f16.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -281,7 +281,7 @@ TEST_UNIFORM_ZD (nmsb_h4_f16_x_tied2, svfloat16_t, __fp16,\n \t\t z0 = svnmsb_x (p0, z1, z0, d4))\n \n /*\n-** nmsb_h4_f16_x_untied: { xfail *-*-* }\n+** nmsb_h4_f16_x_untied:\n **\tmov\tz0\\.h, h4\n **\tfnmls\tz0\\.h, p0/m, z1\\.h, z2\\.h\n **\tret"}, {"sha": "6f1407a8717e45bfa43ff192648bcc81bd314d81", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/nmsb_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmsb_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmsb_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmsb_f32.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -281,7 +281,7 @@ TEST_UNIFORM_ZD (nmsb_s4_f32_x_tied2, svfloat32_t, float,\n \t\t z0 = svnmsb_x (p0, z1, z0, d4))\n \n /*\n-** nmsb_s4_f32_x_untied: { xfail *-*-* }\n+** nmsb_s4_f32_x_untied:\n **\tmov\tz0\\.s, s4\n **\tfnmls\tz0\\.s, p0/m, z1\\.s, z2\\.s\n **\tret"}, {"sha": "5e4e1dd7ea67919c5acc0a3567c885973acb01c2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/nmsb_f64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmsb_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmsb_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fnmsb_f64.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -281,7 +281,7 @@ TEST_UNIFORM_ZD (nmsb_d4_f64_x_tied2, svfloat64_t, double,\n \t\t z0 = svnmsb_x (p0, z1, z0, d4))\n \n /*\n-** nmsb_d4_f64_x_untied: { xfail *-*-* }\n+** nmsb_d4_f64_x_untied:\n **\tmov\tz0\\.d, d4\n **\tfnmls\tz0\\.d, p0/m, z1\\.d, z2\\.d\n **\tret"}, {"sha": "48a57466f9d4808163cfc8a71c4deab6b7c33f6b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/sub_f16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsub_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsub_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsub_f16.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -336,7 +336,7 @@ TEST_UNIFORM_ZD (sub_h4_f16_x_tied1, svfloat16_t, __fp16,\n \t\t z0 = svsub_x (p0, z0, d4))\n \n /*\n-** sub_h4_f16_x_untied: { xfail *-*-* }\n+** sub_h4_f16_x_untied:\n **\tmov\tz0\\.h, h4\n **\tfsubr\tz0\\.h, p0/m, z0\\.h, z1\\.h\n **\tret"}, {"sha": "32d57be9a356a4b9da134ce83eea31341f073296", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/sub_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsub_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsub_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsub_f32.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -336,7 +336,7 @@ TEST_UNIFORM_ZD (sub_s4_f32_x_tied1, svfloat32_t, float,\n \t\t z0 = svsub_x (p0, z0, d4))\n \n /*\n-** sub_s4_f32_x_untied: { xfail *-*-* }\n+** sub_s4_f32_x_untied:\n **\tmov\tz0\\.s, s4\n **\tfsubr\tz0\\.s, p0/m, z0\\.s, z1\\.s\n **\tret"}, {"sha": "cdc25582649420e5c6ee87b31f64c899fa3c2c17", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/sub_f64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsub_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsub_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsub_f64.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -336,7 +336,7 @@ TEST_UNIFORM_ZD (sub_d4_f64_x_tied1, svfloat64_t, double,\n \t\t z0 = svsub_x (p0, z0, d4))\n \n /*\n-** sub_d4_f64_x_untied: { xfail *-*-* }\n+** sub_d4_f64_x_untied:\n **\tmov\tz0\\.d, d4\n **\tfsubr\tz0\\.d, p0/m, z0\\.d, z1\\.d\n **\tret"}, {"sha": "6929b286218412b35ee2a12a335a6a6ec69a0f66", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/subr_f16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsubr_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsubr_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsubr_f16.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -285,7 +285,7 @@ TEST_UNIFORM_ZD (subr_h4_f16_x_tied1, svfloat16_t, __fp16,\n \t\t z0 = svsubr_x (p0, z0, d4))\n \n /*\n-** subr_h4_f16_x_untied: { xfail *-*-* }\n+** subr_h4_f16_x_untied:\n **\tmov\tz0\\.h, h4\n **\tfsub\tz0\\.h, p0/m, z0\\.h, z1\\.h\n **\tret"}, {"sha": "5bf90a39145180a158a598663a32d27354b67881", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/subr_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsubr_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsubr_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsubr_f32.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -285,7 +285,7 @@ TEST_UNIFORM_ZD (subr_s4_f32_x_tied1, svfloat32_t, float,\n \t\t z0 = svsubr_x (p0, z0, d4))\n \n /*\n-** subr_s4_f32_x_untied: { xfail *-*-* }\n+** subr_s4_f32_x_untied:\n **\tmov\tz0\\.s, s4\n **\tfsub\tz0\\.s, p0/m, z0\\.s, z1\\.s\n **\tret"}, {"sha": "7091c40bbb225f50c97c4769bf65a9b02109a07f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/subr_f64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsubr_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffe25eefae57fb3a228a2d31a57af5bdab8911f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsubr_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsubr_f64.c?ref=8ffe25eefae57fb3a228a2d31a57af5bdab8911f", "patch": "@@ -285,7 +285,7 @@ TEST_UNIFORM_ZD (subr_d4_f64_x_tied1, svfloat64_t, double,\n \t\t z0 = svsubr_x (p0, z0, d4))\n \n /*\n-** subr_d4_f64_x_untied: { xfail *-*-* }\n+** subr_d4_f64_x_untied:\n **\tmov\tz0\\.d, d4\n **\tfsub\tz0\\.d, p0/m, z0\\.d, z1\\.d\n **\tret"}]}