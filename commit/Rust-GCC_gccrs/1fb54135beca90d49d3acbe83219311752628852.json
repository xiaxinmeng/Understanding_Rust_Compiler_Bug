{"sha": "1fb54135beca90d49d3acbe83219311752628852", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZiNTQxMzViZWNhOTBkNDlkM2FjYmU4MzIxOTMxMTc1MjYyODg1Mg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-02-13T03:09:45Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-02-13T03:09:45Z"}, "message": "i386.md (UNSPEC_FPATAN): New UNSPEC constant.\n\n\n\t* config/i386/i386.md (UNSPEC_FPATAN): New UNSPEC constant.\n\t(atan2sf3, atan2df3, atan2xf3, atan2tf3): New patterns.\n\n\t* reg-stack.c (subst_stack_regs_pat): Add support for binary\n\tUNSPEC instructions (e.g. \"fpatan\").\n\n\t* gcc.dg/i386-387-1.c: Add new test for __builtin_atan2.\n\t* gcc.dg/i386-387-2.c: Likewise.\n\nFrom-SVN: r62816", "tree": {"sha": "8f99b3141ffc1aa0b1386cc2ac0dbd502301b142", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f99b3141ffc1aa0b1386cc2ac0dbd502301b142"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fb54135beca90d49d3acbe83219311752628852", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fb54135beca90d49d3acbe83219311752628852", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fb54135beca90d49d3acbe83219311752628852", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fb54135beca90d49d3acbe83219311752628852/comments", "author": null, "committer": null, "parents": [{"sha": "c4ebd83df2c1b00b1f5e9c50ffa8da9cb350b4d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4ebd83df2c1b00b1f5e9c50ffa8da9cb350b4d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4ebd83df2c1b00b1f5e9c50ffa8da9cb350b4d9"}], "stats": {"total": 135, "additions": 133, "deletions": 2}, "files": [{"sha": "f8edc1b2a6020423ef28ea8395a2b7b4d06fd64b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fb54135beca90d49d3acbe83219311752628852/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fb54135beca90d49d3acbe83219311752628852/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1fb54135beca90d49d3acbe83219311752628852", "patch": "@@ -1,3 +1,11 @@\n+2003-02-12  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* config/i386/i386.md (UNSPEC_FPATAN): New UNSPEC constant.\n+\t(atan2sf3, atan2df3, atan2xf3, atan2tf3): New patterns.\n+\n+\t* reg-stack.c (subst_stack_regs_pat): Add support for binary\n+\tUNSPEC instructions (e.g. \"fpatan\").\n+\n 2003-02-12  Mike Stump  <mrs@apple.com>\n \n \t* varray.c (element_size): Remove."}, {"sha": "34905f8ac61d1030cb3e979356b58b88a83097a0", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fb54135beca90d49d3acbe83219311752628852/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fb54135beca90d49d3acbe83219311752628852/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1fb54135beca90d49d3acbe83219311752628852", "patch": "@@ -109,6 +109,9 @@\n    (UNSPEC_MFENCE\t\t59)\n    (UNSPEC_LFENCE\t\t60)\n    (UNSPEC_PSADBW\t\t61)\n+\n+   ; x87 Floating point\n+   (UNSPEC_FPATAN\t\t65)\n   ])\n \n (define_constants\n@@ -15484,6 +15487,50 @@\n   \"fcos\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")])\n+\n+(define_insn \"atan2df3\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(unspec:DF [(match_operand:DF 2 \"register_operand\" \"0\")\n+\t\t    (match_operand:DF 1 \"register_operand\" \"u\")]\n+\t UNSPEC_FPATAN))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+  \"fpatan\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"DF\")])\n+\n+(define_insn \"atan2sf3\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(unspec:SF [(match_operand:SF 2 \"register_operand\" \"0\")\n+\t\t    (match_operand:SF 1 \"register_operand\" \"u\")]\n+\t UNSPEC_FPATAN))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+  \"fpatan\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+(define_insn \"atan2xf3\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(unspec:XF [(match_operand:XF 2 \"register_operand\" \"0\")\n+\t\t    (match_operand:XF 1 \"register_operand\" \"u\")]\n+\t UNSPEC_FPATAN))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+  \"fpatan\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"XF\")])\n+\n+(define_insn \"atan2tf3\"\n+  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n+\t(unspec:TF [(match_operand:TF 2 \"register_operand\" \"0\")\n+\t\t    (match_operand:TF 1 \"register_operand\" \"u\")]\n+\t UNSPEC_FPATAN))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+  \"fpatan\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"XF\")])\n \f\n ;; Block operation instructions\n "}, {"sha": "965aad0b24dae2d85d7f5fc157432a834e81270c", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 69, "deletions": 2, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fb54135beca90d49d3acbe83219311752628852/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fb54135beca90d49d3acbe83219311752628852/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=1fb54135beca90d49d3acbe83219311752628852", "patch": "@@ -1,6 +1,6 @@\n /* Register to Stack convert for GNU compiler.\n-   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n+   2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -1726,6 +1726,73 @@ subst_stack_regs_pat (insn, regstack, pat)\n \t\treplace_reg (src1, FIRST_STACK_REG);\n \t\tbreak;\n \n+\t      case UNSPEC_FPATAN:\n+\t\t/* These insns operate on the top two stack slots.  */\n+\n+\t\tsrc1 = get_true_reg (&XVECEXP (pat_src, 0, 0));\n+\t\tsrc2 = get_true_reg (&XVECEXP (pat_src, 0, 1));\n+\n+\t\tsrc1_note = find_regno_note (insn, REG_DEAD, REGNO (*src1));\n+\t\tsrc2_note = find_regno_note (insn, REG_DEAD, REGNO (*src2));\n+\n+\t\t{\n+\t\t  struct stack_def temp_stack;\n+\t\t  int regno, j, k, temp;\n+\n+ \t\t  temp_stack = *regstack;\n+\n+\t\t  /* Place operand 1 at the top of stack.  */\n+\t\t  regno = get_hard_regnum (&temp_stack, *src1);\n+\t\t  if (regno < 0)\n+\t\t    abort ();\n+\t\t  if (regno != FIRST_STACK_REG)\n+\t\t    {\n+\t\t      k = temp_stack.top - (regno - FIRST_STACK_REG);\n+\t\t      j = temp_stack.top;\n+\n+\t\t      temp = temp_stack.reg[k];\n+\t\t      temp_stack.reg[k] = temp_stack.reg[j];\n+\t\t      temp_stack.reg[j] = temp;\n+\t\t    }\n+\n+\t\t  /* Place operand 2 next on the stack.  */\n+\t\t  regno = get_hard_regnum (&temp_stack, *src2);\n+\t\t  if (regno < 0)\n+\t\t    abort ();\n+\t\t  if (regno != FIRST_STACK_REG + 1)\n+\t\t    {\n+\t\t      k = temp_stack.top - (regno - FIRST_STACK_REG);\n+\t\t      j = temp_stack.top - 1;\n+\n+\t\t      temp = temp_stack.reg[k];\n+\t\t      temp_stack.reg[k] = temp_stack.reg[j];\n+\t\t      temp_stack.reg[j] = temp;\n+\t\t    }\n+\n+\t\t  change_stack (insn, regstack, &temp_stack, EMIT_BEFORE);\n+\t\t}\n+\n+\t\treplace_reg (src1, FIRST_STACK_REG);\n+\t\treplace_reg (src2, FIRST_STACK_REG + 1);\n+\n+\t\tif (src1_note)\n+\t\t  replace_reg (&XEXP (src1_note, 0), FIRST_STACK_REG);\n+\t\tif (src2_note)\n+\t\t  replace_reg (&XEXP (src2_note, 0), FIRST_STACK_REG + 1);\n+\n+\t\t/* Pop both input operands from the stack.  */\n+\t\tCLEAR_HARD_REG_BIT (regstack->reg_set,\n+\t\t\t\t    regstack->reg[regstack->top]);\n+\t\tCLEAR_HARD_REG_BIT (regstack->reg_set,\n+\t\t\t\t    regstack->reg[regstack->top - 1]);\n+\t\tregstack->top -= 2;\n+\n+\t\t/* Push the result back onto the stack.  */\n+\t\tregstack->reg[++regstack->top] = REGNO (*dest);\n+\t\tSET_HARD_REG_BIT (regstack->reg_set, REGNO (*dest));\n+\t\treplace_reg (dest, FIRST_STACK_REG);\n+\t\tbreak;\n+\n \t      case UNSPEC_SAHF:\n \t\t/* (unspec [(unspec [(compare)] UNSPEC_FNSTSW)] UNSPEC_SAHF)\n \t\t   The combination matches the PPRO fcomi instruction.  */"}, {"sha": "305827bf37b60d1d3782fd7d696382a02f84a200", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fb54135beca90d49d3acbe83219311752628852/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fb54135beca90d49d3acbe83219311752628852/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1fb54135beca90d49d3acbe83219311752628852", "patch": "@@ -1,3 +1,8 @@\n+2003-02-12  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/i386-387-1.c: Add new test for __builtin_atan2.\n+\t* gcc.dg/i386-387-2.c: Likewise.\n+\n 2003-02-12  Aldy Hernandez  <aldyh@redhat.com>\n \n         * gcc.dg/ppc-spe.c: Fix formatting."}, {"sha": "f28fd8bbdcf44d5ca5bf6f7cb8088dc357d28967", "filename": "gcc/testsuite/gcc.dg/i386-387-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fb54135beca90d49d3acbe83219311752628852/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fb54135beca90d49d3acbe83219311752628852/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-1.c?ref=1fb54135beca90d49d3acbe83219311752628852", "patch": "@@ -4,7 +4,9 @@\n /* { dg-final { scan-assembler \"call\\t_?sin\" } } */\n /* { dg-final { scan-assembler \"call\\t_?cos\" } } */\n /* { dg-final { scan-assembler \"call\\t_?sqrt\" } } */\n+/* { dg-final { scan-assembler \"call\\t_?atan2\" } } */\n \n double f1(double x) { return __builtin_sin(x); }\n double f2(double x) { return __builtin_cos(x); }\n double f3(double x) { return __builtin_sqrt(x); }\n+double f4(double x, double y) { return __builtin_atan2(x,y); }"}, {"sha": "c73cb92c5f31d915e42862f7a2362155ac411f2f", "filename": "gcc/testsuite/gcc.dg/i386-387-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fb54135beca90d49d3acbe83219311752628852/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fb54135beca90d49d3acbe83219311752628852/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-2.c?ref=1fb54135beca90d49d3acbe83219311752628852", "patch": "@@ -4,7 +4,9 @@\n /* { dg-final { scan-assembler \"fsin\" } } */\n /* { dg-final { scan-assembler \"fcos\" } } */\n /* { dg-final { scan-assembler \"fsqrt\" } } */\n+/* { dg-final { scan-assembler \"fpatan\" } } */\n \n double f1(double x) { return __builtin_sin(x); }\n double f2(double x) { return __builtin_cos(x); }\n double f3(double x) { return __builtin_sqrt(x); }\n+double f4(double x, double y) { return __builtin_atan2(x,y); }"}]}