{"sha": "ae58e548884f696e600966549867df23de3ff2d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU1OGU1NDg4ODRmNjk2ZTYwMDk2NjU0OTg2N2RmMjNkZTNmZjJkMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-07-11T17:40:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-07-11T17:40:29Z"}, "message": "re PR target/40667 (stack frames are generated even with -fomit-frame-pointer)\n\n\tPR rtl-optimization/40667\n\t* defaults.h (MINIMUM_ALIGNMENT): Define if not defined.\n\t* doc/tm.texi (MINIMUM_ALIGNMENT): Document it.\n\t* config/i386/i386.h (MINIMUM_ALIGNMENT): Define.\n\t* config/i386/i386.c (ix86_minimum_alignment): New function.\n\t* config/i386/i386-protos.h (ix86_minimum_alignment): New prototype.\n\t* cfgexpand.c (expand_one_var): Use MINIMIM_ALIGNMENT.\n\t* emit-rtl.c (gen_reg_rtx): Likewise.\n\t* function.c (assign_parms): Likewise.  If nominal_type needs\n\tbigger alignment than FUNCTION_ARG_BOUNDARY, use its alignment\n\trather than passed_type's alignment.\n\nFrom-SVN: r149513", "tree": {"sha": "f7d7a64b4ca810edf1a746863dde1086ecd8cbd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7d7a64b4ca810edf1a746863dde1086ecd8cbd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae58e548884f696e600966549867df23de3ff2d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae58e548884f696e600966549867df23de3ff2d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae58e548884f696e600966549867df23de3ff2d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae58e548884f696e600966549867df23de3ff2d3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dd67163fa487933aff300fd75228b6889c9c6f6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd67163fa487933aff300fd75228b6889c9c6f6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd67163fa487933aff300fd75228b6889c9c6f6e"}], "stats": {"total": 88, "additions": 84, "deletions": 4}, "files": [{"sha": "f3d298e7ea349637a156a62aa6381d324364eba2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae58e548884f696e600966549867df23de3ff2d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae58e548884f696e600966549867df23de3ff2d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae58e548884f696e600966549867df23de3ff2d3", "patch": "@@ -1,5 +1,17 @@\n 2009-07-11  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR rtl-optimization/40667\n+\t* defaults.h (MINIMUM_ALIGNMENT): Define if not defined.\n+\t* doc/tm.texi (MINIMUM_ALIGNMENT): Document it.\n+\t* config/i386/i386.h (MINIMUM_ALIGNMENT): Define.\n+\t* config/i386/i386.c (ix86_minimum_alignment): New function.\n+\t* config/i386/i386-protos.h (ix86_minimum_alignment): New prototype.\n+\t* cfgexpand.c (expand_one_var): Use MINIMIM_ALIGNMENT.\n+\t* emit-rtl.c (gen_reg_rtx): Likewise.\n+\t* function.c (assign_parms): Likewise.  If nominal_type needs\n+\tbigger alignment than FUNCTION_ARG_BOUNDARY, use its alignment\n+\trather than passed_type's alignment.\n+\n \tPR target/40668\n \t* function.c (assign_parm_setup_stack): Adjust\n \tMEM_OFFSET (data->stack_parm) if promoted_mode is different"}, {"sha": "c8d19fb19e2112cf80e4367afed55cd68eaa492f", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae58e548884f696e600966549867df23de3ff2d3/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae58e548884f696e600966549867df23de3ff2d3/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=ae58e548884f696e600966549867df23de3ff2d3", "patch": "@@ -1164,9 +1164,11 @@ expand_one_var (tree var, bool toplevel, bool really_expand)\n \t variables, which won't be on stack, we collect alignment of\n \t type and ignore user specified alignment.  */\n       if (TREE_STATIC (var) || DECL_EXTERNAL (var))\n-\talign = TYPE_ALIGN (TREE_TYPE (var));\n+\talign = MINIMUM_ALIGNMENT (TREE_TYPE (var),\n+\t\t\t\t   TYPE_MODE (TREE_TYPE (var)),\n+\t\t\t\t   TYPE_ALIGN (TREE_TYPE (var)));\n       else\n-\talign = DECL_ALIGN (var);\n+\talign = MINIMUM_ALIGNMENT (var, DECL_MODE (var), DECL_ALIGN (var));\n \n       if (crtl->stack_alignment_estimated < align)\n         {"}, {"sha": "2e92219de0f6de24252d1cfccf638f939e5af202", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae58e548884f696e600966549867df23de3ff2d3/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae58e548884f696e600966549867df23de3ff2d3/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=ae58e548884f696e600966549867df23de3ff2d3", "patch": "@@ -199,6 +199,8 @@ extern int ix86_return_pops_args (tree, tree, int);\n extern int ix86_data_alignment (tree, int);\n extern unsigned int ix86_local_alignment (tree, enum machine_mode,\n \t\t\t\t\t  unsigned int);\n+extern unsigned int ix86_minimum_alignment (tree, enum machine_mode,\n+\t\t\t\t\t    unsigned int);\n extern int ix86_constant_alignment (tree, int);\n extern tree ix86_handle_shared_attribute (tree *, tree, tree, int, bool *);\n extern tree ix86_handle_selectany_attribute (tree *, tree, tree, int, bool *);"}, {"sha": "f05eb5c74c882b39d741736425d6c77b3c95f73d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae58e548884f696e600966549867df23de3ff2d3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae58e548884f696e600966549867df23de3ff2d3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ae58e548884f696e600966549867df23de3ff2d3", "patch": "@@ -20087,6 +20087,41 @@ ix86_local_alignment (tree exp, enum machine_mode mode,\n     }\n   return align;\n }\n+\n+/* Compute the minimum required alignment for dynamic stack realignment\n+   purposes for a local variable, parameter or a stack slot.  EXP is\n+   the data type or decl itself, MODE is its mode and ALIGN is the\n+   alignment that the object would ordinarily have.  */\n+\n+unsigned int\n+ix86_minimum_alignment (tree exp, enum machine_mode mode,\n+\t\t\tunsigned int align)\n+{\n+  tree type, decl;\n+\n+  if (TARGET_64BIT || align != 64 || ix86_preferred_stack_boundary >= 64)\n+    return align;\n+\n+  if (exp && DECL_P (exp))\n+    {\n+      type = TREE_TYPE (exp);\n+      decl = exp;\n+    }\n+  else\n+    {\n+      type = exp;\n+      decl = NULL;\n+    }\n+\n+  /* Don't do dynamic stack realignment for long long objects with\n+     -mpreferred-stack-boundary=2.  */\n+  if ((mode == DImode || (type && TYPE_MODE (type) == DImode))\n+      && (!type || !TYPE_USER_ALIGN (type))\n+      && (!decl || !DECL_USER_ALIGN (decl)))\n+    return 32;\n+\n+  return align;\n+}\n \f\n /* Emit RTL insns to initialize the variable parts of a trampoline.\n    FNADDR is an RTX for the address of the function's pure code."}, {"sha": "f9b9dd178037226f1b7cd25316774ebd348bd680", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae58e548884f696e600966549867df23de3ff2d3/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae58e548884f696e600966549867df23de3ff2d3/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=ae58e548884f696e600966549867df23de3ff2d3", "patch": "@@ -831,6 +831,15 @@ enum target_cpu_default\n #define LOCAL_DECL_ALIGNMENT(DECL) \\\n   ix86_local_alignment ((DECL), VOIDmode, DECL_ALIGN (DECL))\n \n+/* If defined, a C expression to compute the minimum required alignment\n+   for dynamic stack realignment purposes for EXP (a TYPE or DECL),\n+   MODE, assuming normal alignment ALIGN.\n+\n+   If this macro is not defined, then (ALIGN) will be used.  */\n+\n+#define MINIMUM_ALIGNMENT(EXP, MODE, ALIGN) \\\n+  ix86_minimum_alignment (EXP, MODE, ALIGN)\n+\n \n /* If defined, a C expression that gives the alignment boundary, in\n    bits, of an argument with the specified mode and type.  If it is"}, {"sha": "b6cec4b249bb8ac00178217c42a73c610ad939df", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae58e548884f696e600966549867df23de3ff2d3/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae58e548884f696e600966549867df23de3ff2d3/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=ae58e548884f696e600966549867df23de3ff2d3", "patch": "@@ -1138,6 +1138,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n   LOCAL_ALIGNMENT (TREE_TYPE (DECL), DECL_ALIGN (DECL))\n #endif\n \n+#ifndef MINIMUM_ALIGNMENT\n+#define MINIMUM_ALIGNMENT(EXP,MODE,ALIGN) (ALIGN)\n+#endif\n+\n /* Alignment value for attribute ((aligned)).  */\n #ifndef ATTRIBUTE_ALIGNED_VALUE\n #define ATTRIBUTE_ALIGNED_VALUE BIGGEST_ALIGNMENT"}, {"sha": "41ed0317521ae1b2f662658ec5fa22548f9ba700", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae58e548884f696e600966549867df23de3ff2d3/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae58e548884f696e600966549867df23de3ff2d3/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=ae58e548884f696e600966549867df23de3ff2d3", "patch": "@@ -1227,6 +1227,14 @@ One use of this macro is to increase alignment of medium-size data to\n make it all fit in fewer cache lines.\n @end defmac\n \n+@defmac MINIMUM_ALIGNMENT (@var{exp}, @var{mode}, @var{align})\n+If defined, a C expression to compute the minimum required alignment\n+for dynamic stack realignment purposes for @var{exp} (a type or decl),\n+@var{mode}, assuming normal alignment @var{align}.\n+\n+If this macro is not defined, then @var{align} will be used.\n+@end defmac\n+\n @defmac EMPTY_FIELD_BOUNDARY\n Alignment in bits to be given to a structure bit-field that follows an\n empty field such as @code{int : 0;}."}, {"sha": "d20f2b552738e890b036685472efc1f51236a1ab", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae58e548884f696e600966549867df23de3ff2d3/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae58e548884f696e600966549867df23de3ff2d3/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=ae58e548884f696e600966549867df23de3ff2d3", "patch": "@@ -869,7 +869,11 @@ gen_reg_rtx (enum machine_mode mode)\n   if (SUPPORTS_STACK_ALIGNMENT \n       && crtl->stack_alignment_estimated < align\n       && !crtl->stack_realign_processed)\n-    crtl->stack_alignment_estimated = align;\n+    {\n+      unsigned int min_align = MINIMUM_ALIGNMENT (NULL, mode, align);\n+      if (crtl->stack_alignment_estimated < min_align)\n+\tcrtl->stack_alignment_estimated = min_align;\n+    }\n \n   if (generating_concat_p\n       && (GET_MODE_CLASS (mode) == MODE_COMPLEX_FLOAT"}, {"sha": "e31c12ada35b4e2fbd8005c6206e7114c75b219f", "filename": "gcc/function.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae58e548884f696e600966549867df23de3ff2d3/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae58e548884f696e600966549867df23de3ff2d3/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=ae58e548884f696e600966549867df23de3ff2d3", "patch": "@@ -3146,8 +3146,12 @@ assign_parms (tree fndecl)\n         {\n           unsigned int align = FUNCTION_ARG_BOUNDARY (data.promoted_mode,\n \t\t\t\t\t\t      data.passed_type);\n+\t  align = MINIMUM_ALIGNMENT (data.passed_type, data.promoted_mode,\n+\t\t\t\t     align);\n \t  if (TYPE_ALIGN (data.nominal_type) > align)\n-\t    align = TYPE_ALIGN (data.passed_type);\n+\t    align = MINIMUM_ALIGNMENT (data.nominal_type,\n+\t\t\t\t       TYPE_MODE (data.nominal_type),\n+\t\t\t\t       TYPE_ALIGN (data.nominal_type));\n \t  if (crtl->stack_alignment_estimated < align)\n \t    {\n \t      gcc_assert (!crtl->stack_realign_processed);"}]}