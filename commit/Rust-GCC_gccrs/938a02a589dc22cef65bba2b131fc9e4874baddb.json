{"sha": "938a02a589dc22cef65bba2b131fc9e4874baddb", "node_id": "C_kwDOANBUbNoAKDkzOGEwMmE1ODlkYzIyY2VmNjViYmEyYjEzMWZjOWU0ODc0YmFkZGI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-21T10:05:58Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-05T08:36:42Z"}, "message": "tree-optimization/104595 - vectorization of COND_EXPR with bool load\n\nThe following fixes an omission in bool pattern detection that\nmakes it fail when check_bool_pattern fails for COND_EXPR.  That's\nnot what it should do, instead it should still pattern recog\nto var != 0 even if no further adjustments to the def chain are\nnecessary when var is not a mask already.\n\n2022-02-21  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/104595\n\t* tree-vect-patterns.cc (vect_recog_bool_pattern): For\n\tCOND_EXPR do not fail if check_bool_pattern returns false.\n\n\t* gcc.dg/vect/pr104595.c: New testcase.", "tree": {"sha": "3475889c560188ce6f9ee28eadcacff6b639ad5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3475889c560188ce6f9ee28eadcacff6b639ad5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/938a02a589dc22cef65bba2b131fc9e4874baddb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/938a02a589dc22cef65bba2b131fc9e4874baddb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/938a02a589dc22cef65bba2b131fc9e4874baddb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/938a02a589dc22cef65bba2b131fc9e4874baddb/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9b764bce89f104e48f797b33836d66073e73ebb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9b764bce89f104e48f797b33836d66073e73ebb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9b764bce89f104e48f797b33836d66073e73ebb"}], "stats": {"total": 40, "additions": 32, "deletions": 8}, "files": [{"sha": "bb7d79aa69f7ba8a0765a8d58e4748cbdb9cb653", "filename": "gcc/testsuite/gcc.dg/vect/pr104595.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938a02a589dc22cef65bba2b131fc9e4874baddb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr104595.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938a02a589dc22cef65bba2b131fc9e4874baddb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr104595.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr104595.c?ref=938a02a589dc22cef65bba2b131fc9e4874baddb", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_condition } */\n+\n+#define N 256\n+typedef char T;\n+extern T a[N];\n+extern T b[N];\n+extern T c[N];\n+extern _Bool pb[N];\n+extern char pc[N];\n+\n+void predicate_by_bool()\n+{\n+  for (int i = 0; i < N; i++)\n+    c[i] = pb[i] ? a[i] : b[i];\n+}\n+\n+void predicate_by_char()\n+{\n+  for (int i = 0; i < N; i++)\n+    c[i] = pc[i] ? a[i] : b[i];\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" } } */"}, {"sha": "8c61eb965a6c1e892bee8e84243160409c7c30a0", "filename": "gcc/tree-vect-patterns.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938a02a589dc22cef65bba2b131fc9e4874baddb/gcc%2Ftree-vect-patterns.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938a02a589dc22cef65bba2b131fc9e4874baddb/gcc%2Ftree-vect-patterns.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.cc?ref=938a02a589dc22cef65bba2b131fc9e4874baddb", "patch": "@@ -4450,18 +4450,18 @@ vect_recog_bool_pattern (vec_info *vinfo,\n       if (get_vectype_for_scalar_type (vinfo, type) == NULL_TREE)\n \treturn NULL;\n \n-      if (!check_bool_pattern (var, vinfo, bool_stmts))\n+      if (check_bool_pattern (var, vinfo, bool_stmts))\n+\tvar = adjust_bool_stmts (vinfo, bool_stmts, type, stmt_vinfo);\n+      else if (integer_type_for_mask (var, vinfo))\n \treturn NULL;\n \n-      rhs = adjust_bool_stmts (vinfo, bool_stmts, type, stmt_vinfo);\n-\n       lhs = vect_recog_temp_ssa_var (TREE_TYPE (lhs), NULL);\n       pattern_stmt \n-\t  = gimple_build_assign (lhs, COND_EXPR,\n-\t\t\t\t build2 (NE_EXPR, boolean_type_node,\n-\t\t\t\t\t rhs, build_int_cst (type, 0)),\n-\t\t\t\t gimple_assign_rhs2 (last_stmt),\n-\t\t\t\t gimple_assign_rhs3 (last_stmt));\n+\t= gimple_build_assign (lhs, COND_EXPR,\n+\t\t\t       build2 (NE_EXPR, boolean_type_node,\n+\t\t\t\t       var, build_int_cst (TREE_TYPE (var), 0)),\n+\t\t\t       gimple_assign_rhs2 (last_stmt),\n+\t\t\t       gimple_assign_rhs3 (last_stmt));\n       *type_out = vectype;\n       vect_pattern_detected (\"vect_recog_bool_pattern\", last_stmt);\n "}]}