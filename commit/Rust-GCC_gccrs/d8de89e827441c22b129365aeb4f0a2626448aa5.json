{"sha": "d8de89e827441c22b129365aeb4f0a2626448aa5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhkZTg5ZTgyNzQ0MWMyMmIxMjkzNjVhZWI0ZjBhMjYyNjQ0OGFhNQ==", "commit": {"author": {"name": "Stephane Carrez", "email": "Stephane.Carrez@worldnet.fr", "date": "2001-08-04T10:01:02Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2001-08-04T10:01:02Z"}, "message": "m68hc11.md (\"bitcmpqi\"): Allow memory and soft register for operand 0.\n\n\t* config/m68hc11/m68hc11.md (\"bitcmpqi\"): Allow memory and soft\n\tregister for operand 0.\n\t(\"bitcmpqi_z_used\"): Allow memory for operand 0.\n\t(split \"bitcmpqi\"): New split to handle address reg as operand 1.\n\nFrom-SVN: r44629", "tree": {"sha": "3829c93306f8a49b1a6fb53a82267cec347bc38f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3829c93306f8a49b1a6fb53a82267cec347bc38f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8de89e827441c22b129365aeb4f0a2626448aa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8de89e827441c22b129365aeb4f0a2626448aa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8de89e827441c22b129365aeb4f0a2626448aa5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8de89e827441c22b129365aeb4f0a2626448aa5/comments", "author": null, "committer": null, "parents": [{"sha": "34259cdc2a76f565a18ef4dbe31d43fae14c48d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34259cdc2a76f565a18ef4dbe31d43fae14c48d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34259cdc2a76f565a18ef4dbe31d43fae14c48d2"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "8a77fa0b7e998c6e663ca6781f1b8eaac46a87dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8de89e827441c22b129365aeb4f0a2626448aa5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8de89e827441c22b129365aeb4f0a2626448aa5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8de89e827441c22b129365aeb4f0a2626448aa5", "patch": "@@ -1,3 +1,10 @@\n+2001-08-04  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n+\n+\t* config/m68hc11/m68hc11.md (\"bitcmpqi\"): Allow memory and soft\n+\tregister for operand 0.\n+\t(\"bitcmpqi_z_used\"): Allow memory for operand 0.\n+\t(split \"bitcmpqi\"): New split to handle address reg as operand 1.\n+\n 2001-08-04  Andreas Jaeger  <aj@suse.de>\n \n \t* gcse.c: Revert Daniel's last patch."}, {"sha": "c87a2188d0e7ca83ce8fcb18d7946b379b78ceae", "filename": "gcc/config/m68hc11/m68hc11.md", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8de89e827441c22b129365aeb4f0a2626448aa5/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8de89e827441c22b129365aeb4f0a2626448aa5/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md?ref=d8de89e827441c22b129365aeb4f0a2626448aa5", "patch": "@@ -385,28 +385,41 @@\n \n (define_insn \"bitcmpqi\"\n   [(set (cc0)\n-\t(and:QI (match_operand:QI 0 \"tst_operand\" \"d,d,d\")\n-\t        (match_operand:QI 1 \"cmp_operand\" \"im,*A,u\")))]\n+\t(and:QI (match_operand:QI 0 \"tst_operand\" \"d,d,d,m,!u\")\n+\t        (match_operand:QI 1 \"cmp_operand\" \"im,*B,u,d,d\")))]\n   \"\"\n   \"@\n-   bitb\\\\t%1\n+   bitb\\\\t%b1\n    #\n-   bitb\\\\t%1\")\n+   bitb\\\\t%b1\n+   bitb\\\\t%b0\n+   bitb\\\\t%b0\")\n \n-(define_insn \"bitcmpqi_z_used\"\n+(define_split /* \"bitcmpqi\" */\n   [(set (cc0)\n \t(and:QI (match_operand:QI 0 \"tst_operand\" \"d\")\n-\t\t(match_operand:QI 1 \"cmp_operand\" \"m\")))\n-   (use (match_operand:HI 2 \"hard_reg_operand\" \"xy\"))\n+\t\t(match_operand:QI 1 \"hard_addr_reg_operand\" \"xy\")))]\n+  \"z_replacement_completed == 2 && GET_MODE (operands[0]) == QImode\"\n+  [(set (match_dup 3) (match_dup 2))\n+   (set (cc0) (and:QI (match_dup 0) (match_dup 4)))]\n+  \"operands[2] = gen_rtx (REG, HImode, REGNO (operands[1]));\n+   operands[3] = gen_rtx (REG, HImode, SOFT_TMP_REGNUM);\n+   operands[4] = gen_rtx (REG, QImode, SOFT_TMP_REGNUM);\")\n+\n+(define_insn \"bitcmpqi_z_used\"\n+  [(set (cc0)\n+\t(and:QI (match_operand:QI 0 \"tst_operand\" \"d,m\")\n+\t\t(match_operand:QI 1 \"cmp_operand\" \"m,d\")))\n+   (use (match_operand:HI 2 \"hard_reg_operand\" \"xy,xy\"))\n    (use (reg:HI 11))]\n   \"\"\n   \"#\")\n   \n (define_split /* \"bitcmpqi_z_used\" */\n   [(set (cc0)\n-\t(and:QI (match_operand:QI 0 \"tst_operand\" \"d\")\n-\t\t(match_operand:QI 1 \"cmp_operand\" \"m\")))\n-   (use (match_operand:HI 2 \"hard_reg_operand\" \"xy\"))\n+\t(and:QI (match_operand:QI 0 \"tst_operand\" \"d,m\")\n+\t\t(match_operand:QI 1 \"cmp_operand\" \"m,d\")))\n+   (use (match_operand:HI 2 \"hard_reg_operand\" \"xy,xy\"))\n    (use (reg:HI 11))]\n   \"z_replacement_completed == 2\"\n   [(set (mem:HI (pre_dec:HI (reg:HI 3))) (match_dup 2))"}]}