{"sha": "c4d281b29a03c1e7637936434a04e9a419f22c00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRkMjgxYjI5YTAzYzFlNzYzNzkzNjQzNGEwNGU5YTQxOWYyMmMwMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-04-21T11:40:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-04-21T11:40:46Z"}, "message": "cfghooks.h (create_basic_block): Replace with two overloads for RTL and GIMPLE.\n\n2015-04-21  Richard Biener  <rguenther@suse.de>\n\n\t* cfghooks.h (create_basic_block): Replace with two overloads\n\tfor RTL and GIMPLE.\n\t(split_block): Likewise.\n\t* cfghooks.c (split_block): Rename to ...\n\t(split_block_1): ... this.\n\t(split_block): Add two type-safe overloads for RTL and GIMPLE.\n\t(split_block_after_labels): Call split_block_1.\n\t(create_basic_block): Rename to ...\n\t(create_basic_block_1): ... this.\n\t(create_basic_block): Add two type-safe overloads for RTL and GIMPLE.\n\t(create_empty_bb): Call create_basic_block_1.\n\t* cfgrtl.c (fixup_fallthru_exit_predecessor): Use\n\tsplit_block_after_labels.\n\t* omp-low.c (expand_parallel_call): Likewise.\n\t(expand_omp_target): Likewise.\n\t(simd_clone_adjust): Likewise.\n\t* tree-chkp.c (chkp_get_entry_block): Likewise.\n\t* cgraphunit.c (init_lowered_empty_function): Use the GIMPLE\n\tcreate_basic_block overload.\n\t(cgraph_node::expand_thunk): Likewise.\n\t* tree-cfg.c (make_blocks): Likewise.\n\t(handle_abnormal_edges): Likewise.\n\t* tree-inline.c (copy_bb): Likewise.\n\nFrom-SVN: r222264", "tree": {"sha": "c25284f96a167e670591c7a8289f962d38b6e60e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c25284f96a167e670591c7a8289f962d38b6e60e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4d281b29a03c1e7637936434a04e9a419f22c00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d281b29a03c1e7637936434a04e9a419f22c00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4d281b29a03c1e7637936434a04e9a419f22c00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d281b29a03c1e7637936434a04e9a419f22c00/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8409e468a5f94b7577ccfa073f8b859481a86800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8409e468a5f94b7577ccfa073f8b859481a86800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8409e468a5f94b7577ccfa073f8b859481a86800"}], "stats": {"total": 95, "additions": 74, "deletions": 21}, "files": [{"sha": "6970232d8d16b569136a4b9ea8aef8e47555386d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d281b29a03c1e7637936434a04e9a419f22c00/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d281b29a03c1e7637936434a04e9a419f22c00/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4d281b29a03c1e7637936434a04e9a419f22c00", "patch": "@@ -1,3 +1,29 @@\n+2015-04-21  Richard Biener  <rguenther@suse.de>\n+\n+\t* cfghooks.h (create_basic_block): Replace with two overloads\n+\tfor RTL and GIMPLE.\n+\t(split_block): Likewise.\n+\t* cfghooks.c (split_block): Rename to ...\n+\t(split_block_1): ... this.\n+\t(split_block): Add two type-safe overloads for RTL and GIMPLE.\n+\t(split_block_after_labels): Call split_block_1.\n+\t(create_basic_block): Rename to ...\n+\t(create_basic_block_1): ... this.\n+\t(create_basic_block): Add two type-safe overloads for RTL and GIMPLE.\n+\t(create_empty_bb): Call create_basic_block_1.\n+\t* cfgrtl.c (fixup_fallthru_exit_predecessor): Use\n+\tsplit_block_after_labels.\n+\t* omp-low.c (expand_parallel_call): Likewise.\n+\t(expand_omp_target): Likewise.\n+\t(simd_clone_adjust): Likewise.\n+\t* tree-chkp.c (chkp_get_entry_block): Likewise.\n+\t* cgraphunit.c (init_lowered_empty_function): Use the GIMPLE\n+\tcreate_basic_block overload.\n+\t(cgraph_node::expand_thunk): Likewise.\n+\t* tree-cfg.c (make_blocks): Likewise.\n+\t(handle_abnormal_edges): Likewise.\n+\t* tree-inline.c (copy_bb): Likewise.\n+\n 2015-04-21  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.md (*<NLOGICAL:optab>_one_cmplsidi3_ze):"}, {"sha": "fc23edbd8820003ff12346952a3fd5e2cd5e8aba", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d281b29a03c1e7637936434a04e9a419f22c00/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d281b29a03c1e7637936434a04e9a419f22c00/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=c4d281b29a03c1e7637936434a04e9a419f22c00", "patch": "@@ -505,8 +505,8 @@ redirect_edge_and_branch_force (edge e, basic_block dest)\n    the labels).  If I is NULL, splits just after labels.  The newly created edge\n    is returned.  The new basic block is created just after the old one.  */\n \n-edge\n-split_block (basic_block bb, void *i)\n+static edge\n+split_block_1 (basic_block bb, void *i)\n {\n   basic_block new_bb;\n   edge res;\n@@ -550,12 +550,24 @@ split_block (basic_block bb, void *i)\n   return res;\n }\n \n+edge\n+split_block (basic_block bb, gimple i)\n+{\n+  return split_block_1 (bb, i);\n+}\n+\n+edge\n+split_block (basic_block bb, rtx i)\n+{\n+  return split_block_1 (bb, i);\n+}\n+\n /* Splits block BB just after labels.  The newly created edge is returned.  */\n \n edge\n split_block_after_labels (basic_block bb)\n {\n-  return split_block (bb, NULL);\n+  return split_block_1 (bb, NULL);\n }\n \n /* Moves block BB immediately after block AFTER.  Returns false if the\n@@ -696,8 +708,8 @@ split_edge (edge e)\n    HEAD and END are the first and the last statement belonging\n    to the block.  If both are NULL, an empty block is created.  */\n \n-basic_block\n-create_basic_block (void *head, void *end, basic_block after)\n+static basic_block\n+create_basic_block_1 (void *head, void *end, basic_block after)\n {\n   basic_block ret;\n \n@@ -714,12 +726,25 @@ create_basic_block (void *head, void *end, basic_block after)\n   return ret;\n }\n \n+basic_block\n+create_basic_block (gimple_seq seq, basic_block after)\n+{\n+  return create_basic_block_1 (seq, NULL, after);\n+}\n+\n+basic_block\n+create_basic_block (rtx head, rtx end, basic_block after)\n+{\n+  return create_basic_block_1 (head, end, after);\n+}\n+\n+\n /* Creates an empty basic block just after basic block AFTER.  */\n \n basic_block\n create_empty_bb (basic_block after)\n {\n-  return create_basic_block (NULL, NULL, after);\n+  return create_basic_block_1 (NULL, NULL, after);\n }\n \n /* Checks whether we may merge blocks BB1 and BB2.  */"}, {"sha": "a8fbe5d8d303ba53859731d5ed404d502fb2a591", "filename": "gcc/cfghooks.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d281b29a03c1e7637936434a04e9a419f22c00/gcc%2Fcfghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d281b29a03c1e7637936434a04e9a419f22c00/gcc%2Fcfghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.h?ref=c4d281b29a03c1e7637936434a04e9a419f22c00", "patch": "@@ -196,12 +196,14 @@ extern edge redirect_edge_succ_nodup (edge, basic_block);\n extern bool can_remove_branch_p (const_edge);\n extern void remove_branch (edge);\n extern void remove_edge (edge);\n-extern edge split_block (basic_block, void *);\n+extern edge split_block (basic_block, rtx);\n+extern edge split_block (basic_block, gimple);\n extern edge split_block_after_labels (basic_block);\n extern bool move_block_after (basic_block, basic_block);\n extern void delete_basic_block (basic_block);\n extern basic_block split_edge (edge);\n-extern basic_block create_basic_block (void *, void *, basic_block);\n+extern basic_block create_basic_block (rtx, rtx, basic_block);\n+extern basic_block create_basic_block (gimple_seq, basic_block);\n extern basic_block create_empty_bb (basic_block);\n extern bool can_merge_blocks_p (basic_block, basic_block);\n extern void merge_blocks (basic_block, basic_block);"}, {"sha": "633c7626de64396de10d4eba1078c68f53d897ef", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d281b29a03c1e7637936434a04e9a419f22c00/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d281b29a03c1e7637936434a04e9a419f22c00/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=c4d281b29a03c1e7637936434a04e9a419f22c00", "patch": "@@ -4047,7 +4047,7 @@ fixup_fallthru_exit_predecessor (void)\n \t edge, we have to split that block.  */\n       if (c == bb)\n \t{\n-\t  bb = split_block (bb, NULL)->dest;\n+\t  bb = split_block_after_labels (bb)->dest;\n \t  bb->aux = c->aux;\n \t  c->aux = bb;\n \t  BB_FOOTER (bb) = BB_FOOTER (c);"}, {"sha": "0a50f61a384e2a939f024a66562c3373e4074de1", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d281b29a03c1e7637936434a04e9a419f22c00/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d281b29a03c1e7637936434a04e9a419f22c00/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=c4d281b29a03c1e7637936434a04e9a419f22c00", "patch": "@@ -1373,7 +1373,7 @@ init_lowered_empty_function (tree decl, bool in_ssa, gcov_type count)\n   ENTRY_BLOCK_PTR_FOR_FN (cfun)->frequency = REG_BR_PROB_BASE;\n   EXIT_BLOCK_PTR_FOR_FN (cfun)->count = count;\n   EXIT_BLOCK_PTR_FOR_FN (cfun)->frequency = REG_BR_PROB_BASE;\n-  bb = create_basic_block (NULL, (void *) 0, ENTRY_BLOCK_PTR_FOR_FN (cfun));\n+  bb = create_basic_block (NULL, ENTRY_BLOCK_PTR_FOR_FN (cfun));\n   bb->count = count;\n   bb->frequency = BB_FREQ_MAX;\n   e = make_edge (ENTRY_BLOCK_PTR_FOR_FN (cfun), bb, EDGE_FALLTHRU);\n@@ -1726,13 +1726,13 @@ cgraph_node::expand_thunk (bool output_asm_thunks, bool force_gimple_thunk)\n \t\t     protect against NULL.  We know there will be an\n \t\t     adjustment, because that's why we're emitting a\n \t\t     thunk.  */\n-\t\t  then_bb = create_basic_block (NULL, (void *) 0, bb);\n+\t\t  then_bb = create_basic_block (NULL, bb);\n \t\t  then_bb->count = count - count / 16;\n \t\t  then_bb->frequency = BB_FREQ_MAX - BB_FREQ_MAX / 16;\n-\t\t  return_bb = create_basic_block (NULL, (void *) 0, then_bb);\n+\t\t  return_bb = create_basic_block (NULL, then_bb);\n \t\t  return_bb->count = count;\n \t\t  return_bb->frequency = BB_FREQ_MAX;\n-\t\t  else_bb = create_basic_block (NULL, (void *) 0, else_bb);\n+\t\t  else_bb = create_basic_block (NULL, else_bb);\n \t\t  then_bb->count = count / 16;\n \t\t  then_bb->frequency = BB_FREQ_MAX / 16;\n \t\t  add_bb_to_loop (then_bb, bb->loop_father);"}, {"sha": "34e2e5c9ef1118f02a1dd108549c5a8dece31ba4", "filename": "gcc/omp-low.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d281b29a03c1e7637936434a04e9a419f22c00/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d281b29a03c1e7637936434a04e9a419f22c00/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=c4d281b29a03c1e7637936434a04e9a419f22c00", "patch": "@@ -4937,7 +4937,7 @@ expand_parallel_call (struct omp_region *region, basic_block bb,\n \t      tmp_join = tmp_var;\n \t    }\n \n-\t  e = split_block (bb, NULL);\n+\t  e = split_block_after_labels (bb);\n \t  cond_bb = e->src;\n \t  bb = e->dest;\n \t  remove_edge (e);\n@@ -9052,7 +9052,7 @@ expand_omp_target (struct omp_region *region)\n \n       tmp_var = create_tmp_var (TREE_TYPE (device));\n       if (offloaded)\n-\te = split_block (new_bb, NULL);\n+\te = split_block_after_labels (new_bb);\n       else\n \t{\n \t  gsi = gsi_last_bb (new_bb);\n@@ -13339,7 +13339,7 @@ simd_clone_adjust (struct cgraph_node *node)\n   e = split_block (incr_bb, gsi_stmt (gsi));\n   basic_block latch_bb = e->dest;\n   basic_block new_exit_bb;\n-  new_exit_bb = split_block (latch_bb, NULL)->dest;\n+  new_exit_bb = split_block_after_labels (latch_bb)->dest;\n   loop->latch = latch_bb;\n \n   redirect_edge_succ (FALLTHRU_EDGE (latch_bb), body_bb);"}, {"sha": "988ab2af91b71efdcf496ec790d3ba0b6021203d", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d281b29a03c1e7637936434a04e9a419f22c00/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d281b29a03c1e7637936434a04e9a419f22c00/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=c4d281b29a03c1e7637936434a04e9a419f22c00", "patch": "@@ -542,7 +542,7 @@ make_blocks_1 (gimple_seq seq, basic_block bb)\n \t{\n \t  if (!first_stmt_of_seq)\n \t    gsi_split_seq_before (&i, &seq);\n-\t  bb = create_basic_block (seq, NULL, bb);\n+\t  bb = create_basic_block (seq, bb);\n \t  start_new_block = false;\n \t}\n \n@@ -748,7 +748,7 @@ handle_abnormal_edges (basic_block *dispatcher_bbs,\n \t}\n \n       /* Create the dispatcher bb.  */\n-      *dispatcher = create_basic_block (NULL, NULL, for_bb);\n+      *dispatcher = create_basic_block (NULL, for_bb);\n       if (computed_goto)\n \t{\n \t  /* Factor computed gotos into a common computed goto site.  Also"}, {"sha": "288470bbe576d8be4780babf76af58f949efa560", "filename": "gcc/tree-chkp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d281b29a03c1e7637936434a04e9a419f22c00/gcc%2Ftree-chkp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d281b29a03c1e7637936434a04e9a419f22c00/gcc%2Ftree-chkp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chkp.c?ref=c4d281b29a03c1e7637936434a04e9a419f22c00", "patch": "@@ -1071,7 +1071,8 @@ static basic_block\n chkp_get_entry_block (void)\n {\n   if (!entry_block)\n-    entry_block = split_block (ENTRY_BLOCK_PTR_FOR_FN (cfun), NULL)->dest;\n+    entry_block\n+      = split_block_after_labels (ENTRY_BLOCK_PTR_FOR_FN (cfun))->dest;\n \n   return entry_block;\n }"}, {"sha": "71d75d9df513fe1e548ec0f0b1af856dbad86a18", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d281b29a03c1e7637936434a04e9a419f22c00/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d281b29a03c1e7637936434a04e9a419f22c00/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=c4d281b29a03c1e7637936434a04e9a419f22c00", "patch": "@@ -1761,8 +1761,7 @@ copy_bb (copy_body_data *id, basic_block bb, int frequency_scale,\n \n   /* create_basic_block() will append every new block to\n      basic_block_info automatically.  */\n-  copy_basic_block = create_basic_block (NULL, (void *) 0,\n-                                         (basic_block) prev->aux);\n+  copy_basic_block = create_basic_block (NULL, (basic_block) prev->aux);\n   copy_basic_block->count = apply_scale (bb->count, count_scale);\n \n   /* We are going to rebuild frequencies from scratch.  These values"}]}