{"sha": "432ebb1dea041cce8322e78cb394d41970387bae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMyZWJiMWRlYTA0MWNjZTgzMjJlNzhjYjM5NGQ0MTk3MDM4N2JhZQ==", "commit": {"author": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2017-08-30T14:50:17Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2017-08-30T14:50:17Z"}, "message": "rs6000.c (rs6000_expand_binop_builtin): Revert back to if statements, including unpack.\n\n        * config/rs6000/rs6000.c (rs6000_expand_binop_builtin): Revert\n        back to if statements, including unpack.\n\nFrom-SVN: r251535", "tree": {"sha": "de31c9862061410ec294b6829d846942fb9d6047", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de31c9862061410ec294b6829d846942fb9d6047"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/432ebb1dea041cce8322e78cb394d41970387bae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/432ebb1dea041cce8322e78cb394d41970387bae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/432ebb1dea041cce8322e78cb394d41970387bae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/432ebb1dea041cce8322e78cb394d41970387bae/comments", "author": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "62663034afa8c50adf7128eb459999a8d70b665d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62663034afa8c50adf7128eb459999a8d70b665d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62663034afa8c50adf7128eb459999a8d70b665d"}], "stats": {"total": 68, "additions": 36, "deletions": 32}, "files": [{"sha": "d87d910964baf3ece3ee7f85e9a6e7fa99acf1fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432ebb1dea041cce8322e78cb394d41970387bae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432ebb1dea041cce8322e78cb394d41970387bae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=432ebb1dea041cce8322e78cb394d41970387bae", "patch": "@@ -1,3 +1,8 @@\n+2017-08-30  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_expand_binop_builtin): Revert\n+\tback to if statements, including unpack.\n+\n 2017-08-30  Martin Liska  <mliska@suse.cz>\n \n \tPR inline-asm/82001"}, {"sha": "9df7705a42a9bee26ecabb3acc91ff0dc56c31d5", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 31, "deletions": 32, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432ebb1dea041cce8322e78cb394d41970387bae/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432ebb1dea041cce8322e78cb394d41970387bae/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=432ebb1dea041cce8322e78cb394d41970387bae", "patch": "@@ -14000,17 +14000,14 @@ rs6000_expand_binop_builtin (enum insn_code icode, tree exp, rtx target)\n   if (arg0 == error_mark_node || arg1 == error_mark_node)\n     return const0_rtx;\n \n-  switch (icode)\n+  if (icode == CODE_FOR_altivec_vcfux\n+      || icode == CODE_FOR_altivec_vcfsx\n+      || icode == CODE_FOR_altivec_vctsxs\n+      || icode == CODE_FOR_altivec_vctuxs\n+      || icode == CODE_FOR_altivec_vspltb\n+      || icode == CODE_FOR_altivec_vsplth\n+      || icode == CODE_FOR_altivec_vspltw)\n     {\n-    default:\n-      break;\n-    case CODE_FOR_altivec_vcfux:\n-    case CODE_FOR_altivec_vcfsx:\n-    case CODE_FOR_altivec_vctsxs:\n-    case CODE_FOR_altivec_vctuxs:\n-    case CODE_FOR_altivec_vspltb:\n-    case CODE_FOR_altivec_vsplth:\n-    case CODE_FOR_altivec_vspltw:\n       /* Only allow 5-bit unsigned literals.  */\n       STRIP_NOPS (arg1);\n       if (TREE_CODE (arg1) != INTEGER_CST\n@@ -14019,15 +14016,16 @@ rs6000_expand_binop_builtin (enum insn_code icode, tree exp, rtx target)\n \t  error (\"argument 2 must be a 5-bit unsigned literal\");\n \t  return CONST0_RTX (tmode);\n \t}\n-      break;\n-    case CODE_FOR_dfptstsfi_eq_dd:\n-    case CODE_FOR_dfptstsfi_lt_dd:\n-    case CODE_FOR_dfptstsfi_gt_dd:\n-    case CODE_FOR_dfptstsfi_unordered_dd:\n-    case CODE_FOR_dfptstsfi_eq_td:\n-    case CODE_FOR_dfptstsfi_lt_td:\n-    case CODE_FOR_dfptstsfi_gt_td:\n-    case CODE_FOR_dfptstsfi_unordered_td:\n+    }\n+  else if (icode == CODE_FOR_dfptstsfi_eq_dd\n+      || icode == CODE_FOR_dfptstsfi_lt_dd\n+      || icode == CODE_FOR_dfptstsfi_gt_dd\n+      || icode == CODE_FOR_dfptstsfi_unordered_dd\n+      || icode == CODE_FOR_dfptstsfi_eq_td\n+      || icode == CODE_FOR_dfptstsfi_lt_td\n+      || icode == CODE_FOR_dfptstsfi_gt_td\n+      || icode == CODE_FOR_dfptstsfi_unordered_td)\n+    {\n       /* Only allow 6-bit unsigned literals.  */\n       STRIP_NOPS (arg0);\n       if (TREE_CODE (arg0) != INTEGER_CST\n@@ -14036,12 +14034,13 @@ rs6000_expand_binop_builtin (enum insn_code icode, tree exp, rtx target)\n \t  error (\"argument 1 must be a 6-bit unsigned literal\");\n \t  return CONST0_RTX (tmode);\n \t}\n-      break;\n-    case CODE_FOR_xststdcqp:\n-    case CODE_FOR_xststdcdp:\n-    case CODE_FOR_xststdcsp:\n-    case CODE_FOR_xvtstdcdp:\n-    case CODE_FOR_xvtstdcsp:\n+    }\n+  else if (icode == CODE_FOR_xststdcqp\n+\t   || icode == CODE_FOR_xststdcdp\n+\t   || icode == CODE_FOR_xststdcsp\n+\t   || icode == CODE_FOR_xvtstdcdp\n+\t   || icode == CODE_FOR_xvtstdcsp)\n+    {\n       /* Only allow 7-bit unsigned literals. */\n       STRIP_NOPS (arg1);\n       if (TREE_CODE (arg1) != INTEGER_CST\n@@ -14050,12 +14049,13 @@ rs6000_expand_binop_builtin (enum insn_code icode, tree exp, rtx target)\n \t  error (\"argument 2 must be a 7-bit unsigned literal\");\n \t  return CONST0_RTX (tmode);\n \t}\n-      break;\n-    case CODE_FOR_unpackv1ti:\n-    case CODE_FOR_unpackkf:\n-    case CODE_FOR_unpacktf:\n-    case CODE_FOR_unpackif:\n-    case CODE_FOR_unpacktd:\n+    }\n+  else if (icode == CODE_FOR_unpackv1ti\n+\t   || icode == CODE_FOR_unpackkf\n+\t   || icode == CODE_FOR_unpacktf\n+\t   || icode == CODE_FOR_unpackif\n+\t   || icode == CODE_FOR_unpacktd)\n+    {\n       /* Only allow 1-bit unsigned literals. */\n       STRIP_NOPS (arg1);\n       if (TREE_CODE (arg1) != INTEGER_CST\n@@ -14064,7 +14064,6 @@ rs6000_expand_binop_builtin (enum insn_code icode, tree exp, rtx target)\n \t  error (\"argument 2 must be a 1-bit unsigned literal\");\n \t  return CONST0_RTX (tmode);\n \t}\n-      break;\n     }\n \n   if (target == 0"}]}