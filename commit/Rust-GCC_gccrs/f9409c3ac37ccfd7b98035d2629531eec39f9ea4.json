{"sha": "f9409c3ac37ccfd7b98035d2629531eec39f9ea4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk0MDljM2FjMzdjY2ZkN2I5ODAzNWQyNjI5NTMxZWVjMzlmOWVhNA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-02-25T01:45:43Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-02-25T01:45:43Z"}, "message": "(expand_expr, case COMPONENT_REF): Don't fetch unaligned\nfield if we only want its address.\n\nFrom-SVN: r9069", "tree": {"sha": "5f8081da4027499a5810302f183016c5b10cde0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f8081da4027499a5810302f183016c5b10cde0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9409c3ac37ccfd7b98035d2629531eec39f9ea4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9409c3ac37ccfd7b98035d2629531eec39f9ea4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9409c3ac37ccfd7b98035d2629531eec39f9ea4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9409c3ac37ccfd7b98035d2629531eec39f9ea4/comments", "author": null, "committer": null, "parents": [{"sha": "2b10af4fab06f87be08e062974db51cbfa6f2829", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b10af4fab06f87be08e062974db51cbfa6f2829", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b10af4fab06f87be08e062974db51cbfa6f2829"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "cd0472d1cb704e30c1fd14b585f58609f766b154", "filename": "gcc/expr.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9409c3ac37ccfd7b98035d2629531eec39f9ea4/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9409c3ac37ccfd7b98035d2629531eec39f9ea4/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=f9409c3ac37ccfd7b98035d2629531eec39f9ea4", "patch": "@@ -4761,16 +4761,16 @@ expand_expr (exp, target, tmode, modifier)\n \t   (which we know to be the width of a basic mode), then\n \t   storing into memory, and changing the mode to BLKmode.  */\n \tif (mode1 == VOIDmode\n-\t    || (mode1 != BLKmode && ! direct_load[(int) mode1]\n-\t\t&& modifier != EXPAND_CONST_ADDRESS\n-\t\t&& modifier != EXPAND_SUM && modifier != EXPAND_INITIALIZER)\n \t    || GET_CODE (op0) == REG || GET_CODE (op0) == SUBREG\n-\t    /* If the field isn't aligned enough to fetch as a memref,\n-\t       fetch it as a bit field.  */\n-\t    || (SLOW_UNALIGNED_ACCESS\n-\t\t&& TYPE_ALIGN (TREE_TYPE (tem)) < GET_MODE_ALIGNMENT (mode))\n-\t    || (SLOW_UNALIGNED_ACCESS\n-\t\t&& bitpos % GET_MODE_ALIGNMENT (mode) != 0))\n+\t    || (modifier != EXPAND_CONST_ADDRESS\n+\t\t&& modifier != EXPAND_SUM\n+\t\t&& modifier != EXPAND_INITIALIZER\n+\t\t&& ((mode1 != BLKmode && ! direct_load[(int) mode1])\n+\t\t    /* If the field isn't aligned enough to fetch as a memref,\n+\t\t       fetch it as a bit field.  */\n+\t\t    || (SLOW_UNALIGNED_ACCESS\n+\t\t\t&& ((TYPE_ALIGN (TREE_TYPE (tem)) < GET_MODE_ALIGNMENT (mode))\n+\t\t\t    || (bitpos % GET_MODE_ALIGNMENT (mode) != 0))))))\n \t  {\n \t    enum machine_mode ext_mode = mode;\n "}]}