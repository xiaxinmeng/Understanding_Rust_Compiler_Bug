{"sha": "9c5a3a8d78b8767ae6120216a55b39d9dc552b4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM1YTNhOGQ3OGI4NzY3YWU2MTIwMjE2YTU1YjM5ZDlkYzU1MmI0Yg==", "commit": {"author": {"name": "Samuel Tardieu", "email": "sam@rfc1149.net", "date": "2007-11-28T20:44:58Z"}, "committer": {"name": "Samuel Tardieu", "email": "sam@gcc.gnu.org", "date": "2007-11-28T20:44:58Z"}, "message": "re PR target/17317 (Match Constraints for *movdf_insn fails)\n\n    gcc/ada/\n\tPR ada/17317\n\t* par-ch4.adb (Is_Parameterless_Attribute): New map.\n\t(P_Name, Scan_Apostrophe block): Parse left parenthesis following\n\tattribute name or not depending on the new map.\n\n\t* sem-attr.adb (Analyze_Attribute): Parameterless attributes\n\treturning a string or a type will not be called with improper\n\targuments.\n\n\t* sem-attr.ads (Attribute_Class_Array): Move to snames.ads.\n\n\t* snames.ads (Attribute_Class_Array): Moved from sem-attr.ads.\n\n    gcc/testsuite/\n\tPR ada/17317\n\t* gnat.dg/specs/attribute_parsing.ads: New test.\n\nFrom-SVN: r130496", "tree": {"sha": "7df3a9ececf0759cf5eba9cbf1f97ab3bf52be14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7df3a9ececf0759cf5eba9cbf1f97ab3bf52be14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c5a3a8d78b8767ae6120216a55b39d9dc552b4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c5a3a8d78b8767ae6120216a55b39d9dc552b4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c5a3a8d78b8767ae6120216a55b39d9dc552b4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c5a3a8d78b8767ae6120216a55b39d9dc552b4b/comments", "author": {"login": "samueltardieu", "id": 44656, "node_id": "MDQ6VXNlcjQ0NjU2", "avatar_url": "https://avatars.githubusercontent.com/u/44656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samueltardieu", "html_url": "https://github.com/samueltardieu", "followers_url": "https://api.github.com/users/samueltardieu/followers", "following_url": "https://api.github.com/users/samueltardieu/following{/other_user}", "gists_url": "https://api.github.com/users/samueltardieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/samueltardieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samueltardieu/subscriptions", "organizations_url": "https://api.github.com/users/samueltardieu/orgs", "repos_url": "https://api.github.com/users/samueltardieu/repos", "events_url": "https://api.github.com/users/samueltardieu/events{/privacy}", "received_events_url": "https://api.github.com/users/samueltardieu/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "39a974168f6929d8087c8f0eacc8a5cd01555532", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39a974168f6929d8087c8f0eacc8a5cd01555532", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39a974168f6929d8087c8f0eacc8a5cd01555532"}], "stats": {"total": 143, "additions": 59, "deletions": 84}, "files": [{"sha": "7b7383cf96def2d377abda40dadbd76c68ce5294", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5a3a8d78b8767ae6120216a55b39d9dc552b4b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5a3a8d78b8767ae6120216a55b39d9dc552b4b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9c5a3a8d78b8767ae6120216a55b39d9dc552b4b", "patch": "@@ -4,6 +4,19 @@\n \t* par-ch3.adb (P_Variant_Part): Signal an error when anything other\n \tthan an identifier is used after \"case\" in a variant_part.\n \n+\tPR ada/17317\n+\t* par-ch4.adb (Is_Parameterless_Attribute): New map.\n+\t(P_Name, Scan_Apostrophe block): Parse left parenthesis following\n+\tattribute name or not depending on the new map.\n+\n+\t* sem-attr.adb (Analyze_Attribute): Parameterless attributes\n+\treturning a string or a type will not be called with improper\n+\targuments.\n+\n+\t* sem-attr.ads (Attribute_Class_Array): Move to snames.ads.\n+\n+\t* snames.ads (Attribute_Class_Array): Moved from sem-attr.ads.\n+\n 2007-11-26  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n         PR 34081/C++"}, {"sha": "ee63c42f5510dbe49c475ccb91d57a26285bcc13", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5a3a8d78b8767ae6120216a55b39d9dc552b4b/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5a3a8d78b8767ae6120216a55b39d9dc552b4b/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=9c5a3a8d78b8767ae6120216a55b39d9dc552b4b", "patch": "@@ -32,6 +32,25 @@ with Stringt; use Stringt;\n separate (Par)\n package body Ch4 is\n \n+   ---------------\n+   -- Local map --\n+   ---------------\n+\n+   Is_Parameterless_Attribute : constant Attribute_Class_Array :=\n+     (Attribute_Body_Version => True,\n+      Attribute_External_Tag => True,\n+      Attribute_Img          => True,\n+      Attribute_Version      => True,\n+      Attribute_Base         => True,\n+      Attribute_Class        => True,\n+      Attribute_Stub_Type    => True,\n+      others                 => False);\n+   --  This map contains True for parameterless attributes that return a\n+   --  string or a type. For those attributes, a left parenthesis after\n+   --  the attribute should not be analyzed as the beginning of a parameters\n+   --  list because it may denote a slice operation (X'Img (1 .. 2)) or\n+   --  a type conversion (X'Class (Y)).\n+\n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n@@ -486,7 +505,10 @@ package body Ch4 is\n \n             --  Scan attribute arguments/designator\n \n-            if Token = Tok_Left_Paren then\n+            if Token = Tok_Left_Paren\n+                 and then\n+               not Is_Parameterless_Attribute (Get_Attribute_Id (Attr_Name))\n+            then\n                Set_Expressions (Name_Node, New_List);\n                Scan; -- past left paren\n "}, {"sha": "9821b6f10c3367c0554cb9a76d9f5bb3842285bd", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 8, "deletions": 80, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5a3a8d78b8767ae6120216a55b39d9dc552b4b/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5a3a8d78b8767ae6120216a55b39d9dc552b4b/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=9c5a3a8d78b8767ae6120216a55b39d9dc552b4b", "patch": "@@ -2188,7 +2188,7 @@ package body Sem_Attr is\n          Typ : Entity_Id;\n \n       begin\n-         Check_Either_E0_Or_E1;\n+         Check_E0;\n          Find_Type (P);\n          Typ := Entity (P);\n \n@@ -2207,37 +2207,9 @@ package body Sem_Attr is\n          end if;\n \n          Set_Etype (N, Base_Type (Entity (P)));\n-\n-         --  If we have an expression present, then really this is a conversion\n-         --  and the tree must be reformed. Note that this is one of the cases\n-         --  in which we do a replace rather than a rewrite, because the\n-         --  original tree is junk.\n-\n-         if Present (E1) then\n-            Replace (N,\n-              Make_Type_Conversion (Loc,\n-                Subtype_Mark =>\n-                  Make_Attribute_Reference (Loc,\n-                    Prefix => Prefix (N),\n-                    Attribute_Name => Name_Base),\n-                Expression => Relocate_Node (E1)));\n-\n-            --  E1 may be overloaded, and its interpretations preserved\n-\n-            Save_Interps (E1, Expression (N));\n-            Analyze (N);\n-\n-         --  For other cases, set the proper type as the entity of the\n-         --  attribute reference, and then rewrite the node to be an\n-         --  occurrence of the referenced base type. This way, no one\n-         --  else in the compiler has to worry about the base attribute.\n-\n-         else\n-            Set_Entity (N, Base_Type (Entity (P)));\n-            Rewrite (N,\n-              New_Reference_To (Entity (N), Loc));\n-            Analyze (N);\n-         end if;\n+         Set_Entity (N, Base_Type (Entity (P)));\n+         Rewrite (N, New_Reference_To (Entity (N), Loc));\n+         Analyze (N);\n       end Base;\n \n       ---------\n@@ -2377,55 +2349,10 @@ package body Sem_Attr is\n       -- Class --\n       -----------\n \n-      when Attribute_Class => Class : declare\n-         P : constant Entity_Id := Prefix (N);\n-\n-      begin\n+      when Attribute_Class =>\n          Check_Restriction (No_Dispatch, N);\n-         Check_Either_E0_Or_E1;\n-\n-         --  If we have an expression present, then really this is a conversion\n-         --  and the tree must be reformed into a proper conversion. This is a\n-         --  Replace rather than a Rewrite, because the original tree is junk.\n-         --  If expression is overloaded, propagate interpretations to new one.\n-\n-         if Present (E1) then\n-            Replace (N,\n-              Make_Type_Conversion (Loc,\n-                Subtype_Mark =>\n-                  Make_Attribute_Reference (Loc,\n-                    Prefix => P,\n-                    Attribute_Name => Name_Class),\n-                Expression => Relocate_Node (E1)));\n-\n-            Save_Interps (E1, Expression (N));\n-\n-            --  Ada 2005 (AI-251): In case of abstract interfaces we have to\n-            --  analyze and resolve the type conversion to generate the code\n-            --  that displaces the reference to the base of the object.\n-\n-            if Is_Interface (Etype (P))\n-              or else Is_Interface (Etype (E1))\n-            then\n-               Analyze_And_Resolve (N, Etype (P));\n-\n-               --  However, the attribute is a name that occurs in a context\n-               --  that imposes its own type. Leave the result unanalyzed,\n-               --  so that type checking with the context type take place.\n-               --  on the new conversion node, otherwise Resolve is a noop.\n-\n-               Set_Analyzed (N, False);\n-\n-            else\n-               Analyze (N);\n-            end if;\n-\n-         --  Otherwise we just need to find the proper type\n-\n-         else\n-            Find_Type (N);\n-         end if;\n-      end Class;\n+         Check_E0;\n+         Find_Type (N);\n \n       ------------------\n       -- Code_Address --\n@@ -3018,6 +2945,7 @@ package body Sem_Attr is\n \n       when Attribute_Img => Img :\n       begin\n+         Check_E0;\n          Set_Etype (N, Standard_String);\n \n          if not Is_Scalar_Type (P_Type)"}, {"sha": "45cb8e0a6fa05a4b99c70ff121d60a59891079c9", "filename": "gcc/ada/sem_attr.ads", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5a3a8d78b8767ae6120216a55b39d9dc552b4b/gcc%2Fada%2Fsem_attr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5a3a8d78b8767ae6120216a55b39d9dc552b4b/gcc%2Fada%2Fsem_attr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.ads?ref=9c5a3a8d78b8767ae6120216a55b39d9dc552b4b", "patch": "@@ -38,9 +38,6 @@ with Types;   use Types;\n \n package Sem_Attr is\n \n-   type Attribute_Class_Array is array (Attribute_Id) of Boolean;\n-   --  Type used to build attribute classification flag arrays\n-\n    -----------------------------------------\n    -- Implementation Dependent Attributes --\n    -----------------------------------------"}, {"sha": "f2e7be91568af44465c31f0fcbc5bc113066df73", "filename": "gcc/ada/snames.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5a3a8d78b8767ae6120216a55b39d9dc552b4b/gcc%2Fada%2Fsnames.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5a3a8d78b8767ae6120216a55b39d9dc552b4b/gcc%2Fada%2Fsnames.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads?ref=9c5a3a8d78b8767ae6120216a55b39d9dc552b4b", "patch": "@@ -1521,6 +1521,13 @@ package Snames is\n       Task_Dispatching_FIFO_Within_Priorities);\n    --  Id values used to identify task dispatching policies\n \n+   ------------------\n+   -- Helper types --\n+   ------------------\n+\n+   type Attribute_Class_Array is array (Attribute_Id) of Boolean;\n+   --  Type used to build attribute classification flag arrays\n+\n    -----------------\n    -- Subprograms --\n    -----------------"}, {"sha": "692ca74a395b05e8445ec8f5ce5c803ab117811e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5a3a8d78b8767ae6120216a55b39d9dc552b4b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5a3a8d78b8767ae6120216a55b39d9dc552b4b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9c5a3a8d78b8767ae6120216a55b39d9dc552b4b", "patch": "@@ -3,6 +3,9 @@\n \tPR ada/15803\n \t* gnat.dg/specs/variant_part.ads: New test.\n \n+\tPR ada/17317\n+\t* gnat.dg/specs/attribute_parsing.ads: New test.\n+\n 2007-11-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/34140"}, {"sha": "7722a9ae1ef57dbf77531763da95be6bab88c0f3", "filename": "gcc/testsuite/gnat.dg/specs/attribute_parsing.ads", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5a3a8d78b8767ae6120216a55b39d9dc552b4b/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fattribute_parsing.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5a3a8d78b8767ae6120216a55b39d9dc552b4b/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fattribute_parsing.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fattribute_parsing.ads?ref=9c5a3a8d78b8767ae6120216a55b39d9dc552b4b", "patch": "@@ -0,0 +1,5 @@\n+-- { dg-do compile }\n+package Attribute_Parsing is\n+   I : constant Integer := 12345;\n+   S : constant String := I'Img (1 .. 2);\n+end Attribute_Parsing;"}]}