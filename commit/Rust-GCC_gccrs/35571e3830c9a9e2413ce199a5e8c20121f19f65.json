{"sha": "35571e3830c9a9e2413ce199a5e8c20121f19f65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU1NzFlMzgzMGM5YTllMjQxM2NlMTk5YTVlOGMyMDEyMWYxOWY2NQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-11-23T22:43:24Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-11-23T22:43:24Z"}, "message": "(dbxout_type): Handle need for name of a RECORD_TYPE when it has none.\n\nFrom-SVN: r2778", "tree": {"sha": "e3652a92d147026315f8b43a9d909499ab872c01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3652a92d147026315f8b43a9d909499ab872c01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35571e3830c9a9e2413ce199a5e8c20121f19f65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35571e3830c9a9e2413ce199a5e8c20121f19f65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35571e3830c9a9e2413ce199a5e8c20121f19f65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35571e3830c9a9e2413ce199a5e8c20121f19f65/comments", "author": null, "committer": null, "parents": [{"sha": "101e8cc174524b735b09bc2434d39ba197eb0b37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/101e8cc174524b735b09bc2434d39ba197eb0b37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/101e8cc174524b735b09bc2434d39ba197eb0b37"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "fe7887d3bf7767b1448a811119970269480d79bc", "filename": "gcc/dbxout.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35571e3830c9a9e2413ce199a5e8c20121f19f65/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35571e3830c9a9e2413ce199a5e8c20121f19f65/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=35571e3830c9a9e2413ce199a5e8c20121f19f65", "patch": "@@ -854,6 +854,7 @@ dbxout_type (type, full, show_arg_types)\n      int show_arg_types;\n {\n   register tree tem;\n+  static int anonymous_type_number = 0;\n \n   /* If there was an input error and we don't really have a type,\n      avoid crashing and write something that is at least valid\n@@ -1081,7 +1082,10 @@ dbxout_type (type, full, show_arg_types)\n \t    if (TREE_CODE (TYPE_NAME (type)) != IDENTIFIER_NODE)\n \t      abort ();\n #endif\n-\t    dbxout_type_name (type);\n+\t    if (TYPE_NAME (type) != 0)\n+\t      dbxout_type_name (type);\n+\t    else\n+\t      fprintf (asmfile, \"$$%d\", anonymous_type_number++);\n \t    fprintf (asmfile, \":\");\n \t    typevec[TYPE_SYMTAB_ADDRESS (type)] = TYPE_XREF;\n \t    break;"}]}