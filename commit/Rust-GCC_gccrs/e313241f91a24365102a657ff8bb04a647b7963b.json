{"sha": "e313241f91a24365102a657ff8bb04a647b7963b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMxMzI0MWY5MWEyNDM2NTEwMmE2NTdmZjhiYjA0YTY0N2I3OTYzYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-01-16T16:55:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-01-16T16:55:27Z"}, "message": "re PR fortran/46625 (libquadmath: Mangle internal symbols; rename __float128 <-> string functions)\n\n\tPR fortran/46625\n\t* quadmath.map (QUADMATH_1.0): Remove quadmath_strtopQ\n\tand quadmath_dtoaq.  Add strtoflt128 and quadmath_flt128tostr.\n\t* quadmath_weak.h (quadmath_strtopQ, quadmath_dtoaq): Remove.\n\t(strtoflt128, quadmath_flt128tostr): Add.\n\t* gdtoa/strtopQ.c (quadmath_strtopQ): Rename to...\n\t(strtoflt128): ... this.  Return __float128, instead of writing\n\tto memory pointed by last argument.\n\t* quadmath.h: Use C style comments instead of C++ style.\n\t(quadmath_strtopQ, quadmath_dtoaq): Remove prototypes.\n\t(strtoflt128, quadmath_flt128tostr): Add prototypes.\n\t* libquadmath.texi (quadmath_dtoaq): Rename to quadmath_flt128tostr.\n\t(quadmath_strtopQ): Rename to strtoflt128.  Adjust prototype,\n\tadjust examples.\n\t* quadmath_io.c (quadmath_dtoaq): Rename to...\n\t(quadmath_flt128tostr): ... this.\nlibgfortran/\n\t* io/write_float.def (DTOAQ): Use quadmath_flt128tostr\n\tinstead of quadmath_dtoa.\n\t* io/transfer128.c (tmp1, tmp2): New variables, bring in\n\tstrtoflt128 and quadmath_flt128tostr.\n\t(transfer_real128, transfer_real128_write, transfer_complex128,\n\ttransfer_complex128_write): Remove tmp1/tmp2 variables.\n\t* io/read.c (convert_real): Use strtoflt128 instead of\n\tquadmath_strtopQ, adjust for the changed arguments and return\n\tvalue.\n\nFrom-SVN: r168856", "tree": {"sha": "252065baee12c4b6545a47616cc3a36114d3be22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/252065baee12c4b6545a47616cc3a36114d3be22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e313241f91a24365102a657ff8bb04a647b7963b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e313241f91a24365102a657ff8bb04a647b7963b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e313241f91a24365102a657ff8bb04a647b7963b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e313241f91a24365102a657ff8bb04a647b7963b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "327f73c19ef091381ecc8a57dd0bb696732c3f0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/327f73c19ef091381ecc8a57dd0bb696732c3f0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/327f73c19ef091381ecc8a57dd0bb696732c3f0f"}], "stats": {"total": 131, "additions": 74, "deletions": 57}, "files": [{"sha": "1eeeda3b5282dbf48811d778767c64b0204d2dc4", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e313241f91a24365102a657ff8bb04a647b7963b/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e313241f91a24365102a657ff8bb04a647b7963b/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=e313241f91a24365102a657ff8bb04a647b7963b", "patch": "@@ -1,3 +1,16 @@\n+2011-01-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/46625\n+\t* io/write_float.def (DTOAQ): Use quadmath_flt128tostr\n+\tinstead of quadmath_dtoa.\n+\t* io/transfer128.c (tmp1, tmp2): New variables, bring in\n+\tstrtoflt128 and quadmath_flt128tostr.\n+\t(transfer_real128, transfer_real128_write, transfer_complex128,\n+\ttransfer_complex128_write): Remove tmp1/tmp2 variables.\n+\t* io/read.c (convert_real): Use strtoflt128 instead of\n+\tquadmath_strtopQ, adjust for the changed arguments and return\n+\tvalue.\n+\n 2011-01-14  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/47296"}, {"sha": "50b1b408e9bf238952832b57c384698e6701ba94", "filename": "libgfortran/io/read.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e313241f91a24365102a657ff8bb04a647b7963b/libgfortran%2Fio%2Fread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e313241f91a24365102a657ff8bb04a647b7963b/libgfortran%2Fio%2Fread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fread.c?ref=e313241f91a24365102a657ff8bb04a647b7963b", "patch": "@@ -165,7 +165,7 @@ convert_real (st_parameter_dt *dtp, void *dest, const char *buffer, int length)\n #if defined(HAVE_GFC_REAL_16)\n # if defined(GFC_REAL_16_IS_FLOAT128)\n     case 16:\n-      __qmath_(quadmath_strtopQ) (buffer, NULL, dest);\n+      *((GFC_REAL_16*) dest) = __qmath_(strtoflt128) (buffer, NULL);\n       break;\n # elif defined(HAVE_STRTOLD)\n     case 16:"}, {"sha": "5690245234fb4d68335f393e5ae42e3d763c4725", "filename": "libgfortran/io/transfer128.c", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e313241f91a24365102a657ff8bb04a647b7963b/libgfortran%2Fio%2Ftransfer128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e313241f91a24365102a657ff8bb04a647b7963b/libgfortran%2Fio%2Ftransfer128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer128.c?ref=e313241f91a24365102a657ff8bb04a647b7963b", "patch": "@@ -61,48 +61,38 @@ extern void transfer_complex128_write (st_parameter_dt *, void *, int);\n export_proto(transfer_complex128_write);\n \n \n-/* Make sure that libquadmath is pulled in. The functions quadmath_strtopQ\n-   and quadmath_dtoaq are weakly referrenced in convert_real and write_float;\n-   the pointer assignment with USED attribute make sure that there is a\n-   non-weakref dependence if the quadmath functions are used. That avoids\n-   segfault when libquad is statically linked.  */\n+/* Make sure that libquadmath is pulled in. The functions strtoflt128\n+   and quadmath_flt128tostr are weakly referrenced in convert_real and\n+   write_float; the pointer assignment with USED attribute make sure\n+   that there is a non-weakref dependence if the quadmath functions\n+   are used. That avoids segfault when libquadmath is statically linked.  */\n+static void __attribute__((used)) *tmp1 = strtoflt128;\n+static void __attribute__((used)) *tmp2 = quadmath_flt128tostr;\n \n void\n transfer_real128 (st_parameter_dt *dtp, void *p, int kind)\n {\n-  static void __attribute__((used)) *tmp1 = quadmath_strtopQ;\n-  static void __attribute__((used)) *tmp2 = quadmath_dtoaq;\n-\n   transfer_real (dtp, p, kind);\n }\n \n \n void\n transfer_real128_write (st_parameter_dt *dtp, void *p, int kind)\n {\n-  static void __attribute__((used)) *tmp1 = quadmath_strtopQ;\n-  static void __attribute__((used)) *tmp2 = quadmath_dtoaq;\n-\n   transfer_real (dtp, p, kind);\n }\n \n \n void\n transfer_complex128 (st_parameter_dt *dtp, void *p, int kind)\n {\n-  static void __attribute__((used)) *tmp1 = quadmath_strtopQ;\n-  static void __attribute__((used)) *tmp2 = quadmath_dtoaq;\n-\n   transfer_complex (dtp, p, kind);\n }\n \n \n void\n transfer_complex128_write (st_parameter_dt *dtp, void *p, int kind)\n {\n-/*  static void __attribute__((used)) *tmp1 = quadmath_strtopQ;\n-  static void __attribute__((used)) *tmp2 = quadmath_dtoaq;*/\n-\n   transfer_complex_write (dtp, p, kind);\n }\n #endif"}, {"sha": "d5bb3468a6a4f6699e62eef53038a775033920d0", "filename": "libgfortran/io/write_float.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e313241f91a24365102a657ff8bb04a647b7963b/libgfortran%2Fio%2Fwrite_float.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e313241f91a24365102a657ff8bb04a647b7963b/libgfortran%2Fio%2Fwrite_float.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite_float.def?ref=e313241f91a24365102a657ff8bb04a647b7963b", "patch": "@@ -975,7 +975,7 @@ sprintf (buffer, \"%+-#\" STR(MIN_FIELD_WIDTH) \".*\" \\\n \n #if defined(GFC_REAL_16_IS_FLOAT128)\n #define DTOAQ \\\n-__qmath_(quadmath_dtoaq) (buffer, size, ndigits - 1, tmp);\n+__qmath_(quadmath_flt128tostr) (buffer, size, ndigits - 1, tmp);\n #endif\n \n #define WRITE_FLOAT(x,y)\\"}, {"sha": "376dcbe789eaee69642a1ff4f1c5ec6dd2dbbc75", "filename": "libquadmath/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e313241f91a24365102a657ff8bb04a647b7963b/libquadmath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e313241f91a24365102a657ff8bb04a647b7963b/libquadmath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FChangeLog?ref=e313241f91a24365102a657ff8bb04a647b7963b", "patch": "@@ -1,5 +1,22 @@\n 2011-01-16  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR fortran/46625\n+\t* quadmath.map (QUADMATH_1.0): Remove quadmath_strtopQ\n+\tand quadmath_dtoaq.  Add strtoflt128 and quadmath_flt128tostr.\n+\t* quadmath_weak.h (quadmath_strtopQ, quadmath_dtoaq): Remove.\n+\t(strtoflt128, quadmath_flt128tostr): Add.\n+\t* gdtoa/strtopQ.c (quadmath_strtopQ): Rename to...\n+\t(strtoflt128): ... this.  Return __float128, instead of writing\n+\tto memory pointed by last argument.\n+\t* quadmath.h: Use C style comments instead of C++ style.\n+\t(quadmath_strtopQ, quadmath_dtoaq): Remove prototypes.\n+\t(strtoflt128, quadmath_flt128tostr): Add prototypes.\n+\t* libquadmath.texi (quadmath_dtoaq): Rename to quadmath_flt128tostr.\n+\t(quadmath_strtopQ): Rename to strtoflt128.  Adjust prototype,\n+\tadjust examples.\n+\t* quadmath_io.c (quadmath_dtoaq): Rename to...\n+\t(quadmath_flt128tostr): ... this.\n+\n \t* quadmath.h (__quadmath_throw, __quadmath_nth): Define.\n \tUse it for all prototypes.\n "}, {"sha": "0d34c1c045479e4b5bd947ef5df9d407219d80e6", "filename": "libquadmath/gdtoa/strtopQ.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e313241f91a24365102a657ff8bb04a647b7963b/libquadmath%2Fgdtoa%2FstrtopQ.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e313241f91a24365102a657ff8bb04a647b7963b/libquadmath%2Fgdtoa%2FstrtopQ.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fgdtoa%2FstrtopQ.c?ref=e313241f91a24365102a657ff8bb04a647b7963b", "patch": "@@ -49,18 +49,15 @@ THIS SOFTWARE.\n #define _3 0\n #endif\n \n- int\n-#ifdef KR_headers\n-quadmath_strtopQ(s, sp, V) CONST char *s; char **sp; void *V;\n-#else\n-quadmath_strtopQ(CONST char *s, char **sp, void *V)\n-#endif\n+__float128\n+strtoflt128(CONST char *s, char **sp)\n {\n \tstatic FPI fpi0 = { 113, 1-16383-113+1, 32766 - 16383 - 113 + 1, 1, SI };\n \tULong bits[4];\n \tLong exp;\n \tint k;\n-\tULong *L = (ULong*)V;\n+\tunion { __float128 f; ULong L[4]; } u;\n+\tULong *L = &u.L[0];\n #ifdef Honor_FLT_ROUNDS\n #include \"gdtoa_fltrnds.h\"\n #else\n@@ -102,5 +99,5 @@ quadmath_strtopQ(CONST char *s, char **sp, void *V)\n \t  }\n \tif (k & STRTOG_Neg)\n \t\tL[_0] |= 0x80000000L;\n-\treturn k;\n-\t}\n+\treturn u.f;\n+}"}, {"sha": "3dbbe5d63806b15fc38207c3581c53cd732687e5", "filename": "libquadmath/libquadmath.texi", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e313241f91a24365102a657ff8bb04a647b7963b/libquadmath%2Flibquadmath.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e313241f91a24365102a657ff8bb04a647b7963b/libquadmath%2Flibquadmath.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Flibquadmath.texi?ref=e313241f91a24365102a657ff8bb04a647b7963b", "patch": "@@ -198,20 +198,20 @@ The following mathematical functions are available:\n @chapter I/O Library Routines\n \n @menu\n-* @code{quadmath_strtopQ}:  quadmath_strtopQ,  Convert from string\n-* @code{quadmath_dtoaq}:    quadmath_dtoaq,    Convert to string\n+* @code{strtoflt128}:          strtoflt128,          Convert from string\n+* @code{quadmath_flt128tostr}: quadmath_flt128tostr, Convert to string\n @end menu\n \n \n-@node quadmath_strtopQ\n-@section @code{quadmath_strtopQ} --- Convert from string\n+@node strtoflt128\n+@section @code{strtoflt128} --- Convert from string\n \n The function @code{dmath_strtopQ} converts a string into a\n @code{__float128} number.\n \n @table @asis\n @item Syntax\n-@code{int quadmath_strtopQ (const char *s, char **sp, void *V)}\n+@code{__float128 strtoflt128 (const char *s, char **sp)}\n \n @c The return values are defined in gdtoa/gdtoa.h STRTOG_*\n @c However, the values are currently not exported - thus we\n@@ -221,7 +221,6 @@ The function @code{dmath_strtopQ} converts a string into a\n @multitable @columnfractions .15 .70\n @item @var{s}  @tab input string\n @item @var{sp} @tab the address of the next character in the string\n-@item @var{V}  @tab @code{__float128} containing the converted number\n @end multitable\n \n The argument @var{sp} contains, if not @code{NULL}, the address of the\n@@ -234,25 +233,24 @@ next character following the parts of the string, which have been read.\n int main ()\n @{\n   __float128 r;\n-  char str[200];\n \n-  quadmath_strtopQ (\"1.2345678\", NULL, &r);\n+  r = strtoflt128 (\"1.2345678\", NULL);\n \n   return 0;\n @}\n @end smallexample\n @end table\n \n \n-@node quadmath_dtoaq\n-@section @code{quadmath_dtoaq} --- Convert to string\n+@node quadmath_flt128tostr\n+@section @code{quadmath_flt128tostr} --- Convert to string\n \n-The function @code{quadmath_dtoaq} converts a @code{__float128} floating-point\n+The function @code{quadmath_flt128tostr} converts a @code{__float128} floating-point\n number into a string.\n \n @table @asis\n @item Syntax\n-@code{void quadmath_dtoaq (char *s, size_t size, size_t n, __float128 x)}\n+@code{void quadmath_flt128tostr (char *s, size_t size, size_t n, __float128 x)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -273,7 +271,7 @@ int main ()\n \n   r = 2.0q;\n   r = sqrtq(r);\n-  quadmath_dtoaq (str, sizeof (str), 20, r);\n+  quadmath_flt128tostr (str, sizeof (str), 20, r);\n   printf(\"%s\\n\", str);\n   /* Prints: +1.41421356237309504880e+00 */\n   return 0;"}, {"sha": "25ef413991882818ef12381dfa5526a40526571b", "filename": "libquadmath/quadmath.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e313241f91a24365102a657ff8bb04a647b7963b/libquadmath%2Fquadmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e313241f91a24365102a657ff8bb04a647b7963b/libquadmath%2Fquadmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath.h?ref=e313241f91a24365102a657ff8bb04a647b7963b", "patch": "@@ -23,8 +23,8 @@ Boston, MA 02110-1301, USA.  */\n \n #include <stdlib.h>\n \n-// Define the complex type corresponding to __float128\n-// (\"_Complex __float128\" is not allowed)\n+/* Define the complex type corresponding to __float128\n+   (\"_Complex __float128\" is not allowed) */\n typedef _Complex float __attribute__((mode(TC))) __complex128;\n \n #ifdef __cplusplus\n@@ -35,7 +35,7 @@ typedef _Complex float __attribute__((mode(TC))) __complex128;\n # define __quadmath_nth(fct) __attribute__((__nothrow__)) fct\n #endif\n \n-// Prototypes for real functions\n+/* Prototypes for real functions */\n extern __float128 acosq (__float128) __quadmath_throw;\n extern __float128 acoshq (__float128) __quadmath_throw;\n extern __float128 asinq (__float128) __quadmath_throw;\n@@ -103,7 +103,7 @@ extern __float128 y1q (__float128) __quadmath_throw;\n extern __float128 ynq (int, __float128) __quadmath_throw;\n \n \n-// Prototypes for complex functions\n+/* Prototypes for complex functions */\n extern __float128 cabsq (__complex128) __quadmath_throw;\n extern __float128 cargq (__complex128) __quadmath_throw;\n extern __float128 cimagq (__complex128) __quadmath_throw;\n@@ -130,22 +130,22 @@ extern __complex128 ctanq (__complex128) __quadmath_throw;\n extern __complex128 ctanhq (__complex128) __quadmath_throw;\n \n \n-// Prototypes for our I/O functions\n-extern int quadmath_strtopQ (const char *, char **, void *) __quadmath_throw;\n-extern void quadmath_dtoaq (char *, size_t, size_t, __float128)\n+/* Prototypes for string <-> __float128 conversion functions */\n+extern __float128 strtoflt128 (const char *, char **) __quadmath_throw;\n+extern void quadmath_flt128tostr (char *, size_t, size_t, __float128)\n   __quadmath_throw;\n \n \n-// Macros\n+/* Macros */\n #define FLT128_MAX 1.18973149535723176508575932662800702e4932Q\n #define FLT128_MIN 3.36210314311209350626267781732175260e-4932Q\n #define FLT128_EPSILON 1.92592994438723585305597794258492732e-34Q\n #define FLT128_DENORM_MIN 6.475175119438025110924438958227646552e-4966Q\n #define FLT128_MANT_DIG 113\n #define FLT128_MIN_EXP (-16381)\n #define FLT128_MAX_EXP 16384\n-// TODO -- One day, we need to add the following macros:\n-// FLT128_DIG, FLT128_MIN_10_EXP, FLT128_MAX_10_EXP\n+/* TODO -- One day, we need to add the following macros:\n+   FLT128_DIG, FLT128_MIN_10_EXP, FLT128_MAX_10_EXP */\n \n \n #define HUGE_VALQ __builtin_huge_valq()"}, {"sha": "f2ee76baae7348926a4c23a66b38281c806e26b7", "filename": "libquadmath/quadmath.map", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e313241f91a24365102a657ff8bb04a647b7963b/libquadmath%2Fquadmath.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e313241f91a24365102a657ff8bb04a647b7963b/libquadmath%2Fquadmath.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath.map?ref=e313241f91a24365102a657ff8bb04a647b7963b", "patch": "@@ -65,6 +65,7 @@ QUADMATH_1.0 {\n     y0q;\n     y1q;\n     ynq;\n+\n     cabsq;\n     cargq;\n     cimagq;\n@@ -89,8 +90,9 @@ QUADMATH_1.0 {\n     csqrtq;\n     ctanq;\n     ctanhq;\n-    quadmath_strtopQ;\n-    quadmath_dtoaq;\n+\n+    strtoflt128;\n+    quadmath_flt128tostr;\n   local:\n     *;\n };"}, {"sha": "f258f7207634659ffed96c65c14f63ca165699de", "filename": "libquadmath/quadmath_io.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e313241f91a24365102a657ff8bb04a647b7963b/libquadmath%2Fquadmath_io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e313241f91a24365102a657ff8bb04a647b7963b/libquadmath%2Fquadmath_io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath_io.c?ref=e313241f91a24365102a657ff8bb04a647b7963b", "patch": "@@ -101,7 +101,7 @@ format (char * res, const __float128 x, size_t n)\n \n \n void\n-quadmath_dtoaq (char *s, size_t size, size_t n, __float128 x)\n+quadmath_flt128tostr (char *s, size_t size, size_t n, __float128 x)\n {\n   char buffer[1024];\n   memset (buffer, 0, sizeof(buffer));"}, {"sha": "23fef22c7a452df43c024315152c63a5792f1a15", "filename": "libquadmath/quadmath_weak.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e313241f91a24365102a657ff8bb04a647b7963b/libquadmath%2Fquadmath_weak.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e313241f91a24365102a657ff8bb04a647b7963b/libquadmath%2Fquadmath_weak.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath_weak.h?ref=e313241f91a24365102a657ff8bb04a647b7963b", "patch": "@@ -130,8 +130,8 @@ __qmath3 (ctanq)\n __qmath3 (ctanhq)\n \n \n-// Prototypes for our I/O functions\n-__qmath3 (quadmath_strtopQ)\n-__qmath3 (quadmath_dtoaq)\n+// Prototypes for string <-> flt128 conversion functions\n+__qmath3 (strtoflt128)\n+__qmath3 (quadmath_flt128tostr)\n \n #endif"}]}