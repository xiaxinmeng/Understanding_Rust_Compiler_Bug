{"sha": "61b5800161f855eb1028cd76ad200bd0d63b2b77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFiNTgwMDE2MWY4NTVlYjEwMjhjZDc2YWQyMDBiZDBkNjNiMmI3Nw==", "commit": {"author": {"name": "Ben Elliston", "email": "bje@au.ibm.com", "date": "2004-10-27T21:02:16Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2004-10-27T21:02:16Z"}, "message": "params.def (PARAM_SRA_MAX_STRUCTURE_SIZE): New.\n\n\t* params.def (PARAM_SRA_MAX_STRUCTURE_SIZE): New.\n\t(PARAM_SRA_FIELD_STRUCTURE_RATIO): Likewise.\n\t* params.h (SRA_MAX_STRUCTURE_SIZE): New.\n\t(SRA_FIELD_STRUCTURE_RATIO): Likewise.\n\t* tree-sra.c: Include \"params.h\".\n\t(decide_block_copy): Use new parameters.\n\t* doc/invoke.texi (Optimize Options): Document new SRA pass\n\tparameters sra-max-structure-size and sra-field-structure-ratio.\n\n[testsuite]\n\t* gcc.dg/tree-ssa/sra-1.c: Pass --param sra-max-structure-size.\n\nFrom-SVN: r89711", "tree": {"sha": "13fd3cfcb73f6650e4dab5d9115c569183d1183a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13fd3cfcb73f6650e4dab5d9115c569183d1183a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61b5800161f855eb1028cd76ad200bd0d63b2b77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61b5800161f855eb1028cd76ad200bd0d63b2b77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61b5800161f855eb1028cd76ad200bd0d63b2b77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61b5800161f855eb1028cd76ad200bd0d63b2b77/comments", "author": null, "committer": null, "parents": [{"sha": "72111a1f4bb7d88865ee53bdc2fc26db58c534ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72111a1f4bb7d88865ee53bdc2fc26db58c534ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72111a1f4bb7d88865ee53bdc2fc26db58c534ca"}], "stats": {"total": 66, "additions": 63, "deletions": 3}, "files": [{"sha": "8d197339b70c510cd145ad2961affa31ff231608", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b5800161f855eb1028cd76ad200bd0d63b2b77/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b5800161f855eb1028cd76ad200bd0d63b2b77/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61b5800161f855eb1028cd76ad200bd0d63b2b77", "patch": "@@ -1,3 +1,14 @@\n+2004-10-28  Ben Elliston  <bje@au.ibm.com>\n+\n+\t* params.def (PARAM_SRA_MAX_STRUCTURE_SIZE): New.\n+\t(PARAM_SRA_FIELD_STRUCTURE_RATIO): Likewise.\n+\t* params.h (SRA_MAX_STRUCTURE_SIZE): New.\n+\t(SRA_FIELD_STRUCTURE_RATIO): Likewise.\n+\t* tree-sra.c: Include \"params.h\".\n+\t(decide_block_copy): Use new parameters.\n+\t* doc/invoke.texi (Optimize Options): Document new SRA pass\n+\tparameters sra-max-structure-size and sra-field-structure-ratio.\n+\n 2004-10-27  Nicolas Pitre <nico@cam.org>\n \n \t* config/arm/ieee754-df.S (floatdidf): Fix regression with big values."}, {"sha": "ceeae2279aad20ec9a9d80b1cad9099d3f60f245", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b5800161f855eb1028cd76ad200bd0d63b2b77/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b5800161f855eb1028cd76ad200bd0d63b2b77/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=61b5800161f855eb1028cd76ad200bd0d63b2b77", "patch": "@@ -5313,6 +5313,19 @@ In each case, the @var{value} is an integer.  The allowable choices for\n @var{name} are given in the following table:\n \n @table @gcctabopt\n+@item sra-max-structure-size\n+The maximum structure size, in bytes, at which the scalar replacement\n+of aggregates (SRA) optimization will perform block copies.  The\n+default value, 0, implies that GCC will select the most appropriate\n+size itself.\n+\n+@item sra-field-structure-ratio\n+The treshold ratio (as a percentage) between instantiated fields and\n+the complete structure size.  We say that if the ratio of the number\n+of bytes in instantiated fields to the number of bytes in the complete\n+structure exceeds this parameter, then block copies are not used.  The\n+default is 75.\n+\n @item max-crossjump-edges\n The maximum number of incoming edges to consider for crossjumping.\n The algorithm used by @option{-fcrossjumping} is @math{O(N^2)} in"}, {"sha": "5bde4a16c77d24f44cf9b8a38cfe4d9fbd746c85", "filename": "gcc/params.def", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b5800161f855eb1028cd76ad200bd0d63b2b77/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b5800161f855eb1028cd76ad200bd0d63b2b77/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=61b5800161f855eb1028cd76ad200bd0d63b2b77", "patch": "@@ -35,6 +35,25 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n    Be sure to add an entry to invoke.texi summarizing the parameter.  */\n \n+/* The maximum structure size at which the scalar replacement of\n+   aggregates (SRA) pass will perform block copies.  The default\n+   value, 0, implies that GCC will select the most appropriate size\n+   itself.  */\n+DEFPARAM (PARAM_SRA_MAX_STRUCTURE_SIZE,\n+\t  \"sra-max-structure-size\",\n+\t  \"The maximum structure size (in bytes) at which GCC will do block copies.\",\n+\t  0)\n+\n+/* The ratio between instantiated fields and the complete structure\n+   size.  We say that if the ratio of the number of bytes in\n+   instantiated fields to the number of bytes in the complete\n+   structure exceeds this parameter, then block copies are not used.\n+   The default is 75%.  */\n+DEFPARAM (PARAM_SRA_FIELD_STRUCTURE_RATIO,\n+\t  \"sra-field-structure-ratio\",\n+\t  \"The threshold ratio between instantiated fields and the total structure size.\",\n+\t  75)\n+\n /* The single function inlining limit. This is the maximum size\n    of a function counted in internal gcc instructions (not in\n    real machine instructions) that is eligible for inlining"}, {"sha": "0ebb9729be7ca0c40f899d1a905be1fb9c324e3e", "filename": "gcc/params.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b5800161f855eb1028cd76ad200bd0d63b2b77/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b5800161f855eb1028cd76ad200bd0d63b2b77/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=61b5800161f855eb1028cd76ad200bd0d63b2b77", "patch": "@@ -82,6 +82,10 @@ typedef enum compiler_param\n   (compiler_params[(int) ENUM].value)\n \n /* Macros for the various parameters.  */\n+#define SRA_MAX_STRUCTURE_SIZE \\\n+  PARAM_VALUE (PARAM_SRA_MAX_STRUCTURE_SIZE)\n+#define SRA_FIELD_STRUCTURE_RATIO \\\n+  PARAM_VALUE (PARAM_SRA_FIELD_STRUCTURE_RATIO)\n #define MAX_INLINE_INSNS_SINGLE \\\n   PARAM_VALUE (PARAM_MAX_INLINE_INSNS_SINGLE)\n #define MAX_INLINE_INSNS \\"}, {"sha": "8d984cc8c3438b3367af1239ed5a487c25b58335", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b5800161f855eb1028cd76ad200bd0d63b2b77/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b5800161f855eb1028cd76ad200bd0d63b2b77/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=61b5800161f855eb1028cd76ad200bd0d63b2b77", "patch": "@@ -1,3 +1,7 @@\n+2004-10-28  Ben Elliston  <bje@au.ibm.com>\n+\n+\t* gcc.dg/tree-ssa/sra-1.c: Pass --param sra-max-structure-size.\n+\n 2004-10-27  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* gcc.dg/cpp/direct2.c: Cope with different bison 'parse' or"}, {"sha": "c018fbb9dec0cf2b99bc34ef55b2f75ada92756f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/sra-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b5800161f855eb1028cd76ad200bd0d63b2b77/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsra-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b5800161f855eb1028cd76ad200bd0d63b2b77/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsra-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsra-1.c?ref=61b5800161f855eb1028cd76ad200bd0d63b2b77", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+/* { dg-options \"-O1 -fdump-tree-optimized --param sra-max-structure-size=32\" } */\n \n /* Tests for SRA. */\n "}, {"sha": "9fd40f9822cc0acae648e19e152d145a81cc815b", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b5800161f855eb1028cd76ad200bd0d63b2b77/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b5800161f855eb1028cd76ad200bd0d63b2b77/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=61b5800161f855eb1028cd76ad200bd0d63b2b77", "patch": "@@ -48,6 +48,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"target.h\"\n /* expr.h is needed for MOVE_RATIO.  */\n #include \"expr.h\"\n+#include \"params.h\"\n \n \n /* This object of this pass is to replace a non-addressable aggregate with a\n@@ -1292,6 +1293,14 @@ decide_block_copy (struct sra_elt *elt)\n \t{\n \t  unsigned HOST_WIDE_INT full_size, inst_size = 0;\n \t  unsigned int inst_count;\n+\t  unsigned int max_size;\n+\n+\t  /* If the sra-max-structure-size parameter is 0, then the\n+\t     user has not overridden the parameter and we can choose a\n+\t     sensible default.  */\n+\t  max_size = SRA_MAX_STRUCTURE_SIZE\n+\t    ? SRA_MAX_STRUCTURE_SIZE\n+\t    : MOVE_RATIO * UNITS_PER_WORD;\n \n \t  full_size = tree_low_cst (size_tree, 1);\n \n@@ -1302,14 +1311,14 @@ decide_block_copy (struct sra_elt *elt)\n \n \t  /* If the structure is small, and we've made copies, go ahead\n \t     and instantiate, hoping that the copies will go away.  */\n-\t  if (full_size <= (unsigned) MOVE_RATIO * UNITS_PER_WORD\n+\t  if (full_size <= max_size\n \t      && elt->n_copies > elt->n_uses)\n \t    use_block_copy = false;\n \t  else\n \t    {\n \t      inst_count = sum_instantiated_sizes (elt, &inst_size);\n \n-\t      if (inst_size * 4 >= full_size * 3)\n+\t      if (inst_size * 100 >= full_size * SRA_FIELD_STRUCTURE_RATIO)\n \t\tuse_block_copy = false;\n \t    }\n "}]}