{"sha": "429cb99447a8111be5bffba67270837e90b77929", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI5Y2I5OTQ0N2E4MTExYmU1YmZmYmE2NzI3MDgzN2U5MGI3NzkyOQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-01-04T22:16:26Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-01-04T22:16:26Z"}, "message": "trans.c (gfc_build_final_call): New function.\n\n2013-01-04  Tobias Burnus  <burnus@net-b.de>\n\n        * trans.c (gfc_build_final_call): New function.\n        * trans.h (gfc_build_final_call, gfc_conv_scalar_to_descriptor):\n        New function prototypes.\n        * trans-expr.c (gfc_conv_scalar_to_descriptor): Renamed from\n        conv_scalar_to_descriptor, removed static attribute.\n        (gfc_conv_procedure_call): Honor renaming.\n\nFrom-SVN: r194919", "tree": {"sha": "7168cd7a21534cd29647cc6bac4bb6b05ec2d4a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7168cd7a21534cd29647cc6bac4bb6b05ec2d4a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/429cb99447a8111be5bffba67270837e90b77929", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/429cb99447a8111be5bffba67270837e90b77929", "html_url": "https://github.com/Rust-GCC/gccrs/commit/429cb99447a8111be5bffba67270837e90b77929", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/429cb99447a8111be5bffba67270837e90b77929/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0881224eee2aba544af6ff30601d69c1995200ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0881224eee2aba544af6ff30601d69c1995200ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0881224eee2aba544af6ff30601d69c1995200ec"}], "stats": {"total": 138, "additions": 131, "deletions": 7}, "files": [{"sha": "cff66679cebd8c5bdcd3c912c08bccacbc9150f7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429cb99447a8111be5bffba67270837e90b77929/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429cb99447a8111be5bffba67270837e90b77929/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=429cb99447a8111be5bffba67270837e90b77929", "patch": "@@ -1,3 +1,12 @@\n+2013-01-04  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans.c (gfc_build_final_call): New function.\n+\t* trans.h (gfc_build_final_call, gfc_conv_scalar_to_descriptor):\n+\tNew function prototypes.\n+\t* trans-expr.c (gfc_conv_scalar_to_descriptor): Renamed from\n+\tconv_scalar_to_descriptor, removed static attribute.\n+\t(gfc_conv_procedure_call): Honor renaming.\n+\n 2013-01-04  Tobias Burnus  <burnus@net-b.de>\n \n \t* intrinsic.c (add_functions): New internal intrinsic"}, {"sha": "0abb52d1dd80b0c823d4aed36d90ce3f366ca740", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429cb99447a8111be5bffba67270837e90b77929/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429cb99447a8111be5bffba67270837e90b77929/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=429cb99447a8111be5bffba67270837e90b77929", "patch": "@@ -1,6 +1,6 @@\n /* Expression translation\n    Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n-   2011, 2012\n+   2011, 2012, 2013\n    Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n    and Steven Bosscher <s.bosscher@student.tudelft.nl>\n@@ -61,8 +61,8 @@ get_scalar_to_descriptor_type (tree scalar, symbol_attribute attr)\n \t\t\t\t    akind, !(attr.pointer || attr.target));\n }\n \n-static tree\n-conv_scalar_to_descriptor (gfc_se *se, tree scalar, symbol_attribute attr)\n+tree\n+gfc_conv_scalar_to_descriptor (gfc_se *se, tree scalar, symbol_attribute attr)\n {\n   tree desc, type;\n \n@@ -4355,8 +4355,8 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t      if (TREE_CODE (tmp) == ADDR_EXPR\n \t\t\t  && POINTER_TYPE_P (TREE_TYPE (TREE_OPERAND (tmp, 0))))\n \t\t\ttmp = TREE_OPERAND (tmp, 0);\n-\t\t      parmse.expr = conv_scalar_to_descriptor (&parmse, tmp,\n-\t\t\t\t\t\t\t       fsym->attr);\n+\t\t      parmse.expr = gfc_conv_scalar_to_descriptor (&parmse, tmp,\n+\t\t\t\t\t\t\t\t   fsym->attr);\n \t\t      parmse.expr = gfc_build_addr_expr (NULL_TREE,\n \t\t\t\t\t\t\t parmse.expr);\n \t\t    }"}, {"sha": "84b512727f93c6307964437daf92f0142e15d229", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 111, "deletions": 1, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429cb99447a8111be5bffba67270837e90b77929/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429cb99447a8111be5bffba67270837e90b77929/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=429cb99447a8111be5bffba67270837e90b77929", "patch": "@@ -1,6 +1,6 @@\n /* Code translation -- generate GCC trees from gfc_code.\n    Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n-   2011, 2012 Free Software Foundation, Inc.\n+   2011, 2012, 2013 Free Software Foundation, Inc.\n    Contributed by Paul Brook\n \n This file is part of GCC.\n@@ -1023,6 +1023,116 @@ gfc_deallocate_with_status (tree pointer, tree status, tree errmsg,\n }\n \n \n+/* Build a call to a FINAL procedure, which finalizes \"var\".  */\n+\n+tree\n+gfc_build_final_call (gfc_typespec ts, gfc_expr *final_wrapper, gfc_expr *var,\n+\t\t      bool fini_coarray, gfc_expr *class_size)\n+{\n+  stmtblock_t block;\n+  gfc_se se;\n+  tree final_fndecl, array, size, tmp;\n+\n+  gcc_assert (final_wrapper->expr_type == EXPR_VARIABLE);\n+  gcc_assert (var);\n+\n+  gfc_init_se (&se, NULL);\n+  gfc_conv_expr (&se, final_wrapper);\n+  final_fndecl = se.expr;\n+  if (POINTER_TYPE_P (TREE_TYPE (final_fndecl)))\n+    final_fndecl = build_fold_indirect_ref_loc (input_location, final_fndecl);\n+\n+  if (ts.type == BT_DERIVED)\n+    {\n+      tree elem_size;\n+\n+      gcc_assert (!class_size);\n+      elem_size = gfc_typenode_for_spec (&ts);\n+      elem_size = TYPE_SIZE_UNIT (elem_size);\n+      size = fold_convert (gfc_array_index_type, elem_size);\n+\n+      gfc_init_se (&se, NULL);\n+      se.want_pointer = 1;\n+      if (var->rank || gfc_expr_attr (var).dimension)\n+\t{\n+\t  se.descriptor_only = 1;\n+\t  gfc_conv_expr_descriptor (&se, var);\n+\t  array = se.expr;\n+\t  if (!POINTER_TYPE_P (TREE_TYPE (array)))\n+\t    array = gfc_build_addr_expr (NULL, array);\n+\t}\n+      else\n+\t{\n+\t  symbol_attribute attr;\n+\t  gfc_clear_attr (&attr);\n+\t  gfc_conv_expr (&se, var);\n+\t  gcc_assert (se.pre.head == NULL_TREE && se.post.head == NULL_TREE);\n+\t  array = se.expr;\n+\t  if (TREE_CODE (array) == ADDR_EXPR\n+\t      && POINTER_TYPE_P (TREE_TYPE (TREE_OPERAND (array, 0))))\n+\t    tmp = TREE_OPERAND (array, 0);\n+\n+\t  gfc_init_se (&se, NULL);\n+\t  array = gfc_conv_scalar_to_descriptor (&se, array, attr);\n+\t  array = gfc_build_addr_expr (NULL, array);\n+\t  gcc_assert (se.post.head == NULL_TREE);\n+\t}\n+    }\n+  else\n+    {\n+      gfc_expr *array_expr;\n+      gcc_assert (class_size);\n+      gfc_init_se (&se, NULL);\n+      gfc_conv_expr (&se, class_size);\n+      gcc_assert (se.pre.head == NULL_TREE && se.post.head == NULL_TREE);\n+      size = se.expr;\n+\n+      array_expr = gfc_copy_expr (var);\n+      gfc_add_data_component (array_expr);\n+      gfc_init_se (&se, NULL);\n+      se.want_pointer = 1;\n+      if (array_expr->rank || gfc_expr_attr (array_expr).dimension)\n+\t{\n+\t  se.descriptor_only = 1;\n+\t  gfc_conv_expr_descriptor (&se, var);\n+\t  array = se.expr;\n+\t  if (! POINTER_TYPE_P (TREE_TYPE (array)))\n+\t    array = gfc_build_addr_expr (NULL, array);\n+\t}\n+      else\n+\t{\n+\t  symbol_attribute attr;\n+\n+\t  gfc_clear_attr (&attr);\n+\t  gfc_conv_expr (&se, array_expr);\n+\t  gcc_assert (se.pre.head == NULL_TREE && se.post.head == NULL_TREE);\n+\t  array = se.expr;\n+\t  if (TREE_CODE (array) == ADDR_EXPR\n+\t      && POINTER_TYPE_P (TREE_TYPE (TREE_OPERAND (array, 0))))\n+\t    tmp = TREE_OPERAND (array, 0);\n+\n+\t  /* attr: Argument is neither a pointer/allocatable,\n+\t     i.e. no copy back needed */\n+\t  gfc_init_se (&se, NULL);\n+\t  array = gfc_conv_scalar_to_descriptor (&se, array, attr);\n+\t  array = gfc_build_addr_expr (NULL, array);\n+\t  gcc_assert (se.post.head == NULL_TREE);\n+\t}\n+      gfc_free_expr (array_expr);\n+    }\n+\n+  gfc_start_block (&block);\n+  gfc_add_block_to_block (&block, &se.pre);\n+  tmp = build_call_expr_loc (input_location,\n+\t\t\t     final_fndecl, 3, array,\n+\t\t\t     size, fini_coarray ? boolean_true_node\n+\t\t\t\t\t\t: boolean_false_node);\n+  gfc_add_block_to_block (&block, &se.post);\n+  gfc_add_expr_to_block (&block, tmp);\n+  return gfc_finish_block (&block);\n+}\n+\n+\n /* Generate code for deallocation of allocatable scalars (variables or\n    components). Before the object itself is freed, any allocatable\n    subcomponents are being deallocated.  */"}, {"sha": "339261b73e394c074975a5fa12c05f4b68ec7851", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429cb99447a8111be5bffba67270837e90b77929/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429cb99447a8111be5bffba67270837e90b77929/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=429cb99447a8111be5bffba67270837e90b77929", "patch": "@@ -1,6 +1,6 @@\n /* Header for code translation functions\n    Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n-   2011, 2012\n+   2011, 2012, 2013\n    Free Software Foundation, Inc.\n    Contributed by Paul Brook\n \n@@ -352,6 +352,8 @@ tree gfc_vtable_final_get (tree);\n tree gfc_get_vptr_from_expr (tree);\n tree gfc_get_class_array_ref (tree, tree);\n tree gfc_copy_class_to_class (tree, tree, tree);\n+tree gfc_build_final_call (gfc_typespec, gfc_expr *, gfc_expr *, bool,\n+\t\t\t   gfc_expr *);\n void gfc_conv_derived_to_class (gfc_se *, gfc_expr *, gfc_typespec, tree, bool,\n \t\t\t\tbool);\n void gfc_conv_class_to_class (gfc_se *, gfc_expr *, gfc_typespec, bool, bool,\n@@ -403,6 +405,9 @@ void gfc_conv_expr_lhs (gfc_se * se, gfc_expr * expr);\n void gfc_conv_expr_reference (gfc_se * se, gfc_expr *);\n void gfc_conv_expr_type (gfc_se * se, gfc_expr *, tree);\n \n+tree gfc_conv_scalar_to_descriptor (gfc_se *, tree, symbol_attribute);\n+\n+\n /* trans-expr.c */\n void gfc_conv_scalar_char_value (gfc_symbol *sym, gfc_se *se, gfc_expr **expr);\n tree gfc_string_to_single_character (tree len, tree str, int kind);"}]}