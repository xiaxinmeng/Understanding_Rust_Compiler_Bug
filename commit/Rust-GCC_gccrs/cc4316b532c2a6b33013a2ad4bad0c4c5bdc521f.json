{"sha": "cc4316b532c2a6b33013a2ad4bad0c4c5bdc521f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M0MzE2YjUzMmMyYTZiMzMwMTNhMmFkNGJhZDBjNGM1YmRjNTIxZg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@purist.soma.redhat.com", "date": "2000-06-03T01:52:32Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-06-03T01:52:32Z"}, "message": "locale_facets.h: Tweak.\n\n\n2000-06-02  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\t* bits/locale_facets.h: Tweak.\n\t* src/locale.cc (codecvt<wchar_t>): Tweak.\n\n\t* bits/locale_facets.h (_Format_cache): _S_ecks -> _S_x.\n\t* bits/locale_facets.tcc (num_get<char>::_M_extract): Fix for hex.\n\n\t* bits/basic_string.h: Move data member up.\n\t* src/string-inst.cc: Fix instantiations.\n\t* bits/string.tcc: Fix types.\n\nFrom-SVN: r34371", "tree": {"sha": "5e7f44da8c03f04b8e4fb1cd06ad37492ea7c1df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e7f44da8c03f04b8e4fb1cd06ad37492ea7c1df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc4316b532c2a6b33013a2ad4bad0c4c5bdc521f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc4316b532c2a6b33013a2ad4bad0c4c5bdc521f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc4316b532c2a6b33013a2ad4bad0c4c5bdc521f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc4316b532c2a6b33013a2ad4bad0c4c5bdc521f/comments", "author": null, "committer": null, "parents": [{"sha": "3378216a502092b8b3259de6542056133efd3d39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3378216a502092b8b3259de6542056133efd3d39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3378216a502092b8b3259de6542056133efd3d39"}], "stats": {"total": 341, "additions": 190, "deletions": 151}, "files": [{"sha": "8e8b6f827bc43a9b594f4859fe7f23c474d5a26c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4316b532c2a6b33013a2ad4bad0c4c5bdc521f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4316b532c2a6b33013a2ad4bad0c4c5bdc521f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cc4316b532c2a6b33013a2ad4bad0c4c5bdc521f", "patch": "@@ -1,8 +1,15 @@\n 2000-06-02  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n \n+\t* bits/locale_facets.h: Tweak.\n+\t* src/locale.cc (codecvt<wchar_t>): Tweak. \n+\t\n \t* bits/locale_facets.h (_Format_cache): _S_ecks -> _S_x. \n \t* bits/locale_facets.tcc (num_get<char>::_M_extract): Fix for hex.\n \n+\t* bits/basic_string.h: Move data member up.\n+\t* src/string-inst.cc: Fix instantiations.\n+\t* bits/string.tcc: Fix types.\n+\t\n 2000-06-02  Anthony Williams  <anthony@anthonyw.cjb.net>\n \n \t* testsuite/21_strings/replace.cc (test01): Qualify find with std::."}, {"sha": "99401e6053fefa04ffa3a6e870ae1be5856985f7", "filename": "libstdc++-v3/bits/basic_string.h", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4316b532c2a6b33013a2ad4bad0c4c5bdc521f/libstdc%2B%2B-v3%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4316b532c2a6b33013a2ad4bad0c4c5bdc521f/libstdc%2B%2B-v3%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fbasic_string.h?ref=cc4316b532c2a6b33013a2ad4bad0c4c5bdc521f", "patch": "@@ -97,11 +97,6 @@ namespace std {\n       typedef reverse_iterator<const_iterator> \tconst_reverse_iterator;\n       typedef reverse_iterator<iterator> \t\t    reverse_iterator;\n     \n-      //  Data Members:\n-      // NB: This is an unsigned type, and thus represents the maximum\n-      // size that the allocator can hold.\n-      static const size_type npos = static_cast<size_type>(-1);\n-\n     private:\n       // _Rep: string representation\n       //   Invariants:\n@@ -222,8 +217,20 @@ namespace std {\n \t_CharT* _M_p; // The actual data.\n       };\n \n+    public:\n+      // Data Members (public):\n+      // NB: This is an unsigned type, and thus represents the maximum\n+      // size that the allocator can hold.\n+      static const size_type npos = static_cast<size_type>(-1);\n+\n+    private:\n+      // Data Members (private):\n       mutable _Alloc_hider _M_dataplus;\n \n+      // The following storage is init'd to 0 by the linker, resulting\n+      // (carefully) in an empty string with one reference.\n+      static size_type _S_empty_rep_storage[(sizeof(_Rep) + sizeof(_CharT) + sizeof(size_type) - 1)/sizeof(size_type)];\n+\n       _CharT* \n       _M_data() const \n       { return  _M_dataplus._M_p; }\n@@ -299,14 +306,9 @@ namespace std {\n       void \n       _M_leak_hard();\n \n-      // The following storage is init'd to 0 by the linker, resulting\n-      // (carefully) in an empty string with one reference.\n-      static size_type _S_empty_rep_storage[\n-      (sizeof(_Rep) + sizeof(_CharT) + sizeof(size_type)-1)/sizeof(size_type)];\n-\n       static _Rep& \n       _S_empty_rep()\n-      { return *reinterpret_cast<_Rep*> (&_S_empty_rep_storage); }\n+      { return *reinterpret_cast<_Rep*>(&_S_empty_rep_storage); }\n \n     public:\n       // Construct/copy/destroy:\n@@ -840,7 +842,7 @@ namespace std {\n  \n     private:\n       static const _CharT* \n-      _S_find (const _CharT* __beg, const _CharT* __end, _CharT __c);\n+      _S_find(const _CharT* __beg, const _CharT* __end, _CharT __c);\n   };\n \n "}, {"sha": "2568585f82bc8903d8d61d7c948b60a239a71037", "filename": "libstdc++-v3/bits/locale_facets.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4316b532c2a6b33013a2ad4bad0c4c5bdc521f/libstdc%2B%2B-v3%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4316b532c2a6b33013a2ad4bad0c4c5bdc521f/libstdc%2B%2B-v3%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Flocale_facets.h?ref=cc4316b532c2a6b33013a2ad4bad0c4c5bdc521f", "patch": "@@ -597,7 +597,7 @@ namespace std\n       // Types:\n       typedef _InternT intern_type;\n       typedef _ExternT extern_type;\n-      typedef _StateT state_type;\n+      typedef _StateT  state_type;\n \n       // Data Members:\n       static locale::id id;\n@@ -618,8 +618,8 @@ namespace std\n     {\n     public:      \n       // Types:\n-      typedef char intern_type;\n-      typedef char extern_type;\n+      typedef char \tintern_type;\n+      typedef char \textern_type;\n       typedef mbstate_t state_type;\n \n       explicit codecvt (size_t __refs = 0);\n@@ -657,8 +657,8 @@ namespace std\n     {\n     public:\n       // Types:\n-      typedef wchar_t intern_type;\n-      typedef char extern_type;\n+      typedef wchar_t \tintern_type;\n+      typedef char \textern_type;\n       typedef mbstate_t state_type;\n \n       explicit codecvt(size_t __refs = 0);\n@@ -774,7 +774,7 @@ namespace std\n \n       // A list of valid numeric literals: for the standard \"C\" locale,\n       // this would usually be: \"-+xX0123456789abcdef0123456789ABCDEF\"\n-      static const char _S_literals[];\n+      static const char \t_S_literals[];\n \n       // NB: Code depends on the order of definitions of the names\n       // these are indices into _S_literals, above."}, {"sha": "73b4d98a9a545207baf9544d9dffac7c94eaeb36", "filename": "libstdc++-v3/bits/string.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4316b532c2a6b33013a2ad4bad0c4c5bdc521f/libstdc%2B%2B-v3%2Fbits%2Fstring.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4316b532c2a6b33013a2ad4bad0c4c5bdc521f/libstdc%2B%2B-v3%2Fbits%2Fstring.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fstring.tcc?ref=cc4316b532c2a6b33013a2ad4bad0c4c5bdc521f", "patch": "@@ -399,7 +399,7 @@ namespace std\n   // Linker sets _S_empty_rep_storage to all 0s (one reference, empty string)\n   // at static init time (before static ctors are run).\n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    typename _Alloc::size_type\n+    basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::_S_empty_rep_storage[\n     (sizeof(_Rep) + sizeof(_CharT) + sizeof(size_type) - 1)/sizeof(size_type)];\n "}, {"sha": "3327ea2d6ec8f82fd7b5e8946b984f77208931f8", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 159, "deletions": 129, "changes": 288, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4316b532c2a6b33013a2ad4bad0c4c5bdc521f/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4316b532c2a6b33013a2ad4bad0c4c5bdc521f/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=cc4316b532c2a6b33013a2ad4bad0c4c5bdc521f", "patch": "@@ -41,7 +41,8 @@\n namespace std {\n \n   // locale::_Impl\n-  locale::_Impl::~_Impl() throw ()\n+  locale::_Impl::\n+  ~_Impl() throw()\n   {\n     std::vector<facet*>::iterator it = _M_facets->begin();\n     for (; it != _M_facets->end(); ++it)\n@@ -50,7 +51,8 @@ namespace std {\n     delete _M_category_names;\n   }\n \n-  locale::_Impl::_Impl(size_t __numfacets, size_t __refs)\n+  locale::_Impl::\n+  _Impl(size_t __numfacets, size_t __refs)\n   : _M_num_references(__refs - 1)\n   , _M_facets(0)\n   , _M_category_names(0)\n@@ -68,7 +70,8 @@ namespace std {\n     _M_category_names = __pcn.release();\n   }\n   \n-  locale::_Impl::_Impl(const _Impl& __other, size_t __refs)\n+  locale::_Impl::\n+  _Impl(const _Impl& __other, size_t __refs)\n   : _M_num_references(__refs)\n   , _M_facets(0)\n   , _M_category_names(0)\n@@ -95,7 +98,8 @@ namespace std {\n   }\n   \n   void\n-  locale::_Impl::_M_replace_categories(const _Impl* __other, category __cats)\n+  locale::_Impl::\n+  _M_replace_categories(const _Impl* __other, category __cats)\n   {\n     assert((__cats & locale::all) && !(__cats & ~locale::all));\n     \n@@ -111,16 +115,16 @@ namespace std {\n   }\n \n   void\n-  locale::_Impl::_M_replace_category(const _Impl* __other,\n-\t\t\t\t     const locale::id* const* __idpp)\n+  locale::_Impl::\n+  _M_replace_category(const _Impl* __other, const locale::id* const* __idpp)\n   {\n     for (; *__idpp; ++__idpp)\n       _M_replace_facet(__other, *__idpp);\n   }\n   \n   void\n-  locale::_Impl::_M_replace_facet(const _Impl* __other, \n-\t\t\t\t  const locale::id* __idp)\n+  locale::_Impl::\n+  _M_replace_facet(const _Impl* __other, const locale::id* __idp)\n   {\n     size_t __index = __idp->_M_index;\n     if (__index == 0 \n@@ -132,7 +136,8 @@ namespace std {\n   }\n \n   void\n-  locale::_Impl::_M_install_facet(const locale::id* __idp, facet* __fp)\n+  locale::_Impl::\n+  _M_install_facet(const locale::id* __idp, facet* __fp)\n   {\n     if (__fp == 0)\n       return;\n@@ -260,11 +265,13 @@ namespace std {\n   locale::_Impl* locale::_S_global;  // init'd to 0 before static ctors run\n   locale::_Impl* locale::_S_classic; // init'd to 0 before static ctors run\n \n-  locale::locale(_Impl* __ip) throw ()\n+  locale::\n+  locale(_Impl* __ip) throw()\n   : _M_impl(__ip)\n   { __ip->_M_add_reference(); }\n \n-  locale::locale(const locale& __other, const locale& __one, category __cats)\n+  locale::\n+  locale(const locale& __other, const locale& __one, category __cats)\n   {\n     __cats = _S_normalize_category(__cats);    // might throw\n     _M_impl = new _Impl(*__other._M_impl, 1);  // might throw\n@@ -283,7 +290,8 @@ namespace std {\n   }\n \n   const locale&\n-  locale::operator=(const locale& __other) throw ()\n+  locale::\n+  operator=(const locale& __other) throw()\n   {\n     __other._M_impl->_M_add_reference();\n     _M_impl->_M_remove_reference();\n@@ -292,7 +300,8 @@ namespace std {\n   }\n \n   locale\n-  locale::global(const locale& __other)\n+  locale::\n+  global(const locale& __other)\n   {\n     // XXX MT\n     _S_initialize();\n@@ -306,62 +315,64 @@ namespace std {\n   }\n \n   string\n-  locale::name() const\n+  locale::\n+  name() const\n   {\n     // XXX not done\n     return \"*\";\n   }\n \n   locale const&\n-  locale::classic()\n+  locale::\n+  classic()\n   {\n     static locale* __classic_locale;\n     // XXX MT\n     if (!_S_classic)\n       {\n \ttry {\n \t  _S_classic = _S_global = new _Impl(26u, 2u);\n-\t  // one reference for _M_classic, one for _M_global\n+\t  // One reference for _M_classic, one for _M_global\n \t  // (constructor for (*the_classic_locale) adds a third)\n \t    \n \t  // collate category\n \t  _S_classic->_M_init_facet(new std::collate<char>);\n \t  \n \t  // ctype category\n \t  _S_classic->_M_init_facet(new std::ctype<char>);\n-\t  _S_classic->_M_init_facet(new std::codecvt<char, char, mbstate_t>);\n+\t  _S_classic->_M_init_facet(new codecvt<char, char, mbstate_t>);\n \n \t  // monetary category\n-\t  _S_classic->_M_init_facet(new std::moneypunct<char, false>);\n-\t  _S_classic->_M_init_facet(new std::moneypunct<char,true >);\n-\t  _S_classic->_M_init_facet(new std::money_get<char>);\n-\t  _S_classic->_M_init_facet(new std::money_put<char>);\n+\t  _S_classic->_M_init_facet(new moneypunct<char, false>);\n+\t  _S_classic->_M_init_facet(new moneypunct<char,true >);\n+\t  _S_classic->_M_init_facet(new money_get<char>);\n+\t  _S_classic->_M_init_facet(new money_put<char>);\n \t  \n \t  // numeric category\n-\t  _S_classic->_M_init_facet(new std::numpunct<char>);\n-\t  _S_classic->_M_init_facet(new std::num_get<char>);\n-\t  _S_classic->_M_init_facet(new std::num_put<char>);\n+\t  _S_classic->_M_init_facet(new numpunct<char>);\n+\t  _S_classic->_M_init_facet(new num_get<char>);\n+\t  _S_classic->_M_init_facet(new num_put<char>);\n \t  \n \t  // time category\n-\t  _S_classic->_M_init_facet(new std::time_get<char>);\n-\t  _S_classic->_M_init_facet(new std::time_put<char>);\n+\t  _S_classic->_M_init_facet(new time_get<char>);\n+\t  _S_classic->_M_init_facet(new time_put<char>);\n \t  \n \t  // messages category\n \t  _S_classic->_M_init_facet(new std::messages<char>);\n \n #ifdef  _GLIBCPP_USE_WCHAR_T\n \t  _S_classic->_M_init_facet(new std::collate<wchar_t>);\n \t  _S_classic->_M_init_facet(new std::ctype<wchar_t>);\n-\t  _S_classic->_M_init_facet(new std::codecvt<wchar_t, char, mbstate_t>);\n-\t  _S_classic->_M_init_facet(new std::moneypunct<wchar_t, false>);\n-\t  _S_classic->_M_init_facet(new std::moneypunct<wchar_t,true >);\n-\t  _S_classic->_M_init_facet(new std::money_get<wchar_t>);\n-\t  _S_classic->_M_init_facet(new std::money_put<wchar_t>);\n-\t  _S_classic->_M_init_facet(new std::numpunct<wchar_t>);\n-\t  _S_classic->_M_init_facet(new std::num_get<wchar_t>);\n-\t  _S_classic->_M_init_facet(new std::num_put<wchar_t>);\n-\t  _S_classic->_M_init_facet(new std::time_get<wchar_t>);\n-\t  _S_classic->_M_init_facet(new std::time_put<wchar_t>);\n+\t  _S_classic->_M_init_facet(new codecvt<wchar_t, char, mbstate_t>);\n+\t  _S_classic->_M_init_facet(new moneypunct<wchar_t, false>);\n+\t  _S_classic->_M_init_facet(new moneypunct<wchar_t,true >);\n+\t  _S_classic->_M_init_facet(new money_get<wchar_t>);\n+\t  _S_classic->_M_init_facet(new money_put<wchar_t>);\n+\t  _S_classic->_M_init_facet(new numpunct<wchar_t>);\n+\t  _S_classic->_M_init_facet(new num_get<wchar_t>);\n+\t  _S_classic->_M_init_facet(new num_put<wchar_t>);\n+\t  _S_classic->_M_init_facet(new time_get<wchar_t>);\n+\t  _S_classic->_M_init_facet(new time_put<wchar_t>);\n \t  _S_classic->_M_init_facet(new std::messages<wchar_t>);\n #endif\t  \n \n@@ -384,7 +395,8 @@ namespace std {\n   }\n \n   int\n-  locale::_S_normalize_category(int __cats) \n+  locale::\n+  _S_normalize_category(int __cats) \n   {\n     if ((__cats & all) && !(__cats & ~all))\n       return __cats;\n@@ -408,19 +420,22 @@ namespace std {\n     /* NOTREACHED */\n   }\n \n-  locale::facet::facet(size_t __refs) throw ()\n+  locale::facet::\n+  facet(size_t __refs) throw()\n   : _M_num_references(__refs - 1) \n   { }\n \n   void  \n-  locale::facet::_M_add_reference() throw ()\n+  locale::facet::\n+  _M_add_reference() throw()\n   { \n     if (this) \n       ++_M_num_references; \n   }                     // XXX MT\n \n   void  \n-  locale::facet::_M_remove_reference() throw ()\n+  locale::facet::\n+  _M_remove_reference() throw()\n   {\n     if (this && _M_num_references-- == 0)\n       {\n@@ -433,10 +448,12 @@ namespace std {\n   }\n \n   char const* \n-  _Bad_use_facet::what() const throw()\n+  _Bad_use_facet::\n+  what() const throw()\n   { return \"bad_cast thrown from use_facet\"; }\n \n-  _Bad_use_facet::~_Bad_use_facet() throw() {}\n+  _Bad_use_facet::\n+  ~_Bad_use_facet() throw() { }\n   \n   size_t locale::id::_S_highwater;  // init'd to 0 by linker\n \n@@ -446,11 +463,13 @@ namespace std {\n \n   locale::id ctype<char>::id;\n \n-  ctype<char>::~ctype()\n+  ctype<char>::\n+  ~ctype()\n   { if (_M_del) delete[] table(); }\n \n   char\n-  ctype<char>::do_widen(char __c) const\n+  ctype<char>::\n+  do_widen(char __c) const\n   { return __c; }\n   \n   const char* \n@@ -462,7 +481,8 @@ namespace std {\n   }\n   \n   char\n-  ctype<char>::do_narrow(char __c, char /*__dfault*/) const\n+  ctype<char>::\n+  do_narrow(char __c, char /*__dfault*/) const\n   { return __c; }\n   \n   const char* \n@@ -474,17 +494,20 @@ namespace std {\n     return __high;\n   }\n \n-  ctype_byname<char>::ctype_byname(const char* /*__s*/, size_t __refs)\n-  : ctype<char> (new mask[table_size], true, __refs)\n+  ctype_byname<char>::\n+  ctype_byname(const char* /*__s*/, size_t __refs)\n+  : ctype<char>(new mask[table_size], true, __refs)\n   { }\n \n   locale::id codecvt<char, char, mbstate_t>::id;\n \n-  codecvt<char, char, mbstate_t>::codecvt(size_t __refs)\n-  : _Codecvt<char, char, mbstate_t> (__refs)\n+  codecvt<char, char, mbstate_t>::\n+  codecvt(size_t __refs)\n+  : _Codecvt<char, char, mbstate_t>(__refs)\n   { }\n \n-  codecvt<char, char, mbstate_t>::~codecvt() { }\n+  codecvt<char, char, mbstate_t>::\n+  ~codecvt() { }\n   \n   codecvt_base::result\n   codecvt<char, char, mbstate_t>::\n@@ -505,8 +528,7 @@ namespace std {\n   codecvt_base::result\n   codecvt<char, char, mbstate_t>::\n   do_unshift(state_type& /*__state*/, extern_type* __to,\n-             extern_type* /*__to_limit*/,\n-\t     extern_type*& __to_next) const\n+             extern_type* /*__to_limit*/, extern_type*& __to_next) const\n   { \n     __to_next = __to; \n     return noconv; \n@@ -530,12 +552,12 @@ namespace std {\n   \n \n   int \n-  codecvt<char, char, mbstate_t>::do_encoding() const throw ()\n-  { return 1; }\n+  codecvt<char, char, mbstate_t>::\n+  do_encoding() const throw() { return 1; }\n   \n   bool \n-  codecvt<char, char, mbstate_t>::do_always_noconv() const throw ()\n-  { return true; }\n+  codecvt<char, char, mbstate_t>::\n+  do_always_noconv() const throw() { return true; }\n   \n   int \n   codecvt<char, char, mbstate_t>::\n@@ -544,27 +566,27 @@ namespace std {\n   { return (__max < size_t(__end - __from)) ? __max : __end - __from; }\n   \n   int \n-  codecvt<char, char, mbstate_t>::do_max_length() const throw ()\n-  { return 1; }\n+  codecvt<char, char, mbstate_t>::\n+  do_max_length() const throw() { return 1; }\n   \n   codecvt_byname<char, char, mbstate_t>::\n   codecvt_byname(const char* /*__s*/, size_t __refs)\n-  : codecvt<char, char, mbstate_t>(__refs)\n-  { }\n+  : codecvt<char, char, mbstate_t>(__refs) { }\n \n-  codecvt_byname<char, char, mbstate_t>::~codecvt_byname() { }\n+  codecvt_byname<char, char, mbstate_t>::\n+  ~codecvt_byname() { }\n \n   locale::id collate<char>::id;\n \n   collate<char>::collate(size_t __refs)\n-  : _Collate<char> (__refs)\n-  { }\n+  : _Collate<char>(__refs) { }\n   \n   collate<char>::~collate() { }\n   \n   int \n-  collate<char>::do_compare(const char* __lo1, const char* __hi1,\n-\t\t\t    const char* __lo2, const char* __hi2) const\n+  collate<char>::\n+  do_compare(const char* __lo1, const char* __hi1, \n+\t     const char* __lo2, const char* __hi2) const\n   {\n     for (; __lo1 < __hi1 && __lo2 < __hi2; ++__lo1, ++__lo2) \n       if (*__lo1 != *__lo2) \n@@ -578,11 +600,13 @@ namespace std {\n   }\n   \n   string\n-  collate<char>::do_transform(const char* __lo, const char* __hi) const\n+  collate<char>::\n+  do_transform(const char* __lo, const char* __hi) const\n   { return string(__lo, __hi - __lo); }\n   \n   long\n-  collate<char>::do_hash(const char* __lo, const char* __hi) const\n+  collate<char>::\n+  do_hash(const char* __lo, const char* __hi) const\n   {\n     unsigned long __val = 0xdeadbeef;\n     for (; __lo < __hi; ++__lo)\n@@ -591,43 +615,43 @@ namespace std {\n     return __val;\n   }\n   \n-  collate_byname<char>::collate_byname(const char* /*__s*/, size_t __refs)\n-  : collate<char> (__refs)\n-  { }\n+  collate_byname<char>::\n+  collate_byname(const char* /*__s*/, size_t __refs)\n+  : collate<char>(__refs) { }\n \n-  numpunct_byname<char>::numpunct_byname(const char* /*__s*/, size_t __refs)\n-  : numpunct<char> (__refs)\n-  { }\n+  numpunct_byname<char>::\n+  numpunct_byname(const char* /*__s*/, size_t __refs)\n+  : numpunct<char>(__refs) { }\n \n   moneypunct_byname<char, false>::\n   moneypunct_byname(const char* /*__s*/, size_t __refs)\n-  : moneypunct<char, false> (__refs)\n-  { }\n+  : moneypunct<char, false>(__refs) { }\n   \n   moneypunct_byname<char, true>::\n   moneypunct_byname(const char* /*__s*/, size_t __refs)\n-  : moneypunct<char, true> (__refs)\n-  { }\n+  : moneypunct<char, true>(__refs) { }\n   \n-  messages_byname<char>::messages_byname(const char* /*__s*/, size_t __refs)\n-  : messages<char> (__refs)\n-  { }\n+  messages_byname<char>::\n+  messages_byname(const char* /*__s*/, size_t __refs)\n+  : messages<char>(__refs) { }\n \n #ifdef _GLIBCPP_USE_WCHAR_T  \n   locale::id ctype<wchar_t>::id;\n \n-  ctype<wchar_t>::~ctype() { }\n+  ctype<wchar_t>::\n+  ~ctype() { }\n \n   bool\n-  ctype<wchar_t>::do_is(mask __m, char_type __c) const\n+  ctype<wchar_t>::\n+  do_is(mask __m, char_type __c) const\n   { \n     return ((static_cast<__table_type>(__c) < _S_table_size) \n \t    && (_M_ctable[__c] & __m)); \n   }\n   \n   const wchar_t* \n-  ctype<wchar_t>::do_is(const wchar_t* __low, const wchar_t* __high,\n-\t\t\tmask* __vec) const\n+  ctype<wchar_t>::\n+  do_is(const wchar_t* __low, const wchar_t* __high, mask* __vec) const\n   {\n     for (; __low < __high; ++__low, ++__vec)\n       *__vec = ((static_cast<__table_type>(*__low) < _S_table_size) \n@@ -636,8 +660,8 @@ namespace std {\n   }\n   \n   const wchar_t* \n-  ctype<wchar_t>::do_scan_is(mask __m, const wchar_t* __low,\n-\t\t\t     const wchar_t* __high) const\n+  ctype<wchar_t>::\n+  do_scan_is(mask __m, const wchar_t* __low, const wchar_t* __high) const\n   {\n     while (__low < __high \n \t   && (_S_table_size < static_cast<__table_type>(*__low) \n@@ -647,8 +671,8 @@ namespace std {\n   }\n \n   const wchar_t*\n-  ctype<wchar_t>::do_scan_not(mask __m, const char_type* __low,\n-\t\t\t      const char_type* __high) const\n+  ctype<wchar_t>::\n+  do_scan_not(mask __m, const char_type* __low, const char_type* __high) const\n   {\n     while (__low < __high \n \t   && static_cast<__table_type>(*__low) < _S_table_size \n@@ -658,46 +682,50 @@ namespace std {\n   }\n \n   wchar_t\n-  ctype<wchar_t>::do_widen(char __c) const\n+  ctype<wchar_t>::\n+  do_widen(char __c) const\n   { return static_cast<wchar_t>((unsigned char)__c); }\n   \n   const char* \n-  ctype<wchar_t>::do_widen(const char* __low, const char* __high,\n-\t\t\t      wchar_t* __dest) const\n+  ctype<wchar_t>::\n+  do_widen(const char* __low, const char* __high, wchar_t* __dest) const\n   {\n     while (__low < __high)\n       *__dest++ = static_cast<wchar_t>((unsigned char)*__low++);\n     return __high;\n   }\n \n   char\n-  ctype<wchar_t>::do_narrow(wchar_t __c, char __dfault) const\n+  ctype<wchar_t>::\n+  do_narrow(wchar_t __c, char __dfault) const\n   { \n     return ((static_cast<__table_type>(__c) < _S_table_size) \n \t    ? static_cast<char>(__c) : __dfault); \n   }\n \n   const wchar_t*\n-  ctype<wchar_t>::do_narrow(const wchar_t* __low, const wchar_t* __high,\n-\t\t\t    char __dfault, char* __dest) const\n+  ctype<wchar_t>::\n+  do_narrow(const wchar_t* __low, const wchar_t* __high, \n+\t    char __dfault, char* __dest) const\n   {\n     for (; __low < __high; ++__dest, ++__low)\n       *__dest = (static_cast<__table_type>(*__low) < _S_table_size) \n \t\t? static_cast<char>(*__low) : __dfault;\n     return __high;\n   }\n \n-  ctype_byname<wchar_t>::ctype_byname(const char* /*__s*/, size_t __refs)\n-  : ctype<wchar_t> (__refs)\n-  { }\n+  ctype_byname<wchar_t>::\n+  ctype_byname(const char* /*__s*/, size_t __refs)\n+  : ctype<wchar_t>(__refs) { }\n \n   locale::id codecvt<wchar_t, char, mbstate_t>::id;\n \n-  codecvt<wchar_t, char, mbstate_t>::codecvt (size_t __refs)\n-  : _Codecvt<wchar_t, char, mbstate_t> (__refs)\n-  { }\n+  codecvt<wchar_t, char, mbstate_t>::\n+  codecvt(size_t __refs)\n+  : _Codecvt<wchar_t, char, mbstate_t>(__refs) { }\n \n-  codecvt<wchar_t, char, mbstate_t>::~codecvt() { }\n+  codecvt<wchar_t, char, mbstate_t>::\n+  ~codecvt() { }\n   \n   codecvt_base::result\n   codecvt<wchar_t, char, mbstate_t>::\n@@ -715,8 +743,7 @@ namespace std {\n   codecvt_base::result\n   codecvt<wchar_t, char, mbstate_t>::\n   do_unshift (state_type& /*__state*/, extern_type* __to,\n-              extern_type* /*__to_limit*/,\n-\t      extern_type*& __to_next) const\n+              extern_type* /*__to_limit*/, extern_type*& __to_next) const\n   {\n     __to_next = __to;\n     return noconv;\n@@ -736,11 +763,14 @@ namespace std {\n     return __from == __from_end ? ok : partial;\n   }\n   \n-  int codecvt<wchar_t, char, mbstate_t>::do_encoding() const throw ()\n+  int \n+  codecvt<wchar_t, char, mbstate_t>::\n+  do_encoding() const throw()\n   { return 1; }\n   \n   bool \n-  codecvt<wchar_t, char, mbstate_t>::do_always_noconv() const throw ()\n+  codecvt<wchar_t, char, mbstate_t>::\n+  do_always_noconv() const throw()\n   { return false; }\n   \n   int \n@@ -750,33 +780,35 @@ namespace std {\n   { return (__max < size_t(__end - __from)) ? __max : __end - __from; }\n   \n   int \n-  codecvt<wchar_t, char, mbstate_t>::do_max_length() const throw ()\n+  codecvt<wchar_t, char, mbstate_t>::do_max_length() const throw()\n   { return 1; }\n \n   codecvt_byname<wchar_t, char, mbstate_t>::\n   codecvt_byname(const char* /*__s*/, size_t __refs)\n-  : codecvt<wchar_t, char, mbstate_t> (__refs)\n-  { }\n+  : codecvt<wchar_t, char, mbstate_t> (__refs) { }\n   \n-  codecvt_byname<wchar_t, char, mbstate_t>::~codecvt_byname() {}\n+  codecvt_byname<wchar_t, char, mbstate_t>::\n+  ~codecvt_byname() { }\n \n   locale::id collate<wchar_t>::id;\n \n-  collate<wchar_t>::collate(size_t __refs)\n-  : _Collate<wchar_t> (__refs)\n-  { }\n+  collate<wchar_t>::\n+  collate(size_t __refs)\n+  : _Collate<wchar_t> (__refs) { }\n   \n-  collate<wchar_t>::~collate() { }\n+  collate<wchar_t>::\n+  ~collate() { }\n \n-  int collate<wchar_t>::\n+  int \n+  collate<wchar_t>::\n   do_compare(const wchar_t* /*__lo1*/, const wchar_t* /*__hi1*/,\n \t     const wchar_t* /*__lo2*/, const wchar_t* /*__hi2*/) const\n   {\n     return 0; // XXX not done\n   }\n   \n-  wstring collate<wchar_t>::do_transform(const wchar_t* /*__lo*/, \n-\t\t\t\t\t const wchar_t* /*__hi*/) const\n+  wstring collate<wchar_t>::\n+  do_transform(const wchar_t* /*__lo*/, const wchar_t* /*__hi*/) const\n   {\n     return wstring(); // XXX not done\n   }\n@@ -787,27 +819,25 @@ namespace std {\n     return 0; // XXX not done\n   }\n \n-  numpunct_byname<wchar_t>::numpunct_byname(const char* /*__s*/, size_t __refs)\n-  : numpunct<wchar_t> (__refs)\n-  { }\n+  numpunct_byname<wchar_t>::\n+  numpunct_byname(const char* /*__s*/, size_t __refs)\n+  : numpunct<wchar_t> (__refs) { }\n \n-  collate_byname<wchar_t>::collate_byname(const char* /*__s*/, size_t __refs)\n-  : collate<wchar_t> (__refs)\n-  { }\n+  collate_byname<wchar_t>::\n+  collate_byname(const char* /*__s*/, size_t __refs)\n+  : collate<wchar_t> (__refs) { }\n   \n   moneypunct_byname<wchar_t, false>::\n   moneypunct_byname(const char* /*__s*/, size_t __refs)\n-  : moneypunct<wchar_t, false> (__refs)\n-  { }\n+  : moneypunct<wchar_t, false> (__refs) { }\n   \n   moneypunct_byname<wchar_t, true>::\n   moneypunct_byname(const char* /*__s*/, size_t __refs)\n-  : moneypunct<wchar_t, true> (__refs)\n-  { }\n+  : moneypunct<wchar_t, true> (__refs) { }\n     \n-  messages_byname<wchar_t>::messages_byname(const char* /*__s*/, size_t __refs)\n-  : messages<wchar_t> (__refs)\n-  { }\n+  messages_byname<wchar_t>::\n+  messages_byname(const char* /*__s*/, size_t __refs)\n+  : messages<wchar_t> (__refs) { }\n #endif //  _GLIBCPP_USE_WCHAR_T\n \n } // namespace std"}, {"sha": "428d7baa62cb47f50379e0e3ab49500092c67d33", "filename": "libstdc++-v3/src/string-inst.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4316b532c2a6b33013a2ad4bad0c4c5bdc521f/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4316b532c2a6b33013a2ad4bad0c4c5bdc521f/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc?ref=cc4316b532c2a6b33013a2ad4bad0c4c5bdc521f", "patch": "@@ -57,9 +57,9 @@ namespace std\n \n #ifdef MAIN\n   template C S::_Rep::_S_terminal;\n-  // XXX Fix me: 2000-04-18 g++ ICE.\n-//  template S::size_type S::_S_max_size;\n-//  template S::allocator_type::size_type S::S_empty_rep_storage[];\n+  template S::size_type S::_Rep::_S_max_size;\n+  template S::size_type S::_S_empty_rep_storage[];\n+\n   template S::basic_string(S const&);\n   template S::_Rep* S::_Rep::_S_create(size_t, S::allocator_type const&);\n   template void S::_Rep::_M_destroy(S::allocator_type const&) throw();"}]}