{"sha": "573120551a0bc6813f32ed371df65311724e96dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTczMTIwNTUxYTBiYzY4MTNmMzJlZDM3MWRmNjUzMTE3MjRlOTZkZA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-03-25T16:24:59Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-03-27T18:55:14Z"}, "message": "Add generics for impl blocks\n\nGenerics paramters to impl blocks allows each impl-item to inherit these\nand get handled in a similar way as to normal functions.\n\nFixes #237", "tree": {"sha": "d4262132bacfd6a705078f4e64973a5b8cfbe1c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4262132bacfd6a705078f4e64973a5b8cfbe1c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/573120551a0bc6813f32ed371df65311724e96dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/573120551a0bc6813f32ed371df65311724e96dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/573120551a0bc6813f32ed371df65311724e96dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/573120551a0bc6813f32ed371df65311724e96dd/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9bb91b4a7caaab185d029d9c093c520366462d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9bb91b4a7caaab185d029d9c093c520366462d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9bb91b4a7caaab185d029d9c093c520366462d8"}], "stats": {"total": 338, "additions": 245, "deletions": 93}, "files": [{"sha": "886657568ae79be066917fc982a144b8110b01a3", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=573120551a0bc6813f32ed371df65311724e96dd", "patch": "@@ -297,8 +297,7 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n \n   void visit (TyTy::ParamType &param) override\n   {\n-    TyTy::TyVar var (param.get_ty_ref ());\n-    var.get_tyty ()->accept_vis (*this);\n+    param.resolve ()->accept_vis (*this);\n   }\n \n   void visit (TyTy::FnType &type) override"}, {"sha": "15aba9b101592c3793defdf20bb3fa25da25d422", "filename": "gcc/rust/backend/rust-compile-implitem.h", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h?ref=573120551a0bc6813f32ed371df65311724e96dd", "patch": "@@ -35,9 +35,10 @@ class CompileInherentImplItem : public HIRCompileBase\n \n public:\n   static void Compile (TyTy::BaseType *self, HIR::InherentImplItem *item,\n-\t\t       Context *ctx, bool compile_fns)\n+\t\t       Context *ctx, bool compile_fns,\n+\t\t       TyTy::BaseType *concrete = nullptr)\n   {\n-    CompileInherentImplItem compiler (self, ctx, compile_fns);\n+    CompileInherentImplItem compiler (self, ctx, compile_fns, concrete);\n     item->accept_vis (compiler);\n   }\n \n@@ -92,6 +93,21 @@ class CompileInherentImplItem : public HIRCompileBase\n       }\n \n     TyTy::FnType *fntype = static_cast<TyTy::FnType *> (fntype_tyty);\n+    if (fntype->has_subsititions_defined ())\n+      {\n+\t// we cant do anything for this only when it is used\n+\tif (concrete == nullptr)\n+\t  return;\n+\telse\n+\t  {\n+\t    rust_assert (concrete->get_kind () == TyTy::TypeKind::FNDEF);\n+\t    fntype = static_cast<TyTy::FnType *> (concrete);\n+\n+\t    // override the Hir Lookups for the substituions in this context\n+\t    fntype->override_context ();\n+\t  }\n+      }\n+\n     // convert to the actual function type\n     ::Btype *compiled_fn_type = TyTyResolveCompile::compile (ctx, fntype);\n \n@@ -111,7 +127,6 @@ class CompileInherentImplItem : public HIRCompileBase\n     ctx->insert_function_decl (fntype->get_ty_ref (), fndecl);\n \n     // setup the params\n-\n     TyTy::BaseType *tyret = fntype->get_return_type ();\n     std::vector<Bvariable *> param_vars;\n \n@@ -431,12 +446,15 @@ class CompileInherentImplItem : public HIRCompileBase\n   }\n \n private:\n-  CompileInherentImplItem (TyTy::BaseType *self, Context *ctx, bool compile_fns)\n-    : HIRCompileBase (ctx), self (self), compile_fns (compile_fns)\n+  CompileInherentImplItem (TyTy::BaseType *self, Context *ctx, bool compile_fns,\n+\t\t\t   TyTy::BaseType *concrete)\n+    : HIRCompileBase (ctx), self (self), compile_fns (compile_fns),\n+      concrete (concrete)\n   {}\n \n   TyTy::BaseType *self;\n   bool compile_fns;\n+  TyTy::BaseType *concrete;\n };\n \n } // namespace Compile"}, {"sha": "90c4eeb3e18508d4afc0a24b9b28963da1e85758", "filename": "gcc/rust/backend/rust-compile-resolve-path.cc", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc?ref=573120551a0bc6813f32ed371df65311724e96dd", "patch": "@@ -78,19 +78,50 @@ ResolvePathRef::visit (HIR::PathInExpression &expr)\n   Bfunction *fn = nullptr;\n   if (!ctx->lookup_function_decl (lookup->get_ty_ref (), &fn))\n     {\n-      // it must resolve to some kind of HIR::Item\n+      // it must resolve to some kind of HIR::Item or HIR::InheritImplItem\n       HIR::Item *resolved_item = ctx->get_mappings ()->lookup_hir_item (\n \texpr.get_mappings ().get_crate_num (), ref);\n-      if (resolved_item == nullptr)\n+      if (resolved_item != nullptr)\n \t{\n-\t  rust_error_at (expr.get_locus (), \"failed to lookup definition decl\");\n-\t  return;\n+\t  if (!lookup->has_subsititions_defined ())\n+\t    CompileItem::compile (resolved_item, ctx);\n+\t  else\n+\t    CompileItem::compile (resolved_item, ctx, true, lookup);\n \t}\n-\n-      if (!lookup->has_subsititions_defined ())\n-\tCompileItem::compile (resolved_item, ctx);\n       else\n-\tCompileItem::compile (resolved_item, ctx, true, lookup);\n+\t{\n+\t  HirId parent_impl_id = UNKNOWN_HIRID;\n+\t  HIR::InherentImplItem *resolved_item\n+\t    = ctx->get_mappings ()->lookup_hir_implitem (\n+\t      expr.get_mappings ().get_crate_num (), ref, &parent_impl_id);\n+\t  if (resolved_item != nullptr)\n+\t    {\n+\t      rust_assert (parent_impl_id != UNKNOWN_HIRID);\n+\t      HIR::Item *impl_ref = ctx->get_mappings ()->lookup_hir_item (\n+\t\texpr.get_mappings ().get_crate_num (), parent_impl_id);\n+\t      rust_assert (impl_ref != nullptr);\n+\t      HIR::InherentImpl *impl\n+\t\t= static_cast<HIR::InherentImpl *> (impl_ref);\n+\n+\t      TyTy::BaseType *self = nullptr;\n+\t      bool ok = ctx->get_tyctx ()->lookup_type (\n+\t\timpl->get_type ()->get_mappings ().get_hirid (), &self);\n+\t      rust_assert (ok);\n+\n+\t      if (!lookup->has_subsititions_defined ())\n+\t\tCompileInherentImplItem::Compile (self, resolved_item, ctx,\n+\t\t\t\t\t\t  true);\n+\t      else\n+\t\tCompileInherentImplItem::Compile (self, resolved_item, ctx,\n+\t\t\t\t\t\t  true, lookup);\n+\t    }\n+\t  else\n+\t    {\n+\t      rust_error_at (expr.get_locus (),\n+\t\t\t     \"failed to lookup definition decl\");\n+\t      return;\n+\t    }\n+\t}\n \n       if (!ctx->lookup_function_decl (lookup->get_ty_ref (), &fn))\n \t{"}, {"sha": "7b1b2ffa8ab56b0b308e8df021d67c1451bc9b7e", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=573120551a0bc6813f32ed371df65311724e96dd", "patch": "@@ -130,7 +130,7 @@ CompileExpr::visit (HIR::MethodCallExpr &expr)\n       // resolve it now\n       HIR::InherentImplItem *resolved_item\n \t= ctx->get_mappings ()->lookup_hir_implitem (\n-\t  expr.get_mappings ().get_crate_num (), ref);\n+\t  expr.get_mappings ().get_crate_num (), ref, nullptr);\n       if (resolved_item == nullptr)\n \t{\n \t  rust_error_at (expr.get_locus (), \"failed to lookup forward decl\");"}, {"sha": "3ddc62cad2f0935642b5cfd5fdf2d145f0f309ea", "filename": "gcc/rust/hir/rust-ast-lower-implitem.h", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h?ref=573120551a0bc6813f32ed371df65311724e96dd", "patch": "@@ -34,9 +34,10 @@ class ASTLowerImplItem : public ASTLoweringBase\n   using Rust::HIR::ASTLoweringBase::visit;\n \n public:\n-  static HIR::InherentImplItem *translate (AST::InherentImplItem *item)\n+  static HIR::InherentImplItem *translate (AST::InherentImplItem *item,\n+\t\t\t\t\t   HirId parent_impl_id)\n   {\n-    ASTLowerImplItem resolver;\n+    ASTLowerImplItem resolver (parent_impl_id);\n     item->accept_vis (resolver);\n     rust_assert (resolver.translated != nullptr);\n     return resolver.translated;\n@@ -76,7 +77,8 @@ class ASTLowerImplItem : public ASTLoweringBase\n \t\t\t\t\touter_attrs, constant.get_locus ());\n \n     mappings->insert_hir_implitem (mapping.get_crate_num (),\n-\t\t\t\t   mapping.get_hirid (), translated);\n+\t\t\t\t   mapping.get_hirid (), parent_impl_id,\n+\t\t\t\t   translated);\n     mappings->insert_location (crate_num, mapping.get_hirid (),\n \t\t\t       constant.get_locus ());\n   }\n@@ -144,7 +146,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n \t\t\t   std::move (vis), std::move (outer_attrs), locus);\n \n     mappings->insert_hir_implitem (mapping.get_crate_num (),\n-\t\t\t\t   mapping.get_hirid (), fn);\n+\t\t\t\t   mapping.get_hirid (), parent_impl_id, fn);\n     mappings->insert_location (crate_num, mapping.get_hirid (),\n \t\t\t       function.get_locus ());\n \n@@ -221,7 +223,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n \t\t\t std::move (outer_attrs), locus);\n \n     mappings->insert_hir_implitem (mapping.get_crate_num (),\n-\t\t\t\t   mapping.get_hirid (), mth);\n+\t\t\t\t   mapping.get_hirid (), parent_impl_id, mth);\n     mappings->insert_location (crate_num, mapping.get_hirid (),\n \t\t\t       method.get_locus ());\n \n@@ -246,13 +248,15 @@ class ASTLowerImplItem : public ASTLoweringBase\n   }\n \n private:\n-  ASTLowerImplItem () : translated (nullptr) {}\n+  ASTLowerImplItem (HirId parent_impl_id)\n+    : translated (nullptr), parent_impl_id (parent_impl_id)\n+  {}\n \n   HIR::InherentImplItem *translated;\n+  HirId parent_impl_id;\n };\n \n } // namespace HIR\n-\n } // namespace Rust\n \n #endif // RUST_AST_LOWER_IMPLITEM_H"}, {"sha": "6f98b239593318ad0b1a7dab190d8e80f7e0446a", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=573120551a0bc6813f32ed371df65311724e96dd", "patch": "@@ -306,27 +306,35 @@ class ASTLoweringItem : public ASTLoweringBase\n   {\n     std::vector<HIR::Attribute> inner_attrs;\n     std::vector<HIR::Attribute> outer_attrs;\n-    std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n     std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n \n     HIR::WhereClause where_clause (std::move (where_clause_items));\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n+\n+    std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n+    if (impl_block.has_generics ())\n+      {\n+\tgeneric_params\n+\t  = lower_generic_params (impl_block.get_generic_params ());\n+      }\n+\n     HIR::Type *trait_type\n       = ASTLoweringType::translate (impl_block.get_type ().get ());\n \n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, impl_block.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n+\n     std::vector<std::unique_ptr<HIR::InherentImplItem> > impl_items;\n     for (auto &impl_item : impl_block.get_impl_items ())\n       {\n \tHIR::InherentImplItem *lowered\n-\t  = ASTLowerImplItem::translate (impl_item.get ());\n+\t  = ASTLowerImplItem::translate (impl_item.get (),\n+\t\t\t\t\t mapping.get_hirid ());\n \timpl_items.push_back (std::unique_ptr<HIR::InherentImplItem> (lowered));\n       }\n \n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, impl_block.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n-\n     translated\n       = new HIR::InherentImpl (mapping, std::move (impl_items),\n \t\t\t       std::move (generic_params),"}, {"sha": "c9723f8ff10db7f51f3f875ee0fa7e9b2611a9da", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=573120551a0bc6813f32ed371df65311724e96dd", "patch": "@@ -2915,6 +2915,11 @@ class Impl : public VisItem\n \n   std::unique_ptr<Type> &get_type () { return trait_type; };\n \n+  std::vector<std::unique_ptr<GenericParam> > &get_generic_params ()\n+  {\n+    return generic_params;\n+  }\n+\n protected:\n   // Mega-constructor\n   Impl (Analysis::NodeMapping mappings,"}, {"sha": "d88b275f587052345b04a979eb98e22ce041d517", "filename": "gcc/rust/resolve/rust-ast-resolve-implitem.h", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h?ref=573120551a0bc6813f32ed371df65311724e96dd", "patch": "@@ -34,13 +34,19 @@ class ResolveToplevelImplItem : public ResolverBase\n   static void go (AST::InherentImplItem *item, AST::Type *base)\n   {\n     ResolveToplevelImplItem resolver (base);\n+    if (resolver.base_path.is_empty ())\n+      {\n+\trust_error_at (base->get_locus_slow (),\n+\t\t       \"failed to resolve simple path\");\n+\treturn;\n+      }\n     item->accept_vis (resolver);\n-  };\n+  }\n \n   void visit (AST::ConstantItem &constant) override\n   {\n     std::string identifier\n-      = base->as_string () + \"::\" + constant.get_identifier ();\n+      = base_path.as_string () + \"::\" + constant.get_identifier ();\n     resolver->get_name_scope ().insert (\n       identifier, constant.get_node_id (), constant.get_locus (), false,\n       [&] (std::string, NodeId, Location locus) -> void {\n@@ -55,7 +61,7 @@ class ResolveToplevelImplItem : public ResolverBase\n   void visit (AST::Function &function) override\n   {\n     std::string identifier\n-      = base->as_string () + \"::\" + function.get_function_name ();\n+      = base_path.as_string () + \"::\" + function.get_function_name ();\n     resolver->get_name_scope ().insert (\n       identifier, function.get_node_id (), function.get_locus (), false,\n       [&] (std::string, NodeId, Location locus) -> void {\n@@ -70,7 +76,7 @@ class ResolveToplevelImplItem : public ResolverBase\n   void visit (AST::Method &method) override\n   {\n     std::string identifier\n-      = base->as_string () + \"::\" + method.get_method_name ();\n+      = base_path.as_string () + \"::\" + method.get_method_name ();\n     resolver->get_name_scope ().insert (\n       identifier, method.get_node_id (), method.get_locus (), false,\n       [&] (std::string, NodeId, Location locus) -> void {\n@@ -84,10 +90,14 @@ class ResolveToplevelImplItem : public ResolverBase\n \n private:\n   ResolveToplevelImplItem (AST::Type *base)\n-    : ResolverBase (UNKNOWN_NODEID), base (base)\n-  {}\n+    : ResolverBase (UNKNOWN_NODEID), base (base),\n+      base_path (AST::SimplePath::create_empty ())\n+  {\n+    ResolveTypeToSimplePath::go (base, base_path, true);\n+  }\n \n   AST::Type *base;\n+  AST::SimplePath base_path;\n };\n \n } // namespace Resolver"}, {"sha": "1074031669bdc72453f0f44ed2754376da42874e", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=573120551a0bc6813f32ed371df65311724e96dd", "patch": "@@ -152,6 +152,17 @@ class ResolveItem : public ResolverBase\n \n   void visit (AST::InherentImpl &impl_block) override\n   {\n+    NodeId scope_node_id = impl_block.get_node_id ();\n+    resolver->get_type_scope ().push (scope_node_id);\n+\n+    if (impl_block.has_generics ())\n+      {\n+\tfor (auto &generic : impl_block.get_generic_params ())\n+\t  {\n+\t    ResolveGenericParam::go (generic.get (), impl_block.get_node_id ());\n+\t  }\n+      }\n+\n     NodeId resolved_node = ResolveType::go (impl_block.get_type ().get (),\n \t\t\t\t\t    impl_block.get_node_id ());\n     if (resolved_node == UNKNOWN_NODEID)\n@@ -164,6 +175,7 @@ class ResolveItem : public ResolverBase\n       impl_item->accept_vis (*this);\n \n     resolver->get_type_scope ().peek ()->clear_name (\"Self\", resolved_node);\n+    resolver->get_type_scope ().pop ();\n   }\n \n   void visit (AST::Method &method) override"}, {"sha": "9e7568e54cb781cd79cc9e382b7abeefdfa928f5", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 46, "deletions": 21, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=573120551a0bc6813f32ed371df65311724e96dd", "patch": "@@ -25,53 +25,78 @@\n namespace Rust {\n namespace Resolver {\n \n-class ResolveTypePath : public ResolverBase\n+class ResolveTypeToSimplePath : public ResolverBase\n {\n   using Rust::Resolver::ResolverBase::visit;\n \n public:\n-  static NodeId go (AST::TypePath &path, NodeId parent)\n+  static bool go (AST::Type *type, AST::SimplePath &simple_path_result,\n+\t\t  bool path_only = false)\n   {\n-    ResolveTypePath resolver (parent);\n-    resolver.resolve (path);\n-    return resolver.resolved_node;\n+    ResolveTypeToSimplePath resolver (simple_path_result, path_only);\n+    type->accept_vis (resolver);\n+    return !resolver.type_seg_failed_flag;\n   }\n \n-  void visit (AST::TypePathSegmentGeneric &seg) override;\n-\n-  void visit (AST::TypePathSegment &seg) override;\n-\n-private:\n-  void resolve (AST::TypePath &path)\n+  void visit (AST::TypePath &path) override\n   {\n+    segs.reserve (path.get_num_segments ());\n     for (auto &seg : path.get_segments ())\n       {\n \tseg->accept_vis (*this);\n \tif (type_seg_failed_flag)\n \t  return;\n       }\n \n-    if (path_buffer.empty ())\n+    if (segs.empty ())\n       {\n \trust_error_at (path.get_locus (), \"failed to resolve path: %s\",\n \t\t       path.as_string ().c_str ());\n \treturn;\n       }\n \n-    if (!resolver->get_type_scope ().lookup (path_buffer, &resolved_node))\n-      {\n-\trust_error_at (path.get_locus (), \"failed to resolve TypePath: %s\",\n-\t\t       path_buffer.c_str ());\n-\treturn;\n-      }\n+    bool has_opening_scope_res = false;\n+    result = AST::SimplePath (std::move (segs), has_opening_scope_res,\n+\t\t\t      path.get_locus ());\n   }\n \n-  ResolveTypePath (NodeId parent)\n-    : ResolverBase (parent), type_seg_failed_flag (false)\n+  void visit (AST::TypePathSegmentGeneric &seg) override;\n+\n+  void visit (AST::TypePathSegment &seg) override;\n+\n+private:\n+  ResolveTypeToSimplePath (AST::SimplePath &simple_path_result, bool path_only)\n+    : ResolverBase (UNKNOWN_NODEID), type_seg_failed_flag (false),\n+      result (simple_path_result), path_only_flag (path_only)\n   {}\n \n-  std::string path_buffer;\n   bool type_seg_failed_flag;\n+  std::vector<AST::SimplePathSegment> segs;\n+  AST::SimplePath &result;\n+  bool path_only_flag;\n+};\n+\n+class ResolveTypePath\n+{\n+public:\n+  static NodeId go (AST::TypePath &path, NodeId parent)\n+  {\n+    AST::SimplePath path_buffer = AST::SimplePath::create_empty ();\n+    if (!ResolveTypeToSimplePath::go (&path, path_buffer))\n+      return UNKNOWN_NODEID;\n+\n+    auto resolver = Resolver::get ();\n+    NodeId resolved_node = UNKNOWN_NODEID;\n+    if (!resolver->get_type_scope ().lookup (path_buffer.as_string (),\n+\t\t\t\t\t     &resolved_node))\n+      {\n+\trust_error_at (path.get_locus_slow (), \"failed to resolve TypePath: %s\",\n+\t\t       path_buffer.as_string ().c_str ());\n+\treturn UNKNOWN_NODEID;\n+      }\n+\n+    return resolved_node;\n+  }\n };\n \n class ResolveType : public ResolverBase"}, {"sha": "4cc1a930efb41b341e360059d2de2bde1f963118", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=573120551a0bc6813f32ed371df65311724e96dd", "patch": "@@ -375,11 +375,14 @@ ResolveStructExprField::visit (AST::StructExprFieldIdentifier &field)\n // rust-ast-resolve-type.h\n \n void\n-ResolveTypePath::visit (AST::TypePathSegmentGeneric &seg)\n+ResolveTypeToSimplePath::visit (AST::TypePathSegmentGeneric &seg)\n {\n-  AST::GenericArgs &generics = seg.get_generic_args ();\n-  for (auto &gt : generics.get_type_args ())\n-    ResolveType::go (gt.get (), UNKNOWN_NODEID);\n+  if (!path_only_flag)\n+    {\n+      AST::GenericArgs &generics = seg.get_generic_args ();\n+      for (auto &gt : generics.get_type_args ())\n+\tResolveType::go (gt.get (), UNKNOWN_NODEID);\n+    }\n \n   if (seg.is_error ())\n     {\n@@ -389,14 +392,12 @@ ResolveTypePath::visit (AST::TypePathSegmentGeneric &seg)\n       return;\n     }\n \n-  if (seg.get_separating_scope_resolution ())\n-    path_buffer += \"::\";\n-\n-  path_buffer += seg.get_ident_segment ().as_string ();\n+  segs.push_back (AST::SimplePathSegment (seg.get_ident_segment ().as_string (),\n+\t\t\t\t\t  seg.get_locus ()));\n }\n \n void\n-ResolveTypePath::visit (AST::TypePathSegment &seg)\n+ResolveTypeToSimplePath::visit (AST::TypePathSegment &seg)\n {\n   if (seg.is_error ())\n     {\n@@ -406,10 +407,8 @@ ResolveTypePath::visit (AST::TypePathSegment &seg)\n       return;\n     }\n \n-  if (seg.get_separating_scope_resolution ())\n-    path_buffer += \"::\";\n-\n-  path_buffer += seg.get_ident_segment ().as_string ();\n+  segs.push_back (AST::SimplePathSegment (seg.get_ident_segment ().as_string (),\n+\t\t\t\t\t  seg.get_locus ()));\n }\n \n // rust-ast-resolve-expr.h\n@@ -465,8 +464,8 @@ ResolvePath::resolve_path (AST::PathInExpression *expr)\n     }\n   else\n     {\n-      rust_error_at (expr->get_locus (), \"unknown path %s\",\n-\t\t     expr->as_string ().c_str ());\n+      rust_error_at (expr->get_locus (), \"unknown path %s lookup %s\",\n+\t\t     expr->as_string ().c_str (), path_buf.c_str ());\n     }\n }\n "}, {"sha": "98570459d2755900b3f0be95876ef8a28a94a6b4", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=573120551a0bc6813f32ed371df65311724e96dd", "patch": "@@ -33,9 +33,11 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n   using Rust::Resolver::TypeCheckBase::visit;\n \n public:\n-  static void Resolve (HIR::InherentImplItem *item, TyTy::BaseType *self)\n+  static void\n+  Resolve (HIR::InherentImplItem *item, TyTy::BaseType *self,\n+\t   std::vector<TyTy::SubstitutionParamMapping> substitutions)\n   {\n-    TypeCheckTopLevelImplItem resolver (self);\n+    TypeCheckTopLevelImplItem resolver (self, substitutions);\n     item->accept_vis (resolver);\n   }\n \n@@ -50,7 +52,6 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \n   void visit (HIR::Function &function) override\n   {\n-    std::vector<TyTy::SubstitutionParamMapping> substitions;\n     if (function.has_generics ())\n       {\n \tfor (auto &generic_param : function.get_generic_params ())\n@@ -59,7 +60,7 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \t      = TypeResolveGenericParam::Resolve (generic_param.get ());\n \t    context->insert_type (generic_param->get_mappings (), param_type);\n \n-\t    substitions.push_back (\n+\t    substitutions.push_back (\n \t      TyTy::SubstitutionParamMapping (generic_param, param_type));\n \t  }\n       }\n@@ -97,13 +98,12 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \n     auto fnType = new TyTy::FnType (function.get_mappings ().get_hirid (),\n \t\t\t\t    std::move (params), ret_type,\n-\t\t\t\t    std::move (substitions));\n+\t\t\t\t    std::move (substitutions));\n     context->insert_type (function.get_mappings (), fnType);\n   }\n \n   void visit (HIR::Method &method) override\n   {\n-    std::vector<TyTy::SubstitutionParamMapping> substitions;\n     if (method.has_generics ())\n       {\n \tfor (auto &generic_param : method.get_generic_params ())\n@@ -112,7 +112,7 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \t      = TypeResolveGenericParam::Resolve (generic_param.get ());\n \t    context->insert_type (generic_param->get_mappings (), param_type);\n \n-\t    substitions.push_back (\n+\t    substitutions.push_back (\n \t      TyTy::SubstitutionParamMapping (generic_param, param_type));\n \t  }\n       }\n@@ -164,16 +164,19 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \n     auto fnType = new TyTy::FnType (method.get_mappings ().get_hirid (),\n \t\t\t\t    std::move (params), ret_type,\n-\t\t\t\t    std::move (substitions));\n+\t\t\t\t    std::move (substitutions));\n     context->insert_type (method.get_mappings (), fnType);\n   }\n \n private:\n-  TypeCheckTopLevelImplItem (TyTy::BaseType *self)\n-    : TypeCheckBase (), self (self)\n+  TypeCheckTopLevelImplItem (\n+    TyTy::BaseType *self,\n+    std::vector<TyTy::SubstitutionParamMapping> substitutions)\n+    : TypeCheckBase (), self (self), substitutions (substitutions)\n   {}\n \n   TyTy::BaseType *self;\n+  std::vector<TyTy::SubstitutionParamMapping> substitutions;\n };\n \n class TypeCheckImplItem : public TypeCheckBase"}, {"sha": "702c6c71b931f69b94bc099ef0ddb35b2b5ff1ea", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=573120551a0bc6813f32ed371df65311724e96dd", "patch": "@@ -189,15 +189,30 @@ class TypeCheckTopLevel : public TypeCheckBase\n \n   void visit (HIR::InherentImpl &impl_block) override\n   {\n+    std::vector<TyTy::SubstitutionParamMapping> substitutions;\n+    if (impl_block.has_generics ())\n+      {\n+\tfor (auto &generic_param : impl_block.get_generic_params ())\n+\t  {\n+\t    auto param_type\n+\t      = TypeResolveGenericParam::Resolve (generic_param.get ());\n+\t    context->insert_type (generic_param->get_mappings (), param_type);\n+\n+\t    substitutions.push_back (\n+\t      TyTy::SubstitutionParamMapping (generic_param, param_type));\n+\t  }\n+      }\n+\n     auto self = TypeCheckType::Resolve (impl_block.get_type ().get ());\n-    if (self == nullptr)\n+    if (self == nullptr || self->get_kind () == TyTy::TypeKind::ERROR)\n       {\n \trust_error_at (impl_block.get_locus (), \"failed to resolve impl type\");\n \treturn;\n       }\n \n     for (auto &impl_item : impl_block.get_impl_items ())\n-      TypeCheckTopLevelImplItem::Resolve (impl_item.get (), self);\n+      TypeCheckTopLevelImplItem::Resolve (impl_item.get (), self,\n+\t\t\t\t\t  substitutions);\n   }\n \n private:"}, {"sha": "891618efc7045265ba6a2979509367849e1aa8d4", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=573120551a0bc6813f32ed371df65311724e96dd", "patch": "@@ -260,16 +260,18 @@ Mappings::lookup_hir_item (CrateNum crateNum, HirId id)\n \n void\n Mappings::insert_hir_implitem (CrateNum crateNum, HirId id,\n+\t\t\t       HirId parent_impl_id,\n \t\t\t       HIR::InherentImplItem *item)\n {\n-  rust_assert (lookup_hir_implitem (crateNum, id) == nullptr);\n-\n-  hirImplItemMappings[crateNum][id] = item;\n+  rust_assert (lookup_hir_implitem (crateNum, id, nullptr) == nullptr);\n+  hirImplItemMappings[crateNum][id]\n+    = std::pair<HirId, HIR::InherentImplItem *> (parent_impl_id, item);\n   nodeIdToHirMappings[crateNum][item->get_impl_mappings ().get_nodeid ()] = id;\n }\n \n HIR::InherentImplItem *\n-Mappings::lookup_hir_implitem (CrateNum crateNum, HirId id)\n+Mappings::lookup_hir_implitem (CrateNum crateNum, HirId id,\n+\t\t\t       HirId *parent_impl_id)\n {\n   auto it = hirImplItemMappings.find (crateNum);\n   if (it == hirImplItemMappings.end ())\n@@ -279,7 +281,11 @@ Mappings::lookup_hir_implitem (CrateNum crateNum, HirId id)\n   if (iy == it->second.end ())\n     return nullptr;\n \n-  return iy->second;\n+  std::pair<HirId, HIR::InherentImplItem *> &ref = iy->second;\n+  if (parent_impl_id != nullptr)\n+    *parent_impl_id = ref.first;\n+\n+  return ref.second;\n }\n \n void"}, {"sha": "2e8a629eba29684537cde224f1bbe2814b0f1070", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=573120551a0bc6813f32ed371df65311724e96dd", "patch": "@@ -109,9 +109,10 @@ class Mappings\n   void insert_hir_item (CrateNum crateNum, HirId id, HIR::Item *item);\n   HIR::Item *lookup_hir_item (CrateNum crateNum, HirId id);\n \n-  void insert_hir_implitem (CrateNum crateNum, HirId id,\n+  void insert_hir_implitem (CrateNum crateNum, HirId id, HirId parent_impl_id,\n \t\t\t    HIR::InherentImplItem *item);\n-  HIR::InherentImplItem *lookup_hir_implitem (CrateNum crateNum, HirId id);\n+  HIR::InherentImplItem *lookup_hir_implitem (CrateNum crateNum, HirId id,\n+\t\t\t\t\t      HirId *parent_impl_id);\n \n   void insert_hir_expr (CrateNum crateNum, HirId id, HIR::Expr *expr);\n   HIR::Expr *lookup_hir_expr (CrateNum crateNum, HirId id);\n@@ -165,7 +166,7 @@ class Mappings\n       {\n \tfor (auto iy = it->second.begin (); iy != it->second.end (); iy++)\n \t  {\n-\t    if (!cb (iy->first, iy->second))\n+\t    if (!cb (iy->first, iy->second.second))\n \t      return;\n \t  }\n       }\n@@ -193,7 +194,8 @@ class Mappings\n   std::map<CrateNum, std::map<HirId, HIR::FunctionParam *> > hirParamMappings;\n   std::map<CrateNum, std::map<HirId, HIR::StructExprField *> >\n     hirStructFieldMappings;\n-  std::map<CrateNum, std::map<HirId, HIR::InherentImplItem *> >\n+  std::map<CrateNum,\n+\t   std::map<HirId, std::pair<HirId, HIR::InherentImplItem *> > >\n     hirImplItemMappings;\n   std::map<CrateNum, std::map<HirId, HIR::SelfParam *> > hirSelfParamMappings;\n "}, {"sha": "ad5a1f4037bcec92a3bbb18fbe61ee92421bcb04", "filename": "gcc/testsuite/rust.test/compile/generics8.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics8.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/573120551a0bc6813f32ed371df65311724e96dd/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics8.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics8.rs?ref=573120551a0bc6813f32ed371df65311724e96dd", "patch": "@@ -0,0 +1,15 @@\n+struct GenericStruct<T>(T, usize);\n+\n+impl<T> GenericStruct<T> {\n+    fn new(a: T, b: usize) -> Self {\n+        GenericStruct(a, b)\n+    }\n+}\n+\n+fn main() {\n+    let a: GenericStruct<i32> = GenericStruct::<i32>::new(123, 456);\n+\n+    let b: GenericStruct<u32> = GenericStruct::<_>::new(123, 456);\n+\n+    let c: GenericStruct<f32> = GenericStruct::new(123f32, 456);\n+}"}]}