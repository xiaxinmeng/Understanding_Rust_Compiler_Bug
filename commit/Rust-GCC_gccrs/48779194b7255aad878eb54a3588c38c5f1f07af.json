{"sha": "48779194b7255aad878eb54a3588c38c5f1f07af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg3NzkxOTRiNzI1NWFhZDg3OGViNTRhMzU4OGMzOGM1ZjFmMDdhZg==", "commit": {"author": {"name": "Volker Reichelt", "email": "reichelt@igpm.rwth-aachen.de", "date": "2006-07-28T23:45:11Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2006-07-28T23:45:11Z"}, "message": "Makefile.in: Use $(HEADER_H) instead of header.h in dependencies and variables used in...\n\n\t* Makefile.in: Use $(HEADER_H) instead of header.h in dependencies\n\tand variables used in dependencies.\n\nada/ cp/ fortran/ java/ objc/ objcp/ treelang/\n\n\t* Make-lang.in: Use $(HEADER_H) instead of header.h in dependencies.\n\nFrom-SVN: r115802", "tree": {"sha": "e1bbf2bd74da62ae59bd1f7541f28061061bdf28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1bbf2bd74da62ae59bd1f7541f28061061bdf28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48779194b7255aad878eb54a3588c38c5f1f07af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48779194b7255aad878eb54a3588c38c5f1f07af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48779194b7255aad878eb54a3588c38c5f1f07af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48779194b7255aad878eb54a3588c38c5f1f07af/comments", "author": null, "committer": null, "parents": [{"sha": "42b304f1ce846092056b7daa32c6288e285420fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42b304f1ce846092056b7daa32c6288e285420fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42b304f1ce846092056b7daa32c6288e285420fa"}], "stats": {"total": 304, "additions": 169, "deletions": 135}, "files": [{"sha": "ba7d040a7f81d61b3055b518d651cd6b11758b79", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48779194b7255aad878eb54a3588c38c5f1f07af", "patch": "@@ -1,3 +1,8 @@\n+2006-07-28  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\t* Makefile.in: Use $(HEADER_H) instead of header.h in dependencies\n+\tand variables used in dependencies.\n+\n 2006-07-27  Arjan van de Ven <arjan@linux.intel.com>\n \n \t* config/i386/i386.md (stack_tls_protect_set_di) Use %gs rather than"}, {"sha": "48333caf91c37c99c7f777c6ab9e2989b00b76b1", "filename": "gcc/Makefile.in", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=48779194b7255aad878eb54a3588c38c5f1f07af", "patch": "@@ -758,7 +758,7 @@ PARAMS_H = params.h params.def\n BUILTINS_DEF = builtins.def sync-builtins.def omp-builtins.def\n TREE_H = tree.h tree.def $(MACHMODE_H) tree-check.h $(BUILTINS_DEF) \\\n           input.h statistics.h vec.h treestruct.def $(HASHTAB_H)\n-BASIC_BLOCK_H = basic-block.h bitmap.h sbitmap.h varray.h $(PARTITION_H) \\\n+BASIC_BLOCK_H = basic-block.h bitmap.h sbitmap.h $(VARRAY_H) $(PARTITION_H) \\\n           hard-reg-set.h cfghooks.h $(OBSTACK_H)\n GCOV_IO_H = gcov-io.h gcov-iov.h auto-host.h\n COVERAGE_H = coverage.h $(GCOV_IO_H)\n@@ -770,10 +770,10 @@ FLAGS_H = flags.h options.h\n FUNCTION_H = function.h $(TREE_H) $(HASHTAB_H)\n EXPR_H = expr.h insn-config.h $(FUNCTION_H) $(RTL_H) $(FLAGS_H) $(TREE_H) $(MACHMODE_H) $(EMIT_RTL_H)\n OPTABS_H = optabs.h insn-codes.h\n-REGS_H = regs.h varray.h $(MACHMODE_H) $(OBSTACK_H) $(BASIC_BLOCK_H) $(FUNCTION_H)\n+REGS_H = regs.h $(VARRAY_H) $(MACHMODE_H) $(OBSTACK_H) $(BASIC_BLOCK_H) $(FUNCTION_H)\n RESOURCE_H = resource.h hard-reg-set.h\n SCHED_INT_H = sched-int.h $(INSN_ATTR_H) $(BASIC_BLOCK_H) $(RTL_H)\n-INTEGRATE_H = integrate.h varray.h\n+INTEGRATE_H = integrate.h $(VARRAY_H)\n CFGLAYOUT_H = cfglayout.h $(BASIC_BLOCK_H)\n CFGLOOP_H = cfgloop.h $(BASIC_BLOCK_H) $(RTL_H)\n IPA_UTILS_H = ipa-utils.h $(TREE_H) $(CGRAPH_H) \n@@ -811,7 +811,7 @@ SCEV_H = tree-scalar-evolution.h $(GGC_H) tree-chrec.h $(PARAMS_H)\n LAMBDA_H = lambda.h $(TREE_H) vec.h $(GGC_H)\n TREE_DATA_REF_H = tree-data-ref.h $(LAMBDA_H)\n VARRAY_H = varray.h $(MACHMODE_H) $(SYSTEM_H) coretypes.h $(TM_H)\n-TREE_INLINE_H = tree-inline.h varray.h $(SPLAY_TREE_H)\n+TREE_INLINE_H = tree-inline.h $(VARRAY_H) $(SPLAY_TREE_H)\n REAL_H = real.h $(MACHMODE_H)\n \n #\f\n@@ -1835,7 +1835,7 @@ stor-layout.o : stor-layout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    toplev.h\n tree-ssa-structalias.o: tree-ssa-structalias.c tree-ssa-structalias.h \\\n    $(SYSTEM_H) $(CONFIG_H) $(GGC_H) $(TREE_H) $(TREE_FLOW_H) \\\n-   $(TM_H) coretypes.h cgraph.h tree-pass.h $(TIMEVAR_H) \\\n+   $(TM_H) coretypes.h $(CGRAPH_H) tree-pass.h $(TIMEVAR_H) \\\n    gt-tree-ssa-structalias.h $(PARAMS_H)\n tree-ssa.o : tree-ssa.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) output.h $(DIAGNOSTIC_H) \\\n@@ -1941,7 +1941,7 @@ tree-cfgcleanup.o : tree-cfgcleanup.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    tree-ssa-propagate.h\n rtl-factoring.o : rtl-factoring.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n    coretypes.h $(TM_H) $(BASIC_BLOCK_H) $(GGC_H) $(REGS_H) $(PARAMS_H) $(EXPR_H) \\\n-   addresses.h $(TM_P_H) tree-pass.h tree-flow.h timevar.h output.h\n+   addresses.h $(TM_P_H) tree-pass.h $(TREE_FLOW_H) $(TIMEVAR_H) output.h\n tree-tailcall.o : tree-tailcall.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) $(FUNCTION_H) $(TM_H) coretypes.h \\\n    $(TREE_DUMP_H) $(DIAGNOSTIC_H) except.h tree-pass.h $(FLAGS_H) langhooks.h \\\n@@ -1987,7 +1987,7 @@ tree-ssa-loop-unswitch.o : tree-ssa-loop-unswitch.c $(TREE_FLOW_H) \\\n    coretypes.h $(TREE_DUMP_H) tree-pass.h $(BASIC_BLOCK_H) hard-reg-set.h\n tree-ssa-address.o : tree-ssa-address.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) \\\n-   output.h diagnostic.h $(TIMEVAR_H) $(TM_H) coretypes.h $(TREE_DUMP_H) \\\n+   output.h $(DIAGNOSTIC_H) $(TIMEVAR_H) $(TM_H) coretypes.h $(TREE_DUMP_H) \\\n    tree-pass.h $(FLAGS_H) $(TREE_INLINE_H) $(RECOG_H) insn-config.h $(EXPR_H) \\\n    gt-tree-ssa-address.h $(GGC_H)\n tree-ssa-loop-niter.o : tree-ssa-loop-niter.c $(TREE_FLOW_H) $(CONFIG_H) \\\n@@ -2086,7 +2086,7 @@ tree-vect-analyze.o: tree-vect-analyze.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    tree-vectorizer.h $(TREE_DATA_REF_H) $(SCEV_H) $(EXPR_H) tree-chrec.h\n tree-vect-patterns.o: tree-vect-patterns.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) errors.h $(GGC_H) $(OPTABS_H) $(TREE_H) $(RTL_H) $(BASIC_BLOCK_H) \\\n-   diagnostic.h $(TREE_FLOW_H) $(TREE_DUMP_H) $(TIMEVAR_H) cfgloop.h \\\n+   $(DIAGNOSTIC_H) $(TREE_FLOW_H) $(TREE_DUMP_H) $(TIMEVAR_H) $(CFGLOOP_H) \\\n    tree-vectorizer.h $(TREE_DATA_REF_H) $(EXPR_H) $(TARGET_H)\n tree-vect-transform.o: tree-vect-transform.c $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TM_H) $(GGC_H) $(OPTABS_H) $(RECOG_H) $(TREE_H) $(RTL_H) \\\n@@ -2162,7 +2162,7 @@ passes.o : passes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(PARAMS_H) $(TM_P_H) reload.h dwarf2asm.h $(TARGET_H) \\\n    langhooks.h insn-flags.h $(CFGLAYOUT_H) $(REAL_H) $(CFGLOOP_H) \\\n    hosthooks.h $(CGRAPH_H) $(COVERAGE_H) tree-pass.h $(TREE_DUMP_H) \\\n-   $(GGC_H) $(INTEGRATE_H) $(CPPLIB_H) opts.h tree-flow.h $(TREE_INLINE_H)\n+   $(GGC_H) $(INTEGRATE_H) $(CPPLIB_H) opts.h $(TREE_FLOW_H) $(TREE_INLINE_H)\n \n main.o : main.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) toplev.h\n \n@@ -2204,7 +2204,7 @@ except.o : except.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    langhooks.h insn-config.h hard-reg-set.h $(BASIC_BLOCK_H) output.h \\\n    dwarf2asm.h dwarf2out.h toplev.h $(HASHTAB_H) intl.h $(GGC_H) \\\n    gt-except.h $(CGRAPH_H) $(INTEGRATE_H) $(DIAGNOSTIC_H) dwarf2.h \\\n-   $(TARGET_H) $(TM_P_H) tree-pass.h timevar.h\n+   $(TARGET_H) $(TM_P_H) tree-pass.h $(TIMEVAR_H)\n expr.o : expr.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) $(FUNCTION_H) $(REGS_H) $(EXPR_H) $(OPTABS_H) \\\n    libfuncs.h $(INSN_ATTR_H) insn-config.h $(RECOG_H) output.h \\\n@@ -2285,7 +2285,7 @@ simplify-rtx.o : simplify-rtx.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n cgraph.o : cgraph.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    langhooks.h toplev.h $(FLAGS_H) $(GGC_H) $(TARGET_H) $(CGRAPH_H) \\\n    gt-cgraph.h output.h intl.h $(BASIC_BLOCK_H) debug.h $(HASHTAB_H) \\\n-   $(TREE_INLINE_H) $(VARRAY_H) tree-dump.h\n+   $(TREE_INLINE_H) $(VARRAY_H) $(TREE_DUMP_H)\n cgraphunit.o : cgraphunit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(TREE_INLINE_H) toplev.h $(FLAGS_H) $(GGC_H) \\\n    $(TARGET_H) $(CGRAPH_H) intl.h pointer-set.h $(FUNCTION_H) $(TREE_GIMPLE_H) \\\n@@ -2294,11 +2294,10 @@ cgraphunit.o : cgraphunit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n ipa.o : ipa.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(CGRAPH_H) \n ipa-prop.o : ipa-prop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h  \\\n    langhooks.h $(GGC_H) $(TARGET_H) $(CGRAPH_H) ipa-prop.h \\\n-   tree-flow.h $(TM_H) tree-pass.h $(FLAGS_H) $(TREE_H)\n+   $(TREE_FLOW_H) $(TM_H) tree-pass.h $(FLAGS_H) $(TREE_H)\n ipa-cp.o : ipa-cp.c $(CONFIG_H) $(SYSTEM_H) coretypes.h  \\\n    langhooks.h $(TARGET_H) $(CGRAPH_H) ipa-prop.h  \\\n-   tree-flow.h $(TM_H) tree-pass.h $(FLAGS_H) $(TREE_H) \\\n-   diagnostic.h\n+   $(TREE_FLOW_H) $(TM_H) tree-pass.h $(FLAGS_H) $(TREE_H) $(DIAGNOSTIC_H)\n ipa-inline.o : ipa-inline.c gt-ipa-inline.h $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(TREE_INLINE_H) $(FLAGS_H) $(CGRAPH_H) intl.h \\\n    $(DIAGNOSTIC_H) $(FIBHEAP_H) $(PARAMS_H) $(TIMEVAR_H) tree-pass.h \\\n@@ -2337,10 +2336,10 @@ cse.o : cse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n    except.h $(TARGET_H) $(PARAMS_H) rtlhooks-def.h tree-pass.h $(REAL_H)\n web.o : web.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    hard-reg-set.h $(FLAGS_H) $(BASIC_BLOCK_H) $(FUNCTION_H) output.h toplev.h \\\n-   $(DF_H) $(OBSTACK_H) timevar.h tree-pass.h\n+   $(DF_H) $(OBSTACK_H) $(TIMEVAR_H) tree-pass.h\n see.o : see.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   hard-reg-set.h $(FLAGS_H) $(BASIC_BLOCK_H) function.h output.h toplev.h \\\n-   $(DF_H) $(OBSTACK_H) timevar.h tree-pass.h\n+   hard-reg-set.h $(FLAGS_H) $(BASIC_BLOCK_H) $(FUNCTION_H) output.h toplev.h \\\n+   $(DF_H) $(OBSTACK_H) $(TIMEVAR_H) tree-pass.h\n gcse.o : gcse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(REGS_H) hard-reg-set.h $(FLAGS_H) $(REAL_H) insn-config.h $(GGC_H) \\\n    $(RECOG_H) $(EXPR_H) $(BASIC_BLOCK_H) $(FUNCTION_H) output.h toplev.h \\\n@@ -2355,7 +2354,7 @@ lcm.o : lcm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n mode-switching.o : mode-switching.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(RTL_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n    $(INSN_ATTR_H) $(RECOG_H) $(BASIC_BLOCK_H) $(TM_P_H) $(FUNCTION_H) \\\n-   output.h tree-pass.h timevar.h $(REAL_H)\n+   output.h tree-pass.h $(TIMEVAR_H) $(REAL_H)\n tree-ssa-dce.o : tree-ssa-dce.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n     $(RTL_H) $(TM_P_H) $(TREE_FLOW_H) $(DIAGNOSTIC_H) $(TIMEVAR_H) $(TM_H) \\\n     coretypes.h $(TREE_DUMP_H) tree-pass.h $(FLAGS_H) $(BASIC_BLOCK_H) \\\n@@ -2394,13 +2393,13 @@ df-scan.o : df-scan.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n var-tracking.o : var-tracking.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(TREE_H) hard-reg-set.h insn-config.h reload.h $(FLAGS_H) \\\n    $(BASIC_BLOCK_H) output.h sbitmap.h alloc-pool.h $(FIBHEAP_H) $(HASHTAB_H) \\\n-   $(REGS_H) $(EXPR_H) timevar.h tree-pass.h\n+   $(REGS_H) $(EXPR_H) $(TIMEVAR_H) tree-pass.h\n conflict.o : conflict.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(OBSTACK_H) \\\n    $(HASHTAB_H) $(RTL_H) hard-reg-set.h $(BASIC_BLOCK_H)\n profile.o : profile.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) output.h $(REGS_H) $(EXPR_H) $(FUNCTION_H) \\\n    toplev.h $(COVERAGE_H) $(TREE_FLOW_H) value-prof.h cfghooks.h \\\n-   cfgloop.h timevar.h tree-pass.h\n+   $(CFGLOOP_H) $(TIMEVAR_H) tree-pass.h\n tree-profile.o : tree-profile.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(RTL_H) $(TREE_H) $(FLAGS_H) output.h $(REGS_H) $(EXPR_H) \\\n    $(FUNCTION_H) toplev.h $(COVERAGE_H) $(TREE_H) value-prof.h $(TREE_DUMP_H) \\\n@@ -2409,7 +2408,7 @@ value-prof.o : value-prof.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h value-prof.h $(EXPR_H) output.h $(FLAGS_H) \\\n    $(RECOG_H) insn-config.h $(OPTABS_H) $(REGS_H) $(GGC_H) $(DIAGNOSTIC_H) \\\n    $(TREE_H) $(COVERAGE_H) $(RTL_H) $(GCOV_IO_H) $(TREE_FLOW_H) \\\n-   tree-flow-inline.h timevar.h tree-pass.h\n+   tree-flow-inline.h $(TIMEVAR_H) tree-pass.h\n loop-doloop.o : loop-doloop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(FLAGS_H) $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) $(TM_P_H) \\\n    toplev.h $(CFGLOOP_H) output.h $(PARAMS_H) $(TARGET_H)\n@@ -2441,7 +2440,7 @@ cfgbuild.o : cfgbuild.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n cfgcleanup.o : cfgcleanup.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(TIMEVAR_H) hard-reg-set.h output.h $(FLAGS_H) $(RECOG_H) \\\n    toplev.h insn-config.h cselib.h $(TARGET_H) $(TM_P_H) $(PARAMS_H) \\\n-   $(REGS_H) $(EMIT_RTL_H) $(CFGLAYOUT_H) tree-pass.h cfgloop.h expr.h\n+   $(REGS_H) $(EMIT_RTL_H) $(CFGLAYOUT_H) tree-pass.h $(CFGLOOP_H) $(EXPR_H)\n cfgloop.o : cfgloop.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) coretypes.h $(TM_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(FLAGS_H) $(FUNCTION_H) \\\n    $(OBSTACK_H) toplev.h $(TREE_FLOW_H) $(TREE_H)\n@@ -2464,7 +2463,7 @@ cfgloopmanip.o : cfgloopmanip.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n    coretypes.h $(TM_H) cfghooks.h $(OBSTACK_H)\n loop-init.o : loop-init.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(CFGLAYOUT_H) \\\n-   coretypes.h $(TM_H) $(OBSTACK_H) tree-pass.h timevar.h $(FLAGS_H)\n+   coretypes.h $(TM_H) $(OBSTACK_H) tree-pass.h $(TIMEVAR_H) $(FLAGS_H)\n loop-unswitch.o : loop-unswitch.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TM_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(CFGLAYOUT_H) $(PARAMS_H) \\\n    output.h $(EXPR_H) coretypes.h $(TM_H) $(OBSTACK_H)\n@@ -2480,7 +2479,7 @@ combine.o : combine.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(FLAGS_H) $(FUNCTION_H) insn-config.h $(INSN_ATTR_H) $(REGS_H) $(EXPR_H) \\\n    rtlhooks-def.h $(BASIC_BLOCK_H) $(RECOG_H) $(REAL_H) hard-reg-set.h \\\n    toplev.h $(TM_P_H) $(TREE_H) $(TARGET_H) output.h $(PARAMS_H) $(OPTABS_H) \\\n-   insn-codes.h timevar.h tree-pass.h\n+   insn-codes.h $(TIMEVAR_H) tree-pass.h\n regclass.o : regclass.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    hard-reg-set.h $(FLAGS_H) $(BASIC_BLOCK_H) $(REGS_H) insn-config.h \\\n    $(RECOG_H) reload.h $(REAL_H) toplev.h $(FUNCTION_H) output.h $(GGC_H) \\\n@@ -2489,13 +2488,13 @@ regclass.o : regclass.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n local-alloc.o : local-alloc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(FLAGS_H) $(REGS_H) hard-reg-set.h insn-config.h $(RECOG_H) \\\n    output.h $(FUNCTION_H) $(INSN_ATTR_H) toplev.h  except.h reload.h $(TM_P_H) \\\n-   $(GGC_H) $(INTEGRATE_H) timevar.h tree-pass.h\n+   $(GGC_H) $(INTEGRATE_H) $(TIMEVAR_H) tree-pass.h\n bitmap.o : bitmap.c $(CONFIG_H) $(SYSTEM_H)  coretypes.h $(TM_H) $(RTL_H) \\\n    $(FLAGS_H) $(GGC_H) gt-bitmap.h bitmap.h $(OBSTACK_H)\n global.o : global.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(FLAGS_H) reload.h $(FUNCTION_H) $(RECOG_H) $(REGS_H) hard-reg-set.h \\\n    insn-config.h output.h toplev.h $(TM_P_H) $(MACHMODE_H) tree-pass.h \\\n-   timevar.h vecprim.h\n+   $(TIMEVAR_H) vecprim.h\n varray.o : varray.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(GGC_H) \\\n    $(HASHTAB_H) $(BCONFIG_H) $(VARRAY_H) toplev.h\n vec.o : vec.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) coretypes.h vec.h $(GGC_H) \\\n@@ -2515,12 +2514,12 @@ postreload.o : postreload.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(REAL_H) $(FLAGS_H) $(EXPR_H) $(OPTABS_H) reload.h $(REGS_H) \\\n    hard-reg-set.h insn-config.h $(BASIC_BLOCK_H) $(RECOG_H) output.h \\\n    $(FUNCTION_H) toplev.h cselib.h $(TM_P_H) except.h $(TREE_H) $(MACHMODE_H) \\\n-   $(OBSTACK_H) timevar.h tree-pass.h\n+   $(OBSTACK_H) $(TIMEVAR_H) tree-pass.h\n postreload-gcse.o : postreload-gcse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(RTL_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n    $(RECOG_H) $(EXPR_H) $(BASIC_BLOCK_H) $(FUNCTION_H) output.h toplev.h \\\n    $(TM_P_H) except.h $(TREE_H) $(TARGET_H) $(HASHTAB_H) intl.h $(OBSTACK_H) \\\n-   $(PARAMS_H) timevar.h tree-pass.h $(REAL_H)\n+   $(PARAMS_H) $(TIMEVAR_H) tree-pass.h $(REAL_H)\n caller-save.o : caller-save.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(FLAGS_H) $(REGS_H) hard-reg-set.h insn-config.h $(BASIC_BLOCK_H) $(FUNCTION_H) \\\n    addresses.h $(RECOG_H) reload.h $(EXPR_H) toplev.h $(TM_P_H)\n@@ -2531,14 +2530,14 @@ reorg.o : reorg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    conditions.h hard-reg-set.h $(BASIC_BLOCK_H) $(REGS_H) insn-config.h \\\n    $(INSN_ATTR_H) except.h $(RECOG_H) $(FUNCTION_H) $(FLAGS_H) output.h \\\n    $(EXPR_H) toplev.h $(PARAMS_H) $(TM_P_H) $(OBSTACK_H) $(RESOURCE_H) \\\n-   timevar.h $(TARGET_H) tree-pass.h\n+   $(TIMEVAR_H) $(TARGET_H) tree-pass.h\n alias.o : alias.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(FLAGS_H) hard-reg-set.h $(BASIC_BLOCK_H) $(REGS_H) toplev.h output.h \\\n    $(ALIAS_H) $(EMIT_RTL_H) $(GGC_H) $(FUNCTION_H) cselib.h $(TREE_H) $(TM_P_H) \\\n    langhooks.h $(TARGET_H) gt-alias.h $(TIMEVAR_H) $(CGRAPH_H) \\\n    $(SPLAY_TREE_H) $(VARRAY_H) $(IPA_TYPE_ESCAPE_H) tree-pass.h\n regmove.o : regmove.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   insn-config.h timevar.h tree-pass.h \\\n+   insn-config.h $(TIMEVAR_H) tree-pass.h \\\n    $(RECOG_H) output.h $(REGS_H) hard-reg-set.h $(FLAGS_H) $(FUNCTION_H) \\\n    $(EXPR_H) $(BASIC_BLOCK_H) toplev.h $(TM_P_H) except.h reload.h\n ddg.o : ddg.c $(DDG_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TARGET_H) \\\n@@ -2550,19 +2549,20 @@ modulo-sched.o : modulo-sched.c $(DDG_H) $(CONFIG_H) $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TARGET_H) toplev.h $(RTL_H) $(TM_P_H) $(REGS_H) $(FUNCTION_H) \\\n    $(FLAGS_H) insn-config.h $(INSN_ATTR_H) except.h $(RECOG_H) \\\n    $(SCHED_INT_H) $(CFGLAYOUT_H) $(CFGLOOP_H) $(EXPR_H) $(PARAMS_H) \\\n-   cfghooks.h $(DF_H) $(GCOV_IO_H) hard-reg-set.h $(TM_H) timevar.h tree-pass.h\n-haifa-sched.o : haifa-sched.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   $(SCHED_INT_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h $(FUNCTION_H) \\\n-   $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h $(TM_P_H) $(TARGET_H) output.h \\\n-   $(PARAMS_H)\n+   cfghooks.h $(DF_H) $(GCOV_IO_H) hard-reg-set.h $(TM_H) $(TIMEVAR_H) \\\n+   tree-pass.h\n+haifa-sched.o : haifa-sched.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n+   $(RTL_H) $(SCHED_INT_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n+   $(FUNCTION_H) $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h $(TM_P_H) \\\n+   $(TARGET_H) output.h $(PARAMS_H)\n sched-deps.o : sched-deps.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(SCHED_INT_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n    $(FUNCTION_H) $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h cselib.h \\\n    $(PARAMS_H) $(TM_P_H) $(DF_H)\n sched-rgn.o : sched-rgn.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(SCHED_INT_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n    $(FUNCTION_H) $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h $(PARAMS_H) \\\n-   $(TM_P_H) $(TARGET_H) $(CFGLAYOUT_H) timevar.h tree-pass.h\n+   $(TM_P_H) $(TARGET_H) $(CFGLAYOUT_H) $(TIMEVAR_H) tree-pass.h\n sched-ebb.o : sched-ebb.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(SCHED_INT_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n    $(FUNCTION_H) $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h $(TM_P_H) \\\n@@ -2575,15 +2575,15 @@ final.o : final.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    insn-config.h $(INSN_ATTR_H) $(FUNCTION_H) output.h hard-reg-set.h \\\n    except.h debug.h xcoffout.h toplev.h reload.h dwarf2out.h tree-pass.h \\\n    $(BASIC_BLOCK_H) $(TM_P_H) $(TARGET_H) $(EXPR_H) $(CFGLAYOUT_H) dbxout.h \\\n-   timevar.h cgraph.h $(COVERAGE_H) $(REAL_H)\n+   $(TIMEVAR_H) $(CGRAPH_H) $(COVERAGE_H) $(REAL_H)\n recog.o : recog.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(FUNCTION_H) $(BASIC_BLOCK_H) $(REGS_H) $(RECOG_H) $(EXPR_H) \\\n    $(FLAGS_H) insn-config.h $(INSN_ATTR_H) toplev.h output.h reload.h \\\n-   addresses.h $(TM_P_H) timevar.h tree-pass.h hard-reg-set.h $(REAL_H)\n+   addresses.h $(TM_P_H) $(TIMEVAR_H) tree-pass.h hard-reg-set.h $(REAL_H)\n reg-stack.o : reg-stack.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(TREE_H) $(RECOG_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) \\\n    insn-config.h toplev.h reload.h $(FUNCTION_H) $(TM_P_H) $(GGC_H) \\\n-   $(BASIC_BLOCK_H) output.h $(VARRAY_H) timevar.h tree-pass.h \\\n+   $(BASIC_BLOCK_H) output.h $(VARRAY_H) $(TIMEVAR_H) tree-pass.h \\\n    $(TARGET_H) vecprim.h\n sreal.o: sreal.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) sreal.h\n predict.o: predict.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n@@ -2611,11 +2611,11 @@ timevar.o : timevar.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n regrename.o : regrename.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) insn-config.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h \\\n    output.h $(RECOG_H) $(FUNCTION_H) $(OBSTACK_H) $(FLAGS_H) $(TM_P_H) \\\n-   addresses.h reload.h toplev.h timevar.h tree-pass.h\n+   addresses.h reload.h toplev.h $(TIMEVAR_H) tree-pass.h\n ifcvt.o : ifcvt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(REGS_H) toplev.h $(FLAGS_H) insn-config.h $(FUNCTION_H) $(RECOG_H) \\\n    $(TARGET_H) $(BASIC_BLOCK_H) $(EXPR_H) output.h except.h $(TM_P_H) \\\n-   $(REAL_H) $(OPTABS_H) $(CFGLOOP_H) hard-reg-set.h timevar.h tree-pass.h\n+   $(REAL_H) $(OPTABS_H) $(CFGLOOP_H) hard-reg-set.h $(TIMEVAR_H) tree-pass.h\n lambda-mat.o : lambda-mat.c $(LAMBDA_H) $(GGC_H) $(SYSTEM_H) $(CONFIG_H) \\\n    $(TM_H) coretypes.h $(TREE_H)\n lambda-trans.o: lambda-trans.c $(LAMBDA_H) $(GGC_H) $(SYSTEM_H) $(CONFIG_H) \\"}, {"sha": "f7a0d9f26037c215bd229d6594dd7e4193e2f71f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=48779194b7255aad878eb54a3588c38c5f1f07af", "patch": "@@ -1,3 +1,7 @@\n+2006-07-28  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\t* Make-lang.in: Use $(HEADER_H) instead of header.h in dependencies.\n+\n 2006-06-23  Olivier Hainque  <hainque@adacore.com>\n \n \t* misc.c (gnat_type_max_size): Look at TYPE_ADA_SIZE if we have"}, {"sha": "2475c2af71a9fc40672e899b777a45a9a6db90cd", "filename": "gcc/ada/Make-lang.in", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2Fada%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2Fada%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMake-lang.in?ref=48779194b7255aad878eb54a3588c38c5f1f07af", "patch": "@@ -1054,38 +1054,38 @@ ada/cuintp.o : ada/cuintp.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    ada/elists.h ada/nlists.h ada/fe.h ada/gigi.h\n \n ada/decl.o : ada/decl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-   flags.h toplev.h convert.h $(TARGET_H) ada/ada.h ada/types.h ada/atree.h \\\n+   $(FLAGS_H) toplev.h convert.h $(TARGET_H) ada/ada.h ada/types.h ada/atree.h \\\n    ada/nlists.h ada/elists.h ada/uintp.h ada/sinfo.h ada/einfo.h ada/snames.h \\\n    ada/namet.h ada/stringt.h ada/repinfo.h ada/fe.h $(ADA_TREE_H) ada/gigi.h \\\n    gt-ada-decl.h $(EXPR_H)\n \n ada/misc.o : ada/misc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-   $(RTL_H) $(EXPR_H) insn-codes.h insn-flags.h insn-config.h recog.h flags.h \\\n-   diagnostic.h output.h except.h $(TM_P_H) langhooks.h debug.h \\\n+   $(RTL_H) $(EXPR_H) insn-codes.h insn-flags.h insn-config.h recog.h \\\n+   $(FLAGS_H) $(DIAGNOSTIC_H) output.h except.h $(TM_P_H) langhooks.h debug.h \\\n    $(LANGHOOKS_DEF_H) libfuncs.h $(OPTABS_H) ada/ada.h ada/types.h \\\n    ada/atree.h ada/nlists.h ada/elists.h ada/sinfo.h ada/einfo.h ada/namet.h \\\n    ada/stringt.h ada/uintp.h ada/fe.h $(ADA_TREE_H) ada/gigi.h \\\n-   ada/adadecode.h opts.h options.h $(TARGET_H) real.h\n+   ada/adadecode.h opts.h options.h $(TARGET_H) $(REAL_H)\n \n ada/targtyps.o : ada/targtyps.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) ada/ada.h ada/types.h ada/atree.h ada/nlists.h ada/elists.h \\\n    ada/uintp.h ada/sinfo.h ada/einfo.h ada/namet.h ada/snames.h ada/stringt.h \\\n    ada/urealp.h ada/fe.h $(ADA_TREE_H) ada/gigi.h\n \n ada/trans.o : ada/trans.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(TREE_H) $(RTL_H) $(EXPR_H) flags.h function.h ada/ada.h except.h \\\n+   $(TREE_H) $(RTL_H) $(EXPR_H) $(FLAGS_H) $(FUNCTION_H) ada/ada.h except.h \\\n    ada/types.h ada/atree.h ada/nlists.h ada/elists.h ada/uintp.h ada/sinfo.h \\\n    ada/einfo.h ada/namet.h ada/snames.h ada/stringt.h ada/urealp.h ada/fe.h \\\n    $(ADA_TREE_H) ada/gigi.h gt-ada-trans.h\n \n ada/utils.o : ada/utils.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(TREE_H) flags.h expr.h convert.h defaults.h ada/ada.h ada/types.h \\\n+   $(TREE_H) $(FLAGS_H) $(EXPR_H) convert.h defaults.h ada/ada.h ada/types.h \\\n    ada/atree.h ada/nlists.h ada/elists.h ada/sinfo.h ada/einfo.h ada/namet.h \\\n    ada/stringt.h ada/uintp.h ada/fe.h $(ADA_TREE_H) ada/gigi.h gt-ada-utils.h \\\n    gtype-ada.h $(TARGET_H)\n \n ada/utils2.o : ada/utils2.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(TREE_H) flags.h ada/ada.h ada/types.h ada/atree.h ada/nlists.h \\\n+   $(TREE_H) $(FLAGS_H) ada/ada.h ada/types.h ada/atree.h ada/nlists.h \\\n    ada/elists.h ada/sinfo.h ada/einfo.h ada/namet.h ada/snames.h \\\n    ada/stringt.h ada/uintp.h ada/fe.h $(ADA_TREE_H) ada/gigi.h\n "}, {"sha": "1a8b91f3b72f797d69236a2287b29470f3c5db53", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=48779194b7255aad878eb54a3588c38c5f1f07af", "patch": "@@ -1,3 +1,7 @@\n+2006-07-28  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\t* Make-lang.in: Use $(HEADER_H) instead of header.h in dependencies.\n+\n 2006-07-28  Lee Millward  <lee.millward@codesourcery.com>\n \n         PR c++/27668"}, {"sha": "884beebca85f2fe9b80412f1ac0ad5232ca68397", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=48779194b7255aad878eb54a3588c38c5f1f07af", "patch": "@@ -219,80 +219,80 @@ c++.stagefeedback: stagefeedback-start\n \n #\f\n # .o: .h dependencies.\n-CXX_TREE_H = $(TREE_H) cp/name-lookup.h cp/cp-tree.h c-common.h \\\n-\tcp/cp-tree.def c-common.def \\\n-\tfunction.h varray.h $(SYSTEM_H) coretypes.h $(CONFIG_H) $(TARGET_H) \\\n-\t$(GGC_H) \\\n+CXX_TREE_H = $(TREE_H) cp/name-lookup.h cp/cp-tree.h $(C_COMMON_H) \\\n+\tcp/cp-tree.def c-common.def $(FUNCTION_H) $(VARRAY_H) \\\n+\t$(SYSTEM_H) coretypes.h $(CONFIG_H) $(TARGET_H) $(GGC_H) \\\n \t$(srcdir)/../include/hashtab.h $(srcdir)/../include/splay-tree.h\n \n CXX_PRETTY_PRINT_H = cp/cxx-pretty-print.h $(C_PRETTY_PRINT_H)\n \n-cp/lex.o: cp/lex.c $(CXX_TREE_H) $(TM_H) flags.h \\\n-  c-pragma.h toplev.h output.h input.h cp/operators.def $(TM_P_H)\n+cp/lex.o: cp/lex.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) \\\n+  $(C_PRAGMA_H) toplev.h output.h input.h cp/operators.def $(TM_P_H)\n cp/cp-lang.o: cp/cp-lang.c $(CXX_TREE_H) $(TM_H) toplev.h debug.h langhooks.h \\\n-  $(LANGHOOKS_DEF_H) c-common.h gtype-cp.h \\\n+  $(LANGHOOKS_DEF_H) $(C_COMMON_H) gtype-cp.h \\\n   $(DIAGNOSTIC_H) cp/cp-objcp-common.h\n-cp/decl.o: cp/decl.c $(CXX_TREE_H) $(TM_H) flags.h cp/decl.h \\\n+cp/decl.o: cp/decl.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) cp/decl.h \\\n   output.h $(EXPR_H) except.h toplev.h $(HASHTAB_H) $(RTL_H) \\\n-  cp/operators.def $(TM_P_H) tree-inline.h diagnostic.h c-pragma.h \\\n-  debug.h gt-cp-decl.h timevar.h $(TREE_FLOW_H) $(TARGET_H)\n-cp/decl2.o: cp/decl2.c $(CXX_TREE_H) $(TM_H) flags.h cp/decl.h $(EXPR_H) \\\n-  output.h except.h toplev.h $(RTL_H) c-common.h gt-cp-decl2.h cgraph.h \\\n-  c-pragma.h $(TREE_DUMP_H) intl.h $(TARGET_H)\n+  cp/operators.def $(TM_P_H) $(TREE_INLINE_H) $(DIAGNOSTIC_H) $(C_PRAGMA_H) \\\n+  debug.h gt-cp-decl.h $(TIMEVAR_H) $(TREE_FLOW_H) $(TARGET_H)\n+cp/decl2.o: cp/decl2.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) cp/decl.h $(EXPR_H) \\\n+  output.h except.h toplev.h $(RTL_H) $(C_COMMON_H) gt-cp-decl2.h $(CGRAPH_H) \\\n+  $(C_PRAGMA_H) $(TREE_DUMP_H) intl.h $(TARGET_H)\n cp/cp-objcp-common.o : cp/cp-objcp-common.c $(CONFIG_H) $(SYSTEM_H) \\\n-  coretypes.h $(TM_H) $(TREE_H) $(CXX_TREE_H) c-common.h toplev.h langhooks.h \\\n-  $(LANGHOOKS_DEF_H) $(DIAGNOSTIC_H) debug.h $(CXX_PRETTY_PRINT_H) \\\n-  cp/cp-objcp-common.h gt-cp-cp-objcp-common.h\n-cp/typeck2.o: cp/typeck2.c $(CXX_TREE_H) $(TM_H) flags.h toplev.h output.h \\\n-  $(TM_P_H) diagnostic.h gt-cp-typeck2.h\n-cp/typeck.o: cp/typeck.c $(CXX_TREE_H) $(TM_H) flags.h $(RTL_H) $(EXPR_H) \\\n-  toplev.h diagnostic.h convert.h c-common.h $(TARGET_H)\n-cp/class.o: cp/class.c $(CXX_TREE_H) $(TM_H) flags.h toplev.h $(RTL_H) \\\n+  coretypes.h $(TM_H) $(TREE_H) $(CXX_TREE_H) $(C_COMMON_H) toplev.h \\\n+  langhooks.h $(LANGHOOKS_DEF_H) $(DIAGNOSTIC_H) debug.h \\\n+  $(CXX_PRETTY_PRINT_H) cp/cp-objcp-common.h gt-cp-cp-objcp-common.h\n+cp/typeck2.o: cp/typeck2.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h output.h \\\n+  $(TM_P_H) $(DIAGNOSTIC_H) gt-cp-typeck2.h\n+cp/typeck.o: cp/typeck.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) $(RTL_H) $(EXPR_H) \\\n+  toplev.h $(DIAGNOSTIC_H) convert.h $(C_COMMON_H) $(TARGET_H)\n+cp/class.o: cp/class.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h $(RTL_H) \\\n   $(TARGET_H) convert.h $(CGRAPH_H) $(TREE_DUMP_H)\n-cp/call.o: cp/call.c $(CXX_TREE_H) $(TM_H) flags.h toplev.h $(RTL_H) \\\n-  $(EXPR_H) diagnostic.h intl.h gt-cp-call.h convert.h $(TARGET_H)\n-cp/friend.o: cp/friend.c $(CXX_TREE_H) $(TM_H) flags.h $(RTL_H) toplev.h \\\n+cp/call.o: cp/call.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h $(RTL_H) \\\n+  $(EXPR_H) $(DIAGNOSTIC_H) intl.h gt-cp-call.h convert.h $(TARGET_H)\n+cp/friend.o: cp/friend.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) $(RTL_H) toplev.h \\\n   $(EXPR_H)\n-cp/init.o: cp/init.c $(CXX_TREE_H) $(TM_H) flags.h $(RTL_H) $(EXPR_H) \\\n+cp/init.o: cp/init.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) $(RTL_H) $(EXPR_H) \\\n   toplev.h except.h $(TARGET_H)\n cp/method.o: cp/method.c $(CXX_TREE_H) $(TM_H) toplev.h $(RTL_H) $(EXPR_H) \\\n-  $(TM_P_H) $(TARGET_H) diagnostic.h gt-cp-method.h\n-cp/cvt.o: cp/cvt.c $(CXX_TREE_H) $(TM_H) cp/decl.h flags.h toplev.h \\\n+  $(TM_P_H) $(TARGET_H) $(DIAGNOSTIC_H) gt-cp-method.h\n+cp/cvt.o: cp/cvt.c $(CXX_TREE_H) $(TM_H) cp/decl.h $(FLAGS_H) toplev.h \\\n   convert.h $(TARGET_H)\n-cp/search.o: cp/search.c $(CXX_TREE_H) $(TM_H) flags.h toplev.h $(RTL_H)\n-cp/tree.o: cp/tree.c $(CXX_TREE_H) $(TM_H) flags.h toplev.h $(RTL_H) \\\n-  insn-config.h integrate.h tree-inline.h real.h gt-cp-tree.h $(TARGET_H) \\\n-  debug.h\n+cp/search.o: cp/search.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h $(RTL_H)\n+cp/tree.o: cp/tree.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h $(RTL_H) \\\n+  insn-config.h $(INTEGRATE_H) $(TREE_INLINE_H) $(REAL_H) gt-cp-tree.h \\\n+  $(TARGET_H) debug.h\n cp/ptree.o: cp/ptree.c $(CXX_TREE_H) $(TM_H)\n-cp/rtti.o: cp/rtti.c $(CXX_TREE_H) $(TM_H) flags.h toplev.h convert.h \\\n+cp/rtti.o: cp/rtti.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h convert.h \\\n   gt-cp-rtti.h\n-cp/except.o: cp/except.c $(CXX_TREE_H) $(TM_H) flags.h $(RTL_H) except.h \\\n-  toplev.h cp/cfns.h $(EXPR_H) libfuncs.h tree-inline.h $(TARGET_H)\n-cp/expr.o: cp/expr.c $(CXX_TREE_H) $(TM_H) $(RTL_H) flags.h $(EXPR_H) \\\n+cp/except.o: cp/except.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) $(RTL_H) except.h \\\n+  toplev.h cp/cfns.h $(EXPR_H) libfuncs.h $(TREE_INLINE_H) $(TARGET_H)\n+cp/expr.o: cp/expr.c $(CXX_TREE_H) $(TM_H) $(RTL_H) $(FLAGS_H) $(EXPR_H) \\\n   toplev.h except.h $(TM_P_H)\n cp/pt.o: cp/pt.c $(CXX_TREE_H) $(TM_H) cp/decl.h cp/cp-objcp-common.h \\\n-  toplev.h $(RTL_H) except.h tree-inline.h pointer-set.h gt-cp-pt.h vecprim.h\n+  toplev.h $(RTL_H) except.h $(TREE_INLINE_H) pointer-set.h gt-cp-pt.h \\\n+  vecprim.h\n cp/error.o: cp/error.c $(CXX_TREE_H) $(TM_H) toplev.h $(DIAGNOSTIC_H) \\\n-  flags.h real.h $(LANGHOOKS_DEF_H) $(CXX_PRETTY_PRINT_H)\n-cp/repo.o: cp/repo.c $(CXX_TREE_H) $(TM_H) toplev.h diagnostic.h \\\n+  $(FLAGS_H) $(REAL_H) $(LANGHOOKS_DEF_H) $(CXX_PRETTY_PRINT_H)\n+cp/repo.o: cp/repo.c $(CXX_TREE_H) $(TM_H) toplev.h $(DIAGNOSTIC_H) \\\n   gt-cp-repo.h\n cp/semantics.o: cp/semantics.c $(CXX_TREE_H) $(TM_H) except.h toplev.h \\\n-  flags.h debug.h output.h $(RTL_H) $(TIMEVAR_H) $(EXPR_H) \\\n-  tree-inline.h cgraph.h $(TARGET_H) c-common.h\n-cp/dump.o: cp/dump.c $(CXX_TREE_H) $(TM_H) tree-dump.h\n-cp/optimize.o: cp/optimize.c $(CXX_TREE_H) $(TM_H) rtl.h integrate.h \\\n-  insn-config.h input.h $(PARAMS_H) debug.h tree-inline.h tree-gimple.h \\\n+  $(FLAGS_H) debug.h output.h $(RTL_H) $(TIMEVAR_H) $(EXPR_H) \\\n+  $(TREE_INLINE_H) $(CGRAPH_H) $(TARGET_H) $(C_COMMON_H)\n+cp/dump.o: cp/dump.c $(CXX_TREE_H) $(TM_H) $(TREE_DUMP_H)\n+cp/optimize.o: cp/optimize.c $(CXX_TREE_H) $(TM_H) rtl.h $(INTEGRATE_H) \\\n+  insn-config.h input.h $(PARAMS_H) debug.h $(TREE_INLINE_H) $(TREE_GIMPLE_H) \\\n   $(TARGET_H)\n-cp/mangle.o: cp/mangle.c $(CXX_TREE_H) $(TM_H) toplev.h real.h gt-cp-mangle.h \\\n-  $(TARGET_H) $(TM_P_H)\n-cp/parser.o: cp/parser.c $(CXX_TREE_H) $(TM_H) diagnostic.h gt-cp-parser.h \\\n+cp/mangle.o: cp/mangle.c $(CXX_TREE_H) $(TM_H) toplev.h $(REAL_H) \\\n+  gt-cp-mangle.h $(TARGET_H) $(TM_P_H)\n+cp/parser.o: cp/parser.c $(CXX_TREE_H) $(TM_H) $(DIAGNOSTIC_H) gt-cp-parser.h \\\n   output.h $(TARGET_H)\n-cp/cp-gimplify.o: cp/cp-gimplify.c $(CXX_TREE_H) toplev.h c-common.h \\\n+cp/cp-gimplify.o: cp/cp-gimplify.c $(CXX_TREE_H) toplev.h $(C_COMMON_H) \\\n \t$(TM_H) coretypes.h pointer-set.h\n \n cp/name-lookup.o: cp/name-lookup.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-\t$(TM_H) $(CXX_TREE_H) timevar.h gt-cp-name-lookup.h toplev.h \\\n-\t$(DIAGNOSTIC_H) flags.h debug.h\n+\t$(TM_H) $(CXX_TREE_H) $(TIMEVAR_H) gt-cp-name-lookup.h toplev.h \\\n+\t$(DIAGNOSTIC_H) $(FLAGS_H) debug.h\n \n cp/cxx-pretty-print.o: cp/cxx-pretty-print.c $(CXX_PRETTY_PRINT_H) \\\n   $(CONFIG_H) $(SYSTEM_H) $(TM_H) coretypes.h $(CXX_TREE_H)"}, {"sha": "3d893ed587d4a758ee38c9a0bc9b738ebc3e4f94", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=48779194b7255aad878eb54a3588c38c5f1f07af", "patch": "@@ -1,3 +1,7 @@\n+2006-07-28  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\t* Make-lang.in: Use $(HEADER_H) instead of header.h in dependencies.\n+\n 2006-07-26  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \t* intrinsic.c (add_functions): Add INT2, SHORT, INT8, LONG,"}, {"sha": "d7e7b0450f2840e9552d6ca3f1ad7d30fd14dba2", "filename": "gcc/fortran/Make-lang.in", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2Ffortran%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2Ffortran%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FMake-lang.in?ref=48779194b7255aad878eb54a3588c38c5f1f07af", "patch": "@@ -266,7 +266,7 @@ $(F95_PARSER_OBJS): fortran/gfortran.h fortran/intrinsic.h fortran/match.h \\\n \t\tfortran/parse.h \\\n \t\t$(CONFIG_H) $(SYSTEM_H) $(TM_H) $(TM_P_H) coretypes.h \\\n \t\t$(RTL_H) $(TREE_H) $(TREE_DUMP_H) $(GGC_H) $(EXPR_H) \\\n-\t\tflags.h output.h diagnostic.h errors.h function.h \n+\t\t$(FLAGS_H) output.h $(DIAGNOSTIC_H) errors.h $(FUNCTION_H) \n fortran/openmp.o: pointer-set.h $(TARGET_H) toplev.h\n \n GFORTRAN_TRANS_DEPS = fortran/gfortran.h fortran/intrinsic.h fortran/trans-array.h \\\n@@ -275,16 +275,16 @@ GFORTRAN_TRANS_DEPS = fortran/gfortran.h fortran/intrinsic.h fortran/trans-array\n     $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(TM_H) coretypes.h $(GGC_H)\n \n fortran/f95-lang.o: $(GFORTRAN_TRANS_DEPS) fortran/mathbuiltins.def \\\n-  gt-fortran-f95-lang.h gtype-fortran.h cgraph.h $(TARGET_H) \\\n+  gt-fortran-f95-lang.h gtype-fortran.h $(CGRAPH_H) $(TARGET_H) \\\n   $(BUILTINS_DEF) fortran/types.def\n fortran/scanner.o: toplev.h\n fortran/convert.o: $(GFORTRAN_TRANS_DEPS)\n fortran/trans.o: $(GFORTRAN_TRANS_DEPS)\n fortran/trans-decl.o: $(GFORTRAN_TRANS_DEPS) gt-fortran-trans-decl.h \\\n-  cgraph.h $(TARGET_H) function.h $(FLAGS_H) $(RTL_H) tree-gimple.h \\\n-  tree-dump.h\n+  $(CGRAPH_H) $(TARGET_H) $(FUNCTION_H) $(FLAGS_H) $(RTL_H) $(TREE_GIMPLE_H) \\\n+  $(TREE_DUMP_H)\n fortran/trans-types.o: $(GFORTRAN_TRANS_DEPS) gt-fortran-trans-types.h \\\n-  real.h toplev.h $(TARGET_H)\n+  $(REAL_H) toplev.h $(TARGET_H)\n fortran/trans-const.o: $(GFORTRAN_TRANS_DEPS)\n fortran/trans-expr.o: $(GFORTRAN_TRANS_DEPS) fortran/dependency.h\n fortran/trans-stmt.o: $(GFORTRAN_TRANS_DEPS) fortran/dependency.h"}, {"sha": "7d83a31a1a6e612fe08236b2efa0f67c5b4b5692", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=48779194b7255aad878eb54a3588c38c5f1f07af", "patch": "@@ -1,3 +1,7 @@\n+2006-07-28  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\t* Make-lang.in: Use $(HEADER_H) instead of header.h in dependencies.\n+\n 2006-07-12  Bryce McKinlay  <mckinlay@redhat.com>\n \n \t* builtins.c (check_for_builtin): If a builtin could result in a"}, {"sha": "3ccc50a3e0b41b93474006bc4e0a0625e8d7e9af", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=48779194b7255aad878eb54a3588c38c5f1f07af", "patch": "@@ -298,30 +298,30 @@ java/boehm.o: java/boehm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n java/buffer.o: java/buffer.c $(CONFIG_H) java/buffer.h $(SYSTEM_H) coretypes.h \\\n   $(TM_H) toplev.h\n java/builtins.o: java/builtins.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-  $(JAVA_TREE_H) $(GGC_H) flags.h langhooks.h gt-java-builtins.h\n+  $(JAVA_TREE_H) $(GGC_H) $(FLAGS_H) langhooks.h gt-java-builtins.h\n java/check-init.o: java/check-init.c $(CONFIG_H) $(JAVA_TREE_H) $(SYSTEM_H) \\\n   coretypes.h $(TM_H) toplev.h\n java/class.o: java/class.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(JAVA_TREE_H) $(RTL_H) java/jcf.h java/parse.h toplev.h output.h $(GGC_H) \\\n-  $(TARGET_H) function.h gt-java-class.h cgraph.h\n+  $(TARGET_H) $(FUNCTION_H) gt-java-class.h $(CGRAPH_H)\n java/constants.o: java/constants.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h \\\n   toplev.h $(SYSTEM_H) coretypes.h $(TM_H) $(GGC_H) gt-java-constants.h\n java/decl.o: java/decl.c $(CONFIG_H) $(JAVA_TREE_H) $(RTL_H) java/jcf.h \\\n-  toplev.h flags.h $(SYSTEM_H) coretypes.h $(TM_H) function.h $(EXPR_H) \\\n-  libfuncs.h except.h java/java-except.h $(GGC_H) real.h gt-java-decl.h \\\n-  $(TARGET_H) cgraph.h\n-java/except.o: java/except.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h real.h \\\n+  toplev.h $(FLAGS_H) $(SYSTEM_H) coretypes.h $(TM_H) $(FUNCTION_H) $(EXPR_H) \\\n+  libfuncs.h except.h java/java-except.h $(GGC_H) $(REAL_H) gt-java-decl.h \\\n+  $(TARGET_H) $(CGRAPH_H)\n+java/except.o: java/except.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h $(REAL_H) \\\n   $(RTL_H) java/javaop.h java/java-opcodes.h except.h java/java-except.h \\\n-  toplev.h $(SYSTEM_H) coretypes.h $(TM_H) function.h \n-java/expr.o: java/expr.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h real.h \\\n+  toplev.h $(SYSTEM_H) coretypes.h $(TM_H) $(FUNCTION_H) \n+java/expr.o: java/expr.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h $(REAL_H) \\\n   $(RTL_H) $(EXPR_H) java/javaop.h java/java-opcodes.h except.h \\\n   java/java-except.h java/java-except.h java/parse.h toplev.h \\\n   $(SYSTEM_H) coretypes.h $(TM_H) $(GGC_H) gt-java-expr.h $(TARGET_H)\n java/jcf-depend.o: java/jcf-depend.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n   $(TM_H) java/jcf.h\n-java/jcf-parse.o: java/jcf-parse.c $(CONFIG_H) $(JAVA_TREE_H) flags.h \\\n+java/jcf-parse.o: java/jcf-parse.c $(CONFIG_H) $(JAVA_TREE_H) $(FLAGS_H) \\\n   input.h java/java-except.h $(SYSTEM_H) coretypes.h $(TM_H) toplev.h \\\n-  java/parse.h $(GGC_H) debug.h real.h gt-java-jcf-parse.h $(TM_P_H)\n+  java/parse.h $(GGC_H) debug.h $(REAL_H) gt-java-jcf-parse.h $(TM_P_H)\n java/jcf-write.o: java/jcf-write.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h \\\n   $(RTL_H) java/java-opcodes.h java/parse.h java/buffer.h $(SYSTEM_H) \\\n   coretypes.h $(TM_H) toplev.h $(GGC_H) gt-java-jcf-write.h $(TM_P_H)\n@@ -330,17 +330,17 @@ java/jv-scan.o: java/jv-scan.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n java/jvgenmain.o: java/jvgenmain.c $(CONFIG_H) $(JAVA_TREE_H) $(SYSTEM_H) \\\n   coretypes.h $(TM_H) intl.h\n java/lang.o: java/lang.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h input.h \\\n-  toplev.h $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(EXPR_H) diagnostic.h \\\n+  toplev.h $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(EXPR_H) $(DIAGNOSTIC_H) \\\n   langhooks.h $(LANGHOOKS_DEF_H) gt-java-lang.h opts.h options.h\n java/mangle.o: java/mangle.c $(CONFIG_H) java/jcf.h $(JAVA_TREE_H) $(SYSTEM_H) \\\n   coretypes.h $(TM_H) toplev.h $(GGC_H) gt-java-mangle.h $(LANGHOOKS_DEF_H)\n java/mangle_name.o: java/mangle_name.c $(CONFIG_H) java/jcf.h $(JAVA_TREE_H) \\\n   $(SYSTEM_H) coretypes.h $(TM_H) toplev.h $(GGC_H)\n java/resource.o: java/resource.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(JAVA_TREE_H) $(RTL_H) java/jcf.h java/parse.h toplev.h output.h $(GGC_H) \\\n-  $(TARGET_H) function.h gt-java-resource.h $(EXPR_H)\n+  $(TARGET_H) $(FUNCTION_H) gt-java-resource.h $(EXPR_H)\n java/typeck.o: java/typeck.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h \\\n-  java/convert.h toplev.h $(SYSTEM_H) coretypes.h $(TM_H) $(GGC_H) real.h\n+  java/convert.h toplev.h $(SYSTEM_H) coretypes.h $(TM_H) $(GGC_H) $(REAL_H)\n java/win32-host.o: java/win32-host.c $(CONFIG_H) $(SYSTEM_H) coretypes.h java/jcf.h\n java/verify-glue.o: java/verify-glue.c $(CONFIG_H) $(SYSTEM_H) $(JAVA_TREE_H) \\\n   coretypes.h $(TM_H) java/verify.h toplev.h\n@@ -349,12 +349,12 @@ java/verify-impl.o: java/verify-impl.c $(CONFIG_H) java/verify.h $(SYSTEM_H) \\\n java/zextract.o: java/zextract.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   java/zipfile.h\n java/java-gimplify.o: java/java-gimplify.c $(CONFIG_H) $(SYSTEM_H) \\\n-  coretypes.h $(TM_H) $(JAVA_TREE_H) tree-gimple.h toplev.h\n+  coretypes.h $(TM_H) $(JAVA_TREE_H) $(TREE_GIMPLE_H) toplev.h\n \n java/parse-scan.o: java/parse-scan.c $(CONFIG_H) $(SYSTEM_H) \\\n   coretypes.h $(TM_H) toplev.h $(JAVA_LEX_C) java/parse.h java/lex.h input.h\n java/parse.o: java/parse.c java/jcf-reader.c $(CONFIG_H) $(SYSTEM_H) \\\n-  coretypes.h $(TM_H) function.h $(JAVA_TREE_H) $(JAVA_LEX_C) java/parse.h \\\n+  coretypes.h $(TM_H) $(FUNCTION_H) $(JAVA_TREE_H) $(JAVA_LEX_C) java/parse.h \\\n   java/lex.h input.h $(GGC_H) debug.h gt-java-parse.h gtype-java.h $(TARGET_H) \\\n   $(TREE_DUMP_H)\n "}, {"sha": "a588bf3efea95f3bf314992719a256bbec73f526", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=48779194b7255aad878eb54a3588c38c5f1f07af", "patch": "@@ -1,3 +1,7 @@\n+2006-07-28  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\t* Make-lang.in: Use $(HEADER_H) instead of header.h in dependencies.\n+\n 2006-07-19  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR obj-c++/28434"}, {"sha": "69d5e5a32e2d2195af6ed4cae8ac6df1f514dae3", "filename": "gcc/objc/Make-lang.in", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=48779194b7255aad878eb54a3588c38c5f1f07af", "patch": "@@ -70,13 +70,14 @@ objc/objc-lang.o : objc/objc-lang.c \\\n    $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(C_TREE_H) $(DIAGNOSTIC_H) \\\n    $(GGC_H) langhooks.h $(LANGHOOKS_DEF_H) $(C_COMMON_H) gtype-objc.h \\\n-   c-objc-common.h objc/objc-act.h tree-gimple.h\n+   c-objc-common.h objc/objc-act.h $(TREE_GIMPLE_H)\n \n objc/objc-act.o : objc/objc-act.c \\\n    $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) $(TM_P_H) \\\n-   $(EXPR_H) $(TARGET_H) $(C_TREE_H) diagnostic.h toplev.h flags.h \\\n-   objc/objc-act.h input.h function.h output.h debug.h langhooks.h \\\n-   $(LANGHOOKS_DEF_H) $(HASHTAB_H) c-pragma.h gt-objc-objc-act.h tree-gimple.h\n+   $(EXPR_H) $(TARGET_H) $(C_TREE_H) $(DIAGNOSTIC_H) toplev.h $(FLAGS_H) \\\n+   objc/objc-act.h input.h $(FUNCTION_H) output.h debug.h langhooks.h \\\n+   $(LANGHOOKS_DEF_H) $(HASHTAB_H) $(C_PRAGMA_H) gt-objc-objc-act.h \\\n+   $(TREE_GIMPLE_H)\n \n objc.srcextra:\n "}, {"sha": "c16147658f302e3cd95360947ea339297750f0ad", "filename": "gcc/objcp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2Fobjcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2Fobjcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FChangeLog?ref=48779194b7255aad878eb54a3588c38c5f1f07af", "patch": "@@ -1,3 +1,7 @@\n+2006-07-28  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\t* Make-lang.in: Use $(HEADER_H) instead of header.h in dependencies.\n+\n 2006-07-03  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR other/27063"}, {"sha": "8da2fefcf61bedcb844f45cc2a26c1f5346d7032", "filename": "gcc/objcp/Make-lang.in", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2Fobjcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2Fobjcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FMake-lang.in?ref=48779194b7255aad878eb54a3588c38c5f1f07af", "patch": "@@ -69,22 +69,22 @@ cc1objplus$(exeext): $(OBJCXX_OBJS) cc1objplus-checksum.o $(BACKEND) $(LIBDEPS)\n \n objcp/objcp-lang.o : objcp/objcp-lang.c \\\n   $(CXX_TREE_H) $(TM_H) toplev.h debug.h langhooks.h objc/objc-act.h \\\n-  $(LANGHOOKS_DEF_H) c-common.h gtype-objcp.h \\\n-  $(DIAGNOSTIC_H) cp/cp-objcp-common.h tree-gimple.h\n+  $(LANGHOOKS_DEF_H) $(C_COMMON_H) gtype-objcp.h \\\n+  $(DIAGNOSTIC_H) cp/cp-objcp-common.h $(TREE_GIMPLE_H)\n \n objcp/objcp-decl.o : objcp/objcp-decl.c \\\n    $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_TREE_H) \\\n-   toplev.h $(GGC_H) c-pragma.h input.h flags.h output.h objc/objc-act.h \\\n-   objcp/objcp-decl.h tree-gimple.h $(EXPR_H) $(TARGET_H)\n+   toplev.h $(GGC_H) $(C_PRAGMA_H) input.h $(FLAGS_H) output.h \\\n+   objc/objc-act.h objcp/objcp-decl.h $(TREE_GIMPLE_H) $(EXPR_H) $(TARGET_H)\n \n # The following must be an explicit rule; please keep in sync with the implicit\n # one in Makefile.in.\n objcp/objcp-act.o : objc/objc-act.c \\\n    $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) $(TM_P_H) \\\n-   $(EXPR_H) $(TARGET_H) $(CXX_TREE_H) diagnostic.h toplev.h flags.h \\\n-   objc/objc-act.h input.h function.h output.h debug.h langhooks.h \\\n+   $(EXPR_H) $(TARGET_H) $(CXX_TREE_H) $(DIAGNOSTIC_H) toplev.h $(FLAGS_H) \\\n+   objc/objc-act.h input.h $(FUNCTION_H) output.h debug.h langhooks.h \\\n    objcp/objcp-decl.h $(LANGHOOKS_DEF_H) $(HASHTAB_H) gt-objc-objc-act.h \\\n-   tree-gimple.h\n+   $(TREE_GIMPLE_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n po-generated:"}, {"sha": "0acc666ae1d5bf6655936ed3e2310f43e17a6c79", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=48779194b7255aad878eb54a3588c38c5f1f07af", "patch": "@@ -1,3 +1,7 @@\n+2006-07-28  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\t* Make-lang.in: Use $(HEADER_H) instead of header.h in dependencies.\n+\n 2006-06-17  Karl Berry  <karl@gnu.org>\n \n \t* treelang.texi (@dircategory): Use \"Software development\""}, {"sha": "d2be0afdd51dfa1028c58bc9c9df1c512d1b85e3", "filename": "gcc/treelang/Make-lang.in", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2Ftreelang%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48779194b7255aad878eb54a3588c38c5f1f07af/gcc%2Ftreelang%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FMake-lang.in?ref=48779194b7255aad878eb54a3588c38c5f1f07af", "patch": "@@ -100,27 +100,27 @@ gtreelang$(exeext): $(GCC_OBJS) version.o prefix.o intl.o $(EXTRA_GCC_OBJS) \\\n # object file makes\n \n treelang/tree1.o: treelang/tree1.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-  flags.h toplev.h $(GGC_H) $(TREE_H) diagnostic.h treelang/treelang.h \\\n+  $(FLAGS_H) toplev.h $(GGC_H) $(TREE_H) $(DIAGNOSTIC_H) treelang/treelang.h \\\n   input.h treelang/treetree.h options.h opts.h \\\n   treelang/treetree.h gt-treelang-tree1.h gtype-treelang.h\n \n treelang/treetree.o: treelang/treetree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-  $(TM_H) $(TREE_H) flags.h output.h $(RTL_H) $(GGC_H) toplev.h \\\n-  varray.h $(LANGHOOKS_DEF_H) langhooks.h treelang/treelang.h input.h \\\n+  $(TM_H) $(TREE_H) $(FLAGS_H) output.h $(RTL_H) $(GGC_H) toplev.h \\\n+  $(VARRAY_H) $(LANGHOOKS_DEF_H) langhooks.h treelang/treelang.h input.h \\\n   treelang/treetree.h treelang/parse.h $(TARGET_H)\n \n treelang/tree-convert.o: treelang/tree-convert.c $(CONFIG_H) $(SYSTEM_H) \\\n-  coretypes.h diagnostic.h $(TREE_H) flags.h toplev.h langhooks.h $(TM_H)\n+  coretypes.h $(DIAGNOSTIC_H) $(TREE_H) $(FLAGS_H) toplev.h langhooks.h $(TM_H)\n \n treelang/spec.o: treelang/spec.c $(CONFIG_H) $(SYSTEM_H) \\\n-  coretypes.h diagnostic.h $(TREE_H) flags.h toplev.h langhooks.h $(TM_H)\n+  coretypes.h $(DIAGNOSTIC_H) $(TREE_H) $(FLAGS_H) toplev.h langhooks.h $(TM_H)\n \n treelang/parse.o: treelang/parse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-  $(TM_H) diagnostic.h treelang/treelang.h input.h treelang/treetree.h \\\n+  $(TM_H) $(DIAGNOSTIC_H) treelang/treelang.h input.h treelang/treetree.h \\\n   toplev.h\n \n treelang/lex.o: treelang/lex.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-  $(TM_H) diagnostic.h $(TREE_H) treelang/treelang.h input.h \\\n+  $(TM_H) $(DIAGNOSTIC_H) $(TREE_H) treelang/treelang.h input.h \\\n   treelang/parse.h toplev.h\n \n # generated files the files from lex and yacc are put into the source"}]}