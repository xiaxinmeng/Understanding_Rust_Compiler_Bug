{"sha": "cfa185b8ac368a23c9e3207f02420d3843f020fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZhMTg1YjhhYzM2OGEyM2M5ZTMyMDdmMDI0MjBkMzg0M2YwMjBmYw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2004-12-16T06:35:57Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2004-12-16T06:35:57Z"}, "message": "* config/i386/i386.md (*fop_?f_comm_{,sse,nosse},\n\n\t*fop_?f_1_{,sse,nosse}, *fop_{d,x}f_{2,3,4,5,6}): Unify enable\n\tconstraint with respect to TARGET_80387, TARGET_SSE, TARGET_SSE2,\n\tTARGET_SSE_MATH and TARGET_MIX_SSE_I387.\n\t(*fop_?f_{comm,1}): Rename to *fop_?f_{comm,1}_mixed.\n\t(*fop_?f_{comm,1}_nosse): Rename to *fop_?f_{comm,1}_i387.\n\t(*fop_{d,x}f_{2,3,4,5,6}): Rename to *fop_{d,x}f_{2,3,4,5,6}_i387.\n\nFrom-SVN: r92246", "tree": {"sha": "a202f17cbe45a18d442c5cf5989b707fa70a564d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a202f17cbe45a18d442c5cf5989b707fa70a564d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfa185b8ac368a23c9e3207f02420d3843f020fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfa185b8ac368a23c9e3207f02420d3843f020fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfa185b8ac368a23c9e3207f02420d3843f020fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfa185b8ac368a23c9e3207f02420d3843f020fc/comments", "author": null, "committer": null, "parents": [{"sha": "035e8f01490bdd11ac29dfc07e79e7975d2c53cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/035e8f01490bdd11ac29dfc07e79e7975d2c53cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/035e8f01490bdd11ac29dfc07e79e7975d2c53cc"}], "stats": {"total": 250, "additions": 131, "deletions": 119}, "files": [{"sha": "0cda2c6a061a5767d515e4462f90431b70d9ab31", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfa185b8ac368a23c9e3207f02420d3843f020fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfa185b8ac368a23c9e3207f02420d3843f020fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cfa185b8ac368a23c9e3207f02420d3843f020fc", "patch": "@@ -1,3 +1,13 @@\n+2004-12-16  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* config/i386/i386.md (*fop_?f_comm_{,sse,nosse},\n+\t*fop_?f_1_{,sse,nosse}, *fop_{d,x}f_{2,3,4,5,6}): Unify enable\n+\tconstraint with respect to TARGET_80387, TARGET_SSE, TARGET_SSE2,\n+\tTARGET_SSE_MATH and TARGET_MIX_SSE_I387.\n+\t(*fop_?f_{comm,1}): Rename to *fop_?f_{comm,1}_mixed.\n+\t(*fop_?f_{comm,1}_nosse): Rename to *fop_?f_{comm,1}_i387.\n+\t(*fop_{d,x}f_{2,3,4,5,6}): Rename to *fop_{d,x}f_{2,3,4,5,6}_i387.\n+\n 2004-12-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/18153"}, {"sha": "b98159f7e8f26a2199e40b0b314e9599b69ef301", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 121, "deletions": 119, "changes": 240, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfa185b8ac368a23c9e3207f02420d3843f020fc/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfa185b8ac368a23c9e3207f02420d3843f020fc/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=cfa185b8ac368a23c9e3207f02420d3843f020fc", "patch": "@@ -14136,27 +14136,13 @@\n \n ;; Gcc is slightly more smart about handling normal two address instructions\n ;; so use special patterns for add and mull.\n-(define_insn \"*fop_sf_comm_nosse\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(match_operator:SF 3 \"binary_fp_operator\"\n-\t\t\t[(match_operand:SF 1 \"nonimmediate_operand\" \"%0\")\n-\t\t\t (match_operand:SF 2 \"nonimmediate_operand\" \"fm\")]))]\n-  \"TARGET_80387 && !TARGET_SSE_MATH\n-   && COMMUTATIVE_ARITH_P (operands[3])\n-   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n-  \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-\t(if_then_else (match_operand:SF 3 \"mult_operator\" \"\") \n-\t   (const_string \"fmul\")\n-\t   (const_string \"fop\")))\n-   (set_attr \"mode\" \"SF\")])\n \n-(define_insn \"*fop_sf_comm\"\n+(define_insn \"*fop_sf_comm_mixed\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f#x,x#f\")\n \t(match_operator:SF 3 \"binary_fp_operator\"\n \t\t\t[(match_operand:SF 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t\t (match_operand:SF 2 \"nonimmediate_operand\" \"fm#x,xm#f\")]))]\n-  \"TARGET_80387 && TARGET_SSE_MATH && TARGET_MIX_SSE_I387\n+  \"TARGET_MIX_SSE_I387\n    && COMMUTATIVE_ARITH_P (operands[3])\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n@@ -14175,7 +14161,8 @@\n \t(match_operator:SF 3 \"binary_fp_operator\"\n \t\t\t[(match_operand:SF 1 \"nonimmediate_operand\" \"%0\")\n \t\t\t (match_operand:SF 2 \"nonimmediate_operand\" \"xm\")]))]\n-  \"TARGET_SSE_MATH && COMMUTATIVE_ARITH_P (operands[3])\n+  \"TARGET_SSE_MATH\n+   && COMMUTATIVE_ARITH_P (operands[3])\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n@@ -14184,93 +14171,27 @@\n \t   (const_string \"sseadd\")))\n    (set_attr \"mode\" \"SF\")])\n \n-(define_insn \"*fop_df_comm_nosse\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(match_operator:DF 3 \"binary_fp_operator\"\n-\t\t\t[(match_operand:DF 1 \"nonimmediate_operand\" \"%0\")\n-\t\t\t (match_operand:DF 2 \"nonimmediate_operand\" \"fm\")]))]\n-  \"TARGET_80387 && (!TARGET_SSE2 || !TARGET_SSE_MATH)\n+(define_insn \"*fop_sf_comm_i387\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(match_operator:SF 3 \"binary_fp_operator\"\n+\t\t\t[(match_operand:SF 1 \"nonimmediate_operand\" \"%0\")\n+\t\t\t (match_operand:SF 2 \"nonimmediate_operand\" \"fm\")]))]\n+  \"TARGET_80387\n    && COMMUTATIVE_ARITH_P (operands[3])\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n \t(if_then_else (match_operand:SF 3 \"mult_operator\" \"\") \n \t   (const_string \"fmul\")\n \t   (const_string \"fop\")))\n-   (set_attr \"mode\" \"DF\")])\n-\n-(define_insn \"*fop_df_comm\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f#Y,Y#f\")\n-\t(match_operator:DF 3 \"binary_fp_operator\"\n-\t\t\t[(match_operand:DF 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t\t (match_operand:DF 2 \"nonimmediate_operand\" \"fm#Y,Ym#f\")]))]\n-  \"TARGET_80387 && TARGET_SSE_MATH && TARGET_SSE2 && TARGET_MIX_SSE_I387\n-   && COMMUTATIVE_ARITH_P (operands[3])\n-   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n-  \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-\t(if_then_else (eq_attr \"alternative\" \"1\")\n-\t   (if_then_else (match_operand:SF 3 \"mult_operator\" \"\") \n-\t      (const_string \"ssemul\")\n-\t      (const_string \"sseadd\"))\n-\t   (if_then_else (match_operand:SF 3 \"mult_operator\" \"\") \n-\t      (const_string \"fmul\")\n-\t      (const_string \"fop\"))))\n-   (set_attr \"mode\" \"DF\")])\n-\n-(define_insn \"*fop_df_comm_sse\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=Y\")\n-\t(match_operator:DF 3 \"binary_fp_operator\"\n-\t\t\t[(match_operand:DF 1 \"nonimmediate_operand\" \"%0\")\n-\t\t\t (match_operand:DF 2 \"nonimmediate_operand\" \"Ym\")]))]\n-  \"TARGET_SSE2 && TARGET_SSE_MATH\n-   && COMMUTATIVE_ARITH_P (operands[3])\n-   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n-  \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (if_then_else (match_operand:SF 3 \"mult_operator\" \"\") \n-\t   (const_string \"ssemul\")\n-\t   (const_string \"sseadd\")))\n-   (set_attr \"mode\" \"DF\")])\n-\n-(define_insn \"*fop_xf_comm\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(match_operator:XF 3 \"binary_fp_operator\"\n-\t\t\t[(match_operand:XF 1 \"register_operand\" \"%0\")\n-\t\t\t (match_operand:XF 2 \"register_operand\" \"f\")]))]\n-  \"TARGET_80387\n-   && COMMUTATIVE_ARITH_P (operands[3])\"\n-  \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (if_then_else (match_operand:XF 3 \"mult_operator\" \"\") \n-           (const_string \"fmul\")\n-           (const_string \"fop\")))\n-   (set_attr \"mode\" \"XF\")])\n-\n-(define_insn \"*fop_sf_1_nosse\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n-\t(match_operator:SF 3 \"binary_fp_operator\"\n-\t\t\t[(match_operand:SF 1 \"nonimmediate_operand\" \"0,fm\")\n-\t\t\t (match_operand:SF 2 \"nonimmediate_operand\" \"fm,0\")]))]\n-  \"TARGET_80387 && !TARGET_SSE_MATH\n-   && !COMMUTATIVE_ARITH_P (operands[3])\n-   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n-  \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (cond [(match_operand:SF 3 \"mult_operator\" \"\") \n-                 (const_string \"fmul\")\n-               (match_operand:SF 3 \"div_operator\" \"\") \n-                 (const_string \"fdiv\")\n-              ]\n-              (const_string \"fop\")))\n    (set_attr \"mode\" \"SF\")])\n \n-(define_insn \"*fop_sf_1\"\n+(define_insn \"*fop_sf_1_mixed\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f,f,x\")\n \t(match_operator:SF 3 \"binary_fp_operator\"\n \t\t\t[(match_operand:SF 1 \"nonimmediate_operand\" \"0,fm,0\")\n \t\t\t (match_operand:SF 2 \"nonimmediate_operand\" \"fm,0,xm#f\")]))]\n-  \"TARGET_80387 && TARGET_SSE_MATH && TARGET_MIX_SSE_I387\n+  \"TARGET_MIX_SSE_I387\n    && !COMMUTATIVE_ARITH_P (operands[3])\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n@@ -14308,8 +14229,27 @@\n               (const_string \"sseadd\")))\n    (set_attr \"mode\" \"SF\")])\n \n+(define_insn \"*fop_sf_1_i387\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n+\t(match_operator:SF 3 \"binary_fp_operator\"\n+\t\t\t[(match_operand:SF 1 \"nonimmediate_operand\" \"0,fm\")\n+\t\t\t (match_operand:SF 2 \"nonimmediate_operand\" \"fm,0\")]))]\n+  \"TARGET_80387\n+   && !COMMUTATIVE_ARITH_P (operands[3])\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n+  \"* return output_387_binary_op (insn, operands);\"\n+  [(set (attr \"type\") \n+        (cond [(match_operand:SF 3 \"mult_operator\" \"\") \n+                 (const_string \"fmul\")\n+               (match_operand:SF 3 \"div_operator\" \"\") \n+                 (const_string \"fdiv\")\n+              ]\n+              (const_string \"fop\")))\n+   (set_attr \"mode\" \"SF\")])\n+\n+\n ;; ??? Add SSE splitters for these!\n-(define_insn \"*fop_sf_2\"\n+(define_insn \"*fop_sf_2_i387\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:SF 3 \"binary_fp_operator\"\n \t  [(float:SF (match_operand:SI 1 \"nonimmediate_operand\" \"m,?r\"))\n@@ -14326,7 +14266,7 @@\n    (set_attr \"fp_int_src\" \"true\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*fop_sf_3\"\n+(define_insn \"*fop_sf_3_i387\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:SF 3 \"binary_fp_operator\"\n \t  [(match_operand:SF 1 \"register_operand\" \"0,0\")\n@@ -14343,31 +14283,61 @@\n    (set_attr \"fp_int_src\" \"true\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*fop_df_1_nosse\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n+(define_insn \"*fop_df_comm_mixed\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f#Y,Y#f\")\n \t(match_operator:DF 3 \"binary_fp_operator\"\n-\t\t\t[(match_operand:DF 1 \"nonimmediate_operand\" \"0,fm\")\n-\t\t\t (match_operand:DF 2 \"nonimmediate_operand\" \"fm,0\")]))]\n-  \"TARGET_80387 && (!TARGET_SSE2 || !TARGET_SSE_MATH)\n-   && !COMMUTATIVE_ARITH_P (operands[3])\n+\t\t\t[(match_operand:DF 1 \"nonimmediate_operand\" \"%0,0\")\n+\t\t\t (match_operand:DF 2 \"nonimmediate_operand\" \"fm#Y,Ym#f\")]))]\n+  \"TARGET_SSE2 && TARGET_MIX_SSE_I387\n+   && COMMUTATIVE_ARITH_P (operands[3])\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n-        (cond [(match_operand:DF 3 \"mult_operator\" \"\") \n-                 (const_string \"fmul\")\n-               (match_operand:DF 3 \"div_operator\" \"\")\n-                 (const_string \"fdiv\")\n-              ]\n-              (const_string \"fop\")))\n+\t(if_then_else (eq_attr \"alternative\" \"1\")\n+\t   (if_then_else (match_operand:SF 3 \"mult_operator\" \"\") \n+\t      (const_string \"ssemul\")\n+\t      (const_string \"sseadd\"))\n+\t   (if_then_else (match_operand:SF 3 \"mult_operator\" \"\") \n+\t      (const_string \"fmul\")\n+\t      (const_string \"fop\"))))\n+   (set_attr \"mode\" \"DF\")])\n+\n+(define_insn \"*fop_df_comm_sse\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=Y\")\n+\t(match_operator:DF 3 \"binary_fp_operator\"\n+\t\t\t[(match_operand:DF 1 \"nonimmediate_operand\" \"%0\")\n+\t\t\t (match_operand:DF 2 \"nonimmediate_operand\" \"Ym\")]))]\n+  \"TARGET_SSE2 && TARGET_SSE_MATH\n+   && COMMUTATIVE_ARITH_P (operands[3])\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n+  \"* return output_387_binary_op (insn, operands);\"\n+  [(set (attr \"type\") \n+        (if_then_else (match_operand:SF 3 \"mult_operator\" \"\") \n+\t   (const_string \"ssemul\")\n+\t   (const_string \"sseadd\")))\n    (set_attr \"mode\" \"DF\")])\n \n+(define_insn \"*fop_df_comm_i387\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(match_operator:DF 3 \"binary_fp_operator\"\n+\t\t\t[(match_operand:DF 1 \"nonimmediate_operand\" \"%0\")\n+\t\t\t (match_operand:DF 2 \"nonimmediate_operand\" \"fm\")]))]\n+  \"TARGET_80387\n+   && COMMUTATIVE_ARITH_P (operands[3])\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n+  \"* return output_387_binary_op (insn, operands);\"\n+  [(set (attr \"type\") \n+\t(if_then_else (match_operand:SF 3 \"mult_operator\" \"\") \n+\t   (const_string \"fmul\")\n+\t   (const_string \"fop\")))\n+   (set_attr \"mode\" \"DF\")])\n \n-(define_insn \"*fop_df_1\"\n+(define_insn \"*fop_df_1_mixed\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f#Y,f#Y,Y#f\")\n \t(match_operator:DF 3 \"binary_fp_operator\"\n \t\t\t[(match_operand:DF 1 \"nonimmediate_operand\" \"0,fm,0\")\n \t\t\t (match_operand:DF 2 \"nonimmediate_operand\" \"fm,0,Ym#f\")]))]\n-  \"TARGET_80387 && TARGET_SSE2 && TARGET_SSE_MATH && TARGET_MIX_SSE_I387\n+  \"TARGET_SSE2 && TARGET_SSE_MATH && TARGET_MIX_SSE_I387\n    && !COMMUTATIVE_ARITH_P (operands[3])\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n@@ -14405,8 +14375,26 @@\n               ]\n               (const_string \"sseadd\")))])\n \n+(define_insn \"*fop_df_1_i387\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n+\t(match_operator:DF 3 \"binary_fp_operator\"\n+\t\t\t[(match_operand:DF 1 \"nonimmediate_operand\" \"0,fm\")\n+\t\t\t (match_operand:DF 2 \"nonimmediate_operand\" \"fm,0\")]))]\n+  \"TARGET_80387\n+   && !COMMUTATIVE_ARITH_P (operands[3])\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n+  \"* return output_387_binary_op (insn, operands);\"\n+  [(set (attr \"type\") \n+        (cond [(match_operand:DF 3 \"mult_operator\" \"\") \n+                 (const_string \"fmul\")\n+               (match_operand:DF 3 \"div_operator\" \"\")\n+                 (const_string \"fdiv\")\n+              ]\n+              (const_string \"fop\")))\n+   (set_attr \"mode\" \"DF\")])\n+\n ;; ??? Add SSE splitters for these!\n-(define_insn \"*fop_df_2\"\n+(define_insn \"*fop_df_2_i387\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:DF 3 \"binary_fp_operator\"\n \t   [(float:DF (match_operand:SI 1 \"nonimmediate_operand\" \"m,?r\"))\n@@ -14423,7 +14411,7 @@\n    (set_attr \"fp_int_src\" \"true\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*fop_df_3\"\n+(define_insn \"*fop_df_3_i387\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:DF 3 \"binary_fp_operator\"\n \t   [(match_operand:DF 1 \"register_operand\" \"0,0\")\n@@ -14440,12 +14428,12 @@\n    (set_attr \"fp_int_src\" \"true\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*fop_df_4\"\n+(define_insn \"*fop_df_4_i387\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:DF 3 \"binary_fp_operator\"\n \t   [(float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\" \"fm,0\"))\n \t    (match_operand:DF 2 \"register_operand\" \"0,f\")]))]\n-  \"TARGET_80387 && (!TARGET_SSE2 || !TARGET_SSE_MATH)\n+  \"TARGET_80387 && !(TARGET_SSE2 && TARGET_SSE_MATH)\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n@@ -14457,7 +14445,7 @@\n               (const_string \"fop\")))\n    (set_attr \"mode\" \"SF\")])\n \n-(define_insn \"*fop_df_5\"\n+(define_insn \"*fop_df_5_i387\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:DF 3 \"binary_fp_operator\"\n \t  [(match_operand:DF 1 \"register_operand\" \"0,f\")\n@@ -14474,7 +14462,7 @@\n               (const_string \"fop\")))\n    (set_attr \"mode\" \"SF\")])\n \n-(define_insn \"*fop_df_6\"\n+(define_insn \"*fop_df_6_i387\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:DF 3 \"binary_fp_operator\"\n \t  [(float_extend:DF\n@@ -14492,7 +14480,21 @@\n               (const_string \"fop\")))\n    (set_attr \"mode\" \"SF\")])\n \n-(define_insn \"*fop_xf_1\"\n+(define_insn \"*fop_xf_comm_i387\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(match_operator:XF 3 \"binary_fp_operator\"\n+\t\t\t[(match_operand:XF 1 \"register_operand\" \"%0\")\n+\t\t\t (match_operand:XF 2 \"register_operand\" \"f\")]))]\n+  \"TARGET_80387\n+   && COMMUTATIVE_ARITH_P (operands[3])\"\n+  \"* return output_387_binary_op (insn, operands);\"\n+  [(set (attr \"type\") \n+        (if_then_else (match_operand:XF 3 \"mult_operator\" \"\") \n+           (const_string \"fmul\")\n+           (const_string \"fop\")))\n+   (set_attr \"mode\" \"XF\")])\n+\n+(define_insn \"*fop_xf_1_i387\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t\t\t[(match_operand:XF 1 \"register_operand\" \"0,f\")\n@@ -14509,7 +14511,7 @@\n               (const_string \"fop\")))\n    (set_attr \"mode\" \"XF\")])\n \n-(define_insn \"*fop_xf_2\"\n+(define_insn \"*fop_xf_2_i387\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t   [(float:XF (match_operand:SI 1 \"nonimmediate_operand\" \"m,?r\"))\n@@ -14526,7 +14528,7 @@\n    (set_attr \"fp_int_src\" \"true\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*fop_xf_3\"\n+(define_insn \"*fop_xf_3_i387\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t  [(match_operand:XF 1 \"register_operand\" \"0,0\")\n@@ -14543,7 +14545,7 @@\n    (set_attr \"fp_int_src\" \"true\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*fop_xf_4\"\n+(define_insn \"*fop_xf_4_i387\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t   [(float_extend:XF (match_operand 1 \"nonimmediate_operand\" \"fm,0\"))\n@@ -14559,7 +14561,7 @@\n               (const_string \"fop\")))\n    (set_attr \"mode\" \"SF\")])\n \n-(define_insn \"*fop_xf_5\"\n+(define_insn \"*fop_xf_5_i387\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t  [(match_operand:XF 1 \"register_operand\" \"0,f\")\n@@ -14576,7 +14578,7 @@\n               (const_string \"fop\")))\n    (set_attr \"mode\" \"SF\")])\n \n-(define_insn \"*fop_xf_6\"\n+(define_insn \"*fop_xf_6_i387\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t  [(float_extend:XF"}]}