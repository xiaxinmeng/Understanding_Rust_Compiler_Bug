{"sha": "a570d97f5b8612ad2756333e5f21098be64057df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU3MGQ5N2Y1Yjg2MTJhZDI3NTYzMzNlNWYyMTA5OGJlNjQwNTdkZg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2018-08-20T16:32:29Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2018-08-20T16:32:29Z"}, "message": "[CPP PATCH] node type\n\nhttps://gcc.gnu.org/ml/gcc-patches/2018-08/msg01164.html\n\t* include/cpplib.h (NODE_BUILTIN, NODE_MACRO_ARG): Delete.\n\tRenumber others.\n\t(enum node_type): Replace NT_MACRO with NT_USER_MACRO,\n\tNT_BUILTIN_MACRO, NT_MACRO_ARG.  Delete NT_ASSERTION.\n\t(NTV_MACRO, NTV_ANSWER, NTV_BUILTIN, NTV_ARGUMENT, NTV_NONE):\n\tDelete.\n\t(CPP_HASHNODE_VALUE_IDX): Delete.\n\t(union _cpp_hashnode_value): GTY tag from enum node_type directly.\n\t(struct cpp_hashnode): Adjust GTY desc for value field.\n\t(cpp_user_macro_p, cpp_builtin_macro_p, cpp_macro_p): Adjust.\n\t* directives.c (undefine_macros): Clear value.anwers, adjust flag\n\tclearing.\n\t(_cpp_test_assertion): No need to check NT_ASSERTION.\n\t(do_assert, do_unassert): Likewise.\n\t* init.c (cpp_init_special_builtins): Set type not flags.\n\t* macro.c (struct macro_arg_saved_data): Add type field.\n\t(cpp_get_token_1): Check type not NT_VOID.\n\t(_cpp_free_definition): Adjust flag clearing.  Nullify\n\tvalue.answers.\n\t(_cpp_save_parameter, _cpp_unsave_parameters): Save and restore\n\ttype.\n\t(lex_expansion_token): Check type not flags.\n\t(_cpp_create_definition): Set type to NT_USER_MACRO.\n\t(_cpp_notify_macro_use): Adjust type checking.\n\t* pch.c (write_macdef, count_defs, write_defs, cpp_valid_state)\n\t(save_macros): Adjust node type/flag handling.\n\t* traditional.c (_cpp_scan_out_logical_line): Check type not flags.\n\nFrom-SVN: r263667", "tree": {"sha": "8ef03edd4d66a34af550bf97a6a1ea02e32c7bc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ef03edd4d66a34af550bf97a6a1ea02e32c7bc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a570d97f5b8612ad2756333e5f21098be64057df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a570d97f5b8612ad2756333e5f21098be64057df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a570d97f5b8612ad2756333e5f21098be64057df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a570d97f5b8612ad2756333e5f21098be64057df/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7692e253ee0bdab40fb896991f9208112ebfff61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7692e253ee0bdab40fb896991f9208112ebfff61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7692e253ee0bdab40fb896991f9208112ebfff61"}], "stats": {"total": 291, "additions": 139, "deletions": 152}, "files": [{"sha": "8998c0dace9321d6478baefc023ba9966a15a948", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a570d97f5b8612ad2756333e5f21098be64057df/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a570d97f5b8612ad2756333e5f21098be64057df/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=a570d97f5b8612ad2756333e5f21098be64057df", "patch": "@@ -1,5 +1,33 @@\n 2018-08-20  Nathan Sidwell  <nathan@acm.org>\n \n+\t* include/cpplib.h (NODE_BUILTIN, NODE_MACRO_ARG): Delete.\n+\tRenumber others.\n+\t(enum node_type): Replace NT_MACRO with NT_USER_MACRO,\n+\tNT_BUILTIN_MACRO, NT_MACRO_ARG.  Delete NT_ASSERTION.\n+\t(NTV_MACRO, NTV_ANSWER, NTV_BUILTIN, NTV_ARGUMENT, NTV_NONE):\n+\tDelete.\n+\t(CPP_HASHNODE_VALUE_IDX): Delete.\n+\t(union _cpp_hashnode_value): GTY tag from enum node_type directly.\n+\t(struct cpp_hashnode): Adjust GTY desc for value field.\n+\t(cpp_user_macro_p, cpp_builtin_macro_p, cpp_macro_p): Adjust.\n+\t* directives.c (undefine_macros): Clear value.anwers, adjust flag\n+\tclearing.\n+\t(_cpp_test_assertion): No need to check NT_ASSERTION.\n+\t(do_assert, do_unassert): Likewise.\n+\t* init.c (cpp_init_special_builtins): Set type not flags.\n+\t* macro.c (struct macro_arg_saved_data): Add type field.\n+\t(cpp_get_token_1): Check type not NT_VOID.\n+\t(_cpp_free_definition): Adjust flag clearing.  Nullify\n+\tvalue.answers.\n+\t(_cpp_save_parameter, _cpp_unsave_parameters): Save and restore\n+\ttype.\n+\t(lex_expansion_token): Check type not flags.\n+\t(_cpp_create_definition): Set type to NT_USER_MACRO.\n+\t(_cpp_notify_macro_use): Adjust type checking.\n+\t* pch.c (write_macdef, count_defs, write_defs, cpp_valid_state)\n+\t(save_macros): Adjust node type/flag handling.\n+\t* traditional.c (_cpp_scan_out_logical_line): Check type not flags.\n+\n \t* directives.c (do_undef): Use cpp_macro_p & cpp_builtin_macro_p.\n \t* include/cpplib.h (enum cpp_macro_kind): Remove trailing comma.\n \t(cpp_fun_like_macro_p): Make inline, define."}, {"sha": "f7c460d2f83ba30e44df6f0fd1ae7a5b8b68c950", "filename": "libcpp/directives.c", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a570d97f5b8612ad2756333e5f21098be64057df/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a570d97f5b8612ad2756333e5f21098be64057df/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=a570d97f5b8612ad2756333e5f21098be64057df", "patch": "@@ -695,7 +695,8 @@ undefine_macros (cpp_reader *pfile ATTRIBUTE_UNUSED, cpp_hashnode *h,\n   /* Body of _cpp_free_definition inlined here for speed.\n      Macros and assertions no longer have anything to free.  */\n   h->type = NT_VOID;\n-  h->flags &= ~(NODE_POISONED|NODE_BUILTIN|NODE_DISABLED|NODE_USED);\n+  h->value.answers = NULL;\n+  h->flags &= ~(NODE_POISONED|NODE_DISABLED|NODE_USED);\n   return 1;\n }\n \n@@ -2217,9 +2218,10 @@ parse_answer (cpp_reader *pfile, int type, source_location pred_loc,\n }\n \n /* Parses an assertion directive of type TYPE, returning a pointer to\n-   the hash node of the predicate, or 0 on error.  If an answer was\n-   supplied, it is placed in EXP_PTR & EXP_COUNT, which is otherwise\n-   set to 0.  */\n+   the hash node of the predicate, or 0 on error.  The node is\n+   guaranteed to be disjoint from the macro namespace, so can only\n+   have type 'NT_VOID'.  If an answer was supplied, it is placed in\n+   *ANSWER_PTR, which is otherwise set to 0.  */\n static cpp_hashnode *\n parse_assertion (cpp_reader *pfile, int type, cpp_macro **answer_ptr)\n {\n@@ -2294,7 +2296,7 @@ _cpp_test_assertion (cpp_reader *pfile, unsigned int *value)\n \n   if (node)\n     {\n-      if (node->type == NT_ASSERTION)\n+      if (node->value.answers)\n \t*value = !answer || *find_answer (node, answer);\n     }\n   else if (pfile->cur_token[-1].type == CPP_EOF)\n@@ -2315,7 +2317,7 @@ do_assert (cpp_reader *pfile)\n     {\n       /* Place the new answer in the answer list.  First check there\n          is not a duplicate.  */\n-      if (node->type == NT_ASSERTION && *find_answer (node, answer))\n+      if (*find_answer (node, answer))\n \t{\n \t  cpp_error (pfile, CPP_DL_WARNING, \"\\\"%s\\\" re-asserted\",\n \t\t     NODE_NAME (node) + 1);\n@@ -2327,10 +2329,8 @@ do_assert (cpp_reader *pfile)\n \t(pfile, sizeof (cpp_macro) - sizeof (cpp_token)\n \t + sizeof (cpp_token) * answer->count);\n \n-      if (node->type == NT_ASSERTION)\n-\tanswer->parm.next = node->value.answers;\n-\n-      node->type = NT_ASSERTION;\n+      /* Chain into the list.  */\n+      answer->parm.next = node->value.answers;\n       node->value.answers = answer;\n \n       check_eol (pfile, false);\n@@ -2345,20 +2345,15 @@ do_unassert (cpp_reader *pfile)\n   cpp_hashnode *node = parse_assertion (pfile, T_UNASSERT, &answer);\n \n   /* It isn't an error to #unassert something that isn't asserted.  */\n-  if (node && node->type == NT_ASSERTION)\n+  if (node)\n     {\n       if (answer)\n \t{\n \t  cpp_macro **p = find_answer (node, answer);\n \n \t  /* Remove the assert from the list.  */\n \t  if (cpp_macro *temp = *p)\n-\t    {\n-\t      *p = temp->parm.next;\n-\t      /* Did we free the last answer?  */\n-\t      if (!*p)\n-\t\tnode->type = NT_VOID;\n-\t    }\n+\t    *p = temp->parm.next;\n \n \t  check_eol (pfile, false);\n \t}"}, {"sha": "e7a933b1787d4d3c930e3d8eb13065e4eba7a43e", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 25, "deletions": 46, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a570d97f5b8612ad2756333e5f21098be64057df/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a570d97f5b8612ad2756333e5f21098be64057df/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=a570d97f5b8612ad2756333e5f21098be64057df", "patch": "@@ -742,36 +742,31 @@ struct GTY(()) cpp_macro {\n   } GTY ((desc (\"%1.kind == cmk_traditional\"))) exp;\n };\n \n-/* The structure of a node in the hash table.  The hash table has\n-   entries for all identifiers: either macros defined by #define\n-   commands (type NT_MACRO), assertions created with #assert\n-   (NT_ASSERTION), or neither of the above (NT_VOID).  Builtin macros\n-   like __LINE__ are flagged NODE_BUILTIN.  Poisoned identifiers are\n-   flagged NODE_POISONED.  NODE_OPERATOR (C++ only) indicates an\n-   identifier that behaves like an operator such as \"xor\".\n-   NODE_DIAGNOSTIC is for speed in lex_token: it indicates a\n+/* Poisoned identifiers are flagged NODE_POISONED.  NODE_OPERATOR (C++\n+   only) indicates an identifier that behaves like an operator such as\n+   \"xor\".  NODE_DIAGNOSTIC is for speed in lex_token: it indicates a\n    diagnostic may be required for this node.  Currently this only\n    applies to __VA_ARGS__, poisoned identifiers, and -Wc++-compat\n    warnings about NODE_OPERATOR.  */\n \n /* Hash node flags.  */\n #define NODE_OPERATOR\t(1 << 0)\t/* C++ named operator.  */\n #define NODE_POISONED\t(1 << 1)\t/* Poisoned identifier.  */\n-#define NODE_BUILTIN\t(1 << 2)\t/* Builtin macro.  */\n-#define NODE_DIAGNOSTIC (1 << 3)\t/* Possible diagnostic when lexed.  */\n-#define NODE_WARN\t(1 << 4)\t/* Warn if redefined or undefined.  */\n-#define NODE_DISABLED\t(1 << 5)\t/* A disabled macro.  */\n-#define NODE_MACRO_ARG\t(1 << 6)\t/* Used during #define processing.  */\n-#define NODE_USED\t(1 << 7)\t/* Dumped with -dU.  */\n-#define NODE_CONDITIONAL (1 << 8)\t/* Conditional macro */\n-#define NODE_WARN_OPERATOR (1 << 9)\t/* Warn about C++ named operator.  */\n+#define NODE_DIAGNOSTIC (1 << 2)\t/* Possible diagnostic when lexed.  */\n+#define NODE_WARN\t(1 << 3)\t/* Warn if redefined or undefined.  */\n+#define NODE_DISABLED\t(1 << 4)\t/* A disabled macro.  */\n+#define NODE_USED\t(1 << 5)\t/* Dumped with -dU.  */\n+#define NODE_CONDITIONAL (1 << 6)\t/* Conditional macro */\n+#define NODE_WARN_OPERATOR (1 << 7)\t/* Warn about C++ named operator.  */\n \n /* Different flavors of hash node.  */\n enum node_type\n {\n-  NT_VOID = 0,\t   /* No definition yet.  */\n-  NT_MACRO,\t   /* A macro of some form.  */\n-  NT_ASSERTION\t   /* Predicate for #assert.  */\n+  NT_VOID = 0,\t   /* Maybe an assert?  */\n+  NT_MACRO_ARG,\t   /* A macro arg.  */\n+  NT_USER_MACRO,   /* A user macro.  */\n+  NT_BUILTIN_MACRO, /* A builtin macro.  */\n+  NT_MACRO_MASK = NT_USER_MACRO  /* Mask for either macro kind.  */\n };\n \n /* Different flavors of builtin macro.  _Pragma is an operator, but we\n@@ -796,36 +791,19 @@ enum cpp_builtin_type\n #define NODE_LEN(NODE)\t\tHT_LEN (&(NODE)->ident)\n #define NODE_NAME(NODE)\t\tHT_STR (&(NODE)->ident)\n \n-/* Specify which field, if any, of the union is used.  */\n-\n-enum {\n-  NTV_MACRO,\n-  NTV_ANSWER,\n-  NTV_BUILTIN,\n-  NTV_ARGUMENT,\n-  NTV_NONE\n-};\n-\n-#define CPP_HASHNODE_VALUE_IDX(HNODE)\t\t\t\t\\\n-  ((HNODE.flags & NODE_MACRO_ARG) ? NTV_ARGUMENT\t\t\\\n-   : HNODE.type == NT_MACRO ? ((HNODE.flags & NODE_BUILTIN) \t\\\n-\t\t\t       ? NTV_BUILTIN : NTV_MACRO)\t\\\n-   : HNODE.type == NT_ASSERTION ? NTV_ANSWER\t\t\t\\\n-   : NTV_NONE)\n-\n /* The common part of an identifier node shared amongst all 3 C front\n    ends.  Also used to store CPP identifiers, which are a superset of\n    identifiers in the grammatical sense.  */\n \n union GTY(()) _cpp_hashnode_value {\n-  /* If a macro.  */\n-  cpp_macro * GTY((tag (\"NTV_MACRO\"))) macro;\n-  /* Answers to an assertion.  */\n-  cpp_macro * GTY ((tag (\"NTV_ANSWER\"))) answers;\n+  /* Assert (maybe NULL) */\n+  cpp_macro * GTY((tag (\"NT_VOID\"))) answers;\n+  /* Macro (never NULL) */\n+  cpp_macro * GTY((tag (\"NT_USER_MACRO\"))) macro;\n   /* Code for a builtin macro.  */\n-  enum cpp_builtin_type GTY ((tag (\"NTV_BUILTIN\"))) builtin;\n+  enum cpp_builtin_type GTY ((tag (\"NT_BUILTIN_MACRO\"))) builtin;\n   /* Macro argument index.  */\n-  unsigned short GTY ((tag (\"NTV_ARGUMENT\"))) arg_index;\n+  unsigned short GTY ((tag (\"NT_MACRO_ARG\"))) arg_index;\n };\n \n struct GTY(()) cpp_hashnode {\n@@ -838,7 +816,7 @@ struct GTY(()) cpp_hashnode {\n   ENUM_BITFIELD(node_type) type : 6;\t/* CPP node type.  */\n   unsigned int flags : 10;\t\t/* CPP flags.  */\n \n-  union _cpp_hashnode_value GTY ((desc (\"CPP_HASHNODE_VALUE_IDX (%1)\"))) value;\n+  union _cpp_hashnode_value GTY ((desc (\"%1.type\"))) value;\n };\n \n /* A class for iterating through the source locations within a\n@@ -961,15 +939,16 @@ extern const cpp_token *cpp_get_token_with_location (cpp_reader *,\n \t\t\t\t\t\t     source_location *);\n inline bool cpp_user_macro_p (const cpp_hashnode *node)\n {\n-  return node->type == NT_MACRO && !(node->flags & NODE_BUILTIN);\n+  return node->type == NT_USER_MACRO;\n+\n }\n inline bool cpp_builtin_macro_p (const cpp_hashnode *node)\n {\n-  return node->flags & NODE_BUILTIN;\n+  return node->type == NT_BUILTIN_MACRO;\n }\n inline bool cpp_macro_p (const cpp_hashnode *node)\n {\n-  return node->type == NT_MACRO;\n+  return node->type & NT_MACRO_MASK;\n }\n /* Returns true if NODE is a function-like user macro.  */\n inline bool cpp_fun_like_macro_p (cpp_hashnode *node)"}, {"sha": "32a595651743dc78f941c4cf867d2c4911ce0a9f", "filename": "libcpp/init.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a570d97f5b8612ad2756333e5f21098be64057df/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a570d97f5b8612ad2756333e5f21098be64057df/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=a570d97f5b8612ad2756333e5f21098be64057df", "patch": "@@ -480,8 +480,7 @@ cpp_init_special_builtins (cpp_reader *pfile)\n \t      || pfile->cb.has_attribute == NULL))\n \tcontinue;\n       cpp_hashnode *hp = cpp_lookup (pfile, b->name, b->len);\n-      hp->type = NT_MACRO;\n-      hp->flags |= NODE_BUILTIN;\n+      hp->type = NT_BUILTIN_MACRO;\n       if (b->always_warn_if_redefined)\n \thp->flags |= NODE_WARN;\n       hp->value.builtin = (enum cpp_builtin_type) b->value;"}, {"sha": "3629e83cecfdba8f842fe44dbe7c649f1c48a9ae", "filename": "libcpp/macro.c", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a570d97f5b8612ad2756333e5f21098be64057df/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a570d97f5b8612ad2756333e5f21098be64057df/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=a570d97f5b8612ad2756333e5f21098be64057df", "patch": "@@ -85,8 +85,9 @@ struct macro_arg_token_iter\n struct macro_arg_saved_data {\n   /* The canonical (UTF-8) spelling of this identifier.  */\n   cpp_hashnode *canonical_node;\n-  /* The previous value of this identifier.  */\n+  /* The previous value & type of this identifier.  */\n   union _cpp_hashnode_value value;\n+  node_type type;\n };\n \n static const char *vaopt_paste_error =\n@@ -2730,7 +2731,7 @@ cpp_get_token_1 (cpp_reader *pfile, source_location *location)\n \n       node = result->val.node.node;\n \n-      if (node->type != NT_MACRO || (result->flags & NO_EXPAND))\n+      if (node->type == NT_VOID || (result->flags & NO_EXPAND))\n \tbreak;\n \n       if (!(node->flags & NODE_DISABLED))\n@@ -3040,8 +3041,8 @@ _cpp_free_definition (cpp_hashnode *h)\n {\n   /* Macros and assertions no longer have anything to free.  */\n   h->type = NT_VOID;\n-  /* Clear builtin flag in case of redefinition.  */\n-  h->flags &= ~(NODE_BUILTIN | NODE_DISABLED | NODE_USED);\n+  h->value.answers = NULL;\n+  h->flags &= ~(NODE_DISABLED | NODE_USED);\n }\n \n /* Save parameter NODE (spelling SPELLING) to the parameter list of\n@@ -3051,7 +3052,7 @@ _cpp_save_parameter (cpp_reader *pfile, unsigned n, cpp_hashnode *node,\n \t\t     cpp_hashnode *spelling)\n {\n   /* Constraint 6.10.3.6 - duplicate parameter names.  */\n-  if (node->flags & NODE_MACRO_ARG)\n+  if (node->type == NT_MACRO_ARG)\n     {\n       cpp_error (pfile, CPP_DL_ERROR, \"duplicate macro parameter \\\"%s\\\"\",\n \t\t NODE_NAME (node));\n@@ -3069,13 +3070,14 @@ _cpp_save_parameter (cpp_reader *pfile, unsigned n, cpp_hashnode *node,\n   macro_arg_saved_data *saved = (macro_arg_saved_data *)pfile->macro_buffer;\n   saved[n].canonical_node = node;\n   saved[n].value = node->value;\n+  saved[n].type = node->type;\n \n   void *base = _cpp_reserve_room (pfile, n * sizeof (cpp_hashnode *),\n \t\t\t\t  sizeof (cpp_hashnode *));\n   ((cpp_hashnode **)base)[n] = spelling;\n \n   /* Morph into a macro arg.  */\n-  node->flags |= NODE_MACRO_ARG;\n+  node->type = NT_MACRO_ARG;\n   /* Index is 1 based.  */\n   node->value.arg_index = n + 1;\n \n@@ -3093,8 +3095,8 @@ _cpp_unsave_parameters (cpp_reader *pfile, unsigned n)\n \t&((struct macro_arg_saved_data *) pfile->macro_buffer)[n];\n \n       struct cpp_hashnode *node = save->canonical_node;\n+      node->type = save->type;\n       node->value = save->value;\n-      node->flags &= ~NODE_MACRO_ARG;\n     }\n }\n \n@@ -3109,6 +3111,7 @@ _cpp_unsave_parameters (cpp_reader *pfile, unsigned n)\n    \t    | name '...'\n             | '...'\n */\n+\n static bool\n parse_params (cpp_reader *pfile, unsigned *n_ptr, bool *varadic_ptr)\n {\n@@ -3232,9 +3235,9 @@ lex_expansion_token (cpp_reader *pfile, cpp_macro *macro)\n   pfile->cur_token = saved_cur_token;\n \n   /* Is this a parameter?  */\n-  if (token->type == CPP_NAME\n-      && (token->val.node.node->flags & NODE_MACRO_ARG) != 0)\n+  if (token->type == CPP_NAME && token->val.node.node->type == NT_MACRO_ARG)\n     {\n+      /* Morph into a parameter reference.  */\n       cpp_hashnode *spelling = token->val.node.spelling;\n       token->type = CPP_MACRO_ARG;\n       token->val.macro_arg.arg_no = token->val.node.node->value.arg_index;\n@@ -3527,7 +3530,7 @@ _cpp_create_definition (cpp_reader *pfile, cpp_hashnode *node)\n     }\n \n   /* Enter definition in hash table.  */\n-  node->type = NT_MACRO;\n+  node->type = NT_USER_MACRO;\n   node->value.macro = macro;\n   if (! ustrncmp (NODE_NAME (node), DSC (\"__STDC_\"))\n       && ustrcmp (NODE_NAME (node), (const uchar *) \"__STDC_FORMAT_MACROS\")\n@@ -3565,17 +3568,18 @@ _cpp_notify_macro_use (cpp_reader *pfile, cpp_hashnode *node)\n   node->flags |= NODE_USED;\n   switch (node->type)\n     {\n-    case NT_MACRO:\n-      if (!(node->flags & NODE_BUILTIN))\n-\t{\n-\t  cpp_macro *macro = node->value.macro;\n-\t  if (macro->lazy)\n-\t    {\n-\t      pfile->cb.user_lazy_macro (pfile, macro, macro->lazy - 1);\n-\t      macro->lazy = 0;\n-\t    }\n-\t}\n+    case NT_USER_MACRO:\n+      {\n+\tcpp_macro *macro = node->value.macro;\n+\tif (macro->lazy)\n+\t  {\n+\t    pfile->cb.user_lazy_macro (pfile, macro, macro->lazy - 1);\n+\t    macro->lazy = 0;\n+\t  }\n+      }\n+      /* FALLTHROUGH.  */\n \n+    case NT_BUILTIN_MACRO:\n       if (pfile->cb.used_define)\n \tpfile->cb.used_define (pfile, pfile->directive_line, node);\n       break;"}, {"sha": "04d7094b068faa3bef34423fb00b31ab72e9d2c8", "filename": "libcpp/pch.c", "status": "modified", "additions": 48, "deletions": 66, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a570d97f5b8612ad2756333e5f21098be64057df/libcpp%2Fpch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a570d97f5b8612ad2756333e5f21098be64057df/libcpp%2Fpch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fpch.c?ref=a570d97f5b8612ad2756333e5f21098be64057df", "patch": "@@ -50,48 +50,47 @@ static int\n write_macdef (cpp_reader *pfile, cpp_hashnode *hn, void *file_p)\n {\n   FILE *f = (FILE *) file_p;\n+  bool is_void = false;\n   switch (hn->type)\n     {\n     case NT_VOID:\n       if (! (hn->flags & NODE_POISONED))\n \treturn 1;\n-      /* XXX Really fallthru?  */\n-      /* FALLTHRU */\n+      is_void = true;\n+      goto poisoned;\n \n-    case NT_MACRO:\n-      if (hn->flags & NODE_BUILTIN)\n-\treturn 1;\n-\n-      {\n-\tstruct macrodef_struct s;\n-\tconst unsigned char *defn;\n+    case NT_BUILTIN_MACRO:\n+      return 1;\n \n-\ts.name_length = NODE_LEN (hn);\n-\ts.flags = hn->flags & NODE_POISONED;\n+    case NT_USER_MACRO:\n+      if (hn->value.macro->kind != cmk_assert)\n+\t{\n+\tpoisoned:\n+\t  struct macrodef_struct s;\n+\t  const unsigned char *defn;\n \n-\tif (hn->type == NT_MACRO)\n-\t  {\n-\t    defn = cpp_macro_definition (pfile, hn);\n-\t    s.definition_length = ustrlen (defn);\n-\t  }\n-\telse\n-\t  {\n-\t    defn = NODE_NAME (hn);\n-\t    s.definition_length = s.name_length;\n-\t  }\n+\t  s.name_length = NODE_LEN (hn);\n+\t  s.flags = hn->flags & NODE_POISONED;\n \n-\tif (fwrite (&s, sizeof (s), 1, f) != 1\n-\t    || fwrite (defn, 1, s.definition_length, f) != s.definition_length)\n-\t  {\n-\t    cpp_errno (pfile, CPP_DL_ERROR,\n-\t\t       \"while writing precompiled header\");\n-\t    return 0;\n-\t  }\n-      }\n-      return 1;\n+\t  if (is_void)\n+\t    {\n+\t      defn = NODE_NAME (hn);\n+\t      s.definition_length = s.name_length;\n+\t    }\n+\t  else\n+\t    {\n+\t      defn = cpp_macro_definition (pfile, hn);\n+\t      s.definition_length = ustrlen (defn);\n+\t    }\n \n-    case NT_ASSERTION:\n-      /* Not currently implemented.  */\n+\t  if (fwrite (&s, sizeof (s), 1, f) != 1\n+\t      || fwrite (defn, 1, s.definition_length, f) != s.definition_length)\n+\t    {\n+\t      cpp_errno (pfile, CPP_DL_ERROR,\n+\t\t\t \"while writing precompiled header\");\n+\t      return 0;\n+\t    }\n+\t}\n       return 1;\n \n     default:\n@@ -226,8 +225,11 @@ count_defs (cpp_reader *pfile ATTRIBUTE_UNUSED, cpp_hashnode *hn, void *ss_p)\n \n   switch (hn->type)\n     {\n-    case NT_MACRO:\n-      if (hn->flags & NODE_BUILTIN)\n+    case NT_BUILTIN_MACRO:\n+      return 1;\n+\n+    case NT_USER_MACRO:\n+      if (hn->value.macro->kind == cmk_assert)\n \treturn 1;\n \n       /* fall through.  */\n@@ -248,10 +250,6 @@ count_defs (cpp_reader *pfile ATTRIBUTE_UNUSED, cpp_hashnode *hn, void *ss_p)\n       }\n       return 1;\n \n-    case NT_ASSERTION:\n-      /* Not currently implemented.  */\n-      return 1;\n-\n     default:\n       abort ();\n     }\n@@ -265,8 +263,11 @@ write_defs (cpp_reader *pfile ATTRIBUTE_UNUSED, cpp_hashnode *hn, void *ss_p)\n \n   switch (hn->type)\n     {\n-    case NT_MACRO:\n-      if (hn->flags & NODE_BUILTIN)\n+    case NT_BUILTIN_MACRO:\n+      return 1;\n+\n+    case NT_USER_MACRO:\n+      if (hn->value.macro->kind == cmk_assert)\n \treturn 1;\n \n       /* fall through.  */\n@@ -287,10 +288,6 @@ write_defs (cpp_reader *pfile ATTRIBUTE_UNUSED, cpp_hashnode *hn, void *ss_p)\n       }\n       return 1;\n \n-    case NT_ASSERTION:\n-      /* Not currently implemented.  */\n-      return 1;\n-\n     default:\n       abort ();\n     }\n@@ -621,7 +618,7 @@ cpp_valid_state (cpp_reader *r, const char *name, int fd)\n \t  goto fail;\n \t}\n \n-      if (h->type != NT_MACRO)\n+      if (h->type == NT_VOID)\n \t{\n \t  /* It's ok if __GCC_HAVE_DWARF2_CFI_ASM becomes undefined,\n \t     as in, when the PCH file is created with -g and we're\n@@ -758,37 +755,22 @@ save_macros (cpp_reader *r, cpp_hashnode *h, void *data_p)\n {\n   struct save_macro_data *data = (struct save_macro_data *)data_p;\n \n-  if (h->type != NT_VOID\n-      && (h->flags & NODE_BUILTIN) == 0)\n+  if (cpp_user_macro_p (h))\n     {\n       if (data->count == data->array_size)\n \t{\n \t  data->array_size *= 2;\n \t  data->defns = XRESIZEVEC (uchar *, data->defns, (data->array_size));\n \t}\n \n-      switch (h->type)\n-\t{\n-\tcase NT_ASSERTION:\n-\t  /* Not currently implemented.  */\n-\t  return 1;\n-\n-\tcase NT_MACRO:\n-\t  {\n-\t    const uchar * defn = cpp_macro_definition (r, h);\n-\t    size_t defnlen = ustrlen (defn);\n+      const uchar * defn = cpp_macro_definition (r, h);\n+      size_t defnlen = ustrlen (defn);\n \n-\t    data->defns[data->count] = (uchar *) xmemdup (defn, defnlen,\n-                                                          defnlen + 2);\n-\t    data->defns[data->count][defnlen] = '\\n';\n-\t  }\n-\t  break;\n-\n-\tdefault:\n-\t  abort ();\n-\t}\n+      data->defns[data->count] = (uchar *) xmemdup (defn, defnlen, defnlen + 2);\n+      data->defns[data->count][defnlen] = '\\n';\n       data->count++;\n     }\n+\n   return 1;\n }\n "}, {"sha": "51c3e3522e264f0e825185b7d6358eef9f0f1895", "filename": "libcpp/traditional.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a570d97f5b8612ad2756333e5f21098be64057df/libcpp%2Ftraditional.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a570d97f5b8612ad2756333e5f21098be64057df/libcpp%2Ftraditional.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ftraditional.c?ref=a570d97f5b8612ad2756333e5f21098be64057df", "patch": "@@ -545,7 +545,7 @@ _cpp_scan_out_logical_line (cpp_reader *pfile, cpp_macro *macro,\n \t\t      goto new_context;\n \t\t    }\n \t\t}\n-\t      else if (macro && (node->flags & NODE_MACRO_ARG) != 0)\n+\t      else if (macro && node->type == NT_MACRO_ARG)\n \t\t{\n \t\t  /* Found a parameter in the replacement text of a\n \t\t     #define.  Remove its name from the output.  */"}]}