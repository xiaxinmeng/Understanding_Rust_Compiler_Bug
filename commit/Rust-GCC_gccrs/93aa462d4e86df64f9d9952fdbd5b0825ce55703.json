{"sha": "93aa462d4e86df64f9d9952fdbd5b0825ce55703", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNhYTQ2MmQ0ZTg2ZGY2NGY5ZDk5NTJmZGJkNWIwODI1Y2U1NTcwMw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-03-23T16:13:44Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-03-23T16:13:44Z"}, "message": "pt.c (convert_nontype_argument): Don't create things that aren't PTRMEM_CSTs when...\n\n\t* pt.c (convert_nontype_argument): Don't create things that aren't\n\tPTRMEM_CSTs when applying a qualification conversion to a\n\tPTRMEM_CST.\n\nFrom-SVN: r25929", "tree": {"sha": "e1470339308cba23f2690dea073ff69a4ba15c1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1470339308cba23f2690dea073ff69a4ba15c1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93aa462d4e86df64f9d9952fdbd5b0825ce55703", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93aa462d4e86df64f9d9952fdbd5b0825ce55703", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93aa462d4e86df64f9d9952fdbd5b0825ce55703", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93aa462d4e86df64f9d9952fdbd5b0825ce55703/comments", "author": null, "committer": null, "parents": [{"sha": "6599009997e9ff24167006b936c4d63a485fe522", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6599009997e9ff24167006b936c4d63a485fe522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6599009997e9ff24167006b936c4d63a485fe522"}], "stats": {"total": 53, "additions": 49, "deletions": 4}, "files": [{"sha": "3bac892ca8e576de998086079a6eef16979cf770", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93aa462d4e86df64f9d9952fdbd5b0825ce55703/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93aa462d4e86df64f9d9952fdbd5b0825ce55703/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=93aa462d4e86df64f9d9952fdbd5b0825ce55703", "patch": "@@ -1,3 +1,9 @@\n+1999-03-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* pt.c (convert_nontype_argument): Don't create things that aren't\n+\tPTRMEM_CSTs when applying a qualification conversion to a\n+\tPTRMEM_CST.\n+\n 1999-03-23  Mark Mitchell  <mark@codesourcery.com>\n \n \t* Makefile.in (OBJS): Don't mention hash.o."}, {"sha": "aa8c9e99c102deebfb85b9563cf7875cf4f74655", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93aa462d4e86df64f9d9952fdbd5b0825ce55703/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93aa462d4e86df64f9d9952fdbd5b0825ce55703/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=93aa462d4e86df64f9d9952fdbd5b0825ce55703", "patch": "@@ -2703,10 +2703,28 @@ convert_nontype_argument (type, expr)\n \ttree type_pointed_to = TREE_TYPE (type);\n  \n \tif (TYPE_PTRMEM_P (type))\n-\t  /* For a non-type template-parameter of type pointer to data\n-\t     member, qualification conversions (_conv.qual_) are\n-\t     applied.  */\n-\t  return perform_qualification_conversions (type, expr);\n+\t  {\n+\t    tree e;\n+\n+\t    /* For a non-type template-parameter of type pointer to data\n+\t       member, qualification conversions (_conv.qual_) are\n+\t       applied.  */\n+\t    e = perform_qualification_conversions (type, expr);\n+\t    if (TREE_CODE (e) == NOP_EXPR)\n+\t      {\n+\t\t/* The call to perform_qualification_conversions will\n+\t\t   insert a NOP_EXPR over EXPR to do express\n+\t\t   conversion, if necessary.  But, that will confuse\n+\t\t   us if we use this (converted) template parameter to\n+\t\t   instantiate another template; then the thing will\n+\t\t   not look like a valid template argument.  So, just\n+\t\t   make a new constant, of the appropriate type.  */\n+\t\te = make_node (PTRMEM_CST);\n+\t\tTREE_TYPE (e) = type;\n+\t\tPTRMEM_CST_MEMBER (e) = PTRMEM_CST_MEMBER (expr);\n+\t      }\n+\t    return e;\n+\t  }\n \telse if (TREE_CODE (type_pointed_to) == FUNCTION_TYPE)\n \t  { \n \t    /* For a non-type template-parameter of type pointer to"}, {"sha": "4c010560843b6d301147c808d987038aa83024bc", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ptrmem7.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93aa462d4e86df64f9d9952fdbd5b0825ce55703/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fptrmem7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93aa462d4e86df64f9d9952fdbd5b0825ce55703/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fptrmem7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fptrmem7.C?ref=93aa462d4e86df64f9d9952fdbd5b0825ce55703", "patch": "@@ -0,0 +1,21 @@\n+// Build don't link:\n+// Origin: Jason Merrill <jason@cygnus.com>\n+\n+struct A\n+{\n+  A() : x(123) { }\n+  int x;\n+};\n+A a;\n+\n+template<const int A::*PX>\n+struct B\n+{\n+  static int g() { return a.*PX; }\n+};\n+\n+\n+int main(int argc, char *argv[])\n+{\n+  int n = B<&A::x>::g();\n+}"}]}