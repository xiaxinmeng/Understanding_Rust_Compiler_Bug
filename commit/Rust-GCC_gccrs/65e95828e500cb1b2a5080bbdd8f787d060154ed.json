{"sha": "65e95828e500cb1b2a5080bbdd8f787d060154ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVlOTU4MjhlNTAwY2IxYjJhNTA4MGJiZGQ4Zjc4N2QwNjAxNTRlZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2013-11-02T11:32:53Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-11-02T11:32:53Z"}, "message": "constraints.md (Ts, Tv): New address constrains.\n\n\t* config/i386/constraints.md (Ts, Tv): New address constrains.\n\t* config/i386/i386.md (*lea<mode>, *<mode>_<bndcheck>): Use Ts\n\tconstraint for address_no_seg_operand.\n\t* config/i386/sse.md (*avx512pf_gatherpf<mode>_mask)\n\t(*avx512pf_gatherpf<mode>, *avx512pf_scatterpf<mode>_mask)\n\t(*avx512pf_scatterpf<mode>, *avx2_gathersi<mode>)\n\t(*avx2_gathersi<mode>_2, *avx2_gatherdi<mode>, *avx2_gatherdi<mode>_2)\n\t(*avx2_gatherdi<mode>_3, *avx2_gatherdi<mode>_4)\n\t(*avx512f_gathersi<mode>, *avx512f_gathersi<mode>_2)\n\t(*avx512f_gatherdi<mode>, *avx512f_gatherdi<mode>_2)\n\t(*avx512f_scattersi<mode> *avx512f_scatterdi<mode>): Use Tv\n\tconstraint for vsib_address_operand.\n\nFrom-SVN: r204317", "tree": {"sha": "9ca58a5e3c9c604664b28558cd73165e828c72e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ca58a5e3c9c604664b28558cd73165e828c72e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65e95828e500cb1b2a5080bbdd8f787d060154ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e95828e500cb1b2a5080bbdd8f787d060154ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65e95828e500cb1b2a5080bbdd8f787d060154ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e95828e500cb1b2a5080bbdd8f787d060154ed/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2afe03827a683d96021100c6d04d72e13f34d582", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2afe03827a683d96021100c6d04d72e13f34d582", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2afe03827a683d96021100c6d04d72e13f34d582"}], "stats": {"total": 69, "additions": 47, "deletions": 22}, "files": [{"sha": "2399a61b8c4755b9b975d2b3bc70f7f913dcd3a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e95828e500cb1b2a5080bbdd8f787d060154ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e95828e500cb1b2a5080bbdd8f787d060154ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65e95828e500cb1b2a5080bbdd8f787d060154ed", "patch": "@@ -1,3 +1,18 @@\n+2013-11-02  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/constraints.md (Ts, Tv): New address constrains.\n+\t* config/i386/i386.md (*lea<mode>, *<mode>_<bndcheck>): Use Ts\n+\tconstraint for address_no_seg_operand.\n+\t* config/i386/sse.md (*avx512pf_gatherpf<mode>_mask)\n+\t(*avx512pf_gatherpf<mode>, *avx512pf_scatterpf<mode>_mask)\n+\t(*avx512pf_scatterpf<mode>, *avx2_gathersi<mode>)\n+\t(*avx2_gathersi<mode>_2, *avx2_gatherdi<mode>, *avx2_gatherdi<mode>_2)\n+\t(*avx2_gatherdi<mode>_3, *avx2_gatherdi<mode>_4)\n+\t(*avx512f_gathersi<mode>, *avx512f_gathersi<mode>_2)\n+\t(*avx512f_gatherdi<mode>, *avx512f_gatherdi<mode>_2)\n+\t(*avx512f_scattersi<mode> *avx512f_scatterdi<mode>): Use Tv\n+\tconstraint for vsib_address_operand.\n+\n 2013-11-02  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* gcse.c (pre_delete): Remove references to regmove from comments."}, {"sha": "7289ae493b05d87b08bbc05465fab0a5c66e441b", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e95828e500cb1b2a5080bbdd8f787d060154ed/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e95828e500cb1b2a5080bbdd8f787d060154ed/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=65e95828e500cb1b2a5080bbdd8f787d060154ed", "patch": "@@ -237,9 +237,19 @@\n   (match_operand 0 \"x86_64_zext_immediate_operand\"))\n \n ;; T prefix is used for different address constraints\n+;;   v - VSIB address\n+;;   s - address with no segment register\n ;;   i - address with no index and no rip\n ;;   b - address with no base and no rip\n \n+(define_address_constraint \"Tv\"\n+  \"VSIB address operand\"\n+  (match_operand 0 \"vsib_address_operand\"))\n+\n+(define_address_constraint \"Ts\"\n+  \"Address operand without segment register\"\n+  (match_operand 0 \"address_no_seg_operand\"))\n+\n (define_address_constraint \"Ti\"\n   \"MPX address operand without index\"\n   (match_operand 0 \"address_mpx_no_index_operand\"))"}, {"sha": "c7ec0c1385b4ea653897155844b6b30c14807b5b", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e95828e500cb1b2a5080bbdd8f787d060154ed/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e95828e500cb1b2a5080bbdd8f787d060154ed/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=65e95828e500cb1b2a5080bbdd8f787d060154ed", "patch": "@@ -5394,7 +5394,7 @@\n \n (define_insn_and_split \"*lea<mode>\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n-\t(match_operand:SWI48 1 \"address_no_seg_operand\" \"p\"))]\n+\t(match_operand:SWI48 1 \"address_no_seg_operand\" \"Ts\"))]\n   \"\"\n {\n   if (SImode_address_operand (operands[1], VOIDmode))\n@@ -18297,7 +18297,7 @@\n \n (define_insn \"*<mode>_<bndcheck>\"\n   [(parallel [(unspec [(match_operand:BND 0 \"register_operand\" \"B\")\n-                       (match_operand:<bnd_ptr> 1 \"address_no_seg_operand\" \"p\")] BNDCHECK)\n+                       (match_operand:<bnd_ptr> 1 \"address_no_seg_operand\" \"Ts\")] BNDCHECK)\n               (set (match_operand:BLK 2 \"bnd_mem_operator\")\n                    (unspec:BLK [(match_dup 2)] UNSPEC_MPX_FENCE))])]\n   \"TARGET_MPX\""}, {"sha": "e5dd90cfad2f913c39e212076f674957facebc25", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e95828e500cb1b2a5080bbdd8f787d060154ed/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e95828e500cb1b2a5080bbdd8f787d060154ed/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=65e95828e500cb1b2a5080bbdd8f787d060154ed", "patch": "@@ -912,6 +912,10 @@\n   (ior (match_operand 0 \"register_operand\")\n        (match_operand 0 \"const0_operand\")))\n \n+;; Return true for RTX codes that force SImode address.\n+(define_predicate \"SImode_address_operand\"\n+  (match_code \"subreg,zero_extend,and\"))\n+\n ;; Return true if op if a valid address for LEA, and does not contain\n ;; a segment override.  Defined as a special predicate to allow\n ;; mode-less const_int operands pass to address_operand.\n@@ -926,10 +930,6 @@\n   return parts.seg == SEG_DEFAULT;\n })\n \n-;; Return true for RTX codes that force SImode address.\n-(define_predicate \"SImode_address_operand\"\n-  (match_code \"subreg,zero_extend,and\"))\n-\n ;; Return true if op if a valid base register, displacement or\n ;; sum of base register and displacement for VSIB addressing.\n (define_predicate \"vsib_address_operand\""}, {"sha": "7bb2d7795f6728d64c8b819e0dbe93f25f804e28", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e95828e500cb1b2a5080bbdd8f787d060154ed/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e95828e500cb1b2a5080bbdd8f787d060154ed/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=65e95828e500cb1b2a5080bbdd8f787d060154ed", "patch": "@@ -11462,7 +11462,7 @@\n      [(match_operand:<avx512fmaskmode> 0 \"register_operand\" \"k\")\n       (match_operator:<ssescalarmode> 5 \"vsib_mem_operator\"\n \t[(unspec:P\n-\t   [(match_operand:P 2 \"vsib_address_operand\" \"p\")\n+\t   [(match_operand:P 2 \"vsib_address_operand\" \"Tv\")\n \t    (match_operand:VI48_512 1 \"register_operand\" \"v\")\n \t    (match_operand:SI 3 \"const1248_operand\" \"n\")]\n \t   UNSPEC_VSIBADDR)])\n@@ -11489,7 +11489,7 @@\n      [(const_int -1)\n       (match_operator:<ssescalarmode> 4 \"vsib_mem_operator\"\n \t[(unspec:P\n-\t   [(match_operand:P 1 \"vsib_address_operand\" \"p\")\n+\t   [(match_operand:P 1 \"vsib_address_operand\" \"Tv\")\n \t    (match_operand:VI48_512 0 \"register_operand\" \"v\")\n \t    (match_operand:SI 2 \"const1248_operand\" \"n\")]\n \t   UNSPEC_VSIBADDR)])\n@@ -11533,7 +11533,7 @@\n      [(match_operand:<avx512fmaskmode> 0 \"register_operand\" \"k\")\n       (match_operator:<ssescalarmode> 5 \"vsib_mem_operator\"\n \t[(unspec:P\n-\t   [(match_operand:P 2 \"vsib_address_operand\" \"p\")\n+\t   [(match_operand:P 2 \"vsib_address_operand\" \"Tv\")\n \t    (match_operand:VI48_512 1 \"register_operand\" \"v\")\n \t    (match_operand:SI 3 \"const1248_operand\" \"n\")]\n \t   UNSPEC_VSIBADDR)])\n@@ -11560,7 +11560,7 @@\n      [(const_int -1)\n       (match_operator:<ssescalarmode> 4 \"vsib_mem_operator\"\n \t[(unspec:P\n-\t   [(match_operand:P 1 \"vsib_address_operand\" \"p\")\n+\t   [(match_operand:P 1 \"vsib_address_operand\" \"Tv\")\n \t    (match_operand:VI48_512 0 \"register_operand\" \"v\")\n \t    (match_operand:SI 2 \"const1248_operand\" \"n\")]\n \t   UNSPEC_VSIBADDR)])\n@@ -13650,7 +13650,7 @@\n \t  [(match_operand:VEC_GATHER_MODE 2 \"register_operand\" \"0\")\n \t   (match_operator:<ssescalarmode> 7 \"vsib_mem_operator\"\n \t     [(unspec:P\n-\t\t[(match_operand:P 3 \"vsib_address_operand\" \"p\")\n+\t\t[(match_operand:P 3 \"vsib_address_operand\" \"Tv\")\n \t\t (match_operand:<VEC_GATHER_IDXSI> 4 \"register_operand\" \"x\")\n \t\t (match_operand:SI 6 \"const1248_operand\" \"n\")]\n \t\tUNSPEC_VSIBADDR)])\n@@ -13670,7 +13670,7 @@\n \t  [(pc)\n \t   (match_operator:<ssescalarmode> 6 \"vsib_mem_operator\"\n \t     [(unspec:P\n-\t\t[(match_operand:P 2 \"vsib_address_operand\" \"p\")\n+\t\t[(match_operand:P 2 \"vsib_address_operand\" \"Tv\")\n \t\t (match_operand:<VEC_GATHER_IDXSI> 3 \"register_operand\" \"x\")\n \t\t (match_operand:SI 5 \"const1248_operand\" \"n\")]\n \t\tUNSPEC_VSIBADDR)])\n@@ -13712,7 +13712,7 @@\n \t  [(match_operand:<VEC_GATHER_SRCDI> 2 \"register_operand\" \"0\")\n \t   (match_operator:<ssescalarmode> 7 \"vsib_mem_operator\"\n \t     [(unspec:P\n-\t\t[(match_operand:P 3 \"vsib_address_operand\" \"p\")\n+\t\t[(match_operand:P 3 \"vsib_address_operand\" \"Tv\")\n \t\t (match_operand:<VEC_GATHER_IDXDI> 4 \"register_operand\" \"x\")\n \t\t (match_operand:SI 6 \"const1248_operand\" \"n\")]\n \t\tUNSPEC_VSIBADDR)])\n@@ -13732,7 +13732,7 @@\n \t  [(pc)\n \t   (match_operator:<ssescalarmode> 6 \"vsib_mem_operator\"\n \t     [(unspec:P\n-\t\t[(match_operand:P 2 \"vsib_address_operand\" \"p\")\n+\t\t[(match_operand:P 2 \"vsib_address_operand\" \"Tv\")\n \t\t (match_operand:<VEC_GATHER_IDXDI> 3 \"register_operand\" \"x\")\n \t\t (match_operand:SI 5 \"const1248_operand\" \"n\")]\n \t\tUNSPEC_VSIBADDR)])\n@@ -13757,7 +13757,7 @@\n \t    [(match_operand:<VEC_GATHER_SRCDI> 2 \"register_operand\" \"0\")\n \t     (match_operator:<ssescalarmode> 7 \"vsib_mem_operator\"\n \t       [(unspec:P\n-\t\t  [(match_operand:P 3 \"vsib_address_operand\" \"p\")\n+\t\t  [(match_operand:P 3 \"vsib_address_operand\" \"Tv\")\n \t\t   (match_operand:<VEC_GATHER_IDXDI> 4 \"register_operand\" \"x\")\n \t\t   (match_operand:SI 6 \"const1248_operand\" \"n\")]\n \t\t  UNSPEC_VSIBADDR)])\n@@ -13780,7 +13780,7 @@\n \t    [(pc)\n \t     (match_operator:<ssescalarmode> 6 \"vsib_mem_operator\"\n \t       [(unspec:P\n-\t\t  [(match_operand:P 2 \"vsib_address_operand\" \"p\")\n+\t\t  [(match_operand:P 2 \"vsib_address_operand\" \"Tv\")\n \t\t   (match_operand:<VEC_GATHER_IDXDI> 3 \"register_operand\" \"x\")\n \t\t   (match_operand:SI 5 \"const1248_operand\" \"n\")]\n \t\t  UNSPEC_VSIBADDR)])\n@@ -13822,7 +13822,7 @@\n \t   (match_operand:<avx512fmaskmode> 7 \"register_operand\" \"2\")\n \t   (match_operator:<ssescalarmode> 6 \"vsib_mem_operator\"\n \t     [(unspec:P\n-\t\t[(match_operand:P 4 \"vsib_address_operand\" \"p\")\n+\t\t[(match_operand:P 4 \"vsib_address_operand\" \"Tv\")\n \t\t (match_operand:<VEC_GATHER_IDXSI> 3 \"register_operand\" \"v\")\n \t\t (match_operand:SI 5 \"const1248_operand\" \"n\")]\n \t\tUNSPEC_VSIBADDR)])]\n@@ -13841,7 +13841,7 @@\n \t   (match_operand:<avx512fmaskmode> 6 \"register_operand\" \"1\")\n \t   (match_operator:<ssescalarmode> 5 \"vsib_mem_operator\"\n \t     [(unspec:P\n-\t\t[(match_operand:P 3 \"vsib_address_operand\" \"p\")\n+\t\t[(match_operand:P 3 \"vsib_address_operand\" \"Tv\")\n \t\t (match_operand:<VEC_GATHER_IDXSI> 2 \"register_operand\" \"v\")\n \t\t (match_operand:SI 4 \"const1248_operand\" \"n\")]\n \t\tUNSPEC_VSIBADDR)])]\n@@ -13880,7 +13880,7 @@\n \t   (match_operand:QI 7 \"register_operand\" \"2\")\n \t   (match_operator:<ssescalarmode> 6 \"vsib_mem_operator\"\n \t     [(unspec:P\n-\t\t[(match_operand:P 4 \"vsib_address_operand\" \"p\")\n+\t\t[(match_operand:P 4 \"vsib_address_operand\" \"Tv\")\n \t\t (match_operand:<VEC_GATHER_IDXDI> 3 \"register_operand\" \"v\")\n \t\t (match_operand:SI 5 \"const1248_operand\" \"n\")]\n \t\tUNSPEC_VSIBADDR)])]\n@@ -13899,7 +13899,7 @@\n \t   (match_operand:QI 6 \"register_operand\" \"1\")\n \t   (match_operator:<ssescalarmode> 5 \"vsib_mem_operator\"\n \t     [(unspec:P\n-\t\t[(match_operand:P 3 \"vsib_address_operand\" \"p\")\n+\t\t[(match_operand:P 3 \"vsib_address_operand\" \"Tv\")\n \t\t (match_operand:<VEC_GATHER_IDXDI> 2 \"register_operand\" \"v\")\n \t\t (match_operand:SI 4 \"const1248_operand\" \"n\")]\n \t\tUNSPEC_VSIBADDR)])]\n@@ -13936,7 +13936,7 @@\n (define_insn \"*avx512f_scattersi<mode>\"\n   [(set (match_operator:VI48F_512 5 \"vsib_mem_operator\"\n \t  [(unspec:P\n-\t     [(match_operand:P 0 \"vsib_address_operand\" \"p\")\n+\t     [(match_operand:P 0 \"vsib_address_operand\" \"Tv\")\n \t      (match_operand:<VEC_GATHER_IDXSI> 2 \"register_operand\" \"v\")\n \t      (match_operand:SI 4 \"const1248_operand\" \"n\")]\n \t     UNSPEC_VSIBADDR)])\n@@ -13972,7 +13972,7 @@\n (define_insn \"*avx512f_scatterdi<mode>\"\n   [(set (match_operator:VI48F_512 5 \"vsib_mem_operator\"\n \t  [(unspec:P\n-\t     [(match_operand:P 0 \"vsib_address_operand\" \"p\")\n+\t     [(match_operand:P 0 \"vsib_address_operand\" \"Tv\")\n \t      (match_operand:V8DI 2 \"register_operand\" \"v\")\n \t      (match_operand:SI 4 \"const1248_operand\" \"n\")]\n \t     UNSPEC_VSIBADDR)])"}]}