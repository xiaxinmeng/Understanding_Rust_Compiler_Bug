{"sha": "1723e1bedb9545c45619c4023729755243524584", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTcyM2UxYmVkYjk1NDVjNDU2MTljNDAyMzcyOTc1NTI0MzUyNDU4NA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2019-11-25T13:42:49Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2019-11-25T13:42:49Z"}, "message": "Properly handle C2x attributes on types.\n\nattribs.c has code to ignore all scoped attributes appertaining to\ntypes except when they are part of the definition of that type.\n\nI think the premise of that code is incorrect, and its presence is a\nbug; such attributes are clearly valid in both C and C++, which\nexplicitly specify that attributes in certain syntactic positions\nappertain to a particular type, only for that use of that type and not\nfor other uses of the same type specifiers without that attribute\nspecified, and while the standard attributes in C2x aren't relevant in\nsuch contexts, some gnu:: attributes certainly are.  Where some\nattributes are invalid on some types in such contexts, that's a matter\nfor the individual attribute handlers to diagnose (or the front end if\nthe requirements on a standard attribute in the standard are more\nstrict than those of a handler shared with a GNU attribute).\n\nThus, this patch removes the bogus code to allow such attributes to be\nused.  Doing so (and adding tests for attributes in such positions)\nshows up that the logic in the C front end for creating the\nc_declarator structures for such attributes put them in the wrong\nplace relative to the structures for function and array types, and the\nlogic for postfix attributes on a list of declaration specifiers\nfailed to handle some cases, so those bugs are also fixed in this\npatch.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\ngcc:\n\t* attribs.c (decl_attributes): Do not ignore C++11 attributes on\n\ttypes.\n\ngcc/c:\n\t* c-tree.h (struct c_declarator): Use a structure for id member.\n\t* c-decl.c (grokdeclarator): Extract attributes from cdk_id\n\tdeclarators at the start, not when handling individual declarators\n\tlater.  Use u.id.id instead of u.id.\n\t(grokfield): Use u.id.id instead of u.id.\n\t(build_id_declarator): Set u.id.id and u.id.attrs.\n\t(finish_declspecs): Handle postfix attributes in case of typedef\n\tname or typeof used.\n\t* c-parser.c (c_parser_direct_declarator)\n\t(c_parser_direct_declarator_inner): Place declarator for\n\tattributes inside that for function or array, not outside.  Set\n\tu.id.attrs for identifiers.\n\t(c_parser_parameter_declaration): Use u.id.id instead of u.id.\n\t* gimple-parser.c (c_parser_gimple_declaration): Use u.id.id\n\tinstead of u.id.\n\ngcc/testsuite:\n\t* gcc.dg/gnu2x-attrs-1.c: Do not expect message about attributes\n\tappertaining to types.\n\t* gcc.dg/gnu2x-attrs-2.c: New test.\n\t* g++.dg/cpp0x/gen-attrs-1.C, g++.dg/cpp0x/gen-attrs-22.C,\n\tg++.dg/cpp0x/gen-attrs-4.C, g++.dg/cpp0x/lambda/lambda-attr1.C:\n\tUpdate expected diagnostics.\n\nFrom-SVN: r278683", "tree": {"sha": "3338a8b65ec9bfb47d4bf0a79a04d572e4162ea0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3338a8b65ec9bfb47d4bf0a79a04d572e4162ea0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1723e1bedb9545c45619c4023729755243524584", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1723e1bedb9545c45619c4023729755243524584", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1723e1bedb9545c45619c4023729755243524584", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1723e1bedb9545c45619c4023729755243524584/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cebc6cbbb801183090dbb2752aa6b698331a31c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cebc6cbbb801183090dbb2752aa6b698331a31c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cebc6cbbb801183090dbb2752aa6b698331a31c"}], "stats": {"total": 179, "additions": 115, "deletions": 64}, "files": [{"sha": "58be9e9410b75cd6825c67247bdd36d0d78ba2c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1723e1bedb9545c45619c4023729755243524584/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1723e1bedb9545c45619c4023729755243524584/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1723e1bedb9545c45619c4023729755243524584", "patch": "@@ -1,3 +1,8 @@\n+2019-11-25  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* attribs.c (decl_attributes): Do not ignore C++11 attributes on\n+\ttypes.\n+\n 2019-11-25  Bernd Schmidt  <bernds_cb1@t-online.de>\n \n \t* config/m68k/m68k.c (output_move_himode, output_move_qimode):"}, {"sha": "0519f075ece730db4a528d00de6f540d433bca06", "filename": "gcc/attribs.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1723e1bedb9545c45619c4023729755243524584/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1723e1bedb9545c45619c4023729755243524584/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=1723e1bedb9545c45619c4023729755243524584", "patch": "@@ -593,21 +593,6 @@ decl_attributes (tree *node, tree attributes, int flags,\n \t}\n       gcc_assert (is_attribute_p (spec->name, name));\n \n-      if (TYPE_P (*node)\n-\t  && cxx11_attr_p\n-\t  && !(flags & ATTR_FLAG_TYPE_IN_PLACE))\n-\t{\n-\t  /* This is a c++11 attribute that appertains to a\n-\t     type-specifier, outside of the definition of, a class\n-\t     type.  Ignore it.  */\n-\t  auto_diagnostic_group d;\n-\t  if (warning (OPT_Wattributes, \"attribute ignored\"))\n-\t    inform (input_location,\n-\t\t    \"an attribute that appertains to a type-specifier \"\n-\t\t    \"is ignored\");\n-\t  continue;\n-\t}\n-\n       if (spec->decl_required && !DECL_P (*anode))\n \t{\n \t  if (flags & ((int) ATTR_FLAG_DECL_NEXT"}, {"sha": "9f0b8cee6ebb24c7c84b31eb6ce738a10eaae5f1", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1723e1bedb9545c45619c4023729755243524584/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1723e1bedb9545c45619c4023729755243524584/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=1723e1bedb9545c45619c4023729755243524584", "patch": "@@ -1,3 +1,21 @@\n+2019-11-25  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-tree.h (struct c_declarator): Use a structure for id member.\n+\t* c-decl.c (grokdeclarator): Extract attributes from cdk_id\n+\tdeclarators at the start, not when handling individual declarators\n+\tlater.  Use u.id.id instead of u.id.\n+\t(grokfield): Use u.id.id instead of u.id.\n+\t(build_id_declarator): Set u.id.id and u.id.attrs.\n+\t(finish_declspecs): Handle postfix attributes in case of typedef\n+\tname or typeof used.\n+\t* c-parser.c (c_parser_direct_declarator)\n+\t(c_parser_direct_declarator_inner): Place declarator for\n+\tattributes inside that for function or array, not outside.  Set\n+\tu.id.attrs for identifiers.\n+\t(c_parser_parameter_declaration): Use u.id.id instead of u.id.\n+\t* gimple-parser.c (c_parser_gimple_declaration): Use u.id.id\n+\tinstead of u.id.\n+\n 2019-11-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/90677"}, {"sha": "a14f7821d1ec5d3ac963baf19f8855666729c30b", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 28, "deletions": 27, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1723e1bedb9545c45619c4023729755243524584/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1723e1bedb9545c45619c4023729755243524584/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=1723e1bedb9545c45619c4023729755243524584", "patch": "@@ -5951,6 +5951,7 @@ grokdeclarator (const struct c_declarator *declarator,\n   bool array_parm_static = false;\n   bool array_parm_vla_unspec_p = false;\n   tree returned_attrs = NULL_TREE;\n+  tree decl_id_attrs = NULL_TREE;\n   bool bitfield = width != NULL;\n   tree element_type;\n   tree orig_qual_type = NULL;\n@@ -6013,8 +6014,9 @@ grokdeclarator (const struct c_declarator *declarator,\n \n \tcase cdk_id:\n \t  loc = decl->id_loc;\n-\t  if (decl->u.id)\n-\t    name = decl->u.id;\n+\t  if (decl->u.id.id)\n+\t    name = decl->u.id.id;\n+\t  decl_id_attrs = decl->u.id.attrs;\n \t  if (first_non_attr_kind == cdk_attrs)\n \t    first_non_attr_kind = decl->kind;\n \t  decl = 0;\n@@ -6300,7 +6302,9 @@ grokdeclarator (const struct c_declarator *declarator,\n \t       Standard attributes applied to a function or array\n \t       declarator apply exactly to that type; standard\n \t       attributes applied to the identifier apply to the\n-\t       declaration rather than to the type.  */\n+\t       declaration rather than to the type, and are specified\n+\t       using a cdk_id declarator rather than using\n+\t       cdk_attrs.  */\n \t    inner_decl = declarator;\n \t    while (inner_decl->kind == cdk_attrs)\n \t      inner_decl = inner_decl->declarator;\n@@ -6313,16 +6317,10 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\telse if (inner_decl->kind == cdk_array)\n \t\t  attr_flags |= (int) ATTR_FLAG_ARRAY_NEXT;\n \t      }\n-\t    if (cxx11_attribute_p (attrs) && inner_decl->kind == cdk_id)\n-\t      returned_attrs = chainon (returned_attrs, attrs);\n-\t    else\n-\t      {\n-\t\tattrs = c_warn_type_attributes (attrs);\n-\t\treturned_attrs = decl_attributes (&type,\n-\t\t\t\t\t\t  chainon (returned_attrs,\n-\t\t\t\t\t\t\t   attrs),\n-\t\t\t\t\t\t  attr_flags);\n-\t      }\n+\t    attrs = c_warn_type_attributes (attrs);\n+\t    returned_attrs = decl_attributes (&type,\n+\t\t\t\t\t      chainon (returned_attrs, attrs),\n+\t\t\t\t\t      attr_flags);\n \t    break;\n \t  }\n \tcase cdk_array:\n@@ -6883,6 +6881,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t}\n     }\n   *decl_attrs = chainon (returned_attrs, *decl_attrs);\n+  *decl_attrs = chainon (decl_id_attrs, *decl_attrs);\n \n   /* Now TYPE has the actual type, apart from any qualifiers in\n      TYPE_QUALS.  */\n@@ -7017,17 +7016,17 @@ grokdeclarator (const struct c_declarator *declarator,\n \ttype = c_build_qualified_type (type, type_quals, orig_qual_type,\n \t\t\t\t       orig_qual_indirect);\n       decl = build_decl (declarator->id_loc,\n-\t\t\t TYPE_DECL, declarator->u.id, type);\n+\t\t\t TYPE_DECL, declarator->u.id.id, type);\n       if (declspecs->explicit_signed_p)\n \tC_TYPEDEF_EXPLICITLY_SIGNED (decl) = 1;\n       if (declspecs->inline_p)\n \tpedwarn (loc, 0,\"typedef %q+D declared %<inline%>\", decl);\n       if (declspecs->noreturn_p)\n \tpedwarn (loc, 0,\"typedef %q+D declared %<_Noreturn%>\", decl);\n \n-      if (warn_cxx_compat && declarator->u.id != NULL_TREE)\n+      if (warn_cxx_compat && declarator->u.id.id != NULL_TREE)\n \t{\n-\t  struct c_binding *b = I_TAG_BINDING (declarator->u.id);\n+\t  struct c_binding *b = I_TAG_BINDING (declarator->u.id.id);\n \n \t  if (b != NULL\n \t      && b->decl != NULL_TREE\n@@ -7159,7 +7158,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t  type = c_build_qualified_type (type, type_quals);\n \n \tdecl = build_decl (declarator->id_loc,\n-\t\t\t   PARM_DECL, declarator->u.id, type);\n+\t\t\t   PARM_DECL, declarator->u.id.id, type);\n \tif (size_varies)\n \t  C_DECL_VARIABLE_SIZE (decl) = 1;\n \tC_ARRAY_PARAMETER (decl) = array_parameter_p;\n@@ -7221,9 +7220,9 @@ grokdeclarator (const struct c_declarator *declarator,\n \ttype = c_build_qualified_type (type, type_quals, orig_qual_type,\n \t\t\t\t       orig_qual_indirect);\n \tdecl = build_decl (declarator->id_loc,\n-\t\t\t   FIELD_DECL, declarator->u.id, type);\n+\t\t\t   FIELD_DECL, declarator->u.id.id, type);\n \tDECL_NONADDRESSABLE_P (decl) = bitfield;\n-\tif (bitfield && !declarator->u.id)\n+\tif (bitfield && !declarator->u.id.id)\n \t  {\n \t    TREE_NO_WARNING (decl) = 1;\n \t    DECL_PADDING_P (decl) = 1;\n@@ -7259,7 +7258,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t  }\n \n \tdecl = build_decl (declarator->id_loc,\n-\t\t\t   FUNCTION_DECL, declarator->u.id, type);\n+\t\t\t   FUNCTION_DECL, declarator->u.id.id, type);\n \tdecl = build_decl_attribute_variant (decl, decl_attr);\n \n \tif (type_quals & TYPE_QUAL_ATOMIC)\n@@ -7304,7 +7303,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \n \t/* Record presence of `inline' and `_Noreturn', if it is\n \t   reasonable.  */\n-\tif (flag_hosted && MAIN_NAME_P (declarator->u.id))\n+\tif (flag_hosted && MAIN_NAME_P (declarator->u.id.id))\n \t  {\n \t    if (declspecs->inline_p)\n \t      pedwarn (loc, 0, \"cannot inline function %<main%>\");\n@@ -7345,8 +7344,8 @@ grokdeclarator (const struct c_declarator *declarator,\n \t   the 'extern' declaration is taken to refer to that decl.) */\n \tif (extern_ref && current_scope != file_scope)\n \t  {\n-\t    tree global_decl  = identifier_global_value (declarator->u.id);\n-\t    tree visible_decl = lookup_name (declarator->u.id);\n+\t    tree global_decl  = identifier_global_value (declarator->u.id.id);\n+\t    tree visible_decl = lookup_name (declarator->u.id.id);\n \n \t    if (global_decl\n \t\t&& global_decl != visible_decl\n@@ -7357,7 +7356,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t  }\n \n \tdecl = build_decl (declarator->id_loc,\n-\t\t\t   VAR_DECL, declarator->u.id, type);\n+\t\t\t   VAR_DECL, declarator->u.id.id, type);\n \tif (size_varies)\n \t  C_DECL_VARIABLE_SIZE (decl) = 1;\n \n@@ -8009,7 +8008,7 @@ grokfield (location_t loc,\n {\n   tree value;\n \n-  if (declarator->kind == cdk_id && declarator->u.id == NULL_TREE\n+  if (declarator->kind == cdk_id && declarator->u.id.id == NULL_TREE\n       && width == NULL_TREE)\n     {\n       /* This is an unnamed decl.\n@@ -10295,7 +10294,8 @@ build_id_declarator (tree ident)\n   struct c_declarator *ret = XOBNEW (&parser_obstack, struct c_declarator);\n   ret->kind = cdk_id;\n   ret->declarator = 0;\n-  ret->u.id = ident;\n+  ret->u.id.id = ident;\n+  ret->u.id.attrs = NULL_TREE;\n   /* Default value - may get reset to a more precise location. */\n   ret->id_loc = input_location;\n   return ret;\n@@ -11468,7 +11468,7 @@ finish_declspecs (struct c_declspecs *specs)\n       /* Set a dummy type.  */\n       if (TREE_CODE (specs->type) == ERROR_MARK)\n         specs->type = integer_type_node;\n-      return specs;\n+      goto handle_postfix_attrs;\n     }\n \n   /* If none of \"void\", \"_Bool\", \"char\", \"int\", \"float\" or \"double\"\n@@ -11729,6 +11729,7 @@ finish_declspecs (struct c_declspecs *specs)\n     default:\n       gcc_unreachable ();\n     }\n+ handle_postfix_attrs:\n   if (specs->type != NULL)\n     {\n       specs->postfix_attrs = c_warn_type_attributes (specs->postfix_attrs);"}, {"sha": "5aa42e278012bc76ec3ab83fb30f095b8ee18635", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1723e1bedb9545c45619c4023729755243524584/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1723e1bedb9545c45619c4023729755243524584/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=1723e1bedb9545c45619c4023729755243524584", "patch": "@@ -3857,11 +3857,7 @@ c_parser_direct_declarator (c_parser *parser, bool type_seen_p, c_dtr_syn kind,\n       inner->id_loc = c_parser_peek_token (parser)->location;\n       c_parser_consume_token (parser);\n       if (c_parser_nth_token_starts_std_attributes (parser, 1))\n-\t{\n-\t  tree std_attrs = c_parser_std_attribute_specifier_sequence (parser);\n-\t  if (std_attrs)\n-\t    inner = build_attrs_declarator (std_attrs, inner);\n-\t}\n+\tinner->u.id.attrs = c_parser_std_attribute_specifier_sequence (parser);\n       return c_parser_direct_declarator_inner (parser, *seen_id, inner);\n     }\n \n@@ -3898,9 +3894,7 @@ c_parser_direct_declarator (c_parser *parser, bool type_seen_p, c_dtr_syn kind,\n \t    return NULL;\n \t  else\n \t    {\n-\t      inner\n-\t\t= build_function_declarator (args,\n-\t\t\t\t\t     build_id_declarator (NULL_TREE));\n+\t      inner = build_id_declarator (NULL_TREE);\n \t      if (!(args->types\n \t\t    && args->types != error_mark_node\n \t\t    && TREE_CODE (TREE_VALUE (args->types)) == IDENTIFIER_NODE)\n@@ -3911,6 +3905,7 @@ c_parser_direct_declarator (c_parser *parser, bool type_seen_p, c_dtr_syn kind,\n \t\t  if (std_attrs)\n \t\t    inner = build_attrs_declarator (std_attrs, inner);\n \t\t}\n+\t      inner = build_function_declarator (args, inner);\n \t      return c_parser_direct_declarator_inner (parser, *seen_id,\n \t\t\t\t\t\t       inner);\n \t    }\n@@ -4028,14 +4023,14 @@ c_parser_direct_declarator_inner (c_parser *parser, bool id_present,\n \t\t\t\t\t   static_seen, star_seen);\n       if (declarator == NULL)\n \treturn NULL;\n-      inner = set_array_declarator_inner (declarator, inner);\n       if (c_parser_nth_token_starts_std_attributes (parser, 1))\n \t{\n \t  tree std_attrs\n \t    = c_parser_std_attribute_specifier_sequence (parser);\n \t  if (std_attrs)\n \t    inner = build_attrs_declarator (std_attrs, inner);\n \t}\n+      inner = set_array_declarator_inner (declarator, inner);\n       return c_parser_direct_declarator_inner (parser, id_present, inner);\n     }\n   else if (c_parser_next_token_is (parser, CPP_OPEN_PAREN))\n@@ -4052,7 +4047,6 @@ c_parser_direct_declarator_inner (c_parser *parser, bool id_present,\n \treturn NULL;\n       else\n \t{\n-\t  inner = build_function_declarator (args, inner);\n \t  if (!(args->types\n \t\t&& args->types != error_mark_node\n \t\t&& TREE_CODE (TREE_VALUE (args->types)) == IDENTIFIER_NODE)\n@@ -4063,6 +4057,7 @@ c_parser_direct_declarator_inner (c_parser *parser, bool id_present,\n \t      if (std_attrs)\n \t\tinner = build_attrs_declarator (std_attrs, inner);\n \t    }\n+\t  inner = build_function_declarator (args, inner);\n \t  return c_parser_direct_declarator_inner (parser, id_present, inner);\n \t}\n     }\n@@ -4352,7 +4347,7 @@ c_parser_parameter_declaration (c_parser *parser, tree attrs,\n   c_declarator *id_declarator = declarator;\n   while (id_declarator && id_declarator->kind != cdk_id)\n     id_declarator = id_declarator->declarator;\n-  location_t caret_loc = (id_declarator->u.id\n+  location_t caret_loc = (id_declarator->u.id.id\n \t\t\t  ? id_declarator->id_loc\n \t\t\t  : start_loc);\n   location_t param_loc = make_location (caret_loc, start_loc, end_loc);"}, {"sha": "cdfb90803462275bf652cba712c07504dc5ff982", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1723e1bedb9545c45619c4023729755243524584/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1723e1bedb9545c45619c4023729755243524584/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=1723e1bedb9545c45619c4023729755243524584", "patch": "@@ -460,9 +460,15 @@ struct c_declarator {\n   /* Except for cdk_id, the contained declarator.  For cdk_id, NULL.  */\n   struct c_declarator *declarator;\n   union {\n-    /* For identifiers, an IDENTIFIER_NODE or NULL_TREE if an abstract\n-       declarator.  */\n-    tree id;\n+    /* For identifiers.  */\n+    struct {\n+      /* An IDENTIFIER_NODE, or NULL_TREE if an abstract\n+\t declarator.  */\n+      tree id;\n+      /* Any attributes (which apply to the declaration rather than to\n+\t the type described by the outer declarators).  */\n+      tree attrs;\n+    } id;\n     /* For functions.  */\n     struct c_arg_info *arg_info;\n     /* For arrays.  */"}, {"sha": "43e943744ae8ead204cae5dee8150778183d692a", "filename": "gcc/c/gimple-parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1723e1bedb9545c45619c4023729755243524584/gcc%2Fc%2Fgimple-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1723e1bedb9545c45619c4023729755243524584/gcc%2Fc%2Fgimple-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.c?ref=1723e1bedb9545c45619c4023729755243524584", "patch": "@@ -2040,13 +2040,13 @@ c_parser_gimple_declaration (gimple_parser &parser)\n       unsigned version, ver_offset;\n       if (declarator->kind == cdk_id\n \t  && is_gimple_reg_type (specs->type)\n-\t  && c_parser_parse_ssa_name_id (declarator->u.id,\n+\t  && c_parser_parse_ssa_name_id (declarator->u.id.id,\n \t\t\t\t\t &version, &ver_offset)\n \t  /* The following restricts it to unnamed anonymous SSA names\n \t     which fails parsing of named ones in dumps (we could\n \t     decide to not dump their name for -gimple).  */\n \t  && ver_offset == 0)\n-\tc_parser_parse_ssa_name (parser, declarator->u.id, specs->type,\n+\tc_parser_parse_ssa_name (parser, declarator->u.id.id, specs->type,\n \t\t\t\t version, ver_offset);\n       else\n \t{"}, {"sha": "5ded904a5f1df0d941dabca2f21edecb3d002a92", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1723e1bedb9545c45619c4023729755243524584/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1723e1bedb9545c45619c4023729755243524584/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1723e1bedb9545c45619c4023729755243524584", "patch": "@@ -1,3 +1,12 @@\n+2019-11-25  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/gnu2x-attrs-1.c: Do not expect message about attributes\n+\tappertaining to types.\n+\t* gcc.dg/gnu2x-attrs-2.c: New test.\n+\t* g++.dg/cpp0x/gen-attrs-1.C, g++.dg/cpp0x/gen-attrs-22.C,\n+\tg++.dg/cpp0x/gen-attrs-4.C, g++.dg/cpp0x/lambda/lambda-attr1.C:\n+\tUpdate expected diagnostics.\n+\n 2019-11-25  Tamar Christina  <tamar.christina@arm.com>\n \n \t* gcc.dg/torture/fp-int-convert-timode-1.c: Always run if int128."}, {"sha": "c2cf912047e9803493cece9693d87e22dfe62aa1", "filename": "gcc/testsuite/g++.dg/cpp0x/gen-attrs-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1723e1bedb9545c45619c4023729755243524584/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1723e1bedb9545c45619c4023729755243524584/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-1.C?ref=1723e1bedb9545c45619c4023729755243524584", "patch": "@@ -1,3 +1,3 @@\n // { dg-do compile { target c++11 } }\n \n-int **** [[gnu::format(printf, 1, 2)]] foo(const char *, ...); // { dg-warning \"ignored\" }\n+int **** [[gnu::format(printf, 1, 2)]] foo(const char *, ...); // { dg-warning \"only applies to function types\" }"}, {"sha": "e060c523fe3288d268bd62fa9aa12362bcc5383a", "filename": "gcc/testsuite/g++.dg/cpp0x/gen-attrs-22.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1723e1bedb9545c45619c4023729755243524584/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1723e1bedb9545c45619c4023729755243524584/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-22.C?ref=1723e1bedb9545c45619c4023729755243524584", "patch": "@@ -3,5 +3,5 @@\n \n void f()\n {\n-  static_cast<float *[[gnu::unused]]>(0); // { dg-warning \"ignored\" }\n+  static_cast<float *[[gnu::unused]]>(0);\n }"}, {"sha": "b401c6908e35ea3834e17ede740e8ddd544a80b3", "filename": "gcc/testsuite/g++.dg/cpp0x/gen-attrs-4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1723e1bedb9545c45619c4023729755243524584/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1723e1bedb9545c45619c4023729755243524584/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-4.C?ref=1723e1bedb9545c45619c4023729755243524584", "patch": "@@ -21,7 +21,7 @@ void two [[gnu::unused]] (void) {}\n [[gnu::unused]]\n int\n five(void)\n-[[noreturn]] // { dg-warning \"ignored\" }\n+[[noreturn]] // { dg-warning \"does not apply to types\" }\n { return 0; }\n \n [[noreturn]]"}, {"sha": "27321f2555477f9562b0303b89c53e094c243d61", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-attr1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1723e1bedb9545c45619c4023729755243524584/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-attr1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1723e1bedb9545c45619c4023729755243524584/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-attr1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-attr1.C?ref=1723e1bedb9545c45619c4023729755243524584", "patch": "@@ -1,3 +1,3 @@\n // { dg-do compile { target c++11 } }\n \n-auto l = []() [[noreturn]] {};\t// { dg-warning \"ignored\" }\n+auto l = []() [[noreturn]] {};\t// { dg-warning \"does not apply to types\" }"}, {"sha": "87bdaec0807677d4cf136abbbb083107e3a14afb", "filename": "gcc/testsuite/gcc.dg/gnu2x-attrs-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1723e1bedb9545c45619c4023729755243524584/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu2x-attrs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1723e1bedb9545c45619c4023729755243524584/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu2x-attrs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu2x-attrs-1.c?ref=1723e1bedb9545c45619c4023729755243524584", "patch": "@@ -7,8 +7,7 @@ void f (void) {};\n \n [[gnu::alias(\"f\")]] void g (void); /* { dg-error \"only weak\" \"\" { target *-*-darwin* } } */\n \n-void [[gnu::alias(\"f\")]] h (void); /* { dg-warning \"ignored\" } */\n-/* { dg-message \"that appertains to a type-specifier\" \"appertains\" { target *-*-* } .-1 } */\n+void [[gnu::alias(\"f\")]] h (void); /* { dg-warning \"does not apply to types\" } */\n \n struct [[gnu::packed]] s { int a; char b; };\n _Static_assert (sizeof (struct s) == (sizeof (int) + sizeof (char)));"}, {"sha": "d512b2a2aca2fa8cf9b986d20a76a35600b20e00", "filename": "gcc/testsuite/gcc.dg/gnu2x-attrs-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1723e1bedb9545c45619c4023729755243524584/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu2x-attrs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1723e1bedb9545c45619c4023729755243524584/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu2x-attrs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu2x-attrs-2.c?ref=1723e1bedb9545c45619c4023729755243524584", "patch": "@@ -0,0 +1,33 @@\n+/* Test C2x attribute syntax.  Test GNU attributes appertain to\n+   appropriate constructs.  Attributes on types not being defined at\n+   the time.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu2x -Wformat\" } */\n+\n+typedef void va_type (const char *, ...);\n+typedef va_type [[gnu::format (printf, 1, 2)]] printf_like_1;\n+typedef void printf_like_2 (const char *, ...) [[gnu::format (printf, 1, 2)]];\n+typedef __typeof__ (void (const char *, ...) [[gnu::format (printf, 1, 2)]])\n+  printf_like_3;\n+\n+va_type func1;\n+printf_like_1 func2;\n+printf_like_2 func3;\n+printf_like_3 func4;\n+va_type [[gnu::format (printf, 1, 2)]] *func5 (void);\n+\n+void\n+func_test (void)\n+{\n+  func1 (\"%s\", 1);\n+  func2 (\"%s\", 1); /* { dg-warning \"expects argument\" } */\n+  func3 (\"%s\", 1); /* { dg-warning \"expects argument\" } */\n+  func4 (\"%s\", 1); /* { dg-warning \"expects argument\" } */\n+  func5 () (\"%s\", 1); /* { dg-warning \"expects argument\" } */\n+}\n+\n+typedef int A[2];\n+\n+__typeof__ (int [[gnu::deprecated]]) var1; /* { dg-warning \"deprecated\" } */\n+__typeof__ (A [[gnu::deprecated]]) var2; /* { dg-warning \"deprecated\" } */\n+__typeof__ (int [3] [[gnu::deprecated]]) var3; /* { dg-warning \"deprecated\" } */"}]}