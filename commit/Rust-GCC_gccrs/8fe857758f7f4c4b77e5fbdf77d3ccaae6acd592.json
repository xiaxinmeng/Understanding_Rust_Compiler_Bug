{"sha": "8fe857758f7f4c4b77e5fbdf77d3ccaae6acd592", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZlODU3NzU4ZjdmNGM0Yjc3ZTVmYmRmNzdkM2NjYWFlNmFjZDU5Mg==", "commit": {"author": {"name": "Carlo Wood", "email": "carlo@gnu.org", "date": "2003-03-11T19:55:46Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2003-03-11T19:55:46Z"}, "message": "cplus-dem.c (demangle_integral_value): Correction to reflect patch of 2002-01-10 in order to also make negative...\n\n* cplus-dem.c (demangle_integral_value): Correction to reflect\npatch of 2002-01-10 in order to also make negative multi-digits\nwithout leading underscore work.\n\nFrom-SVN: r64179", "tree": {"sha": "d11fcd23dac8ba0b123b34a7b5675e70632db235", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d11fcd23dac8ba0b123b34a7b5675e70632db235"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fe857758f7f4c4b77e5fbdf77d3ccaae6acd592", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fe857758f7f4c4b77e5fbdf77d3ccaae6acd592", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fe857758f7f4c4b77e5fbdf77d3ccaae6acd592", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fe857758f7f4c4b77e5fbdf77d3ccaae6acd592/comments", "author": null, "committer": null, "parents": [{"sha": "d2f55c5c66c85b644d09982c3c7b2462596766c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2f55c5c66c85b644d09982c3c7b2462596766c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2f55c5c66c85b644d09982c3c7b2462596766c7"}], "stats": {"total": 55, "additions": 32, "deletions": 23}, "files": [{"sha": "c863114f0beb9af50ed2aa860868bcda2dc6b1f8", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fe857758f7f4c4b77e5fbdf77d3ccaae6acd592/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fe857758f7f4c4b77e5fbdf77d3ccaae6acd592/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=8fe857758f7f4c4b77e5fbdf77d3ccaae6acd592", "patch": "@@ -1,3 +1,9 @@\n+2003-03-11  Carlo Wood  <carlo@gnu.org>\n+\n+\t* cplus-dem.c (demangle_integral_value): Correction to reflect\n+\tpatch of 2002-01-10 in order to also make negative multi-digits\n+\twithout leading underscore work.\n+\n 2003-03-03  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cplus-dem.c: Add license exception to copyright notice."}, {"sha": "59afcd371ba5f4caa5240a1e286235e29d737d1a", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fe857758f7f4c4b77e5fbdf77d3ccaae6acd592/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fe857758f7f4c4b77e5fbdf77d3ccaae6acd592/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=8fe857758f7f4c4b77e5fbdf77d3ccaae6acd592", "patch": "@@ -1797,31 +1797,34 @@ demangle_integral_value (work, mangled, s)\n \n       success = 0;\n \n-      /* Negative numbers are indicated with a leading `m'.  */\n-      if (**mangled == 'm')\n-\t{\n-\t  string_appendn (s, \"-\", 1);\n-\t  (*mangled)++;\n-\t}\n-      else if (mangled[0][0] == '_' && mangled[0][1] == 'm')\n-\t{\n-\t  /* Since consume_count_with_underscores does not handle the\n-\t     `m'-prefix we must do it here, using consume_count and\n-\t     adjusting underscores: we have to consume the underscore\n-\t     matching the prepended one.  */\n-\t  multidigit_without_leading_underscore = 1;\n-\t  string_appendn (s, \"-\", 1);\n-\t  (*mangled) += 2;\n-\t}\n-      else if (**mangled == '_')\n-\t{\n-\t  /* Do not consume a following underscore;\n-\t     multidigit_without_leading_underscore will consume what should be\n-\t     consumed.  */\n-\t  leave_following_underscore = 1;\n+      if (**mangled == '_')\n+        {\n+\t  if (mangled[0][1] == 'm')\n+\t    {\n+\t      /* Since consume_count_with_underscores does not handle the\n+\t\t `m'-prefix we must do it here, using consume_count and\n+\t\t adjusting underscores: we have to consume the underscore\n+\t\t matching the prepended one.  */\n+\t      multidigit_without_leading_underscore = 1;\n+\t      string_appendn (s, \"-\", 1);\n+\t      (*mangled) += 2;\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Do not consume a following underscore;\n+\t         consume_count_with_underscores will consume what\n+\t         should be consumed.  */\n+\t      leave_following_underscore = 1;\n+\t    }\n \t}\n       else\n \t{\n+\t  /* Negative numbers are indicated with a leading `m'.  */\n+\t  if (**mangled == 'm')\n+\t  {\n+\t    string_appendn (s, \"-\", 1);\n+\t    (*mangled)++;\n+\t  }\n \t  /* Since consume_count_with_underscores does not handle\n \t     multi-digit numbers that do not start with an underscore,\n \t     and this number can be an integer template parameter,\n@@ -1862,7 +1865,7 @@ demangle_integral_value (work, mangled, s)\n \t  /* All is well.  */\n \t  success = 1;\n \t}\n-    }\n+      }\n \n   return success;\n }"}]}