{"sha": "ecc7568da6e6f2776c123b0021568d73a1ff0a03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNjNzU2OGRhNmU2ZjI3NzZjMTIzYjAwMjE1NjhkNzNhMWZmMGEwMw==", "commit": {"author": {"name": "Jerry Quinn", "email": "jlquinn@optonline.net", "date": "2004-03-10T06:50:13Z"}, "committer": {"name": "Jerry Quinn", "email": "jlquinn@gcc.gnu.org", "date": "2004-03-10T06:50:13Z"}, "message": "re PR libstdc++/3247 (valarray private member)\n\n2004-03-10  Jerry Quinn  <jlquinn@optonline.net>\n\n\tPR 3247\n\t* include/bits/gslice_array.h (gslice_array()): Make public.\n\t(operator=(gslice_array)): Make public.  Implement.\n\t* include/bits/indirect_array.h (indirect_array()): Make public.\n\t* include/bits/mask_array.h (mask_array()): Make public.\n\t(operator=(mask_array)): Make public.  Implement.\n\t* include/bits/valarray_array.tcc (__valarray_copy):\n\tComment.  Add versions for gslice_array and mask_array.\n\t* testsuite/26_numerics/valarray_subset_assignment.cc:  New test.\n\nFrom-SVN: r79226", "tree": {"sha": "8e2ff50b3353c86b0aa0ea231e442d679aae79bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e2ff50b3353c86b0aa0ea231e442d679aae79bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecc7568da6e6f2776c123b0021568d73a1ff0a03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecc7568da6e6f2776c123b0021568d73a1ff0a03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecc7568da6e6f2776c123b0021568d73a1ff0a03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecc7568da6e6f2776c123b0021568d73a1ff0a03/comments", "author": {"login": "jlquinn", "id": 826841, "node_id": "MDQ6VXNlcjgyNjg0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/826841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlquinn", "html_url": "https://github.com/jlquinn", "followers_url": "https://api.github.com/users/jlquinn/followers", "following_url": "https://api.github.com/users/jlquinn/following{/other_user}", "gists_url": "https://api.github.com/users/jlquinn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlquinn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlquinn/subscriptions", "organizations_url": "https://api.github.com/users/jlquinn/orgs", "repos_url": "https://api.github.com/users/jlquinn/repos", "events_url": "https://api.github.com/users/jlquinn/events{/privacy}", "received_events_url": "https://api.github.com/users/jlquinn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6dde938c119bc55f7b7ee5aedf4f5962e98a39b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dde938c119bc55f7b7ee5aedf4f5962e98a39b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dde938c119bc55f7b7ee5aedf4f5962e98a39b0"}], "stats": {"total": 159, "additions": 142, "deletions": 17}, "files": [{"sha": "fa10cd9af4beaa1ee34e0ac28ced3c07e5617e84", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc7568da6e6f2776c123b0021568d73a1ff0a03/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc7568da6e6f2776c123b0021568d73a1ff0a03/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ecc7568da6e6f2776c123b0021568d73a1ff0a03", "patch": "@@ -1,3 +1,15 @@\n+2004-03-10  Jerry Quinn  <jlquinn@optonline.net>\n+\n+\tPR 3247\n+\t* include/bits/gslice_array.h (gslice_array()): Make public.\n+\t(operator=(gslice_array)): Make public.  Implement.\n+\t* include/bits/indirect_array.h (indirect_array()): Make public.\n+\t* include/bits/mask_array.h (mask_array()): Make public.\n+\t(operator=(mask_array)): Make public.  Implement.\n+\t* include/bits/valarray_array.tcc (__valarray_copy):\n+\tComment.  Add versions for gslice_array and mask_array.\n+\t* testsuite/26_numerics/valarray_subset_assignment.cc:  New test.\n+\n 2004-03-09  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/23_containers/deque/modifiers/swap.cc: Add in bits for"}, {"sha": "78f8a67146bec4dfabe4234a2cbcc5aec7d042c7", "filename": "libstdc++-v3/include/bits/gslice.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc7568da6e6f2776c123b0021568d73a1ff0a03/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc7568da6e6f2776c123b0021568d73a1ff0a03/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice.h?ref=ecc7568da6e6f2776c123b0021568d73a1ff0a03", "patch": "@@ -106,7 +106,7 @@ namespace std {\n \tsize_t _M_start;\n \tvalarray<size_t> _M_size;\n \tvalarray<size_t> _M_stride;\n-\tvalarray<size_t> _M_index;\n+\tvalarray<size_t> _M_index; // Linear array of referenced indices\n \t_Indexer(size_t, const valarray<size_t>&,\n \t\t const valarray<size_t>&);\n \tvoid _M_increment_use() { ++_M_count; }"}, {"sha": "e50a74dc2bbb5996fcfbe4ca93188b7d2aae714f", "filename": "libstdc++-v3/include/bits/gslice_array.h", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc7568da6e6f2776c123b0021568d73a1ff0a03/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc7568da6e6f2776c123b0021568d73a1ff0a03/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h?ref=ecc7568da6e6f2776c123b0021568d73a1ff0a03", "patch": "@@ -61,6 +61,15 @@ namespace std {\n     public:\n       typedef _Tp value_type;\n \n+      // this constructor needs to be implemented.\n+      ///  Copy constructor.  Both slices refer to the same underlying array.\n+      gslice_array(const gslice_array&);\n+\n+      // This operator must be public.  See DR-253.\n+      ///  Assignment operator.  Assigns slice elements to corresponding\n+      ///  elements of @a a.\n+      gslice_array& operator=(const gslice_array&);\n+\n       ///  Assign slice elements to corresponding elements of @a v.\n       void operator=(const valarray<_Tp>&) const;\n       ///  Multiply slice elements by corresponding elements of @a v.\n@@ -117,16 +126,8 @@ namespace std {\n \n       gslice_array(_Array<_Tp>, const valarray<size_t>&);\n \n-      // this constructor needs to be implemented.\n-      ///  Copy constructor.  Both slices refer to the same underlying array.\n-      gslice_array(const gslice_array&);\n-\n       // not implemented\n       gslice_array();\n-\n-      ///  Assignment operator.  Assigns slice elements to corresponding\n-      ///  elements of @a a.\n-      gslice_array& operator= (const gslice_array&);\n     };\n \n   template<typename _Tp>\n@@ -142,6 +143,16 @@ namespace std {\n       : _M_array(__a._M_array), _M_index(__a._M_index) {}\n \n \n+  template<typename _Tp>\n+    inline gslice_array<_Tp>&\n+    gslice_array<_Tp>::operator=(const gslice_array<_Tp>& __a)\n+    {\n+      std::__valarray_copy(_Array<_Tp>(__a._M_array),\n+\t\t\t   _Array<size_t>(__a._M_index), _M_index.size(),\n+\t\t\t   _M_array, _Array<size_t>(_M_index));\n+      return *this;\n+    }\n+\n   template<typename _Tp>\n     inline void\n     gslice_array<_Tp>::operator=(const _Tp& __t) const"}, {"sha": "1f4a71377d4f00f922a7b32b503b1a66d468cfc0", "filename": "libstdc++-v3/include/bits/indirect_array.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc7568da6e6f2776c123b0021568d73a1ff0a03/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc7568da6e6f2776c123b0021568d73a1ff0a03/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h?ref=ecc7568da6e6f2776c123b0021568d73a1ff0a03", "patch": "@@ -63,6 +63,10 @@ namespace std\n     public:\n       typedef _Tp value_type;\n \n+      // this constructor needs to be implemented.\n+      ///  Copy constructor.  Both slices refer to the same underlying array.\n+      indirect_array(const indirect_array&);\n+\n       // XXX: This is a proposed resolution for DR-253.\n       ///  Assignment operator.  Assigns elements to corresponding elements\n       ///  of @a a.\n@@ -119,7 +123,6 @@ namespace std\n \n     private:\n       ///  Copy constructor.  Both slices refer to the same underlying array.\n-      indirect_array(const indirect_array&);\n       indirect_array(_Array<_Tp>, size_t, _Array<size_t>);\n \n       friend class valarray<_Tp>;"}, {"sha": "4faa5d763bbf78b20c8e8d4af89374a91126afb5", "filename": "libstdc++-v3/include/bits/mask_array.h", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc7568da6e6f2776c123b0021568d73a1ff0a03/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc7568da6e6f2776c123b0021568d73a1ff0a03/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h?ref=ecc7568da6e6f2776c123b0021568d73a1ff0a03", "patch": "@@ -63,6 +63,15 @@ namespace std {\n     public:\n       typedef _Tp value_type;\n \n+      // this constructor needs to be implemented.\n+      ///  Copy constructor.  Both slices refer to the same underlying array.\n+      mask_array (const mask_array&);\n+      \n+      // This operator must be public.  See DR-253.\n+      ///  Assignment operator.  Assigns elements to corresponding elements\n+      ///  of @a a.\n+      mask_array& operator=(const mask_array&);\n+\n       void operator=(const valarray<_Tp>&) const;\n       ///  Multiply slice elements by corresponding elements of @a v.\n       void operator*=(const valarray<_Tp>&) const;\n@@ -120,15 +129,8 @@ namespace std {\n       const _Array<bool> _M_mask;\n       const _Array<_Tp>   _M_array;\n \n-      ///  Copy constructor.  Both slices refer to the same underlying array.\n-      mask_array (const mask_array&);\n-\n       // not implemented\n       mask_array();\n-\n-      ///  Assignment operator.  Assigns elements to corresponding elements\n-      ///  of @a a.\n-      mask_array& operator=(const mask_array&);\n     };\n \n \n@@ -141,6 +143,15 @@ namespace std {\n     mask_array<_Tp>::mask_array(_Array<_Tp> __a, size_t __s, _Array<bool> __m)\n       : _M_sz(__s), _M_mask(__m), _M_array(__a) {}\n \n+  template<typename _Tp>\n+    inline mask_array<_Tp>&\n+    mask_array<_Tp>::operator=(const mask_array<_Tp>& __a)\n+    {\n+      std::__valarray_copy(__a._M_array, __a._M_mask,\n+\t\t\t   _M_sz, _M_array, _M_mask);\n+      return *this;\n+    }\n+\n   template<typename _Tp>\n     inline void\n     mask_array<_Tp>::operator=(const _Tp& __t) const"}, {"sha": "b8caaed889cd8e83153f3a98eef93624b11f3fa4", "filename": "libstdc++-v3/testsuite/26_numerics/valarray_subset_assignment.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc7568da6e6f2776c123b0021568d73a1ff0a03/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray_subset_assignment.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc7568da6e6f2776c123b0021568d73a1ff0a03/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray_subset_assignment.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray_subset_assignment.cc?ref=ecc7568da6e6f2776c123b0021568d73a1ff0a03", "patch": "@@ -0,0 +1,88 @@\n+// 2004-01-03  Jerry Quinn  <jlquinn@optonline.net>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// PR 3247\n+\n+// This is DR-253.  Test for accessible assignment-operators.\n+#include <valarray>\n+#include <testsuite_hooks.h>\n+\n+bool check_array(std::valarray<double>& a, double[] b)\n+{\n+  for (int i=0; i < a.size(); i++)\n+    if (a[i] != b[i]) return false;\n+  return true;\n+}\n+\n+int main()\n+{\n+  double dvar = 1.0;\n+  std::valarray<double> val_d(10);  //  0 1 2 3 4 5 6 7 8 9 \n+  std::valarray<double> val_d1(10); // 10 9 8 7 6 5 4 3 2 1\n+\n+  for (int i=0; i< 10; i++) { val_d[i] = 10;  val_d1[i] = i; }\n+  std::valarray<double> val_c(val_d);\n+  std::valarray<double> val_f(val_d);\n+  std::valarray<double> val_g(val_d);\n+\n+  std::slice slc(1, 3, 3);\t// 1 4 7\n+  val_d[slc] = val_d1[slc];\n+\n+  double ans1[10] = {10, 1, 10, 10, 4, 10, 10, 7, 10, 10};\n+  VERIFY(check_array(val_d, ans1));\n+\n+  std::valarray<std::size_t> val_size(2);\n+  std::valarray<std::size_t> val_stride(2);\n+  val_size[0] = 2;   val_size[1] = 3;\n+  val_stride[0] = 4; val_stride[1] = 1;\n+\n+  std::gslice gslc(1, val_size, val_stride);\n+  val_c[gslc] = val_d1[gslc];\n+\n+  double ans2[10] = {10, 1, 2, 3 10, 5, 6, 7, 10, 10};\n+  VERIFY(check_array(val_c, ans2));\n+\n+  std::valarray<bool> val_b(false, 10);\n+  val_b[2] = val_b[6] = val_b[9] = true;\n+  val_f[val_b] = val_d1[val_b];\n+\n+  double ans3[10] = {10, 10, 2, 10, 10, 10, 6, 10, 10, 9};\n+  VERIFY(check_array(val_f, ans3));\n+\n+  size_t addr[] = {1, 2, 3, 4, 5};\n+  size_t addr1[] = {2, 7, 1, 9, 4};\n+  std::valarray<std::size_t> val_indirect(addr, 5);\n+  std::valarray<std::size_t> val_indirect1(addr1, 5);\n+  val_g[val_indirect] = val_d1[val_indirect1];\n+\n+  double ans4[10] = {10, 2, 7, 1, 9, 4, 10, 10, 10, 10};\n+  VERIFY(check_array(val_g, ans4));\n+\n+  return 0;\n+};"}]}