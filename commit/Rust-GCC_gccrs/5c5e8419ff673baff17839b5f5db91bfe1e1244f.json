{"sha": "5c5e8419ff673baff17839b5f5db91bfe1e1244f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM1ZTg0MTlmZjY3M2JhZmYxNzgzOWI1ZjVkYjkxYmZlMWUxMjQ0Zg==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@spamcop.net", "date": "2010-11-08T18:52:51Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2010-11-08T18:52:51Z"}, "message": "re PR target/44758 (frv.md: incompatible enum comparisons / return)\n\n2010-11-08  Joern Rennecke  <amylaar@spamcop.net>\n\t    Richard Henderson <rth@redhat.com>\n\n\tPR target/44758\n\t* config/frv/frv.md (attribute cpu): Cast value to enum attr_cpu.\n\t(attribute acc_group): Cast value to enum attr_acc_group.\n\t(*movdi_nodouble+6): Use gen_int_mode.\n\t* config/frv/frv-protos.h (frv_trampoline_size): Declare no matter\n\tif RTX_CODE is defined or not.\n\t* config/frv/frv.c (enum frv_io_type): New enum, broken out of\n\tstruct frv_io.\n\t(frv_handle_option): Mark parameter value with ATTRIBUTE_UNUSED.\n\t(frv_frame_access, frv_expand_prologue): Remove unused variables.\n\t(frv_expand_block_clear): Likewise.\n\t(frv_trampoline_init): Use LCT_NORMAL.\n\t(struct frv_packet_group): New struct, broken out of type of\n\tfrv_packet.\n\t(frv_start_packet, frv_reorder_packet): Initialize group to GROUP_I,\n\tuse cast in loop counter increment.\n\t(frv_extract_membar): Cast HOST_WIDE_INT to enum frv_io_type before\n\tassigning to io->type.\n\t(bdesc_set): Use rtx_code UNKNOWN in initializer.\n\t(bdesc_1arg, bdesc_2arg, bdesc_int_void2arg): Likewise.\n\t(bdesc_prefetches, bdesc_cut, bdesc_2argimm, bdesc_void2arg): Likewise.\n\t(bdesc_void3arg, bdesc_voidacc, bdesc_loads, bdesc_stores): Likewise.\n\t(frv_read_argument): Use expand_normal.\n\nCo-Authored-By: Richard Henderson <rth@redhat.com>\n\nFrom-SVN: r166447", "tree": {"sha": "d524b6da3e615bc84bb1800e77cbcb076cd61600", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d524b6da3e615bc84bb1800e77cbcb076cd61600"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c5e8419ff673baff17839b5f5db91bfe1e1244f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c5e8419ff673baff17839b5f5db91bfe1e1244f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c5e8419ff673baff17839b5f5db91bfe1e1244f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c5e8419ff673baff17839b5f5db91bfe1e1244f/comments", "author": null, "committer": null, "parents": [{"sha": "d079459e5688770099bec5528abfe5397adbd0f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d079459e5688770099bec5528abfe5397adbd0f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d079459e5688770099bec5528abfe5397adbd0f6"}], "stats": {"total": 318, "additions": 174, "deletions": 144}, "files": [{"sha": "1b4df960cd4c53b19789c8db68df9442c1d2acbe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c5e8419ff673baff17839b5f5db91bfe1e1244f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c5e8419ff673baff17839b5f5db91bfe1e1244f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c5e8419ff673baff17839b5f5db91bfe1e1244f", "patch": "@@ -1,3 +1,30 @@\n+2010-11-08  Joern Rennecke  <amylaar@spamcop.net>\n+\t    Richard Henderson <rth@redhat.com>\n+\n+\tPR target/44758\n+\t* config/frv/frv.md (attribute cpu): Cast value to enum attr_cpu.\n+\t(attribute acc_group): Cast value to enum attr_acc_group.\n+\t(*movdi_nodouble+6): Use gen_int_mode.\n+\t* config/frv/frv-protos.h (frv_trampoline_size): Declare no matter\n+\tif RTX_CODE is defined or not.\n+\t* config/frv/frv.c (enum frv_io_type): New enum, broken out of\n+\tstruct frv_io.\n+\t(frv_handle_option): Mark parameter value with ATTRIBUTE_UNUSED.\n+\t(frv_frame_access, frv_expand_prologue): Remove unused variables.\n+\t(frv_expand_block_clear): Likewise.\n+\t(frv_trampoline_init): Use LCT_NORMAL.\n+\t(struct frv_packet_group): New struct, broken out of type of\n+\tfrv_packet.\n+\t(frv_start_packet, frv_reorder_packet): Initialize group to GROUP_I,\n+\tuse cast in loop counter increment.\n+\t(frv_extract_membar): Cast HOST_WIDE_INT to enum frv_io_type before\n+\tassigning to io->type.\n+\t(bdesc_set): Use rtx_code UNKNOWN in initializer.\n+\t(bdesc_1arg, bdesc_2arg, bdesc_int_void2arg): Likewise.\n+\t(bdesc_prefetches, bdesc_cut, bdesc_2argimm, bdesc_void2arg): Likewise.\n+\t(bdesc_void3arg, bdesc_voidacc, bdesc_loads, bdesc_stores): Likewise.\n+\t(frv_read_argument): Use expand_normal.\n+\n 2010-11-08  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/i386/i386.c (ix86_function_arg_boundary): Fix warning"}, {"sha": "3fd9d0c16d9f192e26bc6f62fed9299b69ea6c50", "filename": "gcc/config/frv/frv-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c5e8419ff673baff17839b5f5db91bfe1e1244f/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c5e8419ff673baff17839b5f5db91bfe1e1244f/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=5c5e8419ff673baff17839b5f5db91bfe1e1244f", "patch": "@@ -89,7 +89,6 @@ extern rtx frv_ifcvt_modify_insn\t(ce_if_block_t *, rtx, rtx);\n extern void frv_ifcvt_modify_final\t(ce_if_block_t *);\n extern void frv_ifcvt_modify_cancel\t(ce_if_block_t *);\n #endif\n-extern int frv_trampoline_size\t\t(void);\n extern enum reg_class frv_secondary_reload_class\n \t\t\t\t\t(enum reg_class,\n \t\t\t\t\t enum machine_mode, rtx);\n@@ -101,6 +100,7 @@ extern int frv_legitimate_constant_p\t(rtx);\n extern enum machine_mode frv_select_cc_mode (enum rtx_code, rtx, rtx);\n #endif\t/* RTX_CODE */\n \n+extern int frv_trampoline_size\t\t(void);\n extern int direct_return_p\t\t(void);\n extern int frv_issue_rate\t\t(void);\n extern int frv_acc_group\t\t(rtx);"}, {"sha": "fc127ac115abba06b01f8747f7afee55117579e0", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 142, "deletions": 137, "changes": 279, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c5e8419ff673baff17839b5f5db91bfe1e1244f/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c5e8419ff673baff17839b5f5db91bfe1e1244f/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=5c5e8419ff673baff17839b5f5db91bfe1e1244f", "patch": "@@ -109,13 +109,15 @@ static GTY(()) rtx frv_nops[NUM_NOP_PATTERNS];\n /* The number of nop instructions in frv_nops[].  */\n static unsigned int frv_num_nops;\n \n+  /* The type of access.  FRV_IO_UNKNOWN means the access can be either\n+     a read or a write.  */\n+enum frv_io_type { FRV_IO_UNKNOWN, FRV_IO_READ, FRV_IO_WRITE };\n+\n /* Information about one __builtin_read or __builtin_write access, or\n    the combination of several such accesses.  The most general value\n    is all-zeros (an unknown access to an unknown address).  */\n struct frv_io {\n-  /* The type of access.  FRV_IO_UNKNOWN means the access can be either\n-     a read or a write.  */\n-  enum { FRV_IO_UNKNOWN, FRV_IO_READ, FRV_IO_WRITE } type;\n+  enum frv_io_type type;\n \n   /* The constant address being accessed, or zero if not known.  */\n   HOST_WIDE_INT const_address;\n@@ -625,7 +627,7 @@ frv_cannot_force_const_mem (rtx x ATTRIBUTE_UNUSED)\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-frv_handle_option (size_t code, const char *arg, int value)\n+frv_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n {\n   switch (code)\n     {\n@@ -1720,9 +1722,10 @@ frv_frame_access (frv_frame_accessor_t *accessor, rtx reg, int stack_offset)\n \t      && GET_CODE (XEXP (XEXP (mem, 0), 1)) == REG)\n \t    {\n \t      rtx temp = gen_rtx_REG (SImode, TEMP_REGNO);\n-\t      rtx insn = emit_move_insn (temp,\n-\t\t\t\t\t gen_rtx_PLUS (SImode, XEXP (XEXP (mem, 0), 0),\n-\t\t\t\t\t\t       XEXP (XEXP (mem, 0), 1)));\n+\n+\t      emit_move_insn (temp,\n+\t\t\t      gen_rtx_PLUS (SImode, XEXP (XEXP (mem, 0), 0),\n+\t\t\t\t\t    XEXP (XEXP (mem, 0), 1)));\n \t      mem = gen_rtx_MEM (DImode, temp);\n \t    }\n \t  emit_insn (gen_rtx_SET (VOIDmode, reg, mem));\n@@ -1753,9 +1756,9 @@ frv_frame_access (frv_frame_accessor_t *accessor, rtx reg, int stack_offset)\n \t      && GET_CODE (XEXP (XEXP (mem, 0), 1)) == REG)\n \t    {\n \t      rtx temp = gen_rtx_REG (SImode, TEMP_REGNO);\n-\t      rtx insn = emit_move_insn (temp,\n-\t\t\t\t\t gen_rtx_PLUS (SImode, XEXP (XEXP (mem, 0), 0),\n-\t\t\t\t\t\t       XEXP (XEXP (mem, 0), 1)));\n+\t      emit_move_insn (temp,\n+\t\t\t      gen_rtx_PLUS (SImode, XEXP (XEXP (mem, 0), 0),\n+\t\t\t\t\t    XEXP (XEXP (mem, 0), 1)));\n \t      mem = gen_rtx_MEM (DImode, temp);\n \t    }\n \n@@ -1860,11 +1863,9 @@ frv_expand_prologue (void)\n   accessor.op = FRV_STORE;\n   if (frame_pointer_needed && info->total_size > 2048)\n     {\n-      rtx insn;\n-\n       accessor.base = gen_rtx_REG (Pmode, OLD_SP_REGNO);\n       accessor.base_offset = info->total_size;\n-      insn = emit_insn (gen_movsi (accessor.base, sp));\n+      emit_insn (gen_movsi (accessor.base, sp));\n     }\n   else\n     {\n@@ -2393,7 +2394,6 @@ frv_expand_block_clear (rtx operands[])\n   int align;\n   int bytes;\n   int offset;\n-  int num_reg;\n   rtx dest_reg;\n   rtx dest_addr;\n   rtx dest_mem;\n@@ -2421,7 +2421,7 @@ frv_expand_block_clear (rtx operands[])\n   /* Move the address into a scratch register.  */\n   dest_reg = copy_addr_to_reg (XEXP (orig_dest, 0));\n \n-  num_reg = offset = 0;\n+  offset = 0;\n   for ( ; bytes > 0; (bytes -= clear_bytes), (offset += clear_bytes))\n     {\n       /* Calculate the correct offset for src/dest.  */\n@@ -6371,7 +6371,7 @@ frv_trampoline_init (rtx m_tramp, tree fndecl, rtx static_chain)\n   rtx sc_reg = force_reg (Pmode, static_chain);\n \n   emit_library_call (gen_rtx_SYMBOL_REF (SImode, \"__trampoline_setup\"),\n-\t\t     FALSE, VOIDmode, 4,\n+\t\t     LCT_NORMAL, VOIDmode, 4,\n \t\t     addr, Pmode,\n \t\t     GEN_INT (frv_trampoline_size ()), SImode,\n \t\t     fnaddr, Pmode,\n@@ -7167,6 +7167,24 @@ frv_issues_to_branch_unit_p (rtx insn)\n   return frv_unit_groups[frv_insn_unit (insn)] == GROUP_B;\n }\n \f\n+/* The instructions in the packet, partitioned into groups.  */\n+struct frv_packet_group {\n+  /* How many instructions in the packet belong to this group.  */\n+  unsigned int num_insns;\n+\n+  /* A list of the instructions that belong to this group, in the order\n+     they appear in the rtl stream.  */\n+  rtx insns[ARRAY_SIZE (frv_unit_codes)];\n+\n+  /* The contents of INSNS after they have been sorted into the correct\n+     assembly-language order.  Element X issues to unit X.  The list may\n+     contain extra nops.  */\n+  rtx sorted[ARRAY_SIZE (frv_unit_codes)];\n+\n+  /* The member of frv_nops[] to use in sorted[].  */\n+  rtx nop;\n+};\n+\n /* The current state of the packing pass, implemented by frv_pack_insns.  */\n static struct {\n   /* The state of the pipeline DFA.  */\n@@ -7192,22 +7210,7 @@ static struct {\n   unsigned int issue_rate;\n \n   /* The instructions in the packet, partitioned into groups.  */\n-  struct frv_packet_group {\n-    /* How many instructions in the packet belong to this group.  */\n-    unsigned int num_insns;\n-\n-    /* A list of the instructions that belong to this group, in the order\n-       they appear in the rtl stream.  */\n-    rtx insns[ARRAY_SIZE (frv_unit_codes)];\n-\n-    /* The contents of INSNS after they have been sorted into the correct\n-       assembly-language order.  Element X issues to unit X.  The list may\n-       contain extra nops.  */\n-    rtx sorted[ARRAY_SIZE (frv_unit_codes)];\n-\n-    /* The member of frv_nops[] to use in sorted[].  */\n-    rtx nop;\n-  } groups[NUM_GROUPS];\n+  struct frv_packet_group groups[NUM_GROUPS];\n \n   /* The instructions that make up the current packet.  */\n   rtx insns[ARRAY_SIZE (frv_unit_codes)];\n@@ -7380,7 +7383,8 @@ frv_start_packet (void)\n   memset (frv_packet.regstate, 0, sizeof (frv_packet.regstate));\n   frv_packet.num_mems = 0;\n   frv_packet.num_insns = 0;\n-  for (group = 0; group < NUM_GROUPS; group++)\n+  for (group =  GROUP_I; group < NUM_GROUPS;\n+       group = (enum frv_insn_group) (group + 1))\n     frv_packet.groups[group].num_insns = 0;\n }\n \n@@ -7729,7 +7733,8 @@ frv_reorder_packet (void)\n   struct frv_packet_group *packet_group;\n \n   /* First sort each group individually.  */\n-  for (group = 0; group < NUM_GROUPS; group++)\n+  for (group = GROUP_I; group < NUM_GROUPS;\n+       group = (enum frv_insn_group) (group + 1))\n     {\n       cursor[group] = 0;\n       frv_sort_insn_group (group);\n@@ -7862,7 +7867,7 @@ static void\n frv_extract_membar (struct frv_io *io, rtx insn)\n {\n   extract_insn (insn);\n-  io->type = INTVAL (recog_data.operand[2]);\n+  io->type = (enum frv_io_type) INTVAL (recog_data.operand[2]);\n   io->const_address = INTVAL (recog_data.operand[1]);\n   io->var_address = XEXP (recog_data.operand[0], 0);\n }\n@@ -8281,153 +8286,154 @@ struct builtin_description\n \n static struct builtin_description bdesc_set[] =\n {\n-  { CODE_FOR_mhdsets, \"__MHDSETS\", FRV_BUILTIN_MHDSETS, 0, 0 }\n+  { CODE_FOR_mhdsets, \"__MHDSETS\", FRV_BUILTIN_MHDSETS, UNKNOWN, 0 }\n };\n \n /* Media intrinsics that take just one argument.  */\n \n static struct builtin_description bdesc_1arg[] =\n {\n-  { CODE_FOR_mnot, \"__MNOT\", FRV_BUILTIN_MNOT, 0, 0 },\n-  { CODE_FOR_munpackh, \"__MUNPACKH\", FRV_BUILTIN_MUNPACKH, 0, 0 },\n-  { CODE_FOR_mbtoh, \"__MBTOH\", FRV_BUILTIN_MBTOH, 0, 0 },\n-  { CODE_FOR_mhtob, \"__MHTOB\", FRV_BUILTIN_MHTOB, 0, 0 },\n-  { CODE_FOR_mabshs, \"__MABSHS\", FRV_BUILTIN_MABSHS, 0, 0 },\n-  { CODE_FOR_scutss, \"__SCUTSS\", FRV_BUILTIN_SCUTSS, 0, 0 }\n+  { CODE_FOR_mnot, \"__MNOT\", FRV_BUILTIN_MNOT, UNKNOWN, 0 },\n+  { CODE_FOR_munpackh, \"__MUNPACKH\", FRV_BUILTIN_MUNPACKH, UNKNOWN, 0 },\n+  { CODE_FOR_mbtoh, \"__MBTOH\", FRV_BUILTIN_MBTOH, UNKNOWN, 0 },\n+  { CODE_FOR_mhtob, \"__MHTOB\", FRV_BUILTIN_MHTOB, UNKNOWN, 0},\n+  { CODE_FOR_mabshs, \"__MABSHS\", FRV_BUILTIN_MABSHS, UNKNOWN, 0 },\n+  { CODE_FOR_scutss, \"__SCUTSS\", FRV_BUILTIN_SCUTSS, UNKNOWN, 0 }\n };\n \n /* Media intrinsics that take two arguments.  */\n \n static struct builtin_description bdesc_2arg[] =\n {\n-  { CODE_FOR_mand, \"__MAND\", FRV_BUILTIN_MAND, 0, 0 },\n-  { CODE_FOR_mor, \"__MOR\", FRV_BUILTIN_MOR, 0, 0 },\n-  { CODE_FOR_mxor, \"__MXOR\", FRV_BUILTIN_MXOR, 0, 0 },\n-  { CODE_FOR_maveh, \"__MAVEH\", FRV_BUILTIN_MAVEH, 0, 0 },\n-  { CODE_FOR_msaths, \"__MSATHS\", FRV_BUILTIN_MSATHS, 0, 0 },\n-  { CODE_FOR_msathu, \"__MSATHU\", FRV_BUILTIN_MSATHU, 0, 0 },\n-  { CODE_FOR_maddhss, \"__MADDHSS\", FRV_BUILTIN_MADDHSS, 0, 0 },\n-  { CODE_FOR_maddhus, \"__MADDHUS\", FRV_BUILTIN_MADDHUS, 0, 0 },\n-  { CODE_FOR_msubhss, \"__MSUBHSS\", FRV_BUILTIN_MSUBHSS, 0, 0 },\n-  { CODE_FOR_msubhus, \"__MSUBHUS\", FRV_BUILTIN_MSUBHUS, 0, 0 },\n-  { CODE_FOR_mqaddhss, \"__MQADDHSS\", FRV_BUILTIN_MQADDHSS, 0, 0 },\n-  { CODE_FOR_mqaddhus, \"__MQADDHUS\", FRV_BUILTIN_MQADDHUS, 0, 0 },\n-  { CODE_FOR_mqsubhss, \"__MQSUBHSS\", FRV_BUILTIN_MQSUBHSS, 0, 0 },\n-  { CODE_FOR_mqsubhus, \"__MQSUBHUS\", FRV_BUILTIN_MQSUBHUS, 0, 0 },\n-  { CODE_FOR_mpackh, \"__MPACKH\", FRV_BUILTIN_MPACKH, 0, 0 },\n-  { CODE_FOR_mcop1, \"__Mcop1\", FRV_BUILTIN_MCOP1, 0, 0 },\n-  { CODE_FOR_mcop2, \"__Mcop2\", FRV_BUILTIN_MCOP2, 0, 0 },\n-  { CODE_FOR_mwcut, \"__MWCUT\", FRV_BUILTIN_MWCUT, 0, 0 },\n-  { CODE_FOR_mqsaths, \"__MQSATHS\", FRV_BUILTIN_MQSATHS, 0, 0 },\n-  { CODE_FOR_mqlclrhs, \"__MQLCLRHS\", FRV_BUILTIN_MQLCLRHS, 0, 0 },\n-  { CODE_FOR_mqlmths, \"__MQLMTHS\", FRV_BUILTIN_MQLMTHS, 0, 0 },\n-  { CODE_FOR_smul, \"__SMUL\", FRV_BUILTIN_SMUL, 0, 0 },\n-  { CODE_FOR_umul, \"__UMUL\", FRV_BUILTIN_UMUL, 0, 0 },\n-  { CODE_FOR_addss, \"__ADDSS\", FRV_BUILTIN_ADDSS, 0, 0 },\n-  { CODE_FOR_subss, \"__SUBSS\", FRV_BUILTIN_SUBSS, 0, 0 },\n-  { CODE_FOR_slass, \"__SLASS\", FRV_BUILTIN_SLASS, 0, 0 },\n-  { CODE_FOR_scan, \"__SCAN\", FRV_BUILTIN_SCAN, 0, 0 }\n+  { CODE_FOR_mand, \"__MAND\", FRV_BUILTIN_MAND, UNKNOWN, 0},\n+  { CODE_FOR_mor, \"__MOR\", FRV_BUILTIN_MOR, UNKNOWN, 0},\n+  { CODE_FOR_mxor, \"__MXOR\", FRV_BUILTIN_MXOR, UNKNOWN, 0},\n+  { CODE_FOR_maveh, \"__MAVEH\", FRV_BUILTIN_MAVEH, UNKNOWN, 0},\n+  { CODE_FOR_msaths, \"__MSATHS\", FRV_BUILTIN_MSATHS, UNKNOWN, 0},\n+  { CODE_FOR_msathu, \"__MSATHU\", FRV_BUILTIN_MSATHU, UNKNOWN, 0},\n+  { CODE_FOR_maddhss, \"__MADDHSS\", FRV_BUILTIN_MADDHSS, UNKNOWN, 0},\n+  { CODE_FOR_maddhus, \"__MADDHUS\", FRV_BUILTIN_MADDHUS, UNKNOWN, 0},\n+  { CODE_FOR_msubhss, \"__MSUBHSS\", FRV_BUILTIN_MSUBHSS, UNKNOWN, 0},\n+  { CODE_FOR_msubhus, \"__MSUBHUS\", FRV_BUILTIN_MSUBHUS, UNKNOWN, 0},\n+  { CODE_FOR_mqaddhss, \"__MQADDHSS\", FRV_BUILTIN_MQADDHSS, UNKNOWN, 0},\n+  { CODE_FOR_mqaddhus, \"__MQADDHUS\", FRV_BUILTIN_MQADDHUS, UNKNOWN, 0},\n+  { CODE_FOR_mqsubhss, \"__MQSUBHSS\", FRV_BUILTIN_MQSUBHSS, UNKNOWN, 0},\n+  { CODE_FOR_mqsubhus, \"__MQSUBHUS\", FRV_BUILTIN_MQSUBHUS, UNKNOWN, 0},\n+  { CODE_FOR_mpackh, \"__MPACKH\", FRV_BUILTIN_MPACKH, UNKNOWN, 0},\n+  { CODE_FOR_mcop1, \"__Mcop1\", FRV_BUILTIN_MCOP1, UNKNOWN, 0},\n+  { CODE_FOR_mcop2, \"__Mcop2\", FRV_BUILTIN_MCOP2, UNKNOWN, 0},\n+  { CODE_FOR_mwcut, \"__MWCUT\", FRV_BUILTIN_MWCUT, UNKNOWN, 0},\n+  { CODE_FOR_mqsaths, \"__MQSATHS\", FRV_BUILTIN_MQSATHS, UNKNOWN, 0},\n+  { CODE_FOR_mqlclrhs, \"__MQLCLRHS\", FRV_BUILTIN_MQLCLRHS, UNKNOWN, 0},\n+  { CODE_FOR_mqlmths, \"__MQLMTHS\", FRV_BUILTIN_MQLMTHS, UNKNOWN, 0},\n+  { CODE_FOR_smul, \"__SMUL\", FRV_BUILTIN_SMUL, UNKNOWN, 0},\n+  { CODE_FOR_umul, \"__UMUL\", FRV_BUILTIN_UMUL, UNKNOWN, 0},\n+  { CODE_FOR_addss, \"__ADDSS\", FRV_BUILTIN_ADDSS, UNKNOWN, 0},\n+  { CODE_FOR_subss, \"__SUBSS\", FRV_BUILTIN_SUBSS, UNKNOWN, 0},\n+  { CODE_FOR_slass, \"__SLASS\", FRV_BUILTIN_SLASS, UNKNOWN, 0},\n+  { CODE_FOR_scan, \"__SCAN\", FRV_BUILTIN_SCAN, UNKNOWN, 0}\n };\n \n /* Integer intrinsics that take two arguments and have no return value.  */\n \n static struct builtin_description bdesc_int_void2arg[] =\n {\n-  { CODE_FOR_smass, \"__SMASS\", FRV_BUILTIN_SMASS, 0, 0 },\n-  { CODE_FOR_smsss, \"__SMSSS\", FRV_BUILTIN_SMSSS, 0, 0 },\n-  { CODE_FOR_smu, \"__SMU\", FRV_BUILTIN_SMU, 0, 0 }\n+  { CODE_FOR_smass, \"__SMASS\", FRV_BUILTIN_SMASS, UNKNOWN, 0},\n+  { CODE_FOR_smsss, \"__SMSSS\", FRV_BUILTIN_SMSSS, UNKNOWN, 0},\n+  { CODE_FOR_smu, \"__SMU\", FRV_BUILTIN_SMU, UNKNOWN, 0}\n };\n \n static struct builtin_description bdesc_prefetches[] =\n {\n-  { CODE_FOR_frv_prefetch0, \"__data_prefetch0\", FRV_BUILTIN_PREFETCH0, 0, 0 },\n-  { CODE_FOR_frv_prefetch, \"__data_prefetch\", FRV_BUILTIN_PREFETCH, 0, 0 }\n+  { CODE_FOR_frv_prefetch0, \"__data_prefetch0\", FRV_BUILTIN_PREFETCH0, UNKNOWN,\n+    0},\n+  { CODE_FOR_frv_prefetch, \"__data_prefetch\", FRV_BUILTIN_PREFETCH, UNKNOWN, 0}\n };\n \n /* Media intrinsics that take two arguments, the first being an ACC number.  */\n \n static struct builtin_description bdesc_cut[] =\n {\n-  { CODE_FOR_mcut, \"__MCUT\", FRV_BUILTIN_MCUT, 0, 0 },\n-  { CODE_FOR_mcutss, \"__MCUTSS\", FRV_BUILTIN_MCUTSS, 0, 0 },\n-  { CODE_FOR_mdcutssi, \"__MDCUTSSI\", FRV_BUILTIN_MDCUTSSI, 0, 0 }\n+  { CODE_FOR_mcut, \"__MCUT\", FRV_BUILTIN_MCUT, UNKNOWN, 0},\n+  { CODE_FOR_mcutss, \"__MCUTSS\", FRV_BUILTIN_MCUTSS, UNKNOWN, 0},\n+  { CODE_FOR_mdcutssi, \"__MDCUTSSI\", FRV_BUILTIN_MDCUTSSI, UNKNOWN, 0}\n };\n \n /* Two-argument media intrinsics with an immediate second argument.  */\n \n static struct builtin_description bdesc_2argimm[] =\n {\n-  { CODE_FOR_mrotli, \"__MROTLI\", FRV_BUILTIN_MROTLI, 0, 0 },\n-  { CODE_FOR_mrotri, \"__MROTRI\", FRV_BUILTIN_MROTRI, 0, 0 },\n-  { CODE_FOR_msllhi, \"__MSLLHI\", FRV_BUILTIN_MSLLHI, 0, 0 },\n-  { CODE_FOR_msrlhi, \"__MSRLHI\", FRV_BUILTIN_MSRLHI, 0, 0 },\n-  { CODE_FOR_msrahi, \"__MSRAHI\", FRV_BUILTIN_MSRAHI, 0, 0 },\n-  { CODE_FOR_mexpdhw, \"__MEXPDHW\", FRV_BUILTIN_MEXPDHW, 0, 0 },\n-  { CODE_FOR_mexpdhd, \"__MEXPDHD\", FRV_BUILTIN_MEXPDHD, 0, 0 },\n-  { CODE_FOR_mdrotli, \"__MDROTLI\", FRV_BUILTIN_MDROTLI, 0, 0 },\n-  { CODE_FOR_mcplhi, \"__MCPLHI\", FRV_BUILTIN_MCPLHI, 0, 0 },\n-  { CODE_FOR_mcpli, \"__MCPLI\", FRV_BUILTIN_MCPLI, 0, 0 },\n-  { CODE_FOR_mhsetlos, \"__MHSETLOS\", FRV_BUILTIN_MHSETLOS, 0, 0 },\n-  { CODE_FOR_mhsetloh, \"__MHSETLOH\", FRV_BUILTIN_MHSETLOH, 0, 0 },\n-  { CODE_FOR_mhsethis, \"__MHSETHIS\", FRV_BUILTIN_MHSETHIS, 0, 0 },\n-  { CODE_FOR_mhsethih, \"__MHSETHIH\", FRV_BUILTIN_MHSETHIH, 0, 0 },\n-  { CODE_FOR_mhdseth, \"__MHDSETH\", FRV_BUILTIN_MHDSETH, 0, 0 },\n-  { CODE_FOR_mqsllhi, \"__MQSLLHI\", FRV_BUILTIN_MQSLLHI, 0, 0 },\n-  { CODE_FOR_mqsrahi, \"__MQSRAHI\", FRV_BUILTIN_MQSRAHI, 0, 0 }\n+  { CODE_FOR_mrotli, \"__MROTLI\", FRV_BUILTIN_MROTLI, UNKNOWN, 0},\n+  { CODE_FOR_mrotri, \"__MROTRI\", FRV_BUILTIN_MROTRI, UNKNOWN, 0},\n+  { CODE_FOR_msllhi, \"__MSLLHI\", FRV_BUILTIN_MSLLHI, UNKNOWN, 0},\n+  { CODE_FOR_msrlhi, \"__MSRLHI\", FRV_BUILTIN_MSRLHI, UNKNOWN, 0},\n+  { CODE_FOR_msrahi, \"__MSRAHI\", FRV_BUILTIN_MSRAHI, UNKNOWN, 0},\n+  { CODE_FOR_mexpdhw, \"__MEXPDHW\", FRV_BUILTIN_MEXPDHW, UNKNOWN, 0},\n+  { CODE_FOR_mexpdhd, \"__MEXPDHD\", FRV_BUILTIN_MEXPDHD, UNKNOWN, 0},\n+  { CODE_FOR_mdrotli, \"__MDROTLI\", FRV_BUILTIN_MDROTLI, UNKNOWN, 0},\n+  { CODE_FOR_mcplhi, \"__MCPLHI\", FRV_BUILTIN_MCPLHI, UNKNOWN, 0},\n+  { CODE_FOR_mcpli, \"__MCPLI\", FRV_BUILTIN_MCPLI, UNKNOWN, 0},\n+  { CODE_FOR_mhsetlos, \"__MHSETLOS\", FRV_BUILTIN_MHSETLOS, UNKNOWN, 0},\n+  { CODE_FOR_mhsetloh, \"__MHSETLOH\", FRV_BUILTIN_MHSETLOH, UNKNOWN, 0},\n+  { CODE_FOR_mhsethis, \"__MHSETHIS\", FRV_BUILTIN_MHSETHIS, UNKNOWN, 0},\n+  { CODE_FOR_mhsethih, \"__MHSETHIH\", FRV_BUILTIN_MHSETHIH, UNKNOWN, 0},\n+  { CODE_FOR_mhdseth, \"__MHDSETH\", FRV_BUILTIN_MHDSETH, UNKNOWN, 0},\n+  { CODE_FOR_mqsllhi, \"__MQSLLHI\", FRV_BUILTIN_MQSLLHI, UNKNOWN, 0},\n+  { CODE_FOR_mqsrahi, \"__MQSRAHI\", FRV_BUILTIN_MQSRAHI, UNKNOWN, 0}\n };\n \n /* Media intrinsics that take two arguments and return void, the first argument\n    being a pointer to 4 words in memory.  */\n \n static struct builtin_description bdesc_void2arg[] =\n {\n-  { CODE_FOR_mdunpackh, \"__MDUNPACKH\", FRV_BUILTIN_MDUNPACKH, 0, 0 },\n-  { CODE_FOR_mbtohe, \"__MBTOHE\", FRV_BUILTIN_MBTOHE, 0, 0 },\n+  { CODE_FOR_mdunpackh, \"__MDUNPACKH\", FRV_BUILTIN_MDUNPACKH, UNKNOWN, 0},\n+  { CODE_FOR_mbtohe, \"__MBTOHE\", FRV_BUILTIN_MBTOHE, UNKNOWN, 0},\n };\n \n /* Media intrinsics that take three arguments, the first being a const_int that\n    denotes an accumulator, and that return void.  */\n \n static struct builtin_description bdesc_void3arg[] =\n {\n-  { CODE_FOR_mcpxrs, \"__MCPXRS\", FRV_BUILTIN_MCPXRS, 0, 0 },\n-  { CODE_FOR_mcpxru, \"__MCPXRU\", FRV_BUILTIN_MCPXRU, 0, 0 },\n-  { CODE_FOR_mcpxis, \"__MCPXIS\", FRV_BUILTIN_MCPXIS, 0, 0 },\n-  { CODE_FOR_mcpxiu, \"__MCPXIU\", FRV_BUILTIN_MCPXIU, 0, 0 },\n-  { CODE_FOR_mmulhs, \"__MMULHS\", FRV_BUILTIN_MMULHS, 0, 0 },\n-  { CODE_FOR_mmulhu, \"__MMULHU\", FRV_BUILTIN_MMULHU, 0, 0 },\n-  { CODE_FOR_mmulxhs, \"__MMULXHS\", FRV_BUILTIN_MMULXHS, 0, 0 },\n-  { CODE_FOR_mmulxhu, \"__MMULXHU\", FRV_BUILTIN_MMULXHU, 0, 0 },\n-  { CODE_FOR_mmachs, \"__MMACHS\", FRV_BUILTIN_MMACHS, 0, 0 },\n-  { CODE_FOR_mmachu, \"__MMACHU\", FRV_BUILTIN_MMACHU, 0, 0 },\n-  { CODE_FOR_mmrdhs, \"__MMRDHS\", FRV_BUILTIN_MMRDHS, 0, 0 },\n-  { CODE_FOR_mmrdhu, \"__MMRDHU\", FRV_BUILTIN_MMRDHU, 0, 0 },\n-  { CODE_FOR_mqcpxrs, \"__MQCPXRS\", FRV_BUILTIN_MQCPXRS, 0, 0 },\n-  { CODE_FOR_mqcpxru, \"__MQCPXRU\", FRV_BUILTIN_MQCPXRU, 0, 0 },\n-  { CODE_FOR_mqcpxis, \"__MQCPXIS\", FRV_BUILTIN_MQCPXIS, 0, 0 },\n-  { CODE_FOR_mqcpxiu, \"__MQCPXIU\", FRV_BUILTIN_MQCPXIU, 0, 0 },\n-  { CODE_FOR_mqmulhs, \"__MQMULHS\", FRV_BUILTIN_MQMULHS, 0, 0 },\n-  { CODE_FOR_mqmulhu, \"__MQMULHU\", FRV_BUILTIN_MQMULHU, 0, 0 },\n-  { CODE_FOR_mqmulxhs, \"__MQMULXHS\", FRV_BUILTIN_MQMULXHS, 0, 0 },\n-  { CODE_FOR_mqmulxhu, \"__MQMULXHU\", FRV_BUILTIN_MQMULXHU, 0, 0 },\n-  { CODE_FOR_mqmachs, \"__MQMACHS\", FRV_BUILTIN_MQMACHS, 0, 0 },\n-  { CODE_FOR_mqmachu, \"__MQMACHU\", FRV_BUILTIN_MQMACHU, 0, 0 },\n-  { CODE_FOR_mqxmachs, \"__MQXMACHS\", FRV_BUILTIN_MQXMACHS, 0, 0 },\n-  { CODE_FOR_mqxmacxhs, \"__MQXMACXHS\", FRV_BUILTIN_MQXMACXHS, 0, 0 },\n-  { CODE_FOR_mqmacxhs, \"__MQMACXHS\", FRV_BUILTIN_MQMACXHS, 0, 0 }\n+  { CODE_FOR_mcpxrs, \"__MCPXRS\", FRV_BUILTIN_MCPXRS, UNKNOWN, 0},\n+  { CODE_FOR_mcpxru, \"__MCPXRU\", FRV_BUILTIN_MCPXRU, UNKNOWN, 0},\n+  { CODE_FOR_mcpxis, \"__MCPXIS\", FRV_BUILTIN_MCPXIS, UNKNOWN, 0},\n+  { CODE_FOR_mcpxiu, \"__MCPXIU\", FRV_BUILTIN_MCPXIU, UNKNOWN, 0},\n+  { CODE_FOR_mmulhs, \"__MMULHS\", FRV_BUILTIN_MMULHS, UNKNOWN, 0},\n+  { CODE_FOR_mmulhu, \"__MMULHU\", FRV_BUILTIN_MMULHU, UNKNOWN, 0},\n+  { CODE_FOR_mmulxhs, \"__MMULXHS\", FRV_BUILTIN_MMULXHS, UNKNOWN, 0},\n+  { CODE_FOR_mmulxhu, \"__MMULXHU\", FRV_BUILTIN_MMULXHU, UNKNOWN, 0},\n+  { CODE_FOR_mmachs, \"__MMACHS\", FRV_BUILTIN_MMACHS, UNKNOWN, 0},\n+  { CODE_FOR_mmachu, \"__MMACHU\", FRV_BUILTIN_MMACHU, UNKNOWN, 0},\n+  { CODE_FOR_mmrdhs, \"__MMRDHS\", FRV_BUILTIN_MMRDHS, UNKNOWN, 0},\n+  { CODE_FOR_mmrdhu, \"__MMRDHU\", FRV_BUILTIN_MMRDHU, UNKNOWN, 0},\n+  { CODE_FOR_mqcpxrs, \"__MQCPXRS\", FRV_BUILTIN_MQCPXRS, UNKNOWN, 0},\n+  { CODE_FOR_mqcpxru, \"__MQCPXRU\", FRV_BUILTIN_MQCPXRU, UNKNOWN, 0},\n+  { CODE_FOR_mqcpxis, \"__MQCPXIS\", FRV_BUILTIN_MQCPXIS, UNKNOWN, 0},\n+  { CODE_FOR_mqcpxiu, \"__MQCPXIU\", FRV_BUILTIN_MQCPXIU, UNKNOWN, 0},\n+  { CODE_FOR_mqmulhs, \"__MQMULHS\", FRV_BUILTIN_MQMULHS, UNKNOWN, 0},\n+  { CODE_FOR_mqmulhu, \"__MQMULHU\", FRV_BUILTIN_MQMULHU, UNKNOWN, 0},\n+  { CODE_FOR_mqmulxhs, \"__MQMULXHS\", FRV_BUILTIN_MQMULXHS, UNKNOWN, 0},\n+  { CODE_FOR_mqmulxhu, \"__MQMULXHU\", FRV_BUILTIN_MQMULXHU, UNKNOWN, 0},\n+  { CODE_FOR_mqmachs, \"__MQMACHS\", FRV_BUILTIN_MQMACHS, UNKNOWN, 0},\n+  { CODE_FOR_mqmachu, \"__MQMACHU\", FRV_BUILTIN_MQMACHU, UNKNOWN, 0},\n+  { CODE_FOR_mqxmachs, \"__MQXMACHS\", FRV_BUILTIN_MQXMACHS, UNKNOWN, 0},\n+  { CODE_FOR_mqxmacxhs, \"__MQXMACXHS\", FRV_BUILTIN_MQXMACXHS, UNKNOWN, 0},\n+  { CODE_FOR_mqmacxhs, \"__MQMACXHS\", FRV_BUILTIN_MQMACXHS, UNKNOWN, 0}\n };\n \n /* Media intrinsics that take two accumulator numbers as argument and\n    return void.  */\n \n static struct builtin_description bdesc_voidacc[] =\n {\n-  { CODE_FOR_maddaccs, \"__MADDACCS\", FRV_BUILTIN_MADDACCS, 0, 0 },\n-  { CODE_FOR_msubaccs, \"__MSUBACCS\", FRV_BUILTIN_MSUBACCS, 0, 0 },\n-  { CODE_FOR_masaccs, \"__MASACCS\", FRV_BUILTIN_MASACCS, 0, 0 },\n-  { CODE_FOR_mdaddaccs, \"__MDADDACCS\", FRV_BUILTIN_MDADDACCS, 0, 0 },\n-  { CODE_FOR_mdsubaccs, \"__MDSUBACCS\", FRV_BUILTIN_MDSUBACCS, 0, 0 },\n-  { CODE_FOR_mdasaccs, \"__MDASACCS\", FRV_BUILTIN_MDASACCS, 0, 0 }\n+  { CODE_FOR_maddaccs, \"__MADDACCS\", FRV_BUILTIN_MADDACCS, UNKNOWN, 0},\n+  { CODE_FOR_msubaccs, \"__MSUBACCS\", FRV_BUILTIN_MSUBACCS, UNKNOWN, 0},\n+  { CODE_FOR_masaccs, \"__MASACCS\", FRV_BUILTIN_MASACCS, UNKNOWN, 0},\n+  { CODE_FOR_mdaddaccs, \"__MDADDACCS\", FRV_BUILTIN_MDADDACCS, UNKNOWN, 0},\n+  { CODE_FOR_mdsubaccs, \"__MDSUBACCS\", FRV_BUILTIN_MDSUBACCS, UNKNOWN, 0},\n+  { CODE_FOR_mdasaccs, \"__MDASACCS\", FRV_BUILTIN_MDASACCS, UNKNOWN, 0}\n };\n \n /* Intrinsics that load a value and then issue a MEMBAR.  The load is\n@@ -8436,27 +8442,27 @@ static struct builtin_description bdesc_voidacc[] =\n static struct builtin_description bdesc_loads[] =\n {\n   { CODE_FOR_optional_membar_qi, \"__builtin_read8\",\n-    FRV_BUILTIN_READ8, 0, 0 },\n+    FRV_BUILTIN_READ8, UNKNOWN, 0},\n   { CODE_FOR_optional_membar_hi, \"__builtin_read16\",\n-    FRV_BUILTIN_READ16, 0, 0 },\n+    FRV_BUILTIN_READ16, UNKNOWN, 0},\n   { CODE_FOR_optional_membar_si, \"__builtin_read32\",\n-    FRV_BUILTIN_READ32, 0, 0 },\n+    FRV_BUILTIN_READ32, UNKNOWN, 0},\n   { CODE_FOR_optional_membar_di, \"__builtin_read64\",\n-    FRV_BUILTIN_READ64, 0, 0 }\n+    FRV_BUILTIN_READ64, UNKNOWN, 0}\n };\n \n /* Likewise stores.  */\n \n static struct builtin_description bdesc_stores[] =\n {\n   { CODE_FOR_optional_membar_qi, \"__builtin_write8\",\n-    FRV_BUILTIN_WRITE8, 0, 0 },\n+    FRV_BUILTIN_WRITE8, UNKNOWN, 0},\n   { CODE_FOR_optional_membar_hi, \"__builtin_write16\",\n-    FRV_BUILTIN_WRITE16, 0, 0 },\n+    FRV_BUILTIN_WRITE16, UNKNOWN, 0},\n   { CODE_FOR_optional_membar_si, \"__builtin_write32\",\n-    FRV_BUILTIN_WRITE32, 0, 0 },\n+    FRV_BUILTIN_WRITE32, UNKNOWN, 0},\n   { CODE_FOR_optional_membar_di, \"__builtin_write64\",\n-    FRV_BUILTIN_WRITE64, 0, 0 },\n+    FRV_BUILTIN_WRITE64, UNKNOWN, 0},\n };\n \n /* Initialize media builtins.  */\n@@ -8811,8 +8817,7 @@ frv_matching_accg_for_acc (rtx acc)\n static rtx\n frv_read_argument (tree exp, unsigned int index)\n {\n-  return expand_expr (CALL_EXPR_ARG (exp, index),\n-\t\t      NULL_RTX, VOIDmode, 0);\n+  return expand_normal (CALL_EXPR_ARG (exp, index));\n }\n \n /* Like frv_read_argument, but interpret the argument as the number"}, {"sha": "2440d12fccff1e2046342c30a442c2e06dba69ba", "filename": "gcc/config/frv/frv.md", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c5e8419ff673baff17839b5f5db91bfe1e1244f/gcc%2Fconfig%2Ffrv%2Ffrv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c5e8419ff673baff17839b5f5db91bfe1e1244f/gcc%2Fconfig%2Ffrv%2Ffrv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.md?ref=5c5e8419ff673baff17839b5f5db91bfe1e1244f", "patch": "@@ -345,7 +345,7 @@\n ;; enumeration in frv-protos.h.\n \n (define_attr \"cpu\" \"generic,fr550,fr500,fr450,fr405,fr400,fr300,simple,tomcat\"\n-  (const (symbol_ref \"frv_cpu_type\")))\n+  (const (symbol_ref \"(enum attr_cpu) frv_cpu_type\")))\n \n ;; Attribute is \"yes\" for branches and jumps that span too great a distance\n ;; to be implemented in the most natural way.  Such instructions will use\n@@ -360,7 +360,7 @@\n   (const_string \"unknown\"))\n \n (define_attr \"acc_group\" \"none,even,odd\"\n-  (symbol_ref \"frv_acc_group (insn)\"))\n+  (symbol_ref \"(enum attr_acc_group) frv_acc_group (insn)\"))\n \f\n ;; Scheduling and Packing Overview\n ;; -------------------------------\n@@ -1895,10 +1895,8 @@\n     }\n   else\n     {\n-      operands[4] = GEN_INT ((((unsigned HOST_WIDE_INT)INTVAL (op1) >> 16)\n-\t\t\t      >> 16) ^ ((unsigned HOST_WIDE_INT)1 << 31)\n-\t\t\t     - ((unsigned HOST_WIDE_INT)1 << 31));\n-      operands[5] = GEN_INT (trunc_int_for_mode (INTVAL (op1), SImode));\n+      operands[4] = gen_int_mode ((INTVAL (op1) >> 16) >> 16, SImode);\n+      operands[5] = gen_int_mode (INTVAL (op1), SImode);\n     }\n }\")\n "}]}