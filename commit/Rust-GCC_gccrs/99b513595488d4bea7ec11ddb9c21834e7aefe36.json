{"sha": "99b513595488d4bea7ec11ddb9c21834e7aefe36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTliNTEzNTk1NDg4ZDRiZWE3ZWMxMWRkYjljMjE4MzRlN2FlZmUzNg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-07-24T16:34:00Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-07-24T16:34:00Z"}, "message": "[multiple changes]\n\n\n2000-07-23  Brent Verner <brent@rcfile.org>\n\n        * bits/istream.tcc: istream::getline(char_type*, streamsize,\n\tchar_type) make compliant\n        * testsuite/27_io/istream_unformatted.cc: test for compliant behavior\n\n2000-07-23  Benjamin Kosnik  <bkoz@haight.constant.com>\n\n\t* acinclude.m4 (enable_cshadow_headers): Fix problems with blddir\n\tand srcdir used to define CSHADOW_INCLUDES..\n\n\t* configure.in: For consistency, change .sanity_warned to\n\tstamp-sanity-warned.\n\n\t* acinclude.m4: Tweak formatting.\n\t* Makefile.am (check): Call mkcheck with full pathname for build\n\tdirectory...\n\t(check-install): And here.\n\t* Makefile.in: Regenerate.\n\nFrom-SVN: r35227", "tree": {"sha": "7b3adf2af6558d3c1d8d58fe4b1dc4dd76c1f297", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b3adf2af6558d3c1d8d58fe4b1dc4dd76c1f297"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99b513595488d4bea7ec11ddb9c21834e7aefe36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99b513595488d4bea7ec11ddb9c21834e7aefe36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99b513595488d4bea7ec11ddb9c21834e7aefe36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99b513595488d4bea7ec11ddb9c21834e7aefe36/comments", "author": null, "committer": null, "parents": [{"sha": "55d3f91712e9b1d2e8428433a27db61bbe2ca7cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55d3f91712e9b1d2e8428433a27db61bbe2ca7cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55d3f91712e9b1d2e8428433a27db61bbe2ca7cc"}], "stats": {"total": 2110, "additions": 1070, "deletions": 1040}, "files": [{"sha": "03cb5075aa272893ccfa1bed92a47ef48dcdd519", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b513595488d4bea7ec11ddb9c21834e7aefe36/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b513595488d4bea7ec11ddb9c21834e7aefe36/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=99b513595488d4bea7ec11ddb9c21834e7aefe36", "patch": "@@ -1,3 +1,23 @@\n+2000-07-23  Brent Verner <brent@rcfile.org>\n+\n+        * bits/istream.tcc: istream::getline(char_type*, streamsize,\n+\tchar_type) make compliant\n+        * testsuite/27_io/istream_unformatted.cc: test for compliant behavior\n+\n+2000-07-23  Benjamin Kosnik  <bkoz@haight.constant.com>\n+\n+\t* acinclude.m4 (enable_cshadow_headers): Fix problems with blddir\n+\tand srcdir used to define CSHADOW_INCLUDES..\n+\n+\t* configure.in: For consistency, change .sanity_warned to\n+\tstamp-sanity-warned.\n+\n+\t* acinclude.m4: Tweak formatting.\n+\t* Makefile.am (check): Call mkcheck with full pathname for build\n+\tdirectory...\n+\t(check-install): And here.\n+\t* Makefile.in: Regenerate.\n+\t\n 2000-07-22  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \tLine up with libstdc++-v2 version of valarray."}, {"sha": "5032ed19437f2cb4c19aef1ef7ca6097070aaae7", "filename": "libstdc++-v3/Makefile.am", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b513595488d4bea7ec11ddb9c21834e7aefe36/libstdc%2B%2B-v3%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b513595488d4bea7ec11ddb9c21834e7aefe36/libstdc%2B%2B-v3%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.am?ref=99b513595488d4bea7ec11ddb9c21834e7aefe36", "patch": "@@ -31,13 +31,16 @@ gxx_include_dir=$(includedir)/g++\n \n SUBDIRS = math libio src\n \n+# Use $(blddir) instead of $(top_builddir) for arguments to \"mkcheck\"\n+# because then the paths will be full pathnames, not relative\n+# pathnames. (-Wl,--rpath seems to like this better.)\n check:  $(top_builddir)/mkcheck\n \tchmod +x  $(top_builddir)/mkcheck\n-\t$(top_builddir)/mkcheck 0 $(top_builddir) $(top_srcdir)\n+\t$(top_builddir)/mkcheck 0 `pwd` $(top_srcdir)\n \n check-install: $(top_builddir)/mkcheck\n \tchmod +x  $(top_builddir)/mkcheck\n-\t$(top_builddir)/mkcheck 1 $(top_builddir) $(top_srcdir) $(prefix)\n+\t$(top_builddir)/mkcheck 1 `pwd` $(top_srcdir) $(prefix)\n \n #all-local:  stamp-rebuild\n "}, {"sha": "968d66e0ad500f14c69c1ca57d883bcd1aac68ac", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b513595488d4bea7ec11ddb9c21834e7aefe36/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b513595488d4bea7ec11ddb9c21834e7aefe36/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=99b513595488d4bea7ec11ddb9c21834e7aefe36", "patch": "@@ -65,12 +65,10 @@ target_alias = @target_alias@\n target_triplet = @target@\n AR = @AR@\n AS = @AS@\n-BUILD_LIBIO_INCLUDE = @BUILD_LIBIO_INCLUDE@\n CC = @CC@\n CPP = @CPP@\n CPU_FLAGS = @CPU_FLAGS@\n CSHADOWFLAGS = @CSHADOWFLAGS@\n-CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n@@ -465,13 +463,16 @@ distclean-generic clean-generic maintainer-clean-generic clean \\\n mostlyclean distclean maintainer-clean\n \n \n+# Use $(blddir) instead of $(top_builddir) for arguments to \"mkcheck\"\n+# because then the paths will be full pathnames, not relative\n+# pathnames. (-Wl,--rpath seems to like this better.)\n check:  $(top_builddir)/mkcheck\n \tchmod +x  $(top_builddir)/mkcheck\n-\t$(top_builddir)/mkcheck 0 $(top_builddir) $(top_srcdir)\n+\t$(top_builddir)/mkcheck 0 `pwd` $(top_srcdir)\n \n check-install: $(top_builddir)/mkcheck\n \tchmod +x  $(top_builddir)/mkcheck\n-\t$(top_builddir)/mkcheck 1 $(top_builddir) $(top_srcdir) $(prefix)\n+\t$(top_builddir)/mkcheck 1 `pwd` $(top_srcdir) $(prefix)\n \n # Multilib Makefile bits.\n .PHONY: all-multi mostlyclean-multi clean-multi distclean-multi \\"}, {"sha": "4c74f00592b9242407144d0a7ffd8a5b77319369", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b513595488d4bea7ec11ddb9c21834e7aefe36/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b513595488d4bea7ec11ddb9c21834e7aefe36/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=99b513595488d4bea7ec11ddb9c21834e7aefe36", "patch": "@@ -1196,12 +1196,10 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n         esac\n \n   \tif test x$glibc_satisfactory = x\"yes\"; then\n-   \t  BUILD_LIBIO_INCLUDE=\n \t  need_libio=no\n \t  need_xtra_libio=no\n       \t  need_wlibio=no\t\n       \telse\n-\t  BUILD_LIBIO_INCLUDE='-I../libio'\t  \n \t  need_libio=yes\n \t  need_xtra_libio=yes\n           # bkoz XXX need to add checks to enable this\n@@ -1210,7 +1208,6 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n \n       # Using libio, but <libio.h> doesn't exist on the target system. . .\n       else\n-\tBUILD_LIBIO_INCLUDE='-I../libio'\t  \n \tneed_libio=yes\n         need_xtra_libio=no\n         # bkoz XXX need to add checks to enable this\n@@ -1224,8 +1221,6 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n       AC_MSG_RESULT(wince)\n \n       need_libio=no\n-      BUILD_LIBIO_INCLUDE=\n-      AC_SUBST(BUILD_LIBIO_INCLUDE)\n       ;;\n     *)\n       echo \"$enable_cstdio is an unknown io package\" 1>&2\n@@ -1406,19 +1401,17 @@ changequote([, ])dnl\n enable_cshadow_headers=GLIBCPP_ENABLE_SHADOW_DEFAULT)dnl\n AC_MSG_RESULT($enable_cshadow_headers)\n dnl Option parsed, now set things appropriately\n+dnl CSHADOWFLAGS is currently unused, but may be useful in the future.\n case \"$enable_cshadow_headers\" in\n     yes) \n-\tCSHADOWFLAGS=\"-D_GNU_SOURCE\"\n-\tCSHADOW_INCLUDES=\" -I$srcdir/shadow -I$blddir/cshadow\"\n+\tCSHADOWFLAGS=\"\"\n \t;;\n     no)   \n \tCSHADOWFLAGS=\"\"\n-\tCSHADOW_INCLUDES=\"\"\n         ;;\n esac\n \n AC_SUBST(CSHADOWFLAGS)\n-AC_SUBST(CSHADOW_INCLUDES)\n AM_CONDITIONAL(GLIBCPP_USE_CSHADOW, test \"$enable_cshadow_headers\" = yes)\n ])\n \n@@ -1480,7 +1473,7 @@ AC_SUBST(LIBSTRINGOBJS)dnl\n \n dnl This macro searches for a GNU version of make.  If a match is found, the\n dnl makefile variable `ifGNUmake' is set to the empty string, otherwise it is\n-dnl set to \"#\".  This is useful for  including a special features in a Makefile,\n+dnl set to \"#\". This is useful for  including a special features in a Makefile,\n dnl which cannot be handled by other versions of make.  The variable\n dnl _cv_gnu_make_command is set to the command to invoke GNU make if it exists,\n dnl the empty string otherwise.\n@@ -1515,7 +1508,7 @@ dnl Then, if any (well almost any) other make is called, and GNU make also\n dnl exists, then the other make wraps the GNU make.\n dnl\n dnl @author John Darrington <j.darrington@elvis.murdoch.edu.au>\n-dnl @version $Id: acinclude.m4,v 1.44 2000/07/21 01:02:31 bkoz Exp $\n+dnl @version $Id: acinclude.m4,v 1.45 2000/07/21 20:59:23 gdr Exp $\n dnl\n dnl #### Changes for libstdc++-v3:  reformatting and linewrapping; prepending\n dnl #### GLIBCPP_ to the macro name; adding the :-make fallback in the"}, {"sha": "e655e2d07e66bd01cecc857014e5ed6c4a1edf88", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b513595488d4bea7ec11ddb9c21834e7aefe36/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b513595488d4bea7ec11ddb9c21834e7aefe36/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=99b513595488d4bea7ec11ddb9c21834e7aefe36", "patch": "@@ -1208,12 +1208,10 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n         esac\n \n   \tif test x$glibc_satisfactory = x\"yes\"; then\n-   \t  BUILD_LIBIO_INCLUDE=\n \t  need_libio=no\n \t  need_xtra_libio=no\n       \t  need_wlibio=no\t\n       \telse\n-\t  BUILD_LIBIO_INCLUDE='-I../libio'\t  \n \t  need_libio=yes\n \t  need_xtra_libio=yes\n           # bkoz XXX need to add checks to enable this\n@@ -1222,7 +1220,6 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n \n       # Using libio, but <libio.h> doesn't exist on the target system. . .\n       else\n-\tBUILD_LIBIO_INCLUDE='-I../libio'\t  \n \tneed_libio=yes\n         need_xtra_libio=no\n         # bkoz XXX need to add checks to enable this\n@@ -1236,8 +1233,6 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n       AC_MSG_RESULT(wince)\n \n       need_libio=no\n-      BUILD_LIBIO_INCLUDE=\n-      AC_SUBST(BUILD_LIBIO_INCLUDE)\n       ;;\n     *)\n       echo \"$enable_cstdio is an unknown io package\" 1>&2\n@@ -1418,19 +1413,17 @@ changequote([, ])dnl\n enable_cshadow_headers=GLIBCPP_ENABLE_SHADOW_DEFAULT)dnl\n AC_MSG_RESULT($enable_cshadow_headers)\n dnl Option parsed, now set things appropriately\n+dnl CSHADOWFLAGS is currently unused, but may be useful in the future.\n case \"$enable_cshadow_headers\" in\n     yes) \n-\tCSHADOWFLAGS=\"-D_GNU_SOURCE\"\n-\tCSHADOW_INCLUDES=\" -I$srcdir/shadow -I$blddir/cshadow\"\n+\tCSHADOWFLAGS=\"\"\n \t;;\n     no)   \n \tCSHADOWFLAGS=\"\"\n-\tCSHADOW_INCLUDES=\"\"\n         ;;\n esac\n \n AC_SUBST(CSHADOWFLAGS)\n-AC_SUBST(CSHADOW_INCLUDES)\n AM_CONDITIONAL(GLIBCPP_USE_CSHADOW, test \"$enable_cshadow_headers\" = yes)\n ])\n \n@@ -1492,7 +1485,7 @@ AC_SUBST(LIBSTRINGOBJS)dnl\n \n dnl This macro searches for a GNU version of make.  If a match is found, the\n dnl makefile variable `ifGNUmake' is set to the empty string, otherwise it is\n-dnl set to \"#\".  This is useful for  including a special features in a Makefile,\n+dnl set to \"#\". This is useful for  including a special features in a Makefile,\n dnl which cannot be handled by other versions of make.  The variable\n dnl _cv_gnu_make_command is set to the command to invoke GNU make if it exists,\n dnl the empty string otherwise.\n@@ -1527,7 +1520,7 @@ dnl Then, if any (well almost any) other make is called, and GNU make also\n dnl exists, then the other make wraps the GNU make.\n dnl\n dnl @author John Darrington <j.darrington@elvis.murdoch.edu.au>\n-dnl @version $Id: aclocal.m4,v 1.45 2000/07/21 01:02:31 bkoz Exp $\n+dnl @version $Id: acinclude.m4,v 1.45 2000/07/21 20:59:23 gdr Exp $\n dnl\n dnl #### Changes for libstdc++-v3:  reformatting and linewrapping; prepending\n dnl #### GLIBCPP_ to the macro name; adding the :-make fallback in the"}, {"sha": "dc98f52122672dee3071dd9923e8da169c3742b2", "filename": "libstdc++-v3/bits/istream.tcc", "status": "modified", "additions": 19, "deletions": 41, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b513595488d4bea7ec11ddb9c21834e7aefe36/libstdc%2B%2B-v3%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b513595488d4bea7ec11ddb9c21834e7aefe36/libstdc%2B%2B-v3%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fistream.tcc?ref=99b513595488d4bea7ec11ddb9c21834e7aefe36", "patch": "@@ -590,9 +590,7 @@ namespace std {\n \t    bool __testput = true;\n \t    streamsize __n = __this_sb->in_avail();\n \n-\t    while (_M_gcount <= __n \n-\t\t   && !__testeof \n-\t\t   && !__testdelim \n+\t    while (_M_gcount <= __n && !__testeof && !__testdelim \n \t\t   && (__testput = __sb.sputc(traits_type::to_char_type(__c)) \n \t\t                   != __eof))\n \t      {\n@@ -625,50 +623,30 @@ namespace std {\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{\n-\t  try {\n-\t    const int_type __idelim = traits_type::to_int_type(__delim);\n-\t    const int_type __eof = traits_type::eof();\n+          try {\n \t    __streambuf_type* __sb = this->rdbuf();\n-\t    bool __testdelim = false;\n-\t    bool __testeof = false;\n-\n-\t    // This is completely idiotic, but attempts to recreate\n-\t    // the smoke-filled air of the committee meeting where\n-\t    // getline was defined. It's unspecified for __n == 1,\n-\t    // what happens to the extracted char if it is not a\n-\t    // delimiter or EOF. Assume it's not extracted, for the\n-\t    // time being. . . \n-\t    if (__n == 1)\n+\t    int_type __c = __sb->sbumpc();\n+            const int_type __idelim = traits_type::to_int_type(__delim);\n+            const int_type __eof = traits_type::eof();\n+\t    bool __testdelim = __c == __idelim;\n+\t    bool __testeof =  __c == __eof;\n+\t    \n+\t    while (++_M_gcount < __n && !__testeof && !__testdelim)\n \t      {\n-\t\tint_type __c = __sb->sgetc();\n-\t\t__testdelim = __c == __idelim;\n+\t\t*__s++ = traits_type::to_char_type(__c);\n+\t\t__c = __sb->sbumpc();\n \t\t__testeof = __c == __eof;\n-\t\tif (__testdelim)\n-\t\t  {\n-\t\t    ++_M_gcount;\n-\t\t    __sb->sbumpc();\n-\t\t  }\n-\t      }\n-\t    else\n-\t      {\n-\t\twhile (_M_gcount < __n - 1 && !__testdelim && !__testeof)\n-\t\t  {\n-\t\t    int_type __c = __sb->sbumpc();\n-\t\t    __testdelim = __c == __idelim;\n-\t\t    __testeof = __c == __eof;\n-\t\t    if (__testdelim)\n-\t\t      ++_M_gcount;\n-\t\t    else if (!__testeof)\n-\t\t      {\n-\t\t\t*__s++ = traits_type::to_char_type(__c);\n-\t\t\t++_M_gcount;\n-\t\t      }\n-\t\t  }\n+\t\t__testdelim = __c == __idelim;\n \t      }\n+\t    \n \t    if (__testeof)\n \t      this->setstate(ios_base::eofbit);\n-\t    else if (!__testdelim && _M_gcount == __n - 1)\n-\t      this->setstate(ios_base::failbit);\n+\t    else if (!__testdelim)\n+\t      {\n+\t\t--_M_gcount;\n+\t\t__sb->sputbackc(traits_type::to_char_type(__c));\n+\t\tthis->setstate(ios_base::failbit);\n+\t      }\n \t  }\n \t  catch(exception& __fail){\n \t    // 27.6.1.3 paragraph 1"}, {"sha": "07bb8d6d1a583f007d7d9c3b0c796bc62921ed79", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 923, "deletions": 932, "changes": 1855, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b513595488d4bea7ec11ddb9c21834e7aefe36/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b513595488d4bea7ec11ddb9c21834e7aefe36/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=99b513595488d4bea7ec11ddb9c21834e7aefe36"}, {"sha": "1b34bd7b6a9a58d2b87e4aa83e0e5c4e0358be6c", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b513595488d4bea7ec11ddb9c21834e7aefe36/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b513595488d4bea7ec11ddb9c21834e7aefe36/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=99b513595488d4bea7ec11ddb9c21834e7aefe36", "patch": "@@ -19,7 +19,7 @@ GLIBCPP_CONFIGURE(.)\n AC_LIBTOOL_DLOPEN\n GLIBCPP_CHECK_GNU_MAKE\n   if test \"x$_cv_gnu_make_command\" = \"x\"; then\n-    AC_MSG_ERROR([GNU Make not found.  Please install it or correct your path.])\n+    AC_MSG_ERROR([GNU make not found. Please install it or correct your path.])\n   fi\n AM_PROG_LIBTOOL\n AM_CONFIG_HEADER(config.h)\n@@ -187,8 +187,8 @@ fi\n \n # Trying to get more people to read documentation.  Possibly remove check\n # and warn all the time.\n-if test ! -f .sanity_warned; then\n-  touch .sanity_warned\n+if test ! -f stamp-sanity-warned; then\n+  touch stamp-sanity-warned\n   # There is no \"informational\" AC_MSG_ macro, so these are going to be\n   # printed even when --quiet/--silent is given.\n   echo ''"}, {"sha": "bf2653990ea5a19f2b696aaee7ab29320f948ec4", "filename": "libstdc++-v3/libio/Makefile.am", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b513595488d4bea7ec11ddb9c21834e7aefe36/libstdc%2B%2B-v3%2Flibio%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b513595488d4bea7ec11ddb9c21834e7aefe36/libstdc%2B%2B-v3%2Flibio%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.am?ref=99b513595488d4bea7ec11ddb9c21834e7aefe36", "patch": "@@ -26,17 +26,20 @@ AUTOMAKE_OPTIONS = 1.3 cygnus\n # Passed down for cross compilers, canadian crosses.\n TOPLEVEL_INCLUDES = -I$(includedir)\n \n-LIBIO_INCLUDES = @BUILD_LIBIO_INCLUDE@ -I$(top_srcdir)/libio \n-\n-CSHADOW_INCLUDES = @CSHADOWFLAGS@ @CSHADOW_INCLUDES@\n+if GLIBCPP_NEED_LIBIO\n+LIBIO_INCLUDES = \\\n+\t-I$(top_builddir)/libio -I$(top_srcdir)/libio \n+else\n+LIBIO_INCLUDES = \n+endif\n \n CONFIG_INCLUDES = \\\n \t-I$(top_srcdir)/@cpu_include_dir@ \\\n \t-I$(top_srcdir)/@ctype_include_dir@\n \n INCLUDES = \\\n \t-nostdinc++ -I$(top_srcdir) \\\n-\t$(LIBIO_INCLUDES) $(CONFIG_INCLUDES) $(CSHADOW_INCLUDES) \\\n+\t$(LIBIO_INCLUDES) $(CONFIG_INCLUDES) \\\n \t$(TOPLEVEL_INCLUDES)\t\n \n noinst_LTLIBRARIES = libio.la"}, {"sha": "eb396ca0716c5688298d26674fddf550023c0c30", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b513595488d4bea7ec11ddb9c21834e7aefe36/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b513595488d4bea7ec11ddb9c21834e7aefe36/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=99b513595488d4bea7ec11ddb9c21834e7aefe36", "patch": "@@ -65,7 +65,6 @@ target_alias = @target_alias@\n target_triplet = @target@\n AR = @AR@\n AS = @AS@\n-BUILD_LIBIO_INCLUDE = @BUILD_LIBIO_INCLUDE@\n CC = @CC@\n CPP = @CPP@\n CPU_FLAGS = @CPU_FLAGS@\n@@ -109,10 +108,9 @@ AUTOMAKE_OPTIONS = 1.3 cygnus\n \n # Passed down for cross compilers, canadian crosses.\n TOPLEVEL_INCLUDES = -I$(includedir)\n-\n-LIBIO_INCLUDES = @BUILD_LIBIO_INCLUDE@ -I$(top_srcdir)/libio \n-\n-CSHADOW_INCLUDES = @CSHADOWFLAGS@ @CSHADOW_INCLUDES@\n+@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_INCLUDES = @GLIBCPP_NEED_LIBIO_TRUE@\\\n+@GLIBCPP_NEED_LIBIO_TRUE@\t-I$(top_builddir)/libio -I$(top_srcdir)/libio \n+@GLIBCPP_NEED_LIBIO_FALSE@LIBIO_INCLUDES = \n \n CONFIG_INCLUDES = \\\n \t-I$(top_srcdir)/@cpu_include_dir@ \\\n@@ -121,7 +119,7 @@ CONFIG_INCLUDES = \\\n \n INCLUDES = \\\n \t-nostdinc++ -I$(top_srcdir) \\\n-\t$(LIBIO_INCLUDES) $(CONFIG_INCLUDES) $(CSHADOW_INCLUDES) \\\n+\t$(LIBIO_INCLUDES) $(CONFIG_INCLUDES) \\\n \t$(TOPLEVEL_INCLUDES)\t\n \n "}, {"sha": "eaf96f4672b6cce07f744700fee9a3329381601c", "filename": "libstdc++-v3/math/Makefile.in", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b513595488d4bea7ec11ddb9c21834e7aefe36/libstdc%2B%2B-v3%2Fmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b513595488d4bea7ec11ddb9c21834e7aefe36/libstdc%2B%2B-v3%2Fmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2FMakefile.in?ref=99b513595488d4bea7ec11ddb9c21834e7aefe36", "patch": "@@ -65,12 +65,10 @@ target_alias = @target_alias@\n target_triplet = @target@\n AR = @AR@\n AS = @AS@\n-BUILD_LIBIO_INCLUDE = @BUILD_LIBIO_INCLUDE@\n CC = @CC@\n CPP = @CPP@\n CPU_FLAGS = @CPU_FLAGS@\n CSHADOWFLAGS = @CSHADOWFLAGS@\n-CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n DEBUG_FLAGS = @DEBUG_FLAGS@"}, {"sha": "02a0fa9df9aa0cde5837566ef74b91a2f6704a97", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b513595488d4bea7ec11ddb9c21834e7aefe36/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b513595488d4bea7ec11ddb9c21834e7aefe36/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=99b513595488d4bea7ec11ddb9c21834e7aefe36", "patch": "@@ -52,26 +52,37 @@ AC_CXXFLAGS = \\\n # the end of the compile line so that -O2 can be overridden as the\n # occasion call for it. (ie, --enable-debug)\n AM_CXXFLAGS = \\\n-\t-D_GNU_SOURCE -fno-implicit-templates $(OPTIMIZE_CXXFLAGS) \\\n+\t-fno-implicit-templates $(OPTIMIZE_CXXFLAGS) \\\n \t-Wall -Wno-format -W -Wwrite-strings -Winline \\\n \t$(AC_CXXFLAGS) \n \n \n # Passed down for cross compilers, canadian crosses.\n TOPLEVEL_INCLUDES = -I$(includedir)\n \n-LIBIO_INCLUDES = @BUILD_LIBIO_INCLUDE@ -I$(top_srcdir)/libio \n+if GLIBCPP_NEED_LIBIO\n+LIBIO_INCLUDES = \\\n+\t-I$(top_builddir)/libio -I$(top_srcdir)/libio \n+else\n+LIBIO_INCLUDES = \n+endif\n \n-CSHADOW_INCLUDES = @CSHADOWFLAGS@ @CSHADOW_INCLUDES@\n+if GLIBCPP_USE_CSHADOW\n+CSHADOW_INCLUDES = \n+#CSHADOW_INCLUDES = \\\n+#\t@CSHADOWFLAGS@ -I$(top_srcdir)/shadow -I$(top_builddir)/cshadow\n+else\n+CSHADOW_INCLUDES =\n+endif\n \n CONFIG_INCLUDES = \\\n \t-I$(top_srcdir)/@cpu_include_dir@ \\\n \t-I$(top_srcdir)/@ctype_include_dir@\n \n INCLUDES = \\\n-\t-nostdinc++ -I$(top_srcdir) \\\n-\t$(LIBIO_INCLUDES) $(CONFIG_INCLUDES) $(CSHADOW_INCLUDES) \\\n-\t$(TOPLEVEL_INCLUDES)\t\n+\t-D_GNU_SOURCE -nostdinc++ -I$(top_srcdir) \\\n+\t$(CSHADOW_INCLUDES) $(LIBIO_INCLUDES) \\\n+\t$(CONFIG_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n \n # Need to explicitly set this so that AM_CXXFLAGS is last. (That way,"}, {"sha": "73d42da552bfb61b7c190908dc8dc01026cf35d6", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b513595488d4bea7ec11ddb9c21834e7aefe36/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b513595488d4bea7ec11ddb9c21834e7aefe36/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=99b513595488d4bea7ec11ddb9c21834e7aefe36", "patch": "@@ -64,7 +64,6 @@ target_alias = @target_alias@\n target_triplet = @target@\n AR = @AR@\n AS = @AS@\n-BUILD_LIBIO_INCLUDE = @BUILD_LIBIO_INCLUDE@\n CC = @CC@\n CPP = @CPP@\n CPU_FLAGS = @CPU_FLAGS@\n@@ -129,27 +128,30 @@ AC_CXXFLAGS = \\\n # the end of the compile line so that -O2 can be overridden as the\n # occasion call for it. (ie, --enable-debug)\n AM_CXXFLAGS = \\\n-\t-D_GNU_SOURCE -fno-implicit-templates $(OPTIMIZE_CXXFLAGS) \\\n+\t-fno-implicit-templates $(OPTIMIZE_CXXFLAGS) \\\n \t-Wall -Wno-format -W -Wwrite-strings -Winline \\\n \t$(AC_CXXFLAGS) \n \n \n # Passed down for cross compilers, canadian crosses.\n TOPLEVEL_INCLUDES = -I$(includedir)\n-\n-LIBIO_INCLUDES = @BUILD_LIBIO_INCLUDE@ -I$(top_srcdir)/libio \n-\n-CSHADOW_INCLUDES = @CSHADOWFLAGS@ @CSHADOW_INCLUDES@\n+@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_INCLUDES = @GLIBCPP_NEED_LIBIO_TRUE@\\\n+@GLIBCPP_NEED_LIBIO_TRUE@\t-I$(top_builddir)/libio -I$(top_srcdir)/libio \n+@GLIBCPP_NEED_LIBIO_FALSE@LIBIO_INCLUDES = \n+#CSHADOW_INCLUDES = \\\n+#\t@CSHADOWFLAGS@ -I$(top_srcdir)/shadow -I$(top_builddir)/cshadow\n+@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_INCLUDES = \n+@GLIBCPP_USE_CSHADOW_FALSE@CSHADOW_INCLUDES = \n \n CONFIG_INCLUDES = \\\n \t-I$(top_srcdir)/@cpu_include_dir@ \\\n \t-I$(top_srcdir)/@ctype_include_dir@\n \n \n INCLUDES = \\\n-\t-nostdinc++ -I$(top_srcdir) \\\n-\t$(LIBIO_INCLUDES) $(CONFIG_INCLUDES) $(CSHADOW_INCLUDES) \\\n-\t$(TOPLEVEL_INCLUDES)\t\n+\t-D_GNU_SOURCE -nostdinc++ -I$(top_srcdir) \\\n+\t$(CSHADOW_INCLUDES) $(LIBIO_INCLUDES) \\\n+\t$(CONFIG_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n \n # Need to explicitly set this so that AM_CXXFLAGS is last. (That way,"}, {"sha": "b6a547af31169aa674d7d54a9f1c6586f74b41a8", "filename": "libstdc++-v3/testsuite/27_io/istream_unformatted.cc", "status": "modified", "additions": 48, "deletions": 9, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b513595488d4bea7ec11ddb9c21834e7aefe36/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_unformatted.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b513595488d4bea7ec11ddb9c21834e7aefe36/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_unformatted.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_unformatted.cc?ref=99b513595488d4bea7ec11ddb9c21834e7aefe36", "patch": "@@ -163,11 +163,13 @@ bool test02(void)\n   // istream& getline(char* s, streamsize n)\n   state1 = is_00.rdstate();\n   is_00.getline(carray1, 20, '*');\n-  state2 = is_00.rdstate();  \n-  test &= is_04.gcount() == 0;\n+  state2 = is_00.rdstate();\n+  // make sure failbit was set, since we couldn't extract\n+  // from the NULL streambuf...\n   test &= state1 != state2;\n-  test &= bool(state2 & statefail);\n-\n+  test &= static_cast<bool>(state2 & statefail);\n+  \n+  test &= is_04.gcount() == 0;\n   state1 = is_04.rdstate();\n   is_04.getline(carray1, 1, '\\t'); // extracts, throws away\n   state2 = is_04.rdstate();  \n@@ -351,7 +353,6 @@ void test04()\n // http://sourceware.cygnus.com/ml/libstdc++/2000-07/msg00003.html\n bool test05()\n {\n-\n   const char* charray = \"\n a\n aa\n@@ -383,7 +384,7 @@ aaaaaaaaaaaaaa\n       if(ifs.eof())\n         {\n           // Just sanity checks to make sure we've extracted the same\n-          // number of chars that were in the file.\n+          // number of chars that were in the streambuf\n           VERIFY(br == blen);\n           // Also, we should only set the failbit if we could\n           // _extract_ no chars from the stream, i.e. the first read\n@@ -392,35 +393,72 @@ aaaaaaaaaaaaaa\n         }\n       else if(ifs.fail())\n         {\n+\t  // delimiter not read\n+\t  //\n \t  // either\n \t  // -> extracted no characters\n \t  // or\n \t  // -> n - 1 characters are stored\n-          VERIFY(strlen(tmp) == it - 1);\n           ifs.clear(ifs.rdstate() & ~std::ios::failbit);\n+          VERIFY((ifs.gcount() == 0) || (strlen(tmp) == it - 1));\n           VERIFY(ifs);\n           continue;\n         }\n       else \n         {\n+\t  // delimiter was read.\n+\t  //\n \t  // -> strlen(__s) < n - 1 \n \t  // -> delimiter was seen -> gcount() > strlen(__s)\n-          VERIFY(ifs.gcount() > strlen(tmp));\n-          VERIFY(it - 1 > strlen(tmp));\n+          VERIFY(ifs.gcount() == strlen(tmp) + 1);\n           continue;\n         }\n     }\n \n   return 0;\n }\n \n+\n+// http://sources.redhat.com/ml/libstdc++/2000-07/msg00126.html\n+bool\n+test06()\n+{\n+  using namespace std;\n+\n+  bool test = true;\n+  const streamsize it = 5;\n+  char tmp[it];\n+  const char* str_lit = \"abcd\\n\";\n+\n+  stringbuf strbuf(str_lit, std::ios_base::in);\n+  istream istr(&strbuf);\n+  \n+  istr.getline(tmp,it); \n+  test &= istr.gcount() == it;  // extracted whole string\n+  test &= strlen(tmp) == 4;     // stored all but '\\n'\n+  test &= !istr.eof();          // extracted up to but not eof\n+  test &= !istr.fail();         // failbit not set\n+  \n+  char c = 'z';\n+  istr.get(c);\n+  test &= c == 'z';\n+  test &= istr.eof();\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+  return test;\n+}\n+\n+\n int main()\n {\n   test01();\n   test02();\n   test03();\n   test04();\n   test05();\n+  test06();\n   return 0;\n }\n \n@@ -431,3 +469,4 @@ int main()\n \n \n \n+"}]}