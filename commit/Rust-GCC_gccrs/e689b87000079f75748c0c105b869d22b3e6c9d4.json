{"sha": "e689b87000079f75748c0c105b869d22b3e6c9d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY4OWI4NzAwMDA3OWY3NTc0OGMwYzEwNWI4NjlkMjJiM2U2YzlkNA==", "commit": {"author": {"name": "David Ung", "email": "davidu@mips.com", "date": "2005-05-26T17:23:35Z"}, "committer": {"name": "David Ung", "email": "davidu@gcc.gnu.org", "date": "2005-05-26T17:23:35Z"}, "message": "ext_ins.c: New test for testing the generation of MIPS32/64 rev 2 ext/ins instructions.\n\n* gcc.target/mips/ext_ins.c: New test for testing the generation\nof MIPS32/64 rev 2 ext/ins instructions.\n\n* config/mips/mips.c (mips_use_ins_ext_p): New helper function\nthat determines whether the MIPS32/64 R2 ext/ins should be used.\n* config/mips/mips.h (ISA_HAS_EXT_INS): New macro.\n* config/mips/mips.md (extzv): Changed predicate for operand to\nnonimmediate_operand. Add code to generate insn patterns for\nextzvsi and extzvdi.\n(extzv<mode>): New pattern to match mips32/64 r2 ext insn.\n(insv): Similarly for insertion.\n(insv<mode>): Similarly.\n\nFrom-SVN: r100212", "tree": {"sha": "2c115cbf4d0642b7f753a9bb5f736eecd964d555", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c115cbf4d0642b7f753a9bb5f736eecd964d555"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e689b87000079f75748c0c105b869d22b3e6c9d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e689b87000079f75748c0c105b869d22b3e6c9d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e689b87000079f75748c0c105b869d22b3e6c9d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e689b87000079f75748c0c105b869d22b3e6c9d4/comments", "author": null, "committer": null, "parents": [{"sha": "764e01e6c34028fee59e428adf61bcc098e51703", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/764e01e6c34028fee59e428adf61bcc098e51703", "html_url": "https://github.com/Rust-GCC/gccrs/commit/764e01e6c34028fee59e428adf61bcc098e51703"}], "stats": {"total": 131, "additions": 126, "deletions": 5}, "files": [{"sha": "696cd17f6c5060d56785c2e2a976332e02eac855", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e689b87000079f75748c0c105b869d22b3e6c9d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e689b87000079f75748c0c105b869d22b3e6c9d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e689b87000079f75748c0c105b869d22b3e6c9d4", "patch": "@@ -1,3 +1,15 @@\n+2005-05-26  David Ung  <davidu@mips.com>\n+\n+\t* config/mips/mips.c (mips_use_ins_ext_p): New helper function\n+\tthat determines whether the MIPS32/64 R2 ext/ins should be used.\n+\t* config/mips/mips.h (ISA_HAS_EXT_INS): New macro.\n+\t* config/mips/mips.md (extzv): Changed predicate for operand to\n+\tnonimmediate_operand. Add code to generate insn patterns for\n+\textzvsi and extzvdi.\n+\t(extzv<mode>): New pattern to match mips32/64 r2 ext insn.\n+\t(insv): Similarly for insertion.\n+\t(insv<mode>): Similarly.\n+\n 2005-05-26  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* simplify-rtx.c (avoid_constant_pool_reference): Support"}, {"sha": "76f681fb86a4cbbb105637a26581818e2ac18803", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e689b87000079f75748c0c105b869d22b3e6c9d4/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e689b87000079f75748c0c105b869d22b3e6c9d4/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=e689b87000079f75748c0c105b869d22b3e6c9d4", "patch": "@@ -4158,7 +4158,39 @@ mips_expand_unaligned_store (rtx dest, rtx src, unsigned int width, int bitpos)\n     }\n   return true;\n }\n-\f\n+\n+/* Return true if (zero_extract OP SIZE POSITION) can be used as the\n+   source of an \"ext\" instruction or the destination of an \"ins\"\n+   instruction.  OP must be a register operand and the following\n+   conditions must hold:\n+\n+     0 <= POSITION < GET_MODE_BITSIZE (GET_MODE (op))\n+     0 < SIZE <= GET_MODE_BITSIZE (GET_MODE (op))\n+     0 < POSITION + SIZE <= GET_MODE_BITSIZE (GET_MODE (op))\n+\n+   Also reject lengths equal to a word as they are better handled\n+   by the move patterns.  */\n+\n+bool\n+mips_use_ins_ext_p (rtx op, rtx size, rtx position)\n+{\n+  HOST_WIDE_INT len, pos;\n+\n+  if (!ISA_HAS_EXT_INS\n+      || !register_operand (op, VOIDmode)\n+      || GET_MODE_BITSIZE (GET_MODE (op)) > BITS_PER_WORD)\n+    return false;\n+\n+  len = INTVAL (size);\n+  pos = INTVAL (position);\n+  \n+  if (len <= 0 || len >= GET_MODE_BITSIZE (GET_MODE (op)) \n+      || pos < 0 || pos + len > GET_MODE_BITSIZE (GET_MODE (op)))\n+    return false;\n+\n+  return true;\n+}\n+\n /* Set up globals to generate code for the ISA or processor\n    described by INFO.  */\n "}, {"sha": "ef293bec8b6d26441d569a0c654f1eaab6f1f5b4", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e689b87000079f75748c0c105b869d22b3e6c9d4/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e689b87000079f75748c0c105b869d22b3e6c9d4/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=e689b87000079f75748c0c105b869d22b3e6c9d4", "patch": "@@ -670,6 +670,11 @@ extern const struct mips_cpu_info *mips_tune_info;\n                                  && (ISA_MIPS32R2                      \\\n                                      ))\n \n+/* ISA includes the MIPS32/64 rev 2 ext and ins instructions.  */\n+#define ISA_HAS_EXT_INS         (!TARGET_MIPS16                        \\\n+                                 && (ISA_MIPS32R2                      \\\n+                                     ))\n+\n /* True if the result of a load is not available to the next instruction.\n    A nop will then be needed between instructions like \"lw $4,...\"\n    and \"addiu $4,$4,1\".  */"}, {"sha": "804d50ad864a350437dcc083afb98bfc5be44f95", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 45, "deletions": 4, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e689b87000079f75748c0c105b869d22b3e6c9d4/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e689b87000079f75748c0c105b869d22b3e6c9d4/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=e689b87000079f75748c0c105b869d22b3e6c9d4", "patch": "@@ -2818,7 +2818,7 @@ beq\\t%2,%.,1b\\;\\\n \n (define_expand \"extzv\"\n   [(set (match_operand 0 \"register_operand\")\n-\t(zero_extract (match_operand:QI 1 \"memory_operand\")\n+\t(zero_extract (match_operand 1 \"nonimmediate_operand\")\n \t\t      (match_operand 2 \"immediate_operand\")\n \t\t      (match_operand 3 \"immediate_operand\")))]\n   \"!TARGET_MIPS16\"\n@@ -2827,12 +2827,33 @@ beq\\t%2,%.,1b\\;\\\n \t\t\t\t  INTVAL (operands[2]),\n \t\t\t\t  INTVAL (operands[3])))\n     DONE;\n+  else if (mips_use_ins_ext_p (operands[1], operands[2], operands[3]))\n+    {\n+      if (GET_MODE (operands[0]) == DImode)\n+        emit_insn (gen_extzvdi (operands[0], operands[1], operands[2],\n+\t\t\t\toperands[3]));\n+      else\n+        emit_insn (gen_extzvsi (operands[0], operands[1], operands[2],\n+\t\t\t\toperands[3]));\n+      DONE;\n+    }\n   else\n     FAIL;\n })\n \n+(define_insn \"extzv<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(zero_extract:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t\t  (match_operand:SI 2 \"immediate_operand\" \"I\")\n+\t\t\t  (match_operand:SI 3 \"immediate_operand\" \"I\")))]\n+  \"mips_use_ins_ext_p (operands[1], operands[2], operands[3])\"\n+  \"<d>ext\\t%0,%1,%3,%2\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"<MODE>\")])\n+\n+\n (define_expand \"insv\"\n-  [(set (zero_extract (match_operand:QI 0 \"memory_operand\")\n+  [(set (zero_extract (match_operand 0 \"nonimmediate_operand\")\n \t\t      (match_operand 1 \"immediate_operand\")\n \t\t      (match_operand 2 \"immediate_operand\"))\n \t(match_operand 3 \"reg_or_0_operand\"))]\n@@ -2842,10 +2863,30 @@ beq\\t%2,%.,1b\\;\\\n \t\t\t\t   INTVAL (operands[1]),\n \t\t\t\t   INTVAL (operands[2])))\n     DONE;\n-  else\n-    FAIL;\n+  else if (mips_use_ins_ext_p (operands[0], operands[1], operands[2]))\n+    {\n+      if (GET_MODE (operands[0]) == DImode)\n+        emit_insn (gen_insvdi (operands[0], operands[1], operands[2],\n+\t\t\t       operands[3]));\n+      else\n+        emit_insn (gen_insvsi (operands[0], operands[1], operands[2],\n+\t\t\t       operands[3]));\n+      DONE;\n+   }\n+   else\n+     FAIL;\n })\n \n+(define_insn \"insv<mode>\"\n+  [(set (zero_extract:GPR (match_operand:GPR 0 \"register_operand\" \"+d\")\n+\t\t\t  (match_operand:SI 1 \"immediate_operand\" \"I\")\n+\t\t\t  (match_operand:SI 2 \"immediate_operand\" \"I\"))\n+\t(match_operand:GPR 3 \"reg_or_0_operand\" \"dJ\"))]\n+  \"mips_use_ins_ext_p (operands[0], operands[1], operands[2])\"\n+  \"<d>ins\\t%0,%z3,%2,%1\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"<MODE>\")])\n+\n ;; Unaligned word moves generated by the bit field patterns.\n ;;\n ;; As far as the rtl is concerned, both the left-part and right-part"}, {"sha": "545b1b1658f3f39225e3f164c182ea23d95953bd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e689b87000079f75748c0c105b869d22b3e6c9d4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e689b87000079f75748c0c105b869d22b3e6c9d4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e689b87000079f75748c0c105b869d22b3e6c9d4", "patch": "@@ -1,3 +1,8 @@\n+2005-05-26  David Ung  <davidu@mips.com>\n+\n+\t* gcc.target/mips/ext_ins.c: New test for testing the generation\n+\tof MIPS32/64 rev 2 ext/ins instructions.\n+\t\n 2005-05-26  Andreas Jaeger  <aj@suse.de>\n \n \t* treelang/compile/unsigned.tree: Use gimple instead of"}, {"sha": "77df1d2ba8718e1b4f16d3c4fae9b8421dd6ae6a", "filename": "gcc/testsuite/gcc.target/mips/ext_ins.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e689b87000079f75748c0c105b869d22b3e6c9d4/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fext_ins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e689b87000079f75748c0c105b869d22b3e6c9d4/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fext_ins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fext_ins.c?ref=e689b87000079f75748c0c105b869d22b3e6c9d4", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-march=mips32r2\" } */\n+/* { dg-final { scan-assembler \"ext\" } } */\n+/* { dg-final { scan-assembler \"ins\" } } */\n+\n+struct A \n+{\n+  unsigned int i : 2;\n+  unsigned int j : 3;\n+  unsigned int k : 4;\n+  unsigned int l : 5;\n+};\n+\n+void func (struct A);\n+\n+unsigned int f1 (struct A a)\n+{\n+  return a.j;\n+}\n+\n+void f2 (int i)\n+{\n+  struct A c;\n+  c.j = i;\n+  func (c);\n+}"}]}