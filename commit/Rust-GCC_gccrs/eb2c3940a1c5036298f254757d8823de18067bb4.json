{"sha": "eb2c3940a1c5036298f254757d8823de18067bb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIyYzM5NDBhMWM1MDM2Mjk4ZjI1NDc1N2Q4ODIzZGUxODA2N2JiNA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-09-07T18:55:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-09-07T18:55:15Z"}, "message": "re PR tree-optimization/32586 (New VN misses FRE opportunities)\n\n2007-09-07  Richard Guenther  <rguenther@suse.de>\n\n        PR tree-optimization/32586\n        * tree-ssa-sccvn.c (simplify_binary_expression): Avoid\n        folding if nothing changed.\n        (simplify_unary_expression): New function.  Do tree combining\n        on conversion like codes.\n        (try_to_simplify): Call it.\n\n        * g++.dg/tree-ssa/pr27090.C: Remove XFAILs.\n        * gcc.dg/tree-ssa/ssa-fre-1.c: Likewise.\n        * gcc.dg/tree-ssa/ssa-fre-3.c: Likewise.\n        * gcc.dg/tree-ssa/ssa-fre-5.c: Likewise.\n        * gcc.dg/tree-ssa/ssa-fre-4.c: Likewise, remove scan for\n        now obsolete simplification.\n\nFrom-SVN: r128251", "tree": {"sha": "f2ea2a216c9005e4770e0e608b6d7d4ef7b081f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2ea2a216c9005e4770e0e608b6d7d4ef7b081f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb2c3940a1c5036298f254757d8823de18067bb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb2c3940a1c5036298f254757d8823de18067bb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb2c3940a1c5036298f254757d8823de18067bb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb2c3940a1c5036298f254757d8823de18067bb4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c4e9bf2b9b4bd1de29131aa50cdde38db4d444d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4e9bf2b9b4bd1de29131aa50cdde38db4d444d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4e9bf2b9b4bd1de29131aa50cdde38db4d444d4"}], "stats": {"total": 104, "additions": 85, "deletions": 19}, "files": [{"sha": "c6e6daa6a836220c0380e2ed67aac63fcf655bf4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2c3940a1c5036298f254757d8823de18067bb4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2c3940a1c5036298f254757d8823de18067bb4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb2c3940a1c5036298f254757d8823de18067bb4", "patch": "@@ -1,3 +1,15 @@\n+2007-09-07  Richard Guenther  <rguenther@suse.de>\n+\n+\tReapply\n+\t2007-09-06  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/32586\n+\t* tree-ssa-sccvn.c (simplify_binary_expression): Avoid\n+\tfolding if nothing changed.\n+\t(simplify_unary_expression): New function.  Do tree combining\n+\ton conversion like codes.\n+\t(try_to_simplify): Call it.\n+\n 2007-09-07  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR target/33286"}, {"sha": "f704b279dd1ede95eef3e8cff8f80b4911fc37d8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2c3940a1c5036298f254757d8823de18067bb4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2c3940a1c5036298f254757d8823de18067bb4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eb2c3940a1c5036298f254757d8823de18067bb4", "patch": "@@ -1,3 +1,16 @@\n+2007-09-07  Richard Guenther  <rguenther@suse.de>\n+\n+\tReapply\n+\t2007-09-06  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/32586\n+\t* g++.dg/tree-ssa/pr27090.C: Remove XFAILs.\n+\t* gcc.dg/tree-ssa/ssa-fre-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-fre-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-fre-5.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-fre-4.c: Likewise, remove scan for\n+\tnow obsolete simplification.\n+\n 2007-09-07  Dorit Nuzman  <dorit@il.ibm.com>\n \t\n \tPR tree-optimization/33299"}, {"sha": "a56357a1b52a761e651cb6d68b3f7f2ce6fb0293", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr27090.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2c3940a1c5036298f254757d8823de18067bb4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr27090.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2c3940a1c5036298f254757d8823de18067bb4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr27090.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr27090.C?ref=eb2c3940a1c5036298f254757d8823de18067bb4", "patch": "@@ -17,5 +17,5 @@ int foo(Foo& f)\n         return f.get();\n }\n \n-/* { dg-final { scan-tree-dump \"return f->x;\" \"optimized\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump \"return f->x;\" \"optimized\" } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "0cb63242c0e9a6f5079d0153e737b34a944596c3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2c3940a1c5036298f254757d8823de18067bb4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2c3940a1c5036298f254757d8823de18067bb4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-1.c?ref=eb2c3940a1c5036298f254757d8823de18067bb4", "patch": "@@ -11,6 +11,6 @@ int f(int *a)\n   return *c + t;\n }\n \n-/* { dg-final { scan-tree-dump \"Replaced \\\\\\(int \\\\\\*\\\\\\) b_.*with a_\" \"fre\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump \"Replaced \\\\\\*c_.*with t_\" \"fre\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump \"Replaced \\\\\\(int \\\\\\*\\\\\\) b_.*with a_\" \"fre\" } } */\n+/* { dg-final { scan-tree-dump \"Replaced \\\\\\*c_.*with t_\" \"fre\" } } */\n /* { dg-final { cleanup-tree-dump \"fre\" } } */"}, {"sha": "ebc91e775183a3726a2b4d371679c3d2c894b8ad", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2c3940a1c5036298f254757d8823de18067bb4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2c3940a1c5036298f254757d8823de18067bb4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-3.c?ref=eb2c3940a1c5036298f254757d8823de18067bb4", "patch": "@@ -11,5 +11,5 @@ foo (int a, int b)\n   return aa + bb;\n }\n \n-/* { dg-final { scan-tree-dump \"Replaced \\\\\\(int\\\\\\) aa_.*with a_\" \"fre\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump \"Replaced \\\\\\(int\\\\\\) aa_.*with a_\" \"fre\" } } */\n /* { dg-final { cleanup-tree-dump \"fre\" } } */"}, {"sha": "04208a2290d6309e85e51f3f4ca27a96d3290f06", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2c3940a1c5036298f254757d8823de18067bb4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2c3940a1c5036298f254757d8823de18067bb4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-4.c?ref=eb2c3940a1c5036298f254757d8823de18067bb4", "patch": "@@ -9,6 +9,5 @@ char bar(char f)\n         return wrap(f);\n }\n \n-/* { dg-final { scan-tree-dump \"Replaced \\\\\\(char\\\\\\) .*with \" \"fre\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump \"Replaced \\\\\\(int\\\\\\) .*with \" \"fre\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump \"Replaced \\\\\\(char\\\\\\) .*with \" \"fre\" } } */\n /* { dg-final { cleanup-tree-dump \"fre\" } } */"}, {"sha": "7ef20c2214d01fa54e029832936fde372d221138", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2c3940a1c5036298f254757d8823de18067bb4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2c3940a1c5036298f254757d8823de18067bb4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-5.c?ref=eb2c3940a1c5036298f254757d8823de18067bb4", "patch": "@@ -10,5 +10,5 @@ bar (unsigned int t)\n   return a == t;\n }\n \n-/* { dg-final { scan-tree-dump \"Replaced \\\\\\(unsigned int\\\\\\) a_.*with t_\" \"fre\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump \"Replaced \\\\\\(unsigned int\\\\\\) a_.*with t_\" \"fre\" } } */\n /* { dg-final { cleanup-tree-dump \"fre\" } } */"}, {"sha": "bca0e8473aeb347cb0624ff23b23d8d0f2cf1f1d", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 54, "deletions": 12, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2c3940a1c5036298f254757d8823de18067bb4/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2c3940a1c5036298f254757d8823de18067bb4/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=eb2c3940a1c5036298f254757d8823de18067bb4", "patch": "@@ -1411,6 +1411,11 @@ simplify_binary_expression (tree rhs)\n \top1 = SSA_VAL (op1);\n     }\n \n+  /* Avoid folding if nothing changed.  */\n+  if (op0 == TREE_OPERAND (rhs, 0)\n+      && op1 == TREE_OPERAND (rhs, 1))\n+    return NULL_TREE;\n+\n   result = fold_binary (TREE_CODE (rhs), TREE_TYPE (rhs), op0, op1);\n \n   /* Make sure result is not a complex expression consisting\n@@ -1423,6 +1428,50 @@ simplify_binary_expression (tree rhs)\n   return NULL_TREE;\n }\n \n+/* Simplify the unary expression RHS, and return the result if\n+   simplified. */\n+\n+static tree\n+simplify_unary_expression (tree rhs)\n+{\n+  tree result = NULL_TREE;\n+  tree op0 = TREE_OPERAND (rhs, 0);\n+\n+  if (TREE_CODE (op0) != SSA_NAME)\n+    return NULL_TREE;\n+\n+  if (VN_INFO (op0)->has_constants)\n+    op0 = valueize_expr (VN_INFO (op0)->expr);\n+  else if (TREE_CODE (rhs) == NOP_EXPR\n+\t   || TREE_CODE (rhs) == CONVERT_EXPR\n+\t   || TREE_CODE (rhs) == REALPART_EXPR\n+\t   || TREE_CODE (rhs) == IMAGPART_EXPR)\n+    {\n+      /* We want to do tree-combining on conversion-like expressions.\n+         Make sure we feed only SSA_NAMEs or constants to fold though.  */\n+      tree tem = valueize_expr (VN_INFO (op0)->expr);\n+      if (UNARY_CLASS_P (tem)\n+\t  || BINARY_CLASS_P (tem)\n+\t  || TREE_CODE (tem) == SSA_NAME\n+\t  || is_gimple_min_invariant (tem))\n+\top0 = tem;\n+    }\n+\n+  /* Avoid folding if nothing changed, but remember the expression.  */\n+  if (op0 == TREE_OPERAND (rhs, 0))\n+    return rhs;\n+\n+  result = fold_unary (TREE_CODE (rhs), TREE_TYPE (rhs), op0);\n+  if (result)\n+    {\n+      STRIP_USELESS_TYPE_CONVERSION (result);\n+      if (valid_gimple_expression_p (result))\n+        return result;\n+    }\n+\n+  return rhs;\n+}\n+\n /* Try to simplify RHS using equivalences and constant folding.  */\n \n static tree\n@@ -1457,21 +1506,14 @@ try_to_simplify (tree stmt, tree rhs)\n \t    if (result)\n \t      return result;\n \t  }\n-\t  break;\n+\t  /* Fallthrough for some codes.  */\n+\t  if (!(TREE_CODE (rhs) == REALPART_EXPR\n+\t        || TREE_CODE (rhs) == IMAGPART_EXPR))\n+\t    break;\n \t  /* We could do a little more with unary ops, if they expand\n \t     into binary ops, but it's debatable whether it is worth it. */\n \tcase tcc_unary:\n-\t  {\n-\t    tree result = NULL_TREE;\n-\t    tree op0 = TREE_OPERAND (rhs, 0);\n-\t    if (TREE_CODE (op0) == SSA_NAME && VN_INFO (op0)->has_constants)\n-\t      op0 = VN_INFO (op0)->expr;\n-\t    else if (TREE_CODE (op0) == SSA_NAME && SSA_VAL (op0) != op0)\n-\t      op0 = SSA_VAL (op0);\n-\t    result = fold_unary (TREE_CODE (rhs), TREE_TYPE (rhs), op0);\n-\t    if (result)\n-\t      return result;\n-\t  }\n+\t  return simplify_unary_expression (rhs);\n \t  break;\n \tcase tcc_comparison:\n \tcase tcc_binary:"}]}