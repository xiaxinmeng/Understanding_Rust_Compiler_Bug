{"sha": "14797075918d654f5af84c932568b9e18613ba39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ3OTcwNzU5MThkNjU0ZjVhZjg0YzkzMjU2OGI5ZTE4NjEzYmEzOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-20T22:47:58Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-20T22:47:58Z"}, "message": "gimplify.c (is_gimple_tmp_var): Move to tree-gimple.c.\n\n        * gimplify.c (is_gimple_tmp_var): Move to tree-gimple.c.\n        (gimplify_compound_lval): Use is_gimple_tmp_reg.\n        * tree-gimple.c (is_gimple_tmp_var): Move from gimplify.c.\n        (is_gimple_tmp_reg): New.\n        * tree-gimple.h (is_gimple_tmp_reg): Declare.\n\nFrom-SVN: r84975", "tree": {"sha": "f7623cae82fb1fbeb03ddb9092988dee9f6d87c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7623cae82fb1fbeb03ddb9092988dee9f6d87c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14797075918d654f5af84c932568b9e18613ba39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14797075918d654f5af84c932568b9e18613ba39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14797075918d654f5af84c932568b9e18613ba39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14797075918d654f5af84c932568b9e18613ba39/comments", "author": null, "committer": null, "parents": [{"sha": "40a37b0473df632dc35e34d1060a12e05d4a2110", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40a37b0473df632dc35e34d1060a12e05d4a2110", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40a37b0473df632dc35e34d1060a12e05d4a2110"}], "stats": {"total": 59, "additions": 44, "deletions": 15}, "files": [{"sha": "531b0f3dad114f69510230e3b0a2281402b65120", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14797075918d654f5af84c932568b9e18613ba39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14797075918d654f5af84c932568b9e18613ba39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14797075918d654f5af84c932568b9e18613ba39", "patch": "@@ -1,3 +1,11 @@\n+2004-07-20  Richard Henderson  <rth@redhat.com>\n+\n+\t* gimplify.c (is_gimple_tmp_var): Move to tree-gimple.c.\n+\t(gimplify_compound_lval): Use is_gimple_tmp_reg.\n+\t* tree-gimple.c (is_gimple_tmp_var): Move from gimplify.c.\n+\t(is_gimple_tmp_reg): New.\n+\t* tree-gimple.h (is_gimple_tmp_reg): Declare.\n+\n 2004-07-20  Richard Henderson  <rth@redhat.com>\n \n \t* tree-pretty-print.c (dump_generic_node): Dump"}, {"sha": "f0785035ea0ae03bba9e7298b05b13bcc3dda2c8", "filename": "gcc/gimplify.c", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14797075918d654f5af84c932568b9e18613ba39/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14797075918d654f5af84c932568b9e18613ba39/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=14797075918d654f5af84c932568b9e18613ba39", "patch": "@@ -476,16 +476,6 @@ get_initialized_tmp_var (tree val, tree *pre_p, tree *post_p)\n   return internal_get_tmp_var (val, pre_p, post_p, false);\n }\n \n-/*  Returns true if T is a GIMPLE temporary variable, false otherwise.  */\n-\n-bool\n-is_gimple_tmp_var (tree t)\n-{\n-  /* FIXME this could trigger for other local artificials, too.  */\n-  return (TREE_CODE (t) == VAR_DECL && DECL_ARTIFICIAL (t)\n-\t  && !TREE_STATIC (t) && !DECL_EXTERNAL (t));\n-}\n-\n /* Declares all the variables in VARS in SCOPE.  */\n \n void\n@@ -1569,7 +1559,7 @@ gimplify_compound_lval (tree *expr_p, tree *pre_p,\n \t\t{\n \t          TREE_OPERAND (t, 2) = low;\n \t\t  tret = gimplify_expr (&TREE_OPERAND (t, 2), pre_p, post_p,\n-\t\t\t\t\tis_gimple_tmp_var, fb_rvalue);\n+\t\t\t\t\tis_gimple_tmp_reg, fb_rvalue);\n \t\t  ret = MIN (ret, tret);\n \t\t}\n \t    }\n@@ -1588,7 +1578,7 @@ gimplify_compound_lval (tree *expr_p, tree *pre_p,\n \t\t{\n \t          TREE_OPERAND (t, 3) = elmt_size;\n \t\t  tret = gimplify_expr (&TREE_OPERAND (t, 3), pre_p, post_p,\n-\t\t\t\t\tis_gimple_tmp_var, fb_rvalue);\n+\t\t\t\t\tis_gimple_tmp_reg, fb_rvalue);\n \t\t  ret = MIN (ret, tret);\n \t\t}\n \t    }\n@@ -1610,7 +1600,7 @@ gimplify_compound_lval (tree *expr_p, tree *pre_p,\n \t\t{\n \t          TREE_OPERAND (t, 2) = offset;\n \t\t  tret = gimplify_expr (&TREE_OPERAND (t, 2), pre_p, post_p,\n-\t\t\t\t\tis_gimple_tmp_var, fb_rvalue);\n+\t\t\t\t\tis_gimple_tmp_reg, fb_rvalue);\n \t\t  ret = MIN (ret, tret);\n \t\t}\n \t    }\n@@ -1641,7 +1631,7 @@ gimplify_compound_lval (tree *expr_p, tree *pre_p,\n \t  if (!is_gimple_min_invariant (TREE_OPERAND (t, 1)))\n \t    {\n \t      tret = gimplify_expr (&TREE_OPERAND (t, 1), pre_p, post_p,\n-\t\t\t\t    is_gimple_tmp_var, fb_rvalue);\n+\t\t\t\t    is_gimple_tmp_reg, fb_rvalue);\n \t      ret = MIN (ret, tret);\n \t    }\n \t}"}, {"sha": "2b119fdab879db51b92db17f20f4f2c954a2d2b9", "filename": "gcc/tree-gimple.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14797075918d654f5af84c932568b9e18613ba39/gcc%2Ftree-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14797075918d654f5af84c932568b9e18613ba39/gcc%2Ftree-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.c?ref=14797075918d654f5af84c932568b9e18613ba39", "patch": "@@ -447,6 +447,34 @@ is_gimple_reg (tree t)\n \t  && ! needs_to_live_in_memory (t));\n }\n \n+/* Returns true if T is a GIMPLE temporary variable, false otherwise.  */\n+\n+bool\n+is_gimple_tmp_var (tree t)\n+{\n+  /* FIXME this could trigger for other local artificials, too.  */\n+  return (TREE_CODE (t) == VAR_DECL && DECL_ARTIFICIAL (t)\n+\t  && !TREE_STATIC (t) && !DECL_EXTERNAL (t));\n+}\n+\n+/* Returns true if T is a GIMPLE temporary register variable.  */\n+\n+bool\n+is_gimple_tmp_reg (tree t)\n+{\n+  /* The intent of this is to get hold of a value that won't change.\n+     An SSA_NAME qualifies no matter if its of a user variable or not.  */\n+  if (TREE_CODE (t) == SSA_NAME)\n+    return true;\n+\n+  /* We don't know the lifetime characteristics of user variables.  */\n+  if (TREE_CODE (t) != VAR_DECL || !DECL_ARTIFICIAL (t))\n+    return false;\n+\n+  /* Finally, it must be capable of being placed in a register.  */\n+  return is_gimple_reg (t);\n+}\n+\n /* Return true if T is a GIMPLE variable whose address is not needed.  */\n \n bool"}, {"sha": "3a87503f76d25084d2a25e4a19be047eb2867770", "filename": "gcc/tree-gimple.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14797075918d654f5af84c932568b9e18613ba39/gcc%2Ftree-gimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14797075918d654f5af84c932568b9e18613ba39/gcc%2Ftree-gimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.h?ref=14797075918d654f5af84c932568b9e18613ba39", "patch": "@@ -28,7 +28,6 @@ Boston, MA 02111-1307, USA.  */\n extern tree create_tmp_var_raw (tree, const char *);\n extern tree create_tmp_var_name (const char *);\n extern tree create_tmp_var (tree, const char *);\n-extern bool is_gimple_tmp_var (tree);\n extern tree get_initialized_tmp_var (tree, tree *, tree *);\n extern tree get_formal_tmp_var (tree, tree *);\n extern void declare_tmp_vars (tree, tree);\n@@ -48,6 +47,10 @@ extern bool is_gimple_stmt (tree);\n extern bool is_gimple_reg_type (tree);\n /* Returns true iff T is a scalar register variable.  */\n extern bool is_gimple_reg (tree);\n+/* Returns true if T is a GIMPLE temporary variable, false otherwise.  */\n+extern bool is_gimple_tmp_var (tree);\n+/* Returns true if T is a GIMPLE temporary register variable.  */\n+extern bool is_gimple_tmp_reg (tree);\n /* Returns true iff T is any sort of variable.  */\n extern bool is_gimple_variable (tree);\n /* Returns true iff T is a variable or an INDIRECT_REF (of a variable).  */"}]}