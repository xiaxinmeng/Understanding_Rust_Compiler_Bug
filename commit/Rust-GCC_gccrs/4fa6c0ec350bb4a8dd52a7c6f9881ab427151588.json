{"sha": "4fa6c0ec350bb4a8dd52a7c6f9881ab427151588", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZhNmMwZWMzNTBiYjRhOGRkNTJhN2M2Zjk4ODFhYjQyNzE1MTU4OA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-10T14:37:23Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-11T15:53:22Z"}, "message": "libstdc++: Define std::is_pointer_interconvertible_base_of for C++20\n\nImplement these traits using the new built-ins that Jakub added\nrecently.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/type_traits (__cpp_lib_is_pointer_interconvertible)\n\t(is_pointer_interconvertible_base_of_v)\n\t(is_pointer_interconvertible_base_of): Define for C++20.\n\t* include/std/version (__cpp_lib_is_pointer_interconvertible):\n\tDefine.\n\t* testsuite/23_containers/span/layout_compat.cc: Use correct\n\tfeature test macro for std::is_layout_compatible_v.\n\t* testsuite/20_util/is_pointer_interconvertible/value.cc: New test.\n\t* testsuite/20_util/is_pointer_interconvertible/version.cc: New test.", "tree": {"sha": "9acd3e1fb9cd4bdeea861b30d7e9b30853e32353", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9acd3e1fb9cd4bdeea861b30d7e9b30853e32353"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fa6c0ec350bb4a8dd52a7c6f9881ab427151588", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fa6c0ec350bb4a8dd52a7c6f9881ab427151588", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fa6c0ec350bb4a8dd52a7c6f9881ab427151588", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fa6c0ec350bb4a8dd52a7c6f9881ab427151588/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04ddd108d12b78d8a7e243d7481fe7d8394b0c4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04ddd108d12b78d8a7e243d7481fe7d8394b0c4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04ddd108d12b78d8a7e243d7481fe7d8394b0c4f"}], "stats": {"total": 94, "additions": 93, "deletions": 1}, "files": [{"sha": "2be4944e2a6b0998e02c90d7defe5ebe087ca218", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa6c0ec350bb4a8dd52a7c6f9881ab427151588/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa6c0ec350bb4a8dd52a7c6f9881ab427151588/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=4fa6c0ec350bb4a8dd52a7c6f9881ab427151588", "patch": "@@ -3389,6 +3389,33 @@ template<typename _Ret, typename _Fn, typename... _Args>\n     inline constexpr bool is_unbounded_array_v\n       = is_unbounded_array<_Tp>::value;\n \n+#if __has_builtin(__is_pointer_interconvertible_base_of)\n+  /// True if `_Derived` is standard-layout and has a base class of type `_Base`\n+  /// @since C++20\n+  template<typename _Base, typename _Derived>\n+    struct is_pointer_interconvertible_base_of\n+    : bool_constant<__is_pointer_interconvertible_base_of(_Base, _Derived)>\n+    { };\n+\n+  /// @ingroup variable_templates\n+  /// @since C++20\n+  template<typename _Base, typename _Derived>\n+    constexpr bool is_pointer_interconvertible_base_of_v\n+      = __is_pointer_interconvertible_base_of(_Base, _Derived);\n+\n+#if __has_builtin(__builtin_is_pointer_interconvertible_with_class)\n+#define __cpp_lib_is_pointer_interconvertible 201907L\n+\n+  /// True if `__mp` points to the first member of a standard-layout type\n+  /// @returns true if `s.*__mp` is pointer-interconvertible with `s`\n+  /// @since C++20\n+  template<typename _Tp, typename _Mem>\n+    constexpr bool\n+    is_pointer_interconvertible_with_class(_Mem _Tp::*__mp) noexcept\n+    { return __builtin_is_pointer_interconvertible_with_class(__mp); }\n+#endif\n+#endif\n+\n #if __cplusplus > 202002L\n #define __cpp_lib_is_scoped_enum 202011L\n "}, {"sha": "925f27704c4912e03d7006fd07c0ff274a113bdf", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa6c0ec350bb4a8dd52a7c6f9881ab427151588/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa6c0ec350bb4a8dd52a7c6f9881ab427151588/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=4fa6c0ec350bb4a8dd52a7c6f9881ab427151588", "patch": "@@ -236,6 +236,10 @@\n #ifdef _GLIBCXX_HAS_GTHREADS\n # define __cpp_lib_jthread 201911L\n #endif\n+#if __has_builtin(__is_pointer_interconvertible_base_of) \\\n+ && __has_builtin(__builtin_is_pointer_interconvertible_with_class)\n+# define __cpp_lib_is_pointer_interconvertible 201907L\n+#endif\n #if __cpp_lib_atomic_wait\n # define __cpp_lib_latch 201907L\n #endif"}, {"sha": "471571cac584ae1db3b11222f66a699f781f09e6", "filename": "libstdc++-v3/testsuite/20_util/is_pointer_interconvertible/value.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa6c0ec350bb4a8dd52a7c6f9881ab427151588/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_pointer_interconvertible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa6c0ec350bb4a8dd52a7c6f9881ab427151588/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_pointer_interconvertible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_pointer_interconvertible%2Fvalue.cc?ref=4fa6c0ec350bb4a8dd52a7c6f9881ab427151588", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+#include <type_traits>\n+\n+#ifndef __cpp_lib_is_pointer_interconvertible\n+# error \"Feature test macro for is_pointer_interconvertible is missing in <type_traits>\"\n+#elif __cpp_lib_is_pointer_interconvertible < 201907L\n+# error \"Feature test macro for is_pointer_interconvertible has wrong value in <type_traits>\"\n+#endif\n+\n+static_assert( std::is_pointer_interconvertible_base_of<void, void>::value\n+\t\t== std::is_pointer_interconvertible_base_of_v<void, void> );\n+\n+struct B { };\n+\n+static_assert( std::is_pointer_interconvertible_base_of<B, B>::value\n+\t\t== std::is_pointer_interconvertible_base_of_v<B, B> );\n+\n+static_assert( std::is_pointer_interconvertible_base_of_v<B, B> );\n+static_assert( std::is_pointer_interconvertible_base_of_v<B, const B> );\n+static_assert( std::is_pointer_interconvertible_base_of_v<const B, B> );\n+static_assert( std::is_pointer_interconvertible_base_of_v<const B, const B> );\n+\n+struct D : B { int i; };\n+\n+static_assert( std::is_pointer_interconvertible_base_of_v<D, D> );\n+\n+static_assert( std::is_pointer_interconvertible_base_of_v<B, D> );\n+static_assert( std::is_pointer_interconvertible_base_of_v<const B, D> );\n+static_assert( std::is_pointer_interconvertible_base_of_v<B, const D> );\n+static_assert( std::is_pointer_interconvertible_base_of_v<const B, const D> );\n+\n+static_assert( ! std::is_pointer_interconvertible_base_of_v<D, B> );\n+\n+struct E : D { };\n+// E is not standard-layout\n+static_assert( ! std::is_pointer_interconvertible_base_of_v<E, B> );\n+\n+struct D1 : B { };\n+struct D2 : B { };\n+struct D3 : D1, D2 { };\n+// B is ambiguously derived\n+static_assert( ! std::is_pointer_interconvertible_base_of_v<B, D3> );\n+\n+union U;\n+static_assert( ! std::is_pointer_interconvertible_base_of_v<U, U> );\n+static_assert( ! std::is_pointer_interconvertible_base_of_v<U, D> );\n+\n+struct I; // incomplete\n+static_assert( std::is_pointer_interconvertible_base_of_v<I, I> );\n+static_assert( std::is_pointer_interconvertible_base_of_v<I, const I> );"}, {"sha": "138c4be9f935c98e6719816de5cddd3f4339298e", "filename": "libstdc++-v3/testsuite/20_util/is_pointer_interconvertible/version.cc", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa6c0ec350bb4a8dd52a7c6f9881ab427151588/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_pointer_interconvertible%2Fversion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa6c0ec350bb4a8dd52a7c6f9881ab427151588/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_pointer_interconvertible%2Fversion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_pointer_interconvertible%2Fversion.cc?ref=4fa6c0ec350bb4a8dd52a7c6f9881ab427151588", "patch": "@@ -0,0 +1,10 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+\n+#include <version>\n+\n+#ifndef __cpp_lib_is_pointer_interconvertible\n+# error \"Feature test macro for is_pointer_interconvertible is missing in <version>\"\n+#elif __cpp_lib_is_pointer_interconvertible < 201907L\n+# error \"Feature test macro for is_pointer_interconvertible has wrong value in <version>\"\n+#endif"}, {"sha": "04947e93dbca03ad7539f2062a3cd13abd7f54ac", "filename": "libstdc++-v3/testsuite/23_containers/span/layout_compat.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa6c0ec350bb4a8dd52a7c6f9881ab427151588/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Flayout_compat.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa6c0ec350bb4a8dd52a7c6f9881ab427151588/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Flayout_compat.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Flayout_compat.cc?ref=4fa6c0ec350bb4a8dd52a7c6f9881ab427151588", "patch": "@@ -27,7 +27,7 @@\n struct iovec { void* iov_base; std::size_t iov_len; };\n #endif\n \n-#if __cpp_lib_is_pointer_interconvertible\n+#if __cpp_lib_is_layout_compatible\n using std::is_layout_compatible_v;\n #else\n // A poor substitute for is_layout_compatible_v"}]}