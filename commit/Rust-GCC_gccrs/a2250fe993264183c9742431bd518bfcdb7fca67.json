{"sha": "a2250fe993264183c9742431bd518bfcdb7fca67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIyNTBmZTk5MzI2NDE4M2M5NzQyNDMxYmQ1MThiZmNkYjdmY2E2Nw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-08-28T06:22:20Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-08-28T06:22:20Z"}, "message": "cfgcleanup.c: Include rtl-iter.h.\n\ngcc/\n\t* cfgcleanup.c: Include rtl-iter.h.\n\t(mentions_nonequal_regs): Turn from being a for_each_rtx callback\n\tto being a function that examines each subrtx itself.\n\t(thread_jump): Update accordingly.\n\nFrom-SVN: r214626", "tree": {"sha": "73bf9e7d12a4fd961c11b23726f69fcca57fec70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73bf9e7d12a4fd961c11b23726f69fcca57fec70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2250fe993264183c9742431bd518bfcdb7fca67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2250fe993264183c9742431bd518bfcdb7fca67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2250fe993264183c9742431bd518bfcdb7fca67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2250fe993264183c9742431bd518bfcdb7fca67/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f8305d18b8a10fcf63ca8fac1079e619d3b67e10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8305d18b8a10fcf63ca8fac1079e619d3b67e10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8305d18b8a10fcf63ca8fac1079e619d3b67e10"}], "stats": {"total": 47, "additions": 28, "deletions": 19}, "files": [{"sha": "69331bd79f3a2d7d6f5c53ede58a9bffa7865f99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2250fe993264183c9742431bd518bfcdb7fca67/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2250fe993264183c9742431bd518bfcdb7fca67/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2250fe993264183c9742431bd518bfcdb7fca67", "patch": "@@ -1,3 +1,10 @@\n+2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* cfgcleanup.c: Include rtl-iter.h.\n+\t(mentions_nonequal_regs): Turn from being a for_each_rtx callback\n+\tto being a function that examines each subrtx itself.\n+\t(thread_jump): Update accordingly.\n+\n 2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* combine-stack-adj.c: Include rtl-iter.h."}, {"sha": "7dfed098eaf868d4e6b35286d8732e6ae669ab51", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2250fe993264183c9742431bd518bfcdb7fca67/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2250fe993264183c9742431bd518bfcdb7fca67/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=a2250fe993264183c9742431bd518bfcdb7fca67", "patch": "@@ -54,6 +54,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dce.h\"\n #include \"dbgcnt.h\"\n #include \"emit-rtl.h\"\n+#include \"rtl-iter.h\"\n \n #define FORWARDER_BLOCK_P(BB) ((BB)->flags & BB_FORWARDER_BLOCK)\n \n@@ -81,7 +82,6 @@ static edge thread_jump (edge, basic_block);\n static bool mark_effect (rtx, bitmap);\n static void notice_new_block (basic_block);\n static void update_forwarder_flag (basic_block);\n-static int mentions_nonequal_regs (rtx *, void *);\n static void merge_memattrs (rtx, rtx);\n \f\n /* Set flags for newly created block.  */\n@@ -235,29 +235,31 @@ mark_effect (rtx exp, regset nonequal)\n     }\n }\n \n-/* Return nonzero if X is a register set in regset DATA.\n-   Called via for_each_rtx.  */\n-static int\n-mentions_nonequal_regs (rtx *x, void *data)\n+/* Return true if X contains a register in NONEQUAL.  */\n+static bool\n+mentions_nonequal_regs (const_rtx x, regset nonequal)\n {\n-  regset nonequal = (regset) data;\n-  if (REG_P (*x))\n+  subrtx_iterator::array_type array;\n+  FOR_EACH_SUBRTX (iter, array, x, NONCONST)\n     {\n-      int regno;\n-\n-      regno = REGNO (*x);\n-      if (REGNO_REG_SET_P (nonequal, regno))\n-\treturn 1;\n-      if (regno < FIRST_PSEUDO_REGISTER)\n+      const_rtx x = *iter;\n+      if (REG_P (x))\n \t{\n-\t  int n = hard_regno_nregs[regno][GET_MODE (*x)];\n-\t  while (--n > 0)\n-\t    if (REGNO_REG_SET_P (nonequal, regno + n))\n-\t      return 1;\n+\t  unsigned int regno = REGNO (x);\n+\t  if (REGNO_REG_SET_P (nonequal, regno))\n+\t    return true;\n+\t  if (regno < FIRST_PSEUDO_REGISTER)\n+\t    {\n+\t      int n = hard_regno_nregs[regno][GET_MODE (x)];\n+\t      while (--n > 0)\n+\t\tif (REGNO_REG_SET_P (nonequal, regno + n))\n+\t\t  return true;\n+\t    }\n \t}\n     }\n-  return 0;\n+  return false;\n }\n+\n /* Attempt to prove that the basic block B will have no side effects and\n    always continues in the same edge if reached via E.  Return the edge\n    if exist, NULL otherwise.  */\n@@ -381,7 +383,7 @@ thread_jump (edge e, basic_block b)\n \n   /* cond2 must not mention any register that is not equal to the\n      former block.  */\n-  if (for_each_rtx (&cond2, mentions_nonequal_regs, nonequal))\n+  if (mentions_nonequal_regs (cond2, nonequal))\n     goto failed_exit;\n \n   EXECUTE_IF_SET_IN_REG_SET (nonequal, 0, i, rsi)"}]}