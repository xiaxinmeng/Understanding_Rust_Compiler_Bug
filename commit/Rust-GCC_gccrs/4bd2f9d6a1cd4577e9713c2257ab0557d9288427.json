{"sha": "4bd2f9d6a1cd4577e9713c2257ab0557d9288427", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJkMmY5ZDZhMWNkNDU3N2U5NzEzYzIyNTdhYjA1NTdkOTI4ODQyNw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2005-09-27T01:40:46Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2005-09-27T01:40:46Z"}, "message": "2005-09-25  Benjamin Kosnik  <bkoz@redhat.com>\n\t    Eric Botcazou  <ebotcazou@libertysurf.fr>\n\n\t* include/ext/mt_allocator.h\n\t(__per_type_pool<...true>::_S_initialize_once): Always call\n\t_M_initialize_once.\n\t(__common_pool<...true>::_S_initialize_once): Same.\n\nCo-Authored-By: Eric Botcazou <ebotcazou@libertysurf.fr>\n\nFrom-SVN: r104678", "tree": {"sha": "2db797ab1795cbc9e57621ee5a787a155a098a42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2db797ab1795cbc9e57621ee5a787a155a098a42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bd2f9d6a1cd4577e9713c2257ab0557d9288427", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bd2f9d6a1cd4577e9713c2257ab0557d9288427", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bd2f9d6a1cd4577e9713c2257ab0557d9288427", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bd2f9d6a1cd4577e9713c2257ab0557d9288427/comments", "author": null, "committer": null, "parents": [{"sha": "92b4f0af9d4b3cd46118c276dab979cb4089c787", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92b4f0af9d4b3cd46118c276dab979cb4089c787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92b4f0af9d4b3cd46118c276dab979cb4089c787"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "59624138ed46efbc3c1416828ad21d619c8b9c4d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd2f9d6a1cd4577e9713c2257ab0557d9288427/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd2f9d6a1cd4577e9713c2257ab0557d9288427/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4bd2f9d6a1cd4577e9713c2257ab0557d9288427", "patch": "@@ -1,3 +1,11 @@\n+2005-09-25  Benjamin Kosnik  <bkoz@redhat.com>\n+\t    Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* include/ext/mt_allocator.h\n+\t(__per_type_pool<...true>::_S_initialize_once): Always call\n+\t_M_initialize_once.\n+\t(__common_pool<...true>::_S_initialize_once): Same.\n+\n 2005-09-23  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/ext/mt_allocator/tune-1.cc: Clarify for single-thread."}, {"sha": "014e62a57c19072d870a0374eede842bfe7fc6bc", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd2f9d6a1cd4577e9713c2257ab0557d9288427/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd2f9d6a1cd4577e9713c2257ab0557d9288427/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=4bd2f9d6a1cd4577e9713c2257ab0557d9288427", "patch": "@@ -432,8 +432,11 @@ namespace __gnu_cxx\n \t\tstatic __gthread_once_t __once = __GTHREAD_ONCE_INIT;\n \t\t__gthread_once(&__once, _S_initialize);\n \t      }\n-\t    else\n-\t      _S_get_pool()._M_initialize_once(); \n+\n+\t    // Double check initialization. May be necessary on some\n+\t    // systems for proper construction when not compiling with\n+\t    // thread flags.\n+\t    _S_get_pool()._M_initialize_once(); \n \t    __init = true;\n \t  }\n       }\n@@ -524,8 +527,11 @@ namespace __gnu_cxx\n \t\tstatic __gthread_once_t __once = __GTHREAD_ONCE_INIT;\n \t\t__gthread_once(&__once, _S_initialize);\n \t      }\n-\t    else\n-\t      _S_get_pool()._M_initialize_once(); \n+\n+\t    // Double check initialization. May be necessary on some\n+\t    // systems for proper construction when not compiling with\n+\t    // thread flags.\n+\t    _S_get_pool()._M_initialize_once(); \n \t    __init = true;\n \t  }\n       }"}]}