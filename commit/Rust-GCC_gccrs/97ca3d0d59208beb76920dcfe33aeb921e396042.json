{"sha": "97ca3d0d59208beb76920dcfe33aeb921e396042", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdjYTNkMGQ1OTIwOGJlYjc2OTIwZGNmZTMzYWViOTIxZTM5NjA0Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-01-21T20:26:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-01-21T20:26:02Z"}, "message": "re PR c++/43407 (Specifying visibility attribute of C++0x enum class emits warning)\n\n\tPR c++/43407\n\t* decl.c (start_enum): Add attributes parameter.\n\t* parser.c (cp_parser_enum_specifier): Pass it.\n\t* pt.c (lookup_template_class_1): Pass it.\n\t* cp-tree.h: Adjust.\n\nFrom-SVN: r232701", "tree": {"sha": "e14478b90970df2620dd61b06cdf616e89318b4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e14478b90970df2620dd61b06cdf616e89318b4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97ca3d0d59208beb76920dcfe33aeb921e396042", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97ca3d0d59208beb76920dcfe33aeb921e396042", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97ca3d0d59208beb76920dcfe33aeb921e396042", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97ca3d0d59208beb76920dcfe33aeb921e396042/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed478de1a4b9a313c4f162e214440bac948600f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed478de1a4b9a313c4f162e214440bac948600f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed478de1a4b9a313c4f162e214440bac948600f9"}], "stats": {"total": 193, "additions": 133, "deletions": 60}, "files": [{"sha": "f516216ab6f12343e67e20fdc6e7b52f02919440", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ca3d0d59208beb76920dcfe33aeb921e396042/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ca3d0d59208beb76920dcfe33aeb921e396042/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=97ca3d0d59208beb76920dcfe33aeb921e396042", "patch": "@@ -1,3 +1,11 @@\n+2016-01-21  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/43407\n+\t* decl.c (start_enum): Add attributes parameter.\n+\t* parser.c (cp_parser_enum_specifier): Pass it.\n+\t* pt.c (lookup_template_class_1): Pass it.\n+\t* cp-tree.h: Adjust.\n+\n 2016-01-19  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/59759"}, {"sha": "0aeee578f7e5a58be0a1d235fb3efb0079489f97", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ca3d0d59208beb76920dcfe33aeb921e396042/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ca3d0d59208beb76920dcfe33aeb921e396042/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=97ca3d0d59208beb76920dcfe33aeb921e396042", "patch": "@@ -5788,7 +5788,7 @@ extern bool grok_op_properties\t\t\t(tree, bool);\n extern tree xref_tag\t\t\t\t(enum tag_types, tree, tag_scope, bool);\n extern tree xref_tag_from_type\t\t\t(tree, tree, tag_scope);\n extern bool xref_basetypes\t\t\t(tree, tree);\n-extern tree start_enum\t\t\t\t(tree, tree, tree, bool, bool *);\n+extern tree start_enum\t\t\t\t(tree, tree, tree, tree, bool, bool *);\n extern void finish_enum_value_list\t\t(tree);\n extern void finish_enum\t\t\t\t(tree);\n extern void build_enumerator\t\t\t(tree, tree, tree, tree, location_t);"}, {"sha": "d995654a3d8b0b0d0ab2c529bd8c0f29baf3b9ec", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ca3d0d59208beb76920dcfe33aeb921e396042/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ca3d0d59208beb76920dcfe33aeb921e396042/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=97ca3d0d59208beb76920dcfe33aeb921e396042", "patch": "@@ -13045,6 +13045,8 @@ copy_type_enum (tree dst, tree src)\n    the enumeration type. This should be NULL_TREE if no storage type\n    was specified.\n \n+   ATTRIBUTES are any attributes specified after the enum-key.\n+\n    SCOPED_ENUM_P is true if this is a scoped enumeration type.\n \n    if IS_NEW is not NULL, gets TRUE iff a new type is created.\n@@ -13055,7 +13057,7 @@ copy_type_enum (tree dst, tree src)\n \n tree\n start_enum (tree name, tree enumtype, tree underlying_type,\n-\t    bool scoped_enum_p, bool *is_new)\n+\t    tree attributes, bool scoped_enum_p, bool *is_new)\n {\n   tree prevtype = NULL_TREE;\n   gcc_assert (identifier_p (name));\n@@ -13163,6 +13165,8 @@ start_enum (tree name, tree enumtype, tree underlying_type,\n \n   SET_SCOPED_ENUM_P (enumtype, scoped_enum_p);\n \n+  cplus_decl_attributes (&enumtype, attributes, (int)ATTR_FLAG_TYPE_IN_PLACE);\n+\n   if (underlying_type)\n     {\n       if (CP_INTEGRAL_TYPE_P (underlying_type))"}, {"sha": "33f1df3ca025869788aae0a3be746325b654fde4", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ca3d0d59208beb76920dcfe33aeb921e396042/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ca3d0d59208beb76920dcfe33aeb921e396042/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=97ca3d0d59208beb76920dcfe33aeb921e396042", "patch": "@@ -17132,7 +17132,7 @@ cp_parser_enum_specifier (cp_parser* parser)\n        brace so the enum will be recorded as being on the line of its\n        tag (or the 'enum' keyword, if there is no tag).  */\n     type = start_enum (identifier, type, underlying_type,\n-\t\t       scoped_enum_p, &is_new_type);\n+\t\t       attributes, scoped_enum_p, &is_new_type);\n \n   /* If the next token is not '{' it is an opaque-enum-specifier or an\n      elaborated-type-specifier.  */\n@@ -17248,7 +17248,6 @@ cp_parser_enum_specifier (cp_parser* parser)\n   if (cp_parser_allow_gnu_extensions_p (parser))\n     {\n       tree trailing_attr = cp_parser_gnu_attributes_opt (parser);\n-      trailing_attr = chainon (trailing_attr, attributes);\n       cplus_decl_attributes (&type,\n \t\t\t     trailing_attr,\n \t\t\t     (int) ATTR_FLAG_TYPE_IN_PLACE);"}, {"sha": "7985198d46c6018ea36f3d0529e917fe7da4310e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 110, "deletions": 55, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ca3d0d59208beb76920dcfe33aeb921e396042/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ca3d0d59208beb76920dcfe33aeb921e396042/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=97ca3d0d59208beb76920dcfe33aeb921e396042", "patch": "@@ -214,6 +214,7 @@ static tree listify_autos (tree, tree);\n static tree tsubst_template_parm (tree, tree, tsubst_flags_t);\n static tree instantiate_alias_template (tree, tree, tsubst_flags_t);\n static bool complex_alias_template_p (const_tree tmpl);\n+static tree tsubst_attributes (tree, tree, tsubst_flags_t, tree);\n \n /* Make the current scope suitable for access checking when we are\n    processing T.  T can be FUNCTION_DECL for instantiated function\n@@ -8398,6 +8399,8 @@ lookup_template_class_1 (tree d1, tree arglist, tree in_decl, tree context,\n \t      t = start_enum (TYPE_IDENTIFIER (template_type), NULL_TREE,\n \t\t\t      tsubst (ENUM_UNDERLYING_TYPE (template_type),\n \t\t\t\t      arglist, complain, in_decl),\n+\t\t\t      tsubst_attributes (TYPE_ATTRIBUTES (template_type),\n+\t\t\t\t\t\t arglist, complain, in_decl),\n \t\t\t      SCOPED_ENUM_P (template_type), NULL);\n \n \t      if (t == error_mark_node)\n@@ -9540,6 +9543,109 @@ can_complete_type_without_circularity (tree type)\n \n static tree tsubst_omp_clauses (tree, bool, bool, tree, tsubst_flags_t, tree);\n \n+/* Instantiate a single dependent attribute T (a TREE_LIST), and return either\n+   T or a new TREE_LIST, possibly a chain in the case of a pack expansion.  */\n+\n+static tree\n+tsubst_attribute (tree t, tree *decl_p, tree args,\n+\t\t  tsubst_flags_t complain, tree in_decl)\n+{\n+  gcc_assert (ATTR_IS_DEPENDENT (t));\n+\n+  tree val = TREE_VALUE (t);\n+  if (val == NULL_TREE)\n+    /* Nothing to do.  */;\n+  else if ((flag_openmp || flag_openmp_simd || flag_cilkplus)\n+\t   && is_attribute_p (\"omp declare simd\",\n+\t\t\t      get_attribute_name (t)))\n+    {\n+      tree clauses = TREE_VALUE (val);\n+      clauses = tsubst_omp_clauses (clauses, true, false, args,\n+\t\t\t\t    complain, in_decl);\n+      c_omp_declare_simd_clauses_to_decls (*decl_p, clauses);\n+      clauses = finish_omp_clauses (clauses, false, true);\n+      tree parms = DECL_ARGUMENTS (*decl_p);\n+      clauses\n+\t= c_omp_declare_simd_clauses_to_numbers (parms, clauses);\n+      if (clauses)\n+\tval = build_tree_list (NULL_TREE, clauses);\n+      else\n+\tval = NULL_TREE;\n+    }\n+  /* If the first attribute argument is an identifier, don't\n+     pass it through tsubst.  Attributes like mode, format,\n+     cleanup and several target specific attributes expect it\n+     unmodified.  */\n+  else if (attribute_takes_identifier_p (get_attribute_name (t)))\n+    {\n+      tree chain\n+\t= tsubst_expr (TREE_CHAIN (val), args, complain, in_decl,\n+\t\t       /*integral_constant_expression_p=*/false);\n+      if (chain != TREE_CHAIN (val))\n+\tval = tree_cons (NULL_TREE, TREE_VALUE (val), chain);\n+    }\n+  else if (PACK_EXPANSION_P (val))\n+    {\n+      /* An attribute pack expansion.  */\n+      tree purp = TREE_PURPOSE (t);\n+      tree pack = tsubst_pack_expansion (val, args, complain, in_decl);\n+      int len = TREE_VEC_LENGTH (pack);\n+      tree list = NULL_TREE;\n+      tree *q = &list;\n+      for (int i = 0; i < len; ++i)\n+\t{\n+\t  tree elt = TREE_VEC_ELT (pack, i);\n+\t  *q = build_tree_list (purp, elt);\n+\t  q = &TREE_CHAIN (*q);\n+\t}\n+      return list;\n+    }\n+  else\n+    val = tsubst_expr (val, args, complain, in_decl,\n+\t\t       /*integral_constant_expression_p=*/false);\n+\n+  if (val != TREE_VALUE (t))\n+    return build_tree_list (TREE_PURPOSE (t), val);\n+  return t;\n+}\n+\n+/* Instantiate any dependent attributes in ATTRIBUTES, returning either it\n+   unchanged or a new TREE_LIST chain.  */\n+\n+static tree\n+tsubst_attributes (tree attributes, tree args,\n+\t\t   tsubst_flags_t complain, tree in_decl)\n+{\n+  tree last_dep = NULL_TREE;\n+\n+  for (tree t = attributes; t; t = TREE_CHAIN (t))\n+    if (ATTR_IS_DEPENDENT (t))\n+      {\n+\tlast_dep = t;\n+\tattributes = copy_list (attributes);\n+\tbreak;\n+      }\n+\n+  if (last_dep)\n+    for (tree *p = &attributes; *p; p = &TREE_CHAIN (*p))\n+      {\n+\ttree t = *p;\n+\tif (ATTR_IS_DEPENDENT (t))\n+\t  {\n+\t    tree subst = tsubst_attribute (t, NULL, args, complain, in_decl);\n+\t    if (subst == t)\n+\t      continue;\n+\t    *p = subst;\n+\t    do\n+\t      p = &TREE_CHAIN (*p);\n+\t    while (*p);\n+\t    *p = TREE_CHAIN (t);\n+\t  }\n+      }\n+\n+  return attributes;\n+}\n+\n /* Apply any attributes which had to be deferred until instantiation\n    time.  DECL_P, ATTRIBUTES and ATTR_FLAGS are as cplus_decl_attributes;\n    ARGS, COMPLAIN, IN_DECL are as tsubst.  */\n@@ -9581,61 +9687,10 @@ apply_late_template_attributes (tree *decl_p, tree attributes, int attr_flags,\n \t    {\n \t      *p = TREE_CHAIN (t);\n \t      TREE_CHAIN (t) = NULL_TREE;\n-\t      if ((flag_openmp || flag_openmp_simd || flag_cilkplus)\n-\t\t  && is_attribute_p (\"omp declare simd\",\n-\t\t\t\t     get_attribute_name (t))\n-\t\t  && TREE_VALUE (t))\n-\t\t{\n-\t\t  tree clauses = TREE_VALUE (TREE_VALUE (t));\n-\t\t  clauses = tsubst_omp_clauses (clauses, true, false, args,\n-\t\t\t\t\t\tcomplain, in_decl);\n-\t\t  c_omp_declare_simd_clauses_to_decls (*decl_p, clauses);\n-\t\t  clauses = finish_omp_clauses (clauses, false, true);\n-\t\t  tree parms = DECL_ARGUMENTS (*decl_p);\n-\t\t  clauses\n-\t\t    = c_omp_declare_simd_clauses_to_numbers (parms, clauses);\n-\t\t  if (clauses)\n-\t\t    TREE_VALUE (TREE_VALUE (t)) = clauses;\n-\t\t  else\n-\t\t    TREE_VALUE (t) = NULL_TREE;\n-\t\t}\n-\t      /* If the first attribute argument is an identifier, don't\n-\t\t pass it through tsubst.  Attributes like mode, format,\n-\t\t cleanup and several target specific attributes expect it\n-\t\t unmodified.  */\n-\t      else if (attribute_takes_identifier_p (get_attribute_name (t))\n-\t\t       && TREE_VALUE (t))\n-\t\t{\n-\t\t  tree chain\n-\t\t    = tsubst_expr (TREE_CHAIN (TREE_VALUE (t)), args, complain,\n-\t\t\t\t   in_decl,\n-\t\t\t\t   /*integral_constant_expression_p=*/false);\n-\t\t  if (chain != TREE_CHAIN (TREE_VALUE (t)))\n-\t\t    TREE_VALUE (t)\n-\t\t      = tree_cons (NULL_TREE, TREE_VALUE (TREE_VALUE (t)),\n-\t\t\t\t   chain);\n-\t\t}\n-\t      else if (TREE_VALUE (t) && PACK_EXPANSION_P (TREE_VALUE (t)))\n-\t\t{\n-\t\t  /* An attribute pack expansion.  */\n-\t\t  tree purp = TREE_PURPOSE (t);\n-\t\t  tree pack = (tsubst_pack_expansion\n-\t\t\t       (TREE_VALUE (t), args, complain, in_decl));\n-\t\t  int len = TREE_VEC_LENGTH (pack);\n-\t\t  for (int i = 0; i < len; ++i)\n-\t\t    {\n-\t\t      tree elt = TREE_VEC_ELT (pack, i);\n-\t\t      *q = build_tree_list (purp, elt);\n-\t\t      q = &TREE_CHAIN (*q);\n-\t\t    }\n-\t\t  continue;\n-\t\t}\n-\t      else\n-\t\tTREE_VALUE (t)\n-\t\t  = tsubst_expr (TREE_VALUE (t), args, complain, in_decl,\n-\t\t\t\t /*integral_constant_expression_p=*/false);\n-\t      *q = t;\n-\t      q = &TREE_CHAIN (t);\n+\t      *q = tsubst_attribute (t, decl_p, args, complain, in_decl);\n+\t      do\n+\t\tq = &TREE_CHAIN (*q);\n+\t      while (*q);\n \t    }\n \t  else\n \t    p = &TREE_CHAIN (t);"}, {"sha": "cf9e32fb81740721873d8a588e22b0876bda6e47", "filename": "gcc/testsuite/g++.dg/abi/abi-tag15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ca3d0d59208beb76920dcfe33aeb921e396042/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ca3d0d59208beb76920dcfe33aeb921e396042/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag15.C?ref=97ca3d0d59208beb76920dcfe33aeb921e396042", "patch": "@@ -1,3 +1,3 @@\n // PR c++/66748\n \n-enum __attribute__((abi_tag(\"foo\"))) E {}; // { dg-error \"redeclaration of\" }\n+enum __attribute__((abi_tag(\"foo\"))) E {};"}, {"sha": "62d65b46f0a40d8542f9b3f2d0a33a41f9fa4f89", "filename": "gcc/testsuite/g++.dg/cpp0x/enum31.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ca3d0d59208beb76920dcfe33aeb921e396042/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum31.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ca3d0d59208beb76920dcfe33aeb921e396042/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum31.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum31.C?ref=97ca3d0d59208beb76920dcfe33aeb921e396042", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile { target c++11 } }\n+\n+enum class __attribute__((__visibility__(\"default\"))) Foobar\n+{\n+  fratz,\n+    nabble\n+};"}]}