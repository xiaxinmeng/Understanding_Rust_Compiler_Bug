{"sha": "3facc4b61545614e75b4fb852a72bbc80554705b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZhY2M0YjYxNTQ1NjE0ZTc1YjRmYjg1MmE3MmJiYzgwNTU0NzA1Yg==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2004-06-02T18:56:54Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-06-02T18:56:54Z"}, "message": "re PR tree-optimization/14736 ([tree-ssa] code quality regression)\n\n\n2004-06-02  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR tree-optimization/14736\n        * g++.dg/tree-ssa/ssa-cast-1.C: New Test.\n\n        PR tree-optimization/14042\n        * g++.dg/tree-ssa/ssa-sra-1.C: New Test.\n\n        PR tree-optimization/14729\n        * g++.dg/tree-ssa/ssa-sra-2.C: New Test.\n\n2004-06-02  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR tree-optimization/14042\n        PR tree-optimization/14729\n        PR tree-optimization/14736\n        * tree-ssa.c: Check the type which the pointer points to\n        instead of the pointer types.\n\nFrom-SVN: r82573", "tree": {"sha": "c7fccbaf60e8db73bde589527b1620708b2c614b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7fccbaf60e8db73bde589527b1620708b2c614b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3facc4b61545614e75b4fb852a72bbc80554705b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3facc4b61545614e75b4fb852a72bbc80554705b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3facc4b61545614e75b4fb852a72bbc80554705b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3facc4b61545614e75b4fb852a72bbc80554705b/comments", "author": null, "committer": null, "parents": [{"sha": "91fa0e3de67af533eeeb8ef494a2bb66187570c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91fa0e3de67af533eeeb8ef494a2bb66187570c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91fa0e3de67af533eeeb8ef494a2bb66187570c1"}], "stats": {"total": 145, "additions": 144, "deletions": 1}, "files": [{"sha": "7290effa578f9913dd7acde11c012a3e16e79747", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3facc4b61545614e75b4fb852a72bbc80554705b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3facc4b61545614e75b4fb852a72bbc80554705b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3facc4b61545614e75b4fb852a72bbc80554705b", "patch": "@@ -1,3 +1,11 @@\n+2004-06-02  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR tree-optimization/14042\n+\tPR tree-optimization/14729\n+\tPR tree-optimization/14736\n+\t* tree-ssa.c: Check the type which the pointer points to\n+\tinstead of the pointer types.\n+\n 2004-06-02  Kazu Hirata  <kazu@cs.umass.edu>\n \n \tPR tree-optimization/15738."}, {"sha": "4f4dd345151b6c96a4ba767eaeeb44c22d5c661b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3facc4b61545614e75b4fb852a72bbc80554705b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3facc4b61545614e75b4fb852a72bbc80554705b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3facc4b61545614e75b4fb852a72bbc80554705b", "patch": "@@ -1,3 +1,14 @@\n+2004-06-02  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR tree-optimization/14736\n+\t* g++.dg/tree-ssa/ssa-cast-1.C: New Test.\n+\t\n+\tPR tree-optimization/14042\n+\t* g++.dg/tree-ssa/ssa-sra-1.C: New Test.\n+\n+\tPR tree-optimization/14729\n+\t* g++.dg/tree-ssa/ssa-sra-2.C: New Test.\n+\n 2004-06-02  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/15557"}, {"sha": "b8015870a22e496be2828cffa63d0d811e48efb8", "filename": "gcc/testsuite/g++.dg/tree-ssa/ssa-cast-1.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3facc4b61545614e75b4fb852a72bbc80554705b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-cast-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3facc4b61545614e75b4fb852a72bbc80554705b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-cast-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-cast-1.C?ref=3facc4b61545614e75b4fb852a72bbc80554705b", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-vars\" } */\n+\n+int &f(int *a)\n+{\n+  return *a;\n+}\n+\n+/* There should be no cast as pointer and references are\n+   considered the same type. */\n+/* { dg-final { scan-tree-dump-times \"\\\\(int &\\\\)\" 0 \"vars\"} } */\n+"}, {"sha": "cf6c520ce214e1324c560fdc75d5224a9ef40ff3", "filename": "gcc/testsuite/g++.dg/tree-ssa/ssa-sra-1.C", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3facc4b61545614e75b4fb852a72bbc80554705b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-sra-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3facc4b61545614e75b4fb852a72bbc80554705b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-sra-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-sra-1.C?ref=3facc4b61545614e75b4fb852a72bbc80554705b", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-vars-details\" } */\n+\n+void link_error();\n+\n+\n+struct State {\n+    int p0, p1, p2;\n+    inline State(){p0=0;p1=0;p2=0;}\n+    inline State(const State &s) {\n+\tp0 = s.p0;\n+\tp1 = s.p1;\n+\tp2 = s.p2;\n+    }\n+    \n+    inline void operator =(const State &s) {\n+\tp0 = s.p0;\n+\tp1 = s.p1;\n+\tp2 = s.p2;\n+    }\n+    \n+    inline void step(void) {\n+\tp0 = p1+p2;\n+\tp1 = p0*p1+p2;\n+\tp2 = p0-p2;\n+    }\n+};\n+\n+\n+inline void iterate_ok(State &inS1, State &inS2, unsigned int n)\n+{\n+    State s1 = inS1;\n+    for (unsigned int i = 0; i < n; i++) {\n+\ts1.step();\n+    }\n+    inS1 = s1;\n+}\n+\n+void temp()\n+{\n+  State s1;\n+  s1.p0 = 0;\n+  s1.p1 = 0;\n+  s1.p2 = 0;\n+  State s2;\n+  s2.p0 = 0;\n+  s2.p1 = 0;\n+  s2.p2 = 0;\n+  iterate_ok (s1, s2, 1);\n+  if (s1.p0)\n+   link_error();\n+  if (s1.p0)\n+   link_error();\n+  if (s1.p0)\n+   link_error();\n+}\n+\n+/* We should removed the casts from pointers to references and caused SRA to happen.  */\n+\n+/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"vars\"} } */"}, {"sha": "0d63752096923f77c9f6ed9d4a654b48e03ed6d7", "filename": "gcc/testsuite/g++.dg/tree-ssa/ssa-sra-2.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3facc4b61545614e75b4fb852a72bbc80554705b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-sra-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3facc4b61545614e75b4fb852a72bbc80554705b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-sra-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-sra-2.C?ref=3facc4b61545614e75b4fb852a72bbc80554705b", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-vars-details\" } */\n+\n+void link_error();\n+\n+struct OOf {\n+        int value;\n+        OOf() {value = 0;}\n+};\n+inline OOf operator+(OOf op1, OOf op2)\n+{\n+        OOf f;\n+        f.value = op1.value + op2.value;\n+        return f;\n+}\n+inline OOf operator*(OOf op1, OOf op2)\n+{\n+        OOf f;\n+        f.value = op1.value * op2.value;\n+        return f;\n+}\n+inline OOf operator-(OOf op1, OOf op2)\n+{\n+        OOf f;\n+        f.value = op1.value - op2.value;\n+        return f;\n+}\n+inline OOf test_func(\n+        OOf a,\n+        OOf b,\n+        OOf c\n+)\n+{\n+        OOf d, e;\n+        OOf result;\n+        d = a * b + b * c;\n+        e = a * c - b * d;\n+        result = d * e;\n+        return result;\n+}\n+\n+void test()\n+{\n+  OOf a, b, c;\n+  OOf d = test_func (a,b,c);\n+  if (d.value)\n+    link_error();\n+}\n+\n+/* We should removed the casts from pointers to references and caused SRA to happen.  */\n+/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"vars\"} } */"}, {"sha": "99e2cb64dfd7309e4403b870b5328f95a88ecead", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3facc4b61545614e75b4fb852a72bbc80554705b/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3facc4b61545614e75b4fb852a72bbc80554705b/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=3facc4b61545614e75b4fb852a72bbc80554705b", "patch": "@@ -555,7 +555,8 @@ tree_ssa_useless_type_conversion_1 (tree outer_type, tree inner_type)\n      so strip conversions that just switch between them.  */\n   else if (POINTER_TYPE_P (inner_type)\n            && POINTER_TYPE_P (outer_type)\n-           && lang_hooks.types_compatible_p (inner_type, outer_type))\n+           && lang_hooks.types_compatible_p (TREE_TYPE (inner_type),\n+\t\t\t\t\t     TREE_TYPE (outer_type)))\n     return true;\n \n   /* If both the inner and outer types are integral types, then the"}]}