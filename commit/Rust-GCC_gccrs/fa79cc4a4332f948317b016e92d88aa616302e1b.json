{"sha": "fa79cc4a4332f948317b016e92d88aa616302e1b", "node_id": "C_kwDOANBUbNoAKGZhNzljYzRhNDMzMmY5NDgzMTdiMDE2ZTkyZDg4YWE2MTYzMDJlMWI", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2022-04-01T03:34:57Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2022-04-01T03:34:57Z"}, "message": "Test for linking for arm/size-optimization-ieee-[123].c\n\nThese tests require a target that supports arm soft-float.  The\nproblem is that the test checks for compile-time soft-float support,\nbut they may hit a problem when the linker complains that it can't\ncombine the testcase's object file with hard-float init files and\ntarget system libraries.\n\nI don't see that the tests actually require linking, and they could be\nsimplified to dg-do assemble, but I figured a link test for soft-float\nsupport could be useful, so I added that, and adjusted the tests to\nrequire it instead.\n\n\nfor  gcc/testsuite/ChangeLog\n\n\t* lib/target-supports.exp\n\t(check_effective_target_arm_soft_ok_link): New.\n\t* gcc.target/arm/size-optimization-ieee-1.c: Use it.\n\t* gcc.target/arm/size-optimization-ieee-2.c: Likewise.\n\t* gcc.target/arm/size-optimization-ieee-3.c: Likewise.", "tree": {"sha": "a8e024da24ae664c0e6d4ac9974cdc266b390e55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8e024da24ae664c0e6d4ac9974cdc266b390e55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa79cc4a4332f948317b016e92d88aa616302e1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa79cc4a4332f948317b016e92d88aa616302e1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa79cc4a4332f948317b016e92d88aa616302e1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa79cc4a4332f948317b016e92d88aa616302e1b/comments", "author": null, "committer": null, "parents": [{"sha": "57ad4462decf18d2548d4a813698ee8fcfb24b2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57ad4462decf18d2548d4a813698ee8fcfb24b2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57ad4462decf18d2548d4a813698ee8fcfb24b2f"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "9af2c6e102071d84d118ee1db6f23580eff2c1c2", "filename": "gcc/testsuite/gcc.target/arm/size-optimization-ieee-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa79cc4a4332f948317b016e92d88aa616302e1b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsize-optimization-ieee-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa79cc4a4332f948317b016e92d88aa616302e1b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsize-optimization-ieee-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsize-optimization-ieee-1.c?ref=fa79cc4a4332f948317b016e92d88aa616302e1b", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do link { target arm_soft_ok } } */\n+/* { dg-do link { target arm_soft_ok_link } } */\n /* { dg-skip-if \"Feature is -mfloat-abi=soft only\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=soft\" } } */\n /* { dg-options \"-mfloat-abi=soft\" } */\n "}, {"sha": "e78a7ada62eb71e06da92357155f04c0c6dfff98", "filename": "gcc/testsuite/gcc.target/arm/size-optimization-ieee-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa79cc4a4332f948317b016e92d88aa616302e1b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsize-optimization-ieee-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa79cc4a4332f948317b016e92d88aa616302e1b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsize-optimization-ieee-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsize-optimization-ieee-2.c?ref=fa79cc4a4332f948317b016e92d88aa616302e1b", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do link { target arm_soft_ok } } */\n+/* { dg-do link { target arm_soft_ok_link } } */\n /* { dg-skip-if \"Feature is -mfloat-abi=soft only\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=soft\" } } */\n /* { dg-options \"-mfloat-abi=soft\" } */\n "}, {"sha": "bb9ccefda5e95454b7cc83d59978bd4abad97052", "filename": "gcc/testsuite/gcc.target/arm/size-optimization-ieee-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa79cc4a4332f948317b016e92d88aa616302e1b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsize-optimization-ieee-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa79cc4a4332f948317b016e92d88aa616302e1b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsize-optimization-ieee-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsize-optimization-ieee-3.c?ref=fa79cc4a4332f948317b016e92d88aa616302e1b", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do link { target arm_soft_ok } } */\n+/* { dg-do link { target arm_soft_ok_link } } */\n /* { dg-skip-if \"Feature is -mfloat-abi=soft only\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=soft\" } } */\n /* { dg-options \"-mfloat-abi=soft\" } */\n "}, {"sha": "ff8edbd3e17764ba12f5889ed8295a60fe1a7ffe", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa79cc4a4332f948317b016e92d88aa616302e1b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa79cc4a4332f948317b016e92d88aa616302e1b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=fa79cc4a4332f948317b016e92d88aa616302e1b", "patch": "@@ -3935,6 +3935,18 @@ proc check_effective_target_arm_soft_ok { } {\n \t} \"-mfloat-abi=soft\"]\n }\n \n+# Return 1 if this is an ARM target supporting -mfloat-abi=soft even\n+# for linking.  Some multilibs may be incompatible with this option,\n+# and some linkers may reject incompatible options.\n+\n+proc check_effective_target_arm_soft_ok_link { } {\n+    return [check_no_compiler_messages arm_soft_ok_link executable {\n+\t#include <stdint.h>\n+\tint dummy;\n+\tint main (void) { return 0; }\n+\t} \"-mfloat-abi=soft\"]\n+}\n+\n # Return 1 if this is an ARM target supporting -mfpu=vfp with an\n # appropriate abi.\n "}]}