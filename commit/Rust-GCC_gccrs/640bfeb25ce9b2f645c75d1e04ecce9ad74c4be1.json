{"sha": "640bfeb25ce9b2f645c75d1e04ecce9ad74c4be1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQwYmZlYjI1Y2U5YjJmNjQ1Yzc1ZDFlMDRlY2NlOWFkNzRjNGJlMQ==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2013-05-13T09:30:50Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2013-05-13T09:30:50Z"}, "message": "tree-vect-generic.c (uniform_vector_p): Move ...\n\n2013-05-13  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* tree-vect-generic.c (uniform_vector_p): Move ...\n\t* tree.c (uniform_vector_p): ... here.\n\t* tree.h (uniform_vector_p): Declare it.\n\t* fold-const.c (fold_binary_loc) <shift>: Turn the second argument\n\tinto a scalar.\n\ngcc/testsuite/\n\t* gcc.dg/vector-shift-2.c: New testcase.\n\nFrom-SVN: r198819", "tree": {"sha": "ed915c07d5e51d4f597a85fe3b3ee5781b72abfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed915c07d5e51d4f597a85fe3b3ee5781b72abfd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/640bfeb25ce9b2f645c75d1e04ecce9ad74c4be1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/640bfeb25ce9b2f645c75d1e04ecce9ad74c4be1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/640bfeb25ce9b2f645c75d1e04ecce9ad74c4be1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/640bfeb25ce9b2f645c75d1e04ecce9ad74c4be1/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "198fe1bfebf81e2a13b223bedcb41ed34d426862", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/198fe1bfebf81e2a13b223bedcb41ed34d426862", "html_url": "https://github.com/Rust-GCC/gccrs/commit/198fe1bfebf81e2a13b223bedcb41ed34d426862"}], "stats": {"total": 130, "additions": 84, "deletions": 46}, "files": [{"sha": "945f525ead0be0e8b2df7bf4dba7a41bb6c22c0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640bfeb25ce9b2f645c75d1e04ecce9ad74c4be1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640bfeb25ce9b2f645c75d1e04ecce9ad74c4be1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=640bfeb25ce9b2f645c75d1e04ecce9ad74c4be1", "patch": "@@ -1,3 +1,11 @@\n+2013-05-13  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* tree-vect-generic.c (uniform_vector_p): Move ...\n+\t* tree.c (uniform_vector_p): ... here.\n+\t* tree.h (uniform_vector_p): Declare it.\n+\t* fold-const.c (fold_binary_loc) <shift>: Turn the second argument\n+\tinto a scalar.\n+\n 2013-05-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/57230"}, {"sha": "cbd34452cfa610208687a128ef82341b51a8012b", "filename": "gcc/fold-const.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640bfeb25ce9b2f645c75d1e04ecce9ad74c4be1/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640bfeb25ce9b2f645c75d1e04ecce9ad74c4be1/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=640bfeb25ce9b2f645c75d1e04ecce9ad74c4be1", "patch": "@@ -12409,6 +12409,12 @@ fold_binary_loc (location_t loc,\n       if (integer_zerop (arg0))\n \treturn omit_one_operand_loc (loc, type, arg0, arg1);\n \n+      /* Prefer vector1 << scalar to vector1 << vector2\n+\t if vector2 is uniform.  */\n+      if (VECTOR_TYPE_P (TREE_TYPE (arg1))\n+\t  && (tem = uniform_vector_p (arg1)) != NULL_TREE)\n+\treturn fold_build2_loc (loc, code, type, op0, tem);\n+\n       /* Since negative shift count is not well-defined,\n \t don't try to compute it in the compiler.  */\n       if (TREE_CODE (arg1) == INTEGER_CST && tree_int_cst_sgn (arg1) < 0)"}, {"sha": "1e59972c041a3433d55e80b4f17573ae72e25d5a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640bfeb25ce9b2f645c75d1e04ecce9ad74c4be1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640bfeb25ce9b2f645c75d1e04ecce9ad74c4be1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=640bfeb25ce9b2f645c75d1e04ecce9ad74c4be1", "patch": "@@ -1,3 +1,7 @@\n+2013-05-13  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* gcc.dg/vector-shift-2.c: New testcase.\n+\n 2013-05-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/57230"}, {"sha": "283429099c928f31b821ba48c0d2c7c17c1dc54a", "filename": "gcc/testsuite/gcc.dg/vector-shift-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640bfeb25ce9b2f645c75d1e04ecce9ad74c4be1/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-shift-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640bfeb25ce9b2f645c75d1e04ecce9ad74c4be1/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-shift-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-shift-2.c?ref=640bfeb25ce9b2f645c75d1e04ecce9ad74c4be1", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-ccp1\" } */\n+\n+typedef unsigned vec __attribute__ ((vector_size (16)));\n+void\n+f (vec *a)\n+{\n+  vec s = { 5, 5, 5, 5 };\n+  *a = *a << s;\n+}\n+\n+/* { dg-final { scan-tree-dump \"<< 5\" \"ccp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"ccp1\" } } */"}, {"sha": "516bd6f954c628349017dd97560b1e1a2f875809", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640bfeb25ce9b2f645c75d1e04ecce9ad74c4be1/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640bfeb25ce9b2f645c75d1e04ecce9ad74c4be1/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=640bfeb25ce9b2f645c75d1e04ecce9ad74c4be1", "patch": "@@ -326,52 +326,6 @@ expand_vector_addition (gimple_stmt_iterator *gsi,\n \t\t\t\t    a, b, code);\n }\n \n-/* Check if vector VEC consists of all the equal elements and\n-   that the number of elements corresponds to the type of VEC.\n-   The function returns first element of the vector\n-   or NULL_TREE if the vector is not uniform.  */\n-static tree\n-uniform_vector_p (tree vec)\n-{\n-  tree first, t;\n-  unsigned i;\n-\n-  if (vec == NULL_TREE)\n-    return NULL_TREE;\n-\n-  if (TREE_CODE (vec) == VECTOR_CST)\n-    {\n-      first = VECTOR_CST_ELT (vec, 0);\n-      for (i = 1; i < VECTOR_CST_NELTS (vec); ++i)\n-\tif (!operand_equal_p (first, VECTOR_CST_ELT (vec, i), 0))\n-\t  return NULL_TREE;\n-\n-      return first;\n-    }\n-\n-  else if (TREE_CODE (vec) == CONSTRUCTOR)\n-    {\n-      first = error_mark_node;\n-\n-      FOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (vec), i, t)\n-        {\n-          if (i == 0)\n-            {\n-              first = t;\n-              continue;\n-            }\n-\t  if (!operand_equal_p (first, t, 0))\n-\t    return NULL_TREE;\n-        }\n-      if (i != TYPE_VECTOR_SUBPARTS (TREE_TYPE (vec)))\n-\treturn NULL_TREE;\n-\n-      return first;\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n /* Try to expand vector comparison expression OP0 CODE OP1 by\n    querying optab if the following expression:\n \tVEC_COND_EXPR< OP0 CODE OP1, {-1,...}, {0,...}>"}, {"sha": "d4e85e19ccd09de8473bbcf4c53c32a87c7f7eab", "filename": "gcc/tree.c", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640bfeb25ce9b2f645c75d1e04ecce9ad74c4be1/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640bfeb25ce9b2f645c75d1e04ecce9ad74c4be1/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=640bfeb25ce9b2f645c75d1e04ecce9ad74c4be1", "patch": "@@ -10133,6 +10133,54 @@ initializer_zerop (const_tree init)\n     }\n }\n \n+/* Check if vector VEC consists of all the equal elements and\n+   that the number of elements corresponds to the type of VEC.\n+   The function returns first element of the vector\n+   or NULL_TREE if the vector is not uniform.  */\n+tree\n+uniform_vector_p (const_tree vec)\n+{\n+  tree first, t;\n+  unsigned i;\n+\n+  if (vec == NULL_TREE)\n+    return NULL_TREE;\n+\n+  gcc_assert (VECTOR_TYPE_P (TREE_TYPE (vec)));\n+\n+  if (TREE_CODE (vec) == VECTOR_CST)\n+    {\n+      first = VECTOR_CST_ELT (vec, 0);\n+      for (i = 1; i < VECTOR_CST_NELTS (vec); ++i)\n+\tif (!operand_equal_p (first, VECTOR_CST_ELT (vec, i), 0))\n+\t  return NULL_TREE;\n+\n+      return first;\n+    }\n+\n+  else if (TREE_CODE (vec) == CONSTRUCTOR)\n+    {\n+      first = error_mark_node;\n+\n+      FOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (vec), i, t)\n+        {\n+          if (i == 0)\n+            {\n+              first = t;\n+              continue;\n+            }\n+\t  if (!operand_equal_p (first, t, 0))\n+\t    return NULL_TREE;\n+        }\n+      if (i != TYPE_VECTOR_SUBPARTS (TREE_TYPE (vec)))\n+\treturn NULL_TREE;\n+\n+      return first;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Build an empty statement at location LOC.  */\n \n tree"}, {"sha": "89c088c1a97404d742a237da1e6ac44a756d0769", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640bfeb25ce9b2f645c75d1e04ecce9ad74c4be1/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640bfeb25ce9b2f645c75d1e04ecce9ad74c4be1/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=640bfeb25ce9b2f645c75d1e04ecce9ad74c4be1", "patch": "@@ -5291,6 +5291,11 @@ extern tree first_field (const_tree);\n \n extern bool initializer_zerop (const_tree);\n \n+/* Given a vector VEC, return its first element if all elements are\n+   the same.  Otherwise return NULL_TREE.  */\n+\n+extern tree uniform_vector_p (const_tree);\n+\n /* Given a CONSTRUCTOR CTOR, return the element values as a vector.  */\n \n extern vec<tree, va_gc> *ctor_to_vec (tree);"}]}