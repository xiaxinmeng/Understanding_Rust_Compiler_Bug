{"sha": "c77c97664f9f3739a5d2ec78042aaad769b4bdeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc3Yzk3NjY0ZjlmMzczOWE1ZDJlYzc4MDQyYWFhZDc2OWI0YmRlYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-11T22:39:23Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-11T22:39:23Z"}, "message": "(gen_input_reload): If reg-reg add is not valid, try copying reg-reg\nand adding reg-int.\n\nFrom-SVN: r6530", "tree": {"sha": "f4a7b157bb52e1279ecaf1221c8c39ecda54da59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4a7b157bb52e1279ecaf1221c8c39ecda54da59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c77c97664f9f3739a5d2ec78042aaad769b4bdeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77c97664f9f3739a5d2ec78042aaad769b4bdeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c77c97664f9f3739a5d2ec78042aaad769b4bdeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77c97664f9f3739a5d2ec78042aaad769b4bdeb/comments", "author": null, "committer": null, "parents": [{"sha": "98aad286690ddafff79198df072b22cc1f75782f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98aad286690ddafff79198df072b22cc1f75782f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98aad286690ddafff79198df072b22cc1f75782f"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "503ebe3ee91ccae9b670371b355fee7584a57703", "filename": "gcc/reload1.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77c97664f9f3739a5d2ec78042aaad769b4bdeb/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77c97664f9f3739a5d2ec78042aaad769b4bdeb/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=c77c97664f9f3739a5d2ec78042aaad769b4bdeb", "patch": "@@ -6544,7 +6544,27 @@ gen_input_reload (reloadreg, in, opnum, type)\n       if (rtx_equal_p (op0, op1))\n \top1 = reloadreg;\n \n-      emit_insn (gen_add2_insn (reloadreg, op1));\n+      insn = emit_insn (gen_add2_insn (reloadreg, op1));\n+\n+      /* If that failed, copy the address register to the reload register.\n+\t Then add the constant to the reload register. */\n+\n+      code = recog_memoized (insn);\n+\n+      if (code >= 0)\n+\t{\n+\t  insn_extract (insn);\n+\t  /* We want constrain operands to treat this insn strictly in\n+\t     its validity determination, i.e., the way it would after reload\n+\t     has completed.  */\n+\t  if (constrain_operands (code, 1))\n+\t    return insn;\n+\t}\n+\n+      delete_insns_since (last);\n+\n+      emit_insn (gen_move_insn (reloadreg, op1));\n+      emit_insn (gen_add2_insn (reloadreg, op0));\n     }\n \n #ifdef SECONDARY_MEMORY_NEEDED"}]}