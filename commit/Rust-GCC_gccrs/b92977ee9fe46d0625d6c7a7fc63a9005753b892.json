{"sha": "b92977ee9fe46d0625d6c7a7fc63a9005753b892", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkyOTc3ZWU5ZmU0NmQwNjI1ZDZjN2E3ZmM2M2E5MDA1NzUzYjg5Mg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2017-12-11T22:36:07Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2017-12-11T22:36:07Z"}, "message": "[PR80693] drop value of parallel SETs dropped by combine\n\nWhen combine drops a REG_UNUSED SET in a parallel, we have to clear\ncached values, so that, even if the REGs remain used (e.g. because\nthey were referenced in the used SET_SRC), we will not use properties\nof the dropped modified value as if they applied to the preserved\noriginal one.\n\nWe fail to adjust REG_N_SETS.\n\nfor  gcc/ChangeLog\n\n\tPR rtl-optimization/80693\n\tPR rtl-optimization/81019\n\tPR rtl-optimization/81020\n\t* combine.c (distribute_notes): Reset any REG_UNUSED REGs that\n\tare not mentioned in i3.  Place the REG_UNUSED note on i2,\n\tpossibly modified to REG_DEAD, if it did not originate in i3.\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR rtl-optimization/80693\n\tPR rtl-optimization/81019\n\tPR rtl-optimization/81020\n\t* gcc.dg/pr80693.c: New.\n\t* gcc.dg/pr81019.c: New.\n\nFrom-SVN: r255554", "tree": {"sha": "154fb2776aa4536d105f810a07b6ca6d166a3744", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/154fb2776aa4536d105f810a07b6ca6d166a3744"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b92977ee9fe46d0625d6c7a7fc63a9005753b892", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b92977ee9fe46d0625d6c7a7fc63a9005753b892", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b92977ee9fe46d0625d6c7a7fc63a9005753b892", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b92977ee9fe46d0625d6c7a7fc63a9005753b892/comments", "author": null, "committer": null, "parents": [{"sha": "0a2c51498215e3e881b40bab388242390a8b4678", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a2c51498215e3e881b40bab388242390a8b4678", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a2c51498215e3e881b40bab388242390a8b4678"}], "stats": {"total": 110, "additions": 110, "deletions": 0}, "files": [{"sha": "04fbd66e292b31513ce67d1de2611383c392c469", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b92977ee9fe46d0625d6c7a7fc63a9005753b892/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b92977ee9fe46d0625d6c7a7fc63a9005753b892/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b92977ee9fe46d0625d6c7a7fc63a9005753b892", "patch": "@@ -1,3 +1,12 @@\n+2017-12-11  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR rtl-optimization/80693\n+\tPR rtl-optimization/81019\n+\tPR rtl-optimization/81020\n+\t* combine.c (distribute_notes): Reset any REG_UNUSED REGs that\n+\tare not mentioned in i3.  Place the REG_UNUSED note on i2,\n+\tpossibly modified to REG_DEAD, if it did not originate in i3.\n+\n 2017-12-11  Jakub Jelinek  <jakub@redhat.com>\n \n \t* recog.c (store_data_bypass_p_1): New function."}, {"sha": "7f10c67bf0f615b39f097605543f6c884c84552e", "filename": "gcc/combine.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b92977ee9fe46d0625d6c7a7fc63a9005753b892/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b92977ee9fe46d0625d6c7a7fc63a9005753b892/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=b92977ee9fe46d0625d6c7a7fc63a9005753b892", "patch": "@@ -14219,6 +14219,46 @@ distribute_notes (rtx notes, rtx_insn *from_insn, rtx_insn *i3, rtx_insn *i2,\n \t      PUT_REG_NOTE_KIND (note, REG_DEAD);\n \t      place = i3;\n \t    }\n+\n+\t  /* A SET or CLOBBER of the REG_UNUSED reg has been removed,\n+\t     but we can't tell which at this point.  We must reset any\n+\t     expectations we had about the value that was previously\n+\t     stored in the reg.  ??? Ideally, we'd adjust REG_N_SETS\n+\t     and, if appropriate, restore its previous value, but we\n+\t     don't have enough information for that at this point.  */\n+\t  else\n+\t    {\n+\t      record_value_for_reg (XEXP (note, 0), NULL, NULL_RTX);\n+\n+\t      /* Otherwise, if this register is now referenced in i2\n+\t\t then the register used to be modified in one of the\n+\t\t original insns.  If it was i3 (say, in an unused\n+\t\t parallel), it's now completely gone, so the note can\n+\t\t be discarded.  But if it was modified in i2, i1 or i0\n+\t\t and we still reference it in i2, then we're\n+\t\t referencing the previous value, and since the\n+\t\t register was modified and REG_UNUSED, we know that\n+\t\t the previous value is now dead.  So, if we only\n+\t\t reference the register in i2, we change the note to\n+\t\t REG_DEAD, to reflect the previous value.  However, if\n+\t\t we're also setting or clobbering the register as\n+\t\t scratch, we know (because the register was not\n+\t\t referenced in i3) that it's unused, just as it was\n+\t\t unused before, and we place the note in i2.  */\n+\t      if (from_insn != i3 && i2 && INSN_P (i2)\n+\t\t  && reg_referenced_p (XEXP (note, 0), PATTERN (i2)))\n+\t\t{\n+\t\t  if (!reg_set_p (XEXP (note, 0), PATTERN (i2)))\n+\t\t    PUT_REG_NOTE_KIND (note, REG_DEAD);\n+\t\t  if (! (REG_P (XEXP (note, 0))\n+\t\t\t ? find_regno_note (i2, REG_NOTE_KIND (note),\n+\t\t\t\t\t    REGNO (XEXP (note, 0)))\n+\t\t\t : find_reg_note (i2, REG_NOTE_KIND (note),\n+\t\t\t\t\t  XEXP (note, 0))))\n+\t\t    place = i2;\n+\t\t}\n+\t    }\n+\n \t  break;\n \n \tcase REG_EQUAL:"}, {"sha": "5cdd4930812038a316dac9324fafdee2ba031635", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b92977ee9fe46d0625d6c7a7fc63a9005753b892/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b92977ee9fe46d0625d6c7a7fc63a9005753b892/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b92977ee9fe46d0625d6c7a7fc63a9005753b892", "patch": "@@ -1,3 +1,11 @@\n+2017-12-11  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR rtl-optimization/80693\n+\tPR rtl-optimization/81019\n+\tPR rtl-optimization/81020\n+\t* gcc.dg/pr80693.c: New.\n+\t* gcc.dg/pr81019.c: New.\n+\n 2017-12-11  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR rtl-optimization/83361"}, {"sha": "507177167e58a872e78fac505947f18526f7676b", "filename": "gcc/testsuite/gcc.dg/pr80693.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b92977ee9fe46d0625d6c7a7fc63a9005753b892/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80693.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b92977ee9fe46d0625d6c7a7fc63a9005753b892/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80693.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80693.c?ref=b92977ee9fe46d0625d6c7a7fc63a9005753b892", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O -fno-tree-coalesce-vars\" } */\n+typedef unsigned char u8;\n+typedef unsigned short u16;\n+typedef unsigned u32;\n+typedef unsigned long long u64;\n+\n+static u64 __attribute__((noinline, noclone))\n+foo(u8 u8_0, u16 u16_0, u32 u32_0, u64 u64_0,  u16 u16_1)\n+{\n+  u16_1 += 0x1051;\n+  u16_1 &= 1;\n+  u8_0 <<= u32_0 & 7;\n+  u16_0 -= !u16_1;\n+  u16_1 >>= ((u16)-u8_0 != 0xff);\n+  return u8_0 + u16_0 + u64_0 + u16_1;\n+}\n+\n+int\n+main (void)\n+{\n+  u64 x = foo(1, 1, 0xffff, 0, 1);\n+  if (x != 0x80)\n+    __builtin_abort();\n+  return 0;\n+}"}, {"sha": "cf13bfa9275860e02f443c21944d68dc62319f2a", "filename": "gcc/testsuite/gcc.dg/pr81019.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b92977ee9fe46d0625d6c7a7fc63a9005753b892/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81019.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b92977ee9fe46d0625d6c7a7fc63a9005753b892/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81019.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81019.c?ref=b92977ee9fe46d0625d6c7a7fc63a9005753b892", "patch": "@@ -0,0 +1,27 @@\n+/* PR rtl-optimization/81019 */\n+/* { dg-do run } */\n+/* { dg-options \"-O -fno-tree-ccp\" } */\n+\n+unsigned long long __attribute__((noinline, noclone))\n+foo (unsigned char a, unsigned short b, unsigned c, unsigned long long d,\n+     unsigned char e, unsigned short f, unsigned g, unsigned long long h)\n+{\n+  g = e;\n+  c &= 0 < d;\n+  b *= d;\n+  g ^= -1;\n+  g &= 1;\n+  c |= 1;\n+  a -= 0 < g;\n+  g >>= 1;\n+  f = b | (f >> b);\n+  return a + c + d + f + g + h;\n+}\n+\n+int\n+main (void)\n+{\n+  if (foo (0, 0, 0, 0, 0, 0, 0, 0) != 0x100)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}