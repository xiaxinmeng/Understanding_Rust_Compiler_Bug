{"sha": "02e2a7d8ef8aaeca05aba0e8ca15ba40ec1f3a53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJlMmE3ZDhlZjhhYWVjYTA1YWJhMGU4Y2ExNWJhNDBlYzFmM2E1Mw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-10-24T13:18:52Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-10-24T13:18:52Z"}, "message": "Refactor std::basic_string_view members and add noexcept\n\n\t* include/bits/string_view.tcc (find_first_of, find_last_of)\n\t(find_first_not_of, find_last_not_of): Add noexcept.\n\t* include/std/string_view (basic_string_view(const _CharT*))\n\t(basic_string_view(const _CharT*, size_type))\n\t(front, back, remove_prefix, remove_suffix, find, rfind)\n\t(find_first_of, find_first_not_of): Add noexcept.\n\t(at(size_type), _S_compare(size_type, size_type)): Replace conditional\n\texpressions with if statements.\n\t(copy(_CharT*, size_type, size_type), substr(size_type, size_type)):\n\tUse _M_check for length checks.\n\t(compare(basic_string_view)): Reformat.\n\t(_M_check(size_type, const char)): Add noexcept(false).\n\t(_M_limit(size_type, size_type)): Use noexcept not _GLIBCXX_NOEXCEPT.\n\nFrom-SVN: r254044", "tree": {"sha": "5269736effab23808c7dc9cb5e8db39779e22b55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5269736effab23808c7dc9cb5e8db39779e22b55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02e2a7d8ef8aaeca05aba0e8ca15ba40ec1f3a53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02e2a7d8ef8aaeca05aba0e8ca15ba40ec1f3a53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02e2a7d8ef8aaeca05aba0e8ca15ba40ec1f3a53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02e2a7d8ef8aaeca05aba0e8ca15ba40ec1f3a53/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c58a9f350aa76af2bc1a826f2eac371da9edd04e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c58a9f350aa76af2bc1a826f2eac371da9edd04e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c58a9f350aa76af2bc1a826f2eac371da9edd04e"}], "stats": {"total": 113, "additions": 61, "deletions": 52}, "files": [{"sha": "cbb4f8c96c8d5f7440f3ca2e5c5c029f9cf5531b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02e2a7d8ef8aaeca05aba0e8ca15ba40ec1f3a53/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02e2a7d8ef8aaeca05aba0e8ca15ba40ec1f3a53/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=02e2a7d8ef8aaeca05aba0e8ca15ba40ec1f3a53", "patch": "@@ -1,5 +1,19 @@\n 2017-10-24  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/string_view.tcc (find_first_of, find_last_of)\n+\t(find_first_not_of, find_last_not_of): Add noexcept.\n+\t* include/std/string_view (basic_string_view(const _CharT*))\n+\t(basic_string_view(const _CharT*, size_type))\n+\t(front, back, remove_prefix, remove_suffix, find, rfind)\n+\t(find_first_of, find_first_not_of): Add noexcept.\n+\t(at(size_type), _S_compare(size_type, size_type)): Replace conditional\n+\texpressions with if statements.\n+\t(copy(_CharT*, size_type, size_type), substr(size_type, size_type)):\n+\tUse _M_check for length checks.\n+\t(compare(basic_string_view)): Reformat.\n+\t(_M_check(size_type, const char)): Add noexcept(false).\n+\t(_M_limit(size_type, size_type)): Use noexcept not _GLIBCXX_NOEXCEPT.\n+\n \tPR libstdc++/82685\n \t* include/experimental/string_view (operator\"\"sv): Add noexcept.\n \t* include/std/string_view (operator\"\"sv): Likewise."}, {"sha": "5c53c5843810c20954b544456b350d4bfc5ee31c", "filename": "libstdc++-v3/include/bits/string_view.tcc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02e2a7d8ef8aaeca05aba0e8ca15ba40ec1f3a53/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstring_view.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02e2a7d8ef8aaeca05aba0e8ca15ba40ec1f3a53/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstring_view.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstring_view.tcc?ref=02e2a7d8ef8aaeca05aba0e8ca15ba40ec1f3a53", "patch": "@@ -119,7 +119,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _CharT, typename _Traits>\n     constexpr typename basic_string_view<_CharT, _Traits>::size_type\n     basic_string_view<_CharT, _Traits>::\n-    find_first_of(const _CharT* __str, size_type __pos, size_type __n) const\n+    find_first_of(const _CharT* __str, size_type __pos,\n+\t\t  size_type __n) const noexcept\n     {\n       __glibcxx_requires_string_len(__str, __n);\n       for (; __n && __pos < this->_M_len; ++__pos)\n@@ -135,7 +136,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _CharT, typename _Traits>\n     constexpr typename basic_string_view<_CharT, _Traits>::size_type\n     basic_string_view<_CharT, _Traits>::\n-    find_last_of(const _CharT* __str, size_type __pos, size_type __n) const\n+    find_last_of(const _CharT* __str, size_type __pos,\n+\t\t size_type __n) const noexcept\n     {\n       __glibcxx_requires_string_len(__str, __n);\n       size_type __size = this->size();\n@@ -156,7 +158,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _CharT, typename _Traits>\n     constexpr typename basic_string_view<_CharT, _Traits>::size_type\n     basic_string_view<_CharT, _Traits>::\n-    find_first_not_of(const _CharT* __str, size_type __pos, size_type __n) const\n+    find_first_not_of(const _CharT* __str, size_type __pos,\n+\t\t      size_type __n) const noexcept\n     {\n       __glibcxx_requires_string_len(__str, __n);\n       for (; __pos < this->_M_len; ++__pos)\n@@ -179,7 +182,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _CharT, typename _Traits>\n     constexpr typename basic_string_view<_CharT, _Traits>::size_type\n     basic_string_view<_CharT, _Traits>::\n-    find_last_not_of(const _CharT* __str, size_type __pos, size_type __n) const\n+    find_last_not_of(const _CharT* __str, size_type __pos,\n+\t\t     size_type __n) const noexcept\n     {\n       __glibcxx_requires_string_len(__str, __n);\n       size_type __size = this->_M_len;"}, {"sha": "1900b8678412bf137148fe0f67b1e70a03702b73", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 39, "deletions": 48, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02e2a7d8ef8aaeca05aba0e8ca15ba40ec1f3a53/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02e2a7d8ef8aaeca05aba0e8ca15ba40ec1f3a53/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=02e2a7d8ef8aaeca05aba0e8ca15ba40ec1f3a53", "patch": "@@ -96,14 +96,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       constexpr basic_string_view(const basic_string_view&) noexcept = default;\n \n-      constexpr basic_string_view(const _CharT* __str)\n+      constexpr basic_string_view(const _CharT* __str) noexcept\n       : _M_len{__str == nullptr ? 0 : traits_type::length(__str)},\n \t_M_str{__str}\n       { }\n \n-      constexpr basic_string_view(const _CharT* __str, size_type __len)\n-      : _M_len{__len},\n-        _M_str{__str}\n+      constexpr\n+      basic_string_view(const _CharT* __str, size_type __len) noexcept\n+      : _M_len{__len}, _M_str{__str}\n       { }\n \n       constexpr basic_string_view&\n@@ -177,25 +177,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr const _CharT&\n       at(size_type __pos) const\n       {\n-\treturn __pos < this->_M_len\n-\t     ? *(this->_M_str + __pos)\n-\t     : (__throw_out_of_range_fmt(__N(\"basic_string_view::at: __pos \"\n-\t\t\t\t\t     \"(which is %zu) >= this->size() \"\n-\t\t\t\t\t     \"(which is %zu)\"),\n-\t\t\t\t\t __pos, this->size()),\n-\t\t*this->_M_str);\n+\tif (__pos >= _M_len)\n+\t  __throw_out_of_range_fmt(__N(\"basic_string_view::at: __pos \"\n+\t\t\t\t       \"(which is %zu) >= this->size() \"\n+\t\t\t\t       \"(which is %zu)\"), __pos, this->size());\n+\treturn *(this->_M_str + __pos);\n       }\n \n       constexpr const _CharT&\n-      front() const\n+      front() const noexcept\n       {\n \t// TODO: Assert to restore in a way compatible with the constexpr.\n \t// __glibcxx_assert(this->_M_len > 0);\n \treturn *this->_M_str;\n       }\n \n       constexpr const _CharT&\n-      back() const\n+      back() const noexcept\n       {\n \t// TODO: Assert to restore in a way compatible with the constexpr.\n \t// __glibcxx_assert(this->_M_len > 0);\n@@ -209,15 +207,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // [string.view.modifiers], modifiers:\n \n       constexpr void\n-      remove_prefix(size_type __n)\n+      remove_prefix(size_type __n) noexcept\n       {\n \t__glibcxx_assert(this->_M_len >= __n);\n \tthis->_M_str += __n;\n \tthis->_M_len -= __n;\n       }\n \n       constexpr void\n-      remove_suffix(size_type __n)\n+      remove_suffix(size_type __n) noexcept\n       { this->_M_len -= __n; }\n \n       constexpr void\n@@ -235,38 +233,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       copy(_CharT* __str, size_type __n, size_type __pos = 0) const\n       {\n \t__glibcxx_requires_string_len(__str, __n);\n-\tif (__pos > this->_M_len)\n-\t  __throw_out_of_range_fmt(__N(\"basic_string_view::copy: __pos \"\n-\t\t\t\t       \"(which is %zu) > this->size() \"\n-\t\t\t\t       \"(which is %zu)\"),\n-\t\t\t\t   __pos, this->size());\n-\tsize_type __rlen{std::min(__n, size_type{this->_M_len  - __pos})};\n+\t__pos = _M_check(__pos, \"basic_string_view::copy\");\n+\tconst size_type __rlen = std::min(__n, _M_len - __pos);\n \tfor (auto __begin = this->_M_str + __pos,\n \t     __end = __begin + __rlen; __begin != __end;)\n \t  *__str++ = *__begin++;\n \treturn __rlen;\n       }\n \n-\n-      // [string.view.ops], string operations:\n-\n       constexpr basic_string_view\n-      substr(size_type __pos, size_type __n=npos) const\n+      substr(size_type __pos, size_type __n = npos) const noexcept(false)\n       {\n-\treturn __pos <= this->_M_len\n-\t     ? basic_string_view{this->_M_str + __pos,\n-\t\t\t\tstd::min(__n, size_type{this->_M_len  - __pos})}\n-\t     : (__throw_out_of_range_fmt(__N(\"basic_string_view::substr: __pos \"\n-\t\t\t\t\t     \"(which is %zu) > this->size() \"\n-\t\t\t\t\t     \"(which is %zu)\"),\n-\t\t\t\t     __pos, this->size()), basic_string_view{});\n+\t__pos = _M_check(__pos, \"basic_string_view::substr\");\n+\tconst size_type __rlen = std::min(__n, _M_len - __pos);\n+\treturn basic_string_view{_M_str + __pos, __rlen};\n       }\n \n       constexpr int\n       compare(basic_string_view __str) const noexcept\n       {\n-\tint __ret = traits_type::compare(this->_M_str, __str._M_str,\n-\t\t\t\t\t std::min(this->_M_len, __str._M_len));\n+\tconst size_type __rlen = std::min(this->_M_len, __str._M_len);\n+\tint __ret = traits_type::compare(this->_M_str, __str._M_str, __rlen);\n \tif (__ret == 0)\n \t  __ret = _S_compare(this->_M_len, __str._M_len);\n \treturn __ret;\n@@ -279,7 +266,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr int\n       compare(size_type __pos1, size_type __n1,\n \t      basic_string_view __str, size_type __pos2, size_type __n2) const\n-      { return this->substr(__pos1, __n1).compare(__str.substr(__pos2, __n2)); }\n+      {\n+\treturn this->substr(__pos1, __n1).compare(__str.substr(__pos2, __n2));\n+      }\n \n       constexpr int\n       compare(const _CharT* __str) const noexcept\n@@ -291,7 +280,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       constexpr int\n       compare(size_type __pos1, size_type __n1,\n-\t      const _CharT* __str, size_type __n2) const\n+\t      const _CharT* __str, size_type __n2) const noexcept(false)\n       {\n \treturn this->substr(__pos1, __n1)\n \t\t   .compare(basic_string_view(__str, __n2));\n@@ -302,13 +291,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return this->find(__str._M_str, __pos, __str._M_len); }\n \n       constexpr size_type\n-      find(_CharT __c, size_type __pos=0) const noexcept;\n+      find(_CharT __c, size_type __pos = 0) const noexcept;\n \n       constexpr size_type\n       find(const _CharT* __str, size_type __pos, size_type __n) const noexcept;\n \n       constexpr size_type\n-      find(const _CharT* __str, size_type __pos=0) const noexcept\n+      find(const _CharT* __str, size_type __pos = 0) const noexcept\n       { return this->find(__str, __pos, traits_type::length(__str)); }\n \n       constexpr size_type\n@@ -350,7 +339,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return this->rfind(__c, __pos); }\n \n       constexpr size_type\n-      find_last_of(const _CharT* __str, size_type __pos, size_type __n) const;\n+      find_last_of(const _CharT* __str, size_type __pos,\n+\t\t   size_type __n) const noexcept;\n \n       constexpr size_type\n       find_last_of(const _CharT* __str, size_type __pos = npos) const noexcept\n@@ -366,7 +356,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       constexpr size_type\n       find_first_not_of(const _CharT* __str,\n-\t\t\tsize_type __pos, size_type __n) const;\n+\t\t\tsize_type __pos, size_type __n) const noexcept;\n \n       constexpr size_type\n       find_first_not_of(const _CharT* __str, size_type __pos = 0) const noexcept\n@@ -385,7 +375,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       constexpr size_type\n       find_last_not_of(const _CharT* __str,\n-\t\t       size_type __pos, size_type __n) const;\n+\t\t       size_type __pos, size_type __n) const noexcept;\n \n       constexpr size_type\n       find_last_not_of(const _CharT* __str,\n@@ -396,7 +386,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       constexpr size_type\n-      _M_check(size_type __pos, const char* __s) const\n+      _M_check(size_type __pos, const char* __s) const noexcept(false)\n       {\n \tif (__pos > this->size())\n \t  __throw_out_of_range_fmt(__N(\"%s: __pos (which is %zu) > \"\n@@ -407,7 +397,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // NB: _M_limit doesn't check for a bad __pos value.\n       constexpr size_type\n-      _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT\n+      _M_limit(size_type __pos, size_type __off) const noexcept\n       {\n \tconst bool __testoff =  __off < this->size() - __pos;\n \treturn __testoff ? __off : this->size() - __pos;\n@@ -418,11 +408,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static constexpr int\n       _S_compare(size_type __n1, size_type __n2) noexcept\n       {\n-\treturn difference_type{__n1 - __n2} > std::numeric_limits<int>::max()\n-\t     ? std::numeric_limits<int>::max()\n-\t     : difference_type{__n1 - __n2} < std::numeric_limits<int>::min()\n-\t     ? std::numeric_limits<int>::min()\n-\t     : static_cast<int>(difference_type{__n1 - __n2});\n+\tconst difference_type __diff{__n1 - __n2};\n+\tif (__diff > std::numeric_limits<int>::max())\n+\t  return std::numeric_limits<int>::max();\n+\tif (__diff < std::numeric_limits<int>::min())\n+\t  return std::numeric_limits<int>::min();\n+\treturn static_cast<int>(__diff);\n       }\n \n       size_t\t    _M_len;"}]}