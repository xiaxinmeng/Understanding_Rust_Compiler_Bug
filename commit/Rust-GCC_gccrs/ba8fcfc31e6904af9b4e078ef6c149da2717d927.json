{"sha": "ba8fcfc31e6904af9b4e078ef6c149da2717d927", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE4ZmNmYzMxZTY5MDRhZjliNGUwNzhlZjZjMTQ5ZGEyNzE3ZDkyNw==", "commit": {"author": {"name": "Bruce Korb", "email": "bkorb@gnu.org", "date": "2000-05-14T19:29:02Z"}, "committer": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "2000-05-14T19:29:02Z"}, "message": "implement \"wrap\" c_fix\n\nFrom-SVN: r33892", "tree": {"sha": "231efed7f86f3c607150a79d4851d974b7ee3602", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/231efed7f86f3c607150a79d4851d974b7ee3602"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba8fcfc31e6904af9b4e078ef6c149da2717d927", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba8fcfc31e6904af9b4e078ef6c149da2717d927", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba8fcfc31e6904af9b4e078ef6c149da2717d927", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba8fcfc31e6904af9b4e078ef6c149da2717d927/comments", "author": {"login": "brkorb", "id": 1242936, "node_id": "MDQ6VXNlcjEyNDI5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1242936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brkorb", "html_url": "https://github.com/brkorb", "followers_url": "https://api.github.com/users/brkorb/followers", "following_url": "https://api.github.com/users/brkorb/following{/other_user}", "gists_url": "https://api.github.com/users/brkorb/gists{/gist_id}", "starred_url": "https://api.github.com/users/brkorb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brkorb/subscriptions", "organizations_url": "https://api.github.com/users/brkorb/orgs", "repos_url": "https://api.github.com/users/brkorb/repos", "events_url": "https://api.github.com/users/brkorb/events{/privacy}", "received_events_url": "https://api.github.com/users/brkorb/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3e6fa9ac7b483cd01a6d69439fce15c2fa71cc40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e6fa9ac7b483cd01a6d69439fce15c2fa71cc40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e6fa9ac7b483cd01a6d69439fce15c2fa71cc40"}], "stats": {"total": 373, "additions": 264, "deletions": 109}, "files": [{"sha": "0acd8dba1a1fb3d372883b6a646b9c4c7254da97", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8fcfc31e6904af9b4e078ef6c149da2717d927/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8fcfc31e6904af9b4e078ef6c149da2717d927/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba8fcfc31e6904af9b4e078ef6c149da2717d927", "patch": "@@ -1,3 +1,14 @@\n+2000-05-14  Bruce Korb  <bkorb@gnu.org>\n+\n+\t* fixinc/fixfixes.c(wrap_fix): new fix - inserts text before\n+\tand/or after current text of file\n+\t* fixinc/fixlib.c(must_malloc):\n+\t* fixinc/fixlib.h(must_malloc): + reformatting\n+\t* fixinc/inclhack.def: replace the \"1i\" and \"$a\" sed commands\n+\twith usages of ``c_fix = wrap;''\n+\t* fixinc/fixincl.x: regen\n+\t* fixinc/check.diff: regen\n+\n Sun May 14 17:58:59 2000  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* mklibgcc.in (building libgcc1) [Xlibgcc1.a]: Do not use unset"}, {"sha": "6b3493aab8c58aec3f3d00e25ef1be9d2dd95175", "filename": "gcc/fixinc/check.diff", "status": "modified", "additions": 84, "deletions": 9, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8fcfc31e6904af9b4e078ef6c149da2717d927/gcc%2Ffixinc%2Fcheck.diff", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8fcfc31e6904af9b4e078ef6c149da2717d927/gcc%2Ffixinc%2Fcheck.diff", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fcheck.diff?ref=ba8fcfc31e6904af9b4e078ef6c149da2717d927", "patch": "@@ -85,14 +85,30 @@\n --- res/assert.h\n ***************\n *** 1,3 ****\n---- 1,7 ----\n+--- 1,13 ----\n++ #ifndef FIXINC_BROKEN_ASSERT_STDLIB_CHECK\n++ #define FIXINC_BROKEN_ASSERT_STDLIB_CHECK 1\n++ \n + #ifdef __cplusplus\n + #include <stdlib.h>\n-+ #endif /* BROKEN_ASSERT_STDLIB_CHECK fix stamp */\n++ #endif\n++ #ifndef FIXINC_BROKEN_ASSERT_STDIO_CHECK\n++ #define FIXINC_BROKEN_ASSERT_STDIO_CHECK 1\n++ \n + #include <stdio.h>\n   \n   \n   #ifndef BROKEN_ASSERT_STDIO_CHECK\n+***************\n+*** 8,10 ****\n+--- 18,24 ----\n+  #ifndef BROKEN_ASSERT_STDLIB_CHECK\n+  extern void exit ( int );\n+  #endif  /* BROKEN_ASSERT_STDLIB_CHECK */\n++ \n++ #endif  /* FIXINC_BROKEN_ASSERT_STDIO_CHECK */\n++ \n++ #endif  /* FIXINC_BROKEN_ASSERT_STDLIB_CHECK */\n *** inc/c_asm.h\n --- res/c_asm.h\n ***************\n@@ -140,10 +156,28 @@\n   #ifndef BAD_STRUCT_TERM_CHECK\n ! struct term;\n   #endif  /* BAD_STRUCT_TERM_CHECK */\n+*** inc/libgen.h\n+--- res/libgen.h\n+***************\n+*** 2,7 ****\n+  \n+  #ifndef BAD_LVAL_CHECK\n+  #pragma extern_prefix \"_FOO\"\n+! #define something(x,y,z) _FOOsomething(x,y,z)\n+  #define mumble _FOOmumble\n+  #endif  /* BAD_LVAL_CHECK */\n+--- 2,7 ----\n+  \n+  #ifndef BAD_LVAL_CHECK\n+  #pragma extern_prefix \"_FOO\"\n+! #define something _FOOsomething\n+  #define mumble _FOOmumble\n+  #endif  /* BAD_LVAL_CHECK */\n *** inc/math.h\n --- res/math.h\n ***************\n-*** 2,9 ****\n+*** 1,10 ****\n+  \n   \n   #ifndef BROKEN_CABS_CHECK\n   #ifdef __STDC__\n@@ -152,7 +186,33 @@\n - extern double cabs();\n   #endif\n   #endif  /* BROKEN_CABS_CHECK */\n---- 2,7 ----\n+  \n+--- 1,14 ----\n++ #ifndef FIXINC_MATH_EXCEPTION_CHECK\n++ #define FIXINC_MATH_EXCEPTION_CHECK 1\n++ \n++ #ifdef __cplusplus\n++ #define exception __math_exception\n++ #endif\n+  \n+  \n+  #ifndef BROKEN_CABS_CHECK\n+  #ifdef __STDC__\n+  #else\n+  #endif\n+  #endif  /* BROKEN_CABS_CHECK */\n+  \n+***************\n+*** 12,14 ****\n+--- 16,23 ----\n+  #ifndef MATH_EXCEPTION_CHECK\n+  typedef struct exception t_math_exception;\n+  #endif  /* MATH_EXCEPTION_CHECK */\n++ #ifdef __cplusplus\n++ #undef exception\n++ #endif\n++ \n++ #endif  /* FIXINC_MATH_EXCEPTION_CHECK */\n *** inc/stdio.h\n --- res/stdio.h\n ***************\n@@ -169,7 +229,10 @@\n   int foo;\n   #endif\n   #endif  /* ISC_OMITS_WITH_STDC_CHECK */\n---- 1,14 ----\n+--- 1,17 ----\n++ #ifndef FIXINC_STDIO_STDARG_H_CHECK\n++ #define FIXINC_STDIO_STDARG_H_CHECK 1\n++ \n + #define __need___va_list\n + #include <stdarg.h>\n   \n@@ -184,6 +247,14 @@\n   int foo;\n   #endif\n   #endif  /* ISC_OMITS_WITH_STDC_CHECK */\n+***************\n+*** 15,17 ****\n+--- 20,24 ----\n+  #ifndef STDIO_STDARG_H_CHECK\n+  \n+  #endif  /* STDIO_STDARG_H_CHECK */\n++ \n++ #endif  /* FIXINC_STDIO_STDARG_H_CHECK */\n *** inc/stdlib.h\n --- res/stdlib.h\n ***************\n@@ -275,19 +346,23 @@\n --- res/sys/mman.h\n ***************\n *** 1,5 ****\n---- 1,12 ----\n+--- 1,16 ----\n++ #ifndef FIXINC_CXX_UNREADY_CHECK\n++ #define FIXINC_CXX_UNREADY_CHECK 1\n++ \n + #ifdef __cplusplus\n + extern \"C\" {\n-+ #endif /* CXX_UNREADY_CHECK */\n-+ \n++ #endif\n   \n   \n   #ifndef CXX_UNREADY_CHECK\n   extern void* malloc( size_t );\n   #endif  /* CXX_UNREADY_CHECK */\n + #ifdef __cplusplus\n + }\n-+ #endif /* CXX_UNREADY_CHECK */\n++ #endif\n++ \n++ #endif  /* FIXINC_CXX_UNREADY_CHECK */\n *** inc/sys/param.h\n --- res/sys/param.h\n ***************"}, {"sha": "8afa5b7510a1aae5781422d27e41bf3127907774", "filename": "gcc/fixinc/fixfixes.c", "status": "modified", "additions": 65, "deletions": 13, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8fcfc31e6904af9b4e078ef6c149da2717d927/gcc%2Ffixinc%2Ffixfixes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8fcfc31e6904af9b4e078ef6c149da2717d927/gcc%2Ffixinc%2Ffixfixes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixfixes.c?ref=ba8fcfc31e6904af9b4e078ef6c149da2717d927", "patch": "@@ -19,25 +19,24 @@ Here are the rules:\n 2.  Use the \"FIX_PROC_HEAD()\" macro _with_ the \"_fix\" suffix\n     (I cannot use the ## magic from ANSI C) for defining your entry point.\n \n-3.  Put your test name into the FIXUP_TABLE\n+3.  Put your test name into the FIXUP_TABLE.\n \n 4.  Do not read anything from stdin.  It is closed.\n \n 5.  Write to stderr only in the event of a reportable error\n     In such an event, call \"exit(1)\".\n \n 6.  You have access to the fixDescList entry for the fix in question.\n-    This may be useful, for example, if there are pre-compiled\n-    selection expressions stored there.\n+    This may be useful, for example, if there are interesting strings\n+    or pre-compiled regular expressions stored there.\n \n-    For example, you may do this if you know that the first \n-    test contains a useful regex.  This is okay because, remember,\n-    this code perforce works closely with the inclhack.def fixes!!\n+    It is also possible to access fix descriptions by using the\n+    index of a known fix, \"my_fix_name\" for example:\n \n-    tFixDesc*  pMyDesc = fixDescList + MY_FIX_NAME_FIXIDX;\n-    tTestDesc* pTestList = pMyDesc->p_test_desc;\n+        tFixDesc*  p_desc  = fixDescList + MY_FIX_NAME_FIXIDX;\n+        tTestDesc* p_tlist = p_desc->p_test_desc;\n \n-    regexec (pTestList->p_test_regex, ...)\n+        regexec (p_tlist->p_test_regex, ...)\n \n = = = = = = = = = = = = = = = = = = = = = = = = =\n \n@@ -66,10 +65,11 @@ typedef struct {\n } fix_entry_t;\n \n #define FIXUP_TABLE \\\n-  _FT_( \"format\",           format_fix ) \\\n-  _FT_( \"char_macro_use\",   char_macro_use_fix ) \\\n   _FT_( \"char_macro_def\",   char_macro_def_fix ) \\\n-  _FT_( \"machine_name\",     machine_name_fix )\n+  _FT_( \"char_macro_use\",   char_macro_use_fix ) \\\n+  _FT_( \"format\",           format_fix )         \\\n+  _FT_( \"machine_name\",     machine_name_fix )   \\\n+  _FT_( \"wrap\",             wrap_fix )\n \n \n #define FIX_PROC_HEAD( fix ) \\\n@@ -234,6 +234,7 @@ FIX_PROC_HEAD( format_fix )\n     fputs (text, stdout);\n }\n \n+\n /* Scan the input file for all occurrences of text like this:\n \n    #define TIOCCONS _IO(T, 12)\n@@ -332,7 +333,7 @@ FIX_PROC_HEAD( char_macro_use_fix )\n    you provide in the STR argument.  */\n FIX_PROC_HEAD( char_macro_def_fix )\n {\n-  /* This regexp looks for any traditional-syntax #define (# in column 1).  */\n+  /* This regexp looks for any traditional-syntax #define (# in col 1). */\n   static const char pat[] =\n     \"^#[ \\t]*define[ \\t]+\";\n   static regex_t re;\n@@ -518,6 +519,57 @@ FIX_PROC_HEAD( machine_name_fix )\n }\n \n \n+FIX_PROC_HEAD( wrap_fix )\n+{\n+  char   z_fixname[ 64 ];\n+  tCC*   pz_src  = p_fixd->fix_name;\n+  tCC*   pz_name = z_fixname;\n+  char*  pz_dst  = z_fixname;\n+  size_t len     = 0;\n+\n+  for (;;) {\n+    char ch = *(pz_src++);\n+\n+    if (islower(ch))\n+      *(pz_dst++) = toupper( ch );\n+\n+    else if (isalnum( ch ))\n+      *(pz_dst++) = ch;\n+\n+    else if (ch == NUL) {\n+      *(pz_dst++) = ch;\n+      break;\n+    }\n+    else\n+      *(pz_dst++) = '_';\n+\n+    if (++len >= sizeof( z_fixname )) {\n+      void* p = must_malloc( len + strlen( pz_src ) + 1 );\n+      memcpy( p, (void*)z_fixname, len );\n+      pz_name = (tCC*)p;\n+      pz_dst  = (char*)pz_name + len;\n+    }\n+  }\n+\n+  printf( \"#ifndef FIXINC_%s_CHECK\\n\", pz_name );\n+  printf( \"#define FIXINC_%s_CHECK 1\\n\\n\", pz_name );\n+\n+  if (p_fixd->patch_args[1] == (tCC*)NULL)\n+    fputs( text, stdout );\n+\n+  else {\n+    fputs( p_fixd->patch_args[1], stdout );\n+    fputs( text, stdout );\n+    if (p_fixd->patch_args[2] != (tCC*)NULL)\n+      fputs( p_fixd->patch_args[2], stdout );\n+  }\n+\n+  printf( \"\\n#endif  /* FIXINC_%s_CHECK */\\n\", pz_name );\n+  if (pz_name != z_fixname)\n+    free( (void*)pz_name );\n+}\n+\n+\n /* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n \n      test for fix selector"}, {"sha": "582d6864331d6e64717fe8e20137619a70644250", "filename": "gcc/fixinc/fixincl.x", "status": "modified", "additions": 31, "deletions": 34, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8fcfc31e6904af9b4e078ef6c149da2717d927/gcc%2Ffixinc%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8fcfc31e6904af9b4e078ef6c149da2717d927/gcc%2Ffixinc%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.x?ref=ba8fcfc31e6904af9b4e078ef6c149da2717d927", "patch": "@@ -1173,7 +1173,7 @@ tTestDesc aBad_LvalTests[] = {\n  *  Fix Command Arguments for Bad_Lval\n  */\n const char* apzBad_LvalPatch[] = { \"sed\",\n-    \"-e\", \"s/^[ \\t]*#[ \\t]*define[ \\t]+\\\\([^(]*\\\\)\\\\(([^)]*)\\\\)[ \\t]*\\\\(_.\\\\)\\\\1\\\\2[ \\t]*$/#define \\\\1 \\\\3\\\\1/\",\n+    \"-e\", \"s/^[ \\t]*#[ \\t]*define[ \\t][ \\t]*\\\\([^(]*\\\\)\\\\(([^)]*)\\\\)[ \\t]*\\\\(_.*\\\\)\\\\1\\\\2[ \\t]*$/#define \\\\1 \\\\3\\\\1/\",\n     (char*)NULL };\n \n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n@@ -1214,9 +1214,9 @@ tTestDesc aBroken_Assert_StdioTests[] = {\n /*\n  *  Fix Command Arguments for Broken_Assert_Stdio\n  */\n-const char* apzBroken_Assert_StdioPatch[] = { \"sed\",\n-    \"-e\", \"1i\\\\\\n\\\n-#include <stdio.h>\\n\",\n+const char* apzBroken_Assert_StdioPatch[] = {\n+    \"wrap\",\n+    \"#include <stdio.h>\\n\",\n     (char*)NULL };\n \n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n@@ -1257,11 +1257,11 @@ tTestDesc aBroken_Assert_StdlibTests[] = {\n /*\n  *  Fix Command Arguments for Broken_Assert_Stdlib\n  */\n-const char* apzBroken_Assert_StdlibPatch[] = { \"sed\",\n-    \"-e\", \"1i\\\\\\n\\\n-#ifdef __cplusplus\\\\\\n\\\n-#include <stdlib.h>\\\\\\n\\\n-#endif /* BROKEN_ASSERT_STDLIB_CHECK fix stamp */\\n\",\n+const char* apzBroken_Assert_StdlibPatch[] = {\n+    \"wrap\",\n+    \"#ifdef __cplusplus\\n\\\n+#include <stdlib.h>\\n\\\n+#endif\\n\",\n     (char*)NULL };\n \n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n@@ -1466,16 +1466,14 @@ tTestDesc aCxx_UnreadyTests[] = {\n /*\n  *  Fix Command Arguments for Cxx_Unready\n  */\n-const char* apzCxx_UnreadyPatch[] = { \"sed\",\n-    \"-e\", \"1i\\\\\\n\\\n-#ifdef __cplusplus\\\\\\n\\\n-extern \\\"C\\\" {\\\\\\n\\\n-#endif /* CXX_UNREADY_CHECK */\\\\\\n\\\n-\\n\",\n-    \"-e\", \"$a\\\\\\n\\\n-#ifdef __cplusplus\\\\\\n\\\n-}\\\\\\n\\\n-#endif /* CXX_UNREADY_CHECK */\\n\",\n+const char* apzCxx_UnreadyPatch[] = {\n+    \"wrap\",\n+    \"#ifdef __cplusplus\\n\\\n+extern \\\"C\\\" {\\n\\\n+#endif\\n\",\n+    \"#ifdef __cplusplus\\n\\\n+}\\n\\\n+#endif\\n\",\n     (char*)NULL };\n \n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n@@ -2468,14 +2466,13 @@ tTestDesc aMath_ExceptionTests[] = {\n /*\n  *  Fix Command Arguments for Math_Exception\n  */\n-const char* apzMath_ExceptionPatch[] = { \"sed\",\n-    \"-e\", \"1i\\\\\\n\\\n-#ifdef __cplusplus\\\\\\n\\\n-#define exception __math_exception\\\\\\n\\\n+const char* apzMath_ExceptionPatch[] = {\n+    \"wrap\",\n+    \"#ifdef __cplusplus\\n\\\n+#define exception __math_exception\\n\\\n #endif\\n\",\n-    \"-e\", \"$a\\\\\\n\\\n-#ifdef __cplusplus\\\\\\n\\\n-#undef exception\\\\\\n\\\n+    \"#ifdef __cplusplus\\n\\\n+#undef exception\\n\\\n #endif\\n\",\n     (char*)NULL };\n \n@@ -3292,9 +3289,9 @@ tTestDesc aStdio_Stdarg_HTests[] = {\n /*\n  *  Fix Command Arguments for Stdio_Stdarg_H\n  */\n-const char* apzStdio_Stdarg_HPatch[] = { \"sed\",\n-    \"-e\", \"1i\\\\\\n\\\n-#define __need___va_list\\\\\\n\\\n+const char* apzStdio_Stdarg_HPatch[] = {\n+    \"wrap\",\n+    \"#define __need___va_list\\n\\\n #include <stdarg.h>\\n\",\n     (char*)NULL };\n \n@@ -4821,12 +4818,12 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n \n   {  zBroken_Assert_StdioName,    zBroken_Assert_StdioList,\n      apzBroken_Assert_StdioMachs,\n-     BROKEN_ASSERT_STDIO_TEST_CT, FD_MACH_ONLY,\n+     BROKEN_ASSERT_STDIO_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aBroken_Assert_StdioTests,   apzBroken_Assert_StdioPatch },\n \n   {  zBroken_Assert_StdlibName,    zBroken_Assert_StdlibList,\n      apzBroken_Assert_StdlibMachs,\n-     BROKEN_ASSERT_STDLIB_TEST_CT, FD_MACH_ONLY,\n+     BROKEN_ASSERT_STDLIB_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aBroken_Assert_StdlibTests,   apzBroken_Assert_StdlibPatch },\n \n   {  zBroken_CabsName,    zBroken_CabsList,\n@@ -4856,7 +4853,7 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n \n   {  zCxx_UnreadyName,    zCxx_UnreadyList,\n      apzCxx_UnreadyMachs,\n-     CXX_UNREADY_TEST_CT, FD_MACH_ONLY,\n+     CXX_UNREADY_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aCxx_UnreadyTests,   apzCxx_UnreadyPatch },\n \n   {  zHpux_MaxintName,    zHpux_MaxintList,\n@@ -4991,7 +4988,7 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n \n   {  zMath_ExceptionName,    zMath_ExceptionList,\n      apzMath_ExceptionMachs,\n-     MATH_EXCEPTION_TEST_CT, FD_MACH_ONLY,\n+     MATH_EXCEPTION_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aMath_ExceptionTests,   apzMath_ExceptionPatch },\n \n   {  zMath_Huge_Val_From_Dbl_MaxName,    zMath_Huge_Val_From_Dbl_MaxList,\n@@ -5101,7 +5098,7 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n \n   {  zStdio_Stdarg_HName,    zStdio_Stdarg_HList,\n      apzStdio_Stdarg_HMachs,\n-     STDIO_STDARG_H_TEST_CT, FD_MACH_ONLY,\n+     STDIO_STDARG_H_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aStdio_Stdarg_HTests,   apzStdio_Stdarg_HPatch },\n \n   {  zStdio_Va_ListName,    zStdio_Va_ListList,"}, {"sha": "bafe2612c072ce18097b14993e582dc9c2b26fc3", "filename": "gcc/fixinc/fixlib.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8fcfc31e6904af9b4e078ef6c149da2717d927/gcc%2Ffixinc%2Ffixlib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8fcfc31e6904af9b4e078ef6c149da2717d927/gcc%2Ffixinc%2Ffixlib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixlib.c?ref=ba8fcfc31e6904af9b4e078ef6c149da2717d927", "patch": "@@ -24,6 +24,20 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"fixlib.h\"\n \n+void *\n+must_malloc( siz )\n+    size_t  siz;\n+{\n+  void*  res = malloc( siz );\n+\n+  if (res == (void*)NULL) {\n+    fprintf( stderr, \"fixincl failed to malloc %d bytes\\n\", siz );\n+    exit( 3 );\n+  }\n+\n+  return res;\n+}\n+\n /* * * * * * * * * * * * *\n  \n    load_file_data loads all the contents of a file into malloc-ed memory."}, {"sha": "5cbf41239da60c7c5299cfefb0de7eb42c619c7f", "filename": "gcc/fixinc/fixlib.h", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8fcfc31e6904af9b4e078ef6c149da2717d927/gcc%2Ffixinc%2Ffixlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8fcfc31e6904af9b4e078ef6c149da2717d927/gcc%2Ffixinc%2Ffixlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixlib.h?ref=ba8fcfc31e6904af9b4e078ef6c149da2717d927", "patch": "@@ -138,14 +138,14 @@ typedef struct patch_desc tPatchDesc;\n typedef struct fix_desc tFixDesc;\n struct fix_desc\n {\n-  const char*   fix_name;       /* Name of the fix */\n-  const char*   file_list;      /* List of files it applies to */\n-  const char**  papz_machs;     /* List of machine/os-es it applies to */\n-  int           test_ct;\n-  int           fd_flags;\n-  tTestDesc*    p_test_desc;\n-  const char**  patch_args;\n-  long          unused;\n+  tCC*        fix_name;       /* Name of the fix */\n+  tCC*        file_list;      /* List of files it applies to */\n+  tCC**       papz_machs;     /* List of machine/os-es it applies to */\n+  int         test_ct;\n+  int         fd_flags;\n+  tTestDesc*  p_test_desc;\n+  tCC**       patch_args;\n+  long        unused;\n };\n \n /*\n@@ -155,6 +155,7 @@ char * load_file_data _P_(( FILE* fp ));\n t_bool is_cxx_header  _P_(( tCC* filename, tCC* filetext ));\n void   compile_re     _P_(( tCC* pat, regex_t* re, int match,\n \t\t\t    tCC *e1, tCC *e2 ));\n+void*  must_malloc    _P_(( size_t ));\n \n void apply_fix _P_(( tFixDesc* p_fixd, tCC* filname ));\n apply_fix_p_t run_test _P_((tCC* t_name, tCC* f_name, tCC* text ));"}, {"sha": "a6ceec252a1742c1a19c44c911a992b264e6f2db", "filename": "gcc/fixinc/inclhack.def", "status": "modified", "additions": 50, "deletions": 45, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8fcfc31e6904af9b4e078ef6c149da2717d927/gcc%2Ffixinc%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8fcfc31e6904af9b4e078ef6c149da2717d927/gcc%2Ffixinc%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Finclhack.def?ref=ba8fcfc31e6904af9b4e078ef6c149da2717d927", "patch": "@@ -733,13 +733,13 @@ fix = {\n     files    = stropts.h;\n     files    = time.h;\n     files    = unistd.h;\n+\n     sed      =\n-        \"s/^[ \\t]*#[ \\t]*define[ \\t]+\\\\([^(]*\\\\)\\\\(([^)]*)\\\\)[ \\t]*\"\n-               \"\\\\(_.\\\\)\\\\1\\\\2[ \\t]*$/#define \\\\1 \\\\3\\\\1/\";\n+        \"s/^[ \\t]*#[ \\t]*define[ \\t][ \\t]*\\\\([^(]*\\\\)\\\\(([^)]*)\\\\)[ \\t]*\"\n+               \"\\\\(_.*\\\\)\\\\1\\\\2[ \\t]*$/#define \\\\1 \\\\3\\\\1/\";\n \n     test_text = '#pragma extern_prefix \"_FOO\"'\"\\n\"\n                 \"#define something(x,y,z) _FOOsomething(x,y,z)\\n\"\n-                \"#define otherwise(x,y,z) BAR_Something(x,y,z)\\n\"\n                 \"#define mumble _FOOmumble\";\n };\n \n@@ -748,12 +748,12 @@ fix = {\n  *  check for broken assert.h that needs stdio.h\n  */\n fix = {\n-    hackname = broken_assert_stdio;\n-    files    = assert.h;\n-    select   = stderr;\n-    bypass   = \"include.*stdio\\\\.h\";\n-    sed      = \"1i\\\\\\n\"\n-               \"#include <stdio.h>\\n\";\n+    hackname  = broken_assert_stdio;\n+    files     = assert.h;\n+    select    = stderr;\n+    bypass    = \"include.*stdio\\\\.h\";\n+    c_fix     = wrap;\n+    c_fix_arg = \"#include <stdio.h>\\n\";\n     test_text = \"extern FILE* stderr;\";\n };\n \n@@ -762,14 +762,14 @@ fix = {\n  *  check for broken assert.h that needs stdlib.h\n  */\n fix = {\n-    hackname = broken_assert_stdlib;\n-    files    = assert.h;\n-    select   = 'exit *\\(|abort *\\(';\n-    bypass   = \"include.*stdlib\\\\.h\";\n-    sed      = \"1i\\\\\\n\"\n-               \"#ifdef __cplusplus\\\\\\n\"\n-               \"#include <stdlib.h>\\\\\\n\"\n-               \"#endif /* BROKEN_ASSERT_STDLIB_CHECK fix stamp */\\n\";\n+    hackname  = broken_assert_stdlib;\n+    files     = assert.h;\n+    select    = 'exit *\\(|abort *\\(';\n+    bypass    = \"include.*stdlib\\\\.h\";\n+    c_fix     = wrap;\n+    c_fix_arg = \"#ifdef __cplusplus\\n\"\n+                \"#include <stdlib.h>\\n\"\n+                \"#endif\\n\";\n     test_text = \"extern void exit ( int );\";\n };\n \n@@ -861,18 +861,17 @@ fix = {\n     hackname = cxx_unready;\n     files    = sys/mman.h;\n     files    = rpc/types.h;\n-    select   = '[^#]+malloc.*;';  /* Should catch any form of a declaration\n-\t\t\t\t     but not mention within a macro.  */\n+    select   = '[^#]+malloc.*;';  /* Catch any form of declaration\n+\t\t\t\t     not within a macro.  */\n     bypass   = '\"C\"|__BEGIN_DECLS';\n \n-    sed      = \"1i\\\\\\n\"\n-               \"#ifdef __cplusplus\\\\\\n\"\n-               \"extern \\\"C\\\" {\\\\\\n\"\n-               \"#endif /* CXX_UNREADY_CHECK */\\\\\\n\\n\";\n-    sed      = \"$a\\\\\\n\"\n-               \"#ifdef __cplusplus\\\\\\n\"\n-               \"}\\\\\\n\"\n-               \"#endif /* CXX_UNREADY_CHECK */\\n\";\n+    c_fix     = wrap;\n+    c_fix_arg = \"#ifdef __cplusplus\\n\"\n+                \"extern \\\"C\\\" {\\n\"\n+                \"#endif\\n\";\n+    c_fix_arg = \"#ifdef __cplusplus\\n\"\n+                \"}\\n\"\n+                \"#endif\\n\";\n     test_text = \"extern void* malloc( size_t );\";\n };\n \n@@ -1310,18 +1309,21 @@ fix = {\n  *  additional references to struct exception.\n  */\n fix = {\n-    hackname = math_exception;\n-    files    = math.h;\n-    select   = \"struct exception\";\n-    bypass   = \"We have a problem when using C\\\\+\\\\+\";\n-    sed      = \"1i\\\\\\n\"\n-               \"#ifdef __cplusplus\\\\\\n\"\n-               \"#define exception __math_exception\\\\\\n\"\n-               \"#endif\\n\";\n-    sed      = \"$a\\\\\\n\"\n-               \"#ifdef __cplusplus\\\\\\n\"\n-               \"#undef exception\\\\\\n\"\n-               \"#endif\\n\";\n+    hackname  = math_exception;\n+    files     = math.h;\n+    select    = \"struct exception\";\n+    bypass    = \"We have a problem when using C\\\\+\\\\+\";\n+    c_fix     = wrap;\n+\n+    c_fix_arg = \"#ifdef __cplusplus\\n\"\n+                \"#define exception __math_exception\\n\"\n+                \"#endif\\n\";\n+\n+    c_fix_arg = \"#ifdef __cplusplus\\n\"\n+                \"#undef exception\\n\"\n+                \"#endif\\n\";\n+\n+    test_text = \"typedef struct exception t_math_exception;\";\n };\n \n fix = {\n@@ -1687,11 +1689,11 @@ fix = {\n     files    = stdio.h;\n     bypass   = \"include.*(stdarg\\.h|machine/ansi\\.h)\";\n \n-    sed      = '1i\\\\\n-\\#define __need___va_list\\\\\n-\\#include <stdarg.h>\n-';\n+    c_fix     = wrap;\n \n+    c_fix_arg = \"#define __need___va_list\\n#include <stdarg.h>\\n\";\n+\n+    test_text = \"\";\n };\n \n \n@@ -2038,8 +2040,11 @@ fix = {\n     files    = sys/cmn_err.h;\n     files    = sys/kdebugger.h;\n     bypass   = '_KERNEL';\n-    sed      = \"1i\\\\\\n#ifdef _KERNEL\";\n-    sed      = \"$a\\\\\\n#endif /* _KERNEL */\";\n+    c_fix     = wrap;\n+\n+    c_fix_arg = \"#ifdef _KERNEL\\n\";\n+    c_fix_arg = \"#endif /* _KERNEL */\\n\";\n+    test_text = \"\";\n };\n #endif\n "}]}