{"sha": "c7775327e8cf214872b3d179bfaa1b441759ab5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc3NzUzMjdlOGNmMjE0ODcyYjNkMTc5YmZhYTFiNDQxNzU5YWI1YQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-01-23T12:02:13Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-01-23T12:02:13Z"}, "message": "Speed up use-after-scope (v2): rewrite into SSA\n\n2017-01-23  Martin Liska  <mliska@suse.cz>\n\n\t* asan.c (create_asan_shadow_var): New function.\n\t(asan_expand_poison_ifn): Likewise.\n\t* asan.h (asan_expand_poison_ifn): New declaration.\n\t* internal-fn.c (expand_ASAN_POISON): Likewise.\n\t* internal-fn.def (ASAN_POISON): New builtin.\n\t* sanopt.c (pass_sanopt::execute): Expand\n\tasan_expand_poison_ifn.\n\t* tree-inline.c (copy_decl_for_dup_finish): Make function\n\texternal.\n\t* tree-inline.h (copy_decl_for_dup_finish): Likewise.\n\t* tree-ssa.c (is_asan_mark_p): New function.\n\t(execute_update_addresses_taken): Rewrite local variables\n\t(identified just by use-after-scope as addressable) into SSA.\n2017-01-23  Martin Liska  <mliska@suse.cz>\n\n\t* gcc.dg/asan/use-after-scope-3.c: Add additional flags.\n\t* gcc.dg/asan/use-after-scope-9.c: Likewise and grep for\n\tsanopt optimization for ASAN_POISON.\n\nFrom-SVN: r244791", "tree": {"sha": "1ab9205a738735b127304a898b222670154c0f01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ab9205a738735b127304a898b222670154c0f01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7775327e8cf214872b3d179bfaa1b441759ab5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7775327e8cf214872b3d179bfaa1b441759ab5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7775327e8cf214872b3d179bfaa1b441759ab5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7775327e8cf214872b3d179bfaa1b441759ab5a/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "913e4b3617fe7f46fbdbb72b010cf6cf7201d329", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/913e4b3617fe7f46fbdbb72b010cf6cf7201d329", "html_url": "https://github.com/Rust-GCC/gccrs/commit/913e4b3617fe7f46fbdbb72b010cf6cf7201d329"}], "stats": {"total": 227, "additions": 215, "deletions": 12}, "files": [{"sha": "34728a9e52fd73a8f28d8c3b531343d20abe8a95", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7775327e8cf214872b3d179bfaa1b441759ab5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7775327e8cf214872b3d179bfaa1b441759ab5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7775327e8cf214872b3d179bfaa1b441759ab5a", "patch": "@@ -1,3 +1,19 @@\n+2017-01-23  Martin Liska  <mliska@suse.cz>\n+\n+\t* asan.c (create_asan_shadow_var): New function.\n+\t(asan_expand_poison_ifn): Likewise.\n+\t* asan.h (asan_expand_poison_ifn): New declaration.\n+\t* internal-fn.c (expand_ASAN_POISON): Likewise.\n+\t* internal-fn.def (ASAN_POISON): New builtin.\n+\t* sanopt.c (pass_sanopt::execute): Expand\n+\tasan_expand_poison_ifn.\n+\t* tree-inline.c (copy_decl_for_dup_finish): Make function\n+\texternal.\n+\t* tree-inline.h (copy_decl_for_dup_finish): Likewise.\n+\t* tree-ssa.c (is_asan_mark_p): New function.\n+\t(execute_update_addresses_taken): Rewrite local variables\n+\t(identified just by use-after-scope as addressable) into SSA.\n+\n 2017-01-22  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/install.texi (Specific): opensource.apple.com uses https"}, {"sha": "fe117a6951a7dd8632d0453d3dcae4d6e6720a7a", "filename": "gcc/asan.c", "status": "modified", "additions": 108, "deletions": 1, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7775327e8cf214872b3d179bfaa1b441759ab5a/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7775327e8cf214872b3d179bfaa1b441759ab5a/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=c7775327e8cf214872b3d179bfaa1b441759ab5a", "patch": "@@ -32,8 +32,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"memmodel.h\"\n #include \"tm_p.h\"\n+#include \"ssa.h\"\n #include \"stringpool.h\"\n-#include \"tree-vrp.h\"\n #include \"tree-ssanames.h\"\n #include \"optabs.h\"\n #include \"emit-rtl.h\"\n@@ -59,6 +59,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n #include \"builtins.h\"\n #include \"fnmatch.h\"\n+#include \"tree-inline.h\"\n \n /* AddressSanitizer finds out-of-bounds and use-after-free bugs\n    with <2x slowdown on average.\n@@ -3064,6 +3065,112 @@ asan_expand_check_ifn (gimple_stmt_iterator *iter, bool use_calls)\n   return true;\n }\n \n+/* Create ASAN shadow variable for a VAR_DECL which has been rewritten\n+   into SSA.  Already seen VAR_DECLs are stored in SHADOW_VARS_MAPPING.  */\n+\n+static tree\n+create_asan_shadow_var (tree var_decl,\n+\t\t\thash_map<tree, tree> &shadow_vars_mapping)\n+{\n+  tree *slot = shadow_vars_mapping.get (var_decl);\n+  if (slot == NULL)\n+    {\n+      tree shadow_var = copy_node (var_decl);\n+\n+      copy_body_data id;\n+      memset (&id, 0, sizeof (copy_body_data));\n+      id.src_fn = id.dst_fn = current_function_decl;\n+      copy_decl_for_dup_finish (&id, var_decl, shadow_var);\n+\n+      DECL_ARTIFICIAL (shadow_var) = 1;\n+      DECL_IGNORED_P (shadow_var) = 1;\n+      DECL_SEEN_IN_BIND_EXPR_P (shadow_var) = 0;\n+      gimple_add_tmp_var (shadow_var);\n+\n+      shadow_vars_mapping.put (var_decl, shadow_var);\n+      return shadow_var;\n+    }\n+  else\n+    return *slot;\n+}\n+\n+bool\n+asan_expand_poison_ifn (gimple_stmt_iterator *iter,\n+\t\t\tbool *need_commit_edge_insert,\n+\t\t\thash_map<tree, tree> &shadow_vars_mapping)\n+{\n+  gimple *g = gsi_stmt (*iter);\n+  tree poisoned_var = gimple_call_lhs (g);\n+  if (!poisoned_var)\n+    {\n+      gsi_remove (iter, true);\n+      return true;\n+    }\n+\n+  tree shadow_var  = create_asan_shadow_var (SSA_NAME_VAR (poisoned_var),\n+\t\t\t\t\t     shadow_vars_mapping);\n+\n+  bool recover_p;\n+  if (flag_sanitize & SANITIZE_USER_ADDRESS)\n+    recover_p = (flag_sanitize_recover & SANITIZE_USER_ADDRESS) != 0;\n+  else\n+    recover_p = (flag_sanitize_recover & SANITIZE_KERNEL_ADDRESS) != 0;\n+  tree size = DECL_SIZE_UNIT (shadow_var);\n+  gimple *poison_call\n+    = gimple_build_call_internal (IFN_ASAN_MARK, 3,\n+\t\t\t\t  build_int_cst (integer_type_node,\n+\t\t\t\t\t\t ASAN_MARK_POISON),\n+\t\t\t\t  build_fold_addr_expr (shadow_var), size);\n+\n+  use_operand_p use_p;\n+  imm_use_iterator imm_iter;\n+  FOR_EACH_IMM_USE_FAST (use_p, imm_iter, poisoned_var)\n+    {\n+      gimple *use = USE_STMT (use_p);\n+      if (is_gimple_debug (use))\n+\tcontinue;\n+\n+      int nargs;\n+      tree fun = report_error_func (false, recover_p, tree_to_uhwi (size),\n+\t\t\t\t    &nargs);\n+\n+      gcall *call = gimple_build_call (fun, 1,\n+\t\t\t\t       build_fold_addr_expr (shadow_var));\n+      gimple_set_location (call, gimple_location (use));\n+      gimple *call_to_insert = call;\n+\n+      /* The USE can be a gimple PHI node.  If so, insert the call on\n+\t all edges leading to the PHI node.  */\n+      if (is_a <gphi *> (use))\n+\t{\n+\t  gphi *phi = dyn_cast<gphi *> (use);\n+\t  for (unsigned i = 0; i < gimple_phi_num_args (phi); ++i)\n+\t    if (gimple_phi_arg_def (phi, i) == poisoned_var)\n+\t      {\n+\t\tedge e = gimple_phi_arg_edge (phi, i);\n+\n+\t\tif (call_to_insert == NULL)\n+\t\t  call_to_insert = gimple_copy (call);\n+\n+\t\tgsi_insert_seq_on_edge (e, call_to_insert);\n+\t\t*need_commit_edge_insert = true;\n+\t\tcall_to_insert = NULL;\n+\t      }\n+\t}\n+      else\n+\t{\n+\t  gimple_stmt_iterator gsi = gsi_for_stmt (use);\n+\t  gsi_insert_before (&gsi, call, GSI_NEW_STMT);\n+\t}\n+    }\n+\n+  SSA_NAME_IS_DEFAULT_DEF (poisoned_var) = true;\n+  SSA_NAME_DEF_STMT (poisoned_var) = gimple_build_nop ();\n+  gsi_replace (iter, poison_call, false);\n+\n+  return true;\n+}\n+\n /* Instrument the current function.  */\n \n static unsigned int"}, {"sha": "2895bdee645115b45b1d7834fea0966f4b22068e", "filename": "gcc/asan.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7775327e8cf214872b3d179bfaa1b441759ab5a/gcc%2Fasan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7775327e8cf214872b3d179bfaa1b441759ab5a/gcc%2Fasan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.h?ref=c7775327e8cf214872b3d179bfaa1b441759ab5a", "patch": "@@ -30,6 +30,8 @@ extern void initialize_sanitizer_builtins (void);\n extern tree asan_dynamic_init_call (bool);\n extern bool asan_expand_check_ifn (gimple_stmt_iterator *, bool);\n extern bool asan_expand_mark_ifn (gimple_stmt_iterator *);\n+extern bool asan_expand_poison_ifn (gimple_stmt_iterator *, bool *,\n+\t\t\t\t    hash_map<tree, tree> &);\n \n extern gimple_stmt_iterator create_cond_insert_point\n      (gimple_stmt_iterator *, bool, bool, bool, basic_block *, basic_block *);"}, {"sha": "45e4ce05b86e349fc6304d0f81c28a0a4b989c37", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7775327e8cf214872b3d179bfaa1b441759ab5a/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7775327e8cf214872b3d179bfaa1b441759ab5a/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=c7775327e8cf214872b3d179bfaa1b441759ab5a", "patch": "@@ -380,6 +380,13 @@ expand_ASAN_MARK (internal_fn, gcall *)\n   gcc_unreachable ();\n }\n \n+/* This should get expanded in the sanopt pass.  */\n+\n+static void\n+expand_ASAN_POISON (internal_fn, gcall *)\n+{\n+  gcc_unreachable ();\n+}\n \n /* This should get expanded in the tsan pass.  */\n "}, {"sha": "7b28b6722ff657b1544c576f69f13adf6ac84233", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7775327e8cf214872b3d179bfaa1b441759ab5a/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7775327e8cf214872b3d179bfaa1b441759ab5a/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=c7775327e8cf214872b3d179bfaa1b441759ab5a", "patch": "@@ -167,6 +167,7 @@ DEF_INTERNAL_FN (ABNORMAL_DISPATCHER, ECF_NORETURN, NULL)\n DEF_INTERNAL_FN (BUILTIN_EXPECT, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n DEF_INTERNAL_FN (ASAN_CHECK, ECF_TM_PURE | ECF_LEAF | ECF_NOTHROW, \".R...\")\n DEF_INTERNAL_FN (ASAN_MARK, ECF_LEAF | ECF_NOTHROW, \".R..\")\n+DEF_INTERNAL_FN (ASAN_POISON, ECF_LEAF | ECF_NOTHROW | ECF_NOVOPS, NULL)\n DEF_INTERNAL_FN (ADD_OVERFLOW, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n DEF_INTERNAL_FN (SUB_OVERFLOW, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n DEF_INTERNAL_FN (MUL_OVERFLOW, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)"}, {"sha": "70b7aeb80d3182afc63a8703b4e8d3dd7a660655", "filename": "gcc/sanopt.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7775327e8cf214872b3d179bfaa1b441759ab5a/gcc%2Fsanopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7775327e8cf214872b3d179bfaa1b441759ab5a/gcc%2Fsanopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanopt.c?ref=c7775327e8cf214872b3d179bfaa1b441759ab5a", "patch": "@@ -894,6 +894,8 @@ pass_sanopt::execute (function *fun)\n   bool use_calls = ASAN_INSTRUMENTATION_WITH_CALL_THRESHOLD < INT_MAX\n     && asan_num_accesses >= ASAN_INSTRUMENTATION_WITH_CALL_THRESHOLD;\n \n+  hash_map<tree, tree> shadow_vars_mapping;\n+  bool need_commit_edge_insert = false;\n   FOR_EACH_BB_FN (bb, fun)\n     {\n       gimple_stmt_iterator gsi;\n@@ -931,6 +933,11 @@ pass_sanopt::execute (function *fun)\n \t\tcase IFN_ASAN_MARK:\n \t\t  no_next = asan_expand_mark_ifn (&gsi);\n \t\t  break;\n+\t\tcase IFN_ASAN_POISON:\n+\t\t  no_next = asan_expand_poison_ifn (&gsi,\n+\t\t\t\t\t\t    &need_commit_edge_insert,\n+\t\t\t\t\t\t    shadow_vars_mapping);\n+\t\t  break;\n \t\tdefault:\n \t\t  break;\n \t\t}\n@@ -962,6 +969,10 @@ pass_sanopt::execute (function *fun)\n \t    gsi_next (&gsi);\n \t}\n     }\n+\n+  if (need_commit_edge_insert)\n+    gsi_commit_edge_inserts ();\n+\n   return 0;\n }\n "}, {"sha": "bb60f696e0338801155bdad32693a31dbacba60a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7775327e8cf214872b3d179bfaa1b441759ab5a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7775327e8cf214872b3d179bfaa1b441759ab5a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7775327e8cf214872b3d179bfaa1b441759ab5a", "patch": "@@ -1,3 +1,9 @@\n+2017-01-23  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.dg/asan/use-after-scope-3.c: Add additional flags.\n+\t* gcc.dg/asan/use-after-scope-9.c: Likewise and grep for\n+\tsanopt optimization for ASAN_POISON.\n+\n 2016-01-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.dg/lto/pr69188_0.c: Require profiling support for testcase."}, {"sha": "8b11bea99408027a005f9bb56e6a4b69396bda32", "filename": "gcc/testsuite/gcc.dg/asan/use-after-scope-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7775327e8cf214872b3d179bfaa1b441759ab5a/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7775327e8cf214872b3d179bfaa1b441759ab5a/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-3.c?ref=c7775327e8cf214872b3d179bfaa1b441759ab5a", "patch": "@@ -1,5 +1,6 @@\n // { dg-do run }\n // { dg-shouldfail \"asan\" }\n+// { dg-additional-options \"-O0\" }\n \n int\n main (void)"}, {"sha": "5d069dd18ea3a4a1c1ac511c9569225a3241e9e9", "filename": "gcc/testsuite/gcc.dg/asan/use-after-scope-9.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7775327e8cf214872b3d179bfaa1b441759ab5a/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7775327e8cf214872b3d179bfaa1b441759ab5a/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-9.c?ref=c7775327e8cf214872b3d179bfaa1b441759ab5a", "patch": "@@ -1,5 +1,6 @@\n // { dg-do run }\n // { dg-shouldfail \"asan\" }\n+// { dg-additional-options \"-O2 -fdump-tree-asan1\" }\n \n int\n main (int argc, char **argv)\n@@ -15,6 +16,7 @@ main (int argc, char **argv)\n   return *ptr;\n }\n \n+// { dg-final { scan-tree-dump-times \"= ASAN_POISON \\\\(\\\\)\" 1 \"asan1\" } }\n // { dg-output \"ERROR: AddressSanitizer: stack-use-after-scope on address.*(\\n|\\r\\n|\\r)\" }\n // { dg-output \"READ of size .*\" }\n // { dg-output \".*'a' <== Memory access at offset \\[0-9\\]* is inside this variable.*\" }"}, {"sha": "d63c70f2a1285becd2e8e22e5762c94a34bc8a8c", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7775327e8cf214872b3d179bfaa1b441759ab5a/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7775327e8cf214872b3d179bfaa1b441759ab5a/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=c7775327e8cf214872b3d179bfaa1b441759ab5a", "patch": "@@ -5449,7 +5449,7 @@ declare_inline_vars (tree block, tree vars)\n    but now it will be in the TO_FN.  PARM_TO_VAR means enable PARM_DECL to\n    VAR_DECL translation.  */\n \n-static tree\n+tree\n copy_decl_for_dup_finish (copy_body_data *id, tree decl, tree copy)\n {\n   /* Don't generate debug information for the copy if we wouldn't have"}, {"sha": "41402a315ec4c3776548b4a1eb4abec6fe1efa07", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7775327e8cf214872b3d179bfaa1b441759ab5a/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7775327e8cf214872b3d179bfaa1b441759ab5a/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=c7775327e8cf214872b3d179bfaa1b441759ab5a", "patch": "@@ -218,6 +218,7 @@ extern gimple_seq copy_gimple_seq_and_replace_locals (gimple_seq seq);\n extern bool debug_find_tree (tree, tree);\n extern tree copy_fn (tree, tree&, tree&);\n extern const char *copy_forbidden (struct function *fun);\n+extern tree copy_decl_for_dup_finish (copy_body_data *id, tree decl, tree copy);\n \n /* This is in tree-inline.c since the routine uses\n    data structures from the inliner.  */"}, {"sha": "f1826b2c9c45f118d5212db7b0271050c5c21c2d", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 59, "deletions": 10, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7775327e8cf214872b3d179bfaa1b441759ab5a/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7775327e8cf214872b3d179bfaa1b441759ab5a/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=c7775327e8cf214872b3d179bfaa1b441759ab5a", "patch": "@@ -41,6 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgexpand.h\"\n #include \"tree-cfg.h\"\n #include \"tree-dfa.h\"\n+#include \"asan.h\"\n \n /* Pointer map of variable mappings, keyed by edge.  */\n static hash_map<edge, auto_vec<edge_var_map> > *edge_var_maps;\n@@ -1575,6 +1576,30 @@ maybe_optimize_var (tree var, bitmap addresses_taken, bitmap not_reg_needs,\n     }\n }\n \n+/* Return true when STMT is ASAN mark where second argument is an address\n+   of a local variable.  */\n+\n+static bool\n+is_asan_mark_p (gimple *stmt)\n+{\n+  if (!gimple_call_internal_p (stmt, IFN_ASAN_MARK))\n+    return false;\n+\n+  tree addr = get_base_address (gimple_call_arg (stmt, 1));\n+  if (TREE_CODE (addr) == ADDR_EXPR\n+      && VAR_P (TREE_OPERAND (addr, 0)))\n+    {\n+      tree var = TREE_OPERAND (addr, 0);\n+      unsigned addressable = TREE_ADDRESSABLE (var);\n+      TREE_ADDRESSABLE (var) = 0;\n+      bool r = is_gimple_reg (var);\n+      TREE_ADDRESSABLE (var) = addressable;\n+      return r;\n+    }\n+\n+  return false;\n+}\n+\n /* Compute TREE_ADDRESSABLE and DECL_GIMPLE_REG_P for local variables.  */\n \n void\n@@ -1600,17 +1625,23 @@ execute_update_addresses_taken (void)\n \t  enum gimple_code code = gimple_code (stmt);\n \t  tree decl;\n \n-\t  if (code == GIMPLE_CALL\n-\t      && optimize_atomic_compare_exchange_p (stmt))\n+\t  if (code == GIMPLE_CALL)\n \t    {\n-\t      /* For __atomic_compare_exchange_N if the second argument\n-\t\t is &var, don't mark var addressable;\n-\t\t if it becomes non-addressable, we'll rewrite it into\n-\t\t ATOMIC_COMPARE_EXCHANGE call.  */\n-\t      tree arg = gimple_call_arg (stmt, 1);\n-\t      gimple_call_set_arg (stmt, 1, null_pointer_node);\n-\t      gimple_ior_addresses_taken (addresses_taken, stmt);\n-\t      gimple_call_set_arg (stmt, 1, arg);\n+\t      if (optimize_atomic_compare_exchange_p (stmt))\n+\t\t{\n+\t\t  /* For __atomic_compare_exchange_N if the second argument\n+\t\t     is &var, don't mark var addressable;\n+\t\t     if it becomes non-addressable, we'll rewrite it into\n+\t\t     ATOMIC_COMPARE_EXCHANGE call.  */\n+\t\t  tree arg = gimple_call_arg (stmt, 1);\n+\t\t  gimple_call_set_arg (stmt, 1, null_pointer_node);\n+\t\t  gimple_ior_addresses_taken (addresses_taken, stmt);\n+\t\t  gimple_call_set_arg (stmt, 1, arg);\n+\t\t}\n+\t      else if (is_asan_mark_p (stmt))\n+\t\t;\n+\t      else\n+\t\tgimple_ior_addresses_taken (addresses_taken, stmt);\n \t    }\n \t  else\n \t    /* Note all addresses taken by the stmt.  */\n@@ -1866,6 +1897,24 @@ execute_update_addresses_taken (void)\n \t\t\tcontinue;\n \t\t      }\n \t\t  }\n+\t\telse if (is_asan_mark_p (stmt))\n+\t\t  {\n+\t\t    tree var = TREE_OPERAND (gimple_call_arg (stmt, 1), 0);\n+\t\t    if (bitmap_bit_p (suitable_for_renaming, DECL_UID (var)))\n+\t\t      {\n+\t\t\tunlink_stmt_vdef (stmt);\n+\t\t\tif (asan_mark_p (stmt, ASAN_MARK_POISON))\n+\t\t\t  {\n+\t\t\t    gcall *call\n+\t\t\t      = gimple_build_call_internal (IFN_ASAN_POISON, 0);\n+\t\t\t    gimple_call_set_lhs (call, var);\n+\t\t\t    gsi_replace (&gsi, call, GSI_SAME_STMT);\n+\t\t\t  }\n+\t\t\telse\n+\t\t\t  gsi_remove (&gsi, true);\n+\t\t\tcontinue;\n+\t\t      }\n+\t\t  }\n \t\tfor (i = 0; i < gimple_call_num_args (stmt); ++i)\n \t\t  {\n \t\t    tree *argp = gimple_call_arg_ptr (stmt, i);"}]}