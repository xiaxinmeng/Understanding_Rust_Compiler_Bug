{"sha": "05f41289d88658c05f34f713aed66054e12ff316", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVmNDEyODlkODg2NThjMDVmMzRmNzEzYWVkNjYwNTRlMTJmZjMxNg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2008-05-18T23:19:38Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2008-05-18T23:19:38Z"}, "message": "re PR middle-end/35509 (builtin isinf() mismatch to compile-time substitution)\n\n\tPR middle-end/35509\n\n\t* builtins.c (mathfn_built_in_1): Renamed from mathfn_built_in.\n\tAdd `implicit' parameter.  Handle BUILT_IN_SIGNBIT.\n\t(mathfn_built_in): Rewrite in terms of mathfn_built_in_1.\n\t(fold_builtin_classify): Handle BUILT_IN_ISINF_SIGN.\n\t(fold_builtin_1): Likewise.\n\t* builtins.def (BUILT_IN_ISINF_SIGN): New.\n\tc-common.c (check_builtin_function_arguments): Handle\n\tBUILT_IN_ISINF_SIGN.\n\t* doc/extend.texi: Document __builtin_isinf_sign.\n\t* fold-const.c (operand_equal_p): Handle COND_EXPR.\n\ntestsuite:\n\t* gcc.dg/builtins-error.c: Test __builtin_isinf_sign.\n\t* gcc.dg/tg-tests.h: Likewise.  Mark variables volatile.\n\t* gcc.dg/torture/builtin-isinf_sign-1.c: New test.\n\nFrom-SVN: r135517", "tree": {"sha": "90c75e8f2433a04ac95315cbba4166b8f7f7b3d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90c75e8f2433a04ac95315cbba4166b8f7f7b3d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05f41289d88658c05f34f713aed66054e12ff316", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05f41289d88658c05f34f713aed66054e12ff316", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05f41289d88658c05f34f713aed66054e12ff316", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05f41289d88658c05f34f713aed66054e12ff316/comments", "author": null, "committer": null, "parents": [{"sha": "d393bbd73754dfe54fac24d350c789316f17428f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d393bbd73754dfe54fac24d350c789316f17428f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d393bbd73754dfe54fac24d350c789316f17428f"}], "stats": {"total": 126, "additions": 112, "deletions": 14}, "files": [{"sha": "74b7b35d46ed70c80e341a3a28769e43d3b8a906", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f41289d88658c05f34f713aed66054e12ff316/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f41289d88658c05f34f713aed66054e12ff316/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05f41289d88658c05f34f713aed66054e12ff316", "patch": "@@ -1,3 +1,19 @@\n+2008-05-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\tPR middle-end/35509\n+\n+\t* builtins.c (mathfn_built_in_1): Renamed from mathfn_built_in.\n+\tAdd `implicit' parameter.  Handle BUILT_IN_SIGNBIT.\n+\t(mathfn_built_in): Rewrite in terms of mathfn_built_in_1.\n+\t(fold_builtin_classify): Handle BUILT_IN_ISINF_SIGN.\n+\t(fold_builtin_1): Likewise.\n+\t* builtins.def (BUILT_IN_ISINF_SIGN): New.\n+\tc-common.c (check_builtin_function_arguments): Handle\n+\tBUILT_IN_ISINF_SIGN.\n+\t* doc/extend.texi: Document __builtin_isinf_sign.\n+\t* fold-const.c (operand_equal_p): Handle COND_EXPR.\n+\n+\n 2008-05-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-ssa-dom.c (tree_ssa_dominator_optimize): If some blocks need"}, {"sha": "3060f80ae00e981829caeadf92efc0cb4ce6dd91", "filename": "gcc/builtins.c", "status": "modified", "additions": 54, "deletions": 6, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f41289d88658c05f34f713aed66054e12ff316/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f41289d88658c05f34f713aed66054e12ff316/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=05f41289d88658c05f34f713aed66054e12ff316", "patch": "@@ -1669,10 +1669,15 @@ expand_builtin_classify_type (tree exp)\n   fcodel = BUILT_IN_MATHFN##L_R ; break;\n \n /* Return mathematic function equivalent to FN but operating directly\n-   on TYPE, if available.  If we can't do the conversion, return zero.  */\n-tree\n-mathfn_built_in (tree type, enum built_in_function fn)\n+   on TYPE, if available.  If IMPLICIT is true find the function in\n+   implicit_built_in_decls[], otherwise use built_in_decls[].  If we\n+   can't do the conversion, return zero.  */\n+\n+static tree\n+mathfn_built_in_1 (tree type, enum built_in_function fn, bool implicit)\n {\n+  tree const *const fn_arr\n+    = implicit ? implicit_built_in_decls : built_in_decls;\n   enum built_in_function fcode, fcodef, fcodel;\n \n   switch (fn)\n@@ -1747,6 +1752,7 @@ mathfn_built_in (tree type, enum built_in_function fn)\n       CASE_MATHFN (BUILT_IN_SCALB)\n       CASE_MATHFN (BUILT_IN_SCALBLN)\n       CASE_MATHFN (BUILT_IN_SCALBN)\n+      CASE_MATHFN (BUILT_IN_SIGNBIT)\n       CASE_MATHFN (BUILT_IN_SIGNIFICAND)\n       CASE_MATHFN (BUILT_IN_SIN)\n       CASE_MATHFN (BUILT_IN_SINCOS)\n@@ -1765,15 +1771,23 @@ mathfn_built_in (tree type, enum built_in_function fn)\n       }\n \n   if (TYPE_MAIN_VARIANT (type) == double_type_node)\n-    return implicit_built_in_decls[fcode];\n+    return fn_arr[fcode];\n   else if (TYPE_MAIN_VARIANT (type) == float_type_node)\n-    return implicit_built_in_decls[fcodef];\n+    return fn_arr[fcodef];\n   else if (TYPE_MAIN_VARIANT (type) == long_double_type_node)\n-    return implicit_built_in_decls[fcodel];\n+    return fn_arr[fcodel];\n   else\n     return NULL_TREE;\n }\n \n+/* Like mathfn_built_in_1(), but always use the implicit array.  */\n+\n+tree\n+mathfn_built_in (tree type, enum built_in_function fn)\n+{\n+  return mathfn_built_in_1 (type, fn, /*implicit=*/ 1);\n+}\n+\n /* If errno must be maintained, expand the RTL to check if the result,\n    TARGET, of a built-in function call, EXP, is NaN, and if so set\n    errno to EDOM.  */\n@@ -9668,6 +9682,37 @@ fold_builtin_classify (tree fndecl, tree arg, int builtin_index)\n \n       return NULL_TREE;\n \n+    case BUILT_IN_ISINF_SIGN:\n+      {\n+\t/* isinf_sign(x) -> isinf(x) ? (signbit(x) ? -1 : 1) : 0 */\n+\t/* In a boolean context, GCC will fold the inner COND_EXPR to\n+\t   1.  So e.g. \"if (isinf_sign(x))\" would be folded to just\n+\t   \"if (isinf(x) ? 1 : 0)\" which becomes \"if (isinf(x))\". */\n+\ttree signbit_fn = mathfn_built_in_1 (TREE_TYPE (arg), BUILT_IN_SIGNBIT, 0);\n+\ttree isinf_fn = built_in_decls[BUILT_IN_ISINF];\n+\ttree tmp = NULL_TREE;\n+\n+\targ = builtin_save_expr (arg);\n+\n+\tif (signbit_fn && isinf_fn)\n+\t  {\n+\t    tree signbit_call = build_call_expr (signbit_fn, 1, arg);\n+\t    tree isinf_call = build_call_expr (isinf_fn, 1, arg);\n+\n+\t    signbit_call = fold_build2 (NE_EXPR, integer_type_node,\n+\t\t\t\t\tsignbit_call, integer_zero_node);\n+\t    isinf_call = fold_build2 (NE_EXPR, integer_type_node,\n+\t\t\t\t      isinf_call, integer_zero_node);\n+\t    \n+\t    tmp = fold_build3 (COND_EXPR, integer_type_node, signbit_call,\n+\t\t\t       integer_minus_one_node, integer_one_node);\n+\t    tmp = fold_build3 (COND_EXPR, integer_type_node, isinf_call, tmp,\n+\t\t\t       integer_zero_node);\n+\t  }\n+\n+\treturn tmp;\n+      }\n+\n     case BUILT_IN_ISFINITE:\n       if (!HONOR_NANS (TYPE_MODE (TREE_TYPE (arg)))\n \t  && !HONOR_INFINITIES (TYPE_MODE (TREE_TYPE (arg))))\n@@ -10074,6 +10119,9 @@ fold_builtin_1 (tree fndecl, tree arg0, bool ignore)\n     case BUILT_IN_ISINFD128:\n       return fold_builtin_classify (fndecl, arg0, BUILT_IN_ISINF);\n \n+    case BUILT_IN_ISINF_SIGN:\n+      return fold_builtin_classify (fndecl, arg0, BUILT_IN_ISINF_SIGN);\n+\n     CASE_FLT_FN (BUILT_IN_ISNAN):\n     case BUILT_IN_ISNAND32:\n     case BUILT_IN_ISNAND64:"}, {"sha": "8bae2bd467ca05a976fc5da80de18ff1e0e57f5c", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f41289d88658c05f34f713aed66054e12ff316/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f41289d88658c05f34f713aed66054e12ff316/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=05f41289d88658c05f34f713aed66054e12ff316", "patch": "@@ -655,6 +655,7 @@ DEF_EXT_LIB_BUILTIN    (BUILT_IN_FINITED32, \"finited32\", BT_FN_INT_DFLOAT32, ATT\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_FINITED64, \"finited64\", BT_FN_INT_DFLOAT64, ATTR_CONST_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_FINITED128, \"finited128\", BT_FN_INT_DFLOAT128, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_ISFINITE, \"isfinite\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_TYPEGENERIC)\n+DEF_GCC_BUILTIN        (BUILT_IN_ISINF_SIGN, \"isinf_sign\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_TYPEGENERIC)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_ISINF, \"isinf\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_TYPEGENERIC)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_ISINFF, \"isinff\", BT_FN_INT_FLOAT, ATTR_CONST_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_ISINFL, \"isinfl\", BT_FN_INT_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)"}, {"sha": "67c9c0b538febcbc68bbe72cc68c3a42ede8c5dd", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f41289d88658c05f34f713aed66054e12ff316/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f41289d88658c05f34f713aed66054e12ff316/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=05f41289d88658c05f34f713aed66054e12ff316", "patch": "@@ -6674,6 +6674,7 @@ check_builtin_function_arguments (tree fndecl, int nargs, tree *args)\n \n     case BUILT_IN_ISFINITE:\n     case BUILT_IN_ISINF:\n+    case BUILT_IN_ISINF_SIGN:\n     case BUILT_IN_ISNAN:\n     case BUILT_IN_ISNORMAL:\n       if (validate_nargs (fndecl, nargs, 1))"}, {"sha": "36e81ffe55c182ddf1f05f4f5af8c524fece62b5", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f41289d88658c05f34f713aed66054e12ff316/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f41289d88658c05f34f713aed66054e12ff316/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=05f41289d88658c05f34f713aed66054e12ff316", "patch": "@@ -5768,6 +5768,7 @@ should be called and the @var{flag} argument passed to it.\n @findex __builtin_isnormal\n @findex __builtin_isgreater\n @findex __builtin_isgreaterequal\n+@findex __builtin_isinf_sign\n @findex __builtin_isless\n @findex __builtin_islessequal\n @findex __builtin_islessgreater\n@@ -6294,8 +6295,10 @@ the same names as the standard macros ( @code{isgreater},\n @code{islessgreater}, and @code{isunordered}) , with @code{__builtin_}\n prefixed.  We intend for a library implementor to be able to simply\n @code{#define} each standard macro to its built-in equivalent.\n-In the same fashion, GCC provides @code{isfinite} and @code{isnormal}\n-built-ins used with @code{__builtin_} prefixed.\n+In the same fashion, GCC provides @code{isfinite}, @code{isinf_sign}\n+and @code{isnormal} built-ins used with @code{__builtin_} prefixed.\n+The @code{isinf} and @code{isnan} builtins appear both with and\n+without the @code{__builtin_} prefix.\n \n @deftypefn {Built-in Function} int __builtin_types_compatible_p (@var{type1}, @var{type2})\n \n@@ -6579,6 +6582,14 @@ Similar to @code{__builtin_inf}, except the return\n type is @code{long double}.\n @end deftypefn\n \n+@deftypefn {Built-in Function} int __builtin_isinf_sign (...)\n+Similar to @code{isinf}, except the return value will be negative for\n+an argument of @code{-Inf}.  Note while the parameter list is an\n+ellipsis, this function only accepts exactly one floating point\n+argument.  GCC treats this parameter as type-generic, which means it\n+does not do default promotion from float to double.\n+@end deftypefn\n+\n @deftypefn {Built-in Function} double __builtin_nan (const char *str)\n This is an implementation of the ISO C99 function @code{nan}.\n "}, {"sha": "4113dc45b21beadbcabdf6752c45a3e42a2ac4fb", "filename": "gcc/fold-const.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f41289d88658c05f34f713aed66054e12ff316/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f41289d88658c05f34f713aed66054e12ff316/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=05f41289d88658c05f34f713aed66054e12ff316", "patch": "@@ -3258,6 +3258,9 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n \t\t  && operand_equal_p (TREE_OPERAND (arg0, 1),\n \t\t\t\t      TREE_OPERAND (arg1, 0), flags));\n \n+\tcase COND_EXPR:\n+\t  return OP_SAME (0) && OP_SAME (1) && OP_SAME (2);\n+\t  \n \tdefault:\n \t  return 0;\n \t}"}, {"sha": "c2dc86a21dd5b80553c499678b30060e46eea799", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f41289d88658c05f34f713aed66054e12ff316/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f41289d88658c05f34f713aed66054e12ff316/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=05f41289d88658c05f34f713aed66054e12ff316", "patch": "@@ -1,3 +1,9 @@\n+2008-05-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/builtins-error.c: Test __builtin_isinf_sign.\n+\t* gcc.dg/tg-tests.h: Likewise.  Mark variables volatile.\n+\t* gcc.dg/torture/builtin-isinf_sign-1.c: New test.\n+\n 2008-05-18  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* gfortran.dg/achar_3.f90: Adjust error messages."}, {"sha": "2c0ece1934b40a59d593415835a2ab148676bd4c", "filename": "gcc/testsuite/gcc.dg/builtins-error.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f41289d88658c05f34f713aed66054e12ff316/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f41289d88658c05f34f713aed66054e12ff316/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-error.c?ref=05f41289d88658c05f34f713aed66054e12ff316", "patch": "@@ -16,3 +16,8 @@ int test3(double x)\n {\n   return __builtin_isinf(x, x); /* { dg-error \"too many arguments\" } */\n }\n+\n+int test4(double x)\n+{\n+  return __builtin_isinf_sign(x, x); /* { dg-error \"too many arguments\" } */\n+}"}, {"sha": "c34e8888cfa394b6dfdcf07533cac9a954637398", "filename": "gcc/testsuite/gcc.dg/tg-tests.h", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f41289d88658c05f34f713aed66054e12ff316/gcc%2Ftestsuite%2Fgcc.dg%2Ftg-tests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f41289d88658c05f34f713aed66054e12ff316/gcc%2Ftestsuite%2Fgcc.dg%2Ftg-tests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftg-tests.h?ref=05f41289d88658c05f34f713aed66054e12ff316", "patch": "@@ -3,7 +3,7 @@\n void __attribute__ ((__noinline__))\n foo_1 (float f, double d, long double ld,\n        int res_unord, int res_isnan, int res_isinf,\n-       int res_isfin, int res_isnorm)\n+       int res_isinf_sign, int res_isfin, int res_isnorm)\n {\n   if (__builtin_isunordered (f, 0) != res_unord)\n     __builtin_abort ();\n@@ -40,6 +40,13 @@ foo_1 (float f, double d, long double ld,\n   if (__builtin_isinfl (ld) != res_isinf)\n     __builtin_abort ();\n \n+  if (__builtin_isinf_sign (f) != res_isinf_sign)\n+    __builtin_abort ();\n+  if (__builtin_isinf_sign (d) != res_isinf_sign)\n+    __builtin_abort ();\n+  if (__builtin_isinf_sign (ld) != res_isinf_sign)\n+    __builtin_abort ();\n+\n   if (__builtin_isnormal (f) != res_isnorm)\n     __builtin_abort ();\n   if (__builtin_isnormal (d) != res_isnorm)\n@@ -71,17 +78,17 @@ foo (float f, double d, long double ld,\n      int res_unord, int res_isnan, int res_isinf,\n      int res_isfin, int res_isnorm)\n {\n-  foo_1 (f, d, ld, res_unord, res_isnan, res_isinf, res_isfin, res_isnorm);\n+  foo_1 (f, d, ld, res_unord, res_isnan, res_isinf, res_isinf, res_isfin, res_isnorm);\n   /* Try all the values negated as well.  */\n-  foo_1 (-f, -d, -ld, res_unord, res_isnan, res_isinf, res_isfin, res_isnorm);\n+  foo_1 (-f, -d, -ld, res_unord, res_isnan, res_isinf, -res_isinf, res_isfin, res_isnorm);\n }\n \n int __attribute__ ((__noinline__))\n main_tests (void)\n {\n-  float f;\n-  double d;\n-  long double ld;\n+  volatile float f;\n+  volatile double d;\n+  volatile long double ld;\n   \n   /* Test NaN.  */\n   f = __builtin_nanf(\"\"); d = __builtin_nan(\"\"); ld = __builtin_nanl(\"\");"}]}