{"sha": "21fdfcc12c75a3ad3b0b4f2a3053f183941710d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFmZGZjYzEyYzc1YTNhZDNiMGI0ZjJhMzA1M2YxODM5NDE3MTBkNQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargls@comcast.net", "date": "2004-05-22T12:47:42Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-05-22T12:47:42Z"}, "message": "check.c (gfc_check_system_clock): New function.\n\n\t* check.c (gfc_check_system_clock): New function.\n\t* intrinsic.c (add_sym_3s): New function.\n\t(add_subroutines): Use it.\n\t* intrinsic.h (gfc_check_system_clock, gfc_resolve_system_clock):\n\tAdd prototypes.\n\t* iresolve.c (gfc_resolve_system_clock): New function.\nlibgfortran/\n\t* intrinsics/system_clock: New file.\n\t* Makefile.am: Add intrinsics/system_clock.c.\n\t* Makefile.in: Regenerate.\n\nFrom-SVN: r82131", "tree": {"sha": "861dbef282074d370fa3d6efc8e98b40d0c69ccd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/861dbef282074d370fa3d6efc8e98b40d0c69ccd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21fdfcc12c75a3ad3b0b4f2a3053f183941710d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21fdfcc12c75a3ad3b0b4f2a3053f183941710d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21fdfcc12c75a3ad3b0b4f2a3053f183941710d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21fdfcc12c75a3ad3b0b4f2a3053f183941710d5/comments", "author": null, "committer": null, "parents": [{"sha": "2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d8b59dfd5402cce6da3949fb1f84d7492ab5cbc"}], "stats": {"total": 360, "additions": 356, "deletions": 4}, "files": [{"sha": "f2c23546bbcff0768b323efe926df289b36d8ad7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21fdfcc12c75a3ad3b0b4f2a3053f183941710d5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21fdfcc12c75a3ad3b0b4f2a3053f183941710d5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=21fdfcc12c75a3ad3b0b4f2a3053f183941710d5", "patch": "@@ -1,3 +1,12 @@\n+2004-05-22  Steven G. Kargl  <kargls@comcast.net>\n+\n+\t* check.c (gfc_check_system_clock): New function.\n+\t* intrinsic.c (add_sym_3s): New function.\n+\t(add_subroutines): Use it.\n+\t* intrinsic.h (gfc_check_system_clock, gfc_resolve_system_clock):\n+\tAdd prototypes.\n+\t* iresolve.c (gfc_resolve_system_clock): New function.\n+\n 2004-05-22  Steven G. Kargl  <kargls@comcast.net>\n \n \t* invoke.texi: Document -Wunderflow and spell check."}, {"sha": "dadb1166ea9cf481d51905c224d845faf306a70c", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21fdfcc12c75a3ad3b0b4f2a3053f183941710d5/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21fdfcc12c75a3ad3b0b4f2a3053f183941710d5/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=21fdfcc12c75a3ad3b0b4f2a3053f183941710d5", "patch": "@@ -1864,3 +1864,62 @@ gfc_check_random_seed (gfc_expr * size, gfc_expr * put, gfc_expr * get)\n \n   return SUCCESS;\n }\n+\n+/* The arguments of SYSTEM_CLOCK are scalar, integer variables.  Note,\n+   count, count_rate, and count_max are all optional arguments */\n+\n+try\n+gfc_check_system_clock (gfc_expr * count, gfc_expr * count_rate,\n+                        gfc_expr * count_max)\n+{\n+\n+  if (count != NULL)\n+    {\n+      if (scalar_check (count, 0) == FAILURE)\n+        return FAILURE;\n+\n+      if (type_check (count, 0, BT_INTEGER) == FAILURE)\n+        return FAILURE;\n+\n+      if (variable_check (count, 0) == FAILURE)\n+        return FAILURE;\n+    }\n+\n+  if (count_rate != NULL)\n+    {\n+      if (scalar_check (count_rate, 1) == FAILURE)\n+        return FAILURE;\n+\n+      if (type_check (count_rate, 1, BT_INTEGER) == FAILURE)\n+        return FAILURE;\n+\n+      if (variable_check (count_rate, 1) == FAILURE)\n+        return FAILURE;\n+\n+      if (count != NULL && same_type_check(count, 0, count_rate, 1) == FAILURE)\n+        return FAILURE;\n+\n+    }\n+\n+  if (count_max != NULL)\n+    {\n+      if (scalar_check (count_max, 2) == FAILURE)\n+        return FAILURE;\n+\n+      if (type_check (count_max, 2, BT_INTEGER) == FAILURE)\n+        return FAILURE;\n+\n+      if (variable_check (count_max, 2) == FAILURE)\n+        return FAILURE;\n+\n+      if (count != NULL && same_type_check(count, 0, count_max, 2) == FAILURE)\n+        return FAILURE;\n+\n+      if (count_rate != NULL\n+          && same_type_check(count_rate, 1, count_max, 2) == FAILURE)\n+        return FAILURE;\n+\n+   }\n+\n+    return SUCCESS;\n+}"}, {"sha": "7b77fdb6eedda9426eac1fe98a9f80367386877f", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21fdfcc12c75a3ad3b0b4f2a3053f183941710d5/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21fdfcc12c75a3ad3b0b4f2a3053f183941710d5/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=21fdfcc12c75a3ad3b0b4f2a3053f183941710d5", "patch": "@@ -453,6 +453,33 @@ static void add_sym_3 (const char *name, int elemental, int actual_ok, bt type,\n \t   (void*)0);\n }\n \n+/* Add the name of an intrinsic subroutine with three arguments to the list\n+   of intrinsic names. */\n+\n+static void add_sym_3s (const char *name, int elemental, int actual_ok, bt type,\n+\t\t       int kind,\n+\t\t       try (*check)(gfc_expr *,gfc_expr *,gfc_expr *),\n+\t\t       gfc_expr *(*simplify)(gfc_expr *,gfc_expr *,gfc_expr *),\n+\t\t       void (*resolve)(gfc_code *),\n+\t\t       const char* a1, bt type1, int kind1, int optional1,\n+\t\t       const char* a2, bt type2, int kind2, int optional2,\n+\t\t       const char* a3, bt type3, int kind3, int optional3\n+\t\t       ) {\n+  gfc_check_f cf;\n+  gfc_simplify_f sf;\n+  gfc_resolve_f rf;\n+\n+  cf.f3 = check;\n+  sf.f3 = simplify;\n+  rf.s1 = resolve;\n+\n+  add_sym (name, elemental, actual_ok, type, kind, cf, sf, rf,\n+\t   a1, type1, kind1, optional1,\n+\t   a2, type2, kind2, optional2,\n+\t   a3, type3, kind3, optional3,\n+\t   (void*)0);\n+}\n+\n \n static void add_sym_4 (const char *name, int elemental, int actual_ok, bt type,\n \t\t       int kind,\n@@ -1632,8 +1659,8 @@ add_subroutines (void)\n \t     sz, BT_INTEGER, di, 1, pt, BT_INTEGER, di, 1,\n \t     gt, BT_INTEGER, di, 1);\n \n-  add_sym_3 (\"system_clock\", 0, 1, BT_UNKNOWN, 0,\n-\t     NULL, NULL, NULL,\n+  add_sym_3s (\"system_clock\", 0, 1, BT_UNKNOWN, 0,\n+\t     gfc_check_system_clock, NULL, gfc_resolve_system_clock,\n \t     c, BT_INTEGER, di, 1, cr, BT_INTEGER, di, 1,\n \t     cm, BT_INTEGER, di, 1);\n }"}, {"sha": "b2c0e780f4ef291e7f23e44a12a2a9b4ca5686be", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21fdfcc12c75a3ad3b0b4f2a3053f183941710d5/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21fdfcc12c75a3ad3b0b4f2a3053f183941710d5/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=21fdfcc12c75a3ad3b0b4f2a3053f183941710d5", "patch": "@@ -99,6 +99,7 @@ try gfc_check_x (gfc_expr *);\n \n /* Intrinsic subroutines.  */\n try gfc_check_cpu_time (gfc_expr *);\n+try gfc_check_system_clock (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_date_and_time (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_mvbits (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *,\n \t\t      gfc_expr *);\n@@ -303,6 +304,7 @@ void gfc_resolve_verify (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n \n /* Intrinsic subroutine resolution.  */\n void gfc_resolve_cpu_time (gfc_code *);\n+void gfc_resolve_system_clock(gfc_code *);\n void gfc_resolve_random_number (gfc_code *);\n \n "}, {"sha": "46e38037f60adb5077574461390bd546db837bc9", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21fdfcc12c75a3ad3b0b4f2a3053f183941710d5/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21fdfcc12c75a3ad3b0b4f2a3053f183941710d5/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=21fdfcc12c75a3ad3b0b4f2a3053f183941710d5", "patch": "@@ -1369,6 +1369,27 @@ gfc_resolve_random_number (gfc_code * c ATTRIBUTE_UNUSED)\n   c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n }\n \n+/* Determine if the arguments to SYSTEM_CLOCK are INTEGER(4) or INTEGER(8) */\n+\n+void\n+gfc_resolve_system_clock (gfc_code * c)\n+{\n+  const char *name;\n+  int kind;\n+\n+  if (c->ext.actual->expr != NULL)\n+    kind = c->ext.actual->expr->ts.kind;\n+  else if (c->ext.actual->next->expr != NULL)\n+      kind = c->ext.actual->next->expr->ts.kind;\n+  else if (c->ext.actual->next->next->expr != NULL)\n+      kind = c->ext.actual->next->next->expr->ts.kind;\n+  else\n+    kind = gfc_default_integer_kind ();\n+\n+  name = gfc_get_string (PREFIX(\"system_clock_%d\"), kind);\n+  c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n+}\n+\n \n void\n gfc_iresolve_init_1 (void)"}, {"sha": "e6cfffb132c9df397289afec2b70fa8d5284c686", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21fdfcc12c75a3ad3b0b4f2a3053f183941710d5/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21fdfcc12c75a3ad3b0b4f2a3053f183941710d5/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=21fdfcc12c75a3ad3b0b4f2a3053f183941710d5", "patch": "@@ -1,3 +1,9 @@\n+2004-05-22  Steven G. Kargl  <kargls@comcast.net>\n+\n+\t* intrinsics/system_clock: New file.\n+\t* Makefile.am: Add intrinsics/system_clock.c.\n+\t* Makefile.in: Regenerate.\n+\n 2004-05-21  Roger Sayle  <roger@eyesopen.com>\n \n \t* io/format.c (parse_format_list): Allow the comma after a string"}, {"sha": "b451b3811461357e0aae189b001b52083ddec91e", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21fdfcc12c75a3ad3b0b4f2a3053f183941710d5/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21fdfcc12c75a3ad3b0b4f2a3053f183941710d5/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=21fdfcc12c75a3ad3b0b4f2a3053f183941710d5", "patch": "@@ -49,6 +49,7 @@ intrinsics/random.c \\\n intrinsics/reshape_generic.c \\\n intrinsics/reshape_packed.c \\\n intrinsics/selected_kind.f90 \\\n+intrinsics/system_clock.c \\\n intrinsics/transpose_generic.c \\\n intrinsics/unpack_generic.c \\\n runtime/in_pack_generic.c \\"}, {"sha": "9c878de3f5d30d9ac52573e00e412b246e9175ac", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21fdfcc12c75a3ad3b0b4f2a3053f183941710d5/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21fdfcc12c75a3ad3b0b4f2a3053f183941710d5/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=21fdfcc12c75a3ad3b0b4f2a3053f183941710d5", "patch": "@@ -121,8 +121,8 @@ am__objects_33 = associated.lo abort.lo cpu_time.lo cshift0.lo \\\n \teoshift0.lo eoshift2.lo ishftc.lo pack_generic.lo size.lo \\\n \tspread_generic.lo string_intrinsics.lo random.lo \\\n \treshape_generic.lo reshape_packed.lo selected_kind.lo \\\n-\ttranspose_generic.lo unpack_generic.lo in_pack_generic.lo \\\n-\tin_unpack_generic.lo\n+\tsystem_clock.lo transpose_generic.lo unpack_generic.lo \\\n+\tin_pack_generic.lo in_unpack_generic.lo\n am__objects_34 =\n am__objects_35 = _abs_c4.lo _abs_c8.lo _abs_i4.lo _abs_i8.lo \\\n \t_abs_r4.lo _abs_r8.lo _exp_r4.lo _exp_r8.lo _exp_c4.lo \\\n@@ -272,6 +272,7 @@ am__depfiles_maybe = depfiles\n @AMDEP_TRUE@\t./$(DEPDIR)/sum_c4.Plo ./$(DEPDIR)/sum_c8.Plo \\\n @AMDEP_TRUE@\t./$(DEPDIR)/sum_i4.Plo ./$(DEPDIR)/sum_i8.Plo \\\n @AMDEP_TRUE@\t./$(DEPDIR)/sum_r4.Plo ./$(DEPDIR)/sum_r8.Plo \\\n+@AMDEP_TRUE@\t./$(DEPDIR)/system_clock.Plo \\\n @AMDEP_TRUE@\t./$(DEPDIR)/transfer.Plo \\\n @AMDEP_TRUE@\t./$(DEPDIR)/transpose_generic.Plo \\\n @AMDEP_TRUE@\t./$(DEPDIR)/transpose_i4.Plo \\\n@@ -442,6 +443,7 @@ intrinsics/random.c \\\n intrinsics/reshape_generic.c \\\n intrinsics/reshape_packed.c \\\n intrinsics/selected_kind.f90 \\\n+intrinsics/system_clock.c \\\n intrinsics/transpose_generic.c \\\n intrinsics/unpack_generic.c \\\n runtime/in_pack_generic.c \\\n@@ -1009,6 +1011,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sum_i8.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sum_r4.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sum_r8.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/system_clock.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/transfer.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/transpose_generic.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/transpose_i4.Plo@am__quote@\n@@ -4596,6 +4599,30 @@ reshape_packed.lo: intrinsics/reshape_packed.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o reshape_packed.lo `test -f 'intrinsics/reshape_packed.c' || echo '$(srcdir)/'`intrinsics/reshape_packed.c\n \n+system_clock.o: intrinsics/system_clock.c\n+@am__fastdepCC_TRUE@\tif $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT system_clock.o -MD -MP -MF \"$(DEPDIR)/system_clock.Tpo\" -c -o system_clock.o `test -f 'intrinsics/system_clock.c' || echo '$(srcdir)/'`intrinsics/system_clock.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/system_clock.Tpo\" \"$(DEPDIR)/system_clock.Po\"; else rm -f \"$(DEPDIR)/system_clock.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='intrinsics/system_clock.c' object='system_clock.o' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/system_clock.Po' tmpdepfile='$(DEPDIR)/system_clock.TPo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o system_clock.o `test -f 'intrinsics/system_clock.c' || echo '$(srcdir)/'`intrinsics/system_clock.c\n+\n+system_clock.obj: intrinsics/system_clock.c\n+@am__fastdepCC_TRUE@\tif $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT system_clock.obj -MD -MP -MF \"$(DEPDIR)/system_clock.Tpo\" -c -o system_clock.obj `if test -f 'intrinsics/system_clock.c'; then $(CYGPATH_W) 'intrinsics/system_clock.c'; else $(CYGPATH_W) '$(srcdir)/intrinsics/system_clock.c'; fi`; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/system_clock.Tpo\" \"$(DEPDIR)/system_clock.Po\"; else rm -f \"$(DEPDIR)/system_clock.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='intrinsics/system_clock.c' object='system_clock.obj' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/system_clock.Po' tmpdepfile='$(DEPDIR)/system_clock.TPo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o system_clock.obj `if test -f 'intrinsics/system_clock.c'; then $(CYGPATH_W) 'intrinsics/system_clock.c'; else $(CYGPATH_W) '$(srcdir)/intrinsics/system_clock.c'; fi`\n+\n+system_clock.lo: intrinsics/system_clock.c\n+@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT system_clock.lo -MD -MP -MF \"$(DEPDIR)/system_clock.Tpo\" -c -o system_clock.lo `test -f 'intrinsics/system_clock.c' || echo '$(srcdir)/'`intrinsics/system_clock.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/system_clock.Tpo\" \"$(DEPDIR)/system_clock.Plo\"; else rm -f \"$(DEPDIR)/system_clock.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='intrinsics/system_clock.c' object='system_clock.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tdepfile='$(DEPDIR)/system_clock.Plo' tmpdepfile='$(DEPDIR)/system_clock.TPlo' @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o system_clock.lo `test -f 'intrinsics/system_clock.c' || echo '$(srcdir)/'`intrinsics/system_clock.c\n+\n transpose_generic.o: intrinsics/transpose_generic.c\n @am__fastdepCC_TRUE@\tif $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT transpose_generic.o -MD -MP -MF \"$(DEPDIR)/transpose_generic.Tpo\" -c -o transpose_generic.o `test -f 'intrinsics/transpose_generic.c' || echo '$(srcdir)/'`intrinsics/transpose_generic.c; \\\n @am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/transpose_generic.Tpo\" \"$(DEPDIR)/transpose_generic.Po\"; else rm -f \"$(DEPDIR)/transpose_generic.Tpo\"; exit 1; fi"}, {"sha": "6b6ae9d06a3156bb01f33b568cc1e98c765e6b16", "filename": "libgfortran/intrinsics/system_clock.c", "status": "added", "additions": 200, "deletions": 0, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21fdfcc12c75a3ad3b0b4f2a3053f183941710d5/libgfortran%2Fintrinsics%2Fsystem_clock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21fdfcc12c75a3ad3b0b4f2a3053f183941710d5/libgfortran%2Fintrinsics%2Fsystem_clock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fsystem_clock.c?ref=21fdfcc12c75a3ad3b0b4f2a3053f183941710d5", "patch": "@@ -0,0 +1,200 @@\n+/* Implementation of the SYSTEM_CLOCK intrinsic.\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Lesser General Public\n+License as published by the Free Software Foundation; either\n+version 2.1 of the License, or (at your option) any later version.\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Lesser General Public License for more details.\n+\n+You should have received a copy of the GNU Lesser General Public\n+License along with libgfortran; see the file COPYING.LIB.  If not,\n+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include <sys/types.h>\n+#include \"libgfortran.h\"\n+\n+#include <limits.h>\n+\n+#if defined(HAVE_SYS_TIME_H) && defined(HAVE_GETTIMEOFDAY)\n+#  include <sys/time.h>\n+#  define TCK 1000\n+#elif defined(HAVE_TIME_H)\n+#  include <time.h>\n+#  define TCK 1\n+#else\n+#define TCK 0\n+#endif\n+\n+\n+#if defined(HAVE_SYS_TIME_H) && defined(HAVE_GETTIMEOFDAY)\n+static struct timeval tp0 = {-1, 0};\n+#elif defined(HAVE_TIME_H)\n+static time_t t0 = (time_t) -2;\n+#endif\n+\n+/* prefix(system_clock_4) is the INTEGER(4) version of the SYSTEM_CLOCK\n+   intrinsic subroutine.  It returns the number of clock ticks for the current\n+   system time, the number of ticks per second, and the maximum possible value\n+   for COUNT.  On the first call to SYSTEM_CLOCK, COUNT is set to zero. */\n+\n+void\n+prefix(system_clock_4)(GFC_INTEGER_4 *count, GFC_INTEGER_4 *count_rate,\n+\t\t       GFC_INTEGER_4 *count_max)\n+{\n+  GFC_INTEGER_4 cnt;\n+  GFC_INTEGER_4 rate;\n+  GFC_INTEGER_4 mx;\n+\n+#if defined(HAVE_SYS_TIME_H) && defined(HAVE_GETTIMEOFDAY)\n+  struct timeval tp1;\n+  struct timezone tzp;\n+  double t;\n+\n+  if (gettimeofday(&tp1, &tzp) == 0)\n+    {\n+      if (tp0.tv_sec < 0)\n+        {\n+          tp0 = tp1;\n+          cnt = 0;\n+        }\n+      else\n+        {\n+\t  /* TODO: Convert this to integer arithmetic.  */\n+          t  = (double) (tp1.tv_sec  - tp0.tv_sec);\n+          t += (double) (tp1.tv_usec - tp0.tv_usec) * 1.e-6;\n+          t *= TCK;\n+\n+          if (t > (double) GFC_INTEGER_4_HUGE)\n+            {\n+              /* Time has wrapped. */\n+              while (t > (double) GFC_INTEGER_4_HUGE)\n+                t -= (double) GFC_INTEGER_4_HUGE;\n+              tp0 = tp1;\n+            }\n+\t  cnt = (GFC_INTEGER_4) t;\n+        }\n+      rate = TCK;\n+      mx = GFC_INTEGER_4_HUGE;\n+    }\n+  else\n+    {\n+      if (count != NULL) *count = - GFC_INTEGER_4_HUGE;\n+      if (count_rate != NULL) *count_rate = 0;\n+      if (count_max != NULL) *count_max = 0;\n+    }\n+#elif defined(HAVE_TIME_H)\n+  time_t t, t1;\n+\n+  t1 = time(NULL);\n+\n+  if (t1 == (time_t) -1)\n+    {\n+      cnt = - GFC_INTEGER_4_HUGE;\n+      mx = 0;\n+    }\n+  else if (t0 == (time_t) -2) \n+    t0 = t1;\n+  else\n+    {\n+      /* The timer counts in seconts, so for simplicity assume it never wraps.\n+\t Even with 32-bit counters this only happens once every 68 years.  */\n+      cnt = t1 - t0;\n+      mx = GFC_INTEGER_4_HUGE;\n+    }\n+#else\n+  cnt = - GFC_INTEGER_4_HUGE;\n+  mx = 0;\n+#endif\n+  if (count != NULL) *count = cnt;\n+  if (count_rate != NULL) *count_rate = TCK;\n+  if (count_max != NULL) *count_max = mx;\n+}\n+\n+\n+/* INTEGER(8) version of the above routine.  */\n+\n+void\n+prefix(system_clock_8)(GFC_INTEGER_8 *count, GFC_INTEGER_8 *count_rate,\n+\t\t       GFC_INTEGER_8 *count_max)\n+{\n+  GFC_INTEGER_8 cnt;\n+  GFC_INTEGER_8 rate;\n+  GFC_INTEGER_8 mx;\n+\n+#if defined(HAVE_SYS_TIME_H) && defined(HAVE_GETTIMEOFDAY)\n+  struct timeval tp1;\n+  struct timezone tzp;\n+  double t;\n+\n+  if (gettimeofday(&tp1, &tzp) == 0)\n+    {\n+      if (tp0.tv_sec < 0)\n+        {\n+          tp0 = tp1;\n+          cnt = 0;\n+        }\n+      else\n+        {\n+\t  /* TODO: Convert this to integer arithmetic.  */\n+          t  = (double) (tp1.tv_sec  - tp0.tv_sec);\n+          t += (double) (tp1.tv_usec - tp0.tv_usec) * 1.e-6;\n+          t *= TCK;\n+\n+          if (t > (double) GFC_INTEGER_8_HUGE)\n+            {\n+              /* Time has wrapped. */\n+              while (t > (double) GFC_INTEGER_8_HUGE)\n+                t -= (double) GFC_INTEGER_8_HUGE;\n+              tp0 = tp1;\n+            }\n+\t  cnt = (GFC_INTEGER_8) t;\n+        }\n+      rate = TCK;\n+      mx = GFC_INTEGER_8_HUGE;\n+    }\n+  else\n+    {\n+      if (count != NULL) *count = - GFC_INTEGER_8_HUGE;\n+      if (count_rate != NULL) *count_rate = 0;\n+      if (count_max != NULL) *count_max = 0;\n+    }\n+#elif defined(HAVE_TIME_H)\n+  time_t t, t1;\n+\n+  t1 = time(NULL);\n+\n+  if (t1 == (time_t) -1)\n+    {\n+      cnt = - GFC_INTEGER_8_HUGE;\n+      mx = 0;\n+    }\n+  else if (t0 == (time_t) -2) \n+    t0 = t1;\n+  else\n+    {\n+      /* The timer counts in seconts, so for simplicity assume it never wraps.\n+\t Even with 32-bit counters this only happens once every 68 years.  */\n+      cnt = t1 - t0;\n+      mx = GFC_INTEGER_8_HUGE;\n+    }\n+#else\n+  cnt = - GFC_INTEGER_8_HUGE;\n+  mx = 0;\n+#endif\n+  if (count != NULL)\n+    *count = cnt;\n+  if (count_rate != NULL)\n+    *count_rate = TCK;\n+  if (count_max != NULL)\n+    *count_max = mx;\n+}\n+"}]}