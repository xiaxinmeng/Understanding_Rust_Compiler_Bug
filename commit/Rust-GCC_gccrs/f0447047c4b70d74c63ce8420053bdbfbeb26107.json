{"sha": "f0447047c4b70d74c63ce8420053bdbfbeb26107", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA0NDcwNDdjNGI3MGQ3NGM2M2NlODQyMDA1M2JkYmZiZWIyNjEwNw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "1999-11-03T19:25:13Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "1999-11-03T19:25:13Z"}, "message": "Actually removed files which were supposedly\nremoved a long time ago.\n\nFrom-SVN: r30379", "tree": {"sha": "ceb7d28c254b76b64efc3bb9f90d8b4d41262884", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ceb7d28c254b76b64efc3bb9f90d8b4d41262884"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0447047c4b70d74c63ce8420053bdbfbeb26107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0447047c4b70d74c63ce8420053bdbfbeb26107", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0447047c4b70d74c63ce8420053bdbfbeb26107", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0447047c4b70d74c63ce8420053bdbfbeb26107/comments", "author": null, "committer": null, "parents": [{"sha": "241a1bcc87f062a68b0dc15a3a8bdfc647e4916c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/241a1bcc87f062a68b0dc15a3a8bdfc647e4916c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/241a1bcc87f062a68b0dc15a3a8bdfc647e4916c"}], "stats": {"total": 614, "additions": 0, "deletions": 614}, "files": [{"sha": "949200b7a29124822177d5b728488e9b6d47b0ad", "filename": "libjava/gnu/gcj/util/path/CacheEntry.java", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/241a1bcc87f062a68b0dc15a3a8bdfc647e4916c/libjava%2Fgnu%2Fgcj%2Futil%2Fpath%2FCacheEntry.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/241a1bcc87f062a68b0dc15a3a8bdfc647e4916c/libjava%2Fgnu%2Fgcj%2Futil%2Fpath%2FCacheEntry.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Futil%2Fpath%2FCacheEntry.java?ref=241a1bcc87f062a68b0dc15a3a8bdfc647e4916c", "patch": "@@ -1,65 +0,0 @@\n-// CacheEntry.java -- directory cache\n-\n-/* Copyright (C) 1999  Cygnus Solutions\n-\n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n-\n-/* Author: Kresten Krab Thorup <krab@gnu.org>  */\n-\n-package gnu.gcj.util.path;\n-\n-import java.util.*;\n-import java.util.zip.*;\n-import java.io.*;\n-import java.net.*;\n-\n-\n-final class CacheEntry {\n-    String   dir;\n-    String[] files;\n-    long     time;\n-    \n-    CacheEntry (String d)\n-    {\n-\tdir = d;\n-\tfiles = new File(dir).list();\n-\ttime = System.currentTimeMillis ();\n-    }\n-    \n-    void touch ()\n-    {\n-\ttime = System.currentTimeMillis ();\n-    }\n-    \n-    final long EXPIRATION_TIME_MS = 1000;\n-    \n-    boolean is_old () {\n-\treturn (System.currentTimeMillis () - time) > EXPIRATION_TIME_MS;\n-    }\n-    \n-    public int hashCode () { return dir.hashCode(); }\n-    boolean contains (String file) { \n-\tif (files == null)\n-\t    return false;\n-\t\n-\tint index = file.lastIndexOf(SearchPath.file_seperator_char);\n-\tString f;\n-\t\n-\tif (index == -1)\n-\t    f = file;\n-\telse\n-\t    f = file.substring (index+1);\n-\t\n-\tfor (int i = 0; i < files.length; i++)\n-\t    {\n-\t\tif (f.equals (files[i])) return true;\n-\t    }\n-\t\n-\treturn false;\n-    }\n-}\n-"}, {"sha": "a9ca602341be61dc262ed561899985ffac28defe", "filename": "libjava/gnu/gcj/util/path/DirectoryPathEntry.java", "status": "removed", "additions": 0, "deletions": 136, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/241a1bcc87f062a68b0dc15a3a8bdfc647e4916c/libjava%2Fgnu%2Fgcj%2Futil%2Fpath%2FDirectoryPathEntry.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/241a1bcc87f062a68b0dc15a3a8bdfc647e4916c/libjava%2Fgnu%2Fgcj%2Futil%2Fpath%2FDirectoryPathEntry.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Futil%2Fpath%2FDirectoryPathEntry.java?ref=241a1bcc87f062a68b0dc15a3a8bdfc647e4916c", "patch": "@@ -1,136 +0,0 @@\n-// DirectoryPathEntry.java -- search path element for directories\n-\n-/* Copyright (C) 1999  Cygnus Solutions\n-\n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n-\n-/* Author: Kresten Krab Thorup <krab@gnu.org>  */\n-\n-package gnu.gcj.util.path;\n-\n-import java.util.*;\n-import java.util.zip.*;\n-import java.io.*;\n-import java.net.*;\n-\n-final class DirectoryPathEntry extends PathEntry\n-{\n-  final File dir;\n-  final String base_canon;\n-\n-  public String toString () { return base_canon; }\n-\n-  DirectoryPathEntry (File f)\n-    throws java.io.IOException\n-  {\n-    if (!f.isAbsolute ())\n-      throw new IllegalArgumentException ();\n-\n-    dir = f; \n-    base_canon = dir.getCanonicalPath ();\n-  }\n-\n-  /*\n-   *  We maintain a cache of files, so that we \n-   *  can avoid many calls to stat(), which are\n-   *  very expensive.\n-   *\n-   *  seen_cache contains (as keys) the directories \n-   *  which we have visited so far.  The values are \n-   *  instances of CacheEntry, containing a time stamp,\n-   *  and a list of files in that directory.\n-   *\n-   */\n-\n-  private Hashtable seen_cache = new Hashtable ();\n-\n-  private boolean in_cache (File f)\n-  {\n-    String rel_dir = f.getParent ();\n-    CacheEntry ent;\n-\n-    if (rel_dir == null)\n-      throw new IllegalArgumentException ();\n-\n-    ent = (CacheEntry) seen_cache.get (rel_dir);\n-    if (ent == null)\n-      {\n-\tent = new CacheEntry (rel_dir);\n-\tseen_cache.put (rel_dir, ent);\n-      }\n-\n-    if (ent.contains (f.getPath ()))\n-      {\n-\treturn true;\n-      }\n-\n-    if ( ent.is_old () )\n-      {\n-\tif (f.exists ())\n-\t  {\n-\t    seen_cache.remove (rel_dir);\n-\t    return true;\n-\t  }\n-\telse\n-\t  {\n-\t    ent.touch ();\n-\t  }\n-      }\n-\n-    return false;\n-  }\n-\n-  URL getURL (String file) {\n-    try {\n-      File f = new File((new File (dir, file).getCanonicalPath ()));\n-\t    \n-      if (! f.getCanonicalPath ().startsWith (base_canon))\n-\tthrow new IllegalArgumentException (file);\n-\n-\t\t\n-      if (in_cache (f))\n-\treturn new URL (\"file\", \"\", f.getPath ());\n-      else\n-\treturn null;\n-\n-    } catch (IOException x) {\n-      return null;\n-    }\n-  }\n-\n-  InputStream getStream (String file) {\n-    try {\t\t\t\n-      File f = new File((new File (dir, file)).getCanonicalPath ());\n-\n-      if (! f.getCanonicalPath ().startsWith (base_canon))\n-\tthrow new IllegalArgumentException (file);\n-\n-      if (in_cache (f))\n-\treturn new FileInputStream (f);\n-      else\n-\treturn null;\n-    } catch (IOException x) {\n-      return null;\n-    }\n-  }\n-\n-  byte[] getBytes (String file) {\n-    File f = new File (dir, file);\n-\n-    try {\t\t\t\n-      if (in_cache (f))\n-\treturn readbytes (new FileInputStream (f),\n-\t\t\t  (int) f.length ());\n-      else\n-\treturn null;\n-    } catch (IOException x) {\n-      return null;\n-    }\n-  }\n-\n-}\n-"}, {"sha": "f83fc1701702c0e3709754934baa59ba48e5f0af", "filename": "libjava/gnu/gcj/util/path/PathEntry.java", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/241a1bcc87f062a68b0dc15a3a8bdfc647e4916c/libjava%2Fgnu%2Fgcj%2Futil%2Fpath%2FPathEntry.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/241a1bcc87f062a68b0dc15a3a8bdfc647e4916c/libjava%2Fgnu%2Fgcj%2Futil%2Fpath%2FPathEntry.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Futil%2Fpath%2FPathEntry.java?ref=241a1bcc87f062a68b0dc15a3a8bdfc647e4916c", "patch": "@@ -1,55 +0,0 @@\n-// PathEntry.java -- abstract element of search paths\n-\n-/* Copyright (C) 1999  Cygnus Solutions\n-\n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n-\n-/* Author: Kresten Krab Thorup <krab@gnu.org>  */\n-\n-package gnu.gcj.util.path;\n-\n-import java.util.*;\n-import java.util.zip.*;\n-import java.io.*;\n-import java.net.*;\n-\n-abstract class PathEntry {\n-  abstract URL getURL (String file);\n-  abstract InputStream getStream (String file);\n-  abstract byte[] getBytes (String file);\n-\n-  /**\n-   *  Utility routine like InputStream.read(byte[], 0, len), but will\n-   *  read fully, even if all the data is not available at once.  \n-   */\n-  protected static byte[] readbytes (InputStream is, int length)\n-  {\n-    try {\n-\n-      byte[] data = new byte[length];\n-      int read; \n-      int off = 0;\n-\t    \n-      while (off != length)\n-\t{\n-\t  read = is.read (data, off, (int) (length-off));\n-\n-\t  if (read == -1) \n-\t    return null;\n-\n-\t  off += read;\n-\t}\n-\t    \n-      return data;\n-    } catch (IOException x) {\n-      return null;\n-    }\n-  }\n-\n-}\n-\n-"}, {"sha": "a07bbf5a00cc3ae44183cd723c613cadf20ec9c3", "filename": "libjava/gnu/gcj/util/path/SearchPath.java", "status": "removed", "additions": 0, "deletions": 205, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/241a1bcc87f062a68b0dc15a3a8bdfc647e4916c/libjava%2Fgnu%2Fgcj%2Futil%2Fpath%2FSearchPath.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/241a1bcc87f062a68b0dc15a3a8bdfc647e4916c/libjava%2Fgnu%2Fgcj%2Futil%2Fpath%2FSearchPath.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Futil%2Fpath%2FSearchPath.java?ref=241a1bcc87f062a68b0dc15a3a8bdfc647e4916c", "patch": "@@ -1,205 +0,0 @@\n-// SearchPath.java -- generic search path utility\n-\n-/* Copyright (C) 1999  Cygnus Solutions\n-\n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n-\n-/* Author: Kresten Krab Thorup <krab@gnu.org>  */\n-\n-\n-package gnu.gcj.util.path;\n-\n-import java.util.*;\n-import java.util.zip.*;\n-import java.io.*;\n-import java.net.*;\n-\n-final public class SearchPath {\n-\n-    final static String path_seperator\n-      = System.getProperty (\"path.separator\");\n-    final static char   path_seperator_char\n-      = path_seperator.charAt (0);\n-    final static String file_seperator\n-      = System.getProperty (\"file.separator\");\n-    final static char   file_seperator_char\n-      = file_seperator.charAt (0);\n-\n-    private Vector path;\n-\n-    /**\n-     *  Constructs a SearchPath object, given a system path.\n-     *  The system path is expected to be seperated by the string \n-     *  defined by the <code>path.seperator</code> property.  \n-     *  (<code>\":\"</code> on unix, <code>;</code> on Windows, etc.).\n-     *  The path may contain names of directories, or names of\n-     *  .zip or .jar files.  Elements that are neither of these\n-     *  are ignored.\n-     * @param sys_path the search path\n-     */\n-\n-    SearchPath (String sys_path)\n-    {\n-\tStringTokenizer st = new StringTokenizer (sys_path, path_seperator);\n-\tinit (st);\n-    }\n-\n-    /**\n-     *  Constructs a SearchPath object, given a Vector of \n-     *  <code>String</code>, <code>File</code> or <code>URL</code>\n-     *  objects.  \n-     *  The path may contain names of directories, or names of\n-     *  .zip or .jar files.  Elements that are neither of these\n-     *  are ignored.\n-     * @param p the vector of search path elements\n-     */\n-\n-    SearchPath (Vector p)\n-    {\n-\tinit (p.elements ());\n-    }\n-\n-    public URL getURL (String element)\n-    {\n-\tURL result;\n-\n-\tEnumeration e = path.elements ();\n-\twhile (e.hasMoreElements ())\n-\t    {\n-\t\tPathEntry ent = (PathEntry) e.nextElement ();\n-\n-\t\tresult = ent.getURL (element);\n-\t\t\n-\t\tif (result != null) \n-\t\t    {\n-\t\t\treturn result;\n-\t\t    }\n-\t    }\n-\n-\treturn null;\n-    }\n-    \n-\n-    public InputStream getStream (String element)\n-    {\n-\tInputStream result;\n-\n-\tEnumeration e = path.elements ();\n-\twhile (e.hasMoreElements ())\n-\t    {\n-\t\tPathEntry ent = (PathEntry) e.nextElement ();\n-\n-\t\tresult = ent.getStream (element);\n-\t\t\n-\t\tif (result != null) \n-\t\t    {\n-\t\t\treturn result;\n-\t\t    }\n-\t    }\n-\n-\treturn null;\n-    }\n-    \n-\n-    public byte[] getBytes (String element)\n-    {\n-\tbyte[] result;\n-\n-\tEnumeration e = path.elements ();\n-\twhile (e.hasMoreElements ())\n-\t    {\n-\t\tPathEntry ent = (PathEntry) e.nextElement ();\n-\t\tresult = ent.getBytes (element);\t\t\n-\t\tif (result != null) \n-\t\t    {\n-\t\t\t// System.out.println (\"loading \" + ent \n-\t\t\t//\t\t    + \"(\" + element + \")\");\n-\t\t\treturn result;\n-\t\t    }\n-\t    }\n-\n-\treturn null;\n-    }\n-    \n-\n-\n-    private void init (Enumeration st)\n-    {\n-\tpath = new Vector ();\n-\twhile (st.hasMoreElements ()) \n-\t    {  \n-\t\tObject e = st.nextElement ();\n-\n-\t\tString elem;\n-\t\tFile efile;\n-\n-\t\tif (e instanceof URL)\n-\t\t    {\n-\t\t\tpath.addElement (new URLPathEntry ((URL) e));\n-\t\t\tcontinue;\n-\t\t    }\n-\n-\t\tif (e instanceof File)\n-\t\t    {\n-\t\t\tefile = (File) e; \n-\t\t\telem = efile.getPath ();\n-\t\t    }\n-\n-\t\telse if (e instanceof String)\n-\t\t    {\n-\t\t\telem = (String) e;\n-\t\t\tefile   = new File (elem); \n-\t\t    }\n-\n-\t\telse\n-\t\t    throw new IllegalArgumentException ();\n-\n-\t\t// make sure it is absolute, so we won't get \n-\t\t// trouble if the cwd is changed...\n-\t\tif (! efile.isAbsolute ())\n-\t\t    efile = new File (efile.getAbsolutePath ());\n-\n-\t\tif (efile.isDirectory ())\n-\t\t    {\n-\t\t\ttry {\n-\t\t\t    path.addElement(new DirectoryPathEntry (efile));\n-\t\t\t} catch (IOException x) {\n-\t\t\t    /* ignore for now */\n-\t\t\t}\n-\t\t    }\n-\n-\t\telse if (efile.isFile ())\n-\t\t    {\n-\t\t\tint ext = elem.lastIndexOf ('.');\n-\t\t\tif (ext == -1)\n-\t\t\t    continue;\n-\n-\t\t\tif (!elem.substring(ext+1).equalsIgnoreCase(\"zip\"))\n-\t\t\t    continue;\n-\n-\t\t\tZipPathEntry zpe = null;\n-\t\t\ttry {\n-\t\t\t    zpe = new ZipPathEntry (efile);\n-\t\t\t} catch (ZipException zx) {\n-\t\t\t    System.err.println (\"SearchPath::ZipException\");\n-\t\t\t    zpe = null;\n-\t\t\t} catch (MalformedURLException mx) {\n-\t\t\t    System.err.println (\"SearchPath::URLException\");\n-\t\t\t    zpe = null;\n-\t\t\t} catch (IOException iox) {\n-\t\t\t    System.err.println (\"SearchPath::IOException\");\n-\t\t\t    zpe = null;\n-\t\t\t}\n-\t\t\tif (zpe != null) path.addElement (zpe);\n-\t\t    }\n-\t    }\n-\t\n-    }\n-    \n-    \n-}\n-"}, {"sha": "68f9200b555bc0449fb6f28c152d8e2233e2ca36", "filename": "libjava/gnu/gcj/util/path/URLPathEntry.java", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/241a1bcc87f062a68b0dc15a3a8bdfc647e4916c/libjava%2Fgnu%2Fgcj%2Futil%2Fpath%2FURLPathEntry.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/241a1bcc87f062a68b0dc15a3a8bdfc647e4916c/libjava%2Fgnu%2Fgcj%2Futil%2Fpath%2FURLPathEntry.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Futil%2Fpath%2FURLPathEntry.java?ref=241a1bcc87f062a68b0dc15a3a8bdfc647e4916c", "patch": "@@ -1,67 +0,0 @@\n-// URLPathEntry.java -- search path element for URL's\n-\n-/* Copyright (C) 1999  Cygnus Solutions\n-\n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n-\n-/* Author: Kresten Krab Thorup <krab@gnu.org>  */\n-\n-package gnu.gcj.util.path;\n-\n-import java.util.*;\n-import java.util.zip.*;\n-import java.io.*;\n-import java.net.*;\n-\n-final class URLPathEntry extends PathEntry {\n-    final URL base;\n-\n-    URLPathEntry (URL f) {\n-\tbase = f;\n-    }\n-\n-    public String toString () { return base.toString (); }\n-\n-    URL getURL (String file) {\n-\n-\ttry {\n-\t    URL res = new URL (base, file);\n-\t    InputStream is = res.openStream (); // exc if not found\n-\t    is.close ();\n-\t    return res;\n-\t} catch (java.io.IOException x) {\n-\t    return null;\n-\t}\n-    }\n-\n-    InputStream getStream (String file) {\n-\n-\ttry {\n-\t    URL res = new URL (base, file);\n-\t    return res.openStream ();\n-\t} catch (java.io.IOException x) {\n-\t    return null;\n-\t}\n-\n-    }\n-\n-    byte[] getBytes (String file) {\n-\n-\ttry {\n-\t    URL res = new URL (base, file);\n-\t    URLConnection conn = res.openConnection ();\n-\t    int len = conn.getContentLength ();\n-\t    if (len == -1) return null;\n-\t    return readbytes (conn.getInputStream (), len);\n-\t} catch (java.io.IOException x) {\n-\t    return null;\n-\t}\n-\n-    }\n-\n-}\n-"}, {"sha": "ac0226290a54592cb1672138d958370616735bbc", "filename": "libjava/gnu/gcj/util/path/ZipPathEntry.java", "status": "removed", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/241a1bcc87f062a68b0dc15a3a8bdfc647e4916c/libjava%2Fgnu%2Fgcj%2Futil%2Fpath%2FZipPathEntry.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/241a1bcc87f062a68b0dc15a3a8bdfc647e4916c/libjava%2Fgnu%2Fgcj%2Futil%2Fpath%2FZipPathEntry.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Futil%2Fpath%2FZipPathEntry.java?ref=241a1bcc87f062a68b0dc15a3a8bdfc647e4916c", "patch": "@@ -1,86 +0,0 @@\n-// ZipPathEntry.java -- search path element for directories\n-\n-/* Copyright (C) 1999  Cygnus Solutions\n-\n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n-\n-/* Author: Kresten Krab Thorup <krab@gnu.org>  */\n-\n-package gnu.gcj.util.path;\n-\n-import java.util.*;\n-import java.util.zip.*;\n-import java.io.*;\n-import java.net.*;\n-\n-\n-final class ZipPathEntry extends PathEntry {\n-    final ZipFile zip;\n-    final URL     file;\n-\n-    public String toString () { return zip.getName (); }\n-\n-    ZipPathEntry (File f) \n-\tthrows MalformedURLException, ZipException, IOException\n-    {\n-\tfile = new URL (\"file\", \"\", f.getPath ());\n-\tzip  = new ZipFile (f);\n-\tzip.readDirectory ();\n-    }\n-\n-    /* \n-       The url for a zip-file resource is,\n-\t   \n-       <code>file:///path/file.zip#name</code>\n-\t   \n-       Then, it is URLConnection's problem to handle that.\n-    */\n-\n-    URL getURL (String f) {\n-\n-\tZipEntry ent = zip.getEntry (f);\n-\n-\ttry {\n-\t    if (ent != null)\n-\t\treturn new URL (file, \"#\"+f);\n-\t    else\n-\t\treturn null;\n-\t} catch (IOException x) {\n-\t    return null;\n-\t}\n-    }\n-\n-    InputStream getStream (String f) {\n-\n-\tZipEntry ent = zip.getEntry (f);\n-\n-\ttry {\n-\t    if (ent != null)\n-\t\treturn zip.getInputStream (ent);\n-\t    else\n-\t\treturn null;\n-\t} catch (IOException x) {\n-\t    return null;\n-\t}\n-    }\n-\n-    byte[] getBytes (String f) {\n-\tZipEntry ent = zip.getEntry (f);\n-\n-\ttry {\n-\t    if (ent != null)\n-\t\treturn readbytes (zip.getInputStream (ent),\n-\t\t\t\t  (int) ent.getSize ());\n-\t    else\n-\t\treturn null;\n-\t} catch (IOException x) {\n-\t    return null;\n-\t}\n-\t    \n-    }\n-}\n-"}]}