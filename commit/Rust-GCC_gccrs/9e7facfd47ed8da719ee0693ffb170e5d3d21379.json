{"sha": "9e7facfd47ed8da719ee0693ffb170e5d3d21379", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU3ZmFjZmQ0N2VkOGRhNzE5ZWUwNjkzZmZiMTcwZTVkM2QyMTM3OQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-07-09T00:40:29Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-07-09T00:40:29Z"}, "message": "pod_char_traits.cc: New.\n\n\n\n2003-07-08  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/ext/pod_char_traits.cc: New.\n\t* include/ext/pod_char_traits.h: New.\n\t* include/Makefile.am (ext_headers): Add pod_char_traits.h.\n\t* include/Makefile.in: Regenerate.\n\t* docs/html/21_strings/howto.html: Update.\n\nFrom-SVN: r69115", "tree": {"sha": "6ee20f1e724aa7748d12bae16ce110123b65f891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ee20f1e724aa7748d12bae16ce110123b65f891"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e7facfd47ed8da719ee0693ffb170e5d3d21379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e7facfd47ed8da719ee0693ffb170e5d3d21379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e7facfd47ed8da719ee0693ffb170e5d3d21379", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e7facfd47ed8da719ee0693ffb170e5d3d21379/comments", "author": null, "committer": null, "parents": [{"sha": "11597bc9695394e49ccedab270213c8cb7199c65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11597bc9695394e49ccedab270213c8cb7199c65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11597bc9695394e49ccedab270213c8cb7199c65"}], "stats": {"total": 264, "additions": 254, "deletions": 10}, "files": [{"sha": "190d2d78b4ac23a45685e85fe18d49dc82c1f40b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e7facfd47ed8da719ee0693ffb170e5d3d21379/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e7facfd47ed8da719ee0693ffb170e5d3d21379/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9e7facfd47ed8da719ee0693ffb170e5d3d21379", "patch": "@@ -1,3 +1,11 @@\n+2003-07-08  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/ext/pod_char_traits.cc: New.\n+\t* include/ext/pod_char_traits.h: New.\n+\t* include/Makefile.am (ext_headers): Add pod_char_traits.h.\n+\t* include/Makefile.in: Regenerate.\n+\t* docs/html/21_strings/howto.html: Update.\n+\t\n 2003-07-08  Gawain Bolton  <gp.bolton@computer.org>\n \n \t* testsuite/performance/list_create_fill_sort.cc: New."}, {"sha": "49f17e7c8aa0b3fe2259e6b88a9240e79323d13c", "filename": "libstdc++-v3/docs/html/21_strings/howto.html", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e7facfd47ed8da719ee0693ffb170e5d3d21379/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e7facfd47ed8da719ee0693ffb170e5d3d21379/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html?ref=9e7facfd47ed8da719ee0693ffb170e5d3d21379", "patch": "@@ -414,13 +414,15 @@ <h2><a name=\"5\">Making strings of arbitrary character types</a></h2>\n       of work to do</a>, especially if you with to use i18n features\n       (facets require traits information but don't have a traits argument).\n    </p>\n-   <p>One example of how to specialize char_traits is given\n-      <a href=\"http://gcc.gnu.org/ml/libstdc++/2002-08/msg00260.html\">in\n-      this message</a>.  We agree that the way it's used with basic_string\n-      (scroll down to main()) doesn't look nice, but that's because\n-      <a href=\"http://gcc.gnu.org/ml/libstdc++/2002-08/msg00236.html\">the\n-      nice-looking first attempt</a> turned out to\n-      <a href=\"http://gcc.gnu.org/ml/libstdc++/2002-08/msg00242.html\">not\n+   <p>One example of how to specialize char_traits is given <a\n+      href=\"http://gcc.gnu.org/ml/libstdc++/2002-08/msg00260.html\">in\n+      this message</a>, which was then put into the file <code>\n+      include/ext/pod_char_traits.h</code> at a later date.  We agree\n+      that the way it's used with basic_string (scroll down to main())\n+      doesn't look nice, but that's because <a\n+      href=\"http://gcc.gnu.org/ml/libstdc++/2002-08/msg00236.html\">the\n+      nice-looking first attempt</a> turned out to <a\n+      href=\"http://gcc.gnu.org/ml/libstdc++/2002-08/msg00242.html\">not\n       be conforming C++</a>, due to the rule that CharT must be a POD.\n       (See how tricky this is?)\n    </p>"}, {"sha": "29b3077b8123fb73962c8f4bc56586794abc85fd", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e7facfd47ed8da719ee0693ffb170e5d3d21379/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e7facfd47ed8da719ee0693ffb170e5d3d21379/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=9e7facfd47ed8da719ee0693ffb170e5d3d21379", "patch": "@@ -226,6 +226,7 @@ ext_headers = \\\n \t${ext_srcdir}/mt_allocator.h \\\n \t${ext_srcdir}/new_allocator.h \\\n \t${ext_srcdir}/numeric \\\n+\t${ext_srcdir}/pod_char_traits.h \\\n \t${ext_srcdir}/pool_allocator.h \\\n \t${ext_srcdir}/rb_tree \\\n \t${ext_srcdir}/rope \\"}, {"sha": "879bf1694f638c2a8a543dfc970eaf138eb4095b", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e7facfd47ed8da719ee0693ffb170e5d3d21379/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e7facfd47ed8da719ee0693ffb170e5d3d21379/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=9e7facfd47ed8da719ee0693ffb170e5d3d21379", "patch": "@@ -135,6 +135,7 @@ glibcxx_toolexecdir = @glibcxx_toolexecdir@\n glibcxx_toolexeclibdir = @glibcxx_toolexeclibdir@\n ifGNUmake = @ifGNUmake@\n libtool_VERSION = @libtool_VERSION@\n+port_specific_symbol_file = @port_specific_symbol_file@\n toplevel_srcdir = @toplevel_srcdir@\n \n AUTOMAKE_OPTIONS = 1.3 cygnus\n@@ -346,6 +347,7 @@ ext_headers = \\\n \t${ext_srcdir}/mt_allocator.h \\\n \t${ext_srcdir}/new_allocator.h \\\n \t${ext_srcdir}/numeric \\\n+\t${ext_srcdir}/pod_char_traits.h \\\n \t${ext_srcdir}/pool_allocator.h \\\n \t${ext_srcdir}/rb_tree \\\n \t${ext_srcdir}/rope \\"}, {"sha": "aa6d7f48a6dca65f02fa158a32230cd9164ed251", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e7facfd47ed8da719ee0693ffb170e5d3d21379/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e7facfd47ed8da719ee0693ffb170e5d3d21379/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=9e7facfd47ed8da719ee0693ffb170e5d3d21379", "patch": "@@ -56,13 +56,12 @@ namespace std\n    *\n    *  See http://gcc.gnu.org/onlinedocs/libstdc++/21_strings/howto.html#5\n    *  for advice on how to make use of this class for \"unusual\" character\n-   *  types.\n+   *  types. Also, check out include/ext/pod_char_traits.h.\n   */\n   template<class _CharT>\n     struct char_traits\n     {\n       typedef _CharT \t\tchar_type;\n-      // Unsigned as wint_t is unsigned.\n       typedef unsigned long  \tint_type;\n       typedef streampos \tpos_type;\n       typedef streamoff \toff_type;"}, {"sha": "3cc4ac1fd338a35741e84081d8b1216864b4d0e1", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e7facfd47ed8da719ee0693ffb170e5d3d21379/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e7facfd47ed8da719ee0693ffb170e5d3d21379/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=9e7facfd47ed8da719ee0693ffb170e5d3d21379", "patch": "@@ -876,7 +876,6 @@ namespace std\n     __base.setf(ios_base::scientific, ios_base::floatfield);\n     return __base;\n   }\n-\n } // namespace std\n \n #endif /* _IOS_BASE_H */"}, {"sha": "0de7a0fd1e62966884d84cf233afc178edcc6a4d", "filename": "libstdc++-v3/include/ext/pod_char_traits.h", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e7facfd47ed8da719ee0693ffb170e5d3d21379/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e7facfd47ed8da719ee0693ffb170e5d3d21379/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h?ref=9e7facfd47ed8da719ee0693ffb170e5d3d21379", "patch": "@@ -0,0 +1,155 @@\n+// POD character, std::char_traits specialization -*- C++ -*-\n+\n+// Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// Gabriel Dos Reis <gdr@integrable-solutions.net>\n+// Benjamin Kosnik <bkoz@redhat.com>\n+\n+#ifndef _POD_CHAR_TRAITS_H\n+#define _POD_CHAR_TRAITS_H 1\n+ \n+#include <string>\n+\n+namespace __gnu_cxx\n+{\n+  template<typename V, typename I>\n+    struct character\n+    {\n+      typedef V \tvalue_type;\n+      typedef I \tint_type;\n+      value_type \tvalue;\n+    };\n+  \n+  template<typename V, typename I>\n+    inline bool \n+    operator==(const character<V, I>& lhs, const character<V, I>& rhs)\n+    { return lhs.value == rhs.value; }\n+  \n+  template<typename V, typename I>\n+    inline bool \n+    operator<(const character<V, I>& lhs, const character<V, I>& rhs)\n+    { return lhs.value < rhs.value; }\n+} // namespace __gnu_cxx\n+\n+namespace std\n+{\n+  // Provide std::char_traits specialization.\n+  template<typename V, typename I>\n+    struct char_traits<__gnu_cxx::character<V, I> >\n+    {\n+      typedef __gnu_cxx::character<V, I> \tchar_type;\n+\n+      // NB: This type should be bigger than char_type, so as to\n+      // properly hold EOF values in addition to the full range of\n+      // char_type values.\n+      typedef typename char_type::int_type\tint_type;\n+\n+      typedef streampos \t\t\tpos_type;\n+      typedef streamoff \t\t\toff_type;\n+      typedef mbstate_t \t\t\tstate_type;\n+      \n+      static void \n+      assign(char_type& __c1, const char_type& __c2)\n+      { __c1 = __c2; }\n+\n+      static bool \n+      eq(const char_type& __c1, const char_type& __c2)\n+      { return __c1 == __c2; }\n+\n+      static bool \n+      lt(const char_type& __c1, const char_type& __c2)\n+      { return __c1 < __c2; }\n+\n+      static int \n+      compare(const char_type* __s1, const char_type* __s2, size_t __n)\n+      { \n+\tfor (size_t __i = 0; __i < __n; ++__i)\n+\t  if (!eq(__s1[__i], __s2[__i]))\n+\t    return lt(__s1[__i], __s2[__i]) ? -1 : 1;\n+\treturn 0; \n+      }\n+\n+      static size_t\n+      length(const char_type* __s)\n+      { \n+\tconst char_type* __p = __s; \n+\twhile (*__p) \n+\t  ++__p; \n+\treturn (__p - __s); \n+      }\n+\n+      static const char_type* \n+      find(const char_type* __s, size_t __n, const char_type& __a)\n+      { \n+\tfor (const char_type* __p = __s; size_t(__p - __s) < __n; ++__p)\n+\t  if (*__p == __a) \n+\t    return __p;\n+\treturn 0;\n+      }\n+\n+      static char_type* \n+      move(char_type* __s1, const char_type* __s2, size_t __n)\n+      { return (char_type*) memmove(__s1, __s2, __n * sizeof(char_type)); }\n+\n+      static char_type* \n+      copy(char_type* __s1, const char_type* __s2, size_t __n)\n+      { return (char_type*) memcpy(__s1, __s2, __n * sizeof(char_type)); }\n+\n+      static char_type* \n+      assign(char_type* __s, size_t __n, char_type __a)\n+      { \n+\tfor (char_type* __p = __s; __p < __s + __n; ++__p) \n+\t  assign(*__p, __a);\n+        return __s; \n+      }\n+\n+      static char_type \n+      to_char_type(const int_type& __c)\n+      {\n+\tchar_type __r = { __c };\n+\treturn __r;\n+      }\n+\n+      static int_type \n+      to_int_type(const char_type& __c) \n+      { return int_type(__c.value); }\n+\n+      static bool \n+      eq_int_type(const int_type& __c1, const int_type& __c2)\n+      { return __c1 == __c2; }\n+\n+      static int_type \n+      eof() { return static_cast<int_type>(-1); }\n+\n+      static int_type \n+      not_eof(const int_type& __c)\n+      { return eq_int_type(__c, eof()) ? int_type(0) : __c; }\n+    };\n+}\n+\n+#endif"}, {"sha": "c3c4eee2594c7c9b6cdbc592cf838c34e9bc4882", "filename": "libstdc++-v3/testsuite/ext/pod_char_traits.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e7facfd47ed8da719ee0693ffb170e5d3d21379/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpod_char_traits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e7facfd47ed8da719ee0693ffb170e5d3d21379/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpod_char_traits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpod_char_traits.cc?ref=9e7facfd47ed8da719ee0693ffb170e5d3d21379", "patch": "@@ -0,0 +1,78 @@\n+// POD character, std::char_traits specialization -*- C++ -*-\n+\n+// Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// Gabriel Dos Reis <gdr@integrable-solutions.net>\n+// Benjamin Kosnik <bkoz@redhat.com>\n+\n+#include <ext/pod_char_traits.h>\n+\n+int main()\n+{\n+  using namespace std;\n+  using namespace __gnu_cxx;\n+\n+  typedef unsigned short\t\t\tvalue_type;\n+  typedef unsigned int\t\t\t\tint_type;\n+  typedef character<value_type, int_type>\tchar_type;\n+  typedef char_traits<char_type> \t\ttraits_type;\n+\n+  bool test = true;\n+\n+  // 1 char_type <-> value_type conversions\n+  value_type uc1 = 'c';\n+  value_type uc2 = 'd';\n+  char_type c1 = { uc1 };\n+  char_type c2 = { uc2 };\n+  test = !(c1 == c2);\n+\n+  // 2 char_traits\n+  test = traits_type::eq(c1, c2);\n+  \n+  // 3 basic_string<char_type>\n+  typedef basic_string<char_type>\tstring_type;\n+  string_type str;\n+  char_type c3 = { value_type('b') };\n+  char_type c4 = { value_type('o') };\n+  char_type c5 = { value_type('r') };\n+  char_type c6 = { value_type('a') };\n+  char_type c7 = { value_type('c') };\n+  char_type c8 = { value_type('a') };\n+  char_type c9 = { value_type('y') };\n+  str += c3;\n+  str += c4;\n+  str += c5;\n+  str += c6;\n+  str += c7;\n+  str += c8;\n+  str += c9;\n+  string_type::size_type len = str.size();\n+  const char_type* arr = str.c_str();\n+\n+  return 0;\n+}"}]}