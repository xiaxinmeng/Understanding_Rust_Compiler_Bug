{"sha": "2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQyNWJmNWQ1MjZkYWUxZmJlZmZjM2RiYzg4Yjc1ZDgyNGIyN2VhOQ==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-09-05T22:38:06Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-09-05T22:38:06Z"}, "message": "testsuite_flags.in: No longer need to search testsuite builddir.\n\n2001-09-05  Phil Edwards  <pme@sources.redhat.com>\n\n\t* testsuite_flags.in:  No longer need to search testsuite builddir.\n\t* src/stl-inst.cc (__sink_unused_warning):  Unused, remove.\n\t* Makefile.am:  The testsuite directory never needs to be made here.\n\t* Makefile.in:  Regenerate.\n\t* include/Makefile.in:  Regenerate.\n\t* libio/Makefile.in:  Regenerate.\n\t* libmath/Makefile.in:  Regenerate.\n\t* libsupc++/Makefile.in:  Regenerate.\n\t* po/Makefile.in:  Regenerate.\n\t* src/Makefile.in:  Regenerate.\n\t* testsuite/Makefile.in:  Regenerate.\n\nFrom-SVN: r45426", "tree": {"sha": "2edfd425e81e3c4478f4c02d106db08bf33246b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2edfd425e81e3c4478f4c02d106db08bf33246b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9/comments", "author": null, "committer": null, "parents": [{"sha": "7dcc5966f0e739470271e5abaf890ae5d303a4dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dcc5966f0e739470271e5abaf890ae5d303a4dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dcc5966f0e739470271e5abaf890ae5d303a4dc"}], "stats": {"total": 567, "additions": 438, "deletions": 129}, "files": [{"sha": "f3bcd3bee576031b7696f421e3de00624c17681c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 75, "deletions": 61, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9", "patch": "@@ -1,3 +1,17 @@\n+2001-09-05  Phil Edwards  <pme@sources.redhat.com>\n+\n+\t* testsuite_flags.in:  No longer need to search testsuite builddir.\n+\t* src/stl-inst.cc (__sink_unused_warning):  Unused, remove.\n+\t* Makefile.am:  The testsuite directory never needs to be made here.\n+\t* Makefile.in:  Regenerate.\n+\t* include/Makefile.in:  Regenerate.\n+\t* libio/Makefile.in:  Regenerate.\n+\t* libmath/Makefile.in:  Regenerate.\n+\t* libsupc++/Makefile.in:  Regenerate.\n+\t* po/Makefile.in:  Regenerate.\n+\t* src/Makefile.in:  Regenerate.\n+\t* testsuite/Makefile.in:  Regenerate.\n+\n 2001-09-04  Scott Johnston  <scott@accom.com>\n \t    Peter Schmid  <schmid@snake.iap.physik.tu-darmstadt.de>\n \n@@ -616,7 +630,7 @@\n \n 2001-07-19  Peter Schmid  <schmid@snake.iap.physik.tu-darmstadt.de>\n \n-        * include/bits/stl_algo.h : Fix typos.\n+\t* include/bits/stl_algo.h : Fix typos.\n \t* testsuite/25_algorithms/unique.cc: New file.\n \t\n 2001-07-19  Phil Edwards  <pme@sources.redhat.com>\n@@ -635,7 +649,7 @@\n \t* src/locale.cc:  Likewise.\n \n 2001-07-19  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n-\t    Bert De Knuydt <Bert.Deknuydt@esat.kuleuven.ac.be>\n+            Bert De Knuydt <Bert.Deknuydt@esat.kuleuven.ac.be>\n \n \t* src/gen-num-limits.cc (set_signals_handler): New function.\n \tFactor out signals setting.  Set signal handler for SIGILL.\n@@ -649,9 +663,9 @@\n 2001-07-18  Stephen M. Webb  <stephen@bregmasoft..com>\n             Roman Sulzhyk  <roman_sulzhyk@yahoo.com>\n \n-        libstdc++/3599\n-        * include/bits/ostream.tcc (ostream::put): Fixed error condition check.\n-        * testsuite/27_io/streambuf.cc (test07): Added new regression test.\n+\tlibstdc++/3599\n+\t* include/bits/ostream.tcc (ostream::put): Fixed error condition check.\n+\t* testsuite/27_io/streambuf.cc (test07): Added new regression test.\n \n 2001-07-17  Stephen M. Webb   <stephen@bregmasoft.com>r\n \n@@ -818,21 +832,21 @@\n \n 2001-07-06  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n \n-        * libmath/Makefile.am (EXTRA_DIST): Remove atan2f.c and expf.c\n-        * libmath/Makefile.in: Regenerate.\n-        * libmath/expf.c: Remove.\n-        * libmath/atan2f.c: Likewise.\n+\t* libmath/Makefile.am (EXTRA_DIST): Remove atan2f.c and expf.c\n+\t* libmath/Makefile.in: Regenerate.\n+\t* libmath/expf.c: Remove.\n+\t* libmath/atan2f.c: Likewise.\n \n 2001-07-06  Daniel Jacobowitz  <drow@mvista.com>\n \n-        * configure.in: Remove NATIVE, NULL_TARGET.\n-        Set CANADIAN only for Canadian crosses.  Set xcompiling\n-        for both Canadian crosses and host-x-host crosses.\n-        * configure: Regenerated.\n+\t* configure.in: Remove NATIVE, NULL_TARGET.\n+\tSet CANADIAN only for Canadian crosses.  Set xcompiling\n+\tfor both Canadian crosses and host-x-host crosses.\n+\t* configure: Regenerated.\n \n 2001-07-06  Peter Schmid  <schmid@snake.iap.physik.tu-darmstadt.de>\n \n-        * include/bits/stl_vector.h (vector::_M_initialize_aux): Fix typo.\n+\t* include/bits/stl_vector.h (vector::_M_initialize_aux): Fix typo.\n \n 2001-07-05  Jason Merrill  <jason_merrill@redhat.com>\n \n@@ -910,11 +924,11 @@\n 2001-07-01  Stephen M. Webb <stephen@bregmasoft.com>\n \n \t* include/bits/stl_construct.h (construct): Remove.\n-      \t(destroy): Remove.\n-      \t(__destroy): Replaced by use of iterator_traits.\n+\t(destroy): Remove.\n+\t(__destroy): Replaced by use of iterator_traits.\n \t* include/bits/stl_deque.h: replaced HP iterator functions with\n \titerator_traits.\n-        (construct): changed to _Construct.\n+\t(construct): changed to _Construct.\n \t(destroy): changed to _Destroy.\n \t* include/bits/stl_tempbuf.h: Same.\n \t* include/bits/stl_tree.h: Same.\n@@ -1079,8 +1093,8 @@\n 2001-06-26  Benjamin Kosnik  <bkoz@redhat.com>\n             Alexandre Petit-Bianco  <apbianco@redhat.com>\n \n-        * testsuite/21_strings/element_access.cc (test01): Chill Out Cafe\n-        is on 41st, not 14th.\n+\t* testsuite/21_strings/element_access.cc (test01): Chill Out Cafe\n+\tis on 41st, not 14th.\n \n 2001-06-26  Benjamin Kosnik  <bkoz@redhat.com>\n \n@@ -1267,9 +1281,9 @@\n \t* include/bits/stl_raw_storage_iter.h: Format. Correct derivation.\n \t* testsuite/20_util/raw_storage_iterator.cc: Same.\n \t\n-        * include/bits/stl_alloc.h (_S_chunk_alloc): Change malloc to\n-        operator new.\n-        (__mem_interface): New typedef for switching between malloc and new.\n+\t* include/bits/stl_alloc.h (_S_chunk_alloc): Change malloc to\n+\toperator new.\n+\t(__mem_interface): New typedef for switching between malloc and new.\n \t* testsuite/20_util/allocator_members.cc: New file.\t\n \n \t* testsuite/20_util/comparisons.cc: New file.\n@@ -1557,7 +1571,7 @@\n \t* include/bits/c++config: Cleanup threading configuration macros.\n \tIn particular, define __STL_GTHREADS macro which controls...\n \t* include/bits/stl_threads.h: ...a brand new gthr.h-based\n-        configuration here.\n+\tconfiguration here.\n \n \t* config/c_io_stdio.h: Include staged gthr.h instead of local\n \tthread configuration file.  Always use __gthread_mutex_t\n@@ -1740,8 +1754,8 @@\n \n 2001-05-30  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n-        * testsuite/lib/libstdc++-v3-dg.exp (libstdc++-v3-init): Use\n-        get_multilibs to find gcc.\n+\t* testsuite/lib/libstdc++-v3-dg.exp (libstdc++-v3-init): Use\n+\tget_multilibs to find gcc.\n \t\n 2001-05-30  Phil Edwards  <pme@sources.redhat.com>\n \n@@ -1751,14 +1765,14 @@\n \n 2001-05-29  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n  \n-       * include/c_std/bits/std_cstdlib.h:: Move C99 thingies to __gnu_cxx::. \n-       * include/c_std/bits/std_cwchar.h (__gnu_cxx): Likewise.\n+\t* include/c_std/bits/std_cstdlib.h:: Move C99 thingies to __gnu_cxx::. \n+\t* include/c_std/bits/std_cwchar.h (__gnu_cxx): Likewise.\n  \n 2001-05-27  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n \n-       * include/c_std/bits/std_cmath.h: Move C99 functions in __gnu_cxx::.\n-       * include/c_std/bits/std_cstdlib.h: Same.\n-       * include/c_std/bits/std_cwchar.h: Same.\n+\t* include/c_std/bits/std_cmath.h: Move C99 functions in __gnu_cxx::.\n+\t* include/c_std/bits/std_cstdlib.h: Same.\n+\t* include/c_std/bits/std_cwchar.h: Same.\n \n 2001-05-30  Loren J. Rittle  <ljrittle@acm.org>\n \n@@ -1782,10 +1796,10 @@\n \t\n 2001-05-24  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n             Phil Edwards  <pme@sources.redhat.com>\n-\t    Alexandre Oliva  <aoliva@redhat.com>\n+            Alexandre Oliva  <aoliva@redhat.com>\n \n-        * acinclude.m4 (GLIBCPP_EXPORT_INSTALL_INFO): Set glibcpp_srcdir\n-        in an amd-safe manner. Revert glibcpp_prefixdir.\n+\t* acinclude.m4 (GLIBCPP_EXPORT_INSTALL_INFO): Set glibcpp_srcdir\n+\tin an amd-safe manner. Revert glibcpp_prefixdir.\n \n 2001-05-25  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n@@ -1913,9 +1927,9 @@\n \n 2001-05-18  Angela Marie Thomas <angela@cygnus.com>\n \n-        * testsuite/lib/libstdc++-v3-dg.exp (libstdc++-v3-init): Set flags\n-        appropriately for remote testing and testing installed files without\n-        a build dir.\n+\t* testsuite/lib/libstdc++-v3-dg.exp (libstdc++-v3-init): Set flags\n+\tappropriately for remote testing and testing installed files without\n+\ta build dir.\n \n 2001-05-18  Benjamin Kosnik  <bkoz@redhat.com>\n \n@@ -1927,9 +1941,9 @@\n \n 2001-05-18  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n-        * include/bits/std_valarray.h (valarray<>::operator[] const):\n-        Return a const reference. \n-        * testsuite/26_numerics/valarray_const_bracket.cc: New test.\n+\t* include/bits/std_valarray.h (valarray<>::operator[] const):\n+\tReturn a const reference. \n+\t* testsuite/26_numerics/valarray_const_bracket.cc: New test.\n \n 2001-05-18  Alexandre Oliva  <aoliva@redhat.com>\n \n@@ -1938,13 +1952,13 @@\n \n 2001-05-18  Angela Marie Thomas <angela@cygnus.com>\n \n-        * testsuite/lib/libstdc++-v3-dg.exp (libstdc++-v3-dg-test):  Set\n-        output_file based on the name of the testcase.\n+\t* testsuite/lib/libstdc++-v3-dg.exp (libstdc++-v3-dg-test):  Set\n+\toutput_file based on the name of the testcase.\n \n 2001-05-18  Angela Marie Thomas <angela@cygnus.com>\n \n-        * testsuite/lib/libstdc++-v3-dg.exp (libstdc++-v3-init):  Build\n-        gluefile and use it if needs_status_wrapper is set.\n+\t* testsuite/lib/libstdc++-v3-dg.exp (libstdc++-v3-init):  Build\n+\tgluefile and use it if needs_status_wrapper is set.\n \n 2001-05-18  Alexandre Oliva  <aoliva@redhat.com>\n \n@@ -1972,11 +1986,11 @@\n \n 2001-05-15  Zack Weinberg  <zackw@stanford.edu>\n \t\n-        * testsuite/21_strings/inserters_extractors.cc,\n-        testsuite/27_io/istream_unformatted.cc,\n-        testsuite/27_io/stringstream.cc:\n-        Replace multi-line string constants with C89-style\n-        concatenated string constants.\n+\t* testsuite/21_strings/inserters_extractors.cc,\n+\ttestsuite/27_io/istream_unformatted.cc,\n+\ttestsuite/27_io/stringstream.cc:\n+\tReplace multi-line string constants with C89-style\n+\tconcatenated string constants.\n \t\n 2001-05-14  Richard Henderson  <rth@redhat.com>\n \n@@ -2168,7 +2182,7 @@\n \t\n 2001-04-24  Peter Schmid  <schmid@snake.iap.physik.tu-darmstadt.de>\n \n-        * include/ext/slist: Include required header files. \n+\t* include/ext/slist: Include required header files. \n \n 2001-04-23  Loren J. Rittle  <ljrittle@acm.org>\n \n@@ -2338,8 +2352,8 @@\n \n 2001-04-06  Joe Buck  <jbuck@welsh-buck.org>\n \n-        * stl_algobase.h (std::equal): avoid use of possibly-undefined\n-        operator != (one line patch).\n+\t* stl_algobase.h (std::equal): avoid use of possibly-undefined\n+\toperator != (one line patch).\n \n 2001-04-06   Benjamin Kosnik  <bkoz@redhat.com>\n \n@@ -2352,8 +2366,8 @@\n \n 2001-04-06  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n-        * include/c_std/bits/std_cmath.h: Get rid of C99 math macros.\n-        * testsuite/26_numerics/c99_macros.cc: Add test.\n+\t* include/c_std/bits/std_cmath.h: Get rid of C99 math macros.\n+\t* testsuite/26_numerics/c99_macros.cc: Add test.\n \n 2001-04-06  Phil Edwards  <pme@sources.redhat.com>\n \n@@ -2431,7 +2445,7 @@\n 2001-04-04  Phil Edwards  <pme@sources.redhat.com>\n \n \t* docs/doxygen/user.cfg.in:  Extract all non-private members;\n-\t  reduce confusing documentation output.\n+\treduce confusing documentation output.\n \n 2001-04-04  Geoffrey Keating  <geoffk@redhat.com>\n \n@@ -2453,8 +2467,8 @@\n \n 2001-04-03  Peter Schmid  <schmid@snake.iap.physik.tu-darmstadt.de>\n \n-        * include/backward/fstream.h:  Expose streampos to global\n-          namespace.\n+\t* include/backward/fstream.h:  Expose streampos to global\n+\tnamespace.\n \t\n 2001-04-03  Peter Schmid  <schmid@snake.iap.physik.tu-darmstadt.de>\n \n@@ -2727,7 +2741,7 @@\n \n 2001-03-21  Theodore Papadopoulo  <Theodore.Papadopoulo@sophia.inria.fr>\n \n-    \t* intclude/bits/basic_file.h: Fix typos in comments.\n+\t* intclude/bits/basic_file.h: Fix typos in comments.\n \n 2001-03-20  Richard Henderson  <rth@redhat.com>\n \n@@ -2900,7 +2914,7 @@\n \t* testsuite/27_io/istream_manip.cc (test01): Fix.\n \n 2001-03-06  Nathan Myers  <ncm@cantrip.org>\n-\t    Benjamin Kosnik  <bkoz@redhat.com>\n+            Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/c_std/bits/std_cerrno.h: Don't define errno in std::.\n \t* testsuite/17_intro/header_cerrno.cc (test01): New file.\n@@ -3307,7 +3321,7 @@\n \n 2001-02-19  Andreas Jaeger  <aj@suse.de>\n \n-     \t* config/cpu/sparc/sparc64/bits/atomicity.h (__compare_and_swap):\n+\t* config/cpu/sparc/sparc64/bits/atomicity.h (__compare_and_swap):\n \tFix typo.\n \n 2001-02-16  Greg Bumgardner <bumgard@roguewave.com>\n@@ -3494,7 +3508,7 @@\n \tdejagnu/dg.exp.\n \n 2001-02-13  Dirk Mueller <dmuell@gmx.net>\n-\t    Phil Edwards  <pme@sources.redhat.com>\n+            Phil Edwards  <pme@sources.redhat.com>\n \n \t* include/backward/function.h:  Do not use rel_ops for older\n \t  headers either.\n@@ -3628,7 +3642,7 @@\n \t(_S_copy_streambufs): Likewise.\n \n 2001-02-06  Hyman Rosen  <Hyman.Rosen@kbcfp.com>\n-\t    Phil Edwards  <pme@sources.redhat.com>\n+            Phil Edwards  <pme@sources.redhat.com>\n \n \t* include/bits/std_istream.h (op>> signed,unsigned char):  Must\n \t  use reinterpret_cast, not static_cast."}, {"sha": "62aae9b8693ccf78bc4c99ea0295f373daa10fcf", "filename": "libstdc++-v3/Makefile.am", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9/libstdc%2B%2B-v3%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9/libstdc%2B%2B-v3%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.am?ref=2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9", "patch": "@@ -35,13 +35,11 @@ mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n # compile time, execution time, and binary size.\n check-script: $(top_builddir)/mkcheck\n \t-(chmod + $(top_builddir)/mkcheck; \\\n-\t  test -d testsuite || (mkdir testsuite; chmod u+w testsuite); \\\n \t  cd testsuite; \\\n \t  @glibcpp_builddir@/mkcheck 0)\n \n check-script-install: $(top_builddir)/mkcheck\n \t-(chmod + $(top_builddir)/mkcheck; \\\n-\t  test -d testsuite || (mkdir testsuite; chmod u+w testsuite); \\\n \t  cd testsuite; \\\n \t  @glibcpp_builddir@/mkcheck 1)\n "}, {"sha": "4d3af653585e956685d092cfb80d7e940b0dc21d", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9", "patch": "@@ -172,7 +172,44 @@ MULTICLEAN = true\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \n+AM_MAKEFLAGS = \\\n+\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n+\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n+\t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n+\t\"CFLAGS=$(CFLAGS)\" \\\n+\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n+\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n+\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n+\t\"INSTALL=$(INSTALL)\" \\\n+\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n+\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n+\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n+\t\"LDFLAGS=$(LDFLAGS)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\"MAKE=$(MAKE)\" \\\n+\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n+\t\"SHELL=$(SHELL)\" \\\n+\t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \\\n+\t\"exec_prefix=$(exec_prefix)\" \\\n+\t\"infodir=$(infodir)\" \\\n+\t\"libdir=$(libdir)\" \\\n+\t\"includedir=$(includedir)\" \\\n+\t\"prefix=$(prefix)\" \\\n+\t\"tooldir=$(tooldir)\" \\\n+\t\"AR=$(AR)\" \\\n+\t\"AS=$(AS)\" \\\n+\t\"LD=$(LD)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"RANLIB=$(RANLIB)\" \\\n+\t\"NM=$(NM)\" \\\n+\t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n+\t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n+\t\"DESTDIR=$(DESTDIR)\" \\\n+\t\"WERROR=$(WERROR)\" \n \n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n CONFIG_HEADER = config.h\n@@ -452,13 +489,11 @@ mostlyclean distclean maintainer-clean\n # compile time, execution time, and binary size.\n check-script: $(top_builddir)/mkcheck\n \t-(chmod + $(top_builddir)/mkcheck; \\\n-\t  test -d testsuite || (mkdir testsuite; chmod u+w testsuite); \\\n \t  cd testsuite; \\\n \t  @glibcpp_builddir@/mkcheck 0)\n \n check-script-install: $(top_builddir)/mkcheck\n \t-(chmod + $(top_builddir)/mkcheck; \\\n-\t  test -d testsuite || (mkdir testsuite; chmod u+w testsuite); \\\n \t  cd testsuite; \\\n \t  @glibcpp_builddir@/mkcheck 1)\n "}, {"sha": "a787dc1381a9bc9c6e16ceaf4a74191cf051eaa2", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 221, "deletions": 8, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9", "patch": "@@ -158,42 +158,255 @@ glibcpp_builddir = @glibcpp_builddir@\n \n bits_srcdir = ${glibcpp_srcdir}/include/bits\n bits_builddir = ./bits\n-bits_headers =  \t${bits_srcdir}/basic_file.h \t${bits_srcdir}/basic_ios.h \t${bits_srcdir}/basic_ios.tcc \t${bits_srcdir}/basic_string.h \t${bits_srcdir}/basic_string.tcc \t${bits_srcdir}/boost_concept_check.h \t${bits_srcdir}/char_traits.h \t${bits_srcdir}/codecvt.h \t${bits_srcdir}/concept_check.h \t${bits_srcdir}/cpp_type_traits.h \t${bits_srcdir}/fpos.h \t${bits_srcdir}/fstream.tcc \t${bits_srcdir}/functexcept.h \t${bits_srcdir}/generic_shadow.h \t${bits_srcdir}/gslice.h \t${bits_srcdir}/gslice_array.h \t${bits_srcdir}/indirect_array.h \t${bits_srcdir}/ios_base.h \t${bits_srcdir}/istream.tcc \t${bits_srcdir}/locale_facets.h \t${bits_srcdir}/locale_facets.tcc \t${bits_srcdir}/localefwd.h \t${bits_srcdir}/mask_array.h \t${bits_srcdir}/ostream.tcc \t${bits_srcdir}/pthread_allocimpl.h \t${bits_srcdir}/stream_iterator.h \t${bits_srcdir}/streambuf_iterator.h \t${bits_srcdir}/slice.h \t${bits_srcdir}/slice_array.h \t${bits_srcdir}/sstream.tcc \t${bits_srcdir}/std_algorithm.h \t${bits_srcdir}/std_bitset.h \t${bits_srcdir}/std_complex.h \t${bits_srcdir}/std_deque.h \t${bits_srcdir}/std_fstream.h \t${bits_srcdir}/std_functional.h \t${bits_srcdir}/std_iomanip.h \t${bits_srcdir}/std_ios.h \t${bits_srcdir}/std_iosfwd.h \t${bits_srcdir}/std_iostream.h \t${bits_srcdir}/std_istream.h \t${bits_srcdir}/std_iterator.h \t${bits_srcdir}/std_limits.h \t${bits_srcdir}/std_list.h \t${bits_srcdir}/std_locale.h \t${bits_srcdir}/std_map.h \t${bits_srcdir}/std_memory.h \t${bits_srcdir}/std_numeric.h \t${bits_srcdir}/std_ostream.h \t${bits_srcdir}/std_queue.h \t${bits_srcdir}/std_set.h \t${bits_srcdir}/std_sstream.h \t${bits_srcdir}/std_stack.h \t${bits_srcdir}/std_stdexcept.h \t${bits_srcdir}/std_streambuf.h \t${bits_srcdir}/std_string.h \t${bits_srcdir}/std_utility.h \t${bits_srcdir}/std_valarray.h \t${bits_srcdir}/std_vector.h \t${bits_srcdir}/stl_algo.h \t${bits_srcdir}/stl_algobase.h \t${bits_srcdir}/stl_alloc.h \t${bits_srcdir}/stl_bvector.h \t${bits_srcdir}/stl_construct.h \t${bits_srcdir}/stl_deque.h \t${bits_srcdir}/stl_function.h \t${bits_srcdir}/stl_heap.h \t${bits_srcdir}/stl_iterator.h \t${bits_srcdir}/stl_iterator_base_funcs.h \t${bits_srcdir}/stl_iterator_base_types.h \t${bits_srcdir}/stl_list.h \t${bits_srcdir}/stl_map.h \t${bits_srcdir}/stl_multimap.h \t${bits_srcdir}/stl_multiset.h \t${bits_srcdir}/stl_numeric.h \t${bits_srcdir}/stl_pair.h \t${bits_srcdir}/stl_pthread_alloc.h \t${bits_srcdir}/stl_queue.h \t${bits_srcdir}/stl_raw_storage_iter.h \t${bits_srcdir}/stl_relops.h \t${bits_srcdir}/stl_set.h \t${bits_srcdir}/stl_stack.h \t${bits_srcdir}/stl_tempbuf.h \t${bits_srcdir}/stl_threads.h \t${bits_srcdir}/stl_tree.h \t${bits_srcdir}/stl_uninitialized.h \t${bits_srcdir}/stl_vector.h \t${bits_srcdir}/streambuf.tcc \t${bits_srcdir}/stringfwd.h \t${bits_srcdir}/type_traits.h \t${bits_srcdir}/valarray_array.h \t${bits_srcdir}/valarray_array.tcc \t${bits_srcdir}/valarray_meta.h\n+bits_headers = \\\n+\t${bits_srcdir}/basic_file.h \\\n+\t${bits_srcdir}/basic_ios.h \\\n+\t${bits_srcdir}/basic_ios.tcc \\\n+\t${bits_srcdir}/basic_string.h \\\n+\t${bits_srcdir}/basic_string.tcc \\\n+\t${bits_srcdir}/boost_concept_check.h \\\n+\t${bits_srcdir}/char_traits.h \\\n+\t${bits_srcdir}/codecvt.h \\\n+\t${bits_srcdir}/concept_check.h \\\n+\t${bits_srcdir}/cpp_type_traits.h \\\n+\t${bits_srcdir}/fpos.h \\\n+\t${bits_srcdir}/fstream.tcc \\\n+\t${bits_srcdir}/functexcept.h \\\n+\t${bits_srcdir}/generic_shadow.h \\\n+\t${bits_srcdir}/gslice.h \\\n+\t${bits_srcdir}/gslice_array.h \\\n+\t${bits_srcdir}/indirect_array.h \\\n+\t${bits_srcdir}/ios_base.h \\\n+\t${bits_srcdir}/istream.tcc \\\n+\t${bits_srcdir}/locale_facets.h \\\n+\t${bits_srcdir}/locale_facets.tcc \\\n+\t${bits_srcdir}/localefwd.h \\\n+\t${bits_srcdir}/mask_array.h \\\n+\t${bits_srcdir}/ostream.tcc \\\n+\t${bits_srcdir}/pthread_allocimpl.h \\\n+\t${bits_srcdir}/stream_iterator.h \\\n+\t${bits_srcdir}/streambuf_iterator.h \\\n+\t${bits_srcdir}/slice.h \\\n+\t${bits_srcdir}/slice_array.h \\\n+\t${bits_srcdir}/sstream.tcc \\\n+\t${bits_srcdir}/std_algorithm.h \\\n+\t${bits_srcdir}/std_bitset.h \\\n+\t${bits_srcdir}/std_complex.h \\\n+\t${bits_srcdir}/std_deque.h \\\n+\t${bits_srcdir}/std_fstream.h \\\n+\t${bits_srcdir}/std_functional.h \\\n+\t${bits_srcdir}/std_iomanip.h \\\n+\t${bits_srcdir}/std_ios.h \\\n+\t${bits_srcdir}/std_iosfwd.h \\\n+\t${bits_srcdir}/std_iostream.h \\\n+\t${bits_srcdir}/std_istream.h \\\n+\t${bits_srcdir}/std_iterator.h \\\n+\t${bits_srcdir}/std_limits.h \\\n+\t${bits_srcdir}/std_list.h \\\n+\t${bits_srcdir}/std_locale.h \\\n+\t${bits_srcdir}/std_map.h \\\n+\t${bits_srcdir}/std_memory.h \\\n+\t${bits_srcdir}/std_numeric.h \\\n+\t${bits_srcdir}/std_ostream.h \\\n+\t${bits_srcdir}/std_queue.h \\\n+\t${bits_srcdir}/std_set.h \\\n+\t${bits_srcdir}/std_sstream.h \\\n+\t${bits_srcdir}/std_stack.h \\\n+\t${bits_srcdir}/std_stdexcept.h \\\n+\t${bits_srcdir}/std_streambuf.h \\\n+\t${bits_srcdir}/std_string.h \\\n+\t${bits_srcdir}/std_utility.h \\\n+\t${bits_srcdir}/std_valarray.h \\\n+\t${bits_srcdir}/std_vector.h \\\n+\t${bits_srcdir}/stl_algo.h \\\n+\t${bits_srcdir}/stl_algobase.h \\\n+\t${bits_srcdir}/stl_alloc.h \\\n+\t${bits_srcdir}/stl_bvector.h \\\n+\t${bits_srcdir}/stl_construct.h \\\n+\t${bits_srcdir}/stl_deque.h \\\n+\t${bits_srcdir}/stl_function.h \\\n+\t${bits_srcdir}/stl_heap.h \\\n+\t${bits_srcdir}/stl_iterator.h \\\n+\t${bits_srcdir}/stl_iterator_base_funcs.h \\\n+\t${bits_srcdir}/stl_iterator_base_types.h \\\n+\t${bits_srcdir}/stl_list.h \\\n+\t${bits_srcdir}/stl_map.h \\\n+\t${bits_srcdir}/stl_multimap.h \\\n+\t${bits_srcdir}/stl_multiset.h \\\n+\t${bits_srcdir}/stl_numeric.h \\\n+\t${bits_srcdir}/stl_pair.h \\\n+\t${bits_srcdir}/stl_pthread_alloc.h \\\n+\t${bits_srcdir}/stl_queue.h \\\n+\t${bits_srcdir}/stl_raw_storage_iter.h \\\n+\t${bits_srcdir}/stl_relops.h \\\n+\t${bits_srcdir}/stl_set.h \\\n+\t${bits_srcdir}/stl_stack.h \\\n+\t${bits_srcdir}/stl_tempbuf.h \\\n+\t${bits_srcdir}/stl_threads.h \\\n+\t${bits_srcdir}/stl_tree.h \\\n+\t${bits_srcdir}/stl_uninitialized.h \\\n+\t${bits_srcdir}/stl_vector.h \\\n+\t${bits_srcdir}/streambuf.tcc \\\n+\t${bits_srcdir}/stringfwd.h \\\n+\t${bits_srcdir}/type_traits.h \\\n+\t${bits_srcdir}/valarray_array.h \\\n+\t${bits_srcdir}/valarray_array.tcc \\\n+\t${bits_srcdir}/valarray_meta.h\n \n \n backward_srcdir = ${glibcpp_srcdir}/include/backward\n backward_builddir = ./backward\n-backward_headers =  \t${backward_srcdir}/complex.h \t${backward_srcdir}/iomanip.h \t${backward_srcdir}/istream.h \t${backward_srcdir}/ostream.h \t${backward_srcdir}/stream.h \t${backward_srcdir}/streambuf.h \t${backward_srcdir}/algo.h \t${backward_srcdir}/algobase.h \t${backward_srcdir}/alloc.h \t${backward_srcdir}/bvector.h \t${backward_srcdir}/defalloc.h \t${backward_srcdir}/deque.h \t${backward_srcdir}/function.h \t${backward_srcdir}/hash_map.h \t${backward_srcdir}/hash_set.h \t${backward_srcdir}/hashtable.h \t${backward_srcdir}/heap.h \t${backward_srcdir}/iostream.h \t${backward_srcdir}/iterator.h \t${backward_srcdir}/list.h \t${backward_srcdir}/map.h \t${backward_srcdir}/multimap.h \t${backward_srcdir}/new.h \t${backward_srcdir}/multiset.h \t${backward_srcdir}/pair.h \t${backward_srcdir}/queue.h \t${backward_srcdir}/rope.h \t${backward_srcdir}/set.h \t${backward_srcdir}/slist.h \t${backward_srcdir}/stack.h \t${backward_srcdir}/tempbuf.h \t${backward_srcdir}/tree.h \t${backward_srcdir}/vector.h \t${backward_srcdir}/fstream.h \t${backward_srcdir}/strstream.h \t${backward_srcdir}/strstream \t${backward_srcdir}/backward_warning.h\n+backward_headers = \\\n+\t${backward_srcdir}/complex.h \\\n+\t${backward_srcdir}/iomanip.h \\\n+\t${backward_srcdir}/istream.h \\\n+\t${backward_srcdir}/ostream.h \\\n+\t${backward_srcdir}/stream.h \\\n+\t${backward_srcdir}/streambuf.h \\\n+\t${backward_srcdir}/algo.h \\\n+\t${backward_srcdir}/algobase.h \\\n+\t${backward_srcdir}/alloc.h \\\n+\t${backward_srcdir}/bvector.h \\\n+\t${backward_srcdir}/defalloc.h \\\n+\t${backward_srcdir}/deque.h \\\n+\t${backward_srcdir}/function.h \\\n+\t${backward_srcdir}/hash_map.h \\\n+\t${backward_srcdir}/hash_set.h \\\n+\t${backward_srcdir}/hashtable.h \\\n+\t${backward_srcdir}/heap.h \\\n+\t${backward_srcdir}/iostream.h \\\n+\t${backward_srcdir}/iterator.h \\\n+\t${backward_srcdir}/list.h \\\n+\t${backward_srcdir}/map.h \\\n+\t${backward_srcdir}/multimap.h \\\n+\t${backward_srcdir}/new.h \\\n+\t${backward_srcdir}/multiset.h \\\n+\t${backward_srcdir}/pair.h \\\n+\t${backward_srcdir}/queue.h \\\n+\t${backward_srcdir}/rope.h \\\n+\t${backward_srcdir}/set.h \\\n+\t${backward_srcdir}/slist.h \\\n+\t${backward_srcdir}/stack.h \\\n+\t${backward_srcdir}/tempbuf.h \\\n+\t${backward_srcdir}/tree.h \\\n+\t${backward_srcdir}/vector.h \\\n+\t${backward_srcdir}/fstream.h \\\n+\t${backward_srcdir}/strstream.h \\\n+\t${backward_srcdir}/strstream \\\n+\t${backward_srcdir}/backward_warning.h\n \n \n ext_srcdir = ${glibcpp_srcdir}/include/ext\n ext_builddir = ./ext\n-ext_headers =  \t${ext_srcdir}/rope \t${ext_srcdir}/ropeimpl.h \t${ext_srcdir}/stl_rope.h \t${ext_srcdir}/slist \t${ext_srcdir}/hash_map \t${ext_srcdir}/hash_set \t${ext_srcdir}/stl_hashtable.h \t${ext_srcdir}/stl_hash_fun.h\n+ext_headers = \\\n+\t${ext_srcdir}/rope \\\n+\t${ext_srcdir}/ropeimpl.h \\\n+\t${ext_srcdir}/stl_rope.h \\\n+\t${ext_srcdir}/slist \\\n+\t${ext_srcdir}/hash_map \\\n+\t${ext_srcdir}/hash_set \\\n+\t${ext_srcdir}/stl_hashtable.h \\\n+\t${ext_srcdir}/stl_hash_fun.h\n \n \n # This is the common subset of files that all three \"C\" header models use.\n c_base_srcdir = @C_INCLUDE_DIR@/bits\n c_base_builddir = ./bits\n-c_base_headers =  \t${c_base_srcdir}/std_cassert.h \t${c_base_srcdir}/std_cctype.h \t${c_base_srcdir}/std_cerrno.h \t${c_base_srcdir}/std_cfloat.h \t${c_base_srcdir}/std_climits.h \t${c_base_srcdir}/std_clocale.h \t${c_base_srcdir}/std_cmath.h \t${c_base_srcdir}/std_csetjmp.h \t${c_base_srcdir}/std_csignal.h \t${c_base_srcdir}/std_cstdarg.h \t${c_base_srcdir}/std_cstddef.h \t${c_base_srcdir}/std_cstdio.h \t${c_base_srcdir}/std_cstdlib.h \t${c_base_srcdir}/std_cstring.h \t${c_base_srcdir}/std_ctime.h \t${c_base_srcdir}/std_cwchar.h \t${c_base_srcdir}/std_cwctype.h \t${c_base_srcdir}/cmath.tcc \n+c_base_headers = \\\n+\t${c_base_srcdir}/std_cassert.h \\\n+\t${c_base_srcdir}/std_cctype.h \\\n+\t${c_base_srcdir}/std_cerrno.h \\\n+\t${c_base_srcdir}/std_cfloat.h \\\n+\t${c_base_srcdir}/std_climits.h \\\n+\t${c_base_srcdir}/std_clocale.h \\\n+\t${c_base_srcdir}/std_cmath.h \\\n+\t${c_base_srcdir}/std_csetjmp.h \\\n+\t${c_base_srcdir}/std_csignal.h \\\n+\t${c_base_srcdir}/std_cstdarg.h \\\n+\t${c_base_srcdir}/std_cstddef.h \\\n+\t${c_base_srcdir}/std_cstdio.h \\\n+\t${c_base_srcdir}/std_cstdlib.h \\\n+\t${c_base_srcdir}/std_cstring.h \\\n+\t${c_base_srcdir}/std_ctime.h \\\n+\t${c_base_srcdir}/std_cwchar.h \\\n+\t${c_base_srcdir}/std_cwctype.h \\\n+\t${c_base_srcdir}/cmath.tcc \n \n \n std_srcdir = ${glibcpp_srcdir}/include/std\n std_builddir = ./\n-std_headers =  \t${std_srcdir}/algorithm \t${std_srcdir}/bitset \t${std_srcdir}/complex \t${std_srcdir}/deque \t${std_srcdir}/fstream \t${std_srcdir}/functional \t${std_srcdir}/iomanip \t${std_srcdir}/ios \t${std_srcdir}/iosfwd \t${std_srcdir}/iostream \t${std_srcdir}/istream \t${std_srcdir}/iterator \t${std_srcdir}/limits \t${std_srcdir}/list \t${std_srcdir}/locale \t${std_srcdir}/map \t${std_srcdir}/memory \t${std_srcdir}/numeric \t${std_srcdir}/ostream \t${std_srcdir}/queue \t${std_srcdir}/set \t${std_srcdir}/sstream \t${std_srcdir}/stack \t${std_srcdir}/stdexcept \t${std_srcdir}/streambuf \t${std_srcdir}/string \t${std_srcdir}/utility \t${std_srcdir}/valarray \t${std_srcdir}/vector \t${std_srcdir}/cassert \t${std_srcdir}/cctype \t${std_srcdir}/cerrno \t${std_srcdir}/cfloat \t${std_srcdir}/climits \t${std_srcdir}/clocale \t${std_srcdir}/ciso646 \t${std_srcdir}/cmath \t${std_srcdir}/csetjmp \t${std_srcdir}/csignal \t${std_srcdir}/cstdarg \t${std_srcdir}/cstddef \t${std_srcdir}/cstdio \t${std_srcdir}/cstdlib \t${std_srcdir}/cstring \t${std_srcdir}/ctime \t${std_srcdir}/cwchar \t${std_srcdir}/cwctype\n+std_headers = \\\n+\t${std_srcdir}/algorithm \\\n+\t${std_srcdir}/bitset \\\n+\t${std_srcdir}/complex \\\n+\t${std_srcdir}/deque \\\n+\t${std_srcdir}/fstream \\\n+\t${std_srcdir}/functional \\\n+\t${std_srcdir}/iomanip \\\n+\t${std_srcdir}/ios \\\n+\t${std_srcdir}/iosfwd \\\n+\t${std_srcdir}/iostream \\\n+\t${std_srcdir}/istream \\\n+\t${std_srcdir}/iterator \\\n+\t${std_srcdir}/limits \\\n+\t${std_srcdir}/list \\\n+\t${std_srcdir}/locale \\\n+\t${std_srcdir}/map \\\n+\t${std_srcdir}/memory \\\n+\t${std_srcdir}/numeric \\\n+\t${std_srcdir}/ostream \\\n+\t${std_srcdir}/queue \\\n+\t${std_srcdir}/set \\\n+\t${std_srcdir}/sstream \\\n+\t${std_srcdir}/stack \\\n+\t${std_srcdir}/stdexcept \\\n+\t${std_srcdir}/streambuf \\\n+\t${std_srcdir}/string \\\n+\t${std_srcdir}/utility \\\n+\t${std_srcdir}/valarray \\\n+\t${std_srcdir}/vector \\\n+\t${std_srcdir}/cassert \\\n+\t${std_srcdir}/cctype \\\n+\t${std_srcdir}/cerrno \\\n+\t${std_srcdir}/cfloat \\\n+\t${std_srcdir}/climits \\\n+\t${std_srcdir}/clocale \\\n+\t${std_srcdir}/ciso646 \\\n+\t${std_srcdir}/cmath \\\n+\t${std_srcdir}/csetjmp \\\n+\t${std_srcdir}/csignal \\\n+\t${std_srcdir}/cstdarg \\\n+\t${std_srcdir}/cstddef \\\n+\t${std_srcdir}/cstdio \\\n+\t${std_srcdir}/cstdlib \\\n+\t${std_srcdir}/cstring \\\n+\t${std_srcdir}/ctime \\\n+\t${std_srcdir}/cwchar \\\n+\t${std_srcdir}/cwctype\n \n \n target_srcdir = ${glibcpp_srcdir}/@OS_INC_SRCDIR@\n target_builddir = ./${target_alias}/bits\n-target_headers =  \t${target_srcdir}/ctype_base.h \t${target_srcdir}/ctype_inline.h \t${target_srcdir}/ctype_noninline.h \t${target_srcdir}/os_defines.h \t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \t${glibcpp_srcdir}/@LIMITS_INC_SRCDIR@/limits.h\n+target_headers = \\\n+\t${target_srcdir}/ctype_base.h \\\n+\t${target_srcdir}/ctype_inline.h \\\n+\t${target_srcdir}/ctype_noninline.h \\\n+\t${target_srcdir}/os_defines.h \\\n+\t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \\\n+\t${glibcpp_srcdir}/@LIMITS_INC_SRCDIR@/limits.h\n \n \n thread_builddir = ./${target_alias}/bits\n-thread_headers =  \t${thread_builddir}/gthr.h \t${thread_builddir}/gthr-single.h \t${thread_builddir}/gthr-default.h\n+thread_headers = \\\n+\t${thread_builddir}/gthr.h \\\n+\t${thread_builddir}/gthr-single.h \\\n+\t${thread_builddir}/gthr-default.h\n \n \n # List of all timestamp files.  By keeping only one copy of this list, both\n # CLEANFILES and all-local are kept up-to-date.\n-allstamps = stamp-std stamp-bits stamp-c_base stamp-backward stamp-ext \tstamp-target stamp-thread \n+allstamps = stamp-std stamp-bits stamp-c_base stamp-backward stamp-ext \\\n+\tstamp-target stamp-thread \n \n \n # Target includes for threads"}, {"sha": "55b3bc7cc2721fc3ba33e5814f9d328b0439525f", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9", "patch": "@@ -151,22 +151,28 @@ toplevel_srcdir = @toplevel_srcdir@\n AUTOMAKE_OPTIONS = 1.3 cygnus\n \n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n-@GLIBCPP_BUILD_LIBIO_TRUE@noinst_LTLIBRARIES = libio.la\n+@GLIBCPP_BUILD_LIBIO_TRUE@noinst_LTLIBRARIES = @GLIBCPP_BUILD_LIBIO_TRUE@libio.la\n @GLIBCPP_BUILD_LIBIO_FALSE@noinst_LTLIBRARIES = \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n \n-INCLUDES =  \t-nostdinc++ \t$(GLIBCPP_INCLUDES) $(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n+INCLUDES = \\\n+\t-nostdinc++ \\\n+\t$(GLIBCPP_INCLUDES) $(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n \n-libio_headers =          libio.h libioP.h iolibio.h\n+libio_headers = \\\n+        libio.h libioP.h iolibio.h\n \n-@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = \tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c \tiofclose.c iofopen.c \n+@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = @GLIBCPP_NEED_LIBIO_TRUE@\\\n+@GLIBCPP_NEED_LIBIO_TRUE@\tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c \\\n+@GLIBCPP_NEED_LIBIO_TRUE@\tiofclose.c iofopen.c \n @GLIBCPP_NEED_LIBIO_FALSE@LIBIO_SRCS = \n-@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = \twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n+@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = @GLIBCPP_NEED_WLIBIO_TRUE@\\\n+@GLIBCPP_NEED_WLIBIO_TRUE@\twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n @GLIBCPP_NEED_WLIBIO_FALSE@LIBIO_WSRCS = \n \n EXTRA_DIST = iostreamP.h"}, {"sha": "368a449a50b363792938bd06eb476d471511ea9a", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9", "patch": "@@ -160,7 +160,9 @@ EXTRA_LONG_DOUBLE_yes = signbitl.c\n \n EXTRA_DIST = $(EXTRA_LONG_DOUBLE_yes) \n \n-libmath_la_LIBADD =  \t@LIBMATHOBJS@ \t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n+libmath_la_LIBADD = \\\n+\t@LIBMATHOBJS@ \\\n+\t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n \n \n libmath_la_DEPENDENCIES = $(libmath_la_LIBADD)\n@@ -172,7 +174,8 @@ LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES =  \t$(TOPLEVEL_INCLUDES) \n+INCLUDES = \\\n+\t$(TOPLEVEL_INCLUDES) \n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "e1e9ec20c235e5199a45a34adb56d5f2ffd23ee6", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 47, "deletions": 12, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9", "patch": "@@ -171,24 +171,50 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS = \\\n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS = \\\n+\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n \n-INCLUDES =  \t-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include \t$(GLIBCPP_INCLUDES) $(LIBSUPCXX_INCLUDES)\n-\n-\n-headers =  \texception new typeinfo cxxabi.h exception_defines.h \n-\n-\n-sources =  \tdel_op.cc \tdel_opnt.cc \tdel_opv.cc \tdel_opvnt.cc \teh_alloc.cc \teh_aux_runtime.cc \teh_catch.cc \teh_exception.cc \teh_globals.cc \teh_personality.cc \teh_terminate.cc \teh_throw.cc \tnew_handler.cc \tnew_op.cc \tnew_opnt.cc \tnew_opv.cc \tnew_opvnt.cc \tpure.cc \ttinfo.cc \ttinfo2.cc \tvec.cc\n+INCLUDES = \\\n+\t-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include \\\n+\t$(GLIBCPP_INCLUDES) $(LIBSUPCXX_INCLUDES)\n+\n+\n+headers = \\\n+\texception new typeinfo cxxabi.h exception_defines.h \n+\n+\n+sources = \\\n+\tdel_op.cc \\\n+\tdel_opnt.cc \\\n+\tdel_opv.cc \\\n+\tdel_opvnt.cc \\\n+\teh_alloc.cc \\\n+\teh_aux_runtime.cc \\\n+\teh_catch.cc \\\n+\teh_exception.cc \\\n+\teh_globals.cc \\\n+\teh_personality.cc \\\n+\teh_terminate.cc \\\n+\teh_throw.cc \\\n+\tnew_handler.cc \\\n+\tnew_op.cc \\\n+\tnew_opnt.cc \\\n+\tnew_opv.cc \\\n+\tnew_opvnt.cc \\\n+\tpure.cc \\\n+\ttinfo.cc \\\n+\ttinfo2.cc \\\n+\tvec.cc\n \n \n libsupc___la_SOURCES = $(sources)\n@@ -204,7 +230,12 @@ LIBSUPCXX_CXXFLAGS = $(LIBSUPCXX_PICFLAGS)\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS = \\\n+\t-fno-implicit-templates \\\n+\t$(LIBSUPCXX_CXXFLAGS) \\\n+\t$(WARN_CXXFLAGS) \\\n+\t$(OPTIMIZE_CXXFLAGS) \\\n+\t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -228,7 +259,9 @@ AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS)\n #\n # We have to put --tag disable-shared after --tag CXX lest things\n # CXX undo the affect of disable-shared.\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared                --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n+               --mode=compile $(CXX) $(INCLUDES) \\\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We'd have a problem when building the shared libstdc++ object if\n@@ -237,7 +270,9 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared                --mode=c\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared           --mode=link $(CXX)           @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared \\\n+          --mode=link $(CXX) \\\n+          @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "dc10400e1c3958c69e180dbc73f4a35be1068921", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9", "patch": "@@ -164,7 +164,9 @@ LOCALE_OUT = @glibcpp_MOFILES@\n MSGFMT = msgfmt\n \n # Necessary files.\n-DISTFILES =  \tMakefile.am Makefile.in string_literals.cc POTFILES.in $(PACKAGE).pot \t$(LOCALE_IN) \n+DISTFILES = \\\n+\tMakefile.am Makefile.in string_literals.cc POTFILES.in $(PACKAGE).pot \\\n+\t$(LOCALE_IN) \n \n \n # Specify what gets cleaned up on a 'make clean'"}, {"sha": "dd2b3b8a51f82a45ca349136c60b7ea8d6a72dca", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9", "patch": "@@ -161,11 +161,13 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS = \\\n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS = \\\n+\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -175,17 +177,29 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES =  \t-nostdinc++ \t$(GLIBCPP_INCLUDES) \t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t$(TOPLEVEL_INCLUDES)\n+INCLUDES = \\\n+\t-nostdinc++ \\\n+\t$(GLIBCPP_INCLUDES) \\\n+\t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \\\n+\t$(TOPLEVEL_INCLUDES)\n \n \n-sources =  \tbasic_file.cc bitset.cc c++locale.cc cmath.cc codecvt.cc \tcomplex_io.cc functexcept.cc globals.cc ios.cc limits.cc \tlocale.cc locale-inst.cc localename.cc \tcollate.cc messages.cc moneypunct.cc numpunct.cc \tmisc-inst.cc stdexcept.cc stl-inst.cc string-inst.cc strstream.cc \tvalarray-inst.cc wstring-inst.cc\n+sources = \\\n+\tbasic_file.cc bitset.cc c++locale.cc cmath.cc codecvt.cc \\\n+\tcomplex_io.cc functexcept.cc globals.cc ios.cc limits.cc \\\n+\tlocale.cc locale-inst.cc localename.cc \\\n+\tcollate.cc messages.cc moneypunct.cc numpunct.cc \\\n+\tmisc-inst.cc stdexcept.cc stl-inst.cc string-inst.cc strstream.cc \\\n+\tvalarray-inst.cc wstring-inst.cc\n \n \n VPATH = $(top_srcdir):$(top_srcdir)/src\n \n libstdc___la_SOURCES = $(sources)\n \n-libstdc___la_LIBADD =  \t../libmath/libmath.la @libio_la@ \t../libsupc++/libsupc++convenience.la\n+libstdc___la_LIBADD = \\\n+\t../libmath/libmath.la @libio_la@ \\\n+\t../libsupc++/libsupc++convenience.la\n \n \n libstdc___la_LDFLAGS = -version-info @libtool_VERSION@ -lm\n@@ -205,7 +219,12 @@ GLIBCPP_INCLUDE_DIR = @glibcpp_builddir@/include\n # The no-implicit-templates flag will generate unresolved references to\n # the concept-checking symbols.  So we must disable the checks while\n # actually building the library.\n-AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS = \\\n+\t-fno-implicit-templates \\\n+\t$(LIBSUPCXX_CXXFLAGS) \\\n+\t$(WARN_CXXFLAGS) \\\n+\t$(OPTIMIZE_CXXFLAGS) \\\n+\t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -226,7 +245,8 @@ AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS)\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We'd have a problem when building the shared libstdc++ object if\n@@ -235,7 +255,8 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \\\n+\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "2bf74ecab1b3a436ae3752c65f0197e7f9537216", "filename": "libstdc++-v3/src/stl-inst.cc", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9/libstdc%2B%2B-v3%2Fsrc%2Fstl-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9/libstdc%2B%2B-v3%2Fsrc%2Fstl-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstl-inst.cc?ref=2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9", "patch": "@@ -50,27 +50,5 @@ namespace std\n     vector<unsigned int>::\n     _M_insert_aux(vector<unsigned int>::iterator, unsigned int const &);\n \n-#ifdef _GLIBCPP_CONCEPT_CHECKS\n-  template\n-    void __sink_unused_warning<unsigned int>(unsigned int);\n-\n-  template\n-    void __sink_unused_warning<locale::facet*>(locale::facet*);\n+} // namespace std\n \n-  template\n-    void __sink_unused_warning<char>(char);\n-\n-  template\n-    void __sink_unused_warning<ostreambuf_iterator<char> >\n-    (ostreambuf_iterator<char>);\n-\n-# ifdef _GLIBCPP_USE_WCHAR_T\n-  template\n-    void __sink_unused_warning<wchar_t>(wchar_t);\n-\n-  template\n-    void __sink_unused_warning<ostreambuf_iterator<wchar_t> > \n-    (ostreambuf_iterator<wchar_t>);\n-# endif\n-#endif\n-} //std"}, {"sha": "1dff6d209d61fe5c19b1114be6de6c16b6b4a112", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9", "patch": "@@ -155,10 +155,14 @@ AUTOMAKE_OPTIONS = foreign dejagnu\n \n DEJATOOL = libstdc++-v3\n \n-EXPECT = `if [ -f @glibcpp_builddir@/../../expect/expect ] ; then             echo @glibcpp_builddir@/../../expect/expect ;           else echo expect ; fi`\n+EXPECT = `if [ -f @glibcpp_builddir@/../../expect/expect ] ; then \\\n+            echo @glibcpp_builddir@/../../expect/expect ; \\\n+          else echo expect ; fi`\n \n \n-RUNTEST = `if [ -f @glibcpp_srcdir@/../dejagnu/runtest ] ; then \t       echo @glibcpp_srcdir@/../dejagnu/runtest ; \t    else echo runtest; fi`\n+RUNTEST = `if [ -f @glibcpp_srcdir@/../dejagnu/runtest ] ; then \\\n+\t       echo @glibcpp_srcdir@/../dejagnu/runtest ; \\\n+\t    else echo runtest; fi`\n \n \n RUNTESTFLAGS = "}, {"sha": "04a2c29f4448de6f492a962e53221d2c20a1c07c", "filename": "libstdc++-v3/testsuite_flags.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9/libstdc%2B%2B-v3%2Ftestsuite_flags.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9/libstdc%2B%2B-v3%2Ftestsuite_flags.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite_flags.in?ref=2d25bf5d526dae1fbeffc3dbc88b75d824b27ea9", "patch": "@@ -28,14 +28,14 @@ query=$1\n \n case ${query} in\n     --install-includes)\n-      INCLUDES=\"-I${SRC_DIR}/testsuite -I${BUILD_DIR}/testsuite\"\n+      INCLUDES=\"-I${SRC_DIR}/testsuite\"\n       echo ${INCLUDES}\n       ;;\n     --build-includes)\n       INCLUDES=\"-nostdinc++ @GLIBCPP_INCLUDES@\n \t        -I${SRC_DIR}/libsupc++ -I${SRC_DIR}/libio \n \t\t-I${SRC_DIR}/include/backward \n-\t\t-I${SRC_DIR}/testsuite -I${BUILD_DIR}/testsuite\"\n+\t\t-I${SRC_DIR}/testsuite\"\n       echo ${INCLUDES}\n       ;;\n     --install-cxx)"}]}