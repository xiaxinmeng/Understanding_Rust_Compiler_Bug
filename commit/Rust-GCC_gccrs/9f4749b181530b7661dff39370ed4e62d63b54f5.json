{"sha": "9f4749b181530b7661dff39370ed4e62d63b54f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY0NzQ5YjE4MTUzMGI3NjYxZGZmMzkzNzBlZDRlNjJkNjNiNTRmNQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1999-03-18T11:12:01Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1999-03-18T11:12:01Z"}, "message": "reload.c (find_reloads_toplev): When processing X recursively...\n\n\t* reload.c (find_reloads_toplev): When processing X recursively,\n\tdon't alter it destructively except by filling in constants.\n\nFrom-SVN: r25840", "tree": {"sha": "55ba561fcf89fdfd7073a691dfd67f4e9a76fc1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55ba561fcf89fdfd7073a691dfd67f4e9a76fc1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f4749b181530b7661dff39370ed4e62d63b54f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f4749b181530b7661dff39370ed4e62d63b54f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f4749b181530b7661dff39370ed4e62d63b54f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f4749b181530b7661dff39370ed4e62d63b54f5/comments", "author": null, "committer": null, "parents": [{"sha": "735396d963d1d45bb18645001f53fdeb7a9d69a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/735396d963d1d45bb18645001f53fdeb7a9d69a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/735396d963d1d45bb18645001f53fdeb7a9d69a2"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "e06c403e5ceb4d53edf7bb60697e173db413a5bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f4749b181530b7661dff39370ed4e62d63b54f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f4749b181530b7661dff39370ed4e62d63b54f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f4749b181530b7661dff39370ed4e62d63b54f5", "patch": "@@ -1,3 +1,8 @@\n+Thu Mar 18 19:09:50 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* reload.c (find_reloads_toplev): When processing X recursively,\n+\tdon't alter it destructively except by filling in constants.\n+\n Thu Mar 18 10:14:18 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* cccp.c (default_include): Initialize structure memebers."}, {"sha": "8ba0621068d1adfaefa629f18d8baab66fe50c89", "filename": "gcc/reload.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f4749b181530b7661dff39370ed4e62d63b54f5/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f4749b181530b7661dff39370ed4e62d63b54f5/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=9f4749b181530b7661dff39370ed4e62d63b54f5", "patch": "@@ -4367,6 +4367,7 @@ find_reloads_toplev (x, opnum, type, ind_levels, is_set_dest, insn)\n \n   register char *fmt = GET_RTX_FORMAT (code);\n   register int i;\n+  int copied;\n \n   if (code == REG)\n     {\n@@ -4503,11 +4504,24 @@ find_reloads_toplev (x, opnum, type, ind_levels, is_set_dest, insn)\n \t\t\t\t\t insn);\n     }\n \n-  for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n+  for (copied = 0, i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n     {\n       if (fmt[i] == 'e')\n-\tXEXP (x, i) = find_reloads_toplev (XEXP (x, i), opnum, type,\n-\t\t\t\t\t   ind_levels, is_set_dest, insn);\n+\t{\n+\t  rtx new_part = find_reloads_toplev (XEXP (x, i), opnum, type,\n+\t\t\t\t\t      ind_levels, is_set_dest, insn);\n+\t  /* If we have replaced a reg with it's equivalent memory loc -\n+\t     that can still be handled here e.g. if it's in a paradoxical\n+\t     subreg - we must make the change in a copy, rather than using\n+\t     a destructive change.  This way, find_reloads can still elect\n+\t     not to do the change.  */\n+\t  if (new_part != XEXP (x, i) && ! CONSTANT_P (new_part) && ! copied)\n+\t    {\n+\t      x = copy_rtx (x);\n+\t      copied = 1;\n+\t    }\n+\t  XEXP (x, i) = new_part;\n+\t}\n     }\n   return x;\n }"}]}