{"sha": "40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBjZTdmYTZkZDM4ZjhhYzI2ZDU3NmM4NGY1ZGJlNDM2MmFhOTAyYg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-11-05T13:36:29Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-11-05T13:36:29Z"}, "message": "Come up with SIZE_AMOUNT and use it in memory statistics and sort stats.\n\n2018-11-05  Martin Liska  <mliska@suse.cz>\n\n\t* alloc-pool.h (struct pool_usage): Use SIZE_AMOUNT.\n\t* bitmap.h (struct bitmap_usage): Likewise.\n\t* ggc-common.c (SCALE): Remove.\n\t(LABEL): Likewise.\n\t(struct ggc_usage): Use SIZE_AMOUNT. And update\n\tcompare method.\n\t* ggc-page.c (SCALE): Remove.\n\t(STAT_LABEL): Remove.\n\t(ggc_print_statistics): Use SIZE_AMOUNT.\n\t* gimple.h (SCALE): Remove.\n\t(LABEL): Likewise.\n\t* input.c (ONE_K): Remove.\n\t(ONE_M): Likewise.\n\t(SCALE): Likewise.\n\t(STAT_LABEL): Likewise.\n\t(FORMAT_AMOUNT): Likewise.\n\t(dump_line_table_statistics): Use SIZE_AMOUNT.\n\t* mem-stats.h (struct mem_usage): Likewise.\n\t* rtl.c (dump_rtx_statistics): Likewise.\n\t(rtx_alloc_counts): Change type to size_t.\n\t(rtx_alloc_sizes): Likewise.\n\t(rtx_count_cmp): New.\n\t(dump_rtx_statistics): Sort first based on counts.\n\t* tree.c (tree_nodes_cmp): New.\n\t(tree_codes_cmp): New.\n\t(dump_tree_statistics): Sort first based on counts.\n\t* system.h (ONE_K): New.\n\t(ONE_M): Likewise.\n\t(SIZE_SCALE): Likewise.\n\t(SIZE_LABEL): Likewise.\n\t(SIZE_AMOUNT): Likewise.\n\t* tree-cfg.c (dump_cfg_stats): Use SIZE_AMOUNT.\n\t* tree-dfa.c (dump_dfa_stats): Likewise.\n\t* tree-phinodes.c (phinodes_print_statistics): Likewise.\n\t* tree-ssanames.c (ssanames_print_statistics): Likewise.\n\t* tree.c (dump_tree_statistics): Likewise.\n\t* vec.c (struct vec_usage): Likewise.\n\t* trans-mem.c (tm_mangle): Enlarge buffer in order to not\n\ttrigger a -Werror=format-overflow with\n\t--enable-gather-detailed-stats.\n\nFrom-SVN: r265800", "tree": {"sha": "94fa1f477283ce96ec503e9878181a2db6833334", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94fa1f477283ce96ec503e9878181a2db6833334"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "00e6775a5faa43702e96e315e7a1c22297983f2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00e6775a5faa43702e96e315e7a1c22297983f2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00e6775a5faa43702e96e315e7a1c22297983f2a"}], "stats": {"total": 538, "additions": 315, "deletions": 223}, "files": [{"sha": "775461b936e098e60239832557623408e5160b26", "filename": "gcc/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b", "patch": "@@ -1,3 +1,46 @@\n+2018-11-05  Martin Liska  <mliska@suse.cz>\n+\n+\t* alloc-pool.h (struct pool_usage): Use SIZE_AMOUNT.\n+\t* bitmap.h (struct bitmap_usage): Likewise.\n+\t* ggc-common.c (SCALE): Remove.\n+\t(LABEL): Likewise.\n+\t(struct ggc_usage): Use SIZE_AMOUNT. And update\n+\tcompare method.\n+\t* ggc-page.c (SCALE): Remove.\n+\t(STAT_LABEL): Remove.\n+\t(ggc_print_statistics): Use SIZE_AMOUNT.\n+\t* gimple.h (SCALE): Remove.\n+\t(LABEL): Likewise.\n+\t* input.c (ONE_K): Remove.\n+\t(ONE_M): Likewise.\n+\t(SCALE): Likewise.\n+\t(STAT_LABEL): Likewise.\n+\t(FORMAT_AMOUNT): Likewise.\n+\t(dump_line_table_statistics): Use SIZE_AMOUNT.\n+\t* mem-stats.h (struct mem_usage): Likewise.\n+\t* rtl.c (dump_rtx_statistics): Likewise.\n+\t(rtx_alloc_counts): Change type to size_t.\n+\t(rtx_alloc_sizes): Likewise.\n+\t(rtx_count_cmp): New.\n+\t(dump_rtx_statistics): Sort first based on counts.\n+\t* tree.c (tree_nodes_cmp): New.\n+\t(tree_codes_cmp): New.\n+\t(dump_tree_statistics): Sort first based on counts.\n+\t* system.h (ONE_K): New.\n+\t(ONE_M): Likewise.\n+\t(SIZE_SCALE): Likewise.\n+\t(SIZE_LABEL): Likewise.\n+\t(SIZE_AMOUNT): Likewise.\n+\t* tree-cfg.c (dump_cfg_stats): Use SIZE_AMOUNT.\n+\t* tree-dfa.c (dump_dfa_stats): Likewise.\n+\t* tree-phinodes.c (phinodes_print_statistics): Likewise.\n+\t* tree-ssanames.c (ssanames_print_statistics): Likewise.\n+\t* tree.c (dump_tree_statistics): Likewise.\n+\t* vec.c (struct vec_usage): Likewise.\n+\t* trans-mem.c (tm_mangle): Enlarge buffer in order to not\n+\ttrigger a -Werror=format-overflow with\n+\t--enable-gather-detailed-stats.\n+\n 2018-11-05  Martin Liska  <mliska@suse.cz>\n \n \t* mem-stats.h (mem_alloc_description::release_instance_overhead):"}, {"sha": "d17a05ca4fb18bdc7bcfc70b429143f54b81b7ab", "filename": "gcc/alloc-pool.h", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Falloc-pool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Falloc-pool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.h?ref=40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b", "patch": "@@ -63,12 +63,16 @@ struct pool_usage: public mem_usage\n   {\n     char *location_string = loc->to_string ();\n \n-    fprintf (stderr, \"%-32s%-48s %6li%10li:%5.1f%%%10li%10li:%5.1f%%%12li\\n\",\n-\t     m_pool_name, location_string, (long)m_instances,\n-\t     (long)m_allocated, get_percent (m_allocated, total.m_allocated),\n-\t     (long)m_peak, (long)m_times,\n+    fprintf (stderr, \"%-32s%-48s %5zu%c%9zu%c:%5.1f%%%9zu\"\n+\t     \"%c%9zu%c:%5.1f%%%12zu\\n\",\n+\t     m_pool_name, location_string,\n+\t     SIZE_AMOUNT (m_instances),\n+\t     SIZE_AMOUNT (m_allocated),\n+\t     get_percent (m_allocated, total.m_allocated),\n+\t     SIZE_AMOUNT (m_peak),\n+\t     SIZE_AMOUNT (m_times),\n \t     get_percent (m_times, total.m_times),\n-\t     (long)m_element_size);\n+\t     m_element_size);\n \n     free (location_string);\n   }\n@@ -87,8 +91,8 @@ struct pool_usage: public mem_usage\n   dump_footer ()\n   {\n     print_dash_line ();\n-    fprintf (stderr, \"%s%82li%10li\\n\", \"Total\", (long)m_instances,\n-\t     (long)m_allocated);\n+    fprintf (stderr, \"%s%82zu%c%10zu%c\\n\", \"Total\",\n+\t     SIZE_AMOUNT (m_instances), SIZE_AMOUNT (m_allocated));\n     print_dash_line ();\n   }\n "}, {"sha": "973ea846baf100b1bf9a2ae5718e7b9f0426c99d", "filename": "gcc/bitmap.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b", "patch": "@@ -239,14 +239,14 @@ struct bitmap_usage: public mem_usage\n   {\n     char *location_string = loc->to_string ();\n \n-    fprintf (stderr, \"%-48s %10\" PRIu64 \":%5.1f%%\"\n-\t     \"%10\" PRIu64 \"%10\" PRIu64 \":%5.1f%%\"\n-\t     \"%12\" PRIu64 \"%12\" PRIu64 \"%10s\\n\",\n-\t     location_string, (uint64_t)m_allocated,\n+    fprintf (stderr, \"%-48s %9zu%c:%5.1f%%\"\n+\t     \"%9zu%c%9zu%c:%5.1f%%\"\n+\t     \"%11\" PRIu64 \"%c%11\" PRIu64 \"%c%10s\\n\",\n+\t     location_string, SIZE_AMOUNT (m_allocated),\n \t     get_percent (m_allocated, total.m_allocated),\n-\t     (uint64_t)m_peak, (uint64_t)m_times,\n+\t     SIZE_AMOUNT (m_peak), SIZE_AMOUNT (m_times),\n \t     get_percent (m_times, total.m_times),\n-\t     m_nsearches, m_search_iter,\n+\t     SIZE_AMOUNT (m_nsearches), SIZE_AMOUNT (m_search_iter),\n \t     loc->m_ggc ? \"ggc\" : \"heap\");\n \n     free (location_string);"}, {"sha": "9fdba23ce4c268957957dfae55d25779156c1778", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b", "patch": "@@ -195,14 +195,6 @@ ggc_splay_dont_free (void * x ATTRIBUTE_UNUSED, void *nl)\n   gcc_assert (!nl);\n }\n \n-/* Print statistics that are independent of the collector in use.  */\n-#define SCALE(x) ((unsigned long) ((x) < 1024*10 \\\n-\t\t  ? (x) \\\n-\t\t  : ((x) < 1024*1024*10 \\\n-\t\t     ? (x) / 1024 \\\n-\t\t     : (x) / (1024*1024))))\n-#define LABEL(x) ((x) < 1024*10 ? ' ' : ((x) < 1024*1024*10 ? 'k' : 'M'))\n-\n void\n ggc_print_common_statistics (FILE *stream ATTRIBUTE_UNUSED,\n \t\t\t     ggc_statistics *stats)\n@@ -890,16 +882,17 @@ struct ggc_usage: public mem_usage\n   inline void\n   dump (const char *prefix, ggc_usage &total) const\n   {\n-    long balance = get_balance ();\n+    size_t balance = get_balance ();\n     fprintf (stderr,\n-\t     \"%-48s %10li:%5.1f%%%10li:%5.1f%%\"\n-\t     \"%10li:%5.1f%%%10li:%5.1f%%%10li\\n\",\n-\t     prefix, (long)m_collected,\n+\t     \"%-48s %9zu%c:%5.1f%%%9zu%c:%5.1f%%\"\n+\t     \"%9zu%c:%5.1f%%%9zu%c:%5.1f%%%9zu%c\\n\",\n+\t     prefix, SIZE_AMOUNT (m_collected),\n \t     get_percent (m_collected, total.m_collected),\n-\t     (long)m_freed, get_percent (m_freed, total.m_freed),\n-\t     (long)balance, get_percent (balance, total.get_balance ()),\n-\t     (long)m_overhead, get_percent (m_overhead, total.m_overhead),\n-\t     (long)m_times);\n+\t     SIZE_AMOUNT (m_freed), get_percent (m_freed, total.m_freed),\n+\t     SIZE_AMOUNT (balance), get_percent (balance, total.get_balance ()),\n+\t     SIZE_AMOUNT (m_overhead),\n+\t     get_percent (m_overhead, total.m_overhead),\n+\t     SIZE_AMOUNT (m_times));\n   }\n \n   /* Dump usage coupled to LOC location, where TOTAL is sum of all rows.  */\n@@ -923,7 +916,7 @@ struct ggc_usage: public mem_usage\n   }\n \n   /* Get balance which is GGC allocation leak.  */\n-  inline long\n+  inline size_t\n   get_balance () const\n   {\n     return m_allocated + m_overhead - m_collected - m_freed;\n@@ -938,10 +931,7 @@ struct ggc_usage: public mem_usage\n     const mem_pair_t f = *(const mem_pair_t *)first;\n     const mem_pair_t s = *(const mem_pair_t *)second;\n \n-    if (*f.second == *s.second)\n-      return 0;\n-\n-    return *f.second < *s.second ? 1 : -1;\n+    return s.second->get_balance () - f.second->get_balance ();\n   }\n \n   /* Compare rows in final GGC summary dump.  */"}, {"sha": "00c2864711f00ed812d3d3a3cc0807e033301110", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b", "patch": "@@ -2237,14 +2237,6 @@ ggc_grow (void)\n     fprintf (stderr, \" {GC start %luk} \", (unsigned long) G.allocated / 1024);\n }\n \n-/* Print allocation statistics.  */\n-#define SCALE(x) ((unsigned long) ((x) < 1024*10 \\\n-\t\t  ? (x) \\\n-\t\t  : ((x) < 1024*1024*10 \\\n-\t\t     ? (x) / 1024 \\\n-\t\t     : (x) / (1024*1024))))\n-#define STAT_LABEL(x) ((x) < 1024*10 ? ' ' : ((x) < 1024*1024*10 ? 'k' : 'M'))\n-\n void\n ggc_print_statistics (void)\n {\n@@ -2296,53 +2288,61 @@ ggc_print_statistics (void)\n \t  overhead += (sizeof (page_entry) - sizeof (long)\n \t\t       + BITMAP_SIZE (OBJECTS_IN_PAGE (p) + 1));\n \t}\n-      fprintf (stderr, \"%-8lu %10lu%c %10lu%c %10lu%c\\n\",\n-\t       (unsigned long) OBJECT_SIZE (i),\n-\t       SCALE (allocated), STAT_LABEL (allocated),\n-\t       SCALE (in_use), STAT_LABEL (in_use),\n-\t       SCALE (overhead), STAT_LABEL (overhead));\n+      fprintf (stderr, \"%-8zu %10zu%c %10zu%c %10zu%c\\n\",\n+\t       OBJECT_SIZE (i),\n+\t       SIZE_AMOUNT (allocated),\n+\t       SIZE_AMOUNT (in_use),\n+\t       SIZE_AMOUNT (overhead));\n       total_overhead += overhead;\n     }\n-  fprintf (stderr, \"%-8s %10lu%c %10lu%c %10lu%c\\n\", \"Total\",\n-\t   SCALE (G.bytes_mapped), STAT_LABEL (G.bytes_mapped),\n-\t   SCALE (G.allocated), STAT_LABEL (G.allocated),\n-\t   SCALE (total_overhead), STAT_LABEL (total_overhead));\n+  fprintf (stderr, \"%-8s %10zu%c %10zu%c %10zu%c\\n\",\n+\t   \"Total\",\n+\t   SIZE_AMOUNT (G.bytes_mapped),\n+\t   SIZE_AMOUNT (G.allocated),\n+\t   SIZE_AMOUNT (total_overhead));\n \n   if (GATHER_STATISTICS)\n     {\n       fprintf (stderr, \"\\nTotal allocations and overheads during \"\n \t       \"the compilation process\\n\");\n \n-      fprintf (stderr, \"Total Overhead:                          %10\"\n-\t       HOST_LONG_LONG_FORMAT \"d\\n\", G.stats.total_overhead);\n-      fprintf (stderr, \"Total Allocated:                         %10\"\n-\t       HOST_LONG_LONG_FORMAT \"d\\n\",\n-\t       G.stats.total_allocated);\n-\n-      fprintf (stderr, \"Total Overhead  under  32B:              %10\"\n-\t       HOST_LONG_LONG_FORMAT \"d\\n\", G.stats.total_overhead_under32);\n-      fprintf (stderr, \"Total Allocated under  32B:              %10\"\n-\t       HOST_LONG_LONG_FORMAT \"d\\n\", G.stats.total_allocated_under32);\n-      fprintf (stderr, \"Total Overhead  under  64B:              %10\"\n-\t       HOST_LONG_LONG_FORMAT \"d\\n\", G.stats.total_overhead_under64);\n-      fprintf (stderr, \"Total Allocated under  64B:              %10\"\n-\t       HOST_LONG_LONG_FORMAT \"d\\n\", G.stats.total_allocated_under64);\n-      fprintf (stderr, \"Total Overhead  under 128B:              %10\"\n-\t       HOST_LONG_LONG_FORMAT \"d\\n\", G.stats.total_overhead_under128);\n-      fprintf (stderr, \"Total Allocated under 128B:              %10\"\n-\t       HOST_LONG_LONG_FORMAT \"d\\n\", G.stats.total_allocated_under128);\n+      fprintf (stderr, \"Total Overhead:                          %9\"\n+\t       HOST_LONG_LONG_FORMAT \"d%c\\n\",\n+\t       SIZE_AMOUNT (G.stats.total_overhead));\n+      fprintf (stderr, \"Total Allocated:                         %9\"\n+\t       HOST_LONG_LONG_FORMAT \"d%c\\n\",\n+\t       SIZE_AMOUNT (G.stats.total_allocated));\n+\n+      fprintf (stderr, \"Total Overhead  under  32B:              %9\"\n+\t       HOST_LONG_LONG_FORMAT \"d%c\\n\",\n+\t       SIZE_AMOUNT (G.stats.total_overhead_under32));\n+      fprintf (stderr, \"Total Allocated under  32B:              %9\"\n+\t       HOST_LONG_LONG_FORMAT \"d%c\\n\",\n+\t       SIZE_AMOUNT (G.stats.total_allocated_under32));\n+      fprintf (stderr, \"Total Overhead  under  64B:              %9\"\n+\t       HOST_LONG_LONG_FORMAT \"d%c\\n\",\n+\t       SIZE_AMOUNT (G.stats.total_overhead_under64));\n+      fprintf (stderr, \"Total Allocated under  64B:              %9\"\n+\t       HOST_LONG_LONG_FORMAT \"d%c\\n\",\n+\t       SIZE_AMOUNT (G.stats.total_allocated_under64));\n+      fprintf (stderr, \"Total Overhead  under 128B:              %9\"\n+\t       HOST_LONG_LONG_FORMAT \"d%c\\n\",\n+\t       SIZE_AMOUNT (G.stats.total_overhead_under128));\n+      fprintf (stderr, \"Total Allocated under 128B:              %9\"\n+\t       HOST_LONG_LONG_FORMAT \"d%c\\n\",\n+\t       SIZE_AMOUNT (G.stats.total_allocated_under128));\n \n       for (i = 0; i < NUM_ORDERS; i++)\n \tif (G.stats.total_allocated_per_order[i])\n \t  {\n-\t    fprintf (stderr, \"Total Overhead  page size %9lu:     %10\"\n-\t\t     HOST_LONG_LONG_FORMAT \"d\\n\",\n-\t\t     (unsigned long) OBJECT_SIZE (i),\n-\t\t     G.stats.total_overhead_per_order[i]);\n-\t    fprintf (stderr, \"Total Allocated page size %9lu:     %10\"\n-\t\t     HOST_LONG_LONG_FORMAT \"d\\n\",\n-\t\t     (unsigned long) OBJECT_SIZE (i),\n-\t\t     G.stats.total_allocated_per_order[i]);\n+\t    fprintf (stderr, \"Total Overhead  page size %9zu:     %9\"\n+\t\t     HOST_LONG_LONG_FORMAT \"d%c\\n\",\n+\t\t     OBJECT_SIZE (i),\n+\t\t     SIZE_AMOUNT (G.stats.total_overhead_per_order[i]));\n+\t    fprintf (stderr, \"Total Allocated page size %9zu:     %9\"\n+\t\t     HOST_LONG_LONG_FORMAT \"d%c\\n\",\n+\t\t     OBJECT_SIZE (i),\n+\t\t     SIZE_AMOUNT (G.stats.total_allocated_per_order[i]));\n \t  }\n   }\n }"}, {"sha": "579b750d913c8b9026f3aafd9296e640a32bf12a", "filename": "gcc/gimple.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b", "patch": "@@ -2149,15 +2149,16 @@ dump_gimple_statistics (void)\n   fprintf (stderr, \"---------------------------------------\\n\");\n   for (i = 0; i < (int) gimple_alloc_kind_all; ++i)\n     {\n-      fprintf (stderr, \"%-20s %7\" PRIu64 \" %10\" PRIu64 \"\\n\",\n-\t       gimple_alloc_kind_names[i], gimple_alloc_counts[i],\n-\t       gimple_alloc_sizes[i]);\n+      fprintf (stderr, \"%-20s %7\" PRIu64 \"%c %10\" PRIu64 \"%c\\n\",\n+\t       gimple_alloc_kind_names[i],\n+\t       SIZE_AMOUNT (gimple_alloc_counts[i]),\n+\t       SIZE_AMOUNT (gimple_alloc_sizes[i]));\n       total_tuples += gimple_alloc_counts[i];\n       total_bytes += gimple_alloc_sizes[i];\n     }\n   fprintf (stderr, \"---------------------------------------\\n\");\n-  fprintf (stderr, \"%-20s %7\" PRIu64 \" %10\" PRIu64 \"\\n\", \"Total\",\n-\t   total_tuples, total_bytes);\n+  fprintf (stderr, \"%-20s %7\" PRIu64 \"%c %10\" PRIu64 \"%c\\n\", \"Total\",\n+\t   SIZE_AMOUNT (total_tuples), SIZE_AMOUNT (total_bytes));\n   fprintf (stderr, \"---------------------------------------\\n\");\n }\n "}, {"sha": "cdd711dae5b5cd8d48009f3e9b6cc43e7b0586f5", "filename": "gcc/gimple.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b", "patch": "@@ -6404,14 +6404,4 @@ gimple_set_do_not_emit_location (gimple *g)\n   gimple_set_plf (g, GF_PLF_1, true);\n }\n \n-\n-/* Macros for showing usage statistics.  */\n-#define SCALE(x) ((unsigned long) ((x) < 1024*10\t\\\n-\t\t  ? (x)\t\t\t\t\t\\\n-\t\t  : ((x) < 1024*1024*10\t\t\t\\\n-\t\t     ? (x) / 1024\t\t\t\\\n-\t\t     : (x) / (1024*1024))))\n-\n-#define LABEL(x) ((x) < 1024*10 ? 'b' : ((x) < 1024*1024*10 ? 'k' : 'M'))\n-\n #endif  /* GCC_GIMPLE_H */"}, {"sha": "9fb6e72421fc992b1a854157d086199153616099", "filename": "gcc/input.c", "status": "modified", "additions": 19, "deletions": 56, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b", "patch": "@@ -905,31 +905,6 @@ make_location (location_t caret, source_range src_range)\n   return COMBINE_LOCATION_DATA (line_table, pure_loc, src_range, NULL);\n }\n \n-#define ONE_K 1024\n-#define ONE_M (ONE_K * ONE_K)\n-\n-/* Display a number as an integer multiple of either:\n-   - 1024, if said integer is >= to 10 K (in base 2)\n-   - 1024 * 1024, if said integer is >= 10 M in (base 2)\n- */\n-#define SCALE(x) ((unsigned long) ((x) < 10 * ONE_K \\\n-\t\t  ? (x) \\\n-\t\t  : ((x) < 10 * ONE_M \\\n-\t\t     ? (x) / ONE_K \\\n-\t\t     : (x) / ONE_M)))\n-\n-/* For a given integer, display either:\n-   - the character 'k', if the number is higher than 10 K (in base 2)\n-     but strictly lower than 10 M (in base 2)\n-   - the character 'M' if the number is higher than 10 M (in base2)\n-   - the charcter ' ' if the number is strictly lower  than 10 K  */\n-#define STAT_LABEL(x) ((x) < 10 * ONE_K ? ' ' : ((x) < 10 * ONE_M ? 'k' : 'M'))\n-\n-/* Display an integer amount as multiple of 1K or 1M (in base 2).\n-   Display the correct unit (either k, M, or ' ') after the amount, as\n-   well.  */\n-#define FORMAT_AMOUNT(size) SCALE (size), STAT_LABEL (size)\n-\n /* Dump statistics to stderr about the memory usage of the line_table\n    set of line maps.  This also displays some statistics about macro\n    expansion.  */\n@@ -964,49 +939,37 @@ dump_line_table_statistics (void)\n              s.num_macro_tokens / s.num_expanded_macros);\n   fprintf (stderr,\n            \"\\nLine Table allocations during the \"\n-           \"compilation process\\n\");\n+\t   \"compilation process\\n\");\n   fprintf (stderr, \"Number of ordinary maps used:        %5ld%c\\n\",\n-           SCALE (s.num_ordinary_maps_used),\n-           STAT_LABEL (s.num_ordinary_maps_used));\n+\t   SIZE_AMOUNT (s.num_ordinary_maps_used));\n   fprintf (stderr, \"Ordinary map used size:              %5ld%c\\n\",\n-           SCALE (s.ordinary_maps_used_size),\n-           STAT_LABEL (s.ordinary_maps_used_size));\n+\t   SIZE_AMOUNT (s.ordinary_maps_used_size));\n   fprintf (stderr, \"Number of ordinary maps allocated:   %5ld%c\\n\",\n-           SCALE (s.num_ordinary_maps_allocated),\n-           STAT_LABEL (s.num_ordinary_maps_allocated));\n+\t   SIZE_AMOUNT (s.num_ordinary_maps_allocated));\n   fprintf (stderr, \"Ordinary maps allocated size:        %5ld%c\\n\",\n-           SCALE (s.ordinary_maps_allocated_size),\n-           STAT_LABEL (s.ordinary_maps_allocated_size));\n+\t   SIZE_AMOUNT (s.ordinary_maps_allocated_size));\n   fprintf (stderr, \"Number of macro maps used:           %5ld%c\\n\",\n-           SCALE (s.num_macro_maps_used),\n-           STAT_LABEL (s.num_macro_maps_used));\n+\t   SIZE_AMOUNT (s.num_macro_maps_used));\n   fprintf (stderr, \"Macro maps used size:                %5ld%c\\n\",\n-           SCALE (s.macro_maps_used_size),\n-           STAT_LABEL (s.macro_maps_used_size));\n+\t   SIZE_AMOUNT (s.macro_maps_used_size));\n   fprintf (stderr, \"Macro maps locations size:           %5ld%c\\n\",\n-           SCALE (s.macro_maps_locations_size),\n-           STAT_LABEL (s.macro_maps_locations_size));\n+\t   SIZE_AMOUNT (s.macro_maps_locations_size));\n   fprintf (stderr, \"Macro maps size:                     %5ld%c\\n\",\n-           SCALE (macro_maps_size),\n-           STAT_LABEL (macro_maps_size));\n+\t   SIZE_AMOUNT (macro_maps_size));\n   fprintf (stderr, \"Duplicated maps locations size:      %5ld%c\\n\",\n-           SCALE (s.duplicated_macro_maps_locations_size),\n-           STAT_LABEL (s.duplicated_macro_maps_locations_size));\n+\t   SIZE_AMOUNT (s.duplicated_macro_maps_locations_size));\n   fprintf (stderr, \"Total allocated maps size:           %5ld%c\\n\",\n-           SCALE (total_allocated_map_size),\n-           STAT_LABEL (total_allocated_map_size));\n+\t   SIZE_AMOUNT (total_allocated_map_size));\n   fprintf (stderr, \"Total used maps size:                %5ld%c\\n\",\n-           SCALE (total_used_map_size),\n-           STAT_LABEL (total_used_map_size));\n+\t   SIZE_AMOUNT (total_used_map_size));\n   fprintf (stderr, \"Ad-hoc table size:                   %5ld%c\\n\",\n-\t   SCALE (s.adhoc_table_size),\n-\t   STAT_LABEL (s.adhoc_table_size));\n-  fprintf (stderr, \"Ad-hoc table entries used:           %5ld\\n\",\n-\t   s.adhoc_table_entries_used);\n-  fprintf (stderr, \"optimized_ranges: %i\\n\",\n-\t   line_table->num_optimized_ranges);\n-  fprintf (stderr, \"unoptimized_ranges: %i\\n\",\n-\t   line_table->num_unoptimized_ranges);\n+\t   SIZE_AMOUNT (s.adhoc_table_size));\n+  fprintf (stderr, \"Ad-hoc table entries used:           %5ld%c\\n\",\n+\t   SIZE_AMOUNT (s.adhoc_table_entries_used));\n+  fprintf (stderr, \"optimized_ranges:                    %5xu%c\\n\",\n+\t   SIZE_AMOUNT (line_table->num_optimized_ranges));\n+  fprintf (stderr, \"unoptimized_ranges:                  %5xu%c\\n\",\n+\t   SIZE_AMOUNT (line_table->num_unoptimized_ranges));\n \n   fprintf (stderr, \"\\n\");\n }"}, {"sha": "10b41651bf310c7b4250f496110b8e0caa04e821", "filename": "gcc/mem-stats.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Fmem-stats.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Fmem-stats.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmem-stats.h?ref=40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b", "patch": "@@ -205,11 +205,11 @@ struct mem_usage\n   {\n     char *location_string = loc->to_string ();\n \n-    fprintf (stderr, \"%-48s %10\" PRIu64 \":%5.1f%%\"\n-\t     \"%10\" PRIu64 \"%10\" PRIu64 \":%5.1f%%%10s\\n\",\n-\t     location_string, (uint64_t)m_allocated,\n+    fprintf (stderr, \"%-48s %9zu%c:%5.1f%%\"\n+\t     \"%9zu%c%9zu%c:%5.1f%%%10s\\n\",\n+\t     location_string, SIZE_AMOUNT (m_allocated),\n \t     get_percent (m_allocated, total.m_allocated),\n-\t     (uint64_t)m_peak, (uint64_t)m_times,\n+\t     SIZE_AMOUNT (m_peak), SIZE_AMOUNT (m_times),\n \t     get_percent (m_times, total.m_times), loc->m_ggc ? \"ggc\" : \"heap\");\n \n     free (location_string);\n@@ -220,8 +220,8 @@ struct mem_usage\n   dump_footer () const\n   {\n     print_dash_line ();\n-    fprintf (stderr, \"%s%54\" PRIu64 \"%27\" PRIu64 \"\\n\", \"Total\",\n-\t     (uint64_t)m_allocated, (uint64_t)m_times);\n+    fprintf (stderr, \"%s%53zu%c%26zu%c\\n\", \"Total\",\n+\t     SIZE_AMOUNT (m_allocated), SIZE_AMOUNT (m_times));\n     print_dash_line ();\n   }\n "}, {"sha": "bf897bf75b4e7f4aa4dc26b7632cdcde8325b40e", "filename": "gcc/rtl.c", "status": "modified", "additions": 45, "deletions": 21, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b", "patch": "@@ -148,10 +148,10 @@ const char * const reg_note_name[REG_NOTE_MAX] =\n #undef DEF_REG_NOTE\n };\n \n-static int rtx_alloc_counts[(int) LAST_AND_UNUSED_RTX_CODE];\n-static int rtx_alloc_sizes[(int) LAST_AND_UNUSED_RTX_CODE];\n-static int rtvec_alloc_counts;\n-static int rtvec_alloc_sizes;\n+static size_t rtx_alloc_counts[(int) LAST_AND_UNUSED_RTX_CODE];\n+static size_t rtx_alloc_sizes[(int) LAST_AND_UNUSED_RTX_CODE];\n+static size_t rtvec_alloc_counts;\n+static size_t rtvec_alloc_sizes;\n \n \f\n /* Allocate an rtx vector of N elements.\n@@ -785,10 +785,20 @@ classify_insn (rtx x)\n   return INSN;\n }\n \n+/* Comparator of indices based on rtx_alloc_counts.  */\n+\n+static int\n+rtx_count_cmp (const void *p1, const void *p2)\n+{\n+  const unsigned *n1 = (const unsigned *)p1;\n+  const unsigned *n2 = (const unsigned *)p2;\n+\n+  return rtx_alloc_counts[*n1] - rtx_alloc_counts[*n2];\n+}\n+\n void\n dump_rtx_statistics (void)\n {\n-  int i;\n   int total_counts = 0;\n   int total_sizes = 0;\n \n@@ -798,27 +808,41 @@ dump_rtx_statistics (void)\n       return;\n     }\n \n-  fprintf (stderr, \"\\nRTX Kind               Count      Bytes\\n\");\n-  fprintf (stderr, \"---------------------------------------\\n\");\n-  for (i = 0; i < LAST_AND_UNUSED_RTX_CODE; i++)\n-    if (rtx_alloc_counts[i])\n-      {\n-        fprintf (stderr, \"%-20s %7d %10d\\n\", GET_RTX_NAME (i),\n-                 rtx_alloc_counts[i], rtx_alloc_sizes[i]);\n-        total_counts += rtx_alloc_counts[i];\n-        total_sizes += rtx_alloc_sizes[i];\n-      }\n+  fprintf (stderr, \"\\nRTX Kind                   Count     Bytes\\n\");\n+  fprintf (stderr, \"-------------------------------------------\\n\");\n+\n+  auto_vec<unsigned> indices (LAST_AND_UNUSED_RTX_CODE);\n+  for (unsigned i = 0; i < LAST_AND_UNUSED_RTX_CODE; i++)\n+    indices.quick_push (i);\n+  indices.qsort (rtx_count_cmp);\n+\n+  for (unsigned i = 0; i < LAST_AND_UNUSED_RTX_CODE; i++)\n+    {\n+      unsigned j = indices[i];\n+      if (rtx_alloc_counts[j])\n+\t{\n+\t  fprintf (stderr, \"%-24s %6zu%c %9zu%c\\n\",\n+\t\t   GET_RTX_NAME (j),\n+\t\t   SIZE_AMOUNT (rtx_alloc_counts[j]),\n+\t\t   SIZE_AMOUNT (rtx_alloc_sizes[j]));\n+\t  total_counts += rtx_alloc_counts[j];\n+\t  total_sizes += rtx_alloc_sizes[j];\n+\t}\n+    }\n+\n   if (rtvec_alloc_counts)\n     {\n-      fprintf (stderr, \"%-20s %7d %10d\\n\", \"rtvec\",\n-               rtvec_alloc_counts, rtvec_alloc_sizes);\n+      fprintf (stderr, \"%-24s %6zu%c %9zu%c\\n\", \"rtvec\",\n+\t       SIZE_AMOUNT (rtvec_alloc_counts),\n+\t       SIZE_AMOUNT (rtvec_alloc_sizes));\n       total_counts += rtvec_alloc_counts;\n       total_sizes += rtvec_alloc_sizes;\n     }\n-  fprintf (stderr, \"---------------------------------------\\n\");\n-  fprintf (stderr, \"%-20s %7d %10d\\n\",\n-           \"Total\", total_counts, total_sizes);\n-  fprintf (stderr, \"---------------------------------------\\n\");\n+  fprintf (stderr, \"-----------------------------------------------\\n\");\n+  fprintf (stderr, \"%-24s %6d%c %9d%c\\n\",\n+\t   \"Total\", SIZE_AMOUNT (total_counts),\n+\t   SIZE_AMOUNT (total_sizes));\n+  fprintf (stderr, \"-----------------------------------------------\\n\");\n }\n \f\n #if defined ENABLE_RTL_CHECKING && (GCC_VERSION >= 2007)"}, {"sha": "ba328213a693b85c576e433568a2b119802acceb", "filename": "gcc/system.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b", "patch": "@@ -1208,4 +1208,29 @@ void gcc_stablesort (void *, size_t, size_t,\n #undef qsort\n #define qsort(...) PP_5th (__VA_ARGS__, gcc_qsort, 3, 2, qsort, 0) (__VA_ARGS__)\n \n+#define ONE_K 1024\n+#define ONE_M (ONE_K * ONE_K)\n+\n+/* Display a number as an integer multiple of either:\n+   - 1024, if said integer is >= to 10 K (in base 2)\n+   - 1024 * 1024, if said integer is >= 10 M in (base 2)\n+ */\n+#define SIZE_SCALE(x) (((x) < 10 * ONE_K \\\n+\t\t\t? (x) \\\n+\t\t\t: ((x) < 10 * ONE_M \\\n+\t\t\t   ? (x) / ONE_K \\\n+\t\t\t   : (x) / ONE_M)))\n+\n+/* For a given integer, display either:\n+   - the character 'k', if the number is higher than 10 K (in base 2)\n+     but strictly lower than 10 M (in base 2)\n+   - the character 'M' if the number is higher than 10 M (in base2)\n+   - the charcter ' ' if the number is strictly lower  than 10 K  */\n+#define SIZE_LABEL(x) ((x) < 10 * ONE_K ? ' ' : ((x) < 10 * ONE_M ? 'k' : 'M'))\n+\n+/* Display an integer amount as multiple of 1K or 1M (in base 2).\n+   Display the correct unit (either k, M, or ' ') after the amount, as\n+   well.  */\n+#define SIZE_AMOUNT(size) SIZE_SCALE (size), SIZE_LABEL (size)\n+\n #endif /* ! GCC_SYSTEM_H */"}, {"sha": "938f4e28b90a3dc5686401daee203133500daf00", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b", "patch": "@@ -4859,7 +4859,7 @@ tm_mangle (tree old_asm_id)\n \n   if (dc == NULL)\n     {\n-      char length[8];\n+      char length[12];\n \n     do_unencoded:\n       sprintf (length, \"%u\", IDENTIFIER_LENGTH (old_asm_id));"}, {"sha": "8db10898915e02054e34726f98ef4408bbea402b", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b", "patch": "@@ -2584,18 +2584,18 @@ dump_cfg_stats (FILE *file)\n   size = n_basic_blocks_for_fn (cfun) * sizeof (struct basic_block_def);\n   total += size;\n   fprintf (file, fmt_str_1, \"Basic blocks\", n_basic_blocks_for_fn (cfun),\n-\t   SCALE (size), LABEL (size));\n+\t   SIZE_AMOUNT (size));\n \n   num_edges = 0;\n   FOR_EACH_BB_FN (bb, cfun)\n     num_edges += EDGE_COUNT (bb->succs);\n   size = num_edges * sizeof (struct edge_def);\n   total += size;\n-  fprintf (file, fmt_str_2, \"Edges\", num_edges, SCALE (size), LABEL (size));\n+  fprintf (file, fmt_str_2, \"Edges\", num_edges, SIZE_AMOUNT (size));\n \n   fprintf (file, \"---------------------------------------------------------\\n\");\n-  fprintf (file, fmt_str_3, \"Total memory used by CFG data\", SCALE (total),\n-\t   LABEL (total));\n+  fprintf (file, fmt_str_3, \"Total memory used by CFG data\",\n+\t   SIZE_AMOUNT (total));\n   fprintf (file, \"---------------------------------------------------------\\n\");\n   fprintf (file, \"\\n\");\n "}, {"sha": "ad49c878f646ca65cb9a5baf4404f5c87220ef44", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b", "patch": "@@ -201,36 +201,36 @@ dump_dfa_stats (FILE *file)\n   size = dfa_stats.num_uses * sizeof (tree *);\n   total += size;\n   fprintf (file, fmt_str_1, \"USE operands\", dfa_stats.num_uses,\n-\t   SCALE (size), LABEL (size));\n+\t   SIZE_AMOUNT (size));\n \n   size = dfa_stats.num_defs * sizeof (tree *);\n   total += size;\n   fprintf (file, fmt_str_1, \"DEF operands\", dfa_stats.num_defs,\n-\t   SCALE (size), LABEL (size));\n+\t   SIZE_AMOUNT (size));\n \n   size = dfa_stats.num_vuses * sizeof (tree *);\n   total += size;\n   fprintf (file, fmt_str_1, \"VUSE operands\", dfa_stats.num_vuses,\n-\t   SCALE (size), LABEL (size));\n+\t   SIZE_AMOUNT (size));\n \n   size = dfa_stats.num_vdefs * sizeof (tree *);\n   total += size;\n   fprintf (file, fmt_str_1, \"VDEF operands\", dfa_stats.num_vdefs,\n-\t   SCALE (size), LABEL (size));\n+\t   SIZE_AMOUNT (size));\n \n   size = dfa_stats.num_phis * sizeof (struct gphi);\n   total += size;\n   fprintf (file, fmt_str_1, \"PHI nodes\", dfa_stats.num_phis,\n-\t   SCALE (size), LABEL (size));\n+\t   SIZE_AMOUNT (size));\n \n   size = dfa_stats.num_phi_args * sizeof (struct phi_arg_d);\n   total += size;\n   fprintf (file, fmt_str_1, \"PHI arguments\", dfa_stats.num_phi_args,\n- \t   SCALE (size), LABEL (size));\n+\t   SIZE_AMOUNT (size));\n \n   fprintf (file, \"---------------------------------------------------------\\n\");\n-  fprintf (file, fmt_str_3, \"Total memory used by DFA/SSA data\", SCALE (total),\n-\t   LABEL (total));\n+  fprintf (file, fmt_str_3, \"Total memory used by DFA/SSA data\",\n+\t   SIZE_AMOUNT (total));\n   fprintf (file, \"---------------------------------------------------------\\n\");\n   fprintf (file, \"\\n\");\n "}, {"sha": "48397a1a4416cf20e7105cb21e0bd0f77c143da1", "filename": "gcc/tree-phinodes.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Ftree-phinodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Ftree-phinodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-phinodes.c?ref=40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b", "patch": "@@ -80,8 +80,9 @@ unsigned int phi_nodes_created;\n void\n phinodes_print_statistics (void)\n {\n-  fprintf (stderr, \"PHI nodes allocated: %u\\n\", phi_nodes_created);\n-  fprintf (stderr, \"PHI nodes reused: %u\\n\", phi_nodes_reused);\n+  fprintf (stderr, \"PHI nodes allocated: %u%c\\n\",\n+\t   SIZE_AMOUNT (phi_nodes_created));\n+  fprintf (stderr, \"PHI nodes reused: %u%c\\n\", SIZE_AMOUNT (phi_nodes_reused));\n }\n \n /* Allocate a PHI node with at least LEN arguments.  If the free list"}, {"sha": "ff906e831e5746f839a6c325b82d2eabdda87f58", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b", "patch": "@@ -112,8 +112,10 @@ fini_ssanames (struct function *fn)\n void\n ssanames_print_statistics (void)\n {\n-  fprintf (stderr, \"SSA_NAME nodes allocated: %u\\n\", ssa_name_nodes_created);\n-  fprintf (stderr, \"SSA_NAME nodes reused: %u\\n\", ssa_name_nodes_reused);\n+  fprintf (stderr, \"SSA_NAME nodes allocated: %u%c\\n\",\n+\t   SIZE_AMOUNT (ssa_name_nodes_created));\n+  fprintf (stderr, \"SSA_NAME nodes reused: %u%c\\n\",\n+\t   SIZE_AMOUNT (ssa_name_nodes_reused));\n }\n \n /* Verify the state of the SSA_NAME lists."}, {"sha": "f3e977f5c09f05d2eee727037ae417fca895ca25", "filename": "gcc/tree.c", "status": "modified", "additions": 67, "deletions": 24, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b", "patch": "@@ -9226,6 +9226,28 @@ get_call_combined_fn (const_tree call)\n   return CFN_LAST;\n }\n \n+/* Comparator of indices based on tree_node_counts.  */\n+\n+static int\n+tree_nodes_cmp (const void *p1, const void *p2)\n+{\n+  const unsigned *n1 = (const unsigned *)p1;\n+  const unsigned *n2 = (const unsigned *)p2;\n+\n+  return tree_node_counts[*n1] - tree_node_counts[*n2];\n+}\n+\n+/* Comparator of indices based on tree_code_counts.  */\n+\n+static int\n+tree_codes_cmp (const void *p1, const void *p2)\n+{\n+  const unsigned *n1 = (const unsigned *)p1;\n+  const unsigned *n2 = (const unsigned *)p2;\n+\n+  return tree_code_counts[*n1] - tree_code_counts[*n2];\n+}\n+\n #define TREE_MEM_USAGE_SPACES 40\n \n /* Print debugging information about tree nodes generated during the compile,\n@@ -9236,34 +9258,55 @@ dump_tree_statistics (void)\n {\n   if (GATHER_STATISTICS)\n     {\n-      int i;\n       uint64_t total_nodes, total_bytes;\n       fprintf (stderr, \"\\nKind                   Nodes      Bytes\\n\");\n       mem_usage::print_dash_line (TREE_MEM_USAGE_SPACES);\n       total_nodes = total_bytes = 0;\n-      for (i = 0; i < (int) all_kinds; i++)\n-\t{\n-\t  fprintf (stderr, \"%-20s %7\" PRIu64 \" %10\" PRIu64 \"\\n\",\n-\t\t   tree_node_kind_names[i], tree_node_counts[i],\n-\t\t   tree_node_sizes[i]);\n-\t  total_nodes += tree_node_counts[i];\n-\t  total_bytes += tree_node_sizes[i];\n-\t}\n-      mem_usage::print_dash_line (TREE_MEM_USAGE_SPACES);\n-      fprintf (stderr, \"%-20s %7\" PRIu64 \" %10\" PRIu64 \"\\n\", \"Total\",\n-\t       total_nodes, total_bytes);\n-      mem_usage::print_dash_line (TREE_MEM_USAGE_SPACES);\n-      fprintf (stderr, \"Code                   Nodes\\n\");\n-      mem_usage::print_dash_line (TREE_MEM_USAGE_SPACES);\n-      for (i = 0; i < (int) MAX_TREE_CODES; i++)\n-\tfprintf (stderr, \"%-32s %7\" PRIu64 \"\\n\",\n-\t\t get_tree_code_name ((enum tree_code) i), tree_code_counts[i]);\n-      mem_usage::print_dash_line (TREE_MEM_USAGE_SPACES);\n-      fprintf (stderr, \"\\n\");\n-      ssanames_print_statistics ();\n-      fprintf (stderr, \"\\n\");\n-      phinodes_print_statistics ();\n-      fprintf (stderr, \"\\n\");\n+\n+      {\n+\tauto_vec<unsigned> indices (all_kinds);\n+\tfor (unsigned i = 0; i < all_kinds; i++)\n+\t  indices.quick_push (i);\n+\tindices.qsort (tree_nodes_cmp);\n+\n+\tfor (unsigned i = 0; i < (int) all_kinds; i++)\n+\t  {\n+\t    unsigned j = indices[i];\n+\t    fprintf (stderr, \"%-20s %6\" PRIu64 \"%c %9\" PRIu64 \"%c\\n\",\n+\t\t     tree_node_kind_names[i], SIZE_AMOUNT (tree_node_counts[j]),\n+\t\t     SIZE_AMOUNT (tree_node_sizes[j]));\n+\t    total_nodes += tree_node_counts[j];\n+\t    total_bytes += tree_node_sizes[j];\n+\t  }\n+\tmem_usage::print_dash_line (TREE_MEM_USAGE_SPACES);\n+\tfprintf (stderr, \"%-20s %6\" PRIu64 \"%c %9\" PRIu64 \"%c\\n\", \"Total\",\n+\t\t SIZE_AMOUNT (total_nodes), SIZE_AMOUNT (total_bytes));\n+\tmem_usage::print_dash_line (TREE_MEM_USAGE_SPACES);\n+      }\n+\n+      {\n+\tfprintf (stderr, \"Code                              Nodes\\n\");\n+\tmem_usage::print_dash_line (TREE_MEM_USAGE_SPACES);\n+\n+\tauto_vec<unsigned> indices (MAX_TREE_CODES);\n+\tfor (unsigned i = 0; i < MAX_TREE_CODES; i++)\n+\t  indices.quick_push (i);\n+\tindices.qsort (tree_codes_cmp);\n+\n+\tfor (unsigned i = 0; i < MAX_TREE_CODES; i++)\n+\t  {\n+\t    unsigned j = indices[i];\n+\t    fprintf (stderr, \"%-32s %6\" PRIu64 \"%c\\n\",\n+\t\t     get_tree_code_name ((enum tree_code) j),\n+\t\t     SIZE_AMOUNT (tree_code_counts[j]));\n+\t  }\n+\tmem_usage::print_dash_line (TREE_MEM_USAGE_SPACES);\n+\tfprintf (stderr, \"\\n\");\n+\tssanames_print_statistics ();\n+\tfprintf (stderr, \"\\n\");\n+\tphinodes_print_statistics ();\n+\tfprintf (stderr, \"\\n\");\n+      }\n     }\n   else\n     fprintf (stderr, \"(No per-node statistics)\\n\");"}, {"sha": "bd49d0358c5c5002500017e639f35242e21ad26a", "filename": "gcc/vec.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Fvec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b/gcc%2Fvec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.c?ref=40ce7fa6dd38f8ac26d576c84f5dbe4362aa902b", "patch": "@@ -82,20 +82,26 @@ struct vec_usage: public mem_usage\n \n     s[48] = '\\0';\n \n-    fprintf (stderr, \"%-48s %10li%11li:%4.1f%%%10li%10li:%4.1f%%%11li%11li\\n\", s,\n-\t     (long)m_element_size,\n-\t     (long)m_allocated, m_allocated * 100.0 / total.m_allocated,\n-\t     (long)m_peak, (long)m_times, m_times * 100.0 / total.m_times,\n-\t     (long)m_items, (long)m_items_peak);\n+    fprintf (stderr,\n+\t     \"%-48s %10zu%10zu%c:%4.1f%%%9zu%c%10zu\"\n+\t     \":%4.1f%%%10zu%c%10zu%c\\n\",\n+\t     s,\n+\t     m_element_size,\n+\t     SIZE_AMOUNT (m_allocated),\n+\t     m_allocated * 100.0 / total.m_allocated,\n+\t     SIZE_AMOUNT (m_peak), m_times,\n+\t     m_times * 100.0 / total.m_times,\n+\t     SIZE_AMOUNT (m_items), SIZE_AMOUNT (m_items_peak));\n   }\n \n   /* Dump footer.  */\n   inline void\n   dump_footer ()\n   {\n     print_dash_line ();\n-    fprintf (stderr, \"%s%55li%25li%17li\\n\", \"Total\", (long)m_allocated,\n-\t     (long)m_times, (long)m_items);\n+    fprintf (stderr, \"%s%64zu%c%25zu%c%16zu%c\\n\",\n+\t     \"Total\", SIZE_AMOUNT (m_allocated),\n+\t     SIZE_AMOUNT (m_times), SIZE_AMOUNT (m_items));\n     print_dash_line ();\n   }\n "}]}