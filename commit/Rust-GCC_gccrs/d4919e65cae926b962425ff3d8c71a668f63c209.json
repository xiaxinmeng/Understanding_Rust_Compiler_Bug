{"sha": "d4919e65cae926b962425ff3d8c71a668f63c209", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ5MTllNjVjYWU5MjZiOTYyNDI1ZmYzZDhjNzFhNjY4ZjYzYzIwOQ==", "commit": {"author": {"name": "Pat Haugen", "email": "pthaugen@us.ibm.com", "date": "2016-10-14T17:10:18Z"}, "committer": {"name": "Pat Haugen", "email": "pthaugen@gcc.gnu.org", "date": "2016-10-14T17:10:18Z"}, "message": "re PR rtl-optimization/68212 (Loop unroller breaks basic block frequencies)\n\n\tPR rtl-optimization/68212\n\t* cfgloopmanip.c (duplicate_loop_to_header_edge): Use preheader edge\n\tfrequency when computing scale factor for peeled copies.\n\t* loop-unroll.c (unroll_loop_runtime_iterations): Fix freq/count\n\tvalues for switch/peel blocks/edges.\n\nFrom-SVN: r241170", "tree": {"sha": "01bb186ac1edba171f8b6bac72910c624b865727", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01bb186ac1edba171f8b6bac72910c624b865727"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4919e65cae926b962425ff3d8c71a668f63c209", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4919e65cae926b962425ff3d8c71a668f63c209", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4919e65cae926b962425ff3d8c71a668f63c209", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4919e65cae926b962425ff3d8c71a668f63c209/comments", "author": null, "committer": null, "parents": [{"sha": "a4744f620f32b6b859a39c6876f5e21b52b1af4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4744f620f32b6b859a39c6876f5e21b52b1af4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4744f620f32b6b859a39c6876f5e21b52b1af4b"}], "stats": {"total": 47, "additions": 43, "deletions": 4}, "files": [{"sha": "c555f22f0e4e120d87024f5a7ea3c8521818c089", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4919e65cae926b962425ff3d8c71a668f63c209/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4919e65cae926b962425ff3d8c71a668f63c209/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4919e65cae926b962425ff3d8c71a668f63c209", "patch": "@@ -1,3 +1,11 @@\n+2016-10-14  Pat Haugen  <pthaugen@us.ibm.com>\n+\n+\tPR rtl-optimization/68212\n+\t* cfgloopmanip.c (duplicate_loop_to_header_edge): Use preheader edge\n+\tfrequency when computing scale factor for peeled copies.\n+\t* loop-unroll.c (unroll_loop_runtime_iterations): Fix freq/count\n+\tvalues for switch/peel blocks/edges.\n+\n 2016-10-14  Pedro Alves  <palves@redhat.com>\n \n \t* coretypes.h (OVERRIDE, FINAL): Delete, moved to"}, {"sha": "eb868393fac8940d06f0d73d3f265b7f8d451957", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4919e65cae926b962425ff3d8c71a668f63c209/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4919e65cae926b962425ff3d8c71a668f63c209/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=d4919e65cae926b962425ff3d8c71a668f63c209", "patch": "@@ -1276,10 +1276,13 @@ duplicate_loop_to_header_edge (struct loop *loop, edge e,\n \t}\n       else\n \t{\n+\t  int preheader_freq = EDGE_FREQUENCY (e);\n \t  scale_main = REG_BR_PROB_BASE;\n \t  for (i = 0; i < ndupl; i++)\n \t    scale_main = combine_probabilities (scale_main, scale_step[i]);\n-\t  scale_act = REG_BR_PROB_BASE - prob_pass_thru;\n+\t  if (preheader_freq > freq_in)\n+\t    preheader_freq = freq_in;\n+\t  scale_act = GCOV_COMPUTE_SCALE (preheader_freq, freq_in);\n \t}\n       for (i = 0; i < ndupl; i++)\n \tgcc_assert (scale_step[i] >= 0 && scale_step[i] <= REG_BR_PROB_BASE);"}, {"sha": "f412698f17002d5fa2ce4a399defc05d903b43e6", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4919e65cae926b962425ff3d8c71a668f63c209/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4919e65cae926b962425ff3d8c71a668f63c209/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=d4919e65cae926b962425ff3d8c71a668f63c209", "patch": "@@ -859,7 +859,8 @@ unroll_loop_runtime_iterations (struct loop *loop)\n   rtx_insn *init_code, *branch_code;\n   unsigned i, j, p;\n   basic_block preheader, *body, swtch, ezc_swtch;\n-  int may_exit_copy;\n+  int may_exit_copy, iter_freq, new_freq;\n+  gcov_type iter_count, new_count;\n   unsigned n_peel;\n   edge e;\n   bool extra_zero_check, last_may_exit;\n@@ -953,6 +954,15 @@ unroll_loop_runtime_iterations (struct loop *loop)\n   /* Record the place where switch will be built for preconditioning.  */\n   swtch = split_edge (loop_preheader_edge (loop));\n \n+  /* Compute frequency/count increments for each switch block and initialize\n+     innermost switch block.  Switch blocks and peeled loop copies are built\n+     from innermost outward.  */\n+  iter_freq = new_freq = swtch->frequency / (max_unroll + 1);\n+  iter_count = new_count = swtch->count / (max_unroll + 1);\n+  swtch->frequency = new_freq;\n+  swtch->count = new_count;\n+  single_succ_edge (swtch)->count = new_count;\n+\n   for (i = 0; i < n_peel; i++)\n     {\n       /* Peel the copy.  */\n@@ -970,6 +980,10 @@ unroll_loop_runtime_iterations (struct loop *loop)\n       p = REG_BR_PROB_BASE / (i + 2);\n \n       preheader = split_edge (loop_preheader_edge (loop));\n+      /* Add in frequency/count of edge from switch block.  */\n+      preheader->frequency += iter_freq;\n+      preheader->count += iter_count;\n+      single_succ_edge (preheader)->count = preheader->count;\n       branch_code = compare_and_jump_seq (copy_rtx (niter), GEN_INT (j), EQ,\n \t\t\t\t\t  block_label (preheader), p,\n \t\t\t\t\t  NULL);\n@@ -981,9 +995,14 @@ unroll_loop_runtime_iterations (struct loop *loop)\n       swtch = split_edge_and_insert (single_pred_edge (swtch), branch_code);\n       set_immediate_dominator (CDI_DOMINATORS, preheader, swtch);\n       single_succ_edge (swtch)->probability = REG_BR_PROB_BASE - p;\n+      single_succ_edge (swtch)->count = new_count;\n+      new_freq += iter_freq;\n+      new_count += iter_count;\n+      swtch->frequency = new_freq;\n+      swtch->count = new_count;\n       e = make_edge (swtch, preheader,\n \t\t     single_succ_edge (swtch)->flags & EDGE_IRREDUCIBLE_LOOP);\n-      e->count = RDIV (preheader->count * REG_BR_PROB_BASE, p);\n+      e->count = iter_count;\n       e->probability = p;\n     }\n \n@@ -993,6 +1012,14 @@ unroll_loop_runtime_iterations (struct loop *loop)\n       p = REG_BR_PROB_BASE / (max_unroll + 1);\n       swtch = ezc_swtch;\n       preheader = split_edge (loop_preheader_edge (loop));\n+      /* Recompute frequency/count adjustments since initial peel copy may\n+\t have exited and reduced those values that were computed above.  */\n+      iter_freq = swtch->frequency / (max_unroll + 1);\n+      iter_count = swtch->count / (max_unroll + 1);\n+      /* Add in frequency/count of edge from switch block.  */\n+      preheader->frequency += iter_freq;\n+      preheader->count += iter_count;\n+      single_succ_edge (preheader)->count = preheader->count;\n       branch_code = compare_and_jump_seq (copy_rtx (niter), const0_rtx, EQ,\n \t\t\t\t\t  block_label (preheader), p,\n \t\t\t\t\t  NULL);\n@@ -1001,9 +1028,10 @@ unroll_loop_runtime_iterations (struct loop *loop)\n       swtch = split_edge_and_insert (single_succ_edge (swtch), branch_code);\n       set_immediate_dominator (CDI_DOMINATORS, preheader, swtch);\n       single_succ_edge (swtch)->probability = REG_BR_PROB_BASE - p;\n+      single_succ_edge (swtch)->count -= iter_count;\n       e = make_edge (swtch, preheader,\n \t\t     single_succ_edge (swtch)->flags & EDGE_IRREDUCIBLE_LOOP);\n-      e->count = RDIV (preheader->count * REG_BR_PROB_BASE, p);\n+      e->count = iter_count;\n       e->probability = p;\n     }\n "}]}