{"sha": "3968de80f82b32336d76808d57ac4148ee191347", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk2OGRlODBmODJiMzIzMzZkNzY4MDhkNTdhYzQxNDhlZTE5MTM0Nw==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2002-02-01T21:54:39Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2002-02-01T21:54:39Z"}, "message": "sparc.c (sparc_emit_set_symbolic_const64): If we are given conflicting registers...\n\n* config/sparc/sparc.c (sparc_emit_set_symbolic_const64): If\nwe are given conflicting registers, switch to the other one we\nhad allocated for us.\n* config/sparc/sparc.md (reload_indi, reload_outdi): Pass op[2]\nas TImode so we know when the \"other\" register is available.\n\nFrom-SVN: r49412", "tree": {"sha": "b916701b11cbd40fd8ad795ecb243d7863b200a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b916701b11cbd40fd8ad795ecb243d7863b200a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3968de80f82b32336d76808d57ac4148ee191347", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3968de80f82b32336d76808d57ac4148ee191347", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3968de80f82b32336d76808d57ac4148ee191347", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3968de80f82b32336d76808d57ac4148ee191347/comments", "author": null, "committer": null, "parents": [{"sha": "1c24f830c560d26856c72416d01bcd41e7118a7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c24f830c560d26856c72416d01bcd41e7118a7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c24f830c560d26856c72416d01bcd41e7118a7a"}], "stats": {"total": 52, "additions": 37, "deletions": 15}, "files": [{"sha": "bdb406a7bbaabbae4f80c3feeead20fd275f0736", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3968de80f82b32336d76808d57ac4148ee191347/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3968de80f82b32336d76808d57ac4148ee191347/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3968de80f82b32336d76808d57ac4148ee191347", "patch": "@@ -1,3 +1,11 @@\n+2002-02-01  DJ Delorie  <dj@redhat.com>\n+\n+\t* config/sparc/sparc.c (sparc_emit_set_symbolic_const64): If\n+\twe are given conflicting registers, switch to the other one we\n+\thad allocated for us.\n+\t* config/sparc/sparc.md (reload_indi, reload_outdi): Pass op[2]\n+\tas TImode so we know when the \"other\" register is available.\n+\n 2002-02-01  David O'Brien  <obrien@FreeBSD.org>\n \n \t* config/sparc/sol2-sld-64.h: Include sparc/biarch64.h rather than"}, {"sha": "c5b64a7b71dc14c2cfcbacd9de43ec2c4c131cad", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3968de80f82b32336d76808d57ac4148ee191347/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3968de80f82b32336d76808d57ac4148ee191347/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=3968de80f82b32336d76808d57ac4148ee191347", "patch": "@@ -1366,6 +1366,14 @@ sparc_emit_set_symbolic_const64 (op0, op1, temp1)\n      rtx op1;\n      rtx temp1;\n {\n+  rtx ti_temp1 = 0;\n+\n+  if (temp1 && GET_MODE (temp1) == TImode)\n+    {\n+      ti_temp1 = temp1;\n+      temp1 = gen_rtx_REG (DImode, REGNO (temp1));\n+    }\n+\n   switch (sparc_cmodel)\n     {\n     case CM_MEDLOW:\n@@ -1419,12 +1427,16 @@ sparc_emit_set_symbolic_const64 (op0, op1, temp1)\n \t sllx\t%temp3, 32, %temp5\n \t or\t%temp4, %temp5, %reg  */\n \n-      /* Getting this right wrt. reloading is really tricky.\n-\t We _MUST_ have a separate temporary at this point,\n-\t if we don't barf immediately instead of generating\n-\t incorrect code.  */\n+      /* It is possible that one of the registers we got for operands[2]\n+\t might coincide with that of operands[0] (which is why we made\n+\t it TImode).  Pick the other one to use as our scratch.  */\n       if (rtx_equal_p (temp1, op0))\n-\tabort ();\n+\t{\n+\t  if (ti_temp1)\n+\t    temp1 = gen_rtx_REG (DImode, REGNO (temp1) + 1);\n+\t  else\n+\t    abort();\n+\t}\n \n       emit_insn (gen_sethh (op0, op1));\n       emit_insn (gen_setlm (temp1, op1));\n@@ -1462,12 +1474,16 @@ sparc_emit_set_symbolic_const64 (op0, op1, temp1)\n \t}\n       else\n \t{\n-\t  /* Getting this right wrt. reloading is really tricky.\n-\t     We _MUST_ have a separate temporary at this point,\n-\t     so we barf immediately instead of generating\n-\t     incorrect code.  */\n-\t  if (temp1 == op0)\n-\t    abort ();\n+\t  /* It is possible that one of the registers we got for operands[2]\n+\t     might coincide with that of operands[0] (which is why we made\n+\t     it TImode).  Pick the other one to use as our scratch.  */\n+\t  if (rtx_equal_p (temp1, op0))\n+\t    {\n+\t      if (ti_temp1)\n+\t\ttemp1 = gen_rtx_REG (DImode, REGNO (temp1) + 1);\n+\t      else\n+\t\tabort();\n+\t    }\n \n \t  emit_insn (gen_embmedany_textuhi (op0, op1));\n \t  emit_insn (gen_embmedany_texthi  (temp1, op1));"}, {"sha": "19697574a30e96fa7a8e8068822f517ad1ad93dc", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3968de80f82b32336d76808d57ac4148ee191347/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3968de80f82b32336d76808d57ac4148ee191347/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=3968de80f82b32336d76808d57ac4148ee191347", "patch": "@@ -2734,8 +2734,7 @@\n    && ! flag_pic\"\n   \"\n {\n-  sparc_emit_set_symbolic_const64 (operands[0], operands[1],\n-                                   gen_rtx_REG (DImode, REGNO (operands[2])));\n+  sparc_emit_set_symbolic_const64 (operands[0], operands[1], operands[2]);\n   DONE;\n }\")\n \n@@ -2748,8 +2747,7 @@\n    && ! flag_pic\"\n   \"\n {\n-  sparc_emit_set_symbolic_const64 (operands[0], operands[1],\n-                                   gen_rtx_REG (DImode, REGNO (operands[2])));\n+  sparc_emit_set_symbolic_const64 (operands[0], operands[1], operands[2]);\n   DONE;\n }\")\n "}]}