{"sha": "fa55525216546e41650f27058aecb62a2456613a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE1NTUyNTIxNjU0NmU0MTY1MGYyNzA1OGFlY2I2MmEyNDU2NjEzYQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-03-01T17:59:06Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-03-01T17:59:06Z"}, "message": "Makefile.in (tree-ssa-sink.o): New.\n\n2005-03-01  Daniel Berlin <dberlin@dberlin.org>\n\n\t* Makefile.in (tree-ssa-sink.o): New.\n\t(OBJS-common): Add tree-ssa-sink.o.\n\t* common.opt: Add -ftree-sink\n\t* opts.c (decode_options): flag_tree_sink is set at O1 or higher.\n\t* timevar.def (TV_TREE_SINK): new timevar.\n\t* tree-flow.h (is_hidden_global_store): Prototype.\n\t* tree-optimize.c (init_tree_optimization_passes): Add\n\tpass_sink_code.\n\t* tree-pass.h (pass_sink_code): New.\n\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Move checking\n\tfor non-obvious global store store to is_hidden_global_store, and\n\tcall that new function.\n\t* tree-ssa-sink.c: New file.\n\t* doc/invoke.texi: Document -fdump-tree-sink and -ftree-sink.\n\t* doc/passes.texi: Document forward store motion.\n\t* testsuite/gcc.dg/tree-ssa/ssa-sink-1.c: New test\n\t* testsuite/gcc.dg/tree-ssa/ssa-sink-2.c: New test\n\t* testsuite/gcc.dg/tree-ssa/ssa-sink-3.c: New test\n\t* testsuite/gcc.dg/tree-ssa/ssa-sink-4.c: New test\n\nFrom-SVN: r95750", "tree": {"sha": "126cecfe4e30597e3e21ba835c4893c2e3f19195", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/126cecfe4e30597e3e21ba835c4893c2e3f19195"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa55525216546e41650f27058aecb62a2456613a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa55525216546e41650f27058aecb62a2456613a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa55525216546e41650f27058aecb62a2456613a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa55525216546e41650f27058aecb62a2456613a/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7cea62b4f5bef517d8d5aab0a2afdba000810693", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cea62b4f5bef517d8d5aab0a2afdba000810693", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cea62b4f5bef517d8d5aab0a2afdba000810693"}], "stats": {"total": 189, "additions": 114, "deletions": 75}, "files": [{"sha": "03f63c8e90befd244a4c41daf427565b51a1a5ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa55525216546e41650f27058aecb62a2456613a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa55525216546e41650f27058aecb62a2456613a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa55525216546e41650f27058aecb62a2456613a", "patch": "@@ -1,3 +1,25 @@\n+2005-03-01  Daniel Berlin <dberlin@dberlin.org>\n+\n+\t* Makefile.in (tree-ssa-sink.o): New.\n+\t(OBJS-common): Add tree-ssa-sink.o.\n+\t* common.opt: Add -ftree-sink\n+\t* opts.c (decode_options): flag_tree_sink is set at O1 or higher.\n+\t* timevar.def (TV_TREE_SINK): new timevar.\n+\t* tree-flow.h (is_hidden_global_store): Prototype.\n+\t* tree-optimize.c (init_tree_optimization_passes): Add\n+\tpass_sink_code.\n+\t* tree-pass.h (pass_sink_code): New.\n+\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Move checking\n+\tfor non-obvious global store store to is_hidden_global_store, and\n+\tcall that new function.\n+\t* tree-ssa-sink.c: New file.\n+\t* doc/invoke.texi: Document -fdump-tree-sink and -ftree-sink.\n+\t* doc/passes.texi: Document forward store motion.\n+\t* testsuite/gcc.dg/tree-ssa/ssa-sink-1.c: New test\n+\t* testsuite/gcc.dg/tree-ssa/ssa-sink-2.c: New test\n+\t* testsuite/gcc.dg/tree-ssa/ssa-sink-3.c: New test\n+\t* testsuite/gcc.dg/tree-ssa/ssa-sink-4.c: New test\n+\n 2005-03-01  Per Bothner  <per@bothner.com>\n \n \t* diagnostic.c (diagnostic_build_prefix): If USE_MAPPED_LOCATION"}, {"sha": "2083750b4efc7fed8955916bb2f389bc586060e8", "filename": "gcc/Makefile.in", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa55525216546e41650f27058aecb62a2456613a/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa55525216546e41650f27058aecb62a2456613a/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=fa55525216546e41650f27058aecb62a2456613a", "patch": "@@ -935,7 +935,7 @@ OBJS-common = \\\n  varasm.o varray.o vec.o version.o vmsdbgout.o xcoffout.o alloc-pool.o\t   \\\n  et-forest.o cfghooks.o bt-load.o pretty-print.o $(GGC) web.o passes.o\t   \\\n  rtl-profile.o tree-profile.o rtlhooks.o cfgexpand.o lambda-mat.o          \\\n- lambda-trans.o\tlambda-code.o tree-loop-linear.o\n+ lambda-trans.o\tlambda-code.o tree-loop-linear.o tree-ssa-sink.o\n \n OBJS-md = $(out_object_file)\n OBJS-archive = $(EXTRA_OBJS) $(host_hook_obj) tree-inline.o\t\t   \\\n@@ -1673,6 +1673,10 @@ tree-cfg.o : tree-cfg.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n tree-tailcall.o : tree-tailcall.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) function.h $(TM_H) coretypes.h \\\n    $(TREE_DUMP_H) diagnostic.h except.h tree-pass.h $(FLAGS_H) langhooks.h\n+tree-ssa-sink.o : tree-ssa-sink.c $(TREE_FLOW_H) $(CONFIG_H) \\\n+   $(SYSTEM_H) $(TREE_H) $(TM_P_H) $(EXPR_H) \\\n+   $(GGC_H) output.h diagnostic.h errors.h toplev.h $(TIMEVAR_H) \\\n+   $(TM_H) coretypes.h $(TREE_DUMP_H) tree-pass.h $(FLAGS_H)\n tree-nested.o: tree-nested.c $(CONFIG_H) $(SYSTEM_H) $(TM_H) $(TREE_H) \\\n    $(RTL_H) $(TM_P_H) function.h tree-dump.h tree-inline.h tree-iterator.h \\\n    tree-gimple.h $(CGRAPH_H) $(EXPR_H) langhooks.h $(GGC_H) gt-tree-nested.h"}, {"sha": "b10c0e998e5e10bdf0477044c4ed1d8d02a59dc9", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa55525216546e41650f27058aecb62a2456613a/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa55525216546e41650f27058aecb62a2456613a/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=fa55525216546e41650f27058aecb62a2456613a", "patch": "@@ -872,6 +872,10 @@ ftree-pre\n Common Report Var(flag_tree_pre)\n Enable SSA-PRE optimization on trees\n \n+ftree-sink\n+Common Report Var(flag_tree_sink)\n+Enable SSA code sinking on trees\n+\n ftree-sra\n Common Report Var(flag_tree_sra)\n Perform scalar replacement of aggregates"}, {"sha": "891b38445f7517fe49b0ae0cac2030bc50470025", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa55525216546e41650f27058aecb62a2456613a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa55525216546e41650f27058aecb62a2456613a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=fa55525216546e41650f27058aecb62a2456613a", "patch": "@@ -264,6 +264,7 @@ Objective-C and Objective-C++ Dialects}.\n -fdump-tree-forwprop@r{[}-@var{n}@r{]} @gol\n -fdump-tree-copyrename@r{[}-@var{n}@r{]} @gol\n -fdump-tree-nrv -fdump-tree-vect @gol\n+-fdump-tree-sink @gol\n -fdump-tree-sra@r{[}-@var{n}@r{]} @gol\n -fdump-tree-fre@r{[}-@var{n}@r{]} @gol\n -ftree-vectorizer-verbose=@var{n} @gol\n@@ -319,7 +320,7 @@ Objective-C and Objective-C++ Dialects}.\n -fvariable-expansion-in-unroller @gol\n -ftree-pre  -ftree-ccp  -ftree-dce -ftree-loop-optimize @gol\n -ftree-loop-linear -ftree-loop-im -ftree-loop-ivcanon -fivopts @gol\n--ftree-dominator-opts -ftree-dse -ftree-copyrename @gol\n+-ftree-dominator-opts -ftree-dse -ftree-copyrename -ftree-sink @gol\n -ftree-ch -ftree-sra -ftree-ter -ftree-lrs -ftree-fre -ftree-vectorize @gol\n --param @var{name}=@var{value}\n -O  -O0  -O1  -O2  -O3  -Os}\n@@ -3843,6 +3844,11 @@ made by appending @file{.mudflap} to the source file name.\n Dump each function after performing scalar replacement of aggregates.  The\n file name is made by appending @file{.sra} to the source file name.\n \n+@item sink\n+@opindex fdump-tree-sink\n+Dump each function after performing code sinking.  The file name is made\n+by appending @file{.sink} to the source file name. \n+\n @item dom\n @opindex fdump-tree-dom\n Dump each function after applying dominator tree optimizations.  The file\n@@ -4679,6 +4685,10 @@ that are computed on all paths leading to the redundant computation.\n This analysis faster than PRE, though it exposes fewer redundancies.\n This flag is enabled by default at @option{-O} and higher.\n \n+@item -ftree-sink\n+Perform forward store motion  on trees.  This flag is\n+enabled by default at @option{-O} and higher.\n+\n @item -ftree-ccp\n Perform sparse conditional constant propagation (CCP) on trees.  This flag\n is enabled by default at @option{-O} and higher."}, {"sha": "fd4e323d90a73e6fbdd7b52a35f332b990ce1f3e", "filename": "gcc/doc/passes.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa55525216546e41650f27058aecb62a2456613a/gcc%2Fdoc%2Fpasses.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa55525216546e41650f27058aecb62a2456613a/gcc%2Fdoc%2Fpasses.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fpasses.texi?ref=fa55525216546e41650f27058aecb62a2456613a", "patch": "@@ -350,6 +350,12 @@ in @file{tree-ssa-dse.c} and is described by @code{pass_dse}.\n This pass transforms tail recursion into a loop.  It is located in\n @file{tree-tailcall.c} and is described by @code{pass_tail_recursion}.\n \n+@item Forward store motion\n+\n+This pass sinks stores and assignments down the flowgraph closer to it's\n+use point.  The pass is located in @file{tree-ssa-sink.c} and is\n+described by @code{pass_sink_code}\n+\n @item Partial redundancy elimination\n \n This pass eliminates partially redundant computations, as well as"}, {"sha": "9ab16f0f56280f41438663a83c1f2ea73e9809a6", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa55525216546e41650f27058aecb62a2456613a/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa55525216546e41650f27058aecb62a2456613a/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=fa55525216546e41650f27058aecb62a2456613a", "patch": "@@ -501,6 +501,7 @@ decode_options (unsigned int argc, const char **argv)\n       flag_tree_sra = 1;\n       flag_tree_copyrename = 1;\n       flag_tree_fre = 1;\n+      flag_tree_sink = 1;\n \n       if (!optimize_size)\n \t{"}, {"sha": "0bee06c87f05825b82438f31c704d63985d64f66", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sink-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa55525216546e41650f27058aecb62a2456613a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa55525216546e41650f27058aecb62a2456613a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-1.c?ref=fa55525216546e41650f27058aecb62a2456613a", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */ \n+/* { dg-options \"-O2 -fdump-tree-sink-stats\" } */\n+int\n+foo (int a, int b, int c)\n+{\n+  int x = a * b;\n+  return c ? x : a;\n+}\n+/* We should sink the x = a * b calculation into the branch that returns x. */\n+/* { dg-final { scan-tree-dump-times \"Sunk statements:1\" 1 \"sink\"} } */"}, {"sha": "f8c4d13582b45783773795b1f328d10a635818f7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sink-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa55525216546e41650f27058aecb62a2456613a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa55525216546e41650f27058aecb62a2456613a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-2.c?ref=fa55525216546e41650f27058aecb62a2456613a", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */ \n+/* { dg-options \"-O2 -fdump-tree-sink-stats\" } */\n+int\n+bar (int a, int b, int c)\n+{\n+  int y = a * b;\n+  if (c)\n+    y = 12;\n+  return y;\n+}\n+/* We should sink the x = a * b calculation into the else branch  */\n+/* { dg-final { scan-tree-dump-times \"Sunk statements:1\" 1 \"sink\"} } */"}, {"sha": "d0052c945f4be1f639cdfb43edd053e14e19d0e7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sink-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa55525216546e41650f27058aecb62a2456613a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa55525216546e41650f27058aecb62a2456613a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-3.c?ref=fa55525216546e41650f27058aecb62a2456613a", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */ \n+/* { dg-options \"-O2 -fdump-tree-sink-stats\" } */\n+extern void foo(int a);\n+int\n+main (int argc)\n+{\n+  int a;\n+  a = argc + 1;\n+  if (argc + 3)\n+    {\n+      foo (a);\n+    }\n+}\n+/* We should sink the a = argc + 1 calculation into the if branch  */\n+/* { dg-final { scan-tree-dump-times \"Sunk statements:1\" 1 \"sink\"} } */"}, {"sha": "d7b4dd14dcf9f1ef792ac8d678445f848045def6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sink-4.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa55525216546e41650f27058aecb62a2456613a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa55525216546e41650f27058aecb62a2456613a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-4.c?ref=fa55525216546e41650f27058aecb62a2456613a", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */ \n+/* { dg-options \"-O2 -fdump-tree-sink-stats\" } */\n+extern int foo (int *, int *);\n+extern int foo2 (int);\n+int\n+main (int argc)\n+{\n+  int a, b, c;\n+  b = argc + 1;\n+  c = argc + 2;\n+  a = b + c;\n+  if (argc)\n+    {\n+      foo (&b, &c);\n+      a = b + c;\n+    }\n+  foo2 (a);\n+}\n+/* We should sink the first a = b + c calculation into the else branch  */\n+/* { dg-final { scan-tree-dump-times \"Sunk statements:1\" 1 \"sink\"} } */"}, {"sha": "3df7c25ed51bd4d6661398e22c4a3b20e38c38e9", "filename": "gcc/timevar.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa55525216546e41650f27058aecb62a2456613a/gcc%2Ftimevar.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa55525216546e41650f27058aecb62a2456613a/gcc%2Ftimevar.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.def?ref=fa55525216546e41650f27058aecb62a2456613a", "patch": "@@ -79,6 +79,7 @@ DEFTIMEVAR (TV_TREE_SPLIT_EDGES      , \"tree split crit edges\")\n DEFTIMEVAR (TV_TREE_PRE\t\t     , \"tree PRE\")\n DEFTIMEVAR (TV_TREE_REDPHI\t     , \"tree remove redundant PHIs\")\n DEFTIMEVAR (TV_TREE_FRE\t\t     , \"tree FRE\")\n+DEFTIMEVAR (TV_TREE_SINK             , \"tree code sinking\")\n DEFTIMEVAR (TV_TREE_PHIOPT\t     , \"tree linearize phis\")\n DEFTIMEVAR (TV_TREE_FORWPROP\t     , \"tree forward propagate\")\n DEFTIMEVAR (TV_TREE_DCE\t\t     , \"tree conservative DCE\")"}, {"sha": "82402c27a0fef9e12c73f90ad81b17321e463331", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa55525216546e41650f27058aecb62a2456613a/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa55525216546e41650f27058aecb62a2456613a/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=fa55525216546e41650f27058aecb62a2456613a", "patch": "@@ -736,6 +736,8 @@ tree vn_lookup (tree, vuse_optype);\n void vn_init (void);\n void vn_delete (void);\n \n+/* In tree-ssa-sink.c  */\n+bool is_hidden_global_store (tree);\n \n /* In tree-sra.c  */\n void insert_edge_copies (tree, basic_block);"}, {"sha": "f934c99759486d18715983d6a14e5acec95535b5", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa55525216546e41650f27058aecb62a2456613a/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa55525216546e41650f27058aecb62a2456613a/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=fa55525216546e41650f27058aecb62a2456613a", "patch": "@@ -384,6 +384,7 @@ init_tree_optimization_passes (void)\n   NEXT_PASS (pass_may_alias);\n   NEXT_PASS (pass_split_crit_edges);\n   NEXT_PASS (pass_pre);\n+  NEXT_PASS (pass_sink_code);\n   NEXT_PASS (pass_loop);\n   NEXT_PASS (pass_dominator);\n   NEXT_PASS (pass_redundant_phi);"}, {"sha": "30c7dd29a1653f8a61d85a6919615be00ba9c25c", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa55525216546e41650f27058aecb62a2456613a/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa55525216546e41650f27058aecb62a2456613a/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=fa55525216546e41650f27058aecb62a2456613a", "patch": "@@ -164,6 +164,7 @@ extern struct tree_opt_pass pass_mark_used_blocks;\n extern struct tree_opt_pass pass_rename_ssa_copies;\n extern struct tree_opt_pass pass_expand;\n extern struct tree_opt_pass pass_rest_of_compilation;\n+extern struct tree_opt_pass pass_sink_code;\n extern struct tree_opt_pass pass_fre;\n extern struct tree_opt_pass pass_linear_transform;\n "}, {"sha": "69408e8cd7d6290651ece027f9f20f04cc6cac22", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 3, "deletions": 73, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa55525216546e41650f27058aecb62a2456613a/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa55525216546e41650f27058aecb62a2456613a/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=fa55525216546e41650f27058aecb62a2456613a", "patch": "@@ -277,8 +277,6 @@ mark_operand_necessary (tree op, bool phionly)\n static void\n mark_stmt_if_obviously_necessary (tree stmt, bool aggressive)\n {\n-  v_may_def_optype v_may_defs;\n-  v_must_def_optype v_must_defs;\n   stmt_ann_t ann;\n   tree op, def;\n   ssa_op_iter iter;\n@@ -368,78 +366,10 @@ mark_stmt_if_obviously_necessary (tree stmt, bool aggressive)\n \t  return;\n         }\n     }\n-\n-  /* Check virtual definitions.  If we get here, the only virtual\n-     definitions we should see are those generated by assignment\n-     statements.  */\n-  v_may_defs = V_MAY_DEF_OPS (ann);\n-  v_must_defs = V_MUST_DEF_OPS (ann);\n-  if (NUM_V_MAY_DEFS (v_may_defs) > 0 || NUM_V_MUST_DEFS (v_must_defs) > 0)\n+  if (is_hidden_global_store (stmt))\n     {\n-      tree lhs;\n-\n-      gcc_assert (TREE_CODE (stmt) == MODIFY_EXPR);\n-\n-      /* Note that we must not check the individual virtual operands\n-\t here.  In particular, if this is an aliased store, we could\n-\t end up with something like the following (SSA notation\n-\t redacted for brevity):\n-\n-\t \tfoo (int *p, int i)\n-\t\t{\n-\t\t  int x;\n-\t\t  p_1 = (i_2 > 3) ? &x : p_1;\n-\n-\t\t  # x_4 = V_MAY_DEF <x_3>\n-\t\t  *p_1 = 5;\n-\n-\t\t  return 2;\n-\t\t}\n-\n-\t Notice that the store to '*p_1' should be preserved, if we\n-\t were to check the virtual definitions in that store, we would\n-\t not mark it needed.  This is because 'x' is not a global\n-\t variable.\n-\n-\t Therefore, we check the base address of the LHS.  If the\n-\t address is a pointer, we check if its name tag or type tag is\n-\t a global variable.  Otherwise, we check if the base variable\n-\t is a global.  */\n-      lhs = TREE_OPERAND (stmt, 0);\n-      if (REFERENCE_CLASS_P (lhs))\n-\tlhs = get_base_address (lhs);\n-\n-      if (lhs == NULL_TREE)\n-\t{\n-\t  /* If LHS is NULL, it means that we couldn't get the base\n-\t     address of the reference.  In which case, we should not\n-\t     remove this store.  */\n-\t  mark_stmt_necessary (stmt, true);\n-\t}\n-      else if (DECL_P (lhs))\n-\t{\n-\t  /* If the store is to a global symbol, we need to keep it.  */\n-\t  if (is_global_var (lhs))\n-\t    mark_stmt_necessary (stmt, true);\n-\t}\n-      else if (INDIRECT_REF_P (lhs))\n-\t{\n-\t  tree ptr = TREE_OPERAND (lhs, 0);\n-\t  struct ptr_info_def *pi = SSA_NAME_PTR_INFO (ptr);\n-\t  tree nmt = (pi) ? pi->name_mem_tag : NULL_TREE;\n-\t  tree tmt = var_ann (SSA_NAME_VAR (ptr))->type_mem_tag;\n-\n-\t  /* If either the name tag or the type tag for PTR is a\n-\t     global variable, then the store is necessary.  */\n-\t  if ((nmt && is_global_var (nmt))\n-\t      || (tmt && is_global_var (tmt)))\n-\t    {\n-\t      mark_stmt_necessary (stmt, true);\n-\t      return;\n-\t    }\n-\t}\n-      else\n-\tgcc_unreachable ();\n+      mark_stmt_necessary (stmt, true);\n+      return;\n     }\n \n   return;"}]}