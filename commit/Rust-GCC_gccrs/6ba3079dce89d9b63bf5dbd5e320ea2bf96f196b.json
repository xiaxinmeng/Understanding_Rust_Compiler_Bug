{"sha": "6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJhMzA3OWRjZTg5ZDliNjNiZjVkYmQ1ZTMyMGVhMmJmOTZmMTk2Yg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-03-17T15:36:44Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-05-10T07:33:29Z"}, "message": "Come up with startswith function.\n\ngcc/ada/ChangeLog:\n\n\t* gcc-interface/utils.c (def_builtin_1): Use startswith\n\tfunction instead of strncmp.\n\ngcc/analyzer/ChangeLog:\n\n\t* sm-file.cc (is_file_using_fn_p): Use startswith\n\tfunction instead of strncmp.\n\ngcc/ChangeLog:\n\n\t* builtins.c (is_builtin_name): Use startswith\n\tfunction instead of strncmp.\n\t* collect2.c (main): Likewise.\n\t(has_lto_section): Likewise.\n\t(scan_libraries): Likewise.\n\t* coverage.c (coverage_checksum_string): Likewise.\n\t(coverage_init): Likewise.\n\t* dwarf2out.c (is_cxx): Likewise.\n\t(gen_compile_unit_die): Likewise.\n\t* gcc-ar.c (main): Likewise.\n\t* gcc.c (init_spec): Likewise.\n\t(read_specs): Likewise.\n\t(execute): Likewise.\n\t(check_live_switch): Likewise.\n\t* genattrtab.c (write_attr_case): Likewise.\n\t(IS_ATTR_GROUP): Likewise.\n\t* gencfn-macros.c (main): Likewise.\n\t* gengtype.c (type_for_name): Likewise.\n\t(gen_rtx_next): Likewise.\n\t(get_file_langdir): Likewise.\n\t(write_local): Likewise.\n\t* genmatch.c (get_operator): Likewise.\n\t(get_operand_type): Likewise.\n\t(expr::gen_transform): Likewise.\n\t* genoutput.c (validate_optab_operands): Likewise.\n\t* incpath.c (add_sysroot_to_chain): Likewise.\n\t* langhooks.c (lang_GNU_C): Likewise.\n\t(lang_GNU_CXX): Likewise.\n\t(lang_GNU_Fortran): Likewise.\n\t(lang_GNU_OBJC): Likewise.\n\t* lto-wrapper.c (run_gcc): Likewise.\n\t* omp-general.c (omp_max_simt_vf): Likewise.\n\t* omp-low.c (omp_runtime_api_call): Likewise.\n\t* opts-common.c (parse_options_from_collect_gcc_options): Likewise.\n\t* read-rtl-function.c (function_reader::read_rtx_operand_r): Likewise.\n\t* real.c (real_from_string): Likewise.\n\t* selftest.c (assert_str_startswith): Likewise.\n\t* timevar.c (timer::validate_phases): Likewise.\n\t* tree.c (get_file_function_name): Likewise.\n\t* ubsan.c (ubsan_use_new_style_p): Likewise.\n\t* varasm.c (default_function_rodata_section): Likewise.\n\t(incorporeal_function_p): Likewise.\n\t(default_section_type_flags): Likewise.\n\t* system.h (startswith): Define startswith.\n\ngcc/c-family/ChangeLog:\n\n\t* c-ada-spec.c (print_destructor): Use startswith\n\tfunction instead of strncmp.\n\t(dump_ada_declaration): Likewise.\n\t* c-common.c (disable_builtin_function): Likewise.\n\t(def_builtin_1): Likewise.\n\t* c-format.c (check_tokens): Likewise.\n\t(check_plain): Likewise.\n\t(convert_format_name_to_system_name): Likewise.\n\ngcc/c/ChangeLog:\n\n\t* c-aux-info.c (affix_data_type): Use startswith\n\tfunction instead of strncmp.\n\t* c-typeck.c (build_function_call_vec): Likewise.\n\t* gimple-parser.c (c_parser_gimple_parse_bb_spec): Likewise.\n\ngcc/cp/ChangeLog:\n\n\t* decl.c (duplicate_decls): Use startswith\n\tfunction instead of strncmp.\n\t(cxx_builtin_function): Likewise.\n\t(omp_declare_variant_finalize_one): Likewise.\n\t(grokfndecl): Likewise.\n\t* error.c (dump_decl_name): Likewise.\n\t* mangle.c (find_decomp_unqualified_name): Likewise.\n\t(write_guarded_var_name): Likewise.\n\t(decl_tls_wrapper_p): Likewise.\n\t* parser.c (cp_parser_simple_type_specifier): Likewise.\n\t(cp_parser_tx_qualifier_opt): Likewise.\n\t* pt.c (template_parm_object_p): Likewise.\n\t(dguide_name_p): Likewise.\n\ngcc/d/ChangeLog:\n\n\t* d-builtins.cc (do_build_builtin_fn): Use startswith\n\tfunction instead of strncmp.\n\t* dmd/dinterpret.c (evaluateIfBuiltin): Likewise.\n\t* dmd/dmangle.c: Likewise.\n\t* dmd/hdrgen.c: Likewise.\n\t* dmd/identifier.c (Identifier::toHChars2): Likewise.\n\ngcc/fortran/ChangeLog:\n\n\t* decl.c (variable_decl): Use startswith\n\tfunction instead of strncmp.\n\t(gfc_match_end): Likewise.\n\t* gfortran.h (gfc_str_startswith): Likewise.\n\t* module.c (load_omp_udrs): Likewise.\n\t(read_module): Likewise.\n\t* options.c (gfc_handle_runtime_check_option): Likewise.\n\t* primary.c (match_arg_list_function): Likewise.\n\t* trans-decl.c (gfc_get_symbol_decl): Likewise.\n\t* trans-expr.c (gfc_conv_procedure_call): Likewise.\n\t* trans-intrinsic.c (gfc_conv_ieee_arithmetic_function): Likewise.\n\ngcc/go/ChangeLog:\n\n\t* gofrontend/runtime.cc (Runtime::name_to_code): Use startswith\n\tfunction instead of strncmp.\n\ngcc/objc/ChangeLog:\n\n\t* objc-act.c (objc_string_ref_type_p): Use startswith\n\tfunction instead of strncmp.\n\t* objc-encoding.c (encode_type): Likewise.\n\t* objc-next-runtime-abi-02.c (has_load_impl): Likewise.", "tree": {"sha": "fe403786765fe8f105492c94df12561b01c35cb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe403786765fe8f105492c94df12561b01c35cb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fea26bad2e5b9078d6a6b16d5e48653e31794273", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fea26bad2e5b9078d6a6b16d5e48653e31794273", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fea26bad2e5b9078d6a6b16d5e48653e31794273"}], "stats": {"total": 355, "additions": 169, "deletions": 186}, "files": [{"sha": "80a4160adf3147e82c60f162b1d26163faf67b26", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -7016,8 +7016,7 @@ def_builtin_1 (enum built_in_function fncode,\n     return;\n \n   gcc_assert ((!both_p && !fallback_p)\n-\t      || !strncmp (name, \"__builtin_\",\n-\t\t\t   strlen (\"__builtin_\")));\n+\t      || startswith (name, \"__builtin_\"));\n \n   libname = name + strlen (\"__builtin_\");\n   decl = add_builtin_function (name, fntype, fncode, fnclass,"}, {"sha": "3a5f95def345bc22b8c7612e6f405047b62ad19f", "filename": "gcc/analyzer/sm-file.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fanalyzer%2Fsm-file.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fanalyzer%2Fsm-file.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-file.cc?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -312,9 +312,8 @@ is_file_using_fn_p (tree fndecl)\n \n   /* Also support variants of these names prefixed with \"_IO_\".  */\n   const char *name = IDENTIFIER_POINTER (DECL_NAME (fndecl));\n-  if (strncmp (name, \"_IO_\", 4) == 0)\n-    if (fs.contains_name_p (name + 4))\n-      return true;\n+  if (startswith (name, \"_IO_\") && fs.contains_name_p (name + 4))\n+    return true;\n \n   return false;\n }"}, {"sha": "2f0efae11e8ca873f1dd81ec592b9e9b7dec74e9", "filename": "gcc/builtins.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -738,13 +738,9 @@ pointer_query::flush_cache ()\n static bool\n is_builtin_name (const char *name)\n {\n-  if (strncmp (name, \"__builtin_\", 10) == 0)\n-    return true;\n-  if (strncmp (name, \"__sync_\", 7) == 0)\n-    return true;\n-  if (strncmp (name, \"__atomic_\", 9) == 0)\n-    return true;\n-  return false;\n+  return (startswith (name, \"__builtin_\")\n+\t  || startswith (name, \"__sync_\")\n+\t  || startswith (name, \"__atomic_\"));\n }\n \n /* Return true if NODE should be considered for inline expansion regardless"}, {"sha": "29eb0b01a910c521bdb130c1664e7abba94e21db", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -2696,7 +2696,7 @@ print_destructor (pretty_printer *buffer, tree t, tree type)\n   tree decl_name = DECL_NAME (TYPE_NAME (type));\n \n   pp_string (buffer, \"Delete_\");\n-  if (strncmp (IDENTIFIER_POINTER (DECL_NAME (t)), \"__dt_del\", 8) == 0)\n+  if (startswith (IDENTIFIER_POINTER (DECL_NAME (t)), \"__dt_del\"))\n     pp_string (buffer, \"And_Free_\");\n   pp_ada_tree_identifier (buffer, decl_name, t, false);\n }\n@@ -2980,9 +2980,9 @@ dump_ada_declaration (pretty_printer *buffer, tree t, tree type, int spc)\n \t    return 0;\n \n \t  /* Only consider complete constructors and deleting destructors.  */\n-\t  if (strncmp (IDENTIFIER_POINTER (decl_name), \"__ct_comp\", 9) != 0\n-\t      && strncmp (IDENTIFIER_POINTER (decl_name), \"__dt_comp\", 9) != 0\n-\t      && strncmp (IDENTIFIER_POINTER (decl_name), \"__dt_del\", 8) != 0)\n+\t  if (!startswith (IDENTIFIER_POINTER (decl_name), \"__ct_comp\")\n+\t      && !startswith (IDENTIFIER_POINTER (decl_name), \"__dt_comp\")\n+\t      && !startswith (IDENTIFIER_POINTER (decl_name), \"__dt_del\"))\n \t    return 0;\n \t}\n "}, {"sha": "7bd799d18258abc31912fbd4c6b38ad7cc0a723c", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -4670,7 +4670,7 @@ static bool builtin_function_disabled_p (const char *);\n void\n disable_builtin_function (const char *name)\n {\n-  if (strncmp (name, \"__builtin_\", strlen (\"__builtin_\")) == 0)\n+  if (startswith (name, \"__builtin_\"))\n     error (\"cannot disable built-in function %qs\", name);\n   else\n     {\n@@ -4718,8 +4718,7 @@ def_builtin_1 (enum built_in_function fncode,\n     return;\n \n   gcc_assert ((!both_p && !fallback_p)\n-\t      || !strncmp (name, \"__builtin_\",\n-\t\t\t   strlen (\"__builtin_\")));\n+\t      || startswith (name, \"__builtin_\"));\n \n   libname = name + strlen (\"__builtin_\");\n   decl = add_builtin_function (name, fntype, fncode, fnclass,"}, {"sha": "bda3b18fcd0c97f871ff320e8d049a5a8d9d4f67", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -3097,7 +3097,7 @@ check_tokens (const token_t *tokens, unsigned ntoks,\n       /* Allow this ugly warning for the time being.  */\n       if (toklen == 2\n \t  && format_chars - orig_format_chars > 6\n-\t  && !strncmp (format_chars - 7, \" count >= width of \", 19))\n+\t  && startswith (format_chars - 7, \" count >= width of \"))\n \treturn format_chars + 10;\n \n       /* The token is a type if it ends in an alphabetic character.  */\n@@ -3127,7 +3127,7 @@ check_tokens (const token_t *tokens, unsigned ntoks,\n   /* Diagnose unquoted __attribute__.  Consider any parenthesized\n      argument to the attribute to avoid redundant warnings for\n      the double parentheses that might follow.  */\n-  if (!strncmp (format_chars, \"__attribute\", sizeof \"__attribute\" - 1))\n+  if (startswith (format_chars, \"__attribute\"))\n     {\n       unsigned nchars = sizeof \"__attribute\" - 1;\n       while ('_' == format_chars[nchars])\n@@ -3178,9 +3178,9 @@ check_tokens (const token_t *tokens, unsigned ntoks,\n   /* Diagnose unquoted built-ins.  */\n   if (format_chars[0] == '_'\n       && format_chars[1] == '_'\n-      && (!strncmp (format_chars + 2, \"atomic\", sizeof \"atomic\" - 1)\n-\t  || !strncmp (format_chars + 2, \"builtin\", sizeof \"builtin\" - 1)\n-\t  || !strncmp (format_chars + 2, \"sync\", sizeof \"sync\" - 1)))\n+      && (startswith (format_chars + 2, \"atomic\")\n+\t  || startswith (format_chars + 2, \"builtin\")\n+\t  || startswith (format_chars + 2, \"sync\")))\n     {\n       format_warning_substr (format_string_loc, format_string_cst,\n \t\t\t     fmtchrpos, fmtchrpos + wlen, opt,\n@@ -3267,7 +3267,7 @@ check_plain (location_t format_string_loc, tree format_string_cst,\n   if (*format_chars == '%')\n     {\n       /* Diagnose %<%s%> and suggest using %qs instead.  */\n-      if (!strncmp (format_chars, \"%<%s%>\", 6))\n+      if (startswith (format_chars, \"%<%s%>\"))\n \tformat_warning_substr (format_string_loc, format_string_cst,\n \t\t\t       fmtchrpos, fmtchrpos + 6, opt,\n \t\t\t       \"quoted %qs directive in format; \"\n@@ -3593,7 +3593,7 @@ check_plain (location_t format_string_loc, tree format_string_cst,\n \n       if (nchars == 1)\n \t{\n-\t  if (!strncmp (format_chars, \"\\\"%s\\\"\", 4))\n+\t  if (startswith (format_chars, \"\\\"%s\\\"\"))\n \t    {\n \t      if (format_warning_substr (format_string_loc, format_string_cst,\n \t\t\t\t\t fmtchrpos, fmtchrpos + 4, opt,\n@@ -3621,7 +3621,7 @@ check_plain (location_t format_string_loc, tree format_string_cst,\n \t      && format_chars[0] == '(')\n \t    ;   /* Text beginning in an open parenthesis.  */\n \t  else if (nchars == 3\n-\t      && !strncmp (format_chars, \"...\", 3)\n+\t      && startswith (format_chars, \"...\")\n \t      && format_chars[3])\n \t    ;   /* Text beginning in an ellipsis.  */\n \t  else\n@@ -3663,7 +3663,7 @@ check_plain (location_t format_string_loc, tree format_string_cst,\n \t\t   a period at the end of a capitalized sentence.  */\n \t  else if (nchars == 3\n \t\t   && format_chars - orig_format_chars > 0\n-\t\t   && !strncmp (format_chars, \"...\", 3))\n+\t\t   && startswith (format_chars, \"...\"))\n \t    ;   /* Text ending in the ellipsis.  */\n \t  else\n \t    format_warning_substr (format_string_loc, format_string_cst,\n@@ -5104,7 +5104,7 @@ convert_format_name_to_system_name (const char *attr_name)\n   int i;\n \n   if (attr_name == NULL || *attr_name == 0\n-      || strncmp (attr_name, \"gcc_\", 4) == 0)\n+      || startswith (attr_name, \"gcc_\"))\n     return attr_name;\n #ifdef TARGET_OVERRIDES_FORMAT_INIT\n   TARGET_OVERRIDES_FORMAT_INIT ();"}, {"sha": "81860cb48cb13b2f9924b03af2d6c2f10018d3aa", "filename": "gcc/c/c-aux-info.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fc%2Fc-aux-info.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fc%2Fc-aux-info.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-aux-info.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -67,12 +67,12 @@ affix_data_type (const char *param)\n \n   for (;;)\n     {\n-      if (!strncmp (p, \"volatile \", 9))\n+      if (startswith (p, \"volatile \"))\n \t{\n \t  p += 9;\n \t  continue;\n \t}\n-      if (!strncmp (p, \"const \", 6))\n+      if (startswith (p, \"const \"))\n \t{\n \t  p += 6;\n \t  continue;"}, {"sha": "c3b85da11250a07993b00cc6042ef8edc924ab51", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -3113,7 +3113,7 @@ build_function_call_vec (location_t loc, vec<location_t> arg_loc,\n \torig_fundecl = fundecl;\n       /* Atomic functions have type checking/casting already done.  They are \n \t often rewritten and don't match the original parameter list.  */\n-      if (name && !strncmp (IDENTIFIER_POINTER (name), \"__atomic_\", 9))\n+      if (name && startswith (IDENTIFIER_POINTER (name), \"__atomic_\"))\n         origtypes = NULL;\n     }\n   if (TREE_CODE (TREE_TYPE (function)) == FUNCTION_TYPE)\n@@ -3199,7 +3199,7 @@ build_function_call_vec (location_t loc, vec<location_t> arg_loc,\n \t\t\t\t\t    nargs, argarray, &arg_loc);\n \n   if (name != NULL_TREE\n-      && !strncmp (IDENTIFIER_POINTER (name), \"__builtin_\", 10))\n+      && startswith (IDENTIFIER_POINTER (name), \"__builtin_\"))\n     {\n       if (require_constant_value)\n \tresult"}, {"sha": "3a6e72ef0028de475ca96cc379b8ea5e476e8480", "filename": "gcc/c/gimple-parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fc%2Fgimple-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fc%2Fgimple-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -131,7 +131,7 @@ static void c_parser_gimple_expr_list (gimple_parser &, vec<tree> *);\n static bool\n c_parser_gimple_parse_bb_spec (tree val, int *index)\n {\n-  if (strncmp (IDENTIFIER_POINTER (val), \"__BB\", 4) != 0)\n+  if (!startswith (IDENTIFIER_POINTER (val), \"__BB\"))\n     return false;\n   for (const char *p = IDENTIFIER_POINTER (val) + 4; *p; ++p)\n     if (!ISDIGIT (*p))"}, {"sha": "0ddb1693b67ee023b77e93bb66584cb481efed05", "filename": "gcc/collect2.c", "status": "modified", "additions": 22, "deletions": 26, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -956,7 +956,7 @@ main (int argc, char **argv)\n       {\n \tif (! strcmp (argv[i], \"-debug\"))\n \t  debug = true;\n-\telse if (!strncmp (argv[i], \"-fno-lto\", 8))\n+\telse if (startswith (argv[i], \"-fno-lto\"))\n \t  lto_mode = LTO_MODE_NONE;\n         else if (! strcmp (argv[i], \"-plugin\"))\n \t  {\n@@ -970,7 +970,7 @@ main (int argc, char **argv)\n \t  selected_linker = USE_GOLD_LD;\n \telse if (strcmp (argv[i], \"-fuse-ld=lld\") == 0)\n \t  selected_linker = USE_LLD_LD;\n-\telse if (strncmp (argv[i], \"-o\", 2) == 0)\n+\telse if (startswith (argv[i], \"-o\"))\n \t  {\n \t    /* Parse the output filename if it's given so that we can make\n \t       meaningful temp filenames.  */\n@@ -984,19 +984,19 @@ main (int argc, char **argv)\n \t/* These flags are position independent, although their order\n \t   is important - subsequent flags override earlier ones. */\n \telse if (strcmp (argv[i], \"-b64\") == 0)\n-\t    aix64_flag = 1;\n+\t  aix64_flag = 1;\n \t/* -bexport:filename always needs the :filename */\n-\telse if (strncmp (argv[i], \"-bE:\", 4) == 0\n-\t      || strncmp (argv[i], \"-bexport:\", 9) == 0)\n-\t    export_flag = 1;\n+\telse if (startswith (argv[i], \"-bE:\")\n+\t\t || startswith (argv[i], \"-bexport:\"))\n+\t  export_flag = 1;\n \telse if (strcmp (argv[i], \"-brtl\") == 0\n \t      || strcmp (argv[i], \"-bsvr4\") == 0\n \t      || strcmp (argv[i], \"-G\") == 0)\n-\t    aixrtl_flag = 1;\n+\t  aixrtl_flag = 1;\n \telse if (strcmp (argv[i], \"-bnortl\") == 0)\n-\t    aixrtl_flag = 0;\n+\t  aixrtl_flag = 0;\n \telse if (strcmp (argv[i], \"-blazy\") == 0)\n-\t    aixlazy_flag = 1;\n+\t  aixlazy_flag = 1;\n #endif\n       }\n \n@@ -1016,11 +1016,11 @@ main (int argc, char **argv)\n \tconst char *q = extract_string (&p);\n \tif (*q == '-' && (q[1] == 'm' || q[1] == 'f'))\n \t  num_c_args++;\n-\tif (strncmp (q, \"-flto-partition=none\", 20) == 0)\n+\tif (startswith (q, \"-flto-partition=none\"))\n \t  no_partition = true;\n-\telse if (strncmp (q, \"-fno-lto\", 8) == 0)\n+\telse if (startswith (q, \"-fno-lto\"))\n \t  lto_mode = LTO_MODE_NONE;\n-\telse if (strncmp (q, \"-save-temps\", 11) == 0)\n+\telse if (startswith (q, \"-save-temps\"))\n \t  /* FIXME: Honour =obj.  */\n \t  save_temps = true;\n \telse if (strcmp (q, \"-dumpdir\") == 0)\n@@ -1254,7 +1254,7 @@ main (int argc, char **argv)\n \t(void) extract_string (&p);\n #ifdef COLLECT_EXPORT_LIST\n       /* Detect any invocation with -fvisibility.  */\n-      if (strncmp (q, \"-fvisibility\", 12) == 0)\n+      if (startswith (q, \"-fvisibility\"))\n \tvisibility_flag = 1;\n #endif\n     }\n@@ -1303,7 +1303,7 @@ main (int argc, char **argv)\n \t      break;\n \n             case 'f':\n-\t      if (strncmp (arg, \"-flto\", 5) == 0)\n+\t      if (startswith (arg, \"-flto\"))\n \t\t{\n #ifdef ENABLE_LTO\n \t\t  /* Do not pass LTO flag to the linker. */\n@@ -1315,13 +1315,13 @@ main (int argc, char **argv)\n #endif\n \t\t}\n \t      else if (!use_collect_ld\n-\t\t       && strncmp (arg, \"-fuse-ld=\", 9) == 0)\n+\t\t       && startswith (arg, \"-fuse-ld=\"))\n \t\t{\n \t\t  /* Do not pass -fuse-ld={bfd|gold|lld} to the linker. */\n \t\t  ld1--;\n \t\t  ld2--;\n \t\t}\n-\t      else if (strncmp (arg, \"-fno-lto\", 8) == 0)\n+\t      else if (startswith (arg, \"-fno-lto\"))\n \t\t{\n \t\t  /* Do not pass -fno-lto to the linker. */\n \t\t  ld1--;\n@@ -1462,7 +1462,7 @@ main (int argc, char **argv)\n \t\t  ld2--;\n #endif\n \t\t}\n-\t      else if (strncmp (arg, \"--demangle\", 10) == 0)\n+\t      else if (startswith (arg, \"--demangle\"))\n \t\t{\n #ifndef HAVE_LD_DEMANGLE\n \t\t  no_demangle = 0;\n@@ -1479,7 +1479,7 @@ main (int argc, char **argv)\n \t\t  ld2--;\n #endif\n \t\t}\n-\t      else if (strncmp (arg, \"--sysroot=\", 10) == 0)\n+\t      else if (startswith (arg, \"--sysroot=\"))\n \t\ttarget_system_root = arg + 10;\n \t      else if (strcmp (arg, \"--version\") == 0)\n \t\tverbose = true;\n@@ -2307,13 +2307,9 @@ has_lto_section (void *data, const char *name ATTRIBUTE_UNUSED,\n {\n   int *found = (int *) data;\n \n-  if (strncmp (name, LTO_SECTION_NAME_PREFIX,\n-\t       sizeof (LTO_SECTION_NAME_PREFIX) - 1) != 0)\n-    {\n-      if (strncmp (name, OFFLOAD_SECTION_NAME_PREFIX,\n-\t           sizeof (OFFLOAD_SECTION_NAME_PREFIX) - 1) != 0)\n-        return 1;\n-    }\n+  if (!startswith (name, LTO_SECTION_NAME_PREFIX)\n+      && !startswith (name, OFFLOAD_SECTION_NAME_PREFIX))\n+    return 1;\n \n   *found = 1;\n \n@@ -2619,7 +2615,7 @@ scan_libraries (const char *prog_name)\n \tcontinue;\n \n       name = p;\n-      if (strncmp (name, \"not found\", sizeof (\"not found\") - 1) == 0)\n+      if (startswith (name, \"not found\"))\n \tfatal_error (input_location, \"dynamic dependency %s not found\", buf);\n \n       /* Find the end of the symbol name.  */"}, {"sha": "5a344cdfc179b699630513f91e3e6bb9a3dc3aca", "filename": "gcc/coverage.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -488,9 +488,9 @@ coverage_checksum_string (unsigned chksum, const char *string)\n   for (i = 0; string[i]; i++)\n     {\n       int offset = 0;\n-      if (!strncmp (string + i, \"_GLOBAL__N_\", 11))\n+      if (startswith (string + i, \"_GLOBAL__N_\"))\n       offset = 11;\n-      if (!strncmp (string + i, \"_GLOBAL__\", 9))\n+      if (startswith (string + i, \"_GLOBAL__\"))\n       offset = 9;\n \n       /* C++ namespaces do have scheme:\n@@ -1256,8 +1256,7 @@ coverage_init (const char *filename)\n \t  filename = concat (getpwd (), separator, filename, NULL);\n \t  if (profile_prefix_path)\n \t    {\n-\t      if (!strncmp (filename, profile_prefix_path,\n-\t\t\t    strlen (profile_prefix_path)))\n+\t      if (startswith (filename, profile_prefix_path))\n \t\t{\n \t\t  filename += strlen (profile_prefix_path);\n \t\t  while (*filename == *separator)"}, {"sha": "bc3928d7f85dc4e0dac1f847f7de417d014044b4", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -1609,8 +1609,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool hiding, bool was_hidden)\n \n \t\t  if (name[0] == '_'\n \t\t      && name[1] == '_'\n-\t\t      && (strncmp (name + 2, \"builtin_\",\n-\t\t\t\t   strlen (\"builtin_\")) == 0\n+\t\t      && (startswith (name + 2, \"builtin_\")\n \t\t\t  || (len = strlen (name)) <= strlen (\"___chk\")\n \t\t\t  || memcmp (name + len - strlen (\"_chk\"),\n \t\t\t\t     \"_chk\", strlen (\"_chk\") + 1) != 0))\n@@ -4828,7 +4827,7 @@ cxx_builtin_function (tree decl)\n     /* In the user's namespace, it must be declared before use.  */\n     hiding = true;\n   else if (IDENTIFIER_LENGTH (id) > strlen (\"___chk\")\n-\t   && 0 != strncmp (name + 2, \"builtin_\", strlen (\"builtin_\"))\n+\t   && !startswith (name + 2, \"builtin_\")\n \t   && 0 == memcmp (name + IDENTIFIER_LENGTH (id) - strlen (\"_chk\"),\n \t\t\t   \"_chk\", strlen (\"_chk\") + 1))\n     /* Treat __*_chk fortification functions as anticipated as well,\n@@ -7606,9 +7605,9 @@ omp_declare_variant_finalize_one (tree decl, tree attr)\n \t  return true;\n \t}\n       if (fndecl_built_in_p (variant)\n-\t  && (strncmp (varname, \"__builtin_\", strlen (\"__builtin_\")) == 0\n-\t      || strncmp (varname, \"__sync_\", strlen (\"__sync_\")) == 0\n-\t      || strncmp (varname, \"__atomic_\", strlen (\"__atomic_\")) == 0))\n+\t  && (startswith (varname, \"__builtin_\")\n+\t      || startswith (varname, \"__sync_\")\n+\t      || startswith (varname, \"__atomic_\")))\n \t{\n \t  error_at (varid_loc, \"variant %qD is a built-in\", variant);\n \t  return true;\n@@ -9881,8 +9880,8 @@ grokfndecl (tree ctype,\n \t  || (IDENTIFIER_LENGTH (declarator) > 10\n \t      && IDENTIFIER_POINTER (declarator)[0] == '_'\n \t      && IDENTIFIER_POINTER (declarator)[1] == '_'\n-\t      && strncmp (IDENTIFIER_POINTER (declarator)+2,\n-\t\t\t  \"builtin_\", 8) == 0)\n+\t      && startswith (IDENTIFIER_POINTER (declarator) + 2,\n+\t\t\t     \"builtin_\"))\n \t  || (targetcm.cxx_implicit_extern_c\n \t      && (targetcm.cxx_implicit_extern_c\n \t\t  (IDENTIFIER_POINTER (declarator))))))"}, {"sha": "3c2276b1976302beb15e129ae88dd6441af0d10f", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -1138,7 +1138,7 @@ dump_decl_name (cxx_pretty_printer *pp, tree t, int flags)\n     }\n \n   const char *str = IDENTIFIER_POINTER (t);\n-  if (!strncmp (str, \"_ZGR\", 4))\n+  if (startswith (str, \"_ZGR\"))\n     {\n       pp_cxx_ws_string (pp, \"<temporary>\");\n       return;"}, {"sha": "f0e1f4168043326d49e87460df387cd3bbbfa0f3", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -1308,10 +1308,10 @@ find_decomp_unqualified_name (tree decl, size_t *len)\n   const char *p = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n   const char *end = p + IDENTIFIER_LENGTH (DECL_ASSEMBLER_NAME (decl));\n   bool nested = false;\n-  if (strncmp (p, \"_Z\", 2))\n+  if (!startswith (p, \"_Z\"))\n     return NULL;\n   p += 2;\n-  if (!strncmp (p, \"St\", 2))\n+  if (startswith (p, \"St\"))\n     p += 2;\n   else if (*p == 'N')\n     {\n@@ -1327,7 +1327,7 @@ find_decomp_unqualified_name (tree decl, size_t *len)\n \t    break;\n \t}\n     }\n-  if (strncmp (p, \"DC\", 2))\n+  if (!startswith (p, \"DC\"))\n     return NULL;\n   if (nested)\n     {\n@@ -4430,7 +4430,7 @@ static void\n write_guarded_var_name (const tree variable)\n {\n   if (DECL_NAME (variable)\n-      && strncmp (IDENTIFIER_POINTER (DECL_NAME (variable)), \"_ZGR\", 4) == 0)\n+      && startswith (IDENTIFIER_POINTER (DECL_NAME (variable)), \"_ZGR\"))\n     /* The name of a guard variable for a reference temporary should refer\n        to the reference, not the temporary.  */\n     write_string (IDENTIFIER_POINTER (DECL_NAME (variable)) + 4);\n@@ -4488,8 +4488,7 @@ decl_tls_wrapper_p (const tree fn)\n   if (TREE_CODE (fn) != FUNCTION_DECL)\n     return false;\n   tree name = DECL_NAME (fn);\n-  return strncmp (IDENTIFIER_POINTER (name), TLS_WRAPPER_PREFIX,\n-\t\t  strlen (TLS_WRAPPER_PREFIX)) == 0;\n+  return startswith (IDENTIFIER_POINTER (name), TLS_WRAPPER_PREFIX);\n }\n \n /* Return an identifier for the name of a temporary variable used to"}, {"sha": "0fe29c658d2d746bfcc2b241ab727d15ac52687f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -18668,9 +18668,8 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n \t  decl_specs->int_n_idx = idx;\n \t  /* Check if the alternate \"__intN__\" form has been used instead of\n \t     \"__intN\".  */\n-\t  if (strncmp (IDENTIFIER_POINTER (token->u.value)\n-\t\t\t+ (IDENTIFIER_LENGTH (token->u.value) - 2),\n-\t\t\t\"__\", 2) == 0)\n+\t  if (startswith (IDENTIFIER_POINTER (token->u.value)\n+\t\t\t  + (IDENTIFIER_LENGTH (token->u.value) - 2), \"__\"))\n \t    decl_specs->int_n_alt = true;\n \t}\n       type = int_n_trees [idx].signed_type;\n@@ -22961,7 +22960,7 @@ cp_parser_tx_qualifier_opt (cp_parser *parser)\n       tree name = token->u.value;\n       const char *p = IDENTIFIER_POINTER (name);\n       const int len = strlen (\"transaction_safe\");\n-      if (!strncmp (p, \"transaction_safe\", len))\n+      if (startswith (p, \"transaction_safe\"))\n \t{\n \t  p += len;\n \t  if (*p == '\\0'"}, {"sha": "bd99529f98e837a4d68ee869b2860e983b963a48", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -6994,7 +6994,7 @@ bool\n template_parm_object_p (const_tree t)\n {\n   return (TREE_CODE (t) == VAR_DECL && DECL_ARTIFICIAL (t) && DECL_NAME (t)\n-\t  && !strncmp (IDENTIFIER_POINTER (DECL_NAME (t)), \"_ZTA\", 4));\n+\t  && startswith (IDENTIFIER_POINTER (DECL_NAME (t)), \"_ZTA\"));\n }\n \n /* Subroutine of convert_nontype_argument, to check whether EXPR, as an\n@@ -28493,8 +28493,7 @@ dguide_name_p (tree name)\n {\n   return (TREE_CODE (name) == IDENTIFIER_NODE\n \t  && TREE_TYPE (name)\n-\t  && !strncmp (IDENTIFIER_POINTER (name), dguide_base,\n-\t\t       strlen (dguide_base)));\n+\t  && startswith (IDENTIFIER_POINTER (name), dguide_base));\n }\n \n /* True if FN is a deduction guide.  */"}, {"sha": "859a8ce2a59402afde9a9c44f200703f946ad42e", "filename": "gcc/d/d-builtins.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fd%2Fd-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fd%2Fd-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-builtins.cc?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -739,8 +739,7 @@ do_build_builtin_fn (built_in_function fncode,\n     return;\n \n   gcc_assert ((!both_p && !fallback_p)\n-\t      || !strncmp (name, \"__builtin_\",\n-\t\t\t   strlen (\"__builtin_\")));\n+\t      || startswith (name, \"__builtin_\"));\n \n   libname = name + strlen (\"__builtin_\");\n "}, {"sha": "9e74a0dbf1f11ea21eb8384ead7d28e2c894cb1d", "filename": "gcc/d/dmd/dinterpret.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fd%2Fdmd%2Fdinterpret.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fd%2Fdmd%2Fdinterpret.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdinterpret.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -6881,7 +6881,7 @@ Expression *evaluateIfBuiltin(UnionExp *pue, InterState *istate, Loc loc,\n         const char *id = fd->ident->toChars();\n         size_t idlen = strlen(id);\n         if (nargs == 2 && (idlen == 10 || idlen == 11) &&\n-            !strncmp(id, \"_aApply\", 7))\n+            startswith (id, \"_aApply\"))\n         {\n             // Functions from aApply.d and aApplyR.d in the runtime\n             bool rvs = (idlen == 11);   // true if foreach_reverse"}, {"sha": "f112243cf5f06718533187e3ca7e6262048a6f1e", "filename": "gcc/d/dmd/dmangle.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fd%2Fdmd%2Fdmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fd%2Fdmd%2Fdmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdmangle.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -673,7 +673,7 @@ class Mangler : public Visitor\n                 cd == ClassDeclaration::object ||\n                 cd == Type::typeinfoclass ||\n                 cd == Module::moduleinfo ||\n-                strncmp(cd->ident->toChars(), \"TypeInfo_\", 9) == 0)\n+                startswith (cd->ident->toChars(), \"TypeInfo_\"))\n             {\n                 // Don't mangle parent\n                 ad->parent = NULL;"}, {"sha": "e72273b2dbdcf6d4ceda74df917d5c404c97678e", "filename": "gcc/d/dmd/hdrgen.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fd%2Fdmd%2Fhdrgen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fd%2Fdmd%2Fhdrgen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fhdrgen.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -3212,7 +3212,7 @@ class PrettyPrintVisitor : public Visitor\n         }\n         else if (p->type->ty == Tident &&\n                  strlen(((TypeIdentifier *)p->type)->ident->toChars()) > 3 &&\n-                 strncmp(((TypeIdentifier *)p->type)->ident->toChars(), \"__T\", 3) == 0)\n+                 startswith (((TypeIdentifier *)p->type)->ident->toChars(), \"__T\"))\n         {\n             // print parameter name, instead of undetermined type parameter\n             buf->writestring(p->ident->toChars());"}, {"sha": "dd2c58fd657cc810e1610eac119e0357c637f0b8", "filename": "gcc/d/dmd/identifier.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fd%2Fdmd%2Fidentifier.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fd%2Fdmd%2Fidentifier.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fidentifier.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -73,11 +73,11 @@ const char *Identifier::toHChars2()\n     {   p = toChars();\n         if (*p == '_')\n         {\n-            if (strncmp(p, \"_staticCtor\", 11) == 0)\n+            if (startswith(p, \"_staticCtor\"))\n                 p = \"static this\";\n-            else if (strncmp(p, \"_staticDtor\", 11) == 0)\n+            else if (startswith(p, \"_staticDtor\"))\n                 p = \"static ~this\";\n-            else if (strncmp(p, \"__invariant\", 11) == 0)\n+            else if (startswith(p, \"__invariant\"))\n                 p = \"invariant\";\n         }\n     }"}, {"sha": "8fc82989abcd7fd5d35a8b8291182b8fc342a3d1", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -5532,7 +5532,7 @@ is_cxx (const_tree decl)\n     {\n       const_tree context = get_ultimate_context (decl);\n       if (context && TRANSLATION_UNIT_LANGUAGE (context))\n-\treturn strncmp (TRANSLATION_UNIT_LANGUAGE (context), \"GNU C++\", 7) == 0;\n+\treturn startswith (TRANSLATION_UNIT_LANGUAGE (context), \"GNU C++\");\n     }\n   return is_cxx ();\n }\n@@ -24846,8 +24846,8 @@ gen_compile_unit_die (const char *filename)\n \t    common_lang = TRANSLATION_UNIT_LANGUAGE (t);\n \t  else if (strcmp (common_lang, TRANSLATION_UNIT_LANGUAGE (t)) == 0)\n \t    ;\n-\t  else if (strncmp (common_lang, \"GNU C\", 5) == 0\n-\t\t    && strncmp (TRANSLATION_UNIT_LANGUAGE (t), \"GNU C\", 5) == 0)\n+\t  else if (startswith (common_lang, \"GNU C\")\n+\t\t    && startswith (TRANSLATION_UNIT_LANGUAGE (t), \"GNU C\"))\n \t    /* Mixing C and C++ is ok, use C++ in that case.  */\n \t    common_lang = highest_c_language (common_lang,\n \t\t\t\t\t      TRANSLATION_UNIT_LANGUAGE (t));\n@@ -24864,7 +24864,7 @@ gen_compile_unit_die (const char *filename)\n     }\n \n   language = DW_LANG_C;\n-  if (strncmp (language_string, \"GNU C\", 5) == 0\n+  if (startswith (language_string, \"GNU C\")\n       && ISDIGIT (language_string[5]))\n     {\n       language = DW_LANG_C89;\n@@ -24880,7 +24880,7 @@ gen_compile_unit_die (const char *filename)\n \t      language = DW_LANG_C11;\n \t}\n     }\n-  else if (strncmp (language_string, \"GNU C++\", 7) == 0)\n+  else if (startswith (language_string, \"GNU C++\"))\n     {\n       language = DW_LANG_C_plus_plus;\n       if (dwarf_version >= 5 /* || !dwarf_strict */)\n@@ -24902,7 +24902,7 @@ gen_compile_unit_die (const char *filename)\n     {\n       if (strcmp (language_string, \"GNU Ada\") == 0)\n \tlanguage = DW_LANG_Ada95;\n-      else if (strncmp (language_string, \"GNU Fortran\", 11) == 0)\n+      else if (startswith (language_string, \"GNU Fortran\"))\n \t{\n \t  language = DW_LANG_Fortran95;\n \t  if (dwarf_version >= 5 /* || !dwarf_strict */)\n@@ -24926,7 +24926,7 @@ gen_compile_unit_die (const char *filename)\n \t}\n     }\n   /* Use a degraded Fortran setting in strict DWARF2 so is_fortran works.  */\n-  else if (strncmp (language_string, \"GNU Fortran\", 11) == 0)\n+  else if (startswith (language_string, \"GNU Fortran\"))\n     language = DW_LANG_Fortran90;\n   /* Likewise for Ada.  */\n   else if (strcmp (language_string, \"GNU Ada\") == 0)"}, {"sha": "413c7a75e0cd13bcb0ac0b07572dd84fdae09305", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -2721,7 +2721,7 @@ variable_decl (int elem)\n     }\n \n   /* %FILL components may not have initializers.  */\n-  if (gfc_str_startswith (name, \"%FILL\") && gfc_match_eos () != MATCH_YES)\n+  if (startswith (name, \"%FILL\") && gfc_match_eos () != MATCH_YES)\n     {\n       gfc_error (\"%qs entity cannot have an initializer at %C\", \"%FILL\");\n       m = MATCH_ERROR;\n@@ -8221,7 +8221,7 @@ gfc_match_end (gfc_statement *st)\n     {\n     case COMP_ASSOCIATE:\n     case COMP_BLOCK:\n-      if (gfc_str_startswith (block_name, \"block@\"))\n+      if (startswith (block_name, \"block@\"))\n \tblock_name = NULL;\n       break;\n "}, {"sha": "4f5d2f8a0bbc3f7615f4af9005c7f907447e7390", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -3518,10 +3518,6 @@ bool gfc_is_compile_time_shape (gfc_array_spec *);\n \n bool gfc_ref_dimen_size (gfc_array_ref *, int dimen, mpz_t *, mpz_t *);\n \n-\n-#define gfc_str_startswith(str, pref) \\\n-\t(strncmp ((str), (pref), strlen (pref)) == 0)\n-\n /* interface.c -- FIXME: some of these should be in symbol.c */\n void gfc_free_interface (gfc_interface *);\n bool gfc_compare_derived_types (gfc_symbol *, gfc_symbol *);"}, {"sha": "321d3256eba26dbe0deacb78535872efa4ab4f66", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -5029,7 +5029,7 @@ load_omp_udrs (void)\n       mio_pool_string (&name);\n       gfc_clear_ts (&ts);\n       mio_typespec (&ts);\n-      if (gfc_str_startswith (name, \"operator \"))\n+      if (startswith (name, \"operator \"))\n \t{\n \t  const char *p = name + sizeof (\"operator \") - 1;\n \t  if (strcmp (p, \"+\") == 0)\n@@ -5477,8 +5477,8 @@ read_module (void)\n \n \t  /* Exception: Always import vtabs & vtypes.  */\n \t  if (p == NULL && name[0] == '_'\n-\t      && (gfc_str_startswith (name, \"__vtab_\")\n-\t\t  || gfc_str_startswith (name, \"__vtype_\")))\n+\t      && (startswith (name, \"__vtab_\")\n+\t\t  || startswith (name, \"__vtype_\")))\n \t    p = name;\n \n \t  /* Skip symtree nodes not in an ONLY clause, unless there\n@@ -5563,8 +5563,8 @@ read_module (void)\n \t\tsym->attr.use_rename = 1;\n \n \t      if (name[0] != '_'\n-\t\t  || (!gfc_str_startswith (name, \"__vtab_\")\n-\t\t      && !gfc_str_startswith (name, \"__vtype_\")))\n+\t\t  || (!startswith (name, \"__vtab_\")\n+\t\t      && !startswith (name, \"__vtype_\")))\n \t\tsym->attr.use_only = only_flag;\n \n \t      /* Store the symtree pointing to this symbol.  */"}, {"sha": "1723f689a57154d68154ba5e398c784dc9b77997", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -615,7 +615,7 @@ gfc_handle_runtime_check_option (const char *arg)\n \t      result = 1;\n \t      break;\n \t    }\n-\t  else if (optname[n] && pos > 3 && gfc_str_startswith (arg, \"no-\")\n+\t  else if (optname[n] && pos > 3 && startswith (arg, \"no-\")\n \t\t   && strncmp (optname[n], arg+3, pos-3) == 0)\n \t    {\n \t      gfc_option.rtcheck &= ~optmask[n];"}, {"sha": "9fe8d1ee20cea2e93032924eebcf9932b6beb192", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -1786,21 +1786,21 @@ match_arg_list_function (gfc_actual_arglist *result)\n       switch (name[0])\n \t{\n \tcase 'l':\n-\t  if (gfc_str_startswith (name, \"loc\"))\n+\t  if (startswith (name, \"loc\"))\n \t    {\n \t      result->name = \"%LOC\";\n \t      break;\n \t    }\n \t  /* FALLTHRU */\n \tcase 'r':\n-\t  if (gfc_str_startswith (name, \"ref\"))\n+\t  if (startswith (name, \"ref\"))\n \t    {\n \t      result->name = \"%REF\";\n \t      break;\n \t    }\n \t  /* FALLTHRU */\n \tcase 'v':\n-\t  if (gfc_str_startswith (name, \"val\"))\n+\t  if (startswith (name, \"val\"))\n \t    {\n \t      result->name = \"%VAL\";\n \t      break;"}, {"sha": "a1701887c8befe0edd4d89745b3adbaa11510f10", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -1941,7 +1941,7 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n      Marking this as artificial means that OpenMP will treat this as\n      predetermined shared.  */\n \n-  bool def_init = gfc_str_startswith (sym->name, \"__def_init\");\n+  bool def_init = startswith (sym->name, \"__def_init\");\n \n   if (sym->attr.vtab || def_init)\n     {"}, {"sha": "cce18d094a6fc7248d686a64c5612460184cb05f", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -6847,7 +6847,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n       /* When calling __copy for character expressions to unlimited\n \t polymorphic entities, the dst argument needs a string length.  */\n       if (sym->name[0] == '_' && e && e->ts.type == BT_CHARACTER\n-\t  && gfc_str_startswith (sym->name, \"__vtab_CHARACTER\")\n+\t  && startswith (sym->name, \"__vtab_CHARACTER\")\n \t  && arg->next && arg->next->expr\n \t  && (arg->next->expr->ts.type == BT_DERIVED\n \t      || arg->next->expr->ts.type == BT_CLASS)"}, {"sha": "4d7451479d3b7e361d79f82b8c7365d9b3a5c21b", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -10062,27 +10062,27 @@ gfc_conv_ieee_arithmetic_function (gfc_se * se, gfc_expr * expr)\n {\n   const char *name = expr->value.function.name;\n \n-  if (gfc_str_startswith (name, \"_gfortran_ieee_is_nan\"))\n+  if (startswith (name, \"_gfortran_ieee_is_nan\"))\n     conv_intrinsic_ieee_builtin (se, expr, BUILT_IN_ISNAN, 1);\n-  else if (gfc_str_startswith (name, \"_gfortran_ieee_is_finite\"))\n+  else if (startswith (name, \"_gfortran_ieee_is_finite\"))\n     conv_intrinsic_ieee_builtin (se, expr, BUILT_IN_ISFINITE, 1);\n-  else if (gfc_str_startswith (name, \"_gfortran_ieee_unordered\"))\n+  else if (startswith (name, \"_gfortran_ieee_unordered\"))\n     conv_intrinsic_ieee_builtin (se, expr, BUILT_IN_ISUNORDERED, 2);\n-  else if (gfc_str_startswith (name, \"_gfortran_ieee_is_normal\"))\n+  else if (startswith (name, \"_gfortran_ieee_is_normal\"))\n     conv_intrinsic_ieee_is_normal (se, expr);\n-  else if (gfc_str_startswith (name, \"_gfortran_ieee_is_negative\"))\n+  else if (startswith (name, \"_gfortran_ieee_is_negative\"))\n     conv_intrinsic_ieee_is_negative (se, expr);\n-  else if (gfc_str_startswith (name, \"_gfortran_ieee_copy_sign\"))\n+  else if (startswith (name, \"_gfortran_ieee_copy_sign\"))\n     conv_intrinsic_ieee_copy_sign (se, expr);\n-  else if (gfc_str_startswith (name, \"_gfortran_ieee_scalb\"))\n+  else if (startswith (name, \"_gfortran_ieee_scalb\"))\n     conv_intrinsic_ieee_scalb (se, expr);\n-  else if (gfc_str_startswith (name, \"_gfortran_ieee_next_after\"))\n+  else if (startswith (name, \"_gfortran_ieee_next_after\"))\n     conv_intrinsic_ieee_next_after (se, expr);\n-  else if (gfc_str_startswith (name, \"_gfortran_ieee_rem\"))\n+  else if (startswith (name, \"_gfortran_ieee_rem\"))\n     conv_intrinsic_ieee_rem (se, expr);\n-  else if (gfc_str_startswith (name, \"_gfortran_ieee_logb\"))\n+  else if (startswith (name, \"_gfortran_ieee_logb\"))\n     conv_intrinsic_ieee_logb_rint (se, expr, BUILT_IN_LOGB);\n-  else if (gfc_str_startswith (name, \"_gfortran_ieee_rint\"))\n+  else if (startswith (name, \"_gfortran_ieee_rint\"))\n     conv_intrinsic_ieee_logb_rint (se, expr, BUILT_IN_RINT);\n   else\n     /* It is not among the functions we translate directly.  We return"}, {"sha": "cbc7662e03d77fb838923fce595273469a508118", "filename": "gcc/gcc-ar.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fgcc-ar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fgcc-ar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc-ar.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -140,7 +140,7 @@ main (int ac, char **av)\n \n   /* Not using getopt for now.  */\n   for (i = 0; i < ac; i++)\n-      if (!strncmp (av[i], \"-B\", 2))\n+      if (startswith (av[i], \"-B\"))\n \t{\n \t  const char *arg = av[i] + 2;\n \t  const char *end;"}, {"sha": "4c1a659d5e8929ed2267694c0d62ce476a099bf5", "filename": "gcc/gcc.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -1906,7 +1906,7 @@ init_spec (void)\n        when given the proper command line arguments.  */\n     while (*p)\n       {\n-\tif (in_sep && *p == '-' && strncmp (p, \"-lgcc\", 5) == 0)\n+\tif (in_sep && *p == '-' && startswith (p, \"-lgcc\"))\n \t  {\n \t    init_gcc_specs (&obstack,\n \t\t\t    \"-lgcc_s\"\n@@ -1929,7 +1929,7 @@ init_spec (void)\n \t    p += 5;\n \t    in_sep = 0;\n \t  }\n-\telse if (in_sep && *p == 'l' && strncmp (p, \"libgcc.a%s\", 10) == 0)\n+\telse if (in_sep && *p == 'l' && startswith (p, \"libgcc.a%s\"))\n \t  {\n \t    /* Ug.  We don't know shared library extensions.  Hope that\n \t       systems that use this form don't do shared libraries.  */\n@@ -2384,7 +2384,7 @@ read_specs (const char *filename, bool main_p, bool user_p)\n \t  /* Skip '\\n'.  */\n \t  p++;\n \n-\t  if (!strncmp (p1, \"%include\", sizeof (\"%include\") - 1)\n+\t  if (startswith (p1, \"%include\")\n \t      && (p1[sizeof \"%include\" - 1] == ' '\n \t\t  || p1[sizeof \"%include\" - 1] == '\\t'))\n \t    {\n@@ -2405,7 +2405,7 @@ read_specs (const char *filename, bool main_p, bool user_p)\n \t      read_specs (new_filename ? new_filename : p1, false, user_p);\n \t      continue;\n \t    }\n-\t  else if (!strncmp (p1, \"%include_noerr\", sizeof \"%include_noerr\" - 1)\n+\t  else if (startswith (p1, \"%include_noerr\")\n \t\t   && (p1[sizeof \"%include_noerr\" - 1] == ' '\n \t\t       || p1[sizeof \"%include_noerr\" - 1] == '\\t'))\n \t    {\n@@ -2429,7 +2429,7 @@ read_specs (const char *filename, bool main_p, bool user_p)\n \t\tfnotice (stderr, \"could not find specs file %s\\n\", p1);\n \t      continue;\n \t    }\n-\t  else if (!strncmp (p1, \"%rename\", sizeof \"%rename\" - 1)\n+\t  else if (startswith (p1, \"%rename\")\n \t\t   && (p1[sizeof \"%rename\" - 1] == ' '\n \t\t       || p1[sizeof \"%rename\" - 1] == '\\t'))\n \t    {\n@@ -3502,7 +3502,7 @@ execute (void)\n \t\t&& WEXITSTATUS (status) == ICE_EXIT_CODE\n \t\t&& i == 0\n \t\t&& (p = strrchr (commands[0].argv[0], DIR_SEPARATOR))\n-\t\t&& ! strncmp (p + 1, \"cc1\", 3))\n+\t\t&& startswith (p + 1, \"cc1\"))\n \t      try_generate_repro (commands[0].argv);\n \t    if (WEXITSTATUS (status) > greatest_status)\n \t      greatest_status = WEXITSTATUS (status);\n@@ -7335,7 +7335,7 @@ check_live_switch (int switchnum, int prefix_length)\n       break;\n \n     case 'W':  case 'f':  case 'm': case 'g':\n-      if (! strncmp (name + 1, \"no-\", 3))\n+      if (startswith (name + 1, \"no-\"))\n \t{\n \t  /* We have Xno-YYY, search for XYYY.  */\n \t  for (i = switchnum + 1; i < n_switches; i++)"}, {"sha": "b8a26ecd0068209290a36781080b204032c795c9", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -4343,7 +4343,7 @@ write_attr_case (FILE *outf, class attr_desc *attr, struct attr_value *av,\n     write_attr_set (outf, attr, indent + 2, av->value, prefix, suffix,\n \t\t    known_true, -2, 0, 0);\n \n-  if (strncmp (prefix, \"return\", 6))\n+  if (!startswith (prefix, \"return\"))\n     {\n       write_indent (outf, indent + 2);\n       fprintf (outf, \"break;\\n\");\n@@ -5376,14 +5376,12 @@ main (int argc, const char **argv)\n       {\n         FILE *outf;\n \n-#define IS_ATTR_GROUP(X) (!strncmp (attr->name, X, strlen (X)))\n-\tif (IS_ATTR_GROUP (\"*internal_dfa_insn_code\"))\n+\tif (startswith(attr->name, \"*internal_dfa_insn_code\"))\n \t  outf = dfa_file;\n-\telse if (IS_ATTR_GROUP (\"*insn_default_latency\"))\n+\telse if (startswith (attr->name, \"*insn_default_latency\"))\n \t  outf = latency_file;  \n \telse\n \t  outf = attr_file;\n-#undef IS_ATTR_GROUP\n \n \tif (! attr->is_special && ! attr->is_const)\n \t  write_attr_get (outf, attr);"}, {"sha": "fd9ae14fc04b9d1a9ed33a16f038b50ecd8552e6", "filename": "gcc/gencfn-macros.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fgencfn-macros.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fgencfn-macros.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencfn-macros.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -208,7 +208,7 @@ main (int argc, char **argv)\n   for (unsigned int i = 0; builtin_names[i]; ++i)\n     {\n       const char *name = builtin_names[i];\n-      if (strncmp (name, \"BUILT_IN_\", 9) == 0)\n+      if (startswith (name, \"BUILT_IN_\"))\n \t{\n \t  const char *root = name + 9;\n \t  for (unsigned int j = 0; suffix_lists[j]; ++j)"}, {"sha": "b94e2f126ec162cdf78d5dd5fd418806022caa48", "filename": "gcc/gengtype.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -671,7 +671,7 @@ type_for_name (const char *s)\n          extern GTY(()) gcc::some_type *some_ptr;\n      where the autogenerated functions will refer to simply \"some_type\",\n      where they can be resolved into their namespace.  */\n-  if (strncmp (s, \"gcc::\", 5) == 0)\n+  if (startswith (s, \"gcc::\"))\n     s += 5;\n \n   for (p = typedefs; p != NULL; p = p->next)\n@@ -1102,7 +1102,7 @@ gen_rtx_next (void)\n       int k;\n \n       rtx_next_new[i] = -1;\n-      if (strncmp (rtx_format[i], \"uu\", 2) == 0)\n+      if (startswith (rtx_format[i], \"uu\"))\n \trtx_next_new[i] = 1;\n       else if (i == COND_EXEC || i == SET || i == EXPR_LIST || i == INSN_LIST)\n \trtx_next_new[i] = 1;\n@@ -1828,7 +1828,7 @@ get_file_langdir (const input_file *inpf)\n     return NULL;\n \n   lang_index = get_prefix_langdir_index (srcdir_relative_path);\n-  if (lang_index < 0 && strncmp (srcdir_relative_path, \"c-family\", 8) == 0)\n+  if (lang_index < 0 && startswith (srcdir_relative_path, \"c-family\"))\n     r = \"c-family\";\n   else if (lang_index >= 0)\n     r = lang_dir_names[lang_index];\n@@ -4044,7 +4044,7 @@ write_local (outf_p output_header, type_p structures)\n \t   || ((s)->gc_used == GC_MAYBE_POINTED_TO\t\t\t\\\n \t       && s->u.s.line.file != NULL)\t\t\t\t\\\n \t   || ((s)->gc_used == GC_USED\t\t\t\t\t\\\n-\t       && strncmp (s->u.s.tag, \"anonymous\", strlen (\"anonymous\"))) \\\n+\t       && !startswith (s->u.s.tag, \"anonymous\"))\t\t\\\n \t   || (s->u.s.base_class && opts_have (s->u.s.opt, \"tag\")))))\n \n "}, {"sha": "4d476720c9e215fa8de0c393b3b11473f0dea860", "filename": "gcc/genmatch.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -605,10 +605,10 @@ get_operator (const char *id, bool allow_null = false)\n       for (unsigned int i = 0; id2[i]; ++i)\n \tid2[i] = TOUPPER (id2[i]);\n     }\n-  else if (all_upper && strncmp (id, \"IFN_\", 4) == 0)\n+  else if (all_upper && startswith (id, \"IFN_\"))\n     /* Try CFN_ instead of IFN_.  */\n     id2 = ACONCAT ((\"CFN_\", id + 4, NULL));\n-  else if (all_upper && strncmp (id, \"BUILT_IN_\", 9) == 0)\n+  else if (all_upper && startswith (id, \"BUILT_IN_\"))\n     /* Try prepending CFN_.  */\n     id2 = ACONCAT ((\"CFN_\", id, NULL));\n   else\n@@ -2387,7 +2387,7 @@ get_operand_type (id_base *op, unsigned pos,\n   else if (*op == COND_EXPR\n \t   && pos == 0)\n     return \"boolean_type_node\";\n-  else if (strncmp (op->id, \"CFN_COND_\", 9) == 0)\n+  else if (startswith (op->id, \"CFN_COND_\"))\n     {\n       /* IFN_COND_* operands 1 and later by default have the same type\n \t as the result.  The type of operand 0 needs to be specified\n@@ -2460,7 +2460,7 @@ expr::gen_transform (FILE *f, int indent, const char *dest, bool gimple,\n     }\n   else if (*opr == COND_EXPR\n \t   || *opr == VEC_COND_EXPR\n-\t   || strncmp (opr->id, \"CFN_COND_\", 9) == 0)\n+\t   || startswith (opr->id, \"CFN_COND_\"))\n     {\n       /* Conditions are of the same type as their first alternative.  */\n       snprintf (optype, sizeof (optype), \"TREE_TYPE (_o%d[1])\", depth);"}, {"sha": "8e911cce2f5d4df254b107b98558af60f4fd3464", "filename": "gcc/genoutput.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -841,7 +841,7 @@ validate_optab_operands (class data *d)\n     return;\n \n   /* Miscellaneous tests.  */\n-  if (strncmp (d->name, \"cstore\", 6) == 0\n+  if (startswith (d->name, \"cstore\")\n       && d->name[strlen (d->name) - 1] == '4'\n       && d->operand[0].mode == VOIDmode)\n     {"}, {"sha": "514c045a68fa99be98109dd37ee97e9825dc919e", "filename": "gcc/go/gofrontend/runtime.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fgo%2Fgofrontend%2Fruntime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fgo%2Fgofrontend%2Fruntime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.cc?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -463,7 +463,7 @@ Runtime::name_to_code(const std::string& name)\n       // The names in the table have \"runtime.\" prefix. We may be\n       // called with a name without the prefix. Try matching\n       // without the prefix as well.\n-      if (strncmp(runtime_function_name, \"runtime.\", 8) == 0\n+      if (startswith(runtime_function_name, \"runtime.\")\n           && strcmp(runtime_function_name + 8, name.c_str()) == 0)\n         code = static_cast<Runtime::Function>(i);\n     }"}, {"sha": "52dbb806b1bfc93c0cbc6d55b717188c9cd821e9", "filename": "gcc/incpath.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fincpath.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fincpath.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fincpath.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -330,7 +330,7 @@ add_sysroot_to_chain (const char *sysroot, int chain)\n \t{\n \t  if (p->name[0] == '=')\n \t    p->name = concat (sysroot, p->name + 1, NULL);\n-\t  if (strncmp (p->name, \"$SYSROOT\", strlen (\"$SYSROOT\")) == 0)\n+\t  if (startswith (p->name, \"$SYSROOT\"))\n \t    p->name = concat (sysroot, p->name + strlen (\"$SYSROOT\"), NULL);\n \t}\n     }"}, {"sha": "12c99888e6c849c0666b19c2bde7d1ab71c7e354", "filename": "gcc/langhooks.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -901,7 +901,7 @@ lhd_finalize_early_debug (void)\n bool\n lang_GNU_C (void)\n {\n-  return (strncmp (lang_hooks.name, \"GNU C\", 5) == 0\n+  return (startswith (lang_hooks.name, \"GNU C\")\n \t  && (lang_hooks.name[5] == '\\0' || ISDIGIT (lang_hooks.name[5])));\n }\n \n@@ -910,15 +910,15 @@ lang_GNU_C (void)\n bool\n lang_GNU_CXX (void)\n {\n-  return strncmp (lang_hooks.name, \"GNU C++\", 7) == 0;\n+  return startswith (lang_hooks.name, \"GNU C++\");\n }\n \n /* Returns true if the current lang_hooks represents the GNU Fortran frontend.  */\n \n bool\n lang_GNU_Fortran (void)\n {\n-  return strncmp (lang_hooks.name, \"GNU Fortran\", 11) == 0;\n+  return startswith (lang_hooks.name, \"GNU Fortran\");\n }\n \n /* Returns true if the current lang_hooks represents the GNU Objective-C\n@@ -927,5 +927,5 @@ lang_GNU_Fortran (void)\n bool\n lang_GNU_OBJC (void)\n {\n-  return strncmp (lang_hooks.name, \"GNU Objective-C\", 15) == 0;\n+  return startswith (lang_hooks.name, \"GNU Objective-C\");\n }"}, {"sha": "d6be7f016bf45bcfe4c556beb60f0db5d546e903", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -1457,8 +1457,7 @@ run_gcc (unsigned argc, char *argv[])\n       int consumed;\n       char *filename = argv[i];\n \n-      if (strncmp (argv[i], \"-foffload-objects=\",\n-\t\t   sizeof (\"-foffload-objects=\") - 1) == 0)\n+      if (startswith (argv[i], \"-foffload-objects=\"))\n \t{\n \t  have_offload = true;\n \t  offload_objects_file_name"}, {"sha": "796256d437e8820545dbf7bbb4b32b878d1164e3", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -10275,7 +10275,7 @@ objc_string_ref_type_p (tree strp)\n   return (tmv\n \t  && TREE_CODE (tmv) == IDENTIFIER_NODE\n \t  && IDENTIFIER_POINTER (tmv)\n-\t  && !strncmp (IDENTIFIER_POINTER (tmv), \"NSString\", 8));\n+\t  && startswith (IDENTIFIER_POINTER (tmv), \"NSString\"));\n }\n \n /* At present the behavior of this is undefined and it does nothing.  */"}, {"sha": "7ad920a2c35cb4875003b12aed4d2039e25a3f12", "filename": "gcc/objc/objc-encoding.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fobjc%2Fobjc-encoding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fobjc%2Fobjc-encoding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-encoding.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -733,7 +733,7 @@ encode_type (tree type, int curtype, int format)\n \t  char *enc = (char *) obstack_base (&util_obstack) + curtype;\n \n \t  /* Rewrite \"in const\" from \"nr\" to \"rn\".  */\n-\t  if (curtype >= 1 && !strncmp (enc - 1, \"nr\", 2))\n+\t  if (curtype >= 1 && startswith (enc - 1, \"nr\"))\n \t    memcpy (enc - 1, \"rn\", 2);\n \t}\n     }"}, {"sha": "3cfcd0b1a57fe23093c441c2ca3d2ab7f032aa6b", "filename": "gcc/objc/objc-next-runtime-abi-02.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -2209,7 +2209,7 @@ has_load_impl (tree clsmeth)\n     {\n       tree id = METHOD_SEL_NAME (clsmeth);\n       if (IDENTIFIER_LENGTH (id) == 4\n-\t  && strncmp (IDENTIFIER_POINTER (id), \"load\", 4) == 0)\n+\t  && startswith (IDENTIFIER_POINTER (id), \"load\"))\n         return true;\n       clsmeth = DECL_CHAIN (clsmeth);\n     }"}, {"sha": "a1bb9d8d25dc4c3553cf7eeb144550e4d63c7d60", "filename": "gcc/omp-general.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fomp-general.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fomp-general.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -968,7 +968,7 @@ omp_max_simt_vf (void)\n   if (ENABLE_OFFLOADING)\n     for (const char *c = getenv (\"OFFLOAD_TARGET_NAMES\"); c;)\n       {\n-\tif (!strncmp (c, \"nvptx\", strlen (\"nvptx\")))\n+\tif (startswith (c, \"nvptx\"))\n \t  return 32;\n \telse if ((c = strchr (c, ':')))\n \t  c++;"}, {"sha": "8b313626a617d0b9f9b6e4d1e2859d01974e0b53", "filename": "gcc/omp-low.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -3786,7 +3786,7 @@ omp_runtime_api_call (const_tree fndecl)\n     return false;\n \n   const char *name = IDENTIFIER_POINTER (declname);\n-  if (strncmp (name, \"omp_\", 4) != 0)\n+  if (!startswith (name, \"omp_\"))\n     return false;\n \n   static const char *omp_runtime_apis[] ="}, {"sha": "9d1914ff2ffeb089eb3d3062e78a65cff13d68a7", "filename": "gcc/opts-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -1805,7 +1805,7 @@ parse_options_from_collect_gcc_options (const char *collect_gcc_options,\n \t      if (argv_storage[j] == '\\0')\n \t\tfatal_error (input_location,\n \t\t\t     \"malformed %<COLLECT_GCC_OPTIONS%>\");\n-\t      else if (strncmp (&argv_storage[j], \"'\\\\''\", 4) == 0)\n+\t      else if (startswith (&argv_storage[j], \"'\\\\''\"))\n \t\t{\n \t\t  argv_storage[k++] = '\\'';\n \t\t  j += 4;"}, {"sha": "ca580d3f71ebec22d1c66722a2fcfd973bdb84ad", "filename": "gcc/read-rtl-function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fread-rtl-function.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fread-rtl-function.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl-function.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -1082,7 +1082,7 @@ function_reader::read_rtx_operand_r (rtx x)\n \t \"orig:%i\", ORIGINAL_REGNO (rtx).\n \t Consume it, we don't set ORIGINAL_REGNO, since we can\n \t get that from the 2nd copy later.  */\n-      if (strncmp (desc, \"orig:\", 5) == 0)\n+      if (startswith (desc, \"orig:\"))\n \t{\n \t  expect_original_regno = true;\n \t  desc_start += 5;"}, {"sha": "555cf44c142ca1064ba046b780792bcf77b98b2f", "filename": "gcc/real.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -1972,17 +1972,17 @@ real_from_string (REAL_VALUE_TYPE *r, const char *str)\n   else if (*str == '+')\n     str++;\n \n-  if (!strncmp (str, \"QNaN\", 4))\n+  if (startswith (str, \"QNaN\"))\n     {\n       get_canonical_qnan (r, sign);\n       return 0;\n     }\n-  else if (!strncmp (str, \"SNaN\", 4))\n+  else if (startswith (str, \"SNaN\"))\n     {\n       get_canonical_snan (r, sign);\n       return 0;\n     }\n-  else if (!strncmp (str, \"Inf\", 3))\n+  else if (startswith (str, \"Inf\"))\n     {\n       get_inf (r, sign);\n       return 0;"}, {"sha": "8f1cde0cc193b7eb3180814bfed7d1dc3fd0f401", "filename": "gcc/selftest.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fselftest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fselftest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -150,8 +150,7 @@ assert_str_startswith (const location &loc,\n \t\t    \"ASSERT_STR_STARTSWITH (%s, %s) str=\\\"%s\\\" prefix=NULL\",\n \t\t    desc_str, desc_prefix, val_str);\n \n-  const char *test = strstr (val_str, val_prefix);\n-  if (test == val_str)\n+  if (startswith (val_str, val_prefix))\n     pass (loc, \"ASSERT_STR_STARTSWITH\");\n   else\n     fail_formatted"}, {"sha": "3c856266cc299259f98016f0e1d4ae7de24ece8a", "filename": "gcc/system.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -1296,4 +1296,12 @@ void gcc_stablesort (void *, size_t, size_t,\n #define NULL nullptr\n #endif\n \n+/* Return true if STR string starts with PREFIX.  */\n+\n+static inline bool\n+startswith (const char *str, const char *prefix)\n+{\n+  return strncmp (str, prefix, strlen (prefix)) == 0;\n+}\n+\n #endif /* ! GCC_SYSTEM_H */"}, {"sha": "8fc122ba9fedf714c26afa53b0b595f542f4e016", "filename": "gcc/timevar.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Ftimevar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Ftimevar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -600,7 +600,7 @@ timer::validate_phases (FILE *fp) const\n       if (!tv->used)\n \tcontinue;\n \n-      if (strncmp (tv->name, phase_prefix, sizeof phase_prefix - 1) == 0)\n+      if (startswith (tv->name, phase_prefix))\n \t{\n \t  phase_user += tv->elapsed.user;\n \t  phase_sys += tv->elapsed.sys;"}, {"sha": "01eda553a65f95f2b69635d1bd89fe4bfd06082f", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -8583,7 +8583,7 @@ get_file_function_name (const char *type)\n      We also assign sub_I and sub_D sufixes to constructors called from\n      the global static constructors.  These are always local.  */\n   else if (((type[0] == 'I' || type[0] == 'D') && targetm.have_ctors_dtors)\n-\t   || (strncmp (type, \"sub_\", 4) == 0\n+\t   || (startswith (type, \"sub_\")\n \t       && (type[4] == 'I' || type[4] == 'D')))\n     {\n       const char *file = main_input_filename;"}, {"sha": "7ee93436378af4323c423764952c8e83f7a5019f", "filename": "gcc/ubsan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -1783,7 +1783,7 @@ ubsan_use_new_style_p (location_t loc)\n     return false;\n \n   expanded_location xloc = expand_location (loc);\n-  if (xloc.file == NULL || strncmp (xloc.file, \"\\1\", 2) == 0\n+  if (xloc.file == NULL || startswith (xloc.file, \"\\1\")\n       || xloc.file[0] == '\\0' || xloc.file[0] == '\\xff'\n       || xloc.file[1] == '\\xff')\n     return false;"}, {"sha": "53cf6dea3f367bdd182bc9eb40970991cfd9b668", "filename": "gcc/varasm.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=6ba3079dce89d9b63bf5dbd5e320ea2bf96f196b", "patch": "@@ -792,7 +792,7 @@ default_function_rodata_section (tree decl, bool relocatable)\n       /* For .gnu.linkonce.t.foo we want to use .gnu.linkonce.r.foo or\n \t .gnu.linkonce.d.rel.ro.local.foo if the jump table is relocatable.  */\n       else if (DECL_COMDAT_GROUP (decl)\n-\t       && strncmp (name, \".gnu.linkonce.t.\", 16) == 0)\n+\t       && startswith (name, \".gnu.linkonce.t.\"))\n \t{\n \t  size_t len;\n \t  char *rname;\n@@ -817,7 +817,7 @@ default_function_rodata_section (tree decl, bool relocatable)\n \t}\n       /* For .text.foo we want to use .rodata.foo.  */\n       else if (flag_function_sections && flag_data_sections\n-\t       && strncmp (name, \".text.\", 6) == 0)\n+\t       && startswith (name, \".text.\"))\n \t{\n \t  size_t len = strlen (name) + 1;\n \t  char *rname = (char *) alloca (len + strlen (sname) - 5);\n@@ -2509,7 +2509,7 @@ incorporeal_function_p (tree decl)\n       name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n       /* Atomic or sync builtins which have survived this far will be\n \t resolved externally and therefore are not incorporeal.  */\n-      if (strncmp (name, \"__builtin_\", 10) == 0)\n+      if (startswith (name, \"__builtin_\"))\n \treturn true;\n     }\n   return false;\n@@ -6737,22 +6737,22 @@ default_section_type_flags (tree decl, const char *name, int reloc)\n     flags |= SECTION_TLS | SECTION_WRITE;\n \n   if (strcmp (name, \".bss\") == 0\n-      || strncmp (name, \".bss.\", 5) == 0\n-      || strncmp (name, \".gnu.linkonce.b.\", 16) == 0\n+      || startswith (name, \".bss.\")\n+      || startswith (name, \".gnu.linkonce.b.\")\n       || strcmp (name, \".persistent.bss\") == 0\n       || strcmp (name, \".sbss\") == 0\n-      || strncmp (name, \".sbss.\", 6) == 0\n-      || strncmp (name, \".gnu.linkonce.sb.\", 17) == 0)\n+      || startswith (name, \".sbss.\")\n+      || startswith (name, \".gnu.linkonce.sb.\"))\n     flags |= SECTION_BSS;\n \n   if (strcmp (name, \".tdata\") == 0\n-      || strncmp (name, \".tdata.\", 7) == 0\n-      || strncmp (name, \".gnu.linkonce.td.\", 17) == 0)\n+      || startswith (name, \".tdata.\")\n+      || startswith (name, \".gnu.linkonce.td.\"))\n     flags |= SECTION_TLS;\n \n   if (strcmp (name, \".tbss\") == 0\n-      || strncmp (name, \".tbss.\", 6) == 0\n-      || strncmp (name, \".gnu.linkonce.tb.\", 17) == 0)\n+      || startswith (name, \".tbss.\")\n+      || startswith (name, \".gnu.linkonce.tb.\"))\n     flags |= SECTION_TLS | SECTION_BSS;\n \n   if (strcmp (name, \".noinit\") == 0)"}]}