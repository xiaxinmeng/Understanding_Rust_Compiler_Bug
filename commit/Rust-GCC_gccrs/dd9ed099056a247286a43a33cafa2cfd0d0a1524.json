{"sha": "dd9ed099056a247286a43a33cafa2cfd0d0a1524", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ5ZWQwOTkwNTZhMjQ3Mjg2YTQzYTMzY2FmYTJjZmQwZDBhMTUyNA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2019-09-24T19:28:08Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2019-09-24T19:28:08Z"}, "message": "[Darwin, PPC, Mode Iterators 1/n] Use mode iterators in picbase patterns.\n\nThis switches the picbase load and reload patterns to use the 'P' mode\niterator instead of writing an SI and DI pattern for each.\n\ngcc/ChangeLog:\n\n2019-09-24  Iain Sandoe  <iain@sandoe.co.uk>\n\n\t* config/rs6000/rs6000.md (load_macho_picbase_<mode>): New, using\n\tthe 'P' mode iterator, replacing the (removed) SI and DI variants.\n\t(reload_macho_picbase_<mode>): Likewise.\n\nFrom-SVN: r276107", "tree": {"sha": "cb5cb4c01cb6091b5b10f6478a32950b8249cfff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb5cb4c01cb6091b5b10f6478a32950b8249cfff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd9ed099056a247286a43a33cafa2cfd0d0a1524", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd9ed099056a247286a43a33cafa2cfd0d0a1524", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd9ed099056a247286a43a33cafa2cfd0d0a1524", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd9ed099056a247286a43a33cafa2cfd0d0a1524/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42eb48017d5cf2a7c76b73cb829871e67635536a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42eb48017d5cf2a7c76b73cb829871e67635536a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42eb48017d5cf2a7c76b73cb829871e67635536a"}], "stats": {"total": 61, "additions": 14, "deletions": 47}, "files": [{"sha": "6450f18b53f6e9b798b035b53a784ebd0b1dd87e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9ed099056a247286a43a33cafa2cfd0d0a1524/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9ed099056a247286a43a33cafa2cfd0d0a1524/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd9ed099056a247286a43a33cafa2cfd0d0a1524", "patch": "@@ -1,3 +1,9 @@\n+2019-09-24  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/rs6000/rs6000.md (load_macho_picbase_<mode>): New, using\n+\tthe 'P' mode iterator, replacing the (removed) SI and DI variants.\n+\t(reload_macho_picbase_<mode>): Likewise.\n+\n 2019-09-24  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config/rs6000/rs6000.md: Move darwin.md include until"}, {"sha": "4a284211afba7f7672c2f35b55eea7b7885439af", "filename": "gcc/config/rs6000/darwin.md", "status": "modified", "additions": 8, "deletions": 47, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9ed099056a247286a43a33cafa2cfd0d0a1524/gcc%2Fconfig%2Frs6000%2Fdarwin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9ed099056a247286a43a33cafa2cfd0d0a1524/gcc%2Fconfig%2Frs6000%2Fdarwin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.md?ref=dd9ed099056a247286a43a33cafa2cfd0d0a1524", "patch": "@@ -217,7 +217,7 @@ You should have received a copy of the GNU General Public License\n   \"\")\n \n (define_expand \"load_macho_picbase\"\n-  [(set (reg:SI LR_REGNO)\n+  [(set (reg LR_REGNO)\n         (unspec [(match_operand 0 \"\")]\n                    UNSPEC_LD_MPIC))]\n   \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic\"\n@@ -230,9 +230,9 @@ You should have received a copy of the GNU General Public License\n   DONE;\n })\n \n-(define_insn \"load_macho_picbase_si\"\n-  [(set (reg:SI LR_REGNO)\n-\t(unspec:SI [(match_operand:SI 0 \"immediate_operand\" \"s\")\n+(define_insn \"load_macho_picbase_<mode>\"\n+  [(set (reg:P LR_REGNO)\n+\t(unspec:P [(match_operand:P 0 \"immediate_operand\" \"s\")\n \t\t    (pc)] UNSPEC_LD_MPIC))]\n   \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic\"\n {\n@@ -246,22 +246,6 @@ You should have received a copy of the GNU General Public License\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"cannot_copy\" \"yes\")])\n \n-(define_insn \"load_macho_picbase_di\"\n-  [(set (reg:DI LR_REGNO)\n-\t(unspec:DI [(match_operand:DI 0 \"immediate_operand\" \"s\")\n-\t\t    (pc)] UNSPEC_LD_MPIC))]\n-  \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic && TARGET_64BIT\"\n-{\n-#if TARGET_MACHO\n-  machopic_should_output_picbase_label (); /* Update for new func.  */\n-#else\n-  gcc_unreachable ();\n-#endif\n-  return \"bcl 20,31,%0\\n%0:\";\n-}\n-  [(set_attr \"type\" \"branch\")\n-   (set_attr \"cannot_copy\" \"yes\")])\n-\n (define_expand \"macho_correct_pic\"\n   [(set (match_operand 0 \"\")\n \t(plus (match_operand 1 \"\")\n@@ -301,7 +285,7 @@ You should have received a copy of the GNU General Public License\n   [(set_attr \"length\" \"8\")])\n \n (define_expand \"reload_macho_picbase\"\n-  [(set (reg:SI LR_REGNO)\n+  [(set (reg LR_REGNO)\n         (unspec [(match_operand 0 \"\")]\n                    UNSPEC_RELD_MPIC))]\n   \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic\"\n@@ -314,9 +298,9 @@ You should have received a copy of the GNU General Public License\n   DONE;\n })\n \n-(define_insn \"reload_macho_picbase_si\"\n-  [(set (reg:SI LR_REGNO)\n-        (unspec:SI [(match_operand:SI 0 \"immediate_operand\" \"s\")\n+(define_insn \"reload_macho_picbase_<mode>\"\n+  [(set (reg:P LR_REGNO)\n+        (unspec:P [(match_operand:P 0 \"immediate_operand\" \"s\")\n \t\t    (pc)] UNSPEC_RELD_MPIC))]\n   \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic\"\n {\n@@ -337,29 +321,6 @@ You should have received a copy of the GNU General Public License\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"cannot_copy\" \"yes\")])\n \n-(define_insn \"reload_macho_picbase_di\"\n-  [(set (reg:DI LR_REGNO)\n-\t(unspec:DI [(match_operand:DI 0 \"immediate_operand\" \"s\")\n-\t\t    (pc)] UNSPEC_RELD_MPIC))]\n-  \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic && TARGET_64BIT\"\n-{\n-#if TARGET_MACHO\n-  if (machopic_should_output_picbase_label ())\n-    {\n-      static char tmp[64];\n-      const char *cnam = machopic_get_function_picbase ();\n-      snprintf (tmp, 64, \"bcl 20,31,%s\\n%s:\\n%%0:\", cnam, cnam);\n-      return tmp;\n-    }\n-  else\n-#else\n-  gcc_unreachable ();\n-#endif\n-    return \"bcl 20,31,%0\\n%0:\";\n-}\n-  [(set_attr \"type\" \"branch\")\n-   (set_attr \"cannot_copy\" \"yes\")])\n-\n ;; We need to restore the PIC register, at the site of nonlocal label.\n \n (define_insn_and_split \"nonlocal_goto_receiver\""}]}