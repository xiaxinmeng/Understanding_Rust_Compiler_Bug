{"sha": "6d099a76a0f6a040a3e678f2bce7fc69cc3257d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQwOTlhNzZhMGY2YTA0MGEzZTY3OGYyYmNlN2ZjNjljYzMyNTdkOA==", "commit": {"author": {"name": "Jiufu Guo", "email": "guojiufu@linux.ibm.com", "date": "2019-10-28T05:23:24Z"}, "committer": {"name": "Jiufu Guo", "email": "guojiufu@gcc.gnu.org", "date": "2019-10-28T05:23:24Z"}, "message": "rs6000: Enable limited unrolling at -O2\n\nIn PR88760, there are a few disscussion about improve or tune unroller for\ntargets. And we would agree to enable unroller for small loops at O2 first.\nAnd we could see performance improvement(~10%) for below code:\n```\n  subroutine foo (i, i1, block)\n    integer :: i, i1\n    integer :: block(9, 9, 9)\n    block(i:9,1,i1) = block(i:9,1,i1) - 10\n  end subroutine foo\n\n```\nThis kind of code occurs a few times in exchange2 benchmark.\n\nSimilar C code:\n```\n  for (i = 0; i < n; i++)\n    arr[i] = arr[i] - 10;\n```\n\nOn powerpcle, for O2 , enable -funroll-loops and limit\nPARAM_MAX_UNROLL_TIMES=2 and PARAM_MAX_UNROLLED_INSNS=20, we can see >2%\noverall improvement for SPEC2017.\n\nThis patch is only for rs6000 in which we see visible performance improvement.\n\ngcc/\n2019-10-25  Jiufu Guo  <guojiufu@linux.ibm.com>\t    \n\n\tPR tree-optimization/88760\n\t* config/rs6000/rs6000-common.c (rs6000_option_optimization_table):\n\tEnable -funroll-loops for -O2 and above.\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Set\n\tPARAM_MAX_UNROLL_TIMES to 2 and PARAM_MAX_UNROLLED_INSNS to 20, and\n\tdo not turn on web and rngreg implicitly, if the unroller is not\n\texplicitly enabled.\n\t\ngcc.testsuite/\n2019-10-25  Jiufu Guo  <guojiufu@linux.ibm.com>\n\n\tPR tree-optimization/88760\n\t* gcc.target/powerpc/small-loop-unroll.c: New test.\n\t* c-c++-common/tsan/thread_leak2.c: Update test.\n\t* gcc.dg/pr59643.c: Update test.\n\t* gcc.target/powerpc/loop_align.c: Update test.\n\t* gcc.target/powerpc/ppc-fma-1.c: Update test.\n\t* gcc.target/powerpc/ppc-fma-2.c: Update test.\n\t* gcc.target/powerpc/ppc-fma-3.c: Update test.\n\t* gcc.target/powerpc/ppc-fma-4.c: Update test.\n\t* gcc.target/powerpc/pr78604.c: Update test.\n\nFrom-SVN: r277501", "tree": {"sha": "3f86230269de0eff1807c5bee4129696db86647f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f86230269de0eff1807c5bee4129696db86647f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8/comments", "author": null, "committer": null, "parents": [{"sha": "cf20d00ca1ae5a0da9b329896d7b51e55381bdd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf20d00ca1ae5a0da9b329896d7b51e55381bdd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf20d00ca1ae5a0da9b329896d7b51e55381bdd7"}], "stats": {"total": 76, "additions": 70, "deletions": 6}, "files": [{"sha": "9511081cb581ee1d7b4fa6bbd2e35ab84727dfed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d099a76a0f6a040a3e678f2bce7fc69cc3257d8", "patch": "@@ -1,3 +1,13 @@\n+2019-10-25  Jiufu Guo  <guojiufu@linux.ibm.com>\t    \n+\n+\tPR tree-optimization/88760\n+\t* config/rs6000/rs6000-common.c (rs6000_option_optimization_table):\n+\tEnable -funroll-loops for -O2 and above.\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Set\n+\tPARAM_MAX_UNROLL_TIMES to 2 and PARAM_MAX_UNROLLED_INSNS to 20, and\n+\tdo not turn on web and rngreg implicitly, if the unroller is not\n+\texplicitly enabled.\n+\n 2019-10-27  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-prop.c (ipa_propagate_indirect_call_infos): Do not remove"}, {"sha": "b9471964a66a8ca3bf0d2a5598c1b40f75995340", "filename": "gcc/common/config/rs6000/rs6000-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c?ref=6d099a76a0f6a040a3e678f2bce7fc69cc3257d8", "patch": "@@ -35,6 +35,7 @@ static const struct default_options rs6000_option_optimization_table[] =\n     { OPT_LEVELS_ALL, OPT_fsplit_wide_types_early, NULL, 1 },\n     /* Enable -fsched-pressure for first pass instruction scheduling.  */\n     { OPT_LEVELS_1_PLUS, OPT_fsched_pressure, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_funroll_loops, NULL, 1 },\n     { OPT_LEVELS_NONE, 0, NULL, 0 }\n   };\n "}, {"sha": "9ed51515b2e15f6265780af4ee9878b0297549bd", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=6d099a76a0f6a040a3e678f2bce7fc69cc3257d8", "patch": "@@ -4540,6 +4540,26 @@ rs6000_option_override_internal (bool global_init_p)\n \t\t\t     global_options.x_param_values,\n \t\t\t     global_options_set.x_param_values);\n \n+      /* unroll very small loops 2 time if no -funroll-loops.  */\n+      if (!global_options_set.x_flag_unroll_loops\n+\t  && !global_options_set.x_flag_unroll_all_loops)\n+\t{\n+\t  maybe_set_param_value (PARAM_MAX_UNROLL_TIMES, 2,\n+\t\t\t\t global_options.x_param_values,\n+\t\t\t\t global_options_set.x_param_values);\n+\n+\t  maybe_set_param_value (PARAM_MAX_UNROLLED_INSNS, 20,\n+\t\t\t\t global_options.x_param_values,\n+\t\t\t\t global_options_set.x_param_values);\n+\n+\t  /* If fweb or frename-registers are not specificed in command-line,\n+\t     do not turn them on implicitly.  */\n+\t  if (!global_options_set.x_flag_web)\n+\t    global_options.x_flag_web = 0;\n+\t  if (!global_options_set.x_flag_rename_registers)\n+\t    global_options.x_flag_rename_registers = 0;\n+\t}\n+\n       /* If using typedef char *va_list, signal that\n \t __builtin_va_start (&ap, 0) can be optimized to\n \t ap = __builtin_next_arg (0).  */"}, {"sha": "f9f5bb7c1c6596635b697f94542800ccbea05713", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d099a76a0f6a040a3e678f2bce7fc69cc3257d8", "patch": "@@ -1,3 +1,16 @@\n+2019-10-25  Jiufu Guo  <guojiufu@linux.ibm.com>\n+\n+\tPR tree-optimization/88760\n+\t* gcc.target/powerpc/small-loop-unroll.c: New test.\n+\t* c-c++-common/tsan/thread_leak2.c: Update test.\n+\t* gcc.dg/pr59643.c: Update test.\n+\t* gcc.target/powerpc/loop_align.c: Update test.\n+\t* gcc.target/powerpc/ppc-fma-1.c: Update test.\n+\t* gcc.target/powerpc/ppc-fma-2.c: Update test.\n+\t* gcc.target/powerpc/ppc-fma-3.c: Update test.\n+\t* gcc.target/powerpc/ppc-fma-4.c: Update test.\n+\t* gcc.target/powerpc/pr78604.c: Update test.\n+\n 2019-10-27  Andreas Tobler  <andreast@gcc.gnu.org>\n \n \t* gcc.c-torture/execute/fprintf-2.c: Silence a Free/NetBSD libc warning."}, {"sha": "082f2aa7c9b97c2f0a974cfc889d95564fd7ccfb", "filename": "gcc/testsuite/c-c++-common/tsan/thread_leak2.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fthread_leak2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fthread_leak2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fthread_leak2.c?ref=6d099a76a0f6a040a3e678f2bce7fc69cc3257d8", "patch": "@@ -1,5 +1,9 @@\n /* { dg-shouldfail \"tsan\" } */\n \n+/* { dg-additional-options \"-fno-unroll-loops\" { target { powerpc*-*-* } } } */\n+/* -fno-unroll-loops help to avoid ThreadSanitizer reporting multi-times\n+   message for pthread_create at difference calling addresses.  */\n+\n #include <pthread.h>\n #include <unistd.h>\n "}, {"sha": "4446f6e6139b2c3c240226073e551c360ed359e3", "filename": "gcc/testsuite/gcc.dg/pr59643.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59643.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59643.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59643.c?ref=6d099a76a0f6a040a3e678f2bce7fc69cc3257d8", "patch": "@@ -1,6 +1,9 @@\n /* PR tree-optimization/59643 */\n /* { dg-do compile } */\n /* { dg-options \"-O3 -fdump-tree-pcom-details\" } */\n+/* { dg-additional-options \"--param max-unrolled-insns=400\" { target { powerpc*-*-* } } } */\n+/* Implicit threashold of max-unrolled-insn on ppc at O3 is too small for the\n+   loop of this case.  */\n \n void\n foo (double *a, double *b, double *c, double d, double e, int n)"}, {"sha": "ef67f77efed6e2bbcaee70b0951d1c53aedf4dd0", "filename": "gcc/testsuite/gcc.target/powerpc/loop_align.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Floop_align.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Floop_align.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Floop_align.c?ref=6d099a76a0f6a040a3e678f2bce7fc69cc3257d8", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile { target { powerpc*-*-* } } } */\n /* { dg-skip-if \"\" { powerpc*-*-darwin* powerpc-ibm-aix* } } */\n-/* { dg-options \"-O2 -mdejagnu-cpu=power7 -falign-functions=16\" } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power7 -falign-functions=16 -fno-unroll-loops\" } */\n /* { dg-final { scan-assembler \".p2align 5\" } } */\n \n void f(double *a, double *b, double *c, unsigned long n) {"}, {"sha": "2a5b92cf9386f6fa5e4b375ebb2dfa2cdc4c5fec", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-fma-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fma-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fma-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fma-1.c?ref=6d099a76a0f6a040a3e678f2bce7fc69cc3257d8", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile { target { powerpc*-*-* } } } */\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_vsx_ok } */\n-/* { dg-options \"-O3 -ftree-vectorize -mdejagnu-cpu=power7 -ffast-math\" } */\n+/* { dg-options \"-O3 -ftree-vectorize -mdejagnu-cpu=power7 -ffast-math -fno-unroll-loops\" } */\n /* { dg-final { scan-assembler-times \"xvmadd\" 4 } } */\n /* { dg-final { scan-assembler-times \"xsmadd\\|fmadd\\ \" 2 } } */\n /* { dg-final { scan-assembler-times \"fmadds\" 2 } } */"}, {"sha": "bf2c67fb7f43e84c13cedd930c5766ba8074c585", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-fma-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fma-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fma-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fma-2.c?ref=6d099a76a0f6a040a3e678f2bce7fc69cc3257d8", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile { target { powerpc*-*-* } } } */\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_vsx_ok } */\n-/* { dg-options \"-O3 -ftree-vectorize -mdejagnu-cpu=power7 -ffast-math -ffp-contract=off\" } */\n+/* { dg-options \"-O3 -ftree-vectorize -mdejagnu-cpu=power7 -ffast-math -ffp-contract=off -fno-unroll-loops\" } */\n /* { dg-final { scan-assembler-times \"xvmadd\" 2 } } */\n /* { dg-final { scan-assembler-times \"xsmadd\\|fmadd\\ \" 1 } } */\n /* { dg-final { scan-assembler-times \"fmadds\" 1 } } */"}, {"sha": "8608116e2ee23e3fd1a66215a35821b2591a958e", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-fma-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fma-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fma-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fma-3.c?ref=6d099a76a0f6a040a3e678f2bce7fc69cc3257d8", "patch": "@@ -2,7 +2,7 @@\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_altivec_ok } */\n /* { dg-require-effective-target powerpc_fprs } */\n-/* { dg-options \"-O3 -ftree-vectorize -mdejagnu-cpu=power6 -maltivec -ffast-math\" } */\n+/* { dg-options \"-O3 -ftree-vectorize -mdejagnu-cpu=power6 -maltivec -ffast-math -fno-unroll-loops\" } */\n /* { dg-final { scan-assembler-times \"vmaddfp\" 2 } } */\n /* { dg-final { scan-assembler-times \"fmadd \" 2 } } */\n /* { dg-final { scan-assembler-times \"fmadds\" 2 } } */"}, {"sha": "291c2eec4d4433349ed1849d9aeddc67b7e722e1", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-fma-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fma-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fma-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fma-4.c?ref=6d099a76a0f6a040a3e678f2bce7fc69cc3257d8", "patch": "@@ -2,7 +2,7 @@\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_altivec_ok } */\n /* { dg-require-effective-target powerpc_fprs } */\n-/* { dg-options \"-O3 -ftree-vectorize -mdejagnu-cpu=power6 -maltivec -ffast-math -ffp-contract=off\" } */\n+/* { dg-options \"-O3 -ftree-vectorize -mdejagnu-cpu=power6 -maltivec -ffast-math -ffp-contract=off -fno-unroll-loops\" } */\n /* { dg-final { scan-assembler-times \"vmaddfp\" 1 } } */\n /* { dg-final { scan-assembler-times \"fmadd \" 1 } } */\n /* { dg-final { scan-assembler-times \"fmadds\" 1 } } */"}, {"sha": "35bfdb35412e22a5d21b5cea5a9879abaec6454f", "filename": "gcc/testsuite/gcc.target/powerpc/pr78604.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78604.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78604.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78604.c?ref=6d099a76a0f6a040a3e678f2bce7fc69cc3257d8", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile { target { powerpc*-*-* } } } */\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n-/* { dg-options \"-mdejagnu-cpu=power8 -O2 -ftree-vectorize -fdump-tree-vect-details\" } */\n+/* { dg-options \"-mdejagnu-cpu=power8 -O2 -ftree-vectorize -fdump-tree-vect-details -fno-unroll-loops\" } */\n \n #ifndef SIZE\n #define SIZE 1024"}, {"sha": "fec5ae9a7cb79604ef977fc8a87d0f45669113f6", "filename": "gcc/testsuite/gcc.target/powerpc/small-loop-unroll.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsmall-loop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d099a76a0f6a040a3e678f2bce7fc69cc3257d8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsmall-loop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsmall-loop-unroll.c?ref=6d099a76a0f6a040a3e678f2bce7fc69cc3257d8", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-rtl-loop2_unroll\" } */\n+\n+void __attribute__ ((noinline)) foo(int n, int *arr)\n+{\n+  int i;\n+  for (i = 0; i < n; i++)\n+    arr[i] = arr[i] - 10;\n+}\n+/* { dg-final { scan-rtl-dump-times \"Unrolled loop 1 times\" 1 \"loop2_unroll\" } } */\n+/* { dg-final { scan-assembler-times {\\mlwz\\M} 3 } } */\n+/* { dg-final { scan-assembler-times {\\mstw\\M} 3 } } */\n+"}]}