{"sha": "fb2fed03b680e2421f24ed33e3ab7dc8f03797cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIyZmVkMDNiNjgwZTI0MjFmMjRlZDMzZTNhYjdkYzhmMDM3OTdjYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-08-31T12:52:07Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-08-31T12:52:07Z"}, "message": "postreload-gcse.c (eliminate_partially_redundant_loads): Use optimize_bb_for_size_p.\n\n\t* postreload-gcse.c (eliminate_partially_redundant_loads): Use optimize_bb_for_size_p.\n\t* predict.c (maybe_hot_frequency_p): Make inline.\n\t(maybe_hot_count_p): Break out from ...\n\t(maybe_hot_bb_p): ... this one.\n\t(maybe_hot_edge_p): Simplify.\n\t* basic-block.h (probably_cold_bb_p): Remove.\n\nFrom-SVN: r139830", "tree": {"sha": "ec47e89df6f23c1dc88cad878c8a9f76d8738fa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec47e89df6f23c1dc88cad878c8a9f76d8738fa1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb2fed03b680e2421f24ed33e3ab7dc8f03797cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb2fed03b680e2421f24ed33e3ab7dc8f03797cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb2fed03b680e2421f24ed33e3ab7dc8f03797cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb2fed03b680e2421f24ed33e3ab7dc8f03797cc/comments", "author": null, "committer": null, "parents": [{"sha": "847535b6255a78ba618745d501b772ac95230359", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/847535b6255a78ba618745d501b772ac95230359", "html_url": "https://github.com/Rust-GCC/gccrs/commit/847535b6255a78ba618745d501b772ac95230359"}], "stats": {"total": 58, "additions": 28, "deletions": 30}, "files": [{"sha": "b20e8b23769fbe37366c1f28e9d84187df9f1b34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb2fed03b680e2421f24ed33e3ab7dc8f03797cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb2fed03b680e2421f24ed33e3ab7dc8f03797cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb2fed03b680e2421f24ed33e3ab7dc8f03797cc", "patch": "@@ -1,3 +1,12 @@\n+2008-08-31  Jan Hubicka  <jh@suse.cz>\n+\n+\t* postreload-gcse.c (eliminate_partially_redundant_loads): Use optimize_bb_for_size_p.\n+\t* predict.c (maybe_hot_frequency_p): Make inline.\n+\t(maybe_hot_count_p): Break out from ...\n+\t(maybe_hot_bb_p): ... this one.\n+\t(maybe_hot_edge_p): Simplify.\n+\t* basic-block.h (probably_cold_bb_p): Remove.\n+\n 2008-08-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/37168"}, {"sha": "9b759b001478b596d7b6696702bb83fe7b5a7b35", "filename": "gcc/basic-block.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb2fed03b680e2421f24ed33e3ab7dc8f03797cc/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb2fed03b680e2421f24ed33e3ab7dc8f03797cc/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=fb2fed03b680e2421f24ed33e3ab7dc8f03797cc", "patch": "@@ -829,7 +829,6 @@ extern void compute_available (sbitmap *, sbitmap *, sbitmap *, sbitmap *);\n /* In predict.c */\n extern bool maybe_hot_bb_p (const_basic_block);\n extern bool maybe_hot_edge_p (edge);\n-extern bool probably_cold_bb_p (const_basic_block);\n extern bool probably_never_executed_bb_p (const_basic_block);\n extern bool optimize_bb_for_size_p (const_basic_block);\n extern bool optimize_bb_for_speed_p (const_basic_block);"}, {"sha": "57be7a5c39c5efed4fc22431a5c633a73f02defe", "filename": "gcc/postreload-gcse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb2fed03b680e2421f24ed33e3ab7dc8f03797cc/gcc%2Fpostreload-gcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb2fed03b680e2421f24ed33e3ab7dc8f03797cc/gcc%2Fpostreload-gcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload-gcse.c?ref=fb2fed03b680e2421f24ed33e3ab7dc8f03797cc", "patch": "@@ -1173,7 +1173,7 @@ eliminate_partially_redundant_loads (void)\n \tcontinue;\n \n       /* Do not try anything on cold basic blocks.  */\n-      if (probably_cold_bb_p (bb))\n+      if (optimize_bb_for_size_p (bb))\n \tcontinue;\n \n       /* Reset the table of things changed since the start of the current"}, {"sha": "183ae8fa7cb6ad64b04df55ba0a3d01e4247d8a8", "filename": "gcc/predict.c", "status": "modified", "additions": 18, "deletions": 28, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb2fed03b680e2421f24ed33e3ab7dc8f03797cc/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb2fed03b680e2421f24ed33e3ab7dc8f03797cc/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=fb2fed03b680e2421f24ed33e3ab7dc8f03797cc", "patch": "@@ -110,7 +110,8 @@ static const struct predictor_info predictor_info[]= {\n #undef DEF_PREDICTOR\n \n /* Return TRUE if frequency FREQ is considered to be hot.  */\n-static bool\n+\n+static inline bool\n maybe_hot_frequency_p (int freq)\n {\n   if (!profile_info || !flag_branch_probabilities)\n@@ -127,17 +128,27 @@ maybe_hot_frequency_p (int freq)\n   return true;\n }\n \n+/* Return TRUE if frequency FREQ is considered to be hot.  */\n+\n+static inline bool\n+maybe_hot_count_p (gcov_type count)\n+{\n+  if (profile_status != PROFILE_READ)\n+    return true;\n+  /* Code executed at most once is not hot.  */\n+  if (profile_info->runs >= count)\n+    return false;\n+  return (count\n+\t  > profile_info->sum_max / PARAM_VALUE (HOT_BB_COUNT_FRACTION));\n+}\n+\n /* Return true in case BB can be CPU intensive and should be optimized\n    for maximal performance.  */\n \n bool\n maybe_hot_bb_p (const_basic_block bb)\n {\n-  if (profile_info && flag_branch_probabilities\n-      && (bb->count\n-\t  < profile_info->sum_max / PARAM_VALUE (HOT_BB_COUNT_FRACTION)))\n-    return false;\n-  return maybe_hot_frequency_p (bb->frequency);\n+  return maybe_hot_count_p (bb->count) || maybe_hot_frequency_p (bb->frequency);\n }\n \n /* Return true if the call can be hot.  */\n@@ -167,28 +178,7 @@ cgraph_maybe_hot_edge_p (struct cgraph_edge *edge)\n bool\n maybe_hot_edge_p (edge e)\n {\n-  if (profile_info && flag_branch_probabilities\n-      && (e->count\n-\t  < profile_info->sum_max / PARAM_VALUE (HOT_BB_COUNT_FRACTION)))\n-    return false;\n-  return maybe_hot_frequency_p (EDGE_FREQUENCY (e));\n-}\n-\n-/* Return true in case BB is cold and should be optimized for size.  */\n-\n-bool\n-probably_cold_bb_p (const_basic_block bb)\n-{\n-  if (profile_info && flag_branch_probabilities\n-      && (bb->count\n-\t  < profile_info->sum_max / PARAM_VALUE (HOT_BB_COUNT_FRACTION)))\n-    return true;\n-  if ((!profile_info || !flag_branch_probabilities)\n-      && cfun->function_frequency == FUNCTION_FREQUENCY_UNLIKELY_EXECUTED)\n-    return true;\n-  if (bb->frequency < BB_FREQ_MAX / PARAM_VALUE (HOT_BB_FREQUENCY_FRACTION))\n-    return true;\n-  return false;\n+  return maybe_hot_count_p (e->count) || maybe_hot_frequency_p (EDGE_FREQUENCY (e));\n }\n \n /* Return true in case BB is probably never executed.  */"}]}