{"sha": "70de20db232545daa2d6616e3581313476395ea3", "node_id": "C_kwDOANBUbNoAKDcwZGUyMGRiMjMyNTQ1ZGFhMmQ2NjE2ZTM1ODEzMTM0NzYzOTVlYTM", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-09-30T12:26:46Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-09-30T12:26:46Z"}, "message": "openmp: Add omp_aligned_{,c}alloc and omp_{c,re}alloc for Fortran\n\ngcc/ChangeLog:\n\n\t* omp-low.c (omp_runtime_api_call): Add omp_aligned_{,c}alloc and\n\tomp_{c,re}alloc, fix omp_alloc/omp_free.\n\nlibgomp/ChangeLog:\n\n\t* libgomp.texi (OpenMP 5.1): Set implementation status to Y for\n\tomp_aligned_{,c}alloc and omp_{c,re}alloc routines.\n\t* omp_lib.f90.in (omp_aligned_alloc, omp_aligned_calloc, omp_calloc,\n\tomp_realloc): Add.\n\t* omp_lib.h.in (omp_aligned_alloc, omp_aligned_calloc, omp_calloc,\n\tomp_realloc): Add.\n\t* testsuite/libgomp.fortran/alloc-10.f90: New test.\n\t* testsuite/libgomp.fortran/alloc-6.f90: New test.\n\t* testsuite/libgomp.fortran/alloc-7.c: New test.\n\t* testsuite/libgomp.fortran/alloc-7.f90: New test.\n\t* testsuite/libgomp.fortran/alloc-8.f90: New test.\n\t* testsuite/libgomp.fortran/alloc-9.f90: New test.", "tree": {"sha": "f91f55f51498e8e10767e2f48a1e1244f2560e63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f91f55f51498e8e10767e2f48a1e1244f2560e63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70de20db232545daa2d6616e3581313476395ea3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70de20db232545daa2d6616e3581313476395ea3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70de20db232545daa2d6616e3581313476395ea3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70de20db232545daa2d6616e3581313476395ea3/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3d11a1e9528b6140c65a66d47225a0b6a8814e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3d11a1e9528b6140c65a66d47225a0b6a8814e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3d11a1e9528b6140c65a66d47225a0b6a8814e0"}], "stats": {"total": 775, "additions": 770, "deletions": 5}, "files": [{"sha": "f7242dfbbca848486752c2700838447e2124b566", "filename": "gcc/omp-low.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70de20db232545daa2d6616e3581313476395ea3/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70de20db232545daa2d6616e3581313476395ea3/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=70de20db232545daa2d6616e3581313476395ea3", "patch": "@@ -3921,8 +3921,12 @@ omp_runtime_api_call (const_tree fndecl)\n     {\n       /* This array has 3 sections.  First omp_* calls that don't\n \t have any suffixes.  */\n-      \"omp_alloc\",\n-      \"omp_free\",\n+      \"aligned_alloc\",\n+      \"aligned_calloc\",\n+      \"alloc\",\n+      \"calloc\",\n+      \"free\",\n+      \"realloc\",\n       \"target_alloc\",\n       \"target_associate_ptr\",\n       \"target_disassociate_ptr\","}, {"sha": "02160f815623641cc7fdc873e762ae6a897441c0", "filename": "libgomp/libgomp.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70de20db232545daa2d6616e3581313476395ea3/libgomp%2Flibgomp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70de20db232545daa2d6616e3581313476395ea3/libgomp%2Flibgomp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.texi?ref=70de20db232545daa2d6616e3581313476395ea3", "patch": "@@ -315,7 +315,7 @@ The OpenMP 4.5 specification is fully supported.\n       runtime routines @tab N @tab\n @item @code{omp_get_mapped_ptr} runtime routine @tab N @tab\n @item @code{omp_calloc}, @code{omp_realloc}, @code{omp_aligned_alloc} and\n-      @code{omp_aligned_calloc} runtime routines @tab N @tab\n+      @code{omp_aligned_calloc} runtime routines @tab Y @tab\n @item @code{omp_alloctrait_key_t} enum: @code{omp_atv_serialized} added,\n       @code{omp_atv_default} changed @tab Y @tab\n @item @code{omp_display_env} runtime routine @tab P"}, {"sha": "1063eee0c947ee3e2d39f2a179c8b69b173453fe", "filename": "libgomp/omp_lib.f90.in", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70de20db232545daa2d6616e3581313476395ea3/libgomp%2Fomp_lib.f90.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70de20db232545daa2d6616e3581313476395ea3/libgomp%2Fomp_lib.f90.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fomp_lib.f90.in?ref=70de20db232545daa2d6616e3581313476395ea3", "patch": "@@ -680,13 +680,54 @@\n           end function omp_alloc\n         end interface\n \n+        interface\n+          function omp_aligned_alloc (alignment, size, allocator) bind(c)\n+            use, intrinsic :: iso_c_binding, only : c_ptr, c_size_t\n+            import :: omp_allocator_handle_kind\n+            type(c_ptr) :: omp_aligned_alloc\n+            integer(c_size_t), value :: alignment, size\n+            integer(omp_allocator_handle_kind), value :: allocator\n+          end function omp_aligned_alloc\n+        end interface\n+\n         interface\n           subroutine omp_free(ptr, allocator) bind(c)\n             use, intrinsic :: iso_c_binding, only : c_ptr\n             import :: omp_allocator_handle_kind\n             type(c_ptr), value :: ptr\n             integer(omp_allocator_handle_kind), value :: allocator\n-          end subroutine\n+          end subroutine omp_free\n+        end interface\n+\n+        interface\n+          function omp_calloc (nmemb, size, allocator) bind(c)\n+            use, intrinsic :: iso_c_binding, only : c_ptr, c_size_t\n+            import :: omp_allocator_handle_kind\n+            type(c_ptr) :: omp_calloc\n+            integer(c_size_t), value :: nmemb, size\n+            integer(omp_allocator_handle_kind), value :: allocator\n+          end function omp_calloc\n+        end interface\n+\n+        interface\n+          function omp_aligned_calloc (alignment, nmemb, size, allocator) bind(c)\n+            use, intrinsic :: iso_c_binding, only : c_ptr, c_size_t\n+            import :: omp_allocator_handle_kind\n+            type(c_ptr) :: omp_aligned_calloc\n+            integer(c_size_t), value :: alignment, nmemb, size\n+            integer(omp_allocator_handle_kind), value :: allocator\n+          end function omp_aligned_calloc\n+        end interface\n+\n+        interface\n+          function omp_realloc (ptr, size, allocator, free_allocator) bind(c)\n+            use, intrinsic :: iso_c_binding, only : c_ptr, c_size_t\n+            import :: omp_allocator_handle_kind\n+            type(c_ptr) :: omp_realloc\n+            type(c_ptr), value :: ptr\n+            integer(c_size_t), value :: size\n+            integer(omp_allocator_handle_kind), value :: allocator, free_allocator\n+          end function omp_realloc\n         end interface\n \n         interface"}, {"sha": "f40321c479bcf07b1bd3af6082668d5f6195e647", "filename": "libgomp/omp_lib.h.in", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70de20db232545daa2d6616e3581313476395ea3/libgomp%2Fomp_lib.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70de20db232545daa2d6616e3581313476395ea3/libgomp%2Fomp_lib.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fomp_lib.h.in?ref=70de20db232545daa2d6616e3581313476395ea3", "patch": "@@ -282,13 +282,57 @@\n         end function omp_alloc\n       end interface\n \n+      interface\n+        function omp_aligned_alloc (alignment, size, allocator) bind(c)\n+          use, intrinsic :: iso_c_binding, only : c_ptr, c_size_t\n+          use, intrinsic :: omp_lib_kinds\n+          type(c_ptr) :: omp_aligned_alloc\n+          integer(c_size_t), value :: alignment, size\n+          integer(omp_allocator_handle_kind), value :: allocator\n+        end function omp_aligned_alloc\n+      end interface\n+\n       interface\n         subroutine omp_free(ptr, allocator) bind(c)\n           use, intrinsic :: iso_c_binding, only : c_ptr\n           use, intrinsic :: omp_lib_kinds\n           type(c_ptr), value :: ptr\n           integer(omp_allocator_handle_kind), value :: allocator\n-        end subroutine\n+        end subroutine omp_free\n+      end interface\n+\n+      interface\n+        function omp_calloc (nmemb, size, allocator) bind(c)\n+          use, intrinsic :: iso_c_binding, only : c_ptr, c_size_t\n+          use, intrinsic :: omp_lib_kinds\n+          type(c_ptr) :: omp_calloc\n+          integer(c_size_t), value :: nmemb, size\n+          integer(omp_allocator_handle_kind), value :: allocator\n+        end function omp_calloc\n+      end interface\n+\n+      interface\n+        function omp_aligned_calloc (alignment, nmemb, size, allocator)   &\n+     &      bind(c)\n+          use, intrinsic :: iso_c_binding, only : c_ptr, c_size_t\n+          use, intrinsic :: omp_lib_kinds\n+          type(c_ptr) :: omp_aligned_calloc\n+          integer(c_size_t), value :: alignment, nmemb, size\n+          integer(omp_allocator_handle_kind), value :: allocator\n+        end function omp_aligned_calloc\n+      end interface\n+\n+      interface\n+        function omp_realloc (ptr, size, allocator, free_allocator)      &\n+     &      bind(c)\n+          use, intrinsic :: iso_c_binding, only : c_ptr, c_size_t\n+          use, intrinsic :: omp_lib_kinds\n+          type(c_ptr) :: omp_realloc\n+          type(c_ptr), value :: ptr\n+          integer(c_size_t), value :: size\n+          integer(omp_allocator_handle_kind), value :: allocator\n+          integer(omp_allocator_handle_kind), value :: free_allocator\n+        end function omp_realloc\n       end interface\n \n       interface"}, {"sha": "d26a83b216a3e9989efc55fffb1ea937fe8d36b2", "filename": "libgomp/testsuite/libgomp.fortran/alloc-10.f90", "status": "added", "additions": 198, "deletions": 0, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70de20db232545daa2d6616e3581313476395ea3/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70de20db232545daa2d6616e3581313476395ea3/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-10.f90?ref=70de20db232545daa2d6616e3581313476395ea3", "patch": "@@ -0,0 +1,198 @@\n+! { dg-additional-sources alloc-7.c }\n+module m\n+  use omp_lib\n+  use iso_c_binding\n+  implicit none\n+\n+  type (omp_alloctrait), parameter :: traits2(*) &\n+    = [ omp_alloctrait (omp_atk_alignment, 16), &\n+        omp_alloctrait (omp_atk_sync_hint, omp_atv_default), &\n+        omp_alloctrait (omp_atk_access, omp_atv_default), &\n+        omp_alloctrait (omp_atk_pool_size, 1024), &\n+        omp_alloctrait (omp_atk_fallback, omp_atv_default_mem_fb), &\n+        omp_alloctrait (omp_atk_partition, omp_atv_environment)]\n+  type (omp_alloctrait) :: traits3(7) &\n+    = [ omp_alloctrait (omp_atk_sync_hint, omp_atv_uncontended), &\n+        omp_alloctrait (omp_atk_alignment, 32), &\n+        omp_alloctrait (omp_atk_access, omp_atv_all), &\n+        omp_alloctrait (omp_atk_pool_size, 512), &\n+        omp_alloctrait (omp_atk_fallback, omp_atv_allocator_fb), &\n+        omp_alloctrait (omp_atk_fb_data, 0), &\n+        omp_alloctrait (omp_atk_partition, omp_atv_default)]\n+  type (omp_alloctrait), parameter :: traits4(*) &\n+    = [ omp_alloctrait (omp_atk_alignment, 128), &\n+        omp_alloctrait (omp_atk_pool_size, 1024), &\n+        omp_alloctrait (omp_atk_fallback, omp_atv_null_fb)]\n+\n+  interface\n+    integer(c_int) function get__alignof_int () bind(C)\n+      import :: c_int\n+    end\n+  end interface\n+end module m\n+\n+program main\n+  use m\n+  implicit none (external, type)\n+  type(c_ptr) :: p, q, r\n+  integer, pointer, contiguous :: ip(:), iq(:), ir(:)\n+  type (omp_alloctrait) :: traits(3)\n+  integer (omp_allocator_handle_kind) :: a, a2\n+  integer (c_ptrdiff_t) :: iptr\n+  integer :: i\n+\n+  traits  = [ omp_alloctrait (omp_atk_alignment, 64), &\n+              omp_alloctrait (omp_atk_fallback, omp_atv_null_fb), &\n+              omp_alloctrait (omp_atk_pool_size, 4096)]\n+\n+  p = omp_aligned_calloc (c_sizeof (0), 3_c_size_t, c_sizeof (0), omp_default_mem_alloc)\n+  call c_f_pointer (p, ip, [3])\n+  if (mod (TRANSFER (p, iptr), get__alignof_int ()) /= 0 &\n+      .or. ip(1) /= 0 .or. ip(2) /= 0 .or. ip(3) /= 0) &\n+    stop 1\n+  ip(1) = 1\n+  ip(2) = 2\n+  ip(3) = 3\n+  call omp_free (p, omp_default_mem_alloc)\n+  p = omp_aligned_calloc (2 * c_sizeof (0), 1_c_size_t, 2 * c_sizeof (0), omp_default_mem_alloc)\n+  call c_f_pointer (p, ip, [2])\n+  if (mod (TRANSFER (p, iptr), 2 * c_sizeof (0)) /= 0 &\n+      .or. ip(1) /= 0 .or. ip(2) /= 0) &\n+    stop 2\n+  ip(1) = 1\n+  ip(2) = 2\n+  call omp_free (p, omp_null_allocator)\n+  call omp_set_default_allocator (omp_default_mem_alloc)\n+  p = omp_aligned_calloc (1_c_size_t, 1_c_size_t, c_sizeof (0), omp_null_allocator)\n+  call c_f_pointer (p, ip, [1])\n+  if (mod (TRANSFER (p, iptr), get__alignof_int ()) /= 0 &\n+      .or. ip(1) /= 0) &\n+    stop 3\n+  ip(1) = 3\n+  call omp_free (p, omp_get_default_allocator ())\n+\n+  a = omp_init_allocator (omp_default_mem_space, 3, traits)\n+  if (a == omp_null_allocator) &\n+    stop 4\n+  p = omp_aligned_calloc (32_c_size_t, 3_c_size_t, 1024_c_size_t, a)\n+  call c_f_pointer (p, ip, [3072 / c_sizeof (0)])\n+  if (mod (TRANSFER (p, iptr), 64) /= 0) &\n+    stop 5\n+  do i = 1, 3072 / c_sizeof (0)\n+    if (ip(i) /= 0) &\n+      stop 6\n+  end do\n+  ip(1) = 1\n+  ip(3072 / c_sizeof (0)) = 2\n+  if (c_associated (omp_aligned_calloc (8_c_size_t, 192_c_size_t, 16_c_size_t, a))) &\n+    stop 7\n+  call omp_free (p, a)\n+  p = omp_aligned_calloc (128_c_size_t, 6_c_size_t, 512_c_size_t, a)\n+  call c_f_pointer (p, ip, [3072 / c_sizeof (0)])\n+  if (mod (TRANSFER (p, iptr), 128) /= 0) &\n+    stop 8\n+  do i = 1, 3072 / c_sizeof (0)\n+    if (ip(i) /= 0) &\n+      stop 9\n+  end do\n+  ip(1) = 3\n+  ip(3072 / c_sizeof (0)) = 4\n+  call omp_free (p, omp_null_allocator)\n+  call omp_set_default_allocator (a)\n+  if (omp_get_default_allocator () /= a) &\n+    stop 10\n+  p = omp_aligned_calloc (64_c_size_t, 12_c_size_t, 256_c_size_t, omp_null_allocator)\n+  call c_f_pointer (p, ip, [3072 / c_sizeof (0)])\n+  do i = 1, 3072 / c_sizeof (0)\n+    if (ip(i) /= 0) &\n+      stop 11\n+  end do\n+  if (c_associated (omp_aligned_calloc (8_c_size_t, 128_c_size_t, 24_c_size_t, omp_null_allocator))) &\n+    stop 12\n+  call omp_free (p, a)\n+  call omp_destroy_allocator (a)\n+\n+  a = omp_init_allocator (omp_default_mem_space, size (traits2), traits2)\n+  if (a == omp_null_allocator) &\n+    stop 13\n+  if (traits3(6)%key /= omp_atk_fb_data) &\n+    stop 14\n+  traits3(6)%value = a\n+  a2 = omp_init_allocator (omp_default_mem_space, size (traits3), traits3)\n+  if (a2 == omp_null_allocator) &\n+    stop 15\n+  p = omp_aligned_calloc (4_c_size_t, 5_c_size_t, 84_c_size_t, a2)\n+  call c_f_pointer (p, ip, [420 / c_sizeof (0)])\n+  do i = 1, 420 / c_sizeof (0)\n+    if (ip(i) /= 0) &\n+      stop 16\n+  end do\n+  if (mod (TRANSFER (p, iptr), 32) /= 0) &\n+    stop 17\n+  ip(1) = 5\n+  ip(420 / c_sizeof (0)) = 6\n+  q = omp_aligned_calloc (8_c_size_t, 24_c_size_t, 32_c_size_t, a2)\n+  call c_f_pointer (q, iq, [768 / c_sizeof (0)])\n+  if (mod (TRANSFER (p, iptr), 16) /= 0) &\n+    stop 18\n+  do i = 1, 768 / c_sizeof (0)\n+    if (iq(i) /= 0) &\n+      stop 19\n+  end do\n+  iq(1) = 7\n+  iq(768 / c_sizeof (0)) = 8\n+  r = omp_aligned_calloc (8_c_size_t, 64_c_size_t, 8_c_size_t, a2)\n+  call c_f_pointer (r, ir, [512 / c_sizeof (0)])\n+  if (mod (TRANSFER (p, iptr), 8) /= 0) &\n+    stop 20\n+  do i = 1, 512 / c_sizeof (0)\n+    if (ir(i) /= 0) &\n+      stop 21\n+  end do\n+  ir(1) = 9\n+  ir(512 / c_sizeof (0)) = 10\n+  call omp_free (p, omp_null_allocator)\n+  call omp_free (q, a2)\n+  call omp_free (r, omp_null_allocator)\n+  call omp_destroy_allocator (a2)\n+  call omp_destroy_allocator (a)\n+\n+  a = omp_init_allocator (omp_default_mem_space, size (traits4), traits4)\n+  if (a == omp_null_allocator) &\n+    stop 22\n+  if (traits3(6)%key /= omp_atk_fb_data) &\n+    stop 23\n+  traits3(6)%value = a\n+  a2 = omp_init_allocator (omp_default_mem_space, size (traits3), traits3)\n+  if (a2 == omp_null_allocator) &\n+    stop 24\n+  call omp_set_default_allocator (a2)\n+  p = omp_aligned_calloc (4_c_size_t, 21_c_size_t, 20_c_size_t, omp_null_allocator)\n+  call c_f_pointer (p, ip, [420 / c_sizeof (0)])\n+  if (mod (TRANSFER (p, iptr), 32) /= 0) &\n+    stop 25\n+  do i = 1, 420 / c_sizeof (0)\n+    if (ip(i) /= 0)  &\n+      stop 26\n+  end do\n+  ip(1) = 5\n+  ip(420 / c_sizeof (0)) = 6\n+  q = omp_aligned_calloc (64_c_size_t, 12_c_size_t, 64_c_size_t, omp_null_allocator)\n+  call c_f_pointer (q, iq, [768 / c_sizeof (0)])\n+  if (mod (TRANSFER (q, iptr), 128) /= 0) &\n+    stop 27\n+  do i = 1, 768 / c_sizeof (0)\n+    if (iq(i) /= 0) &\n+      stop 28\n+  end do\n+  iq(1) = 7\n+  iq(768 / c_sizeof (0)) = 8\n+  if (c_associated (omp_aligned_calloc (8_c_size_t, 24_c_size_t, 32_c_size_t, omp_null_allocator))) &\n+    stop 29\n+  call omp_free (p, omp_null_allocator)\n+  call omp_free (q, omp_null_allocator)\n+  call omp_free (c_null_ptr, omp_null_allocator)\n+  call omp_free (c_null_ptr, omp_null_allocator)\n+  call omp_destroy_allocator (a2)\n+  call omp_destroy_allocator (a)\n+end program main"}, {"sha": "59fd14da6006b4bef093c13c86fa53388452360e", "filename": "libgomp/testsuite/libgomp.fortran/alloc-6.f90", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70de20db232545daa2d6616e3581313476395ea3/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70de20db232545daa2d6616e3581313476395ea3/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-6.f90?ref=70de20db232545daa2d6616e3581313476395ea3", "patch": "@@ -0,0 +1,45 @@\n+module m\n+  use omp_lib\n+  implicit none\n+\n+  type (omp_alloctrait), parameter :: traits(*) &\n+    = [ omp_alloctrait (omp_atk_pool_size, 1), &\n+        omp_alloctrait (omp_atk_fallback, omp_atv_abort_fb) ]\n+end module m\n+\n+program main\n+  use m\n+  use iso_c_binding\n+  implicit none (external, type)\n+  integer (omp_allocator_handle_kind) :: a\n+  integer(c_size_t), parameter :: zero = 0_c_size_t\n+\n+  if (c_associated (omp_alloc (zero, omp_null_allocator))) &\n+    stop 1\n+  if (c_associated (omp_aligned_alloc (64_c_size_t, zero, omp_null_allocator))) &\n+    stop 2\n+  if (c_associated (omp_calloc (zero, zero, omp_null_allocator)) &\n+      .or. c_associated (omp_calloc (32_c_size_t, zero, omp_null_allocator)) &\n+      .or. c_associated (omp_calloc (zero, 64_c_size_t, omp_null_allocator))) &\n+    stop 3\n+  if (c_associated (omp_aligned_calloc (32_c_size_t, zero, zero, omp_null_allocator)) &\n+      .or. c_associated (omp_aligned_calloc (64_c_size_t, 32_c_size_t, zero, omp_null_allocator)) &\n+      .or. c_associated (omp_aligned_calloc (16_c_size_t, zero, 64_c_size_t, omp_null_allocator))) &\n+    stop 4\n+  a = omp_init_allocator (omp_default_mem_space, 2, traits)\n+  if (a /= omp_null_allocator) then\n+    if (c_associated (omp_alloc (zero, a)) &\n+        .or. c_associated (omp_alloc (zero, a)) &\n+        .or. c_associated (omp_alloc (zero, a)) &\n+        .or. c_associated (omp_aligned_alloc (16_c_size_t, zero, a)) &\n+        .or. c_associated (omp_aligned_alloc (128_c_size_t, zero, a)) &\n+        .or. c_associated (omp_calloc (zero, zero, a)) &\n+        .or. c_associated (omp_calloc (32_c_size_t, zero, a)) &\n+        .or. c_associated (omp_calloc (zero, 64_c_size_t, a)) &\n+        .or. c_associated (omp_aligned_calloc (32_c_size_t, zero, zero, a)) &\n+        .or. c_associated (omp_aligned_calloc (64_c_size_t, 32_c_size_t, zero, a)) &\n+        .or. c_associated (omp_aligned_calloc (16_c_size_t, zero, 64_c_size_t, a))) &\n+      stop 5\n+    call omp_destroy_allocator (a)\n+  end if\n+end program main"}, {"sha": "4d16d09515015090e22f1bcd35360da5880d0087", "filename": "libgomp/testsuite/libgomp.fortran/alloc-7.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70de20db232545daa2d6616e3581313476395ea3/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70de20db232545daa2d6616e3581313476395ea3/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-7.c?ref=70de20db232545daa2d6616e3581313476395ea3", "patch": "@@ -0,0 +1,5 @@\n+int\n+get__alignof_int ()\n+{\n+  return __alignof (int);\n+}"}, {"sha": "b047b0e4d10c9fca7b25a6c24f8a188c74f2082f", "filename": "libgomp/testsuite/libgomp.fortran/alloc-7.f90", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70de20db232545daa2d6616e3581313476395ea3/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70de20db232545daa2d6616e3581313476395ea3/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-7.f90?ref=70de20db232545daa2d6616e3581313476395ea3", "patch": "@@ -0,0 +1,174 @@\n+! { dg-additional-sources alloc-7.c }\n+module m\n+  use omp_lib\n+  use iso_c_binding\n+  implicit none\n+\n+  type (omp_alloctrait), parameter :: traits2(*) &\n+    = [ omp_alloctrait (omp_atk_alignment, 16), &\n+        omp_alloctrait (omp_atk_sync_hint, omp_atv_default), &\n+        omp_alloctrait (omp_atk_access, omp_atv_default), &\n+        omp_alloctrait (omp_atk_pool_size, 1024), &\n+        omp_alloctrait (omp_atk_fallback, omp_atv_default_mem_fb), &\n+        omp_alloctrait (omp_atk_partition, omp_atv_environment)]\n+\n+  type (omp_alloctrait) :: traits3(7) &\n+    = [ omp_alloctrait (omp_atk_sync_hint, omp_atv_uncontended), &\n+        omp_alloctrait (omp_atk_alignment, 32), &\n+        omp_alloctrait (omp_atk_access, omp_atv_all), &\n+        omp_alloctrait (omp_atk_pool_size, 512), &\n+        omp_alloctrait (omp_atk_fallback, omp_atv_allocator_fb), &\n+        omp_alloctrait (omp_atk_fb_data, 0), &\n+        omp_alloctrait (omp_atk_partition, omp_atv_default)]\n+\n+  type (omp_alloctrait), parameter :: traits4(*) &\n+    = [ omp_alloctrait (omp_atk_alignment, 128), &\n+        omp_alloctrait (omp_atk_pool_size, 1024), &\n+        omp_alloctrait (omp_atk_fallback, omp_atv_null_fb)]\n+\n+  interface\n+    integer(c_int) function get__alignof_int () bind(C)\n+      import :: c_int\n+    end\n+  end interface\n+end module m\n+\n+program main\n+  use m\n+  implicit none (external, type)\n+  integer(c_ptrdiff_t) :: iptr\n+  type (c_ptr), volatile :: p, q, r\n+  integer, pointer, volatile, contiguous :: ip(:), iq(:), ir(:)\n+  type (omp_alloctrait) :: traits(3)\n+  integer (omp_allocator_handle_kind) :: a, a2\n+  traits  = [ omp_alloctrait (omp_atk_alignment, 64), &\n+              omp_alloctrait (omp_atk_fallback, omp_atv_null_fb), &\n+              omp_alloctrait (omp_atk_pool_size, 4096)]\n+\n+  p = omp_aligned_alloc (c_sizeof (0), 3 * c_sizeof (0), omp_default_mem_alloc)\n+  call c_f_pointer (p, ip, [3])\n+  if (mod (TRANSFER (p, iptr), get__alignof_int ()) /= 0) &\n+    stop 1\n+  ip(0) = 1\n+  ip(1) = 2\n+  ip(2) = 3\n+  call omp_free (p, omp_default_mem_alloc)\n+\n+  p = omp_aligned_alloc (2 * c_sizeof (0), 2 * c_sizeof (0), omp_default_mem_alloc)\n+  call c_f_pointer (p, ip, [2])\n+  if (mod (TRANSFER (p, iptr), 2 * c_sizeof (0)) /= 0) &\n+    stop 2\n+  ip(0) = 1\n+  ip(1) = 2\n+  call omp_free (p, omp_null_allocator)\n+\n+  call omp_set_default_allocator (omp_default_mem_alloc)\n+  p = omp_aligned_alloc (1_c_size_t, 2 * c_sizeof (0), omp_null_allocator)\n+  call c_f_pointer (p, ip, [2])\n+  if (mod (TRANSFER (p, iptr), get__alignof_int ()) /= 0) &\n+    stop 3\n+  ip(0) = 3\n+  call omp_free (p, omp_get_default_allocator ())\n+\n+  a = omp_init_allocator (omp_default_mem_space, 3, traits)\n+  if (a == omp_null_allocator) &\n+    stop 4\n+  p = omp_aligned_alloc (32_c_size_t, 3072_c_size_t, a)\n+  call c_f_pointer (p, ip, [3072/c_sizeof (0)])\n+  if (mod (TRANSFER (p, iptr), 64) /= 0) &\n+    stop 5\n+  ip(1) = 1\n+  ip(3072 / c_sizeof (0)) = 2\n+\n+  if (c_associated (omp_aligned_alloc (8_c_size_t, 3072_c_size_t, a))) &\n+    stop 6\n+\n+  call omp_free (p, a)\n+\n+  p = omp_aligned_alloc (128_c_size_t, 3072_c_size_t, a)\n+  call c_f_pointer (p, ip, [3072/c_sizeof (0)])\n+  if (mod (TRANSFER (p, iptr), 128) /= 0) &\n+    stop 7\n+  ip(1) = 3\n+  ip(3072 / c_sizeof (0)) = 4\n+  call omp_free (p, omp_null_allocator)\n+\n+  call omp_set_default_allocator (a)\n+  if (omp_get_default_allocator () /= a) &\n+    stop 8\n+  p = omp_aligned_alloc (64_c_size_t, 3072_c_size_t, omp_null_allocator)\n+  call c_f_pointer (p, ip, [3072/c_sizeof (0)])\n+  if (c_associated (omp_aligned_alloc (8_c_size_t, 3072_c_size_t, omp_null_allocator))) &\n+    stop 9\n+  call omp_free (p, a)\n+  call omp_destroy_allocator (a)\n+\n+  a = omp_init_allocator (omp_default_mem_space, size (traits2), traits2)\n+  if (a == omp_null_allocator) &\n+    stop 9\n+  if (traits3(6)%key /= omp_atk_fb_data) &\n+    stop 10\n+  traits3(6)%value = a\n+  a2 = omp_init_allocator (omp_default_mem_space, size (traits3), traits3)\n+  if (a2 == omp_null_allocator) &\n+    stop 11\n+\n+  p = omp_aligned_alloc (4_c_size_t, 420_c_size_t, a2)\n+  call c_f_pointer (p, ip, [420/c_sizeof (0)])\n+  if (mod (TRANSFER (p, iptr), 32) /= 0) &\n+    stop 12\n+  ip(1) = 5\n+  ip(420 / c_sizeof (0)) = 6\n+\n+  q = omp_aligned_alloc (8_c_size_t, 768_c_size_t, a2)\n+  call c_f_pointer (q, iq, [768/c_sizeof (0)])\n+  if (mod (TRANSFER (q, iptr), 16) /= 0) &\n+    stop 13\n+  iq(1) = 7\n+  iq(768 / c_sizeof (0)) = 8\n+\n+  r = omp_aligned_alloc (8_c_size_t, 512_c_size_t, a2)\n+  call c_f_pointer (r, ir, [512/c_sizeof (0)])\n+  if (mod (TRANSFER (r, iptr), 8) /= 0) &\n+    stop 14\n+  ir(1) = 9\n+  ir(512 / c_sizeof (0)) = 10\n+  call omp_free (p, omp_null_allocator)\n+  call omp_free (q, a2)\n+  call omp_free (r, omp_null_allocator)\n+  call omp_destroy_allocator (a2)\n+  call omp_destroy_allocator (a)\n+\n+  a = omp_init_allocator (omp_default_mem_space, size (traits4), traits4)\n+  if (a == omp_null_allocator) &\n+    stop 15\n+  if (traits3(6)%key /= omp_atk_fb_data) &\n+    stop 16\n+  traits3(6)%value = a\n+  a2 = omp_init_allocator (omp_default_mem_space, size (traits3), traits3)\n+  if (a2 == omp_null_allocator) &\n+    stop 17\n+  call omp_set_default_allocator (a2)\n+\n+  p = omp_aligned_alloc (4_c_size_t, 420_c_size_t, omp_null_allocator)\n+  call c_f_pointer (p, ip, [420/c_sizeof (0)])\n+  if (mod (TRANSFER (p, iptr), 32) /= 0) &\n+    stop 18\n+  ip(0) = 5\n+  ip(420 / c_sizeof (0)) = 6\n+\n+  q = omp_aligned_alloc (64_c_size_t, 768_c_size_t, omp_null_allocator)\n+  call c_f_pointer (q, iq, [768/c_sizeof (0)])\n+  if (mod (TRANSFER (q, iptr), 128) /= 0) &\n+    stop 19\n+  iq(1) = 7\n+  iq(768 / c_sizeof (0)) = 8\n+  if (c_associated (omp_aligned_alloc (8_c_size_t, 768_c_size_t, omp_null_allocator))) &\n+    stop 20\n+  call omp_free (p, omp_null_allocator)\n+  call omp_free (q, omp_null_allocator)\n+  call omp_free (c_null_ptr, omp_null_allocator)\n+  call omp_free (c_null_ptr, omp_null_allocator)\n+  call omp_destroy_allocator (a2)\n+  call omp_destroy_allocator (a)\n+end program main"}, {"sha": "4bff4d6ea2961ea7cc61d2cb6d1df31b105916bf", "filename": "libgomp/testsuite/libgomp.fortran/alloc-8.f90", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70de20db232545daa2d6616e3581313476395ea3/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70de20db232545daa2d6616e3581313476395ea3/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-8.f90?ref=70de20db232545daa2d6616e3581313476395ea3", "patch": "@@ -0,0 +1,58 @@\n+module m\n+  use omp_lib\n+  implicit none\n+\n+  type (omp_alloctrait), parameter :: traits(*) &\n+    = [ omp_alloctrait (omp_atk_alignment, 16), &\n+        omp_alloctrait (omp_atk_sync_hint, omp_atv_default), &\n+        omp_alloctrait (omp_atk_access, omp_atv_default), &\n+        omp_alloctrait (omp_atk_fallback, omp_atv_default_mem_fb), &\n+        omp_alloctrait (omp_atk_partition, omp_atv_environment)]\n+end module m\n+\n+program main\n+  use m\n+  use iso_c_binding\n+  implicit none (external, type)\n+  integer (omp_allocator_handle_kind) :: a\n+  type (c_ptr) :: p, q\n+  integer (c_size_t), volatile :: large_sz\n+  integer (c_ptrdiff_t) :: iptr\n+\n+  a = omp_init_allocator (omp_default_mem_space, size (traits), traits)\n+  if (a == omp_null_allocator) &\n+    stop 1\n+  p = omp_alloc (2048_c_size_t, a)\n+  if (mod (TRANSFER (p, iptr), 16) /= 0) &\n+    stop 2\n+  large_sz = NOT (1023_c_size_t)\n+  q = omp_alloc (large_sz, a)\n+  if (c_associated (q)) &\n+    stop 3\n+  q = omp_aligned_alloc (32_c_size_t, large_sz, a)\n+  if (c_associated (q)) &\n+    stop 4\n+  q = omp_calloc (large_sz / 4_c_size_t, 4_c_size_t, a)\n+  if (c_associated (q)) &\n+    stop 5\n+  q = omp_aligned_calloc (1_c_size_t, 2_c_size_t, large_sz / 2, a)\n+  if (c_associated (q)) &\n+    stop 6\n+  call omp_free (p, a)\n+  large_sz = NOT (0_c_size_t)\n+  large_sz = ISHFT (large_sz, -1)\n+  large_sz = large_sz + 1\n+  if (c_associated (omp_calloc (2_c_size_t, large_sz, a))) &\n+    stop 7\n+  if (c_associated (omp_calloc (large_sz, 1024_c_size_t, a))) &\n+    stop 8\n+  if (c_associated (omp_calloc (large_sz, large_sz, a))) &\n+    stop 9\n+  if (c_associated (omp_aligned_calloc (16_c_size_t, 2_c_size_t, large_sz, a))) &\n+    stop 10\n+  if (c_associated (omp_aligned_calloc (32_c_size_t, large_sz, 1024_c_size_t, a))) &\n+    stop 11\n+  if (c_associated (omp_aligned_calloc (64_c_size_t, large_sz, large_sz, a))) &\n+    stop 12\n+  call omp_destroy_allocator (a)\n+end program main"}, {"sha": "6458f35fd1fd0e432ddf5d78a92f25fc30e4bcc4", "filename": "libgomp/testsuite/libgomp.fortran/alloc-9.f90", "status": "added", "additions": 196, "deletions": 0, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70de20db232545daa2d6616e3581313476395ea3/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70de20db232545daa2d6616e3581313476395ea3/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-9.f90?ref=70de20db232545daa2d6616e3581313476395ea3", "patch": "@@ -0,0 +1,196 @@\n+! { dg-additional-sources alloc-7.c }\n+module m\n+  use omp_lib\n+  use iso_c_binding\n+  implicit none\n+\n+  type (omp_alloctrait), parameter :: traits2(*) &\n+    = [ omp_alloctrait (omp_atk_alignment, 16), &\n+        omp_alloctrait (omp_atk_sync_hint, omp_atv_default), &\n+        omp_alloctrait (omp_atk_access, omp_atv_default), &\n+        omp_alloctrait (omp_atk_pool_size, 1024), &\n+        omp_alloctrait (omp_atk_fallback, omp_atv_default_mem_fb), &\n+        omp_alloctrait (omp_atk_partition, omp_atv_environment)]\n+  type (omp_alloctrait) :: traits3(7) &\n+    = [ omp_alloctrait (omp_atk_sync_hint, omp_atv_uncontended), &\n+        omp_alloctrait (omp_atk_alignment, 32), &\n+        omp_alloctrait (omp_atk_access, omp_atv_all), &\n+        omp_alloctrait (omp_atk_pool_size, 512), &\n+        omp_alloctrait (omp_atk_fallback, omp_atv_allocator_fb), &\n+        omp_alloctrait (omp_atk_fb_data, 0), &\n+        omp_alloctrait (omp_atk_partition, omp_atv_default)]\n+  type (omp_alloctrait), parameter :: traits4(*) &\n+    = [ omp_alloctrait (omp_atk_alignment, 128), &\n+        omp_alloctrait (omp_atk_pool_size, 1024), &\n+        omp_alloctrait (omp_atk_fallback, omp_atv_null_fb)]\n+\n+  interface\n+    integer(c_int) function get__alignof_int () bind(C)\n+      import :: c_int\n+    end\n+  end interface\n+end module m\n+\n+program main\n+  use m\n+  implicit none (external, type)\n+  type(c_ptr), volatile :: p, q, r\n+  integer, pointer, contiguous, volatile :: ip(:), iq(:), ir(:)\n+  type (omp_alloctrait) :: traits(3)\n+  integer (omp_allocator_handle_kind) :: a, a2\n+  integer (c_ptrdiff_t) :: iptr\n+  integer :: i\n+\n+  traits  = [ omp_alloctrait (omp_atk_alignment, 64), &\n+              omp_alloctrait (omp_atk_fallback, omp_atv_null_fb), &\n+              omp_alloctrait (omp_atk_pool_size, 4096)]\n+\n+  p = omp_calloc (3_c_size_t, sizeof (0), omp_default_mem_alloc)\n+  call c_f_pointer (p, ip, [3])\n+  if (mod (TRANSFER (p, iptr), get__alignof_int ()) /= 0 &\n+      .or. ip(1) /= 0 .or. ip(2) /= 0 .or. ip(3) /= 0) &\n+    stop 1\n+  ip(1) = 1\n+  ip(2) = 2\n+  ip(3) = 3\n+  call omp_free (p, omp_default_mem_alloc)\n+  p = omp_calloc (2_c_size_t, sizeof (0), omp_default_mem_alloc)\n+  call c_f_pointer (p, ip, [2])\n+  if (mod (TRANSFER (p, iptr), get__alignof_int ()) /= 0 &\n+      .or. ip(1) /= 0 .or. ip(2) /= 0) &\n+    stop 2\n+  ip(1) = 1\n+  ip(2) = 2\n+  call omp_free (p, omp_null_allocator)\n+  call omp_set_default_allocator (omp_default_mem_alloc)\n+  p = omp_calloc (1_c_size_t, sizeof (0), omp_null_allocator)\n+  call c_f_pointer (p, ip, [1])\n+  if (mod (TRANSFER (p, iptr), get__alignof_int ()) /= 0 &\n+      .or. ip(1) /= 0) &\n+    stop 3\n+  ip(1) = 3\n+  call omp_free (p, omp_get_default_allocator ())\n+\n+  a = omp_init_allocator (omp_default_mem_space, 3, traits)\n+  if (a == omp_null_allocator) &\n+    stop 4\n+  p = omp_calloc (3_c_size_t, 1024_c_size_t, a)\n+  call c_f_pointer (p, ip, [3072 / c_sizeof (0)])\n+  if (mod (TRANSFER (p, iptr), 64) /= 0) &\n+    stop 5\n+  do i = 1, 3072 / c_sizeof (0)\n+    if (ip(i) /= 0) &\n+      stop 6\n+  end do\n+  ip(1) = 1\n+  ip(3072 / c_sizeof (0)) = 2\n+  if (c_associated (omp_calloc (1024_c_size_t, 3_c_size_t, a))) &\n+    stop 7\n+  call omp_free (p, a)\n+  p = omp_calloc (512_c_size_t, 6_c_size_t, a)\n+  call c_f_pointer (p, ip, [3072 / c_sizeof (0)])\n+  do i = 1, 3072 / c_sizeof (0)\n+    if (ip(i) /= 0) &\n+      stop 8\n+  end do\n+  ip(1) = 3\n+  ip(3072 / c_sizeof (0)) = 4\n+  call omp_free (p, omp_null_allocator)\n+  call omp_set_default_allocator (a)\n+  if (omp_get_default_allocator () /= a) &\n+    stop 9\n+  p = omp_calloc (12_c_size_t, 256_c_size_t, omp_null_allocator)\n+  call c_f_pointer (p, ip, [3072 / c_sizeof (0)])\n+  do i = 1, 3072 / c_sizeof (0)\n+    if (ip(i) /= 0) &\n+      stop 10\n+  end do\n+  if (c_associated (omp_calloc (128_c_size_t, 24_c_size_t, omp_null_allocator))) &\n+    stop 11\n+  call omp_free (p, a)\n+  call omp_destroy_allocator (a)\n+\n+  a = omp_init_allocator (omp_default_mem_space, size (traits2), traits2)\n+  if (a == omp_null_allocator) &\n+    stop 12\n+  if (traits3(6)%key /= omp_atk_fb_data) &\n+    stop 13\n+  traits3(6)%value = a\n+  a2 = omp_init_allocator (omp_default_mem_space, size (traits3), traits3)\n+  if (a2 == omp_null_allocator) &\n+    stop 14\n+  p = omp_calloc (10_c_size_t, 42_c_size_t, a2)\n+  call c_f_pointer (p, ip, [420 / c_sizeof (0)])\n+  do i = 1, 420 / c_sizeof (0)\n+    if (ip(i) /= 0) &\n+      stop 15\n+  end do\n+  if (mod (TRANSFER (p, iptr), 32) /= 0) &\n+    stop 16\n+  ip(1) = 5\n+  ip(420 / c_sizeof (0)) = 6\n+  q = omp_calloc (24_c_size_t, 32_c_size_t, a2)\n+  call c_f_pointer (q, iq, [768 / c_sizeof (0)])\n+  if (mod (TRANSFER (q, iptr), 16) /= 0) &\n+    stop 17\n+  do i = 1, 768 / c_sizeof (0)\n+    if (iq(i) /= 0) &\n+      stop 18\n+  end do\n+  iq(1) = 7\n+  iq(768 / c_sizeof (0)) = 8\n+  r = omp_calloc (128_c_size_t, 4_c_size_t, a2)\n+  call c_f_pointer (r, ir, [512 / c_sizeof (0)])\n+  if (mod (TRANSFER (r, iptr), get__alignof_int ()) /= 0) &\n+    stop 19\n+  do i = 1, 512 / c_sizeof (0)\n+    if (ir(i) /= 0) &\n+      stop 20\n+  end do\n+  ir(1) = 9\n+  ir(512 / c_sizeof (0)) = 10\n+  call omp_free (p, omp_null_allocator)\n+  call omp_free (q, a2)\n+  call omp_free (r, omp_null_allocator)\n+  call omp_destroy_allocator (a2)\n+  call omp_destroy_allocator (a)\n+\n+  a = omp_init_allocator (omp_default_mem_space, size (traits4), traits4)\n+  if (a == omp_null_allocator) &\n+    stop 21\n+  if (traits3(6)%key /= omp_atk_fb_data) &\n+    stop 22\n+  traits3(6)%value = a\n+  a2 = omp_init_allocator (omp_default_mem_space, size (traits3), traits3)\n+  if (a2 == omp_null_allocator) &\n+    stop 23\n+  call omp_set_default_allocator (a2)\n+  p = omp_calloc (42_c_size_t, 10_c_size_t, omp_null_allocator)\n+  call c_f_pointer (p, ip, [420 / c_sizeof (0)])\n+  if (mod (TRANSFER (p, iptr), 32) /= 0) &\n+    stop 24\n+  do i = 1, 420 / c_sizeof (0)\n+    if (ip(i) /= 0) &\n+      stop 25\n+  end do\n+  ip(1) = 5\n+  ip(420 / c_sizeof (0)) = 6\n+  q = omp_calloc (32_c_size_t, 24_c_size_t, omp_null_allocator)\n+  call c_f_pointer (q, iq, [768 / c_sizeof (0)])\n+  if (mod (TRANSFER (q, iptr), 128) /= 0) &\n+    stop 26\n+  do i = 1, 768 / c_sizeof (0)\n+    if (iq(i) /= 0) &\n+      stop 27\n+  end do\n+  iq(1) = 7\n+  iq(768 / c_sizeof (0)) = 8\n+  if (c_associated (omp_calloc (24_c_size_t, 32_c_size_t, omp_null_allocator))) &\n+    stop 28\n+  call omp_free (p, omp_null_allocator)\n+  call omp_free (q, omp_null_allocator)\n+  call omp_free (c_null_ptr, omp_null_allocator)\n+  call omp_free (c_null_ptr, omp_null_allocator)\n+  call omp_destroy_allocator (a2)\n+  call omp_destroy_allocator (a)\n+end program main"}]}