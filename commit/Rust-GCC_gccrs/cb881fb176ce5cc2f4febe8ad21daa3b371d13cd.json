{"sha": "cb881fb176ce5cc2f4febe8ad21daa3b371d13cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I4ODFmYjE3NmNlNWNjMmY0ZmViZThhZDIxZGFhM2IzNzFkMTNjZA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2005-05-06T06:52:44Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-05-06T06:52:44Z"}, "message": "2005-05-06  Michael Koch  <konqueror@gmx.de>\n\n\t* java/util/Locale.java\n\t(defaultLocale): Use gnu.classpath.SystemProperties to get properties.\n\t(getLocale): New methods. Use it everywhere where instances of Locales\n\tare needed.\n\t(getDisplayLanguage): Merged javadoc.\n\t(getDisplayCountry): Likewise.\n\t(getDisplayVariant): Likewise.\n\nFrom-SVN: r99303", "tree": {"sha": "9d5a55604c5efcb5445f7133dc240640f82e6f11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d5a55604c5efcb5445f7133dc240640f82e6f11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb881fb176ce5cc2f4febe8ad21daa3b371d13cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb881fb176ce5cc2f4febe8ad21daa3b371d13cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb881fb176ce5cc2f4febe8ad21daa3b371d13cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb881fb176ce5cc2f4febe8ad21daa3b371d13cd/comments", "author": null, "committer": null, "parents": [{"sha": "8108f99852f34a6b82184cff8fdb7640be46872b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8108f99852f34a6b82184cff8fdb7640be46872b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8108f99852f34a6b82184cff8fdb7640be46872b"}], "stats": {"total": 191, "additions": 146, "deletions": 45}, "files": [{"sha": "5c67d2e082bca70bebebbd55b5bc7fa7aed211c2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb881fb176ce5cc2f4febe8ad21daa3b371d13cd/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb881fb176ce5cc2f4febe8ad21daa3b371d13cd/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=cb881fb176ce5cc2f4febe8ad21daa3b371d13cd", "patch": "@@ -1,3 +1,13 @@\n+2005-05-06  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/util/Locale.java\n+\t(defaultLocale): Use gnu.classpath.SystemProperties to get properties.\n+\t(getLocale): New methods. Use it everywhere where instances of Locales\n+\tare needed.\n+\t(getDisplayLanguage): Merged javadoc.\n+\t(getDisplayCountry): Likewise.\n+\t(getDisplayVariant): Likewise.\n+\n 2005-05-06  Archie Cobbs  <archie@dellroad.org>\n \n \t* native/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkPixbufDecoder.c:"}, {"sha": "efa698c15ee8e2033768036558f05d0de8471cb2", "filename": "libjava/java/util/Locale.java", "status": "modified", "additions": 136, "deletions": 45, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb881fb176ce5cc2f4febe8ad21daa3b371d13cd/libjava%2Fjava%2Futil%2FLocale.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb881fb176ce5cc2f4febe8ad21daa3b371d13cd/libjava%2Fjava%2Futil%2FLocale.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FLocale.java?ref=cb881fb176ce5cc2f4febe8ad21daa3b371d13cd", "patch": "@@ -1,5 +1,5 @@\n /* Locale.java -- i18n locales\n-   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2001, 2002, 2005  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,6 +38,8 @@\n \n package java.util;\n \n+import gnu.classpath.SystemProperties;\n+\n import java.io.IOException;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n@@ -76,55 +78,56 @@\n  * @author Jochen Hoenicke\n  * @author Paul Fisher\n  * @author Eric Blake (ebb9@email.byu.edu)\n+ * @author Andrew John Hughes (gnu_andrew@member.fsf.org)\n  * @since 1.1\n  * @status updated to 1.4\n  */\n public final class Locale implements Serializable, Cloneable\n {\n   /** Locale which represents the English language. */\n-  public static final Locale ENGLISH = new Locale(\"en\");\n+  public static final Locale ENGLISH = getLocale(\"en\");\n \n   /** Locale which represents the French language. */\n-  public static final Locale FRENCH = new Locale(\"fr\");\n+  public static final Locale FRENCH = getLocale(\"fr\");\n \n   /** Locale which represents the German language. */\n-  public static final Locale GERMAN = new Locale(\"de\");\n+  public static final Locale GERMAN = getLocale(\"de\");\n \n   /** Locale which represents the Italian language. */\n-  public static final Locale ITALIAN = new Locale(\"it\");\n+  public static final Locale ITALIAN = getLocale(\"it\");\n \n   /** Locale which represents the Japanese language. */\n-  public static final Locale JAPANESE = new Locale(\"ja\");\n+  public static final Locale JAPANESE = getLocale(\"ja\");\n \n   /** Locale which represents the Korean language. */\n-  public static final Locale KOREAN = new Locale(\"ko\");\n+  public static final Locale KOREAN = getLocale(\"ko\");\n \n   /** Locale which represents the Chinese language. */\n-  public static final Locale CHINESE = new Locale(\"zh\");\n+  public static final Locale CHINESE = getLocale(\"zh\");\n \n   /** Locale which represents the Chinese language as used in China. */\n-  public static final Locale SIMPLIFIED_CHINESE = new Locale(\"zh\", \"CN\");\n+  public static final Locale SIMPLIFIED_CHINESE = getLocale(\"zh\", \"CN\");\n \n   /**\n    * Locale which represents the Chinese language as used in Taiwan.\n    * Same as TAIWAN Locale.\n    */\n-  public static final Locale TRADITIONAL_CHINESE = new Locale(\"zh\", \"TW\");\n+  public static final Locale TRADITIONAL_CHINESE = getLocale(\"zh\", \"TW\");\n \n   /** Locale which represents France. */\n-  public static final Locale FRANCE = new Locale(\"fr\", \"FR\");\n+  public static final Locale FRANCE = getLocale(\"fr\", \"FR\");\n \n   /** Locale which represents Germany. */\n-  public static final Locale GERMANY = new Locale(\"de\", \"DE\");\n+  public static final Locale GERMANY = getLocale(\"de\", \"DE\");\n \n   /** Locale which represents Italy. */\n-  public static final Locale ITALY = new Locale(\"it\", \"IT\");\n+  public static final Locale ITALY = getLocale(\"it\", \"IT\");\n \n   /** Locale which represents Japan. */\n-  public static final Locale JAPAN = new Locale(\"ja\", \"JP\");\n+  public static final Locale JAPAN = getLocale(\"ja\", \"JP\");\n \n   /** Locale which represents Korea. */\n-  public static final Locale KOREA = new Locale(\"ko\", \"KR\");\n+  public static final Locale KOREA = getLocale(\"ko\", \"KR\");\n \n   /**\n    * Locale which represents China.\n@@ -145,16 +148,16 @@ public final class Locale implements Serializable, Cloneable\n   public static final Locale TAIWAN = TRADITIONAL_CHINESE;\n \n   /** Locale which represents the United Kingdom. */\n-  public static final Locale UK = new Locale(\"en\", \"GB\");\n+  public static final Locale UK = getLocale(\"en\", \"GB\");\n \n   /** Locale which represents the United States. */\n-  public static final Locale US = new Locale(\"en\", \"US\");\n+  public static final Locale US = getLocale(\"en\", \"US\");\n \n   /** Locale which represents the English speaking portion of Canada. */\n-  public static final Locale CANADA = new Locale(\"en\", \"CA\");\n+  public static final Locale CANADA = getLocale(\"en\", \"CA\");\n \n   /** Locale which represents the French speaking portion of Canada. */\n-  public static final Locale CANADA_FRENCH = new Locale(\"fr\", \"CA\");\n+  public static final Locale CANADA_FRENCH = getLocale(\"fr\", \"CA\");\n \n   /**\n    * Compatible with JDK 1.1+.\n@@ -195,10 +198,48 @@ public final class Locale implements Serializable, Cloneable\n    * bootstrapping has completed.\n    */\n   private static Locale defaultLocale =\n-    new Locale(System.getProperty(\"user.language\", \"en\"),\n-               System.getProperty(\"user.region\", \"\"),\n-               System.getProperty(\"user.variant\", \"\"));\n+    getLocale(SystemProperties.getProperty(\"user.language\", \"en\"),\n+              SystemProperties.getProperty(\"user.region\", \"\"),\n+              SystemProperties.getProperty(\"user.variant\", \"\"));\n \n+  /**\n+   * Retrieves the locale with the specified language from the cache.\n+   *\n+   * @param language the language of the locale to retrieve.\n+   * @return the locale.\n+   */ \n+  private static Locale getLocale(String language)\n+  {\n+    return getLocale(language, \"\", \"\");\n+  }\n+  \n+  /**\n+   * Retrieves the locale with the specified language and region\n+   * from the cache.\n+   *\n+   * @param language the language of the locale to retrieve.\n+   * @param region the region of the locale to retrieve.\n+   * @return the locale.\n+   */ \n+  private static Locale getLocale(String language, String region)\n+  {\n+    return getLocale(language, region, \"\");\n+  }\n+  \n+  /**\n+   * Retrieves the locale with the specified language, region\n+   * and variant from the cache.\n+   *\n+   * @param language the language of the locale to retrieve.\n+   * @param region the region of the locale to retrieve.\n+   * @param variant the variant of the locale to retrieve.\n+   * @return the locale.\n+   */ \n+  private static Locale getLocale(String language, String region, String variant)\n+  {\n+    return new Locale(language, region, variant);\n+  }\n+  \n   /**\n    * Convert new iso639 codes to the old ones.\n    *\n@@ -529,19 +570,36 @@ public String getDisplayLanguage()\n   }\n \n   /**\n-   * Gets the language name suitable for display to the user, formatted\n-   * for a specified locale.\n-   *\n-   * @param locale locale to use for formatting\n+   * <p>\n+   * Gets the name of the language specified by this locale, in a form suitable\n+   * for display to the user.  If possible, the display name will be localized\n+   * to the specified locale.  For example, if the locale instance is\n+   * <code>Locale.GERMANY</code>, and the specified locale is <code>Locale.UK</code>,\n+   * the result would be 'German'.  Using the German locale would instead give\n+   * 'Deutsch'.  If the display name can not be localized to the supplied\n+   * locale, it will fall back on other output in the following order:\n+   * </p>\n+   * <ul>\n+   * <li>the display name in the default locale</li>\n+   * <li>the display name in English</li>\n+   * <li>the ISO code</li>\n+   * </ul>\n+   * <p>\n+   * If the language is unspecified by this locale, then the empty string is\n+   * returned.\n+   * </p>\n+   *\n+   * @param inLocale the locale to use for formatting the display string.\n    * @return the language name of this locale localized to the given locale,\n-   *         with the ISO code as backup\n+   *         with the default locale, English and the ISO code as backups.\n+   * @throws NullPointerException if the supplied locale is null.\n    */\n-  public String getDisplayLanguage(Locale locale)\n+  public String getDisplayLanguage(Locale inLocale)\n   {\n     try\n       {\n         ResourceBundle bundle\n-          = ResourceBundle.getBundle(\"gnu.java.locale.iso639\", locale);\n+          = ResourceBundle.getBundle(\"gnu.java.locale.iso639\", inLocale);\n         return bundle.getString(language);\n       }\n     catch (MissingResourceException ex)\n@@ -567,19 +625,36 @@ public String getDisplayCountry()\n   }\n \n   /**\n-   * Gets the country name suitable for display to the user, formatted\n-   * for a specified locale.\n-   *\n-   * @param locale locale to use for formatting\n+   * <p>\n+   * Gets the name of the country specified by this locale, in a form suitable\n+   * for display to the user.  If possible, the display name will be localized\n+   * to the specified locale.  For example, if the locale instance is\n+   * <code>Locale.GERMANY</code>, and the specified locale is <code>Locale.UK</code>,\n+   * the result would be 'Germany'.  Using the German locale would instead give\n+   * 'Deutschland'.  If the display name can not be localized to the supplied\n+   * locale, it will fall back on other output in the following order:\n+   * </p>\n+   * <ul>\n+   * <li>the display name in the default locale</li>\n+   * <li>the display name in English</li>\n+   * <li>the ISO code</li>\n+   * </ul>\n+   * <p>\n+   * If the country is unspecified by this locale, then the empty string is\n+   * returned.\n+   * </p>\n+   *\n+   * @param inLocale the locale to use for formatting the display string.\n    * @return the country name of this locale localized to the given locale,\n-   *         with the ISO code as backup\n+   *         with the default locale, English and the ISO code as backups.\n+   * @throws NullPointerException if the supplied locale is null.\n    */\n-  public String getDisplayCountry(Locale locale)\n+  public String getDisplayCountry(Locale inLocale)\n   {\n     try\n       {\n         ResourceBundle bundle =\n-          ResourceBundle.getBundle(\"gnu.java.locale.iso3166\", locale);\n+          ResourceBundle.getBundle(\"gnu.java.locale.iso3166\", inLocale);\n         return bundle.getString(country);\n       }\n     catch (MissingResourceException ex)\n@@ -605,15 +680,31 @@ public String getDisplayVariant()\n   }\n \n   /**\n-   * Returns the variant name of this locale localized to the\n-   * given locale. If the localized is not found, the variant code\n-   * itself is returned.\n-   *\n-   * @param locale locale to use for formatting\n-   * @return the variant code of this locale localized to the given locale,\n-   *         with the ISO code as backup\n-   */\n-  public String getDisplayVariant(Locale locale)\n+   * <p>\n+   * Gets the name of the variant specified by this locale, in a form suitable\n+   * for display to the user.  If possible, the display name will be localized\n+   * to the specified locale.  For example, if the locale instance is a revised\n+   * variant, and the specified locale is <code>Locale.UK</code>, the result\n+   * would be 'REVISED'.  Using the German locale would instead give\n+   * 'Revidiert'.  If the display name can not be localized to the supplied\n+   * locale, it will fall back on other output in the following order:\n+   * </p>\n+   * <ul>\n+   * <li>the display name in the default locale</li>\n+   * <li>the display name in English</li>\n+   * <li>the ISO code</li>\n+   * </ul>\n+   * <p>\n+   * If the variant is unspecified by this locale, then the empty string is\n+   * returned.\n+   * </p>\n+   *\n+   * @param inLocale the locale to use for formatting the display string.\n+   * @return the variant name of this locale localized to the given locale,\n+   *         with the default locale, English and the ISO code as backups.\n+   * @throws NullPointerException if the supplied locale is null.\n+   */\n+  public String getDisplayVariant(Locale inLocale)\n   {\n     // XXX - load a bundle?\n     return variant;"}]}