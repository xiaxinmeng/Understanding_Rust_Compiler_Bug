{"sha": "1bfce0b8a46ff6168f742199cb0d36523ffca611", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJmY2UwYjhhNDZmZjYxNjhmNzQyMTk5Y2IwZDM2NTIzZmZjYTYxMQ==", "commit": {"author": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1996-09-18T20:49:46Z"}, "committer": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1996-09-18T20:49:46Z"}, "message": "(ASM_OUTPUT_MI_THUNK): Handle functions returning an aggregate.\n\nFrom-SVN: r12739", "tree": {"sha": "194e8e12e836fbe32db83ac4ed77b722a175fef1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/194e8e12e836fbe32db83ac4ed77b722a175fef1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bfce0b8a46ff6168f742199cb0d36523ffca611", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bfce0b8a46ff6168f742199cb0d36523ffca611", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bfce0b8a46ff6168f742199cb0d36523ffca611", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bfce0b8a46ff6168f742199cb0d36523ffca611/comments", "author": null, "committer": null, "parents": [{"sha": "7fcdf4c26b5181466cec06573b45580eb686a22b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fcdf4c26b5181466cec06573b45580eb686a22b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fcdf4c26b5181466cec06573b45580eb686a22b"}], "stats": {"total": 79, "additions": 41, "deletions": 38}, "files": [{"sha": "c74f2918dc5347a7baca1ff1b7361a22952d11b3", "filename": "gcc/config/i386/unix.h", "status": "modified", "additions": 41, "deletions": 38, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bfce0b8a46ff6168f742199cb0d36523ffca611/gcc%2Fconfig%2Fi386%2Funix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bfce0b8a46ff6168f742199cb0d36523ffca611/gcc%2Fconfig%2Fi386%2Funix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Funix.h?ref=1bfce0b8a46ff6168f742199cb0d36523ffca611", "patch": "@@ -150,42 +150,45 @@ Boston, MA 02111-1307, USA.  */\n \n /* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n    Used for C++ multiple inheritance.  */\n-#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)\t  \\\n-do {\t\t\t\t\t\t\t\t\t  \\\n-  tree parm;\t\t\t\t\t\t\t\t  \\\n-\t\t\t\t\t\t\t\t\t  \\\n-  if (i386_regparm > 0)\t\t\t\t\t\t\t  \\\n-    parm = TYPE_ARG_TYPES (TREE_TYPE (function));\t\t\t  \\\n-  else\t\t\t\t\t\t\t\t\t  \\\n-    parm = NULL_TREE;\t\t\t\t\t\t\t  \\\n-  for (; parm; parm = TREE_CHAIN (parm))\t\t\t\t  \\\n-    if (TREE_VALUE (parm) == void_type_node)\t\t\t\t  \\\n-      break;\t\t\t\t\t\t\t\t  \\\n-  fprintf (FILE, \"\\taddl $%d,%s\\n\", DELTA, parm ? \"%eax\" : \"4(%esp)\");\t  \\\n-\t\t\t\t\t\t\t\t\t  \\\n-  if (flag_pic)\t\t\t\t\t\t\t\t  \\\n-    {\t\t\t\t\t\t\t\t\t  \\\n-      rtx xops[2];\t\t\t\t\t\t\t  \\\n-      xops[0] = pic_offset_table_rtx;\t\t\t\t\t  \\\n-      xops[1] = (rtx) gen_label_rtx ();\t\t\t\t\t  \\\n-\t\t\t\t\t\t\t\t\t  \\\n-      if (i386_regparm > 2)\t\t\t\t\t\t  \\\n-\tabort ();\t\t\t\t\t\t\t  \\\n-      output_asm_insn (\"push%L0 %0\", xops);\t\t\t\t  \\\n-      output_asm_insn (AS1 (call,%P1), xops);\t\t\t\t  \\\n-      ASM_OUTPUT_INTERNAL_LABEL (FILE, \"L\", CODE_LABEL_NUMBER (xops[1])); \\\n-      output_asm_insn (AS1 (pop%L0,%0), xops);\t\t\t\t  \\\n-      output_asm_insn (\"addl $_GLOBAL_OFFSET_TABLE_+[.-%P1],%0\", xops);\t  \\\n-      fprintf (FILE, \"\\tmovl \");\t\t\t\t\t  \\\n-      assemble_name\t\t\t\t\t\t\t  \\\n-\t(FILE, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (FUNCTION)));\t  \\\n-      fprintf (FILE, \"@GOT(%%ebx),%%ecx\\n\\tpopl %%ebx\\n\\tjmp *%%ecx\\n\");  \\\n-    }\t\t\t\t\t\t\t\t\t  \\\n-  else\t\t\t\t\t\t\t\t\t  \\\n-    {\t\t\t\t\t\t\t\t\t  \\\n-      fprintf (FILE, \"\\tjmp \");\t\t\t\t\t\t  \\\n-      assemble_name\t\t\t\t\t\t\t  \\\n-\t(FILE, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (FUNCTION)));\t  \\\n-      fprintf (FILE, \"\\n\");\t\t\t\t\t\t  \\\n-    }\t\t\t\t\t\t\t\t\t  \\\n+#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)\t      \\\n+do {\t\t\t\t\t\t\t\t\t      \\\n+  tree parm;\t\t\t\t\t\t\t\t      \\\n+\t\t\t\t\t\t\t\t\t      \\\n+  if (i386_regparm > 0)\t\t\t\t\t\t\t      \\\n+    parm = TYPE_ARG_TYPES (TREE_TYPE (function));\t\t\t      \\\n+  else\t\t\t\t\t\t\t\t\t      \\\n+    parm = NULL_TREE;\t\t\t\t\t\t\t      \\\n+  for (; parm; parm = TREE_CHAIN (parm))\t\t\t\t      \\\n+    if (TREE_VALUE (parm) == void_type_node)\t\t\t\t      \\\n+      break;\t\t\t\t\t\t\t\t      \\\n+  fprintf (FILE, \"\\taddl $%d,%s\\n\", DELTA,\t\t\t\t      \\\n+\t   parm ? \"%eax\"\t\t\t\t\t\t      \\\n+\t   : aggregate_value_p (TREE_TYPE (TREE_TYPE (FUNCTION))) ? \"8(%esp)\" \\\n+\t   : \"4(%esp)\");\t\t\t\t\t\t      \\\n+\t\t\t\t\t\t\t\t\t      \\\n+  if (flag_pic)\t\t\t\t\t\t\t\t      \\\n+    {\t\t\t\t\t\t\t\t\t      \\\n+      rtx xops[2];\t\t\t\t\t\t\t      \\\n+      xops[0] = pic_offset_table_rtx;\t\t\t\t\t      \\\n+      xops[1] = (rtx) gen_label_rtx ();\t\t\t\t\t      \\\n+\t\t\t\t\t\t\t\t\t      \\\n+      if (i386_regparm > 2)\t\t\t\t\t\t      \\\n+\tabort ();\t\t\t\t\t\t\t      \\\n+      output_asm_insn (\"push%L0 %0\", xops);\t\t\t\t      \\\n+      output_asm_insn (AS1 (call,%P1), xops);\t\t\t\t      \\\n+      ASM_OUTPUT_INTERNAL_LABEL (FILE, \"L\", CODE_LABEL_NUMBER (xops[1]));     \\\n+      output_asm_insn (AS1 (pop%L0,%0), xops);\t\t\t\t      \\\n+      output_asm_insn (\"addl $_GLOBAL_OFFSET_TABLE_+[.-%P1],%0\", xops);\t      \\\n+      fprintf (FILE, \"\\tmovl \");\t\t\t\t\t      \\\n+      assemble_name\t\t\t\t\t\t\t      \\\n+\t(FILE, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (FUNCTION)));\t      \\\n+      fprintf (FILE, \"@GOT(%%ebx),%%ecx\\n\\tpopl %%ebx\\n\\tjmp *%%ecx\\n\");      \\\n+    }\t\t\t\t\t\t\t\t\t      \\\n+  else\t\t\t\t\t\t\t\t\t      \\\n+    {\t\t\t\t\t\t\t\t\t      \\\n+      fprintf (FILE, \"\\tjmp \");\t\t\t\t\t\t      \\\n+      assemble_name\t\t\t\t\t\t\t      \\\n+\t(FILE, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (FUNCTION)));\t      \\\n+      fprintf (FILE, \"\\n\");\t\t\t\t\t\t      \\\n+    }\t\t\t\t\t\t\t\t\t      \\\n } while (0)"}]}