{"sha": "d030f4b2d7c66c17ebf516b22d01cce27427670e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAzMGY0YjJkN2M2NmMxN2ViZjUxNmIyMmQwMWNjZTI3NDI3NjcwZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-20T11:52:46Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-20T11:52:46Z"}, "message": "(push_reload): Don't reload inside a SUBREG when SUBREG_WORD is\nnonzero.\n\nFrom-SVN: r9757", "tree": {"sha": "eefdc0b2d4f298967bbbda6270f4fc10774b8660", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eefdc0b2d4f298967bbbda6270f4fc10774b8660"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d030f4b2d7c66c17ebf516b22d01cce27427670e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d030f4b2d7c66c17ebf516b22d01cce27427670e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d030f4b2d7c66c17ebf516b22d01cce27427670e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d030f4b2d7c66c17ebf516b22d01cce27427670e/comments", "author": null, "committer": null, "parents": [{"sha": "c102bba010c9dcd4b58d4a3ea1effe24c98d859e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c102bba010c9dcd4b58d4a3ea1effe24c98d859e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c102bba010c9dcd4b58d4a3ea1effe24c98d859e"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "f354048aea99f48fc744b135313eac767bae7aef", "filename": "gcc/reload.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d030f4b2d7c66c17ebf516b22d01cce27427670e/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d030f4b2d7c66c17ebf516b22d01cce27427670e/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=d030f4b2d7c66c17ebf516b22d01cce27427670e", "patch": "@@ -798,9 +798,11 @@ push_reload (in, out, inloc, outloc, class,\n \n      Finally, reload the inner expression if it is a register that is in\n      the class whose registers cannot be referenced in a different size\n-     and M1 is not the same size as M2.  */\n+     and M1 is not the same size as M2.  If SUBREG_WORD is nonzero, we\n+     cannot reload just the inside since we might end up with the wrong\n+     register class. */\n \n-  if (in != 0 && GET_CODE (in) == SUBREG\n+  if (in != 0 && GET_CODE (in) == SUBREG && SUBREG_WORD (in) == 0\n #ifdef CLASS_CANNOT_CHANGE_SIZE\n       && class != CLASS_CANNOT_CHANGE_SIZE\n #endif\n@@ -898,7 +900,7 @@ push_reload (in, out, inloc, outloc, class,\n      storing in a subreg is entitled to clobber it all\n      (except in the case of STRICT_LOW_PART,\n      and in that case the constraint should label it input-output.)  */\n-  if (out != 0 && GET_CODE (out) == SUBREG\n+  if (out != 0 && GET_CODE (out) == SUBREG && SUBREG_WORD (out) == 0\n #ifdef CLASS_CANNOT_CHANGE_SIZE\n       && class != CLASS_CANNOT_CHANGE_SIZE\n #endif"}]}