{"sha": "4f45da44cd3a43e9daf5cb12573d80803a2c1028", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY0NWRhNDRjZDNhNDNlOWRhZjVjYjEyNTczZDgwODAzYTJjMTAyOA==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2016-05-19T17:47:40Z"}, "committer": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2016-05-19T17:47:40Z"}, "message": "darn-0.c: New test.\n\ngcc/testsuite/ChangeLog:\n\n2016-05-19  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* gcc.target/powerpc/darn-0.c: New test.\n\t* gcc.target/powerpc/darn-1.c: New test.\n\t* gcc.target/powerpc/darn-2.c: New test.\n\n\ngcc/ChangeLog:\n\n2016-05-19  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* config/rs6000/altivec.md (UNSPEC_DARN): New unspec constant.\n\t(UNSPEC_DARN_32): New unspec constant.\n\t(UNSPEC_DARN_RAW): New unspec constant.\n\t(darn_32): New instruction.\n\t(darn_raw): New instruction.\n\t(darn): New instruction.\n\t* config/rs6000/rs6000-builtin.def (RS6000_BUILTIN_0): Add\n\tsupport and documentation for this macro.\n\t(BU_P9_MISC_1): New macro definition.\n\t(BU_P9_64BIT_MISC_0): New macro definition.\n\t(BU_P9_MISC_0): New macro definition.\n\t(darn_32): New builtin definition.\n\t(darn_raw): New builtin definition.\n\t(darn): New builtin definition.\n\t* config/rs6000/rs6000.c: Add #define RS6000_BUILTIN_0 and #undef\n\tRS6000_BUILTIN_0 directives to surround each occurrence of\n\t#include \"rs6000-builtin.def\".\n\t(rs6000_builtin_mask_calculate): Add in the RS6000_BTM_MODULO and\n\tRS6000_BTM_64BIT flags to the returned mask, depending on\n\tconfiguration.\n\t(def_builtin): Correct an error in the assignments made to the\n\tdebugging variable attr_string.\n\t(rs6000_expand_builtin): Add support for no-operand built-in\n\tfunctions.\n\t(builtin_function_type): Remove fatal_error assertion that is no\n\tlonger valid.\n\t(rs6000_common_init_builtins): Add support for no-operand built-in\n\tfunctions.\n\t* config/rs6000/rs6000.h (RS6000_BTM_MODULO): New macro\n\tdefinition.\n\t(RS6000_BTM_PURE): Enhance comment to clarify intent of this flag\n\tdefinition.\n\t(RS6000_BTM_64BIT): New macro definition.\n\t* doc/extend.texi: Document __builtin_darn (void),\n\t__builtin_darn_raw (void), and __builtin_darn_32 (void) built-in\n\tfunctions.\n\nFrom-SVN: r236480", "tree": {"sha": "2a33177a5aa3d5a0a648142848d7bfc9c383a1d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a33177a5aa3d5a0a648142848d7bfc9c383a1d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f45da44cd3a43e9daf5cb12573d80803a2c1028", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f45da44cd3a43e9daf5cb12573d80803a2c1028", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f45da44cd3a43e9daf5cb12573d80803a2c1028", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f45da44cd3a43e9daf5cb12573d80803a2c1028/comments", "author": null, "committer": null, "parents": [{"sha": "cb6b1bdffe5b81243f27dc273e930558acdfff38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb6b1bdffe5b81243f27dc273e930558acdfff38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb6b1bdffe5b81243f27dc273e930558acdfff38"}], "stats": {"total": 323, "additions": 313, "deletions": 10}, "files": [{"sha": "d44c793b840057cf87f39f9a1a1bd473c2a35f68", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f45da44cd3a43e9daf5cb12573d80803a2c1028/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f45da44cd3a43e9daf5cb12573d80803a2c1028/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f45da44cd3a43e9daf5cb12573d80803a2c1028", "patch": "@@ -1,3 +1,42 @@\n+2016-05-19  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* config/rs6000/altivec.md (UNSPEC_DARN): New unspec constant.\n+\t(UNSPEC_DARN_32): New unspec constant.\n+\t(UNSPEC_DARN_RAW): New unspec constant.\n+\t(darn_32): New instruction.\n+\t(darn_raw): New instruction.\n+\t(darn): New instruction.\n+\t* config/rs6000/rs6000-builtin.def (RS6000_BUILTIN_0): Add\n+\tsupport and documentation for this macro.\n+\t(BU_P9_MISC_1): New macro definition.\n+\t(BU_P9_64BIT_MISC_0): New macro definition.\n+\t(BU_P9_MISC_0): New macro definition.\n+\t(darn_32): New builtin definition.\n+\t(darn_raw): New builtin definition.\n+\t(darn): New builtin definition.\n+\t* config/rs6000/rs6000.c: Add #define RS6000_BUILTIN_0 and #undef\n+\tRS6000_BUILTIN_0 directives to surround each occurrence of\n+\t#include \"rs6000-builtin.def\".\n+\t(rs6000_builtin_mask_calculate): Add in the RS6000_BTM_MODULO and\n+\tRS6000_BTM_64BIT flags to the returned mask, depending on\n+\tconfiguration.\n+\t(def_builtin): Correct an error in the assignments made to the\n+\tdebugging variable attr_string.\n+\t(rs6000_expand_builtin): Add support for no-operand built-in\n+\tfunctions.\n+\t(builtin_function_type): Remove fatal_error assertion that is no\n+\tlonger valid.\n+\t(rs6000_common_init_builtins): Add support for no-operand built-in\n+\tfunctions.\n+\t* config/rs6000/rs6000.h (RS6000_BTM_MODULO): New macro\n+\tdefinition.\n+\t(RS6000_BTM_PURE): Enhance comment to clarify intent of this flag\n+\tdefinition.\n+\t(RS6000_BTM_64BIT): New macro definition.\n+\t* doc/extend.texi: Document __builtin_darn (void),\n+\t__builtin_darn_raw (void), and __builtin_darn_32 (void) built-in\n+\tfunctions.\n+\n 2016-05-19  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree-vect-loop.c (vect_analyze_loop_2): Use also "}, {"sha": "e94aec39d73618d03ccdf003eb3a5ce2e9bd816e", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f45da44cd3a43e9daf5cb12573d80803a2c1028/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f45da44cd3a43e9daf5cb12573d80803a2c1028/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=4f45da44cd3a43e9daf5cb12573d80803a2c1028", "patch": "@@ -73,6 +73,9 @@\n    UNSPEC_VUNPACK_LO_SIGN_DIRECT\n    UNSPEC_VUPKHPX\n    UNSPEC_VUPKLPX\n+   UNSPEC_DARN\n+   UNSPEC_DARN_32\n+   UNSPEC_DARN_RAW\n    UNSPEC_DST\n    UNSPEC_DSTT\n    UNSPEC_DSTST\n@@ -3590,6 +3593,27 @@\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"vecsimple\")])\n \n+(define_insn \"darn_32\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec:SI [(const_int 0)] UNSPEC_DARN_32))]\n+  \"TARGET_MODULO\"\n+  \"darn %0,0\"\n+  [(set_attr \"type\" \"integer\")])\n+\n+(define_insn \"darn_raw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (unspec:DI [(const_int 0)] UNSPEC_DARN_RAW))]\n+  \"TARGET_MODULO && TARGET_64BIT\"\n+  \"darn %0,2\"\n+  [(set_attr \"type\" \"integer\")])\n+\n+(define_insn \"darn\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (unspec:DI [(const_int 0)] UNSPEC_DARN))]\n+  \"TARGET_MODULO && TARGET_64BIT\"\n+  \"darn %0,1\"\n+  [(set_attr \"type\" \"integer\")])\n+\n (define_expand \"bcd<bcd_add_sub>_<code>\"\n   [(parallel [(set (reg:CCFP 74)\n \t\t   (compare:CCFP"}, {"sha": "190df93bfdcca0a3ace0c48804f1ff7f3f702036", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f45da44cd3a43e9daf5cb12573d80803a2c1028/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f45da44cd3a43e9daf5cb12573d80803a2c1028/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=4f45da44cd3a43e9daf5cb12573d80803a2c1028", "patch": "@@ -24,6 +24,7 @@\n    <http://www.gnu.org/licenses/>.  */\n \n /* Before including this file, some macros must be defined:\n+   RS6000_BUILTIN_0 -- 0 arg builtins\n    RS6000_BUILTIN_1 -- 1 arg builtins\n    RS6000_BUILTIN_2 -- 2 arg builtins\n    RS6000_BUILTIN_3 -- 3 arg builtins\n@@ -43,6 +44,10 @@\n \tATTR\tbuiltin attribute information.\n \tICODE\tInsn code of the function that implents the builtin.  */\n \n+#ifndef RS6000_BUILTIN_0\n+  #error \"RS6000_BUILTIN_0 is not defined.\"\n+#endif\n+\n #ifndef RS6000_BUILTIN_1\n   #error \"RS6000_BUILTIN_1 is not defined.\"\n #endif\n@@ -637,6 +642,41 @@\n \t\t     | RS6000_BTC_TERNARY),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n+/* Miscellaneous builtins for instructions added in ISA 3.0.  These\n+   instructions don't require either the DFP or VSX options, just the basic\n+   ISA 3.0 enablement since they operate on general purpose registers.  */\n+#define BU_P9_MISC_1(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n+  RS6000_BUILTIN_1 (MISC_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_MODULO,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_UNARY),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n+/* Miscellaneous builtins for instructions added in ISA 3.0.  These\n+   instructions don't require either the DFP or VSX options, just the basic\n+   ISA 3.0 enablement since they operate on general purpose registers,\n+   and they require 64-bit addressing.  */\n+#define BU_P9_64BIT_MISC_0(ENUM, NAME, ATTR, ICODE)\t\t\t\\\n+  RS6000_BUILTIN_0 (MISC_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_MODULO                                   \\\n+                     | RS6000_BTM_64BIT,\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_SPECIAL),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n+/* Miscellaneous builtins for instructions added in ISA 3.0.  These\n+   instructions don't require either the DFP or VSX options, just the basic\n+   ISA 3.0 enablement since they operate on general purpose registers.  */\n+#define BU_P9_MISC_0(ENUM, NAME, ATTR, ICODE)                      \\\n+  RS6000_BUILTIN_0 (MISC_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_MODULO,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_SPECIAL),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n /* 128-bit long double floating point builtins.  */\n #define BU_LDBL128_2(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n   RS6000_BUILTIN_2 (MISC_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n@@ -1653,6 +1693,11 @@ BU_P8V_MISC_3 (BCDSUB_OV,\t\"bcdsub_ov\",\tCONST,\tbcdsub_unordered)\n BU_DFP_MISC_2 (PACK_TD,\t\t\"pack_dec128\",\t\tCONST,\tpacktd)\n BU_DFP_MISC_2 (UNPACK_TD,\t\"unpack_dec128\",\tCONST,\tunpacktd)\n \n+/* 0 argument general-purpose register functions added in ISA 3.0 (power9).  */\n+BU_P9_MISC_0 (DARN_32,\t\t\"darn_32\", \t\tMISC, darn_32)\n+BU_P9_64BIT_MISC_0 (DARN_RAW,\t\"darn_raw\", \t\tMISC, darn_raw)\n+BU_P9_64BIT_MISC_0 (DARN,\t\"darn\",\t\t\tMISC, darn)\n+\n BU_LDBL128_2 (PACK_TF,\t\t\"pack_longdouble\",\tCONST,\tpacktf)\n BU_LDBL128_2 (UNPACK_TF,\t\"unpack_longdouble\",\tCONST,\tunpacktf)\n "}, {"sha": "092867520d3504fcc843e9693061f91220c1ccc9", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 134, "deletions": 9, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f45da44cd3a43e9daf5cb12573d80803a2c1028/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f45da44cd3a43e9daf5cb12573d80803a2c1028/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=4f45da44cd3a43e9daf5cb12573d80803a2c1028", "patch": "@@ -1139,6 +1139,7 @@ struct processor_costs ppca2_cost = {\n \n \f\n /* Table that classifies rs6000 builtin functions (pure, const, etc.).  */\n+#undef RS6000_BUILTIN_0\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3\n@@ -1151,6 +1152,9 @@ struct processor_costs ppca2_cost = {\n #undef RS6000_BUILTIN_S\n #undef RS6000_BUILTIN_X\n \n+#define RS6000_BUILTIN_0(ENUM, NAME, MASK, ATTR, ICODE) \\\n+  { NAME, ICODE, MASK, ATTR },\n+\n #define RS6000_BUILTIN_1(ENUM, NAME, MASK, ATTR, ICODE) \\\n   { NAME, ICODE, MASK, ATTR },\n \n@@ -1196,6 +1200,7 @@ static const struct rs6000_builtin_info_type rs6000_builtin_info[] =\n #include \"rs6000-builtin.def\"\n };\n \n+#undef RS6000_BUILTIN_0\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3\n@@ -3663,6 +3668,8 @@ rs6000_builtin_mask_calculate (void)\n \t  | ((rs6000_cpu == PROCESSOR_CELL) ? RS6000_BTM_CELL      : 0)\n \t  | ((TARGET_P8_VECTOR)\t\t    ? RS6000_BTM_P8_VECTOR : 0)\n \t  | ((TARGET_P9_VECTOR)\t\t    ? RS6000_BTM_P9_VECTOR : 0)\n+\t  | ((TARGET_MODULO)\t\t    ? RS6000_BTM_MODULO    : 0)\n+\t  | ((TARGET_64BIT)\t\t    ? RS6000_BTM_64BIT     : 0)\n \t  | ((TARGET_CRYPTO)\t\t    ? RS6000_BTM_CRYPTO\t   : 0)\n \t  | ((TARGET_HTM)\t\t    ? RS6000_BTM_HTM\t   : 0)\n \t  | ((TARGET_DFP)\t\t    ? RS6000_BTM_DFP\t   : 0)\n@@ -12710,15 +12717,15 @@ def_builtin (const char *name, tree type, enum rs6000_builtins code)\n       /* const function, function only depends on the inputs.  */\n       TREE_READONLY (t) = 1;\n       TREE_NOTHROW (t) = 1;\n-      attr_string = \", pure\";\n+      attr_string = \", const\";\n     }\n   else if ((classify & RS6000_BTC_PURE) != 0)\n     {\n       /* pure function, function can read global memory, but does not set any\n \t external state.  */\n       DECL_PURE_P (t) = 1;\n       TREE_NOTHROW (t) = 1;\n-      attr_string = \", const\";\n+      attr_string = \", pure\";\n     }\n   else if ((classify & RS6000_BTC_FP) != 0)\n     {\n@@ -12750,6 +12757,7 @@ def_builtin (const char *name, tree type, enum rs6000_builtins code)\n \n /* Simple ternary operations: VECd = foo (VECa, VECb, VECc).  */\n \n+#undef RS6000_BUILTIN_0\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3\n@@ -12762,6 +12770,7 @@ def_builtin (const char *name, tree type, enum rs6000_builtins code)\n #undef RS6000_BUILTIN_S\n #undef RS6000_BUILTIN_X\n \n+#define RS6000_BUILTIN_0(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_1(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_2(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE) \\\n@@ -12783,6 +12792,7 @@ static const struct builtin_description bdesc_3arg[] =\n \n /* DST operations: void foo (void *, const int, const char).  */\n \n+#undef RS6000_BUILTIN_0\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3\n@@ -12795,6 +12805,7 @@ static const struct builtin_description bdesc_3arg[] =\n #undef RS6000_BUILTIN_S\n #undef RS6000_BUILTIN_X\n \n+#define RS6000_BUILTIN_0(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_1(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_2(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE)\n@@ -12816,6 +12827,7 @@ static const struct builtin_description bdesc_dst[] =\n \n /* Simple binary operations: VECc = foo (VECa, VECb).  */\n \n+#undef RS6000_BUILTIN_0\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3\n@@ -12828,6 +12840,7 @@ static const struct builtin_description bdesc_dst[] =\n #undef RS6000_BUILTIN_S\n #undef RS6000_BUILTIN_X\n \n+#define RS6000_BUILTIN_0(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_1(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_2(ENUM, NAME, MASK, ATTR, ICODE) \\\n   { MASK, ICODE, NAME, ENUM },\n@@ -12847,6 +12860,7 @@ static const struct builtin_description bdesc_2arg[] =\n #include \"rs6000-builtin.def\"\n };\n \n+#undef RS6000_BUILTIN_0\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3\n@@ -12859,6 +12873,7 @@ static const struct builtin_description bdesc_2arg[] =\n #undef RS6000_BUILTIN_S\n #undef RS6000_BUILTIN_X\n \n+#define RS6000_BUILTIN_0(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_1(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_2(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE)\n@@ -12881,6 +12896,7 @@ static const struct builtin_description bdesc_altivec_preds[] =\n };\n \n /* SPE predicates.  */\n+#undef RS6000_BUILTIN_0\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3\n@@ -12893,6 +12909,7 @@ static const struct builtin_description bdesc_altivec_preds[] =\n #undef RS6000_BUILTIN_S\n #undef RS6000_BUILTIN_X\n \n+#define RS6000_BUILTIN_0(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_1(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_2(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE)\n@@ -12913,6 +12930,7 @@ static const struct builtin_description bdesc_spe_predicates[] =\n };\n \n /* SPE evsel predicates.  */\n+#undef RS6000_BUILTIN_0\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3\n@@ -12925,6 +12943,7 @@ static const struct builtin_description bdesc_spe_predicates[] =\n #undef RS6000_BUILTIN_S\n #undef RS6000_BUILTIN_X\n \n+#define RS6000_BUILTIN_0(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_1(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_2(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE)\n@@ -12945,6 +12964,7 @@ static const struct builtin_description bdesc_spe_evsel[] =\n };\n \n /* PAIRED predicates.  */\n+#undef RS6000_BUILTIN_0\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3\n@@ -12957,6 +12977,7 @@ static const struct builtin_description bdesc_spe_evsel[] =\n #undef RS6000_BUILTIN_S\n #undef RS6000_BUILTIN_X\n \n+#define RS6000_BUILTIN_0(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_1(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_2(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE)\n@@ -12978,6 +12999,7 @@ static const struct builtin_description bdesc_paired_preds[] =\n \n /* ABS* operations.  */\n \n+#undef RS6000_BUILTIN_0\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3\n@@ -12990,6 +13012,7 @@ static const struct builtin_description bdesc_paired_preds[] =\n #undef RS6000_BUILTIN_S\n #undef RS6000_BUILTIN_X\n \n+#define RS6000_BUILTIN_0(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_1(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_2(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE)\n@@ -13012,6 +13035,7 @@ static const struct builtin_description bdesc_abs[] =\n /* Simple unary operations: VECb = foo (unsigned literal) or VECb =\n    foo (VECa).  */\n \n+#undef RS6000_BUILTIN_0\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3\n@@ -13024,6 +13048,7 @@ static const struct builtin_description bdesc_abs[] =\n #undef RS6000_BUILTIN_S\n #undef RS6000_BUILTIN_X\n \n+#define RS6000_BUILTIN_0(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_1(ENUM, NAME, MASK, ATTR, ICODE) \\\n   { MASK, ICODE, NAME, ENUM },\n \n@@ -13043,7 +13068,43 @@ static const struct builtin_description bdesc_1arg[] =\n #include \"rs6000-builtin.def\"\n };\n \n+/* Simple no-argument operations: result = __builtin_darn_32 () */\n+\n+#undef RS6000_BUILTIN_0\n+#undef RS6000_BUILTIN_1\n+#undef RS6000_BUILTIN_2\n+#undef RS6000_BUILTIN_3\n+#undef RS6000_BUILTIN_A\n+#undef RS6000_BUILTIN_D\n+#undef RS6000_BUILTIN_E\n+#undef RS6000_BUILTIN_H\n+#undef RS6000_BUILTIN_P\n+#undef RS6000_BUILTIN_Q\n+#undef RS6000_BUILTIN_S\n+#undef RS6000_BUILTIN_X\n+\n+#define RS6000_BUILTIN_0(ENUM, NAME, MASK, ATTR, ICODE) \\\n+  { MASK, ICODE, NAME, ENUM },\n+\n+#define RS6000_BUILTIN_1(ENUM, NAME, MASK, ATTR, ICODE)\n+#define RS6000_BUILTIN_2(ENUM, NAME, MASK, ATTR, ICODE)\n+#define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE)\n+#define RS6000_BUILTIN_A(ENUM, NAME, MASK, ATTR, ICODE)\n+#define RS6000_BUILTIN_D(ENUM, NAME, MASK, ATTR, ICODE)\n+#define RS6000_BUILTIN_E(ENUM, NAME, MASK, ATTR, ICODE)\n+#define RS6000_BUILTIN_H(ENUM, NAME, MASK, ATTR, ICODE)\n+#define RS6000_BUILTIN_P(ENUM, NAME, MASK, ATTR, ICODE)\n+#define RS6000_BUILTIN_Q(ENUM, NAME, MASK, ATTR, ICODE)\n+#define RS6000_BUILTIN_S(ENUM, NAME, MASK, ATTR, ICODE)\n+#define RS6000_BUILTIN_X(ENUM, NAME, MASK, ATTR, ICODE)\n+\n+static const struct builtin_description bdesc_0arg[] =\n+{\n+#include \"rs6000-builtin.def\"\n+};\n+\n /* HTM builtins.  */\n+#undef RS6000_BUILTIN_0\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3\n@@ -13056,6 +13117,7 @@ static const struct builtin_description bdesc_1arg[] =\n #undef RS6000_BUILTIN_S\n #undef RS6000_BUILTIN_X\n \n+#define RS6000_BUILTIN_0(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_1(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_2(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE)\n@@ -13075,6 +13137,7 @@ static const struct builtin_description bdesc_htm[] =\n #include \"rs6000-builtin.def\"\n };\n \n+#undef RS6000_BUILTIN_0\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3\n@@ -13159,7 +13222,6 @@ rs6000_expand_mtfsf_builtin (enum insn_code icode, tree exp)\n   return NULL_RTX;\n }\n \n-\n static rtx\n rs6000_expand_unop_builtin (enum insn_code icode, tree exp, rtx target)\n {\n@@ -15599,10 +15661,12 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n     }  \n \n   unsigned attr = rs6000_builtin_info[uns_fcode].attr & RS6000_BTC_TYPE_MASK;\n+  /* RS6000_BTC_SPECIAL represents no-operand operators.  */\n   gcc_assert (attr == RS6000_BTC_UNARY\n \t      || attr == RS6000_BTC_BINARY\n-\t      || attr == RS6000_BTC_TERNARY);\n-\n+\t      || attr == RS6000_BTC_TERNARY\n+\t      || attr == RS6000_BTC_SPECIAL);\n+  \n   /* Handle simple unary operations.  */\n   d = bdesc_1arg;\n   for (i = 0; i < ARRAY_SIZE (bdesc_1arg); i++, d++)\n@@ -15621,6 +15685,12 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n     if (d->code == fcode)\n       return rs6000_expand_ternop_builtin (d->icode, exp, target);\n \n+  /* Handle simple no-argument operations. */\n+  d = bdesc_0arg;\n+  for (i = 0; i < ARRAY_SIZE (bdesc_0arg); i++, d++)\n+    if (d->code == fcode)\n+      return rs6000_expand_zeroop_builtin (d->icode, target);\n+\n   gcc_unreachable ();\n }\n \n@@ -17001,10 +17071,6 @@ builtin_function_type (machine_mode mode_ret, machine_mode mode_arg0,\n   while (num_args > 0 && h.mode[num_args] == VOIDmode)\n     num_args--;\n \n-  if (num_args == 0)\n-    fatal_error (input_location,\n-\t\t \"internal error: builtin function %s had no type\", name);\n-\n   ret_type = builtin_mode_to_type[h.mode[0]][h.uns_p[0]];\n   if (!ret_type && h.uns_p[0])\n     ret_type = builtin_mode_to_type[h.mode[0]][0];\n@@ -17056,6 +17122,7 @@ rs6000_common_init_builtins (void)\n   tree opaque_ftype_opaque = NULL_TREE;\n   tree opaque_ftype_opaque_opaque = NULL_TREE;\n   tree opaque_ftype_opaque_opaque_opaque = NULL_TREE;\n+  tree v2si_ftype = NULL_TREE;\n   tree v2si_ftype_qi = NULL_TREE;\n   tree v2si_ftype_v2si_qi = NULL_TREE;\n   tree v2si_ftype_int_qi = NULL_TREE;\n@@ -17272,6 +17339,64 @@ rs6000_common_init_builtins (void)\n \n       def_builtin (d->name, type, d->code);\n     }\n+\n+  /* Add the simple no-argument operators.  */\n+  d = bdesc_0arg;\n+  for (i = 0; i < ARRAY_SIZE (bdesc_0arg); i++, d++)\n+    {\n+      machine_mode mode0;\n+      tree type;\n+      HOST_WIDE_INT mask = d->mask;\n+\n+      if ((mask & builtin_mask) != mask)\n+\t{\n+\t  if (TARGET_DEBUG_BUILTIN)\n+\t    fprintf (stderr, \"rs6000_builtin, skip no-argument %s\\n\", d->name);\n+\t  continue;\n+\t}\n+      if (rs6000_overloaded_builtin_p (d->code))\n+\t{\n+\t  if (!opaque_ftype_opaque)\n+\t    opaque_ftype_opaque\n+\t      = build_function_type_list (opaque_V4SI_type_node, NULL_TREE);\n+\t  type = opaque_ftype_opaque;\n+\t}\n+      else\n+\t{\n+\t  enum insn_code icode = d->icode;\n+\t  if (d->name == 0)\n+\t    {\n+\t      if (TARGET_DEBUG_BUILTIN)\n+\t\tfprintf (stderr, \"rs6000_builtin, bdesc_0arg[%lu] no name\\n\",\n+\t\t\t (long unsigned) i);\n+\t      continue;\n+\t    }\n+\t  if (icode == CODE_FOR_nothing)\n+\t    {\n+\t      if (TARGET_DEBUG_BUILTIN)\n+\t\tfprintf (stderr,\n+\t\t\t \"rs6000_builtin, skip no-argument %s (no code)\\n\",\n+\t\t\t d->name);\n+\t      continue;\n+\t    }\n+\t  mode0 = insn_data[icode].operand[0].mode;\n+\t  if (mode0 == V2SImode)\n+\t    {\n+\t      /* code for SPE */\n+\t      if (! (type = v2si_ftype))\n+\t\t{\n+\t\t  v2si_ftype\n+\t\t    = build_function_type_list (opaque_V2SI_type_node, \n+\t\t\t\t\t\tNULL_TREE);\n+\t\t  type = v2si_ftype;\n+\t\t}\n+\t    }\n+\t  else\n+\t    type = builtin_function_type (mode0, VOIDmode, VOIDmode, VOIDmode,\n+\t\t\t\t\t  d->code, d->name);\n+\t}\n+      def_builtin (d->name, type, d->code);\n+    }\n }\n \n /* Set up AIX/Darwin/64-bit Linux quad floating point routines.  */"}, {"sha": "a438bfb1b23e046027c377b87522acb489958b51", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f45da44cd3a43e9daf5cb12573d80803a2c1028/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f45da44cd3a43e9daf5cb12573d80803a2c1028/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=4f45da44cd3a43e9daf5cb12573d80803a2c1028", "patch": "@@ -648,6 +648,11 @@ extern int rs6000_vector_align[];\n #define MASK_PROTOTYPE\t\t\tOPTION_MASK_PROTOTYPE\n #endif\n \n+#ifdef TARGET_MODULO\n+#define RS6000_BTM_MODULO\t\tOPTION_MASK_MODULO\n+#endif\n+\n+\n /* For power systems, we want to enable Altivec and VSX builtins even if the\n    user did not use -maltivec or -mvsx to allow the builtins to be used inside\n    of #pragma GCC target or the target attribute to change the code level for a\n@@ -2636,7 +2641,9 @@ extern int frame_pointer_needed;\n \n #define RS6000_BTC_MISC\t\t0x00000000\t/* No special attributes.  */\n #define RS6000_BTC_CONST\t0x00000100\t/* uses no global state.  */\n-#define RS6000_BTC_PURE\t\t0x00000200\t/* reads global state/mem.  */\n+#define RS6000_BTC_PURE\t\t0x00000200\t/* reads global\n+\t\t\t\t\t\t   state/mem and does\n+\t\t\t\t\t\t   not modify global state.  */\n #define RS6000_BTC_FP\t\t0x00000400\t/* depends on rounding mode.  */\n #define RS6000_BTC_ATTR_MASK\t0x00000700\t/* Mask of the attributes.  */\n \n@@ -2672,6 +2679,7 @@ extern int frame_pointer_needed;\n #define RS6000_BTM_DFP\t\tMASK_DFP\t/* Decimal floating point.  */\n #define RS6000_BTM_HARD_FLOAT\tMASK_SOFT_FLOAT\t/* Hardware floating point.  */\n #define RS6000_BTM_LDBL128\tMASK_MULTIPLE\t/* 128-bit long double.  */\n+#define RS6000_BTM_64BIT\tMASK_64BIT\t/* 64-bit addressing.  */\n \n #define RS6000_BTM_COMMON\t(RS6000_BTM_ALTIVEC\t\t\t\\\n \t\t\t\t | RS6000_BTM_VSX\t\t\t\\\n@@ -2691,6 +2699,7 @@ extern int frame_pointer_needed;\n \n /* Define builtin enum index.  */\n \n+#undef RS6000_BUILTIN_0\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3\n@@ -2703,6 +2712,7 @@ extern int frame_pointer_needed;\n #undef RS6000_BUILTIN_S\n #undef RS6000_BUILTIN_X\n \n+#define RS6000_BUILTIN_0(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n #define RS6000_BUILTIN_1(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n #define RS6000_BUILTIN_2(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n #define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n@@ -2722,6 +2732,7 @@ enum rs6000_builtins\n   RS6000_BUILTIN_COUNT\n };\n \n+#undef RS6000_BUILTIN_0\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3"}, {"sha": "5199134ca3c50e43247b3fb62067d21d3dd2f689", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f45da44cd3a43e9daf5cb12573d80803a2c1028/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f45da44cd3a43e9daf5cb12573d80803a2c1028/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=4f45da44cd3a43e9daf5cb12573d80803a2c1028", "patch": "@@ -14685,6 +14685,23 @@ The @code{__builtin_divde}, @code{__builtin_divdeo},\n @code{__builtin_divdeu}, @code{__builtin_divdeou} functions require a\n 64-bit environment support ISA 2.06 or later.\n \n+The following built-in functions are available for the PowerPC family\n+of processors, starting with ISA 3.0 or later (@option{-mcpu=power9}\n+or @option{-mmodulo}):\n+@smallexample\n+long long __builtin_darn (void);\n+long long __builtin_darn_raw (void);\n+int __builtin_darn_32 (void);\n+@end smallexample\n+\n+The @code{__builtin_darn} and @code{__builtin_darn_raw}\n+functions require a\n+64-bit environment supporting ISA 3.0 or later.\n+The @code{__builtin_darn} function provides a 64-bit conditioned\n+random number.  The @code{__builtin_darn_raw} function provides a\n+64-bit raw random number.  The @code{__builtin_darn_32} function\n+provides a 32-bit random number.\n+\n The following built-in functions are available for the PowerPC family\n of processors when hardware decimal floating point\n (@option{-mhard-dfp}) is available:"}, {"sha": "f543d183219c903efe8ad37c8a41ac2a26b6ae32", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f45da44cd3a43e9daf5cb12573d80803a2c1028/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f45da44cd3a43e9daf5cb12573d80803a2c1028/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4f45da44cd3a43e9daf5cb12573d80803a2c1028", "patch": "@@ -1,3 +1,9 @@\n+2016-05-19  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/darn-0.c: New test.\n+\t* gcc.target/powerpc/darn-1.c: New test.\n+\t* gcc.target/powerpc/darn-2.c: New test.\n+\n 2016-05-19  Marek Polacek  <polacek@redhat.com>\n \n \tPR tree-optimization/71031"}, {"sha": "ce2e25e22a18051e2153c8b2f410f3e7135bac36", "filename": "gcc/testsuite/gcc.target/powerpc/darn-0.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f45da44cd3a43e9daf5cb12573d80803a2c1028/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdarn-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f45da44cd3a43e9daf5cb12573d80803a2c1028/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdarn-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdarn-0.c?ref=4f45da44cd3a43e9daf5cb12573d80803a2c1028", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+int get_random ()\n+{\n+  return __builtin_darn_32 ();\n+}\n+\n+/* { dg-final { scan-assembler\t   \"darn\" } } */"}, {"sha": "d79e5c1b4d9cc88b1c231c9fed49cde0746620c3", "filename": "gcc/testsuite/gcc.target/powerpc/darn-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f45da44cd3a43e9daf5cb12573d80803a2c1028/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdarn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f45da44cd3a43e9daf5cb12573d80803a2c1028/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdarn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdarn-1.c?ref=4f45da44cd3a43e9daf5cb12573d80803a2c1028", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+/* { dg-require-effective-target lp64 } */\n+\n+#include <altivec.h>\n+\n+long long get_conditioned_random ()\n+{\n+  return __builtin_darn ();\n+}\n+\n+/* { dg-final { scan-assembler\t   \"darn\" } } */"}, {"sha": "7f47332ec499c5d87a3ba9bc24ab7e7c029ad6b0", "filename": "gcc/testsuite/gcc.target/powerpc/darn-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f45da44cd3a43e9daf5cb12573d80803a2c1028/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdarn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f45da44cd3a43e9daf5cb12573d80803a2c1028/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdarn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdarn-2.c?ref=4f45da44cd3a43e9daf5cb12573d80803a2c1028", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+/* { dg-require-effective-target lp64 } */\n+\n+#include <altivec.h>\n+\n+long long get_raw_random ()\n+{\n+  return __builtin_darn_raw ();\n+}\n+\n+/* { dg-final { scan-assembler\t   \"darn\" } } */"}]}