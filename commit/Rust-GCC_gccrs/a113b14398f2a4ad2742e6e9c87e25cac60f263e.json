{"sha": "a113b14398f2a4ad2742e6e9c87e25cac60f263e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTExM2IxNDM5OGYyYTRhZDI3NDJlNmU5Yzg3ZTI1Y2FjNjBmMjYzZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-07-19T19:44:02Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-07-19T19:44:02Z"}, "message": "analyzer: add svalue::can_have_associated_state_p [PR101503]\n\nPR analyzer/101503 reports an assertion failure due to an unexpected\n\"UNKNOWN\" value (due to using --param analyzer-max-svalue-depth=0).\n\nThis patch fixes this by rejecting attempts to purge state involving\nunknown/poisoned svalues (in region_model::purge_state_involving),\nas these svalues should not have state associated with them - they\nare singletons w.r.t each type.\n\nTo be more systematic about this, the patch also introduces a new\nsvalue::can_have_associated_state_p which returns false for\nunknown/poisoned svalues, so that we can reject adding constraints\nor sm-state on them, or building various kinds of svalue in terms\nof them (e.g. unary ops, binary ops, etc).\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/101503\n\t* constraint-manager.cc (constraint_manager::add_constraint): Use\n\tcan_have_associated_state_p rather than testing for unknown.\n\t(constraint_manager::get_or_add_equiv_class): Likewise.\n\t* program-state.cc (sm_state_map::set_state): Likewise.\n\t(sm_state_map::impl_set_state): Add assertion.\n\t* region-model-manager.cc\n\t(region_model_manager::maybe_fold_unaryop): Handle poisoned\n\tvalues.\n\t(region_model_manager::maybe_fold_binop): Move handling of unknown\n\tvalues...\n\t(region_model_manager::get_or_create_binop): ...to here, and\n\tgeneralize to use can_have_associated_state_p.\n\t(region_model_manager::maybe_fold_sub_svalue): Use\n\tcan_have_associated_state_p rather than testing for unknown.\n\t(region_model_manager::maybe_fold_repeated_svalue): Use unknown\n\twhen the size or repeated value is \"unknown\"/\"poisoned\".\n\t* region-model.cc (region_model::purge_state_involving): Reject\n\tattempts to purge unknown/poisoned svalues, as these svalues\n\tshould not have state associated with them.\n\t* svalue.cc (sub_svalue::sub_svalue): Assert that we're building\n\ton top of an svalue with can_have_associated_state_p.\n\t(repeated_svalue::repeated_svalue): Likewise.\n\t(bits_within_svalue::bits_within_svalue): Likewise.\n\t* svalue.h (svalue::can_have_associated_state_p): New.\n\t(unknown_svalue::can_have_associated_state_p): New.\n\t(poisoned_svalue::can_have_associated_state_p): New.\n\t(unaryop_svalue::unaryop_svalue): Assert that we're building on\n\ttop of an svalue with can_have_associated_state_p.\n\t(binop_svalue::binop_svalue): Likewise.\n\t(widening_svalue::widening_svalue): Likewise.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/101503\n\t* gcc.dg/analyzer/pr101503.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "8022ef245e77dfa5ecfa223395d01bf907f54b37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8022ef245e77dfa5ecfa223395d01bf907f54b37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a113b14398f2a4ad2742e6e9c87e25cac60f263e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a113b14398f2a4ad2742e6e9c87e25cac60f263e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a113b14398f2a4ad2742e6e9c87e25cac60f263e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a113b14398f2a4ad2742e6e9c87e25cac60f263e/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f007a638a86e4b59bef0a0d8efa5bb8c5e5b200a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f007a638a86e4b59bef0a0d8efa5bb8c5e5b200a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f007a638a86e4b59bef0a0d8efa5bb8c5e5b200a"}], "stats": {"total": 75, "additions": 61, "deletions": 14}, "files": [{"sha": "f59929a75ca85d9eca603852bbfaf371124ca874", "filename": "gcc/analyzer/constraint-manager.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a113b14398f2a4ad2742e6e9c87e25cac60f263e/gcc%2Fanalyzer%2Fconstraint-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a113b14398f2a4ad2742e6e9c87e25cac60f263e/gcc%2Fanalyzer%2Fconstraint-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fconstraint-manager.cc?ref=a113b14398f2a4ad2742e6e9c87e25cac60f263e", "patch": "@@ -833,9 +833,9 @@ constraint_manager::add_constraint (const svalue *lhs,\n   lhs = lhs->unwrap_any_unmergeable ();\n   rhs = rhs->unwrap_any_unmergeable ();\n \n-  /* Nothing can be known about unknown values.  */\n-  if (lhs->get_kind () == SK_UNKNOWN\n-      || rhs->get_kind () == SK_UNKNOWN)\n+  /* Nothing can be known about unknown/poisoned values.  */\n+  if (!lhs->can_have_associated_state_p ()\n+      || !rhs->can_have_associated_state_p ())\n     /* Not a contradiction.  */\n     return true;\n \n@@ -1175,7 +1175,7 @@ constraint_manager::get_or_add_equiv_class (const svalue *sval)\n {\n   equiv_class_id result (-1);\n \n-  gcc_assert (sval->get_kind () != SK_UNKNOWN);\n+  gcc_assert (sval->can_have_associated_state_p ());\n \n   /* Convert all NULL pointers to (void *) to avoid state explosions\n      involving all of the various (foo *)NULL vs (bar *)NULL.  */"}, {"sha": "5bb867678735afa46580cfad095c9e24f7563b6b", "filename": "gcc/analyzer/program-state.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a113b14398f2a4ad2742e6e9c87e25cac60f263e/gcc%2Fanalyzer%2Fprogram-state.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a113b14398f2a4ad2742e6e9c87e25cac60f263e/gcc%2Fanalyzer%2Fprogram-state.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.cc?ref=a113b14398f2a4ad2742e6e9c87e25cac60f263e", "patch": "@@ -453,8 +453,8 @@ sm_state_map::set_state (region_model *model,\n   if (model == NULL)\n     return;\n \n-  /* Reject attempts to set state on UNKNOWN.  */\n-  if (sval->get_kind () == SK_UNKNOWN)\n+  /* Reject attempts to set state on UNKNOWN/POISONED.  */\n+  if (!sval->can_have_associated_state_p ())\n     return;\n \n   equiv_class &ec = model->get_constraints ()->get_equiv_class (sval);\n@@ -492,6 +492,8 @@ sm_state_map::impl_set_state (const svalue *sval,\n   if (get_state (sval, ext_state) == state)\n     return false;\n \n+  gcc_assert (sval->can_have_associated_state_p ());\n+\n   /* Special-case state 0 as the default value.  */\n   if (state == 0)\n     {"}, {"sha": "fccb93ea5d1911c25ea62a0a862e410f5a5064b8", "filename": "gcc/analyzer/region-model-manager.cc", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a113b14398f2a4ad2742e6e9c87e25cac60f263e/gcc%2Fanalyzer%2Fregion-model-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a113b14398f2a4ad2742e6e9c87e25cac60f263e/gcc%2Fanalyzer%2Fregion-model-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-manager.cc?ref=a113b14398f2a4ad2742e6e9c87e25cac60f263e", "patch": "@@ -340,6 +340,13 @@ region_model_manager::maybe_fold_unaryop (tree type, enum tree_code op,\n   /* Ops on \"unknown\" are also unknown.  */\n   if (arg->get_kind () == SK_UNKNOWN)\n     return get_or_create_unknown_svalue (type);\n+  /* Likewise for \"poisoned\".  */\n+  else if (const poisoned_svalue *poisoned_sval\n+\t     = arg->dyn_cast_poisoned_svalue ())\n+    return get_or_create_poisoned_svalue (poisoned_sval->get_poison_kind (),\n+\t\t\t\t\t  type);\n+\n+  gcc_assert (arg->can_have_associated_state_p ());\n \n   switch (op)\n     {\n@@ -615,12 +622,6 @@ region_model_manager::maybe_fold_binop (tree type, enum tree_code op,\n \t     get_or_create_binop (size_type_node, op,\n \t\t\t\t  binop->get_arg1 (), arg1));\n \n-  /* Ops on \"unknown\" are also unknown (unless we can use one of the\n-     identities above).  */\n-  if (arg0->get_kind () == SK_UNKNOWN\n-      || arg1->get_kind () == SK_UNKNOWN)\n-    return get_or_create_unknown_svalue (type);\n-\n   /* etc.  */\n \n   return NULL;\n@@ -641,6 +642,12 @@ region_model_manager::get_or_create_binop (tree type, enum tree_code op,\n   if (const svalue *folded = maybe_fold_binop (type, op, arg0, arg1))\n     return folded;\n \n+  /* Ops on \"unknown\"/\"poisoned\" are unknown (unless we were able to fold\n+     it via an identity in maybe_fold_binop).  */\n+  if (!arg0->can_have_associated_state_p ()\n+      || !arg1->can_have_associated_state_p ())\n+    return get_or_create_unknown_svalue (type);\n+\n   binop_svalue::key_t key (type, op, arg0, arg1);\n   if (binop_svalue **slot = m_binop_values_map.get (key))\n     return *slot;\n@@ -658,8 +665,8 @@ region_model_manager::maybe_fold_sub_svalue (tree type,\n \t\t\t\t\t     const svalue *parent_svalue,\n \t\t\t\t\t     const region *subregion)\n {\n-  /* Subvalues of \"unknown\" are unknown.  */\n-  if (parent_svalue->get_kind () == SK_UNKNOWN)\n+  /* Subvalues of \"unknown\"/\"poisoned\" are unknown.  */\n+  if (!parent_svalue->can_have_associated_state_p ())\n     return get_or_create_unknown_svalue (type);\n \n   /* If we have a subregion of a zero-fill, it's zero.  */\n@@ -755,6 +762,11 @@ region_model_manager::maybe_fold_repeated_svalue (tree type,\n \t\t\t\t\t\t  const svalue *outer_size,\n \t\t\t\t\t\t  const svalue *inner_svalue)\n {\n+  /* Repeated \"unknown\"/\"poisoned\" is unknown.  */\n+  if (!outer_size->can_have_associated_state_p ()\n+      || !inner_svalue->can_have_associated_state_p ())\n+    return get_or_create_unknown_svalue (type);\n+\n   /* If INNER_SVALUE is the same size as OUTER_SIZE,\n      turn into simply a cast.  */\n   if (tree cst_outer_num_bytes = outer_size->maybe_get_constant ())"}, {"sha": "6d02c60449ca7dcb6696a96679b10a223757bada", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a113b14398f2a4ad2742e6e9c87e25cac60f263e/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a113b14398f2a4ad2742e6e9c87e25cac60f263e/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=a113b14398f2a4ad2742e6e9c87e25cac60f263e", "patch": "@@ -1304,6 +1304,8 @@ void\n region_model::purge_state_involving (const svalue *sval,\n \t\t\t\t     region_model_context *ctxt)\n {\n+  if (!sval->can_have_associated_state_p ())\n+    return;\n   m_store.purge_state_involving (sval, m_mgr);\n   m_constraints->purge_state_involving (sval);\n   m_dynamic_extents.purge_state_involving (sval);"}, {"sha": "094c72568181fe0683d6cf018499d7d56494c64a", "filename": "gcc/analyzer/svalue.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a113b14398f2a4ad2742e6e9c87e25cac60f263e/gcc%2Fanalyzer%2Fsvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a113b14398f2a4ad2742e6e9c87e25cac60f263e/gcc%2Fanalyzer%2Fsvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsvalue.cc?ref=a113b14398f2a4ad2742e6e9c87e25cac60f263e", "patch": "@@ -1109,6 +1109,7 @@ sub_svalue::sub_svalue (tree type, const svalue *parent_svalue,\n \t  type),\n   m_parent_svalue (parent_svalue), m_subregion (subregion)\n {\n+  gcc_assert (parent_svalue->can_have_associated_state_p ());\n }\n \n /* Implementation of svalue::dump_to_pp vfunc for sub_svalue.  */\n@@ -1165,6 +1166,8 @@ repeated_svalue::repeated_svalue (tree type,\n   m_outer_size (outer_size),\n   m_inner_svalue (inner_svalue)\n {\n+  gcc_assert (outer_size->can_have_associated_state_p ());\n+  gcc_assert (inner_svalue->can_have_associated_state_p ());\n }\n \n /* Implementation of svalue::dump_to_pp vfunc for repeated_svalue.  */\n@@ -1290,6 +1293,7 @@ bits_within_svalue::bits_within_svalue (tree type,\n   m_bits (bits),\n   m_inner_svalue (inner_svalue)\n {\n+  gcc_assert (inner_svalue->can_have_associated_state_p ());\n }\n \n /* Implementation of svalue::dump_to_pp vfunc for bits_within_svalue.  */"}, {"sha": "debe4391475b6e8c889a3a25581786fe4c461e56", "filename": "gcc/analyzer/svalue.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a113b14398f2a4ad2742e6e9c87e25cac60f263e/gcc%2Fanalyzer%2Fsvalue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a113b14398f2a4ad2742e6e9c87e25cac60f263e/gcc%2Fanalyzer%2Fsvalue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsvalue.h?ref=a113b14398f2a4ad2742e6e9c87e25cac60f263e", "patch": "@@ -160,6 +160,11 @@ class svalue\n \n   virtual bool all_zeroes_p () const;\n \n+  /* Can this svalue be involved in constraints and sm-state?\n+     Most can, but UNKNOWN and POISONED svalues are singletons\n+     per-type and thus it's meaningless for them to \"have state\".  */\n+  virtual bool can_have_associated_state_p () const { return true; }\n+\n  protected:\n   svalue (complexity c, tree type)\n   : m_complexity (c), m_type (type)\n@@ -319,6 +324,9 @@ class unknown_svalue : public svalue\n   maybe_fold_bits_within (tree type,\n \t\t\t  const bit_range &subrange,\n \t\t\t  region_model_manager *mgr) const FINAL OVERRIDE;\n+\n+  /* Unknown values are singletons per-type, so can't have state.  */\n+  bool can_have_associated_state_p () const FINAL OVERRIDE { return false; }\n };\n \n /* An enum describing a particular kind of \"poisoned\" value.  */\n@@ -389,6 +397,9 @@ class poisoned_svalue : public svalue\n \n   enum poison_kind get_poison_kind () const { return m_kind; }\n \n+  /* Poisoned svalues are singletons per-type, so can't have state.  */\n+  bool can_have_associated_state_p () const FINAL OVERRIDE { return false; }\n+\n  private:\n   enum poison_kind m_kind;\n };\n@@ -602,6 +613,7 @@ class unaryop_svalue : public svalue\n   unaryop_svalue (tree type, enum tree_code op, const svalue *arg)\n   : svalue (complexity (arg), type), m_op (op), m_arg (arg)\n   {\n+    gcc_assert (arg->can_have_associated_state_p ());\n   }\n \n   enum svalue_kind get_kind () const FINAL OVERRIDE { return SK_UNARYOP; }\n@@ -694,6 +706,8 @@ class binop_svalue : public svalue\n \t     type),\n     m_op (op), m_arg0 (arg0), m_arg1 (arg1)\n   {\n+    gcc_assert (arg0->can_have_associated_state_p ());\n+    gcc_assert (arg1->can_have_associated_state_p ());\n   }\n \n   enum svalue_kind get_kind () const FINAL OVERRIDE { return SK_BINOP; }\n@@ -1135,6 +1149,8 @@ class widening_svalue : public svalue\n     m_point (point.get_function_point ()),\n     m_base_sval (base_sval), m_iter_sval (iter_sval)\n   {\n+    gcc_assert (base_sval->can_have_associated_state_p ());\n+    gcc_assert (iter_sval->can_have_associated_state_p ());\n   }\n \n   enum svalue_kind get_kind () const FINAL OVERRIDE { return SK_WIDENING; }"}, {"sha": "16faf6eac2f79b869ae8417c889e96a019fc7c54", "filename": "gcc/testsuite/gcc.dg/analyzer/pr101503.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a113b14398f2a4ad2742e6e9c87e25cac60f263e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr101503.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a113b14398f2a4ad2742e6e9c87e25cac60f263e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr101503.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr101503.c?ref=a113b14398f2a4ad2742e6e9c87e25cac60f263e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-additional-options \"--param analyzer-max-svalue-depth=0\" } */\n+\n+int val;\n+\n+int\n+fn (void)\n+{\n+  val = fn ();\n+\n+  return 0;\n+}"}]}