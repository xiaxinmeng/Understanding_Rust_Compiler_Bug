{"sha": "8628486f4873f72a51e57cf0904f5b0f177053ad", "node_id": "C_kwDOANBUbNoAKDg2Mjg0ODZmNDg3M2Y3MmE1MWU1N2NmMDkwNGY1YjBmMTc3MDUzYWQ", "commit": {"author": {"name": "Owen Avery", "email": "powerboat9.gamer@gmail.com", "date": "2023-02-14T22:28:35Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-04-06T08:47:24Z"}, "message": "gccrs: Add AST::AltPattern class\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast-dump.cc\n\t(Dump::visit): Add AltPattern visitor.\n\t* ast/rust-ast-dump.h:\n\t(Dump::visit): Add AltPattern visitor.\n\t* ast/rust-ast-full-decls.h\n\t(class AltPattern): Add declaration.\n\t* ast/rust-ast-visitor.h:\n\t(ASTVisitor::visit): Add AltPattern visitor.\n\t* ast/rust-ast.cc\n\t(AltPattern::as_string): Add definition.\n\t(AltPattern::accept_vis): Add definition.\n\t* ast/rust-pattern.h\n\t(class AltPattern): Add declaration.\n\t* checks/errors/rust-feature-gate.h:\n\t(FeatureGate::visit) Add AltPattern visitor\n\t* expand/rust-attribute-visitor.cc\n\t(AttrVisitor::visit): Add AltPattern visitor.\n\t* expand/rust-attribute-visitor.h:\n\t(AttrVisitor::visit): Add AltPattern visitor.\n\t* hir/rust-ast-lower-base.cc\n\t(ASTLoweringBase::visit): Add AltPattern visitor.\n\t* hir/rust-ast-lower-base.h:\n\t(ASTLoweringBase::visit): Add AltPattern visitor.\n\t* resolve/rust-ast-resolve-base.cc\n\t(ResolverBase::visit): Add AltPattern visitor.\n\t* resolve/rust-ast-resolve-base.h:\n\t(ResolverBase::visit): Add AltPattern visitor.\n\t* resolve/rust-early-name-resolver.cc\n\t(EarlyNameResolver::visit): Add AltPattern visitor.\n\t* resolve/rust-early-name-resolver.h:\n\t(EarlyNameResolver::visit): Add AltPattern visitor.\n\t* util/rust-attributes.cc\n\t(AttributeChecker::visit): Add AltPattern visitor.\n\t* util/rust-attributes.h:\n\t(AttributeChecker::visit): Add AltPattern visitor.\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>", "tree": {"sha": "6ab97cf9c5469de9499b3d97ed08d88814d96a5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ab97cf9c5469de9499b3d97ed08d88814d96a5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8628486f4873f72a51e57cf0904f5b0f177053ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8628486f4873f72a51e57cf0904f5b0f177053ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8628486f4873f72a51e57cf0904f5b0f177053ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8628486f4873f72a51e57cf0904f5b0f177053ad/comments", "author": {"login": "powerboat9", "id": 7397652, "node_id": "MDQ6VXNlcjczOTc2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/7397652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/powerboat9", "html_url": "https://github.com/powerboat9", "followers_url": "https://api.github.com/users/powerboat9/followers", "following_url": "https://api.github.com/users/powerboat9/following{/other_user}", "gists_url": "https://api.github.com/users/powerboat9/gists{/gist_id}", "starred_url": "https://api.github.com/users/powerboat9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/powerboat9/subscriptions", "organizations_url": "https://api.github.com/users/powerboat9/orgs", "repos_url": "https://api.github.com/users/powerboat9/repos", "events_url": "https://api.github.com/users/powerboat9/events{/privacy}", "received_events_url": "https://api.github.com/users/powerboat9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6774d569c61cb0cc80fc9e809cd92dda0010c9c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6774d569c61cb0cc80fc9e809cd92dda0010c9c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6774d569c61cb0cc80fc9e809cd92dda0010c9c3"}], "stats": {"total": 128, "additions": 128, "deletions": 0}, "files": [{"sha": "10fb313c2c764a8fe7eb853cc6e2963436258e8e", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=8628486f4873f72a51e57cf0904f5b0f177053ad", "patch": "@@ -1678,6 +1678,10 @@ void\n Dump::visit (SlicePattern &)\n {}\n \n+void\n+Dump::visit (AltPattern &)\n+{}\n+\n // rust-stmt.h\n void\n Dump::visit (EmptyStmt &)"}, {"sha": "dfe6db0dd96495e5e159b1c532bb5122c5578731", "filename": "gcc/rust/ast/rust-ast-dump.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fast%2Frust-ast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fast%2Frust-ast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.h?ref=8628486f4873f72a51e57cf0904f5b0f177053ad", "patch": "@@ -293,6 +293,7 @@ class Dump : public ASTVisitor\n   void visit (TuplePattern &pattern);\n   void visit (GroupedPattern &pattern);\n   void visit (SlicePattern &pattern);\n+  void visit (AltPattern &pattern);\n \n   // rust-stmt.h\n   void visit (EmptyStmt &stmt);"}, {"sha": "9d7b00ac5a2da1f605fef951b67bad0a378668b6", "filename": "gcc/rust/ast/rust-ast-full-decls.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fast%2Frust-ast-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fast%2Frust-ast-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-decls.h?ref=8628486f4873f72a51e57cf0904f5b0f177053ad", "patch": "@@ -249,6 +249,7 @@ class TuplePatternItemsRanged;\n class TuplePattern;\n class GroupedPattern;\n class SlicePattern;\n+class AltPattern;\n \n // rust-type.h\n class TraitBound;"}, {"sha": "1083e834770c1c383b74360f4ff5725f6105398e", "filename": "gcc/rust/ast/rust-ast-visitor.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fast%2Frust-ast-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fast%2Frust-ast-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-visitor.h?ref=8628486f4873f72a51e57cf0904f5b0f177053ad", "patch": "@@ -203,6 +203,7 @@ class ASTVisitor\n   virtual void visit (TuplePattern &pattern) = 0;\n   virtual void visit (GroupedPattern &pattern) = 0;\n   virtual void visit (SlicePattern &pattern) = 0;\n+  virtual void visit (AltPattern &pattern) = 0;\n \n   // rust-stmt.h\n   virtual void visit (EmptyStmt &stmt) = 0;"}, {"sha": "07983b7da069aa6466743cddef399f2edead9b45", "filename": "gcc/rust/ast/rust-ast.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fast%2Frust-ast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fast%2Frust-ast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.cc?ref=8628486f4873f72a51e57cf0904f5b0f177053ad", "patch": "@@ -2704,6 +2704,17 @@ SlicePattern::as_string () const\n   return str;\n }\n \n+std::string\n+AltPattern::as_string () const\n+{\n+  std::string str (\"AltPattern: \");\n+\n+  for (const auto &pattern : alts)\n+    str += \"\\n \" + pattern->as_string ();\n+\n+  return str;\n+}\n+\n std::string\n TuplePatternItemsMultiple::as_string () const\n {\n@@ -5649,6 +5660,12 @@ SlicePattern::accept_vis (ASTVisitor &vis)\n   vis.visit (*this);\n }\n \n+void\n+AltPattern::accept_vis (ASTVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n void\n EmptyStmt::accept_vis (ASTVisitor &vis)\n {"}, {"sha": "a62e9b98d9340bba0d2a1e410e55dc2f939876be", "filename": "gcc/rust/ast/rust-pattern.h", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fast%2Frust-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fast%2Frust-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-pattern.h?ref=8628486f4873f72a51e57cf0904f5b0f177053ad", "patch": "@@ -1563,6 +1563,72 @@ class SlicePattern : public Pattern\n   }\n };\n \n+// AST node for alternate patterns\n+// joins together what are technically 'PatternNoTopAlt's\n+class AltPattern : public Pattern\n+{\n+  std::vector<std::unique_ptr<Pattern>> alts;\n+  Location locus;\n+  NodeId node_id;\n+\n+public:\n+  std::string as_string () const override;\n+\n+  AltPattern (std::vector<std::unique_ptr<Pattern>> alts, Location locus)\n+    : alts (std::move (alts)), locus (locus),\n+      node_id (Analysis::Mappings::get ()->get_next_node_id ())\n+  {}\n+\n+  // Copy constructor with vector clone\n+  AltPattern (AltPattern const &other) : locus (other.locus)\n+  {\n+    node_id = other.node_id;\n+    alts.reserve (other.alts.size ());\n+    for (const auto &e : other.alts)\n+      alts.push_back (e->clone_pattern ());\n+  }\n+\n+  // Overloaded assignment operator to vector clone\n+  AltPattern &operator= (AltPattern const &other)\n+  {\n+    locus = other.locus;\n+    node_id = other.node_id;\n+\n+    alts.reserve (other.alts.size ());\n+    for (const auto &e : other.alts)\n+      alts.push_back (e->clone_pattern ());\n+\n+    return *this;\n+  }\n+\n+  // move constructors\n+  AltPattern (AltPattern &&other) = default;\n+  AltPattern &operator= (AltPattern &&other) = default;\n+\n+  Location get_locus () const override final { return locus; }\n+\n+  void accept_vis (ASTVisitor &vis) override;\n+\n+  // TODO: seems kinda dodgy. Think of better way.\n+  std::vector<std::unique_ptr<Pattern>> &get_alts () { return alts; }\n+  const std::vector<std::unique_ptr<Pattern>> &get_alts () const\n+  {\n+    return alts;\n+  }\n+\n+  NodeId get_node_id () const { return node_id; }\n+\n+  NodeId get_pattern_node_id () const override final { return node_id; }\n+\n+protected:\n+  /* Use covariance to implement clone function as returning this object rather\n+   * than base */\n+  AltPattern *clone_pattern_impl () const override\n+  {\n+    return new AltPattern (*this);\n+  }\n+};\n+\n // Moved definition to rust-path.h\n class PathPattern;\n "}, {"sha": "20af14719bb1962a5a706ceabf3115ca32421eaa", "filename": "gcc/rust/checks/errors/rust-feature-gate.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.h?ref=8628486f4873f72a51e57cf0904f5b0f177053ad", "patch": "@@ -169,6 +169,7 @@ class FeatureGate : public AST::ASTVisitor\n   void visit (AST::TuplePattern &pattern) override {}\n   void visit (AST::GroupedPattern &pattern) override {}\n   void visit (AST::SlicePattern &pattern) override {}\n+  void visit (AST::AltPattern &pattern) override {}\n   void visit (AST::EmptyStmt &stmt) override {}\n   void visit (AST::LetStmt &stmt) override {}\n   void visit (AST::ExprStmtWithoutBlock &stmt) override {}"}, {"sha": "3a94699558d9b8134d4af68131470bd9f973a87b", "filename": "gcc/rust/expand/rust-attribute-visitor.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc?ref=8628486f4873f72a51e57cf0904f5b0f177053ad", "patch": "@@ -3152,6 +3152,20 @@ AttrVisitor::visit (AST::SlicePattern &pattern)\n       // TODO: quit stripping now? or keep going?\n     }\n }\n+void\n+AttrVisitor::visit (AST::AltPattern &pattern)\n+{\n+  // can't strip individual patterns, only sub-patterns\n+  for (auto &alt : pattern.get_alts ())\n+    {\n+      alt->accept_vis (*this);\n+\n+      if (alt->is_marked_for_strip ())\n+\trust_error_at (alt->get_locus (),\n+\t\t       \"cannot strip pattern in this position\");\n+      // TODO: quit stripping now? or keep going?\n+    }\n+}\n \n void\n AttrVisitor::visit (AST::EmptyStmt &)"}, {"sha": "2d10735436f302665ca6db4316137f029ca1e95e", "filename": "gcc/rust/expand/rust-attribute-visitor.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.h?ref=8628486f4873f72a51e57cf0904f5b0f177053ad", "patch": "@@ -258,6 +258,7 @@ class AttrVisitor : public AST::ASTVisitor\n   void visit (AST::TuplePattern &pattern) override;\n   void visit (AST::GroupedPattern &pattern) override;\n   void visit (AST::SlicePattern &pattern) override;\n+  void visit (AST::AltPattern &pattern) override;\n \n   void visit (AST::EmptyStmt &) override;\n   void visit (AST::LetStmt &stmt) override;"}, {"sha": "5d7b5d213401f92f932784a6f309a3e9b701b8a6", "filename": "gcc/rust/hir/rust-ast-lower-base.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc?ref=8628486f4873f72a51e57cf0904f5b0f177053ad", "patch": "@@ -461,6 +461,9 @@ ASTLoweringBase::visit (AST::GroupedPattern &)\n void\n ASTLoweringBase::visit (AST::SlicePattern &)\n {}\n+void\n+ASTLoweringBase::visit (AST::AltPattern &)\n+{}\n \n // rust-stmt.h\n void"}, {"sha": "85343aacdabc3bb05e61767eb3491b2f5850d1f2", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=8628486f4873f72a51e57cf0904f5b0f177053ad", "patch": "@@ -231,6 +231,7 @@ class ASTLoweringBase : public AST::ASTVisitor\n   virtual void visit (AST::TuplePattern &pattern);\n   virtual void visit (AST::GroupedPattern &pattern);\n   virtual void visit (AST::SlicePattern &pattern);\n+  virtual void visit (AST::AltPattern &pattern);\n \n   // rust-stmt.h\n   virtual void visit (AST::EmptyStmt &stmt);"}, {"sha": "5b3f4a0ae1193ca053be88d74ef631ea5dcac3bb", "filename": "gcc/rust/resolve/rust-ast-resolve-base.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.cc?ref=8628486f4873f72a51e57cf0904f5b0f177053ad", "patch": "@@ -582,6 +582,10 @@ void\n ResolverBase::visit (AST::SlicePattern &)\n {}\n \n+void\n+ResolverBase::visit (AST::AltPattern &)\n+{}\n+\n void\n ResolverBase::visit (AST::EmptyStmt &)\n {}"}, {"sha": "aab1324c4544c45373fb3e5e5a369ae42fc223e2", "filename": "gcc/rust/resolve/rust-ast-resolve-base.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h?ref=8628486f4873f72a51e57cf0904f5b0f177053ad", "patch": "@@ -178,6 +178,7 @@ class ResolverBase : public AST::ASTVisitor\n   void visit (AST::TuplePattern &);\n   void visit (AST::GroupedPattern &);\n   void visit (AST::SlicePattern &);\n+  void visit (AST::AltPattern &);\n \n   void visit (AST::EmptyStmt &);\n   void visit (AST::LetStmt &);"}, {"sha": "f5054f964c76cd2e5fd4a7606ae71142b17f5499", "filename": "gcc/rust/resolve/rust-early-name-resolver.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.cc?ref=8628486f4873f72a51e57cf0904f5b0f177053ad", "patch": "@@ -1052,6 +1052,13 @@ EarlyNameResolver::visit (AST::SlicePattern &pattern)\n     item->accept_vis (*this);\n }\n \n+void\n+EarlyNameResolver::visit (AST::AltPattern &pattern)\n+{\n+  for (auto &alt : pattern.get_alts ())\n+    alt->accept_vis (*this);\n+}\n+\n void\n EarlyNameResolver::visit (AST::EmptyStmt &)\n {}"}, {"sha": "84ee518e23b5bfe1c332be4fafc15228c18c041f", "filename": "gcc/rust/resolve/rust-early-name-resolver.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.h?ref=8628486f4873f72a51e57cf0904f5b0f177053ad", "patch": "@@ -249,6 +249,7 @@ class EarlyNameResolver : public AST::ASTVisitor\n   virtual void visit (AST::TuplePattern &pattern);\n   virtual void visit (AST::GroupedPattern &pattern);\n   virtual void visit (AST::SlicePattern &pattern);\n+  virtual void visit (AST::AltPattern &pattern);\n   virtual void visit (AST::EmptyStmt &stmt);\n   virtual void visit (AST::LetStmt &stmt);\n   virtual void visit (AST::ExprStmtWithoutBlock &stmt);"}, {"sha": "4f63dd09dac3a565d54213526426d554636e7d68", "filename": "gcc/rust/util/rust-attributes.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Futil%2Frust-attributes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Futil%2Frust-attributes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-attributes.cc?ref=8628486f4873f72a51e57cf0904f5b0f177053ad", "patch": "@@ -767,6 +767,10 @@ void\n AttributeChecker::visit (AST::SlicePattern &)\n {}\n \n+void\n+AttributeChecker::visit (AST::AltPattern &)\n+{}\n+\n // rust-stmt.h\n void\n AttributeChecker::visit (AST::EmptyStmt &)"}, {"sha": "805e3a8f40aed67fc976e9d2eed8d19503c67d78", "filename": "gcc/rust/util/rust-attributes.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Futil%2Frust-attributes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8628486f4873f72a51e57cf0904f5b0f177053ad/gcc%2Frust%2Futil%2Frust-attributes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-attributes.h?ref=8628486f4873f72a51e57cf0904f5b0f177053ad", "patch": "@@ -242,6 +242,7 @@ class AttributeChecker : public AST::ASTVisitor\n   void visit (AST::TuplePattern &pattern);\n   void visit (AST::GroupedPattern &pattern);\n   void visit (AST::SlicePattern &pattern);\n+  void visit (AST::AltPattern &pattern);\n \n   // rust-stmt.h\n   void visit (AST::EmptyStmt &stmt);"}]}