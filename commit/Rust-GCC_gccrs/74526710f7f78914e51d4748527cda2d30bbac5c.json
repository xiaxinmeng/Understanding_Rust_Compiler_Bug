{"sha": "74526710f7f78914e51d4748527cda2d30bbac5c", "node_id": "C_kwDOANBUbNoAKDc0NTI2NzEwZjdmNzg5MTRlNTFkNDc0ODUyN2NkYTJkMzBiYmFjNWM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-07-07T13:23:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-07-11T10:05:27Z"}, "message": "More update-ssa speedup\n\nWhen we do TODO_update_ssa_no_phi we already avoid computing\ndominance frontiers for all blocks - it is worth to also avoid\nwalking all dominated blocks in the update domwalk and restrict\nthe walk to the SEME region with the affected blocks.  We can\ndo that by walking the CFG in reverse from blocks_to_update to\nthe common immediate dominator, marking blocks in the region\nand telling the domwalk to STOP when leaving it.\n\nFor an artificial testcase with N adjacent loops with one\nunswitching opportunity that takes the incremental SSA updating\noff the -ftime-report radar:\n\n tree loop unswitching              :  11.25 (  3%)   0.09 (  5%)  11.53 (  3%)    36M (  9%)\n `- tree SSA incremental            :  35.74 (  9%)   0.07 (  4%)  36.65 (  9%)  2734k (  1%)\n\nimproves to\n\n tree loop unswitching              :  10.21 (  3%)   0.05 (  3%)  11.50 (  3%)    36M (  9%)\n `- tree SSA incremental            :   0.66 (  0%)   0.02 (  1%)   0.49 (  0%)  2734k (  1%)\n\nfor less localized updates the SEME region isn't likely constrained\nenough so I've restricted the extra work to TODO_update_ssa_no_phi\ncallers.\n\n\t* tree-into-ssa.cc (rewrite_mode::REWRITE_UPDATE_REGION): New.\n\t(rewrite_update_dom_walker::rewrite_update_dom_walker): Update.\n\t(rewrite_update_dom_walker::m_in_region_flag): New.\n\t(rewrite_update_dom_walker::before_dom_children): If the region\n\tto update is marked, STOP at exits.\n\t(rewrite_blocks): For REWRITE_UPDATE_REGION mark the region\n\tto be updated.\n\t(dump_update_ssa): Use bitmap_empty_p.\n\t(update_ssa): Likewise.  Use REWRITE_UPDATE_REGION when\n\tTODO_update_ssa_no_phi.\n\t* tree-cfgcleanup.cc (cleanup_tree_cfg_noloop): Account\n\tpending update_ssa to the caller.", "tree": {"sha": "abcc78610688cb3536bf58f0d2e4b45bb71cb3e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abcc78610688cb3536bf58f0d2e4b45bb71cb3e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74526710f7f78914e51d4748527cda2d30bbac5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74526710f7f78914e51d4748527cda2d30bbac5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74526710f7f78914e51d4748527cda2d30bbac5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74526710f7f78914e51d4748527cda2d30bbac5c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06b2a2abe26554c6f9365676683d67368cbba206", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06b2a2abe26554c6f9365676683d67368cbba206", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06b2a2abe26554c6f9365676683d67368cbba206"}], "stats": {"total": 103, "additions": 90, "deletions": 13}, "files": [{"sha": "3535a7e28a4e7d746ee07adf2063710a16bbee80", "filename": "gcc/tree-cfgcleanup.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74526710f7f78914e51d4748527cda2d30bbac5c/gcc%2Ftree-cfgcleanup.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74526710f7f78914e51d4748527cda2d30bbac5c/gcc%2Ftree-cfgcleanup.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.cc?ref=74526710f7f78914e51d4748527cda2d30bbac5c", "patch": "@@ -1095,7 +1095,11 @@ cleanup_tree_cfg_noloop (unsigned ssa_update_flags)\n   /* After doing the above SSA form should be valid (or an update SSA\n      should be required).  */\n   if (ssa_update_flags)\n-    update_ssa (ssa_update_flags);\n+    {\n+      timevar_pop (TV_TREE_CLEANUP_CFG);\n+      update_ssa (ssa_update_flags);\n+      timevar_push (TV_TREE_CLEANUP_CFG);\n+    }\n \n   /* Compute dominator info which we need for the iterative process below.  */\n   if (!dom_info_available_p (CDI_DOMINATORS))"}, {"sha": "be71b629f9783740ab0e88ce50f88014404a4989", "filename": "gcc/tree-into-ssa.cc", "status": "modified", "additions": 85, "deletions": 12, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74526710f7f78914e51d4748527cda2d30bbac5c/gcc%2Ftree-into-ssa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74526710f7f78914e51d4748527cda2d30bbac5c/gcc%2Ftree-into-ssa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.cc?ref=74526710f7f78914e51d4748527cda2d30bbac5c", "patch": "@@ -240,7 +240,8 @@ enum rewrite_mode {\n \n     /* Incrementally update the SSA web by replacing existing SSA\n        names with new ones.  See update_ssa for details.  */\n-    REWRITE_UPDATE\n+    REWRITE_UPDATE,\n+    REWRITE_UPDATE_REGION\n };\n \n /* The set of symbols we ought to re-write into SSA form in update_ssa.  */\n@@ -2155,11 +2156,14 @@ rewrite_update_phi_arguments (basic_block bb)\n class rewrite_update_dom_walker : public dom_walker\n {\n public:\n-  rewrite_update_dom_walker (cdi_direction direction)\n-    : dom_walker (direction, ALL_BLOCKS, (int *)(uintptr_t)-1) {}\n+  rewrite_update_dom_walker (cdi_direction direction, int in_region_flag = -1)\n+    : dom_walker (direction, ALL_BLOCKS, (int *)(uintptr_t)-1),\n+      m_in_region_flag (in_region_flag) {}\n \n   edge before_dom_children (basic_block) final override;\n   void after_dom_children (basic_block) final override;\n+\n+  int m_in_region_flag;\n };\n \n /* Initialization of block data structures for the incremental SSA\n@@ -2179,6 +2183,10 @@ rewrite_update_dom_walker::before_dom_children (basic_block bb)\n   /* Mark the unwind point for this block.  */\n   block_defs_stack.safe_push (NULL_TREE);\n \n+  if (m_in_region_flag != -1\n+      && !(bb->flags & m_in_region_flag))\n+    return STOP;\n+\n   if (!bitmap_bit_p (blocks_to_update, bb->index))\n     return NULL;\n \n@@ -2270,8 +2278,8 @@ rewrite_update_dom_walker::after_dom_children (basic_block bb ATTRIBUTE_UNUSED)\n    WHAT indicates what actions will be taken by the renamer (see enum\n       rewrite_mode).\n \n-   BLOCKS are the set of interesting blocks for the dominator walker\n-      to process.  If this set is NULL, then all the nodes dominated\n+   REGION is a SEME region of interesting blocks for the dominator walker\n+      to process.  If this set is invalid, then all the nodes dominated\n       by ENTRY are walked.  Otherwise, blocks dominated by ENTRY that\n       are not present in BLOCKS are ignored.  */\n \n@@ -2283,9 +2291,71 @@ rewrite_blocks (basic_block entry, enum rewrite_mode what)\n   /* Recursively walk the dominator tree rewriting each statement in\n      each basic block.  */\n   if (what == REWRITE_ALL)\n-      rewrite_dom_walker (CDI_DOMINATORS).walk (entry);\n+    rewrite_dom_walker (CDI_DOMINATORS).walk (entry);\n   else if (what == REWRITE_UPDATE)\n-      rewrite_update_dom_walker (CDI_DOMINATORS).walk (entry);\n+    rewrite_update_dom_walker (CDI_DOMINATORS).walk (entry);\n+  else if (what == REWRITE_UPDATE_REGION)\n+    {\n+      /* First mark all blocks in the SEME region dominated by\n+\t entry and exited by blocks not backwards reachable from\n+\t blocks_to_update.  Optimize for dense blocks_to_update\n+\t so instead of seeding the worklist with a copy of\n+\t blocks_to_update treat those blocks explicit.  */\n+      auto_bb_flag in_region (cfun);\n+      auto_vec<basic_block, 64> extra_rgn;\n+      bitmap_iterator bi;\n+      unsigned int idx;\n+      EXECUTE_IF_SET_IN_BITMAP (blocks_to_update, 0, idx, bi)\n+\t{\n+\t  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, idx);\n+\t  bb->flags |= in_region;\n+\t}\n+      auto_bitmap worklist;\n+      EXECUTE_IF_SET_IN_BITMAP (blocks_to_update, 0, idx, bi)\n+\t{\n+\t  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, idx);\n+\t  if (bb != entry)\n+\t    {\n+\t      edge_iterator ei;\n+\t      edge e;\n+\t      FOR_EACH_EDGE (e, ei, bb->preds)\n+\t\t{\n+\t\t  if ((e->src->flags & in_region)\n+\t\t      || dominated_by_p (CDI_DOMINATORS, e->src, bb))\n+\t\t    continue;\n+\t\t  bitmap_set_bit (worklist, e->src->index);\n+\t\t}\n+\t    }\n+\t}\n+      while (!bitmap_empty_p (worklist))\n+\t{\n+\t  int idx = bitmap_first_set_bit (worklist);\n+\t  bitmap_clear_bit (worklist, idx);\n+\t  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, idx);\n+\t  bb->flags |= in_region;\n+\t  extra_rgn.safe_push (bb);\n+\t  if (bb != entry)\n+\t    {\n+\t      edge_iterator ei;\n+\t      edge e;\n+\t      FOR_EACH_EDGE (e, ei, bb->preds)\n+\t\t{\n+\t\t  if ((e->src->flags & in_region)\n+\t\t      || dominated_by_p (CDI_DOMINATORS, e->src, bb))\n+\t\t    continue;\n+\t\t  bitmap_set_bit (worklist, e->src->index);\n+\t\t}\n+\t    }\n+\t}\n+      rewrite_update_dom_walker (CDI_DOMINATORS, in_region).walk (entry);\n+      EXECUTE_IF_SET_IN_BITMAP (blocks_to_update, 0, idx, bi)\n+\t{\n+\t  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, idx);\n+\t  bb->flags &= ~in_region;\n+\t}\n+      for (auto bb : extra_rgn)\n+\tbb->flags &= ~in_region;\n+    }\n   else\n     gcc_unreachable ();\n \n@@ -2879,7 +2949,7 @@ dump_update_ssa (FILE *file)\n   if (!need_ssa_update_p (cfun))\n     return;\n \n-  if (new_ssa_names && bitmap_first_set_bit (new_ssa_names) >= 0)\n+  if (new_ssa_names && !bitmap_empty_p (new_ssa_names))\n     {\n       sbitmap_iterator sbi;\n \n@@ -3389,7 +3459,7 @@ update_ssa (unsigned update_flags)\n   /* If there are names defined in the replacement table, prepare\n      definition and use sites for all the names in NEW_SSA_NAMES and\n      OLD_SSA_NAMES.  */\n-  if (bitmap_first_set_bit (new_ssa_names) >= 0)\n+  if (!bitmap_empty_p (new_ssa_names))\n     {\n       statistics_counter_event (cfun, \"Incremental SSA update\", 1);\n \n@@ -3398,7 +3468,7 @@ update_ssa (unsigned update_flags)\n       /* If all the names in NEW_SSA_NAMES had been marked for\n \t removal, and there are no symbols to rename, then there's\n \t nothing else to do.  */\n-      if (bitmap_first_set_bit (new_ssa_names) < 0\n+      if (bitmap_empty_p (new_ssa_names)\n \t  && !cfun->gimple_df->ssa_renaming_needed)\n \tgoto done;\n     }\n@@ -3503,8 +3573,11 @@ update_ssa (unsigned update_flags)\n   FOR_EACH_VEC_ELT (symbols_to_rename, i, sym)\n     get_var_info (sym)->info.current_def = NULL_TREE;\n \n-  /* Now start the renaming process at START_BB.  */\n-  rewrite_blocks (start_bb, REWRITE_UPDATE);\n+  /* Now start the renaming process at START_BB.  When not inserting PHIs\n+     and thus we are avoiding work on all blocks, try to confine the\n+     rewriting domwalk to the affected region, otherwise it's not worth it.  */\n+  rewrite_blocks (start_bb,\n+\t\t  insert_phi_p ? REWRITE_UPDATE : REWRITE_UPDATE_REGION);\n \n   /* Debugging dumps.  */\n   if (dump_file)"}]}