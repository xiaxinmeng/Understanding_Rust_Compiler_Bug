{"sha": "1df5b0db1cc49d434c5d1ac2dc6a71daf0066d0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRmNWIwZGIxY2M0OWQ0MzRjNWQxYWMyZGM2YTcxZGFmMDA2NmQwZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-04-22T19:29:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-04-22T19:29:54Z"}, "message": "tree.c (build_int_cst): Properly create canonicalized integer constants.\n\n2011-04-22  Richard Guenther  <rguenther@suse.de>\n\n\t* tree.c (build_int_cst): Properly create canonicalized integer\n\tconstants.\n\t(build_int_cst_type): Remove scary comments.\n\nFrom-SVN: r172871", "tree": {"sha": "5b1871d95abd14f902e5fe5fd747753ee79e843e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b1871d95abd14f902e5fe5fd747753ee79e843e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1df5b0db1cc49d434c5d1ac2dc6a71daf0066d0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1df5b0db1cc49d434c5d1ac2dc6a71daf0066d0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1df5b0db1cc49d434c5d1ac2dc6a71daf0066d0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1df5b0db1cc49d434c5d1ac2dc6a71daf0066d0e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ae01169c6918a8ba506c908372bcd4e01fd34714", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae01169c6918a8ba506c908372bcd4e01fd34714", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae01169c6918a8ba506c908372bcd4e01fd34714"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "f837af9259d108a257de8842a27d1b0095ddd5ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df5b0db1cc49d434c5d1ac2dc6a71daf0066d0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df5b0db1cc49d434c5d1ac2dc6a71daf0066d0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1df5b0db1cc49d434c5d1ac2dc6a71daf0066d0e", "patch": "@@ -1,3 +1,9 @@\n+2011-04-22  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.c (build_int_cst): Properly create canonicalized integer\n+\tconstants.\n+\t(build_int_cst_type): Remove scary comments.\n+\n 2011-04-22  Xinliang David Li  <davidxl@google.com>\n \n \t* toplev.c (process_options): Enable -Werror=coverage-mismatch"}, {"sha": "6f93fb16336c2487532bfe31abf36ec2d2ff0e02", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df5b0db1cc49d434c5d1ac2dc6a71daf0066d0e/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df5b0db1cc49d434c5d1ac2dc6a71daf0066d0e/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=1df5b0db1cc49d434c5d1ac2dc6a71daf0066d0e", "patch": "@@ -1004,7 +1004,7 @@ copy_list (tree list)\n }\n \n \f\n-/* Create an INT_CST node with a LOW value sign extended.  */\n+/* Create an INT_CST node with a LOW value sign extended to TYPE.  */\n \n tree\n build_int_cst (tree type, HOST_WIDE_INT low)\n@@ -1013,17 +1013,10 @@ build_int_cst (tree type, HOST_WIDE_INT low)\n   if (!type)\n     type = integer_type_node;\n \n-  return build_int_cst_wide (type, low, low < 0 ? -1 : 0);\n+  return double_int_to_tree (type, shwi_to_double_int (low));\n }\n \n-/* Create an INT_CST node with a LOW value in TYPE.  The value is sign extended\n-   if it is negative.  This function is similar to build_int_cst, but\n-   the extra bits outside of the type precision are cleared.  Constants\n-   with these extra bits may confuse the fold so that it detects overflows\n-   even in cases when they do not occur, and in general should be avoided.\n-   We cannot however make this a default behavior of build_int_cst without\n-   more intrusive changes, since there are parts of gcc that rely on the extra\n-   precision of the integer constants.  */\n+/* Create an INT_CST node with a LOW value sign extended to TYPE.  */\n \n tree\n build_int_cst_type (tree type, HOST_WIDE_INT low)"}]}