{"sha": "3fd48b121a654c914b2784334650d23095d938e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZkNDhiMTIxYTY1NGM5MTRiMjc4NDMzNDY1MGQyMzA5NWQ5MzhlNA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-06-06T08:13:24Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-06-06T08:13:24Z"}, "message": "re PR debug/53927 (wrong value for DW_AT_static_link)\n\n\tPR debug/53927\n\t* function.c (instantiate_decls): Process the saved static chain.\n\t(expand_function_start): If not optimizing, save the static chain\n\tonto the stack.\n\t* tree-nested.c (convert_all_function_calls): Always create the static\n\tchain for nested functions if not optimizing.\n\nFrom-SVN: r211308", "tree": {"sha": "a57bf7572560464ca1f1c66047de9e49d3a81f12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a57bf7572560464ca1f1c66047de9e49d3a81f12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fd48b121a654c914b2784334650d23095d938e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd48b121a654c914b2784334650d23095d938e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fd48b121a654c914b2784334650d23095d938e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd48b121a654c914b2784334650d23095d938e4/comments", "author": null, "committer": null, "parents": [{"sha": "9b7a11e15385db8fe350c7b3f90f8530c18f2a11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b7a11e15385db8fe350c7b3f90f8530c18f2a11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b7a11e15385db8fe350c7b3f90f8530c18f2a11"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "e6cfb2d851502e33340c0bec8ca5b5362790179c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd48b121a654c914b2784334650d23095d938e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd48b121a654c914b2784334650d23095d938e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3fd48b121a654c914b2784334650d23095d938e4", "patch": "@@ -1,3 +1,12 @@\n+2014-06-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR debug/53927\n+\t* function.c (instantiate_decls): Process the saved static chain.\n+\t(expand_function_start): If not optimizing, save the static chain\n+\tonto the stack.\n+\t* tree-nested.c (convert_all_function_calls): Always create the static\n+\tchain for nested functions if not optimizing.\n+\n 2014-06-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-cfg.c (make_edges) <GIMPLE_RETURN>: Put a location on the edge."}, {"sha": "441289e84bc1cc39da22785912cf53d9ec93f320", "filename": "gcc/function.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd48b121a654c914b2784334650d23095d938e4/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd48b121a654c914b2784334650d23095d938e4/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=3fd48b121a654c914b2784334650d23095d938e4", "patch": "@@ -1877,6 +1877,11 @@ instantiate_decls (tree fndecl)\n \t}\n     }\n \n+  /* Process the saved static chain if it exists.  */\n+  decl = DECL_STRUCT_FUNCTION (fndecl)->static_chain_decl;\n+  if (decl && DECL_HAS_VALUE_EXPR_P (decl))\n+    instantiate_decl_rtl (DECL_RTL (DECL_VALUE_EXPR (decl)));\n+\n   /* Now process all variables defined in the function or its subblocks.  */\n   instantiate_decls_1 (DECL_INITIAL (fndecl));\n \n@@ -4811,6 +4816,20 @@ expand_function_start (tree subr)\n       if (MEM_P (chain)\n \t  && reg_mentioned_p (arg_pointer_rtx, XEXP (chain, 0)))\n \tset_dst_reg_note (insn, REG_EQUIV, chain, local);\n+\n+      /* If we aren't optimizing, save the static chain onto the stack.  */\n+      if (!optimize)\n+\t{\n+\t  tree saved_static_chain_decl\n+\t    = build_decl (DECL_SOURCE_LOCATION (parm), VAR_DECL,\n+\t\t\t  DECL_NAME (parm), TREE_TYPE (parm));\n+\t  rtx saved_static_chain_rtx\n+\t    = assign_stack_local (Pmode, GET_MODE_SIZE (Pmode), 0);\n+\t  SET_DECL_RTL (saved_static_chain_decl, saved_static_chain_rtx);\n+\t  emit_move_insn (saved_static_chain_rtx, chain);\n+\t  SET_DECL_VALUE_EXPR (parm, saved_static_chain_decl);\n+\t  DECL_HAS_VALUE_EXPR_P (parm) = 1;\n+\t}\n     }\n \n   /* If the function receives a non-local goto, then store the"}, {"sha": "85c6a03f73743871381328241af62a630eef21e2", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd48b121a654c914b2784334650d23095d938e4/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd48b121a654c914b2784334650d23095d938e4/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=3fd48b121a654c914b2784334650d23095d938e4", "patch": "@@ -2220,11 +2220,21 @@ convert_all_function_calls (struct nesting_info *root)\n   struct nesting_info *n;\n \n   /* First, optimistically clear static_chain for all decls that haven't\n-     used the static chain already for variable access.  */\n+     used the static chain already for variable access.  But always create\n+     it if not optimizing.  This makes it possible to reconstruct the static\n+     nesting tree at run time and thus to resolve up-level references from\n+     within the debugger.  */\n   FOR_EACH_NEST_INFO (n, root)\n     {\n       tree decl = n->context;\n-      if (!n->outer || (!n->chain_decl && !n->chain_field))\n+      if (!optimize)\n+\t{\n+\t  if (n->inner)\n+\t    (void) get_frame_type (n);\n+\t  if (n->outer)\n+\t    (void) get_chain_decl (n);\n+\t}\n+      else if (!n->outer || (!n->chain_decl && !n->chain_field))\n \t{\n \t  DECL_STATIC_CHAIN (decl) = 0;\n \t  if (dump_file && (dump_flags & TDF_DETAILS))"}]}