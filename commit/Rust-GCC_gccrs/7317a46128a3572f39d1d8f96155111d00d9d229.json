{"sha": "7317a46128a3572f39d1d8f96155111d00d9d229", "node_id": "C_kwDOANBUbNoAKDczMTdhNDYxMjhhMzU3MmYzOWQxZDhmOTYxNTUxMTFkMDBkOWQyMjk", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-01-03T15:15:20Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-01-11T13:24:50Z"}, "message": "[Ada] Relax assertion on designated types for equality operators\n\ngcc/ada/\n\n\t* gcc-interface/utils2.c (build_binary_op) <EQ_EXPR>: Relax a\n\tlittle the assertion on designated types of pointer types.", "tree": {"sha": "86729f2a0739457d40a171f6d5242a60ecd508bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86729f2a0739457d40a171f6d5242a60ecd508bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7317a46128a3572f39d1d8f96155111d00d9d229", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7317a46128a3572f39d1d8f96155111d00d9d229", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7317a46128a3572f39d1d8f96155111d00d9d229", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7317a46128a3572f39d1d8f96155111d00d9d229/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10608753db567042934872db8447f13eb15b5f8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10608753db567042934872db8447f13eb15b5f8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10608753db567042934872db8447f13eb15b5f8b"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "b651d486afbba3cf6e30be0cb63fae0f510aea04", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7317a46128a3572f39d1d8f96155111d00d9d229/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7317a46128a3572f39d1d8f96155111d00d9d229/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=7317a46128a3572f39d1d8f96155111d00d9d229", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2021, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2022, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -1118,7 +1118,7 @@ build_binary_op (enum tree_code op_code, tree result_type,\n \t  return result;\n \t}\n \n-      /* Otherwise, the base types must be the same, unless they are both fat\n+      /* Otherwise, the base types must be the same, unless they are both (fat)\n \t pointer types or record types.  In the latter case, use the best type\n \t and convert both operands to that type.  */\n       if (left_base_type != right_base_type)\n@@ -1131,6 +1131,18 @@ build_binary_op (enum tree_code op_code, tree result_type,\n \t      best_type = left_base_type;\n \t    }\n \n+\t  else if (POINTER_TYPE_P (left_base_type)\n+\t\t   && POINTER_TYPE_P (right_base_type))\n+\t    {\n+\t      /* Anonymous access types in Ada 2005 can point to different\n+\t\t members of a tagged type hierarchy.  */\n+\t      gcc_assert (TYPE_MAIN_VARIANT (TREE_TYPE (left_base_type))\n+\t\t\t  == TYPE_MAIN_VARIANT (TREE_TYPE (right_base_type))\n+\t\t\t  || (TYPE_ALIGN_OK (TREE_TYPE (left_base_type))\n+\t\t\t      && TYPE_ALIGN_OK (TREE_TYPE (right_base_type))));\n+\t      best_type = left_base_type;\n+\t    }\n+\n \t  else if (TREE_CODE (left_base_type) == RECORD_TYPE\n \t\t   && TREE_CODE (right_base_type) == RECORD_TYPE)\n \t    {\n@@ -1153,13 +1165,6 @@ build_binary_op (enum tree_code op_code, tree result_type,\n \t\tgcc_unreachable ();\n \t    }\n \n-\t  else if (POINTER_TYPE_P (left_base_type)\n-\t\t   && POINTER_TYPE_P (right_base_type))\n-\t    {\n-\t      gcc_assert (TREE_TYPE (left_base_type)\n-\t\t\t  == TREE_TYPE (right_base_type));\n-\t      best_type = left_base_type;\n-\t    }\n \t  else\n \t    gcc_unreachable ();\n "}]}