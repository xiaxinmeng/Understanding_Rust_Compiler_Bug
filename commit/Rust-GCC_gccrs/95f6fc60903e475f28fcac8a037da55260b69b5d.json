{"sha": "95f6fc60903e475f28fcac8a037da55260b69b5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVmNmZjNjA5MDNlNDc1ZjI4ZmNhYzhhMDM3ZGE1NTI2MGI2OWI1ZA==", "commit": {"author": {"name": "Adam Nemet", "email": "anemet@caviumnetworks.com", "date": "2008-08-29T00:12:12Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2008-08-29T00:12:12Z"}, "message": "mips.h (ISA_HAS_BBIT): New macro.\n\n\t* config/mips/mips.h (ISA_HAS_BBIT): New macro.\n\t* config/mips/mips.md (branch_likely): Remove const.  Fix\n\tcomment formatting.\n\t(define_delay for type \"branch\"): Change to only apply for branch\n\twith likely variant.\n\t(define_delay for type \"branch\" and \"branch_likely\" no).  New delay\n\tdefinition.\n\t(equality_op): New code iterator.\n\t(bbv, bbinv): New code attributes.\n\t(*branch_bit<bbv><mode>, *branch_bit<bbv><mode>_inverted): New\n\tpatterns.\n\ntestsuite/\n\t* gcc.target/mips/octeon-bbit-1.c: New test.\n\t* gcc.target/mips/octeon-bbit-2.c: New test.\n\t* gcc.target/mips/octeon-bbit-3.c: New test.\n\nFrom-SVN: r139743", "tree": {"sha": "0820cf6ebf11bc572a3260b51c00009a45e7b92e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0820cf6ebf11bc572a3260b51c00009a45e7b92e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95f6fc60903e475f28fcac8a037da55260b69b5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95f6fc60903e475f28fcac8a037da55260b69b5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95f6fc60903e475f28fcac8a037da55260b69b5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95f6fc60903e475f28fcac8a037da55260b69b5d/comments", "author": null, "committer": null, "parents": [{"sha": "528c22f4c7be52c1a285c7b0b9e49180ba8785f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/528c22f4c7be52c1a285c7b0b9e49180ba8785f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/528c22f4c7be52c1a285c7b0b9e49180ba8785f6"}], "stats": {"total": 210, "additions": 202, "deletions": 8}, "files": [{"sha": "753422f2c470488ba09cac80f31c20f512e858c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95f6fc60903e475f28fcac8a037da55260b69b5d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95f6fc60903e475f28fcac8a037da55260b69b5d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95f6fc60903e475f28fcac8a037da55260b69b5d", "patch": "@@ -1,3 +1,17 @@\n+2008-08-28  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* config/mips/mips.h (ISA_HAS_BBIT): New macro.\n+\t* config/mips/mips.md (branch_likely): Remove const.  Fix\n+\tcomment formatting.\n+\t(define_delay for type \"branch\"): Change to only apply for branch\n+\twith likely variant.\n+\t(define_delay for type \"branch\" and \"branch_likely\" no).  New delay\n+\tdefinition.\n+\t(equality_op): New code iterator.\n+\t(bbv, bbinv): New code attributes.\n+\t(*branch_bit<bbv><mode>, *branch_bit<bbv><mode>_inverted): New\n+\tpatterns.\n+\n 2008-08-28  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n             Andrew Pinski  <pinskia@gcc.gnu.org>\n "}, {"sha": "66788c17e6ecdfa26edfca091082bbc9a78eaf13", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95f6fc60903e475f28fcac8a037da55260b69b5d/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95f6fc60903e475f28fcac8a037da55260b69b5d/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=95f6fc60903e475f28fcac8a037da55260b69b5d", "patch": "@@ -1006,6 +1006,9 @@ enum mips_code_readable_setting {\n    ? TARGET_LLSC && !TARGET_MIPS16\t\\\n    : ISA_HAS_LL_SC)\n \n+/* ISA includes the bbit* instructions.  */\n+#define ISA_HAS_BBIT\t\tTARGET_OCTEON\n+\n /* ISA includes the pop instruction.  */\n #define ISA_HAS_POP\t\tTARGET_OCTEON\n \f"}, {"sha": "0aba384144db8db2be7237f85c2977ccad33de8b", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 69, "deletions": 8, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95f6fc60903e475f28fcac8a037da55260b69b5d/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95f6fc60903e475f28fcac8a037da55260b69b5d/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=95f6fc60903e475f28fcac8a037da55260b69b5d", "patch": "@@ -599,12 +599,12 @@\n \t\t(const_string \"yes\")\n \t\t(const_string \"no\")))\n \n-;; Attribute defining whether or not we can use the branch-likely instructions\n+;; Attribute defining whether or not we can use the branch-likely\n+;; instructions.\n (define_attr \"branch_likely\" \"no,yes\"\n-  (const\n-   (if_then_else (ne (symbol_ref \"GENERATE_BRANCHLIKELY\") (const_int 0))\n-\t\t (const_string \"yes\")\n-\t\t (const_string \"no\"))))\n+  (if_then_else (ne (symbol_ref \"GENERATE_BRANCHLIKELY\") (const_int 0))\n+\t\t(const_string \"yes\")\n+\t\t(const_string \"no\")))\n \n ;; True if an instruction might assign to hi or lo when reloaded.\n ;; This is used by the TUNE_MACC_CHAINS code.\n@@ -788,6 +788,9 @@\n ;; by swapping the operands.\n (define_code_iterator swapped_fcond [ge gt unge ungt])\n \n+;; Equality operators.\n+(define_code_iterator equality_op [eq ne])\n+\n ;; These code iterators allow the signed and unsigned scc operations to use\n ;; the same template.\n (define_code_iterator any_gt [gt gtu])\n@@ -848,6 +851,12 @@\n \t\t\t\t (unge \"ule\")\n \t\t\t\t (ungt \"ult\")])\n \n+;; The value of the bit when the branch is taken for branch_bit patterns.\n+;; Comparison is always against zero so this depends on the operator.\n+(define_code_attr bbv [(eq \"0\") (ne \"1\")])\n+\n+;; This is the inverse value of bbv.\n+(define_code_attr bbinv [(eq \"1\") (ne \"0\")])\n \f\n ;; .........................\n ;;\n@@ -856,11 +865,19 @@\n ;; .........................\n \n (define_delay (and (eq_attr \"type\" \"branch\")\n-\t\t   (eq (symbol_ref \"TARGET_MIPS16\") (const_int 0)))\n+\t\t   (eq (symbol_ref \"TARGET_MIPS16\") (const_int 0))\n+\t\t   (eq_attr \"branch_likely\" \"yes\"))\n+  [(eq_attr \"can_delay\" \"yes\")\n+   (nil)\n+   (eq_attr \"can_delay\" \"yes\")])\n+\n+;; Branches that don't have likely variants do not annul on false.\n+(define_delay (and (eq_attr \"type\" \"branch\")\n+\t\t   (eq (symbol_ref \"TARGET_MIPS16\") (const_int 0))\n+\t\t   (eq_attr \"branch_likely\" \"no\"))\n   [(eq_attr \"can_delay\" \"yes\")\n    (nil)\n-   (and (eq_attr \"branch_likely\" \"yes\")\n-\t(eq_attr \"can_delay\" \"yes\"))])\n+   (nil)])\n \n (define_delay (eq_attr \"type\" \"jump\")\n   [(eq_attr \"can_delay\" \"yes\")\n@@ -5052,6 +5069,50 @@\n \t(if_then_else (match_operand 0)\n \t\t      (label_ref (match_operand 1))\n \t\t      (pc)))])\n+\n+;; Branch if bit is set/clear.\n+\n+(define_insn \"*branch_bit<bbv><mode>\"\n+  [(set (pc)\n+\t(if_then_else\n+\t (equality_op (zero_extract:GPR\n+\t\t       (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t       (const_int 1)\n+\t\t       (match_operand 2 \"const_int_operand\" \"\"))\n+\t\t      (const_int 0))\n+\t (label_ref (match_operand 0 \"\"))\n+\t (pc)))]\n+  \"ISA_HAS_BBIT && UINTVAL (operands[2]) < GET_MODE_BITSIZE (<MODE>mode)\"\n+{\n+  return\n+    mips_output_conditional_branch (insn, operands,\n+\t\t\t\t    MIPS_BRANCH (\"bbit<bbv>\", \"%1,%2,%0\"),\n+\t\t\t\t    MIPS_BRANCH (\"bbit<bbinv>\", \"%1,%2,%0\"));\n+}\n+  [(set_attr \"type\"\t     \"branch\")\n+   (set_attr \"mode\"\t     \"none\")\n+   (set_attr \"branch_likely\" \"no\")])\n+\n+(define_insn \"*branch_bit<bbv><mode>_inverted\"\n+  [(set (pc)\n+\t(if_then_else\n+\t (equality_op (zero_extract:GPR\n+\t\t       (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t       (const_int 1)\n+\t\t       (match_operand 2 \"const_int_operand\" \"\"))\n+\t\t      (const_int 0))\n+\t (pc)\n+\t (label_ref (match_operand 0 \"\"))))]\n+  \"ISA_HAS_BBIT && UINTVAL (operands[2]) < GET_MODE_BITSIZE (<MODE>mode)\"\n+{\n+  return\n+    mips_output_conditional_branch (insn, operands,\n+\t\t\t\t    MIPS_BRANCH (\"bbit<bbinv>\", \"%1,%2,%0\"),\n+\t\t\t\t    MIPS_BRANCH (\"bbit<bbv>\", \"%1,%2,%0\"));\n+}\n+  [(set_attr \"type\"\t     \"branch\")\n+   (set_attr \"mode\"\t     \"none\")\n+   (set_attr \"branch_likely\" \"no\")])\n \f\n ;;\n ;;  ...................."}, {"sha": "23ea3b5c12dd0e08daf921e84db3d5c4a67081db", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95f6fc60903e475f28fcac8a037da55260b69b5d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95f6fc60903e475f28fcac8a037da55260b69b5d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=95f6fc60903e475f28fcac8a037da55260b69b5d", "patch": "@@ -1,3 +1,9 @@\n+2008-08-28  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* gcc.target/mips/octeon-bbit-1.c: New test.\n+\t* gcc.target/mips/octeon-bbit-2.c: New test.\n+\t* gcc.target/mips/octeon-bbit-3.c: New test.\n+\n 2008-08-28  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n             Andrew Pinski  <pinskia@gcc.gnu.org>\n "}, {"sha": "24fd72884e7d77e29f8f6d079a2054ba3b62b6f3", "filename": "gcc/testsuite/gcc.target/mips/octeon-bbit-1.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95f6fc60903e475f28fcac8a037da55260b69b5d/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-bbit-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95f6fc60903e475f28fcac8a037da55260b69b5d/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-bbit-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-bbit-1.c?ref=95f6fc60903e475f28fcac8a037da55260b69b5d", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-O2 -march=octeon\" } */\n+/* { dg-final { scan-assembler-times \"\\tbbit1\\t\" 4 } } */\n+/* { dg-final { scan-assembler-times \"\\tbbit0\\t\" 2 } } */\n+/* { dg-final { scan-assembler-not \"andi\\t\" } } */\n+\n+NOMIPS16 void\n+f1 (long long i)\n+{\n+  if (i & 0x80)\n+    foo ();\n+}\n+\n+NOMIPS16 void\n+f2 (int i)\n+{\n+  if (!(i & 0x80))\n+    foo ();\n+}\n+\n+NOMIPS16 void\n+f3 (int i)\n+{\n+  if (i % 2)\n+    foo ();\n+}\n+\n+NOMIPS16 void\n+f4 (int i)\n+{\n+  if (i & 1)\n+    foo ();\n+}\n+\n+NOMIPS16 void\n+f5 (long long i)\n+{\n+  if ((i >> 3) & 1)\n+    foo ();\n+}\n+\n+unsigned long long r;\n+\n+NOMIPS16 static inline __attribute__((always_inline)) int\n+test_bit(unsigned long long nr, const unsigned long long *addr)\n+{\n+  return 1UL & (addr[nr >> 6] >> (nr & 63ULL));\n+}\n+\n+NOMIPS16 void\n+f6 ()\n+{\n+  if (!test_bit(0, &r))\n+    g ();\n+}"}, {"sha": "6be7ef58643c777fe8d55985e1f49501a47d0a3e", "filename": "gcc/testsuite/gcc.target/mips/octeon-bbit-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95f6fc60903e475f28fcac8a037da55260b69b5d/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-bbit-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95f6fc60903e475f28fcac8a037da55260b69b5d/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-bbit-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-bbit-2.c?ref=95f6fc60903e475f28fcac8a037da55260b69b5d", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-O2 -march=octeon -mbranch-likely\" } */\n+/* { dg-final { scan-assembler \"\\tbbit\\[01\\]\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbbit\\[01\\]l\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tbnel\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbne\\t\" } } */\n+\n+NOMIPS16 int\n+f (int n, int i)\n+{\n+  int s = 0;\n+  for (; i & 1; i++)\n+    s += i;\n+  return s;\n+}\n+\n+NOMIPS16 int\n+g (int n, int i)\n+{\n+  int s = 0;\n+  for (i = 0; i < n; i++)\n+    s += i;\n+  return s;\n+}"}, {"sha": "ac8d0ca5c7ad50b9a1a15fd1a9a03f0447d74836", "filename": "gcc/testsuite/gcc.target/mips/octeon-bbit-3.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95f6fc60903e475f28fcac8a037da55260b69b5d/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-bbit-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95f6fc60903e475f28fcac8a037da55260b69b5d/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-bbit-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-bbit-3.c?ref=95f6fc60903e475f28fcac8a037da55260b69b5d", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-O2 -march=octeon\" } */\n+/* { dg-final { scan-assembler-times \"\\tbbit\\[01\\]\\t|\\tbgez\\t\" 2 } } */\n+/* { dg-final { scan-assembler-not \"ext\\t\" } } */\n+\n+void abort (void);\n+void exit (int);\n+\n+typedef unsigned long long ulong64;\n+\n+typedef struct bitfield_s {\n+  ulong64 a:1;\n+  ulong64 b:29;\n+  ulong64 c:1;\n+  ulong64 d:15;\n+  ulong64 f:18;\n+} bitfield_t;\n+\n+bitfield_t bar;\n+\n+NOMIPS16 void\n+f ()\n+{\n+  foo(&bar);\n+  if (bar.a != 0x1)\n+    abort ();\n+  else if (!bar.c)\n+    abort ();\n+  else\n+    exit (0);\n+}"}]}