{"sha": "d74697b84d79ac7f863e9a65b445ac2e72b59090", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc0Njk3Yjg0ZDc5YWM3Zjg2M2U5YTY1YjQ0NWFjMmU3MmI1OTA5MA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gnu.org", "date": "2002-02-03T04:00:36Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2002-02-03T04:00:36Z"}, "message": "cp-demangle.c (cp_demangle_type): Do not protect with IN_LIBGCC2.\n\n2002-02-02  H.J. Lu  (hjl@gnu.org)\n\n\t* cp-demangle.c (cp_demangle_type): Do not protect with\n\tIN_LIBGCC2.\n\t(cplus_demangle_v3_all): New.\n\t(cplus_demangle_v3): Call cplus_demangle_v3_all.\n\t(cplus_demangle_v3_type): Call cplus_demangle_v3_all.\n\n\t* cplus-dem.c (cplus_demangle_v3_p): New function pointer.\n\tInitialized to cplus_demangle_v3.\n\t(cplus_demangle_with_style): Call cplus_demangle_v3_p instead\n\tof cplus_demangle_v3.\n\t(main): Set cplus_demangle_v3_p to cplus_demangle_v3_type for\n\tcommand line symbol.\n\n\t* testsuite/regress-demangle: Pass the mangled name at the\n\tcommand line.\n\nFrom-SVN: r49456", "tree": {"sha": "c5e77d08efd7f3370d2e01b346b00712f1485d05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5e77d08efd7f3370d2e01b346b00712f1485d05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d74697b84d79ac7f863e9a65b445ac2e72b59090", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d74697b84d79ac7f863e9a65b445ac2e72b59090", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d74697b84d79ac7f863e9a65b445ac2e72b59090", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d74697b84d79ac7f863e9a65b445ac2e72b59090/comments", "author": null, "committer": null, "parents": [{"sha": "4437e4d46bea5eb68ea903e94fbf18f6b2aeb4ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4437e4d46bea5eb68ea903e94fbf18f6b2aeb4ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4437e4d46bea5eb68ea903e94fbf18f6b2aeb4ca"}], "stats": {"total": 66, "additions": 57, "deletions": 9}, "files": [{"sha": "a2638236e7588a3a53f5dee76568b7e9186d22e5", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d74697b84d79ac7f863e9a65b445ac2e72b59090/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d74697b84d79ac7f863e9a65b445ac2e72b59090/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=d74697b84d79ac7f863e9a65b445ac2e72b59090", "patch": "@@ -1,3 +1,21 @@\n+2002-02-02  H.J. Lu  (hjl@gnu.org)\n+\n+\t* cp-demangle.c (cp_demangle_type): Do not protect with\n+\tIN_LIBGCC2.\n+\t(cplus_demangle_v3_all): New.\n+\t(cplus_demangle_v3): Call cplus_demangle_v3_all.\n+\t(cplus_demangle_v3_type): Call cplus_demangle_v3_all.\n+\n+\t* cplus-dem.c (cplus_demangle_v3_p): New function pointer.\n+\tInitialized to cplus_demangle_v3.\n+\t(cplus_demangle_with_style): Call cplus_demangle_v3_p instead\n+\tof cplus_demangle_v3.\n+\t(main): Set cplus_demangle_v3_p to cplus_demangle_v3_type for\n+\tcommand line symbol.\n+\n+\t* testsuite/regress-demangle: Pass the mangled name at the\n+\tcommand line.\n+\n 2002-02-01  H.J. Lu  <hjl@gnu.org>\n \n \t* cp-demangle.c (cp_demangle_type): Call demangling_new with"}, {"sha": "26e20107b19e752c60c7d54c0281ebb621ac3db5", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d74697b84d79ac7f863e9a65b445ac2e72b59090/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d74697b84d79ac7f863e9a65b445ac2e72b59090/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=d74697b84d79ac7f863e9a65b445ac2e72b59090", "patch": "@@ -938,10 +938,10 @@ static status_t demangle_discriminator\n   PARAMS ((demangling_t, int));\n static status_t cp_demangle\n   PARAMS ((const char *, dyn_string_t, int));\n-#ifdef IN_LIBGCC2\n static status_t cp_demangle_type\n   PARAMS ((const char*, dyn_string_t));\n-#endif\n+static char* cplus_demangle_v3_all\n+  PARAMS ((const char*, int));\n \n /* When passed to demangle_bare_function_type, indicates that the\n    function's return type is not encoded before its parameter types.  */\n@@ -3533,7 +3533,6 @@ cp_demangle (name, result, style)\n    dyn_string_t.  On success, returns STATUS_OK.  On failiure, returns\n    an error message, and the contents of RESULT are unchanged.  */\n \n-#ifdef IN_LIBGCC2\n static status_t\n cp_demangle_type (type_name, result)\n      const char* type_name;\n@@ -3571,6 +3570,7 @@ cp_demangle_type (type_name, result)\n   return status;\n }\n \n+#ifdef IN_LIBGCC2\n extern char *__cxa_demangle PARAMS ((const char *, char *, size_t *, int *));\n \n /* ia64 ABI-mandated entry point in the C++ runtime library for performing\n@@ -3689,18 +3689,44 @@ __cxa_demangle (mangled_name, output_buffer, length, status)\n char *\n cplus_demangle_v3 (mangled)\n      const char* mangled;\n+{\n+  return cplus_demangle_v3_all (mangled, 0);\n+}\n+\n+char *\n+cplus_demangle_v3_type (mangled)\n+     const char* mangled;\n+{\n+  return cplus_demangle_v3_all (mangled, 1);\n+}\n+\n+static char *\n+cplus_demangle_v3_all (mangled, type)\n+     const char* mangled;\n+     int type;\n {\n   dyn_string_t demangled;\n   status_t status;\n \n-  /* If this isn't a mangled name, don't pretend to demangle it.  */\n-  if (strncmp (mangled, \"_Z\", 2) != 0)\n-    return NULL;\n+  if (mangled[0] == '_' && mangled[1] == 'Z')\n+    /* It is not a type.  */\n+    type = 0;\n+  else\n+    {\n+      /* It is a type. Stop if we don't want to demangle types. */\n+      if (!type)\n+\treturn NULL;\n+    }\n \n   /* Create a dyn_string to hold the demangled name.  */\n   demangled = dyn_string_new (0);\n   /* Attempt the demangling.  */\n-  status = cp_demangle ((char *) mangled, demangled, 0);\n+  if (!type)\n+    /* Appears to be a function or variable name.  */\n+    status = cp_demangle (mangled, demangled, 0);\n+  else\n+    /* Try to demangle it as the name of a type.  */\n+    status = cp_demangle_type (mangled, demangled);\n \n   if (STATUS_NO_ERROR (status))\n     /* Demangling succeeded.  */"}, {"sha": "b66d26de6a113c669249e5b9337539a34b97c9d2", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d74697b84d79ac7f863e9a65b445ac2e72b59090/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d74697b84d79ac7f863e9a65b445ac2e72b59090/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=d74697b84d79ac7f863e9a65b445ac2e72b59090", "patch": "@@ -478,6 +478,9 @@ do_hpacc_template_literal PARAMS ((struct work_stuff *, const char **, string *)\n static int\n snarf_numeric_literal PARAMS ((const char **, string *));\n \n+static char* (*cplus_demangle_v3_p) PARAMS ((const char* mangled))\n+  = cplus_demangle_v3;\n+\n /* There is a TYPE_QUAL value for each type qualifier.  They can be\n    combined by bitwise-or to form the complete set of qualifiers for a\n    type.  */\n@@ -911,7 +914,7 @@ cplus_demangle (mangled, options)\n   /* The V3 ABI demangling is implemented elsewhere.  */\n   if (GNU_V3_DEMANGLING || AUTO_DEMANGLING)\n     {\n-      ret = cplus_demangle_v3 (mangled);\n+      ret = cplus_demangle_v3_p (mangled);\n       if (ret || GNU_V3_DEMANGLING)\n \treturn ret;\n     }\n@@ -5086,6 +5089,7 @@ main (argc, argv)\n \n   if (optind < argc)\n     {\n+      cplus_demangle_v3_p = cplus_demangle_v3_type;\n       for ( ; optind < argc; optind++)\n \t{\n \t  demangle_it (argv[optind]);"}, {"sha": "303dda54e0cf4333c95a1434c43ecc92d43107f8", "filename": "libiberty/testsuite/regress-demangle", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d74697b84d79ac7f863e9a65b445ac2e72b59090/libiberty%2Ftestsuite%2Fregress-demangle", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d74697b84d79ac7f863e9a65b445ac2e72b59090/libiberty%2Ftestsuite%2Fregress-demangle", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fregress-demangle?ref=d74697b84d79ac7f863e9a65b445ac2e72b59090", "patch": "@@ -10,7 +10,7 @@ sed -e '/^#/ d' \"$1\" | (\n      read mangled\n      read demangled\n \n-     x=\"`echo $mangled | ./test-filter $type`\"\n+     x=\"`./test-filter $type $mangled`\"\n      count=`expr $count + 1`\n      if test \"x$x\" != \"x$demangled\"; then\n \tfailures=`expr $failures + 1`"}]}