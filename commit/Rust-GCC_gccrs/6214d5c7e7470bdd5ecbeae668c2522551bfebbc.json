{"sha": "6214d5c7e7470bdd5ecbeae668c2522551bfebbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIxNGQ1YzdlNzQ3MGJkZDVlY2JlYWU2NjhjMjUyMjU1MWJmZWJiYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-08-29T14:12:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-08-29T14:12:25Z"}, "message": "tree-core.h: Document use of deprecated_flag in SSA_NAME.\n\n2018-08-29  Richard Biener  <rguenther@suse.de>\n\n\t* tree-core.h: Document use of deprecated_flag in SSA_NAME.\n\t* tree.h (SSA_NAME_POINTS_TO_READONLY_MEMORY): Define.\n\t* tree-into-ssa.c (pass_build_ssa::execute): Initialize\n\tfunction parameters SSA_NAME_POINTS_TO_READONLY_MEMORY from fnspec.\n\t* tree-ssa-sccvn.c (const_parms, init_const_parms): Remove.\n\t(vn_reference_lookup_3): Remove use of const_parms.\n\t(free_rpo_vn): Do not free const_parms.\n\t(do_rpo_vn): Do not call init_const_parms.\n\t* tree-ssa-alias.c (refs_may_alias_p_1): Honor\n\tSSA_NAME_POINTS_TO_READONLY_MEMORY.\n\t(call_may_clobber_ref_p_1): Likewise.\n\nFrom-SVN: r263958", "tree": {"sha": "7abbd12de9fe52419e5e7738b933a729107ffe6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7abbd12de9fe52419e5e7738b933a729107ffe6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6214d5c7e7470bdd5ecbeae668c2522551bfebbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6214d5c7e7470bdd5ecbeae668c2522551bfebbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6214d5c7e7470bdd5ecbeae668c2522551bfebbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6214d5c7e7470bdd5ecbeae668c2522551bfebbc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "66e5825973556c8db6fc2cf19179397506b0b101", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66e5825973556c8db6fc2cf19179397506b0b101", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66e5825973556c8db6fc2cf19179397506b0b101"}], "stats": {"total": 111, "additions": 64, "deletions": 47}, "files": [{"sha": "02a7b94d1f210847e1ea5229edbe5eca022ac0ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6214d5c7e7470bdd5ecbeae668c2522551bfebbc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6214d5c7e7470bdd5ecbeae668c2522551bfebbc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6214d5c7e7470bdd5ecbeae668c2522551bfebbc", "patch": "@@ -1,3 +1,17 @@\n+2018-08-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-core.h: Document use of deprecated_flag in SSA_NAME.\n+\t* tree.h (SSA_NAME_POINTS_TO_READONLY_MEMORY): Define.\n+\t* tree-into-ssa.c (pass_build_ssa::execute): Initialize\n+\tfunction parameters SSA_NAME_POINTS_TO_READONLY_MEMORY from fnspec.\n+\t* tree-ssa-sccvn.c (const_parms, init_const_parms): Remove.\n+\t(vn_reference_lookup_3): Remove use of const_parms.\n+\t(free_rpo_vn): Do not free const_parms.\n+\t(do_rpo_vn): Do not call init_const_parms.\n+\t* tree-ssa-alias.c (refs_may_alias_p_1): Honor\n+\tSSA_NAME_POINTS_TO_READONLY_MEMORY.\n+\t(call_may_clobber_ref_p_1): Likewise.\n+\n 2018-08-29  Alexander Monakov  <amonakov@ispras.ru>\n \n \tPR other/86726"}, {"sha": "dee27f89dec8ebff3bceba5efe5d262f05223760", "filename": "gcc/tree-core.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6214d5c7e7470bdd5ecbeae668c2522551bfebbc/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6214d5c7e7470bdd5ecbeae668c2522551bfebbc/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=6214d5c7e7470bdd5ecbeae668c2522551bfebbc", "patch": "@@ -1238,6 +1238,9 @@ struct GTY(()) tree_base {\n        IDENTIFIER_TRANSPARENT_ALIAS in\n            IDENTIFIER_NODE\n \n+       SSA_NAME_POINTS_TO_READONLY_MEMORY in\n+\t   SSA_NAME\n+\n    visited:\n \n        TREE_VISITED in"}, {"sha": "cdae75d1aae5363dac4d9987c999802959f23f7e", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6214d5c7e7470bdd5ecbeae668c2522551bfebbc/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6214d5c7e7470bdd5ecbeae668c2522551bfebbc/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=6214d5c7e7470bdd5ecbeae668c2522551bfebbc", "patch": "@@ -2490,6 +2490,28 @@ pass_build_ssa::execute (function *fun)\n \tSET_SSA_NAME_VAR_OR_IDENTIFIER (name, DECL_NAME (decl));\n     }\n \n+  /* Initialize SSA_NAME_POINTS_TO_READONLY_MEMORY.  */\n+  tree fnspec = lookup_attribute (\"fn spec\",\n+\t\t\t\t  TYPE_ATTRIBUTES (TREE_TYPE (fun->decl)));\n+  if (fnspec)\n+    {\n+      fnspec = TREE_VALUE (TREE_VALUE (fnspec));\n+      unsigned i = 1;\n+      for (tree arg = DECL_ARGUMENTS (cfun->decl);\n+\t   arg; arg = DECL_CHAIN (arg), ++i)\n+\t{\n+\t  if (i >= (unsigned) TREE_STRING_LENGTH (fnspec))\n+\t    break;\n+\t  if (TREE_STRING_POINTER (fnspec)[i]  == 'R'\n+\t      || TREE_STRING_POINTER (fnspec)[i] == 'r')\n+\t    {\n+\t      tree name = ssa_default_def (fun, arg);\n+\t      if (name)\n+\t\tSSA_NAME_POINTS_TO_READONLY_MEMORY (name) = 1;\n+\t    }\n+\t}\n+    }\n+\n   return 0;\n }\n "}, {"sha": "6efe4c3a4a799b127a3c54958c871b1334f25baf", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6214d5c7e7470bdd5ecbeae668c2522551bfebbc/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6214d5c7e7470bdd5ecbeae668c2522551bfebbc/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=6214d5c7e7470bdd5ecbeae668c2522551bfebbc", "patch": "@@ -1483,6 +1483,16 @@ refs_may_alias_p_1 (ao_ref *ref1, ao_ref *ref2, bool tbaa_p)\n \t\t\t\t ao_ref_alias_set (ref2)))\n     return false;\n \n+  /* If the reference is based on a pointer that points to memory\n+     that may not be written to then the other reference cannot possibly\n+     clobber it.  */\n+  if ((TREE_CODE (TREE_OPERAND (base2, 0)) == SSA_NAME\n+       && SSA_NAME_POINTS_TO_READONLY_MEMORY (TREE_OPERAND (base2, 0)))\n+      || (ind1_p\n+\t  && TREE_CODE (TREE_OPERAND (base1, 0)) == SSA_NAME\n+\t  && SSA_NAME_POINTS_TO_READONLY_MEMORY (TREE_OPERAND (base1, 0))))\n+    return false;\n+\n   /* Dispatch to the pointer-vs-decl or pointer-vs-pointer disambiguators.  */\n   if (var1_p && ind2_p)\n     return indirect_ref_may_alias_decl_p (ref2->ref, base2,\n@@ -1991,6 +2001,14 @@ call_may_clobber_ref_p_1 (gcall *call, ao_ref *ref)\n \t  || !is_global_var (base)))\n     return false;\n \n+  /* If the reference is based on a pointer that points to memory\n+     that may not be written to then the call cannot possibly clobber it.  */\n+  if ((TREE_CODE (base) == MEM_REF\n+       || TREE_CODE (base) == TARGET_MEM_REF)\n+      && TREE_CODE (TREE_OPERAND (base, 0)) == SSA_NAME\n+      && SSA_NAME_POINTS_TO_READONLY_MEMORY (TREE_OPERAND (base, 0)))\n+    return false;\n+\n   callee = gimple_call_fndecl (call);\n \n   /* Handle those builtin functions explicitly that do not act as"}, {"sha": "e3b9f1c7dbc233e2ae612e282e6fd22c243e2081", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6214d5c7e7470bdd5ecbeae668c2522551bfebbc/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6214d5c7e7470bdd5ecbeae668c2522551bfebbc/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=6214d5c7e7470bdd5ecbeae668c2522551bfebbc", "patch": "@@ -133,7 +133,6 @@ along with GCC; see the file COPYING3.  If not see\n static tree *last_vuse_ptr;\n static vn_lookup_kind vn_walk_kind;\n static vn_lookup_kind default_vn_walk_kind;\n-bitmap const_parms;\n \n /* vn_nary_op hashtable helpers.  */\n \n@@ -1863,18 +1862,6 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n   bool lhs_ref_ok = false;\n   poly_int64 copy_size;\n \n-  /* If the reference is based on a parameter that was determined as\n-     pointing to readonly memory it doesn't change.  */\n-  if (TREE_CODE (base) == MEM_REF\n-      && TREE_CODE (TREE_OPERAND (base, 0)) == SSA_NAME\n-      && SSA_NAME_IS_DEFAULT_DEF (TREE_OPERAND (base, 0))\n-      && bitmap_bit_p (const_parms,\n-\t\t       SSA_NAME_VERSION (TREE_OPERAND (base, 0))))\n-    {\n-      *disambiguate_only = true;\n-      return NULL;\n-    }\n-\n   /* First try to disambiguate after value-replacing in the definitions LHS.  */\n   if (is_gimple_assign (def_stmt))\n     {\n@@ -4514,37 +4501,6 @@ set_hashtable_value_ids (void)\n     set_value_id_for_result (vr->result, &vr->value_id);\n }\n \n-\n-/* Allocate and initialize CONST_PARAMS, a bitmap of parameter default defs\n-   we know point to readonly memory.  */\n-\n-static void\n-init_const_parms ()\n-{\n-  /* Collect pointers we know point to readonly memory.  */\n-  const_parms = BITMAP_ALLOC (NULL);\n-  tree fnspec = lookup_attribute (\"fn spec\",\n-\t\t\t\t  TYPE_ATTRIBUTES (TREE_TYPE (cfun->decl)));\n-  if (fnspec)\n-    {\n-      fnspec = TREE_VALUE (TREE_VALUE (fnspec));\n-      unsigned i = 1;\n-      for (tree arg = DECL_ARGUMENTS (cfun->decl);\n-\t   arg; arg = DECL_CHAIN (arg), ++i)\n-\t{\n-\t  if (i >= (unsigned) TREE_STRING_LENGTH (fnspec))\n-\t    break;\n-\t  if (TREE_STRING_POINTER (fnspec)[i]  == 'R'\n-\t      || TREE_STRING_POINTER (fnspec)[i] == 'r')\n-\t    {\n-\t      tree name = ssa_default_def (cfun, arg);\n-\t      if (name)\n-\t\tbitmap_set_bit (const_parms, SSA_NAME_VERSION (name));\n-\t    }\n-\t}\n-    }\n-}\n-\n /* Return the maximum value id we have ever seen.  */\n \n unsigned int\n@@ -5606,8 +5562,6 @@ free_rpo_vn (void)\n   obstack_free (&vn_tables_obstack, NULL);\n   obstack_free (&vn_tables_insert_obstack, NULL);\n \n-  BITMAP_FREE (const_parms);\n-\n   vn_ssa_aux_iterator_type it;\n   vn_ssa_aux_t info;\n   FOR_EACH_HASH_TABLE_ELEMENT (*vn_ssa_aux_hash, info, vn_ssa_aux_t, it)\n@@ -6326,7 +6280,6 @@ do_rpo_vn (function *fn, edge entry, bitmap exit_bbs,\n   unsigned region_size = (((unsigned HOST_WIDE_INT)n * num_ssa_names)\n \t\t\t  / (n_basic_blocks_for_fn (fn) - NUM_FIXED_BLOCKS));\n   VN_TOP = create_tmp_var_raw (void_type_node, \"vn_top\");\n-  init_const_parms ();\n \n   vn_ssa_aux_hash = new hash_table <vn_ssa_aux_hasher> (region_size * 2);\n   gcc_obstack_init (&vn_ssa_aux_obstack);"}, {"sha": "4f415b7a220f92410334b2bba67fc11f2f94a21a", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6214d5c7e7470bdd5ecbeae668c2522551bfebbc/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6214d5c7e7470bdd5ecbeae668c2522551bfebbc/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6214d5c7e7470bdd5ecbeae668c2522551bfebbc", "patch": "@@ -1743,6 +1743,13 @@ extern tree maybe_wrap_with_location (tree, location_t);\n #define SSA_NAME_IS_DEFAULT_DEF(NODE) \\\n     SSA_NAME_CHECK (NODE)->base.default_def_flag\n \n+/* Nonzero if this SSA_NAME is known to point to memory that may not\n+   be written to.  This is set for default defs of function parameters\n+   that have a corresponding r or R specification in the functions\n+   fn spec attribute.  This is used by alias analysis.  */\n+#define SSA_NAME_POINTS_TO_READONLY_MEMORY(NODE) \\\n+    SSA_NAME_CHECK (NODE)->base.deprecated_flag\n+\n /* Attributes for SSA_NAMEs for pointer-type variables.  */\n #define SSA_NAME_PTR_INFO(N) \\\n    SSA_NAME_CHECK (N)->ssa_name.info.ptr_info"}]}