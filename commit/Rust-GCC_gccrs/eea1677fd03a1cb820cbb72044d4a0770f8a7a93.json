{"sha": "eea1677fd03a1cb820cbb72044d4a0770f8a7a93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVhMTY3N2ZkMDNhMWNiODIwY2JiNzIwNDRkNGEwNzcwZjhhN2E5Mw==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-08-05T09:07:03Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-08-19T08:18:52Z"}, "message": "JIT, testsuite, Darwin: Initial testsuite fixes.\n\nThe testsuite setup for jit is not compatible with Darwin since it\nassumes that all targets support --export-dynamic.\n\n - this is fixed by adding '-rdynamic' conditionally upon target\n   support for that (-rdynamic will be converted to the appropriate\n   linker option).\n\nThere is also an assumption that a suitable version of dejagnu.h\nis present in some default include search path that is usable from\nthe testsuite.  This is not the case for Darwin (dejagnu.h is not\ninstalled, and would not, in general, be found in any default include\nsearch path if installed via one of the main 'distros').  Also the\nupstream dejagnu.h has a definition of 'wait()' that clashes with a\nlibc routines and therefore causes fails in the testsuite.\n\n - This patch imports the header from dejagnu-1.6.2 and\n   * renames it to 'jit-dejagnu.h'\n   * patches it to avoid unused variable warnings and the clash\n     with the libc definition of wait ()\n   * In accordance with the advice in the expect man page, ensures\n     that the final output of the 'totals' print is stable.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\ngcc/jit/ChangeLog:\n\n\t* docs/examples/tut04-toyvm/toyvm.c: Include jit-dejagnu.h.\n\t* docs/examples/tut04-toyvm/toyvm.cc: Likewise.\n\t* jit-dejagnu.h: New file, imported from dejagnu-1.6.2 and\n\tpatched for this application.\n\ngcc/testsuite/ChangeLog:\n\n\t* jit.dg/harness.h: Include jit-dejagnu.h.\n\t* jit.dg/jit.exp: Use -rdynamic conditionally on target\n\tsupport, instead of unconditional -Wl,--export-dynamic.", "tree": {"sha": "6237223a4fce493cb4b7df299c02a4e450c3a2fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6237223a4fce493cb4b7df299c02a4e450c3a2fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eea1677fd03a1cb820cbb72044d4a0770f8a7a93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eea1677fd03a1cb820cbb72044d4a0770f8a7a93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eea1677fd03a1cb820cbb72044d4a0770f8a7a93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eea1677fd03a1cb820cbb72044d4a0770f8a7a93/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7fc42073c04813f6b63e0641d3f6765424857c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7fc42073c04813f6b63e0641d3f6765424857c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7fc42073c04813f6b63e0641d3f6765424857c9"}], "stats": {"total": 351, "additions": 347, "deletions": 4}, "files": [{"sha": "8ea716e2d0a127928373517e4128eeed8f84512b", "filename": "gcc/jit/docs/examples/tut04-toyvm/toyvm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea1677fd03a1cb820cbb72044d4a0770f8a7a93/gcc%2Fjit%2Fdocs%2Fexamples%2Ftut04-toyvm%2Ftoyvm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea1677fd03a1cb820cbb72044d4a0770f8a7a93/gcc%2Fjit%2Fdocs%2Fexamples%2Ftut04-toyvm%2Ftoyvm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fexamples%2Ftut04-toyvm%2Ftoyvm.c?ref=eea1677fd03a1cb820cbb72044d4a0770f8a7a93", "patch": "@@ -24,7 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include <stdlib.h>\n #include <string.h>\n \n-#include <dejagnu.h>\n+#include \"jit-dejagnu.h\"\n \n #include <libgccjit.h>\n "}, {"sha": "7e9550159ad1dd27fbab891888aa6c99084bfa06", "filename": "gcc/jit/docs/examples/tut04-toyvm/toyvm.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea1677fd03a1cb820cbb72044d4a0770f8a7a93/gcc%2Fjit%2Fdocs%2Fexamples%2Ftut04-toyvm%2Ftoyvm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea1677fd03a1cb820cbb72044d4a0770f8a7a93/gcc%2Fjit%2Fdocs%2Fexamples%2Ftut04-toyvm%2Ftoyvm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fexamples%2Ftut04-toyvm%2Ftoyvm.cc?ref=eea1677fd03a1cb820cbb72044d4a0770f8a7a93", "patch": "@@ -24,7 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include <stdlib.h>\n #include <string.h>\n \n-#include <dejagnu.h>\n+#include \"jit-dejagnu.h\"\n \n #include <libgccjit++.h>\n "}, {"sha": "eb53cc92416a8f35bcdc2104e123424c1afff88c", "filename": "gcc/jit/jit-dejagnu.h", "status": "added", "additions": 338, "deletions": 0, "changes": 338, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea1677fd03a1cb820cbb72044d4a0770f8a7a93/gcc%2Fjit%2Fjit-dejagnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea1677fd03a1cb820cbb72044d4a0770f8a7a93/gcc%2Fjit%2Fjit-dejagnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-dejagnu.h?ref=eea1677fd03a1cb820cbb72044d4a0770f8a7a93", "patch": "@@ -0,0 +1,338 @@\n+/* DejaGnu unit testing header.\n+   Copyright (C) 2000-2016 Free Software Foundation, Inc.\n+\n+This file is part of DejaGnu.\n+\n+DejaGnu is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3 of the License, or\n+(at your option) any later version.\n+\n+DejaGnu is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with DejaGnu; if not, write to the Free Software Foundation,\n+Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */\n+\n+/* Imported from 1.6.2 with modifications\n+   * to avoid and unused symbol in C compilations\n+   * avoid wait () clashing with system-provided routines\n+   * provide a deterministic last line of output after the totals.  */\n+\n+#ifndef __DEJAGNU_H__\n+#define __DEJAGNU_H__\n+\n+#include <stdio.h>\n+#include <stdarg.h>\n+#include <string.h>\n+\n+/* If you have problems with DejaGnu dropping failed, untested, or\n+ * unresolved messages generated by a unit testcase, then:  */\n+\n+/* #define _DEJAGNU_WAIT_  */\n+\n+#ifdef _DEJAGNU_WAIT_\n+#include <sys/time.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+#endif\n+\n+static int passed;\n+static int failed;\n+static int untest;\n+static int unresolve;\n+static int xfailed;\n+#ifdef __cplusplus\n+static int xpassed;\n+#endif\n+\n+static char buffer[512];\n+\n+#ifdef _DEJAGNU_WAIT_\n+void\n+dg_wait (void)\n+{\n+  fd_set rfds;\n+  struct timeval tv;\n+\n+  FD_ZERO (&rfds);\n+  tv.tv_sec = 0;\n+  tv.tv_usec = 1;\n+\n+  select (0, &rfds, NULL, NULL, &tv);\n+}\n+#endif\n+\n+static inline void\n+pass (const char* fmt, ...)\n+{\n+  va_list ap;\n+\n+  passed++;\n+  va_start (ap, fmt);\n+  vsnprintf (buffer, sizeof (buffer), fmt, ap);\n+  va_end (ap);\n+  printf (\"\\tPASSED: %s\\n\", buffer);\n+#ifdef _DEJAGNU_WAIT_\n+  dg_wait ();\n+#endif\n+}\n+\n+static inline void\n+xpass (const char* fmt, ...)\n+{\n+  va_list ap;\n+\n+  passed++;\n+  va_start (ap, fmt);\n+  vsnprintf (buffer, sizeof (buffer), fmt, ap);\n+  va_end (ap);\n+  printf (\"\\tXPASSED: %s\\n\", buffer);\n+#ifdef _DEJAGNU_WAIT_\n+  dg_wait ();\n+#endif\n+}\n+\n+static inline void\n+fail (const char* fmt, ...)\n+{\n+  va_list ap;\n+\n+  failed++;\n+  va_start (ap, fmt);\n+  vsnprintf (buffer, sizeof (buffer), fmt, ap);\n+  va_end (ap);\n+  printf (\"\\tFAILED: %s\\n\", buffer);\n+#ifdef _DEJAGNU_WAIT_\n+  dg_wait ();\n+#endif\n+}\n+\n+static inline void\n+xfail (const char* fmt, ...)\n+{\n+  va_list ap;\n+\n+  failed++;\n+  va_start (ap, fmt);\n+  vsnprintf (buffer, sizeof (buffer), fmt, ap);\n+  va_end (ap);\n+  printf (\"\\tXFAILED: %s\\n\", buffer);\n+#ifdef _DEJAGNU_WAIT_\n+  dg_wait ();\n+#endif\n+}\n+\n+static inline void\n+untested (const char* fmt, ...)\n+{\n+  va_list ap;\n+\n+  untest++;\n+  va_start (ap, fmt);\n+  vsnprintf (buffer, sizeof (buffer), fmt, ap);\n+  va_end (ap);\n+  printf (\"\\tUNTESTED: %s\\n\", buffer);\n+#ifdef _DEJAGNU_WAIT_\n+  dg_wait ();\n+#endif\n+}\n+\n+static inline void\n+unresolved (const char* fmt, ...)\n+{\n+  va_list ap;\n+\n+  unresolve++;\n+  va_start (ap, fmt);\n+  vsnprintf (buffer, sizeof (buffer), fmt, ap);\n+  va_end (ap);\n+  printf (\"\\tUNRESOLVED: %s\\n\", buffer);\n+#ifdef _DEJAGNU_WAIT_\n+  dg_wait ();\n+#endif\n+}\n+\n+static inline void\n+note (const char* fmt, ...)\n+{\n+  va_list ap;\n+\n+  va_start (ap, fmt);\n+  vsnprintf (buffer, sizeof (buffer), fmt, ap);\n+  va_end (ap);\n+  printf (\"\\tNOTE: %s\\n\", buffer);\n+#ifdef _DEJAGNU_WAIT_\n+  dg_wait ();\n+#endif\n+}\n+\n+static inline void\n+totals (void)\n+{\n+  printf (\"\\nTotals:\\n\");\n+  printf (\"\\t#passed:\\t\\t%d\\n\", passed);\n+  printf (\"\\t#real failed:\\t\\t%d\\n\", failed);\n+  if (xfailed)\n+    printf (\"\\t#expected failures:\\t\\t%d\\n\", xfailed);\n+  if (untest)\n+    printf (\"\\t#untested:\\t\\t%d\\n\", untest);\n+  if (unresolve)\n+    printf (\"\\t#unresolved:\\t\\t%d\\n\", unresolve);\n+  printf (\"\\njit-dg-harness-complete\\n\");\n+}\n+\n+#ifdef __cplusplus\n+\n+#include <iostream>\n+#include <iomanip>\n+#include <fstream>\n+#include <string>\n+\n+const char *outstate_list[] = {\n+  \"FAILED: \", \"PASSED: \", \"UNTESTED: \", \"UNRESOLVED: \", \"XFAILED: \", \"XPASSED: \"\n+};\n+\n+const char ** outstate = outstate_list;\n+\n+enum teststate { FAILED, PASSED, UNTESTED, UNRESOLVED, XFAILED, XPASSED} laststate;\n+\n+class TestState {\n+ private:\n+  teststate laststate;\n+  std::string lastmsg;\n+ public:\n+  TestState (void)\n+    {\n+      passed = 0;\n+      failed = 0;\n+      untest = 0;\n+      xpassed = 0;\n+      xfailed = 0;\n+      unresolve = 0;\n+    }\n+\n+  ~TestState (void) { totals(); }\n+\n+  void testrun (bool b, std::string s)\n+    {\n+      if (b)\n+\tpass (s);\n+      else\n+\tfail (s);\n+    }\n+\n+    void pass (std::string s)\n+      {\n+\tpassed++;\n+\tlaststate = PASSED;\n+\tlastmsg = s;\n+\tstd::cout << \"\\t\" << outstate[PASSED] << s << std::endl;\n+      }\n+\n+    void pass (const char *c)\n+      {\n+\tstd::string s = c;\n+\tpass (s);\n+      }\n+\n+    void xpass (std::string s)\n+      {\n+\txpassed++;\n+\tlaststate = PASSED;\n+\tlastmsg = s;\n+\tstd::cout << \"\\t\" << outstate[XPASSED] << s << std::endl;\n+      }\n+\n+    void xpass (const char *c)\n+      {\n+\tstd::string s = c;\n+\txpass (s);\n+      }\n+\n+    void fail (std::string s)\n+      {\n+\tfailed++;\n+\tlaststate = FAILED;\n+\tlastmsg = s;\n+\tstd::cout << \"\\t\" << outstate[FAILED] << s << std::endl;\n+      }\n+\n+    void fail (const char *c)\n+      {\n+\tstd::string s = c;\n+\tfail (s);\n+      }\n+\n+    void xfail (std::string s)\n+      {\n+\txfailed++;\n+\tlaststate = XFAILED;\n+\tlastmsg = s;\n+\tstd::cout << \"\\t\" << outstate[XFAILED] << s << std::endl;\n+      }\n+\n+    void xfail (const char *c)\n+      {\n+\tstd::string s = c;\n+\txfail (s);\n+      }\n+\n+    void untested (std::string s)\n+      {\n+\tuntest++;\n+\tlaststate = UNTESTED;\n+\tlastmsg = s;\n+\tstd::cout << \"\\t\" << outstate[UNTESTED] << s << std::endl;\n+      }\n+\n+    void untested (const char *c)\n+      {\n+\tstd::string s = c;\n+\tuntested (s);\n+      }\n+\n+    void unresolved (std::string s)\n+      {\n+\tunresolve++;\n+\tlaststate = UNRESOLVED;\n+\tlastmsg = s;\n+\tstd::cout << \"\\t\" << outstate[UNRESOLVED] << s << std::endl;\n+      }\n+\n+    void unresolved (const char *c)\n+      {\n+\tstd::string s = c;\n+\tunresolved (s);\n+      }\n+\n+    void totals (void)\n+      {\n+\tstd::cout << \"\\t#passed:\\t\\t\" << passed << std::endl;\n+\tstd::cout << \"\\t#real failed:\\t\\t\" << failed << std::endl;\n+\tif (xfailed)\n+\t  std::cout << \"\\t#expected failures:\\t\\t\" << xfailed << std::endl;\n+\tif (xpassed)\n+\t  std::cout << \"\\t#unexpected passes:\\t\\t\" << xpassed << std::endl;\n+\tif (untest)\n+\t  std::cout << \"\\t#untested:\\t\\t\" << untest << std::endl;\n+\tif (unresolve)\n+\t  std::cout << \"\\t#unresolved:\\t\\t\" << unresolve << std::endl;\n+        std::cout << \"\\njit-dg-harness-complete\" << std::endl;\n+      }\n+\n+    // This is so this class can be printed in an ostream.\n+    friend std::ostream & operator << (std::ostream &os, TestState& t)\n+      {\n+\treturn os << \"\\t\" << outstate[t.laststate] << t.lastmsg ;\n+      }\n+\n+    int GetState (void) { return laststate; }\n+    std::string GetMsg (void) { return lastmsg; }\n+};\n+\n+#endif /* __cplusplus */\n+#endif /* _DEJAGNU_H_ */"}, {"sha": "0dc5ed1dad016d271be51d034569800222ae409e", "filename": "gcc/testsuite/jit.dg/harness.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea1677fd03a1cb820cbb72044d4a0770f8a7a93/gcc%2Ftestsuite%2Fjit.dg%2Fharness.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea1677fd03a1cb820cbb72044d4a0770f8a7a93/gcc%2Ftestsuite%2Fjit.dg%2Fharness.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fharness.h?ref=eea1677fd03a1cb820cbb72044d4a0770f8a7a93", "patch": "@@ -27,7 +27,7 @@\n #define note dejagnu_note\n #endif\n \n-#include <dejagnu.h>\n+#include \"jit-dejagnu.h\"\n \n #ifdef MAKE_DEJAGNU_H_THREADSAFE\n #undef pass"}, {"sha": "005ba01601a189491003335e1c572652f7e90512", "filename": "gcc/testsuite/jit.dg/jit.exp", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea1677fd03a1cb820cbb72044d4a0770f8a7a93/gcc%2Ftestsuite%2Fjit.dg%2Fjit.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea1677fd03a1cb820cbb72044d4a0770f8a7a93/gcc%2Ftestsuite%2Fjit.dg%2Fjit.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fjit.exp?ref=eea1677fd03a1cb820cbb72044d4a0770f8a7a93", "patch": "@@ -914,9 +914,14 @@ proc jit-verify-executable { args } {\n     jit-run-executable $output_filename ${dg-output-text}\n }\n \n+set DEFAULT_CFLAGS \"-I$srcdir/../jit -lgccjit -g -Wall -Werror\"\n+\n # We need to link with --export-dynamic for test-calling-external-function.c\n # so that the JIT-built code can call into functions from the main program.\n-set DEFAULT_CFLAGS \"-I$srcdir/../jit -lgccjit -g -Wall -Werror -Wl,--export-dynamic\"\n+\n+if { [check_effective_target_rdynamic] } {\n+  set DEFAULT_CFLAGS \"$DEFAULT_CFLAGS -rdynamic\"\n+}\n \n # Main loop.  This will invoke jig-dg-test on each test-*.c file.\n dg-runtest $tests \"\" $DEFAULT_CFLAGS"}]}