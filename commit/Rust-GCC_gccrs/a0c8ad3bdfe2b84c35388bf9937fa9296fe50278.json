{"sha": "a0c8ad3bdfe2b84c35388bf9937fa9296fe50278", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBjOGFkM2JkZmUyYjg0YzM1Mzg4YmY5OTM3ZmE5Mjk2ZmU1MDI3OA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-03-29T03:53:13Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-03-29T03:53:13Z"}, "message": "compiler, libgo: unsafe.{Sizeof,Alignof,Offsetof} return uintptr.\n\nFrom-SVN: r185946", "tree": {"sha": "a4e8c7e8ea099b688e9c92980ae88d0d055a99b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4e8c7e8ea099b688e9c92980ae88d0d055a99b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0c8ad3bdfe2b84c35388bf9937fa9296fe50278", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0c8ad3bdfe2b84c35388bf9937fa9296fe50278", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0c8ad3bdfe2b84c35388bf9937fa9296fe50278", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0c8ad3bdfe2b84c35388bf9937fa9296fe50278/comments", "author": null, "committer": null, "parents": [{"sha": "917c1602aa2bf8905890ee6c19a1624f80b1c8c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/917c1602aa2bf8905890ee6c19a1624f80b1c8c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/917c1602aa2bf8905890ee6c19a1624f80b1c8c3"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "06e85eb8de2880fbe0001659f4af8fe5a86235fe", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c8ad3bdfe2b84c35388bf9937fa9296fe50278/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c8ad3bdfe2b84c35388bf9937fa9296fe50278/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=a0c8ad3bdfe2b84c35388bf9937fa9296fe50278", "patch": "@@ -7091,7 +7091,8 @@ Builtin_call_expression::do_numeric_constant_value(Numeric_constant* nc) const\n       else\n \tgo_unreachable();\n \n-      nc->set_unsigned_long(NULL, static_cast<unsigned long>(ret));\n+      nc->set_unsigned_long(Type::lookup_integer_type(\"uintptr\"),\n+\t\t\t    static_cast<unsigned long>(ret));\n       return true;\n     }\n   else if (this->code_ == BUILTIN_OFFSETOF)\n@@ -7113,7 +7114,8 @@ Builtin_call_expression::do_numeric_constant_value(Numeric_constant* nc) const\n \t\t\t\t\t\t   farg->field_index(),\n \t\t\t\t\t\t   &offset))\n \treturn false;\n-      nc->set_unsigned_long(NULL, static_cast<unsigned long>(offset));\n+      nc->set_unsigned_long(Type::lookup_integer_type(\"uintptr\"),\n+\t\t\t    static_cast<unsigned long>(offset));\n       return true;\n     }\n   else if (this->code_ == BUILTIN_REAL || this->code_ == BUILTIN_IMAG)\n@@ -7246,10 +7248,12 @@ Builtin_call_expression::do_type()\n     case BUILTIN_CAP:\n     case BUILTIN_COPY:\n     case BUILTIN_LEN:\n+      return Type::lookup_integer_type(\"int\");\n+\n     case BUILTIN_ALIGNOF:\n     case BUILTIN_OFFSETOF:\n     case BUILTIN_SIZEOF:\n-      return Type::lookup_integer_type(\"int\");\n+      return Type::lookup_integer_type(\"uintptr\");\n \n     case BUILTIN_CLOSE:\n     case BUILTIN_DELETE:\n@@ -8078,8 +8082,8 @@ Builtin_call_expression::do_get_tree(Translate_context* context)\n \t    go_assert(saw_errors());\n \t    return error_mark_node;\n \t  }\n-\tType* int_type = Type::lookup_integer_type(\"int\");\n-\ttree type = type_to_tree(int_type->get_backend(gogo));\n+\tType* uintptr_type = Type::lookup_integer_type(\"uintptr\");\n+\ttree type = type_to_tree(uintptr_type->get_backend(gogo));\n \treturn build_int_cst(type, val);\n       }\n "}, {"sha": "930723e0908e6d170e09ccec99d6b5fefb4b2c4a", "filename": "gcc/go/gofrontend/unsafe.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c8ad3bdfe2b84c35388bf9937fa9296fe50278/gcc%2Fgo%2Fgofrontend%2Funsafe.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c8ad3bdfe2b84c35388bf9937fa9296fe50278/gcc%2Fgo%2Fgofrontend%2Funsafe.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Funsafe.cc?ref=a0c8ad3bdfe2b84c35388bf9937fa9296fe50278", "patch": "@@ -57,11 +57,11 @@ Gogo::import_unsafe(const std::string& local_name, bool is_local_name_exported,\n   if (add_to_globals)\n     this->add_named_type(pointer_type);\n \n-  Type* int_type = this->lookup_global(\"int\")->type_value();\n+  Type* uintptr_type = Type::lookup_integer_type(\"uintptr\");\n \n   // Sizeof.\n   Typed_identifier_list* results = new Typed_identifier_list;\n-  results->push_back(Typed_identifier(\"\", int_type, bloc));\n+  results->push_back(Typed_identifier(\"\", uintptr_type, bloc));\n   Function_type* fntype = Type::make_function_type(NULL, NULL, results, bloc);\n   fntype->set_is_builtin();\n   no = bindings->add_function_declaration(\"Sizeof\", package, fntype, bloc);\n@@ -70,7 +70,7 @@ Gogo::import_unsafe(const std::string& local_name, bool is_local_name_exported,\n \n   // Offsetof.\n   results = new Typed_identifier_list;\n-  results->push_back(Typed_identifier(\"\", int_type, bloc));\n+  results->push_back(Typed_identifier(\"\", uintptr_type, bloc));\n   fntype = Type::make_function_type(NULL, NULL, results, bloc);\n   fntype->set_is_varargs();\n   fntype->set_is_builtin();\n@@ -80,7 +80,7 @@ Gogo::import_unsafe(const std::string& local_name, bool is_local_name_exported,\n \n   // Alignof.\n   results = new Typed_identifier_list;\n-  results->push_back(Typed_identifier(\"\", int_type, bloc));\n+  results->push_back(Typed_identifier(\"\", uintptr_type, bloc));\n   fntype = Type::make_function_type(NULL, NULL, results, bloc);\n   fntype->set_is_varargs();\n   fntype->set_is_builtin();"}, {"sha": "c693aebf3775861334f170c879a62e727ee99df5", "filename": "libgo/go/os/dir.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c8ad3bdfe2b84c35388bf9937fa9296fe50278/libgo%2Fgo%2Fos%2Fdir.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c8ad3bdfe2b84c35388bf9937fa9296fe50278/libgo%2Fgo%2Fos%2Fdir.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fdir.go?ref=a0c8ad3bdfe2b84c35388bf9937fa9296fe50278", "patch": "@@ -34,7 +34,7 @@ var elen int\n func (file *File) readdirnames(n int) (names []string, err error) {\n \tif elen == 0 {\n \t\tvar dummy syscall.Dirent\n-\t\telen = (unsafe.Offsetof(dummy.Name) +\n+\t\telen = (int(unsafe.Offsetof(dummy.Name)) +\n \t\t\tlibc_pathconf(syscall.StringBytePtr(file.name), syscall.PC_NAME_MAX) +\n \t\t\t1)\n \t}"}, {"sha": "9961ba8ff2d7e41c3fdd1f2746483416b244edcc", "filename": "libgo/go/syscall/libcall_posix.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c8ad3bdfe2b84c35388bf9937fa9296fe50278/libgo%2Fgo%2Fsyscall%2Flibcall_posix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c8ad3bdfe2b84c35388bf9937fa9296fe50278/libgo%2Fgo%2Fsyscall%2Flibcall_posix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_posix.go?ref=a0c8ad3bdfe2b84c35388bf9937fa9296fe50278", "patch": "@@ -138,7 +138,7 @@ func (w WaitStatus) TrapCause() int\n //sys\tSelect(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval) (n int, err error)\n //select(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval) int\n \n-const nfdbits = unsafe.Sizeof(fds_bits_type) * 8\n+const nfdbits = int(unsafe.Sizeof(fds_bits_type) * 8)\n \n type FdSet struct {\n \tBits [(FD_SETSIZE + nfdbits - 1) / nfdbits]fds_bits_type"}]}