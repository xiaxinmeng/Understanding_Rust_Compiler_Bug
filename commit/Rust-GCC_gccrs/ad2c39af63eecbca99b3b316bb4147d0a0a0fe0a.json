{"sha": "ad2c39af63eecbca99b3b316bb4147d0a0a0fe0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQyYzM5YWY2M2VlY2JjYTk5YjNiMzE2YmI0MTQ3ZDBhMGEwZmUwYQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-05-07T07:34:29Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-05-07T07:34:29Z"}, "message": "re PR target/66015 (align directives not propagated after __attribute__ ((__optimize__ (\"O2\"))))\n\n\tPR target/66015\n\t* config/alpha/alpha.c (alpha_override_options_after_change): New.\n\t(TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE): New.\n\t(alpha_override_options): Move align_loops, align_jumps and\n\talign_functions handling into alpha_override_options_after_change.\n\nFrom-SVN: r222870", "tree": {"sha": "214eea9862ae259290c0ee6f7c97e1a0e69402bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/214eea9862ae259290c0ee6f7c97e1a0e69402bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad2c39af63eecbca99b3b316bb4147d0a0a0fe0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad2c39af63eecbca99b3b316bb4147d0a0a0fe0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad2c39af63eecbca99b3b316bb4147d0a0a0fe0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad2c39af63eecbca99b3b316bb4147d0a0a0fe0a/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "06cb4b647aeb5a69c201cf4291f57f7597efc465", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06cb4b647aeb5a69c201cf4291f57f7597efc465", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06cb4b647aeb5a69c201cf4291f57f7597efc465"}], "stats": {"total": 43, "additions": 32, "deletions": 11}, "files": [{"sha": "19cd61cde92f219d1084d57bd65cdb3b3bd5d5b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad2c39af63eecbca99b3b316bb4147d0a0a0fe0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad2c39af63eecbca99b3b316bb4147d0a0a0fe0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad2c39af63eecbca99b3b316bb4147d0a0a0fe0a", "patch": "@@ -1,3 +1,11 @@\n+2015-05-07  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/66015\n+\t* config/alpha/alpha.c (alpha_override_options_after_change): New.\n+\t(TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE): New.\n+\t(alpha_override_options): Move align_loops, align_jumps and\n+\talign_functions handling into alpha_override_options_after_change.\n+\n 2015-05-06  Sandra Loosemore  <sandra@codesourcery.com>\n \t    Chris Jones  <chrisj@nvidia.com>\n \t    Joshua Conner  <jconner@nvidia.com>"}, {"sha": "5ed4dc6154b27d6ca6ed639a471e8e795903b118", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad2c39af63eecbca99b3b316bb4147d0a0a0fe0a/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad2c39af63eecbca99b3b316bb4147d0a0a0fe0a/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=ad2c39af63eecbca99b3b316bb4147d0a0a0fe0a", "patch": "@@ -241,6 +241,7 @@ static struct machine_function *alpha_init_machine_status (void);\n static rtx alpha_emit_xfloating_compare (enum rtx_code *, rtx, rtx);\n static void alpha_handle_trap_shadows (void);\n static void alpha_align_insns (void);\n+static void alpha_override_options_after_change (void);\n \n #if TARGET_ABI_OPEN_VMS\n static void alpha_write_linkage (FILE *, const char *);\n@@ -628,17 +629,7 @@ alpha_option_override (void)\n   else if (flag_pic == 2)\n     target_flags &= ~MASK_SMALL_DATA;\n \n-  /* Align labels and loops for optimal branching.  */\n-  /* ??? Kludge these by not doing anything if we don't optimize.  */\n-  if (optimize > 0)\n-    {\n-      if (align_loops <= 0)\n-\talign_loops = 16;\n-      if (align_jumps <= 0)\n-\talign_jumps = 16;\n-    }\n-  if (align_functions <= 0)\n-    align_functions = 16;\n+  alpha_override_options_after_change ();\n \n   /* Register variables and functions with the garbage collector.  */\n \n@@ -662,6 +653,24 @@ alpha_option_override (void)\n   register_pass (&handle_trap_shadows_info);\n   register_pass (&align_insns_info);\n }\n+\n+/* Implement targetm.override_options_after_change.  */\n+\n+static void\n+alpha_override_options_after_change (void)\n+{\n+  /* Align labels and loops for optimal branching.  */\n+  /* ??? Kludge these by not doing anything if we don't optimize.  */\n+  if (optimize > 0)\n+    {\n+      if (align_loops <= 0)\n+\talign_loops = 16;\n+      if (align_jumps <= 0)\n+\talign_jumps = 16;\n+    }\n+  if (align_functions <= 0)\n+    align_functions = 16;\n+}\n \f\n /* Returns 1 if VALUE is a mask that contains full bytes of zero or ones.  */\n \n@@ -10098,6 +10107,10 @@ alpha_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE alpha_option_override\n \n+#undef TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE\n+#define TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE \\\n+  alpha_override_options_after_change\n+\n #ifdef TARGET_ALTERNATE_LONG_DOUBLE_MANGLING\n #undef TARGET_MANGLE_TYPE\n #define TARGET_MANGLE_TYPE alpha_mangle_type"}]}