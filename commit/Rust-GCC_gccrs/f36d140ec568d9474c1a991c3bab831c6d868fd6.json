{"sha": "f36d140ec568d9474c1a991c3bab831c6d868fd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM2ZDE0MGVjNTY4ZDk0NzRjMWE5OTFjM2JhYjgzMWM2ZDg2OGZkNg==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2009-08-06T21:05:42Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2009-08-06T21:05:42Z"}, "message": "lib1funcs.asm (ARM_DIV_BODY): Add Thumb-2 implementation.\n\n\t* config/arm/lib1funcs.asm (ARM_DIV_BODY): Add Thumb-2 implementation.\n\t(udivsi3, aeabi_uidivmod, divsi3, aeabi_idivmod): Only use Thumb-1\n\timplementation on ARMv6-M.\n\nFrom-SVN: r150545", "tree": {"sha": "2f843135c4d43d5b5800a73c36c047389dbf4f97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f843135c4d43d5b5800a73c36c047389dbf4f97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f36d140ec568d9474c1a991c3bab831c6d868fd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f36d140ec568d9474c1a991c3bab831c6d868fd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f36d140ec568d9474c1a991c3bab831c6d868fd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f36d140ec568d9474c1a991c3bab831c6d868fd6/comments", "author": null, "committer": null, "parents": [{"sha": "da0e8d951a2058082114455560e379d16724d74e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da0e8d951a2058082114455560e379d16724d74e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da0e8d951a2058082114455560e379d16724d74e"}], "stats": {"total": 69, "additions": 60, "deletions": 9}, "files": [{"sha": "24920f02faecc7ac07f059150d67ee0ced1c3790", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f36d140ec568d9474c1a991c3bab831c6d868fd6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f36d140ec568d9474c1a991c3bab831c6d868fd6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f36d140ec568d9474c1a991c3bab831c6d868fd6", "patch": "@@ -1,3 +1,9 @@\n+2009-08-06  Paul Brook  <paul@codesourcery.com>\n+\n+\t* config/arm/lib1funcs.asm (ARM_DIV_BODY): Add Thumb-2 implementation.\n+\t(udivsi3, aeabi_uidivmod, divsi3, aeabi_idivmod): Only use Thumb-1\n+\timplementation on ARMv6-M.\n+\n 2009-08-06  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* doc/extend.texi (pcs): Document new attribute for ARM."}, {"sha": "9f7cc63e469261451e8ea5a3372019038ffc2a60", "filename": "gcc/config/arm/lib1funcs.asm", "status": "modified", "additions": 54, "deletions": 9, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f36d140ec568d9474c1a991c3bab831c6d868fd6/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f36d140ec568d9474c1a991c3bab831c6d868fd6/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flib1funcs.asm?ref=f36d140ec568d9474c1a991c3bab831c6d868fd6", "patch": "@@ -446,6 +446,27 @@ pc\t\t.req\tr15\n \n #if __ARM_ARCH__ >= 5 && ! defined (__OPTIMIZE_SIZE__)\n \n+#if defined (__thumb2__)\n+\tclz\t\\curbit, \\dividend\n+\tclz\t\\result, \\divisor\n+\tsub\t\\curbit, \\result, \\curbit\n+\trsb\t\\curbit, \\curbit, #31\n+\tadr\t\\result, 1f\n+\tadd\t\\curbit, \\result, \\curbit, lsl #4\n+\tmov\t\\result, #0\n+\tmov\tpc, \\curbit\n+.p2align 3\n+1:\n+\t.set\tshift, 32\n+\t.rept\t32\n+\t.set\tshift, shift - 1\n+\tcmp.w\t\\dividend, \\divisor, lsl #shift\n+\tnop.n\n+\tadc.w\t\\result, \\result, \\result\n+\tit\tcs\n+\tsubcs.w\t\\dividend, \\dividend, \\divisor, lsl #shift\n+\t.endr\n+#else\n \tclz\t\\curbit, \\dividend\n \tclz\t\\result, \\divisor\n \tsub\t\\curbit, \\result, \\curbit\n@@ -461,6 +482,7 @@ pc\t\t.req\tr15\n \tadc\t\\result, \\result, \\result\n \tsubcs\t\\dividend, \\dividend, \\divisor, lsl #shift\n \t.endr\n+#endif\n \n #else /* __ARM_ARCH__ < 5 || defined (__OPTIMIZE_SIZE__) */\n #if __ARM_ARCH__ >= 5\n@@ -508,18 +530,23 @@ pc\t\t.req\tr15\n \n \t@ Division loop\n 1:\tcmp\t\\dividend, \\divisor\n+\tdo_it\ths, t\n \tsubhs\t\\dividend, \\dividend, \\divisor\n \torrhs\t\\result,   \\result,   \\curbit\n \tcmp\t\\dividend, \\divisor,  lsr #1\n+\tdo_it\ths, t\n \tsubhs\t\\dividend, \\dividend, \\divisor, lsr #1\n \torrhs\t\\result,   \\result,   \\curbit,  lsr #1\n \tcmp\t\\dividend, \\divisor,  lsr #2\n+\tdo_it\ths, t\n \tsubhs\t\\dividend, \\dividend, \\divisor, lsr #2\n \torrhs\t\\result,   \\result,   \\curbit,  lsr #2\n \tcmp\t\\dividend, \\divisor,  lsr #3\n+\tdo_it\ths, t\n \tsubhs\t\\dividend, \\dividend, \\divisor, lsr #3\n \torrhs\t\\result,   \\result,   \\curbit,  lsr #3\n \tcmp\t\\dividend, #0\t\t\t@ Early termination?\n+\tdo_it\ths, t\n \tmovnes\t\\curbit,   \\curbit,  lsr #4\t@ No, any more bits to do?\n \tmovne\t\\divisor,  \\divisor, lsr #4\n \tbne\t1b\n@@ -808,11 +835,11 @@ LSYM(Lgot_result):\n /* ------------------------------------------------------------------------ */\n #ifdef L_udivsi3\n \n+#if defined(__ARM_ARCH_6M__)\n+\n \tFUNC_START udivsi3\n \tFUNC_ALIAS aeabi_uidiv udivsi3\n \n-#ifdef __thumb__\n-\n \tcmp\tdivisor, #0\n \tbeq\tLSYM(Ldiv0)\n \tmov\tcurbit, #1\n@@ -828,9 +855,13 @@ LSYM(Lgot_result):\n \tpop\t{ work }\n \tRET\n \n-#else /* ARM version.  */\n+#else /* ARM version/Thumb-2.  */\n+\n+\tARM_FUNC_START udivsi3\n+\tARM_FUNC_ALIAS aeabi_uidiv udivsi3\n \n \tsubs\tr2, r1, #1\n+\tdo_it\teq\n \tRETc(eq)\n \tbcc\tLSYM(Ldiv0)\n \tcmp\tr0, r1\n@@ -843,7 +874,8 @@ LSYM(Lgot_result):\n \tmov\tr0, r2\n \tRET\t\n \n-11:\tmoveq\tr0, #1\n+11:\tdo_it\teq, e\n+\tmoveq\tr0, #1\n \tmovne\tr0, #0\n \tRET\n \n@@ -856,15 +888,16 @@ LSYM(Lgot_result):\n \n \tDIV_FUNC_END udivsi3\n \n+#if defined(__ARM_ARCH_6M__)\n FUNC_START aeabi_uidivmod\n-#ifdef __thumb__\n \tpush\t{r0, r1, lr}\n \tbl\tSYM(__udivsi3)\n \tPOP\t{r1, r2, r3}\n \tmul\tr2, r0\n \tsub\tr1, r1, r2\n \tbx\tr3\n #else\n+ARM_FUNC_START aeabi_uidivmod\n \tstmfd\tsp!, { r0, r1, lr }\n \tbl\tSYM(__udivsi3)\n \tldmfd\tsp!, { r1, r2, lr }\n@@ -919,10 +952,11 @@ LSYM(Lover10):\n /* ------------------------------------------------------------------------ */\n #ifdef L_divsi3\n \n+#if defined(__ARM_ARCH_6M__)\n+\n \tFUNC_START divsi3\t\n \tFUNC_ALIAS aeabi_idiv divsi3\n \n-#ifdef __thumb__\n \tcmp\tdivisor, #0\n \tbeq\tLSYM(Ldiv0)\n \t\n@@ -954,15 +988,20 @@ LSYM(Lover12):\n \tpop\t{ work }\n \tRET\n \n-#else /* ARM version.  */\n+#else /* ARM/Thumb-2 version.  */\n \t\n+\tARM_FUNC_START divsi3\t\n+\tARM_FUNC_ALIAS aeabi_idiv divsi3\n+\n \tcmp\tr1, #0\n \teor\tip, r0, r1\t\t\t@ save the sign of the result.\n \tbeq\tLSYM(Ldiv0)\n+\tdo_it\tmi\n \trsbmi\tr1, r1, #0\t\t\t@ loops below use unsigned.\n \tsubs\tr2, r1, #1\t\t\t@ division by 1 or -1 ?\n \tbeq\t10f\n \tmovs\tr3, r0\n+\tdo_it\tmi\n \trsbmi\tr3, r0, #0\t\t\t@ positive dividend value\n \tcmp\tr3, r1\n \tbls\t11f\n@@ -972,14 +1011,18 @@ LSYM(Lover12):\n \tARM_DIV_BODY r3, r1, r0, r2\n \t\n \tcmp\tip, #0\n+\tdo_it\tmi\n \trsbmi\tr0, r0, #0\n \tRET\t\n \n 10:\tteq\tip, r0\t\t\t\t@ same sign ?\n+\tdo_it\tmi\n \trsbmi\tr0, r0, #0\n \tRET\t\n \n-11:\tmovlo\tr0, #0\n+11:\tdo_it\tlo\n+\tmovlo\tr0, #0\n+\tdo_it\teq,t\n \tmoveq\tr0, ip, asr #31\n \torreq\tr0, r0, #1\n \tRET\n@@ -988,22 +1031,24 @@ LSYM(Lover12):\n \n \tcmp\tip, #0\n \tmov\tr0, r3, lsr r2\n+\tdo_it\tmi\n \trsbmi\tr0, r0, #0\n \tRET\n \n #endif /* ARM version */\n \t\n \tDIV_FUNC_END divsi3\n \n+#if defined(__ARM_ARCH_6M__)\n FUNC_START aeabi_idivmod\n-#ifdef __thumb__\n \tpush\t{r0, r1, lr}\n \tbl\tSYM(__divsi3)\n \tPOP\t{r1, r2, r3}\n \tmul\tr2, r0\n \tsub\tr1, r1, r2\n \tbx\tr3\n #else\n+ARM_FUNC_START aeabi_idivmod\n \tstmfd\tsp!, { r0, r1, lr }\n \tbl\tSYM(__divsi3)\n \tldmfd\tsp!, { r1, r2, lr }"}]}