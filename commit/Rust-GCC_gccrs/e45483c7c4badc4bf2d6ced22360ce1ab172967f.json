{"sha": "e45483c7c4badc4bf2d6ced22360ce1ab172967f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ1NDgzYzdjNGJhZGM0YmYyZDZjZWQyMjM2MGNlMWFiMTcyOTY3Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-17T07:30:09Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-17T07:30:09Z"}, "message": "openmp: Implement OpenMP 5.1 scope construct\n\nThis patch implements the OpenMP 5.1 scope construct, which is similar\nto worksharing constructs in many regards, but isn't one of them.\nThe body of the construct is encountered by all threads though, it can\nbe nested in itself or intermixed with taskgroup and worksharing etc.\nconstructs can appear inside of it (but it can't be nested in\nworksharing etc. constructs).  The main purpose of the construct\nis to allow reductions (normal and task ones) without the need to\nclose the parallel and reopen another one.\n\nIf it doesn't have task reductions, it can be implemented without\nany new library support, with nowait it just does the privatizations\nat the start if any and reductions before the end of the body, with\nwithout nowait emits a normal GOMP_barrier{,_cancel} at the end too.\n\nFor task reductions, we need to ensure only one thread initializes\nthe task reduction library data structures and other threads copy from that,\nso a new GOMP_scope_start routine is added to the library for that.\nIt acts as if the start of the scope construct is a nowait worksharing\nconstruct (that is ok, it can't be nested in other worksharing\nconstructs and all threads need to encounter the start in the same\norder) which does the task reduction initialization, but as the body\ncan have other scope constructs and/or worksharing constructs, that is\nall where we use this dummy worksharing construct.  With task reductions,\nthe construct must not have nowait and ends with a GOMP_barrier{,_cancel},\nfollowed by task reductions followed by GOMP_workshare_task_reduction_unregister.\n\nOnly C/C++ FE support is done.\n\n2021-08-17  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/\n\t* tree.def (OMP_SCOPE): New tree code.\n\t* tree.h (OMP_SCOPE_BODY, OMP_SCOPE_CLAUSES): Define.\n\t* tree-nested.c (convert_nonlocal_reference_stmt,\n\tconvert_local_reference_stmt, convert_gimple_call): Handle\n\tGIMPLE_OMP_SCOPE.\n\t* tree-pretty-print.c (dump_generic_node): Handle OMP_SCOPE.\n\t* gimple.def (GIMPLE_OMP_SCOPE): New gimple code.\n\t* gimple.c (gimple_build_omp_scope): New function.\n\t(gimple_copy): Handle GIMPLE_OMP_SCOPE.\n\t* gimple.h (gimple_build_omp_scope): Declare.\n\t(gimple_has_substatements): Handle GIMPLE_OMP_SCOPE.\n\t(gimple_omp_scope_clauses, gimple_omp_scope_clauses_ptr,\n\tgimple_omp_scope_set_clauses): New inline functions.\n\t(CASE_GIMPLE_OMP): Add GIMPLE_OMP_SCOPE.\n\t* gimple-pretty-print.c (dump_gimple_omp_scope): New function.\n\t(pp_gimple_stmt_1): Handle GIMPLE_OMP_SCOPE.\n\t* gimple-walk.c (walk_gimple_stmt): Likewise.\n\t* gimple-low.c (lower_stmt): Likewise.\n\t* gimplify.c (is_gimple_stmt): Handle OMP_MASTER.\n\t(gimplify_scan_omp_clauses): For task reductions, handle OMP_SCOPE\n\tlike ORT_WORKSHARE constructs.  Adjust diagnostics for %<scope%>\n\tallowing task reductions.  Reject inscan reductions on scope.\n\t(omp_find_stores_stmt): Handle GIMPLE_OMP_SCOPE.\n\t(gimplify_omp_workshare, gimplify_expr): Handle OMP_SCOPE.\n\t* tree-inline.c (remap_gimple_stmt): Handle GIMPLE_OMP_SCOPE.\n\t(estimate_num_insns): Likewise.\n\t* omp-low.c (build_outer_var_ref): Look through GIMPLE_OMP_SCOPE\n\tcontexts if var isn't privatized there.\n\t(check_omp_nesting_restrictions): Handle GIMPLE_OMP_SCOPE.\n\t(scan_omp_1_stmt): Likewise.\n\t(maybe_add_implicit_barrier_cancel): Look through outer\n\tscope constructs.\n\t(lower_omp_scope): New function.\n\t(lower_omp_task_reductions): Handle OMP_SCOPE.\n\t(lower_omp_1): Handle GIMPLE_OMP_SCOPE.\n\t(diagnose_sb_1, diagnose_sb_2): Likewise.\n\t* omp-expand.c (expand_omp_single): Support also GIMPLE_OMP_SCOPE.\n\t(expand_omp): Handle GIMPLE_OMP_SCOPE.\n\t(omp_make_gimple_edges): Likewise.\n\t* omp-builtins.def (BUILT_IN_GOMP_SCOPE_START): New built-in.\ngcc/c-family/\n\t* c-pragma.h (enum pragma_kind): Add PRAGMA_OMP_SCOPE.\n\t* c-pragma.c (omp_pragmas): Add scope construct.\n\t* c-omp.c (omp_directives): Uncomment scope directive entry.\ngcc/c/\n\t* c-parser.c (OMP_SCOPE_CLAUSE_MASK): Define.\n\t(c_parser_omp_scope): New function.\n\t(c_parser_omp_construct): Handle PRAGMA_OMP_SCOPE.\ngcc/cp/\n\t* parser.c (OMP_SCOPE_CLAUSE_MASK): Define.\n\t(cp_parser_omp_scope): New function.\n\t(cp_parser_omp_construct, cp_parser_pragma): Handle PRAGMA_OMP_SCOPE.\n\t* pt.c (tsubst_expr): Handle OMP_SCOPE.\ngcc/testsuite/\n\t* c-c++-common/gomp/nesting-2.c (foo): Add scope and masked\n\tconstruct tests.\n\t* c-c++-common/gomp/scan-1.c (f3): Add scope construct test..\n\t* c-c++-common/gomp/cancel-1.c (f2): Add scope and masked\n\tconstruct tests.\n\t* c-c++-common/gomp/reduction-task-2.c (bar): Add scope construct\n\ttest.  Adjust diagnostics for the addition of scope.\n\t* c-c++-common/gomp/loop-1.c (f5): Add master, masked and scope\n\tconstruct tests.\n\t* c-c++-common/gomp/clause-dups-1.c (f1): Add scope construct test.\n\t* gcc.dg/gomp/nesting-1.c (f1, f2, f3): Add scope construct tests.\n\t* c-c++-common/gomp/scope-1.c: New test.\n\t* c-c++-common/gomp/scope-2.c: New test.\n\t* g++.dg/gomp/attrs-1.C (bar): Add scope construct tests.\n\t* g++.dg/gomp/attrs-2.C (bar): Likewise.\n\t* gfortran.dg/gomp/reduction4.f90: Adjust expected diagnostics.\n\t* gfortran.dg/gomp/reduction7.f90: Likewise.\nlibgomp/\n\t* Makefile.am (libgomp_la_SOURCES): Add scope.c\n\t* Makefile.in: Regenerated.\n\t* libgomp_g.h (GOMP_scope_start): Declare.\n\t* libgomp.map: Add GOMP_scope_start@@GOMP_5.1.\n\t* scope.c: New file.\n\t* testsuite/libgomp.c-c++-common/scope-1.c: New test.\n\t* testsuite/libgomp.c-c++-common/task-reduction-16.c: New test.", "tree": {"sha": "fabc4aa4e0eba482e7502c955508805984c4eb59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fabc4aa4e0eba482e7502c955508805984c4eb59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e45483c7c4badc4bf2d6ced22360ce1ab172967f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e45483c7c4badc4bf2d6ced22360ce1ab172967f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e45483c7c4badc4bf2d6ced22360ce1ab172967f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e45483c7c4badc4bf2d6ced22360ce1ab172967f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d56599979211266b2f7b7535311205dd758353ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d56599979211266b2f7b7535311205dd758353ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d56599979211266b2f7b7535311205dd758353ac"}], "stats": {"total": 867, "additions": 823, "deletions": 44}, "files": [{"sha": "de49d2668314edcfbcd9cb35e5d385de7724149f", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -3018,8 +3018,8 @@ static const struct c_omp_directive omp_directives[] = {\n     C_OMP_DIR_INFORMATIONAL, false },\n   { \"scan\", nullptr, nullptr, PRAGMA_OMP_SCAN,\n     C_OMP_DIR_CONSTRUCT, true },\n-  /* { \"scope\", nullptr, nullptr, PRAGMA_OMP_SCOPE,\n-    C_OMP_DIR_CONSTRUCT, false },  */\n+  { \"scope\", nullptr, nullptr, PRAGMA_OMP_SCOPE,\n+    C_OMP_DIR_CONSTRUCT, false },\n   { \"section\", nullptr, nullptr, PRAGMA_OMP_SECTION,\n     C_OMP_DIR_CONSTRUCT, false },\n   { \"sections\", nullptr, nullptr, PRAGMA_OMP_SECTIONS,"}, {"sha": "5f0096ffc70cf1f18e1f93153ebd3c232fd85e48", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -1329,6 +1329,7 @@ static const struct omp_pragma_def omp_pragmas[] = {\n   { \"end\", PRAGMA_OMP_END_DECLARE_TARGET },\n   { \"flush\", PRAGMA_OMP_FLUSH },\n   { \"requires\", PRAGMA_OMP_REQUIRES },\n+  { \"scope\", PRAGMA_OMP_SCOPE },\n   { \"section\", PRAGMA_OMP_SECTION },\n   { \"sections\", PRAGMA_OMP_SECTIONS },\n   { \"single\", PRAGMA_OMP_SINGLE },"}, {"sha": "2b9e5eac675a5af98f76f3dd996c5775a2e5ef94", "filename": "gcc/c-family/c-pragma.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fc-family%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fc-family%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.h?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -63,6 +63,7 @@ enum pragma_kind {\n   PRAGMA_OMP_PARALLEL,\n   PRAGMA_OMP_REQUIRES,\n   PRAGMA_OMP_SCAN,\n+  PRAGMA_OMP_SCOPE,\n   PRAGMA_OMP_SECTION,\n   PRAGMA_OMP_SECTIONS,\n   PRAGMA_OMP_SIMD,"}, {"sha": "33aeb098844a830086bc45ed9b957d96013e93ac", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -19488,6 +19488,33 @@ c_parser_omp_single (location_t loc, c_parser *parser, bool *if_p)\n   return add_stmt (stmt);\n }\n \n+/* OpenMP 5.1:\n+   # pragma omp scope scope-clause[optseq] new-line\n+     structured-block\n+\n+   LOC is the location of the #pragma.\n+*/\n+\n+#define OMP_SCOPE_CLAUSE_MASK\t\t\t\t\t\\\n+\t( (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_PRIVATE)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_REDUCTION)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NOWAIT))\n+\n+static tree\n+c_parser_omp_scope (location_t loc, c_parser *parser, bool *if_p)\n+{\n+  tree stmt = make_node (OMP_SCOPE);\n+  SET_EXPR_LOCATION (stmt, loc);\n+  TREE_TYPE (stmt) = void_type_node;\n+\n+  OMP_SCOPE_CLAUSES (stmt)\n+    = c_parser_omp_all_clauses (parser, OMP_SCOPE_CLAUSE_MASK,\n+\t\t\t\t\"#pragma omp scope\");\n+  OMP_SCOPE_BODY (stmt) = c_parser_omp_structured_block (parser, if_p);\n+\n+  return add_stmt (stmt);\n+}\n+\n /* OpenMP 3.0:\n    # pragma omp task task-clause[optseq] new-line\n \n@@ -21958,6 +21985,9 @@ c_parser_omp_construct (c_parser *parser, bool *if_p)\n       strcpy (p_name, \"#pragma omp\");\n       stmt = c_parser_omp_parallel (loc, parser, p_name, mask, NULL, if_p);\n       break;\n+    case PRAGMA_OMP_SCOPE:\n+      stmt = c_parser_omp_scope (loc, parser, if_p);\n+      break;\n     case PRAGMA_OMP_SECTIONS:\n       strcpy (p_name, \"#pragma omp\");\n       stmt = c_parser_omp_sections (loc, parser, p_name, mask, NULL);"}, {"sha": "c31965a6d49ff9e295436567b81b47058210b588", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -42492,6 +42492,30 @@ cp_parser_omp_single (cp_parser *parser, cp_token *pragma_tok, bool *if_p)\n   return add_stmt (stmt);\n }\n \n+/* OpenMP 5.1:\n+   # pragma omp scope scope-clause[optseq] new-line\n+     structured-block  */\n+\n+#define OMP_SCOPE_CLAUSE_MASK\t\t\t\t\t\\\n+\t( (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_PRIVATE)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_REDUCTION)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NOWAIT))\n+\n+static tree\n+cp_parser_omp_scope (cp_parser *parser, cp_token *pragma_tok, bool *if_p)\n+{\n+  tree stmt = make_node (OMP_SCOPE);\n+  TREE_TYPE (stmt) = void_type_node;\n+  SET_EXPR_LOCATION (stmt, pragma_tok->location);\n+\n+  OMP_SCOPE_CLAUSES (stmt)\n+    = cp_parser_omp_all_clauses (parser, OMP_SCOPE_CLAUSE_MASK,\n+\t\t\t\t \"#pragma omp scope\", pragma_tok);\n+  OMP_SCOPE_BODY (stmt) = cp_parser_omp_structured_block (parser, if_p);\n+\n+  return add_stmt (stmt);\n+}\n+\n /* OpenMP 3.0:\n    # pragma omp task task-clause[optseq] new-line\n      structured-block  */\n@@ -45971,6 +45995,9 @@ cp_parser_omp_construct (cp_parser *parser, cp_token *pragma_tok, bool *if_p)\n       stmt = cp_parser_omp_parallel (parser, pragma_tok, p_name, mask, NULL,\n \t\t\t\t     if_p);\n       break;\n+    case PRAGMA_OMP_SCOPE:\n+      stmt = cp_parser_omp_scope (parser, pragma_tok, if_p);\n+      break;\n     case PRAGMA_OMP_SECTIONS:\n       strcpy (p_name, \"#pragma omp\");\n       stmt = cp_parser_omp_sections (parser, pragma_tok, p_name, mask, NULL);\n@@ -46604,6 +46631,7 @@ cp_parser_pragma (cp_parser *parser, enum pragma_context context, bool *if_p)\n     case PRAGMA_OMP_MASKED:\n     case PRAGMA_OMP_MASTER:\n     case PRAGMA_OMP_PARALLEL:\n+    case PRAGMA_OMP_SCOPE:\n     case PRAGMA_OMP_SECTIONS:\n     case PRAGMA_OMP_SIMD:\n     case PRAGMA_OMP_SINGLE:"}, {"sha": "484723b00db196eca60f6dd0690a8db01974c77a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -18791,6 +18791,7 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n       omp_parallel_combined_clauses = NULL;\n       /* FALLTHRU */\n     case OMP_SINGLE:\n+    case OMP_SCOPE:\n     case OMP_TEAMS:\n     case OMP_CRITICAL:\n     case OMP_TASKGROUP:"}, {"sha": "7e39c22df4411db5cb2dfb9d54b8f57f9960b595", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -329,6 +329,7 @@ lower_stmt (gimple_stmt_iterator *gsi, struct lower_data *data)\n     case GIMPLE_LABEL:\n     case GIMPLE_EH_MUST_NOT_THROW:\n     case GIMPLE_OMP_FOR:\n+    case GIMPLE_OMP_SCOPE:\n     case GIMPLE_OMP_SECTIONS:\n     case GIMPLE_OMP_SECTIONS_SWITCH:\n     case GIMPLE_OMP_SECTION:"}, {"sha": "53e77595fa986c6bd26890bda3e5af0ed1f531cf", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -1687,6 +1687,35 @@ dump_gimple_omp_masked (pretty_printer *buffer, const gimple *gs,\n     }\n }\n \n+/* Dump a GIMPLE_OMP_SCOPE tuple on the pretty_printer BUFFER.  */\n+\n+static void\n+dump_gimple_omp_scope (pretty_printer *buffer, const gimple *gs,\n+\t\t       int spc, dump_flags_t flags)\n+{\n+  if (flags & TDF_RAW)\n+    {\n+      dump_gimple_fmt (buffer, spc, flags, \"%G <%+BODY <%S>%nCLAUSES <\", gs,\n+\t\t       gimple_omp_body (gs));\n+      dump_omp_clauses (buffer, gimple_omp_scope_clauses (gs), spc, flags);\n+      dump_gimple_fmt (buffer, spc, flags, \" >\");\n+    }\n+  else\n+    {\n+      pp_string (buffer, \"#pragma omp scope\");\n+      dump_omp_clauses (buffer, gimple_omp_scope_clauses (gs), spc, flags);\n+      if (!gimple_seq_empty_p (gimple_omp_body (gs)))\n+\t{\n+\t  newline_and_indent (buffer, spc + 2);\n+\t  pp_left_brace (buffer);\n+\t  pp_newline (buffer);\n+\t  dump_gimple_seq (buffer, gimple_omp_body (gs), spc + 4, flags);\n+\t  newline_and_indent (buffer, spc + 2);\n+\t  pp_right_brace (buffer);\n+\t}\n+    }\n+}\n+\n /* Dump a GIMPLE_OMP_TARGET tuple on the pretty_printer BUFFER.  */\n \n static void\n@@ -2755,6 +2784,10 @@ pp_gimple_stmt_1 (pretty_printer *buffer, const gimple *gs, int spc,\n       dump_gimple_omp_masked (buffer, gs, spc, flags);\n       break;\n \n+    case GIMPLE_OMP_SCOPE:\n+      dump_gimple_omp_scope (buffer, gs, spc, flags);\n+      break;\n+\n     case GIMPLE_OMP_MASTER:\n     case GIMPLE_OMP_SECTION:\n       dump_gimple_omp_block (buffer, gs, spc, flags);"}, {"sha": "e15fd4697ba1281fc424449af00d1a41923f5b14", "filename": "gcc/gimple-walk.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fgimple-walk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fgimple-walk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-walk.c?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -689,6 +689,7 @@ walk_gimple_stmt (gimple_stmt_iterator *gsi, walk_stmt_fn callback_stmt,\n     case GIMPLE_OMP_SECTION:\n     case GIMPLE_OMP_PARALLEL:\n     case GIMPLE_OMP_TASK:\n+    case GIMPLE_OMP_SCOPE:\n     case GIMPLE_OMP_SECTIONS:\n     case GIMPLE_OMP_SINGLE:\n     case GIMPLE_OMP_TARGET:"}, {"sha": "4e2653cab2f13259037bb8e6a938fd7b1002d5ed", "filename": "gcc/gimple.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -1185,6 +1185,24 @@ gimple_build_omp_single (gimple_seq body, tree clauses)\n }\n \n \n+/* Build a GIMPLE_OMP_SCOPE statement.\n+\n+   BODY is the sequence of statements that will be executed once.\n+   CLAUSES are any of the OMP scope construct's clauses: private, reduction,\n+   nowait.  */\n+\n+gimple *\n+gimple_build_omp_scope (gimple_seq body, tree clauses)\n+{\n+  gimple *p = gimple_alloc (GIMPLE_OMP_SCOPE, 0);\n+  gimple_omp_scope_set_clauses (p, clauses);\n+  if (body)\n+    gimple_omp_set_body (p, body);\n+\n+  return p;\n+}\n+\n+\n /* Build a GIMPLE_OMP_TARGET statement.\n \n    BODY is the sequence of statements that will be executed.\n@@ -2020,6 +2038,11 @@ gimple_copy (gimple *stmt)\n \t  }\n \t  goto copy_omp_body;\n \n+\tcase GIMPLE_OMP_SCOPE:\n+\t  t = unshare_expr (gimple_omp_scope_clauses (stmt));\n+\t  gimple_omp_scope_set_clauses (copy, t);\n+\t  goto copy_omp_body;\n+\n \tcase GIMPLE_OMP_TARGET:\n \t  {\n \t    gomp_target *omp_target_stmt = as_a <gomp_target *> (stmt);"}, {"sha": "193b2506523dff716cfca5e297064e3e5d729b53", "filename": "gcc/gimple.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fgimple.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fgimple.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.def?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -340,6 +340,11 @@ DEFGSCODE(GIMPLE_OMP_RETURN, \"gimple_omp_return\", GSS_OMP_ATOMIC_STORE_LAYOUT)\n    CLAUSES is an OMP_CLAUSE chain holding the associated clauses.  */\n DEFGSCODE(GIMPLE_OMP_SCAN, \"gimple_omp_scan\", GSS_OMP_SINGLE_LAYOUT)\n \n+/* GIMPLE_OMP_SCOPE <BODY, CLAUSES> represents #pragma omp scope\n+   BODY is the sequence of statements inside the single section.\n+   CLAUSES is an OMP_CLAUSE chain holding the associated clauses.  */\n+DEFGSCODE(GIMPLE_OMP_SCOPE, \"gimple_omp_scope\", GSS_OMP_SINGLE_LAYOUT)\n+\n /* OMP_SECTION <BODY> represents #pragma omp section.\n    BODY is the sequence of statements in the section body.  */\n DEFGSCODE(GIMPLE_OMP_SECTION, \"gimple_omp_section\", GSS_OMP)"}, {"sha": "479a1c70b1f1bb437b13c442ad6d2b600abf6a5c", "filename": "gcc/gimple.h", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -742,7 +742,7 @@ struct GTY((tag(\"GSS_OMP_CONTINUE\")))\n };\n \n /* GIMPLE_OMP_SINGLE, GIMPLE_OMP_ORDERED, GIMPLE_OMP_TASKGROUP,\n-   GIMPLE_OMP_SCAN.  */\n+   GIMPLE_OMP_SCAN, GIMPLE_OMP_MASKED, GIMPLE_OMP_SCOPE.  */\n \n struct GTY((tag(\"GSS_OMP_SINGLE_LAYOUT\")))\n   gimple_statement_omp_single_layout : public gimple_statement_omp\n@@ -1559,6 +1559,7 @@ gomp_parallel *gimple_build_omp_parallel (gimple_seq, tree, tree, tree);\n gomp_task *gimple_build_omp_task (gimple_seq, tree, tree, tree, tree,\n \t\t\t\t       tree, tree);\n gimple *gimple_build_omp_section (gimple_seq);\n+gimple *gimple_build_omp_scope (gimple_seq, tree);\n gimple *gimple_build_omp_master (gimple_seq);\n gimple *gimple_build_omp_masked (gimple_seq, tree);\n gimple *gimple_build_omp_taskgroup (gimple_seq, tree);\n@@ -1843,6 +1844,7 @@ gimple_has_substatements (gimple *g)\n     case GIMPLE_OMP_SECTION:\n     case GIMPLE_OMP_PARALLEL:\n     case GIMPLE_OMP_TASK:\n+    case GIMPLE_OMP_SCOPE:\n     case GIMPLE_OMP_SECTIONS:\n     case GIMPLE_OMP_SINGLE:\n     case GIMPLE_OMP_TARGET:\n@@ -5207,7 +5209,7 @@ gimple_omp_taskgroup_set_clauses (gimple *gs, tree clauses)\n }\n \n \n-/* Return the clauses associated with OMP_MASTER statement GS.  */\n+/* Return the clauses associated with OMP_MASKED statement GS.  */\n \n static inline tree\n gimple_omp_masked_clauses (const gimple *gs)\n@@ -5241,6 +5243,40 @@ gimple_omp_masked_set_clauses (gimple *gs, tree clauses)\n }\n \n \n+/* Return the clauses associated with OMP_SCOPE statement GS.  */\n+\n+static inline tree\n+gimple_omp_scope_clauses (const gimple *gs)\n+{\n+  GIMPLE_CHECK (gs, GIMPLE_OMP_SCOPE);\n+  return\n+    static_cast <const gimple_statement_omp_single_layout *> (gs)->clauses;\n+}\n+\n+\n+/* Return a pointer to the clauses associated with OMP scope statement\n+   GS.  */\n+\n+static inline tree *\n+gimple_omp_scope_clauses_ptr (gimple *gs)\n+{\n+  GIMPLE_CHECK (gs, GIMPLE_OMP_SCOPE);\n+  return &static_cast <gimple_statement_omp_single_layout *> (gs)->clauses;\n+}\n+\n+\n+/* Set CLAUSES to be the clauses associated with OMP scope statement\n+   GS.  */\n+\n+static inline void\n+gimple_omp_scope_set_clauses (gimple *gs, tree clauses)\n+{\n+  GIMPLE_CHECK (gs, GIMPLE_OMP_SCOPE);\n+  static_cast <gimple_statement_omp_single_layout *> (gs)->clauses\n+    = clauses;\n+}\n+\n+\n /* Return the kind of the OMP_FOR statemement G.  */\n \n static inline int\n@@ -6527,6 +6563,7 @@ gimple_return_set_retval (greturn *gs, tree retval)\n     case GIMPLE_OMP_SINGLE:\t\t\t\\\n     case GIMPLE_OMP_TARGET:\t\t\t\\\n     case GIMPLE_OMP_TEAMS:\t\t\t\\\n+    case GIMPLE_OMP_SCOPE:\t\t\t\\\n     case GIMPLE_OMP_SECTION:\t\t\t\\\n     case GIMPLE_OMP_MASTER:\t\t\t\\\n     case GIMPLE_OMP_MASKED:\t\t\t\\"}, {"sha": "070d0e4df45a6f8ba12c5edbf7790443d10931cb", "filename": "gcc/gimplify.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -5628,6 +5628,7 @@ is_gimple_stmt (tree t)\n     case OMP_LOOP:\n     case OACC_LOOP:\n     case OMP_SCAN:\n+    case OMP_SCOPE:\n     case OMP_SECTIONS:\n     case OMP_SECTION:\n     case OMP_SINGLE:\n@@ -8866,7 +8867,7 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \tcase OMP_CLAUSE_REDUCTION:\n \t  if (OMP_CLAUSE_REDUCTION_TASK (c))\n \t    {\n-\t      if (region_type == ORT_WORKSHARE)\n+\t      if (region_type == ORT_WORKSHARE || code == OMP_SCOPE)\n \t\t{\n \t\t  if (nowait == -1)\n \t\t    nowait = omp_find_clause (*list_p,\n@@ -8885,8 +8886,8 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t\t{\n \t\t  error_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t    \"invalid %<task%> reduction modifier on construct \"\n-\t\t\t    \"other than %<parallel%>, %qs or %<sections%>\",\n-\t\t\t    lang_GNU_Fortran () ? \"do\" : \"for\");\n+\t\t\t    \"other than %<parallel%>, %qs, %<sections%> or \"\n+\t\t\t    \"%<scope%>\", lang_GNU_Fortran () ? \"do\" : \"for\");\n \t\t  OMP_CLAUSE_REDUCTION_TASK (c) = 0;\n \t\t}\n \t    }\n@@ -8917,6 +8918,12 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t\t\t  \"%qs construct\", \"taskloop\");\n \t\tOMP_CLAUSE_REDUCTION_INSCAN (c) = 0;\n \t\tbreak;\n+\t      case OMP_SCOPE:\n+\t\terror_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t  \"%<inscan%> %<reduction%> clause on \"\n+\t\t\t  \"%qs construct\", \"scope\");\n+\t\tOMP_CLAUSE_REDUCTION_INSCAN (c) = 0;\n+\t\tbreak;\n \t      default:\n \t\tbreak;\n \t      }\n@@ -10453,6 +10460,7 @@ omp_find_stores_stmt (gimple_stmt_iterator *gsi_p,\n     case GIMPLE_OMP_TASK:\n     case GIMPLE_OMP_SECTIONS:\n     case GIMPLE_OMP_SINGLE:\n+    case GIMPLE_OMP_SCOPE:\n     case GIMPLE_OMP_TARGET:\n     case GIMPLE_OMP_TEAMS:\n     case GIMPLE_OMP_CRITICAL:\n@@ -13375,6 +13383,9 @@ gimplify_omp_workshare (tree *expr_p, gimple_seq *pre_p)\n     case OMP_SINGLE:\n       ort = ORT_WORKSHARE;\n       break;\n+    case OMP_SCOPE:\n+      ort = ORT_TASKGROUP;\n+      break;\n     case OMP_TARGET:\n       ort = OMP_TARGET_COMBINED (expr) ? ORT_COMBINED_TARGET : ORT_TARGET;\n       break;\n@@ -13487,6 +13498,9 @@ gimplify_omp_workshare (tree *expr_p, gimple_seq *pre_p)\n     case OMP_SINGLE:\n       stmt = gimple_build_omp_single (body, OMP_CLAUSES (expr));\n       break;\n+    case OMP_SCOPE:\n+      stmt = gimple_build_omp_scope (body, OMP_CLAUSES (expr));\n+      break;\n     case OMP_TARGET:\n       stmt = gimple_build_omp_target (body, GF_OMP_TARGET_KIND_REGION,\n \t\t\t\t      OMP_CLAUSES (expr));\n@@ -14759,6 +14773,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \tcase OACC_KERNELS:\n \tcase OACC_PARALLEL:\n \tcase OACC_SERIAL:\n+\tcase OMP_SCOPE:\n \tcase OMP_SECTIONS:\n \tcase OMP_SINGLE:\n \tcase OMP_TARGET:\n@@ -15192,7 +15207,8 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t\t  && code != OMP_SCAN\n \t\t  && code != OMP_SECTIONS\n \t\t  && code != OMP_SECTION\n-\t\t  && code != OMP_SINGLE);\n+\t\t  && code != OMP_SINGLE\n+\t\t  && code != OMP_SCOPE);\n     }\n #endif\n "}, {"sha": "b168575c91732851a2f689c67c63486cfb0f7bd8", "filename": "gcc/omp-builtins.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fomp-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fomp-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-builtins.def?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -422,6 +422,8 @@ DEF_GOMP_BUILTIN (BUILT_IN_GOMP_SINGLE_COPY_START, \"GOMP_single_copy_start\",\n \t\t  BT_FN_PTR, ATTR_NOTHROW_LEAF_LIST)\n DEF_GOMP_BUILTIN (BUILT_IN_GOMP_SINGLE_COPY_END, \"GOMP_single_copy_end\",\n \t\t  BT_FN_VOID_PTR, ATTR_NOTHROW_LEAF_LIST)\n+DEF_GOMP_BUILTIN (BUILT_IN_GOMP_SCOPE_START, \"GOMP_scope_start\",\n+\t\t  BT_FN_VOID_PTR, ATTR_NOTHROW_LEAF_LIST)\n DEF_GOMP_BUILTIN (BUILT_IN_GOMP_OFFLOAD_REGISTER, \"GOMP_offload_register_ver\",\n \t\t  BT_FN_VOID_UINT_PTR_INT_PTR, ATTR_NOTHROW_LIST)\n DEF_GOMP_BUILTIN (BUILT_IN_GOMP_OFFLOAD_UNREGISTER,"}, {"sha": "c868b8c3d3c1b51c7dba10a243a0ff7ffcddff37", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -8417,7 +8417,7 @@ expand_omp_sections (struct omp_region *region)\n   set_immediate_dominator (CDI_DOMINATORS, default_bb, l0_bb);\n }\n \n-/* Expand code for an OpenMP single directive.  We've already expanded\n+/* Expand code for an OpenMP single or scope directive.  We've already expanded\n    much of the code, here we simply place the GOMP_barrier call.  */\n \n static void\n@@ -8430,7 +8430,8 @@ expand_omp_single (struct omp_region *region)\n   exit_bb = region->exit;\n \n   si = gsi_last_nondebug_bb (entry_bb);\n-  gcc_assert (gimple_code (gsi_stmt (si)) == GIMPLE_OMP_SINGLE);\n+  gcc_assert (gimple_code (gsi_stmt (si)) == GIMPLE_OMP_SINGLE\n+\t      || gimple_code (gsi_stmt (si)) == GIMPLE_OMP_SCOPE);\n   gsi_remove (&si, true);\n   single_succ_edge (entry_bb)->flags = EDGE_FALLTHRU;\n \n@@ -9928,6 +9929,7 @@ expand_omp (struct omp_region *region)\n \t  break;\n \n \tcase GIMPLE_OMP_SINGLE:\n+\tcase GIMPLE_OMP_SCOPE:\n \t  expand_omp_single (region);\n \t  break;\n \n@@ -10269,6 +10271,7 @@ omp_make_gimple_edges (basic_block bb, struct omp_region **region,\n     case GIMPLE_OMP_TEAMS:\n     case GIMPLE_OMP_MASTER:\n     case GIMPLE_OMP_MASKED:\n+    case GIMPLE_OMP_SCOPE:\n     case GIMPLE_OMP_TASKGROUP:\n     case GIMPLE_OMP_CRITICAL:\n     case GIMPLE_OMP_SECTION:"}, {"sha": "a0b41afa3ebff5e04b0d515b4241a2ab5e67a4d9", "filename": "gcc/omp-low.c", "status": "modified", "additions": 168, "deletions": 13, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -663,8 +663,15 @@ build_outer_var_ref (tree var, omp_context *ctx,\n {\n   tree x;\n   omp_context *outer = ctx->outer;\n-  while (outer && gimple_code (outer->stmt) == GIMPLE_OMP_TASKGROUP)\n-    outer = outer->outer;\n+  for (; outer; outer = outer->outer)\n+    {\n+      if (gimple_code (outer->stmt) == GIMPLE_OMP_TASKGROUP)\n+\tcontinue;\n+      if (gimple_code (outer->stmt) == GIMPLE_OMP_SCOPE\n+\t  && !maybe_lookup_decl (var, outer))\n+\tcontinue;\n+      break;\n+    }\n \n   if (is_global_var (maybe_lookup_decl_in_outer_ctx (var, ctx)))\n     x = var;\n@@ -3493,6 +3500,40 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n \t    break;\n \t  }\n       break;\n+    case GIMPLE_OMP_SCOPE:\n+      for (; ctx != NULL; ctx = ctx->outer)\n+\tswitch (gimple_code (ctx->stmt))\n+\t  {\n+\t  case GIMPLE_OMP_FOR:\n+\t    if (gimple_omp_for_kind (ctx->stmt) != GF_OMP_FOR_KIND_FOR\n+\t\t&& gimple_omp_for_kind (ctx->stmt) != GF_OMP_FOR_KIND_TASKLOOP)\n+\t      break;\n+\t    /* FALLTHRU */\n+\t  case GIMPLE_OMP_SECTIONS:\n+\t  case GIMPLE_OMP_SINGLE:\n+\t  case GIMPLE_OMP_TASK:\n+\t  case GIMPLE_OMP_CRITICAL:\n+\t  case GIMPLE_OMP_ORDERED:\n+\t  case GIMPLE_OMP_MASTER:\n+\t  case GIMPLE_OMP_MASKED:\n+\t    error_at (gimple_location (stmt),\n+\t\t      \"%<scope%> region may not be closely nested inside \"\n+\t\t      \"of work-sharing, %<loop%>, explicit %<task%>, \"\n+\t\t      \"%<taskloop%>, %<critical%>, %<ordered%>, %<master%>, \"\n+\t\t      \"or %<masked%> region\");\n+\t    return false;\n+\t  case GIMPLE_OMP_PARALLEL:\n+\t  case GIMPLE_OMP_TEAMS:\n+\t    return true;\n+\t  case GIMPLE_OMP_TARGET:\n+\t    if (gimple_omp_target_kind (ctx->stmt)\n+\t\t== GF_OMP_TARGET_KIND_REGION)\n+\t      return true;\n+\t    break;\n+\t  default:\n+\t    break;\n+\t  }\n+      break;\n     case GIMPLE_OMP_TASK:\n       for (c = gimple_omp_task_clauses (stmt); c; c = OMP_CLAUSE_CHAIN (c))\n \tif (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_DEPEND\n@@ -4071,6 +4112,12 @@ scan_omp_1_stmt (gimple_stmt_iterator *gsi, bool *handled_ops_p,\n \tscan_omp_for (as_a <gomp_for *> (stmt), ctx);\n       break;\n \n+    case GIMPLE_OMP_SCOPE:\n+      ctx = new_omp_context (stmt, ctx);\n+      scan_sharing_clauses (gimple_omp_scope_clauses (stmt), ctx);\n+      scan_omp (gimple_omp_body_ptr (stmt), ctx);\n+      break;\n+\n     case GIMPLE_OMP_SECTIONS:\n       scan_omp_sections (as_a <gomp_sections *> (stmt), ctx);\n       break;\n@@ -8359,7 +8406,8 @@ maybe_add_implicit_barrier_cancel (omp_context *ctx, gimple *omp_return,\n \tgimple_seq_add_stmt (body, g);\n \tgimple_seq_add_stmt (body, gimple_build_label (fallthru_label));\n       }\n-    else if (gimple_code (outer->stmt) != GIMPLE_OMP_TASKGROUP)\n+    else if (gimple_code (outer->stmt) != GIMPLE_OMP_TASKGROUP\n+\t     && gimple_code (outer->stmt) != GIMPLE_OMP_SCOPE)\n       return;\n }\n \n@@ -8698,6 +8746,97 @@ lower_omp_single (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n }\n \n \n+/* Lower code for an OMP scope directive.  */\n+\n+static void\n+lower_omp_scope (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n+{\n+  tree block;\n+  gimple *scope_stmt = gsi_stmt (*gsi_p);\n+  gbind *bind;\n+  gimple_seq bind_body, bind_body_tail = NULL, dlist;\n+  gimple_seq tred_dlist = NULL;\n+\n+  push_gimplify_context ();\n+\n+  block = make_node (BLOCK);\n+  bind = gimple_build_bind (NULL, NULL, block);\n+  gsi_replace (gsi_p, bind, true);\n+  bind_body = NULL;\n+  dlist = NULL;\n+\n+  tree rclauses\n+    = omp_task_reductions_find_first (gimple_omp_scope_clauses (scope_stmt),\n+\t\t\t\t      OMP_SCOPE, OMP_CLAUSE_REDUCTION);\n+  if (rclauses)\n+    {\n+      tree type = build_pointer_type (pointer_sized_int_node);\n+      tree temp = create_tmp_var (type);\n+      tree c = build_omp_clause (UNKNOWN_LOCATION, OMP_CLAUSE__REDUCTEMP_);\n+      OMP_CLAUSE_DECL (c) = temp;\n+      OMP_CLAUSE_CHAIN (c) = gimple_omp_scope_clauses (scope_stmt);\n+      gimple_omp_scope_set_clauses (scope_stmt, c);\n+      lower_omp_task_reductions (ctx, OMP_SCOPE,\n+\t\t\t\t gimple_omp_scope_clauses (scope_stmt),\n+\t\t\t\t &bind_body, &tred_dlist);\n+      rclauses = c;\n+      tree fndecl = builtin_decl_explicit (BUILT_IN_GOMP_SCOPE_START);\n+      gimple *stmt = gimple_build_call (fndecl, 1, temp);\n+      gimple_seq_add_stmt (&bind_body, stmt);\n+    }\n+\n+  lower_rec_input_clauses (gimple_omp_scope_clauses (scope_stmt),\n+\t\t\t   &bind_body, &dlist, ctx, NULL);\n+  lower_omp (gimple_omp_body_ptr (scope_stmt), ctx);\n+\n+  gimple_seq_add_stmt (&bind_body, scope_stmt);\n+\n+  gimple_seq_add_seq (&bind_body, gimple_omp_body (scope_stmt));\n+\n+  gimple_omp_set_body (scope_stmt, NULL);\n+\n+  gimple_seq clist = NULL;\n+  lower_reduction_clauses (gimple_omp_scope_clauses (scope_stmt),\n+\t\t\t   &bind_body, &clist, ctx);\n+  if (clist)\n+    {\n+      tree fndecl = builtin_decl_explicit (BUILT_IN_GOMP_ATOMIC_START);\n+      gcall *g = gimple_build_call (fndecl, 0);\n+      gimple_seq_add_stmt (&bind_body, g);\n+      gimple_seq_add_seq (&bind_body, clist);\n+      fndecl = builtin_decl_explicit (BUILT_IN_GOMP_ATOMIC_END);\n+      g = gimple_build_call (fndecl, 0);\n+      gimple_seq_add_stmt (&bind_body, g);\n+    }\n+\n+  gimple_seq_add_seq (&bind_body, dlist);\n+\n+  bind_body = maybe_catch_exception (bind_body);\n+\n+  bool nowait = omp_find_clause (gimple_omp_scope_clauses (scope_stmt),\n+\t\t\t\t OMP_CLAUSE_NOWAIT) != NULL_TREE;\n+  gimple *g = gimple_build_omp_return (nowait);\n+  gimple_seq_add_stmt (&bind_body_tail, g);\n+  gimple_seq_add_seq (&bind_body_tail, tred_dlist);\n+  maybe_add_implicit_barrier_cancel (ctx, g, &bind_body_tail);\n+  if (ctx->record_type)\n+    {\n+      gimple_stmt_iterator gsi = gsi_start (bind_body_tail);\n+      tree clobber = build_clobber (ctx->record_type);\n+      gsi_insert_after (&gsi, gimple_build_assign (ctx->sender_decl,\n+\t\t\t\t\t\t   clobber), GSI_SAME_STMT);\n+    }\n+  gimple_seq_add_seq (&bind_body, bind_body_tail);\n+\n+  gimple_bind_set_body (bind, bind_body);\n+\n+  pop_gimplify_context (bind);\n+\n+  gimple_bind_append_vars (bind, ctx->block_vars);\n+  BLOCK_VARS (block) = ctx->block_vars;\n+  if (BLOCK_VARS (block))\n+    TREE_USED (block) = 1;\n+}\n /* Expand code for an OpenMP master or masked directive.  */\n \n static void\n@@ -8803,7 +8942,7 @@ lower_omp_task_reductions (omp_context *ctx, enum tree_code code, tree clauses,\n   clauses = omp_task_reductions_find_first (clauses, code, ccode);\n   if (clauses == NULL_TREE)\n     return;\n-  if (code == OMP_FOR || code == OMP_SECTIONS)\n+  if (code == OMP_FOR || code == OMP_SECTIONS || code == OMP_SCOPE)\n     {\n       for (omp_context *outer = ctx->outer; outer; outer = outer->outer)\n \tif (gimple_code (outer->stmt) == GIMPLE_OMP_PARALLEL\n@@ -8812,7 +8951,8 @@ lower_omp_task_reductions (omp_context *ctx, enum tree_code code, tree clauses,\n \t    cancellable = error_mark_node;\n \t    break;\n \t  }\n-\telse if (gimple_code (outer->stmt) != GIMPLE_OMP_TASKGROUP)\n+\telse if (gimple_code (outer->stmt) != GIMPLE_OMP_TASKGROUP\n+\t\t && gimple_code (outer->stmt) != GIMPLE_OMP_SCOPE)\n \t  break;\n     }\n   tree record_type = lang_hooks.types.make_type (RECORD_TYPE);\n@@ -8928,11 +9068,11 @@ lower_omp_task_reductions (omp_context *ctx, enum tree_code code, tree clauses,\n   tree lab2 = create_artificial_label (UNKNOWN_LOCATION);\n   tree lab3 = NULL_TREE, lab7 = NULL_TREE;\n   gimple *g;\n-  if (code == OMP_FOR || code == OMP_SECTIONS)\n+  if (code == OMP_FOR || code == OMP_SECTIONS || code == OMP_SCOPE)\n     {\n-      /* For worksharing constructs, only perform it in the master thread,\n-\t with the exception of cancelled implicit barriers - then only handle\n-\t the current thread.  */\n+      /* For worksharing constructs or scope, only perform it in the master\n+\t thread, with the exception of cancelled implicit barriers - then only\n+\t handle the current thread.  */\n       tree lab4 = create_artificial_label (UNKNOWN_LOCATION);\n       t = builtin_decl_explicit (BUILT_IN_OMP_GET_THREAD_NUM);\n       tree thr_num = create_tmp_var (integer_type_node);\n@@ -8947,8 +9087,10 @@ lower_omp_task_reductions (omp_context *ctx, enum tree_code code, tree clauses,\n \t  lab3 = create_artificial_label (UNKNOWN_LOCATION);\n \t  if (code == OMP_FOR)\n \t    c = gimple_omp_for_clauses (ctx->stmt);\n-\t  else /* if (code == OMP_SECTIONS) */\n+\t  else if (code == OMP_SECTIONS)\n \t    c = gimple_omp_sections_clauses (ctx->stmt);\n+\t  else /* if (code == OMP_SCOPE) */\n+\t    c = gimple_omp_scope_clauses (ctx->stmt);\n \t  c = OMP_CLAUSE_DECL (omp_find_clause (c, OMP_CLAUSE__REDUCTEMP_));\n \t  cancellable = c;\n \t  g = gimple_build_cond (NE_EXPR, c, build_zero_cst (TREE_TYPE (c)),\n@@ -9083,8 +9225,11 @@ lower_omp_task_reductions (omp_context *ctx, enum tree_code code, tree clauses,\n \n \t  tree bfield = DECL_CHAIN (field);\n \t  tree cond;\n-\t  if (code == OMP_PARALLEL || code == OMP_FOR || code == OMP_SECTIONS)\n-\t    /* In parallel or worksharing all threads unconditionally\n+\t  if (code == OMP_PARALLEL\n+\t      || code == OMP_FOR\n+\t      || code == OMP_SECTIONS\n+\t      || code == OMP_SCOPE)\n+\t    /* In parallel, worksharing or scope all threads unconditionally\n \t       initialize all their task reduction private variables.  */\n \t    cond = boolean_true_node;\n \t  else if (TREE_TYPE (ptr) == ptr_type_node)\n@@ -9325,6 +9470,8 @@ lower_omp_task_reductions (omp_context *ctx, enum tree_code code, tree clauses,\n \tc = gimple_omp_for_clauses (ctx->stmt);\n       else if (code == OMP_SECTIONS)\n \tc = gimple_omp_sections_clauses (ctx->stmt);\n+      else if (code == OMP_SCOPE)\n+\tc = gimple_omp_scope_clauses (ctx->stmt);\n       else\n \tc = gimple_omp_taskreg_clauses (ctx->stmt);\n       c = omp_find_clause (c, OMP_CLAUSE__REDUCTEMP_);\n@@ -9339,7 +9486,7 @@ lower_omp_task_reductions (omp_context *ctx, enum tree_code code, tree clauses,\n   g = gimple_build_cond (NE_EXPR, idx, num_thr_sz, lab1, lab2);\n   gimple_seq_add_stmt (end, g);\n   gimple_seq_add_stmt (end, gimple_build_label (lab2));\n-  if (code == OMP_FOR || code == OMP_SECTIONS)\n+  if (code == OMP_FOR || code == OMP_SECTIONS || code == OMP_SCOPE)\n     {\n       enum built_in_function bfn\n \t= BUILT_IN_GOMP_WORKSHARE_TASK_REDUCTION_UNREGISTER;\n@@ -13897,6 +14044,11 @@ lower_omp_1 (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \tctx->cancel_label = create_artificial_label (UNKNOWN_LOCATION);\n       lower_omp_sections (gsi_p, ctx);\n       break;\n+    case GIMPLE_OMP_SCOPE:\n+      ctx = maybe_lookup_ctx (stmt);\n+      gcc_assert (ctx);\n+      lower_omp_scope (gsi_p, ctx);\n+      break;\n     case GIMPLE_OMP_SINGLE:\n       ctx = maybe_lookup_ctx (stmt);\n       gcc_assert (ctx);\n@@ -14008,6 +14160,7 @@ lower_omp_1 (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t  if (gimple_code (up->stmt) == GIMPLE_OMP_ORDERED\n \t      || gimple_code (up->stmt) == GIMPLE_OMP_CRITICAL\n \t      || gimple_code (up->stmt) == GIMPLE_OMP_TASKGROUP\n+\t      || gimple_code (up->stmt) == GIMPLE_OMP_SCOPE\n \t      || gimple_code (up->stmt) == GIMPLE_OMP_SECTION\n \t      || gimple_code (up->stmt) == GIMPLE_OMP_SCAN\n \t      || (gimple_code (up->stmt) == GIMPLE_OMP_TARGET\n@@ -14277,6 +14430,7 @@ diagnose_sb_1 (gimple_stmt_iterator *gsi_p, bool *handled_ops_p,\n \n     case GIMPLE_OMP_PARALLEL:\n     case GIMPLE_OMP_TASK:\n+    case GIMPLE_OMP_SCOPE:\n     case GIMPLE_OMP_SECTIONS:\n     case GIMPLE_OMP_SINGLE:\n     case GIMPLE_OMP_SECTION:\n@@ -14339,6 +14493,7 @@ diagnose_sb_2 (gimple_stmt_iterator *gsi_p, bool *handled_ops_p,\n \n     case GIMPLE_OMP_PARALLEL:\n     case GIMPLE_OMP_TASK:\n+    case GIMPLE_OMP_SCOPE:\n     case GIMPLE_OMP_SECTIONS:\n     case GIMPLE_OMP_SINGLE:\n     case GIMPLE_OMP_SECTION:"}, {"sha": "5d68cd3ed6d23f6ca4a5649607f9090c97ac887c", "filename": "gcc/testsuite/c-c++-common/gomp/cancel-1.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fcancel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fcancel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fcancel-1.c?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -39,6 +39,28 @@ f2 (void)\n       #pragma omp cancellation point sections\t/* { dg-error \"not closely nested inside\" } */\n       #pragma omp cancellation point taskgroup\t/* { dg-error \"not closely nested inside\" } */\n     }\n+    #pragma omp masked\n+    {\n+      #pragma omp cancel parallel\t\t/* { dg-error \"not closely nested inside\" } */\n+      #pragma omp cancel for\t\t\t/* { dg-error \"not closely nested inside\" } */\n+      #pragma omp cancel sections\t\t/* { dg-error \"not closely nested inside\" } */\n+      #pragma omp cancel taskgroup\t\t/* { dg-error \"not closely nested inside\" } */\n+      #pragma omp cancellation point parallel\t/* { dg-error \"not closely nested inside\" } */\n+      #pragma omp cancellation point for\t/* { dg-error \"not closely nested inside\" } */\n+      #pragma omp cancellation point sections\t/* { dg-error \"not closely nested inside\" } */\n+      #pragma omp cancellation point taskgroup\t/* { dg-error \"not closely nested inside\" } */\n+    }\n+    #pragma omp scope\n+    {\n+      #pragma omp cancel parallel\t\t/* { dg-error \"not closely nested inside\" } */\n+      #pragma omp cancel for\t\t\t/* { dg-error \"not closely nested inside\" } */\n+      #pragma omp cancel sections\t\t/* { dg-error \"not closely nested inside\" } */\n+      #pragma omp cancel taskgroup\t\t/* { dg-error \"not closely nested inside\" } */\n+      #pragma omp cancellation point parallel\t/* { dg-error \"not closely nested inside\" } */\n+      #pragma omp cancellation point for\t/* { dg-error \"not closely nested inside\" } */\n+      #pragma omp cancellation point sections\t/* { dg-error \"not closely nested inside\" } */\n+      #pragma omp cancellation point taskgroup\t/* { dg-error \"not closely nested inside\" } */\n+    }\n     #pragma omp single\n     {\n       #pragma omp cancel parallel\t\t/* { dg-error \"not closely nested inside\" } */"}, {"sha": "604caf0ba918a6db7c8930337aa1ec5ebeb0c356", "filename": "gcc/testsuite/c-c++-common/gomp/clause-dups-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fclause-dups-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fclause-dups-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fclause-dups-1.c?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -205,6 +205,8 @@ f1 (int *p)\n   i = p[0]++;\n   #pragma omp masked filter (0) filter (0)\t\t\t/* { dg-error \"too many 'filter' clauses\" } */\n   f0 ();\n+  #pragma omp scope nowait nowait\t\t\t\t/* { dg-error \"too many 'nowait' clauses\" } */\n+  ;\n }\n \n #pragma omp declare simd simdlen (4) simdlen (4)\t\t/* { dg-error \"too many 'simdlen' clauses\" } */"}, {"sha": "3454fa802e33e8ae780d1d9ffd109c0b0aef4d2e", "filename": "gcc/testsuite/c-c++-common/gomp/loop-1.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Floop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Floop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Floop-1.c?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -182,6 +182,24 @@ f5 (int *a)\n       v = a[i];\t\t\t\t/* { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a 'loop' region\" \"\" { target c } } */\n     }\n   #pragma omp loop\n+  for (i = 0; i < 64; i++)\n+    {\n+      #pragma omp master\t\t/* { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a 'loop' region\" } */\n+      foo ();\n+    }\n+  #pragma omp loop\n+  for (i = 0; i < 64; i++)\n+    {\n+      #pragma omp masked\t\t/* { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a 'loop' region\" } */\n+      foo ();\n+    }\n+  #pragma omp loop\n+  for (i = 0; i < 64; i++)\n+    {\n+      #pragma omp scope\t\t\t/* { dg-error \"OpenMP constructs other than 'parallel', 'loop' or 'simd' may not be nested inside a 'loop' region\" } */\n+      foo ();\n+    }\n+  #pragma omp loop\n   for (i = 0; i < 64; i++)\n     a[i] += omp_get_thread_num ();\t/* { dg-error \"OpenMP runtime API call '\\[^\\n\\r]*omp_get_thread_num\\[^\\n\\r]*' in a region with 'order\\\\(concurrent\\\\)' clause\" } */\n   #pragma omp loop"}, {"sha": "420cfd3cfa6add8acf9f229ffc343fce67aaea7e", "filename": "gcc/testsuite/c-c++-common/gomp/nesting-2.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fnesting-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fnesting-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fnesting-2.c?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -19,6 +19,10 @@ foo (void)\n       #pragma omp barrier\t\t/* { dg-error \"region may not be closely nested inside of\" } */\n       #pragma omp master\t\t/* { dg-error \"region may not be closely nested inside of\" } */\n       ;\n+      #pragma omp masked\t\t/* { dg-error \"region may not be closely nested inside of\" } */\n+      ;\n+      #pragma omp scope\t\t\t/* { dg-error \"region may not be closely nested inside of\" } */\n+      ;\n       #pragma omp ordered\t\t/* { dg-error \"region may not be closely nested inside of\" } */\n       ;\n       #pragma omp ordered threads\t/* { dg-error \"region may not be closely nested inside of\" } */\n@@ -55,6 +59,10 @@ foo (void)\n       #pragma omp barrier\n       #pragma omp master\n       ;\n+      #pragma omp masked\n+      ;\n+      #pragma omp scope\n+      ;\n       #pragma omp ordered\t\t/* { dg-error \".ordered. region must be closely nested inside a loop region with an .ordered. clause\" } */\n       ;\n       #pragma omp ordered threads\t/* { dg-error \".ordered. region must be closely nested inside a loop region with an .ordered. clause\" } */\n@@ -89,6 +97,10 @@ foo (void)\n       #pragma omp barrier\n       #pragma omp master\n       ;\n+      #pragma omp masked\n+      ;\n+      #pragma omp scope\n+      ;\n       #pragma omp ordered\t\t/* { dg-error \".ordered. region must be closely nested inside a loop region with an .ordered. clause\" } */\n       ;\n       #pragma omp ordered threads\t/* { dg-error \".ordered. region must be closely nested inside a loop region with an .ordered. clause\" } */"}, {"sha": "225abed1bc60cbfa61df061fc14e5d5aa40d6e35", "filename": "gcc/testsuite/c-c++-common/gomp/reduction-task-2.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Freduction-task-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Freduction-task-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Freduction-task-2.c?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -14,7 +14,9 @@ bar (void)\n     #pragma omp section\n     foo (-3);\n   }\n-  #pragma omp simd reduction (task, +: v)\t/* { dg-error \"invalid 'task' reduction modifier on construct other than 'parallel', 'for' or 'sections'\" } */\n+  #pragma omp scope reduction (task, +: v) nowait\t/* { dg-error \"'task' reduction modifier on a construct with a 'nowait' clause\" } */\n+  foo (-4);\n+  #pragma omp simd reduction (task, +: v)\t/* { dg-error \"invalid 'task' reduction modifier on construct other than 'parallel', 'for', 'sections' or 'scope'\" } */\n   for (i = 0; i < 64; i++)\n     v++;\n   #pragma omp for simd reduction (task, +: v)\t/* { dg-error \"invalid 'task' reduction modifier on construct combined with 'simd'\" } */\n@@ -26,13 +28,13 @@ bar (void)\n   #pragma omp teams distribute parallel for simd reduction (task, +: v)\t/* { dg-error \"invalid 'task' reduction modifier on construct combined with 'simd'\" } */\n   for (i = 0; i < 64; i++)\n     v++;\n-  #pragma omp taskloop reduction (task, +: v)\t/* { dg-error \"invalid 'task' reduction modifier on construct other than 'parallel', 'for' or 'sections'\" } */\n+  #pragma omp taskloop reduction (task, +: v)\t/* { dg-error \"invalid 'task' reduction modifier on construct other than 'parallel', 'for', 'sections' or 'scope'\" } */\n   for (i = 0; i < 64; i++)\n     foo (i);\n   #pragma omp taskloop simd reduction (task, +: v)\t/* { dg-error \"invalid 'task' reduction modifier on construct combined with 'simd'\" } */\n   for (i = 0; i < 64; i++)\n     v++;\n-  #pragma omp teams reduction (task, +: v)\t/* { dg-error \"invalid 'task' reduction modifier on construct other than 'parallel', 'for' or 'sections'\" } */\n+  #pragma omp teams reduction (task, +: v)\t/* { dg-error \"invalid 'task' reduction modifier on construct other than 'parallel', 'for', 'sections' or 'scope'\" } */\n   foo (i);\n   #pragma omp teams distribute reduction (task, +: v)\t/* { dg-error \"invalid 'task' reduction modifier on construct not combined with 'parallel', 'for' or 'sections'\" } */\n   for (i = 0; i < 64; i++)"}, {"sha": "95b46cbb71b8bd1ca6ddf4716724b9fcd2c06525", "filename": "gcc/testsuite/c-c++-common/gomp/scan-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fscan-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fscan-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fscan-1.c?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -89,6 +89,8 @@ f3 (int *c, int *d)\n     #pragma omp section\n     ;\n   }\n+  #pragma omp scope reduction (inscan, +: a)\t/* { dg-error \"'inscan' 'reduction' clause on 'scope' construct\" } */\n+  ;\n   #pragma omp target parallel for reduction (inscan, +: a) map (c[:64], d[:64])\t/* { dg-error \"'inscan' 'reduction' clause on construct other than 'for', 'simd', 'for simd', 'parallel for', 'parallel for simd'\" } */\n   for (i = 0; i < 64; i++)\n     {"}, {"sha": "ab7a7787397a63120293ec68b64c9d270214ef7b", "filename": "gcc/testsuite/c-c++-common/gomp/scope-1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fscope-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fscope-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fscope-1.c?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -0,0 +1,39 @@\n+int r, r2, r3;\n+\n+void\n+foo (void)\n+{\n+  int i = 0, j = 0, k = 0;\n+  #pragma omp scope private (i) reduction (+:r) nowait\n+  {\n+    i = 1;\n+    r++;\n+  }\n+  #pragma omp scope private (i) reduction (task, +:r)\n+  #pragma omp scope private (j) reduction (task, +:r2)\n+  #pragma omp scope private (k) reduction (task, +:r3)\n+  {\n+    i = 1;\n+    j = 2;\n+    k = 3;\n+    r++;\n+    r2++;\n+    r3++;\n+  }\n+  #pragma omp parallel\n+  {\n+    #pragma omp scope reduction (+:r) private (i) nowait\n+    {\n+      #pragma omp scope reduction (+:r2) private (j) nowait\n+      {\n+\t#pragma omp single\n+\t{\n+\t  i = 1;\n+\t  j = 2;\n+\t  r++;\n+\t  r2++;\n+\t}\n+      }\n+    }\n+  }\n+}"}, {"sha": "58517be2feb4b2ca303e7e66e057b1a8a060ad9d", "filename": "gcc/testsuite/c-c++-common/gomp/scope-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fscope-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fscope-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fscope-2.c?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -0,0 +1,41 @@\n+int r, r2, r3 = 1;\n+int bar (void);\n+\n+void\n+foo (void)\n+{\n+  int i = 0, j = 0, k = 0;\n+  #pragma omp parallel\n+  {\n+    if (bar ())\n+      {\n+\t#pragma omp cancel parallel\n+      }\n+    #pragma omp scope reduction (+:r) private (i)\n+    {\n+      #pragma omp scope reduction (+:r2) private (j)\n+      {\n+\t#pragma omp single nowait\n+\t{\n+\t  i = 1;\n+\t  j = 2;\n+\t  r++;\n+\t  r2++;\n+\t}\n+      }\n+    }\n+  }\n+  #pragma omp parallel\n+  {\n+    if (bar ())\n+      {\n+\t#pragma omp cancel parallel\n+      }\n+    #pragma omp scope reduction (task, +:r) private (i)\n+    #pragma omp scope reduction (task, *:r3)\n+    {\n+      r++;\n+      r3++;\n+    }\n+  }\n+}"}, {"sha": "686acf5042fe82d18db4ed077f148cfba2af6098", "filename": "gcc/testsuite/g++.dg/gomp/attrs-1.C", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-1.C?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -554,6 +554,10 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n       [[omp::directive (cancellation point parallel)]];\n     }\n   }\n+  [[omp::directive (scope private (p) reduction(+:r) nowait)]]\n+    ;\n+  [[omp::directive (scope private (p) reduction(task, +:r))]]\n+    ;\n   extern int t2;\n   [[omp::directive (threadprivate (t2))]];\n   extern int t2;"}, {"sha": "2190457c877966e1af2bdaa09c9a6fb7e0bb25ae", "filename": "gcc/testsuite/g++.dg/gomp/attrs-2.C", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-2.C?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -554,6 +554,10 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n       [[omp::directive (cancellation point, parallel)]];\n     }\n   }\n+  [[omp::directive (scope, private (p), reduction(+:r), nowait)]]\n+    ;\n+  [[using omp:directive (scope, private (p), reduction(task, +:r))]]\n+    ;\n   extern int t2;\n   [[omp::directive (threadprivate (t2))]];\n   extern int t2;"}, {"sha": "ed457ced44cef400f3d04a979d88d9e3403efd9b", "filename": "gcc/testsuite/gcc.dg/gomp/nesting-1.c", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fnesting-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fnesting-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fnesting-1.c?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -24,6 +24,8 @@ f1 (void)\n       #pragma omp masked\t/* { dg-error \"may not be closely nested\" } */\n \t;\n       #pragma omp barrier\t/* { dg-error \"may not be closely nested\" } */\n+      #pragma omp scope\t\t/* { dg-error \"may not be closely nested\" } */\n+\t;\n     }\n   #pragma omp sections\n   {\n@@ -56,6 +58,11 @@ f1 (void)\n       ;\n   }\n   #pragma omp sections\n+  {\n+    #pragma omp scope\t\t/* { dg-error \"may not be closely nested\" } */\n+      ;\n+  }\n+  #pragma omp sections\n   {\n     #pragma omp section\n       ;\n@@ -92,6 +99,12 @@ f1 (void)\n     #pragma omp masked\t\t/* { dg-error \"may not be closely nested\" } */\n       ;\n   }\n+  #pragma omp sections\n+  {\n+    #pragma omp section\n+    #pragma omp scope\t\t/* { dg-error \"may not be closely nested\" } */\n+      ;\n+  }\n   #pragma omp single\n   {\n     #pragma omp for\t\t/* { dg-error \"may not be closely nested\" } */\n@@ -110,6 +123,8 @@ f1 (void)\n     #pragma omp masked\t\t/* { dg-error \"may not be closely nested\" } */\n       ;\n     #pragma omp barrier\t\t/* { dg-error \"may not be closely nested\" } */\n+    #pragma omp scope\t\t/* { dg-error \"may not be closely nested\" } */\n+      ;\n   }\n   #pragma omp master\n   {\n@@ -127,6 +142,8 @@ f1 (void)\n     #pragma omp master\n       ;\n     #pragma omp barrier\t\t/* { dg-error \"may not be closely nested\" } */\n+    #pragma omp scope\t\t/* { dg-error \"may not be closely nested\" } */\n+      ;\n   }\n   #pragma omp masked filter (1)\n   {\n@@ -144,6 +161,8 @@ f1 (void)\n     #pragma omp master\n       ;\n     #pragma omp barrier\t\t/* { dg-error \"may not be closely nested\" } */\n+    #pragma omp scope\t\t/* { dg-error \"may not be closely nested\" } */\n+      ;\n   }\n   #pragma omp task\n   {\n@@ -163,6 +182,8 @@ f1 (void)\n     #pragma omp masked\t\t/* { dg-error \"may not be closely nested\" } */\n       ;\n     #pragma omp barrier\t\t/* { dg-error \"may not be closely nested\" } */\n+    #pragma omp scope\t\t/* { dg-error \"may not be closely nested\" } */\n+      ;\n   }\n   #pragma omp parallel\n   {\n@@ -182,6 +203,39 @@ f1 (void)\n     #pragma omp masked\n       ;\n     #pragma omp barrier\n+    #pragma omp scope\n+      ;\n+    #pragma omp scope\n+    {\n+      #pragma omp scope\n+      ;\n+    }\n+  }\n+  #pragma omp scope\n+  {\n+    #pragma omp for\n+    for (j = 0; j < 3; j++)\n+      ;\n+    #pragma omp sections\n+    {\n+      ;\n+    #pragma omp section\n+      ;\n+    }\n+    #pragma omp single\n+      ;\n+    #pragma omp master\n+      ;\n+    #pragma omp masked\n+      ;\n+    #pragma omp barrier\n+    #pragma omp scope\n+      ;\n+    #pragma omp scope\n+    {\n+      #pragma omp scope\n+      ;\n+    }\n   }\n }\n \n@@ -207,6 +261,8 @@ f2 (void)\n     #pragma omp masked\n       ;\n     #pragma omp barrier\t\t/* { dg-error \"may not be closely nested\" } */\n+    #pragma omp scope\t\t/* { dg-error \"may not be closely nested\" } */\n+      ;\n   }\n }\n \n@@ -217,6 +273,8 @@ f3 (void)\n   {\n     #pragma omp ordered\t\t/* { dg-error \"may not be closely nested\" } */\n       ;\n+    #pragma omp scope\t\t/* { dg-error \"may not be closely nested\" } */\n+      ;\n   }\n }\n \n@@ -227,6 +285,8 @@ f4 (void)\n   {\n     #pragma omp ordered\t\t/* { dg-error \"may not be closely nested\" } */\n       ;\n+    #pragma omp scope\t\t/* { dg-error \"may not be closely nested\" } */\n+      ;\n   }\n }\n "}, {"sha": "52d504bac716cd24ea6f23efa7dd639f12ab5d53", "filename": "gcc/testsuite/gfortran.dg/gomp/reduction4.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction4.f90?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -40,7 +40,7 @@\n   a = a + 1\n end do\n \n-!$omp simd reduction(task,+:a)  ! { dg-error \"invalid 'task' reduction modifier on construct other than 'parallel', 'do' or 'sections'\" }\n+!$omp simd reduction(task,+:a)  ! { dg-error \"invalid 'task' reduction modifier on construct other than 'parallel', 'do', 'sections' or 'scope'\" }\n do i=1,10\n   a = a + 1\n end do"}, {"sha": "5f0b7bd02f88b0c84cfef78e361f81cc0693344b", "filename": "gcc/testsuite/gfortran.dg/gomp/reduction7.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction7.f90?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -2,7 +2,7 @@\n integer :: a, b, i\n a = 0\n \n-!$omp simd reduction(task,+:a)  ! { dg-error \"invalid 'task' reduction modifier on construct other than 'parallel', 'do' or 'sections'\" }\n+!$omp simd reduction(task,+:a)  ! { dg-error \"invalid 'task' reduction modifier on construct other than 'parallel', 'do', 'sections' or 'scope'\" }\n do i=1,10\n   a = a + 1\n end do"}, {"sha": "c5d6b1e6489f756ed0d1d22dcad05c36b4e4d6c2", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -1664,6 +1664,12 @@ remap_gimple_stmt (gimple *stmt, copy_body_data *id)\n \t\t   (s1, gimple_omp_masked_clauses (stmt));\n \t  break;\n \n+\tcase GIMPLE_OMP_SCOPE:\n+\t  s1 = remap_gimple_seq (gimple_omp_body (stmt), id);\n+\t  copy = gimple_build_omp_scope\n+\t\t   (s1, gimple_omp_scope_clauses (stmt));\n+\t  break;\n+\n \tcase GIMPLE_OMP_TASKGROUP:\n \t  s1 = remap_gimple_seq (gimple_omp_body (stmt), id);\n \t  copy = gimple_build_omp_taskgroup\n@@ -4551,6 +4557,7 @@ estimate_num_insns (gimple *stmt, eni_weights *weights)\n     case GIMPLE_OMP_CRITICAL:\n     case GIMPLE_OMP_MASTER:\n     case GIMPLE_OMP_MASKED:\n+    case GIMPLE_OMP_SCOPE:\n     case GIMPLE_OMP_TASKGROUP:\n     case GIMPLE_OMP_ORDERED:\n     case GIMPLE_OMP_SCAN:"}, {"sha": "c7f50ebd21c2f7e8dcfaa34560fec8f3443b2791", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -1736,6 +1736,14 @@ convert_nonlocal_reference_stmt (gimple_stmt_iterator *gsi, bool *handled_ops_p,\n       info->suppress_expansion = save_suppress;\n       break;\n \n+    case GIMPLE_OMP_SCOPE:\n+      save_suppress = info->suppress_expansion;\n+      convert_nonlocal_omp_clauses (gimple_omp_scope_clauses_ptr (stmt), wi);\n+      walk_body (convert_nonlocal_reference_stmt, convert_nonlocal_reference_op,\n+\t\t info, gimple_omp_body_ptr (stmt));\n+      info->suppress_expansion = save_suppress;\n+      break;\n+\n     case GIMPLE_OMP_TASKGROUP:\n       save_suppress = info->suppress_expansion;\n       convert_nonlocal_omp_clauses (gimple_omp_taskgroup_clauses_ptr (stmt), wi);\n@@ -2458,6 +2466,14 @@ convert_local_reference_stmt (gimple_stmt_iterator *gsi, bool *handled_ops_p,\n       info->suppress_expansion = save_suppress;\n       break;\n \n+    case GIMPLE_OMP_SCOPE:\n+      save_suppress = info->suppress_expansion;\n+      convert_local_omp_clauses (gimple_omp_scope_clauses_ptr (stmt), wi);\n+      walk_body (convert_local_reference_stmt, convert_local_reference_op,\n+\t\t info, gimple_omp_body_ptr (stmt));\n+      info->suppress_expansion = save_suppress;\n+      break;\n+\n     case GIMPLE_OMP_TASKGROUP:\n       save_suppress = info->suppress_expansion;\n       convert_local_omp_clauses (gimple_omp_taskgroup_clauses_ptr (stmt), wi);\n@@ -3031,6 +3047,7 @@ convert_gimple_call (gimple_stmt_iterator *gsi, bool *handled_ops_p,\n     case GIMPLE_OMP_SECTIONS:\n     case GIMPLE_OMP_SECTION:\n     case GIMPLE_OMP_SINGLE:\n+    case GIMPLE_OMP_SCOPE:\n     case GIMPLE_OMP_MASTER:\n     case GIMPLE_OMP_MASKED:\n     case GIMPLE_OMP_TASKGROUP:"}, {"sha": "0570fdcf890dcc9cbd5c1c2ceefeee95f8392521", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -3657,6 +3657,11 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n       dump_omp_clauses (pp, OMP_SINGLE_CLAUSES (node), spc, flags);\n       goto dump_omp_body;\n \n+    case OMP_SCOPE:\n+      pp_string (pp, \"#pragma omp scope\");\n+      dump_omp_clauses (pp, OMP_SCOPE_CLAUSES (node), spc, flags);\n+      goto dump_omp_body;\n+\n     case OMP_CLAUSE:\n       /* If we come here, we're dumping something that's not an OMP construct,\n \t for example, OMP clauses attached to a function's '__attribute__'."}, {"sha": "e27bc3e2b1f3f7092d8c18eb62ffde6ff1ff5841", "filename": "gcc/tree.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -1213,6 +1213,11 @@ DEFTREECODE (OMP_CRITICAL, \"omp_critical\", tcc_statement, 3)\n    Operand 1: OMP_SINGLE_CLAUSES: List of clauses.  */\n DEFTREECODE (OMP_SINGLE, \"omp_single\", tcc_statement, 2)\n \n+/* OpenMP - #pragma omp scope\n+   Operand 0: OMP_SCOPE_BODY: Masked section body.\n+   Operand 1: OMP_SCOPE_CLAUSES: List of clauses.  */\n+DEFTREECODE (OMP_SCOPE, \"omp_scope\", tcc_statement, 2)\n+\n /* OpenMP - #pragma omp taskgroup\n    Operand 0: OMP_TASKGROUP_BODY: Taskgroup body.\n    Operand 1: OMP_SINGLE_CLAUSES: List of clauses.  */"}, {"sha": "78d8a049d29c69c6fbf6d6eea3c3eb824e7def8a", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -1427,6 +1427,9 @@ class auto_suppress_location_wrappers\n #define OMP_SINGLE_BODY(NODE)\t   TREE_OPERAND (OMP_SINGLE_CHECK (NODE), 0)\n #define OMP_SINGLE_CLAUSES(NODE)   TREE_OPERAND (OMP_SINGLE_CHECK (NODE), 1)\n \n+#define OMP_SCOPE_BODY(NODE)\t   TREE_OPERAND (OMP_SCOPE_CHECK (NODE), 0)\n+#define OMP_SCOPE_CLAUSES(NODE)\t   TREE_OPERAND (OMP_SCOPE_CHECK (NODE), 1)\n+\n #define OMP_MASTER_BODY(NODE)\t   TREE_OPERAND (OMP_MASTER_CHECK (NODE), 0)\n \n #define OMP_MASKED_BODY(NODE)\t   TREE_OPERAND (OMP_MASKED_CHECK (NODE), 0)"}, {"sha": "f8b2a06d63e49c5929b9592a535dd3befbcbb3cf", "filename": "libgomp/Makefile.am", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/libgomp%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/libgomp%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FMakefile.am?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -61,11 +61,12 @@ libgomp_la_LINK = $(LINK) $(libgomp_la_LDFLAGS)\n \n libgomp_la_SOURCES = alloc.c atomic.c barrier.c critical.c env.c error.c \\\n \ticv.c icv-device.c iter.c iter_ull.c loop.c loop_ull.c ordered.c \\\n-\tparallel.c sections.c single.c task.c team.c work.c lock.c mutex.c \\\n-\tproc.c sem.c bar.c ptrlock.c time.c fortran.c affinity.c target.c \\\n-\tsplay-tree.c libgomp-plugin.c oacc-parallel.c oacc-host.c oacc-init.c \\\n-\toacc-mem.c oacc-async.c oacc-plugin.c oacc-cuda.c priority_queue.c \\\n-\taffinity-fmt.c teams.c allocator.c oacc-profiling.c oacc-target.c\n+\tparallel.c scope.c sections.c single.c task.c team.c work.c lock.c \\\n+\tmutex.c proc.c sem.c bar.c ptrlock.c time.c fortran.c affinity.c \\\n+\ttarget.c splay-tree.c libgomp-plugin.c oacc-parallel.c oacc-host.c \\\n+\toacc-init.c oacc-mem.c oacc-async.c oacc-plugin.c oacc-cuda.c \\\n+\tpriority_queue.c affinity-fmt.c teams.c allocator.c oacc-profiling.c \\\n+\toacc-target.c\n \n include $(top_srcdir)/plugin/Makefrag.am\n "}, {"sha": "22cb2136a08dfb169a4c3c44d62943cc880589f1", "filename": "libgomp/Makefile.in", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/libgomp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/libgomp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FMakefile.in?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -213,14 +213,14 @@ libgomp_la_LIBADD =\n @USE_FORTRAN_TRUE@am__objects_1 = openacc.lo\n am_libgomp_la_OBJECTS = alloc.lo atomic.lo barrier.lo critical.lo \\\n \tenv.lo error.lo icv.lo icv-device.lo iter.lo iter_ull.lo \\\n-\tloop.lo loop_ull.lo ordered.lo parallel.lo sections.lo \\\n-\tsingle.lo task.lo team.lo work.lo lock.lo mutex.lo proc.lo \\\n-\tsem.lo bar.lo ptrlock.lo time.lo fortran.lo affinity.lo \\\n-\ttarget.lo splay-tree.lo libgomp-plugin.lo oacc-parallel.lo \\\n-\toacc-host.lo oacc-init.lo oacc-mem.lo oacc-async.lo \\\n-\toacc-plugin.lo oacc-cuda.lo priority_queue.lo affinity-fmt.lo \\\n-\tteams.lo allocator.lo oacc-profiling.lo oacc-target.lo \\\n-\t$(am__objects_1)\n+\tloop.lo loop_ull.lo ordered.lo parallel.lo scope.lo \\\n+\tsections.lo single.lo task.lo team.lo work.lo lock.lo mutex.lo \\\n+\tproc.lo sem.lo bar.lo ptrlock.lo time.lo fortran.lo \\\n+\taffinity.lo target.lo splay-tree.lo libgomp-plugin.lo \\\n+\toacc-parallel.lo oacc-host.lo oacc-init.lo oacc-mem.lo \\\n+\toacc-async.lo oacc-plugin.lo oacc-cuda.lo priority_queue.lo \\\n+\taffinity-fmt.lo teams.lo allocator.lo oacc-profiling.lo \\\n+\toacc-target.lo $(am__objects_1)\n libgomp_la_OBJECTS = $(am_libgomp_la_OBJECTS)\n AM_V_P = $(am__v_P_@AM_V@)\n am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)\n@@ -553,9 +553,9 @@ libgomp_la_DEPENDENCIES = $(libgomp_version_dep)\n libgomp_la_LINK = $(LINK) $(libgomp_la_LDFLAGS)\n libgomp_la_SOURCES = alloc.c atomic.c barrier.c critical.c env.c \\\n \terror.c icv.c icv-device.c iter.c iter_ull.c loop.c loop_ull.c \\\n-\tordered.c parallel.c sections.c single.c task.c team.c work.c \\\n-\tlock.c mutex.c proc.c sem.c bar.c ptrlock.c time.c fortran.c \\\n-\taffinity.c target.c splay-tree.c libgomp-plugin.c \\\n+\tordered.c parallel.c scope.c sections.c single.c task.c team.c \\\n+\twork.c lock.c mutex.c proc.c sem.c bar.c ptrlock.c time.c \\\n+\tfortran.c affinity.c target.c splay-tree.c libgomp-plugin.c \\\n \toacc-parallel.c oacc-host.c oacc-init.c oacc-mem.c \\\n \toacc-async.c oacc-plugin.c oacc-cuda.c priority_queue.c \\\n \taffinity-fmt.c teams.c allocator.c oacc-profiling.c \\\n@@ -769,6 +769,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/priority_queue.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/proc.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ptrlock.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/scope.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sections.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sem.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/single.Plo@am__quote@"}, {"sha": "ac1653ea7c635eb85bd28295a4cd683e1e3342b5", "filename": "libgomp/libgomp.map", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/libgomp%2Flibgomp.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/libgomp%2Flibgomp.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.map?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -380,6 +380,11 @@ GOMP_5.0.1 {\n \tGOMP_free;\n } GOMP_5.0;\n \n+GOMP_5.1 {\n+  global:\n+\tGOMP_scope_start;\n+} GOMP_5.0.1;\n+\n OACC_2.0 {\n   global:\n \tacc_get_num_devices;"}, {"sha": "5e3612bf2db50a123f5ac30de99aaf1faa762895", "filename": "libgomp/libgomp_g.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/libgomp%2Flibgomp_g.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/libgomp%2Flibgomp_g.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp_g.h?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -332,6 +332,10 @@ extern bool GOMP_single_start (void);\n extern void *GOMP_single_copy_start (void);\n extern void GOMP_single_copy_end (void *);\n \n+/* scope.c */\n+\n+extern void GOMP_scope_start (uintptr_t *);\n+\n /* target.c */\n \n extern void GOMP_target (int, void (*) (void *), const void *,"}, {"sha": "8a4691c3493641de3371e5942f939f6dc7a31a85", "filename": "libgomp/scope.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/libgomp%2Fscope.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/libgomp%2Fscope.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fscope.c?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -0,0 +1,62 @@\n+/* Copyright (C) 2021 Free Software Foundation, Inc.\n+   Contributed by Jakub Jelinek <jakub@redhat.com>.\n+\n+   This file is part of the GNU Offloading and Multi Processing Library\n+   (libgomp).\n+\n+   Libgomp is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   Libgomp is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n+   more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* This file handles the SCOPE construct with task reductions.  */\n+\n+#include \"libgomp.h\"\n+#include <string.h>\n+\n+\n+ialias_redirect (GOMP_taskgroup_reduction_register)\n+\n+/* This routine is called when first encountering a scope construct\n+   with task reductions.  While scope is not a work-sharing construct,\n+   if it has task reductions on it, we treat it as one, but as if it is\n+   nowait, so the work-sharing behavior is done solely to choose which\n+   thread does the initial initialization of task reductions and which\n+   threads follow.  scope with task reductions must not be nowait,\n+   but the barrier and GOMP_workshare_task_reduction_unregister are emitted\n+   by the lowered code later.  */\n+\n+void\n+GOMP_scope_start (uintptr_t *reductions)\n+{\n+  struct gomp_thread *thr = gomp_thread ();\n+\n+  gomp_workshare_taskgroup_start ();\n+  if (gomp_work_share_start (0))\n+    {\n+      GOMP_taskgroup_reduction_register (reductions);\n+      thr->task->taskgroup->workshare = true;\n+      thr->ts.work_share->task_reductions = reductions;\n+      gomp_work_share_init_done ();\n+    }\n+  else\n+    {\n+      uintptr_t *first_reductions = thr->ts.work_share->task_reductions;\n+      gomp_workshare_task_reduction_register (reductions,\n+\t\t\t\t\t      first_reductions);\n+    }\n+}"}, {"sha": "d2623129288f792d5b5c1d6762215096e7e51f11", "filename": "libgomp/testsuite/libgomp.c-c++-common/scope-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fscope-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fscope-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fscope-1.c?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -0,0 +1,50 @@\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+void abort ();\n+\n+int\n+main ()\n+{\n+  int a[64] = {};\n+  int r = 0, r2 = 0, i;\n+  #pragma omp parallel\n+  {\n+    #pragma omp scope nowait\n+    #pragma omp scope nowait\n+    #pragma omp for\n+    for (i = 0; i < 64; i++)\n+      a[i] += 1;\n+    #pragma omp scope reduction(+: r) nowait\n+    {\n+      #pragma omp for nowait\n+      for (i = 0; i < 64; i++)\n+\t{\n+\t  r += i;\n+\t  if (a[i] != 1)\n+\t    abort ();\n+\t}\n+      #pragma omp barrier\n+    }\n+    #pragma omp barrier\n+    if (r != 64 * 63 / 2)\n+      abort ();\n+    #pragma omp scope nowait private (i)\n+    #pragma omp scope reduction(+: r2)\n+    {\n+      #pragma omp for nowait\n+      for (i = 0; i < 64; i++)\n+\t{\n+\t  r2 += 2 * i;\n+\t  a[i] += i;\n+\t}\n+    }\n+    if (r2 != 64 * 63)\n+      abort ();\n+    #pragma omp for nowait\n+    for (i = 0; i < 64; i++)\n+      if (a[i] != i + 1)\n+\tabort ();\n+  }\n+  return 0;\n+}"}, {"sha": "44d32c7bc25a7866c6a111707672f8a001bcfd0c", "filename": "libgomp/testsuite/libgomp.c-c++-common/task-reduction-16.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45483c7c4badc4bf2d6ced22360ce1ab172967f/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftask-reduction-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45483c7c4badc4bf2d6ced22360ce1ab172967f/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftask-reduction-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftask-reduction-16.c?ref=e45483c7c4badc4bf2d6ced22360ce1ab172967f", "patch": "@@ -0,0 +1,76 @@\n+extern\n+#ifdef __cplusplus\n+\"C\"\n+#endif\n+void abort (void);\n+int a, b[3] = { 1, 1, 1 };\n+unsigned long int c[2] = { ~0UL, ~0UL };\n+\n+void\n+bar (int i)\n+{\n+  #pragma omp task in_reduction (*: b[:3]) in_reduction (&: c[1:]) \\\n+\t      in_reduction (+: a)\n+  {\n+    a += 4;\n+    b[1] *= 4;\n+    c[1] &= ~(1UL << (i + 16));\n+  }\n+}\n+\n+void\n+foo (int x)\n+{\n+  #pragma omp scope reduction (task, +: a)\n+  {\n+    #pragma omp scope reduction (task, *: b)\n+    {\n+      #pragma omp scope reduction (task, &: c[1:1])\n+      {\n+\t#pragma omp barrier\n+\t#pragma omp sections\n+\t{\n+\t  {\n+\t    a++; b[0] *= 2; bar (2); b[2] *= 3; c[1] &= ~(1UL << 2);\n+\t  }\n+\t#pragma omp section\n+\t{ b[0] *= 2; bar (4); b[2] *= 3; c[1] &= ~(1UL << 4); a++; }\n+\t#pragma omp section\n+\t{ bar (6); b[2] *= 3; c[1] &= ~(1UL << 6); a++; b[0] *= 2; }\n+\t#pragma omp section\n+\t{ b[2] *= 3; c[1] &= ~(1UL << 8); a++; b[0] *= 2; bar (8); }\n+\t#pragma omp section\n+\t{ c[1] &= ~(1UL << 10); a++; b[0] *= 2; bar (10); b[2] *= 3; }\n+\t#pragma omp section\n+\t{ a++; b[0] *= 2; b[2] *= 3; c[1] &= ~(1UL << 12); bar (12); }\n+\t#pragma omp section\n+\tif (x)\n+\t  {\n+\t    a++; b[0] *= 2; b[2] *= 3; bar (14); c[1] &= ~(1UL << 14);\n+\t  }\n+\t}\n+      }\n+    }\n+  }\n+}\n+\n+int\n+main ()\n+{\n+  volatile int one = 1;\n+  foo (!one);\n+  if (a != 30 || b[0] != 64 || b[1] != (1 << 12) || b[2] != 3 * 3 * 3 * 3 * 3 * 3\n+      || c[0] != ~0UL || c[1] != ~0x15541554UL)\n+    abort ();\n+  a = 0;\n+  b[0] = 1;\n+  b[1] = 1;\n+  b[2] = 1;\n+  c[1] = ~0UL;\n+  #pragma omp parallel\n+  foo (one);\n+  if (a != 35 || b[0] != 128 || b[1] != (1 << 14) || b[2] != 3 * 3 * 3 * 3 * 3 * 3 * 3\n+      || c[0] != ~0UL || c[1] != ~0x55545554UL)\n+    abort ();\n+  return 0;\n+}"}]}