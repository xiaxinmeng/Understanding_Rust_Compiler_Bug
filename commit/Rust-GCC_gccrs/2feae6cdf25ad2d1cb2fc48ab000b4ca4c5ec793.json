{"sha": "2feae6cdf25ad2d1cb2fc48ab000b4ca4c5ec793", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZlYWU2Y2RmMjVhZDJkMWNiMmZjNDhhYjAwMGI0Y2E0YzVlYzc5Mw==", "commit": {"author": {"name": "Monk Chiang", "email": "sh.chiang04@gmail.com", "date": "2018-04-07T08:16:41Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2018-04-07T08:16:41Z"}, "message": "[NDS32] Add intrinsic functions for particular instructions.\n\ngcc/\n\t* config/nds32/constants.md (unspec_element, unspec_volatile_element):\n\tAdd enum values for particular instructions.\n\t* config/nds32/nds32-intrinsic.c: Implementation of expanding\n\tparticular intrinsic functions.\n\t* config/nds32/nds32-intrinsic.md: Likewise.\n\t* config/nds32/nds32_intrinsic.h: Likewise.\n\t* config/nds32/nds32.h (nds32_builtins): Likewise.\n\t* config/nds32/nds32.md (type): Add pbsad and pbsada.\n\t(btst, ave): New patterns for particular instructions.\n\nFrom-SVN: r259208", "tree": {"sha": "ed4f3566393136433b66c965f63b196af4ff44e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed4f3566393136433b66c965f63b196af4ff44e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2feae6cdf25ad2d1cb2fc48ab000b4ca4c5ec793", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2feae6cdf25ad2d1cb2fc48ab000b4ca4c5ec793", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2feae6cdf25ad2d1cb2fc48ab000b4ca4c5ec793", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2feae6cdf25ad2d1cb2fc48ab000b4ca4c5ec793/comments", "author": {"login": "monkchiang", "id": 62004175, "node_id": "MDQ6VXNlcjYyMDA0MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/62004175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/monkchiang", "html_url": "https://github.com/monkchiang", "followers_url": "https://api.github.com/users/monkchiang/followers", "following_url": "https://api.github.com/users/monkchiang/following{/other_user}", "gists_url": "https://api.github.com/users/monkchiang/gists{/gist_id}", "starred_url": "https://api.github.com/users/monkchiang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/monkchiang/subscriptions", "organizations_url": "https://api.github.com/users/monkchiang/orgs", "repos_url": "https://api.github.com/users/monkchiang/repos", "events_url": "https://api.github.com/users/monkchiang/events{/privacy}", "received_events_url": "https://api.github.com/users/monkchiang/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "154e3ea6f70cbbea4355c7c7b90a626d08eed3de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/154e3ea6f70cbbea4355c7c7b90a626d08eed3de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/154e3ea6f70cbbea4355c7c7b90a626d08eed3de"}], "stats": {"total": 806, "additions": 801, "deletions": 5}, "files": [{"sha": "cba352564296a5169f4d5ad6f20876687ac42690", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2feae6cdf25ad2d1cb2fc48ab000b4ca4c5ec793/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2feae6cdf25ad2d1cb2fc48ab000b4ca4c5ec793/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2feae6cdf25ad2d1cb2fc48ab000b4ca4c5ec793", "patch": "@@ -1,3 +1,15 @@\n+2018-04-07  Monk Chiang  <sh.chiang04@gmail.com>\n+\n+\t* config/nds32/constants.md (unspec_element, unspec_volatile_element):\n+\tAdd enum values for particular instructions.\n+\t* config/nds32/nds32-intrinsic.c: Implementation of expanding\n+\tparticular intrinsic functions.\n+\t* config/nds32/nds32-intrinsic.md: Likewise.\n+\t* config/nds32/nds32_intrinsic.h: Likewise.\n+\t* config/nds32/nds32.h (nds32_builtins): Likewise.\n+\t* config/nds32/nds32.md (type): Add pbsad and pbsada.\n+\t(btst, ave): New patterns for particular instructions.\n+\n 2018-04-07  Monk Chiang  <sh.chiang04@gmail.com>\n \n \t* config/nds32/constants.md (unspec_element, unspec_volatile_element):"}, {"sha": "3facf5ba898814dadc99113aefd61839202ed76a", "filename": "gcc/config/nds32/constants.md", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2feae6cdf25ad2d1cb2fc48ab000b4ca4c5ec793/gcc%2Fconfig%2Fnds32%2Fconstants.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2feae6cdf25ad2d1cb2fc48ab000b4ca4c5ec793/gcc%2Fconfig%2Fnds32%2Fconstants.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fconstants.md?ref=2feae6cdf25ad2d1cb2fc48ab000b4ca4c5ec793", "patch": "@@ -37,9 +37,21 @@\n   UNSPEC_FCPYNSS\n   UNSPEC_FCPYSD\n   UNSPEC_FCPYSS\n+  UNSPEC_CLIP\n+  UNSPEC_CLIPS\n+  UNSPEC_CLO\n+  UNSPEC_PBSAD\n+  UNSPEC_PBSADA\n+  UNSPEC_BSE\n+  UNSPEC_BSE_2\n+  UNSPEC_BSP\n+  UNSPEC_BSP_2\n   UNSPEC_FFB\n   UNSPEC_FFMISM\n   UNSPEC_FLMISM\n+  UNSPEC_SVA\n+  UNSPEC_SVS\n+  UNSPEC_WSBH\n   UNSPEC_LWUP\n   UNSPEC_LBUP\n   UNSPEC_SWUP\n@@ -69,6 +81,23 @@\n   UNSPEC_VOLATILE_FMFCSR\n   UNSPEC_VOLATILE_FMTCSR\n   UNSPEC_VOLATILE_FMFCFG\n+  UNSPEC_VOLATILE_JR_ITOFF\n+  UNSPEC_VOLATILE_JR_TOFF\n+  UNSPEC_VOLATILE_JRAL_ITON\n+  UNSPEC_VOLATILE_JRAL_TON\n+  UNSPEC_VOLATILE_RET_ITOFF\n+  UNSPEC_VOLATILE_RET_TOFF\n+  UNSPEC_VOLATILE_STANDBY_NO_WAKE_GRANT\n+  UNSPEC_VOLATILE_STANDBY_WAKE_GRANT\n+  UNSPEC_VOLATILE_STANDBY_WAKE_DONE\n+  UNSPEC_VOLATILE_TEQZ\n+  UNSPEC_VOLATILE_TNEZ\n+  UNSPEC_VOLATILE_TRAP\n+  UNSPEC_VOLATILE_SETEND_BIG\n+  UNSPEC_VOLATILE_SETEND_LITTLE\n+  UNSPEC_VOLATILE_BREAK\n+  UNSPEC_VOLATILE_SYSCALL\n+  UNSPEC_VOLATILE_NOP\n   UNSPEC_VOLATILE_LLW\n   UNSPEC_VOLATILE_SCW\n   UNSPEC_VOLATILE_CCTL_L1D_INVALALL"}, {"sha": "49b03f3f7409db2167e6ab889695b0fd7f6118e7", "filename": "gcc/config/nds32/nds32-intrinsic.c", "status": "modified", "additions": 231, "deletions": 0, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2feae6cdf25ad2d1cb2fc48ab000b4ca4c5ec793/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2feae6cdf25ad2d1cb2fc48ab000b4ca4c5ec793/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c?ref=2feae6cdf25ad2d1cb2fc48ab000b4ca4c5ec793", "patch": "@@ -239,6 +239,72 @@ nds32_expand_binop_builtin (enum insn_code icode, tree exp, rtx target,\n   return target;\n }\n \n+/* Expand builtins that take two operands and the second is immediate.  */\n+static rtx\n+nds32_expand_binopimm_builtin (enum insn_code icode, tree exp, rtx target,\n+\t\t\t       bool return_p, const char *name)\n+{\n+  rtx pat;\n+  rtx op0 = nds32_read_argument (exp, 0);\n+  rtx op1 = nds32_read_argument (exp, 1);\n+  int op0_num = return_p ? 1 : 0;\n+  int op1_num = return_p ? 2 : 1;\n+\n+  if (return_p)\n+    target = nds32_legitimize_target (icode, target);\n+\n+  if (!nds32_check_constant_argument (icode, op1_num, op1, name))\n+    return NULL_RTX;\n+\n+  op0 = nds32_legitimize_argument (icode, op0_num, op0);\n+  op1 = nds32_legitimize_argument (icode, op1_num, op1);\n+\n+  /* Emit and return the new instruction. */\n+  if (return_p)\n+    pat = GEN_FCN (icode) (target, op0, op1);\n+  else\n+    pat = GEN_FCN (icode) (op0, op1);\n+\n+  if (! pat)\n+    return NULL_RTX;\n+\n+  emit_insn (pat);\n+  return target;\n+}\n+\n+/* Expand builtins that take three operands.  */\n+static rtx\n+nds32_expand_triop_builtin (enum insn_code icode, tree exp, rtx target,\n+\t\t\t    bool return_p)\n+{\n+  rtx pat;\n+  rtx op0 = nds32_read_argument (exp, 0);\n+  rtx op1 = nds32_read_argument (exp, 1);\n+  rtx op2 = nds32_read_argument (exp, 2);\n+  int op0_num = return_p ? 1 : 0;\n+  int op1_num = return_p ? 2 : 1;\n+  int op2_num = return_p ? 3 : 2;\n+\n+  if (return_p)\n+    target = nds32_legitimize_target (icode, target);\n+\n+  op0 = nds32_legitimize_argument (icode, op0_num, op0);\n+  op1 = nds32_legitimize_argument (icode, op1_num, op1);\n+  op2 = nds32_legitimize_argument (icode, op2_num, op2);\n+\n+  /* Emit and return the new instruction. */\n+  if (return_p)\n+    pat = GEN_FCN (icode) (target, op0, op1, op2);\n+  else\n+    pat = GEN_FCN (icode) (op0, op1, op2);\n+\n+  if (! pat)\n+    return NULL_RTX;\n+\n+  emit_insn (pat);\n+  return target;\n+}\n+\n /* Expand builtins for load.  */\n static rtx\n nds32_expand_builtin_load (enum insn_code icode, tree exp, rtx target)\n@@ -386,23 +452,40 @@ static struct builtin_description bdesc_noarg[] =\n {\n   NDS32_BUILTIN(unspec_fmfcfg, \"fmfcfg\", FMFCFG)\n   NDS32_BUILTIN(unspec_fmfcsr, \"fmfcsr\", FMFCSR)\n+  NDS32_BUILTIN(unspec_get_current_sp, \"get_current_sp\", GET_CURRENT_SP)\n+  NDS32_BUILTIN(unspec_return_address, \"return_address\", RETURN_ADDRESS)\n };\n \n /* Intrinsics that take just one argument.  */\n static struct builtin_description bdesc_1arg[] =\n {\n+  NDS32_BUILTIN(unspec_ssabssi2, \"abs\", ABS)\n+  NDS32_BUILTIN(clzsi2, \"clz\", CLZ)\n+  NDS32_BUILTIN(unspec_clo, \"clo\", CLO)\n+  NDS32_BUILTIN(unspec_wsbh, \"wsbh\", WSBH)\n   NDS32_BUILTIN(unaligned_load_hw, \"unaligned_load_hw\", UALOAD_HW)\n   NDS32_BUILTIN(unaligned_loadsi, \"unaligned_load_w\", UALOAD_W)\n   NDS32_BUILTIN(unaligned_loaddi, \"unaligned_load_dw\", UALOAD_DW)\n   NDS32_NO_TARGET_BUILTIN(unspec_volatile_isync, \"isync\", ISYNC)\n   NDS32_NO_TARGET_BUILTIN(unspec_fmtcsr, \"fmtcsr\", FMTCSR)\n+  NDS32_NO_TARGET_BUILTIN(unspec_jr_itoff, \"jr_itoff\", JR_ITOFF)\n+  NDS32_NO_TARGET_BUILTIN(unspec_jr_toff, \"jr_toff\", JR_TOFF)\n+  NDS32_NO_TARGET_BUILTIN(unspec_jral_ton, \"jral_ton\", JRAL_TON)\n+  NDS32_NO_TARGET_BUILTIN(unspec_ret_toff, \"ret_toff\", RET_TOFF)\n+  NDS32_NO_TARGET_BUILTIN(unspec_jral_iton, \"jral_iton\",JRAL_ITON)\n+  NDS32_NO_TARGET_BUILTIN(unspec_ret_itoff, \"ret_itoff\", RET_ITOFF)\n+  NDS32_NO_TARGET_BUILTIN(unspec_set_current_sp,\n+\t\t\t  \"set_current_sp\", SET_CURRENT_SP)\n };\n \n /* Intrinsics that take just one argument. and the argument is immediate.  */\n static struct builtin_description bdesc_1argimm[] =\n {\n   NDS32_BUILTIN(unspec_volatile_mfsr, \"mfsr\", MFSR)\n   NDS32_BUILTIN(unspec_volatile_mfusr, \"mfsr\", MFUSR)\n+  NDS32_NO_TARGET_BUILTIN(unspec_trap, \"trap\", TRAP)\n+  NDS32_NO_TARGET_BUILTIN(unspec_break, \"break\", BREAK)\n+  NDS32_NO_TARGET_BUILTIN(unspec_syscall, \"syscall\", SYSCALL)\n };\n \n /* Intrinsics that take two arguments.  */\n@@ -412,9 +495,14 @@ static struct builtin_description bdesc_2arg[] =\n   NDS32_BUILTIN(unspec_fcpyss, \"fcpyss\", FCPYSS)\n   NDS32_BUILTIN(unspec_fcpynsd, \"fcpynsd\", FCPYNSD)\n   NDS32_BUILTIN(unspec_fcpysd, \"fcpysd\", FCPYSD)\n+  NDS32_BUILTIN(unspec_ave, \"ave\", AVE)\n+  NDS32_BUILTIN(unspec_pbsad, \"pbsad\", PBSAD)\n   NDS32_BUILTIN(unspec_ffb, \"ffb\", FFB)\n   NDS32_BUILTIN(unspec_ffmism, \"ffmsim\", FFMISM)\n   NDS32_BUILTIN(unspec_flmism, \"flmism\", FLMISM)\n+  NDS32_BUILTIN(rotrsi3, \"rotr\", ROTR)\n+  NDS32_BUILTIN(unspec_sva, \"sva\", SVA)\n+  NDS32_BUILTIN(unspec_svs, \"svs\", SVS)\n   NDS32_NO_TARGET_BUILTIN(mtsr_isb, \"mtsr_isb\", MTSR_ISB)\n   NDS32_NO_TARGET_BUILTIN(mtsr_dsb, \"mtsr_dsb\", MTSR_DSB)\n   NDS32_NO_TARGET_BUILTIN(unspec_volatile_mtsr, \"mtsr\", MTSR)\n@@ -425,6 +513,27 @@ static struct builtin_description bdesc_2arg[] =\n \n };\n \n+/* Two-argument intrinsics with an immediate second argument.  */\n+static struct builtin_description bdesc_2argimm[] =\n+{\n+  NDS32_BUILTIN(unspec_bclr, \"bclr\", BCLR)\n+  NDS32_BUILTIN(unspec_bset, \"bset\", BSET)\n+  NDS32_BUILTIN(unspec_btgl, \"btgl\", BTGL)\n+  NDS32_BUILTIN(unspec_btst, \"btst\", BTST)\n+  NDS32_BUILTIN(unspec_clip, \"clip\", CLIP)\n+  NDS32_BUILTIN(unspec_clips, \"clips\", CLIPS)\n+  NDS32_NO_TARGET_BUILTIN(unspec_teqz, \"teqz\", TEQZ)\n+  NDS32_NO_TARGET_BUILTIN(unspec_tnez, \"tnez\", TNEZ)\n+};\n+\n+/* Intrinsics that take three arguments.  */\n+static struct builtin_description bdesc_3arg[] =\n+{\n+  NDS32_BUILTIN(unspec_pbsada, \"pbsada\", PBSADA)\n+  NDS32_NO_TARGET_BUILTIN(bse, \"bse\", BSE)\n+  NDS32_NO_TARGET_BUILTIN(bsp, \"bsp\", BSP)\n+};\n+\n /* Intrinsics that load a value.  */\n static struct builtin_description bdesc_load[] =\n {\n@@ -508,6 +617,38 @@ nds32_expand_builtin_impl (tree exp,\n \t  return NULL_RTX;\n \t}\n       break;\n+\n+    /* Performance Extension  */\n+    case NDS32_BUILTIN_ABS:\n+    case NDS32_BUILTIN_AVE:\n+    case NDS32_BUILTIN_BCLR:\n+    case NDS32_BUILTIN_BSET:\n+    case NDS32_BUILTIN_BTGL:\n+    case NDS32_BUILTIN_BTST:\n+    case NDS32_BUILTIN_CLIP:\n+    case NDS32_BUILTIN_CLIPS:\n+    case NDS32_BUILTIN_CLZ:\n+    case NDS32_BUILTIN_CLO:\n+      if (!TARGET_EXT_PERF)\n+\t{\n+\t  error (\"don't support performance extension instructions\");\n+\t  return NULL_RTX;\n+\t}\n+      break;\n+\n+    /* Performance Extension 2  */\n+    case NDS32_BUILTIN_PBSAD:\n+    case NDS32_BUILTIN_PBSADA:\n+    case NDS32_BUILTIN_BSE:\n+    case NDS32_BUILTIN_BSP:\n+      if (!TARGET_EXT_PERF2)\n+\t{\n+\t  error (\"don't support performance extension \"\n+\t\t \"version 2 instructions\");\n+\t  return NULL_RTX;\n+\t}\n+      break;\n+\n     /* String Extension  */\n     case NDS32_BUILTIN_FFB:\n     case NDS32_BUILTIN_FFMISM:\n@@ -540,9 +681,12 @@ nds32_expand_builtin_impl (tree exp,\n       return target;\n     case NDS32_BUILTIN_SETGIE_EN:\n       emit_insn (gen_unspec_volatile_setgie_en ());\n+      emit_insn (gen_unspec_dsb ());\n       return target;\n     case NDS32_BUILTIN_SETGIE_DIS:\n       emit_insn (gen_unspec_volatile_setgie_dis ());\n+      emit_insn (gen_unspec_dsb ());\n+      return target;\n     case NDS32_BUILTIN_CCTL_L1D_INVALALL:\n       emit_insn (gen_cctl_l1d_invalall());\n       return target;\n@@ -552,6 +696,27 @@ nds32_expand_builtin_impl (tree exp,\n     case NDS32_BUILTIN_CCTL_L1D_WBALL_ONE_LVL:\n       emit_insn (gen_cctl_l1d_wball_one_lvl());\n       return target;\n+    case NDS32_BUILTIN_STANDBY_NO_WAKE_GRANT:\n+      emit_insn (gen_unspec_standby_no_wake_grant ());\n+      return target;\n+    case NDS32_BUILTIN_STANDBY_WAKE_GRANT:\n+      emit_insn (gen_unspec_standby_wake_grant ());\n+      return target;\n+    case NDS32_BUILTIN_STANDBY_WAKE_DONE:\n+      emit_insn (gen_unspec_standby_wait_done ());\n+      return target;\n+    case NDS32_BUILTIN_SETEND_BIG:\n+      emit_insn (gen_unspec_setend_big ());\n+      return target;\n+    case NDS32_BUILTIN_SETEND_LITTLE:\n+      emit_insn (gen_unspec_setend_little ());\n+      return target;\n+    case NDS32_BUILTIN_NOP:\n+      emit_insn (gen_unspec_nop ());\n+      return target;\n+    case NDS32_BUILTIN_SCHE_BARRIER:\n+      emit_insn (gen_blockage ());\n+      return target;\n     case NDS32_BUILTIN_SCW:\n       return nds32_expand_scw_builtin (CODE_FOR_unspec_volatile_scw,\n \t\t\t\t       exp, target);\n@@ -578,6 +743,15 @@ nds32_expand_builtin_impl (tree exp,\n     if (d->code == fcode)\n       return nds32_expand_binop_builtin (d->icode, exp, target, d->return_p);\n \n+  for (i = 0, d = bdesc_2argimm; i < ARRAY_SIZE (bdesc_2argimm); i++, d++)\n+    if (d->code == fcode)\n+      return nds32_expand_binopimm_builtin (d->icode, exp, target,\n+\t\t\t\t\t    d->return_p, d->name);\n+\n+  for (i = 0, d = bdesc_3arg; i < ARRAY_SIZE (bdesc_3arg); i++, d++)\n+    if (d->code == fcode)\n+      return nds32_expand_triop_builtin (d->icode, exp, target, d->return_p);\n+\n   for (i = 0, d = bdesc_load; i < ARRAY_SIZE (bdesc_load); i++, d++)\n     if (d->code == fcode)\n       return nds32_expand_builtin_load (d->icode, exp, target);\n@@ -702,6 +876,63 @@ nds32_init_builtins_impl (void)\n   ADD_NDS32_BUILTIN3 (\"cctl_idx_write\", void, integer, unsigned, unsigned,\n \t\t      CCTL_IDX_WRITE);\n \n+  /* Performance Extension  */\n+  ADD_NDS32_BUILTIN1 (\"pe_abs\", integer, integer, ABS);\n+  ADD_NDS32_BUILTIN2 (\"pe_ave\", integer, integer, integer, AVE);\n+  ADD_NDS32_BUILTIN2 (\"pe_bclr\", unsigned, unsigned, unsigned, BCLR);\n+  ADD_NDS32_BUILTIN2 (\"pe_bset\", unsigned, unsigned, unsigned, BSET);\n+  ADD_NDS32_BUILTIN2 (\"pe_btgl\", unsigned, unsigned, unsigned, BTGL);\n+  ADD_NDS32_BUILTIN2 (\"pe_btst\", unsigned, unsigned, unsigned, BTST);\n+  ADD_NDS32_BUILTIN2 (\"pe_clip\", unsigned, integer, unsigned, CLIP);\n+  ADD_NDS32_BUILTIN2 (\"pe_clips\", integer, integer, unsigned, CLIPS);\n+  ADD_NDS32_BUILTIN1 (\"pe_clz\", unsigned, unsigned, CLZ);\n+  ADD_NDS32_BUILTIN1 (\"pe_clo\", unsigned, unsigned, CLO);\n+\n+  /* Performance Extension 2  */\n+  ADD_NDS32_BUILTIN3 (\"pe2_bse\", void, ptr_uint, unsigned, ptr_uint, BSE);\n+  ADD_NDS32_BUILTIN3 (\"pe2_bsp\", void, ptr_uint, unsigned, ptr_uint, BSP);\n+  ADD_NDS32_BUILTIN2 (\"pe2_pbsad\", unsigned, unsigned, unsigned, PBSAD);\n+  ADD_NDS32_BUILTIN3 (\"pe2_pbsada\", unsigned, unsigned, unsigned, unsigned,\n+\t\t      PBSADA);\n+\n+  /* String Extension  */\n+  ADD_NDS32_BUILTIN2 (\"se_ffb\", integer, unsigned, unsigned, FFB);\n+  ADD_NDS32_BUILTIN2 (\"se_ffmism\", integer, unsigned, unsigned, FFMISM);\n+  ADD_NDS32_BUILTIN2 (\"se_flmism\", integer, unsigned, unsigned, FLMISM);\n+\n+\n+  /* ROTR  */\n+  ADD_NDS32_BUILTIN2 (\"rotr\", unsigned, unsigned, unsigned, ROTR);\n+\n+  /* Swap  */\n+  ADD_NDS32_BUILTIN1 (\"wsbh\", unsigned, unsigned, WSBH);\n+\n+  /* System  */\n+  ADD_NDS32_BUILTIN2 (\"svs\", unsigned, integer, integer, SVS);\n+  ADD_NDS32_BUILTIN2 (\"sva\", unsigned, integer, integer, SVA);\n+  ADD_NDS32_BUILTIN1 (\"jr_itoff\", void, unsigned, JR_ITOFF);\n+  ADD_NDS32_BUILTIN1 (\"jr_toff\", void, unsigned, JR_TOFF);\n+  ADD_NDS32_BUILTIN1 (\"jral_iton\", void, unsigned, JRAL_ITON);\n+  ADD_NDS32_BUILTIN1 (\"jral_ton\", void, unsigned, JRAL_TON);\n+  ADD_NDS32_BUILTIN1 (\"ret_itoff\", void, unsigned, RET_ITOFF);\n+  ADD_NDS32_BUILTIN1 (\"ret_toff\", void, unsigned, RET_TOFF);\n+  ADD_NDS32_BUILTIN0 (\"standby_no_wake_grant\", void, STANDBY_NO_WAKE_GRANT);\n+  ADD_NDS32_BUILTIN0 (\"standby_wake_grant\", void, STANDBY_WAKE_GRANT);\n+  ADD_NDS32_BUILTIN0 (\"standby_wait_done\", void, STANDBY_WAKE_DONE);\n+  ADD_NDS32_BUILTIN1 (\"break\", void, unsigned, BREAK);\n+  ADD_NDS32_BUILTIN1 (\"syscall\", void, unsigned, SYSCALL);\n+  ADD_NDS32_BUILTIN0 (\"nop\", void, NOP);\n+  ADD_NDS32_BUILTIN0 (\"get_current_sp\", unsigned, GET_CURRENT_SP);\n+  ADD_NDS32_BUILTIN1 (\"set_current_sp\", void, unsigned, SET_CURRENT_SP);\n+  ADD_NDS32_BUILTIN2 (\"teqz\", void, unsigned, unsigned, TEQZ);\n+  ADD_NDS32_BUILTIN2 (\"tnez\", void, unsigned, unsigned, TNEZ);\n+  ADD_NDS32_BUILTIN1 (\"trap\", void, unsigned, TRAP);\n+  ADD_NDS32_BUILTIN0 (\"return_address\", unsigned, RETURN_ADDRESS);\n+  ADD_NDS32_BUILTIN0 (\"setend_big\", void, SETEND_BIG);\n+  ADD_NDS32_BUILTIN0 (\"setend_little\", void, SETEND_LITTLE);\n+\n+  /* Schedule Barrier */\n+  ADD_NDS32_BUILTIN0 (\"schedule_barrier\", void, SCHE_BARRIER);\n   /* Unaligned Load/Store  */\n   ADD_NDS32_BUILTIN1 (\"unaligned_load_hw\", short_unsigned, ptr_ushort,\n \t\t      UALOAD_HW);"}, {"sha": "52437a47e61ff41ea284077fc90346f4bdc4fc05", "filename": "gcc/config/nds32/nds32-intrinsic.md", "status": "modified", "additions": 361, "deletions": 0, "changes": 361, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2feae6cdf25ad2d1cb2fc48ab000b4ca4c5ec793/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2feae6cdf25ad2d1cb2fc48ab000b4ca4c5ec793/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.md?ref=2feae6cdf25ad2d1cb2fc48ab000b4ca4c5ec793", "patch": "@@ -339,6 +339,190 @@\n   \"cctl\\t%1, %R0\"\n   [(set_attr \"type\" \"mmu\")]\n )\n+\n+\n+;; Performance Extension\n+\n+(define_expand \"unspec_ave\"\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:SI 1 \"register_operand\" \"\")\n+   (match_operand:SI 2 \"register_operand\" \"\")]\n+  \"\"\n+{\n+  emit_insn (gen_ave (operands[0], operands[1], operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"unspec_bclr\"\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:SI 1 \"register_operand\" \"\")\n+   (match_operand:SI 2 \"immediate_operand\" \"\")]\n+  \"\"\n+{\n+  unsigned HOST_WIDE_INT val = ~(1u << UINTVAL (operands[2]));\n+  emit_insn (gen_andsi3 (operands[0], operands[1], gen_int_mode (val, SImode)));\n+  DONE;\n+})\n+\n+(define_expand \"unspec_bset\"\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:SI 1 \"register_operand\" \"\")\n+   (match_operand:SI 2 \"immediate_operand\" \"\")]\n+  \"\"\n+{\n+  unsigned HOST_WIDE_INT val = 1u << UINTVAL (operands[2]);\n+  emit_insn (gen_iorsi3 (operands[0], operands[1], gen_int_mode (val, SImode)));\n+  DONE;\n+})\n+\n+(define_expand \"unspec_btgl\"\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:SI 1 \"register_operand\" \"\")\n+   (match_operand:SI 2 \"immediate_operand\" \"\")]\n+  \"\"\n+{\n+  unsigned HOST_WIDE_INT val = 1u << UINTVAL (operands[2]);\n+  emit_insn (gen_xorsi3 (operands[0], operands[1], gen_int_mode (val, SImode)));\n+  DONE;\n+})\n+\n+(define_expand \"unspec_btst\"\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:SI 1 \"register_operand\" \"\")\n+   (match_operand:SI 2 \"immediate_operand\" \"\")]\n+  \"\"\n+{\n+  emit_insn (gen_btst (operands[0], operands[1], operands[2]));\n+  DONE;\n+})\n+\n+(define_insn \"unspec_clip\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t    (match_operand:SI 2 \"immediate_operand\" \"i\")] UNSPEC_CLIP))]\n+  \"\"\n+  \"clip\\t%0, %1, %2\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"length\" \"4\")]\n+)\n+\n+(define_insn \"unspec_clips\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t    (match_operand:SI 2 \"immediate_operand\" \"i\")] UNSPEC_CLIPS))]\n+  \"\"\n+  \"clips\\t%0, %1, %2\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"length\" \"4\")]\n+)\n+\n+(define_insn \"unspec_clo\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")] UNSPEC_CLO))]\n+  \"\"\n+  \"clo\\t%0, %1\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"length\" \"4\")]\n+)\n+\n+(define_insn \"unspec_ssabssi2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ss_abs:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n+  \"\"\n+  \"abs\\t%0, %1\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"length\" \"4\")]\n+)\n+\n+;; Performance extension 2\n+\n+(define_insn \"unspec_pbsad\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t    (match_operand:SI 2 \"register_operand\" \"r\")] UNSPEC_PBSAD))]\n+  \"\"\n+  \"pbsad\\t%0, %1, %2\"\n+  [(set_attr \"type\" \"pbsad\")\n+   (set_attr \"length\"   \"4\")]\n+)\n+\n+(define_insn \"unspec_pbsada\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"0\")\n+\t\t    (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t    (match_operand:SI 3 \"register_operand\" \"r\")] UNSPEC_PBSADA))]\n+  \"\"\n+  \"pbsada\\t%0, %2, %3\"\n+  [(set_attr \"type\" \"pbsada\")\n+   (set_attr \"length\"    \"4\")]\n+)\n+\n+(define_expand \"bse\"\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:SI 1 \"register_operand\" \"\")\n+   (match_operand:SI 2 \"register_operand\" \"\")]\n+  \"\"\n+  {\n+    rtx temp0 = gen_reg_rtx (SImode);\n+    rtx temp2 = gen_reg_rtx (SImode);\n+\n+    emit_move_insn (temp0, gen_rtx_MEM (Pmode, operands[0]));\n+    emit_move_insn (temp2, gen_rtx_MEM (Pmode, operands[2]));\n+    emit_insn (gen_unspec_bse (temp0, operands[1], temp2, temp0, temp2));\n+    emit_move_insn (gen_rtx_MEM (Pmode, operands[0]), temp0);\n+    emit_move_insn (gen_rtx_MEM (Pmode, operands[2]), temp2);\n+    DONE;\n+  }\n+)\n+\n+(define_insn \"unspec_bse\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t    (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t    (match_operand:SI 3 \"register_operand\" \"0\")] UNSPEC_BSE))\n+   (set (match_operand:SI 4 \"register_operand\" \"=2\")\n+\t(unspec:SI [(match_dup 1)\n+\t\t    (match_dup 2)\n+\t\t    (match_dup 0)] UNSPEC_BSE_2))]\n+  \"\"\n+  \"bse\\t%0, %1, %2\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"length\" \"4\")]\n+)\n+\n+(define_expand \"bsp\"\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:SI 1 \"register_operand\" \"\")\n+   (match_operand:SI 2 \"register_operand\" \"\")]\n+  \"\"\n+  {\n+    rtx temp0 = gen_reg_rtx (SImode);\n+    rtx temp2 = gen_reg_rtx (SImode);\n+\n+    emit_move_insn (temp0, gen_rtx_MEM (Pmode, operands[0]));\n+    emit_move_insn (temp2, gen_rtx_MEM (Pmode, operands[2]));\n+    emit_insn (gen_unspec_bsp (temp0, operands[1], temp2, temp0, temp2));\n+    emit_move_insn (gen_rtx_MEM (Pmode, operands[0]), temp0);\n+    emit_move_insn (gen_rtx_MEM (Pmode, operands[2]), temp2);\n+    DONE;\n+  }\n+)\n+\n+(define_insn \"unspec_bsp\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t    (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t    (match_operand:SI 3 \"register_operand\" \"0\")] UNSPEC_BSP))\n+   (set (match_operand:SI 4 \"register_operand\" \"=2\")\n+\t(unspec:SI [(match_dup 1)\n+\t\t    (match_dup 2)\n+\t\t    (match_dup 0)] UNSPEC_BSP_2))]\n+  \"\"\n+  \"bsp\\t%0, %1, %2\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"length\" \"4\")]\n+)\n+\n ;; String Extension\n \n (define_insn \"unspec_ffb\"\n@@ -373,6 +557,183 @@\n    (set_attr \"length\" \"4\")]\n )\n \n+;; System\n+\n+(define_insn \"unspec_sva\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t    (match_operand:SI 2 \"register_operand\" \"r\")] UNSPEC_SVA))]\n+  \"\"\n+  \"sva\\t%0, %1, %2\"\n+  [(set_attr \"type\"    \"alu\")\n+   (set_attr \"length\"    \"4\")]\n+)\n+\n+(define_insn \"unspec_svs\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t    (match_operand:SI 2 \"register_operand\" \"r\")] UNSPEC_SVS))]\n+  \"\"\n+  \"svs\\t%0, %1, %2\"\n+  [(set_attr \"type\"    \"alu\")\n+   (set_attr \"length\"    \"4\")]\n+)\n+\n+(define_insn \"unspec_jr_itoff\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"register_operand\" \"r\")] UNSPEC_VOLATILE_JR_ITOFF)]\n+  \"\"\n+  \"jr.itoff\\t%0\"\n+  [(set_attr \"type\" \"misc\")]\n+)\n+\n+(define_insn \"unspec_jr_toff\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"register_operand\" \"r\")] UNSPEC_VOLATILE_JR_TOFF)]\n+  \"\"\n+  \"jr.toff\\t%0\"\n+  [(set_attr \"type\" \"branch\")]\n+)\n+\n+(define_insn \"unspec_jral_iton\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"register_operand\" \"r\")] UNSPEC_VOLATILE_JRAL_ITON)]\n+  \"\"\n+  \"jral.iton\\t%0\"\n+  [(set_attr \"type\" \"branch\")]\n+)\n+\n+(define_insn \"unspec_jral_ton\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"register_operand\" \"r\")] UNSPEC_VOLATILE_JRAL_TON)]\n+  \"\"\n+  \"jral.ton\\t%0\"\n+  [(set_attr \"type\" \"branch\")]\n+)\n+\n+(define_insn \"unspec_ret_itoff\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"register_operand\" \"r\")] UNSPEC_VOLATILE_RET_ITOFF)]\n+  \"\"\n+  \"ret.itoff\\t%0\"\n+  [(set_attr \"type\" \"branch\")]\n+)\n+\n+(define_insn \"unspec_ret_toff\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"register_operand\" \"r\")] UNSPEC_VOLATILE_RET_TOFF)]\n+  \"\"\n+  \"ret.toff\\t%0\"\n+  [(set_attr \"type\" \"branch\")]\n+)\n+\n+(define_insn \"unspec_standby_no_wake_grant\"\n+  [(unspec_volatile:SI [(const_int 0)] UNSPEC_VOLATILE_STANDBY_NO_WAKE_GRANT)]\n+  \"\"\n+  \"standby\\tno_wake_grant\"\n+  [(set_attr \"type\" \"misc\")]\n+)\n+\n+(define_insn \"unspec_standby_wake_grant\"\n+  [(unspec_volatile:SI [(const_int 0)] UNSPEC_VOLATILE_STANDBY_WAKE_GRANT)]\n+  \"\"\n+  \"standby\\twake_grant\"\n+  [(set_attr \"type\" \"misc\")]\n+)\n+\n+(define_insn \"unspec_standby_wait_done\"\n+  [(unspec_volatile:SI [(const_int 0)] UNSPEC_VOLATILE_STANDBY_WAKE_DONE)]\n+  \"\"\n+  \"standby\\twait_done\"\n+  [(set_attr \"type\" \"misc\")]\n+)\n+\n+(define_insn \"unspec_teqz\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"register_operand\" \"r\")\n+\t\t\t(match_operand:SI 1 \"immediate_operand\" \"i\")] UNSPEC_VOLATILE_TEQZ)]\n+  \"\"\n+  \"teqz\\t%0, %1\"\n+  [(set_attr \"type\" \"misc\")]\n+)\n+\n+(define_insn \"unspec_tnez\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"register_operand\" \"r\")\n+\t\t\t(match_operand:SI 1 \"immediate_operand\" \"i\")] UNSPEC_VOLATILE_TNEZ)]\n+  \"\"\n+  \"tnez\\t%0, %1\"\n+  [(set_attr \"type\" \"misc\")]\n+)\n+\n+(define_insn \"unspec_trap\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"immediate_operand\" \"i\")] UNSPEC_VOLATILE_TRAP)]\n+  \"\"\n+  \"trap\\t%0\"\n+  [(set_attr \"type\" \"misc\")]\n+)\n+\n+(define_insn \"unspec_setend_big\"\n+  [(unspec_volatile:SI [(const_int 0)] UNSPEC_VOLATILE_SETEND_BIG)]\n+  \"\"\n+  \"setend.b\"\n+  [(set_attr \"type\" \"misc\")]\n+)\n+\n+(define_insn \"unspec_setend_little\"\n+  [(unspec_volatile:SI [(const_int 0)] UNSPEC_VOLATILE_SETEND_LITTLE)]\n+  \"\"\n+  \"setend.l\"\n+  [(set_attr \"type\" \"misc\")]\n+)\n+\n+(define_insn \"unspec_break\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"immediate_operand\" \"i\")] UNSPEC_VOLATILE_BREAK)]\n+  \"\"\n+  \"break\\t%0\"\n+  [(set_attr \"type\" \"misc\")]\n+)\n+\n+(define_insn \"unspec_syscall\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"immediate_operand\" \"i\")] UNSPEC_VOLATILE_SYSCALL)]\n+  \"\"\n+  \"syscall\\t%0\"\n+  [(set_attr \"type\" \"misc\")]\n+)\n+\n+(define_insn \"unspec_nop\"\n+  [(unspec_volatile:SI [(const_int 0)] UNSPEC_VOLATILE_NOP)]\n+  \"\"\n+  \"nop\"\n+  [(set_attr \"type\" \"misc\")]\n+)\n+\n+(define_expand \"unspec_get_current_sp\"\n+  [(match_operand:SI 0 \"register_operand\" \"\")]\n+  \"\"\n+{\n+  emit_move_insn (operands[0], gen_rtx_REG (SImode, SP_REGNUM));\n+  DONE;\n+})\n+\n+(define_expand \"unspec_set_current_sp\"\n+  [(match_operand:SI 0 \"register_operand\" \"\")]\n+  \"\"\n+{\n+  emit_move_insn (gen_rtx_REG (SImode, SP_REGNUM), operands[0]);\n+  DONE;\n+})\n+\n+(define_expand \"unspec_return_address\"\n+  [(match_operand:SI 0 \"register_operand\" \"\")]\n+  \"\"\n+{\n+  emit_move_insn (operands[0], gen_rtx_REG (SImode, LP_REGNUM));\n+  DONE;\n+})\n+\n+;; Swap\n+\n+(define_insn \"unspec_wsbh\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")] UNSPEC_WSBH))]\n+  \"\"\n+  \"wsbh\\t%0, %1\"\n+  [(set_attr \"type\"    \"alu\")\n+   (set_attr \"length\"    \"4\")]\n+)\n ;;Unaligned Load/Store\n \n (define_expand \"unaligned_load_hw\""}, {"sha": "f0518e0566dcc9e3834a713d2fcdf39b08ae503e", "filename": "gcc/config/nds32/nds32.h", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2feae6cdf25ad2d1cb2fc48ab000b4ca4c5ec793/gcc%2Fconfig%2Fnds32%2Fnds32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2feae6cdf25ad2d1cb2fc48ab000b4ca4c5ec793/gcc%2Fconfig%2Fnds32%2Fnds32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.h?ref=2feae6cdf25ad2d1cb2fc48ab000b4ca4c5ec793", "patch": "@@ -454,9 +454,51 @@ enum nds32_builtins\n   NDS32_BUILTIN_FCPYSS,\n   NDS32_BUILTIN_FCPYNSD,\n   NDS32_BUILTIN_FCPYSD,\n+  NDS32_BUILTIN_ABS,\n+  NDS32_BUILTIN_AVE,\n+  NDS32_BUILTIN_BCLR,\n+  NDS32_BUILTIN_BSET,\n+  NDS32_BUILTIN_BTGL,\n+  NDS32_BUILTIN_BTST,\n+  NDS32_BUILTIN_CLIP,\n+  NDS32_BUILTIN_CLIPS,\n+  NDS32_BUILTIN_CLZ,\n+  NDS32_BUILTIN_CLO,\n+  NDS32_BUILTIN_MAX,\n+  NDS32_BUILTIN_MIN,\n+  NDS32_BUILTIN_PBSAD,\n+  NDS32_BUILTIN_PBSADA,\n+  NDS32_BUILTIN_BSE,\n+  NDS32_BUILTIN_BSP,\n   NDS32_BUILTIN_FFB,\n   NDS32_BUILTIN_FFMISM,\n   NDS32_BUILTIN_FLMISM,\n+\n+  NDS32_BUILTIN_ROTR,\n+  NDS32_BUILTIN_SVA,\n+  NDS32_BUILTIN_SVS,\n+  NDS32_BUILTIN_WSBH,\n+  NDS32_BUILTIN_JR_ITOFF,\n+  NDS32_BUILTIN_JR_TOFF,\n+  NDS32_BUILTIN_JRAL_ITON,\n+  NDS32_BUILTIN_JRAL_TON,\n+  NDS32_BUILTIN_RET_ITOFF,\n+  NDS32_BUILTIN_RET_TOFF,\n+  NDS32_BUILTIN_STANDBY_NO_WAKE_GRANT,\n+  NDS32_BUILTIN_STANDBY_WAKE_GRANT,\n+  NDS32_BUILTIN_STANDBY_WAKE_DONE,\n+  NDS32_BUILTIN_TEQZ,\n+  NDS32_BUILTIN_TNEZ,\n+  NDS32_BUILTIN_TRAP,\n+  NDS32_BUILTIN_SETEND_BIG,\n+  NDS32_BUILTIN_SETEND_LITTLE,\n+  NDS32_BUILTIN_SYSCALL,\n+  NDS32_BUILTIN_BREAK,\n+  NDS32_BUILTIN_NOP,\n+  NDS32_BUILTIN_SCHE_BARRIER,\n+  NDS32_BUILTIN_GET_CURRENT_SP,\n+  NDS32_BUILTIN_SET_CURRENT_SP,\n+  NDS32_BUILTIN_RETURN_ADDRESS,\n   NDS32_BUILTIN_LLW,\n   NDS32_BUILTIN_LWUP,\n   NDS32_BUILTIN_LBUP,"}, {"sha": "99731fecb7abc2737d606c45bf95e394df199092", "filename": "gcc/config/nds32/nds32.md", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2feae6cdf25ad2d1cb2fc48ab000b4ca4c5ec793/gcc%2Fconfig%2Fnds32%2Fnds32.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2feae6cdf25ad2d1cb2fc48ab000b4ca4c5ec793/gcc%2Fconfig%2Fnds32%2Fnds32.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.md?ref=2feae6cdf25ad2d1cb2fc48ab000b4ca4c5ec793", "patch": "@@ -55,7 +55,7 @@\n \n ;; Insn type, it is used to default other attribute values.\n (define_attr \"type\"\n-  \"unknown,load,store,load_multiple,store_multiple,alu,alu_shift,mul,mac,div,branch,mmu,misc,\\\n+  \"unknown,load,store,load_multiple,store_multiple,alu,alu_shift,pbsad,pbsada,mul,mac,div,branch,mmu,misc,\\\n    falu,fmuls,fmuld,fmacs,fmacd,fdivs,fdivd,fsqrts,fsqrtd,fcmp,fabs,fcpy,fcmov,fmfsr,fmfdr,fmtsr,fmtdr,fload,fstore\"\n   (const_string \"unknown\"))\n \n@@ -1922,16 +1922,31 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"length\" \"4\")])\n \n-(define_insn \"*btst\"\n-  [(set (match_operand:SI 0 \"register_operand\"                   \"=   r\")\n-\t(zero_extract:SI (match_operand:SI 1 \"register_operand\"  \"    r\")\n+(define_insn \"btst\"\n+  [(set (match_operand:SI 0 \"register_operand\"                     \"=   r\")\n+\t(zero_extract:SI (match_operand:SI 1 \"register_operand\"    \"    r\")\n \t\t\t (const_int 1)\n-\t\t\t (match_operand:SI 2 \"immediate_operand\" \" Iu05\")))]\n+\t\t\t (match_operand:SI 2 \"nds32_imm5u_operand\" \" Iu05\")))]\n   \"TARGET_EXT_PERF\"\n   \"btst\\t%0, %1, %2\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"length\" \"4\")])\n \n+(define_insn \"ave\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(truncate:SI\n+\t  (ashiftrt:DI\n+\t    (plus:DI\n+\t      (plus:DI\n+\t\t(sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t(sign_extend:DI (match_operand:SI 2 \"register_operand\" \"r\")))\n+\t      (const_int 1))\n+\t  (const_int 1))))]\n+  \"TARGET_EXT_PERF\"\n+  \"ave\\t%0, %1, %2\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"length\" \"4\")])\n+\n ;; ----------------------------------------------------------------------------\n \n ;; Pseudo NOPs"}, {"sha": "01e1a8e3e600296ba62303229041e983961ea75a", "filename": "gcc/config/nds32/nds32_intrinsic.h", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2feae6cdf25ad2d1cb2fc48ab000b4ca4c5ec793/gcc%2Fconfig%2Fnds32%2Fnds32_intrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2feae6cdf25ad2d1cb2fc48ab000b4ca4c5ec793/gcc%2Fconfig%2Fnds32%2Fnds32_intrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32_intrinsic.h?ref=2feae6cdf25ad2d1cb2fc48ab000b4ca4c5ec793", "patch": "@@ -425,6 +425,22 @@ enum nds32_cctl_idxwrite\n   (__builtin_nds32_swup ((a), (b)))\n #define __nds32__sbup(a, b) \\\n   (__builtin_nds32_sbup ((a), (b)))\n+\n+#define __nds32__mfsr(srname) \\\n+  (__builtin_nds32_mfsr ((srname)))\n+#define __nds32__mfusr(usrname) \\\n+  (__builtin_nds32_mfusr ((usrname)))\n+#define __nds32__mtsr(val, srname) \\\n+  (__builtin_nds32_mtsr ((val), (srname)))\n+#define __nds32__mtsr_isb(val, srname) \\\n+  (__builtin_nds32_mtsr_isb ((val), (srname)))\n+#define __nds32__mtsr_dsb(val, srname) \\\n+  (__builtin_nds32_mtsr_dsb ((val), (srname)))\n+#define __nds32__mtusr(val, usrname) \\\n+  (__builtin_nds32_mtusr ((val), (usrname)))\n+\n+#define __nds32__break(swid) \\\n+  (__builtin_nds32_break(swid))\n #define __nds32__cctlva_lck(subtype, va) \\\n   (__builtin_nds32_cctl_va_lck ((subtype), (va)))\n #define __nds32__cctlidx_wbinval(subtype, idx) \\\n@@ -452,6 +468,96 @@ enum nds32_cctl_idxwrite\n   (__builtin_nds32_msync_store())\n #define __nds32__msync_all() \\\n   (__builtin_nds32_msync_all())\n+#define __nds32__nop() \\\n+  (__builtin_nds32_nop())\n+\n+#define __nds32__standby_wait_done() \\\n+  (__builtin_nds32_standby_wait_done())\n+#define __nds32__standby_no_wake_grant() \\\n+  (__builtin_nds32_standby_no_wake_grant())\n+#define __nds32__standby_wake_grant() \\\n+  (__builtin_nds32_standby_wake_grant())\n+#define __nds32__schedule_barrier() \\\n+  (__builtin_nds32_schedule_barrier())\n+#define __nds32__setend_big() \\\n+  (__builtin_nds32_setend_big())\n+#define __nds32__setend_little() \\\n+  (__builtin_nds32_setend_little())\n+#define __nds32__setgie_en() \\\n+\n+#define __nds32__jr_itoff(a) \\\n+  (__builtin_nds32_jr_itoff ((a)))\n+#define __nds32__jr_toff(a) \\\n+  (__builtin_nds32_jr_toff ((a)))\n+#define __nds32__jral_iton(a) \\\n+  (__builtin_nds32_jral_iton ((a)))\n+#define __nds32__jral_ton(a) \\\n+  (__builtin_nds32_jral_ton ((a)))\n+#define __nds32__ret_itoff(a) \\\n+  (__builtin_nds32_ret_itoff ((a)))\n+#define __nds32__ret_toff(a) \\\n+  (__builtin_nds32_ret_toff ((a)))\n+#define __nds32__svs(a, b) \\\n+  (__builtin_nds32_svs ((a), (b)))\n+#define __nds32__sva(a, b) \\\n+  (__builtin_nds32_sva ((a), (b)))\n+\n+#define __nds32__teqz(a, swid) \\\n+  (__builtin_nds32_teqz ((a), (swid)))\n+#define __nds32__tnez(a, swid) \\\n+  ( __builtin_nds32_tnez ((a), (swid)))\n+#define __nds32__trap(swid) \\\n+  (__builtin_nds32_trap ((swid)))\n+#define __nds32__isync(a) \\\n+  (__builtin_nds32_isync ((a)))\n+#define __nds32__rotr(val, ror) \\\n+  (__builtin_nds32_rotr ((val), (ror)))\n+#define __nds32__wsbh(a) \\\n+  (__builtin_nds32_wsbh ((a)))\n+#define __nds32__syscall(a) \\\n+  (__builtin_nds32_syscall ((a)))\n+#define __nds32__return_address() \\\n+  (__builtin_nds32_return_address())\n+#define __nds32__get_current_sp() \\\n+  (__builtin_nds32_get_current_sp())\n+#define __nds32__set_current_sp(a) \\\n+  (__builtin_nds32_set_current_sp ((a)))\n+#define __nds32__abs(a) \\\n+  (__builtin_nds32_pe_abs ((a)))\n+#define __nds32__ave(a, b) \\\n+  (__builtin_nds32_pe_ave ((a), (b)))\n+#define __nds32__bclr(a, pos) \\\n+  (__builtin_nds32_pe_bclr ((a), (pos)))\n+#define __nds32__bset(a, pos) \\\n+  (__builtin_nds32_pe_bset ((a), (pos)))\n+#define __nds32__btgl(a, pos) \\\n+  (__builtin_nds32_pe_btgl ((a), (pos)))\n+#define __nds32__btst(a, pos) \\\n+  (__builtin_nds32_pe_btst ((a), (pos)))\n+\n+#define __nds32__clip(a, imm) \\\n+  (__builtin_nds32_pe_clip ((a), (imm)))\n+#define __nds32__clips(a, imm) \\\n+  (__builtin_nds32_pe_clips ((a), (imm)))\n+#define __nds32__clz(a) \\\n+  (__builtin_nds32_pe_clz ((a)))\n+#define __nds32__clo(a) \\\n+  (__builtin_nds32_pe_clo ((a)))\n+#define __nds32__bse(r, a, b) \\\n+  (__builtin_nds32_pe2_bse ((r), (a), (b)))\n+#define __nds32__bsp(r, a, b) \\\n+  (__builtin_nds32_pe2_bsp ((r), (a), (b)))\n+#define __nds32__pbsad(a, b) \\\n+  (__builtin_nds32_pe2_pbsad ((a), (b)))\n+#define __nds32__pbsada(acc, a, b) \\\n+  (__builtin_nds32_pe2_pbsada ((acc), (a), (b)))\n+\n+#define __nds32__ffb(a, b) \\\n+  (__builtin_nds32_se_ffb ((a), (b)))\n+#define __nds32__ffmism(a, b) \\\n+  (__builtin_nds32_se_ffmism ((a), (b)))\n+#define __nds32__flmism(a, b) \\\n+  (__builtin_nds32_se_flmism ((a), (b)))\n #define __nds32__fcpynsd(a, b) \\\n   (__builtin_nds32_fcpynsd ((a), (b)))\n #define __nds32__fcpynss(a, b) \\"}]}