{"sha": "5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQzZWJiNzFjYmY5YzZlZDBjZTA0MjMwYTM4NzQ4NWZhNTdlNzFlZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-02-05T17:16:52Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-02-05T17:16:52Z"}, "message": "re PR tree-optimization/79347 (vect_do_peeling is messing up profile)\n\n\tPR tree-ssa/79347\n\t* cfgloopmanip.c (lv_adjust_loop_entry_edge, loop_version): Add\n\tELSE_PROB.\n\t* cfgloopmanip.h (loop_version): Update prototype.\n\t* modulo-sched.c (sms_schedule): Update call of loop_version.\n\t* tree-if-conv.c(version_loop_for_if_conversion): Likewise.\n\t* tree-parloops.c (gen_parallel_loop): Likewise.\n\t* tree-ssa-loop-manip.c (tree_transform_and_unroll_loop): Likewise.\n\t* tree-ssa-loop-split.c (split_loop): Likewise.\n\t* tree-ssa-loop-unswitch.c (tree_unswitch_loop): Likewise.\n\t* tree-vect-loop-manip.c (vect_loop_versioning): Likewise.\n\n\t* gcc.dg/tree-ssa/ifc-10.c: Match for profile mismatches.\n\t* gcc.dg/tree-ssa/ifc-11.c: Match for profile mismatches.\n\t* gcc.dg/tree-ssa/ifc-12.c: Match for profile mismatches.\n\t* gcc.dg/tree-ssa/ifc-20040816-1.c: Match for profile mismatches.\n\t* gcc.dg/tree-ssa/ifc-20040816-2.c: Match for profile mismatches.\n\t* gcc.dg/tree-ssa/ifc-5.c: Match for profile mismatches.\n\t* gcc.dg/tree-ssa/ifc-8.c: Match for profile mismatches.\n\t* gcc.dg/tree-ssa/ifc-9.c: Match for profile mismatches.\n\t* gcc.dg/tree-ssa/ifc-cd.c: Match for profile mismatches.\n\t* gcc.dg/tree-ssa/ifc-pr56541.c: Match for profile mismatches.\n\t* gcc.dg/tree-ssa/ifc-pr68583.c: Match for profile mismatches.\n\t* gcc.dg/tree-ssa/ifc-pr69489-1.c: Match for profile mismatches.\n\t* gcc.dg/tree-ssa/ifc-pr69489-2.c: Match for profile mismatches.\n\nFrom-SVN: r245196", "tree": {"sha": "6a1953407e98b13d0d2602cd0d7e48943219acd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a1953407e98b13d0d2602cd0d7e48943219acd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/comments", "author": null, "committer": null, "parents": [{"sha": "e6b07173d2cb671f6726bf1d00e08b107391fb5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6b07173d2cb671f6726bf1d00e08b107391fb5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6b07173d2cb671f6726bf1d00e08b107391fb5c"}], "stats": {"total": 204, "additions": 176, "deletions": 28}, "files": [{"sha": "a8c6be100e2ec74c72a9d2c098f6573e924c2859", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed", "patch": "@@ -1,3 +1,17 @@\n+2017-02-05  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR tree-ssa/79347\n+\t* cfgloopmanip.c (lv_adjust_loop_entry_edge, loop_version): Add\n+\tELSE_PROB.\n+\t* cfgloopmanip.h (loop_version): Update prototype.\n+\t* modulo-sched.c (sms_schedule): Update call of loop_version.\n+\t* tree-if-conv.c(version_loop_for_if_conversion): Likewise.\n+\t* tree-parloops.c (gen_parallel_loop): Likewise.\n+\t* tree-ssa-loop-manip.c (tree_transform_and_unroll_loop): Likewise.\n+\t* tree-ssa-loop-split.c (split_loop): Likewise.\n+\t* tree-ssa-loop-unswitch.c (tree_unswitch_loop): Likewise.\n+\t* tree-vect-loop-manip.c (vect_loop_versioning): Likewise.\n+\n 2017-02-05  Martin Liska  <mliska@suse.cz>\n \n \tPR bootstrap/78985"}, {"sha": "a0e3e30720e2373ca16edc450a53192c1e779e32", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed", "patch": "@@ -1645,11 +1645,14 @@ force_single_succ_latches (void)\n \t\t\t|\n \t\t\t+---------> [second_head]\n \n-  THEN_PROB is the probability of then branch of the condition.  */\n+  THEN_PROB is the probability of then branch of the condition.\n+  ELSE_PROB is the probability of else branch. Note that they may be both\n+  REG_BR_PROB_BASE when condition is IFN_LOOP_VECTORIZED.  */\n \n static basic_block\n lv_adjust_loop_entry_edge (basic_block first_head, basic_block second_head,\n-\t\t\t   edge e, void *cond_expr, unsigned then_prob)\n+\t\t\t   edge e, void *cond_expr, unsigned then_prob,\n+\t\t\t   unsigned else_prob)\n {\n   basic_block new_head = NULL;\n   edge e1;\n@@ -1668,7 +1671,7 @@ lv_adjust_loop_entry_edge (basic_block first_head, basic_block second_head,\n   e1 = make_edge (new_head, first_head,\n \t\t  current_ir_type () == IR_GIMPLE ? EDGE_TRUE_VALUE : 0);\n   e1->probability = then_prob;\n-  e->probability = REG_BR_PROB_BASE - then_prob;\n+  e->probability = else_prob;\n   e1->count = apply_probability (e->count, e1->probability);\n   e->count = apply_probability (e->count, e->probability);\n \n@@ -1701,7 +1704,8 @@ lv_adjust_loop_entry_edge (basic_block first_head, basic_block second_head,\n struct loop *\n loop_version (struct loop *loop,\n \t      void *cond_expr, basic_block *condition_bb,\n-\t      unsigned then_prob, unsigned then_scale, unsigned else_scale,\n+\t      unsigned then_prob, unsigned else_prob,\n+\t      unsigned then_scale, unsigned else_scale,\n \t      bool place_after)\n {\n   basic_block first_head, second_head;\n@@ -1732,7 +1736,7 @@ loop_version (struct loop *loop,\n \n   /* Split loop entry edge and insert new block with cond expr.  */\n   cond_bb =  lv_adjust_loop_entry_edge (first_head, second_head,\n-\t\t\t\t\tentry, cond_expr, then_prob);\n+\t\t\t\t\tentry, cond_expr, then_prob, else_prob);\n   if (condition_bb)\n     *condition_bb = cond_bb;\n "}, {"sha": "7ad3bf5d7d4d6e154791ad270ab86503e7fe0f6e", "filename": "gcc/cfgloopmanip.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Fcfgloopmanip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Fcfgloopmanip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.h?ref=5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed", "patch": "@@ -58,6 +58,7 @@ basic_block create_preheader (struct loop *, int);\n extern void create_preheaders (int);\n extern void force_single_succ_latches (void);\n struct loop * loop_version (struct loop *, void *,\n-\t\t\t    basic_block *, unsigned, unsigned, unsigned, bool);\n+\t\t\t    basic_block *, unsigned, unsigned,\n+\t\t\t    unsigned, unsigned, bool);\n \n #endif /* GCC_CFGLOOPMANIP_H */"}, {"sha": "270adc5a2008bf9ea3579681d571f4aad1c3635f", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed", "patch": "@@ -1713,7 +1713,8 @@ sms_schedule (void)\n \t\t\t       * REG_BR_PROB_BASE) / 100;\n \n \t      loop_version (loop, comp_rtx, &condition_bb,\n-\t  \t\t    prob, prob, REG_BR_PROB_BASE - prob,\n+\t  \t\t    prob, REG_BR_PROB_BASE - prob,\n+\t\t\t    prob, REG_BR_PROB_BASE - prob,\n \t\t\t    true);\n \t     }\n "}, {"sha": "3214eef3bda15cfa4463b6674a4eb80798f33f32", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed", "patch": "@@ -1,3 +1,20 @@\n+2017-02-05  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR tree-ssa/79347\n+\t* gcc.dg/tree-ssa/ifc-10.c: Match for profile mismatches.\n+\t* gcc.dg/tree-ssa/ifc-11.c: Match for profile mismatches.\n+\t* gcc.dg/tree-ssa/ifc-12.c: Match for profile mismatches.\n+\t* gcc.dg/tree-ssa/ifc-20040816-1.c: Match for profile mismatches.\n+\t* gcc.dg/tree-ssa/ifc-20040816-2.c: Match for profile mismatches.\n+\t* gcc.dg/tree-ssa/ifc-5.c: Match for profile mismatches.\n+\t* gcc.dg/tree-ssa/ifc-8.c: Match for profile mismatches.\n+\t* gcc.dg/tree-ssa/ifc-9.c: Match for profile mismatches.\n+\t* gcc.dg/tree-ssa/ifc-cd.c: Match for profile mismatches.\n+\t* gcc.dg/tree-ssa/ifc-pr56541.c: Match for profile mismatches.\n+\t* gcc.dg/tree-ssa/ifc-pr68583.c: Match for profile mismatches.\n+\t* gcc.dg/tree-ssa/ifc-pr69489-1.c: Match for profile mismatches.\n+\t* gcc.dg/tree-ssa/ifc-pr69489-2.c: Match for profile mismatches.\n+\n 2017-02-05  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \tPR fortran/79344"}, {"sha": "4097145eba680eafc9038bbacdae8d1f38106387", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ifc-10.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-10.c?ref=5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Ofast -fno-split-loops -fdump-tree-ifcvt-stats\" } */\n+/* { dg-options \"-Ofast -fno-split-loops -fdump-tree-ifcvt-stats-blocks-details\" } */\n /* { dg-require-visibility \"\" } */\n \n int b[256] = {0}, y;\n@@ -20,3 +20,11 @@ int foo (int x, int n)\n }\n \n /* { dg-final { scan-tree-dump-times \"Applying if-conversion\" 1 \"ifcvt\" } } */\n+\n+/* We insert into code\n+   if (LOOP_VECTORIZED (...))\n+   which is folded by vectorizer.  Both outgoing edges must have probability\n+   100% so the resulting profile match after folding.  */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum of outgoing probabilities 200.0\" 1 \"ifcvt\" } } */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum of incoming frequencies\" 1 \"ifcvt\" } } */\n+"}, {"sha": "a0333fbb28c1a174fcc79b9e55561317e2fb096d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ifc-11.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-11.c?ref=5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Ofast -fdump-tree-ifcvt-stats\" } */\n+/* { dg-options \"-Ofast -fdump-tree-ifcvt-stats-blocks-details\" } */\n /* { dg-require-visibility \"\" } */\n \n int a[1024] = {0.0};\n@@ -18,3 +18,11 @@ int foo (float *x)\n }\n \n /* { dg-final { scan-tree-dump-times \"Applying if-conversion\" 1 \"ifcvt\" } } */\n+\n+/* We insert into code\n+   if (LOOP_VECTORIZED (...))\n+   which is folded by vectorizer.  Both outgoing edges must have probability\n+   100% so the resulting profile match after folding.  */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum of outgoing probabilities 200.0\" 1 \"ifcvt\" } } */\n+/* Sum is wrong here, but not enough for error to be reported.  */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum of incoming frequencies\" 0 \"ifcvt\" } } */"}, {"sha": "535c1f0eb6cc63642ceea9b1d86a651a0c6c8e13", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ifc-12.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-12.c?ref=5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Ofast -fdump-tree-ifcvt-stats\" } */\n+/* { dg-options \"-Ofast -fdump-tree-ifcvt-stats-blocks-details\" } */\n /* { dg-require-visibility \"\" } */\n \n struct st\n@@ -23,3 +23,12 @@ int foo (int x)\n   return 0;\n }\n /* { dg-final { scan-tree-dump-times \"Applying if-conversion\" 1 \"ifcvt\" } } */\n+\n+/* We insert into code\n+   if (LOOP_VECTORIZED (...))\n+   which is folded by vectorizer.  Both outgoing edges must have probability\n+   100% so the resulting profile match after folding.  */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum of outgoing probabilities 200.0\" 1 \"ifcvt\" } } */\n+/* Sum is wrong here, but not enough for error to be reported.  */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum of incoming frequencies\" 0 \"ifcvt\" } } */\n+"}, {"sha": "8badc762267392cd64e49cd0cd3a854f11ecd413", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ifc-20040816-1.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-20040816-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-20040816-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-20040816-1.c?ref=5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-c -O2 -ftree-vectorize -fdump-tree-ifcvt-stats\" { target *-*-* } } */\n+/* { dg-options \"-c -O2 -ftree-vectorize -fdump-tree-ifcvt-stats-blocks-details\" { target *-*-* } } */\n \n #include <stdarg.h>\n \n@@ -33,3 +33,10 @@ int main1 ()\n \n \n /* { dg-final { scan-tree-dump-times \"Applying if-conversion\" 1 \"ifcvt\" } } */\n+\n+/* We insert into code\n+   if (LOOP_VECTORIZED (...))\n+   which is folded by vectorizer.  Both outgoing edges must have probability\n+   100% so the resulting profile match after folding.  */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum of outgoing probabilities 200.0\" 1 \"ifcvt\" } } */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum of incoming frequencies\" 1 \"ifcvt\" } } */"}, {"sha": "a517f6552e6d43f190a45e5d55070525a88478b2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ifc-20040816-2.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-20040816-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-20040816-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-20040816-2.c?ref=5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-c -O2 -ftree-vectorize -fdump-tree-ifcvt-stats\" { target *-*-* } } */\n+/* { dg-options \"-c -O2 -ftree-vectorize -fdump-tree-ifcvt-stats-blocks-details\" { target *-*-* } } */\n \n void foo(const int * __restrict__ zr_in,\n \t\tconst int * __restrict__ zi_in,\n@@ -37,3 +37,11 @@ void foo(const int * __restrict__ zr_in,\n \n \n /* { dg-final { scan-tree-dump-times \"Applying if-conversion\" 1 \"ifcvt\" } } */\n+\n+/* We insert into code\n+   if (LOOP_VECTORIZED (...))\n+   which is folded by vectorizer.  Both outgoing edges must have probability\n+   100% so the resulting profile match after folding.  */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum of outgoing probabilities 200.0\" 1 \"ifcvt\" } } */\n+/* Sum is wrong here, but not enough for error to be reported.  */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum of incoming frequencies\" 0 \"ifcvt\" } } */"}, {"sha": "58260dd878b5233db126c44f689cfb02a9956a94", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ifc-5.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-5.c?ref=5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-c -O2 -ftree-vectorize -fdump-tree-ifcvt-stats\" { target *-*-* } } */\n+/* { dg-options \"-c -O2 -ftree-vectorize -fdump-tree-ifcvt-stats-blocks-details\" { target *-*-* } } */\n \n void\n dct_unquantize_h263_inter_c (short *block, int n, int qscale, int nCoeffs)\n@@ -21,3 +21,10 @@ dct_unquantize_h263_inter_c (short *block, int n, int qscale, int nCoeffs)\n }\n \n /* { dg-final { scan-tree-dump-times \"Applying if-conversion\" 1 \"ifcvt\" } } */\n+\n+/* We insert into code\n+   if (LOOP_VECTORIZED (...))\n+   which is folded by vectorizer.  Both outgoing edges must have probability\n+   100% so the resulting profile match after folding.  */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum of outgoing probabilities 200.0\" 1 \"ifcvt\" } } */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum of incoming frequencies\" 1 \"ifcvt\" } } */"}, {"sha": "6c26c209212898e63a7cfc01d932284a5574a8b5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ifc-8.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-8.c?ref=5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed", "patch": "@@ -1,6 +1,6 @@\n \n /* { dg-do compile } */\n-/* { dg-options \"-Ofast -fdump-tree-ifcvt-details -ftree-loop-if-convert-stores\" } */\n+/* { dg-options \"-Ofast -fdump-tree-ifcvt-details-blocks -ftree-loop-if-convert-stores\" } */\n /* { dg-require-visibility \"\" } */\n \n #define LEN 4096\n@@ -16,3 +16,11 @@ void test ()\n }\n \n /* { dg-final { scan-tree-dump-times \"Applying if-conversion\" 1 \"ifcvt\" } } */\n+\n+/* We insert into code\n+   if (LOOP_VECTORIZED (...))\n+   which is folded by vectorizer.  Both outgoing edges must have probability\n+   100% so the resulting profile match after folding.  */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum of outgoing probabilities 200.0\" 1 \"ifcvt\" } } */\n+/* Sum is wrong here, but not enough for error to be reported.  */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum of incoming frequencies\" 0 \"ifcvt\" } } */"}, {"sha": "789cb6ae23a0f0f84b12b4cba7389e98da5af9e6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ifc-9.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-9.c?ref=5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Ofast -fno-split-loops -fdump-tree-ifcvt-stats\" } */\n+/* { dg-options \"-Ofast -fno-split-loops -fdump-tree-ifcvt-stats-blocks-details\" } */\n /* { dg-require-visibility \"\" } */\n \n extern int b[256], y;\n@@ -20,3 +20,10 @@ int foo (int x, int n)\n }\n \n /* { dg-final { scan-tree-dump-times \"Applying if-conversion\" 1 \"ifcvt\" } } */\n+\n+/* We insert into code\n+   if (LOOP_VECTORIZED (...))\n+   which is folded by vectorizer.  Both outgoing edges must have probability\n+   100% so the resulting profile match after folding.  */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum of outgoing probabilities 200.0\" 1 \"ifcvt\" } } */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum of incoming frequencies\" 1 \"ifcvt\" } } */"}, {"sha": "11e142af321d9688df2af35db88660a67ed85e63", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ifc-cd.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-cd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-cd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-cd.c?ref=5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -fdump-tree-ifcvt-details -ftree-loop-if-convert-stores\" } */\n+/* { dg-options \"-O3 -fdump-tree-ifcvt-details-blocks-details -ftree-loop-if-convert-stores\" } */\n \n void foo (int *x1, int *x2, int *x3, int *x4, int *y)\n {\n@@ -26,3 +26,11 @@ void foo (int *x1, int *x2, int *x3, int *x4, int *y)\n }\n \n /* { dg-final { scan-tree-dump-times \"Use predicate of bb\" 4 \"ifcvt\" } } */\n+\n+/* We insert into code\n+   if (LOOP_VECTORIZED (...))\n+   which is folded by vectorizer.  Both outgoing edges must have probability\n+   100% so the resulting profile match after folding.  */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum of outgoing probabilities 200.0\" 1 \"ifcvt\" } } */\n+/* Sum is wrong here, but not enough for error to be reported.  */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum of incoming frequencies\" 0 \"ifcvt\" } } */"}, {"sha": "9682fbc15df8f36aca5a6a689cfbed1b04f33420", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ifc-pr56541.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-pr56541.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-pr56541.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-pr56541.c?ref=5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -fdump-tree-ifcvt-stats\" } */\n+/* { dg-options \"-O3 -fdump-tree-ifcvt-stats-blocks-details\" } */\n \n float a,b,c,d;\n \n@@ -23,3 +23,11 @@ void foo()\n }\n \n /* { dg-final { scan-tree-dump-times \"Applying if-conversion\" 1 \"ifcvt\" } } */\n+\n+/* We insert into code\n+   if (LOOP_VECTORIZED (...))\n+   which is folded by vectorizer.  Both outgoing edges must have probability\n+   100% so the resulting profile match after folding.  */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum of outgoing probabilities 200.0\" 1 \"ifcvt\" } } */\n+/* Sum is wrong here, but not enough for error to be reported.  */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum of incoming frequencies\" 0 \"ifcvt\" } } */"}, {"sha": "b128deb4a21b46e47d9229f040bcdea48ed9f6d2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ifc-pr68583.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-pr68583.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-pr68583.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-pr68583.c?ref=5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -fdump-tree-ifcvt\" } */\n+/* { dg-options \"-O3 -fdump-tree-ifcvt-blocks-details\" } */\n \n void foo (long *a)\n {\n@@ -21,3 +21,10 @@ void foo (long *a)\n }\n \n /* { dg-final { scan-tree-dump \"Applying if-conversion\" \"ifcvt\" } } */\n+/* We insert into code\n+   if (LOOP_VECTORIZED (...))\n+   which is folded by vectorizer.  Both outgoing edges must have probability\n+   100% so the resulting profile match after folding.  */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum of outgoing probabilities 200.0\" 1 \"ifcvt\" } } */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum of incoming frequencies\" 1 \"ifcvt\" } } */\n+"}, {"sha": "3ba7de5e6a5d42fda54e97b7f743b9e0aed81586", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ifc-pr69489-1.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-pr69489-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-pr69489-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-pr69489-1.c?ref=5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-ifcvt-stats\" { target *-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-ifcvt-stats-blocks-details\" { target *-*-* } } */\n \n void foo (int a[], int b[])\n {\n@@ -14,3 +14,11 @@ void foo (int a[], int b[])\n }\n \n /* { dg-final { scan-tree-dump-times \"Applying if-conversion\" 1 \"ifcvt\" } } */\n+\n+/* We insert into code\n+   if (LOOP_VECTORIZED (...))\n+   which is folded by vectorizer.  Both outgoing edges must have probability\n+   100% so the resulting profile match after folding.  */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum of outgoing probabilities 200.0\" 1 \"ifcvt\" } } */\n+/* Sum is wrong here, but not enough for error to be reported.  */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum of incoming frequencies\" 0 \"ifcvt\" } } */"}, {"sha": "07589fd7928242e11d8664b6820af8e9b55dc363", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ifc-pr69489-2.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-pr69489-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-pr69489-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-pr69489-2.c?ref=5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-S -O2 -ftree-vectorize -fdump-tree-ifcvt-stats\" { target *-*-* } } */\n+/* { dg-options \"-S -O2 -ftree-vectorize -fdump-tree-ifcvt-stats-blocks-details\" { target *-*-* } } */\n \n double\n foo (const char *u, const char *v, long n)\n@@ -15,3 +15,10 @@ foo (const char *u, const char *v, long n)\n }\n \n /* { dg-final { scan-tree-dump-times \"Applying if-conversion\" 1 \"ifcvt\" } } */\n+\n+/* We insert into code\n+   if (LOOP_VECTORIZED (...))\n+   which is folded by vectorizer.  Both outgoing edges must have probability\n+   100% so the resulting profile match after folding.  */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum of outgoing probabilities 200.0\" 1 \"ifcvt\" } } */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum of incoming frequencies\" 1 \"ifcvt\" } } */"}, {"sha": "eb637952e22d504f6fe4e166163c1b76b3488bcc", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed", "patch": "@@ -2533,7 +2533,11 @@ combine_blocks (struct loop *loop)\n    will be if-converted, the new copy of the loop will not,\n    and the LOOP_VECTORIZED internal call will be guarding which\n    loop to execute.  The vectorizer pass will fold this\n-   internal call into either true or false.  */\n+   internal call into either true or false. \n+\n+   Note that this function intentionally invalidates profile.  Both edges\n+   out of LOOP_VECTORIZED must have 100% probability so the profile remains\n+   consistent after the condition is folded in the vectorizer.  */\n \n static struct loop *\n version_loop_for_if_conversion (struct loop *loop)\n@@ -2557,9 +2561,11 @@ version_loop_for_if_conversion (struct loop *loop)\n     saved_preds[i] = ifc_bbs[i]->aux;\n \n   initialize_original_copy_tables ();\n+  /* At this point we invalidate porfile confistency until IFN_LOOP_VECTORIZED\n+     is re-merged in the vectorizer.  */\n   new_loop = loop_version (loop, cond, &cond_bb,\n \t\t\t   REG_BR_PROB_BASE, REG_BR_PROB_BASE,\n-\t\t\t   REG_BR_PROB_BASE, true);\n+\t\t\t   REG_BR_PROB_BASE, REG_BR_PROB_BASE, true);\n   free_original_copy_tables ();\n \n   for (unsigned i = 0; i < save_length; i++)"}, {"sha": "739301140f0a9db04ae3d61af0eb48d4e39bb5e4", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed", "patch": "@@ -2353,7 +2353,8 @@ gen_parallel_loop (struct loop *loop,\n       /* We assume that the loop usually iterates a lot.  */\n       prob = 4 * REG_BR_PROB_BASE / 5;\n       loop_version (loop, many_iterations_cond, NULL,\n-\t\t    prob, prob, REG_BR_PROB_BASE - prob, true);\n+\t\t    prob, REG_BR_PROB_BASE - prob,\n+\t\t    prob, REG_BR_PROB_BASE - prob, true);\n       update_ssa (TODO_update_ssa);\n       free_original_copy_tables ();\n     }"}, {"sha": "43df29c5415aa4f11be80ec71fdd052a318ccc66", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed", "patch": "@@ -1202,7 +1202,8 @@ tree_transform_and_unroll_loop (struct loop *loop, unsigned factor,\n   scale_rest = REG_BR_PROB_BASE;\n \n   new_loop = loop_version (loop, enter_main_cond, NULL,\n-\t\t\t   prob_entry, scale_unrolled, scale_rest, true);\n+\t\t\t   prob_entry, REG_BR_PROB_BASE - prob_entry,\n+\t\t\t   scale_unrolled, scale_rest, true);\n   gcc_assert (new_loop != NULL);\n   update_ssa (TODO_update_ssa);\n "}, {"sha": "39bffc4ef17e44786745f48702bb34bce9caa2e6", "filename": "gcc/tree-ssa-loop-split.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftree-ssa-loop-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftree-ssa-loop-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-split.c?ref=5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed", "patch": "@@ -562,7 +562,8 @@ split_loop (struct loop *loop1, struct tree_niter_desc *niter)\n \tbasic_block cond_bb;\n \tstruct loop *loop2 = loop_version (loop1, cond, &cond_bb,\n \t\t\t\t\t   REG_BR_PROB_BASE, REG_BR_PROB_BASE,\n-\t\t\t\t\t   REG_BR_PROB_BASE, true);\n+\t\t\t\t\t   REG_BR_PROB_BASE, REG_BR_PROB_BASE,\n+\t\t\t\t\t   true);\n \tgcc_assert (loop2);\n \tupdate_ssa (TODO_update_ssa);\n "}, {"sha": "1d0305a2a8bfec119e6a51ad9631363d00fcd1ba", "filename": "gcc/tree-ssa-loop-unswitch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftree-ssa-loop-unswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftree-ssa-loop-unswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-unswitch.c?ref=5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed", "patch": "@@ -493,7 +493,7 @@ tree_unswitch_loop (struct loop *loop,\n   extract_true_false_edges_from_block (unswitch_on, &edge_true, &edge_false);\n   prob_true = edge_true->probability;\n   return loop_version (loop, unshare_expr (cond),\n-\t\t       NULL, prob_true, prob_true,\n+\t\t       NULL, prob_true, REG_BR_PROB_BASE - prob_true, prob_true,\n \t\t       REG_BR_PROB_BASE - prob_true, false);\n }\n "}, {"sha": "f29449c37fdfc272dd2a8ab3ff027d0b229f0b73", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=5d3ebb71cbf9c6ed0ce04230a387485fa57e71ed", "patch": "@@ -2319,7 +2319,8 @@ vect_loop_versioning (loop_vec_info loop_vinfo,\n \n       /* We don't want to scale SCALAR_LOOP's frequencies, we need to\n \t scale LOOP's frequencies instead.  */\n-      nloop = loop_version (scalar_loop, cond_expr, &condition_bb, prob,\n+      nloop = loop_version (scalar_loop, cond_expr, &condition_bb,\n+\t\t\t    prob, REG_BR_PROB_BASE - prob,\n \t\t\t    REG_BR_PROB_BASE, REG_BR_PROB_BASE - prob, true);\n       scale_loop_frequencies (loop, prob, REG_BR_PROB_BASE);\n       /* CONDITION_BB was created above SCALAR_LOOP's preheader,\n@@ -2348,7 +2349,8 @@ vect_loop_versioning (loop_vec_info loop_vinfo,\n     }\n   else\n     nloop = loop_version (loop, cond_expr, &condition_bb,\n-\t\t\t  prob, prob, REG_BR_PROB_BASE - prob, true);\n+\t\t\t  prob, REG_BR_PROB_BASE - prob,\n+\t\t\t  prob, REG_BR_PROB_BASE - prob, true);\n \n   if (version_niter)\n     {"}]}