{"sha": "4b53c50816e4bdebf791d0f93e51871ef5314b0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI1M2M1MDgxNmU0YmRlYmY3OTFkMGY5M2U1MTg3MWVmNTMxNGIwZQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2006-12-06T12:45:36Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2006-12-06T12:45:36Z"}, "message": "bfin.c (bfin_rtx_costs): Add a number of new cases, tweak old ones.\n\n\t* config/bfin/bfin.c (bfin_rtx_costs): Add a number of new cases, tweak\n\told ones.\n\nFrom-SVN: r119579", "tree": {"sha": "471be37f24d7e75469bbbcfa03860e79cd3ae3fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/471be37f24d7e75469bbbcfa03860e79cd3ae3fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b53c50816e4bdebf791d0f93e51871ef5314b0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b53c50816e4bdebf791d0f93e51871ef5314b0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b53c50816e4bdebf791d0f93e51871ef5314b0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b53c50816e4bdebf791d0f93e51871ef5314b0e/comments", "author": null, "committer": null, "parents": [{"sha": "3a7f50dc494a35263f4efd8dbdd2d992902d4308", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a7f50dc494a35263f4efd8dbdd2d992902d4308", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a7f50dc494a35263f4efd8dbdd2d992902d4308"}], "stats": {"total": 146, "additions": 131, "deletions": 15}, "files": [{"sha": "4c41bcd0f8c494366cb590ad650f89806abd3cde", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b53c50816e4bdebf791d0f93e51871ef5314b0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b53c50816e4bdebf791d0f93e51871ef5314b0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b53c50816e4bdebf791d0f93e51871ef5314b0e", "patch": "@@ -1,3 +1,8 @@\n+2006-12-06  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* config/bfin/bfin.c (bfin_rtx_costs): Add a number of new cases, tweak\n+\told ones.\n+\n 2006-12-06  Diego Novillo  <dnovillo@redhat.com>\n \n \t* gdbinit.in: Set complaints to 0."}, {"sha": "48fcbd131496d5b05b786aa0d90167813c6a8b29", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 126, "deletions": 15, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b53c50816e4bdebf791d0f93e51871ef5314b0e/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b53c50816e4bdebf791d0f93e51871ef5314b0e/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=4b53c50816e4bdebf791d0f93e51871ef5314b0e", "patch": "@@ -2474,6 +2474,7 @@ static bool\n bfin_rtx_costs (rtx x, int code, int outer_code, int *total)\n {\n   int cost2 = COSTS_N_INSNS (1);\n+  rtx op0, op1;\n \n   switch (code)\n     {\n@@ -2507,43 +2508,153 @@ bfin_rtx_costs (rtx x, int code, int outer_code, int *total)\n       return true;\n \n     case PLUS:\n-      if (GET_MODE (x) == Pmode)\n+      op0 = XEXP (x, 0);\n+      op1 = XEXP (x, 1);\n+      if (GET_MODE (x) == SImode)\n \t{\n-\t  if (GET_CODE (XEXP (x, 0)) == MULT\n-\t      && GET_CODE (XEXP (XEXP (x, 0), 1)) == CONST_INT)\n+\t  if (GET_CODE (op0) == MULT\n+\t      && GET_CODE (XEXP (op0, 1)) == CONST_INT)\n \t    {\n-\t      HOST_WIDE_INT val = INTVAL (XEXP (XEXP (x, 0), 1));\n+\t      HOST_WIDE_INT val = INTVAL (XEXP (op0, 1));\n \t      if (val == 2 || val == 4)\n \t\t{\n \t\t  *total = cost2;\n-\t\t  *total += rtx_cost (XEXP (XEXP (x, 0), 0), outer_code);\n-\t\t  *total += rtx_cost (XEXP (x, 1), outer_code);\n+\t\t  *total += rtx_cost (XEXP (op0, 0), outer_code);\n+\t\t  *total += rtx_cost (op1, outer_code);\n \t\t  return true;\n \t\t}\n \t    }\n+\t  *total = cost2;\n+\t  if (GET_CODE (op0) != REG\n+\t      && (GET_CODE (op0) != SUBREG || GET_CODE (SUBREG_REG (op0)) != REG))\n+\t    *total += rtx_cost (op0, SET);\n+#if 0 /* We'd like to do this for accuracy, but it biases the loop optimizer\n+\t towards creating too many induction variables.  */\n+\t  if (!reg_or_7bit_operand (op1, SImode))\n+\t    *total += rtx_cost (op1, SET);\n+#endif\n \t}\n-\n-      /* fall through */\n+      else if (GET_MODE (x) == DImode)\n+\t{\n+\t  *total = 6 * cost2;\n+\t  if (GET_CODE (op1) != CONST_INT\n+\t      || !CONST_7BIT_IMM_P (INTVAL (op1)))\n+\t    *total += rtx_cost (op1, PLUS);\n+\t  if (GET_CODE (op0) != REG\n+\t      && (GET_CODE (op0) != SUBREG || GET_CODE (SUBREG_REG (op0)) != REG))\n+\t    *total += rtx_cost (op0, PLUS);\n+\t}\n+      return true;\n \n     case MINUS:\n+      if (GET_MODE (x) == DImode)\n+\t*total = 6 * cost2;\n+      else\n+\t*total = cost2;\n+      return true;\n+      \n     case ASHIFT: \n     case ASHIFTRT:\n     case LSHIFTRT:\n       if (GET_MODE (x) == DImode)\n \t*total = 6 * cost2;\n-      return false;\n+      else\n+\t*total = cost2;\n+\n+      op0 = XEXP (x, 0);\n+      op1 = XEXP (x, 1);\n+      if (GET_CODE (op0) != REG\n+\t  && (GET_CODE (op0) != SUBREG || GET_CODE (SUBREG_REG (op0)) != REG))\n+\t*total += rtx_cost (op0, code);\n+\n+      return true;\n \t  \n-    case AND:\n     case IOR:\n+    case AND:\n     case XOR:\n+      op0 = XEXP (x, 0);\n+      op1 = XEXP (x, 1);\n+\n+      /* Handle special cases of IOR: rotates, ALIGN insns, movstricthi_high.  */\n+      if (code == IOR)\n+\t{\n+\t  if ((GET_CODE (op0) == LSHIFTRT && GET_CODE (op1) == ASHIFT)\n+\t      || (GET_CODE (op0) == ASHIFT && GET_CODE (op1) == ZERO_EXTEND)\n+\t      || (GET_CODE (op0) == ASHIFT && GET_CODE (op1) == LSHIFTRT)\n+\t      || (GET_CODE (op0) == AND && GET_CODE (op1) == CONST_INT))\n+\t    {\n+\t      *total = cost2;\n+\t      return true;\n+\t    }\n+\t}\n+\n+      if (GET_CODE (op0) != REG\n+\t  && (GET_CODE (op0) != SUBREG || GET_CODE (SUBREG_REG (op0)) != REG))\n+\t*total += rtx_cost (op0, code);\n+\n       if (GET_MODE (x) == DImode)\n-\t*total = 2 * cost2;\n-      return false;\n+\t{\n+\t  *total = 2 * cost2;\n+\t  return true;\n+\t}\n+      *total = cost2;\n+      if (GET_MODE (x) != SImode)\n+\treturn true;\n+\n+      if (code == AND)\n+\t{\n+\t  if (! rhs_andsi3_operand (XEXP (x, 1), SImode))\n+\t    *total += rtx_cost (XEXP (x, 1), code);\n+\t}\n+      else\n+\t{\n+\t  if (! regorlog2_operand (XEXP (x, 1), SImode))\n+\t    *total += rtx_cost (XEXP (x, 1), code);\n+\t}\n+\n+      return true;\n+\n+    case ZERO_EXTRACT:\n+    case SIGN_EXTRACT:\n+      if (outer_code == SET\n+\t  && XEXP (x, 1) == const1_rtx\n+\t  && GET_CODE (XEXP (x, 2)) == CONST_INT)\n+\t{\n+\t  *total = 2 * cost2;\n+\t  return true;\n+\t}\n+      /* fall through */\n+\n+    case SIGN_EXTEND:\n+    case ZERO_EXTEND:\n+      *total = cost2;\n+      return true;\n \n     case MULT:\n-      if (GET_MODE_SIZE (GET_MODE (x)) <= UNITS_PER_WORD)\n-\t*total = COSTS_N_INSNS (3);\n-      return false;\n+\t{\n+\t  op0 = XEXP (x, 0);\n+\t  op1 = XEXP (x, 1);\n+\t  if (GET_CODE (op0) == GET_CODE (op1)\n+\t      && (GET_CODE (op0) == ZERO_EXTEND\n+\t\t  || GET_CODE (op0) == SIGN_EXTEND))\n+\t    {\n+\t      *total = COSTS_N_INSNS (1);\n+\t      op0 = XEXP (op0, 0);\n+\t      op1 = XEXP (op1, 0);\n+\t    }\n+\t  else if (optimize_size)\n+\t    *total = COSTS_N_INSNS (1);\n+\t  else\n+\t    *total = COSTS_N_INSNS (3);\n+\n+\t  if (GET_CODE (op0) != REG\n+\t      && (GET_CODE (op0) != SUBREG || GET_CODE (SUBREG_REG (op0)) != REG))\n+\t    *total += rtx_cost (op0, MULT);\n+\t  if (GET_CODE (op1) != REG\n+\t      && (GET_CODE (op1) != SUBREG || GET_CODE (SUBREG_REG (op1)) != REG))\n+\t    *total += rtx_cost (op1, MULT);\n+\t}\n+      return true;\n \n     case UDIV:\n     case UMOD:"}]}