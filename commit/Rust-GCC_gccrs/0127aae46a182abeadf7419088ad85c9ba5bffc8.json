{"sha": "0127aae46a182abeadf7419088ad85c9ba5bffc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDEyN2FhZTQ2YTE4MmFiZWFkZjc0MTkwODhhZDg1YzliYTViZmZjOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-10-15T10:39:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-10-15T10:39:59Z"}, "message": "tree-streamer-out.c (streamer_pack_tree_bitfields): Back BINFO_BASE_ACCESSES and CONSTRUCTOR lengths here.\n\n2012-10-15  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-streamer-out.c (streamer_pack_tree_bitfields): Back\n\tBINFO_BASE_ACCESSES and CONSTRUCTOR lengths here.\n\t(streamer_write_chain): Write TREE_CHAIN as null-terminated list.\n\t(write_ts_exp_tree_pointers): Adjust.\n\t(write_ts_binfo_tree_pointers): Likewise.\n\t(write_ts_constructor_tree_pointers): Likewise.\n\t* tree-streamer-in.c (streamer_read_chain): Read TREE_CHAIN as\n\tnull-terminated list.\n\t(unpack_value_fields): Unpack BINFO_BASE_ACCESSES and\n\tCONSTRUCTOR lengths and materialize the arrays.\n\t(lto_input_ts_exp_tree_pointers): Adjust.\n\t(lto_input_ts_binfo_tree_pointers): Likewise.\n\t(lto_input_ts_constructor_tree_pointers): Likewise.\n\nFrom-SVN: r192451", "tree": {"sha": "4f2dbf465ecdb87bdee8ce3dc6bf6bc927afa874", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f2dbf465ecdb87bdee8ce3dc6bf6bc927afa874"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0127aae46a182abeadf7419088ad85c9ba5bffc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0127aae46a182abeadf7419088ad85c9ba5bffc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0127aae46a182abeadf7419088ad85c9ba5bffc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0127aae46a182abeadf7419088ad85c9ba5bffc8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fe0f6df424a2e13a7bfdbdc42dcf27d07650c119", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe0f6df424a2e13a7bfdbdc42dcf27d07650c119", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe0f6df424a2e13a7bfdbdc42dcf27d07650c119"}], "stats": {"total": 93, "additions": 59, "deletions": 34}, "files": [{"sha": "85db69e09f263dbff9ac00dcc7d685daf041f4c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0127aae46a182abeadf7419088ad85c9ba5bffc8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0127aae46a182abeadf7419088ad85c9ba5bffc8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0127aae46a182abeadf7419088ad85c9ba5bffc8", "patch": "@@ -1,3 +1,19 @@\n+2012-10-15  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-streamer-out.c (streamer_pack_tree_bitfields): Back\n+\tBINFO_BASE_ACCESSES and CONSTRUCTOR lengths here.\n+\t(streamer_write_chain): Write TREE_CHAIN as null-terminated list.\n+\t(write_ts_exp_tree_pointers): Adjust.\n+\t(write_ts_binfo_tree_pointers): Likewise.\n+\t(write_ts_constructor_tree_pointers): Likewise.\n+\t* tree-streamer-in.c (streamer_read_chain): Read TREE_CHAIN as\n+\tnull-terminated list.\n+\t(unpack_value_fields): Unpack BINFO_BASE_ACCESSES and\n+\tCONSTRUCTOR lengths and materialize the arrays.\n+\t(lto_input_ts_exp_tree_pointers): Adjust.\n+\t(lto_input_ts_binfo_tree_pointers): Likewise.\n+\t(lto_input_ts_constructor_tree_pointers): Likewise.\n+\n 2012-10-14  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* config/mmix/mmix.c (mmix_opposite_regno): Handle the"}, {"sha": "856fd6bf665d0b71c7c2b3663a232a7757bc4ca4", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 31, "deletions": 26, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0127aae46a182abeadf7419088ad85c9ba5bffc8/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0127aae46a182abeadf7419088ad85c9ba5bffc8/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=0127aae46a182abeadf7419088ad85c9ba5bffc8", "patch": "@@ -68,22 +68,21 @@ input_identifier (struct data_in *data_in, struct lto_input_block *ib)\n tree\n streamer_read_chain (struct lto_input_block *ib, struct data_in *data_in)\n {\n-  int i, count;\n   tree first, prev, curr;\n \n+  /* The chain is written as NULL terminated list of trees.  */\n   first = prev = NULL_TREE;\n-  count = streamer_read_hwi (ib);\n-  for (i = 0; i < count; i++)\n+  do\n     {\n       curr = stream_read_tree (ib, data_in);\n       if (prev)\n \tTREE_CHAIN (prev) = curr;\n       else\n \tfirst = curr;\n \n-      TREE_CHAIN (curr) = NULL_TREE;\n       prev = curr;\n     }\n+  while (curr);\n \n   return first;\n }\n@@ -452,6 +451,20 @@ unpack_value_fields (struct data_in *data_in, struct bitpack_d *bp, tree expr)\n \n   if (CODE_CONTAINS_STRUCT (code, TS_OPTIMIZATION))\n     unpack_ts_optimization (bp, expr);\n+\n+  if (CODE_CONTAINS_STRUCT (code, TS_BINFO))\n+    {\n+      unsigned HOST_WIDE_INT length = bp_unpack_var_len_unsigned (bp);\n+      if (length > 0)\n+\tVEC_safe_grow (tree, gc, BINFO_BASE_ACCESSES (expr), length);\n+    }\n+\n+  if (CODE_CONTAINS_STRUCT (code, TS_CONSTRUCTOR))\n+    {\n+      unsigned HOST_WIDE_INT length = bp_unpack_var_len_unsigned (bp);\n+      if (length > 0)\n+\tVEC_safe_grow (constructor_elt, gc, CONSTRUCTOR_ELTS (expr), length);\n+    }\n }\n \n \n@@ -813,12 +826,9 @@ static void\n lto_input_ts_exp_tree_pointers (struct lto_input_block *ib,\n \t\t\t        struct data_in *data_in, tree expr)\n {\n-  int i, length;\n-\n-  length = streamer_read_hwi (ib);\n-  gcc_assert (length == TREE_OPERAND_LENGTH (expr));\n+  int i;\n \n-  for (i = 0; i < length; i++)\n+  for (i = 0; i < TREE_OPERAND_LENGTH (expr); i++)\n     TREE_OPERAND (expr, i) = stream_read_tree (ib, data_in);\n \n   TREE_SET_BLOCK (expr, stream_read_tree (ib, data_in));\n@@ -878,7 +888,7 @@ static void\n lto_input_ts_binfo_tree_pointers (struct lto_input_block *ib,\n \t\t\t\t  struct data_in *data_in, tree expr)\n {\n-  unsigned i, len;\n+  unsigned i;\n   tree t;\n \n   /* Note that the number of slots in EXPR was read in\n@@ -898,15 +908,12 @@ lto_input_ts_binfo_tree_pointers (struct lto_input_block *ib,\n   BINFO_VTABLE (expr) = stream_read_tree (ib, data_in);\n   BINFO_VPTR_FIELD (expr) = stream_read_tree (ib, data_in);\n \n-  len = streamer_read_uhwi (ib);\n-  if (len > 0)\n+  /* The vector of BINFO_BASE_ACCESSES is pre-allocated during\n+     unpacking the bitfield section.  */\n+  for (i = 0; i < VEC_length (tree, BINFO_BASE_ACCESSES (expr)); i++)\n     {\n-      VEC_reserve_exact (tree, gc, BINFO_BASE_ACCESSES (expr), len);\n-      for (i = 0; i < len; i++)\n-\t{\n-\t  tree a = stream_read_tree (ib, data_in);\n-\t  VEC_quick_push (tree, BINFO_BASE_ACCESSES (expr), a);\n-\t}\n+      tree a = stream_read_tree (ib, data_in);\n+      VEC_replace (tree, BINFO_BASE_ACCESSES (expr), i, a);\n     }\n \n   BINFO_INHERITANCE_CHAIN (expr) = stream_read_tree (ib, data_in);\n@@ -923,16 +930,14 @@ static void\n lto_input_ts_constructor_tree_pointers (struct lto_input_block *ib,\n \t\t\t\t        struct data_in *data_in, tree expr)\n {\n-  unsigned i, len;\n+  unsigned i;\n \n-  len = streamer_read_uhwi (ib);\n-  for (i = 0; i < len; i++)\n+  for (i = 0; i < CONSTRUCTOR_NELTS (expr); i++)\n     {\n-      tree index, value;\n-\n-      index = stream_read_tree (ib, data_in);\n-      value = stream_read_tree (ib, data_in);\n-      CONSTRUCTOR_APPEND_ELT (CONSTRUCTOR_ELTS (expr), index, value);\n+      constructor_elt e;\n+      e.index = stream_read_tree (ib, data_in);\n+      e.value = stream_read_tree (ib, data_in);\n+      VEC_replace (constructor_elt, CONSTRUCTOR_ELTS (expr), i, e);\n     }\n }\n "}, {"sha": "cb2ccf47a46b34a5417cd4141ec68c41d5d53d55", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0127aae46a182abeadf7419088ad85c9ba5bffc8/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0127aae46a182abeadf7419088ad85c9ba5bffc8/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=0127aae46a182abeadf7419088ad85c9ba5bffc8", "patch": "@@ -409,6 +409,12 @@ streamer_pack_tree_bitfields (struct output_block *ob,\n \n   if (CODE_CONTAINS_STRUCT (code, TS_OPTIMIZATION))\n     pack_ts_optimization (bp, expr);\n+\n+  if (CODE_CONTAINS_STRUCT (code, TS_BINFO))\n+    bp_pack_var_len_unsigned (bp, VEC_length (tree, BINFO_BASE_ACCESSES (expr)));\n+\n+  if (CODE_CONTAINS_STRUCT (code, TS_CONSTRUCTOR))\n+    bp_pack_var_len_unsigned (bp, CONSTRUCTOR_NELTS (expr));\n }\n \n \n@@ -454,11 +460,7 @@ streamer_write_builtin (struct output_block *ob, tree expr)\n void\n streamer_write_chain (struct output_block *ob, tree t, bool ref_p)\n {\n-  int i, count;\n-\n-  count = list_length (t);\n-  streamer_write_hwi (ob, count);\n-  for (i = 0; i < count; i++)\n+  while (t)\n     {\n       tree saved_chain;\n \n@@ -480,6 +482,9 @@ streamer_write_chain (struct output_block *ob, tree t, bool ref_p)\n       TREE_CHAIN (t) = saved_chain;\n       t = TREE_CHAIN (t);\n     }\n+\n+  /* Write a sentinel to terminate the chain.  */\n+  stream_write_tree (ob, NULL_TREE, ref_p);\n }\n \n \n@@ -725,7 +730,6 @@ write_ts_exp_tree_pointers (struct output_block *ob, tree expr, bool ref_p)\n {\n   int i;\n \n-  streamer_write_hwi (ob, TREE_OPERAND_LENGTH (expr));\n   for (i = 0; i < TREE_OPERAND_LENGTH (expr); i++)\n     stream_write_tree (ob, TREE_OPERAND (expr, i), ref_p);\n   stream_write_tree (ob, TREE_BLOCK (expr), ref_p);\n@@ -786,7 +790,8 @@ write_ts_binfo_tree_pointers (struct output_block *ob, tree expr, bool ref_p)\n   stream_write_tree (ob, BINFO_VTABLE (expr), ref_p);\n   stream_write_tree (ob, BINFO_VPTR_FIELD (expr), ref_p);\n \n-  streamer_write_uhwi (ob, VEC_length (tree, BINFO_BASE_ACCESSES (expr)));\n+  /* The number of BINFO_BASE_ACCESSES has already been emitted in\n+     EXPR's bitfield section.  */\n   FOR_EACH_VEC_ELT (tree, BINFO_BASE_ACCESSES (expr), i, t)\n     stream_write_tree (ob, t, ref_p);\n \n@@ -807,7 +812,6 @@ write_ts_constructor_tree_pointers (struct output_block *ob, tree expr,\n   unsigned i;\n   tree index, value;\n \n-  streamer_write_uhwi (ob, CONSTRUCTOR_NELTS (expr));\n   FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (expr), i, index, value)\n     {\n       stream_write_tree (ob, index, ref_p);"}]}