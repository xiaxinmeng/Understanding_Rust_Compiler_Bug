{"sha": "2d761a3733c10868e8ca8d81e846a1940c5e48a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ3NjFhMzczM2MxMDg2OGU4Y2E4ZDgxZTg0NmExOTQwYzVlNDhhMg==", "commit": {"author": {"name": "Senthil Kumar Selvaraj", "email": "senthil_kumar.selvaraj@atmel.com", "date": "2016-06-16T16:50:40Z"}, "committer": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2016-06-16T16:50:40Z"}, "message": "avr.c (avr_asm_init_sections): Remove setup of progmem_swtable_section.\n\ngcc/ChangeLog:\n        * config/avr/avr.c (avr_asm_init_sections): Remove setup of\n\tprogmem_swtable_section.\n        (progmem_swtable_section): Remove.\n        (avr_asm_function_rodata_section): Remove.\n        (TARGET_ASM_FUNCTION_RODATA_SECTION): Remove.\n        * config/avr/avr.h (JUMP_TABLES_IN_TEXT_SECTION: Define to 1.\n\n\ngcc/testsuite/ChangeLog:\n        * gcc.target/avr/pr71151-1.c: New test.\n        * gcc.target/avr/pr71151-2.c: New test.\n        * gcc.target/avr/pr71151-3.c: New test.\n        * gcc.target/avr/pr71151-4.c: New test.\n        * gcc.target/avr/pr71151-5.c: New test.\n        * gcc.target/avr/pr71151-6.c: New test.\n        * gcc.target/avr/pr71151-7.c: New test.\n        * gcc.target/avr/pr71151-8.c: New test.\n        * gcc.target/avr/pr71151-common.h: New test.\n\nFrom-SVN: r237536", "tree": {"sha": "88ea0d64f37292a69aaac4ab9fb186b99e4c4cd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88ea0d64f37292a69aaac4ab9fb186b99e4c4cd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d761a3733c10868e8ca8d81e846a1940c5e48a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d761a3733c10868e8ca8d81e846a1940c5e48a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d761a3733c10868e8ca8d81e846a1940c5e48a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d761a3733c10868e8ca8d81e846a1940c5e48a2/comments", "author": null, "committer": null, "parents": [{"sha": "d3606ee3ea6a8a30844f997aac61b4a1ecd30242", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3606ee3ea6a8a30844f997aac61b4a1ecd30242", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3606ee3ea6a8a30844f997aac61b4a1ecd30242"}], "stats": {"total": 335, "additions": 251, "deletions": 84}, "files": [{"sha": "eb0ca9117cb95b68a3042a564f6753fce083112b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d761a3733c10868e8ca8d81e846a1940c5e48a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d761a3733c10868e8ca8d81e846a1940c5e48a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d761a3733c10868e8ca8d81e846a1940c5e48a2", "patch": "@@ -1,3 +1,12 @@\n+2016-06-16  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n+\n+\t* config/avr/avr.c (avr_asm_init_sections): Remove setup of\n+\tprogmem_swtable_section.\n+\t(progmem_swtable_section): Remove.\n+\t(avr_asm_function_rodata_section): Remove.\n+\t(TARGET_ASM_FUNCTION_RODATA_SECTION): Remove.\n+\t* config/avr/avr.h (JUMP_TABLES_IN_TEXT_SECTION: Define to 1.\n+\n 2016-06-16  Jocelyn Mayer  <l_indien@magic.fr>\n \n \t* config/i386/driver-i386.c (host_detect_local_cpu): Set"}, {"sha": "d13f4fddcd58b75e6fa4b9ac93b27b49f3d3aa4c", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d761a3733c10868e8ca8d81e846a1940c5e48a2/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d761a3733c10868e8ca8d81e846a1940c5e48a2/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=2d761a3733c10868e8ca8d81e846a1940c5e48a2", "patch": "@@ -203,9 +203,6 @@ static GTY(()) rtx xstring_e;\n /* Current architecture.  */\n const avr_arch_t *avr_arch;\n \n-/* Section to put switch tables in.  */\n-static GTY(()) section *progmem_swtable_section;\n-\n /* Unnamed sections associated to __attribute__((progmem)) aka. PROGMEM\n    or to address space __flash* or __memx.  Only used as singletons inside\n    avr_asm_select_section, but it must not be local there because of GTY.  */\n@@ -9461,24 +9458,6 @@ avr_output_progmem_section_asm_op (const void *data)\n static void\n avr_asm_init_sections (void)\n {\n-  /* Set up a section for jump tables.  Alignment is handled by\n-     ASM_OUTPUT_BEFORE_CASE_LABEL.  */\n-\n-  if (AVR_HAVE_JMP_CALL)\n-    {\n-      progmem_swtable_section\n-        = get_unnamed_section (0, output_section_asm_op,\n-                               \"\\t.section\\t.progmem.gcc_sw_table\"\n-                               \",\\\"a\\\",@progbits\");\n-    }\n-  else\n-    {\n-      progmem_swtable_section\n-        = get_unnamed_section (SECTION_CODE, output_section_asm_op,\n-                               \"\\t.section\\t.progmem.gcc_sw_table\"\n-                               \",\\\"ax\\\",@progbits\");\n-    }\n-\n   /* Override section callbacks to keep track of `avr_need_clear_bss_p'\n      resp. `avr_need_copy_data_p'.  */\n \n@@ -9488,65 +9467,6 @@ avr_asm_init_sections (void)\n }\n \n \n-/* Implement `TARGET_ASM_FUNCTION_RODATA_SECTION'.  */\n-\n-static section*\n-avr_asm_function_rodata_section (tree decl)\n-{\n-  /* If a function is unused and optimized out by -ffunction-sections\n-     and --gc-sections, ensure that the same will happen for its jump\n-     tables by putting them into individual sections.  */\n-\n-  unsigned int flags;\n-  section * frodata;\n-\n-  /* Get the frodata section from the default function in varasm.c\n-     but treat function-associated data-like jump tables as code\n-     rather than as user defined data.  AVR has no constant pools.  */\n-  {\n-    int fdata = flag_data_sections;\n-\n-    flag_data_sections = flag_function_sections;\n-    frodata = default_function_rodata_section (decl);\n-    flag_data_sections = fdata;\n-    flags = frodata->common.flags;\n-  }\n-\n-  if (frodata != readonly_data_section\n-      && flags & SECTION_NAMED)\n-    {\n-      /* Adjust section flags and replace section name prefix.  */\n-\n-      unsigned int i;\n-\n-      static const char* const prefix[] =\n-        {\n-          \".rodata\",          \".progmem.gcc_sw_table\",\n-          \".gnu.linkonce.r.\", \".gnu.linkonce.t.\"\n-        };\n-\n-      for (i = 0; i < sizeof (prefix) / sizeof (*prefix); i += 2)\n-        {\n-          const char * old_prefix = prefix[i];\n-          const char * new_prefix = prefix[i+1];\n-          const char * name = frodata->named.name;\n-\n-          if (STR_PREFIX_P (name, old_prefix))\n-            {\n-              const char *rname = ACONCAT ((new_prefix,\n-                                            name + strlen (old_prefix), NULL));\n-              flags &= ~SECTION_CODE;\n-              flags |= AVR_HAVE_JMP_CALL ? 0 : SECTION_CODE;\n-\n-              return get_section (rname, flags, frodata->named.decl);\n-            }\n-        }\n-    }\n-\n-  return progmem_swtable_section;\n-}\n-\n-\n /* Implement `TARGET_ASM_NAMED_SECTION'.  */\n /* Track need of __do_clear_bss, __do_copy_data for named sections.  */\n \n@@ -13747,9 +13667,6 @@ avr_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED, tree *arg,\n #undef  TARGET_FOLD_BUILTIN\n #define TARGET_FOLD_BUILTIN avr_fold_builtin\n \n-#undef  TARGET_ASM_FUNCTION_RODATA_SECTION\n-#define TARGET_ASM_FUNCTION_RODATA_SECTION avr_asm_function_rodata_section\n-\n #undef  TARGET_SCALAR_MODE_SUPPORTED_P\n #define TARGET_SCALAR_MODE_SUPPORTED_P avr_scalar_mode_supported_p\n "}, {"sha": "ab5e465114887628750cd0c7459c374b8707b0bf", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d761a3733c10868e8ca8d81e846a1940c5e48a2/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d761a3733c10868e8ca8d81e846a1940c5e48a2/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=2d761a3733c10868e8ca8d81e846a1940c5e48a2", "patch": "@@ -391,7 +391,7 @@ typedef struct avr_args\n \n #define SUPPORTS_INIT_PRIORITY 0\n \n-#define JUMP_TABLES_IN_TEXT_SECTION 0\n+#define JUMP_TABLES_IN_TEXT_SECTION 1\n \n #define ASM_COMMENT_START \" ; \"\n "}, {"sha": "b62a0f9468e2e8652edd6cdfef050442fc1c3b4e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d761a3733c10868e8ca8d81e846a1940c5e48a2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d761a3733c10868e8ca8d81e846a1940c5e48a2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2d761a3733c10868e8ca8d81e846a1940c5e48a2", "patch": "@@ -1,3 +1,15 @@\n+2016-06-16  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n+\n+\t* gcc.target/avr/pr71151-1.c: New test.\n+\t* gcc.target/avr/pr71151-2.c: New test.\n+\t* gcc.target/avr/pr71151-3.c: New test.\n+\t* gcc.target/avr/pr71151-4.c: New test.\n+\t* gcc.target/avr/pr71151-5.c: New test.\n+\t* gcc.target/avr/pr71151-6.c: New test.\n+\t* gcc.target/avr/pr71151-7.c: New test.\n+\t* gcc.target/avr/pr71151-8.c: New test.\n+\t* gcc.target/avr/pr71151-common.h: New test.\n+\n 2016-06-16  Martin Liska  <mliska@suse.cz>\n \n \t* gfortran.dg/predict-1.f90: New test."}, {"sha": "615dce860262a1da4d3b47e6ab42e1d2c0c36166", "filename": "gcc/testsuite/gcc.target/avr/pr71151-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d761a3733c10868e8ca8d81e846a1940c5e48a2/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d761a3733c10868e8ca8d81e846a1940c5e48a2/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-1.c?ref=2d761a3733c10868e8ca8d81e846a1940c5e48a2", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -ffunction-sections -fdata-sections\" } */\n+\n+/* { dg-final { scan-assembler-not \".section\t.progmem.gcc_sw_table.foo.str1.1\" } } */\n+/* { dg-final { scan-assembler \".section\t.rodata.foo.str1.1,\\\"aMS\\\"\" } } */\n+\n+\n+extern void bar(const char*);\n+void foo(void)\n+{\n+  bar(\"BBBBBBBBBB\");\n+}"}, {"sha": "e523ce09c7a5a8e891cbbaa5ef5d13d226f425fe", "filename": "gcc/testsuite/gcc.target/avr/pr71151-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d761a3733c10868e8ca8d81e846a1940c5e48a2/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d761a3733c10868e8ca8d81e846a1940c5e48a2/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-2.c?ref=2d761a3733c10868e8ca8d81e846a1940c5e48a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-options \"-Os -fno-tree-switch-conversion -ffunction-sections -fdata-sections\" } */\n+\n+/* Make sure jumptables work properly if placed below 64 KB i.e. 2 byte\n+   flash address for loading jump table entry, 2 byte entry, after\n+   removing the special section placement hook. */\n+\n+#include \"exit-abort.h\"\n+#include \"pr71151-common.h\"\n+\n+int main()\n+{\n+\tfoo(5);\n+\tif (y != 37)\n+\t\tabort();\n+\n+\tfoo(0);\n+\tif (y != 67)\n+\t\tabort();\n+\n+\tfoo(7);\n+\tif (y != 98)\n+\t\tabort();\n+}"}, {"sha": "ce0ba5972e409707eba66c24a53b14333f42c00f", "filename": "gcc/testsuite/gcc.target/avr/pr71151-3.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d761a3733c10868e8ca8d81e846a1940c5e48a2/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d761a3733c10868e8ca8d81e846a1940c5e48a2/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-3.c?ref=2d761a3733c10868e8ca8d81e846a1940c5e48a2", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-Os -fno-tree-switch-conversion -ffunction-sections -mno-relax -fdata-sections -Wl,--section-start=.foo=0x10000\" } */\n+\n+/* Make sure jumptables work properly if placed above 64 KB and below 128 KB,\n+   i.e. 3 byte flash address for loading jump table entry and 2 byte jump table\n+   entry, with relaxation disabled, after removing the special section\n+   placement hook. */\n+\n+#include \"exit-abort.h\"\n+#include \"pr71151-common.h\"\n+\n+int main()\n+{\n+\tfoo(5);\n+\tif (y != 37)\n+\t\tabort();\n+\n+\tfoo(0);\n+\tif (y != 67)\n+\t\tabort();\n+\n+\tfoo(7);\n+\tif (y != 98)\n+\t\tabort();\n+}"}, {"sha": "51250b06133ae6b189b3aca7f5e2640b91a5f643", "filename": "gcc/testsuite/gcc.target/avr/pr71151-4.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d761a3733c10868e8ca8d81e846a1940c5e48a2/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d761a3733c10868e8ca8d81e846a1940c5e48a2/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-4.c?ref=2d761a3733c10868e8ca8d81e846a1940c5e48a2", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-Os -fno-tree-switch-conversion -ffunction-sections -fdata-sections -mrelax -Wl,--section-start=.foo=0x10000\" } */\n+\n+/* Make sure jumptables work properly if placed above 64 KB and below 128 KB,\n+   i.e. 3 byte flash address for loading jump table entry and 2 byte jump\n+   table entry, with relaxation enabled, after removing the special section\n+   placement hook. */\n+\n+#include \"exit-abort.h\"\n+#include \"pr71151-common.h\"\n+\n+int main()\n+{\n+\tfoo(5);\n+\tif (y != 37)\n+\t\tabort();\n+\n+\tfoo(0);\n+\tif (y != 67)\n+\t\tabort();\n+\n+\tfoo(7);\n+\tif (y != 98)\n+\t\tabort();\n+}"}, {"sha": "47030dca5ee60bb59465e6c8b2c8d93ef9ac86b9", "filename": "gcc/testsuite/gcc.target/avr/pr71151-5.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d761a3733c10868e8ca8d81e846a1940c5e48a2/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d761a3733c10868e8ca8d81e846a1940c5e48a2/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-5.c?ref=2d761a3733c10868e8ca8d81e846a1940c5e48a2", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-options \"-Os -fno-tree-switch-conversion -ffunction-sections -fdata-sections -mno-relax -Wl,--section-start=.foo=0x20000\" } */\n+\n+/* Make sure jumptables work properly if placed above 128 KB, i.e. 3 byte\n+   flash address for loading jump table entry and a jump table entry\n+   that is a stub, with relaxation disabled, after removing the special\n+   section placement hook. */\n+\n+#include \"exit-abort.h\"\n+#include \"pr71151-common.h\"\n+\n+int main()\n+{\n+\t/* Not meant for devices with flash <= 128K */\n+#if defined (__AVR_2_BYTE_PC__)\n+\texit(0);\n+#else\n+\tfoo(5);\n+\tif (y != 37)\n+\t\tabort();\n+\n+\tfoo(0);\n+\tif (y != 67)\n+\t\tabort();\n+\n+\tfoo(7);\n+\tif (y != 98)\n+\t\tabort();\n+#endif\n+}"}, {"sha": "815aa13425c6b65e8ad7e700dfa8181a62899aa2", "filename": "gcc/testsuite/gcc.target/avr/pr71151-6.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d761a3733c10868e8ca8d81e846a1940c5e48a2/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d761a3733c10868e8ca8d81e846a1940c5e48a2/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-6.c?ref=2d761a3733c10868e8ca8d81e846a1940c5e48a2", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-options \"-Os -fno-tree-switch-conversion -ffunction-sections -fdata-sections -mrelax -Wl,--section-start=.foo=0x20000\" } */\n+\n+/* Make sure jumptables work properly if placed above 128 KB, i.e. 3 byte\n+   flash address for loading jump table entry and a jump table entry\n+   that is a stub, with relaxation enabled, after removing the special\n+   section placement hook. */\n+\n+#include \"exit-abort.h\"\n+#include \"pr71151-common.h\"\n+\n+int main()\n+{\n+\t/* Not meant for devices with flash <= 128K */\n+#if defined (__AVR_2_BYTE_PC__)\n+\texit(0);\n+#else\n+\tfoo(5);\n+\tif (y != 37)\n+\t\tabort();\n+\n+\tfoo(0);\n+\tif (y != 67)\n+\t\tabort();\n+\n+\tfoo(7);\n+\tif (y != 98)\n+\t\tabort();\n+#endif\n+}"}, {"sha": "cdc7ea9f65c059c508fd19d4d49a8f361ceae2a1", "filename": "gcc/testsuite/gcc.target/avr/pr71151-7.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d761a3733c10868e8ca8d81e846a1940c5e48a2/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d761a3733c10868e8ca8d81e846a1940c5e48a2/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-7.c?ref=2d761a3733c10868e8ca8d81e846a1940c5e48a2", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-options \"-Os -fno-tree-switch-conversion -ffunction-sections -fdata-sections -mno-relax -Wl,--section-start=.foo=0x1fffa\" } */\n+\n+/* Make sure jumptables work properly if placed straddling 128 KB i.e\n+   some entries below 128 KB and some above it, with relaxation disabled. */\n+\n+#include \"exit-abort.h\"\n+#include \"pr71151-common.h\"\n+\n+int main()\n+{\n+\t/* Not meant for devices with flash <= 128K */\n+#if defined (__AVR_2_BYTE_PC__)\n+\texit(0);\n+#else\n+\tfoo(5);\n+\tif (y != 37)\n+\t\tabort();\n+\n+\tfoo(0);\n+\tif (y != 67)\n+\t\tabort();\n+\n+\tfoo(7);\n+\tif (y != 98)\n+\t\tabort();\n+#endif\n+}"}, {"sha": "0b7bf6a0e73934704706087515aa9739c51196c2", "filename": "gcc/testsuite/gcc.target/avr/pr71151-8.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d761a3733c10868e8ca8d81e846a1940c5e48a2/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d761a3733c10868e8ca8d81e846a1940c5e48a2/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-8.c?ref=2d761a3733c10868e8ca8d81e846a1940c5e48a2", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-options \"-Os -fno-tree-switch-conversion -ffunction-sections -fdata-sections -mrelax -Wl,--section-start=.foo=0x1fffa\" } */\n+\n+/* Make sure jumptables work properly if placed straddling 128 KB i.e\n+   some entries below 128 KB and some above it, with relaxation disabled. */\n+\n+#include \"exit-abort.h\"\n+#include \"pr71151-common.h\"\n+\n+int main()\n+{\n+\t/* Not meant for devices with flash <= 128K */\n+#if defined (__AVR_2_BYTE_PC__)\n+\texit(0);\n+#else\n+\tfoo(5);\n+\tif (y != 37)\n+\t\tabort();\n+\n+\tfoo(0);\n+\tif (y != 67)\n+\t\tabort();\n+\n+\tfoo(7);\n+\tif (y != 98)\n+\t\tabort();\n+#endif\n+}"}, {"sha": "0df17836b99cf43ba5bd41693cc64aa937b73245", "filename": "gcc/testsuite/gcc.target/avr/pr71151-common.h", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d761a3733c10868e8ca8d81e846a1940c5e48a2/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d761a3733c10868e8ca8d81e846a1940c5e48a2/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-common.h?ref=2d761a3733c10868e8ca8d81e846a1940c5e48a2", "patch": "@@ -0,0 +1,27 @@\n+volatile char y;\n+volatile char g;\n+\n+__attribute__((section(\".foo\")))\n+void foo(char x) \n+{\n+\tswitch (x)\n+\t{\n+\t\tcase 0:\n+\t\t\ty = 67; break;\n+\t\tcase 1:\n+\t\t\ty = 20; break;\n+\t\tcase 2:\n+\t\t\ty = 109; break;\n+\t\tcase 3:\n+\t\t\ty = 33; break;\n+\t\tcase 4:\n+\t\t\ty = 44; break;\n+\t\tcase 5:\n+\t\t\ty = 37; break;\n+\t\tcase 6:\n+\t\t\ty = 10; break;\n+\t\tcase 7:\n+\t\t\ty = 98; break;\n+\t}\n+\ty = y + g;\n+}"}]}