{"sha": "618bac5b486832edd3f8eb3ada74740e389dfcb8", "node_id": "C_kwDOANBUbNoAKDYxOGJhYzViNDg2ODMyZWRkM2Y4ZWIzYWRhNzQ3NDBlMzg5ZGZjYjg", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-06-30T13:00:17Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-07-01T06:47:49Z"}, "message": "if-to-switch: properly allow side effects only for first condition\n\nProperly allow side effects only for a first BB in a condition chain.\n\n\tPR tree-optimization/106126\n\ngcc/ChangeLog:\n\n\t* gimple-if-to-switch.cc (struct condition_info): Save\n\thas_side_effect.\n\t(find_conditions): Parse all BBs.\n\t(pass_if_to_switch::execute): Allow only side effects for first\n\tBB.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/tree-ssa/pr106126.c: New test.", "tree": {"sha": "9a11a53e55fbfe9f15dd98c4d036866f857166bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a11a53e55fbfe9f15dd98c4d036866f857166bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/618bac5b486832edd3f8eb3ada74740e389dfcb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/618bac5b486832edd3f8eb3ada74740e389dfcb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/618bac5b486832edd3f8eb3ada74740e389dfcb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/618bac5b486832edd3f8eb3ada74740e389dfcb8/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33981253cdf4505af30d3467ba5baa142cc62772", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33981253cdf4505af30d3467ba5baa142cc62772", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33981253cdf4505af30d3467ba5baa142cc62772"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "4441206c481072287ee52121ae831c06d59c072a", "filename": "gcc/gimple-if-to-switch.cc", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618bac5b486832edd3f8eb3ada74740e389dfcb8/gcc%2Fgimple-if-to-switch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618bac5b486832edd3f8eb3ada74740e389dfcb8/gcc%2Fgimple-if-to-switch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-if-to-switch.cc?ref=618bac5b486832edd3f8eb3ada74740e389dfcb8", "patch": "@@ -61,9 +61,11 @@ struct condition_info\n {\n   typedef auto_vec<std::pair<gphi *, tree>> mapping_vec;\n \n-  condition_info (gcond *cond): m_cond (cond), m_bb (gimple_bb (cond)),\n-    m_forwarder_bb (NULL), m_ranges (), m_true_edge (NULL), m_false_edge (NULL),\n-    m_true_edge_phi_mapping (), m_false_edge_phi_mapping ()\n+  condition_info (gcond *cond, bool has_side_effect): m_cond (cond),\n+    m_bb (gimple_bb (cond)), m_forwarder_bb (NULL), m_ranges (),\n+    m_true_edge (NULL), m_false_edge (NULL),\n+    m_true_edge_phi_mapping (), m_false_edge_phi_mapping (),\n+    m_has_side_effect (has_side_effect)\n   {\n     m_ranges.create (0);\n   }\n@@ -80,6 +82,7 @@ struct condition_info\n   edge m_false_edge;\n   mapping_vec m_true_edge_phi_mapping;\n   mapping_vec m_false_edge_phi_mapping;\n+  bool m_has_side_effect;\n };\n \n /* Recond PHI mapping for an original edge E and save these into vector VEC.  */\n@@ -389,16 +392,11 @@ find_conditions (basic_block bb,\n   if (cond == NULL)\n     return;\n \n-  /* An empty conditions_in_bbs indicates we are processing the first\n-     basic-block then no need check side effect.  */\n-  if (!conditions_in_bbs->is_empty () && !no_side_effect_bb (bb))\n-    return;\n-\n   tree lhs = gimple_cond_lhs (cond);\n   tree rhs = gimple_cond_rhs (cond);\n   tree_code code = gimple_cond_code (cond);\n \n-  condition_info *info = new condition_info (cond);\n+  condition_info *info = new condition_info (cond, !no_side_effect_bb (bb));\n \n   gassign *def;\n   if (code == NE_EXPR\n@@ -536,6 +534,10 @@ pass_if_to_switch::execute (function *fun)\n \t      if ((*info2)->m_false_edge != e)\n \t\tbreak;\n \n+\t      /* Only the first BB in a chain can have a side effect.  */\n+\t      if (info->m_has_side_effect)\n+\t\tbreak;\n+\n \t      chain->m_entries.safe_push (*info2);\n \t      bitmap_set_bit (seen_bbs, e->src->index);\n \t      info = *info2;"}, {"sha": "2f0fd44164b83e5a0af061d453723cffd5145a3b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr106126.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618bac5b486832edd3f8eb3ada74740e389dfcb8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr106126.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618bac5b486832edd3f8eb3ada74740e389dfcb8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr106126.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr106126.c?ref=618bac5b486832edd3f8eb3ada74740e389dfcb8", "patch": "@@ -0,0 +1,12 @@\n+/* PR tree-optimization/106126 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+char *var_1;\n+void pool_conda_matchspec() {\n+  for (; var_1 && *var_1 &&\n+         *var_1 != '<' && *var_1 != '>' &&\n+         *var_1 != '!' && *var_1 != '~';)\n+    if (*var_1 >= 'A' && *var_1 <= 'Z')\n+      *var_1 += 'A';\n+}"}]}