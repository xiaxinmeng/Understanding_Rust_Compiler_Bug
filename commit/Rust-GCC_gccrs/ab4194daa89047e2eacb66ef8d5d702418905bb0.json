{"sha": "ab4194daa89047e2eacb66ef8d5d702418905bb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI0MTk0ZGFhODkwNDdlMmVhY2I2NmVmOGQ1ZDcwMjQxODkwNWJiMA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2009-02-19T13:56:00Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2009-02-19T13:56:00Z"}, "message": "re PR c/38483 (generated aborts lose previous side-effects)\n\n\tPR c/38483\n\t* builtins.c (gimplify_va_arg_expr): Evaluate the va_list\n\texpression before any __builtin_trap call.\n\t* c-typeck.c (build_function_call): Convert and check function\n\targuments before generating a call to a trap.  Evaluate the\n\tfunction arguments before the trap.\n\ntestsuite:\n\t* gcc.c-torture/execute/call-trap-1.c,\n\tgcc.c-torture/execute/va-arg-trap-1.c, gcc.dg/call-diag-1.c: New\n\ttests.\n\nFrom-SVN: r144296", "tree": {"sha": "4cadcaa3b993c651af0668a488634c85a19a1b6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cadcaa3b993c651af0668a488634c85a19a1b6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab4194daa89047e2eacb66ef8d5d702418905bb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab4194daa89047e2eacb66ef8d5d702418905bb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab4194daa89047e2eacb66ef8d5d702418905bb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab4194daa89047e2eacb66ef8d5d702418905bb0/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b67572ed1a6f2fc43d07eead15e9eda973d339d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b67572ed1a6f2fc43d07eead15e9eda973d339d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b67572ed1a6f2fc43d07eead15e9eda973d339d"}], "stats": {"total": 115, "additions": 105, "deletions": 10}, "files": [{"sha": "da214e8deea2d079965607fbeec9f33a0fdac50e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab4194daa89047e2eacb66ef8d5d702418905bb0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab4194daa89047e2eacb66ef8d5d702418905bb0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab4194daa89047e2eacb66ef8d5d702418905bb0", "patch": "@@ -1,3 +1,12 @@\n+2009-02-19  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/38483\n+\t* builtins.c (gimplify_va_arg_expr): Evaluate the va_list\n+\texpression before any __builtin_trap call.\n+\t* c-typeck.c (build_function_call): Convert and check function\n+\targuments before generating a call to a trap.  Evaluate the\n+\tfunction arguments before the trap.\n+\n 2009-02-19  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/39228"}, {"sha": "55639cde7280aa455d40cc29fa3dfffa3cd2dff7", "filename": "gcc/builtins.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab4194daa89047e2eacb66ef8d5d702418905bb0/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab4194daa89047e2eacb66ef8d5d702418905bb0/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=ab4194daa89047e2eacb66ef8d5d702418905bb0", "patch": "@@ -4999,6 +4999,9 @@ gimplify_va_arg_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t Call abort to encourage the user to fix the program.  */\n       if (warned)\n \tinform (input_location, \"if this code is reached, the program will abort\");\n+      /* Before the abort, allow the evaluation of the va_list\n+\t expression to exit or longjmp.  */\n+      gimplify_and_add (valist, pre_p);\n       t = build_call_expr (implicit_built_in_decls[BUILT_IN_TRAP], 0);\n       gimplify_and_add (t, pre_p);\n "}, {"sha": "f1d83f3c20cdd8ecf4f2556a4978b39b1e966757", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab4194daa89047e2eacb66ef8d5d702418905bb0/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab4194daa89047e2eacb66ef8d5d702418905bb0/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=ab4194daa89047e2eacb66ef8d5d702418905bb0", "patch": "@@ -2417,6 +2417,16 @@ build_function_call (tree function, tree params)\n   /* fntype now gets the type of function pointed to.  */\n   fntype = TREE_TYPE (fntype);\n \n+  /* Convert the parameters to the types declared in the\n+     function prototype, or apply default promotions.  */\n+\n+  nargs = list_length (params);\n+  argarray = (tree *) alloca (nargs * sizeof (tree));\n+  nargs = convert_arguments (nargs, argarray, TYPE_ARG_TYPES (fntype), \n+\t\t\t     params, function, fundecl);\n+  if (nargs < 0)\n+    return error_mark_node;\n+\n   /* Check that the function is called through a compatible prototype.\n      If it is not, replace the call by a trap, wrapped up in a compound\n      expression if necessary.  This has the nice side-effect to prevent\n@@ -2430,6 +2440,7 @@ build_function_call (tree function, tree params)\n       tree return_type = TREE_TYPE (fntype);\n       tree trap = build_function_call (built_in_decls[BUILT_IN_TRAP],\n \t\t\t\t       NULL_TREE);\n+      int i;\n \n       /* This situation leads to run-time undefined behavior.  We can't,\n \t therefore, simply error unless we can prove that all possible\n@@ -2438,6 +2449,10 @@ build_function_call (tree function, tree params)\n \t/* We can, however, treat \"undefined\" any way we please.\n \t   Call abort to encourage the user to fix the program.  */\n \tinform (input_location, \"if this code is reached, the program will abort\");\n+      /* Before the abort, allow the function arguments to exit or\n+\t call longjmp.  */\n+      for (i = 0; i < nargs; i++)\n+\ttrap = build2 (COMPOUND_EXPR, void_type_node, argarray[i], trap);\n \n       if (VOID_TYPE_P (return_type))\n \treturn trap;\n@@ -2455,16 +2470,6 @@ build_function_call (tree function, tree params)\n \t}\n     }\n \n-  /* Convert the parameters to the types declared in the\n-     function prototype, or apply default promotions.  */\n-\n-  nargs = list_length (params);\n-  argarray = (tree *) alloca (nargs * sizeof (tree));\n-  nargs = convert_arguments (nargs, argarray, TYPE_ARG_TYPES (fntype), \n-\t\t\t     params, function, fundecl);\n-  if (nargs < 0)\n-    return error_mark_node;\n-\n   /* Check that arguments to builtin functions match the expectations.  */\n   if (fundecl\n       && DECL_BUILT_IN (fundecl)"}, {"sha": "2a4bad1693ecc1dc6b8e0018481acd8c908a0c74", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab4194daa89047e2eacb66ef8d5d702418905bb0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab4194daa89047e2eacb66ef8d5d702418905bb0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ab4194daa89047e2eacb66ef8d5d702418905bb0", "patch": "@@ -1,3 +1,10 @@\n+2009-02-19  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/38483\n+\t* gcc.c-torture/execute/call-trap-1.c,\n+\tgcc.c-torture/execute/va-arg-trap-1.c, gcc.dg/call-diag-1.c: New\n+\ttests.\n+\n 2009-02-19  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/39228"}, {"sha": "aa226e745d6e13756f45c81b007314c6fa66df4e", "filename": "gcc/testsuite/gcc.c-torture/execute/call-trap-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab4194daa89047e2eacb66ef8d5d702418905bb0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fcall-trap-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab4194daa89047e2eacb66ef8d5d702418905bb0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fcall-trap-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fcall-trap-1.c?ref=ab4194daa89047e2eacb66ef8d5d702418905bb0", "patch": "@@ -0,0 +1,26 @@\n+/* Undefined behavior from a call to a function cast to a different\n+   type does not appear until after the function designator and\n+   arguments have been evaluated.  PR 38483.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+\n+extern void exit (int);\n+extern void abort (void);\n+\n+int\n+foo (void)\n+{\n+  exit (0);\n+  return 0;\n+}\n+\n+void\n+bar (void)\n+{\n+}\n+\n+int\n+main (void)\n+{\n+  ((long (*)(int))bar) (foo ());\n+  abort ();\n+}"}, {"sha": "1e1dae8e8aaa9e6112005f832650e755efb587ef", "filename": "gcc/testsuite/gcc.c-torture/execute/va-arg-trap-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab4194daa89047e2eacb66ef8d5d702418905bb0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-trap-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab4194daa89047e2eacb66ef8d5d702418905bb0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-trap-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-trap-1.c?ref=ab4194daa89047e2eacb66ef8d5d702418905bb0", "patch": "@@ -0,0 +1,36 @@\n+/* Undefined behavior from a call to va_arg with a type other than\n+   that of the argument passed (in particular, with a type such as\n+   \"float\" that can never be the type of an argument passed through\n+   \"...\") does not appear until after the va_list expression is\n+   evaluated.  PR 38483.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+\n+#include <stdarg.h>\n+\n+extern void exit (int);\n+extern void abort (void);\n+\n+va_list ap;\n+float f;\n+\n+va_list *\n+foo (void)\n+{\n+  exit (0);\n+  return &ap;\n+}\n+\n+void\n+bar (int i, ...)\n+{\n+  va_start (ap, i);\n+  f = va_arg (*foo (), float);\n+  va_end (ap);\n+}\n+\n+int\n+main (void)\n+{\n+  bar (1, 0);\n+  abort ();\n+}"}, {"sha": "884baa0d4379cf21278c4b95bd1d8ff4f7eeeebf", "filename": "gcc/testsuite/gcc.dg/call-diag-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab4194daa89047e2eacb66ef8d5d702418905bb0/gcc%2Ftestsuite%2Fgcc.dg%2Fcall-diag-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab4194daa89047e2eacb66ef8d5d702418905bb0/gcc%2Ftestsuite%2Fgcc.dg%2Fcall-diag-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcall-diag-1.c?ref=ab4194daa89047e2eacb66ef8d5d702418905bb0", "patch": "@@ -0,0 +1,9 @@\n+/* The warning for calling through a non-compatible type must not\n+   disable the normal diagnostics from comparing the argument list\n+   against the type of the called expression.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+void foo (void);\n+void bar (void) { ((long (*)(int))foo) (); } /* { dg-error \"too few arguments to function\" } */"}]}