{"sha": "1ecae1fc238a6b02b3cc2de6a24d73966bc45a03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVjYWUxZmMyMzhhNmIwMmIzY2MyZGU2YTI0ZDczOTY2YmM0NWEwMw==", "commit": {"author": {"name": "Igor Tsimbalist", "email": "igor.v.tsimbalist@intel.com", "date": "2017-11-17T13:34:39Z"}, "committer": {"name": "Igor Tsimbalist", "email": "itsimbal@gcc.gnu.org", "date": "2017-11-17T13:34:39Z"}, "message": "Enable building libgcc with CET options.\n\nEnable building libgcc with CET options by default on Linux/x86 if\nbinutils supports CET v2.0.  It can be disabled with --disable-cet.\nIt is an error to configure GCC with --enable-cet if bintuiils\ndoesn't support CET v2.0.\n\nENDBR instruction is added to __morestack_large_model since it is\ncalled indirectly.\n\n2017-11-17  Igor Tsimbalist  <igor.v.tsimbalist@intel.com>\n\nconfig/\n\t* cet.m4: New file.\n\ngcc/\n\t* config.gcc (extra_headers): Add cet.h for x86 targets.\n\t* config/i386/cet.h: New file.\n\t* doc/install.texi: Add --enable-cet/--disable-cet.\n\nlibgcc/\n\t* Makefile.in (configure_deps): Add $(srcdir)/../config/cet.m4.\n\t(CET_FLAGS): New.\n\t* config/i386/morestack.S: Include <cet.h>.\n\t(__morestack_large_model): Add _CET_ENDBR at function entrance.\n\t* config/i386/resms64.h: Include <cet.h>.\n\t* config/i386/resms64f.h: Likewise.\n\t* config/i386/resms64fx.h: Likewise.\n\t* config/i386/resms64x.h: Likewise.\n\t* config/i386/savms64.h: Likewise.\n\t* config/i386/savms64f.h: Likewise.\n\t* config/i386/t-linux (HOST_LIBGCC2_CFLAGS): Add $(CET_FLAGS).\n\t(CRTSTUFF_T_CFLAGS): Likewise.\n\t* configure.ac: Include ../config/cet.m4.\n\tSet and substitute CET_FLAGS.\n\t* configure: Regenerated.\n\nFrom-SVN: r254868", "tree": {"sha": "daa0015bf7667568564bbd9abcd7fbe77ef2942f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/daa0015bf7667568564bbd9abcd7fbe77ef2942f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/comments", "author": {"login": "itsimbal", "id": 29258612, "node_id": "MDQ6VXNlcjI5MjU4NjEy", "avatar_url": "https://avatars.githubusercontent.com/u/29258612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itsimbal", "html_url": "https://github.com/itsimbal", "followers_url": "https://api.github.com/users/itsimbal/followers", "following_url": "https://api.github.com/users/itsimbal/following{/other_user}", "gists_url": "https://api.github.com/users/itsimbal/gists{/gist_id}", "starred_url": "https://api.github.com/users/itsimbal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itsimbal/subscriptions", "organizations_url": "https://api.github.com/users/itsimbal/orgs", "repos_url": "https://api.github.com/users/itsimbal/repos", "events_url": "https://api.github.com/users/itsimbal/events{/privacy}", "received_events_url": "https://api.github.com/users/itsimbal/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a851ce04f7050dd82aa8344e7b68ee8319fb7b6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a851ce04f7050dd82aa8344e7b68ee8319fb7b6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a851ce04f7050dd82aa8344e7b68ee8319fb7b6f"}], "stats": {"total": 275, "additions": 271, "deletions": 4}, "files": [{"sha": "2bb5244caa4f1c1d3170d593337eff7c79d3136e", "filename": "config/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=1ecae1fc238a6b02b3cc2de6a24d73966bc45a03", "patch": "@@ -1,3 +1,7 @@\n+2017-11-17  Igor Tsimbalist  <igor.v.tsimbalist@intel.com>\n+\n+\t* cet.m4: New file.\n+\n 2017-11-15  Alexandre Oliva <aoliva@redhat.com>\n \n \t* bootstrap-debug-lean.mk (do-compare): Use the"}, {"sha": "715f4bded19c311ea4159678cfb5862b06a255b7", "filename": "config/cet.m4", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/config%2Fcet.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/config%2Fcet.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fcet.m4?ref=1ecae1fc238a6b02b3cc2de6a24d73966bc45a03", "patch": "@@ -0,0 +1,38 @@\n+dnl\n+dnl GCC_CET_FLAGS\n+dnl    (SHELL-CODE_HANDLER)\n+dnl\n+AC_DEFUN([GCC_CET_FLAGS],[dnl\n+GCC_ENABLE(cet, default, ,[enable Intel CET in target libraries],\n+\t   permit yes|no|default)\n+case \"$host\" in\n+  i[[34567]]86-*-linux* | x86_64-*-linux*)\n+    case \"$enable_cet\" in\n+      default)\n+\t# Check if assembler supports CET.\n+\tAC_COMPILE_IFELSE(\n+\t [AC_LANG_PROGRAM(\n+\t  [],\n+\t  [asm (\"setssbsy\");])],\n+\t [enable_cet=yes],\n+\t [enable_cet=no])\n+\t;;\n+      yes)\n+\t# Check if assembler supports CET.\n+\tAC_COMPILE_IFELSE(\n+\t [AC_LANG_PROGRAM(\n+\t  [],\n+\t  [asm (\"setssbsy\");])],\n+\t [],\n+\t [AC_MSG_ERROR([assembler with CET support is required for --enable-cet])])\n+\t;;\n+    esac\n+    ;;\n+  *)\n+    enable_cet=no\n+    ;;\n+esac\n+if test x$enable_cet = xyes; then\n+  $1=\"-fcf-protection -mcet\"\n+fi\n+])"}, {"sha": "a08574d7aafb7534a018231a0ec5fdc348516272", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ecae1fc238a6b02b3cc2de6a24d73966bc45a03", "patch": "@@ -1,3 +1,9 @@\n+2017-11-17  Igor Tsimbalist  <igor.v.tsimbalist@intel.com>\n+\n+\t* config.gcc (extra_headers): Add cet.h for x86 targets.\n+\t* config/i386/cet.h: New file.\n+\t* doc/install.texi: Add --enable-cet/--disable-cet.\n+\n 2017-11-17  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/83017"}, {"sha": "24f904455b0b49e1a9944b0fcbf112316fb1c57e", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=1ecae1fc238a6b02b3cc2de6a24d73966bc45a03", "patch": "@@ -379,7 +379,7 @@ i[34567]86-*-*)\n \t\t       avx512vbmivlintrin.h avx5124fmapsintrin.h avx5124vnniwintrin.h\n \t\t       avx512vpopcntdqintrin.h clwbintrin.h mwaitxintrin.h\n \t\t       clzerointrin.h pkuintrin.h sgxintrin.h cetintrin.h\n-\t\t       gfniintrin.h\"\n+\t\t       gfniintrin.h cet.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -404,7 +404,7 @@ x86_64-*-*)\n \t\t       avx512vbmivlintrin.h avx5124fmapsintrin.h avx5124vnniwintrin.h\n \t\t       avx512vpopcntdqintrin.h clwbintrin.h mwaitxintrin.h\n \t\t       clzerointrin.h pkuintrin.h sgxintrin.h cetintrin.h\n-\t\t       gfniintrin.h\"\n+\t\t       gfniintrin.h cet.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "73008449ee0e8fb7f98b03597d4ec744baf227a6", "filename": "gcc/config/i386/cet.h", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/gcc%2Fconfig%2Fi386%2Fcet.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/gcc%2Fconfig%2Fi386%2Fcet.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcet.h?ref=1ecae1fc238a6b02b3cc2de6a24d73966bc45a03", "patch": "@@ -0,0 +1,93 @@\n+/* ELF program property for Intel CET.\n+   Copyright (C) 2017 Free Software Foundation, Inc.\n+\n+   This file is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 3, or (at your option) any\n+   later version.\n+\n+   This file is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.\n+ */\n+\n+/* Add x86 feature with IBT and/or SHSTK bits to ELF program property\n+   if they are enabled.  Otherwise, contents in this header file are\n+   unused.  Define _CET_ENDBR for assembly codes.  _CET_ENDBR should be\n+   placed unconditionally at the entrance of a function whose address\n+   may be taken.  */\n+\n+#ifndef _CET_H_INCLUDED\n+#define _CET_H_INCLUDED\n+\n+#ifdef __ASSEMBLER__\n+\n+# ifdef __IBT__\n+#  ifdef __x86_64__\n+#   define _CET_ENDBR endbr64\n+#  else\n+#   define _CET_ENDBR endbr32\n+#  endif\n+# else\n+#  define _CET_ENDBR\n+# endif\n+\n+# ifdef __ELF__\n+#  ifdef __CET__\n+#   ifdef __IBT__\n+/* GNU_PROPERTY_X86_FEATURE_1_IBT.  */\n+#    define __PROPERTY_IBT 0x1\n+#   else\n+#    define __PROPERTY_IBT 0x0\n+#   endif\n+\n+#   ifdef __SHSTK__\n+/* GNU_PROPERTY_X86_FEATURE_1_SHSTK.  */\n+#    define __PROPERTY_SHSTK 0x2\n+#   else\n+#    define __PROPERTY_SHSTK 0x0\n+#   endif\n+\n+#   define __PROPERTY_BITS (__PROPERTY_IBT | __PROPERTY_SHSTK)\n+\n+#   ifdef __LP64__\n+#    define __PROPERTY_ALIGN 3\n+#   else\n+#    define __PROPERTY_ALIGN 2\n+#   endif\n+\n+\t.pushsection \".note.gnu.property\", \"a\"\n+\t.p2align __PROPERTY_ALIGN\n+\t.long 1f - 0f\t\t/* name length.  */\n+\t.long 4f - 1f\t\t/* data length.  */\n+\t/* NT_GNU_PROPERTY_TYPE_0.   */\n+\t.long 5\t\t\t/* note type.  */\n+0:\n+\t.asciz \"GNU\"\t\t/* vendor name.  */\n+1:\n+\t.p2align __PROPERTY_ALIGN\n+\t/* GNU_PROPERTY_X86_FEATURE_1_AND.  */\n+\t.long 0xc0000002\t/* pr_type.  */\n+\t.long 3f - 2f\t\t/* pr_datasz.  */\n+2:\n+\t/* GNU_PROPERTY_X86_FEATURE_1_XXX.  */\n+\t.long __PROPERTY_BITS\n+3:\n+\t.p2align __PROPERTY_ALIGN\n+4:\n+\t.popsection\n+#  endif /* __CET__ */\n+# endif /* __ELF__ */\n+#endif /* __ASSEMBLER__ */\n+\n+#endif /* _CET_H_INCLUDED */"}, {"sha": "a9032c9021c28a78569ddbf401074f84c7ff89ea", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=1ecae1fc238a6b02b3cc2de6a24d73966bc45a03", "patch": "@@ -2065,6 +2065,19 @@ explicitly specify the directory where they are installed.  The\n shorthand for\n @option{--with-hsa-runtime-lib=@/@var{hsainstalldir}/lib} and\n @option{--with-hsa-runtime-include=@/@var{hsainstalldir}/include}.\n+\n+@item --enable-cet\n+@itemx --disable-cet\n+Enable building target run-time libraries with control-flow\n+instrumentation, see @option{-fcf-protection} option.  When\n+@code{--enable-cet} is specified target libraries are configured\n+to add @option{-fcf-protection} and, if needed, other target\n+specific options to a set of building options.\n+\n+The option is enabled by default on Linux/x86 if target binutils\n+supports @code{Intel CET} instructions.  In this case the target\n+libraries are configured to get additional @option{-fcf-protection}\n+and @option{-mcet} options.\n @end table\n \n @subheading Cross-Compiler-Specific Options"}, {"sha": "da4d1adad91cd5b8737202711de6dd200cc248d6", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=1ecae1fc238a6b02b3cc2de6a24d73966bc45a03", "patch": "@@ -1,3 +1,21 @@\n+2017-11-17  Igor Tsimbalist  <igor.v.tsimbalist@intel.com>\n+\n+\t* Makefile.in (configure_deps): Add $(srcdir)/../config/cet.m4.\n+\t(CET_FLAGS): New.\n+\t* config/i386/morestack.S: Include <cet.h>.\n+\t(__morestack_large_model): Add _CET_ENDBR at function entrance.\n+\t* config/i386/resms64.h: Include <cet.h>.\n+\t* config/i386/resms64f.h: Likewise.\n+\t* config/i386/resms64fx.h: Likewise.\n+\t* config/i386/resms64x.h: Likewise.\n+\t* config/i386/savms64.h: Likewise.\n+\t* config/i386/savms64f.h: Likewise.\n+\t* config/i386/t-linux (HOST_LIBGCC2_CFLAGS): Add $(CET_FLAGS).\n+\t(CRTSTUFF_T_CFLAGS): Likewise.\n+\t* configure.ac: Include ../config/cet.m4.\n+\tSet and substitute CET_FLAGS.\n+\t* configure: Regenerated.\n+\n 2017-11-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config.host (*-*-solaris2*): Adapt comment for Solaris 12"}, {"sha": "eaa68b5c646a369c0280c2d38b75b87f3b205646", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=1ecae1fc238a6b02b3cc2de6a24d73966bc45a03", "patch": "@@ -171,7 +171,8 @@ configure_deps = \\\n \t$(srcdir)/../config/dfp.m4 \\\n \t$(srcdir)/../config/unwind_ipinfo.m4 \\\n \t$(srcdir)/../config/gthr.m4 \\\n-\t$(srcdir)/../config/sjlj.m4\n+\t$(srcdir)/../config/sjlj.m4 \\\n+\t$(srcdir)/../config/cet.m4\n \n $(srcdir)/configure: @MAINT@ $(srcdir)/configure.ac $(configure_deps)\n \tcd $(srcdir) && $(AUTOCONF)\n@@ -254,6 +255,8 @@ HOST_LIBGCC2_CFLAGS =\n \n PICFLAG = @PICFLAG@\n \n+CET_FLAGS = @CET_FLAGS@\n+\n # Defined in libgcc2.c, included only in the static library.\n LIB2FUNCS_ST = _eprintf __gcc_bcmp\n "}, {"sha": "79d5db949e909afa787d36e05158871ca2a0a0b5", "filename": "libgcc/config/i386/morestack.S", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/libgcc%2Fconfig%2Fi386%2Fmorestack.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/libgcc%2Fconfig%2Fi386%2Fmorestack.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fmorestack.S?ref=1ecae1fc238a6b02b3cc2de6a24d73966bc45a03", "patch": "@@ -91,6 +91,8 @@\n # __morestack to call __morestack_non_split instead.  We just bump the\n # requested stack space by 16K.\n \n+#include <cet.h>\n+\n \t.global __morestack_non_split\n \t.hidden\t__morestack_non_split\n \n@@ -701,6 +703,7 @@ DW.ref.__gcc_personality_v0:\n __morestack_large_model:\n \n \t.cfi_startproc\n+\t_CET_ENDBR\n \n \tmovq\t%r10, %r11\n \tandl\t$0xffffffff, %r10d"}, {"sha": "45a42da158fb9265146eb03624c8403d06b59ec8", "filename": "libgcc/config/i386/resms64.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/libgcc%2Fconfig%2Fi386%2Fresms64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/libgcc%2Fconfig%2Fi386%2Fresms64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fresms64.h?ref=1ecae1fc238a6b02b3cc2de6a24d73966bc45a03", "patch": "@@ -23,6 +23,8 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n+#include <cet.h>\n+\n #ifdef __x86_64__\n #include \"i386-asm.h\"\n "}, {"sha": "00805b33a1eab11879a708953752bd5dbaf7c07a", "filename": "libgcc/config/i386/resms64f.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/libgcc%2Fconfig%2Fi386%2Fresms64f.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/libgcc%2Fconfig%2Fi386%2Fresms64f.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fresms64f.h?ref=1ecae1fc238a6b02b3cc2de6a24d73966bc45a03", "patch": "@@ -23,6 +23,8 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n+#include <cet.h>\n+\n #ifdef __x86_64__\n #include \"i386-asm.h\"\n "}, {"sha": "85083cd1b0766bef570ee920118dea26466e911b", "filename": "libgcc/config/i386/resms64fx.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/libgcc%2Fconfig%2Fi386%2Fresms64fx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/libgcc%2Fconfig%2Fi386%2Fresms64fx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fresms64fx.h?ref=1ecae1fc238a6b02b3cc2de6a24d73966bc45a03", "patch": "@@ -23,6 +23,8 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n+#include <cet.h>\n+\n #ifdef __x86_64__\n #include \"i386-asm.h\"\n "}, {"sha": "fcf885e23111fecc4f39e7ac3d8b0e83ed89ebc4", "filename": "libgcc/config/i386/resms64x.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/libgcc%2Fconfig%2Fi386%2Fresms64x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/libgcc%2Fconfig%2Fi386%2Fresms64x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fresms64x.h?ref=1ecae1fc238a6b02b3cc2de6a24d73966bc45a03", "patch": "@@ -23,6 +23,8 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n+#include <cet.h>\n+\n #ifdef __x86_64__\n #include \"i386-asm.h\"\n "}, {"sha": "570902daf9d9baaffb59b6029705e02d86f8c760", "filename": "libgcc/config/i386/savms64.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/libgcc%2Fconfig%2Fi386%2Fsavms64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/libgcc%2Fconfig%2Fi386%2Fsavms64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fsavms64.h?ref=1ecae1fc238a6b02b3cc2de6a24d73966bc45a03", "patch": "@@ -23,6 +23,8 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n+#include <cet.h>\n+\n #ifdef __x86_64__\n #include \"i386-asm.h\"\n "}, {"sha": "51c9d9704ae59adde414a352260c446f314cf32e", "filename": "libgcc/config/i386/savms64f.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/libgcc%2Fconfig%2Fi386%2Fsavms64f.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/libgcc%2Fconfig%2Fi386%2Fsavms64f.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fsavms64f.h?ref=1ecae1fc238a6b02b3cc2de6a24d73966bc45a03", "patch": "@@ -23,6 +23,8 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n+#include <cet.h>\n+\n #ifdef __x86_64__\n #include \"i386-asm.h\"\n "}, {"sha": "8506a6357908bf5ea0414145edac23929dcc390c", "filename": "libgcc/config/i386/t-linux", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/libgcc%2Fconfig%2Fi386%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/libgcc%2Fconfig%2Fi386%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Ft-linux?ref=1ecae1fc238a6b02b3cc2de6a24d73966bc45a03", "patch": "@@ -3,4 +3,5 @@\n # t-slibgcc-elf-ver and t-linux\n SHLIB_MAPFILES = libgcc-std.ver $(srcdir)/config/i386/libgcc-glibc.ver\n \n-HOST_LIBGCC2_CFLAGS += -mlong-double-80 -DUSE_ELF_SYMVER\n+HOST_LIBGCC2_CFLAGS += -mlong-double-80 -DUSE_ELF_SYMVER $(CET_FLAGS)\n+CRTSTUFF_T_CFLAGS += $(CET_FLAGS)"}, {"sha": "38a28c2a48fd81ca4f9baf8ec370b4c56682af1c", "filename": "libgcc/configure", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=1ecae1fc238a6b02b3cc2de6a24d73966bc45a03", "patch": "@@ -573,6 +573,7 @@ vis_hide\n real_host_noncanonical\n accel_dir_suffix\n force_explicit_eh_registry\n+CET_FLAGS\n fixed_point\n enable_decimal_float\n decimal_float\n@@ -675,6 +676,7 @@ with_build_libsubdir\n enable_largefile\n enable_decimal_float\n with_system_libunwind\n+enable_cet\n enable_explicit_exception_frame_registration\n with_glibc_version\n enable_tls\n@@ -1314,6 +1316,8 @@ Optional Features:\n \t\t\tenable decimal float extension to C.  Selecting 'bid'\n \t\t\tor 'dpd' choses which decimal floating point format\n \t\t\tto use\n+  --enable-cet            enable Intel CET in target libraries\n+                          [default=default]\n   --enable-explicit-exception-frame-registration\n                           register exception tables explicitly at module\n                           start, for use e.g. for compatibility with\n@@ -4773,6 +4777,74 @@ fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_sjlj_exceptions\" >&5\n $as_echo \"$ac_cv_sjlj_exceptions\" >&6; }\n \n+ # Check whether --enable-cet was given.\n+if test \"${enable_cet+set}\" = set; then :\n+  enableval=$enable_cet;\n+      case \"$enableval\" in\n+       yes|no|default) ;;\n+       *) as_fn_error \"Unknown argument to enable/disable cet\" \"$LINENO\" 5 ;;\n+                          esac\n+\n+else\n+  enable_cet=default\n+fi\n+\n+\n+case \"$host\" in\n+  i[34567]86-*-linux* | x86_64-*-linux*)\n+    case \"$enable_cet\" in\n+      default)\n+\t# Check if assembler supports CET.\n+\tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+asm (\"setssbsy\");\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  enable_cet=yes\n+else\n+  enable_cet=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\t;;\n+      yes)\n+\t# Check if assembler supports CET.\n+\tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+asm (\"setssbsy\");\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+\n+else\n+  as_fn_error \"assembler with CET support is required for --enable-cet\" \"$LINENO\" 5\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\t;;\n+    esac\n+    ;;\n+  *)\n+    enable_cet=no\n+    ;;\n+esac\n+if test x$enable_cet = xyes; then\n+  CET_FLAGS=\"-fcf-protection -mcet\"\n+fi\n+\n+\n+\n # Check whether --enable-explicit-exception-frame-registration was given.\n if test \"${enable_explicit_exception_frame_registration+set}\" = set; then :\n   enableval=$enable_explicit_exception_frame_registration;"}, {"sha": "6e76a68bc0ce82b147e86bc3598b1d3e7ca7c17b", "filename": "libgcc/configure.ac", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ecae1fc238a6b02b3cc2de6a24d73966bc45a03/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=1ecae1fc238a6b02b3cc2de6a24d73966bc45a03", "patch": "@@ -11,6 +11,7 @@ sinclude(../config/dfp.m4)\n sinclude(../config/unwind_ipinfo.m4)\n sinclude(../config/gthr.m4)\n sinclude(../config/sjlj.m4)\n+sinclude(../config/cet.m4)\n \n AC_PREREQ(2.64)\n AC_INIT([GNU C Runtime Library], 1.0,,[libgcc])\n@@ -236,6 +237,9 @@ GCC_CHECK_UNWIND_GETIPINFO\n # Check if the compiler is configured for setjmp/longjmp exceptions.\n GCC_CHECK_SJLJ_EXCEPTIONS\n \n+GCC_CET_FLAGS(CET_FLAGS)\n+AC_SUBST(CET_FLAGS)\n+\n AC_ARG_ENABLE([explicit-exception-frame-registration],\n   [AC_HELP_STRING([--enable-explicit-exception-frame-registration],\n      [register exception tables explicitly at module start, for use"}]}