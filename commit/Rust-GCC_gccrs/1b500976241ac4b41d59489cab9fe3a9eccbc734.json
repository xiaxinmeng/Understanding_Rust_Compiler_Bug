{"sha": "1b500976241ac4b41d59489cab9fe3a9eccbc734", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI1MDA5NzYyNDFhYzRiNDFkNTk0ODljYWI5ZmUzYTllY2NiYzczNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-02-28T15:36:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-02-28T15:36:37Z"}, "message": "re PR middle-end/46790 (EH failures in libstdc++ testsuite with --gc-sections and GNU ld 2.18)\n\n\tPR middle-end/46790\n\t* configure.ac (HAVE_LD_EH_GC_SECTIONS_BUG): New test.\n\t* configure: Regenerated.\n\t* config.in: Regenerated.\n\t* varasm.c (default_function_section): Return NULL\n\tif HAVE_LD_EH_GC_SECTIONS_BUG and decl has implicit\n\tsection name.\n\nFrom-SVN: r170565", "tree": {"sha": "bcf30f81c91016458a27aa522a244c86f6230419", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcf30f81c91016458a27aa522a244c86f6230419"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b500976241ac4b41d59489cab9fe3a9eccbc734", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b500976241ac4b41d59489cab9fe3a9eccbc734", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b500976241ac4b41d59489cab9fe3a9eccbc734", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b500976241ac4b41d59489cab9fe3a9eccbc734/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "68ade9e4e84617fd5c613618cfdc0cc1fa6d6d81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68ade9e4e84617fd5c613618cfdc0cc1fa6d6d81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68ade9e4e84617fd5c613618cfdc0cc1fa6d6d81"}], "stats": {"total": 118, "additions": 118, "deletions": 0}, "files": [{"sha": "7c3d538e4e35907d588da78568f4afea847d1281", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b500976241ac4b41d59489cab9fe3a9eccbc734/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b500976241ac4b41d59489cab9fe3a9eccbc734/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b500976241ac4b41d59489cab9fe3a9eccbc734", "patch": "@@ -1,3 +1,13 @@\n+2011-02-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/46790\n+\t* configure.ac (HAVE_LD_EH_GC_SECTIONS_BUG): New test.\n+\t* configure: Regenerated.\n+\t* config.in: Regenerated.\n+\t* varasm.c (default_function_section): Return NULL\n+\tif HAVE_LD_EH_GC_SECTIONS_BUG and decl has implicit\n+\tsection name.\n+\n 2011-02-28  Martin Jambor  <mjambor@suse.cz>\n \n \t* ipa-inline.c (cgraph_decide_inlining_of_small_functions): Fix"}, {"sha": "584ec65b2b7c5b96957c47a8f7e4113c01bbc658", "filename": "gcc/config.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b500976241ac4b41d59489cab9fe3a9eccbc734/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b500976241ac4b41d59489cab9fe3a9eccbc734/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=1b500976241ac4b41d59489cab9fe3a9eccbc734", "patch": "@@ -1171,6 +1171,13 @@\n #endif\n \n \n+/* Define if your linker has buggy garbage collection of sections support when\n+   .text.startup.foo like sections are used. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_LD_EH_GC_SECTIONS_BUG\n+#endif\n+\n+\n /* Define if your PowerPC64 linker supports a large TOC. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_LD_LARGE_TOC"}, {"sha": "a45494698167dff4cdff06bb67015e1130d9dcc8", "filename": "gcc/configure", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b500976241ac4b41d59489cab9fe3a9eccbc734/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b500976241ac4b41d59489cab9fe3a9eccbc734/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=1b500976241ac4b41d59489cab9fe3a9eccbc734", "patch": "@@ -25445,6 +25445,53 @@ fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_ld_eh_gc_sections\" >&5\n $as_echo \"$gcc_cv_ld_eh_gc_sections\" >&6; }\n \n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking linker EH garbage collection of sections bug\" >&5\n+$as_echo_n \"checking linker EH garbage collection of sections bug... \" >&6; }\n+gcc_cv_ld_eh_gc_sections_bug=no\n+if test $in_tree_ld = yes ; then\n+  if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -lt 19 -o \"$gcc_cv_gld_major_version\" -lt 2 \\\n+     && test $in_tree_ld_is_elf = yes; then\n+    gcc_cv_ld_eh_gc_sections_bug=yes\n+  fi\n+elif test x$gcc_cv_as != x -a x$gcc_cv_ld != x -a x$gcc_cv_objdump != x -a x$gcc_cv_as_comdat_group = xyes; then\n+  gcc_cv_ld_eh_gc_sections_bug=yes\n+  cat > conftest.s <<EOF\n+\t.section\t.text\n+.globl _start\n+\t.type _start, @function\n+_start:\n+\t.long foo\n+\t.size _start, .-_start\n+\t.section\t.text.startup.foo,\"ax\",@progbits\n+\t.type foo, @function\n+foo:\n+\t.long 0\n+\t.size foo, .-foo\n+\t.section\t.gcc_except_table.foo,\"a\",@progbits\n+.L0:\n+\t.long 0\n+\t.section\t.eh_frame,\"a\",@progbits\n+\t.long .L0\n+EOF\n+  if $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1; then\n+    if $gcc_cv_ld -o conftest conftest.o --entry=_start --gc-sections 2>&1 \\\n+\t | grep \"gc-sections option ignored\" > /dev/null; then\n+      :\n+    elif $gcc_cv_objdump -h conftest 2> /dev/null \\\n+\t | grep gcc_except_table > /dev/null; then\n+      gcc_cv_ld_eh_gc_sections_bug=no\n+    fi\n+  fi\n+  rm -f conftest.s conftest.o conftest\n+fi\n+if test x$gcc_cv_ld_eh_gc_sections_bug = xyes; then\n+\n+$as_echo \"#define HAVE_LD_EH_GC_SECTIONS_BUG 1\" >>confdefs.h\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_ld_eh_gc_sections_bug\" >&5\n+$as_echo \"$gcc_cv_ld_eh_gc_sections_bug\" >&6; }\n+\n # --------\n # UNSORTED\n # --------"}, {"sha": "03a8cef47d62003b734ee6d9d387f982c00c1659", "filename": "gcc/configure.ac", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b500976241ac4b41d59489cab9fe3a9eccbc734/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b500976241ac4b41d59489cab9fe3a9eccbc734/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=1b500976241ac4b41d59489cab9fe3a9eccbc734", "patch": "@@ -4097,6 +4097,51 @@ if test x$gcc_cv_ld_eh_gc_sections = xyes; then\n fi\n AC_MSG_RESULT($gcc_cv_ld_eh_gc_sections)\n \n+AC_MSG_CHECKING(linker EH garbage collection of sections bug)\n+gcc_cv_ld_eh_gc_sections_bug=no\n+if test $in_tree_ld = yes ; then\n+  if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -lt 19 -o \"$gcc_cv_gld_major_version\" -lt 2 \\\n+     && test $in_tree_ld_is_elf = yes; then\n+    gcc_cv_ld_eh_gc_sections_bug=yes\n+  fi\n+elif test x$gcc_cv_as != x -a x$gcc_cv_ld != x -a x$gcc_cv_objdump != x -a x$gcc_cv_as_comdat_group = xyes; then\n+  gcc_cv_ld_eh_gc_sections_bug=yes\n+  cat > conftest.s <<EOF\n+\t.section\t.text\n+.globl _start\n+\t.type _start, @function\n+_start:\n+\t.long foo\n+\t.size _start, .-_start\n+\t.section\t.text.startup.foo,\"ax\",@progbits\n+\t.type foo, @function\n+foo:\n+\t.long 0\n+\t.size foo, .-foo\n+\t.section\t.gcc_except_table.foo,\"a\",@progbits\n+.L0:\n+\t.long 0\n+\t.section\t.eh_frame,\"a\",@progbits\n+\t.long .L0\n+EOF\n+  if $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1; then\n+    if $gcc_cv_ld -o conftest conftest.o --entry=_start --gc-sections 2>&1 \\\n+\t | grep \"gc-sections option ignored\" > /dev/null; then\n+      :\n+    elif $gcc_cv_objdump -h conftest 2> /dev/null \\\n+\t | grep gcc_except_table > /dev/null; then\n+      gcc_cv_ld_eh_gc_sections_bug=no\n+    fi\n+  fi\n+  rm -f conftest.s conftest.o conftest\n+fi\n+if test x$gcc_cv_ld_eh_gc_sections_bug = xyes; then\n+\tAC_DEFINE(HAVE_LD_EH_GC_SECTIONS_BUG, 1,\n+  [Define if your linker has buggy garbage collection of\n+   sections support when .text.startup.foo like sections are used.])\n+fi\n+AC_MSG_RESULT($gcc_cv_ld_eh_gc_sections_bug)\n+\n # --------\n # UNSORTED\n # --------"}, {"sha": "9887fe41b66a2bf06dfd6e78de444240f0584db6", "filename": "gcc/varasm.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b500976241ac4b41d59489cab9fe3a9eccbc734/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b500976241ac4b41d59489cab9fe3a9eccbc734/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=1b500976241ac4b41d59489cab9fe3a9eccbc734", "patch": "@@ -554,6 +554,15 @@ section *\n default_function_section (tree decl, enum node_frequency freq,\n \t\t\t  bool startup, bool exit)\n {\n+#if defined HAVE_LD_EH_GC_SECTIONS && defined HAVE_LD_EH_GC_SECTIONS_BUG\n+  /* Old GNU linkers have buggy --gc-section support, which sometimes\n+     results in .gcc_except_table* sections being garbage collected.  */\n+  if (decl\n+      && DECL_SECTION_NAME (decl)\n+      && DECL_HAS_IMPLICIT_SECTION_NAME_P (decl))\n+    return NULL;\n+#endif\n+\n   if (!flag_reorder_functions\n       || !targetm.have_named_sections)\n     return NULL;"}]}