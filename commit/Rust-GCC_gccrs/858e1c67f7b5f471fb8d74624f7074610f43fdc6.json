{"sha": "858e1c67f7b5f471fb8d74624f7074610f43fdc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU4ZTFjNjdmN2I1ZjQ3MWZiOGQ3NDYyNGY3MDc0NjEwZjQzZmRjNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-11T00:12:45Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-11T00:12:45Z"}, "message": "(FUNCTION_{PRO,EPI}LOGUE): No longer defined.\n\n(FUNCTION_EXTRA_EPILOGUE): Define.\n\nFrom-SVN: r8418", "tree": {"sha": "1fcf682af7238b718864b41abb3ecabcb56ffc11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fcf682af7238b718864b41abb3ecabcb56ffc11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/858e1c67f7b5f471fb8d74624f7074610f43fdc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/858e1c67f7b5f471fb8d74624f7074610f43fdc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/858e1c67f7b5f471fb8d74624f7074610f43fdc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/858e1c67f7b5f471fb8d74624f7074610f43fdc6/comments", "author": null, "committer": null, "parents": [{"sha": "504c00193f0a846ca3c5cf28156cc595ce630699", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/504c00193f0a846ca3c5cf28156cc595ce630699", "html_url": "https://github.com/Rust-GCC/gccrs/commit/504c00193f0a846ca3c5cf28156cc595ce630699"}], "stats": {"total": 102, "additions": 7, "deletions": 95}, "files": [{"sha": "0ef92a02e9d81f87b636b3ffcadd43522a547463", "filename": "gcc/config/m68k/tower-as.h", "status": "modified", "additions": 7, "deletions": 95, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858e1c67f7b5f471fb8d74624f7074610f43fdc6/gcc%2Fconfig%2Fm68k%2Ftower-as.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858e1c67f7b5f471fb8d74624f7074610f43fdc6/gcc%2Fconfig%2Fm68k%2Ftower-as.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ftower-as.h?ref=858e1c67f7b5f471fb8d74624f7074610f43fdc6", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.\n    For NCR Tower 32/4x0 and 32/6x0 running System V Release 3.\n-   Copyright (C) 1990, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1990, 1993, 1994 Free Software Foundation, Inc.\n    Written by Robert Andersson (ra@intsys.no), International Systems,\n    Oslo, Norway.\n \n@@ -175,100 +175,12 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define FUNCTION_PROFILER(FILE, LABEL_NO)\t\\\n     fprintf (FILE, \"\\tmov.l &LP%%%d,%%a0\\n\\tjsr mcount%%\\n\", (LABEL_NO))\n \n-/* The prologue is identical to the one in m68k.h except that the\n-   assembler syntax is different.  */\n-\n-#undef FUNCTION_PROLOGUE\n-#define FUNCTION_PROLOGUE(FILE, SIZE)     \\\n-{ register int regno;\t\t\t\t\t\t\\\n-  register int mask = 0;\t\t\t\t\t\\\n-  extern char call_used_regs[];\t\t\t\t\t\\\n-  int fsize = ((SIZE) + 3) & -4;\t\t\t\t\\\n-  if (frame_pointer_needed)\t\t\t\t\t\\\n-    { if (TARGET_68020 || fsize < 0x8000)\t\t\t\\\n-        fprintf (FILE, \"\\tlink %%a6,&%d\\n\", -fsize);\t\t\\\n-      else\t\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"\\tlink %%a6,&0\\n\\tsub.l &%d,%%sp\\n\", fsize); }  \\\n-  for (regno = 16; regno < 24; regno++)\t\t\t\t\\\n-    if (regs_ever_live[regno] && ! call_used_regs[regno])\t\\\n-       mask |= 1 << (regno - 16);\t\t\t\t\\\n-  if ((mask & 0xff) != 0)\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tfmovm &0x%x,-(%%sp)\\n\", mask & 0xff);     \\\n-  mask = 0;\t\t\t\t\t\t\t\\\n-  for (regno = 0; regno < 16; regno++)\t\t\t\t\\\n-    if (regs_ever_live[regno] && ! call_used_regs[regno])\t\\\n-       mask |= 1 << (15 - regno);\t\t\t\t\\\n-  if (frame_pointer_needed)\t\t\t\t\t\\\n-    mask &= ~ (1 << (15-FRAME_POINTER_REGNUM));\t\t\t\\\n-  if (exact_log2 (mask) >= 0)\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tmov.l %s,-(%%sp)\\n\", reg_names[15 - exact_log2 (mask)]); \\\n-  else if (mask) fprintf (FILE, \"\\tmovm.l &0x%x,-(%%sp)\\n\", mask); }\n-\n-/* The epilogue is identical to the one in m68k.h except that:\n-   a) The assembler syntax is different.\n-   b) Pointers are returned both in %d0 and %a0.\n-   c) FUNCTION_EXTRA_EPILOGUE is not needed.  */\n-\n-#undef FUNCTION_EPILOGUE\n-#define FUNCTION_EPILOGUE(FILE, SIZE) \\\n-{ register int regno;\t\t\t\t\t\t\\\n-  register int mask, fmask;\t\t\t\t\t\\\n-  register int nregs;\t\t\t\t\t\t\\\n-  int offset, foffset;\t\t   \t                        \\\n-  extern char call_used_regs[];\t\t\t\t\t\\\n-  int fsize = ((SIZE) + 3) & -4;\t\t\t\t\\\n-  int big = 0;\t\t\t\t\t\t\t\\\n-  nregs = 0;  fmask = 0;\t\t  \t\t\t\\\n-  for (regno = 16; regno < 24; regno++)\t\t\t\t\\\n-    if (regs_ever_live[regno] && ! call_used_regs[regno])\t\\\n-      { nregs++; fmask |= 1 << (23 - regno); }\t\t\t\\\n-  foffset = nregs * 12;\t\t\t\t\t\t\\\n-  nregs = 0;  mask = 0;\t\t\t\t\t\t\\\n-  if (frame_pointer_needed) regs_ever_live[FRAME_POINTER_REGNUM] = 0; \\\n-  for (regno = 0; regno < 16; regno++)\t\t\t\t\\\n-    if (regs_ever_live[regno] && ! call_used_regs[regno])\t\\\n-      { nregs++; mask |= 1 << regno; }\t\t\t\t\\\n-  offset = foffset + nregs * 4;\t\t\t\t\t\\\n-  if (offset + fsize >= 0x8000 \t\t\t\t\t\\\n-      && frame_pointer_needed \t\t\t\t\t\\\n-      && (mask || fmask))\t \t\t\t\t\\\n-    { fprintf (FILE, \"\\tmov.l &%d,%%a0\\n\", -fsize);\t\t\\\n-      fsize = 0, big = 1; }\t\t\t\t\t\\\n-  if (exact_log2 (mask) >= 0) {\t\t\t\t\t\\\n-    if (big)\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tmov.l -%d(%%a6,%%a0.l),%s\\n\",\t\t\\\n-\t       offset + fsize, reg_names[exact_log2 (mask)]);\t\\\n-    else if (! frame_pointer_needed)\t\t\t\t\\\n-      fprintf (FILE, \"\\tmov.l (%%sp)+,%s\\n\",\t\t\t\\\n-\t       reg_names[exact_log2 (mask)]);\t\t\t\\\n-    else\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tmov.l -%d(%%a6),%s\\n\",\t\t\t\\\n-\t       offset + fsize, reg_names[exact_log2 (mask)]); }\t\\\n-  else if (mask) {\t\t\t\t\t\t\\\n-    if (big)\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tmovm.l -%d(%%a6,%%a0.l),&0x%x\\n\",\t\\\n-\t       offset + fsize, mask);\t\t\t\t\\\n-    else if (! frame_pointer_needed)\t\t\t\t\\\n-      fprintf (FILE, \"\\tmovm.l (%%sp)+,&0x%x\\n\", mask);\t\t\\\n-    else\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tmovm.l -%d(%%a6),&0x%x\\n\",\t\t\\\n-\t       offset + fsize, mask); }\t\t\t\t\\\n-  if (fmask) {\t\t\t\t\t\t\t\\\n-    if (big)\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tfmovm -%d(%%a6,%%a0.l),&0x%x\\n\",\t\\\n-\t       foffset + fsize, fmask);\t\t\t\t\\\n-    else if (! frame_pointer_needed)\t\t\t\t\\\n-      fprintf (FILE, \"\\tfmovm (%%sp)+,&0x%x\\n\", fmask);\t\t\\\n-    else\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tfmovm -%d(%%a6),&0x%x\\n\",\t\t\\\n-\t       foffset + fsize, fmask); }\t\t\t\\\n-  if (current_function_returns_pointer)                         \\\n-    fprintf (FILE, \"\\tmov.l %%d0,%%a0\\n\");                      \\\n-  if (frame_pointer_needed)\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tunlk %%a6\\n\");\t\t\t\t\\\n-  if (current_function_pops_args)\t\t\t\t\\\n-    fprintf (FILE, \"\\trtd &%d\\n\", current_function_pops_args);\t\\\n-  else fprintf (FILE, \"\\trts\\n\"); }\n+#undef FUNCTION_EXTRA_EPILOGUE\n+#define FUNCTION_EXTRA_EPILOGUE(FILE, SIZE)\t\t\t\t\\\n+  { extern int current_function_returns_pointer;\t\t\t\\\n+    if ((current_function_returns_pointer) &&\t\t\t\t\\\n+      ! find_equiv_reg (0, get_last_insn (), 0, 0, 0, 8, Pmode))        \\\n+      asm_fprintf (FILE, \"\\tmovl %Rd0,%Ra0\\n\"); } \n \n /* This is how to output an insn to push a register on the stack.\n    It need not be very fast code.  */"}]}