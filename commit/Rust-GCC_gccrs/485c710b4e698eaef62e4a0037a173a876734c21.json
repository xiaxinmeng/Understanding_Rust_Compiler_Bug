{"sha": "485c710b4e698eaef62e4a0037a173a876734c21", "node_id": "C_kwDOANBUbNoAKDQ4NWM3MTBiNGU2OThlYWVmNjJlNGEwMDM3YTE3M2E4NzY3MzRjMjE", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-08T20:57:26Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T07:15:00Z"}, "message": "RISC-V: Add vmadc C++ API tests\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vmadc_vv-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmadc_vv-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmadc_vv-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmadc_vvm-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmadc_vvm-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmadc_vvm-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmadc_vx_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmadc_vx_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmadc_vx_rv32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmadc_vx_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmadc_vx_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmadc_vx_rv64-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmadc_vxm_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmadc_vxm_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmadc_vxm_rv32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmadc_vxm_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmadc_vxm_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmadc_vxm_rv64-3.C: New test.", "tree": {"sha": "aa92650f9d4acaa5abc0d3699e87b2e69e1f6e82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa92650f9d4acaa5abc0d3699e87b2e69e1f6e82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/485c710b4e698eaef62e4a0037a173a876734c21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/485c710b4e698eaef62e4a0037a173a876734c21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/485c710b4e698eaef62e4a0037a173a876734c21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/485c710b4e698eaef62e4a0037a173a876734c21/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd5c5d2eaf1baecac73d21350fc257aa5f50f8bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd5c5d2eaf1baecac73d21350fc257aa5f50f8bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd5c5d2eaf1baecac73d21350fc257aa5f50f8bd"}], "stats": {"total": 5238, "additions": 5238, "deletions": 0}, "files": [{"sha": "f0f3855d0b547763dcc9e8c9e26c5ead29813c6a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadc_vv-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vv-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vv-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vv-1.C?ref=485c710b4e698eaef62e4a0037a173a876734c21", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc(vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vint8m8_t op1,vint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint16m8_t op1,vint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint32m8_t op1,vint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint64m1_t op1,vint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint64m2_t op1,vint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint64m4_t op1,vint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint64m8_t op1,vint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vuint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "adfe4ae9fd4fe6c44572855f6665ea4e2b61cf6c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadc_vv-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vv-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vv-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vv-2.C?ref=485c710b4e698eaef62e4a0037a173a876734c21", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc(vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vint8m8_t op1,vint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint16m8_t op1,vint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint32m8_t op1,vint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint64m1_t op1,vint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint64m2_t op1,vint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint64m4_t op1,vint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint64m8_t op1,vint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vuint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "198581844c632ab2135f0108c7a6af589fc4691a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadc_vv-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vv-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vv-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vv-3.C?ref=485c710b4e698eaef62e4a0037a173a876734c21", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc(vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vint8m8_t op1,vint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint16m8_t op1,vint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint32m8_t op1,vint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint64m1_t op1,vint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint64m2_t op1,vint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint64m4_t op1,vint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint64m8_t op1,vint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint8mf8_t op1,vuint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint8mf4_t op1,vuint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint8mf2_t op1,vuint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint8m1_t op1,vuint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint8m2_t op1,vuint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint8m4_t op1,vuint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vuint8m8_t op1,vuint8m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint16mf4_t op1,vuint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint16mf2_t op1,vuint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint16m1_t op1,vuint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint16m2_t op1,vuint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint16m4_t op1,vuint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint16m8_t op1,vuint16m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint32mf2_t op1,vuint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint32m1_t op1,vuint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint32m2_t op1,vuint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint32m4_t op1,vuint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint32m8_t op1,vuint32m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint64m1_t op1,vuint64m1_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint64m2_t op1,vuint64m2_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint64m4_t op1,vuint64m4_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint64m8_t op1,vuint64m8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "4fae89cc4046dc08a033dde55179c2290cbc0c4b", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadc_vvm-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vvm-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vvm-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vvm-1.C?ref=485c710b4e698eaef62e4a0037a173a876734c21", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc(vint8mf8_t op1,vint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint8mf4_t op1,vint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint8mf2_t op1,vint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint8m1_t op1,vint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint8m2_t op1,vint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint8m4_t op1,vint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vint8m8_t op1,vint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint16mf4_t op1,vint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint16mf2_t op1,vint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint16m1_t op1,vint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint16m2_t op1,vint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint16m4_t op1,vint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint16m8_t op1,vint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint32mf2_t op1,vint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint32m1_t op1,vint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint32m2_t op1,vint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint32m4_t op1,vint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint32m8_t op1,vint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint64m1_t op1,vint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint64m2_t op1,vint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint64m4_t op1,vint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint64m8_t op1,vint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint8m1_t op1,vuint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint8m2_t op1,vuint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint8m4_t op1,vuint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vuint8m8_t op1,vuint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint16m1_t op1,vuint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint16m2_t op1,vuint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint16m4_t op1,vuint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint16m8_t op1,vuint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint32m1_t op1,vuint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint32m2_t op1,vuint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint32m4_t op1,vuint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint32m8_t op1,vuint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint64m1_t op1,vuint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint64m2_t op1,vuint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint64m4_t op1,vuint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint64m8_t op1,vuint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "459634ff3c8035ba48fe80f0e34b3f532d20c19c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadc_vvm-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vvm-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vvm-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vvm-2.C?ref=485c710b4e698eaef62e4a0037a173a876734c21", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc(vint8mf8_t op1,vint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint8mf4_t op1,vint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint8mf2_t op1,vint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint8m1_t op1,vint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint8m2_t op1,vint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint8m4_t op1,vint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vint8m8_t op1,vint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint16mf4_t op1,vint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint16mf2_t op1,vint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint16m1_t op1,vint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint16m2_t op1,vint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint16m4_t op1,vint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint16m8_t op1,vint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint32mf2_t op1,vint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint32m1_t op1,vint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint32m2_t op1,vint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint32m4_t op1,vint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint32m8_t op1,vint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint64m1_t op1,vint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint64m2_t op1,vint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint64m4_t op1,vint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint64m8_t op1,vint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint8m1_t op1,vuint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint8m2_t op1,vuint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint8m4_t op1,vuint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vuint8m8_t op1,vuint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint16m1_t op1,vuint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint16m2_t op1,vuint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint16m4_t op1,vuint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint16m8_t op1,vuint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint32m1_t op1,vuint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint32m2_t op1,vuint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint32m4_t op1,vuint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint32m8_t op1,vuint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint64m1_t op1,vuint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint64m2_t op1,vuint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint64m4_t op1,vuint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint64m8_t op1,vuint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "a42cb444c9cc84fd625da09b32f437997b4f68b9", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadc_vvm-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vvm-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vvm-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vvm-3.C?ref=485c710b4e698eaef62e4a0037a173a876734c21", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc(vint8mf8_t op1,vint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint8mf4_t op1,vint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint8mf2_t op1,vint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint8m1_t op1,vint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint8m2_t op1,vint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint8m4_t op1,vint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vint8m8_t op1,vint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint16mf4_t op1,vint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint16mf2_t op1,vint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint16m1_t op1,vint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint16m2_t op1,vint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint16m4_t op1,vint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint16m8_t op1,vint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint32mf2_t op1,vint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint32m1_t op1,vint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint32m2_t op1,vint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint32m4_t op1,vint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint32m8_t op1,vint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint64m1_t op1,vint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint64m2_t op1,vint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint64m4_t op1,vint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint64m8_t op1,vint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint8m1_t op1,vuint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint8m2_t op1,vuint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint8m4_t op1,vuint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vuint8m8_t op1,vuint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint16m1_t op1,vuint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint16m2_t op1,vuint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint16m4_t op1,vuint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint16m8_t op1,vuint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint32m1_t op1,vuint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint32m2_t op1,vuint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint32m4_t op1,vuint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint32m8_t op1,vuint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint64m1_t op1,vuint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint64m2_t op1,vuint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint64m4_t op1,vuint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint64m8_t op1,vuint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "bb2e9172a4f7e9ee8c51e021a260924758de48ba", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadc_vx_rv32-1.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv32-1.C?ref=485c710b4e698eaef62e4a0037a173a876734c21", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */"}, {"sha": "09759341f6153bc9ad6ca61f48abea6c4b338522", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadc_vx_rv32-2.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv32-2.C?ref=485c710b4e698eaef62e4a0037a173a876734c21", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */"}, {"sha": "26a74e2830ff863cfcbb1d87a30169d6774284c5", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadc_vx_rv32-3.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv32-3.C?ref=485c710b4e698eaef62e4a0037a173a876734c21", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmadc\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */"}, {"sha": "111edbbd24b71fc780f052abd16ddd42dcf22650", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadc_vx_rv64-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv64-1.C?ref=485c710b4e698eaef62e4a0037a173a876734c21", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */"}, {"sha": "6bbd96b4f9e3905ddf62b9b498e2e83add38752b", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadc_vx_rv64-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv64-2.C?ref=485c710b4e698eaef62e4a0037a173a876734c21", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */"}, {"sha": "117081d6c3d4291bd46ab9b051dd36c855f4fb88", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadc_vx_rv64-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vx_rv64-3.C?ref=485c710b4e698eaef62e4a0037a173a876734c21", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */"}, {"sha": "a116933b1ce413d9bb9994834a69a9356f778bde", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadc_vxm_rv32-1.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv32-1.C?ref=485c710b4e698eaef62e4a0037a173a876734c21", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc(vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */"}, {"sha": "30f89ea8895c39b1f29b5bc72b567c232106acaf", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadc_vxm_rv32-2.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv32-2.C?ref=485c710b4e698eaef62e4a0037a173a876734c21", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc(vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */"}, {"sha": "398f9afc7fb8e4ae25b0c7302633c6ad007776d3", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadc_vxm_rv32-3.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv32-3.C?ref=485c710b4e698eaef62e4a0037a173a876734c21", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc(vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */"}, {"sha": "d5a93ee6a76324f83c77829ecb72d3628247cfb0", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadc_vxm_rv64-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv64-1.C?ref=485c710b4e698eaef62e4a0037a173a876734c21", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc(vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "f94d4258d6dfb83d1c7a2aba2ced7af73890d2d4", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadc_vxm_rv64-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv64-2.C?ref=485c710b4e698eaef62e4a0037a173a876734c21", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc(vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "091817c48a490054d2cbf89f6aa0bd8192d25218", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmadc_vxm_rv64-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485c710b4e698eaef62e4a0037a173a876734c21/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmadc_vxm_rv64-3.C?ref=485c710b4e698eaef62e4a0037a173a876734c21", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmadc(vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmadc(vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmadc(vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmadc(vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmadc(vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmadc(vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmadc(vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmadc(vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vmadc(op1,op2,carryin,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}]}