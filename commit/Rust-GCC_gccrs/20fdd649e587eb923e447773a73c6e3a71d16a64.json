{"sha": "20fdd649e587eb923e447773a73c6e3a71d16a64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBmZGQ2NDllNTg3ZWI5MjNlNDQ3NzczYTczYzZlM2E3MWQxNmE2NA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-04-03T22:34:45Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-04-03T22:34:45Z"}, "message": "(simplify_comparison, case PLUS): Generalize simplification of (eq (plus A B) C).\n\n(simplify_comparison, case PLUS): Generalize simplification\nof (eq (plus A B) C).\n(simplify_comparison, case MINUS): Add corresponding cases.\n\nFrom-SVN: r3992", "tree": {"sha": "ba73190a046df8b0a6e8b6ac48a9871970c520c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba73190a046df8b0a6e8b6ac48a9871970c520c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20fdd649e587eb923e447773a73c6e3a71d16a64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20fdd649e587eb923e447773a73c6e3a71d16a64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20fdd649e587eb923e447773a73c6e3a71d16a64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20fdd649e587eb923e447773a73c6e3a71d16a64/comments", "author": null, "committer": null, "parents": [{"sha": "be7ae2a48490fa9809c604c6e33e645fc5076f5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be7ae2a48490fa9809c604c6e33e645fc5076f5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be7ae2a48490fa9809c604c6e33e645fc5076f5a"}], "stats": {"total": 30, "additions": 26, "deletions": 4}, "files": [{"sha": "6993356eb07472d017d743e2e767ad284d5e1139", "filename": "gcc/combine.c", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20fdd649e587eb923e447773a73c6e3a71d16a64/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20fdd649e587eb923e447773a73c6e3a71d16a64/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=20fdd649e587eb923e447773a73c6e3a71d16a64", "patch": "@@ -8315,12 +8315,12 @@ simplify_comparison (code, pop0, pop1)\n \t  break;\n \n \tcase PLUS:\n-\t  /* (eq (plus X C1) C2) -> (eq X (minus C2 C1)).  We can only do\n+\t  /* (eq (plus X A) B) -> (eq X (minus B A)).  We can only do\n \t     this for equality comparisons due to pathological cases involving\n \t     overflows.  */\n-\t  if (equality_comparison_p && GET_CODE (XEXP (op0, 1)) == CONST_INT\n-\t      && (tem = simplify_binary_operation (MINUS, mode, op1,\n-\t\t\t\t\t\t   XEXP (op0, 1))) != 0)\n+\t  if (equality_comparison_p\n+\t      && 0 != (tem = simplify_binary_operation (MINUS, mode,\n+\t\t\t\t\t\t\top1, XEXP (op0, 1))))\n \t    {\n \t      op0 = XEXP (op0, 0);\n \t      op1 = tem;\n@@ -8338,6 +8338,28 @@ simplify_comparison (code, pop0, pop1)\n \t  break;\n \n \tcase MINUS:\n+\t  /* (eq (minus A B) C) -> (eq A (plus B C)) or\n+\t     (eq B (minus A C)), whichever simplifies.  We can only do\n+\t     this for equality comparisons due to pathological cases involving\n+\t     overflows.  */\n+\t  if (equality_comparison_p\n+\t      && 0 != (tem = simplify_binary_operation (PLUS, mode,\n+\t\t\t\t\t\t\tXEXP (op0, 1), op1)))\n+\t    {\n+\t      op0 = XEXP (op0, 0);\n+\t      op1 = tem;\n+\t      continue;\n+\t    }\n+\n+\t  if (equality_comparison_p\n+\t      && 0 != (tem = simplify_binary_operation (MINUS, mode,\n+\t\t\t\t\t\t\tXEXP (op0, 0), op1)))\n+\t    {\n+\t      op0 = XEXP (op0, 1);\n+\t      op1 = tem;\n+\t      continue;\n+\t    }\n+\n \t  /* The sign bit of (minus (ashiftrt X C) X), where C is the number\n \t     of bits in X minus 1, is one iff X > 0.  */\n \t  if (sign_bit_comparison_p && GET_CODE (XEXP (op0, 0)) == ASHIFTRT"}]}