{"sha": "a02d1ad2b2973bcc047715b39df2ff1c69385541", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAyZDFhZDJiMjk3M2JjYzA0NzcxNWIzOWRmMmZmMWM2OTM4NTU0MQ==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2017-05-31T13:26:54Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2017-05-31T13:26:54Z"}, "message": "passes.c: implement pre-ICE emergency dumping\n\n\t* passes.c (emergency_dump_function): New.\n\t* tree-pass.h (emergency_dump_function): Declare.\n\t* plugin.c (plugins_internal_error_function): Remove.\n\t* plugin.h (plugins_internal_error_function): Remove declaration.\n\t* toplev.c (internal_error_function): New static function.  Use it...\n\t(general_init): ...here.\n\nFrom-SVN: r248736", "tree": {"sha": "fdbe3a3801dc53192204548b33b1e35001a07498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdbe3a3801dc53192204548b33b1e35001a07498"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a02d1ad2b2973bcc047715b39df2ff1c69385541", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a02d1ad2b2973bcc047715b39df2ff1c69385541", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a02d1ad2b2973bcc047715b39df2ff1c69385541", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a02d1ad2b2973bcc047715b39df2ff1c69385541/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e466f0496649db71f5e62881feea8ee59e09874", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e466f0496649db71f5e62881feea8ee59e09874", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e466f0496649db71f5e62881feea8ee59e09874"}], "stats": {"total": 53, "additions": 40, "deletions": 13}, "files": [{"sha": "9c7b3de1dd85c14cdf853c8c65825f6591247382", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a02d1ad2b2973bcc047715b39df2ff1c69385541/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a02d1ad2b2973bcc047715b39df2ff1c69385541/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a02d1ad2b2973bcc047715b39df2ff1c69385541", "patch": "@@ -1,3 +1,12 @@\n+2017-05-31  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\t* passes.c (emergency_dump_function): New.\n+\t* tree-pass.h (emergency_dump_function): Declare.\n+\t* plugin.c (plugins_internal_error_function): Remove.\n+\t* plugin.h (plugins_internal_error_function): Remove declaration.\n+\t* toplev.c (internal_error_function): New static function.  Use it...\n+\t(general_init): ...here.\n+\n 2017-05-31  Graham Markall  <graham.markall@embecosm.com>\n \n \t* config/arc/arc.c (arc_print_operand): Handle constant operands."}, {"sha": "64493ba1688ba713ec446cf5cdf5247ac80e4744", "filename": "gcc/passes.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a02d1ad2b2973bcc047715b39df2ff1c69385541/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a02d1ad2b2973bcc047715b39df2ff1c69385541/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=a02d1ad2b2973bcc047715b39df2ff1c69385541", "patch": "@@ -60,6 +60,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-live.h\"  /* For remove_unused_locals.  */\n #include \"tree-cfgcleanup.h\"\n #include \"insn-addr.h\" /* for INSN_ADDRESSES_ALLOC.  */\n+#include \"diagnostic-core.h\" /* for fnotice */\n \n using namespace gcc;\n \n@@ -1779,6 +1780,24 @@ execute_function_dump (function *fn, void *data)\n     }\n }\n \n+/* This function is called when an internal compiler error is encountered.\n+   Ensure that function dump is made available before compiler is aborted.  */\n+\n+void\n+emergency_dump_function ()\n+{\n+  if (!current_pass)\n+    return;\n+  enum opt_pass_type pt = current_pass->type;\n+  fnotice (stderr, \"during %s pass: %s\\n\",\n+\t   pt == GIMPLE_PASS ? \"GIMPLE\" : pt == RTL_PASS ? \"RTL\" : \"IPA\",\n+\t   current_pass->name);\n+  if (!dump_file || !cfun)\n+    return;\n+  fnotice (stderr, \"dump file: %s\\n\", dump_file_name);\n+  execute_function_dump (cfun, current_pass);\n+}\n+\n static struct profile_record *profile_record;\n \n /* Do profile consistency book-keeping for the pass with static number INDEX."}, {"sha": "9892748cd1519a75a9cc9df550921201346f6412", "filename": "gcc/plugin.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a02d1ad2b2973bcc047715b39df2ff1c69385541/gcc%2Fplugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a02d1ad2b2973bcc047715b39df2ff1c69385541/gcc%2Fplugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.c?ref=a02d1ad2b2973bcc047715b39df2ff1c69385541", "patch": "@@ -858,16 +858,6 @@ warn_if_plugins (void)\n \n }\n \n-/* Likewise, as a callback from the diagnostics code.  */\n-\n-void\n-plugins_internal_error_function (diagnostic_context *context ATTRIBUTE_UNUSED,\n-\t\t\t\t const char *msgid ATTRIBUTE_UNUSED,\n-\t\t\t\t va_list *ap ATTRIBUTE_UNUSED)\n-{\n-  warn_if_plugins ();\n-}\n-\n /* The default version check. Compares every field in VERSION. */\n \n bool"}, {"sha": "b96445d0a3305e9ad601779ba60182d72c87f6a3", "filename": "gcc/plugin.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a02d1ad2b2973bcc047715b39df2ff1c69385541/gcc%2Fplugin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a02d1ad2b2973bcc047715b39df2ff1c69385541/gcc%2Fplugin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.h?ref=a02d1ad2b2973bcc047715b39df2ff1c69385541", "patch": "@@ -167,8 +167,6 @@ extern bool plugins_active_p (void);\n extern void dump_active_plugins (FILE *);\n extern void debug_active_plugins (void);\n extern void warn_if_plugins (void);\n-extern void plugins_internal_error_function (diagnostic_context *,\n-\t\t\t\t\t     const char *, va_list *);\n extern void print_plugins_versions (FILE *file, const char *indent);\n extern void print_plugins_help (FILE *file, const char *indent);\n extern void finalize_plugins (void);"}, {"sha": "f8b5a4001c4c6f5b7b9441550985f2e3f0c62825", "filename": "gcc/toplev.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a02d1ad2b2973bcc047715b39df2ff1c69385541/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a02d1ad2b2973bcc047715b39df2ff1c69385541/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a02d1ad2b2973bcc047715b39df2ff1c69385541", "patch": "@@ -79,6 +79,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"omp-offload.h\"\n #include \"hsa-common.h\"\n #include \"edit-context.h\"\n+#include \"tree-pass.h\"\n \n #if defined(DBX_DEBUGGING_INFO) || defined(XCOFF_DEBUGGING_INFO)\n #include \"dbxout.h\"\n@@ -1063,6 +1064,15 @@ open_auxiliary_file (const char *ext)\n   return file;\n }\n \n+/* Auxiliary callback for the diagnostics code.  */\n+\n+static void\n+internal_error_function (diagnostic_context *, const char *, va_list *)\n+{\n+  warn_if_plugins ();\n+  emergency_dump_function ();\n+}\n+\n /* Initialization of the front end environment, before command line\n    options are parsed.  Signal handlers, internationalization etc.\n    ARGV0 is main's argv[0].  */\n@@ -1101,7 +1111,7 @@ general_init (const char *argv0, bool init_signals)\n     = global_options_init.x_flag_diagnostics_show_option;\n   global_dc->show_column\n     = global_options_init.x_flag_show_column;\n-  global_dc->internal_error = plugins_internal_error_function;\n+  global_dc->internal_error = internal_error_function;\n   global_dc->option_enabled = option_enabled;\n   global_dc->option_state = &global_options;\n   global_dc->option_name = option_name;"}, {"sha": "0f7d936e64bd507ccb429801ca78a348b110f691", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a02d1ad2b2973bcc047715b39df2ff1c69385541/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a02d1ad2b2973bcc047715b39df2ff1c69385541/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=a02d1ad2b2973bcc047715b39df2ff1c69385541", "patch": "@@ -634,6 +634,7 @@ extern void execute_all_ipa_transforms (void);\n extern void execute_all_ipa_stmt_fixups (struct cgraph_node *, gimple **);\n extern bool pass_init_dump_file (opt_pass *);\n extern void pass_fini_dump_file (opt_pass *);\n+extern void emergency_dump_function (void);\n \n extern void print_current_pass (FILE *);\n extern void debug_pass (void);"}]}