{"sha": "568de14d2e74cfdd600b8995ff6ac08c98ddef48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY4ZGUxNGQyZTc0Y2ZkZDYwMGI4OTk1ZmY2YWMwOGM5OGRkZWY0OA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-10-21T09:11:03Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-10-29T13:32:48Z"}, "message": "LTO: get_section: add new argument\n\ngcc/ChangeLog:\n\n\tPR lto/97508\n\t* langhooks.c (lhd_begin_section): Call get_section with\n\tnot_existing = true.\n\t* output.h (get_section): Add new argument.\n\t* varasm.c (get_section): Fail when NOT_EXISTING is true\n\tand a section already exists.\n\t* ipa-cp.c (ipcp_write_summary): Remove.\n\t(ipcp_read_summary): Likewise.\n\t* ipa-fnsummary.c (ipa_fn_summary_read): Always read jump\n\tfunctions summary.\n\t(ipa_fn_summary_write): Always stream it.", "tree": {"sha": "e0fdddfddfbe226f14a78169dbb67153b8c32c1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0fdddfddfbe226f14a78169dbb67153b8c32c1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/568de14d2e74cfdd600b8995ff6ac08c98ddef48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/568de14d2e74cfdd600b8995ff6ac08c98ddef48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/568de14d2e74cfdd600b8995ff6ac08c98ddef48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/568de14d2e74cfdd600b8995ff6ac08c98ddef48/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64817472be2ab6c89bd5448c242a191a38041bb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64817472be2ab6c89bd5448c242a191a38041bb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64817472be2ab6c89bd5448c242a191a38041bb9"}], "stats": {"total": 40, "additions": 14, "deletions": 26}, "files": [{"sha": "028480f6ce43cb57adc88c9b96c1d4f9440e40c6", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/568de14d2e74cfdd600b8995ff6ac08c98ddef48/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/568de14d2e74cfdd600b8995ff6ac08c98ddef48/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=568de14d2e74cfdd600b8995ff6ac08c98ddef48", "patch": "@@ -5943,22 +5943,6 @@ ipcp_generate_summary (void)\n     ipa_analyze_node (node);\n }\n \n-/* Write ipcp summary for nodes in SET.  */\n-\n-static void\n-ipcp_write_summary (void)\n-{\n-  ipa_prop_write_jump_functions ();\n-}\n-\n-/* Read ipcp summary.  */\n-\n-static void\n-ipcp_read_summary (void)\n-{\n-  ipa_prop_read_jump_functions ();\n-}\n-\n namespace {\n \n const pass_data pass_data_ipa_cp =\n@@ -5980,8 +5964,8 @@ class pass_ipa_cp : public ipa_opt_pass_d\n   pass_ipa_cp (gcc::context *ctxt)\n     : ipa_opt_pass_d (pass_data_ipa_cp, ctxt,\n \t\t      ipcp_generate_summary, /* generate_summary */\n-\t\t      ipcp_write_summary, /* write_summary */\n-\t\t      ipcp_read_summary, /* read_summary */\n+\t\t      NULL, /* write_summary */\n+\t\t      NULL, /* read_summary */\n \t\t      ipcp_write_transformation_summaries, /*\n \t\t      write_optimization_summary */\n \t\t      ipcp_read_transformation_summaries, /*"}, {"sha": "ff05ab672385dc5cdbad01d39c647f71938f7470", "filename": "gcc/ipa-fnsummary.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/568de14d2e74cfdd600b8995ff6ac08c98ddef48/gcc%2Fipa-fnsummary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/568de14d2e74cfdd600b8995ff6ac08c98ddef48/gcc%2Fipa-fnsummary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.c?ref=568de14d2e74cfdd600b8995ff6ac08c98ddef48", "patch": "@@ -4526,6 +4526,7 @@ ipa_fn_summary_read (void)\n   struct lto_file_decl_data *file_data;\n   unsigned int j = 0;\n \n+  ipa_prop_read_jump_functions ();\n   ipa_fn_summary_alloc ();\n \n   while ((file_data = file_data_vec[j++]))\n@@ -4544,8 +4545,6 @@ ipa_fn_summary_read (void)\n \t\t     \"ipa inline summary is missing in input file\");\n     }\n   ipa_register_cgraph_hooks ();\n-  if (!flag_ipa_cp)\n-    ipa_prop_read_jump_functions ();\n \n   gcc_assert (ipa_fn_summaries);\n   ipa_fn_summaries->enable_insertion_hook ();\n@@ -4693,8 +4692,7 @@ ipa_fn_summary_write (void)\n   produce_asm (ob, NULL);\n   destroy_output_block (ob);\n \n-  if (!flag_ipa_cp)\n-    ipa_prop_write_jump_functions ();\n+  ipa_prop_write_jump_functions ();\n }\n \n "}, {"sha": "d82f54251fdb7080ef9d658eab56c6056faab9b0", "filename": "gcc/langhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/568de14d2e74cfdd600b8995ff6ac08c98ddef48/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/568de14d2e74cfdd600b8995ff6ac08c98ddef48/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=568de14d2e74cfdd600b8995ff6ac08c98ddef48", "patch": "@@ -790,7 +790,7 @@ lhd_begin_section (const char *name)\n     saved_section = text_section;\n \n   /* Create a new section and switch to it.  */\n-  section = get_section (name, SECTION_DEBUG | SECTION_EXCLUDE, NULL);\n+  section = get_section (name, SECTION_DEBUG | SECTION_EXCLUDE, NULL, true);\n   switch_to_section (section);\n }\n "}, {"sha": "2f2f1697fd898a061acb6e9fa158dafb615adb9b", "filename": "gcc/output.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/568de14d2e74cfdd600b8995ff6ac08c98ddef48/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/568de14d2e74cfdd600b8995ff6ac08c98ddef48/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=568de14d2e74cfdd600b8995ff6ac08c98ddef48", "patch": "@@ -523,7 +523,8 @@ extern GTY(()) bool in_cold_section_p;\n \n extern section *get_unnamed_section (unsigned int, void (*) (const void *),\n \t\t\t\t     const void *);\n-extern section *get_section (const char *, unsigned int, tree);\n+extern section *get_section (const char *, unsigned int, tree,\n+\t\t\t     bool not_existing = false);\n extern section *get_named_section (tree, const char *, int);\n extern section *get_variable_section (tree, bool);\n extern void place_block_symbol (rtx);"}, {"sha": "435c7b348a507965eff64c66e440235b16303b40", "filename": "gcc/varasm.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/568de14d2e74cfdd600b8995ff6ac08c98ddef48/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/568de14d2e74cfdd600b8995ff6ac08c98ddef48/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=568de14d2e74cfdd600b8995ff6ac08c98ddef48", "patch": "@@ -277,10 +277,12 @@ get_noswitch_section (unsigned int flags, noswitch_section_callback callback)\n }\n \n /* Return the named section structure associated with NAME.  Create\n-   a new section with the given fields if no such structure exists.  */\n+   a new section with the given fields if no such structure exists.\n+   When NOT_EXISTING, then fail if the section already exists.  */\n \n section *\n-get_section (const char *name, unsigned int flags, tree decl)\n+get_section (const char *name, unsigned int flags, tree decl,\n+\t     bool not_existing)\n {\n   section *sect, **slot;\n \n@@ -297,6 +299,9 @@ get_section (const char *name, unsigned int flags, tree decl)\n     }\n   else\n     {\n+      if (not_existing)\n+\tinternal_error (\"Section already exists: %qs\", name);\n+\n       sect = *slot;\n       /* It is fine if one of the sections has SECTION_NOTYPE as long as\n          the other has none of the contrary flags (see the logic at the end"}]}