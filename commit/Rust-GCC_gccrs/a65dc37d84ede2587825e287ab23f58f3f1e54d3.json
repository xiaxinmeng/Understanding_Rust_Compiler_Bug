{"sha": "a65dc37d84ede2587825e287ab23f58f3f1e54d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY1ZGMzN2Q4NGVkZTI1ODc4MjVlMjg3YWIyM2Y1OGYzZjFlNTRkMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-05-26T12:01:40Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-05-26T12:01:40Z"}, "message": "reload.c (find_valid_class): Accept new argument DEST, choose class accordingly.\n\n\n\t* reload.c (find_valid_class): Accept new argument DEST,\n\tchoose class accordingly.\n\t(push_reload): Update callers.\n\nFrom-SVN: r53894", "tree": {"sha": "37573ad98c23a4403fda87449b8f74304ab989e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37573ad98c23a4403fda87449b8f74304ab989e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a65dc37d84ede2587825e287ab23f58f3f1e54d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a65dc37d84ede2587825e287ab23f58f3f1e54d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a65dc37d84ede2587825e287ab23f58f3f1e54d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a65dc37d84ede2587825e287ab23f58f3f1e54d3/comments", "author": null, "committer": null, "parents": [{"sha": "ead33da923e6914a26dff8b1adf70db98339be52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ead33da923e6914a26dff8b1adf70db98339be52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ead33da923e6914a26dff8b1adf70db98339be52"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "b602627d51f2c7230438644c715c9cf986ddeabf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a65dc37d84ede2587825e287ab23f58f3f1e54d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a65dc37d84ede2587825e287ab23f58f3f1e54d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a65dc37d84ede2587825e287ab23f58f3f1e54d3", "patch": "@@ -1,3 +1,9 @@\n+Sun May 26 14:00:44 CEST 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* reload.c (find_valid_class): Accept new argument DEST,\n+\tchoose class accordingly.\n+\t(push_reload): Update callers.\n+\n 2002-05-26  Andreas Jaeger  <aj@suse.de>\n \n \t* combine.c (combine_instructions): Do not indent #if for"}, {"sha": "6560fb3b72a5221ca5fad93af2279fe3bf3951fa", "filename": "gcc/reload.c", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a65dc37d84ede2587825e287ab23f58f3f1e54d3/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a65dc37d84ede2587825e287ab23f58f3f1e54d3/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=a65dc37d84ede2587825e287ab23f58f3f1e54d3", "patch": "@@ -240,7 +240,8 @@ static int push_secondary_reload PARAMS ((int, rtx, int, int, enum reg_class,\n \t\t\t\t\tenum machine_mode, enum reload_type,\n \t\t\t\t\tenum insn_code *));\n #endif\n-static enum reg_class find_valid_class PARAMS ((enum machine_mode, int));\n+static enum reg_class find_valid_class PARAMS ((enum machine_mode, int,\n+\t\t\t\t\t\tunsigned int));\n static int reload_inner_reg_of_subreg PARAMS ((rtx, enum machine_mode));\n static void push_replacement\tPARAMS ((rtx *, int, enum machine_mode));\n static void combine_reloads\tPARAMS ((void));\n@@ -661,16 +662,20 @@ clear_secondary_mem ()\n #endif /* SECONDARY_MEMORY_NEEDED */\n \f\n /* Find the largest class for which every register number plus N is valid in\n-   M1 (if in range).  Abort if no such class exists.  */\n+   M1 (if in range) and is cheap to move into REGNO.\n+   Abort if no such class exists.  */\n \n static enum reg_class\n-find_valid_class (m1, n)\n+find_valid_class (m1, n, dest_regno)\n      enum machine_mode m1 ATTRIBUTE_UNUSED;\n      int n;\n+     unsigned int dest_regno;\n {\n+  int best_cost = -1;\n   int class;\n   int regno;\n   enum reg_class best_class = NO_REGS;\n+  enum reg_class dest_class = REGNO_REG_CLASS (dest_regno);\n   unsigned int best_size = 0;\n \n   for (class = 1; class < N_REG_CLASSES; class++)\n@@ -682,8 +687,14 @@ find_valid_class (m1, n)\n \t    && ! HARD_REGNO_MODE_OK (regno + n, m1))\n \t  bad = 1;\n \n-      if (! bad && reg_class_size[class] > best_size)\n-\tbest_class = class, best_size = reg_class_size[class];\n+      if (! bad && reg_class_size[class] > best_size\n+\t  && (best_cost < 0\n+\t      || best_cost >= REGISTER_MOVE_COST (m1, class, dest_class)))\n+\t{\n+\t  best_class = class;\n+\t  best_size = reg_class_size[class];\n+\t  best_cost = REGISTER_MOVE_COST (m1, class, dest_class);\n+\t}\n     }\n \n   if (best_size == 0)\n@@ -1041,7 +1052,8 @@ push_reload (in, out, inloc, outloc, class,\n \t\t\t      subreg_regno_offset (REGNO (SUBREG_REG (in)),\n \t\t\t\t\t\t   GET_MODE (SUBREG_REG (in)),\n \t\t\t\t\t\t   SUBREG_BYTE (in),\n-\t\t\t\t\t\t   GET_MODE (in)));\n+\t\t\t\t\t\t   GET_MODE (in)),\n+\t\t\t      REGNO (SUBREG_REG (in)));\n \n       /* This relies on the fact that emit_reload_insns outputs the\n \t instructions for input reloads of type RELOAD_OTHER in the same\n@@ -1141,7 +1153,8 @@ push_reload (in, out, inloc, outloc, class,\n \t\t\t\t     subreg_regno_offset (REGNO (SUBREG_REG (out)),\n \t\t\t\t\t\t\t  GET_MODE (SUBREG_REG (out)),\n \t\t\t\t\t\t\t  SUBREG_BYTE (out),\n-\t\t\t\t\t\t\t  GET_MODE (out))),\n+\t\t\t\t\t\t\t  GET_MODE (out)),\n+\t\t\t\t     REGNO (SUBREG_REG (out))),\n \t\t   VOIDmode, VOIDmode, 0, 0,\n \t\t   opnum, RELOAD_OTHER);\n     }"}]}