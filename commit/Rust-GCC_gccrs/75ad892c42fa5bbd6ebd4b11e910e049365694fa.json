{"sha": "75ad892c42fa5bbd6ebd4b11e910e049365694fa", "node_id": "C_kwDOANBUbNoAKDc1YWQ4OTJjNDJmYTViYmQ2ZWJkNGIxMWU5MTBlMDQ5MzY1Njk0ZmE", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-03-10T14:10:54Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-17T10:34:36Z"}, "message": "gccrs: refactor is_concrete to not just virtual dispatch\n\nIts easier to debug and maintain one base function for this than relying\non virtual dispatch\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-tyty.cc (BaseType::is_concrete): new implementation\n\t(InferType::is_concrete): remove\n\t(ErrorType::is_concrete): likewise\n\t(StructFieldType::is_concrete): likewise\n\t(ADTType::is_concrete): likewise\n\t(TupleType::is_concrete): likewise\n\t(BoolType::is_concrete): likewise\n\t(IntType::is_concrete): likewise\n\t(UintType::is_concrete): likewise\n\t(FloatType::is_concrete): likewise\n\t(USizeType::is_concrete): likewise\n\t(ISizeType::is_concrete): likewise\n\t(CharType::is_concrete): likewise\n\t(ReferenceType::is_concrete): likewise\n\t(PointerType::is_concrete): likewise\n\t(ParamType::is_concrete): likewise\n\t(StrType::is_concrete): likewise\n\t(NeverType::is_concrete): likewise\n\t(PlaceholderType::is_concrete): likewise\n\t(ProjectionType::is_concrete): likewise\n\t(DynamicObjectType::is_concrete): likewise\n\t* typecheck/rust-tyty.h: update header", "tree": {"sha": "94096e605c3b1324ec05a35abb88ece60cbec82b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94096e605c3b1324ec05a35abb88ece60cbec82b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75ad892c42fa5bbd6ebd4b11e910e049365694fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75ad892c42fa5bbd6ebd4b11e910e049365694fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75ad892c42fa5bbd6ebd4b11e910e049365694fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75ad892c42fa5bbd6ebd4b11e910e049365694fa/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "254208dc7aea43712f46eb3d732d17d0d6551bfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/254208dc7aea43712f46eb3d732d17d0d6551bfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/254208dc7aea43712f46eb3d732d17d0d6551bfc"}], "stats": {"total": 354, "additions": 127, "deletions": 227}, "files": [{"sha": "3e399fd862e551c22b457bd0761a8a619a66aac8", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 126, "deletions": 149, "changes": 275, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ad892c42fa5bbd6ebd4b11e910e049365694fa/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ad892c42fa5bbd6ebd4b11e910e049365694fa/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=75ad892c42fa5bbd6ebd4b11e910e049365694fa", "patch": "@@ -549,6 +549,132 @@ BaseType::debug () const\n \t      debug_str ().c_str ());\n }\n \n+bool\n+BaseType::is_concrete () const\n+{\n+  const TyTy::BaseType *x = destructure ();\n+  switch (x->get_kind ())\n+    {\n+    case PARAM:\n+    case PROJECTION:\n+      return false;\n+\n+      // placeholder is a special case for this case when it is not resolvable\n+      // it means we its just an empty placeholder associated type which is\n+      // concrete\n+    case PLACEHOLDER:\n+      return true;\n+\n+      case FNDEF: {\n+\tconst FnType &fn = *static_cast<const FnType *> (x);\n+\tfor (const auto &param : fn.get_params ())\n+\t  {\n+\t    const BaseType *p = param.second;\n+\t    if (!p->is_concrete ())\n+\t      return false;\n+\t  }\n+\treturn fn.get_return_type ()->is_concrete ();\n+      }\n+      break;\n+\n+      case FNPTR: {\n+\tconst FnPtr &fn = *static_cast<const FnPtr *> (x);\n+\tfor (const auto &param : fn.get_params ())\n+\t  {\n+\t    const BaseType *p = param.get_tyty ();\n+\t    if (!p->is_concrete ())\n+\t      return false;\n+\t  }\n+\treturn fn.get_return_type ()->is_concrete ();\n+      }\n+      break;\n+\n+      case ADT: {\n+\tconst ADTType &adt = *static_cast<const ADTType *> (x);\n+\tif (adt.is_unit ())\n+\t  {\n+\t    return !adt.needs_substitution ();\n+\t  }\n+\n+\tfor (auto &variant : adt.get_variants ())\n+\t  {\n+\t    bool is_num_variant\n+\t      = variant->get_variant_type () == VariantDef::VariantType::NUM;\n+\t    if (is_num_variant)\n+\t      continue;\n+\n+\t    for (auto &field : variant->get_fields ())\n+\t      {\n+\t\tconst BaseType *field_type = field->get_field_type ();\n+\t\tif (!field_type->is_concrete ())\n+\t\t  return false;\n+\t      }\n+\t  }\n+\treturn true;\n+      }\n+      break;\n+\n+      case ARRAY: {\n+\tconst ArrayType &arr = *static_cast<const ArrayType *> (x);\n+\treturn arr.get_element_type ()->is_concrete ();\n+      }\n+      break;\n+\n+      case SLICE: {\n+\tconst SliceType &slice = *static_cast<const SliceType *> (x);\n+\treturn slice.get_element_type ()->is_concrete ();\n+      }\n+      break;\n+\n+      case POINTER: {\n+\tconst PointerType &ptr = *static_cast<const PointerType *> (x);\n+\treturn ptr.get_base ()->is_concrete ();\n+      }\n+      break;\n+\n+      case REF: {\n+\tconst ReferenceType &ref = *static_cast<const ReferenceType *> (x);\n+\treturn ref.get_base ()->is_concrete ();\n+      }\n+      break;\n+\n+      case TUPLE: {\n+\tconst TupleType &tuple = *static_cast<const TupleType *> (x);\n+\tfor (size_t i = 0; i < tuple.num_fields (); i++)\n+\t  {\n+\t    if (!tuple.get_field (i)->is_concrete ())\n+\t      return false;\n+\t  }\n+\treturn true;\n+      }\n+      break;\n+\n+      case CLOSURE: {\n+\tconst ClosureType &closure = *static_cast<const ClosureType *> (x);\n+\tif (closure.get_parameters ().is_concrete ())\n+\t  return false;\n+\treturn closure.get_result_type ().is_concrete ();\n+      }\n+      break;\n+\n+    case INFER:\n+    case BOOL:\n+    case CHAR:\n+    case INT:\n+    case UINT:\n+    case FLOAT:\n+    case USIZE:\n+    case ISIZE:\n+    case NEVER:\n+    case STR:\n+    case DYNAMIC:\n+    case ERROR:\n+      return true;\n+    }\n+\n+  return false;\n+}\n+\n // InferType\n \n InferType::InferType (HirId ref, InferTypeKind infer_kind, Location locus,\n@@ -577,12 +703,6 @@ InferType::get_name () const\n   return as_string ();\n }\n \n-bool\n-InferType::is_concrete () const\n-{\n-  return true;\n-}\n-\n void\n InferType::accept_vis (TyVisitor &vis)\n {\n@@ -698,11 +818,6 @@ ErrorType::is_unit () const\n {\n   return true;\n }\n-bool\n-ErrorType::is_concrete () const\n-{\n-  return false;\n-}\n \n std::string\n ErrorType::get_name () const\n@@ -777,12 +892,6 @@ StructFieldType::set_field_type (BaseType *fty)\n   ty = fty;\n }\n \n-bool\n-StructFieldType::is_concrete () const\n-{\n-  return ty->is_concrete ();\n-}\n-\n void\n StructFieldType::debug () const\n {\n@@ -1094,30 +1203,6 @@ ADTType::as_string () const\n   return identifier + subst_as_string () + \"{\" + variants_buffer + \"}\";\n }\n \n-bool\n-ADTType::is_concrete () const\n-{\n-  if (is_unit ())\n-    {\n-      return !needs_substitution ();\n-    }\n-\n-  for (auto &variant : variants)\n-    {\n-      bool is_num_variant\n-\t= variant->get_variant_type () == VariantDef::VariantType::NUM;\n-      if (is_num_variant)\n-\tcontinue;\n-\n-      for (auto &field : variant->get_fields ())\n-\t{\n-\t  if (!field->is_concrete ())\n-\t    return false;\n-\t}\n-    }\n-  return true;\n-}\n-\n bool\n ADTType::can_eq (const BaseType *other, bool emit_errors) const\n {\n@@ -1315,17 +1400,6 @@ TupleType::num_fields () const\n   return fields.size ();\n }\n \n-bool\n-TupleType::is_concrete () const\n-{\n-  for (size_t i = 0; i < num_fields (); i++)\n-    {\n-      if (!get_field (i)->is_concrete ())\n-\treturn false;\n-    }\n-  return true;\n-}\n-\n const std::vector<TyVar> &\n TupleType::get_fields () const\n {\n@@ -2042,12 +2116,6 @@ BoolType::get_name () const\n   return as_string ();\n }\n \n-bool\n-BoolType::is_concrete () const\n-{\n-  return true;\n-}\n-\n void\n BoolType::accept_vis (TyVisitor &vis)\n {\n@@ -2177,12 +2245,6 @@ IntType::is_equal (const BaseType &other) const\n   return get_int_kind () == o.get_int_kind ();\n }\n \n-bool\n-IntType::is_concrete () const\n-{\n-  return true;\n-}\n-\n // UintType\n \n UintType::UintType (HirId ref, UintKind kind, std::set<HirId> refs)\n@@ -2276,12 +2338,6 @@ UintType::is_equal (const BaseType &other) const\n   return get_uint_kind () == o.get_uint_kind ();\n }\n \n-bool\n-UintType::is_concrete () const\n-{\n-  return true;\n-}\n-\n // FloatType\n \n FloatType::FloatType (HirId ref, FloatKind kind, std::set<HirId> refs)\n@@ -2313,12 +2369,6 @@ FloatType::get_float_kind () const\n   return float_kind;\n }\n \n-bool\n-FloatType::is_concrete () const\n-{\n-  return true;\n-}\n-\n void\n FloatType::accept_vis (TyVisitor &vis)\n {\n@@ -2397,12 +2447,6 @@ USizeType::get_name () const\n   return as_string ();\n }\n \n-bool\n-USizeType::is_concrete () const\n-{\n-  return true;\n-}\n-\n void\n USizeType::accept_vis (TyVisitor &vis)\n {\n@@ -2462,12 +2506,6 @@ ISizeType::get_name () const\n   return as_string ();\n }\n \n-bool\n-ISizeType::is_concrete () const\n-{\n-  return true;\n-}\n-\n void\n ISizeType::accept_vis (TyVisitor &vis)\n {\n@@ -2521,12 +2559,6 @@ CharType::CharType (HirId ref, HirId ty_ref, std::set<HirId> refs)\n \t      refs)\n {}\n \n-bool\n-CharType::is_concrete () const\n-{\n-  return true;\n-}\n-\n std::string\n CharType::get_name () const\n {\n@@ -2590,12 +2622,6 @@ ReferenceType::ReferenceType (HirId ref, HirId ty_ref, TyVar base,\n     base (base), mut (mut)\n {}\n \n-bool\n-ReferenceType::is_concrete () const\n-{\n-  return get_base ()->is_concrete ();\n-}\n-\n Mutability\n ReferenceType::mutability () const\n {\n@@ -2743,12 +2769,6 @@ PointerType::PointerType (HirId ref, HirId ty_ref, TyVar base, Mutability mut,\n     base (base), mut (mut)\n {}\n \n-bool\n-PointerType::is_concrete () const\n-{\n-  return get_base ()->is_concrete ();\n-}\n-\n Mutability\n PointerType::mutability () const\n {\n@@ -2918,16 +2938,6 @@ ParamType::can_resolve () const\n   return get_ref () != get_ty_ref ();\n }\n \n-bool\n-ParamType::is_concrete () const\n-{\n-  auto r = resolve ();\n-  if (r == this)\n-    return false;\n-\n-  return r->is_concrete ();\n-}\n-\n void\n ParamType::accept_vis (TyVisitor &vis)\n {\n@@ -3097,12 +3107,6 @@ StrType::get_name () const\n   return as_string ();\n }\n \n-bool\n-StrType::is_concrete () const\n-{\n-  return true;\n-}\n-\n BaseType *\n StrType::clone () const\n {\n@@ -3174,12 +3178,6 @@ NeverType::is_unit () const\n   return true;\n }\n \n-bool\n-NeverType::is_concrete () const\n-{\n-  return true;\n-}\n-\n void\n NeverType::accept_vis (TyVisitor &vis)\n {\n@@ -3256,15 +3254,6 @@ PlaceholderType::get_symbol () const\n   return symbol;\n }\n \n-bool\n-PlaceholderType::is_concrete () const\n-{\n-  if (!can_resolve ())\n-    return true;\n-\n-  return resolve ()->is_concrete ();\n-}\n-\n void\n PlaceholderType::accept_vis (TyVisitor &vis)\n {\n@@ -3423,12 +3412,6 @@ ProjectionType::get ()\n   return base;\n }\n \n-bool\n-ProjectionType::is_concrete () const\n-{\n-  return base->is_concrete ();\n-}\n-\n void\n ProjectionType::accept_vis (TyVisitor &vis)\n {\n@@ -3554,12 +3537,6 @@ DynamicObjectType::DynamicObjectType (\n   : BaseType (ref, ty_ref, TypeKind::DYNAMIC, ident, specified_bounds, refs)\n {}\n \n-bool\n-DynamicObjectType::is_concrete () const\n-{\n-  return true;\n-}\n-\n void\n DynamicObjectType::accept_vis (TyVisitor &vis)\n {"}, {"sha": "d49768eb53db4cc565bb6e8166bb8f79caa60eac", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 1, "deletions": 78, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ad892c42fa5bbd6ebd4b11e910e049365694fa/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ad892c42fa5bbd6ebd4b11e910e049365694fa/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=75ad892c42fa5bbd6ebd4b11e910e049365694fa", "patch": "@@ -130,7 +130,7 @@ class BaseType : public TypeBoundsMappings\n \n   virtual bool is_unit () const;\n \n-  virtual bool is_concrete () const = 0;\n+  bool is_concrete () const;\n \n   TypeKind get_kind () const;\n \n@@ -223,8 +223,6 @@ class InferType : public BaseType\n \n   bool default_type (BaseType **type) const;\n \n-  bool is_concrete () const final override;\n-\n private:\n   InferTypeKind infer_kind;\n };\n@@ -250,8 +248,6 @@ class ErrorType : public BaseType\n   BaseType *monomorphized_clone () const final override;\n \n   std::string get_name () const override final;\n-\n-  bool is_concrete () const final override;\n };\n \n class ParamType : public BaseType\n@@ -289,8 +285,6 @@ class ParamType : public BaseType\n \n   bool is_equal (const BaseType &other) const override;\n \n-  bool is_concrete () const override final;\n-\n   ParamType *handle_substitions (SubstitutionArgumentMappings &mappings);\n \n   void set_implicit_self_trait ();\n@@ -319,8 +313,6 @@ class StructFieldType\n   StructFieldType *clone () const;\n   StructFieldType *monomorphized_clone () const;\n \n-  bool is_concrete () const;\n-\n   void debug () const;\n   Location get_locus () const;\n   std::string as_string () const;\n@@ -363,8 +355,6 @@ class TupleType : public BaseType\n   BaseType *clone () const final override;\n   BaseType *monomorphized_clone () const final override;\n \n-  bool is_concrete () const override final;\n-\n   const std::vector<TyVar> &get_fields () const;\n \n   std::string get_name () const override final;\n@@ -601,8 +591,6 @@ class ADTType : public BaseType, public SubstitutionRef\n     return identifier + subst_as_string ();\n   }\n \n-  bool is_concrete () const override final;\n-\n   BaseType *clone () const final override;\n   BaseType *monomorphized_clone () const final override;\n \n@@ -740,17 +728,6 @@ class FnType : public BaseType, public SubstitutionRef\n     return param_at (0).second;\n   }\n \n-  bool is_concrete () const override final\n-  {\n-    for (const auto &param : params)\n-      {\n-\tconst BaseType *p = param.second;\n-\tif (!p->is_concrete ())\n-\t  return false;\n-      }\n-    return get_return_type ()->is_concrete ();\n-  }\n-\n   std::vector<std::pair<HIR::Pattern *, BaseType *>> &get_params ()\n   {\n     return params;\n@@ -839,28 +816,9 @@ class FnPtr : public BaseType\n   BaseType *clone () const final override;\n   BaseType *monomorphized_clone () const final override;\n \n-  void iterate_params (std::function<bool (BaseType *)> cb) const\n-  {\n-    for (auto &p : params)\n-      {\n-\tif (!cb (p.get_tyty ()))\n-\t  return;\n-      }\n-  }\n-\n   std::vector<TyVar> &get_params () { return params; }\n   const std::vector<TyVar> &get_params () const { return params; }\n \n-  bool is_concrete () const override final\n-  {\n-    for (auto &p : params)\n-      {\n-\tif (!p.get_tyty ()->is_concrete ())\n-\t  return false;\n-      }\n-    return result_type.get_tyty ()->is_concrete ();\n-  }\n-\n private:\n   std::vector<TyVar> params;\n   TyVar result_type;\n@@ -918,12 +876,6 @@ class ClosureType : public BaseType, public SubstitutionRef\n   BaseType *clone () const final override;\n   BaseType *monomorphized_clone () const final override;\n \n-  bool is_concrete () const override final\n-  {\n-    return parameters->is_concrete ()\n-\t   && result_type.get_tyty ()->is_concrete ();\n-  }\n-\n   bool needs_generic_substitutions () const override final\n   {\n     return needs_substitution ();\n@@ -988,11 +940,6 @@ class ArrayType : public BaseType\n   BaseType *clone () const final override;\n   BaseType *monomorphized_clone () const final override;\n \n-  bool is_concrete () const final override\n-  {\n-    return get_element_type ()->is_concrete ();\n-  }\n-\n   HIR::Expr &get_capacity_expr () const { return capacity_expr; }\n \n   ArrayType *handle_substitions (SubstitutionArgumentMappings &mappings);\n@@ -1035,11 +982,6 @@ class SliceType : public BaseType\n   BaseType *clone () const final override;\n   BaseType *monomorphized_clone () const final override;\n \n-  bool is_concrete () const final override\n-  {\n-    return get_element_type ()->is_concrete ();\n-  }\n-\n   SliceType *handle_substitions (SubstitutionArgumentMappings &mappings);\n \n private:\n@@ -1063,7 +1005,6 @@ class BoolType : public BaseType\n \n   BaseType *clone () const final override;\n   BaseType *monomorphized_clone () const final override;\n-  bool is_concrete () const override final;\n };\n \n class IntType : public BaseType\n@@ -1097,7 +1038,6 @@ class IntType : public BaseType\n   BaseType *monomorphized_clone () const final override;\n \n   bool is_equal (const BaseType &other) const override;\n-  bool is_concrete () const override final;\n \n private:\n   IntKind int_kind;\n@@ -1135,7 +1075,6 @@ class UintType : public BaseType\n   BaseType *monomorphized_clone () const final override;\n \n   bool is_equal (const BaseType &other) const override;\n-  bool is_concrete () const override final;\n \n private:\n   UintKind uint_kind;\n@@ -1169,7 +1108,6 @@ class FloatType : public BaseType\n   BaseType *monomorphized_clone () const final override;\n \n   bool is_equal (const BaseType &other) const override;\n-  bool is_concrete () const override final;\n \n private:\n   FloatKind float_kind;\n@@ -1192,7 +1130,6 @@ class USizeType : public BaseType\n \n   BaseType *clone () const final override;\n   BaseType *monomorphized_clone () const final override;\n-  bool is_concrete () const override final;\n };\n \n class ISizeType : public BaseType\n@@ -1212,7 +1149,6 @@ class ISizeType : public BaseType\n \n   BaseType *clone () const final override;\n   BaseType *monomorphized_clone () const final override;\n-  bool is_concrete () const override final;\n };\n \n class CharType : public BaseType\n@@ -1231,7 +1167,6 @@ class CharType : public BaseType\n \n   BaseType *clone () const final override;\n   BaseType *monomorphized_clone () const final override;\n-  bool is_concrete () const override final;\n };\n \n class StrType : public BaseType\n@@ -1253,7 +1188,6 @@ class StrType : public BaseType\n \n   BaseType *clone () const final override;\n   BaseType *monomorphized_clone () const final override;\n-  bool is_concrete () const override final;\n };\n \n class ReferenceType : public BaseType\n@@ -1280,8 +1214,6 @@ class ReferenceType : public BaseType\n   BaseType *clone () const final override;\n   BaseType *monomorphized_clone () const final override;\n \n-  bool is_concrete () const override final;\n-\n   ReferenceType *handle_substitions (SubstitutionArgumentMappings &mappings);\n \n   Mutability mutability () const;\n@@ -1322,8 +1254,6 @@ class PointerType : public BaseType\n   BaseType *clone () const final override;\n   BaseType *monomorphized_clone () const final override;\n \n-  bool is_concrete () const override final;\n-\n   PointerType *handle_substitions (SubstitutionArgumentMappings &mappings);\n \n   Mutability mutability () const;\n@@ -1369,7 +1299,6 @@ class NeverType : public BaseType\n   std::string get_name () const override final;\n \n   bool is_unit () const override;\n-  bool is_concrete () const override final;\n };\n \n // used at the type in associated types in traits\n@@ -1408,8 +1337,6 @@ class PlaceholderType : public BaseType\n \n   bool is_equal (const BaseType &other) const override;\n \n-  bool is_concrete () const override final;\n-\n private:\n   std::string symbol;\n };\n@@ -1454,8 +1381,6 @@ class ProjectionType : public BaseType, public SubstitutionRef\n   const BaseType *get () const;\n   BaseType *get ();\n \n-  bool is_concrete () const override final;\n-\n   ProjectionType *\n   handle_substitions (SubstitutionArgumentMappings &mappings) override final;\n \n@@ -1490,8 +1415,6 @@ class DynamicObjectType : public BaseType\n \n   std::string get_name () const override final;\n \n-  bool is_concrete () const override final;\n-\n   // this returns a flat list of items including super trait bounds\n   const std::vector<\n     std::pair<const Resolver::TraitItemReference *, const TypeBoundPredicate *>>"}]}