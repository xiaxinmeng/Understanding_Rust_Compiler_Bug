{"sha": "01e752d38660cea601a177fdee8f89cc9ceadbca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFlNzUyZDM4NjYwY2VhNjAxYTE3N2ZkZWU4Zjg5Y2M5Y2VhZGJjYQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-04-09T00:29:45Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-04-09T00:29:45Z"}, "message": "cse.c (flush_hash_table): New function.\n\n        * cse.c (flush_hash_table): New function.\n        (cse_insn): Flush the hash table when we encounter a volatile asm.\n        (cse_basic_block): Use flush_hash_table instead of doing it\n        inline.\n        * reload1.c (reload_cse_regs_1): Flush known register values if\n        we encounter a volatile asm.\n\nFrom-SVN: r26304", "tree": {"sha": "f69054cfc57cab1d087f04fe8e176fefa5db654c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f69054cfc57cab1d087f04fe8e176fefa5db654c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01e752d38660cea601a177fdee8f89cc9ceadbca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01e752d38660cea601a177fdee8f89cc9ceadbca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01e752d38660cea601a177fdee8f89cc9ceadbca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01e752d38660cea601a177fdee8f89cc9ceadbca/comments", "author": null, "committer": null, "parents": [{"sha": "3fb2a045ec1d3022b441ed5495a915ac42d63b51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fb2a045ec1d3022b441ed5495a915ac42d63b51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fb2a045ec1d3022b441ed5495a915ac42d63b51"}], "stats": {"total": 59, "additions": 46, "deletions": 13}, "files": [{"sha": "f1ed42707ed7648594e1be37fb32a7a8cefe5206", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e752d38660cea601a177fdee8f89cc9ceadbca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e752d38660cea601a177fdee8f89cc9ceadbca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01e752d38660cea601a177fdee8f89cc9ceadbca", "patch": "@@ -1,5 +1,13 @@\n Thu Apr  8 19:20:18 1999  Jeffrey A Law  (law@cygnus.com)\n \n+\t* cse.c (flush_hash_table): New function.\n+\t(cse_insn): Flush the hash table when we encounter a volatile asm.\n+\t(cse_basic_block): Use flush_hash_table instead of doing it\n+\tinline.\n+\n+\t* reload1.c (reload_cse_regs_1): Flush known register values if\n+\twe encounter a volatile asm.\n+\n \t* loop.c (strength_reduce): Re-enable Joern's loop improvements.\n \n Thu Apr  8 09:37:40 1999  Nick Clifton  <nickc@cygnus.com>"}, {"sha": "72a1ff63c3d200826ec3e7a4d2272bef4a0ea5a4", "filename": "gcc/cse.c", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e752d38660cea601a177fdee8f89cc9ceadbca/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e752d38660cea601a177fdee8f89cc9ceadbca/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=01e752d38660cea601a177fdee8f89cc9ceadbca", "patch": "@@ -691,6 +691,7 @@ extern void dump_class          PROTO((struct table_elt*));\n static void check_fold_consts\tPROTO((PTR));\n static struct cse_reg_info* get_cse_reg_info PROTO((int));\n static void free_cse_reg_info   PROTO((splay_tree_value));\n+static void flush_hash_table\tPROTO((void));\n \n extern int rtx_equal_function_value_matters;\n \f\n@@ -1666,6 +1667,28 @@ merge_equiv_classes (class1, class2)\n     }\n }\n \f\n+\n+/* Flush the entire hash table.  */\n+\n+static void\n+flush_hash_table ()\n+{\n+  int i;\n+  struct table_elt *p;\n+\n+  for (i = 0; i < NBUCKETS; i++)\n+    for (p = table[i]; p; p = table[i])\n+      {\n+\t/* Note that invalidate can remove elements\n+\t   after P in the current hash chain.  */\n+\tif (GET_CODE (p->exp) == REG)\n+\t  invalidate (p->exp, p->mode);\n+\telse\n+\t  remove_from_table (p, i);\n+      }\n+}\n+\n+\n /* Remove from the hash table, or mark as invalid,\n    all expressions whose values could be altered by storing in X.\n    X is a register, a subreg, or a memory reference with nonvarying address\n@@ -7648,6 +7671,12 @@ cse_insn (insn, libcall_insn)\n \t  invalidate (XEXP (dest, 0), GET_MODE (dest));\n       }\n \n+  /* A volatile ASM invalidates everything.  */\n+  if (GET_CODE (insn) == INSN\n+      && GET_CODE (PATTERN (insn)) == ASM_OPERANDS\n+      && MEM_VOLATILE_P (PATTERN (insn)))\n+    flush_hash_table ();\n+\n   /* Make sure registers mentioned in destinations\n      are safe for use in an expression to be inserted.\n      This removes from the hash table\n@@ -8855,8 +8884,6 @@ cse_basic_block (from, to, next_branch, around_loop)\n   for (insn = from; insn != to; insn = NEXT_INSN (insn))\n     {\n       register enum rtx_code code = GET_CODE (insn);\n-      int i;\n-      struct table_elt *p;\n \n       /* If we have processed 1,000 insns, flush the hash table to\n \t avoid extreme quadratic behavior.  We must not include NOTEs\n@@ -8869,17 +8896,7 @@ cse_basic_block (from, to, next_branch, around_loop)\n \t Perhaps for 2.9.  */\n       if (code != NOTE && num_insns++ > 1000)\n \t{\n-\t  for (i = 0; i < NBUCKETS; i++)\n-\t    for (p = table[i]; p; p = table[i])\n-\t      {\n-\t\t/* Note that invalidate can remove elements\n-\t\t   after P in the current hash chain.  */\n-\t\tif (GET_CODE (p->exp) == REG)\n-\t\t  invalidate (p->exp, p->mode);\n-\t\telse\n-\t\t  remove_from_table (p, i);\n-\t      }\n-\n+\t  flush_hash_table ();\n \t  num_insns = 0;\n \t}\n "}, {"sha": "e97e98e8e08c0335b50cc579da6d483de0ebb6e7", "filename": "gcc/reload1.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e752d38660cea601a177fdee8f89cc9ceadbca/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e752d38660cea601a177fdee8f89cc9ceadbca/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=01e752d38660cea601a177fdee8f89cc9ceadbca", "patch": "@@ -8740,6 +8740,14 @@ reload_cse_regs_1 (first)\n \t    reload_cse_invalidate_mem (callmem);\n \t}\n \n+      \n+      /* Forget all the register values at a volatile asm.  */\n+      if (GET_CODE (insn) == INSN\n+\t  && GET_CODE (PATTERN (insn)) == ASM_OPERANDS\n+\t  && MEM_VOLATILE_P (PATTERN (insn)))\n+\tfor (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+\t  reg_values[i] = 0;\n+\n       body = PATTERN (insn);\n       if (GET_CODE (body) == SET)\n \t{"}]}