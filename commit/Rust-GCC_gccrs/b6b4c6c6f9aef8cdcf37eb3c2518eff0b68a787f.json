{"sha": "b6b4c6c6f9aef8cdcf37eb3c2518eff0b68a787f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZiNGM2YzZmOWFlZjhjZGNmMzdlYjNjMjUxOGVmZjBiNjhhNzg3Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-09-08T23:09:38Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-09-08T23:09:38Z"}, "message": "gengenrtl.c (CONST_DOUBLE_FORMAT): Take the size REAL_ARITHMETIC will use into account.\n\n        * gengenrtl.c (CONST_DOUBLE_FORMAT): Take the size REAL_ARITHMETIC\n        will use into account.  Expand the max width to 5.\n        * rtl.c: Likewise.\n\nFrom-SVN: r29216", "tree": {"sha": "9acd07cb03001cf82fde8716c9b81dcec93213bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9acd07cb03001cf82fde8716c9b81dcec93213bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6b4c6c6f9aef8cdcf37eb3c2518eff0b68a787f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6b4c6c6f9aef8cdcf37eb3c2518eff0b68a787f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6b4c6c6f9aef8cdcf37eb3c2518eff0b68a787f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6b4c6c6f9aef8cdcf37eb3c2518eff0b68a787f/comments", "author": null, "committer": null, "parents": [{"sha": "38792a9487a36149fc3af8ee550fc26839ebb65c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38792a9487a36149fc3af8ee550fc26839ebb65c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38792a9487a36149fc3af8ee550fc26839ebb65c"}], "stats": {"total": 85, "additions": 71, "deletions": 14}, "files": [{"sha": "abf78065e55a416e71a43e0be8159abc8efae987", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b4c6c6f9aef8cdcf37eb3c2518eff0b68a787f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b4c6c6f9aef8cdcf37eb3c2518eff0b68a787f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6b4c6c6f9aef8cdcf37eb3c2518eff0b68a787f", "patch": "@@ -1,3 +1,9 @@\n+Wed Sep  8 16:07:52 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* gengenrtl.c (CONST_DOUBLE_FORMAT): Take the size REAL_ARITHMETIC \n+\twill use into account.  Expand the max width to 5.\n+\t* rtl.c: Likewise.\n+\n Wed Sep  8 16:01:14 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* ggc-simple.c (ggc_free_rtx): Poison the correct amount"}, {"sha": "e1addb640076447b6597fc1c0cd84f371e779fc5", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b4c6c6f9aef8cdcf37eb3c2518eff0b68a787f/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b4c6c6f9aef8cdcf37eb3c2518eff0b68a787f/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=b6b4c6c6f9aef8cdcf37eb3c2518eff0b68a787f", "patch": "@@ -30,19 +30,45 @@ Boston, MA 02111-1307, USA.  */\n \n /* Calculate the format for CONST_DOUBLE.  This depends on the relative\n    widths of HOST_WIDE_INT and REAL_VALUE_TYPE.\n-   We only need to go out to e0wwww, since min(HOST_WIDE_INT)==32 and\n-   max(LONG_DOUBLE_TYPE_SIZE)==128.\n-   This is duplicated in rtl.c.  \n+\n+   We need to go out to e0wwwww, since REAL_ARITHMETIC assumes 16-bits\n+   per element in REAL_VALUE_TYPE.\n+\n+   This is duplicated in rtl.c.\n+\n    A number of places assume that there are always at least two 'w'\n    slots in a CONST_DOUBLE, so we provide them even if one would suffice.  */\n-#if HOST_BITS_PER_WIDE_INT >= LONG_DOUBLE_TYPE_SIZE\n+\n+#ifdef REAL_ARITHMETIC\n+#if LONG_DOUBLE_TYPE_SIZE == 96\n+#define REAL_WIDTH\t(11*8 + HOST_BITS_PER_WIDE_INT)/HOST_BITS_PER_WIDE_INT\n+#elif LONG_DOUBLE_TYPE_SIZE == 128\n+#define REAL_WIDTH\t(19*8 + HOST_BITS_PER_WIDE_INT)/HOST_BITS_PER_WIDE_INT\n+#elif HOST_FLOAT_FORMAT != TARGET_FLOAT_FORMAT\n+#define REAL_WIDTH\t(7*8 + HOST_BITS_PER_WIDE_INT)/HOST_BITS_PER_WIDE_INT\n+#endif\n+#endif /* REAL_ARITHMETIC */\n+\n+#ifndef REAL_WIDTH\n+#if HOST_BITS_PER_WIDE_INT*2 >= LONG_DOUBLE_TYPE_SIZE\n+#define REAL_WIDTH\t2\n+#elif HOST_BITS_PER_WIDE_INT*3 >= LONG_DOUBLE_TYPE_SIZE\n+#define REAL_WIDTH\t3\n+#elif HOST_BITS_PER_WIDE_INT*4 >= LONG_DOUBLE_TYPE_SIZE\n+#define REAL_WIDTH\t4\n+#endif\n+#endif /* REAL_WIDTH */\n+\n+#if REAL_WIDTH == 1\n #define CONST_DOUBLE_FORMAT\t\"e0ww\"\n-#elif HOST_BITS_PER_WIDE_INT*2 >= LONG_DOUBLE_TYPE_SIZE\n+#elif REAL_WIDTH == 2\n #define CONST_DOUBLE_FORMAT\t\"e0ww\"\n-#elif HOST_BITS_PER_WIDE_INT*3 >= LONG_DOUBLE_TYPE_SIZE\n+#elif REAL_WIDTH == 3\n #define CONST_DOUBLE_FORMAT\t\"e0www\"\n-#elif HOST_BITS_PER_WIDE_INT*4 >= LONG_DOUBLE_TYPE_SIZE\n+#elif REAL_WIDTH == 4\n #define CONST_DOUBLE_FORMAT\t\"e0wwww\"\n+#elif REAL_WIDTH == 5\n+#define CONST_DOUBLE_FORMAT\t\"e0wwwww\"\n #else\n #define CONST_DOUBLE_FORMAT\t/* nothing - will cause syntax error */\n #endif"}, {"sha": "4164c689c6c984414c281de40aee2eae474feb59", "filename": "gcc/rtl.c", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b4c6c6f9aef8cdcf37eb3c2518eff0b68a787f/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b4c6c6f9aef8cdcf37eb3c2518eff0b68a787f/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=b6b4c6c6f9aef8cdcf37eb3c2518eff0b68a787f", "patch": "@@ -42,22 +42,47 @@ Boston, MA 02111-1307, USA.  */\n \n extern struct obstack *rtl_obstack;\n \f\n-\n /* Calculate the format for CONST_DOUBLE.  This depends on the relative\n    widths of HOST_WIDE_INT and REAL_VALUE_TYPE.\n-   We only need to go out to e0wwww, since min(HOST_WIDE_INT)==32 and\n-   max(LONG_DOUBLE_TYPE_SIZE)==128.\n+\n+   We need to go out to e0wwwww, since REAL_ARITHMETIC assumes 16-bits\n+   per element in REAL_VALUE_TYPE.\n+\n    This is duplicated in gengenrtl.c.\n+\n    A number of places assume that there are always at least two 'w'\n    slots in a CONST_DOUBLE, so we provide them even if one would suffice.  */\n-#if HOST_BITS_PER_WIDE_INT >= LONG_DOUBLE_TYPE_SIZE\n+\n+#ifdef REAL_ARITHMETIC\n+#if LONG_DOUBLE_TYPE_SIZE == 96\n+#define REAL_WIDTH\t(11*8 + HOST_BITS_PER_WIDE_INT)/HOST_BITS_PER_WIDE_INT\n+#elif LONG_DOUBLE_TYPE_SIZE == 128\n+#define REAL_WIDTH\t(19*8 + HOST_BITS_PER_WIDE_INT)/HOST_BITS_PER_WIDE_INT\n+#elif HOST_FLOAT_FORMAT != TARGET_FLOAT_FORMAT\n+#define REAL_WIDTH\t(7*8 + HOST_BITS_PER_WIDE_INT)/HOST_BITS_PER_WIDE_INT\n+#endif\n+#endif /* REAL_ARITHMETIC */\n+\n+#ifndef REAL_WIDTH\n+#if HOST_BITS_PER_WIDE_INT*2 >= LONG_DOUBLE_TYPE_SIZE\n+#define REAL_WIDTH\t2\n+#elif HOST_BITS_PER_WIDE_INT*3 >= LONG_DOUBLE_TYPE_SIZE\n+#define REAL_WIDTH\t3\n+#elif HOST_BITS_PER_WIDE_INT*4 >= LONG_DOUBLE_TYPE_SIZE\n+#define REAL_WIDTH\t4\n+#endif\n+#endif /* REAL_WIDTH */\n+\n+#if REAL_WIDTH == 1\n #define CONST_DOUBLE_FORMAT\t\"e0ww\"\n-#elif HOST_BITS_PER_WIDE_INT*2 >= LONG_DOUBLE_TYPE_SIZE\n+#elif REAL_WIDTH == 2\n #define CONST_DOUBLE_FORMAT\t\"e0ww\"\n-#elif HOST_BITS_PER_WIDE_INT*3 >= LONG_DOUBLE_TYPE_SIZE\n+#elif REAL_WIDTH == 3\n #define CONST_DOUBLE_FORMAT\t\"e0www\"\n-#elif HOST_BITS_PER_WIDE_INT*4 >= LONG_DOUBLE_TYPE_SIZE\n+#elif REAL_WIDTH == 4\n #define CONST_DOUBLE_FORMAT\t\"e0wwww\"\n+#elif REAL_WIDTH == 5\n+#define CONST_DOUBLE_FORMAT\t\"e0wwwww\"\n #else\n #define CONST_DOUBLE_FORMAT\t/* nothing - will cause syntax error */\n #endif"}]}