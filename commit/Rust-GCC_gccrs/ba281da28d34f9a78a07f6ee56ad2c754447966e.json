{"sha": "ba281da28d34f9a78a07f6ee56ad2c754447966e", "node_id": "C_kwDOANBUbNoAKGJhMjgxZGEyOGQzNGY5YTc4YTA3ZjZlZTU2YWQyYzc1NDQ0Nzk2NmU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-19T09:25:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-19T09:26:17Z"}, "message": "libstdc++-v3: Implement {,b}float16_t nextafter and some fixes [PR106652]\n\nThe following patch implements nextafter for std::{,b}float16_t,\nthough right now only without constexpr support, and adds a testcase for it.\nThe testcase unfortunately relevealed I've screwed up testing of my last\npatch.  I've tested earlier version of the patch with\n--target_board=unix/-std=c++23\nbut didn't test the final version with that RUNTESTFLAGS, so missed\nan invalid call to std::sph_neumann (too many arguments) in the test.\nAnd, I've made a typo in the guard for numeric_limits (the reason\nfor the guard is I wanted to avoid defining a large macro that nothing\nwill then use because the std::{,b}float*_t types are C++23 only) and\nso numeric_limits wasn't specialized for the types at all but\ntestsuite/18_support/headers/limits/synopsis_cxx23.cc test didn't\ndetect that.\nIn the nextafter implementation I'm calling __builtin_nextafterf\nto get various required side-effects for nextafter from 0/-0, or from max\nto inf or from min to largest subnormal to avoid needing to set errno\ninline, or use inline asm specific for each processor to force math\nevaluation barriers.  Dunno if\n  #ifdef __INT16_TYPE__\n    using __float16_int_type = __INT16_TYPE__;\n  #else\n    using __float16_int_type = short int;\n  #endif\nisn't too ugly, perhaps we could just blindly use short int and hope\nor even assert it has the same size as _Float16 or __gnu_cxx::__bfloat16_t?\nOnly aarch64, arm, csky, gcn, x86, nvptx and riscv support these types\nand all of them have 16-bit short (I think the only target with some\nother short size is avr with certain command line switches where both\nshort and int are 8-bit, but such mode isn't compatible with C and C++\nrequirements).\n\n2022-10-19  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/106652\n\t* include/std/limits: Fix a typo, 202202L -> 202002L.\n\t(numeric_limits::<_Float16>::radix, numeric_limits::<_Float32>::radix,\n\tnumeric_limits::<_Float64>::radix, numeric_limits::<_Float128>::radix,\n\tnumeric_limits::<__gnu_cxx::__bfloat16_t>::radix): Use __FLT_RADIX__\n\tmacro instead of type specific macros.\n\t* include/c_global/cmath (nextafter(_Float16, _Float16)): New\n\toverload.\n\t(nextafter(__gnu_cxx::__bfloat16_t, __gnu_cxx::__bfloat16_t)):\n\tLikewise.\n\t* testsuite/26_numerics/headers/cmath/functions_std_c++23.cc\n\t(test_functions): Uncomment nextafter test.  Fix up sph_neumann call.\n\t* testsuite/26_numerics/headers/cmath/nextafter_c++23.cc: New test.", "tree": {"sha": "138b87b22ce59fc64ded5d445160605eda5c22fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/138b87b22ce59fc64ded5d445160605eda5c22fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba281da28d34f9a78a07f6ee56ad2c754447966e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba281da28d34f9a78a07f6ee56ad2c754447966e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba281da28d34f9a78a07f6ee56ad2c754447966e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba281da28d34f9a78a07f6ee56ad2c754447966e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f7df3338c16471a38784983531e57aa2dba1d03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f7df3338c16471a38784983531e57aa2dba1d03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f7df3338c16471a38784983531e57aa2dba1d03"}], "stats": {"total": 232, "additions": 223, "deletions": 9}, "files": [{"sha": "555d6440849cd7782b597d52c7e4d85225bd3bca", "filename": "libstdc++-v3/include/c_global/cmath", "status": "modified", "additions": 92, "deletions": 2, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba281da28d34f9a78a07f6ee56ad2c754447966e/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba281da28d34f9a78a07f6ee56ad2c754447966e/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath?ref=ba281da28d34f9a78a07f6ee56ad2c754447966e", "patch": "@@ -2755,7 +2755,52 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   nearbyint(_Float16 __x)\n   { return _Float16(__builtin_nearbyintf(__x)); }\n \n-  // nextafter not implemented so far.\n+  inline _Float16\n+  nextafter(_Float16 __x, _Float16 __y)\n+  {\n+#ifdef __INT16_TYPE__\n+    using __float16_int_type = __INT16_TYPE__;\n+#else\n+    using __float16_int_type = short int;\n+#endif\n+    __float16_int_type __hx, __hy, __ix, __iy;\n+    __builtin_memcpy(&__hx, &__x, sizeof(__x));\n+    __builtin_memcpy(&__hy, &__y, sizeof(__x));\n+    __ix = __hx & 0x7fff;\t// |x|\n+    __iy = __hy & 0x7fff;\t// |y|\n+    if (__ix > 0x7c00 || __iy > 0x7c00) // x or y is NaN\n+      return __x + __y;\n+    if (__x == __y)\n+      return __y;\t\t// x == y, return y\n+    if (__ix == 0)\t\t// x == 0\n+      {\n+\t__hy = (__hy & 0x8000) | 1;\t// return +-__FLT16_DENORM_MIN__\n+\t__builtin_memcpy(&__x, &__hy, sizeof(__x));\n+\t__builtin_nextafterf(0.0f, 1.0f);\t// raise underflow\n+\treturn __x;\n+      }\n+    if (__hx >= 0)\t\t// x > 0\n+      {\n+\tif (__hx > __hy)\t// x > y, x -= ulp\n+\t  --__hx;\n+\telse\t\t\t// x < y, x += ulp\n+\t  ++__hx;\n+      }\n+    else\t\t\t// x < 0\n+      {\n+\tif (__hy >= 0 || __hx > __hy)\t// x < y, x -= ulp\n+\t  --__hx;\n+\telse\t\t\t// x > y, x += ulp\n+\t  ++__hx;\n+      }\n+    __hy = __hx & 0x7c00;\n+    if (__hy >= 0x7c00)\n+      __builtin_nextafterf(__FLT_MAX__, __builtin_inff());\t// overflow\n+    else if (__hy < 0x0400)\n+      __builtin_nextafterf(__FLT_MIN__, 0.0f);\t// underflow\n+    __builtin_memcpy(&__x, &__hx, sizeof(__x));\n+    return __x;\n+  }\n \n   constexpr _Float16\n   remainder(_Float16 __x, _Float16 __y)\n@@ -3426,7 +3471,52 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   nearbyint(__gnu_cxx::__bfloat16_t __x)\n   { return __gnu_cxx::__bfloat16_t(__builtin_nearbyintf(__x)); }\n \n-  // nextafter not implemented so far.\n+  inline __gnu_cxx::__bfloat16_t\n+  nextafter(__gnu_cxx::__bfloat16_t __x, __gnu_cxx::__bfloat16_t __y)\n+  {\n+#ifdef __INT16_TYPE__\n+    using __bfloat16_int_type = __INT16_TYPE__;\n+#else\n+    using __bfloat16_int_type = short int;\n+#endif\n+    __bfloat16_int_type __hx, __hy, __ix, __iy;\n+    __builtin_memcpy(&__hx, &__x, sizeof(__x));\n+    __builtin_memcpy(&__hy, &__y, sizeof(__x));\n+    __ix = __hx & 0x7fff;\t// |x|\n+    __iy = __hy & 0x7fff;\t// |y|\n+    if (__ix > 0x7f80 || __iy > 0x7f80) // x or y is NaN\n+      return __x + __y;\n+    if (__x == __y)\n+      return __y;\t\t// x == y, return y\n+    if (__ix == 0)\t\t// x == 0\n+      {\n+\t__hy = (__hy & 0x8000) | 1;\t// return +-__BFLT16_DENORM_MIN__\n+\t__builtin_memcpy(&__x, &__hy, sizeof(__x));\n+\t__builtin_nextafterf(0.0f, 1.0f);\t// raise underflow\n+\treturn __x;\n+      }\n+    if (__hx >= 0)\t\t// x > 0\n+      {\n+\tif (__hx > __hy)\t// x > y, x -= ulp\n+\t  --__hx;\n+\telse\t\t\t// x < y, x += ulp\n+\t  ++__hx;\n+      }\n+    else\t\t\t// x < 0\n+      {\n+\tif (__hy >= 0 || __hx > __hy)\t// x < y, x -= ulp\n+\t  --__hx;\n+\telse\t\t\t// x > y, x += ulp\n+\t  ++__hx;\n+      }\n+    __hy = __hx & 0x7f80;\n+    if (__hy >= 0x7f80)\n+      __builtin_nextafterf(__FLT_MAX__, __builtin_inff());\t// overflow\n+    else if (__hy < 0x0080)\n+      __builtin_nextafterf(__FLT_MIN__, 0.0f);\t// underflow\n+    __builtin_memcpy(&__x, &__hx, sizeof(__x));\n+    return __x;\n+  }\n \n   constexpr __gnu_cxx::__bfloat16_t\n   remainder(__gnu_cxx::__bfloat16_t __x, __gnu_cxx::__bfloat16_t __y)"}, {"sha": "9dde9f39b7350557418f03b3d8c0f428b625a1d6", "filename": "libstdc++-v3/include/std/limits", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba281da28d34f9a78a07f6ee56ad2c754447966e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba281da28d34f9a78a07f6ee56ad2c754447966e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits?ref=ba281da28d34f9a78a07f6ee56ad2c754447966e", "patch": "@@ -1890,7 +1890,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #undef __glibcxx_long_double_traps\n #undef __glibcxx_long_double_tinyness_before\n \n-#if __cplusplus > 202202L\n+#if __cplusplus > 202002L\n \n #define __glibcxx_concat3_(P,M,S) P ## M ## S\n #define __glibcxx_concat3(P,M,S) __glibcxx_concat3_ (P,M,S)\n@@ -1924,8 +1924,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static constexpr bool is_signed = true;\t\t\t\t\\\n       static constexpr bool is_integer = false;\t\t\t\t\\\n       static constexpr bool is_exact = false;\t\t\t\t\\\n-      static constexpr int radix\t\t\t\t\t\\\n-\t= __glibcxx_concat3 (__FLT, BITSIZE, _RADIX__);\t\t\t\\\n+      static constexpr int radix = __FLT_RADIX__;\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       static constexpr _Float##BITSIZE\t\t\t\t\t\\\n       epsilon() noexcept\t\t\t\t\t\t\\\n@@ -2023,7 +2022,7 @@ __glibcxx_float_n(128)\n       static constexpr bool is_signed = true;\n       static constexpr bool is_integer = false;\n       static constexpr bool is_exact = false;\n-      static constexpr int radix = __BFLT16_RADIX__;\n+      static constexpr int radix = __FLT_RADIX__;\n \n       static constexpr __gnu_cxx::__bfloat16_t\n       epsilon() noexcept"}, {"sha": "190f8d18aea72cfb04c39f50d83b4f4ea0160612", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cmath/functions_std_c++23.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba281da28d34f9a78a07f6ee56ad2c754447966e/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Ffunctions_std_c%2B%2B23.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba281da28d34f9a78a07f6ee56ad2c754447966e/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Ffunctions_std_c%2B%2B23.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Ffunctions_std_c%2B%2B23.cc?ref=ba281da28d34f9a78a07f6ee56ad2c754447966e", "patch": "@@ -63,7 +63,7 @@ test_functions (T *p, int *q, long int *r, long long int *s)\n   p[36] = std::fmod (p[36], p[103]);\n   p[37] = std::remainder (p[37], p[104]);\n   p[38] = std::copysign (p[38], p[105]);\n-//  p[39] = std::nextafter (p[39], p[106]);\n+  p[39] = std::nextafter (p[39], p[106]);\n   p[40] = std::fdim (p[40], p[107]);\n   p[41] = std::fmax (p[41], p[108]);\n   p[42] = std::fmin (p[42], p[109]);\n@@ -102,13 +102,13 @@ test_functions (T *p, int *q, long int *r, long long int *s)\n   p[75] = std::riemann_zeta (p[75]);\n   p[76] = std::sph_bessel (q[12], p[76]);\n   p[77] = std::sph_legendre (q[13], q[14], p[77]);\n-  p[78] = std::sph_neumann (q[15], q[16], p[78]);\n+  p[78] = std::sph_neumann (q[15], p[78]);\n }\n \n int\n main ()\n {\n-  int q[17] = {};\n+  int q[16] = {};\n   long int r[16] = {};\n   long long int s[16] = {};\n #if defined(__STDCPP_FLOAT16_T__) && defined(_GLIBCXX_FLOAT_IS_IEEE_BINARY32)"}, {"sha": "45aa3b74b25afc81bd36347168fdc9ef86fedae7", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cmath/nextafter_c++23.cc", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba281da28d34f9a78a07f6ee56ad2c754447966e/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fnextafter_c%2B%2B23.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba281da28d34f9a78a07f6ee56ad2c754447966e/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fnextafter_c%2B%2B23.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fnextafter_c%2B%2B23.cc?ref=ba281da28d34f9a78a07f6ee56ad2c754447966e", "patch": "@@ -0,0 +1,125 @@\n+// Copyright (C) 2022 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2b\" }\n+// { dg-do run { target c++23 } }\n+\n+#include <stdfloat>\n+#include <cmath>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+template <typename T>\n+void\n+test ()\n+{\n+  using lim = std::numeric_limits<T>;\n+  T t0 = std::nextafter(T(-0.0), T(2.0));\n+  VERIFY(t0 == lim::denorm_min());\n+  T t1 = std::nextafter(T(), T(1.0));\n+  VERIFY(t1 == lim::denorm_min());\n+  T t2 = std::nextafter(T(), T());\n+  VERIFY(t2 == T() && !std::signbit(t2));\n+  T t3 = std::nextafter(lim::denorm_min(), T(-2.0));\n+  VERIFY(t3 == T() && !std::signbit(t3));\n+  T t4 = std::nextafter(lim::min(), T(-0.0));\n+  VERIFY(std::fpclassify(t4) == FP_SUBNORMAL && t4 > T());\n+  T t5 = std::nextafter(t4, T(1.0));\n+  VERIFY(t5 == lim::min());\n+  T t6 = std::nextafter(lim::min(), lim::infinity());\n+  VERIFY(std::fpclassify(t6) == FP_NORMAL && t6 > lim::min());\n+  T t7 = std::nextafter(t6, -lim::infinity());\n+  VERIFY(t7 == lim::min());\n+  T t8 = std::nextafter(T(16.0), T(16.5));\n+  VERIFY(t8 > t7);\n+  T t9 = std::nextafter(t8, T(15.5));\n+  VERIFY(t9 == T(16.0));\n+  T t10 = std::nextafter(lim::max(), T(-0.5));\n+  VERIFY(std::fpclassify(t10) == FP_NORMAL && t10 < lim::max());\n+  T t11 = std::nextafter(t10, lim::infinity());\n+  VERIFY(t11 == lim::max());\n+  T t12 = std::nextafter(t11, lim::infinity());\n+  VERIFY(std::fpclassify(t12) == FP_INFINITE && !std::signbit(t12));\n+  T t13 = std::nextafter(lim::infinity(), t12);\n+  VERIFY(t13 == t12);\n+  T t14 = std::nextafter(t13, T(1.0));\n+  VERIFY(t14 == lim::max());\n+  T t15 = std::nextafter(lim::quiet_NaN(), T());\n+  VERIFY(std::fpclassify(t15) == FP_NAN);\n+  T t16 = std::nextafter(T(17.0), lim::quiet_NaN());\n+  VERIFY(std::fpclassify(t16) == FP_NAN);\n+  T t17 = std::nextafter(T(), T(-0.0));\n+  VERIFY(t17 == T() && std::signbit(t17));\n+  T t20 = std::nextafter(T(-0.0), T(-2.0));\n+  VERIFY(t20 == -lim::denorm_min());\n+  T t21 = std::nextafter(T(), T(-1.0));\n+  VERIFY(t21 == -lim::denorm_min());\n+  T t22 = std::nextafter(T(-0.0), T(-0.0));\n+  VERIFY(t22 == T() && std::signbit(t22));\n+  T t23 = std::nextafter(-lim::denorm_min(), T(2.0));\n+  VERIFY(t23 == T() && std::signbit(t23));\n+  T t24 = std::nextafter(-lim::min(), T());\n+  VERIFY(std::fpclassify(t24) == FP_SUBNORMAL && t24 < T());\n+  T t25 = std::nextafter(t24, T(-1.0));\n+  VERIFY(t25 == -lim::min());\n+  T t26 = std::nextafter(-lim::min(), -lim::infinity());\n+  VERIFY(std::fpclassify(t26) == FP_NORMAL && t26 < -lim::min());\n+  T t27 = std::nextafter(t26, lim::infinity());\n+  VERIFY(t27 == -lim::min());\n+  T t28 = std::nextafter(T(-16.0), T(-16.5));\n+  VERIFY(t28 < t27);\n+  T t29 = std::nextafter(t28, T(-15.5));\n+  VERIFY(t29 == T(-16.0));\n+  T t30 = std::nextafter(-lim::max(), T(0.5));\n+  VERIFY(std::fpclassify(t30) == FP_NORMAL && t30 > -lim::max());\n+  T t31 = std::nextafter(t30, -lim::infinity());\n+  VERIFY(t31 == -lim::max());\n+  T t32 = std::nextafter(t31, -lim::infinity());\n+  VERIFY(std::fpclassify(t32) == FP_INFINITE && std::signbit(t32));\n+  T t33 = std::nextafter(-lim::infinity(), t32);\n+  VERIFY(t33 == t32);\n+  T t34 = std::nextafter(t33, T(-1.0));\n+  VERIFY(t34 == -lim::max());\n+  T t35 = std::nextafter(-lim::quiet_NaN(), T());\n+  VERIFY(std::fpclassify(t35) == FP_NAN);\n+  T t36 = std::nextafter(T(-17.0), lim::quiet_NaN());\n+  VERIFY(std::fpclassify(t36) == FP_NAN);\n+  T t37 = std::nextafter(T(-0.0), T());\n+  VERIFY(t37 == T() && !std::signbit(t37));\n+}\n+\n+int\n+main ()\n+{\n+#if defined(__STDCPP_FLOAT16_T__) && defined(_GLIBCXX_FLOAT_IS_IEEE_BINARY32)\n+  test <std::float16_t>();\n+#endif\n+#if defined(__STDCPP_FLOAT32_T__) && defined(_GLIBCXX_FLOAT_IS_IEEE_BINARY32)\n+  test <std::float32_t>();\n+#endif\n+#if defined(__STDCPP_FLOAT64_T__) && defined(_GLIBCXX_DOUBLE_IS_IEEE_BINARY64)\n+  test <std::float64_t>();\n+#endif\n+#if defined(__STDCPP_FLOAT128_T__) \\\n+    && (defined(_GLIBCXX_DOUBLE_IS_IEEE_BINARY128) \\\n+\t|| defined(_GLIBCXX_HAVE_FLOAT128_MATH))\n+  test <std::float128_t>();\n+#endif\n+#if defined(__STDCPP_BFLOAT16_T__) && defined(_GLIBCXX_FLOAT_IS_IEEE_BINARY32)\n+  test <std::bfloat16_t>();\n+#endif\n+}"}]}