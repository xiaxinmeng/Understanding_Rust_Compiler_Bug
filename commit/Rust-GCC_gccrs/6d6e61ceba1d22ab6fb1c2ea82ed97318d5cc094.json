{"sha": "6d6e61ceba1d22ab6fb1c2ea82ed97318d5cc094", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ2ZTYxY2ViYTFkMjJhYjZmYjFjMmVhODJlZDk3MzE4ZDVjYzA5NA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-27T06:39:01Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-27T06:39:01Z"}, "message": "(expand_assignment): Use duplicate instead of dup as bytecode op.\n\n(bc_expand_expr): Likewise.\n(bc_expand_constructor): Likewise.\n\n(emit_move_insn_1): Don't call group_insns when X is a CONCAT.\n(emit_move_insn_1, case CONJ_EXPR and COMPLEX_EXPR): Likewise.\n\nFrom-SVN: r5916", "tree": {"sha": "8d49890f923ff7f0db79b32082e5c2f6ff3cf7de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d49890f923ff7f0db79b32082e5c2f6ff3cf7de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d6e61ceba1d22ab6fb1c2ea82ed97318d5cc094", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d6e61ceba1d22ab6fb1c2ea82ed97318d5cc094", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d6e61ceba1d22ab6fb1c2ea82ed97318d5cc094", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d6e61ceba1d22ab6fb1c2ea82ed97318d5cc094/comments", "author": null, "committer": null, "parents": [{"sha": "61ccad3f2bc0af443960ccc69f48a374e6577658", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61ccad3f2bc0af443960ccc69f48a374e6577658", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61ccad3f2bc0af443960ccc69f48a374e6577658"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "d56bc0b3dcff6d0327487d7c18904768c3a73c57", "filename": "gcc/expr.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d6e61ceba1d22ab6fb1c2ea82ed97318d5cc094/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d6e61ceba1d22ab6fb1c2ea82ed97318d5cc094/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=6d6e61ceba1d22ab6fb1c2ea82ed97318d5cc094", "patch": "@@ -1824,7 +1824,11 @@ emit_move_insn_1 (x, y)\n \t\t     (gen_lowpart (submode, x), gen_lowpart (submode, y)));\n \t}\n \n-      group_insns (prev);\n+      if (GET_CODE (x) != CONCAT)\n+\t/* If X is a CONCAT, we got insns like RD = RS, ID = IS,\n+\t   each with a separate pseudo as destination.\n+\t   It's not correct for flow to treat them as a unit.  */\n+\tgroup_insns (prev);\n \n       return get_last_insn ();\n     }\n@@ -2310,7 +2314,7 @@ expand_assignment (to, from, want_value, suggest_reg)\n       tree dest_innermost;\n \n       bc_expand_expr (from);\n-      bc_emit_instruction (dup);\n+      bc_emit_instruction (duplicate);\n \n       dest_innermost = bc_expand_address (to);\n \n@@ -5769,7 +5773,11 @@ expand_expr (exp, target, tmode, modifier)\n \temit_move_insn (gen_imagpart (mode, target), op1);\n \n \t/* Complex construction should appear as a single unit.  */\n-\tgroup_insns (prev);\n+\tif (GET_CODE (target) != CONCAT)\n+\t  /* If TARGET is a CONCAT, we got insns like RD = RS, ID = IS,\n+\t     each with a separate pseudo as destination.\n+\t     It's not correct for flow to treat them as a unit.  */\n+\t  group_insns (prev);\n \n \treturn target;\n       }\n@@ -5809,7 +5817,11 @@ expand_expr (exp, target, tmode, modifier)\n \t  emit_move_insn (imag_t, temp);\n \n \t/* Conjugate should appear as a single unit */\n-\tgroup_insns (prev);\n+\tif (GET_CODE (target) != CONCAT)\n+\t  /* If TARGET is a CONCAT, we got insns like RD = RS, ID = - IS,\n+\t     each with a separate pseudo as destination.\n+\t     It's not correct for flow to treat them as a unit.  */\n+\t  group_insns (prev);\n \n \treturn target;\n       }\n@@ -6001,7 +6013,7 @@ bc_expand_expr (exp)\n \t  SAVE_EXPR_RTL (exp) = bc_allocate_local (int_size_in_bytes (TREE_TYPE (exp)),\n \t\t\t\t\t\t   TYPE_ALIGN (TREE_TYPE(exp)));\n \t  bc_expand_expr (TREE_OPERAND (exp, 0));\n-\t  bc_emit_instruction (dup);\n+\t  bc_emit_instruction (duplicate);\n \t  \n \t  bc_load_localaddr (SAVE_EXPR_RTL (exp));\n \t  bc_store_memory (TREE_TYPE (exp), TREE_OPERAND (exp, 0));\n@@ -6317,7 +6329,7 @@ bc_expand_expr (exp)\n   bc_expand_truth_conversion (TREE_TYPE (TREE_OPERAND (exp, 0)));\n   lab = bc_get_bytecode_label ();\n   \n-  bc_emit_instruction (dup);\n+  bc_emit_instruction (duplicate);\n   bc_emit_bytecode (opcode);\n   bc_emit_bytecode_labelref (lab);\n   \n@@ -9639,7 +9651,7 @@ bc_expand_constructor (constr)\n       if (list_length (CONSTRUCTOR_ELTS (constr))\n \t  != list_length (TYPE_FIELDS (TREE_TYPE (constr))))\n \t{\n-\t  bc_emit_instruction (dup);\n+\t  bc_emit_instruction (duplicate);\n \t  bc_emit_instruction (constSI, (HOST_WIDE_INT) int_size_in_bytes (TREE_TYPE (constr)));\n \t  bc_emit_instruction (clearBLK);\n \t}\n@@ -9686,7 +9698,7 @@ bc_expand_constructor (constr)\n \t\n \tif (list_length (CONSTRUCTOR_ELTS (constr)) < maxelt - minelt + 1)\n \t  {\n-\t    bc_emit_instruction (dup);\n+\t    bc_emit_instruction (duplicate);\n \t    bc_emit_instruction (constSI, (HOST_WIDE_INT) int_size_in_bytes (TREE_TYPE (constr)));\n \t    bc_emit_instruction (clearBLK);\n \t  }"}]}