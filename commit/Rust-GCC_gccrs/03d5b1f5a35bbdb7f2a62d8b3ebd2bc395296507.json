{"sha": "03d5b1f5a35bbdb7f2a62d8b3ebd2bc395296507", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNkNWIxZjVhMzViYmRiN2YyYTYyZDhiM2ViZDJiYzM5NTI5NjUwNw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-26T17:00:09Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-26T17:00:09Z"}, "message": "(build_binary_op): For TRUNC_MOD_EXPR and FLOOR_MOD_EXPR, set common.\n\nFrom-SVN: r5895", "tree": {"sha": "93a3d6d8a7811e26372bb95dae47b5c3f9772f98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93a3d6d8a7811e26372bb95dae47b5c3f9772f98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03d5b1f5a35bbdb7f2a62d8b3ebd2bc395296507", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03d5b1f5a35bbdb7f2a62d8b3ebd2bc395296507", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03d5b1f5a35bbdb7f2a62d8b3ebd2bc395296507", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03d5b1f5a35bbdb7f2a62d8b3ebd2bc395296507/comments", "author": null, "committer": null, "parents": [{"sha": "bb1106c9b5966541aaf364116339fef0a68cb80c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb1106c9b5966541aaf364116339fef0a68cb80c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb1106c9b5966541aaf364116339fef0a68cb80c"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "da34eee6195cc84638cac66b30754a54ffa03fc4", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03d5b1f5a35bbdb7f2a62d8b3ebd2bc395296507/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03d5b1f5a35bbdb7f2a62d8b3ebd2bc395296507/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=03d5b1f5a35bbdb7f2a62d8b3ebd2bc395296507", "patch": "@@ -1982,14 +1982,17 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n     case TRUNC_MOD_EXPR:\n     case FLOOR_MOD_EXPR:\n       if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n-\t/* Although it would be tempting to shorten always here, doing so loses\n-\t   on some targets, since the modulo instruction is undefined if the\n-\t   quotient can't be represented in the computation mode.  We shorten\n-\t   only if unsigned or if dividing by something we know != -1.  */\n-\tshorten = (TREE_UNSIGNED (orig_op0)\n-\t\t   || (TREE_CODE (op1) == INTEGER_CST\n-\t\t       && (TREE_INT_CST_LOW (op1) != -1\n-\t\t\t   || TREE_INT_CST_HIGH (op1) != -1)));\n+\t{\n+\t  /* Although it would be tempting to shorten always here, that loses\n+\t     on some targets, since the modulo instruction is undefined if the\n+\t     quotient can't be represented in the computation mode.  We shorten\n+\t     only if unsigned or if dividing by something we know != -1.  */\n+\t  shorten = (TREE_UNSIGNED (orig_op0)\n+\t\t     || (TREE_CODE (op1) == INTEGER_CST\n+\t\t\t && (TREE_INT_CST_LOW (op1) != -1\n+\t\t\t     || TREE_INT_CST_HIGH (op1) != -1)));\n+\t  common = 1;\n+\t}\n       break;\n \n     case TRUTH_ANDIF_EXPR:"}]}