{"sha": "5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI5ZGFhN2U2MGIwY2NmZDJiYzk5NzQ4YjQzNjJjNjc3M2JjYzM3OA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-02-21T00:45:21Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-02-21T00:45:21Z"}, "message": "user.cfg.in: Tweaks.\n\n2009-02-20  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* doc/doxygen/user.cfg.in: Tweaks.\n\t* doc/doxygen/doxygroups.cc: Prefer markup that can be elsewhere,\n\tbe elsewhere.\n\n\t* include/tr1_impl/unordered_map: Just use most specialized\n\tcontainer module.\n\t* include/tr1_impl/unordered_set: Same.\n\t* include/tr1_impl/array: Same.\n\t* include/bits/stl_list.h: Same.\n\t* include/bits/stl_map.h: Same.\n\t* include/bits/stl_queue.h: Same.\n\t* include/bits/stl_set.h: Same.\n\t* include/bits/stl_stack.h: Same.\n\t* include/bits/forward_list.h: Same.\n\t* include/bits/basic_string.h: Same.\n\t* include/bits/stl_multimap.h: Same.\n\t* include/bits/stl_vector.h: Same.\n\t* include/bits/stl_deque.h: Same.\n\t* include/bits/stl_multiset.h: Same.\n\t* include/bits/stl_bvector.h: Same.\n\n\t* include/backward/binders.h: Change binder module to binders.\n\n\t* include/std/complex: Add complex_numers module.\n\t* include/tr1_impl/complex: Same.\n\n\t* include/std/valarray: Add numeric_arrays module.\n\t* include/bits/gslice_array.h: Same.\n\t* include/bits/gslice.h: Same.\n\t* include/bits/mask_array.h: Same.\n\t* include/bits/slice_array.h: Same.\n\t* include/bits/indirect_array.h: Same.\n\n\t* include/bits/allocator.h: Add allocators module.\n\t* include/ext/throw_allocator.h\n\t* include/ext/pool_allocator.h\n\t* include/ext/bitmap_allocator.h\n\t* include/ext/new_allocator.h\n\t* include/ext/malloc_allocator.h\n\t* include/ext/array_allocator.h\n\t* include/ext/mt_allocator.h\n\t* include/ext/debug_allocator.h\n\t* include/ext/extptr_allocator.h\n\n\t* include/tr1_impl/functional: Move namespace markup here.\n\t* include/tr1_impl/regex: Same.\n\n\t* include/tr1_impl/type_traits: Add metaprogramming module.\n\t* include/std/type_traits: Same.\n\n\t* include/std/memory: Add memory module.\n\n\t* include/std/ratio: Add ratio module.\n\n\t* include/std/chrono: Move namespace markup here, add time module.\n\n\t* include/std/thread: Move namespace markup here, add concurrency\n\tmodule.\n\t* include/std/mutex: Use concurrency module.\n\t* include/std/condition_variable: Same.\n\n\n\t* include/bits/ios_base.h: Refine io module.\n\t* include/bits/basic_ios.h: Same.\n\t* include/std/fstream: Same.\n\t* include/std/istream: Same.\n\t* include/std/ostream: Same.\n\t* include/std/sstream: Same.\n\n\t* include/ext/vstring.h: Correct parameter markup.\n\n\t* include/bits/shared_ptr.h: Add pointer_abstractions module.\n\t* include/bits/unique_ptr.h: Same.\n\n\t* include/bits/algorithmfwd.h: Add mutating_algorithms,\n        non_mutating_algorithms, sorting_algorithms. Adjust nesting.\n\t* include/bits/stl_heap.h: Add markup for new groupings.\n\t* include/bits/stl_algobase.h: Same.\n\t* include/bits/stl_algo.h: Same.\n\n\t* include/c_compatibility/stdatomic.h: Add atomics module.\n\t* include/c_global/cstdatomic: Same.\n\n\t* libsupc++/exception: Add exceptions module.\n\t* libsupc++/typeinfo: Same.\n\t* libsupc++/new: Same.\n\t* libsupc++/exception_ptr.h: Same.\n\t* include/std/system_error: Same.\n\t* include/std/stdexcept: Same.\n\n\t* libsupc++/cxxabi.h: Move doxygroups.cc markup here.\n\t* libsupc++/cxxabi-forced.h: Same.\n\n\t* testsuite/27_io/ios_base/cons/assign_neg.cc: Fix up line numbers.\n\t* testsuite/27_io/ios_base/cons/copy_neg.cc: Same.\n\t* testsuite/30_threads/condition_variable_any/cons/assign_neg.cc: Same.\n\t* testsuite/30_threads/condition_variable_any/cons/copy_neg.cc: Same.\n\t* testsuite/30_threads/mutex/cons/assign_neg.cc: Same.\n\t* testsuite/30_threads/mutex/cons/copy_neg.cc: Same.\n\t* testsuite/30_threads/timed_mutex/cons/assign_neg.cc: Same.\n\t* testsuite/30_threads/timed_mutex/cons/copy_neg.cc: Same.\n\t* testsuite/30_threads/thread/cons/assign_neg.cc: Same.\n\t* testsuite/30_threads/thread/cons/copy_neg.cc: Same.\n\t* testsuite/30_threads/recursive_mutex/cons/assign_neg.cc: Same.\n\t* testsuite/30_threads/recursive_mutex/cons/copy_neg.cc: Same.\n\t* testsuite/30_threads/condition_variable/cons/assign_neg.cc: Same.\n\t* testsuite/30_threads/condition_variable/cons/copy_neg.cc: Same.\n\t* testsuite/30_threads/recursive_timed_mutex/cons/assign_neg.cc: Same.\n\t* testsuite/30_threads/recursive_timed_mutex/cons/copy_neg.cc: Same.\n\t* testsuite/29_atomics/atomic/cons/assign_neg.cc: Same.\n\t* testsuite/29_atomics/atomic/cons/copy_neg.cc: Same.\n\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc: Same.\n\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc: Same.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_1_neg.cc: Same.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_2_neg.cc: Same.\n\t* testsuite/23_containers/deque/requirements/dr438/assign_neg.cc: Same.\n\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc: Same.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tconstructor_1_neg.cc: Same.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tconstructor_2_neg.cc: Same.\n\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc: Same.\n\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc: Same.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_1_neg.cc: Same.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_2_neg.cc: Same.\n\t* testsuite/20_util/duration/cons/1_neg.cc: Same.\n\t* testsuite/20_util/duration/requirements/typedefs_neg1.cc: Same.\n\t* testsuite/20_util/duration/requirements/typedefs_neg2.cc: Same.\n\t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Same.\n\t* testsuite/20_util/unique_ptr/modifiers/reset_neg.cc: Same.\n\t* testsuite/20_util/unique_ptr/assign/assign.cc: Same.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Same.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc: Same.\n\t* testsuite/20_util/ratio/cons/cons_overflow.cc: Same.\n\t* testsuite/20_util/ratio/operations/ops_overflow.cc: Same.\n\nFrom-SVN: r144343", "tree": {"sha": "f65ade8e77926c6fbbf2b4879e1858fce2ea80e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f65ade8e77926c6fbbf2b4879e1858fce2ea80e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/comments", "author": null, "committer": null, "parents": [{"sha": "791838fa91bf2e7cd25b9c6cb247f1e9f7e203a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/791838fa91bf2e7cd25b9c6cb247f1e9f7e203a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/791838fa91bf2e7cd25b9c6cb247f1e9f7e203a2"}], "stats": {"total": 2633, "additions": 1602, "deletions": 1031}, "files": [{"sha": "dbd4a0aa494dcdea2ab4f4bc8331ebdc6f0dd3ba", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 154, "deletions": 12, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,3 +1,145 @@\n+2009-02-20  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* doc/doxygen/user.cfg.in: Tweaks.\n+\t* doc/doxygen/doxygroups.cc: Prefer markup that can be elsewhere,\n+\tbe elsewhere.\n+\n+\t* include/tr1_impl/unordered_map: Just use most specialized\n+\tcontainer module.\n+\t* include/tr1_impl/unordered_set: Same.\n+\t* include/tr1_impl/array: Same.\n+\t* include/bits/stl_list.h: Same.\n+\t* include/bits/stl_map.h: Same.\n+\t* include/bits/stl_queue.h: Same.\n+\t* include/bits/stl_set.h: Same.\n+\t* include/bits/stl_stack.h: Same.\n+\t* include/bits/forward_list.h: Same.\n+\t* include/bits/basic_string.h: Same.\n+\t* include/bits/stl_multimap.h: Same.\n+\t* include/bits/stl_vector.h: Same.\n+\t* include/bits/stl_deque.h: Same.\n+\t* include/bits/stl_multiset.h: Same.\n+\t* include/bits/stl_bvector.h: Same.\n+\n+\t* include/backward/binders.h: Change binder module to binders.\n+\n+\t* include/std/complex: Add complex_numers module.\n+\t* include/tr1_impl/complex: Same.\n+\n+\t* include/std/valarray: Add numeric_arrays module.\n+\t* include/bits/gslice_array.h: Same.\n+\t* include/bits/gslice.h: Same.\n+\t* include/bits/mask_array.h: Same.\n+\t* include/bits/slice_array.h: Same.\n+\t* include/bits/indirect_array.h: Same.\n+\n+\t* include/bits/allocator.h: Add allocators module.\n+\t* include/ext/throw_allocator.h\n+\t* include/ext/pool_allocator.h\n+\t* include/ext/bitmap_allocator.h\n+\t* include/ext/new_allocator.h\n+\t* include/ext/malloc_allocator.h\n+\t* include/ext/array_allocator.h\n+\t* include/ext/mt_allocator.h\n+\t* include/ext/debug_allocator.h\n+\t* include/ext/extptr_allocator.h\n+\n+\t* include/tr1_impl/functional: Move namespace markup here.\n+\t* include/tr1_impl/regex: Same.\n+\n+\t* include/tr1_impl/type_traits: Add metaprogramming module.\n+\t* include/std/type_traits: Same.\n+\n+\t* include/std/memory: Add memory module.\n+\n+\t* include/std/ratio: Add ratio module.\n+\n+\t* include/std/chrono: Move namespace markup here, add time module.\n+\n+\t* include/std/thread: Move namespace markup here, add concurrency\n+\tmodule.\n+\t* include/std/mutex: Use concurrency module.\n+\t* include/std/condition_variable: Same.\n+\n+\n+\t* include/bits/ios_base.h: Refine io module.\n+\t* include/bits/basic_ios.h: Same.\n+\t* include/std/fstream: Same.\n+\t* include/std/istream: Same.\n+\t* include/std/ostream: Same.\n+\t* include/std/sstream: Same.\n+\n+\t* include/ext/vstring.h: Correct parameter markup.\n+\n+\t* include/bits/shared_ptr.h: Add pointer_abstractions module.\n+\t* include/bits/unique_ptr.h: Same.\n+\n+\t* include/bits/algorithmfwd.h: Add mutating_algorithms,\n+        non_mutating_algorithms, sorting_algorithms. Adjust nesting.\n+\t* include/bits/stl_heap.h: Add markup for new groupings.\n+\t* include/bits/stl_algobase.h: Same.\n+\t* include/bits/stl_algo.h: Same.\n+\n+\t* include/c_compatibility/stdatomic.h: Add atomics module.\n+\t* include/c_global/cstdatomic: Same.\n+\n+\t* libsupc++/exception: Add exceptions module.\n+\t* libsupc++/typeinfo: Same.\n+\t* libsupc++/new: Same.\n+\t* libsupc++/exception_ptr.h: Same.\n+\t* include/std/system_error: Same.\n+\t* include/std/stdexcept: Same.\n+\n+\t* libsupc++/cxxabi.h: Move doxygroups.cc markup here.\n+\t* libsupc++/cxxabi-forced.h: Same.\n+\n+\t* testsuite/27_io/ios_base/cons/assign_neg.cc: Fix up line numbers.\n+\t* testsuite/27_io/ios_base/cons/copy_neg.cc: Same.\n+\t* testsuite/30_threads/condition_variable_any/cons/assign_neg.cc: Same.\n+\t* testsuite/30_threads/condition_variable_any/cons/copy_neg.cc: Same.\n+\t* testsuite/30_threads/mutex/cons/assign_neg.cc: Same.\n+\t* testsuite/30_threads/mutex/cons/copy_neg.cc: Same.\n+\t* testsuite/30_threads/timed_mutex/cons/assign_neg.cc: Same.\n+\t* testsuite/30_threads/timed_mutex/cons/copy_neg.cc: Same.\n+\t* testsuite/30_threads/thread/cons/assign_neg.cc: Same.\n+\t* testsuite/30_threads/thread/cons/copy_neg.cc: Same.\n+\t* testsuite/30_threads/recursive_mutex/cons/assign_neg.cc: Same.\n+\t* testsuite/30_threads/recursive_mutex/cons/copy_neg.cc: Same.\n+\t* testsuite/30_threads/condition_variable/cons/assign_neg.cc: Same.\n+\t* testsuite/30_threads/condition_variable/cons/copy_neg.cc: Same.\n+\t* testsuite/30_threads/recursive_timed_mutex/cons/assign_neg.cc: Same.\n+\t* testsuite/30_threads/recursive_timed_mutex/cons/copy_neg.cc: Same.\n+\t* testsuite/29_atomics/atomic/cons/assign_neg.cc: Same.\n+\t* testsuite/29_atomics/atomic/cons/copy_neg.cc: Same.\n+\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc: Same.\n+\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc: Same.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_1_neg.cc: Same.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_2_neg.cc: Same.\n+\t* testsuite/23_containers/deque/requirements/dr438/assign_neg.cc: Same.\n+\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc: Same.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tconstructor_1_neg.cc: Same.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tconstructor_2_neg.cc: Same.\n+\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc: Same.\n+\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc: Same.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_1_neg.cc: Same.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_2_neg.cc: Same.\n+\t* testsuite/20_util/duration/cons/1_neg.cc: Same.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg1.cc: Same.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg2.cc: Same.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Same.\n+\t* testsuite/20_util/unique_ptr/modifiers/reset_neg.cc: Same.\n+\t* testsuite/20_util/unique_ptr/assign/assign.cc: Same.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Same.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc: Same.\n+\t* testsuite/20_util/ratio/cons/cons_overflow.cc: Same.\n+\t* testsuite/20_util/ratio/operations/ops_overflow.cc: Same.\n+\n 2009-02-18  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* doc/doxygen/doxygroups.cc: Move algorithm groups into algorithmfwd.h.\n@@ -324,17 +466,17 @@\n \n 2009-02-03  Johannes Singler  <singler@ira.uka.de>\n \n-        * include/parallel/algorithmfwd.h:\n-        Add parallelism default for many declarations.\n-        * include/parallel/numericfwd.h: Likewise.\n-        * include/parallel/iterator.h: Use iterator_traits as usual.\n-        * include/parallel/par_loop.h:\n-        Include equally_split.h.\n-        (for_each_template_random_access_ed):\n-        Avoid calling the Result default constructor.\n-        * include/parallel/numeric: Replace\n-        for_each_template_random_access by\n-        for_each_template_random_access_ed in numeric functions.\n+\t* include/parallel/algorithmfwd.h:\n+\tAdd parallelism default for many declarations.\n+\t* include/parallel/numericfwd.h: Likewise.\n+\t* include/parallel/iterator.h: Use iterator_traits as usual.\n+\t* include/parallel/par_loop.h:\n+\tInclude equally_split.h.\n+\t(for_each_template_random_access_ed):\n+\tAvoid calling the Result default constructor.\n+\t* include/parallel/numeric: Replace\n+\tfor_each_template_random_access by\n+\tfor_each_template_random_access_ed in numeric functions.\n \n 2009-02-02  Benjamin Kosnik  <bkoz@redhat.com>\n \n@@ -450,7 +592,7 @@\n \t* config/os/gnu-linux/ldbl-extra.ver: Tweak.\n \n 2009-01-20  Benjamin Kosnik  <bkoz@redhat.com>\n-            Rainer Emrich  <r.emrich@de.tecosim.com>\n+\t    Rainer Emrich  <r.emrich@de.tecosim.com>\n \n \tPR libstdc++/38919\n \t* crossconfig.m4: Use GLIBCXX_CHECK_MATH_SUPPORT and"}, {"sha": "d11fb3bd2d136f4122b63556647a6fc643e60900", "filename": "libstdc++-v3/doc/doxygen/doxygroups.cc", "status": "modified", "additions": 21, "deletions": 89, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fdoxygroups.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fdoxygroups.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fdoxygroups.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -28,18 +28,6 @@\n /** @namespace std::tr1::__detail\n  *  @brief Implementation details not part of the namespace std::tr1 interface.\n */\n-/** @namespace std::chrono\n- *  @brief ISO C++ 0x entities sub namespace for time and date.\n-*/\n-/** @namespace std::placeholders\n- *  @brief ISO C++ 0x entities sub namespace for functional.\n-*/\n-/** @namespace std::regex_constants\n- *  @brief ISO C++ 0x entities sub namespace for regex.\n-*/\n-/** @namespace std::this_thread\n- *  @brief ISO C++ 0x entities sub namespace for thread.\n-*/\n /** @namespace __gnu_cxx\n  *  @brief GNU extensions for public use.\n */\n@@ -51,71 +39,6 @@\n  *  @brief GNU implemenation details, not for public use or\n  *  export. Used only when anonymous namespaces cannot be substituted.\n */\n-// // // // // // // // // // // // // // // // // // // // // // // //\n-/** @namespace abi\n- *  @brief The cross-vendor C++ Application Binary Interface. A\n- *  namespace alias to __cxxabiv1.\n- *\n- *  A brief overview of an ABI is given in the libstdc++ FAQ, question\n- *  5.8 (you may have a copy of the FAQ locally, or you can view the online\n- *  version at http://gcc.gnu.org/onlinedocs/libstdc++/faq/index.html#5_8).\n- *\n- *  GCC subscribes to a relatively-new cross-vendor ABI for C++, sometimes\n- *  called the IA64 ABI because it happens to be the native ABI for that\n- *  platform.  It is summarized at http://www.codesourcery.com/cxx-abi/\n- *  along with the current specification.\n- *\n- *  For users of GCC greater than or equal to 3.x, entry points are\n- *  available in <cxxabi.h>, which notes, <em>\"It is not normally\n- *  necessary for user programs to include this header, or use the\n- *  entry points directly.  However, this header is available should\n- *  that be needed.\"</em>\n-*/\n-\n-namespace abi {\n-/**\n-@brief New ABI-mandated entry point in the C++ runtime library for demangling.\n-\n-@param mangled_name A NUL-terminated character string containing the name\n-                    to be demangled.\n-\n-@param output_buffer A region of memory, allocated with malloc, of\n-                     @a *length bytes, into which the demangled name\n-                     is stored.  If @a output_buffer is not long enough,\n-                     it is expanded using realloc.  @a output_buffer may\n-                     instead be NULL; in that case, the demangled name is\n-                     placed in a region of memory allocated with malloc.\n-\n-@param length If @a length is non-NULL, the length of the buffer containing\n-              the demangled name is placed in @a *length.\n-\n-@param status @a *status is set to one of the following values:\n-              -   0: The demangling operation succeeded.\n-              -  -1: A memory allocation failiure occurred.\n-              -  -2: @a mangled_name is not a valid name under the C++ ABI\n-                     mangling rules.\n-              -  -3: One of the arguments is invalid.\n-\n-@return A pointer to the start of the NUL-terminated demangled name, or NULL\n-        if the demangling fails.  The caller is responsible for deallocating\n-        this memory using @c free.\n-\n-\n-The demangling is performed using the C++ ABI mangling rules, with\n-GNU extensions.  For example, this function is used\n-in __gnu_cxx::__verbose_terminate_handler.  See\n-http://gcc.gnu.org/onlinedocs/libstdc++/18_support/howto.html#5 for other\n-examples of use.\n-\n-@note The same demangling functionality is available via libiberty \n-(@c <libiberty/demangle.h> and @c libiberty.a) in GCC 3.1 and later, but that\n-requires explicit installation (@c --enable-install-libiberty) and uses a\n-different API, although the ABI is unchanged.\n-*/\n-char* __cxa_demangle (const char* mangled_name, char* output_buffer,\n-                      size_t* length, int* status);\n-} // namespace abi\n-\n // // // // // // // // // // // // // // // // // // // // // // // //\n \n /**\n@@ -142,10 +65,6 @@ comments all over the place, so they may seem stilted.\n <hr>\n */\n \n-// // // // // // // // // // // // // // // // // // // // // // // //\n-// This is standalone because, unlike the functor introduction, there is no\n-// single header file which serves as a base \"all containers must include\n-// this header\".  We do some quoting of 14882 here.\n /** @defgroup containers Containers\n Containers are collections of objects.\n \n@@ -169,9 +88,9 @@ All containers must meet certain requirements, summarized in\n <a href=\"tables.html\">tables</a>.\n \n The standard containers are further refined into\n-@link Sequences Sequences@endlink and\n-@link Assoc_containers Associative Containers@endlink.\n-@link Unordered_assoc_containers Unordered Associative Containers@endlink.\n+@link sequences Sequences@endlink and\n+@link associative_containers Associative Containers@endlink.\n+@link unordered_associative_containers Unordered Associative Containers@endlink.\n */\n \n /** @defgroup sequences Sequences\n@@ -218,9 +137,22 @@ elements of the container.\n All unordered associative containers must meet certain requirements,\n summarized in <a href=\"tables.html\">tables</a>.  */\n \n-// // // // // // // // // // // // // // // // // // // // // // // //\n-/* * @defgroup groupname description of group\n-placeholder text\n-*/\n+/**\n+ * @defgroup diagnostics Diagnostics\n+ *\n+ * Components for error handling, reporting, and diagnostic operations.\n+ */\n \n-// // // // // // // // // // // // // // // // // // // // // // // //\n+/**\n+ * @defgroup concurrency Concurrency\n+ *\n+ * Components for concurrent operations, including threads, mutexes,\n+ * and condition variables.\n+ */\n+\n+/**\n+ * @defgroup pointer_abstractions Pointer Abstractions\n+ * @ingroup memory\n+ *\n+ * Components for memory allocation, deallocation, and management.\n+ */"}, {"sha": "aceb67098b31d889caf57b3fe16bf3f6eb539f39", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -416,7 +416,7 @@ SORT_BRIEF_DOCS        = YES\n # hierarchy of group names into alphabetical order. If set to NO (the default) \n # the group names will appear in their defined order.\n \n-SORT_GROUP_NAMES       = NO\n+SORT_GROUP_NAMES       = YES\n \n # If the SORT_BY_SCOPE_NAME tag is set to YES, the class list will be \n # sorted by fully-qualified names, including namespaces. If set to \n@@ -539,7 +539,7 @@ WARN_IF_UNDOCUMENTED   = NO\n # parameters in a documented function, or documenting parameters that \n # don't exist or using markup commands wrongly.\n \n-WARN_IF_DOC_ERROR      = NO\n+WARN_IF_DOC_ERROR      = YES\n \n # This WARN_NO_PARAMDOC option can be abled to get warnings for \n # functions that are documented, but have no documentation for their parameters \n@@ -573,9 +573,11 @@ WARN_LOGFILE           =\n # \"myfile.cpp\" or directories like \"/usr/src/myproject\". Separate the\n # files or directories with spaces.\n \n-INPUT                  = @srcdir@/libsupc++/cxxabi.h \\\n+INPUT                  = @srcdir@/doc/doxygen/doxygroups.cc \\\n+\t\t       \t @srcdir@/libsupc++/cxxabi.h \\\n                          @srcdir@/libsupc++/cxxabi-forced.h \\\n                          @srcdir@/libsupc++/exception \\\n+\t\t\t @srcdir@/libsupc++/exception_ptr.h \\\n                          @srcdir@/libsupc++/initializer_list \\\n                          @srcdir@/libsupc++/new \\\n                          @srcdir@/libsupc++/typeinfo \\\n@@ -713,18 +715,18 @@ INPUT                  = @srcdir@/libsupc++/cxxabi.h \\\n                          include/tr1_impl/unordered_map \\\n                          include/tr1_impl/unordered_set \\\n                          include/tr1_impl/utility \\\n+                         include/tr1_impl \\\n+                         include/tr1 \\\n                          include/ \\\n                          include/@host_alias@/bits \\\n                          include/backward \\\n                          include/bits \\\n+                         include/bits/shared_ptr.h \\\n                          include/debug \\\n                          include/parallel \\\n-                         include/tr1 \\\n-                         include/tr1_impl \\\n                          include/ext \\\n                          include/ext/pb_ds \\\n-                         include/ext/pb_ds/detail \\\n-                         @srcdir@/doc/doxygen/doxygroups.cc\n+                         include/ext/pb_ds/detail \n \n # This tag can be used to specify the character encoding of the source files \n # that doxygen parses. Internally doxygen uses the UTF-8 encoding, which is \n@@ -1419,6 +1421,7 @@ PREDEFINED             = __cplusplus \\\n                          __GTHREADS \\\n                          _GLIBCXX_HAS_GTHREADS \\\n                          __GXX_EXPERIMENTAL_CXX0X__ \\\n+                         _GLIBCXX_INCLUDE_AS_CXX0X \\\n                          \"_GLIBCXX_STD_P= \" \\\n                          \"_GLIBCXX_STD_D= \" \\\n                          _GLIBCXX_STD=std \\\n@@ -1430,11 +1433,12 @@ PREDEFINED             = __cplusplus \\\n                          _GLIBCXX_END_NAMESPACE=} \\\n                          _GLIBCXX_END_NESTED_NAMESPACE=} \\\n                          \"_GLIBCXX_TEMPLATE_ARGS=...  \" \\\n-                         _GLIBCXX_INCLUDE_AS_CXX0X \\\n                          _GLIBCXX_DEPRECATED \\\n                          _GLIBCXX_USE_WCHAR_T \\\n                          _GLIBCXX_USE_LONG_LONG \\\n                          _GLIBCXX_USE_C99_STDINT_TR1 \\\n+\t\t\t _GLIBCXX_USE_SCHED_YIELD \\\n+\t\t\t _GLIBCXX_USE_NANOSLEEP \\\n                          __glibcxx_function_requires=// \\\n                          __glibcxx_class_requires=// \\\n                          __glibcxx_class_requires2=// \\"}, {"sha": "5043154222bc977785e12058558d679b49b44320", "filename": "libstdc++-v3/include/backward/binders.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbinders.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbinders.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbinders.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -65,7 +65,7 @@\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // 20.3.6 binders\n-  /** @defgroup binder Binder Classes\n+  /** @defgroup binders Binder Classes\n    * @ingroup functors\n    *\n    *  Binders turn functions/functors with two arguments into functors with\n@@ -97,7 +97,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *\n    *  @{\n    */\n-  /// One of the @link binder binder functors@endlink.\n+  /// One of the @link binders binder functors@endlink.\n   template<typename _Operation>\n     class binder1st\n     : public unary_function<typename _Operation::second_argument_type,\n@@ -123,7 +123,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return op(value, __x); }\n     } _GLIBCXX_DEPRECATED_ATTR;\n \n-  /// One of the @link binder binder functors@endlink.\n+  /// One of the @link binders binder functors@endlink.\n   template<typename _Operation, typename _Tp>\n     inline binder1st<_Operation>\n     bind1st(const _Operation& __fn, const _Tp& __x)\n@@ -132,7 +132,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return binder1st<_Operation>(__fn, _Arg1_type(__x));\n     }\n \n-  /// One of the @link binder binder functors@endlink.\n+  /// One of the @link binders binder functors@endlink.\n   template<typename _Operation>\n     class binder2nd\n     : public unary_function<typename _Operation::first_argument_type,\n@@ -158,7 +158,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return op(__x, value); }\n     } _GLIBCXX_DEPRECATED_ATTR;\n \n-  /// One of the @link binder binder functors@endlink.\n+  /// One of the @link binders binder functors@endlink.\n   template<typename _Operation, typename _Tp>\n     inline binder2nd<_Operation>\n     bind2nd(const _Operation& __fn, const _Tp& __x)"}, {"sha": "3179b58c562ef287aae950ffe35555ec4c74b161", "filename": "libstdc++-v3/include/bits/algorithmfwd.h", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -129,8 +129,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    */\n \n   /**\n-   * @defgroup set_algorithms Set Operation Algorithms\n+   * @defgroup mutating_algorithms Mutating Algorithms\n+   * @ingroup algorithms\n+   */\n+\n+  /**\n+   * @defgroup non_mutating_algorithms Non-Mutating Algorithms\n+   * @ingroup algorithms\n+   */\n+\n+  /**\n+   * @defgroup sorting_algorithms Sorting Algorithms\n    * @ingroup algorithms\n+   */\n+\n+  /**\n+   * @defgroup set_algorithms Set Operation Algorithms\n+   * @ingroup sorting_algorithms\n    *\n    * These algorithms are common set operations performed on sequences\n    * that are already sorted. The number of comparisons will be\n@@ -139,7 +154,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    * @defgroup binary_search_algorithms Binary Search Algorithms\n-   * @ingroup algorithms\n+   * @ingroup sorting_algorithms\n    *\n    * These algorithms are variations of a classic binary search, and\n    * all assume that the sequence being searched is already sorted."}, {"sha": "43882997c681afe9aa7933c62dbef041c3444956", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // Allocators -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -54,6 +54,13 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n+  /**\n+   * @defgroup allocators Allocators\n+   * @ingroup memory\n+   *\n+   * Classes encapsulating memory operations.\n+   */\n+\n   template<typename _Tp>\n     class allocator;\n \n@@ -75,6 +82,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    * @brief  The \"standard\" allocator, as per [20.4].\n+   * @ingroup allocators\n    *\n    *  Further details:\n    *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt04ch11.html"}, {"sha": "d859b861f8dfc04e4e9558b2b3a1c0771ec3330b", "filename": "libstdc++-v3/include/bits/basic_ios.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,7 +1,7 @@\n // Iostreams base classes -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008\n+// 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -58,6 +58,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // 27.4.5  Template class basic_ios\n   /**\n    *  @brief  Virtual base class for all stream classes.\n+   *  @ingroup io\n    *\n    *  Most of the member functions called dispatched on stream objects\n    *  (e.g., @c std::cout.foo(bar);) are consolidated in this class."}, {"sha": "2a49837029dc738bc89ff6c82bc4db083eec808d", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -53,7 +53,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @class basic_string basic_string.h <string>\n    *  @brief  Managing sequences of characters and character-like objects.\n    *\n-   *  @ingroup containers\n    *  @ingroup sequences\n    *\n    *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, a"}, {"sha": "89ced313fe520a54f57b3f206ea33d4c0705b349", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -400,7 +400,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @brief A standard container with linear time access to elements,\n    *  and fixed time insertion/deletion at any point in the sequence.\n    *\n-   *  @ingroup containers\n    *  @ingroup sequences\n    *\n    *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, a"}, {"sha": "353097c219e8dc8ddfb06c67e1e20f64e7efc893", "filename": "libstdc++-v3/include/bits/gslice.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // The template and inlines for the -*- C++ -*- gslice class.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2004, 2005, 2006\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2004, 2005, 2006, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -42,6 +42,11 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n+  /**\n+   * @addtogroup numeric_arrays\n+   * @{\n+   */\n+\n   /**\n    *  @brief  Class defining multi-dimensional subset of an array.\n    *\n@@ -175,6 +180,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     return *this;\n   }\n \n+  // @} group numeric_arrays\n+\n _GLIBCXX_END_NAMESPACE\n \n #endif /* _GSLICE_H */"}, {"sha": "7f0325b1891ce3431d9b207f52ed00d4f74efe19", "filename": "libstdc++-v3/include/bits/gslice_array.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // The template and inlines for the -*- C++ -*- gslice_array class.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2004, 2005\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2004, 2005, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -42,6 +42,11 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n+  /**\n+   * @addtogroup numeric_arrays\n+   * @{\n+   */\n+\n   /**\n    *  @brief  Reference to multi-dimensional subset of an array.\n    *\n@@ -209,6 +214,8 @@ _DEFINE_VALARRAY_OPERATOR(>>, __shift_right)\n \n #undef _DEFINE_VALARRAY_OPERATOR\n \n+  // @} group numeric_arrays\n+\n _GLIBCXX_END_NAMESPACE\n \n #endif /* _GSLICE_ARRAY_H */"}, {"sha": "a22581d110f673e472e2127da0d6dcbda837aaed", "filename": "libstdc++-v3/include/bits/indirect_array.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // The template and inlines for the -*- C++ -*- indirect_array class.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004, 2005\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2009\n //  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -42,6 +42,11 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n+  /**\n+   * @addtogroup numeric_arrays\n+   * @{\n+   */\n+\n   /**\n    *  @brief  Reference to arbitrary subset of an array.\n    *\n@@ -203,6 +208,8 @@ _DEFINE_VALARRAY_OPERATOR(>>, __shift_right)\n \n #undef _DEFINE_VALARRAY_OPERATOR\n \n+  // @} group numeric_arrays\n+\n _GLIBCXX_END_NAMESPACE\n \n #endif /* _INDIRECT_ARRAY_H */"}, {"sha": "d9a17d78d4b7cc0e3c9f0bd5352b0f9c347718a9", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,7 +1,7 @@\n // Iostreams base classes -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008\n+// 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -202,6 +202,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // 27.4.2  Class ios_base\n   /**\n    *  @brief  The base of the I/O class hierarchy.\n+   *  @ingroup io\n    *\n    *  This class defines everything that can be defined about I/O that does\n    *  not depend on the type of characters being input or output.  Most\n@@ -212,8 +213,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   {\n   public:\n \n-    // 27.4.2.1.1  Class ios_base::failure\n-    /// These are thrown to indicate problems.  Doc me.\n+    /** \n+     *  @brief These are thrown to indicate problems with io.\n+     *  @ingroup exceptions\n+     *\n+     *  27.4.2.1.1  Class ios_base::failure\n+     */\n     class failure : public exception\n     {\n     public:"}, {"sha": "dcd12cfbb79270f99711d7b43a6521b20fda9297", "filename": "libstdc++-v3/include/bits/mask_array.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // The template and inlines for the -*- C++ -*- mask_array class.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004, 2005\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2009\n //  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -42,6 +42,11 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n+  /**\n+   * @addtogroup numeric_arrays\n+   * @{\n+   */\n+\n   /**\n    *  @brief  Reference to selected subset of an array.\n    *\n@@ -199,6 +204,8 @@ _DEFINE_VALARRAY_OPERATOR(>>, __shift_right)\n \n #undef _DEFINE_VALARRAY_OPERATOR\n \n+  // @} group numeric_arrays\n+\n _GLIBCXX_END_NAMESPACE\n \n #endif /* _MASK_ARRAY_H */"}, {"sha": "8e70984971da07f8822d8bb2b4bf2018b74274c9", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,4 +1,4 @@\n-// <bits/shared_ptr.h> -*- C++ -*-\n+// shared_ptr and weak_ptr implementation -*- C++ -*-\n \n // Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n@@ -59,8 +59,13 @@\n #  error C++0x header cannot be included from TR1 header\n #endif\n \n-namespace std\n-{\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  /**\n+   * @addtogroup pointer_abstractions\n+   * @{\n+   */\n+\n   // counted ptr with no deleter or allocator support\n   template<typename _Ptr, _Lock_policy _Lp>\n     class _Sp_counted_ptr\n@@ -541,13 +546,6 @@ namespace std\n     { }\n \n \n-  /**\n-   *  @class __shared_ptr \n-   *\n-   *  A smart pointer with reference-counted copy semantics.\n-   *  The object pointed to is deleted when the last shared_ptr pointing to\n-   *  it is destroyed or reset.\n-   */\n   template<typename _Tp, _Lock_policy _Lp>\n     class __shared_ptr\n     {\n@@ -1228,10 +1226,12 @@ namespace std\n       mutable __weak_ptr<_Tp, _Lp>  _M_weak_this;\n     };\n \n-\n-  /// shared_ptr\n-  // The actual shared_ptr, with forwarding constructors and\n-  // assignment operators.\n+  /**\n+   *  @brief A smart pointer with reference-counted copy semantics. \n+   *  \n+   *  The object pointed to is deleted when the last shared_ptr pointing to\n+   *  it is destroyed or reset.\n+   */\n   template<typename _Tp>\n     class shared_ptr\n     : public __shared_ptr<_Tp>\n@@ -1405,9 +1405,11 @@ namespace std\n     }\n \n \n-  /// weak_ptr\n-  // The actual weak_ptr, with forwarding constructors and\n-  // assignment operators.\n+  /** \n+   *  @brief A smart pointer with weak semantics.\n+   *  \n+   *  With forwarding constructors and assignment operators.\n+   */\n   template<typename _Tp>\n     class weak_ptr\n     : public __weak_ptr<_Tp>\n@@ -1489,7 +1491,9 @@ namespace std\n     : public _Sp_owner_less<weak_ptr<_Tp>, shared_ptr<_Tp>>\n     { };\n \n-  /// enable_shared_from_this\n+  /** \n+   *  @brief Base class allowing use of member function shared_from_this.\n+   */\n   template<typename _Tp>\n     class enable_shared_from_this\n     {\n@@ -1549,7 +1553,7 @@ namespace std\n               std::forward<_Args>(__args)...);\n     }\n \n-  /** @brief  Create an object that is owned by a shared_ptr. \n+  /** @brief  Create an object that is owned by a shared_ptr.\n    *  @param  __a     An allocator.\n    *  @param  __args  Arguments for the @a _Tp object's constructor.\n    *  @return A shared_ptr that owns the newly created object.\n@@ -1582,4 +1586,6 @@ namespace std\n               std::forward<_Args>(__args)...);\n     }\n \n-}\n+  // @} group pointer_abstractions\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "27e794e73a647b6cc44a26a5a49b97b75a1b1683", "filename": "libstdc++-v3/include/bits/slice_array.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // The template and inlines for the -*- C++ -*- slice_array class.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2006\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2006, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -42,6 +42,11 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n+  /**\n+   * @addtogroup numeric_arrays\n+   * @{\n+   */\n+\n   /**\n    *  @brief  Class defining one-dimensional subset of an array.\n    *\n@@ -265,6 +270,8 @@ _DEFINE_VALARRAY_OPERATOR(>>, __shift_right)\n \n #undef _DEFINE_VALARRAY_OPERATOR\n \n+  // @} group numeric_arrays\n+\n _GLIBCXX_END_NAMESPACE\n \n #endif /* _SLICE_ARRAY_H */"}, {"sha": "530999797f09b2f4f96ecfb41ed56b62be497e9c", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 92, "deletions": 16, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -73,11 +73,6 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n-  /**\n-   * @addtogroup algorithms Algorithms\n-   * @{\n-   */\n-\n   /**\n    *  @brief Find the median of three values.\n    *  @param  a  A value.\n@@ -645,6 +640,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief  Find last matching subsequence in a sequence.\n+   *  @ingroup non_mutating_algorithms\n    *  @param  first1  Start of range to search.\n    *  @param  last1   End of range to search.\n    *  @param  first2  Start of sequence to match.\n@@ -688,6 +684,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief  Find last matching subsequence in a sequence using a predicate.\n+   *  @ingroup non_mutating_algorithms\n    *  @param  first1  Start of range to search.\n    *  @param  last1   End of range to search.\n    *  @param  first2  Start of sequence to match.\n@@ -738,6 +735,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /**\n    *  @brief  Checks that a predicate is true for all the elements\n    *          of a sequence.\n+   *  @ingroup non_mutating_algorithms\n    *  @param  first   An input iterator.\n    *  @param  last    An input iterator.\n    *  @param  pred    A predicate.\n@@ -754,6 +752,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /**\n    *  @brief  Checks that a predicate is false for all the elements\n    *          of a sequence.\n+   *  @ingroup non_mutating_algorithms\n    *  @param  first   An input iterator.\n    *  @param  last    An input iterator.\n    *  @param  pred    A predicate.\n@@ -770,6 +769,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /**\n    *  @brief  Checks that a predicate is false for at least an element\n    *          of a sequence.\n+   *  @ingroup non_mutating_algorithms\n    *  @param  first   An input iterator.\n    *  @param  last    An input iterator.\n    *  @param  pred    A predicate.\n@@ -786,6 +786,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /**\n    *  @brief  Find the first element in a sequence for which a\n    *          predicate is false.\n+   *  @ingroup non_mutating_algorithms\n    *  @param  first  An input iterator.\n    *  @param  last   An input iterator.\n    *  @param  pred   A predicate.\n@@ -808,6 +809,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief  Checks whether the sequence is partitioned.\n+   *  @ingroup mutating_algorithms\n    *  @param  first  An input iterator.\n    *  @param  last   An input iterator.\n    *  @param  pred   A predicate.\n@@ -826,6 +828,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief  Find the partition point of a partitioned range.\n+   *  @ingroup mutating_algorithms\n    *  @param  first   An iterator.\n    *  @param  last    Another iterator.\n    *  @param  pred    A predicate.\n@@ -873,6 +876,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief Copy a sequence, removing elements of a given value.\n+   *  @ingroup mutating_algorithms\n    *  @param  first   An input iterator.\n    *  @param  last    An input iterator.\n    *  @param  result  An output iterator.\n@@ -908,6 +912,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief Copy a sequence, removing elements for which a predicate is true.\n+   *  @ingroup mutating_algorithms\n    *  @param  first   An input iterator.\n    *  @param  last    An input iterator.\n    *  @param  result  An output iterator.\n@@ -946,6 +951,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n   /**\n    *  @brief Copy the elements of a sequence for which a predicate is true.\n+   *  @ingroup mutating_algorithms\n    *  @param  first   An input iterator.\n    *  @param  last    An input iterator.\n    *  @param  result  An output iterator.\n@@ -1005,6 +1011,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief Copies the range [first,first+n) into [result,result+n).\n+   *  @ingroup mutating_algorithms\n    *  @param  first  An input iterator.\n    *  @param  n      The number of elements to copy.\n    *  @param  result An output iterator.\n@@ -1031,6 +1038,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /**\n    *  @brief Copy the elements of a sequence to separate output sequences\n    *         depending on the truth value of a predicate.\n+   *  @ingroup mutating_algorithms\n    *  @param  first   An input iterator.\n    *  @param  last    An input iterator.\n    *  @param  out_true   An output iterator.\n@@ -1077,6 +1085,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief Remove elements from a sequence.\n+   *  @ingroup mutating_algorithms\n    *  @param  first  An input iterator.\n    *  @param  last   An input iterator.\n    *  @param  value  The value to be removed.\n@@ -1119,6 +1128,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief Remove elements from a sequence using a predicate.\n+   *  @ingroup mutating_algorithms\n    *  @param  first  A forward iterator.\n    *  @param  last   A forward iterator.\n    *  @param  pred   A predicate.\n@@ -1161,6 +1171,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief Remove consecutive duplicate values from a sequence.\n+   *  @ingroup mutating_algorithms\n    *  @param  first  A forward iterator.\n    *  @param  last   A forward iterator.\n    *  @return  An iterator designating the end of the resulting sequence.\n@@ -1199,6 +1210,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief Remove consecutive values from a sequence using a predicate.\n+   *  @ingroup mutating_algorithms\n    *  @param  first        A forward iterator.\n    *  @param  last         A forward iterator.\n    *  @param  binary_pred  A binary predicate.\n@@ -1429,6 +1441,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief Reverse a sequence.\n+   *  @ingroup mutating_algorithms\n    *  @param  first  A bidirectional iterator.\n    *  @param  last   A bidirectional iterator.\n    *  @return   reverse() returns no value.\n@@ -1451,6 +1464,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief Copy a sequence, reversing its elements.\n+   *  @ingroup mutating_algorithms\n    *  @param  first   A bidirectional iterator.\n    *  @param  last    A bidirectional iterator.\n    *  @param  result  An output iterator.\n@@ -1640,6 +1654,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief Rotate the elements of a sequence.\n+   *  @ingroup mutating_algorithms\n    *  @param  first   A forward iterator.\n    *  @param  middle  A forward iterator.\n    *  @param  last    A forward iterator.\n@@ -1674,6 +1689,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief Copy a sequence, rotating its elements.\n+   *  @ingroup mutating_algorithms\n    *  @param  first   A forward iterator.\n    *  @param  middle  A forward iterator.\n    *  @param  last    A forward iterator.\n@@ -1833,6 +1849,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /**\n    *  @brief Move elements for which a predicate is true to the beginning\n    *         of a sequence, preserving relative ordering.\n+   *  @ingroup mutating_algorithms\n    *  @param  first   A forward iterator.\n    *  @param  last    A forward iterator.\n    *  @param  pred    A predicate functor.\n@@ -1912,6 +1929,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief Copy the smallest elements of a sequence.\n+   *  @ingroup sorting_algorithms\n    *  @param  first   An iterator.\n    *  @param  last    Another iterator.\n    *  @param  result_first   A random-access iterator.\n@@ -1976,6 +1994,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /**\n    *  @brief Copy the smallest elements of a sequence using a predicate for\n    *         comparison.\n+   *  @ingroup sorting_algorithms\n    *  @param  first   An input iterator.\n    *  @param  last    Another input iterator.\n    *  @param  result_first   A random-access iterator.\n@@ -2440,6 +2459,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /**\n    *  @brief Finds the first position in which @a val could be inserted\n    *         without changing the ordering.\n+   *  @ingroup binary_search_algorithms\n    *  @param  first   An iterator.\n    *  @param  last    Another iterator.\n    *  @param  val     The search term.\n@@ -2492,6 +2512,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /**\n    *  @brief Finds the last position in which @a val could be inserted\n    *         without changing the ordering.\n+   *  @ingroup binary_search_algorithms\n    *  @param  first   An iterator.\n    *  @param  last    Another iterator.\n    *  @param  val     The search term.\n@@ -2538,6 +2559,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /**\n    *  @brief Finds the last position in which @a val could be inserted\n    *         without changing the ordering.\n+   *  @ingroup binary_search_algorithms\n    *  @param  first   An iterator.\n    *  @param  last    Another iterator.\n    *  @param  val     The search term.\n@@ -2590,6 +2612,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /**\n    *  @brief Finds the largest subrange in which @a val could be inserted\n    *         at any place in it without changing the ordering.\n+   *  @ingroup binary_search_algorithms\n    *  @param  first   An iterator.\n    *  @param  last    Another iterator.\n    *  @param  val     The search term.\n@@ -2717,11 +2740,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief Determines whether an element exists in a range.\n+   *  @ingroup binary_search_algorithms\n    *  @param  first   An iterator.\n    *  @param  last    Another iterator.\n    *  @param  val     The search term.\n    *  @return  True if @a val (or its equivalent) is in [@a first,@a last ].\n-   *  @ingroup binary_search_algorithms\n    *\n    *  Note that this does not actually return an iterator to @a val.  For\n    *  that, use std::find or a container's specialized find member functions.\n@@ -2746,12 +2769,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief Determines whether an element exists in a range.\n+   *  @ingroup binary_search_algorithms\n    *  @param  first   An iterator.\n    *  @param  last    Another iterator.\n    *  @param  val     The search term.\n    *  @param  comp    A functor to use for comparisons.\n    *  @return  True if @a val (or its equivalent) is in [@a first,@a last ].\n-   *  @ingroup binary_search_algorithms\n    *\n    *  Note that this does not actually return an iterator to @a val.  For\n    *  that, use std::find or a container's specialized find member functions.\n@@ -3091,6 +3114,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief Merges two sorted ranges in place.\n+   *  @ingroup sorting_algorithms\n    *  @param  first   An iterator.\n    *  @param  middle  Another iterator.\n    *  @param  last    Another iterator.\n@@ -3141,6 +3165,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief Merges two sorted ranges in place.\n+   *  @ingroup sorting_algorithms\n    *  @param  first   An iterator.\n    *  @param  middle  Another iterator.\n    *  @param  last    Another iterator.\n@@ -3477,6 +3502,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /**\n    *  @brief Determines whether all elements of a sequence exists in a range\n    *  using comparison.\n+   *  @ingroup set_algorithms\n    *  @param  first1  Start of search range.\n    *  @param  last1   End of search range.\n    *  @param  first2  Start of sequence\n@@ -3538,6 +3564,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief  Permute range into the next \"dictionary\" ordering.\n+   *  @ingroup sorting_algorithms\n    *  @param  first  Start of range.\n    *  @param  last   End of range.\n    *  @return  False if wrapped to first permutation, true otherwise.\n@@ -3592,6 +3619,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /**\n    *  @brief  Permute range into the next \"dictionary\" ordering using\n    *          comparison functor.\n+   *  @ingroup sorting_algorithms\n    *  @param  first  Start of range.\n    *  @param  last   End of range.\n    *  @param  comp   A comparison functor.\n@@ -3648,6 +3676,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief  Permute range into the previous \"dictionary\" ordering.\n+   *  @ingroup sorting_algorithms\n    *  @param  first  Start of range.\n    *  @param  last   End of range.\n    *  @return  False if wrapped to last permutation, true otherwise.\n@@ -3703,6 +3732,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /**\n    *  @brief  Permute range into the previous \"dictionary\" ordering using\n    *          comparison functor.\n+   *  @ingroup sorting_algorithms\n    *  @param  first  Start of range.\n    *  @param  last   End of range.\n    *  @param  comp   A comparison functor.\n@@ -3799,6 +3829,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /**\n    *  @brief Copy a sequence, replacing each value for which a predicate\n    *         returns true with another value.\n+   *  @ingroup mutating_algorithms\n    *  @param  first      An input iterator.\n    *  @param  last       An input iterator.\n    *  @param  result     An output iterator.\n@@ -3836,6 +3867,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n   /**\n    *  @brief  Determines whether the elements of a sequence are sorted.\n+   *  @ingroup sorting_algorithms\n    *  @param  first   An iterator.\n    *  @param  last    Another iterator.\n    *  @return  True if the elements are sorted, false otherwise.\n@@ -3848,6 +3880,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /**\n    *  @brief  Determines whether the elements of a sequence are sorted\n    *          according to a comparison functor.\n+   *  @ingroup sorting_algorithms\n    *  @param  first   An iterator.\n    *  @param  last    Another iterator.\n    *  @param  comp    A comparison functor.\n@@ -3861,6 +3894,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief  Determines the end of a sorted sequence.\n+   *  @ingroup sorting_algorithms\n    *  @param  first   An iterator.\n    *  @param  last    Another iterator.\n    *  @return  An iterator pointing to the last iterator i in [first, last)\n@@ -3888,6 +3922,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief  Determines the end of a sorted sequence using comparison functor.\n+   *  @ingroup sorting_algorithms\n    *  @param  first   An iterator.\n    *  @param  last    Another iterator.\n    *  @param  comp    A comparison functor.\n@@ -3918,6 +3953,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief  Determines min and max at once as an ordered pair.\n+   *  @ingroup sorting_algorithms\n    *  @param  a  A thing of arbitrary type.\n    *  @param  b  Another thing of arbitrary type.\n    *  @return  A pair(b, a) if b is smaller than a, pair(a, b) otherwise.\n@@ -3935,6 +3971,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief  Determines min and max at once as an ordered pair.\n+   *  @ingroup sorting_algorithms\n    *  @param  a  A thing of arbitrary type.\n    *  @param  b  Another thing of arbitrary type.\n    *  @param  comp  A @link comparison_functor comparison functor@endlink.\n@@ -3951,6 +3988,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /**\n    *  @brief  Return a pair of iterators pointing to the minimum and maximum\n    *          elements in a range.\n+   *  @ingroup sorting_algorithms\n    *  @param  first  Start of range.\n    *  @param  last   End of range.\n    *  @return  make_pair(m, M), where m is the first iterator i in \n@@ -4025,6 +4063,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /**\n    *  @brief  Return a pair of iterators pointing to the minimum and maximum\n    *          elements in a range.\n+   *  @ingroup sorting_algorithms\n    *  @param  first  Start of range.\n    *  @param  last   End of range.\n    *  @param  comp   Comparison functor.\n@@ -4139,19 +4178,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n #endif // __GXX_EXPERIMENTAL_CXX0X__\n \n-  /* @} */ // group algorithms\n-\n _GLIBCXX_END_NAMESPACE\n \n _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n-  /**\n-   * @addtogroup algorithms Algorithms\n-   * @{\n-   */\n-\n   /**\n    *  @brief Apply a function to every element of a sequence.\n+   *  @ingroup non_mutating_algorithms\n    *  @param  first  An input iterator.\n    *  @param  last   An input iterator.\n    *  @param  f      A unary function object.\n@@ -4175,6 +4208,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief Find the first occurrence of a value in a sequence.\n+   *  @ingroup non_mutating_algorithms\n    *  @param  first  An input iterator.\n    *  @param  last   An input iterator.\n    *  @param  val    The value to find.\n@@ -4198,6 +4232,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n   /**\n    *  @brief Find the first element in a sequence for which a\n    *         predicate is true.\n+   *  @ingroup non_mutating_algorithms\n    *  @param  first  An input iterator.\n    *  @param  last   An input iterator.\n    *  @param  pred   A predicate.\n@@ -4220,6 +4255,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief  Find element from a set in a sequence.\n+   *  @ingroup non_mutating_algorithms\n    *  @param  first1  Start of range to search.\n    *  @param  last1   End of range to search.\n    *  @param  first2  Start of match candidates.\n@@ -4255,6 +4291,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief  Find element from a set in a sequence using a predicate.\n+   *  @ingroup non_mutating_algorithms\n    *  @param  first1  Start of range to search.\n    *  @param  last1   End of range to search.\n    *  @param  first2  Start of match candidates.\n@@ -4295,6 +4332,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief Find two adjacent values in a sequence that are equal.\n+   *  @ingroup non_mutating_algorithms\n    *  @param  first  A forward iterator.\n    *  @param  last   A forward iterator.\n    *  @return   The first iterator @c i such that @c i and @c i+1 are both\n@@ -4324,6 +4362,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief Find two adjacent values in a sequence using a predicate.\n+   *  @ingroup non_mutating_algorithms\n    *  @param  first         A forward iterator.\n    *  @param  last          A forward iterator.\n    *  @param  binary_pred   A binary predicate.\n@@ -4357,6 +4396,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief Count the number of copies of a value in a sequence.\n+   *  @ingroup non_mutating_algorithms\n    *  @param  first  An input iterator.\n    *  @param  last   An input iterator.\n    *  @param  value  The value to be counted.\n@@ -4381,6 +4421,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief Count the elements of a sequence for which a predicate is true.\n+   *  @ingroup non_mutating_algorithms\n    *  @param  first  An input iterator.\n    *  @param  last   An input iterator.\n    *  @param  pred   A predicate.\n@@ -4405,6 +4446,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief Search a sequence for a matching sub-sequence.\n+   *  @ingroup non_mutating_algorithms\n    *  @param  first1  A forward iterator.\n    *  @param  last1   A forward iterator.\n    *  @param  first2  A forward iterator.\n@@ -4478,6 +4520,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief Search a sequence for a matching sub-sequence using a predicate.\n+   *  @ingroup non_mutating_algorithms\n    *  @param  first1     A forward iterator.\n    *  @param  last1      A forward iterator.\n    *  @param  first2     A forward iterator.\n@@ -4558,6 +4601,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief Search a sequence for a number of consecutive values.\n+   *  @ingroup non_mutating_algorithms\n    *  @param  first  A forward iterator.\n    *  @param  last   A forward iterator.\n    *  @param  count  The number of consecutive values.\n@@ -4592,6 +4636,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n   /**\n    *  @brief Search a sequence for a number of consecutive values using a\n    *         predicate.\n+   *  @ingroup non_mutating_algorithms\n    *  @param  first        A forward iterator.\n    *  @param  last         A forward iterator.\n    *  @param  count        The number of consecutive values.\n@@ -4632,6 +4677,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief Perform an operation on a sequence.\n+   *  @ingroup mutating_algorithms\n    *  @param  first     An input iterator.\n    *  @param  last      An input iterator.\n    *  @param  result    An output iterator.\n@@ -4665,6 +4711,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief Perform an operation on corresponding elements of two sequences.\n+   *  @ingroup mutating_algorithms\n    *  @param  first1     An input iterator.\n    *  @param  last1      An input iterator.\n    *  @param  first2     An input iterator.\n@@ -4703,6 +4750,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n   /**\n    *  @brief Replace each occurrence of one value in a sequence with another\n    *         value.\n+   *  @ingroup mutating_algorithms\n    *  @param  first      A forward iterator.\n    *  @param  last       A forward iterator.\n    *  @param  old_value  The value to be replaced.\n@@ -4734,6 +4782,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n   /**\n    *  @brief Replace each value in a sequence for which a predicate returns\n    *         true with another value.\n+   *  @ingroup mutating_algorithms\n    *  @param  first      A forward iterator.\n    *  @param  last       A forward iterator.\n    *  @param  pred       A predicate.\n@@ -4765,6 +4814,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n   /**\n    *  @brief Assign the result of a function object to each value in a\n    *         sequence.\n+   *  @ingroup mutating_algorithms\n    *  @param  first  A forward iterator.\n    *  @param  last   A forward iterator.\n    *  @param  gen    A function object taking no arguments and returning\n@@ -4792,6 +4842,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n   /**\n    *  @brief Assign the result of a function object to each value in a\n    *         sequence.\n+   *  @ingroup mutating_algorithms\n    *  @param  first  A forward iterator.\n    *  @param  n      The length of the sequence.\n    *  @param  gen    A function object taking no arguments and returning\n@@ -4818,6 +4869,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief Copy a sequence, removing consecutive duplicate values.\n+   *  @ingroup mutating_algorithms\n    *  @param  first   An input iterator.\n    *  @param  last    An input iterator.\n    *  @param  result  An output iterator.\n@@ -4858,6 +4910,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief Copy a sequence, removing consecutive values using a predicate.\n+   *  @ingroup mutating_algorithms\n    *  @param  first        An input iterator.\n    *  @param  last         An input iterator.\n    *  @param  result       An output iterator.\n@@ -4897,6 +4950,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief Randomly shuffle the elements of a sequence.\n+   *  @ingroup mutating_algorithms\n    *  @param  first   A forward iterator.\n    *  @param  last    A forward iterator.\n    *  @return  Nothing.\n@@ -4922,6 +4976,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n   /**\n    *  @brief Shuffle the elements of a sequence using a random number\n    *         generator.\n+   *  @ingroup mutating_algorithms\n    *  @param  first   A forward iterator.\n    *  @param  last    A forward iterator.\n    *  @param  rand    The RNG functor or function.\n@@ -4952,6 +5007,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n   /**\n    *  @brief Move elements for which a predicate is true to the beginning\n    *         of a sequence.\n+   *  @ingroup mutating_algorithms\n    *  @param  first   A forward iterator.\n    *  @param  last    A forward iterator.\n    *  @param  pred    A predicate functor.\n@@ -4983,6 +5039,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief Sort the smallest elements of a sequence.\n+   *  @ingroup sorting_algorithms\n    *  @param  first   An iterator.\n    *  @param  middle  Another iterator.\n    *  @param  last    Another iterator.\n@@ -5019,6 +5076,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n   /**\n    *  @brief Sort the smallest elements of a sequence using a predicate\n    *         for comparison.\n+   *  @ingroup sorting_algorithms\n    *  @param  first   An iterator.\n    *  @param  middle  Another iterator.\n    *  @param  last    Another iterator.\n@@ -5058,6 +5116,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief Sort a sequence just enough to find a particular position.\n+   *  @ingroup sorting_algorithms\n    *  @param  first   An iterator.\n    *  @param  nth     Another iterator.\n    *  @param  last    Another iterator.\n@@ -5096,6 +5155,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n   /**\n    *  @brief Sort a sequence just enough to find a particular position\n    *         using a predicate for comparison.\n+   *  @ingroup sorting_algorithms\n    *  @param  first   An iterator.\n    *  @param  nth     Another iterator.\n    *  @param  last    Another iterator.\n@@ -5135,6 +5195,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief Sort the elements of a sequence.\n+   *  @ingroup sorting_algorithms\n    *  @param  first   An iterator.\n    *  @param  last    Another iterator.\n    *  @return  Nothing.\n@@ -5169,6 +5230,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief Sort the elements of a sequence using a predicate for comparison.\n+   *  @ingroup sorting_algorithms\n    *  @param  first   An iterator.\n    *  @param  last    Another iterator.\n    *  @param  comp    A comparison functor.\n@@ -5206,6 +5268,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief Merges two sorted ranges.\n+   *  @ingroup sorting_algorithms\n    *  @param  first1  An iterator.\n    *  @param  first2  Another iterator.\n    *  @param  last1   Another iterator.\n@@ -5264,6 +5327,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief Merges two sorted ranges.\n+   *  @ingroup sorting_algorithms\n    *  @param  first1  An iterator.\n    *  @param  first2  Another iterator.\n    *  @param  last1   Another iterator.\n@@ -5329,6 +5393,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n   /**\n    *  @brief Sort the elements of a sequence, preserving the relative order\n    *         of equivalent elements.\n+   *  @ingroup sorting_algorithms\n    *  @param  first   An iterator.\n    *  @param  last    Another iterator.\n    *  @return  Nothing.\n@@ -5369,6 +5434,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n   /**\n    *  @brief Sort the elements of a sequence using a predicate for comparison,\n    *         preserving the relative order of equivalent elements.\n+   *  @ingroup sorting_algorithms\n    *  @param  first   An iterator.\n    *  @param  last    Another iterator.\n    *  @param  comp    A comparison functor.\n@@ -5413,6 +5479,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief Return the union of two sorted ranges.\n+   *  @ingroup set_algorithms\n    *  @param  first1  Start of first range.\n    *  @param  last1   End of first range.\n    *  @param  first2  Start of second range.\n@@ -5478,6 +5545,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief Return the union of two sorted ranges using a comparison functor.\n+   *  @ingroup set_algorithms\n    *  @param  first1  Start of first range.\n    *  @param  last1   End of first range.\n    *  @param  first2  Start of second range.\n@@ -5546,6 +5614,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief Return the intersection of two sorted ranges.\n+   *  @ingroup set_algorithms\n    *  @param  first1  Start of first range.\n    *  @param  last1   End of first range.\n    *  @param  first2  Start of second range.\n@@ -5600,6 +5669,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n   /**\n    *  @brief Return the intersection of two sorted ranges using comparison\n    *  functor.\n+   *  @ingroup set_algorithms\n    *  @param  first1  Start of first range.\n    *  @param  last1   End of first range.\n    *  @param  first2  Start of second range.\n@@ -5657,6 +5727,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief Return the difference of two sorted ranges.\n+   *  @ingroup set_algorithms\n    *  @param  first1  Start of first range.\n    *  @param  last1   End of first range.\n    *  @param  first2  Start of second range.\n@@ -5715,6 +5786,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n   /**\n    *  @brief  Return the difference of two sorted ranges using comparison\n    *  functor.\n+   *  @ingroup set_algorithms\n    *  @param  first1  Start of first range.\n    *  @param  last1   End of first range.\n    *  @param  first2  Start of second range.\n@@ -5776,6 +5848,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief  Return the symmetric difference of two sorted ranges.\n+   *  @ingroup set_algorithms\n    *  @param  first1  Start of first range.\n    *  @param  last1   End of first range.\n    *  @param  first2  Start of second range.\n@@ -5839,6 +5912,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n   /**\n    *  @brief  Return the symmetric difference of two sorted ranges using\n    *  comparison functor.\n+   *  @ingroup set_algorithms\n    *  @param  first1  Start of first range.\n    *  @param  last1   End of first range.\n    *  @param  first2  Start of second range.\n@@ -5907,6 +5981,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief  Return the minimum element in a range.\n+   *  @ingroup sorting_algorithms\n    *  @param  first  Start of range.\n    *  @param  last   End of range.\n    *  @return  Iterator referencing the first instance of the smallest value.\n@@ -5932,6 +6007,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief  Return the minimum element in a range using comparison functor.\n+   *  @ingroup sorting_algorithms\n    *  @param  first  Start of range.\n    *  @param  last   End of range.\n    *  @param  comp   Comparison functor.\n@@ -5961,6 +6037,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief  Return the maximum element in a range.\n+   *  @ingroup sorting_algorithms\n    *  @param  first  Start of range.\n    *  @param  last   End of range.\n    *  @return  Iterator referencing the first instance of the largest value.\n@@ -5986,6 +6063,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief  Return the maximum element in a range using comparison functor.\n+   *  @ingroup sorting_algorithms\n    *  @param  first  Start of range.\n    *  @param  last   End of range.\n    *  @param  comp   Comparison functor.\n@@ -6012,8 +6090,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n       return __result;\n     }\n \n-  /* @} */ // group algorithms\n-\n _GLIBCXX_END_NESTED_NAMESPACE\n \n #endif /* _STL_ALGO_H */"}, {"sha": "f370677da1c6a2901a248350fc0e790ce5b56aba", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -78,11 +78,6 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n-  /**\n-   * @addtogroup algorithms Algorithms\n-   * @{\n-   */\n-\n   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a\n   // nutshell, we are partially implementing the resolution of DR 187,\n   // when it's safe, i.e., the value_types are equal.\n@@ -114,6 +109,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief Swaps the contents of two iterators.\n+   *  @ingroup mutating_algorithms\n    *  @param  a  An iterator.\n    *  @param  b  Another iterator.\n    *  @return   Nothing.\n@@ -152,6 +148,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief Swap the elements of two sequences.\n+   *  @ingroup mutating_algorithms\n    *  @param  first1  A forward iterator.\n    *  @param  last1   A forward iterator.\n    *  @param  first2  A forward iterator.\n@@ -180,6 +177,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief This does what you think it does.\n+   *  @ingroup sorting_algorithms\n    *  @param  a  A thing of arbitrary type.\n    *  @param  b  Another thing of arbitrary type.\n    *  @return   The lesser of the parameters.\n@@ -202,6 +200,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief This does what you think it does.\n+   *  @ingroup sorting_algorithms\n    *  @param  a  A thing of arbitrary type.\n    *  @param  b  Another thing of arbitrary type.\n    *  @return   The greater of the parameters.\n@@ -224,6 +223,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief This does what you think it does.\n+   *  @ingroup sorting_algorithms\n    *  @param  a  A thing of arbitrary type.\n    *  @param  b  Another thing of arbitrary type.\n    *  @param  comp  A @link comparison_functors comparison functor@endlink.\n@@ -244,6 +244,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief This does what you think it does.\n+   *  @ingroup sorting_algorithms\n    *  @param  a  A thing of arbitrary type.\n    *  @param  b  Another thing of arbitrary type.\n    *  @param  comp  A @link comparison_functors comparison functor@endlink.\n@@ -442,6 +443,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief Copies the range [first,last) into result.\n+   *  @ingroup mutating_algorithms\n    *  @param  first  An input iterator.\n    *  @param  last   An input iterator.\n    *  @param  result An output iterator.\n@@ -474,6 +476,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n   /**\n    *  @brief Moves the range [first,last) into result.\n+   *  @ingroup mutating_algorithms\n    *  @param  first  An input iterator.\n    *  @param  last   An input iterator.\n    *  @param  result An output iterator.\n@@ -609,6 +612,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief Copies the range [first,last) into result.\n+   *  @ingroup mutating_algorithms\n    *  @param  first  A bidirectional iterator.\n    *  @param  last   A bidirectional iterator.\n    *  @param  result A bidirectional iterator.\n@@ -644,6 +648,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n   /**\n    *  @brief Moves the range [first,last) into result.\n+   *  @ingroup mutating_algorithms\n    *  @param  first  A bidirectional iterator.\n    *  @param  last   A bidirectional iterator.\n    *  @param  result A bidirectional iterator.\n@@ -715,6 +720,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief Fills the range [first,last) with copies of value.\n+   *  @ingroup mutating_algorithms\n    *  @param  first  A forward iterator.\n    *  @param  last   A forward iterator.\n    *  @param  value  A reference-to-const of arbitrary type.\n@@ -769,6 +775,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief Fills the range [first,first+n) with copies of value.\n+   *  @ingroup mutating_algorithms\n    *  @param  first  An output iterator.\n    *  @param  n      The count of copies to perform.\n    *  @param  value  A reference-to-const of arbitrary type.\n@@ -929,19 +936,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t\t\t\t    __first2, __last2);\n     }\n \n-  /* @} */ // group algorithms\n-\n _GLIBCXX_END_NAMESPACE\n \n _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n-  /**\n-   * @addtogroup algorithms Algorithms\n-   * @{\n-   */\n-\n   /**\n    *  @brief Tests a range for element-wise equality.\n+   *  @ingroup non_mutating_algorithms\n    *  @param  first1  An input iterator.\n    *  @param  last1   An input iterator.\n    *  @param  first2  An input iterator.\n@@ -970,6 +971,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief Tests a range for element-wise equality.\n+   *  @ingroup non_mutating_algorithms\n    *  @param  first1  An input iterator.\n    *  @param  last1   An input iterator.\n    *  @param  first2  An input iterator.\n@@ -1000,6 +1002,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief Performs \"dictionary\" comparison on ranges.\n+   *  @ingroup sorting_algorithms\n    *  @param  first1  An input iterator.\n    *  @param  last1   An input iterator.\n    *  @param  first2  An input iterator.\n@@ -1036,6 +1039,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief Performs \"dictionary\" comparison on ranges.\n+   *  @ingroup sorting_algorithms\n    *  @param  first1  An input iterator.\n    *  @param  last1   An input iterator.\n    *  @param  first2  An input iterator.\n@@ -1075,6 +1079,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief Finds the places in ranges which don't match.\n+   *  @ingroup non_mutating_algorithms\n    *  @param  first1  An input iterator.\n    *  @param  last1   An input iterator.\n    *  @param  first2  An input iterator.\n@@ -1108,6 +1113,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \n   /**\n    *  @brief Finds the places in ranges which don't match.\n+   *  @ingroup non_mutating_algorithms\n    *  @param  first1  An input iterator.\n    *  @param  last1   An input iterator.\n    *  @param  first2  An input iterator.\n@@ -1140,8 +1146,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n       return pair<_InputIterator1, _InputIterator2>(__first1, __first2);\n     }\n \n-  /* @} */ // group algorithms\n-\n _GLIBCXX_END_NESTED_NAMESPACE\n \n // NB: This file is included within many other C++ includes, as a way"}, {"sha": "416fba8324432475aa887910521ad23989d853ff", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -467,7 +467,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n    *  really references and pointers to bool.  See DR96 for details.  @see\n    *  vector for function documentation.\n    *\n-   *  @ingroup containers\n    *  @ingroup sequences\n    *\n    *  In some terminology a %vector can be described as a dynamic"}, {"sha": "1dbe0232c098a1cd22ba69beb3dc225c60509549", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -562,7 +562,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n    *  @brief  A standard container using fixed-size memory allocation and\n    *  constant-time manipulation of elements at either end.\n    *\n-   *  @ingroup containers\n    *  @ingroup sequences\n    *\n    *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, a"}, {"sha": "10c2a9d38cc41a0c991166aad13a839d62a97a2d", "filename": "libstdc++-v3/include/bits/stl_heap.h", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // Heap implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -66,6 +66,11 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n+  /**\n+   * @defgroup heap_algorithms Heap Algorithms\n+   * @ingroup sorting_algorithms\n+   */\n+\n   template<typename _RandomAccessIterator, typename _Distance>\n     _Distance\n     __is_heap_until(_RandomAccessIterator __first, _Distance __n)\n@@ -144,7 +149,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @brief  Push an element onto a heap.\n    *  @param  first  Start of heap.\n    *  @param  last   End of heap + element.\n-   *  @ingroup heap\n+   *  @ingroup heap_algorithms\n    *\n    *  This operation pushes the element at last-1 onto the valid heap over the\n    *  range [first,last-1).  After completion, [first,last) is a valid heap.\n@@ -192,7 +197,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @param  first  Start of heap.\n    *  @param  last   End of heap + element.\n    *  @param  comp   Comparison functor.\n-   *  @ingroup heap\n+   *  @ingroup heap_algorithms\n    *\n    *  This operation pushes the element at last-1 onto the valid heap over the\n    *  range [first,last-1).  After completion, [first,last) is a valid heap.\n@@ -266,7 +271,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @brief  Pop an element off a heap.\n    *  @param  first  Start of heap.\n    *  @param  last   End of heap.\n-   *  @ingroup heap\n+   *  @ingroup heap_algorithms\n    *\n    *  This operation pops the top of the heap.  The elements first and last-1\n    *  are swapped and [first,last-1) is made into a heap.\n@@ -339,7 +344,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @param  first  Start of heap.\n    *  @param  last   End of heap.\n    *  @param  comp   Comparison functor to use.\n-   *  @ingroup heap\n+   *  @ingroup heap_algorithms\n    *\n    *  This operation pops the top of the heap.  The elements first and last-1\n    *  are swapped and [first,last-1) is made into a heap.  Comparisons are\n@@ -364,7 +369,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @brief  Construct a heap over a range.\n    *  @param  first  Start of heap.\n    *  @param  last   End of heap.\n-   *  @ingroup heap\n+   *  @ingroup heap_algorithms\n    *\n    *  This operation makes the elements in [first,last) into a heap.\n   */\n@@ -403,7 +408,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @param  first  Start of heap.\n    *  @param  last   End of heap.\n    *  @param  comp   Comparison functor to use.\n-   *  @ingroup heap\n+   *  @ingroup heap_algorithms\n    *\n    *  This operation makes the elements in [first,last) into a heap.\n    *  Comparisons are made using comp.\n@@ -443,7 +448,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @brief  Sort a heap.\n    *  @param  first  Start of heap.\n    *  @param  last   End of heap.\n-   *  @ingroup heap\n+   *  @ingroup heap_algorithms\n    *\n    *  This operation sorts the valid heap in the range [first,last).\n   */\n@@ -471,7 +476,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @param  first  Start of heap.\n    *  @param  last   End of heap.\n    *  @param  comp   Comparison functor to use.\n-   *  @ingroup heap\n+   *  @ingroup heap_algorithms\n    *\n    *  This operation sorts the valid heap in the range [first,last).\n    *  Comparisons are made using comp.\n@@ -500,7 +505,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @param  first  Start of range.\n    *  @param  last   End of range.\n    *  @return  An iterator pointing to the first element not in the heap.\n-   *  @ingroup heap\n+   *  @ingroup heap_algorithms\n    *\n    *  This operation returns the last iterator i in [first, last) for which\n    *  the range [first, i) is a heap.\n@@ -526,7 +531,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @param  last   End of range.\n    *  @param  comp   Comparison functor to use.\n    *  @return  An iterator pointing to the first element not in the heap.\n-   *  @ingroup heap\n+   *  @ingroup heap_algorithms\n    *\n    *  This operation returns the last iterator i in [first, last) for which\n    *  the range [first, i) is a heap.  Comparisons are made using comp.\n@@ -551,7 +556,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @param  first  Start of range.\n    *  @param  last   End of range.\n    *  @return  True if range is a heap, false otherwise.\n-   *  @ingroup heap\n+   *  @ingroup heap_algorithms\n   */\n   template<typename _RandomAccessIterator>\n     inline bool\n@@ -564,7 +569,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @param  last   End of range.\n    *  @param  comp   Comparison functor to use.\n    *  @return  True if range is a heap, false otherwise.\n-   *  @ingroup heap\n+   *  @ingroup heap_algorithms\n   */\n   template<typename _RandomAccessIterator, typename _Compare>\n     inline bool"}, {"sha": "6eb1f23fa9ff485bff7e3ba11520d1a616b51264", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -379,7 +379,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n    *  @brief A standard container with linear time access to elements,\n    *  and fixed time insertion/deletion at any point in the sequence.\n    *\n-   *  @ingroup containers\n    *  @ingroup sequences\n    *\n    *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, a"}, {"sha": "d27592f2ab57013cf16820dbbe4b3d47d1baff5d", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -72,7 +72,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n    *  @brief A standard container made up of (key,value) pairs, which can be\n    *  retrieved based on a key, in logarithmic time.\n    *\n-   *  @ingroup containers\n    *  @ingroup associative_containers\n    *\n    *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, a"}, {"sha": "3c8e7d739e776e4c4a33c4dd308278a93d2ab3c6", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -71,7 +71,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n    *  @brief A standard container made up of (key,value) pairs, which can be\n    *  retrieved based on a key, in logarithmic time.\n    *\n-   *  @ingroup containers\n    *  @ingroup associative_containers\n    *\n    *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, a"}, {"sha": "6723c1a1fd128d2a965720bcbde0a7fb2031c76d", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -71,7 +71,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n    *  @brief A standard container made up of elements, which can be retrieved\n    *  in logarithmic time.\n    *\n-   *  @ingroup containers\n    *  @ingroup associative_containers\n    *\n    *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, a"}, {"sha": "69ca0db6b6a34ec94bf9fc46461b5a9ae051fa2a", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -70,7 +70,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /**\n    *  @brief  A standard container giving FIFO behavior.\n    *\n-   *  @ingroup containers\n    *  @ingroup sequences\n    *\n    *  Meets many of the requirements of a\n@@ -338,7 +337,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /**\n    *  @brief  A standard container automatically sorting its contents.\n    *\n-   *  @ingroup containers\n    *  @ingroup sequences\n    *\n    *  This is not a true container, but an @e adaptor.  It holds"}, {"sha": "7fdf20f0a72ca0d0e792b7a24312c53d5872139f", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -71,7 +71,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n    *  @brief A standard container made up of unique keys, which can be\n    *  retrieved in logarithmic time.\n    *\n-   *  @ingroup containers\n    *  @ingroup associative_containers\n    *\n    *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, a"}, {"sha": "55a544a9e8672fe964d3d88dc4b125f4cfd9951d", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -70,7 +70,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /**\n    *  @brief  A standard container giving FILO behavior.\n    *\n-   *  @ingroup containers\n    *  @ingroup sequences\n    *\n    *  Meets many of the requirements of a"}, {"sha": "2350e7fc629770a7cdacba30d575337dd14ad233", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -157,7 +157,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n    *  @brief A standard container which offers fixed time access to\n    *  individual elements in any order.\n    *\n-   *  @ingroup containers\n    *  @ingroup sequences\n    *\n    *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, a"}, {"sha": "51573c01bb056502af6df5ab6ad2359523823600", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -47,6 +47,11 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n+  /**\n+   * @addtogroup pointer_abstractions\n+   * @{\n+   */\n+\n   /// Primary template, default_delete.\n   template<typename _Tp> \n     struct default_delete\n@@ -443,6 +448,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t       const unique_ptr<_Up, _Up_Deleter>& __y)\n     { return !(__x.get() < __y.get()); }\n \n+  // @} group pointer_abstractions\n+\n _GLIBCXX_END_NAMESPACE\n \n #endif /* _UNIQUE_PTR_H */"}, {"sha": "776f6071a88c3c46ef6e6ec88ce0424c49590b56", "filename": "libstdc++-v3/include/c_compatibility/stdatomic.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdatomic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdatomic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdatomic.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- compatibility header.\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,6 +41,13 @@\n _GLIBCXX_BEGIN_NAMESPACE(std)\n _GLIBCXX_BEGIN_EXTERN_C\n \n+  /**\n+   * @defgroup atomics Atomics\n+   *\n+   * Components for performing atomic operations.\n+   * @{\n+   */\n+\n   /// Enumeration for memory_order\n   typedef enum memory_order \n     {\n@@ -179,6 +186,8 @@ _GLIBCXX_BEGIN_EXTERN_C\n     atomic_flag_clear_explicit(__g, __x);\t\t       \t\t\\\n     __r; })\n \n+  // @} group atomics\n+\n _GLIBCXX_END_EXTERN_C\n _GLIBCXX_END_NAMESPACE\n "}, {"sha": "8712178df8bbbfdd8e09ba73e5991333fbaa763a", "filename": "libstdc++-v3/include/c_global/cstdatomic", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdatomic?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header.\n \n-// Copyright (C) 2008\n+// Copyright (C) 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -55,6 +55,11 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n+  /**\n+   * @addtogroup atomics\n+   * @{\n+   */\n+\n   /// kill_dependency\n   template<typename _Tp>\n     inline _Tp \n@@ -839,6 +844,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     atomic_fetch_xor(volatile __atomic_base<_ITp>* __a, _ITp __i)\n     { return atomic_fetch_xor_explicit(__a, __i, memory_order_seq_cst); }\n \n+  // @} group atomics\n+\n _GLIBCXX_END_NAMESPACE\n \n #endif"}, {"sha": "cb8efb2f0cdb11a266b70175698fa6bea7fb0a08", "filename": "libstdc++-v3/include/ext/array_allocator.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,7 @@\n // array allocator -*- C++ -*-\n \n-// Copyright (C) 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -94,6 +95,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   /**\n    *  @brief  An allocator that uses previously allocated memory.\n    *  This memory can be externally, globally, or otherwise allocated.\n+   *  @ingroup allocators\n    */\n   template<typename _Tp, typename _Array = std::tr1::array<_Tp, 1> >\n     class array_allocator : public array_allocator_base<_Tp>"}, {"sha": "69f8a9d02ea515ed47894d912717a1f0cf99cef5", "filename": "libstdc++-v3/include/ext/bitmap_allocator.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,7 @@\n // Bitmap Allocator. -*- C++ -*-\n \n-// Copyright (C) 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -706,7 +707,10 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t};\n     };\n \n-  /// Primary template\n+  /**\n+   * @brief Bitmap Allocator, primary template.\n+   * @ingroup allocators\n+   */\n   template<typename _Tp>\n     class bitmap_allocator : private free_list\n     {"}, {"sha": "b80ec3e0b7c0f09b578d4d1257a3585a8bbcf8c2", "filename": "libstdc++-v3/include/ext/debug_allocator.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -56,6 +56,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n   /**\n    *  @brief  A meta-allocator with debugging bits, as per [20.4].\n+   *  @ingroup allocators\n    *\n    *  This is precisely the allocator defined in the C++ Standard. \n    *    - all allocation calls operator new"}, {"sha": "3785f05ed03f721053ed0513a011a30f626d3082", "filename": "libstdc++-v3/include/ext/extptr_allocator.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // <extptr_allocator.h> -*- C++ -*-\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -47,6 +47,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n   /**\n    * @brief An example allocator which uses a non-standard pointer type.\n+   * @ingroup allocators\n    *\n    * This allocator specifies that containers use a 'relative pointer' as it's\n    * pointer type.  (See ext/pointer.h)  Memory allocation in this example"}, {"sha": "84989bc16e60fa0a875fcdddb13ab77f6f92e4f2", "filename": "libstdc++-v3/include/ext/malloc_allocator.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // Allocator that wraps \"C\" malloc -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -47,6 +47,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n   /**\n    *  @brief  An allocator that uses malloc.\n+   *  @ingroup allocators\n    *\n    *  This is precisely the allocator defined in the C++ Standard. \n    *    - all allocation calls malloc"}, {"sha": "749946f1c829b1c4f4176f0e939a2c2ff8101241", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // MT-optimized allocator -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -620,6 +620,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n    *  size per thread plus a \"global\" one. Steps are taken to limit\n    *  the per thread freelist sizes (by returning excess back to\n    *  the \"global\" list).\n+   *  @ingroup allocators\n    *\n    *  Further details:\n    *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt12ch32.html"}, {"sha": "4dbc8b951790711e8556f894e7f633764abd5f9c", "filename": "libstdc++-v3/include/ext/new_allocator.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,7 @@\n // Allocator that wraps operator new -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2009\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -45,6 +46,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n   /**\n    *  @brief  An allocator that uses global new, as per [20.4].\n+   *  @ingroup allocators\n    *\n    *  This is precisely the allocator defined in the C++ Standard. \n    *    - all allocation calls operator new"}, {"sha": "41ae4f4adfdc8f5ff639a7e2c7482da5c7ca93ca", "filename": "libstdc++-v3/include/ext/pool_allocator.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // Allocators -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -119,7 +119,10 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     };\n \n \n-  /// class __pool_alloc.\n+  /**\n+   * @brief  Allocator using a memory pool with a single lock.\n+   * @ingroup allocators\n+   */\n   template<typename _Tp>\n     class __pool_alloc : private __pool_alloc_base\n     {"}, {"sha": "e4fc40285ac2d22dd88ed050e9d77cf83cf132d5", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -79,7 +79,10 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     get_prob();\n   };\n \n-  /// Thown by throw_allocator.\n+  /** \n+   *  @brief Thown by throw_allocator.\n+   *  @ingroup exceptions\n+   */\n   struct forced_exception_error : public std::exception\n   { };\n \n@@ -184,7 +187,10 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     static size_t \t\t_S_label;\n   };\n \n-  /// Allocator class with logging and exception control.\n+  /** \n+   *  @brief Allocator class with logging and exception control.\n+   *  @ingroup allocators\n+   */\n   template<typename T>\n     class throw_allocator : public throw_allocator_base\n     {"}, {"sha": "cea0f0a4fb2d19b3db4c3378d40af9565ece6d4d", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 626, "deletions": 589, "changes": 1215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378"}, {"sha": "7602d71404ac791e16270bbdcc13d6e958c0c1de", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // <chrono> -*- C++ -*-\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -53,6 +53,17 @@\n \n namespace std \n {\n+  /**\n+   * @defgroup chrono Time\n+   * @ingroup utilities\n+   *\n+   * Classes and functions for time.\n+   * @{\n+   */\n+\n+  /** @namespace std::chrono\n+   *  @brief ISO C++ 0x entities sub namespace for time and date.\n+   */\n   namespace chrono\n   {\n     template<typename _Rep, typename _Period = ratio<1>>\n@@ -84,7 +95,7 @@ namespace std\n \n   namespace chrono \n   {\n-    // primary template for duration_cast impl.\n+    // Primary template for duration_cast impl.\n     template<typename _ToDuration, typename _CF, typename _CR,\n              bool _NumIsOne = false, bool _DenIsOne = false>\n       struct __duration_cast_impl\n@@ -132,6 +143,7 @@ namespace std\n           }\n       };\n \n+    /// duration_cast\n     template<typename _ToDuration, typename _Rep, typename _Period>\n       inline _ToDuration\n       duration_cast(const duration<_Rep, _Period>& __d)\n@@ -145,11 +157,13 @@ namespace std\n           __cf::num == 1, __cf::den == 1>::__cast(__d);\n       }\n \n+    /// treat_as_floating_point\n     template<typename _Rep>\n       struct treat_as_floating_point \n       : is_floating_point<_Rep>\n       { };\n \n+    /// duration_values\n     template<typename _Rep>\n       struct duration_values\n       {\n@@ -433,11 +447,22 @@ namespace std\n                  const duration<_Rep2, _Period2>& __rhs)\n       { return !(__lhs < __rhs); }\n \n+    /// nanoseconds\n     typedef duration<int64_t,        nano> nanoseconds;\n+\n+    /// microseconds\n     typedef duration<int64_t,       micro> microseconds;\n+\n+    /// milliseconds\n     typedef duration<int64_t,       milli> milliseconds;\n+    \n+    /// seconds\n     typedef duration<int64_t             > seconds;\n+\n+    /// minutes\n     typedef duration<int,     ratio<  60>> minutes;\n+\n+    /// hours\n     typedef duration<int,     ratio<3600>> hours;\n \n     /// time_point\n@@ -496,6 +521,7 @@ namespace std\n \tduration __d;\n       };\n   \n+    /// time_point_cast\n     template<typename _ToDuration, typename _Clock, typename _Duration>\n       inline time_point<_Clock, _ToDuration> \n       time_point_cast(const time_point<_Clock, _Duration>& __t)\n@@ -621,6 +647,7 @@ namespace std\n     };\n \n #ifdef _GLIBCXX_USE_CLOCK_MONOTONIC\n+    /// monotonic_clock\n     struct monotonic_clock\n     {\n       typedef chrono::nanoseconds duration;\n@@ -638,8 +665,10 @@ namespace std\n #endif\n \n     typedef system_clock high_resolution_clock;\n-  }\n-}\n+  } // namespace chrono\n+\n+  // @} group chrono\n+} // namespace std\n \n #endif //_GLIBCXX_USE_C99_STDINT_TR1\n "}, {"sha": "ebde1a0a23205cbdf9ade633f65b89594650b805", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,7 +1,7 @@\n // The template and inlines for the -*- C++ -*- complex number classes.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008\n+// 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -53,6 +53,14 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n+  /**\n+   * @defgroup complex_numbers Complex Numbers\n+   * @ingroup numerics\n+   *\n+   * Classes and functions for complex numbers.\n+   * @{\n+   */\n+\n   // Forward declarations.\n   template<typename _Tp> class complex;\n   template<> class complex<float>;\n@@ -104,7 +112,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _Tp> complex<_Tp> tan(const complex<_Tp>&);\n   /// Return complex hyperbolic tangent of @a z.\n   template<typename _Tp> complex<_Tp> tanh(const complex<_Tp>&);\n-  //@}\n     \n     \n   // 26.2.2  Primary template class complex\n@@ -1448,8 +1455,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // These bits have to be at the end of this file, so that the\n   // specializations have all been defined.\n-  // ??? No, they have to be there because of compiler limitation at\n-  // inlining.  It suffices that class specializations be defined.\n   inline\n   complex<float>::complex(const complex<double>& __z)\n   : _M_value(__z.__rep()) { }\n@@ -1483,6 +1488,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif\n #endif\n \n+  // @} group complex_numbers\n+\n _GLIBCXX_END_NAMESPACE\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)"}, {"sha": "85687cab44c5c8ae8770af9b93d7f79195f8f006", "filename": "libstdc++-v3/include/std/condition_variable", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -47,6 +47,14 @@\n \n namespace std\n {\n+  /**\n+   * @defgroup condition_variables Condition Variables\n+   * @ingroup concurrency\n+   *\n+   * Classes for condition_variable support.\n+   * @{\n+   */\n+\n   /// condition_variable\n   class condition_variable\n   {\n@@ -211,6 +219,8 @@ namespace std\n     native_handle()\n     { return &_M_cond; }\n   };\n+\n+  // @} group condition_variables\n }\n \n #endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "097d5769fa2bddce152532ef70c6159c10b55b98", "filename": "libstdc++-v3/include/std/fstream", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,7 +1,7 @@\n // File based streams -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008\n+// 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -53,6 +53,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // [27.8.1.1] template class basic_filebuf\n   /**\n    *  @brief  The actual work of input and output (for files).\n+   *  @ingroup io\n    *\n    *  This class associates both its input and output sequence with an\n    *  external disk file, and maintains a joint file position for both\n@@ -392,6 +393,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // [27.8.1.5] Template class basic_ifstream\n   /**\n    *  @brief  Controlling input for files.\n+   *  @ingroup io\n    *\n    *  This class supports reading from named files, using the inherited\n    *  functions from std::basic_istream.  To control the associated\n@@ -520,6 +522,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // [27.8.1.8] Template class basic_ofstream\n   /**\n    *  @brief  Controlling output for files.\n+   *  @ingroup io\n    *\n    *  This class supports reading from named files, using the inherited\n    *  functions from std::basic_ostream.  To control the associated\n@@ -651,6 +654,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // [27.8.1.11] Template class basic_fstream\n   /**\n    *  @brief  Controlling input and output for files.\n+   *  @ingroup io\n    *\n    *  This class supports reading from and writing to named files, using\n    *  the inherited functions from std::basic_iostream.  To control the"}, {"sha": "d59afe679285df60fb9f34f35c1c197d099e5ae6", "filename": "libstdc++-v3/include/std/istream", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,7 +1,7 @@\n // Input streams -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008\n+// 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -50,6 +50,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // [27.6.1.1] Template class basic_istream\n   /**\n    *  @brief  Controlling input.\n+   *  @ingroup io\n    *\n    *  This is the base class for all input streams.  It provides text\n    *  formatting of all builtin types, and communicates with any class\n@@ -758,6 +759,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // 27.6.1.5 Template class basic_iostream\n   /**\n    *  @brief  Merging istream and ostream capabilities.\n+   *  @ingroup io\n    *\n    *  This class multiply inherits from the input and output stream classes\n    *  simply to provide a single interface."}, {"sha": "1ee4031ff17c5e2dda51885d446a1344cf95411f", "filename": "libstdc++-v3/include/std/memory", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // <memory> -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -95,4 +95,11 @@\n #  include <backward/auto_ptr.h>\n #endif\n \n+/**\n+ * @defgroup memory Memory\n+ * @ingroup utilities\n+ *\n+ * Components for memory allocation, deallocation, and management.\n+ */\n+\n #endif /* _GLIBCXX_MEMORY */"}, {"sha": "6d6475d8c12748586e6658cddd49773e8ac1780b", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -56,6 +56,14 @@\n \n namespace std\n {\n+  /**\n+   * @defgroup mutexes Mutexes\n+   * @ingroup concurrency\n+   *\n+   * Classes for mutex support.\n+   * @{\n+   */\n+\n   /// mutex\n   class mutex\n   {\n@@ -383,7 +391,11 @@ namespace std\n   extern const try_to_lock_t\ttry_to_lock;\n   extern const adopt_lock_t\tadopt_lock;\n \n-  /// Thrown to indicate errors with lock operations.\n+  /** \n+   *  @brief Thrown to indicate errors with lock operations.\n+   *\n+   *  @ingroup exceptions\n+   */\n   class lock_error : public exception\n   {\n   public:\n@@ -682,6 +694,7 @@ namespace std\n       return __try_lock_impl<0>::__do_try_lock(__locks);\n     }\n \n+  /// lock\n   template<typename _L1, typename _L2, typename ..._L3>\n     void\n     lock(_L1&, _L2&, _L3&...);\n@@ -727,6 +740,7 @@ namespace std\n \n   extern \"C\" void __once_proxy();\n \n+  /// call_once\n   template<typename _Callable, typename... _Args>\n     void\n     call_once(once_flag& __once, _Callable __f, _Args&&... __args)\n@@ -751,6 +765,8 @@ namespace std\n       if (__e)\n \t__throw_system_error(__e);\n     }\n+\n+  // @} group mutexes\n }\n \n #endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "092f7048d879d9024da91c7ebb7be78a68c5531e", "filename": "libstdc++-v3/include/std/ostream", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,7 +1,7 @@\n // Output streams -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008\n+// 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -50,6 +50,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // [27.6.2.1] Template class basic_ostream\n   /**\n    *  @brief  Controlling output.\n+   *  @ingroup io\n    *\n    *  This is the base class for all output streams.  It provides text\n    *  formatting of all builtin types, and communicates with any class"}, {"sha": "5f6af6b0f1f83d16e7fb1f1b842df70998c3c4c2", "filename": "libstdc++-v3/include/std/ratio", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n-// <ratio> -*- C++ -*-\n+// ratio -*- C++ -*-\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the \n@@ -47,6 +47,14 @@\n \n namespace std\n {\n+  /**\n+   * @defgroup ratio Rational Arithmetic\n+   * @ingroup utilities\n+   *\n+   * Compile time representation of fininte rational numbers.\n+   * @{\n+   */\n+\n   template<intmax_t _Pn>\n     struct __static_sign\n     : integral_constant<intmax_t, (_Pn < 0) ? -1 : 1>\n@@ -132,7 +140,7 @@ namespace std\n \n   /**\n    *  @brief Provides compile-time rational arithmetic.\n-   * \n+   *\n    *  This class template represents any finite rational number with a\n    *  numerator and denominator representable by compile-time constants of\n    *  type intmax_t. The ratio is simplified when instantiated.\n@@ -289,6 +297,8 @@ namespace std\n   typedef ratio<            1000000000000, 1> tera;\n   typedef ratio<         1000000000000000, 1> peta;\n   typedef ratio<      1000000000000000000, 1> exa;\n+\n+  // @} group ratio\n }\n \n #endif //_GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "400760a8d31c956df899428b8478c872a2a1d8d5", "filename": "libstdc++-v3/include/std/sstream", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,7 +1,7 @@\n // String based streams -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2008 Free Software Foundation, Inc.\n+// 2006, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -49,6 +49,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // [27.7.1] template class basic_stringbuf\n   /**\n    *  @brief  The actual work of input and output (for std::string).\n+   *  @ingroup io\n    *\n    *  This class associates either or both of its input and output sequences\n    *  with a sequence of characters, which can be initialized from, or made\n@@ -249,6 +250,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // [27.7.2] Template class basic_istringstream\n   /**\n    *  @brief  Controlling input for std::string.\n+   *  @ingroup io\n    *\n    *  This class supports reading from objects of type std::basic_string,\n    *  using the inherited functions from std::basic_istream.  To control\n@@ -358,6 +360,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // [27.7.3] Template class basic_ostringstream\n   /**\n    *  @brief  Controlling output for std::string.\n+   *  @ingroup io\n    *\n    *  This class supports writing to objects of type std::basic_string,\n    *  using the inherited functions from std::basic_ostream.  To control\n@@ -467,6 +470,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // [27.7.4] Template class basic_stringstream\n   /**\n    *  @brief  Controlling input and output for std::string.\n+   *  @ingroup io\n    *\n    *  This class supports reading from and writing to objects of type\n    *  std::basic_string, using the inherited functions from"}, {"sha": "b1500fb1da701779c56cd59eacaf747312060193", "filename": "libstdc++-v3/include/std/stdexcept", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // Standard exception classes  -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2005, 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2005, 2007, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -45,6 +45,11 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n+  /**\n+   * @addtogroup exceptions\n+   * @{\n+   */\n+\n   /** Logic errors represent problems in the internal logic of a program;\n    *  in theory, these are preventable, and even detectable before the\n    *  program runs (e.g., violations of class invariants).\n@@ -143,6 +148,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     explicit underflow_error(const string& __arg);\n   };\n \n+  // @} group exceptions\n+\n _GLIBCXX_END_NAMESPACE\n \n #endif /* _GLIBCXX_STDEXCEPT */"}, {"sha": "940ea7cadb73a085e28840bcf0167560cb96ee48", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -318,7 +318,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { return !(__lhs == __rhs); }\n \n \n-  /// Thrown to indicate error code of underlying system.\n+  /** \n+   *  @brief Thrown to indicate error code of underlying system.\n+   *\n+   *  @ingroup exceptions\n+   */\n   class system_error : public std::runtime_error\n   {\n   private:"}, {"sha": "f2e5fc3ba62259d5d8cf73f31d71038088bbbf64", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -53,6 +53,14 @@\n \n namespace std\n {\n+  /**\n+   * @defgroup threads Threads\n+   * @ingroup concurrency\n+   *\n+   * Classes for thread support.\n+   * @{\n+   */\n+\n   /// thread\n   class thread\n   {\n@@ -225,7 +233,10 @@ namespace std\n \treturn __out << __id._M_thread;\n     }\n \n-  // 30.2.2 Namespace this_thread.\n+  /** @namespace std::this_thread\n+   *  @brief ISO C++ 0x entities sub namespace for thread.\n+   *  30.2.2 Namespace this_thread.\n+   */\n   namespace this_thread\n   {\n     /// get_id\n@@ -267,6 +278,8 @@ namespace std\n       }\n #endif\n   }\n+\n+  // @} group threads\n }\n \n #endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "132a92459e3d17f36c784ec66eedb40447ae0816", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n-// <type_traits> -*- C++ -*-\n+// C++0x type_traits -*- C++ -*-\n \n-// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -62,6 +62,10 @@\n \n namespace std\n {\n+  /** @addtogroup metaprogramming\n+   * @{\n+   */\n+\n   // Primary classification traits.\n \n   /// is_lvalue_reference\n@@ -314,25 +318,26 @@ namespace std\n \n \n   // Define a nested type if some predicate holds.\n-  /// Primary template.\n+  // Primary template.\n+  /// enable_if\n   template<bool, typename _Tp = void>\n     struct enable_if \n     { };\n \n-  /// Partial specialization for true.\n+  // Partial specialization for true.\n   template<typename _Tp>\n     struct enable_if<true, _Tp>\n     { typedef _Tp type; };\n \n \n-  // A conditional expression, but for types. \n-  // If true, first, if false, second.\n-  /// Primary template.\n+  // A conditional expression, but for types. If true, first, if false, second.\n+  // Primary template.\n+  /// conditional\n   template<bool _Cond, typename _Iftrue, typename _Iffalse>\n     struct conditional\n     { typedef _Iftrue type; };\n \n-  /// Partial specialization for false.\n+  // Partial specialization for false.\n   template<typename _Iftrue, typename _Iffalse>\n     struct conditional<false, _Iftrue, _Iffalse>\n     { typedef _Iffalse type; };\n@@ -471,7 +476,8 @@ namespace std\n \n   // Given an integral/enum type, return the corresponding unsigned\n   // integer type.\n-  /// Primary template.\n+  // Primary template.\n+  /// make_unsigned\n   template<typename _Tp>\n     struct make_unsigned \n     { typedef typename __make_unsigned_selector<_Tp>::__type type; };\n@@ -549,7 +555,8 @@ namespace std\n \n   // Given an integral/enum type, return the corresponding signed\n   // integer type.\n-  /// Primary template.\n+  // Primary template.\n+  /// make_signed\n   template<typename _Tp>\n     struct make_signed \n     { typedef typename __make_signed_selector<_Tp>::__type type; };\n@@ -558,6 +565,7 @@ namespace std\n   template<>\n     struct make_signed<bool>;\n \n+  /// common_type\n   template<typename... _Tp>\n     struct common_type;\n \n@@ -592,6 +600,8 @@ namespace std\n       typedef typename\n         common_type<typename common_type<_Tp, _Up>::type, _Vp...>::type type;\n     };\n+\n+  // @} group metaprogramming\n }\n \n #endif  // __GXX_EXPERIMENTAL_CXX0X__"}, {"sha": "bfeae8e78096c9c2501db45e887c52db27d9fb6e", "filename": "libstdc++-v3/include/std/valarray", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,7 +1,7 @@\n // The template and inlines for the -*- C++ -*- valarray class.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007\n+// 2006, 2007, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -94,6 +94,14 @@ _GLIBCXX_END_NAMESPACE\n   \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n+  /**\n+   * @defgroup numeric_arrays Numeric Arrays\n+   * @ingroup numerics\n+   *\n+   * Classes and functions for representing and manipulating arrays of elements.\n+   * @{\n+   */\n+\n   /**\n    *  @brief  Smart array designed to support numeric processing.\n    *\n@@ -552,6 +560,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return _M_data[__i];\n     }\n \n+  // @} group numeric_arrays\n+\n _GLIBCXX_END_NAMESPACE\n \n #include <bits/valarray_after.h>\n@@ -563,6 +573,11 @@ _GLIBCXX_END_NAMESPACE\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n+  /**\n+   * @addtogroup numeric_arrays\n+   * @{\n+   */\n+\n   template<typename _Tp>\n     inline\n     valarray<_Tp>::valarray() : _M_size(0), _M_data(0) {}\n@@ -1069,6 +1084,8 @@ _DEFINE_BINARY_OPERATOR(>=, __greater_equal)\n \n #undef _DEFINE_BINARY_OPERATOR\n \n+  // @} group numeric_arrays\n+\n _GLIBCXX_END_NAMESPACE\n \n #endif /* _GLIBCXX_VALARRAY */"}, {"sha": "e4112c73a7879a891fadfcadb03b67529172d0c1", "filename": "libstdc++-v3/include/tr1_impl/array", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Farray?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -39,7 +39,6 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n   /**\n    *  @brief A standard container for storing a fixed size sequence of elements.\n    *\n-   *  @ingroup containers\n    *  @ingroup sequences\n    *\n    *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, a"}, {"sha": "6178165f9fd5af584215ed51c9fe5b16c9c8a131", "filename": "libstdc++-v3/include/tr1_impl/complex", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fcomplex?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // TR1 complex -*- C++ -*-\n \n-// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,6 +36,11 @@ namespace std\n {\n _GLIBCXX_BEGIN_NAMESPACE_TR1\n \n+  /**\n+   * @addtogroup complex_numbers\n+   * @{\n+   */\n+\n   // Forward declarations.\n   template<typename _Tp> std::complex<_Tp> acos(const std::complex<_Tp>&);\n   template<typename _Tp> std::complex<_Tp> asin(const std::complex<_Tp>&);\n@@ -51,9 +56,6 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n   template<typename _Tp> std::complex<_Tp> fabs(const std::complex<_Tp>&);\n #endif\n \n-  /// acos(__z) [8.1.2].\n-  //  Effects:  Behaves the same as C99 function cacos, defined\n-  //            in subclause 7.3.5.1.\n   template<typename _Tp>\n     inline std::complex<_Tp>\n     __complex_acos(const std::complex<_Tp>& __z)\n@@ -81,15 +83,15 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n     acos(const std::complex<_Tp>& __z)\n     { return __complex_acos(__z.__rep()); }\n #else\n+  /// acos(__z) [8.1.2].\n+  //  Effects:  Behaves the same as C99 function cacos, defined\n+  //            in subclause 7.3.5.1.\n   template<typename _Tp>\n     inline std::complex<_Tp>\n     acos(const std::complex<_Tp>& __z)\n     { return __complex_acos(__z); }\n #endif\n \n-  /// asin(__z) [8.1.3].\n-  //  Effects:  Behaves the same as C99 function casin, defined\n-  //            in subclause 7.3.5.2.\n   template<typename _Tp>\n     inline std::complex<_Tp>\n     __complex_asin(const std::complex<_Tp>& __z)\n@@ -117,15 +119,15 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n     asin(const std::complex<_Tp>& __z)\n     { return __complex_asin(__z.__rep()); }\n #else\n+  /// asin(__z) [8.1.3].\n+  //  Effects:  Behaves the same as C99 function casin, defined\n+  //            in subclause 7.3.5.2.\n   template<typename _Tp>\n     inline std::complex<_Tp>\n     asin(const std::complex<_Tp>& __z)\n     { return __complex_asin(__z); }\n #endif\n   \n-  /// atan(__z) [8.1.4].\n-  //  Effects:  Behaves the same as C99 function catan, defined\n-  //            in subclause 7.3.5.3.\n   template<typename _Tp>\n     std::complex<_Tp>\n     __complex_atan(const std::complex<_Tp>& __z)\n@@ -161,15 +163,15 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n     atan(const std::complex<_Tp>& __z)\n     { return __complex_atan(__z.__rep()); }\n #else\n+  /// atan(__z) [8.1.4].\n+  //  Effects:  Behaves the same as C99 function catan, defined\n+  //            in subclause 7.3.5.3.\n   template<typename _Tp>\n     inline std::complex<_Tp>\n     atan(const std::complex<_Tp>& __z)\n     { return __complex_atan(__z); }\n #endif\n \n-  /// acosh(__z) [8.1.5].\n-  //  Effects:  Behaves the same as C99 function cacosh, defined\n-  //            in subclause 7.3.6.1.\n   template<typename _Tp>\n     std::complex<_Tp>\n     __complex_acosh(const std::complex<_Tp>& __z)\n@@ -200,15 +202,15 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n     acosh(const std::complex<_Tp>& __z)\n     { return __complex_acosh(__z.__rep()); }\n #else\n+  /// acosh(__z) [8.1.5].\n+  //  Effects:  Behaves the same as C99 function cacosh, defined\n+  //            in subclause 7.3.6.1.\n   template<typename _Tp>\n     inline std::complex<_Tp>\n     acosh(const std::complex<_Tp>& __z)\n     { return __complex_acosh(__z); }\n #endif\n \n-  /// asinh(__z) [8.1.6].\n-  //  Effects:  Behaves the same as C99 function casin, defined\n-  //            in subclause 7.3.6.2.\n   template<typename _Tp>\n     std::complex<_Tp>\n     __complex_asinh(const std::complex<_Tp>& __z)\n@@ -239,15 +241,15 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n     asinh(const std::complex<_Tp>& __z)\n     { return __complex_asinh(__z.__rep()); }\n #else\n+  /// asinh(__z) [8.1.6].\n+  //  Effects:  Behaves the same as C99 function casin, defined\n+  //            in subclause 7.3.6.2.\n   template<typename _Tp>\n     inline std::complex<_Tp>\n     asinh(const std::complex<_Tp>& __z)\n     { return __complex_asinh(__z); }\n #endif\n \n-  /// atanh(__z) [8.1.7].\n-  //  Effects:  Behaves the same as C99 function catanh, defined\n-  //            in subclause 7.3.6.3.\n   template<typename _Tp>\n     std::complex<_Tp>\n     __complex_atanh(const std::complex<_Tp>& __z)\n@@ -283,21 +285,24 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n     atanh(const std::complex<_Tp>& __z)\n     { return __complex_atanh(__z.__rep()); }\n #else\n+  /// atanh(__z) [8.1.7].\n+  //  Effects:  Behaves the same as C99 function catanh, defined\n+  //            in subclause 7.3.6.3.\n   template<typename _Tp>\n     inline std::complex<_Tp>\n     atanh(const std::complex<_Tp>& __z)\n     { return __complex_atanh(__z); }\n #endif\n \n-  /// fabs(__z) [8.1.8].\n-  //  Effects:  Behaves the same as C99 function cabs, defined\n-  //            in subclause 7.3.8.1.\n   template<typename _Tp>\n #ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n     inline _Tp\n #else\n     inline std::complex<_Tp>\n #endif\n+    /// fabs(__z) [8.1.8].\n+    //  Effects:  Behaves the same as C99 function cabs, defined\n+    //            in subclause 7.3.8.1.\n     fabs(const std::complex<_Tp>& __z)\n     { return std::abs(__z); }\n \n@@ -364,5 +369,7 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \t\t      std::complex<__type>(__y));\n     }\n \n+  // @} group complex_numbers\n+\n _GLIBCXX_END_NAMESPACE_TR1\n }"}, {"sha": "7cf6ac98c343bced1665bc30705ebc4de91722c0", "filename": "libstdc++-v3/include/tr1_impl/functional", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ffunctional?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // TR1 functional header -*- C++ -*-\n \n-// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -827,9 +827,13 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n   /// The type of placeholder objects defined by libstdc++.\n   template<int _Num> struct _Placeholder { };\n \n-  // Define a large number of placeholders. There is no way to\n-  // simplify this with variadic templates, because we're introducing\n-  // unique names for each.\n+  /** @namespace std::placeholders\n+   *  @brief ISO C++ 0x entities sub namespace for functional.\n+   *\n+   *  Define a large number of placeholders. There is no way to\n+   *  simplify this with variadic templates, because we're introducing\n+   *  unique names for each.\n+   */\n   namespace placeholders \n   { \n     namespace "}, {"sha": "0126ee988a232bdf520719f6a8fa395d2deceb11", "filename": "libstdc++-v3/include/tr1_impl/regex", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fregex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fregex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fregex?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -40,11 +40,14 @@ namespace std\n _GLIBCXX_BEGIN_NAMESPACE_TR1\n \n /**\n- * @addtogroup tr1_regex Regular Expressions\n+ * @defgroup tr1_regex Regular Expressions\n  * A facility for performing regular expression pattern matching.\n  */\n  //@{\n \n+/** @namespace std::regex_constants\n+ *  @brief ISO C++ 0x entities sub namespace for regex.\n+ */\n namespace regex_constants\n {\n   /**\n@@ -387,9 +390,10 @@ namespace regex_constants\n \n   // [7.8] Class regex_error\n   /**\n-   * @brief A regular expression exception class.\n+   *  @brief A regular expression exception class.\n+   *  @ingroup exceptions\n    *\n-   * The regular expression library throws objects of this class on error.\n+   *  The regular expression library throws objects of this class on error.\n    */\n   class regex_error\n   : public std::runtime_error\n@@ -2703,7 +2707,7 @@ namespace regex_constants\n   typedef regex_token_iterator<wstring::const_iterator> wsregex_token_iterator;\n #endif\n   \n-  //@} // group tr1_regex\n+  //@} \n   \n _GLIBCXX_END_NAMESPACE_TR1\n }"}, {"sha": "cb0ad44a5ff82ef5553e22d390ca4dc5f4ca8116", "filename": "libstdc++-v3/include/tr1_impl/type_traits", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ftype_traits?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // TR1 type_traits -*- C++ -*-\n \n-// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,6 +36,14 @@ namespace std\n {\n _GLIBCXX_BEGIN_NAMESPACE_TR1\n \n+  /**\n+   * @defgroup metaprogramming Type Traits\n+   * @ingroup utilities\n+   *\n+   * Compile time type transformation and information.\n+   * @{\n+   */\n+\n   // For use in __is_convertible_simple.\n   struct __sfinae_types\n   {\n@@ -57,7 +65,9 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n     struct _Trait<_Type>                               \\\n     : public integral_constant<bool, _Value> { };\n \n-  /// helper classes [4.3].\n+  // helper classes [4.3].\n+\n+  /// integral_constant\n   template<typename _Tp, _Tp __v>\n     struct integral_constant\n     {\n@@ -75,6 +85,7 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n   template<typename _Tp, _Tp __v>\n     const _Tp integral_constant<_Tp, __v>::value;\n \n+  /// remove_cv\n   template<typename>\n     struct remove_cv;\n \n@@ -83,7 +94,9 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n     : public false_type { };\n   _DEFINE_SPEC(0, __is_void_helper, void, true)\n \n-  /// primary type categories [4.5.1].\n+  // primary type categories [4.5.1].\n+\n+  /// is_void\n   template<typename _Tp>\n     struct is_void\n     : public integral_constant<bool, (__is_void_helper<typename\n@@ -230,7 +243,9 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \t\t\t\t      remove_cv<_Tp>::type>::value)>\n     { };\n \n-  /// composite type traits [4.5.2].\n+  // composite type traits [4.5.2].\n+  \n+  /// is_arithmetic\n   template<typename _Tp>\n     struct is_arithmetic\n     : public integral_constant<bool, (is_integral<_Tp>::value\n@@ -278,12 +293,12 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \t\t\t\t|| is_member_function_pointer<_Tp>::value)>\n     { };\n \n-  /// type properties [4.5.3].\n+  // type properties [4.5.3].\n+  /// is_const\n   template<typename>\n     struct is_const\n     : public false_type { };\n \n-  /// is_const\n   template<typename _Tp>\n     struct is_const<_Tp const>\n     : public true_type { };\n@@ -358,7 +373,9 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \t\t\t\t\t\t       _Uint - 1>::value>\n     { };\n \n-  /// relationships between types [4.6].\n+  // relationships between types [4.6].\n+\n+  /// is_same\n   template<typename, typename>\n     struct is_same\n     : public false_type { };\n@@ -367,7 +384,9 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n     struct is_same<_Tp, _Tp>\n     : public true_type { };\n \n-  /// const-volatile modifications [4.7.1].\n+  // const-volatile modifications [4.7.1].\n+\n+  /// remove_const\n   template<typename _Tp>\n     struct remove_const\n     { typedef _Tp     type; };\n@@ -411,7 +430,9 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       add_const<typename add_volatile<_Tp>::type>::type     type;\n     };\n \n-  /// array modifications [4.7.3].\n+  // array modifications [4.7.3].\n+\n+  /// remove_extent\n   template<typename _Tp>\n     struct remove_extent\n     { typedef _Tp     type; };\n@@ -437,7 +458,8 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n     struct remove_all_extents<_Tp[]>\n     { typedef typename remove_all_extents<_Tp>::type     type; };\n \n-  /// pointer modifications [4.7.4].\n+  // pointer modifications [4.7.4].\n+\n   template<typename _Tp, typename>\n     struct __remove_pointer_helper\n     { typedef _Tp     type; };\n@@ -465,5 +487,6 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n #undef _DEFINE_SPEC_2_HELPER\n #undef _DEFINE_SPEC\n \n+  // @} group metaprogramming\n _GLIBCXX_END_NAMESPACE_TR1\n }"}, {"sha": "a917b4d57eedb405c7f9205916c5e11b9de0b7d3", "filename": "libstdc++-v3/include/tr1_impl/unordered_map", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Funordered_map?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -173,7 +173,6 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n    *  at most one of each key value) that associates values of another type\n    *  with the keys.\n    *\n-   *  @ingroup containers\n    *  @ingroup unordered_associative_containers\n    *\n    *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, and\n@@ -256,7 +255,6 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n    *  (possibly containing multiple of each key value) that associates\n    *  values of another type with the keys.\n    *\n-   *  @ingroup containers\n    *  @ingroup unordered_associative_containers\n    *\n    *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, and"}, {"sha": "742b88791c2ba65197bed7f0305cb32a3381d309", "filename": "libstdc++-v3/include/tr1_impl/unordered_set", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Funordered_set?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -169,7 +169,6 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n    *  at most one of each key value) in which the elements' keys are\n    *  the elements themselves.\n    *\n-   *  @ingroup containers\n    *  @ingroup unordered_associative_containers\n    *\n    *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, and\n@@ -249,7 +248,6 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n    *  (possibly containing multiple of each key value) in which the\n    *  elements' keys are the elements themselves.\n    *\n-   *  @ingroup containers\n    *  @ingroup unordered_associative_containers\n    *\n    *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, and"}, {"sha": "7d6df1b79cf8d48bbd4d799795da4a4ca92ff514", "filename": "libstdc++-v3/libsupc++/cxxabi-forced.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi-forced.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi-forced.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi-forced.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // cxxabi.h subset for inclusion by other library headers -*- C++ -*-\n   \n-// Copyright (C) 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2009 Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n //\n@@ -36,8 +36,13 @@\n #ifdef __cplusplus\n namespace __cxxabiv1\n {  \n-  // A magic placeholder class that can be caught by reference\n-  // to recognize forced unwinding.\n+  /** \n+   *  @brief Thrown as part of forced unwinding.\n+   *  @ingroup exceptions\n+   *\n+   *  A magic placeholder class that can be caught by reference to\n+   *  recognize forced unwinding.\n+   */\n   class __forced_unwind\n   {\n     virtual ~__forced_unwind() throw();"}, {"sha": "2775b0809b0f4b4e5e236c9279a166556b311c1f", "filename": "libstdc++-v3/libsupc++/cxxabi.h", "status": "modified", "additions": 63, "deletions": 3, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,7 @@\n // new abi support -*- C++ -*-\n   \n-// Copyright (C) 2000, 2002, 2003, 2004, 2006, 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2002, 2003, 2004, 2006, 2007, 2009\n+// Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n //\n@@ -148,7 +149,47 @@ namespace __cxxabiv1\n   int\n   __cxa_finalize(void*);\n \n-  // Demangling routines. \n+\n+  /**\n+   *  @brief Demangling routine. \n+   *  ABI-mandated entry point in the C++ runtime library for demangling.\n+   *\n+   *  @param __mangled_name A NUL-terminated character string\n+   *  containing the name to be demangled.\n+   *\n+   *  @param __output_buffer A region of memory, allocated with\n+   *  malloc, of @a *__length bytes, into which the demangled name is\n+   *  stored.  If @a __output_buffer is not long enough, it is\n+   *  expanded using realloc.  @a __output_buffer may instead be NULL;\n+   *  in that case, the demangled name is placed in a region of memory\n+   *  allocated with malloc.\n+   *\n+   *  @param __length If @a __length is non-NULL, the length of the\n+   *  buffer containing the demangled name is placed in @a *__length.\n+   *\n+   *  @param __status @a *__status is set to one of the following values:\n+   *   0: The demangling operation succeeded.\n+   *  -1: A memory allocation failiure occurred.\n+   *  -2: @a mangled_name is not a valid name under the C++ ABI mangling rules.\n+   *  -3: One of the arguments is invalid.\n+   *\n+   *  @return A pointer to the start of the NUL-terminated demangled\n+   *  name, or NULL if the demangling fails.  The caller is\n+   *  responsible for deallocating this memory using @c free.\n+   *\n+   *  The demangling is performed using the C++ ABI mangling rules,\n+   *  with GNU extensions. For example, this function is used in\n+   *  __gnu_cxx::__verbose_terminate_handler.\n+   * \n+   *  See http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt12ch39.html\n+   *  for other examples of use.\n+   *\n+   *  @note The same demangling functionality is available via\n+   *  libiberty (@c <libiberty/demangle.h> and @c libiberty.a) in GCC\n+   *  3.1 and later, but that requires explicit installation (@c\n+   *  --enable-install-libiberty) and uses a different API, although\n+   *  the ABI is unchanged.\n+   */\n   char*\n   __cxa_demangle(const char* __mangled_name, char* __output_buffer,\n \t\t size_t* __length, int* __status);\n@@ -543,7 +584,26 @@ namespace __cxxabiv1\n \n } // namespace __cxxabiv1\n \n-// User programs should use the alias `abi'. \n+/** @namespace abi\n+ *  @brief The cross-vendor C++ Application Binary Interface. A\n+ *  namespace alias to __cxxabiv1, but user programs should use the\n+ *  alias `abi'.\n+ *\n+ *  A brief overview of an ABI is given in the libstdc++ FAQ, question\n+ *  5.8 (you may have a copy of the FAQ locally, or you can view the online\n+ *  version at http://gcc.gnu.org/onlinedocs/libstdc++/faq/index.html#5_8).\n+ *\n+ *  GCC subscribes to a cross-vendor ABI for C++, sometimes\n+ *  called the IA64 ABI because it happens to be the native ABI for that\n+ *  platform.  It is summarized at http://www.codesourcery.com/cxx-abi/\n+ *  along with the current specification.\n+ *\n+ *  For users of GCC greater than or equal to 3.x, entry points are\n+ *  available in <cxxabi.h>, which notes, <em>\"It is not normally\n+ *  necessary for user programs to include this header, or use the\n+ *  entry points directly.  However, this header is available should\n+ *  that be needed.\"</em>\n+*/\n namespace abi = __cxxabiv1;\n \n #endif // __cplusplus"}, {"sha": "37c5f7b2ff118c69b9e5c8d7b98dfd5d87b18242", "filename": "libstdc++-v3/libsupc++/exception", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,7 +1,7 @@\n // Exception Handling support header for -*- C++ -*-\n \n // Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,\n-// 2004, 2005, 2006, 2007, 2008\n+// 2004, 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation\n //\n // This file is part of GCC.\n@@ -45,6 +45,14 @@ extern \"C++\" {\n \n namespace std \n {\n+  /**\n+   * @defgroup exceptions Exceptions\n+   * @ingroup diagnostics\n+   *\n+   * Classes and functions for reporting errors via exception classes.\n+   * @{\n+   */\n+\n   /**\n    *  @brief Base class for all library exceptions.\n    *\n@@ -111,21 +119,28 @@ namespace std\n    */\n   bool uncaught_exception() throw();\n \n+  // @} group exceptions\n } // namespace std\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n-  /** A replacement for the standard terminate_handler which prints more\n-      information about the terminating exception (if any) on stderr.  Call\n-      @code\n-        std::set_terminate (__gnu_cxx::__verbose_terminate_handler)\n-      @endcode\n-      to use.  For more info, see\n-      http://gcc.gnu.org/onlinedocs/libstdc++/19_diagnostics/howto.html#4\n-\n-      In 3.4 and later, this is on by default.\n-  */\n-  void __verbose_terminate_handler ();\n+  /** \n+   *  @brief A replacement for the standard terminate_handler which\n+   *  prints more information about the terminating exception (if any)\n+   *  on stderr.  \n+   *\n+   *  @ingroup exceptions\n+   *\n+   *  Call\n+   *   @code\n+   *     std::set_terminate(__gnu_cxx::__verbose_terminate_handler)\n+   *   @endcode\n+   *  to use.  For more info, see\n+   *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt02ch06s02.html\n+   *\n+   *  In 3.4 and later, this is on by default.\n+   */\n+  void __verbose_terminate_handler();\n \n _GLIBCXX_END_NAMESPACE\n   "}, {"sha": "2bee2008ec3dafb03dd472a9dd1b550342f1780d", "filename": "libstdc++-v3/libsupc++/exception_ptr.h", "status": "modified", "additions": 42, "deletions": 31, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -49,6 +49,11 @@ extern \"C++\" {\n \n namespace std \n {\n+  /**\n+   * @addtogroup exceptions\n+   * @{\n+   */\n+\n   // Hide the free operators from other types\n   namespace __exception_ptr\n   {\n@@ -70,16 +75,17 @@ namespace std\n   void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));\n \n   /// Obtain an %exception_ptr pointing to a copy of the supplied object.\n-  template <class _Ex>\n-  exception_ptr copy_exception(_Ex __ex) throw();\n-\n+  template<typename _Ex>\n+    exception_ptr \n+    copy_exception(_Ex __ex) throw();\n \n   namespace __exception_ptr\n   {\n-    bool operator==(const exception_ptr&,\n-                    const exception_ptr&) throw();\n-    bool operator!=(const exception_ptr&,\n-                    const exception_ptr&) throw();\n+    bool \n+    operator==(const exception_ptr&, const exception_ptr&) throw();\n+\n+    bool \n+    operator!=(const exception_ptr&, const exception_ptr&) throw();\n \n     class exception_ptr\n     {\n@@ -109,16 +115,16 @@ namespace std\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       exception_ptr(exception_ptr&& __o) throw()\n-        : _M_exception_object(__o._M_exception_object)\n-      {\n-        __o._M_exception_object = 0;\n-      }\n+      : _M_exception_object(__o._M_exception_object)\n+      { __o._M_exception_object = 0; }\n #endif\n \n-      exception_ptr& operator=(const exception_ptr&) throw();\n+      exception_ptr& \n+      operator=(const exception_ptr&) throw();\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      exception_ptr& operator=(exception_ptr&& __o) throw()\n+      exception_ptr& \n+      operator=(exception_ptr&& __o) throw()\n       {\n         exception_ptr(__o).swap(*this);\n         return *this;\n@@ -127,10 +133,12 @@ namespace std\n \n       ~exception_ptr() throw();\n \n-      void swap(exception_ptr&) throw();\n+      void \n+      swap(exception_ptr&) throw();\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      void swap(exception_ptr &&__o) throw()\n+      void \n+      swap(exception_ptr &&__o) throw()\n       {\n         void *__tmp = _M_exception_object;\n         _M_exception_object = __o._M_exception_object;\n@@ -141,28 +149,31 @@ namespace std\n       bool operator!() const throw();\n       operator __safe_bool() const throw();\n \n-      friend bool operator==(const exception_ptr&,\n-                             const exception_ptr&) throw();\n+      friend bool \n+      operator==(const exception_ptr&, const exception_ptr&) throw();\n \n-      const type_info *__cxa_exception_type() const throw();\n+      const type_info*\n+      __cxa_exception_type() const throw();\n     };\n \n   } // namespace __exception_ptr\n \n \n-  template <class _Ex>\n-  exception_ptr copy_exception(_Ex __ex) throw()\n-  {\n-    __try\n-      {\n-        throw __ex;\n-      }\n-    __catch(...)\n-      {\n-        return current_exception ();\n-      }\n-  }\n-\n+  template<typename _Ex>\n+    exception_ptr \n+    copy_exception(_Ex __ex) throw()\n+    {\n+      __try\n+\t{\n+\t  throw __ex;\n+\t}\n+      __catch(...)\n+\t{\n+\t  return current_exception ();\n+\t}\n+    }\n+\n+  // @} group exceptions\n } // namespace std\n \n } // extern \"C++\""}, {"sha": "739bd2af894eeb3ca6b51de9042cbe61e0ba436e", "filename": "libstdc++-v3/libsupc++/new", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,7 +1,7 @@\n // The -*- C++ -*- dynamic memory management header.\n \n // Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n-// 2003, 2004, 2005, 2006, 2007\n+// 2003, 2004, 2005, 2006, 2007, 2009\n // Free Software Foundation\n \n // This file is part of GCC.\n@@ -52,6 +52,7 @@ namespace std\n {\n   /**\n    *  @brief  Exception possibly thrown by @c new.\n+   *  @ingroup exceptions\n    *\n    *  @c bad_alloc (or classes derived from it) is used to report allocation\n    *  errors from the throwing forms of @c new.  */"}, {"sha": "a684be47d29a847769fcafe01b7967594aede918", "filename": "libstdc++-v3/libsupc++/typeinfo", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -160,6 +160,7 @@ namespace std\n \n   /**\n    *  @brief  Thrown during incorrect typecasting.\n+   *  @ingroup exceptions\n    *\n    *  If you attempt an invalid @c dynamic_cast expression, an instance of\n    *  this class (or something derived from this class) is thrown.  */\n@@ -176,7 +177,10 @@ namespace std\n     virtual const char* what() const throw();\n   };\n   \n-  /** If you use a NULL pointer in a @c typeid expression, this is thrown.  */\n+  /** \n+   *  @brief Thrown when a NULL pointer in a @c typeid expression is used.\n+   *  @ingroup exceptions\n+   */\n   class bad_typeid : public exception \n   {\n   public:"}, {"sha": "5c84f309509345470a614e96d56e33988af84598", "filename": "libstdc++-v3/testsuite/20_util/duration/cons/1_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2F1_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -2,7 +2,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // { dg-require-cstdint \"\" }\n \n-// Copyright (C) 2008 Free Software Foundation\n+// Copyright (C) 2008, 2009 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,6 +41,6 @@ test02()\n \n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 30 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 39 }\n-// { dg-error \"not exactly representable\" \"\" { target *-*-* } 218 }\n-// { dg-error \"integral duration with floating point\" \"\" { target *-*-* } 208 }\n+// { dg-error \"not exactly representable\" \"\" { target *-*-* } 232 }\n+// { dg-error \"integral duration with floating point\" \"\" { target *-*-* } 222 }\n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "d45795f988d4b942d007d65f893a22b3bbfaac5c", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -3,7 +3,7 @@\n // { dg-require-cstdint \"\" }\n // 2008-07-31 Chris Fairles <chris.fairles@gmail.com>\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -40,6 +40,6 @@ void test01()\n   test_type d;\n }\n \n-// { dg-error \"rep cannot be a duration\" \"\" { target *-*-* } 193 }\n+// { dg-error \"rep cannot be a duration\" \"\" { target *-*-* } 207 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 40 }\n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "c4bbd171c2dd30df4da5f3ac6c35dfcdf7d12371", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -3,7 +3,7 @@\n // { dg-require-cstdint \"\" }\n // 2008-07-31 Chris Fairles <chris.fairles@gmail.com>\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,6 +41,6 @@ void test01()\n   test_type d;\n }\n \n-// { dg-error \"must be a specialization of ratio\" \"\" { target *-*-* } 194 }\n+// { dg-error \"must be a specialization of ratio\" \"\" { target *-*-* } 208 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 41 }\n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "5bbe2840adf07850b69f18292faf671167c808fc", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -3,7 +3,7 @@\n // { dg-require-cstdint \"\" }\n // 2008-07-31 Chris Fairles <chris.fairles@gmail.com>\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -42,6 +42,6 @@ void test01()\n   test_type d;\n }\n \n-// { dg-error \"period must be positive\" \"\" { target *-*-* } 196 }\n+// { dg-error \"period must be positive\" \"\" { target *-*-* } 210 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 42 }\n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "adda5b4191fec2e455b1eb171aef2595fc083560", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -3,7 +3,7 @@\n \n // 2007-05-03  Benjamin Kosnik  <bkoz@redhat.com>\n //\n-// Copyright (C) 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -49,8 +49,8 @@ void test01()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 41 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 43 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 555 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 518 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 562 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 524 }\n \n // { dg-excess-errors \"At global scope\" }\n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "4aea138f4ea19b0c908f6121a2fa5199c1d65597", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -3,7 +3,7 @@\n \n // 2007-05-03  Benjamin Kosnik  <bkoz@redhat.com>\n //\n-// Copyright (C) 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -49,8 +49,8 @@ void test01()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 41 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 43 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 477 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 440 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 483 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 445 }\n \n // { dg-excess-errors \"At global scope\" }\n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "220eb8ff63a31a694c3da022ce5ef34e969aa613", "filename": "libstdc++-v3/testsuite/20_util/ratio/cons/cons_overflow.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -2,7 +2,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // { dg-require-cstdint \"\" }\n \n-// Copyright (C) 2008 Free Software Foundation\n+// Copyright (C) 2008, 2009 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -50,6 +50,6 @@ test04()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 35 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 41 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 47 }\n-// { dg-error \"denominator cannot be zero\" \"\" { target *-*-* } 150 }\n-// { dg-error \"out of range\" \"\" { target *-*-* } 151 }\n+// { dg-error \"denominator cannot be zero\" \"\" { target *-*-* } 158 }\n+// { dg-error \"out of range\" \"\" { target *-*-* } 159 }\n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "318a8df6b402f89fec0a7277ed3cac0c6ebba3aa", "filename": "libstdc++-v3/testsuite/20_util/ratio/operations/ops_overflow.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops_overflow.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops_overflow.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Foperations%2Fops_overflow.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -4,7 +4,7 @@\n \n // 2008-07-03 Chris Fairles <chris.fairles@gmail.com>\n \n-// Copyright (C) 2008 Free Software Foundation\n+// Copyright (C) 2008, 2009 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -40,9 +40,9 @@ test02()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 30 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 36 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 37 }\n-// { dg-error \"overflow in addition\" \"\" { target *-*-* } 127 }\n-// { dg-error \"overflow in multiplication\" \"\" { target *-*-* } 95 }\n-// { dg-error \"overflow in multiplication\" \"\" { target *-*-* } 97 }\n-// { dg-error \"overflow in multiplication\" \"\" { target *-*-* } 99 }\n+// { dg-error \"overflow in addition\" \"\" { target *-*-* } 135 }\n+// { dg-error \"overflow in multiplication\" \"\" { target *-*-* } 103 }\n+// { dg-error \"overflow in multiplication\" \"\" { target *-*-* } 105 }\n+// { dg-error \"overflow in multiplication\" \"\" { target *-*-* } 107 }\n // { dg-excess-errors \"In instantiation of\" }\n // { dg-excess-errors \"out of range\" }"}, {"sha": "272ed3a97ff50c3ad568cd22ea25f15440cdb196", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/assign/assign.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fassign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fassign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fassign.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -53,7 +53,7 @@ test03()\n // { dg-error \"used here\" \"\" { target *-*-* } 43 }\n // { dg-error \"no matching\" \"\" { target *-*-* } 49 }\n // { dg-error \"used here\" \"\" { target *-*-* } 50 }\n-// { dg-error \"candidates are\" \"\" { target *-*-* } 214 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 214 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 360 }\n+// { dg-error \"candidates are\" \"\" { target *-*-* } 219 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 219 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 365 }\n // { dg-excess-errors \"note\" }"}, {"sha": "1d6e9cf344cdf0c0c5605d616c740ee67ea86b6e", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/modifiers/reset_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2Freset_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2Freset_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2Freset_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -37,4 +37,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 36 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 350 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 355 }"}, {"sha": "df859c345bc82f1331b5b8f971c740ea924eec58", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2007, 2008 Free Software Foundation\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1504 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1503 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "c3f05523d7d24c17dac92153c1832d30abb5d7e9", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2007, 2008 Free Software Foundation\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1443 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1442 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "eac9f2f7e3b994924eb2dbc86d35ba3f51386a40", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2007, 2008 Free Software Foundation\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1443 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1442 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "211fc983c512d8154aec808fb518ea47e112dff7", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2007, 2008 Free Software Foundation\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1588 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1587 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "50f2e1c0d637aa1ff5e73899c45b59d8e2e8b2dc", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2007, 2008 Free Software Foundation\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1389 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1388 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "dbced18ccd66ebddab9748f2b7857092f5a48523", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2007, 2008 Free Software Foundation\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1358 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1357 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "03ce39b9cbad5bde03be332fbacc5514ec19d42a", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2007, 2008 Free Software Foundation\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1358 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1357 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "d2e9cdba6f39318bebcb8964165d1418bf3c0843", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // 2007-04-27  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2007, 2008 Free Software Foundation\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1358 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1357 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "90a12c15dae735c3ee4cce82ab934b29a83d0016", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1057 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1056 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "345c9c462add3e4ed17d4b83af36da5ed18f9f59", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 997 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 996 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "604d596de9837f14e17a24fd8da80d6edae74631", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 997 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 996 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "5fd1eebf176ff4ee776f1ef0b910b6d7760080ab", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1098 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1097 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "f609558b39e23dc0196c6dd538e71d864d78a677", "filename": "libstdc++-v3/testsuite/27_io/ios_base/cons/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008 Free Software\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009 Free Software\n // Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -43,5 +43,5 @@ void test01()\n }\n // { dg-error \"synthesized\" \"\" { target *-*-* } 42 } \n // { dg-error \"within this context\" \"\" { target *-*-* } 35 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 793 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 798 } \n // { dg-error \"operator=\" \"\" { target *-*-* } 0 } "}, {"sha": "6b539298627fa5a295101fcdd3a806726ba01835", "filename": "libstdc++-v3/testsuite/27_io/ios_base/cons/copy_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008 Free Software\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009 Free Software\n // Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -43,5 +43,5 @@ void test02()\n }\n // { dg-error \"within this context\" \"\" { target *-*-* } 36 } \n // { dg-error \"synthesized\" \"\" { target *-*-* } 42 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 790 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 795 } \n // { dg-error \"copy constructor\" \"\" { target *-*-* } 0 } "}, {"sha": "b42750a3b706d8e279bce1e3601ed868998ff0ee", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/cons/assign_neg.cc", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fassign_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // { dg-do compile }\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,19 +39,19 @@ int main()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 530 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 239 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 257 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 275 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 293 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 311 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 329 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 347 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 365 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 383 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 401 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 419 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 437 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 455 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 473 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 491 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 244 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 262 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 280 } \n+// { dg-error \"deleted function\" \"\" { target *-*-* } 298 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 316 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 334 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 352 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 370 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 388 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 406 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 424 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 442 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 460 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 478 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 496 }\n // { dg-excess-errors \"In member function\" }"}, {"sha": "5ded4b763dcf007e5a8ad44569834c64406b7a65", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/cons/copy_neg.cc", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // { dg-do compile }\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,19 +39,19 @@ int main()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 569 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 238 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 256 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 274 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 292 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 310 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 328 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 346 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 364 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 382 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 400 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 418 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 436 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 454 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 472 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 490 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 243 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 261 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 279 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 297 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 315 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 333 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 351 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 369 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 387 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 405 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 423 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 441 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 459 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 477 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 495 }\n // { dg-excess-errors \"In member function\" }"}, {"sha": "14b0211948961994bb7ab8e6fb68650a5c4f5715", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fassign_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -41,4 +41,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 40 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 64 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 72 }"}, {"sha": "63139ba47a279492839d3ddea2ff7257d2d973f1", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fcopy_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -40,4 +40,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 39 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 63 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 71 }"}, {"sha": "0a479548d8d249177991cc5096289b5308098596", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fassign_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -41,4 +41,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 40 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 172 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 180 }"}, {"sha": "f5f7c34f64077f6e4d9b1b4810ae33178f0ed689", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fcopy_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -40,4 +40,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 39 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 171 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 179 }"}, {"sha": "d9465ebbfa093b8dd04169aa100b5c490a9eaf0f", "filename": "libstdc++-v3/testsuite/30_threads/mutex/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fassign_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -42,4 +42,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 41 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 80 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 88 }"}, {"sha": "8a3b584eb3beb62cba649552a0062ced2b50c6a8", "filename": "libstdc++-v3/testsuite/30_threads/mutex/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fcopy_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -41,4 +41,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 40 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 79 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 87 }"}, {"sha": "ff00ed51d0de13e9cdff4eaa0db5f96be096c055", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fassign_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -42,4 +42,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 41 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 132 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 140 }"}, {"sha": "3cf78a9bbb4735948764bb42bc1400d878df91cb", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fcopy_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -41,4 +41,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 40 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 131 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 139 }"}, {"sha": "3e4c62859357baa41d7a213b518bee55aa3a82c5", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/cons/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fassign_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -3,7 +3,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -42,4 +42,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 41 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 295 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 303 }"}, {"sha": "070519944e993fe56bb312bb89c62039fc458581", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/cons/copy_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fcopy_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -3,7 +3,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,4 +41,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 40 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 294 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 302 }"}, {"sha": "15e5fe3a7a357fbbce7504d65a5c9835b0018a61", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fassign_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -33,4 +33,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 32 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 138 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 146 }"}, {"sha": "8fbaa281cb16067868306230dbc21f7d48cc338a", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fcopy_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -32,5 +32,5 @@ void test01()\n }\n \n // { dg-error \"here\" \"\" { target *-*-* } 31 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 119 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 127 }\n // { dg-excess-errors \"In file included from\" }"}, {"sha": "be2a8e831b78139e7a9ea0cf50ab46d5ea0f75a7", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fassign_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -42,4 +42,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 41 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 190 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 198 }"}, {"sha": "d669b932d6663338e8afff073e43bf0534f1fba4", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9daa7e60b0ccfd2bc99748b4362c6773bcc378/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fcopy_neg.cc?ref=5b9daa7e60b0ccfd2bc99748b4362c6773bcc378", "patch": "@@ -41,4 +41,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 40 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 189 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 197 }"}]}