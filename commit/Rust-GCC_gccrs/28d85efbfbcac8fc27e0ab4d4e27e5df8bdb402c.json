{"sha": "28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhkODVlZmJmYmNhYzhmYzI3ZTBhYjRkNGUyN2U1ZGY4YmRiNDAyYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-03-06T12:13:14Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-03-06T12:13:14Z"}, "message": "Add C++20 Traits for [Un]bounded Arrays (P1357R1)\n\n\t * include/std/type_traits [C++20] (is_bounded_array)\n\t (is_unbounded_array, is_bounded_array_v, is_unbounded_array_v):\n\t Define.\n\t * testsuite/20_util/is_bounded_array/requirements/\n\t explicit_instantiation.cc: New test.\n\t * testsuite/20_util/is_bounded_array/requirements/typedefs.cc: New\n\t test.\n\t * testsuite/20_util/is_bounded_array/value.cc: New test.\n\t * testsuite/20_util/is_unbounded_array/requirements/\n\t explicit_instantiation.cc: New test.\n\t * testsuite/20_util/is_unbounded_array/requirements/typedefs.cc: New\n\t * test.\n\t * testsuite/20_util/is_unbounded_array/value.cc: New test.\n\nFrom-SVN: r269420", "tree": {"sha": "8ffbe0abfa0c8404f1cf9defd61e0211ffedd719", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ffbe0abfa0c8404f1cf9defd61e0211ffedd719"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c24847a54abe6b93139f92318f254d1952315ba2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c24847a54abe6b93139f92318f254d1952315ba2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c24847a54abe6b93139f92318f254d1952315ba2"}], "stats": {"total": 293, "additions": 293, "deletions": 0}, "files": [{"sha": "989ba25229f1b7009e73df0ed74f828d67f8422b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c", "patch": "@@ -1,5 +1,19 @@\n 2019-03-06  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t * include/std/type_traits [C++20] (is_bounded_array)\n+\t (is_unbounded_array, is_bounded_array_v, is_unbounded_array_v):\n+\t Define.\n+\t * testsuite/20_util/is_bounded_array/requirements/\n+\t explicit_instantiation.cc: New test.\n+\t * testsuite/20_util/is_bounded_array/requirements/typedefs.cc: New\n+\t test.\n+\t * testsuite/20_util/is_bounded_array/value.cc: New test.\n+\t * testsuite/20_util/is_unbounded_array/requirements/\n+\t explicit_instantiation.cc: New test.\n+\t * testsuite/20_util/is_unbounded_array/requirements/typedefs.cc: New\n+\t * test.\n+\t * testsuite/20_util/is_unbounded_array/value.cc: New test.\n+\n \t* include/bits/ptr_traits.h [C++20] (pointer_traits<T*>::pointer_to):\n \tAdd constexpr.\n \t* testsuite/20_util/pointer_traits/pointer_to_constexpr.cc: New test."}, {"sha": "a1161d50399320bc66975f3d62d2c1fd28e1463f", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c", "patch": "@@ -3074,6 +3074,26 @@ template <typename _From, typename _To>\n   template<typename _Tp>\n     using unwrap_ref_decay_t = typename unwrap_ref_decay<_Tp>::type;\n \n+  /// True for a type that is an array of known bound.\n+  template<typename _Tp>\n+    struct is_bounded_array\n+    : public __is_array_known_bounds<_Tp>\n+    { };\n+\n+  /// True for a type that is an array of unknown bound.\n+  template<typename _Tp>\n+    struct is_unbounded_array\n+    : public __is_array_unknown_bounds<_Tp>\n+    { };\n+\n+  template<typename _Tp>\n+    inline constexpr bool is_bounded_array_v\n+      = is_bounded_array<_Tp>::value;\n+\n+  template<typename _Tp>\n+    inline constexpr bool is_unbounded_array_v\n+      = is_unbounded_array<_Tp>::value;\n+\n #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n \n #define __cpp_lib_is_constant_evaluated 201811L"}, {"sha": "d7417a9f26c06406ba1a74d37a207da85d99b63c", "filename": "libstdc++-v3/testsuite/20_util/is_bounded_array/requirements/explicit_instantiation.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_bounded_array%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_bounded_array%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_bounded_array%2Frequirements%2Fexplicit_instantiation.cc?ref=28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct is_bounded_array<test_type>;\n+}"}, {"sha": "abe430a655482a6e3509f60c29150d59700ed62d", "filename": "libstdc++-v3/testsuite/20_util/is_bounded_array/requirements/typedefs.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_bounded_array%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_bounded_array%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_bounded_array%2Frequirements%2Ftypedefs.cc?ref=28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_bounded_array<int>          test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "9f37d36e53216fa8fc89896a60c7256da43906d7", "filename": "libstdc++-v3/testsuite/20_util/is_bounded_array/value.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_bounded_array%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_bounded_array%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_bounded_array%2Fvalue.cc?ref=28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c", "patch": "@@ -0,0 +1,68 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  using std::is_bounded_array;\n+  using namespace __gnu_test;\n+\n+  static_assert(test_category<is_bounded_array, int[2]>(true), \"\");\n+  static_assert(test_category<is_bounded_array, int[]>(false), \"\");\n+  static_assert(test_category<is_bounded_array, int[2][3]>(true), \"\");\n+  static_assert(test_category<is_bounded_array, int[][3]>(false), \"\");\n+  static_assert(test_category<is_bounded_array, float*[2]>(true), \"\");\n+  static_assert(test_category<is_bounded_array, float*[]>(false), \"\");\n+  static_assert(test_category<is_bounded_array, float*[2][3]>(true), \"\");\n+  static_assert(test_category<is_bounded_array, float*[][3]>(false), \"\");\n+  static_assert(test_category<is_bounded_array, ClassType[2]>(true), \"\");\n+  static_assert(test_category<is_bounded_array, ClassType[]>(false), \"\");\n+  static_assert(test_category<is_bounded_array, ClassType[2][3]>(true), \"\");\n+  static_assert(test_category<is_bounded_array, ClassType[][3]>(false), \"\");\n+  static_assert(test_category<is_bounded_array, int(*)[2]>(false), \"\");\n+  static_assert(test_category<is_bounded_array, int(*)[]>(false), \"\");\n+  static_assert(test_category<is_bounded_array, int(&)[2]>(false), \"\");\n+  static_assert(test_category<is_bounded_array, int(&)[]>(false), \"\");\n+\n+  // Sanity check.\n+  static_assert(test_category<is_bounded_array, ClassType>(false), \"\");\n+  static_assert(test_category<is_bounded_array, void()>(false), \"\");\n+}\n+\n+template <class... T> void pos()\n+{\n+  static_assert((std::is_bounded_array_v<T> &&...));\n+}\n+\n+template <class... T> void neg()\n+{\n+  static_assert((!std::is_bounded_array_v<T> &&...));\n+}\n+\n+void test02()\n+{\n+  using namespace __gnu_test;\n+  pos<int[2], int[2][3], float*[2], float*[2][3], ClassType[2],\n+      ClassType[2][3]>();\n+  neg<int[], int[][3], float*[], float*[][3], ClassType[],\n+      ClassType[][3], int(*)[2], int(&)[], int(*)[2], int(&)[], ClassType>();\n+}"}, {"sha": "59cde808ffa5e6fd81019e2322855a550e86d5f6", "filename": "libstdc++-v3/testsuite/20_util/is_unbounded_array/requirements/explicit_instantiation.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_unbounded_array%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_unbounded_array%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_unbounded_array%2Frequirements%2Fexplicit_instantiation.cc?ref=28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct is_unbounded_array<test_type>;\n+}"}, {"sha": "abe430a655482a6e3509f60c29150d59700ed62d", "filename": "libstdc++-v3/testsuite/20_util/is_unbounded_array/requirements/typedefs.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_unbounded_array%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_unbounded_array%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_unbounded_array%2Frequirements%2Ftypedefs.cc?ref=28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_bounded_array<int>          test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "28a77b21da213205c520d5b618101ef82d9b1cc5", "filename": "libstdc++-v3/testsuite/20_util/is_unbounded_array/value.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_unbounded_array%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_unbounded_array%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_unbounded_array%2Fvalue.cc?ref=28d85efbfbcac8fc27e0ab4d4e27e5df8bdb402c", "patch": "@@ -0,0 +1,67 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  using std::is_unbounded_array;\n+  using namespace __gnu_test;\n+\n+  static_assert(test_category<is_unbounded_array, int[2]>(false), \"\");\n+  static_assert(test_category<is_unbounded_array, int[]>(true), \"\");\n+  static_assert(test_category<is_unbounded_array, int[2][3]>(false), \"\");\n+  static_assert(test_category<is_unbounded_array, int[][3]>(true), \"\");\n+  static_assert(test_category<is_unbounded_array, float*[2]>(false), \"\");\n+  static_assert(test_category<is_unbounded_array, float*[]>(true), \"\");\n+  static_assert(test_category<is_unbounded_array, float*[2][3]>(false), \"\");\n+  static_assert(test_category<is_unbounded_array, float*[][3]>(true), \"\");\n+  static_assert(test_category<is_unbounded_array, ClassType[2]>(false), \"\");\n+  static_assert(test_category<is_unbounded_array, ClassType[]>(true), \"\");\n+  static_assert(test_category<is_unbounded_array, ClassType[2][3]>(false), \"\");\n+  static_assert(test_category<is_unbounded_array, ClassType[][3]>(true), \"\");\n+  static_assert(test_category<is_unbounded_array, int(*)[2]>(false), \"\");\n+  static_assert(test_category<is_unbounded_array, int(*)[]>(false), \"\");\n+  static_assert(test_category<is_unbounded_array, int(&)[2]>(false), \"\");\n+  static_assert(test_category<is_unbounded_array, int(&)[]>(false), \"\");\n+\n+  // Sanity check.\n+  static_assert(test_category<is_unbounded_array, ClassType>(false), \"\");\n+}\n+\n+template <class... T> void pos()\n+{\n+  static_assert((std::is_unbounded_array_v<T> &&...));\n+}\n+\n+template <class... T> void neg()\n+{\n+  static_assert((!std::is_unbounded_array_v<T> &&...));\n+}\n+\n+void test02()\n+{\n+  using namespace __gnu_test;\n+  pos<int[], int[][3], float*[], float*[][3], ClassType[],\n+      ClassType[][3]>();\n+  neg<int[2], int[2][3], float*[2], float*[2][3], ClassType[2],\n+      ClassType[2][3], int(*)[2], int(&)[], int(*)[2], int(&)[], ClassType>();\n+}"}]}