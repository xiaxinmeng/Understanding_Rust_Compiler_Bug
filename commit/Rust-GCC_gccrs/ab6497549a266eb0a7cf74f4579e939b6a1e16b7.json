{"sha": "ab6497549a266eb0a7cf74f4579e939b6a1e16b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI2NDk3NTQ5YTI2NmViMGE3Y2Y3NGY0NTc5ZTkzOWI2YTFlMTZiNw==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-03-05T18:18:51Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-03-05T18:18:51Z"}, "message": "sh.h (TARGET_ATOMIC_TEST_AND_SET_TRUEVAL): New hook.\n\n\t* config/sh/sh.h (TARGET_ATOMIC_TEST_AND_SET_TRUEVAL): New hook.\n\t* config/sh/sync.md (atomic_test_and_set): New expander.\n\t(tasb, atomic_test_and_set_soft): New insns.\n\t* config/sh/sh.opt (menable-tas): New option.\n\t* doc/invoke.texi (SH Options): Document it.\n\nFrom-SVN: r184947", "tree": {"sha": "86d563457479f906f0118fb151eff841f655de40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86d563457479f906f0118fb151eff841f655de40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab6497549a266eb0a7cf74f4579e939b6a1e16b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab6497549a266eb0a7cf74f4579e939b6a1e16b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab6497549a266eb0a7cf74f4579e939b6a1e16b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab6497549a266eb0a7cf74f4579e939b6a1e16b7/comments", "author": null, "committer": null, "parents": [{"sha": "b50530246aafbdecdea7cb69648c45523f23a787", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b50530246aafbdecdea7cb69648c45523f23a787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b50530246aafbdecdea7cb69648c45523f23a787"}], "stats": {"total": 88, "additions": 87, "deletions": 1}, "files": [{"sha": "f101f7cf1e91da90a19e600d81dc756fcf263180", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6497549a266eb0a7cf74f4579e939b6a1e16b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6497549a266eb0a7cf74f4579e939b6a1e16b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab6497549a266eb0a7cf74f4579e939b6a1e16b7", "patch": "@@ -1,3 +1,11 @@\n+2012-03-05  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* config/sh/sh.h (TARGET_ATOMIC_TEST_AND_SET_TRUEVAL): New hook.\n+\t* config/sh/sync.md (atomic_test_and_set): New expander.\n+\t(tasb, atomic_test_and_set_soft): New insns.\n+\t* config/sh/sh.opt (menable-tas): New option.\n+\t* doc/invoke.texi (SH Options): Document it.\n+\n 2012-03-05  Richard Guenther  <rguenther@suse.de>\n \n \t* cfgloop.c (verify_loop_structure): Verify dominators before"}, {"sha": "7e729478a505f363af3d5f69b0b1f80d5c2849ce", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6497549a266eb0a7cf74f4579e939b6a1e16b7/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6497549a266eb0a7cf74f4579e939b6a1e16b7/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=ab6497549a266eb0a7cf74f4579e939b6a1e16b7", "patch": "@@ -2473,4 +2473,10 @@ extern int current_function_interrupt;\n /* FIXME: middle-end support for highpart optimizations is missing.  */\n #define high_life_started reload_in_progress\n \n+/* The tas.b instruction sets the 7th bit in the byte, i.e. 0x80.\n+   This value is used by optabs.c atomic op expansion code as well as in \n+   sync.md.  */\n+#undef TARGET_ATOMIC_TEST_AND_SET_TRUEVAL\n+#define TARGET_ATOMIC_TEST_AND_SET_TRUEVAL 0x80\n+\n #endif /* ! GCC_SH_H */"}, {"sha": "37b99904a0b2470a7e590a1938d6ad545e0473b1", "filename": "gcc/config/sh/sh.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6497549a266eb0a7cf74f4579e939b6a1e16b7/gcc%2Fconfig%2Fsh%2Fsh.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6497549a266eb0a7cf74f4579e939b6a1e16b7/gcc%2Fconfig%2Fsh%2Fsh.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.opt?ref=ab6497549a266eb0a7cf74f4579e939b6a1e16b7", "patch": "@@ -323,6 +323,10 @@ msoft-atomic\n Target Report Mask(SOFT_ATOMIC)\n Use software atomic sequences supported by kernel\n \n+menable-tas\n+Target Report RejectNegative Var(TARGET_ENABLE_TAS)\n+Use tas.b instruction for __atomic_test_and_set\n+\n mspace\n Target RejectNegative Alias(Os)\n Deprecated.  Use -Os instead"}, {"sha": "113288c7629530174e28ff6c2e3cdec954040759", "filename": "gcc/config/sh/sync.md", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6497549a266eb0a7cf74f4579e939b6a1e16b7/gcc%2Fconfig%2Fsh%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6497549a266eb0a7cf74f4579e939b6a1e16b7/gcc%2Fconfig%2Fsh%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsync.md?ref=ab6497549a266eb0a7cf74f4579e939b6a1e16b7", "patch": "@@ -404,3 +404,61 @@\n \t \"1:\tmov\tr1,r15\";\n }\n   [(set_attr \"length\" \"18\")])\n+\n+(define_expand \"atomic_test_and_set\"\n+  [(match_operand:SI 0 \"register_operand\" \"\")\t\t;; bool result output\n+   (match_operand:QI 1 \"memory_operand\" \"\")\t\t;; memory\n+   (match_operand:SI 2 \"const_int_operand\" \"\")]\t\t;; model\n+  \"(TARGET_SOFT_ATOMIC || TARGET_ENABLE_TAS) && !TARGET_SHMEDIA\"\n+{\n+  rtx addr = force_reg (Pmode, XEXP (operands[1], 0));\n+\n+  if (TARGET_ENABLE_TAS)\n+    emit_insn (gen_tasb (addr));\n+  else\n+    {\n+      rtx val = force_reg (QImode, \n+\t\t\t   gen_int_mode (TARGET_ATOMIC_TEST_AND_SET_TRUEVAL,\n+\t\t\t\t\t QImode));\n+      emit_insn (gen_atomic_test_and_set_soft (addr, val));\n+    }\n+\n+  /* The result of the test op is the inverse of what we are\n+     supposed to return.  Thus invert the T bit.  The inversion will be\n+     potentially optimized away and integrated into surrounding code.  */\n+  emit_insn (gen_movnegt (operands[0]));\n+  DONE;\n+})\n+\n+(define_insn \"tasb\"\n+  [(set (reg:SI T_REG)\n+\t(eq:SI (mem:QI (match_operand:SI 0 \"register_operand\" \"r\"))\n+\t       (const_int 0)))\n+   (set (mem:QI (match_dup 0))\n+\t(unspec:QI [(const_int 128)] UNSPEC_ATOMIC))]\n+  \"TARGET_ENABLE_TAS && !TARGET_SHMEDIA\"\n+  \"tas.b\t@%0\"\n+  [(set_attr \"insn_class\" \"co_group\")])\n+\n+(define_insn \"atomic_test_and_set_soft\"\n+  [(set (reg:SI T_REG)\n+\t(eq:SI (mem:QI (match_operand:SI 0 \"register_operand\" \"u\"))\n+\t       (const_int 0)))\n+   (set (mem:QI (match_dup 0))\n+\t(unspec:QI [(match_operand:QI 1 \"register_operand\" \"u\")] UNSPEC_ATOMIC))\n+   (clobber (match_scratch:QI 2 \"=&u\"))\n+   (clobber (reg:SI R0_REG))\n+   (clobber (reg:SI R1_REG))]\n+  \"TARGET_SOFT_ATOMIC && !TARGET_ENABLE_TAS && !TARGET_SHMEDIA\"\n+{\n+  return \"mova\t1f,r0\"\t\t\t\"\\n\"\n+\t \"\t.align 2\"\t\t\"\\n\"\n+\t \"\tmov\tr15,r1\"\t\t\"\\n\"\n+\t \"\tmov\t#(0f-1f),r15\"\t\"\\n\"\n+\t \"0:\tmov.b\t@%0,%2\"\t\t\"\\n\"\n+\t \"\tmov.b\t%1,@%0\"\t\t\"\\n\"\n+\t \"1:\tmov\tr1,r15\"\t\t\"\\n\"\n+\t \"\ttst\t%2,%2\";\n+}\n+  [(set_attr \"length\" \"16\")])\n+"}, {"sha": "8d6928426d3b65fab45272812a7c7f4f7640891e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6497549a266eb0a7cf74f4579e939b6a1e16b7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6497549a266eb0a7cf74f4579e939b6a1e16b7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ab6497549a266eb0a7cf74f4579e939b6a1e16b7", "patch": "@@ -887,7 +887,8 @@ See RS/6000 and PowerPC Options.\n -mdivsi3_libfunc=@var{name} -mfixed-range=@var{register-range} @gol\n -madjust-unroll -mindexed-addressing -mgettrcost=@var{number} -mpt-fixed @gol\n -maccumulate-outgoing-args -minvalid-symbols -msoft-atomic @gol\n--mbranch-cost=@var{num} -mcbranchdi -mcmpeqdi -mfused-madd -mpretend-cmove}\n+-mbranch-cost=@var{num} -mcbranchdi -mcmpeqdi -mfused-madd -mpretend-cmove @gol\n+-menable-tas}\n \n @emph{Solaris 2 Options}\n @gccoptlist{-mimpure-text  -mno-impure-text @gol\n@@ -17934,6 +17935,15 @@ single-core systems.  They will not perform correctly on multi-core systems.\n This option is enabled by default when the target is @code{sh-*-linux*}.\n For details on the atomic built-in functions see @ref{__atomic Builtins}.\n \n+@item -menable-tas\n+@opindex menable-tas\n+Generate the @code{tas.b} opcode for @code{__atomic_test_and_set}.\n+Notice that depending on the particular hardware and software configuration\n+this can degrade overall performance due to the operand cache line flushes\n+that are implied by the @code{tas.b} instruction.  On multi-core SH4A\n+processors the @code{tas.b} instruction must be used with caution since it\n+can result in data corruption for certain cache configurations.\n+\n @item -mspace\n @opindex mspace\n Optimize for space instead of speed.  Implied by @option{-Os}."}]}