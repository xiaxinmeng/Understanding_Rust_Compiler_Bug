{"sha": "7345c89ecb1a31ce96c6789bffc7183268a040b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM0NWM4OWVjYjFhMzFjZTk2YzY3ODliZmZjNzE4MzI2OGEwNDBiMw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-10-06T20:58:00Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-10-07T13:37:11Z"}, "message": "Add -fdiagnostics-path-format=separate-events to -fdiagnostics-plain-output\n\nThe path-printing default of -fdiagnostics-path-format=inline-events\ninteracted poorly with -fdiagnostics-plain-output, so it makes most\nsense to add -fdiagnostics-path-format=separate-events to\n-fdiagnostics-plain-output.\n\nSeen when adding an experimental analyzer plugin to gcc.dg/plugin.exp.\n\ngcc/ChangeLog:\n\t* doc/invoke.texi (-fdiagnostics-plain-output): Add\n\t-fdiagnostics-path-format=separate-events to list of\n\toptions injected by -fdiagnostics-plain-output.\n\t* opts-common.c (decode_cmdline_options_to_array): Likewise.\n\ngcc/testsuite/ChangeLog:\n\t* g++.dg/analyzer/analyzer.exp (DEFAULT_CXXFLAGS): Remove\n\t-fdiagnostics-path-format=separate-events.\n\t* gcc.dg/analyzer/analyzer.exp (DEFAULT_CFLAGS): Likewise.\n\t* gcc.dg/plugin/diagnostic-path-format-default.c: Rename to...\n\t* gcc.dg/plugin/diagnostic-path-format-plain.c: ...this.  Remove\n\tdg-options directive.  Copy remainder of test from\n\tdiagnostic-path-format-separate-events.c.\n\t* gcc.dg/plugin/diagnostic-test-paths-2.c: Add\n\t-fdiagnostics-path-format=inline-events to options.\n\tFix expected output for location of conditional within \"for\" loop.\n\t* gcc.dg/plugin/plugin.exp (plugin_test_list): Update for\n\trenaming.\n\t* gfortran.dg/analyzer/analyzer.exp (DEFAULT_FFLAGS): Remove\n\t-fdiagnostics-path-format=separate-events.", "tree": {"sha": "6c67bc927dfe4ce2b2dcc7ef73045744d6956e3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c67bc927dfe4ce2b2dcc7ef73045744d6956e3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7345c89ecb1a31ce96c6789bffc7183268a040b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7345c89ecb1a31ce96c6789bffc7183268a040b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7345c89ecb1a31ce96c6789bffc7183268a040b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7345c89ecb1a31ce96c6789bffc7183268a040b3/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e62aca0e0520e4ed2532f2d8153581190621c1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e62aca0e0520e4ed2532f2d8153581190621c1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e62aca0e0520e4ed2532f2d8153581190621c1a"}], "stats": {"total": 204, "additions": 53, "deletions": 151}, "files": [{"sha": "c177496907940b312b192187205f9150faf0611e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7345c89ecb1a31ce96c6789bffc7183268a040b3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7345c89ecb1a31ce96c6789bffc7183268a040b3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7345c89ecb1a31ce96c6789bffc7183268a040b3", "patch": "@@ -4345,7 +4345,8 @@ options:\n @gccoptlist{-fno-diagnostics-show-caret @gol\n -fno-diagnostics-show-line-numbers @gol\n -fdiagnostics-color=never @gol\n--fdiagnostics-urls=never}\n+-fdiagnostics-urls=never @gol\n+-fdiagnostics-path-format=separate-events}\n In the future, if GCC changes the default appearance of its diagnostics, the\n corresponding option to disable the new behavior will be added to this list.\n "}, {"sha": "8ec8c1ec1a8a1c14f998c057f36eac84a1734ec1", "filename": "gcc/opts-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7345c89ecb1a31ce96c6789bffc7183268a040b3/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7345c89ecb1a31ce96c6789bffc7183268a040b3/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=7345c89ecb1a31ce96c6789bffc7183268a040b3", "patch": "@@ -1000,6 +1000,7 @@ decode_cmdline_options_to_array (unsigned int argc, const char **argv,\n \t    \"-fno-diagnostics-show-line-numbers\",\n \t    \"-fdiagnostics-color=never\",\n \t    \"-fdiagnostics-urls=never\",\n+\t    \"-fdiagnostics-path-format=separate-events\",\n \t  };\n \t  const int num_expanded = ARRAY_SIZE (expanded_args);\n \t  opt_array_len += num_expanded - 1;"}, {"sha": "78edff2d11b536ddbd5f4e95dcc41db010953716", "filename": "gcc/testsuite/g++.dg/analyzer/analyzer.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7345c89ecb1a31ce96c6789bffc7183268a040b3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fanalyzer.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7345c89ecb1a31ce96c6789bffc7183268a040b3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fanalyzer.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fanalyzer.exp?ref=7345c89ecb1a31ce96c6789bffc7183268a040b3", "patch": "@@ -29,7 +29,7 @@ if [info exists DEFAULT_CXXFLAGS] then {\n }\n \n # If a testcase doesn't have special options, use these.\n-set DEFAULT_CXXFLAGS \" -fanalyzer -fdiagnostics-path-format=separate-events -Wanalyzer-too-complex -fanalyzer-call-summaries\"\n+set DEFAULT_CXXFLAGS \" -fanalyzer -Wanalyzer-too-complex -fanalyzer-call-summaries\"\n \n # Initialize `dg'.\n dg-init"}, {"sha": "d72fef37ede012a0476fac993f4285f6693132c1", "filename": "gcc/testsuite/gcc.dg/analyzer/analyzer.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7345c89ecb1a31ce96c6789bffc7183268a040b3/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fanalyzer.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7345c89ecb1a31ce96c6789bffc7183268a040b3/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fanalyzer.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fanalyzer.exp?ref=7345c89ecb1a31ce96c6789bffc7183268a040b3", "patch": "@@ -30,7 +30,7 @@ if [info exists DEFAULT_CFLAGS] then {\n }\n \n # If a testcase doesn't have special options, use these.\n-set DEFAULT_CFLAGS \"-fanalyzer -fdiagnostics-path-format=separate-events -Wanalyzer-too-complex -fanalyzer-call-summaries\"\n+set DEFAULT_CFLAGS \"-fanalyzer -Wanalyzer-too-complex -fanalyzer-call-summaries\"\n \n # Initialize `dg'.\n dg-init"}, {"sha": "5712dbd647250850bf6aa81d916b6370ed81961f", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-path-format-default.c", "status": "removed", "additions": 0, "deletions": 142, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e62aca0e0520e4ed2532f2d8153581190621c1a/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-path-format-default.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e62aca0e0520e4ed2532f2d8153581190621c1a/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-path-format-default.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-path-format-default.c?ref=4e62aca0e0520e4ed2532f2d8153581190621c1a", "patch": "@@ -1,142 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-fdiagnostics-show-caret\" } */\n-\n-#include <stdlib.h>\n-\n-void *wrapped_malloc (size_t size)\n-{\n-  return malloc (size);\n-}\n-\n-void wrapped_free (void *ptr)\n-{\n-  free (ptr); /* { dg-warning \"double-free of 'ptr' \\\\\\[CWE-415\\\\]\" } */\n-  /* { dg-begin-multiline-output \"\" }\n-   free (ptr);\n-   ^~~~~~~~~~\n-  'test': events 1-2\n-    |\n-    | {\n-    | ^\n-    | |\n-    | (1) entering 'test'\n-    |   boxed_int *obj = make_boxed_int (i);\n-    |                    ~~~~~~~~~~~~~~~~~~\n-    |                    |\n-    |                    (2) calling 'make_boxed_int'\n-    |\n-    +--> 'make_boxed_int': events 3-4\n-           |\n-           | {\n-           | ^\n-           | |\n-           | (3) entering 'make_boxed_int'\n-           |   boxed_int *result = (boxed_int *)wrapped_malloc (sizeof (boxed_int));\n-           |                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-           |                                    |\n-           |                                    (4) calling 'wrapped_malloc'\n-           |\n-           +--> 'wrapped_malloc': events 5-6\n-                  |\n-                  | {\n-                  | ^\n-                  | |\n-                  | (5) entering 'wrapped_malloc'\n-                  |   return malloc (size);\n-                  |          ~~~~~~~~~~~~~\n-                  |          |\n-                  |          (6) calling 'malloc'\n-                  |\n-    <-------------+\n-    |\n-  'test': event 7\n-    |\n-    |   free_boxed_int (obj);\n-    |   ^~~~~~~~~~~~~~~~~~~~\n-    |   |\n-    |   (7) calling 'free_boxed_int'\n-    |\n-    +--> 'free_boxed_int': events 8-9\n-           |\n-           | {\n-           | ^\n-           | |\n-           | (8) entering 'free_boxed_int'\n-           |   wrapped_free (bi);\n-           |   ~~~~~~~~~~~~~~~~~\n-           |   |\n-           |   (9) calling 'wrapped_free'\n-           |\n-           +--> 'wrapped_free': events 10-11\n-                  |\n-                  | {\n-                  | ^\n-                  | |\n-                  | (10) entering 'wrapped_free'\n-                  |   free (ptr);\n-                  |   ~~~~~~~~~~\n-                  |   |\n-                  |   (11) calling 'free'\n-                  |\n-    <-------------+\n-    |\n-  'test': event 12\n-    |\n-    |   free_boxed_int (obj);\n-    |   ^~~~~~~~~~~~~~~~~~~~\n-    |   |\n-    |   (12) calling 'free_boxed_int'\n-    |\n-    +--> 'free_boxed_int': events 13-14\n-           |\n-           | {\n-           | ^\n-           | |\n-           | (13) entering 'free_boxed_int'\n-           |   wrapped_free (bi);\n-           |   ~~~~~~~~~~~~~~~~~\n-           |   |\n-           |   (14) calling 'wrapped_free'\n-           |\n-           +--> 'wrapped_free': events 15-16\n-                  |\n-                  | {\n-                  | ^\n-                  | |\n-                  | (15) entering 'wrapped_free'\n-                  |   free (ptr);\n-                  |   ~~~~~~~~~~\n-                  |   |\n-                  |   (16) calling 'free'\n-                  |\n-     { dg-end-multiline-output \"\" } */\n-}\n-\n-typedef struct boxed_int\n-{\n-  int i;\n-} boxed_int;\n-\n-boxed_int *\n-make_boxed_int (int i)\n-{\n-  boxed_int *result = (boxed_int *)wrapped_malloc (sizeof (boxed_int));\n-  result->i = i;\n-  return result;\n-}\n-\n-void\n-free_boxed_int (boxed_int *bi)\n-{\n-  wrapped_free (bi);\n-}\n-\n-void test (int i)\n-{\n-  boxed_int *obj = make_boxed_int (i);\n-\n-  free_boxed_int (obj);\n-\n-  free_boxed_int (obj);\n-}\n-"}, {"sha": "75acd258c3b79f6c8e5defedb39a51dca0fac76d", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-path-format-plain.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7345c89ecb1a31ce96c6789bffc7183268a040b3/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-path-format-plain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7345c89ecb1a31ce96c6789bffc7183268a040b3/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-path-format-plain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-path-format-plain.c?ref=7345c89ecb1a31ce96c6789bffc7183268a040b3", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+\n+#include <stdlib.h>\n+\n+void *wrapped_malloc (size_t size)\n+{\n+  return malloc (size);\n+}\n+\n+void wrapped_free (void *ptr)\n+{\n+  free (ptr); /* { dg-warning \"double-free of 'ptr' \\\\\\[CWE-415\\\\]\" } */\n+}\n+\n+typedef struct boxed_int\n+{\n+  int i;\n+} boxed_int;\n+\n+boxed_int *\n+make_boxed_int (int i)\n+{\n+  boxed_int *result = (boxed_int *)wrapped_malloc (sizeof (boxed_int));\n+  result->i = i;\n+  return result;\n+}\n+\n+void\n+free_boxed_int (boxed_int *bi)\n+{\n+  wrapped_free (bi);\n+}\n+\n+void test (int i)\n+{ /* { dg-message \"\\\\(1\\\\) entering 'test'\" } */\n+  boxed_int *obj = make_boxed_int (i); /* { dg-message \"\\\\(2\\\\) calling 'make_boxed_int'\" } */\n+  /* etc */\n+\n+  free_boxed_int (obj);\n+\n+  free_boxed_int (obj);\n+}"}, {"sha": "b2b269a12b51276ae7a90520d8d2e872c70cbb18", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-paths-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7345c89ecb1a31ce96c6789bffc7183268a040b3/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-paths-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7345c89ecb1a31ce96c6789bffc7183268a040b3/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-paths-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-paths-2.c?ref=7345c89ecb1a31ce96c6789bffc7183268a040b3", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fdiagnostics-show-caret -fdiagnostics-show-line-numbers\" } */\n+/* { dg-options \"-fdiagnostics-show-caret -fdiagnostics-show-line-numbers -fdiagnostics-path-format=inline-events\" } */\n \n #include <stddef.h>\n #include <stdlib.h>\n@@ -43,9 +43,9 @@ make_a_list_of_random_ints_badly(PyObject *self,\n     |      |          (1) when 'PyList_New' fails, returning NULL\n     |   26 | \n     |   27 |   for (i = 0; i < count; i++) {\n-    |      |   ~~~     \n-    |      |   |\n-    |      |   (2) when 'i < count'\n+    |      |               ~~~~~~~~~\n+    |      |                 |\n+    |      |                 (2) when 'i < count'\n     |   28 |     item = PyLong_FromLong(random());\n     |   29 |     PyList_Append(list, item);\n     |      |     ~~~~~~~~~~~~~~~~~~~~~~~~~"}, {"sha": "5dd102ae05c535c8b2e2396d50a579e25e961a02", "filename": "gcc/testsuite/gcc.dg/plugin/plugin.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7345c89ecb1a31ce96c6789bffc7183268a040b3/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7345c89ecb1a31ce96c6789bffc7183268a040b3/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp?ref=7345c89ecb1a31ce96c6789bffc7183268a040b3", "patch": "@@ -100,7 +100,7 @@ set plugin_test_list [list \\\n \t  diagnostic-test-paths-2.c \\\n \t  diagnostic-test-paths-3.c \\\n \t  diagnostic-test-paths-4.c \\\n-\t  diagnostic-path-format-default.c \\\n+\t  diagnostic-path-format-plain.c \\\n \t  diagnostic-path-format-none.c \\\n \t  diagnostic-path-format-separate-events.c \\\n \t  diagnostic-path-format-inline-events-1.c \\"}, {"sha": "462395c935cbc6a866b075f534f94a5ff14846d9", "filename": "gcc/testsuite/gfortran.dg/analyzer/analyzer.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7345c89ecb1a31ce96c6789bffc7183268a040b3/gcc%2Ftestsuite%2Fgfortran.dg%2Fanalyzer%2Fanalyzer.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7345c89ecb1a31ce96c6789bffc7183268a040b3/gcc%2Ftestsuite%2Fgfortran.dg%2Fanalyzer%2Fanalyzer.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fanalyzer%2Fanalyzer.exp?ref=7345c89ecb1a31ce96c6789bffc7183268a040b3", "patch": "@@ -33,7 +33,7 @@ if [info exists DEFAULT_FFLAGS] then {\n }\n \n # If a testcase doesn't have special options, use these.\n-set DEFAULT_FFLAGS \"-fanalyzer -fdiagnostics-path-format=separate-events -Wanalyzer-too-complex -fanalyzer-call-summaries\"\n+set DEFAULT_FFLAGS \"-fanalyzer -Wanalyzer-too-complex -fanalyzer-call-summaries\"\n \n # Initialize `dg'.\n dg-init"}]}