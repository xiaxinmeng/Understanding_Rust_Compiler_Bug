{"sha": "01c102a6de3533060d0fdae935b70966182c3292", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFjMTAyYTZkZTM1MzMwNjBkMGZkYWU5MzViNzA5NjYxODJjMzI5Mg==", "commit": {"author": {"name": "Alexander Fomin", "email": "alexander.fomin@intel.com", "date": "2015-09-22T11:14:25Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2015-09-22T11:14:25Z"}, "message": "re PR target/67480 (AVX512 bitwise logic operations pattern is incorrect)\n\nPR target/67480\n\ngcc/\n\t* config/i386/sse.md (define_mode_iterator VI48_AVX_AVX512F): New.\n\t(define_mode_iterator VI12_AVX_AVX512F): New.\n\t(define_insn \"<mask_codefor><code><mode>3<mask_name>\"): Change\n\tall iterators to VI48_AVX_AVX512F. Extract remaining modes ...\n\t(define_insn \"*<code><mode>3\"): ... Into new pattern using\n\tVI12_AVX_AVX512F iterators without masking.\n\ngcc/testsuite/\n\t* gcc.target/i386/pr67480.c: New test.\n\nFrom-SVN: r228010", "tree": {"sha": "47c114a35d4628c8258d59e6f74990b34c134d60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47c114a35d4628c8258d59e6f74990b34c134d60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01c102a6de3533060d0fdae935b70966182c3292", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01c102a6de3533060d0fdae935b70966182c3292", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01c102a6de3533060d0fdae935b70966182c3292", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01c102a6de3533060d0fdae935b70966182c3292/comments", "author": null, "committer": null, "parents": [{"sha": "06caf59d7ff9f9f97718a96cb23da50e5ba5edd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06caf59d7ff9f9f97718a96cb23da50e5ba5edd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06caf59d7ff9f9f97718a96cb23da50e5ba5edd8"}], "stats": {"total": 154, "additions": 142, "deletions": 12}, "files": [{"sha": "3de9aef06351a37b90deb0237aaf60b9b01fbc2c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c102a6de3533060d0fdae935b70966182c3292/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c102a6de3533060d0fdae935b70966182c3292/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01c102a6de3533060d0fdae935b70966182c3292", "patch": "@@ -1,3 +1,13 @@\n+2015-09-22  Alexander Fomin <alexander.fomin@intel.com>\n+\n+\tPR target/67480\n+\t* config/i386/sse.md (define_mode_iterator VI48_AVX_AVX512F): New.\n+\t(define_mode_iterator VI12_AVX_AVX512F): New.\n+\t(define_insn \"<mask_codefor><code><mode>3<mask_name>\"): Change\n+\tall iterators to VI48_AVX_AVX512F. Extract remaining modes ...\n+\t(define_insn \"*<code><mode>3\"): ... Into new pattern using\n+\tVI12_AVX_AVX512F iterators without masking.\n+\n 2015-09-22  Kirill Yukhin <kirill.yukhin@intel.com>\n \n \t* config.gcc: Support \"skylake-avx512\"."}, {"sha": "0a57db001c85eba0e60f074de00969817077de77", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 117, "deletions": 12, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c102a6de3533060d0fdae935b70966182c3292/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c102a6de3533060d0fdae935b70966182c3292/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=01c102a6de3533060d0fdae935b70966182c3292", "patch": "@@ -416,6 +416,14 @@\n   [(V16SI \"TARGET_AVX512F\") V8SI V4SI\n    (V8DI \"TARGET_AVX512F\") V4DI V2DI])\n \n+(define_mode_iterator VI48_AVX_AVX512F\n+  [(V16SI \"TARGET_AVX512F\") (V8SI \"TARGET_AVX\") V4SI\n+   (V8DI \"TARGET_AVX512F\") (V4DI \"TARGET_AVX\") V2DI])\n+\n+(define_mode_iterator VI12_AVX_AVX512F\n+  [ (V64QI \"TARGET_AVX512F\") (V32QI \"TARGET_AVX\") V16QI\n+    (V32HI \"TARGET_AVX512F\") (V16HI \"TARGET_AVX\") V8HI])\n+\n (define_mode_iterator V48_AVX2\n   [V4SF V2DF\n    V8SF V4DF\n@@ -11077,10 +11085,10 @@\n })\n \n (define_insn \"<mask_codefor><code><mode>3<mask_name>\"\n-  [(set (match_operand:VI 0 \"register_operand\" \"=x,v\")\n-\t(any_logic:VI\n-\t  (match_operand:VI 1 \"nonimmediate_operand\" \"%0,v\")\n-\t  (match_operand:VI 2 \"nonimmediate_operand\" \"xm,vm\")))]\n+  [(set (match_operand:VI48_AVX_AVX512F 0 \"register_operand\" \"=x,v\")\n+\t(any_logic:VI48_AVX_AVX512F\n+\t  (match_operand:VI48_AVX_AVX512F 1 \"nonimmediate_operand\" \"%0,v\")\n+\t  (match_operand:VI48_AVX_AVX512F 2 \"nonimmediate_operand\" \"xm,vm\")))]\n   \"TARGET_SSE && <mask_mode512bit_condition>\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n {\n@@ -11109,24 +11117,120 @@\n         case V4DImode:\n         case V4SImode:\n         case V2DImode:\n-          if (TARGET_AVX512VL)\n+          tmp = TARGET_AVX512VL ? \"p<logic><ssemodesuffix>\" : \"p<logic>\";\n+          break;\n+        default:\n+          gcc_unreachable ();\n+      }\n+      break;\n+\n+   case MODE_V8SF:\n+      gcc_assert (TARGET_AVX);\n+   case MODE_V4SF:\n+      gcc_assert (TARGET_SSE);\n+      gcc_assert (!<mask_applied>);\n+      tmp = \"<logic>ps\";\n+      break;\n+\n+   default:\n+      gcc_unreachable ();\n+   }\n+\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      if (<mask_applied>)\n+        ops = \"v%s\\t{%%2, %%0, %%0<mask_operand3_1>|%%0<mask_operand3_1>, %%0, %%2}\";\n+      else\n+        ops = \"%s\\t{%%2, %%0|%%0, %%2}\";\n+      break;\n+    case 1:\n+      ops = \"v%s\\t{%%2, %%1, %%0<mask_operand3_1>|%%0<mask_operand3_1>, %%1, %%2}\";\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  snprintf (buf, sizeof (buf), ops, tmp);\n+  return buf;\n+}\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sselog\")\n+   (set (attr \"prefix_data16\")\n+     (if_then_else\n+       (and (eq_attr \"alternative\" \"0\")\n+\t    (eq_attr \"mode\" \"TI\"))\n+       (const_string \"1\")\n+       (const_string \"*\")))\n+   (set_attr \"prefix\" \"<mask_prefix3>\")\n+   (set (attr \"mode\")\n+\t(cond [(and (match_test \"<MODE_SIZE> == 16\")\n+\t\t    (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))\n+\t\t (const_string \"<ssePSmode>\")\n+\t       (match_test \"TARGET_AVX2\")\n+\t\t (const_string \"<sseinsnmode>\")\n+\t       (match_test \"TARGET_AVX\")\n+\t\t (if_then_else\n+\t\t   (match_test \"<MODE_SIZE> > 16\")\n+\t\t   (const_string \"V8SF\")\n+\t\t   (const_string \"<sseinsnmode>\"))\n+\t       (ior (not (match_test \"TARGET_SSE2\"))\n+\t\t    (match_test \"optimize_function_for_size_p (cfun)\"))\n+\t\t (const_string \"V4SF\")\n+\t      ]\n+\t      (const_string \"<sseinsnmode>\")))])\n+\n+(define_insn \"*<code><mode>3\"\n+  [(set (match_operand:VI12_AVX_AVX512F 0 \"register_operand\" \"=x,v\")\n+\t(any_logic: VI12_AVX_AVX512F\n+\t  (match_operand:VI12_AVX_AVX512F 1 \"nonimmediate_operand\" \"%0,v\")\n+\t  (match_operand:VI12_AVX_AVX512F 2 \"nonimmediate_operand\" \"xm,vm\")))]\n+  \"TARGET_SSE && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+{\n+  static char buf[64];\n+  const char *ops;\n+  const char *tmp;\n+  const char *ssesuffix;\n+\n+  switch (get_attr_mode (insn))\n+    {\n+    case MODE_XI:\n+      gcc_assert (TARGET_AVX512F);\n+    case MODE_OI:\n+      gcc_assert (TARGET_AVX2 || TARGET_AVX512VL);\n+    case MODE_TI:\n+      gcc_assert (TARGET_SSE2 || TARGET_AVX512VL);\n+      switch (<MODE>mode)\n+        {\n+        case V64QImode:\n+        case V32HImode:\n+          if (TARGET_AVX512F)\n           {\n-            tmp = \"p<logic><ssemodesuffix>\";\n+            tmp = \"p<logic>\";\n+            ssesuffix = \"q\";\n+            break;\n+          }\n+        case V32QImode:\n+        case V16HImode:\n+        case V16QImode:\n+        case V8HImode:\n+          if (TARGET_AVX512VL || TARGET_AVX2 || TARGET_SSE2)\n+          {\n+            tmp = \"p<logic>\";\n+            ssesuffix = TARGET_AVX512VL ? \"q\" : \"\";\n             break;\n           }\n         default:\n-          tmp = TARGET_AVX512VL ? \"p<logic>q\" : \"p<logic>\";\n+          gcc_unreachable ();\n       }\n       break;\n \n-   case MODE_V16SF:\n-      gcc_assert (TARGET_AVX512F);\n    case MODE_V8SF:\n       gcc_assert (TARGET_AVX);\n    case MODE_V4SF:\n       gcc_assert (TARGET_SSE);\n-\n       tmp = \"<logic>ps\";\n+      ssesuffix = \"\";\n       break;\n \n    default:\n@@ -11137,15 +11241,16 @@\n     {\n     case 0:\n       ops = \"%s\\t{%%2, %%0|%%0, %%2}\";\n+      snprintf (buf, sizeof (buf), ops, tmp);\n       break;\n     case 1:\n-      ops = \"v%s\\t{%%2, %%1, %%0<mask_operand3_1>|%%0<mask_operand3_1>, %%1, %%2}\";\n+      ops = \"v%s%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n+      snprintf (buf, sizeof (buf), ops, tmp, ssesuffix);\n       break;\n     default:\n       gcc_unreachable ();\n     }\n \n-  snprintf (buf, sizeof (buf), ops, tmp);\n   return buf;\n }\n   [(set_attr \"isa\" \"noavx,avx\")"}, {"sha": "9c9bc5a44e4afb6644eefe8b9b973271d66fdd45", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c102a6de3533060d0fdae935b70966182c3292/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c102a6de3533060d0fdae935b70966182c3292/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=01c102a6de3533060d0fdae935b70966182c3292", "patch": "@@ -1,3 +1,8 @@\n+2015-09-22  Alexander Fomin <alexander.fomin@intel.com>\n+\n+\tPR target/67480\n+\t* gcc.target/i386/pr67480.c: New test.\n+\n 2015-09-22  Kirill Yukhin <kirill.yukhin@intel.com>\n \n         * gcc.target/i386/funcspec-5.c: Test avx512vl, avx512bw,"}, {"sha": "90e6a6e4b8ddb6c0f666851845b86f9cf1c1ab08", "filename": "gcc/testsuite/gcc.target/i386/pr67480.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c102a6de3533060d0fdae935b70966182c3292/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67480.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c102a6de3533060d0fdae935b70966182c3292/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67480.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67480.c?ref=01c102a6de3533060d0fdae935b70966182c3292", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2 -ftree-vectorize\" { target i?86-*-* x86_64-*-* } } */\n+\n+void\n+foo(const char *in, char *out, unsigned n)\n+{\n+  unsigned i;\n+  for (i = 0; i < n; i++)\n+    out[i] &= in[i];\n+}"}]}