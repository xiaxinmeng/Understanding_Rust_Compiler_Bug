{"sha": "f421e442c6fce95cd6e27f845e18cb70ad5208f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQyMWU0NDJjNmZjZTk1Y2Q2ZTI3Zjg0NWUxOGNiNzBhZDUyMDhmNA==", "commit": {"author": {"name": "Tulio Magno Quites Machado Filho", "email": "tuliom@linux.vnet.ibm.com", "date": "2018-05-01T22:47:33Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-05-01T22:47:33Z"}, "message": "PR libstdc++/84654 Disable __float128 specializations for -mno-float128\n\n2018-05-01  Tulio Magno Quites Machado Filho  <tuliom@linux.vnet.ibm.com>\n\n\tPR libstdc++/84654\n\t* acinclude.m4: Set ENABLE_FLOAT128 instead of _GLIBCXX_USE_FLOAT128.\n\t* config.h.in: Remove references to _GLIBCXX_USE_FLOAT128.\n\t* configure: Regenerate.\n\t* include/Makefile.am: Replace the value of _GLIBCXX_USE_FLOAT128\n\tbased on ENABLE_FLOAT128.\n\t* include/Makefile.in: Regenerate.\n\t* include/bits/c++config: Define _GLIBCXX_USE_FLOAT128.\n\t[!defined(__FLOAT128__) && !defined(__SIZEOF_FLOAT128__)]: Undefine\n\t_GLIBCXX_USE_FLOAT128.\n\nFrom-SVN: r259813", "tree": {"sha": "775a0427b91b1e3b8eb4a0b0367a3a28bca7228b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/775a0427b91b1e3b8eb4a0b0367a3a28bca7228b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f421e442c6fce95cd6e27f845e18cb70ad5208f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f421e442c6fce95cd6e27f845e18cb70ad5208f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f421e442c6fce95cd6e27f845e18cb70ad5208f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f421e442c6fce95cd6e27f845e18cb70ad5208f4/comments", "author": {"login": "tuliom", "id": 85220, "node_id": "MDQ6VXNlcjg1MjIw", "avatar_url": "https://avatars.githubusercontent.com/u/85220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tuliom", "html_url": "https://github.com/tuliom", "followers_url": "https://api.github.com/users/tuliom/followers", "following_url": "https://api.github.com/users/tuliom/following{/other_user}", "gists_url": "https://api.github.com/users/tuliom/gists{/gist_id}", "starred_url": "https://api.github.com/users/tuliom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tuliom/subscriptions", "organizations_url": "https://api.github.com/users/tuliom/orgs", "repos_url": "https://api.github.com/users/tuliom/repos", "events_url": "https://api.github.com/users/tuliom/events{/privacy}", "received_events_url": "https://api.github.com/users/tuliom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dac920e8c8c4720237b2c63c50e57e6738d3f688", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dac920e8c8c4720237b2c63c50e57e6738d3f688", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dac920e8c8c4720237b2c63c50e57e6738d3f688"}], "stats": {"total": 87, "additions": 67, "deletions": 20}, "files": [{"sha": "9ef88a8de9a3ddb871ef6d81e0cce629ed121dbb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f421e442c6fce95cd6e27f845e18cb70ad5208f4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f421e442c6fce95cd6e27f845e18cb70ad5208f4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f421e442c6fce95cd6e27f845e18cb70ad5208f4", "patch": "@@ -1,3 +1,16 @@\n+2018-05-01  Tulio Magno Quites Machado Filho  <tuliom@linux.vnet.ibm.com>\n+\n+\tPR libstdc++/84654\n+\t* acinclude.m4: Set ENABLE_FLOAT128 instead of _GLIBCXX_USE_FLOAT128.\n+\t* config.h.in: Remove references to _GLIBCXX_USE_FLOAT128.\n+\t* configure: Regenerate.\n+\t* include/Makefile.am: Replace the value of _GLIBCXX_USE_FLOAT128\n+\tbased on ENABLE_FLOAT128.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/bits/c++config: Define _GLIBCXX_USE_FLOAT128.\n+\t[!defined(__FLOAT128__) && !defined(__SIZEOF_FLOAT128__)]: Undefine\n+\t_GLIBCXX_USE_FLOAT128.\n+\n 2018-04-24  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* configure: Regenerated."}, {"sha": "4f37b6a6498471bac9b6d4ef1cec4d59367426d2", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f421e442c6fce95cd6e27f845e18cb70ad5208f4/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f421e442c6fce95cd6e27f845e18cb70ad5208f4/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=f421e442c6fce95cd6e27f845e18cb70ad5208f4", "patch": "@@ -3062,7 +3062,7 @@ dnl Note: also checks that the types aren't standard types.\n dnl\n dnl Defines:\n dnl  _GLIBCXX_USE_INT128\n-dnl  _GLIBCXX_USE_FLOAT128\n+dnl  ENABLE_FLOAT128\n dnl\n AC_DEFUN([GLIBCXX_ENABLE_INT128_FLOAT128], [\n \n@@ -3117,13 +3117,12 @@ EOF\n \n     AC_MSG_CHECKING([for __float128])\n     if AC_TRY_EVAL(ac_compile); then\n-      AC_DEFINE(_GLIBCXX_USE_FLOAT128, 1,\n-      [Define if __float128 is supported on this host.])\n       enable_float128=yes\n     else\n       enable_float128=no\n     fi\n     AC_MSG_RESULT($enable_float128)\n+    GLIBCXX_CONDITIONAL(ENABLE_FLOAT128, test $enable_float128 = yes)\n     rm -f conftest*\n \n   AC_LANG_RESTORE"}, {"sha": "765cedc6edf93a9e95a18a4c280fac6e9be27829", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f421e442c6fce95cd6e27f845e18cb70ad5208f4/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f421e442c6fce95cd6e27f845e18cb70ad5208f4/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=f421e442c6fce95cd6e27f845e18cb70ad5208f4", "patch": "@@ -918,9 +918,6 @@\n /* Define if fchmodat is available in <sys/stat.h>. */\n #undef _GLIBCXX_USE_FCHMODAT\n \n-/* Define if __float128 is supported on this host. */\n-#undef _GLIBCXX_USE_FLOAT128\n-\n /* Defined if gettimeofday is available. */\n #undef _GLIBCXX_USE_GETTIMEOFDAY\n "}, {"sha": "c9dbaa139d5a73769b20a65929ec67218d6d2f8a", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f421e442c6fce95cd6e27f845e18cb70ad5208f4/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f421e442c6fce95cd6e27f845e18cb70ad5208f4/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=f421e442c6fce95cd6e27f845e18cb70ad5208f4", "patch": "@@ -729,6 +729,8 @@ BASIC_FILE_H\n CSTDIO_H\n SECTION_FLAGS\n WERROR\n+ENABLE_FLOAT128_FALSE\n+ENABLE_FLOAT128_TRUE\n thread_header\n glibcxx_PCHFLAGS\n GLIBCXX_BUILD_PCH_FALSE\n@@ -11606,7 +11608,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11609 \"configure\"\n+#line 11611 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11712,7 +11714,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11715 \"configure\"\n+#line 11717 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15398,7 +15400,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15401 \"configure\"\n+#line 15403 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -15433,7 +15435,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15436 \"configure\"\n+#line 15438 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -15468,7 +15470,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15471 \"configure\"\n+#line 15473 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -15504,7 +15506,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15507 \"configure\"\n+#line 15509 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -15585,7 +15587,7 @@ $as_echo \"$as_me: WARNING: Performance of certain classes will degrade as a resu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15588 \"configure\"\n+#line 15590 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -15627,7 +15629,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15630 \"configure\"\n+#line 15632 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -15661,7 +15663,7 @@ $as_echo \"$enable_int128\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15664 \"configure\"\n+#line 15666 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -15683,15 +15685,13 @@ $as_echo_n \"checking for __float128... \" >&6; }\n   ac_status=$?\n   $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n   test $ac_status = 0; }; then\n-\n-$as_echo \"#define _GLIBCXX_USE_FLOAT128 1\" >>confdefs.h\n-\n       enable_float128=yes\n     else\n       enable_float128=no\n     fi\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $enable_float128\" >&5\n $as_echo \"$enable_float128\" >&6; }\n+\n     rm -f conftest*\n \n   ac_ext=c\n@@ -81248,6 +81248,15 @@ else\n fi\n \n \n+    if test $enable_float128 = yes; then\n+  ENABLE_FLOAT128_TRUE=\n+  ENABLE_FLOAT128_FALSE='#'\n+else\n+  ENABLE_FLOAT128_TRUE='#'\n+  ENABLE_FLOAT128_FALSE=\n+fi\n+\n+\n     if test $enable_libstdcxx_allocator_flag = new; then\n   ENABLE_ALLOCATOR_NEW_TRUE=\n   ENABLE_ALLOCATOR_NEW_FALSE='#'\n@@ -81791,6 +81800,10 @@ if test -z \"${GLIBCXX_BUILD_PCH_TRUE}\" && test -z \"${GLIBCXX_BUILD_PCH_FALSE}\";\n   as_fn_error \"conditional \\\"GLIBCXX_BUILD_PCH\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${ENABLE_FLOAT128_TRUE}\" && test -z \"${ENABLE_FLOAT128_FALSE}\"; then\n+  as_fn_error \"conditional \\\"ENABLE_FLOAT128\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n if test -z \"${ENABLE_ALLOCATOR_NEW_TRUE}\" && test -z \"${ENABLE_ALLOCATOR_NEW_FALSE}\"; then\n   as_fn_error \"conditional \\\"ENABLE_ALLOCATOR_NEW\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"}, {"sha": "ba5adda95bd07f9f631e92bdafa59d746894d4b9", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f421e442c6fce95cd6e27f845e18cb70ad5208f4/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f421e442c6fce95cd6e27f845e18cb70ad5208f4/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=f421e442c6fce95cd6e27f845e18cb70ad5208f4", "patch": "@@ -1230,6 +1230,14 @@ stamp-allocator-new:\n \techo 0 > stamp-allocator-new\n endif\n \n+if ENABLE_FLOAT128\n+stamp-float128:\n+\techo 1 > stamp-float128\n+else\n+stamp-float128:\n+\techo 0 > stamp-float128\n+endif\n+\n # NB: The non-empty default ldbl_compat works around an AIX sed\n # oddity, see libstdc++/31957 for details.\n ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n@@ -1241,7 +1249,8 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t\t\t      stamp-extern-template \\\n \t\t\t      stamp-dual-abi \\\n \t\t\t      stamp-cxx11-abi \\\n-\t\t\t      stamp-allocator-new\n+\t\t\t      stamp-allocator-new \\\n+\t\t\t      stamp-float128\n \t@date=`cat ${toplevel_srcdir}/gcc/DATESTAMP` ;\\\n \trelease=`sed 's/^\\([0-9]*\\).*$$/\\1/' ${toplevel_srcdir}/gcc/BASE-VER` ;\\\n \tns_version=`cat stamp-namespace-version` ;\\\n@@ -1250,6 +1259,7 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \tdualabi=`cat stamp-dual-abi` ;\\\n \tcxx11abi=`cat stamp-cxx11-abi` ;\\\n \tallocatornew=`cat stamp-allocator-new` ;\\\n+\tfloat128=`cat stamp-float128` ;\\\n \tldbl_compat='s,g,g,' ;\\\n \tgrep \"^[\t ]*#[\t ]*define[\t ][\t ]*_GLIBCXX_LONG_DOUBLE_COMPAT[\t ][\t ]*1[\t ]*$$\" \\\n \t${CONFIG_HEADER} > /dev/null 2>&1 \\\n@@ -1262,6 +1272,7 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t-e \"s,define _GLIBCXX_USE_DUAL_ABI, define _GLIBCXX_USE_DUAL_ABI $$dualabi,\" \\\n \t-e \"s,define _GLIBCXX_USE_CXX11_ABI, define _GLIBCXX_USE_CXX11_ABI $$cxx11abi,\" \\\n \t-e \"s,define _GLIBCXX_USE_ALLOCATOR_NEW, define _GLIBCXX_USE_ALLOCATOR_NEW $$allocatornew,\" \\\n+\t-e \"s,define _GLIBCXX_USE_FLOAT128, define _GLIBCXX_USE_FLOAT128 $$float128,\" \\\n \t-e \"$$ldbl_compat\" \\\n \t    < ${glibcxx_srcdir}/include/bits/c++config > $@ ;\\\n \tsed -e 's/HAVE_/_GLIBCXX_HAVE_/g' \\"}, {"sha": "41ccc7befe451c7fba87619c71a0efe5e70b4e7c", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f421e442c6fce95cd6e27f845e18cb70ad5208f4/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f421e442c6fce95cd6e27f845e18cb70ad5208f4/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=f421e442c6fce95cd6e27f845e18cb70ad5208f4", "patch": "@@ -1662,6 +1662,11 @@ stamp-host: ${host_headers} ${bits_host_headers} ${ext_host_headers} ${host_head\n @ENABLE_ALLOCATOR_NEW_FALSE@stamp-allocator-new:\n @ENABLE_ALLOCATOR_NEW_FALSE@\techo 0 > stamp-allocator-new\n \n+@ENABLE_FLOAT128_TRUE@stamp-float128:\n+@ENABLE_FLOAT128_TRUE@\techo 1 > stamp-float128\n+@ENABLE_FLOAT128_FALSE@stamp-float128:\n+@ENABLE_FLOAT128_FALSE@\techo 0 > stamp-float128\n+\n # NB: The non-empty default ldbl_compat works around an AIX sed\n # oddity, see libstdc++/31957 for details.\n ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n@@ -1673,7 +1678,8 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t\t\t      stamp-extern-template \\\n \t\t\t      stamp-dual-abi \\\n \t\t\t      stamp-cxx11-abi \\\n-\t\t\t      stamp-allocator-new\n+\t\t\t      stamp-allocator-new \\\n+\t\t\t      stamp-float128\n \t@date=`cat ${toplevel_srcdir}/gcc/DATESTAMP` ;\\\n \trelease=`sed 's/^\\([0-9]*\\).*$$/\\1/' ${toplevel_srcdir}/gcc/BASE-VER` ;\\\n \tns_version=`cat stamp-namespace-version` ;\\\n@@ -1682,6 +1688,7 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \tdualabi=`cat stamp-dual-abi` ;\\\n \tcxx11abi=`cat stamp-cxx11-abi` ;\\\n \tallocatornew=`cat stamp-allocator-new` ;\\\n+\tfloat128=`cat stamp-float128` ;\\\n \tldbl_compat='s,g,g,' ;\\\n \tgrep \"^[\t ]*#[\t ]*define[\t ][\t ]*_GLIBCXX_LONG_DOUBLE_COMPAT[\t ][\t ]*1[\t ]*$$\" \\\n \t${CONFIG_HEADER} > /dev/null 2>&1 \\\n@@ -1694,6 +1701,7 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t-e \"s,define _GLIBCXX_USE_DUAL_ABI, define _GLIBCXX_USE_DUAL_ABI $$dualabi,\" \\\n \t-e \"s,define _GLIBCXX_USE_CXX11_ABI, define _GLIBCXX_USE_CXX11_ABI $$cxx11abi,\" \\\n \t-e \"s,define _GLIBCXX_USE_ALLOCATOR_NEW, define _GLIBCXX_USE_ALLOCATOR_NEW $$allocatornew,\" \\\n+\t-e \"s,define _GLIBCXX_USE_FLOAT128, define _GLIBCXX_USE_FLOAT128 $$float128,\" \\\n \t-e \"$$ldbl_compat\" \\\n \t    < ${glibcxx_srcdir}/include/bits/c++config > $@ ;\\\n \tsed -e 's/HAVE_/_GLIBCXX_HAVE_/g' \\"}, {"sha": "e34524117d61ca2b554bf9fef83ea95f0df73f0b", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f421e442c6fce95cd6e27f845e18cb70ad5208f4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f421e442c6fce95cd6e27f845e18cb70ad5208f4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=f421e442c6fce95cd6e27f845e18cb70ad5208f4", "patch": "@@ -609,4 +609,10 @@ namespace std\n # endif\n #endif\n \n+/* Define if __float128 is supported on this host. */\n+#define _GLIBCXX_USE_FLOAT128\n+#if !defined(__FLOAT128__) && !defined(__SIZEOF_FLOAT128__)\n+#undef _GLIBCXX_USE_FLOAT128\n+#endif\n+\n // End of prewritten config; the settings discovered at configure time follow."}]}