{"sha": "f0e525fe184ae711b4bbb37b9728776938b703de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBlNTI1ZmUxODRhZTcxMWI0YmJiMzdiOTcyODc3NjkzOGI3MDNkZQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2015-11-09T04:28:21Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2015-11-09T04:28:21Z"}, "message": "Modify obstack.[hc] to avoid having to include other gnulib files\n\nUsing the standard gnulib obstack source requires importing quite a\nlot of other files from gnulib, and requires build changes.\n\ninclude/\n\t* obstack.h (__attribute_pure__): Expand _GL_ATTRIBUTE_PURE.\nlibiberty/\n\t* obstack.c (__alignof__): Expand alignof_type from alignof.h.\n\t(obstack_exit_failure): Don't use exitfail.h.\n\t(_): Include libintl.h when HAVE_LIBINTL_H and nls enabled.\n\tProvide default.  Don't include gettext.h.\n\t(_Noreturn): Define.\n\t* obstacks.texi: Adjust node references to external libc info files.\n\nFrom-SVN: r229988", "tree": {"sha": "682bf1ffda298891ad7163b4f5f8b0e4aadb0a24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/682bf1ffda298891ad7163b4f5f8b0e4aadb0a24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0e525fe184ae711b4bbb37b9728776938b703de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0e525fe184ae711b4bbb37b9728776938b703de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0e525fe184ae711b4bbb37b9728776938b703de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0e525fe184ae711b4bbb37b9728776938b703de/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c9f265c94502ff2a751e9dfb78b718975c0cac0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9f265c94502ff2a751e9dfb78b718975c0cac0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9f265c94502ff2a751e9dfb78b718975c0cac0c"}], "stats": {"total": 69, "additions": 55, "deletions": 14}, "files": [{"sha": "004d355228a50244d45d73932239f81e3cf077c7", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e525fe184ae711b4bbb37b9728776938b703de/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e525fe184ae711b4bbb37b9728776938b703de/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=f0e525fe184ae711b4bbb37b9728776938b703de", "patch": "@@ -1,3 +1,8 @@\n+2015-11-09  Alan Modra  <amodra@gmail.com>\n+\n+\tPR gdb/17133\n+\t* obstack.h (__attribute_pure__): Expand _GL_ATTRIBUTE_PURE.\n+\n 2015-11-09  Alan Modra  <amodra@gmail.com>\n \n \tPR gdb/17133"}, {"sha": "0d13c72d056c82cc2e03c4a6d32bfaa63f0ecaf3", "filename": "include/obstack.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e525fe184ae711b4bbb37b9728776938b703de/include%2Fobstack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e525fe184ae711b4bbb37b9728776938b703de/include%2Fobstack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fobstack.h?ref=f0e525fe184ae711b4bbb37b9728776938b703de", "patch": "@@ -142,7 +142,11 @@\n                 P, A)\n \n #ifndef __attribute_pure__\n-# define __attribute_pure__ _GL_ATTRIBUTE_PURE\n+# if defined __GNUC_MINOR__ && __GNUC__ * 1000 + __GNUC_MINOR__ >= 2096\n+#  define __attribute_pure__ __attribute__ ((__pure__))\n+# else\n+#  define __attribute_pure__\n+# endif\n #endif\n \n #ifdef __cplusplus"}, {"sha": "3bd9a9650dfce664527c9f51d35ccc5777572a7c", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e525fe184ae711b4bbb37b9728776938b703de/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e525fe184ae711b4bbb37b9728776938b703de/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=f0e525fe184ae711b4bbb37b9728776938b703de", "patch": "@@ -1,3 +1,13 @@\n+2015-11-09  Alan Modra  <amodra@gmail.com>\n+\n+\tPR gdb/17133\n+\t* obstack.c (__alignof__): Expand alignof_type from alignof.h.\n+\t(obstack_exit_failure): Don't use exitfail.h.\n+\t(_): Include libintl.h when HAVE_LIBINTL_H and nls enabled.\n+\tProvide default.  Don't include gettext.h.\n+\t(_Noreturn): Define.\n+\t* obstacks.texi: Adjust node references to external libc info files.\n+\n 2015-11-09  Alan Modra  <amodra@gmail.com>\n \n \tPR gdb/17133"}, {"sha": "9f34da1164bd4a6a3331c01eb66b9c9522b48226", "filename": "libiberty/obstack.c", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e525fe184ae711b4bbb37b9728776938b703de/libiberty%2Fobstack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e525fe184ae711b4bbb37b9728776938b703de/libiberty%2Fobstack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fobstack.c?ref=f0e525fe184ae711b4bbb37b9728776938b703de", "patch": "@@ -51,9 +51,14 @@\n /* If GCC, or if an oddball (testing?) host that #defines __alignof__,\n    use the already-supplied __alignof__.  Otherwise, this must be Gnulib\n    (as glibc assumes GCC); defer to Gnulib's alignof_type.  */\n-# if !defined __GNUC__ && !defined __alignof__\n-#  include <alignof.h>\n-#  define __alignof__(type) alignof_type (type)\n+# if !defined __GNUC__ && !defined __IBM__ALIGNOF__ && !defined __alignof__\n+#  if defined __cplusplus\n+template <class type> struct alignof_helper { char __slot1; type __slot2; };\n+#   define __alignof__(type) offsetof (alignof_helper<type>, __slot2)\n+#  else\n+#   define __alignof__(type)\t\t\t\t\t\t      \\\n+  offsetof (struct { char __slot1; type __slot2; }, __slot2)\n+#  endif\n # endif\n # include <stdlib.h>\n # include <stdint.h>\n@@ -309,17 +314,34 @@ _obstack_memory_used (struct obstack *h)\n #  ifdef _LIBC\n int obstack_exit_failure = EXIT_FAILURE;\n #  else\n-#   include \"exitfail.h\"\n-#   define obstack_exit_failure exit_failure\n+#   ifndef EXIT_FAILURE\n+#    define EXIT_FAILURE 1\n+#   endif\n+#   define obstack_exit_failure EXIT_FAILURE\n #  endif\n \n-#  ifdef _LIBC\n+#  if defined _LIBC || (HAVE_LIBINTL_H && ENABLE_NLS)\n #   include <libintl.h>\n+#   ifndef _\n+#    define _(msgid) gettext (msgid)\n+#   endif\n #  else\n-#   include \"gettext.h\"\n+#   ifndef _\n+#    define _(msgid) (msgid)\n+#   endif\n #  endif\n-#  ifndef _\n-#   define _(msgid) gettext (msgid)\n+\n+#  if !(defined _Noreturn\t\t\t\t\t\t      \\\n+        || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112))\n+#   if ((defined __GNUC__\t\t\t\t\t\t      \\\n+\t && (__GNUC__ >= 3 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 8)))\t      \\\n+\t|| (defined __SUNPRO_C && __SUNPRO_C >= 0x5110))\n+#    define _Noreturn __attribute__ ((__noreturn__))\n+#   elif defined _MSC_VER && _MSC_VER >= 1200\n+#    define _Noreturn __declspec (noreturn)\n+#   else\n+#    define _Noreturn\n+#   endif\n #  endif\n \n #  ifdef _LIBC"}, {"sha": "b2d2403210bb7de78344ebeb8d8b55e40e31d61d", "filename": "libiberty/obstacks.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e525fe184ae711b4bbb37b9728776938b703de/libiberty%2Fobstacks.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e525fe184ae711b4bbb37b9728776938b703de/libiberty%2Fobstacks.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fobstacks.texi?ref=f0e525fe184ae711b4bbb37b9728776938b703de", "patch": "@@ -93,7 +93,7 @@ them are freed.  These macros should appear before any use of obstacks\n in the source file.\n \n Usually these are defined to use @code{malloc} via the intermediary\n-@code{xmalloc} (@pxref{Unconstrained Allocation}).  This is done with\n+@code{xmalloc} (@pxref{Unconstrained Allocation, , , libc, The GNU C Library Reference Manual}).  This is done with\n the following pair of macro definitions:\n \n @smallexample\n@@ -172,8 +172,8 @@ The value of this variable is a pointer to a function that\n @code{obstack} uses when @code{obstack_chunk_alloc} fails to allocate\n memory.  The default action is to print a message and abort.\n You should supply a function that either calls @code{exit}\n-(@pxref{Program Termination}) or @code{longjmp} (@pxref{Non-Local\n-Exits}) and doesn't return.\n+(@pxref{Program Termination, , , libc, The GNU C Library Reference Manual}) or @code{longjmp} (@pxref{Non-Local\n+Exits, , , libc, The GNU C Library Reference Manual}) and doesn't return.\n \n @smallexample\n void my_obstack_alloc_failed (void)\n@@ -253,7 +253,7 @@ obstack_savestring (char *addr, size_t size)\n \n @noindent\n Contrast this with the previous example of @code{savestring} using\n-@code{malloc} (@pxref{Basic Allocation}).\n+@code{malloc} (@pxref{Basic Allocation, , , libc, The GNU C Library Reference Manual}).\n \n @node Freeing Obstack Objects\n @subsubsection Freeing Objects in an Obstack"}]}