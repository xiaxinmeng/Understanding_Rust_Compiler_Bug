{"sha": "664e69688d7681be99aaa900ef193d3196e4b7d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY0ZTY5Njg4ZDc2ODFiZTk5YWFhOTAwZWYxOTNkMzE5NmU0YjdkMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2016-11-25T08:20:40Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2016-11-25T08:20:40Z"}, "message": "Set mode of decimal floats before calling layout_type\n\nPreviously decimal floating-point types were created and laid\nout as binary floating-point types, then the caller changed\nthe mode to a decimal mode later.  The problem with that\napproach is that not all targets support an equivalent binary\nfloating-point mode.  When they didn't, we would give the\ntype BLKmode and lay it out as a zero-sized type.\n\nThis probably had no effect in practice.  If a target doesn't\nsupport a binary mode then it's unlikely to support the decimal\nequivalent either.  However, with the stricter mode checking\nadded by later patches, we would assert if a scalar floating-\npoint type didn't have a scalar floating-point mode.\n\ngcc/\n2016-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\n\t* stor-layout.c (layout_type): Allow the caller to set the mode of\n\ta float type.  Only choose one here if the mode is still VOIDmode.\n\t* tree.c (build_common_tree_nodes): Set the type mode of decimal\n\tfloats before calling layout_type.\n\t* config/rs6000/rs6000.c (rs6000_init_builtins): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r242862", "tree": {"sha": "a7b23a5d0e95bc25c88e837668f6932f8b95681d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7b23a5d0e95bc25c88e837668f6932f8b95681d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/664e69688d7681be99aaa900ef193d3196e4b7d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/664e69688d7681be99aaa900ef193d3196e4b7d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/664e69688d7681be99aaa900ef193d3196e4b7d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/664e69688d7681be99aaa900ef193d3196e4b7d1/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "84db1406e6d9b6d68bf45612348a8094b25e708b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84db1406e6d9b6d68bf45612348a8094b25e708b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84db1406e6d9b6d68bf45612348a8094b25e708b"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "5c8e7858a3aadd6f4717c50830028fe53781df80", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664e69688d7681be99aaa900ef193d3196e4b7d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664e69688d7681be99aaa900ef193d3196e4b7d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=664e69688d7681be99aaa900ef193d3196e4b7d1", "patch": "@@ -1,3 +1,13 @@\n+2016-11-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* stor-layout.c (layout_type): Allow the caller to set the mode of\n+\ta float type.  Only choose one here if the mode is still VOIDmode.\n+\t* tree.c (build_common_tree_nodes): Set the type mode of decimal\n+\tfloats before calling layout_type.\n+\t* config/rs6000/rs6000.c (rs6000_init_builtins): Likewise.\n+\n 2016-11-25  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-tailcall.c (find_tail_calls): Allow calls to reference"}, {"sha": "fce4e39128a45bd8e9e0ebc8abe70390af6c1132", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664e69688d7681be99aaa900ef193d3196e4b7d1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664e69688d7681be99aaa900ef193d3196e4b7d1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=664e69688d7681be99aaa900ef193d3196e4b7d1", "patch": "@@ -16792,8 +16792,8 @@ rs6000_init_builtins (void)\n     {\n       ibm128_float_type_node = make_node (REAL_TYPE);\n       TYPE_PRECISION (ibm128_float_type_node) = 128;\n-      layout_type (ibm128_float_type_node);\n       SET_TYPE_MODE (ibm128_float_type_node, IFmode);\n+      layout_type (ibm128_float_type_node);\n \n       lang_hooks.types.register_builtin_type (ibm128_float_type_node,\n \t\t\t\t\t      \"__ibm128\");\n@@ -16812,8 +16812,8 @@ rs6000_init_builtins (void)\n     {\n       ieee128_float_type_node = make_node (REAL_TYPE);\n       TYPE_PRECISION (ibm128_float_type_node) = 128;\n-      layout_type (ieee128_float_type_node);\n       SET_TYPE_MODE (ieee128_float_type_node, KFmode);\n+      layout_type (ieee128_float_type_node);\n \n       /* If we are not exporting the __float128/_Float128 keywords, we need a\n \t keyword to get the types created.  Use __ieee128 as the dummy"}, {"sha": "5a4bcf1d6640354451de3fb72e11089f9c703821", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664e69688d7681be99aaa900ef193d3196e4b7d1/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664e69688d7681be99aaa900ef193d3196e4b7d1/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=664e69688d7681be99aaa900ef193d3196e4b7d1", "patch": "@@ -2135,8 +2135,11 @@ layout_type (tree type)\n       break;\n \n     case REAL_TYPE:\n-      SET_TYPE_MODE (type,\n-\t\t     mode_for_size (TYPE_PRECISION (type), MODE_FLOAT, 0));\n+      /* Allow the caller to choose the type mode, which is how decimal\n+\t floats are distinguished from binary ones.  */\n+      if (TYPE_MODE (type) == VOIDmode)\n+\tSET_TYPE_MODE (type,\n+\t\t       mode_for_size (TYPE_PRECISION (type), MODE_FLOAT, 0));\n       TYPE_SIZE (type) = bitsize_int (GET_MODE_BITSIZE (TYPE_MODE (type)));\n       TYPE_SIZE_UNIT (type) = size_int (GET_MODE_SIZE (TYPE_MODE (type)));\n       break;"}, {"sha": "dd6ef6397984ecc0cbb4972b32ec77c9e40a67ff", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664e69688d7681be99aaa900ef193d3196e4b7d1/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664e69688d7681be99aaa900ef193d3196e4b7d1/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=664e69688d7681be99aaa900ef193d3196e4b7d1", "patch": "@@ -10436,20 +10436,20 @@ build_common_tree_nodes (bool signed_char)\n   /* Decimal float types. */\n   dfloat32_type_node = make_node (REAL_TYPE);\n   TYPE_PRECISION (dfloat32_type_node) = DECIMAL32_TYPE_SIZE;\n-  layout_type (dfloat32_type_node);\n   SET_TYPE_MODE (dfloat32_type_node, SDmode);\n+  layout_type (dfloat32_type_node);\n   dfloat32_ptr_type_node = build_pointer_type (dfloat32_type_node);\n \n   dfloat64_type_node = make_node (REAL_TYPE);\n   TYPE_PRECISION (dfloat64_type_node) = DECIMAL64_TYPE_SIZE;\n-  layout_type (dfloat64_type_node);\n   SET_TYPE_MODE (dfloat64_type_node, DDmode);\n+  layout_type (dfloat64_type_node);\n   dfloat64_ptr_type_node = build_pointer_type (dfloat64_type_node);\n \n   dfloat128_type_node = make_node (REAL_TYPE);\n   TYPE_PRECISION (dfloat128_type_node) = DECIMAL128_TYPE_SIZE;\n-  layout_type (dfloat128_type_node);\n   SET_TYPE_MODE (dfloat128_type_node, TDmode);\n+  layout_type (dfloat128_type_node);\n   dfloat128_ptr_type_node = build_pointer_type (dfloat128_type_node);\n \n   complex_integer_type_node = build_complex_type (integer_type_node, true);"}]}