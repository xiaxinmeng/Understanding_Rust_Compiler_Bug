{"sha": "6eca10aa761c56b9a26763e036c72475337194f8", "node_id": "C_kwDOANBUbNoAKDZlY2ExMGFhNzYxYzU2YjlhMjY3NjNlMDM2YzcyNDc1MzM3MTk0Zjg", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-11-09T18:01:46Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-11-11T15:34:51Z"}, "message": "aarch64: Use type-qualified builtins for ADDV Neon intrinsics\n\nDeclare unsigned type-qualified builtins and use them to implement\nthe vector reduction Neon intrinsics. This removes the need for many\ncasts in arm_neon.h.\n\ngcc/ChangeLog:\n\n2021-11-09  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Declare unsigned\n\tbuiltins for vector reduction.\n\t* config/aarch64/arm_neon.h (vaddv_u8): Use type-qualified\n\tbuiltin and remove casts.\n\t(vaddv_u16): Likewise.\n\t(vaddv_u32): Likewise.\n\t(vaddvq_u8): Likewise.\n\t(vaddvq_u16): Likewise.\n\t(vaddvq_u32): Likewise.\n\t(vaddvq_u64): Likewise.", "tree": {"sha": "df6dacd80bb0a31bc0806203c8781992c5d4c9b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df6dacd80bb0a31bc0806203c8781992c5d4c9b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6eca10aa761c56b9a26763e036c72475337194f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eca10aa761c56b9a26763e036c72475337194f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eca10aa761c56b9a26763e036c72475337194f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eca10aa761c56b9a26763e036c72475337194f8/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f341c03203d8e8ca9965b73c5709337687d32cc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f341c03203d8e8ca9965b73c5709337687d32cc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f341c03203d8e8ca9965b73c5709337687d32cc2"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "d9e9e115874404a4cabe5e5b96436f42882d67cd", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eca10aa761c56b9a26763e036c72475337194f8/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eca10aa761c56b9a26763e036c72475337194f8/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=6eca10aa761c56b9a26763e036c72475337194f8", "patch": "@@ -513,6 +513,7 @@\n \n   /* Implemented by aarch64_reduc_plus_<mode>.  */\n   BUILTIN_VALL (UNOP, reduc_plus_scal_, 10, NONE)\n+  BUILTIN_VDQ_I (UNOPU, reduc_plus_scal_, 10, NONE)\n \n   /* Implemented by reduc_<maxmin_uns>_scal_<mode> (producing scalar).  */\n   BUILTIN_VDQIF_F16 (UNOP, reduc_smax_scal_, 10, NONE)"}, {"sha": "743907e1741eba162d3db7d087f440fcf90c1239", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eca10aa761c56b9a26763e036c72475337194f8/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eca10aa761c56b9a26763e036c72475337194f8/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=6eca10aa761c56b9a26763e036c72475337194f8", "patch": "@@ -9695,21 +9695,21 @@ __extension__ extern __inline uint8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddv_u8 (uint8x8_t __a)\n {\n-  return (uint8_t) __builtin_aarch64_reduc_plus_scal_v8qi ((int8x8_t) __a);\n+  return __builtin_aarch64_reduc_plus_scal_v8qi_uu (__a);\n }\n \n __extension__ extern __inline uint16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddv_u16 (uint16x4_t __a)\n {\n-  return (uint16_t) __builtin_aarch64_reduc_plus_scal_v4hi ((int16x4_t) __a);\n+  return __builtin_aarch64_reduc_plus_scal_v4hi_uu (__a);\n }\n \n __extension__ extern __inline uint32_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddv_u32 (uint32x2_t __a)\n {\n-  return (int32_t) __builtin_aarch64_reduc_plus_scal_v2si ((int32x2_t) __a);\n+  return __builtin_aarch64_reduc_plus_scal_v2si_uu (__a);\n }\n \n __extension__ extern __inline int8_t\n@@ -9744,28 +9744,28 @@ __extension__ extern __inline uint8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddvq_u8 (uint8x16_t __a)\n {\n-  return (uint8_t) __builtin_aarch64_reduc_plus_scal_v16qi ((int8x16_t) __a);\n+  return __builtin_aarch64_reduc_plus_scal_v16qi_uu (__a);\n }\n \n __extension__ extern __inline uint16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddvq_u16 (uint16x8_t __a)\n {\n-  return (uint16_t) __builtin_aarch64_reduc_plus_scal_v8hi ((int16x8_t) __a);\n+  return __builtin_aarch64_reduc_plus_scal_v8hi_uu (__a);\n }\n \n __extension__ extern __inline uint32_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddvq_u32 (uint32x4_t __a)\n {\n-  return (uint32_t) __builtin_aarch64_reduc_plus_scal_v4si ((int32x4_t) __a);\n+  return __builtin_aarch64_reduc_plus_scal_v4si_uu (__a);\n }\n \n __extension__ extern __inline uint64_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddvq_u64 (uint64x2_t __a)\n {\n-  return (uint64_t) __builtin_aarch64_reduc_plus_scal_v2di ((int64x2_t) __a);\n+  return __builtin_aarch64_reduc_plus_scal_v2di_uu (__a);\n }\n \n __extension__ extern __inline float32_t"}]}