{"sha": "70dc395a5098e9ae3958e1a317e202358095ed97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBkYzM5NWE1MDk4ZTlhZTM5NThlMWEzMTdlMjAyMzU4MDk1ZWQ5Nw==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2012-04-30T11:42:38Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2012-04-30T11:42:38Z"}, "message": "Make conversion warnings work on NULL with -ftrack-macro-expansion\n\nThere are various conversion related warnings that trigger on\npotentially dangerous uses of NULL (or __null).  NULL is defined as a\nmacro in a system header, so calling warning or warning_at on a\nvirtual location of NULL yields no diagnostic.  So the test\naccompanying this patch (as well as others), was failling when run\nwith -ftrack-macro-expansion.\n\nI think it's necessary to use the location of NULL that is in the main\nsource code (instead of, e.g, the spelling location that is in the\nsystem header where the macro is defined) in those cases.  Note that\nfor __null, we don't have the issue.\n\nI have augmented the test of this patch to check that we don't regress\nwhen handling __null.\n\nTested on x86_64-unknown-linux-gnu against trunk.\n\nNote that the bootstrap with -ftrack-macro-expansion exhibits other\nseparate issues that are addressed in subsequent patches.  This patch\njust fixes one class of problems.\n\nThe patch does pass bootstrap with -ftrack-macro-expansion turned off,\nthough.\n\ngcc/\n\t* input.h (expansion_point_location_if_in_system_header): Declare\n\tnew function.\n\t* input.c (expansion_point_location_if_in_system_header): Define it.\ngcc/cp/\n\n\t* call.c (conversion_null_warnings): Use the new\n\texpansion_point_location_if_in_system_header.\n\t* cvt.c (build_expr_type_conversion): Likewise.\n\t* typeck.c (cp_build_binary_op): Likewise.\n\ngcc/testsuite/\n\n\t* g++.dg/warn/Wconversion-null-2.C: Add testing for __null,\n\talongside the previous testing for NULL.\n\nFrom-SVN: r186972", "tree": {"sha": "c28481505ac75c540fcd6de15af56c57a92ccb41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c28481505ac75c540fcd6de15af56c57a92ccb41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70dc395a5098e9ae3958e1a317e202358095ed97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70dc395a5098e9ae3958e1a317e202358095ed97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70dc395a5098e9ae3958e1a317e202358095ed97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70dc395a5098e9ae3958e1a317e202358095ed97/comments", "author": null, "committer": null, "parents": [{"sha": "2d48bdcadfe34cc00ffc7b26687700017b5410c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d48bdcadfe34cc00ffc7b26687700017b5410c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d48bdcadfe34cc00ffc7b26687700017b5410c9"}], "stats": {"total": 95, "additions": 87, "deletions": 8}, "files": [{"sha": "5544d667392e5fdcbf41273e680cebf415554c2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70dc395a5098e9ae3958e1a317e202358095ed97/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70dc395a5098e9ae3958e1a317e202358095ed97/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70dc395a5098e9ae3958e1a317e202358095ed97", "patch": "@@ -1,5 +1,11 @@\n 2012-04-30  Dodji Seketeli  <dodji@redhat.com>\n \n+\tMake conversion warnings work on NULL with -ftrack-macro-expansion\n+\t* input.h (expansion_point_location_if_in_system_header): Declare\n+\tnew function.\n+\t* input.c (expansion_point_location_if_in_system_header): Define\n+\tit.\n+\n \tFix -Wuninitialized for -ftrack-macro-expansion\n \t* tree-ssa.c (warn_uninit): Use the spelling location of the\n \tvariable declaration.  Use linemap_location_before_p for source"}, {"sha": "67dd067e867d55558c8e4acabc6f2422f00d460c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70dc395a5098e9ae3958e1a317e202358095ed97/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70dc395a5098e9ae3958e1a317e202358095ed97/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=70dc395a5098e9ae3958e1a317e202358095ed97", "patch": "@@ -1,3 +1,11 @@\n+2012-04-30  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tMake conversion warnings work on NULL with -ftrack-macro-expansion\n+\t* call.c (conversion_null_warnings): Use the new\n+\texpansion_point_location_if_in_system_header.\n+\t* cvt.c (build_expr_type_conversion): Likewise.\n+\t* typeck.c (cp_build_binary_op): Likewise.\n+\n 2012-04-30  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* typeck.c (convert_for_assignment):  Replace"}, {"sha": "98d32c347e176d466732488598c442ae6aa0bbc4", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70dc395a5098e9ae3958e1a317e202358095ed97/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70dc395a5098e9ae3958e1a317e202358095ed97/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=70dc395a5098e9ae3958e1a317e202358095ed97", "patch": "@@ -5598,12 +5598,15 @@ conversion_null_warnings (tree totype, tree expr, tree fn, int argnum)\n   if (expr == null_node && TREE_CODE (totype) != BOOLEAN_TYPE\n       && ARITHMETIC_TYPE_P (totype))\n     {\n+      source_location loc =\n+\texpansion_point_location_if_in_system_header (input_location);\n+\n       if (fn)\n-\twarning_at (input_location, OPT_Wconversion_null,\n+\twarning_at (loc, OPT_Wconversion_null,\n \t\t    \"passing NULL to non-pointer argument %P of %qD\",\n \t\t    argnum, fn);\n       else\n-\twarning_at (input_location, OPT_Wconversion_null,\n+\twarning_at (loc, OPT_Wconversion_null,\n \t\t    \"converting to non-pointer type %qT from NULL\", totype);\n     }\n "}, {"sha": "49ba38a3f3961ec0724f4ac6e60861e7183bbd09", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70dc395a5098e9ae3958e1a317e202358095ed97/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70dc395a5098e9ae3958e1a317e202358095ed97/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=70dc395a5098e9ae3958e1a317e202358095ed97", "patch": "@@ -1472,8 +1472,13 @@ build_expr_type_conversion (int desires, tree expr, bool complain)\n   if (expr == null_node\n       && (desires & WANT_INT)\n       && !(desires & WANT_NULL))\n-    warning_at (input_location, OPT_Wconversion_null,\n-\t\t\"converting NULL to non-pointer type\");\n+    {\n+      source_location loc =\n+\texpansion_point_location_if_in_system_header (input_location);\n+\n+      warning_at (loc, OPT_Wconversion_null,\n+\t\t  \"converting NULL to non-pointer type\");\n+    }\n \n   basetype = TREE_TYPE (expr);\n "}, {"sha": "4f1e965c65ae2d8c382c2cc9f942689677043c8a", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70dc395a5098e9ae3958e1a317e202358095ed97/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70dc395a5098e9ae3958e1a317e202358095ed97/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=70dc395a5098e9ae3958e1a317e202358095ed97", "patch": "@@ -3838,9 +3838,12 @@ cp_build_binary_op (location_t location,\n \t  || (!null_ptr_cst_p (orig_op1) \n \t      && !TYPE_PTR_P (type1) && !TYPE_PTR_TO_MEMBER_P (type1)))\n       && (complain & tf_warning))\n-    /* Some sort of arithmetic operation involving NULL was\n-       performed.  */\n-    warning (OPT_Wpointer_arith, \"NULL used in arithmetic\");\n+    {\n+      source_location loc =\n+\texpansion_point_location_if_in_system_header (input_location);\n+\n+      warning_at (loc, OPT_Wpointer_arith, \"NULL used in arithmetic\");\n+    }\n \n   switch (code)\n     {"}, {"sha": "5f14489753f20d408f1cf133e1a6be3e03808c1d", "filename": "gcc/input.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70dc395a5098e9ae3958e1a317e202358095ed97/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70dc395a5098e9ae3958e1a317e202358095ed97/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=70dc395a5098e9ae3958e1a317e202358095ed97", "patch": "@@ -162,6 +162,26 @@ expand_location_to_spelling_point (source_location loc)\n   return expand_location_1 (loc, /*expansion_piont_p=*/false);\n }\n \n+/* If LOCATION is in a sytem header and if it's a virtual location for\n+   a token coming from the expansion of a macro M, unwind it to the\n+   location of the expansion point of M.  Otherwise, just return\n+   LOCATION.\n+\n+   This is used for instance when we want to emit diagnostics about a\n+   token that is located in a macro that is itself defined in a system\n+   header -- e.g for the NULL macro.  In that case, if LOCATION is\n+   passed to diagnostics emitting functions like warning_at as is, no\n+   diagnostic won't be emitted.  */\n+\n+source_location\n+expansion_point_location_if_in_system_header (source_location location)\n+{\n+  if (in_system_header_at (location))\n+    location = linemap_resolve_location (line_table, location,\n+\t\t\t\t\t LRK_MACRO_EXPANSION_POINT,\n+\t\t\t\t\t NULL);\n+  return location;\n+}\n \n #define ONE_K 1024\n #define ONE_M (ONE_K * ONE_K)"}, {"sha": "d811255c9f46f564bf321ef357b81ac34ff222c1", "filename": "gcc/input.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70dc395a5098e9ae3958e1a317e202358095ed97/gcc%2Finput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70dc395a5098e9ae3958e1a317e202358095ed97/gcc%2Finput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.h?ref=70dc395a5098e9ae3958e1a317e202358095ed97", "patch": "@@ -40,6 +40,7 @@ extern char builtins_location_check[(BUILTINS_LOCATION\n extern expanded_location expand_location (source_location);\n extern const char * location_get_source_line(expanded_location xloc);\n extern expanded_location expand_location_to_spelling_point (source_location);\n+extern source_location expansion_point_location_if_in_system_header (source_location);\n \n /* Historically GCC used location_t, while cpp used source_location.\n    This could be removed but it hardly seems worth the effort.  */"}, {"sha": "4fda9ae5e003af6ce12644acfddc3fa0bebdb3ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70dc395a5098e9ae3958e1a317e202358095ed97/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70dc395a5098e9ae3958e1a317e202358095ed97/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=70dc395a5098e9ae3958e1a317e202358095ed97", "patch": "@@ -1,5 +1,9 @@\n 2012-04-30  Dodji Seketeli  <dodji@redhat.com>\n \n+\tMake conversion warnings work on NULL with -ftrack-macro-expansion\n+\t* g++.dg/warn/Wconversion-null-2.C: Add testing for __null,\n+\talongside the previous testing for NULL.\n+\n \tFix -Wuninitialized for -ftrack-macro-expansion\n \t* gcc.dg/cpp/pragma-diagnostic-2.c: Fix this.\n "}, {"sha": "a71551fdf90a7a327ca22ac869de800854631841", "filename": "gcc/testsuite/g++.dg/warn/Wconversion-null-2.C", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70dc395a5098e9ae3958e1a317e202358095ed97/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-null-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70dc395a5098e9ae3958e1a317e202358095ed97/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-null-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-null-2.C?ref=70dc395a5098e9ae3958e1a317e202358095ed97", "patch": "@@ -25,7 +25,7 @@ void l(long) {}\n template <>\n void l(long long) {}\n \n-int main()\n+void warn_for_NULL()\n {\n   int i = NULL; // { dg-warning \"\" } converting NULL to non-pointer type\n   float z = NULL; // { dg-warning \"\" } converting NULL to non-pointer type\n@@ -47,3 +47,32 @@ int main()\n   l(NULL);   // No warning: NULL is used to implicitly instantiate the template\n   NULL && NULL; // No warning: converting NULL to bool is OK\n }\n+\n+int warn_for___null()\n+{\n+  int i = __null; // { dg-warning \"\" } converting __null to non-pointer type\n+  float z = __null; // { dg-warning \"\" } converting __null to non-pointer type\n+  int a[2];\n+\n+  i != __null; // { dg-warning \"\" } __null used in arithmetic\n+  __null != z; // { dg-warning \"\" } __null used in arithmetic\n+  k != __null; // No warning: decay conversion\n+  __null != a; // Likewise.\n+  -__null;     // { dg-warning \"\" } converting __null to non-pointer type\n+  +__null;     // { dg-warning \"\" } converting __null to non-pointer type\n+  ~__null;     // { dg-warning \"\" } converting __null to non-pointer type\n+  a[__null] = 3; // { dg-warning \"\" } converting __null to non-pointer-type\n+  i = __null;  // { dg-warning \"\" } converting __null to non-pointer type\n+  z = __null;  // { dg-warning \"\" } converting __null to non-pointer type\n+  k(__null);   // { dg-warning \"\" } converting __null to int\n+  g(__null);   // { dg-warning \"\" } converting __null to int\n+  h<__null>(); // No warning: __null bound to integer template parameter\n+  l(__null);   // No warning: __null is used to implicitly instantiate the template\n+  __null && __null; // No warning: converting NULL to bool is OK\n+}\n+\n+int main()\n+{\n+  warn_for_NULL();\n+  warn_for___null();\n+}"}]}