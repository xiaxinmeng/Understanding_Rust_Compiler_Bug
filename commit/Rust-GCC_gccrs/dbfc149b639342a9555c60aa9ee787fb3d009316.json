{"sha": "dbfc149b639342a9555c60aa9ee787fb3d009316", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJmYzE0OWI2MzkzNDJhOTU1NWM2MGFhOWVlNzg3ZmIzZDAwOTMxNg==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-06-14T15:18:44Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-06-16T13:22:42Z"}, "message": "aarch64: Model zero-high-half semantics of ADDHN/SUBHN instructions\n\nModel the zero-high-half semantics of the narrowing arithmetic Neon\ninstructions in the aarch64_<sur><addsub>hn<mode> RTL pattern.\nModeling these semantics allows for better RTL combinations while\nalso removing some register allocation issues as the compiler now\nknows that the operation is totally destructive.\n\nAdd new tests to narrow_zero_high_half.c to verify the benefit of\nthis change.\n\ngcc/ChangeLog:\n\n2021-06-14  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd.md (aarch64_<sur><addsub>hn<mode>):\n\tChange to an expander that emits the correct instruction\n\tdepending on endianness.\n\t(aarch64_<sur><addsub>hn<mode>_insn_le): Define.\n\t(aarch64_<sur><addsub>hn<mode>_insn_be): Define.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/narrow_zero_high_half.c: Add new tests.", "tree": {"sha": "2fddb90915757489cf18830e987f7a4a71352a8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fddb90915757489cf18830e987f7a4a71352a8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbfc149b639342a9555c60aa9ee787fb3d009316", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbfc149b639342a9555c60aa9ee787fb3d009316", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbfc149b639342a9555c60aa9ee787fb3d009316", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbfc149b639342a9555c60aa9ee787fb3d009316/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0889b5d37ff40149b44e3c7d82f693d430cd891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0889b5d37ff40149b44e3c7d82f693d430cd891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0889b5d37ff40149b44e3c7d82f693d430cd891"}], "stats": {"total": 89, "additions": 83, "deletions": 6}, "files": [{"sha": "540244cf0a919b3ea1d6ebf5929be50fed395179", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 43, "deletions": 6, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbfc149b639342a9555c60aa9ee787fb3d009316/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbfc149b639342a9555c60aa9ee787fb3d009316/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=dbfc149b639342a9555c60aa9ee787fb3d009316", "patch": "@@ -4661,16 +4661,53 @@\n \n ;; <r><addsub>hn<q>.\n \n-(define_insn \"aarch64_<sur><addsub>hn<mode>\"\n-  [(set (match_operand:<VNARROWQ> 0 \"register_operand\" \"=w\")\n-        (unspec:<VNARROWQ> [(match_operand:VQN 1 \"register_operand\" \"w\")\n-\t\t\t    (match_operand:VQN 2 \"register_operand\" \"w\")]\n-                           ADDSUBHN))]\n-  \"TARGET_SIMD\"\n+(define_insn \"aarch64_<sur><addsub>hn<mode>_insn_le\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+\t(vec_concat:<VNARROWQ2>\n+\t  (unspec:<VNARROWQ> [(match_operand:VQN 1 \"register_operand\" \"w\")\n+\t\t\t      (match_operand:VQN 2 \"register_operand\" \"w\")]\n+\t\t\t     ADDSUBHN)\n+\t  (match_operand:<VNARROWQ> 3 \"aarch64_simd_or_scalar_imm_zero\")))]\n+  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n+  \"<sur><addsub>hn\\\\t%0.<Vntype>, %1.<Vtype>, %2.<Vtype>\"\n+  [(set_attr \"type\" \"neon_<addsub>_halve_narrow_q\")]\n+)\n+\n+(define_insn \"aarch64_<sur><addsub>hn<mode>_insn_be\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+\t(vec_concat:<VNARROWQ2>\n+\t  (match_operand:<VNARROWQ> 3 \"aarch64_simd_or_scalar_imm_zero\")\n+\t  (unspec:<VNARROWQ> [(match_operand:VQN 1 \"register_operand\" \"w\")\n+\t\t\t      (match_operand:VQN 2 \"register_operand\" \"w\")]\n+\t\t\t     ADDSUBHN)))]\n+  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n   \"<sur><addsub>hn\\\\t%0.<Vntype>, %1.<Vtype>, %2.<Vtype>\"\n   [(set_attr \"type\" \"neon_<addsub>_halve_narrow_q\")]\n )\n \n+(define_expand \"aarch64_<sur><addsub>hn<mode>\"\n+  [(set (match_operand:<VNARROWQ> 0 \"register_operand\")\n+\t(unspec:<VNARROWQ> [(match_operand:VQN 1 \"register_operand\")\n+\t\t\t    (match_operand:VQN 2 \"register_operand\")]\n+\t\t\t   ADDSUBHN))]\n+  \"TARGET_SIMD\"\n+  {\n+    rtx tmp = gen_reg_rtx (<VNARROWQ2>mode);\n+    if (BYTES_BIG_ENDIAN)\n+      emit_insn (gen_aarch64_<sur><addsub>hn<mode>_insn_be (tmp, operands[1],\n+\t\t\t\toperands[2], CONST0_RTX (<VNARROWQ>mode)));\n+    else\n+      emit_insn (gen_aarch64_<sur><addsub>hn<mode>_insn_le (tmp, operands[1],\n+\t\t\t\toperands[2], CONST0_RTX (<VNARROWQ>mode)));\n+\n+    /* The intrinsic expects a narrow result, so emit a subreg that will get\n+       optimized away as appropriate.  */\n+    emit_move_insn (operands[0], lowpart_subreg (<VNARROWQ>mode, tmp,\n+\t\t\t\t\t\t <VNARROWQ2>mode));\n+    DONE;\n+  }\n+)\n+\n (define_insn \"aarch64_<sur><addsub>hn2<mode>_insn_le\"\n   [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n \t(vec_concat:<VNARROWQ2>"}, {"sha": "dd5ddf83b9934980c01dd9eddeca6041337c6c1d", "filename": "gcc/testsuite/gcc.target/aarch64/narrow_zero_high_half.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbfc149b639342a9555c60aa9ee787fb3d009316/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_zero_high_half.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbfc149b639342a9555c60aa9ee787fb3d009316/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_zero_high_half.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_zero_high_half.c?ref=dbfc149b639342a9555c60aa9ee787fb3d009316", "patch": "@@ -74,6 +74,42 @@ TEST_UNARY (vqmovn, uint8x16_t, uint16x8_t, u16, u8)\n TEST_UNARY (vqmovn, uint16x8_t, uint32x4_t, u32, u16)\n TEST_UNARY (vqmovn, uint32x4_t, uint64x2_t, u64, u32)\n \n+#define TEST_ARITH(name, rettype, intype, fs, rs) \\\n+  rettype test_ ## name ## _ ## fs ## _zero_high \\\n+\t\t(intype a, intype b) \\\n+\t{ \\\n+\t\treturn vcombine_ ## rs (name ## _ ## fs (a, b), \\\n+\t\t\t\t\tvdup_n_ ## rs (0)); \\\n+\t}\n+\n+TEST_ARITH (vaddhn, int8x16_t, int16x8_t, s16, s8)\n+TEST_ARITH (vaddhn, int16x8_t, int32x4_t, s32, s16)\n+TEST_ARITH (vaddhn, int32x4_t, int64x2_t, s64, s32)\n+TEST_ARITH (vaddhn, uint8x16_t, uint16x8_t, u16, u8)\n+TEST_ARITH (vaddhn, uint16x8_t, uint32x4_t, u32, u16)\n+TEST_ARITH (vaddhn, uint32x4_t, uint64x2_t, u64, u32)\n+\n+TEST_ARITH (vraddhn, int8x16_t, int16x8_t, s16, s8)\n+TEST_ARITH (vraddhn, int16x8_t, int32x4_t, s32, s16)\n+TEST_ARITH (vraddhn, int32x4_t, int64x2_t, s64, s32)\n+TEST_ARITH (vraddhn, uint8x16_t, uint16x8_t, u16, u8)\n+TEST_ARITH (vraddhn, uint16x8_t, uint32x4_t, u32, u16)\n+TEST_ARITH (vraddhn, uint32x4_t, uint64x2_t, u64, u32)\n+\n+TEST_ARITH (vsubhn, int8x16_t, int16x8_t, s16, s8)\n+TEST_ARITH (vsubhn, int16x8_t, int32x4_t, s32, s16)\n+TEST_ARITH (vsubhn, int32x4_t, int64x2_t, s64, s32)\n+TEST_ARITH (vsubhn, uint8x16_t, uint16x8_t, u16, u8)\n+TEST_ARITH (vsubhn, uint16x8_t, uint32x4_t, u32, u16)\n+TEST_ARITH (vsubhn, uint32x4_t, uint64x2_t, u64, u32)\n+\n+TEST_ARITH (vrsubhn, int8x16_t, int16x8_t, s16, s8)\n+TEST_ARITH (vrsubhn, int16x8_t, int32x4_t, s32, s16)\n+TEST_ARITH (vrsubhn, int32x4_t, int64x2_t, s64, s32)\n+TEST_ARITH (vrsubhn, uint8x16_t, uint16x8_t, u16, u8)\n+TEST_ARITH (vrsubhn, uint16x8_t, uint32x4_t, u32, u16)\n+TEST_ARITH (vrsubhn, uint32x4_t, uint64x2_t, u64, u32)\n+\n /* { dg-final { scan-assembler-not \"dup\\\\t\" } } */\n \n /* { dg-final { scan-assembler-times \"\\\\tshrn\\\\tv\" 6} }  */\n@@ -88,3 +124,7 @@ TEST_UNARY (vqmovn, uint32x4_t, uint64x2_t, u64, u32)\n /* { dg-final { scan-assembler-times \"\\\\tsqxtun\\\\tv\" 3} }  */\n /* { dg-final { scan-assembler-times \"\\\\tuqxtn\\\\tv\" 3} }  */\n /* { dg-final { scan-assembler-times \"\\\\tsqxtn\\\\tv\" 3} }  */\n+/* { dg-final { scan-assembler-times \"\\\\taddhn\\\\tv\" 6} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tsubhn\\\\tv\" 6} }  */\n+/* { dg-final { scan-assembler-times \"\\\\trsubhn\\\\tv\" 6} }  */\n+/* { dg-final { scan-assembler-times \"\\\\traddhn\\\\tv\" 6} }  */"}]}