{"sha": "1341376000609bcecf58fd137367f615471311d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM0MTM3NjAwMDYwOWJjZWNmNThmZDEzNzM2N2Y2MTU0NzEzMTFkMQ==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2004-06-03T20:25:29Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2004-06-03T20:25:29Z"}, "message": "* trans-array.c: Fix spelling in comments.\n\nFrom-SVN: r82603", "tree": {"sha": "05861ab8a8e2b3a02813024b26b156c0d9146908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05861ab8a8e2b3a02813024b26b156c0d9146908"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1341376000609bcecf58fd137367f615471311d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1341376000609bcecf58fd137367f615471311d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1341376000609bcecf58fd137367f615471311d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1341376000609bcecf58fd137367f615471311d1/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e18be1d424de3c50616989e01a10b2632eb595a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e18be1d424de3c50616989e01a10b2632eb595a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e18be1d424de3c50616989e01a10b2632eb595a3"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "fefddc2273e2b72ae333696992530f0a8e9875dd", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1341376000609bcecf58fd137367f615471311d1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1341376000609bcecf58fd137367f615471311d1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1341376000609bcecf58fd137367f615471311d1", "patch": "@@ -1,3 +1,7 @@\n+2004-06-03  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\t* trans-array.c: Fix spelling in comments.\n+\n 2004-06-02  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/15557"}, {"sha": "c1defa4e8f214c4955d6f27790eb8d4eabab20a3", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1341376000609bcecf58fd137367f615471311d1/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1341376000609bcecf58fd137367f615471311d1/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=1341376000609bcecf58fd137367f615471311d1", "patch": "@@ -98,7 +98,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n static gfc_ss *gfc_walk_subexpr (gfc_ss *, gfc_expr *);\n \n-/* The contents of this structure aren't actualy used, just the address.  */\n+/* The contents of this structure aren't actually used, just the address.  */\n static gfc_ss gfc_ss_terminator_var;\n gfc_ss * const gfc_ss_terminator = &gfc_ss_terminator_var;\n \n@@ -524,7 +524,7 @@ gfc_trans_allocate_temp_array (gfc_loopinfo * loop, gfc_ss_info * info,\n       info->dim[dim] = dim;\n     }\n \n-  /* Initialise the descriptor.  */\n+  /* Initialize the descriptor.  */\n   type =\n     gfc_get_array_type_bounds (eltype, info->dimen, loop->from, loop->to, 1);\n   desc = gfc_create_var (type, \"atmp\");\n@@ -591,7 +591,7 @@ gfc_put_offset_into_var (stmtblock_t * pblock, tree * poffset,\n \t\t\t tree * offsetvar)\n {\n   /* We should have already created the offset variable.  We cannot\n-     create it here because we may be in an inner scopde.  */\n+     create it here because we may be in an inner scope.  */\n   assert (*offsetvar != NULL_TREE);\n   gfc_add_modify_expr (pblock, *offsetvar, *poffset);\n   *poffset = *offsetvar;\n@@ -801,7 +801,7 @@ gfc_trans_array_constructor_value (stmtblock_t * pblock, tree type,\n \t  gfc_add_block_to_block (pblock, &se.pre);\n \t  loopvar = se.expr;\n \n-\t  /* Initialize thie loop.  */\n+\t  /* Initialize the loop.  */\n \t  gfc_init_se (&se, NULL);\n \t  gfc_conv_expr_val (&se, c->iterator->start);\n \t  gfc_add_block_to_block (pblock, &se.pre);\n@@ -955,7 +955,7 @@ gfc_trans_array_constructor (gfc_loopinfo * loop, gfc_ss * ss)\n   else\n     assert (INTEGER_CST_P (offset));\n #if 0\n-  /* Disable bound checking for now cos it's probably broken.  */\n+  /* Disable bound checking for now cause it's probably broken.  */\n   if (flag_bounds_check)\n     {\n       abort ();\n@@ -1102,7 +1102,7 @@ gfc_init_loopinfo (gfc_loopinfo * loop)\n   gfc_init_block (&loop->pre);\n   gfc_init_block (&loop->post);\n \n-  /* Initialy scalarize in order.  */\n+  /* Initially scalarize in order.  */\n   for (n = 0; n < GFC_MAX_DIMENSIONS; n++)\n     loop->order[n] = n;\n \n@@ -1134,7 +1134,7 @@ gfc_conv_array_data (tree descriptor)\n         return descriptor;\n       else\n         {\n-          /* Descritporless arrays.  */\n+          /* Descriptorless arrays.  */\n \t  return gfc_build_addr_expr (NULL, descriptor);\n         }\n     }\n@@ -1227,7 +1227,7 @@ gfc_conv_array_ubound (tree descriptor, int dim)\n \n static void\n gfc_conv_array_index_ref (gfc_se * se, tree pointer, tree * indices,\n-\t\t\t  tree offset, int dimen)\n+                         tree offset, int dimen)\n {\n   tree array;\n   tree tmp;\n@@ -1931,7 +1931,7 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n     gfc_todo_error (\"Unable to determine rank of expression\");\n \n \n-  /* loop over all the SS in the chain.  */\n+  /* Loop over all the SS in the chain.  */\n   for (ss = loop->ss; ss != gfc_ss_terminator; ss = ss->loop_chain)\n     {\n       switch (ss->type)\n@@ -2061,7 +2061,7 @@ gfc_could_be_alias (gfc_ss * lss, gfc_ss * rss)\n       && lsym->ts.type != BT_DERIVED)\n     return 0;\n \n-  /* For Derived types we must check all the component types.  We can ignore\n+  /* For derived types we must check all the component types.  We can ignore\n      array references as these will have the same base type as the previous\n      component ref.  */\n   for (lref = lss->expr->ref; lref != lss->data.info.ref; lref = lref->next)\n@@ -2148,7 +2148,7 @@ gfc_conv_resolve_dependencies (gfc_loopinfo * loop, gfc_ss * dest,\n \t\t    depends[n] = 1;\n \t         }\n \n-\t      /* Put all the dimensions with dependancies in the\n+\t      /* Put all the dimensions with dependencies in the\n \t\t innermost loops.  */\n \t      dim = 0;\n \t      for (n = 0; n < loop->dimen; n++)\n@@ -2224,10 +2224,10 @@ gfc_conv_loop_setup (gfc_loopinfo * loop)\n \n \t  if (ss->type == GFC_SS_CONSTRUCTOR)\n \t    {\n-\t      /* Try to figure out the size of the constructior.  */\n-\t      /* TODO: avoid this by making the prontend set the shape.  */\n+\t      /* Try to figure out the size of the constructor.  */\n+\t      /* TODO: avoid this by making the frontend set the shape.  */\n \t      gfc_get_array_cons_size (&i, ss->expr->value.constructor);\n-\t      /* A negative value meens we failed. */\n+\t      /* A negative value means we failed. */\n \t      if (mpz_sgn (i) > 0)\n \t\t{\n \t\t  mpz_sub_ui (i, i, 1);\n@@ -3376,7 +3376,7 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n   /* Associate the SS with the loop.  */\n   gfc_add_ss_to_loop (&loop, ss);\n \n-  /* Tell the scalarizer not to bother creating loop varliables, etc.  */\n+  /* Tell the scalarizer not to bother creating loop variables, etc.  */\n   if (!need_tmp)\n     loop.array_parameter = 1;\n   else\n@@ -4048,7 +4048,7 @@ gfc_walk_function_expr (gfc_ss * ss, gfc_expr * expr)\n \n   isym = expr->value.function.isym;\n \n-  /* Handle intrinsic functions seperately.  */\n+  /* Handle intrinsic functions separately.  */\n   if (isym)\n     return gfc_walk_intrinsic_function (ss, expr, isym);\n "}]}