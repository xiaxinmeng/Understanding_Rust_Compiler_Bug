{"sha": "f35da524a26d82cb1aa4a71ce48f92c64d506658", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM1ZGE1MjRhMjZkODJjYjFhYTRhNzFjZTQ4ZjkyYzY0ZDUwNjY1OA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-07-22T16:53:36Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-07-22T16:53:36Z"}, "message": "Adjust std::rotl, std::rotr etc to match final P0553R4 proposal\n\nThis proposal has now been accepted for C++20, with a few changes. This\npatch adjusts std::rotl and std::rotr to match the final specification\nand declares the additions for C++2a mode even when __STRICT_ANSI__ is\ndefined.\n\n\t* include/std/bit (__rotl, __rotr): Change second parameter from\n\tunsigned int to int and handle negative values.\n\t(rotl, rotr): Remove check for __STRICT_ANSI__. Change second\n\tparameter from unsigned int to int. Add nodiscard attribute.\n\t* testsuite/26_numerics/bit/bitops.rot/rotl.cc: Rename to ...\n\t* testsuite/26_numerics/bit/bit.rotate/rotl.cc: Here. Test negative\n\tshifts.\n\t* testsuite/26_numerics/bit/bitops.rot/rotr.cc: Rename to ...\n\t* testsuite/26_numerics/bit/bit.rotate/rotr.cc: Here. Test negative\n\tshifts.\n\nFrom-SVN: r273706", "tree": {"sha": "151353c32171fc0dc81dedc048464a67cf0a03b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/151353c32171fc0dc81dedc048464a67cf0a03b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f35da524a26d82cb1aa4a71ce48f92c64d506658", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f35da524a26d82cb1aa4a71ce48f92c64d506658", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f35da524a26d82cb1aa4a71ce48f92c64d506658", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f35da524a26d82cb1aa4a71ce48f92c64d506658/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "281ab2fbff7398643352e86fcddc83098efd6310", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/281ab2fbff7398643352e86fcddc83098efd6310", "html_url": "https://github.com/Rust-GCC/gccrs/commit/281ab2fbff7398643352e86fcddc83098efd6310"}], "stats": {"total": 91, "additions": 72, "deletions": 19}, "files": [{"sha": "6c6e41db8028a8133970473686be7e6dc0445b4e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f35da524a26d82cb1aa4a71ce48f92c64d506658/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f35da524a26d82cb1aa4a71ce48f92c64d506658/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f35da524a26d82cb1aa4a71ce48f92c64d506658", "patch": "@@ -1,5 +1,16 @@\n 2019-07-22  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/bit (__rotl, __rotr): Change second parameter from\n+\tunsigned int to int and handle negative values.\n+\t(rotl, rotr): Remove check for __STRICT_ANSI__. Change second\n+\tparameter from unsigned int to int. Add nodiscard attribute.\n+\t* testsuite/26_numerics/bit/bitops.rot/rotl.cc: Rename to ...\n+\t* testsuite/26_numerics/bit/bit.rotate/rotl.cc: Here. Test negative\n+\tshifts.\n+\t* testsuite/26_numerics/bit/bitops.rot/rotr.cc: Rename to ...\n+\t* testsuite/26_numerics/bit/bit.rotate/rotr.cc: Here. Test negative\n+\tshifts.\n+\n \t* include/std/bit (__ceil2): Make unrepresentable results undefined,\n \tas per P1355R2. Add debug assertion. Perform one left shift, not two,\n \tso that out of range values cause undefined behaviour. Ensure that"}, {"sha": "f17d2f1bd59cf72da8d9985fce99c0dd23d7d2c1", "filename": "libstdc++-v3/include/std/bit", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f35da524a26d82cb1aa4a71ce48f92c64d506658/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f35da524a26d82cb1aa4a71ce48f92c64d506658/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit?ref=f35da524a26d82cb1aa4a71ce48f92c64d506658", "patch": "@@ -42,20 +42,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp>\n     constexpr _Tp\n-    __rotl(_Tp __x, unsigned int __s) noexcept\n+    __rotl(_Tp __x, int __s) noexcept\n     {\n       constexpr auto _Nd = numeric_limits<_Tp>::digits;\n-      const unsigned __sN = __s % _Nd;\n-      return (__x << __sN) | (__x >> ((_Nd - __sN) % _Nd));\n+      const int __r = __s % _Nd;\n+      if (__r == 0)\n+\treturn __x;\n+      else if (__r > 0)\n+\treturn (__x << __r) | (__x >> ((_Nd - __r) % _Nd));\n+      else\n+\treturn (__x >> -__r) | (__x << ((_Nd + __r) % _Nd)); // rotr(x, -r)\n     }\n \n   template<typename _Tp>\n     constexpr _Tp\n-    __rotr(_Tp __x, unsigned int __s) noexcept\n+    __rotr(_Tp __x, int __s) noexcept\n     {\n       constexpr auto _Nd = numeric_limits<_Tp>::digits;\n-      const unsigned __sN = __s % _Nd;\n-      return (__x >> __sN) | (__x << ((_Nd - __sN) % _Nd));\n+      const int __r = __s % _Nd;\n+      if (__r == 0)\n+\treturn __x;\n+      else if (__r > 0)\n+\treturn (__x >> __r) | (__x << ((_Nd - __r) % _Nd));\n+      else\n+\treturn (__x << -__r) | (__x >> ((_Nd + __r) % _Nd)); // rotl(x, -r)\n     }\n \n   template<typename _Tp>\n@@ -244,20 +254,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     using _If_is_unsigned_integer\n       = enable_if_t<__is_unsigned_integer<_Tp>::value, _Up>;\n \n-#if ! __STRICT_ANSI__\n-  // [bitops.rot], rotating\n+  // [bit.rot], rotating\n \n   template<typename _Tp>\n-    constexpr _If_is_unsigned_integer<_Tp>\n-    rotl(_Tp __x, unsigned int __s) noexcept\n+    [[nodiscard]] constexpr _If_is_unsigned_integer<_Tp>\n+    rotl(_Tp __x, int __s) noexcept\n     { return std::__rotl(__x, __s); }\n \n   template<typename _Tp>\n-    constexpr _If_is_unsigned_integer<_Tp>\n-    rotr(_Tp __x, unsigned int __s) noexcept\n+    [[nodiscard]] constexpr _If_is_unsigned_integer<_Tp>\n+    rotr(_Tp __x, int __s) noexcept\n     { return std::__rotr(__x, __s); }\n \n-  // [bitops.count], counting\n+  // [bit.count], counting\n \n   template<typename _Tp>\n     constexpr _If_is_unsigned_integer<_Tp, int>\n@@ -283,9 +292,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr _If_is_unsigned_integer<_Tp, int>\n     popcount(_Tp __x) noexcept\n     { return std::__popcount(__x); }\n-#endif\n \n-  // Integral power-of-two operations\n+  // [bit.pow.two], integral powers of 2\n \n   template<typename _Tp>\n     constexpr _If_is_unsigned_integer<_Tp, bool>"}, {"sha": "dfceca071ae12ed2d445fc770a6a3c1af33dcf1f", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.rotate/rotl.cc", "status": "renamed", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f35da524a26d82cb1aa4a71ce48f92c64d506658/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.rotate%2Frotl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f35da524a26d82cb1aa4a71ce48f92c64d506658/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.rotate%2Frotl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.rotate%2Frotl.cc?ref=f35da524a26d82cb1aa4a71ce48f92c64d506658", "patch": "@@ -20,12 +20,27 @@\n \n #include <bit>\n \n+template<typename UInt>\n+constexpr bool\n+test_negative_shifts()\n+{\n+  constexpr unsigned digits = std::numeric_limits<UInt>::digits;\n+\n+  UInt xarr[] = { (UInt)-1, 0, 1, 3, 6, 7, 0x10, 0x11, 0x22, 0x44, 0x80 };\n+  int sarr[] = { 1, 4, 5, digits - 1, digits };\n+  for (UInt x : xarr)\n+    for (int s : sarr)\n+      if (std::rotl(x, -s) != std::rotr(x, s))\n+\treturn false;\n+  return true;\n+}\n+\n template<typename UInt>\n constexpr auto\n test(UInt x)\n--> decltype(std::rotl(x, 0u))\n+-> decltype(std::rotl(x, 0))\n {\n-  static_assert( noexcept(std::rotl(x, 0u)) );\n+  static_assert( noexcept(std::rotl(x, 0)) );\n \n   constexpr unsigned digits = std::numeric_limits<UInt>::digits;\n \n@@ -63,6 +78,8 @@ test(UInt x)\n     static_assert( std::rotl((UInt)0b1010'0101, 4) == 0b1010'0101'0000 );\n   }\n \n+  static_assert( test_negative_shifts<UInt>() );\n+\n   return true;\n }\n ", "previous_filename": "libstdc++-v3/testsuite/26_numerics/bit/bitops.rot/rotl.cc"}, {"sha": "f3bb94b1ef4c176648d880a625a2d34ef29c589c", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.rotate/rotr.cc", "status": "renamed", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f35da524a26d82cb1aa4a71ce48f92c64d506658/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.rotate%2Frotr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f35da524a26d82cb1aa4a71ce48f92c64d506658/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.rotate%2Frotr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.rotate%2Frotr.cc?ref=f35da524a26d82cb1aa4a71ce48f92c64d506658", "patch": "@@ -20,12 +20,27 @@\n \n #include <bit>\n \n+template<typename UInt>\n+constexpr bool\n+test_negative_shifts()\n+{\n+  constexpr unsigned digits = std::numeric_limits<UInt>::digits;\n+\n+  UInt xarr[] = { (UInt)-1, 0, 1, 3, 6, 7, 0x10, 0x11, 0x22, 0x44, 0x80 };\n+  int sarr[] = { 1, 4, 5, digits - 1, digits };\n+  for (UInt x : xarr)\n+    for (int s : sarr)\n+      if (std::rotr(x, -s) != std::rotl(x, s))\n+\treturn false;\n+  return true;\n+}\n+\n template<typename UInt>\n constexpr auto\n test(UInt x)\n--> decltype(std::rotr(x, 0u))\n+-> decltype(std::rotr(x, 0))\n {\n-  static_assert( noexcept(std::rotr(x, 0u)) );\n+  static_assert( noexcept(std::rotr(x, 0)) );\n \n   constexpr unsigned digits = std::numeric_limits<UInt>::digits;\n \n@@ -65,6 +80,8 @@ test(UInt x)\n \t\t\t      == (0b1010 | ((UInt)0b0101 << digits - 4)) );\n   }\n \n+  static_assert( test_negative_shifts<UInt>() );\n+\n   return true;\n }\n ", "previous_filename": "libstdc++-v3/testsuite/26_numerics/bit/bitops.rot/rotr.cc"}]}