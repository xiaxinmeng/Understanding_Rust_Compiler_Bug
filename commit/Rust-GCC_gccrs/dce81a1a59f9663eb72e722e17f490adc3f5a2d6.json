{"sha": "dce81a1a59f9663eb72e722e17f490adc3f5a2d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNlODFhMWE1OWY5NjYzZWI3MmU3MjJlMTdmNDkwYWRjM2Y1YTJkNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-09-27T13:30:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-09-27T13:30:10Z"}, "message": "extend.texi (tls_model): Document.\n\n\t* doc/extend.texi (tls_model): Document.\n\t* varasm.c (decl_tls_model): New.\n\t* c-common.c (handle_tls_model_attribute): New.\n\t(c_common_attribute_table): Add tls_model.\n\t* config/alpha/alpha.c (alpha_encode_section_info): Use\n\tdecl_tls_model.\n\t* flags.h (enum tls_model, flag_tls_default): Move...\n\t* tree.h (enum tls_model, flag_tls_default): ...here.\n\t(decl_tls_model): New prototype.\n\t* config/ia64/ia64.c (ia64_encode_section_info): Likewise.\n\t* config/i386/i386.c (ix86_encode_section_info): Likewise.\n\t* config/i386/i386.md (tls_global_dynamic, tls_local_dynamic_base):\n\tAllow !flag_pic.\n\nFrom-SVN: r57588", "tree": {"sha": "b7ac095e3e844e739365675e99f4e724059e2a38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7ac095e3e844e739365675e99f4e724059e2a38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dce81a1a59f9663eb72e722e17f490adc3f5a2d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dce81a1a59f9663eb72e722e17f490adc3f5a2d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dce81a1a59f9663eb72e722e17f490adc3f5a2d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dce81a1a59f9663eb72e722e17f490adc3f5a2d6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e9e1e0a42eff5ec265470b7e8928cb3b3ad2d70"}], "stats": {"total": 213, "additions": 146, "deletions": 67}, "files": [{"sha": "97e46f9ee4fed1a1696b5d35f8b163d7e321209b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dce81a1a59f9663eb72e722e17f490adc3f5a2d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dce81a1a59f9663eb72e722e17f490adc3f5a2d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dce81a1a59f9663eb72e722e17f490adc3f5a2d6", "patch": "@@ -1,3 +1,19 @@\n+2002-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* doc/extend.texi (tls_model): Document.\n+\t* varasm.c (decl_tls_model): New.\n+\t* c-common.c (handle_tls_model_attribute): New.\n+\t(c_common_attribute_table): Add tls_model.\n+\t* config/alpha/alpha.c (alpha_encode_section_info): Use\n+\tdecl_tls_model.\n+\t* flags.h (enum tls_model, flag_tls_default): Move...\n+\t* tree.h (enum tls_model, flag_tls_default): ...here.\n+\t(decl_tls_model): New prototype.\n+\t* config/ia64/ia64.c (ia64_encode_section_info): Likewise.\n+\t* config/i386/i386.c (ix86_encode_section_info): Likewise.\n+\t* config/i386/i386.md (tls_global_dynamic, tls_local_dynamic_base):\n+\tAllow !flag_pic.\n+\n 2002-09-27  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* LANGUAGES: Follow spelling conventions."}, {"sha": "b3358c2c1c2edca2da5643926bf6d39d5fb08f26", "filename": "gcc/c-common.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dce81a1a59f9663eb72e722e17f490adc3f5a2d6/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dce81a1a59f9663eb72e722e17f490adc3f5a2d6/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=dce81a1a59f9663eb72e722e17f490adc3f5a2d6", "patch": "@@ -749,6 +749,8 @@ static tree handle_alias_attribute\tPARAMS ((tree *, tree, tree, int,\n \t\t\t\t\t\t bool *));\n static tree handle_visibility_attribute\tPARAMS ((tree *, tree, tree, int,\n \t\t\t\t\t\t bool *));\n+static tree handle_tls_model_attribute\tPARAMS ((tree *, tree, tree, int,\n+\t\t\t\t\t\t bool *));\n static tree handle_no_instrument_function_attribute PARAMS ((tree *, tree,\n \t\t\t\t\t\t\t     tree, int,\n \t\t\t\t\t\t\t     bool *));\n@@ -847,6 +849,8 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_vector_size_attribute },\n   { \"visibility\",\t      1, 1, true,  false, false,\n \t\t\t      handle_visibility_attribute },\n+  { \"tls_model\",\t      1, 1, true,  false, false,\n+\t\t\t      handle_tls_model_attribute },\n   { \"nonnull\",                0, -1, false, true, true,\n \t\t\t      handle_nonnull_attribute },\n   { \"nothrow\",                0, 0, true,  false, false,\n@@ -5895,6 +5899,49 @@ handle_visibility_attribute (node, name, args, flags, no_add_attrs)\n   return NULL_TREE;\n }\n \n+/* Handle an \"tls_model\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_tls_model_attribute (node, name, args, flags, no_add_attrs)\n+     tree *node;\n+     tree name;\n+     tree args;\n+     int flags ATTRIBUTE_UNUSED;\n+     bool *no_add_attrs;\n+{\n+  tree decl = *node;\n+\n+  if (! DECL_THREAD_LOCAL (decl))\n+    {\n+      warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n+      *no_add_attrs = true;\n+    }\n+  else\n+    {\n+      tree id;\n+\n+      id = TREE_VALUE (args);\n+      if (TREE_CODE (id) != STRING_CST)\n+\t{\n+\t  error (\"tls_model arg not a string\");\n+\t  *no_add_attrs = true;\n+\t  return NULL_TREE;\n+\t}\n+      if (strcmp (TREE_STRING_POINTER (id), \"local-exec\")\n+\t  && strcmp (TREE_STRING_POINTER (id), \"initial-exec\")\n+\t  && strcmp (TREE_STRING_POINTER (id), \"local-dynamic\")\n+\t  && strcmp (TREE_STRING_POINTER (id), \"global-dynamic\"))\n+\t{\n+\t  error (\"tls_model arg must be one of \\\"local-exec\\\", \\\"initial-exec\\\", \\\"local-dynamic\\\" or \\\"global-dynamic\\\"\");\n+\t  *no_add_attrs = true;\n+\t  return NULL_TREE;\n+\t}\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"no_instrument_function\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "b35e3f9c85d2184bdc8a0877cc68c03c6c7dfad3", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dce81a1a59f9663eb72e722e17f490adc3f5a2d6/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dce81a1a59f9663eb72e722e17f490adc3f5a2d6/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=dce81a1a59f9663eb72e722e17f490adc3f5a2d6", "patch": "@@ -1880,22 +1880,7 @@ alpha_encode_section_info (decl, first)\n   /* Care for TLS variables.  */\n   if (TREE_CODE (decl) == VAR_DECL && DECL_THREAD_LOCAL (decl))\n     {\n-      enum tls_model kind;\n-      if (!flag_pic)\n-\t{\n-\t  if (is_local)\n-\t    kind = TLS_MODEL_LOCAL_EXEC;\n-\t  else\n-\t    kind = TLS_MODEL_INITIAL_EXEC;\n-\t}\n-      else if (is_local)\n-\tkind = TLS_MODEL_LOCAL_DYNAMIC;\n-      else\n-\tkind = TLS_MODEL_GLOBAL_DYNAMIC;\n-      if (kind < flag_tls_default)\n-\tkind = flag_tls_default;\n-\n-      switch (kind)\n+      switch (decl_tls_model (decl))\n \t{\n \tcase TLS_MODEL_GLOBAL_DYNAMIC:\n \t  encoding = 'G';"}, {"sha": "f27f0a25e15f2fc338b2e2e3b9abfcf9fee39a1c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dce81a1a59f9663eb72e722e17f490adc3f5a2d6/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dce81a1a59f9663eb72e722e17f490adc3f5a2d6/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=dce81a1a59f9663eb72e722e17f490adc3f5a2d6", "patch": "@@ -5542,23 +5542,7 @@ ix86_encode_section_info (decl, first)\n       const char *symbol_str;\n       char *newstr;\n       size_t len;\n-      enum tls_model kind;\n-\n-      if (!flag_pic)\n-\t{\n-\t  if (local_p)\n-\t    kind = TLS_MODEL_LOCAL_EXEC;\n-\t  else\n-\t    kind = TLS_MODEL_INITIAL_EXEC;\n-\t}\n-      /* Local dynamic is inefficient when we're not combining the\n-\t parts of the address.  */\n-      else if (optimize && local_p)\n-\tkind = TLS_MODEL_LOCAL_DYNAMIC;\n-      else\n-\tkind = TLS_MODEL_GLOBAL_DYNAMIC;\n-      if (kind < flag_tls_default)\n-\tkind = flag_tls_default;\n+      enum tls_model kind = decl_tls_model (decl);\n \n       symbol_str = XSTR (symbol, 0);\n "}, {"sha": "f616ed2f4c9e5f77be690fe037a74e1a3c04548e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dce81a1a59f9663eb72e722e17f490adc3f5a2d6/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dce81a1a59f9663eb72e722e17f490adc3f5a2d6/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=dce81a1a59f9663eb72e722e17f490adc3f5a2d6", "patch": "@@ -13822,9 +13822,13 @@\n \t      (clobber (reg:CC 17))])]\n   \"\"\n {\n-  if (!flag_pic)\n-    abort ();\n-  operands[2] = pic_offset_table_rtx;\n+  if (flag_pic)\n+    operands[2] = pic_offset_table_rtx;\n+  else\n+    {\n+      operands[2] = gen_reg_rtx (Pmode);\n+      emit_insn (gen_set_got (operands[2]));\n+    }\n   operands[3] = ix86_tls_get_addr ();\n })\n \n@@ -13864,8 +13868,13 @@\n \t      (clobber (reg:CC 17))])]\n   \"\"\n {\n-  if (!flag_pic)\n-    abort ();\n+  if (flag_pic)\n+    operands[2] = pic_offset_table_rtx;\n+  else\n+    {\n+      operands[2] = gen_reg_rtx (Pmode);\n+      emit_insn (gen_set_got (operands[2]));\n+    }\n   operands[1] = pic_offset_table_rtx;\n   operands[2] = ix86_tls_get_addr ();\n })"}, {"sha": "0db9878023eb0ea1f4ec4d82affb0504eb72e08b", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dce81a1a59f9663eb72e722e17f490adc3f5a2d6/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dce81a1a59f9663eb72e722e17f490adc3f5a2d6/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=dce81a1a59f9663eb72e722e17f490adc3f5a2d6", "patch": "@@ -7142,24 +7142,7 @@ ia64_encode_section_info (decl, first)\n   is_local = (*targetm.binds_local_p) (decl);\n \n   if (TREE_CODE (decl) == VAR_DECL && DECL_THREAD_LOCAL (decl))\n-    {\n-      enum tls_model kind;\n-      if (!flag_pic)\n-\t{\n-\t  if (is_local)\n-\t    kind = TLS_MODEL_LOCAL_EXEC;\n-\t  else\n-\t    kind = TLS_MODEL_INITIAL_EXEC;\n-\t}\n-      else if (is_local)\n-\tkind = TLS_MODEL_LOCAL_DYNAMIC;\n-      else\n-\tkind = TLS_MODEL_GLOBAL_DYNAMIC;\n-      if (kind < flag_tls_default)\n-\tkind = flag_tls_default;\n-\n-      encoding = \" GLil\"[kind];\n-    }\n+    encoding = \" GLil\"[decl_tls_model (decl)];\n   /* Determine if DECL will wind up in .sdata/.sbss.  */\n   else if (is_local && ia64_in_small_data_p (decl))\n     encoding = 's';"}, {"sha": "a95098fc1c7f164fe8269a214cc6a227fb32e96b", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dce81a1a59f9663eb72e722e17f490adc3f5a2d6/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dce81a1a59f9663eb72e722e17f490adc3f5a2d6/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=dce81a1a59f9663eb72e722e17f490adc3f5a2d6", "patch": "@@ -2332,6 +2332,15 @@ since it is known that the calling function loaded the correct value.\n \n Not all ELF targets support this attribute.\n \n+@item tls_model (\"@var{tls_model}\")\n+@cindex @code{tls_model} attribute\n+The @code{tls_model} attribute sets thread-local storage model\n+(@pxref{Thread-Local}) of a particular @code{__thread} variable,\n+overriding @code{-ftls-model=} command line switch on a per-variable\n+basis.\n+The @var{tls_model} argument should be one of @code{global-dynamic},\n+@code{local-dynamic}, @code{initial-exec} or @code{local-exec}.\n+\n @item regparm (@var{number})\n @cindex functions that are passed arguments in registers on the 386\n On the Intel 386, the @code{regparm} attribute causes the compiler to"}, {"sha": "1578a2499cdc08b2abf2070215e7e1e0b11b1629", "filename": "gcc/flags.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dce81a1a59f9663eb72e722e17f490adc3f5a2d6/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dce81a1a59f9663eb72e722e17f490adc3f5a2d6/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=dce81a1a59f9663eb72e722e17f490adc3f5a2d6", "patch": "@@ -467,17 +467,6 @@ extern int flag_pedantic_errors;\n \n extern int flag_pic;\n \n-/* Set to the default thread-local storage (tls) model to use.  */\n-\n-enum tls_model {\n-  TLS_MODEL_GLOBAL_DYNAMIC = 1,\n-  TLS_MODEL_LOCAL_DYNAMIC,\n-  TLS_MODEL_INITIAL_EXEC,\n-  TLS_MODEL_LOCAL_EXEC\n-};\n-\n-extern enum tls_model flag_tls_default;\n-\n /* Nonzero means generate extra code for exception handling and enable\n    exception handling.  */\n "}, {"sha": "e9647816378f1e633d891b155eba467e0afd3b7d", "filename": "gcc/tree.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dce81a1a59f9663eb72e722e17f490adc3f5a2d6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dce81a1a59f9663eb72e722e17f490adc3f5a2d6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=dce81a1a59f9663eb72e722e17f490adc3f5a2d6", "patch": "@@ -2102,7 +2102,17 @@ extern GTY(()) tree integer_types[itk_none];\n #define long_unsigned_type_node\t\tinteger_types[itk_unsigned_long]\n #define long_long_integer_type_node\tinteger_types[itk_long_long]\n #define long_long_unsigned_type_node\tinteger_types[itk_unsigned_long_long]\n+\f\n+/* Set to the default thread-local storage (tls) model to use.  */\n+\n+enum tls_model {\n+  TLS_MODEL_GLOBAL_DYNAMIC = 1,\n+  TLS_MODEL_LOCAL_DYNAMIC,\n+  TLS_MODEL_INITIAL_EXEC,\n+  TLS_MODEL_LOCAL_EXEC\n+};\n \n+extern enum tls_model flag_tls_default;\n \f\n #define NULL_TREE (tree) NULL\n \n@@ -2988,6 +2998,7 @@ extern void make_decl_rtl\t\tPARAMS ((tree, const char *));\n extern void make_decl_one_only\t\tPARAMS ((tree));\n extern int supports_one_only\t\tPARAMS ((void));\n extern void variable_section\t\tPARAMS ((tree, int));\n+enum tls_model decl_tls_model\t\tPARAMS ((tree));\n \n /* In fold-const.c */\n extern int div_and_round_double\t\tPARAMS ((enum tree_code, int,"}, {"sha": "d24e914811c7b5341a16771e2b5d1ef49355747c", "filename": "gcc/varasm.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dce81a1a59f9663eb72e722e17f490adc3f5a2d6/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dce81a1a59f9663eb72e722e17f490adc3f5a2d6/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=dce81a1a59f9663eb72e722e17f490adc3f5a2d6", "patch": "@@ -4726,6 +4726,52 @@ init_varasm_once ()\n   const_alias_set = new_alias_set ();\n }\n \n+enum tls_model\n+decl_tls_model (decl)\n+     tree decl;\n+{\n+  enum tls_model kind;\n+  tree attr = lookup_attribute (\"tls_model\", DECL_ATTRIBUTES (decl));\n+  bool is_local;\n+\n+  if (attr)\n+    {\n+      attr = TREE_VALUE (TREE_VALUE (attr));\n+      if (TREE_CODE (attr) != STRING_CST)\n+\tabort ();\n+      if (!strcmp (TREE_STRING_POINTER (attr), \"local-exec\"))\n+\tkind = TLS_MODEL_LOCAL_EXEC;\n+      else if (!strcmp (TREE_STRING_POINTER (attr), \"initial-exec\"))\n+\tkind = TLS_MODEL_INITIAL_EXEC;\n+      else if (!strcmp (TREE_STRING_POINTER (attr), \"local-dynamic\"))\n+\tkind = optimize ? TLS_MODEL_LOCAL_DYNAMIC : TLS_MODEL_GLOBAL_DYNAMIC;\n+      else if (!strcmp (TREE_STRING_POINTER (attr), \"global-dynamic\"))\n+\tkind = TLS_MODEL_GLOBAL_DYNAMIC;\n+      else\n+\tabort ();\n+      return kind;\n+    }\n+\n+  is_local = (*targetm.binds_local_p) (decl);\n+  if (!flag_pic)\n+    {\n+      if (is_local)\n+\tkind = TLS_MODEL_LOCAL_EXEC;\n+      else\n+\tkind = TLS_MODEL_INITIAL_EXEC;\n+    }\n+  /* Local dynamic is inefficient when we're not combining the\n+     parts of the address.  */\n+  else if (optimize && is_local)\n+    kind = TLS_MODEL_LOCAL_DYNAMIC;\n+  else\n+    kind = TLS_MODEL_GLOBAL_DYNAMIC;\n+  if (kind < flag_tls_default)\n+    kind = flag_tls_default;\n+\n+  return kind;\n+}\n+\n /* Select a set of attributes for section NAME based on the properties\n    of DECL and whether or not RELOC indicates that DECL's initializer\n    might contain runtime relocations."}]}