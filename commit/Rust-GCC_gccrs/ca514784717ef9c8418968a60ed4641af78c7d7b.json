{"sha": "ca514784717ef9c8418968a60ed4641af78c7d7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E1MTQ3ODQ3MTdlZjljODQxODk2OGE2MGVkNDY0MWFmNzhjN2Q3Yg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-02-12T14:57:11Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-02-13T10:08:03Z"}, "message": "Add ReferenceType with BorrowExpr and DereferenceExpr\n\nThis also adds in the mising InferenceType _ which was mostly implemented\nbefore as part of Data Structures 1.\n\nWe create GENERIC REFERENCE_TYPES for these this is the building block\nto finish work on mutability rules and pointers.\n\nFixes: #196\nAddresses: #169 #170", "tree": {"sha": "75434335e1d147047d086441a01323c229bbb601", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75434335e1d147047d086441a01323c229bbb601"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca514784717ef9c8418968a60ed4641af78c7d7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca514784717ef9c8418968a60ed4641af78c7d7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca514784717ef9c8418968a60ed4641af78c7d7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca514784717ef9c8418968a60ed4641af78c7d7b/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ae8d55860cbe95f80d5e5c76ca71883dbde0e10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10"}], "stats": {"total": 388, "additions": 370, "deletions": 18}, "files": [{"sha": "0afa46b44029b5471c5e33976fb08bc832e3cf62", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=ca514784717ef9c8418968a60ed4641af78c7d7b", "patch": "@@ -288,6 +288,10 @@ class BorrowExpr : public OperatorExpr\n     return main_or_left_expr;\n   }\n \n+  bool get_is_mut () const { return is_mut; }\n+\n+  bool get_is_double_borrow () const { return double_borrow; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "a9c19669af607267da9a9a5c3e04629a5a2094aa", "filename": "gcc/rust/ast/rust-type.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Fast%2Frust-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Fast%2Frust-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-type.h?ref=ca514784717ef9c8418968a60ed4641af78c7d7b", "patch": "@@ -576,6 +576,12 @@ class ReferenceType : public TypeNoBounds\n     return type;\n   }\n \n+  bool get_has_mut () const { return has_mut; }\n+\n+  Lifetime &get_lifetime () { return lifetime; }\n+\n+  std::unique_ptr<TypeNoBounds> &get_base_type () { return type; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "b50e103b341c6a6e75b325b3c0e05241f1ec8c3a", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=ca514784717ef9c8418968a60ed4641af78c7d7b", "patch": "@@ -445,6 +445,13 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n     translated = compiled_type;\n   }\n \n+  void visit (TyTy::ReferenceType &type) override\n+  {\n+    Btype *base_compiled_type\n+      = TyTyResolveCompile::compile (ctx, type.get_base ());\n+    translated = ctx->get_backend ()->reference_type (base_compiled_type);\n+  }\n+\n private:\n   TyTyResolveCompile (Context *ctx) : ctx (ctx) {}\n "}, {"sha": "842804dbdb9ddaed24fe7c201fe67e845a8281b4", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=ca514784717ef9c8418968a60ed4641af78c7d7b", "patch": "@@ -816,6 +816,37 @@ class CompileExpr : public HIRCompileBase\n     ctx->add_statement (goto_label);\n   }\n \n+  void visit (HIR::BorrowExpr &expr)\n+  {\n+    Bexpression *main_expr\n+      = CompileExpr::Compile (expr.get_expr ().get (), ctx);\n+\n+    translated\n+      = ctx->get_backend ()->address_expression (main_expr, expr.get_locus ());\n+  }\n+\n+  void visit (HIR::DereferenceExpr &expr)\n+  {\n+    Bexpression *main_expr\n+      = CompileExpr::Compile (expr.get_expr ().get (), ctx);\n+\n+    TyTy::TyBase *tyty = nullptr;\n+    if (!ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (),\n+\t\t\t\t\t &tyty))\n+      {\n+\trust_fatal_error (expr.get_locus (),\n+\t\t\t  \"did not resolve type for this TupleExpr\");\n+\treturn;\n+      }\n+\n+    Btype *expected_type = TyTyResolveCompile::compile (ctx, tyty);\n+    bool known_valid = true;\n+    translated\n+      = ctx->get_backend ()->indirect_expression (expected_type, main_expr,\n+\t\t\t\t\t\t  known_valid,\n+\t\t\t\t\t\t  expr.get_locus ());\n+  }\n+\n private:\n   CompileExpr (Context *ctx) : HIRCompileBase (ctx), translated (nullptr) {}\n "}, {"sha": "eb8a96185b7431bc3902b45fe4718e39c51a664a", "filename": "gcc/rust/backend/rust-compile-tyty.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h?ref=ca514784717ef9c8418968a60ed4641af78c7d7b", "patch": "@@ -56,6 +56,8 @@ class TyTyCompile : public TyTy::TyVisitor\n \n   void visit (TyTy::ArrayType &) override { gcc_unreachable (); }\n \n+  void visit (TyTy::ReferenceType &) override { gcc_unreachable (); }\n+\n   void visit (TyTy::UnitType &) override { translated = backend->void_type (); }\n \n   void visit (TyTy::FnType &type) override"}, {"sha": "ea07f7375021ad87c0ab4a4b96e0da473ae7e8c0", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=ca514784717ef9c8418968a60ed4641af78c7d7b", "patch": "@@ -740,6 +740,43 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t\t\tstd::move (outer_attribs));\n   }\n \n+  void visit (AST::BorrowExpr &expr)\n+  {\n+    std::vector<HIR::Attribute> outer_attribs;\n+\n+    HIR::Expr *borrow_lvalue\n+      = ASTLoweringExpr::translate (expr.get_borrowed_expr ().get ());\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n+    translated\n+      = new HIR::BorrowExpr (mapping,\n+\t\t\t     std::unique_ptr<HIR::Expr> (borrow_lvalue),\n+\t\t\t     expr.get_is_mut (), expr.get_is_double_borrow (),\n+\t\t\t     std::move (outer_attribs), expr.get_locus ());\n+  }\n+\n+  void visit (AST::DereferenceExpr &expr)\n+  {\n+    std::vector<HIR::Attribute> outer_attribs;\n+\n+    HIR::Expr *dref_lvalue\n+      = ASTLoweringExpr::translate (expr.get_dereferenced_expr ().get ());\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n+    translated\n+      = new HIR::DereferenceExpr (mapping,\n+\t\t\t\t  std::unique_ptr<HIR::Expr> (dref_lvalue),\n+\t\t\t\t  std::move (outer_attribs), expr.get_locus ());\n+  }\n+\n private:\n   ASTLoweringExpr ()\n     : ASTLoweringBase (), translated (nullptr),"}, {"sha": "425d5c19c1e523888014223c98a2aedcdc20ea97", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=ca514784717ef9c8418968a60ed4641af78c7d7b", "patch": "@@ -34,6 +34,7 @@ class ASTLoweringType : public ASTLoweringBase\n     ASTLoweringType resolver;\n     type->accept_vis (resolver);\n \n+    rust_assert (resolver.translated != nullptr);\n     resolver.mappings->insert_location (\n       resolver.translated->get_mappings ().get_crate_num (),\n       resolver.translated->get_mappings ().get_hirid (),\n@@ -172,8 +173,43 @@ class ASTLoweringType : public ASTLoweringBase\n \t\t\t       translated);\n   }\n \n+  void visit (AST::ReferenceType &type)\n+  {\n+    HIR::Lifetime lifetime = lower_lifetime (type.get_lifetime ());\n+\n+    HIR::Type *base_type\n+      = ASTLoweringType::translate (type.get_base_type ().get ());\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, type.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n+\n+    translated = new HIR::ReferenceType (mapping, type.get_has_mut (),\n+\t\t\t\t\t std::unique_ptr<HIR::Type> (base_type),\n+\t\t\t\t\t type.get_locus (), lifetime);\n+\n+    mappings->insert_hir_type (mapping.get_crate_num (), mapping.get_hirid (),\n+\t\t\t       translated);\n+  }\n+\n+  void visit (AST::InferredType &type)\n+  {\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, type.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n+\n+    translated = new HIR::InferredType (mapping, type.get_locus ());\n+\n+    mappings->insert_hir_type (mapping.get_crate_num (), mapping.get_hirid (),\n+\t\t\t       translated);\n+  }\n+\n private:\n-  ASTLoweringType () : translated (nullptr), translated_segment (nullptr) {}\n+  ASTLoweringType ()\n+    : ASTLoweringBase (), translated (nullptr), translated_segment (nullptr)\n+  {}\n \n   HIR::Type *translated;\n   HIR::TypePathSegment *translated_segment;"}, {"sha": "c5c80add691a76be42b8153521db6e4e26dfcdef", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=ca514784717ef9c8418968a60ed4641af78c7d7b", "patch": "@@ -244,6 +244,8 @@ class OperatorExpr : public ExprWithoutBlock\n public:\n   Location get_locus () const { return locus; }\n   Location get_locus_slow () const override { return get_locus (); }\n+\n+  std::unique_ptr<Expr> &get_expr () { return main_or_left_expr; }\n };\n \n /* Unary prefix & or &mut (or && and &&mut) borrow operator. Cannot be\n@@ -267,6 +269,9 @@ class BorrowExpr : public OperatorExpr\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  bool get_is_mut () const { return is_mut; }\n+  bool get_is_double_borrow () const { return double_borrow; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "47850ae0c8220cb32008c86f554655c42c726ed6", "filename": "gcc/rust/hir/tree/rust-hir-type.h", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h?ref=ca514784717ef9c8418968a60ed4641af78c7d7b", "patch": "@@ -518,7 +518,7 @@ class ReferenceType : public TypeNoBounds\n   Lifetime lifetime;\n \n   bool has_mut;\n-  std::unique_ptr<TypeNoBounds> type;\n+  std::unique_ptr<Type> type;\n   Location locus;\n \n public:\n@@ -530,7 +530,7 @@ class ReferenceType : public TypeNoBounds\n \n   // Constructor\n   ReferenceType (Analysis::NodeMapping mappings, bool is_mut,\n-\t\t std::unique_ptr<TypeNoBounds> type_no_bounds, Location locus,\n+\t\t std::unique_ptr<Type> type_no_bounds, Location locus,\n \t\t Lifetime lifetime)\n     : TypeNoBounds (mappings), lifetime (std::move (lifetime)),\n       has_mut (is_mut), type (std::move (type_no_bounds)), locus (locus)\n@@ -539,7 +539,7 @@ class ReferenceType : public TypeNoBounds\n   // Copy constructor with custom clone method\n   ReferenceType (ReferenceType const &other)\n     : TypeNoBounds (other.mappings), lifetime (other.lifetime),\n-      has_mut (other.has_mut), type (other.type->clone_type_no_bounds ()),\n+      has_mut (other.has_mut), type (other.type->clone_type ()),\n       locus (other.locus)\n   {}\n \n@@ -549,7 +549,7 @@ class ReferenceType : public TypeNoBounds\n     mappings = other.mappings;\n     lifetime = other.lifetime;\n     has_mut = other.has_mut;\n-    type = other.type->clone_type_no_bounds ();\n+    type = other.type->clone_type ();\n     locus = other.locus;\n \n     return *this;\n@@ -565,6 +565,12 @@ class ReferenceType : public TypeNoBounds\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  Lifetime &get_lifetime () { return lifetime; }\n+\n+  bool get_has_mut () const { return has_mut; }\n+\n+  std::unique_ptr<Type> &get_base_type () { return type; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "b8cf4de65c2c4590bafb70a0fa864ab99601168d", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=ca514784717ef9c8418968a60ed4641af78c7d7b", "patch": "@@ -351,6 +351,16 @@ class ResolveExpr : public ResolverBase\n       }\n   }\n \n+  void visit (AST::BorrowExpr &expr)\n+  {\n+    ResolveExpr::go (expr.get_borrowed_expr ().get (), expr.get_node_id ());\n+  }\n+\n+  void visit (AST::DereferenceExpr &expr)\n+  {\n+    ResolveExpr::go (expr.get_dereferenced_expr ().get (), expr.get_node_id ());\n+  }\n+\n private:\n   ResolveExpr (NodeId parent) : ResolverBase (parent) {}\n };"}, {"sha": "4b08c21db639f8abcf260d9c9d69f9a5357be88e", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=ca514784717ef9c8418968a60ed4641af78c7d7b", "patch": "@@ -83,6 +83,14 @@ class ResolveType : public ResolverBase\n     type.get_elem_type ()->accept_vis (*this);\n   }\n \n+  void visit (AST::ReferenceType &type)\n+  {\n+    type.get_type_referenced ()->accept_vis (*this);\n+  }\n+\n+  // nothing to do for inferred types\n+  void visit (AST::InferredType &type) { ok = true; }\n+\n private:\n   ResolveType (NodeId parent) : ResolverBase (parent), ok (false) {}\n "}, {"sha": "0ffc1aa0a396dbae5bbd952a33d7a021118aa723", "filename": "gcc/rust/rust-backend.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Frust-backend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Frust-backend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-backend.h?ref=ca514784717ef9c8418968a60ed4641af78c7d7b", "patch": "@@ -121,6 +121,9 @@ class Backend\n   // Get a pointer type.\n   virtual Btype *pointer_type (Btype *to_type) = 0;\n \n+  // Get a reference type.\n+  virtual Btype *reference_type (Btype *to_type) = 0;\n+\n   // make type immutable\n   virtual Btype *immutable_type (Btype *base) = 0;\n "}, {"sha": "7cec47f0d3f143eff1e837ceb7eb64bb5d42c064", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=ca514784717ef9c8418968a60ed4641af78c7d7b", "patch": "@@ -43,6 +43,7 @@\n #include \"output.h\"\n #include \"realmpfr.h\"\n #include \"builtins.h\"\n+#include \"print-tree.h\"\n \n #include \"rust-location.h\"\n #include \"rust-linemap.h\"\n@@ -186,6 +187,8 @@ class Gcc_backend : public Backend\n \n   Btype *pointer_type (Btype *);\n \n+  Btype *reference_type (Btype *);\n+\n   Btype *immutable_type (Btype *);\n \n   Btype *function_type (const Btyped_identifier &,\n@@ -875,6 +878,18 @@ Gcc_backend::pointer_type (Btype *to_type)\n   return this->make_type (type);\n }\n \n+// Get a reference type.\n+\n+Btype *\n+Gcc_backend::reference_type (Btype *to_type)\n+{\n+  tree to_type_tree = to_type->get_tree ();\n+  if (to_type_tree == error_mark_node)\n+    return this->error_type ();\n+  tree type = build_reference_type (to_type_tree);\n+  return this->make_type (type);\n+}\n+\n // Get immutable type\n \n Btype *\n@@ -2517,7 +2532,6 @@ Gcc_backend::convert_tree (tree type_tree, tree expr_tree, Location location)\n       || TREE_TYPE (expr_tree) == error_mark_node)\n     return error_mark_node;\n \n-  gcc_assert (TREE_CODE (type_tree) == TREE_CODE (TREE_TYPE (expr_tree)));\n   if (POINTER_TYPE_P (type_tree) || INTEGRAL_TYPE_P (type_tree)\n       || SCALAR_FLOAT_TYPE_P (type_tree) || COMPLEX_FLOAT_TYPE_P (type_tree))\n     return fold_convert_loc (location.gcc_location (), type_tree, expr_tree);"}, {"sha": "5ff17cb3de9ff1695717daaaa1b7a107a2f1d315", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=ca514784717ef9c8418968a60ed4641af78c7d7b", "patch": "@@ -246,10 +246,10 @@ class TypeCheckExpr : public TypeCheckBase\n     auto rhs = TypeCheckExpr::Resolve (expr.get_rhs (), false);\n \n     auto result = lhs->combine (rhs);\n-    if (result == nullptr)\n+    if (result->get_kind () == TyTy::TypeKind::ERROR)\n       {\n \trust_error_at (expr.get_locus (),\n-\t\t       \"failure in TypeInference AssignmentExpr\");\n+\t\t       \"type resolution failure in AssignmentExpr\");\n \treturn;\n       }\n \n@@ -841,6 +841,32 @@ class TypeCheckExpr : public TypeCheckBase\n     infered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n   }\n \n+  void visit (HIR::BorrowExpr &expr)\n+  {\n+    TyTy::TyBase *resolved_base\n+      = TypeCheckExpr::Resolve (expr.get_expr ().get (), false);\n+\n+    // FIXME double_reference\n+\n+    infered = new TyTy::ReferenceType (expr.get_mappings ().get_hirid (),\n+\t\t\t\t       resolved_base->get_ref ());\n+  }\n+\n+  void visit (HIR::DereferenceExpr &expr)\n+  {\n+    TyTy::TyBase *resolved_base\n+      = TypeCheckExpr::Resolve (expr.get_expr ().get (), false);\n+    if (resolved_base->get_kind () != TyTy::TypeKind::REF)\n+      {\n+\trust_error_at (expr.get_locus (), \"expected reference type got %s\",\n+\t\t       resolved_base->as_string ().c_str ());\n+\treturn;\n+      }\n+\n+    TyTy::ReferenceType *ref_base = (TyTy::ReferenceType *) resolved_base;\n+    infered = ref_base->get_base ()->clone ();\n+  }\n+\n private:\n   TypeCheckExpr (bool inside_loop)\n     : TypeCheckBase (), infered (nullptr), infered_array_elems (nullptr),"}, {"sha": "cf0e979ab5d7b428dad09c0f69c6f7bc8365409c", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=ca514784717ef9c8418968a60ed4641af78c7d7b", "patch": "@@ -73,7 +73,7 @@ class TypeCheckStmt : public TypeCheckBase\n     if (specified_ty != nullptr && init_expr_ty != nullptr)\n       {\n \tauto combined = specified_ty->combine (init_expr_ty);\n-\tif (combined == nullptr)\n+\tif (combined->get_kind () == TyTy::TypeKind::ERROR)\n \t  {\n \t    rust_fatal_error (stmt.get_locus (),\n \t\t\t      \"failure in setting up let stmt type\");"}, {"sha": "0c8e86107832fc9f56e5e2fc8a8ed1067b998440", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=ca514784717ef9c8418968a60ed4641af78c7d7b", "patch": "@@ -70,12 +70,14 @@ class TypeCheckType : public TypeCheckBase\n     TypeCheckType resolver;\n     type->accept_vis (resolver);\n \n-    if (resolver.translated != nullptr)\n+    if (resolver.translated == nullptr)\n       {\n-\tresolver.context->insert_type (type->get_mappings (),\n-\t\t\t\t       resolver.translated);\n+\trust_error_at (Location (), \"failed to translate %s\",\n+\t\t       type->as_string ().c_str ());\n+\treturn new TyTy::ErrorType (type->get_mappings ().get_hirid ());\n       }\n \n+    resolver.context->insert_type (type->get_mappings (), resolver.translated);\n     return resolver.translated;\n   }\n \n@@ -174,6 +176,19 @@ class TypeCheckType : public TypeCheckBase\n       = new TyTy::ArrayType (type.get_mappings ().get_hirid (), capacity, base);\n   }\n \n+  void visit (HIR::ReferenceType &type)\n+  {\n+    TyTy::TyBase *base = TypeCheckType::Resolve (type.get_base_type ().get ());\n+    translated = new TyTy::ReferenceType (type.get_mappings ().get_hirid (),\n+\t\t\t\t\t  base->get_ref ());\n+  }\n+\n+  void visit (HIR::InferredType &type)\n+  {\n+    translated = new TyTy::InferType (type.get_mappings ().get_hirid (),\n+\t\t\t\t      TyTy::InferType::InferTypeKind::GENERAL);\n+  }\n+\n private:\n   TypeCheckType () : TypeCheckBase (), translated (nullptr) {}\n "}, {"sha": "208334461a44ea83b596386afdaab46597aaef0e", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=ca514784717ef9c8418968a60ed4641af78c7d7b", "patch": "@@ -51,7 +51,7 @@ TypeResolution::Resolve (HIR::Crate &crate)\n     if (ty->get_kind () == TyTy::TypeKind::ERROR)\n       {\n \trust_error_at (mappings->lookup_location (id),\n-\t\t       \"failure in type resolution\");\n+\t\t       \"failure in type resolution for %u\", id);\n \treturn false;\n       }\n \n@@ -64,7 +64,8 @@ TypeResolution::Resolve (HIR::Crate &crate)\n       {\n       case TyTy::InferType::GENERAL:\n \trust_error_at (mappings->lookup_location (id),\n-\t\t       \"unable to determine type: %u\", id);\n+\t\t       \"unable to determine type: please give this a type: %u\",\n+\t\t       id);\n \tbreak;\n \n \tcase TyTy::InferType::INTEGRAL: {"}, {"sha": "484fd4851a3a7b889ad336f465e1704ddd758d4e", "filename": "gcc/rust/typecheck/rust-tyctx.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Ftypecheck%2Frust-tyctx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Ftypecheck%2Frust-tyctx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyctx.cc?ref=ca514784717ef9c8418968a60ed4641af78c7d7b", "patch": "@@ -88,10 +88,7 @@ TypeCheckContext::lookup_type (HirId id, TyTy::TyBase **type)\n {\n   auto it = resolved.find (id);\n   if (it == resolved.end ())\n-    {\n-      *type = new TyTy::ErrorType (id);\n-      return false;\n-    }\n+    return false;\n \n   *type = it->second;\n   return true;"}, {"sha": "fb2a259cd2d97994ec1b82a92f161676bb4ef848", "filename": "gcc/rust/typecheck/rust-tyty-call.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h?ref=ca514784717ef9c8418968a60ed4641af78c7d7b", "patch": "@@ -52,6 +52,7 @@ class TypeCheckCallExpr : private TyVisitor\n   void visit (ISizeType &type) override { gcc_unreachable (); }\n   void visit (ErrorType &type) override { gcc_unreachable (); }\n   void visit (CharType &type) override { gcc_unreachable (); }\n+  void visit (ReferenceType &type) override { gcc_unreachable (); }\n \n   // tuple-structs\n   void visit (ADTType &type) override;\n@@ -96,6 +97,7 @@ class TypeCheckMethodCallExpr : private TyVisitor\n   void visit (ErrorType &type) override { gcc_unreachable (); }\n   void visit (ADTType &type) override { gcc_unreachable (); };\n   void visit (CharType &type) override { gcc_unreachable (); }\n+  void visit (ReferenceType &type) override { gcc_unreachable (); }\n \n   // call fns\n   void visit (FnType &type) override;"}, {"sha": "5a3edd4e9e8a291bec52752cd308d8c4a46ce263", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=ca514784717ef9c8418968a60ed4641af78c7d7b", "patch": "@@ -176,6 +176,14 @@ class BaseRules : public TyVisitor\n \t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n   }\n \n+  virtual void visit (ReferenceType &type) override\n+\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+  }\n+\n protected:\n   BaseRules (TyBase *base)\n     : mappings (Analysis::Mappings::get ()),\n@@ -375,6 +383,22 @@ class InferRules : public BaseRules\n   }\n \n   void visit (CharType &type) override\n+  {\n+    {\n+      bool is_valid\n+\t= (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n+      if (is_valid)\n+\t{\n+\t  resolved = type.clone ();\n+\t  return;\n+\t}\n+\n+      BaseRules::visit (type);\n+    }\n+  }\n+\n+  void visit (ReferenceType &type) override\n+\n   {\n     bool is_valid\n       = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n@@ -772,6 +796,25 @@ class CharRules : public BaseRules\n   CharType *base;\n };\n \n+class ReferenceRules : public BaseRules\n+{\n+public:\n+  ReferenceRules (ReferenceType *base) : BaseRules (base), base (base) {}\n+\n+  void visit (ReferenceType &type) override\n+  {\n+    auto base_type = base->get_base ();\n+    auto other_base_type = type.get_base ();\n+\n+    TyTy::TyBase *base_resolved = base_type->combine (other_base_type);\n+    resolved = new ReferenceType (base->get_ref (), base->get_ty_ref (),\n+\t\t\t\t  base_resolved->get_ref ());\n+  }\n+\n+private:\n+  ReferenceType *base;\n+};\n+\n } // namespace TyTy\n } // namespace Rust\n "}, {"sha": "660960566df487e02f762346fc4a777e202fac8a", "filename": "gcc/rust/typecheck/rust-tyty-visitor.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h?ref=ca514784717ef9c8418968a60ed4641af78c7d7b", "patch": "@@ -42,6 +42,7 @@ class TyVisitor\n   virtual void visit (ISizeType &type) = 0;\n   virtual void visit (ErrorType &type) = 0;\n   virtual void visit (CharType &type) = 0;\n+  virtual void visit (ReferenceType &type) = 0;\n };\n \n } // namespace TyTy"}, {"sha": "24be4b0d4624a3b966b8812e96e9a40584d9e6ea", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=ca514784717ef9c8418968a60ed4641af78c7d7b", "patch": "@@ -510,6 +510,52 @@ CharType::clone ()\n   return new CharType (get_ref (), get_ty_ref (), get_combined_refs ());\n }\n \n+void\n+ReferenceType::accept_vis (TyVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+std::string\n+ReferenceType::as_string () const\n+{\n+  return \"&\" + get_base ()->as_string ();\n+}\n+\n+TyBase *\n+ReferenceType::combine (TyBase *other)\n+{\n+  ReferenceRules r (this);\n+  return r.combine (other);\n+}\n+\n+const TyBase *\n+ReferenceType::get_base () const\n+{\n+  auto context = Resolver::TypeCheckContext::get ();\n+  TyBase *lookup = nullptr;\n+  bool ok = context->lookup_type (base, &lookup);\n+  rust_assert (ok);\n+  return lookup;\n+}\n+\n+TyBase *\n+ReferenceType::get_base ()\n+{\n+  auto context = Resolver::TypeCheckContext::get ();\n+  TyBase *lookup = nullptr;\n+  bool ok = context->lookup_type (base, &lookup);\n+  rust_assert (ok);\n+  return lookup;\n+}\n+\n+TyBase *\n+ReferenceType::clone ()\n+{\n+  return new ReferenceType (get_ref (), get_ty_ref (), base,\n+\t\t\t    get_combined_refs ());\n+}\n+\n // rust-tyty-call.h\n \n void"}, {"sha": "c333dd35a50b13bfce07fcb6c9662f0fd024f0e3", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=ca514784717ef9c8418968a60ed4641af78c7d7b", "patch": "@@ -561,15 +561,45 @@ class CharType : public TyBase\n \n   CharType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n     : TyBase (ref, ty_ref, TypeKind::CHAR)\n+\n+  {}\n+\n+  void accept_vis (TyVisitor &vis) override;\n+\n+  std::string as_string () const override;\n+\n+  TyBase *combine (TyBase *other) override;\n+\n+  TyBase *clone () final override;\n+};\n+\n+class ReferenceType : public TyBase\n+{\n+public:\n+  ReferenceType (HirId ref, HirId base,\n+\t\t std::set<HirId> refs = std::set<HirId> ())\n+    : TyBase (ref, ref, TypeKind::REF), base (base)\n+  {}\n+\n+  ReferenceType (HirId ref, HirId ty_ref, HirId base,\n+\t\t std::set<HirId> refs = std::set<HirId> ())\n+    : TyBase (ref, ty_ref, TypeKind::REF), base (base)\n   {}\n \n+  const TyTy::TyBase *get_base () const;\n+\n+  TyTy::TyBase *get_base ();\n+\n   void accept_vis (TyVisitor &vis) override;\n \n   std::string as_string () const override;\n \n   TyBase *combine (TyBase *other) override;\n \n   TyBase *clone () final override;\n+\n+private:\n+  HirId base;\n };\n \n } // namespace TyTy"}, {"sha": "8afa4746fefb7e9f7b15ea97c17b517c735127f6", "filename": "gcc/testsuite/rust.test/compilable/borrow1.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fborrow1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fborrow1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fborrow1.rs?ref=ca514784717ef9c8418968a60ed4641af78c7d7b", "patch": "@@ -0,0 +1,17 @@\n+fn main() {\n+    let a: i32;\n+    a = 123;\n+\n+    let b: &i32;\n+    b = &a;\n+\n+    let aa;\n+    aa = 456;\n+    let bb: &_;\n+    bb = &a;\n+\n+    let aaa;\n+    aaa = 123;\n+    let bbb;\n+    bbb = &aaa;\n+}"}, {"sha": "9bf3eb56bb0fd7bbd141fe2752cd3b773b3dd2a8", "filename": "gcc/testsuite/rust.test/compilable/deref1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fderef1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fderef1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fderef1.rs?ref=ca514784717ef9c8418968a60ed4641af78c7d7b", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let a = 123;\n+    let b = &a;\n+    let c = *b;\n+}"}]}