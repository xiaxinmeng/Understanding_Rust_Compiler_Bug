{"sha": "69823d76788b7420ab7c3e7c3603841e409a767a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk4MjNkNzY3ODhiNzQyMGFiN2MzZTdjMzYwMzg0MWU0MDlhNzY3YQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2015-12-01T20:13:02Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-12-01T20:13:02Z"}, "message": "nvptx-protos.h (nvptx_output_aligned_decl): Declare.\n\n\tgcc/\n\t* config/nvptx/nvptx-protos.h (nvptx_output_aligned_decl): Declare.\n\t* config/nvptx/nvptx.h (ASM_OUTPUT_ALIGNED_DECL_COMMON,\n\tASM_OUTPUT_ALIGNED_DECL_LOCAL): Forward to nvptx_output_aligned_decl.\n\t* config/nvptx/nvptx.c (write_fn_marker, write_var_marker): New.\n\t(write_fn_proto, write_fn_proto_from_insn): Call write_fn_marker.\n\t(init_output_initializer): Call write_var_marker.\n\t(nvptx_output_aligned_decl): New.\n\t(nvptx_assemble_undefined_decl, nvptx_file_end): Call write_var_marker.\n\n\tgcc/testsuite/\n\t* gcc.target/nvptx/uninit-decl.c: New.\n\nFrom-SVN: r231127", "tree": {"sha": "f336c3ceb467fff20cc26fd87b8335693f9859a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f336c3ceb467fff20cc26fd87b8335693f9859a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69823d76788b7420ab7c3e7c3603841e409a767a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69823d76788b7420ab7c3e7c3603841e409a767a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69823d76788b7420ab7c3e7c3603841e409a767a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69823d76788b7420ab7c3e7c3603841e409a767a/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9dc39706b4afc31623f28b71150cfd2bdadb2c24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dc39706b4afc31623f28b71150cfd2bdadb2c24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dc39706b4afc31623f28b71150cfd2bdadb2c24"}], "stats": {"total": 128, "additions": 82, "deletions": 46}, "files": [{"sha": "c94f88b8cd6ce4a5489c9777e26c5ea4534ca2ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69823d76788b7420ab7c3e7c3603841e409a767a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69823d76788b7420ab7c3e7c3603841e409a767a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69823d76788b7420ab7c3e7c3603841e409a767a", "patch": "@@ -1,3 +1,14 @@\n+2015-12-01  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* config/nvptx/nvptx-protos.h (nvptx_output_aligned_decl): Declare.\n+\t* config/nvptx/nvptx.h (ASM_OUTPUT_ALIGNED_DECL_COMMON,\n+\tASM_OUTPUT_ALIGNED_DECL_LOCAL): Forward to nvptx_output_aligned_decl.\n+\t* config/nvptx/nvptx.c (write_fn_marker, write_var_marker): New.\n+\t(write_fn_proto, write_fn_proto_from_insn): Call write_fn_marker.\n+\t(init_output_initializer): Call write_var_marker.\n+\t(nvptx_output_aligned_decl): New.\n+\t(nvptx_assemble_undefined_decl, nvptx_file_end): Call write_var_marker.\n+\n 2015-12-01  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* c-common.c (parse_optimize_options): Do not silently ignore"}, {"sha": "78b1c98a0f91cfc9dea3a6dbcb9f42d72d1c2a1e", "filename": "gcc/config/nvptx/nvptx-protos.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69823d76788b7420ab7c3e7c3603841e409a767a/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69823d76788b7420ab7c3e7c3603841e409a767a/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h?ref=69823d76788b7420ab7c3e7c3603841e409a767a", "patch": "@@ -24,11 +24,13 @@\n extern void nvptx_declare_function_name (FILE *, const char *, const_tree decl);\n extern void nvptx_declare_object_name (FILE *file, const char *name,\n \t\t\t\t       const_tree decl);\n+extern void nvptx_output_aligned_decl (FILE *file, const char *name,\n+\t\t\t\t       const_tree decl,\n+\t\t\t\t       HOST_WIDE_INT size, unsigned align);\n extern void nvptx_function_end (FILE *);\n extern void nvptx_output_skip (FILE *, unsigned HOST_WIDE_INT);\n extern void nvptx_output_ascii (FILE *, const char *, unsigned HOST_WIDE_INT);\n extern void nvptx_register_pragmas (void);\n-extern const char *nvptx_section_for_decl (const_tree);\n \n #ifdef RTX_CODE\n extern void nvptx_expand_oacc_fork (unsigned);"}, {"sha": "d3101c035da64fe0be66cbaa0a385181a4b16848", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 55, "deletions": 16, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69823d76788b7420ab7c3e7c3603841e409a767a/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69823d76788b7420ab7c3e7c3603841e409a767a/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=69823d76788b7420ab7c3e7c3603841e409a767a", "patch": "@@ -366,6 +366,31 @@ write_as_kernel (tree attrs)\n \t  || lookup_attribute (\"omp target entrypoint\", attrs) != NULL_TREE);\n }\n \n+/* Emit a linker marker for a function decl or defn.  */\n+\n+static void\n+write_fn_marker (std::stringstream &s, bool is_defn, bool globalize,\n+\t\t const char *name)\n+{\n+  s << \"\\n// BEGIN\";\n+  if (globalize)\n+    s << \" GLOBAL\";\n+  s << \" FUNCTION \" << (is_defn ? \"DEF: \" : \"DECL: \");\n+  s << name << \"\\n\";\n+}\n+\n+/* Emit a linker marker for a variable decl or defn.  */\n+\n+static void\n+write_var_marker (FILE *file, bool is_defn, bool globalize, const char *name)\n+{\n+  fprintf (file, \"\\n// BEGIN%s VAR %s: \",\n+\t   globalize ? \" GLOBAL\" : \"\",\n+\t   is_defn ? \"DEF\" : \"DECL\");\n+  assemble_name_raw (file, name);\n+  fputs (\"\\n\", file);\n+}\n+\n /* Write a .func or .kernel declaration or definition along with\n    a helper comment for use by ld.  S is the stream to write to, DECL\n    the decl for the function with name NAME.   For definitions, emit\n@@ -386,11 +411,7 @@ write_fn_proto (std::stringstream &s, bool is_defn,\n \tname++;\n     }\n \n-  /* Emit the linker marker.  */\n-  s << \"\\n// BEGIN\";\n-  if (TREE_PUBLIC (decl))\n-    s << \" GLOBAL\";\n-  s << \" FUNCTION \" << (is_defn ? \"DEF\" : \"DECL\") << \": \" << name << \"\\n\";\n+  write_fn_marker (s, is_defn, TREE_PUBLIC (decl), name);\n \n   /* PTX declaration.  */\n   if (DECL_EXTERNAL (decl))\n@@ -500,7 +521,7 @@ write_fn_proto_from_insn (std::stringstream &s, const char *name,\n   else\n     {\n       name = nvptx_name_replacement (name);\n-      s << \"\\n// BEGIN GLOBAL FUNCTION DECL: \" << name << \"\\n\";\n+      write_fn_marker (s, false, true, name);\n       s << \"\\t.extern .func \";\n     }\n \n@@ -1638,9 +1659,7 @@ static void\n init_output_initializer (FILE *file, const char *name, const_tree type,\n \t\t\t bool is_public)\n {\n-  fprintf (file, \"\\n// BEGIN%s VAR DEF: \", is_public ? \" GLOBAL\" : \"\");\n-  assemble_name_raw (file, name);\n-  fputc ('\\n', file);\n+  write_var_marker (file, true, is_public, name);\n \n   if (TREE_CODE (type) == ARRAY_TYPE)\n     type = TREE_TYPE (type);\n@@ -1658,6 +1677,27 @@ init_output_initializer (FILE *file, const char *name, const_tree type,\n   object_finished = false;\n }\n \n+/* Output an uninitialized common or file-scope variable.  */\n+\n+void\n+nvptx_output_aligned_decl (FILE *file, const char *name,\n+\t\t\t   const_tree decl, HOST_WIDE_INT size, unsigned align)\n+{\n+  write_var_marker (file, true, TREE_PUBLIC (decl), name);\n+\n+  /* If this is public, it is common.  The nearest thing we have to\n+     common is weak.  */\n+  if (TREE_PUBLIC (decl))\n+    fprintf (file, \".weak \");\n+\n+  const char *sec = nvptx_section_for_decl (decl);\n+  fprintf (file, \"%s.align %d .b8 \", sec, align / BITS_PER_UNIT);\n+  assemble_name (file, name);\n+  if (size > 0)\n+    fprintf (file, \"[\" HOST_WIDE_INT_PRINT_DEC\"]\", size);\n+  fprintf (file, \";\\n\");\n+}\n+\n /* Implement TARGET_ASM_DECLARE_CONSTANT_NAME.  Begin the process of\n    writing a constant variable EXP with NAME and SIZE and its\n    initializer to FILE.  */\n@@ -1720,11 +1760,10 @@ nvptx_assemble_undefined_decl (FILE *file, const char *name, const_tree decl)\n {\n   if (TREE_CODE (decl) != VAR_DECL)\n     return;\n+\n+  write_var_marker (file, false, TREE_PUBLIC (decl), name);\n+\n   const char *section = nvptx_section_for_decl (decl);\n-  fprintf (file, \"\\n// BEGIN%s VAR DECL: \",\n-\t   TREE_PUBLIC (decl) ? \" GLOBAL\" : \"\");\n-  assemble_name_raw (file, name);\n-  fputs (\"\\n\", file);\n   HOST_WIDE_INT size = int_size_in_bytes (TREE_TYPE (decl));\n   fprintf (file, \".extern %s .b8 \", section);\n   assemble_name_raw (file, name);\n@@ -3876,7 +3915,7 @@ nvptx_file_end (void)\n       worker_bcast_size = (worker_bcast_size + worker_bcast_align - 1)\n \t& ~(worker_bcast_align - 1);\n       \n-      fprintf (asm_out_file, \"\\n// BEGIN VAR DEF: %s\\n\", worker_bcast_name);\n+      write_var_marker (asm_out_file, true, false, worker_bcast_name);\n       fprintf (asm_out_file, \".shared .align %d .u8 %s[%d];\\n\",\n \t       worker_bcast_align,\n \t       worker_bcast_name, worker_bcast_size);\n@@ -3888,8 +3927,8 @@ nvptx_file_end (void)\n \n       worker_red_size = ((worker_red_size + worker_red_align - 1)\n \t\t\t & ~(worker_red_align - 1));\n-      \n-      fprintf (asm_out_file, \"\\n// BEGIN VAR DEF: %s\\n\", worker_red_name);\n+\n+      write_var_marker (asm_out_file, true, false, worker_red_name);\n       fprintf (asm_out_file, \".shared .align %d .u8 %s[%d];\\n\",\n \t       worker_red_align,\n \t       worker_red_name, worker_red_size);"}, {"sha": "cc5822bb10760072f2eab55a4e10925114b04e99", "filename": "gcc/config/nvptx/nvptx.h", "status": "modified", "additions": 2, "deletions": 29, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69823d76788b7420ab7c3e7c3603841e409a767a/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69823d76788b7420ab7c3e7c3603841e409a767a/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.h?ref=69823d76788b7420ab7c3e7c3603841e409a767a", "patch": "@@ -304,38 +304,11 @@ struct GTY(()) machine_function\n \n #undef  ASM_OUTPUT_ALIGNED_DECL_COMMON\n #define ASM_OUTPUT_ALIGNED_DECL_COMMON(FILE, DECL, NAME, SIZE, ALIGN)\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\n// BEGIN%s VAR DEF: \",\t\t\t\t\\\n-\t       TREE_PUBLIC (DECL) ? \" GLOBAL\" : \"\");\t\t\t\\\n-      assemble_name_raw (FILE, NAME);\t\t\t\t\t\\\n-      fputc ('\\n', FILE);\t\t\t\t\t\t\\\n-      const char *sec = nvptx_section_for_decl (DECL);\t\t\t\\\n-      fprintf (FILE, \".visible%s.align %d .b8 \", sec,\t\t\t\\\n-\t       (ALIGN) / BITS_PER_UNIT);\t\t\t\t\\\n-      assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-      if ((SIZE) > 0)\t\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"[\" HOST_WIDE_INT_PRINT_DEC\"]\", (SIZE));\t\t\\\n-      fprintf (FILE, \";\\n\");\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n+  nvptx_output_aligned_decl (FILE, NAME, DECL, SIZE, ALIGN)\n \n #undef  ASM_OUTPUT_ALIGNED_DECL_LOCAL\n #define ASM_OUTPUT_ALIGNED_DECL_LOCAL(FILE, DECL, NAME, SIZE, ALIGN)\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\n// BEGIN VAR DEF: \");\t\t\t\t\\\n-      assemble_name_raw (FILE, NAME);\t\t\t\t\t\\\n-      fputc ('\\n', FILE);\t\t\t\t\t\t\\\n-      const char *sec = nvptx_section_for_decl (DECL);\t\t\t\\\n-      fprintf (FILE, \".visible%s.align %d .b8 \", sec,\t\t\t\\\n-\t       (ALIGN) / BITS_PER_UNIT);\t\t\t\t\\\n-      assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-      if ((SIZE) > 0)\t\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"[\" HOST_WIDE_INT_PRINT_DEC\"]\", (SIZE));\t\t\\\n-      fprintf (FILE, \";\\n\");\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n+  nvptx_output_aligned_decl (FILE, NAME, DECL, SIZE, ALIGN)\n \n #define CASE_VECTOR_PC_RELATIVE flag_pic\n #define JUMP_TABLES_IN_TEXT_SECTION flag_pic"}, {"sha": "abc4e9d31e65feb2765f2467af2129ff4c8fe5ab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69823d76788b7420ab7c3e7c3603841e409a767a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69823d76788b7420ab7c3e7c3603841e409a767a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=69823d76788b7420ab7c3e7c3603841e409a767a", "patch": "@@ -1,3 +1,7 @@\n+2015-12-01  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* gcc.target/nvptx/uninit-decl.c: New.\n+\n 2015-12-01  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* gcc.c-torture/execute/alias-1.c: New testcase."}, {"sha": "a9ca1ddbb77fe8c2651e21e9d0233cbc6234793b", "filename": "gcc/testsuite/gcc.target/nvptx/uninit-decl.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69823d76788b7420ab7c3e7c3603841e409a767a/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Funinit-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69823d76788b7420ab7c3e7c3603841e409a767a/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Funinit-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Funinit-decl.c?ref=69823d76788b7420ab7c3e7c3603841e409a767a", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+\n+int __attribute__ ((used)) common;\n+static int __attribute__ ((used)) local;\n+\n+/* { dg-final { scan-assembler \".weak .global\\[^,\\n\\r\\]*common\" } } */\n+/* { dg-final { scan-assembler \"\\[\\n\\r\\].global\\[^,\\n\\r\\]*local\" } } */"}]}