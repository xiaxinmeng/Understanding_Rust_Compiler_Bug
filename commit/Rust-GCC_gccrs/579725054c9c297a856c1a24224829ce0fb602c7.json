{"sha": "579725054c9c297a856c1a24224829ce0fb602c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc5NzI1MDU0YzljMjk3YTg1NmMxYTI0MjI0ODI5Y2UwZmI2MDJjNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2008-08-09T18:19:32Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-08-09T18:19:32Z"}, "message": "mips.h (MASK_RETURN_ADDR): Expand commentary.\n\ngcc/\n\t* config/mips/mips.h (MASK_RETURN_ADDR): Expand commentary.\n\t* config/mips/linux-unwind.h (mips_fallback_frame_state): Add 2\n\trather than 4 to PC.\n\nFrom-SVN: r138910", "tree": {"sha": "95c8c240d7dcb1d3b15864f4b579007ec49651e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95c8c240d7dcb1d3b15864f4b579007ec49651e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/579725054c9c297a856c1a24224829ce0fb602c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/579725054c9c297a856c1a24224829ce0fb602c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/579725054c9c297a856c1a24224829ce0fb602c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/579725054c9c297a856c1a24224829ce0fb602c7/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e538e028ec41ada02fa243b25a88b47b1a6d030b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e538e028ec41ada02fa243b25a88b47b1a6d030b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e538e028ec41ada02fa243b25a88b47b1a6d030b"}], "stats": {"total": 49, "additions": 41, "deletions": 8}, "files": [{"sha": "8e3956187f220dd01647774d929f300285d05ccc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/579725054c9c297a856c1a24224829ce0fb602c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/579725054c9c297a856c1a24224829ce0fb602c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=579725054c9c297a856c1a24224829ce0fb602c7", "patch": "@@ -1,3 +1,9 @@\n+2008-08-09  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* config/mips/mips.h (MASK_RETURN_ADDR): Expand commentary.\n+\t* config/mips/linux-unwind.h (mips_fallback_frame_state): Add 2\n+\trather than 4 to PC.\n+\n 2008-08-09  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config/mips/mips.h (STATIC_CHAIN_REGNUM): Remap to $15."}, {"sha": "818b436e3607c4583c65c14c1a4c9573d7b9b38f", "filename": "gcc/config/mips/linux-unwind.h", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/579725054c9c297a856c1a24224829ce0fb602c7/gcc%2Fconfig%2Fmips%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/579725054c9c297a856c1a24224829ce0fb602c7/gcc%2Fconfig%2Fmips%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux-unwind.h?ref=579725054c9c297a856c1a24224829ce0fb602c7", "patch": "@@ -106,12 +106,17 @@ mips_fallback_frame_state (struct _Unwind_Context *context,\n     fs->regs.reg[i].loc.offset\n       = (_Unwind_Ptr)&(sc->sc_regs[i]) + reg_offset - new_cfa;\n   }\n-  /* The PC points to the faulting instruction, but the unwind tables\n-     expect it point to the following instruction.  We compensate by\n-     reporting a return address at the next instruction. */\n+  /* \"PC & -2\" points to the faulting instruction, but the unwind code\n+     searches for \"(ADDR & -2) - 1\".  (See MASK_RETURN_ADDR for the source\n+     of the -2 mask.)  Adding 2 here ensures that \"(ADDR & -2) - 1\" is the\n+     address of the second byte of the faulting instruction.\n+\n+     Note that setting fs->signal_frame would not work.  As the comment\n+     above MASK_RETURN_ADDR explains, MIPS unwinders must earch for an\n+     odd-valued address.  */\n   fs->regs.reg[DWARF_ALT_FRAME_RETURN_COLUMN].how = REG_SAVED_VAL_OFFSET;\n   fs->regs.reg[DWARF_ALT_FRAME_RETURN_COLUMN].loc.offset\n-    = (_Unwind_Ptr)(sc->sc_pc) + 4 - new_cfa;\n+    = (_Unwind_Ptr)(sc->sc_pc) + 2 - new_cfa;\n   fs->retaddr_column = DWARF_ALT_FRAME_RETURN_COLUMN;\n \n   return _URC_NO_REASON;"}, {"sha": "006c73e41a9fe9039ba5887a9bd8e0dc8ebac936", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/579725054c9c297a856c1a24224829ce0fb602c7/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/579725054c9c297a856c1a24224829ce0fb602c7/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=579725054c9c297a856c1a24224829ce0fb602c7", "patch": "@@ -1958,10 +1958,32 @@ enum reg_class\n \n #define RETURN_ADDR_RTX mips_return_addr\n \n-/* Since the mips16 ISA mode is encoded in the least-significant bit\n-   of the address, mask it off return addresses for purposes of\n-   finding exception handling regions.  */\n-\n+/* Mask off the MIPS16 ISA bit in unwind addresses.\n+\n+   The reason for this is a little subtle.  When unwinding a call,\n+   we are given the call's return address, which on most targets\n+   is the address of the following instruction.  However, what we\n+   actually want to find is the EH region for the call itself.\n+   The target-independent unwind code therefore searches for \"RA - 1\".\n+\n+   In the MIPS16 case, RA is always an odd-valued (ISA-encoded) address.\n+   RA - 1 is therefore the real (even-valued) start of the return\n+   instruction.  EH region labels are usually odd-valued MIPS16 symbols\n+   too, so a search for an even address within a MIPS16 region would\n+   usually work.\n+\n+   However, there is an exception.  If the end of an EH region is also\n+   the end of a function, the end label is allowed to be even.  This is\n+   necessary because a following non-MIPS16 function may also need EH\n+   information for its first instruction.\n+\n+   Thus a MIPS16 region may be terminated by an ISA-encoded or a\n+   non-ISA-encoded address.  This probably isn't ideal, but it is\n+   the traditional (legacy) behavior.  It is therefore only safe\n+   to search MIPS EH regions for an _odd-valued_ address.\n+\n+   Masking off the ISA bit means that the target-independent code\n+   will search for \"(RA & -2) - 1\", which is guaranteed to be odd.  */\n #define MASK_RETURN_ADDR GEN_INT (-2)\n \n "}]}