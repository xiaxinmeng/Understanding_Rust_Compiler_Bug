{"sha": "d74e340d7c94bd5a4754a58f2993def64cfe1edf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc0ZTM0MGQ3Yzk0YmQ1YTQ3NTRhNThmMjk5M2RlZjY0Y2ZlMWVkZg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2013-04-09T20:55:17Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2013-04-09T20:55:17Z"}, "message": "configure, [...]: Rebuild.\n\n\t* configure, config.h.in: Rebuild.\n\t* configure.ac: Use GLIBCXX_CHECK_SDT_H.  Don't check for\n\tsys/sdt.h.\n\t* acinclude.m4 (GLIBCXX_CHECK_SDT_H): New defun.\n\nFrom-SVN: r197649", "tree": {"sha": "5f77c0aad21a181bc4dd127d5d54c1be36b67b9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f77c0aad21a181bc4dd127d5d54c1be36b67b9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d74e340d7c94bd5a4754a58f2993def64cfe1edf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d74e340d7c94bd5a4754a58f2993def64cfe1edf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d74e340d7c94bd5a4754a58f2993def64cfe1edf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d74e340d7c94bd5a4754a58f2993def64cfe1edf/comments", "author": null, "committer": null, "parents": [{"sha": "ae3d036149e54b45032bc751e6d45eace3e2a615", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae3d036149e54b45032bc751e6d45eace3e2a615", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae3d036149e54b45032bc751e6d45eace3e2a615"}], "stats": {"total": 106, "additions": 99, "deletions": 7}, "files": [{"sha": "3ccf5f442df09ef2cd482e5b97bd8776217d990c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d74e340d7c94bd5a4754a58f2993def64cfe1edf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d74e340d7c94bd5a4754a58f2993def64cfe1edf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d74e340d7c94bd5a4754a58f2993def64cfe1edf", "patch": "@@ -1,3 +1,10 @@\n+2013-04-09  Tom Tromey  <tromey@redhat.com>\n+\n+\t* configure, config.h.in: Rebuild.\n+\t* configure.ac: Use GLIBCXX_CHECK_SDT_H.  Don't check for\n+\tsys/sdt.h.\n+\t* acinclude.m4 (GLIBCXX_CHECK_SDT_H): New defun.\n+\n 2013-04-09  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/abi/post/alpha-linux-gnu/baseline_symbols.txt: Update."}, {"sha": "619fff02bf708685fe62b7bc6439a865a15cb7cd", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d74e340d7c94bd5a4754a58f2993def64cfe1edf/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d74e340d7c94bd5a4754a58f2993def64cfe1edf/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=d74e340d7c94bd5a4754a58f2993def64cfe1edf", "patch": "@@ -3660,6 +3660,36 @@ AC_DEFUN([GLIBCXX_ENABLE_WERROR], [\n ])\n \n \n+dnl\n+dnl Check to see if sys/sdt.h exists and that it is suitable for use.\n+dnl Some versions of sdt.h were not compatible with C++11.\n+dnl\n+AC_DEFUN([GLIBCXX_CHECK_SDT_H], [\n+  AC_MSG_RESULT([for suitable sys/sdt.h])\n+  # Note that this test has to be run with the C language.\n+  # Otherwise, sdt.h will try to include some headers from\n+  # libstdc++ itself.\n+  AC_LANG_SAVE\n+  AC_LANG_C\n+  AC_CACHE_VAL(glibcxx_cv_sys_sdt_h, [\n+    # Because we have to run the test in C, we use grep rather\n+    # than the compiler to check for the bug.  The bug is that\n+    # were strings without trailing whitespace, causing g++\n+    # to look for operator\"\".  The pattern searches for the fixed\n+    # output.\n+    AC_EGREP_CPP([ \\\",\\\" ], [\n+      #include <sys/sdt.h>\n+      int f() { STAP_PROBE(hi, bob); }\n+    ], [glibcxx_cv_sys_sdt_h=yes], [glibcxx_cv_sys_sdt_h=no])\n+  ])\n+  AC_LANG_RESTORE\n+  if test $glibcxx_cv_sys_sdt_h = yes; then\n+    AC_DEFINE(HAVE_SYS_SDT_H, 1,\n+              [Define to 1 if you have a suitable <sys/sdt.h> header file])\n+  fi\n+  AC_MSG_RESULT($glibcxx_cv_sys_sdt_h)\n+])\n+\n # Macros from the top-level gcc directory.\n m4_include([../config/gc++filt.m4])\n m4_include([../config/tls.m4])"}, {"sha": "90d0479347eb598c0c4a7c7a70e2e408de11b7ca", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d74e340d7c94bd5a4754a58f2993def64cfe1edf/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d74e340d7c94bd5a4754a58f2993def64cfe1edf/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=d74e340d7c94bd5a4754a58f2993def64cfe1edf", "patch": "@@ -400,7 +400,7 @@\n /* Define to 1 if you have the <sys/resource.h> header file. */\n #undef HAVE_SYS_RESOURCE_H\n \n-/* Define to 1 if you have the <sys/sdt.h> header file. */\n+/* Define to 1 if you have a suitable <sys/sdt.h> header file */\n #undef HAVE_SYS_SDT_H\n \n /* Define to 1 if you have the <sys/sem.h> header file. */"}, {"sha": "44374746c2b433c11ba8a2f5b21035c42b7f58f7", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 59, "deletions": 5, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d74e340d7c94bd5a4754a58f2993def64cfe1edf/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d74e340d7c94bd5a4754a58f2993def64cfe1edf/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=d74e340d7c94bd5a4754a58f2993def64cfe1edf", "patch": "@@ -3530,11 +3530,11 @@ MAKEINFO=${MAKEINFO-\"${am_missing_run}makeinfo\"}\n \n # We need awk for the \"check\" target.  The system \"awk\" is bad on\n # some platforms.\n-# Always define AMTAR for backward compatibility.  Yes, it's still used\n-# in the wild :-(  We should find a proper way to deprecate it ...\n-AMTAR='$${TAR-tar}'\n+# Always define AMTAR for backward compatibility.\n \n-am__tar='$${TAR-tar} chof - \"$$tardir\"' am__untar='$${TAR-tar} xf -'\n+AMTAR=${AMTAR-\"${am_missing_run}tar\"}\n+\n+am__tar='${AMTAR} chof - \"$$tardir\"'; am__untar='${AMTAR} xf -'\n \n \n \n@@ -20413,11 +20413,65 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n \n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: for suitable sys/sdt.h\" >&5\n+$as_echo \"for suitable sys/sdt.h\" >&6; }\n+  # Note that this test has to be run with the C language.\n+  # Otherwise, sdt.h will try to include some headers from\n+  # libstdc++ itself.\n+\n+  ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+  if test \"${glibcxx_cv_sys_sdt_h+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+    # Because we have to run the test in C, we use grep rather\n+    # than the compiler to check for the bug.  The bug is that\n+    # were strings without trailing whitespace, causing g++\n+    # to look for operator\"\".  The pattern searches for the fixed\n+    # output.\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+      #include <sys/sdt.h>\n+      int f() { STAP_PROBE(hi, bob); }\n+\n+_ACEOF\n+if (eval \"$ac_cpp conftest.$ac_ext\") 2>&5 |\n+  $EGREP \" \\\",\\\" \" >/dev/null 2>&1; then :\n+  glibcxx_cv_sys_sdt_h=yes\n+else\n+  glibcxx_cv_sys_sdt_h=no\n+fi\n+rm -f conftest*\n+\n+\n+fi\n+\n+  ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+  if test $glibcxx_cv_sys_sdt_h = yes; then\n+\n+$as_echo \"#define HAVE_SYS_SDT_H 1\" >>confdefs.h\n+\n+  fi\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_sys_sdt_h\" >&5\n+$as_echo \"$glibcxx_cv_sys_sdt_h\" >&6; }\n+\n+\n # Check for available headers.\n for ac_header in endian.h execinfo.h float.h fp.h ieeefp.h inttypes.h \\\n locale.h machine/endian.h machine/param.h nan.h stdint.h stdlib.h string.h \\\n strings.h sys/ipc.h sys/isa_defs.h sys/machine.h sys/param.h \\\n-sys/resource.h sys/sdt.h sys/sem.h sys/stat.h sys/time.h sys/types.h unistd.h \\\n+sys/resource.h sys/sem.h sys/stat.h sys/time.h sys/types.h unistd.h \\\n wchar.h wctype.h\n do :\n   as_ac_Header=`$as_echo \"ac_cv_header_$ac_header\" | $as_tr_sh`"}, {"sha": "73d430ac1051cebb05b3b7b5472f8166cab1dcd7", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d74e340d7c94bd5a4754a58f2993def64cfe1edf/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d74e340d7c94bd5a4754a58f2993def64cfe1edf/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=d74e340d7c94bd5a4754a58f2993def64cfe1edf", "patch": "@@ -211,12 +211,13 @@ GLIBCXX_CHECK_SC_NPROCESSORS_ONLN\n GLIBCXX_CHECK_SC_NPROC_ONLN\n GLIBCXX_CHECK_PTHREADS_NUM_PROCESSORS_NP\n GLIBCXX_CHECK_SYSCTL_HW_NCPU\n+GLIBCXX_CHECK_SDT_H\n \n # Check for available headers.\n AC_CHECK_HEADERS([endian.h execinfo.h float.h fp.h ieeefp.h inttypes.h \\\n locale.h machine/endian.h machine/param.h nan.h stdint.h stdlib.h string.h \\\n strings.h sys/ipc.h sys/isa_defs.h sys/machine.h sys/param.h \\\n-sys/resource.h sys/sdt.h sys/sem.h sys/stat.h sys/time.h sys/types.h unistd.h \\\n+sys/resource.h sys/sem.h sys/stat.h sys/time.h sys/types.h unistd.h \\\n wchar.h wctype.h])\n \n # Only do link tests if native. Else, hardcode."}]}