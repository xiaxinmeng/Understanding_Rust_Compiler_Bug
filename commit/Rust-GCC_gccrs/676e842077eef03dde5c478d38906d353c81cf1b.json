{"sha": "676e842077eef03dde5c478d38906d353c81cf1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc2ZTg0MjA3N2VlZjAzZGRlNWM0NzhkMzg5MDZkMzUzYzgxY2YxYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-08-05T09:14:19Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-08-05T09:14:19Z"}, "message": "[multiple changes]\n\n2010-08-05  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch6.adb, gnat1drv.adb, exp_ch6.adb, sem_eval.adb: Minor\n\treformatting.\n\n2010-08-05  Steve Baird  <baird@adacore.com>\n\n\t* exp_util.adb (Remove_Side_Effects): An access value which designates\n\ta volatile object of a nonvolatile type is prohibited.\n\tDo not call Make_Reference to construct a reference to such an object.\n\nFrom-SVN: r162905", "tree": {"sha": "0966cf202946db5ff03456b8e24a3977cbf0c3ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0966cf202946db5ff03456b8e24a3977cbf0c3ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/676e842077eef03dde5c478d38906d353c81cf1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/676e842077eef03dde5c478d38906d353c81cf1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/676e842077eef03dde5c478d38906d353c81cf1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/676e842077eef03dde5c478d38906d353c81cf1b/comments", "author": null, "committer": null, "parents": [{"sha": "c97c0163bcc9c1e3020fc47d639e19debc51e80d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c97c0163bcc9c1e3020fc47d639e19debc51e80d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c97c0163bcc9c1e3020fc47d639e19debc51e80d"}], "stats": {"total": 105, "additions": 55, "deletions": 50}, "files": [{"sha": "6e188f0caabe596880610f4b8ca65ed003e69377", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676e842077eef03dde5c478d38906d353c81cf1b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676e842077eef03dde5c478d38906d353c81cf1b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=676e842077eef03dde5c478d38906d353c81cf1b", "patch": "@@ -1,3 +1,14 @@\n+2010-08-05  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch6.adb, gnat1drv.adb, exp_ch6.adb, sem_eval.adb: Minor\n+\treformatting.\n+\n+2010-08-05  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_util.adb (Remove_Side_Effects): An access value which designates\n+\ta volatile object of a nonvolatile type is prohibited.\n+\tDo not call Make_Reference to construct a reference to such an object.\n+\n 2010-08-05  Robert Dewar  <dewar@adacore.com>\n \n \t* a-suezse.adb, a-suezse.ads, a-suezen.adb, a-suezen.ads: Removed."}, {"sha": "11a2161e99d1f8232583194a0b3cd52136aa51a9", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676e842077eef03dde5c478d38906d353c81cf1b/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676e842077eef03dde5c478d38906d353c81cf1b/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=676e842077eef03dde5c478d38906d353c81cf1b", "patch": "@@ -3713,9 +3713,7 @@ package body Exp_Ch6 is\n \n          Set_Name (N, New_Occurrence_Of (Orig_Bod, Loc));\n \n-         if Present (Alias (Orig_Bod))\n-           or else Is_Inlined (Orig_Bod)\n-         then\n+         if Present (Alias (Orig_Bod)) or else Is_Inlined (Orig_Bod) then\n             Expand_Call (N);\n          end if;\n "}, {"sha": "0c0377b9ec2369aefa224a2a2bdb990e10b0c655", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676e842077eef03dde5c478d38906d353c81cf1b/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676e842077eef03dde5c478d38906d353c81cf1b/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=676e842077eef03dde5c478d38906d353c81cf1b", "patch": "@@ -4799,12 +4799,17 @@ package body Exp_Util is\n          end if;\n \n       --  For expressions that denote objects, we can use a renaming scheme.\n-      --  We skip using this if we have a volatile reference and we do not\n-      --  have Name_Req set true (see comments above for Side_Effect_Free).\n+      --  This is needed for correctness in the case of a volatile object\n+      --  of a non-volatile type because the Make_Reference call of the\n+      --  \"default\" approach would generate an illegal access value (an access\n+      --  value cannot designate such an object - see Analyze_Reference).\n+      --  We skip using this scheme if we have an object of a volatile type\n+      --  and we do not have Name_Req set true (see comments above for\n+      --  Side_Effect_Free).\n \n       elsif Is_Object_Reference (Exp)\n         and then Nkind (Exp) /= N_Function_Call\n-        and then (Name_Req or else not Is_Volatile_Reference (Exp))\n+        and then (Name_Req or else not Treat_As_Volatile (Exp_Type))\n       then\n          Def_Id := Make_Temporary (Loc, 'R', Exp);\n "}, {"sha": "c514570d91b4f7e7fd6786fded631d07e577a79c", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 24, "deletions": 31, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676e842077eef03dde5c478d38906d353c81cf1b/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676e842077eef03dde5c478d38906d353c81cf1b/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=676e842077eef03dde5c478d38906d353c81cf1b", "patch": "@@ -441,20 +441,19 @@ procedure Gnat1drv is\n          Fname := Get_File_Name (Sname, Subunit => False);\n          Src_Ind := Load_Source_File (Fname);\n \n-         --  Case where body is present and it is not a subunit. Exclude\n-         --  the subunit case, because it has nothing to do with the\n-         --  package we are compiling. It is illegal for a child unit and a\n-         --  subunit with the same expanded name (RM 10.2(9)) to appear\n-         --  together in a partition, but there is nothing to stop a\n-         --  compilation environment from having both, and the test here\n-         --  simply allows that. If there is an attempt to include both in\n-         --  a partition, this is diagnosed at bind time. In Ada 83 mode\n-         --  this is not a warning case.\n-\n-         --  Note: if weird file names are being used, we can have\n-         --  situation where the file name that supposedly contains body,\n-         --  in fact contains a spec, or we can't tell what it contains.\n-         --  Skip the error message in these cases.\n+         --  Case where body is present and it is not a subunit. Exclude the\n+         --  subunit case, because it has nothing to do with the package we are\n+         --  compiling. It is illegal for a child unit and a subunit with the\n+         --  same expanded name (RM 10.2(9)) to appear together in a partition,\n+         --  but there is nothing to stop a compilation environment from having\n+         --  both, and the test here simply allows that. If there is an attempt\n+         --  to include both in a partition, this is diagnosed at bind time. In\n+         --  Ada 83 mode this is not a warning case.\n+\n+         --  Note: if weird file names are being used, we can have a situation\n+         --  where the file name that supposedly contains body in fact contains\n+         --  a spec, or we can't tell what it contains. Skip the error message\n+         --  in these cases.\n \n          --  Also ignore body that is nothing but pragma No_Body; (that's the\n          --  whole point of this pragma, to be used this way and to cause the\n@@ -635,8 +634,7 @@ begin\n          if S = No_Source_File then\n             Write_Line\n               (\"fatal error, run-time library not installed correctly\");\n-            Write_Line\n-              (\"cannot locate file system.ads\");\n+            Write_Line (\"cannot locate file system.ads\");\n             raise Unrecoverable_Error;\n \n          --  Remember source index of system.ads (which was read successfully)\n@@ -778,18 +776,14 @@ begin\n       --  subunits. Note that we always generate code for all generic units (a\n       --  change from some previous versions of GNAT).\n \n-      elsif Main_Kind = N_Subprogram_Body\n-        and then not Subunits_Missing\n-      then\n+      elsif Main_Kind = N_Subprogram_Body and then not Subunits_Missing then\n          Back_End_Mode := Generate_Object;\n \n       --  We can generate code for a package body unless there are subunits\n       --  missing (note that we always generate code for generic units, which\n       --  is a change from some earlier versions of GNAT).\n \n-      elsif Main_Kind = N_Package_Body\n-        and then not Subunits_Missing\n-      then\n+      elsif Main_Kind = N_Package_Body and then not Subunits_Missing then\n          Back_End_Mode := Generate_Object;\n \n       --  We can generate code for a package declaration or a subprogram\n@@ -903,17 +897,17 @@ begin\n          Exit_Program (E_No_Code);\n       end if;\n \n-      --  In -gnatc mode, we only do annotation if -gnatt or -gnatR is also\n-      --  set as indicated by Back_Annotate_Rep_Info being set to True.\n+      --  In -gnatc mode, we only do annotation if -gnatt or -gnatR is also set\n+      --  as indicated by Back_Annotate_Rep_Info being set to True.\n \n       --  We don't call for annotations on a subunit, because to process those\n       --  the back-end requires that the parent(s) be properly compiled.\n \n       --  Annotation is suppressed for targets where front-end layout is\n       --  enabled, because the front end determines representations.\n \n-      --  Annotation is also suppressed in the case of compiling for\n-      --  a VM, since representations are largely symbolic there.\n+      --  Annotation is also suppressed in the case of compiling for a VM,\n+      --  since representations are largely symbolic there.\n \n       if Back_End_Mode = Declarations_Only\n         and then (not (Back_Annotate_Rep_Info or Generate_SCIL)\n@@ -1011,11 +1005,10 @@ begin\n \n       Write_ALI (Object => (Back_End_Mode = Generate_Object));\n \n-      --  Generate the ASIS tree after writing the ALI file, since in ASIS\n-      --  mode, Write_ALI may in fact result in further tree decoration from\n-      --  the original tree file. Note that we dump the tree just before\n-      --  generating it, so that the dump will exactly reflect what is written\n-      --  out.\n+      --  Generate ASIS tree after writing the ALI file, since in ASIS mode,\n+      --  Write_ALI may in fact result in further tree decoration from the\n+      --  original tree file. Note that we dump the tree just before generating\n+      --  it, so that the dump will exactly reflect what is written out.\n \n       Treepr.Tree_Dump;\n       Tree_Gen;"}, {"sha": "cfd88289fb747a5a46ccb3819f8898cd229a7349", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676e842077eef03dde5c478d38906d353c81cf1b/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676e842077eef03dde5c478d38906d353c81cf1b/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=676e842077eef03dde5c478d38906d353c81cf1b", "patch": "@@ -3472,10 +3472,9 @@ package body Sem_Ch6 is\n \n    procedure Cannot_Inline (Msg : String; N : Node_Id; Subp : Entity_Id) is\n    begin\n-      --  Do not emit warning if this is a predefined unit which is not\n-      --  the main unit. With validity checks enabled, some predefined\n-      --  subprograms may contain nested subprograms and become ineligible\n-      --  for inlining.\n+      --  Do not emit warning if this is a predefined unit which is not the\n+      --  main unit. With validity checks enabled, some predefined subprograms\n+      --  may contain nested subprograms and become ineligible for inlining.\n \n       if Is_Predefined_File_Name (Unit_File_Name (Get_Source_Unit (Subp)))\n         and then not In_Extended_Main_Source_Unit (Subp)\n@@ -4490,8 +4489,8 @@ package body Sem_Ch6 is\n          end;\n       end if;\n \n-      --  If there is an overridden subprogram, then check that there is not\n-      --  a \"not overriding\" indicator, and mark the subprogram as overriding.\n+      --  If there is an overridden subprogram, then check that there is no\n+      --  \"not overriding\" indicator, and mark the subprogram as overriding.\n       --  This is not done if the overridden subprogram is marked as hidden,\n       --  which can occur for the case of inherited controlled operations\n       --  (see Derive_Subprogram), unless the inherited subprogram's parent\n@@ -4539,7 +4538,7 @@ package body Sem_Ch6 is\n \n       --  If Subp is an operator, it may override a predefined operation, if\n       --  it is defined in the same scope as the type to which it applies.\n-      --  In that case overridden_subp is empty because of our implicit\n+      --  In that case Overridden_Subp is empty because of our implicit\n       --  representation for predefined operators. We have to check whether the\n       --  signature of Subp matches that of a predefined operator. Note that\n       --  first argument provides the name of the operator, and the second\n@@ -4551,7 +4550,7 @@ package body Sem_Ch6 is\n       elsif Nkind (Subp) = N_Defining_Operator_Symbol then\n          declare\n             Typ : constant Entity_Id :=\n-              Base_Type (Etype (First_Formal (Subp)));\n+                    Base_Type (Etype (First_Formal (Subp)));\n \n             Can_Override : constant Boolean :=\n                              Operator_Matches_Spec (Subp, Subp)\n@@ -4573,8 +4572,7 @@ package body Sem_Ch6 is\n \n                elsif Can_Override then\n                   Error_Msg_NE\n-                    (\"subprogram & overrides predefined operator \",\n-                       Spec, Subp);\n+                    (\"subprogram& overrides predefined operator \", Spec, Subp);\n                end if;\n \n             elsif Must_Override (Spec) then"}, {"sha": "467fafadb3827fc8a0647b53ca0313a65bed5ee8", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676e842077eef03dde5c478d38906d353c81cf1b/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676e842077eef03dde5c478d38906d353c81cf1b/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=676e842077eef03dde5c478d38906d353c81cf1b", "patch": "@@ -3865,13 +3865,13 @@ package body Sem_Eval is\n                if No (Typ1) then\n                   Typ1 := E;\n \n-                  --  Before emitting an error, check for the presence of a\n-                  --  mixed-mode operation that specifies a fixed point type.\n+               --  Before emitting an error, check for the presence of a\n+               --  mixed-mode operation that specifies a fixed point type.\n \n                elsif Is_Relational\n                  and then\n                    (Is_Mixed_Mode_Operand (Left_Opnd (N))\n-                    or else Is_Mixed_Mode_Operand (Right_Opnd (N)))\n+                     or else Is_Mixed_Mode_Operand (Right_Opnd (N)))\n                  and then Is_Fixed_Point_Type (E) /= Is_Fixed_Point_Type (Typ1)\n \n                then"}]}