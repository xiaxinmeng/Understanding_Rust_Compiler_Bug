{"sha": "e38c912700f001ea1c8a32533bedb4c802e38d3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM4YzkxMjcwMGYwMDFlYTFjOGEzMjUzM2JlZGI0YzgwMmUzOGQzZg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-12-16T22:52:57Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-12-16T22:53:31Z"}, "message": "test: add new Go tests from source repo", "tree": {"sha": "ab2b5e694da2fca3e5d4c7df2b0ad8f8dbf713cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab2b5e694da2fca3e5d4c7df2b0ad8f8dbf713cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e38c912700f001ea1c8a32533bedb4c802e38d3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e38c912700f001ea1c8a32533bedb4c802e38d3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e38c912700f001ea1c8a32533bedb4c802e38d3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e38c912700f001ea1c8a32533bedb4c802e38d3f/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58a45ce44a9acf3d15fada265d2a391a8e1bc960", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a45ce44a9acf3d15fada265d2a391a8e1bc960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58a45ce44a9acf3d15fada265d2a391a8e1bc960"}], "stats": {"total": 579, "additions": 579, "deletions": 0}, "files": [{"sha": "a7febeae7e0c00e6606ed173857ec8b1fcf9f34c", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug13343.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38c912700f001ea1c8a32533bedb4c802e38d3f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug13343.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38c912700f001ea1c8a32533bedb4c802e38d3f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug13343.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug13343.go?ref=e38c912700f001ea1c8a32533bedb4c802e38d3f", "patch": "@@ -0,0 +1,18 @@\n+// errorcheck\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+var (\n+\ta, b = f() // ERROR \"initialization loop|depends upon itself|depend upon each other\"\n+\tc    = b   // GCCGO_ERROR \"depends upon itself|depend upon each other\"\n+)\n+\n+func f() (int, int) {\n+\treturn c, c\n+}\n+\n+func main() {}"}, {"sha": "94c0fb473094d28f155aa9779ac77d006d5e7199", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug19403.go", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38c912700f001ea1c8a32533bedb4c802e38d3f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug19403.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38c912700f001ea1c8a32533bedb4c802e38d3f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug19403.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug19403.go?ref=e38c912700f001ea1c8a32533bedb4c802e38d3f", "patch": "@@ -0,0 +1,134 @@\n+// run\n+\n+// Copyright 2017 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test for golang.org/issue/19403.\n+// F15 should not be clobbered by float-to-int conversion on ARM.\n+// This test requires enough locals that can be put in registers that the compiler can choose to use F15.\n+package main\n+\n+var count float32 = 16\n+var i0 int\n+var i1 int\n+var i2 int\n+var i3 int\n+var i4 int\n+var i5 int\n+var i6 int\n+var i7 int\n+var i8 int\n+var i9 int\n+var i10 int\n+var i11 int\n+var i12 int\n+var i13 int\n+var i14 int\n+var i15 int\n+var i16 int\n+\n+func main() {\n+\tvar f0 float32 = 0.0\n+\tvar f1 float32 = 1.0\n+\tvar f2 float32 = 2.0\n+\tvar f3 float32 = 3.0\n+\tvar f4 float32 = 4.0\n+\tvar f5 float32 = 5.0\n+\tvar f6 float32 = 6.0\n+\tvar f7 float32 = 7.0\n+\tvar f8 float32 = 8.0\n+\tvar f9 float32 = 9.0\n+\tvar f10 float32 = 10.0\n+\tvar f11 float32 = 11.0\n+\tvar f12 float32 = 12.0\n+\tvar f13 float32 = 13.0\n+\tvar f14 float32 = 14.0\n+\tvar f15 float32 = 15.0\n+\tvar f16 float32 = 16.0\n+\ti0 = int(f0)\n+\ti1 = int(f1)\n+\ti2 = int(f2)\n+\ti3 = int(f3)\n+\ti4 = int(f4)\n+\ti5 = int(f5)\n+\ti6 = int(f6)\n+\ti7 = int(f7)\n+\ti8 = int(f8)\n+\ti9 = int(f9)\n+\ti10 = int(f10)\n+\ti11 = int(f11)\n+\ti12 = int(f12)\n+\ti13 = int(f13)\n+\ti14 = int(f14)\n+\ti15 = int(f15)\n+\ti16 = int(f16)\n+\tif f16 != count {\n+\t\tpanic(\"fail\")\n+\t}\n+\tcount -= 1\n+\tif f15 != count {\n+\t\tpanic(\"fail\")\n+\t}\n+\tcount -= 1\n+\tif f14 != count {\n+\t\tpanic(\"fail\")\n+\t}\n+\tcount -= 1\n+\tif f13 != count {\n+\t\tpanic(\"fail\")\n+\t}\n+\tcount -= 1\n+\tif f12 != count {\n+\t\tpanic(\"fail\")\n+\t}\n+\tcount -= 1\n+\tif f11 != count {\n+\t\tpanic(\"fail\")\n+\t}\n+\tcount -= 1\n+\tif f10 != count {\n+\t\tpanic(\"fail\")\n+\t}\n+\tcount -= 1\n+\tif f9 != count {\n+\t\tpanic(\"fail\")\n+\t}\n+\tcount -= 1\n+\tif f8 != count {\n+\t\tpanic(\"fail\")\n+\t}\n+\tcount -= 1\n+\tif f7 != count {\n+\t\tpanic(\"fail\")\n+\t}\n+\tcount -= 1\n+\tif f6 != count {\n+\t\tpanic(\"fail\")\n+\t}\n+\tcount -= 1\n+\tif f5 != count {\n+\t\tpanic(\"fail\")\n+\t}\n+\tcount -= 1\n+\tif f4 != count {\n+\t\tpanic(\"fail\")\n+\t}\n+\tcount -= 1\n+\tif f3 != count {\n+\t\tpanic(\"fail\")\n+\t}\n+\tcount -= 1\n+\tif f2 != count {\n+\t\tpanic(\"fail\")\n+\t}\n+\tcount -= 1\n+\tif f1 != count {\n+\t\tpanic(\"fail\")\n+\t}\n+\tcount -= 1\n+\tif f0 != count {\n+\t\tpanic(\"fail\")\n+\t}\n+\tcount -= 1\n+}"}, {"sha": "03b53a5b90d29c579ad3f20401270e11a141f09d", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug369.dir/main.go", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38c912700f001ea1c8a32533bedb4c802e38d3f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug369.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38c912700f001ea1c8a32533bedb4c802e38d3f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug369.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug369.dir%2Fmain.go?ref=e38c912700f001ea1c8a32533bedb4c802e38d3f", "patch": "@@ -0,0 +1,55 @@\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"flag\"\n+\t\"os\"\n+\t\"runtime\"\n+\t\"testing\"\n+\n+\tfast \"./fast\"\n+\tslow \"./slow\"\n+)\n+\n+var buf = make([]byte, 1048576)\n+\n+func BenchmarkFastNonASCII(b *testing.B) {\n+\tfor i := 0; i < b.N; i++ {\n+\t\tfast.NonASCII(buf, 0)\n+\t}\n+}\n+\n+func BenchmarkSlowNonASCII(b *testing.B) {\n+\tfor i := 0; i < b.N; i++ {\n+\t\tslow.NonASCII(buf, 0)\n+\t}\n+}\n+\n+func main() {\n+\ttesting.Init()\n+\tos.Args = []string{os.Args[0], \"-test.benchtime=100ms\"}\n+\tflag.Parse()\n+\n+\trslow := testing.Benchmark(BenchmarkSlowNonASCII)\n+\trfast := testing.Benchmark(BenchmarkFastNonASCII)\n+\ttslow := rslow.NsPerOp()\n+\ttfast := rfast.NsPerOp()\n+\n+\t// Optimization should be good for at least 2x, but be forgiving.\n+\t// On the ARM simulator we see closer to 1.5x.\n+\tspeedup := float64(tslow) / float64(tfast)\n+\twant := 1.8\n+\tif runtime.GOARCH == \"arm\" {\n+\t\twant = 1.3\n+\t}\n+\tif speedup < want {\n+\t\t// TODO(rsc): doesn't work on linux-amd64 or darwin-amd64 builders, nor on\n+\t\t// a Lenovo x200 (linux-amd64) laptop.\n+\t\t// println(\"fast:\", tfast, \"slow:\", tslow, \"speedup:\", speedup, \"want:\", want)\n+\t\t// println(\"not fast enough\")\n+\t\t// os.Exit(1)\n+\t}\n+}"}, {"sha": "8db6425be69d1c391c8448ab07eb250ca9ea3fb7", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug483.go", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38c912700f001ea1c8a32533bedb4c802e38d3f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug483.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38c912700f001ea1c8a32533bedb4c802e38d3f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug483.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug483.go?ref=e38c912700f001ea1c8a32533bedb4c802e38d3f", "patch": "@@ -0,0 +1,36 @@\n+// run\n+\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test for a garbage collection bug involving not\n+// marking x as having its address taken by &x[0]\n+// when x is an array value.\n+\n+package main\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"runtime\"\n+)\n+\n+func main() {\n+\tvar x = [4]struct{ x, y interface{} }{\n+\t\t{\"a\", \"b\"},\n+\t\t{\"c\", \"d\"},\n+\t\t{\"e\", \"f\"},\n+\t\t{\"g\", \"h\"},\n+\t}\n+\n+\tvar buf bytes.Buffer\n+\tfor _, z := range x {\n+\t\truntime.GC()\n+\t\tfmt.Fprintf(&buf, \"%s %s \", z.x.(string), z.y.(string))\n+\t}\n+\n+\tif buf.String() != \"a b c d e f g h \" {\n+\t\tprintln(\"BUG wrong output\\n\", buf.String())\n+\t}\n+}"}, {"sha": "bd4fa516a235dbf5d49638f08ddb156fd42eb88c", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug484.go", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38c912700f001ea1c8a32533bedb4c802e38d3f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug484.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38c912700f001ea1c8a32533bedb4c802e38d3f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug484.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug484.go?ref=e38c912700f001ea1c8a32533bedb4c802e38d3f", "patch": "@@ -0,0 +1,78 @@\n+// run\n+\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// The liveness code used to say that, in func g, s was live\n+// starting at its declaration, because it appears to have its\n+// address taken by the closure (different s, but the parser\n+// gets slightly confused, a separate bug). The liveness analysis\n+// saw s as having its address taken but the register optimizer\n+// did not. This mismatch meant that s would be marked live\n+// (and therefore initialized) at the call to f, but the register optimizer\n+// would optimize away the initialization of s before f, causing the\n+// garbage collector to use unused data.\n+// The register optimizer has been changed to respect the\n+// same \"address taken\" flag that the liveness analysis uses,\n+// even if it cannot see any address being taken in the actual\n+// machine code. This is conservative but keeps the two consistent,\n+// which is the most important thing.\n+\n+package main\n+\n+import \"runtime\"\n+\n+//go:noinline\n+func f() interface{} {\n+\truntime.GC()\n+\treturn nil\n+}\n+\n+//go:noinline\n+func g() {\n+\tvar s interface{}\n+\t_ = func() {\n+\t\ts := f()\n+\t\t_ = s\n+\t}\n+\ts = f()\n+\tuseiface(s)\n+\tuseiface(s)\n+}\n+\n+//go:noinline\n+func useiface(x interface{}) {\n+}\n+\n+//go:noinline\n+func h() {\n+\tvar x [16]uintptr\n+\tfor i := range x {\n+\t\tx[i] = 1\n+\t}\n+\n+\tuseint(x[0])\n+\tuseint(x[1])\n+\tuseint(x[2])\n+\tuseint(x[3])\n+}\n+\n+//go:noinline\n+func useint(x uintptr) {\n+}\n+\n+func main() {\n+\t// scribble non-zero values on stack\n+\th()\n+\t// call function that used to let the garbage collector\n+\t// see uninitialized stack values; it will see the\n+\t// nonzero values.\n+\tg()\n+}\n+\n+func big(x int) {\n+\tif x >= 0 {\n+\t\tbig(x - 1)\n+\t}\n+}"}, {"sha": "c99faed43e427d4eb800f5a3c870530c52afb944", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug485.go", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38c912700f001ea1c8a32533bedb4c802e38d3f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug485.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38c912700f001ea1c8a32533bedb4c802e38d3f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug485.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug485.go?ref=e38c912700f001ea1c8a32533bedb4c802e38d3f", "patch": "@@ -0,0 +1,39 @@\n+// run\n+\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Gccgo chose the wrong embedded method when the same type appeared\n+// at different levels and the correct choice was not the first\n+// appearance of the type in a depth-first search.\n+\n+package main\n+\n+type embedded string\n+\n+func (s embedded) val() string {\n+\treturn string(s)\n+}\n+\n+type A struct {\n+\tembedded\n+}\n+\n+type B struct {\n+\tA\n+\tembedded\n+}\n+\n+func main() {\n+\tb := &B{\n+\t\tA: A{\n+\t\t\tembedded: \"a\",\n+\t\t},\n+\t\tembedded: \"b\",\n+\t}\n+\ts := b.val()\n+\tif s != \"b\" {\n+\t\tpanic(s)\n+\t}\n+}"}, {"sha": "9ad23b3cfcb7d68a8a8d243d29cafc793848b9a2", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug486.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38c912700f001ea1c8a32533bedb4c802e38d3f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug486.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38c912700f001ea1c8a32533bedb4c802e38d3f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug486.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug486.go?ref=e38c912700f001ea1c8a32533bedb4c802e38d3f", "patch": "@@ -0,0 +1,14 @@\n+// compile\n+\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// The gccgo lexer had a bug handling nested comments.\n+// http://gcc.gnu.org/PR61746\n+// http://code.google.com/p/gofrontend/issues/detail?id=35\n+\n+package main\n+\n+/*// comment\n+*/"}, {"sha": "387a680aeefdf86489b4ca2e891927144b23ba1c", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug490.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38c912700f001ea1c8a32533bedb4c802e38d3f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug490.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38c912700f001ea1c8a32533bedb4c802e38d3f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug490.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug490.go?ref=e38c912700f001ea1c8a32533bedb4c802e38d3f", "patch": "@@ -0,0 +1,16 @@\n+// compile\n+\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// The gccgo compiler used to crash building a comparison between an\n+// interface and an empty struct literal.\n+\n+package p\n+ \n+type S struct{}\n+\n+func F(v interface{}) bool {\n+\treturn v == S{}\n+}"}, {"sha": "39a3509c69e321640e0064870ec8ac4c105689a6", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug491.go", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38c912700f001ea1c8a32533bedb4c802e38d3f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug491.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38c912700f001ea1c8a32533bedb4c802e38d3f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug491.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug491.go?ref=e38c912700f001ea1c8a32533bedb4c802e38d3f", "patch": "@@ -0,0 +1,110 @@\n+// run\n+\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test order of calls to builtin functions.\n+// Discovered during CL 144530045 review.\n+\n+package main\n+\n+func main() {\n+\t// append\n+\t{\n+\t\tx := make([]int, 0)\n+\t\tf := func() int { x = make([]int, 2); return 2 }\n+\t\ta, b, c := append(x, 1), f(), append(x, 1)\n+\t\tif len(a) != 1 || len(c) != 3 {\n+\t\t\tbug()\n+\t\t\tprintln(\"append call not ordered:\", len(a), b, len(c))\n+\t\t}\n+\t}\n+\n+\t// cap\n+\t{\n+\t\tx := make([]int, 1)\n+\t\tf := func() int { x = make([]int, 3); return 2 }\n+\t\ta, b, c := cap(x), f(), cap(x)\n+\t\tif a != 1 || c != 3 {\n+\t\t\tbug()\n+\t\t\tprintln(\"cap call not ordered:\", a, b, c)\n+\t\t}\n+\t}\n+\n+\t// complex\n+\t{\n+\t\tx := 1.0\n+\t\tf := func() int { x = 3; return 2 }\n+\t\ta, b, c := complex(x, 0), f(), complex(x, 0)\n+\t\tif real(a) != 1 || real(c) != 3 {\n+\t\t\tbug()\n+\t\t\tprintln(\"complex call not ordered:\", a, b, c)\n+\t\t}\n+\t}\n+\n+\t// copy\n+\t{\n+\t\ttmp := make([]int, 100)\n+\t\tx := make([]int, 1)\n+\t\tf := func() int { x = make([]int, 3); return 2 }\n+\t\ta, b, c := copy(tmp, x), f(), copy(tmp, x)\n+\t\tif a != 1 || c != 3 {\n+\t\t\tbug()\n+\t\t\tprintln(\"copy call not ordered:\", a, b, c)\n+\t\t}\n+\t}\n+\n+\t// imag\n+\t{\n+\t\tx := 1i\n+\t\tf := func() int { x = 3i; return 2 }\n+\t\ta, b, c := imag(x), f(), imag(x)\n+\t\tif a != 1 || c != 3 {\n+\t\t\tbug()\n+\t\t\tprintln(\"imag call not ordered:\", a, b, c)\n+\t\t}\n+\t}\n+\n+\t// len\n+\t{\n+\t\tx := make([]int, 1)\n+\t\tf := func() int { x = make([]int, 3); return 2 }\n+\t\ta, b, c := len(x), f(), len(x)\n+\t\tif a != 1 || c != 3 {\n+\t\t\tbug()\n+\t\t\tprintln(\"len call not ordered:\", a, b, c)\n+\t\t}\n+\t}\n+\n+\t// make\n+\t{\n+\t\tx := 1\n+\t\tf := func() int { x = 3; return 2 }\n+\t\ta, b, c := make([]int, x), f(), make([]int, x)\n+\t\tif len(a) != 1 || len(c) != 3 {\n+\t\t\tbug()\n+\t\t\tprintln(\"make call not ordered:\", len(a), b, len(c))\n+\t\t}\n+\t}\n+\n+\t// real\n+\t{\n+\t\tx := 1 + 0i\n+\t\tf := func() int { x = 3; return 2 }\n+\t\ta, b, c := real(x), f(), real(x)\n+\t\tif a != 1 || c != 3 {\n+\t\t\tbug()\n+\t\t\tprintln(\"real call not ordered:\", a, b, c)\n+\t\t}\n+\t}\n+}\n+\n+var bugged = false\n+\n+func bug() {\n+\tif !bugged {\n+\t\tprintln(\"BUG\")\n+\t\tbugged = true\n+\t}\n+}\n\\ No newline at end of file"}, {"sha": "dfc0c9f803f66e253708126d41d224916f0f8310", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug495.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38c912700f001ea1c8a32533bedb4c802e38d3f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug495.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38c912700f001ea1c8a32533bedb4c802e38d3f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug495.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug495.go?ref=e38c912700f001ea1c8a32533bedb4c802e38d3f", "patch": "@@ -0,0 +1,20 @@\n+// compile\n+\n+// Copyright 2015 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Gccgo used to give an incorrect error\n+// bug495.go:16:2: error: missing statement after label\n+\n+package p\n+\n+func F(i int) {\n+\tswitch i {\n+\tcase 0:\n+\t\tgoto lab\n+\tlab:\n+\t\tfallthrough\n+\tcase 1:\n+\t}\n+}"}, {"sha": "91b5c2f6885e1af6c190cfdf7804bebf8a468c86", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug498.go", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38c912700f001ea1c8a32533bedb4c802e38d3f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug498.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38c912700f001ea1c8a32533bedb4c802e38d3f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug498.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug498.go?ref=e38c912700f001ea1c8a32533bedb4c802e38d3f", "patch": "@@ -0,0 +1,23 @@\n+// run\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Gccgo incorrectly rejected an assignment to multiple instances of\n+// the same variable.\n+\n+package main\n+\n+var a int\n+\n+func F() {\n+\ta, a, a = 1, 2, 3\n+}\n+\n+func main() {\n+\tF()\n+\tif a != 3 {\n+\t\tpanic(a)\n+\t}\n+}"}, {"sha": "db1cfef366d5500182ed07674a31347c0956b34a", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug510.dir/a.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38c912700f001ea1c8a32533bedb4c802e38d3f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug510.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38c912700f001ea1c8a32533bedb4c802e38d3f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug510.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug510.dir%2Fa.go?ref=e38c912700f001ea1c8a32533bedb4c802e38d3f", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2020 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+import \"reflect\"\n+\n+type A = map[int] bool\n+\n+func F() interface{} {\n+\treturn reflect.New(reflect.TypeOf((*A)(nil))).Elem().Interface()\n+}"}, {"sha": "56b0201858cac39d0776c5552c08882aebaba2cb", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug510.dir/b.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38c912700f001ea1c8a32533bedb4c802e38d3f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug510.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38c912700f001ea1c8a32533bedb4c802e38d3f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug510.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug510.dir%2Fb.go?ref=e38c912700f001ea1c8a32533bedb4c802e38d3f", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2020 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"./a\"\n+\n+func main() {\n+\t_, ok := a.F().(*map[int]bool)\n+\tif !ok {\n+\t\tpanic(\"bad type\")\n+\t}\n+}"}, {"sha": "8a6da5dfd6a35ba685863a482eb0e0e030a7c3eb", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug510.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e38c912700f001ea1c8a32533bedb4c802e38d3f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug510.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e38c912700f001ea1c8a32533bedb4c802e38d3f/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug510.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug510.go?ref=e38c912700f001ea1c8a32533bedb4c802e38d3f", "patch": "@@ -0,0 +1,9 @@\n+// rundir\n+\n+// Copyright 2020 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Gccgo confused type descriptors for aliases.\n+\n+package ignored"}]}