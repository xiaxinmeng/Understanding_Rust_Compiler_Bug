{"sha": "bc44baadce0f8c990e87b6b8876756f695e28326", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM0NGJhYWRjZTBmOGM5OTBlODdiNmI4ODc2NzU2ZjY5NWUyODMyNg==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2011-01-28T23:35:59Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2011-01-28T23:35:59Z"}, "message": "re PR preprocessor/47311 ([C++0x] ICE in tsubst @cp/pt.c:10502)\n\nFix PR c++/47311\n\ngcc/cp/\n\n\tPR c++/47311\n\t* cp-tree.h (fixup_template_parms): Declare.\n\t* pt.c (end_template_parm_list): Do not fixup template parms here.\n\t(fixup_template_parms): Remove static. Fix typo in the\n\tcomments. Remove useless code statement.\n\t(fixup_template_parm): For a template template parameter, fixup\n\tits attributes before fixing up its type.\n\t* parser.c\n\t(cp_parser_template_declaration_after_export): After parsing\n\ttemplate parameters fixup their types.\n\ngcc/testsuite/\n\n\tPR c++/47311\n\t* g++.dg/template/param2.C: New test.\n\nFrom-SVN: r169377", "tree": {"sha": "f6331eb712bb93cb702bf05a9c41335d882dacb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6331eb712bb93cb702bf05a9c41335d882dacb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc44baadce0f8c990e87b6b8876756f695e28326", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc44baadce0f8c990e87b6b8876756f695e28326", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc44baadce0f8c990e87b6b8876756f695e28326", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc44baadce0f8c990e87b6b8876756f695e28326/comments", "author": null, "committer": null, "parents": [{"sha": "46adbf0c6b9b8019e1ee4586c8b85096f102e8b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46adbf0c6b9b8019e1ee4586c8b85096f102e8b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46adbf0c6b9b8019e1ee4586c8b85096f102e8b3"}], "stats": {"total": 70, "additions": 49, "deletions": 21}, "files": [{"sha": "b38ed5fa10d78bfb836df1377e587ff5c9cddc67", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc44baadce0f8c990e87b6b8876756f695e28326/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc44baadce0f8c990e87b6b8876756f695e28326/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bc44baadce0f8c990e87b6b8876756f695e28326", "patch": "@@ -1,3 +1,16 @@\n+2011-01-29  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/47311\n+\t* cp-tree.h (fixup_template_parms): Declare.\n+\t* pt.c (end_template_parm_list): Do not fixup template parms here.\n+\t(fixup_template_parms): Remove static. Fix typo in the\n+\tcomments. Remove useless code statement.\n+\t(fixup_template_parm): For a template template parameter, fixup\n+\tits attributes before fixing up its type.\n+\t* parser.c\n+\t(cp_parser_template_declaration_after_export): After parsing\n+\ttemplate parameters fixup their types.\n+\n 2011-01-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/47476"}, {"sha": "934dab8c451c16c999d10652e778c043e385dfe9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc44baadce0f8c990e87b6b8876756f695e28326/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc44baadce0f8c990e87b6b8876756f695e28326/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=bc44baadce0f8c990e87b6b8876756f695e28326", "patch": "@@ -5025,6 +5025,7 @@ extern bool is_auto\t\t\t\t(const_tree);\n extern tree process_template_parm\t\t(tree, location_t, tree, \n \t\t\t\t\t\t bool, bool, unsigned);\n extern tree end_template_parm_list\t\t(tree);\n+void fixup_template_parms (void);\n extern void end_template_decl\t\t\t(void);\n extern tree maybe_update_decl_type\t\t(tree, tree);\n extern bool check_default_tmpl_args             (tree, tree, int, int, int);"}, {"sha": "2b6a752629cc8a6b10b8173196714d897ec8c6ac", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc44baadce0f8c990e87b6b8876756f695e28326/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc44baadce0f8c990e87b6b8876756f695e28326/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=bc44baadce0f8c990e87b6b8876756f695e28326", "patch": "@@ -19919,8 +19919,11 @@ cp_parser_template_declaration_after_export (cp_parser* parser, bool member_p)\n       parameter_list = NULL_TREE;\n     }\n   else\n-    /* Parse the template parameters.  */\n-    parameter_list = cp_parser_template_parameter_list (parser);\n+    {\n+      /* Parse the template parameters.  */\n+      parameter_list = cp_parser_template_parameter_list (parser);\n+      fixup_template_parms ();\n+    }\n \n   /* Get the deferred access checks from the parameter list.  These\n      will be checked once we know what is being declared, as for a"}, {"sha": "d59f32a7ea787e19cae8c8302957bace259dbae6", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc44baadce0f8c990e87b6b8876756f695e28326/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc44baadce0f8c990e87b6b8876756f695e28326/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=bc44baadce0f8c990e87b6b8876756f695e28326", "patch": "@@ -194,7 +194,6 @@ static tree template_parm_to_arg (tree t);\n static tree current_template_args (void);\n static tree fixup_template_type_parm_type (tree, int);\n static tree fixup_template_parm_index (tree, tree, int);\n-static void fixup_template_parms (void);\n static tree tsubst_template_parm (tree, tree, tsubst_flags_t);\n \n /* Make the current scope suitable for access checking when we are\n@@ -3614,8 +3613,6 @@ end_template_parm_list (tree parms)\n       TREE_CHAIN (parm) = NULL_TREE;\n     }\n \n-  fixup_template_parms ();\n-\n   --processing_template_parmlist;\n \n   return saved_parmlist;\n@@ -3774,21 +3771,16 @@ fixup_template_parm (tree parm_desc,\n     {\n       /* PARM is a template template parameter. This is going to\n \t be interesting.  */\n-      tree tparms, targs, innermost_args;\n+      tree tparms, targs, innermost_args, t;\n       int j;\n \n-      /* First, fix up the type of the parm.  */\n+      /* First, fix up the parms of the template template parm\n+\t because the parms are involved in defining the new canonical\n+\t type of the template template parm.  */\n \n-      tree t =\n-\tfixup_template_type_parm_type (TREE_TYPE (parm), num_parms);\n-      TREE_TYPE (parm) = t;\n-\n-      TREE_VEC_ELT (fixedup_args, idx) =\n-\ttemplate_parm_to_arg (parm_desc);\n-\n-      /* Now we need to substitute the template parm types that\n-\t have been fixed up so far into the non-type template\n-\t parms of this template template parm. E.g, consider this:\n+      /* So we need to substitute the template parm types that have\n+\t been fixed up so far into the template parms of this template\n+\t template parm. E.g, consider this:\n \n \t template<class T, template<T u> class TT> class S;\n \n@@ -3827,6 +3819,14 @@ fixup_template_parm (tree parm_desc,\n \t\t\t       TREE_VEC_LENGTH (tparms),\n \t\t\t       targs);\n \t}\n+\n+      /* Now fix up the type of the template template parm.  */\n+\n+      t = fixup_template_type_parm_type (TREE_TYPE (parm), num_parms);\n+      TREE_TYPE (parm) = t;\n+\n+      TREE_VEC_ELT (fixedup_args, idx) =\n+\ttemplate_parm_to_arg (parm_desc);\n     }\n   else if (TREE_CODE (parm) == PARM_DECL)\n     {\n@@ -3882,11 +3882,11 @@ fixup_template_parm (tree parm_desc,\n   pop_deferring_access_checks ();\n }\n \n-/* Walk current the template parms and properly compute the canonical\n+/* Walk the current template parms and properly compute the canonical\n    types of the dependent types created during\n    cp_parser_template_parameter_list.  */\n \n-static void\n+void\n fixup_template_parms (void)\n {\n   tree arglist;\n@@ -3911,8 +3911,6 @@ fixup_template_parms (void)\n   arglist = current_template_args ();\n   arglist = add_outermost_template_args (arglist, fixedup_args);\n \n-  fixedup_args = INNERMOST_TEMPLATE_ARGS (arglist);\n-\n   /* Let's do the proper fixup now.  */\n   for (i = 0; i < num_parms; ++i)\n     fixup_template_parm (TREE_VEC_ELT (parameter_vec, i),"}, {"sha": "f6f203dd9b01ff70dbeb96f04d7e8c28244ac902", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc44baadce0f8c990e87b6b8876756f695e28326/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc44baadce0f8c990e87b6b8876756f695e28326/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bc44baadce0f8c990e87b6b8876756f695e28326", "patch": "@@ -1,3 +1,8 @@\n+2011-01-29  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/47311\n+\t* g++.dg/template/param2.C: New test.\n+\n 2011-01-28  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/47285"}, {"sha": "d25b85565dd98affda1bc6510a4221a894c45010", "filename": "gcc/testsuite/g++.dg/template/param2.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc44baadce0f8c990e87b6b8876756f695e28326/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fparam2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc44baadce0f8c990e87b6b8876756f695e28326/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fparam2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fparam2.C?ref=bc44baadce0f8c990e87b6b8876756f695e28326", "patch": "@@ -0,0 +1,8 @@\n+// Origin PR c++/47311\n+// { dg-do compile }\n+\n+template < typename > class A0;\n+template <class Key, class T, template < typename TF = T> class TC = A0> class B0;\n+\n+template <int> class A1;\n+template <class Key, class T, template <T p> class TC = A1> class B1;"}]}