{"sha": "ac746f1dbbf2c573671d60cc66d3d8b81c19db7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM3NDZmMWRiYmYyYzU3MzY3MWQ2MGNjNjZkM2Q4YjgxYzE5ZGI3YQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2004-10-21T17:22:01Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-10-21T17:22:01Z"}, "message": "dbxout.c: Remove unnecessary #undefs.\n\n\t* dbxout.c: Remove unnecessary #undefs.\n\t(GDB_INV_REF_REGPARM_STABS_LETTER, DBX_MEMPARM_STABS_LETTER)\n\t(FILE_NAME_JOINER, STABS_GCC_MARKER): Remove; fold sole\n\tdefinition into use sites.\n\t(cwd): Make local to dbxout_init.\n\t(dbxout_init): Restructure cwd-using logic for clarity.  Use\n\tIS_DIR_SEPARATOR.\n\t* xcoffout.h (DBX_OUTPUT_GCC_MARKER): Definition of\n\tSTABS_GCC_MARKER folded in here.\n\t* system.h: Poison now-unused macros.\n\t* doc/tm.texi: Remove documentation of now-unused macros.\n\nFrom-SVN: r89387", "tree": {"sha": "3f7c38c992bb23c2107b7821ad4f09e8256e9c94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f7c38c992bb23c2107b7821ad4f09e8256e9c94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac746f1dbbf2c573671d60cc66d3d8b81c19db7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac746f1dbbf2c573671d60cc66d3d8b81c19db7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac746f1dbbf2c573671d60cc66d3d8b81c19db7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac746f1dbbf2c573671d60cc66d3d8b81c19db7a/comments", "author": null, "committer": null, "parents": [{"sha": "3e6da82b7ec95cead54358963912cfdba6d578d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e6da82b7ec95cead54358963912cfdba6d578d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e6da82b7ec95cead54358963912cfdba6d578d9"}], "stats": {"total": 107, "additions": 48, "deletions": 59}, "files": [{"sha": "ac65d524d60dad4e9ecb08f884d67925c1bea7e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac746f1dbbf2c573671d60cc66d3d8b81c19db7a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac746f1dbbf2c573671d60cc66d3d8b81c19db7a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac746f1dbbf2c573671d60cc66d3d8b81c19db7a", "patch": "@@ -1,3 +1,17 @@\n+2004-10-21  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* dbxout.c: Remove unnecessary #undefs.\n+\t(GDB_INV_REF_REGPARM_STABS_LETTER, DBX_MEMPARM_STABS_LETTER)\n+\t(FILE_NAME_JOINER, STABS_GCC_MARKER): Remove; fold sole\n+\tdefinition into use sites.\n+\t(cwd): Make local to dbxout_init.\n+\t(dbxout_init): Restructure cwd-using logic for clarity.  Use\n+\tIS_DIR_SEPARATOR.\n+\t* xcoffout.h (DBX_OUTPUT_GCC_MARKER): Definition of\n+\tSTABS_GCC_MARKER folded in here.\n+\t* system.h: Poison now-unused macros.\n+\t* doc/tm.texi: Remove documentation of now-unused macros.\n+\n 2004-10-21  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c/17538"}, {"sha": "077cc498a3270ec00de14f480e272629caf760c4", "filename": "gcc/dbxout.c", "status": "modified", "additions": 29, "deletions": 52, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac746f1dbbf2c573671d60cc66d3d8b81c19db7a/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac746f1dbbf2c573671d60cc66d3d8b81c19db7a/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=ac746f1dbbf2c573671d60cc66d3d8b81c19db7a", "patch": "@@ -93,12 +93,10 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"xcoffout.h\"\n #endif\n \n-#undef DBXOUT_DECR_NESTING\n #define DBXOUT_DECR_NESTING \\\n   if (--debug_nesting == 0 && symbol_queue_index > 0) \\\n     { emit_pending_bincls_if_required (); debug_flush_symbol_queue (); }\n \n-#undef DBXOUT_DECR_NESTING_AND_RETURN\n #define DBXOUT_DECR_NESTING_AND_RETURN(x) \\\n   do {--debug_nesting; return (x);} while (0)\n \n@@ -126,26 +124,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define DBX_REGPARM_STABS_LETTER 'P'\n #endif\n \n-/* This is used for parameters passed by invisible reference in a register.  */\n-#ifndef GDB_INV_REF_REGPARM_STABS_LETTER\n-#define GDB_INV_REF_REGPARM_STABS_LETTER 'a'\n-#endif\n-\n-#ifndef DBX_MEMPARM_STABS_LETTER\n-#define DBX_MEMPARM_STABS_LETTER 'p'\n-#endif\n-\n-#ifndef FILE_NAME_JOINER\n-#define FILE_NAME_JOINER \"/\"\n-#endif\n-\n-/* GDB needs to know that the stabs were generated by GCC.  We emit an\n-   N_OPT stab at the beginning of the source file to indicate this.\n-   The string is historical, and different on a very few targets.  */\n-#ifndef STABS_GCC_MARKER\n-#define STABS_GCC_MARKER \"gcc2_compiled.\"\n-#endif\n-\n #ifndef NO_DBX_FUNCTION_END\n #define NO_DBX_FUNCTION_END 0\n #endif\n@@ -275,10 +253,6 @@ static int pending_bincls = 0;\n /* The original input file name.  */\n static const char *base_input_file;\n \n-/* Current working directory.  */\n-\n-static const char *cwd;\n-\n #ifdef DEBUG_SYMS_TEXT\n #define FORCE_TEXT function_section (current_function_decl);\n #else\n@@ -546,21 +520,26 @@ dbxout_init (const char *input_file_name)\n   /* Put the current working directory in an N_SO symbol.  */\n   if (use_gnu_debug_info_extensions)\n     {\n-      if (!cwd && (cwd = get_src_pwd ())\n-\t  && (!*cwd || cwd[strlen (cwd) - 1] != '/'))\n-\tcwd = concat (cwd, FILE_NAME_JOINER, NULL);\n-      if (cwd)\n+      static const char *cwd;\n+\n+      if (!cwd)\n \t{\n+\t  cwd = get_src_pwd ();\n+\t  if (cwd[0] == '\\0')\n+\t    cwd = \"/\";\n+\t  else if (!IS_DIR_SEPARATOR (cwd[strlen (cwd) - 1]))\n+\t    cwd = concat (cwd, \"/\", NULL);\n+\t}\n+\n #ifdef DBX_OUTPUT_MAIN_SOURCE_DIRECTORY\n-\t  DBX_OUTPUT_MAIN_SOURCE_DIRECTORY (asm_out_file, cwd);\n+      DBX_OUTPUT_MAIN_SOURCE_DIRECTORY (asm_out_file, cwd);\n #else /* no DBX_OUTPUT_MAIN_SOURCE_DIRECTORY */\n-\t  fprintf (asm_out_file, \"%s\", ASM_STABS_OP);\n-\t  output_quoted_string (asm_out_file, cwd);\n-\t  fprintf (asm_out_file, \",%d,0,%d,\", N_SO, get_lang_number ());\n-\t  assemble_name (asm_out_file, ltext_label_name);\n-\t  fputc ('\\n', asm_out_file);\n+      fprintf (asm_out_file, \"%s\", ASM_STABS_OP);\n+      output_quoted_string (asm_out_file, cwd);\n+      fprintf (asm_out_file, \",%d,0,%d,\", N_SO, get_lang_number ());\n+      assemble_name (asm_out_file, ltext_label_name);\n+      fputc ('\\n', asm_out_file);\n #endif /* no DBX_OUTPUT_MAIN_SOURCE_DIRECTORY */\n-\t}\n     }\n \n #ifdef DBX_OUTPUT_MAIN_SOURCE_FILENAME\n@@ -581,9 +560,10 @@ dbxout_init (const char *input_file_name)\n #ifdef DBX_OUTPUT_GCC_MARKER\n   DBX_OUTPUT_GCC_MARKER (asm_out_file);\n #else\n-  /* Emit an N_OPT stab to indicate that this file was compiled by GCC.  */\n-  fprintf (asm_out_file, \"%s\\\"%s\\\",%d,0,0,0\\n\",\n-\t   ASM_STABS_OP, STABS_GCC_MARKER, N_OPT);\n+  /* Emit an N_OPT stab to indicate that this file was compiled by GCC.\n+     The string used is historical.  */\n+  fprintf (asm_out_file, \"%s\\\"gcc2_compiled.\\\",%d,0,0,0\\n\",\n+\t   ASM_STABS_OP, N_OPT);\n #endif\n \n   base_input_file = lastfile = input_file_name;\n@@ -2865,16 +2845,13 @@ dbxout_parms (tree parms)\n \t    if (DECL_NAME (parms))\n \t      {\n \t\tcurrent_sym_nchars = 2 + IDENTIFIER_LENGTH (DECL_NAME (parms));\n-\n-\t\tfprintf (asm_out_file, \"%s\\\"%s:%c\", ASM_STABS_OP,\n-\t\t\t IDENTIFIER_POINTER (DECL_NAME (parms)),\n-\t\t\t DBX_MEMPARM_STABS_LETTER);\n+\t\tfprintf (asm_out_file, \"%s\\\"%s:p\", ASM_STABS_OP,\n+\t\t\t IDENTIFIER_POINTER (DECL_NAME (parms)));\n \t      }\n \t    else\n \t      {\n \t\tcurrent_sym_nchars = 8;\n-\t\tfprintf (asm_out_file, \"%s\\\"(anon):%c\", ASM_STABS_OP,\n-\t\t\t DBX_MEMPARM_STABS_LETTER);\n+\t\tfprintf (asm_out_file, \"%s\\\"(anon):p\", ASM_STABS_OP);\n \t      }\n \n \t    /* It is quite tempting to use:\n@@ -2964,8 +2941,10 @@ dbxout_parms (tree parms)\n \t    /* Parm passed in registers and lives in registers or nowhere.  */\n \n \t    current_sym_code = DBX_REGPARM_STABS_CODE;\n+\n \t    if (use_gnu_debug_info_extensions)\n-\t      regparm_letter = GDB_INV_REF_REGPARM_STABS_LETTER;\n+\t      /* GDB likes this marked with a special letter.  */\n+\t      regparm_letter = 'a';\n \t    else\n \t      regparm_letter = DBX_REGPARM_STABS_LETTER;\n \n@@ -3065,15 +3044,13 @@ dbxout_parms (tree parms)\n \t\tcurrent_sym_nchars\n \t\t  = 2 + strlen (IDENTIFIER_POINTER (DECL_NAME (parms)));\n \n-\t\tfprintf (asm_out_file, \"%s\\\"%s:%c\", ASM_STABS_OP,\n-\t\t\t IDENTIFIER_POINTER (DECL_NAME (parms)),\n-\t\t\t DBX_MEMPARM_STABS_LETTER);\n+\t\tfprintf (asm_out_file, \"%s\\\"%s:p\", ASM_STABS_OP,\n+\t\t\t IDENTIFIER_POINTER (DECL_NAME (parms)));\n \t      }\n \t    else\n \t      {\n \t\tcurrent_sym_nchars = 8;\n-\t\tfprintf (asm_out_file, \"%s\\\"(anon):%c\", ASM_STABS_OP,\n-\t\tDBX_MEMPARM_STABS_LETTER);\n+\t\tfprintf (asm_out_file, \"%s\\\"(anon):p\", ASM_STABS_OP);\n \t      }\n \n \t    current_sym_value"}, {"sha": "d7e13e9b0411786240629bce6d0284bc4d946fc4", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac746f1dbbf2c573671d60cc66d3d8b81c19db7a/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac746f1dbbf2c573671d60cc66d3d8b81c19db7a/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=ac746f1dbbf2c573671d60cc66d3d8b81c19db7a", "patch": "@@ -7966,11 +7966,6 @@ passed in registers.  DBX format does not customarily provide any way to\n do this.  The default is @code{'P'}.\n @end defmac\n \n-@defmac DBX_MEMPARM_STABS_LETTER\n-The letter to use in DBX symbol data to identify a symbol as a stack\n-parameter.  The default is @code{'p'}.\n-@end defmac\n-\n @defmac DBX_FUNCTION_FIRST\n Define this macro if the DBX information for a function and its\n arguments should precede the assembler code for the function.  Normally,"}, {"sha": "56f5ff028eba0316ffc9b8cb638bd40c0b179704", "filename": "gcc/system.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac746f1dbbf2c573671d60cc66d3d8b81c19db7a/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac746f1dbbf2c573671d60cc66d3d8b81c19db7a/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=ac746f1dbbf2c573671d60cc66d3d8b81c19db7a", "patch": "@@ -653,7 +653,10 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tSUNOS4_SHARED_LIBRARIES PROMOTE_FOR_CALL_ONLY\t\t\t   \\\n \tSPACE_AFTER_L_OPTION NO_RECURSIVE_FUNCTION_CSE\t\t\t   \\\n \tDEFAULT_MAIN_RETURN TARGET_MEM_FUNCTIONS EXPAND_BUILTIN_VA_ARG\t   \\\n-\tCOLLECT_PARSE_FLAG DWARF2_GENERATE_TEXT_SECTION_LABEL\n+\tCOLLECT_PARSE_FLAG DWARF2_GENERATE_TEXT_SECTION_LABEL WINNING_GDB  \\\n+\tASM_OUTPUT_FILENAME ASM_OUTPUT_SOURCE_LINE FILE_NAME_JOINER\t   \\\n+\tGDB_INV_REF_REGPARM_STABS_LETTER DBX_MEMPARM_STABS_LETTER\t   \\\n+\tPUT_SDB_SRC_FILE STABS_GCC_MARKER\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}, {"sha": "597d8e1c08168a0495c4e18ce5e4cd779a6452f3", "filename": "gcc/xcoffout.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac746f1dbbf2c573671d60cc66d3d8b81c19db7a/gcc%2Fxcoffout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac746f1dbbf2c573671d60cc66d3d8b81c19db7a/gcc%2Fxcoffout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.h?ref=ac746f1dbbf2c573671d60cc66d3d8b81c19db7a", "patch": "@@ -153,7 +153,7 @@ extern const char *xcoff_lastfile;\n /* .stabx has the type in a different place.  */\n #if 0  /* Do not emit any marker for XCOFF until assembler allows XFT_CV.  */\n #define DBX_OUTPUT_GCC_MARKER(FILE) \\\n-  fprintf ((FILE), \"%s\\\"%s\\\",0,%d,0\\n\", ASM_STABS_OP, STABS_GCC_MARKER, \\\n+  fprintf ((FILE), \"%s\\\"gcc2_compiled.\\\",0,%d,0\\n\", ASM_STABS_OP, \\\n \t   stab_to_sclass (N_GSYM))\n #else\n #define DBX_OUTPUT_GCC_MARKER(FILE)"}]}