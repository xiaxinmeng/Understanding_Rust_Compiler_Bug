{"sha": "170e618ef559a9b1220174c1d33cd7e5b1045cc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTcwZTYxOGVmNTU5YTliMTIyMDE3NGMxZDMzY2Q3ZTViMTA0NWNjOA==", "commit": {"author": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2020-11-25T16:31:41Z"}, "committer": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2020-11-25T16:35:37Z"}, "message": "libsanitizer:  Add option to bootstrap using HWASAN\n\nThis is an analogous option to --bootstrap-asan to configure.  It allows\nbootstrapping GCC using HWASAN.\n\nFor the same reasons as for ASAN we have to avoid using the HWASAN\nsanitizer when compiling libiberty and the lto-plugin.\n\nAlso add a function to query whether -fsanitize=hwaddress has been\npassed.\n\nChangeLog:\n\n\t* configure: Regenerate.\n\t* configure.ac: Add --bootstrap-hwasan option.\n\nconfig/ChangeLog:\n\n\t* bootstrap-hwasan.mk: New file.\n\ngcc/ChangeLog:\n\n\t* doc/install.texi: Document new option.\n\nlibiberty/ChangeLog:\n\n\t* configure: Regenerate.\n\t* configure.ac: Avoid using sanitizer.\n\nlto-plugin/ChangeLog:\n\n\t* Makefile.am: Avoid using sanitizer.\n\t* Makefile.in: Regenerate.", "tree": {"sha": "e3cc338dd0968385848cd2fb1c6afa104e213883", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3cc338dd0968385848cd2fb1c6afa104e213883"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/170e618ef559a9b1220174c1d33cd7e5b1045cc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/170e618ef559a9b1220174c1d33cd7e5b1045cc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/170e618ef559a9b1220174c1d33cd7e5b1045cc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/170e618ef559a9b1220174c1d33cd7e5b1045cc8/comments", "author": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a769f816f8af7a8aac6f16874011c3e15280e38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a769f816f8af7a8aac6f16874011c3e15280e38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a769f816f8af7a8aac6f16874011c3e15280e38"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "4f60bed3fd6e98b47a3a38aea6eba2a7c320da25", "filename": "config/bootstrap-hwasan.mk", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/170e618ef559a9b1220174c1d33cd7e5b1045cc8/config%2Fbootstrap-hwasan.mk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/170e618ef559a9b1220174c1d33cd7e5b1045cc8/config%2Fbootstrap-hwasan.mk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fbootstrap-hwasan.mk?ref=170e618ef559a9b1220174c1d33cd7e5b1045cc8", "patch": "@@ -0,0 +1,8 @@\n+# This option enables -fsanitize=hwaddress for stage2 and stage3.\n+\n+STAGE2_CFLAGS += -fsanitize=hwaddress\n+STAGE3_CFLAGS += -fsanitize=hwaddress\n+POSTSTAGE1_LDFLAGS += -fsanitize=hwaddress -static-libhwasan \\\n+\t\t      -B$$r/prev-$(TARGET_SUBDIR)/libsanitizer/ \\\n+\t\t      -B$$r/prev-$(TARGET_SUBDIR)/libsanitizer/hwasan/ \\\n+\t\t      -B$$r/prev-$(TARGET_SUBDIR)/libsanitizer/hwasan/.libs"}, {"sha": "b41a258c80ee9f289de534185eb364bcb5ca6ae5", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/170e618ef559a9b1220174c1d33cd7e5b1045cc8/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/170e618ef559a9b1220174c1d33cd7e5b1045cc8/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=170e618ef559a9b1220174c1d33cd7e5b1045cc8", "patch": "@@ -9305,7 +9305,7 @@ fi\n # or bootstrap-ubsan, bootstrap it.\n if echo \" ${target_configdirs} \" | grep \" libsanitizer \" > /dev/null 2>&1; then\n   case \"$BUILD_CONFIG\" in\n-    *bootstrap-asan* | *bootstrap-ubsan* )\n+    *bootstrap-hwasan* | *bootstrap-asan* | *bootstrap-ubsan* )\n       bootstrap_target_libs=${bootstrap_target_libs}target-libsanitizer,\n       bootstrap_fixincludes=yes\n       ;;"}, {"sha": "944f30cfea84e9266b4322df7902b867882d4d8c", "filename": "configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/170e618ef559a9b1220174c1d33cd7e5b1045cc8/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/170e618ef559a9b1220174c1d33cd7e5b1045cc8/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=170e618ef559a9b1220174c1d33cd7e5b1045cc8", "patch": "@@ -2814,7 +2814,7 @@ fi\n # or bootstrap-ubsan, bootstrap it.\n if echo \" ${target_configdirs} \" | grep \" libsanitizer \" > /dev/null 2>&1; then\n   case \"$BUILD_CONFIG\" in\n-    *bootstrap-asan* | *bootstrap-ubsan* )\n+    *bootstrap-hwasan* | *bootstrap-asan* | *bootstrap-ubsan* )\n       bootstrap_target_libs=${bootstrap_target_libs}target-libsanitizer,\n       bootstrap_fixincludes=yes\n       ;;"}, {"sha": "5f879ca4cea863e8bfc4cf5512b6963a5e49c7aa", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/170e618ef559a9b1220174c1d33cd7e5b1045cc8/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/170e618ef559a9b1220174c1d33cd7e5b1045cc8/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=170e618ef559a9b1220174c1d33cd7e5b1045cc8", "patch": "@@ -2805,6 +2805,11 @@ the build tree.\n Compiles GCC itself using Address Sanitization in order to catch invalid memory\n accesses within the GCC code.\n \n+@item @samp{bootstrap-hwasan}\n+Compiles GCC itself using HWAddress Sanitization in order to catch invalid\n+memory accesses within the GCC code.  This option is only available on AArch64\n+systems that are running Linux kernel version 5.4 or later.\n+\n @end table\n \n @section Building a cross compiler"}, {"sha": "b6af9baf21204a323cad0e7b40a426c72988ba3b", "filename": "libiberty/configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/170e618ef559a9b1220174c1d33cd7e5b1045cc8/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/170e618ef559a9b1220174c1d33cd7e5b1045cc8/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=170e618ef559a9b1220174c1d33cd7e5b1045cc8", "patch": "@@ -5264,6 +5264,7 @@ fi\n NOASANFLAG=\n case \" ${CFLAGS} \" in\n   *\\ -fsanitize=address\\ *) NOASANFLAG=-fno-sanitize=address ;;\n+  *\\ -fsanitize=hwaddress\\ *) NOASANFLAG=-fno-sanitize=hwaddress ;;\n esac\n \n "}, {"sha": "ad952963971a31968b5d109661b9cab0aa4b95fc", "filename": "libiberty/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/170e618ef559a9b1220174c1d33cd7e5b1045cc8/libiberty%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/170e618ef559a9b1220174c1d33cd7e5b1045cc8/libiberty%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure.ac?ref=170e618ef559a9b1220174c1d33cd7e5b1045cc8", "patch": "@@ -240,6 +240,7 @@ AC_SUBST(PICFLAG)\n NOASANFLAG=\n case \" ${CFLAGS} \" in\n   *\\ -fsanitize=address\\ *) NOASANFLAG=-fno-sanitize=address ;;\n+  *\\ -fsanitize=hwaddress\\ *) NOASANFLAG=-fno-sanitize=hwaddress ;;\n esac\n AC_SUBST(NOASANFLAG)\n "}, {"sha": "8b20e1d1d87e2dda9f37763492ddf39a8022c48c", "filename": "lto-plugin/Makefile.am", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/170e618ef559a9b1220174c1d33cd7e5b1045cc8/lto-plugin%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/170e618ef559a9b1220174c1d33cd7e5b1045cc8/lto-plugin%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FMakefile.am?ref=170e618ef559a9b1220174c1d33cd7e5b1045cc8", "patch": "@@ -11,8 +11,8 @@ AM_CPPFLAGS = -I$(top_srcdir)/../include $(DEFS)\n AM_CFLAGS = @ac_lto_plugin_warn_cflags@ $(CET_HOST_FLAGS)\n AM_LDFLAGS = @ac_lto_plugin_ldflags@\n AM_LIBTOOLFLAGS = --tag=disable-static\n-override CFLAGS := $(filter-out -fsanitize=address,$(CFLAGS))\n-override LDFLAGS := $(filter-out -fsanitize=address,$(LDFLAGS))\n+override CFLAGS := $(filter-out -fsanitize=address -fsanitize=hwaddress,$(CFLAGS))\n+override LDFLAGS := $(filter-out -fsanitize=address -fsanitize=hwaddress,$(LDFLAGS))\n \n libexecsub_LTLIBRARIES = liblto_plugin.la\n gcc_build_dir = @gcc_build_dir@"}, {"sha": "20611c6b1e6f5e381d4690e34ab7a69f2c827bb6", "filename": "lto-plugin/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/170e618ef559a9b1220174c1d33cd7e5b1045cc8/lto-plugin%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/170e618ef559a9b1220174c1d33cd7e5b1045cc8/lto-plugin%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FMakefile.in?ref=170e618ef559a9b1220174c1d33cd7e5b1045cc8", "patch": "@@ -675,8 +675,8 @@ uninstall-am: uninstall-libexecsubLTLIBRARIES\n \n .PRECIOUS: Makefile\n \n-override CFLAGS := $(filter-out -fsanitize=address,$(CFLAGS))\n-override LDFLAGS := $(filter-out -fsanitize=address,$(LDFLAGS))\n+override CFLAGS := $(filter-out -fsanitize=address -fsanitize=hwaddress,$(CFLAGS))\n+override LDFLAGS := $(filter-out -fsanitize=address -fsanitize=hwaddress,$(LDFLAGS))\n \n all-local: $(in_gcc_libs)\n "}]}