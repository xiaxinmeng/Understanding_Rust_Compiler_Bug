{"sha": "0a70fb8750ecb24f57066a9249acf7cf6bf6958d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE3MGZiODc1MGVjYjI0ZjU3MDY2YTkyNDlhY2Y3Y2Y2YmY2OTU4ZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-10-25T17:02:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-10-25T17:02:43Z"}, "message": "Use implicitly-defined copy operations for test iterators\n\nAll of these special member functions do exactly what the compiler would\ndo anyway. By defining them as defaulted for C++11 and later we prevent\nmove constructors and move assignment operators being defined (which is\nconsistent with the previous semantics).\n\nAlso move default init of the input_iterator_wrapper members from the\nderived constructor to the protected base constructor.\n\n\t* testsuite/util/testsuite_iterators.h (output_iterator_wrapper)\n\t(input_iterator_wrapper, forward_iterator_wrapper)\n\tbidirectional_iterator_wrapper, random_access_iterator_wrapper): Remove\n\tuser-provided copy constructors and copy assignment operators so they\n\tare defined implicitly.\n\t(input_iterator_wrapper): Initialize members in default constructor.\n\t(forward_iterator_wrapper): Remove assignments to members of base.\n\nFrom-SVN: r277459", "tree": {"sha": "e14ad0de3925717e4b25fa61cbd1ce56271d6c54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e14ad0de3925717e4b25fa61cbd1ce56271d6c54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a70fb8750ecb24f57066a9249acf7cf6bf6958d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a70fb8750ecb24f57066a9249acf7cf6bf6958d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a70fb8750ecb24f57066a9249acf7cf6bf6958d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a70fb8750ecb24f57066a9249acf7cf6bf6958d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eadcde8e8f53c950fc17b52fd33adda40d28f7af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eadcde8e8f53c950fc17b52fd33adda40d28f7af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eadcde8e8f53c950fc17b52fd33adda40d28f7af"}], "stats": {"total": 97, "additions": 47, "deletions": 50}, "files": [{"sha": "0e0a963bcbe927bf5a17ea18baf9744501fc2aef", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a70fb8750ecb24f57066a9249acf7cf6bf6958d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a70fb8750ecb24f57066a9249acf7cf6bf6958d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0a70fb8750ecb24f57066a9249acf7cf6bf6958d", "patch": "@@ -1,5 +1,13 @@\n 2019-10-25  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* testsuite/util/testsuite_iterators.h (output_iterator_wrapper)\n+\t(input_iterator_wrapper, forward_iterator_wrapper)\n+\tbidirectional_iterator_wrapper, random_access_iterator_wrapper): Remove\n+\tuser-provided copy constructors and copy assignment operators so they\n+\tare defined implicitly.\n+\t(input_iterator_wrapper): Initialize members in default constructor.\n+\t(forward_iterator_wrapper): Remove assignments to members of base.\n+\n \t* include/bits/allocator.h: Check __cpp_constexpr_dynamic_alloc\n \tbefore making the std::allocator destructor constexpr.\n \t* testsuite/20_util/allocator/requirements/constexpr.cc: New test."}, {"sha": "d9a35622fb74c588786770d8603ed2a772a72559", "filename": "libstdc++-v3/testsuite/util/testsuite_iterators.h", "status": "modified", "additions": 39, "deletions": 50, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a70fb8750ecb24f57066a9249acf7cf6bf6958d/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a70fb8750ecb24f57066a9249acf7cf6bf6958d/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h?ref=0a70fb8750ecb24f57066a9249acf7cf6bf6958d", "patch": "@@ -132,9 +132,14 @@ namespace __gnu_test\n       ITERATOR_VERIFY(ptr >= SharedInfo->first && ptr <= SharedInfo->last);\n     }\n \n-    output_iterator_wrapper(const output_iterator_wrapper& in)\n-    : ptr(in.ptr), SharedInfo(in.SharedInfo)\n-    { }\n+#if __cplusplus >= 201103L\n+    output_iterator_wrapper() = delete;\n+\n+    output_iterator_wrapper(const output_iterator_wrapper&) = default;\n+\n+    output_iterator_wrapper&\n+    operator=(const output_iterator_wrapper&) = default;\n+#endif\n \n     WritableObject<T>\n     operator*() const\n@@ -144,14 +149,6 @@ namespace __gnu_test\n       return WritableObject<T>(ptr, SharedInfo);\n     }\n \n-    output_iterator_wrapper&\n-    operator=(const output_iterator_wrapper& in)\n-    {\n-      ptr = in.ptr;\n-      SharedInfo = in.SharedInfo;\n-      return *this;\n-    }\n-\n     output_iterator_wrapper&\n     operator++()\n     {\n@@ -203,7 +200,7 @@ namespace __gnu_test\n \t\t\t std::ptrdiff_t, T*, T&>\n   {\n   protected:\n-    input_iterator_wrapper()\n+    input_iterator_wrapper() : ptr(0), SharedInfo(0)\n     { }\n \n   public:\n@@ -215,9 +212,12 @@ namespace __gnu_test\n     : ptr(_ptr), SharedInfo(SharedInfo_in)\n     { ITERATOR_VERIFY(ptr >= SharedInfo->first && ptr <= SharedInfo->last); }\n \n-    input_iterator_wrapper(const input_iterator_wrapper& in)\n-    : ptr(in.ptr), SharedInfo(in.SharedInfo)\n-    { }\n+#if __cplusplus >= 201103L\n+    input_iterator_wrapper(const input_iterator_wrapper&) = default;\n+\n+    input_iterator_wrapper&\n+    operator=(const input_iterator_wrapper&) = default;\n+#endif\n \n     bool\n     operator==(const input_iterator_wrapper& in) const\n@@ -247,14 +247,6 @@ namespace __gnu_test\n       return &**this;\n     }\n \n-    input_iterator_wrapper&\n-    operator=(const input_iterator_wrapper& in)\n-    {\n-      ptr = in.ptr;\n-      SharedInfo = in.SharedInfo;\n-      return *this;\n-    }\n-\n     input_iterator_wrapper&\n     operator++()\n     {\n@@ -298,19 +290,20 @@ namespace __gnu_test\n   {\n     typedef BoundsContainer<T> ContainerType;\n     typedef std::forward_iterator_tag iterator_category;\n+\n     forward_iterator_wrapper(T* _ptr, ContainerType* SharedInfo_in)\n     : input_iterator_wrapper<T>(_ptr, SharedInfo_in)\n     { }\n \n-    forward_iterator_wrapper(const forward_iterator_wrapper& in)\n-    : input_iterator_wrapper<T>(in)\n+    forward_iterator_wrapper()\n     { }\n \n-    forward_iterator_wrapper()\n-    {\n-      this->ptr = 0;\n-      this->SharedInfo = 0;\n-    }\n+#if __cplusplus >= 201103L\n+    forward_iterator_wrapper(const forward_iterator_wrapper&) = default;\n+\n+    forward_iterator_wrapper&\n+    operator=(const forward_iterator_wrapper&) = default;\n+#endif\n \n     T&\n     operator*() const\n@@ -352,24 +345,22 @@ namespace __gnu_test\n   {\n     typedef BoundsContainer<T> ContainerType;\n     typedef std::bidirectional_iterator_tag iterator_category;\n+\n     bidirectional_iterator_wrapper(T* _ptr, ContainerType* SharedInfo_in)\n     : forward_iterator_wrapper<T>(_ptr, SharedInfo_in)\n     { }\n \n-    bidirectional_iterator_wrapper(const bidirectional_iterator_wrapper& in)\n-    : forward_iterator_wrapper<T>(in)\n+    bidirectional_iterator_wrapper()\n+    : forward_iterator_wrapper<T>()\n     { }\n \n-    bidirectional_iterator_wrapper(): forward_iterator_wrapper<T>()\n-    { }\n+#if __cplusplus >= 201103L\n+    bidirectional_iterator_wrapper(\n+\tconst bidirectional_iterator_wrapper&) = default;\n \n     bidirectional_iterator_wrapper&\n-    operator=(const bidirectional_iterator_wrapper& in)\n-    {\n-      this->ptr = in.ptr;\n-      this->SharedInfo = in.SharedInfo;\n-      return *this;\n-    }\n+    operator=(const bidirectional_iterator_wrapper&) = default;\n+#endif\n \n     bidirectional_iterator_wrapper&\n     operator++()\n@@ -417,24 +408,22 @@ namespace __gnu_test\n   {\n     typedef BoundsContainer<T> ContainerType;\n     typedef std::random_access_iterator_tag iterator_category;\n+\n     random_access_iterator_wrapper(T* _ptr, ContainerType* SharedInfo_in)\n     : bidirectional_iterator_wrapper<T>(_ptr, SharedInfo_in)\n     { }\n \n-    random_access_iterator_wrapper(const random_access_iterator_wrapper<T>& in)\n-    : bidirectional_iterator_wrapper<T>(in)\n+    random_access_iterator_wrapper()\n+    : bidirectional_iterator_wrapper<T>()\n     { }\n \n-    random_access_iterator_wrapper():bidirectional_iterator_wrapper<T>()\n-    { }\n+#if __cplusplus >= 201103L\n+    random_access_iterator_wrapper(\n+\tconst random_access_iterator_wrapper&) = default;\n \n     random_access_iterator_wrapper&\n-    operator=(const random_access_iterator_wrapper& in)\n-    {\n-      this->ptr = in.ptr;\n-      this->SharedInfo = in.SharedInfo;\n-      return *this;\n-    }\n+    operator=(const random_access_iterator_wrapper&) = default;\n+#endif\n \n     random_access_iterator_wrapper&\n     operator++()"}]}