{"sha": "d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFjYWIzYTYxNTJhOGZmZTMwNDljYTljZWI0ZWM2MzlhNmYwNDg5MA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-01-24T23:26:20Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-01-24T23:26:20Z"}, "message": "compiler: Error if type switch case can not implement switch value.\n\nFrom-SVN: r183500", "tree": {"sha": "b4bc748a96c1b04b4fbd292637ffb97951572147", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4bc748a96c1b04b4fbd292637ffb97951572147"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/comments", "author": null, "committer": null, "parents": [{"sha": "5fca1e3f90ddcafc38ec98c3bf5cf78ab91ee7ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fca1e3f90ddcafc38ec98c3bf5cf78ab91ee7ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fca1e3f90ddcafc38ec98c3bf5cf78ab91ee7ca"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "e55dc74b3b7af38d13f70d9b3f86aaf7d6aee833", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890", "patch": "@@ -3940,7 +3940,8 @@ Type_case_clauses::Type_case_clause::traverse(Traverse* traverse)\n // statements.\n \n void\n-Type_case_clauses::Type_case_clause::lower(Block* b,\n+Type_case_clauses::Type_case_clause::lower(Type* switch_val_type,\n+\t\t\t\t\t   Block* b,\n \t\t\t\t\t   Temporary_statement* descriptor_temp,\n \t\t\t\t\t   Unnamed_label* break_label,\n \t\t\t\t\t   Unnamed_label** stmts_label) const\n@@ -3952,6 +3953,20 @@ Type_case_clauses::Type_case_clause::lower(Block* b,\n     {\n       Type* type = this->type_;\n \n+      std::string reason;\n+      if (switch_val_type->interface_type() != NULL\n+\t  && !type->is_nil_constant_as_type()\n+\t  && type->interface_type() == NULL\n+\t  && !switch_val_type->interface_type()->implements_interface(type,\n+\t\t\t\t\t\t\t\t      &reason))\n+\t{\n+\t  if (reason.empty())\n+\t    error_at(this->location_, \"impossible type switch case\");\n+\t  else\n+\t    error_at(this->location_, \"impossible type switch case (%s)\",\n+\t\t     reason.c_str());\n+\t}\n+\n       Expression* ref = Expression::make_temporary_reference(descriptor_temp,\n \t\t\t\t\t\t\t     loc);\n \n@@ -4102,7 +4117,8 @@ Type_case_clauses::check_duplicates() const\n // BREAK_LABEL is the label at the end of the type switch.\n \n void\n-Type_case_clauses::lower(Block* b, Temporary_statement* descriptor_temp,\n+Type_case_clauses::lower(Type* switch_val_type, Block* b,\n+\t\t\t Temporary_statement* descriptor_temp,\n \t\t\t Unnamed_label* break_label) const\n {\n   const Type_case_clause* default_case = NULL;\n@@ -4113,7 +4129,8 @@ Type_case_clauses::lower(Block* b, Temporary_statement* descriptor_temp,\n        ++p)\n     {\n       if (!p->is_default())\n-\tp->lower(b, descriptor_temp, break_label, &stmts_label);\n+\tp->lower(switch_val_type, b, descriptor_temp, break_label,\n+\t\t &stmts_label);\n       else\n \t{\n \t  // We are generating a series of tests, which means that we\n@@ -4124,7 +4141,8 @@ Type_case_clauses::lower(Block* b, Temporary_statement* descriptor_temp,\n   go_assert(stmts_label == NULL);\n \n   if (default_case != NULL)\n-    default_case->lower(b, descriptor_temp, break_label, NULL);\n+    default_case->lower(switch_val_type, b, descriptor_temp, break_label,\n+\t\t\tNULL);\n }\n \n // Dump the AST representation for case clauses (from a switch statement)\n@@ -4222,7 +4240,7 @@ Type_switch_statement::do_lower(Gogo*, Named_object*, Block* enclosing,\n     }\n \n   if (this->clauses_ != NULL)\n-    this->clauses_->lower(b, descriptor_temp, this->break_label());\n+    this->clauses_->lower(val_type, b, descriptor_temp, this->break_label());\n \n   Statement* s = Statement::make_unnamed_label_statement(this->break_label_);\n   b->add_statement(s);"}, {"sha": "5bbfd3736692d04bf2d886c0bc1a424eee2c6942", "filename": "gcc/go/gofrontend/statements.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.h?ref=d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890", "patch": "@@ -1441,7 +1441,7 @@ class Type_case_clauses\n \n   // Lower to if and goto statements.\n   void\n-  lower(Block*, Temporary_statement* descriptor_temp,\n+  lower(Type*, Block*, Temporary_statement* descriptor_temp,\n \tUnnamed_label* break_label) const;\n \n   // Dump the AST representation to a dump context.\n@@ -1485,7 +1485,7 @@ class Type_case_clauses\n \n     // Lower to if and goto statements.\n     void\n-    lower(Block*, Temporary_statement* descriptor_temp,\n+    lower(Type*, Block*, Temporary_statement* descriptor_temp,\n \t  Unnamed_label* break_label, Unnamed_label** stmts_label) const;\n \n     // Dump the AST representation to a dump context."}]}