{"sha": "34fc957d12b8213cd28d2591abe14f7bbe6cec1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRmYzk1N2QxMmI4MjEzY2QyOGQyNTkxYWJlMTRmN2JiZTZjZWMxYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "1999-09-28T12:30:22Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "1999-09-28T12:30:22Z"}, "message": "decl.c (grokdeclarator): Distinguish parameter context for diagnostics.\n\n\t* decl.c (grokdeclarator): Distinguish parameter context for\n\tdiagnostics. Tidy up missing type diagnostic.\n\tDiagnose `explicit' in one place. Diagnose `mutable' in one place.\n\nFrom-SVN: r29692", "tree": {"sha": "02ad79a13d6fa13f53cfb745618f4d22872fab25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02ad79a13d6fa13f53cfb745618f4d22872fab25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34fc957d12b8213cd28d2591abe14f7bbe6cec1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34fc957d12b8213cd28d2591abe14f7bbe6cec1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34fc957d12b8213cd28d2591abe14f7bbe6cec1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34fc957d12b8213cd28d2591abe14f7bbe6cec1c/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8bbcc7ce6bd96c4750150181e3a2a63a0f321e12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bbcc7ce6bd96c4750150181e3a2a63a0f321e12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bbcc7ce6bd96c4750150181e3a2a63a0f321e12"}], "stats": {"total": 76, "additions": 36, "deletions": 40}, "files": [{"sha": "bab8814d76e01225eaafb0ae007a20f30cec81f7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34fc957d12b8213cd28d2591abe14f7bbe6cec1c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34fc957d12b8213cd28d2591abe14f7bbe6cec1c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=34fc957d12b8213cd28d2591abe14f7bbe6cec1c", "patch": "@@ -1,3 +1,9 @@\n+1999-09-28  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* decl.c (grokdeclarator): Distinguish parameter context for\n+\tdiagnostics. Tidy up missing type diagnostic.\n+\tDiagnose `explicit' in one place. Diagnose `mutable' in one place.\n+\n 1999-09-28  Mark Mitchell  <mark@codesourcery.com>\n \n \t* ir.texi: Improve documentation for TARGET_EXPR."}, {"sha": "9f635ef30495c56a3786d0131075643ef5f28a2d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 30, "deletions": 40, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34fc957d12b8213cd28d2591abe14f7bbe6cec1c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34fc957d12b8213cd28d2591abe14f7bbe6cec1c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=34fc957d12b8213cd28d2591abe14f7bbe6cec1c", "patch": "@@ -9173,8 +9173,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t    return 0; /* We used to do a 155 abort here.  */\n \t  }\n       }\n-    if (name == NULL)\n-      name = \"type name\";\n   }\n \n   /* A function definition's declarator must have the form of\n@@ -9214,6 +9212,9 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n       current_binding_level = b;\n     }\n \n+  if (name == NULL)\n+    name = decl_context == PARM ? \"parameter\" : \"type name\";\n+  \n   /* Look through the decl specs and record which ones appear.\n      Some typespecs are defined as built-in typenames.\n      Others, the ones that are modifiers of other types,\n@@ -9374,11 +9375,11 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t  if (in_system_header || flag_ms_extensions)\n \t    /* Allow it, sigh.  */;\n \t  else if (pedantic || ! is_main)\n-\t    cp_pedwarn (\"ANSI C++ forbids declaration `%D' with no type\",\n-\t\t\tdname);\n+\t    cp_pedwarn (\"ANSI C++ forbids declaration of `%s' with no type\",\n+\t\t\tname);\n \t  else if (warn_return_type)\n-\t    cp_warning (\"ANSI C++ forbids declaration `%D' with no type\",\n-\t\t\tdname);\n+\t    cp_warning (\"ANSI C++ forbids declaration of `%s' with no type\",\n+\t\t\tname);\n \n \t  type = integer_type_node;\n \t}\n@@ -9586,24 +9587,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n   friendp = RIDBIT_SETP (RID_FRIEND, specbits);\n   RIDBIT_RESET (RID_FRIEND, specbits);\n \n-  /* $7.1.2, Function specifiers */\n-  if (friendp && explicitp)\n-    error (\"only declarations of constructors can be `explicit'\");\n-\n-  if (RIDBIT_SETP (RID_MUTABLE, specbits))\n-    {\n-      if (decl_context == PARM)\n-\t{\n-\t  error (\"non-member `%s' cannot be declared `mutable'\", name);\n-\t  RIDBIT_RESET (RID_MUTABLE, specbits);\n-\t}\n-      else if (friendp || decl_context == TYPENAME)\n-\t{\n-\t  error (\"non-object member `%s' cannot be declared `mutable'\", name);\n-\t  RIDBIT_RESET (RID_MUTABLE, specbits);\n-\t}\n-    }\n-\n   /* Warn if two storage classes are given. Default to `auto'.  */\n \n   if (RIDBIT_ANY_SET (specbits))\n@@ -9629,11 +9612,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n       error (\"virtual outside class declaration\");\n       virtualp = 0;\n     }\n-  if (current_class_name == NULL_TREE && RIDBIT_SETP (RID_MUTABLE, specbits))\n-    {\n-      error (\"only members can be declared mutable\");\n-      RIDBIT_RESET (RID_MUTABLE, specbits);\n-    }\n \n   /* Static anonymous unions are dealt with here.  */\n   if (staticp && decl_context == TYPENAME\n@@ -10442,24 +10420,42 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \n   /* Now TYPE has the actual type.  */\n \n-  if (explicitp == 1)\n+  if (explicitp == 1 || (explicitp && friendp))\n     {\n-      error (\"only constructors can be declared `explicit'\");\n+      /* [dcl.fct.spec] The explicit specifier shall only be used in\n+         declarations of constructors within a class definition.  */\n+      error (\"only declarations of constructors can be `explicit'\");\n       explicitp = 0;\n     }\n \n   if (RIDBIT_SETP (RID_MUTABLE, specbits))\n     {\n-      if (type_quals & TYPE_QUAL_CONST)\n+      if (current_class_name == NULL_TREE || decl_context == PARM || friendp)\n+        {\n+\t  error (\"non-member `%s' cannot be declared `mutable'\", name);\n+          RIDBIT_RESET (RID_MUTABLE, specbits);\n+        }\n+      else if (decl_context == TYPENAME || RIDBIT_SETP (RID_TYPEDEF, specbits))\n \t{\n-\t  error (\"const `%s' cannot be declared `mutable'\", name);\n+\t  error (\"non-object member `%s' cannot be declared `mutable'\", name);\n \t  RIDBIT_RESET (RID_MUTABLE, specbits);\n \t}\n+      else if (TREE_CODE (type) == FUNCTION_TYPE\n+               || TREE_CODE (type) == METHOD_TYPE)\n+        {\n+\t  error (\"function `%s' cannot be declared `mutable'\", name);\n+\t  RIDBIT_RESET (RID_MUTABLE, specbits);\n+        }\n       else if (staticp)\n \t{\n \t  error (\"static `%s' cannot be declared `mutable'\", name);\n \t  RIDBIT_RESET (RID_MUTABLE, specbits);\n \t}\n+      else if (type_quals & TYPE_QUAL_CONST)\n+\t{\n+\t  error (\"const `%s' cannot be declared `mutable'\", name);\n+\t  RIDBIT_RESET (RID_MUTABLE, specbits);\n+\t}\n     }\n \n   if (declarator == NULL_TREE\n@@ -10578,9 +10574,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t  || (typedef_decl && C_TYPEDEF_EXPLICITLY_SIGNED (typedef_decl)))\n \tC_TYPEDEF_EXPLICITLY_SIGNED (decl) = 1;\n \n-      if (RIDBIT_SETP (RID_MUTABLE, specbits))\n-\terror (\"non-object member `%s' cannot be declared mutable\", name);\n-\n       bad_specifiers (decl, \"type\", virtualp, quals != NULL_TREE,\n \t\t      inlinep, friendp, raises != NULL_TREE);\n \n@@ -11111,10 +11104,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t  }\n       }\n \n-    if (RIDBIT_SETP (RID_MUTABLE, specbits))\n-      {\n-\terror (\"`%s' cannot be declared mutable\", name);\n-      }\n+    my_friendly_assert (!RIDBIT_SETP (RID_MUTABLE, specbits), 19990927);\n \n     /* Record `register' declaration for warnings on &\n        and in case doing stupid register allocation.  */"}]}