{"sha": "8a3ffc5d39c44c2e7923f5ad39c1b6392c429cb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGEzZmZjNWQzOWM0NGMyZTc5MjNmNWFkMzljMWI2MzkyYzQyOWNiMA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2012-08-21T13:27:00Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2012-08-21T13:27:00Z"}, "message": "fold-const.c (fold_ternary_loc): Detect identity permutations.\n\n2012-08-21  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* fold-const.c (fold_ternary_loc): Detect identity permutations.\n\tCanonicalize permutations more.\n\t* tree-ssa-forwprop.c (is_combined_permutation_identity): New function.\n\t(simplify_permutation): Likewise.\n\t(ssa_forward_propagate_and_combine): Call it.\n\ngcc/testsuite/\n\t* gcc.dg/tree-ssa/forwprop-19.c: New testcase.\n\t* gcc.dg/fold-perm.c: Likewise.\n\nFrom-SVN: r190561", "tree": {"sha": "ed52f070800b50c7623028376b73988cddec35ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed52f070800b50c7623028376b73988cddec35ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a3ffc5d39c44c2e7923f5ad39c1b6392c429cb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a3ffc5d39c44c2e7923f5ad39c1b6392c429cb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a3ffc5d39c44c2e7923f5ad39c1b6392c429cb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a3ffc5d39c44c2e7923f5ad39c1b6392c429cb0/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b6db991c9585c615212f7019484e6d288883ade0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6db991c9585c615212f7019484e6d288883ade0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6db991c9585c615212f7019484e6d288883ade0"}], "stats": {"total": 189, "additions": 185, "deletions": 4}, "files": [{"sha": "a271fe5258fe85805ee7b7821c55122bcb0d4630", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a3ffc5d39c44c2e7923f5ad39c1b6392c429cb0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a3ffc5d39c44c2e7923f5ad39c1b6392c429cb0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a3ffc5d39c44c2e7923f5ad39c1b6392c429cb0", "patch": "@@ -1,3 +1,11 @@\n+2012-08-21  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* fold-const.c (fold_ternary_loc): Detect identity permutations.\n+\tCanonicalize permutations more.\n+\t* tree-ssa-forwprop.c (is_combined_permutation_identity): New function.\n+\t(simplify_permutation): Likewise.\n+\t(ssa_forward_propagate_and_combine): Call it.\n+\n 2012-08-21  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-loop-im.c (tree_ssa_lim_finalize): Properly free"}, {"sha": "b386bb2c6060275e6fc4b21dd0a469d4c62eb1e6", "filename": "gcc/fold-const.c", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a3ffc5d39c44c2e7923f5ad39c1b6392c429cb0/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a3ffc5d39c44c2e7923f5ad39c1b6392c429cb0/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=8a3ffc5d39c44c2e7923f5ad39c1b6392c429cb0", "patch": "@@ -14155,23 +14155,45 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n     case VEC_PERM_EXPR:\n       if (TREE_CODE (arg2) == VECTOR_CST)\n \t{\n-\t  unsigned int nelts = TYPE_VECTOR_SUBPARTS (type), i;\n+\t  unsigned int nelts = TYPE_VECTOR_SUBPARTS (type), i, mask;\n \t  unsigned char *sel = XALLOCAVEC (unsigned char, nelts);\n \t  tree t;\n \t  bool need_mask_canon = false;\n+\t  bool all_in_vec0 = true;\n+\t  bool all_in_vec1 = true;\n+\t  bool maybe_identity = true;\n+\t  bool single_arg = (op0 == op1);\n+\t  bool changed = false;\n \n+\t  mask = single_arg ? (nelts - 1) : (2 * nelts - 1);\n \t  gcc_assert (nelts == VECTOR_CST_NELTS (arg2));\n \t  for (i = 0; i < nelts; i++)\n \t    {\n \t      tree val = VECTOR_CST_ELT (arg2, i);\n \t      if (TREE_CODE (val) != INTEGER_CST)\n \t\treturn NULL_TREE;\n \n-\t      sel[i] = TREE_INT_CST_LOW (val) & (2 * nelts - 1);\n+\t      sel[i] = TREE_INT_CST_LOW (val) & mask;\n \t      if (TREE_INT_CST_HIGH (val)\n \t\t  || ((unsigned HOST_WIDE_INT)\n \t\t      TREE_INT_CST_LOW (val) != sel[i]))\n \t\tneed_mask_canon = true;\n+\n+\t      if (sel[i] < nelts)\n+\t\tall_in_vec1 = false;\n+\t      else\n+\t\tall_in_vec0 = false;\n+\n+\t      if ((sel[i] & (nelts-1)) != i)\n+\t\tmaybe_identity = false;\n+\t    }\n+\n+\t  if (maybe_identity)\n+\t    {\n+\t      if (all_in_vec0)\n+\t\treturn op0;\n+\t      if (all_in_vec1)\n+\t\treturn op1;\n \t    }\n \n \t  if ((TREE_CODE (arg0) == VECTOR_CST\n@@ -14184,15 +14206,31 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \t\treturn t;\n \t    }\n \n+\t  if (all_in_vec0)\n+\t    op1 = op0;\n+\t  else if (all_in_vec1)\n+\t    {\n+\t      op0 = op1;\n+\t      for (i = 0; i < nelts; i++)\n+\t\tsel[i] -= nelts;\n+\t      need_mask_canon = true;\n+\t    }\n+\n+\t  if (op0 == op1 && !single_arg)\n+\t    changed = true;\n+\n \t  if (need_mask_canon && arg2 == op2)\n \t    {\n \t      tree *tsel = XALLOCAVEC (tree, nelts);\n \t      tree eltype = TREE_TYPE (TREE_TYPE (arg2));\n \t      for (i = 0; i < nelts; i++)\n \t\ttsel[i] = build_int_cst (eltype, sel[i]);\n-\t      t = build_vector (TREE_TYPE (arg2), tsel);\n-\t      return build3_loc (loc, VEC_PERM_EXPR, type, op0, op1, t);\n+\t      op2 = build_vector (TREE_TYPE (arg2), tsel);\n+\t      changed = true;\n \t    }\n+\n+\t  if (changed)\n+\t    return build3_loc (loc, VEC_PERM_EXPR, type, op0, op1, op2);\n \t}\n       return NULL_TREE;\n "}, {"sha": "9bdd4f8c78784cb0678a7519378a127f3c6f6e31", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a3ffc5d39c44c2e7923f5ad39c1b6392c429cb0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a3ffc5d39c44c2e7923f5ad39c1b6392c429cb0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8a3ffc5d39c44c2e7923f5ad39c1b6392c429cb0", "patch": "@@ -1,3 +1,8 @@\n+2012-08-21  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* gcc.dg/tree-ssa/forwprop-19.c: New testcase.\n+\t* gcc.dg/fold-perm.c: Likewise.\n+\n 2012-08-20  Jan Hubicka  <jh@suse.cz>\n \n \tPR fortran/48636"}, {"sha": "7396c1dfadc00f858ffaab174521861e8663a90c", "filename": "gcc/testsuite/gcc.dg/fold-perm.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a3ffc5d39c44c2e7923f5ad39c1b6392c429cb0/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-perm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a3ffc5d39c44c2e7923f5ad39c1b6392c429cb0/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-perm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-perm.c?ref=8a3ffc5d39c44c2e7923f5ad39c1b6392c429cb0", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-ccp1\" } */\n+\n+typedef int veci __attribute__ ((vector_size (4 * sizeof (int))));\n+\n+void fun (veci *f, veci *g, veci *h)\n+{\n+  veci m = { 7, 7, 4, 6 };\n+  veci n = { 0, 1, 2, 3 };\n+  veci p = { 1, 1, 7, 6 };\n+  *h = __builtin_shuffle (*h, *h, p);\n+  *g = __builtin_shuffle (*f, *g, m);\n+  *f = __builtin_shuffle (*f, *g, n);\n+}\n+\n+/* { dg-final { scan-tree-dump \"VEC_PERM_EXPR.*{ 3, 3, 0, 2 }\" \"ccp1\" } } */\n+/* { dg-final { scan-tree-dump \"VEC_PERM_EXPR.*{ 1, 1, 3, 2 }\" \"ccp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"VEC_PERM_EXPR\" 2 \"ccp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"ccp1\" } } */"}, {"sha": "6d25c1bb4a5519fb1b7e5590b33d53e34ebbbc60", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-19.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a3ffc5d39c44c2e7923f5ad39c1b6392c429cb0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a3ffc5d39c44c2e7923f5ad39c1b6392c429cb0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-19.c?ref=8a3ffc5d39c44c2e7923f5ad39c1b6392c429cb0", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-forwprop2\" } */\n+\n+typedef int vec __attribute__((vector_size (4 * sizeof (int))));\n+void f (vec *x1, vec *x2)\n+{\n+  vec m = { 1, 2, 3, 0 };\n+  vec n = { 3, 0, 1, 2 };\n+  vec y = __builtin_shuffle (*x1, *x2, n);\n+  vec z = __builtin_shuffle (y, m);\n+  *x1 = z;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"VEC_PERM_EXPR\" \"forwprop2\" } } */\n+/* { dg-final { cleanup-tree-dump \"forwprop2\" } } */"}, {"sha": "532b9c5c688c9ba144ce7127b4eacdcd2bf66c47", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a3ffc5d39c44c2e7923f5ad39c1b6392c429cb0/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a3ffc5d39c44c2e7923f5ad39c1b6392c429cb0/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=8a3ffc5d39c44c2e7923f5ad39c1b6392c429cb0", "patch": "@@ -2577,6 +2577,95 @@ combine_conversions (gimple_stmt_iterator *gsi)\n   return 0;\n }\n \n+/* Determine whether applying the 2 permutations (mask1 then mask2)\n+   gives back one of the input.  */\n+\n+static int\n+is_combined_permutation_identity (tree mask1, tree mask2)\n+{\n+  tree mask;\n+  unsigned int nelts, i, j;\n+  bool maybe_identity1 = true;\n+  bool maybe_identity2 = true;\n+\n+  gcc_checking_assert (TREE_CODE (mask1) == VECTOR_CST\n+\t\t       && TREE_CODE (mask2) == VECTOR_CST);\n+  mask = fold_ternary (VEC_PERM_EXPR, TREE_TYPE (mask1), mask1, mask1, mask2);\n+  gcc_assert (TREE_CODE (mask) == VECTOR_CST);\n+\n+  nelts = VECTOR_CST_NELTS (mask);\n+  for (i = 0; i < nelts; i++)\n+    {\n+      tree val = VECTOR_CST_ELT (mask, i);\n+      gcc_assert (TREE_CODE (val) == INTEGER_CST);\n+      j = TREE_INT_CST_LOW (val) & (2 * nelts - 1);\n+      if (j == i)\n+\tmaybe_identity2 = false;\n+      else if (j == i + nelts)\n+\tmaybe_identity1 = false;\n+      else\n+\treturn 0;\n+    }\n+  return maybe_identity1 ? 1 : maybe_identity2 ? 2 : 0;\n+}\n+\n+/* Combine two shuffles in a row.  Returns 1 if there were any changes\n+   made, 2 if cfg-cleanup needs to run.  Else it returns 0.  */\n+ \n+static int\n+simplify_permutation (gimple_stmt_iterator *gsi)\n+{\n+  gimple stmt = gsi_stmt (*gsi);\n+  gimple def_stmt;\n+  tree op0, op1, op2, op3;\n+  enum tree_code code = gimple_assign_rhs_code (stmt);\n+  enum tree_code code2;\n+\n+  gcc_checking_assert (code == VEC_PERM_EXPR);\n+\n+  op0 = gimple_assign_rhs1 (stmt);\n+  op1 = gimple_assign_rhs2 (stmt);\n+  op2 = gimple_assign_rhs3 (stmt);\n+\n+  if (TREE_CODE (op0) != SSA_NAME)\n+    return 0;\n+\n+  if (TREE_CODE (op2) != VECTOR_CST)\n+    return 0;\n+\n+  if (op0 != op1)\n+    return 0;\n+\n+  def_stmt = SSA_NAME_DEF_STMT (op0);\n+  if (!def_stmt || !is_gimple_assign (def_stmt)\n+      || !can_propagate_from (def_stmt))\n+    return 0;\n+\n+  code2 = gimple_assign_rhs_code (def_stmt);\n+\n+  /* Two consecutive shuffles.  */\n+  if (code2 == VEC_PERM_EXPR)\n+    {\n+      tree orig;\n+      int ident;\n+      op3 = gimple_assign_rhs3 (def_stmt);\n+      if (TREE_CODE (op3) != VECTOR_CST)\n+\treturn 0;\n+      ident = is_combined_permutation_identity (op3, op2);\n+      if (!ident)\n+\treturn 0;\n+      orig = (ident == 1) ? gimple_assign_rhs1 (def_stmt)\n+\t\t\t  : gimple_assign_rhs2 (def_stmt);\n+      gimple_assign_set_rhs1 (stmt, unshare_expr (orig));\n+      gimple_assign_set_rhs_code (stmt, TREE_CODE (orig));\n+      gimple_set_num_ops (stmt, 2);\n+      update_stmt (stmt);\n+      return remove_prop_source_from_use (op0) ? 2 : 1;\n+    }\n+\n+  return false;\n+}\n+\n /* Main entry point for the forward propagation and statement combine\n    optimizer.  */\n \n@@ -2739,6 +2828,13 @@ ssa_forward_propagate_and_combine (void)\n \t\t      cfg_changed = true;\n \t\t    changed = did_something != 0;\n \t\t  }\n+\t\telse if (code == VEC_PERM_EXPR)\n+\t\t  {\n+\t\t    int did_something = simplify_permutation (&gsi);\n+\t\t    if (did_something == 2)\n+\t\t      cfg_changed = true;\n+\t\t    changed = did_something != 0;\n+\t\t  }\n \t\tbreak;\n \t      }\n "}]}