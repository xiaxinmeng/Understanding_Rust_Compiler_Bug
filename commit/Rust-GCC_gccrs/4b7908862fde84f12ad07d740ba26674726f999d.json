{"sha": "4b7908862fde84f12ad07d740ba26674726f999d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI3OTA4ODYyZmRlODRmMTJhZDA3ZDc0MGJhMjY2NzQ3MjZmOTk5ZA==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2007-12-13T10:45:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-12-13T10:45:14Z"}, "message": "itypes.ads, itypes.adb (Create_Itype): For access-to-subprogram types...\n\n2007-12-06  Bob Duff  <duff@adacore.com>\n\n\t* itypes.ads, itypes.adb (Create_Itype): For access-to-subprogram\n\ttypes, set Can_Use_Internal_Rep appropriately, based on\n\tAlways_Compatible_Rep_On_Target.\n\nFrom-SVN: r130878", "tree": {"sha": "25f200164d543c2ededaa659887d25abe85ce286", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25f200164d543c2ededaa659887d25abe85ce286"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b7908862fde84f12ad07d740ba26674726f999d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b7908862fde84f12ad07d740ba26674726f999d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b7908862fde84f12ad07d740ba26674726f999d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b7908862fde84f12ad07d740ba26674726f999d/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d776fae437fced6fa609eada28c91e75010d95ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d776fae437fced6fa609eada28c91e75010d95ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d776fae437fced6fa609eada28c91e75010d95ef"}], "stats": {"total": 69, "additions": 39, "deletions": 30}, "files": [{"sha": "125e6e2f14960ad4b2d52d908fa48482df307eb9", "filename": "gcc/ada/itypes.adb", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7908862fde84f12ad07d740ba26674726f999d/gcc%2Fada%2Fitypes.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7908862fde84f12ad07d740ba26674726f999d/gcc%2Fada%2Fitypes.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fitypes.adb?ref=4b7908862fde84f12ad07d740ba26674726f999d", "patch": "@@ -23,11 +23,12 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Atree; use Atree;\n-with Opt;   use Opt;\n-with Sem;   use Sem;\n-with Sinfo; use Sinfo;\n-with Stand; use Stand;\n+with Atree;    use Atree;\n+with Opt;      use Opt;\n+with Sem;      use Sem;\n+with Sinfo;    use Sinfo;\n+with Stand;    use Stand;\n+with Targparm; use Targparm;\n \n package body Itypes is\n \n@@ -67,6 +68,10 @@ package body Itypes is\n          Set_Is_Frozen (Typ);\n       end if;\n \n+      if Ekind in Access_Subprogram_Type_Kind then\n+         Set_Can_Use_Internal_Rep (Typ, not Always_Compatible_Rep_On_Target);\n+      end if;\n+\n       return Typ;\n    end Create_Itype;\n "}, {"sha": "d677bf9f8fd81c5c45014f36a3327acfe3617bd9", "filename": "gcc/ada/itypes.ads", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7908862fde84f12ad07d740ba26674726f999d/gcc%2Fada%2Fitypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7908862fde84f12ad07d740ba26674726f999d/gcc%2Fada%2Fitypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fitypes.ads?ref=4b7908862fde84f12ad07d740ba26674726f999d", "patch": "@@ -35,9 +35,9 @@ package Itypes is\n    -- Implicit Types --\n    --------------------\n \n-   --  Implicit types are types and subtypes created by the semantic phase\n-   --  or the expander to reflect the underlying semantics. These could be\n-   --  generated by building trees for corresponding declarations and then\n+   --  Implicit types (Itypes) are types and subtypes created by the semantic\n+   --  phase or the expander to reflect the underlying semantics. These could\n+   --  be generated by building trees for corresponding declarations and then\n    --  analyzing these trees, but there are three reasons for not doing this:\n \n    --    1. The declarations would require more tree nodes\n@@ -55,9 +55,9 @@ package Itypes is\n \n    --  The type declaration declaring an Itype must be analyzed with checks\n    --  off because this declaration has not been inserted in the tree (if it\n-   --  has been then it is not an itype), and hence checks that would be\n+   --  has been then it is not an Itype), and hence checks that would be\n    --  generated during the analysis cannot be inserted in the tree. At any\n-   --  rate, itype analysis should always be done with checks off, otherwise\n+   --  rate, Itype analysis should always be done with checks off, otherwise\n    --  duplicate checks will most likely be emitted.\n \n    --  Unlike types declared explicitly, implicit types are defined on first\n@@ -73,16 +73,17 @@ package Itypes is\n    --  call to New_Copy_Tree is to create a complete duplicate of a tree,\n    --  as though it had appeared separately in the source), the Itype in\n    --  question is duplicated as part of the New_Copy_Tree processing.\n+\n    --  As a consequence of this copying mechanism, the association between\n-   --  itypes and associated nodes must be one-to-one: several itypes must\n+   --  Itypes and associated nodes must be one-to-one: several Itypes must\n    --  not share an associated node. For example, the semantic decoration\n-   --  of an array aggregate generates several itypes: for each index subtype\n+   --  of an array aggregate generates several Itypes: for each index subtype\n    --  and for the array subtype. The associated node of each index subtype\n    --  is the corresponding range expression.\n \n-   -----------------\n-   -- Subprograms --\n-   -----------------\n+   ------------------\n+   -- Create_Itype --\n+   ------------------\n \n    function Create_Itype\n      (Ekind        : Entity_Kind;\n@@ -91,28 +92,31 @@ package Itypes is\n       Suffix       : Character := ' ';\n       Suffix_Index : Nat       := 0;\n       Scope_Id     : Entity_Id := Current_Scope) return Entity_Id;\n-   --  Used to create a new Itype.\n+   --  Used to create a new Itype\n    --\n-   --   Related_Nod is the node for which this Itype was created.  It is\n-   --   set as the Associated_Node_For_Itype of the new itype.  The Sloc of\n-   --   the new Itype is that of this node.\n+   --  Related_Nod is the node for which this Itype was created. It is\n+   --  set as the Associated_Node_For_Itype of the new Itype. The Sloc of\n+   --  the new Itype is that of this node.\n    --\n-   --   Related_Id is present only if the implicit type name may be referenced\n-   --   as a public symbol, and thus needs a unique external name. The name\n-   --   is created by a call to:\n+   --  Related_Id is present only if the implicit type name may be referenced\n+   --  as a public symbol, and thus needs a unique external name. The name\n+   --  is created by a call to:\n    --\n-   --     New_External_Name (Chars (Related_Id), Suffix, Suffix_Index, 'T')\n+   --    New_External_Name (Chars (Related_Id), Suffix, Suffix_Index, 'T')\n    --\n-   --   If the implicit type does not need an external name, then the\n-   --   Related_Id parameter is omitted (and hence Empty). In this case\n-   --   Suffix and Suffix_Index are ignored and the implicit type name is\n-   --   created by a call to New_Internal_Name ('T').\n+   --  If the implicit type does not need an external name, then the\n+   --  Related_Id parameter is omitted (and hence Empty). In this case\n+   --  Suffix and Suffix_Index are ignored and the implicit type name is\n+   --  created by a call to New_Internal_Name ('T').\n    --\n-   --   Note that in all cases, the name starts with \"T\". This is used\n-   --   to identify implicit types in the error message handling circuits.\n+   --  Note that in all cases, the name starts with \"T\". This is used\n+   --  to identify implicit types in the error message handling circuits.\n    --\n    --  The Scope_Id parameter specifies the scope of the created type, and\n    --  is normally the Current_Scope as shown, but can be set otherwise.\n+   --\n+   --  If Ekind is in Access_Subprogram_Type_Kind, Can_Use_Internal_Rep is set\n+   --  True, unless Always_Compatible_Rep_On_Target is True.\n \n    ---------------------------------\n    -- Create_Null_Excluding_Itype --\n@@ -126,7 +130,7 @@ package Itypes is\n    --  returns an internal access-subtype declaration of T that has the null\n    --  exclusion attribute set to True.\n    --\n-   --  Usage of null-excluding itypes\n+   --  Usage of null-excluding Itypes\n    --  ------------------------------\n    --\n    --      type T1 is access ..."}]}