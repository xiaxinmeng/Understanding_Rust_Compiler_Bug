{"sha": "e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "node_id": "C_kwDOANBUbNoAKGU5ZWM2MTU5MDcwZTVkYmRmMzNkNTM1M2FiNmIxZDg4MzM1MWNkYWY", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-29T23:18:34Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-30T16:46:24Z"}, "message": "RISC-V: Add vsuxei C API intrinsic testcase\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/vsuxei16_v-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vsuxei16_v-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vsuxei16_v-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vsuxei16_v_m-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vsuxei16_v_m-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vsuxei16_v_m-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vsuxei32_v-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vsuxei32_v-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vsuxei32_v-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vsuxei32_v_m-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vsuxei32_v_m-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vsuxei32_v_m-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vsuxei64_v-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vsuxei64_v-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vsuxei64_v-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vsuxei64_v_m-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vsuxei64_v_m-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vsuxei64_v_m-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vsuxei8_v-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vsuxei8_v-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vsuxei8_v-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vsuxei8_v_m-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vsuxei8_v_m-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vsuxei8_v_m-3.c: New test.", "tree": {"sha": "23b2803e9a47f6a3de025cd006a15da3709073b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23b2803e9a47f6a3de025cd006a15da3709073b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b48e628b0f2f7c250c3157769e641e2c9a9ca6b"}], "stats": {"total": 7488, "additions": 7488, "deletions": 0}, "files": [{"sha": "25bd196a9133f0ce412d2eff9be98bc30a5eabc5", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsuxei16_v-1.c", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei16_v-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei16_v-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei16_v-1.c?ref=e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "patch": "@@ -0,0 +1,333 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei16_v_i8mf8(int8_t* base,vuint16mf4_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8mf8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8mf4(int8_t* base,vuint16mf2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8mf2(int8_t* base,vuint16m1_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8m1(int8_t* base,vuint16m2_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8m2(int8_t* base,vuint16m4_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8m4(int8_t* base,vuint16m8_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16mf4(int16_t* base,vuint16mf4_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16mf2(int16_t* base,vuint16mf2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16m1(int16_t* base,vuint16m1_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16m2(int16_t* base,vuint16m2_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16m4(int16_t* base,vuint16m4_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16m8(int16_t* base,vuint16m8_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32mf2(int32_t* base,vuint16mf4_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32m1(int32_t* base,vuint16mf2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32m2(int32_t* base,vuint16m1_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32m4(int32_t* base,vuint16m2_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32m8(int32_t* base,vuint16m4_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i64m1(int64_t* base,vuint16mf4_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i64m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i64m2(int64_t* base,vuint16mf2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i64m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i64m4(int64_t* base,vuint16m1_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i64m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i64m8(int64_t* base,vuint16m2_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i64m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8mf8(uint8_t* base,vuint16mf4_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8mf8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8mf4(uint8_t* base,vuint16mf2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8mf2(uint8_t* base,vuint16m1_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8m1(uint8_t* base,vuint16m2_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8m2(uint8_t* base,vuint16m4_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8m4(uint8_t* base,vuint16m8_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16mf4(uint16_t* base,vuint16mf4_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16mf2(uint16_t* base,vuint16mf2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16m1(uint16_t* base,vuint16m1_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16m2(uint16_t* base,vuint16m2_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16m4(uint16_t* base,vuint16m4_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16m8(uint16_t* base,vuint16m8_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32mf2(uint32_t* base,vuint16mf4_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32m1(uint32_t* base,vuint16mf2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32m2(uint32_t* base,vuint16m1_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32m4(uint32_t* base,vuint16m2_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32m8(uint32_t* base,vuint16m4_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u64m1(uint64_t* base,vuint16mf4_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u64m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u64m2(uint64_t* base,vuint16mf2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u64m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u64m4(uint64_t* base,vuint16m1_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u64m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u64m8(uint64_t* base,vuint16m2_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u64m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32mf2(float* base,vuint16mf4_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32m1(float* base,vuint16mf2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32m2(float* base,vuint16m1_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32m4(float* base,vuint16m2_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32m8(float* base,vuint16m4_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f64m1(double* base,vuint16mf4_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f64m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f64m2(double* base,vuint16mf2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f64m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f64m4(double* base,vuint16m1_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f64m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f64m8(double* base,vuint16m2_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f64m8(base,bindex,value,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "07772c0e0334c61a023f101c5dc148a997b93170", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsuxei16_v-2.c", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei16_v-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei16_v-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei16_v-2.c?ref=e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "patch": "@@ -0,0 +1,333 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei16_v_i8mf8(int8_t* base,vuint16mf4_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8mf8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8mf4(int8_t* base,vuint16mf2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8mf2(int8_t* base,vuint16m1_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8m1(int8_t* base,vuint16m2_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8m2(int8_t* base,vuint16m4_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8m4(int8_t* base,vuint16m8_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16mf4(int16_t* base,vuint16mf4_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16mf2(int16_t* base,vuint16mf2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16m1(int16_t* base,vuint16m1_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16m2(int16_t* base,vuint16m2_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16m4(int16_t* base,vuint16m4_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16m8(int16_t* base,vuint16m8_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32mf2(int32_t* base,vuint16mf4_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32m1(int32_t* base,vuint16mf2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32m2(int32_t* base,vuint16m1_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32m4(int32_t* base,vuint16m2_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32m8(int32_t* base,vuint16m4_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i64m1(int64_t* base,vuint16mf4_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i64m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i64m2(int64_t* base,vuint16mf2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i64m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i64m4(int64_t* base,vuint16m1_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i64m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i64m8(int64_t* base,vuint16m2_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i64m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8mf8(uint8_t* base,vuint16mf4_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8mf8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8mf4(uint8_t* base,vuint16mf2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8mf2(uint8_t* base,vuint16m1_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8m1(uint8_t* base,vuint16m2_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8m2(uint8_t* base,vuint16m4_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8m4(uint8_t* base,vuint16m8_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16mf4(uint16_t* base,vuint16mf4_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16mf2(uint16_t* base,vuint16mf2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16m1(uint16_t* base,vuint16m1_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16m2(uint16_t* base,vuint16m2_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16m4(uint16_t* base,vuint16m4_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16m8(uint16_t* base,vuint16m8_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32mf2(uint32_t* base,vuint16mf4_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32m1(uint32_t* base,vuint16mf2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32m2(uint32_t* base,vuint16m1_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32m4(uint32_t* base,vuint16m2_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32m8(uint32_t* base,vuint16m4_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u64m1(uint64_t* base,vuint16mf4_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u64m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u64m2(uint64_t* base,vuint16mf2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u64m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u64m4(uint64_t* base,vuint16m1_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u64m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u64m8(uint64_t* base,vuint16m2_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u64m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32mf2(float* base,vuint16mf4_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32m1(float* base,vuint16mf2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32m2(float* base,vuint16m1_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32m4(float* base,vuint16m2_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32m8(float* base,vuint16m4_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f64m1(double* base,vuint16mf4_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f64m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f64m2(double* base,vuint16mf2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f64m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f64m4(double* base,vuint16m1_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f64m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f64m8(double* base,vuint16m2_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f64m8(base,bindex,value,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "575f3e7ba22af5a1173d2c0a2bda50856b2e6e92", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsuxei16_v-3.c", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei16_v-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei16_v-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei16_v-3.c?ref=e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "patch": "@@ -0,0 +1,333 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei16_v_i8mf8(int8_t* base,vuint16mf4_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8mf8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8mf4(int8_t* base,vuint16mf2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8mf2(int8_t* base,vuint16m1_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8m1(int8_t* base,vuint16m2_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8m2(int8_t* base,vuint16m4_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8m4(int8_t* base,vuint16m8_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16mf4(int16_t* base,vuint16mf4_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16mf2(int16_t* base,vuint16mf2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16m1(int16_t* base,vuint16m1_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16m2(int16_t* base,vuint16m2_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16m4(int16_t* base,vuint16m4_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16m8(int16_t* base,vuint16m8_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32mf2(int32_t* base,vuint16mf4_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32m1(int32_t* base,vuint16mf2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32m2(int32_t* base,vuint16m1_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32m4(int32_t* base,vuint16m2_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32m8(int32_t* base,vuint16m4_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i64m1(int64_t* base,vuint16mf4_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i64m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i64m2(int64_t* base,vuint16mf2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i64m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i64m4(int64_t* base,vuint16m1_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i64m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i64m8(int64_t* base,vuint16m2_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i64m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8mf8(uint8_t* base,vuint16mf4_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8mf8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8mf4(uint8_t* base,vuint16mf2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8mf2(uint8_t* base,vuint16m1_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8m1(uint8_t* base,vuint16m2_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8m2(uint8_t* base,vuint16m4_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8m4(uint8_t* base,vuint16m8_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16mf4(uint16_t* base,vuint16mf4_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16mf2(uint16_t* base,vuint16mf2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16m1(uint16_t* base,vuint16m1_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16m2(uint16_t* base,vuint16m2_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16m4(uint16_t* base,vuint16m4_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16m8(uint16_t* base,vuint16m8_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32mf2(uint32_t* base,vuint16mf4_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32m1(uint32_t* base,vuint16mf2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32m2(uint32_t* base,vuint16m1_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32m4(uint32_t* base,vuint16m2_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32m8(uint32_t* base,vuint16m4_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u64m1(uint64_t* base,vuint16mf4_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u64m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u64m2(uint64_t* base,vuint16mf2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u64m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u64m4(uint64_t* base,vuint16m1_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u64m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u64m8(uint64_t* base,vuint16m2_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u64m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32mf2(float* base,vuint16mf4_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32m1(float* base,vuint16mf2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32m2(float* base,vuint16m1_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32m4(float* base,vuint16m2_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32m8(float* base,vuint16m4_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f64m1(double* base,vuint16mf4_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f64m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f64m2(double* base,vuint16mf2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f64m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f64m4(double* base,vuint16m1_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f64m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f64m8(double* base,vuint16m2_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f64m8(base,bindex,value,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "b72731227fd30d98eaa4f67bfaf0571253150152", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsuxei16_v_m-1.c", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei16_v_m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei16_v_m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei16_v_m-1.c?ref=e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "patch": "@@ -0,0 +1,333 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei16_v_i8mf8_m(vbool64_t mask,int8_t* base,vuint16mf4_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8mf8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8mf4_m(vbool32_t mask,int8_t* base,vuint16mf2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8mf2_m(vbool16_t mask,int8_t* base,vuint16m1_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8m1_m(vbool8_t mask,int8_t* base,vuint16m2_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8m2_m(vbool4_t mask,int8_t* base,vuint16m4_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8m4_m(vbool2_t mask,int8_t* base,vuint16m8_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16mf4_m(vbool64_t mask,int16_t* base,vuint16mf4_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16mf2_m(vbool32_t mask,int16_t* base,vuint16mf2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16m1_m(vbool16_t mask,int16_t* base,vuint16m1_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16m2_m(vbool8_t mask,int16_t* base,vuint16m2_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16m4_m(vbool4_t mask,int16_t* base,vuint16m4_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16m8_m(vbool2_t mask,int16_t* base,vuint16m8_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32mf2_m(vbool64_t mask,int32_t* base,vuint16mf4_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32m1_m(vbool32_t mask,int32_t* base,vuint16mf2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32m2_m(vbool16_t mask,int32_t* base,vuint16m1_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32m4_m(vbool8_t mask,int32_t* base,vuint16m2_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32m8_m(vbool4_t mask,int32_t* base,vuint16m4_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i64m1_m(vbool64_t mask,int64_t* base,vuint16mf4_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i64m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i64m2_m(vbool32_t mask,int64_t* base,vuint16mf2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i64m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i64m4_m(vbool16_t mask,int64_t* base,vuint16m1_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i64m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i64m8_m(vbool8_t mask,int64_t* base,vuint16m2_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i64m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8mf8_m(vbool64_t mask,uint8_t* base,vuint16mf4_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8mf8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8mf4_m(vbool32_t mask,uint8_t* base,vuint16mf2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8mf2_m(vbool16_t mask,uint8_t* base,vuint16m1_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8m1_m(vbool8_t mask,uint8_t* base,vuint16m2_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8m2_m(vbool4_t mask,uint8_t* base,vuint16m4_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8m4_m(vbool2_t mask,uint8_t* base,vuint16m8_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16mf4_m(vbool64_t mask,uint16_t* base,vuint16mf4_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16mf2_m(vbool32_t mask,uint16_t* base,vuint16mf2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16m1_m(vbool16_t mask,uint16_t* base,vuint16m1_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16m2_m(vbool8_t mask,uint16_t* base,vuint16m2_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16m4_m(vbool4_t mask,uint16_t* base,vuint16m4_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16m8_m(vbool2_t mask,uint16_t* base,vuint16m8_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32mf2_m(vbool64_t mask,uint32_t* base,vuint16mf4_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32m1_m(vbool32_t mask,uint32_t* base,vuint16mf2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32m2_m(vbool16_t mask,uint32_t* base,vuint16m1_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32m4_m(vbool8_t mask,uint32_t* base,vuint16m2_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32m8_m(vbool4_t mask,uint32_t* base,vuint16m4_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u64m1_m(vbool64_t mask,uint64_t* base,vuint16mf4_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u64m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u64m2_m(vbool32_t mask,uint64_t* base,vuint16mf2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u64m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u64m4_m(vbool16_t mask,uint64_t* base,vuint16m1_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u64m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u64m8_m(vbool8_t mask,uint64_t* base,vuint16m2_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u64m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32mf2_m(vbool64_t mask,float* base,vuint16mf4_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32m1_m(vbool32_t mask,float* base,vuint16mf2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32m2_m(vbool16_t mask,float* base,vuint16m1_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32m4_m(vbool8_t mask,float* base,vuint16m2_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32m8_m(vbool4_t mask,float* base,vuint16m4_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f64m1_m(vbool64_t mask,double* base,vuint16mf4_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f64m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f64m2_m(vbool32_t mask,double* base,vuint16mf2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f64m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f64m4_m(vbool16_t mask,double* base,vuint16m1_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f64m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f64m8_m(vbool8_t mask,double* base,vuint16m2_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f64m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "53d506aa7c4f1d56a642781af71cf308487ad840", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsuxei16_v_m-2.c", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei16_v_m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei16_v_m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei16_v_m-2.c?ref=e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "patch": "@@ -0,0 +1,333 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei16_v_i8mf8_m(vbool64_t mask,int8_t* base,vuint16mf4_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8mf8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8mf4_m(vbool32_t mask,int8_t* base,vuint16mf2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8mf2_m(vbool16_t mask,int8_t* base,vuint16m1_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8m1_m(vbool8_t mask,int8_t* base,vuint16m2_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8m2_m(vbool4_t mask,int8_t* base,vuint16m4_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8m4_m(vbool2_t mask,int8_t* base,vuint16m8_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16mf4_m(vbool64_t mask,int16_t* base,vuint16mf4_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16mf2_m(vbool32_t mask,int16_t* base,vuint16mf2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16m1_m(vbool16_t mask,int16_t* base,vuint16m1_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16m2_m(vbool8_t mask,int16_t* base,vuint16m2_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16m4_m(vbool4_t mask,int16_t* base,vuint16m4_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16m8_m(vbool2_t mask,int16_t* base,vuint16m8_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32mf2_m(vbool64_t mask,int32_t* base,vuint16mf4_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32m1_m(vbool32_t mask,int32_t* base,vuint16mf2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32m2_m(vbool16_t mask,int32_t* base,vuint16m1_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32m4_m(vbool8_t mask,int32_t* base,vuint16m2_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32m8_m(vbool4_t mask,int32_t* base,vuint16m4_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i64m1_m(vbool64_t mask,int64_t* base,vuint16mf4_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i64m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i64m2_m(vbool32_t mask,int64_t* base,vuint16mf2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i64m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i64m4_m(vbool16_t mask,int64_t* base,vuint16m1_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i64m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i64m8_m(vbool8_t mask,int64_t* base,vuint16m2_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i64m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8mf8_m(vbool64_t mask,uint8_t* base,vuint16mf4_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8mf8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8mf4_m(vbool32_t mask,uint8_t* base,vuint16mf2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8mf2_m(vbool16_t mask,uint8_t* base,vuint16m1_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8m1_m(vbool8_t mask,uint8_t* base,vuint16m2_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8m2_m(vbool4_t mask,uint8_t* base,vuint16m4_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8m4_m(vbool2_t mask,uint8_t* base,vuint16m8_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16mf4_m(vbool64_t mask,uint16_t* base,vuint16mf4_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16mf2_m(vbool32_t mask,uint16_t* base,vuint16mf2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16m1_m(vbool16_t mask,uint16_t* base,vuint16m1_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16m2_m(vbool8_t mask,uint16_t* base,vuint16m2_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16m4_m(vbool4_t mask,uint16_t* base,vuint16m4_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16m8_m(vbool2_t mask,uint16_t* base,vuint16m8_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32mf2_m(vbool64_t mask,uint32_t* base,vuint16mf4_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32m1_m(vbool32_t mask,uint32_t* base,vuint16mf2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32m2_m(vbool16_t mask,uint32_t* base,vuint16m1_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32m4_m(vbool8_t mask,uint32_t* base,vuint16m2_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32m8_m(vbool4_t mask,uint32_t* base,vuint16m4_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u64m1_m(vbool64_t mask,uint64_t* base,vuint16mf4_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u64m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u64m2_m(vbool32_t mask,uint64_t* base,vuint16mf2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u64m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u64m4_m(vbool16_t mask,uint64_t* base,vuint16m1_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u64m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u64m8_m(vbool8_t mask,uint64_t* base,vuint16m2_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u64m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32mf2_m(vbool64_t mask,float* base,vuint16mf4_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32m1_m(vbool32_t mask,float* base,vuint16mf2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32m2_m(vbool16_t mask,float* base,vuint16m1_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32m4_m(vbool8_t mask,float* base,vuint16m2_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32m8_m(vbool4_t mask,float* base,vuint16m4_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f64m1_m(vbool64_t mask,double* base,vuint16mf4_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f64m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f64m2_m(vbool32_t mask,double* base,vuint16mf2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f64m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f64m4_m(vbool16_t mask,double* base,vuint16m1_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f64m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f64m8_m(vbool8_t mask,double* base,vuint16m2_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f64m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "54e5c59e87fc121d6a5661b88f7a21f96a013f1e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsuxei16_v_m-3.c", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei16_v_m-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei16_v_m-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei16_v_m-3.c?ref=e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "patch": "@@ -0,0 +1,333 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei16_v_i8mf8_m(vbool64_t mask,int8_t* base,vuint16mf4_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8mf8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8mf4_m(vbool32_t mask,int8_t* base,vuint16mf2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8mf2_m(vbool16_t mask,int8_t* base,vuint16m1_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8m1_m(vbool8_t mask,int8_t* base,vuint16m2_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8m2_m(vbool4_t mask,int8_t* base,vuint16m4_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i8m4_m(vbool2_t mask,int8_t* base,vuint16m8_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i8m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16mf4_m(vbool64_t mask,int16_t* base,vuint16mf4_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16mf2_m(vbool32_t mask,int16_t* base,vuint16mf2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16m1_m(vbool16_t mask,int16_t* base,vuint16m1_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16m2_m(vbool8_t mask,int16_t* base,vuint16m2_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16m4_m(vbool4_t mask,int16_t* base,vuint16m4_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i16m8_m(vbool2_t mask,int16_t* base,vuint16m8_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i16m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32mf2_m(vbool64_t mask,int32_t* base,vuint16mf4_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32m1_m(vbool32_t mask,int32_t* base,vuint16mf2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32m2_m(vbool16_t mask,int32_t* base,vuint16m1_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32m4_m(vbool8_t mask,int32_t* base,vuint16m2_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i32m8_m(vbool4_t mask,int32_t* base,vuint16m4_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i32m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i64m1_m(vbool64_t mask,int64_t* base,vuint16mf4_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i64m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i64m2_m(vbool32_t mask,int64_t* base,vuint16mf2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i64m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i64m4_m(vbool16_t mask,int64_t* base,vuint16m1_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i64m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_i64m8_m(vbool8_t mask,int64_t* base,vuint16m2_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_i64m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8mf8_m(vbool64_t mask,uint8_t* base,vuint16mf4_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8mf8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8mf4_m(vbool32_t mask,uint8_t* base,vuint16mf2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8mf2_m(vbool16_t mask,uint8_t* base,vuint16m1_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8m1_m(vbool8_t mask,uint8_t* base,vuint16m2_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8m2_m(vbool4_t mask,uint8_t* base,vuint16m4_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u8m4_m(vbool2_t mask,uint8_t* base,vuint16m8_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u8m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16mf4_m(vbool64_t mask,uint16_t* base,vuint16mf4_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16mf2_m(vbool32_t mask,uint16_t* base,vuint16mf2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16m1_m(vbool16_t mask,uint16_t* base,vuint16m1_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16m2_m(vbool8_t mask,uint16_t* base,vuint16m2_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16m4_m(vbool4_t mask,uint16_t* base,vuint16m4_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u16m8_m(vbool2_t mask,uint16_t* base,vuint16m8_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u16m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32mf2_m(vbool64_t mask,uint32_t* base,vuint16mf4_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32m1_m(vbool32_t mask,uint32_t* base,vuint16mf2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32m2_m(vbool16_t mask,uint32_t* base,vuint16m1_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32m4_m(vbool8_t mask,uint32_t* base,vuint16m2_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u32m8_m(vbool4_t mask,uint32_t* base,vuint16m4_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u32m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u64m1_m(vbool64_t mask,uint64_t* base,vuint16mf4_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u64m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u64m2_m(vbool32_t mask,uint64_t* base,vuint16mf2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u64m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u64m4_m(vbool16_t mask,uint64_t* base,vuint16m1_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u64m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_u64m8_m(vbool8_t mask,uint64_t* base,vuint16m2_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_u64m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32mf2_m(vbool64_t mask,float* base,vuint16mf4_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32m1_m(vbool32_t mask,float* base,vuint16mf2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32m2_m(vbool16_t mask,float* base,vuint16m1_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32m4_m(vbool8_t mask,float* base,vuint16m2_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f32m8_m(vbool4_t mask,float* base,vuint16m4_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f32m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f64m1_m(vbool64_t mask,double* base,vuint16mf4_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f64m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f64m2_m(vbool32_t mask,double* base,vuint16mf2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f64m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f64m4_m(vbool16_t mask,double* base,vuint16m1_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f64m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei16_v_f64m8_m(vbool8_t mask,double* base,vuint16m2_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei16_v_f64m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "269c5a686b70f9d5dbe65c6334ecdd2abb0dbac1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsuxei32_v-1.c", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei32_v-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei32_v-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei32_v-1.c?ref=e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "patch": "@@ -0,0 +1,307 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei32_v_i8mf8(int8_t* base,vuint32mf2_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8mf8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i8mf4(int8_t* base,vuint32m1_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i8mf2(int8_t* base,vuint32m2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i8m1(int8_t* base,vuint32m4_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i8m2(int8_t* base,vuint32m8_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16mf4(int16_t* base,vuint32mf2_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16mf2(int16_t* base,vuint32m1_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16m1(int16_t* base,vuint32m2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16m2(int16_t* base,vuint32m4_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16m4(int16_t* base,vuint32m8_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32mf2(int32_t* base,vuint32mf2_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32m1(int32_t* base,vuint32m1_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32m2(int32_t* base,vuint32m2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32m4(int32_t* base,vuint32m4_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32m8(int32_t* base,vuint32m8_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i64m1(int64_t* base,vuint32mf2_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i64m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i64m2(int64_t* base,vuint32m1_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i64m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i64m4(int64_t* base,vuint32m2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i64m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i64m8(int64_t* base,vuint32m4_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i64m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8mf8(uint8_t* base,vuint32mf2_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8mf8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8mf4(uint8_t* base,vuint32m1_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8mf2(uint8_t* base,vuint32m2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8m1(uint8_t* base,vuint32m4_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8m2(uint8_t* base,vuint32m8_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16mf4(uint16_t* base,vuint32mf2_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16mf2(uint16_t* base,vuint32m1_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16m1(uint16_t* base,vuint32m2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16m2(uint16_t* base,vuint32m4_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16m4(uint16_t* base,vuint32m8_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32mf2(uint32_t* base,vuint32mf2_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32m1(uint32_t* base,vuint32m1_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32m2(uint32_t* base,vuint32m2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32m4(uint32_t* base,vuint32m4_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32m8(uint32_t* base,vuint32m8_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u64m1(uint64_t* base,vuint32mf2_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u64m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u64m2(uint64_t* base,vuint32m1_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u64m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u64m4(uint64_t* base,vuint32m2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u64m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u64m8(uint64_t* base,vuint32m4_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u64m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32mf2(float* base,vuint32mf2_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32m1(float* base,vuint32m1_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32m2(float* base,vuint32m2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32m4(float* base,vuint32m4_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32m8(float* base,vuint32m8_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f64m1(double* base,vuint32mf2_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f64m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f64m2(double* base,vuint32m1_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f64m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f64m4(double* base,vuint32m2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f64m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f64m8(double* base,vuint32m4_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f64m8(base,bindex,value,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "eae7dd8ced088bbedcf2703fccc09a1367026b5b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsuxei32_v-2.c", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei32_v-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei32_v-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei32_v-2.c?ref=e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "patch": "@@ -0,0 +1,307 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei32_v_i8mf8(int8_t* base,vuint32mf2_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8mf8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i8mf4(int8_t* base,vuint32m1_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i8mf2(int8_t* base,vuint32m2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i8m1(int8_t* base,vuint32m4_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i8m2(int8_t* base,vuint32m8_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16mf4(int16_t* base,vuint32mf2_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16mf2(int16_t* base,vuint32m1_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16m1(int16_t* base,vuint32m2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16m2(int16_t* base,vuint32m4_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16m4(int16_t* base,vuint32m8_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32mf2(int32_t* base,vuint32mf2_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32m1(int32_t* base,vuint32m1_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32m2(int32_t* base,vuint32m2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32m4(int32_t* base,vuint32m4_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32m8(int32_t* base,vuint32m8_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i64m1(int64_t* base,vuint32mf2_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i64m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i64m2(int64_t* base,vuint32m1_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i64m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i64m4(int64_t* base,vuint32m2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i64m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i64m8(int64_t* base,vuint32m4_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i64m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8mf8(uint8_t* base,vuint32mf2_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8mf8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8mf4(uint8_t* base,vuint32m1_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8mf2(uint8_t* base,vuint32m2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8m1(uint8_t* base,vuint32m4_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8m2(uint8_t* base,vuint32m8_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16mf4(uint16_t* base,vuint32mf2_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16mf2(uint16_t* base,vuint32m1_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16m1(uint16_t* base,vuint32m2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16m2(uint16_t* base,vuint32m4_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16m4(uint16_t* base,vuint32m8_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32mf2(uint32_t* base,vuint32mf2_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32m1(uint32_t* base,vuint32m1_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32m2(uint32_t* base,vuint32m2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32m4(uint32_t* base,vuint32m4_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32m8(uint32_t* base,vuint32m8_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u64m1(uint64_t* base,vuint32mf2_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u64m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u64m2(uint64_t* base,vuint32m1_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u64m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u64m4(uint64_t* base,vuint32m2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u64m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u64m8(uint64_t* base,vuint32m4_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u64m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32mf2(float* base,vuint32mf2_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32m1(float* base,vuint32m1_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32m2(float* base,vuint32m2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32m4(float* base,vuint32m4_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32m8(float* base,vuint32m8_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f64m1(double* base,vuint32mf2_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f64m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f64m2(double* base,vuint32m1_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f64m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f64m4(double* base,vuint32m2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f64m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f64m8(double* base,vuint32m4_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f64m8(base,bindex,value,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "89a73770ea20622e2d767da3761c600c48a6ec5f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsuxei32_v-3.c", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei32_v-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei32_v-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei32_v-3.c?ref=e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "patch": "@@ -0,0 +1,307 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei32_v_i8mf8(int8_t* base,vuint32mf2_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8mf8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i8mf4(int8_t* base,vuint32m1_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i8mf2(int8_t* base,vuint32m2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i8m1(int8_t* base,vuint32m4_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i8m2(int8_t* base,vuint32m8_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16mf4(int16_t* base,vuint32mf2_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16mf2(int16_t* base,vuint32m1_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16m1(int16_t* base,vuint32m2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16m2(int16_t* base,vuint32m4_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16m4(int16_t* base,vuint32m8_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32mf2(int32_t* base,vuint32mf2_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32m1(int32_t* base,vuint32m1_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32m2(int32_t* base,vuint32m2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32m4(int32_t* base,vuint32m4_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32m8(int32_t* base,vuint32m8_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i64m1(int64_t* base,vuint32mf2_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i64m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i64m2(int64_t* base,vuint32m1_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i64m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i64m4(int64_t* base,vuint32m2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i64m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i64m8(int64_t* base,vuint32m4_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i64m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8mf8(uint8_t* base,vuint32mf2_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8mf8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8mf4(uint8_t* base,vuint32m1_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8mf2(uint8_t* base,vuint32m2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8m1(uint8_t* base,vuint32m4_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8m2(uint8_t* base,vuint32m8_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16mf4(uint16_t* base,vuint32mf2_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16mf2(uint16_t* base,vuint32m1_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16m1(uint16_t* base,vuint32m2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16m2(uint16_t* base,vuint32m4_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16m4(uint16_t* base,vuint32m8_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32mf2(uint32_t* base,vuint32mf2_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32m1(uint32_t* base,vuint32m1_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32m2(uint32_t* base,vuint32m2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32m4(uint32_t* base,vuint32m4_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32m8(uint32_t* base,vuint32m8_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u64m1(uint64_t* base,vuint32mf2_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u64m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u64m2(uint64_t* base,vuint32m1_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u64m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u64m4(uint64_t* base,vuint32m2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u64m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u64m8(uint64_t* base,vuint32m4_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u64m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32mf2(float* base,vuint32mf2_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32m1(float* base,vuint32m1_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32m2(float* base,vuint32m2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32m4(float* base,vuint32m4_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32m8(float* base,vuint32m8_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f64m1(double* base,vuint32mf2_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f64m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f64m2(double* base,vuint32m1_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f64m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f64m4(double* base,vuint32m2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f64m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f64m8(double* base,vuint32m4_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f64m8(base,bindex,value,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "0fb40241e322a1f2acddf0b803eb04e3c5b6036d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsuxei32_v_m-1.c", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei32_v_m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei32_v_m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei32_v_m-1.c?ref=e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "patch": "@@ -0,0 +1,307 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei32_v_i8mf8_m(vbool64_t mask,int8_t* base,vuint32mf2_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8mf8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i8mf4_m(vbool32_t mask,int8_t* base,vuint32m1_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i8mf2_m(vbool16_t mask,int8_t* base,vuint32m2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i8m1_m(vbool8_t mask,int8_t* base,vuint32m4_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i8m2_m(vbool4_t mask,int8_t* base,vuint32m8_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16mf4_m(vbool64_t mask,int16_t* base,vuint32mf2_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16mf2_m(vbool32_t mask,int16_t* base,vuint32m1_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16m1_m(vbool16_t mask,int16_t* base,vuint32m2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16m2_m(vbool8_t mask,int16_t* base,vuint32m4_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16m4_m(vbool4_t mask,int16_t* base,vuint32m8_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32mf2_m(vbool64_t mask,int32_t* base,vuint32mf2_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32m1_m(vbool32_t mask,int32_t* base,vuint32m1_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32m2_m(vbool16_t mask,int32_t* base,vuint32m2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32m4_m(vbool8_t mask,int32_t* base,vuint32m4_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32m8_m(vbool4_t mask,int32_t* base,vuint32m8_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i64m1_m(vbool64_t mask,int64_t* base,vuint32mf2_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i64m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i64m2_m(vbool32_t mask,int64_t* base,vuint32m1_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i64m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i64m4_m(vbool16_t mask,int64_t* base,vuint32m2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i64m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i64m8_m(vbool8_t mask,int64_t* base,vuint32m4_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i64m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8mf8_m(vbool64_t mask,uint8_t* base,vuint32mf2_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8mf8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8mf4_m(vbool32_t mask,uint8_t* base,vuint32m1_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8mf2_m(vbool16_t mask,uint8_t* base,vuint32m2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8m1_m(vbool8_t mask,uint8_t* base,vuint32m4_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8m2_m(vbool4_t mask,uint8_t* base,vuint32m8_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16mf4_m(vbool64_t mask,uint16_t* base,vuint32mf2_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16mf2_m(vbool32_t mask,uint16_t* base,vuint32m1_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16m1_m(vbool16_t mask,uint16_t* base,vuint32m2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16m2_m(vbool8_t mask,uint16_t* base,vuint32m4_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16m4_m(vbool4_t mask,uint16_t* base,vuint32m8_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32mf2_m(vbool64_t mask,uint32_t* base,vuint32mf2_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32m1_m(vbool32_t mask,uint32_t* base,vuint32m1_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32m2_m(vbool16_t mask,uint32_t* base,vuint32m2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32m4_m(vbool8_t mask,uint32_t* base,vuint32m4_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32m8_m(vbool4_t mask,uint32_t* base,vuint32m8_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u64m1_m(vbool64_t mask,uint64_t* base,vuint32mf2_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u64m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u64m2_m(vbool32_t mask,uint64_t* base,vuint32m1_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u64m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u64m4_m(vbool16_t mask,uint64_t* base,vuint32m2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u64m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u64m8_m(vbool8_t mask,uint64_t* base,vuint32m4_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u64m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32mf2_m(vbool64_t mask,float* base,vuint32mf2_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32m1_m(vbool32_t mask,float* base,vuint32m1_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32m2_m(vbool16_t mask,float* base,vuint32m2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32m4_m(vbool8_t mask,float* base,vuint32m4_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32m8_m(vbool4_t mask,float* base,vuint32m8_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f64m1_m(vbool64_t mask,double* base,vuint32mf2_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f64m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f64m2_m(vbool32_t mask,double* base,vuint32m1_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f64m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f64m4_m(vbool16_t mask,double* base,vuint32m2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f64m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f64m8_m(vbool8_t mask,double* base,vuint32m4_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f64m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "d7c0c93a4bb8ada5929b9472e18856e10510d9b0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsuxei32_v_m-2.c", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei32_v_m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei32_v_m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei32_v_m-2.c?ref=e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "patch": "@@ -0,0 +1,307 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei32_v_i8mf8_m(vbool64_t mask,int8_t* base,vuint32mf2_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8mf8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i8mf4_m(vbool32_t mask,int8_t* base,vuint32m1_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i8mf2_m(vbool16_t mask,int8_t* base,vuint32m2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i8m1_m(vbool8_t mask,int8_t* base,vuint32m4_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i8m2_m(vbool4_t mask,int8_t* base,vuint32m8_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16mf4_m(vbool64_t mask,int16_t* base,vuint32mf2_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16mf2_m(vbool32_t mask,int16_t* base,vuint32m1_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16m1_m(vbool16_t mask,int16_t* base,vuint32m2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16m2_m(vbool8_t mask,int16_t* base,vuint32m4_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16m4_m(vbool4_t mask,int16_t* base,vuint32m8_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32mf2_m(vbool64_t mask,int32_t* base,vuint32mf2_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32m1_m(vbool32_t mask,int32_t* base,vuint32m1_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32m2_m(vbool16_t mask,int32_t* base,vuint32m2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32m4_m(vbool8_t mask,int32_t* base,vuint32m4_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32m8_m(vbool4_t mask,int32_t* base,vuint32m8_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i64m1_m(vbool64_t mask,int64_t* base,vuint32mf2_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i64m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i64m2_m(vbool32_t mask,int64_t* base,vuint32m1_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i64m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i64m4_m(vbool16_t mask,int64_t* base,vuint32m2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i64m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i64m8_m(vbool8_t mask,int64_t* base,vuint32m4_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i64m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8mf8_m(vbool64_t mask,uint8_t* base,vuint32mf2_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8mf8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8mf4_m(vbool32_t mask,uint8_t* base,vuint32m1_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8mf2_m(vbool16_t mask,uint8_t* base,vuint32m2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8m1_m(vbool8_t mask,uint8_t* base,vuint32m4_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8m2_m(vbool4_t mask,uint8_t* base,vuint32m8_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16mf4_m(vbool64_t mask,uint16_t* base,vuint32mf2_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16mf2_m(vbool32_t mask,uint16_t* base,vuint32m1_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16m1_m(vbool16_t mask,uint16_t* base,vuint32m2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16m2_m(vbool8_t mask,uint16_t* base,vuint32m4_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16m4_m(vbool4_t mask,uint16_t* base,vuint32m8_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32mf2_m(vbool64_t mask,uint32_t* base,vuint32mf2_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32m1_m(vbool32_t mask,uint32_t* base,vuint32m1_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32m2_m(vbool16_t mask,uint32_t* base,vuint32m2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32m4_m(vbool8_t mask,uint32_t* base,vuint32m4_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32m8_m(vbool4_t mask,uint32_t* base,vuint32m8_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u64m1_m(vbool64_t mask,uint64_t* base,vuint32mf2_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u64m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u64m2_m(vbool32_t mask,uint64_t* base,vuint32m1_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u64m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u64m4_m(vbool16_t mask,uint64_t* base,vuint32m2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u64m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u64m8_m(vbool8_t mask,uint64_t* base,vuint32m4_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u64m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32mf2_m(vbool64_t mask,float* base,vuint32mf2_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32m1_m(vbool32_t mask,float* base,vuint32m1_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32m2_m(vbool16_t mask,float* base,vuint32m2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32m4_m(vbool8_t mask,float* base,vuint32m4_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32m8_m(vbool4_t mask,float* base,vuint32m8_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f64m1_m(vbool64_t mask,double* base,vuint32mf2_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f64m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f64m2_m(vbool32_t mask,double* base,vuint32m1_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f64m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f64m4_m(vbool16_t mask,double* base,vuint32m2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f64m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f64m8_m(vbool8_t mask,double* base,vuint32m4_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f64m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "4bf1210b45b405371eb5d9cf2ef47ea51f7fe8d8", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsuxei32_v_m-3.c", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei32_v_m-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei32_v_m-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei32_v_m-3.c?ref=e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "patch": "@@ -0,0 +1,307 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei32_v_i8mf8_m(vbool64_t mask,int8_t* base,vuint32mf2_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8mf8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i8mf4_m(vbool32_t mask,int8_t* base,vuint32m1_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i8mf2_m(vbool16_t mask,int8_t* base,vuint32m2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i8m1_m(vbool8_t mask,int8_t* base,vuint32m4_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i8m2_m(vbool4_t mask,int8_t* base,vuint32m8_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i8m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16mf4_m(vbool64_t mask,int16_t* base,vuint32mf2_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16mf2_m(vbool32_t mask,int16_t* base,vuint32m1_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16m1_m(vbool16_t mask,int16_t* base,vuint32m2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16m2_m(vbool8_t mask,int16_t* base,vuint32m4_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i16m4_m(vbool4_t mask,int16_t* base,vuint32m8_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i16m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32mf2_m(vbool64_t mask,int32_t* base,vuint32mf2_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32m1_m(vbool32_t mask,int32_t* base,vuint32m1_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32m2_m(vbool16_t mask,int32_t* base,vuint32m2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32m4_m(vbool8_t mask,int32_t* base,vuint32m4_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i32m8_m(vbool4_t mask,int32_t* base,vuint32m8_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i32m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i64m1_m(vbool64_t mask,int64_t* base,vuint32mf2_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i64m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i64m2_m(vbool32_t mask,int64_t* base,vuint32m1_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i64m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i64m4_m(vbool16_t mask,int64_t* base,vuint32m2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i64m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_i64m8_m(vbool8_t mask,int64_t* base,vuint32m4_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_i64m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8mf8_m(vbool64_t mask,uint8_t* base,vuint32mf2_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8mf8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8mf4_m(vbool32_t mask,uint8_t* base,vuint32m1_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8mf2_m(vbool16_t mask,uint8_t* base,vuint32m2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8m1_m(vbool8_t mask,uint8_t* base,vuint32m4_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u8m2_m(vbool4_t mask,uint8_t* base,vuint32m8_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u8m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16mf4_m(vbool64_t mask,uint16_t* base,vuint32mf2_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16mf2_m(vbool32_t mask,uint16_t* base,vuint32m1_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16m1_m(vbool16_t mask,uint16_t* base,vuint32m2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16m2_m(vbool8_t mask,uint16_t* base,vuint32m4_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u16m4_m(vbool4_t mask,uint16_t* base,vuint32m8_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u16m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32mf2_m(vbool64_t mask,uint32_t* base,vuint32mf2_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32m1_m(vbool32_t mask,uint32_t* base,vuint32m1_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32m2_m(vbool16_t mask,uint32_t* base,vuint32m2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32m4_m(vbool8_t mask,uint32_t* base,vuint32m4_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u32m8_m(vbool4_t mask,uint32_t* base,vuint32m8_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u32m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u64m1_m(vbool64_t mask,uint64_t* base,vuint32mf2_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u64m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u64m2_m(vbool32_t mask,uint64_t* base,vuint32m1_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u64m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u64m4_m(vbool16_t mask,uint64_t* base,vuint32m2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u64m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_u64m8_m(vbool8_t mask,uint64_t* base,vuint32m4_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_u64m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32mf2_m(vbool64_t mask,float* base,vuint32mf2_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32m1_m(vbool32_t mask,float* base,vuint32m1_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32m2_m(vbool16_t mask,float* base,vuint32m2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32m4_m(vbool8_t mask,float* base,vuint32m4_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f32m8_m(vbool4_t mask,float* base,vuint32m8_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f32m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f64m1_m(vbool64_t mask,double* base,vuint32mf2_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f64m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f64m2_m(vbool32_t mask,double* base,vuint32m1_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f64m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f64m4_m(vbool16_t mask,double* base,vuint32m2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f64m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei32_v_f64m8_m(vbool8_t mask,double* base,vuint32m4_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei32_v_f64m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "c1bbc3b7267f06e4605c88030c175180fe690936", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsuxei64_v-1.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei64_v-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei64_v-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei64_v-1.c?ref=e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei64_v_i8mf8(int8_t* base,vuint64m1_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i8mf8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i8mf4(int8_t* base,vuint64m2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i8mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i8mf2(int8_t* base,vuint64m4_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i8mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i8m1(int8_t* base,vuint64m8_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i8m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i16mf4(int16_t* base,vuint64m1_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i16mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i16mf2(int16_t* base,vuint64m2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i16mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i16m1(int16_t* base,vuint64m4_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i16m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i16m2(int16_t* base,vuint64m8_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i16m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i32mf2(int32_t* base,vuint64m1_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i32mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i32m1(int32_t* base,vuint64m2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i32m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i32m2(int32_t* base,vuint64m4_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i32m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i32m4(int32_t* base,vuint64m8_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i32m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i64m1(int64_t* base,vuint64m1_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i64m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i64m2(int64_t* base,vuint64m2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i64m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i64m4(int64_t* base,vuint64m4_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i64m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i64m8(int64_t* base,vuint64m8_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i64m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u8mf8(uint8_t* base,vuint64m1_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u8mf8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u8mf4(uint8_t* base,vuint64m2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u8mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u8mf2(uint8_t* base,vuint64m4_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u8mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u8m1(uint8_t* base,vuint64m8_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u8m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u16mf4(uint16_t* base,vuint64m1_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u16mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u16mf2(uint16_t* base,vuint64m2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u16mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u16m1(uint16_t* base,vuint64m4_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u16m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u16m2(uint16_t* base,vuint64m8_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u16m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u32mf2(uint32_t* base,vuint64m1_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u32mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u32m1(uint32_t* base,vuint64m2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u32m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u32m2(uint32_t* base,vuint64m4_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u32m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u32m4(uint32_t* base,vuint64m8_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u32m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u64m1(uint64_t* base,vuint64m1_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u64m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u64m2(uint64_t* base,vuint64m2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u64m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u64m4(uint64_t* base,vuint64m4_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u64m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u64m8(uint64_t* base,vuint64m8_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u64m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f32mf2(float* base,vuint64m1_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f32mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f32m1(float* base,vuint64m2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f32m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f32m2(float* base,vuint64m4_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f32m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f32m4(float* base,vuint64m8_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f32m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f64m1(double* base,vuint64m1_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f64m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f64m2(double* base,vuint64m2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f64m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f64m4(double* base,vuint64m4_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f64m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f64m8(double* base,vuint64m8_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f64m8(base,bindex,value,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "7ce64d18497bf25f65c967c5917957961262a4e5", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsuxei64_v-2.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei64_v-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei64_v-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei64_v-2.c?ref=e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei64_v_i8mf8(int8_t* base,vuint64m1_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i8mf8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i8mf4(int8_t* base,vuint64m2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i8mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i8mf2(int8_t* base,vuint64m4_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i8mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i8m1(int8_t* base,vuint64m8_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i8m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i16mf4(int16_t* base,vuint64m1_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i16mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i16mf2(int16_t* base,vuint64m2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i16mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i16m1(int16_t* base,vuint64m4_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i16m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i16m2(int16_t* base,vuint64m8_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i16m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i32mf2(int32_t* base,vuint64m1_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i32mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i32m1(int32_t* base,vuint64m2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i32m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i32m2(int32_t* base,vuint64m4_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i32m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i32m4(int32_t* base,vuint64m8_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i32m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i64m1(int64_t* base,vuint64m1_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i64m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i64m2(int64_t* base,vuint64m2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i64m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i64m4(int64_t* base,vuint64m4_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i64m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i64m8(int64_t* base,vuint64m8_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i64m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u8mf8(uint8_t* base,vuint64m1_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u8mf8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u8mf4(uint8_t* base,vuint64m2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u8mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u8mf2(uint8_t* base,vuint64m4_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u8mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u8m1(uint8_t* base,vuint64m8_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u8m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u16mf4(uint16_t* base,vuint64m1_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u16mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u16mf2(uint16_t* base,vuint64m2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u16mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u16m1(uint16_t* base,vuint64m4_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u16m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u16m2(uint16_t* base,vuint64m8_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u16m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u32mf2(uint32_t* base,vuint64m1_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u32mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u32m1(uint32_t* base,vuint64m2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u32m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u32m2(uint32_t* base,vuint64m4_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u32m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u32m4(uint32_t* base,vuint64m8_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u32m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u64m1(uint64_t* base,vuint64m1_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u64m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u64m2(uint64_t* base,vuint64m2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u64m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u64m4(uint64_t* base,vuint64m4_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u64m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u64m8(uint64_t* base,vuint64m8_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u64m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f32mf2(float* base,vuint64m1_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f32mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f32m1(float* base,vuint64m2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f32m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f32m2(float* base,vuint64m4_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f32m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f32m4(float* base,vuint64m8_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f32m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f64m1(double* base,vuint64m1_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f64m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f64m2(double* base,vuint64m2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f64m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f64m4(double* base,vuint64m4_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f64m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f64m8(double* base,vuint64m8_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f64m8(base,bindex,value,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "ef4f76370e9579099a3d06cf3e8972a9a3080dca", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsuxei64_v-3.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei64_v-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei64_v-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei64_v-3.c?ref=e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei64_v_i8mf8(int8_t* base,vuint64m1_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i8mf8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i8mf4(int8_t* base,vuint64m2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i8mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i8mf2(int8_t* base,vuint64m4_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i8mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i8m1(int8_t* base,vuint64m8_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i8m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i16mf4(int16_t* base,vuint64m1_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i16mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i16mf2(int16_t* base,vuint64m2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i16mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i16m1(int16_t* base,vuint64m4_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i16m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i16m2(int16_t* base,vuint64m8_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i16m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i32mf2(int32_t* base,vuint64m1_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i32mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i32m1(int32_t* base,vuint64m2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i32m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i32m2(int32_t* base,vuint64m4_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i32m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i32m4(int32_t* base,vuint64m8_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i32m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i64m1(int64_t* base,vuint64m1_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i64m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i64m2(int64_t* base,vuint64m2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i64m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i64m4(int64_t* base,vuint64m4_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i64m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i64m8(int64_t* base,vuint64m8_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i64m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u8mf8(uint8_t* base,vuint64m1_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u8mf8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u8mf4(uint8_t* base,vuint64m2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u8mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u8mf2(uint8_t* base,vuint64m4_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u8mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u8m1(uint8_t* base,vuint64m8_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u8m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u16mf4(uint16_t* base,vuint64m1_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u16mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u16mf2(uint16_t* base,vuint64m2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u16mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u16m1(uint16_t* base,vuint64m4_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u16m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u16m2(uint16_t* base,vuint64m8_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u16m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u32mf2(uint32_t* base,vuint64m1_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u32mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u32m1(uint32_t* base,vuint64m2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u32m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u32m2(uint32_t* base,vuint64m4_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u32m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u32m4(uint32_t* base,vuint64m8_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u32m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u64m1(uint64_t* base,vuint64m1_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u64m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u64m2(uint64_t* base,vuint64m2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u64m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u64m4(uint64_t* base,vuint64m4_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u64m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u64m8(uint64_t* base,vuint64m8_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u64m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f32mf2(float* base,vuint64m1_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f32mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f32m1(float* base,vuint64m2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f32m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f32m2(float* base,vuint64m4_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f32m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f32m4(float* base,vuint64m8_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f32m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f64m1(double* base,vuint64m1_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f64m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f64m2(double* base,vuint64m2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f64m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f64m4(double* base,vuint64m4_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f64m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f64m8(double* base,vuint64m8_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f64m8(base,bindex,value,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "5ddcdab15ba88e46cf5515964f9a6c6fb80c074f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsuxei64_v_m-1.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei64_v_m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei64_v_m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei64_v_m-1.c?ref=e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei64_v_i8mf8_m(vbool64_t mask,int8_t* base,vuint64m1_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i8mf8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i8mf4_m(vbool32_t mask,int8_t* base,vuint64m2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i8mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i8mf2_m(vbool16_t mask,int8_t* base,vuint64m4_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i8mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i8m1_m(vbool8_t mask,int8_t* base,vuint64m8_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i8m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i16mf4_m(vbool64_t mask,int16_t* base,vuint64m1_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i16mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i16mf2_m(vbool32_t mask,int16_t* base,vuint64m2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i16mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i16m1_m(vbool16_t mask,int16_t* base,vuint64m4_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i16m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i16m2_m(vbool8_t mask,int16_t* base,vuint64m8_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i16m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i32mf2_m(vbool64_t mask,int32_t* base,vuint64m1_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i32mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i32m1_m(vbool32_t mask,int32_t* base,vuint64m2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i32m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i32m2_m(vbool16_t mask,int32_t* base,vuint64m4_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i32m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i32m4_m(vbool8_t mask,int32_t* base,vuint64m8_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i32m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i64m1_m(vbool64_t mask,int64_t* base,vuint64m1_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i64m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i64m2_m(vbool32_t mask,int64_t* base,vuint64m2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i64m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i64m4_m(vbool16_t mask,int64_t* base,vuint64m4_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i64m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i64m8_m(vbool8_t mask,int64_t* base,vuint64m8_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i64m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u8mf8_m(vbool64_t mask,uint8_t* base,vuint64m1_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u8mf8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u8mf4_m(vbool32_t mask,uint8_t* base,vuint64m2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u8mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u8mf2_m(vbool16_t mask,uint8_t* base,vuint64m4_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u8mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u8m1_m(vbool8_t mask,uint8_t* base,vuint64m8_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u8m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u16mf4_m(vbool64_t mask,uint16_t* base,vuint64m1_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u16mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u16mf2_m(vbool32_t mask,uint16_t* base,vuint64m2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u16mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u16m1_m(vbool16_t mask,uint16_t* base,vuint64m4_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u16m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u16m2_m(vbool8_t mask,uint16_t* base,vuint64m8_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u16m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u32mf2_m(vbool64_t mask,uint32_t* base,vuint64m1_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u32mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u32m1_m(vbool32_t mask,uint32_t* base,vuint64m2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u32m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u32m2_m(vbool16_t mask,uint32_t* base,vuint64m4_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u32m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u32m4_m(vbool8_t mask,uint32_t* base,vuint64m8_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u32m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u64m1_m(vbool64_t mask,uint64_t* base,vuint64m1_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u64m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u64m2_m(vbool32_t mask,uint64_t* base,vuint64m2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u64m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u64m4_m(vbool16_t mask,uint64_t* base,vuint64m4_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u64m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u64m8_m(vbool8_t mask,uint64_t* base,vuint64m8_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u64m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f32mf2_m(vbool64_t mask,float* base,vuint64m1_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f32mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f32m1_m(vbool32_t mask,float* base,vuint64m2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f32m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f32m2_m(vbool16_t mask,float* base,vuint64m4_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f32m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f32m4_m(vbool8_t mask,float* base,vuint64m8_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f32m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f64m1_m(vbool64_t mask,double* base,vuint64m1_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f64m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f64m2_m(vbool32_t mask,double* base,vuint64m2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f64m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f64m4_m(vbool16_t mask,double* base,vuint64m4_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f64m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f64m8_m(vbool8_t mask,double* base,vuint64m8_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f64m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "fc0965dd60615550ee362ebcafe9b557f4497a32", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsuxei64_v_m-2.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei64_v_m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei64_v_m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei64_v_m-2.c?ref=e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei64_v_i8mf8_m(vbool64_t mask,int8_t* base,vuint64m1_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i8mf8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i8mf4_m(vbool32_t mask,int8_t* base,vuint64m2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i8mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i8mf2_m(vbool16_t mask,int8_t* base,vuint64m4_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i8mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i8m1_m(vbool8_t mask,int8_t* base,vuint64m8_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i8m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i16mf4_m(vbool64_t mask,int16_t* base,vuint64m1_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i16mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i16mf2_m(vbool32_t mask,int16_t* base,vuint64m2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i16mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i16m1_m(vbool16_t mask,int16_t* base,vuint64m4_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i16m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i16m2_m(vbool8_t mask,int16_t* base,vuint64m8_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i16m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i32mf2_m(vbool64_t mask,int32_t* base,vuint64m1_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i32mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i32m1_m(vbool32_t mask,int32_t* base,vuint64m2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i32m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i32m2_m(vbool16_t mask,int32_t* base,vuint64m4_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i32m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i32m4_m(vbool8_t mask,int32_t* base,vuint64m8_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i32m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i64m1_m(vbool64_t mask,int64_t* base,vuint64m1_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i64m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i64m2_m(vbool32_t mask,int64_t* base,vuint64m2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i64m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i64m4_m(vbool16_t mask,int64_t* base,vuint64m4_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i64m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i64m8_m(vbool8_t mask,int64_t* base,vuint64m8_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i64m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u8mf8_m(vbool64_t mask,uint8_t* base,vuint64m1_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u8mf8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u8mf4_m(vbool32_t mask,uint8_t* base,vuint64m2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u8mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u8mf2_m(vbool16_t mask,uint8_t* base,vuint64m4_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u8mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u8m1_m(vbool8_t mask,uint8_t* base,vuint64m8_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u8m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u16mf4_m(vbool64_t mask,uint16_t* base,vuint64m1_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u16mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u16mf2_m(vbool32_t mask,uint16_t* base,vuint64m2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u16mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u16m1_m(vbool16_t mask,uint16_t* base,vuint64m4_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u16m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u16m2_m(vbool8_t mask,uint16_t* base,vuint64m8_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u16m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u32mf2_m(vbool64_t mask,uint32_t* base,vuint64m1_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u32mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u32m1_m(vbool32_t mask,uint32_t* base,vuint64m2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u32m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u32m2_m(vbool16_t mask,uint32_t* base,vuint64m4_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u32m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u32m4_m(vbool8_t mask,uint32_t* base,vuint64m8_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u32m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u64m1_m(vbool64_t mask,uint64_t* base,vuint64m1_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u64m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u64m2_m(vbool32_t mask,uint64_t* base,vuint64m2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u64m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u64m4_m(vbool16_t mask,uint64_t* base,vuint64m4_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u64m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u64m8_m(vbool8_t mask,uint64_t* base,vuint64m8_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u64m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f32mf2_m(vbool64_t mask,float* base,vuint64m1_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f32mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f32m1_m(vbool32_t mask,float* base,vuint64m2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f32m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f32m2_m(vbool16_t mask,float* base,vuint64m4_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f32m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f32m4_m(vbool8_t mask,float* base,vuint64m8_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f32m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f64m1_m(vbool64_t mask,double* base,vuint64m1_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f64m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f64m2_m(vbool32_t mask,double* base,vuint64m2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f64m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f64m4_m(vbool16_t mask,double* base,vuint64m4_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f64m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f64m8_m(vbool8_t mask,double* base,vuint64m8_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f64m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "8f32f6c19996b9c9af453c8e4ca21ff425eba664", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsuxei64_v_m-3.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei64_v_m-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei64_v_m-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei64_v_m-3.c?ref=e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei64_v_i8mf8_m(vbool64_t mask,int8_t* base,vuint64m1_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i8mf8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i8mf4_m(vbool32_t mask,int8_t* base,vuint64m2_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i8mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i8mf2_m(vbool16_t mask,int8_t* base,vuint64m4_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i8mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i8m1_m(vbool8_t mask,int8_t* base,vuint64m8_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i8m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i16mf4_m(vbool64_t mask,int16_t* base,vuint64m1_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i16mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i16mf2_m(vbool32_t mask,int16_t* base,vuint64m2_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i16mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i16m1_m(vbool16_t mask,int16_t* base,vuint64m4_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i16m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i16m2_m(vbool8_t mask,int16_t* base,vuint64m8_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i16m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i32mf2_m(vbool64_t mask,int32_t* base,vuint64m1_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i32mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i32m1_m(vbool32_t mask,int32_t* base,vuint64m2_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i32m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i32m2_m(vbool16_t mask,int32_t* base,vuint64m4_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i32m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i32m4_m(vbool8_t mask,int32_t* base,vuint64m8_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i32m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i64m1_m(vbool64_t mask,int64_t* base,vuint64m1_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i64m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i64m2_m(vbool32_t mask,int64_t* base,vuint64m2_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i64m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i64m4_m(vbool16_t mask,int64_t* base,vuint64m4_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i64m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_i64m8_m(vbool8_t mask,int64_t* base,vuint64m8_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_i64m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u8mf8_m(vbool64_t mask,uint8_t* base,vuint64m1_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u8mf8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u8mf4_m(vbool32_t mask,uint8_t* base,vuint64m2_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u8mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u8mf2_m(vbool16_t mask,uint8_t* base,vuint64m4_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u8mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u8m1_m(vbool8_t mask,uint8_t* base,vuint64m8_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u8m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u16mf4_m(vbool64_t mask,uint16_t* base,vuint64m1_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u16mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u16mf2_m(vbool32_t mask,uint16_t* base,vuint64m2_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u16mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u16m1_m(vbool16_t mask,uint16_t* base,vuint64m4_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u16m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u16m2_m(vbool8_t mask,uint16_t* base,vuint64m8_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u16m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u32mf2_m(vbool64_t mask,uint32_t* base,vuint64m1_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u32mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u32m1_m(vbool32_t mask,uint32_t* base,vuint64m2_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u32m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u32m2_m(vbool16_t mask,uint32_t* base,vuint64m4_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u32m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u32m4_m(vbool8_t mask,uint32_t* base,vuint64m8_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u32m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u64m1_m(vbool64_t mask,uint64_t* base,vuint64m1_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u64m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u64m2_m(vbool32_t mask,uint64_t* base,vuint64m2_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u64m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u64m4_m(vbool16_t mask,uint64_t* base,vuint64m4_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u64m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_u64m8_m(vbool8_t mask,uint64_t* base,vuint64m8_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_u64m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f32mf2_m(vbool64_t mask,float* base,vuint64m1_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f32mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f32m1_m(vbool32_t mask,float* base,vuint64m2_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f32m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f32m2_m(vbool16_t mask,float* base,vuint64m4_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f32m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f32m4_m(vbool8_t mask,float* base,vuint64m8_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f32m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f64m1_m(vbool64_t mask,double* base,vuint64m1_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f64m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f64m2_m(vbool32_t mask,double* base,vuint64m2_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f64m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f64m4_m(vbool16_t mask,double* base,vuint64m4_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f64m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei64_v_f64m8_m(vbool8_t mask,double* base,vuint64m8_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei64_v_f64m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "809985fcca2569ff9612fdfabd84cd97386e0f98", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsuxei8_v-1.c", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei8_v-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei8_v-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei8_v-1.c?ref=e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei8_v_i8mf8(int8_t* base,vuint8mf8_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8mf8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8mf4(int8_t* base,vuint8mf4_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8mf2(int8_t* base,vuint8mf2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8m1(int8_t* base,vuint8m1_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8m2(int8_t* base,vuint8m2_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8m4(int8_t* base,vuint8m4_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8m8(int8_t* base,vuint8m8_t bindex,vint8m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16mf4(int16_t* base,vuint8mf8_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16mf2(int16_t* base,vuint8mf4_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16m1(int16_t* base,vuint8mf2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16m2(int16_t* base,vuint8m1_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16m4(int16_t* base,vuint8m2_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16m8(int16_t* base,vuint8m4_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32mf2(int32_t* base,vuint8mf8_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32m1(int32_t* base,vuint8mf4_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32m2(int32_t* base,vuint8mf2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32m4(int32_t* base,vuint8m1_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32m8(int32_t* base,vuint8m2_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i64m1(int64_t* base,vuint8mf8_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i64m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i64m2(int64_t* base,vuint8mf4_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i64m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i64m4(int64_t* base,vuint8mf2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i64m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i64m8(int64_t* base,vuint8m1_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i64m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8mf8(uint8_t* base,vuint8mf8_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8mf8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8mf4(uint8_t* base,vuint8mf4_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8mf2(uint8_t* base,vuint8mf2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8m1(uint8_t* base,vuint8m1_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8m2(uint8_t* base,vuint8m2_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8m4(uint8_t* base,vuint8m4_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8m8(uint8_t* base,vuint8m8_t bindex,vuint8m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16mf4(uint16_t* base,vuint8mf8_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16mf4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16mf2(uint16_t* base,vuint8mf4_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16m1(uint16_t* base,vuint8mf2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16m2(uint16_t* base,vuint8m1_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16m4(uint16_t* base,vuint8m2_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16m8(uint16_t* base,vuint8m4_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32mf2(uint32_t* base,vuint8mf8_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32m1(uint32_t* base,vuint8mf4_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32m2(uint32_t* base,vuint8mf2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32m4(uint32_t* base,vuint8m1_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32m8(uint32_t* base,vuint8m2_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u64m1(uint64_t* base,vuint8mf8_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u64m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u64m2(uint64_t* base,vuint8mf4_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u64m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u64m4(uint64_t* base,vuint8mf2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u64m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u64m8(uint64_t* base,vuint8m1_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u64m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32mf2(float* base,vuint8mf8_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32mf2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32m1(float* base,vuint8mf4_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32m2(float* base,vuint8mf2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32m4(float* base,vuint8m1_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32m8(float* base,vuint8m2_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32m8(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f64m1(double* base,vuint8mf8_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f64m1(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f64m2(double* base,vuint8mf4_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f64m2(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f64m4(double* base,vuint8mf2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f64m4(base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f64m8(double* base,vuint8m1_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f64m8(base,bindex,value,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "60faaab6861e9c8da507a948c4676b7ea947cc68", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsuxei8_v-2.c", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei8_v-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei8_v-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei8_v-2.c?ref=e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei8_v_i8mf8(int8_t* base,vuint8mf8_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8mf8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8mf4(int8_t* base,vuint8mf4_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8mf2(int8_t* base,vuint8mf2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8m1(int8_t* base,vuint8m1_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8m2(int8_t* base,vuint8m2_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8m4(int8_t* base,vuint8m4_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8m8(int8_t* base,vuint8m8_t bindex,vint8m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16mf4(int16_t* base,vuint8mf8_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16mf2(int16_t* base,vuint8mf4_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16m1(int16_t* base,vuint8mf2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16m2(int16_t* base,vuint8m1_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16m4(int16_t* base,vuint8m2_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16m8(int16_t* base,vuint8m4_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32mf2(int32_t* base,vuint8mf8_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32m1(int32_t* base,vuint8mf4_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32m2(int32_t* base,vuint8mf2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32m4(int32_t* base,vuint8m1_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32m8(int32_t* base,vuint8m2_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i64m1(int64_t* base,vuint8mf8_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i64m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i64m2(int64_t* base,vuint8mf4_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i64m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i64m4(int64_t* base,vuint8mf2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i64m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i64m8(int64_t* base,vuint8m1_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i64m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8mf8(uint8_t* base,vuint8mf8_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8mf8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8mf4(uint8_t* base,vuint8mf4_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8mf2(uint8_t* base,vuint8mf2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8m1(uint8_t* base,vuint8m1_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8m2(uint8_t* base,vuint8m2_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8m4(uint8_t* base,vuint8m4_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8m8(uint8_t* base,vuint8m8_t bindex,vuint8m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16mf4(uint16_t* base,vuint8mf8_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16mf4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16mf2(uint16_t* base,vuint8mf4_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16m1(uint16_t* base,vuint8mf2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16m2(uint16_t* base,vuint8m1_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16m4(uint16_t* base,vuint8m2_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16m8(uint16_t* base,vuint8m4_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32mf2(uint32_t* base,vuint8mf8_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32m1(uint32_t* base,vuint8mf4_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32m2(uint32_t* base,vuint8mf2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32m4(uint32_t* base,vuint8m1_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32m8(uint32_t* base,vuint8m2_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u64m1(uint64_t* base,vuint8mf8_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u64m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u64m2(uint64_t* base,vuint8mf4_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u64m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u64m4(uint64_t* base,vuint8mf2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u64m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u64m8(uint64_t* base,vuint8m1_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u64m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32mf2(float* base,vuint8mf8_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32mf2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32m1(float* base,vuint8mf4_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32m2(float* base,vuint8mf2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32m4(float* base,vuint8m1_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32m8(float* base,vuint8m2_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32m8(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f64m1(double* base,vuint8mf8_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f64m1(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f64m2(double* base,vuint8mf4_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f64m2(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f64m4(double* base,vuint8mf2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f64m4(base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f64m8(double* base,vuint8m1_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f64m8(base,bindex,value,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "ba193c569243e91059f774718ac076ff4d514540", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsuxei8_v-3.c", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei8_v-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei8_v-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei8_v-3.c?ref=e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei8_v_i8mf8(int8_t* base,vuint8mf8_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8mf8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8mf4(int8_t* base,vuint8mf4_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8mf2(int8_t* base,vuint8mf2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8m1(int8_t* base,vuint8m1_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8m2(int8_t* base,vuint8m2_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8m4(int8_t* base,vuint8m4_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8m8(int8_t* base,vuint8m8_t bindex,vint8m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16mf4(int16_t* base,vuint8mf8_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16mf2(int16_t* base,vuint8mf4_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16m1(int16_t* base,vuint8mf2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16m2(int16_t* base,vuint8m1_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16m4(int16_t* base,vuint8m2_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16m8(int16_t* base,vuint8m4_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32mf2(int32_t* base,vuint8mf8_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32m1(int32_t* base,vuint8mf4_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32m2(int32_t* base,vuint8mf2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32m4(int32_t* base,vuint8m1_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32m8(int32_t* base,vuint8m2_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i64m1(int64_t* base,vuint8mf8_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i64m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i64m2(int64_t* base,vuint8mf4_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i64m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i64m4(int64_t* base,vuint8mf2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i64m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i64m8(int64_t* base,vuint8m1_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i64m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8mf8(uint8_t* base,vuint8mf8_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8mf8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8mf4(uint8_t* base,vuint8mf4_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8mf2(uint8_t* base,vuint8mf2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8m1(uint8_t* base,vuint8m1_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8m2(uint8_t* base,vuint8m2_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8m4(uint8_t* base,vuint8m4_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8m8(uint8_t* base,vuint8m8_t bindex,vuint8m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16mf4(uint16_t* base,vuint8mf8_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16mf4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16mf2(uint16_t* base,vuint8mf4_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16m1(uint16_t* base,vuint8mf2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16m2(uint16_t* base,vuint8m1_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16m4(uint16_t* base,vuint8m2_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16m8(uint16_t* base,vuint8m4_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32mf2(uint32_t* base,vuint8mf8_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32m1(uint32_t* base,vuint8mf4_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32m2(uint32_t* base,vuint8mf2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32m4(uint32_t* base,vuint8m1_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32m8(uint32_t* base,vuint8m2_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u64m1(uint64_t* base,vuint8mf8_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u64m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u64m2(uint64_t* base,vuint8mf4_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u64m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u64m4(uint64_t* base,vuint8mf2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u64m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u64m8(uint64_t* base,vuint8m1_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u64m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32mf2(float* base,vuint8mf8_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32mf2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32m1(float* base,vuint8mf4_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32m2(float* base,vuint8mf2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32m4(float* base,vuint8m1_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32m8(float* base,vuint8m2_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32m8(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f64m1(double* base,vuint8mf8_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f64m1(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f64m2(double* base,vuint8mf4_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f64m2(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f64m4(double* base,vuint8mf2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f64m4(base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f64m8(double* base,vuint8m1_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f64m8(base,bindex,value,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "7f9ecb51d33bff7365eee3ed88a212ce1f7e654e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsuxei8_v_m-1.c", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei8_v_m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei8_v_m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei8_v_m-1.c?ref=e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei8_v_i8mf8_m(vbool64_t mask,int8_t* base,vuint8mf8_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8mf8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8mf4_m(vbool32_t mask,int8_t* base,vuint8mf4_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8mf2_m(vbool16_t mask,int8_t* base,vuint8mf2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8m1_m(vbool8_t mask,int8_t* base,vuint8m1_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8m2_m(vbool4_t mask,int8_t* base,vuint8m2_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8m4_m(vbool2_t mask,int8_t* base,vuint8m4_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8m8_m(vbool1_t mask,int8_t* base,vuint8m8_t bindex,vint8m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16mf4_m(vbool64_t mask,int16_t* base,vuint8mf8_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16mf2_m(vbool32_t mask,int16_t* base,vuint8mf4_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16m1_m(vbool16_t mask,int16_t* base,vuint8mf2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16m2_m(vbool8_t mask,int16_t* base,vuint8m1_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16m4_m(vbool4_t mask,int16_t* base,vuint8m2_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16m8_m(vbool2_t mask,int16_t* base,vuint8m4_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32mf2_m(vbool64_t mask,int32_t* base,vuint8mf8_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32m1_m(vbool32_t mask,int32_t* base,vuint8mf4_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32m2_m(vbool16_t mask,int32_t* base,vuint8mf2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32m4_m(vbool8_t mask,int32_t* base,vuint8m1_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32m8_m(vbool4_t mask,int32_t* base,vuint8m2_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i64m1_m(vbool64_t mask,int64_t* base,vuint8mf8_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i64m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i64m2_m(vbool32_t mask,int64_t* base,vuint8mf4_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i64m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i64m4_m(vbool16_t mask,int64_t* base,vuint8mf2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i64m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i64m8_m(vbool8_t mask,int64_t* base,vuint8m1_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i64m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8mf8_m(vbool64_t mask,uint8_t* base,vuint8mf8_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8mf8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8mf4_m(vbool32_t mask,uint8_t* base,vuint8mf4_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8mf2_m(vbool16_t mask,uint8_t* base,vuint8mf2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8m1_m(vbool8_t mask,uint8_t* base,vuint8m1_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8m2_m(vbool4_t mask,uint8_t* base,vuint8m2_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8m4_m(vbool2_t mask,uint8_t* base,vuint8m4_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8m8_m(vbool1_t mask,uint8_t* base,vuint8m8_t bindex,vuint8m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16mf4_m(vbool64_t mask,uint16_t* base,vuint8mf8_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16mf4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16mf2_m(vbool32_t mask,uint16_t* base,vuint8mf4_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16m1_m(vbool16_t mask,uint16_t* base,vuint8mf2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16m2_m(vbool8_t mask,uint16_t* base,vuint8m1_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16m4_m(vbool4_t mask,uint16_t* base,vuint8m2_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16m8_m(vbool2_t mask,uint16_t* base,vuint8m4_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32mf2_m(vbool64_t mask,uint32_t* base,vuint8mf8_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32m1_m(vbool32_t mask,uint32_t* base,vuint8mf4_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32m2_m(vbool16_t mask,uint32_t* base,vuint8mf2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32m4_m(vbool8_t mask,uint32_t* base,vuint8m1_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32m8_m(vbool4_t mask,uint32_t* base,vuint8m2_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u64m1_m(vbool64_t mask,uint64_t* base,vuint8mf8_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u64m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u64m2_m(vbool32_t mask,uint64_t* base,vuint8mf4_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u64m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u64m4_m(vbool16_t mask,uint64_t* base,vuint8mf2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u64m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u64m8_m(vbool8_t mask,uint64_t* base,vuint8m1_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u64m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32mf2_m(vbool64_t mask,float* base,vuint8mf8_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32mf2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32m1_m(vbool32_t mask,float* base,vuint8mf4_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32m2_m(vbool16_t mask,float* base,vuint8mf2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32m4_m(vbool8_t mask,float* base,vuint8m1_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32m8_m(vbool4_t mask,float* base,vuint8m2_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f64m1_m(vbool64_t mask,double* base,vuint8mf8_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f64m1_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f64m2_m(vbool32_t mask,double* base,vuint8mf4_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f64m2_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f64m4_m(vbool16_t mask,double* base,vuint8mf2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f64m4_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f64m8_m(vbool8_t mask,double* base,vuint8m1_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f64m8_m(mask,base,bindex,value,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "a9fc5997ea4bd030f8d1cdef0669617a74a10ab3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsuxei8_v_m-2.c", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei8_v_m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei8_v_m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei8_v_m-2.c?ref=e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei8_v_i8mf8_m(vbool64_t mask,int8_t* base,vuint8mf8_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8mf8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8mf4_m(vbool32_t mask,int8_t* base,vuint8mf4_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8mf2_m(vbool16_t mask,int8_t* base,vuint8mf2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8m1_m(vbool8_t mask,int8_t* base,vuint8m1_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8m2_m(vbool4_t mask,int8_t* base,vuint8m2_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8m4_m(vbool2_t mask,int8_t* base,vuint8m4_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8m8_m(vbool1_t mask,int8_t* base,vuint8m8_t bindex,vint8m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16mf4_m(vbool64_t mask,int16_t* base,vuint8mf8_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16mf2_m(vbool32_t mask,int16_t* base,vuint8mf4_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16m1_m(vbool16_t mask,int16_t* base,vuint8mf2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16m2_m(vbool8_t mask,int16_t* base,vuint8m1_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16m4_m(vbool4_t mask,int16_t* base,vuint8m2_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16m8_m(vbool2_t mask,int16_t* base,vuint8m4_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32mf2_m(vbool64_t mask,int32_t* base,vuint8mf8_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32m1_m(vbool32_t mask,int32_t* base,vuint8mf4_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32m2_m(vbool16_t mask,int32_t* base,vuint8mf2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32m4_m(vbool8_t mask,int32_t* base,vuint8m1_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32m8_m(vbool4_t mask,int32_t* base,vuint8m2_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i64m1_m(vbool64_t mask,int64_t* base,vuint8mf8_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i64m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i64m2_m(vbool32_t mask,int64_t* base,vuint8mf4_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i64m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i64m4_m(vbool16_t mask,int64_t* base,vuint8mf2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i64m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i64m8_m(vbool8_t mask,int64_t* base,vuint8m1_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i64m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8mf8_m(vbool64_t mask,uint8_t* base,vuint8mf8_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8mf8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8mf4_m(vbool32_t mask,uint8_t* base,vuint8mf4_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8mf2_m(vbool16_t mask,uint8_t* base,vuint8mf2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8m1_m(vbool8_t mask,uint8_t* base,vuint8m1_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8m2_m(vbool4_t mask,uint8_t* base,vuint8m2_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8m4_m(vbool2_t mask,uint8_t* base,vuint8m4_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8m8_m(vbool1_t mask,uint8_t* base,vuint8m8_t bindex,vuint8m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16mf4_m(vbool64_t mask,uint16_t* base,vuint8mf8_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16mf4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16mf2_m(vbool32_t mask,uint16_t* base,vuint8mf4_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16m1_m(vbool16_t mask,uint16_t* base,vuint8mf2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16m2_m(vbool8_t mask,uint16_t* base,vuint8m1_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16m4_m(vbool4_t mask,uint16_t* base,vuint8m2_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16m8_m(vbool2_t mask,uint16_t* base,vuint8m4_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32mf2_m(vbool64_t mask,uint32_t* base,vuint8mf8_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32m1_m(vbool32_t mask,uint32_t* base,vuint8mf4_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32m2_m(vbool16_t mask,uint32_t* base,vuint8mf2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32m4_m(vbool8_t mask,uint32_t* base,vuint8m1_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32m8_m(vbool4_t mask,uint32_t* base,vuint8m2_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u64m1_m(vbool64_t mask,uint64_t* base,vuint8mf8_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u64m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u64m2_m(vbool32_t mask,uint64_t* base,vuint8mf4_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u64m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u64m4_m(vbool16_t mask,uint64_t* base,vuint8mf2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u64m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u64m8_m(vbool8_t mask,uint64_t* base,vuint8m1_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u64m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32mf2_m(vbool64_t mask,float* base,vuint8mf8_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32mf2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32m1_m(vbool32_t mask,float* base,vuint8mf4_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32m2_m(vbool16_t mask,float* base,vuint8mf2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32m4_m(vbool8_t mask,float* base,vuint8m1_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32m8_m(vbool4_t mask,float* base,vuint8m2_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f64m1_m(vbool64_t mask,double* base,vuint8mf8_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f64m1_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f64m2_m(vbool32_t mask,double* base,vuint8mf4_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f64m2_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f64m4_m(vbool16_t mask,double* base,vuint8mf2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f64m4_m(mask,base,bindex,value,31);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f64m8_m(vbool8_t mask,double* base,vuint8m1_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f64m8_m(mask,base,bindex,value,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "d5d7a44adc8a957b30a2870381e8e7529aede8e3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vsuxei8_v_m-3.c", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei8_v_m-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ec6159070e5dbdf33d5353ab6b1d883351cdaf/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei8_v_m-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvsuxei8_v_m-3.c?ref=e9ec6159070e5dbdf33d5353ab6b1d883351cdaf", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsuxei8_v_i8mf8_m(vbool64_t mask,int8_t* base,vuint8mf8_t bindex,vint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8mf8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8mf4_m(vbool32_t mask,int8_t* base,vuint8mf4_t bindex,vint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8mf2_m(vbool16_t mask,int8_t* base,vuint8mf2_t bindex,vint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8m1_m(vbool8_t mask,int8_t* base,vuint8m1_t bindex,vint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8m2_m(vbool4_t mask,int8_t* base,vuint8m2_t bindex,vint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8m4_m(vbool2_t mask,int8_t* base,vuint8m4_t bindex,vint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i8m8_m(vbool1_t mask,int8_t* base,vuint8m8_t bindex,vint8m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i8m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16mf4_m(vbool64_t mask,int16_t* base,vuint8mf8_t bindex,vint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16mf2_m(vbool32_t mask,int16_t* base,vuint8mf4_t bindex,vint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16m1_m(vbool16_t mask,int16_t* base,vuint8mf2_t bindex,vint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16m2_m(vbool8_t mask,int16_t* base,vuint8m1_t bindex,vint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16m4_m(vbool4_t mask,int16_t* base,vuint8m2_t bindex,vint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i16m8_m(vbool2_t mask,int16_t* base,vuint8m4_t bindex,vint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i16m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32mf2_m(vbool64_t mask,int32_t* base,vuint8mf8_t bindex,vint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32m1_m(vbool32_t mask,int32_t* base,vuint8mf4_t bindex,vint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32m2_m(vbool16_t mask,int32_t* base,vuint8mf2_t bindex,vint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32m4_m(vbool8_t mask,int32_t* base,vuint8m1_t bindex,vint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i32m8_m(vbool4_t mask,int32_t* base,vuint8m2_t bindex,vint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i32m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i64m1_m(vbool64_t mask,int64_t* base,vuint8mf8_t bindex,vint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i64m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i64m2_m(vbool32_t mask,int64_t* base,vuint8mf4_t bindex,vint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i64m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i64m4_m(vbool16_t mask,int64_t* base,vuint8mf2_t bindex,vint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i64m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_i64m8_m(vbool8_t mask,int64_t* base,vuint8m1_t bindex,vint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_i64m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8mf8_m(vbool64_t mask,uint8_t* base,vuint8mf8_t bindex,vuint8mf8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8mf8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8mf4_m(vbool32_t mask,uint8_t* base,vuint8mf4_t bindex,vuint8mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8mf2_m(vbool16_t mask,uint8_t* base,vuint8mf2_t bindex,vuint8mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8m1_m(vbool8_t mask,uint8_t* base,vuint8m1_t bindex,vuint8m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8m2_m(vbool4_t mask,uint8_t* base,vuint8m2_t bindex,vuint8m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8m4_m(vbool2_t mask,uint8_t* base,vuint8m4_t bindex,vuint8m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u8m8_m(vbool1_t mask,uint8_t* base,vuint8m8_t bindex,vuint8m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u8m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16mf4_m(vbool64_t mask,uint16_t* base,vuint8mf8_t bindex,vuint16mf4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16mf4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16mf2_m(vbool32_t mask,uint16_t* base,vuint8mf4_t bindex,vuint16mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16m1_m(vbool16_t mask,uint16_t* base,vuint8mf2_t bindex,vuint16m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16m2_m(vbool8_t mask,uint16_t* base,vuint8m1_t bindex,vuint16m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16m4_m(vbool4_t mask,uint16_t* base,vuint8m2_t bindex,vuint16m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u16m8_m(vbool2_t mask,uint16_t* base,vuint8m4_t bindex,vuint16m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u16m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32mf2_m(vbool64_t mask,uint32_t* base,vuint8mf8_t bindex,vuint32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32m1_m(vbool32_t mask,uint32_t* base,vuint8mf4_t bindex,vuint32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32m2_m(vbool16_t mask,uint32_t* base,vuint8mf2_t bindex,vuint32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32m4_m(vbool8_t mask,uint32_t* base,vuint8m1_t bindex,vuint32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u32m8_m(vbool4_t mask,uint32_t* base,vuint8m2_t bindex,vuint32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u32m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u64m1_m(vbool64_t mask,uint64_t* base,vuint8mf8_t bindex,vuint64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u64m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u64m2_m(vbool32_t mask,uint64_t* base,vuint8mf4_t bindex,vuint64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u64m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u64m4_m(vbool16_t mask,uint64_t* base,vuint8mf2_t bindex,vuint64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u64m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_u64m8_m(vbool8_t mask,uint64_t* base,vuint8m1_t bindex,vuint64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_u64m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32mf2_m(vbool64_t mask,float* base,vuint8mf8_t bindex,vfloat32mf2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32mf2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32m1_m(vbool32_t mask,float* base,vuint8mf4_t bindex,vfloat32m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32m2_m(vbool16_t mask,float* base,vuint8mf2_t bindex,vfloat32m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32m4_m(vbool8_t mask,float* base,vuint8m1_t bindex,vfloat32m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f32m8_m(vbool4_t mask,float* base,vuint8m2_t bindex,vfloat32m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f32m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f64m1_m(vbool64_t mask,double* base,vuint8mf8_t bindex,vfloat64m1_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f64m1_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f64m2_m(vbool32_t mask,double* base,vuint8mf4_t bindex,vfloat64m2_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f64m2_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f64m4_m(vbool16_t mask,double* base,vuint8mf2_t bindex,vfloat64m4_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f64m4_m(mask,base,bindex,value,32);\n+}\n+\n+\n+void test___riscv_vsuxei8_v_f64m8_m(vbool8_t mask,double* base,vuint8m1_t bindex,vfloat64m8_t value,size_t vl)\n+{\n+    __riscv_vsuxei8_v_f64m8_m(mask,base,bindex,value,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsuxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}]}