{"sha": "e81eb37fc88da5ea533bfb66e7755fc05f594bc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgxZWIzN2ZjODhkYTVlYTUzM2JmYjY2ZTc3NTVmYzA1ZjU5NGJjMw==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2003-03-28T07:58:22Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2003-03-28T07:58:22Z"}, "message": "loop.c: (find_mem_in_note_1, find_mem_in_note): New functions.\n\n\t* loop.c: (find_mem_in_note_1, find_mem_in_note): New functions.\n\t(replace_loop_mems): Add \"written\" param.  Remove invalid REG_EQUAL\n\tnotes after hoisting.\n\t(load_mems): Adjust replace_loop_mems call.\n\nFrom-SVN: r64950", "tree": {"sha": "7aeb90688eda42c1cfaf3b91c2314d6fa237294d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7aeb90688eda42c1cfaf3b91c2314d6fa237294d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e81eb37fc88da5ea533bfb66e7755fc05f594bc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e81eb37fc88da5ea533bfb66e7755fc05f594bc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e81eb37fc88da5ea533bfb66e7755fc05f594bc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e81eb37fc88da5ea533bfb66e7755fc05f594bc3/comments", "author": null, "committer": null, "parents": [{"sha": "1ce324c330173b65db7170925856f723a5316c18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ce324c330173b65db7170925856f723a5316c18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ce324c330173b65db7170925856f723a5316c18"}], "stats": {"total": 59, "additions": 56, "deletions": 3}, "files": [{"sha": "8b2801939ed0241928c6547a064e43318bcb99f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81eb37fc88da5ea533bfb66e7755fc05f594bc3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81eb37fc88da5ea533bfb66e7755fc05f594bc3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e81eb37fc88da5ea533bfb66e7755fc05f594bc3", "patch": "@@ -1,3 +1,10 @@\n+2003-03-28  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* loop.c: (find_mem_in_note_1, find_mem_in_note): New functions.\n+\t(replace_loop_mems): Add \"written\" param.  Remove invalid REG_EQUAL\n+\tnotes after hoisting.\n+\t(load_mems): Adjust replace_loop_mems call.\n+\n 2003-03-28  Eric Botcazou  <ebotcazou@libertysurf.fr>\n             Richard Henderson  <rth@redhat.com>\n "}, {"sha": "7feb77de562aca7a0d33044ca6d286fb787a225a", "filename": "gcc/loop.c", "status": "modified", "additions": 49, "deletions": 3, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81eb37fc88da5ea533bfb66e7755fc05f594bc3/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81eb37fc88da5ea533bfb66e7755fc05f594bc3/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=e81eb37fc88da5ea533bfb66e7755fc05f594bc3", "patch": "@@ -328,10 +328,12 @@ static void update_reg_last_use PARAMS ((rtx, rtx));\n static rtx next_insn_in_loop PARAMS ((const struct loop *, rtx));\n static void loop_regs_scan PARAMS ((const struct loop *, int));\n static int count_insns_in_loop PARAMS ((const struct loop *));\n+static int find_mem_in_note_1 PARAMS ((rtx *, void *));\n+static rtx find_mem_in_note PARAMS ((rtx));\n static void load_mems PARAMS ((const struct loop *));\n static int insert_loop_mem PARAMS ((rtx *, void *));\n static int replace_loop_mem PARAMS ((rtx *, void *));\n-static void replace_loop_mems PARAMS ((rtx, rtx, rtx));\n+static void replace_loop_mems PARAMS ((rtx, rtx, rtx, int));\n static int replace_loop_reg PARAMS ((rtx *, void *));\n static void replace_loop_regs PARAMS ((rtx insn, rtx, rtx));\n static void note_reg_stored PARAMS ((rtx, rtx, void *));\n@@ -10033,7 +10035,7 @@ load_mems (loop)\n \t      else\n \t        /* Replace the memory reference with the shadow register.  */\n \t\treplace_loop_mems (p, loop_info->mems[i].mem,\n-\t\t\t\t   loop_info->mems[i].reg);\n+\t\t\t\t   loop_info->mems[i].reg, written);\n \t    }\n \n \t  if (GET_CODE (p) == CODE_LABEL\n@@ -10398,6 +10400,29 @@ try_swap_copy_prop (loop, replacement, regno)\n     }\n }\n \n+static int\n+find_mem_in_note_1 (x, data)\n+     rtx *x;\n+     void *data;\n+{\n+  if (*x != NULL_RTX && GET_CODE (*x) == MEM)\n+    {\n+      rtx *res = (rtx *) data;\n+      *res = *x;\n+      return 1;\n+    }\n+  return 0;\n+}\n+\n+static rtx\n+find_mem_in_note (note)\n+     rtx note;\n+{\n+  if (note && for_each_rtx (&note, find_mem_in_note_1, &note))\n+    return note;\n+  return NULL_RTX;\n+}\n+  \n /* Replace MEM with its associated pseudo register.  This function is\n    called from load_mems via for_each_rtx.  DATA is actually a pointer\n    to a structure describing the instruction currently being scanned\n@@ -10440,10 +10465,11 @@ replace_loop_mem (mem, data)\n }\n \n static void\n-replace_loop_mems (insn, mem, reg)\n+replace_loop_mems (insn, mem, reg, written)\n      rtx insn;\n      rtx mem;\n      rtx reg;\n+     int written;\n {\n   loop_replace_args args;\n \n@@ -10452,6 +10478,26 @@ replace_loop_mems (insn, mem, reg)\n   args.replacement = reg;\n \n   for_each_rtx (&insn, replace_loop_mem, &args);\n+\n+  /* If we hoist a mem write out of the loop, then REG_EQUAL\n+     notes referring to the mem are no longer valid.  */\n+  if (written)\n+    {\n+      rtx note, sub;\n+      rtx *link;\n+\n+      for (link = &REG_NOTES (insn); (note = *link); link = &XEXP (note, 1))\n+\t{\n+\t  if (REG_NOTE_KIND (note) == REG_EQUAL\n+\t      && (sub = find_mem_in_note (note))\n+\t      && true_dependence (mem, VOIDmode, sub, rtx_varies_p))\n+\t    {\n+\t      /* Remove the note.  */\n+\t      validate_change (NULL_RTX, link, XEXP (note, 1), 1);\n+\t      break;\n+\t    }\n+\t}\n+    }\n }\n \n /* Replace one register with another.  Called through for_each_rtx; PX points"}]}