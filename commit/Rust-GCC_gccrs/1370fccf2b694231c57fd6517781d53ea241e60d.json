{"sha": "1370fccf2b694231c57fd6517781d53ea241e60d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM3MGZjY2YyYjY5NDIzMWM1N2ZkNjUxNzc4MWQ1M2VhMjQxZTYwZA==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2017-09-01T11:43:29Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2017-09-01T11:43:29Z"}, "message": "[ARC] Update various patterns\n\ngcc/\n2017-04-25  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc.md (movqi_insn): Add stores to save constant long\n\timmediates.\n\t(movhi_insn): Update store instruction constraint which are saving\n\t6-bit short immediates.\n\t(movsi_insn): Consider also short scaled load operations.\n\t(zero_extendhisi2_i): Use Usd constraint instead of T.\n\t(extendhisi2_i): Add q constraint.\n\t(arc_clzsi2): Add type and length attributes.\n\t(arc_ctzsi2): Likewise.\n\t* config/arc/constraints.md (Usc): Update constraint, the\n\tassembler can parse two relocations for a single instruction.\n\ngcc/testsuite/\n2017-04-25  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* gcc.target/arc/arc.exp: Test also cpp files.\n\t* gcc.target/arc/tdelay_slots.cpp: New test.\n\nFrom-SVN: r251587", "tree": {"sha": "07c7e244940627e66241b12b673bb0ceae2733e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07c7e244940627e66241b12b673bb0ceae2733e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1370fccf2b694231c57fd6517781d53ea241e60d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1370fccf2b694231c57fd6517781d53ea241e60d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1370fccf2b694231c57fd6517781d53ea241e60d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1370fccf2b694231c57fd6517781d53ea241e60d/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7cfbf676bdb8783e2818995ddd436a442b4dae75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cfbf676bdb8783e2818995ddd436a442b4dae75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cfbf676bdb8783e2818995ddd436a442b4dae75"}], "stats": {"total": 123, "additions": 94, "deletions": 29}, "files": [{"sha": "4ba91a731906fc011129b88911aec1384a72e479", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1370fccf2b694231c57fd6517781d53ea241e60d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1370fccf2b694231c57fd6517781d53ea241e60d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1370fccf2b694231c57fd6517781d53ea241e60d", "patch": "@@ -1,3 +1,17 @@\n+2017-09-01  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.md (movqi_insn): Add stores to save constant long\n+\timmediates.\n+\t(movhi_insn): Update store instruction constraint which are saving\n+\t6-bit short immediates.\n+\t(movsi_insn): Consider also short scaled load operations.\n+\t(zero_extendhisi2_i): Use Usd constraint instead of T.\n+\t(extendhisi2_i): Add q constraint.\n+\t(arc_clzsi2): Add type and length attributes.\n+\t(arc_ctzsi2): Likewise.\n+\t* config/arc/constraints.md (Usc): Update constraint, the\n+\tassembler can parse two relocations for a single instruction.\n+\n 2017-09-01  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.c (arc_use_anchors_for_symbol_p): New function."}, {"sha": "b67733ad99c929ba8a1659ec3308da62fe777c6a", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1370fccf2b694231c57fd6517781d53ea241e60d/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1370fccf2b694231c57fd6517781d53ea241e60d/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=1370fccf2b694231c57fd6517781d53ea241e60d", "patch": "@@ -618,8 +618,8 @@\n ; The iscompact attribute allows the epilogue expander to know for which\n ; insns it should lengthen the return insn.\n (define_insn \"*movqi_insn\"\n-  [(set (match_operand:QI 0 \"move_dest_operand\" \"=Rcq,Rcq#q,    w,Rcq#q,   h, w,w,???w,h, w,Rcq,  S,!*x,  r,r, Ucm,m,???m,Usc\")\n-\t(match_operand:QI 1 \"move_src_operand\"  \"  cL,   cP,Rcq#q,    P,hCm1,cL,I,?Rac,i,?i,  T,Rcq,Usd,Ucm,m,?Rac,c,?Rac,Cm3\"))]\n+  [(set (match_operand:QI 0 \"move_dest_operand\" \"=Rcq,Rcq#q,    w,Rcq#q,   h, w,w,???w,h, w,Rcq,  S,!*x,  r,r, Ucm,m,???m,  m,Usc\")\n+\t(match_operand:QI 1 \"move_src_operand\"  \"  cL,   cP,Rcq#q,    P,hCm1,cL,I,?Rac,i,?i,  T,Rcq,Usd,Ucm,m,?Rac,c,?Rac,Cm3,i\"))]\n   \"register_operand (operands[0], QImode)\n    || register_operand (operands[1], QImode)\"\n   \"@\n@@ -641,11 +641,12 @@\n    xstb%U0 %1,%0\n    stb%U0%V0 %1,%0\n    stb%U0%V0 %1,%0\n+   stb%U0%V0 %1,%0\n    stb%U0%V0 %1,%0\"\n-  [(set_attr \"type\" \"move,move,move,move,move,move,move,move,move,move,load,store,load,load,load,store,store,store,store\")\n-   (set_attr \"iscompact\" \"maybe,maybe,maybe,true,true,false,false,false,maybe_limm,false,true,true,true,false,false,false,false,false,false\")\n-   (set_attr \"predicable\" \"yes,no,yes,no,no,yes,no,yes,yes,yes,no,no,no,no,no,no,no,no,no\")\n-   (set_attr \"cpu_facility\" \"av1,av1,av1,av2,av2,*,*,*,*,*,*,*,*,*,*,*,*,*,*\")])\n+  [(set_attr \"type\" \"move,move,move,move,move,move,move,move,move,move,load,store,load,load,load,store,store,store,store,store\")\n+   (set_attr \"iscompact\" \"maybe,maybe,maybe,true,true,false,false,false,maybe_limm,false,true,true,true,false,false,false,false,false,false,false\")\n+   (set_attr \"predicable\" \"yes,no,yes,no,no,yes,no,yes,yes,yes,no,no,no,no,no,no,no,no,no,no\")\n+   (set_attr \"cpu_facility\" \"av1,av1,av1,av2,av2,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*\")])\n \n (define_expand \"movhi\"\n   [(set (match_operand:HI 0 \"move_dest_operand\" \"\")\n@@ -654,8 +655,8 @@\n   \"if (prepare_move_operands (operands, HImode)) DONE;\")\n \n (define_insn \"*movhi_insn\"\n-  [(set (match_operand:HI 0 \"move_dest_operand\" \"=Rcq,Rcq#q,    w,Rcq#q,   h, w,w,???w,Rcq#q,h, w,Rcq,  S,  r,r, Ucm,m,???m,VUsc,VUsc\")\n-\t(match_operand:HI 1 \"move_src_operand\" \"   cL,   cP,Rcq#q,    P,hCm1,cL,I,?Rac,    i,i,?i,  T,Rcq,Ucm,m,?Rac,c,?Rac, Cm3,i\"))]\n+  [(set (match_operand:HI 0 \"move_dest_operand\" \"=Rcq,Rcq#q,    w,Rcq#q,   h, w,w,???w,Rcq#q,h, w,Rcq,  S,  r,r, Ucm,m,???m,  m,VUsc\")\n+\t(match_operand:HI 1 \"move_src_operand\" \"   cL,   cP,Rcq#q,    P,hCm1,cL,I,?Rac,    i,i,?i,  T,Rcq,Ucm,m,?Rac,c,?Rac,Cm3,i\"))]\n   \"register_operand (operands[0], HImode)\n    || register_operand (operands[1], HImode)\n    || (CONSTANT_P (operands[1])\n@@ -706,8 +707,8 @@\n ; insns it should lengthen the return insn.\n ; N.B. operand 1 of alternative 7 expands into pcl,symbol@gotpc .\n (define_insn \"*movsi_insn\"                      ;   0     1     2     3    4  5 6   7   8   9   10  11  12  13    14  15   16  17  18     19     20  21  22    23    24 25 26    27 28  29   30   31\n-  [(set (match_operand:SI 0 \"move_dest_operand\" \"=Rcq,Rcq#q,    w,Rcq#q,   h, w,w,  w,  w,  w,  w,???w, ?w,  w,Rcq#q,  h,   w,Rcq,  S,   Us<,RcqRck,!*x,  r,!*Rsd,!*Rcd,r,Ucm,  Usd,m,???m,VUsc,VUsc\")\n-\t(match_operand:SI 1 \"move_src_operand\"  \"  cL,   cP,Rcq#q,    P,hCm1,cL,I,Crr,Clo,Chi,Cbi,?Rac,Cpc,Clb, ?Cal,Cal,?Cal,  T,Rcq,RcqRck,   Us>,Usd,Ucm,  Usd,  Ucd,m,  w,!*Rzd,c,?Rac, Cm3, C32\"))]\n+  [(set (match_operand:SI 0 \"move_dest_operand\" \"=Rcq,Rcq#q,    w,Rcq#q,   h, w,w,  w,  w,  w,  w,???w, ?w,  w,Rcq#q,  h,   w,Rcq,  S,   Us<,RcqRck,!*x,  r,!*Rsd,!*Rcd,r,Ucm,  Usd,m,???m,  m,VUsc\")\n+\t(match_operand:SI 1 \"move_src_operand\"  \"  cL,   cP,Rcq#q,    P,hCm1,cL,I,Crr,Clo,Chi,Cbi,?Rac,Cpc,Clb, ?Cal,Cal,?Cal,Uts,Rcq,RcqRck,   Us>,Usd,Ucm,  Usd,  Ucd,m,  w,!*Rzd,c,?Rac,Cm3, C32\"))]\n   \"register_operand (operands[0], SImode)\n    || register_operand (operands[1], SImode)\n    || (CONSTANT_P (operands[1])\n@@ -730,10 +731,10 @@\n    mov%? %0,%1\t\t;11\n    add %0,%S1\t\t;12\n    add %0,pcl,%1@pcl    ;13\n-   mov%? %0,%S1%&\t;14\n-   mov%? %0,%S1\t\t;15\n-   mov%? %0,%S1\t\t;16\n-   ld%? %0,%1%&\t\t;17\n+   mov%? %0,%1  \t;14\n+   mov%? %0,%1\t\t;15\n+   mov%? %0,%1\t\t;16\n+   ld%?%U1 %0,%1\t;17\n    st%? %1,%0%&\t\t;18\n    * return arc_short_long (insn, \\\"push%? %1%&\\\", \\\"st%U0 %1,%0%&\\\");\n    * return arc_short_long (insn, \\\"pop%? %0%&\\\",  \\\"ld%U1 %0,%1%&\\\");\n@@ -747,13 +748,13 @@\n    st%U0%V0 %1,%0\t;28\n    st%U0%V0 %1,%0\t;29\n    st%U0%V0 %1,%0\t;30\n-   st%U0%V0 %S1,%0\t;31\"\n+   st%U0%V0 %1,%0\t;31\"\n    ;                         0     1     2     3    4    5      6       7           8     9    10     11    12    13           14        15    16   17    18    19   20    21    22   23  24    25    26    27    28    29   30   31\n   [(set_attr \"type\"       \"move, move, move,move,move, move, move,two_cycle_core,shift,shift,shift, move,binary,binary,      move,      move, move,load,store,store,load,load, load,load,load, load,store,store,store,store,store,store\")\n    (set_attr \"iscompact\" \"maybe,maybe,maybe,true,true,false,false,         false,false,false,false,false, false, false,maybe_limm,maybe_limm,false,true, true, true,true,true,false,true,true,false,false, true,false,false,false,false\")\n    ; Use default length for iscompact to allow for COND_EXEC.  But set length\n    ; of Crr to 4.\n-   (set_attr \"length\" \"*,*,*,*,*,4,4,4,4,4,4,4,8,8,*,*,*,*,*,*,*,*,4,*,4,*,*,*,*,*,4,8\")\n+   (set_attr \"length\" \"*,*,*,*,*,4,4,4,4,4,4,4,8,8,*,*,*,*,*,*,*,*,4,*,4,*,*,*,*,*,*,8\")\n    (set_attr \"predicable\" \"yes,no,yes,no,no,yes,no,no,no,no,no,yes,no,no,yes,yes,yes,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no\")\n    (set_attr \"cpu_facility\" \"av1,av1,av1,av2,av2,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,av2,av2,*,*,av2,*,*,av2,*\")])\n \n@@ -1634,7 +1635,7 @@\n )\n \n (define_insn \"*zero_extendqisi2_ac\"\n-  [(set (match_operand:SI 0 \"dest_reg_operand\" \"=Rcq,Rcq#q,Rcw,w,qRcq,!*x,r,r\")\n+  [(set (match_operand:SI 0 \"dest_reg_operand\"    \"=Rcq,Rcq#q,Rcw,w,qRcq,!*x,r,r\")\n \t(zero_extend:SI (match_operand:QI 1 \"nonvol_nonimm_operand\" \"0,Rcq#q,0,c,T,Usd,Ucm,m\")))]\n   \"\"\n   \"@\n@@ -1659,19 +1660,19 @@\n \n (define_insn \"*zero_extendhisi2_i\"\n   [(set (match_operand:SI 0 \"dest_reg_operand\" \"=Rcq,q,Rcw,w,!x,Rcqq,r,r\")\n-\t(zero_extend:SI (match_operand:HI 1 \"nonvol_nonimm_operand\" \"0,q,0,c,Usd,Usd,Ucm,m\")))]\n+\t(zero_extend:SI (match_operand:HI 1 \"nonvol_nonimm_operand\" \"0,q,0,c,Usd,T,Ucm,m\")))]\n   \"\"\n   \"@\n    ext%_%? %0,%1%&\n    ext%_%? %0,%1%&\n    bmsk%? %0,%1,15\n    ext%_ %0,%1\n-   ld%_%? %0,%1%&\n-   ld%_%U1 %0,%1\n+   ld%_%? %0,%1\n+   ld%_%? %0,%1\n    * return TARGET_EM ? \\\"xldh%U1%V1 %0,%1\\\" : \\\"xldw%U1 %0,%1\\\";\n    ld%_%U1%V1 %0,%1\"\n   [(set_attr \"type\" \"unary,unary,unary,unary,load,load,load,load\")\n-   (set_attr \"iscompact\" \"maybe,true,false,false,true,false,false,false\")\n+   (set_attr \"iscompact\" \"maybe,true,false,false,true,true,false,false\")\n    (set_attr \"predicable\" \"no,no,yes,no,no,no,no,no\")])\n \n \n@@ -1726,7 +1727,7 @@\n )\n \n (define_insn \"*extendhisi2_i\"\n-  [(set (match_operand:SI 0 \"dest_reg_operand\" \"=Rcqq,w,Rcq,r,r\")\n+  [(set (match_operand:SI 0 \"dest_reg_operand\" \"=Rcqq,w,Rcqq,r,r\")\n \t(sign_extend:SI (match_operand:HI 1 \"nonvol_nonimm_operand\" \"Rcqq,c,Ucd,Uex,m\")))]\n   \"\"\n   \"@\n@@ -4524,7 +4525,9 @@\n        gen_rtx_GE (VOIDmode, gen_rtx_REG (CC_ZNmode, CC_REG), const0_rtx),\n        gen_rtx_SET (operands[0], plus_constant (SImode, operands[0], 1))));\n   DONE;\n-})\n+}\n+[(set_attr \"type\" \"unary\")\n+ (set_attr \"length\" \"12\")])\n \n (define_expand \"ctzsi2\"\n   [(match_operand:SI 0 \"register_operand\" \"\")\n@@ -4567,8 +4570,9 @@\n        gen_rtx_SET (operands[0], gen_rtx_MINUS (SImode, GEN_INT (31),\n \t\t\t\t\t\toperands[0]))));\n   DONE;\n-})\n-\n+}\n+[(set_attr \"type\" \"unary\")\n+ (set_attr \"length\" \"20\")])\n \n (define_insn \"swap\"\n   [(set (match_operand:SI  0 \"dest_reg_operand\" \"=w,w,w\")"}, {"sha": "b8a4a90f4206e9742e5120cdd49cf87a9d35458e", "filename": "gcc/config/arc/constraints.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1370fccf2b694231c57fd6517781d53ea241e60d/gcc%2Fconfig%2Farc%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1370fccf2b694231c57fd6517781d53ea241e60d/gcc%2Fconfig%2Farc%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fconstraints.md?ref=1370fccf2b694231c57fd6517781d53ea241e60d", "patch": "@@ -357,13 +357,13 @@\n    (and (match_code \"mem\")\n \t(match_test \"compact_sda_memory_operand (op, VOIDmode, true)\")))\n \n+; Usc constant is only used for storing long constants, hence we can\n+; have only [b,s9], and [b] types of addresses.\n (define_memory_constraint \"Usc\"\n   \"@internal\n    A valid memory operand for storing constants\"\n   (and (match_code \"mem\")\n-       (match_test \"!CONSTANT_P (XEXP (op,0))\")\n-;; ??? the assembler rejects stores of immediates to small data.\n-       (match_test \"!compact_sda_memory_operand (op, VOIDmode, false)\")))\n+       (match_test \"!CONSTANT_P (XEXP (op,0))\")))\n \n (define_constraint \"Us<\"\n   \"@internal"}, {"sha": "f721f4578cbbbe495f511398e7ee673dc03bee40", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1370fccf2b694231c57fd6517781d53ea241e60d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1370fccf2b694231c57fd6517781d53ea241e60d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1370fccf2b694231c57fd6517781d53ea241e60d", "patch": "@@ -1,3 +1,8 @@\n+2017-09-01  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* gcc.target/arc/arc.exp: Test also cpp files.\n+\t* gcc.target/arc/tdelay_slots.cpp: New test.\n+\n 2017-09-01  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* gcc.target/arc/pr9001184797.c: New test."}, {"sha": "5bb09d86bd3da8187bff4f0e54bda7cd862db9ca", "filename": "gcc/testsuite/gcc.target/arc/arc.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1370fccf2b694231c57fd6517781d53ea241e60d/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Farc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1370fccf2b694231c57fd6517781d53ea241e60d/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Farc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Farc.exp?ref=1370fccf2b694231c57fd6517781d53ea241e60d", "patch": "@@ -104,7 +104,7 @@ if ![info exists DEFAULT_CFLAGS] then {\n dg-init\n \n # Main loop.\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] \\\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.{\\[cS\\],cpp}]] \\\n \t\"\" $DEFAULT_CFLAGS\n \n # All done."}, {"sha": "3a6d37938b13fc0b5dd4bb55235817297d1ca1d6", "filename": "gcc/testsuite/gcc.target/arc/tdelay_slots.cpp", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1370fccf2b694231c57fd6517781d53ea241e60d/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftdelay_slots.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1370fccf2b694231c57fd6517781d53ea241e60d/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftdelay_slots.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftdelay_slots.cpp?ref=1370fccf2b694231c57fd6517781d53ea241e60d", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do assemble } */\n+/* { dg-skip-if \"\" { ! { clmcpu } } } */\n+/* { dg-options \"-O2 -mcpu=em\" } */\n+\n+template <class> struct A;\n+int a;\n+template <> struct A<char> {\n+  typedef int int_type;\n+  static int_type eof();\n+};\n+template <> struct A<wchar_t> {\n+  typedef int int_type;\n+  static int_type eof() { return -1; }\n+};\n+class basic_streambuf {\n+public:\n+  virtual ~basic_streambuf();\n+};\n+class B {\n+  void tie();\n+  class C {\n+    C();\n+  };\n+};\n+template <typename _CharT, typename _Traits = A<_CharT>>\n+class D : basic_streambuf {\n+  typedef _Traits traits_type;\n+  typename traits_type::int_type _M_unget_buf;\n+\n+public:\n+  D(void *) : _M_unget_buf(traits_type::eof()) {}\n+};\n+\n+extern D<wchar_t> b;\n+B c;\n+void *operator new(unsigned, void *p2) { return p2; }\n+\n+B::C::C() {\n+  new D<char>(&a);\n+  c.tie();\n+  new (&b) D<wchar_t>(&a);\n+}"}]}