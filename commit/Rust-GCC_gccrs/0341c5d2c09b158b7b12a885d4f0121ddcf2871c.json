{"sha": "0341c5d2c09b158b7b12a885d4f0121ddcf2871c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM0MWM1ZDJjMDliMTU4YjdiMTJhODg1ZDRmMDEyMWRkY2YyODcxYw==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2002-01-07T18:45:11Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2002-01-07T18:45:11Z"}, "message": "* doc/rtl.texi (Flags): Clean up documentation of RTL flags\n\nFrom-SVN: r48608", "tree": {"sha": "2d2b9f8a25051b5b8139497c4c0a3388d0e070b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d2b9f8a25051b5b8139497c4c0a3388d0e070b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0341c5d2c09b158b7b12a885d4f0121ddcf2871c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0341c5d2c09b158b7b12a885d4f0121ddcf2871c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0341c5d2c09b158b7b12a885d4f0121ddcf2871c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0341c5d2c09b158b7b12a885d4f0121ddcf2871c/comments", "author": null, "committer": null, "parents": [{"sha": "c7f3e0b01fcc9905d3906331cb1923eee5b00ff6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7f3e0b01fcc9905d3906331cb1923eee5b00ff6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7f3e0b01fcc9905d3906331cb1923eee5b00ff6"}], "stats": {"total": 536, "additions": 326, "deletions": 210}, "files": [{"sha": "ffcac4c8b8b01b06b8ae7c849f684f322c8dbe7e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0341c5d2c09b158b7b12a885d4f0121ddcf2871c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0341c5d2c09b158b7b12a885d4f0121ddcf2871c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0341c5d2c09b158b7b12a885d4f0121ddcf2871c", "patch": "@@ -1,3 +1,7 @@\n+2002-01-07  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* doc/rtl.texi (Flags): Clean up documentation of RTL flags\n+\n 2002-01-07  Marek Michalkiewicz  <marekm@amelek.gda.pl>\n \n \t* config/avr/avr.c (avr_mcu_types): Add new MCU types."}, {"sha": "93db82b3fb7f23f88100191ea25d6870101f886e", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 322, "deletions": 210, "changes": 532, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0341c5d2c09b158b7b12a885d4f0121ddcf2871c/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0341c5d2c09b158b7b12a885d4f0121ddcf2871c/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=0341c5d2c09b158b7b12a885d4f0121ddcf2871c", "patch": "@@ -369,60 +369,175 @@ to access them.\n @section Flags in an RTL Expression\n @cindex flags in RTL expression\n \n-RTL expressions contain several flags (one-bit bit-fields) and other\n-values that are used in certain types of expression.  Most often they\n-are accessed with the following macros:\n+RTL expressions contain several flags (one-bit bit-fields)\n+that are used in certain types of expression.  Most often they\n+are accessed with the following macros, which expand into lvalues:\n \n @table @code\n-@findex MEM_VOLATILE_P\n-@cindex @code{mem} and @samp{/v}\n-@cindex @code{volatil}, in @code{mem}\n-@cindex @samp{/v} in RTL dump\n-@item MEM_VOLATILE_P (@var{x})\n-In @code{mem} expressions, nonzero for volatile memory references.\n+@findex CONSTANT_POOL_ADDRESS_P\n+@cindex @code{symbol_ref} and @samp{/u}\n+@cindex @code{unchanging}, in @code{symbol_ref}\n+@item CONSTANT_POOL_ADDRESS_P (@var{x})\n+Nonzero in a @code{symbol_ref} if it refers to part of the current\n+function's constant pool.  For most targets these addresses are in a\n+@code{.rodata} section entirely separate from the function, but for\n+some targets the addresses are close to the beginning of the function.\n+In either case GCC assumes these addresses can be addressed directly,\n+perhaps with the help of base registers.\n+Stored in the @code{unchanging} field and printed as @samp{/u}.\n+\n+@findex CONST_OR_PURE_CALL_P\n+@cindex @code{call_insn} and @samp{/u}\n+@cindex @code{unchanging}, in @code{call_insn}\n+@item CONST_OR_PURE_CALL_P (@var{x})\n+In a @code{call_insn}, @code{note}, or an @code{expr_list} for notes,\n+indicates that the insn represents a call to a const or pure function.\n+Stored in the @code{unchanging} field and printed as @samp{/u}.\n+\n+@findex INSN_ANNULLED_BRANCH_P\n+@cindex @code{insn} and @samp{/u}\n+@cindex @code{unchanging}, in @code{insn}\n+@item INSN_ANNULLED_BRANCH_P (@var{x})\n+In an @code{insn} in the delay slot of a branch insn, indicates that an\n+annulling branch should be used.  See the discussion under\n+@code{sequence} below.  Stored in the @code{unchanging} field and printed\n+as @samp{/u}.\n+\n+@findex INSN_DEAD_CODE_P\n+@cindex @code{insn} and @samp{/s}\n+@cindex @code{in_struct}, in @code{insn}\n+@item INSN_DEAD_CODE_P (@var{x})\n+In an @code{insn} during the dead-code elimination pass, nonzero if the\n+insn is dead.\n+Stored in the @code{in_struct} field and printed as @samp{/s}.\n+\n+@findex INSN_DELETED_P\n+@cindex @code{insn} and @samp{/v}\n+@cindex @code{volatil}, in @code{insn}\n+@item INSN_DELETED_P (@var{x})\n+In an @code{insn}, nonzero if the insn has been deleted.  Stored in the\n+@code{volatil} field and printed as @samp{/v}.\n+\n+@findex INSN_FROM_TARGET_P\n+@cindex @code{insn} and @samp{/s}\n+@cindex @code{in_struct}, in @code{insn}\n+@item INSN_FROM_TARGET_P (@var{x})\n+In an @code{insn} in a delay slot of a branch, indicates that the insn\n+is from the target of the branch.  If the branch insn has\n+@code{INSN_ANNULLED_BRANCH_P} set, this insn will only be executed if\n+the branch is taken.  For annulled branches with\n+@code{INSN_FROM_TARGET_P} clear, the insn will be executed only if the\n+branch is not taken.  When @code{INSN_ANNULLED_BRANCH_P} is not set,\n+this insn will always be executed.  Stored in the @code{in_struct}\n+field and printed as @samp{/s}.\n+\n+@findex LABEL_OUTSIDE_LOOP_P\n+@cindex @code{label_ref} and @samp{/s}\n+@cindex @code{in_struct}, in @code{label_ref}\n+@item LABEL_OUTSIDE_LOOP_P (@var{x})\n+In @code{label_ref} expressions, nonzero if this is a reference to a\n+label that is outside the innermost loop containing the reference to the\n+label.  Stored in the @code{in_struct} field and printed as @samp{/s}.\n+\n+@findex LABEL_PRESERVE_P\n+@cindex @code{code_label} and @samp{/i}\n+@cindex @code{in_struct}, in @code{code_label}\n+@item LABEL_PRESERVE_P (@var{x})\n+In a @code{code_label}, indicates that the label is referenced by\n+code or data not visible to the RTL of a given function.\n+Labels referenced by a non-local goto will have this bit set.  Stored\n+in the @code{in_struct} field and printed as @samp{/s}.\n+\n+@findex LABEL_REF_NONLOCAL_P\n+@cindex @code{label_ref} and @samp{/v}\n+@cindex @code{volatil}, in @code{label_ref}\n+@item LABEL_REF_NONLOCAL_P (@var{x})\n+In @code{label_ref} and @code{reg_label} expressions, nonzero if this is\n+a reference to a non-local label.\n Stored in the @code{volatil} field and printed as @samp{/v}.\n \n+@findex LINK_COST_FREE\n+@cindex @code{insn_list} and @samp{/c}\n+@cindex @code{call}, in @code{insn_list}\n+@item LINK_COST_FREE (@var{x})\n+In the @code{LOG_LINKS} @code{insn_list} during scheduling, nonzero when\n+the cost of executing an instruction through the link is zero, i.e., the\n+link makes the cost free.  Stored in the @code{call} field and printed\n+as @samp{/c}.\n+\n+@findex LINK_COST_ZERO\n+@cindex @code{insn_list} and @samp{/j}\n+@cindex @code{jump}, in @code{insn_list}\n+@item LINK_COST_ZERO (@var{x})\n+In the @code{LOG_LINKS} @code{insn_list} during scheduling, nonzero when\n+the cost of executing an instruction through the link varies and is\n+unchanged, i.e., the link has zero additional cost.\n+Stored in the @code{jump} field and printed as @samp{/j}.\n+\n @findex MEM_IN_STRUCT_P\n @cindex @code{mem} and @samp{/s}\n @cindex @code{in_struct}, in @code{mem}\n-@cindex @samp{/s} in RTL dump\n @item MEM_IN_STRUCT_P (@var{x})\n In @code{mem} expressions, nonzero for reference to an entire structure,\n union or array, or to a component of one.  Zero for references to a\n-scalar variable or through a pointer to a scalar.  Stored in the\n-@code{in_struct} field and printed as @samp{/s}.  If both this flag and\n-MEM_SCALAR_P are clear, then we don't know whether this MEM is in a\n-structure or not.  Both flags should never be simultaneously set.\n+scalar variable or through a pointer to a scalar.  If both this flag and\n+@code{MEM_SCALAR_P} are clear, then we don't know whether this @code{mem}\n+is in a structure or not.  Both flags should never be simultaneously set.\n+Stored in the @code{in_struct} field and printed as @samp{/s}.\n+\n+@findex MEM_KEEP_ALIAS_SET_P\n+@cindex @code{mem} and @samp{/j}\n+@cindex @code{jump}, in @code{mem}\n+@item MEM_KEEP_ALIAS_SET_P (@var{x})\n+In @code{mem} expressions, 1 if we should keep the alias set for this\n+mem unchanged when we access a component.  Set to 1, for example, when we\n+are already in a non-addressable component of an aggregate.\n+Stored in the @code{jump} field and printed as @samp{/j}.\n \n @findex MEM_SCALAR_P\n @cindex @code{mem} and @samp{/f}\n-@cindex @code{frame_related}, in@code{mem}\n-@cindex @samp{/f} in RTL dump\n+@cindex @code{frame_related}, in @code{mem}\n @item MEM_SCALAR_P (@var{x})\n In @code{mem} expressions, nonzero for reference to a scalar known not\n to be a member of a structure, union, or array.  Zero for such\n references and for indirections through pointers, even pointers pointing\n-to scalar types.  If both this flag and MEM_STRUCT_P are clear, then we\n-don't know whether this MEM is in a structure or not.  Both flags should\n+to scalar types.  If both this flag and @code{MEM_STRUCT_P} are clear, then we\n+don't know whether this @code{mem} is in a structure or not.  Both flags should\n never be simultaneously set.\n+Stored in the @code{frame_related} field and printed as @samp{/f}.\n \n-@findex MEM_ALIAS_SET\n-@item MEM_ALIAS_SET (@var{x})\n-In @code{mem} expressions, the alias set to which @var{x} belongs.  If\n-zero, @var{x} is not in any alias set, and may alias anything.  If\n-nonzero, @var{x} may only alias objects in the same alias set.  This\n-value is set (in a language-specific manner) by the front end.  This\n-field is not a bit-field; it is in an integer, found as the second\n-argument to the @code{mem}.\n+@findex MEM_VOLATILE_P\n+@cindex @code{mem} and @samp{/v}\n+@cindex @code{volatil}, in @code{mem}\n+@item MEM_VOLATILE_P (@var{x})\n+In @code{mem} and @code{asm_operands} expressions, nonzero for volatile\n+memory references.\n+Stored in the @code{volatil} field and printed as @samp{/v}.\n+\n+@findex REG_FUNCTION_VALUE_P\n+@cindex @code{reg} and @samp{/i}\n+@cindex @code{integrated}, in @code{reg}\n+@item REG_FUNCTION_VALUE_P (@var{x})\n+Nonzero in a @code{reg} if it is the place in which this function's\n+value is going to be returned.  (This happens only in a hard\n+register.)  Stored in the @code{integrated} field and printed as\n+@samp{/i}.\n \n @findex REG_LOOP_TEST_P\n @cindex @code{reg} and @samp{/s}\n @cindex @code{in_struct}, in @code{reg}\n-@item REG_LOOP_TEST_P\n+@item REG_LOOP_TEST_P (@var{x})\n In @code{reg} expressions, nonzero if this register's entire life is\n contained in the exit test code for some loop.  Stored in the\n @code{in_struct} field and printed as @samp{/s}.\n \n+@findex REG_POINTER\n+@cindex @code{reg} and @samp{/f}\n+@cindex @code{frame_related}, in @code{reg}\n+@item REG_POINTER (@var{x})\n+Nonzero in a @code{reg} if the register holds a pointer.  Stored in the\n+@code{frame_related} field and printed as @samp{/f}.\n+\n @findex REG_USERVAR_P\n @cindex @code{reg} and @samp{/v}\n @cindex @code{volatil}, in @code{reg}\n@@ -432,75 +547,19 @@ the user's source code.  Zero for temporaries generated internally by\n the compiler.  Stored in the @code{volatil} field and printed as\n @samp{/v}.\n \n-@cindex @samp{/i} in RTL dump\n-@findex REG_FUNCTION_VALUE_P\n-@cindex @code{reg} and @samp{/i}\n-@cindex @code{integrated}, in @code{reg}\n-@item REG_FUNCTION_VALUE_P (@var{x})\n-Nonzero in a @code{reg} if it is the place in which this function's\n-value is going to be returned.  (This happens only in a hard\n-register.)  Stored in the @code{integrated} field and printed as\n-@samp{/i}.\n-\n The same hard register may be used also for collecting the values of\n functions called by this one, but @code{REG_FUNCTION_VALUE_P} is zero\n in this kind of use.\n \n-@cindex @samp{/f} in RTL dump\n-@findex REG_POINTER\n-@cindex @code{reg} and @samp{/f}\n-@cindex @code{frame_related}, in @code{reg}\n-@item REG_POINTER (@var{x})\n-Nonzero in a @code{reg} if the register holds a pointer.  Stored in the\n-@code{frame_related} field and printed as @samp{/f}.\n-\n-@findex SUBREG_PROMOTED_VAR_P\n-@cindex @code{subreg} and @samp{/s}\n-@cindex @code{in_struct}, in @code{subreg}\n-@item SUBREG_PROMOTED_VAR_P\n-Nonzero in a @code{subreg} if it was made when accessing an object that\n-was promoted to a wider mode in accord with the @code{PROMOTED_MODE} machine\n-description macro (@pxref{Storage Layout}).  In this case, the mode of\n-the @code{subreg} is the declared mode of the object and the mode of\n-@code{SUBREG_REG} is the mode of the register that holds the object.\n-Promoted variables are always either sign- or zero-extended to the wider\n-mode on every assignment.  Stored in the @code{in_struct} field and\n-printed as @samp{/s}.\n-\n-@findex SUBREG_PROMOTED_UNSIGNED_P\n-@cindex @code{subreg} and @samp{/u}\n-@cindex @code{unchanging}, in @code{subreg}\n-@item SUBREG_PROMOTED_UNSIGNED_P\n-Nonzero in a @code{subreg} that has @code{SUBREG_PROMOTED_VAR_P} nonzero\n-if the object being referenced is kept zero-extended and zero if it\n-is kept sign-extended.  Stored in the @code{unchanging} field and\n-printed as @samp{/u}.\n-\n-@findex RTX_UNCHANGING_P\n-@cindex @code{reg} and @samp{/u}\n-@cindex @code{mem} and @samp{/u}\n-@cindex @code{unchanging}, in @code{reg} and @code{mem}\n-@cindex @samp{/u} in RTL dump\n-@item RTX_UNCHANGING_P (@var{x})\n-Nonzero in a @code{reg} or @code{mem} if the value is not changed.\n-(This flag is not set for memory references via pointers to constants.\n-Such pointers only guarantee that the object will not be changed\n-explicitly by the current function.  The object might be changed by\n-other functions or by aliasing.)  Stored in the\n-@code{unchanging} field and printed as @samp{/u}.\n-\n-@findex RTX_INTEGRATED_P\n-@cindex @code{integrated}, in @code{insn}\n-@item RTX_INTEGRATED_P (@var{insn})\n-Nonzero in an insn if it resulted from an in-line function call.\n-Stored in the @code{integrated} field and printed as @samp{/i}.\n-\n @findex RTX_FRAME_RELATED_P\n+@cindex @code{insn} and @samp{/f}\n+@cindex @code{frame_related}, in @code{insn}\n @item RTX_FRAME_RELATED_P (@var{x})\n-Nonzero in an insn or expression which is part of a function prologue\n+Nonzero in an @code{insn} or @code{set} which is part of a function prologue\n and sets the stack pointer, sets the frame pointer, or saves a register.\n This flag should also be set on an instruction that sets up a temporary\n register to use in place of the frame pointer.\n+Stored in the @code{frame_related} field and printed as @samp{/f}.\n \n In particular, on RISC targets where there are limits on the sizes of\n immediate constants, it is sometimes impossible to reach the register\n@@ -521,12 +580,77 @@ computation performed by this instruction, i.e., one that\n This flag is required for exception handling support on targets with RTL\n prologues.\n \n-@findex SYMBOL_REF_USED\n-@cindex @code{used}, in @code{symbol_ref}\n-@item SYMBOL_REF_USED (@var{x})\n-In a @code{symbol_ref}, indicates that @var{x} has been used.  This is\n-normally only used to ensure that @var{x} is only declared external\n-once.  Stored in the @code{used} field.\n+@findex RTX_INTEGRATED_P\n+@cindex @code{insn} and @samp{/i}\n+@cindex @code{integrated}, in @code{insn}\n+@item RTX_INTEGRATED_P (@var{x})\n+Nonzero in an @code{insn}, @code{insn_list}, or @code{const} if it\n+resulted from an in-line function call.\n+Stored in the @code{integrated} field and printed as @samp{/i}.\n+\n+@findex RTX_UNCHANGING_P\n+@cindex @code{reg} and @samp{/u}\n+@cindex @code{mem} and @samp{/u}\n+@cindex @code{unchanging}, in @code{reg} and @code{mem}\n+@item RTX_UNCHANGING_P (@var{x})\n+Nonzero in a @code{reg} or @code{mem} if the memory is set at most once,\n+anywhere.  This does not mean that it is function invariant.\n+Stored in the @code{unchanging} field and printed as @samp{/u}.\n+\n+@findex SCHED_GROUP_P\n+@cindex @code{insn} and @samp{/i}\n+@cindex @code{in_struct}, in @code{insn}\n+@item SCHED_GROUP_P (@var{x})\n+During instruction scheduling, in an @code{insn}, indicates that the\n+previous insn must be scheduled together with this insn.  This is used to\n+ensure that certain groups of instructions will not be split up by the\n+instruction scheduling pass, for example, @code{use} insns before\n+a @code{call_insn} may not be separated from the @code{call_insn}.\n+Stored in the @code{in_struct} field and printed as @samp{/s}.\n+\n+@findex SET_IS_RETURN_P\n+@cindex @code{insn} and @samp{/j}\n+@cindex @code{jump}, in @code{insn}\n+@item SET_IS_RETURN_P (@var{x})\n+For a @code{set}, nonzero if it is for a return.\n+Stored in the @code{jump} field and printed as @samp{/j}.\n+\n+@findex SIBLING_CALL_P\n+@cindex @code{call_insn} and @samp{/j}\n+@cindex @code{jump}, in @code{call_insn}\n+@item SIBLING_CALL_P (@var{x})\n+For a @code{call_insn}, nonzero if the insn is a sibling call.\n+Stored in the @code{jump} field and printed as @samp{/j}.\n+\n+@findex STRING_POOL_ADDRESS_P\n+@cindex @code{symbol_ref} and @samp{/f}\n+@cindex @code{frame_related}, in @code{symbol_ref}\n+@item STRING_POOL_ADDRESS_P (@var{x})\n+For a @code{symbol_ref} expression, nonzero if it addresses this function's\n+string constant pool.\n+Stored in the @code{frame_related} field and printed as @samp{/f}.\n+\n+@findex SUBREG_PROMOTED_UNSIGNED_P\n+@cindex @code{subreg} and @samp{/u}\n+@cindex @code{unchanging}, in @code{subreg}\n+@item SUBREG_PROMOTED_UNSIGNED_P (@var{x})\n+Nonzero in a @code{subreg} that has @code{SUBREG_PROMOTED_VAR_P} nonzero\n+if the object being referenced is kept zero-extended and zero if it\n+is kept sign-extended.  Stored in the @code{unchanging} field and\n+printed as @samp{/u}.\n+\n+@findex SUBREG_PROMOTED_VAR_P\n+@cindex @code{subreg} and @samp{/s}\n+@cindex @code{in_struct}, in @code{subreg}\n+@item SUBREG_PROMOTED_VAR_P (@var{x})\n+Nonzero in a @code{subreg} if it was made when accessing an object that\n+was promoted to a wider mode in accord with the @code{PROMOTED_MODE} machine\n+description macro (@pxref{Storage Layout}).  In this case, the mode of\n+the @code{subreg} is the declared mode of the object and the mode of\n+@code{SUBREG_REG} is the mode of the register that holds the object.\n+Promoted variables are always either sign- or zero-extended to the wider\n+mode on every assignment.  Stored in the @code{in_struct} field and\n+printed as @samp{/s}.\n \n @findex SYMBOL_REF_FLAG\n @cindex @code{symbol_ref} and @samp{/v}\n@@ -535,135 +659,58 @@ once.  Stored in the @code{used} field.\n In a @code{symbol_ref}, this is used as a flag for machine-specific purposes.\n Stored in the @code{volatil} field and printed as @samp{/v}.\n \n+@findex SYMBOL_REF_USED\n+@cindex @code{used}, in @code{symbol_ref}\n+@item SYMBOL_REF_USED (@var{x})\n+In a @code{symbol_ref}, indicates that @var{x} has been used.  This is\n+normally only used to ensure that @var{x} is only declared external\n+once.  Stored in the @code{used} field.\n+\n @findex SYMBOL_REF_WEAK\n @cindex @code{symbol_ref} and @samp{/i}\n @cindex @code{integrated}, in @code{symbol_ref}\n @item SYMBOL_REF_WEAK (@var{x})\n In a @code{symbol_ref}, indicates that @var{x} has been declared weak.\n Stored in the @code{integrated} field and printed as @samp{/i}.\n-\n-@findex LABEL_OUTSIDE_LOOP_P\n-@cindex @code{label_ref} and @samp{/s}\n-@cindex @code{in_struct}, in @code{label_ref}\n-@item LABEL_OUTSIDE_LOOP_P\n-In @code{label_ref} expressions, nonzero if this is a reference to a\n-label that is outside the innermost loop containing the reference to the\n-label.  Stored in the @code{in_struct} field and printed as @samp{/s}.\n-\n-@findex INSN_DELETED_P\n-@cindex @code{volatil}, in @code{insn}\n-@item INSN_DELETED_P (@var{insn})\n-In an insn, nonzero if the insn has been deleted.  Stored in the\n-@code{volatil} field and printed as @samp{/v}.\n-\n-@findex INSN_ANNULLED_BRANCH_P\n-@cindex @code{insn} and @samp{/u}\n-@cindex @code{unchanging}, in @code{insn}\n-@item INSN_ANNULLED_BRANCH_P (@var{insn})\n-In an @code{insn} in the delay slot of a branch insn, indicates that an\n-annulling branch should be used.  See the discussion under\n-@code{sequence} below.  Stored in the @code{unchanging} field and printed\n-as @samp{/u}.\n-\n-@findex INSN_FROM_TARGET_P\n-@cindex @code{insn} and @samp{/s}\n-@cindex @code{in_struct}, in @code{insn}\n-@cindex @samp{/s} in RTL dump\n-@item INSN_FROM_TARGET_P (@var{insn})\n-In an @code{insn} in a delay slot of a branch, indicates that the insn\n-is from the target of the branch.  If the branch insn has\n-@code{INSN_ANNULLED_BRANCH_P} set, this insn will only be executed if\n-the branch is taken.  For annulled branches with\n-@code{INSN_FROM_TARGET_P} clear, the insn will be executed only if the\n-branch is not taken.  When @code{INSN_ANNULLED_BRANCH_P} is not set,\n-this insn will always be executed.  Stored in the @code{in_struct}\n-field and printed as @samp{/s}.\n-\n-@findex CONSTANT_POOL_ADDRESS_P\n-@cindex @code{symbol_ref} and @samp{/u}\n-@cindex @code{unchanging}, in @code{symbol_ref}\n-@item CONSTANT_POOL_ADDRESS_P (@var{x})\n-Nonzero in a @code{symbol_ref} if it refers to part of the current\n-function's ``constants pool''.  These are addresses close to the\n-beginning of the function, and GCC assumes they can be addressed\n-directly (perhaps with the help of base registers).  Stored in the\n-@code{unchanging} field and printed as @samp{/u}.\n-\n-@findex CONST_CALL_P\n-@cindex @code{call_insn} and @samp{/u}\n-@cindex @code{unchanging}, in @code{call_insn}\n-@item CONST_CALL_P (@var{x})\n-In a @code{call_insn}, indicates that the insn represents a call to a const\n-function.  Stored in the @code{unchanging} field and printed as @samp{/u}.\n-\n-@findex LABEL_PRESERVE_P\n-@cindex @code{code_label} and @samp{/i}\n-@cindex @code{in_struct}, in @code{code_label}\n-@item LABEL_PRESERVE_P (@var{x})\n-In a @code{code_label}, indicates that the label can never be deleted.\n-Labels referenced by a non-local goto will have this bit set.  Stored\n-in the @code{in_struct} field and printed as @samp{/s}.\n-\n-@findex SCHED_GROUP_P\n-@cindex @code{insn} and @samp{/i}\n-@cindex @code{in_struct}, in @code{insn}\n-@item SCHED_GROUP_P (@var{insn})\n-During instruction scheduling, in an insn, indicates that the previous insn\n-must be scheduled together with this insn.  This is used to ensure that\n-certain groups of instructions will not be split up by the instruction\n-scheduling pass, for example, @code{use} insns before a @code{call_insn} may\n-not be separated from the @code{call_insn}.  Stored in the @code{in_struct}\n-field and printed as @samp{/s}.\n @end table\n \n-These are the fields which the above macros refer to:\n+These are the fields to which the above macros refer:\n \n @table @code\n-@findex used\n-@item used\n-Normally, this flag is used only momentarily, at the end of RTL\n-generation for a function, to count the number of times an expression\n-appears in insns.  Expressions that appear more than once are copied,\n-according to the rules for shared structure (@pxref{Sharing}).\n+@findex call\n+@cindex @samp{/c} in RTL dump\n+@item call\n+In the @code{LOG_LINKS} of an @code{insn_list} during scheduling, 1 means that\n+the cost of executing an instruction through the link is zero.\n \n-In a @code{symbol_ref}, it indicates that an external declaration for\n-the symbol has already been written.\n+In an RTL dump, this flag is represented as @samp{/c}.\n \n-In a @code{reg}, it is used by the leaf register renumbering code to ensure\n-that each register is only renumbered once.\n+@findex frame_related\n+@cindex @samp{/f} in RTL dump\n+@item frame_related\n+In an @code{insn} or @code{set} expression, 1 means that it is part of\n+a function prologue and sets the stack pointer, sets the frame pointer,\n+saves a register, or sets up a temporary register to use in place of the\n+frame pointer.\n \n-@findex volatil\n-@item volatil\n-This flag is used in @code{mem}, @code{symbol_ref} and @code{reg}\n-expressions and in insns.  In RTL dump files, it is printed as\n-@samp{/v}.\n+In @code{reg} expressions, 1 means that the register holds a pointer.\n \n-@cindex volatile memory references\n-In a @code{mem} expression, it is 1 if the memory reference is volatile.\n-Volatile memory references may not be deleted, reordered or combined.\n+In @code{symbol_ref} expressions, 1 means that the reference addresses\n+this function's string constant pool.\n \n-In a @code{symbol_ref} expression, it is used for machine-specific\n-purposes.\n-\n-In a @code{reg} expression, it is 1 if the value is a user-level variable.\n-0 indicates an internal compiler temporary.\n+In @code{mem} expressions, 1 means that the reference is to a scalar.\n \n-In an insn, 1 means the insn has been deleted.\n+In an RTL dump, this flag is represented as @samp{/f}.\n \n @findex in_struct\n+@cindex @samp{/s} in RTL dump\n @item in_struct\n In @code{mem} expressions, it is 1 if the memory datum referred to is\n all or part of a structure or array; 0 if it is (or might be) a scalar\n variable.  A reference through a C pointer has 0 because the pointer\n might point to a scalar variable.  This information allows the compiler\n to determine something about possible cases of aliasing.\n \n-In an insn in the delay slot of a branch, 1 means that this insn is from\n-the target of the branch.\n-\n-During instruction scheduling, in an insn, 1 means that this insn must be\n-scheduled as part of a group together with the previous insn.\n-\n In @code{reg} expressions, it is 1 if the register has its entire life\n contained within the test expression of some loop.\n \n@@ -679,36 +726,101 @@ This is used for labels which are the target of non-local gotos.  Such a\n label that would have been deleted is replaced with a @code{note} of type\n @code{NOTE_INSN_DELETED_LABEL}.\n \n+In an @code{insn} during dead-code elimination, 1 means that the insn is\n+dead code.\n+\n+In an @code{insn} during reorg for an insn in the delay slot of a branch,\n+1 means that this insn is from the target of the branch.\n+\n+In an @code{insn} during instruction scheduling, 1 means that this insn\n+must be scheduled as part of a group together with the previous insn.\n+\n In an RTL dump, this flag is represented as @samp{/s}.\n \n+@findex integrated\n+@cindex @samp{/i} in RTL dump\n+@item integrated\n+In an @code{insn}, @code{insn_list}, or @code{const}, 1 means the RTL was\n+produced by procedure integration.\n+\n+In @code{reg} expressions, 1 means the register contains\n+the value to be returned by the current function.  On\n+machines that pass parameters in registers, the same register number\n+may be used for parameters as well, but this flag is not set on such\n+uses.\n+\n+In @code{symbol_ref} expressions, 1 means the referenced symbol is weak.\n+\n+In an RTL dump, this flag is represented as @samp{/i}.\n+\n+@findex jump\n+@cindex @samp{/j} in RTL dump\n+@item jump\n+In a @code{mem} expression, 1 means we should keep the alias set for this\n+mem unchanged when we access a component.\n+\n+In a @code{set}, 1 means it is for a return.\n+\n+In a @code{call_insn}, 1 means it is a sibling call.\n+\n+In the @code{LOG_LINKS} of an @code{insn_list} during scheduling, 1 means the\n+cost of executing an instruction through the link varies and is unchanging.\n+\n+In an RTL dump, this flag is represented as @samp{/j}.\n+\n @findex unchanging\n+@cindex @samp{/u} in RTL dump\n @item unchanging\n In @code{reg} and @code{mem} expressions, 1 means\n that the value of the expression never changes.\n \n In @code{subreg} expressions, it is 1 if the @code{subreg} references an\n unsigned object whose mode has been promoted to a wider mode.\n \n-In an insn, 1 means that this is an annulling branch.\n+In an @code{insn}, 1 means that this is an annulling branch.\n \n In a @code{symbol_ref} expression, 1 means that this symbol addresses\n-something in the per-function constants pool.\n+something in the per-function constant pool.\n \n-In a @code{call_insn}, 1 means that this instruction is a call to a\n-const function.\n+In a @code{call_insn}, @code{note}, or an @code{expr_list} of notes,\n+1 means that this instruction is a call to a const or pure function.\n \n In an RTL dump, this flag is represented as @samp{/u}.\n \n-@findex integrated\n-@item integrated\n-In some kinds of expressions, including insns, this flag means the\n-rtl was produced by procedure integration.\n+@findex used\n+@item used\n+This flag is used directly (without an access macro) at the end of RTL\n+generation for a function, to count the number of times an expression\n+appears in insns.  Expressions that appear more than once are copied,\n+according to the rules for shared structure (@pxref{Sharing}).\n \n-In a @code{reg} expression, this flag indicates the register\n-containing the value to be returned by the current function.  On\n-machines that pass parameters in registers, the same register number\n-may be used for parameters as well, but this flag is not set on such\n-uses.\n+For a @code{reg}, it is used directly (without an access macro) by the\n+leaf register renumbering code to ensure that each register is only\n+renumbered once.\n+\n+In a @code{symbol_ref}, it indicates that an external declaration for\n+the symbol has already been written.\n+\n+@findex volatil\n+@cindex @samp{/v} in RTL dump\n+@item volatil\n+@cindex volatile memory references\n+In a @code{mem} or @code{asm_operands} expression, it is 1 if the memory\n+reference is volatile.  Volatile memory references may not be deleted,\n+reordered or combined.\n+\n+In a @code{symbol_ref} expression, it is used for machine-specific\n+purposes.\n+\n+In a @code{reg} expression, it is 1 if the value is a user-level variable.\n+0 indicates an internal compiler temporary.\n+\n+In an @code{insn}, 1 means the insn has been deleted.\n+\n+In @code{label_ref} and @code{reg_label} expressions, 1 means a reference\n+to a non-local label.\n+\n+In an RTL dump, this flag is represented as @samp{/v}.\n @end table\n \n @node Machine Modes"}]}