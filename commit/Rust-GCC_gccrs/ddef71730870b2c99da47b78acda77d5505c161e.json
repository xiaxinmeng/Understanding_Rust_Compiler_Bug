{"sha": "ddef71730870b2c99da47b78acda77d5505c161e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRlZjcxNzMwODcwYjJjOTlkYTQ3Yjc4YWNkYTc3ZDU1MDVjMTYxZQ==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2005-09-09T13:05:20Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2005-09-09T13:05:20Z"}, "message": "re PR libgcj/22084 (Divide_1 test case hangs)\n\n2005-09-08  Andrew Haley  <aph@redhat.com>\n\n\tPR java/22084\n\t* include/i386-signal.h (HANDLE_DIVIDE_OVERFLOW): Bump IP by 1 if\n\tR/M field in instruction is 100.\n\nFrom-SVN: r104094", "tree": {"sha": "e55077c3a482078b9438defd7ccf117a2797e152", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e55077c3a482078b9438defd7ccf117a2797e152"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddef71730870b2c99da47b78acda77d5505c161e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddef71730870b2c99da47b78acda77d5505c161e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddef71730870b2c99da47b78acda77d5505c161e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddef71730870b2c99da47b78acda77d5505c161e/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7ce7896c390e4c3d4bfacf41bcfa6170e3c9adb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ce7896c390e4c3d4bfacf41bcfa6170e3c9adb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ce7896c390e4c3d4bfacf41bcfa6170e3c9adb8"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "a167ac4c8c6f66da6b7f12aec79eb63a34855a41", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddef71730870b2c99da47b78acda77d5505c161e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddef71730870b2c99da47b78acda77d5505c161e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ddef71730870b2c99da47b78acda77d5505c161e", "patch": "@@ -1,3 +1,9 @@\n+2005-09-08  Andrew Haley  <aph@redhat.com>\n+\n+\tPR java/22084\n+\t* include/i386-signal.h (HANDLE_DIVIDE_OVERFLOW): Bump IP by 1 if\n+\tR/M field in instruction is 100.\n+\n 2005-09-08  Thomas Fitzsimmons  <fitzsim@redhat.com>\n \n \tPR libgcj/23761"}, {"sha": "a5c8ae4bf54a55c966f3b7cdcb4db19124616feb", "filename": "libjava/include/i386-signal.h", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddef71730870b2c99da47b78acda77d5505c161e/libjava%2Finclude%2Fi386-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddef71730870b2c99da47b78acda77d5505c161e/libjava%2Finclude%2Fi386-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fi386-signal.h?ref=ddef71730870b2c99da47b78acda77d5505c161e", "patch": "@@ -64,18 +64,25 @@ do\t\t\t\t\t\t\t\t\t\\\n       if (_regs->eax == 0x80000000\t\t\t\t\t\\\n \t  && ((_modrm >> 3) & 7) == 7) /* Signed divide */\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n+\t  unsigned char _rm = _modrm & 7;\t\t\t\t\\\n \t  _regs->edx = 0; /* the remainder is zero */\t\t\t\\\n \t  switch (_modrm >> 6)\t\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n-\t    case 0:\t\t\t\t\t\t\t\\\n-\t      if ((_modrm & 7) == 5)\t\t\t\t\t\\\n-\t\t_eip += 4;\t\t\t\t\t\t\\\n+\t    case 0:  /* register indirect */\t\t\t\t\\\n+\t      if (_rm == 5)   /* 32-bit displacement */\t\t\t\\\n+\t\t_eip += 4;   \t\t\t\t\t\t\\\n+\t      if (_rm == 4)  /* A SIB byte follows the ModR/M byte */\t\\\n+\t\t_eip += 1;\t\t\t\t\t\t\\\n \t      break;\t\t\t\t\t\t\t\\\n-\t    case 1:\t\t\t\t\t\t\t\\\n+\t    case 1:  /* register indirect + 8-bit displacement */\t\\\n \t      _eip += 1;\t\t\t\t\t\t\\\n+\t      if (_rm == 4)  /* A SIB byte follows the ModR/M byte */\t\\\n+\t\t_eip += 1;\t\t\t\t\t\t\\\n \t      break;\t\t\t\t\t\t\t\\\n-\t    case 2:\t\t\t\t\t\t\t\\\n+\t    case 2:  /* register indirect + 32-bit displacement */\t\\\n \t      _eip += 4;\t\t\t\t\t\t\\\n+\t      if (_rm == 4)  /* A SIB byte follows the ModR/M byte */\t\\\n+\t\t_eip += 1;\t\t\t\t\t\t\\\n \t      break;\t\t\t\t\t\t\t\\\n \t    case 3:\t\t\t\t\t\t\t\\\n \t      break;\t\t\t\t\t\t\t\\"}]}