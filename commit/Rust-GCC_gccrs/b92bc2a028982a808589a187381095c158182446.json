{"sha": "b92bc2a028982a808589a187381095c158182446", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkyYmMyYTAyODk4MmE4MDg1ODlhMTg3MzgxMDk1YzE1ODE4MjQ0Ng==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-09-06T11:29:17Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-09-06T11:29:17Z"}, "message": "re PR c++/12167 (ICE on default argument of class member function if non-simple)\n\ncp:\n\tPR c++/12167\n\t* parser.c (cp_parser_late_parsing_default_args): Push & pop the\n\tunparsed functions queue.\ntestsuite:\n\tPR c++/12167\n\t* g++.dg/parse/defarg5.C: New test.\n\n\t* g++.dg/template/non-type-template-argument-1.C: Tweak expected error.\n\nFrom-SVN: r71133", "tree": {"sha": "73b60b4f2fc5d263fe54ad0e1c85ed387bcbc5d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73b60b4f2fc5d263fe54ad0e1c85ed387bcbc5d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b92bc2a028982a808589a187381095c158182446", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b92bc2a028982a808589a187381095c158182446", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b92bc2a028982a808589a187381095c158182446", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b92bc2a028982a808589a187381095c158182446/comments", "author": null, "committer": null, "parents": [{"sha": "13f7d3a1c0fea5ef96f2c89ec96dad1f2e59b330", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13f7d3a1c0fea5ef96f2c89ec96dad1f2e59b330", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13f7d3a1c0fea5ef96f2c89ec96dad1f2e59b330"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "4926d58349f47bb015531a861962d82a919871cf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b92bc2a028982a808589a187381095c158182446/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b92bc2a028982a808589a187381095c158182446/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b92bc2a028982a808589a187381095c158182446", "patch": "@@ -1,3 +1,9 @@\n+2003-09-06  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/12167\n+\t* parser.c (cp_parser_late_parsing_default_args): Push & pop the\n+\tunparsed functions queue.\n+\n 2003-09-05  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/12163"}, {"sha": "dffddabdb4c7d5f851a38f6f0938c62f105ffef9", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b92bc2a028982a808589a187381095c158182446/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b92bc2a028982a808589a187381095c158182446/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b92bc2a028982a808589a187381095c158182446", "patch": "@@ -13883,6 +13883,13 @@ cp_parser_late_parsing_default_args (cp_parser *parser, tree fn)\n   bool saved_local_variables_forbidden_p;\n   tree parameters;\n \n+  /* While we're parsing the default args, we might (due to the\n+     statement expression extension) encounter more classes.  We want\n+     to handle them right away, but we don't want them getting mixed\n+     up with default args that are currently in the queue.  */\n+  parser->unparsed_functions_queues\n+    = tree_cons (NULL_TREE, NULL_TREE, parser->unparsed_functions_queues);\n+\n   for (parameters = TYPE_ARG_TYPES (TREE_TYPE (fn));\n        parameters;\n        parameters = TREE_CHAIN (parameters))\n@@ -13916,6 +13923,10 @@ cp_parser_late_parsing_default_args (cp_parser *parser, tree fn)\n       parser->lexer = saved_lexer;\n       parser->local_variables_forbidden_p = saved_local_variables_forbidden_p;\n     }\n+\n+  /* Restore the queue.  */\n+  parser->unparsed_functions_queues \n+    = TREE_CHAIN (parser->unparsed_functions_queues);\n }\n \n /* Parse the operand of `sizeof' (or a similar operator).  Returns"}, {"sha": "d28f2d11645a5fda6efa1f01413e2336f72d6c87", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b92bc2a028982a808589a187381095c158182446/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b92bc2a028982a808589a187381095c158182446/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b92bc2a028982a808589a187381095c158182446", "patch": "@@ -1,3 +1,10 @@\n+2003-09-06  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/12167\n+\t* g++.dg/parse/defarg5.C: New test.\n+\n+\t* g++.dg/template/non-type-template-argument-1.C: Tweak expected error.\n+\n 2003-09-05  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/12163"}, {"sha": "01a67ed5915e3136b5a77f36ae93cf5129263160", "filename": "gcc/testsuite/g++.dg/parse/defarg5.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b92bc2a028982a808589a187381095c158182446/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b92bc2a028982a808589a187381095c158182446/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg5.C?ref=b92bc2a028982a808589a187381095c158182446", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 5 Sep 2003 <nathan@codesourcery.com>\n+// Origin:Wolfgang Bangerth bangerth@dealii.org\n+\n+// PR c++/12167 - infinite recursion\n+\n+class A {   \n+  void report(int d\n+\t      // the default arg is what NAN etc can expand to, but\n+\t      // with the floatiness removed.\n+\t      = (__extension__ ((union { unsigned l; int d; })\n+\t\t\t\t{ l: 0x7fc00000U }).d));\n+};"}, {"sha": "273017635c3f2097f43d0368a9cf40fe98d1967f", "filename": "gcc/testsuite/g++.dg/template/non-type-template-argument-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b92bc2a028982a808589a187381095c158182446/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-type-template-argument-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b92bc2a028982a808589a187381095c158182446/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-type-template-argument-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-type-template-argument-1.C?ref=b92bc2a028982a808589a187381095c158182446", "patch": "@@ -6,7 +6,7 @@ template <bool> struct C {};\n \n template <typename T> struct D\n {\n-   C<T::X> c;                   // { dg-error \"invalid use\" }\n+   C<T::X> c;                   // { dg-error \"names a type\" }\n };\n \n D<B> d;                         // { dg-error \"\" }"}]}