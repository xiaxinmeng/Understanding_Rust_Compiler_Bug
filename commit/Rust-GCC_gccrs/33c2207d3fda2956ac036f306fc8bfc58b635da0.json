{"sha": "33c2207d3fda2956ac036f306fc8bfc58b635da0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNjMjIwN2QzZmRhMjk1NmFjMDM2ZjMwNmZjOGJmYzU4YjYzNWRhMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-01-17T14:00:57Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-01-17T14:00:57Z"}, "message": "reorg.c (fill_simple_delay_slots): If TARGET_FLAGS_REGNUM is valid...\n\n\t* reorg.c (fill_simple_delay_slots): If TARGET_FLAGS_REGNUM is valid,\n\timplement a more precise life analysis for it during backward scan.\n\nFrom-SVN: r219800", "tree": {"sha": "ac4ece778c84c9eedff72876de37513ec1cc220d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac4ece778c84c9eedff72876de37513ec1cc220d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33c2207d3fda2956ac036f306fc8bfc58b635da0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33c2207d3fda2956ac036f306fc8bfc58b635da0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33c2207d3fda2956ac036f306fc8bfc58b635da0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33c2207d3fda2956ac036f306fc8bfc58b635da0/comments", "author": null, "committer": null, "parents": [{"sha": "c6c1bfd99bbe6789b88f59c90c753206ca1cd3fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6c1bfd99bbe6789b88f59c90c753206ca1cd3fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6c1bfd99bbe6789b88f59c90c753206ca1cd3fd"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "c1489923d32a1b83906da3758da1568aba90d7b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33c2207d3fda2956ac036f306fc8bfc58b635da0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33c2207d3fda2956ac036f306fc8bfc58b635da0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33c2207d3fda2956ac036f306fc8bfc58b635da0", "patch": "@@ -1,3 +1,8 @@\n+2015-01-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* reorg.c (fill_simple_delay_slots): If TARGET_FLAGS_REGNUM is valid,\n+\timplement a more precise life analysis for it during backward scan.\n+\n 2015-01-17  Jan Kratochvil  <jan.kratochvil@redhat.com>\n \n \t* dwarf2out.c (gen_producer_string): Ignore also OPT_fpreprocessed."}, {"sha": "05b84442f2f5a8bfa431e3dc16026f7919ebbf43", "filename": "gcc/reorg.c", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33c2207d3fda2956ac036f306fc8bfc58b635da0/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33c2207d3fda2956ac036f306fc8bfc58b635da0/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=33c2207d3fda2956ac036f306fc8bfc58b635da0", "patch": "@@ -2072,9 +2072,24 @@ fill_simple_delay_slots (int non_jumps_p)\n \n       if (slots_filled < slots_to_fill)\n \t{\n+\t  /* If the flags register is dead after the insn, then we want to be\n+\t     able to accept a candidate that clobbers it.  For this purpose,\n+\t     we need to filter the flags register during life analysis, so\n+\t     that it doesn't create RAW and WAW dependencies, while still\n+\t     creating the necessary WAR dependencies.  */\n+\t  bool filter_flags\n+\t    = (slots_to_fill == 1\n+\t       && targetm.flags_regnum != INVALID_REGNUM\n+\t       && find_regno_note (insn, REG_DEAD, targetm.flags_regnum));\n+\t  struct resources fset;\n \t  CLEAR_RESOURCE (&needed);\n \t  CLEAR_RESOURCE (&set);\n \t  mark_set_resources (insn, &set, 0, MARK_SRC_DEST);\n+\t  if (filter_flags)\n+\t    {\n+\t      CLEAR_RESOURCE (&fset);\n+\t      mark_set_resources (insn, &fset, 0, MARK_SRC_DEST);\n+\t    }\n \t  mark_referenced_resources (insn, &needed, false);\n \n \t  for (trial = prev_nonnote_insn (insn); ! stop_search_p (trial, 1);\n@@ -2092,7 +2107,9 @@ fill_simple_delay_slots (int non_jumps_p)\n \t      /* Check for resource conflict first, to avoid unnecessary\n \t\t splitting.  */\n \t      if (! insn_references_resource_p (trial, &set, true)\n-\t\t  && ! insn_sets_resource_p (trial, &set, true)\n+\t\t  && ! insn_sets_resource_p (trial,\n+\t\t\t\t\t     filter_flags ? &fset : &set,\n+\t\t\t\t\t     true)\n \t\t  && ! insn_sets_resource_p (trial, &needed, true)\n #ifdef HAVE_cc0\n \t\t  /* Can't separate set of cc0 from its use.  */\n@@ -2121,6 +2138,18 @@ fill_simple_delay_slots (int non_jumps_p)\n \t\t}\n \n \t      mark_set_resources (trial, &set, 0, MARK_SRC_DEST_CALL);\n+\t      if (filter_flags)\n+\t\t{\n+\t\t  mark_set_resources (trial, &fset, 0, MARK_SRC_DEST_CALL);\n+\t\t  /* If the flags register is set, then it doesn't create RAW\n+\t\t     dependencies any longer and it also doesn't create WAW\n+\t\t     dependencies since it's dead after the original insn.  */\n+\t\t  if (TEST_HARD_REG_BIT (fset.regs, targetm.flags_regnum))\n+\t\t    {\n+\t\t      CLEAR_HARD_REG_BIT (needed.regs, targetm.flags_regnum);\n+\t\t      CLEAR_HARD_REG_BIT (fset.regs, targetm.flags_regnum);\n+\t\t    }\n+\t\t}\n \t      mark_referenced_resources (trial, &needed, true);\n \t    }\n \t}"}]}