{"sha": "06caf59d7ff9f9f97718a96cb23da50e5ba5edd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZjYWY1OWQ3ZmY5ZjlmOTc3MThhOTZjYjIzZGE1MGU1YmE1ZWRkOA==", "commit": {"author": {"name": "Kirill Yukhin", "email": "kirill.yukhin@intel.com", "date": "2015-09-22T11:10:21Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2015-09-22T11:10:21Z"}, "message": "AVX-512. Introduce SKylake server CPU.\n\ngcc/\n\t* config.gcc: Support \"skylake-avx512\".\n        * config/i386/i386-c.c (ix86_target_macros_internal): Handle\n        PROCESSOR_SKYLAKE_AVX512.\n        * config/i386/i386.c (m_SKYLAKE_AVX512): Define.\n        (processor_target_table): Add \"skylake-avx512\".\n        (PTA_SKYLAKE_AVX512): Define.\n\t(ix86_option_override_internal): Add \"skylake_avx512\".\n        (fold_builtin_cpu): Handle \"skylake_avx512\", add F_AVX512VL\n\tF_AVX512BW, F_AVX512DQ, F_AVX512ER, F_AVX512PF, F_AVX512CD.\n        * config/i386/i386.h (TARGET_SKYLAKE_AVX512): Define.\n        (processor_type): Add PROCESSOR_SKYLAKE_AVX512.\n\t* doc/invoke.texi (skylake-avx512): New.\n\nlibgcc/\n\t* libgcc/config/i386/cpuinfo.c (enum processor_features): Add\n\tFEATURE_AVX512VL, FEATURE_AVX512BW, FEATURE_AVX512DQ,\n\tFEATURE_AVX512CD, FEATURE_AVX512ER, FEATURE_AVX512PF.\n\t(get_available_features): Habdle new features.\n\ngcc/testsuite/\n        * gcc.target/i386/funcspec-5.c: Test avx512vl, avx512bw,\n\tavx512dq, avx512cd, avx512er, avx512pf and skylake-avx512.\n\t* gcc.target/i386/builtin_target.c: Test  avx512vl, avx512bw,\n\tavx512dq, avx512cd, avx512er and avx512pf.\n\nFrom-SVN: r228009", "tree": {"sha": "1c9c33c2bf4187c5dd8b7f478522a18fab88bd68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c9c33c2bf4187c5dd8b7f478522a18fab88bd68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06caf59d7ff9f9f97718a96cb23da50e5ba5edd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06caf59d7ff9f9f97718a96cb23da50e5ba5edd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06caf59d7ff9f9f97718a96cb23da50e5ba5edd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06caf59d7ff9f9f97718a96cb23da50e5ba5edd8/comments", "author": null, "committer": null, "parents": [{"sha": "7095d6f2ebbc17713a5ce18c45455476b402d166", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7095d6f2ebbc17713a5ce18c45455476b402d166", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7095d6f2ebbc17713a5ce18c45455476b402d166"}], "stats": {"total": 157, "additions": 132, "deletions": 25}, "files": [{"sha": "f6c1c80cb34e226a13036d64bfd3d4200d094277", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06caf59d7ff9f9f97718a96cb23da50e5ba5edd8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06caf59d7ff9f9f97718a96cb23da50e5ba5edd8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06caf59d7ff9f9f97718a96cb23da50e5ba5edd8", "patch": "@@ -1,3 +1,18 @@\n+2015-09-22  Kirill Yukhin <kirill.yukhin@intel.com>\n+\n+\t* config.gcc: Support \"skylake-avx512\".\n+        * config/i386/i386-c.c (ix86_target_macros_internal): Handle\n+        PROCESSOR_SKYLAKE_AVX512.\n+        * config/i386/i386.c (m_SKYLAKE_AVX512): Define.\n+        (processor_target_table): Add \"skylake-avx512\".\n+        (PTA_SKYLAKE_AVX512): Define.\n+\t(ix86_option_override_internal): Add \"skylake_avx512\".\n+        (fold_builtin_cpu): Handle \"skylake_avx512\", add F_AVX512VL\n+\tF_AVX512BW, F_AVX512DQ, F_AVX512ER, F_AVX512PF, F_AVX512CD.\n+        * config/i386/i386.h (TARGET_SKYLAKE_AVX512): Define.\n+        (processor_type): Add PROCESSOR_SKYLAKE_AVX512.\n+\t* doc/invoke.texi (skylake-avx512): New.\n+\n 2015-09-22  Kirill Yukhin <kirill.yukhin@intel.com>\n \n \t* gcc/config/i386/i386.md (define_insn \"kunpckhi\"): Fix"}, {"sha": "f060e2f0478ba4fbf7cad4c69c844aeebd5473c5", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06caf59d7ff9f9f97718a96cb23da50e5ba5edd8/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06caf59d7ff9f9f97718a96cb23da50e5ba5edd8/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=06caf59d7ff9f9f97718a96cb23da50e5ba5edd8", "patch": "@@ -594,8 +594,8 @@ pentium4 pentium4m pentiumpro prescott iamcu\"\n x86_64_archs=\"amdfam10 athlon64 athlon64-sse3 barcelona bdver1 bdver2 \\\n bdver3 bdver4 btver1 btver2 k8 k8-sse3 opteron opteron-sse3 nocona \\\n core2 corei7 corei7-avx core-avx-i core-avx2 atom slm nehalem westmere \\\n-sandybridge ivybridge haswell broadwell bonnell silvermont knl x86-64 \\\n-native\"\n+sandybridge ivybridge haswell broadwell bonnell silvermont knl \\\n+skylake-avx512 x86-64 native\"\n \n # Additional x86 processors supported by --with-cpu=.  Each processor\n # MUST be separated by exactly one space."}, {"sha": "5e583aeb376e580c62b5ef6d2b8dab29f974c7bc", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06caf59d7ff9f9f97718a96cb23da50e5ba5edd8/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06caf59d7ff9f9f97718a96cb23da50e5ba5edd8/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=06caf59d7ff9f9f97718a96cb23da50e5ba5edd8", "patch": "@@ -177,6 +177,10 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n       def_or_undef (parse_in, \"__knl\");\n       def_or_undef (parse_in, \"__knl__\");\n       break;\n+    case PROCESSOR_SKYLAKE_AVX512:\n+      def_or_undef (parse_in, \"__skylake_avx512\");\n+      def_or_undef (parse_in, \"__skylake_avx512__\");\n+      break;\n     /* use PROCESSOR_max to not set/unset the arch macro.  */\n     case PROCESSOR_max:\n       break;\n@@ -286,6 +290,9 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     case PROCESSOR_KNL:\n       def_or_undef (parse_in, \"__tune_knl__\");\n       break;\n+    case PROCESSOR_SKYLAKE_AVX512:\n+      def_or_undef (parse_in, \"__tune_skylake_avx512__\");\n+      break;\n     case PROCESSOR_IAMCU:\n       def_or_undef (parse_in, \"__tune_iamcu__\");\n       break;"}, {"sha": "8a26f68aca5320eae7adb4ab29b3f60ae6226082", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 41, "deletions": 21, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06caf59d7ff9f9f97718a96cb23da50e5ba5edd8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06caf59d7ff9f9f97718a96cb23da50e5ba5edd8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=06caf59d7ff9f9f97718a96cb23da50e5ba5edd8", "patch": "@@ -2098,6 +2098,7 @@ const struct processor_costs *ix86_cost = &pentium_cost;\n #define m_BONNELL (1<<PROCESSOR_BONNELL)\n #define m_SILVERMONT (1<<PROCESSOR_SILVERMONT)\n #define m_KNL (1<<PROCESSOR_KNL)\n+#define m_SKYLAKE_AVX512 (1<<PROCESSOT_SKYLAKE_AVX512)\n #define m_INTEL (1<<PROCESSOR_INTEL)\n \n #define m_GEODE (1<<PROCESSOR_GEODE)\n@@ -2567,6 +2568,7 @@ static const struct ptt processor_target_table[PROCESSOR_max] =\n   {\"bonnell\", &atom_cost, 16, 15, 16, 7, 16},\n   {\"silvermont\", &slm_cost, 16, 15, 16, 7, 16},\n   {\"knl\", &slm_cost, 16, 15, 16, 7, 16},\n+  {\"skylake-avx512\", &core_cost, 16, 10, 16, 10, 16},\n   {\"intel\", &intel_cost, 16, 15, 16, 7, 16},\n   {\"geode\", &geode_cost, 0, 0, 0, 0, 0},\n   {\"k6\", &k6_cost, 32, 7, 32, 7, 32},\n@@ -3286,6 +3288,9 @@ ix86_option_override_internal (bool main_args_p,\n   (PTA_HASWELL | PTA_ADX | PTA_PRFCHW | PTA_RDSEED)\n #define PTA_SKYLAKE \\\n   (PTA_BROADWELL | PTA_CLFLUSHOPT | PTA_XSAVEC | PTA_XSAVES)\n+#define PTA_SKYLAKE_AVX512 \\\n+  (PTA_SKYLAKE | PTA_AVX512F | PTA_AVX512CD | PTA_AVX512VL \\\n+   | PTA_AVX512BW | PTA_AVX512DQ)\n #define PTA_KNL \\\n   (PTA_BROADWELL | PTA_AVX512PF | PTA_AVX512ER | PTA_AVX512F | PTA_AVX512CD)\n #define PTA_BONNELL \\\n@@ -3349,6 +3354,7 @@ ix86_option_override_internal (bool main_args_p,\n       {\"core-avx2\", PROCESSOR_HASWELL, CPU_HASWELL, PTA_HASWELL},\n       {\"broadwell\", PROCESSOR_HASWELL, CPU_HASWELL, PTA_BROADWELL},\n       {\"skylake\", PROCESSOR_HASWELL, CPU_HASWELL, PTA_SKYLAKE},\n+      {\"skylake-avx512\", PROCESSOR_HASWELL, CPU_HASWELL, PTA_SKYLAKE_AVX512},\n       {\"bonnell\", PROCESSOR_BONNELL, CPU_ATOM, PTA_BONNELL},\n       {\"atom\", PROCESSOR_BONNELL, CPU_ATOM, PTA_BONNELL},\n       {\"silvermont\", PROCESSOR_SILVERMONT, CPU_SLM, PTA_SILVERMONT},\n@@ -35624,6 +35630,12 @@ fold_builtin_cpu (tree fndecl, tree *args)\n     F_BMI2,\n     F_AES,\n     F_PCLMUL,\n+    F_AVX512VL,\n+    F_AVX512BW,\n+    F_AVX512DQ,\n+    F_AVX512CD,\n+    F_AVX512ER,\n+    F_AVX512PF,\n     F_MAX\n   };\n \n@@ -35658,7 +35670,8 @@ fold_builtin_cpu (tree fndecl, tree *args)\n     M_INTEL_COREI7_IVYBRIDGE,\n     M_INTEL_COREI7_HASWELL,\n     M_INTEL_COREI7_BROADWELL,\n-    M_INTEL_COREI7_SKYLAKE\n+    M_INTEL_COREI7_SKYLAKE,\n+    M_INTEL_COREI7_SKYLAKE_AVX512\n   };\n \n   static struct _arch_names_table\n@@ -35681,6 +35694,7 @@ fold_builtin_cpu (tree fndecl, tree *args)\n       {\"haswell\", M_INTEL_COREI7_HASWELL},\n       {\"broadwell\", M_INTEL_COREI7_BROADWELL},\n       {\"skylake\", M_INTEL_COREI7_SKYLAKE},\n+      {\"skylake-avx512\", M_INTEL_COREI7_SKYLAKE_AVX512},\n       {\"bonnell\", M_INTEL_BONNELL},\n       {\"silvermont\", M_INTEL_SILVERMONT},\n       {\"knl\", M_INTEL_KNL},\n@@ -35704,26 +35718,32 @@ fold_builtin_cpu (tree fndecl, tree *args)\n     }\n   const isa_names_table[] =\n     {\n-      {\"cmov\",   F_CMOV},\n-      {\"mmx\",    F_MMX},\n-      {\"popcnt\", F_POPCNT},\n-      {\"sse\",    F_SSE},\n-      {\"sse2\",   F_SSE2},\n-      {\"sse3\",   F_SSE3},\n-      {\"ssse3\",  F_SSSE3},\n-      {\"sse4a\",  F_SSE4_A},\n-      {\"sse4.1\", F_SSE4_1},\n-      {\"sse4.2\", F_SSE4_2},\n-      {\"avx\",    F_AVX},\n-      {\"fma4\",   F_FMA4},\n-      {\"xop\",    F_XOP},\n-      {\"fma\",    F_FMA},\n-      {\"avx2\",   F_AVX2},\n-      {\"avx512f\",F_AVX512F},\n-      {\"bmi\",    F_BMI},\n-      {\"bmi2\",   F_BMI2},\n-      {\"aes\",    F_AES},\n-      {\"pclmul\", F_PCLMUL}\n+      {\"cmov\",    F_CMOV},\n+      {\"mmx\",     F_MMX},\n+      {\"popcnt\",  F_POPCNT},\n+      {\"sse\",     F_SSE},\n+      {\"sse2\",    F_SSE2},\n+      {\"sse3\",    F_SSE3},\n+      {\"ssse3\",   F_SSSE3},\n+      {\"sse4a\",   F_SSE4_A},\n+      {\"sse4.1\",  F_SSE4_1},\n+      {\"sse4.2\",  F_SSE4_2},\n+      {\"avx\",     F_AVX},\n+      {\"fma4\",    F_FMA4},\n+      {\"xop\",     F_XOP},\n+      {\"fma\",     F_FMA},\n+      {\"avx2\",    F_AVX2},\n+      {\"avx512f\", F_AVX512F},\n+      {\"bmi\",     F_BMI},\n+      {\"bmi2\",    F_BMI2},\n+      {\"aes\",     F_AES},\n+      {\"pclmul\",  F_PCLMUL},\n+      {\"avx512vl\",F_AVX512VL},\n+      {\"avx512bw\",F_AVX512BW},\n+      {\"avx512dq\",F_AVX512DQ},\n+      {\"avx512cd\",F_AVX512CD},\n+      {\"avx512er\",F_AVX512ER},\n+      {\"avx512pf\",F_AVX512PF},\n     };\n \n   tree __processor_model_type = build_processor_model_struct ();"}, {"sha": "46fbe42b5ca1bac7c3294e2807204bacdfccd291", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06caf59d7ff9f9f97718a96cb23da50e5ba5edd8/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06caf59d7ff9f9f97718a96cb23da50e5ba5edd8/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=06caf59d7ff9f9f97718a96cb23da50e5ba5edd8", "patch": "@@ -340,6 +340,7 @@ extern const struct processor_costs ix86_size_cost;\n #define TARGET_BONNELL (ix86_tune == PROCESSOR_BONNELL)\n #define TARGET_SILVERMONT (ix86_tune == PROCESSOR_SILVERMONT)\n #define TARGET_KNL (ix86_tune == PROCESSOR_KNL)\n+#define TARGET_SKYLAKE_AVX512 (ix86_tune == PROCESSOR_SKYLAKE_AVX512)\n #define TARGET_INTEL (ix86_tune == PROCESSOR_INTEL)\n #define TARGET_GENERIC (ix86_tune == PROCESSOR_GENERIC)\n #define TARGET_AMDFAM10 (ix86_tune == PROCESSOR_AMDFAM10)\n@@ -2290,6 +2291,7 @@ enum processor_type\n   PROCESSOR_BONNELL,\n   PROCESSOR_SILVERMONT,\n   PROCESSOR_KNL,\n+  PROCESSOR_SKYLAKE_AVX512,\n   PROCESSOR_INTEL,\n   PROCESSOR_GEODE,\n   PROCESSOR_K6,"}, {"sha": "5525e59849217c262fef4648319d745703a63421", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06caf59d7ff9f9f97718a96cb23da50e5ba5edd8/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06caf59d7ff9f9f97718a96cb23da50e5ba5edd8/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=06caf59d7ff9f9f97718a96cb23da50e5ba5edd8", "patch": "@@ -22242,6 +22242,12 @@ SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA,\n BMI, BMI2, F16C, RDSEED, ADCX, PREFETCHW, AVX512F, AVX512PF, AVX512ER and\n AVX512CD instruction set support.\n \n+@item skylake-avx512\n+Intel Skylake Server CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3,\n+SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA,\n+BMI, BMI2, F16C, RDSEED, ADCX, PREFETCHW, CLFLUSHOPT, XSAVEC, XSAVES, AVX512F,\n+AVX512VL, AVX512BW, AVX512DQ and AVX512CD instruction set support.\n+\n @item k6\n AMD K6 CPU with MMX instruction set support.\n "}, {"sha": "9d1b796ffaa5b62cd9bf46994171e096d13dab2b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06caf59d7ff9f9f97718a96cb23da50e5ba5edd8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06caf59d7ff9f9f97718a96cb23da50e5ba5edd8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=06caf59d7ff9f9f97718a96cb23da50e5ba5edd8", "patch": "@@ -1,3 +1,10 @@\n+2015-09-22  Kirill Yukhin <kirill.yukhin@intel.com>\n+\n+        * gcc.target/i386/funcspec-5.c: Test avx512vl, avx512bw,\n+\tavx512dq, avx512cd, avx512er, avx512pf and skylake-avx512.\n+\t* gcc.target/i386/builtin_target.c: Test  avx512vl, avx512bw,\n+\tavx512dq, avx512cd, avx512er and avx512pf.\n+\n 2015-09-22  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* gcc.target/aarch64/atomic-inst-ldadd.c: Add tests for"}, {"sha": "aff4559845c74675c7de85e72b3756653288b4d0", "filename": "gcc/testsuite/gcc.target/i386/builtin_target.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06caf59d7ff9f9f97718a96cb23da50e5ba5edd8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06caf59d7ff9f9f97718a96cb23da50e5ba5edd8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c?ref=06caf59d7ff9f9f97718a96cb23da50e5ba5edd8", "patch": "@@ -188,6 +188,18 @@ check_features (unsigned int ecx, unsigned int edx,\n \tassert (__builtin_cpu_supports (\"avx2\"));\n       if (ebx & bit_AVX512F)\n \tassert (__builtin_cpu_supports (\"avx512f\"));\n+      if (ebx & bit_AVX512VL)\n+\tassert (__builtin_cpu_supports (\"avx512vl\"));\n+      if (ebx & bit_AVX512CD)\n+\tassert (__builtin_cpu_supports (\"avx512cd\"));\n+      if (ebx & bit_AVX512PF)\n+\tassert (__builtin_cpu_supports (\"avx512pf\"));\n+      if (ebx & bit_AVX512ER)\n+\tassert (__builtin_cpu_supports (\"avx512er\"));\n+      if (ebx & bit_AVX512BW)\n+\tassert (__builtin_cpu_supports (\"avx512bw\"));\n+      if (ebx & bit_AVX512DQ)\n+\tassert (__builtin_cpu_supports (\"avx512dq\"));\n     }\n }\n "}, {"sha": "c43bc76cbd4cf6c84730bd0c079ae80529bfd655", "filename": "gcc/testsuite/gcc.target/i386/funcspec-5.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06caf59d7ff9f9f97718a96cb23da50e5ba5edd8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06caf59d7ff9f9f97718a96cb23da50e5ba5edd8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-5.c?ref=06caf59d7ff9f9f97718a96cb23da50e5ba5edd8", "patch": "@@ -25,6 +25,12 @@ extern void test_tbm (void)\t\t\t__attribute__((__target__(\"tbm\")));\n extern void test_avx (void)\t\t\t__attribute__((__target__(\"avx\")));\n extern void test_avx2 (void)\t\t\t__attribute__((__target__(\"avx2\")));\n extern void test_avx512f (void)\t\t\t__attribute__((__target__(\"avx512f\")));\n+extern void test_avx512vl(void)\t\t\t__attribute__((__target__(\"avx512vl\")));\n+extern void test_avx512bw(void)\t\t\t__attribute__((__target__(\"avx512bw\")));\n+extern void test_avx512dq(void)\t\t\t__attribute__((__target__(\"avx512dq\")));\n+extern void test_avx512er(void)\t\t\t__attribute__((__target__(\"avx512er\")));\n+extern void test_avx512pf(void)\t\t\t__attribute__((__target__(\"avx512pf\")));\n+extern void test_avx512cd(void)\t\t\t__attribute__((__target__(\"avx512cd\")));\n extern void test_bmi (void)\t\t\t__attribute__((__target__(\"bmi\")));\n extern void test_bmi2 (void)\t\t\t__attribute__((__target__(\"bmi2\")));\n \n@@ -50,6 +56,12 @@ extern void test_no_tbm (void)\t\t\t__attribute__((__target__(\"no-tbm\")));\n extern void test_no_avx (void)\t\t\t__attribute__((__target__(\"no-avx\")));\n extern void test_no_avx2 (void)   \t\t__attribute__((__target__(\"no-avx2\")));\n extern void test_no_avx512f (void)   \t\t__attribute__((__target__(\"no-avx512f\")));\n+extern void test_no_avx512vl(void)\t\t__attribute__((__target__(\"no-avx512vl\")));\n+extern void test_no_avx512bw(void)\t\t__attribute__((__target__(\"no-avx512bw\")));\n+extern void test_no_avx512dq(void)\t\t__attribute__((__target__(\"no-avx512dq\")));\n+extern void test_no_avx512er(void)\t\t__attribute__((__target__(\"no-avx512er\")));\n+extern void test_bo_avx512pf(void)\t\t__attribute__((__target__(\"no-avx512pf\")));\n+extern void test_no_avx512cd(void)\t\t__attribute__((__target__(\"no-avx512cd\")));\n extern void test_no_bmi (void)\t\t\t__attribute__((__target__(\"no-bmi\")));\n extern void test_no_bmi2 (void)\t\t\t__attribute__((__target__(\"no-bmi2\")));\n \n@@ -77,6 +89,7 @@ extern void test_arch_corei7 (void)\t\t__attribute__((__target__(\"arch=corei7\")));\n extern void test_arch_corei7_avx (void)\t\t__attribute__((__target__(\"arch=corei7-avx\")));\n extern void test_arch_core_avx2 (void)\t\t__attribute__((__target__(\"arch=core-avx2\")));\n extern void test_arch_knl (void)\t\t__attribute__((__target__(\"arch=knl\")));\n+extern void test_arch_skylake_avx512 (void)\t__attribute__((__target__(\"arch=skylake-avx512\")));\n extern void test_arch_geode (void)\t\t__attribute__((__target__(\"arch=geode\")));\n extern void test_arch_k6 (void)\t\t\t__attribute__((__target__(\"arch=k6\")));\n extern void test_arch_k6_2 (void)\t\t__attribute__((__target__(\"arch=k6-2\")));"}, {"sha": "878c29f56c4cb53bdb9a690d468546d1ab4f974a", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06caf59d7ff9f9f97718a96cb23da50e5ba5edd8/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06caf59d7ff9f9f97718a96cb23da50e5ba5edd8/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=06caf59d7ff9f9f97718a96cb23da50e5ba5edd8", "patch": "@@ -1,3 +1,10 @@\n+2015-09-22  Kirill Yukhin <kirill.yukhin@intel.com>\n+\n+\t* libgcc/config/i386/cpuinfo.c (enum processor_features): Add\n+\tFEATURE_AVX512VL, FEATURE_AVX512BW, FEATURE_AVX512DQ,\n+\tFEATURE_AVX512CD, FEATURE_AVX512ER, FEATURE_AVX512PF.\n+\t(get_available_features): Habdle new features.\n+\n 2015-09-21  James Bowman  <james.bowman@ftdichip.com>\n \n \t* config/ft32/crti-hw.S: Use __PMSIZE to allow configurable"}, {"sha": "ddb49e3ad9a00358c48753113e199fbbdf8b7351", "filename": "libgcc/config/i386/cpuinfo.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06caf59d7ff9f9f97718a96cb23da50e5ba5edd8/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06caf59d7ff9f9f97718a96cb23da50e5ba5edd8/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c?ref=06caf59d7ff9f9f97718a96cb23da50e5ba5edd8", "patch": "@@ -81,7 +81,7 @@ enum processor_subtypes\n   CPU_SUBTYPE_MAX\n };\n \n-/* ISA Features supported. */\n+/* ISA Features supported. New features have to be inserted at the end.  */\n \n enum processor_features\n {\n@@ -104,7 +104,13 @@ enum processor_features\n   FEATURE_BMI,\n   FEATURE_BMI2,\n   FEATURE_AES,\n-  FEATURE_PCLMUL\n+  FEATURE_PCLMUL,\n+  FEATURE_AVX512VL,\n+  FEATURE_AVX512BW,\n+  FEATURE_AVX512DQ,\n+  FEATURE_AVX512CD,\n+  FEATURE_AVX512ER,\n+  FEATURE_AVX512PF\n };\n \n struct __processor_model\n@@ -318,6 +324,18 @@ get_available_features (unsigned int ecx, unsigned int edx,\n         features |= (1 << FEATURE_BMI2);\n       if (ebx & bit_AVX512F)\n \tfeatures |= (1 << FEATURE_AVX512F);\n+      if (ebx & bit_AVX512VL)\n+\tfeatures |= (1 << FEATURE_AVX512VL);\n+      if (ebx & bit_AVX512BW)\n+\tfeatures |= (1 << FEATURE_AVX512BW);\n+      if (ebx & bit_AVX512DQ)\n+\tfeatures |= (1 << FEATURE_AVX512DQ);\n+      if (ebx & bit_AVX512CD)\n+\tfeatures |= (1 << FEATURE_AVX512CD);\n+      if (ebx & bit_AVX512PF)\n+\tfeatures |= (1 << FEATURE_AVX512PF);\n+      if (ebx & bit_AVX512ER)\n+\tfeatures |= (1 << FEATURE_AVX512ER);\n     }\n \n   unsigned int ext_level;"}]}