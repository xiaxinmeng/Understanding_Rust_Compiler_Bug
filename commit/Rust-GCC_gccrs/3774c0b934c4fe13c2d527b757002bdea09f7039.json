{"sha": "3774c0b934c4fe13c2d527b757002bdea09f7039", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc3NGMwYjkzNGM0ZmUxM2MyZDUyN2I3NTcwMDJiZGVhMDlmNzAzOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-05T06:02:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-06T02:22:40Z"}, "message": "cgraph: A COMDAT decl always has non-zero address.\n\nWe should be able to assume that a template instantiation or other COMDAT\nhas non-zero address even if MAKE_DECL_ONE_ONLY for the target sets\nDECL_WEAK and we haven't yet decided to emit a definition in this\ntranslation unit.\n\n\tPR c++/92003\n\t* symtab.c (symtab_node::nonzero_address): A DECL_COMDAT decl has\n\tnon-zero address even if weak and not yet defined.", "tree": {"sha": "56ada75be841738a061433b8991f0a71374b071c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56ada75be841738a061433b8991f0a71374b071c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3774c0b934c4fe13c2d527b757002bdea09f7039", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3774c0b934c4fe13c2d527b757002bdea09f7039", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3774c0b934c4fe13c2d527b757002bdea09f7039", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3774c0b934c4fe13c2d527b757002bdea09f7039/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8e165be65e967addb4913369d39a182c442eecc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8e165be65e967addb4913369d39a182c442eecc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8e165be65e967addb4913369d39a182c442eecc"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "c31b861fff8ae47c0655b4ea5e06091ea3c8e48a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3774c0b934c4fe13c2d527b757002bdea09f7039/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3774c0b934c4fe13c2d527b757002bdea09f7039/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3774c0b934c4fe13c2d527b757002bdea09f7039", "patch": "@@ -1,3 +1,9 @@\n+2020-02-05  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/92003\n+\t* symtab.c (symtab_node::nonzero_address): A DECL_COMDAT decl has\n+\tnon-zero address even if weak and not yet defined.\n+\n 2020-02-05  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/92765"}, {"sha": "a879c095a1a83709b4629d66c5d6a633d78ba8dc", "filename": "gcc/symtab.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3774c0b934c4fe13c2d527b757002bdea09f7039/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3774c0b934c4fe13c2d527b757002bdea09f7039/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=3774c0b934c4fe13c2d527b757002bdea09f7039", "patch": "@@ -2058,22 +2058,22 @@ symtab_node::nonzero_address ()\n      bind to NULL. This is on by default on embedded targets only.\n \n      Otherwise all non-WEAK symbols must be defined and thus non-NULL or\n-     linking fails.  Important case of WEAK we want to do well are comdats.\n-     Those are handled by later check for definition.\n+     linking fails.  Important case of WEAK we want to do well are comdats,\n+     which also must be defined somewhere.\n \n      When parsing, beware the cases when WEAK attribute is added later.  */\n-  if (!DECL_WEAK (decl)\n+  if ((!DECL_WEAK (decl) || DECL_COMDAT (decl))\n       && flag_delete_null_pointer_checks)\n     {\n       refuse_visibility_changes = true;\n       return true;\n     }\n \n-  /* If target is defined and either comdat or not extern, we know it will be\n+  /* If target is defined and not extern, we know it will be\n      output and thus it will bind to non-NULL.\n      Play safe for flag_delete_null_pointer_checks where weak definition may\n      be re-defined by NULL.  */\n-  if (definition && (!DECL_EXTERNAL (decl) || DECL_COMDAT (decl))\n+  if (definition && !DECL_EXTERNAL (decl)\n       && (flag_delete_null_pointer_checks || !DECL_WEAK (decl)))\n     {\n       if (!DECL_WEAK (decl))"}, {"sha": "644f9f7f893c210753cca75f3fcd121fb813c589", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-static13.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3774c0b934c4fe13c2d527b757002bdea09f7039/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-static13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3774c0b934c4fe13c2d527b757002bdea09f7039/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-static13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-static13.C?ref=3774c0b934c4fe13c2d527b757002bdea09f7039", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/92003\n+// { dg-do compile { target c++11 } }\n+// { dg-prune-output \"narrowing conversion\" }\n+\n+constexpr char const* get_c_str() { return \"abc\"; }\n+constexpr bool use_get_c_str_in_constexpr_context{get_c_str()}; // works\n+\n+template <char... Cs>\n+struct string {\n+  static constexpr char const* c_str() { return c; }\n+\n+ private:\n+  static constexpr char c[]{Cs..., '\\0'};\n+};\n+\n+constexpr char const* cstr{string<'a', 'b', 'c'>::c_str()};\n+constexpr bool use_cstr_in_constexpr_context{cstr}; // doesn't work"}]}