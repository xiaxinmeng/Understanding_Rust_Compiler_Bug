{"sha": "e18e56c76be35e6a799e07a01c24e0fff3eb1978", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE4ZTU2Yzc2YmUzNWU2YTc5OWUwN2EwMWMyNGUwZmZmM2ViMTk3OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-08-27T21:28:28Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-08-30T20:48:28Z"}, "message": "c++: Add warning about missing 'requires'\n\nI noticed that concepts-lambda14.C had two useless requires-expressions:\n\n  static_assert(requires { C<T>; });\n\nalways succeeds, because C<T> is always a valid expression for any type,\nregardless of whether C is satisfied for a particular type.  Presumably the\nuser means\n\n  static_assert(requires { requires C<T>; });\n\nto make the C<T> a nested-requirement.  Of course,\n\n  static_assert(C<T>);\n\nis much simpler and means the same thing; this is more relevant in the\nmiddle of a longer requires-expression, such as the bug this warning found\nin cmcstl2:\n\n  template<class I>\n  META_CONCEPT input_iterator =\n\t  input_or_output_iterator<I> &&\n\t  readable<I> &&\n\t  requires(I& i, const I& ci) {\n\t\t  typename iterator_category_t<I>;\n\t\t  derived_from<iterator_category_t<I>, input_iterator_tag>;\n\t\t  i++;\n\t  };\n\nwhere 'requires' is missing before 'derived_from'.\n\ngcc/ChangeLog:\n\n\t* doc/invoke.texi: Document -Wmissing-requires.\n\ngcc/c-family/ChangeLog:\n\n\t* c.opt: Add -Wmissing-requires.\n\ngcc/cp/ChangeLog:\n\n\t* parser.c (cp_parser_simple_requirement): Warn about missing\n\trequires.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-lambda14.C: Add expected warnings.", "tree": {"sha": "766fbe1a70cbdf41dd9b401101eda0e8451d02c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/766fbe1a70cbdf41dd9b401101eda0e8451d02c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e18e56c76be35e6a799e07a01c24e0fff3eb1978", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e18e56c76be35e6a799e07a01c24e0fff3eb1978", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e18e56c76be35e6a799e07a01c24e0fff3eb1978", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e18e56c76be35e6a799e07a01c24e0fff3eb1978/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9213ff13247739d6d335064a6b568278a872a991", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9213ff13247739d6d335064a6b568278a872a991", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9213ff13247739d6d335064a6b568278a872a991"}], "stats": {"total": 49, "additions": 47, "deletions": 2}, "files": [{"sha": "c5fe90003f28aa48670e2e5a3658d2f27cdd84c8", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18e56c76be35e6a799e07a01c24e0fff3eb1978/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18e56c76be35e6a799e07a01c24e0fff3eb1978/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=e18e56c76be35e6a799e07a01c24e0fff3eb1978", "patch": "@@ -839,6 +839,10 @@ Wmissing-field-initializers\n C ObjC C++ ObjC++ Var(warn_missing_field_initializers) Warning EnabledBy(Wextra)\n Warn about missing fields in struct initializers.\n \n+Wmissing-requires\n+C++ ObjC++ Var(warn_missing_requires) Init(1) Warning\n+Warn about likely missing requires keyword.\n+\n Wmultistatement-macros\n C ObjC C++ ObjC++ Var(warn_multistatement_macros) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn about unsafe macros expanding to multiple statements used as a body of a clause such as if, else, while, switch, or for."}, {"sha": "797e70ba5bbfd92ef1e1451ee4be4ef135a91943", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18e56c76be35e6a799e07a01c24e0fff3eb1978/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18e56c76be35e6a799e07a01c24e0fff3eb1978/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e18e56c76be35e6a799e07a01c24e0fff3eb1978", "patch": "@@ -29911,6 +29911,25 @@ cp_parser_simple_requirement (cp_parser *parser)\n   if (expr.get_location() == UNKNOWN_LOCATION)\n     expr.set_location (start);\n \n+  for (tree t = expr; ; )\n+    {\n+      if (TREE_CODE (t) == TRUTH_ANDIF_EXPR\n+\t  || TREE_CODE (t) == TRUTH_ORIF_EXPR)\n+\t{\n+\t  t = TREE_OPERAND (t, 0);\n+\t  continue;\n+\t}\n+      if (concept_check_p (t))\n+\t{\n+\t  gcc_rich_location richloc (get_start (start));\n+\t  richloc.add_fixit_insert_before (start, \"requires \");\n+\t  warning_at (&richloc, OPT_Wmissing_requires, \"testing \"\n+\t\t      \"if a concept-id is a valid expression; add \"\n+\t\t      \"%<requires%> to check satisfaction\");\n+\t}\n+      break;\n+    }\n+\n   return finish_simple_requirement (expr.get_location (), expr);\n }\n "}, {"sha": "8969bac664d31f4f96c5ef22e23bbfcfed72abc3", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18e56c76be35e6a799e07a01c24e0fff3eb1978/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18e56c76be35e6a799e07a01c24e0fff3eb1978/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e18e56c76be35e6a799e07a01c24e0fff3eb1978", "patch": "@@ -8752,6 +8752,28 @@ s x = @{ @};\n This warning is included in @option{-Wextra}.  To get other @option{-Wextra}\n warnings without this one, use @option{-Wextra -Wno-missing-field-initializers}.\n \n+@item -Wno-missing-requires\n+@opindex Wmissing-requires\n+@opindex Wno-missing-requires\n+\n+By default, the compiler warns about a concept-id appearing as a C++20 simple-requirement:\n+\n+@smallexample\n+bool satisfied = requires @{ C<T> @};\n+@end smallexample\n+\n+Here @samp{satisfied} will be true if @samp{C<T>} is a valid\n+expression, which it is for all T.  Presumably the user meant to write\n+\n+@smallexample\n+bool satisfied = requires @{ requires C<T> @};\n+@end smallexample\n+\n+so @samp{satisfied} is only true if concept @samp{C} is satisfied for\n+type @samp{T}.\n+\n+This warning can be disabled with @option{-Wno-missing-requires}.\n+\n @item -Wno-multichar\n @opindex Wno-multichar\n @opindex Wmultichar"}, {"sha": "02b6b6a843813048794b91bca82fb3bae0464ea7", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-lambda14.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18e56c76be35e6a799e07a01c24e0fff3eb1978/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18e56c76be35e6a799e07a01c24e0fff3eb1978/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda14.C?ref=e18e56c76be35e6a799e07a01c24e0fff3eb1978", "patch": "@@ -11,9 +11,9 @@ void foo() noexcept(!__is_same(T, void)) { }\n \n template<typename U>\n auto f() {\n-  return []<typename T>(T, bool a = requires { C<T>; }){\n+  return []<typename T>(T, bool a = requires { C<T>; }){ // { dg-warning Wmissing-requires }\n     static_assert(requires { requires C<U> && (C<T> || C<T>); }); // { dg-error \"assert\" }\n-    static_assert(requires { C<T>; });\n+    static_assert(requires { C<T>; }); // { dg-warning Wmissing-requires }\n     static_assert(requires { { foo<T>() } noexcept -> C; });\n     static_assert(!requires { typename T::blah; }); // { dg-error \"assert\" }\n     return 0;"}]}