{"sha": "a878dab7efe69318fa71d9c7249eaaf4e150b6c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg3OGRhYjdlZmU2OTMxOGZhNzFkOWM3MjQ5ZWFhZjRlMTUwYjZjOA==", "commit": {"author": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1993-05-01T10:48:31Z"}, "committer": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1993-05-01T10:48:31Z"}, "message": "(build_ivar_reference): Warn when a class method\nrefers to an instance variable.\n\nFrom-SVN: r4294", "tree": {"sha": "acd7a164e29bdbeee353718f6085a6347cc53882", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acd7a164e29bdbeee353718f6085a6347cc53882"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a878dab7efe69318fa71d9c7249eaaf4e150b6c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a878dab7efe69318fa71d9c7249eaaf4e150b6c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a878dab7efe69318fa71d9c7249eaaf4e150b6c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a878dab7efe69318fa71d9c7249eaaf4e150b6c8/comments", "author": null, "committer": null, "parents": [{"sha": "257e61ed70f52c514f9486ee4d37a501245a069b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/257e61ed70f52c514f9486ee4d37a501245a069b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/257e61ed70f52c514f9486ee4d37a501245a069b"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "0968f1e3bbdd007cfa5c3f664ef5b37b277ae234", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a878dab7efe69318fa71d9c7249eaaf4e150b6c8/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a878dab7efe69318fa71d9c7249eaaf4e150b6c8/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=a878dab7efe69318fa71d9c7249eaaf4e150b6c8", "patch": "@@ -4739,7 +4739,20 @@ build_ivar_reference (id)\n      tree id;\n {\n   if (TREE_CODE (method_context) == CLASS_METHOD_DECL)\n-    TREE_TYPE (self_decl) = instance_type; /* cast */\n+    {\n+      /* Historically, a class method that produced objects (factory\n+\t method) would assign `self' to the instance that it\n+\t allocated.  This would effectively turn the class method into\n+\t an instance method.  Following this assignment, the instance\n+\t variables could be accessed.  That practice, while safe,\n+\t violates the simple rule that a class method should not refer\n+\t to an instance variable.  It's better to catch the cases\n+\t where this is done unknowingly than to support the above\n+\t paradigm.  */\n+      warning (\"instance variable `%s' accessed in class method\",\n+\t       IDENTIFIER_POINTER (id));\n+      TREE_TYPE (self_decl) = instance_type; /* cast */\n+    }\n \n   return build_component_ref (build_indirect_ref (self_decl, \"->\"), id);\n }"}]}