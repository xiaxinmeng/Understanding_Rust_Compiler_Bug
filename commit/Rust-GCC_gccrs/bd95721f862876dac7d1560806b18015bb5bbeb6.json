{"sha": "bd95721f862876dac7d1560806b18015bb5bbeb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ5NTcyMWY4NjI4NzZkYWM3ZDE1NjA4MDZiMTgwMTViYjViYmViNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2010-08-05T19:41:31Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2010-08-05T19:41:31Z"}, "message": "Replace exact_log2(x & -x) in favor of more direct computation.\n\n\t* toplev.h (ctz_hwi, clz_hwi, ffs_hwi): New.\n\t(floor_log2): Use clz_hwi.\n\t(exact_log2): Use ctz_hwi.\n\t* toplev.c (ctz_hwi, clz_hwi, ffs_hwi): New.\n\t* builtins.c (fold_builtin_bitop): Use them.\n\t* simplify-rtx.c (simplify_const_unary_operation): Likewise.\n\t* combine.c (get_pos_from_mask): Use ctz_hwi.\n\t* double-int.c (double_int_ctz): Likewise.\n\t* explow.c (force_reg): Likewise.\n\t* tree.h (SET_DECL_OFFSET_ALIGN): Use ffs_hwi.\n\nFrom-SVN: r162920", "tree": {"sha": "ebb0bcbba694540435097fb9c41ec0f70c57ab41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebb0bcbba694540435097fb9c41ec0f70c57ab41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd95721f862876dac7d1560806b18015bb5bbeb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd95721f862876dac7d1560806b18015bb5bbeb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd95721f862876dac7d1560806b18015bb5bbeb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd95721f862876dac7d1560806b18015bb5bbeb6/comments", "author": null, "committer": null, "parents": [{"sha": "55b324a67cf91568372f4e93c7dae01a572de9f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55b324a67cf91568372f4e93c7dae01a572de9f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55b324a67cf91568372f4e93c7dae01a572de9f4"}], "stats": {"total": 156, "additions": 109, "deletions": 47}, "files": [{"sha": "b7de0ed4ebbbe5a171a1dfb7041289071d639f8f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd95721f862876dac7d1560806b18015bb5bbeb6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd95721f862876dac7d1560806b18015bb5bbeb6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd95721f862876dac7d1560806b18015bb5bbeb6", "patch": "@@ -1,3 +1,16 @@\n+2010-08-05  Richard Henderson  <rth@redhat.com>\n+\n+\t* toplev.h (ctz_hwi, clz_hwi, ffs_hwi): New.\n+\t(floor_log2): Use clz_hwi.\n+\t(exact_log2): Use ctz_hwi.\n+\t* toplev.c (ctz_hwi, clz_hwi, ffs_hwi): New.\n+\t* builtins.c (fold_builtin_bitop): Use them.\n+\t* simplify-rtx.c (simplify_const_unary_operation): Likewise.\n+\t* combine.c (get_pos_from_mask): Use ctz_hwi.\n+\t* double-int.c (double_int_ctz): Likewise.\n+\t* explow.c (force_reg): Likewise.\n+\t* tree.h (SET_DECL_OFFSET_ALIGN): Use ffs_hwi.\n+\n 2010-08-05  Richard Henderson  <rth@redhat.com>\n \n \tPR target/45189"}, {"sha": "096fec62ee39749e111f80e0749bc77e221da3f3", "filename": "gcc/builtins.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd95721f862876dac7d1560806b18015bb5bbeb6/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd95721f862876dac7d1560806b18015bb5bbeb6/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=bd95721f862876dac7d1560806b18015bb5bbeb6", "patch": "@@ -7676,9 +7676,9 @@ fold_builtin_bitop (tree fndecl, tree arg)\n \t{\n \tCASE_INT_FN (BUILT_IN_FFS):\n \t  if (lo != 0)\n-\t    result = exact_log2 (lo & -lo) + 1;\n+\t    result = ffs_hwi (lo);\n \t  else if (hi != 0)\n-\t    result = HOST_BITS_PER_WIDE_INT + exact_log2 (hi & -hi) + 1;\n+\t    result = HOST_BITS_PER_WIDE_INT + ffs_hwi (hi);\n \t  else\n \t    result = 0;\n \t  break;\n@@ -7694,9 +7694,9 @@ fold_builtin_bitop (tree fndecl, tree arg)\n \n \tCASE_INT_FN (BUILT_IN_CTZ):\n \t  if (lo != 0)\n-\t    result = exact_log2 (lo & -lo);\n+\t    result = ctz_hwi (lo);\n \t  else if (hi != 0)\n-\t    result = HOST_BITS_PER_WIDE_INT + exact_log2 (hi & -hi);\n+\t    result = HOST_BITS_PER_WIDE_INT + ctz_hwi (hi);\n \t  else if (! CTZ_DEFINED_VALUE_AT_ZERO (TYPE_MODE (type), result))\n \t    result = width;\n \t  break;\n@@ -7706,15 +7706,15 @@ fold_builtin_bitop (tree fndecl, tree arg)\n \t  while (lo)\n \t    result++, lo &= lo - 1;\n \t  while (hi)\n-\t    result++, hi &= hi - 1;\n+\t    result++, hi &= (unsigned HOST_WIDE_INT) hi - 1;\n \t  break;\n \n \tCASE_INT_FN (BUILT_IN_PARITY):\n \t  result = 0;\n \t  while (lo)\n \t    result++, lo &= lo - 1;\n \t  while (hi)\n-\t    result++, hi &= hi - 1;\n+\t    result++, hi &= (unsigned HOST_WIDE_INT) hi - 1;\n \t  result &= 1;\n \t  break;\n "}, {"sha": "41a0ec1dcb6fa7e015f1ee8861e86832d25204fc", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd95721f862876dac7d1560806b18015bb5bbeb6/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd95721f862876dac7d1560806b18015bb5bbeb6/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=bd95721f862876dac7d1560806b18015bb5bbeb6", "patch": "@@ -7436,7 +7436,7 @@ static int\n get_pos_from_mask (unsigned HOST_WIDE_INT m, unsigned HOST_WIDE_INT *plen)\n {\n   /* Get the bit number of the first 1 bit from the right, -1 if none.  */\n-  int pos = exact_log2 (m & -m);\n+  int pos = m ? ctz_hwi (m) : -1;\n   int len = 0;\n \n   if (pos >= 0)"}, {"sha": "cb63f856df34348671f28c6de8c3e6da625b4030", "filename": "gcc/double-int.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd95721f862876dac7d1560806b18015bb5bbeb6/gcc%2Fdouble-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd95721f862876dac7d1560806b18015bb5bbeb6/gcc%2Fdouble-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.c?ref=bd95721f862876dac7d1560806b18015bb5bbeb6", "patch": "@@ -859,15 +859,7 @@ double_int_ctz (double_int a)\n   unsigned bits = a.low ? 0 : HOST_BITS_PER_WIDE_INT;\n   if (!w)\n     return HOST_BITS_PER_DOUBLE_INT;\n-#if (GCC_VERSION >= 3004)\n-  bits += CTZ_HWI (w);\n-#else\n-  while (!(w & 1))\n-    {\n-      w >>= 1;\n-      bits += 1;\n-    }\n-#endif\n+  bits += ctz_hwi (w);\n   return bits;\n }\n "}, {"sha": "6f60b2e587bf7524050ca1dc14ff075d036e5c72", "filename": "gcc/explow.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd95721f862876dac7d1560806b18015bb5bbeb6/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd95721f862876dac7d1560806b18015bb5bbeb6/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=bd95721f862876dac7d1560806b18015bb5bbeb6", "patch": "@@ -707,9 +707,13 @@ force_reg (enum machine_mode mode, rtx x)\n \tif (SYMBOL_REF_DECL (s) && DECL_P (SYMBOL_REF_DECL (s)))\n \t  sa = DECL_ALIGN (SYMBOL_REF_DECL (s));\n \n-\tca = exact_log2 (INTVAL (c) & -INTVAL (c)) * BITS_PER_UNIT;\n-\n-\talign = MIN (sa, ca);\n+\tif (INTVAL (c) == 0)\n+\t  align = sa;\n+\telse\n+\t  {\n+\t    ca = ctz_hwi (INTVAL (c)) * BITS_PER_UNIT;\n+\t    align = MIN (sa, ca);\n+\t  }\n       }\n \n     if (align || (MEM_P (x) && MEM_POINTER (x)))"}, {"sha": "a7a91e5d50f8719701848ce6813ae3dd0da6b4fe", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd95721f862876dac7d1560806b18015bb5bbeb6/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd95721f862876dac7d1560806b18015bb5bbeb6/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=bd95721f862876dac7d1560806b18015bb5bbeb6", "patch": "@@ -1197,10 +1197,8 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n \t  break;\n \n \tcase FFS:\n-\t  /* Don't use ffs here.  Instead, get low order bit and then its\n-\t     number.  If arg0 is zero, this will return 0, as desired.  */\n \t  arg0 &= GET_MODE_MASK (mode);\n-\t  val = exact_log2 (arg0 & (- arg0)) + 1;\n+\t  val = ffs_hwi (arg0);\n \t  break;\n \n \tcase CLZ:\n@@ -1221,7 +1219,7 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n \t\tval = GET_MODE_BITSIZE (mode);\n \t    }\n \t  else\n-\t    val = exact_log2 (arg0 & -arg0);\n+\t    val = ctz_hwi (arg0);\n \t  break;\n \n \tcase POPCOUNT:\n@@ -1351,15 +1349,12 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n \n \tcase FFS:\n \t  hv = 0;\n-\t  if (l1 == 0)\n-\t    {\n-\t      if (h1 == 0)\n-\t\tlv = 0;\n-\t      else\n-\t\tlv = HOST_BITS_PER_WIDE_INT + exact_log2 (h1 & -h1) + 1;\n-\t    }\n+\t  if (l1 != 0)\n+\t    lv = ffs_hwi (l1);\n+\t  else if (h1 != 0)\n+\t    lv = HOST_BITS_PER_WIDE_INT + ffs_hwi (h1);\n \t  else\n-\t    lv = exact_log2 (l1 & -l1) + 1;\n+\t    lv = 0;\n \t  break;\n \n \tcase CLZ:\n@@ -1376,9 +1371,9 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n \tcase CTZ:\n \t  hv = 0;\n \t  if (l1 != 0)\n-\t    lv = exact_log2 (l1 & -l1);\n+\t    lv = ctz_hwi (l1);\n \t  else if (h1 != 0)\n-\t    lv = HOST_BITS_PER_WIDE_INT + exact_log2 (h1 & -h1);\n+\t    lv = HOST_BITS_PER_WIDE_INT + ctz_hwi (h1);\n \t  else if (! CTZ_DEFINED_VALUE_AT_ZERO (mode, lv))\n \t    lv = GET_MODE_BITSIZE (mode);\n \t  break;"}, {"sha": "ff824662a226fd01c278d5d270ec227fd77402ca", "filename": "gcc/toplev.c", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd95721f862876dac7d1560806b18015bb5bbeb6/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd95721f862876dac7d1560806b18015bb5bbeb6/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=bd95721f862876dac7d1560806b18015bb5bbeb6", "patch": "@@ -484,9 +484,9 @@ set_random_seed (const char *val)\n \n #if GCC_VERSION < 3004\n \n-/* The functions floor_log2 and exact_log2 are defined as inline\n-   functions in toplev.h if GCC_VERSION >= 3004.  The definitions here\n-   are used for older versions of gcc.  */\n+/* The functions clz_hwi, ctz_hwi, ffs_hwi, floor_log2 and exact_log2\n+   are defined as inline functions in toplev.h if GCC_VERSION >= 3004.\n+   The definitions here are used for older versions of gcc.  */\n \n /* Given X, an unsigned number, return the largest int Y such that 2**Y <= X.\n    If X is 0, return -1.  */\n@@ -530,6 +530,32 @@ exact_log2 (unsigned HOST_WIDE_INT x)\n   return floor_log2 (x);\n }\n \n+/* Given X, an unsigned number, return the number of least significant bits\n+   that are zero.  When X == 0, the result is the word size.  */\n+\n+int\n+ctz_hwi (unsigned HOST_WIDE_INT x)\n+{\n+  return x ? floor_log2 (x & -x) : HOST_BITS_PER_WIDE_INT;\n+}\n+\n+/* Similarly for most significant bits.  */\n+\n+int\n+clz_hwi (unsigned HOST_WIDE_INT x)\n+{\n+  return HOST_BITS_PER_WIDE_INT - 1 - floor_log2(x);\n+}\n+\n+/* Similar to ctz_hwi, except that the least significant bit is numbered\n+   starting from 1, and X == 0 yields 0.  */\n+\n+int\n+ffs_hwi (unsigned HOST_WIDE_INT x)\n+{\n+  return 1 + floor_log2 (x & -x);\n+}\n+\n #endif /* GCC_VERSION < 3004 */\n \n /* Handler for fatal signals, such as SIGSEGV.  These are transformed"}, {"sha": "6de27a092bf89a152224a515c9187999e72b36dd", "filename": "gcc/toplev.h", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd95721f862876dac7d1560806b18015bb5bbeb6/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd95721f862876dac7d1560806b18015bb5bbeb6/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=bd95721f862876dac7d1560806b18015bb5bbeb6", "patch": "@@ -111,6 +111,10 @@ extern bool fast_math_flags_struct_set_p (struct cl_optimization *);\n /* Inline versions of the above for speed.  */\n #if GCC_VERSION < 3004\n \n+extern int clz_hwi (unsigned HOST_WIDE_INT x);\n+extern int ctz_hwi (unsigned HOST_WIDE_INT x);\n+extern int ffs_hwi (unsigned HOST_WIDE_INT x);\n+\n /* Return log2, or -1 if not exact.  */\n extern int exact_log2                  (unsigned HOST_WIDE_INT);\n \n@@ -119,27 +123,57 @@ extern int floor_log2                  (unsigned HOST_WIDE_INT);\n \n #else /* GCC_VERSION >= 3004 */\n \n+/* For convenience, define 0 -> word_size.  */\n+static inline int\n+clz_hwi (unsigned HOST_WIDE_INT x)\n+{\n+  if (x == 0)\n+    return HOST_BITS_PER_WIDE_INT;\n+# if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG\n+  return __builtin_clzl (x);\n+# elif HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONGLONG\n+  return __builtin_clzll (x);\n+# else\n+  return __builtin_clz (x);\n+# endif\n+}\n+\n+static inline int\n+ctz_hwi (unsigned HOST_WIDE_INT x)\n+{\n+  if (x == 0)\n+    return HOST_BITS_PER_WIDE_INT;\n+# if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG\n+  return __builtin_ctzl (x);\n+# elif HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONGLONG\n+  return __builtin_ctzll (x);\n+# else\n+  return __builtin_ctz (x);\n+# endif\n+}\n+\n+static inline int\n+ffs_hwi (unsigned HOST_WIDE_INT x)\n+{\n # if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG\n-#  define CLZ_HWI __builtin_clzl\n-#  define CTZ_HWI __builtin_ctzl\n+  return __builtin_ffsl (x);\n # elif HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONGLONG\n-#  define CLZ_HWI __builtin_clzll\n-#  define CTZ_HWI __builtin_ctzll\n+  return __builtin_ffsll (x);\n # else\n-#  define CLZ_HWI __builtin_clz\n-#  define CTZ_HWI __builtin_ctz\n+  return __builtin_ffs (x);\n # endif\n+}\n \n static inline int\n floor_log2 (unsigned HOST_WIDE_INT x)\n {\n-  return x ? HOST_BITS_PER_WIDE_INT - 1 - (int) CLZ_HWI (x) : -1;\n+  return HOST_BITS_PER_WIDE_INT - 1 - clz_hwi (x);\n }\n \n static inline int\n exact_log2 (unsigned HOST_WIDE_INT x)\n {\n-  return x == (x & -x) && x ? (int) CTZ_HWI (x) : -1;\n+  return x == (x & -x) && x ? ctz_hwi (x) : -1;\n }\n \n #endif /* GCC_VERSION >= 3004 */"}, {"sha": "931155ca310dd16894b2b670b0d2d0650407a5b2", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd95721f862876dac7d1560806b18015bb5bbeb6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd95721f862876dac7d1560806b18015bb5bbeb6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=bd95721f862876dac7d1560806b18015bb5bbeb6", "patch": "@@ -2850,9 +2850,7 @@ struct GTY(()) tree_decl_with_rtl {\n \n /* Specify that DECL_ALIGN(NODE) is a multiple of X.  */\n #define SET_DECL_OFFSET_ALIGN(NODE, X) \\\n-  (FIELD_DECL_CHECK (NODE)->decl_common.off_align = exact_log2 ((X) & -(X)))\n-/* 1 if the alignment for this type was requested by \"aligned\" attribute,\n-   0 if it is the default for this type.  */\n+  (FIELD_DECL_CHECK (NODE)->decl_common.off_align = ffs_hwi (X) - 1)\n \n /* For FIELD_DECLS, DECL_FCONTEXT is the *first* baseclass in\n    which this FIELD_DECL is defined.  This information is needed when"}]}