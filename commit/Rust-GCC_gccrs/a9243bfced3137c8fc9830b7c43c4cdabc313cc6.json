{"sha": "a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkyNDNiZmNlZDMxMzdjOGZjOTgzMGI3YzQzYzRjZGFiYzMxM2NjNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-05-26T10:42:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-05-26T10:42:43Z"}, "message": "system.h: Define __STDC_FORMAT_MACROS before including inttypes.h.\n\n2014-05-23  Richard Biener  <rguenther@suse.de>\n\n\t* system.h: Define __STDC_FORMAT_MACROS before\n\tincluding inttypes.h.\n\t* hwint.h (HOST_WIDEST_INT, HOST_BITS_PER_WIDEST_INT,\n\tHOST_WIDEST_INT_PRINT, HOST_WIDEST_INT_PRINT_DEC,\n\tHOST_WIDEST_INT_PRINT_DEC_C, HOST_WIDEST_INT_PRINT_UNSIGNED,\n\tHOST_WIDEST_INT_PRINT_HEX, HOST_WIDEST_INT_PRINT_DOUBLE_HEX,\n\tHOST_WIDEST_INT_C): Remove.\n\t(PRId64, PRIi64, PRIo64, PRIu64, PRIx64, PRIX64): Define\n\tif C99 inttypes.h is not available.\n\n\t* coretypes.h (gcov_type, gcov_type_unsigned): Use [u]int64_t.\n\t* gcov-io.h (gcov_type, gcov_type_unsigned): Likewise.\n\t* gcov-io.c (gcov_histo_index): Drop non-64bit hwi case.\n\t* cfgloop.h (struct niter_desc): Use uint64_t for niter field.\n\t* bitmap.c (struct bitmap_descriptor_d): Use uint64_t for counters.\n\t(struct output_info): Likewise.\n\t(print_statistics): Adjust.\n\t(dump_bitmap_statistics): Likewise.\n\t* bt-load.c (migrate_btr_defs): Print with PRId64.\n\t* cfg.c (dump_edge_info, dump_bb_info): Likewise.\n\t(MAX_SAFE_MULTIPLIER): Adjust.\n\t* cfghooks.c (dump_bb_for_graph): Print with PRId64.\n\t* cgraph.c (cgraph_redirect_edge_call_stmt_to_callee,\n\tdump_cgraph_node): Likewise.\n\t* final.c (dump_basic_block_info): Likewise.\n\t* gcov-dump.c (tag_counters, tag_summary, dump_working_sets): Likewise.\n\t* gcov.c (format_gcov): Likewise.\n\t* ipa-cp.c (good_cloning_opportunity_p): Likewise.  Use int64_t\n\tfor calculation.\n\t(get_clone_agg_value): Use HOST_WIDE_INT for offset.\n\t* ipa-inline.c (compute_max_insns): Use int64_t for calcuation.\n\t(inline_small_functions, dump_overall_stats, dump_inline_stats):\n\tUse PRId64 for dumping.\n\t* ipa-profile.c (dump_histogram, ipa_profile): Likewise.\n\t* ira-color.c (struct allocno_hard_regs): Use int64_t for cost.\n\t(add_allocno_hard_regs): Adjust.\n\t* loop-doloop.c (doloop_modify): Print using PRId64.\n\t* loop-iv.c (inverse): Compute in uint64_t.\n\t(determine_max_iter, iv_number_of_iterations): Likewise.\n\t* loop-unroll.c (decide_peel_completely, decide_peel_simple):\n\tPrint using PRId64.\n\t* lto-streamer-out.c (write_symbol): Use uint64_t.\n\t* mcf.c (CAP_INFINITY): Use int64_t maximum.\n\t(dump_fixup_edge, create_fixup_graph, cancel_negative_cycle,\n\tfind_max_flow, adjust_cfg_counts): Use int64_t and dump with PRId64.\n\t* modulo-sched.c (const_iteration_count): Use int64_t.\n\t(sms_schedule): Dump using PRId64.\n\t* predict.c (dump_prediction): Likewise.\n\t* pretty-print.h (pp_widest_integer): Remove.\n\t* profile.c (get_working_sets, is_edge_inconsistent,\n\tis_inconsistent, read_profile_edge_counts): Dump using PRId64.\n\t* tree-pretty-print.c (pp_double_int): Remove case handling\n\tHOST_BITS_PER_DOUBLE_INT == HOST_BITS_PER_WIDEST_INT.\n\t* tree-ssa-math-opts.c (struct symbolic_number): Use uint64_t\n\tand adjust users.\n\t(pass_optimize_bswap::execute): Remove restriction on hosts.\n\t* tree-streamer-in.c (streamer_alloc_tree): Use HOST_WIDE_INT.\n\t* tree-streamer-out.c (streamer_write_tree_header): Likewise.\n\t* tree.c (widest_int_cst_value): Remove.\n\t* tree.h (widest_int_cst_value): Likewise.\n\t* value-prof.c (dump_histogram_value): Print using PRId64.\n\t* gengtype.c (main): Also inject int64_t.\n\t* ggc-page.c (struct max_alignment): Use int64_t.\n\t* alloc-pool.c (struct allocation_object_def): Likewise.\n\t* ira-conflicts.c (build_conflict_bit_table): Use uint64_t\n\tfor computation.\n\t* doc/tm.texi.in: Remove reference to HOST_WIDEST_INT.\n\t* doc/tm.texi: Regenerated.\n\t* gengtype-lex.l (IWORD): Handle [u]int64_t.\n\t* config/sh/sh.c (expand_cbranchdi4): Use gcov_type.\n\t* config/mmix/mmix-protos.h (mmix_intval, mmix_shiftable_wyde_value,\n\tmmix_output_register_setting): Use [u]int64_t in prototypes.\n\t* config/mmix/mmix.c (mmix_print_operand, mmix_output_register_setting,\n\tmmix_shiftable_wyde_value, mmix_output_shiftvalue_op_from_str,\n\tmmix_output_octa, mmix_output_shifted_value): Adjust.\n\t(mmix_intval): Adjust.  Remove unreachable case.\n\t* config/mmix/mmix.md (*nonlocal_goto_receiver_expanded): Use\n\tint64_t.\n\n\tlto/\n\t* lto.c (lto_parse_hex): Use int64_t.\n\t(lto_resolution_read): Likewise.\n\nFrom-SVN: r210931", "tree": {"sha": "fde582b2dcf87e56b9531e02e1574d3f2588c798", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fde582b2dcf87e56b9531e02e1574d3f2588c798"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "97563bc895f753bab46f97c1843167faae1a6c06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97563bc895f753bab46f97c1843167faae1a6c06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97563bc895f753bab46f97c1843167faae1a6c06"}], "stats": {"total": 749, "additions": 381, "deletions": 368}, "files": [{"sha": "9d1352ba4bbed3eab9249d5ab897bd2f335222d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -1,3 +1,83 @@\n+2014-05-26  Richard Biener  <rguenther@suse.de>\n+\n+\t* system.h: Define __STDC_FORMAT_MACROS before\n+\tincluding inttypes.h.\n+\t* hwint.h (HOST_WIDEST_INT, HOST_BITS_PER_WIDEST_INT,\n+\tHOST_WIDEST_INT_PRINT, HOST_WIDEST_INT_PRINT_DEC,\n+\tHOST_WIDEST_INT_PRINT_DEC_C, HOST_WIDEST_INT_PRINT_UNSIGNED,\n+\tHOST_WIDEST_INT_PRINT_HEX, HOST_WIDEST_INT_PRINT_DOUBLE_HEX,\n+\tHOST_WIDEST_INT_C): Remove.\n+\t(PRId64, PRIi64, PRIo64, PRIu64, PRIx64, PRIX64): Define\n+\tif C99 inttypes.h is not available.\n+\t* coretypes.h (gcov_type, gcov_type_unsigned): Use [u]int64_t.\n+\t* gcov-io.h (gcov_type, gcov_type_unsigned): Likewise.\n+\t* gcov-io.c (gcov_histo_index): Drop non-64bit hwi case.\n+\t* cfgloop.h (struct niter_desc): Use uint64_t for niter field.\n+\t* bitmap.c (struct bitmap_descriptor_d): Use uint64_t for counters.\n+\t(struct output_info): Likewise.\n+\t(print_statistics): Adjust.\n+\t(dump_bitmap_statistics): Likewise.\n+\t* bt-load.c (migrate_btr_defs): Print with PRId64.\n+\t* cfg.c (dump_edge_info, dump_bb_info): Likewise.\n+\t(MAX_SAFE_MULTIPLIER): Adjust.\n+\t* cfghooks.c (dump_bb_for_graph): Print with PRId64.\n+\t* cgraph.c (cgraph_redirect_edge_call_stmt_to_callee,\n+\tdump_cgraph_node): Likewise.\n+\t* final.c (dump_basic_block_info): Likewise.\n+\t* gcov-dump.c (tag_counters, tag_summary, dump_working_sets): Likewise.\n+\t* gcov.c (format_gcov): Likewise.\n+\t* ipa-cp.c (good_cloning_opportunity_p): Likewise.  Use int64_t\n+\tfor calculation.\n+\t(get_clone_agg_value): Use HOST_WIDE_INT for offset.\n+\t* ipa-inline.c (compute_max_insns): Use int64_t for calcuation.\n+\t(inline_small_functions, dump_overall_stats, dump_inline_stats):\n+\tUse PRId64 for dumping.\n+\t* ipa-profile.c (dump_histogram, ipa_profile): Likewise.\n+\t* ira-color.c (struct allocno_hard_regs): Use int64_t for cost.\n+\t(add_allocno_hard_regs): Adjust.\n+\t* loop-doloop.c (doloop_modify): Print using PRId64.\n+\t* loop-iv.c (inverse): Compute in uint64_t.\n+\t(determine_max_iter, iv_number_of_iterations): Likewise.\n+\t* loop-unroll.c (decide_peel_completely, decide_peel_simple):\n+\tPrint using PRId64.\n+\t* lto-streamer-out.c (write_symbol): Use uint64_t.\n+\t* mcf.c (CAP_INFINITY): Use int64_t maximum.\n+\t(dump_fixup_edge, create_fixup_graph, cancel_negative_cycle,\n+\tfind_max_flow, adjust_cfg_counts): Use int64_t and dump with PRId64.\n+\t* modulo-sched.c (const_iteration_count): Use int64_t.\n+\t(sms_schedule): Dump using PRId64.\n+\t* predict.c (dump_prediction): Likewise.\n+\t* pretty-print.h (pp_widest_integer): Remove.\n+\t* profile.c (get_working_sets, is_edge_inconsistent,\n+\tis_inconsistent, read_profile_edge_counts): Dump using PRId64.\n+\t* tree-pretty-print.c (pp_double_int): Remove case handling\n+\tHOST_BITS_PER_DOUBLE_INT == HOST_BITS_PER_WIDEST_INT.\n+\t* tree-ssa-math-opts.c (struct symbolic_number): Use uint64_t\n+\tand adjust users.\n+\t(pass_optimize_bswap::execute): Remove restriction on hosts.\n+\t* tree-streamer-in.c (streamer_alloc_tree): Use HOST_WIDE_INT.\n+\t* tree-streamer-out.c (streamer_write_tree_header): Likewise.\n+\t* tree.c (widest_int_cst_value): Remove.\n+\t* tree.h (widest_int_cst_value): Likewise.\n+\t* value-prof.c (dump_histogram_value): Print using PRId64.\n+\t* gengtype.c (main): Also inject int64_t.\n+\t* ggc-page.c (struct max_alignment): Use int64_t.\n+\t* alloc-pool.c (struct allocation_object_def): Likewise.\n+\t* ira-conflicts.c (build_conflict_bit_table): Use uint64_t\n+\tfor computation.\n+\t* doc/tm.texi.in: Remove reference to HOST_WIDEST_INT.\n+\t* doc/tm.texi: Regenerated.\n+\t* gengtype-lex.l (IWORD): Handle [u]int64_t.\n+\t* config/sh/sh.c (expand_cbranchdi4): Use gcov_type.\n+\t* config/mmix/mmix-protos.h (mmix_intval, mmix_shiftable_wyde_value,\n+\tmmix_output_register_setting): Use [u]int64_t in prototypes.\n+\t* config/mmix/mmix.c (mmix_print_operand, mmix_output_register_setting,\n+\tmmix_shiftable_wyde_value, mmix_output_shiftvalue_op_from_str,\n+\tmmix_output_octa, mmix_output_shifted_value): Adjust.\n+\t(mmix_intval): Adjust.  Remove unreachable case.\n+\t* config/mmix/mmix.md (*nonlocal_goto_receiver_expanded): Use\n+\tint64_t.\n+\n 2014-05-26  Richard Biener  <rguenther@suse.de>\n \n \t* configure.ac: Drop __int64 type check.  Insist that we"}, {"sha": "1713011808fe4543a83ec89db4d3954f8092718b", "filename": "gcc/alloc-pool.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Falloc-pool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Falloc-pool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -43,7 +43,7 @@ typedef struct allocation_object_def\n \t the allocated object may be even smaller than this structure.\n \t We do not care about alignment for floating-point types.  */\n       char *align_p;\n-      HOST_WIDEST_INT align_i;\n+      int64_t align_i;\n     } u;\n } allocation_object;\n "}, {"sha": "4f0143316b75b166b0007345aab36c85ebff91e2", "filename": "gcc/bitmap.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -34,11 +34,11 @@ struct bitmap_descriptor_d\n   const char *file;\n   int line;\n   int created;\n-  unsigned HOST_WIDEST_INT allocated;\n-  unsigned HOST_WIDEST_INT peak;\n-  unsigned HOST_WIDEST_INT current;\n-  unsigned HOST_WIDEST_INT nsearches;\n-  unsigned HOST_WIDEST_INT search_iter;\n+  uint64_t allocated;\n+  uint64_t peak;\n+  uint64_t current;\n+  uint64_t nsearches;\n+  uint64_t search_iter;\n };\n \n typedef struct bitmap_descriptor_d *bitmap_descriptor;\n@@ -2144,8 +2144,8 @@ bitmap_print (FILE *file, const_bitmap head, const char *prefix,\n /* Used to accumulate statistics about bitmap sizes.  */\n struct output_info\n {\n-  unsigned HOST_WIDEST_INT size;\n-  unsigned HOST_WIDEST_INT count;\n+  uint64_t size;\n+  uint64_t count;\n };\n \n /* Called via hash_table::traverse.  Output bitmap descriptor pointed out by\n@@ -2165,10 +2165,8 @@ print_statistics (bitmap_descriptor_d **slot, output_info *i)\n       sprintf (s, \"%s:%i (%s)\", s1, d->line, d->function);\n       s[41] = 0;\n       fprintf (stderr,\n-\t       \"%-41s %9u\"\n-\t       \" %15\"HOST_WIDEST_INT_PRINT\"d %15\"HOST_WIDEST_INT_PRINT\"d\"\n-\t       \" %15\"HOST_WIDEST_INT_PRINT\"d\"\n-\t       \" %10\"HOST_WIDEST_INT_PRINT\"d %10\"HOST_WIDEST_INT_PRINT\"d\\n\",\n+\t       \"%-41s %9u %15\"PRId64\" %15\"PRId64\" %15\"PRId64\n+\t       \" %10\"PRId64\" %10\"PRId64\"\\n\",\n \t       s, d->created,\n \t       d->allocated, d->peak, d->current,\n \t       d->nsearches, d->search_iter);\n@@ -2201,7 +2199,7 @@ dump_bitmap_statistics (void)\n   bitmap_desc_hash.traverse <output_info *, print_statistics> (&info);\n   fprintf (stderr, \"---------------------------------------------------------------------------------\\n\");\n   fprintf (stderr,\n-\t   \"%-41s %9\"HOST_WIDEST_INT_PRINT\"d %15\"HOST_WIDEST_INT_PRINT\"d\\n\",\n+\t   \"%-41s %9\"PRId64\" %15\"PRId64\"\\n\",\n \t   \"Total\", info.count, info.size);\n   fprintf (stderr, \"---------------------------------------------------------------------------------\\n\");\n }"}, {"sha": "f57d84d4707b8e9d12d3d7cf6a53940205d8216f", "filename": "gcc/bt-load.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -1411,9 +1411,9 @@ migrate_btr_defs (enum reg_class btr_class, int allow_callee_save)\n \t{\n \t  basic_block bb = BASIC_BLOCK_FOR_FN (cfun, i);\n \t  fprintf (dump_file,\n-\t\t   \"Basic block %d: count = \" HOST_WIDEST_INT_PRINT_DEC\n+\t\t   \"Basic block %d: count = %\" PRId64\n \t\t   \" loop-depth = %d idom = %d\\n\",\n-\t\t   i, (HOST_WIDEST_INT) bb->count, bb_loop_depth (bb),\n+\t\t   i, (int64_t) bb->count, bb_loop_depth (bb),\n \t\t   get_immediate_dominator (CDI_DOMINATORS, bb)->index);\n \t}\n     }"}, {"sha": "f5af1084d3414a1646625fae43d3ceabc2ba305a", "filename": "gcc/cfg.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -486,7 +486,7 @@ dump_edge_info (FILE *file, edge e, int flags, int do_succ)\n   if (e->count && do_details)\n     {\n       fputs (\" count:\", file);\n-      fprintf (file, HOST_WIDEST_INT_PRINT_DEC, e->count);\n+      fprintf (file, \"%\"PRId64, e->count);\n     }\n \n   if (e->flags && do_details)\n@@ -734,8 +734,8 @@ dump_bb_info (FILE *outf, basic_block bb, int indent, int flags,\n       if (flags & TDF_DETAILS)\n \t{\n \t  struct function *fun = DECL_STRUCT_FUNCTION (current_function_decl);\n-\t  fprintf (outf, \", count \" HOST_WIDEST_INT_PRINT_DEC,\n-\t\t   (HOST_WIDEST_INT) bb->count);\n+\t  fprintf (outf, \", count \" \"%\"PRId64,\n+\t\t   (int64_t) bb->count);\n \t  fprintf (outf, \", freq %i\", bb->frequency);\n \t  if (maybe_hot_bb_p (fun, bb))\n \t    fputs (\", maybe hot\", outf);\n@@ -961,7 +961,7 @@ scale_bbs_frequencies_int (basic_block *bbs, int nbbs, int num, int den)\n \n /* numbers smaller than this value are safe to multiply without getting\n    64bit overflow.  */\n-#define MAX_SAFE_MULTIPLIER (1 << (sizeof (HOST_WIDEST_INT) * 4 - 1))\n+#define MAX_SAFE_MULTIPLIER (1 << (sizeof (int64_t) * 4 - 1))\n \n /* Multiply all frequencies of basic blocks in array BBS of length NBBS\n    by NUM/DEN, in gcov_type arithmetic.  More accurate than previous"}, {"sha": "90bc6cf1e9f7a064b5e58358b6b97099825021d0", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -310,7 +310,7 @@ dump_bb_for_graph (pretty_printer *pp, basic_block bb)\n     internal_error (\"%s does not support dump_bb_for_graph\",\n \t\t    cfg_hooks->name);\n   if (bb->count)\n-    pp_printf (pp, \"COUNT:\" HOST_WIDEST_INT_PRINT_DEC, bb->count);\n+    pp_printf (pp, \"COUNT:\" \"%\"PRId64, bb->count);\n   pp_printf (pp, \" FREQ:%i |\", bb->frequency);\n   pp_write_text_to_stream (pp);\n   if (!(dump_flags & TDF_SLIM))"}, {"sha": "7d2c1de219d44b716f24a4407c49428c5ccaa047", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -400,7 +400,7 @@ struct GTY(()) niter_desc\n   bool const_iter;\n \n   /* Number of iterations if constant.  */\n-  unsigned HOST_WIDEST_INT niter;\n+  uint64_t niter;\n \n   /* Assumptions under that the rest of the information is valid.  */\n   rtx assumptions;"}, {"sha": "fd460aa257fbd606bf8ef232d1b3aa26e3dcd065", "filename": "gcc/cgraph.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -1377,12 +1377,12 @@ cgraph_redirect_edge_call_stmt_to_callee (struct cgraph_edge *e)\n \t  if (dump_file)\n \t    fprintf (dump_file,\n \t\t     \"Expanding speculative call of %s/%i -> %s/%i count:\"\n-\t\t     HOST_WIDEST_INT_PRINT_DEC\"\\n\",\n+\t\t     \"%\"PRId64\"\\n\",\n \t\t     xstrdup (e->caller->name ()),\n \t\t     e->caller->order,\n \t\t     xstrdup (e->callee->name ()),\n \t\t     e->callee->order,\n-\t\t     (HOST_WIDEST_INT)e->count);\n+\t\t     (int64_t)e->count);\n \t  gcc_assert (e2->speculative);\n \t  push_cfun (DECL_STRUCT_FUNCTION (e->caller->decl));\n \t  new_stmt = gimple_ic (e->call_stmt, cgraph (ref->referred),\n@@ -1975,8 +1975,8 @@ dump_cgraph_node (FILE *f, struct cgraph_node *node)\n   fprintf (f, \"  First run: %i\\n\", node->tp_first_run);\n   fprintf (f, \"  Function flags:\");\n   if (node->count)\n-    fprintf (f, \" executed \"HOST_WIDEST_INT_PRINT_DEC\"x\",\n-\t     (HOST_WIDEST_INT)node->count);\n+    fprintf (f, \" executed %\"PRId64\"x\",\n+\t     (int64_t)node->count);\n   if (node->origin)\n     fprintf (f, \" nested in: %s\", node->origin->asm_name ());\n   if (gimple_has_body_p (node->decl))\n@@ -2027,8 +2027,8 @@ dump_cgraph_node (FILE *f, struct cgraph_node *node)\n       fprintf (f, \"%s/%i \", edge->caller->asm_name (),\n \t       edge->caller->order);\n       if (edge->count)\n-\tfprintf (f, \"(\"HOST_WIDEST_INT_PRINT_DEC\"x) \",\n-\t\t (HOST_WIDEST_INT)edge->count);\n+\tfprintf (f, \"(%\"PRId64\"x) \",\n+\t\t (int64_t)edge->count);\n       if (edge->frequency)\n \tfprintf (f, \"(%.2f per call) \",\n \t\t edge->frequency / (double)CGRAPH_FREQ_BASE);\n@@ -2054,8 +2054,8 @@ dump_cgraph_node (FILE *f, struct cgraph_node *node)\n       if (edge->indirect_inlining_edge)\n \tfprintf (f, \"(indirect_inlining) \");\n       if (edge->count)\n-\tfprintf (f, \"(\"HOST_WIDEST_INT_PRINT_DEC\"x) \",\n-\t\t (HOST_WIDEST_INT)edge->count);\n+\tfprintf (f, \"(%\"PRId64\"x) \",\n+\t\t (int64_t)edge->count);\n       if (edge->frequency)\n \tfprintf (f, \"(%.2f per call) \",\n \t\t edge->frequency / (double)CGRAPH_FREQ_BASE);"}, {"sha": "32d53f559c5e552090a6c721c53ba81a806d376c", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -39,9 +39,9 @@ extern void mmix_asm_output_reg_push (FILE *, int);\n extern void mmix_asm_output_reg_pop (FILE *, int);\n extern void mmix_asm_output_skip (FILE *, int);\n extern void mmix_asm_output_align (FILE *, int);\n-extern HOST_WIDEST_INT mmix_intval (const_rtx);\n-extern int mmix_shiftable_wyde_value (unsigned HOST_WIDEST_INT);\n-extern void mmix_output_register_setting (FILE *, int, HOST_WIDEST_INT, int);\n+extern int64_t mmix_intval (const_rtx);\n+extern int mmix_shiftable_wyde_value (uint64_t);\n+extern void mmix_output_register_setting (FILE *, int, int64_t, int);\n extern int mmix_opposite_regno (int, int);\n extern int mmix_local_regno (int);\n extern unsigned mmix_dbx_register_number (unsigned);"}, {"sha": "9b616eb1efefe5fd8ab15e224e06a43bb256e201", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 41, "deletions": 56, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -117,10 +117,10 @@ static int mmix_output_destination_register;\n static void mmix_option_override (void);\n static void mmix_asm_output_source_filename (FILE *, const char *);\n static void mmix_output_shiftvalue_op_from_str\n-  (FILE *, const char *, HOST_WIDEST_INT);\n-static void mmix_output_shifted_value (FILE *, HOST_WIDEST_INT);\n+  (FILE *, const char *, int64_t);\n+static void mmix_output_shifted_value (FILE *, int64_t);\n static void mmix_output_condition (FILE *, const_rtx, int);\n-static void mmix_output_octa (FILE *, HOST_WIDEST_INT, int);\n+static void mmix_output_octa (FILE *, int64_t, int);\n static bool mmix_assemble_integer (rtx, unsigned int, int);\n static struct machine_function *mmix_init_machine_status (void);\n static void mmix_encode_section_info (tree, rtx, int);\n@@ -1588,25 +1588,25 @@ mmix_print_operand (FILE *stream, rtx x, int code)\n \t output.  */\n     case 'A':\n       mmix_output_shiftvalue_op_from_str (stream, \"ANDN\",\n-\t\t\t\t\t  ~(unsigned HOST_WIDEST_INT)\n+\t\t\t\t\t  ~(uint64_t)\n \t\t\t\t\t  mmix_intval (x));\n       return;\n \n     case 'i':\n       mmix_output_shiftvalue_op_from_str (stream, \"INC\",\n-\t\t\t\t\t  (unsigned HOST_WIDEST_INT)\n+\t\t\t\t\t  (uint64_t)\n \t\t\t\t\t  mmix_intval (x));\n       return;\n \n     case 'o':\n       mmix_output_shiftvalue_op_from_str (stream, \"OR\",\n-\t\t\t\t\t  (unsigned HOST_WIDEST_INT)\n+\t\t\t\t\t  (uint64_t)\n \t\t\t\t\t  mmix_intval (x));\n       return;\n \n     case 's':\n       mmix_output_shiftvalue_op_from_str (stream, \"SET\",\n-\t\t\t\t\t  (unsigned HOST_WIDEST_INT)\n+\t\t\t\t\t  (uint64_t)\n \t\t\t\t\t  mmix_intval (x));\n       return;\n \n@@ -1628,8 +1628,8 @@ mmix_print_operand (FILE *stream, rtx x, int code)\n \t  fatal_insn (\"MMIX Internal: Bad value for 'm', not a CONST_INT\",\n \t\t      x);\n \t}\n-      fprintf (stream, HOST_WIDEST_INT_PRINT_DEC,\n-\t       (HOST_WIDEST_INT) (mmix_intval (x) - 1));\n+      fprintf (stream, \"%\"PRId64,\n+\t       (int64_t) (mmix_intval (x) - 1));\n       return;\n \n     case 'p':\n@@ -1667,11 +1667,11 @@ mmix_print_operand (FILE *stream, rtx x, int code)\n       return;\n \n     case 'v':\n-      mmix_output_shifted_value (stream, (HOST_WIDEST_INT) mmix_intval (x));\n+      mmix_output_shifted_value (stream, (int64_t) mmix_intval (x));\n       return;\n \n     case 'V':\n-      mmix_output_shifted_value (stream, (HOST_WIDEST_INT) ~mmix_intval (x));\n+      mmix_output_shifted_value (stream, (int64_t) ~mmix_intval (x));\n       return;\n \n     case 'W':\n@@ -2294,37 +2294,37 @@ mmix_expand_epilogue (void)\n void\n mmix_output_register_setting (FILE *stream,\n \t\t\t      int regno,\n-\t\t\t      HOST_WIDEST_INT value,\n+\t\t\t      int64_t value,\n \t\t\t      int do_begin_end)\n {\n   if (do_begin_end)\n     fprintf (stream, \"\\t\");\n \n   if (insn_const_int_ok_for_constraint (value, CONSTRAINT_K))\n-    fprintf (stream, \"NEGU %s,0,\" HOST_WIDEST_INT_PRINT_DEC, reg_names[regno], -value);\n-  else if (mmix_shiftable_wyde_value ((unsigned HOST_WIDEST_INT) value))\n+    fprintf (stream, \"NEGU %s,0,%\"PRId64, reg_names[regno], -value);\n+  else if (mmix_shiftable_wyde_value ((uint64_t) value))\n     {\n       /* First, the one-insn cases.  */\n       mmix_output_shiftvalue_op_from_str (stream, \"SET\",\n-\t\t\t\t\t  (unsigned HOST_WIDEST_INT)\n+\t\t\t\t\t  (uint64_t)\n \t\t\t\t\t  value);\n       fprintf (stream, \" %s,\", reg_names[regno]);\n-      mmix_output_shifted_value (stream, (unsigned HOST_WIDEST_INT) value);\n+      mmix_output_shifted_value (stream, (uint64_t) value);\n     }\n-  else if (mmix_shiftable_wyde_value (-(unsigned HOST_WIDEST_INT) value))\n+  else if (mmix_shiftable_wyde_value (-(uint64_t) value))\n     {\n       /* We do this to get a bit more legible assembly code.  The next\n \t alternative is mostly redundant with this.  */\n \n       mmix_output_shiftvalue_op_from_str (stream, \"SET\",\n-\t\t\t\t\t  -(unsigned HOST_WIDEST_INT)\n+\t\t\t\t\t  -(uint64_t)\n \t\t\t\t\t  value);\n       fprintf (stream, \" %s,\", reg_names[regno]);\n-      mmix_output_shifted_value (stream, -(unsigned HOST_WIDEST_INT) value);\n+      mmix_output_shifted_value (stream, -(uint64_t) value);\n       fprintf (stream, \"\\n\\tNEGU %s,0,%s\", reg_names[regno],\n \t       reg_names[regno]);\n     }\n-  else if (mmix_shiftable_wyde_value (~(unsigned HOST_WIDEST_INT) value))\n+  else if (mmix_shiftable_wyde_value (~(uint64_t) value))\n     {\n       /* Slightly more expensive, the two-insn cases.  */\n \n@@ -2335,10 +2335,10 @@ mmix_output_register_setting (FILE *stream,\n \t anyone else cares).  */\n \n       mmix_output_shiftvalue_op_from_str (stream, \"SET\",\n-\t\t\t\t\t  ~(unsigned HOST_WIDEST_INT)\n+\t\t\t\t\t  ~(uint64_t)\n \t\t\t\t\t  value);\n       fprintf (stream, \" %s,\", reg_names[regno]);\n-      mmix_output_shifted_value (stream, ~(unsigned HOST_WIDEST_INT) value);\n+      mmix_output_shifted_value (stream, ~(uint64_t) value);\n       fprintf (stream, \"\\n\\tNOR %s,%s,0\", reg_names[regno],\n \t       reg_names[regno]);\n     }\n@@ -2350,7 +2350,7 @@ mmix_output_register_setting (FILE *stream,\n       const char *line_begin = \"\";\n       int insns = 0;\n       int i;\n-      HOST_WIDEST_INT tmpvalue = value;\n+      int64_t tmpvalue = value;\n \n       /* Compute the number of insns needed to output this constant.  */\n       for (i = 0; i < 4 && tmpvalue != 0; i++)\n@@ -2405,7 +2405,7 @@ mmix_output_register_setting (FILE *stream,\n    else return 0.  */\n \n int\n-mmix_shiftable_wyde_value (unsigned HOST_WIDEST_INT value)\n+mmix_shiftable_wyde_value (uint64_t value)\n {\n   /* Shift by 16 bits per group, stop when we've found two groups with\n      nonzero bits.  */\n@@ -2487,15 +2487,15 @@ mmix_emit_sp_add (HOST_WIDE_INT offset)\n static void\n mmix_output_shiftvalue_op_from_str (FILE *stream,\n \t\t\t\t    const char *mainop,\n-\t\t\t\t    HOST_WIDEST_INT value)\n+\t\t\t\t    int64_t value)\n {\n   static const char *const op_part[] = {\"L\", \"ML\", \"MH\", \"H\"};\n   int i;\n \n   if (! mmix_shiftable_wyde_value (value))\n     {\n       char s[sizeof (\"0xffffffffffffffff\")];\n-      sprintf (s, HOST_WIDEST_INT_PRINT_HEX, value);\n+      sprintf (s, \"%#\"PRIx64, value);\n       internal_error (\"MMIX Internal: %s is not a shiftable int\", s);\n     }\n \n@@ -2518,26 +2518,26 @@ mmix_output_shiftvalue_op_from_str (FILE *stream,\n /* Print a 64-bit value, optionally prefixed by assembly pseudo.  */\n \n static void\n-mmix_output_octa (FILE *stream, HOST_WIDEST_INT value, int do_begin_end)\n+mmix_output_octa (FILE *stream, int64_t value, int do_begin_end)\n {\n   if (do_begin_end)\n     fprintf (stream, \"\\tOCTA \");\n \n   /* Provide a few alternative output formats depending on the number, to\n      improve legibility of assembler output.  */\n-  if ((value < (HOST_WIDEST_INT) 0 && value > (HOST_WIDEST_INT) -10000)\n-      || (value >= (HOST_WIDEST_INT) 0 && value <= (HOST_WIDEST_INT) 16384))\n+  if ((value < (int64_t) 0 && value > (int64_t) -10000)\n+      || (value >= (int64_t) 0 && value <= (int64_t) 16384))\n     fprintf (stream, \"%d\", (int) value);\n-  else if (value > (HOST_WIDEST_INT) 0\n-\t   && value < ((HOST_WIDEST_INT) 1 << 31) * 2)\n+  else if (value > (int64_t) 0\n+\t   && value < ((int64_t) 1 << 31) * 2)\n     fprintf (stream, \"#%x\", (unsigned int) value);\n-  else if (sizeof (HOST_WIDE_INT) == sizeof (HOST_WIDEST_INT))\n+  else if (sizeof (HOST_WIDE_INT) == sizeof (int64_t))\n     /* We need to avoid the not-so-universal \"0x\" prefix; we need the\n        pure hex-digits together with the mmixal \"#\" hex prefix.  */\n     fprintf (stream, \"#\" HOST_WIDE_INT_PRINT_HEX_PURE,\n \t     (HOST_WIDE_INT) value);\n   else /* Need to avoid the hex output; there's no ...WIDEST...HEX_PURE.  */\n-    fprintf (stream, HOST_WIDEST_INT_PRINT_UNSIGNED, value);\n+    fprintf (stream, \"%\"PRIu64, value);\n \n   if (do_begin_end)\n     fprintf (stream, \"\\n\");\n@@ -2547,14 +2547,14 @@ mmix_output_octa (FILE *stream, HOST_WIDEST_INT value, int do_begin_end)\n    be output with an operand).  */\n \n static void\n-mmix_output_shifted_value (FILE *stream, HOST_WIDEST_INT value)\n+mmix_output_shifted_value (FILE *stream, int64_t value)\n {\n   int i;\n \n   if (! mmix_shiftable_wyde_value (value))\n     {\n       char s[16+2+1];\n-      sprintf (s, HOST_WIDEST_INT_PRINT_HEX, value);\n+      sprintf (s, \"%#\"PRIx64, value);\n       internal_error (\"MMIX Internal: %s is not a shiftable int\", s);\n     }\n \n@@ -2687,10 +2687,10 @@ mmix_output_condition (FILE *stream, const_rtx x, int reversed)\n \n /* Return the bit-value for a const_int or const_double.  */\n \n-HOST_WIDEST_INT\n+int64_t\n mmix_intval (const_rtx x)\n {\n-  unsigned HOST_WIDEST_INT retval;\n+  uint64_t retval;\n \n   if (GET_CODE (x) == CONST_INT)\n     return INTVAL (x);\n@@ -2699,22 +2699,7 @@ mmix_intval (const_rtx x)\n      gcc-2.7.2 is broken.  I still want people to be able to use it for\n      cross-compilation to MMIX.  */\n   if (GET_CODE (x) == CONST_DOUBLE && GET_MODE (x) == VOIDmode)\n-    {\n-      if (sizeof (HOST_WIDE_INT) < sizeof (HOST_WIDEST_INT))\n-\t{\n-\t  retval = (unsigned) CONST_DOUBLE_LOW (x) / 2;\n-\t  retval *= 2;\n-\t  retval |= CONST_DOUBLE_LOW (x) & 1;\n-\n-\t  retval |=\n-\t    (unsigned HOST_WIDEST_INT) CONST_DOUBLE_HIGH (x)\n-\t      << (HOST_BITS_PER_LONG)/2 << (HOST_BITS_PER_LONG)/2;\n-\t}\n-      else\n-\tretval = CONST_DOUBLE_HIGH (x);\n-\n-      return retval;\n-    }\n+    return CONST_DOUBLE_HIGH (x);\n \n   if (GET_CODE (x) == CONST_DOUBLE)\n     {\n@@ -2733,9 +2718,9 @@ mmix_intval (const_rtx x)\n \t     sign-extended to unsigned long long(!) when they're of\n \t     different size (usually 32-bit hosts).  */\n \t  return\n-\t    ((unsigned HOST_WIDEST_INT) (unsigned long) bits[0]\n-\t     << (unsigned HOST_WIDEST_INT) 32U)\n-\t    | (unsigned HOST_WIDEST_INT) (unsigned long) bits[1];\n+\t    ((uint64_t) (unsigned long) bits[0]\n+\t     << (uint64_t) 32U)\n+\t    | (uint64_t) (unsigned long) bits[1];\n \t}\n       else if (GET_MODE (x) == SFmode)\n \t{"}, {"sha": "306d632e998acbc848802e9b55a224b36821af9d", "filename": "gcc/config/mmix/mmix.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fconfig%2Fmmix%2Fmmix.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fconfig%2Fmmix%2Fmmix.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.md?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -1168,7 +1168,7 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n     }\n   else\n     {\n-      HOST_WIDEST_INT offs = INTVAL (XEXP (operands[1], 1));\n+      int64_t offs = INTVAL (XEXP (operands[1], 1));\n       offs += MMIX_fp_rO_OFFSET;\n \n       if (insn_const_int_ok_for_constraint (offs, CONSTRAINT_I))"}, {"sha": "a5118c63f9999de86672db427e4d23959311592c", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -2088,12 +2088,11 @@ expand_cbranchdi4 (rtx *operands, enum rtx_code comparison)\n \t    lsw_taken_prob = prob ? REG_BR_PROB_BASE : 0;\n \t  else\n \t    {\n-\t      gcc_assert (HOST_BITS_PER_WIDEST_INT >= 64);\n \t      lsw_taken_prob\n \t\t= (prob\n \t\t   ? (REG_BR_PROB_BASE\n-\t\t      - ((HOST_WIDEST_INT) REG_BR_PROB_BASE * rev_prob\n-\t\t\t / ((HOST_WIDEST_INT) prob << 32)))\n+\t\t      - ((gcov_type) REG_BR_PROB_BASE * rev_prob\n+\t\t\t / ((gcov_type) prob << 32)))\n \t\t   : 0);\n \t    }\n \t}"}, {"sha": "bbb515092bbd681ba9ab31a2e662644c323efaf9", "filename": "gcc/coretypes.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -43,8 +43,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #ifndef USED_FOR_TARGET\n \n-typedef HOST_WIDEST_INT gcov_type;\n-typedef unsigned HOST_WIDEST_INT gcov_type_unsigned;\n+typedef int64_t gcov_type;\n+typedef uint64_t gcov_type_unsigned;\n \n struct bitmap_head;\n typedef struct bitmap_head *bitmap;"}, {"sha": "a9613b0f3c322246e92e9064bd43fd3b41b54c2e", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -1057,7 +1057,7 @@ the default value is @code{BIGGEST_ALIGNMENT}.\n \n On systems that use ELF, the default (in @file{config/elfos.h}) is\n the largest supported 32-bit ELF section alignment representable on\n-a 32-bit host e.g. @samp{(((unsigned HOST_WIDEST_INT) 1 << 28) * 8)}.\n+a 32-bit host e.g. @samp{(((uint64_t) 1 << 28) * 8)}.\n On 32-bit ELF the largest supported section alignment in bits is\n @samp{(0x80000000 * 8)}, but this is not representable on 32-bit hosts.\n @end defmac"}, {"sha": "bc4ae30936ab581f1cd00222412a511e01627fcf", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -1011,7 +1011,7 @@ the default value is @code{BIGGEST_ALIGNMENT}.\n \n On systems that use ELF, the default (in @file{config/elfos.h}) is\n the largest supported 32-bit ELF section alignment representable on\n-a 32-bit host e.g. @samp{(((unsigned HOST_WIDEST_INT) 1 << 28) * 8)}.\n+a 32-bit host e.g. @samp{(((uint64_t) 1 << 28) * 8)}.\n On 32-bit ELF the largest supported section alignment in bits is\n @samp{(0x80000000 * 8)}, but this is not representable on 32-bit hosts.\n @end defmac"}, {"sha": "54386a69ee71cfa41a355c376e8be757b6b33f7b", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -1925,7 +1925,7 @@ dump_basic_block_info (FILE *file, rtx insn, basic_block *start_to_bb,\n       if (bb->frequency)\n         fprintf (file, \" freq:%d\", bb->frequency);\n       if (bb->count)\n-        fprintf (file, \" count:\" HOST_WIDEST_INT_PRINT_DEC,\n+        fprintf (file, \" count:%\"PRId64,\n                  bb->count);\n       fprintf (file, \" seq:%d\", (*bb_seqn)++);\n       fprintf (file, \"\\n%s PRED:\", ASM_COMMENT_START);"}, {"sha": "22298ec3c3005ee0a4bc820c5e2d5e5405299333", "filename": "gcc/gcov-dump.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fgcov-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fgcov-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-dump.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -444,7 +444,7 @@ tag_counters (const char *filename ATTRIBUTE_UNUSED,\n \n \t  count = gcov_read_counter ();\n \t  printf (\" \");\n-\t  printf (HOST_WIDEST_INT_PRINT_DEC, count);\n+\t  printf (\"%\"PRId64, count);\n \t}\n     }\n }\n@@ -467,12 +467,12 @@ tag_summary (const char *filename ATTRIBUTE_UNUSED,\n       printf (\"\\t\\tcounts=%u, runs=%u\",\n \t      summary.ctrs[ix].num, summary.ctrs[ix].runs);\n \n-      printf (\", sum_all=\" HOST_WIDEST_INT_PRINT_DEC,\n-\t      (HOST_WIDEST_INT)summary.ctrs[ix].sum_all);\n-      printf (\", run_max=\" HOST_WIDEST_INT_PRINT_DEC,\n-\t      (HOST_WIDEST_INT)summary.ctrs[ix].run_max);\n-      printf (\", sum_max=\" HOST_WIDEST_INT_PRINT_DEC,\n-\t      (HOST_WIDEST_INT)summary.ctrs[ix].sum_max);\n+      printf (\", sum_all=%\"PRId64,\n+\t      (int64_t)summary.ctrs[ix].sum_all);\n+      printf (\", run_max=%\"PRId64,\n+\t      (int64_t)summary.ctrs[ix].run_max);\n+      printf (\", sum_max=%\"PRId64,\n+\t      (int64_t)summary.ctrs[ix].sum_max);\n       if (ix != GCOV_COUNTER_ARCS)\n         continue;\n       printf (\"\\n\");\n@@ -486,11 +486,11 @@ tag_summary (const char *filename ATTRIBUTE_UNUSED,\n           printf (\"\\n\");\n           print_prefix (filename, 0, 0);\n           printf (\"\\t\\t%d: num counts=%u, min counter=\"\n-              HOST_WIDEST_INT_PRINT_DEC \", cum_counter=\"\n-              HOST_WIDEST_INT_PRINT_DEC,\n+              \"%\"PRId64 \", cum_counter=\"\n+              \"%\"PRId64,\n \t      h_ix, histo_bucket->num_counters,\n-              (HOST_WIDEST_INT)histo_bucket->min_value,\n-              (HOST_WIDEST_INT)histo_bucket->cum_value);\n+              (int64_t)histo_bucket->min_value,\n+              (int64_t)histo_bucket->cum_value);\n         }\n       if (flag_dump_working_sets)\n         dump_working_sets (filename, &summary.ctrs[ix]);\n@@ -522,9 +522,9 @@ dump_working_sets (const char *filename ATTRIBUTE_UNUSED,\n       printf (\"\\n\");\n       print_prefix (filename, 0, 0);\n       printf (\"\\t\\t%u.%02u%%: num counts=%u, min counter=\"\n-               HOST_WIDEST_INT_PRINT_DEC,\n+               \"%\"PRId64,\n                pct / 100, pct - (pct / 100 * 100),\n                ws_info->num_counters,\n-               (HOST_WIDEST_INT)ws_info->min_counter);\n+               (int64_t)ws_info->min_counter);\n     }\n }"}, {"sha": "1fdb9583ee8abd3de50e92a5d1a3d179bade8a73", "filename": "gcc/gcov-io.c", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fgcov-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fgcov-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -718,20 +718,8 @@ gcov_histo_index (gcov_type value)\n       r = sizeof (long long) * __CHAR_BIT__ - 1 - __builtin_clzll (v);\n #else\n       /* We use floor_log2 from hwint.c, which takes a HOST_WIDE_INT\n-         that is either 32 or 64 bits, and gcov_type_unsigned may be 64 bits.\n-         Need to check for the case where gcov_type_unsigned is 64 bits\n-         and HOST_WIDE_INT is 32 bits and handle it specially.  */\n-#if HOST_BITS_PER_WIDEST_INT == HOST_BITS_PER_WIDE_INT\n+         that is 64 bits and gcov_type_unsigned is 64 bits.  */\n       r = floor_log2 (v);\n-#elif HOST_BITS_PER_WIDEST_INT == 2 * HOST_BITS_PER_WIDE_INT\n-      HOST_WIDE_INT hwi_v = v >> HOST_BITS_PER_WIDE_INT;\n-      if (hwi_v)\n-        r = floor_log2 (hwi_v) + HOST_BITS_PER_WIDE_INT;\n-      else\n-        r = floor_log2 ((HOST_WIDE_INT)v);\n-#else\n-      gcc_unreachable ();\n-#endif\n #endif\n     }\n "}, {"sha": "58884dce94d74404edfd60d8d77852fe1660961a", "filename": "gcc/gcov-io.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fgcov-io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fgcov-io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.h?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -172,8 +172,8 @@ typedef unsigned gcov_position_t;\n /* gcov_type is typedef'd elsewhere for the compiler */\n #if IN_GCOV\n #define GCOV_LINKAGE static\n-typedef HOST_WIDEST_INT gcov_type;\n-typedef unsigned HOST_WIDEST_INT gcov_type_unsigned;\n+typedef int64_t gcov_type;\n+typedef uint64_t gcov_type_unsigned;\n #if IN_GCOV > 0\n #include <sys/types.h>\n #endif"}, {"sha": "8bce0ae8c84edc36a0ae452503ee2d1c0c809bab", "filename": "gcc/gcov.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -1846,7 +1846,7 @@ format_gcov (gcov_type top, gcov_type bottom, int dp)\n \t}\n     }\n   else\n-    sprintf (buffer, HOST_WIDEST_INT_PRINT_DEC, (HOST_WIDEST_INT)top);\n+    sprintf (buffer, \"%\"PRId64, (int64_t)top);\n \n   return buffer;\n }"}, {"sha": "5e12885c63f063787eddc4c46257791d15012d9a", "filename": "gcc/gengtype-lex.l", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fgengtype-lex.l", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fgengtype-lex.l", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype-lex.l?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -52,7 +52,7 @@ update_lineno (const char *l, size_t len)\n CID\t[[:alpha:]_][[:alnum:]_]*\n WS\t[[:space:]]+\n HWS\t[ \\t\\r\\v\\f]*\n-IWORD\tshort|long|(un)?signed|char|int|HOST_WIDE_INT|HOST_WIDEST_INT|bool|size_t|BOOL_BITFIELD|CPPCHAR_SIGNED_T|ino_t|dev_t|HARD_REG_SET\n+IWORD\tshort|long|(un)?signed|char|int|HOST_WIDE_INT|uint64_t|int64_t|bool|size_t|BOOL_BITFIELD|CPPCHAR_SIGNED_T|ino_t|dev_t|HARD_REG_SET\n ITYPE\t{IWORD}({WS}{IWORD})*\n     /* Include '::' in identifiers to capture C++ scope qualifiers.  */\n ID\t{CID}({HWS}::{HWS}{CID})*"}, {"sha": "bc8f7010e838c312588c5393e2aeb163de3fe29f", "filename": "gcc/gengtype.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -5582,6 +5582,7 @@ main (int argc, char **argv)\n       POS_HERE (do_scalar_typedef (\"double_int\", &pos));\n       POS_HERE (do_scalar_typedef (\"offset_int\", &pos));\n       POS_HERE (do_scalar_typedef (\"widest_int\", &pos));\n+      POS_HERE (do_scalar_typedef (\"int64_t\", &pos));\n       POS_HERE (do_scalar_typedef (\"uint64_t\", &pos));\n       POS_HERE (do_scalar_typedef (\"uint8\", &pos));\n       POS_HERE (do_scalar_typedef (\"uintptr_t\", &pos));"}, {"sha": "393954089f8bfd9a96277f443a4e9543cd3f2b02", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -156,7 +156,7 @@ along with GCC; see the file COPYING3.  If not see\n struct max_alignment {\n   char c;\n   union {\n-    HOST_WIDEST_INT i;\n+    int64_t i;\n     void *p;\n   } u;\n };"}, {"sha": "fa573b8c2369c3534fb4248645b0ef99e654dcc7", "filename": "gcc/hwint.h", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fhwint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fhwint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhwint.h?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -135,17 +135,21 @@ typedef HOST_WIDE_INT __gcc_host_wide_int__;\n #define HOST_WIDE_INT_PRINT_HEX \"%#\" HOST_WIDE_INT_PRINT \"x\"\n #define HOST_WIDE_INT_PRINT_HEX_PURE \"%\" HOST_WIDE_INT_PRINT \"x\"\n \n-/* Set HOST_WIDEST_INT.  This is a 64-bit type.  */\n-\n-#define HOST_WIDEST_INT\t\t\t      HOST_WIDE_INT\n-#define HOST_BITS_PER_WIDEST_INT\t      HOST_BITS_PER_WIDE_INT\n-#define HOST_WIDEST_INT_PRINT\t\t      HOST_WIDE_INT_PRINT\n-#define HOST_WIDEST_INT_PRINT_DEC\t      HOST_WIDE_INT_PRINT_DEC\n-#define HOST_WIDEST_INT_PRINT_DEC_C\t      HOST_WIDE_INT_PRINT_DEC_C\n-#define HOST_WIDEST_INT_PRINT_UNSIGNED\t      HOST_WIDE_INT_PRINT_UNSIGNED\n-#define HOST_WIDEST_INT_PRINT_HEX\t      HOST_WIDE_INT_PRINT_HEX\n-#define HOST_WIDEST_INT_PRINT_DOUBLE_HEX      HOST_WIDE_INT_PRINT_DOUBLE_HEX\n-#define HOST_WIDEST_INT_C(X)\t\t      HOST_WIDE_INT (X)\n+/* Provide C99 <inttypes.h> style format definitions for 64bits.  */\n+#ifndef HAVE_INTTYPES_H\n+#undef PRId64\n+#define PRId64 HOST_WIDE_INT_PRINT \"d\"\n+#undef PRIi64\n+#define PRIi64 HOST_WIDE_INT_PRINT \"i\"\n+#undef PRIo64\n+#define PRIo64 HOST_WIDE_INT_PRINT \"o\"\n+#undef PRIu64\n+#define PRIu64 HOST_WIDE_INT_PRINT \"u\"\n+#undef PRIx64\n+#define PRIx64 HOST_WIDE_INT_PRINT \"x\"\n+#undef PRIX64\n+#define PRIX64 HOST_WIDE_INT_PRINT \"X\"\n+#endif\n \n /* Define HOST_WIDEST_FAST_INT to the widest integer type supported\n    efficiently in hardware.  (That is, the widest integer type that fits"}, {"sha": "08fb73e0e9366b42aa06a21ab471fc679a5a960e", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -1748,13 +1748,13 @@ good_cloning_opportunity_p (struct cgraph_node *node, int time_benefit,\n   if (max_count)\n     {\n       int factor = (count_sum * 1000) / max_count;\n-      HOST_WIDEST_INT evaluation = (((HOST_WIDEST_INT) time_benefit * factor)\n+      int64_t evaluation = (((int64_t) time_benefit * factor)\n \t\t\t\t    / size_cost);\n \n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file, \"     good_cloning_opportunity_p (time: %i, \"\n \t\t \"size: %i, count_sum: \" HOST_WIDE_INT_PRINT_DEC\n-\t\t \") -> evaluation: \" HOST_WIDEST_INT_PRINT_DEC\n+\t\t \") -> evaluation: \" \"%\"PRId64\n \t\t \", threshold: %i\\n\",\n \t\t time_benefit, size_cost, (HOST_WIDE_INT) count_sum,\n \t\t evaluation, PARAM_VALUE (PARAM_IPA_CP_EVAL_THRESHOLD));\n@@ -1763,13 +1763,13 @@ good_cloning_opportunity_p (struct cgraph_node *node, int time_benefit,\n     }\n   else\n     {\n-      HOST_WIDEST_INT evaluation = (((HOST_WIDEST_INT) time_benefit * freq_sum)\n+      int64_t evaluation = (((int64_t) time_benefit * freq_sum)\n \t\t\t\t    / size_cost);\n \n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file, \"     good_cloning_opportunity_p (time: %i, \"\n \t\t \"size: %i, freq_sum: %i) -> evaluation: \"\n-\t\t HOST_WIDEST_INT_PRINT_DEC \", threshold: %i\\n\",\n+\t\t \"%\"PRId64 \", threshold: %i\\n\",\n \t\t time_benefit, size_cost, freq_sum, evaluation,\n \t\t PARAM_VALUE (PARAM_IPA_CP_EVAL_THRESHOLD));\n \n@@ -2459,7 +2459,7 @@ ipcp_edge_removal_hook (struct cgraph_edge *cs, void *)\n    parameter with the given INDEX.  */\n \n static tree\n-get_clone_agg_value (struct cgraph_node *node, HOST_WIDEST_INT offset,\n+get_clone_agg_value (struct cgraph_node *node, HOST_WIDE_INT offset,\n \t\t     int index)\n {\n   struct ipa_agg_replacement_value *aggval;"}, {"sha": "e09c5cdb54564211d8f2e22c2aeef6967b792f0f", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -1441,7 +1441,7 @@ compute_max_insns (int insns)\n   if (max_insns < PARAM_VALUE (PARAM_LARGE_UNIT_INSNS))\n     max_insns = PARAM_VALUE (PARAM_LARGE_UNIT_INSNS);\n \n-  return ((HOST_WIDEST_INT) max_insns\n+  return ((int64_t) max_insns\n \t  * (100 + PARAM_VALUE (PARAM_INLINE_UNIT_GROWTH)) / 100);\n }\n \n@@ -1737,7 +1737,7 @@ inline_small_functions (void)\n \t\t   badness,\n \t\t   edge->frequency / (double)CGRAPH_FREQ_BASE);\n \t  if (edge->count)\n-\t    fprintf (dump_file,\" Called \"HOST_WIDEST_INT_PRINT_DEC\"x\\n\",\n+\t    fprintf (dump_file,\" Called %\"PRId64\"x\\n\",\n \t\t     edge->count);\n \t  if (dump_flags & TDF_DETAILS)\n \t    edge_badness (edge, true);\n@@ -2011,7 +2011,7 @@ inline_to_all_callers (struct cgraph_node *node, void *data)\n static void\n dump_overall_stats (void)\n {\n-  HOST_WIDEST_INT sum_weighted = 0, sum = 0;\n+  int64_t sum_weighted = 0, sum = 0;\n   struct cgraph_node *node;\n \n   FOR_EACH_DEFINED_FUNCTION (node)\n@@ -2023,22 +2023,22 @@ dump_overall_stats (void)\n \tsum_weighted += time * node->count;\n       }\n   fprintf (dump_file, \"Overall time estimate: \"\n-\t   HOST_WIDEST_INT_PRINT_DEC\" weighted by profile: \"\n-\t   HOST_WIDEST_INT_PRINT_DEC\"\\n\", sum, sum_weighted);\n+\t   \"%\"PRId64\" weighted by profile: \"\n+\t   \"%\"PRId64\"\\n\", sum, sum_weighted);\n }\n \n /* Output some useful stats about inlining.  */\n \n static void\n dump_inline_stats (void)\n {\n-  HOST_WIDEST_INT inlined_cnt = 0, inlined_indir_cnt = 0;\n-  HOST_WIDEST_INT inlined_virt_cnt = 0, inlined_virt_indir_cnt = 0;\n-  HOST_WIDEST_INT noninlined_cnt = 0, noninlined_indir_cnt = 0;\n-  HOST_WIDEST_INT noninlined_virt_cnt = 0, noninlined_virt_indir_cnt = 0;\n-  HOST_WIDEST_INT  inlined_speculative = 0, inlined_speculative_ply = 0;\n-  HOST_WIDEST_INT indirect_poly_cnt = 0, indirect_cnt = 0;\n-  HOST_WIDEST_INT reason[CIF_N_REASONS][3];\n+  int64_t inlined_cnt = 0, inlined_indir_cnt = 0;\n+  int64_t inlined_virt_cnt = 0, inlined_virt_indir_cnt = 0;\n+  int64_t noninlined_cnt = 0, noninlined_indir_cnt = 0;\n+  int64_t noninlined_virt_cnt = 0, noninlined_virt_indir_cnt = 0;\n+  int64_t  inlined_speculative = 0, inlined_speculative_ply = 0;\n+  int64_t indirect_poly_cnt = 0, indirect_cnt = 0;\n+  int64_t reason[CIF_N_REASONS][3];\n   int i;\n   struct cgraph_node *node;\n \n@@ -2102,31 +2102,31 @@ dump_inline_stats (void)\n   if (max_count)\n     {\n       fprintf (dump_file,\n-\t       \"Inlined \" HOST_WIDEST_INT_PRINT_DEC \" + speculative \"\n-\t       HOST_WIDEST_INT_PRINT_DEC \" + speculative polymorphic \"\n-\t       HOST_WIDEST_INT_PRINT_DEC \" + previously indirect \"\n-\t       HOST_WIDEST_INT_PRINT_DEC \" + virtual \"\n-\t       HOST_WIDEST_INT_PRINT_DEC \" + virtual and previously indirect \"\n-\t       HOST_WIDEST_INT_PRINT_DEC \"\\n\" \"Not inlined \"\n-\t       HOST_WIDEST_INT_PRINT_DEC \" + previously indirect \"\n-\t       HOST_WIDEST_INT_PRINT_DEC \" + virtual \"\n-\t       HOST_WIDEST_INT_PRINT_DEC \" + virtual and previously indirect \"\n-\t       HOST_WIDEST_INT_PRINT_DEC \" + stil indirect \"\n-\t       HOST_WIDEST_INT_PRINT_DEC \" + still indirect polymorphic \"\n-\t       HOST_WIDEST_INT_PRINT_DEC \"\\n\", inlined_cnt,\n+\t       \"Inlined %\"PRId64 \" + speculative \"\n+\t       \"%\"PRId64 \" + speculative polymorphic \"\n+\t       \"%\"PRId64 \" + previously indirect \"\n+\t       \"%\"PRId64 \" + virtual \"\n+\t       \"%\"PRId64 \" + virtual and previously indirect \"\n+\t       \"%\"PRId64 \"\\n\" \"Not inlined \"\n+\t       \"%\"PRId64 \" + previously indirect \"\n+\t       \"%\"PRId64 \" + virtual \"\n+\t       \"%\"PRId64 \" + virtual and previously indirect \"\n+\t       \"%\"PRId64 \" + stil indirect \"\n+\t       \"%\"PRId64 \" + still indirect polymorphic \"\n+\t       \"%\"PRId64 \"\\n\", inlined_cnt,\n \t       inlined_speculative, inlined_speculative_ply,\n \t       inlined_indir_cnt, inlined_virt_cnt, inlined_virt_indir_cnt,\n \t       noninlined_cnt, noninlined_indir_cnt, noninlined_virt_cnt,\n \t       noninlined_virt_indir_cnt, indirect_cnt, indirect_poly_cnt);\n       fprintf (dump_file,\n-\t       \"Removed speculations \" HOST_WIDEST_INT_PRINT_DEC \"\\n\",\n+\t       \"Removed speculations %\"PRId64 \"\\n\",\n \t       spec_rem);\n     }\n   dump_overall_stats ();\n   fprintf (dump_file, \"\\nWhy inlining failed?\\n\");\n   for (i = 0; i < CIF_N_REASONS; i++)\n     if (reason[i][2])\n-      fprintf (dump_file, \"%-50s: %8i calls, %8i freq, \"HOST_WIDEST_INT_PRINT_DEC\" count\\n\",\n+      fprintf (dump_file, \"%-50s: %8i calls, %8i freq, %\"PRId64\" count\\n\",\n \t       cgraph_inline_failed_string ((cgraph_inline_failed_t) i),\n \t       (int) reason[i][2], (int) reason[i][1], reason[i][0]);\n }"}, {"sha": "339f38ea0dba2cfd82cbacc4efc306011bd2397e", "filename": "gcc/ipa-profile.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fipa-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fipa-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-profile.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -163,8 +163,8 @@ dump_histogram (FILE *file, vec<histogram_entry *> histogram)\n     {\n       cumulated_time += histogram[i]->count * histogram[i]->time;\n       cumulated_size += histogram[i]->size;\n-      fprintf (file, \"  \"HOST_WIDEST_INT_PRINT_DEC\": time:%i (%2.2f) size:%i (%2.2f)\\n\",\n-\t       (HOST_WIDEST_INT) histogram[i]->count,\n+      fprintf (file, \"  %\"PRId64\": time:%i (%2.2f) size:%i (%2.2f)\\n\",\n+\t       (int64_t) histogram[i]->count,\n \t       histogram[i]->time,\n \t       cumulated_time * 100.0 / overall_time,\n \t       histogram[i]->size,\n@@ -516,18 +516,18 @@ ipa_profile (void)\n \t{\n \t  gcov_type min, cumulated_time = 0, cumulated_size = 0;\n \n-\t  fprintf (dump_file, \"Overall time: \"HOST_WIDEST_INT_PRINT_DEC\"\\n\", \n-\t\t   (HOST_WIDEST_INT)overall_time);\n+\t  fprintf (dump_file, \"Overall time: %\"PRId64\"\\n\",\n+\t\t   (int64_t)overall_time);\n \t  min = get_hot_bb_threshold ();\n           for (i = 0; i < (int)histogram.length () && histogram[i]->count >= min;\n \t       i++)\n \t    {\n \t      cumulated_time += histogram[i]->count * histogram[i]->time;\n \t      cumulated_size += histogram[i]->size;\n \t    }\n-\t  fprintf (dump_file, \"GCOV min count: \"HOST_WIDEST_INT_PRINT_DEC\n+\t  fprintf (dump_file, \"GCOV min count: %\"PRId64\n \t\t   \" Time:%3.2f%% Size:%3.2f%%\\n\", \n-\t\t   (HOST_WIDEST_INT)min,\n+\t\t   (int64_t)min,\n \t\t   cumulated_time * 100.0 / overall_time,\n \t\t   cumulated_size * 100.0 / overall_size);\n \t}\n@@ -551,9 +551,9 @@ ipa_profile (void)\n \t      cumulated_time += histogram[i]->count * histogram[i]->time;\n \t      cumulated_size += histogram[i]->size;\n \t    }\n-\t  fprintf (dump_file, \"Determined min count: \"HOST_WIDEST_INT_PRINT_DEC\n+\t  fprintf (dump_file, \"Determined min count: %\"PRId64\n \t\t   \" Time:%3.2f%% Size:%3.2f%%\\n\", \n-\t\t   (HOST_WIDEST_INT)threshold,\n+\t\t   (int64_t)threshold,\n \t\t   cumulated_time * 100.0 / overall_time,\n \t\t   cumulated_size * 100.0 / overall_size);\n \t}"}, {"sha": "36e7e87995232ae12ff2e60fa79cbdd9d2fe253a", "filename": "gcc/ira-color.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fira-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fira-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-color.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -53,7 +53,7 @@ struct allocno_hard_regs\n   HARD_REG_SET set;\n   /* Overall (spilling) cost of all allocnos with given register\n      set.  */\n-  HOST_WIDEST_INT cost;\n+  int64_t cost;\n };\n \n typedef struct allocno_hard_regs_node *allocno_hard_regs_node_t;\n@@ -254,7 +254,7 @@ init_allocno_hard_regs (void)\n /* Add (or update info about) allocno hard registers with SET and\n    COST.  */\n static allocno_hard_regs_t\n-add_allocno_hard_regs (HARD_REG_SET set, HOST_WIDEST_INT cost)\n+add_allocno_hard_regs (HARD_REG_SET set, int64_t cost)\n {\n   struct allocno_hard_regs temp;\n   allocno_hard_regs_t hv;\n@@ -519,7 +519,7 @@ print_hard_regs_subforest (FILE *f, allocno_hard_regs_node_t roots,\n \tfprintf (f, \" \");\n       fprintf (f, \"%d:(\", node->preorder_num);\n       print_hard_reg_set (f, node->hard_regs->set, false);\n-      fprintf (f, \")@\" HOST_WIDEST_INT_PRINT_DEC \"\\n\", node->hard_regs->cost);\n+      fprintf (f, \")@%\"PRId64\"\\n\", node->hard_regs->cost);\n       print_hard_regs_subforest (f, node->first, level + 1);\n     }\n }"}, {"sha": "870162223f75a1d2de05284011982125b00d9f90", "filename": "gcc/ira-conflicts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fira-conflicts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fira-conflicts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-conflicts.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -115,8 +115,8 @@ build_conflict_bit_table (void)\n \t  = ((OBJECT_MAX (obj) - OBJECT_MIN (obj) + IRA_INT_BITS)\n \t     / IRA_INT_BITS);\n \tallocated_words_num += conflict_bit_vec_words_num;\n-\tif ((unsigned HOST_WIDEST_INT) allocated_words_num * sizeof (IRA_INT_TYPE)\n-\t    > (unsigned HOST_WIDEST_INT) IRA_MAX_CONFLICT_TABLE_SIZE * 1024 * 1024)\n+\tif ((uint64_t) allocated_words_num * sizeof (IRA_INT_TYPE)\n+\t    > (uint64_t) IRA_MAX_CONFLICT_TABLE_SIZE * 1024 * 1024)\n \t  {\n \t    if (internal_flag_ira_verbose > 0 && ira_dump_file != NULL)\n \t      fprintf"}, {"sha": "0e843938134ec0a3189823902730562b59156282", "filename": "gcc/loop-doloop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Floop-doloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Floop-doloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-doloop.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -417,7 +417,7 @@ doloop_modify (struct loop *loop, struct niter_desc *desc,\n     {\n       fprintf (dump_file, \"Doloop: Inserting doloop pattern (\");\n       if (desc->const_iter)\n-\tfprintf (dump_file, HOST_WIDEST_INT_PRINT_DEC, desc->niter);\n+\tfprintf (dump_file, \"%\"PRId64, desc->niter);\n       else\n \tfputs (\"runtime\", dump_file);\n       fputs (\" iterations).\\n\", dump_file);"}, {"sha": "ee6c71e8a47273949b1b512a21776cdd2c121ce3", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -1308,12 +1308,12 @@ iv_analysis_done (void)\n \n /* Computes inverse to X modulo (1 << MOD).  */\n \n-static unsigned HOST_WIDEST_INT\n-inverse (unsigned HOST_WIDEST_INT x, int mod)\n+static uint64_t\n+inverse (uint64_t x, int mod)\n {\n-  unsigned HOST_WIDEST_INT mask =\n-\t  ((unsigned HOST_WIDEST_INT) 1 << (mod - 1) << 1) - 1;\n-  unsigned HOST_WIDEST_INT rslt = 1;\n+  uint64_t mask =\n+\t  ((uint64_t) 1 << (mod - 1) << 1) - 1;\n+  uint64_t rslt = 1;\n   int i;\n \n   for (i = 0; i < mod - 1; i++)\n@@ -2263,13 +2263,13 @@ canonicalize_iv_subregs (struct rtx_iv *iv0, struct rtx_iv *iv1,\n    a number of fields in DESC already filled in.  OLD_NITER is the original\n    expression for the number of iterations, before we tried to simplify it.  */\n \n-static unsigned HOST_WIDEST_INT\n+static uint64_t\n determine_max_iter (struct loop *loop, struct niter_desc *desc, rtx old_niter)\n {\n   rtx niter = desc->niter_expr;\n   rtx mmin, mmax, cmp;\n-  unsigned HOST_WIDEST_INT nmax, inc;\n-  unsigned HOST_WIDEST_INT andmax = 0;\n+  uint64_t nmax, inc;\n+  uint64_t andmax = 0;\n \n   /* We used to look for constant operand 0 of AND,\n      but canonicalization should always make this impossible.  */\n@@ -2312,7 +2312,7 @@ determine_max_iter (struct loop *loop, struct niter_desc *desc, rtx old_niter)\n   if (andmax)\n     nmax = MIN (nmax, andmax);\n   if (dump_file)\n-    fprintf (dump_file, \";; Determined upper bound \"HOST_WIDEST_INT_PRINT_DEC\".\\n\",\n+    fprintf (dump_file, \";; Determined upper bound %\"PRId64\".\\n\",\n \t     nmax);\n   return nmax;\n }\n@@ -2331,8 +2331,8 @@ iv_number_of_iterations (struct loop *loop, rtx insn, rtx condition,\n   enum rtx_code cond;\n   enum machine_mode mode, comp_mode;\n   rtx mmin, mmax, mode_mmin, mode_mmax;\n-  unsigned HOST_WIDEST_INT s, size, d, inv, max;\n-  HOST_WIDEST_INT up, down, inc, step_val;\n+  uint64_t s, size, d, inv, max;\n+  int64_t up, down, inc, step_val;\n   int was_sharp = false;\n   rtx old_niter;\n   bool step_is_pow2;\n@@ -2679,7 +2679,7 @@ iv_number_of_iterations (struct loop *loop, rtx insn, rtx condition,\n \t  d *= 2;\n \t  size--;\n \t}\n-      bound = GEN_INT (((unsigned HOST_WIDEST_INT) 1 << (size - 1 ) << 1) - 1);\n+      bound = GEN_INT (((uint64_t) 1 << (size - 1 ) << 1) - 1);\n \n       tmp1 = lowpart_subreg (mode, iv1.base, comp_mode);\n       tmp = simplify_gen_binary (UMOD, mode, tmp1, gen_int_mode (d, mode));\n@@ -2833,7 +2833,7 @@ iv_number_of_iterations (struct loop *loop, rtx insn, rtx condition,\n \n   if (CONST_INT_P (desc->niter_expr))\n     {\n-      unsigned HOST_WIDEST_INT val = INTVAL (desc->niter_expr);\n+      uint64_t val = INTVAL (desc->niter_expr);\n \n       desc->const_iter = true;\n       desc->niter = val & GET_MODE_MASK (desc->mode);"}, {"sha": "4ce0830c4ca94da9e2364b3b16786854d3c82972", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -548,7 +548,7 @@ decide_peel_completely (struct loop *loop, int flags ATTRIBUTE_UNUSED)\n \t{\n \t  fprintf (dump_file,\n \t\t   \";; Not peeling loop completely, rolls too much (\");\n-\t  fprintf (dump_file, HOST_WIDEST_INT_PRINT_DEC, desc->niter);\n+\t  fprintf (dump_file, \"%\"PRId64, desc->niter);\n \t  fprintf (dump_file, \" iterations > %d [maximum peelings])\\n\", npeel);\n \t}\n       return;\n@@ -1429,8 +1429,8 @@ decide_peel_simple (struct loop *loop, int flags)\n \t  if (dump_file)\n \t    {\n \t      fprintf (dump_file, \";; Not peeling loop, rolls too much (\");\n-\t      fprintf (dump_file, HOST_WIDEST_INT_PRINT_DEC,\n-\t\t       (HOST_WIDEST_INT) (iterations.to_shwi () + 1));\n+\t      fprintf (dump_file, \"%\"PRId64,\n+\t\t       (int64_t) (iterations.to_shwi () + 1));\n \t      fprintf (dump_file, \" iterations > %d [maximum peelings])\\n\",\n \t\t       npeel);\n \t    }"}, {"sha": "d1c8d9f2cd54bc489acece30f71dc74a11f4bb9c", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -2241,7 +2241,7 @@ write_symbol (struct streamer_tree_cache_d *cache,\n   enum gcc_plugin_symbol_kind kind;\n   enum gcc_plugin_symbol_visibility visibility;\n   unsigned slot_num;\n-  unsigned HOST_WIDEST_INT size;\n+  uint64_t size;\n   const char *comdat;\n   unsigned char c;\n "}, {"sha": "6985c395dbc11b7afa584f566e960897846e383b", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -1,3 +1,8 @@\n+2014-05-26  Richard Biener  <rguenther@suse.de>\n+\n+\t* lto.c (lto_parse_hex): Use int64_t.\n+\t(lto_resolution_read): Likewise.\n+\n 2014-05-23  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* lto.c (read_cgraph_and_symbols): Grow ggc memory after streaming."}, {"sha": "431bd1800da0b05a2a44bdd700c231d8a27a09c9", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -2002,10 +2002,10 @@ lto_read_decls (struct lto_file_decl_data *decl_data, const void *data,\n \n /* Custom version of strtoll, which is not portable.  */\n \n-static HOST_WIDEST_INT\n+static int64_t\n lto_parse_hex (const char *p)\n {\n-  HOST_WIDEST_INT ret = 0;\n+  int64_t ret = 0;\n \n   for (; *p != '\\0'; ++p)\n     {\n@@ -2057,7 +2057,7 @@ lto_resolution_read (splay_tree file_ids, FILE *resolution, lto_file *file)\n     {\n       int t;\n       char offset_p[17];\n-      HOST_WIDEST_INT offset;\n+      int64_t offset;\n       t = fscanf (resolution, \"@0x%16s\", offset_p);\n       if (t != 1)\n         internal_error (\"could not parse file offset\");"}, {"sha": "709092352f05af5c5599bd175f3a0934c5166634", "filename": "gcc/mcf.c", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fmcf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fmcf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmcf.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -51,7 +51,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dumpfile.h\"\n \n /* CAP_INFINITY: Constant to represent infinite capacity.  */\n-#define CAP_INFINITY INTTYPE_MAXIMUM (HOST_WIDEST_INT)\n+#define CAP_INFINITY INTTYPE_MAXIMUM (int64_t)\n \n /* COST FUNCTION.  */\n #define K_POS(b)        ((b))\n@@ -203,23 +203,23 @@ dump_fixup_edge (FILE *file, fixup_graph_type *fixup_graph, fixup_edge_p fedge)\n \n   if (fedge->type)\n     {\n-      fprintf (file, \"flow/capacity=\" HOST_WIDEST_INT_PRINT_DEC \"/\",\n+      fprintf (file, \"flow/capacity=%\"PRId64 \"/\",\n \t       fedge->flow);\n       if (fedge->max_capacity == CAP_INFINITY)\n \tfputs (\"+oo,\", file);\n       else\n-\tfprintf (file, \"\" HOST_WIDEST_INT_PRINT_DEC \",\", fedge->max_capacity);\n+\tfprintf (file, \"%\"PRId64 \",\", fedge->max_capacity);\n     }\n \n   if (fedge->is_rflow_valid)\n     {\n       if (fedge->rflow == CAP_INFINITY)\n \tfputs (\" rflow=+oo.\", file);\n       else\n-\tfprintf (file, \" rflow=\" HOST_WIDEST_INT_PRINT_DEC \",\", fedge->rflow);\n+\tfprintf (file, \" rflow=%\"PRId64 \",\", fedge->rflow);\n     }\n \n-  fprintf (file, \" cost=\" HOST_WIDEST_INT_PRINT_DEC \".\", fedge->cost);\n+  fprintf (file, \" cost=%\"PRId64 \".\", fedge->cost);\n \n   fprintf (file, \"\\t(%d->%d)\", fedge->src, fedge->dest);\n \n@@ -626,9 +626,9 @@ create_fixup_graph (fixup_graph_type *fixup_graph)\n   if (dump_file)\n     {\n       fprintf (dump_file, \"\\nAdjust supply and demand:\\n\");\n-      fprintf (dump_file, \"supply_value=\" HOST_WIDEST_INT_PRINT_DEC \"\\n\",\n+      fprintf (dump_file, \"supply_value=%\"PRId64 \"\\n\",\n \t       supply_value);\n-      fprintf (dump_file, \"demand_value=\" HOST_WIDEST_INT_PRINT_DEC \"\\n\",\n+      fprintf (dump_file, \"demand_value=%\"PRId64 \"\\n\",\n \t       demand_value);\n     }\n \n@@ -898,10 +898,10 @@ cancel_negative_cycle (fixup_graph_type *fixup_graph,\n     {\n       fprintf (dump_file, \"%d\", cycle[k]);\n       fprintf (dump_file,\n-\t       \": (\" HOST_WIDEST_INT_PRINT_DEC \", \" HOST_WIDEST_INT_PRINT_DEC\n+\t       \": (%\"PRId64 \", %\"PRId64\n \t       \")\\n\", sum_cost, cycle_flow);\n       fprintf (dump_file,\n-\t       \"Augment cycle with \" HOST_WIDEST_INT_PRINT_DEC \"\\n\",\n+\t       \"Augment cycle with %\"PRId64 \"\\n\",\n \t       cycle_flow);\n     }\n \n@@ -1093,10 +1093,10 @@ find_max_flow (fixup_graph_type *fixup_graph, int source, int sink)\n \t      fprintf (dump_file, \"<-\");\n \t    }\n \t  fprintf (dump_file,\n-\t\t   \"ENTRY  (path_capacity=\" HOST_WIDEST_INT_PRINT_DEC \")\\n\",\n+\t\t   \"ENTRY  (path_capacity=%\"PRId64 \")\\n\",\n \t\t   increment);\n \t  fprintf (dump_file,\n-\t\t   \"Network flow is \" HOST_WIDEST_INT_PRINT_DEC \".\\n\",\n+\t\t   \"Network flow is %\"PRId64 \".\\n\",\n \t\t   max_flow);\n \t}\n     }\n@@ -1133,15 +1133,15 @@ adjust_cfg_counts (fixup_graph_type *fixup_graph)\n       /* Fixup BB.  */\n       if (dump_file)\n         fprintf (dump_file,\n-                 \"BB%d: \" HOST_WIDEST_INT_PRINT_DEC \"\", bb->index, bb->count);\n+                 \"BB%d: %\"PRId64 \"\", bb->index, bb->count);\n \n       pfedge = find_fixup_edge (fixup_graph, i, i + 1);\n       if (pfedge->flow)\n         {\n           bb->count += pfedge->flow;\n \t  if (dump_file)\n \t    {\n-\t      fprintf (dump_file, \" + \" HOST_WIDEST_INT_PRINT_DEC \"(\",\n+\t      fprintf (dump_file, \" + %\"PRId64 \"(\",\n \t               pfedge->flow);\n \t      print_edge (dump_file, fixup_graph, i, i + 1);\n \t      fprintf (dump_file, \")\");\n@@ -1156,15 +1156,15 @@ adjust_cfg_counts (fixup_graph_type *fixup_graph)\n           bb->count -= pfedge_n->flow;\n \t  if (dump_file)\n \t    {\n-\t      fprintf (dump_file, \" - \" HOST_WIDEST_INT_PRINT_DEC \"(\",\n+\t      fprintf (dump_file, \" - %\"PRId64 \"(\",\n \t\t       pfedge_n->flow);\n \t      print_edge (dump_file, fixup_graph, i + 1,\n \t\t\t  pfedge->norm_vertex_index);\n \t      fprintf (dump_file, \")\");\n \t    }\n         }\n       if (dump_file)\n-        fprintf (dump_file, \" = \" HOST_WIDEST_INT_PRINT_DEC \"\\n\", bb->count);\n+        fprintf (dump_file, \" = %\"PRId64 \"\\n\", bb->count);\n \n       /* Fixup edge.  */\n       FOR_EACH_EDGE (e, ei, bb->succs)\n@@ -1175,7 +1175,7 @@ adjust_cfg_counts (fixup_graph_type *fixup_graph)\n \n           j = 2 * e->dest->index;\n           if (dump_file)\n-\t    fprintf (dump_file, \"%d->%d: \" HOST_WIDEST_INT_PRINT_DEC \"\",\n+\t    fprintf (dump_file, \"%d->%d: %\"PRId64 \"\",\n \t\t     bb->index, e->dest->index, e->count);\n \n           pfedge = find_fixup_edge (fixup_graph, i + 1, j);\n@@ -1188,7 +1188,7 @@ adjust_cfg_counts (fixup_graph_type *fixup_graph)\n \t          e->count += pfedge->flow;\n \t          if (dump_file)\n \t\t    {\n-\t\t      fprintf (dump_file, \" + \" HOST_WIDEST_INT_PRINT_DEC \"(\",\n+\t\t      fprintf (dump_file, \" + %\"PRId64 \"(\",\n \t\t\t       pfedge->flow);\n \t\t      print_edge (dump_file, fixup_graph, i + 1, j);\n \t\t      fprintf (dump_file, \")\");\n@@ -1203,7 +1203,7 @@ adjust_cfg_counts (fixup_graph_type *fixup_graph)\n \t          e->count -= pfedge_n->flow;\n \t          if (dump_file)\n \t\t    {\n-\t\t      fprintf (dump_file, \" - \" HOST_WIDEST_INT_PRINT_DEC \"(\",\n+\t\t      fprintf (dump_file, \" - %\"PRId64 \"(\",\n \t\t\t       pfedge_n->flow);\n \t\t      print_edge (dump_file, fixup_graph, j,\n \t\t\t          pfedge->norm_vertex_index);\n@@ -1223,7 +1223,7 @@ adjust_cfg_counts (fixup_graph_type *fixup_graph)\n \t      if (dump_file)\n \t        {\n \t          fprintf (dump_file, \"(self edge)\");\n-\t          fprintf (dump_file, \" + \" HOST_WIDEST_INT_PRINT_DEC \"(\",\n+\t          fprintf (dump_file, \" + %\"PRId64 \"(\",\n \t\t           pfedge_n->flow);\n \t          print_edge (dump_file, fixup_graph, i + 1,\n \t\t\t      pfedge->norm_vertex_index);\n@@ -1234,7 +1234,7 @@ adjust_cfg_counts (fixup_graph_type *fixup_graph)\n           if (bb->count)\n \t    e->probability = REG_BR_PROB_BASE * e->count / bb->count;\n           if (dump_file)\n-\t    fprintf (dump_file, \" = \" HOST_WIDEST_INT_PRINT_DEC \"\\t(%.1f%%)\\n\",\n+\t    fprintf (dump_file, \" = %\"PRId64 \"\\t(%.1f%%)\\n\",\n \t\t     e->count, e->probability * 100.0 / REG_BR_PROB_BASE);\n         }\n     }\n@@ -1287,14 +1287,14 @@ adjust_cfg_counts (fixup_graph_type *fixup_graph)\n                || (bb->count != sum_edge_counts (bb->succs)))\n             {\n               fprintf (dump_file,\n-                       \"BB%d(\" HOST_WIDEST_INT_PRINT_DEC \")  **INVALID**: \",\n+                       \"BB%d(%\"PRId64 \")  **INVALID**: \",\n                        bb->index, bb->count);\n               fprintf (stderr,\n-                       \"******** BB%d(\" HOST_WIDEST_INT_PRINT_DEC\n+                       \"******** BB%d(%\"PRId64\n                        \")  **INVALID**: \\n\", bb->index, bb->count);\n-              fprintf (dump_file, \"in_edges=\" HOST_WIDEST_INT_PRINT_DEC \" \",\n+              fprintf (dump_file, \"in_edges=%\"PRId64 \" \",\n                        sum_edge_counts (bb->preds));\n-              fprintf (dump_file, \"out_edges=\" HOST_WIDEST_INT_PRINT_DEC \"\\n\",\n+              fprintf (dump_file, \"out_edges=%\"PRId64 \"\\n\",\n                        sum_edge_counts (bb->succs));\n             }\n          }"}, {"sha": "16caa8fe64f33626ca96ea5bde9e8fda841f9c6d", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -396,7 +396,7 @@ doloop_register_get (rtx head ATTRIBUTE_UNUSED, rtx tail ATTRIBUTE_UNUSED)\n    this constant.  Otherwise return 0.  */\n static rtx\n const_iteration_count (rtx count_reg, basic_block pre_header,\n-\t\t       HOST_WIDEST_INT * count)\n+\t\t       int64_t * count)\n {\n   rtx insn;\n   rtx head, tail;\n@@ -1450,16 +1450,16 @@ sms_schedule (void)\n \t      if (profile_info && flag_branch_probabilities)\n \t    \t{\n \t      \t  fprintf (dump_file, \"SMS loop-count \");\n-\t      \t  fprintf (dump_file, HOST_WIDEST_INT_PRINT_DEC,\n-\t             \t   (HOST_WIDEST_INT) bb->count);\n+\t      \t  fprintf (dump_file, \"%\"PRId64,\n+\t             \t   (int64_t) bb->count);\n \t      \t  fprintf (dump_file, \"\\n\");\n                   fprintf (dump_file, \"SMS trip-count \");\n-                  fprintf (dump_file, HOST_WIDEST_INT_PRINT_DEC,\n-                           (HOST_WIDEST_INT) trip_count);\n+                  fprintf (dump_file, \"%\"PRId64,\n+                           (int64_t) trip_count);\n                   fprintf (dump_file, \"\\n\");\n \t      \t  fprintf (dump_file, \"SMS profile-sum-max \");\n-\t      \t  fprintf (dump_file, HOST_WIDEST_INT_PRINT_DEC,\n-\t          \t   (HOST_WIDEST_INT) profile_info->sum_max);\n+\t      \t  fprintf (dump_file, \"%\"PRId64,\n+\t          \t   (int64_t) profile_info->sum_max);\n \t      \t  fprintf (dump_file, \"\\n\");\n \t    \t}\n \t    }\n@@ -1540,7 +1540,7 @@ sms_schedule (void)\n       rtx head, tail;\n       rtx count_reg, count_init;\n       int mii, rec_mii, stage_count, min_cycle;\n-      HOST_WIDEST_INT loop_count = 0;\n+      int64_t loop_count = 0;\n       bool opt_sc_p;\n \n       if (! (g = g_arr[loop->num]))\n@@ -1571,12 +1571,12 @@ sms_schedule (void)\n \t  if (profile_info && flag_branch_probabilities)\n \t    {\n \t      fprintf (dump_file, \"SMS loop-count \");\n-\t      fprintf (dump_file, HOST_WIDEST_INT_PRINT_DEC,\n-\t               (HOST_WIDEST_INT) bb->count);\n+\t      fprintf (dump_file, \"%\"PRId64,\n+\t               (int64_t) bb->count);\n \t      fprintf (dump_file, \"\\n\");\n \t      fprintf (dump_file, \"SMS profile-sum-max \");\n-\t      fprintf (dump_file, HOST_WIDEST_INT_PRINT_DEC,\n-\t               (HOST_WIDEST_INT) profile_info->sum_max);\n+\t      fprintf (dump_file, \"%\"PRId64,\n+\t               (int64_t) profile_info->sum_max);\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n \t  fprintf (dump_file, \"SMS doloop\\n\");\n@@ -1602,7 +1602,7 @@ sms_schedule (void)\n       if (dump_file && count_init)\n         {\n           fprintf (dump_file, \"SMS const-doloop \");\n-          fprintf (dump_file, HOST_WIDEST_INT_PRINT_DEC,\n+          fprintf (dump_file, \"%\"PRId64,\n \t\t     loop_count);\n           fprintf (dump_file, \"\\n\");\n         }\n@@ -1663,9 +1663,9 @@ sms_schedule (void)\n \t\t  fprintf (dump_file, \"SMS failed... \\n\");\n \t\t  fprintf (dump_file, \"SMS sched-failed (stage-count=%d,\"\n \t\t\t   \" loop-count=\", stage_count);\n-\t\t  fprintf (dump_file, HOST_WIDEST_INT_PRINT_DEC, loop_count);\n+\t\t  fprintf (dump_file, \"%\"PRId64, loop_count);\n \t\t  fprintf (dump_file, \", trip-count=\");\n-\t\t  fprintf (dump_file, HOST_WIDEST_INT_PRINT_DEC, trip_count);\n+\t\t  fprintf (dump_file, \"%\"PRId64, trip_count);\n \t\t  fprintf (dump_file, \")\\n\");\n \t\t}\n \t      break;"}, {"sha": "55a645d893fe3a44efb5909cfbd0fe7fde9c2a9e", "filename": "gcc/predict.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -739,12 +739,10 @@ dump_prediction (FILE *file, enum br_predictor predictor, int probability,\n \n   if (bb->count)\n     {\n-      fprintf (file, \"  exec \");\n-      fprintf (file, HOST_WIDEST_INT_PRINT_DEC, bb->count);\n+      fprintf (file, \"  exec %\"PRId64, bb->count);\n       if (e)\n \t{\n-\t  fprintf (file, \" hit \");\n-\t  fprintf (file, HOST_WIDEST_INT_PRINT_DEC, e->count);\n+\t  fprintf (file, \" hit %\"PRId64, e->count);\n \t  fprintf (file, \" (%.1f%%)\", e->count * 100.0 / bb->count);\n \t}\n     }"}, {"sha": "e315c41642ed11d0754d2eb413b2a7f4160c2f12", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -271,8 +271,6 @@ pp_get_prefix (const pretty_printer *pp) { return pp->prefix; }\n   while (0)\n #define pp_wide_integer(PP, I) \\\n    pp_scalar (PP, HOST_WIDE_INT_PRINT_DEC, (HOST_WIDE_INT) I)\n-#define pp_widest_integer(PP, I) \\\n-   pp_scalar (PP, HOST_WIDEST_INT_PRINT_DEC, (HOST_WIDEST_INT) I)\n #define pp_pointer(PP, P)      pp_scalar (PP, \"%p\", P)\n \n #define pp_identifier(PP, ID)  pp_string (PP, (pp_translate_identifiers (PP) \\"}, {"sha": "3282ee7a3c40ab762c811a86939bdc6441653664", "filename": "gcc/profile.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -237,10 +237,10 @@ get_working_sets (void)\n           ws_info = &gcov_working_sets[ws_ix];\n           /* Print out the percentage using int arithmatic to avoid float.  */\n           fprintf (dump_file, \"\\t\\t%u.%02u%%: num counts=%u, min counter=\"\n-                   HOST_WIDEST_INT_PRINT_DEC \"\\n\",\n+                   \"%\"PRId64 \"\\n\",\n                    pct / 100, pct - (pct / 100 * 100),\n                    ws_info->num_counters,\n-                   (HOST_WIDEST_INT)ws_info->min_counter);\n+                   (int64_t)ws_info->min_counter);\n         }\n     }\n }\n@@ -318,7 +318,7 @@ is_edge_inconsistent (vec<edge, va_gc> *edges)\n \t      if (dump_file)\n \t\t{\n \t\t  fprintf (dump_file,\n-\t\t  \t   \"Edge %i->%i is inconsistent, count\"HOST_WIDEST_INT_PRINT_DEC,\n+\t\t  \t   \"Edge %i->%i is inconsistent, count%\"PRId64,\n \t\t\t   e->src->index, e->dest->index, e->count);\n \t\t  dump_bb (dump_file, e->src, 0, TDF_DETAILS);\n \t\t  dump_bb (dump_file, e->dest, 0, TDF_DETAILS);\n@@ -367,7 +367,7 @@ is_inconsistent (void)\n \t  if (dump_file)\n \t    {\n \t      fprintf (dump_file, \"BB %i count is negative \"\n-\t\t       HOST_WIDEST_INT_PRINT_DEC,\n+\t\t       \"%\"PRId64,\n \t\t       bb->index,\n \t\t       bb->count);\n \t      dump_bb (dump_file, bb, 0, TDF_DETAILS);\n@@ -379,7 +379,7 @@ is_inconsistent (void)\n \t  if (dump_file)\n \t    {\n \t      fprintf (dump_file, \"BB %i count does not match sum of incoming edges \"\n-\t\t       HOST_WIDEST_INT_PRINT_DEC\" should be \" HOST_WIDEST_INT_PRINT_DEC,\n+\t\t       \"%\"PRId64\" should be %\"PRId64,\n \t\t       bb->index,\n \t\t       bb->count,\n \t\t       sum_edge_counts (bb->preds));\n@@ -394,7 +394,7 @@ is_inconsistent (void)\n \t  if (dump_file)\n \t    {\n \t      fprintf (dump_file, \"BB %i count does not match sum of outgoing edges \"\n-\t\t       HOST_WIDEST_INT_PRINT_DEC\" should be \" HOST_WIDEST_INT_PRINT_DEC,\n+\t\t       \"%\"PRId64\" should be %\"PRId64,\n \t\t       bb->index,\n \t\t       bb->count,\n \t\t       sum_edge_counts (bb->succs));\n@@ -471,8 +471,8 @@ read_profile_edge_counts (gcov_type *exec_counts)\n \t      {\n \t\tfprintf (dump_file, \"\\nRead edge from %i to %i, count:\",\n \t\t\t bb->index, e->dest->index);\n-\t\tfprintf (dump_file, HOST_WIDEST_INT_PRINT_DEC,\n-\t\t\t (HOST_WIDEST_INT) e->count);\n+\t\tfprintf (dump_file, \"%\"PRId64,\n+\t\t\t (int64_t) e->count);\n \t      }\n \t  }\n     }"}, {"sha": "d3cec27364444c2ba749136b4248e2ce9606c521", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -491,6 +491,7 @@ extern void *realloc (void *, size_t);\n #endif\n \n #ifdef HAVE_INTTYPES_H\n+#define __STDC_FORMAT_MACROS\n #include <inttypes.h>\n #endif\n \n@@ -1070,7 +1071,7 @@ helper_const_non_const_cast (const char *p)\n #define DEBUG_VARIABLE\n #endif\n \n-/* Get definitions of HOST_WIDE_INT and HOST_WIDEST_INT.  */\n+/* Get definitions of HOST_WIDE_INT.  */\n #include \"hwint.h\"\n \n #endif /* ! GCC_SYSTEM_H */"}, {"sha": "c5b4aeeb4cdcc64831aaf2678acd6b0008d821d0", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -3487,12 +3487,6 @@ pp_double_int (pretty_printer *pp, double_int d, bool uns)\n     pp_wide_integer (pp, d.low);\n   else if (d.fits_uhwi ())\n     pp_unsigned_wide_integer (pp, d.low);\n-  else if (HOST_BITS_PER_DOUBLE_INT == HOST_BITS_PER_WIDEST_INT)\n-    pp_scalar (pp,\n-\t       uns\n-\t       ? HOST_WIDEST_INT_PRINT_UNSIGNED : HOST_WIDEST_INT_PRINT_DEC,\n-\t       (HOST_WIDEST_INT) ((((unsigned HOST_WIDEST_INT) d.high << 1)\n-\t\t\t\t   << (HOST_BITS_PER_WIDE_INT - 1)) | d.low));\n   else\n     {\n       unsigned HOST_WIDE_INT low = d.low;"}, {"sha": "d9afccff6a5eca7cd816ae240f7b1b1722ae4030", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 27, "deletions": 30, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -1620,7 +1620,7 @@ make_pass_cse_sincos (gcc::context *ctxt)\n    still have a size of 2 but this time a range of 1.  */\n \n struct symbolic_number {\n-  unsigned HOST_WIDEST_INT n;\n+  uint64_t n;\n   int size;\n   tree base_addr;\n   tree offset;\n@@ -1633,14 +1633,14 @@ struct symbolic_number {\n /* The number which the find_bswap_or_nop_1 result should match in\n    order to have a nop.  The number is masked according to the size of\n    the symbolic number before using it.  */\n-#define CMPNOP (sizeof (HOST_WIDEST_INT) < 8 ? 0 : \\\n-  (unsigned HOST_WIDEST_INT)0x08070605 << 32 | 0x04030201)\n+#define CMPNOP (sizeof (int64_t) < 8 ? 0 : \\\n+  (uint64_t)0x08070605 << 32 | 0x04030201)\n \n /* The number which the find_bswap_or_nop_1 result should match in\n    order to have a byte swap.  The number is masked according to the\n    size of the symbolic number before using it.  */\n-#define CMPXCHG (sizeof (HOST_WIDEST_INT) < 8 ? 0 : \\\n-  (unsigned HOST_WIDEST_INT)0x01020304 << 32 | 0x05060708)\n+#define CMPXCHG (sizeof (int64_t) < 8 ? 0 : \\\n+  (uint64_t)0x01020304 << 32 | 0x05060708)\n \n /* Perform a SHIFT or ROTATE operation by COUNT bits on symbolic\n    number N.  Return false if the requested operation is not permitted\n@@ -1656,8 +1656,8 @@ do_shift_rotate (enum tree_code code,\n \n   /* Zero out the extra bits of N in order to avoid them being shifted\n      into the significant bits.  */\n-  if (n->size < (int)sizeof (HOST_WIDEST_INT))\n-    n->n &= ((unsigned HOST_WIDEST_INT)1 << (n->size * BITS_PER_UNIT)) - 1;\n+  if (n->size < (int)sizeof (int64_t))\n+    n->n &= ((uint64_t)1 << (n->size * BITS_PER_UNIT)) - 1;\n \n   switch (code)\n     {\n@@ -1677,8 +1677,8 @@ do_shift_rotate (enum tree_code code,\n       return false;\n     }\n   /* Zero unused bits for size.  */\n-  if (n->size < (int)sizeof (HOST_WIDEST_INT))\n-    n->n &= ((unsigned HOST_WIDEST_INT)1 << (n->size * BITS_PER_UNIT)) - 1;\n+  if (n->size < (int)sizeof (int64_t))\n+    n->n &= ((uint64_t)1 << (n->size * BITS_PER_UNIT)) - 1;\n   return true;\n }\n \n@@ -1829,8 +1829,8 @@ find_bswap_or_nop_1 (gimple stmt, struct symbolic_number *n, int limit)\n \t  n->range = n->size;\n \t  n->n = CMPNOP;\n \n-\t  if (n->size < (int)sizeof (HOST_WIDEST_INT))\n-\t    n->n &= ((unsigned HOST_WIDEST_INT)1 <<\n+\t  if (n->size < (int)sizeof (int64_t))\n+\t    n->n &= ((uint64_t)1 <<\n \t\t     (n->size * BITS_PER_UNIT)) - 1;\n \n \t  if (!source_expr1)\n@@ -1845,8 +1845,8 @@ find_bswap_or_nop_1 (gimple stmt, struct symbolic_number *n, int limit)\n \tcase BIT_AND_EXPR:\n \t  {\n \t    int i;\n-\t    unsigned HOST_WIDEST_INT val = widest_int_cst_value (rhs2);\n-\t    unsigned HOST_WIDEST_INT tmp = val;\n+\t    uint64_t val = int_cst_value (rhs2);\n+\t    uint64_t tmp = val;\n \n \t    /* Only constants masking full bytes are allowed.  */\n \t    for (i = 0; i < n->size; i++, tmp >>= BITS_PER_UNIT)\n@@ -1871,11 +1871,11 @@ find_bswap_or_nop_1 (gimple stmt, struct symbolic_number *n, int limit)\n \t    if (type_size % BITS_PER_UNIT != 0)\n \t      return NULL_TREE;\n \n-\t    if (type_size / BITS_PER_UNIT < (int)(sizeof (HOST_WIDEST_INT)))\n+\t    if (type_size / BITS_PER_UNIT < (int)(sizeof (int64_t)))\n \t      {\n \t\t/* If STMT casts to a smaller type mask out the bits not\n \t\t   belonging to the target type.  */\n-\t\tn->n &= ((unsigned HOST_WIDEST_INT)1 << type_size) - 1;\n+\t\tn->n &= ((uint64_t)1 << type_size) - 1;\n \t      }\n \t    n->size = type_size / BITS_PER_UNIT;\n \t    if (!n->base_addr)\n@@ -1894,7 +1894,7 @@ find_bswap_or_nop_1 (gimple stmt, struct symbolic_number *n, int limit)\n     {\n       int i;\n       struct symbolic_number n1, n2;\n-      unsigned HOST_WIDEST_INT mask;\n+      uint64_t mask;\n       tree source_expr2;\n \n       if (code != BIT_IOR_EXPR)\n@@ -1924,7 +1924,7 @@ find_bswap_or_nop_1 (gimple stmt, struct symbolic_number *n, int limit)\n \n \t  if (source_expr1 != source_expr2)\n \t    {\n-\t      HOST_WIDEST_INT inc, mask;\n+\t      int64_t inc, mask;\n \t      unsigned i;\n \t      HOST_WIDE_INT off_sub;\n \t      struct symbolic_number *n_ptr;\n@@ -1950,7 +1950,7 @@ find_bswap_or_nop_1 (gimple stmt, struct symbolic_number *n, int limit)\n \t      off_sub = n2.bytepos - n1.bytepos;\n \n \t      /* Check that the range of memory covered < biggest int size.  */\n-\t      if (off_sub + n2.range > (int) sizeof (HOST_WIDEST_INT))\n+\t      if (off_sub + n2.range > (int) sizeof (int64_t))\n \t        return NULL_TREE;\n \t      n->range = n2.range + off_sub;\n \n@@ -1962,7 +1962,7 @@ find_bswap_or_nop_1 (gimple stmt, struct symbolic_number *n, int limit)\n \t\tn_ptr = &n1;\n \t      else\n \t\tn_ptr = &n2;\n-\t      for (i = 0; i < sizeof (HOST_WIDEST_INT); i++, inc <<= 8,\n+\t      for (i = 0; i < sizeof (int64_t); i++, inc <<= 8,\n \t\t   mask <<= 8)\n \t\t{\n \t\t  if (n_ptr->n & mask)\n@@ -1984,7 +1984,7 @@ find_bswap_or_nop_1 (gimple stmt, struct symbolic_number *n, int limit)\n \t  n->size = n1.size;\n \t  for (i = 0, mask = 0xff; i < n->size; i++, mask <<= BITS_PER_UNIT)\n \t    {\n-\t      unsigned HOST_WIDEST_INT masked1, masked2;\n+\t      uint64_t masked1, masked2;\n \n \t      masked1 = n1.n & mask;\n \t      masked2 = n2.n & mask;\n@@ -2018,8 +2018,8 @@ find_bswap_or_nop (gimple stmt, struct symbolic_number *n, bool *bswap)\n /* The number which the find_bswap_or_nop_1 result should match in order\n    to have a full byte swap.  The number is shifted to the right\n    according to the size of the symbolic number before using it.  */\n-  unsigned HOST_WIDEST_INT cmpxchg = CMPXCHG;\n-  unsigned HOST_WIDEST_INT cmpnop = CMPNOP;\n+  uint64_t cmpxchg = CMPXCHG;\n+  uint64_t cmpnop = CMPNOP;\n \n   tree source_expr;\n   int limit;\n@@ -2040,19 +2040,19 @@ find_bswap_or_nop (gimple stmt, struct symbolic_number *n, bool *bswap)\n   if (n->base_addr)\n     {\n       int rsize;\n-      unsigned HOST_WIDEST_INT tmpn;\n+      uint64_t tmpn;\n \n       for (tmpn = n->n, rsize = 0; tmpn; tmpn >>= BITS_PER_UNIT, rsize++);\n       n->range = rsize;\n     }\n \n   /* Zero out the extra bits of N and CMP*.  */\n-  if (n->range < (int)sizeof (HOST_WIDEST_INT))\n+  if (n->range < (int)sizeof (int64_t))\n     {\n-      unsigned HOST_WIDEST_INT mask;\n+      uint64_t mask;\n \n-      mask = ((unsigned HOST_WIDEST_INT)1 << (n->range * BITS_PER_UNIT)) - 1;\n-      cmpxchg >>= (sizeof (HOST_WIDEST_INT) - n->range) * BITS_PER_UNIT;\n+      mask = ((uint64_t)1 << (n->range * BITS_PER_UNIT)) - 1;\n+      cmpxchg >>= (sizeof (int64_t) - n->range) * BITS_PER_UNIT;\n       cmpnop &= mask;\n     }\n \n@@ -2268,9 +2268,6 @@ pass_optimize_bswap::execute (function *fun)\n   if (BITS_PER_UNIT != 8)\n     return 0;\n \n-  if (sizeof (HOST_WIDEST_INT) < 8)\n-    return 0;\n-\n   bswap16_p = (builtin_decl_explicit_p (BUILT_IN_BSWAP16)\n \t       && optab_handler (bswap_optab, HImode) != CODE_FOR_nothing);\n   bswap32_p = (builtin_decl_explicit_p (BUILT_IN_BSWAP32)"}, {"sha": "86ebe205b4aa1fccbf57d6b59a19bf6ed1c69444", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -568,7 +568,7 @@ streamer_alloc_tree (struct lto_input_block *ib, struct data_in *data_in,\n   enum tree_code code;\n   tree result;\n #ifdef LTO_STREAMER_DEBUG\n-  HOST_WIDEST_INT orig_address_in_writer;\n+  HOST_WIDE_INT orig_address_in_writer;\n #endif\n \n   result = NULL_TREE;"}, {"sha": "f7799bccd5f18459a7357384564daf6b9f17ffc7", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -990,8 +990,8 @@ streamer_write_tree_header (struct output_block *ob, tree expr)\n      and the writer do not agree on a streamed node, the pointer\n      value for EXPR can be used to track down the differences in\n      the debugger.  */\n-  gcc_assert ((HOST_WIDEST_INT) (intptr_t) expr == (intptr_t) expr);\n-  streamer_write_hwi (ob, (HOST_WIDEST_INT) (intptr_t) expr);\n+  gcc_assert ((HOST_WIDE_INT) (intptr_t) expr == (intptr_t) expr);\n+  streamer_write_hwi (ob, (HOST_WIDE_INT) (intptr_t) expr);\n #endif\n \n   /* The text in strings and identifiers are completely emitted in"}, {"sha": "bfdfebdf2de6b663c8deb0828082c3d9760e8f64", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -10481,40 +10481,6 @@ int_cst_value (const_tree x)\n   return val;\n }\n \n-/* Return value of a constant X and sign-extend it.  */\n-\n-HOST_WIDEST_INT\n-widest_int_cst_value (const_tree x)\n-{\n-  unsigned bits = TYPE_PRECISION (TREE_TYPE (x));\n-  unsigned HOST_WIDEST_INT val = TREE_INT_CST_LOW (x);\n-\n-#if HOST_BITS_PER_WIDEST_INT > HOST_BITS_PER_WIDE_INT\n-  gcc_assert (HOST_BITS_PER_WIDEST_INT >= HOST_BITS_PER_DOUBLE_INT);\n-  gcc_assert (TREE_INT_CST_NUNITS (x) == 2);\n-\n-  if (TREE_INT_CST_NUNITS (x) == 1)\n-    val = HOST_WIDE_INT (val);\n-  else\n-    val |= (((unsigned HOST_WIDEST_INT) TREE_INT_CST_ELT (x, 1))\n-\t    << HOST_BITS_PER_WIDE_INT);\n-#else\n-  /* Make sure the sign-extended value will fit in a HOST_WIDE_INT.  */\n-  gcc_assert (TREE_INT_CST_NUNITS (x) == 1);\n-#endif\n-\n-  if (bits < HOST_BITS_PER_WIDEST_INT)\n-    {\n-      bool negative = ((val >> (bits - 1)) & 1) != 0;\n-      if (negative)\n-\tval |= (~(unsigned HOST_WIDEST_INT) 0) << (bits - 1) << 1;\n-      else\n-\tval &= ~((~(unsigned HOST_WIDEST_INT) 0) << (bits - 1) << 1);\n-    }\n-\n-  return val;\n-}\n-\n /* If TYPE is an integral or pointer type, return an integer type with\n    the same precision which is unsigned iff UNSIGNEDP is true, or itself\n    if TYPE is already an integer type of signedness UNSIGNEDP.  */"}, {"sha": "1382c78bb3170225146cd94dd1e210ac14ea745a", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -4270,7 +4270,6 @@ extern tree build_range_type (tree, tree, tree);\n extern tree build_nonshared_range_type (tree, tree, tree);\n extern bool subrange_type_for_debug_p (const_tree, tree *, tree *);\n extern HOST_WIDE_INT int_cst_value (const_tree);\n-extern HOST_WIDEST_INT widest_int_cst_value (const_tree);\n extern tree tree_block (tree);\n extern void tree_set_block (tree, tree);\n extern location_t *block_nonartificial_location (tree);"}, {"sha": "5b194976570f9e8af6325e3c149e5d341c1bbc32", "filename": "gcc/value-prof.c", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9243bfced3137c8fc9830b7c43c4cdabc313cc6/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=a9243bfced3137c8fc9830b7c43c4cdabc313cc6", "patch": "@@ -266,11 +266,11 @@ dump_histogram_value (FILE *dump_file, histogram_value hist)\n \t   unsigned int i;\n \t   fprintf (dump_file, \" [\");\n            for (i = 0; i < hist->hdata.intvl.steps; i++)\n-\t     fprintf (dump_file, \" %d:\"HOST_WIDEST_INT_PRINT_DEC,\n+\t     fprintf (dump_file, \" %d:%\"PRId64,\n \t\t      hist->hdata.intvl.int_start + i,\n-\t\t      (HOST_WIDEST_INT) hist->hvalue.counters[i]);\n-\t   fprintf (dump_file, \" ] outside range:\"HOST_WIDEST_INT_PRINT_DEC,\n-\t\t    (HOST_WIDEST_INT) hist->hvalue.counters[i]);\n+\t\t      (int64_t) hist->hvalue.counters[i]);\n+\t   fprintf (dump_file, \" ] outside range:%\"PRId64,\n+\t\t    (int64_t) hist->hvalue.counters[i]);\n \t}\n       fprintf (dump_file, \".\\n\");\n       break;\n@@ -279,10 +279,10 @@ dump_histogram_value (FILE *dump_file, histogram_value hist)\n       fprintf (dump_file, \"Pow2 counter \");\n       if (hist->hvalue.counters)\n \t{\n-\t   fprintf (dump_file, \"pow2:\"HOST_WIDEST_INT_PRINT_DEC\n-\t\t    \" nonpow2:\"HOST_WIDEST_INT_PRINT_DEC,\n-\t\t    (HOST_WIDEST_INT) hist->hvalue.counters[0],\n-\t\t    (HOST_WIDEST_INT) hist->hvalue.counters[1]);\n+\t   fprintf (dump_file, \"pow2:%\"PRId64\n+\t\t    \" nonpow2:%\"PRId64,\n+\t\t    (int64_t) hist->hvalue.counters[0],\n+\t\t    (int64_t) hist->hvalue.counters[1]);\n \t}\n       fprintf (dump_file, \".\\n\");\n       break;\n@@ -291,12 +291,12 @@ dump_histogram_value (FILE *dump_file, histogram_value hist)\n       fprintf (dump_file, \"Single value \");\n       if (hist->hvalue.counters)\n \t{\n-\t   fprintf (dump_file, \"value:\"HOST_WIDEST_INT_PRINT_DEC\n-\t\t    \" match:\"HOST_WIDEST_INT_PRINT_DEC\n-\t\t    \" wrong:\"HOST_WIDEST_INT_PRINT_DEC,\n-\t\t    (HOST_WIDEST_INT) hist->hvalue.counters[0],\n-\t\t    (HOST_WIDEST_INT) hist->hvalue.counters[1],\n-\t\t    (HOST_WIDEST_INT) hist->hvalue.counters[2]);\n+\t   fprintf (dump_file, \"value:%\"PRId64\n+\t\t    \" match:%\"PRId64\n+\t\t    \" wrong:%\"PRId64,\n+\t\t    (int64_t) hist->hvalue.counters[0],\n+\t\t    (int64_t) hist->hvalue.counters[1],\n+\t\t    (int64_t) hist->hvalue.counters[2]);\n \t}\n       fprintf (dump_file, \".\\n\");\n       break;\n@@ -305,10 +305,10 @@ dump_histogram_value (FILE *dump_file, histogram_value hist)\n       fprintf (dump_file, \"Average value \");\n       if (hist->hvalue.counters)\n \t{\n-\t   fprintf (dump_file, \"sum:\"HOST_WIDEST_INT_PRINT_DEC\n-\t\t    \" times:\"HOST_WIDEST_INT_PRINT_DEC,\n-\t\t    (HOST_WIDEST_INT) hist->hvalue.counters[0],\n-\t\t    (HOST_WIDEST_INT) hist->hvalue.counters[1]);\n+\t   fprintf (dump_file, \"sum:%\"PRId64\n+\t\t    \" times:%\"PRId64,\n+\t\t    (int64_t) hist->hvalue.counters[0],\n+\t\t    (int64_t) hist->hvalue.counters[1]);\n \t}\n       fprintf (dump_file, \".\\n\");\n       break;\n@@ -317,8 +317,8 @@ dump_histogram_value (FILE *dump_file, histogram_value hist)\n       fprintf (dump_file, \"IOR value \");\n       if (hist->hvalue.counters)\n \t{\n-\t   fprintf (dump_file, \"ior:\"HOST_WIDEST_INT_PRINT_DEC,\n-\t\t    (HOST_WIDEST_INT) hist->hvalue.counters[0]);\n+\t   fprintf (dump_file, \"ior:%\"PRId64,\n+\t\t    (int64_t) hist->hvalue.counters[0]);\n \t}\n       fprintf (dump_file, \".\\n\");\n       break;\n@@ -327,34 +327,34 @@ dump_histogram_value (FILE *dump_file, histogram_value hist)\n       fprintf (dump_file, \"Constant delta \");\n       if (hist->hvalue.counters)\n \t{\n-\t   fprintf (dump_file, \"value:\"HOST_WIDEST_INT_PRINT_DEC\n-\t\t    \" match:\"HOST_WIDEST_INT_PRINT_DEC\n-\t\t    \" wrong:\"HOST_WIDEST_INT_PRINT_DEC,\n-\t\t    (HOST_WIDEST_INT) hist->hvalue.counters[0],\n-\t\t    (HOST_WIDEST_INT) hist->hvalue.counters[1],\n-\t\t    (HOST_WIDEST_INT) hist->hvalue.counters[2]);\n+\t   fprintf (dump_file, \"value:%\"PRId64\n+\t\t    \" match:%\"PRId64\n+\t\t    \" wrong:%\"PRId64,\n+\t\t    (int64_t) hist->hvalue.counters[0],\n+\t\t    (int64_t) hist->hvalue.counters[1],\n+\t\t    (int64_t) hist->hvalue.counters[2]);\n \t}\n       fprintf (dump_file, \".\\n\");\n       break;\n     case HIST_TYPE_INDIR_CALL:\n       fprintf (dump_file, \"Indirect call \");\n       if (hist->hvalue.counters)\n \t{\n-\t   fprintf (dump_file, \"value:\"HOST_WIDEST_INT_PRINT_DEC\n-\t\t    \" match:\"HOST_WIDEST_INT_PRINT_DEC\n-\t\t    \" all:\"HOST_WIDEST_INT_PRINT_DEC,\n-\t\t    (HOST_WIDEST_INT) hist->hvalue.counters[0],\n-\t\t    (HOST_WIDEST_INT) hist->hvalue.counters[1],\n-\t\t    (HOST_WIDEST_INT) hist->hvalue.counters[2]);\n+\t   fprintf (dump_file, \"value:%\"PRId64\n+\t\t    \" match:%\"PRId64\n+\t\t    \" all:%\"PRId64,\n+\t\t    (int64_t) hist->hvalue.counters[0],\n+\t\t    (int64_t) hist->hvalue.counters[1],\n+\t\t    (int64_t) hist->hvalue.counters[2]);\n \t}\n       fprintf (dump_file, \".\\n\");\n       break;\n     case HIST_TYPE_TIME_PROFILE:\n       fprintf (dump_file, \"Time profile \");\n       if (hist->hvalue.counters)\n       {\n-        fprintf (dump_file, \"time:\"HOST_WIDEST_INT_PRINT_DEC,\n-                 (HOST_WIDEST_INT) hist->hvalue.counters[0]);\n+        fprintf (dump_file, \"time:%\"PRId64,\n+                 (int64_t) hist->hvalue.counters[0]);\n       }\n       fprintf (dump_file, \".\\n\");\n       break;\n@@ -1541,8 +1541,8 @@ gimple_ic_transform (gimple_stmt_iterator *gsi)\n       print_generic_expr (dump_file, direct_call->decl, TDF_SLIM);\n       fprintf (dump_file, \" transformation on insn postponned to ipa-profile\");\n       print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n-      fprintf (dump_file, \"hist->count \"HOST_WIDEST_INT_PRINT_DEC\n-\t       \" hist->all \"HOST_WIDEST_INT_PRINT_DEC\"\\n\", count, all);\n+      fprintf (dump_file, \"hist->count %\"PRId64\n+\t       \" hist->all %\"PRId64\"\\n\", count, all);\n     }\n \n   return true;"}]}