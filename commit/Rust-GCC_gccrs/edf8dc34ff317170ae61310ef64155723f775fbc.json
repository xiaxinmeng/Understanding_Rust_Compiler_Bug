{"sha": "edf8dc34ff317170ae61310ef64155723f775fbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRmOGRjMzRmZjMxNzE3MGFlNjEzMTBlZjY0MTU1NzIzZjc3NWZiYw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-01-12T17:37:47Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-01-12T17:37:47Z"}, "message": "c99_functions.c: Add function prototypes to avoid warnings from -Wstrict-prototypes...\n\n\n\t* intrinsics/c99_functions.c: Add function prototypes to avoid\n\twarnings from -Wstrict-prototypes -Wmissing-prototypes.  On Tru64\n\twork around a brain-dead libm by redirecting calls to cabs{,f,l}\n\tto a local __gfc_cabs{,f,l}.\n\nFrom-SVN: r109646", "tree": {"sha": "e0c22bb94361ac906b41acf62af6059ec502d411", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0c22bb94361ac906b41acf62af6059ec502d411"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edf8dc34ff317170ae61310ef64155723f775fbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edf8dc34ff317170ae61310ef64155723f775fbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edf8dc34ff317170ae61310ef64155723f775fbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edf8dc34ff317170ae61310ef64155723f775fbc/comments", "author": null, "committer": null, "parents": [{"sha": "4cd5f6193db267e7ac990abcc6a04dbaac800bc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cd5f6193db267e7ac990abcc6a04dbaac800bc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cd5f6193db267e7ac990abcc6a04dbaac800bc8"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "9eaa989c063141f92c0abfcef8052dcd370c3245", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edf8dc34ff317170ae61310ef64155723f775fbc/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edf8dc34ff317170ae61310ef64155723f775fbc/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=edf8dc34ff317170ae61310ef64155723f775fbc", "patch": "@@ -1,3 +1,10 @@\n+2006-01-12  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* intrinsics/c99_functions.c: Add function prototypes to avoid\n+\twarnings from -Wstrict-prototypes -Wmissing-prototypes.  On Tru64\n+\twork around a brain-dead libm by redirecting calls to cabs{,f,l}\n+\tto a local __gfc_cabs{,f,l}.\n+\n 2006-01-07  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \t* configure.ac: Remove check for sys/mman.h."}, {"sha": "feb4c08b4791f4357300b2d2841249f0fcd45d6e", "filename": "libgfortran/intrinsics/c99_functions.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edf8dc34ff317170ae61310ef64155723f775fbc/libgfortran%2Fintrinsics%2Fc99_functions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edf8dc34ff317170ae61310ef64155723f775fbc/libgfortran%2Fintrinsics%2Fc99_functions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fc99_functions.c?ref=edf8dc34ff317170ae61310ef64155723f775fbc", "patch": "@@ -35,6 +35,33 @@ Boston, MA 02110-1301, USA.  */\n #define C99_PROTOS_H WE_DONT_WANT_PROTOS_NOW\n #include \"libgfortran.h\"\n \n+/* Tru64's <math.h> declares a non-C99 compliant implementation of cabs,\n+   which takes two floating point arguments instead of a single complex.\n+   To work around this we redirect cabs{,f,l} calls to __gfc_cabs{,f,l}.  */\n+\n+#ifdef __osf__\n+#undef HAVE_CABS\n+#undef HAVE_CABSF\n+#undef HAVE_CABSL\n+#define cabs __gfc_cabs\n+#define cabsf __gfc_cabsf\n+#define cabsl __gfc_cabsl\n+#endif\n+\n+/* Prototypes to silence -Wstrict-prototypes -Wmissing-prototypes.  */\n+\n+float cabsf(float complex);\n+double cabs(double complex);\n+long double cabsl(long double complex);\n+\n+float cargf(float complex);\n+double carg(double complex);\n+long double cargl(long double complex);\n+\n+float complex clog10f(float complex);\n+double complex clog10(double complex);\n+long double complex clog10l(long double complex);\n+\n \n #ifndef HAVE_ACOSF\n #define HAVE_ACOSF 1"}]}