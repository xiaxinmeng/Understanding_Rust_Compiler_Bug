{"sha": "3f361bd362bc57cd6a1c12fb8fc259ec22c9d945", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YzNjFiZDM2MmJjNTdjZDZhMWMxMmZiOGZjMjU5ZWMyMmM5ZDk0NQ==", "commit": {"author": {"name": "The Other", "email": "simplytheother@gmail.com", "date": "2021-03-18T09:27:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-18T09:27:01Z"}, "message": "Modify parser error message reporting system to allow recovery (#290)\n\nAdded new parser Error struct\r\n\r\nThis is to make the parser reusable for macro expansion.", "tree": {"sha": "b3a17470590047029ec5a09eba64dacb36409bf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3a17470590047029ec5a09eba64dacb36409bf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f361bd362bc57cd6a1c12fb8fc259ec22c9d945", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgUxzlCRBK7hj4Ov3rIwAAdHIIAJQwHS1upxmcyvtfFDbMu3Q3\n6XoCSghMVr08FmT+jABgnkA5EnF8Meoaqdm2T0KNp2z42IK8SCfR6g2V12bN9Siy\nLVGiMO2veNo2OY76Fxma5wF/LlxtLJ+blzdbveVkOR1CgoDeYcEbtzxWjtXJ2exk\nVKGMpsawemv70hrmCTAJ0P8PpDUJflo79e/FpKWNNTF7E9iOkfM0UZyhws/HFLSq\nsX4aJYBkNuhJiMI2kf+QAxPQdYHneo+eQSYIsto44O21sxplMGSX359c1ThB1/J6\nsxqyJaTsiTOoro1m587eLX96DWFIgCJCfyKoubia38aDMvTz3ONVCLUDnHzINc0=\n=Za/D\n-----END PGP SIGNATURE-----\n", "payload": "tree b3a17470590047029ec5a09eba64dacb36409bf9\nparent 0581e64df94130ed08c26240478cf5ea43912311\nauthor The Other <simplytheother@gmail.com> 1616059621 +0800\ncommitter GitHub <noreply@github.com> 1616059621 +0000\n\nModify parser error message reporting system to allow recovery (#290)\n\nAdded new parser Error struct\r\n\r\nThis is to make the parser reusable for macro expansion."}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f361bd362bc57cd6a1c12fb8fc259ec22c9d945", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f361bd362bc57cd6a1c12fb8fc259ec22c9d945", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f361bd362bc57cd6a1c12fb8fc259ec22c9d945/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0581e64df94130ed08c26240478cf5ea43912311", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0581e64df94130ed08c26240478cf5ea43912311", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0581e64df94130ed08c26240478cf5ea43912311"}], "stats": {"total": 2230, "additions": 1291, "deletions": 939}, "files": [{"sha": "f683770f5b53226b0e60f8018c104141a356a611", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 1243, "deletions": 939, "changes": 2182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f361bd362bc57cd6a1c12fb8fc259ec22c9d945/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f361bd362bc57cd6a1c12fb8fc259ec22c9d945/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=3f361bd362bc57cd6a1c12fb8fc259ec22c9d945"}, {"sha": "f6faa962fce49ad0981298f656bbe1c0b14597d9", "filename": "gcc/rust/parse/rust-parse.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f361bd362bc57cd6a1c12fb8fc259ec22c9d945/gcc%2Frust%2Fparse%2Frust-parse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f361bd362bc57cd6a1c12fb8fc259ec22c9d945/gcc%2Frust%2Fparse%2Frust-parse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse.h?ref=3f361bd362bc57cd6a1c12fb8fc259ec22c9d945", "patch": "@@ -19,6 +19,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"rust-lex.h\"\n #include \"rust-ast-full.h\"\n+#include \"rust-diagnostics.h\"\n \n namespace Rust {\n /* HACK: used to resolve the expression-or-statement problem at the end of a\n@@ -616,6 +617,8 @@ template <typename ManagedTokenSource> class Parser\n   bool done_end_or_else ();\n   bool done_end_of_file ();\n \n+  void add_error (Error error) { error_table.push_back (std::move (error)); }\n+\n public:\n   // Construct parser with specified \"managed\" token source.\n   Parser (ManagedTokenSource tokenSource) : lexer (std::move (tokenSource)) {}\n@@ -627,9 +630,14 @@ template <typename ManagedTokenSource> class Parser\n   void debug_dump_lex_output (std::ostream &out);\n   void debug_dump_ast_output (AST::Crate &crate, std::ostream &out);\n \n+  // Returns whether any parsing errors have occurred.\n+  bool has_errors () const { return !error_table.empty (); }\n+\n private:\n   // The token source (usually lexer) associated with the parser.\n   ManagedTokenSource lexer;\n+  // The error list.\n+  std::vector<Error> error_table;\n };\n } // namespace Rust\n "}, {"sha": "8bcaef6c236869df574ad12126ccc43f6ff5b854", "filename": "gcc/rust/rust-diagnostics.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f361bd362bc57cd6a1c12fb8fc259ec22c9d945/gcc%2Frust%2Frust-diagnostics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f361bd362bc57cd6a1c12fb8fc259ec22c9d945/gcc%2Frust%2Frust-diagnostics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-diagnostics.cc?ref=3f361bd362bc57cd6a1c12fb8fc259ec22c9d945", "patch": "@@ -207,3 +207,16 @@ rust_debug (const Location location, const char *fmt, ...)\n   free (mbuf);\n   rust_be_inform (location, rval);\n }\n+\n+namespace Rust {\n+Error::Error (const Location location, const char *fmt, ...) : locus (location)\n+{\n+  va_list ap;\n+\n+  va_start (ap, fmt);\n+  message = expand_message (fmt, ap);\n+  va_end (ap);\n+\n+  message.shrink_to_fit ();\n+}\n+} // namespace Rust"}, {"sha": "c67e3d4d48593d52050cda4c5b75613d557ae665", "filename": "gcc/rust/rust-diagnostics.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f361bd362bc57cd6a1c12fb8fc259ec22c9d945/gcc%2Frust%2Frust-diagnostics.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f361bd362bc57cd6a1c12fb8fc259ec22c9d945/gcc%2Frust%2Frust-diagnostics.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-diagnostics.h?ref=3f361bd362bc57cd6a1c12fb8fc259ec22c9d945", "patch": "@@ -86,4 +86,31 @@ rust_be_inform (const Location, const std::string &infomsg);\n extern void\n rust_be_get_quotechars (const char **open_quote, const char **close_quote);\n \n+namespace Rust {\n+/* A structure used to represent an error. Useful for enabling\n+ * errors to be ignored, e.g. if backtracking. */\n+struct Error\n+{\n+  Location locus;\n+  std::string message;\n+  // TODO: store more stuff? e.g. node id?\n+\n+  Error (Location locus, std::string message)\n+    : locus (locus), message (std::move (message))\n+  {\n+    message.shrink_to_fit ();\n+  }\n+\n+  // TODO: the attribute part might be incorrect\n+  Error (Location locus, const char *fmt,\n+\t ...) /*RUST_ATTRIBUTE_GCC_DIAG (2, 3)*/ RUST_ATTRIBUTE_GCC_DIAG (3, 4);\n+\n+  // Irreversibly emits the error as an error.\n+  void emit_error () const { rust_error_at (locus, message.c_str ()); }\n+\n+  // Irreversibly emits the error as a fatal error.\n+  void emit_fatal_error () const { rust_fatal_error (locus, message.c_str ()); }\n+};\n+} // namespace Rust\n+\n #endif // !defined(RUST_DIAGNOSTICS_H)"}]}