{"sha": "2afeb1ca38dbb7c8708272452417426e46b4d6ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFmZWIxY2EzOGRiYjdjODcwODI3MjQ1MjQxNzQyNmU0NmI0ZDZlZA==", "commit": {"author": {"name": "Mark Eggleston", "email": "mark.eggleston@codethink.com", "date": "2019-11-08T14:28:57Z"}, "committer": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2019-11-08T14:28:57Z"}, "message": "Allow CHARACTER literals in assignments and data statements.\n\nAllows character literals to used to assign values to non-character variables\nin the same way that Hollerith constants are used. In addition character\nliterals can be used in data statements just like Hollerith constants.\n\nWarnings of such use are output to discourage this usage as it is a non-standard\nlegacy feature and must be explicitly enabled.\n \nEnabled by -fdec and -fdec-char-conversions.\n\n\nCo-Authored-By: Jim MacArthur <jim.macarthur@codethink.co.uk>\n\nFrom-SVN: r277975", "tree": {"sha": "64a5d856971870bc05da3d569128a278bcffa3a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64a5d856971870bc05da3d569128a278bcffa3a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2afeb1ca38dbb7c8708272452417426e46b4d6ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2afeb1ca38dbb7c8708272452417426e46b4d6ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2afeb1ca38dbb7c8708272452417426e46b4d6ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2afeb1ca38dbb7c8708272452417426e46b4d6ed/comments", "author": {"login": "markeggleston", "id": 42180582, "node_id": "MDQ6VXNlcjQyMTgwNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/42180582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markeggleston", "html_url": "https://github.com/markeggleston", "followers_url": "https://api.github.com/users/markeggleston/followers", "following_url": "https://api.github.com/users/markeggleston/following{/other_user}", "gists_url": "https://api.github.com/users/markeggleston/gists{/gist_id}", "starred_url": "https://api.github.com/users/markeggleston/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markeggleston/subscriptions", "organizations_url": "https://api.github.com/users/markeggleston/orgs", "repos_url": "https://api.github.com/users/markeggleston/repos", "events_url": "https://api.github.com/users/markeggleston/events{/privacy}", "received_events_url": "https://api.github.com/users/markeggleston/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4e9d58d16767b1bc686f0c4b3bd2da25dc71e8f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e9d58d16767b1bc686f0c4b3bd2da25dc71e8f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e9d58d16767b1bc686f0c4b3bd2da25dc71e8f3"}], "stats": {"total": 814, "additions": 778, "deletions": 36}, "files": [{"sha": "18e4c023f8a2a9acfdd3bee146831527d883a146", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -1,3 +1,33 @@\n+2019-11-08  Mark Eggleston  <mark.eggleston@codethink.com>\n+\tJim MacArthur  <jim.macarthur@codethink.co.uk>\n+\n+\t* arith.c (hollerith2representation): Use OPT_Wcharacter_truncation in\n+\tcall to gfc_warning.  Add character2representation, gfc_character2int,\n+\tgfc_character2real, gfc_character2complex and gfc_character2logical.\n+\t* arith.h: Add prototypes for gfc_character2int, gfc_character2real,\n+\tgfc_character2complex and gfc_character2logical.\n+\t* expr.c (gfc_check_assign): Return true if left hand side is numeric\n+\tor logical and the right hand side is character and of kind=1.\n+\t* gfortran.texi: Add -fdec-char-conversions.\n+\t* intrinsic.c (add_conversions): Add conversions from character to\n+\tinteger, real, complex and logical types for their supported kinds.\n+\t(gfc_convert_type_warn): Reorder if..else if.. sequence so that warnings\n+\tare produced for conversion to logical.\n+\t* invoke.texi: Add option to list of options.\n+\t* invoke.texi: Add Character conversion subsection to Extensions\n+\tsection.\n+\t* lang.opt: Add new option.\n+\t* options.c (set_dec_flags): Add SET_BITFLAG for\n+\tflag_dec_char_conversions.\n+\t* resolve.c (resolve_ordindary_assign): Issue error if the left hand\n+\tside is numeric or logical and the right hand side is a character\n+\tvariable.\n+\t* simplify.c (gfc_convert_constant): Assign the conversion function\n+\tdepending on destination type.\n+\t* trans-const.c (gfc_constant_to_tree): Use OPT_Wsurprising in\n+\tgfc_warning allowing the warning to be switched off only if\n+\tflag_dec_char_conversions is enabled.\n+\n 2019-11-08  Tobias Burnus  <tobias@codesourcery.com\n \n \tPR fortran/91253"}, {"sha": "10b3e5c103f1fdee01b69d4c3c4e3c1dcbe57765", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 92, "deletions": 4, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -2510,9 +2510,9 @@ hollerith2representation (gfc_expr *result, gfc_expr *src)\n \n   if (src_len > result_len)\n     {\n-      gfc_warning (0,\n-\t\t   \"The Hollerith constant at %L is too long to convert to %qs\",\n-\t\t   &src->where, gfc_typename(&result->ts));\n+      gfc_warning (OPT_Wcharacter_truncation, \"The Hollerith constant at %L \"\n+\t\t   \"is truncated in conversion to %qs\", &src->where,\n+\t\t   gfc_typename(&result->ts));\n     }\n \n   result->representation.string = XCNEWVEC (char, result_len + 1);\n@@ -2527,6 +2527,36 @@ hollerith2representation (gfc_expr *result, gfc_expr *src)\n }\n \n \n+/* Helper function to set the representation in a character conversion.\n+   This assumes that the ts.type and ts.kind of the result have already\n+   been set.  */\n+\n+static void\n+character2representation (gfc_expr *result, gfc_expr *src)\n+{\n+  size_t src_len, result_len;\n+  int i;\n+  src_len = src->value.character.length;\n+  gfc_target_expr_size (result, &result_len);\n+\n+  if (src_len > result_len)\n+    gfc_warning (OPT_Wcharacter_truncation, \"The character constant at %L is \"\n+\t\t \"truncated in conversion to %s\", &src->where,\n+\t\t gfc_typename(&result->ts));\n+\n+  result->representation.string = XCNEWVEC (char, result_len + 1);\n+\n+  for (i = 0; i < MIN (result_len, src_len); i++)\n+    result->representation.string[i] = (char) src->value.character.string[i];\n+\n+  if (src_len < result_len)\n+    memset (&result->representation.string[src_len], ' ',\n+\t    result_len - src_len);\n+\n+  result->representation.string[result_len] = '\\0'; /* For debugger.  */\n+  result->representation.length = result_len;\n+}\n+\n /* Convert Hollerith to integer. The constant will be padded or truncated.  */\n \n gfc_expr *\n@@ -2542,8 +2572,21 @@ gfc_hollerith2int (gfc_expr *src, int kind)\n   return result;\n }\n \n+/* Convert character to integer.  The constant will be padded or truncated.  */\n+\n+gfc_expr *\n+gfc_character2int (gfc_expr *src, int kind)\n+{\n+  gfc_expr *result;\n+  result = gfc_get_constant_expr (BT_INTEGER, kind, &src->where);\n+\n+  character2representation (result, src);\n+  gfc_interpret_integer (kind, (unsigned char *) result->representation.string,\n+\t\t\t result->representation.length, result->value.integer);\n+  return result;\n+}\n \n-/* Convert Hollerith to real. The constant will be padded or truncated.  */\n+/* Convert Hollerith to real.  The constant will be padded or truncated.  */\n \n gfc_expr *\n gfc_hollerith2real (gfc_expr *src, int kind)\n@@ -2558,6 +2601,21 @@ gfc_hollerith2real (gfc_expr *src, int kind)\n   return result;\n }\n \n+/* Convert character to real.  The constant will be padded or truncated.  */\n+\n+gfc_expr *\n+gfc_character2real (gfc_expr *src, int kind)\n+{\n+  gfc_expr *result;\n+  result = gfc_get_constant_expr (BT_REAL, kind, &src->where);\n+\n+  character2representation (result, src);\n+  gfc_interpret_float (kind, (unsigned char *) result->representation.string,\n+\t\t       result->representation.length, result->value.real);\n+\n+  return result;\n+}\n+\n \n /* Convert Hollerith to complex. The constant will be padded or truncated.  */\n \n@@ -2574,6 +2632,21 @@ gfc_hollerith2complex (gfc_expr *src, int kind)\n   return result;\n }\n \n+/* Convert character to complex. The constant will be padded or truncated.  */\n+\n+gfc_expr *\n+gfc_character2complex (gfc_expr *src, int kind)\n+{\n+  gfc_expr *result;\n+  result = gfc_get_constant_expr (BT_COMPLEX, kind, &src->where);\n+\n+  character2representation (result, src);\n+  gfc_interpret_complex (kind, (unsigned char *) result->representation.string,\n+\t\t\t result->representation.length, result->value.complex);\n+\n+  return result;\n+}\n+\n \n /* Convert Hollerith to character.  */\n \n@@ -2609,3 +2682,18 @@ gfc_hollerith2logical (gfc_expr *src, int kind)\n \n   return result;\n }\n+\n+/* Convert character to logical. The constant will be padded or truncated.  */\n+\n+gfc_expr *\n+gfc_character2logical (gfc_expr *src, int kind)\n+{\n+  gfc_expr *result;\n+  result = gfc_get_constant_expr (BT_LOGICAL, kind, &src->where);\n+\n+  character2representation (result, src);\n+  gfc_interpret_logical (kind, (unsigned char *) result->representation.string,\n+\t\t\t result->representation.length, &result->value.logical);\n+\n+  return result;\n+}"}, {"sha": "85c8b8cef415a65b6d97785fe4abd1baaf8ec94d", "filename": "gcc/fortran/arith.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ffortran%2Farith.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ffortran%2Farith.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.h?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -77,7 +77,11 @@ gfc_expr *gfc_hollerith2real (gfc_expr *, int);\n gfc_expr *gfc_hollerith2complex (gfc_expr *, int);\n gfc_expr *gfc_hollerith2character (gfc_expr *, int);\n gfc_expr *gfc_hollerith2logical (gfc_expr *, int);\n+gfc_expr *gfc_character2int (gfc_expr *, int);\n+gfc_expr *gfc_character2real (gfc_expr *, int);\n+gfc_expr *gfc_character2complex (gfc_expr *, int);\n gfc_expr *gfc_character2character (gfc_expr *, int);\n+gfc_expr *gfc_character2logical (gfc_expr *, int);\n \n #endif /* GFC_ARITH_H  */\n "}, {"sha": "9e3c8c422972e3f11e8ab6be27fdf30987a80eec", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -3722,6 +3722,12 @@ gfc_check_assign (gfc_expr *lvalue, gfc_expr *rvalue, int conform,\n \t  || rvalue->ts.type == BT_HOLLERITH)\n \treturn true;\n \n+      if (flag_dec_char_conversions && (gfc_numeric_ts (&lvalue->ts)\n+\t  || lvalue->ts.type == BT_LOGICAL)\n+\t  && rvalue->ts.type == BT_CHARACTER\n+\t  && rvalue->ts.kind == gfc_default_character_kind)\n+\treturn true;\n+\n       if (lvalue->ts.type == BT_LOGICAL && rvalue->ts.type == BT_LOGICAL)\n \treturn true;\n "}, {"sha": "a34ac5aa1bf706c1d120dfa8efaded8dffd3e8e2", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -1600,6 +1600,7 @@ additional compatibility extensions along with those enabled by\n * Unary operators::\n * Implicitly convert LOGICAL and INTEGER values::\n * Hollerith constants support::\n+* Character conversion::\n * Cray pointers::\n * CONVERT specifier::\n * OpenMP::\n@@ -1955,6 +1956,30 @@ obtained by using the @code{TRANSFER} statement, as in this example.\n @end smallexample\n \n \n+@node Character conversion\n+@subsection Character conversion\n+@cindex conversion, to character\n+\n+Allowing character literals to be used in a similar way to Hollerith constants\n+is a non-standard extension.  This feature is enabled using\n+-fdec-char-conversions and only applies to character literals of @code{kind=1}.\n+\n+Character literals can be used in @code{DATA} statements and assignments with\n+numeric (@code{INTEGER}, @code{REAL}, or @code{COMPLEX}) or @code{LOGICAL}\n+variables. Like Hollerith constants they are copied byte-wise fashion. The\n+constant will be padded with spaces or truncated to fit the size of the\n+variable in which it is stored.\n+\n+Examples:\n+@smallexample\n+      integer*4 x\n+      data x / 'abcd' /\n+\n+      x = 'A'       ! Will be padded.\n+      x = 'ab1234'  ! Will be truncated.\n+@end smallexample\n+\n+\n @node Cray pointers\n @subsection Cray pointers\n @cindex pointer, Cray"}, {"sha": "572967f5d4ebe77443d0bef3058d85a83ee46075", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 49, "deletions": 17, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -4025,6 +4025,29 @@ add_conversions (void)\n \t  add_conv (BT_LOGICAL, gfc_logical_kinds[j].kind,\n \t\t    BT_INTEGER, gfc_integer_kinds[i].kind, GFC_STD_LEGACY);\n \t}\n+\n+  /* DEC legacy feature allows character conversions similar to Hollerith\n+     conversions - the character data will transferred on a byte by byte\n+     basis.  */\n+  if (flag_dec_char_conversions)\n+    {\n+      /* Character-Integer conversions.  */\n+      for (i = 0; gfc_integer_kinds[i].kind != 0; i++)\n+\tadd_conv (BT_CHARACTER, gfc_default_character_kind,\n+\t\t  BT_INTEGER, gfc_integer_kinds[i].kind, GFC_STD_LEGACY);\n+      /* Character-Real conversions.  */\n+      for (i = 0; gfc_real_kinds[i].kind != 0; i++)\n+\tadd_conv (BT_CHARACTER, gfc_default_character_kind,\n+\t\t  BT_REAL, gfc_real_kinds[i].kind, GFC_STD_LEGACY);\n+      /* Character-Complex conversions.  */\n+      for (i = 0; gfc_real_kinds[i].kind != 0; i++)\n+\tadd_conv (BT_CHARACTER, gfc_default_character_kind,\n+\t\t  BT_COMPLEX, gfc_real_kinds[i].kind, GFC_STD_LEGACY);\n+      /* Character-Logical conversions.  */\n+      for (i = 0; gfc_logical_kinds[i].kind != 0; i++)\n+\tadd_conv (BT_CHARACTER, gfc_default_character_kind,\n+\t\t  BT_LOGICAL, gfc_logical_kinds[i].kind, GFC_STD_LEGACY);\n+    }\n }\n \n \n@@ -5119,8 +5142,10 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n   /* At this point, a conversion is necessary. A warning may be needed.  */\n   if ((gfc_option.warn_std & sym->standard) != 0)\n     {\n+      const char *type_name = is_char_constant ? gfc_typename (expr)\n+\t\t\t\t\t       : gfc_typename (&from_ts);\n       gfc_warning_now (0, \"Extension: Conversion from %s to %s at %L\",\n-\t\t       gfc_typename (&from_ts), gfc_dummy_typename (ts),\n+\t\t       type_name, gfc_dummy_typename (ts),\n \t\t       &expr->where);\n     }\n   else if (wflag)\n@@ -5135,14 +5160,14 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n \t     If range checking was disabled, but -Wconversion enabled,\n \t     a non range checked warning is generated below.  */\n \t}\n-      else if (from_ts.type == BT_LOGICAL || ts->type == BT_LOGICAL)\n+      else if (flag_dec_char_conversions && from_ts.type == BT_CHARACTER\n+\t       && (gfc_numeric_ts (ts) || ts->type == BT_LOGICAL))\n \t{\n-\t  /* Do nothing. This block exists only to simplify the other\n-\t     else-if expressions.\n-\t       LOGICAL <> LOGICAL    no warning, independent of kind values\n-\t       LOGICAL <> INTEGER    extension, warned elsewhere\n-\t       LOGICAL <> REAL       invalid, error generated elsewhere\n-\t       LOGICAL <> COMPLEX    invalid, error generated elsewhere  */\n+\t  const char *type_name = is_char_constant ? gfc_typename (expr)\n+\t\t\t\t\t\t   : gfc_typename (&from_ts);\n+\t  gfc_warning_now (OPT_Wconversion, \"Nonstandard conversion from %s \"\n+\t\t\t   \"to %s at %L\", type_name, gfc_typename (ts),\n+\t\t\t   &expr->where);\n \t}\n       else if (from_ts.type == ts->type\n \t       || (from_ts.type == BT_INTEGER && ts->type == BT_REAL)\n@@ -5159,7 +5184,7 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n \t\t\t\t \"conversion from %s to %s at %L\",\n \t\t\t\t gfc_typename (&from_ts), gfc_typename (ts),\n \t\t\t\t &expr->where);\n-\t      else if (warn_conversion_extra)\n+\t      else\n \t\tgfc_warning_now (OPT_Wconversion_extra, \"Conversion from %s to %s \"\n \t\t\t\t \"at %L\", gfc_typename (&from_ts),\n \t\t\t\t gfc_typename (ts), &expr->where);\n@@ -5171,7 +5196,7 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n \t{\n \t  /* Conversion from REAL/COMPLEX to INTEGER or COMPLEX to REAL\n \t     usually comes with a loss of information, regardless of kinds.  */\n-\t  if (warn_conversion && expr->expr_type != EXPR_CONSTANT)\n+\t  if (expr->expr_type != EXPR_CONSTANT)\n \t    gfc_warning_now (OPT_Wconversion, \"Possible change of value in \"\n \t\t\t     \"conversion from %s to %s at %L\",\n \t\t\t     gfc_typename (&from_ts), gfc_typename (ts),\n@@ -5180,13 +5205,21 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n       else if (from_ts.type == BT_HOLLERITH || ts->type == BT_HOLLERITH)\n \t{\n \t  /* If HOLLERITH is involved, all bets are off.  */\n-\t  if (warn_conversion)\n-\t    gfc_warning_now (OPT_Wconversion, \"Conversion from %s to %s at %L\",\n-\t\t\t     gfc_typename (&from_ts), gfc_dummy_typename (ts),\n-\t\t\t     &expr->where);\n+\t  gfc_warning_now (OPT_Wconversion, \"Conversion from %s to %s at %L\",\n+\t\t\t   gfc_typename (&from_ts), gfc_dummy_typename (ts),\n+\t\t\t   &expr->where);\n+\t}\n+      else if (from_ts.type == BT_LOGICAL || ts->type == BT_LOGICAL)\n+\t{\n+\t  /* Do nothing. This block exists only to simplify the other\n+\t     else-if expressions.\n+\t       LOGICAL <> LOGICAL    no warning, independent of kind values\n+\t       LOGICAL <> INTEGER    extension, warned elsewhere\n+\t       LOGICAL <> REAL       invalid, error generated elsewhere\n+\t       LOGICAL <> COMPLEX    invalid, error generated elsewhere  */\n \t}\n       else\n-        gcc_unreachable ();\n+\tgcc_unreachable ();\n     }\n \n   /* Insert a pre-resolved function call to the right function.  */\n@@ -5244,8 +5277,7 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n     }\n \n   gfc_internal_error (\"Cannot convert %qs to %qs at %L\", type_name,\n-\t\t      gfc_typename (ts),\n-\t\t      &expr->where);\n+\t\t      gfc_typename (ts), &expr->where);\n   /* Not reached */\n }\n "}, {"sha": "46ee3c9241bb57884a4bd93aa7924ffecc91c818", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -118,9 +118,9 @@ by type.  Explanations are in the following sections.\n @xref{Fortran Dialect Options,,Options controlling Fortran dialect}.\n @gccoptlist{-fall-intrinsics -fallow-argument-mismatch -fallow-invalid-boz @gol\n -fbackslash -fcray-pointer -fd-lines-as-code -fd-lines-as-comments -fdec @gol\n--fdec-structure-fdec-intrinsic-ints -fdec-static -fdec-math -fdec-include @gol\n--fdec-format-defaults -fdec-blank-format-item -fdefault-double-8 @gol\n--fdefault-integer-8 -fdefault-real-8 -fdefault-real-10 @gol\n+-fdec-char-conversions -fdec-structure -fdec-intrinsic-ints -fdec-static @gol\n+-fdec-math -fdec-include -fdec-format-defaults -fdec-blank-format-item @gol\n+-fdefault-double-8 -fdefault-integer-8 -fdefault-real-8 -fdefault-real-10 @gol\n -fdefault-real-16 -fdollar-ok -ffixed-line-length-@var{n} @gol\n -ffixed-line-length-none -fpad-source -ffree-form @gol\n -ffree-line-length-@var{n} -ffree-line-length-none -fimplicit-none @gol\n@@ -273,14 +273,19 @@ For details on GNU Fortran's implementation of these extensions see the\n full documentation.\n \n Other flags enabled by this switch are:\n-@option{-fdollar-ok} @option{-fcray-pointer} @option{-fdec-structure}\n-@option{-fdec-intrinsic-ints} @option{-fdec-static} @option{-fdec-math}\n-@option{-fdec-include} @option{-fdec-blank-format-item}\n+@option{-fdollar-ok} @option{-fcray-pointer} @option{-fdec-char-conversions}\n+@option{-fdec-structure} @option{-fdec-intrinsic-ints} @option{-fdec-static}\n+@option{-fdec-math} @option{-fdec-include} @option{-fdec-blank-format-item}\n @option{-fdec-format-defaults}\n \n If @option{-fd-lines-as-code}/@option{-fd-lines-as-comments} are unset, then\n @option{-fdec} also sets @option{-fd-lines-as-comments}.\n \n+@item -fdec-char-conversions\n+@opindex @code{fdec-char-conversions}\n+Enable the use of character literals in assignments and data statements\n+for non-character variables.\n+\n @item -fdec-structure\n @opindex @code{fdec-structure}\n Enable DEC @code{STRUCTURE} and @code{RECORD} as well as @code{UNION},"}, {"sha": "5fcd1ff907530ba1816cd3e80421bef6c5446e21", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -460,6 +460,11 @@ fdec-blank-format-item\n Fortran Var(flag_dec_blank_format_item)\n Enable the use of blank format items in format strings.\n \n+fdec-char-conversions\n+Fortran Var(flag_dec_char_conversions)\n+Enable the use of character literals in assignments and data statements\n+for non-character variables.\n+\n fdec-include\n Fortran Var(flag_dec_include)\n Enable legacy parsing of INCLUDE as statement."}, {"sha": "305c57de85dc602b954646ed9aa3644a61976d7c", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -76,6 +76,7 @@ set_dec_flags (int value)\n   SET_BITFLAG (flag_dec_include, value, value);\n   SET_BITFLAG (flag_dec_format_defaults, value, value);\n   SET_BITFLAG (flag_dec_blank_format_item, value, value);\n+  SET_BITFLAG (flag_dec_char_conversions, value, value);\n }\n \n /* Finalize DEC flags.  */"}, {"sha": "a39b9549d7e33396fbdd3f2fec17f30117c65d8b", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -10689,6 +10689,18 @@ resolve_ordinary_assign (gfc_code *code, gfc_namespace *ns)\n   lhs = code->expr1;\n   rhs = code->expr2;\n \n+  if ((gfc_numeric_ts (&lhs->ts) || lhs->ts.type == BT_LOGICAL)\n+      && rhs->ts.type == BT_CHARACTER\n+      && rhs->expr_type != EXPR_CONSTANT)\n+    {\n+      /* Use of -fdec-char-conversions allows assignment of character data\n+\t to non-character variables.  This not permited for nonconstant\n+\t strings.  */\n+      gfc_error (\"Cannot convert %s to %s at %L\", gfc_typename (rhs),\n+\t\t gfc_typename (lhs), &rhs->where);\n+      return false;\n+    }\n+\n   /* Handle the case of a BOZ literal on the RHS.  */\n   if (rhs->ts.type == BT_BOZ)\n     {"}, {"sha": "2eb1943c3eecb396b5896b24565103811a8e6721", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -8522,10 +8522,31 @@ gfc_convert_constant (gfc_expr *e, bt type, int kind)\n       break;\n \n     case BT_CHARACTER:\n-      if (type == BT_CHARACTER)\n-\tf = gfc_character2character;\n-      else\n-\tgoto oops;\n+      switch (type)\n+\t{\n+\tcase BT_INTEGER:\n+\t  f = gfc_character2int;\n+\t  break;\n+\n+\tcase BT_REAL:\n+\t  f = gfc_character2real;\n+\t  break;\n+\n+\tcase BT_COMPLEX:\n+\t  f = gfc_character2complex;\n+\t  break;\n+\n+\tcase BT_CHARACTER:\n+\t  f = gfc_character2character;\n+\t  break;\n+\n+\tcase BT_LOGICAL:\n+\t  f = gfc_character2logical;\n+\t  break;\n+\n+\tdefault:\n+\t  goto oops;\n+\t}\n       break;\n \n     default:"}, {"sha": "7ce02639373ebf8d905eed3299c82185c60ecac2", "filename": "gcc/fortran/trans-const.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ffortran%2Ftrans-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ffortran%2Ftrans-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-const.c?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tree.h\"\n #include \"gfortran.h\"\n+#include \"options.h\"\n #include \"trans.h\"\n #include \"fold-const.h\"\n #include \"stor-layout.h\"\n@@ -331,8 +332,9 @@ gfc_conv_constant_to_tree (gfc_expr * expr)\n \t\t\tgfc_build_string_const (expr->representation.length,\n \t\t\t\t\t\texpr->representation.string));\n \t  if (!integer_zerop (tmp) && !integer_onep (tmp))\n-\t    gfc_warning (0, \"Assigning value other than 0 or 1 to LOGICAL\"\n-\t\t\t \" has undefined result at %L\", &expr->where);\n+\t    gfc_warning (flag_dec_char_conversions ? OPT_Wsurprising : 0,\n+\t\t\t \"Assigning value other than 0 or 1 to LOGICAL has \"\n+\t\t\t \"undefined result at %L\", &expr->where);\n \t  return fold_convert (gfc_get_logical_type (expr->ts.kind), tmp);\n \t}\n       else"}, {"sha": "0c16e5a2ebb2bf6993802534bc141793b1b28371", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -1,3 +1,25 @@\n+2019-11-08 Mark Eggleston <mark.eggleston@codethink.com>\n+\tJim MacArthur <jim.macarthur@codethink.co.uk>\n+\n+\t* gfortran.dg/dec_char_conversion_in_assignment_1.f90: New test.\n+\t* gfortran.dg/dec_char_conversion_in_assignment_2.f90: New test.\n+\t* gfortran.dg/dec_char_conversion_in_assignment_3.f90: New test.\n+\t* gfortran.dg/dec_char_conversion_in_assignment_4.f90: New test.\n+\t* gfortran.dg/dec_char_conversion_in_assignment_5.f90: New test.\n+\t* gfortran.dg/dec_char_conversion_in_assignment_6.f90: New test.\n+\t* gfortran.dg/dec_char_conversion_in_assignment_7.f90: New test.\n+\t* gfortran.dg/dec_char_conversion_in_assignment_8.f90: New test.\n+\t* gfortran.dg/dec_char_conversion_in_data_1.f90: New test.\n+\t* gfortran.dg/dec_char_conversion_in_data_2.f90: New test.\n+\t* gfortran.dg/dec_char_conversion_in_data_3.f90: New test.\n+\t* gfortran.dg/dec_char_conversion_in_data_4.f90: New test.\n+\t* gfortran.dg/dec_char_conversion_in_data_5.f90: New test.\n+\t* gfortran.dg/dec_char_conversion_in_data_6.f90: New test.\n+\t* gfortran.dg/dec_char_conversion_in_data_7.f90: New test.\n+\t* gfortran.dg/hollerith5.f90: Add -Wsurprising to options.\n+\t* gfortran.dg/hollerith_legacy.f90: Add -Wsurprising to options.\n+\t* gfortran.dg/no_char_to_numeric_assign.f90: New test.\n+\n 2019-11-08  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \tPR tree-optimization/92351"}, {"sha": "9dc2ece1efd008d334438b3f13059f50626ee6ca", "filename": "gcc/testsuite/gfortran.dg/dec_char_conversion_in_assignment_1.f90", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_assignment_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_assignment_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_assignment_1.f90?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -0,0 +1,61 @@\n+! { dg-do run }\n+! { dg-options \"-fdec\" }\n+!\n+! Modified by Mark Eggleston <mark.eggleston@codethink.com>\n+!\n+program test\n+  integer(4) :: a\n+  real(4) :: b\n+  complex(4) :: c\n+  logical(4) :: d\n+  integer(4) :: e\n+  real(4) :: f\n+  complex(4) :: g\n+  logical(4) :: h\n+\n+  a = '1234'\n+  b = '1234'\n+  c = '12341234'\n+  d = '1234'\n+  e = 4h1234\n+  f = 4h1234\n+  g = 8h12341234\n+  h = 4h1234\n+  \n+  if (a.ne.e) stop 1\n+  if (b.ne.f) stop 2\n+  if (c.ne.g) stop 3\n+  if (d.neqv.h) stop 4\n+\n+  ! padded values\n+  a = '12'\n+  b = '12'\n+  c = '12234'\n+  d = '124'\n+  e = 2h12\n+  f = 2h12\n+  g = 5h12234\n+  h = 3h123\n+\n+  if (a.ne.e) stop 5\n+  if (b.ne.f) stop 6\n+  if (c.ne.g) stop 7\n+  if (d.neqv.h) stop 8\n+\n+  ! truncated values\n+  a = '123478'\n+  b = '123478'\n+  c = '12341234987'\n+  d = '1234abc'\n+  e = 6h123478\n+  f = 6h123478\n+  g = 11h12341234987\n+  h = 7h1234abc\n+\n+  if (a.ne.e) stop 5\n+  if (b.ne.f) stop 6\n+  if (c.ne.g) stop 7\n+  if (d.neqv.h) stop 8\n+\n+end program\n+"}, {"sha": "ffa71dc41267de6a2237d6ff79773d16f4eafeaa", "filename": "gcc/testsuite/gfortran.dg/dec_char_conversion_in_assignment_2.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_assignment_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_assignment_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_assignment_2.f90?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do run }\n+! { dg-options \"-fdec -Wconversion\" }\n+!\n+! Modified by Mark Eggleston <mark.eggleston@codethink.com>\n+!\n+include \"dec_char_conversion_in_assignment_1.f90\"\n+\n+! { dg-warning \"Nonstandard conversion from CHARACTER\" \" \" { target *-*-* } 16 }\n+! { dg-warning \"Nonstandard conversion from CHARACTER\" \" \" { target *-*-* } 17 }\n+! { dg-warning \"Nonstandard conversion from CHARACTER\" \" \" { target *-*-* } 18 }\n+! { dg-warning \"Nonstandard conversion from CHARACTER\" \" \" { target *-*-* } 19 }\n+! { dg-warning \"Conversion from HOLLERITH\" \" \" { target *-*-* } 20 }\n+! { dg-warning \"Conversion from HOLLERITH\" \" \" { target *-*-* } 21 }\n+! { dg-warning \"Conversion from HOLLERITH\" \" \" { target *-*-* } 22 }\n+! { dg-warning \"Conversion from HOLLERITH\" \" \" { target *-*-* } 23 }\n+! { dg-warning \"Nonstandard conversion from CHARACTER\" \" \" { target *-*-* } 31 }\n+! { dg-warning \"Nonstandard conversion from CHARACTER\" \" \" { target *-*-* } 32 }\n+! { dg-warning \"Nonstandard conversion from CHARACTER\" \" \" { target *-*-* } 33 }\n+! { dg-warning \"Nonstandard conversion from CHARACTER\" \" \" { target *-*-* } 34 }\n+! { dg-warning \"Conversion from HOLLERITH\" \" \" { target *-*-* } 35 }\n+! { dg-warning \"Conversion from HOLLERITH\" \" \" { target *-*-* } 36 }\n+! { dg-warning \"Conversion from HOLLERITH\" \" \" { target *-*-* } 37 }\n+! { dg-warning \"Conversion from HOLLERITH\" \" \" { target *-*-* } 38 }\n+! { dg-warning \"Nonstandard conversion from CHARACTER\" \" \" { target *-*-* } 46 }\n+! { dg-warning \"Nonstandard conversion from CHARACTER\" \" \" { target *-*-* } 47 }\n+! { dg-warning \"Nonstandard conversion from CHARACTER\" \" \" { target *-*-* } 48 }\n+! { dg-warning \"Nonstandard conversion from CHARACTER\" \" \" { target *-*-* } 49 }\n+! { dg-warning \"Conversion from HOLLERITH\" \" \" { target *-*-* } 50 }\n+! { dg-warning \"Conversion from HOLLERITH\" \" \" { target *-*-* } 51 }\n+! { dg-warning \"Conversion from HOLLERITH\" \" \" { target *-*-* } 52 }\n+! { dg-warning \"Conversion from HOLLERITH\" \" \" { target *-*-* } 53 }"}, {"sha": "7df55153b8a23a914bc5558f2c8a1089d0c16717", "filename": "gcc/testsuite/gfortran.dg/dec_char_conversion_in_assignment_3.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_assignment_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_assignment_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_assignment_3.f90?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -0,0 +1,44 @@\n+! { dg-do run }\n+! { dg-options \"-fdec-char-conversions\" }\n+!\n+! Contributeds by Mark Eggleston <mark.eggleston@codethink.com>\n+!\n+include \"dec_char_conversion_in_assignment_1.f90\"\n+\n+! { dg-warning \"Extension: Conversion from CHARACTER\" \" \" { target *-*-* } 16 }\n+! { dg-warning \"Extension: Conversion from CHARACTER\" \" \" { target *-*-* } 17 }\n+! { dg-warning \"Extension: Conversion from CHARACTER\" \" \" { target *-*-* } 18 }\n+! { dg-warning \"Extension: Conversion from CHARACTER\" \" \" { target *-*-* } 19 }\n+! { dg-warning \"Extension: Hollerith constant\" \" \" { target *-*-* } 20 }\n+! { dg-warning \"Extension: Hollerith constant\"  \" \" { target *-*-* } 21 }\n+! { dg-warning \"Extension: Hollerith constant\"  \" \" { target *-*-* } 22 }\n+! { dg-warning \"Extension: Hollerith constant\"  \" \" { target *-*-* } 23 }\n+! { dg-warning \"Extension: Conversion from HOLLERITH\" \" \" { target *-*-* } 20 }\n+! { dg-warning \"Extension: Conversion from HOLLERITH\" \" \" { target *-*-* } 21 }\n+! { dg-warning \"Extension: Conversion from HOLLERITH\" \" \" { target *-*-* } 22 }\n+! { dg-warning \"Extension: Conversion from HOLLERITH\" \" \" { target *-*-* } 23 }\n+! { dg-warning \"Extension: Conversion from CHARACTER\" \" \" { target *-*-* } 31 }\n+! { dg-warning \"Extension: Conversion from CHARACTER\" \" \" { target *-*-* } 32 }\n+! { dg-warning \"Extension: Conversion from CHARACTER\" \" \" { target *-*-* } 33 }\n+! { dg-warning \"Extension: Conversion from CHARACTER\" \" \" { target *-*-* } 34 }\n+! { dg-warning \"Extension: Hollerith constant\" \" \" { target *-*-* } 35 }\n+! { dg-warning \"Extension: Hollerith constant\"  \" \" { target *-*-* } 36 }\n+! { dg-warning \"Extension: Hollerith constant\"  \" \" { target *-*-* } 37 }\n+! { dg-warning \"Extension: Hollerith constant\"  \" \" { target *-*-* } 38 }\n+! { dg-warning \"Extension: Conversion from HOLLERITH\" \" \" { target *-*-* } 35 }\n+! { dg-warning \"Extension: Conversion from HOLLERITH\" \" \" { target *-*-* } 36 }\n+! { dg-warning \"Extension: Conversion from HOLLERITH\" \" \" { target *-*-* } 37 }\n+! { dg-warning \"Extension: Conversion from HOLLERITH\" \" \" { target *-*-* } 38 }\n+! { dg-warning \"Extension: Conversion from CHARACTER\" \" \" { target *-*-* } 46 }\n+! { dg-warning \"Extension: Conversion from CHARACTER\" \" \" { target *-*-* } 47 }\n+! { dg-warning \"Extension: Conversion from CHARACTER\" \" \" { target *-*-* } 48 }\n+! { dg-warning \"Extension: Conversion from CHARACTER\" \" \" { target *-*-* } 49 }\n+! { dg-warning \"Extension: Hollerith constant\" \" \" { target *-*-* } 50 }\n+! { dg-warning \"Extension: Hollerith constant\"  \" \" { target *-*-* } 51 }\n+! { dg-warning \"Extension: Hollerith constant\"  \" \" { target *-*-* } 52 }\n+! { dg-warning \"Extension: Hollerith constant\"  \" \" { target *-*-* } 53 }\n+! { dg-warning \"Extension: Conversion from HOLLERITH\" \" \" { target *-*-* } 50 }\n+! { dg-warning \"Extension: Conversion from HOLLERITH\" \" \" { target *-*-* } 51 }\n+! { dg-warning \"Extension: Conversion from HOLLERITH\" \" \" { target *-*-* } 52 }\n+! { dg-warning \"Extension: Conversion from HOLLERITH\" \" \" { target *-*-* } 53 }\n+"}, {"sha": "6de97395f815e963ad0744c8c75bd48386ad0701", "filename": "gcc/testsuite/gfortran.dg/dec_char_conversion_in_assignment_4.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_assignment_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_assignment_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_assignment_4.f90?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do run }\n+! { dg-options \"-fdec -fno-dec-char-conversions\" }\n+!\n+! Modified by Mark Eggleston <mark.eggleston@codethink.com>\n+!\n+include \"dec_char_conversion_in_assignment_1.f90\"\n+\n+! { dg-error \"Cannot convert\" \" \" { target *-*-* } 16 }\n+! { dg-error \"Cannot convert\" \" \" { target *-*-* } 17 }\n+! { dg-error \"Cannot convert\" \" \" { target *-*-* } 18 }\n+! { dg-error \"Cannot convert\" \" \" { target *-*-* } 19 }\n+! { dg-error \"Cannot convert\" \" \" { target *-*-* } 31 }\n+! { dg-error \"Cannot convert\" \" \" { target *-*-* } 32 }\n+! { dg-error \"Cannot convert\" \" \" { target *-*-* } 33 }\n+! { dg-error \"Cannot convert\" \" \" { target *-*-* } 34 }\n+! { dg-error \"Cannot convert\" \" \" { target *-*-* } 46 }\n+! { dg-error \"Cannot convert\" \" \" { target *-*-* } 47 }\n+! { dg-error \"Cannot convert\" \" \" { target *-*-* } 48 }\n+! { dg-error \"Cannot convert\" \" \" { target *-*-* } 49 }\n+"}, {"sha": "9bad441f42a21e01bedf094d056da15ef237e088", "filename": "gcc/testsuite/gfortran.dg/dec_char_conversion_in_assignment_5.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_assignment_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_assignment_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_assignment_5.f90?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do run }\n+! { dg-options \"-fdec -Wcharacter-truncation\" }\n+!\n+! Modified by Mark Eggleston <mark.eggleston@codethink.com>\n+!\n+include \"dec_char_conversion_in_assignment_1.f90\"\n+\n+! { dg-warning \"is truncated in conversion\" \" \" { target *-*-* } 46 }\n+! { dg-warning \"is truncated in conversion\" \" \" { target *-*-* } 47 }\n+! { dg-warning \"is truncated in conversion\" \" \" { target *-*-* } 48 }\n+! { dg-warning \"is truncated in conversion\" \" \" { target *-*-* } 49 }\n+! { dg-warning \"is truncated in conversion\" \" \" { target *-*-* } 50 }\n+! { dg-warning \"is truncated in conversion\" \" \" { target *-*-* } 51 }\n+! { dg-warning \"is truncated in conversion\" \" \" { target *-*-* } 52 }\n+! { dg-warning \"is truncated in conversion\" \" \" { target *-*-* } 53 }\n+"}, {"sha": "5eebec46a4426398c10e980390e88df9d4329ff9", "filename": "gcc/testsuite/gfortran.dg/dec_char_conversion_in_assignment_6.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_assignment_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_assignment_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_assignment_6.f90?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do run }\n+! { dg-options \"-fdec -Wsurprising\" }\n+!\n+! Modified by Mark Eggleston <mark.eggleston@codethink.com>\n+!\n+include \"dec_char_conversion_in_assignment_1.f90\"\n+\n+! { dg-warning \"Assigning value other than 0 or 1 to LOGICAL\" \" \" { target *-*-* } 19 }\n+! { dg-warning \"Assigning value other than 0 or 1 to LOGICAL\" \" \" { target *-*-* } 23 }\n+! { dg-warning \"Assigning value other than 0 or 1 to LOGICAL\" \" \" { target *-*-* } 34 }\n+! { dg-warning \"Assigning value other than 0 or 1 to LOGICAL\" \" \" { target *-*-* } 38 }\n+! { dg-warning \"Assigning value other than 0 or 1 to LOGICAL\" \" \" { target *-*-* } 49 }\n+! { dg-warning \"Assigning value other than 0 or 1 to LOGICAL\" \" \" { target *-*-* } 53 }\n+"}, {"sha": "07d6f7478653e1308b3d83b35372a8fd405c3ca6", "filename": "gcc/testsuite/gfortran.dg/dec_char_conversion_in_assignment_7.f90", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_assignment_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_assignment_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_assignment_7.f90?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -0,0 +1,30 @@\n+! { dg-do run }\n+! { dg-options \"-fdec -Wconversion -Wcharacter-truncation\" }\n+!\n+! Modified by Mark Eggleston <mark.eggleston@codethink.com>\n+!\n+program test\n+  integer(4), parameter :: a = '1234'\n+  real(4), parameter :: b = '12'\n+  complex(4), parameter :: c = '12341234'\n+  logical(4), parameter :: d = 'abcd'\n+  integer(4), parameter :: e = 4h1234\n+  real(4), parameter :: f = 2h12\n+  complex(4), parameter :: g = 8h12341234\n+  logical(4), parameter :: h = 4habcd\n+\n+  if (a.ne.e) stop 1\n+  if (b.ne.f) stop 2\n+  if (c.ne.g) stop 3\n+  if (d.neqv.h) stop 4\n+end program\n+\n+! { dg-warning \"Nonstandard conversion from CHARACTER\" \" \" { target *-*-* } 7 }\n+! { dg-warning \"Nonstandard conversion from CHARACTER\" \" \" { target *-*-* } 8 }\n+! { dg-warning \"Nonstandard conversion from CHARACTER\" \" \" { target *-*-* } 9 }\n+! { dg-warning \"Nonstandard conversion from CHARACTER\" \" \" { target *-*-* } 10 }\n+! { dg-warning \"Conversion from HOLLERITH to INTEGER\" \" \" { target *-*-* } 11 }\n+! { dg-warning \"Conversion from HOLLERITH to REAL\" \" \" { target *-*-* } 12 }\n+! { dg-warning \"Conversion from HOLLERITH to COMPLEX\" \" \" { target *-*-* } 13 }\n+! { dg-warning \"Conversion from HOLLERITH to LOGICAL\" \" \" { target *-*-* } 14 }\n+"}, {"sha": "3520cd1b5d90cafde13eadfe25a14bdb473eeb7a", "filename": "gcc/testsuite/gfortran.dg/dec_char_conversion_in_assignment_8.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_assignment_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_assignment_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_assignment_8.f90?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -0,0 +1,17 @@\n+! { dg-do compile }\n+! { dg-options \"-fdec\" }\n+!\n+! Modified by Mark Eggleston <mark.eggleston@codethink.com>\n+!\n+program test\n+  integer(4) :: a\n+  real(4) :: b\n+  complex(4) :: c\n+  logical(4) :: d\n+\n+  a = 4_'1234'     ! { dg-error \"Cannot convert CHARACTER\\\\(4,4\\\\) to\" }\n+  b = 4_'12'       ! { dg-error \"Cannot convert CHARACTER\\\\(2,4\\\\) to\" }\n+  c = 4_'12341234' ! { dg-error \"Cannot convert CHARACTER\\\\(8,4\\\\) to\" }\n+  d = 4_'abcd'     ! { dg-error \"Cannot convert CHARACTER\\\\(4,4\\\\) to\" }\n+end program\n+"}, {"sha": "1bd354b4b1eaf58aacc90da9a601b2a9d8586401", "filename": "gcc/testsuite/gfortran.dg/dec_char_conversion_in_data_1.f90", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_data_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_data_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_data_1.f90?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -0,0 +1,87 @@\n+! { dg-do run }\n+! { dg-options \"-fdec\" }\n+!\n+! Modified by Mark Eggleston <mark.eggleston@codethink.com>\n+!\n+\n+subroutine normal\n+  integer(4) :: a\n+  real(4) :: b\n+  complex(4) :: c\n+  logical(4) :: d\n+  integer(4) :: e\n+  real(4) :: f\n+  complex(4) :: g\n+  logical(4) :: h\n+\n+  data a / '1234' /\n+  data b / '1234' /\n+  data c / '12341234' / ! double the length for complex\n+  data d / '1234' / \n+  data e / 4h1234 /\n+  data f / 4h1234 /\n+  data g / 8h12341234 / ! double the length for complex\n+  data h / 4h1234 /\n+  \n+  if (a.ne.e) stop 1\n+  if (b.ne.f) stop 2\n+  if (c.ne.g) stop 3\n+  if (d.neqv.h) stop 4\n+end subroutine\n+\n+subroutine padded\n+  integer(4) :: a\n+  real(4) :: b\n+  complex(4) :: c\n+  logical(4) :: d\n+  integer(4) :: e\n+  real(4) :: f\n+  complex(4) :: g\n+  logical(4) :: h\n+\n+  data a / '12' /\n+  data b / '12' /\n+  data c / '12334' /\n+  data d / '123' /\n+  data e / 2h12 /\n+  data f / 2h12 /\n+  data g / 5h12334 /\n+  data h / 3h123 /\n+  \n+  if (a.ne.e) stop 5\n+  if (b.ne.f) stop 6\n+  if (c.ne.g) stop 7\n+  if (d.neqv.h) stop 8\n+end subroutine\n+\n+subroutine truncated\n+  integer(4) :: a\n+  real(4) :: b\n+  complex(4) :: c\n+  logical(4) :: d\n+  integer(4) :: e\n+  real(4) :: f\n+  complex(4) :: g\n+  logical(4) :: h\n+\n+  data a / '123478' /\n+  data b / '123478' /\n+  data c / '1234123498' /\n+  data d / '12345' /\n+  data e / 6h123478 /\n+  data f / 6h123478 /\n+  data g / 10h1234123498 /\n+  data h / 5h12345 /\n+  \n+  if (a.ne.e) stop 9\n+  if (b.ne.f) stop 10\n+  if (c.ne.g) stop 11\n+  if (d.neqv.h) stop 12\n+end subroutine\n+\n+program test\n+  call normal\n+  call padded\n+  call truncated\n+end program\n+"}, {"sha": "5c6f39cca018ac0b0f23be8220792ae83bc3a644", "filename": "gcc/testsuite/gfortran.dg/dec_char_conversion_in_data_2.f90", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_data_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_data_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_data_2.f90?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -0,0 +1,45 @@\n+! { dg-do run }\n+! { dg-options \"-fdec-char-conversions\" }\n+!\n+! Modified by Mark Eggleston <mark.eggleston@codethink.com>\n+!\n+include \"dec_char_conversion_in_data_1.f90\"\n+\n+! { dg-warning \"Legacy Extension: Hollerith constant\" \" \" { target *-*-* } 21 }\n+! { dg-warning \"Legacy Extension: Hollerith constant\" \" \" { target *-*-* } 22 }\n+! { dg-warning \"Legacy Extension: Hollerith constant\" \" \" { target *-*-* } 23 }\n+! { dg-warning \"Legacy Extension: Hollerith constant\" \" \" { target *-*-* } 24 }\n+! { dg-warning \"Legacy Extension: Hollerith constant\" \" \" { target *-*-* } 46 }\n+! { dg-warning \"Legacy Extension: Hollerith constant\" \" \" { target *-*-* } 47 }\n+! { dg-warning \"Legacy Extension: Hollerith constant\" \" \" { target *-*-* } 48 }\n+! { dg-warning \"Legacy Extension: Hollerith constant\" \" \" { target *-*-* } 49 }\n+! { dg-warning \"Legacy Extension: Hollerith constant\" \" \" { target *-*-* } 71 }\n+! { dg-warning \"Legacy Extension: Hollerith constant\" \" \" { target *-*-* } 72 }\n+! { dg-warning \"Legacy Extension: Hollerith constant\" \" \" { target *-*-* } 73 }\n+! { dg-warning \"Legacy Extension: Hollerith constant\" \" \" { target *-*-* } 74 }\n+! { dg-warning \"Extension: Conversion from HOLLERITH\" \" \" { target *-*-* } 21 }\n+! { dg-warning \"Extension: Conversion from HOLLERITH\" \" \" { target *-*-* } 22 }\n+! { dg-warning \"Extension: Conversion from HOLLERITH\" \" \" { target *-*-* } 23 }\n+! { dg-warning \"Extension: Conversion from HOLLERITH\" \" \" { target *-*-* } 24 }\n+! { dg-warning \"Extension: Conversion from HOLLERITH\" \" \" { target *-*-* } 46 }\n+! { dg-warning \"Extension: Conversion from HOLLERITH\" \" \" { target *-*-* } 47 }\n+! { dg-warning \"Extension: Conversion from HOLLERITH\" \" \" { target *-*-* } 48 }\n+! { dg-warning \"Extension: Conversion from HOLLERITH\" \" \" { target *-*-* } 49 }\n+! { dg-warning \"Extension: Conversion from HOLLERITH\" \" \" { target *-*-* } 71 }\n+! { dg-warning \"Extension: Conversion from HOLLERITH\" \" \" { target *-*-* } 72 }\n+! { dg-warning \"Extension: Conversion from HOLLERITH\" \" \" { target *-*-* } 73 }\n+! { dg-warning \"Extension: Conversion from HOLLERITH\" \" \" { target *-*-* } 74 }\n+! { dg-warning \"Extension: Conversion from CHARACTER\\\\(4\\\\)\" \" \" { target *-*-* } 17 }\n+! { dg-warning \"Extension: Conversion from CHARACTER\\\\(4\\\\)\" \" \" { target *-*-* } 18 }\n+! { dg-warning \"Extension: Conversion from CHARACTER\\\\(8\\\\)\" \" \" { target *-*-* } 19 }\n+! { dg-warning \"Extension: Conversion from CHARACTER\\\\(4\\\\)\" \" \" { target *-*-* } 20 }\n+! { dg-warning \"Extension: Conversion from CHARACTER\\\\(2\\\\)\" \" \" { target *-*-* } 42 }\n+! { dg-warning \"Extension: Conversion from CHARACTER\\\\(2\\\\)\" \" \" { target *-*-* } 43 }\n+! { dg-warning \"Extension: Conversion from CHARACTER\\\\(5\\\\)\" \" \" { target *-*-* } 44 }\n+! { dg-warning \"Extension: Conversion from CHARACTER\\\\(3\\\\)\" \" \" { target *-*-* } 45 }\n+! { dg-warning \"Extension: Conversion from CHARACTER\\\\(6\\\\)\" \" \" { target *-*-* } 67 }\n+! { dg-warning \"Extension: Conversion from CHARACTER\\\\(6\\\\)\" \" \" { target *-*-* } 68 }\n+! { dg-warning \"Extension: Conversion from CHARACTER\\\\(10\\\\)\" \" \" { target *-*-* } 69 }\n+! { dg-warning \"Extension: Conversion from CHARACTER\\\\(5\\\\)\" \" \" { target *-*-* } 70 }\n+\n+"}, {"sha": "0d6dce186b213880053e3ee7a7e4ba31201e5934", "filename": "gcc/testsuite/gfortran.dg/dec_char_conversion_in_data_3.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_data_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_data_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_data_3.f90?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do run }\n+! { dg-options \"-fdec -fno-dec-char-conversions\" }\n+!\n+! Modified by Mark Eggleston <mark.eggleston@codethink.com>\n+!\n+include \"dec_char_conversion_in_data_1.f90\"\n+\n+! { dg-error \"Incompatible types\" \" \" { target *-*-* } 17 }\n+! { dg-error \"Incompatible types\" \" \" { target *-*-* } 18 }\n+! { dg-error \"Incompatible types\" \" \" { target *-*-* } 19 }\n+! { dg-error \"Incompatible types\" \" \" { target *-*-* } 20 }\n+! { dg-error \"Incompatible types\" \" \" { target *-*-* } 42 }\n+! { dg-error \"Incompatible types\" \" \" { target *-*-* } 43 }\n+! { dg-error \"Incompatible types\" \" \" { target *-*-* } 44 }\n+! { dg-error \"Incompatible types\" \" \" { target *-*-* } 45 }\n+! { dg-error \"Incompatible types\" \" \" { target *-*-* } 67 }\n+! { dg-error \"Incompatible types\" \" \" { target *-*-* } 68 }\n+! { dg-error \"Incompatible types\" \" \" { target *-*-* } 69 }\n+! { dg-error \"Incompatible types\" \" \" { target *-*-* } 70 }\n+"}, {"sha": "c25fe0675563007391a70ef5e9681116f5eedb68", "filename": "gcc/testsuite/gfortran.dg/dec_char_conversion_in_data_4.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_data_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_data_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_data_4.f90?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -0,0 +1,17 @@\n+! { dg-do run }\n+! { dg-options \"-fdec -Wcharacter-truncation\" }\n+!\n+! Modified by Mark Eggleston <mark.eggleston@codethink.com>\n+!\n+include \"dec_char_conversion_in_data_1.f90\"\n+\n+! { dg-warning \"character constant at \\\\(1\\\\) is truncated in conversion\" \" \" { target *-*-* } 67 }\n+! { dg-warning \"character constant at \\\\(1\\\\) is truncated in conversion\" \" \" { target *-*-* } 68 }\n+! { dg-warning \"character constant at \\\\(1\\\\) is truncated in conversion\" \" \" { target *-*-* } 69 }\n+! { dg-warning \"character constant at \\\\(1\\\\) is truncated in conversion\" \" \" { target *-*-* } 70 }\n+! { dg-warning \"Hollerith constant at \\\\(1\\\\) is truncated in conversion\" \" \" { target *-*-* } 71 }\n+! { dg-warning \"Hollerith constant at \\\\(1\\\\) is truncated in conversion\" \" \" { target *-*-* } 72 }\n+! { dg-warning \"Hollerith constant at \\\\(1\\\\) is truncated in conversion\" \" \" { target *-*-* } 73 }\n+! { dg-warning \"Hollerith constant at \\\\(1\\\\) is truncated in conversion\" \" \" { target *-*-* } 74 }\n+\n+"}, {"sha": "08d3c58f006162f52fcab2ecca298362b96fadcc", "filename": "gcc/testsuite/gfortran.dg/dec_char_conversion_in_data_5.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_data_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_data_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_data_5.f90?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do run }\n+! { dg-options \"-fdec -Wsurprising\" }\n+!\n+! Modified by Mark Eggleston <mark.eggleston@codethink.com>\n+!\n+include \"dec_char_conversion_in_data_1.f90\"\n+\n+! { dg-warning \"Assigning value other than 0 or 1 to LOGICAL\" \" \" { target *-*-* } 20 }\n+! { dg-warning \"Assigning value other than 0 or 1 to LOGICAL\" \" \" { target *-*-* } 24 }\n+! { dg-warning \"Assigning value other than 0 or 1 to LOGICAL\" \" \" { target *-*-* } 45 }\n+! { dg-warning \"Assigning value other than 0 or 1 to LOGICAL\" \" \" { target *-*-* } 49 }\n+! { dg-warning \"Assigning value other than 0 or 1 to LOGICAL\" \" \" { target *-*-* } 70 }\n+! { dg-warning \"Assigning value other than 0 or 1 to LOGICAL\" \" \" { target *-*-* } 74 }\n+\n+"}, {"sha": "10fa7c11c029ba4d6f7ee9892a9bec0af80370b1", "filename": "gcc/testsuite/gfortran.dg/dec_char_conversion_in_data_6.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_data_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_data_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_data_6.f90?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do run }\n+! { dg-options \"-fdec -Wconversion\" }\n+!\n+! Modified by Mark Eggleston <mark.eggleston@codethink.com>\n+!\n+include \"dec_char_conversion_in_data_1.f90\"\n+\n+! { dg-warning \"Nonstandard conversion from CHARACTER\\\\(4\\\\)\" \" \" { target *-*-* } 17 }\n+! { dg-warning \"Nonstandard conversion from CHARACTER\\\\(4\\\\)\" \" \" { target *-*-* } 18 }\n+! { dg-warning \"Nonstandard conversion from CHARACTER\\\\(8\\\\)\" \" \" { target *-*-* } 19 }\n+! { dg-warning \"Nonstandard conversion from CHARACTER\\\\(4\\\\)\" \" \" { target *-*-* } 20 }\n+! { dg-warning \"Conversion from HOLLERITH\" \" \" { target *-*-* } 21 }\n+! { dg-warning \"Conversion from HOLLERITH\" \" \" { target *-*-* } 22 }\n+! { dg-warning \"Conversion from HOLLERITH\" \" \" { target *-*-* } 23 }\n+! { dg-warning \"Conversion from HOLLERITH\" \" \" { target *-*-* } 24 }\n+! { dg-warning \"Nonstandard conversion from CHARACTER\\\\(2\\\\)\" \" \" { target *-*-* } 42 }\n+! { dg-warning \"Nonstandard conversion from CHARACTER\\\\(2\\\\)\" \" \" { target *-*-* } 43 }\n+! { dg-warning \"Nonstandard conversion from CHARACTER\\\\(5\\\\)\" \" \" { target *-*-* } 44 }\n+! { dg-warning \"Nonstandard conversion from CHARACTER\\\\(3\\\\)\" \" \" { target *-*-* } 45 }\n+! { dg-warning \"Conversion from HOLLERITH\" \" \" { target *-*-* } 46 }\n+! { dg-warning \"Conversion from HOLLERITH\" \" \" { target *-*-* } 47 }\n+! { dg-warning \"Conversion from HOLLERITH\" \" \" { target *-*-* } 48 }\n+! { dg-warning \"Conversion from HOLLERITH\" \" \" { target *-*-* } 49 }\n+! { dg-warning \"Nonstandard conversion from CHARACTER\\\\(6\\\\)\" \" \" { target *-*-* } 67 }\n+! { dg-warning \"Nonstandard conversion from CHARACTER\\\\(6\\\\)\" \" \" { target *-*-* } 68 }\n+! { dg-warning \"Nonstandard conversion from CHARACTER\\\\(10\\\\)\" \" \" { target *-*-* } 69 }\n+! { dg-warning \"Nonstandard conversion from CHARACTER\\\\(5\\\\)\" \" \" { target *-*-* } 70 }\n+! { dg-warning \"Conversion from HOLLERITH\" \" \" { target *-*-* } 71 }\n+! { dg-warning \"Conversion from HOLLERITH\" \" \" { target *-*-* } 72 }\n+! { dg-warning \"Conversion from HOLLERITH\" \" \" { target *-*-* } 73 }\n+! { dg-warning \"Conversion from HOLLERITH\" \" \" { target *-*-* } 74 }\n+\n+"}, {"sha": "64b6b4fbf443fb4962b60e10e73e85e04dcc8b1c", "filename": "gcc/testsuite/gfortran.dg/dec_char_conversion_in_data_7.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_data_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_data_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_char_conversion_in_data_7.f90?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -0,0 +1,17 @@\n+! { dg-do compile }\n+! { dg-options \"-fdec\" }\n+!\n+! Modified by Mark Eggleston <mark.eggleston@codethink.com>\n+!\n+program test\n+  integer(4) :: a\n+  real(4) :: b\n+  complex(4) :: c\n+  logical(4) :: d\n+\n+  data a / 4_'1234' /     ! { dg-error \"attempted conversion of CHARACTER\\\\(4,4\\\\)\" }\n+  data b / 4_'12'   /     ! { dg-error \"attempted conversion of CHARACTER\\\\(2,4\\\\)\" }\n+  data c / 4_'12341234' / ! { dg-error \"attempted conversion of CHARACTER\\\\(8,4\\\\)\" }\n+  data d / 4_'abcd' /     ! { dg-error \"attempted conversion of CHARACTER\\\\(4,4\\\\)\" }\n+end program\n+"}, {"sha": "d17f9ae40cf9827d41528a62a907cf03c7468ebf", "filename": "gcc/testsuite/gfortran.dg/hollerith5.f90", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith5.f90?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -1,8 +1,9 @@\n        ! { dg-do compile }\n+       ! { dg-options \"-Wsurprising\" }\n        implicit none\n        logical b\n        b = 4Habcd ! { dg-warning \"has undefined result\" }\n        end\n \n-! { dg-warning \"Hollerith constant\" \"const\" { target *-*-* } 4 }\n-! { dg-warning \"Conversion\" \"conversion\" { target *-*-* } 4 }\n+! { dg-warning \"Hollerith constant\" \"const\" { target *-*-* } 5 }\n+! { dg-warning \"Conversion\" \"conversion\" { target *-*-* } 5 }"}, {"sha": "9d7e989b55208a0aaa99dee5696cca0211849801", "filename": "gcc/testsuite/gfortran.dg/hollerith_legacy.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith_legacy.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith_legacy.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith_legacy.f90?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-std=legacy\" }\n+! { dg-options \"-std=legacy -Wsurprising\" }\n ! PR15966, PR18781 & PR16531\n implicit none\n complex(kind=8) x(2) "}, {"sha": "3c60403160a253e0f69ae4842636a91dcd7fc376", "filename": "gcc/testsuite/gfortran.dg/no_char_to_numeric_assign.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fno_char_to_numeric_assign.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afeb1ca38dbb7c8708272452417426e46b4d6ed/gcc%2Ftestsuite%2Fgfortran.dg%2Fno_char_to_numeric_assign.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fno_char_to_numeric_assign.f90?ref=2afeb1ca38dbb7c8708272452417426e46b4d6ed", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do compile }\n+! { dg-options \"-fdec-char-conversions\" }\n+!\n+! Test character variables can not be assigned to numeric and\n+! logical variables.\n+!\n+! Test case contributed by Mark Eggleston <mark.eggleston@codethink.com>\n+!\n+program test\n+  integer a\n+  real b\n+  complex c\n+  logical d\n+  character e\n+\n+  e = \"A\"\n+  a = e ! { dg-error \"Cannot convert\" }\n+  b = e ! { dg-error \"Cannot convert\" }\n+  c = e ! { dg-error \"Cannot convert\" }\n+  d = e ! { dg-error \"Cannot convert\" }\n+end program"}]}