{"sha": "5088b05874bc5a93099751efb19abe213ce2d0d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA4OGIwNTg3NGJjNWE5MzA5OTc1MWVmYjE5YWJlMjEzY2UyZDBkMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-06-21T23:30:30Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-06-21T23:30:30Z"}, "message": "c-common.def (RETURN_STMT): Remove.\n\n        * c-common.def (RETURN_STMT): Remove.\n        * c-common.h (RETURN_STMT_EXPR): Remove.\n        (c_expand_return, build_return_stmt): Remove.\n        (c_common_stmt_codes): Remove RETURN_STMT.\n        * c-dump.c (dump_next_stmt): Remove.\n        (c_dump_tree): Remove RETURN_STMT.\n        * c-decl.c (finish_function): Use c_finish_return.\n        * c-parse.in (stmt): Likewise.\n        * c-gimplify.c (gimplify_return_stmt): Remove.\n        (c_gimplify_expr): Remove RETURN_STMT.\n        * c-pretty-print.c (pp_c_statement): Likewise.\n        * c-semantics.c (build_return_stmt): Remove.\n        * c-tree.h (c_finish_return): Declare.\n        * c-typeck.c (c_finish_return): Rename from c_expand_return.\n        Return void.  Build RETURN_EXPR directly.\n        * tree-dump.h (dump_next_stmt): Remove.\ncp/\n        * dump.c (cp_dump_tree): Don't use dump_next_stmt.\n        * parser.c (cp_parser_jump_statement): Update commentary.\n        * pt.c (tsubst_expr): Use RETURN_EXPR.\n        * semantics.c (finish_return_stmt): Likewise.\n        (finalize_nrv_r): Likewise.\n        * typeck.c, typeck2.c: Update file start commentary.\n\nFrom-SVN: r83461", "tree": {"sha": "549a437788493737d07ebf98e175601b039ef1a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/549a437788493737d07ebf98e175601b039ef1a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5088b05874bc5a93099751efb19abe213ce2d0d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5088b05874bc5a93099751efb19abe213ce2d0d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5088b05874bc5a93099751efb19abe213ce2d0d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5088b05874bc5a93099751efb19abe213ce2d0d1/comments", "author": null, "committer": null, "parents": [{"sha": "0b4da8a182e81009fbd65d56451be31790132471", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b4da8a182e81009fbd65d56451be31790132471", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b4da8a182e81009fbd65d56451be31790132471"}], "stats": {"total": 173, "additions": 55, "deletions": 118}, "files": [{"sha": "161dba3f8b07d50fce5d9cae4f646bada6ca7f6e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5088b05874bc5a93099751efb19abe213ce2d0d1", "patch": "@@ -1,3 +1,22 @@\n+2004-06-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-common.def (RETURN_STMT): Remove.\n+\t* c-common.h (RETURN_STMT_EXPR): Remove.\n+\t(c_expand_return, build_return_stmt): Remove.\n+\t(c_common_stmt_codes): Remove RETURN_STMT.\n+\t* c-dump.c (dump_next_stmt): Remove.\n+\t(c_dump_tree): Remove RETURN_STMT.\n+\t* c-decl.c (finish_function): Use c_finish_return.\n+\t* c-parse.in (stmt): Likewise.\n+\t* c-gimplify.c (gimplify_return_stmt): Remove.\n+\t(c_gimplify_expr): Remove RETURN_STMT.\n+\t* c-pretty-print.c (pp_c_statement): Likewise.\n+\t* c-semantics.c (build_return_stmt): Remove.\n+\t* c-tree.h (c_finish_return): Declare.\n+\t* c-typeck.c (c_finish_return): Rename from c_expand_return.\n+\tReturn void.  Build RETURN_EXPR directly.\n+\t* tree-dump.h (dump_next_stmt): Remove.\n+\n 2004-06-21  Zack Weinberg  <zack@codesourcery.com>\n \n \t* c-decl.c (start_function): Don't call make_decl_rtl.  Don't"}, {"sha": "5d8c237831d24ea8fcc80345270be2cf62150406", "filename": "gcc/c-common.def", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fc-common.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fc-common.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.def?ref=5088b05874bc5a93099751efb19abe213ce2d0d1", "patch": "@@ -2,7 +2,7 @@\n    additional tree codes used in the GNU C++ compiler (see tree.def\n    for the standard codes).\n    Copyright (C) 1987, 1988, 1990, 1993, 1997, 1998,\n-   1999, 2000, 2001 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2004 Free Software Foundation, Inc.\n    Written by Benjamin Chelf <chelf@codesourcery.com>\n \n This file is part of GCC.\n@@ -49,10 +49,6 @@ DEFTREECODE (WHILE_STMT, \"while_stmt\", 'e', 2)\n    DO_COND, respectively.  */\n DEFTREECODE (DO_STMT, \"do_stmt\", 'e', 2)\n \n-/* Used to represent a 'return' statement. The operand is\n-   RETURN_STMT_EXPR.  */\n-DEFTREECODE (RETURN_STMT, \"return_stmt\", 'e', 1)\n-\n /* Used to represent a 'break' statement.  */\n DEFTREECODE (BREAK_STMT, \"break_stmt\", 'e', 0)\n "}, {"sha": "bd0a5b36a0e11f53195c8db479f357d6409c7799", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=5088b05874bc5a93099751efb19abe213ce2d0d1", "patch": "@@ -930,11 +930,6 @@ extern void finish_file\t(void);\n #define DO_COND(NODE)           TREE_OPERAND (DO_STMT_CHECK (NODE), 0)\n #define DO_BODY(NODE)           TREE_OPERAND (DO_STMT_CHECK (NODE), 1)\n \n-/* RETURN_STMT accessors. These give the expression associated with a\n-   return statement, and whether it should be ignored when expanding\n-   (as opposed to inlining).  */\n-#define RETURN_STMT_EXPR(NODE)  TREE_OPERAND (RETURN_STMT_CHECK (NODE), 0)\n-\n /* EXPR_STMT accessor. This gives the expression associated with an\n    expression statement.  */\n #define EXPR_STMT_EXPR(NODE)    TREE_OPERAND (EXPR_STMT_CHECK (NODE), 0)\n@@ -978,7 +973,7 @@ enum c_tree_code {\n \n #define c_common_stmt_codes\t\t\t\t\\\n    EXPR_STMT,\t\tDECL_STMT,\tFOR_STMT,\t\\\n-   WHILE_STMT,\t\tDO_STMT,\tRETURN_STMT,\t\\\n+   WHILE_STMT,\t\tDO_STMT,\t\t\t\\\n    BREAK_STMT,\t\tCONTINUE_STMT,\tSWITCH_STMT\n \n /* TRUE if a code represents a statement.  The front end init\n@@ -1012,13 +1007,11 @@ extern int anon_aggr_type_p (tree);\n \n extern void emit_local_var (tree);\n extern void make_rtl_for_local_static (tree);\n-extern tree c_expand_return (tree);\n extern tree do_case (tree, tree);\n extern tree build_stmt (enum tree_code, ...);\n extern tree build_case_label (tree, tree, tree);\n extern tree build_continue_stmt (void);\n extern tree build_break_stmt (void);\n-extern tree build_return_stmt (tree);\n \n extern void c_expand_asm_operands (tree, tree, tree, tree, int, location_t);\n "}, {"sha": "ec1778bc35c5cdd989130e5837ef7de6c1daef59", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=5088b05874bc5a93099751efb19abe213ce2d0d1", "patch": "@@ -6242,7 +6242,7 @@ finish_function (void)\n \t  DEFAULT_MAIN_RETURN;\n #else\n \t  if (flag_isoc99)\n-\t    c_expand_return (integer_zero_node);\n+\t    c_finish_return (integer_zero_node);\n #endif\n \t}\n     }"}, {"sha": "91acac844c782d522411b92f6d5db1c79b1603c2", "filename": "gcc/c-dump.c", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fc-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fc-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-dump.c?ref=5088b05874bc5a93099751efb19abe213ce2d0d1", "patch": "@@ -1,5 +1,5 @@\n /* Tree-dumping functionality for C-family languages.\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n    Written by Mark Mitchell <mark@codesourcery.com>\n \n This file is part of GCC.\n@@ -37,14 +37,6 @@ dump_stmt (dump_info_p di, tree t)\n     dump_int (di, \"line\", locus->line);\n }\n \n-/* Dump the next statement after STMT.  */\n-\n-void\n-dump_next_stmt (dump_info_p di, tree t)\n-{\n-  dump_child (\"next\", TREE_CHAIN (t));\n-}\n-\n /* Dump any C-specific tree codes and attributes of common codes.  */\n \n bool\n@@ -66,26 +58,22 @@ c_dump_tree (void *dump_info, tree t)\n     case BREAK_STMT:\n     case CONTINUE_STMT:\n       dump_stmt (di, t);\n-      dump_next_stmt (di, t);\n       break;\n \n     case DECL_STMT:\n       dump_stmt (di, t);\n       dump_child (\"decl\", DECL_STMT_DECL (t));\n-      dump_next_stmt (di, t);\n       break;\n \n     case DO_STMT:\n       dump_stmt (di, t);\n       dump_child (\"body\", DO_BODY (t));\n       dump_child (\"cond\", DO_COND (t));\n-      dump_next_stmt (di, t);\n       break;\n \n     case EXPR_STMT:\n       dump_stmt (di, t);\n       dump_child (\"expr\", EXPR_STMT_EXPR (t));\n-      dump_next_stmt (di, t);\n       break;\n \n     case FOR_STMT:\n@@ -94,27 +82,18 @@ c_dump_tree (void *dump_info, tree t)\n       dump_child (\"cond\", FOR_COND (t));\n       dump_child (\"expr\", FOR_EXPR (t));\n       dump_child (\"body\", FOR_BODY (t));\n-      dump_next_stmt (di, t);\n-      break;\n-\n-    case RETURN_STMT:\n-      dump_stmt (di, t);\n-      dump_child (\"expr\", RETURN_STMT_EXPR (t));\n-      dump_next_stmt (di, t);\n       break;\n \n     case SWITCH_STMT:\n       dump_stmt (di, t);\n       dump_child (\"cond\", SWITCH_COND (t));\n       dump_child (\"body\", SWITCH_BODY (t));\n-      dump_next_stmt (di, t);\n       break;\n \n     case WHILE_STMT:\n       dump_stmt (di, t);\n       dump_child (\"cond\", WHILE_COND (t));\n       dump_child (\"body\", WHILE_BODY (t));\n-      dump_next_stmt (di, t);\n       break;\n \n     case STMT_EXPR:"}, {"sha": "359733116c441ab747c956f0ad711466e19b4916", "filename": "gcc/c-gimplify.c", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-gimplify.c?ref=5088b05874bc5a93099751efb19abe213ce2d0d1", "patch": "@@ -2,7 +2,7 @@\n    by the C-based front ends.  The structure of gimplified, or\n    language-independent, trees is dictated by the grammar described in this\n    file.\n-   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n    Lowering of expressions contributed by Sebastian Pop <s.pop@laposte.net>\n    Re-written to support lowering of whole function trees, documentation\n    and miscellaneous cleanups by Diego Novillo <dnovillo@redhat.com>\n@@ -467,17 +467,6 @@ gimplify_switch_stmt (tree *stmt_p)\n   return GS_ALL_DONE;\n }\n \n-/* Genericize a RETURN_STMT by turning it into a RETURN_EXPR.  */\n-\n-static enum gimplify_status\n-gimplify_return_stmt (tree *stmt_p)\n-{\n-  tree expr = RETURN_STMT_EXPR (*stmt_p);\n-  expr = build1 (RETURN_EXPR, void_type_node, expr);\n-  *stmt_p = expr;\n-  return GS_OK;\n-}\n-\n /* Gimplifies a DECL_STMT node *STMT_P by making any necessary allocation\n    and initialization explicit.  */\n \n@@ -614,9 +603,6 @@ c_gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p ATTRIBUTE_UNUSED)\n     case EXPR_STMT:\n       return gimplify_expr_stmt (expr_p);\n \n-    case RETURN_STMT:\n-      return gimplify_return_stmt (expr_p);\n-\n     case DECL_STMT:\n       return gimplify_decl_stmt (expr_p);\n "}, {"sha": "b7acb71171874efb20cd0d33aca7621b5ab34877", "filename": "gcc/c-parse.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=5088b05874bc5a93099751efb19abe213ce2d0d1", "patch": "@@ -2242,9 +2242,9 @@ stmt:\n \t\t  else\n \t\t    add_stmt (build_continue_stmt ()); }\n \t| RETURN ';'\n-                { stmt_count++; c_expand_return (NULL_TREE); }\n+                { stmt_count++; c_finish_return (NULL_TREE); }\n \t| RETURN expr ';'\n-                { stmt_count++; c_expand_return ($2); }\n+                { stmt_count++; c_finish_return ($2); }\n \t| asm_stmt\n \t| GOTO identifier ';'\n \t\t{ tree decl;"}, {"sha": "4d0b06d5de9f5d379a4c027d410f2df4aff02f1a", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=5088b05874bc5a93099751efb19abe213ce2d0d1", "patch": "@@ -1982,23 +1982,6 @@ pp_c_statement (c_pretty_printer *pp, tree stmt)\n       pp_needs_newline (pp) = true;\n       break;\n \n-    case RETURN_STMT:\n-      {\n-\ttree e = RETURN_STMT_EXPR (stmt);\n-\tpp_c_identifier (pp, \"return\");\n-        pp_c_whitespace (pp);\n-\tif (e)\n-          {\n-            if (TREE_CODE (e) == INIT_EXPR\n-                && TREE_CODE (TREE_OPERAND (e, 0)) == RESULT_DECL)\n-              e = TREE_OPERAND (e, 1);\n-            pp_expression (pp, e);\n-          }\n-\tpp_c_semicolon (pp);\n-\tpp_needs_newline (pp) = true;\n-      }\n-      break;\n-\n     case DECL_STMT:\n       pp_declaration (pp, DECL_STMT_DECL (stmt));\n       pp_needs_newline (pp) = true;"}, {"sha": "ee04417ad08bb55fc6db08f54725747d634cefc2", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=5088b05874bc5a93099751efb19abe213ce2d0d1", "patch": "@@ -247,14 +247,6 @@ emit_local_var (tree decl)\n     }\n }\n \n-/* Build the node for a return statement and return it.  */\n-\n-tree\n-build_return_stmt (tree expr)\n-{\n-  return (build_stmt (RETURN_STMT, expr));\n-}\n-\n /* Build a break statement node and return it.  */\n \n tree"}, {"sha": "052275ab96f756dc2eaf37a5e8860ac0bd7c4d3a", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=5088b05874bc5a93099751efb19abe213ce2d0d1", "patch": "@@ -272,6 +272,7 @@ extern void c_finish_for_stmt (tree, tree);\n extern tree c_begin_stmt_expr (void);\n extern tree c_finish_stmt_expr (tree);\n extern void c_finish_expr_stmt (tree);\n+extern void c_finish_return (tree);\n extern tree build_offsetof (tree, tree);\n \n /* Set to 0 at beginning of a function definition, set to 1 if"}, {"sha": "e619fa13ea51597df24f4aeea25b5ba3f8b65535", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=5088b05874bc5a93099751efb19abe213ce2d0d1", "patch": "@@ -23,11 +23,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* This file is part of the C front end.\n    It contains routines to build C expressions given their operands,\n    including computing the types of the result, C-specific error checks,\n-   and some optimization.\n-\n-   There are also routines to build RETURN_STMT nodes and CASE_STMT nodes,\n-   and to process initializations in declarations (since they work\n-   like a strange sort of assignment).  */\n+   and some optimization.  */\n \n #include \"config.h\"\n #include \"system.h\"\n@@ -6248,12 +6244,11 @@ c_expand_asm_operands (tree string, tree outputs, tree inputs,\n   emit_queue ();\n }\n \f\n-/* Expand a C `return' statement.\n-   RETVAL is the expression for what to return,\n-   or a null pointer for `return;' with no value.  */\n+/* Generate a C `return' statement.  RETVAL is the expression for what\n+   to return, or a null pointer for `return;' with no value.  */\n \n-tree\n-c_expand_return (tree retval)\n+void\n+c_finish_return (tree retval)\n {\n   tree valtype = TREE_TYPE (TREE_TYPE (current_function_decl));\n \n@@ -6282,7 +6277,7 @@ c_expand_return (tree retval)\n \n       current_function_returns_value = 1;\n       if (t == error_mark_node)\n-\treturn NULL_TREE;\n+\treturn;\n \n       inner = t = convert (TREE_TYPE (res), t);\n \n@@ -6340,7 +6335,7 @@ c_expand_return (tree retval)\n       retval = build (MODIFY_EXPR, TREE_TYPE (res), res, t);\n     }\n \n- return add_stmt (build_return_stmt (retval));\n+  add_stmt (build_stmt (RETURN_EXPR, retval));\n }\n \f\n struct c_switch {"}, {"sha": "029105711b4bd6e3722787f0f564630d10c932d3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5088b05874bc5a93099751efb19abe213ce2d0d1", "patch": "@@ -1,3 +1,12 @@\n+2004-06-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* dump.c (cp_dump_tree): Don't use dump_next_stmt.\n+\t* parser.c (cp_parser_jump_statement): Update commentary.\n+\t* pt.c (tsubst_expr): Use RETURN_EXPR.\n+\t* semantics.c (finish_return_stmt): Likewise.\n+\t(finalize_nrv_r): Likewise.\n+\t* typeck.c, typeck2.c: Update file start commentary.\n+\n 2004-06-21  Richard Henderson  <rth@redhat.com>\n \n \t* semantics.c (finish_expr_stmt): Call verify_sequence_points."}, {"sha": "f9b236472a89d2cee44e32b6b3164fc3f7ff0bec", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=5088b05874bc5a93099751efb19abe213ce2d0d1", "patch": "@@ -1,6 +1,6 @@\n /* C++-specific tree lowering bits; see also c-gimplify.c and tree-gimple.c.\n \n-   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n    Contributed by Jason Merrill <jason@redhat.com>\n \n This file is part of GCC."}, {"sha": "f765c32a6fb368e77076b0476b49587a811b9586", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=5088b05874bc5a93099751efb19abe213ce2d0d1", "patch": "@@ -366,14 +366,12 @@ cp_dump_tree (void* dump_info, tree t)\n \tdump_string (di, \"cleanup\");\n       dump_child (\"body\", TRY_STMTS (t));\n       dump_child (\"hdlr\", TRY_HANDLERS (t));\n-      dump_next_stmt (di, t);\n       break;\n \n     case EH_SPEC_BLOCK:\n       dump_stmt (di, t);\n       dump_child (\"body\", EH_SPEC_STMTS (t));\n       dump_child (\"raises\", EH_SPEC_RAISES (t));\n-      dump_next_stmt (di, t);\n       break;\n \n     case PTRMEM_CST:\n@@ -397,35 +395,30 @@ cp_dump_tree (void* dump_info, tree t)\n       dump_stmt (di, t);\n       dump_child (\"parm\", HANDLER_PARMS (t));\n       dump_child (\"body\", HANDLER_BODY (t));\n-      dump_next_stmt (di, t);\n       break;\n \n     case MUST_NOT_THROW_EXPR:\n       dump_stmt (di, t);\n       dump_child (\"body\", TREE_OPERAND (t, 0));\n-      dump_next_stmt (di, t);\n       break;\n \n     case USING_STMT:\n       dump_stmt (di, t);\n       dump_child (\"nmsp\", USING_STMT_NAMESPACE (t));\n-      dump_next_stmt (di, t);\n       break;\n \n     case CLEANUP_STMT:\n       dump_stmt (di, t);\n       dump_child (\"decl\", CLEANUP_DECL (t));\n       dump_child (\"expr\", CLEANUP_EXPR (t));\n       dump_child (\"body\", CLEANUP_BODY (t));\n-      dump_next_stmt (di, t);\n       break;\n \n     case IF_STMT:\n       dump_stmt (di, t);\n       dump_child (\"cond\", IF_COND (t));\n       dump_child (\"then\", THEN_CLAUSE (t));\n       dump_child (\"else\", ELSE_CLAUSE (t));\n-      dump_next_stmt (di, t);\n       break;\n \n     default:"}, {"sha": "bd6abe8393d1de1dfb67bc0274faaa9af49fb25f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5088b05874bc5a93099751efb19abe213ce2d0d1", "patch": "@@ -6241,7 +6241,7 @@ cp_parser_for_init_statement (cp_parser* parser)\n    jump-statement:\n      goto * expression ;\n \n-   Returns the new BREAK_STMT, CONTINUE_STMT, RETURN_STMT, or GOTO_EXPR.  */\n+   Returns the new BREAK_STMT, CONTINUE_STMT, RETURN_EXPR, or GOTO_EXPR.  */\n \n static tree\n cp_parser_jump_statement (cp_parser* parser)"}, {"sha": "f8e259c6fbca64a180690f1f534abc3be2bf1a08", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5088b05874bc5a93099751efb19abe213ce2d0d1", "patch": "@@ -7773,8 +7773,8 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t\t\t       (TREE_OPERAND (t, 0), args));\n       break;\n \n-    case RETURN_STMT:\n-      finish_return_stmt (tsubst_expr (RETURN_STMT_EXPR (t),\n+    case RETURN_EXPR:\n+      finish_return_stmt (tsubst_expr (TREE_OPERAND (t, 0),\n \t\t\t\t       args, complain, in_decl));\n       break;\n "}, {"sha": "0da94942c2e49677096ed6c00ae0c92a72bcf136", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=5088b05874bc5a93099751efb19abe213ce2d0d1", "patch": "@@ -3,8 +3,8 @@\n    building RTL.  These routines are used both during actual parsing\n    and during the instantiation of template functions. \n \n-   Copyright (C) 1998, 1999, 2000, 2001, 2002,\n-   2003, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+   Free Software Foundation, Inc.\n    Written by Mark Mitchell (mmitchell@usa.net) based on code found\n    formerly in parse.y and pt.c.  \n \n@@ -667,7 +667,7 @@ finish_return_stmt (tree expr)\n \t}\n     }\n \n-  r = build_stmt (RETURN_STMT, expr);\n+  r = build_stmt (RETURN_EXPR, expr);\n   r = maybe_cleanup_point_expr (r);\n   r = add_stmt (r);\n   finish_stmt ();\n@@ -3009,8 +3009,8 @@ finalize_nrv_r (tree* tp, int* walk_subtrees, void* data)\n   /* Change all returns to just refer to the RESULT_DECL; this is a nop,\n      but differs from using NULL_TREE in that it indicates that we care\n      about the value of the RESULT_DECL.  */\n-  else if (TREE_CODE (*tp) == RETURN_STMT)\n-    RETURN_STMT_EXPR (*tp) = dp->result;\n+  else if (TREE_CODE (*tp) == RETURN_EXPR)\n+    TREE_OPERAND (*tp, 0) = dp->result;\n   /* Change all cleanups for the NRV to only run when an exception is\n      thrown.  */\n   else if (TREE_CODE (*tp) == CLEANUP_STMT\n@@ -3052,7 +3052,7 @@ finalize_nrv_r (tree* tp, int* walk_subtrees, void* data)\n }\n \n /* Called from finish_function to implement the named return value\n-   optimization by overriding all the RETURN_STMTs and pertinent\n+   optimization by overriding all the RETURN_EXPRs and pertinent\n    CLEANUP_STMTs and replacing all occurrences of VAR with RESULT, the\n    RESULT_DECL for the function.  */\n "}, {"sha": "bdf7377d0e060c6c4081186e64cb8939883fe4d4", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=5088b05874bc5a93099751efb19abe213ce2d0d1", "patch": "@@ -24,11 +24,7 @@ Boston, MA 02111-1307, USA.  */\n /* This file is part of the C++ front end.\n    It contains routines to build C++ expressions given their operands,\n    including computing the types of the result, C and C++ specific error\n-   checks, and some optimization.\n-\n-   There are also routines to build RETURN_STMT nodes and CASE_STMT nodes,\n-   and to process initializations in declarations (since they work\n-   like a strange sort of assignment).  */\n+   checks, and some optimization.  */\n \n #include \"config.h\"\n #include \"system.h\""}, {"sha": "9ea4f55d5fbee881a4bb3c96342baae9d1bacd67", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=5088b05874bc5a93099751efb19abe213ce2d0d1", "patch": "@@ -26,11 +26,7 @@ Boston, MA 02111-1307, USA.  */\n /* This file is part of the C++ front end.\n    It contains routines to build C++ expressions given their operands,\n    including computing the types of the result, C and C++ specific error\n-   checks, and some optimization.\n-\n-   There are also routines to build RETURN_STMT nodes and CASE_STMT nodes,\n-   and to process initializations in declarations (since they work\n-   like a strange sort of assignment).  */\n+   checks, and some optimization.  */\n \n #include \"config.h\"\n #include \"system.h\""}, {"sha": "8a0dcabe47d1cdcc18808cf1e483bfbdc7de9b4f", "filename": "gcc/tree-dump.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Ftree-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5088b05874bc5a93099751efb19abe213ce2d0d1/gcc%2Ftree-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.h?ref=5088b05874bc5a93099751efb19abe213ce2d0d1", "patch": "@@ -83,7 +83,6 @@ extern void dump_pointer (dump_info_p, const char *, void *);\n extern void dump_int (dump_info_p, const char *, int);\n extern void dump_string (dump_info_p, const char *);\n extern void dump_stmt (dump_info_p, tree);\n-extern void dump_next_stmt (dump_info_p, tree);\n extern void queue_and_dump_index (dump_info_p, const char *, tree, int);\n extern void queue_and_dump_type (dump_info_p, tree);\n extern void dump_function (enum tree_dump_index, tree);"}]}