{"sha": "a29114a3bec5458073c39a324324868d4bac2d24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI5MTE0YTNiZWM1NDU4MDczYzM5YTMyNDMyNDg2OGQ0YmFjMmQyNA==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2007-03-05T16:06:27Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2007-03-05T16:06:27Z"}, "message": "natVMProxy.cc (ncode_closure.meth): Delete.\n\n2007-03-05  Andrew Haley  <aph@redhat.com>\n\n\t* java/lang/reflect/natVMProxy.cc (ncode_closure.meth): Delete.\n\t(generateProxyClass): Don't pass method to ncode.\n\t(run_proxy): Call _Jv_GetReflectedMethod to find the proxy method.\n\t* java/lang/reflect/Method.h: Rebuild.\n\t* java/lang/reflect/Method.java (internalGetParameterTypes,\n\tinternalGetExceptionTypes): New methods.\n\t* headers.txt (class java/lang/reflect/Method): Declare\n\t_Jv_GetReflectedMethod.  Be its friend.\n\t* java/lang/natClass.cc (_Jv_GetReflectedMethod): New method.\n\t* java/lang/Class.h: Declare it.  Be its friend.\n\nFrom-SVN: r122554", "tree": {"sha": "db2cc96f747dfe385b80f218bee0aca23560701e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db2cc96f747dfe385b80f218bee0aca23560701e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a29114a3bec5458073c39a324324868d4bac2d24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a29114a3bec5458073c39a324324868d4bac2d24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a29114a3bec5458073c39a324324868d4bac2d24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a29114a3bec5458073c39a324324868d4bac2d24/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4a2a1deec8e1c2c8f9ed80d166a37341fbafd19"}], "stats": {"total": 96, "additions": 83, "deletions": 13}, "files": [{"sha": "2b4f38be8e33935503b07a20eee6ba1ef34e5f3a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a29114a3bec5458073c39a324324868d4bac2d24/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a29114a3bec5458073c39a324324868d4bac2d24/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a29114a3bec5458073c39a324324868d4bac2d24", "patch": "@@ -1,3 +1,16 @@\n+2007-03-05  Andrew Haley  <aph@redhat.com>\n+\n+\t* java/lang/reflect/natVMProxy.cc (ncode_closure.meth): Delete.\n+\t(generateProxyClass): Don't pass method to ncode.\n+\t(run_proxy): Call _Jv_GetReflectedMethod to find the proxy method.\n+\t* java/lang/reflect/Method.h: Rebuild.\n+\t* java/lang/reflect/Method.java (internalGetParameterTypes,\n+\tinternalGetExceptionTypes): New methods.\n+\t* headers.txt (class java/lang/reflect/Method): Declare\n+\t_Jv_GetReflectedMethod.  Be its friend.\n+\t* java/lang/natClass.cc (_Jv_GetReflectedMethod): New method.\n+\t* java/lang/Class.h: Declare it.  Be its friend.\n+\n 2007-03-05  Tom Tromey  <tromey@redhat.com>\n \n \t* sources.am, Makefile.in: Rebuilt."}, {"sha": "2e61b96e5923ab0a4710aa568c5ffaa9a81af37b", "filename": "libjava/classpath/lib/java/lang/reflect/Method.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a29114a3bec5458073c39a324324868d4bac2d24/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2Freflect%2FMethod.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a29114a3bec5458073c39a324324868d4bac2d24/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2Freflect%2FMethod.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2Freflect%2FMethod.class?ref=a29114a3bec5458073c39a324324868d4bac2d24"}, {"sha": "c7a4caa3bf4f73c0b85aa0c7a8d8a30844e028f5", "filename": "libjava/headers.txt", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a29114a3bec5458073c39a324324868d4bac2d24/libjava%2Fheaders.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a29114a3bec5458073c39a324324868d4bac2d24/libjava%2Fheaders.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fheaders.txt?ref=a29114a3bec5458073c39a324324868d4bac2d24", "patch": "@@ -56,10 +56,12 @@ friend class java::lang::Class;\n class java/lang/reflect/Method\n prepend jmethodID _Jv_FromReflectedMethod (java::lang::reflect::Method *);\n prepend jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);\n+prepend ::java::lang::reflect::Method *_Jv_GetReflectedMethod (jclass, _Jv_Utf8Const*, _Jv_Utf8Const*);\n friend jmethodID (::_Jv_FromReflectedMethod) (java::lang::reflect::Method *);\n friend jobject (::_Jv_JNI_ToReflectedMethod) (_Jv_JNIEnv *, jclass, jmethodID, jboolean);\n friend class java::lang::Class;\n friend class java::io::ObjectInputStream;\n+friend java::lang::reflect::Method* ::_Jv_GetReflectedMethod (jclass, _Jv_Utf8Const*, _Jv_Utf8Const*);\n \n class gnu/gcj/runtime/ExtensionClassLoader\n friend class ::java::lang::ClassLoader;"}, {"sha": "3ea26ab85cf02af90aae895f377d1b897fb705fb", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a29114a3bec5458073c39a324324868d4bac2d24/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a29114a3bec5458073c39a324324868d4bac2d24/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=a29114a3bec5458073c39a324324868d4bac2d24", "patch": "@@ -225,6 +225,9 @@ jboolean _Jv_InterfaceAssignableFrom (jclass, jclass);\n \n _Jv_Method* _Jv_LookupDeclaredMethod (jclass, _Jv_Utf8Const *, \n \t\t\t\t      _Jv_Utf8Const*, jclass * = NULL);\n+java::lang::reflect::Method *_Jv_GetReflectedMethod (jclass klass, \n+\t\t\t\t\t\t    _Jv_Utf8Const *name,\n+\t\t\t\t\t\t    _Jv_Utf8Const *signature);\n jfieldID JvGetFirstInstanceField (jclass);\n jint JvNumInstanceFields (jclass);\n jfieldID JvGetFirstStaticField (jclass);\n@@ -529,6 +532,9 @@ class java::lang::Class : public java::lang::Object\n \n   friend _Jv_Method* ::_Jv_LookupDeclaredMethod (jclass, _Jv_Utf8Const *, \n \t\t\t\t\t\t _Jv_Utf8Const*, jclass *);\n+  friend java::lang::reflect::Method* ::_Jv_GetReflectedMethod (jclass klass, \n+\t\t\t\t\t\t    _Jv_Utf8Const *name,\n+\t\t\t\t\t\t    _Jv_Utf8Const *signature);\n   friend jfieldID (::JvGetFirstInstanceField) (jclass);\n   friend jint (::JvNumInstanceFields) (jclass);\n   friend jfieldID (::JvGetFirstStaticField) (jclass);"}, {"sha": "cec519fd5023c34310d0ea3b2dd4819c1ed3045e", "filename": "libjava/java/lang/natClass.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a29114a3bec5458073c39a324324868d4bac2d24/libjava%2Fjava%2Flang%2FnatClass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a29114a3bec5458073c39a324324868d4bac2d24/libjava%2Fjava%2Flang%2FnatClass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClass.cc?ref=a29114a3bec5458073c39a324324868d4bac2d24", "patch": "@@ -1630,6 +1630,26 @@ _Jv_LookupDeclaredMethod (jclass klass, _Jv_Utf8Const *name,\n   return NULL;\n }\n \n+java::lang::reflect::Method *\n+_Jv_GetReflectedMethod (jclass klass, _Jv_Utf8Const *name,\n+\t\t       _Jv_Utf8Const *signature)\n+{\n+  for (; klass; klass = klass->getSuperclass())\n+    {\n+      _Jv_Method *meth = _Jv_GetMethodLocal (klass, name, signature);\n+      if (meth)\n+\t{\n+\t  using namespace java::lang::reflect;\n+\t  Method *rmethod = new Method ();\n+\t  rmethod->offset = (char*) meth - (char*) klass->methods;\n+\t  rmethod->declaringClass = klass;\n+\t  return rmethod;\n+\t}\n+    }\n+  \n+  return NULL;\n+}\n+\n #ifdef HAVE_TLS\n \n // NOTE: MCACHE_SIZE should be a power of 2 minus one."}, {"sha": "8a843d5d154b1b7b0c0514c664a1637a5e019340", "filename": "libjava/java/lang/reflect/Method.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a29114a3bec5458073c39a324324868d4bac2d24/libjava%2Fjava%2Flang%2Freflect%2FMethod.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a29114a3bec5458073c39a324324868d4bac2d24/libjava%2Fjava%2Flang%2Freflect%2FMethod.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FMethod.h?ref=a29114a3bec5458073c39a324324868d4bac2d24", "patch": "@@ -12,6 +12,7 @@\n \n jmethodID _Jv_FromReflectedMethod (java::lang::reflect::Method *);\n jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);\n+::java::lang::reflect::Method *_Jv_GetReflectedMethod (jclass, _Jv_Utf8Const*, _Jv_Utf8Const*);\n \n class java::lang::reflect::Method : public ::java::lang::reflect::AccessibleObject\n {\n@@ -29,7 +30,13 @@ class java::lang::reflect::Method : public ::java::lang::reflect::AccessibleObje\n   jboolean isVarArgs();\n   ::java::lang::Class * getReturnType();\n   JArray< ::java::lang::Class * > * getParameterTypes();\n+public: // actually package-private\n+  JArray< ::java::lang::Class * > * internalGetParameterTypes();\n+public:\n   JArray< ::java::lang::Class * > * getExceptionTypes();\n+public: // actually package-private\n+  JArray< ::java::lang::Class * > * internalGetExceptionTypes();\n+public:\n   jboolean equals(::java::lang::Object *);\n   jint hashCode();\n   ::java::lang::String * toString();\n@@ -71,6 +78,7 @@ class java::lang::reflect::Method : public ::java::lang::reflect::AccessibleObje\n   friend jobject (::_Jv_JNI_ToReflectedMethod) (_Jv_JNIEnv *, jclass, jmethodID, jboolean);\n   friend class java::lang::Class;\n   friend class java::io::ObjectInputStream;\n+  friend java::lang::reflect::Method* ::_Jv_GetReflectedMethod (jclass, _Jv_Utf8Const*, _Jv_Utf8Const*);\n };\n \n #endif // __java_lang_reflect_Method__"}, {"sha": "878210abbd2ecbc40755127ebc5f70ad2820dba8", "filename": "libjava/java/lang/reflect/Method.java", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a29114a3bec5458073c39a324324868d4bac2d24/libjava%2Fjava%2Flang%2Freflect%2FMethod.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a29114a3bec5458073c39a324324868d4bac2d24/libjava%2Fjava%2Flang%2Freflect%2FMethod.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FMethod.java?ref=a29114a3bec5458073c39a324324868d4bac2d24", "patch": "@@ -153,6 +153,15 @@ public Class<?>[] getParameterTypes ()\n     return (Class<?>[]) parameter_types.clone();\n   }\n \n+  // Just like getParameterTypes, but don't clone the array.\n+  // Package private for use by VMProxy.\n+  final Class<?>[] internalGetParameterTypes ()\n+  {\n+    if (parameter_types == null)\n+      getType();\n+    return (Class<?>[]) parameter_types;\n+  }\n+\n   /**\n    * Get the exception types this method says it throws, in no particular\n    * order. If the method has no throws clause, returns a 0-length array\n@@ -167,6 +176,15 @@ public Class<?>[] getExceptionTypes ()\n     return (Class<?>[]) exception_types.clone();\n   }\n \n+  // Just like getExceptionTypes, but don't clone the array.\n+  // Package private for use by VMProxy.\n+  final Class<?>[] internalGetExceptionTypes ()\n+  {\n+    if (exception_types == null)\n+      getType();\n+    return (Class<?>[]) exception_types;\n+  }\n+\n   /**\n    * Compare two objects to see if they are semantically equivalent.\n    * Two Methods are semantically equivalent if they have the same declaring"}, {"sha": "c83880ccf1ee6f393bc6a2e87449ec08df807da6", "filename": "libjava/java/lang/reflect/natVMProxy.cc", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a29114a3bec5458073c39a324324868d4bac2d24/libjava%2Fjava%2Flang%2Freflect%2FnatVMProxy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a29114a3bec5458073c39a324324868d4bac2d24/libjava%2Fjava%2Flang%2Freflect%2FnatVMProxy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FnatVMProxy.cc?ref=a29114a3bec5458073c39a324324868d4bac2d24", "patch": "@@ -66,7 +66,7 @@ using namespace java::lang::reflect;\n using namespace java::lang;\n \n typedef void (*closure_fun) (ffi_cif*, void*, void**, void*);\n-static void *ncode (_Jv_Method *self, closure_fun fun, Method *meth);\n+static void *ncode (_Jv_Method *self, closure_fun fun);\n static void run_proxy (ffi_cif*, void*, void**, void*);\n \n typedef jobject invoke_t (jobject, Proxy *, Method *, JArray< jobject > *);\n@@ -165,7 +165,7 @@ java::lang::reflect::VMProxy::generateProxyClass\n       // the interfaces of which it is a proxy will also be reachable,\n       // so this is safe.\n       method = imethod;\n-      method.ncode = ncode (&method, run_proxy, elements(d->methods)[i]);\n+      method.ncode = ncode (&method, run_proxy);\n       method.accflags &= ~Modifier::ABSTRACT;\n     }\n \n@@ -283,15 +283,13 @@ unbox (jobject o, jclass klass, void *rvalue, FFI_TYPE type)\n     JvFail (\"Bad ffi type in proxy\");\n }\n \n-\n // run_proxy is the entry point for all proxy methods.  It boxes up\n // all the arguments and then invokes the invocation handler's invoke()\n // method.  Exceptions are caught and propagated.\n \n typedef struct {\n   ffi_closure  closure;\n   ffi_cif   cif;\n-  Method *meth;\n   _Jv_Method *self;\n   ffi_type *arg_types[0];\n } ncode_closure;\n@@ -313,9 +311,15 @@ run_proxy (ffi_cif *cif,\n   Thread *thread = Thread::currentThread();\n   _Jv_InterpFrame frame_desc (self->self, thread, proxy->getClass());\n \n+  Method *meth = _Jv_GetReflectedMethod (proxy->getClass(), \n+\t\t\t\t\t self->self->name,\n+\t\t\t\t\t self->self->signature);\n+  JArray<jclass> *parameter_types = meth->internalGetParameterTypes ();\n+  JArray<jclass> *exception_types = meth->internalGetExceptionTypes ();\n+\n   InvocationHandler *handler = proxy->h;\n   void *poo \n-    = _Jv_NewObjectArray (self->meth->parameter_types->length, &Object::class$, NULL);\n+    = _Jv_NewObjectArray (parameter_types->length, &Object::class$, NULL);\n   JArray<jobject> *argsArray = (JArray<jobject> *) poo;\n   jobject *jargs = elements(argsArray);\n \n@@ -331,38 +335,38 @@ run_proxy (ffi_cif *cif,\n \n   // Copy and box all the args.\n   int index = 1;\n-  for (int i = 0; i < self->meth->parameter_types->length; i++, index++)\n-    jargs[i] = box (args[index], elements(self->meth->parameter_types)[i],\n+  for (int i = 0; i < parameter_types->length; i++, index++)\n+    jargs[i] = box (args[index], elements(parameter_types)[i],\n \t\t    cif->arg_types[index]->type);\n   \n   jobject ret;\n   try\n     {\n-      ret = invoke (handler, proxy, self->meth, argsArray);\n+      ret = invoke (handler, proxy, meth, argsArray);\n     }\n   catch (Throwable *t)\n     {\n       if (_Jv_IsInstanceOf (t, &RuntimeException::class$)\n \t  || _Jv_IsInstanceOf (t, &Error::class$))\n \tthrow t;\n \n-      Class **throwables = elements (self->meth->exception_types);\n-      for (int i = 0; i < self->meth->exception_types->length; i++)\n+      Class **throwables = elements (exception_types);\n+      for (int i = 0; i < exception_types->length; i++)\n \tif (_Jv_IsInstanceOf (t, throwables[i]))\n \t  throw t;\n \n       throw new UndeclaredThrowableException (t);\n     }\n \n-  unbox (ret, self->meth->return_type, rvalue, cif->rtype->type);\n+  unbox (ret, meth->return_type, rvalue, cif->rtype->type);\n }\n \n \n // Given a method and a closure function, create libffi CIF and return\n // the address of its closure.\n \n static void *\n-ncode (_Jv_Method *self, closure_fun fun, Method *meth)\n+ncode (_Jv_Method *self, closure_fun fun)\n {\n   using namespace java::lang::reflect;\n \n@@ -379,7 +383,6 @@ ncode (_Jv_Method *self, closure_fun fun, Method *meth)\n \t\t&closure->cif,\n \t\t&closure->arg_types[0],\n \t\tNULL);\n-  closure->meth = meth;\n   closure->self = self;\n \n   JvAssert ((self->accflags & Modifier::NATIVE) == 0);"}]}