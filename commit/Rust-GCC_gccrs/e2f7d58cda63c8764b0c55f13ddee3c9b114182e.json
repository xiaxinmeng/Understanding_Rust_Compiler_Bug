{"sha": "e2f7d58cda63c8764b0c55f13ddee3c9b114182e", "node_id": "C_kwDOANBUbNoAKGUyZjdkNThjZGE2M2M4NzY0YjBjNTVmMTNkZGVlM2M5YjExNDE4MmU", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-03-20T17:01:04Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-17T08:25:42Z"}, "message": "[Ada] Streamline implementation of Has_Compatible_Representation\n\nThe predicate is only concerned with the internal representation of types\nand this representation is shared by the subtypes of a given type, so the\nimplementation can directly look into the (implementation) base types.\n\nNo functional changes.\n\ngcc/ada/\n\n\t* sem_ch13.ads (Has_Compatible_Representation): Minor tweaks.\n\t* sem_ch13.adb (Has_Compatible_Representation): Look directly into\n\tthe (implementation) base types and simplifiy accordingly.\n\t* exp_ch5.adb (Change_Of_Representation): Adjust.\n\t* exp_ch6.adb (Expand_Actuals): Likewise.", "tree": {"sha": "473534785c8ff3ea06edcb494ac50c1ce07aba80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/473534785c8ff3ea06edcb494ac50c1ce07aba80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2f7d58cda63c8764b0c55f13ddee3c9b114182e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2f7d58cda63c8764b0c55f13ddee3c9b114182e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2f7d58cda63c8764b0c55f13ddee3c9b114182e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2f7d58cda63c8764b0c55f13ddee3c9b114182e/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87a655842470b3f764f6809206d1236227c315d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87a655842470b3f764f6809206d1236227c315d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87a655842470b3f764f6809206d1236227c315d3"}], "stats": {"total": 80, "additions": 31, "deletions": 49}, "files": [{"sha": "9c7a37026d588c5982d2aac5a6928b6eafc935aa", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f7d58cda63c8764b0c55f13ddee3c9b114182e/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f7d58cda63c8764b0c55f13ddee3c9b114182e/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=e2f7d58cda63c8764b0c55f13ddee3c9b114182e", "patch": "@@ -292,8 +292,8 @@ package body Exp_Ch5 is\n       return\n         Nkind (Rhs) = N_Type_Conversion\n           and then not Has_Compatible_Representation\n-                         (Target_Type  => Etype (Rhs),\n-                          Operand_Type => Etype (Expression (Rhs)));\n+                         (Target_Typ  => Etype (Rhs),\n+                          Operand_Typ => Etype (Expression (Rhs)));\n    end Change_Of_Representation;\n \n    ------------------------------"}, {"sha": "9ddbd8c20c391230e4b082c6443aec96081877b8", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f7d58cda63c8764b0c55f13ddee3c9b114182e/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f7d58cda63c8764b0c55f13ddee3c9b114182e/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=e2f7d58cda63c8764b0c55f13ddee3c9b114182e", "patch": "@@ -1576,8 +1576,8 @@ package body Exp_Ch6 is\n             Var := Make_Var (Expression (Actual));\n \n             Crep := not Has_Compatible_Representation\n-                          (Target_Type  => F_Typ,\n-                           Operand_Type => Etype (Expression (Actual)));\n+                          (Target_Typ  => F_Typ,\n+                           Operand_Typ => Etype (Expression (Actual)));\n \n          else\n             V_Typ := Etype (Actual);\n@@ -2379,8 +2379,8 @@ package body Exp_Ch6 is\n                   --  Also pass by copy if change of representation\n \n                   or else not Has_Compatible_Representation\n-                                (Target_Type  => Etype (Formal),\n-                                 Operand_Type => Etype (Expression (Actual))))\n+                                (Target_Typ  => Etype (Formal),\n+                                 Operand_Typ => Etype (Expression (Actual))))\n             then\n                Add_Call_By_Copy_Code;\n \n@@ -4556,8 +4556,8 @@ package body Exp_Ch6 is\n                   --  warning, and do the change of representation.\n \n                   elsif not Has_Compatible_Representation\n-                              (Target_Type  => Formal_Typ,\n-                               Operand_Type => Parent_Typ)\n+                              (Target_Typ  => Formal_Typ,\n+                               Operand_Typ => Parent_Typ)\n                   then\n                      Error_Msg_N\n                        (\"??change of representation required\", Actual);"}, {"sha": "93f5e452bd490912aca8e1c28dffec93af66b49e", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 18, "deletions": 35, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f7d58cda63c8764b0c55f13ddee3c9b114182e/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f7d58cda63c8764b0c55f13ddee3c9b114182e/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=e2f7d58cda63c8764b0c55f13ddee3c9b114182e", "patch": "@@ -13436,56 +13436,40 @@ package body Sem_Ch13 is\n    -----------------------------------\n \n    function Has_Compatible_Representation\n-     (Target_Type, Operand_Type : Entity_Id) return Boolean\n+     (Target_Typ, Operand_Typ : Entity_Id) return Boolean\n    is\n-      T1 : constant Entity_Id := Underlying_Type (Target_Type);\n-      T2 : constant Entity_Id := Underlying_Type (Operand_Type);\n+      --  The subtype-specific representation attributes (Size and Alignment)\n+      --  do not affect representation from the point of view of this function.\n \n-   begin\n-      --  A quick check, if base types are the same, then we definitely have\n-      --  the same representation, because the subtype specific representation\n-      --  attributes (Size and Alignment) do not affect representation from\n-      --  the point of view of this test.\n-\n-      if Base_Type (T1) = Base_Type (T2) then\n-         return True;\n+      T1 : constant Entity_Id := Implementation_Base_Type (Target_Typ);\n+      T2 : constant Entity_Id := Implementation_Base_Type (Operand_Typ);\n \n-      elsif Is_Private_Type (Base_Type (T2))\n-        and then Base_Type (T1) = Full_View (Base_Type (T2))\n-      then\n-         return True;\n-\n-      --  If T2 is a generic actual it is declared as a subtype, so\n-      --  check against its base type.\n+   begin\n+      --  Return true immediately for the same base type\n \n-      elsif Is_Generic_Actual_Type (T1)\n-        and then Has_Compatible_Representation (Base_Type (T1), T2)\n-      then\n+      if T1 = T2 then\n          return True;\n-      end if;\n \n       --  Tagged types always have the same representation, because it is not\n       --  possible to specify different representations for common fields.\n \n-      if Is_Tagged_Type (T1) then\n+      elsif Is_Tagged_Type (T1) then\n          return True;\n-      end if;\n \n       --  Representations are definitely different if conventions differ\n \n-      if Convention (T1) /= Convention (T2) then\n+      elsif Convention (T1) /= Convention (T2) then\n          return False;\n-      end if;\n \n       --  Representations are different if component alignments or scalar\n       --  storage orders differ.\n \n-      if (Is_Record_Type (T1) or else Is_Array_Type (T1))\n-            and then\n-         (Is_Record_Type (T2) or else Is_Array_Type (T2))\n-        and then\n-         (Component_Alignment (T1) /= Component_Alignment (T2)\n-           or else Reverse_Storage_Order (T1) /= Reverse_Storage_Order (T2))\n+      elsif (Is_Record_Type (T1) or else Is_Array_Type (T1))\n+              and then\n+            (Is_Record_Type (T2) or else Is_Array_Type (T2))\n+        and then (Component_Alignment (T1) /= Component_Alignment (T2)\n+                   or else\n+                  Reverse_Storage_Order (T1) /= Reverse_Storage_Order (T2))\n       then\n          return False;\n       end if;\n@@ -13512,11 +13496,10 @@ package body Sem_Ch13 is\n          then\n             return True;\n          end if;\n-      end if;\n \n-      --  For records, representations are different if reorderings differ\n+      --  For records, representations are different if reordering differs\n \n-      if Is_Record_Type (T1)\n+      elsif Is_Record_Type (T1)\n         and then Is_Record_Type (T2)\n         and then No_Reordering (T1) /= No_Reordering (T2)\n       then"}, {"sha": "e0d84c99b373517dbdc8f6b362bb59731f82b49d", "filename": "gcc/ada/sem_ch13.ads", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f7d58cda63c8764b0c55f13ddee3c9b114182e/gcc%2Fada%2Fsem_ch13.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f7d58cda63c8764b0c55f13ddee3c9b114182e/gcc%2Fada%2Fsem_ch13.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.ads?ref=e2f7d58cda63c8764b0c55f13ddee3c9b114182e", "patch": "@@ -130,12 +130,11 @@ package Sem_Ch13 is\n    --  clause, T is the component type.\n \n    function Has_Compatible_Representation\n-     (Target_Type, Operand_Type : Entity_Id) return Boolean;\n-   --  Given two types, where the two types are related by possible derivation,\n-   --  determines if the two types have compatible representation, or different\n-   --  representations, requiring the special processing for representation\n-   --  change. A False result is possible only for array, enumeration or\n-   --  record types.\n+     (Target_Typ, Operand_Typ : Entity_Id) return Boolean;\n+   --  Given an explicit or implicit conversion from Operand_Typ to Target_Typ,\n+   --  determine whether the types have compatible or different representation,\n+   --  thus requiring special processing for the conversion in the latter case.\n+   --  A False result is possible only for array, enumeration and record types.\n \n    procedure Parse_Aspect_Aggregate\n      (N                   : Node_Id;"}]}