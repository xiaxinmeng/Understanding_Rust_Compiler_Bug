{"sha": "e99f332f05fbe3e18d628a91cb363dc67047e19f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk5ZjMzMmYwNWZiZTNlMThkNjI4YTkxY2IzNjNkYzY3MDQ3ZTE5Zg==", "commit": {"author": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-11-22T12:15:53Z"}, "committer": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-11-22T12:15:53Z"}, "message": "re PR c++/18354 (expression \"+1\" not considered constant (as template parameter).)\n\n\tPR c++/18354\n\t* typeck.c (build_unary_op) <CONVERT_EXPR, NEGATE_EXPR>: Unify code.\n\tMake sure the result is always a rvalue.\n\n\tPR c++/18354\n\t* g++.dg/template/nontype11.C: New test.\n\nFrom-SVN: r91008", "tree": {"sha": "09703038def87536054944b70def832562af54cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09703038def87536054944b70def832562af54cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e99f332f05fbe3e18d628a91cb363dc67047e19f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e99f332f05fbe3e18d628a91cb363dc67047e19f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e99f332f05fbe3e18d628a91cb363dc67047e19f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e99f332f05fbe3e18d628a91cb363dc67047e19f/comments", "author": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cb70db4d9333ea241e1076147ec8f3516ea7982", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cb70db4d9333ea241e1076147ec8f3516ea7982", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cb70db4d9333ea241e1076147ec8f3516ea7982"}], "stats": {"total": 73, "additions": 55, "deletions": 18}, "files": [{"sha": "bcb9d21a6fc549bbc612aae6cceef52cd501bda4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e99f332f05fbe3e18d628a91cb363dc67047e19f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e99f332f05fbe3e18d628a91cb363dc67047e19f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e99f332f05fbe3e18d628a91cb363dc67047e19f", "patch": "@@ -1,3 +1,9 @@\n+2004-11-22  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\n+\tPR c++/18354\n+\t* typeck.c (build_unary_op) <CONVERT_EXPR, NEGATE_EXPR>: Unify code.\n+\tMake sure the result is always a rvalue.\n+\n 2004-11-16  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \t* decl.c (start_preparsed_function): Call check_function_type even"}, {"sha": "4caf051075c6776cc863aaf6851a18a7c0a4c8aa", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e99f332f05fbe3e18d628a91cb363dc67047e19f/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e99f332f05fbe3e18d628a91cb363dc67047e19f/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=e99f332f05fbe3e18d628a91cb363dc67047e19f", "patch": "@@ -3741,26 +3741,30 @@ build_unary_op (enum tree_code code, tree xarg, int noconvert)\n \n   switch (code)\n     {\n+    /* CONVERT_EXPR stands for unary plus in this context.  */\n     case CONVERT_EXPR:\n-      /* This is used for unary plus, because a CONVERT_EXPR\n-\t is enough to prevent anybody from looking inside for\n-\t associativity, but won't generate any code.  */\n-      if (!(arg = build_expr_type_conversion\n-\t    (WANT_ARITH | WANT_ENUM | WANT_POINTER, arg, true)))\n-\terrstring = \"wrong type argument to unary plus\";\n-      else\n-\t{\n-\t  if (!noconvert)\n-\t    arg = default_conversion (arg);\n-\t  arg = build1 (NON_LVALUE_EXPR, TREE_TYPE (arg), arg);\n-\t}\n-      break;\n-\n     case NEGATE_EXPR:\n-      if (!(arg = build_expr_type_conversion (WANT_ARITH | WANT_ENUM, arg, true)))\n-\terrstring = \"wrong type argument to unary minus\";\n-      else if (!noconvert && CP_INTEGRAL_TYPE_P (TREE_TYPE (arg)))\n-\targ = perform_integral_promotions (arg);\n+      {\r\n+\tint flags = WANT_ARITH | WANT_ENUM;\r\n+\t/* Unary plus (but not unary minus) is allowed on pointers.  */\r\n+\tif (code == CONVERT_EXPR)\r\n+\t  flags |= WANT_POINTER;\r\n+\targ = build_expr_type_conversion (flags, arg, true);\r\n+\tif (!arg)\n+\t  errstring = (code == NEGATE_EXPR\n+\t\t       ? \"wrong type argument to unary minus\"\n+\t\t       : \"wrong type argument to unary plus\");\n+\telse\n+\t  {\n+\t    if (!noconvert && CP_INTEGRAL_TYPE_P (TREE_TYPE (arg)))\n+\t      arg = perform_integral_promotions (arg);\n+\n+\t    /* Make sure the result is not a lvalue: a unary plus or minus\n+\t       expression is always a rvalue.  */\n+\t    if (real_lvalue_p (arg))\n+\t      arg = build1 (NON_LVALUE_EXPR, TREE_TYPE (arg), arg);\n+\t  }\n+      }\n       break;\n \n     case BIT_NOT_EXPR:"}, {"sha": "3601740963151c0a8f815176894ac02255425578", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e99f332f05fbe3e18d628a91cb363dc67047e19f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e99f332f05fbe3e18d628a91cb363dc67047e19f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e99f332f05fbe3e18d628a91cb363dc67047e19f", "patch": "@@ -1,3 +1,8 @@\n+2004-11-22  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\n+\tPR c++/18354\n+\t* g++.dg/template/nontype11.C: New test.\n+\n 2004-11-21  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/18520"}, {"sha": "d52eb9a3879b854242b6fe8a1f396bb8a6c3139c", "filename": "gcc/testsuite/g++.dg/template/nontype11.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e99f332f05fbe3e18d628a91cb363dc67047e19f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e99f332f05fbe3e18d628a91cb363dc67047e19f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype11.C?ref=e99f332f05fbe3e18d628a91cb363dc67047e19f", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do compile }\n+// Origin: <fsm at robots dot ox dot ac dot uk>\n+// PR c++/18354: Unary plus should not be wrapped in NON_LVALUE_EXPR\n+\n+template <int N>\n+struct X { };\n+\n+const int n = 1;\n+\n+void f()\n+{\n+  X< 1> a;\n+  X<-1> b;\n+  X<+1> c;\n+}\n+\n+void g()\n+{\n+  X< n> a;\n+  X<-n> b;\n+  X<+n> c;\n+}"}]}