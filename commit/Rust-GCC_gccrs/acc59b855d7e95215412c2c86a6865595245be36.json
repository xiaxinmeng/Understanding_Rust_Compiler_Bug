{"sha": "acc59b855d7e95215412c2c86a6865595245be36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNjNTliODU1ZDdlOTUyMTU0MTJjMmM4NmE2ODY1NTk1MjQ1YmUzNg==", "commit": {"author": {"name": "Anthony Green", "email": "green@redhat.com", "date": "2002-09-30T14:57:43Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2002-09-30T14:57:43Z"}, "message": "Add -fno-assert flag.\n\nFrom-SVN: r57649", "tree": {"sha": "4cb01f295ad7fd212fe7d141eec414cf205cef3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cb01f295ad7fd212fe7d141eec414cf205cef3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acc59b855d7e95215412c2c86a6865595245be36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acc59b855d7e95215412c2c86a6865595245be36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acc59b855d7e95215412c2c86a6865595245be36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acc59b855d7e95215412c2c86a6865595245be36/comments", "author": {"login": "atgreen", "id": 89993, "node_id": "MDQ6VXNlcjg5OTkz", "avatar_url": "https://avatars.githubusercontent.com/u/89993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atgreen", "html_url": "https://github.com/atgreen", "followers_url": "https://api.github.com/users/atgreen/followers", "following_url": "https://api.github.com/users/atgreen/following{/other_user}", "gists_url": "https://api.github.com/users/atgreen/gists{/gist_id}", "starred_url": "https://api.github.com/users/atgreen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atgreen/subscriptions", "organizations_url": "https://api.github.com/users/atgreen/orgs", "repos_url": "https://api.github.com/users/atgreen/repos", "events_url": "https://api.github.com/users/atgreen/events{/privacy}", "received_events_url": "https://api.github.com/users/atgreen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "48ddd46c41cb690543ffc86828d664ce78af6122", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48ddd46c41cb690543ffc86828d664ce78af6122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48ddd46c41cb690543ffc86828d664ce78af6122"}], "stats": {"total": 57, "additions": 52, "deletions": 5}, "files": [{"sha": "0035db2a2c550f3d8016621a25eba0d1a6c0b116", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc59b855d7e95215412c2c86a6865595245be36/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc59b855d7e95215412c2c86a6865595245be36/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=acc59b855d7e95215412c2c86a6865595245be36", "patch": "@@ -1,3 +1,18 @@\n+2002-09-28  Anthony Green  <green@redhat.com>\n+\n+\t* gcj.texi (Invoking jv-scan): Add --no-assert documentation.\n+\t(Code Generation): Add -fno-assert documentation.\n+\t* jv-scan.c (flag_assert): New global.\n+\t(options): Add assert option.\n+\t(help): Add --no-assert documentation.\n+\t* parse-scan.y (flag_assert): New global.\n+\t* lang.c (lang_f_options): Add -fassert/-fno-assert support.\n+\t(flag_assert): New global.\n+\t* java-tree.h (flag_assert): New global.\n+\t* lex.c (java_lex): Obey flag_assert.\n+\t* jvspec.c (jvgenmain_spec): Strip -fassert/-fno-assert when\n+\tcalling cc1.\n+\n 2002-09-26  Andrew Haley  <aph@redhat.com>\n \n \t* expr.c (build_java_array_length_access): Check for null pointer."}, {"sha": "8acf3a35f915d2e979816d4482fc94c67008825e", "filename": "gcc/java/gcj.texi", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc59b855d7e95215412c2c86a6865595245be36/gcc%2Fjava%2Fgcj.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc59b855d7e95215412c2c86a6865595245be36/gcc%2Fjava%2Fgcj.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgcj.texi?ref=acc59b855d7e95215412c2c86a6865595245be36", "patch": "@@ -428,6 +428,10 @@ using JNI, then you must use @code{-fjni}.  This option causes\n @command{gcj} to generate stubs which will invoke the underlying JNI\n methods.\n \n+@item -fno-assert\n+Don't recognize the @code{assert} keyword.  This is for compatibility\n+with older versions of the language specification.\n+\n @item -fno-optimize-static-class-initialization\n When the optimization level is greater or equal to @code{-O2},\n @command{gcj} will try to optimize the way calls into the runtime are made\n@@ -622,8 +626,9 @@ source file (@file{.java} file).\n \n @ignore\n @c man begin SYNOPSIS jv-scan\n-jv-scan [@option{--complexity}] [@option{--encoding}=@var{name}]\n-    [@option{--print-main}] [@option{--list-class}] [@option{--list-filename}]\n+jv-scan [@option{--no-assert}] [@option{--complexity}] \n+    [@option{--encoding}=@var{name}] [@option{--print-main}] \n+    [@option{--list-class}] [@option{--list-filename}]\n     [@option{--version}] [@option{--help}]\n     [@option{-o} @var{file}] @var{inputfile}@dots{}\n @c man end\n@@ -635,6 +640,11 @@ and the Info entries for @file{gcj} and @file{gcc}.\n \n @c man begin OPTIONS jv-scan\n \n+@table @gcctabopt\n+@item --no-assert\n+Don't recognize the @code{assert} keyword, for backwards compatibility\n+with older versions of the language specification.\n+\n @table @gcctabopt\n @item --complexity\n This prints a complexity measure, related to cyclomatic complexity, for"}, {"sha": "794ebc6e04e5dfced7af71d9543b649b07c880ea", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc59b855d7e95215412c2c86a6865595245be36/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc59b855d7e95215412c2c86a6865595245be36/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=acc59b855d7e95215412c2c86a6865595245be36", "patch": "@@ -160,6 +160,10 @@ extern int flag_emit_class_files;\n \n extern int flag_filelist_file;\n \n+/* When nonzero, permit the use of the assert keyword.  */\n+\n+extern int flag_assert;\n+\n /* When nonzero, assume all native functions are implemented with\n    JNI, not CNI.  */\n "}, {"sha": "73eb3f4d535c442d5101e4b092ff0f36d65cad67", "filename": "gcc/java/jv-scan.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc59b855d7e95215412c2c86a6865595245be36/gcc%2Fjava%2Fjv-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc59b855d7e95215412c2c86a6865595245be36/gcc%2Fjava%2Fjv-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjv-scan.c?ref=acc59b855d7e95215412c2c86a6865595245be36", "patch": "@@ -64,6 +64,7 @@ int flag_find_main = 0;\n int flag_dump_class = 0;\n int flag_list_filename = 0;\n int flag_complexity = 0;\n+int flag_assert = 1;\n \n int pedantic = 0;\n \n@@ -85,6 +86,8 @@ static const struct option options[] =\n   { \"list-class\", no_argument,      &flag_dump_class, 1 },\n   { \"encoding\",  required_argument, NULL, OPT_ENCODING },\n   { \"complexity\", no_argument,\t    &flag_complexity, 1 },\n+  { \"no-assert\", no_argument,       &flag_assert, 0 },\n+  { \"assert\",    no_argument,       &flag_assert, 1 },\n   { NULL,        no_argument,       NULL, 0 }\n };\n \n@@ -100,6 +103,7 @@ help ()\n {\n   printf (\"Usage: jv-scan [OPTION]... FILE...\\n\\n\");\n   printf (\"Print useful information read from Java source files.\\n\\n\");\n+  printf (\"  --no-assert             Don't recognize the assert keyword\\n\");\n   printf (\"  --complexity            Print cyclomatic complexity of input file\\n\");\n   printf (\"  --encoding NAME         Specify encoding of input file\\n\");\n   printf (\"  --print-main            Print name of class containing `main'\\n\");"}, {"sha": "e531f7ca5f38a5fd3f7a7b0efb5afa17dba96584", "filename": "gcc/java/jvspec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc59b855d7e95215412c2c86a6865595245be36/gcc%2Fjava%2Fjvspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc59b855d7e95215412c2c86a6865595245be36/gcc%2Fjava%2Fjvspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvspec.c?ref=acc59b855d7e95215412c2c86a6865595245be36", "patch": "@@ -62,7 +62,7 @@ static const char jvgenmain_spec[] =\n \t\t   %{v:-version} %{pg:-p} %{p}\\\n \t\t   %{<fbounds-check} %{<fno-bounds-check}\\\n \t\t   %{<fassume-compiled} %{<fno-assume-compiled}\\\n-                   %{<fcompile-resource*}\\\n+                   %{<fcompile-resource*} %{<fassert} %{<fno-assert} \\\n \t\t   %{<femit-class-file} %{<femit-class-files} %{<fencoding*}\\\n \t\t   %{<fuse-boehm-gc} %{<fhash-synchronization} %{<fjni}\\\n \t\t   %{<findirect-dispatch} \\"}, {"sha": "c6fbb44ddd8d478ba166207d9993f278121f3d5f", "filename": "gcc/java/lang.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc59b855d7e95215412c2c86a6865595245be36/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc59b855d7e95215412c2c86a6865595245be36/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=acc59b855d7e95215412c2c86a6865595245be36", "patch": "@@ -147,6 +147,9 @@ int flag_use_boehm_gc = 0;\n    object to its synchronization structure.  */\n int flag_hash_synchronization;\n \n+/* When nonzero, permit the use of the assert keyword.  */\n+int flag_assert = 1;\n+\n /* When nonzero, assume all native functions are implemented with\n    JNI, not CNI.  */\n int flag_jni = 0;\n@@ -205,7 +208,8 @@ lang_f_options[] =\n   {\"force-classes-archive-check\", &flag_force_classes_archive_check, 1},\n   {\"optimize-static-class-initialization\", &flag_optimize_sci, 1 },\n   {\"indirect-dispatch\", &flag_indirect_dispatch, 1},\n-  {\"store-check\", &flag_store_check, 1}\n+  {\"store-check\", &flag_store_check, 1},\n+  {\"assert\", &flag_assert, 1}\n };\n \n static const struct string_option"}, {"sha": "d6901760d33d6e0999f38a7805268df0d5cc4402", "filename": "gcc/java/lex.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc59b855d7e95215412c2c86a6865595245be36/gcc%2Fjava%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc59b855d7e95215412c2c86a6865595245be36/gcc%2Fjava%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.c?ref=acc59b855d7e95215412c2c86a6865595245be36", "patch": "@@ -1604,6 +1604,15 @@ java_lex (java_lval)\n \t      SET_LVAL_NODE (null_pointer_node);\n \t      return NULL_TK;\n \n+\t    case ASSERT_TK:\n+\t      if (flag_assert)\n+\t\t{\n+\t\t  BUILD_OPERATOR (kw->token);\n+\t\t  return kw->token;\n+\t\t}\n+\t      else\n+\t\tbreak;\n+\n \t      /* Some keyword we want to retain information on the location\n \t\t they where found.  */\n \t    case CASE_TK:\n@@ -1617,7 +1626,6 @@ java_lex (java_lval)\n \t    case CATCH_TK:\n \t    case THROW_TK:\n \t    case INSTANCEOF_TK:\n-\t    case ASSERT_TK:\n \t      BUILD_OPERATOR (kw->token);\n \n \t    default:"}, {"sha": "81ce627216d00cde8cb7e3fd3d24c0d7f9f63414", "filename": "gcc/java/parse-scan.y", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc59b855d7e95215412c2c86a6865595245be36/gcc%2Fjava%2Fparse-scan.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc59b855d7e95215412c2c86a6865595245be36/gcc%2Fjava%2Fparse-scan.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse-scan.y?ref=acc59b855d7e95215412c2c86a6865595245be36", "patch": "@@ -135,6 +135,8 @@ void report PARAMS ((void));\n }\n \n %{\n+extern int flag_assert;\n+\n #include \"lex.c\"\n %}\n "}]}