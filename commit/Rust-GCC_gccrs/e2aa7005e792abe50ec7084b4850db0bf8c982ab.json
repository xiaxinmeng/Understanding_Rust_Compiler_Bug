{"sha": "e2aa7005e792abe50ec7084b4850db0bf8c982ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJhYTcwMDVlNzkyYWJlNTBlYzcwODRiNDg1MGRiMGJmOGM5ODJhYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-06-18T23:27:30Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-06-18T23:27:30Z"}, "message": "mt_allocator (__mt_alloc<>::_Tune): Add _M_align, the alignment requested.\n\n2004-06-18  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/mt_allocator (__mt_alloc<>::_Tune): Add _M_align,\n\tthe alignment requested.\n\t(__mt_alloc<>::_Tune::_Tune): Tweak consistently.\n\t(__mt_alloc<>::allocate): Use it instead of sizeof(_Block_record).\n\t(__mt_alloc<>::deallocate): Likewise.\n\nFrom-SVN: r83372", "tree": {"sha": "b395f240195806b1575fd64ef40c5a83eab8a180", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b395f240195806b1575fd64ef40c5a83eab8a180"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2aa7005e792abe50ec7084b4850db0bf8c982ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2aa7005e792abe50ec7084b4850db0bf8c982ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2aa7005e792abe50ec7084b4850db0bf8c982ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2aa7005e792abe50ec7084b4850db0bf8c982ab/comments", "author": null, "committer": null, "parents": [{"sha": "dc04f75547c55a6022125ef3684f18ae432af236", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc04f75547c55a6022125ef3684f18ae432af236", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc04f75547c55a6022125ef3684f18ae432af236"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "fe64565e4eec7f7c9660287c7e025bbae0404791", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2aa7005e792abe50ec7084b4850db0bf8c982ab/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2aa7005e792abe50ec7084b4850db0bf8c982ab/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e2aa7005e792abe50ec7084b4850db0bf8c982ab", "patch": "@@ -1,3 +1,11 @@\n+2004-06-18  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/mt_allocator (__mt_alloc<>::_Tune): Add _M_align,\n+\tthe alignment requested.\n+\t(__mt_alloc<>::_Tune::_Tune): Tweak consistently.\n+\t(__mt_alloc<>::allocate): Use it instead of sizeof(_Block_record).\n+\t(__mt_alloc<>::deallocate): Likewise.\n+\n 2004-06-18  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/16020"}, {"sha": "8812c2df44b26f856a5bcc7dbbf8c15c2d836fc9", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2aa7005e792abe50ec7084b4850db0bf8c982ab/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2aa7005e792abe50ec7084b4850db0bf8c982ab/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=e2aa7005e792abe50ec7084b4850db0bf8c982ab", "patch": "@@ -118,12 +118,18 @@ namespace __gnu_cxx\n       // assigned and explained in detail below.\n       struct _Tune\n       {\n+\t// Alignment needed.\n+\t// NB: In any case must be >= sizeof(_Block_record), that\n+\t// is 4 on 32 bit machines and 8 on 64 bit machines.\n+\tsize_t  _M_align;\n+\n \t// Allocation requests (after round-up to power of 2) below\n \t// this value will be handled by the allocator. A raw new/\n \t// call will be used for requests larger than this value.\n \tsize_t\t_M_max_bytes; \n \n-\t// Size in bytes of the smallest bin (must be a power of 2).\n+\t// Size in bytes of the smallest bin.\n+\t// NB: Must be a power of 2 and >= _M_align.\n \tsize_t  _M_min_bin;\n \n \t// In order to avoid fragmenting and minimize the number of\n@@ -150,18 +156,19 @@ namespace __gnu_cxx\n      \n \texplicit\n \t_Tune()\n-\t: _M_max_bytes(128), _M_min_bin(8),\n+\t: _M_align(8), _M_max_bytes(128), _M_min_bin(8),\n \t  _M_chunk_size(4096 - 4 * sizeof(void*)), \n \t  _M_max_threads(4096), _M_freelist_headroom(10), \n \t  _M_force_new(getenv(\"GLIBCXX_FORCE_NEW\") ? true : false)\n \t{ }\n \n \texplicit\n-\t_Tune(size_t __maxb, size_t __minbin, size_t __chunk,\n-\t      size_t __maxthreads, size_t __headroom, bool __force) \n-\t: _M_max_bytes(__maxb), _M_min_bin(__minbin), _M_chunk_size(__chunk), \n-\t  _M_max_threads(__maxthreads), _M_freelist_headroom(__headroom), \n-\t  _M_force_new(__force)\n+\t_Tune(size_t __align, size_t __maxb, size_t __minbin,\n+\t      size_t __chunk, size_t __maxthreads, size_t __headroom,\n+\t      bool __force) \n+\t: _M_align(__align), _M_max_bytes(__maxb), _M_min_bin(__minbin),\n+\t  _M_chunk_size(__chunk), _M_max_threads(__maxthreads),\n+\t  _M_freelist_headroom(__headroom), _M_force_new(__force)\n \t{ }\n       };\n \n@@ -306,8 +313,10 @@ namespace __gnu_cxx\n       _Block_record* __block = NULL;\n       if (__bin._M_first[__thread_id] == NULL)\n \t{\n+\t  // NB: For alignment reasons, we can't use the first _M_align\n+\t  // bytes, even when sizeof(_Block_record) < _M_align.\n \t  const size_t __bin_size = ((_S_options._M_min_bin << __which)\n-\t\t\t\t     + sizeof(_Block_record));\n+\t\t\t\t     + _S_options._M_align);\n \t  size_t __block_count = _S_options._M_chunk_size / __bin_size;\t  \n \n \t  // Are we using threads?\n@@ -399,7 +408,7 @@ namespace __gnu_cxx\n \t}\n #endif\n \n-      char* __c = reinterpret_cast<char*>(__block) + sizeof(_Block_record);\n+      char* __c = reinterpret_cast<char*>(__block) + _S_options._M_align;\n       return static_cast<_Tp*>(static_cast<void*>(__c));\n     }\n   \n@@ -421,7 +430,7 @@ namespace __gnu_cxx\n       const size_t __which = _S_binmap[__bytes];\n       const _Bin_record& __bin = _S_bin[__which];\n \n-      char* __c = reinterpret_cast<char*>(__p) - sizeof(_Block_record);\n+      char* __c = reinterpret_cast<char*>(__p) - _S_options._M_align;\n       _Block_record* __block = reinterpret_cast<_Block_record*>(__c);\n       \n #ifdef __GTHREADS"}]}