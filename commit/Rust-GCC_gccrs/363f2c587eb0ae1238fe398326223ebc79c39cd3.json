{"sha": "363f2c587eb0ae1238fe398326223ebc79c39cd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYzZjJjNTg3ZWIwYWUxMjM4ZmUzOTgzMjYyMjNlYmM3OWMzOWNkMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-26T11:32:36Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-26T11:32:36Z"}, "message": "[multiple changes]\n\n2015-10-26  Yannick Moy  <moy@adacore.com>\n\n\t* lib-xref-spark_specific.adb (Traverse_Protected_Declaration): New\n\tprocedure for traversal.\n\t(Add_SPARK_Xrefs): Remove debugging code.\n\t(Traverse_Declaration_Or_Statement): Call the new traversal\n\tprocedure.\n\n2015-10-26  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma): Pragma\n\tExtensions_Visible can now appear on an abstract subprogram\n\tdeclaration.\n\nFrom-SVN: r229338", "tree": {"sha": "696cc369b97a574c58bc50e624a588f1b2761fb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/696cc369b97a574c58bc50e624a588f1b2761fb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/363f2c587eb0ae1238fe398326223ebc79c39cd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/363f2c587eb0ae1238fe398326223ebc79c39cd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/363f2c587eb0ae1238fe398326223ebc79c39cd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/363f2c587eb0ae1238fe398326223ebc79c39cd3/comments", "author": null, "committer": null, "parents": [{"sha": "24fd21c393d671989c45f53fcfb0f489d9ca768e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24fd21c393d671989c45f53fcfb0f489d9ca768e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24fd21c393d671989c45f53fcfb0f489d9ca768e"}], "stats": {"total": 80, "additions": 42, "deletions": 38}, "files": [{"sha": "61abaee34f953e910be0650c9308f2f326fe360e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/363f2c587eb0ae1238fe398326223ebc79c39cd3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/363f2c587eb0ae1238fe398326223ebc79c39cd3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=363f2c587eb0ae1238fe398326223ebc79c39cd3", "patch": "@@ -1,3 +1,17 @@\n+2015-10-26  Yannick Moy  <moy@adacore.com>\n+\n+\t* lib-xref-spark_specific.adb (Traverse_Protected_Declaration): New\n+\tprocedure for traversal.\n+\t(Add_SPARK_Xrefs): Remove debugging code.\n+\t(Traverse_Declaration_Or_Statement): Call the new traversal\n+\tprocedure.\n+\n+2015-10-26  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Pragma\n+\tExtensions_Visible can now appear on an abstract subprogram\n+\tdeclaration.\n+\n 2015-10-26  Yannick Moy  <moy@adacore.com>\n \n \t* lib-xref-spark_specific.adb (Add_SPARK_Xrefs): Use character 'r' to"}, {"sha": "631c87b1d81d96240df7d3aeb948a1405345789f", "filename": "gcc/ada/lib-xref-spark_specific.adb", "status": "modified", "additions": 22, "deletions": 37, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/363f2c587eb0ae1238fe398326223ebc79c39cd3/gcc%2Fada%2Flib-xref-spark_specific.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/363f2c587eb0ae1238fe398326223ebc79c39cd3/gcc%2Fada%2Flib-xref-spark_specific.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-spark_specific.adb?ref=363f2c587eb0ae1238fe398326223ebc79c39cd3", "patch": "@@ -124,10 +124,6 @@ package body SPARK_Specific is\n      (N            : Node_Id;\n       Process      : Node_Processing;\n       Inside_Stubs : Boolean);\n-   procedure Traverse_Package_Declaration\n-     (N            : Node_Id;\n-      Process      : Node_Processing;\n-      Inside_Stubs : Boolean);\n    procedure Traverse_Subprogram_Body\n      (N            : Node_Id;\n       Process      : Node_Processing;\n@@ -483,12 +479,7 @@ package body SPARK_Specific is\n          begin\n             for Index in SPARK_Scope_Table.First .. S - 1 loop\n                if SPARK_Scope_Table.Table (Index).Scope_Entity = E then\n-                  declare\n-                     Dummy : constant SPARK_Scope_Record :=\n-                               SPARK_Scope_Table.Table (Index);\n-                  begin\n-                     return True;\n-                  end;\n+                  return True;\n                end if;\n             end loop;\n \n@@ -523,13 +514,13 @@ package body SPARK_Specific is\n       is\n       begin\n          --  The only references of interest on callable entities are calls. On\n-         --  non-callable entities, the only references of interest are reads\n-         --  and writes.\n+         --  uncallable entities, the only references of interest are reads and\n+         --  writes.\n \n          if Ekind (E) in Overloadable_Kind then\n             return Typ = 's';\n \n-         --  Objects of Task type or protected type are not SPARK references\n+         --  Objects of task or protected types are not SPARK references\n \n          elsif Present (Etype (E))\n            and then Ekind (Etype (E)) in Concurrent_Kind\n@@ -1254,7 +1245,14 @@ package body SPARK_Specific is\n    begin\n       case Nkind (N) is\n          when N_Package_Declaration =>\n-            Traverse_Package_Declaration (N, Process, Inside_Stubs);\n+            declare\n+               Spec : constant Node_Id := Specification (N);\n+            begin\n+               Traverse_Declarations_Or_Statements\n+                 (Visible_Declarations (Spec), Process, Inside_Stubs);\n+               Traverse_Declarations_Or_Statements\n+                 (Private_Declarations (Spec), Process, Inside_Stubs);\n+            end;\n \n          when N_Package_Body =>\n             if Ekind (Defining_Entity (N)) /= E_Generic_Package then\n@@ -1297,12 +1295,6 @@ package body SPARK_Specific is\n                end;\n             end if;\n \n-         when N_Protected_Definition =>\n-            Traverse_Declarations_Or_Statements\n-              (Visible_Declarations (N), Process, Inside_Stubs);\n-            Traverse_Declarations_Or_Statements\n-              (Private_Declarations (N), Process, Inside_Stubs);\n-\n          when N_Protected_Body =>\n             Traverse_Protected_Body (N, Process, Inside_Stubs);\n \n@@ -1318,6 +1310,16 @@ package body SPARK_Specific is\n                end;\n             end if;\n \n+         when N_Protected_Type_Declaration | N_Single_Protected_Declaration =>\n+            declare\n+               Def : constant Node_Id := Protected_Definition (N);\n+            begin\n+               Traverse_Declarations_Or_Statements\n+                 (Visible_Declarations (Def), Process, Inside_Stubs);\n+               Traverse_Declarations_Or_Statements\n+                 (Private_Declarations (Def), Process, Inside_Stubs);\n+            end;\n+\n          when N_Task_Definition =>\n             Traverse_Declarations_Or_Statements\n               (Visible_Declarations (N), Process, Inside_Stubs);\n@@ -1481,23 +1483,6 @@ package body SPARK_Specific is\n         (Handled_Statement_Sequence (N), Process, Inside_Stubs);\n    end Traverse_Package_Body;\n \n-   ----------------------------------\n-   -- Traverse_Package_Declaration --\n-   ----------------------------------\n-\n-   procedure Traverse_Package_Declaration\n-     (N            : Node_Id;\n-      Process      : Node_Processing;\n-      Inside_Stubs : Boolean)\n-   is\n-      Spec : constant Node_Id := Specification (N);\n-   begin\n-      Traverse_Declarations_Or_Statements\n-        (Visible_Declarations (Spec), Process, Inside_Stubs);\n-      Traverse_Declarations_Or_Statements\n-        (Private_Declarations (Spec), Process, Inside_Stubs);\n-   end Traverse_Package_Declaration;\n-\n    -----------------------------\n    -- Traverse_Protected_Body --\n    -----------------------------"}, {"sha": "779e91e0d16c85fdd0cf7475f0d9f39e16f5ac8e", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/363f2c587eb0ae1238fe398326223ebc79c39cd3/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/363f2c587eb0ae1238fe398326223ebc79c39cd3/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=363f2c587eb0ae1238fe398326223ebc79c39cd3", "patch": "@@ -14058,9 +14058,14 @@ package body Sem_Prag is\n             Subp_Decl :=\n               Find_Related_Declaration_Or_Body (N, Do_Checks => True);\n \n+            --  Abstract subprogram declaration\n+\n+            if Nkind (Subp_Decl) = N_Abstract_Subprogram_Declaration then\n+               null;\n+\n             --  Generic subprogram declaration\n \n-            if Nkind (Subp_Decl) = N_Generic_Subprogram_Declaration then\n+            elsif Nkind (Subp_Decl) = N_Generic_Subprogram_Declaration then\n                null;\n \n             --  Body acts as spec"}]}