{"sha": "fdf8d5bc5b52bd733037dbeeff442c59f8aa765b", "node_id": "C_kwDOANBUbNoAKGZkZjhkNWJjNWI1MmJkNzMzMDM3ZGJlZWZmNDQyYzU5ZjhhYTc2NWI", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-09-30T21:29:18Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-09-30T21:29:18Z"}, "message": "c++: argument order in a variadic type trait intrinsic\n\nWhen parsing a variadic type trait intrinsic, we build up the list of\ntrailing arguments in reverse, but we neglect to reverse the list to\nthe true order afterwards.  This causes us to confuse the meaning of\ne.g. __is_xible(x, y, z) vs __is_xible(x, z, y).\n\nNote that this bug doesn't affect the library traits because they pass a\npack expansion as the single trailing argument to __is_xible, which gets\nexpanded in the correct order by tsubst_tree_list.\n\ngcc/cp/ChangeLog:\n\n\t* parser.c (cp_parser_trait_expr): Call nreverse on the reversed\n\tlist of trailing arguments.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/ext/is_constructible6.C: New test.", "tree": {"sha": "26dff04852cb7edbd68a32f66f496807a003146a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26dff04852cb7edbd68a32f66f496807a003146a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdf8d5bc5b52bd733037dbeeff442c59f8aa765b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdf8d5bc5b52bd733037dbeeff442c59f8aa765b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdf8d5bc5b52bd733037dbeeff442c59f8aa765b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdf8d5bc5b52bd733037dbeeff442c59f8aa765b/comments", "author": null, "committer": null, "parents": [{"sha": "b6bca2e631b54f992c058ca8e445b45e9816690b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6bca2e631b54f992c058ca8e445b45e9816690b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6bca2e631b54f992c058ca8e445b45e9816690b"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "04f5a24cc03c6a492afc747f9f77ef5a705f944a", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf8d5bc5b52bd733037dbeeff442c59f8aa765b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf8d5bc5b52bd733037dbeeff442c59f8aa765b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=fdf8d5bc5b52bd733037dbeeff442c59f8aa765b", "patch": "@@ -10832,6 +10832,7 @@ cp_parser_trait_expr (cp_parser* parser, enum rid keyword)\n \t    return error_mark_node;\n \t  type2 = tree_cons (NULL_TREE, elt, type2);\n \t}\n+      type2 = nreverse (type2);\n     }\n \n   location_t finish_loc = cp_lexer_peek_token (parser->lexer)->location;"}, {"sha": "7fce153fa759e63c9bf1b6b6f1fcbc2ee01dbd76", "filename": "gcc/testsuite/g++.dg/ext/is_constructible6.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf8d5bc5b52bd733037dbeeff442c59f8aa765b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_constructible6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf8d5bc5b52bd733037dbeeff442c59f8aa765b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_constructible6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_constructible6.C?ref=fdf8d5bc5b52bd733037dbeeff442c59f8aa765b", "patch": "@@ -0,0 +1,10 @@\n+// Verify we respect the order of trailing arguments passed to\n+// __is_constructible.\n+\n+struct A { };\n+struct B { };\n+struct C { C(A, B); };\n+\n+extern int n[true];\n+extern int n[ __is_constructible(C, A, B)];\n+extern int n[!__is_constructible(C, B, A)];"}]}