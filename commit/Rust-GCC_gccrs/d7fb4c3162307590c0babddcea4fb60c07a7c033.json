{"sha": "d7fb4c3162307590c0babddcea4fb60c07a7c033", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdmYjRjMzE2MjMwNzU5MGMwYmFiZGRjZWE0ZmI2MGMwN2E3YzAzMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-09-10T18:57:09Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-09-10T18:57:09Z"}, "message": "Remove call_really_used_regs\n\nAfter previous patches, it's now possible for call_used_regs to be\nthe \"real\" set of call-clobbered registers, without any special\nhandling for fixed registers.  This patch therefore removes the\nseparate call_really_used_regs and updates the targets that define\nCALL_REALLY_USED_REGISTERS so that they handle call_used_regs in\nthe same way that they used to handle call_really_used_regs.\n\nWith this change, it's no longer necessary for targets that define\nCALL_REALLY_USED_REGISTERS to define CALL_USED_REGISTER as well.\n\n2019-09-10  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* doc/tm.texi.in: Document that exactly one of CALL_USED_REGISTERS\n\tand CALL_REALLY_USED_REGISTERS must be defined, and that\n\tCALL_REALLY_USED_REGISTERS is preferred.\n\t* doc/tm.texi: Regenerate.\n\t* hard-reg-set.h (target_hard_regs::x_call_really_used_regs): Delete.\n\t(call_really_used_regs): Likewise.\n\t* reginfo.c: Raise an #error if both CALL_USED_REGISTERS and\n\tCALL_REALLY_USED_REGISTERS are defined.\n\t(initial_call_used_regs): Use CALL_REALLY_USED_REGISTERS as the\n\tinitial value if defined.\n\t(initial_call_really_used_regs): Delete.\n\t(saved_call_really_used_regs): Likewise.\n\t(CALL_REALLY_USED_REGNO_P): Likewise.\n\t(init_reg_sets): Remove handling of call_really_used_regs.\n\t(save_register_info, restore_register_info, globalize_reg): Likewise.\n\t(init_reg_sets_1): Likewise.  Use call_used_regs instead of\n\tCALL_REALLY_USED_REGNO_P.  Don't set call_used_regs for registers\n\toutside operand_reg_set.\n\t(fix_register): Don't change call_used_regs if\n\tCALL_REALLY_USED_REGISTERS is defined.\n\t* config/csky/csky.h (CALL_USED_REGISTERS): Delete.\n\t* config/csky/csky.c (get_csky_live_regs): Use call_used_regs\n\tinstead of call_really_used_regs.\n\t(csky_conditional_register_usage): Remove the old handling of\n\tcall_used_regs and change the handling of call_really_used_regs\n\tto use call_used_regs instead.\n\t* config/ia64/ia64.h (CALL_USED_REGISTERS): Delete.\n\t* config/ia64/ia64.c (fix_range): Don't set call_used_regs when\n\tmaking a register fixed.\n\t* config/m32r/m32r.h (CALL_USED_REGISTERS): Delete.\n\t* config/m32r/m32r.c (MUST_SAVE_REGISTER): Use call_used_regs\n\tinstead of call_really_used_regs.\n\t(m32r_conditional_register_usage): Don't set call_used_regs when\n\tmaking a register fixed.\n\t* config/mips/mips.h (CALL_USED_REGISTERS): Delete.\n\t* config/mips/mips.c (mips_global_pointer): Use call_used_regs\n\tinstead of call_really_used_regs.\n\t(mips_interrupt_extra_call_saved_reg_p): Likewise.\n\t(mips_cfun_call_saved_reg_p): Likewise.\n\t(mips_swap_registers): Remove the old handling of call_used_regs\n\tand change the handling of call_really_used_regs to use call_used_regs\n\tinstead.\n\t(mips_conditional_register_usage): Likewise.\n\t* config/mn10300/mn10300.h (CALL_USED_REGISTERS): Delete.\n\t* config/mn10300/mn10300.c (fp_regs_to_save): Use call_used_regs\n\tinstead of call_really_used_regs.\n\t(mn10300_get_live_callee_saved_regs): Likewise.\n\t(mn10300_expand_prologue, mn10300_expand_epilogue): Likewise.\n\t(mn10300_conditional_register_usage): Don't set call_used_regs when\n\tmaking a register fixed.\n\t* config/rs6000/rs6000.h (CALL_USED_REGISTERS): Delete.\n\t* config/rs6000/rs6000.c (rs6000_conditional_register_usage):\n\tRemove the old handling of call_used_regs and change the handling\n\tof call_really_used_regs to use call_used_regs instead.\n\t* config/s390/s390.h (CALL_USED_REGISTERS): Delete.\n\t* config/s390/s390.c (s390_regs_ever_clobbered): Use call_used_regs\n\tinstead of call_really_used_regs.\n\t(s390_register_info_gprtofpr, s390_register_info): Likewise.\n\t(s390_hard_regno_rename_ok, s390_hard_regno_scratch_ok): Likewise.\n\t(s390_emit_prologue, s300_set_up_by_prologue): Likewise.\n\t(s390_can_use_return_insn, s390_optimize_prologue): Likewise.\n\t(s390_conditional_register_usage): Remove the old handling of\n\tcall_used_regs and change the handling of call_really_used_regs\n\tto use call_used_regs instead.\n\t* config/sh/sh.h (CALL_USED_REGISTERS): Delete.\n\t* config/sh/sh.c (output_stack_adjust, calc_live_regs): Likewise.\n\t(sh_fix_range, reg_unused_after): Likewise.\n\t(sh_conditional_register_usage): Remove the old handling of\n\tcall_used_regs and change the handling of call_really_used_regs\n\tto use call_used_regs instead.\n\t* config/sparc/sparc.h (CALL_USED_REGISTERS): Delete.\n\t* config/sparc/sparc.c (sparc_conditional_register_usage): Don't set\n\tcall_used_regs when making a register fixed.\n\t* config/tilegx/tilegx.h (CALL_USED_REGISTERS): Delete.\n\t* config/tilegx/tilegx.c (tilegx_conditional_register_usage): Don't set\n\tcall_used_regs when making a register fixed.\n\t* config/tilepro/tilepro.h (CALL_USED_REGISTERS): Delete.\n\t* config/tilepro/tilepro.c (tilepro_conditional_register_usage): Don't\n\tset call_used_regs when making a register fixed.\n\t* config/visium/visium.h (CALL_USED_REGISTERS): Delete.\n\t* config/visium/visium.c (visium_conditional_register_usage): Remove\n\tthe old handling of call_used_regs and change the handling of\n\tcall_really_used_regs to use call_used_regs instead.\n\nFrom-SVN: r275605", "tree": {"sha": "b7a8cc40362f33043a160a1591ff79c0941f447a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7a8cc40362f33043a160a1591ff79c0941f447a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7fb4c3162307590c0babddcea4fb60c07a7c033", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7fb4c3162307590c0babddcea4fb60c07a7c033", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7fb4c3162307590c0babddcea4fb60c07a7c033", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7fb4c3162307590c0babddcea4fb60c07a7c033/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "53bee79caba4fb88acbcd9bad7891ea45b5511e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53bee79caba4fb88acbcd9bad7891ea45b5511e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53bee79caba4fb88acbcd9bad7891ea45b5511e3"}], "stats": {"total": 652, "additions": 214, "deletions": 438}, "files": [{"sha": "a0badf5ac9669b3fec2af9b7d6ea44ccf73f1c17", "filename": "gcc/ChangeLog", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -1,3 +1,89 @@\n+2019-09-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* doc/tm.texi.in: Document that exactly one of CALL_USED_REGISTERS\n+\tand CALL_REALLY_USED_REGISTERS must be defined, and that\n+\tCALL_REALLY_USED_REGISTERS is preferred.\n+\t* doc/tm.texi: Regenerate.\n+\t* hard-reg-set.h (target_hard_regs::x_call_really_used_regs): Delete.\n+\t(call_really_used_regs): Likewise.\n+\t* reginfo.c: Raise an #error if both CALL_USED_REGISTERS and\n+\tCALL_REALLY_USED_REGISTERS are defined.\n+\t(initial_call_used_regs): Use CALL_REALLY_USED_REGISTERS as the\n+\tinitial value if defined.\n+\t(initial_call_really_used_regs): Delete.\n+\t(saved_call_really_used_regs): Likewise.\n+\t(CALL_REALLY_USED_REGNO_P): Likewise.\n+\t(init_reg_sets): Remove handling of call_really_used_regs.\n+\t(save_register_info, restore_register_info, globalize_reg): Likewise.\n+\t(init_reg_sets_1): Likewise.  Use call_used_regs instead of\n+\tCALL_REALLY_USED_REGNO_P.  Don't set call_used_regs for registers\n+\toutside operand_reg_set.\n+\t(fix_register): Don't change call_used_regs if\n+\tCALL_REALLY_USED_REGISTERS is defined.\n+\t* config/csky/csky.h (CALL_USED_REGISTERS): Delete.\n+\t* config/csky/csky.c (get_csky_live_regs): Use call_used_regs\n+\tinstead of call_really_used_regs.\n+\t(csky_conditional_register_usage): Remove the old handling of\n+\tcall_used_regs and change the handling of call_really_used_regs\n+\tto use call_used_regs instead.\n+\t* config/ia64/ia64.h (CALL_USED_REGISTERS): Delete.\n+\t* config/ia64/ia64.c (fix_range): Don't set call_used_regs when\n+\tmaking a register fixed.\n+\t* config/m32r/m32r.h (CALL_USED_REGISTERS): Delete.\n+\t* config/m32r/m32r.c (MUST_SAVE_REGISTER): Use call_used_regs\n+\tinstead of call_really_used_regs.\n+\t(m32r_conditional_register_usage): Don't set call_used_regs when\n+\tmaking a register fixed.\n+\t* config/mips/mips.h (CALL_USED_REGISTERS): Delete.\n+\t* config/mips/mips.c (mips_global_pointer): Use call_used_regs\n+\tinstead of call_really_used_regs.\n+\t(mips_interrupt_extra_call_saved_reg_p): Likewise.\n+\t(mips_cfun_call_saved_reg_p): Likewise.\n+\t(mips_swap_registers): Remove the old handling of call_used_regs\n+\tand change the handling of call_really_used_regs to use call_used_regs\n+\tinstead.\n+\t(mips_conditional_register_usage): Likewise.\n+\t* config/mn10300/mn10300.h (CALL_USED_REGISTERS): Delete.\n+\t* config/mn10300/mn10300.c (fp_regs_to_save): Use call_used_regs\n+\tinstead of call_really_used_regs.\n+\t(mn10300_get_live_callee_saved_regs): Likewise.\n+\t(mn10300_expand_prologue, mn10300_expand_epilogue): Likewise.\n+\t(mn10300_conditional_register_usage): Don't set call_used_regs when\n+\tmaking a register fixed.\n+\t* config/rs6000/rs6000.h (CALL_USED_REGISTERS): Delete.\n+\t* config/rs6000/rs6000.c (rs6000_conditional_register_usage):\n+\tRemove the old handling of call_used_regs and change the handling\n+\tof call_really_used_regs to use call_used_regs instead.\n+\t* config/s390/s390.h (CALL_USED_REGISTERS): Delete.\n+\t* config/s390/s390.c (s390_regs_ever_clobbered): Use call_used_regs\n+\tinstead of call_really_used_regs.\n+\t(s390_register_info_gprtofpr, s390_register_info): Likewise.\n+\t(s390_hard_regno_rename_ok, s390_hard_regno_scratch_ok): Likewise.\n+\t(s390_emit_prologue, s300_set_up_by_prologue): Likewise.\n+\t(s390_can_use_return_insn, s390_optimize_prologue): Likewise.\n+\t(s390_conditional_register_usage): Remove the old handling of\n+\tcall_used_regs and change the handling of call_really_used_regs\n+\tto use call_used_regs instead.\n+\t* config/sh/sh.h (CALL_USED_REGISTERS): Delete.\n+\t* config/sh/sh.c (output_stack_adjust, calc_live_regs): Likewise.\n+\t(sh_fix_range, reg_unused_after): Likewise.\n+\t(sh_conditional_register_usage): Remove the old handling of\n+\tcall_used_regs and change the handling of call_really_used_regs\n+\tto use call_used_regs instead.\n+\t* config/sparc/sparc.h (CALL_USED_REGISTERS): Delete.\n+\t* config/sparc/sparc.c (sparc_conditional_register_usage): Don't set\n+\tcall_used_regs when making a register fixed.\n+\t* config/tilegx/tilegx.h (CALL_USED_REGISTERS): Delete.\n+\t* config/tilegx/tilegx.c (tilegx_conditional_register_usage): Don't set\n+\tcall_used_regs when making a register fixed.\n+\t* config/tilepro/tilepro.h (CALL_USED_REGISTERS): Delete.\n+\t* config/tilepro/tilepro.c (tilepro_conditional_register_usage): Don't\n+\tset call_used_regs when making a register fixed.\n+\t* config/visium/visium.h (CALL_USED_REGISTERS): Delete.\n+\t* config/visium/visium.c (visium_conditional_register_usage): Remove\n+\tthe old handling of call_used_regs and change the handling of\n+\tcall_really_used_regs to use call_used_regs instead.\n+\n 2019-09-10  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* hard-reg-set.h (call_used_regs): Only define if IN_TARGET_CODE."}, {"sha": "0759ddc00e675a6f6d5319e05c4d49ff2ebc4129", "filename": "gcc/config/csky/csky.c", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fcsky%2Fcsky.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fcsky%2Fcsky.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky.c?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -1655,7 +1655,7 @@ get_csky_live_regs (int *count)\n \tbreak;\n \n       /* Caller-saved registers marked as used.  */\n-      if (df_regs_ever_live_p (reg) && !call_really_used_regs[reg])\n+      if (df_regs_ever_live_p (reg) && !call_used_regs[reg])\n \tsave = true;\n \n       /* Frame pointer marked used.  */\n@@ -2074,7 +2074,6 @@ csky_conditional_register_usage (void)\n \t{\n \t  fixed_regs[i] = 1;\n \t  call_used_regs[i] = 1;\n-\t  call_really_used_regs[i] = 1;\n \t}\n     }\n   /* For some targets, the high registers are not supported.\n@@ -2090,7 +2089,6 @@ csky_conditional_register_usage (void)\n \t{\n \t  fixed_regs[i] = 1;\n \t  call_used_regs[i] = 1;\n-\t  call_really_used_regs[i] = 1;\n \t}\n    }\n \n@@ -2103,20 +2101,17 @@ csky_conditional_register_usage (void)\n   if (CSKY_TARGET_ARCH (CK801) || CSKY_TARGET_ARCH (CK802))\n     {\n       fixed_regs[CSKY_LR_REGNUM] = 1;\n-      call_used_regs[CSKY_LR_REGNUM] = 1;\n-      call_really_used_regs[CSKY_LR_REGNUM] = 0;\n+      call_used_regs[CSKY_LR_REGNUM] = 0;\n     }\n \n   /* The hi/lo registers are only supported in dsp mode.  */\n   if (!TARGET_DSP)\n     {\n       fixed_regs[CSKY_HI_REGNUM] = 1;\n       call_used_regs[CSKY_HI_REGNUM] = 1;\n-      call_really_used_regs[CSKY_HI_REGNUM] = 1;\n \n       fixed_regs[CSKY_LO_REGNUM] = 1;\n       call_used_regs[CSKY_LO_REGNUM] = 1;\n-      call_really_used_regs[CSKY_LO_REGNUM] = 1;\n     }\n \n   /* The V_REGS are only supported in hard float mode.  */\n@@ -2129,18 +2124,16 @@ csky_conditional_register_usage (void)\n \t{\n \t  fixed_regs[regno] = 1;\n \t  call_used_regs[regno] = 1;\n-\t  call_really_used_regs[regno] = 1;\n \t}\n     }\n \n   /* In pic mode, the gb register is not available for register\n      allocation.  Since gb is not clobbered by function\n-     calls, set its call_really_used_regs to 0.  */\n+     calls, set its call_used_regs to 0.  */\n   if (flag_pic)\n     {\n       fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n-      call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n-      call_really_used_regs[PIC_OFFSET_TABLE_REGNUM] = 0;\n+      call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 0;\n     }\n }\n "}, {"sha": "bc4178bb79ec52643c9e6999ab42bb57f7af3af3", "filename": "gcc/config/csky/csky.h", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fcsky%2Fcsky.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fcsky%2Fcsky.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky.h?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -428,34 +428,6 @@ extern int csky_arch_isa_features[];\n      1\t\t\t\t\t\t\t\t\t\\\n }\n \n-/* 1 for registers that is clobbered (in general) by function calls.\n-   If a register has 0, the compiler automatically saves it on\n-   function entry and restores it on function exit, if the register\n-   is used within the function.  */\n-#define CALL_USED_REGISTERS \\\n- /*  r0\t   r1\t r2    r3    r4\t   r5\t r6    r7  */\t\t\t\\\n-{    1,\t   1,\t 1,    1,    0,\t   0,\t 0,    0,\t\t\t\\\n- /*  r8\t   r9\t r10   r11   r12   r13\t r14   r15 */\t\t\t\\\n-     0,\t   0,\t 0,    0,    1,\t   1,\t 1,    0,\t\t\t\\\n- /*  r16   r17\t r18   r19   r20   r21\t r22   r23 */\t\t\t\\\n-     0,\t   0,\t 1,    1,    1,\t   1,\t 1,    1,\t\t\t\\\n- /*  r24   r25\t r26   r27   r28   r29\t r30   r31 */\t\t\t\\\n-     1,\t   1,\t 1,    1,    1,\t   1,\t 1,    1,\t\t\t\\\n- /*  reserved\t c     hi    lo */\t\t\t\t\t\\\n-     1,\t\t 1,    1,    1,\t\t\t\t\t\t\\\n- /*  reserved */\t\t\t\t\t\t\t\\\n-     1,\t   1,\t 1,    1,    1,\t   1,\t 1,    1,\t\t\t\\\n-     1,\t   1,\t 1,    1,    1,\t   1,\t 1,    1,\t\t\t\\\n- /*  vr0   vr1\t vr2   vr3   vr4   vr5\t vr6   vr7 */\t\t\t\\\n-     1,\t   1,\t 1,    1,    1,\t   1,\t 1,    1,\t\t\t\\\n- /*  vr8   vr9\t vr10  vr11  vr12  vr13\t vr14  vr15 */\t\t\t\\\n-     1,\t   1,\t 1,    1,    1,\t   1,\t 1,    1,\t\t\t\\\n- /*  reserved */\t\t\t\t\t\t\t\\\n-     1,\t   1,\t\t\t\t\t\t\t\t\\\n- /*  epc */\t\t\t\t\t\t\t\t\\\n-     1\t\t\t\t\t\t\t\t\t\\\n-}\n-\n /* Like `CALL_USED_REGISTERS' but used to overcome a historical\n    problem which makes CALL_USED_REGISTERS *always* include\n    all the FIXED_REGISTERS.  Until this problem has been"}, {"sha": "7697e907aea6ed8ed29610760b63848710c38312", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -6054,7 +6054,7 @@ fix_range (const char *const_str)\n \t}\n \n       for (i = first; i <= last; ++i)\n-\tfixed_regs[i] = call_used_regs[i] = 1;\n+\tfixed_regs[i] = 1;\n \n       if (!comma)\n \tbreak;"}, {"sha": "d9d78fd3635361f3d9e03b81581bdd652f881cf4", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -371,41 +371,6 @@ while (0)\n      1,  1,   1,  1, 1, 1\t\t\t\t\\\n  }\n \n-/* Like `FIXED_REGISTERS' but has 1 for each register that is clobbered\n-   (in general) by function calls as well as for fixed registers.  This\n-   macro therefore identifies the registers that are not available for\n-   general allocation of values that must live across function calls.  */\n-\n-#define CALL_USED_REGISTERS \\\n-{ /* General registers.  */\t\t\t\t\\\n-  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,\t\\\n-  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\\\n-  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n-  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n-  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n-  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n-  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n-  0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,\t\\\n-  /* Floating-point registers.  */\t\t\t\\\n-  1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\\\n-  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n-  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\\\n-  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\\\n-  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\\\n-  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\\\n-  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\\\n-  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\\\n-  /* Predicate registers.  */\t\t\t\t\\\n-  1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\\\n-  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n-  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n-  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n-  /* Branch registers.  */\t\t\t\t\\\n-  1, 0, 0, 0, 0, 0, 1, 1,\t\t\t\t\\\n-  /*FP CCV UNAT PFS LC EC */\t\t\t\t\\\n-     1,  1,   1,  1, 1, 1\t\t\t\t\\\n-}\n-\n /* Like `CALL_USED_REGISTERS' but used to overcome a historical\n    problem which makes CALL_USED_REGISTERS *always* include\n    all the FIXED_REGISTERS.  Until this problem has been"}, {"sha": "c3bb17ba0fc8d6411de9e0a8f0cb1e2d6f62491b", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -1526,7 +1526,7 @@ static struct m32r_frame_info zero_frame_info;\n    Don't consider them here.  */\n #define MUST_SAVE_REGISTER(regno, interrupt_p) \\\n   ((regno) != RETURN_ADDR_REGNUM && (regno) != FRAME_POINTER_REGNUM \\\n-   && (df_regs_ever_live_p (regno) && (!call_really_used_regs[regno] || interrupt_p)))\n+   && (df_regs_ever_live_p (regno) && (!call_used_regs[regno] || interrupt_p)))\n \n #define MUST_SAVE_FRAME_POINTER (df_regs_ever_live_p (FRAME_POINTER_REGNUM))\n #define MUST_SAVE_RETURN_ADDR   (df_regs_ever_live_p (RETURN_ADDR_REGNUM) || crtl->profile)\n@@ -2927,10 +2927,7 @@ static void\n m32r_conditional_register_usage (void)\n {\n   if (flag_pic)\n-    {\n-      fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n-      call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n-    }\n+    fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n }\n \n /* Implement TARGET_LEGITIMATE_CONSTANT_P"}, {"sha": "73f98564b516699195a41f5a832c8a8701330138", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -348,16 +348,14 @@\n #define SUBTARGET_CALL_USED_REGISTERS\n #endif\n \n-#define CALL_USED_REGISTERS\t\\\n+#define CALL_REALLY_USED_REGISTERS \\\n {\t\t\t\t\\\n   1, 1, 1, 1, 1, 1, 1, 1,\t\\\n   0, 0, 0, 0, 0, 0, 1, 1,\t\\\n   1, 1, 1\t\t\t\\\n   SUBTARGET_CALL_USED_REGISTERS\t\\\n }\n \n-#define CALL_REALLY_USED_REGISTERS CALL_USED_REGISTERS\n-\n /* If defined, an initializer for a vector of integers, containing the\n    numbers of hard registers in the order in which GCC should\n    prefer to use them (from most preferred to least).  */"}, {"sha": "c682ebd5add32da6c98a3ac5eefad8392ac186e9", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -10636,7 +10636,7 @@ mips_global_pointer (void)\n   if (TARGET_CALL_SAVED_GP && crtl->is_leaf)\n     for (regno = GP_REG_FIRST; regno <= GP_REG_LAST; regno++)\n       if (!df_regs_ever_live_p (regno)\n-\t  && call_really_used_regs[regno]\n+\t  && call_used_regs[regno]\n \t  && !fixed_regs[regno]\n \t  && regno != PIC_FUNCTION_ADDR_REGNUM)\n \treturn regno;\n@@ -10789,7 +10789,7 @@ mips_interrupt_extra_call_saved_reg_p (unsigned int regno)\n \n       /* Otherwise, return true for registers that aren't ordinarily\n \t call-clobbered.  */\n-      return call_really_used_regs[regno];\n+      return call_used_regs[regno];\n     }\n \n   return false;\n@@ -10812,12 +10812,12 @@ mips_cfun_call_saved_reg_p (unsigned int regno)\n     return true;\n \n   /* call_insns preserve $28 unless they explicitly say otherwise,\n-     so call_really_used_regs[] treats $28 as call-saved.  However,\n+     so call_used_regs[] treats $28 as call-saved.  However,\n      we want the ABI property rather than the default call_insn\n      property here.  */\n   return (regno == GLOBAL_POINTER_REGNUM\n \t  ? TARGET_CALL_SAVED_GP\n-\t  : !call_really_used_regs[regno]);\n+\t  : !call_used_regs[regno]);\n }\n \n /* Return true if the function body might clobber register REGNO.\n@@ -20411,7 +20411,6 @@ mips_swap_registers (unsigned int i)\n \n   SWAP_INT (fixed_regs[i], fixed_regs[i + 1]);\n   SWAP_INT (call_used_regs[i], call_used_regs[i + 1]);\n-  SWAP_INT (call_really_used_regs[i], call_really_used_regs[i + 1]);\n   SWAP_STRING (reg_names[i], reg_names[i + 1]);\n \n #undef SWAP_STRING\n@@ -20447,7 +20446,7 @@ mips_conditional_register_usage (void)\n       accessible_reg_set &= ~reg_class_contents[ST_REGS];\n       if (!ISA_HAS_CCF)\n \tSET_HARD_REG_BIT (accessible_reg_set, FPSW_REGNUM);\n-      fixed_regs[FPSW_REGNUM] = call_used_regs[FPSW_REGNUM] = 1;\n+      fixed_regs[FPSW_REGNUM] = 1;\n     }\n   if (TARGET_MIPS16)\n     {\n@@ -20462,25 +20461,25 @@ mips_conditional_register_usage (void)\n \t and $25 (t9) because it is used as the function call address in\n \t SVR4 PIC code.  */\n \n-      fixed_regs[18] = call_used_regs[18] = 1;\n-      fixed_regs[19] = call_used_regs[19] = 1;\n-      fixed_regs[20] = call_used_regs[20] = 1;\n-      fixed_regs[21] = call_used_regs[21] = 1;\n-      fixed_regs[22] = call_used_regs[22] = 1;\n-      fixed_regs[23] = call_used_regs[23] = 1;\n-      fixed_regs[26] = call_used_regs[26] = 1;\n-      fixed_regs[27] = call_used_regs[27] = 1;\n-      fixed_regs[30] = call_used_regs[30] = 1;\n+      fixed_regs[18] = 1;\n+      fixed_regs[19] = 1;\n+      fixed_regs[20] = 1;\n+      fixed_regs[21] = 1;\n+      fixed_regs[22] = 1;\n+      fixed_regs[23] = 1;\n+      fixed_regs[26] = 1;\n+      fixed_regs[27] = 1;\n+      fixed_regs[30] = 1;\n       if (optimize_size)\n \t{\n-\t  fixed_regs[8] = call_used_regs[8] = 1;\n-\t  fixed_regs[9] = call_used_regs[9] = 1;\n-\t  fixed_regs[10] = call_used_regs[10] = 1;\n-\t  fixed_regs[11] = call_used_regs[11] = 1;\n-\t  fixed_regs[12] = call_used_regs[12] = 1;\n-\t  fixed_regs[13] = call_used_regs[13] = 1;\n-\t  fixed_regs[14] = call_used_regs[14] = 1;\n-\t  fixed_regs[15] = call_used_regs[15] = 1;\n+\t  fixed_regs[8] = 1;\n+\t  fixed_regs[9] = 1;\n+\t  fixed_regs[10] = 1;\n+\t  fixed_regs[11] = 1;\n+\t  fixed_regs[12] = 1;\n+\t  fixed_regs[13] = 1;\n+\t  fixed_regs[14] = 1;\n+\t  fixed_regs[15] = 1;\n \t}\n \n       /* Do not allow HI and LO to be treated as register operands.\n@@ -20493,7 +20492,7 @@ mips_conditional_register_usage (void)\n     {\n       int regno;\n       for (regno = FP_REG_FIRST + 20; regno < FP_REG_FIRST + 24; regno++)\n-\tcall_really_used_regs[regno] = call_used_regs[regno] = 1;\n+\tcall_used_regs[regno] = 1;\n     }\n   /* Odd registers in the range $f21-$f31 (inclusive) are call-clobbered\n      for n32 and o32 FP64.  */\n@@ -20503,7 +20502,7 @@ mips_conditional_register_usage (void)\n     {\n       int regno;\n       for (regno = FP_REG_FIRST + 21; regno <= FP_REG_FIRST + 31; regno+=2)\n-\tcall_really_used_regs[regno] = call_used_regs[regno] = 1;\n+\tcall_used_regs[regno] = 1;\n     }\n   /* Make sure that double-register accumulator values are correctly\n      ordered for the current endianness.  */"}, {"sha": "881c23a45405bc0b472d67123514fc4e344c25a0", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -1817,29 +1817,6 @@ FP_ASM_SPEC \"\\\n    called function in tact.  EPILOGUE_USES says that $31 is useful\n    to the called function.  */\n \n-#define CALL_USED_REGISTERS\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\t\t\\\n-  0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0,\t\t\t\\\n-  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\t\t\\\n-  1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\t\t\\\n-  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\t\t\\\n-  /* COP0 registers */\t\t\t\t\t\t\t\\\n-  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\t\t\\\n-  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\t\t\\\n-  /* COP2 registers */\t\t\t\t\t\t\t\\\n-  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\t\t\\\n-  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\t\t\\\n-  /* COP3 registers */\t\t\t\t\t\t\t\\\n-  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\t\t\\\n-  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\t\t\\\n-  /* 6 DSP accumulator registers & 6 control registers */\t\t\\\n-  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\t\t\t\t\t\\\n-}\n-\n-\n-/* Define this since $28, though fixed, is call-saved in many ABIs.  */\n-\n #define CALL_REALLY_USED_REGISTERS                                      \\\n { /* General registers.  */                                             \\\n   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,                       \\"}, {"sha": "da27c90307409d3c454ab91ca7ebdc1169373a0f", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -552,7 +552,7 @@ fp_regs_to_save (void)\n     return 0;\n \n   for (i = FIRST_FP_REGNUM; i <= LAST_FP_REGNUM; ++i)\n-    if (df_regs_ever_live_p (i) && ! call_really_used_regs[i])\n+    if (df_regs_ever_live_p (i) && ! call_used_regs[i])\n       ++n;\n \n   return n;\n@@ -640,7 +640,7 @@ mn10300_get_live_callee_saved_regs (unsigned int * bytes_saved)\n \n   count = mask = 0;\n   for (i = 0; i <= LAST_EXTENDED_REGNUM; i++)\n-    if (df_regs_ever_live_p (i) && ! call_really_used_regs[i])\n+    if (df_regs_ever_live_p (i) && ! call_used_regs[i])\n       {\n \tmask |= (1 << i);\n \t++ count;\n@@ -878,7 +878,7 @@ mn10300_expand_prologue (void)\n \t frame pointer, size is nonzero and the user hasn't\n \t changed the calling conventions of a0.  */\n       if (! frame_pointer_needed && size\n-\t  && call_really_used_regs [FIRST_ADDRESS_REGNUM]\n+\t  && call_used_regs[FIRST_ADDRESS_REGNUM]\n \t  && ! fixed_regs[FIRST_ADDRESS_REGNUM])\n \t{\n \t  /* Insn: add -(size + 4 * num_regs_to_save), sp.  */\n@@ -902,7 +902,7 @@ mn10300_expand_prologue (void)\n \n       /* Consider alternative save_a0_no_merge if the user hasn't\n \t changed the calling conventions of a0.  */\n-      if (call_really_used_regs [FIRST_ADDRESS_REGNUM]\n+      if (call_used_regs[FIRST_ADDRESS_REGNUM]\n \t  && ! fixed_regs[FIRST_ADDRESS_REGNUM])\n \t{\n \t  /* Insn: add -4 * num_regs_to_save, sp.  */\n@@ -984,7 +984,7 @@ mn10300_expand_prologue (void)\n \n       /* Now actually save the FP registers.  */\n       for (i = FIRST_FP_REGNUM; i <= LAST_FP_REGNUM; ++i)\n-\tif (df_regs_ever_live_p (i) && ! call_really_used_regs [i])\n+\tif (df_regs_ever_live_p (i) && ! call_used_regs[i])\n \t  {\n \t    rtx addr;\n \n@@ -1118,7 +1118,7 @@ mn10300_expand_epilogue (void)\n \n \t  /* Consider using a1 in post-increment mode, as long as the\n \t     user hasn't changed the calling conventions of a1.  */\n-\t  if (call_really_used_regs [FIRST_ADDRESS_REGNUM + 1]\n+\t  if (call_used_regs[FIRST_ADDRESS_REGNUM + 1]\n \t      && ! fixed_regs[FIRST_ADDRESS_REGNUM+1])\n \t    {\n \t      /* Insn: mov sp,a1.  */\n@@ -1186,7 +1186,7 @@ mn10300_expand_epilogue (void)\n \treg = gen_rtx_POST_INC (SImode, reg);\n \n       for (i = FIRST_FP_REGNUM; i <= LAST_FP_REGNUM; ++i)\n-\tif (df_regs_ever_live_p (i) && ! call_really_used_regs [i])\n+\tif (df_regs_ever_live_p (i) && ! call_used_regs[i])\n \t  {\n \t    rtx addr;\n \n@@ -2830,17 +2830,16 @@ mn10300_conditional_register_usage (void)\n     {\n       for (i = FIRST_EXTENDED_REGNUM;\n \t   i <= LAST_EXTENDED_REGNUM; i++)\n-\tfixed_regs[i] = call_used_regs[i] = 1;\n+\tfixed_regs[i] = 1;\n     }\n   if (!TARGET_AM33_2)\n     {\n       for (i = FIRST_FP_REGNUM;\n \t   i <= LAST_FP_REGNUM; i++)\n-\tfixed_regs[i] = call_used_regs[i] = 1;\n+\tfixed_regs[i] = 1;\n     }\n   if (flag_pic)\n-    fixed_regs[PIC_OFFSET_TABLE_REGNUM] =\n-    call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n+    fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n }\n \n /* Worker function for TARGET_MD_ASM_ADJUST."}, {"sha": "6946e721c9686312c5798554736e6016e3081349", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -197,7 +197,7 @@ extern enum processor_type mn10300_tune_cpu;\n    Aside from that, you can include as many other registers as you\n    like.  */\n \n-#define CALL_USED_REGISTERS \\\n+#define CALL_REALLY_USED_REGISTERS \\\n   { 1, 1, 0, 0,\t\t\t\t/* data regs */\t\t\\\n     1, 1, 0, 0,\t\t\t\t/* addr regs */\t\t\\\n     1,\t\t\t\t\t/* arg reg */\t\t\\\n@@ -211,13 +211,6 @@ extern enum processor_type mn10300_tune_cpu;\n     1\t\t\t\t\t/* cc reg */\t\t\\\n   }\n \n-/* Note: The definition of CALL_REALLY_USED_REGISTERS is not\n-   redundant.  It is needed when compiling in PIC mode because\n-   the a2 register becomes fixed (and hence must be marked as\n-   call_used) but in order to preserve the ABI it is not marked\n-   as call_really_used.  */\n-#define CALL_REALLY_USED_REGISTERS CALL_USED_REGISTERS\n-\n #define REG_ALLOC_ORDER \\\n   { 0, 1, 4, 5, 2, 3, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9 \\\n   , 42, 43, 44, 45, 46, 47, 48, 49, 34, 35, 36, 37, 38, 39, 40, 41 \\"}, {"sha": "217548cac0c3f84e74eb7483f43d219bcad9d359", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -8904,42 +8904,37 @@ rs6000_conditional_register_usage (void)\n \n   /* 64-bit AIX and Linux reserve GPR13 for thread-private data.  */\n   if (TARGET_64BIT)\n-    fixed_regs[13] = call_used_regs[13]\n-      = call_really_used_regs[13] = 1;\n+    fixed_regs[13] = call_used_regs[13] = 1;\n \n   /* Conditionally disable FPRs.  */\n   if (TARGET_SOFT_FLOAT)\n     for (i = 32; i < 64; i++)\n-      fixed_regs[i] = call_used_regs[i]\n-\t= call_really_used_regs[i] = 1;\n+      fixed_regs[i] = call_used_regs[i] = 1;\n \n   /* The TOC register is not killed across calls in a way that is\n      visible to the compiler.  */\n   if (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2)\n-    call_really_used_regs[2] = 0;\n+    call_used_regs[2] = 0;\n \n   if (DEFAULT_ABI == ABI_V4 && flag_pic == 2)\n     fixed_regs[RS6000_PIC_OFFSET_TABLE_REGNUM] = 1;\n \n   if (DEFAULT_ABI == ABI_V4 && flag_pic == 1)\n     fixed_regs[RS6000_PIC_OFFSET_TABLE_REGNUM]\n-      = call_used_regs[RS6000_PIC_OFFSET_TABLE_REGNUM]\n-      = call_really_used_regs[RS6000_PIC_OFFSET_TABLE_REGNUM] = 1;\n+      = call_used_regs[RS6000_PIC_OFFSET_TABLE_REGNUM] = 1;\n \n   if (DEFAULT_ABI == ABI_DARWIN && flag_pic)\n     fixed_regs[RS6000_PIC_OFFSET_TABLE_REGNUM]\n-      = call_used_regs[RS6000_PIC_OFFSET_TABLE_REGNUM]\n-      = call_really_used_regs[RS6000_PIC_OFFSET_TABLE_REGNUM] = 1;\n+      = call_used_regs[RS6000_PIC_OFFSET_TABLE_REGNUM] = 1;\n \n   if (TARGET_TOC && TARGET_MINIMAL_TOC)\n-    fixed_regs[RS6000_PIC_OFFSET_TABLE_REGNUM]\n-      = call_used_regs[RS6000_PIC_OFFSET_TABLE_REGNUM] = 1;\n+    fixed_regs[RS6000_PIC_OFFSET_TABLE_REGNUM] = 1;\n \n   if (!TARGET_ALTIVEC && !TARGET_VSX)\n     {\n       for (i = FIRST_ALTIVEC_REGNO; i <= LAST_ALTIVEC_REGNO; ++i)\n-\tfixed_regs[i] = call_used_regs[i] = call_really_used_regs[i] = 1;\n-      call_really_used_regs[VRSAVE_REGNO] = 1;\n+\tfixed_regs[i] = call_used_regs[i] = 1;\n+      call_used_regs[VRSAVE_REGNO] = 1;\n     }\n \n   if (TARGET_ALTIVEC || TARGET_VSX)\n@@ -8948,12 +8943,12 @@ rs6000_conditional_register_usage (void)\n   if (TARGET_ALTIVEC_ABI)\n     {\n       for (i = FIRST_ALTIVEC_REGNO; i < FIRST_ALTIVEC_REGNO + 20; ++i)\n-\tcall_used_regs[i] = call_really_used_regs[i] = 1;\n+\tcall_used_regs[i] = 1;\n \n       /* AIX reserves VR20:31 in non-extended ABI mode.  */\n       if (TARGET_XCOFF)\n \tfor (i = FIRST_ALTIVEC_REGNO + 20; i < FIRST_ALTIVEC_REGNO + 32; ++i)\n-\t  fixed_regs[i] = call_used_regs[i] = call_really_used_regs[i] = 1;\n+\t  fixed_regs[i] = call_used_regs[i] = 1;\n     }\n }\n "}, {"sha": "8f5c70e5d8e62eab8ae4eda001343dfff69f45b1", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -882,31 +882,6 @@ enum data_align { align_abi, align_opt, align_both };\n    1, 1, 1\t\t\t\t\t   \\\n }\n \n-/* 1 for registers not available across function calls.\n-   These must include the FIXED_REGISTERS and also any\n-   registers that can be used without being saved.\n-   The latter must include the registers where values are returned\n-   and the register where structure-value addresses are passed.\n-   Aside from that, you can include as many other registers as you like.  */\n-\n-#define CALL_USED_REGISTERS  \\\n-  {/* GPRs */\t\t\t\t\t   \\\n-   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, FIXED_R13, 0, 0, \\\n-   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-   /* FPRs */\t\t\t\t\t   \\\n-   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, \\\n-   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-   /* VRs */\t\t\t\t\t   \\\n-   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-   /* lr ctr ca ap */\t\t\t\t   \\\n-   1, 1, 1, 1,\t\t\t\t\t   \\\n-   /* cr0..cr7 */\t\t\t\t   \\\n-   1, 1, 0, 0, 0, 1, 1, 1,\t\t\t   \\\n-   /* vrsave vscr sfp */\t\t\t   \\\n-   1, 1, 1\t\t\t\t\t   \\\n-}\n-\n /* Like `CALL_USED_REGISTERS' except this macro doesn't require that\n    the entire set of `FIXED_REGISTERS' be included.\n    (`CALL_USED_REGISTERS' must be a superset of `FIXED_REGISTERS')."}, {"sha": "cfdfa4e141dccc2dc13f6e44521b3406e2192f29", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -9416,7 +9416,7 @@ s390_regs_ever_clobbered (char regs_ever_clobbered[])\n   if (!crtl->is_leaf)\n     {\n       for (i = 0; i < 32; i++)\n-\tregs_ever_clobbered[i] = call_really_used_regs[i];\n+\tregs_ever_clobbered[i] = call_used_regs[i];\n     }\n \n   /* Make the \"magic\" eh_return registers live if necessary.  For regs_ever_live\n@@ -9438,7 +9438,7 @@ s390_regs_ever_clobbered (char regs_ever_clobbered[])\n      reload.  */\n   if (crtl->saves_all_registers)\n     for (i = 0; i < 32; i++)\n-      if (!call_really_used_regs[i])\n+      if (!call_used_regs[i])\n \tregs_ever_clobbered[i] = 1;\n \n   FOR_EACH_BB_FN (cur_bb, cfun)\n@@ -9552,7 +9552,7 @@ s390_register_info_gprtofpr ()\n \n       /* Advance to the next FP register which can be used as a\n \t GPR save slot.  */\n-      while ((!call_really_used_regs[save_reg_slot]\n+      while ((!call_used_regs[save_reg_slot]\n \t      || df_regs_ever_live_p (save_reg_slot)\n \t      || cfun_fpr_save_p (save_reg_slot))\n \t     && FP_REGNO_P (save_reg_slot))\n@@ -9711,7 +9711,7 @@ s390_register_info ()\n   cfun_frame_layout.fpr_bitmap = 0;\n   cfun_frame_layout.high_fprs = 0;\n   for (i = FPR0_REGNUM; i <= FPR15_REGNUM; i++)\n-    if (clobbered_regs[i] && !call_really_used_regs[i])\n+    if (clobbered_regs[i] && !call_used_regs[i])\n       {\n \tcfun_set_fpr_save (i);\n \tif (i >= FPR8_REGNUM)\n@@ -10269,7 +10269,7 @@ s390_hard_regno_rename_ok (unsigned int old_reg, unsigned int new_reg)\n      df_regs_ever_live.  Since we have our own routine we have to tell\n      regrename manually about it.  */\n   if (GENERAL_REGNO_P (new_reg)\n-      && !call_really_used_regs[new_reg]\n+      && !call_used_regs[new_reg]\n       && cfun_gpr_save_slot (new_reg) == SAVE_SLOT_NONE)\n     return false;\n \n@@ -10284,7 +10284,7 @@ s390_hard_regno_scratch_ok (unsigned int regno)\n {\n   /* See s390_hard_regno_rename_ok.  */\n   if (GENERAL_REGNO_P (regno)\n-      && !call_really_used_regs[regno]\n+      && !call_used_regs[regno]\n       && cfun_gpr_save_slot (regno) == SAVE_SLOT_NONE)\n     return false;\n \n@@ -11129,10 +11129,10 @@ s390_emit_prologue (void)\n \n \t  /* If f4 and f6 are call clobbered they are saved due to\n \t     stdargs and therefore are not frame related.  */\n-\t  if (!call_really_used_regs[i])\n+\t  if (!call_used_regs[i])\n \t    RTX_FRAME_RELATED_P (insn) = 1;\n \t}\n-      else if (!TARGET_PACKED_STACK || call_really_used_regs[i])\n+      else if (!TARGET_PACKED_STACK || call_used_regs[i])\n \toffset += 8;\n     }\n \n@@ -11585,7 +11585,7 @@ static void\n s300_set_up_by_prologue (hard_reg_set_container *regs)\n {\n   if (cfun->machine->base_reg\n-      && !call_really_used_regs[REGNO (cfun->machine->base_reg)])\n+      && !call_used_regs[REGNO (cfun->machine->base_reg)])\n     SET_HARD_REG_BIT (regs->set, REGNO (cfun->machine->base_reg));\n }\n \n@@ -11786,7 +11786,7 @@ s390_can_use_return_insn (void)\n     return false;\n \n   if (cfun->machine->base_reg\n-      && !call_really_used_regs[REGNO (cfun->machine->base_reg)])\n+      && !call_used_regs[REGNO (cfun->machine->base_reg)])\n     return false;\n \n   return cfun_frame_layout.frame_size == 0;\n@@ -13543,36 +13543,31 @@ s390_conditional_register_usage (void)\n   int i;\n \n   if (flag_pic)\n-    {\n-      fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n-      call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n-    }\n+    fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n   fixed_regs[BASE_REGNUM] = 0;\n-  call_used_regs[BASE_REGNUM] = 0;\n   fixed_regs[RETURN_REGNUM] = 0;\n-  call_used_regs[RETURN_REGNUM] = 0;\n   if (TARGET_64BIT)\n     {\n       for (i = FPR8_REGNUM; i <= FPR15_REGNUM; i++)\n-\tcall_used_regs[i] = call_really_used_regs[i] = 0;\n+\tcall_used_regs[i] = 0;\n     }\n   else\n     {\n-      call_used_regs[FPR4_REGNUM] = call_really_used_regs[FPR4_REGNUM] = 0;\n-      call_used_regs[FPR6_REGNUM] = call_really_used_regs[FPR6_REGNUM] = 0;\n+      call_used_regs[FPR4_REGNUM] = 0;\n+      call_used_regs[FPR6_REGNUM] = 0;\n     }\n \n   if (TARGET_SOFT_FLOAT)\n     {\n       for (i = FPR0_REGNUM; i <= FPR15_REGNUM; i++)\n-\tcall_used_regs[i] = fixed_regs[i] = 1;\n+\tfixed_regs[i] = 1;\n     }\n \n   /* Disable v16 - v31 for non-vector target.  */\n   if (!TARGET_VX)\n     {\n       for (i = VR16_REGNUM; i <= VR31_REGNUM; i++)\n-\tfixed_regs[i] = call_used_regs[i] = call_really_used_regs[i] = 1;\n+\tfixed_regs[i] = call_used_regs[i] = 1;\n     }\n }\n \n@@ -13662,8 +13657,8 @@ s390_optimize_prologue (void)\n \t      fpr_regno = FP_REGNO_P (src_regno) ? src_regno : dest_regno;\n \n \t      /* GPR must be call-saved, FPR must be call-clobbered.  */\n-\t      if (!call_really_used_regs[fpr_regno]\n-\t\t  || call_really_used_regs[gpr_regno])\n+\t      if (!call_used_regs[fpr_regno]\n+\t\t  || call_used_regs[gpr_regno])\n \t\tcontinue;\n \n \t      /* It must not happen that what we once saved in an FPR now"}, {"sha": "2658e95f91757043699f21240409a7f29ebec948", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -453,22 +453,6 @@ extern const char *s390_host_detect_local_cpu (int argc, const char **argv);\n   0, 0, 0, 0,\t\t\t\t\t\\\n   0, 0, 0, 0 }\n \n-#define CALL_USED_REGISTERS\t\t\t\\\n-{ 1, 1, 1, 1,\t\t\t\t\t\\\n-  1, 1, 0, 0,\t\t\t\t\t\\\n-  0, 0, 0, 0,\t\t\t\t\t\\\n-  0, 1, 1, 1,\t\t\t\t\t\\\n-  1, 1, 1, 1,\t\t\t\t\t\\\n-  1, 1, 1, 1,\t\t\t\t\t\\\n-  1, 1, 1, 1,\t\t\t\t\t\\\n-  1, 1, 1, 1,\t\t\t\t\t\\\n-  1, 1, 1, 1,\t\t\t\t\t\\\n-  1, 1,\t\t\t\t\t\t\\\n-  1, 1, 1, 1,\t\t\t\t\t\\\n-  1, 1, 1, 1,\t\t\t\t\t\\\n-  1, 1, 1, 1,\t\t\t\t\t\\\n-  1, 1, 1, 1 }\n-\n #define CALL_REALLY_USED_REGISTERS\t\t\\\n { 1, 1, 1, 1,\t/* r0 - r15 */\t\t\t\\\n   1, 1, 0, 0,\t\t\t\t\t\\"}, {"sha": "e3eea1032ce2538f0667562596dae3eb5963decb", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -6703,7 +6703,7 @@ output_stack_adjust (int size, rtx reg, int epilogue_p,\n \t     to handle this case, so just die when we see it.  */\n \t  if (epilogue_p < 0\n \t      || current_function_interrupt\n-\t      || ! call_really_used_regs[temp] || fixed_regs[temp])\n+\t      || ! call_used_regs[temp] || fixed_regs[temp])\n \t    temp = -1;\n \t  if (temp < 0 && ! current_function_interrupt && epilogue_p >= 0)\n \t    {\n@@ -7009,7 +7009,7 @@ calc_live_regs (HARD_REG_SET *live_regs_mask)\n   else if (TARGET_FPU_DOUBLE && TARGET_FMOVD && TARGET_FPU_SINGLE)\n     for (int count = 0, reg = FIRST_FP_REG; reg <= LAST_FP_REG; reg += 2)\n       if (df_regs_ever_live_p (reg) && df_regs_ever_live_p (reg+1)\n-\t  && (! call_really_used_regs[reg]\n+\t  && (! call_used_regs[reg]\n \t      || interrupt_handler)\n \t  && ++count > 2)\n \t{\n@@ -7040,7 +7040,7 @@ calc_live_regs (HARD_REG_SET *live_regs_mask)\n \t  : interrupt_handler\n \t  ? (/* Need to save all the regs ever live.  */\n \t     (df_regs_ever_live_p (reg)\n-\t      || (call_really_used_regs[reg]\n+\t      || (call_used_regs[reg]\n \t\t  && (! fixed_regs[reg] || reg == MACH_REG || reg == MACL_REG\n \t\t      || reg == PIC_OFFSET_TABLE_REGNUM)\n \t\t  && has_call))\n@@ -7053,7 +7053,7 @@ calc_live_regs (HARD_REG_SET *live_regs_mask)\n \t  : (/* Only push those regs which are used and need to be saved.  */\n \t     (false)\n \t     || (df_regs_ever_live_p (reg)\n-\t\t && ((!call_really_used_regs[reg]\n+\t\t && ((!call_used_regs[reg]\n \t\t      && !(reg != PIC_OFFSET_TABLE_REGNUM\n \t\t\t   && fixed_regs[reg]\n \t\t\t   && call_used_or_fixed_reg_p (reg)))\n@@ -8289,7 +8289,7 @@ sh_fix_range (const char *const_str)\n \t}\n \n       for (int i = first; i <= last; ++i)\n-\tfixed_regs[i] = call_used_regs[i] = 1;\n+\tfixed_regs[i] = 1;\n \n       if (!comma)\n \tbreak;\n@@ -8809,7 +8809,7 @@ reg_unused_after (rtx reg, rtx_insn *insn)\n       if (set == NULL && reg_overlap_mentioned_p (reg, PATTERN (insn)))\n \treturn false;\n \n-      if (code == CALL_INSN && call_really_used_regs[REGNO (reg)])\n+      if (code == CALL_INSN && call_used_regs[REGNO (reg)])\n \treturn true;\n     }\n   return true;\n@@ -11447,32 +11447,28 @@ sh_conditional_register_usage (void)\n {\n   for (int regno = 0; regno < FIRST_PSEUDO_REGISTER; regno ++)\n     if (! VALID_REGISTER_P (regno))\n-      fixed_regs[regno] = call_used_regs[regno] = 1;\n+      fixed_regs[regno] = 1;\n   /* R8 and R9 are call-clobbered on SH5, but not on earlier SH ABIs.  */\n   if (flag_pic)\n-    {\n-      fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n-      call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n-    }\n+    fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n   if (TARGET_FDPIC)\n     {\n       fixed_regs[PIC_REG] = 1;\n       call_used_regs[PIC_REG] = 1;\n-      call_really_used_regs[PIC_REG] = 1;\n     }\n   /* Renesas saves and restores mac registers on call.  */\n   if (TARGET_HITACHI && ! TARGET_NOMACSAVE)\n     {\n-      call_really_used_regs[MACH_REG] = 0;\n-      call_really_used_regs[MACL_REG] = 0;\n+      call_used_regs[MACH_REG] = 0;\n+      call_used_regs[MACL_REG] = 0;\n     }\n \n   for (int regno = FIRST_GENERAL_REG; regno <= LAST_GENERAL_REG; regno++)\n-    if (! fixed_regs[regno] && call_really_used_regs[regno])\n+    if (! fixed_regs[regno] && call_used_regs[regno])\n       SET_HARD_REG_BIT (reg_class_contents[SIBCALL_REGS], regno);\n \n-  call_really_used_regs[FPSCR_MODES_REG] = 0;\n-  call_really_used_regs[FPSCR_STAT_REG] = 0;\n+  call_used_regs[FPSCR_MODES_REG] = 0;\n+  call_used_regs[FPSCR_STAT_REG] = 0;\n }\n \n /* Implement TARGET_LEGITIMATE_CONSTANT_P"}, {"sha": "3e3848893f7614422ad93a1a180212e0f4e42883", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -732,45 +732,6 @@ extern char sh_additional_register_names[ADDREGNAMES_SIZE] \\\n   1,      1,      1,      1,\t\t\t\t\t\t\\\n }\n \n-/* 1 for registers not available across function calls.\n-   These must include the FIXED_REGISTERS and also any\n-   registers that can be used without being saved.\n-   The latter must include the registers where values are returned\n-   and the register where structure-value addresses are passed.\n-   Aside from that, you can include as many other registers as you like.  */\n-#define CALL_USED_REGISTERS\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-/* Regular registers.  */\t\t\t\t\t\t\\\n-  1,      1,      1,      1,      1,      1,      1,      1,\t\t\\\n-  /* R8 and R9 are call-clobbered on SH5, but not on earlier SH ABIs.\t\\\n-     Only the lower 32bits of R10-R14 are guaranteed to be preserved\t\\\n-     across SH5 function calls.  */\t\t\t\t\t\\\n-  0,      0,      0,      0,      0,      0,      0,      1,\t\t\\\n-  1,      1,      1,      1,      1,      1,      1,      1,\t\t\\\n-  1,      1,      1,      1,      0,      0,      0,      0,\t\t\\\n-  0,      0,      0,      0,      1,      1,      1,      1,\t\t\\\n-  1,      1,      1,      1,      0,      0,      0,      0,\t\t\\\n-  0,      0,      0,      0,      0,      0,      0,      0,\t\t\\\n-  0,      0,      0,      0,      1,      1,      1,      1,\t\t\\\n-/* FP registers.  */\t\t\t\t\t\t\t\\\n-  1,      1,      1,      1,      1,      1,      1,      1,\t\t\\\n-  1,      1,      1,      1,      0,      0,      0,      0,\t\t\\\n-  1,      1,      1,      1,      1,      1,      1,      1,\t\t\\\n-  1,      1,      1,      1,      1,      1,      1,      1,\t\t\\\n-  1,      1,      1,      1,      0,      0,      0,      0,\t\t\\\n-  0,      0,      0,      0,      0,      0,      0,      0,\t\t\\\n-  0,      0,      0,      0,      0,      0,      0,      0,\t\t\\\n-  0,      0,      0,      0,      0,      0,      0,      0,\t\t\\\n-/* Branch target registers.  */\t\t\t\t\t\t\\\n-  1,      1,      1,      1,      1,      0,      0,      0,\t\t\\\n-/* XD registers.  */\t\t\t\t\t\t\t\\\n-  1,      1,      1,      1,      1,      1,      0,      0,\t\t\\\n-/*\"gbr\",  \"ap\",\t  \"pr\",   \"t\",    \"mach\", \"macl\", \"fpul\", \"fpscr\", */\t\\\n-  1,      1,      1,      1,      1,      1,      1,      1,\t\t\\\n-/*\"rap\",  \"sfp\",\"fpscr0\",\"fpscr1\"  */\t\t\t\t\t\\\n-  1,      1,      1,      1,\t\t\t\t\t\t\\\n-}\n-\n /* CALL_REALLY_USED_REGISTERS is used as a default setting, which is then\n    overridden by -fcall-saved-* and -fcall-used-* options and then by\n    TARGET_CONDITIONAL_REGISTER_USAGE.  There we might want to make a"}, {"sha": "fe5e94118ef593eef81913a69e64e89da0c008d4", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -13008,10 +13008,7 @@ static void\n sparc_conditional_register_usage (void)\n {\n   if (PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM)\n-    {\n-      fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n-      call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n-    }\n+    fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n   /* If the user has passed -f{fixed,call-{used,saved}}-g5 */\n   /* then honor it.  */\n   if (TARGET_ARCH32 && fixed_regs[5])"}, {"sha": "defcba8ecd775eed8a0e06d08a5eab8e898fb5dc", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -677,31 +677,6 @@ along with GCC; see the file COPYING3.  If not see\n \t\t\t\t\\\n   0, 0, 0, 0, 1, 1, 1}\n \n-/* 1 for registers not available across function calls.\n-   These must include the FIXED_REGISTERS and also any\n-   registers that can be used without being saved.\n-   The latter must include the registers where values are returned\n-   and the register where structure-value addresses are passed.\n-   Aside from that, you can include as many other registers as you like.  */\n-\n-#define CALL_USED_REGISTERS  \\\n- {1, 1, 1, 1, 1, 1, 1, 1,\t\\\n-  1, 1, 1, 1, 1, 1, 1, 1,\t\\\n-  0, 0, 0, 0, 0, 0, 0, 0,\t\\\n-  0, 0, 0, 0, 0, 0, 0, 1,\t\\\n-\t\t\t\t\\\n-  1, 1, 1, 1, 1, 1, 1, 1,\t\\\n-  1, 1, 1, 1, 1, 1, 1, 1,\t\\\n-  1, 1, 1, 1, 1, 1, 1, 1,\t\\\n-  1, 1, 1, 1, 1, 1, 1, 1,\t\\\n-\t\t\t\t\\\n-  1, 1, 1, 1, 1, 1, 1, 1,\t\\\n-  1, 1, 1, 1, 1, 1, 1, 1,\t\\\n-  1, 1, 1, 1, 1, 1, 1, 1,\t\\\n-  1, 1, 1, 1, 1, 1, 1, 1,\t\\\n-\t\t\t\t\\\n-  1, 1, 1, 1, 1, 1, 1}\n-\n /* 1 for registers not available across function calls.\n    Unlike the above, this need not include the FIXED_REGISTERS, but any\n    registers that can be used without being saved."}, {"sha": "59c3859baa5873338399494c7d0e2627fb9a357b", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -4341,20 +4341,11 @@ static void\n tilegx_conditional_register_usage (void)\n {\n   global_regs[TILEGX_NETORDER_REGNUM] = 1;\n-  /* TILEGX_PIC_TEXT_LABEL_REGNUM is conditionally used.  It is a\n-     member of fixed_regs, and therefore must be member of\n-     call_used_regs, but it is not a member of call_really_used_regs[]\n-     because it is not clobbered by a call.  */\n+  /* TILEGX_PIC_TEXT_LABEL_REGNUM is conditionally used.  */\n   if (TILEGX_PIC_TEXT_LABEL_REGNUM != INVALID_REGNUM)\n-    {\n-      fixed_regs[TILEGX_PIC_TEXT_LABEL_REGNUM] = 1;\n-      call_used_regs[TILEGX_PIC_TEXT_LABEL_REGNUM] = 1;\n-    }\n+    fixed_regs[TILEGX_PIC_TEXT_LABEL_REGNUM] = 1;\n   if (PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM)\n-    {\n-      fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n-      call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n-    }\n+    fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n }\n \n "}, {"sha": "de3f9f6d16cf552165ab13c412b2ca0c4b11751b", "filename": "gcc/config/tilegx/tilegx.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Ftilegx%2Ftilegx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Ftilegx%2Ftilegx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.h?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -114,16 +114,13 @@\n   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n   0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, \\\n   1, 1, 1, 1}\n-#define CALL_USED_REGISTERS \\\n+#define CALL_REALLY_USED_REGISTERS \\\n  {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\n   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, \\\n   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n   0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\n   1, 1, 1, 1}\n \n-#define CALL_REALLY_USED_REGISTERS \\\n- CALL_USED_REGISTERS\n-\n #define REG_ALLOC_ORDER {\t\t\t\t\\\n       10, 11, 12, 13, 14, /* call used */\t\t\\\n       15, 16, 17, 18, 19,\t\t\t\t\\"}, {"sha": "1a5c883f2df8212d25096b1782c067b50c68d7b4", "filename": "gcc/config/tilepro/tilepro.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.c?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -3864,20 +3864,11 @@ static void\n tilepro_conditional_register_usage (void)\n {\n   global_regs[TILEPRO_NETORDER_REGNUM] = 1;\n-  /* TILEPRO_PIC_TEXT_LABEL_REGNUM is conditionally used.  It is a\n-     member of fixed_regs, and therefore must be member of\n-     call_used_regs, but it is not a member of call_really_used_regs[]\n-     because it is not clobbered by a call.  */\n+  /* TILEPRO_PIC_TEXT_LABEL_REGNUM is conditionally used.  */\n   if (TILEPRO_PIC_TEXT_LABEL_REGNUM != INVALID_REGNUM)\n-    {\n-      fixed_regs[TILEPRO_PIC_TEXT_LABEL_REGNUM] = 1;\n-      call_used_regs[TILEPRO_PIC_TEXT_LABEL_REGNUM] = 1;\n-    }\n+    fixed_regs[TILEPRO_PIC_TEXT_LABEL_REGNUM] = 1;\n   if (PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM)\n-    {\n-      fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n-      call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n-    }\n+    fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n }\n \n "}, {"sha": "409a727bc7fe94818693267531f40653db5b7fc6", "filename": "gcc/config/tilepro/tilepro.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Ftilepro%2Ftilepro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Ftilepro%2Ftilepro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.h?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -79,16 +79,13 @@\n   0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, \\\n   1, 1, 1}\n \n-#define CALL_USED_REGISTERS \\\n+#define CALL_REALLY_USED_REGISTERS \\\n  {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\n   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, \\\n   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n   0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\n   1, 1, 1}\n \n-#define CALL_REALLY_USED_REGISTERS \\\n- CALL_USED_REGISTERS\n-\n #define REG_ALLOC_ORDER {\t\t\t\t\\\n       10, 11, 12, 13, 14, /* call used */\t\t\\\n       15, 16, 17, 18, 19,\t\t\t\t\\"}, {"sha": "8477008320c6681249d2e657c1792850f2264d10", "filename": "gcc/config/visium/visium.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fvisium%2Fvisium.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fvisium%2Fvisium.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.c?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -754,20 +754,20 @@ visium_conditional_register_usage (void)\n     {\n       if (visium_cpu_and_features == PROCESSOR_GR5)\n \t{\n-\t  fixed_regs[24] = call_used_regs[24] = 1;\n-\t  fixed_regs[25] = call_used_regs[25] = 1;\n-\t  fixed_regs[26] = call_used_regs[26] = 1;\n-\t  fixed_regs[27] = call_used_regs[27] = 1;\n-\t  fixed_regs[28] = call_used_regs[28] = 1;\n-\t  call_really_used_regs[24] = 0;\n-\t  call_really_used_regs[25] = 0;\n-\t  call_really_used_regs[26] = 0;\n-\t  call_really_used_regs[27] = 0;\n-\t  call_really_used_regs[28] = 0;\n+\t  fixed_regs[24] = 1;\n+\t  fixed_regs[25] = 1;\n+\t  fixed_regs[26] = 1;\n+\t  fixed_regs[27] = 1;\n+\t  fixed_regs[28] = 1;\n+\t  call_used_regs[24] = 0;\n+\t  call_used_regs[25] = 0;\n+\t  call_used_regs[26] = 0;\n+\t  call_used_regs[27] = 0;\n+\t  call_used_regs[28] = 0;\n \t}\n \n-      fixed_regs[31] = call_used_regs[31] = 1;\n-      call_really_used_regs[31] = 0;\n+      fixed_regs[31] = 1;\n+      call_used_regs[31] = 0;\n \n       /* We also need to change the long-branch register.  */\n       if (visium_cpu_and_features == PROCESSOR_GR5)\n@@ -781,8 +781,8 @@ visium_conditional_register_usage (void)\n     {\n       for (int i = FP_FIRST_REGNUM; i <= FP_LAST_REGNUM; i++)\n \t{\n-\t  fixed_regs[i] = call_used_regs[i] = 1;\n-\t  call_really_used_regs[i] = 0;\n+\t  fixed_regs[i] = 1;\n+\t  call_used_regs[i] = 0;\n \t}\n     }\n }"}, {"sha": "0d7ae0fad0bcf141e872d1f5610c5a3174f7f89a", "filename": "gcc/config/visium/visium.h", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fvisium%2Fvisium.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fconfig%2Fvisium%2Fvisium.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.h?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -488,27 +488,6 @@\n    0, 0, 0, 0, 0, 0, 0, 0, /* f8 .. f15 */     \\\n    1, 1, 1 }               /* flags, arg, frame */\n \n-/* `CALL_USED_REGISTERS'\n-\n-   Like `FIXED_REGISTERS' but has 1 for each register that is\n-   clobbered (in general) by function calls as well as for fixed\n-   registers.  This macro therefore identifies the registers that are\n-   not available for general allocation of values that must live\n-   across function calls.\n-\n-   If a register has 0 in `CALL_USED_REGISTERS', the compiler\n-   automatically saves it on function entry and restores it on\n-   function exit, if the register is used within the function.  */\n-#define CALL_USED_REGISTERS \\\n- { 1, 1, 1, 1, 1, 1, 1, 1, /* r0 .. r7 */      \\\n-   1, 1, 1, 0, 0, 0, 0, 0, /* r8 .. r15 */     \\\n-   0, 0, 0, 0, 1, 1, 0, 1, /* r16 .. r23 */    \\\n-   1, 1, 1, 1, 1, 1, 1, 1, /* r24 .. r31 */    \\\n-   1, 1,                   /* mdb, mdc */      \\\n-   1, 1, 1, 1, 1, 1, 1, 1, /* f0 .. f7 */      \\\n-   1, 0, 0, 0, 0, 0, 0, 0, /* f8 .. f15 */     \\\n-   1, 1, 1 }               /* flags, arg, frame */\n-\n /* Like `CALL_USED_REGISTERS' except this macro doesn't require that\n    the entire set of `FIXED_REGISTERS' be included.\n    (`CALL_USED_REGISTERS' must be a superset of `FIXED_REGISTERS')."}, {"sha": "159ccd27265be5f655738668e9598b6ee303db45", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -1878,6 +1878,9 @@ function calls.\n If a register has 0 in @code{CALL_USED_REGISTERS}, the compiler\n automatically saves it on function entry and restores it on function\n exit, if the register is used within the function.\n+\n+Exactly one of @code{CALL_USED_REGISTERS} and @code{CALL_REALLY_USED_REGISTERS}\n+must be defined.  Modern ports should define @code{CALL_REALLY_USED_REGISTERS}.\n @end defmac\n \n @defmac CALL_REALLY_USED_REGISTERS\n@@ -1887,8 +1890,9 @@ exit, if the register is used within the function.\n Like @code{CALL_USED_REGISTERS} except this macro doesn't require\n that the entire set of @code{FIXED_REGISTERS} be included.\n (@code{CALL_USED_REGISTERS} must be a superset of @code{FIXED_REGISTERS}).\n-This macro is optional.  If not specified, it defaults to the value\n-of @code{CALL_USED_REGISTERS}.\n+\n+Exactly one of @code{CALL_USED_REGISTERS} and @code{CALL_REALLY_USED_REGISTERS}\n+must be defined.  Modern ports should define @code{CALL_REALLY_USED_REGISTERS}.\n @end defmac\n \n @cindex call-used register"}, {"sha": "91a2d2b7a3bc26251e1fa7289b54f2ebdec56b8b", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -1689,6 +1689,9 @@ function calls.\n If a register has 0 in @code{CALL_USED_REGISTERS}, the compiler\n automatically saves it on function entry and restores it on function\n exit, if the register is used within the function.\n+\n+Exactly one of @code{CALL_USED_REGISTERS} and @code{CALL_REALLY_USED_REGISTERS}\n+must be defined.  Modern ports should define @code{CALL_REALLY_USED_REGISTERS}.\n @end defmac\n \n @defmac CALL_REALLY_USED_REGISTERS\n@@ -1698,8 +1701,9 @@ exit, if the register is used within the function.\n Like @code{CALL_USED_REGISTERS} except this macro doesn't require\n that the entire set of @code{FIXED_REGISTERS} be included.\n (@code{CALL_USED_REGISTERS} must be a superset of @code{FIXED_REGISTERS}).\n-This macro is optional.  If not specified, it defaults to the value\n-of @code{CALL_USED_REGISTERS}.\n+\n+Exactly one of @code{CALL_USED_REGISTERS} and @code{CALL_REALLY_USED_REGISTERS}\n+must be defined.  Modern ports should define @code{CALL_REALLY_USED_REGISTERS}.\n @end defmac\n \n @cindex call-used register"}, {"sha": "a54c167fb1438e3417a6dfb662b4218818940933", "filename": "gcc/hard-reg-set.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fhard-reg-set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Fhard-reg-set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhard-reg-set.h?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -395,8 +395,6 @@ struct target_hard_regs {\n      a pseudo reg whose life crosses calls.  */\n   char x_call_used_regs[FIRST_PSEUDO_REGISTER];\n \n-  char x_call_really_used_regs[FIRST_PSEUDO_REGISTER];\n-\n   /* For targets that use reload rather than LRA, this is the set\n      of registers that we are able to save and restore around calls\n      (i.e. those for which we know a suitable mode and set of\n@@ -477,8 +475,6 @@ extern struct target_hard_regs *this_target_hard_regs;\n #define call_used_regs \\\n   (this_target_hard_regs->x_call_used_regs)\n #endif\n-#define call_really_used_regs \\\n-  (this_target_hard_regs->x_call_really_used_regs)\n #define savable_regs \\\n   (this_target_hard_regs->x_savable_regs)\n #define regs_invalidated_by_call \\"}, {"sha": "22d0e6874a9c1e5baf22c31fd32d12a583041f00", "filename": "gcc/reginfo.c", "status": "modified", "additions": 9, "deletions": 49, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Freginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fb4c3162307590c0babddcea4fb60c07a7c033/gcc%2Freginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.c?ref=d7fb4c3162307590c0babddcea4fb60c07a7c033", "patch": "@@ -73,17 +73,13 @@ struct target_regs *this_target_regs = &default_target_regs;\n static const char initial_fixed_regs[] = FIXED_REGISTERS;\n \n /* Data for initializing call_used_regs.  */\n-static const char initial_call_used_regs[] = CALL_USED_REGISTERS;\n-\n #ifdef CALL_REALLY_USED_REGISTERS\n-/* Data for initializing call_really_used_regs.  */\n-static const char initial_call_really_used_regs[] = CALL_REALLY_USED_REGISTERS;\n+#ifdef CALL_USED_REGISTERS\n+#error CALL_USED_REGISTERS and CALL_REALLY_USED_REGISTERS are both defined\n #endif\n-\n-#ifdef CALL_REALLY_USED_REGISTERS\n-#define CALL_REALLY_USED_REGNO_P(X)  call_really_used_regs[X]\n+static const char initial_call_used_regs[] = CALL_REALLY_USED_REGISTERS;\n #else\n-#define CALL_REALLY_USED_REGNO_P(X)  call_used_regs[X]\n+static const char initial_call_used_regs[] = CALL_USED_REGISTERS;\n #endif\n \n /* Indexed by hard register number, contains 1 for registers\n@@ -164,21 +160,13 @@ init_reg_sets (void)\n      CALL_USED_REGISTERS had the right number of initializers.  */\n   gcc_assert (sizeof fixed_regs == sizeof initial_fixed_regs);\n   gcc_assert (sizeof call_used_regs == sizeof initial_call_used_regs);\n-#ifdef CALL_REALLY_USED_REGISTERS\n-  gcc_assert (sizeof call_really_used_regs\n-\t      == sizeof initial_call_really_used_regs);\n-#endif\n #ifdef REG_ALLOC_ORDER\n   gcc_assert (sizeof reg_alloc_order == sizeof initial_reg_alloc_order);\n #endif\n   gcc_assert (sizeof reg_names == sizeof initial_reg_names);\n \n   memcpy (fixed_regs, initial_fixed_regs, sizeof fixed_regs);\n   memcpy (call_used_regs, initial_call_used_regs, sizeof call_used_regs);\n-#ifdef CALL_REALLY_USED_REGISTERS\n-  memcpy (call_really_used_regs, initial_call_really_used_regs,\n-\t  sizeof call_really_used_regs);\n-#endif\n #ifdef REG_ALLOC_ORDER\n   memcpy (reg_alloc_order, initial_reg_alloc_order, sizeof reg_alloc_order);\n #endif\n@@ -193,9 +181,6 @@ init_reg_sets (void)\n    subsequent back-end reinitialization.  */\n static char saved_fixed_regs[FIRST_PSEUDO_REGISTER];\n static char saved_call_used_regs[FIRST_PSEUDO_REGISTER];\n-#ifdef CALL_REALLY_USED_REGISTERS\n-static char saved_call_really_used_regs[FIRST_PSEUDO_REGISTER];\n-#endif\n static const char *saved_reg_names[FIRST_PSEUDO_REGISTER];\n static HARD_REG_SET saved_accessible_reg_set;\n static HARD_REG_SET saved_operand_reg_set;\n@@ -211,14 +196,6 @@ save_register_info (void)\n   memcpy (saved_fixed_regs, fixed_regs, sizeof fixed_regs);\n   memcpy (saved_call_used_regs, call_used_regs, sizeof call_used_regs);\n \n-  /* Likewise for call_really_used_regs.  */\n-#ifdef CALL_REALLY_USED_REGISTERS\n-  gcc_assert (sizeof call_really_used_regs\n-\t      == sizeof saved_call_really_used_regs);\n-  memcpy (saved_call_really_used_regs, call_really_used_regs,\n-\t  sizeof call_really_used_regs);\n-#endif\n-\n   /* And similarly for reg_names.  */\n   gcc_assert (sizeof reg_names == sizeof saved_reg_names);\n   memcpy (saved_reg_names, reg_names, sizeof reg_names);\n@@ -233,11 +210,6 @@ restore_register_info (void)\n   memcpy (fixed_regs, saved_fixed_regs, sizeof fixed_regs);\n   memcpy (call_used_regs, saved_call_used_regs, sizeof call_used_regs);\n \n-#ifdef CALL_REALLY_USED_REGISTERS\n-  memcpy (call_really_used_regs, saved_call_really_used_regs,\n-\t  sizeof call_really_used_regs);\n-#endif\n-\n   memcpy (reg_names, saved_reg_names, sizeof reg_names);\n   accessible_reg_set = saved_accessible_reg_set;\n   operand_reg_set = saved_operand_reg_set;\n@@ -371,17 +343,7 @@ init_reg_sets_1 (void)\n       /* If a register is too limited to be treated as a register operand,\n \t then it should never be allocated to a pseudo.  */\n       if (!TEST_HARD_REG_BIT (operand_reg_set, i))\n-\t{\n-\t  fixed_regs[i] = 1;\n-\t  call_used_regs[i] = 1;\n-\t}\n-\n-      /* call_used_regs must include fixed_regs.  */\n-      gcc_assert (!fixed_regs[i] || call_used_regs[i]);\n-#ifdef CALL_REALLY_USED_REGISTERS\n-      /* call_used_regs must include call_really_used_regs.  */\n-      gcc_assert (!call_really_used_regs[i] || call_used_regs[i]);\n-#endif\n+\tfixed_regs[i] = 1;\n \n       if (fixed_regs[i])\n \tSET_HARD_REG_BIT (fixed_reg_set, i);\n@@ -411,7 +373,7 @@ init_reg_sets_1 (void)\n       else if (!PIC_OFFSET_TABLE_REG_CALL_CLOBBERED\n \t       && i == (unsigned) PIC_OFFSET_TABLE_REGNUM && fixed_regs[i])\n \t;\n-      else if (CALL_REALLY_USED_REGNO_P (i))\n+      else if (call_used_regs[i])\n \tSET_HARD_REG_BIT (regs_invalidated_by_call, i);\n     }\n \n@@ -713,10 +675,11 @@ fix_register (const char *name, int fixed, int call_used)\n \t  else\n \t    {\n \t      fixed_regs[i] = fixed;\n-\t      call_used_regs[i] = call_used;\n #ifdef CALL_REALLY_USED_REGISTERS\n \t      if (fixed == 0)\n-\t\tcall_really_used_regs[i] = call_used;\n+\t\tcall_used_regs[i] = call_used;\n+#else\n+\t      call_used_regs[i] = call_used;\n #endif\n \t    }\n \t}\n@@ -772,9 +735,6 @@ globalize_reg (tree decl, int i)\n     return;\n \n   fixed_regs[i] = call_used_regs[i] = 1;\n-#ifdef CALL_REALLY_USED_REGISTERS\n-  call_really_used_regs[i] = 1;\n-#endif\n \n   SET_HARD_REG_BIT (fixed_reg_set, i);\n "}]}