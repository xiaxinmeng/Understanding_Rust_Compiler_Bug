{"sha": "576e2f37400cecb0cdb4537c7777284b7878e7c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc2ZTJmMzc0MDBjZWNiMGNkYjQ1MzdjNzc3NzI4NGI3ODc4ZTdjMA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-07-29T11:17:51Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-07-29T11:17:51Z"}, "message": "re PR target/57954 (AVX missing vxorps (zeroing) before vcvtsi2s %edx, slow down AVX code)\n\n2013-07-29  Uros Bizjak  <ubizjak@gmail.com>\n\n\t* config/i386/i386.md (float post-reload splitters): Do not check\n\tfor subregs of SSE registers.\n\n2013-07-29  Uros Bizjak  <ubizjak@gmail.com>\n\t    H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/57954\n\tPR target/57988\n\t* config/i386/i386.md (post-reload splitter\n\tto avoid partial SSE reg dependency stalls): New pattern.\n\nFrom-SVN: r201308", "tree": {"sha": "1de9ab1f3f338f36c3085ab0f145619a94731886", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1de9ab1f3f338f36c3085ab0f145619a94731886"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/576e2f37400cecb0cdb4537c7777284b7878e7c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/576e2f37400cecb0cdb4537c7777284b7878e7c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/576e2f37400cecb0cdb4537c7777284b7878e7c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/576e2f37400cecb0cdb4537c7777284b7878e7c0/comments", "author": null, "committer": null, "parents": [{"sha": "bb80c2eb3a2578e71de04b5aa4a7574918b13144", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb80c2eb3a2578e71de04b5aa4a7574918b13144", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb80c2eb3a2578e71de04b5aa4a7574918b13144"}], "stats": {"total": 102, "additions": 64, "deletions": 38}, "files": [{"sha": "e30f63b542a09051a22862a02f9c733068b361d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/576e2f37400cecb0cdb4537c7777284b7878e7c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/576e2f37400cecb0cdb4537c7777284b7878e7c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=576e2f37400cecb0cdb4537c7777284b7878e7c0", "patch": "@@ -1,3 +1,16 @@\n+2013-07-29  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (float post-reload splitters): Do not check\n+\tfor subregs of SSE registers.\n+\n+2013-07-29  Uros Bizjak  <ubizjak@gmail.com>\n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/57954\n+\tPR target/57988\n+\t* config/i386/i386.md (post-reload splitter\n+\tto avoid partial SSE reg dependency stalls): New pattern.\n+\n 2013-07-29  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* config/s390/s390.md (\"movcc\"): Swap load and store instructions.\n@@ -28,10 +41,10 @@\n \t* config/aarch64/iterators.md: Add attributes rtn and vas.\n \n 2013-07-26  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n-            Richard Earnshaw  <richard.earnshaw@arm.com>\n+\t    Richard Earnshaw  <richard.earnshaw@arm.com>\n \n \t* combine.c (simplify_comparison): Re-canonicalize operands\n-\twhere appropriate.\t\n+\twhere appropriate.\n \t* config/arm/arm.md (movcond_addsi): New splitter.\n \n 2013-07-25  Sterling Augustine  <saugustine@google.com>"}, {"sha": "84515ae56f2faa02825c7b6dd4f0413bf5a65e9d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 49, "deletions": 36, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/576e2f37400cecb0cdb4537c7777284b7878e7c0/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/576e2f37400cecb0cdb4537c7777284b7878e7c0/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=576e2f37400cecb0cdb4537c7777284b7878e7c0", "patch": "@@ -4596,10 +4596,7 @@\n    (clobber (match_operand:SWI48 2 \"memory_operand\"))]\n   \"SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_MIX_SSE_I387\n    && TARGET_INTER_UNIT_CONVERSIONS\n-   && reload_completed\n-   && (SSE_REG_P (operands[0])\n-       || (GET_CODE (operands[0]) == SUBREG\n-\t   && SSE_REG_P (SUBREG_REG (operands[0]))))\"\n+   && reload_completed && SSE_REG_P (operands[0])\"\n   [(set (match_dup 0) (float:MODEF (match_dup 1)))])\n \n (define_split\n@@ -4608,10 +4605,7 @@\n    (clobber (match_operand:SWI48 2 \"memory_operand\"))]\n   \"SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_MIX_SSE_I387\n    && !(TARGET_INTER_UNIT_CONVERSIONS || optimize_function_for_size_p (cfun))\n-   && reload_completed\n-   && (SSE_REG_P (operands[0])\n-       || (GET_CODE (operands[0]) == SUBREG\n-\t   && SSE_REG_P (SUBREG_REG (operands[0]))))\"\n+   && reload_completed && SSE_REG_P (operands[0])\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (float:MODEF (match_dup 2)))])\n \n@@ -4697,10 +4691,7 @@\n    (clobber (match_operand:SI 2 \"memory_operand\"))]\n   \"TARGET_SSE2 && TARGET_SSE_MATH\n    && TARGET_USE_VECTOR_CONVERTS && optimize_function_for_speed_p (cfun)\n-   && reload_completed\n-   && (SSE_REG_P (operands[0])\n-       || (GET_CODE (operands[0]) == SUBREG\n-\t   && SSE_REG_P (SUBREG_REG (operands[0]))))\"\n+   && reload_completed && SSE_REG_P (operands[0])\"\n   [(const_int 0)]\n {\n   rtx op1 = operands[1];\n@@ -4740,10 +4731,7 @@\n    (clobber (match_operand:SI 2 \"memory_operand\"))]\n   \"TARGET_SSE2 && TARGET_SSE_MATH\n    && TARGET_USE_VECTOR_CONVERTS && optimize_function_for_speed_p (cfun)\n-   && reload_completed\n-   && (SSE_REG_P (operands[0])\n-       || (GET_CODE (operands[0]) == SUBREG\n-\t   && SSE_REG_P (SUBREG_REG (operands[0]))))\"\n+   && reload_completed && SSE_REG_P (operands[0])\"\n   [(const_int 0)]\n {\n   operands[3] = simplify_gen_subreg (<ssevecmode>mode, operands[0],\n@@ -4764,10 +4752,7 @@\n \t(float:MODEF (match_operand:SI 1 \"register_operand\")))]\n   \"TARGET_SSE2 && TARGET_SSE_MATH\n    && TARGET_USE_VECTOR_CONVERTS && optimize_function_for_speed_p (cfun)\n-   && reload_completed\n-   && (SSE_REG_P (operands[0])\n-       || (GET_CODE (operands[0]) == SUBREG\n-\t   && SSE_REG_P (SUBREG_REG (operands[0]))))\"\n+   && reload_completed && SSE_REG_P (operands[0])\"\n   [(const_int 0)]\n {\n   rtx op1 = operands[1];\n@@ -4810,10 +4795,7 @@\n \t(float:MODEF (match_operand:SI 1 \"memory_operand\")))]\n   \"TARGET_SSE2 && TARGET_SSE_MATH\n    && TARGET_USE_VECTOR_CONVERTS && optimize_function_for_speed_p (cfun)\n-   && reload_completed\n-   && (SSE_REG_P (operands[0])\n-       || (GET_CODE (operands[0]) == SUBREG\n-\t   && SSE_REG_P (SUBREG_REG (operands[0]))))\"\n+   && reload_completed && SSE_REG_P (operands[0])\"\n   [(const_int 0)]\n {\n   operands[3] = simplify_gen_subreg (<ssevecmode>mode, operands[0],\n@@ -4872,10 +4854,7 @@\n    (clobber (match_operand:SWI48 2 \"memory_operand\"))]\n   \"SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\n    && (TARGET_INTER_UNIT_CONVERSIONS || optimize_function_for_size_p (cfun))\n-   && reload_completed\n-   && (SSE_REG_P (operands[0])\n-       || (GET_CODE (operands[0]) == SUBREG\n-\t   && SSE_REG_P (SUBREG_REG (operands[0]))))\"\n+   && reload_completed && SSE_REG_P (operands[0])\"\n   [(set (match_dup 0) (float:MODEF (match_dup 1)))])\n \n (define_insn \"*float<SWI48:mode><MODEF:mode>2_sse_nointerunit\"\n@@ -4905,10 +4884,7 @@\n    (clobber (match_operand:SWI48 2 \"memory_operand\"))]\n   \"SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\n    && !(TARGET_INTER_UNIT_CONVERSIONS || optimize_function_for_size_p (cfun))\n-   && reload_completed\n-   && (SSE_REG_P (operands[0])\n-       || (GET_CODE (operands[0]) == SUBREG\n-\t   && SSE_REG_P (SUBREG_REG (operands[0]))))\"\n+   && reload_completed && SSE_REG_P (operands[0])\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (float:MODEF (match_dup 2)))])\n \n@@ -4917,10 +4893,7 @@\n \t(float:MODEF (match_operand:SWI48 1 \"memory_operand\")))\n    (clobber (match_operand:SWI48 2 \"memory_operand\"))]\n   \"SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\n-   && reload_completed\n-   && (SSE_REG_P (operands[0])\n-       || (GET_CODE (operands[0]) == SUBREG\n-\t   && SSE_REG_P (SUBREG_REG (operands[0]))))\"\n+   && reload_completed && SSE_REG_P (operands[0])\"\n   [(set (match_dup 0) (float:MODEF (match_dup 1)))])\n \n (define_insn \"*float<SWI48x:mode><X87MODEF:mode>2_i387_with_temp\"\n@@ -4968,6 +4941,46 @@\n    && reload_completed\"\n   [(set (match_dup 0) (float:X87MODEF (match_dup 1)))])\n \n+;; Avoid partial SSE register dependency stalls\n+\n+(define_split\n+  [(set (match_operand:MODEF 0 \"register_operand\")\n+\t(float:MODEF (match_operand:SI 1 \"nonimmediate_operand\")))]\n+  \"TARGET_SSE2 && TARGET_SSE_MATH\n+   && TARGET_SSE_PARTIAL_REG_DEPENDENCY\n+   && optimize_function_for_speed_p (cfun)\n+   && reload_completed && SSE_REG_P (operands[0])\"\n+  [(set (match_dup 0)\n+\t(vec_merge:<ssevecmode>\n+\t  (vec_duplicate:<ssevecmode>\n+\t    (float:MODEF (match_dup 1)))\n+\t  (match_dup 0)\n+\t  (const_int 1)))]\n+{\n+  operands[0] = simplify_gen_subreg (<ssevecmode>mode, operands[0],\n+\t\t\t\t     <MODE>mode, 0);\n+  emit_move_insn (operands[0], CONST0_RTX (<ssevecmode>mode));\n+})\n+\n+(define_split\n+  [(set (match_operand:MODEF 0 \"register_operand\")\n+\t(float:MODEF (match_operand:DI 1 \"nonimmediate_operand\")))]\n+  \"TARGET_64BIT && TARGET_SSE2 && TARGET_SSE_MATH\n+   && TARGET_SSE_PARTIAL_REG_DEPENDENCY\n+   && optimize_function_for_speed_p (cfun)\n+   && reload_completed && SSE_REG_P (operands[0])\"\n+  [(set (match_dup 0)\n+\t(vec_merge:<ssevecmode>\n+\t  (vec_duplicate:<ssevecmode>\n+\t    (float:MODEF (match_dup 1)))\n+\t  (match_dup 0)\n+\t  (const_int 1)))]\n+{\n+  operands[0] = simplify_gen_subreg (<ssevecmode>mode, operands[0],\n+\t\t\t\t     <MODE>mode, 0);\n+  emit_move_insn (operands[0], CONST0_RTX (<ssevecmode>mode));\n+})\n+\n ;; Avoid store forwarding (partial memory) stall penalty\n ;; by passing DImode value through XMM registers.  */\n "}]}