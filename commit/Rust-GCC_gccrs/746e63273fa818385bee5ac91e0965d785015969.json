{"sha": "746e63273fa818385bee5ac91e0965d785015969", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ2ZTYzMjczZmE4MTgzODViZWU1YWM5MWUwOTY1ZDc4NTAxNTk2OQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2010-07-19T13:11:54Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2010-07-19T13:11:54Z"}, "message": "re PR fortran/44953 (FAIL: gfortran.dg/char4_iunit_1.f03  *  execution test)\n\n2010-07-19  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libfortran/44953\n\t* io/unix.c (mem_alloc_w4): Return gfc_char4_t instead of char type\n\tpointer. (mem_write4): Remove cast to gfc_char4_t.\n\t* io/transfer.c (write_block): Use a gfc_char4_t pointer.\n\t(memset4): New helper function. (next_record_w): Use new helper\n\tfunction rather than sset for internal units.  Don't attempt to pad\n\twith spaces if it is not needed.\n\t* io/unix.h: Update prototype for mem_alloc_w4.\n\t* io/write.c (memset4): Use gfc_char4_t pointer and chracter type.\n\tDon't use multiply by 4 to compute offset. (memcpy4): Likewise.\n\t(write_default_char4): Use a gfc_char4_t pointer and update memset4\n\tand memcpy calls. (write_a): Likewise. (write_l): Likewise.\n\t(write_boz): Likewise. (write_decimal): Likewise. (write_x): Likewise.\n\t(write_char): Add support for character(kind=4) internal units that\n\twas previously missed. (write_integer): Use a gfc_char4_t pointer and\n\tupdate memset4 and memcpy calls. (write_character): Likewise.\n\t(write_separator): Add support for character(kind=4) internal units\n\tthat was previously missed.\n\t* write_float.def (output_float): Use a gfc_char4_t pointer and\n\tupdate memset4 and memcpy calls. (write_infnan): Likewise.\n\t(output_float_FMT_G_): Likewise.\n\nFrom-SVN: r162304", "tree": {"sha": "eec8aba9ca8a253c9df3df6becb0502fbf9138c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eec8aba9ca8a253c9df3df6becb0502fbf9138c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/746e63273fa818385bee5ac91e0965d785015969", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/746e63273fa818385bee5ac91e0965d785015969", "html_url": "https://github.com/Rust-GCC/gccrs/commit/746e63273fa818385bee5ac91e0965d785015969", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/746e63273fa818385bee5ac91e0965d785015969/comments", "author": null, "committer": null, "parents": [{"sha": "d555b1c77dd2eaf14475a83df44f6c891b5e1d01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d555b1c77dd2eaf14475a83df44f6c891b5e1d01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d555b1c77dd2eaf14475a83df44f6c891b5e1d01"}], "stats": {"total": 220, "additions": 158, "deletions": 62}, "files": [{"sha": "9252a90f46dc4556ea86d0d5bcd9044599e0a73f", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/746e63273fa818385bee5ac91e0965d785015969/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/746e63273fa818385bee5ac91e0965d785015969/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=746e63273fa818385bee5ac91e0965d785015969", "patch": "@@ -1,3 +1,27 @@\n+2010-07-19  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libfortran/44953\n+\t* io/unix.c (mem_alloc_w4): Return gfc_char4_t instead of char type\n+\tpointer. (mem_write4): Remove cast to gfc_char4_t.\n+\t* io/transfer.c (write_block): Use a gfc_char4_t pointer.\n+\t(memset4): New helper function. (next_record_w): Use new helper\n+\tfunction rather than sset for internal units.  Don't attempt to pad\n+\twith spaces if it is not needed.\n+\t* io/unix.h: Update prototype for mem_alloc_w4.\n+\t* io/write.c (memset4): Use gfc_char4_t pointer and chracter type.\n+\tDon't use multiply by 4 to compute offset. (memcpy4): Likewise.\n+\t(write_default_char4): Use a gfc_char4_t pointer and update memset4\n+\tand memcpy calls. (write_a): Likewise. (write_l): Likewise.\n+\t(write_boz): Likewise. (write_decimal): Likewise. (write_x): Likewise.\n+\t(write_char): Add support for character(kind=4) internal units that\n+\twas previously missed. (write_integer): Use a gfc_char4_t pointer and\n+\tupdate memset4 and memcpy calls. (write_character): Likewise.\n+\t(write_separator): Add support for character(kind=4) internal units\n+\tthat was previously missed.\n+\t* write_float.def (output_float): Use a gfc_char4_t pointer and\n+\tupdate memset4 and memcpy calls. (write_infnan): Likewise.\n+\t(output_float_FMT_G_): Likewise.\n+\t\n 2010-07-16  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/37077"}, {"sha": "f750a568df46ecc5da453ea0466e8b65ca6cd171", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 41, "deletions": 9, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/746e63273fa818385bee5ac91e0965d785015969/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/746e63273fa818385bee5ac91e0965d785015969/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=746e63273fa818385bee5ac91e0965d785015969", "patch": "@@ -696,7 +696,16 @@ write_block (st_parameter_dt *dtp, int length)\n   if (is_internal_unit (dtp))\n     {\n       if (dtp->common.unit) /* char4 internel unit.  */\n-\tdest = mem_alloc_w4 (dtp->u.p.current_unit->s, &length);\n+\t{\n+\t  gfc_char4_t *dest4;\n+\t  dest4 = mem_alloc_w4 (dtp->u.p.current_unit->s, &length);\n+\t  if (dest4 == NULL)\n+\t  {\n+            generate_error (&dtp->common, LIBERROR_END, NULL);\n+            return NULL;\n+\t  }\n+\t  return dest4;\n+\t}\n       else\n \tdest = mem_alloc_w (dtp->u.p.current_unit->s, &length);\n \n@@ -3086,6 +3095,14 @@ sset (stream * s, int c, ssize_t nbyte)\n   return nbyte - bytes_left;\n }\n \n+static inline void\n+memset4 (gfc_char4_t *p, gfc_char4_t c, int k)\n+{\n+  int j;\n+  for (j = 0; j < k; j++)\n+    *p++ = c;\n+}\n+\n /* Position to the next record in write mode.  */\n \n static void\n@@ -3136,6 +3153,7 @@ next_record_w (st_parameter_dt *dtp, int done)\n \n       if (is_internal_unit (dtp))\n \t{\n+\t  char *p;\n \t  if (is_array_io (dtp))\n \t    {\n \t      int finished;\n@@ -3160,11 +3178,17 @@ next_record_w (st_parameter_dt *dtp, int done)\n \t\t  length = (int) (dtp->u.p.current_unit->recl - max_pos);\n \t\t}\n \n-\t      if (sset (dtp->u.p.current_unit->s, ' ', length) != length)\n-\t\t{\n-\t\t  generate_error (&dtp->common, LIBERROR_END, NULL);\n-\t\t  return;\n+\t      p = write_block (dtp, length);\n+\t      if (p == NULL)\n+\t\treturn;\n+\n+\t      if (unlikely (is_char4_unit (dtp)))\n+\t        {\n+\t\t  gfc_char4_t *p4 = (gfc_char4_t *) p;\n+\t\t  memset4 (p4, ' ', length);\n \t\t}\n+\t      else\n+\t\tmemset (p, ' ', length);\n \n \t      /* Now that the current record has been padded out,\n \t\t determine where the next record in the array is. */\n@@ -3209,11 +3233,19 @@ next_record_w (st_parameter_dt *dtp, int done)\n \t\t  else\n \t\t    length = (int) dtp->u.p.current_unit->bytes_left;\n \t\t}\n-\n-\t      if (sset (dtp->u.p.current_unit->s, ' ', length) != length)\n+\t      if (length > 0)\n \t\t{\n-\t\t  generate_error (&dtp->common, LIBERROR_END, NULL);\n-\t\t  return;\n+\t\t  p = write_block (dtp, length);\n+\t\t  if (p == NULL)\n+\t\t    return;\n+\n+\t\t  if (unlikely (is_char4_unit (dtp)))\n+\t\t    {\n+\t\t      gfc_char4_t *p4 = (gfc_char4_t *) p;\n+\t\t      memset4 (p4, (gfc_char4_t) ' ', length);\n+\t\t    }\n+\t\t  else\n+\t\t    memset (p, ' ', length);\n \t\t}\n \t    }\n \t}"}, {"sha": "3a795aef53624d6c87c5aab1b1315cddbb841a9c", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/746e63273fa818385bee5ac91e0965d785015969/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/746e63273fa818385bee5ac91e0965d785015969/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=746e63273fa818385bee5ac91e0965d785015969", "patch": "@@ -659,12 +659,13 @@ mem_alloc_w (stream * strm, int * len)\n }\n \n \n-char *\n+gfc_char4_t *\n mem_alloc_w4 (stream * strm, int * len)\n {\n   unix_stream * s = (unix_stream *) strm;\n   gfc_offset m;\n   gfc_offset where = s->logical_offset;\n+  gfc_char4_t *result = (gfc_char4_t *) s->buffer;\n \n   m = where + *len;\n \n@@ -675,7 +676,7 @@ mem_alloc_w4 (stream * strm, int * len)\n     return NULL;\n \n   s->logical_offset = m;\n-  return s->buffer + (where - s->buffer_offset) * 4;\n+  return &result[where - s->buffer_offset];\n }\n \n \n@@ -744,7 +745,7 @@ mem_write4 (stream * s, const void * buf, ssize_t nwords)\n   gfc_char4_t *p;\n   int nw = nwords;\n \n-  p = (gfc_char4_t *) mem_alloc_w4 (s, &nw);\n+  p = mem_alloc_w4 (s, &nw);\n   if (p)\n     {\n       while (nw--)"}, {"sha": "3229d502547f1e1a38555297082db3b5e03aa92b", "filename": "libgfortran/io/unix.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/746e63273fa818385bee5ac91e0965d785015969/libgfortran%2Fio%2Funix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/746e63273fa818385bee5ac91e0965d785015969/libgfortran%2Fio%2Funix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.h?ref=746e63273fa818385bee5ac91e0965d785015969", "patch": "@@ -103,7 +103,7 @@ internal_proto(mem_alloc_w);\n extern char * mem_alloc_r (stream *, int *);\n internal_proto(mem_alloc_r);\n \n-extern char * mem_alloc_w4 (stream *, int *);\n+extern gfc_char4_t * mem_alloc_w4 (stream *, int *);\n internal_proto(mem_alloc_w4);\n \n extern char * mem_alloc_r4 (stream *, int *);"}, {"sha": "775425d6d776af238fc5d5266aab6bffdc8c96f4", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 57, "deletions": 34, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/746e63273fa818385bee5ac91e0965d785015969/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/746e63273fa818385bee5ac91e0965d785015969/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=746e63273fa818385bee5ac91e0965d785015969", "patch": "@@ -42,23 +42,21 @@ typedef unsigned char uchar;\n    by write_float.def.  */\n \n static inline void\n-memset4 (void *p,  int offs, uchar c, int k)\n+memset4 (gfc_char4_t *p, gfc_char4_t c, int k)\n {\n   int j;\n-  gfc_char4_t *q = (gfc_char4_t *) (p + offs * 4);\n   for (j = 0; j < k; j++)\n-    *q++ = c;\n+    *p++ = c;\n }\n \n static inline void\n-memcpy4 (void *dest,  int offs, const char *source, int k)\n+memcpy4 (gfc_char4_t *dest, const char *source, int k)\n {\n   int j;\n   \n   const char *p = source;\n-  gfc_char4_t *q = (gfc_char4_t *) (dest + offs * 4);\n   for (j = 0; j < k; j++)\n-    *q++ = (gfc_char4_t) *p++;\n+    *dest++ = (gfc_char4_t) *p++;\n }\n \n /* This include contains the heart and soul of formatted floating point.  */\n@@ -83,7 +81,10 @@ write_default_char4 (st_parameter_dt *dtp, gfc_char4_t *source,\n       if (p == NULL)\n \treturn;\n       if (is_char4_unit (dtp))\n-\tmemset4 (p, 0, ' ', k);\n+\t{\n+\t  gfc_char4_t *p4 = (gfc_char4_t *) p;\n+\t  memset4 (p4, ' ', k);\n+\t}\n       else\n \tmemset (p, ' ', k);\n     }\n@@ -310,12 +311,13 @@ write_a (st_parameter_dt *dtp, const fnode *f, const char *source, int len)\n \n       if (unlikely (is_char4_unit (dtp)))\n \t{\n+\t  gfc_char4_t *p4 = (gfc_char4_t *) p;\n \t  if (wlen < len)\n-\t    memcpy4 (p, 0, source, wlen);\n+\t    memcpy4 (p4, source, wlen);\n \t  else\n \t    {\n-\t      memset4 (p, 0, ' ', wlen - len);\n-\t      memcpy4 (p, wlen - len, source, len);\n+\t      memset4 (p4, ' ', wlen - len);\n+\t      memcpy4 (p4 + wlen - len, source, len);\n \t    }\n \t  return;\n \t}\n@@ -545,7 +547,7 @@ write_l (st_parameter_dt *dtp, const fnode *f, char *source, int len)\n   if (unlikely (is_char4_unit (dtp)))\n     {\n       gfc_char4_t *p4 = (gfc_char4_t *) p;\n-      memset4 (p, 0, ' ', wlen -1);\n+      memset4 (p4, ' ', wlen -1);\n       p4[wlen - 1] = (n) ? 'T' : 'F';\n       return;\n     }\n@@ -575,7 +577,10 @@ write_boz (st_parameter_dt *dtp, const fnode *f, const char *q, int n)\n       if (p == NULL)\n         return;\n       if (unlikely (is_char4_unit (dtp)))\n-\tmemset4 (p, 0, ' ', w);\n+\t{\n+\t  gfc_char4_t *p4 = (gfc_char4_t *) p;\n+\t  memset4 (p4, ' ', w);\n+\t}\n       else\n \tmemset (p, ' ', w);\n       goto done;\n@@ -606,25 +611,25 @@ write_boz (st_parameter_dt *dtp, const fnode *f, const char *q, int n)\n       gfc_char4_t *p4 = (gfc_char4_t *) p;\n       if (nblank < 0)\n \t{\n-\t  memset4 (p4, 0, '*', w);\n+\t  memset4 (p4, '*', w);\n \t  return;\n \t}\n \n       if (!dtp->u.p.no_leading_blank)\n \t{\n-\t  memset4 (p4, 0, ' ', nblank);\n+\t  memset4 (p4, ' ', nblank);\n \t  q += nblank;\n-\t  memset4 (p4, 0, '0', nzero);\n+\t  memset4 (p4, '0', nzero);\n \t  q += nzero;\n-\t  memcpy4 (p4, 0, q, digits);\n+\t  memcpy4 (p4, q, digits);\n \t}\n       else\n \t{\n-\t  memset4 (p4, 0, '0', nzero);\n+\t  memset4 (p4, '0', nzero);\n \t  q += nzero;\n-\t  memcpy4 (p4, 0, q, digits);\n+\t  memcpy4 (p4, q, digits);\n \t  q += digits;\n-\t  memset4 (p4, 0, ' ', nblank);\n+\t  memset4 (p4, ' ', nblank);\n \t  dtp->u.p.no_leading_blank = 0;\n \t}\n       return;\n@@ -685,7 +690,10 @@ write_decimal (st_parameter_dt *dtp, const fnode *f, const char *source,\n       if (p == NULL)\n         return;\n       if (unlikely (is_char4_unit (dtp)))\n-\tmemset4 (p, 0, ' ', w);\n+\t{\n+\t  gfc_char4_t *p4 = (gfc_char4_t *) p;\n+\t  memset4 (p4, ' ', w);\n+\t}\n       else\n \tmemset (p, ' ', w);\n       goto done;\n@@ -730,11 +738,11 @@ write_decimal (st_parameter_dt *dtp, const fnode *f, const char *source,\n       gfc_char4_t * p4 = (gfc_char4_t *) p;\n       if (nblank < 0)\n \t{\n-\t  memset4 (p4, 0, '*', w);\n+\t  memset4 (p4, '*', w);\n \t  goto done;\n \t}\n \n-      memset4 (p4, 0, ' ', nblank);\n+      memset4 (p4, ' ', nblank);\n       p4 += nblank;\n \n       switch (sign)\n@@ -749,10 +757,10 @@ write_decimal (st_parameter_dt *dtp, const fnode *f, const char *source,\n \t  break;\n \t}\n \n-      memset4 (p4, 0, '0', nzero);\n+      memset4 (p4, '0', nzero);\n       p4 += nzero;\n \n-      memcpy4 (p4, 0, q, digits);\n+      memcpy4 (p4, q, digits);\n       return;\n     }\n \n@@ -1192,7 +1200,10 @@ write_x (st_parameter_dt *dtp, int len, int nspaces)\n   if (nspaces > 0 && len - nspaces >= 0)\n     {\n       if (unlikely (is_char4_unit (dtp)))\n-\tmemset4 (p, len - nspaces, ' ', nspaces);\n+\t{\n+\t  gfc_char4_t *p4 = (gfc_char4_t *) p;\n+\t  memset4 (&p4[len - nspaces], ' ', nspaces);\n+\t}\n       else\n \tmemset (&p[len - nspaces], ' ', nspaces);\n     }\n@@ -1206,15 +1217,21 @@ write_x (st_parameter_dt *dtp, int len, int nspaces)\n    something goes wrong.  */\n \n static int\n-write_char (st_parameter_dt *dtp, char c)\n+write_char (st_parameter_dt *dtp, int c)\n {\n   char *p;\n \n   p = write_block (dtp, 1);\n   if (p == NULL)\n     return 1;\n+  if (unlikely (is_char4_unit (dtp)))\n+    {\n+      gfc_char4_t *p4 = (gfc_char4_t *) p;\n+      *p4 = c;\n+      return 0;\n+    }\n \n-  *p = c;\n+  *p = (uchar) c;\n \n   return 0;\n }\n@@ -1275,15 +1292,16 @@ write_integer (st_parameter_dt *dtp, const char *source, int length)\n \n   if (unlikely (is_char4_unit (dtp)))\n     {\n+      gfc_char4_t *p4 = (gfc_char4_t *) p;\n       if (dtp->u.p.no_leading_blank)\n \t{\n-\t  memcpy4 (p, 0, q, digits);\n-\t  memset4 (p, digits, ' ', width - digits);\n+\t  memcpy4 (p4, q, digits);\n+\t  memset4 (p4 + digits, ' ', width - digits);\n \t}\n       else\n \t{\n-\t  memset4 (p, 0, ' ', width - digits);\n-\t  memcpy4 (p, width - digits, q, digits);\n+\t  memset4 (p4, ' ', width - digits);\n+\t  memcpy4 (p4 + width - digits, q, digits);\n \t}\n       return;\n     }\n@@ -1346,7 +1364,7 @@ write_character (st_parameter_dt *dtp, const char *source, int kind, int length)\n \t  gfc_char4_t *p4 = (gfc_char4_t *) p;\n \n \t  if (d4 == ' ')\n-\t    memcpy4 (p4, 0, source, length);\n+\t    memcpy4 (p4, source, length);\n \t  else\n \t    {\n \t      *p4++ = d4;\n@@ -1495,8 +1513,13 @@ write_separator (st_parameter_dt *dtp)\n   p = write_block (dtp, options.separator_len);\n   if (p == NULL)\n     return;\n-\n-  memcpy (p, options.separator, options.separator_len);\n+  if (unlikely (is_char4_unit (dtp)))\n+    {\n+      gfc_char4_t *p4 = (gfc_char4_t *) p;\n+      memcpy4 (p4, options.separator, options.separator_len);\n+    }\n+  else\n+    memcpy (p, options.separator, options.separator_len);\n }\n \n "}, {"sha": "776e59119931f07943af8787c1dd751bd60a7359", "filename": "libgfortran/io/write_float.def", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/746e63273fa818385bee5ac91e0965d785015969/libgfortran%2Fio%2Fwrite_float.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/746e63273fa818385bee5ac91e0965d785015969/libgfortran%2Fio%2Fwrite_float.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite_float.def?ref=746e63273fa818385bee5ac91e0965d785015969", "patch": "@@ -440,7 +440,8 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n     {\n       if (unlikely (is_char4_unit (dtp)))\n \t{\n-\t  memset4 (out, 0, '*', w);\n+\t  gfc_char4_t *out4 = (gfc_char4_t *) out;\n+\t  memset4 (out4, '*', w);\n \t  return;\n \t}\n       star_fill (out, w);\n@@ -466,7 +467,7 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n \n       if ( ( nblanks > 0 ) && !dtp->u.p.no_leading_blank)\n \t{\n-\t  memset4 (out, 0, ' ', nblanks);\n+\t  memset4 (out4, ' ', nblanks);\n \t  out4 += nblanks;\n \t}\n \n@@ -486,15 +487,15 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n \t  if (nbefore > ndigits)\n \t    {\n \t      i = ndigits;\n-\t      memcpy4 (out4, 0, digits, i);\n+\t      memcpy4 (out4, digits, i);\n \t      ndigits = 0;\n \t      while (i < nbefore)\n \t\tout4[i++] = '0';\n \t    }\n \t  else\n \t    {\n \t      i = nbefore;\n-\t      memcpy4 (out4, 0, digits, i);\n+\t      memcpy4 (out4, digits, i);\n \t      ndigits -= i;\n \t    }\n \n@@ -521,7 +522,7 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n \t  else\n \t    i = nafter;\n \n-\t  memcpy4 (out4, 0, digits, i);\n+\t  memcpy4 (out4, digits, i);\n \t  while (i < nafter)\n \t    out4[i++] = '0';\n \n@@ -543,13 +544,13 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n #else\n \t  sprintf (buffer, \"%+0*d\", edigits, e);\n #endif\n-\t  memcpy4 (out4, 0, buffer, edigits);\n+\t  memcpy4 (out4, buffer, edigits);\n \t}\n \n       if (dtp->u.p.no_leading_blank)\n \t{\n \t  out4 += edigits;\n-\t  memset4 (out4 , 0, ' ' , nblanks);\n+\t  memset4 (out4, ' ' , nblanks);\n \t  dtp->u.p.no_leading_blank = 0;\n \t}\n       return;\n@@ -673,14 +674,20 @@ write_infnan (st_parameter_dt *dtp, const fnode *f, int isnan_flag, int sign_bit\n       if (nb < 3)\n \t{\n \t  if (unlikely (is_char4_unit (dtp)))\n-\t    memset4 (p, 0, '*', nb);\n+\t    {\n+\t      gfc_char4_t *p4 = (gfc_char4_t *) p;\n+\t      memset4 (p4, '*', nb);\n+\t    }\n \t  else\n \t    memset (p, '*', nb);\n \t  return;\n \t}\n \n       if (unlikely (is_char4_unit (dtp)))\n-        memset4 (p, 0, ' ', nb);\n+\t{\n+\t  gfc_char4_t *p4 = (gfc_char4_t *) p;\n+\t  memset4 (p4, ' ', nb);\n+\t}\n       else\n \tmemset(p, ' ', nb);\n \n@@ -693,7 +700,10 @@ write_infnan (st_parameter_dt *dtp, const fnode *f, int isnan_flag, int sign_bit\n \t      if (nb == 3)\n \t\t{\n \t\t  if (unlikely (is_char4_unit (dtp)))\n-\t\t    memset4 (p, 0, '*', nb);\n+\t\t    {\n+\t\t      gfc_char4_t *p4 = (gfc_char4_t *) p;\n+\t\t      memset4 (p4, '*', nb);\n+\t\t    }\n \t\t  else\n \t\t    memset (p, '*', nb);\n \t\t  return;\n@@ -711,11 +721,11 @@ write_infnan (st_parameter_dt *dtp, const fnode *f, int isnan_flag, int sign_bit\n \t      gfc_char4_t *p4 = (gfc_char4_t *) p;\n \t      if (nb > 8)\n \t\t/* We have room, so output 'Infinity' */\n-\t\tmemcpy4 (p4, nb - 8, \"Infinity\", 8);\n+\t\tmemcpy4 (p4 + nb - 8, \"Infinity\", 8);\n \t      else\n \t\t/* For the case of width equals 8, there is not enough room\n \t\t   for the sign and 'Infinity' so we go with 'Inf' */\n-\t\tmemcpy4 (p4, nb - 3, \"Inf\", 3);\n+\t\tmemcpy4 (p4 + nb - 3, \"Inf\", 3);\n \n \t      if (nb < 9 && nb > 3)\n \t        /* Put the sign in front of Inf */\n@@ -742,7 +752,10 @@ write_infnan (st_parameter_dt *dtp, const fnode *f, int isnan_flag, int sign_bit\n       else\n         {\n \t  if (unlikely (is_char4_unit (dtp)))\n-\t    memcpy4 (p, nb - 3, \"NaN\", 3);\n+\t    {\n+\t      gfc_char4_t *p4 = (gfc_char4_t *) p;\n+\t      memcpy4 (p4 + nb - 3, \"NaN\", 3);\n+\t    }\n \t  else\n \t    memcpy(p + nb - 3, \"NaN\", 3);\n \t}\n@@ -886,12 +899,15 @@ output_float_FMT_G_ ## x (st_parameter_dt *dtp, const fnode *f, \\\n   free (newf);\\\n \\\n   if (nb > 0 && !dtp->u.p.g0_no_blanks)\\\n-    { \\\n+    {\\\n       p = write_block (dtp, nb);\\\n       if (p == NULL)\\\n \treturn;\\\n       if (unlikely (is_char4_unit (dtp)))\\\n-\tmemset4 (p, 0, ' ', nb);\\\n+\t{\\\n+\t  gfc_char4_t *p4 = (gfc_char4_t *) p;\\\n+\t  memset4 (p4, ' ', nb);\\\n+\t}\\\n       else\\\n \tmemset (p, ' ', nb);\\\n     }\\"}]}