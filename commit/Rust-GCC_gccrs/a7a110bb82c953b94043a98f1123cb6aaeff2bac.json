{"sha": "a7a110bb82c953b94043a98f1123cb6aaeff2bac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdhMTEwYmI4MmM5NTNiOTQwNDNhOThmMTEyM2NiNmFhZWZmMmJhYw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2011-06-06T13:25:06Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2011-06-06T13:25:06Z"}, "message": "dce.c (reset_unmarked_insns_debug_uses): New.\n\n* dce.c (reset_unmarked_insns_debug_uses): New.\n(delete_unmarked_insns): Skip debug insns.\n(prescan_insns_for_dce): Likewise.\n(rest_of_handle_ud_dce): Reset debug uses of removed sets.\n* reg-stack.c (subst_stack_regs_in_debug_insn): Signal when no\nactive reg can be found.\n(subst_all_stack_regs_in_debug_insn): New.  Reset debug insn then.\n(convert_regs_1): Use it.\n\nFrom-SVN: r174699", "tree": {"sha": "a367b4f3bc02429f1f4641ec15be75b735d877e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a367b4f3bc02429f1f4641ec15be75b735d877e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7a110bb82c953b94043a98f1123cb6aaeff2bac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a110bb82c953b94043a98f1123cb6aaeff2bac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7a110bb82c953b94043a98f1123cb6aaeff2bac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a110bb82c953b94043a98f1123cb6aaeff2bac/comments", "author": null, "committer": null, "parents": [{"sha": "6d8402ac13cd591026591be13329c4eda24ce639", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d8402ac13cd591026591be13329c4eda24ce639", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d8402ac13cd591026591be13329c4eda24ce639"}], "stats": {"total": 83, "additions": 77, "deletions": 6}, "files": [{"sha": "c45fe7211b3a7a28627f3ef172cf544da2575f0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a110bb82c953b94043a98f1123cb6aaeff2bac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a110bb82c953b94043a98f1123cb6aaeff2bac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7a110bb82c953b94043a98f1123cb6aaeff2bac", "patch": "@@ -1,3 +1,14 @@\n+2011-06-06  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* dce.c (reset_unmarked_insns_debug_uses): New.\n+\t(delete_unmarked_insns): Skip debug insns.\n+\t(prescan_insns_for_dce): Likewise.\n+\t(rest_of_handle_ud_dce): Reset debug uses of removed sets.\n+\t* reg-stack.c (subst_stack_regs_in_debug_insn): Signal when no\n+\tactive reg can be found.\n+\t(subst_all_stack_regs_in_debug_insn): New.  Reset debug insn then.\n+\t(convert_regs_1): Use it.\n+\n 2011-06-06  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* tree-pretty-print.c (dump_function_header): Add flags."}, {"sha": "93464fedeede53e1e786db510bc1494415b5f16a", "filename": "gcc/dce.c", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a110bb82c953b94043a98f1123cb6aaeff2bac/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a110bb82c953b94043a98f1123cb6aaeff2bac/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=a7a110bb82c953b94043a98f1123cb6aaeff2bac", "patch": "@@ -493,6 +493,43 @@ remove_reg_equal_equiv_notes_for_defs (rtx insn)\n     remove_reg_equal_equiv_notes_for_regno (DF_REF_REGNO (*def_rec));\n }\n \n+/* Scan all BBs for debug insns and reset those that reference values\n+   defined in unmarked insns.  */\n+\n+static void\n+reset_unmarked_insns_debug_uses (void)\n+{\n+  basic_block bb;\n+  rtx insn, next;\n+\n+  FOR_EACH_BB_REVERSE (bb)\n+    FOR_BB_INSNS_REVERSE_SAFE (bb, insn, next)\n+      if (DEBUG_INSN_P (insn))\n+\t{\n+\t  df_ref *use_rec;\n+\n+\t  for (use_rec = DF_INSN_USES (insn); *use_rec; use_rec++)\n+\t    {\n+\t      df_ref use = *use_rec;\n+\t      struct df_link *defs;\n+\t      for (defs = DF_REF_CHAIN (use); defs; defs = defs->next)\n+\t\t{\n+\t\t  rtx insn;\n+\t\t  if (DF_REF_IS_ARTIFICIAL (defs->ref))\n+\t\t    continue;\n+\t\t  insn = DF_REF_INSN (defs->ref);\n+\t\t  if (!marked_insn_p (insn))\n+\t\t    break;\n+\t\t}\n+\t      if (!defs)\n+\t\tcontinue;\n+\t      /* ??? FIXME could we propagate the values assigned to\n+\t\t each of the DEFs?  */\n+\t      INSN_VAR_LOCATION_LOC (insn) = gen_rtx_UNKNOWN_VAR_LOC ();\n+\t      df_insn_rescan_debug_internal (insn);\n+\t    }\n+\t}\n+}\n \n /* Delete every instruction that hasn't been marked.  */\n \n@@ -505,7 +542,7 @@ delete_unmarked_insns (void)\n \n   FOR_EACH_BB_REVERSE (bb)\n     FOR_BB_INSNS_REVERSE_SAFE (bb, insn, next)\n-      if (INSN_P (insn))\n+      if (NONDEBUG_INSN_P (insn))\n \t{\n \t  /* Always delete no-op moves.  */\n \t  if (noop_move_p (insn))\n@@ -579,7 +616,7 @@ prescan_insns_for_dce (bool fast)\n   FOR_EACH_BB (bb)\n     {\n       FOR_BB_INSNS_REVERSE_SAFE (bb, insn, prev)\n-\tif (INSN_P (insn))\n+\tif (NONDEBUG_INSN_P (insn))\n \t  {\n \t    /* Don't mark argument stores now.  They will be marked\n \t       if needed when the associated CALL is marked.  */\n@@ -713,6 +750,9 @@ rest_of_handle_ud_dce (void)\n     }\n   VEC_free (rtx, heap, worklist);\n \n+  if (MAY_HAVE_DEBUG_INSNS)\n+    reset_unmarked_insns_debug_uses ();\n+\n   /* Before any insns are deleted, we must remove the chains since\n      they are not bidirectional.  */\n   df_remove_problem (df_chain);"}, {"sha": "dcde8920d7e037b5576ac0067e6556b8d7453b27", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a110bb82c953b94043a98f1123cb6aaeff2bac/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a110bb82c953b94043a98f1123cb6aaeff2bac/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=a7a110bb82c953b94043a98f1123cb6aaeff2bac", "patch": "@@ -1333,13 +1333,35 @@ subst_stack_regs_in_debug_insn (rtx *loc, void *data)\n     return 0;\n \n   hard_regno = get_hard_regnum (regstack, *loc);\n+\n+  /* If we can't find an active register, reset this debug insn.  */\n+  if (hard_regno == -1)\n+    return 1;\n+\n   gcc_assert (hard_regno >= FIRST_STACK_REG);\n \n   replace_reg (loc, hard_regno);\n \n   return -1;\n }\n \n+/* Substitute hardware stack regs in debug insn INSN, using stack\n+   layout REGSTACK.  If we can't find a hardware stack reg for any of\n+   the REGs in it, reset the debug insn.  */\n+\n+static void\n+subst_all_stack_regs_in_debug_insn (rtx insn, struct stack_def *regstack)\n+{\n+  int ret = for_each_rtx (&INSN_VAR_LOCATION_LOC (insn),\n+\t\t\t  subst_stack_regs_in_debug_insn,\n+\t\t\t  regstack);\n+\n+  if (ret == 1)\n+    INSN_VAR_LOCATION_LOC (insn) = gen_rtx_UNKNOWN_VAR_LOC ();\n+  else\n+    gcc_checking_assert (ret == 0);\n+}\n+\n /* Substitute new registers in PAT, which is part of INSN.  REGSTACK\n    is the current register layout.  Return whether a control flow insn\n    was deleted in the process.  */\n@@ -2947,8 +2969,7 @@ convert_regs_1 (basic_block block)\n \t    debug_insns_with_starting_stack++;\n \t  else\n \t    {\n-\t      for_each_rtx (&PATTERN (insn), subst_stack_regs_in_debug_insn,\n-\t\t\t    &regstack);\n+\t      subst_all_stack_regs_in_debug_insn (insn, &regstack);\n \n \t      /* Nothing must ever die at a debug insn.  If something\n \t\t is referenced in it that becomes dead, it should have\n@@ -2986,8 +3007,7 @@ convert_regs_1 (basic_block block)\n \t    continue;\n \n \t  debug_insns_with_starting_stack--;\n-\t  for_each_rtx (&PATTERN (insn), subst_stack_regs_in_debug_insn,\n-\t\t\t&bi->stack_in);\n+\t  subst_all_stack_regs_in_debug_insn (insn, &bi->stack_in);\n \t}\n     }\n "}]}