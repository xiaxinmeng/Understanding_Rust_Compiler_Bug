{"sha": "92a62aad855ff49dbd3c975aed87ed141ff447b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJhNjJhYWQ4NTVmZjQ5ZGJkM2M5NzVhZWQ4N2VkMTQxZmY0NDdiNA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-04-22T21:29:35Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-04-22T21:29:35Z"}, "message": "class.c (initialize_array): Don't set TREE_HAS_CONSTRUCTOR on braced initializer.\n\n\t* class.c (initialize_array): Don't set TREE_HAS_CONSTRUCTOR on\n\tbraced initializer.\n\t* cp-tree.h (BRACE_ENCLOSED_INITIALIZER_P): New macro.\n\t* decl.c (reshape_init): Use it.\n\t* init.c (perform_member_init): Remove redundant condition.\n\t(build_aggr_init): Adjust to handle brace-enclosed initializers\n\tcorrectly.\n\t(expand_default_init): Use BRACE_ENCLOSED_INITIALIZER_P.\n\t* parser.c (cp_parser_initializer_clause): Do not set\n\tTREE_HAS_CONSTRUCTOR on the initializer.\n\t* rtti.c (tinfo_base_init): Likewise.\n\t(generic_initializer): Likewise.\n\t(ptr_initializer): Likewise.\n\t(ptm_initializer): Likewise.\n\t(class_initializer): Likewise.\n\t(get_pseudo_ti_init): Likewise.\n\t* typeck2.c (digest_init): Use BRACE_ENCLOSED_INITIALIZER_P.\n\n\t* g++.dg/ext/complit3.C: New test.\n\nFrom-SVN: r81052", "tree": {"sha": "0ba13a72c0e5f3f23ed463ff62b80ef65ac60f72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ba13a72c0e5f3f23ed463ff62b80ef65ac60f72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92a62aad855ff49dbd3c975aed87ed141ff447b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92a62aad855ff49dbd3c975aed87ed141ff447b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92a62aad855ff49dbd3c975aed87ed141ff447b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92a62aad855ff49dbd3c975aed87ed141ff447b4/comments", "author": null, "committer": null, "parents": [{"sha": "838a4849fab52af1c5d54703b4591d403544dd7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/838a4849fab52af1c5d54703b4591d403544dd7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/838a4849fab52af1c5d54703b4591d403544dd7f"}], "stats": {"total": 136, "additions": 72, "deletions": 64}, "files": [{"sha": "dc6dbcfd2710a0dbeac2b704c2859fcb8731b5a4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a62aad855ff49dbd3c975aed87ed141ff447b4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a62aad855ff49dbd3c975aed87ed141ff447b4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=92a62aad855ff49dbd3c975aed87ed141ff447b4", "patch": "@@ -1,3 +1,23 @@\n+2004-04-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* class.c (initialize_array): Don't set TREE_HAS_CONSTRUCTOR on\n+\tbraced initializer.\n+\t* cp-tree.h (BRACE_ENCLOSED_INITIALIZER_P): New macro.\n+\t* decl.c (reshape_init): Use it.\n+\t* init.c (perform_member_init): Remove redundant condition.\n+\t(build_aggr_init): Adjust to handle brace-enclosed initializers\n+\tcorrectly.\n+\t(expand_default_init): Use BRACE_ENCLOSED_INITIALIZER_P.\n+\t* parser.c (cp_parser_initializer_clause): Do not set\n+\tTREE_HAS_CONSTRUCTOR on the initializer.\n+\t* rtti.c (tinfo_base_init): Likewise.\n+\t(generic_initializer): Likewise.\n+\t(ptr_initializer): Likewise.\n+\t(ptm_initializer): Likewise.\n+\t(class_initializer): Likewise.\n+\t(get_pseudo_ti_init): Likewise.\n+\t* typeck2.c (digest_init): Use BRACE_ENCLOSED_INITIALIZER_P.\n+\t\n 2004-04-22  Alan Modra  <amodra@bigpond.net.au>\n \n \t* name-lookup.c (anonymous_namespace_name): Make static."}, {"sha": "9a9272bf57443a55d1d5c7ddb4e56c89e343dcda", "filename": "gcc/cp/class.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a62aad855ff49dbd3c975aed87ed141ff447b4/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a62aad855ff49dbd3c975aed87ed141ff447b4/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=92a62aad855ff49dbd3c975aed87ed141ff447b4", "patch": "@@ -6729,7 +6729,6 @@ initialize_array (tree decl, tree inits)\n   context = DECL_CONTEXT (decl);\n   DECL_CONTEXT (decl) = NULL_TREE;\n   DECL_INITIAL (decl) = build_constructor (NULL_TREE, inits);\n-  TREE_HAS_CONSTRUCTOR (DECL_INITIAL (decl)) = 1;\n   cp_finish_decl (decl, DECL_INITIAL (decl), NULL_TREE, 0);\n   DECL_CONTEXT (decl) = context;\n }"}, {"sha": "8f4465f232243c545e26deefb396da02206611d7", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a62aad855ff49dbd3c975aed87ed141ff447b4/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a62aad855ff49dbd3c975aed87ed141ff447b4/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=92a62aad855ff49dbd3c975aed87ed141ff447b4", "patch": "@@ -2408,13 +2408,17 @@ struct lang_decl GTY(())\n    When appearing in a SAVE_EXPR, it means that underneath\n    is a call to a constructor.\n \n-   When appearing in a CONSTRUCTOR, it means that it was\n-   a GNU C constructor expression.\n+   When appearing in a CONSTRUCTOR, the expression is a\n+   compound literal.\n \n    When appearing in a FIELD_DECL, it means that this field\n    has been duly initialized in its constructor.  */\n #define TREE_HAS_CONSTRUCTOR(NODE) (TREE_LANG_FLAG_4 (NODE))\n \n+/* True if NODE is a brace-enclosed initializer.  */\n+#define BRACE_ENCLOSED_INITIALIZER_P(NODE) \\\n+  (TREE_CODE (NODE) == CONSTRUCTOR && !TREE_TYPE (NODE))\n+\n #define EMPTY_CONSTRUCTOR_P(NODE) (TREE_CODE (NODE) == CONSTRUCTOR\t   \\\n \t\t\t\t   && CONSTRUCTOR_ELTS (NODE) == NULL_TREE \\\n \t\t\t\t   && ! TREE_HAS_CONSTRUCTOR (NODE))"}, {"sha": "1793fffafece089d58ca696c3a729907e01d263a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a62aad855ff49dbd3c975aed87ed141ff447b4/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a62aad855ff49dbd3c975aed87ed141ff447b4/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=92a62aad855ff49dbd3c975aed87ed141ff447b4", "patch": "@@ -4151,8 +4151,7 @@ reshape_init (tree type, tree *initp)\n      enclosed elements.  Advance past the brace-enclosed initializer\n      now.  */\n   if (TREE_CODE (old_init_value) == CONSTRUCTOR\n-      && TREE_TYPE (old_init_value) == NULL_TREE\n-      && TREE_HAS_CONSTRUCTOR (old_init_value))\n+      && BRACE_ENCLOSED_INITIALIZER_P (old_init_value))\n     {\n       *initp = TREE_CHAIN (old_init);\n       TREE_CHAIN (old_init) = NULL_TREE;\n@@ -4222,8 +4221,7 @@ reshape_init (tree type, tree *initp)\n   else\n     {\n       /* Build a CONSTRUCTOR to hold the contents of the aggregate.  */  \n-      new_init = build_constructor (type, NULL_TREE);\n-      TREE_HAS_CONSTRUCTOR (new_init) = 1;\n+      new_init = build_constructor (NULL_TREE, NULL_TREE);\n \n       if (CLASS_TYPE_P (type))\n \t{\n@@ -4283,7 +4281,8 @@ reshape_init (tree type, tree *initp)\n \t\t}\n \t    }\n \t}\n-      else if ((TREE_CODE (type) == ARRAY_TYPE)|| (TREE_CODE (type) == VECTOR_TYPE))\n+      else if (TREE_CODE (type) == ARRAY_TYPE\n+\t       || TREE_CODE (type) == VECTOR_TYPE)\n \t{\n \t  tree index;\n \t  tree max_index;\n@@ -4399,7 +4398,8 @@ check_initializer (tree decl, tree init, int flags, tree *cleanup)\n     init = grok_reference_init (decl, type, init, cleanup);\n   else if (init)\n     {\n-      if (TREE_CODE (init) == CONSTRUCTOR && TREE_HAS_CONSTRUCTOR (init))\n+      if (TREE_CODE (init) == CONSTRUCTOR \n+\t  && BRACE_ENCLOSED_INITIALIZER_P (init))\n \t{\n \t  /* [dcl.init] paragraph 13,\n \t     If T is a scalar type, then a declaration of the form\n@@ -4424,15 +4424,13 @@ check_initializer (tree decl, tree init, int flags, tree *cleanup)\n \t array size from the initializer.  */\n       maybe_deduce_size_from_array_init (decl, init);\n       type = TREE_TYPE (decl);\n-      if (TREE_CODE (init) == CONSTRUCTOR && TREE_HAS_CONSTRUCTOR (init))\n-\tTREE_TYPE (init) = type;\n \n       if (TYPE_HAS_CONSTRUCTOR (type) || TYPE_NEEDS_CONSTRUCTING (type))\n \t{\n \t  if (TREE_CODE (type) == ARRAY_TYPE)\n \t    goto initialize_aggr;\n \t  else if (TREE_CODE (init) == CONSTRUCTOR\n-\t\t   && TREE_HAS_CONSTRUCTOR (init))\n+\t\t   && BRACE_ENCLOSED_INITIALIZER_P (init))\n \t    {\n \t      if (TYPE_NON_AGGREGATE_CLASS (type))\n \t\t{"}, {"sha": "58d9f6db97f96bb4881a2b0313a79452fd1b3374", "filename": "gcc/cp/init.c", "status": "modified", "additions": 11, "deletions": 24, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a62aad855ff49dbd3c975aed87ed141ff447b4/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a62aad855ff49dbd3c975aed87ed141ff447b4/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=92a62aad855ff49dbd3c975aed87ed141ff447b4", "patch": "@@ -340,8 +340,7 @@ perform_member_init (tree member, tree init)\n \t  finish_expr_stmt (init);\n \t}\n     }\n-  else if (TYPE_NEEDS_CONSTRUCTING (type)\n-\t   || (init && TYPE_HAS_CONSTRUCTOR (type)))\n+  else if (TYPE_NEEDS_CONSTRUCTING (type))\n     {\n       if (explicit\n \t  && TREE_CODE (type) == ARRAY_TYPE\n@@ -1091,34 +1090,23 @@ build_aggr_init (tree exp, tree init, int flags)\n \n   if (TREE_CODE (type) == ARRAY_TYPE)\n     {\n-      /* Must arrange to initialize each element of EXP\n-\t from elements of INIT.  */\n-      tree itype = init ? TREE_TYPE (init) : NULL_TREE;\n-      \n-      if (init && !itype)\n+      /* An array may not be initialized use the parenthesized\n+\t initialization form -- unless the initializer is \"()\".  */\n+      if (init && TREE_CODE (init) == TREE_LIST)\n \t{\n-\t  /* Handle bad initializers like:\n-\t     class COMPLEX {\n-\t     public:\n-\t       double re, im;\n-\t       COMPLEX(double r = 0.0, double i = 0.0) {re = r; im = i;};\n-\t       ~COMPLEX() {};\n-\t     };\n-\n-\t     int main(int argc, char **argv) {\n-\t       COMPLEX zees(1.0, 0.0)[10];\n-\t     }\n-\t  */\n \t  error (\"bad array initializer\");\n \t  return error_mark_node;\n \t}\n+      /* Must arrange to initialize each element of EXP\n+\t from elements of INIT.  */\n+      tree itype = init ? TREE_TYPE (init) : NULL_TREE;\n       if (cp_type_quals (type) != TYPE_UNQUALIFIED)\n \tTREE_TYPE (exp) = TYPE_MAIN_VARIANT (type);\n       if (itype && cp_type_quals (itype) != TYPE_UNQUALIFIED)\n-\tTREE_TYPE (init) = TYPE_MAIN_VARIANT (itype);\n+\titype = TREE_TYPE (init) = TYPE_MAIN_VARIANT (itype);\n       stmt_expr = build_vec_init (exp, NULL_TREE, init,\n-\t\t\t\t  init && same_type_p (TREE_TYPE (init),\n-\t\t\t\t\t\t       TREE_TYPE (exp)));\n+\t\t\t\t  itype && same_type_p (itype,\n+\t\t\t\t\t\t\tTREE_TYPE (exp)));\n       TREE_READONLY (exp) = was_const;\n       TREE_THIS_VOLATILE (exp) = was_volatile;\n       TREE_TYPE (exp) = type;\n@@ -1190,8 +1178,7 @@ expand_default_init (tree binfo, tree true_exp, tree exp, tree init, int flags)\n \t   to run a new constructor; and catching an exception, where we\n \t   have already built up the constructor call so we could wrap it\n \t   in an exception region.  */;\n-      else if (TREE_CODE (init) == CONSTRUCTOR \n-\t       && TREE_HAS_CONSTRUCTOR (init))\n+      else if (BRACE_ENCLOSED_INITIALIZER_P (init))\n \t{\n \t  /* A brace-enclosed initializer for an aggregate.  */\n \t  my_friendly_assert (CP_AGGREGATE_TYPE_P (type), 20021016);"}, {"sha": "0732a650452d0617fc7a457d0c6bfb1e56a9c242", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a62aad855ff49dbd3c975aed87ed141ff447b4/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a62aad855ff49dbd3c975aed87ed141ff447b4/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=92a62aad855ff49dbd3c975aed87ed141ff447b4", "patch": "@@ -11541,10 +11541,6 @@ cp_parser_initializer_clause (cp_parser* parser, bool* non_constant_p)\n       cp_lexer_consume_token (parser->lexer);\n       /* Create a CONSTRUCTOR to represent the braced-initializer.  */\n       initializer = make_node (CONSTRUCTOR);\n-      /* Mark it with TREE_HAS_CONSTRUCTOR.  This should not be\n-\t necessary, but check_initializer depends upon it, for\n-\t now.  */\n-      TREE_HAS_CONSTRUCTOR (initializer) = 1;\n       /* If it's not a `}', then there is a non-trivial initializer.  */\n       if (cp_lexer_next_token_is_not (parser->lexer, CPP_CLOSE_BRACE))\n \t{"}, {"sha": "337c6be94d758872037e3000b0f3ca11eb8ca508", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a62aad855ff49dbd3c975aed87ed141ff447b4/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a62aad855ff49dbd3c975aed87ed141ff447b4/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=92a62aad855ff49dbd3c975aed87ed141ff447b4", "patch": "@@ -807,7 +807,7 @@ tinfo_base_init (tree desc, tree target)\n   init = tree_cons (NULL_TREE, decay_conversion (name_decl), init);\n   \n   init = build_constructor (NULL_TREE, nreverse (init));\n-  TREE_HAS_CONSTRUCTOR (init) = TREE_CONSTANT (init) = TREE_STATIC (init) = 1;\n+  TREE_CONSTANT (init) = TREE_STATIC (init) = 1;\n   init = tree_cons (NULL_TREE, init, NULL_TREE);\n   \n   return init;\n@@ -823,7 +823,7 @@ generic_initializer (tree desc, tree target)\n   tree init = tinfo_base_init (desc, target);\n   \n   init = build_constructor (NULL_TREE, init);\n-  TREE_HAS_CONSTRUCTOR (init) = TREE_CONSTANT (init) = TREE_STATIC (init) = 1;\n+  TREE_CONSTANT (init) = TREE_STATIC (init) = 1;\n   return init;\n }\n \n@@ -850,7 +850,7 @@ ptr_initializer (tree desc, tree target, bool *non_public_ptr)\n                     init);\n   \n   init = build_constructor (NULL_TREE, nreverse (init));\n-  TREE_HAS_CONSTRUCTOR (init) = TREE_CONSTANT (init) = TREE_STATIC (init) = 1;\n+  TREE_CONSTANT (init) = TREE_STATIC (init) = 1;\n   return init;\n }\n \n@@ -887,7 +887,7 @@ ptm_initializer (tree desc, tree target, bool *non_public_ptr)\n \t\t    init);  \n   \n   init = build_constructor (NULL_TREE, nreverse (init));\n-  TREE_HAS_CONSTRUCTOR (init) = TREE_CONSTANT (init) = TREE_STATIC (init) = 1;\n+  TREE_CONSTANT (init) = TREE_STATIC (init) = 1;\n   return init;  \n }\n \n@@ -955,7 +955,7 @@ class_initializer (tree desc, tree target, tree trail)\n   \n   TREE_CHAIN (init) = trail;\n   init = build_constructor (NULL_TREE, init);\n-  TREE_HAS_CONSTRUCTOR (init) = TREE_CONSTANT (init) = TREE_STATIC (init) = 1;\n+  TREE_CONSTANT (init) = TREE_STATIC (init) = 1;\n   return init;  \n }\n \n@@ -1072,11 +1072,9 @@ get_pseudo_ti_init (tree type, tree var_desc, bool *non_public_p)\n               base_init = tree_cons (NULL_TREE, offset, base_init);\n               base_init = tree_cons (NULL_TREE, tinfo, base_init);\n               base_init = build_constructor (NULL_TREE, base_init);\n-\t      TREE_HAS_CONSTRUCTOR (base_init) = 1;\n               base_inits = tree_cons (NULL_TREE, base_init, base_inits);\n             }\n \t  base_inits = build_constructor (NULL_TREE, base_inits);\n-\t  TREE_HAS_CONSTRUCTOR (base_inits) = 1;\n \t  base_inits = tree_cons (NULL_TREE, base_inits, NULL_TREE);\n \t  /* Prepend the number of bases.  */\n \t  base_inits = tree_cons (NULL_TREE,"}, {"sha": "b49d4201c50a35cd3a6e7dc86c40b9df15f362f9", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a62aad855ff49dbd3c975aed87ed141ff447b4/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a62aad855ff49dbd3c975aed87ed141ff447b4/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=92a62aad855ff49dbd3c975aed87ed141ff447b4", "patch": "@@ -488,8 +488,6 @@ digest_init (tree type, tree init, tree* tail)\n   enum tree_code code = TREE_CODE (type);\n   tree element = NULL_TREE;\n   tree old_tail_contents = NULL_TREE;\n-  /* Nonzero if INIT is a braced grouping.  */\n-  int raw_constructor;\n \n   /* By default, assume we use one element from a list.\n      We correct this later in the sole case where it is not true.  */\n@@ -519,10 +517,7 @@ digest_init (tree type, tree init, tree* tail)\n   if (TREE_CODE (init) == NON_LVALUE_EXPR)\n     init = TREE_OPERAND (init, 0);\n \n-  raw_constructor = (TREE_CODE (init) == CONSTRUCTOR \n-\t\t     && TREE_HAS_CONSTRUCTOR (init));\n-\n-  if (raw_constructor\n+  if (BRACE_ENCLOSED_INITIALIZER_P (init)\n       && CONSTRUCTOR_ELTS (init) != 0\n       && TREE_CHAIN (CONSTRUCTOR_ELTS (init)) == 0)\n     {\n@@ -594,7 +589,7 @@ digest_init (tree type, tree init, tree* tail)\n       || code == BOOLEAN_TYPE || code == COMPLEX_TYPE\n       || TYPE_PTR_TO_MEMBER_P (type))\n     {\n-      if (raw_constructor)\n+      if (BRACE_ENCLOSED_INITIALIZER_P (init))\n \t{\n \t  if (element == 0)\n \t    {\n@@ -603,7 +598,7 @@ digest_init (tree type, tree init, tree* tail)\n \t    }\n \t  init = element;\n \t}\n-      while (TREE_CODE (init) == CONSTRUCTOR && TREE_HAS_CONSTRUCTOR (init))\n+      while (BRACE_ENCLOSED_INITIALIZER_P (init))\n \t{\n \t  pedwarn (\"braces around scalar initializer for `%T'\", type);\n \t  init = CONSTRUCTOR_ELTS (init);\n@@ -627,15 +622,16 @@ digest_init (tree type, tree init, tree* tail)\n \n   if (code == ARRAY_TYPE || code == VECTOR_TYPE || IS_AGGR_TYPE_CODE (code))\n     {\n-      if (raw_constructor && TYPE_NON_AGGREGATE_CLASS (type)\n-\t  && TREE_HAS_CONSTRUCTOR (init))\n+      if (BRACE_ENCLOSED_INITIALIZER_P (init))\n \t{\n-\t  error (\"subobject of type `%T' must be initialized by constructor, not by `%E'\",\n-\t\t    type, init);\n-\t  return error_mark_node;\n+\t  if (TYPE_NON_AGGREGATE_CLASS (type))\n+\t    {\n+\t      error (\"subobject of type `%T' must be initialized by constructor, not by `%E'\",\n+\t\t     type, init);\n+\t      return error_mark_node;\n+\t    }\n+\t  return process_init_constructor (type, init, (tree *)0);\n \t}\n-      else if (raw_constructor)\n-\treturn process_init_constructor (type, init, (tree *)0);\n       else if (can_convert_arg (type, TREE_TYPE (init), init)\n \t       || TYPE_NON_AGGREGATE_CLASS (type))\n \t/* These are never initialized from multiple constructor elements.  */;\n@@ -877,7 +873,7 @@ process_init_constructor (tree type, tree init, tree* elts)\n \n \t      /* Warn when some struct elements are implicitly initialized.  */\n \t      if (extra_warnings\n-\t          && (!init || TREE_HAS_CONSTRUCTOR (init)))\n+\t          && (!init || BRACE_ENCLOSED_INITIALIZER_P (init)))\n \t\twarning (\"missing initializer for member `%D'\", field);\n \t    }\n \t  else\n@@ -893,7 +889,7 @@ process_init_constructor (tree type, tree init, tree* elts)\n \t      /* Warn when some struct elements are implicitly initialized\n \t\t to zero.  */\n \t      if (extra_warnings\n-\t          && (!init || TREE_HAS_CONSTRUCTOR (init)))\n+\t          && (!init || BRACE_ENCLOSED_INITIALIZER_P (init)))\n \t\twarning (\"missing initializer for member `%D'\", field);\n \n \t      if (! zero_init_p (TREE_TYPE (field)))"}, {"sha": "aa479b4aa23707f152e7e32966c56f51652d613f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a62aad855ff49dbd3c975aed87ed141ff447b4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a62aad855ff49dbd3c975aed87ed141ff447b4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=92a62aad855ff49dbd3c975aed87ed141ff447b4", "patch": "@@ -1,3 +1,7 @@\n+2004-04-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.dg/ext/complit3.C: New test.\n+\n 2004-04-21  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* gcc.dg/altivec-1.c: XFAIL for powerpc-eabispe."}, {"sha": "56f3d41be649b2766f79968ec4961b06772ba9be", "filename": "gcc/testsuite/g++.dg/ext/complit3.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a62aad855ff49dbd3c975aed87ed141ff447b4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a62aad855ff49dbd3c975aed87ed141ff447b4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit3.C?ref=92a62aad855ff49dbd3c975aed87ed141ff447b4", "patch": "@@ -0,0 +1,6 @@\n+int Compound_Literals_0()\n+{\n+  static int y[] = (int []) {1, 2, 3}; // { dg-error \"\" }\n+  static int z[] = (int [3]) {1}; // { dg-error \"\" }\n+  return y[0]+z[0]; \n+}"}]}