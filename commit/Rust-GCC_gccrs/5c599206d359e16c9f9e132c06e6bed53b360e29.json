{"sha": "5c599206d359e16c9f9e132c06e6bed53b360e29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM1OTkyMDZkMzU5ZTE2YzlmOWUxMzJjMDZlNmJlZDUzYjM2MGUyOQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2010-09-06T21:40:15Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2010-09-06T21:40:15Z"}, "message": "re PR fortran/36931 (unneeded temporary for array intrinsic binop scalar)\n\n2010-09-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/36931\n\t* frontend-passes.c (optimize_binop_array_assignment):  New\n\tfunction.\n\t(optimize_assignment):  Call it.\n\n2010-09-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/36931\n\t* gfortran.dg/dependency_35.f90:  New test.\n\nFrom-SVN: r163934", "tree": {"sha": "7f483f37e3085a9a70ddb013265554c37adaa91e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f483f37e3085a9a70ddb013265554c37adaa91e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c599206d359e16c9f9e132c06e6bed53b360e29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c599206d359e16c9f9e132c06e6bed53b360e29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c599206d359e16c9f9e132c06e6bed53b360e29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c599206d359e16c9f9e132c06e6bed53b360e29/comments", "author": null, "committer": null, "parents": [{"sha": "4e18507b6834ce629c8bef80adacb19ef205279f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e18507b6834ce629c8bef80adacb19ef205279f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e18507b6834ce629c8bef80adacb19ef205279f"}], "stats": {"total": 114, "additions": 114, "deletions": 0}, "files": [{"sha": "22810def8c2369ae97aab5464004099fe021f9c2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c599206d359e16c9f9e132c06e6bed53b360e29/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c599206d359e16c9f9e132c06e6bed53b360e29/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5c599206d359e16c9f9e132c06e6bed53b360e29", "patch": "@@ -1,3 +1,10 @@\n+2010-09-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/36931\n+\t* frontend-passes.c (optimize_binop_array_assignment):  New\n+\tfunction.\n+\t(optimize_assignment):  Call it.\n+\n 2010-09-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/34145"}, {"sha": "17b31fe57913b13a323fdc386758a49ef25f0a95", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c599206d359e16c9f9e132c06e6bed53b360e29/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c599206d359e16c9f9e132c06e6bed53b360e29/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=5c599206d359e16c9f9e132c06e6bed53b360e29", "patch": "@@ -235,6 +235,77 @@ optimize_code_node (gfc_code *c)\n     }\n }\n \n+/* Replace code like\n+   a = matmul(b,c) + d\n+   with\n+   a = matmul(b,c) ;   a = a + d\n+   where the array function is not elemental and not allocatable\n+   and does not depend on the left-hand side.\n+*/\n+\n+static bool\n+optimize_binop_array_assignment (gfc_code *c, gfc_expr **rhs, bool seen_op)\n+{\n+  gfc_expr *e;\n+\n+  e = *rhs;\n+  if (e->expr_type == EXPR_OP)\n+    {\n+      switch (e->value.op.op)\n+\t{\n+\t  /* Unary operators and exponentiation: Only look at a single\n+\t     operand.  */\n+\tcase INTRINSIC_NOT:\n+\tcase INTRINSIC_UPLUS:\n+\tcase INTRINSIC_UMINUS:\n+\tcase INTRINSIC_PARENTHESES:\n+\tcase INTRINSIC_POWER:\n+\t  if (optimize_binop_array_assignment (c, &e->value.op.op1, seen_op))\n+\t    return true;\n+\t  break;\n+\n+\tdefault:\n+\t  /* Binary operators.  */\n+\t  if (optimize_binop_array_assignment (c, &e->value.op.op1, true))\n+\t    return true;\n+\n+\t  if (optimize_binop_array_assignment (c, &e->value.op.op2, true))\n+\t    return true;\n+\n+\t  break;\n+\t}\n+    }\n+  else if (seen_op && e->expr_type == EXPR_FUNCTION && e->rank > 0\n+\t   && ! (e->value.function.esym \n+\t\t && (e->value.function.esym->attr.elemental \n+\t\t     || e->value.function.esym->attr.allocatable))\n+\t   && ! (e->value.function.isym && e->value.function.isym->elemental))\n+    {\n+\n+      gfc_code *n;\n+      gfc_expr *new_expr;\n+\n+      /* Insert a new assignment statement after the current one.  */\n+      n = XCNEW (gfc_code);\n+      n->op = EXEC_ASSIGN;\n+      n->loc = c->loc;\n+      n->next = c->next;\n+      c->next = n;\n+\n+      n->expr1 = gfc_copy_expr (c->expr1);\n+      n->expr2 = c->expr2;\n+      new_expr = gfc_copy_expr (c->expr1);\n+      c->expr2 = e;\n+      *rhs = new_expr;\n+      \n+      return true;\n+\n+    }\n+\n+  /* Nothing to optimize.  */\n+  return false;\n+}\n+\n /* Optimizations for an assignment.  */\n \n static void\n@@ -259,6 +330,13 @@ optimize_assignment (gfc_code * c)\n \t}\n     }\n \n+  if (lhs->rank > 0 && gfc_check_dependency (lhs, rhs, true) == 0)\n+    optimize_binop_array_assignment (c, &rhs, false);\n+\n+  /* If we insert a statement after the current one, the surrounding loop in\n+     optimize_code will call optimize_assignment on the inserted statement\n+     anyway, so there is no need to call optimize_assignment again.  */\n+\n   /* All direct optimizations have been done.  Now it's time\n      to optimize the rhs.  */\n "}, {"sha": "cf07101cc0f0feaade94598b8cddccdfbcbb0e32", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c599206d359e16c9f9e132c06e6bed53b360e29/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c599206d359e16c9f9e132c06e6bed53b360e29/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c599206d359e16c9f9e132c06e6bed53b360e29", "patch": "@@ -1,3 +1,8 @@\n+2010-09-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/36931\n+\t* gfortran.dg/dependency_35.f90:  New test.\n+\n 2010-09-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/34145"}, {"sha": "11b9e8b94496b28a2052cc91f5018876d8566923", "filename": "gcc/testsuite/gfortran.dg/dependency_35.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c599206d359e16c9f9e132c06e6bed53b360e29/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_35.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c599206d359e16c9f9e132c06e6bed53b360e29/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_35.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_35.f90?ref=5c599206d359e16c9f9e132c06e6bed53b360e29", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do compile }\n+! { dg-options \"-Warray-temporaries -O\" }\n+module foo\n+  implicit none\n+contains\n+  pure function bar(i,j)\n+    integer, intent(in) :: i,j\n+    integer, dimension(2,2) :: bar\n+    bar = 33\n+  end function bar\n+end module foo\n+\n+program main\n+  use foo\n+  implicit none\n+  integer a(2,2), b(2,2),c(2,2), d(2,2), e(2)\n+\n+  read (*,*) b, c, d\n+  a = matmul(b,c) + d\n+  a = b + bar(3,4)\n+  a = bar(3,4)*5 + b\n+  e = sum(b,1) + 3\n+end program main\n+! { dg-final { cleanup-modules \"foo\" } }"}]}